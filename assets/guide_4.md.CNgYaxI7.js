import{_ as c,o as n,c as r,a as t,m as h,t as d,C as g,M as _,U as y,f as u,F as b,p as v,e as w,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},A={class:"review-title"},R={class:"review-content"};function P(i,e,l,m,s,a){return n(),r("div",q,[t("div",T,[t("div",A,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),h(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",R,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),h(d(l.poem.solution),1)])])])}const I=c(k,[["render",P],["__scopeId","data-v-b43c5c5b"]]),C=JSON.parse(`[{"question":"Design a programming function that, when supplied with a textual string as input, executes a procedure to reverse the sequence of characters in the string. The function should then identify and return the longest palindromic substring present in the newly reversed string.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the reversed string of s. def is_palindrome(sub): return sub == sub[::-1] def longest_palindrome(s): n = len(s) if n == 0: return \\"\\" longest = s[0] for i in range(n): for j in range(i + len(longest), n + 1): substring = s[i:j] if is_palindrome(substring) and len(substring) > len(longest): longest = substring return longest reversed_s = s[::-1] return longest_palindrome(reversed_s)"},{"question":"Given a string and a number, print the string the number of times specified by the number. However, the string must be printed in reverse order each time it is repeated. Instead of using a loop or built-in functions, you need to come up with a recursive solution to solve this problem. The string will only contain uppercase and lowercase letters. The time complexity of the solution should be O(n), where n is the length of the string.","solution":"def print_reversed_string_recursive(s, n): Recursively prints the reverse of the string s, n times. Parameters: - s (str): The string to be reversed and printed. - n (int): The number of times the reversed string should be printed. # Base case: if n is 0, return an empty string if n == 0: return \\"\\" # Recursive case reversed_s = s[::-1] # Reverse the string return reversed_s + \\"n\\" + print_reversed_string_recursive(s, n-1)"},{"question":"Write a function in Python that takes two arguments, a list of strings and a letter, and returns the strings which contains the letter. The function should return a list of the words in the order they appear in the original list.","solution":"def filter_words_containing_letter(words, letter): Returns a list of words that contains the specified letter. Parameters: words (list): List of strings to filter letter (str): The letter to filter words by Returns: list: List of words that contain the specified letter return [word for word in words if letter in word]"},{"question":"Write a script to compress a large text file. The script should read the file line by line, compress each line using the gzip compression algorithm, and save the compressed lines to a new file. In addition, handle any exceptions that might occur during the process, such as file not found or insufficient disk space.","solution":"import gzip import os def compress_file(input_file_path, output_file_path): Compresses the content of a text file line by line using gzip compression algorithm. try: with open(input_file_path, 'rt') as file_in, gzip.open(output_file_path, 'wt') as file_out: for line in file_in: file_out.write(line) return True except FileNotFoundError: print(\\"The file was not found.\\") return False except IOError as e: print(f\\"An I/O error occurred: {e}\\") return False"},{"question":"Write a python code for the Caesar Cipher encryption technique which accepts an alphanumeric input and a shift number from the user. The program should allow the shift number to represent both the number of positions each letter in the text is shifted and the base for the numeric characters. It should also maintain case-sensitivity of the alphabets. In addition, implement functionality to decrypt the message back to its original form.","solution":"def caesar_cipher_encrypt(text, shift): Encrypts the given text using Caesar Cipher with the specified shift. result = [] for char in text: if char.isalpha(): if char.islower(): shifted = (ord(char) - 97 + shift) % 26 + 97 else: shifted = (ord(char) - 65 + shift) % 26 + 65 result.append(chr(shifted)) elif char.isdigit(): shifted = (int(char) + shift) % 10 result.append(str(shifted)) else: result.append(char) return ''.join(result) def caesar_cipher_decrypt(cipher_text, shift): Decrypts the given cipher text using Caesar Cipher with the specified shift. return caesar_cipher_encrypt(cipher_text, -shift)"},{"question":"Formulate a Python function to produce all possible combinations from a given list of letters, where the length of each combination is defined by the user input. Also, make sure the function can handle repeated letters differently (i.e., 'aa' should give distinct results in combinations). Letters can be repeated in the list. Implement and optimize this function with time and space complexity considerations in mind.","solution":"from itertools import combinations def letter_combinations(letters, combination_length): Generate all possible combinations of the given length from the list of letters. Handles repeated letters distinctly. if not letters or combination_length <= 0: return [] return list(combinations(letters, combination_length))"},{"question":"Create a program that takes two inputs, an array of strings and an array of integers. Output an array with the strings at the same indices as the integers.","solution":"def map_strings_to_indices(strings, indices): Takes an array of strings and an array of integers and returns a new array with the strings at the positions specified by the integers. Args: strings: List of strings. indices: List of integers. Returns: List of strings arranged according to the indices. if len(strings) != len(indices): raise ValueError(\\"Both arrays must be of the same length\\") # Create a result list of the same length as strings result = [None] * len(strings) for string, index in zip(strings, indices): result[index] = string return result"},{"question":"Given a directed graph G (V,E) with a source node s and a destination node t, I want you to write a Python program that calculates the shortest path from s to t using the Ford-Fulkerson algorithm. The edge weights represent the capacity of the respective paths and the program should aim to maximize the flow from s to t. As an added requirement, the graph may contain cycles and the program should avoid getting stuck in an infinite loop. Can you write such a program? Please make sure to thoroughly test the correctness and efficiency of your solution.","solution":"from collections import defaultdict class Graph: def __init__(self, vertices): self.V = vertices # Number of vertices self.graph = defaultdict(list) def add_edge(self, u, v, w): self.graph[u].append((v, w)) def bfs(self, s, t, parent): visited = [False] * self.V queue = [s] visited[s] = True while queue: u = queue.pop(0) for ind, val in enumerate(self.graph[u]): v, capacity = val if visited[v] == False and capacity > 0: queue.append(v) visited[v] = True parent[v] = u if v == t: return True return False def ford_fulkerson(self, source, sink): parent = [-1] * self.V max_flow = 0 while self.bfs(source, sink, parent): path_flow = float(\\"Inf\\") s = sink while s != source: for v, c in self.graph[parent[s]]: if v == s: path_flow = min(path_flow, c) s = parent[s] v = sink while v != source: u = parent[v] for ind, val in enumerate(self.graph[u]): vnode, cap = val if vnode == v: self.graph[u][ind] = (vnode, cap - path_flow) break for ind, val in enumerate(self.graph[v]): vnode, cap = val if vnode == u: self.graph[v][ind] = (vnode, cap + path_flow) break v = parent[v] max_flow += path_flow return max_flow"},{"question":"Develop a Python program that inputs a whole number and prints \\"prime\\" if the number is a prime number, or \\"composite\\" if the number is a composite number. Additionally, if the number is composite, the program should also output all of its prime factors.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False elif n <= 3: return True elif n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_factors(n): Helper function to find and return all prime factors of a given number n. factors = [] # Check for number of twos while n % 2 == 0: factors.append(2) n //= 2 # Check for odd factors for i in range(3, int(n**0.5)+1, 2): while n % i == 0: factors.append(i) n //= i if n > 2: factors.append(n) return factors def check_prime_composite(n): Function that checks if the number is prime or composite and returns a string indicating \\"prime\\" or \\"composite\\". If composite, it also returns its prime factors. if is_prime(n): return \\"prime\\" else: factors = prime_factors(n) return f\\"composite: prime factors are {factors}\\""},{"question":"Develop a python function that organizes a list of non-negative integers in ascending order based on the number of ones in their binary representation. In cases where the number of ones is the same, the integers should be sorted based on their decimal values.","solution":"def sort_by_ones(arr): Sorts a list of non-negative integers by the number of ones in their binary representation. In case of tie, sorts based on their decimal values. def count_ones(num): return bin(num).count('1') # Sort by number of ones in binary representation and then by decimal value sorted_arr = sorted(arr, key=lambda x: (count_ones(x), x)) return sorted_arr"},{"question":"Given two sorted lists x and y, write a Python program to find out the union list and intersection list of the two given lists.","solution":"def union_and_intersection(x, y): Returns the union and intersection of two sorted lists. Parameters: x (list): First sorted list. y (list): Second sorted list. Returns: tuple: A tuple containing two lists - union list and intersection list. union_list = [] intersection_list = [] i, j = 0, 0 while i < len(x) and j < len(y): if x[i] < y[j]: union_list.append(x[i]) i += 1 elif x[i] > y[j]: union_list.append(y[j]) j += 1 else: union_list.append(x[i]) intersection_list.append(x[i]) i += 1 j += 1 # Append remaining elements of x, if any while i < len(x): union_list.append(x[i]) i += 1 # Append remaining elements of y, if any while j < len(y): union_list.append(y[j]) j += 1 return union_list, intersection_list"},{"question":"Reverse the order of an array without using built-in functions in Python. Additionally, implement an error handling mechanism that will give a custom error message for any non-list inputs and also handle cases when list items cannot be reversed.","solution":"class CustomError(Exception): def __init__(self, message): self.message = message def reverse_array(arr): Reverses the order of an array without using built-in functions. Parameters: arr (list): The list to be reversed. Returns: list: The reversed list. if not isinstance(arr, list): raise CustomError(\\"Input must be a list\\") try: reversed_arr = [] for i in range(len(arr)-1, -1, -1): reversed_arr.append(arr[i]) return reversed_arr except Exception as e: raise CustomError(\\"An error occurred while reversing the list\\")"},{"question":"Write a Python function that compares two given strings (string1, and string2) and returns the count of matching characters in the same position, along with a list that includes both strings with matching characters.","solution":"def compare_strings(string1, string2): Returns the count of matching characters in the same position, along with a list that includes both strings with matching characters. # Ensure both strings are of the same length length = min(len(string1), len(string2)) matching_count = 0 new_string1 = [] new_string2 = [] for i in range(length): if string1[i] == string2[i]: matching_count += 1 new_string1.append(string1[i]) new_string2.append(string1[i]) else: new_string1.append('*') new_string2.append('*') return matching_count, [''.join(new_string1), ''.join(new_string2)]"},{"question":"Propose a method to get the intersection of two lists without using built-in functions in Python and also optimize the solution for large lists. Additionally, ensure that the final result does not contain any duplicates.","solution":"def intersection_of_lists(list1, list2): Returns a list containing the intersection of list1 and list2 without duplicates. Each list should be made into a set to eliminate duplicates before the intersection is found. if not list1 or not list2: return [] set1 = {} result = [] # Use a dictionary to mimic a set for list1 for item in list1: if item not in set1: set1[item] = True # Find intersection items for item in list2: if item in set1 and set1[item]: result.append(item) set1[item] = False # Ensure duplicates are not added to result return result"},{"question":"Create an advanced Python function that accepts a list of complex numbers and a threshold positive integer. The function should not only filter and return the complex numbers with an absolute value larger than the given threshold but also manipulate these values by increasing their magnitude by 5% before adding them to a queue.","solution":"import queue import math def process_complex_numbers(complex_list, threshold): Filters complex numbers with an absolute value greater than the given threshold, increases their magnitude by 5%, and adds them to a queue. Parameters: complex_list (list): A list of complex numbers. threshold (int): The threshold positive integer. Returns: queue.Queue: A queue with the filtered and modified complex numbers. q = queue.Queue() for number in complex_list: if abs(number) > threshold: new_magnitude = abs(number) * 1.05 phase = math.atan2(number.imag, number.real) new_number = complex(new_magnitude * math.cos(phase), new_magnitude * math.sin(phase)) q.put(new_number) return q"},{"question":"Develop a Python program that converts an entire directory of image files, not just single images, from PNG format to the superior WebP format using the Python Imaging Library (PIL) for image data manipulation. Your program should further include an option for users to choose the quality of the output files and the possibility to skip files that have already been processed. Finally, implement a feature to measure and print the time it takes to convert all the images, along with the size for each converted file (in bytes).","solution":"import os from PIL import Image import time def convert_images_to_webp(input_directory, output_directory, quality=80, skip_existing=True): Converts PNG images in input_directory to WebP format and saves them in output_directory. :param input_directory: Directory containing PNG images to be converted :param output_directory: Directory to save converted WebP images :param quality: Quality of output WebP images (default: 80) :param skip_existing: Skip files that have already been processed (default: True) :return: List of tuples containing the file name, time taken for conversion, and size of converted file in bytes if not os.path.exists(output_directory): os.makedirs(output_directory) conversion_details = [] for filename in os.listdir(input_directory): if filename.lower().endswith('.png'): input_path = os.path.join(input_directory, filename) output_filename = filename.rsplit('.', 1)[0] + '.webp' output_path = os.path.join(output_directory, output_filename) if skip_existing and os.path.exists(output_path): continue with Image.open(input_path) as img: start_time = time.time() img.save(output_path, 'webp', quality=quality) end_time = time.time() conversion_time = end_time - start_time converted_file_size = os.path.getsize(output_path) conversion_details.append((filename, conversion_time, converted_file_size)) return conversion_details"},{"question":"Generate a Python program that takes a positive integer number as input and prints the digital root of the number (the iterative sum of its digits until the result has only one digit).","solution":"def digital_root(n): Returns the digital root of a positive integer n. The digital root is the iterative sum of its digits until the result has only one digit. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"Develop two separate functions: one to check whether the provided data is a list or not, and another to verify if that list is a nested list (a list containing at least one other list as an element). Additionally, make sure that your functions are robust enough to handle large data inputs without significantly compromising performance.","solution":"def is_list(data): Check if the provided data is a list. Args: data: Any type of data. Returns: bool: True if data is a list, False otherwise. return isinstance(data, list) def is_nested_list(lst): Check if the provided list is a nested list (contains at least one other list as an element). Args: lst: List to be checked. Returns: bool: True if lst contains at least one nested list, False otherwise. if not is_list(lst): raise ValueError(\\"Provided data is not a list\\") for item in lst: if isinstance(item, list): return True return False"},{"question":"Rewrite code that not only factors in the gravitational pull of Earth on a wind turbine, but also contains an accurate representation of aerodynamic forces at play. Using the initial position, orientation, and air properties such as varied velocity and altitude, implement a sophisticated algorithm to predict how the turbine would move, with an added feature that allows a user to input any extra force that could influence the turbine.","solution":"import math # Constants GRAVITY = 9.81 # m/s^2, gravitational acceleration on Earth's surface DENSITY_AIR = 1.225 # kg/m^3, density of air at sea level def calculate_aerodynamic_force(air_speed, blade_area, drag_coefficient): Calculate the aerodynamic force exerted on the wind turbine. Parameters: - air_speed: Speed of the air (m/s) - blade_area: Area of the turbine blades (m^2) - drag_coefficient: Coefficient of drag Returns: - aerodynamic_force: Aerodynamic force (N) return 0.5 * DENSITY_AIR * air_speed**2 * blade_area * drag_coefficient def calculate_gravitational_force(mass): Calculate the gravitational force exerted on the wind turbine. Parameters: - mass: Mass of the wind turbine (kg) Returns: - gravitational_force: Gravitational force (N) return mass * GRAVITY def predict_turbine_movement(position, orientation, air_speed, altitude, blade_area, drag_coefficient, mass, extra_force): Predict how the turbine would move based on given parameters. Parameters: - position: Initial position of the turbine (tuple of x, y, z coordinates in meters) - orientation: Tuple representing orientation (pitch, yaw, roll in degrees) - air_speed: Speed of the air (m/s) - altitude: Altitude of the turbine (meters) - blade_area: Area of the turbine blades (m^2) - drag_coefficient: Coefficient of drag - mass: Mass of the wind turbine (kg) - extra_force: Additional force acting on the turbine (tuple of x, y, z components in Newtons) Returns: - new_position: New position of the turbine (tuple of x, y, z coordinates in meters) # Calculate forces aerodynamic_force = calculate_aerodynamic_force(air_speed, blade_area, drag_coefficient) gravitational_force = calculate_gravitational_force(mass) # Total force calculation (simplified for demonstration purposes) total_force_x = extra_force[0] # assuming aerodynamic force along x-axis is represented by extra force total_force_y = -gravitational_force + extra_force[1] # assuming gravitational force along y-axis total_force_z = extra_force[2] # assuming additional forces may act along z-axis # Simplified new position calculation (real implementation would require more complex physics) new_position = ( position[0] + total_force_x, position[1] + total_force_y, position[2] + total_force_z ) return new_position"},{"question":"Create a python function that takes a string as input and returns a boolean if the string contains only uppercase letters. Additionally, the function should return the count of uppercase letters in the string.","solution":"def is_all_uppercase(s): Returns a tuple (boolean, int). The boolean indicates whether the string contains only uppercase letters. The int is the count of uppercase letters in the string. count_uppercase = sum(1 for c in s if c.isupper()) return (count_uppercase == len(s) and len(s) > 0, count_uppercase)"},{"question":"Write a program that uses the insertion sort algorithm to sort an array of integers in non-decreasing order. Your program should prompt the user to enter the size of the array and the elements of the array. After the user has inputted all the elements, the program should sort the array using the insertion sort algorithm and print the sorted array.","solution":"def insertion_sort(arr): for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a Python program that solves the Travelling Salesman Problem (TSP) using brute force. The program should allow the user to enter distances between multiple cities, then find the shortest possible path that visits each city exactly once and returns to the original city. Ensure that your solution handles the case when the number of cities is too large to be practically computed by brute force by returning \\"Not Possible Due to High Complexity\\". Additionally, the user should have the ability to specify a time limit for the execution of the program. Note: this problem requires handling permutations, working with the time module for timeouts, and handling sys.maxsize for solver initialization.","solution":"import itertools import time import sys def calculate_route_length(route, distances): Calculates the total length of the route. Args: route (list): The order of cities to visit. distances (list of list): The distance matrix. Returns: float: The total length of the route. total_length = 0 for i in range(len(route) - 1): total_length += distances[route[i]][route[i + 1]] total_length += distances[route[-1]][route[0]] # Return to the starting point return total_length def tsp_brute_force(distances, time_limit=60): Finds the shortest possible path that visits each city exactly once and returns to the original city. Uses brute-force approach. Args: distances (list of list): The distance matrix. time_limit (int): The maximum execution time in seconds. Returns: tuple: A tuple containing the shortest route and its length, or an error message if time constraint is exceeded. num_cities = len(distances) if num_cities > 10: # Arbitrary limit for practical computation for brute-force method return \\"Not Possible Due to High Complexity\\" shortest_length = sys.maxsize shortest_route = None start_time = time.time() for perm in itertools.permutations(range(num_cities)): elapsed_time = time.time() - start_time if elapsed_time > time_limit: return \\"Time Exceeded\\" current_length = calculate_route_length(perm, distances) if current_length < shortest_length: shortest_length = current_length shortest_route = perm return shortest_route, shortest_length"},{"question":"Write a Python function that reverses a string using recursion and returns the reversed string. The function should have a time complexity of O(n), where n is the length of the string.","solution":"def reverse_string_recursive(s): Reverses a string using recursion. Parameters: s (str): The input string to be reversed. Returns: str: The reversed string. # Base case: if the string is empty or a single character, return it as is if len(s) <= 1: return s # Recursive case: reverse the substring from the second character onward, # and then concatenate the first character at the end. return reverse_string_recursive(s[1:]) + s[0]"},{"question":"Write a Python script to attempt removing an element from a list at a specified index and handle the case when the index is out of bounds. Test the script with multiple data sets to verify its integrity and reliability under various conditions. Task: Removing an element from a list at a given index and handling index out-of-bound cases.","solution":"def remove_element(lst, index): Removes the element at the specified index from the list. If the index is out of bounds, it returns the original list and a flag indicating failure. Parameters: lst (list): The list from which to remove the element. index (int): The index at which to remove the element. Returns: tuple: A tuple containing the modified list and a boolean flag. The flag is True if removal was successful, False otherwise. if index < 0 or index >= len(lst): return lst, False else: return lst[:index] + lst[index+1:], True"},{"question":"Develop a 5*5 grid using the NumPy module, where every element within the matrix should be initialized with the numerical value of -1. Also, write the function to rotate this grid by a given angle (90, 180, 270 degrees) with respect to its center. The rotated grid's layout should be mirrored when the grid has an odd number as its dimension. Remember not to use any built-in rotate function for this task.","solution":"import numpy as np def create_grid(): Creates a 5x5 numpy grid initialized with -1. return np.full((5, 5), -1) def rotate_grid(grid, angle): Rotates the 5x5 grid by the given angle (90, 180, 270 degrees). When the grid has an odd dimension, it mirrors the grid layout. if angle == 90: return np.array([[grid[4 - j][i] for j in range(5)] for i in range(5)]) elif angle == 180: return np.array([[grid[4 - i][4 - j] for j in range(5)] for i in range(5)]) elif angle == 270: return np.array([[grid[j][4 - i] for j in range(5)] for i in range(5)]) else: raise ValueError(\\"Angle must be one of 90, 180, or 270 degrees.\\") grid = create_grid() print(\\"Original Grid:\\") print(grid) rotated_grid_90 = rotate_grid(grid, 90) print(\\"Rotated Grid by 90 degrees:\\") print(rotated_grid_90) rotated_grid_180 = rotate_grid(grid, 180) print(\\"Rotated Grid by 180 degrees:\\") print(rotated_grid_180) rotated_grid_270 = rotate_grid(grid, 270) print(\\"Rotated Grid by 270 degrees:\\") print(rotated_grid_270)"},{"question":"Generate a correct Python code to turn a list of strings into a list of their lengths, ensuring that the code is implemented using recursion. The input list should have a minimum length of 5 strings and a maximum length of 10 strings.","solution":"def list_of_lengths(strings): Returns a list of the lengths of each string in the input list using recursion. Parameters: strings (list): A list containing strings with a minimum length of 5 and a maximum length of 10. Returns: list: A list of integers where each integer is the length of the corresponding string in the input list. if not strings: return [] return [len(strings[0])] + list_of_lengths(strings[1:])"},{"question":"Write a Python function that takes two strings as arguments and returns True if the first string is an anagram of the second string, and False otherwise.","solution":"def are_anagrams(str1, str2): Returns True if str1 is an anagram of str2, otherwise returns False. return sorted(str1) == sorted(str2)"},{"question":"Implement a recursive algorithm that can accurately calculate the factorial of a given positive integer. The algorithm should handle large inputs efficiently and should also include error handling for non-integer and negative inputs. Additionally, incorporate memoization to optimize repeated calculations.","solution":"def factorial(n, memo={}): Returns the factorial of a given positive integer n using recursion and memoization. Raises a ValueError if n is negative or not an integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n in memo: return memo[n] if n == 0 or n == 1: result = 1 else: result = n * factorial(n - 1, memo) memo[n] = result return result"},{"question":"Create multiple random arrays of integers in Python using numpy, each array having dimensions m x n. Each element in the array should be a randomly generated integer between 0 and a limit 'l'. Make sure the elements in each array are unique within its row and column. Here, m, n, and l are positive integers and will be provided as input. Also, implement a function to verify the uniqueness of elements within each row and column.","solution":"import numpy as np from typing import List def generate_unique_random_array(m: int, n: int, l: int) -> np.ndarray: Generates an m by n array of unique random integers between 0 and l. Args: m (int): Number of rows. n (int): Number of columns. l (int): Maximum limit for random integers. Returns: np.ndarray: m x n array with unique integers in each row and column. if l < max(m, n): raise ValueError(\\"Limit 'l' must be at least the maximum of m or n to ensure unique elements.\\") arr = np.full((m, n), -1) for i in range(m): for j in range(n): while True: num = np.random.randint(0, l + 1) if num not in arr[i, :] and num not in arr[:, j]: arr[i, j] = num break return arr def check_unique_elements(arr: np.ndarray) -> bool: Checks if all elements are unique in each row and column of the array. Args: arr (np.ndarray): The input array to check. Returns: bool: True if all elements are unique in each row and column, False otherwise. m, n = arr.shape for i in range(m): if len(set(arr[i, :])) != n: return False for j in range(n): if len(set(arr[:, j])) != m: return False return True"},{"question":"Implement k-means algorithm from scratch using Python and numpy, without using any machine learning libraries' built-in functions (e.g. scikit-learn). Additionally, ensure your implementation can handle both numerical and categorical data, and evaluate the clustering outcome using Silhouette Score.","solution":"import numpy as np from sklearn.preprocessing import LabelEncoder from sklearn.metrics import silhouette_score def kmeans(X, k, max_iters=100, tolerance=0.0001): Perform k-means clustering. Parameters: - X: numpy array or list of data points (rows) and features (columns). - k: number of clusters. - max_iters: max number of iterations (default 100). - tolerance: the threshold for considering convergence (default 0.0001). Returns: - centroids: numpy array of final centroids. - labels: numpy array of assigned cluster labels for each data point. - s_score: Silhouette Score as a measure of clustering quality. X = np.array(X, dtype=np.float64) n_samples, n_features = X.shape # Initialize centroids randomly from the samples centroids = X[np.random.choice(n_samples, k, replace=False)] for _ in range(max_iters): # Assign each sample to the nearest centroid distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2) labels = np.argmin(distances, axis=1) # Compute new centroids from the clusters new_centroids = np.array([X[labels == j].mean(axis=0) for j in range(k)]) # Check for convergence if np.linalg.norm(new_centroids - centroids) < tolerance: break centroids = new_centroids # Compute Silhouette Score s_score = silhouette_score(X, labels) if k > 1 else 0 return centroids, labels, s_score def preprocess_data(X): Converts categorical data in X to numeric using LabelEncoder. Parameters: - X: List of data points (rows) containing mixed attributes. Returns: - X_transformed: numpy array with categorical data transformed to numeric. X_transformed = np.array(X, dtype=object) for i in range(X_transformed.shape[1]): if isinstance(X_transformed[0, i], str): le = LabelEncoder() X_transformed[:, i] = le.fit_transform(X_transformed[:, i]) return X_transformed.astype(np.float64)"},{"question":"Write a python program to merge two lists of equal size into a dictionary, but the dictionary should only include elements from list1 that have a corresponding element in list2 that is divisible by 2. If there is a repeating element in list1, it should be added to the dictionary only once.","solution":"def merge_lists_to_dict(list1, list2): Merge two lists of equal size into a dictionary, where the dictionary includes elements from list1 that have a corresponding element in list2 divisible by 2. Repeating elements in list1 are included only once in the dictionary. result = {} seen_elements = set() for key, value in zip(list1, list2): if value % 2 == 0 and key not in seen_elements: result[key] = value seen_elements.add(key) return result"},{"question":"Create a program in Python that takes a list of strings as input and sorts them in alphabetical order without using any built-in sorting functions. The program should also handle case sensitivity and output the sorted list. Additionally, include a feature that allows the user to choose between ascending and descending order.","solution":"def custom_sort(strings, ascending=True): Sorts a list of strings in alphabetical order without using built-in sorting functions. :param strings: List of strings to be sorted. :param ascending: Boolean flag to determine sorting order. True for ascending, False for descending. :return: Sorted list of strings. def compare(str1, str2): Compares two strings alphabetically, case insensitive. :param str1: First string. :param str2: Second string. :return: Negative if str1 < str2, 0 if str1 == str2, positive if str1 > str2. str1 = str1.lower() str2 = str2.lower() if str1 < str2: return -1 elif str1 > str2: return 1 else: return 0 # Implementing bubble sort for simplicity for i in range(len(strings)): for j in range(0, len(strings) - i - 1): if ascending and compare(strings[j], strings[j + 1]) > 0: strings[j], strings[j + 1] = strings[j + 1], strings[j] elif not ascending and compare(strings[j], strings[j + 1]) < 0: strings[j], strings[j + 1] = strings[j + 1], strings[j] return strings"},{"question":"How can I create a Flask application that calculates the factorial of a number? Please include a route for submitting the number and ensure the application returns the correct response.","solution":"from flask import Flask, request, jsonify app = Flask(__name__) def factorial(n): if n == 0: return 1 elif n < 0: return None else: fact = 1 for i in range(1, n + 1): fact *= i return fact @app.route('/factorial', methods=['POST']) def calculate_factorial(): data = request.get_json() number = data.get('number') if number is None or not isinstance(number, int): response = { 'error': 'Invalid input. Please provide an integer.' } return jsonify(response), 400 result = factorial(number) if result is None: response = { 'error': 'Input must be a non-negative integer.' } return jsonify(response), 400 response = { 'number': number, 'factorial': result } return jsonify(response), 200 if __name__ == '__main__': app.run(debug=True)"},{"question":"Develop a for loop structure to iterate through the numeric values contained within the given list, and append those values to a new list if they are prime numbers.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def extract_primes_from_list(numbers): Iterates through the list \`numbers\`, appending prime numbers to a new list. prime_numbers = [] for num in numbers: if is_prime(num): prime_numbers.append(num) return prime_numbers"},{"question":"Write a Python program that reads data from a comma-separated values (CSV) file using a context manager and generator function. The generator should yield individual rows as dictionaries mapping column headers to cell values. Handle potential common file-related exceptions gracefully, display user-friendly messages, and ensure that the file is properly closed after reading.","solution":"import csv def read_csv_as_dicts(file_path): Generator function that reads a CSV file and yields rows as dictionaries. Column headers are mapped to cell values. :param file_path: The path to the CSV file. :yield: A dictionary representing a row in the CSV file. try: with open(file_path, mode='r', newline='', encoding='utf-8') as csvfile: reader = csv.DictReader(csvfile) for row in reader: yield row except FileNotFoundError: print(f\\"File not found: {file_path}\\") except PermissionError: print(f\\"Permission denied: {file_path}\\") except Exception as e: print(f\\"An error occurred: {e}\\") # Example usage (this line would not be included in the submitted code): # for row in read_csv_as_dicts('sample.csv'): # print(row)"},{"question":"I'm trying to make a content crawler for a thesis project on the topic of privacy policy analysis. It takes as input a list of URLs that point to website privacy policies, then it goes through the content of each page and extracts all policy statements. For this, I want it to first remove all the HTML tags and any information that is not directly related to policy statements. How can I go about building such a crawler using Python? Also, are there any existing libraries or toolkits that would be useful for this task?","solution":"import requests from bs4 import BeautifulSoup import re def extract_policy_statements(urls): Takes a list of URLs pointing to website privacy policies, extracts and cleans the policy statements by removing HTML tags and non-policy content. :param urls: List of URLs pointing to privacy policies :return: A list of cleaned policy statements policy_statements = [] for url in urls: try: response = requests.get(url) response.raise_for_status() soup = BeautifulSoup(response.text, 'html.parser') # Extract text from paragraphs or specific HTML tags likely to contain policy statements paragraphs = soup.find_all(['p', 'li', 'div', 'span']) # Combine all text content all_text = ' '.join([p.get_text() for p in paragraphs]) # Optionally remove unwanted characters and sections not related to policy cleaned_text = re.sub(r's+', ' ', all_text) # Normalize whitespace cleaned_text = re.sub(r'[^a-zA-Z0-9s,.]', '', cleaned_text) # Remove special chars, can be adjusted as needed policy_statements.append(cleaned_text) except requests.RequestException as e: # Handle exceptions like connection errors, timeouts, etc. print(f\\"Error fetching {url}: {e}\\") policy_statements.append(\\"\\") return policy_statements"},{"question":"Write code to print the following data structure in an easily readable format. Add a function to validate if all the keys ('name', 'age', 'languages') exist within the data and if the element under 'languages' is a list.","solution":"def print_data(data): for person in data: print(f\\"Name: {person['name']}\\") print(f\\"Age: {person['age']}\\") print(\\"Languages:\\") for language in person['languages']: print(f\\" - {language}\\") print() # Add a new line for better readability def validate_data(data): required_keys = {'name', 'age', 'languages'} for person in data: # Check if all required keys are present if not all(key in person for key in required_keys): return False # Check if 'languages' key contains a list if not isinstance(person['languages'], list): return False return True"},{"question":"Given a string and an int n, write a function to extract the subsequence of length n from the string in a circular manner, meaning if the length of the string is smaller than n, you should continue indexing from the start of the string again until n characters are retrieved.","solution":"def circular_subsequence(s, n): Extracts a subsequence of length n from the string s in a circular manner. if not s: return \\"\\" return ''.join(s[i % len(s)] for i in range(n))"},{"question":"Implement a function in Python that filters odd numbers from a given list which contains both integers and floating point numbers. Consider exception handling for non-numeric values. Also, implement a separate function to check if a number is prime. Use this prime-checking function to filter out odd numbers which are not prime from the list.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_odd_primes(lst): Filters out odd numbers from the list which are not prime. Arguments: lst -- a list containing integers, floating point numbers, and possibly non-numeric values Returns: A list of odd prime numbers. result = [] for item in lst: try: num = float(item) if num.is_integer() and int(num) % 2 != 0 and is_prime(int(num)): result.append(int(num)) except ValueError: # Skip non-numeric values continue return result"},{"question":"Reverse the following string without using any built-in reverse functions in Python and with a time complexity of O(n), and a space complexity of O(1).","solution":"def reverse_string(s): Reverses the input string without using built-in reverse functions. s = list(s) left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1 return ''.join(s)"},{"question":"Automate the process of downloading a website's favicon using Python.","solution":"import requests from urllib.parse import urljoin from pathlib import Path def download_favicon(url, favicon_path='favicon.ico'): Downloads the favicon of the given website URL and saves it to the specified path. :param url: Website URL to download the favicon from. :param favicon_path: Path to save the downloaded favicon. Defaults to 'favicon.ico'. :returns: Path to the downloaded favicon if successful, None otherwise. favicon_url = urljoin(url, '/favicon.ico') try: response = requests.get(favicon_url, stream=True) response.raise_for_status() with open(favicon_path, 'wb') as out_file: for chunk in response.iter_content(chunk_size=8192): out_file.write(chunk) return Path(favicon_path) except requests.exceptions.RequestException: return None"},{"question":"code the following: 'I am the owner of this land' using simple substitution cipher with a key, where each letter is shifted 10 places from its original position, wrapping from 'z' to 'a' when necessary. Spaces and special characters should remain the same.","solution":"def shift_char(c, shift): Shifts a character by the given shift amount in the alphabet, wrapping around if necessary. if 'a' <= c <= 'z': return chr((ord(c) - ord('a') + shift) % 26 + ord('a')) elif 'A' <= c <= 'Z': return chr((ord(c) - ord('A') + shift) % 26 + ord('A')) else: return c def simple_substitution_cipher(text, shift): Encodes the given text using a simple substitution cipher with the given shift. return ''.join(shift_char(c, shift) for c in text) # Specific encoding for the given example shift = 10 text = \\"I am the owner of this land\\" encoded_text = simple_substitution_cipher(text, shift)"},{"question":"Write a code to filter out the odd numbers from an array and return the sum of the remaining even numbers.","solution":"def sum_of_even_numbers(numbers): Filters out odd numbers and returns the sum of remaining even numbers in the list. Parameters: numbers (list): List of integers Returns: int: Sum of even numbers even_numbers = [num for num in numbers if num % 2 == 0] return sum(even_numbers)"},{"question":"Develop an interactive code simulation in a language of your choice which demonstrates the functioning of a queue data structure. Ensure that the simulation encompasses the crucial characteristics and operations of a queue such as, insertion at the end (enqueue), deletion from the front (dequeue), viewing the front element (peek), checking if the queue is empty and also adding complexity by limiting the queue size. Additionally, the simulation must incorporate a clear process for error handling in case an attempt is made to enqueue an element in a full queue or dequeue from an empty queue.","solution":"class QueueFullException(Exception): pass class QueueEmptyException(Exception): pass class Queue: def __init__(self, max_size): Initializes a queue with a maximum size. self.queue = [] self.max_size = max_size def enqueue(self, item): Adds an item at the end of the queue. Raises QueueFullException if the queue is full. if len(self.queue) >= self.max_size: raise QueueFullException(\\"Queue is full\\") self.queue.append(item) def dequeue(self): Removes an item from the front of the queue and returns it. Raises QueueEmptyException if the queue is empty. if len(self.queue) == 0: raise QueueEmptyException(\\"Queue is empty\\") return self.queue.pop(0) def peek(self): Returns the front item in the queue without removing it. Raises QueueEmptyException if the queue is empty. if len(self.queue) == 0: raise QueueEmptyException(\\"Queue is empty\\") return self.queue[0] def is_empty(self): Checks if the queue is empty. return len(self.queue) == 0 def size(self): Returns the current size of the queue. return len(self.queue)"},{"question":"Debug this code snippet to print a list of all 6-digit numbers, where each digit must be unique, the number must be even, and the sum of the digits must be a multiple of 3. Additionally, the number must not contain any prime digits.","solution":"def unique_digits(num): num_str = str(num) return len(set(num_str)) == len(num_str) def is_even(num): return num % 2 == 0 def sum_of_digits(num): return sum(int(d) for d in str(num)) def contains_prime_digit(num): prime_digits = {'2', '3', '5', '7'} return any(d in prime_digits for d in str(num)) def find_valid_numbers(): valid_numbers = [] for num in range(100000, 1000000): if unique_digits(num) and is_even(num) and sum_of_digits(num) % 3 == 0 and not contains_prime_digit(num): valid_numbers.append(num) return valid_numbers # Call the function and print to verify the solution print(find_valid_numbers())"},{"question":"Write an optimized python function to calculate the factorial of a number using recursion.","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Develop a code segment that simulates a user input requesting five positive, distinct prime integers. Then, your code should sort these numbers in descending order and compute their cumulative product. Remember to validate input for prime number condition, uniqueness, and positivity.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def get_five_primes(): Request five positive, distinct, prime integers from the user. Then sort them in descending order and compute their cumulative product. primes = [] while len(primes) < 5: try: num = int(input(f\\"Enter prime number {len(primes) + 1}: \\")) if num <= 0: print(\\"Number must be positive.\\") elif not is_prime(num): print(f\\"{num} is not a prime number.\\") elif num in primes: print(f\\"{num} has already been entered.\\") else: primes.append(num) except ValueError: print(\\"Input must be an integer.\\") primes.sort(reverse=True) product = 1 for prime in primes: product *= prime return primes, product"},{"question":"Given a doubly linked list where every node is connected to both the next node and the previous node, you are required to implement a function to invert the list, such that each node points to its successor in the order reverse to the original list, while preserving the connections between all nodes. The list is only known to have at least one node, and the node will have a \`data\` attribute that can carry any integer.","solution":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None def invert_doubly_linked_list(head): Inverts a doubly linked list. :param head: Head node of the doubly linked list :return: Head node of the inverted doubly linked list current = head prev = None while current: next_node = current.next # Swap the next and prev pointers current.next = prev current.prev = next_node # Move to the next node in the original list prev = current current = next_node # After the loop prev will be the new head return prev"},{"question":"Write a code that takes an array of integers as argument and returns the sum of the array elements. The code should handle arrays of any size, ranging from 0 to 10^6 elements. Additionally, the code should only use a single loop for iterating through the array, and should not use any built-in functions or libraries for summation. Furthermore, the code should exclude any negative numbers from being included in the sum.","solution":"def sum_positive_elements(arr): Returns the sum of the positive elements in the array. total = 0 for num in arr: if num > 0: total += num return total"},{"question":"Given a linked list, write a program to implement a hash table to store the values of the linked list. Create a function for inserting elements into the hash table and another function to check if a certain value exists within the hash table.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next class HashTable: def __init__(self, size=10): self.size = size self.table = [[] for _ in range(size)] def _hash_function(self, key): return key % self.size def insert(self, value): hash_index = self._hash_function(value) if value not in self.table[hash_index]: self.table[hash_index].append(value) def exists(self, value): hash_index = self._hash_function(value) return value in self.table[hash_index] def linked_list_to_hash_table(head, size=10): hash_table = HashTable(size) current = head while current: hash_table.insert(current.val) current = current.next return hash_table"},{"question":"Find all the prime numbers in a Python list using list comprehension. The list can contain negative numbers as well.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def find_primes_in_list(numbers): Given a list of numbers, return a list of prime numbers using list comprehension. return [n for n in numbers if is_prime(n)]"},{"question":"Given an inaccurate to-do list that maintains daily tasks in an inconsistent format and structure, write and implement a Python function using regular expressions that extracts information from unformatted text data, cleans it up and lists the items accurately for reprocessing. Also rectify an erroneous piece of Python code given below which attempts to clean this incorrect to-do list data, but fails. Debug and modify this function to increase its efficiency.","solution":"import re def clean_and_extract_todo_list(todo_text): Cleans and extract tasks from an unformatted to-do list text. Parameters: todo_text (str): The unformatted to-do list text. Returns: list: A cleaned and properly formatted list of tasks. # Normalize line endings to ensure consistency todo_text = todo_text.replace('rn', 'n').replace('r', 'n') # Split the text into individual lines lines = todo_text.split('n') tasks = [] for line in lines: # Ignore lines that are empty or contain only whitespaces if not line.strip(): continue # Extract the task description using regex task_match = re.search(r'[*-+]s*(.*)', line.strip()) if task_match: task = task_match.group(1) tasks.append(task) return tasks"},{"question":"Given a list of dictionaries sorted by a specified key and a string \\"key\\", write a function in Python to find the position at which the value for this key in the list elements changes. The list remains sorted only by the specified key.","solution":"def find_change_position(sorted_list, key): Finds the first position at which the value for the specified key changes in the sorted list of dictionaries. Parameters: sorted_list (list of dict): A list of dictionaries sorted by the specified key. key (str): The key to check for changes in value. Returns: int: The index position where the value for the specified key changes. If no change is found, returns -1. if not sorted_list: return -1 previous_value = sorted_list[0].get(key) for index, item in enumerate(sorted_list): current_value = item.get(key) if current_value != previous_value: return index previous_value = current_value return -1"},{"question":"Generate a list of N random lower-case letter strings. Each string in the list must have a length of between Lmin and Lmax (inclusive), with Lmin and Lmax being inputs to the function. Additionally, the strings must not contain any repeating characters.","solution":"import random import string def generate_random_strings(n, Lmin, Lmax): Generate a list of N random lower-case letter strings. Each string has a length between Lmin and Lmax and contains no repeating characters. Parameters: n (int): Number of strings to generate. Lmin (int): Minimum length of each string. Lmax (int): Maximum length of each string. Returns: List[str]: List of random lower-case strings. if Lmin > Lmax or Lmin < 1 or Lmax > 26: raise ValueError(\\"Invalid Lmin and Lmax values.\\") result = [] letters = list(string.ascii_lowercase) for _ in range(n): length = random.randint(Lmin, Lmax) random.shuffle(letters) result.append(''.join(letters[:length])) return result"},{"question":"I have a list of student records in Python, where each record is a dictionary that includes the student's name and their test score. How can I write a function that takes this list as input and returns the names of the students who scored above a certain threshold?","solution":"def get_students_above_threshold(students, threshold): Returns a list of names of students who scored above the given threshold. Args: - students (list): A list of dictionaries, each containing 'name' and 'score'. - threshold (int or float): The score threshold. Returns: - list: A list of names of students who scored above the threshold. result = [] for student in students: if student['score'] > threshold: result.append(student['name']) return result"},{"question":"Using the Fibonacci sequence, write a Python program that calculates the sum of the even-valued terms for the first 1000 numbers in the sequence. In addition, include a function to calculate and display the ratio of even to odd numbers in the sequence.","solution":"def fibonacci_sequence(n): Generates the first n Fibonacci numbers. fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence def sum_even_fibonacci(sequence): Returns the sum of even-valued terms in the given Fibonacci sequence. return sum(x for x in sequence if x % 2 == 0) def even_odd_ratio(sequence): Returns the ratio of even to odd numbers in the given Fibonacci sequence. even_count = sum(1 for x in sequence if x % 2 == 0) odd_count = len(sequence) - even_count return even_count, odd_count def sum_even_valued_terms_and_ratio(n): Returns the sum of even-valued terms and the ratio of even to odd numbers for the first n Fibonacci numbers. sequence = fibonacci_sequence(n) even_sum = sum_even_fibonacci(sequence) even_count, odd_count = even_odd_ratio(sequence) ratio = even_count / odd_count if odd_count != 0 else float('inf') return even_sum, ratio # Calculate for the first 1000 Fibonacci numbers even_sum, ratio = sum_even_valued_terms_and_ratio(1000) print(f\\"Sum of even-valued terms: {even_sum}\\") print(f\\"Ratio of even to odd numbers: {ratio}\\")"},{"question":"Write a Python script to calculate a weighted moving average from a list of numbers, where you can input a custom list of weights. For example, with the list of values [5, 10, 15, 20, 25] and a list of weights [0.1, 0.2, 0.3, 0.2, 0.1], calculate the weighted moving average.","solution":"def weighted_moving_average(values, weights): Calculate the weighted moving average for a list of values given a list of weights. :param values: List of numerical values :param weights: List of weights :return: Weighted moving average n = len(values) if n != len(weights): raise ValueError(\\"The length of values and weights must be the same.\\") weighted_sum = sum(v * w for v, w in zip(values, weights)) total_weight = sum(weights) if total_weight == 0: raise ValueError(\\"The sum of weights must not be zero.\\") return weighted_sum / total_weight"},{"question":"Given the following code snippet in Python, which contains errors and does not function as expected, rectify and enhance it to create a recursive method that calculates the factorial of a given integer \`n\`. Also, improve the function to handle cases where \`n\` is a negative number or when the input is not an integer. Then, optimize your function so it could handle very large numbers efficiently.","solution":"def factorial(n): Returns the factorial of a given integer n. Handles cases where n is negative or not an integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n-1)"},{"question":"Using a recursive algorithm, reverse the order of elements in a list. The input list may contain duplicate elements. Implement the solution in such a way that the space complexity is O(1), i.e., no extra space should be used apart from the input list itself.","solution":"def reverse_list(lst): Recursively reverse the elements in the list in-place. :param lst: The list to be reversed. def helper(start, end): if start >= end: return lst[start], lst[end] = lst[end], lst[start] helper(start + 1, end - 1) helper(0, len(lst) - 1)"},{"question":"Write a code that takes an array of integers as input and returns the array in reverse order.","solution":"def reverse_array(arr): Returns the given array in reverse order. :param arr: List[int] - the array of integers to be reversed :return: List[int] - the reversed array return arr[::-1]"},{"question":"Given a 2D binary matrix filled with 0's and 1's, find the area of the largest square containing all 1's. Write a Python function that efficiently calculates this.","solution":"def maximalSquare(matrix): Given a 2D binary matrix filled with 0's and 1's, find the area of the largest square containing all 1's. if not matrix: return 0 rows = len(matrix) cols = len(matrix[0]) max_side = 0 # Create a DP table with the same dimensions as the input matrix dp = [[0] * cols for _ in range(rows)] # Loop through the matrix to fill the DP table for i in range(rows): for j in range(cols): # If we are at the border or the cell is zero, we directly copy it to DP table if matrix[i][j] == '1': if i == 0 or j == 0: # top row or leftmost column dp[i][j] = 1 else: # Take the minimum of the top, left, and top-left diagonal values + 1 dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 # Update the maximum side length found if dp[i][j] > max_side: max_side = dp[i][j] # The area of the largest square is side length squared return max_side * max_side"},{"question":"Input a list of numbers and output the largest and the smallest ones in Python. Also, return their indices in the original list. If there are duplicate maximum or minimum values, return the indices of all those duplicates as well.","solution":"def find_min_max_indices(numbers): Returns the minimum and maximum values from the list and their respective indices. If there are duplicates of min or max values, their indices are also returned. if not numbers: return None, None, [], [] min_value = min(numbers) max_value = max(numbers) min_indices = [i for i, x in enumerate(numbers) if x == min_value] max_indices = [i for i, x in enumerate(numbers) if x == max_value] return min_value, max_value, min_indices, max_indices"},{"question":"Run the provided Python code block, which contains a string compression function. The function employs a while loop, and both conditional checks and operations to track and manipulate character sequences in the string. By interpreting the logic deployed within the function, predict the ensuing output for the input string \\"aaabbccccaa\\".","solution":"def compress_string(s): Compresses the string such that a sequence of the same characters is represented as character followed by the count. if not s: return \\"\\" compressed = [] i = 0 while i < len(s): char = s[i] count = 1 while i + 1 < len(s) and s[i + 1] == char: i += 1 count += 1 compressed.append(char + str(count)) i += 1 return ''.join(compressed) # Example call to the function to predict the output output = compress_string(\\"aaabbccccaa\\")"},{"question":"Write a function that takes an unsorted list of integers as an argument and returns a list of the same integers but sorted in ascending order. Additionally, the function should not use any built-in sorting functions or libraries and should have a time complexity of O(n^2).","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using bubble sort algorithm. This function has a time complexity of O(n^2). n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a Python program to solve the tower of Hanoi problem with n disks, ensuring that the solution is as efficient as possible, and indents clearly to make the code readable.","solution":"def tower_of_hanoi(n, source, target, auxiliary): Solves the Tower of Hanoi problem for n disks. Args: n (int): Number of disks source (str): The name of the source rod target (str): The name of the target rod auxiliary (str): The name of the auxiliary rod Returns: list of tuples: Each tuple contains the movement of a disk from one rod to another if n == 0: return [] moves = [] moves.extend(tower_of_hanoi(n - 1, source, auxiliary, target)) moves.append((source, target)) moves.extend(tower_of_hanoi(n - 1, auxiliary, target, source)) return moves"},{"question":"How would you modify the given Python code to add a second servo motor that can only be activated when the first servo motor is in a specific position? Additionally, how would you modify the interrupt function to only trigger if the specified analog input reads less than 1000 AND the second servo motor is activated?","solution":"class ServoMotor: def __init__(self): self.angle = 0 self.activated = False def set_angle(self, angle): self.angle = angle self.activated = True class System: def __init__(self): self.servo1 = ServoMotor() self.servo2 = ServoMotor() self.analog_input = 0 def set_servo1_angle(self, angle): self.servo1.set_angle(angle) # Check if servo1 is in specific position (e.g., 90 degrees) if angle == 90: return True return False def set_servo2_angle(self, angle): if self.servo1.angle == 90: self.servo2.set_angle(angle) else: print(\\"Cannot activate servo2 unless servo1 is at 90 degrees.\\") def analog_read(self, value): self.analog_input = value def interrupt_function(self): if self.analog_input < 1000 and self.servo2.activated: # Enter interrupt handling logic here return True return False # Example usage system = System() if system.set_servo1_angle(90): # Set servo1 to 90 degrees system.set_servo2_angle(45) # Only possible if servo1 is at 90 degrees system.analog_read(950) # Analog input value if system.interrupt_function(): # Check interrupt condition print(\\"Interrupt triggered\\")"},{"question":"Write a Python program to input an array of integers and print the minimum and maximum element of the array.","solution":"def find_min_max(arr): Returns the minimum and maximum of the array. if not arr: raise ValueError(\\"The array is empty\\") min_val = min(arr) max_val = max(arr) return min_val, max_val"},{"question":"Within the discipline of computer programming, consider a deceptively intricate procedure: the generation of a random integer. However, in this scenario, the random number must adhere to certain constraints. The task at hand is to develop an algorithm that generates a random integer, with the stipulation that this number must reside within an inclusive range set by two given variables, designated as 'a' and 'b'.","solution":"import random def generate_random_integer(a, b): Generates a random integer within the inclusive range of a and b. return random.randint(a, b)"},{"question":"Create a program that simulates a number guessing game. The program should generate a random number between 1 and 100. The player will have to guess the number by providing inputs. If the player's guess is higher or lower than the actual number, the program should provide feedback to the player. The player should have a fixed number of tries (for example, 6). After each incorrect try, the player loses a life. When the player runs out of lives or correctly guesses the number, the game should end.","solution":"import random def number_guessing_game(tries=6): number_to_guess = random.randint(1, 100) print(\\"Let's play the number guessing game!\\") print(f\\"You have {tries} tries to guess the number between 1 and 100.\\") for i in range(tries): try: player_guess = int(input(f\\"Attempt {i + 1}/{tries}: Enter your guess: \\")) except ValueError: print(\\"Please enter a valid number.\\") continue if player_guess < 1 or player_guess > 100: print(\\"Your guess should be between 1 and 100. Try again.\\") continue if player_guess < number_to_guess: print(\\"Your guess is too low.\\") elif player_guess > number_to_guess: print(\\"Your guess is too high.\\") else: print(f\\"Congratulations! You've guessed the number {number_to_guess} correctly.\\") return print(f\\"Sorry, you've used all your tries. The number was {number_to_guess}.\\")"},{"question":"Formulate a regex pattern aimed at identifying hexadecimal values exclusively beginning with the character 'B'. Additionally, develop a function in Python that will extract these values from a given string. This function should also correctly handle any potential erroneous cases and throw appropriate exceptions. Finally, create a testing function to verify the correctness of your solution.","solution":"import re def extract_hex_values_starting_with_B(text): Extracts hexadecimal values that exclusively begin with the character 'B' from a given string. Hexadecimal values are assumed to be alphanumeric characters (0-9, A-F) and start with 'B'. :param text: The input string potentially containing hexadecimal values. :return: A list of hexadecimal values found in the string. :raises: ValueError if the input text is not a string. if not isinstance(text, str): raise ValueError(\\"Input text must be a string\\") pattern = r'bB[A-Fa-f0-9]+b' return re.findall(pattern, text)"},{"question":"Write a Python decorator called \`restricted_access\` that restricts access to a function based on the provided user permissions. The decorator should check if a request contains valid authentication data and if the user has the required scopes to perform the action. The decorator should work with Flask applicationcontext and ContentType parameters. If the user does not have the required scopes or if there is no request context, the decorator should raise an \`HTTPException\` with a specific error message and status code. Additionally, if the request is missing the Authorization header, the decorator should raise an exception. Use the provided code snippet as a reference to understand the expected behavior of the decorator.","solution":"from functools import wraps from flask import request, jsonify, _request_ctx_stack from werkzeug.exceptions import HTTPException class UnauthorizedAccess(HTTPException): code = 401 description = 'Unauthorized Access - Missing or invalid credentials.' class ForbiddenAccess(HTTPException): code = 403 description = 'Forbidden Access - Insufficient permissions.' def restricted_access(required_scopes): def decorator(f): @wraps(f) def decorated_function(*args, **kwargs): # Check for request context if not _request_ctx_stack.top: raise UnauthorizedAccess() auth_header = request.headers.get('Authorization') if not auth_header: raise UnauthorizedAccess(description='Missing Authorization Header') # Simulate extracting user scopes from token (assumption here) token = auth_header.split(\\" \\")[-1] # assuming header is 'Bearer <token>' user_scopes = extract_scopes_from_token(token) if not set(required_scopes).issubset(user_scopes): raise ForbiddenAccess() return f(*args, **kwargs) return decorated_function return decorator def extract_scopes_from_token(token): Simulated function to extract user scopes from the token. In a real-world application, this should validate the token and extract scopes from it. # In production, this would involve actual token verification and extracting scopes from it. dummy_scope_map = { 'valid_token': {'read', 'write'}, 'read_only_token': {'read'}, } return dummy_scope_map.get(token, set())"},{"question":"Write a function in Python which can generate a random integer between 1 and 10,000 (inclusive) and also ensure that the same number is not generated consecutively. You should maintain the state of the previously generated number and make sure to update it after each generation.","solution":"import random class RandomNumberGenerator: def __init__(self): self.previous_number = None def generate(self): while True: new_number = random.randint(1, 10000) if new_number != self.previous_number: self.previous_number = new_number return new_number"},{"question":"Please write a python function that takes a list of strings as an argument and return a new list which contains the strings from the input list that are length 4 or greater. If the input list is None or empty, return an empty list.","solution":"def filter_long_strings(strings): Takes a list of strings and returns a new list with strings that are 4 or more characters long. Parameters: strings (list): A list of strings. Returns: list: A list containing strings that are 4 or more characters long. if not strings: return [] return [string for string in strings if len(string) >= 4]"},{"question":"Develop a program that accepts an input array of arbitrary length and sorts it in reverse order. The program must first validate the input array to ensure that it contains only numerical values, followed by checking the array's length to ensure that it contains at least two elements. The program must then implement a custom sorting algorithm that applies the principles of divide-and-conquer to sort the array efficiently. Finally, the program must output the sorted array in reverse order to meet the specified requirement. As an example, apply this program to the array [11, 2, 34, 6, 7, 9, 10, 8] and return the sorted array in reverse order.","solution":"def check_input(array): Check if the input array is valid: contains only numerical values and has at least two elements. if not isinstance(array, list): raise ValueError(\\"Input must be a list\\") if len(array) < 2: raise ValueError(\\"Array must contain at least two elements\\") if not all(isinstance(item, (int, float)) for item in array): raise ValueError(\\"All elements in the array must be numerical values\\") return True def merge_sort(array): Sort the input array using merge sort algorithm. if len(array) <= 1: return array mid = len(array) // 2 left_half = merge_sort(array[:mid]) right_half = merge_sort(array[mid:]) return merge(left_half, right_half) def merge(left, right): Merge two sorted arrays. sorted_array = [] while left and right: if left[0] > right[0]: sorted_array.append(left.pop(0)) else: sorted_array.append(right.pop(0)) sorted_array.extend(left) sorted_array.extend(right) return sorted_array def sort_array_reverse(array): Sort the input array in reverse order, applying the requirements specified in the prompt. check_input(array) sorted_array = merge_sort(array) return sorted_array # Example usage example_array = [11, 2, 34, 6, 7, 9, 10, 8] print(sort_array_reverse(example_array)) # Output should be [34, 11, 10, 9, 8, 7, 6, 2]"},{"question":"Please provide a basic program using the Killing Vector Transport algorithm for Burrows-Wheeler Transform and its Inversion.","solution":"def burrows_wheeler_transform(s): Computes the Burrows-Wheeler Transform of the input string s. s = s + \\"\\" table = sorted(s[i:] + s[:i] for i in range(len(s))) last_column = [row[-1] for row in table] return \\"\\".join(last_column) def inverse_burrows_wheeler_transform(r): Inverts the Burrows-Wheeler Transform to recover the original string. table = [\\"\\"] * len(r) for i in range(len(r)): table = sorted(r[j] + table[j] for j in range(len(r))) for row in table: if row.endswith(\\"\\"): return row.rstrip(\\"\\") # Example Usage: if __name__ == \\"__main__\\": original = \\"banana\\" transformed = burrows_wheeler_transform(original) print(f\\"BWT of '{original}': {transformed}\\") inverted = inverse_burrows_wheeler_transform(transformed) print(f\\"Inverse BWT of '{transformed}': {inverted}\\")"},{"question":"Create a Python function \`calculate_arithmetic_operations(x, y)\` that performs various arithmetic operations on two integers \`x\` and \`y\`. The function should return a tuple of tuples where each inner tuple contains the result of a different operation in the following order: \`[addition, subtraction, multiplication, division, modulus]\`. If the operation cannot be performed (e.g., division or modulus by zero), the corresponding position in the tuple should contain a \`None\` value.","solution":"def calculate_arithmetic_operations(x, y): Returns a tuple of tuples containing the results of arithmetic operations (addition, subtraction, multiplication, division, and modulus) on x and y. If the operation cannot be performed (e.g., division or modulus by zero), the corresponding position contains None. addition = x + y subtraction = x - y multiplication = x * y division = None if y == 0 else x / y modulus = None if y == 0 else x % y return (addition, subtraction, multiplication, division, modulus)"},{"question":"Use the variable \\"inputNum\\" as the input and implement a function to check if it is a prime number. The function should also consider the error handling in case the input is negative or a non-integer.","solution":"def is_prime(inputNum): Returns True if inputNum is a prime number, otherwise False. Raises ValueError if inputNum is negative or not an integer. if not isinstance(inputNum, int): raise ValueError(\\"Input must be an integer\\") if inputNum < 2: return False for i in range(2, int(inputNum**0.5) + 1): if inputNum % i == 0: return False return True"},{"question":"Define a global variable \`x\` with a value of \`5\` and a local variable \`y\` with a value of \`10\` inside a function. Modify the value of \`y\` inside the function using the global keyword.","solution":"# Define a global variable x x = 5 def modify_variables(): global y y = 10 # This is now a global variable y = 20 # Modify y to a new value # Call the function to modify y modify_variables()"},{"question":"In Python, how can I check if a given number is prime or not and find the next prime number?","solution":"def is_prime(n): Checks if a given number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def next_prime(n): Finds the next prime number greater than a given number n. if n <= 1: return 2 prime = n found = False while not found: prime += 1 if is_prime(prime): found = True return prime"},{"question":"Given a piece of erroneous code and a list, fix the code so that it not only corrects the error but also transforms the original list into a 2D list with all sub-lists consisting of the same elements. Test your function not only with a list of integers, but also with a list of strings.","solution":"def transform_to_2d_list(original_list): Transforms the original list into a 2D list with each sub-list consisting of the same elements. return [[element] for element in original_list]"},{"question":"Write a custom Python function that automatically generates update statements for a PostgreSQL database's triggers. The function should take in the table name, column name, and new value as arguments, and then use a predefined generic trigger function to create the update statement. The trigger function should be designed to handle updates on any table in the database. The function should also have an optional argument for specifying whether the update statement should be printed to the console.","solution":"def generate_update_trigger_sql(table_name, column_name, new_value, print_to_console=False): Generate an update SQL statement for a PostgreSQL database trigger. :param table_name: The name of the table. :param column_name: The name of the column to update. :param new_value: The new value to set for the column. :param print_to_console: Whether to print the SQL statement to the console. :return: The generated SQL statement as a string. sql = f CREATE OR REPLACE FUNCTION update_{table_name}_{column_name}_trigger() RETURNS TRIGGER AS BEGIN NEW.{column_name} = {new_value}; RETURN NEW; END; LANGUAGE plpgsql; CREATE TRIGGER update_{table_name}_{column_name}_trigger BEFORE UPDATE ON {table_name} FOR EACH ROW EXECUTE FUNCTION update_{table_name}_{column_name}_trigger(); if print_to_console: print(sql) return sql"},{"question":"What is the method for inserting a node into a binary tree in Python?","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def insert(root, key): Inserts a new node with the given key into the binary tree. if root is None: return TreeNode(key) queue = [] queue.append(root) while queue: temp = queue.pop(0) if temp.left is None: temp.left = TreeNode(key) break else: queue.append(temp.left) if temp.right is None: temp.right = TreeNode(key) break else: queue.append(temp.right) return root"},{"question":"I am learning about Python bytecode and disassembling. I understand that jabsolute() stands for jump if true or pop and is an absolute jump. However, I'm confused about jrel() or jump if true or pop, but relative. Can anyone explain this concept with a simple example via bytecode?","solution":"import dis def example_function(x): if x > 10: return \\"Greater\\" else: return \\"Smaller\\" # Disassemble the example_function to see its bytecode representation disassembled_bytecode = dis.dis(example_function) def jrel_example_function(x): A function to demonstrate jrel (relative jumps) in bytecode. Jrel is used in the bytecode when making decisions in the code. if x < 5: return \\"Less than 5\\" elif x < 10: return \\"Less than 10\\" else: return \\"10 or more\\" # Disassemble the jrel_example_function to see its bytecode representation disassembled_bytecode_jrel = dis.dis(jrel_example_function)"},{"question":"Given a valid email address, write a Python program to extract the username before the '@' symbol and the domain before the '.' symbol. Consider the '@' ALWAYS before the '.' symbol.","solution":"def extract_email_parts(email): Extracts the username and domain from a given email address. Args: email (str): The email address to extract parts from. Returns: tuple: A tuple containing the username and domain. username, remainder = email.split('@') domain = remainder.split('.')[0] return username, domain"},{"question":"Devise a programming function, designed to handle two individually submitted string inputs, and determine with certainty whether these two strings constitute an anagram pair. This programmed deduction should be executed without any regard to character case sensitivity.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, False otherwise. # Converting both strings to lower case str1 = str1.lower() str2 = str2.lower() # Sorting the characters of both strings return sorted(str1) == sorted(str2)"},{"question":"Write a function that takes a binary string as input and returns the number of '1's in the string.","solution":"def count_ones(binary_string): Returns the number of '1's in the given binary string. :param binary_string: A string representing binary digits (e.g., \\"1101\\") :return: The count of '1's in the binary string return binary_string.count('1')"},{"question":"Add an element to the end of a list in Python and also return the updated list. Additionally, ensure that the added element is not already present in the list. If the element is already in the list, append the string \\"Duplicate\\" to it before adding it to the end of the list.","solution":"def add_element_to_list(lst, element): Adds an element to the end of the list if it is not already present. If the element is already present, appends the string \\"Duplicate\\" to it before adding. Returns the updated list. :param lst: List to which the element will be added. :param element: Element to be added. if element in lst: lst.append(f\\"{element}Duplicate\\") else: lst.append(element) return lst"},{"question":"Introduce a method that can reorder an array to its inverse sequence without relying on pre-existing reverse functions.","solution":"def reverse_array(arr): Returns a new array which is the inverse sequence of the input array without relying on pre-existing reverse functions. n = len(arr) reversed_arr = [0] * n for i in range(n): reversed_arr[n - 1 - i] = arr[i] return reversed_arr"},{"question":"Define a python function called \`\`string_length\`\` that can take a string as an argument and output the length of that string. Additionally, the function should check if the input is a string and return an error message if the input is not a string.","solution":"def string_length(s): Returns the length of the provided string. If the input is not a string, returns an error message. if not isinstance(s, str): return \\"Error: Input is not a string.\\" return len(s)"},{"question":"Using tkinter and without using any ready-made functions, create an interactive graphical calculator application. It should have functionalities for performing arithmetic operations like addition, subtraction, multiplication, division and also include functionality for square roots and power functions. Make sure the application is able to handle errors like division by zero gracefully.","solution":"import tkinter as tk from math import sqrt, pow class Calculator: def __init__(self, master): self.master = master self.master.title(\\"Calculator\\") self.result_var = tk.StringVar() self.entry = tk.Entry(self.master, textvariable=self.result_var, width=30, borderwidth=5) self.entry.grid(row=0, column=0, columnspan=4) self.create_buttons() def create_buttons(self): button_texts = [ '7', '8', '9', '/', '4', '5', '6', '*', '1', '2', '3', '-', '0', '.', '=', '+', 'sqrt', 'pow', 'C' ] row = 1 col = 0 for text in button_texts: button = tk.Button(self.master, text=text, padx=20, pady=10, command=lambda t=text: self.on_button_click(t)) button.grid(row=row, column=col, sticky=\\"nsew\\") col += 1 if col > 3: col = 0 row += 1 for i in range(4): self.master.grid_columnconfigure(i, weight=1) for i in range(row+1): self.master.grid_rowconfigure(i, weight=1) def on_button_click(self, char): current_text = self.result_var.get() try: if char == 'C': self.result_var.set(\\"\\") elif char == '=': self.result_var.set(eval(current_text)) elif char == 'sqrt': self.result_var.set(sqrt(float(current_text))) elif char == 'pow': self.result_var.set(pow(float(current_text), 2)) else: self.result_var.set(current_text + char) except ZeroDivisionError: self.result_var.set(\\"DIV/0 ERROR\\") except Exception as e: self.result_var.set(\\"ERROR\\") if __name__ == \\"__main__\\": root = tk.Tk() calculator = Calculator(root) root.mainloop()"},{"question":"Given a string data type representing a human readable date in the format of \\"DD/MM/YYYY\\", create a function which converts this date into \\"YYYY-MM-DD\\" ISO 8601 standard format. This function should include error handling for invalid dates, as well as the ability to process dates from leap years.","solution":"def convert_to_iso_format(date_string): Converts a date from \\"DD/MM/YYYY\\" format to \\"YYYY-MM-DD\\" ISO 8601 standard format. Parameters: date_string (str): The date string in \\"DD/MM/YYYY\\" format. Returns: str: The date string in \\"YYYY-MM-DD\\" format, if valid. Raises: ValueError: If the input date_string is not a valid date. from datetime import datetime try: # Parse the input date string to a datetime object date_object = datetime.strptime(date_string, \\"%d/%m/%Y\\") # Convert the datetime object to the ISO format string return date_object.strftime(\\"%Y-%m-%d\\") except ValueError: raise ValueError(\\"Invalid date format or date string\\")"},{"question":"Modify the given code to reverse the order of a given array. Additionally, implement the reversal logic manually without utilizing any built-in functions or methods for reversing the array.","solution":"def reverse_array(arr): Reverses the order of a given array. n = len(arr) reversed_array = [0] * n for i in range(n): reversed_array[i] = arr[n - 1 - i] return reversed_array"},{"question":"Outline a module in Python that would permit the display of the current date and time, plus the ability to manipulate and display it in various international time zones.","solution":"from datetime import datetime import pytz def get_current_datetime(): Returns the current date and time in UTC. return datetime.now(pytz.utc) def get_current_datetime_in_timezone(timezone_str): Returns the current date and time in the specified timezone. :param timezone_str: A string representing the desired timezone (e.g., 'America/New_York', 'Asia/Kolkata'). :return: The current date and time in the specified timezone. timezone = pytz.timezone(timezone_str) return datetime.now(timezone) def convert_datetime_to_timezone(dt, timezone_str): Converts a given datetime object to the specified timezone. :param dt: A datetime object. :param timezone_str: A string representing the desired timezone. :return: The datetime object converted to the specified timezone. timezone = pytz.timezone(timezone_str) return dt.astimezone(timezone)"},{"question":"Write a function in Python that takes in a list of integers and returns a new list that only contains the even numbers from the original list. Additionally, the function should sort the resulting list in ascending order.","solution":"def filter_and_sort_even_numbers(nums): Returns a new list containing only the even numbers from the input list, sorted in ascending order. Args: nums (list of int): The list of integers to filter and sort. Returns: list of int: A list of sorted even integers. even_numbers = [num for num in nums if num % 2 == 0] even_numbers.sort() return even_numbers"},{"question":"Switch the positions of the first and last element in a given 2D array, but avoid using any built-in functions or methods for accessing or swapping elements (like array长度 or array[索引]).You can only use basic array operations and control structures.","solution":"def swap_first_last(array): Swaps the first and last elements in a given 2D array without using built-in functions or methods for accessing or swapping elements. Parameters: array (list of list of int): 2D array Returns: list of list of int: The modified 2D array with first and last elements swapped. # Ensure the array is non-empty and contains at least one element if not array or not array[0]: return array # Find the first and last elements in the array n = len(array) m = len(array[0]) first = array[0][0] last = array[n - 1][m - 1] # Swap the first and last elements array[0][0] = last array[n - 1][m - 1] = first return array"},{"question":"Write test cases and expected results for a Python function that converts a positive integer into its hexadecimal (base 16) equivalent as a string.","solution":"def int_to_hex(n): Converts a positive integer n to its hexadecimal (base 16) equivalent as a string. if n < 0: raise ValueError(\\"Input must be a positive integer\\") return hex(n)[2:]"},{"question":"Create a loop in Python that prints the prime numbers between 1000 and 2000 and also calculates the sum of these prime numbers.","solution":"def is_prime(n): Helper function to determine if a number is prime. Returns True if n is prime, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_numbers_1000_to_2000(): Prints the prime numbers between 1000 and 2000 and calculates their sum. Returns the sum of prime numbers. prime_sum = 0 primes = [] for num in range(1000, 2001): if is_prime(num): primes.append(num) prime_sum += num return primes, prime_sum # Example usage # primes, prime_sum = prime_numbers_1000_to_2000() # print(\\"Primes:\\", primes) # print(\\"Sum of primes:\\", prime_sum)"},{"question":"Given a list of integers, what is the most efficient way to check if it contains duplicates? Please provide a Python function that uses a set to check for duplicates in a list.","solution":"def contains_duplicates(input_list): Checks if the input list contains any duplicates. Returns True if duplicates are found, otherwise False. return len(input_list) != len(set(input_list))"},{"question":"I have a string and I need to determine the length of the largest substring that does not contain any repeating characters. Can you help me write a Python function to solve this problem? Additionally, please ensure that the function name, variable names, and the docstring are unique from the given code snippet.","solution":"def max_unique_substring_length(s): Returns the length of the longest substring without repeating characters. Args: s (str): The input string. Returns: int: The length of the longest substring with all unique characters. max_length = 0 start = 0 used_chars = {} for index, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: max_length = max(max_length, index - start + 1) used_chars[char] = index return max_length"},{"question":"Assist me in handling a file path which has double backslash. I need you to replace that sequence with a single backslash using Python code. How can I achieve this?","solution":"def replace_double_backslash_with_single(path): Replaces occurrences of double backslashes in the given path with a single backslash. Args: path (str): The file path to process. Returns: str: The processed file path with double backslashes replaced by single backslashes. return path.replace('', '')"},{"question":"Develop a code book for generating hex codes. The code should include functions for generating random hex codes, getting the name of a color given the hex code and checking if an inputted hex code is valid. Also include methods for converting hex codes to RGB values and vice versa. You should also provide some exemplary usage of the methods to demonstrate their interactions.","solution":"import random def generate_random_hex_code(): Generates a random hex color code. return '#{:06x}'.format(random.randint(0, 0xFFFFFF)) def hex_to_rgb(hex_code): Convert hex color code to RGB tuple. hex_code = hex_code.lstrip('#') return tuple(int(hex_code[i:i+2], 16) for i in (0, 2, 4)) def rgb_to_hex(rgb_tuple): Convert RGB tuple to hex color code. return '#{:02x}{:02x}{:02x}'.format(*rgb_tuple) def is_valid_hex_code(hex_code): Check if the given hex code is valid. if len(hex_code) != 7 or hex_code[0] != '#': return False try: int(hex_code[1:], 16) return True except ValueError: return False # Example usage of the methods example_hex = generate_random_hex_code() print(\\"Generated Hex Code:\\", example_hex) print(\\"Hex to RGB:\\", hex_to_rgb(example_hex)) example_rgb = (255, 165, 0) # Orange color print(\\"RGB to Hex:\\", rgb_to_hex(example_rgb)) print(\\"Is Valid Hex Code:\\", is_valid_hex_code(example_hex)) print(\\"Is '#FF5733' Valid Hex Code:\\", is_valid_hex_code('#FF5733'))"},{"question":"Given a relative path \\"/\\" in a Unix file system environment, and considering symbolic links, directory and file 'soft' reference shortcuts, that could add uncertainty to our navigation within the directory tree, develop a function to return the absolute path for the existing directory.","solution":"import os def get_absolute_path(relative_path): Given a relative path, return the absolute path in a Unix file system environment. return os.path.abspath(relative_path)"},{"question":"Create a python code snippet implementing the linear search algorithm to find a specific value in an array. Keep in mind that the array can have duplicate values and can be unsorted.","solution":"def linear_search(arr, target): Perform a linear search to find the target in the array. Parameters: arr (list): The list in which to search for the target value. target (int/float/str): The value to search for. Returns: list: A list of indices where the target value is found. result = [] for index, value in enumerate(arr): if value == target: result.append(index) return result"},{"question":"What is the fastest method to sort a large array in Python? Also, write a function to measure the execution time of sorting algorithms for a given input size. Use this function to compare the performance of Python's built-in sorting method with other popular sorting algorithms like Quick Sort and Merge Sort for arrays of different sizes. Here is a piece of erroneous code for reference. Fix the errors and enhance the code to meet the requirements.","solution":"import time import random # Built-in sort function (uses Timsort) def builtin_sort(arr): arr.sort() return arr # Implementation of Quick Sort def quick_sort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) # Implementation of Merge Sort def merge_sort(arr): if len(arr) <= 1: return arr middle = len(arr) // 2 left = merge_sort(arr[:middle]) right = merge_sort(arr[middle:]) return merge(left, right) def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result # Function to measure and compare sorting times def measure_sorting_times(arr): arrays = { 'original': arr[:], 'quick_sort': arr[:], 'merge_sort': arr[:], 'builtin_sort': arr[:] } results = {} start_time = time.time() quick_sort(arrays['quick_sort']) results['quick_sort'] = time.time() - start_time start_time = time.time() merge_sort(arrays['merge_sort']) results['merge_sort'] = time.time() - start_time start_time = time.time() builtin_sort(arrays['builtin_sort']) results['builtin_sort'] = time.time() - start_time return results # Generate a random array of a given size def generate_random_array(size): return [random.randint(0, 10000) for _ in range(size)]"},{"question":"Write a function in Python that takes an input list of integers, finds the largest integer, and returns the 1-based index of the largest integer in the list. If the input list is empty or all elements are equal, it should raise a ValueError.","solution":"def find_largest_index(int_list): Returns the 1-based index of the largest integer in int_list. Raises a ValueError if the list is empty or all elements are equal. if not int_list: raise ValueError(\\"Input list is empty\\") unique_elements = set(int_list) if len(unique_elements) == 1: raise ValueError(\\"All elements in the list are equal\\") largest = max(int_list) return int_list.index(largest) + 1"},{"question":"Write a Python program that implements the Caesar cipher encryption technique for a given string and a secret key, then refine it by allowing for case sensitivity and the inclusion of non-alphabetic characters without altering them. Additionally, implement a decryption function to reverse the encryption process.","solution":"def caesar_cipher_encrypt(text, key): Encrypts the given text using the Caesar cipher with the provided key. Parameters: text (str): The plaintext message to be encrypted. key (int): The secret key to shift the characters. Returns: str: The encrypted ciphertext. encrypted_text = [] for char in text: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') encrypted_char = chr((ord(char) - shift_base + key) % 26 + shift_base) encrypted_text.append(encrypted_char) else: encrypted_text.append(char) return ''.join(encrypted_text) def caesar_cipher_decrypt(text, key): Decrypts the given text that was encrypted using the Caesar cipher with the provided key. Parameters: text (str): The encrypted message to be decrypted. key (int): The secret key to shift the characters back. Returns: str: The decrypted plaintext. return caesar_cipher_encrypt(text, -key)"},{"question":"How can I create an algorithm that tests for primality of a number using Python?","solution":"import math def is_prime(n): Tests if a number n is a prime number. Args: n (int): The number to test for primality. Returns: bool: True if n is a prime, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"In the Python programming language, there is a specific term used to describe a small standalone code segment that performs a particular task or calculation. What is this term? Additionally, could you outline the syntax required to properly create and utilize one of these constructs?","solution":"def greet(name): Returns a greeting string for the given name. return f\\"Hello, {name}!\\""},{"question":"Write a Python program that allows a user to capture three categories of geographical data about various cities: city name, population, and area in square kilometers. Subsequently, calculate and display the population density (population divided by the area) for each city in persons per square kilometer. Importantly, ensure your program ports the data entry functions, calculations, and the display of results in distinct functions.","solution":"def capture_city_data(): Captures city name, population, and area data from the user and returns it as a list of dictionaries. cities = [] while True: city = {} city['name'] = input(\\"Enter city name: \\") city['population'] = int(input(\\"Enter city population: \\")) city['area'] = float(input(\\"Enter city area in square kilometers: \\")) cities.append(city) cont = input(\\"Do you want to enter another city? (yes/no): \\").lower() if cont != 'yes': break return cities def calculate_population_densities(cities): Calculates population density for each city and adds it to the city dictionary. for city in cities: city['density'] = city['population'] / city['area'] return cities def display_population_densities(cities): Displays the city name and its population density. for city in cities: print(f\\"The population density of {city['name']} is {city['density']:.2f} persons per square kilometer.\\") def main(): cities = capture_city_data() cities_with_density = calculate_population_densities(cities) display_population_densities(cities_with_density) # Uncomment the following line to run the main function directly # main()"},{"question":"Write a python function to split a list at a given index and insert an element at that position. Also, define a condition where the inserted element must be less than the element at the given index for the insertion to take place. If the condition isn't met, return an error message.","solution":"def split_and_insert(lst, index, element): Splits the list at the given index and inserts the element at that position only if the element is less than the element at the given index. Otherwise, returns an error message. if index >= len(lst): return \\"Index out of range.\\" if element < lst[index]: return lst[:index] + [element] + lst[index:] else: return \\"Insertion condition not met.\\""},{"question":"Write a Python function that takes a list of integers and returns True if all the integers in the list are between 0 and 5, inclusive.","solution":"def are_all_numbers_in_range(lst): Checks if all numbers in the list are between 0 and 5, inclusive. Args: lst (list): A list of integers. Returns: bool: True if all numbers are between 0 and 5, inclusive. False otherwise. return all(0 <= x <= 5 for x in lst)"},{"question":"Given a list of fruits, write a function that uses a for loop to check each fruit's length. If the length of a fruit is larger than 5, add the fruit to a new list. At the end of the function, return the new list.","solution":"def filter_long_fruits(fruits): Filters the list of fruits and returns a new list containing only those fruits whose length is greater than 5. Args: fruits (list of str): The list of fruits to be filtered. Returns: list of str: A new list containing fruits with length greater than 5. long_fruits = [] for fruit in fruits: if len(fruit) > 5: long_fruits.append(fruit) return long_fruits"},{"question":"Write a function that replaces all occurrences of a specified character in a string with another character. Additionally, the function should also be able to handle multiple character replacements at once. The function should take in three arguments: the original string, a list of characters to be replaced, and a list of characters to replace with. The length of the list of characters to be replaced should be equal to the length of the list of characters to replace with.","solution":"def replace_characters(original_string, to_replace, replace_with): Replaces all occurrences of characters in to_replace with the corresponding characters in replace_with. Args: original_string (str): The input string where replacements will be done. to_replace (list): List of characters to be replaced in the original string. replace_with (list): List of characters to replace with in the original string. Returns: (str): The string after replacements. Example: replace_characters(\\"hello world\\", ['h', 'e'], ['j', 'i']) -> \\"jillo world\\" if len(to_replace) != len(replace_with): raise ValueError(\\"The length of to_replace and replace_with lists must be equal\\") translation_table = str.maketrans(''.join(to_replace), ''.join(replace_with)) return original_string.translate(translation_table)"},{"question":"In Python, write a function that takes two integers a, b and returns the product of their digits.","solution":"def digit_product(a, b): Returns the product of the digits of integers a and b. Parameters: a (int): First integer. b (int): Second integer. Returns: int: Product of the digits of a and b. def product_of_digits(n): product = 1 for digit in str(abs(n)): product *= int(digit) return product product_a = product_of_digits(a) product_b = product_of_digits(b) return product_a * product_b"},{"question":"Create a python script to output the first n Fibonacci numbers.","solution":"def fibonacci_sequence(n): Returns the first n Fibonacci numbers. if n <= 0: return [] fib_seq = [0, 1] if n == 1: return [0] for i in range(2, n): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq[:n]"},{"question":"Given a string, write the most efficient Python program to check whether it is an anagram of palindrome. The most efficient way in terms of time complexity does not exist, you are required to provide a solution with the least time complexity.","solution":"def is_anagram_of_palindrome(s): Checks if the given string is an anagram of a palindrome. Parameters: s (str): the input string Returns: bool: True if the input string is an anagram of a palindrome, False otherwise from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count the characters that have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be an anagram of a palindrome, there can be at most one character with an odd frequency return odd_count <= 1"},{"question":"Write a Python program for detecting credit card fraud using machine learning. The program should read input data from a file in CSV format, preprocess the data, train a model using scikit-learn, and use the model to make predictions on new data.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import accuracy_score, confusion_matrix, classification_report import pickle def preprocess_data(data): Preprocesses the credit card fraud data. # Assuming 'Class' is the target variable and rest are features X = data.drop('Class', axis=1) y = data['Class'] # Standardize features scaler = StandardScaler() X_scaled = scaler.fit_transform(X) return X_scaled, y, scaler def train_model(data): Trains a RandomForestClassifier on the given dataset. X, y, scaler = preprocess_data(data) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) model = RandomForestClassifier(n_estimators=100, random_state=42) model.fit(X_train, y_train) y_pred = model.predict(X_test) accuracy = accuracy_score(y_test, y_pred) cm = confusion_matrix(y_test, y_pred) cr = classification_report(y_test, y_pred) # Save the model and scaler for future use with open('model.pkl', 'wb') as f: pickle.dump(model, f) with open('scaler.pkl', 'wb') as f: pickle.dump(scaler, f) return accuracy, cm, cr def predict(data): Uses the trained model to predict fraud on new data. with open('model.pkl', 'rb') as f: model = pickle.load(f) with open('scaler.pkl', 'rb') as f: scaler = pickle.load(f) X_new = scaler.transform(data) predictions = model.predict(X_new) return predictions"},{"question":"Design a Python function snippet to Determine Low Weather: Precipitation for Analysis for Professionals. Implement if/else or switch/case statements to handle different conditions related to the Bias. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def determine_precipitation_bias(precipitation): Determines the bias based on precipitation levels. Parameters: precipitation (float): the amount of precipitation measure. Returns: str: A bias description based on the precipitation level. if precipitation < 0: # Negative precipitation is invalid, return an error message return \\"Error: Invalid precipitation input\\" elif precipitation == 0: # No precipitation means dry conditions return \\"Dry\\" elif 0 < precipitation <= 2.5: # Very low precipitation return \\"Very Low\\" elif 2.5 < precipitation <= 10: # Low precipitation return \\"Low\\" elif 10 < precipitation <= 25: # Moderate precipitation return \\"Moderate\\" elif 25 < precipitation <= 50: # High precipitation return \\"High\\" else: # Very high precipitation return \\"Very High\\""},{"question":"Write a code that fetches the public IP address of your machine using Python.","solution":"import requests def fetch_public_ip(): Fetches the public IP address of the machine using an external service. url = 'https://api.ipify.org?format=json' response = requests.get(url) response.raise_for_status() ip_info = response.json() return ip_info['ip']"},{"question":"I have a list of numbers in Python, and I want to sort these numbers in both ascending and descending order. Can you provide a code example to accomplish this? Additionally, could you explain how to reverse the sorted list without sorting it again?","solution":"def sort_numbers(numbers): Returns a tuple containing the list sorted in ascending order and descending order. ascending = sorted(numbers) descending = sorted(numbers, reverse=True) return ascending, descending def reverse_list(sorted_list): Returns the reversed version of the provided list. return sorted_list[::-1]"},{"question":"Write a function in Python, named \\"median_of_three\\", that accepts a list of three numbers and returns the median element. The checking of the list length should be considered in your function so it raises an exception if the list does not contain exactly three numbers. Additionally, the function should also handle the cases when input is not a number and raise a TypeError in such scenarios.","solution":"def median_of_three(numbers): Returns the median element of a list of three numbers. Raises a ValueError if the list does not contain exactly three numbers. Raises a TypeError if the input is not a number. if len(numbers) != 3: raise ValueError(\\"The list must contain exactly three numbers.\\") for number in numbers: if not isinstance(number, (int, float)): raise TypeError(\\"All elements in the list must be numbers.\\") sorted_numbers = sorted(numbers) return sorted_numbers[1]"},{"question":"Develop a Python code that not only makes a character-level inverted index for a given text, but also efficiently handles updates (additions and deletions) to this index. The code should reflect changes in real time. For simplicity, you can limit your character set to a-zA-Z0-9. Text can be a multiline one.","solution":"import string class InvertedIndex: def __init__(self): self.index = {ch: {} for ch in string.ascii_letters + string.digits} def add_text(self, text, doc_id): Adds text to the inverted index under the given document ID lines = text.split('n') for line_num, line in enumerate(lines, start=1): for char_num, char in enumerate(line): if char in self.index: if doc_id not in self.index[char]: self.index[char][doc_id] = [] self.index[char][doc_id].append((line_num, char_num)) def remove_text(self, doc_id): Removes a document from the inverted index for char in self.index: if doc_id in self.index[char]: del self.index[char][doc_id] def query(self, character): Returns the index positions for the given character if character in self.index: return self.index[character] else: return {} # Example usage: # index = InvertedIndex() # index.add_text(\\"Hello World\\", 1) # index.add_text(\\"Python Code\\", 2) # print(index.query('o')) # Expected to show positions of 'o' in documents 1 and 2 # index.remove_text(1) # print(index.query('o')) # Expected to show positions of 'o' in only document 2 since doc id 1 is removed"},{"question":"Complete the following code. Your task is to implement a function that returns the maximum and minimum numbers from a list of integers, along with their index positions. Additionally, find the mean value of the numbers. The function outputs a tuple with the maximum number and its index, the minimum number and its index, and the mean value.","solution":"def max_min_mean(numbers): Returns the maximum and minimum numbers from a list of integers, along with their index positions, and the mean value of the numbers. Parameters: numbers (list): A list of integers. Returns: tuple: (max_number, max_index, min_number, min_index, mean_value) if not numbers: raise ValueError(\\"The input list should not be empty\\") max_number = max(numbers) min_number = min(numbers) max_index = numbers.index(max_number) min_index = numbers.index(min_number) mean_value = sum(numbers) / len(numbers) return max_number, max_index, min_number, min_index, mean_value"},{"question":"Create a function to flatten a 2D array and sort the elements in ascending order. The function should also remove any duplicate elements from the flattened array. The input array will always contain at least one sub-array and each sub-array will contain at least one element.","solution":"def flatten_and_sort(arr): Flattens a 2D array, sorts the elements in ascending order, and removes duplicates. Parameters: arr (list of lists of int): A 2D array where each sub-array contains at least one element. Returns: list of int: A sorted list of unique elements. # Flatten the 2D array flattened = [elem for sublist in arr for elem in sublist] # Remove duplicates by converting to a set, then back to a list unique_elements = list(set(flattened)) # Sort the list in ascending order unique_elements.sort() return unique_elements"},{"question":"Write a Python function that takes a format string and returns a regular expression that matches the format string. The regular expression should match the entire string, not just a part of it.","solution":"import re def format_string_to_regex(format_string): Converts a given format string to a regular expression that matches the entire string. Special characters in the format string like '.', '*','?','+', etc., are escaped in the resulting regular expression to match them literally. Parameters: format_string (str): The format string to convert. Returns: str: A regular expression pattern that matches the format string. # Use re.escape to escape any special characters in the format string escaped_string = re.escape(format_string) # Return the regex pattern with start (^) and end () anchors return f'^{escaped_string}'"},{"question":"Develop a Python decorator with the ability to dynamically alter the functionality of a method in a class. Your decorator should be able to accept parameters and should add extra functionality before or after the class method is called. Remember to ensure that your decorator is flexible enough to accommodate methods with varying numbers of parameters and types. Implementing your decorator with a clean, pythonic style will gain you extra credit. Below is a simplified demonstration of what you are being asked.","solution":"def dynamic_decorator(message): def decorator(func): def wrapper(*args, **kwargs): print(f\\"Before calling {func.__name__}: {message}\\") result = func(*args, **kwargs) # call the original function print(f\\"After calling {func.__name__}: {message}\\") return result return wrapper return decorator # Example usage within a class class ExampleClass: @dynamic_decorator(\\"Executing method\\") def example_method(self, x, y): Method that adds two numbers. return x + y"},{"question":"Given the text string \\"hello world \\", write code to print each character in the string on a separate line, without using any built-in string manipulation functions or loops.","solution":"def print_characters(s): Print each character in the string \`s\` on a separate line without using any built-in string manipulation functions or loops. Parameters: s (str): The input string. def helper(index): if index < len(s): print(s[index]) helper(index + 1) helper(0)"},{"question":"Write a Python function that calculates the Levenshtein distance between two inputted strings. The Levenshtein distance corresponds to the minimum number of single-character edits (insertions, deletions, and replacements) required to change one string into the other. Remember to optimize your solution to handle large strings effectively.","solution":"def levenshtein_distance(s1, s2): Calculates the Levenshtein distance between two strings s1 and s2. if len(s1) < len(s2): return levenshtein_distance(s2, s1) # Initialize the distance matrix previous_row = range(len(s2) + 1) for i, c1 in enumerate(s1): current_row = [i + 1] for j, c2 in enumerate(s2): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (c1 != c2) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1]"},{"question":"Implement a Python function with multifaceted functionality: its ability to not only reverse a string (running in reverse order) but also reverse the characters of each word in the string individually while preserving the initial word arrangement. As inputs, treat 'Hello World' and 'Python Programming' distinctly. Implement this code without using any built-in reverse functions. Incorporate error handling to validate the input type and ensure every input is a string.","solution":"def reverse_string_and_words(input_str): This function takes a string as input, reverses the entire string's order, and also reverses each word's characters while preserving the initial word arrangement. if not isinstance(input_str, str): raise ValueError(\\"Input must be a string\\") # Reverse entire string first reversed_full = ''.join(input_str[i] for i in range(len(input_str)-1, -1, -1)) # Split reversed string by spaces words = reversed_full.split(\\" \\") # Reverse each word in the list reversed_words = [''.join(word[i] for i in range(len(word)-1, -1, -1)) for word in words] # Join reversed words back into a string with spaces result = ' '.join(reversed_words) return result"},{"question":"In Python, what does it mean when a function definition is directly followed by a decorated call? Moreover, I am observing that my decorated function \`f3()\` is being called twice, but I'm not sure why since I only imported the \`time\` module to be used as a decorator and I made use of the \`@\` decorator syntax. Can you provide an explanation with possible code examples?","solution":"def time_decorator(func): A simple decorator that measures the execution time of the function being decorated. import time def wrapper(*args, **kwargs): start_time = time.time() result = func(*args, **kwargs) end_time = time.time() print(f\\"Function {func.__name__} took {(end_time - start_time):.4f} seconds to execute.\\") return result return wrapper @time_decorator def example_function(x): An example function that simulates a delay. import time time.sleep(x) return x"},{"question":"Given a directed graph without cycles and given that the graph is represented by a list of edges, propose a topological sorting algorithm to linearize the graph. Additionally, implement a function to determine if the sorted order is valid.","solution":"from collections import defaultdict, deque def topological_sort(edges): Returns the topological order of the nodes in the graph represented by edges. # Create a graph from the edges graph = defaultdict(list) in_degree = defaultdict(int) nodes = set() for u, v in edges: graph[u].append(v) in_degree[v] += 1 nodes.add(u) nodes.add(v) # Initialize the queue with nodes having zero in-degree zero_in_degree_queue = deque([node for node in nodes if in_degree[node] == 0]) topological_order = [] while zero_in_degree_queue: node = zero_in_degree_queue.popleft() topological_order.append(node) # Decrease the in-degree of neighboring nodes for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) if len(topological_order) == len(nodes): return topological_order else: return [] # A cycle was detected in the graph def is_valid_topological_sort(edges, order): Returns True if 'order' is a valid topological order of the given graph, otherwise returns False. # Create a position map from order list for quick lookup position = {node: idx for idx, node in enumerate(order)} for u, v in edges: if position[u] > position[v]: return False return True"},{"question":"Write a Python function named \`count_prime_hex\` that takes a hexadecimal string as input and returns the count of characters that represent prime numbers.","solution":"def count_prime_hex(hex_str): Returns the count of characters in the hexadecimal string that represent prime numbers. primes = {'2', '3', '5', '7', 'B', 'D'} count = 0 for char in hex_str.upper(): if char in primes: count += 1 return count"},{"question":"Define a function that searches for a specific element in a 2D array. The 2D array can now contain duplicates, and the function should return the coordinates (row and column) of all occurrences of the element. If the element is not found, the function should return an empty list.","solution":"def search_element_2d(array, target): Searches for a specific element in a 2D array and returns the coordinates (row, col) of all occurrences of the element. If the element is not found, returns an empty list. Parameters: array (list of list of int): The 2D array to search in. target (int): The element to search for. Returns: list of tuple: List of (row, col) coordinates of all occurrences of the element. result = [] for row_idx, row in enumerate(array): for col_idx, element in enumerate(row): if element == target: result.append((row_idx, col_idx)) return result"},{"question":"Write a function in Python that takes a hex byte string and returns a list of integers, interpreting each byte as an unsigned number in base 10.","solution":"def hex_string_to_int_list(hex_string): Converts a hex byte string to a list of integers. Each byte is interpreted as an unsigned number in base 10. Parameters: hex_string (str): A hexadecimal byte string. Returns: List[int]: A list of integers, each representing a byte from the hex string. # Remove any prefix such as '0x' if exists if hex_string.startswith('0x'): hex_string = hex_string[2:] # Ensure the hex string has an even length if len(hex_string) % 2 != 0: raise ValueError(\\"Hex string must have an even number of characters\\") # Convert each byte to an integer and add to the list int_list = [int(hex_string[i:i+2], 16) for i in range(0, len(hex_string), 2)] return int_list"},{"question":"Suppose you are given two lists of numbers: list1 and list2. Write a python function to find the intersection of these two lists. The intersection is defined as the common elements between the two lists. Your function should return the intersection without duplicate elements, and the output should be in sorted order.","solution":"def intersection(list1, list2): Returns the sorted list of common elements between list1 and list2 without duplicates. set1 = set(list1) set2 = set(list2) common_elements = set1.intersection(set2) return sorted(common_elements)"},{"question":"Create a function that converts an RGB color to a HEX color, without using any built-in conversion functions or libraries. The function should take in three integers representing the red, green, and blue values of the color, and return a string representing the HEX color code.","solution":"def rgb_to_hex(r, g, b): Converts RGB color to HEX color. Parameters: r (int): Red value (0-255) g (int): Green value (0-255) b (int): Blue value (0-255) Returns: str: HEX color code in format #RRGGBB def clamp(value): return max(0, min(value, 255)) r = clamp(r) g = clamp(g) b = clamp(b) return f'#{r:02X}{g:02X}{b:02X}'"},{"question":"Sort the following array of strings in reverse alphabetical order, using a sorting algorithm with a time complexity of O(n log n) and a space complexity of O(1). The array may contain duplicate strings and should be sorted in-place. Additionally, you should implement the sorting algorithm yourself instead of using built-in sorting functions or libraries.","solution":"def reverse_alphabetical_sort(arr): Sorts the array of strings in reverse alphabetical order using an in-place quicksort algorithm. def partition(low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] > pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quick_sort(low, high): if low < high: pi = partition(low, high) quick_sort(low, pi - 1) quick_sort(pi + 1, high) quick_sort(0, len(arr) - 1) return arr"},{"question":"Write a function to remove a given element from an array of integers, without using any inbuilt or external library functions for array manipulation. Also, maintain the original order of elements.","solution":"def remove_element(arr, element): Removes the given element from the array while maintaining the original order of elements. :param arr: List of integers from which the element will be removed. :param element: The integer value that needs to be removed from the list. :return: A new list with the specified element removed. result = [] for item in arr: if item != element: result.append(item) return result"},{"question":"Write a python program for Floyd Warshall Algorithm. The input graph will be an adjacency matrix with vertices labeled from 0 to n-1. The output should be the final matrix after running the algorithm and a boolean value indicating if there is a negative cycle or not.","solution":"def floyd_warshall(graph): Floyd-Warshall algorithm to find the shortest paths in a weighted graph with positive or negative edge weights (but with no negative cycles). Parameters: graph (list of list of int): A 2D array representing the adjacency matrix of the graph. Returns: tuple: A tuple containing the final distance matrix after running the Floyd-Warshall algorithm and a boolean value indicating whether there is a negative cycle in the graph. n = len(graph) dist = [row[:] for row in graph] # Initialize distance matrix with the graph's adjacency matrix # Running Floyd-Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Check for negative weight cycles negative_cycle = False for i in range(n): if dist[i][i] < 0: negative_cycle = True break return dist, negative_cycle"},{"question":"Write a Python script that reads a large text file with multiple words on each line, filters out duplicate words, and saves unique words into a new file. Additionally, ensure that words are saved in descending order of their frequency in the original text file.","solution":"from collections import Counter def filter_and_sort_words(input_file, output_file): Reads a large text file, filters out duplicate words, sorts unique words in descending order of their frequency, and saves them into a new file. Args: input_file (str): Path to the input text file. output_file (str): Path to the output text file. with open(input_file, 'r') as f: words = f.read().split() word_counts = Counter(words) sorted_words = sorted(word_counts.items(), key=lambda item: item[1], reverse=True) with open(output_file, 'w') as f: for word, count in sorted_words: f.write(f\\"{word} {count}n\\")"},{"question":"Write a python script that uses boto3 to list all the S3 buckets in your AWS account. Additionally, for each bucket, list all the objects and their corresponding metadata. Ensure that the script handles potential errors and edge cases appropriately, such as permission issues or non-existent buckets.","solution":"import boto3 from botocore.exceptions import NoCredentialsError, PartialCredentialsError def list_s3_buckets_and_objects(): Lists all the S3 buckets in the AWS account and all the objects in each bucket along with their metadata. s3 = boto3.client('s3') try: # List all buckets response = s3.list_buckets() buckets = response.get('Buckets', []) for bucket in buckets: bucket_name = bucket['Name'] print(f\\"Bucket: {bucket_name}nObjects:\\") try: # List objects in the current bucket objects_response = s3.list_objects_v2(Bucket=bucket_name) objects = objects_response.get('Contents', []) for obj in objects: object_key = obj['Key'] print(f\\" Object Key: {object_key}\\") # Fetch object metadata object_metadata = s3.head_object(Bucket=bucket_name, Key=object_key) print(f\\" Metadata: {object_metadata}\\") except s3.exceptions.NoSuchBucket: print(f\\" Warning: The bucket '{bucket_name}' no longer exists.\\") except s3.exceptions.ClientError as e: print(f\\" Error fetching bucket '{bucket_name}' contents: {e}\\") except (NoCredentialsError, PartialCredentialsError): print(\\"Error: AWS credentials not found.\\") except Exception as e: print(f\\"Error listing S3 buckets: {e}\\") if __name__ == \\"__main__\\": list_s3_buckets_and_objects()"},{"question":"Develop a Python function that takes anISO 8601 formatted date string as input and yields the day of the week as an output.","solution":"from datetime import datetime def get_day_of_week(iso_date: str) -> str: Returns the day of the week for an ISO 8601 formatted date string. Parameters: iso_date (str): ISO 8601 formatted date string. Returns: str: Day of the week. date = datetime.fromisoformat(iso_date) return date.strftime('%A')"},{"question":"Access a specific byte in a gzip file using the Python zlib library without decompressing the entire file. Also check for the validity of the gzip file format.","solution":"import zlib def access_byte_in_gzip(file_path, byte_index): Access a specific byte in a gzip file without decompressing the entire file and check the validity of the gzip file format. Parameters: file_path (str): The path to the gzip file. byte_index (int): The specific byte index to access. Returns: int: The byte value if successfully accessed, otherwise raises an error. try: with open(file_path, 'rb') as f: # Reading the first 10 bytes to validate the gzip file format header = f.read(10) if header[:2] != b'x1fx8b': raise ValueError(\\"Invalid gzip file format\\") # Moving the pointer to the desired byte index f.seek(byte_index) # Reading the byte at the specific index byte = f.read(1) if byte: return ord(byte) else: raise IndexError(\\"Byte index out of range\\") except OSError as e: raise e"},{"question":"Write a Python program to find out the common items from two given arrays. However, the program should not use any built-in functions or libraries to find the common items. The program should only use basic programming constructs such as loops and conditionals. Additionally, the program should not modify the original arrays.","solution":"def find_common_items(arr1, arr2): Returns a list of common items from arr1 and arr2. common_items = [] for item1 in arr1: for item2 in arr2: if item1 == item2 and item1 not in common_items: common_items.append(item1) break return common_items"},{"question":"For a given singly linked list of integers, sort it using the Insertion Sort method.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def insertion_sort_list(head): Sorts a singly linked list using the Insertion Sort method. Args: head (ListNode): The head of the singly linked list. Returns: ListNode: The head of the sorted singly linked list. if not head or not head.next: return head sorted_dummy = ListNode() current = head while current: prev = sorted_dummy while prev.next and prev.next.val < current.val: prev = prev.next next_temp = current.next current.next = prev.next prev.next = current current = next_temp return sorted_dummy.next"},{"question":"Construct an algorithm to find the depth of a binary tree, with the additional constraint that the algorithm must be implemented using a recursive approach.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_depth(root): Returns the depth of the binary tree. if root is None: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write the code to sort a list of integers using insertion sort in descending order. Additionally, the code should print the sorted list after each insertion operation.","solution":"def insertion_sort_descending(arr): Sort the list of integers in descending order using insertion sort. Prints the list after each insertion operation. for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0..i-1], that are less than key, to one position ahead # of their current position while j >= 0 and key > arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key print(arr) # Print the list after each insertion operation return arr"},{"question":"I have a dataframe in pandas with a column of encoded image strings. I want to save the images to the disk using a for loop. The code I used to encode images before was \`import base64\`. \`df['image_bytes'] = df['encoded_string'].apply(lambda x: base64.b64decode(x))\`. This produced bytes, that I saved. Now, I need to do something similar but in reverse, in a loop. Something like: for i, row in \`df.iterrows():\` then \`base64_to_img(row['image_bytes'])\`. I'm not sure how to convert this into an image and save it. Could you help?","solution":"import base64 import pandas as pd from PIL import Image from io import BytesIO import os def base64_to_img(image_bytes, save_path): Converts base64 encoded image bytes back to an image and saves it to disk. :param image_bytes: Base64 encoded image bytes :param save_path: The path (including filename) where the image will be saved img = Image.open(BytesIO(image_bytes)) img.save(save_path) def save_images_from_dataframe(df, save_dir): Saves images from a dataframe column containing base64 encoded image bytes. :param df: Dataframe containing the column 'image_bytes' with base64 encoded image bytes :param save_dir: Directory where images will be saved if not os.path.exists(save_dir): os.makedirs(save_dir) for i, row in df.iterrows(): save_path = os.path.join(save_dir, f'image_{i}.png') base64_to_img(row['image_bytes'], save_path)"},{"question":"Design a delete operation that could be used for removing an element from a given array at a specific index, then shift other elements to fill the gap, without using built-in array methods. Additionally, implement a check to verify the correctness of the array index prior to deletion.","solution":"def delete_element(array, index): Removes the element from the array at the specified index and shifts the elements to fill the gap. :param array: List of elements :param index: Index from which the element has to be deleted :return: List after deletion and shifting of elements :raises: IndexError if the index is out of range if index < 0 or index >= len(array): raise IndexError(\\"Index out of range\\") # Shift elements to the left for i in range(index, len(array) - 1): array[i] = array[i + 1] # Remove last element array.pop() return array"},{"question":"Write a function that accepts an integer value n and creates an n by n matrix, with all elements initialised to a random integer between 1 and 10.","solution":"import random def create_random_matrix(n): Creates an n by n matrix with all elements initialized to a random integer between 1 and 10. Parameters: n (int): The size of the matrix. Returns: list: An n by n matrix with random values. return [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]"},{"question":"Create a function \\"fraction_to_roman\\" that takes a fraction as an input and converts it to its Roman numeral equivalent. However, you are not allowed to use any built-in functions or libraries to perform the conversion. The function should also handle fractions that are not divisible, for example, converting 3/7 to \\"III/VII\\". Additionally, the function should be able to handle fractions with numerators up to 1000 and denominators up to 100.","solution":"def fraction_to_roman(numerator, denominator): Converts the given fraction to its Roman numeral equivalent. :param numerator: int, numerator of the fraction :param denominator: int, denominator of the fraction :return: str, the fraction in Roman numerals def int_to_roman(num): val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num if numerator == 0: return \\"0\\" roman_numerator = int_to_roman(numerator) roman_denominator = int_to_roman(denominator) return f\\"{roman_numerator}/{roman_denominator}\\""},{"question":"Write a recursive function which can print the repeated calls with different input values in each recursive call, and calculate the factorial of a given number. Additionally, limit the input to non-negative integers and include error handling for invalid input, and add functionality to memoize previous calculations for efficiency.","solution":"factorial_memo = {} def factorial(n): Recursively calculates the factorial of a given non-negative integer n. Memoizes computed results to optimize performance. Includes error handling for invalid non-negative integer inputs. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n in factorial_memo: return factorial_memo[n] if n == 0 or n == 1: return 1 print(f\\"Calling factorial({n - 1})\\") result = n * factorial(n - 1) factorial_memo[n] = result return result"},{"question":"Given an array of words, write a function to delete the duplicated words. Can you provide three different algorithmic solutions with varying time and space complexities? For each solution, make sure to describe the method used, the time complexity, and the space complexity.","solution":"def remove_duplicates_set(words): seen = set() unique_words = [] for word in words: if word not in seen: unique_words.append(word) seen.add(word) return unique_words from collections import OrderedDict def remove_duplicates_ordered_dict(words): return list(OrderedDict.fromkeys(words)) def remove_duplicates_brute_force(words): unique_words = [] for word in words: if word not in unique_words: unique_words.append(word) return unique_words"},{"question":"Implement the van Emde Boas tree data structure in Python, which supports the usual operations like insert, delete, and search. It should efficiently handle integers within a given universe size.","solution":"class VanEmdeBoasTree: def __init__(self, universe_size): self.universe_size = universe_size self.min = None self.max = None if universe_size <= 2: self.summary = None self.cluster = [None, None] else: u = self._upper_root(universe_size) self.summary = VanEmdeBoasTree(u) self.cluster = [VanEmdeBoasTree(u) for _ in range(u)] def _lower_root(self, u): return int(u ** 0.5) def _upper_root(self, u): return int((u + 0.5) ** 0.5) def _high(self, x): return x // self._lower_root(self.universe_size) def _low(self, x): return x % self._lower_root(self.universe_size) def _index(self, x, y): return x * self._lower_root(self.universe_size) + y def insert(self, x): if self.min is None: self.min = x self.max = x else: if x < self.min: x, self.min = self.min, x if x > self.max: self.max = x if self.universe_size > 2: high = self._high(x) low = self._low(x) if self.cluster[high].min is None: self.summary.insert(high) self.cluster[high].insert(low) else: self.cluster[high].insert(low) def delete(self, x): if self.min == self.max: self.min = None self.max = None elif self.universe_size == 2: if x == 0: self.min = 1 if self.max == 1 else None else: self.min = 0 self.max = self.min else: if x == self.min: first_cluster = self.summary.min x = self._index(first_cluster, self.cluster[first_cluster].min) self.min = x high = self._high(x) low = self._low(x) self.cluster[high].delete(low) if self.cluster[high].min is None: self.summary.delete(high) if x == self.max: summary_max = self.summary.max if summary_max is None: self.max = self.min else: self.max = self._index(summary_max, self.cluster[summary_max].max) elif x == self.max: self.max = self._index(high, self.cluster[high].max) def search(self, x): if x == self.min or x == self.max: return True elif self.universe_size == 2: return False else: return self.cluster[self._high(x)].search(self._low(x))"},{"question":"Create a function in Python that takes a list of integers as input and returns the type of the first element in the list. If the list is empty, the function should return None. The function should have a time complexity of O(1).","solution":"def first_element_type(lst): Returns the type of the first element in the list. If the list is empty, returns None. if lst: return type(lst[0]) return None"},{"question":"Develop a sparse matrix implementation using the Compressed Sparse Column (CSC) format, which facilitates efficient column operations, such as column slicing and permutations. Your code should support basic linear algebra operations on the matrix, including sparse vector multiplication and matrix transposition.","solution":"class CSCMatrix: def __init__(self, data, indices, indptr, shape): self.data = data self.indices = indices self.indptr = indptr self.shape = shape def to_dense(self): Convert the CSC matrix to a dense (regular) matrix. result = [[0] * self.shape[1] for _ in range(self.shape[0])] for j in range(self.shape[1]): for i in range(self.indptr[j], self.indptr[j+1]): result[self.indices[i]][j] = self.data[i] return result def multiply_with_vector(self, vector): Multiply the CSC matrix with a dense vector. if len(vector) != self.shape[1]: raise ValueError(\\"Vector length must match the number of columns in the matrix.\\") result = [0] * self.shape[0] for j in range(self.shape[1]): for i in range(self.indptr[j], self.indptr[j+1]): result[self.indices[i]] += self.data[i] * vector[j] return result def transpose(self): Transpose the CSC matrix. from collections import defaultdict row_counts = defaultdict(int) for index in self.indices: row_counts[index] += 1 new_indptr = [0] * (self.shape[0] + 1) new_indptr[1:] = [row_counts[i] for i in range(self.shape[0])] for i in range(1, len(new_indptr)): new_indptr[i] += new_indptr[i-1] new_data = [0] * len(self.data) new_indices = [0] * len(self.indices) next_index = list(new_indptr) for j in range(self.shape[1]): for i in range(self.indptr[j], self.indptr[j+1]): row = self.indices[i] index = next_index[row] new_data[index] = self.data[i] new_indices[index] = j next_index[row] += 1 return CSCMatrix(new_data, new_indices, new_indptr, (self.shape[1], self.shape[0]))"},{"question":"How can I write a Python code snippet to check if a string is a PIN code?","solution":"def is_valid_pin(pin): Returns True if the given string is a valid PIN code (4 or 6 digits). Returns False otherwise. if len(pin) == 4 or len(pin) == 6: return pin.isdigit() return False"},{"question":"Write code to print out all the prime numbers from a given list of numbers. Additionally, determine which numbers in the list are not prime and list those as well. The code should be optimized for performance.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def categorize_numbers(numbers): Categorizes the given list of numbers into primes and non-primes. Returns two lists: one containing prime numbers and the other containing non-prime numbers. primes = [] non_primes = [] for number in numbers: if is_prime(number): primes.append(number) else: non_primes.append(number) return primes, non_primes"},{"question":"Create a python function that takes a string as input and generates a frequency distribution of the characters in the string. The function should also include a feature that allows the user to specify if they want the distribution to include case sensitivity.","solution":"def char_frequency_distribution(input_string, case_sensitive=True): Generates a frequency distribution of characters in the input string. Parameters: - input_string: string, the string to analyze - case_sensitive: bool, whether or not the distribution should be case sensitive Returns: - dict: a dictionary where keys are characters and values are their frequencies if not case_sensitive: input_string = input_string.lower() frequency_dict = {} for char in input_string: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Develop a Python script that not only converts a given string into a list of characters, but also identifies the data type of each character (e.g., number, alphabet (specify whether it is uppercase or lowercase), punctuation, special character, or whitespace). Implement the function \`analyze_string_input(input_string)\` that returns a list of tuples. Each tuple in the list should contain a character from the string and its data type as a string.","solution":"import string def analyze_string_input(input_string): Analyzes characters in the input string and identifies their types. Params: input_string (str): The string to be analyzed. Returns: list of tuples: Each tuple contains a character from the string and its type as a string. result = [] for char in input_string: if char.isdigit(): result.append((char, 'number')) elif char.isalpha(): if char.islower(): result.append((char, 'lowercase alphabet')) else: result.append((char, 'uppercase alphabet')) elif char in string.punctuation: result.append((char, 'punctuation')) elif char.isspace(): result.append((char, 'whitespace')) else: result.append((char, 'special character')) return result"},{"question":"Rewrite the code into a function that takes a positive integer as an input and returns its binary representation as a string.","solution":"def int_to_binary(n): Converts a positive integer to its binary representation as a string. Parameters: n (int): A positive integer. Returns: str: Binary representation of the input integer. if n == 0: return \\"0\\" binary = \\"\\" while n > 0: binary = str(n % 2) + binary n = n // 2 return binary"},{"question":"Write a Python program that implements a simple algorithm for generating the Fibonacci sequence up to nth element using recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function which takes an array of integers and returns the second largest unique element in the array. If the array has less than 2 unique elements, the function should return None. The size of the input array can be up to 10^5, and each value in the array can range from -10^5 to 10^5.","solution":"def second_largest_unique(array): Returns the second largest unique element in the array. If there are less than 2 unique elements, returns None. unique_elements = list(set(array)) if len(unique_elements) < 2: return None unique_elements.sort(reverse=True) return unique_elements[1]"},{"question":"Iterate through a given array and modify each element by multiplying it by a constant value. Handle the scenario where the constant value is 0 by setting the element to 0. If the constant value is negative, reverse the order of the array elements after the modification. Return the modified array.","solution":"def modify_array(arr, constant): Modifies each element in the array by multiplying it by a constant. Sets element to 0 if constant is 0. Reverses the order of elements if the constant is negative. Parameters: arr (list of int/float): The array to modify. constant (int/float): The constant value to multiply each element by. Returns: list of int/float: The modified array. if constant == 0: return [0] * len(arr) modified_array = [x * constant for x in arr] if constant < 0: modified_array.reverse() return modified_array"},{"question":"Write a Python function to test if a provided string consists exclusively of alphabetic characters.","solution":"def is_alpha_string(input_str): Returns True if the input_str consists exclusively of alphabetic characters, False otherwise. return input_str.isalpha()"},{"question":"Create a function which takes a variable number of arguments, checks if each one is a number, and returns the largest number among them. If any of the arguments are not numbers, the function should raise an exception with a custom error message.","solution":"def largest_number(*args): Returns the largest number among the given arguments. Raises a ValueError if any of the arguments are not numbers. if not args: raise ValueError(\\"At least one number must be provided\\") for arg in args: if not isinstance(arg, (int, float)): raise ValueError(f\\"Invalid input '{arg}': All arguments must be int or float\\") return max(args)"},{"question":"How do I convert all strings in a list to uppercase in Python without using any built-in string methods or the upper() method? Please provide an algorithm or code snippet.","solution":"def to_uppercase(s): Converts a single character to uppercase if it is a lowercase letter. # ASCII value of 'a' is 97 and 'A' is 65 if 'a' <= s <= 'z': return chr(ord(s) - (ord('a') - ord('A'))) return s def list_to_uppercase(lst): Converts all strings in the given list to uppercase without using upper(). result = [] for word in lst: upper_word = \\"\\".join(to_uppercase(char) for char in word) result.append(upper_word) return result"},{"question":"Develop a multi-threaded software algorithm that evaluates multiple numerical arrays simultaneously. The algorithm checks if all the elements within the arrays abide by a strict ascending progression and also identifies the sequence's common difference, returning a dictionary where each key is the array index and the value is its progression difference. For example, for inputs like [3, 5, 7], [8,10,12], [15,20,25], the output should be {0:2, 1:2, 2:5}.","solution":"import threading def check_arithmetic_sequence(array): Checks if the array is in arithmetic progression and returns the common difference if so. if len(array) < 2: return None # Not enough elements to determine progression common_difference = array[1] - array[0] for i in range(1, len(array)): if array[i] - array[i-1] != common_difference: return None # Not an arithmetic progression return common_difference def evaluate_arrays(arrays): Evaluates multiple arrays to see if they are in arithmetic progression. Returns a dictionary where each key is the array index and the value is its progression difference. result = {} threads = [] def worker(index, array): diff = check_arithmetic_sequence(array) if diff is not None: result[index] = diff for index, array in enumerate(arrays): thread = threading.Thread(target=worker, args=(index, array)) threads.append(thread) thread.start() for thread in threads: thread.join() return result"},{"question":"Given a list that contains randomly generated numbers in the range 1 to 100, write a Python function that removes any duplicates and sorts the list in ascending order. The function should also include error handling to ensure the input provided is a list. Additionally, implement a mechanism to generate the list with random numbers if no list is provided as input.","solution":"import random def process_list(input_list=None): Removes duplicates and sorts the list in ascending order. If no list is provided, generates a list of random numbers between 1 to 100. if input_list is None: input_list = [random.randint(1, 100) for _ in range(10)] if not isinstance(input_list, list): raise ValueError(\\"Input must be a list.\\") processed_list = sorted(set(input_list)) return processed_list"},{"question":"Design an algorithm in Python for predicting stock prices for a given day. The algorithm should take as input a stock symbol and a date, and should return the predicted stock price for that day. Consider using historical data to train your model, and be sure to include error handling and unit tests to ensure the accuracy of your predictions.","solution":"import datetime import statistics # Sample historical data historical_data = { 'AAPL': { datetime.date(2023, 10, 1): 150, datetime.date(2023, 10, 2): 152, datetime.date(2023, 10, 3): 153, datetime.date(2023, 10, 4): 151, datetime.date(2023, 10, 5): 155, datetime.date(2023, 10, 6): 154, datetime.date(2023, 10, 7): 150 }, 'MSFT': { datetime.date(2023, 10, 1): 210, datetime.date(2023, 10, 2): 212, datetime.date(2023, 10, 3): 213, datetime.date(2023, 10, 4): 211, datetime.date(2023, 10, 5): 215, datetime.date(2023, 10, 6): 214, datetime.date(2023, 10, 7): 210 } # Add more historical data as needed } def get_predicted_price(stock_symbol, target_date): Predict the stock price for a given day using the average of the previous week. Args: - stock_symbol (str): The stock symbol - target_date (datetime.date): The date for which to predict the price Returns: - float: The predicted stock price if stock_symbol not in historical_data: raise ValueError(f\\"No historical data available for symbol {stock_symbol}\\") if not isinstance(target_date, datetime.date): raise ValueError(\\"target_date must be a datetime.date instance\\") stock_data = historical_data[stock_symbol] previous_week_prices = [] for i in range(1, 8): previous_date = target_date - datetime.timedelta(days=i) if previous_date in stock_data: previous_week_prices.append(stock_data[previous_date]) if len(previous_week_prices) < 1: raise ValueError(f\\"Not enough historical data available to predict for {target_date}\\") return statistics.mean(previous_week_prices)"},{"question":"Given the Python code below, identify and fix the errors to correctly swap the values of two variables without using a third variable. Further, write a comprehensive function that takes in any two variables, checks if they are integers and swaps their values if they are, all in one single code line.","solution":"def swap_integers(x, y): Swaps the values of x and y if they are both integers. return (y, x) if isinstance(x, int) and isinstance(y, int) else (x, y)"},{"question":"Write a Python function that takes in two sets, A and B, and removes all elements from A that are also present in B. The function should return the modified set A.","solution":"def subtract_sets(A, B): Removes all elements from set A that are also present in set B. Parameters: A (set): The set from which elements will be removed. B (set): The set containing elements to remove from A. Returns: set: The modified set A. return A - B"},{"question":"Modify the given code to multiply two n x m matrices. The matrices should be represented as two-dimensional lists. Additionally, ensure that the number of columns in matrix1 is equal to the number of rows in matrix2. The resulting matrix should be stored in a new two-dimensional list. The program should also calculate and display the sum of all elements in the resulting matrix. The program should have a time complexity of O(n^3) and a space complexity of O(n^2).","solution":"def multiply_matrices(matrix1, matrix2): Multiplies two matrices and returns the resulting matrix along with the sum of all elements. matrices are represented as two-dimensional lists. Assumes the number of columns in matrix1 is equal to the number of rows in matrix2. rows_matrix1 = len(matrix1) cols_matrix1 = len(matrix1[0]) rows_matrix2 = len(matrix2) cols_matrix2 = len(matrix2[0]) # Initialize the resulting matrix with zeros result = [[0 for _ in range(cols_matrix2)] for _ in range(rows_matrix1)] # Multiply the matrices for i in range(rows_matrix1): for j in range(cols_matrix2): for k in range(cols_matrix1): # or rows_matrix2 result[i][j] += matrix1[i][k] * matrix2[k][j] # Calculate the sum of all elements in the resulting matrix total_sum = sum(sum(row) for row in result) return result, total_sum"},{"question":"Create a function in Python that takes two parameters: a list of integers and an integer threshold. The function should return a new list with only the elements from the original list that are greater than or equal to the threshold.","solution":"def filter_list_by_threshold(int_list, threshold): Returns a list of integers from int_list that are greater than or equal to the threshold. Parameters: int_list (list of int): The list of integers to be filtered. threshold (int): The threshold value to filter the integers. Returns: list of int: A list containing elements from int_list that are >= threshold. return [x for x in int_list if x >= threshold]"},{"question":"Given a list of integers, write a Python program to find the maximum sum of a sub-array that consists of consecutive elements. The sub-array must include at least two elements.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a sub-array that consists of consecutive elements and includes at least two elements. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements\\") max_sum = float('-inf') current_sum = 0 for i in range(len(arr) - 1): current_sum = arr[i] for j in range(i + 1, len(arr)): current_sum += arr[j] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given three lists of integers: list1, list2, and list3. Your task is to write a python function that merges the three sorted given lists into one sorted list in ascending order. The program will not use any built-in sorting functions.","solution":"def merge_three_sorted_lists(list1, list2, list3): Merges three sorted lists into one sorted list. Args: list1, list2, list3: List of integers (sorted in ascending order) Returns: List of integers sorted in ascending order merged_list = [] i = j = k = 0 # Merge the lists until one of them is exhausted while i < len(list1) and j < len(list2) and k < len(list3): if list1[i] <= list2[j] and list1[i] <= list3[k]: merged_list.append(list1[i]) i += 1 elif list2[j] <= list1[i] and list2[j] <= list3[k]: merged_list.append(list2[j]) j += 1 else: merged_list.append(list3[k]) k += 1 # Merge the remaining elements while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1) and k < len(list3): if list1[i] <= list3[k]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list3[k]) k += 1 while j < len(list2) and k < len(list3): if list2[j] <= list3[k]: merged_list.append(list2[j]) j += 1 else: merged_list.append(list3[k]) k += 1 # Append the rest elements, if any if i < len(list1): merged_list.extend(list1[i:]) if j < len(list2): merged_list.extend(list2[j:]) if k < len(list3): merged_list.extend(list3[k:]) return merged_list"},{"question":"Describe an algorithm to determine if a given string is a palindrome. The algorithm should not use any built-in string manipulation functions and should efficiently handle strings of any length.","solution":"def is_palindrome(s): Determine if the given string is a palindrome, i.e., it reads the same forward and backward. This implementation does not use any built-in string manipulation functions. :param s: Input string to check :return: Boolean value, True if the string is a palindrome, False otherwise start = 0 end = len(s) - 1 while start < end: if s[start] != s[end]: return False start += 1 end -= 1 return True"},{"question":"Convert a binary number (string) to its decimal equivalent using Python. However, you are not allowed to use any built-in functions or libraries for converting binary to decimal. You must implement the conversion logic from scratch.","solution":"def binary_to_decimal(binary_str): Converts a binary number (string) to its decimal equivalent. Parameters: binary_str (str): Binary number in string format. Returns: int: Decimal equivalent of the binary number. decimal = 0 exponent = len(binary_str) - 1 for digit in binary_str: if digit == '1': decimal += 2 ** exponent exponent -= 1 return decimal"},{"question":"draft a python code that implements flexible ReLU (FReLu) activation function with a custom threshold. In addition, remember to incorporate vector handling within the function.","solution":"import numpy as np def flexible_relu(x, threshold=0): Flexible ReLU activation function with a custom threshold. Arguments: x : numpy array or scalar Input value(s) threshold : float, optional Threshold value to be used for ReLU (default is 0) Returns: numpy array or scalar Result after applying the Flexible ReLU function return np.maximum(x - threshold, 0)"},{"question":"Write a function that takes a list of integers as input and returns the list sorted in ascending order using the Radix Sort algorithm.","solution":"def radix_sort(arr): Returns the list sorted in ascending order using Radix Sort algorithm. if not arr: return arr # Find the maximum number to know the number of digits max_num = max(arr) # Initialize exponent to 1 exp = 1 # Perform counting sort for every digit while max_num // exp > 0: counting_sort(arr, exp) exp *= 10 return arr def counting_sort(arr, exp): A counting sort helper function to sort arr based on the digit represented by exp. n = len(arr) output = [0] * n count = [0] * 10 # Store the count of occurrences for i in range(n): index = (arr[i] // exp) % 10 count[index] += 1 # Change count[i] so that it now contains the actual position of this digit in output[] for i in range(1, 10): count[i] += count[i - 1] # Build the output array i = n - 1 while i >= 0: index = (arr[i] // exp) % 10 output[count[index] - 1] = arr[i] count[index] -= 1 i -= 1 # Copy the output array to arr, so that arr now contains sorted numbers according to the current digit for i in range(n): arr[i] = output[i]"},{"question":"Create a Python function that takes two lists as parameters, and returns a new list where each element is the sum of the corresponding elements in the two input lists.","solution":"def sum_lists(list1, list2): Returns a new list where each element is the sum of the corresponding elements in the two input lists. Parameters: list1 (list of int): The first input list. list2 (list of int): The second input list. Returns: list of int: A new list where each element is the sum of the corresponding elements in list1 and list2. return [a + b for a, b in zip(list1, list2)]"},{"question":"Create a function named \\"Kelvin_to_Celsius\\" that takes a single argument, a float representing a temperature in Kelvin, and returns the equivalent temperature in Celsius as a float. If the Kelvin temperature is lower than absolute zero (0 Kelvin), raise a ValueError with the message \\"Temperature cannot be lower than absolute zero\\".","solution":"def Kelvin_to_Celsius(kelvin_temperature): Converts a temperature from Kelvin to Celsius. Arguments: kelvin_temperature : float : Temperature in Kelvin Returns: float : Equivalent temperature in Celsius Raises: ValueError : If the temperature is below absolute zero (0 Kelvin) if kelvin_temperature < 0: raise ValueError(\\"Temperature cannot be lower than absolute zero\\") return kelvin_temperature - 273.15"},{"question":"Given a list of integers of length N, write a Python program to replace the elements which are prime with 0.","solution":"def is_prime(num): Returns True if the number is prime, False otherwise. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def replace_primes_with_zero(lst): Replaces prime numbers in the list with 0. return [0 if is_prime(x) else x for x in lst]"},{"question":"Develop a Python function that takes as input two lists of floating point numbers, each list potentially having different lengths from 2 up to 1000. The function should calculate the element-wise multiplication of the two lists using Numpy. In case of lists having unequal lengths, multiply the matching elements and fill the remainder of the shorter list with the last computed product value to reach the length of the larger list.","solution":"import numpy as np def elementwise_multiply_and_extend(list1, list2): Multiplies elements of two lists of float numbers element-wise. In cases of lists having unequal lengths, multiply the matching elements and fill the remainder of the shorter list with the last computed product value to reach the length of the larger list. Parameters: list1 (list of float): First list of float numbers. list2 (list of float): Second list of float numbers. Returns: list of float: The result of element-wise multiplication, extended with the last computed product if necessary. len1, len2 = len(list1), len(list2) min_len = min(len1, len2) # Element-wise multiply for the minimum length multiplier = np.multiply(list1[:min_len], list2[:min_len]) # Determine the remaining length remaining_length = abs(len1 - len2) # Extending the remaining part with the last computed product if len1 > len2: extension = [multiplier[min_len - 1]] * remaining_length result = list(multiplier) + extension elif len2 > len1: extension = [multiplier[min_len - 1]] * remaining_length result = list(multiplier) + extension else: result = list(multiplier) return result"},{"question":"Pancake sorting is the process of sorting a scrambled stack of pancakes in order of size when a spatula can be inserted at any point in the stack and used to flip all pancakes above it. Write an efficient algorithm to sort a given array using the pancake sorting technique.","solution":"def flip(arr, k): Flip the array from start to index k arr[:k+1] = reversed(arr[:k+1]) def find_max_index(arr, n): Find the index of the maximum element in arr[0..n-1] max_index = 0 for i in range(1, n): if arr[i] > arr[max_index]: max_index = i return max_index def pancake_sort(arr): Perform pancake sort on the provided array current_size = len(arr) # Start from the complete array and reduce size by one each time while current_size > 1: # Find the index of the maximum element in arr[0..current_size-1] max_index = find_max_index(arr, current_size) # Move the maximum element to the end of current array # if it's not already at the end if max_index != current_size - 1: # Flip the maximum element to the front flip(arr, max_index) # Flip it to the end of the array flip(arr, current_size - 1) current_size -= 1 return arr"},{"question":"Given a list of strings, write a program to filter out the strings that contain both alphabets and numbers.","solution":"def filter_alphanumeric_strings(strings): Given a list of strings, filters out the strings that contain both alphabets and numbers. Parameters: strings (list): A list of strings. Returns: list: A list of strings that do not contain both alphabets and numbers. def is_alphanumeric(s): has_alpha = any(c.isalpha() for c in s) has_digit = any(c.isdigit() for c in s) return has_alpha and has_digit return [s for s in strings if not is_alphanumeric(s)]"},{"question":"Write a routine to correctly check if two 2D arrays are completely equal. The arrays can contain integers or floating point values. Also, take into consideration floating point precision issue, thus two floating point numbers should be considered equal if their difference is within a permissible error.","solution":"import numpy as np def arrays_equal(arr1, arr2, epsilon=1e-9): Checks if two 2D arrays are completely equal. Two floating point numbers are considered equal if their difference is within a permissible error epsilon. Args: arr1 (list of lists): First 2D array. arr2 (list of lists): Second 2D array. epsilon (float): Permissible error for floating point comparison. Default is 1e-9. Returns: bool: True if arrays are equal, False otherwise. if np.shape(arr1) != np.shape(arr2): return False arr1 = np.array(arr1, dtype=float) arr2 = np.array(arr2, dtype=float) return np.allclose(arr1, arr2, atol=epsilon)"},{"question":"Create a program that counts the number of unique words in a sentence, excluding any common stopwords. The program should also handle cases where the sentence contains punctuation marks, special characters, and emojis. The program should be efficient and have a time complexity of O(n) and a space complexity of O(m), where n is the length of the sentence and m is the number of unique words in the sentence. Stopwords should be defined as a set of commonly used words that are excluded from the word count, such as \\"the\\", \\"a\\", \\"an\\", \\"and\\", \\"or\\", \\"but\\", etc.","solution":"import re def count_unique_words(sentence, stopwords): Returns the number of unique words in a sentence, excluding common stopwords. Parameters: sentence (str): The sentence to be processed. stopwords (set): A set of stopwords to be excluded. Returns: int: The number of unique words in the sentence excluding stopwords. # Convert the sentence to lowercase to ensure case-insensitivity sentence = sentence.lower() # Remove punctuation, special characters, and emojis sentence = re.sub(r'[^ws]', '', sentence) # Split the sentence into words words = sentence.split() # Create a set for unique words unique_words = set() # Iterate through the words and add them to the unique_words set if they are not stopwords for word in words: if word not in stopwords: unique_words.add(word) return len(unique_words)"},{"question":"Write a recursive function that prints all the letters of the alphabet in reverse order, but the function must not use any built-in functions or libraries that directly access or generate the alphabet. The function should also accept a parameter to start at a specific letter and print the rest of the alphabet in reverse from that point.","solution":"def print_reverse_alphabet(start='z'): Prints the alphabet in reverse order starting from a specified letter. :param start: The letter to start the reverse print from (default is 'z'). if start < 'a' or start > 'z': return print(start, end=' ') if start == 'a': return else: print_reverse_alphabet(chr(ord(start) - 1))"},{"question":"Use if-else conditions in Python to classify numbers into four categories: Positive, Negative, Zero and Non-Integer. Moreover, determine if the number is also even, odd, or neither (in case of non-integer). Implement error handling for non-numeric data input.","solution":"def classify_number(number): Classifies a given number into four categories: Positive, Negative, Zero, and Non-Integer. Additionally, determines if the number (if it's an integer) is also even or odd. Parameters: number (any): The number to classify. Returns: dict: Classification containing 'type' (Positive, Negative, Zero, Non-Integer) and possibly 'parity' (Even, Odd) or error message if not numeric. classification = {} try: if isinstance(number, int): if number > 0: classification['type'] = 'Positive' classification['parity'] = 'Even' if number % 2 == 0 else 'Odd' elif number < 0: classification['type'] = 'Negative' classification['parity'] = 'Even' if number % 2 == 0 else 'Odd' else: classification['type'] = 'Zero' classification['parity'] = 'Even' elif isinstance(number, float): classification['type'] = 'Non-Integer' else: raise ValueError(\\"Non-numeric data input.\\") except (TypeError, ValueError): classification['error'] = 'Non-numeric data input.' return classification"},{"question":"Create a program in Python that is able to search a large text file for specific keywords and return matching sentences. The program should have a user-friendly interface allowing users to specify the file and keywords to search for, and should be able to handle large text files efficiently. Additionally, the program should highlight the matching keywords in the returned sentences to aid in readability. Finally, the program should provide options for exporting the search results to an external file or copying them to the clipboard.","solution":"import re from typing import List import pyperclip def search_keywords_in_file(file_path: str, keywords: List[str]) -> List[str]: Searches a large text file for specific keywords and returns matching sentences with highlighted keywords. Args: - file_path: str: The path to the large text file. - keywords: List[str]: List of keywords to search for. Returns: - List[str]: List of sentences containing the keywords with highlighted text. highlighted_sentences = [] keyword_pattern = re.compile('|'.join(re.escape(keyword) for keyword in keywords), re.IGNORECASE) with open(file_path, 'r') as file: content = file.read() sentences = re.split(r'(?<!w.w.)(?<![A-Z][a-z].)(?<=.|?)s', content) for sentence in sentences: if keyword_pattern.search(sentence): highlighted_sentence = keyword_pattern.sub(lambda x: f'**{x.group(0)}**', sentence) highlighted_sentences.append(highlighted_sentence) return highlighted_sentences def export_to_file(sentences: List[str], output_file: str) -> None: Exports the search results to an external file. Args: - sentences: List[str]: List of sentences to be written to the file. - output_file: str: The path to the output file. with open(output_file, 'w') as file: for sentence in sentences: file.write(sentence + 'n') def copy_to_clipboard(sentences: List[str]) -> None: Copies the search results to the clipboard. Args: - sentences: List[str]: List of sentences to be copied to the clipboard. pyperclip.copy('n'.join(sentences))"},{"question":"Code a function in Python to output the words \\"Retrieved successfully\\" if a web page request is successful.","solution":"import requests def get_webpage_status(url): Returns \\"Retrieved successfully\\" if the request to the given URL is successful. response = requests.get(url) if response.status_code == 200: return \\"Retrieved successfully\\" return \\"Failed to retrieve\\""},{"question":"Write a Python function that returns a truth value evaluating the condition that all the alphabetic elements in a provided collection of words (including those in uppercase and lowercase) are either exclusively accelerated (sequential in the English alphabet) or retrograded (sequence observed when moving backward in the alphabet). An additional part of this function should handle punctuation and numbers and ignore their presence. It essentially evaluates words structured entirely in alphabetical order (ignoring cases and non-alphabetics) or in their complete reverse -- but an enhancement could include consideration for case sensitivity in the account of alphabetical order. Consider examples where the words may not be in English.","solution":"def is_alphabetic_order(words): Evaluates whether all alphabetic characters in a provided collection of words are either in sequential order (accelerated) or in reverse order (retrograded) in the alphabet. def is_sequential(word): return all(ord(word[i]) <= ord(word[i+1]) for i in range(len(word) - 1)) def is_retrograded(word): return all(ord(word[i]) >= ord(word[i+1]) for i in range(len(word) - 1)) filtered_words = ''.join(filter(str.isalpha, words)).lower() # Remove non-alpha and lowercase return is_sequential(filtered_words) or is_retrograded(filtered_words)"},{"question":"Write a Python program to create a list of n Fibonacci numbers (where n is the input) and print the list in reverse order. n=10","solution":"def fibonacci_reverse(n): Returns a list of n Fibonacci numbers in reverse order. if n <= 0: return [] fib_list = [0, 1] for i in range(2, n): fib_list.append(fib_list[-1] + fib_list[-2]) return fib_list[:n][::-1] # Example usage: # n = 10 # print(fibonacci_reverse(n)) # Output: # [34, 21, 13, 8, 5, 3, 2, 1, 1, 0]"},{"question":"Given the list of animals ['alligator', 'elephant', 'giraffe', 'tiger', 'zebra', 'penguin'], write a Python program to categorize them into Mammals, Reptiles, and Birds. Make sure to design your code in a way that it can be easily extended to include other categories or animals in the future.","solution":"def categorize_animals(animals): Categorize the given list of animals into Mammals, Reptiles, and Birds. Parameters: animals (list): A list of animal names (str). Returns: dict: A dictionary with keys 'Mammals', 'Reptiles', 'Birds', and values as lists of corresponding animals. categories = { 'Mammals': ['elephant', 'giraffe', 'tiger', 'zebra'], 'Reptiles': ['alligator'], 'Birds': ['penguin'] } categorized = {'Mammals': [], 'Reptiles': [], 'Birds': []} for animal in animals: for category, animals_list in categories.items(): if animal in animals_list: categorized[category].append(animal) break return categorized"},{"question":"Provide a code which takes an array of integers and returns an array where each element is the product of all the numbers except the number at the same index","solution":"def product_except_self(nums): Returns a list such that each element at index i is the product of all the numbers in the original list except the one at i. length = len(nums) # The answer list to be returned answer = [1] * length # The prefix product left_product = 1 for i in range(length): answer[i] = left_product left_product *= nums[i] # The suffix product right_product = 1 for i in range(length - 1, -1, -1): answer[i] *= right_product right_product *= nums[i] return answer"},{"question":"Modify the given program to sort the array in descending order using only the bubble sort algorithm. Additionally, you are not allowed to use any additional data structures or built-in sorting functions.","solution":"def bubble_sort_descending(arr): Sorts the array in descending order using the bubble sort algorithm. Parameters: arr (list): List of elements to be sorted. Returns: list: List sorted in descending order. n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1 # Swap if the element found is less than the next element if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Propose an algorithmic solution, written in Python programming language, for determining the maximum numerical value within a data structure known as a linked list, justifying each step and complexity involved.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_max_in_linked_list(head): Finds the maximum numerical value in a linked list. :param head: ListNode, the head node of the linked list :return: The maximum numerical value in the linked list if not head: raise ValueError(\\"The linked list is empty\\") # Initialize the max value with the head node value max_value = head.value # Traverse through the linked list to find the maximum value current_node = head while current_node is not None: if current_node.value > max_value: max_value = current_node.value current_node = current_node.next return max_value"},{"question":"What is the code to create a regular expression for validating a hexadecimal color code?","solution":"import re def validate_hex_color_code(color_code): Validates if the given string is a valid hexadecimal color code. A valid hex color code starts with a '#' followed by either 3 or 6 hexadecimal characters (0-9, a-f, A-F). :param color_code: The string to validate :return: True if the string is a valid hex color code, False otherwise pattern = re.compile(r'^#(?:[0-9a-fA-F]{3}){1,2}') return bool(pattern.match(color_code))"},{"question":"I need a way to hash all of the keys in a dictionary, string->string, and return the hashed dictionary. I need the function to every time generate the same output when the hashes are consistent, which means I need to sort the dictionary before hashing. What's a good way to do this?","solution":"import hashlib def hash_dictionary(input_dict): Takes a dictionary with string keys and values, sorts it, hashes the keys and values, and returns a new dictionary with hashed keys and values. hashed_dict = {} for key in sorted(input_dict.keys()): hashed_key = hashlib.md5(key.encode()).hexdigest() hashed_value = hashlib.md5(input_dict[key].encode()).hexdigest() hashed_dict[hashed_key] = hashed_value return hashed_dict"},{"question":"Devise an algorithmic function that validates whether a distinct input data sequence possibly embodies a palindrome structure. Your function should also be able to identify and handle special cases such as alphanumeric sequences, and ignore case and non-letter numerical differences. Remember, a palindrome is a sequence that reads the same backwards as forwards, considering only alphanumeric characters and ignoring cases.","solution":"def is_palindrome(s): Returns True if the input string is a palindrome, ignoring non-alphanumeric characters and case. import re # Remove non-alphanumeric characters and convert to lower case sanitized_str = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Check if the sanitized string is equal to its reverse return sanitized_str == sanitized_str[::-1]"},{"question":"Write a Python program to calculate the list of prime numbers between a given range. Additionally, implement a function that uses the Sieve of Eratosthenes algorithm to find the n-th prime number. Validate your function with given data points and ensure the time complexity is better than O(n^2).","solution":"def primes_in_range(start, end): Returns a list of prime numbers in the range [start, end]. def is_prime(num): if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True return [num for num in range(start, end + 1) if is_prime(num)] def sieve_nth_prime(n): Returns the n-th prime number using the Sieve of Eratosthenes algorithm. def sieve(limit): sieve_list = [True] * (limit + 1) sieve_list[0] = sieve_list[1] = False p = 2 while p * p <= limit: if sieve_list[p]: for i in range(p * p, limit + 1, p): sieve_list[i] = False p += 1 return [p for p, is_prime in enumerate(sieve_list) if is_prime] limit = 15 primes = [] while len(primes) < n: primes = sieve(limit) limit *= 2 return primes[n-1]"},{"question":"Given a matrix \`input\`, write a Python function \`generate_coordinates(input)\` that can generate the coordinates or indices (i, j, 1) of the elements that form the main diagonal of a matrix. The main diagonal of a matrix is the set of elements where the row index is equal to the column index, denoted as (i, i, 1). If the given matrix is not square, return \`None\`. The coordinate (i, j, 1) is composed of the row index i, the column index j, and the depth index, which is always 1 for a 2D matrix. Additionally, return the sum of the elements in the main diagonal as the second value in the output tuple.","solution":"def generate_coordinates(matrix): Generates the coordinates of the main diagonal elements of a matrix and returns the coordinates along with the sum of diagonal elements. Parameters: matrix (list of list of int): The input matrix Returns: tuple: A tuple where the first element is a list of coordinates (i, i, 1) and the second element is the sum of the main diagonal elements. if not matrix or any(len(row) != len(matrix) for row in matrix): return None coordinates = [] diagonal_sum = 0 for i in range(len(matrix)): coordinates.append((i, i, 1)) diagonal_sum += matrix[i][i] return coordinates, diagonal_sum"},{"question":"In Python, write a function to print out a sequence of numbers from 1 to 100. If the number is divisible by 3, print \\"Fizz\\" instead. If the number is divisible by 5, print \\"Buzz\\" instead. If the number is divisible by both 3 and 5, print \\"FizzBuzz\\" instead.","solution":"def fizz_buzz(): Prints numbers from 1 to 100 but replaces multiples of 3 with \\"Fizz\\", multiples of 5 with \\"Buzz\\", and multiples of both 3 and 5 with \\"FizzBuzz\\". for i in range(1, 101): if i % 3 == 0 and i % 5 == 0: print(\\"FizzBuzz\\") elif i % 3 == 0: print(\\"Fizz\\") elif i % 5 == 0: print(\\"Buzz\\") else: print(i)"},{"question":"Write a function that takes in a list and returns the elements in reverse order, but without using any built-in functions or methods for reversing the list. You may only use basic data structures and control flow statements. Additionally, the function should have a time complexity of O(n), where n is the length of the input list.","solution":"def reverse_list(lst): Returns the elements of lst in reverse order without using built-in functions. Args: lst (list): The list to reverse. Returns: list: A new list containing the elements of lst in reverse order. reversed_lst = [] for i in range(len(lst)-1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst"},{"question":"Given a 2-D array with unequal lengths of columns and a specific target value, write a function to find the target value. If the target value appears multiple times, return the coordinates of all its occurrences. Otherwise, return a message that the item was not found. In addition, to increase the difficulty, perform this search using a recursive function instead of a loop.","solution":"def find_target(matrix, target): Finds the target value in a 2-D array and returns the coordinates of all occurrences recursively. Parameters: matrix (list of lists): The 2-D array to search within. target: The value to find. Returns: list of tuples: A list of coordinates where the target is found, or str: A message that the item was not found. def search_recursive(matrix, target, row, col, results): # Base case: if we've gone beyond the boundaries of the matrix if row >= len(matrix): return if col >= len(matrix[row]): search_recursive(matrix, target, row + 1, 0, results) return # Check if the current element is the target if matrix[row][col] == target: results.append((row, col)) # Recursive step search_recursive(matrix, target, row, col + 1, results) results = [] search_recursive(matrix, target, 0, 0, results) return results if results else \\"Item not found\\""},{"question":"Write a python code to retrieve the top 10 trending YouTube videos in all categories. Additionally, your code should also be able to filter and display videos based on a specific category if the user provides one. Make sure your code considers and handles any potential exceptions.","solution":"import requests def get_top_trending_videos(youtube_api_key, category=None): Retrieves the top 10 trending YouTube videos in all categories or within a specific category if provided. Parameters: youtube_api_key (str): Your YouTube Data API v3 key category (str): The category to filter videos. None for all categories. Returns: list: List of dictionaries containing video details try: url = 'https://www.googleapis.com/youtube/v3/videos' params = { 'part': 'snippet,statistics', 'chart': 'mostPopular', 'regionCode': 'US', # Adjust as necessary for different regions 'maxResults': 10, 'key': youtube_api_key } if category: # Retrieving category ID for the specified category categories_url = 'https://www.googleapis.com/youtube/v3/videoCategories' categories_params = { 'part': 'snippet', 'regionCode': 'US', # Adjust as necessary for different regions 'key': youtube_api_key } categories_response = requests.get(categories_url, params=categories_params) categories_response.raise_for_status() categories_data = categories_response.json() category_id = None for cat in categories_data['items']: if cat['snippet']['title'].lower() == category.lower(): category_id = cat['id'] break if not category_id: raise ValueError(f\\"No category found for '{category}'\\") params['videoCategoryId'] = category_id response = requests.get(url, params=params) response.raise_for_status() data = response.json() videos = data.get('items', []) return videos except requests.exceptions.RequestException as e: print(f\\"HTTP request failed: {e}\\") except ValueError as ve: print(ve) except Exception as e: print(f\\"An unexpected error occurred: {e}\\") return []"},{"question":"Write a Python function that takes a filename and returns the number of lines in that file. Assume that the file is not empty, and each line is separated by the newline character. Additionally, provide a simple test case to validate the solution.","solution":"def count_lines_in_file(filename): Returns the number of lines in the given file. Args: filename: str - The name of the file to count lines in. Returns: int - The number of lines in the file. with open(filename, 'r') as file: return sum(1 for line in file)"},{"question":"Create a python script to generate a list of Fibonacci sequence up to n numbers where n is a positive integer provided by the user. Additionally, modify your code so that it returns the sequence in reverse as well. Make sure to handle edge cases, like when n is 0 or 1.","solution":"def fibonacci_sequence(n): Returns a list of the first n Fibonacci numbers. if n <= 0: return [] # Initializing the first two Fibonacci numbers fib_sequence = [0, 1] for i in range(2, n): next_number = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_number) return fib_sequence[:n] def reverse_fibonacci_sequence(n): Returns the first n Fibonacci numbers in reverse order. return fibonacci_sequence(n)[::-1]"},{"question":"Write a function in Python that takes in a list and returns the second largest element as well as its indices in the list. Consider lists with repeated elements and ensure your solution works efficiently even for large lists.","solution":"def second_largest_with_indices(lst): Returns a tuple of the second largest element and a list of its indices in the list. if len(lst) < 2: return None, [] unique_elements = list(set(lst)) unique_elements.sort() if len(unique_elements) < 2: return None, [] second_largest = unique_elements[-2] indices = [i for i, x in enumerate(lst) if x == second_largest] return second_largest, indices"},{"question":"Hash table is a data structure used to store key-value pair in an efficient way. Implement a hash table with separate chaining method for collision resolution in Python. Further, optimize it to handle collisions efficiently through the use of a doubly linked list instead of a simple linked list.","solution":"class Node: A node in a doubly linked list. def __init__(self, key, value): self.key = key self.value = value self.prev = None self.next = None class DoublyLinkedList: A doubly linked list for separate chaining in hash table. def __init__(self): self.head = None def find(self, key): Find the node with the given key. current = self.head while current: if current.key == key: return current current = current.next return None def insert(self, key, value): Insert a new node with the given key and value, or update the existing node. node = self.find(key) if node: node.value = value else: new_node = Node(key, value) new_node.next = self.head if self.head: self.head.prev = new_node self.head = new_node def delete(self, key): Delete the node with the given key. node = self.find(key) if node: if node.prev: node.prev.next = node.next if node.next: node.next.prev = node.prev if node == self.head: self.head = node.next node.prev = node.next = None class HashTable: Hash table with separate chaining using doubly linked list for collision resolution. def __init__(self, size=10): self.size = size self.table = [DoublyLinkedList() for _ in range(size)] def _hash(self, key): Generate a hash for the given key. return hash(key) % self.size def insert(self, key, value): Insert a key-value pair into the hash table. index = self._hash(key) self.table[index].insert(key, value) def get(self, key): Retrieve the value for the given key. index = self._hash(key) node = self.table[index].find(key) return node.value if node else None def delete(self, key): Delete a key-value pair from the hash table. index = self._hash(key) self.table[index].delete(key)"},{"question":"Create a python function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. A palindrome is a word, phrase, or sequence that reads the same backward as forward.","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, False otherwise. s = s.lower().replace(\\" \\", \\"\\") return s == s[::-1]"},{"question":"Develop a program that receives a set of strings. For each string in the set, the program should find the length of the longest substring without repeating characters. However, this time we require a more detailed documentation of your program's thought process. A deeper understanding of complexity analysis (both time and space) is also expected.","solution":"def longest_unique_substring_length(s): Returns the length of the longest substring without repeating characters. This function uses a sliding window approach with two pointers to keep track of the current window of characters without repeats. We also use a dictionary to remember the last seen position of each character to efficiently update our window. Time complexity: O(n), where n is the length of the string. Each character is visited at most twice. Space complexity: O(min(n, m)), where n is the length of the string and m is the size of the character set/alphabet, due to the storage used by the dictionary. Parameters: s (str): The input string. Returns: int: The length of the longest substring without repeating characters. n = len(s) char_index_map = {} max_len = 0 start = 0 for end in range(n): # If the character is already in the map if s[end] in char_index_map: # Move the start pointer to the right of the same character last seen start = max(start, char_index_map[s[end]] + 1) # Update the character's last seen index char_index_map[s[end]] = end # Update the maximum length of substring found so far max_len = max(max_len, end - start + 1) return max_len"},{"question":"Based on the functionality provided in the MATLAB reference code, your task is to implement a function that constructs a graph hierarchy with specified edge weights from a踊跃list of coordinates. The graph will be represented as a list where each element contains the coordinates of a vertex in the graph.","solution":"def construct_graph(coordinates, edge_weights): Constructs a graph from a list of coordinates and specified edge weights. Parameters: - coordinates: List of tuples representing the coordinates of vertices. - edge_weights: Dictionary where keys are tuples of vertex index pairs and values are the weights. Returns: - graph: List of dictionaries, where each dict has keys \`vertex\` and \`edges\`. \`vertex\` contains the coordinates, and \`edges\` contains a list of tuples representing connected vertices with their weights. graph = [{'vertex': coord, 'edges': []} for coord in coordinates] for (start_index, end_index), weight in edge_weights.items(): graph[start_index]['edges'].append((end_index, weight)) graph[end_index]['edges'].append((start_index, weight)) # Assuming undirected graph return graph"},{"question":"Lets play a dice game. Write a code, in Python, for two AI players (each has 100 starting points) that rolls a 6-faced dice in turns. Each time, player could chose to roll dice from 1 to 3 times, sum up scores and add to his points. However, if roll a 1, all scores gets canceled and will reset to 0. First player to reachs 200 point wins the game. Besides the game itself, setup a further condition that if both players roll the same number for 3 consecutive times, the game will restart. Last but not least, also return the following : 1) total rounds played before reaches 200 points 2) the number of times AI1 chose to roll, for 1, 2 or 3 times (as statistics) 3) same for AI2","solution":"import random def roll_dice(): return random.randint(1, 6) def ai_decision(): # For simplicity, we let both AIs always choose to roll 3 times return 3 def dice_game(): ai1_points, ai2_points = 100, 100 rounds_played = 0 ai1_roll_stats = {1: 0, 2: 0, 3: 0} ai2_roll_stats = {1: 0, 2: 0, 3: 0} last_three_rolls_ai1 = [] last_three_rolls_ai2 = [] while ai1_points < 200 and ai2_points < 200: rounds_played += 1 ai1_roll_count = ai_decision() ai2_roll_count = ai_decision() ai1_roll_stats[ai1_roll_count] += 1 ai2_roll_stats[ai2_roll_count] += 1 ai1_score, ai2_score = 0, 0 def roll_times(times): score = 0 for _ in range(times): roll = roll_dice() if roll == 1: return 0 score += roll return score ai1_score = roll_times(ai1_roll_count) ai2_score = roll_times(ai2_roll_count) ai1_points += ai1_score ai2_points += ai2_score last_three_rolls_ai1.append(ai1_score) last_three_rolls_ai2.append(ai2_score) if len(last_three_rolls_ai1) > 3: last_three_rolls_ai1.pop(0) if len(last_three_rolls_ai2) > 3: last_three_rolls_ai2.pop(0) if len(last_three_rolls_ai1) == 3 and len(last_three_rolls_ai2) == 3: if last_three_rolls_ai1 == last_three_rolls_ai2: ai1_points, ai2_points = 100, 100 rounds_played = 0 ai1_roll_stats = {1: 0, 2: 0, 3: 0} ai2_roll_stats = {1: 0, 2: 0, 3: 0} last_three_rolls_ai1 = [] last_three_rolls_ai2 = [] return ai1_points, ai2_points, rounds_played, ai1_roll_stats, ai2_roll_stats"},{"question":"Write a Python function that takes two strings and determines if they are an anagram of each other, but the function should not use any built-in string manipulation functions such as sort() or reverse(). The function should have a time complexity of O(n), where n is the length of the strings. Additionally, the function should also check if the strings contain any duplicate characters and return the count of each duplicate character in a dictionary.","solution":"def are_anagrams_and_count_duplicates(str1, str2): Determines if str1 and str2 are anagrams and returns a dictionary with counts of duplicate characters. :param str1: first string :param str2: second string :return: tuple (are_anagrams, duplicate_counts) - are_anagrams: True if str1 and str2 are anagrams, False otherwise - duplicate_counts: dictionary where keys are characters with duplicates in str1 or str2, and values are their counts if len(str1) != len(str2): return (False, {}) # Initialize dictionaries to count the occurrences of each character char_count1 = {} char_count2 = {} for char in str1: if char in char_count1: char_count1[char] += 1 else: char_count1[char] = 1 for char in str2: if char in char_count2: char_count2[char] += 1 else: char_count2[char] = 1 # Check for anagram are_anagrams = char_count1 == char_count2 # Find duplicates duplicate_counts = {} for char in char_count1: if char_count1[char] > 1: duplicate_counts[char] = char_count1[char] for char in char_count2: if char in duplicate_counts: duplicate_counts[char] += char_count2[char] - char_count1[char] elif char_count2[char] > 1: duplicate_counts[char] = char_count2[char] return (are_anagrams, duplicate_counts)"},{"question":"Can you explain and illustrate the usage of *args and **kwargs in Python? Under what circumstances would one be required to use them?","solution":"def example_args(*args): Returns a tuple containing all positional arguments passed to the function. return args def example_kwargs(**kwargs): Returns a dictionary containing all keyword arguments passed to the function. return kwargs def example_combined(*args, **kwargs): Returns a tuple of positional arguments and a dictionary of keyword arguments. return args, kwargs def greet(greeting, *names, **details): Greets multiple people with a given greeting. Also accepts additional details. result = [] for name in names: result.append(f\\"{greeting}, {name}\\") for key, value in details.items(): result.append(f\\"{key}: {value}\\") return result"},{"question":"Explain the functionality of the os and sys modules in Python and provide an example of using both modules to perform a task. Your solution should include at least two different functions from each module and must involve interacting with the file system and handling command line arguments.","solution":"import os import sys def list_directory_contents(directory): Lists the contents of the specified directory. try: return os.listdir(directory) except FileNotFoundError: return f\\"Error: The directory '{directory}' does not exist.\\" def create_directory(directory): Creates a new directory at the specified location. if not os.path.exists(directory): os.makedirs(directory) return f\\"Directory '{directory}' created.\\" else: return f\\"Error: The directory '{directory}' already exists.\\" def get_script_name(): Returns the name of the script being executed. return os.path.basename(sys.argv[0]) def get_command_line_args(): Returns the command line arguments passed to the script. return sys.argv[1:] # Example usage: if __name__ == \\"__main__\\": # Print the script name print(\\"Script name:\\", get_script_name()) # Print the command line arguments print(\\"Command line arguments:\\", get_command_line_args()) # Interact with the file system directory = \\"test_dir\\" print(create_directory(directory)) print(\\"Contents of the directory:\\", list_directory_contents(directory))"},{"question":"Here's a SARSA implementation, it seems to work fine, although it's randomly assigning an action at the next state even after I've given it the next action. I know it will nearly always converge with our without this, but it looks like self.sigma is a hyperparam. In particular, self.Q[s][a] = (1 - self.alpha) * self.Q[s][a] + self.alpha * (r + self.gamma * a_prime) should involve the Q value at s_prime, a_prime, but it doen't use that for the assignment. closing code -- in the inner loop, everything after the a_prime = self.getpolicyAndAction --> s_prime call.","solution":"import numpy as np import random class SARSA: def __init__(self, n_states, n_actions, alpha, gamma, epsilon): self.n_states = n_states self.n_actions = n_actions self.alpha = alpha self.gamma = gamma self.epsilon = epsilon self.Q = np.zeros((n_states, n_actions)) def get_policy_and_action(self, state): if random.uniform(0, 1) < self.epsilon: action = random.choice(range(self.n_actions)) else: action = np.argmax(self.Q[state, :]) return action def update(self, s, a, r, s_prime, a_prime): self.Q[s][a] = self.Q[s][a] + self.alpha * (r + self.gamma * self.Q[s_prime][a_prime] - self.Q[s][a]) def learn(self, env, n_episodes): for episode in range(n_episodes): s = env.reset() a = self.get_policy_and_action(s) done = False while not done: s_prime, r, done, _ = env.step(a) a_prime = self.get_policy_and_action(s_prime) self.update(s, a, r, s_prime, a_prime) s, a = s_prime, a_prime"},{"question":"Create a program that finds the maximum sum subsequence of a given array that may contain both positive and negative integers, with the added constraints of avoiding any subsequence with a length greater than 'k' elements and with a requirement that the subsequence must start and end with a positive integer.","solution":"def max_sum_subsequence(arr, k): Returns the maximum sum subsequence of the given array that: - Has a length less than or equal to 'k' - Starts and ends with a positive integer n = len(arr) max_sum = float('-inf') for i in range(n): for j in range(i, min(n, i + k)): if arr[i] > 0 and arr[j] > 0: subseq = arr[i:j+1] if len(subseq) <= k: curr_sum = sum(subseq) if curr_sum > max_sum: max_sum = curr_sum return max_sum if max_sum != float('-inf') else 0"},{"question":"Create a python list comprising the first three prime numbers. Additionally, provide a piece of erroneous code that is supposed to generate the first three prime numbers. Discuss why the erroneous code is incorrect and provide the correct solution.","solution":"def first_three_primes(): Returns a list containing the first three prime numbers. return [2, 3, 5] def erroneous_prime_generator(): An erroneous implementation supposed to generate the first three prime numbers. This is intentional and discussed in the comments. primes = [] for num in range(2, 10): if len(primes) >= 3: break flag = False for i in range(2, num): if num % i == 0: flag = True break if not flag: primes.append(num) return primes # The erroneous_prime_generator function is incorrect because: # 1. It uses a range(2, 10) which is arbitrary and might not always yield the first three primes. # 2. The inner loop to check for primality is not efficient but works within this small range. # 3. It might also produce more than three prime numbers if the range were longer or not truncated correctly."},{"question":"Write Python code to compute matrix multiplications using only loops and basic arithmetic operations, without using any pre-built functions or libraries for matrix multiplication.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. Args: A (list of list of int): The first matrix. B (list of list of int): The second matrix. Returns: list of list of int: The result of matrix multiplication A * B. # Get the number of rows and columns of both matrices rows_A = len(A) cols_A = len(A[0]) rows_B = len(B) cols_B = len(B[0]) if cols_A != rows_B: raise ValueError(\\"Number of columns in A must be equal to number of rows in B.\\") # Initialize the result matrix with zeros C = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform matrix multiplication using nested loops for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): C[i][j] += A[i][k] * B[k][j] return C"},{"question":"Develop a function to calculate the product of the elements within a list of integers. In addition, provide an erroneous piece of code utilizing the map() function that attempts to achieve this task and correct it. Discuss why the initial code using map() was incorrect.","solution":"from functools import reduce from operator import mul def product_of_elements(lst): Returns the product of the elements within a list of integers. if len(lst) == 0: return 1 # Assuming the product of an empty list is 1 (neutral element for multiplication) return reduce(mul, lst) # Erroneous code using map: # def erroneous_product_of_elements(lst): # return map(lambda x, y: x * y, lst) # The above code is incorrect because \`map\` is designed to apply a function to each individual element of a list. # It is not suitable for cumulative operations that require a reduction approach, like computing a product across all elements. # The correct approach for cumulative operations is to use \`reduce\`, not \`map\`."},{"question":"Write a Python function that takes two integers as parameters and returns their product. However, the function should only use bitwise operators for the multiplication. The function should handle both positive and negative integers. Additionally, the function should have a time complexity of O(log n), where n is the larger of the two input integers.","solution":"def bitwise_multiply(a, b): Multiplies two integers using bitwise operators. Handles both positive and negative integers. # Handle the sign of the result negative_result = (a < 0) ^ (b < 0) # Work with absolute values for simplicity a, b = abs(a), abs(b) result = 0 while b > 0: # If b is odd, add current a to result if b & 1: result += a # Double the value of a and halve the value of b a <<= 1 b >>= 1 # Apply the sign to the result return -result if negative_result else result"},{"question":"Formulate a Python-coded proposition that operates in a manner to sift through a given array, driven by a goal to isolate and eliminate elements whose length manifests as less than four characters.","solution":"def sift_and_remove_short_elements(array): Remove elements from the array that have fewer than four characters. Args: array (list): The input list containing strings. Returns: list: A list with elements having four or more characters. return [item for item in array if len(item) >= 4]"},{"question":"I want to make a function to extract all '*' lines from a conf file (acting as a subscript that's supposed to apply to all lines afterward until next '*'). Firstly, I'd like the pattern in Linux terminal grep, and then the Python code.","solution":"def extract_star_lines(file_content): Extracts all '*' lines and subsequent lines until next '*' from file content. Args: file_content (str): Content of the file as a single string. Returns: List[str]: Lines starting with '*' and all lines following it until the next '*'. lines = file_content.split('n') result = [] temp_result = [] extracting = False for line in lines: if line.startswith('*'): if temp_result: result.extend(temp_result) temp_result = [] temp_result.append(line) extracting = True elif extracting: temp_result.append(line) if temp_result: result.extend(temp_result) return result"},{"question":"How can I write a function in Python that can find the sum of all numbers between 1 and a given number N that are divisible by 3 or 5?","solution":"def sum_of_multiples(N): Returns the sum of all numbers between 1 and N that are divisible by 3 or 5. return sum(i for i in range(1, N + 1) if i % 3 == 0 or i % 5 == 0)"},{"question":"In the Python programming language, can you devise a method that, when supplied with a string input, efficiently eradicates all variation of whitespace characters from the text? Consider, for example, the string \\"Hello W{orld}\\".","solution":"def remove_whitespace(input_string): Removes all types of whitespace characters from the input string. Args: input_string (str): The string from which to remove whitespace. Returns: str: The input string with all whitespace characters removed. return ''.join(input_string.split())"},{"question":"Let's ignore the built-in open() function, please implement your own file reader function that can take a filename and a mode ('r' or 'w') as parameters and return the corresponding file object. Besides, make sure your function is capable to handle exceptions like file not found or permission denied.","solution":"def custom_open(filename, mode): Opens a file with the given filename and mode. Handles exceptions like file not found or permission denied. try: file = open(filename, mode) return file except FileNotFoundError: print(f\\"Error: The file {filename} does not exist.\\") return None except PermissionError: print(f\\"Error: Permission denied for the file {filename}.\\") return None"},{"question":"Develop a recursive function to generate and return the Fibonacci sequence up to the n-th number. The function should also be able to handle large inputs efficiently. Additionally, implement a memoization technique to optimize the function.","solution":"def fibonacci(n, memo={}): Returns the fibonacci sequence up to the n-th number as a list. Uses memoization to optimize the recursive function. Args: n (int): The number of elements in the fibonacci sequence to generate. Returns: list: A list containing the fibonacci sequence up to the n-th number. if n in memo: return memo[n] if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: sequence = fibonacci(n-1, memo) # Append the next fibonacci number to the sequence sequence.append(sequence[-1] + sequence[-2]) memo[n] = sequence return sequence"},{"question":"Design an algorithm to traverse a binary tree in level-order and print the nodes at each level in reverse order.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def reverse_level_order_traversal(root): Traverses a binary tree in level-order and returns the nodes at each level in reverse order. if not root: return [] queue = deque([root]) result = deque() # Use deque to efficiently append to the left while queue: level_size = len(queue) level_nodes = [] for _ in range(level_size): node = queue.popleft() level_nodes.append(node.value) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.appendleft(level_nodes) return list(result)"},{"question":"Develop a Python function that identifies the leftmost index of a specific element in a sorted array. This function should handle binary search operations to ensure efficient execution, even for large datasets. Here is a piece of code that attempts to achieve this but contains some errors. Your task is to identify and correct these errors, refining the code to accurately fulfill the requirement. Additionally, implement error handling to manage scenarios where the element is not present in the array.","solution":"def find_leftmost_index(arr, target): Returns the leftmost index of the target element in the sorted array. If the target is not found, returns -1. left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: result = mid right = mid - 1 # Narrow down to the left half elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return result"},{"question":"Automate the process of scraping culinary recipes from a designated public website using Python. The program must sort the results according to dietary preferences like low-carb, vegan, and others put up as inputs. Further, strategies must be in place to avoid coming into conflict with the website's user agreement.","solution":"import requests from bs4 import BeautifulSoup def scrape_recipes(url, dietary_preference): Scrapes recipes from the provided URL and filters them according to the dietary preference. Args: - url (str): the URL to the recipes page. - dietary_preference (str): the dietary preference to filter recipes by (e.g., \\"low-carb\\", \\"vegan\\"). Returns: - list: A list of dictionaries containing recipe information filtered by dietary preference. try: # Fetch the website content response = requests.get(url) response.raise_for_status() soup = BeautifulSoup(response.content, 'html.parser') # Parse all recipes recipes = soup.find_all('div', class_='recipe') filtered_recipes = [] for recipe in recipes: recipe_info = { \\"name\\": recipe.find('h2').text.strip(), \\"dietary_preference\\": recipe.find('span', class_='dietary-label').text.strip(), \\"url\\": recipe.find('a')['href'] } # Filter recipes by dietary preference if dietary_preference.lower() in recipe_info['dietary_preference'].lower(): filtered_recipes.append(recipe_info) return filtered_recipes except Exception as e: print(f\\"An error occurred: {e}\\") return [] # Example usage: # vegan_recipes = scrape_recipes(\\"https://www.example-recipes.com\\", \\"vegan\\") # print(vegan_recipes)"},{"question":"Given the input \\"truecaller.csv\\" containing phone numbers and names, write a snippet of python code that reads the data and creates a TrueCaller like dictionary mapping phone numbers to names.","solution":"import csv def truecaller_dict(file_path): Reads a CSV file containing phone numbers and names, and returns a dictionary mapping phone numbers to names. :param file_path: Path to the CSV file :return: Dictionary with phone numbers as keys and names as values truecaller = {} with open(file_path, 'r') as file: reader = csv.reader(file) for row in reader: if len(row) >= 2: # Ensuring there are at least two columns in each row phone_number = row[0] name = row[1] truecaller[phone_number] = name return truecaller"},{"question":"python associates the class of function arguments based on the keyword that is input for that argument when calling the function?","solution":"def check_argument_type(**kwargs): This function takes any number of keyword arguments and returns the types of the values. result = {} for key, value in kwargs.items(): result[key] = type(value).__name__ return result"},{"question":"Given a 2D array in Python, write a program to count the number of arrays within the 2D array that have all elements sorted in non-decreasing order. Consider implementing this solution in a way that computes the answer for each row in the 2D array independently.","solution":"def count_sorted_rows(matrix): Count the number of rows in the 2D array where all elements are sorted in non-decreasing order. :param matrix: List of lists representing the 2D array :return: Integer count of rows with all elements sorted in non-decreasing order def is_non_decreasing(array): Check if the elements in the input array are sorted in non-decreasing order. :param array: List of elements :return: Boolean indicating if the array is non-decreasing return all(array[i] <= array[i + 1] for i in range(len(array) - 1)) return sum(is_non_decreasing(row) for row in matrix)"},{"question":"Develop a Python procedure to ascertain if a distinct character exists within a provided array of characters, issuing a return value of 1 if the condition is met, or 0 if not.","solution":"def has_distinct_character(arr): Returns 1 if all characters in the array are unique, otherwise returns 0. if len(arr) != len(set(arr)): return 0 return 1"},{"question":"Create a method \`neutrophil_count\` in \`LungDisease\` to return the number of neutrophils in the lung tissue.","solution":"class LungDisease: def __init__(self, neutrophils): Initialize LungDisease with a given number of neutrophils. :param neutrophils: The number of neutrophils in the lung tissue. :type neutrophils: int self.neutrophils = neutrophils def neutrophil_count(self): Returns the number of neutrophils in the lung tissue. :return: The number of neutrophils. :rtype: int return self.neutrophils"},{"question":"Develop a function that will arrange a sequential set of integers into triplets. Furthermore, implement a boolean parameter \\"ascending\\". If ascending is True, arrange the triplets in ascending order. If it's False, arrange the triplets in descending order. When the size of the set is not a multiple of 3, the remaining numbers should be returned as a separate list. Also, add a condition where the sequence can not have repetitive numbers.","solution":"def arrange_triplets(nums, ascending=True): Arrange a sequential set of integers into triplets. If ascending is True, arrange in ascending order, otherwise in descending order. Returns a tuple of (triplets, remainder). If there are any repetitive numbers, raises a ValueError. Args: nums (list of int): List of integers. ascending (bool): Whether to sort in ascending order or not. Returns: tuple: (triplets, remainder) # Check for repetitive numbers if len(nums) != len(set(nums)): raise ValueError(\\"The sequence contains repetitive numbers\\") # Sort the numbers based on the \`ascending\` flag nums.sort(reverse=not ascending) # Group numbers into triplets triplets = [nums[i:i + 3] for i in range(0, len(nums) - len(nums) % 3, 3)] # Find the remainder remainder = nums[len(nums) - len(nums) % 3:] return (triplets, remainder)"},{"question":"Write a function in Python that takes 2 parameters: a list of integers and an integer 'n'. The function should return the 'n' smallest numbers from the list, ensuring there are no repeated elements in the output. The elements in the output list should be in ascending order.","solution":"def n_smallest_numbers(lst, n): Returns the n smallest unique numbers from the list in ascending order. # Remove duplicates by converting to a set unique_numbers = list(set(lst)) # Sort the unique numbers sorted_numbers = sorted(unique_numbers) # Return the first n elements return sorted_numbers[:n]"},{"question":"Write a comprehensive Python function that takes a filename as an argument, reads the text file content, and returns the number of non-blank lines. Ensure that your function handles different line endings (CR/LF, CR, LF) and considers lines that contain only whitespace as blank lines. Additionally, the function should raise a standard Python exception if it encounters an issue while reading the file.","solution":"def count_non_blank_lines(filename): Returns the number of non-blank lines in the given file. Args: filename (str): The path to the text file. Returns: int: The number of non-blank lines. Raises: IOError: If the file cannot be read. try: with open(filename, 'r', encoding='utf-8') as file: non_blank_lines = 0 for line in file: if line.strip(): non_blank_lines += 1 return non_blank_lines except IOError as e: raise e"},{"question":"What is the difference between a Python tuple and a list? Also, write a short Python function that takes in a list and a tuple with the same number of elements and converts them into each other.","solution":"def convert_list_tuple(input_list, input_tuple): Takes a list and a tuple of the same length and converts the list to a tuple and the tuple to a list, returning both. if len(input_list) != len(input_tuple): raise ValueError(\\"Input list and tuple must have the same number of elements\\") converted_to_tuple = tuple(input_list) converted_to_list = list(input_tuple) return converted_to_tuple, converted_to_list"},{"question":"Given an encoded string, write a Python function to implement the encoding and decoding process based on Huffman Coding. Your implementation should include the processes of Huffman Tree creation, assigning of Huffman codes, and using these codes for decoding.","solution":"import heapq from collections import defaultdict, Counter class TreeNode: def __init__(self, char, freq): self.char = char self.freq = freq self.left = None self.right = None def __lt__(self, other): return self.freq < other.freq def build_huffman_tree(text): frequency = Counter(text) heap = [TreeNode(char, freq) for char, freq in frequency.items()] heapq.heapify(heap) if len(heap) == 1: # Edge case when there's only one unique character. node = heap[0] root = TreeNode(None, node.freq) root.left = node root.right = TreeNode(None, 0) heap = [root] while len(heap) > 1: node1 = heapq.heappop(heap) node2 = heapq.heappop(heap) merged = TreeNode(None, node1.freq + node2.freq) merged.left = node1 merged.right = node2 heapq.heappush(heap, merged) return heap[0] def assign_codes(tree): def _assign_codes(node, code_str): if node is None: return if node.char is not None: huffman_code[node.char] = code_str _assign_codes(node.left, code_str + \\"0\\") _assign_codes(node.right, code_str + \\"1\\") huffman_code = {} _assign_codes(tree, \\"\\") return huffman_code def huffman_encoding(text): if not text: return \\"\\", {} huffman_tree = build_huffman_tree(text) huffman_code = assign_codes(huffman_tree) encoded_text = \\"\\".join(huffman_code[char] for char in text) return encoded_text, huffman_code def huffman_decoding(encoded_text, huffman_code): if not encoded_text: return \\"\\" reverse_code = {v: k for k, v in huffman_code.items()} current_code = \\"\\" decoded_text = [] for bit in encoded_text: current_code += bit if current_code in reverse_code: decoded_text.append(reverse_code[current_code]) current_code = \\"\\" return \\"\\".join(decoded_text)"},{"question":"Build a Python code snippet that isolates the day, month, and year from a date input formatted as 'DD/MM/YYYY'. As an example, take into account the date '11/02/2023'.","solution":"def extract_date_components(date_str): Extracts and returns the day, month, and year from a date string formatted as 'DD/MM/YYYY'. Args: date_str (str): The input date string in 'DD/MM/YYYY' format. Returns: tuple: A tuple containing three integers: day, month, and year. day, month, year = date_str.split('/') return int(day), int(month), int(year)"},{"question":"Encode a given string in Base64 and then decode it back to its original form. The input string may contain any printable ASCII characters. Ensure that your solution has a time complexity of O(n) and a space complexity of O(1).","solution":"import base64 def encode_base64(input_string): Encodes a given string in Base64. Args: input_string (str): The string to encode. Returns: str: The Base64 encoded string. bytes_input = input_string.encode('ascii') base64_bytes = base64.b64encode(bytes_input) base64_string = base64_bytes.decode('ascii') return base64_string def decode_base64(encoded_string): Decodes a given Base64 encoded string back to its original string form. Args: encoded_string (str): The Base64 encoded string to decode. Returns: str: The decoded original string. base64_bytes = encoded_string.encode('ascii') bytes_decoded = base64.b64decode(base64_bytes) decoded_string = bytes_decoded.decode('ascii') return decoded_string"},{"question":"In Python, I am trying to understand how the \`*args\` and \`**kwargs\` arguments work in method declarations. I have two simple method tests where I only pass in a few values to the method and nothing I don't understand. However, I notice a difference between the two that I do not quite get. In the first test, \`*args\` behaves as expected - appending the positional arguments I provide as a tuple to \`test1()\` within the method declaration. But in the second test, \`**kwargs\` is empty even though I have passed in a few keyword arguments to \`test2()\`. Could you explain why this happens?","solution":"def test1(*args): Receives any number of positional arguments and prints them as a tuple. print(args) return args def test2(**kwargs): Receives any number of keyword arguments and prints them as a dictionary. print(kwargs) return kwargs"},{"question":"Write a Python function that calculates the sum of all the digits of an input positive integer using recursion. The function should handle inputs that are not positive integers by raising a ValueError.","solution":"def sum_of_digits(n): Returns the sum of all the digits of a positive integer n using recursion. Raises a ValueError if the input is not a positive integer. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer.\\") if n < 10: return n else: return n % 10 + sum_of_digits(n // 10)"},{"question":"Develop a sample code that computes the sum of unique digits from the set of provided integers. Additionally, your implementation should create a hashmap to track occurrences of the unique numbers in the array.","solution":"def sum_of_unique_digits(numbers): Computes the sum of unique digits from the set of provided integers. Also creates a hashmap to track occurrences of the unique numbers in the array. Parameters: numbers (list of int): List of integers to be evaluated. Returns: int: Sum of unique digits. dict: Hashmap of occurrences of unique numbers. digit_occurrences = {} unique_digits = set() for number in numbers: for digit in str(abs(number)): digit_occurrences[digit] = digit_occurrences.get(digit, 0) + 1 unique_digits.add(int(digit)) unique_sum = sum(unique_digits) return unique_sum, digit_occurrences"},{"question":"Write a Python function that takes in a list of integers as input and returns a new list that contains only the elements that are divisible by 3. However, before inserting an element into the new list, the function should convert it to uppercase. The function should have a time complexity of O(n) and should use list comprehension for filtering and transforming the input list.","solution":"def get_divisible_by_3(int_list): Returns a new list containing only the elements from the input list that are divisible by 3. Args: int_list (list): List of integers Returns: list: List of integers divisible by 3 return [num for num in int_list if num % 3 == 0]"},{"question":"Build a web app using Python and Flask that displays the text \\"Hello World!\\" when the user navigates to the homepage.","solution":"from flask import Flask app = Flask(__name__) @app.route('/') def home(): return \\"Hello World!\\" if __name__ == '__main__': app.run(debug=True)"},{"question":"Write a Python program to create a Roman numeral calculator that performs addition, subtraction, multiplication, and division. The program should validate user input for correct Roman numeral formatting before performing any operations, and return the result as a Roman numeral.","solution":"class RomanNumeralCalculator: roman_to_int_map = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } int_to_roman_map = [ ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400), ('C', 100), ('XC', 90), ('L', 50), ('XL', 40), ('X', 10), ('IX', 9), ('V', 5), ('IV', 4), ('I', 1) ] @staticmethod def validate(roman): valid_chars = set(RomanNumeralCalculator.roman_to_int_map.keys()) return all(c in valid_chars for c in roman) @staticmethod def roman_to_int(roman): if not RomanNumeralCalculator.validate(roman): raise ValueError(\\"Invalid Roman numeral\\") total = 0 prev_value = 0 for char in reversed(roman): value = RomanNumeralCalculator.roman_to_int_map[char] if value < prev_value: total -= value else: total += value prev_value = value return total @staticmethod def int_to_roman(number): if not (0 < number < 4000): raise ValueError(\\"Number out of range (must be 1..3999)\\") result = [] for roman, value in RomanNumeralCalculator.int_to_roman_map: while number >= value: result.append(roman) number -= value return ''.join(result) @staticmethod def add(roman1, roman2): result_int = RomanNumeralCalculator.roman_to_int(roman1) + RomanNumeralCalculator.roman_to_int(roman2) return RomanNumeralCalculator.int_to_roman(result_int) @staticmethod def subtract(roman1, roman2): result_int = RomanNumeralCalculator.roman_to_int(roman1) - RomanNumeralCalculator.roman_to_int(roman2) if result_int <= 0: raise ValueError(\\"Negative or zero result not representable in Roman numerals\\") return RomanNumeralCalculator.int_to_roman(result_int) @staticmethod def multiply(roman1, roman2): result_int = RomanNumeralCalculator.roman_to_int(roman1) * RomanNumeralCalculator.roman_to_int(roman2) return RomanNumeralCalculator.int_to_roman(result_int) @staticmethod def divide(roman1, roman2): divisor = RomanNumeralCalculator.roman_to_int(roman2) if divisor == 0: raise ValueError(\\"Division by zero\\") result_int = RomanNumeralCalculator.roman_to_int(roman1) // divisor return RomanNumeralCalculator.int_to_roman(result_int)"},{"question":"Develop a program script to generate an array of random alphanumericvalues, where each value has a length of 10 characters. The resultant array should not contain any duplicate values. Assess the effectiveness of your solution in terms of time complexity and space complexity.","solution":"import random import string def generate_unique_alphanumeric_array(size): Generate an array of non-duplicate alphanumeric strings, each of length 10. :param size: Number of unique alphanumeric strings to generate. :return: List of unique alphanumeric strings. generated = set() while len(generated) < size: new_value = ''.join(random.choices(string.ascii_letters + string.digits, k=10)) generated.add(new_value) return list(generated)"},{"question":"Enhance this Python function that receives an array of strings and a unique string as arguments. It should highlight the occurrence of this string within the array, revealing the initial and ending index of each appearance, plus the tally of characters between such indexes. For an empty output array, return an empty array. But if the target string is nowhere found, deliver an observation stating \\"_absent_\\". Upgrade the primary check mechanism to scrutinize and correct the given incorrect code. Your challenge involves the handling of several string spottings per input array and complexifying the index representation method.","solution":"def highlight_occurrences(arr, unique_str): result = [] for s in arr: start = s.find(unique_str) # Continue the search if the substring is found while start != -1: end = start + len(unique_str) - 1 char_count = len(unique_str) result.append((start, end, char_count)) start = s.find(unique_str, start + 1) if not result: return \\"_absent_\\" return result"},{"question":"Python code for: moving 3D array values with a window that grabs 3 frames at a time. the first frame for \\"0-12\\" move back, the second frame \\"12-24\\" stays in place, the last frame for \\"24-36\\" moves forward","solution":"import numpy as np def move_3d_array_frames(arr): This function takes a 3D numpy array where the first dimension represents the frames, and reorders the frames according to the specified rules: - Frames 0-12 move back to the beginning - Frames 12-24 stay in place - Frames 24-36 move forward to the end Parameters: arr (numpy.ndarray): A 3D numpy array of shape (frames, height, width) Returns: numpy.ndarray: The reordered 3D numpy array # Split the array into the frame chunks frames_0_12 = arr[0:12] # First chunk of frames (0-12) frames_12_24 = arr[12:24] # Second chunk of frames (12-24) frames_24_36 = arr[24:36] # Third chunk of frames (24-36) # Reorder frames according to the specification reordered_frames = np.concatenate((frames_24_36, frames_12_24, frames_0_12), axis=0) return reordered_frames"},{"question":"Write a method to find the median in an array of integers in Python, but without using any sorting functions or data structures.","solution":"def find_median(arr): Find the median of an array of integers without using any sorting functions or data structures. def select_kth(arr, k): Helper function to perform the quickselect algorithm to find the k-th smallest element if len(arr) == 1: assert k == 0 return arr[0] pivot = arr[len(arr) // 2] lows = [el for el in arr if el < pivot] highs = [el for el in arr if el > pivot] pivots = [el for el in arr if el == pivot] if k < len(lows): return select_kth(lows, k) elif k < len(lows) + len(pivots): return pivots[0] else: return select_kth(highs, k - len(lows) - len(pivots)) n = len(arr) if n % 2 == 1: return select_kth(arr, n // 2) else: return 0.5 * (select_kth(arr, n // 2 - 1) + select_kth(arr, n // 2))"},{"question":"Create a guessing game where the user has to guess a number between 1-10. The program should ask the user for input, check if the input is an integer, and provide feedback to the player based on their input. The game should only allow 3 wrong guesses before the user loses the game. If the user guesses the correct number, display a congratulatory message.","solution":"import random def guessing_game(): A simple number guessing game where the user has to guess a number between 1 and 10. The user has only 3 attempts to guess the correct number. secret_number = random.randint(1, 10) attempts = 3 print(\\"Welcome to the guessing game!\\") print(\\"Guess a number between 1 and 10.\\") while attempts > 0: guess = input(\\"Enter your guess: \\") if not guess.isdigit(): print(\\"Invalid input. Please enter an integer.\\") continue guess = int(guess) if guess < 1 or guess > 10: print(\\"Please guess a number between 1 and 10.\\") continue if guess == secret_number: print(\\"Congratulations! You guessed the correct number!\\") return attempts -= 1 print(f\\"Incorrect guess. You have {attempts} attempts left.\\") print(f\\"Sorry, you've used all your attempts. The correct number was {secret_number}. Better luck next time!\\")"},{"question":"Given that list1 = ['Python', 'is', 'the', 'best', 'programming', 'language'] in Python programming, devise a Python function which can reverse the order of the elements within that list without utilizing any prebuilt reversing functions. Your function should perform in-place reversal, meaning it should not return a new reversed list but alter the original list. Also, your reversed list should maintain the original case of elements i.e., the original capitalization should be retained.","solution":"def reverse_list_in_place(lst): Reverses the order of elements in lst in-place. left = 0 right = len(lst) - 1 while left < right: # Swap elements at positions left and right lst[left], lst[right] = lst[right], lst[left] # Update positions to move towards the middle left += 1 right -= 1"},{"question":"Given a list of integers, write a Python program to count how many numbers in the list are greater than 10 and divisible by 3. The program should also print the sum of the numbers that meet these criteria. Additionally, ensure that the program handles the case when the list is empty and returns an appropriate message.","solution":"def count_and_sum_greater_than_10_and_divisible_by_3(numbers): Counts how many numbers in the list are greater than 10 and divisible by 3. Also computes the sum of these numbers. Parameters: numbers (list): List of integers. Returns: tuple: A tuple containing the count and the sum of numbers greater than 10 and divisible by 3. If the list is empty, returns (0, 0). if not numbers: return (0, 0) filtered_numbers = [num for num in numbers if num > 10 and num % 3 == 0] count = len(filtered_numbers) total_sum = sum(filtered_numbers) return (count, total_sum)"},{"question":"Write a python function using requests and BeautifulSoup to download and save image files from a list of image urls. The function should also check if the image has been successfully downloaded and saved before moving to the next url. In addition, simulate a delay of 1 to 3 seconds between each download attempt using time.sleep() to avoid overwhelming the server. Here is a list of one url for you to begin with, urls = [\\"https://www.example.com/image1.jpg\\"].","solution":"import requests from bs4 import BeautifulSoup import time import os import random def download_images(urls, save_directory): Downloads and saves image files from a list of image URLs. Parameters: - urls: List of image URLs to download - save_directory: Directory path where images are to be saved if not os.path.exists(save_directory): os.makedirs(save_directory) for url in urls: # Extract image file name from URL image_name = url.split(\\"/\\")[-1] save_path = os.path.join(save_directory, image_name) # Download the image response = requests.get(url) if response.status_code == 200: with open(save_path, 'wb') as f: f.write(response.content) # Check if the image is saved correctly if os.path.exists(save_path): print(f\\"Image successfully downloaded: {image_name}\\") else: print(f\\"Failed to save image: {image_name}\\") else: print(f\\"Failed to download image from URL: {url}\\") # Simulate delay between 1 to 3 seconds time.sleep(random.uniform(1, 3))"},{"question":"Rewrite the code snippet to calculate the total number of vowels and consonants in a case-insensitive way. The solution should not use built-in library functions nor methods for string manipulation, such as .lower() or .isalpha(), nor any iteration constructs like for loops. The solution should be provided using recursive function(s).","solution":"def count_vowels_and_consonants(text, index=0, vowels=0, consonants=0): This function calculates the total number of vowels and consonants in a case-insensitive manner. It does not use built-in library functions, string manipulation methods, or iteration constructs. :param text: The input string to be evaluated. :param index: The current index in the string, used for recursion. :param vowels: The count of vowels found so far. :param consonants: The count of consonants found so far. :return: A tuple containing the total number of vowels and consonants. def is_vowel(char): return char in 'aeiouAEIOU' def is_consonant(char): if 'a' <= char <= 'z' or 'A' <= char <= 'Z': return not is_vowel(char) return False if index == len(text): return vowels, consonants char = text[index] if is_vowel(char): return count_vowels_and_consonants(text, index + 1, vowels + 1, consonants) elif is_consonant(char): return count_vowels_and_consonants(text, index + 1, vowels, consonants + 1) else: return count_vowels_and_consonants(text, index + 1, vowels, consonants)"},{"question":"Create a recursive function to print \\"hello world\\" for a given number of times without using loop constructs like for, while etc. The function should take an integer 'n' as the argument and should print 'hello world' n times. Implement a base case to terminate the recursion. Make sure to handle edge cases, like negative integers.","solution":"def print_hello_world(n): Prints 'hello world' n times recursively. If n is less than or equal to 0, it does nothing. if n <= 0: return print(\\"hello world\\") print_hello_world(n - 1)"},{"question":"Write a python code to print out the first n Fibonacci number and their corresponding index in the sequence using a loop.","solution":"def fibonacci_sequence(n): Returns a list of tuples containing the index and the corresponding Fibonacci number up to the n-th Fibonacci number. if n <= 0: return [] fib_sequence = [(0, 0)] # Starting with the first fibonacci number and its index if n == 1: return fib_sequence a, b = 0, 1 for i in range(1, n): fib_sequence.append((i, b)) a, b = b, a + b return fib_sequence # Example usage: # fib_seq = fibonacci_sequence(10) # for index, fib in fib_seq: # print(f\\"Index: {index}, Fibonacci: {fib}\\")"},{"question":"Create an algorithm to detect if a string is a palindrome or not, without using any built-in string manipulation functions or data structures. The algorithm should have a time complexity of O(n) and a space complexity of O(1), where n is the length of the string.","solution":"def is_palindrome(s): Checks if the given string s is a palindrome. Args: s (str): The string to check. Returns: bool: True if s is a palindrome, False otherwise. left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True"},{"question":"Use a nested for loop to print all numbers from 1 to 100 in separate lines, but only print the prime numbers. The time complexity should not exceed O(n^1.5) and the space complexity should not exceed O(n).","solution":"def print_primes(): Prints all prime numbers from 1 to 100. def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True for num in range(1, 101): if is_prime(num): print(num)"},{"question":"Write a Python function to deduce if a designated year is a leap year or not, using the Gregorian calendar rules. Include comprehensive comments outlining the function's logic and potential edge cases.","solution":"def is_leap_year(year): Determine if a given year is a leap year. A year is a leap year if: 1. It is divisible by 4, and 2. It is not divisible by 100, unless 3. It is also divisible by 400. Args: year (int): The year to check. Returns: bool: True if the year is a leap year, False otherwise. Examples: - 2000 is a leap year (divisible by 400) - 1900 is not a leap year (divisible by 100, but not 400) - 2004 is a leap year (divisible by 4, but not 100) - 2001 is not a leap year (not divisible by 4) if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True else: return False else: return True else: return False"},{"question":"Write a function that takes a list as a parameter and returns only the unique elements in the given list. You may not use any libraries or built-in functions for your solution. Your function should have a time complexity of O(n^2). Additionally, your function should not use any additional data structures to store intermediate results.","solution":"def unique_elements(lst): Returns a list of unique elements from the given list, maintaining order of first occurrence. result = [] for item in lst: is_unique = True for unique_item in result: if item == unique_item: is_unique = False break if is_unique: result.append(item) return result"},{"question":"Write a Python function called \\"capitalize_list_strings\\" that takes a list of strings as an argument and returns the list with each string capitalized.","solution":"def capitalize_list_strings(string_list): Takes a list of strings and returns a list with each string capitalized. :param string_list: List of strings to be capitalized :return: List of capitalized strings return [s.capitalize() for s in string_list]"},{"question":"Devise a function that extracts the character at a specified index from each string within an array of strings, returning a new array of these characters.","solution":"def extract_char_at_index(arr, index): Extracts the character at a specified index from each string within an array of strings. Parameters: arr (list of str): List of strings from which the characters are to be extracted. index (int): The index at which the character is to be extracted in each string. Returns: list of str: A new list containing the characters extracted from each string at the specified index. result = [] for string in arr: if index < len(string): result.append(string[index]) else: result.append('') return result"},{"question":"Develop a Python function that accepts a string as an input and returns a dictionary with the frequency of each character in the input string. Note that the function should not differentiate between uppercase and lowercase. For instance, if the function receives the string 'encyclopedia', it should return: {'e': 3, 'n': 2, 'c': 2, 'y': 1, 'l': 1, 'o': 1, 'p': 1, 'd': 1, 'i': 1, 'a': 1} The string case sensitivity should be ignored, meaning lowercase and uppercase characters should be treated as the same.","solution":"def character_frequency(s): Returns a dictionary with the frequency of each character in the input string. The function is case insensitive. s = s.lower() freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Can you develop a Python algorithm to calculate the nth prime number in a more efficient way than the standard Sieve of Eratosthenes method? Furthermore, describe the unique approach you take in your algorithm and how it differs from the traditional methods used to find prime numbers.","solution":"import math def nth_prime(n): Returns the nth prime number. This function uses an optimized version of the prime-checking algorithm instead of the traditional Sieve of Eratosthenes, which includes: 1. Using a dynamic list to store prime candidates and checking only against those primes. 2. Reducing the number of checks using the properties of primes (odd numbers only after 2). if n == 1: return 2 count = 1 candidate = 1 primes = [2] while count < n: candidate += 2 is_prime = True limit = int(math.sqrt(candidate)) + 1 for prime in primes: if prime > limit: break if candidate % prime == 0: is_prime = False break if is_prime: primes.append(candidate) count += 1 return primes[-1]"},{"question":"Write a Python code to find the top k largest numbers in a list, where k is a given positive integer. The list can contain duplicates and can have a length of up to 10^6 elements. The code should have a time complexity of O(n) and should not use any built-in sorting functions or libraries. Additionally, the code should not use any additional data structures or libraries for heap operations, and should not use recursion. List: [2, 9, 12, 45, 10, 20, 45, 12, 9, 2].","solution":"def top_k_largest_numbers(arr, k): Returns the top k largest numbers in arr. if k <= 0 or k > len(arr): return [] # Initialize an array to hold the top k largest numbers top_k = [-float('inf')] * k for num in arr: if num > top_k[0]: top_k[0] = num # Re-sort the top_k array to maintain the invariant that top_k[0] is the smallest in top_k for i in range(1, k): if top_k[i - 1] > top_k[i]: top_k[i - 1], top_k[i] = top_k[i], top_k[i - 1] else: break # Return a sorted list in descending order return top_k[::-1]"},{"question":"Design a recursive function to determine if a string is an anagram of its reversed form, considering only alphanumeric characters and ignoring cases.","solution":"def is_anagram_of_reverse_recursive(s): Checks if the string s is an anagram of its reversed form, considering only alphanumeric characters and ignoring cases. # Helper function to clean the string def clean_string(s): return ''.join(c.lower() for c in s if c.isalnum()) # Actual recursive function to check the anagram status def helper(cleaned_s, left, right): if left >= right: return True if cleaned_s[left] != cleaned_s[right]: return False return helper(cleaned_s, left + 1, right - 1) cleaned_s = clean_string(s) return helper(cleaned_s, 0, len(cleaned_s) - 1)"},{"question":"Develop a Python function that not only reverses an array up to a specified index, but also returns the reverse sorted version of that segment. However, for this task, you're given a piece of erroneous initial code for reference. Your responsibility is to fix and improve the said code while considering edge cases such as non-integer inputs for the position, an index out of array range, an actual number greater than the array length, or a negative index representing reverse position from the end of the list. Also, remember to account for scenarios where the array itself is empty or contains non-numeric elements or duplicate values.","solution":"def reverse_and_sort_segment(arr, index): Reverses the array up to the specified index and returns the reverse sorted version of that segment. Arguments: arr -- List of elements to be manipulated. index -- The index up to which the array is to be reversed and sorted. Returns: A list containing the reversed and sorted segment. if not isinstance(arr, list): raise ValueError(\\"Input should be a list\\") if not all(isinstance(i, (int, float)) for i in arr): raise ValueError(\\"All elements in the array should be numbers\\") if not isinstance(index, int): raise ValueError(\\"Index should be an integer\\") if abs(index) > len(arr): raise IndexError(\\"Index out of range\\") if index < 0: index = len(arr) + index # Reverse the segment up to the specified index segment = arr[:index+1][::-1] # Return the reverse sorted segment return sorted(segment, reverse=True)"},{"question":"Implement a function \`hailstone_sequence(n: int) -> List[int]\` that returns the Hailstone sequence starting from a positive integer \`n\`. If \`n\` is even, the next number in the sequence is \`n / 2\`. If \`n\` is odd, the next number in the sequence is \`3n + 1\`. Stop the sequence when the function reaches 1. Given an erroneous implementation of the function, debug the code to make it work correctly and efficiently.","solution":"def hailstone_sequence(n: int) -> list: Returns the Hailstone sequence starting from the positive integer n. The sequence continues until it reaches 1. if n <= 0: raise ValueError(\\"The input number must be a positive integer.\\") sequence = [] while n != 1: sequence.append(n) if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 sequence.append(1) # Adding the final element 1 return sequence"},{"question":"Reverse the order of the elements in a list using only recursion. Additionally, you are not allowed to use any built-in list manipulation functions or methods, such as \`reverse()\`, \`pop()\`, \`insert()\`, or \`append()\`. You can only use basic operations like indexing and swapping.","solution":"def reverse_list(lst): Reverse the order of elements in a list using recursion without using built-in manipulation functions. Parameters: lst (list): The list to be reversed. Returns: list: The reversed list. def helper(start, end): if start >= end: return lst lst[start], lst[end] = lst[end], lst[start] return helper(start + 1, end - 1) return helper(0, len(lst) - 1)"},{"question":"Consider a scenario in which you are presented with a nested dictionary in Python, designed with more profound complexity. Your task is to craft a function that not only identifies the keys but also assesses the type of every value correspondingly in this complicatedly nested dictionary. The function should navigate through every level of the nested dictionary.","solution":"def analyze_nested_dict(nested_dict): Analyzes a nested dictionary and returns a dictionary with the same structure where values are replaced with their type names. Args: nested_dict (dict): The nested dictionary to analyze. Returns: dict: A dictionary with types of the values in the same structure. if isinstance(nested_dict, dict): return {key: analyze_nested_dict(value) for key, value in nested_dict.items()} else: return type(nested_dict).__name__"},{"question":"How would you programmatically determine the number of days in the current month in Python, without using any built-in date or time libraries or functions? Additionally, you must implement your own leap year check function to accurately determine the number of days in February.","solution":"def is_leap_year(year): Check if a given year is a leap year. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True return False def days_in_month(year, month): Determine the number of days in a given month of a specific year. if month < 1 or month > 12: raise ValueError(\\"Month must be between 1 and 12\\") # Days in each month: Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Adjust for leap year in February if month == 2 and is_leap_year(year): return 29 return days[month - 1]"},{"question":"Given a list of non-negative integers, write a function that uses the quick sort algorithm to sort the list in ascending order. Additionally, ensure your function handles edge-case scenarios properly, like an already sorted list, a reverse sorted list, a list with all elements the same, or an empty list.","solution":"def quick_sort(arr): Perform quick sort on a list of non-negative integers. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Write a code that has the capability to detect a specific keyword within a paragraph. The code should be case insensitive and should also be able to detect the keyword even if it's partial. For instance, if the keyword is \\"cat\\", the code should detect it in words like \\"catch\\" or \\"caterpillar\\". Additionally, the code should be able to handle multiple keywords and return the number of times each keyword was found in the paragraph.","solution":"import re from collections import defaultdict def keyword_detector(paragraph, keywords): Detects given keywords in the paragraph. The search is case-insensitive and partial matches are counted. :param paragraph: The paragraph to search within. :param keywords: A list of keywords to search for. :return: A dictionary with keywords as keys and the number of times each keyword is found as values. keyword_counts = defaultdict(int) lower_paragraph = paragraph.lower() for keyword in keywords: lower_keyword = keyword.lower() matches = re.findall(lower_keyword, lower_paragraph) keyword_counts[keyword] = len(matches) return keyword_counts"},{"question":"Write a function in Python that takes as input a list of strings and returns the first string that contains all the vowels (a, e, i, o, u) in order, and its index, or (-1, -1) if no such string exists. The solution must involve a left-to-right scan and should not use any built-in functions that directly solve the problem.","solution":"def first_string_with_all_vowels(strings): Returns the first string that contains all the vowels (a, e, i, o, u) in order, and its index. If no such string exists, returns (-1, -1). vowels = \\"aeiou\\" for index, string in enumerate(strings): vowel_index = 0 for char in string: if char == vowels[vowel_index]: vowel_index += 1 if vowel_index == len(vowels): return string, index return -1, -1"},{"question":"Craft a recursive function using Python that traverses a balanced binary tree traverses using the depth-first search algorithm. Also, include a feature in your function that allows it to return a list of all the nodes at a certain depth or level in the tree. You will also need to create and provide a sample balanced binary tree for testing this function.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def depth_first_search(tree): Performs a depth-first search on the tree and returns a list of all node values. values = [] def dfs(node): if not node: return values.append(node.value) dfs(node.left) dfs(node.right) dfs(tree) return values def nodes_at_level(tree, target_level): Returns a list of all nodes at the specified target_level. result = [] def dfs_with_level(node, current_level): if not node: return if current_level == target_level: result.append(node.value) else: dfs_with_level(node.left, current_level + 1) dfs_with_level(node.right, current_level + 1) dfs_with_level(tree, 0) return result # Sample balanced binary tree for testing def create_sample_tree(): Returns a sample balanced binary tree. return TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3, TreeNode(6), TreeNode(7)))"},{"question":"Devise a Python routine taking a numerically filled 2D array as argument, then calculating and returning the greatest disparity between the minimum and maximum elements for each sub-array.","solution":"def greatest_disparity(arr): Computes the greatest disparity (difference between maximum and minimum elements) for each sub-array. Parameters: arr (list of list of int): A 2D array where each sub-array is a list of integers. Returns: list of int: A list containing the greatest disparity for each sub-array. disparities = [] for sub_array in arr: if len(sub_array) == 0: disparities.append(0) else: min_val = min(sub_array) max_val = max(sub_array) disparity = max_val - min_val disparities.append(disparity) return disparities"},{"question":"Given a 2D matrix of integers, write a function 'count_negative' that counts the number of negative numbers in the matrix, without using any built-in Python functions for counting or sorting. The matrix will have at most 100 rows and 100 columns.","solution":"def count_negative(matrix): Counts the number of negative numbers in the given 2D matrix. Parameters: matrix (List[List[int]]): 2D list of integers Returns: int: The count of negative numbers in the matrix count = 0 for row in matrix: for num in row: if num < 0: count += 1 return count"},{"question":"Write a function that breaks down a given string 's' into substrings, which are separated by a specific character 'c'. Instead of returning the substrings as a list, combine them as key-value pairs in a dictionary where the key is the substring and the value is its initial index in the string 's'.","solution":"def break_down_string(s, c): Breaks down the string 's' into substrings separated by character 'c' and returns a dictionary with substrings as keys and their starting indices as values. parts = s.split(c) index = 0 result = {} for part in parts: result[part] = index index += len(part) + 1 # including the separator character return result"},{"question":"Write a Python function that takes two arguments, a list of numbers and a target number. The function should return the indices of the two items in the list that add up to the target value.","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the target value. Args: nums: List of numbers. target: Target sum. Returns: A tuple of two indices if found, otherwise None. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return None"},{"question":"Given an array of integers and an integer 'k', find the number of unique pairs (i, j) where i < j and the absolute difference between the array[i] and array[j] is exactly 'k'. Design an optimal algorithm and write the code for the same, ensuring that the solution does not exceed O(n log n) time complexity, where n is the size of the input array.","solution":"def find_pairs_with_difference(nums, k): Returns the number of unique pairs (i, j) where i < j and the absolute difference between nums[i] and nums[j] is exactly k. if k < 0: return 0 # since absolute difference cannot be negative nums.sort() # Sorting the array, O(n log n) count = 0 left = 0 right = 1 n = len(nums) while right < n: if left == right: right += 1 continue diff = abs(nums[right] - nums[left]) if diff < k: right += 1 elif diff > k: left += 1 else: # diff == k count += 1 left += 1 right += 1 # Skip duplicates while left < n and nums[left] == nums[left - 1]: left += 1 while right < n and nums[right] == nums[right - 1]: right += 1 return count"},{"question":"Create a program that not only generates random characters from a given list, but also ensures the generated sequence of characters never repeats in consecutive generations. The program should also track history of previous 20 generated sequences. The characters to pick from are a to f.","solution":"import random class NonRepeatingCharGenerator: def __init__(self): self.history = [] self.characters = ['a', 'b', 'c', 'd', 'e', 'f'] self.previous_sequence = \\"\\" def generate_sequence(self, length): new_sequence = \\"\\" while True: new_sequence = ''.join(random.choice(self.characters) for _ in range(length)) if new_sequence != self.previous_sequence: break self.history.append(new_sequence) if len(self.history) > 20: self.history.pop(0) self.previous_sequence = new_sequence return new_sequence def get_history(self): return self.history"},{"question":"Given that there are distinct variables a, b, and c, your main task is to write correct Python code to swap the values of 'a' and 'b' without using any other additional temporary variables. Further, also handle the scenario where 'a' or 'b' or both are None. It should also tackle any possible exceptions or errors that might occur during the operation. Demonstrate your code to function correctly under all these circumstances.","solution":"def swap_values(a, b): Swap the values of a and b without using any extra temporary variables. Handles cases where either a or b or both are None. try: if a is None or b is None: return None, None a = a + b b = a - b a = a - b return a, b except TypeError: # Handle cases where a or b are not numbers return None, None"},{"question":"I have a list of numbers. How can I create a function to print only the even numbers from the list using Python?","solution":"def print_even_numbers(numbers): Prints only the even numbers from the provided list. for number in numbers: if number % 2 == 0: print(number)"},{"question":"Create a dictionary with keys 'a' and 'b' and values 1 and 2 respectively. Then create a function that takes in a dictionary as an argument and updates the values of 'a' and 'b' by incrementing them by 1. However, you are not allowed to use any arithmetic operators or built-in functions to perform the increment operation. Your function should only use logical operators, bitwise operators, and string manipulation to achieve the increment. Finally, return the updated dictionary from the function.","solution":"def increment_dict_values(d): Takes a dictionary with keys 'a' and 'b' and updates their values by incrementing them by 1 using logical operators, bitwise operators, and string manipulation. def increment(n): # Increments the number using bitwise operators. return -(~n) for key in d: d[key] = increment(d[key]) return d # Create the initial dictionary initial_dict = {'a': 1, 'b': 2}"},{"question":"Develop a script to create a new folder in the specified directory, where the folder name consists of a combination of random alphanumeric characters with a length of at least 20 characters. The directory path should be provided as an input to the script.","solution":"import os import string import random def create_random_folder(directory_path, length=20): Create a folder with a random name of specified length in the given directory. :param directory_path: The path where the new folder should be created. :param length: The length of the random folder name. :return: The path of the created folder. if not os.path.exists(directory_path): raise ValueError(\\"The specified directory path does not exist.\\") folder_name = ''.join(random.choices(string.ascii_letters + string.digits, k=length)) folder_path = os.path.join(directory_path, folder_name) os.mkdir(folder_path) return folder_path"},{"question":"Write a Python function that takes in a list and two indices. The function should swap the elements at these given indices and return the modified list. Additionally, make sure to include error handling to prevent out-of-bounds index access.","solution":"def swap_elements(lst, index1, index2): Swaps the elements at the specified indices in the list. Args: lst (list): The list in which the elements will be swapped. index1 (int): The first index. index2 (int): The second index. Returns: list: The modified list after the elements have been swapped, if indices are valid. Otherwise, returns the original list. if index1 < 0 or index1 >= len(lst) or index2 < 0 or index2 >= len(lst): # Return the list unmodified if any index is out of bounds return lst lst[index1], lst[index2] = lst[index2], lst[index1] return lst"},{"question":"Using Numpy, create an array of size 1024 and fill it with random complex numbers. Then, implement a function that computes the Fast Fourier Transform (FFT) of this array. The function should also include functionality to handle noisy data, such as adding Gaussian white noise to your array before computing the FFT. Analyze the effect of different noise levels on the resulting FFT. Update your function to remove the noise using a filtering method of your choice and compare the results.","solution":"import numpy as np def create_random_complex_array(size=1024): Generates an array of random complex numbers of given size. real_part = np.random.rand(size) imag_part = np.random.rand(size) complex_array = real_part + 1j * imag_part return complex_array def add_gaussian_noise(array, noise_level): Adds Gaussian white noise to a given array. noise = np.random.normal(0, noise_level, array.shape) noisy_array = array + noise return noisy_array def compute_fft(array): Computes the Fast Fourier Transform of a given array. return np.fft.fft(array) def remove_noise(array, threshold): Removes noise from an FFT array by zeroing out components below a certain threshold. fft_array = np.fft.fft(array) fft_array[np.abs(fft_array) < threshold] = 0 return np.fft.ifft(fft_array) def analyze_fft_effect_of_noise(original_array, noise_level, threshold): Analyzes the effect of added Gaussian noise on the FFT and removes the noise. noisy_array = add_gaussian_noise(original_array, noise_level) fft_original = compute_fft(original_array) fft_noisy = compute_fft(noisy_array) filtered_array = remove_noise(noisy_array, threshold) fft_filtered = compute_fft(filtered_array) return fft_original, fft_noisy, fft_filtered"},{"question":"Develop a Python coding solution designed to execute the operation of sifting through and isolating the first three lexeme entities from a provided sequence of characters. Additionally, your code should include a check for any non-alphabetical characters present in these entities and remove them. The functionality should be wrapped into a reusable function.","solution":"import re def extract_first_three_lexemes(sequence): Extract the first three lexeme entities from the provided sequence of characters. Removes any non-alphabetical characters present in these entities. Parameters: sequence (str): Input character sequence. Returns: list: A list containing the first three lexeme entities with non-alphabetical characters removed. # Split the sequence into words (lexemes) words = sequence.split() # Extract the first three words first_three = words[:3] # Remove non-alphabetical characters and keep only alphabetical characters cleaned_lexemes = [re.sub(r'[^a-zA-Z]', '', word) for word in first_three] return cleaned_lexemes"},{"question":"Can you write a Python function that takes a list of tuples, where each tuple contains two strings, and returns a list of tuples where the strings are swapped?","solution":"def swap_tuples(lst): Takes a list of tuples, where each tuple contains two strings, and returns a list of tuples where the strings are swapped. Parameters: lst (list of tuples): List containing tuples of two strings. Returns: list of tuples: List containing tuples with swapped strings. return [(b, a) for a, b in lst]"},{"question":"Write a Python function that takes two arguments, n and m, representing the number of rows and columns in a grid. The function should return a two-dimensional list where each element is a unique combination of indices (i, j) such that 0 <= i < n and 0 <= j < m. You should not use any external libraries for this task.","solution":"def generate_grid(n, m): Generates a grid with unique combinations of indices (i, j) where 0 <= i < n and 0 <= j < m. Parameters: n (int): Number of rows. m (int): Number of columns. Returns: list: Two-dimensional list of unique index pairs. return [[(i, j) for j in range(m)] for i in range(n)]"},{"question":"Modify a given doubly linked list to delete the last node that has a value which is greater than a given number 'x'. If there are multiple nodes with the same value, delete the last occurring node.","solution":"class Node: def __init__(self, data): self.data = data self.prev = None self.next = None class DoublyLinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if not self.head: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node new_node.prev = last def delete_last_greater_than(self, x): last_greater_node = None current = self.head while current: if current.data > x: last_greater_node = current current = current.next if not last_greater_node: return # No node to delete if last_greater_node.prev: last_greater_node.prev.next = last_greater_node.next if last_greater_node.next: last_greater_node.next.prev = last_greater_node.prev if last_greater_node == self.head: self.head = last_greater_node.next if self.head: self.head.prev = None def to_list(self): result = [] node = self.head while node: result.append(node.data) node = node.next return result"},{"question":"Revise the Python function originally presented to calculate the Least Common Multiple (LCM) for a quartet of integers (w, x, y, and z), utilizing the mathematics module. Emphasize the use of error management to accommodate negative or non-integral inputs and seamlessly handle extreme input values. Develop the function with the consideration for optimized performance, and make sure it complies with all specified requirements.","solution":"import math def lcm(a, b): return abs(a * b) // math.gcd(a, b) def lcm_of_four(w, x, y, z): Returns the least common multiple (LCM) of four integers w, x, y, and z. Handles negative or non-integral inputs and seamlessly manages extreme input values. # Input validation nums = [w, x, y, z] for num in nums: if not isinstance(num, int): raise ValueError(\\"All inputs must be integers\\") if num < 0: raise ValueError(\\"All inputs must be non-negative integers\\") lcm_w_x = lcm(w, x) lcm_w_x_y = lcm(lcm_w_x, y) lcm_w_x_y_z = lcm(lcm_w_x_y, z) return lcm_w_x_y_z"},{"question":"Given a string \\"9021 0John\\" and a list of character types to check 'digit', 'upper', 'lower' and 'space'. Write a python function to return a list with counts of each specified character type in the string.","solution":"def count_char_types(input_str): Returns a dictionary with counts of each specified character type: 'digit', 'upper', 'lower' and 'space'. char_types = ['digit', 'upper', 'lower', 'space'] counts = {ctype: 0 for ctype in char_types} for char in input_str: if char.isdigit(): counts['digit'] += 1 if char.isupper(): counts['upper'] += 1 if char.islower(): counts['lower'] += 1 if char.isspace(): counts['space'] += 1 return counts"},{"question":"Given a list of numbers, write a Python function to find out the summation of the elements, but you are not allowed to use the built-in sum() function.","solution":"def summation(numbers): Returns the summation of the elements in the list numbers. You are not allowed to use the built-in sum() function. total = 0 for num in numbers: total += num return total"},{"question":"Write a Python function named \\"unique_ordered\\" that takes a list as input and returns a new list containing the unique elements from the original list, preserving their order.","solution":"def unique_ordered(lst): Returns a new list containing the unique elements from the input list, preserving their order. seen = set() unique_lst = [] for item in lst: if item not in seen: seen.add(item) unique_lst.append(item) return unique_lst"},{"question":"Create an array with the following elements: 1, 2, 3, 2, 1, 4, 5, 4, 3, 2, 1. Write a function that removes all duplicate elements from the array and returns a new array containing only the unique elements. The function should also sort the elements in descending order. Additionally, the function should implement a custom sorting algorithm instead of using built-in sorting methods.","solution":"def remove_duplicates_and_sort_desc(array): Removes duplicate elements from the array and returns a new array with unique elements sorted in descending order using bubble sort. Parameters: - array (list): The input list which may contain duplicate elements. Returns: - list: New list with unique elements sorted in descending order. # Remove duplicates by converting to a set and back to a list unique_elements = list(set(array)) # Implement Bubble Sort in descending order n = len(unique_elements) for i in range(n): for j in range(0, n-i-1): if unique_elements[j] < unique_elements[j+1]: unique_elements[j], unique_elements[j+1] = unique_elements[j+1], unique_elements[j] return unique_elements"},{"question":"What is the most optimal and efficient way to generate a random permutation of an integer array of numbers ranging from 1 to a given positive integer n, such that no two adjacent elements are equal? In addition to providing the code, please also state the time and space complexity of your solution and discuss any potential limitations or trade-offs.","solution":"import random def generate_random_permutation(n): Generate a random permutation of numbers from 1 to n where no two adjacent elements are equal. if n < 2: return [1] # Step 1: Create a list of numbers from 1 to n numbers = list(range(1, n+1)) # Step 2: Apply the modified Fisher-Yates shuffle for i in range(n): j = -1 while True: j = random.randint(i, n-1) # Ensure that when swapping, no adjacent elements are equal if i == 0 or (i > 0 and numbers[i-1] != numbers[j]): numbers[i], numbers[j] = numbers[j], numbers[i] break # Return the random permutation return numbers"},{"question":"Define a Python function that takes two string parameters as input and provides an output of type boolean. This function should check whether the first string is a substring of the second one. However, the check should only be successful (return True) if the first string appears in the second string at an index that is not 0. For example, calling the function with the following two arguments: \\"ate\\", \\"The quick brown fox jumped over the lazy dog\\" should return False because \\"ate\\" appears at position 0 (considering the first character of the second string is at position 0). However, a call with \\"ert\\", \\"The quick brown fox jumped over the lazy dog\\" should return True since \\"ert\\" appears at a non-zero index in the sentence.","solution":"def is_nonzero_substring(substring, string): Returns True if the substring appears in the string at a non-zero index. index = string.find(substring) if index > 0: return True return False"},{"question":"Write a tied variant of the softmax function called 'conditionally_abstaining_softmax' which, given an array of 'logits' and also an 'abstention_threshold', will return a probabilistic vector where some of its components might equal zero, indicating an \\"abstention\\", when the corresponding logit is below the given 'abstention_threshold'.","solution":"import numpy as np def conditionally_abstaining_softmax(logits, abstention_threshold): Compute the softmax for the logits, abstaining below a certain threshold. Parameters: logits (array-like): Array of logits (predicted scores). abstention_threshold (float): Threshold for abstention. Returns: np.ndarray: An array of probabilities where some components might be zero. logits = np.asarray(logits) # Mask for logits below the abstention threshold mask = logits >= abstention_threshold # Only consider logits above the threshold for softmax calculation safe_logits = logits.copy() safe_logits[~mask] = -np.inf # Use -inf to effectively zero out in softmax # Calculate softmax on the filtered logits exp_probs = np.exp(safe_logits - np.max(safe_logits)) # Stability with max trick softmax_probs = exp_probs / np.sum(exp_probs) # Set probabilities to zero where we have abstained softmax_probs[~mask] = 0 return softmax_probs"},{"question":"Please write a code that removes duplicates from a given list of integers while preserving the order of the elements that are not removed. Your solution should have a time complexity of O(n) and a space complexity of O(1), without using any additional data structures. However, you are not allowed to use any loops or recursion in your solution.","solution":"def remove_duplicates(nums): Removes duplicates from a list of integers while preserving the order of the elements. Complexity: O(n) for time, O(1) for space. idx = 0 while idx < len(nums): if nums[:idx].count(nums[idx]) > 0: del nums[idx] else: idx += 1 return nums"},{"question":"Implement a multithreaded version of the Sieve of Eratosthenes that uses concurrent programming to generate a sequence of n prime numbers. The algorithm should ensure correct data synchronization and deadlocks prevention. Additionally, the generated sequence must be saved in a shared memory space that is accessible to all threads.","solution":"import threading def sieve_of_eratosthenes(n): Implements a multithreaded version of the Sieve of Eratosthenes to find the first n prime numbers. if n < 1: return [] primes = [] limit = n * 10 # Approximation to find n primes is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not primes lock = threading.Lock() def mark_multiples(start, step): for i in range(start, limit + 1, step): with lock: is_prime[i] = False threads = [] for p in range(2, limit + 1): if is_prime[p]: primes.append(p) thread = threading.Thread(target=mark_multiples, args=(p * p, p)) threads.append(thread) thread.start() if len(primes) >= n: break for thread in threads: thread.join() return primes[:n]"},{"question":"Create a Python script to generate a list of n random numbers between a given range, where n is provided by the user. The generated numbers must not repeat.","solution":"import random def generate_unique_random_numbers(n, start, end): Generates a list of n unique random numbers between the range [start, end]. Parameters: n (int): The number of unique random numbers to generate. start (int): The lower bound of the range (inclusive). end (int): The upper bound of the range (inclusive). Returns: list: A list of n unique random numbers within the specified range. if n > (end - start + 1): raise ValueError(\\"Range between start and end is too small to generate n unique random numbers\\") return random.sample(range(start, end + 1), n)"},{"question":"Please construct a Python function capable of calculating and returning the absolute difference amidst two complex numbers. Moreover, ensure the implementation surpasses the limitations of fundamental arithmetic operations for complex numbers by also incorporating the functionality to identify and handle exceptions, ensuring it delivers accurate results consistently.","solution":"def complex_absolute_difference(c1, c2): Returns the absolute difference between two complex numbers c1 and c2. try: abs_difference = abs(c1 - c2) return abs_difference except Exception as e: raise ValueError(f\\"An error occurred while calculating the absolute difference: {str(e)}\\")"},{"question":"Write a python function to generate the next \\"happy\\" number after the given number. A happy number is defined as a number which eventually reaches 1 when replaced by the sum of the square of each digit. If a number is not a happy number, it will enter an infinite loop of numbers that have already been seen. For example, 19 is a happy number as the sequence goes 19 -> 82 -> 68 -> 100 -> 1.","solution":"def is_happy_number(n): Determines if a number is a happy number. seen = set() while n != 1 and n not in seen: seen.add(n) n = sum(int(char) ** 2 for char in str(n)) return n == 1 def next_happy_number(n): Returns the next happy number after the given number n. n += 1 while not is_happy_number(n): n += 1 return n"},{"question":"I have a list of colors represented as strings: [\\"red\\", \\"blue\\", \\"green\\", \\"purple\\", \\"yellow\\", \\"orange\\"]. How can I construct an algorithm in Python to classify these colors as either primary or secondary?","solution":"def classify_color(color): Classifies the given color as 'primary' or 'secondary'. Args: color (str): The color to classify. Returns: str: 'primary' if the color is a primary color, 'secondary' if the color is a secondary color. primary_colors = [\\"red\\", \\"blue\\", \\"yellow\\"] secondary_colors = [\\"green\\", \\"purple\\", \\"orange\\"] if color in primary_colors: return \\"primary\\" elif color in secondary_colors: return \\"secondary\\" else: return \\"unknown\\" def classify_colors(color_list): Classifies each color in the given list of colors as 'primary' or 'secondary'. Args: color_list (List[str]): The list of colors to classify. Returns: List[str]: A list of classifications corresponding to the input colors. return [classify_color(color) for color in color_list] # Example usage: colors = [\\"red\\", \\"blue\\", \\"green\\", \\"purple\\", \\"yellow\\", \\"orange\\"] print(classify_colors(colors)) # Output: ['primary', 'primary', 'secondary', 'secondary', 'primary', 'secondary']"},{"question":"Write a function in Python that returns elements from a list of integers which are greater than the average value of the list. Additionally, the function should handle cases when the input list is empty or contains non-integer values by raising appropriate exceptions.","solution":"def above_average_elements(lst): Returns a list of elements from lst that are greater than the average value of lst. Raises ValueError if the input list is empty or contains non-integer values. if not lst: raise ValueError(\\"The list is empty\\") # Check for non-integer values for item in lst: if not isinstance(item, int): raise ValueError(\\"The list contains non-integer values\\") average = sum(lst) / len(lst) return [x for x in lst if x > average]"},{"question":"Write a Python code for converting a string to a dictionary which contains unique characters from the string as the keys and their frequency counts as the values. Then, use the dictionary to create a list in which the items are the dictionary keys sorted in descending order by their corresponding frequency values.","solution":"def string_to_freq_dict(s): Converts a string to a dictionary containing unique characters as keys and their frequency counts as values. freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict def dict_to_sorted_list(freq_dict): Converts the frequency dictionary to a list of keys sorted in descending order by their frequency values. sorted_list = sorted(freq_dict, key=lambda x: freq_dict[x], reverse=True) return sorted_list def string_to_sorted_char_list(s): Converts a string to a sorted list of its characters based on their frequency in descending order. freq_dict = string_to_freq_dict(s) sorted_list = dict_to_sorted_list(freq_dict) return sorted_list"},{"question":"I need to extract all 3 digit numbers in a list into a separate list using Python. Could you provide an example code for this?","solution":"def extract_three_digit_numbers(numbers): Extracts all three-digit numbers from a list of integers. Parameters: numbers (list): A list of integers Returns: list: A list containing only three-digit numbers return [num for num in numbers if 100 <= num <= 999]"},{"question":"Define a Python function to remove all redundant elements from a list and return a list with only unique elements. The function should also take into consideration that the order of the elements in the output list should be the same as the order of their first occurrence in the original list. For instance if the input list is [5,2,3,2,4,5], the function should return [5,2,3,4].","solution":"def remove_redundant_elements(input_list): Removes redundant elements from the list and returns a list with only unique elements, preserving the order of their first occurrence. :param input_list: List of elements with possible redundant items. :return: List of unique elements in the order of their first occurrence. seen = set() unique_list = [] for item in input_list: if item not in seen: seen.add(item) unique_list.append(item) return unique_list"},{"question":"Design a simple password verification function in Python that checks for the following criteria: minimum length of 8 characters, at least one uppercase letter, and at least one number. If any of the criteria is not met, the function should return a specific error message.","solution":"import re def verify_password(password): Verifies that the password meets the following criteria: 1. Minimum length of 8 characters 2. Contains at least one uppercase letter 3. Contains at least one number if len(password) < 8: return \\"Password must be at least 8 characters long\\" if not re.search(r'[A-Z]', password): return \\"Password must contain at least one uppercase letter\\" if not re.search(r'd', password): return \\"Password must contain at least one number\\" return \\"Password is valid\\""},{"question":"Hello, could you kindly assist me in modifying the coding provided such that all its operations are executed in reverse order? The task implies altering the enclosed loop's functionality so that it iterates backwards, starting from the last index of the given input array and moving to the first. The function currently creates a new array of equal length to the input, with each element being multiplied by 2. Your task is to transform it into a reverse-iterating function generating a correspondingly reversed output array.","solution":"def reverse_and_multiply(arr): Takes an array and returns a new array where each element is multiplied by 2 and the order is reversed. result = [arr[i] * 2 for i in range(len(arr)-1, -1, -1)] return result"},{"question":"You are a programmer and have been asked to write a program that can calculate the Standard Deviation for a list of numbers using both Python and C# programming languages. The program should receive the list of numbers as an input, should ignore anonymous entries (value = None), and should be executed on at least 1000 random number entries for each programming language.","solution":"import math def standard_deviation(numbers): Calculate the standard deviation of a list of numbers, ignoring any None values. filtered_numbers = [num for num in numbers if num is not None] if len(filtered_numbers) == 0: return None mean = sum(filtered_numbers) / len(filtered_numbers) variance = sum((num - mean) ** 2 for num in filtered_numbers) / len(filtered_numbers) return math.sqrt(variance)"},{"question":"Write a Python function \`reverse_array_in_place(numbers)\` that reverses the order of elements in the given list \`numbers\` in-place. This function should not return a new list, but instead, it should modify the original list. The function should not use any built-in reverse functions or slicing methods.","solution":"def reverse_array_in_place(numbers): Reverses the order of elements in the given list in-place. Args: numbers: list of elements to be reversed in-place left, right = 0, len(numbers) - 1 while left < right: # Swap the elements at the left and right indices numbers[left], numbers[right] = numbers[right], numbers[left] # Move the pointers towards the center left += 1 right -= 1"},{"question":"Write a Python code to create a dictionary with keys as integers from 1 to 15, where the values are reversed Roman numerals of the keys. However, for keys that are multiples of 3 or 5, create the values by combining the Roman numerals for 3 and 5 respectively, before reversing them. Note that the Roman numeral for 5 is 'V' and for 3 is 'III'.","solution":"def int_to_roman(num): value_map = [ (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I') ] roman_numeral = \\"\\" for value, symbol in value_map: while num >= value: roman_numeral += symbol num -= value return roman_numeral def create_special_dict(): special_dict = {} for i in range(1, 16): if i % 3 == 0 or i % 5 == 0: if i % 15 == 0: roman_value = int_to_roman(3) + int_to_roman(5) elif i % 3 == 0: roman_value = int_to_roman(3) elif i % 5 == 0: roman_value = int_to_roman(5) else: roman_value = int_to_roman(i) special_dict[i] = roman_value[::-1] return special_dict"},{"question":"Write a Python function that takes in a positive integer and returns the largest prime factor of the number. Make sure to include error handling for non-integer, non-positive, and non-real-number inputs.","solution":"def largest_prime_factor(n): Returns the largest prime factor of the given positive integer n. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") def is_prime(x): if x <= 1: return False for i in range(2, int(x**0.5) + 1): if x % i == 0: return False return True largest_prime = 1 factor = 2 while factor * factor <= n: while n % factor == 0: largest_prime = factor n //= factor factor += 1 if n > 1: largest_prime = n return largest_prime"},{"question":"Enhance the given code snippet for a function that takes a list as input, breaks down its elements into single-character strings, and returns the list of these strings. Also, include an additional function to verify the correctness of the created function using an assert statement. Consider the list [\\"dog\\", \\"cat\\"] as an example, the desired output would be [\\"d\\", \\"o\\", \\"g\\", \\"c\\", \\"a\\", \\"t\\"]. Your solution should aim to increase the complexity incrementally by including several steps of reasoning that wasn't present in the original prompt, make sure to maintain clarity and conciseness.","solution":"def break_down_elements(input_list): Takes a list of strings and breaks down each string into single-character strings, returning a list of these characters. :param input_list: List of strings :return: List of single-character strings result = [] for item in input_list: result.extend(list(item)) return result def verify_break_down_elements(input_list, expected): Verifies the correctness of the break_down_elements function. Asserts that the output matches the expected output. :param input_list: List of strings to be processed :param expected: Expected list of single-character strings result = break_down_elements(input_list) assert result == expected, f\\"Expected {expected}, but got {result}\\""},{"question":"How can I write a function in Python that finds the length of the longest common subsequence (LCS) between two strings?","solution":"def lcs_length(s1, s2): Returns the length of the longest common subsequence between two strings s1 and s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Write a function that utilises list comprehensions to produce a dictionary where the keys are the prime numbers from a given list of numbers and the values are the indices of the primes in the original list. You also need to implement an error handling for cases where the provided list contains non-integer or negative values.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def primes_with_indices(numbers): Returns a dictionary with prime numbers as keys and their indices from the input list as values. if not all(isinstance(num, int) and num > 0 for num in numbers): raise ValueError(\\"The list should only contain positive integers\\") return {num: idx for idx, num in enumerate(numbers) if is_prime(num)}"},{"question":"Create a function that deletes a node in a singly linked list given only access to that node.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def delete_node(node): Delete the given node from the linked list. We are guaranteed that the node to be deleted is not the tail and we begin with access to this node only. if node and node.next: # Copy the next node's value to the current node node.val = node.next.val # Skip over the next node node.next = node.next.next"},{"question":"Given a weighted directed graph, write a Python program to find the shortest paths from the source node to all other nodes using the Dijkstra's algorithm. In addition, you will be provided with an erroneous piece of code implementing the Floyd Warshall Algorithm instead of the Dijkstra's algorithm. You need to identify and correct the errors in it to make it work as required.","solution":"import heapq def dijkstra(graph, start): Implements Dijkstra's algorithm to find the shortest paths from the start node to all other nodes in the graph. Parameters: graph (dict): A dictionary where keys are node names and values are dictionaries of neighboring nodes and their respective edge weights. start: The starting node. Returns: distances (dict): Shortest distances from the start node to each other node. # Initial distance to the start node is 0, and to other nodes is infinity distances = {node: float('inf') for node in graph} distances[start] = 0 # Priority queue to store (distance, node) priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If the popped node distance is greater than the currently known shortest distance, skip it if current_distance > distances[current_node]: continue # Explore neighbors for neighbor, weight in graph[current_node].items(): distance = current_distance + weight # Only consider this new path if it's better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"Defne enumeration values for the months of the year and use them as keys in a dictionary that store some significant dates. Additionally, implement a function that returns the number of days between two given dates using the datetime module.","solution":"from datetime import datetime from enum import Enum class Months(Enum): JANUARY = 1 FEBRUARY = 2 MARCH = 3 APRIL = 4 MAY = 5 JUNE = 6 JULY = 7 AUGUST = 8 SEPTEMBER = 9 OCTOBER = 10 NOVEMBER = 11 DECEMBER = 12 important_dates = { Months.JANUARY: [\\"New Year's Day\\"], Months.FEBRUARY: [\\"Valentine's Day\\"], Months.MARCH: [\\"St. Patrick's Day\\"], Months.APRIL: [\\"Easter\\"], Months.MAY: [\\"Labor Day\\"], Months.JUNE: [\\"Flag Day\\"], Months.JULY: [\\"Independence Day\\"], Months.AUGUST: [\\"Friendship Day\\"], Months.SEPTEMBER: [\\"Labor Day\\"], Months.OCTOBER: [\\"Halloween\\"], Months.NOVEMBER: [\\"Thanksgiving\\"], Months.DECEMBER: [\\"Christmas\\"] } def days_between_dates(date1_str, date2_str): Returns the number of days between two dates in 'YYYY-MM-DD' format. date1 = datetime.strptime(date1_str, \\"%Y-%m-%d\\") date2 = datetime.strptime(date2_str, \\"%Y-%m-%d\\") delta = date2 - date1 return abs(delta.days)"},{"question":"Write a python program to swap the elements at index i and j of list arr without using a temporary variable.","solution":"def swap_elements(arr, i, j): Swaps the elements at index i and j of list arr without using a temporary variable. if i != j: arr[i], arr[j] = arr[j], arr[i] return arr"},{"question":"Implement a function to concatenate two arrays, but you are not allowed to use any built-in array concatenation methods or functions. You must write your own logic to concatenate the arrays. Additionally, the function should also remove any duplicate elements from the resulting concatenated array.","solution":"def concatenate_and_remove_duplicates(arr1, arr2): Concatenates two arrays without using built-in array concatenation methods. Removes duplicate elements from the resulting concatenated array. result = [] seen = set() for item in arr1: if item not in seen: result.append(item) seen.add(item) for item in arr2: if item not in seen: result.append(item) seen.add(item) return result"},{"question":"Create a function to search for an element in a given sorted array and return its index. However, you cannot use any built-in search functions or methods such as \`index()\`, \`find()\`, or \`loc()\`. You must implement your own algorithm to search for the element.","solution":"def binary_search(arr, target): Perform binary search to find the target in the sorted array. Returns the index of target if found, otherwise returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Craft a Python function implementing a recursive strategy to compute the factorial of a specified integer. Be sure to validate the input's eligibility for factorial calculation.","solution":"def factorial(n): Returns the factorial of n using a recursive approach. The function will raise a ValueError if n is not a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a function named \\"round_to_significant\\" that takes two positive floating-point numbers as input: the number to be rounded and the number of significant figures to round to. The function should return the rounded number as a float. The rounding should be done towards the nearest value, with ties rounding away from zero.","solution":"import math def round_to_significant(number: float, sig_figs: int) -> float: Rounds the given number to the specified number of significant figures. Parameters: number (float): The number to be rounded. sig_figs (int): The number of significant figures to round to. Returns: float: The rounded number. if number == 0: return 0.0 # Find the number of decimal places to round to scale = sig_figs - int(math.floor(math.log10(abs(number)))) - 1 rounded_number = round(number, scale) return float(rounded_number)"},{"question":"Please write a Python function that computes the sum of the elements of a given list. However, if 'value' is present in the list, the summing process should stop there and return the sum up to the point where 'value' was encountered. If 'value' is not in the list, it should return the sum of all list elements. In order to verify the correctness of this function, write a test function that uses assert statements with given data points.","solution":"def sum_until_value(lst, value): Compute the sum of the elements of the given list until the specified value is encountered. If the value is not in the list, return the sum of all elements. :param lst: List of numbers to sum. :param value: The stopping value for the sum calculation. :return: The sum of elements up to but not including the specified value, or the end of the list if the value is not present. total = 0 for elem in lst: if elem == value: break total += elem return total"},{"question":"Write a Python function that calculates the sum of each consecutive pair of numbers in a given list, returning a new list of the sums. If the list given is empty or contains only a single element, the function should return an empty list.","solution":"def sum_consecutive_pairs(numbers): Returns a list of sums of each consecutive pair of numbers in the given list. If the list is empty or contains only a single element, returns an empty list. if len(numbers) < 2: return [] return [numbers[i] + numbers[i+1] for i in range(len(numbers) - 1)]"},{"question":"Write a program that can perform element-wise operations on two matrices of different dimensions. The program should be able to handle the following operations: addition, subtraction, multiplication, and division. It should also be able to handle edge cases, such as when one matrix has more rows or columns than the other.","solution":"import numpy as np def pad_matrices(mat1, mat2): Pads the smaller matrix with zeroes to match the dimensions of the larger matrix. rows1, cols1 = mat1.shape rows2, cols2 = mat2.shape rows = max(rows1, rows2) cols = max(cols1, cols2) padded_mat1 = np.zeros((rows, cols)) padded_mat2 = np.zeros((rows, cols)) padded_mat1[:rows1, :cols1] = mat1 padded_mat2[:rows2, :cols2] = mat2 return padded_mat1, padded_mat2 def element_wise_add(mat1, mat2): mat1, mat2 = pad_matrices(np.array(mat1), np.array(mat2)) return mat1 + mat2 def element_wise_subtract(mat1, mat2): mat1, mat2 = pad_matrices(np.array(mat1), np.array(mat2)) return mat1 - mat2 def element_wise_multiply(mat1, mat2): mat1, mat2 = pad_matrices(np.array(mat1), np.array(mat2)) return mat1 * mat2 def element_wise_divide(mat1, mat2): mat1, mat2 = pad_matrices(np.array(mat1), np.array(mat2)) return np.divide(mat1, mat2, out=np.zeros_like(mat1), where=mat2!=0)"},{"question":"I want a topological sort algorithm that returns all possible topological orderings for a given directed acyclic graph (DAG). Can you provide a Python implementation for that? Additionally, I also want to know how to check if a given graph is a DAG.","solution":"from collections import defaultdict, deque def is_dag(graph): Check if the given graph is a Directed Acyclic Graph (DAG). in_degree = {u: 0 for u in graph} for u in graph: for v in graph[u]: in_degree[v] += 1 queue = deque([u for u in graph if in_degree[u] == 0]) count = 0 while queue: u = queue.popleft() count += 1 for v in graph[u]: in_degree[v] -= 1 if in_degree[v] == 0: queue.append(v) return count == len(graph) def all_topological_sorts(graph): Returns all possible topological orderings for the given DAG. in_degree = {u: 0 for u in graph} for u in graph: for v in graph[u]: in_degree[v] += 1 def dfs(path): if len(path) == len(graph): result.append(path) return for u in [u for u in graph if in_degree[u] == 0 and u not in path]: for v in graph[u]: in_degree[v] -= 1 dfs(path + [u]) for v in graph[u]: in_degree[v] += 1 result = [] dfs([]) return result"},{"question":"Develop a DFS algorithm in Python that can find all possible paths from a starting node to a target node in a directed graph.","solution":"def dfs_paths(graph, start, goal): Find all paths from start to goal in the graph using Depth-First Search (DFS). :param graph: Dictionary representing the graph (adjacency list) :param start: The starting node :param goal: The target node :return: A list of lists, with each inner list representing a path from start to goal def dfs(current, path): if current == goal: paths.append(list(path)) return for neighbor in graph.get(current, []): if neighbor not in path: path.append(neighbor) dfs(neighbor, path) path.pop() paths = [] dfs(start, [start]) return paths"},{"question":"Develop a Python script that displays a contraction of a given list into a single value, if the list consists of only one unique element. If the list contains more than one distinct element, the script should return a message claiming \\"List contains more than one distinct element\\". The solution should make use of advanced Python concepts such as iterators, generators, and functools to achieve the goal in a performant manner.","solution":"from functools import reduce def contract_list(lst): Returns the single unique element in the list if all elements are the same. Otherwise, returns a message indicating the list contains more than one distinct element. it = iter(lst) try: first = next(it) except StopIteration: return \\"List is empty\\" if all(element == first for element in it): return first else: return \\"List contains more than one distinct element\\""},{"question":"Create a python program which performs k-medoids clustering on a dataset and outputs the final centroids.","solution":"import numpy as np import random def k_medoids(X, k, max_iterations=100): Performs k-medoids clustering on a dataset X with k clusters. Parameters: X : numpy array of shape (n_samples, n_features) k : int : number of clusters max_iterations : int : maximum number of iterations Returns: medoids : numpy array of shape (k, n_features) m, n = X.shape # Initialize medoids randomly medoids = X[random.sample(range(m), k)] for _ in range(max_iterations): # Assign clusters distances = np.array([[np.sum(np.abs(x_i - m_i)) for m_i in medoids] for x_i in X]) labels = np.argmin(distances, axis=1) # Update medoids new_medoids = np.copy(medoids) for i in range(k): cluster_points = X[labels == i] if len(cluster_points) == 0: continue cost = np.sum(np.abs(cluster_points[:, np.newaxis] - cluster_points[np.newaxis, :]), axis=2).sum(axis=1) new_medoids[i] = cluster_points[np.argmin(cost)] if np.all(medoids == new_medoids): break medoids = new_medoids return medoids"},{"question":"If I have two variables a and b in Python, how can I check if they intersect using set theory? Additionally, can you provide a function that returns the intersecting elements? Also, please explain how the '&' operator works in this context. For the purpose of this question, assume that a and b are lists of integers.","solution":"def find_intersection(a, b): Returns a list of intersecting elements between two lists a and b. # Convert lists to sets set_a = set(a) set_b = set(b) # Find intersection using & operator intersection = set_a & set_b # Convert the result back to a list return list(intersection)"},{"question":"Write a program to sort three numbers in ascending order without using any predefined sort functions. The solution should have a time complexity better than O(n^2). Your program should accept three integers as input and output them in sorted order.","solution":"def sort_three_numbers(a, b, c): This function sorts three numbers in ascending order. It returns a tuple containing the sorted numbers. if a > b: a, b = b, a if b > c: b, c = c, b if a > b: a, b = b, a return (a, b, c)"},{"question":"Design a function to check whether a given set of strings is a palindrome or not. Also, ensure that the function can handle variations in string inputs such as case sensitivity and white spaces, and ignore these in the palindrome check.","solution":"def is_palindrome(s): Check whether the given string s is a palindrome, ignoring case sensitivity and white spaces. # Normalize the input string: remove white spaces and convert to lower case cleaned_string = ''.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned_string == cleaned_string[::-1]"},{"question":"How can I create a function in Python that removes all vowels from a given string?","solution":"def remove_vowels(s): Removes all vowels from the given string. Parameters: s (str): The input string from which vowels need to be removed. Returns: str: The string with vowels removed. vowels = 'aeiouAEIOU' return ''.join([char for char in s if char not in vowels])"},{"question":"Given a list of peoples age, write a python program to calculate the median age. Additionally, implement this without using any built-in functions for calculating the median or sorting the list. Also, write a function that handles any possible exceptions that might occur during the execution of your program, such as non-integer inputs.","solution":"def calculate_median_age(ages): Calculates the median age from a list of ages. Args: ages (list): A list of integer ages. Returns: float: The median age. if not all(isinstance(age, int) for age in ages): raise ValueError(\\"All elements in the list must be integers.\\") n = len(ages) if n == 0: raise ValueError(\\"The list of ages is empty.\\") # Bubble Sort to sort the list for i in range(n): for j in range(0, n-i-1): if ages[j] > ages[j+1]: ages[j], ages[j+1] = ages[j+1], ages[j] # Calculate median if n % 2 == 1: return ages[n//2] else: mid_index = n // 2 return (ages[mid_index - 1] + ages[mid_index]) / 2 def handle_exceptions_calculate_median_age(ages): try: return calculate_median_age(ages) except Exception as e: return str(e)"},{"question":"If I have a list of numbers such as [2, 5, 8, 9, 10, 15], how would I go about extracting and printing the two largest numbers in Python? I'm looking for a solution without using built-in functions like nlargest.","solution":"def find_two_largest(numbers): Extracts and returns the two largest numbers from a list. Parameters: numbers (list): A list of integers. Returns: tuple: A tuple containing the two largest integers in the list. if len(numbers) < 2: raise ValueError(\\"List must contain at least two numbers.\\") # Initialize the two largest numbers first_largest = second_largest = float('-inf') # Iterate through the list to find the two largest numbers for number in numbers: if number > first_largest: second_largest, first_largest = first_largest, number elif number > second_largest: second_largest = number return (first_largest, second_largest)"},{"question":"Write a python code snippet to print the pyramid structure with the given number of lines, where each line consists of consecutive prime numbers.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def generate_prime_pyramid(n): Prints a pyramid structure with n lines, each line consisting of consecutive prime numbers. current_num = 2 for line in range(1, n + 1): primes = [] while len(primes) < line: if is_prime(current_num): primes.append(current_num) current_num += 1 print(\\" \\".join(map(str, primes)))"},{"question":"Given the following code, write a function to validate the input dates are in increasing order. The input dates should be in the format \\"yyyy-mm-dd\\" and should strictly adhere to the Gregorian calendar system. Additionally, the function should check for leap years and consider the number of days in each month accurately. In addition to these requirements, the function should also validate that the input dates are within a specific range, for example, between the year 2000 and the year 2020.","solution":"from datetime import datetime def validate_dates(dates): Validates that the input dates are in increasing order, adhering to the Gregorian calendar system, and are within the years 2000 and 2020. Args: - dates (list of str): List of date strings in \\"yyyy-mm-dd\\" format. Returns: - bool: True if all dates are in increasing order and within the specified year range, False otherwise. if not dates: return False # Check individual dates are within the year range for date in dates: try: parsed_date = datetime.strptime(date, '%Y-%m-%d') except ValueError: return False if not (2000 <= parsed_date.year <= 2020): return False # Check if the dates are in increasing order for i in range(1, len(dates)): if dates[i-1] >= dates[i]: return False return True"},{"question":"Build an algorithm to check if an entered string is a pangram (contains every letter in the alphabet at least once) and also calculate and return the frequency of each letter in the string. As part of your solution, ensure the algorithm handles both upper and lower case letters.","solution":"import string def is_pangram_and_letter_frequency(s): Checks if the input string is a pangram and returns the frequency of each letter. A pangram is a sentence that contains every letter of the alphabet at least once. Parameters: s (str): The input string to check. Returns: tuple: A tuple containing a boolean indicating if the string is a pangram and a dictionary with the frequency of each letter. # Normalize the string to lowercase s = s.lower() # Create a set of all alphabet characters alphabet_set = set(string.ascii_lowercase) # Create a dictionary to store the frequency of each letter letter_frequency = {letter: 0 for letter in alphabet_set} # Compute the frequency of each letter in the string for char in s: if char in alphabet_set: letter_frequency[char] += 1 # Check if the string is a pangram by verifying if all the letters in the alphabet are present in the set of characters of the string is_pangram = all(letter_frequency[char] > 0 for char in alphabet_set) return is_pangram, letter_frequency"},{"question":"Create a function that takes in two dictionaries as parameters. The first dictionary contains string keys and string values, and the second dictionary contains string keys and lists of strings as values. The function should check if the values of the first dictionary are present as elements in the lists of the second dictionary, corresponding to the same key. The function should return a new dictionary with the keys from the first dictionary and boolean values indicating whether the values from the first dictionary are present in the lists of the second dictionary, and also a count of how many times the value is found in the list.","solution":"def check_values_in_lists(dict1, dict2): This function checks if the values of the first dictionary are present as elements in the lists of the second dictionary corresponding to the same key. It returns a new dictionary with the keys from the first dictionary and tuple values which contain a boolean indicating presence and a count of the number of times the value is found in the list. :param dict1: A dictionary with string keys and string values :param dict2: A dictionary with string keys and lists of strings as values :returns: A new dictionary with the keys from dict1 and tuple values result = {} for key, value in dict1.items(): if key in dict2: presence = value in dict2[key] count = dict2[key].count(value) result[key] = (presence, count) else: result[key] = (False, 0) return result"},{"question":"Write a Python program that simultaneously prints two messages on the same line, with their characters interleaved, one by one. Also, include an error handler if the input strings are not of same length. For instance, use the messages: \\"hello\\" and \\"world\\".","solution":"def interleaved_messages(msg1, msg2): Returns a string that interleaves characters from msg1 and msg2. Raises a ValueError if the input messages are not of the same length. if len(msg1) != len(msg2): raise ValueError(\\"Input messages must be of the same length.\\") interleaved = ''.join(a + b for a, b in zip(msg1, msg2)) print(interleaved) return interleaved"},{"question":"Write a program in Python that can identify the largest palindrome made from the product of two two-digit numbers. Your program should not just list a simple multiplication table, but it should perform operations and checks that ensure one that the numbers multiplied are two-digit numbers, and two, that their product is a palindrome, before comparing the products to determine which is the largest. Comment your code properly to ensure understanding of your logic.","solution":"def is_palindrome(n): Returns True if n is a palindrome, otherwise False. return str(n) == str(n)[::-1] def largest_palindrome_product(): Returns the largest palindrome made from the product of two two-digit numbers. max_palindrome = 0 # Iterate through all pairs of two-digit numbers for i in range(10, 100): for j in range(10, 100): product = i * j if is_palindrome(product) and product > max_palindrome: max_palindrome = product return max_palindrome"},{"question":"Create a python function that takes a string of characters as an argument and returns a list of all unique combinations of characters possible, excluding any combination that includes a repeating character. The function should have a time complexity of O(2^n), where n is the length of the input string.","solution":"import itertools def unique_combinations(s): Returns a list of all unique combinations of characters possible, excluding any combination that includes a repeating character. s = ''.join(sorted(set(s))) result = [] for r in range(1, len(s) + 1): combinations = itertools.combinations(s, r) for combo in combinations: result.append(''.join(combo)) return result"},{"question":"Develop a python method to ascertain if a specific coordinate point falls inside or outside a supplied boundary that is outlined by four points. The boundary coordinates should be able to handle both convex and concave shapes. Validate your method by applying a set of given points and boundary coordinates.","solution":"from matplotlib.path import Path def is_point_in_boundary(point, boundary): Determines if a point is inside the boundary outlined by four points. :param point: Tuple of (x, y) :param boundary: List of four points [(x1, y1), (x2, y2), (x3, y3), (x4, y4)] :return: True if the point is inside the boundary, False otherwise path = Path(boundary) return path.contains_point(point)"},{"question":"Write a code to print out all prime numbers between 1 and n without using a loop. You are allowed to use only a single function with recursion.","solution":"def is_prime(num, divisor=2): Helper function to check if a number is prime by recursion. if num <= 1: return False if divisor > num ** 0.5: return True if num % divisor == 0: return False return is_prime(num, divisor + 1) def find_primes(n, current=2, result=None): Recursively finds all prime numbers between 1 and n. if result is None: result = [] if current > n: return result if is_prime(current): result.append(current) return find_primes(n, current + 1, result) def print_primes(n): Prints all prime numbers between 1 and n. primes = find_primes(n) for prime in primes: print(prime)"},{"question":"Develop a Python function that calculates the aggregate of unique elements within a given two-dimensional matrix. The matrix will consist of integer values, both positive and negative. You must also track and output all the unique values encountered in the process.","solution":"def aggregate_unique_elements(matrix): Calculates the aggregate of unique elements within a given two-dimensional matrix and returns the aggregate and the list of unique values encountered. :param matrix: List[List[int]] - A 2D matrix of integers :return: (int, List[int]) - A tuple containing the aggregate of unique elements and the list of unique values unique_elements = set() for row in matrix: for value in row: unique_elements.add(value) aggregate = sum(unique_elements) unique_list = list(unique_elements) return aggregate, unique_list"},{"question":"Given a matrix of m x n elements, write a function that returns the elements of the matrix in a spiral order starting from the top-left corner and in a counterclockwise fashion.","solution":"def spiralOrder(matrix): Given a matrix of m x n elements, return all elements of the matrix in spiral order starting from the top-left corner and in a counterclockwise fashion. def spiral_coords(r1, c1, r2, c2): for c in range(c1, c2 + 1): yield r1, c for r in range(r1 + 1, r2 + 1): yield r, c2 if r1 < r2 and c1 < c2: for c in range(c2 - 1, c1, -1): yield r2, c for r in range(r2, r1, -1): yield r, c1 if not matrix: return [] result = [] r1, r2 = 0, len(matrix) - 1 c1, c2 = 0, len(matrix[0]) - 1 while r1 <= r2 and c1 <= c2: for r, c in spiral_coords(r1, c1, r2, c2): result.append(matrix[r][c]) r1 += 1 r2 -= 1 c1 += 1 c2 -= 1 return result"},{"question":"Given an array and a target number, write a Python function that returns the indices of the two numbers such that they add up to the target.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the array \`nums\` that add up to \`target\`. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return None"},{"question":"Craft a function utilizing Python's versatile generator capability, specifically aiming for an output comprising the initial N digits of the decimal number system (0 through 9) in a backwards order, following an ascending sequence upon doing a rewind. Implement this notion without resorting to array or list storage for the sequentially generated figures, thus putting extra thought into iterative and recursive mechanisms.","solution":"def reverse_digits_generator(n): digit = 9 countdown = n while countdown > 0: if digit >= 0: yield digit digit -= 1 countdown -= 1 else: digit = 9 # Example Usage # gen = reverse_digits_generator(15) # for digit in gen: # print(digit) # => Should print: 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5"},{"question":"Develop a python program that accepts an e-toile as an input and appends it to the phrase \\"La nuit est belle et.\\" The output string should not exceed 30 characters and your code must also include error handling in case the input string is too long.","solution":"def append_phrase(e_toile): Appends the input e-toile to the phrase 'La nuit est belle et', ensuring the total length does not exceed 30 characters. phrase = \\"La nuit est belle et \\" if len(phrase) + len(e_toile) > 30: raise ValueError(\\"Input string is too long.\\") return phrase + e_toile"},{"question":"Write a recursive python function to implement a merge sort that can handle a list of integers and strings separately. The function should recognize the datatype (integer or string) of the elements in the list and sort them accordingly. It should not mix integers and strings in the final sorted list. Additionally, handle possible exceptions for invalid datatypes in the list.","solution":"def merge_sort(arr): Recursively sorts a list of integers or strings. Recognizes datatype (integer or string) and sorts accordingly. Does not mix integers and strings in the final sorted list. Raises ValueError if the list contains mixed or unsupported datatypes. if not arr: # handle empty list return arr # Check datatypes in the list if all(isinstance(x, int) for x in arr): datatype = int elif all(isinstance(x, str) for x in arr): datatype = str else: raise ValueError('List contains mixed or unsupported datatypes.') # Merge sort implementation def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right)"},{"question":"Create an array A of size n=5 and initialize the array with random integers between 1 to 10. Then, write a function to sort this array in descending order. Use a custom comparison function that returns true if the first number is strictly greater than the second number, otherwise returns false. Additionally, the array should be sorted in-place, without creating any additional data structures.","solution":"import random def custom_comparison(a, b): Custom comparison function that returns True if a > b. return a > b def sort_descending(arr): Sorts the array in descending order using the custom comparison function. n = len(arr) for i in range(n): for j in range(0, n-i-1): if not custom_comparison(arr[j], arr[j+1]): arr[j], arr[j+1] = arr[j+1], arr[j] # Create an array A of size 5 and initialize with random integers between 1 and 10 A = [random.randint(1, 10) for _ in range(5)] print(\\"Initial array:\\", A) sort_descending(A) print(\\"Sorted array: \\", A)"},{"question":"Serialize a nested python dictionary into a json string, including handling of non-serializable types and preserving key order. The dictionary may contain data types like sets, tuples, other dictionaries, and custom objects.","solution":"import json from collections import OrderedDict class CustomEncoder(json.JSONEncoder): def default(self, obj): if isinstance(obj, set): return list(obj) if isinstance(obj, tuple): return list(obj) if hasattr(obj, \\"__dict__\\"): return obj.__dict__ return super().default(obj) def serialize_dict(data): Serializes a nested dictionary into a JSON string, handling non-serializable types and preserving key order. return json.dumps(data, cls=CustomEncoder)"},{"question":"Write a python function to implement the bubble sort method to sort a given list of positive integers in increasing order. The function should return the sorted list. The function should also include a check to handle the case where the input list is empty or not a list. Additionally, the function should only use a single for loop and should not use any built-in sorting functions or libraries.","solution":"def bubble_sort(arr): Sorts a list of positive integers in increasing order using bubble sort. if not isinstance(arr, list): return \\"Input is not a list\\" if len(arr) == 0: return \\"List is empty\\" n = len(arr) for i in range(n-1): swapped = False for j in range(n-1-i): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if not swapped: break return arr"},{"question":"Write a function that takes an integer n and prints the n x n grid with stars. Each row of the grid should contain exactly n/2 stars, unless n is odd, in which case the middle row should contain (n/2) + 1 stars. Ensure that the function validates the input to only allow positive even integers greater than 2, and raises a ValueError for invalid input.","solution":"def print_star_grid(n): Prints an n x n grid with stars according to the specified format. Parameters: n (int): The size of the grid. Must be an odd integer > 2. Raises: ValueError: If n is not a positive even integer greater than 2. if not isinstance(n, int) or n <= 2 or n % 2 != 0: raise ValueError(\\"Input must be a positive even integer greater than 2.\\") half_n = n // 2 for i in range(n): if n % 2 != 0 and i == n // 2: print(\\"* \\" * (half_n + 1)) else: print(\\"* \\" * half_n)"},{"question":"Please write a cohesive code block to capture Max, Min and Average of a given list of positive integers. You are not allowed to use any in-built functions for calculating max, min or average. Also, write a function to check the correctness of your written functions for max, min, and average calculation.","solution":"def calculate_max(nums): Returns the maximum value in the list nums. max_val = nums[0] for num in nums: if num > max_val: max_val = num return max_val def calculate_min(nums): Returns the minimum value in the list nums. min_val = nums[0] for num in nums: if num < min_val: min_val = num return min_val def calculate_avg(nums): Returns the average value of the list nums. total = 0 count = 0 for num in nums: total += num count += 1 return total / count def check_calculations(): Checks the correctness of max, min, and average calculations. # Test case 1 nums = [1, 2, 3, 4, 5] max_val = calculate_max(nums) min_val = calculate_min(nums) avg_val = calculate_avg(nums) assert max_val == 5, f\\"Expected 5 but got {max_val}\\" assert min_val == 1, f\\"Expected 1 but got {min_val}\\" assert avg_val == 3, f\\"Expected 3 but got {avg_val}\\" # Test case 2 nums = [10, 20, 30, 40, 50] max_val = calculate_max(nums) min_val = calculate_min(nums) avg_val = calculate_avg(nums) assert max_val == 50, f\\"Expected 50 but got {max_val}\\" assert min_val == 10, f\\"Expected 10 but got {min_val}\\" assert avg_val == 30, f\\"Expected 30 but got {avg_val}\\" return \\"All tests passed!\\" # Example output of checking print(check_calculations())"},{"question":"Write a Python program that reads a text file named 'example.txt' containing multiple lines of text. The program should output a list of the longest word in each line of the file. If more than one word in a line shares the longest length, output all tied words. Assume there will be at least one line, and each line will have at least one word.","solution":"def find_longest_words_in_file(file_path): Reads a text file containing multiple lines of text and returns a list of longest word(s) for each line. If there are ties, returns all the tied words. Args: file_path (str): The path to the text file. Returns: list of list of str: A list of lists where each inner list contains the longest word(s) in a line. longest_words_per_line = [] with open(file_path, 'r') as file: for line in file: words = line.split() if not words: longest_words_per_line.append([]) continue max_length = len(max(words, key=len)) longest_words = [word for word in words if len(word) == max_length] longest_words_per_line.append(longest_words) return longest_words_per_line"},{"question":"Suppose I have a list of N numbers and I want to compute the sum of all possible subarrays of size K. How can I achieve this in an efficient way using Python? Please provide the algorithm and the code.","solution":"def sum_of_subarrays(arr, K): Computes the sum of all possible subarrays of size K. :param arr: List of integers :param K: Size of the subarrays :return: List of sums of each subarray of size K if K > len(arr): return [] result = [] window_sum = sum(arr[:K]) result.append(window_sum) for i in range(len(arr) - K): window_sum = window_sum - arr[i] + arr[i + K] result.append(window_sum) return result"},{"question":"Write a script in Python that can calculate the distance between two points on a 2D plane. Not only should it include the functionality for Euclidean distance, but it should also cover Manhattan distance and consider the special conditions for either. Provide an erroneous piece of code as a reference to understand common pitfalls and to ensure code correctness.","solution":"import math def euclidean_distance(x1, y1, x2, y2): Calculate the Euclidean distance between two points (x1, y1) and (x2, y2). return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) def manhattan_distance(x1, y1, x2, y2): Calculate the Manhattan distance between two points (x1, y1) and (x2, y2). return abs(x1 - x2) + abs(y1 - y2)"},{"question":"Given an array that might contain NULL values and duplicates, write a function in your preferred programming language, let's say Python, that excludes all NULL values, duplicates, and also those numbers that are less than zero. After cleaning up the array, the function should return an array with only positive, non-duplicate numbers.","solution":"def clean_array(arr): This function takes an array that contains NULL values, duplicates, and numbers less than zero, and returns a clean array containing only positive, non-duplicate numbers. cleaned_set = set() for elem in arr: if elem is not None and elem >= 0: cleaned_set.add(elem) return sorted(cleaned_set)"},{"question":"Develop a Python code to sort the provided list of complex numbers in descending order based on their magnitude. Also, implement a binary search function to find a specific complex number in the sorted list. The function should return the index of the complex number if it is found and -1 if it is not in the list.","solution":"def magnitude(complex_number): Returns the magnitude of a complex number. return abs(complex_number) def sort_complex_numbers_desc(complex_numbers): Sorts a list of complex numbers in descending order based on their magnitude. return sorted(complex_numbers, key=magnitude, reverse=True) def binary_search_complex(sorted_complex_numbers, target): Performs binary search to find the index of the target complex number in the sorted list. Returns the index if found; otherwise, returns -1. left, right = 0, len(sorted_complex_numbers) - 1 while left <= right: mid = (left + right) // 2 if sorted_complex_numbers[mid] == target: return mid elif magnitude(sorted_complex_numbers[mid]) < magnitude(target): right = mid - 1 else: left = mid + 1 return -1"},{"question":"Here are two sets of characters: A=\\"1459\\" and B=\\"175\\". Write a Python program to determine whether any character from 'B' exists in 'A'. If any character from 'B' is found in 'A', your program should return True and False if otherwise. Remember, characters in both sets can exist in any order.","solution":"def any_char_in_A_exists_in_B(A, B): Checks if any character from B exists in A. Args: A (str): A string of characters. B (str): Another string of characters. Returns: bool: True if any character from B is found in A, otherwise False. return any(char in A for char in B)"},{"question":"Write a Python program that implements the bubble sort algorithm to sort an array of numbers in ascending order. Additionally, provide a 'visual' representation of intermediate steps using asterisks (*) for each value in the array throughout the sorting process.","solution":"def bubble_sort_visual(arr): Sorts an array of numbers in ascending order using the bubble sort algorithm. Prints visual representation of intermediate steps using asterisks (*) for each value in the array. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] print_visual(arr) return arr def print_visual(arr): Prints the array with each value represented by a number of asterisks (*) equal to its value. for num in arr: print('*' * num) print()"},{"question":"For sorting a given list in decreasing order using Python, write a program implementing the Bubble Sort algorithm. Additionally, modify your program to count the number of comparisons and swaps done during the sorting process. Provide the final sorted list and the number of comparisons and swaps.","solution":"def bubble_sort_decreasing(arr): n = len(arr) comparisons = 0 swaps = 0 for i in range(n): for j in range(0, n-i-1): comparisons += 1 if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swaps += 1 return arr, comparisons, swaps"},{"question":"Write a Python function called fib that receives an integer N and returns the Nth Fibonacci number. The function should have a time complexity of O(log N).","solution":"def fib(N): def matrix_mult(A, B): return [[A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]]] def matrix_pow(mat, p): result = [[1, 0], [0, 1]] base = mat while p > 0: if p % 2 == 1: result = matrix_mult(result, base) base = matrix_mult(base, base) p //= 2 return result if N <= 0: return 0 elif N == 1: return 1 F = [[1, 1], [1, 0]] result_matrix = matrix_pow(F, N - 1) return result_matrix[0][0]"},{"question":"Design an algorithm to determine if two strings are an anagram of one another using only algorithmic concepts and no built-in library functions.","solution":"def are_anagrams(str1, str2): Determine if two strings are anagrams using basic algorithmic concepts. if len(str1) != len(str2): return False char_count = {} # Count characters in str1 for char in str1: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Subtract character counts using str2 for char in str2: if char in char_count: char_count[char] -= 1 else: return False # If all counts are zero, it's an anagram for count in char_count.values(): if count != 0: return False return True"},{"question":"Change the provided code to enable it to show the first n elements of the Fibonacci sequence, where n is a number input by the user. The solution should have a time complexity of O(n) and a space complexity of O(n).","solution":"def fibonacci(n): Returns the first n elements of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Create a function in Python that takes as arguments two strings and returns a boolean indicating whether both strings are equal or not. The function should perform a case-sensitive comparison and consider whitespace characters. In addition, implement functionality to handle Unicode characters in the strings.","solution":"def are_strings_equal(str1, str2): Returns True if both strings are equal, False otherwise. This comparison is case-sensitive and considers whitespace characters. It also supports Unicode characters. Args: str1 (str): The first string to compare. str2 (str): The second string to compare. Returns: bool: True if strings are equal, False otherwise. return str1 == str2"},{"question":"2. You taste refined white sugar in your coffeeledger and wonder if it might be laced with something. Using stdlib, implement a setADT class to store ingredients that might affect the taste of your coffee, your medical history, and ingredients that would set off an alert if found. Implement methods to add, remove, check the presence of an ingredient, and query for medical conditions triggered by ingredients in the set.","solution":"class SetADT: def __init__(self): self.ingredients = set() self.medical_history = set() self.alert_ingredients = set() def add_ingredient(self, ingredient): self.ingredients.add(ingredient) def remove_ingredient(self, ingredient): self.ingredients.discard(ingredient) # discard to prevent KeyError if the element doesn't exist def has_ingredient(self, ingredient): return ingredient in self.ingredients def add_medical_condition(self, ingredient, condition): self.medical_history.add((ingredient, condition)) def check_medical_conditions(self): triggered_conditions = set() for ingredient in self.ingredients: for ing, condition in self.medical_history: if ing == ingredient: triggered_conditions.add(condition) return triggered_conditions def add_alert_ingredient(self, ingredient): self.alert_ingredients.add(ingredient) def check_alert(self): return len(self.ingredients.intersection(self.alert_ingredients)) > 0"},{"question":"Use Python to generate two 5x2000 matrices of random numbers between 0 and 1 for testing the add() method of a class similar to NumPy's. Ensure that all numbers in the matrices have two decimal places. Additionally, write a function to check if the addition operation of the created matrices is commutative and associative.","solution":"import random class MatrixOperations: def add(self, mat1, mat2): # Ensure matrices have the same dimensions if len(mat1) != len(mat2) or len(mat1[0]) != len(mat2[0]): raise ValueError(\\"Matrices must have the same dimensions\\") # Add the two matrices return [[round(mat1[i][j] + mat2[i][j], 2) for j in range(len(mat1[0]))] for i in range(len(mat1))] def generate_random_matrix(rows, cols): return [[round(random.uniform(0, 1), 2) for _ in range(cols)] for _ in range(rows)] def check_commutative(mat1, mat2, operation): result1 = operation.add(mat1, mat2) result2 = operation.add(mat2, mat1) return result1 == result2 def check_associative(mat1, mat2, mat3, operation): result1 = operation.add(operation.add(mat1, mat2), mat3) result2 = operation.add(mat1, operation.add(mat2, mat3)) return result1 == result2"},{"question":"Create a Python function to swap key-value pairs in a dictionary, but only for keys that start with a vowel and values that are prime numbers. The function should also validate the dictionary to ensure that all keys are strings and all values are integers.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def swap_key_value_if_vowel_and_prime(dictionary): Swaps key-value pairs in a dictionary if the keys start with a vowel and values are prime numbers. Validates if all keys are strings and values are integers. Args: dictionary (dict): The input dictionary to process. Returns: dict: A dictionary with swapped key-value pairs based on the rules. if not all(isinstance(k, str) for k in dictionary.keys()): raise ValueError(\\"All keys must be strings.\\") if not all(isinstance(v, int) for v in dictionary.values()): raise ValueError(\\"All values must be integers.\\") vowels = 'AEIOUaeiou' result = {} for k, v in dictionary.items(): if k[0] in vowels and is_prime(v): result[v] = k else: result[k] = v return result"},{"question":"Formulate a regular expression pattern that will accurately match a valid International Mobile Station Equipment Identity (IMEISV), extending the validation to include the Supplementary Code, used by mobile phones, particularly in GSM networks, for identification. This pattern should be able to validate the 16-digit IMEISV, which includes the 15-digit IMEI and the 1-digit Check digit.","solution":"import re def is_valid_imeisv(imeisv): Validates if the input string is a valid IMEISV (International Mobile Station Equipment Identity and Software Version number). An IMEISV is a 16-digit number: 15-digit IMEI + 1-digit Check digit. pattern = r'^d{16}' return bool(re.match(pattern, imeisv))"},{"question":"Given a list of strings of equal length, write a Python code snippet to find the strings that are anagrams of each other. If there are no anagrams in the list, print 'No anagrams found'. You should not use any built-in function to sort the strings or to directly determine if two strings are anagrams.","solution":"def find_anagrams(strings): Finds and returns the list of strings that are anagrams of each other. Args: strings (list of str): List of strings of equal length. Returns: List of lists where each sublist contains strings that are anagrams of each other. If no anagrams are found, returns 'No anagrams found'. def char_count(s): Helper function to count characters in a string count = [0] * 26 # Assumes only lowercase a-z are in the strings for char in s: count[ord(char) - ord('a')] += 1 return count anagrams = {} for string in strings: key = tuple(char_count(string)) if key in anagrams: anagrams[key].append(string) else: anagrams[key] = [string] result = [group for group in anagrams.values() if len(group) > 1] if not result: return 'No anagrams found' return result"},{"question":"How would you modify the Morse code encryption algorithm to include an additional layer of security using a polyalphabetic cipher, and encrypt a message that includes both letters and numbers? Provide code in Python as an example. Specifically, use the Vigenere cipher with a keyword that is a random sequence of uppercase letters, and then encode the message using Morse code with a dit duration of 100 milliseconds and a dah duration of 300 milliseconds.","solution":"import random import string MORSE_CODE_DICT = { 'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----' } def generate_keyword(length): Generates a random keyword of given length. return ''.join(random.choice(string.ascii_uppercase) for _ in range(length)) def vigenere_encrypt(plain_text, keyword): Encrypts plain_text using the Vigenere cipher with the provided keyword. cipher_text = [] keyword_repeated = (keyword * (len(plain_text) // len(keyword))) + keyword[:len(plain_text) % len(keyword)] for p, k in zip(plain_text, keyword_repeated): if p.isalpha(): shift = ord(k.upper()) - ord('A') encrypted_char = chr(((ord(p.upper()) - ord('A') + shift) % 26) + ord('A')) cipher_text.append(encrypted_char) else: cipher_text.append(p) return ''.join(cipher_text) def morse_encode(message): Encodes a message into Morse code with dit duration of 100 milliseconds and dah duration of 300 milliseconds. morse_message = ' '.join(MORSE_CODE_DICT.get(char, '') for char in message if char.isalnum()) return morse_message def encrypt_message(message): Encrypts a message using Vigenere and Morse encoding. keyword = generate_keyword(10) # for example, generating a keyword of length 10 vigenere_cipher_text = vigenere_encrypt(message, keyword) morse_code = morse_encode(vigenere_cipher_text) return keyword, morse_code # Example usage if __name__ == \\"__main__\\": keyword, encrypted_message = encrypt_message(\\"HELLO123\\") print(f\\"Keyword: {keyword}\\") print(f\\"Encrypted Morse Code: {encrypted_message}\\")"},{"question":"In Python, how do you create a function that is capable of handling and addressing different shapes of arrays without prior knowledge about their dimensions? Can this square root finding function be applied to multi-dimensional arrays without manipulating the original data format? Additionally, how can this function be optimized to handle large datasets efficiently, taking into account memory usage and processing time?","solution":"import numpy as np def compute_square_root(arr): Computes the square root of elements in the input array. Parameters: arr (numpy.ndarray): Input array of any shape. Returns: numpy.ndarray: Array of the same shape with the square root of the input elements. result = np.empty_like(arr, dtype=np.float64) np.copyto(result, np.sqrt(arr, where=(arr >= 0)), casting=\\"unsafe\\") return result"},{"question":"How to diff two deserialized JSON structures in Python without using external libraries like jsondiff?","solution":"def diff_dicts(d1, d2): Compute the difference between two dictionaries, including nested dictionaries. Returns a dictionary containing the differences. diff = {} all_keys = set(d1.keys()).union(set(d2.keys())) for key in all_keys: if key in d1 and key not in d2: diff[key] = (\\"removed\\", d1[key]) elif key not in d1 and key in d2: diff[key] = (\\"added\\", d2[key]) elif d1[key] != d2[key]: if isinstance(d1[key], dict) and isinstance(d2[key], dict): nested_diff = diff_dicts(d1[key], d2[key]) if nested_diff: diff[key] = nested_diff else: diff[key] = (\\"modified\\", d1[key], d2[key]) return diff"},{"question":"Create a Python program that will process an HTML string and extract all text inside bold tags.","solution":"from bs4 import BeautifulSoup def extract_bold_text(html_string): Extracts and returns a list of text strings found within <b> tags in the given HTML string. :param html_string: A string containing HTML content :return: A list of strings containing the text inside <b> tags soup = BeautifulSoup(html_string, 'html.parser') bold_texts = [tag.get_text() for tag in soup.find_all('b')] return bold_texts"},{"question":"Human: Write a function that encrypts a string using the Caesar cipher with a given shift.","solution":"def caesar_cipher(text, shift): Encrypts a string using the Caesar cipher with a given shift. :param text: The text to be encrypted. :param shift: The number of positions each character in the text is shifted. :return: The encrypted text. encrypted_text = [] for char in text: if char.isalpha(): shift_amount = 65 if char.isupper() else 97 encrypted_char = chr((ord(char) - shift_amount + shift) % 26 + shift_amount) encrypted_text.append(encrypted_char) else: encrypted_text.append(char) return ''.join(encrypted_text)"},{"question":"Sort the following list of integers in ascending order using the Bubble Sort algorithm in Python: [7, 3, 5, 9, 11, 10]","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the Bubble Sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr # Example usage: sorted_list = bubble_sort([7, 3, 5, 9, 11, 10]) print(sorted_list) # Output should be [3, 5, 7, 9, 10, 11]"},{"question":"In Python, can you suggest a more complex approach to sorting a two-dimensional array based on a specific column index? Assume that the array is of a large scale and sorting is done in ascending and descending orders. Provide an example function that has a nested loop to traverse through the array and sorts the elements based on the specified column index. Additionally, provide a function to test the correctness of your sorting function using a randomly generated 2D array.","solution":"def sort_2d_array(arr, column_index, descending=False): Sorts a 2D array based on a specific column index using a more complex sorting algorithm. Parameters: - arr: 2D list to be sorted - column_index: index of the column based on which the sorting is done - descending: if True, sorts in descending order; otherwise, in ascending order Returns: A sorted 2D list. for i in range(len(arr)): for j in range(0, len(arr) - i - 1): if (descending and arr[j][column_index] < arr[j + 1][column_index]) or (not descending and arr[j][column_index] > arr[j + 1][column_index]): arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"Given a Python program containing a few errors, identify and correct these errors to enable it to create a new dictionary with keys as the integers from 1 to 25 (inclusive) and values as their square roots. Further, the program should also contain a function that modifies this dictionary by replacing the values of all even keys with their cubes instead of square root.","solution":"import math def create_dict(): Creates a dictionary with keys as integers from 1 to 25 and values as their square roots. sqrt_dict = {i: math.sqrt(i) for i in range(1, 26)} return sqrt_dict def modify_dict(d): Replaces the values of all even keys in the dictionary with their cubes. for k in d: if k % 2 == 0: d[k] = k ** 3 return d"},{"question":"Use the re module in Python to write a function that matches a string that has an \\"r\\" followed by any number of characters (including none), followed by an \\"s\\". Also, account for cases where the string may contain more than one occurrence of \\"r\\" followed by \\"s\\" possibly with different numbers of intervening characters.","solution":"import re def find_rs_patterns(text): Finds all occurrences of 'r' followed by any number of characters and then an 's' in the given text. Parameters: text (str): The input string to search in. Returns: list: A list of all matched patterns. pattern = re.compile(r'r.*?s') matches = pattern.findall(text) return matches"},{"question":"Write a function that takes a dictionary and reverses the order of its keys. However, you should not use any built-in functions or methods that directly reverse a sequence, and you are not allowed to use any additional data structures to store intermediate results. You can only modify the original dictionary in place. The function should have a time complexity of O(n), where n is the number of key-value pairs in the dictionary. Additionally, you are not allowed to use any loops or recursion in your solution.","solution":"def reverse_dict_keys_in_place(d): Reverses the order of the dictionary keys in place. keys = list(d.keys()) values = list(d.values()) n = len(keys) for i in range(n): d[keys[i]] = values[n - 1 - i]"},{"question":"Complete the Python program below which prints the minimum value in a list of numbers. Also, consider the scenario where the list might contain duplicate values or be empty. Add comments and error handling.","solution":"def find_minimum(numbers): Returns the minimum value in a list of numbers. :param numbers: List of numbers :return: Minimum number :raises ValueError: If the list is empty if not numbers: raise ValueError(\\"The list is empty\\") min_value = float('inf') for number in numbers: if number < min_value: min_value = number return min_value"},{"question":"Given a list of strings and a single character, write a Python function to return the count of strings containing that character. However, the function should ignore case sensitivity and consider the character in both uppercase and lowercase.","solution":"def count_strings_containing_char(strings, char): Returns the count of strings containing the specified character (ignores case sensitivity). :param strings: List of strings :param char: A single character :return: Count of strings containing the character if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings) or not isinstance(char, str) or len(char) != 1: raise ValueError(\\"Invalid input: 'strings' must be a list of strings and 'char' must be a single character.\\") char_lower = char.lower() count = sum(char_lower in s.lower() for s in strings) return count"},{"question":"In scientific programming with Python, how do I generate a plot of a formula-based function, while ensuring that the plot has at least three different display settings (such as axis labels, title, and legend)? Additionally, overlay a second function on the plot, and set up different display settings for both functions.","solution":"import matplotlib.pyplot as plt import numpy as np def plot_functions(): Generates a plot with two overlayed functions and settings such as axis labels, title, and legend. # Create an array of x values x = np.linspace(-10, 10, 400) # Define two functions y1 = np.sin(x) y2 = np.cos(x) # Create the plot with the first function plt.plot(x, y1, label='sin(x)', color='blue', linestyle='-', linewidth=2) # Overlay the second function plt.plot(x, y2, label='cos(x)', color='red', linestyle='--', linewidth=2) # Set axis labels plt.xlabel('x-axis') plt.ylabel('y-axis') # Set title plt.title('Plot of sin(x) and cos(x)') # Display legend plt.legend() # Show the plot plt.show()"},{"question":"Design a Python function snippet to Transform Extreme Education: Academic Planning for Engineer for Professionals. Implement if/else or switch/case statements to handle different conditions related to the Safety. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def academic_planning_for_engineer(professional_experience, current_knowledge, desired_goal): Function to generate an academic plan for an engineer based on their professional experience, current knowledge, and desired goals. :param professional_experience: int - Number of years of professional experience :param current_knowledge: str - Current level of knowledge (\\"beginner\\", \\"intermediate\\", \\"expert\\") :param desired_goal: str - Desired outcome (\\"academic_degree\\", \\"industry_position\\", \\"research_role\\") :return: str - Suggested academic plan # Handling the safety of the user's information and decision flow # Guard clause for invalid input if not isinstance(professional_experience, int) or professional_experience < 0: return \\"Error: Invalid professional experience provided.\\" if current_knowledge not in [\\"beginner\\", \\"intermediate\\", \\"expert\\"]: return \\"Error: Invalid current knowledge level provided.\\" if desired_goal not in [\\"academic_degree\\", \\"industry_position\\", \\"research_role\\"]: return \\"Error: Invalid desired goal provided.\\" # Determine academic plan based on professional experience if professional_experience < 2: experience_based_recommendation = \\"Consider starting with a solid foundational program.\\" elif 2 <= professional_experience < 5: experience_based_recommendation = \\"Intermediate courses with practical workshops are recommended.\\" else: experience_based_recommendation = \\"Advanced industry-focused or research-oriented programs are suitable.\\" # Determine plan based on current knowledge if current_knowledge == \\"beginner\\": knowledge_based_recommendation = \\"Begin with introductory courses and basic certifications.\\" elif current_knowledge == \\"intermediate\\": knowledge_based_recommendation = \\"Supplement with intermediate certifications and hands-on projects.\\" else: knowledge_based_recommendation = \\"Engage in specialized certifications and leadership seminars.\\" # Determine plan based on desired goal if desired_goal == \\"academic_degree\\": goal_based_recommendation = \\"Enroll in a formal degree program.\\" elif desired_goal == \\"industry_position\\": goal_based_recommendation = \\"Focus on gaining recognized certifications and industry connections.\\" else: goal_based_recommendation = \\"Pursue opportunities in research through advanced studies and collaboration.\\" # Combining all recommendations final_recommendation = ( f\\"{experience_based_recommendation} {knowledge_based_recommendation} {goal_based_recommendation}\\" ) return final_recommendation"},{"question":"Write a python code to find the k-th largest number in an array where k is user input. Also, the implementation should not use Python's built-in functions to sort the list or any external libraries.","solution":"def kth_largest(arr, k): Finds the k-th largest number in an array. for i in range(len(arr)): for j in range(len(arr) - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr[-k]"},{"question":"Given a set of letters, write a Python program to generate all possible permutations of those letters. Additionally, implement a function that filters these permutations based on user-defined conditions such as length of the word, presence of specific letters, or the avoidance of repeated letters. For example, given the string 'GOD', generate all permutations and then filter them based on a condition that the words must be at least four letters long and contain the letter 'A'. Make sure to handle edge cases and document your code for clarity. nnCode Example:nn# Your task is to implement the following functions:nn1. \`generate_permutations(letters: str) -> List[str]\`:n- Input: A string 'letters' containing distinct characters, where 1 <= len(letters) <= 8n- Output: A list of all unique permutations of 'letters'nn2. \`filter_permutations(perms: List[str], minimum_length: int = 1, must_contain: Optional[str] = None, avoid_repeats: bool = False) -> List[str]\`:n- Input:n - A list of strings 'perms'n - An integer 'minimum_length' indicating the minimum length of permutations to include in the outputn - An optional string 'must_contain' indicating a character that each included permutation must haven - A boolean 'avoid_repeats' indicating whether to include words with repeating charactersn- Output: A list of permutations that match the specified conditionsn","solution":"from typing import List, Optional import itertools def generate_permutations(letters: str) -> List[str]: Generate all unique permutations of given letters. Args: letters (str): A string of distinct characters. Returns: List[str]: A list of all unique permutations. return [''.join(p) for p in itertools.permutations(letters)] def filter_permutations(perms: List[str], minimum_length: int = 1, must_contain: Optional[str] = None, avoid_repeats: bool = False) -> List[str]: Filter permutations based on length, specific letters, and avoiding repeats. Args: perms (List[str]): A list of permutations. minimum_length (int): Minimum length of the permutations to include. must_contain (Optional[str]): A character that must be present in the permutations. avoid_repeats (bool): Whether to avoid duplicates in permutations. Returns: List[str]: A list of filtered permutations. filtered = [] for word in perms: if len(word) < minimum_length: continue if must_contain and must_contain not in word: continue if avoid_repeats and len(set(word)) != len(word): continue filtered.append(word) return filtered"},{"question":"Develop a Python program that can effectively determine whether a given number is not a prime number. In addition to the original list of 10 numbers, include the prime numbers 11, 13, and 17 to test the functionality of the program. Additionally, provide a table showing the results of the program's analysis for each number, not only indicating whether it is a prime or not but also specifying which factors were found. The program must ask the user to input the number for analysis instead of hardcoding it.","solution":"def is_not_prime(n): Determines whether a given number n is not a prime number. Returns: - True if n is not a prime number - False if n is a prime number - A list of factors of n if n <= 1: return True, [] if n <= 3: return False, [] if n % 2 == 0 or n % 3 == 0: return True, [i for i in range(1, n + 1) if n % i == 0] i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return True, [i for i in range(1, n + 1) if n % i == 0] i += 6 return False, [] def main(): number = int(input(\\"Enter a number for analysis: \\")) not_prime, factors = is_not_prime(number) if not_prime: print(f\\"The number {number} is NOT a prime number.\\") print(f\\"Factors of {number}: {factors}\\") else: print(f\\"The number {number} is a prime number.\\") print(\\"Factors: 1, itself\\")"},{"question":"Add a requirement to the given prompt that the Python program must also output the number of trees in the landscape, and that the equation used to calculate tree density must be normalized by the number of trees. The landscape is rectangular with a length of 10 km and width of 5 km, and the probability of finding a tree in any given area is 0.5. The program should generate a random landscape and calculate the tree density using both the brute force method and the analytical method, outputting both the image of the landscape and the calculated densities and number of trees in a Jupyter notebook.","solution":"import numpy as np import matplotlib.pyplot as plt def generate_landscape(length_km=10, width_km=5, tree_probability=0.5): Generates a random landscape with given dimensions and tree probability. Parameters: length_km (int): Length of the landscape in kilometers width_km (int): Width of the landscape in kilometers tree_probability (float): Probability of a cell having a tree Returns: np.ndarray: Landscape grid with trees as True and empty cells as False landscape = np.random.rand(length_km, width_km) < tree_probability return landscape def calculate_tree_density_brute_force(landscape): Calculates tree density by counting the number of trees. Parameters: landscape (np.ndarray): Landscape grid with trees as True and empty cells as False Returns: float: Tree density (number of trees per square kilometer) int: Number of trees number_of_trees = np.sum(landscape) area = landscape.shape[0] * landscape.shape[1] tree_density = number_of_trees / area return tree_density, number_of_trees def calculate_tree_density_analytical(tree_probability, length_km=10, width_km=5): Calculates tree density using the analytical method. Parameters: tree_probability (float): Probability of a cell having a tree length_km (int): Length of the landscape in kilometers width_km (int): Width of the landscape in kilometers Returns: float: Tree density (number of trees per square kilometer) int: Expected number of trees area = length_km * width_km expected_number_of_trees = tree_probability * area tree_density = expected_number_of_trees / area return tree_density, int(expected_number_of_trees) def plot_landscape(landscape): Plots the landscape. Parameters: landscape (np.ndarray): Landscape grid with trees as True and empty cells as False plt.imshow(landscape, cmap='Greens', interpolation='none') plt.title('Landscape with Trees') plt.show() # Example usage: landscape = generate_landscape() tree_density_brute_force, number_of_trees = calculate_tree_density_brute_force(landscape) tree_density_analytical, expected_number_of_trees = calculate_tree_density_analytical(0.5) print(f\\"Brute Force Method: Tree Density = {tree_density_brute_force:.2f} trees/km², Number of Trees = {number_of_trees}\\") print(f\\"Analytical Method: Tree Density = {tree_density_analytical:.2f} trees/km², Expected Number of Trees = {expected_number_of_trees}\\") plot_landscape(landscape)"},{"question":"Convert the given list to a new list with all items in the new list multiplied by 2. Also, devise a way so that the code snippet can handle scenarios where the input list may contain strings that can be converted to integers in addition to numeric types. Consider any string that cannot be converted to an integer as invalid, and catch any such exception and print it.","solution":"def multiply_and_convert_list(input_list): Returns a new list with all items from the input list multiplied by 2. Handles strings that can be converted to integers and prints exceptions for invalid strings. output_list = [] for item in input_list: try: output_list.append(2 * int(item)) except ValueError as e: print(f\\"Invalid item '{item}' skipped: {e}\\") return output_list"},{"question":"In Python, write a script that prints out the elements of a list in reverse order, but without using the built-in reverse function or slicing. The list should be provided as input and should contain at least 10 elements. Additionally, the script should handle cases where the input list may contain duplicate elements and should only print unique elements in reverse order. Your solution should have a time complexity of O(n) and a space complexity of O(n).","solution":"def print_reverse_unique(input_list): Prints the elements of input_list in reverse order, but only unique elements. The input_list is expected to have at least 10 elements. unique_elements = set() result = [] for element in input_list: if element not in unique_elements: unique_elements.add(element) result.append(element) for element in reversed(result): print(element)"},{"question":"Write a Python program that calculates the factorial of a given number 'n' using recursion. Additionally, modify this program to calculate the generalized factorial of order 'k', where 'k' is an additional input. The generalized factorial of order 'k' is defined as the product of the numbers from 'n' down to 'n-k'. Also, make sure the program validates the inputs to ensure 'n' and 'k' are both non-negative integers with 'n' >= 'k', otherwise return an appropriate error message.","solution":"def factorial_recursive(n): if n == 0 or n == 1: return 1 return n * factorial_recursive(n - 1) def generalized_factorial(n, k): if not isinstance(n, int) or not isinstance(k, int): return \\"n and k must be integers\\" if n < 0 or k < 0: return \\"n and k must be non-negative\\" if n < k: return \\"n must be greater than or equal to k\\" result = 1 for i in range(n, n-k, -1): result *= i return result"},{"question":"Build a Python boolean parenthesis matcher using a stack-based algorithm. The function should take a string as an argument and return whether or not the parentheses are balanced.","solution":"def is_balanced_parentheses(s): Returns True if the parentheses in the string s are balanced, and False otherwise. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Program a function that takes a list of numbers as an argument, then returns a dictionary which contains the number in the list as a key and its cube root as the value. Additionally, for numbers that are prime, store their square root as the value instead. Ensure that the function is optimized for large lists as well.","solution":"import math def is_prime(n): Check if the number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def calculate_roots(numbers): Returns a dictionary with the given numbers as keys and their cube roots or square roots if they are prime as values. result = {} for num in numbers: if is_prime(num): result[num] = math.sqrt(num) else: result[num] = num ** (1/3) return result"},{"question":"Write a function to compress a string by counting the characters. The function should have a time complexity of O(n) and should not use any built-in functions or libraries for string manipulation.","solution":"def compress_string(s): Compress a string by counting the characters. Example: \\"aabcccccaaa\\" -> \\"a2b1c5a3\\" Args: s (str): The input string to compress. Returns: str: The compressed string. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) compressed.append(str(count)) count = 1 compressed.append(s[-1]) compressed.append(str(count)) compressed_string = ''.join(compressed) return compressed_string"},{"question":"Write a program that takes an unsorted array of integers and returns the median value. Make sure your program properly handles arrays of both even and odd lengths.","solution":"def find_median(arr): Returns the median value of an unsorted array of integers. arr.sort() n = len(arr) middle = n // 2 # If the array length is odd, return the middle element. if n % 2 == 1: return arr[middle] # If the array length is even, return the average of the two middle elements. else: return (arr[middle - 1] + arr[middle]) / 2"},{"question":"Write a Python program to print the multiplication table of a number up to a given range, but only for odd numbers. The program should also calculate and display the sum of all the odd numbers in the multiplication table. Additionally, implement a function to check if a given number is prime and use this function to print the prime numbers in the multiplication table.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def odd_multiplication_table(number, range_upto): Print the multiplication table of 'number' up to 'range_upto' but only for odd multipliers. Also, calculate the sum of all odd numbers in the multiplication table and print any primes. total_sum = 0 primes = [] for i in range(1, range_upto + 1, 2): product = number * i total_sum += product if is_prime(product): primes.append(product) print(f\\"{number} x {i} = {product}\\") print(f\\"Sum of all odd products: {total_sum}\\") if primes: print(f\\"Prime numbers in the table: {primes}\\") else: print(\\"No prime numbers in the table.\\")"},{"question":"Augment the encryption mechanism using the Caesar Cipher, considering the provided code. Create functions to both encrypt messages, shifting letters by a specific number while maintaining letter cases and non-alphabetical characters, and decrypt messages. Ensure the encryption ('encode') and decryption ('decode') functions alter the input string accurately. Confirm your functions' effectiveness by asserting the accuracy of the provided test case.","solution":"def caesar_cipher(text, shift, encrypt=True): Either encrypts or decrypts a given text using Caesar Cipher based on the shift. Parameters: text (str): The input text to encrypt or decrypt. shift (int): The number of positions to shift each letter. encrypt (bool): If True, encrypt the text. If False, decrypt the text. Returns: str: The encrypted or decrypted text. if not encrypt: shift = -shift result = [] for char in text: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') new_char = chr((ord(char) - shift_base + shift) % 26 + shift_base) result.append(new_char) else: result.append(char) return ''.join(result) def encode(text, shift): return caesar_cipher(text, shift, encrypt=True) def decode(text, shift): return caesar_cipher(text, shift, encrypt=False)"},{"question":"Develop a comprehensive Python script that can analyze and interpret a piece of text while defining multiple functions to accurately represent the given information. The text in question is, \\"A structural beam possessing a rectangular profile should not possess dimensions larger than 200mm in breadth, 300mm in depth, and 6000mm in length.\\" Your program must define the beam's profile, dimensions, and constraints, while also ensuring that the values cannot be exceeded. In addition, the program must include a warning system for when the dimensions approach the maximum limit, and an error message that is triggered when the defined values exceed the maximum limit.","solution":"class BeamDimensionError(Exception): pass class BeamDimensions: def __init__(self, breadth, depth, length): self.max_breadth = 200 # in mm self.max_depth = 300 # in mm self.max_length = 6000 # in mm self.breadth = self.validate_dimension(breadth, self.max_breadth, \\"Breadth\\") self.depth = self.validate_dimension(depth, self.max_depth, \\"Depth\\") self.length = self.validate_dimension(length, self.max_length, \\"Length\\") def validate_dimension(self, value, max_value, dimension_name): if value > max_value: raise BeamDimensionError(f\\"Error: {dimension_name} cannot exceed {max_value}mm.\\") elif value > 0.9 * max_value: print(f\\"Warning: {dimension_name} is approaching the maximum limit of {max_value}mm.\\") return value def get_dimensions(self): return self.breadth, self.depth, self.length"},{"question":"Given two strings, haystack and needle, find the starting index of all occurrences of the needle within the haystack, including overlapping occurrences. Note that the needle can also be an empty string, in which case the function should return all possible starting indices in the haystack string.","solution":"def find_all_occurrences(haystack, needle): Given two strings, haystack and needle, find the starting index of all occurrences of the needle within the haystack, including overlapping occurrences. If the needle is an empty string, return all possible starting indices in the haystack string. if needle == \\"\\": return list(range(len(haystack) + 1)) indices = [] start = 0 while True: start = haystack.find(needle, start) if start == -1: break indices.append(start) start += 1 # Move to next potential starting position (for overlapping) return indices"},{"question":"Suppose you encounter a situation where you need to simultaneously modify multiple deeply nested key-value pairs across several dictionaries in Python. Could you devise an optimal function that, given a list of dictionaries and a list of modification operations, applies these operations to the correct keys, even if they are deeply nested, without modifying the original dictionaries? Please also ensure your function handles scenarios where keys in the modification operations do not exist in the dictionaries, and provide a mechanism to add default values in such cases.","solution":"from copy import deepcopy def update_deep(dictionaries, operations): Applies modification operations to a list of dictionaries. Args: dictionaries (list of dict): List of dictionaries to modify. operations (list of tuple): List of operations. Each operation is a tuple with: - list of keys defining the path to the nested value - new value to set - default value to set if the path does not exist Returns: list of dict: New list of dictionaries with operations applied. def modify_nested_dict(d, keys, value, default): current = d for key in keys[:-1]: if key not in current: current[key] = {} current = current[key] current[keys[-1]] = value new_dicts = deepcopy(dictionaries) for d in new_dicts: for keys, value, default in operations: # Apply the operation if keys path exists, otherwise set default current = d exists = True for key in keys: if key in current: current = current[key] else: exists = False break if exists: modify_nested_dict(d, keys, value, value) else: modify_nested_dict(d, keys, default, default) return new_dicts"},{"question":"Write a code to generate a report of all the unique words in a piece of text along with their frequency, but ignore common words such as \\"the\\", \\"and\\", \\"in\\", etc. Additionally, the code should implement a feature to sort the report based on word frequency in descending order.","solution":"def generate_word_frequency_report(text): Generates a report of all the unique words in a piece of text along with their frequency. Common words such as \\"the\\", \\"and\\", \\"in\\" are ignored. The report is sorted based on word frequency in descending order. common_words = {\\"the\\", \\"and\\", \\"in\\", \\"of\\", \\"to\\", \\"a\\", \\"is\\", \\"that\\", \\"with\\", \\"for\\", \\"on\\", \\"as\\", \\"it\\", \\"by\\", \\"was\\", \\"were\\", \\"from\\", \\"at\\", \\"an\\"} # Remove punctuation and convert text to lower case text_cleaned = ''.join(char.lower() if char.isalpha() else ' ' for char in text) # Split the text into words words = text_cleaned.split() # Create a dictionary to store word frequency word_freq = {} for word in words: if word not in common_words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 # Sort the dictionary by frequency in descending order sorted_word_freq = sorted(word_freq.items(), key=lambda item: item[1], reverse=True) return sorted_word_freq"},{"question":"You are currently building a custom deep learning engine. you should build a loss function class that can be used with regression problems. the class should be able to calculate the MAE (mean absolute error) between the predicted values and the actual targets using pytorch . remember that the class should follow the torch.nn.Module interface","solution":"import torch import torch.nn as nn class MAELoss(nn.Module): def __init__(self): super(MAELoss, self).__init__() def forward(self, predictions, targets): return torch.mean(torch.abs(predictions - targets))"},{"question":"Develop a Python function that generates an output sequence that is the reverse of the characters found in a given input string. For instance, if the provided string is 'hello', the function should return 'olleh'.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a REST API endpoint in Python using Flask for creating, retrieving and deleting blog posts. The blog post should have the following fields: title, author, content and date published.","solution":"from flask import Flask, request, jsonify from datetime import datetime app = Flask(__name__) # In-memory store for blog posts blog_posts = [] class BlogPost: def __init__(self, title, author, content, date_published): self.id = len(blog_posts) + 1 self.title = title self.author = author self.content = content self.date_published = date_published @app.route('/posts', methods=['POST']) def create_post(): data = request.get_json() title = data.get('title') author = data.get('author') content = data.get('content') date_published = data.get('date_published') if not title or not author or not content or not date_published: return jsonify({\\"error\\": \\"Missing fields\\"}), 400 new_post = BlogPost(title, author, content, date_published) blog_posts.append(new_post.__dict__) return jsonify(new_post.__dict__), 201 @app.route('/posts', methods=['GET']) def get_posts(): return jsonify(blog_posts), 200 @app.route('/posts/<int:post_id>', methods=['DELETE']) def delete_post(post_id): global blog_posts blog_posts = [post for post in blog_posts if post['id'] != post_id] return jsonify({\\"message\\": \\"Post deleted\\"}), 200 if __name__ == '__main__': app.run(debug=True)"},{"question":"In the Python programming language, formulate a code snippet to return the last ord(), hex(), chr() of a specified alphanumeric character within a certain string. Also, ensure your function handles non-latin characters properly. We can approach this by creating a Python function. This function will iterate through each character in the string, apply the ord() function at each character to get its Unicode code point, and keep updating the 'last' variable with the ord() value of the current character. Finally, after iterating through the string, return the hex() of this 'last' variable (and also convert this hexadecimal representation back to a character using chr(), for comparison purposes). Note that this function will indeed handle non-latin characters, as ord() is applicable on them too.","solution":"def last_char_info(s): Returns the ord value, hex value, and character of the last character in the string. if not s: return None, None, None last_char = s[-1] ord_value = ord(last_char) hex_value = hex(ord_value) chr_value = chr(ord_value) return ord_value, hex_value, chr_value"},{"question":"Write a function to compute the square of a number, but instead of multiplying the number by itself, your function should use recursion to add the number to itself 'n' times, where 'n' is the number itself. In addition to this, plot a graph showcasing the time complexity of your function for numbers ranging from 1 to 100.","solution":"def square(n, current_sum=0, count=None): Compute the square of n using recursion to add the number to itself n times. :param n: Number to be squared :param current_sum: Accumulator for the sum :param count: Decremental counter to stop recursion :return: The square of n if count is None: count = n if count == 0: return current_sum return square(n, current_sum + n, count - 1) # Plotting time complexity graph import time import matplotlib.pyplot as plt def plot_time_complexity(): times = [] numbers = range(1, 101) for number in numbers: start_time = time.time() square(number) end_time = time.time() times.append(end_time - start_time) plt.plot(numbers, times) plt.xlabel('Number') plt.ylabel('Time (seconds)') plt.title('Time Complexity of Recursive Square Function') plt.show()"},{"question":"Write a method in Python that uses recursion to find the sum of all digits of a given number. Additionally, implement a check function to validate your solution with multiple test cases.","solution":"def sum_of_digits(n): Returns the sum of all digits of a given number n using recursion. Parameters: n (int): A non-negative integer Returns: int: Sum of the digits of n if n == 0: return 0 return n % 10 + sum_of_digits(n // 10)"},{"question":"Create a simple Snake game using the curses library in Python.","solution":"import curses import random def main(stdscr): Simple Snake game implementation using the curses library. # Initialize curses curses.curs_set(0) stdscr.nodelay(1) stdscr.timeout(100) sh, sw = stdscr.getmaxyx() w = curses.newwin(sh, sw, 0, 0) # Initial snake position snk_x = sw//4 snk_y = sh//2 snake = [ [snk_y, snk_x], [snk_y, snk_x-1], [snk_y, snk_x-2] ] # Initial food position food = [sh//2, sw//2] w.addch(food[0], food[1], curses.ACS_PI) # Initial direction key = curses.KEY_RIGHT while True: next_key = w.getch() key = key if next_key == -1 else next_key if snake[0][0] in [0, sh] or snake[0][1] in [0, sw] or snake[0] in snake[1:]: curses.endwin() quit() new_head = [snake[0][0], snake[0][1]] if key == curses.KEY_DOWN: new_head[0] += 1 if key == curses.KEY_UP: new_head[0] -= 1 if key == curses.KEY_RIGHT: new_head[1] += 1 if key == curses.KEY_LEFT: new_head[1] -= 1 snake.insert(0, new_head) if snake[0] == food: food = None while food is None: nf = [ random.randint(1, sh-1), random.randint(1, sw-1) ] food = nf if nf not in snake else None w.addch(food[0], food[1], curses.ACS_PI) else: tail = snake.pop() w.addch(tail[0], tail[1], ' ') w.addch(snake[0][0], snake[0][1], curses.ACS_CKBOARD) if __name__ == \\"__main__\\": curses.wrapper(main)"},{"question":"Write a Python function that takes an array of strings and returns a dictionary where the keys are the unique strings from the array and the values are the number of occurrences of each string.","solution":"def count_occurrences(strings): Returns a dictionary where the keys are the unique strings from the input array and the values are the number of occurrences of each string. :param strings: list of strings :return: dictionary with string occurrences occurrence_dict = {} for string in strings: if string in occurrence_dict: occurrence_dict[string] += 1 else: occurrence_dict[string] = 1 return occurrence_dict"},{"question":"Build a basic calculator using Python with functionality to add, subtract, multiply, divide, and take the square root of input numbers.","solution":"import math def add(a, b): Returns the sum of a and b. return a + b def subtract(a, b): Returns the difference of a and b. return a - b def multiply(a, b): Returns the product of a and b. return a * b def divide(a, b): Returns the quotient of a and b. Raises an exception if b is zero. if b == 0: raise ValueError(\\"Cannot divide by zero.\\") return a / b def square_root(a): Returns the square root of a. Raises an exception if a is negative. if a < 0: raise ValueError(\\"Cannot take the square root of a negative number.\\") return math.sqrt(a)"},{"question":"Create a Python regex pattern to match a valid IP address and also differentiate between public and private IP addresses. Provide detailed explanation of each portion of your regex pattern. Further, write a Python function that will use this regex not only to validate the IP addresses from given list but also classify them as public or private.","solution":"import re def classify_ip(ip_list): Classify IP addresses from a given list into public or private using regex. Args: ip_list (list): List of IP addresses in string format Returns: dict: Dictionary with 'public' and 'private' keys having list of corresponding IPs # Define regex pattern for IP addresses ip_pattern = re.compile( r'^(' # 1-9 or 10-99 or 100-199 or 200-249 r'(?:(?:[1-9])|(?:[1-9][0-9])|(?:1[0-9]{2})|(?:2[0-4][0-9]))|' # 250-255 r'(?:25[0-5])' r').(?:(?:25[0-5])|(?:(?:1[0-9]{2})|(?:2[0-4][0-9])|(?:[0-9]{1,2})))' r'.(?:(?:25[0-5])|(?:(?:1[0-9]{2})|(?:2[0-4][0-9])|(?:[0-9]{1,2})))' r'.(?:(?:25[0-5])|(?:(?:1[0-9]{2})|(?:2[0-4][0-9])|(?:[0-9]{1,2})))' ) private_pattern = re.compile( r'^(?:' # 10.0.0.0 - 10.255.255.255 r'10(?:.[0-9]{1,3}){3}|' # 172.16.0.0 - 172.31.255.255 r'172.(?:1[6-9]|2[0-9]|3[0-1])(?:.[0-9]{1,3}){2}|' # 192.168.0.0 - 192.168.255.255 r'192.168(?:.[0-9]{1,3}){2}' r')' ) classified_ips = {'public': [], 'private': []} for ip in ip_list: if ip_pattern.match(ip): if private_pattern.match(ip): classified_ips['private'].append(ip) else: classified_ips['public'].append(ip) return classified_ips"},{"question":"Write a code snippet that deletes all elements from a doubly linked list, but also ensure that the code snippet has a time complexity of O(n) and a space complexity of O(1), where n is the number of elements in the doubly linked list.","solution":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if self.head is None: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node new_node.prev = last def delete_all(self): current = self.head while current: next_node = current.next current.prev = None current.next = None current = next_node self.head = None"},{"question":"Write a Python function that takes two strings as input and returns the longest common prefix between them.","solution":"def longest_common_prefix(str1, str2): Returns the longest common prefix between two strings. min_length = min(len(str1), len(str2)) for i in range(min_length): if str1[i] != str2[i]: return str1[:i] return str1[:min_length]"},{"question":"Develop a Python script that finds all files in a given directory and its subdirectories that contain a specific regular expression pattern. The script should take the directory path and the regular expression pattern as command-line arguments and print the paths of the matching files. PLAINFORMAT","solution":"import os import re import sys def find_files_with_pattern(directory, pattern): Finds and prints the paths of all files in the given directory and its subdirectories that contain the specified regular expression pattern. Args: - directory: The base directory to search. - pattern: The regular expression pattern to search for in files. compiled_pattern = re.compile(pattern) matching_files = [] for root, _, files in os.walk(directory): for file in files: file_path = os.path.join(root, file) try: with open(file_path, 'r') as f: contents = f.read() if compiled_pattern.search(contents): matching_files.append(file_path) except (IOError, UnicodeDecodeError): # Skip files that cannot be read or are not properly encoded continue for file in matching_files: print(file) if __name__ == \\"__main__\\": if len(sys.argv) != 3: print(\\"Usage: python script.py <directory_path> <regex_pattern>\\") else: directory_path = sys.argv[1] regex_pattern = sys.argv[2] find_files_with_pattern(directory_path, regex_pattern)"},{"question":"Write a function that verifies the correctness of a binary search tree. Raise a custom exception if the tree is not valid.","solution":"class InvalidBSTException(Exception): pass class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(node, left=float('-inf'), right=float('inf')): if node is None: return True if not (left < node.val < right): raise InvalidBSTException(\\"The tree is not a valid Binary Search Tree\\") return (is_valid_bst(node.left, left, node.val) and is_valid_bst(node.right, node.val, right))"},{"question":"Write a code to find the maximum graceful rotation for a binary tree. Additionally, provide an analysis on how incorporating a nxn matrix would significantly affect computer memory and processing time.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_max_graceful_rotation(root): if root is None: return 0 def height(node): if node is None: return 0 return 1 + max(height(node.left), height(node.right)) left_height = height(root.left) right_height = height(root.right) return 1 + max(find_max_graceful_rotation(root.left), find_max_graceful_rotation(root.right)) # Analysis: # Incorporating an nxn matrix significantly affects computer memory and processing time. # - Memory: For an nxn matrix, memory usage is O(n^2). Each element takes up space, and as n increases, the memory needed for storage increases quadratically. # - Processing Time: Many operations on an nxn matrix, like matrix multiplication, require O(n^3) time. This cubic time complexity can make processing very slow as n becomes large."},{"question":"Develop a Python program to fabricate a sequence encompassing single-digit binary numbers(0s and 1s) in a pseudo-random manner, using random as the base module. This sequence, however, should strictly adhere to a pre-defined length supplied by the user at the start.","solution":"import random def generate_binary_sequence(length): Generates a pseudo-random sequence of binary digits (0 and 1) of a given length. :param length: The length of the binary sequence :type length: int :return: A string representing the binary sequence :rtype: str return ''.join(random.choice('01') for _ in range(length))"},{"question":"Given a string s and an array of strings arr, find all anagrams of the string s in the array.","solution":"def find_anagrams(s, arr): Returns a list of all strings in arr that are anagrams of the string s. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. from collections import Counter def is_anagram(word1, word2): return Counter(word1) == Counter(word2) s_counter = Counter(s) return [word for word in arr if is_anagram(word, s)]"},{"question":"Write a Python function \`listLengths\` that takes a list of words and returns a list of the lengths of those words.","solution":"def listLengths(words): Returns a list of the lengths of the given words. :param words: list of words :return: list of lengths of the words return [len(word) for word in words]"},{"question":"Write a code to generate the first n Fibonacci numbers.","solution":"def fibonacci(n): Generate the first n Fibonacci numbers. :param n: number of Fibonacci numbers to generate :return: list of the first n Fibonacci numbers if n <= 0: return [] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence[:n]"},{"question":"Create a program to check if two binary trees are identical in structure and have the same values in each corresponding node.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_identical(tree1, tree2): Check if two binary trees are identical in structure and have the same values in each node. :param tree1: TreeNode, the root of the first tree to be compared :param tree2: TreeNode, the root of the second tree to be compared :return: bool, True if both trees are identical, False otherwise # Both trees are empty if tree1 is None and tree2 is None: return True # One tree is empty and the other is not if tree1 is None or tree2 is None: return False # Both trees are not empty, check if the current nodes are identical and recursively check their left and right subtrees return (tree1.val == tree2.val and is_identical(tree1.left, tree2.left) and is_identical(tree1.right, tree2.right))"},{"question":"Develop a Python code that not only monitors the accessibility of items within a given deadline, but also considers the priority of the items in the queue. Apart from this, implement a function to ascertain the status of the deadline for any particular item in the queue.","solution":"import heapq from datetime import datetime, timedelta class PriorityQueue: def __init__(self): self.heap = [] self.count = 0 def add_item(self, item, priority, deadline): Add an item with priority and deadline to the queue heapq.heappush(self.heap, (-priority, self.count, item, deadline)) self.count += 1 def pop_item(self): Remove and return the highest priority item from the queue if self.heap: return heapq.heappop(self.heap)[2:4] return None def check_deadline(self, item): Check the deadline status of a particular item for priority, count, queue_item, deadline in self.heap: if queue_item == item: current_time = datetime.now() if current_time > deadline: return \\"Deadline missed\\" else: return f\\"Deadline in {(deadline - current_time).total_seconds()} seconds\\" return \\"Item not found in queue\\" # Usage Example: # Priority Queue instance pq = PriorityQueue() # Adding items with (item, priority, deadline) pq.add_item(\\"Item 1\\", 2, datetime(2023, 10, 15, 12, 0, 0)) pq.add_item(\\"Item 2\\", 1, datetime(2023, 10, 14, 12, 0, 0)) # Retrieving item based on priority print(pq.pop_item()) # Checking deadline status of an item print(pq.check_deadline(\\"Item 1\\"))"},{"question":"Craft a function that metamorphoses a linked list into a binary search tree (BST), ensuring the final output adheres to the BST data structure. This function should possess the capability to handle nested linked lists and transform them into nested BSTs. It should also be adept at dealing with a mix of linked lists and other data types within the same BST.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sortedListToBST(head): Converts a sorted linked list into a height balanced BST. def mapListToValues(head): vals = [] while head: vals.append(head.val) head = head.next return vals def sortedArrayToBST(nums): if not nums: return None mid = len(nums) // 2 node = TreeNode(nums[mid]) node.left = sortedArrayToBST(nums[:mid]) node.right = sortedArrayToBST(nums[mid+1:]) return node if head is None: return None vals = mapListToValues(head) return sortedArrayToBST(vals)"},{"question":"Create a python program to calculate the intersection and union of two given lists. The program should also handle cases where the lists contain duplicate elements, and it should remove any duplicates from the result. The program should also return the unique elements present in both lists.","solution":"def intersection_union_unique(list1, list2): Given two lists, returns a dictionary with three keys: - 'intersection': the set intersection of the two lists - 'union': the set union of the two lists - 'unique': the set of unique elements from both lists Duplicates in the individual lists are removed before computation. set1 = set(list1) set2 = set(list2) intersection = set1 & set2 union = set1 | set2 return { 'intersection': intersection, 'union': union, 'unique': union # In this context, union represents all unique elements }"},{"question":"Please write a Python program to generate a list of all the weekdays (Monday to Friday) for a given month and year, excluding weekends. The program should also calculate and display the number of weekdays present in that month.","solution":"import calendar def get_weekdays_of_month(year, month): Returns a list of all the weekdays (Monday to Friday) for a given month and year, excluding weekends. :param year: int, the year to calculate weekdays for :param month: int, the month to calculate weekdays for :return: list of tuples, each containing the weekday in format (year, month, day) and an integer representing the count of weekdays in the given month weekdays = [] days_in_month = calendar.monthrange(year, month)[1] # Get number of days in the month for day in range(1, days_in_month + 1): week_day = calendar.weekday(year, month, day) if week_day < 5: # 0 is Monday, 4 is Friday weekdays.append((year, month, day)) return weekdays, len(weekdays)"},{"question":"Create a complex XML document representing a library with five book elements, each with unique attributes including title, author, year of publication, and genre. Add functionality to modify, delete, and add new books to the library XML. Also add XML namespaces where applicable and use XML schema to define rules for the document structure.","solution":"import xml.etree.ElementTree as ET NAMESPACE = { 'lib': 'http://example.com/library' } ET.register_namespace('lib', 'http://example.com/library') def create_library(): library = ET.Element('{http://example.com/library}library') books = [ {\\"title\\": \\"Book One\\", \\"author\\": \\"Author A\\", \\"year\\": \\"2001\\", \\"genre\\": \\"Fiction\\"}, {\\"title\\": \\"Book Two\\", \\"author\\": \\"Author B\\", \\"year\\": \\"2002\\", \\"genre\\": \\"Non-Fiction\\"}, {\\"title\\": \\"Book Three\\", \\"author\\": \\"Author C\\", \\"year\\": \\"2003\\", \\"genre\\": \\"Fantasy\\"}, {\\"title\\": \\"Book Four\\", \\"author\\": \\"Author D\\", \\"year\\": \\"2004\\", \\"genre\\": \\"Science Fiction\\"}, {\\"title\\": \\"Book Five\\", \\"author\\": \\"Author E\\", \\"year\\": \\"2005\\", \\"genre\\": \\"Mystery\\"} ] for book in books: book_element = ET.SubElement(library, '{http://example.com/library}book') for key, value in book.items(): book_element.set(key, value) tree = ET.ElementTree(library) tree.write(\\"library.xml\\", xml_declaration=True, encoding='utf-8', method=\\"xml\\") def add_book(title, author, year, genre): tree = ET.parse('library.xml') root = tree.getroot() new_book = ET.SubElement(root, '{http://example.com/library}book') new_book.set(\\"title\\", title) new_book.set(\\"author\\", author) new_book.set(\\"year\\", year) new_book.set(\\"genre\\", genre) tree.write(\\"library.xml\\", xml_declaration=True, encoding='utf-8', method=\\"xml\\") def modify_book(title, new_author=None, new_year=None, new_genre=None): tree = ET.parse('library.xml') root = tree.getroot() for book in root.findall('lib:book', NAMESPACE): if book.get(\\"title\\") == title: if new_author: book.set(\\"author\\", new_author) if new_year: book.set(\\"year\\", new_year) if new_genre: book.set(\\"genre\\", new_genre) tree.write(\\"library.xml\\", xml_declaration=True, encoding='utf-8', method=\\"xml\\") def delete_book(title): tree = ET.parse('library.xml') root = tree.getroot() for book in root.findall('lib:book', NAMESPACE): if book.get(\\"title\\") == title: root.remove(book) tree.write(\\"library.xml\\", xml_declaration=True, encoding='utf-8', method=\\"xml\\") if __name__ == \\"__main__\\": create_library()"},{"question":"Write a python function to determine if a number is Happy using a Set. Incorporate error handling for non-numeric inputs and floating point numbers.","solution":"def is_happy_number(n): Determines if the number n is a happy number using a set to track seen sums of squares. A happy number is defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers. Parameters: n (int): the number to check Returns: bool: True if n is a happy number, False otherwise. Raises: ValueError: If the input number is not an integer or is a floating point number. if not isinstance(n, int) or isinstance(n, bool): raise ValueError(\\"Input must be an integer\\") if n <= 0: raise ValueError(\\"Input must be a positive integer\\") seen = set() while n != 1 and n not in seen: seen.add(n) n = sum(int(char) ** 2 for char in str(n)) return n == 1"},{"question":"Create function named \\"format_number\\" that takes a number as an argument and returns a string that represents the number in a specific format.","solution":"def format_number(number): Return a string that represents the number in a specific format with commas separating thousands. Parameters: number (int or float): The number to be formatted. Returns: str: The formatted number as a string. return \\"{:,}\\".format(number)"},{"question":"Create a method to generate a random prime number between 1 and 1000 in Python.","solution":"import random def is_prime(n): Check if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_random_prime(): Generates a random prime number between 1 and 1000. primes = [i for i in range(1, 1001) if is_prime(i)] return random.choice(primes)"},{"question":"Given a URL as a string, write a python function to extract the domain from it. The domain is the part of the URL that comes after 'https://' or 'http://' (if present) and before any '/' (if present). If the input URL does not begin with 'http://' or 'https://', treat it as if it begins with 'http://'. If the input URL does not contain any domain, return an empty string.","solution":"def extract_domain(url): Extracts the domain from a given URL string. if not url.startswith('http://') and not url.startswith('https://'): url = 'http://' + url if '://' in url: url = url.split('://')[1] domain = url.split('/')[0] return domain"},{"question":"Please implement a random number seed function for the following code and ensure that the generated seed is between 0 and 100 (inclusive). Additionally, the generated seed must be a prime number.","solution":"import random def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_prime_seed(): Generate a prime seed between 0 and 100 (inclusive). primes = [i for i in range(101) if is_prime(i)] return random.choice(primes)"},{"question":"Develop a function that accepts a CSV file containing complex numbers. The function should return the product of the elements in the form of a complex number. Additionally, incorporate error handling for cases where the input is not valid complex numbers, the CSV file cannot be accessed, or the file is empty. Also, ensure that your function can handle and accurately calculate product for large inputs.","solution":"import csv import cmath def complex_product_from_csv(file_path): Reads a CSV file containing complex numbers and returns their product as a complex number. If an error occurs during operation (e.g., invalid numbers, file issues), appropriate exception is raised. :param file_path: str, path to the CSV file :return: complex, product of the complex numbers in the file try: with open(file_path, newline='') as csvfile: reader = csv.reader(csvfile) number_list = [] for row in reader: if len(row) != 1: raise ValueError(\\"CSV should contain one complex number per row\\") number_list.append(complex(row[0])) if not number_list: raise ValueError(\\"CSV is empty\\") product_result = complex(1, 0) for number in number_list: product_result *= number return product_result except FileNotFoundError: raise FileNotFoundError(\\"The file could not be found.\\") except OSError: raise OSError(\\"An issue occurred trying to read the file.\\") except ValueError as ve: raise ValueError(f\\"Invalid value encountered: {ve}\\")"},{"question":"What string method can be used to remove all occurrences of a specific character from a given string in Python, while maintaining the original order of the remaining characters, and also ensuring that the removed character is not a part of any word in the string?","solution":"def remove_char(s, char): Removes all occurrences of char from string s, maintaining the original order. return s.replace(char, '')"},{"question":"Write scripts which receive the strings 'A', 'B', 'C', 'D', 'E', or 'F' and prints the bits '00', '01', '10', '11', '000', or '001' related to that string respectively.","solution":"def char_to_bits(char): Returns the bit representation of the given character. Parameters: char (str): A single character which can be 'A', 'B', 'C', 'D', 'E', or 'F'. Returns: str: Bit representation of the given character. Raises: ValueError: If the input character is not one of 'A', 'B', 'C', 'D', 'E', 'F'. bit_dict = { 'A': '00', 'B': '01', 'C': '10', 'D': '11', 'E': '000', 'F': '001' } if char in bit_dict: return bit_dict[char] else: raise ValueError(f\\"Invalid character {char}. Expected one of 'A', 'B', 'C', 'D', 'E', 'F'.\\")"},{"question":"Develop a one-dimensional array_manipulation function that accepts two arguments: a source one-dimensional array and a set of indices. The function should yield a modified version of the source array, where not only are the elements at the provided indices removed, but also shifted and substituted by the element just before them without using built-in functions. Important to note that the elements before them should fill up the dropped positions while maintaining the order of other elements.","solution":"def array_manipulation(arr, indices): Modifies the source array by removing elements at the specified indices. Elements before them should fill up the dropped positions while maintaining the order of other elements. :param arr: List of integers, the source array. :param indices: Set of integers, the indices to be removed. :return: Modified list of integers. # We first create a list of shifted elements new_arr = [] for i in range(len(arr)): if i not in indices: new_arr.append(arr[i]) return new_arr"},{"question":"Write a code that not only swaps the places of two elements in a list but also returns the number of operations it took to do so. You're not allowed to use Python's inbuilt swap function or any direct swap methods. Instead, use elementary arithmetic operations and/or temporary variables. Also, deal with edge cases like if the provided indices are out of range or if one or both of the indices are not integers.","solution":"def swap_elements(arr, index1, index2): Swaps elements at index1 and index2 in the list \`arr\` and returns the number of operations it took. if (not isinstance(index1, int)) or (not isinstance(index2, int)): return arr, 0 if index1 < 0 or index2 < 0 or index1 >= len(arr) or index2 >= len(arr): return arr, 0 operations = 0 # Using a temporary variable to swap temp = arr[index1] operations += 1 arr[index1] = arr[index2] operations += 1 arr[index2] = temp operations += 1 return arr, operations"},{"question":"Develop a method that incorporates an advanced technique for handling an unordered data set while isolating unique elements. Your solution should implement a self-balancing Binary Search Tree (BST) from scratch. The data set will be a mixed array of integers that may have duplicates.","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None self.height = 1 # For maintaining balance in AVL tree class AVLTree: def getHeight(self, root): if not root: return 0 return root.height def getBalance(self, root): if not root: return 0 return self.getHeight(root.left) - self.getHeight(root.right) def rightRotate(self, y): x = y.left T2 = x.right x.right = y y.left = T2 y.height = 1 + max(self.getHeight(y.left), self.getHeight(y.right)) x.height = 1 + max(self.getHeight(x.left), self.getHeight(x.right)) return x def leftRotate(self, x): y = x.right T2 = y.left y.left = x x.right = T2 x.height = 1 + max(self.getHeight(x.left), self.getHeight(x.right)) y.height = 1 + max(self.getHeight(y.left), self.getHeight(y.right)) return y def insert(self, root, key): if not root: return TreeNode(key) elif key < root.key: root.left = self.insert(root.left, key) elif key > root.key: root.right = self.insert(root.right, key) else: return root # Duplicates are not inserted root.height = 1 + max(self.getHeight(root.left), self.getHeight(root.right)) balance = self.getBalance(root) # Left Left Case if balance > 1 and key < root.left.key: return self.rightRotate(root) # Right Right Case if balance < -1 and key > root.right.key: return self.leftRotate(root) # Left Right Case if balance > 1 and key > root.left.key: root.left = self.leftRotate(root.left) return self.rightRotate(root) # Right Left Case if balance < -1 and key < root.right.key: root.right = self.rightRotate(root.right) return self.leftRotate(root) return root def inorder_traversal(self, root, result): if root: self.inorder_traversal(root.left, result) result.append(root.key) self.inorder_traversal(root.right, result) def unique_elements(data): tree = AVLTree() root = None for item in data: root = tree.insert(root, item) result = [] tree.inorder_traversal(root, result) return result"},{"question":"Develop a function to find the second largest number in a given list of integers without sorting the list first. Also, write test cases to understand if the function you created works as expected.","solution":"def find_second_largest(numbers): Finds the second largest number in a given list of integers. :param numbers: List of integers :return: The second largest integer in the list if len(numbers) < 2: raise ValueError(\\"At least two numbers are required\\") first, second = float('-inf'), float('-inf') for num in numbers: if num > first: second = first first = num elif first > num > second: second = num if second == float('-inf'): raise ValueError(\\"No second largest element found\\") return second"},{"question":"Write a boolean function that takes a character as input and returns true if it's a lowercase English letter.","solution":"def is_lowercase(char): Returns True if the character is a lowercase English letter, otherwise False. return 'a' <= char <= 'z'"},{"question":"Create a lookup function in Python that retrieves a value from a dictionary given a specific key. However, there's a catch - you need to implement the lookup function without using any built-in dictionary methods such as \`get()\`, \`__getitem__()\`, or any form of direct key access using square brackets.","solution":"def lookup(dictionary, key): Retrieves the value from the dictionary given a specific key without using any built-in dictionary methods or direct key access. for k, v in dictionary.items(): if k == key: return v return None # Or raise an exception if key is not found"},{"question":"Write a Python function to split a string into a list of strings, separated by a given delimiter.","solution":"def split_string(input_string, delimiter): Splits the input_string into a list of strings separated by the given delimiter Parameters: input_string (str): The string to be split delimiter (str): The character by which to split the string Returns: list: A list of strings split by the delimiter return input_string.split(delimiter)"},{"question":"Construct a Python function designed to sort a four-dimensional array considering the numerical significance of the tertiary element in every subordinate array within. The function should also include a secondary sorting mechanism to order the arrays that have the same value in the third position. This should be done on the basis of the fourth element in descending order.","solution":"def sort_four_dimensional_array(arr): Sorts a four-dimensional array based on the third element of the sub-arrays, and if they are equal, sorts based on the fourth element in descending order. Parameters: arr (list of list of list of list): The four-dimensional array to be sorted. Returns: list of list of list of list: The sorted four-dimensional array. return sorted(arr, key=lambda x: (x[2], -x[3]))"},{"question":"Create a program in Python to print all prime numbers between two given values. The program should include error handling to ensure that the user enters valid integer inputs for the two values. If the user enters non-integer values or negative numbers, the program should display an appropriate error message and prompt the user to enter valid inputs. Additionally, the program should use a function to check if a number is prime or not, and only print the prime numbers within the given range.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def print_primes_between(start, end): Print all prime numbers between two given values. try: start = int(start) end = int(end) if start < 0 or end < 0: raise ValueError(\\"Negative values are not allowed.\\") if start > end: start, end = end, start prime_numbers = [num for num in range(start, end + 1) if is_prime(num)] if prime_numbers: print(f\\"Prime numbers between {start} and {end}: {prime_numbers}\\") else: print(f\\"There are no prime numbers between {start} and {end}.\\") except ValueError as e: print(f\\"Invalid input: {e}\\")"},{"question":"Develop a self-referential data structure, a tree with a depth of three, using the syntax and semantics of the Python programming language. You may create the tree either with or without the use of classes. Additionally, write methodology to perform at least two types of traversals (pre-order & post-order) on your created tree.","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] def pre_order_traversal(node): Perform pre-order traversal on the tree. result = [] if node: result.append(node.value) for child in node.children: result.extend(pre_order_traversal(child)) return result def post_order_traversal(node): Perform post-order traversal on the tree. result = [] if node: for child in node.children: result.extend(post_order_traversal(child)) result.append(node.value) return result # Create a tree with a depth of three root = TreeNode(1) child1 = TreeNode(2) child2 = TreeNode(3) root.children.extend([child1, child2]) grandchild1 = TreeNode(4) grandchild2 = TreeNode(5) grandchild3 = TreeNode(6) child1.children.extend([grandchild1, grandchild2]) child2.children.append(grandchild3)"},{"question":"Given the matrix M = [[2, 1], [7, 6]], write a Python function that computes and prints both the determinant and the inverse of this matrix. Also include a mechanism for checking that the computed inverse is correct. Make your code as commented as possible for easy understanding.","solution":"import numpy as np def matrix_operations(matrix): This function computes the determinant and the inverse of a given matrix. :param matrix: List[List[int]] - a 2x2 matrix :return: Tuple[float, List[List[float]]] - determinant and inverse matrix Raises ValueError if the matrix is not invertible. # Convert the input list to a NumPy array for easier calculations np_matrix = np.array(matrix) # Calculate the determinant using NumPy's linalg.det function determinant = np.linalg.det(np_matrix) if determinant == 0: raise ValueError(\\"Matrix is not invertible\\") # Calculate the inverse of the matrix using NumPy's linalg.inv function inverse_matrix = np.linalg.inv(np_matrix) return determinant, inverse_matrix.tolist() # Example use case (not part of the output, meant for explanation) # determinant, inverse = matrix_operations([[2, 1], [7, 6]]) # print(f\\"Determinant: {determinant}\\") # print(f\\"Inverse Matrix: {inverse}\\")"},{"question":"Develop a modify function based on the erroneous code provided below for the Bipartite Graph Representation using Adjacency List. Your task is to correct and enhance the existing function 'bipartiteGraph' which should construct an undirected and bipartite graph of set A and set B. The main flaw in the existing provided function is that it does not check if the provided nodes indeed participate in a bipartite graph and the algorithm failing to handle all the essential conditions for edge creation in the two sets. Do not forget to demonstrate the functionality of your fixed function using the given check points.","solution":"def is_bipartite(adj_list, src, color): Utility function to check whether the graph is bipartite starting from the given source node. queue = [src] color[src] = 1 # Start coloring the source node with 1 while queue: u = queue.pop(0) for v in adj_list[u]: if color[v] == -1: # If the node hasn't been colored color[v] = 1 - color[u] queue.append(v) elif color[v] == color[u]: # If the neighbor has the same color, then not bipartite return False return True def bipartiteGraph(adj_list): Function to check if the given adjacency list represents a bipartite graph. n = len(adj_list) color = [-1] * n # -1 represents no color for i in range(n): if color[i] == -1: # Not colored if not is_bipartite(adj_list, i, color): return False return True"},{"question":"Create a Python function named \\"find_factorial\\" that returns the factorial of an integer number.","solution":"def find_factorial(n): Returns the factorial of a given integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 factorial = 1 for i in range(2, n + 1): factorial *= i return factorial"},{"question":"Using Python, write a code snippet to identify the capital of a given country based on the country's ISO 3166-1 alpha-2 country code. The code should handle multiple country codes as input and return the capitals in a sorted list. Additionally, the code should account for countries with multiple administrative capitals, and countries with no recognized capital city.","solution":"import pycountry COUNTRY_CAPITALS = { 'US': 'Washington, D.C.', 'CA': 'Ottawa', 'GB': 'London', 'FR': 'Paris', 'DE': 'Berlin', 'CN': 'Beijing', 'IN': 'New Delhi', 'JP': 'Tokyo', 'AU': 'Canberra', 'BR': 'Brasilia', 'ZA': ['Pretoria', 'Bloemfontein', 'Cape Town'], # More countries and capitals can be added here } def get_capitals(country_codes): Given a list of ISO 3166-1 alpha-2 country codes, returns a sorted list of capital cities. capitals = [] for code in country_codes: capital = COUNTRY_CAPITALS.get(code) if isinstance(capital, list): # If there are multiple capitals, extend the list capitals.extend(capital) elif capital: # Single capital case capitals.append(capital) return sorted(capitals)"},{"question":"Please write a Python function that uses OpenCV to create a hybrid image from two input grayscale images, one of higher spatial frequency (detailed) and one of lower spatial frequency (blurred). The function should return the hybrid image in grayscale.","solution":"import cv2 import numpy as np def create_hybrid_image(image1, image2, low_freq_kernel_size=31, high_freq_kernel_size=31): Create a hybrid image by combining the low frequency part of one image with the high frequency part of another image. Parameters: - image1: np.ndarray, grayscale image from which the low frequency part will be taken. - image2: np.ndarray, grayscale image from which the high frequency part will be taken. - low_freq_kernel_size: int, kernel size for Gaussian blur to extract the low frequency part (default=31). - high_freq_kernel_size: int, kernel size for Gaussian blur to extract the high frequency part (default=31). Returns: - hybrid_image: np.ndarray, resulting hybrid image in grayscale. # Ensure that both images have the same size if image1.shape != image2.shape: raise ValueError(\\"Both input images must have the same dimensions\\") # Extract low frequency part from image1 using Gaussian blur low_frequencies = cv2.GaussianBlur(image1, (low_freq_kernel_size, low_freq_kernel_size), 0) # Extract low frequency part from image2 using Gaussian blur low_frequencies_image2 = cv2.GaussianBlur(image2, (high_freq_kernel_size, high_freq_kernel_size), 0) # Obtain high frequency part of image2 by subtracting its low frequency part high_frequencies = image2 - low_frequencies_image2 # Combine low frequencies from image1 and high frequencies from image2 hybrid_image = low_frequencies + high_frequencies # Clip values to stay in valid range for image (0-255) and convert to uint8 hybrid_image = np.clip(hybrid_image, 0, 255) hybrid_image = hybrid_image.astype(np.uint8) return hybrid_image"},{"question":"Create a Python piece of code to convert a sequence of alphabetic characters encapsulated in a list into a singular, continuous textual string, and then reverse its format. Do this for two lists. Finally, compare the reversed strings to check if they are palindromes of each other.","solution":"def combine_and_reverse(list1, list2): Combines two lists of alphabetic characters into single strings, reverses those strings, and checks if they are palindromic to each other. Args: list1, list2: Lists of alphabetic characters. Returns: A tuple containing the reversed strings and a boolean indicating if the reversed strings are palindromic to each other. # Combine the list into a single string string1 = ''.join(list1) string2 = ''.join(list2) # Reverse the strings reversed_string1 = string1[::-1] reversed_string2 = string2[::-1] # Check if the reversed strings are palindromic to each other are_palindromic = reversed_string1 == string2 and reversed_string2 == string1 return reversed_string1, reversed_string2, are_palindromic"},{"question":"Construct a full-fledged HTTPS hyperlink sequence considering the supplied sub-components: a sub-domain tagged as 'mypage', primary domain 'google', specified path 'search', and additionally, incorporate query parameters to filter results for 'python' and 'programming'. Implement this using a function in Python.","solution":"def construct_https_url(subdomain, domain, path, **query_params): Returns a full-fledged HTTPS URL constructed from the provided subdomain, domain, path, and query parameters. base_url = f\\"https://{subdomain}.{domain}.com/{path}\\" if query_params: query_string = \\"&\\".join(f\\"{key}={value}\\" for key, value in query_params.items()) full_url = f\\"{base_url}?{query_string}\\" else: full_url = base_url return full_url # Example usage subdomain = 'mypage' domain = 'google' path = 'search' query_params = {'filter1': 'python', 'filter2': 'programming'} construct_https_url(subdomain, domain, path, **query_params)"},{"question":"Write a function that, given a binary tree, prints all of its element \\"level by level\\" in reverse order (the leaves are printed at the first line, the nodes at the second level at the second line, and so on).","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def reverse_level_order_traversal(root): Given a binary tree, returns a list of list of its elements \\"level by level\\" in reverse order. if not root: return [] result = [] queue = deque([root]) while queue: level = [] for _ in range(len(queue)): node = queue.popleft() level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.insert(0, level) return result"},{"question":"Write a Python function to determine whether a user is a registered voter based on their full name, date of birth and address details. Import the required modules needed for validating data: name validation, date validation, and address validation. If any of these validations fail, the function should raise an exception with an appropriate error message.","solution":"import re from datetime import datetime def validate_name(name): Validate the full name to ensure it only contains alphabetic characters and spaces. if not re.match(\\"^[A-Za-z ]+\\", name): raise ValueError(\\"Invalid name: Name must contain only alphabetic characters and spaces.\\") return True def validate_date_of_birth(date_of_birth): Validate the date of birth to ensure it is in the format YYYY-MM-DD and represents a valid date. try: datetime.strptime(date_of_birth, \\"%Y-%m-%d\\") except ValueError: raise ValueError(\\"Invalid date of birth: Date must be in the format YYYY-MM-DD.\\") return True def validate_address(address): Validate the address to ensure it is a non-empty string. if not isinstance(address, str) or not address.strip(): raise ValueError(\\"Invalid address: Address must be a non-empty string.\\") return True def is_registered_voter(name, date_of_birth, address): Determine whether a user is a registered voter based on their full name, date of birth, and address details. validate_name(name) validate_date_of_birth(date_of_birth) validate_address(address) return True"},{"question":"Create a Python program that emulates a pseudo-random number generator using a Linear Congruential Generator (LCG) algorithm. Your program should not use any in-built random functions. Instead, it should take four parameters: the seed, a multiplier, a modulus, and an increment, and generate a series of 10 pseudo-random numbers based on user-provided values. Additionally, include a function that tests the randomness of the generated series using the chi-squared test for uniformity.","solution":"import math def lcg(seed, a, c, m, num_numbers=10): Generate a series of pseudo-random numbers using the Linear Congruential Generator algorithm. Parameters: seed (int): The initial seed value. a (int): The multiplier. c (int): The increment. m (int): The modulus. num_numbers (int): Number of random numbers to generate, default is 10. Returns: list: A list containing the generated pseudo-random numbers. random_numbers = [] x = seed for _ in range(num_numbers): x = (a * x + c) % m random_numbers.append(x) return random_numbers def chi_squared_test(random_numbers, m): Perform chi-squared test for uniformity. Parameters: random_numbers (list): The list of generated pseudo-random numbers. m (int): The modulus used in the LCG algorithm. Returns: float: The chi-squared statistic value. expected_count = len(random_numbers) / m observed_counts = [0] * m for num in random_numbers: observed_counts[num] += 1 chi_squared_stat = sum((observed - expected_count) ** 2 / expected_count for observed in observed_counts) return chi_squared_stat"},{"question":"Write a python implementation of a class for creating a balanced binary search tree from a given array of integers. Also include methods for finding the height, checking the balance of nodes, and for rotations in case the tree becomes unbalanced.","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None self.height = 1 class AVLTree: def insert(self, root, key): if not root: return TreeNode(key) elif key < root.key: root.left = self.insert(root.left, key) else: root.right = self.insert(root.right, key) root.height = 1 + max(self.get_height(root.left), self.get_height(root.right)) balance = self.get_balance(root) # Left Left Case if balance > 1 and key < root.left.key: return self.right_rotate(root) # Right Right Case if balance < -1 and key > root.right.key: return self.left_rotate(root) # Left Right Case if balance > 1 and key > root.left.key: root.left = self.left_rotate(root.left) return self.right_rotate(root) # Right Left Case if balance < -1 and key < root.right.key: root.right = self.right_rotate(root.right) return self.left_rotate(root) return root def left_rotate(self, z): y = z.right T2 = y.left y.left = z z.right = T2 z.height = 1 + max(self.get_height(z.left), self.get_height(z.right)) y.height = 1 + max(self.get_height(y.left), self.get_height(y.right)) return y def right_rotate(self, z): y = z.left T3 = y.right y.right = z z.left = T3 z.height = 1 + max(self.get_height(z.left), self.get_height(z.right)) y.height = 1 + max(self.get_height(y.left), self.get_height(y.right)) return y def get_height(self, root): if not root: return 0 return root.height def get_balance(self, root): if not root: return 0 return self.get_height(root.left) - self.get_height(root.right) def find_height(self, root): if not root: return 0 return root.height def is_balanced(self, root): if not root: return True left_height = self.get_height(root.left) right_height = self.get_height(root.right) if abs(left_height - right_height) <= 1 and self.is_balanced(root.left) and self.is_balanced(root.right): return True return False def build_balanced_bst(array): tree = AVLTree() root = None for key in array: root = tree.insert(root, key) return root"},{"question":"Given this list of numbers: [4,1,3,7,9,2,8,5,6], write a Python function to sort the list using bubble sort.","solution":"def bubble_sort(lst): Sorts a list using the bubble sort algorithm. n = len(lst) for i in range(n): for j in range(0, n-i-1): # Last i elements are already in place if lst[j] > lst[j+1]: lst[j], lst[j+1] = lst[j+1], lst[j] # Swap return lst"},{"question":"Given a list of lists, write a Python program to count the number of sublists with all elements as negative numbers. Additionally, the sublists can include integers, real numbers, and strings. If there is a string in the sublist, the program must ignore it, but if all elements of a sublist are strings, count it as 0.","solution":"def count_negative_sublists(lst): Count the number of sublists where all elements are negative numbers. If a sublist contains any non-numeric or non-negative element, it's not counted. Parameters: lst (list): A list of lists containing various data types Returns: int: The number of sublists with all elements as negative numbers count = 0 for sublist in lst: sublist_contains_only_strings = all(isinstance(item, str) for item in sublist) if not sublist_contains_only_strings: all_negative = True for item in sublist: if not isinstance(item, (int, float)) or item >= 0: all_negative = False break if all_negative: count += 1 return count"},{"question":"Generate a random string of the specified length n, consisting of lowercase and uppercase letters and numbers.","solution":"import random import string def generate_random_string(n): Generates a random string of length n, consisting of lowercase and uppercase letters and numbers. Args: n (int): Length of the string to be generated. Returns: str: Randomly generated string. characters = string.ascii_letters + string.digits random_string = ''.join(random.choice(characters) for _ in range(n)) return random_string"},{"question":"Implement an efficient algorithm to remove duplicates from a linked list in O(n) time complexity, without using additional data structures. The linked list nodes contain integer values between -1000 and 1000, and the list can have up to 10^6 nodes. The algorithm should preserve the original order of the nodes in the resulting linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_duplicates(head): Remove duplicates from an unsorted linked list while maintaining the original list order. Algorithm should run in O(n) time complexity. if not head: return None current = head prev = None seen = set() while current: if current.val in seen: # Duplicate found, remove it prev.next = current.next else: # New value found seen.add(current.val) prev = current current = current.next return head"},{"question":"Execute the following Python code which employs imports from 'collections' module in order to find the most prevalently occurring element within an array of integers. The array you need to work with is: arr = [2, 3, 4, 4, 5, 2]. You're supposed to write a function 'most_common_element' using the guidelines provided.","solution":"from collections import Counter def most_common_element(arr): Returns the most prevalently occurring element within the array of integers. If multiple elements have the same highest frequency, it returns any one of them. if not arr: return None # Edge case: Return None if the array is empty count = Counter(arr) return count.most_common(1)[0][0]"},{"question":"I have a JSON file with an array of objects, each representing a user including their name and age. How can I read the file, sort the users based on age using the \`sorted()\` function and then output the sorted list as a pretty-printed JSON string?","solution":"import json def read_and_sort_json(file_path): Reads a JSON file containing an array of users, sorts them by age, and returns the sorted list as a pretty-printed JSON string. :param file_path: Path to the JSON file. :return: Pretty-printed JSON string of the sorted user list. with open(file_path, 'r') as file: users = json.load(file) sorted_users = sorted(users, key=lambda user: user['age']) return json.dumps(sorted_users, indent=4)"},{"question":"Write a Python code snippet to prompt the user to enter their age and store that value in a variable called \\"age\\". Then, calculate the factorial of the age using a recursive function and print the result.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n == 0: return 1 else: return n * factorial(n - 1) def main(): age = int(input(\\"Enter your age: \\")) result = factorial(age) print(f\\"The factorial of {age} is {result}\\") if __name__ == \\"__main__\\": main()"},{"question":"Write a Python program that defines a function which takes a list of integers and an integer x as inputs, and returns a new list containing the elements of the original list which are divisible by x. The function should be named 'divisible_numbers'. Add some code after the function definition to demonstrate its usage.","solution":"def divisible_numbers(numbers, x): Returns a new list containing the elements of the given list which are divisible by x. Parameters: numbers (list of int): List of integers. x (int): The divisor. Returns: list of int: A new list with elements divisible by x. return [number for number in numbers if number % x == 0] # Demonstration of usage example_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] divisor = 2 print(divisible_numbers(example_list, divisor)) # Output: [2, 4, 6, 8, 10]"},{"question":"Given 2 sets, define a function in Python to find the minimum number of elements that need to be added to Set B to make it a superset of Set A.","solution":"def min_elements_to_add(set_a, set_b): Returns the minimum number of elements that need to be added to Set B to make it a superset of Set A. :param set_a: First set :param set_b: Second set :return: Minimum number of elements to be added return len(set_a - set_b)"},{"question":"I'm learning to code in Python and I need some help with creating a function to round off floating-point numbers to the nearest integer. I want the function to handle floating-point numbers and give me the closest whole number to that value. Can you provide me with a solution using the built-in Python functions?","solution":"def round_to_nearest_integer(value): Returns the nearest integer to the given floating-point number. return round(value)"},{"question":"Write Python code that finds the largest palindrome smaller than a given number. For example, for input 123, the output should be 111.","solution":"def largest_palindrome_smaller_than(n): Returns the largest palindrome smaller than the given number n. def is_palindrome(num): return str(num) == str(num)[::-1] for i in range(n-1, 0, -1): if is_palindrome(i): return i return None # This implies all single-digit numbers are considered"},{"question":"Recursively search for TXT files inside a specific directory and its subdirectories in Python, and then extract all IP addresses from these files. The IP addresses should be stored in a list and sorted in ascending order. Additionally, any IP address that starts with \\"192.168\\" should be flagged and stored separately in another list. The program should also keep track of the total number of IP addresses found, the number of unique IP addresses, and the number of flagged IP addresses. Display these statistics at the end of the program. Make sure to handle any potential errors, such as permission issues when accessing files or directories, and invalid IP addresses.","solution":"import os import re from collections import defaultdict def find_txt_files(dir_path): Recursively find all .txt files in the given directory and subdirectories. txt_files = [] for root, _, files in os.walk(dir_path): for file in files: if file.endswith(\\".txt\\"): txt_files.append(os.path.join(root, file)) return txt_files def extract_ip_addresses(file_path): Extract all IP addresses from the given file. ip_pattern = re.compile(r'b(?:d{1,3}.){3}d{1,3}b') ip_addresses = [] try: with open(file_path, 'r') as file: for line in file: ip_addresses.extend(ip_pattern.findall(line)) except Exception as e: print(f\\"Error reading file {file_path}: {e}\\") return ip_addresses def is_valid_ip(ip_address): Validate if the given string is a valid IP address. parts = ip_address.split('.') if len(parts) != 4: return False for part in parts: if not part.isdigit() or not 0 <= int(part) <= 255: return False return True def main(directory): all_ips = [] flagged_ips = [] txt_files = find_txt_files(directory) for file in txt_files: ips = extract_ip_addresses(file) for ip in ips: if is_valid_ip(ip): all_ips.append(ip) if ip.startswith(\\"192.168\\"): flagged_ips.append(ip) unique_ips = sorted(set(all_ips)) flagged_ips = sorted(set(flagged_ips)) print(f\\"Total IP addresses found: {len(all_ips)}\\") print(f\\"Unique IP addresses found: {len(unique_ips)}\\") print(f\\"Flagged IP addresses (192.168.*.*) found: {len(flagged_ips)}\\") return { \\"all_ips\\": sorted(all_ips), \\"unique_ips\\": unique_ips, \\"flagged_ips\\": flagged_ips }"},{"question":"Write an expression in Python to remove all vowels from a given string.","solution":"def remove_vowels(s): Removes all vowels from the given string s and returns the result. vowels = \\"aeiouAEIOU\\" return ''.join(char for char in s if char not in vowels)"},{"question":"Write a Python programs that generates a random number between 1 and 100 using the random module. Implement a function that takes the range of numbers as parameters and returns a randomly generated integer within that range. Additionally, implement error handling to prevent invalid input and ensure the program runs efficiently even when handling large ranges.","solution":"import random def generate_random_number(start, end): Generates a random number between start and end (inclusive). Parameters: start (int): the starting range number. end (int): the ending range number. Returns: int: A randomly generated integer within the specified range. Raises: ValueError: If start is not less than end. TypeError: If inputs are not integers. if not isinstance(start, int) or not isinstance(end, int): raise TypeError(\\"Both start and end must be integers.\\") if start > end: raise ValueError(\\"Start must be less than or equal to end.\\") return random.randint(start, end)"},{"question":"Write a python script to generate fibers located on a warped rectangular surface with spacing between the fibers defineable.","solution":"def generate_fibers(surface_length, surface_width, fiber_spacing): Generates fiber coordinates on a warped rectangular surface. Parameters: - surface_length (float): The length of the surface. - surface_width (float): The width of the surface. - fiber_spacing (float): The spacing between fibers. Returns: - List of tuples: Each tuple contains the (x, y, z) coordinates of a fiber. fibers = [] # Assuming the surface to be flat (for simplicity) for x in range(0, surface_length + 1, fiber_spacing): for y in range(0, surface_width + 1, fiber_spacing): z = 0 # Since the surface is flat, z-coordinate is 0 fibers.append((x, y, z)) return fibers"},{"question":"Given a list of n positive integers, write a program to find the maximum absolute difference between any two elements in the list. Your program should have a time complexity of O(n).","solution":"def max_absolute_difference(lst): Returns the maximum absolute difference between any two elements in the list. if not lst or len(lst) < 2: return 0 min_value = min(lst) max_value = max(lst) return max_value - min_value"},{"question":"How can you use Python code to parse a JSON file, specifically one that contains a list of dictionaries with multiple key-value pairs? Moreover, can you write a function that takes in the JSON data and returns a list of values for a specific key in each dictionary within the file? The function should be able to handle any number of dictionaries and keys, and it should return an empty list if the key is not present in any of the dictionaries. Remember to include code that demonstrates how to open and load the JSON file, as well as an example of how to call your function with a specific key.","solution":"import json def load_json_file(file_path): Loads a JSON file and returns the parsed data. :param file_path: The path to the JSON file to load. :return: The parsed JSON data. with open(file_path, 'r') as file: data = json.load(file) return data def get_values_by_key(json_data, key): Takes in JSON data (a list of dictionaries) and returns a list of values for a specific key. :param json_data: List of dictionaries loaded from a JSON file. :param key: The key for which to return all associated values. :return: A list of values corresponding to the specified key. Returns an empty list if the key is not present. values = [] for dictionary in json_data: if key in dictionary: values.append(dictionary[key]) return values # Example usage: # json_data = load_json_file('data.json') # values = get_values_by_key(json_data, 'desired_key') # print(values)"},{"question":"I want to create a function that takes a list of strings as input and returns a dictionary where the keys are the strings and the values are the lengths of those strings. Can you help me write this code in Python?","solution":"def strings_to_lengths(list_of_strings): Takes a list of strings as input and returns a dictionary where the keys are the strings and the values are the lengths of those strings. Args: list_of_strings (list): A list of strings. Returns: dict: A dictionary mapping strings to their lengths. return {string: len(string) for string in list_of_strings}"},{"question":"Can you adjust the given python code that can return the minimum n numbers in a list and their indices, without utilizing any built-in Python functions for sorting or list manipulation? Also, your code should be capable of handling edge cases such as an empty list or a list with less than n elements without errors. Furthermore, for similarity measurements, your solution should approximately align with the given erroneous code in terms of complexity, which uses sorting with a time complexity of O(n log n).","solution":"def find_min_n_numbers(nums, n): Returns the minimum n numbers in a list and their indices. If nums has fewer than n elements, returns all elements. If nums is empty, returns empty list for both numbers and indices. if not nums or n <= 0: return [], [] if len(nums) <= n: return nums, list(range(len(nums))) min_nums = [float('inf')] * n min_indices = [-1] * n for idx, num in enumerate(nums): for i in range(n): if num < min_nums[i]: min_nums.insert(i, num) min_indices.insert(i, idx) del min_nums[-1] del min_indices[-1] break return min_nums, min_indices"},{"question":"As a Python programmer, you have been tasked with creating a function that can differentiate between odd and even numbers. However, there's a catch: the function must also be able to identify prime numbers, which are odd numbers but cannot be divided by any number other than 1 and itself. Can you create a Python function to differentiate between odd, even, and prime numbers?","solution":"def classify_number(n): Classifies n as 'Even', 'Odd', or 'Prime'. Parameters: n (int): The number to be classified. Returns: str: 'Even' if n is an even number, 'Odd' if n is an odd number and not prime, 'Prime' if n is a prime number. if n < 2: return 'Even' if n % 2 == 0 else 'Odd' if n == 2: return 'Even' # 2 is the only even prime number if n % 2 == 0: return 'Even' # check for prime for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return 'Odd' return 'Prime'"},{"question":"Develop a code script that not only calculates the greatest common divisor (GCD) between two integers, but also between a list of integers. This script should be capable of handling an unsorted list of integers with the assumption that the list doesn't consist of repeating numbers. Additionally, your solution should be timed for performance analysis to understand how efficiently it operates with large datasets.","solution":"import math import time def gcd(a, b): Returns the greatest common divisor of a and b using the Euclidean algorithm. while b: a, b = b, a % b return a def list_gcd(numbers): Returns the greatest common divisor of a list of numbers. gcd_result = numbers[0] for number in numbers[1:]: gcd_result = gcd(gcd_result, number) return gcd_result def timed_list_gcd(numbers): Computes GCD of a list of numbers and measures the time taken. Returns a tuple of the GCD and the time in seconds. start_time = time.time() result = list_gcd(numbers) end_time = time.time() elapsed_time = end_time - start_time return result, elapsed_time"},{"question":"Design a Python function that accepts a dictionary and sorts its elements, not only based on the priority order of keys specified in a separate list, but also by a value comparator function provided by the user. The user's function will dictate the secondary sorting criteria when the keys themselves don't provide a sufficient order.","solution":"def sort_dict_by_priority_and_value(input_dict, priority_list, value_comparator): Sorts a dictionary based on the priority order of keys and a value comparator function. Args: - input_dict (dict): The dictionary to sort. - priority_list (list): The list specifying the priority order of keys. - value_comparator (function): The function to compare dictionary values. Returns: - list of tuples: Sorted list of key-value pairs. # Creating a priority map for quick lookup priority_map = {key: index for index, key in enumerate(priority_list)} # Sorting the dictionary items sorted_items = sorted(input_dict.items(), key=lambda item: (priority_map.get(item[0], float('inf')), value_comparator(item[1]))) return sorted_items"},{"question":"Given a string S, write a Python code snippet to check if S is a palindrome.","solution":"def is_palindrome(S): Returns True if S is a palindrome, otherwise False. return S == S[::-1]"},{"question":"Given a piece of Python code that implements Quick Sort algorithm. You will notice that this program has some logical mistakes which prevent it from functioning as expected. Your task is to identify these errors, explain what they are, correct them, and finally, write a robust function that can sort arrays using the Quick Sort algorithm.","solution":"def quick_sort(arr): Sorts an array using the Quick Sort algorithm. Parameters: arr (list): A list of elements to be sorted. Returns: list: A new sorted list. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Develop a Python function that is capable of creating a list inclusive of squared numerical values beginning at 0 and culminating at a specified number, n. This function must be designed to manage scenarios where n is not a positive integer by prompting an error message. Below is an example of such a function with an error in the code. Your task is to identify the error, correct it, and then improve the function to incorporate the new features.","solution":"def generate_squares(n): This function creates a list of squared values from 0 to n (inclusive). If n is not a positive integer, it raises a ValueError. if not isinstance(n, int) or n < 0: raise ValueError(\\"The input must be a positive integer.\\") return [i**2 for i in range(n + 1)]"},{"question":"Write a Python function called \`safe_print_list_enhanced\` that takes a list \`my_list\` and an integer \`x\` as arguments. The function should print the first \`x\` elements of \`my_list\` to the console. It should return the count of elements successfully printed. If \`x\` exceeds the length of the list, it should print as many elements as possible without raising an exception and then return the count of elements printed. The function should handle cases where \`my_list\` is not a list or \`x\` is not an integer by raising a TypeError with a descriptive message.","solution":"def safe_print_list_enhanced(my_list, x): Print the first x elements of my_list to the console. Parameters: my_list (list): The list from which to print elements. x (int): The number of elements to print. Returns: int: The count of elements successfully printed. Raises: TypeError: If my_list is not a list or x is not an integer. if not isinstance(my_list, list): raise TypeError(f\\"Expected my_list to be a list, but got {type(my_list).__name__}\\") if not isinstance(x, int): raise TypeError(f\\"Expected x to be an integer, but got {type(x).__name__}\\") count = 0 for i in range(x): try: print(my_list[i], end=\\" \\") count += 1 except IndexError: break print() # For newline after printing list elements return count"},{"question":"Print all the prime numbers in the range of 2 to n, where n can be as large as 10^6. However, you are not allowed to use any built-in functions or libraries for checking prime numbers or generating a list of prime numbers. You can only use basic programming constructs such as loops, conditionals, and basic arithmetic operations to solve this problem.","solution":"def is_prime(num): Checks if a number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def primes_up_to_n(n): Returns a list of prime numbers from 2 to n, inclusive. primes = [] for num in range(2, n + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Create a Python program that uses a dictionary to simulate a simple social network. The program should allow users to add friends, remove friends, and list all of a person's current friends in alphabetical order.","solution":"class SocialNetwork: def __init__(self): self.network = {} def add_user(self, user): if user not in self.network: self.network[user] = [] def add_friend(self, user, friend): self.add_user(user) self.add_user(friend) if friend not in self.network[user]: self.network[user].append(friend) self.network[user].sort() def remove_friend(self, user, friend): if user in self.network and friend in self.network[user]: self.network[user].remove(friend) def list_friends(self, user): if user in self.network: return sorted(self.network[user]) return None # Return None if user does not exist"},{"question":"**Problem**: Write a function named \`validate_json\` that takes a JSON string as input. The function should check if the JSON string adheres to a specific structure: it must contain four specific keys: \\"name\\", \\"age\\", \\"city\\", and \\"skills\\". The \\"skills\\" key must point to an array with a minimum of three items. The function should return \`True\` if all conditions are met; otherwise, it returns \`False\`.","solution":"import json def validate_json(json_str): Validates the given JSON string according to the specified structure: - It must contain four specific keys: \\"name\\", \\"age\\", \\"city\\", and \\"skills\\". - The \\"skills\\" key must point to an array with a minimum of three items. Parameters: json_str (str): The JSON string to validate. Returns: bool: True if the JSON is valid according to the specified structure, otherwise False. try: data = json.loads(json_str) except json.JSONDecodeError: return False # Check the existence of keys required_keys = [\\"name\\", \\"age\\", \\"city\\", \\"skills\\"] for key in required_keys: if key not in data: return False # Check that \\"skills\\" is a list with at least three items if not isinstance(data['skills'], list) or len(data['skills']) < 3: return False return True"},{"question":"Task: Create a function that returns the nth Fibonacci number using dynamic programming.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n <= 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a python code to merge two list of dictionaries by specific key and sum its corresponding weight field together. If a key doesn't exist in one list, it should still maintain its original value in the output.","solution":"def merge_lists_by_key(list1, list2, key_field='key', weight_field='weight'): Merges two lists of dictionaries by a specific key and sums the weight fields together. If a key doesn't exist in one list, it maintains its original value in the output. :param list1: The first list of dictionaries. :param list2: The second list of dictionaries. :param key_field: The field name to be used as a key for merging. :param weight_field: The field name whose values need to be summed if keys match. :return: A merged list of dictionaries. # Convert first list to a dictionary using the key_field merged_dict = {d[key_field]: d for d in list1} for d in list2: if d[key_field] in merged_dict: # If key exists in the merged_dict, sum the weight_field merged_dict[d[key_field]][weight_field] += d[weight_field] else: # Otherwise, just add the new dict to the merged_dict merged_dict[d[key_field]] = d # Convert merged_dict back to a list return list(merged_dict.values())"},{"question":"DispatchItem(51251, \\"call\\"). It seems like you're trying to call a function or create an object in a programming language with a specific ID and action. How would you implement this in Python if dispatching items is handled by a 'Task' class which has two properties, 'id' and 'action'? Also, consider adding an additional attribute to the 'Task' class representing the current status of the dispatch. Create a method in 'Task' class to update the status.","solution":"class Task: def __init__(self, id, action): self.id = id self.action = action self.status = 'Pending' def update_status(self, new_status): Updates the status of the task to the new_status. self.status = new_status # Example Usage: # task = Task(51251, \\"call\\") # task.update_status(\\"In Progress\\")"},{"question":"How do I use Google colab to run Python code that tests if a number is prime, given the number as input?","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Develop a Python function that generates the Fibonacci sequence as a list up to a given number n, and then return the list after reversing it. Also, ensure your function efficiently handles large values of n, without exceeding time limits.","solution":"def fibonacci_reversed(n): Generates the Fibonacci sequence up to a given number n and returns the reversed list of the sequence. :param n: The upper bound of the Fibonacci sequence. :return: A list containing the reversed Fibonacci sequence up to n. if n < 0: raise ValueError(\\"n must be a non-negative integer.\\") if n == 0: return [0] if n == 1: return [1, 0] fib_seq = [0, 1] while True: next_val = fib_seq[-1] + fib_seq[-2] if next_val > n: break fib_seq.append(next_val) return fib_seq[::-1]"},{"question":"Develop a Python function named \\"reverse_words_in_phrase\\" that accepts a single argument, a string containing an undetermined number of words. The function should return a new string with the individual words within the phrase reversed while maintaining their original order. Be aware that spaces could be present before, after, and in between words, and should be kept as presented in the input.","solution":"def reverse_words_in_phrase(phrase): Reverses each word in the given phrase while maintaining their original order. :param phrase: A string containing an undetermined number of words. :return: A new string with each word reversed, maintaining the original order and spaces. words = phrase.split(' ') reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Fonzie, from the TV show \\"Happy Days\\", has an interesting phone habit. When he wants to dial a number, he flicks the phone with his thumb in an arc motion, and the desired number is dialed. Your task is to write a program to model this behavior.","solution":"def fonzie_dial(number): Simulate Fonzie's dialing on a rotary phone. Given a number, it returns a sequence of numbers Fonzie flicks through. Rotary phone order: 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 / 0 if not isinstance(number, int) or not (0 <= number <= 9): raise ValueError(\\"Input must be a single digit between 0 and 9.\\") dial_order = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] start_index = dial_order.index(number) return dial_order[:start_index+1] if start_index >= 0 else []"},{"question":"write code for generating random numbers between given range 'a' and 'b' where each number and the next number can have a most 'n' difference using \\"random module\\" in python","solution":"import random def generate_random_numbers(a, b, n): Generates a list of random numbers between range a and b where each number and the next number can have at most 'n' difference. if a > b: a, b = b, a # Ensure a is less than b current_number = random.randint(a, b) random_numbers = [current_number] while True: next_number = current_number + random.randint(-n, n) if next_number < a or next_number > b: break random_numbers.append(next_number) current_number = next_number return random_numbers"},{"question":"Given the following piece of Python code which utilizes the zipfile module, identify the errors and correct them to create a robust Python function. This function should archive a directory into a zip file, including all subdirectories and files within the specified path. Your function should also handle possible exceptions and errors in an adequate way.","solution":"import os import zipfile def archive_directory(directory_path, output_zip_file): Archives a directory into a zip file, including all subdirectories and files within the specified path. Args: directory_path (str): The path of the directory to be archived. output_zip_file (str): The path of the output zip file. try: if not os.path.isdir(directory_path): raise ValueError(f\\"The provided path '{directory_path}' is not a valid directory.\\") with zipfile.ZipFile(output_zip_file, 'w', zipfile.ZIP_DEFLATED) as zipf: for root, dirs, files in os.walk(directory_path): for file in files: file_path = os.path.join(root, file) arcname = os.path.relpath(file_path, start=directory_path) zipf.write(file_path, arcname) except Exception as e: print(f\\"An error occurred: {e}\\") raise"},{"question":"I am learning to code in Python and I want to understand how to create a basic web server using the Flask framework. Can you provide a simple example that demonstrates how to create a web server and add a route that responds to a GET request with a JSON response?","solution":"from flask import Flask, jsonify app = Flask(__name__) @app.route('/api/greet', methods=['GET']) def greet(): response = { 'message': 'Hello, world!' } return jsonify(response) if __name__ == '__main__': app.run(debug=True)"},{"question":"Write a Python program to count the number of uppercase letters in a string and return it.","solution":"def count_uppercase_letters(s): Returns the number of uppercase letters in the string s. return sum(1 for c in s if c.isupper())"},{"question":"Create a knapsack problem scenario generator. The generator should create a set of items with random weights and values, as well as a random capacity for the knapsack. Additionally, provide a function that uses dynamic programming to solve the 0/1 knapsack problem for the generated data.","solution":"import random def generate_knapsack_problem(num_items, max_weight, max_value, max_capacity): Generates a knapsack problem scenario with given parameters. Parameters: - num_items (int): Number of items - max_weight (int): Maximum weight for each item - max_value (int): Maximum value for each item - max_capacity (int): Maximum capacity of the knapsack Returns: - tuple: A tuple containing (items, capacity) - items (list of tuples): Each tuple contains (weight, value) of an item - capacity (int): Capacity of the knapsack items = [(random.randint(1, max_weight), random.randint(1, max_value)) for _ in range(num_items)] capacity = random.randint(1, max_capacity) return items, capacity def knapsack_01(items, capacity): Solves the 0/1 knapsack problem using dynamic programming. Parameters: - items (list of tuples): Each tuple contains (weight, value) of an item - capacity (int): Capacity of the knapsack Returns: - int: Maximum value that fits into the knapsack n = len(items) dp = [[0] * (capacity + 1) for _ in range(n + 1)] for i in range(1, n + 1): weight, value = items[i - 1] for w in range(capacity + 1): if weight <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight] + value) else: dp[i][w] = dp[i - 1][w] return dp[n][capacity]"},{"question":"Craft a script using Python that is capable of isolating and determining the precise day of the week when provided with an input consisting of a date and timestamp.","solution":"from datetime import datetime def get_day_of_week(date_string): Given a date string in the format 'YYYY-MM-DD HH:MM:SS', returns the day of the week for that date. try: date_object = datetime.strptime(date_string, \\"%Y-%m-%d %H:%M:%S\\") # Mapping datetime's weekday method to human-readable day names day_of_week = date_object.strftime(\\"%A\\") return day_of_week except ValueError: return \\"Invalid date format. Please use 'YYYY-MM-DD HH:MM:SS'.\\""},{"question":"Create a simple REST API using Flask in Python that adds two numbers provided by the user and returns the result.","solution":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/add', methods=['POST']) def add(): data = request.get_json() a = data.get('a') b = data.get('b') if a is None or b is None: return jsonify({\\"error\\": \\"Please provide both 'a' and 'b'.\\"}), 400 try: a = float(a) b = float(b) except ValueError: return jsonify({\\"error\\": \\"'a' and 'b' must be numbers.\\"}), 400 result = a + b return jsonify({\\"result\\": result}), 200"},{"question":"Design a Python function using the botocore library for a more low-level, direct interaction with Amazon AWS services. This function should be able to create and manage DynamoDB databases, update and retrieve data items, and scan all items within a specific DynamoDB table.","solution":"import boto3 from botocore.exceptions import NoCredentialsError, PartialCredentialsError, ClientError def create_dynamodb_table(table_name, key_schema, attribute_definitions, provisioned_throughput): dynamodb = boto3.resource('dynamodb') try: table = dynamodb.create_table( TableName=table_name, KeySchema=key_schema, AttributeDefinitions=attribute_definitions, ProvisionedThroughput=provisioned_throughput ) table.wait_until_exists() return table except (NoCredentialsError, PartialCredentialsError) as err: return f\\"Credentials error: {err}\\" except ClientError as err: return f\\"Client error: {err.response['Error']['Message']}\\" def update_dynamodb_item(table_name, key, update_expression, expression_attribute_values): dynamodb = boto3.resource('dynamodb') table = dynamodb.Table(table_name) try: response = table.update_item( Key=key, UpdateExpression=update_expression, ExpressionAttributeValues=expression_attribute_values, ReturnValues=\\"UPDATED_NEW\\" ) return response except ClientError as err: return f\\"Client error: {err.response['Error']['Message']}\\" def get_dynamodb_item(table_name, key): dynamodb = boto3.resource('dynamodb') table = dynamodb.Table(table_name) try: response = table.get_item(Key=key) if 'Item' in response: return response['Item'] else: return \\"Item not found\\" except ClientError as err: return f\\"Client error: {err.response['Error']['Message']}\\" def scan_dynamodb_table(table_name): dynamodb = boto3.resource('dynamodb') table = dynamodb.Table(table_name) try: response = table.scan() return response.get('Items', []) except ClientError as err: return f\\"Client error: {err.response['Error']['Message']}\\""},{"question":"Can you write code in Python that uses the 'os' and 'subprocess' libraries to recursively search for a specific file in all subdirectories, then move the file to a specified directory while maintaining directory structure?","solution":"import os import shutil import subprocess def find_and_move_file(root_dir, target_file, dest_dir): Recursively search for a specific file in all subdirectories of root_dir, and move it to dest_dir while maintaining directory structure. :param root_dir: str, the root directory to start searching from :param target_file: str, the name of the file to search for :param dest_dir: str, the destination directory to move the file to # Walk through all directories and subdirectories from the root_dir for dirpath, _, filenames in os.walk(root_dir): if target_file in filenames: # Construct the full file path src_file_path = os.path.join(dirpath, target_file) # Construct the destination file path maintaining directory structure rel_path = os.path.relpath(dirpath, root_dir) new_dir_path = os.path.join(dest_dir, rel_path) os.makedirs(new_dir_path, exist_ok=True) shutil.move(src_file_path, os.path.join(new_dir_path, target_file))"},{"question":"convert 'TRUE' to 1 and 'FALSE' to 0 using Python","solution":"def convert_boolean_str_to_int(boolean_str): Converts the strings 'TRUE' or 'FALSE' to the integers 1 and 0 respectively. if boolean_str == 'TRUE': return 1 elif boolean_str == 'FALSE': return 0 else: raise ValueError(\\"Input must be 'TRUE' or 'FALSE'\\")"},{"question":"Create a Python script that calculates the factorial of an input number, but additionally includes error handling for non-integer input and negative numbers. Additionally, the script should be able to handle large numbers efficiently. Discuss the time and space complexity of your implementation.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is not an integer or is a negative number, raises a ValueError. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Given a 3 x 3 matrix, write a Python program to print the matrix in a clockwise spiral form.","solution":"def spiralOrder(matrix): Prints a 3x3 matrix in a clockwise spiral form. Args: matrix (list): A 2D list representing a 3x3 matrix. Returns: list: A list of elements in spiral order. if not matrix or not matrix[0]: return [] result = [] rows, cols = len(matrix), len(matrix[0]) left, right, top, bottom = 0, cols - 1, 0, rows - 1 while left <= right and top <= bottom: # Traverse from left to right along the top row for col in range(left, right + 1): result.append(matrix[top][col]) top += 1 # Traverse from top to bottom along the right column for row in range(top, bottom + 1): result.append(matrix[row][right]) right -= 1 if top <= bottom: # Traverse from right to left along the bottom row for col in range(right, left - 1, -1): result.append(matrix[bottom][col]) bottom -= 1 if left <= right: # Traverse from bottom to top along the left column for row in range(bottom, top - 1, -1): result.append(matrix[row][left]) left += 1 return result"},{"question":"Given the header row of a CSV file, write a Python function that generates a list of dictionaries. Each dictionary in the list should represent a row in the CSV, mapping column names to their respective values.","solution":"import csv from typing import List, Dict def csv_to_dict_list(csv_content: str) -> List[Dict[str, str]]: Converts CSV content to a list of dictionaries. Each dictionary represents a row, mapping column names to their respective values. Parameters: csv_content (str): Content of the CSV file as a string. Returns: List[Dict[str, str]]: A list of dictionaries representing CSV rows. lines = csv_content.splitlines() reader = csv.DictReader(lines) return [row for row in reader]"},{"question":"Provides test cases for software developers to debug and optimize their code, using examples in the Python programming language: Write a function that takes in two non-empty lists of integers and returns the sum of elements that are the same in both lists. Do not assume that the lists are sorted or have the same length.","solution":"def sum_common_elements(list1, list2): Returns the sum of elements that are the same in both list1 and list2. :param list1: List of integers. :param list2: List of integers. :return: Integer sum of common elements. set1 = set(list1) set2 = set(list2) common_elements = set1 & set2 return sum(common_elements)"},{"question":"Create a function called \`limit_max\` that limits the values in the given list to a maximum value. The function should take two parameters: a list of numbers and a maximum limit. If any number in the list exceeds the limit, the function should replace it with the limit. The function should return a new list with the modified values.","solution":"def limit_max(numbers, max_limit): Limits the values in the list to a maximum value. Parameters: numbers (list of floats/ints): The list of numbers to be limited. max_limit (float/int): The maximum allowed value. Returns: list: A new list with values limited to the maximum value. return [min(num, max_limit) for num in numbers]"},{"question":"Create a Python function that accepts a positive number as input and returns the number's binary representation. Also, ensure its performance is optimized for very large positive integers (up to 10^18). Include error handling in case the input is not a positive integer.","solution":"def int_to_binary(n): Converts a positive integer to its binary representation. Parameters: n (int): A positive integer. Returns: str: Binary representation of the input integer. Raises: ValueError: If the input is not a positive integer. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") return bin(n)[2:]"},{"question":"Design a Python script that accepts a string of text and outputs the frequency of each word in the text, ignoring case sensitivity and punctuation. Additionally, the script should sort the output based on the frequency of the words in descending order. If two words have the same frequency, they should be sorted alphabetically. The script should allow the user to specify a list of common stop words to be excluded from the frequency count.","solution":"import re from collections import Counter def word_frequency(text, stop_words): Returns a dictionary of word frequencies in the given text, excluding stop words. :param text: str, input text to analyze. :param stop_words: list, list of common stop words to exclude. :return: dict, word frequencies sorted by frequency and alphabetically. # Convert text to lowercase text = text.lower() # Remove punctuation text = re.sub(r'[^ws]', '', text) # Split text into words words = text.split() # Filter out stop words words = [word for word in words if word not in stop_words] # Count word frequencies word_counts = Counter(words) # Sort by frequency (descending) and alphabetically for ties sorted_word_counts = dict(sorted(word_counts.items(), key=lambda item: (-item[1], item[0]))) return sorted_word_counts"},{"question":"Write a script to insert multiple items at a specific index in a list. If the index is invalid (i.e., outside the boundaries of the list), you should handle this by printing an error message \\"ERROR: Index is out of bounds!\\".","solution":"def insert_items_at_index(lst, index, items): Inserts multiple items at a specific index in the list. If the index is invalid, prints an error message. :param lst: List into which items are to be inserted :param index: Index at which to insert the items :param items: List of items to be inserted :return: The updated list or None if the index is invalid if index < 0 or index > len(lst): print(\\"ERROR: Index is out of bounds!\\") return None return lst[:index] + items + lst[index:]"},{"question":"Given an array of positive integers nums and a positive integer target, write a program to find the minimal length of a contiguous subarray of which the sum is greater than or equal to target. If there is no such subarray, return 0.","solution":"def min_subarray_len(target, nums): Returns the minimal length of a contiguous subarray of which the sum is greater than or equal to target. If there is no such subarray, return 0. n = len(nums) min_length = float('inf') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= target: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return 0 if min_length == float('inf') else min_length"},{"question":"Given a text string, write a function in Python to identify all the words that have more than 4 characters and start with a vowel. Additionally, for each identified word, find its synonym from a predefined dictionary and return a list of tuples containing the word and its synonym.","solution":"def find_words_and_synonyms(text, synonyms): Identify all words that have more than 4 characters and start with a vowel. For each identified word, return its synonym from a predefined dictionary. Args: - text (str): The input text string. - synonyms (dict): A dictionary where the keys are words and values are their synonyms. Returns: - list: A list of tuples. Each tuple contains a word and its synonym. vowels = 'aeiouAEIOU' words = text.split() result = [] for word in words: cleaned_word = ''.join(filter(str.isalpha, word)) # Remove punctuation from words if len(cleaned_word) > 4 and cleaned_word[0] in vowels: synonym = synonyms.get(cleaned_word.lower(), \\"No synonym found\\") result.append((cleaned_word, synonym)) return result"},{"question":"Write a code to remove the duplicates from a given list without using any built-in functions or data structures such as sets or dictionaries. The input list can contain any type of elements, including nested lists, and the order of the elements should be preserved in the output.","solution":"def remove_duplicates(lst): Removes duplicates from the given list without using any built-in functions or data structures such as sets or dictionaries. The order of elements is preserved in the output. Parameters: lst (list): A list that can contain any type of elements. Returns: list: A new list with duplicates removed. result = [] for item in lst: if item not in result: result.append(item) return result"},{"question":"Create a program that prompts the user to input the length, width, and height of a triangular prism, and then calculates and displays the surface area of the prism. The program should include error handling to ensure that the user inputs valid numerical values for the dimensions. Additionally, the program should implement object-oriented programming principles such as encapsulation, inheritance, and polymorphism. Furthermore, the program should utilize a graphical user interface to display the result and provide an option for the user to input the dimensions of the prism using sliders or text boxes. Finally, the program should be thoroughly tested and documented with clear comments and instructions for use.","solution":"import tkinter as tk from tkinter import messagebox class Prism: def __init__(self, length, width, height): self.length = length self.width = width self.height = height def surface_area(self): raise NotImplementedError(\\"Subclass must implement abstract method\\") class TriangularPrism(Prism): def surface_area(self): base_area = 0.5 * self.length * self.height side_area1 = self.length * self.width side_area2 = self.height * self.width lateral_area = side_area1 + side_area2 total_surface_area = 2 * base_area + lateral_area return total_surface_area class PrismApp: def __init__(self, master): self.master = master master.title(\\"Triangular Prism Surface Area Calculator\\") self.label_length = tk.Label(master, text=\\"Length:\\") self.label_length.pack() self.entry_length = tk.Entry(master) self.entry_length.pack() self.label_width = tk.Label(master, text=\\"Width:\\") self.label_width.pack() self.entry_width = tk.Entry(master) self.entry_width.pack() self.label_height = tk.Label(master, text=\\"Height:\\") self.label_height.pack() self.entry_height = tk.Entry(master) self.entry_height.pack() self.calculate_button = tk.Button(master, text=\\"Calculate Surface Area\\", command=self.calculate_surface_area) self.calculate_button.pack() def calculate_surface_area(self): try: length = float(self.entry_length.get()) width = float(self.entry_width.get()) height = float(self.entry_height.get()) prism = TriangularPrism(length, width, height) surface_area = prism.surface_area() messagebox.showinfo(\\"Result\\", f\\"Surface Area: {surface_area}\\") except ValueError: messagebox.showerror(\\"Invalid input\\", \\"Please enter valid numerical values for the dimensions\\") if __name__ == \\"__main__\\": root = tk.Tk() app = PrismApp(root) root.mainloop()"},{"question":"Assume the function p(a, b, c, d) is already defined. This function takes four positive integers (a, b, c, d) as input and returns a float value. Now, you are required to create a function q(x, y, z) that takes three positive integers (x, y, z) as input and can call the function p(a, b, c, d) in such a way that it passes the values of x, x + 1, y and y + z as arguments to p(a, b, c, d) respectively.","solution":"def p(a, b, c, d): This is a placeholder function. In your application, this will be the function you are working with. return (a + b + c + d) / 4.0 def q(x, y, z): This function takes three positive integers (x, y, z) as input and calls the function p(a, b, c, d) with values of x, x + 1, y, and y + z as arguments respectively. return p(x, x + 1, y, y + z)"},{"question":"Write a function to create a list of N empty dictionaries, each with a unique identifier as a key and the value being another dictionary. The nested dictionary should contain M unique key-value pairs, where the keys are strings and values are integers. The keys should be generated from a given string by permuting the characters, and should be unique in both the outer and inner dictionaries. The function should also ensure there are no duplicate dictionaries in the list.","solution":"import itertools def generate_unique_keys(base_string, length): Generate unique keys of given length by permuting the base string. permutations = itertools.permutations(base_string, length) unique_keys = set(\\"\\".join(p) for p in permutations) return list(unique_keys) def create_unique_dicts(N, M, base_string): Create a list of N unique dictionaries, each with an identifier key (unique) and the value being another dictionary with M unique key-value pairs. if len(base_string) < M: raise ValueError(\\"The base_string should have at least M characters\\") unique_dicts = [] identifiers = generate_unique_keys(base_string, len(base_string)) for i in range(N): inner_dict_keys = generate_unique_keys(base_string, M) inner_dict = {key: idx for idx, key in enumerate(inner_dict_keys[:M])} unique_outer_key = identifiers[i] if len(inner_dict) != M: raise ValueError(\\"Unable to generate enough unique keys from the base_string for inner dictionary\\") unique_dicts.append({unique_outer_key: inner_dict}) return unique_dicts"},{"question":"How can I scan a given directory and its subdirectories for files with a specific extension using Python? I am looking for something similar to Linux's \\"find\\" command.","solution":"import os def find_files_with_extension(directory, extension): Scans the given directory and its subdirectories for files with the specified extension. Args: - directory (str): The directory to scan. - extension (str): The file extension to look for (e.g., '.txt'). Returns: - List[str]: A list of paths to the files with the specified extension. matching_files = [] for root, _, files in os.walk(directory): for file in files: if file.endswith(extension): matching_files.append(os.path.join(root, file)) return matching_files"},{"question":"Given a list of integers, sort them in increasing order without using any built-in sort functions. Also, implement an algorithm that sorts in O(n) time complexity if the list consists only of non-negative integers where each integer is less than a given value 'k'. For generic cases, apply a time complexity of O(nlogn) algorithm.","solution":"def sort_integers(arr, k=None): Sorts a list of integers. If k is provided, sorts only non-negative integers less than k in O(n) time complexity. Otherwise, uses merge sort for O(nlogn) complexity. :param arr: List of integers to be sorted. :param k: Maximum value for elements to apply O(n) sorting (if given). :return: Sorted list of integers. if k is not None and all(0 <= x < k for x in arr): return counting_sort(arr, k) else: return merge_sort(arr) def counting_sort(arr, k): Sorts a list of non-negative integers less than k using counting sort. :param arr: List of integers to be sorted. :param k: Maximum value for elements in the list. :return: Sorted list of integers. count = [0] * k for num in arr: count[num] += 1 sorted_arr = [] for i in range(k): sorted_arr.extend([i] * count[i]) return sorted_arr def merge_sort(arr): Sorts a list of integers using merge sort algorithm. :param arr: List of integers to be sorted. :return: Sorted list of integers. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merges two sorted lists into one sorted list. :param left: Sorted left half list. :param right: Sorted right half list. :return: Merged and sorted list. sorted_list = [] left_idx, right_idx = 0, 0 while left_idx < len(left) and right_idx < len(right): if left[left_idx] < right[right_idx]: sorted_list.append(left[left_idx]) left_idx += 1 else: sorted_list.append(right[right_idx]) right_idx += 1 sorted_list.extend(left[left_idx:]) sorted_list.extend(right[right_idx:]) return sorted_list"},{"question":"Write a Python function that incrementally adds values to a list in the location specified by an index and returns the modified list. If the index is out of bounds, append the value to the end of the list. The function should also handle negative indices similar to Python's negative indexing.","solution":"def add_value_to_list(lst, index, value): Incrementally adds the value to the list at the specified index. If the index is out of bounds, append the value to the end of the list. Handles negative indices similar to Python's negative indexing. Args: lst (list): List to be modified. index (int): Index at which the value should be added. value (any): Value to be added at the specified index. Returns: list: The modified list. if index < 0: index += len(lst) if 0 <= index < len(lst): lst.insert(index, value) else: lst.append(value) return lst"},{"question":"Write recursive function to generate all permutations of a given list of elements.","solution":"def generate_permutations(arr): Generates all permutations of a given list of elements. :param arr: List of elements to permute :return: List of all permutations if len(arr) == 0: return [[]] perms = [] for i in range(len(arr)): current = arr[i] remaining = arr[:i] + arr[i+1:] for perm in generate_permutations(remaining): perms.append([current] + perm) return perms"},{"question":"Sort the elements in an integer array in non-decreasing order, using only constant space complexity and without using any built-in sorting functions or libraries. The solution should have a time complexity of O(n log n) or better.","solution":"def quicksort(arr, low, high): Uses the quicksort algorithm to sort elements in non-decreasing order. if low < high: pi = partition(arr, low, high) # Recursively sort the elements before and after partition quicksort(arr, low, pi - 1) quicksort(arr, pi + 1, high) return arr def partition(arr, low, high): Partition the array for quicksort. i = low - 1 pivot = arr[high] for j in range(low, high): if arr[j] <= pivot: i = i + 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def sort_array(arr): Sorts an array using quicksort. return quicksort(arr, 0, len(arr) - 1)"},{"question":"Create a Python script to swap the values of two distinct integer variables without using a third variable or built-in functions. Take input from users for the variable values, ensure they are indeed integers and not equal.","solution":"def swap_values(a, b): Swaps the values of two variables a and b without using a third variable. if a == b: raise ValueError(\\"Values of a and b must be distinct.\\") if not isinstance(a, int) or not isinstance(b, int): raise TypeError(\\"Both a and b must be integers.\\") a, b = b, a return a, b"},{"question":"Given the tax/fee information matrix, item information matrix, order details matrix, and user location matrix, you are to write a script that would calculate the total order cost after taxes and fees. Some locations may implement additional fees such as a delivery fee or a handling fee. Your code must take all these factors into account. Remember that each item has an item ID and its cost per unit, and the order details include order ID's, customer ID's, item ID's, and quantity ordered. Location ID's should be used to map the user location matrix to the corresponding additional cost. The tax/fee information will also have a location ID and include tax percentages and additional fees that apply per location. You should confirm your output using [ test data ].","solution":"def calculate_total_order_cost(tax_fee_info, item_info, order_details, user_location): Calculate the total order cost after taxes and fees. Parameters: tax_fee_info (list of dict): contains information about tax percentages and additional fees for each location. item_info (list of dict): contains information about item ID and cost per unit. order_details (list of dict): contains information about order ID, customer ID, item ID, and quantity ordered. user_location (list of dict): contains information about customer ID and location ID. Returns: float: the total order cost after taxes and fees. # Create dictionaries for quick lookup item_cost = {item['item_id']: item['cost_per_unit'] for item in item_info} customer_location = {loc['customer_id']: loc['location_id'] for loc in user_location} location_tax_fee = {loc['location_id']: (loc['tax_percentage'], loc['additional_fees']) for loc in tax_fee_info} total_cost = 0.0 for order in order_details: customer_id = order['customer_id'] item_id = order['item_id'] quantity = order['quantity'] location_id = customer_location[customer_id] # Get item cost item_cost_per_unit = item_cost[item_id] item_total_cost = item_cost_per_unit * quantity # Get tax percentage and additional fees for the location tax_percentage, additional_fees = location_tax_fee[location_id] # Calculate total cost with tax cost_with_tax = item_total_cost * (1 + tax_percentage / 100) # Add any additional fees total_cost += cost_with_tax + additional_fees return total_cost # Test Data tax_fee_info = [ {'location_id': 1, 'tax_percentage': 10, 'additional_fees': 5}, {'location_id': 2, 'tax_percentage': 5, 'additional_fees': 2.5}, ] item_info = [ {'item_id': 101, 'cost_per_unit': 20}, {'item_id': 102, 'cost_per_unit': 15}, ] order_details = [ {'order_id': 1001, 'customer_id': 1, 'item_id': 101, 'quantity': 2}, {'order_id': 1002, 'customer_id': 2, 'item_id': 102, 'quantity': 5}, ] user_location = [ {'customer_id': 1, 'location_id': 1}, {'customer_id': 2, 'location_id': 2}, ] # Expected output: # For order 1001: (20 * 2) * 1.1 + 5 = 49 # For order 1002: (15 * 5) * 1.05 + 2.5 = 81.25"},{"question":"Given a 'before' and 'after' view of a series of commands being typed into a terminal window, develop a program that can reconstruct the likely sequence of commands. Consider the compressed and expanded views and test your program with the given terminal window sessions.","solution":"def reconstruct_commands(before, after): Reconstructs the likely sequence of commands. Args: before (str): The initial view in terminal. after (str): The final view in terminal after series of commands. Returns: list of str: The sequence of commands that could have been entered. len_before = len(before) len_after = len(after) # Early exit for simple cases if len_before == len_after: return [] if before == after else [f\\"Type '{after}'\\"] # We only consider new characters added to the \\"before\\" string in this simple case commands = [] i, j = 0, 0 while i < len_before and j < len_after: if before[i] == after[j]: i += 1 j += 1 else: commands.append(\\"Type '\\" + after[j] + \\"'\\") j += 1 while j < len_after: commands.append(\\"Type '\\" + after[j] + \\"'\\") j += 1 return commands"},{"question":"Write a programming code to display the following text in the console:\\"You are the master of your destiny. You create your own reality. Success is not an accident, it is a consequence of your actions. Do not regret your mistakes, for they are the stepping stones to your success.\\" However, you need to implement this using a recursive function and each word of the text must be printed one by one with a delay of 1 second between each word. Moreover, in order to make the text more meaningful, you also need to randomly capitalize letters in the sentence such that each word has a 50-50 probability of having its first letter capitalized or uncapitalized.","solution":"import time import random def print_text(words): Recursively prints words one by one with a delay of 1 second. if not words: return print(words[0]) time.sleep(1) print_text(words[1:]) def modify_and_print_text(text): Modifies the text by randomly capitalizing the first letter of each word and uses print_text to recursively print the modified text. words = text.split() modified_words = [] for word in words: if random.choice([True, False]): modified_words.append(word.capitalize()) else: modified_words.append(word.lower()) print_text(modified_words) if __name__ == \\"__main__\\": text = (\\"You are the master of your destiny. You create your own reality. \\" \\"Success is not an accident, it is a consequence of your actions. \\" \\"Do not regret your mistakes, for they are the stepping stones to your success.\\") modify_and_print_text(text)"},{"question":"Construct a concise code segment that will search through a supplied list of integer values and extract those that are prime numbers.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False sqrt_n = int(n ** 0.5) + 1 for i in range(3, sqrt_n, 2): if n % i == 0: return False return True def extract_primes(numbers): Extracts prime numbers from a list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Given two positive integers a and b, where a<b, devise a function in Python that will calculate all the perfect squares within the range [a,b]. Ensure that every step in this process is explicitly detailed for understanding. Next, take this function further by modifying it to also calculate all the perfect cubes within the same range.","solution":"import math def perfect_squares_and_cubes(a, b): Returns a tuple of two lists: - perfect squares between a and b (inclusive) - perfect cubes between a and b (inclusive) squares = [] cubes = [] # Calculate perfect squares in range [a, b] start_square = math.ceil(math.sqrt(a)) end_square = math.floor(math.sqrt(b)) for i in range(start_square, end_square + 1): square = i * i if a <= square <= b: squares.append(square) # Calculate perfect cubes in range [a, b] start_cube = math.ceil(a**(1/3)) end_cube = math.floor(b**(1/3)) for i in range(start_cube, end_cube + 1): cube = i * i * i if a <= cube <= b: cubes.append(cube) return squares, cubes"},{"question":"Write a Python program to take a list of numbers from the user and print the sum of even elements, sum of odd elements, and sum of elements at even indexes.","solution":"def sum_of_elements(numbers): Returns the sum of even elements, sum of odd elements, and sum of elements at even indexes. sum_even_elements = sum(num for num in numbers if num % 2 == 0) sum_odd_elements = sum(num for num in numbers if num % 2 != 0) sum_even_indexes = sum(numbers[i] for i in range(0, len(numbers), 2)) # 0, 2, 4, ... return sum_even_elements, sum_odd_elements, sum_even_indexes"},{"question":"Write a Python code that reads an XML file containing a list of books with attributes such as title, author, publication year, price, and genre, and outputs those that belong to the fantasy genre sorted by their publication year in ascending order.","solution":"import xml.etree.ElementTree as ET def get_fantasy_books_sorted_by_year(xml_file_path): Reads an XML file containing books and returns a list of dictionaries of fantasy books sorted by their publication year in ascending order. :param xml_file_path: Path to the XML file. :return: List of dictionaries with fantasy books sorted by publication year. tree = ET.parse(xml_file_path) root = tree.getroot() books = [] for book in root.findall('book'): genre = book.find('genre').text if genre.lower() == 'fantasy': title = book.find('title').text author = book.find('author').text year = int(book.find('year').text) price = float(book.find('price').text) books.append({ 'title': title, 'author': author, 'year': year, 'price': price, 'genre': genre }) books_sorted = sorted(books, key=lambda x: x['year']) return books_sorted"},{"question":"Given three positive integers, write a function in Python using a single line of code to return the largest number among those integers.","solution":"def find_largest(a, b, c): Returns the largest number among the three given integers. return max(a, b, c)"},{"question":"Write a Python program to convert text into ASCII values. The program should accept a sentence as input and should display the ASCII values of all the characters in the sentence, separated by spaces. The program should ignore spaces in the input sentence.","solution":"def text_to_ascii(input_text): Convert text to a string of ASCII values separated by spaces. ascii_values = [str(ord(char)) for char in input_text if char != ' '] return ' '.join(ascii_values)"},{"question":"Write a Python function that takes in a string of HTML code and an element name as inputs. The function should return the inner HTML content of the specified element. Assume that the HTML code will always contain only one occurrence of the specified element.","solution":"def get_inner_html(html, element): Returns the inner HTML content of the specified element from the given HTML string. Assumes the element occurs only once in the HTML string. html: str - The HTML code as a string element: str - The name of the element whose inner HTML content is to be retrieved return: str - The inner HTML content of the specified element start_tag = f\\"<{element}>\\" end_tag = f\\"</{element}>\\" start_index = html.find(start_tag) + len(start_tag) end_index = html.find(end_tag) if start_index == -1 or end_index == -1: return \\"\\" return html[start_index:end_index]"},{"question":"Introduce a boolean condition to change the background color to red if the value of a variable named \\"score\\" exceeds 100. Additionally, if the score is between 80 and 100 (inclusive), change the background color to yellow, and if the score is below 80, change the background color to green. In all cases, the score should not be allowed to exceed 200 or go below 0. Consider creating a function to implement this logic and allow for reusability.","solution":"def evaluate_score(score): Evaluates the score and determines the appropriate background color. If the score exceeds 100, the background color is red. If the score is between 80 and 100 (inclusive), the background color is yellow. If the score is below 80, the background color is green. Additionally, the score is constrained between 0 and 200. # Ensure the score is within the allowed range if score > 200: score = 200 elif score < 0: score = 0 # Determine the background color based on the score if score > 100: background_color = \\"red\\" elif 80 <= score <= 100: background_color = \\"yellow\\" else: background_color = \\"green\\" return background_color"},{"question":"https://leetcode.com/problems/count-servers-that-communicate/","solution":"def countServers(grid): Counts the number of servers that can communicate with at least one other server. :param grid: List[List[int]], a 2D list representing the grid of servers. :return: int, the number of servers that can communicate with at least one other server. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) row_count = [0] * m col_count = [0] * n # Count the number of servers in each row and column for i in range(m): for j in range(n): if grid[i][j] == 1: row_count[i] += 1 col_count[j] += 1 # Count the number of servers that can communicate with other servers total_servers = 0 for i in range(m): for j in range(n): if grid[i][j] == 1 and (row_count[i] > 1 or col_count[j] > 1): total_servers += 1 return total_servers"},{"question":"Create a Python program to print the elements of a given list in reverse order without using any built-in Python functions or methods for list manipulation.","solution":"def reverse_list(arr): Returns a new list with the elements of the input list in reverse order. reversed_arr = [] for i in range(len(arr) - 1, -1, -1): reversed_arr.append(arr[i]) return reversed_arr"},{"question":"Create a function in Python that converts a hexadecimal number to a binary number. However, the function should not use any built-in Python functions or libraries for the conversion.","solution":"def hex_to_bin(hex_num): Converts a hexadecimal number to a binary number without using any built-in functions or libraries for the conversion. # Dictionary to map hex characters to binary strings hex_to_bin_mapping = { '0': '0000', '1': '0001', '2': '0010', '3': '0011', '4': '0100', '5': '0101', '6': '0110', '7': '0111', '8': '1000', '9': '1001', 'A': '1010', 'B': '1011', 'C': '1100', 'D': '1101', 'E': '1110', 'F': '1111' } # Convert the hexadecimal number to uppercase to match the keys in the dictionary hex_num = hex_num.upper() # Initialize the binary number string bin_num = \\"\\" # Iterate over each character in the hexadecimal number for char in hex_num: # Append the corresponding binary string to the result bin_num += hex_to_bin_mapping[char] return bin_num"},{"question":"Generate a recursive function for computing the Fibonacci sequence. However, you are not allowed to use any loops or if statements in your solution.","solution":"def fibonacci(n, a=0, b=1): Returns the nth Fibonacci number recursively. Note: This implementation uses a helper approach with default parameters. return a if n == 0 else fibonacci(n-1, b, a + b)"},{"question":"Write code to generate a specific type of random password, which must include at least one capital letter, one small letter, one digit, one special character, and one non-english character.","solution":"import random import string def generate_password(length=12): Generate a random password with at least one lowercase letter, one uppercase letter, one digit, one special character, and one non-English character. :param length: Length of the password to be generated, minimum is 5 :return: A string representing the generated password if length < 5: raise ValueError(\\"Password length must be at least 5 characters\\") # Pool of characters lower = string.ascii_lowercase upper = string.ascii_uppercase digits = string.digits special = string.punctuation non_english = 'ñåøčš' # A small sample of non-English characters # Ensure the password has at least one of each required character type password = [ random.choice(lower), random.choice(upper), random.choice(digits), random.choice(special), random.choice(non_english) ] # Fill the rest of the password length with random choices from all pools all_characters = lower + upper + digits + special + non_english remaining_length = length - len(password) password += random.choices(all_characters, k=remaining_length) # Shuffle the list to mix up the order of characters random.shuffle(password) return ''.join(password)"},{"question":"Edit this piece of Python code to implement a function that finds the median of a list of numbers. The function should return the median value. If the list has an even number of elements, the median should be the average of the two middle numbers. Your implementation should have a time complexity of O(n log n) or better and should not use any built-in libraries or functions for sorting or calculating the median.","solution":"def find_median(nums): Returns the median of a list of numbers. :param nums: List of numbers. :return: Median value. def quickselect(arr, left, right, k): if left == right: return arr[left] pivot_index = partition(arr, left, right) if k == pivot_index: return arr[k] elif k < pivot_index: return quickselect(arr, left, pivot_index - 1, k) else: return quickselect(arr, pivot_index + 1, right, k) def partition(arr, left, right): pivot = arr[right] store_index = left for i in range(left, right): if arr[i] < pivot: arr[store_index], arr[i] = arr[i], arr[store_index] store_index += 1 arr[store_index], arr[right] = arr[right], arr[store_index] return store_index n = len(nums) if n % 2 == 1: return quickselect(nums, 0, n - 1, n // 2) else: return 0.5 * (quickselect(nums, 0, n - 1, n // 2 - 1) + quickselect(nums, 0, n - 1, n // 2))"},{"question":"Write a function to compute the Fibonacci numbers and the sum of their squares. Additionally, ensure that the function is optimized to have a time complexity of O(n) and a space complexity of O(1). However, you are not allowed to use addition, multiplication, or any arithmetic operators (+, -, *, /) to perform arithmetic calculations. Instead, you must use bit manipulation and logical operators to compute the Fibonacci numbers and the sum of their squares.","solution":"def add_bitwise(x, y): Performs addition using bitwise operations while y: carry = x & y x = x ^ y y = carry << 1 return x def multiply_bitwise(x, y): Performs multiplication using bitwise operations result = 0 while y: if y & 1: result = add_bitwise(result, x) x <<= 1 y >>= 1 return result def sum_of_squares_fibonacci(n): Returns the sum of squares of the first n Fibonacci numbers if n < 0: return 0 a, b = 0, 1 sum_squares = 0 for _ in range(n + 1): sum_squares = add_bitwise(sum_squares, multiply_bitwise(a, a)) a, b = b, add_bitwise(a, b) return sum_squares"},{"question":"Given a list of strings, write a function that reverses each string in the list. Additionally, consider edge cases of your input i.e. handling special characters, numerics, empty and long strings (for instance, strings exceeding 10,000 characters in length).","solution":"def reverse_strings_in_list(strings): Reverses each string in the provided list. Args: strings (list of str): The list of strings to be reversed. Returns: list of str: A list containing each string reversed. return [s[::-1] for s in strings]"},{"question":"Design a PyTorch model, using the torchvision library, for object detection. The model should use the Faster R-CNN architecture and be trained on the COCO dataset. In addition, implement a data augmentation pipeline that includes random horizontal flips, random brightness and contrast adjustments, and random rotation.","solution":"import torch import torchvision from torchvision.models.detection import FasterRCNN from torchvision.models.detection.rpn import AnchorGenerator from torchvision.transforms import functional as F import torchvision.transforms as T class ObjectDetectionModel: def __init__(self, num_classes): # Load a pre-trained model for classification and return only the features backbone = torchvision.models.resnet50(pretrained=True) backbone = torch.nn.Sequential(*list(backbone.children())[:-2]) backbone.out_channels = 2048 # Create a Faster R-CNN model and use the backbone rpn_anchor_generator = AnchorGenerator( sizes=((32, 64, 128, 256, 512),), aspect_ratios=((0.5, 1.0, 2.0),) * 5, ) roi_pooler = torchvision.ops.MultiScaleRoIAlign(featmap_names=[0], output_size=7, sampling_ratio=2) self.model = FasterRCNN(backbone, num_classes=num_classes, rpn_anchor_generator=rpn_anchor_generator, box_roi_pool=roi_pooler) def get_model(self): return self.model def get_transform(train): transforms = [] if train: transforms.append(T.RandomHorizontalFlip(0.5)) transforms.append(T.ColorJitter(brightness=0.5, contrast=0.5)) transforms.append(T.RandomRotation(10)) transforms.append(T.ToTensor()) return T.Compose(transforms)"},{"question":"In a music rhythm game, there are 4 game levels, and the default scores given to a player on passing a level are 50 points for the first level, 100 points for the second level, and 150 points for the third and fourth levels. A programmer wants to increase the scores proportionally by 25% using Python. Write a program in Python that can achieve this, and also include basic functions to add, subtract, and multiply scores.","solution":"# Function to increase the scores proportionally by 25% def increase_scores(score): Increases a given score by 25% return score * 1.25 # Functions to perform basic arithmetic operations def add_scores(score1, score2): Returns the sum of two scores return score1 + score2 def subtract_scores(score1, score2): Returns the difference between two scores return score1 - score2 def multiply_scores(score1, score2): Returns the product of two scores return score1 * score2 # Default scores for the levels level_scores = [50, 100, 150, 150] # Increase scores for all levels increased_scores = [increase_scores(score) for score in level_scores]"},{"question":"Given a text file containing multiple data entries, each including first name, surname and occupation segmented by commas and each entry delineated by a semicolon, write a python function to parse this file and output a list of dictionaries containing each first name, surname and occupation. Your output should also include error handling for any entries which do not conform to the expected format and it should manage cases where the file cannot be accessed due to various file I/O errors.","solution":"def parse_data_file(file_path): Parses the text file at file_path and returns a list of dictionaries with keys 'first_name', 'surname', and 'occupation'. Each entry in the file is expected to be in the format: first_name,surname,occupation; Parameters: file_path (str): The path to the text file. Returns: list of dict: A list of dictionaries with keys 'first_name', 'surname', and 'occupation'. entries = [] try: with open(file_path, 'r') as file: data = file.read().strip() if not data: return entries # Return an empty list if the file is empty entry_list = data.split(';') for entry in entry_list: if entry.strip(): # Ignore empty segments parts = entry.split(',') if len(parts) == 3: first_name, surname, occupation = parts entries.append({ 'first_name': first_name.strip(), 'surname': surname.strip(), 'occupation': occupation.strip() }) else: print(f\\"Skipping malformed entry: {entry}\\") return entries except FileNotFoundError: print(f\\"File not found: {file_path}\\") return [] except IOError as e: print(f\\"I/O error({e.errno}): {e.strerror}\\") return []"},{"question":"Develop a function in Python to remove sequential duplicates from a list preserving original order. The list can contain strings and integers. For example, the list is: ['Hello', 'World', 'World', 'This', 5, 5, 'Is', 'Is', 'Sample', 10, 10].","solution":"def remove_sequential_duplicates(input_list): Removes sequential duplicates from the list while preserving original order. if not input_list: return input_list result = [input_list[0]] for item in input_list[1:]: if item != result[-1]: result.append(item) return result"},{"question":"Design a program using your chosen programming language, preferably with object-oriented principles, which implements an efficient solution to check for perfect numbers within a given range. This program should incorporate exception handling for incorrect inputs and include comprehensive test cases to verify its functionality. Additionally, discuss the algorithmic complexities in terms of time and space of your solution.","solution":"class PerfectNumberChecker: def __init__(self, start, end): if not isinstance(start, int) or not isinstance(end, int): raise ValueError(\\"The range values must be integers.\\") if start <= 0 or end <= 0: raise ValueError(\\"Range values must be positive integers.\\") if start > end: raise ValueError(\\"The start of the range must be less than or equal to the end.\\") self.start = start self.end = end def is_perfect(self, number): Checks if a number is a perfect number. if number < 1: return False divisors_sum = sum([i for i in range(1, number) if number % i == 0]) return divisors_sum == number def find_perfect_numbers(self): Finds all perfect numbers within the specified range. perfect_numbers = [] for num in range(self.start, self.end + 1): if self.is_perfect(num): perfect_numbers.append(num) return perfect_numbers"},{"question":"Given a positive integer n, write a recursive function to compute the nth Fibonacci number. Additionally, implement a memoization technique using a hash map to improve efficiency.","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using recursion with memoization. Parameters: n (int): the position of the desired Fibonacci number (positive integer) Returns: int: the nth Fibonacci number if memo is None: memo = {} if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") if n in memo: return memo[n] if n == 1: return 0 elif n == 2: return 1 else: memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a code that accepts two arrays. The first one has a set of integers, and the second one has a set of divisors. The function should return a dictionary where keys are the divisors and values are the count of integers from the first array which are divisible by the corresponding key. Additionally, the function should handle edge cases where an array may be empty or contain a zero. It is guaranteed that the \\"divisors\\" array will only contain positive numbers.","solution":"def count_divisibles(integers, divisors): For each divisor in divisors, count how many numbers in integers are divisible by that divisor. :param integers: List of integers :param divisors: List of positive integers (divisors) :return: Dictionary with divisors as keys and counts as values result = {} for divisor in divisors: count = sum(1 for number in integers if number % divisor == 0) result[divisor] = count return result"},{"question":"Construct a python program to extract and print all substrings from a given string.","solution":"def extract_substrings(s): Extracts and returns all substrings from a given string. :param s: The input string. :return: A list containing all substrings of the input string. substrings = [] n = len(s) for i in range(n): for j in range(i+1, n+1): substrings.append(s[i:j]) return substrings"},{"question":"Write a Python function named \\"is_not_same_prime\\" that takes two arguments, \\"num1\\" and \\"num2\\". The function should return True if either \\"num1\\" or \\"num2\\" is not a prime number, and False if both are prime numbers.","solution":"def is_prime(n): Helper function to check if a number n is a prime number. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def is_not_same_prime(num1, num2): Returns True if either num1 or num2 is not a prime number. Returns False if both num1 and num2 are prime numbers. return not (is_prime(num1) and is_prime(num2))"},{"question":"Write a short module in Python that generates random floating point numbers in the range [0,1]. Then, filter these numbers such that only those that fall into the top 10% of the range are returned. Ensure that the randomness of number generation is evenly distributed and the function is capable of returning a specified number of top 10% values.","solution":"import random def generate_top_10_percent_floats(count): Generates 'count' number of random floating point numbers in the range [0, 1], and returns those that fall into the top 10% of the range. numbers = [random.random() for _ in range(count)] top_10_percent_threshold = 0.9 top_10_percent_numbers = [num for num in numbers if num >= top_10_percent_threshold] return top_10_percent_numbers"},{"question":"How can I check if two given strings are anagrams of each other in Python? For instance, given the strings \\"iceman\\" and \\"cinema\\", I need a function that returns True if they are anagrams and False if they are not.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, False otherwise. # Convert both strings to lowercase to make the comparison case insensitive str1 = str1.lower() str2 = str2.lower() # Check if the sorted characters of both strings are the same return sorted(str1) == sorted(str2)"},{"question":"Author a Python function utilizing recursive methodology to calculate the factorial of a specified integer. A factorial is the product of a number and all the numbers below it, for instance, the factorial of four (4) is 4 * 3 * 2 * 1 which equals 24.","solution":"def factorial(n): Returns the factorial of a given positive integer n. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Given a list of rectangles, write Python code to find the rectangle with the largest area.","solution":"def largest_rectangle_area(rectangles): Find the rectangle with the largest area. Params: rectangles (list of tuple): A list of tuples where each tuple contains two integers representing the width and height of a rectangle. Returns: tuple: A tuple containing the width and height of the rectangle with the largest area. if not rectangles: return None # Return None if the list is empty max_area = 0 largest_rectangle = None for rectangle in rectangles: width, height = rectangle area = width * height if area > max_area: max_area = area largest_rectangle = rectangle return largest_rectangle"},{"question":"I need help with a coding interview question from Facebook*. The question is: Given a binary tree t, determine whether it is symmetric around its center, i.e. each side mirrors the other.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_symmetric(root): Determines if a binary tree is symmetric around its center. def is_mirror(t1, t2): if not t1 and not t2: return True if not t1 or not t2: return False return (t1.val == t2.val) and is_mirror(t1.right, t2.left) and is_mirror(t1.left, t2.right) if not root: return True return is_mirror(root.left, root.right)"},{"question":"Create a Facebook Messenger Bot that can respond to an incoming message in 5 languages with a randomly selected quote.","solution":"import random # Define quotes in different languages quotes = { 'en': [\\"Keep your face always toward the sunshine—and shadows will fall behind you.\\", \\"The only way to do great work is to love what you do.\\", \\"Life is what happens when you're busy making other plans.\\", \\"The purpose of our lives is to be happy.\\", \\"To succeed in life, you need two things: ignorance and confidence.\\"], 'es': [\\"Mantén tu rostro siempre hacia el sol y las sombras caerán detrás de ti.\\", \\"La única manera de hacer un gran trabajo es amar lo que haces.\\", \\"La vida es lo que sucede mientras estás ocupado haciendo otros planes.\\", \\"El propósito de nuestras vidas es ser felices.\\", \\"Para tener éxito en la vida, necesitas dos cosas: ignorancia y confianza.\\"], 'fr': [\\"Gardez toujours votre visage tourné vers le soleil, et les ombres tomberont derrière vous.\\", \\"La seule façon de faire du bon travail est d'aimer ce que vous faites.\\", \\"La vie, c'est ce qui arrive quand on est occupé à faire d'autres plans.\\", \\"Le but de notre vie est d'être heureux.\\", \\"Pour réussir dans la vie, vous avez besoin de deux choses: l'ignorance et la confiance.\\"], 'de': [\\"Halten Sie Ihr Gesicht immer in Richtung Sonne – und die Schatten werden hinter Ihnen fallen.\\", \\"Der einzige Weg, großartige Arbeit zu leisten, ist zu lieben, was man tut.\\", \\"Das Leben ist, was passiert, während du andere Pläne machst.\\", \\"Der Zweck unseres Lebens ist es, glücklich zu sein.\\", \\"Um im Leben erfolgreich zu sein, brauchen Sie zwei Dinge: Ignoranz und Vertrauen.\\"], 'it': [\\"Tieni sempre il viso rivolto verso il sole e le ombre cadranno dietro di te.\\", \\"L'unico modo per fare un ottimo lavoro è amare ciò che fai.\\", \\"La vita è ciò che accade mentre sei occupato a fare altri piani.\\", \\"Lo scopo della nostra vita è essere felici.\\", \\"Per avere successo nella vita, hai bisogno di due cose: ignoranza e fiducia.\\"] } def get_random_quote(language_code): Returns a randomly selected quote in the specified language. :param language_code: str, Language code in which to return the quote. :return: str, A quote in the specified language. if language_code not in quotes: raise ValueError(\\"Unsupported language code\\") return random.choice(quotes[language_code]) def respond_to_message(message, language_code): Responds to an incoming message with a random quote in the specified language. :param message: str, Incoming message (not used in this operation). :param language_code: str, Language code for the response. :return: str, A quote in the specified language. return get_random_quote(language_code)"},{"question":"Write a code to create an intersection of two given lists List1 and List2 without using built-in functions or modules for handling collections/arrays. Make sure your solution also avoids duplicates in the final list.","solution":"def intersection(list1, list2): Returns the intersection of two lists without duplicates. intersected_list = [] for item in list1: if item in list2 and item not in intersected_list: intersected_list.append(item) return intersected_list"},{"question":"Translate the following pseudocode into a python function that takes an array as input and returns the first element in the array that is greater than zero.","solution":"def first_greater_than_zero(arr): Returns the first element in the array that is greater than zero. If no such element exists, returns None. for element in arr: if element > 0: return element return None"},{"question":"Develop a programming code that will generate an array populated with twenty random integer values, each lying within the numerical boundaries of 0 to 99. Then, implement a function that identifies the three largest numbers in the array, the three smallest numbers, and calculates the average of all the numbers. Finally, demonstrate how your function can be used by calling it with the generated array as the argument and printing out the results. Use Python language to complete this task. Ensure your solution is optimized for efficiency.","solution":"import random def generate_random_array(size=20, lower_bound=0, upper_bound=99): Generates an array of random integers within the specified bounds. :param size: int - Number of elements in the array (default 20) :param lower_bound: int - Lower bound for random values (default 0) :param upper_bound: int - Upper bound for random values (default 99) :return: list of int - Array of random integers array = [random.randint(lower_bound, upper_bound) for _ in range(size)] return array def analyze_array(array): Analyzes the array to find the three largest, three smallest numbers and the average. :param array: list of int - Array of integers to analyze :return: tuple of (list of int, list of int, float) - 3 largest numbers, 3 smallest numbers and average of all numbers if len(array) < 3: raise ValueError(\\"Array must contain at least 3 elements\\") sorted_array = sorted(array) three_largest = sorted_array[-3:] three_smallest = sorted_array[:3] average = sum(array) / len(array) return three_largest, three_smallest, average if __name__ == \\"__main__\\": random_array = generate_random_array() print(f\\"Generated array: {random_array}\\") three_largest, three_smallest, average = analyze_array(random_array) print(f\\"Three largest numbers: {three_largest}\\") print(f\\"Three smallest numbers: {three_smallest}\\") print(f\\"Average of all numbers: {average}\\")"},{"question":"I would like you to implement the Levenshtein distance algorithm to compare two strings. However, you are not allowed to use dynamic programming, recursion, or any pre-existing string comparison functions. Additionally, the algorithm should have a time complexity of O(m*n) and a space complexity of O(1) where m and n are the lengths of the input strings. For a further challenge, ensure that your implementation is both case-insensitive and it ignores special characters and numbers.","solution":"def preprocess_string(s): Takes a string and returns a lowercase version with only alphabetic characters. return ''.join(char for char in s.lower() if char.isalpha()) def levenshtein_distance(str1, str2): Calculates the Levenshtein distance between two strings after preprocessing. str1 = preprocess_string(str1) str2 = preprocess_string(str2) m, n = len(str1), len(str2) # Initialize the first row prev = list(range(n + 1)) # Calculate subsequent rows using the previous row only for i in range(1, m + 1): current = [i] * (n + 1) for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: current[j] = prev[j - 1] # characters match else: current[j] = 1 + min(prev[j - 1], prev[j], current[j - 1]) # characters do not match prev = current return prev[n]"},{"question":"Create a simple Python web server that listens on port 8080 and responds with 'Hello, World!' when accessed via a web browser.","solution":"from http.server import SimpleHTTPRequestHandler, HTTPServer class HelloHandler(SimpleHTTPRequestHandler): def do_GET(self): self.send_response(200) self.send_header('Content-type', 'text/plain') self.end_headers() self.wfile.write(b'Hello, World!') def run(server_class=HTTPServer, handler_class=HelloHandler, port=8080): server_address = ('', port) httpd = server_class(server_address, handler_class) print(f'Starting httpd server on port {port}...') httpd.serve_forever() if __name__ == '__main__': run()"},{"question":"Create a script that takes a JSON array as input, decodes it into a Python object, then encodes it again as an ASCII string.","solution":"import json def json_to_ascii(json_array_str): Takes a JSON array string as input, decodes it into a Python object, then encodes it again as an ASCII string. # Decode JSON array to Python object python_obj = json.loads(json_array_str) # Encode Python object back to ASCII JSON string ascii_json_str = json.dumps(python_obj, ensure_ascii=True) return ascii_json_str"},{"question":"Given a string, write a code that checks it for palindrome in O(1) space complexity and O(n) time complexity. Additionally, the code should only use bitwise operations for string manipulation.","solution":"def is_palindrome(s): Checks if the given string is a palindrome using O(1) space complexity and O(n) time complexity. Only bitwise operations are used for string manipulation. # Pointers to start and end of the string left = 0 right = len(s) - 1 # Check for palindrome while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True"},{"question":"Create a program that generates an array containing five random decimal numbers. Each number should be rounded to two decimal places and must be between zero and one. Ensure that the sum of all the numbers in the array is less than or equal to three.","solution":"import random def generate_random_array(): Generates an array containing five random decimal numbers. Each number is rounded to two decimal places and is between 0 and 1. Ensures that the sum of all numbers in the array is less than or equal to three. while True: array = [round(random.uniform(0, 1), 2) for _ in range(5)] if sum(array) <= 3: return array"},{"question":"Would you please help me write a python script to batch convert tiff files in a directory to jpeg files?","solution":"from PIL import Image import os def convert_tiff_to_jpeg(directory): Converts all TIFF files in a specified directory to JPEG format. :param directory: Path to the directory containing TIFF files. if not os.path.isdir(directory): raise ValueError(f\\"The provided directory '{directory}' does not exist.\\") for file_name in os.listdir(directory): if file_name.lower().endswith('.tiff') or file_name.lower().endswith('.tif'): tiff_path = os.path.join(directory, file_name) with Image.open(tiff_path) as img: jpeg_path = os.path.join(directory, os.path.splitext(file_name)[0] + '.jpeg') img.convert(\\"RGB\\").save(jpeg_path, \\"JPEG\\")"},{"question":"Sort an array of integers in ascending order by implementing a Quick Sort algorithm. However, you are not allowed to use any recursive functions or additional data structures (such as arrays or stacks) to implement the algorithm. You can only use iterative methods to achieve the desired result.","solution":"def quick_sort_iterative(arr): Sorts an array of integers in ascending order using the QuickSort algorithm iteratively. if len(arr) <= 1: return arr stack = [(0, len(arr) - 1)] while stack: start, end = stack.pop() if start < end: pivot_idx = partition(arr, start, end) stack.append((start, pivot_idx - 1)) stack.append((pivot_idx + 1, end)) return arr def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] < pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1"},{"question":"Suppose we have two linked lists, listA and listB, which represent integer values ranging from 1 to 100,000, and happen to have cycles in them. Your task is to design a function, modifyLists(listA, listB), which will perform a series of operations including map (or data structure), node manipulation, Floyd's cycle finding algorithm, and Josephus problem to output the cycle's length and starting node of listA. However, your function must only return the cycle's length and starting node if that of listA is longer than listB's. If listB does not have a cycle, you still need to return the cycle's length and starting node of listA. Please refer to the following example and code snippet for a better understanding.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def detectCycle(head): Detects the cycle in a linked list using Floyd's Cycle-Finding Algorithm. Returns the starting node of the cycle and the cycle length. If there is no cycle, returns (None, 0). slow, fast = head, head cycle_detected = False # Detect cycle using Floyd's algorithm while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: cycle_detected = True break if not cycle_detected: return None, 0 # Find the start of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next start_of_cycle = slow # Calculate the length of the cycle cycle_length = 1 fast = slow.next while slow != fast: fast = fast.next cycle_length += 1 return start_of_cycle, cycle_length def modifyLists(listA, listB): Modify the given linked lists and return the cycle's length and starting node of listA if listA's cycle is longer than that of listB or if listB does not have a cycle. startA, lengthA = detectCycle(listA) startB, lengthB = detectCycle(listB) if lengthA > lengthB: return lengthA, startA else: return lengthA, startA # Even if listA's cycle is not longer than listB, return listA's cycle"},{"question":"Given a list of names, write a Python function called \`add_exclamation\` that adds an exclamation mark at the end of each name in the list. The function should return the modified list of names. Provide some test cases for the function.","solution":"def add_exclamation(names): Adds an exclamation mark at the end of each name in the list. :param names: List of names :return: List of names with an exclamation mark added to each name return [name + '!' for name in names]"},{"question":"Create a python code that estimates the value of Pi using a Monte Carlo Simulation.","solution":"import random def estimate_pi(num_samples): Estimates the value of Pi using the Monte Carlo method. Parameters: num_samples (int): The number of random points to generate. Returns: float: The estimated value of Pi. inside_circle = 0 for _ in range(num_samples): # Generate a random point (x, y) x = random.uniform(-1, 1) y = random.uniform(-1, 1) # Check if the point is inside the unit circle if x**2 + y**2 <= 1: inside_circle += 1 # Pi is approximately 4 times the ratio of points inside the circle to total points return 4 * inside_circle / num_samples"},{"question":"Import libraries numpy and os. Then, define a function 'load_data' that loads data from '.npy' files in a given directory and returns it as a numpy array. The function should have two parameters: 'dir_path' (the path to the directory containing the '.npy' files) and 'sort' (a boolean value indicating whether the returned array should be sorted based on the filenames before loading). Before loading the data, the function should check if the 'dir_path' exists and is not empty. If the directory is empty, the function should raise a custom Exception with a message \\"No .npy files found in the directory\\". Also, the filenames should be printed as they are being loaded. In addition, the function should handle cases where the directory contains files with extensions other than '.npy' by skipping those files and printing a warning message for each skipped file. Finally, the function should handle cases where the directory path is not valid by raising a custom Exception with a message \\"Invalid directory path\\".","solution":"import numpy as np import os class CustomException(Exception): pass def load_data(dir_path, sort=False): if not os.path.exists(dir_path): raise CustomException(\\"Invalid directory path\\") npy_files = [file for file in os.listdir(dir_path) if file.endswith('.npy')] if not npy_files: raise CustomException(\\"No .npy files found in the directory\\") if sort: npy_files.sort() data = [] for file in npy_files: print(f\\"Loading file: {file}\\") data.append(np.load(os.path.join(dir_path, file))) return np.array(data)"},{"question":"Write a Python function that takes a list of sorted distinct integers and an integer k as inputs and finds a pair of numbers in the list that adds up to k. The function should return the pair as a list. If no such pair exists, it should return an empty list.","solution":"def find_pair_with_sum(nums, k): Finds a pair of numbers in a sorted list of distinct integers that adds up to k. Parameters: nums (list): A sorted list of distinct integers. k (int): The target sum. Returns: list: A list containing the pair of numbers that add up to k, or an empty list if no such pair exists. left, right = 0, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] if current_sum == k: return [nums[left], nums[right]] elif current_sum < k: left += 1 else: right -= 1 return []"},{"question":"Please code the manufacturing process for sintered NdFeB magnetic material. The process should include at least four stages: process design (pd), melt spinning (ms), powder grinding (pg), and sintering (si). After each stage, print out a confirmation message. If the quality of the final product does not meet the standard, the program should stop and output a reject message. If the quality meets the standard, print out a pass message. Please use the Python language to code this process.","solution":"def process_design(): # Dummy implementation of process design print(\\"Process Design completed.\\") return True def melt_spinning(): # Dummy implementation of melt spinning print(\\"Melt Spinning completed.\\") return True def powder_grinding(): # Dummy implementation of powder grinding print(\\"Powder Grinding completed.\\") return True def sintering(): # Dummy implementation of sintering (with a simplified quality check) print(\\"Sintering completed.\\") # Simplified quality check, assuming the final product meets standard quality = \\"PASS\\" # Change to \\"REJECT\\" to simulate failure return quality def manufacture_NdFeB_magnet(): if not process_design(): print(\\"Process Design failed.\\") return \\"REJECT\\" if not melt_spinning(): print(\\"Melt Spinning failed.\\") return \\"REJECT\\" if not powder_grinding(): print(\\"Powder Grinding failed.\\") return \\"REJECT\\" quality = sintering() if quality == \\"REJECT\\": print(\\"The product does not meet the quality standards.\\") return \\"REJECT\\" else: print(\\"The product meets the quality standards.\\") return \\"PASS\\""},{"question":"Create a Python function called find_max_min(numbers) that takes a list of numbers as an argument and returns both the maximum and minimum values in the list. If the list is empty, the function should return an empty list.","solution":"def find_max_min(numbers): Returns a list containing the maximum and minimum values in the list of numbers. If the list is empty, returns an empty list. if not numbers: return [] return [max(numbers), min(numbers)]"},{"question":"Given a list of strings and a string value, write a Python program to append the index of the given value to the list of strings for every occurrence of the value.","solution":"def append_index_occurrences(strings, value): Appends the index of the given value to the list of strings for every occurrence of the value. Parameters: strings (list of str): The list of strings. value (str): The value to search for in the list of strings. Returns: list of str: The modified list of strings with index appended to each occurrence of the value. for index, item in enumerate(strings): if item == value: strings[index] = f\\"{item}{index}\\" return strings"},{"question":"Imagine you're a software developer tasked with creating a new version control system. Your system can only create a commit of a specific file if the file existed in the previous commit. Additionally, if the file wasn't removed anywhere on the commit history line, the commit should always be possible.","solution":"class VersionControlSystem: def __init__(self): self.commit_history = [] self.files_in_system = set() def create_commit(self, file_name): if file_name in self.files_in_system: self.commit_history.append(file_name) return True return False def add_file(self, file_name): self.files_in_system.add(file_name) def remove_file(self, file_name): if file_name in self.files_in_system: self.files_in_system.remove(file_name) def file_exists(self, file_name): return file_name in self.files_in_system"},{"question":"Write a script in Python to find the geometric mean of all the numbers in a list of integers. Additionally, the script should handle exceptions for non-numeric values and inform the user. The script must also check if the list is empty and prompt for input again if so.","solution":"import math def geometric_mean(numbers): Returns the geometric mean of a list of numbers. try: product = 1 for number in numbers: if not isinstance(number, (int, float)): raise ValueError(f'Non-numeric value detected: {number}') product *= number n = len(numbers) if n == 0: raise ValueError(\\"The list is empty. Cannot calculate geometric mean.\\") return math.pow(product, 1/n) except ValueError as e: return str(e) def validate_input(numbers): if not numbers: raise ValueError(\\"The list is empty. Please provide a non-empty list.\\") for number in numbers: if not isinstance(number, (int, float)): raise ValueError(f\\"Invalid input detected: {number}. Please provide a list of numbers.\\") numbers = [1, 2, 3, 4, 5] try: validate_input(numbers) result = geometric_mean(numbers) print(f\\"The geometric mean is: {result}\\") except ValueError as e: print(e)"},{"question":"Write a python program to print a pattern like pyramid using stars, where the number of stars vary with each row, forming a pyramid shape, and the stars increase odd number times in each row. Additionally, the stars must be surrounded by a specific character input by the user, which will serve as the borders of the pyramid. The user should be able to specify the height of the pyramid as the input, which should also be validated to be an odd number.","solution":"def print_pyramid(height, border_char): Prints a pyramid pattern with the given height and surrounding border character. The height must be an odd number and the border_char should be a single character. :param height: int - height of the pyramid :param border_char: str - a single character to be used as the border :raises ValueError: If the height is not an odd number or if border_char is not a single character if height % 2 == 0: raise ValueError(\\"Height must be an odd number\\") if len(border_char) != 1: raise ValueError(\\"Border character must be a single character\\") for row in range(height): if row % 2 == 0: # Only odd rows will have stars (starting from 1 star) stars = '*' * (row + 1) print(f\\"{border_char}{stars.center(height)}{border_char}\\") def main(): # Example usage height = 7 # Ensure this is given as an odd number border_char = '#' # Any single character print_pyramid(height, border_char) if __name__ == \\"__main__\\": main()"},{"question":"Given a linked list and an integer n, write a function to find the (n-1)th to last node. If the length of the linked list is less than n or n is less than or equal to zero, the function should return None. Provide an erroneous function as a starting point for the candidate to fix.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_n_minus_one_to_last(head, n): Returns the (n-1)th to last node of the linked list. If the length of the linked list is less than n or n is less than or equal to zero, returns None. if not head or n <= 0: return None fast = head slow = head # Move fast pointer n steps ahead for _ in range(n): if not fast: return None fast = fast.next # Move both pointers until fast reaches the end while fast: fast = fast.next slow = slow.next return slow.value"},{"question":"Compare the differences and similarities between sets and tuples in Python. Also write a Python function to convert a tuple, which consists of multiple individual items as well as nested tuples, to a set while eliminating any duplicate values. Ensure that your function also handles a nested tuple conversion to set properly.","solution":"def tuple_to_set(t): Convert a tuple, including nested tuples, to a set eliminating duplicate values. flattened_list = [] def flatten(t): for item in t: if isinstance(item, tuple): flatten(item) else: flattened_list.append(item) flatten(t) return set(flattened_list) # Differences between sets and tuples in Python: # - Tuples are ordered, sets are unordered. # - Tuples are immutable, meaning the items once set cannot be changed, whereas sets are mutable, allowing addition and removal of items. # - Sets automatically eliminate duplicate items, tuples do not. # - Tuples can contain any type of elements, while sets can contain only hashable items. # Similarities between sets and tuples in Python: # - Both can contain multiple items. # - Both can be iterated over. # - Both can be used as keys in a dictionary if they contain only hashable items. # - Both can be created using literals (tuple with parentheses, set with curly braces)."},{"question":"Write a python program that uniformly generates a random password between 8 and 16 characters based on a user input which specifies the exact length of the password. The password must contain at least one uppercase, one lowercase letter, one digit, and one special character.","solution":"import random import string def generate_password(length): Generates a random password of specified length containing at least one uppercase, one lowercase letter, one digit, and one special character. if length < 8 or length > 16: raise ValueError(\\"Password length should be between 8 and 16 characters.\\") # Characters to be used in the password lower = string.ascii_lowercase upper = string.ascii_uppercase digits = string.digits specials = string.punctuation # Ensure the password contains at least one character from each required set password = [random.choice(lower), random.choice(upper), random.choice(digits), random.choice(specials)] # Fill the rest of the password length with random choices from all characters while len(password) < length: password.append(random.choice(lower + upper + digits + specials)) # Shuffle the password list to ensure randomness random.shuffle(password) return ''.join(password)"},{"question":"In Python, write a code snippet to calculate the average of odd numbers in a given list.","solution":"def average_of_odd_numbers(numbers): Returns the average of odd numbers in the given list. If no odd numbers are found, returns 0. odd_numbers = [num for num in numbers if num % 2 != 0] if len(odd_numbers) == 0: return 0 return sum(odd_numbers) / len(odd_numbers)"},{"question":"Modify the given code to multiply two n x n matrices. The matrices should be represented as two-dimensional lists.","solution":"def multiply_matrices(A, B): Multiplies two n x n matrices A and B. n = len(A) # Assuming A and B are n x n matrices C = [[0] * n for _ in range(n)] # Initialize result matrix with zeros for i in range(n): for j in range(n): for k in range(n): C[i][j] += A[i][k] * B[k][j] return C"},{"question":"for a linked list 1->2->3 in python, write two methods rotateRight and rotateLeft that rotate the linked list by k places","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head, k): if not head or not head.next or k == 0: return head length, tail = 1, head while tail.next: tail = tail.next length += 1 k %= length if k == 0: return head prev, new_head = head, head for _ in range(length - k): prev = new_head new_head = new_head.next prev.next = None tail.next = head return new_head def rotateLeft(head, k): if not head or not head.next or k == 0: return head length, tail = 1, head while tail.next: tail = tail.next length += 1 k %= length if k == 0: return head prev, new_head = head, head for _ in range(k): prev = new_head new_head = new_head.next prev.next = None tail.next = head return new_head"},{"question":"Write a function that takes in two input strings and returns the longest common subsequence (LCS) of the two strings. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, given the strings \\"ABCBDAB\\" and \\"BDCAB\\", the longest common subsequence is \\"BCAB\\".","solution":"def longest_common_subsequence(str1, str2): Returns the longest common subsequence (LCS) of str1 and str2. len1, len2 = len(str1), len(str2) dp = [[\\"\\" for _ in range(len2 + 1)] for _ in range(len1 + 1)] for i in range(1, len1 + 1): for j in range(1, len2 + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + str1[i - 1] else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], key=len) return dp[len1][len2]"},{"question":"how do I flip an int in python, e.g., 12345 -> 54321","solution":"def flip_int(n): Returns the integer obtained by reversing the digits of the input integer n. negative = n < 0 n = abs(n) flipped_str = str(n)[::-1] flipped_int = int(flipped_str) return -flipped_int if negative else flipped_int"},{"question":"Write a Python function that generates and prints square numbers from 1 up to a given max_num (inclusive).","solution":"def generate_square_numbers(max_num): Generates and returns a list of square numbers from 1 up to max_num (inclusive). :param max_num: The upper limit for generating square numbers. :return: A list of square numbers up to max_num. squares = [] n = 1 while n * n <= max_num: squares.append(n * n) n += 1 return squares"},{"question":"Generate a python program to create a set with all unique values","solution":"def create_unique_set(input_list): Takes a list of items and returns a set with all unique values. return set(input_list)"},{"question":"How do I ensure that a list in Python is unique without losing the order of elements?","solution":"def unique_list(lst): Returns a list with unique elements, maintaining the order of their first appearance. seen = set() unique_lst = [] for item in lst: if item not in seen: unique_lst.append(item) seen.add(item) return unique_lst"},{"question":"Develop a function that both multiplies and divides a list of integers by a designated numeral. Acknowledge cases where the list is empty, and handle should the divisor be zero.","solution":"def multiply_and_divide(lst, number): This function takes a list of integers and a designated numeral. It returns two lists: - The first list contains the elements multiplied by the numeral. - The second list contains the elements divided by the numeral. If the list is empty, it returns two empty lists. If the divisor is zero, it raises a ValueError. if number == 0: raise ValueError(\\"Division by zero is not allowed\\") multiplied = [x * number for x in lst] divided = [x / number for x in lst] return multiplied, divided"},{"question":"Given a string, write a Python function to check if it contains only alphabets and does not contain any digits or special characters.","solution":"def is_alpha_only(s): Check if the string contains only alphabets and does not contain any digits or special characters. :param s: The string to check. :return: True if the string contains only alphabets, False otherwise. return s.isalpha()"},{"question":"Write a program to find the minimum spanning tree of a graph using Kruskal's algorithm.","solution":"# Find the minimum spanning tree using Kruskal's algorithm class DisjointSet: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def kruskal(n, edges): Returns the edges in the minimum spanning tree using Kruskal's algorithm. :param n: Number of vertices in the graph :param edges: List of edges in the graph, where each edge is represented by a tuple (weight, u, v) mst = [] ds = DisjointSet(n) edges.sort() # Sort edges by weight for weight, u, v in edges: if ds.find(u) != ds.find(v): ds.union(u, v) mst.append((weight, u, v)) return mst"},{"question":"I want to design an algorithm to generate random numbers between 1 and 6, similar to rolling a dice. Can you guide me on how to achieve this in Python? I would also appreciate if you could explain how to properly structure and write comments in the code.","solution":"import random def roll_dice(): Generates a random number between 1 and 6, simulating a dice roll. Returns: int: A random number between 1 and 6 inclusive. return random.randint(1, 6)"},{"question":"Sort the given list of numbers in ascending order using quick sort algorithm recursively, without using any built-in sorting functions or external libraries. The input list will always contain unique elements and will have at least one element.","solution":"def quick_sort(arr): Sorts the given list of numbers in ascending order using the quick sort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Propose a Python programming implementation to construct an algorithm that generates a Fibonacci sequence up to the nth term. Besides, include an option to return the sequence in reverse order. Validate your input to ensure that the nth term is a positive integer and handle potential errors gracefully. Add efficiency in your code to handle large input values. Testing should also be included, with specific test cases to validate the correctness of your solution.","solution":"def fibonacci(n, reverse=False): Generates a Fibonacci sequence up to the nth term. Args: - n (int): The number of terms in the Fibonacci sequence. - reverse (bool): If True, returns the sequence in reverse order. Returns: - list: The Fibonacci sequence up to the nth term. Raises: - ValueError: If n is not a positive integer. if not isinstance(n, int) or n <= 0: raise ValueError(\\"The input must be a positive integer.\\") if n == 1: return [0] if not reverse else [0] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence[::-1] if reverse else sequence"},{"question":"Read the code below and modify it to produce the output for the given input. Not only should your function return the sum, but also multiply it by a specified multiplier which you also receive as input. If the multiplier is zero, return \\"Error\\".","solution":"def add_and_multiply(a, b, multiplier): Returns the sum of a and b, then multiplies the sum by the multiplier. If multiplier is zero, returns 'Error'. if multiplier == 0: return \\"Error\\" sum_ab = a + b return sum_ab * multiplier"},{"question":"Write a function called \`register_student\` that takes in three parameters: \`name\`, \`age\`, and \`subject\`. The function should return a dictionary with keys \\"Name\\", \\"Age\\", and \\"Subject\\" and their corresponding values. The values should not change after they are set. Ensure that the function checks if the input \`name\` and \`subject\` are strings and \`age\` is an integer before registering the student, throwing a type error if the checks are not passed. Additionally, write a piece of erroneous code and ask the examinee to fix it.","solution":"def register_student(name, age, subject): Registers a student with the given name, age, and subject. Ensures name and subject are strings and age is an integer. Returns a dictionary with Name, Age, and Subject keys. if not isinstance(name, str): raise TypeError(\\"Name must be a string\\") if not isinstance(age, int): raise TypeError(\\"Age must be an integer\\") if not isinstance(subject, str): raise TypeError(\\"Subject must be a string\\") return {\\"Name\\": name, \\"Age\\": age, \\"Subject\\": subject}"},{"question":"Given a tree data structure, write a program to find the sum of all the leaf nodes in the tree. Please consider the case when the tree is unbalanced and has a large number of nodes.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_of_leaf_nodes(root): Calculates the sum of all leaf nodes in the tree. Args: root (TreeNode): The root node of the tree. Returns: int: The sum of all leaf nodes. if root is None: return 0 # If the node is a leaf node if root.left is None and root.right is None: return root.val # Recur for left and right subtrees and return the sum return sum_of_leaf_nodes(root.left) + sum_of_leaf_nodes(root.right)"},{"question":"You've previously created functions for the fft2 and cirmtx kernel, but a small mistake was made and the \`astype(\\"float\\")\` portion did not produce the desired effect. You need to modify \`circularX\` and \`circularY\` to be of \`bool\` type instead of floating-point. For additional complexity, generate a random grayscale image using numpy and use that as the input for the cirmtx function. Then visualize the 2D FFT of the resulting image using matplotlib.","solution":"import numpy as np import matplotlib.pyplot as plt def cirmtx(img): Process the image to create a circular matrix and then perform 2D FFT. Arguments: img -- numpy array representing a grayscale image Returns: fft2_result -- 2D FFT of the circular matrix r, c = img.shape y, x = np.ogrid[-r // 2:r // 2, -c // 2:c // 2] mask = x**2 + y**2 <= (min(r,c) // 2)**2 circularX = (np.abs(y) <= (r // 2)).astype(bool) circularY = (np.abs(x) <= (c // 2)).astype(bool) masked_img = np.zeros_like(img) masked_img[mask] = img[mask] fft2_result = np.fft.fft2(masked_img) return fft2_result def generate_random_grayscale_image(size=(256, 256)): Generate a random grayscale image. Arguments: size -- tuple representing the dimensions of the image (default (256, 256)) Returns: random_image -- numpy array representing the generated grayscale image random_image = np.random.randint(0, 256, size).astype(np.uint8) return random_image def visualize_fft2(fft2_result): Visualize the 2D FFT result using matplotlib. Arguments: fft2_result -- numpy array representing the result from 2D FFT plt.imshow(np.log1p(np.abs(np.fft.fftshift(fft2_result))), cmap=\\"gray\\") plt.colorbar() plt.title(\\"FFT2 Visualization\\") plt.show() # Example usage: random_image = generate_random_grayscale_image() result = cirmtx(random_image) visualize_fft2(result)"},{"question":"Formulate a code fragment tailored to execute the function of showcasing the three smallest numerical entities contained within an array denoted as 'B'.","solution":"def three_smallest_numbers(B): Returns the three smallest numbers in the array B. If the array has fewer than three elements, it returns all of them in sorted order. if len(B) < 3: return sorted(B) return sorted(B)[:3]"},{"question":"I have two strings. How can I find the longest common subsequence between them in Python?","solution":"def longest_common_subsequence(text1, text2): Returns the longest common subsequence between two strings. n, m = len(text1), len(text2) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if text1[i - 1] == text2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct the LCS from the dp table lcs = [] i, j = n, m while i > 0 and j > 0: if text1[i - 1] == text2[j - 1]: lcs.append(text1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return ''.join(reversed(lcs))"},{"question":"Given a list of numbers, write a program that prints out a new list containing only the numbers that are divisible by both 3 and 7, without using the modulus operator. Also, the program should optimise the checking process to determine if a number is divisible by both 3 and 7, and handle very large numbers efficiently.","solution":"def is_divisible_by_3_and_7(n): Returns True if n is divisible by both 3 and 7, False otherwise. Uses the fact that a number n is divisible by both 3 and 7 if it is divisible by their product 21. return n // 21 * 21 == n def find_numbers_divisible_by_3_and_7(numbers): Returns a list of numbers from the given list that are divisible by both 3 and 7. return [num for num in numbers if is_divisible_by_3_and_7(num)]"},{"question":"Write a python script that list each file's size greater than 1GB inside a directory. Also display folder's size of folders greater than 10GB","solution":"import os def list_large_files_and_folders(directory): List files greater than 1GB and folders greater than 10GB in the specified directory. large_files = [] large_folders = [] for root, directories, files in os.walk(directory): # Check size of each file for file in files: file_path = os.path.join(root, file) try: file_size = os.path.getsize(file_path) / (1024 ** 3) if file_size > 1: large_files.append((file_path, file_size)) except OSError: pass # Check size of each folder for folder in directories: folder_path = os.path.join(root, folder) folder_size = 0 for subdir, _, subfiles in os.walk(folder_path): for subfile in subfiles: try: subfile_path = os.path.join(subdir, subfile) folder_size += os.path.getsize(subfile_path) except OSError: pass folder_size = folder_size / (1024 ** 3) if folder_size > 10: large_folders.append((folder_path, folder_size)) break # To limit to top-level directory return large_files, large_folders"},{"question":"Write a Python code to sort a dictionary of dictionaries based on the values of specific keys in the nested dictionaries. The main dictionary keys are names of fruit (string), and the nested dictionaries have keys of \\"quantity\\" (integer) and \\"price\\" (float). Note that some entries might not have both keys. Your program must handle these cases and assume a quantity of 0 and price of 0.0 for such missing entries. The fruits should be sorted in descending order by their quantity first and by their price next.","solution":"def sort_fruit_dicts(fruit_dict): Sort a dictionary of dictionaries based on the 'quantity' and 'price' fields of the nested dictionaries. :param fruit_dict: Dictionary where keys are fruit names and values are dictionaries with 'quantity' and 'price' keys. :return: A list of tuples sorted based on the specified criteria. sorted_fruits = sorted( fruit_dict.items(), key=lambda x: (x[1].get('quantity', 0), x[1].get('price', 0.0)), reverse=True ) return sorted_fruits"},{"question":"How can I create a Flask application to manage an online store with functionality for adding, deleting, and updating items, as well as retrieving order information?","solution":"from flask import Flask, request, jsonify app = Flask(__name__) store_items = [] orders = [] # Route to add a new item to the store @app.route('/items', methods=['POST']) def add_item(): item = request.get_json() store_items.append(item) return jsonify({'message': 'Item added successfully', 'item': item}), 201 # Route to delete an item from the store @app.route('/items/<int:item_id>', methods=['DELETE']) def delete_item(item_id): global store_items store_items = [item for item in store_items if item['id'] != item_id] return jsonify({'message': 'Item deleted successfully'}) # Route to update an item in the store @app.route('/items/<int:item_id>', methods=['PUT']) def update_item(item_id): updated_item = request.get_json() for item in store_items: if item['id'] == item_id: item.update(updated_item) return jsonify({'message': 'Item updated successfully', 'item': item}) return jsonify({'message': 'Item not found'}), 404 # Route to get order information @app.route('/orders', methods=['GET']) def get_orders(): return jsonify(orders) if __name__ == '__main__': app.run(debug=True)"},{"question":"Imagine you have a jar filled with 100 balls, each ball marked with a random number. You randomly draw 10 balls without replacement. Write a Python program to simulate the drawing process 12 times. For each simulation, output the drawn numbers in ascending sequence.","solution":"import random def simulate_draws(): Simulates drawing 10 balls out of 100 without replacement, 12 times. Returns a list of 12 lists, each containing 10 sorted drawn numbers. results = [] all_numbers = list(range(1, 101)) for _ in range(12): drawn_numbers = random.sample(all_numbers, 10) drawn_numbers.sort() results.append(drawn_numbers) return results"},{"question":"Can you help me with writing a beginner-friendly Python function that prints a pattern of stars (*) on the console? The pattern should be customizable both in the number of rows and the length of each row.","solution":"def print_star_pattern(rows, length): Prints a pattern of stars with the given number of rows and length of each row. :param rows: number of rows in the pattern :param length: number of stars in each row for _ in range(rows): print('*' * length)"},{"question":"Create a function that takes a list of dictionaries as input and returns the age of the last person in the list. The function should check if the input is a list of dictionaries and raise a TypeError if it is not. Additionally, the function should handle the case where the 'age' key is missing in one of the dictionaries and raise a KeyError with a custom error message.","solution":"def get_last_person_age(people): Returns the age of the last person in the list of dictionaries. Parameters: people (list): A list of dictionaries where each dictionary represents a person. Returns: int: The age of the last person in the list. Raises: TypeError: If the input is not a list of dictionaries. KeyError: If the 'age' key is missing in the last dictionary. if not isinstance(people, list) or not all(isinstance(person, dict) for person in people): raise TypeError(\\"Input must be a list of dictionaries.\\") if not people: raise ValueError(\\"The list is empty.\\") last_person = people[-1] if 'age' not in last_person: raise KeyError(f\\"The 'age' key is missing in the last dictionary: {last_person}\\") return last_person['age']"},{"question":"Develop a blockchain transaction simulation given three inputs: sender, receiver, and amount.","solution":"class Transaction: A class to represent a blockchain transaction. def __init__(self, sender: str, receiver: str, amount: float): self.sender = sender self.receiver = receiver self.amount = amount def __repr__(self): return f\\"{self.sender} -> {self.receiver}: {self.amount} BTC\\" def create_transaction(sender: str, receiver: str, amount: float) -> Transaction: Creates a blockchain transaction. return Transaction(sender, receiver, amount)"},{"question":"Given a list of elements, write a Python program to remove all duplicates from the list. You should not use any built-in functions or methods in Python that directly solve this problem, such as set(), to make the exercise more challenging.","solution":"def remove_duplicates(input_list): Removes duplicates from the input list and returns a new list with unique elements. unique_list = [] for element in input_list: if element not in unique_list: unique_list.append(element) return unique_list"},{"question":"Python historically is known for its flexibility and ease of use, capturing the interest of beginner coders and experienced developers alike. With Python, answers to coding problems often scale to meet various levels of difficulty, offering versatile solutions. Let us explore a moderately complex programming challenge that showcases Python's robust capabilities further. Instead of a straightforward XOR operation on two integers, we will elevate the level by devising a function that computes the bitwise exclusive 'or' for each pair in a list of integers, returning their sums. With a given list, our intention is to derive each unique pair's XOR score, then sum up all these unique XOR scores to return the cumulative result. Let's meticulously draft a dedicated function that can effectively tackle this problem, adhering to the correct syntax and logical flow, with thorough verification through provided examples.","solution":"def sum_of_unique_pair_xors(lst): Returns the sum of all unique pair XORs for the given list of integers. total_xor_sum = 0 n = len(lst) # Compare each unique pair for i in range(n): for j in range(i + 1, n): total_xor_sum += lst[i] ^ lst[j] return total_xor_sum"},{"question":"Given a list of numbers, write a Python program that not only selects elements that are larger than the given threshold, but also sorts these selected elements in descending order. Also, implement a binary search function to find the positions these numbers would have had in the original sorted list for extra efficiency.","solution":"from bisect import bisect_right def filter_and_sort_descending(nums, threshold): Filters the numbers that are larger than the given threshold and sorts them in descending order. Args: nums (List[int]): List of numbers. threshold (int): The threshold. Returns: List[int]: Filtered and sorted list in descending order. filtered_nums = [num for num in nums if num > threshold] return sorted(filtered_nums, reverse=True) def binary_search_position(nums, target): Finds the position target would have in the sorted list nums. Args: nums (List[int]): A list of numbers sorted in ascending order. target (int): The target number. Returns: int: Index position the target would occupy in the sorted list return bisect_right(nums, target)"},{"question":"Write a python program to perform matrix operations using numpy. The program should be able to generate random matrices of specified sizes, perform matrix addition, multiplication, and find the transpose and determinant of a matrix. PLAINFORMAT","solution":"import numpy as np def generate_random_matrix(rows, cols): Generates a random matrix of specified size. return np.random.rand(rows, cols) def add_matrices(matrix1, matrix2): Adds two matrices. return np.add(matrix1, matrix2) def multiply_matrices(matrix1, matrix2): Multiplies two matrices. return np.dot(matrix1, matrix2) def transpose_matrix(matrix): Returns the transpose of the matrix. return np.transpose(matrix) def determinant_of_matrix(matrix): Returns the determinant of the matrix. return np.linalg.det(matrix)"},{"question":"Write a Python function to create a matrix filled with zeros, ones, or random numbers. Moreover, include an error handling mechanism for the invalid input types and also ensure that the function can create a matrix of a minimum size of 2x2 and a maximum of 5x5. You should also check for cases where the user attempt to create a matrix of invalid size outside this range.","solution":"import numpy as np def create_matrix(rows, cols, matrix_type='zeros'): Creates a matrix filled with zeros, ones, or random numbers. Parameters: - rows (int): Number of rows in the matrix (must be between 2 and 5). - cols (int): Number of columns in the matrix (must be between 2 and 5). - matrix_type (str): Type of matrix ('zeros', 'ones', 'random'). Returns: - np.ndarray: Generated matrix. Raises: - ValueError: If rows or cols are not in the range [2, 5]. - ValueError: If matrix_type is not one of 'zeros', 'ones', 'random'. if rows < 2 or rows > 5 or cols < 2 or cols > 5: raise ValueError(\\"Rows and columns must be between 2 and 5 inclusive.\\") if matrix_type not in ['zeros', 'ones', 'random']: raise ValueError(\\"Matrix type must be either 'zeros', 'ones', or 'random'.\\") if matrix_type == 'zeros': return np.zeros((rows, cols)) elif matrix_type == 'ones': return np.ones((rows, cols)) elif matrix_type == 'random': return np.random.random((rows, cols))"},{"question":"Let's write a recursive Python function for summing up the elements of a list. However, the function should also keep track of and return the number of elements it had to process before finishing the process.","solution":"def sum_and_count(lst): Returns the sum of elements in lst and the number of elements. :param lst: list of numbers :return: tuple (sum of elements, number of elements) if not lst: return 0, 0 else: current_sum, current_count = sum_and_count(lst[1:]) return lst[0] + current_sum, 1 + current_count"},{"question":"Write a python program that sets an environment variable and then accesses it in an AWS Lambda function.","solution":"import os def set_and_get_env_variable(variable_name, variable_value): Sets the environment variable and gets its value. Parameters: variable_name (str): The name of the environment variable. variable_value (str): The value of the environment variable. Returns: str: The value of the environment variable. os.environ[variable_name] = variable_value return os.getenv(variable_name) # Assuming this lambda_handler is called by AWS Lambda def lambda_handler(event, context): AWS Lambda handler that retrieves the value of an environment variable set by 'set_and_get_env_variable' function. Parameters: event (dict): The lambda invocation event. context (object): The lambda context object. Returns: dict: A dictionary containing the environment variable value. variable_name = event.get('variable_name', '') value = os.getenv(variable_name, 'Variable not set') return { 'statusCode': 200, 'body': { 'message': f'The environment variable {variable_name} has value: {value}' } }"},{"question":"Develop a programming function that examines the supplied HTML script and produces a selective output. Your function should list the paragraph markers denoted as <p> tags and any unordered lists denoted by <ul> tags. Additionally, extract and also count the number of list items <li> within each <ul>.","solution":"from bs4 import BeautifulSoup def extract_html_elements(html_script): Extracts paragraph markers <p> and unordered list <ul> along with list items <li> from the given HTML script. Returns a dictionary with information about paragraphs and details about unordered lists and their items. soup = BeautifulSoup(html_script, 'html.parser') result = {} # Extract paragraphs paragraphs = soup.find_all('p') result['paragraphs'] = [p.get_text() for p in paragraphs] # Extract unordered lists and count list items unordered_lists = soup.find_all('ul') ul_info = [] for ul in unordered_lists: li_items = ul.find_all('li') ul_info.append({ 'list_items': [li.get_text() for li in li_items], 'item_count': len(li_items) }) result['unordered_lists'] = ul_info return result"},{"question":"Supply a piece of erroneous Python code that is meant to find the closest neighboring nodes for a point in a 2D space. Your task is to pinpoint and correct the problems in the provided code, as well as extend the logic to accommodate finding not just the closest single node, but rather the closest 'K' neighbours.","solution":"import math def closest_neighbors(point, nodes, k): Returns the closest neighbors to 'point' from the list of 'nodes'. 'point' is a tuple (x, y) 'nodes' is a list of tuples [(x1, y1), (x2, y2), ...] 'k' is the number of closest neighbors to find # Calculate distances correctly distances = [(node, math.sqrt((point[0] - node[0]) ** 2 + (point[1] - node[1]) ** 2)) for node in nodes] # Sort the nodes by distance and get the closest k nodes distances.sort(key=lambda x: x[1]) closest_nodes = [node for node, _ in distances[:k]] return closest_nodes"},{"question":"Given a string s, reverse the characters of the string without using any built-in string function.","solution":"def reverse_string(s): Reverses the characters of the string s without using any built-in string functions. reversed_str = '' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Define a python decorator called \\"counter\\" that counts the number of times a function is called. The decorator should also have an optional parameter called \\"reset\\" which, if set to True, will reset the counter to 0 every time the decorated function is called. Additionally, the decorator should keep track of the maximum number of times the function has been called in a row without any other function being called in between. The decorator should have two additional optional parameters: \\"max_count\\" and \\"reset_after\\". The \\"max_count\\" parameter should specify the maximum number of times the function can be called in a row without resetting the counter. If the function is called more than the \\"max_count\\" times in a row, the decorator should raise an exception. The \\"reset_after\\" parameter should specify the number of function calls after which the counter should be reset to 0, regardless of the value of the \\"reset\\" parameter. The decorator should now also support a new optional parameter called \\"threshold\\" which specifies the minimum number of times the decorated function needs to be called in a row before the counter starts counting. If the number of consecutive calls is less than the threshold, the counter should be reset to 0.","solution":"def counter(reset=False, max_count=None, reset_after=None, threshold=1): def decorator(func): func._number_of_calls = 0 func._max_calls_in_row = 0 func._current_consecutive_calls = 0 def wrapper(*args, **kwargs): if reset: func._number_of_calls = 0 func._current_consecutive_calls = 0 func._number_of_calls += 1 func._current_consecutive_calls += 1 # Check threshold and apply reset if required if func._current_consecutive_calls < threshold: func._current_consecutive_calls = 0 else: if func._current_consecutive_calls > func._max_calls_in_row: func._max_calls_in_row = func._current_consecutive_calls if max_count and func._current_consecutive_calls > max_count: raise Exception('Exceeded max number of consecutive calls') # Reset counter if reset_after condition met if reset_after and func._number_of_calls >= reset_after: func._number_of_calls = 0 func._current_consecutive_calls = 0 return func(*args, **kwargs) return wrapper return decorator"},{"question":"Design and develop a priority-based task scheduler that utilizes a queue data structure to allocate and manage tasks in an operating system. Your task scheduler should be capable of dynamically adjusting task priority based on factors such as CPU usage, memory usage, I/O operations, and user input. Implement the scheduler using a language of your choice and provide thorough documentation and testing to ensure functionality and efficiency.","solution":"import heapq class Task: def __init__(self, id, priority, cpu_usage, memory_usage, io_operations): self.id = id self.priority = priority self.cpu_usage = cpu_usage self.memory_usage = memory_usage self.io_operations = io_operations def __lt__(self, other): return self.priority < other.priority def update_priority(self, cpu_weight=1, memory_weight=1, io_weight=1): self.priority = cpu_weight * self.cpu_usage + memory_weight * self.memory_usage + io_weight * self.io_operations class PriorityQueue: def __init__(self): self.heap = [] def push(self, task: Task): heapq.heappush(self.heap, task) def pop(self): return heapq.heappop(self.heap) def peek(self): return self.heap[0] if self.heap else None def __len__(self): return len(self.heap) class TaskScheduler: def __init__(self): self.queue = PriorityQueue() def add_task(self, task: Task): self.queue.push(task) def get_next_task(self): return self.queue.pop() def update_task_priority(self, task: Task, cpu_weight=1, memory_weight=1, io_weight=1): task.update_priority(cpu_weight, memory_weight, io_weight) # Heap needs to be rebuilt if priority changes heapq.heapify(self.queue.heap) def peek_next_task(self): return self.queue.peek() # Usage scheduler = TaskScheduler() task1 = Task(id=1, priority=5, cpu_usage=10, memory_usage=20, io_operations=30) task2 = Task(id=2, priority=2, cpu_usage=5, memory_usage=15, io_operations=25) scheduler.add_task(task1) scheduler.add_task(task2) # Peek the highest priority task next_task = scheduler.peek_next_task() print(f'Next Task ID: {next_task.id}') # Update task priority based on new weights scheduler.update_task_priority(task1, cpu_weight=2, memory_weight=1, io_weight=3) # Get the highest priority task next_task = scheduler.get_next_task() print(f'Next Task ID: {next_task.id}')"},{"question":"Build a Python function \`shift_on_n_move\` where a list \`arr\` and an integer \`n\` are the parameters. The function should create a new list \`result\` which mirrors the length of \`arr\`, but each instance's value should shift forward or back by \`n\` index positions. Assuming \`arr = ['a', 'b', 'c', 'd']\` and \`n = 2\`, the output should be \`['c', 'd', 'a', 'b']\` due to the shift by two positions forward. If \`n\` was \`-2\`, it should shift two places back resulting in \`['c', 'd', 'a', 'b']\`.","solution":"def shift_on_n_move(arr, n): Shifts the elements of the list 'arr' by 'n' positions. Parameters: arr (list): The list to be shifted. n (int): The number of positions to shift the list. Returns: list: The list after shifting by n positions. length = len(arr) n = n % length # Handle cases where n > length or n < -length return arr[-n:] + arr[:-n]"},{"question":"Modify the given code to multiply two n x m matrices. The matrices should be represented as two-dimensional lists. Additionally, ensure that the implementation uses only constant space, i.e. does not create any additional data structures apart from the resulting matrix.","solution":"def matrix_multiply(A, B): Multiplies two n x m matrices A and B and returns the result. # Number of rows and columns in A n, m = len(A), len(A[0]) # Number of columns in B p = len(B[0]) # Initialize result with zeros result = [[0] * p for _ in range(n)] # Perform matrix multiplication for i in range(n): for j in range(p): for k in range(m): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"What is an algorithm in Python that uses linear search to find the index of a given element in a list?","solution":"def linear_search(arr, target): Performs a linear search to find the index of the target element in the list. Parameters: arr (list): The list to search in. target: The element to search for. Returns: int: The index of the target element if found, otherwise -1. for index, element in enumerate(arr): if element == target: return index return -1"},{"question":"Suppose you have a list of integers. Write a Python function to check if the list contains a specific target number. If the target number is found, return the index of its last occurrence in the list. If the target number is not found, return -1. The function should also handle edge cases such as an empty list or a list with duplicate values.","solution":"def find_last_occurrence(lst, target): Returns the index of the last occurrence of the target number in the list. If the target number is not found, returns -1. :param lst: List of integers :param target: Integer target number :return: Index of the last occurrence of target or -1 if not found if not lst: return -1 for i in range(len(lst) - 1, -1, -1): if lst[i] == target: return i return -1"},{"question":"Given a list, write a Python program to print each element of the list in reverse order. However, you are not allowed to use the built-in reverse() function or the slicing operator to reverse the list.","solution":"def print_reverse_elements(lst): Prints each element of the given list in reverse order. for i in range(len(lst) - 1, -1, -1): print(lst[i])"},{"question":"Hey, I'm taking an algorithms class, could you help me understand how to implement a topological sort for a directed acyclic graph (DAG) using different approaches, and maybe provide code examples?","solution":"from collections import defaultdict, deque def kahns_topological_sort(vertices, edges): Performs topological sort using Kahn's Algorithm (BFS approach). :param vertices: List of vertices in the graph. :param edges: List of edges in the graph [(u, v), ...] where u -> v. :return: List of vertices in topologically sorted order. in_degree = {u: 0 for u in vertices} adj_list = defaultdict(list) for u, v in edges: in_degree[v] += 1 adj_list[u].append(v) queue = deque([u for u in vertices if in_degree[u] == 0]) top_order = [] while queue: node = queue.popleft() top_order.append(node) for neighbor in adj_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(top_order) != len(vertices): return \\"Graph has a cycle\\" return top_order def dfs_topological_sort(vertices, edges): Performs topological sort using Depth-First Search approach. :param vertices: List of vertices in the graph. :param edges: List of edges in the graph, [(u, v), ...] where u -> v. :return: List of vertices in topologically sorted order. visited = {u: False for u in vertices} stack = [] adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) def dfs(v): visited[v] = True for neighbor in adj_list[v]: if not visited[neighbor]: dfs(neighbor) stack.append(v) for u in vertices: if not visited[u]: dfs(u) return stack[::-1]"},{"question":"Create a function that returns the \`n\`th number in the Fibonacci sequence, but with an additional twist: implement the function without using any loops or recursion, and instead utilize only functional programming concepts such as higher-order functions and lambda expressions.","solution":"from functools import reduce def fibonacci(n): Returns the nth number in the Fibonacci sequence using functional programming. fib_pair = lambda x, y: (x[1], x[0] + x[1]) result = reduce(lambda acc, _: fib_pair(acc, None), range(n), (0, 1)) return result[0]"},{"question":"Write a recursive function in Python that determines the Fibonacci sequence up to a given number. Also include error handling to ensure that the input is a positive integer. You then have to modify the function so it doesn't just return the sequence, but also calculates and returns the sum of all prime numbers from this Fibonacci series. Your function should therefore return a tuple where the first element is the Fibonacci sequence and the second is the sum of the prime numbers. Remember to write the necessary code to check if a number is prime. Sure, I'd like to clarify that computational efficiency is important especially with recursive functions and Fibonacci series. The traditional recursive approach could lead to a lot of repeated computation. Hence, I’m going to use memoization to cut down on repeated computations.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def fibonacci(n, memo={}): Calculate the n-th Fibonacci number using memoization. if n in memo: return memo[n] if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") if n == 1: return 1 if n == 2: return 1 memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n] def fibonacci_sequence_and_prime_sum(n): Return a tuple where the first element is the Fibonacci sequence up to the n-th term and the second is the sum of the prime numbers in this sequence. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer.\\") fib_sequence = [] prime_sum = 0 for i in range(1, n + 1): num = fibonacci(i) fib_sequence.append(num) if is_prime(num): prime_sum += num return (fib_sequence, prime_sum)"},{"question":"Given two arrays of integers, write a function in Python to rotate two arrays in opposite directions by K positions. First array rotates to the left and the second array rotates to the right.","solution":"def rotate_arrays(arr1, arr2, k): Rotates arr1 to the left by k positions and arr2 to the right by k positions. Parameters: arr1 (list): The first array to rotate to the left. arr2 (list): The second array to rotate to the right. k (int): The number of positions to rotate. Returns: tuple: A tuple containing the rotated versions of arr1 and arr2. # Calculate the effective rotations needed in case k is greater than the length of the arrays. k = k % len(arr1) if arr1 else 0 arr1_rotated = arr1[k:] + arr1[:k] k = k % len(arr2) if arr2 else 0 arr2_rotated = arr2[-k:] + arr2[:-k] return arr1_rotated, arr2_rotated"},{"question":"I have an array of numbers e.g. [1,2,3,4,5,6,7,8]. I need to randomly delete one of these numbers and insert a new one. Can you write an algorithm in Python for that? Additionally, try to ensure an equal probability for each element being chosen for deletion.","solution":"import random def delete_and_insert(arr, new_element): Deletes a random element from the array and inserts a new element. Parameters: arr (list): List of numbers from which a random element will be deleted. new_element: New element to be inserted into the list. Returns: list: Updated list with one random element deleted and the new element inserted. if not arr: return [new_element] index_to_delete = random.randint(0, len(arr) - 1) # Delete the random element arr.pop(index_to_delete) # Insert the new element arr.append(new_element) return arr"},{"question":"I want to generate a Python program that can count the occurrences of each character in a given string. Can you provide me with an example of how to achieve this requirement?","solution":"def count_characters(s): Returns a dictionary with the count of each character in the string s. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Please create a Python program that, given a string of comma-separated numbers, finds the smallest number and its index. Your solution should involve creating separate functions for input handling and logic processing to ensure a clean and modular code structure.","solution":"def parse_numbers(input_string): Parses a string of comma-separated numbers into a list of integers. Args: input_string (str): A string of comma-separated numbers. Returns: list: A list of integers. return list(map(int, input_string.split(','))) def find_smallest_number_and_index(numbers): Finds the smallest number in a list and its index. Args: numbers (list): A list of integers. Returns: tuple: A tuple containing the smallest number and its index. smallest_number = min(numbers) index = numbers.index(smallest_number) return smallest_number, index"},{"question":"Consider the following Python function designed to calculate the square of a designated number. Your task is to rewrite and rework this function so that, instead of squaring, it computes the cube of the specified number. Additionally, add an error handling mechanism to ensure the function only accepts numerical inputs. If a non-numerical input is given, your function should return an error message.","solution":"def cube(number): Returns the cube of a given number. Parameters: number (numerical): A number whose cube is to be calculated. Returns: numerical: The cube of the input number. str: Error message if the input is not numerical. if isinstance(number, (int, float)): return number ** 3 else: return \\"Error: The input must be a numerical value.\\""},{"question":"Develop a Python code that detects a palindrome and also accepts an option to ignore spaces, punctuation, and case sensitivity. The code should be able to handle inputs with special characters and maintain original formatting in returned results.","solution":"import string def is_palindrome(s, ignore_case=True, ignore_spaces=True, ignore_punctuation=True): Checks if string s is a palindrome, with options to ignore case, spaces, and punctuation. Parameters: - s (str): the string to be checked. - ignore_case (bool): if True, case is ignored. - ignore_spaces (bool): if True, spaces are ignored. - ignore_punctuation (bool): if True, punctuation is ignored. Returns: - bool: True if s is a palindrome under the given conditions, False otherwise. if ignore_case: s = s.lower() if ignore_punctuation: s = ''.join(ch for ch in s if ch not in string.punctuation) if ignore_spaces: s = ''.join(s.split()) return s == s[::-1]"},{"question":"Write a code snippet to loop over the characters in a string and add only the vowels to an array in Python.","solution":"def extract_vowels(s): Loops over characters in a string \`s\` and returns a list of vowels found in the string. vowels = \\"aeiouAEIOU\\" return [char for char in s if char in vowels]"},{"question":"Write a function in Python to convert a given binary string to its equivalent decimal representation. However, you are not allowed to use any built-in functions or libraries for conversion, and your solution should have a time complexity of O(n), where n is the length of the binary string. Additionally, you are not allowed to use any arithmetic operations such as multiplication, division, or exponentiation.","solution":"def binary_to_decimal(binary_str): Converts a binary string to its equivalent decimal representation without using any built-in functions for conversion and without using arithmetic operations such as multiplication, division, or exponentiation. The function assumes that the binary string is a valid binary number containing only '0' and '1' characters. Args: binary_str (str): A string representing a binary number. Returns: int: The decimal representation of the binary number. decimal_value = 0 length = len(binary_str) for i in range(length): # Instead of using addition, do it bit by bit. decimal_value = decimal_value * 2 + (ord(binary_str[i]) - ord('0')) return decimal_value"},{"question":"Develop a coding algorithm to ascertain if the specificWithTitle \\"Learning to Program\\" is encompassed within the assortment of titles delineated in the catalogue array of strings.","solution":"def is_title_present(catalogue, title): Check if a specific title is present within the catalogue of titles. Parameters: catalogue (list): Array of strings containing the titles. title (str): The specific title to check for. Returns: bool: True if the title is present in the catalogue, False otherwise. return title in catalogue"},{"question":"Generate a code in Python for adding two matrices with the additional constraint that the matrix dimensions must be the same. The code should handle cases where the matrices have different dimensions by raising an appropriate error message.","solution":"def add_matrices(matrix1, matrix2): Add two matrices element-wise. Both matrices must have the same dimensions. If the dimensions do not match, raise a ValueError. if not matrix1 or not matrix2 or len(matrix1) != len(matrix2) or len(matrix1[0]) != len(matrix2[0]): raise ValueError(\\"Matrices dimensions do not match\\") result = [] for row1, row2 in zip(matrix1, matrix2): result.append([a + b for a, b in zip(row1, row2)]) return result"},{"question":"Write a python program for encrypting a message using a single rotation cipher. The message that needs to be encrypted is \\"attack at dawn\\" and the cipher should rotate the alphabet by 13 places. Note: Preserve the case and spacing.","solution":"def rotate_char(c, n): Rotate character c by n positions in the alphabet, preserving case. if 'a' <= c <= 'z': return chr((ord(c) - ord('a') + n) % 26 + ord('a')) elif 'A' <= c <= 'Z': return chr((ord(c) - ord('A') + n) % 26 + ord('A')) else: return c def encrypt(message, rotation): Encrypts a message using a single rotation cipher with specified rotation. return ''.join(rotate_char(c, rotation) for c in message) # Encrypting \\"attack at dawn\\" with a rotation of 13 encrypted_message = encrypt(\\"attack at dawn\\", 13) print(encrypted_message)"},{"question":"Please write a python function that takes in a list of integers and returns a new list with all the prime numbers from the original list. If there are no prime numbers, the function should return an empty list.","solution":"def is_prime(n): Helper function to determine if a given number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(nums): Returns a list of prime numbers from the provided list of integers. return [num for num in nums if is_prime(num)]"},{"question":"Write a code block to merge two given dictionaries into a single one. Also, include error handling for scenarios where the dictionaries contain non-heterogeneous data types for the merge operation. Furthermore, modify your function to merge more than two dictionaries. Your solution should be robust enough to handle a dynamic number of dictionary inputs.","solution":"def merge_dictionaries(*dicts): Merges multiple dictionaries into one. In case of key conflicts, later dictionaries' values overwrite earlier ones'. Parameters: *dicts (Dict): A variable number of dictionaries to merge Returns: dict: A single merged dictionary merged_dict = {} for d in dicts: if not isinstance(d, dict): raise ValueError(\\"All arguments must be dictionaries\\") for key, value in d.items(): if key in merged_dict and type(merged_dict[key]) is not type(value): raise TypeError(f\\"Type mismatch for key '{key}': {type(merged_dict[key]).__name__} vs {type(value).__name__}\\") merged_dict[key] = value return merged_dict"},{"question":"I have a text file that contains a sequence of points separated by commas and semicolons. Each point is represented by four values: longitude, latitude, altitude, and speed. I need to convert this data into XML format following the given structure. How can I write a function in Python that achieves this transformation?","solution":"import xml.etree.ElementTree as ET def points_to_xml(file_path): Converts a text file containing points data to XML format. Parameters: file_path (str): Path to the text file. Returns: str: XML string representation of the points. # Parse the file with open(file_path, 'r') as file: data = file.read().strip() # Split the data by semicolons to get individual points points = data.split(';') # Create the root XML element root = ET.Element(\\"Points\\") for point in points: # Split each point by commas to get coordinates values = point.split(',') if len(values) != 4: continue longitude, latitude, altitude, speed = values # Create a Point element point_element = ET.SubElement(root, \\"Point\\") # Create sub-elements for each coordinate ET.SubElement(point_element, \\"Longitude\\").text = longitude ET.SubElement(point_element, \\"Latitude\\").text = latitude ET.SubElement(point_element, \\"Altitude\\").text = altitude ET.SubElement(point_element, \\"Speed\\").text = speed # Generate the XML string xml_string = ET.tostring(root, encoding='unicode') return xml_string"},{"question":"Plot the function f(x) = 2x^2 - 4x + 1 using Python's Matplotlib library.","solution":"import matplotlib.pyplot as plt import numpy as np def plot_function(): Plots the function f(x) = 2x^2 - 4x + 1 using Matplotlib. x = np.linspace(-10, 10, 400) y = 2*x**2 - 4*x + 1 plt.figure(figsize=(8, 6)) plt.plot(x, y, label='f(x) = 2x^2 - 4x + 1') plt.title('Plot of f(x) = 2x^2 - 4x + 1') plt.xlabel('x') plt.ylabel('f(x)') plt.axhline(0, color='black',linewidth=0.5) plt.axvline(0, color='black',linewidth=0.5) plt.grid(color = 'gray', linestyle = '--', linewidth = 0.5) plt.legend() plt.show()"},{"question":"Define a Python function that, given two input arguments--a list of strings, \`source_strs\` and a list of characters \`chars_to_filter\`, returns a dictionary. Specifically, the dictionary keys should correspond to the elements of \`chars_to_filter\`, and the respective values should contain another dictionary. This nested dictionary should contain a key-value pairing for each word in \`source_strs\` where the key is the word itself and the value is the count of occurrences of the initial character in the word that matches one of the elements from \`chars_to_filter\`, considering only the lower case version of these characters. If the character is not present in the word, the word should not be included in the nested dictionary for that character.","solution":"def filter_and_count(source_strs, chars_to_filter): Given a list of strings 'source_strs' and a list of characters 'chars_to_filter', returns a dictionary with keys corresponding to elements of 'chars_to_filter'. The values are dictionaries where keys are words from 'source_strs' and values are count of occurrences of the respective character in the word. result = {} for char in chars_to_filter: char = char.lower() result[char] = {} for word in source_strs: count = word.lower().count(char) if count > 0: result[char][word] = count return result"},{"question":"Write a python program to not only print the length of a set but also check and handle if the given input is not a set, instead of a tuple, list or a dictionary. The program should also have functionality to measure and print the time taken by the operations.","solution":"import time def print_set_length(input_data): Prints the length of a set if the input is a set. If the input is not a set, it raises a TypeError. if not isinstance(input_data, set): raise TypeError(\\"Input data is not a set\\") start_time = time.time() length = len(input_data) end_time = time.time() print(f\\"Length of set: {length}\\") print(f\\"Time taken: {end_time - start_time} seconds\\") return length, end_time - start_time"},{"question":"Develop a function that uses a while loop to iterate over and output each individual component from a given collection type - a list named 'numbers'. The function should iterate in reverse order starting from the last element. Additionally, in the middle of iteration process, if you encounter a '7', raise a custom exception that says \\"Found 7\\". The function should also handle any potential exceptions during its execution.","solution":"class FoundSevenException(Exception): Custom exception to be raised when number 7 is found in the list. pass def iterate_numbers_reverse(numbers): Iterates over the list 'numbers' in reverse order, starting from the last element. If the number 7 is encountered, raises FoundSevenException. :param numbers: List of numbers to iterate over index = len(numbers) - 1 while index >= 0: try: if numbers[index] == 7: raise FoundSevenException(\\"Found 7\\") print(numbers[index]) # Outputting the number except FoundSevenException as e: print(e) break index -= 1"},{"question":"Write a function that takes an array of strings and returns a new array comprised of just the strings that are palindromes.","solution":"def find_palindromes(strings): Returns a list of palindromic strings from the input list. Parameters: strings (list): A list of strings. Returns: list: A list containing only the palindromic strings. return [s for s in strings if s == s[::-1]]"},{"question":"Write a Python code that checks if a number is an Armstrong number or perfect square. Check if 371 and 9 satisfy any of the conditions. A number is an Armstrong number if the sum of its own digits each raised to the power of the number of digits equals the number itself. A perfect square is an integer that is the square of an integer.","solution":"def is_armstrong(number): Checks if a number is an Armstrong number. digits = list(map(int, str(number))) power = len(digits) return number == sum(digit ** power for digit in digits) def is_perfect_square(number): Checks if a number is a perfect square. root = int(number ** 0.5) return number == root * root # Check specific numbers armstrong_371 = is_armstrong(371) perfect_square_371 = is_perfect_square(371) armstrong_9 = is_armstrong(9) perfect_square_9 = is_perfect_square(9) (371, armstrong_371, perfect_square_371), (9, armstrong_9, perfect_square_9)"},{"question":"Enhance the game in the given code by adding more features. The game should display a series of random numbers between 1 and 100, and the user has to guess the number that is a multiple of 3 and not a multiple of 5. The program should keep track of the number of guesses the user has made and display it at the end. Moreover, to make the game more challenging, the user should be given a limited number of guesses based on the difficulty level chosen by the user. The difficulty levels could be: easy (10 guesses), medium (7 guesses), hard (5 guesses), and expert (3 guesses).","solution":"import random def generate_random_numbers(count=10): return [random.randint(1, 100) for _ in range(count)] def is_valid_number(num): return num % 3 == 0 and num % 5 != 0 def choose_difficulty(): difficulty_map = { 'easy': 10, 'medium': 7, 'hard': 5, 'expert': 3 } while True: difficulty = input(\\"Choose difficulty (easy, medium, hard, expert): \\").strip().lower() if difficulty in difficulty_map: return difficulty_map[difficulty] else: print(\\"Invalid choice. Please choose again.\\") def play_game(): attempts_left = choose_difficulty() attempts_made = 0 print(f\\"You have chosen {attempts_left} attempts\\") while attempts_left > 0: random_numbers = generate_random_numbers() print(f\\"Here are your numbers: {random_numbers}\\") guess = input(\\"Guess the number that is a multiple of 3 and not a multiple of 5: \\").strip() try: guess = int(guess) except ValueError: print(\\"Invalid input. Please enter an integer.\\") continue attempts_made += 1 attempts_left -= 1 if is_valid_number(guess): print(\\"Congratulations! You guessed correctly.\\") break else: print(\\"Incorrect guess. Try again.\\") print(f\\"Attempts left: {attempts_left}\\") print(f\\"Game over. You made {attempts_made} attempts.\\") if __name__ == \\"__main__\\": play_game()"},{"question":"Code a function in Python to generate random numbers within a given range. However, the function should only use bitwise operations and not rely on any built-in random number generator functions. The function should also have a time complexity of O(1).","solution":"def rand_range(min_val, max_val): Generate a random integer between min_val and max_val using bitwise operations. Note: This function uses a simple linear congruential generator (LCG) method with bitwise operations. if min_val > max_val: raise ValueError(\\"min_val should not be greater than max_val\\") # Normally, we would use something like time.time() or another method to create a seed. # Here, for demonstration, we'll use a fixed seed and predefined steps. seed = 123456789 # Example seed # Linear Congruential Generator (LCG) parameters a = 1664525 c = 1013904223 # Update the seed using LCG formula with bitwise operations seed = (a * seed + c) & 0xFFFFFFFF # Scale the result to the desired range result = min_val + (seed % (max_val - min_val + 1)) return result"},{"question":"How do you accurately convert metric units of temperature (i.e. Celsius) to standard units used in the US (i.e. Fahrenheit) and vice versa using a Python function?","solution":"def celsius_to_fahrenheit(celsius): Converts Celsius to Fahrenheit. Formula: (°C * 9/5) + 32 = °F return (celsius * 9/5) + 32 def fahrenheit_to_celsius(fahrenheit): Converts Fahrenheit to Celsius. Formula: (°F - 32) * 5/9 = °C return (fahrenheit - 32) * 5/9"},{"question":"How do you write a function that prints \\"Hello, <name>\\" where <name> is a parameter passed to the function?","solution":"def greet(name): Prints \\"Hello, <name>\\" where <name> is a parameter passed to the function. print(f\\"Hello, {name}\\")"},{"question":"Create a Python function that truncates a given string to display only the first 4 unique characters in alphabetical order and the rest of the string length as a count of distinct alphabets present.","solution":"def truncate_and_count(string): Truncate the string to the first 4 unique characters in alphabetical order and append the count of distinct alphabets present in the rest of the string. unique_chars = sorted(set(string)) truncated_chars = ''.join(unique_chars[:4]) distinct_count = len(unique_chars[4:]) return truncated_chars + str(distinct_count)"},{"question":"Create a Python Duck Typing Example. Specifically, make a mock file handling system which only has a \`read()\` function. Then, use Duck Typing to read data from both a mock file and a real file. Include a function \`read_data()\` that receives a file object, and confirm the function works by reading from both a real and a mock file.","solution":"class MockFile: def __init__(self, content): self.content = content def read(self): return self.content def read_data(file_obj): return file_obj.read() # Example usage: # mock_file = MockFile(\\"This is a mock file content\\") # data = read_data(mock_file) # print(data) # For real file usage: # with open(\\"real_file.txt\\", \\"r\\") as real_file: # data = read_data(real_file) # print(data)"},{"question":"Create a python function that accepts two lists as arguments with an return type of dict. the function translate each element of the first list with corresponding element from second list using mapping. the function run only in O(n) time complexity where n is the number of element in list","solution":"def translate_list_to_dict(list1, list2): Create a dictionary by mapping elements from list1 to the corresponding elements in list2. Args: list1 (list): List of keys. list2 (list): List of values. Returns: dict: Dictionary mapping each element of list1 to the corresponding element of list2. if len(list1) != len(list2): raise ValueError(\\"Both lists must have the same length\\") return {list1[i]: list2[i] for i in range(len(list1))}"},{"question":"I have a有一 large collection of log files from various servers in different time zones, and I want to ingest and store these log files in a single time zone for analysis. Can you help me write a script in Python to convert the timestamps in these log files from their local time zones to UTC? Assume that the log files have timestamps in the following format: \`YYYY-MM-DD HH:MM:SS\`. The local time zone information is mentioned in the log file in the format: \`2022-03-01T12:00:00Z\`, where 'Z' stands for UTC, and in your case, it should be either \`+\` or \`-\` followed by a time zone offset.","solution":"from datetime import datetime, timedelta import re def convert_to_utc(log_timestamp, timezone_offset): Converts the log_timestamp to UTC, given the timezone_offset. :param log_timestamp: str, timestamp in the format \\"YYYY-MM-DD HH:MM:SS\\" :param timezone_offset: str, offset in the format \\"+HH:MM\\" or \\"-HH:MM\\" :return: str, converted timestamp in UTC in the format \\"YYYY-MM-DD HH:MM:SS\\" # Create a datetime object from the log timestamp local_datetime = datetime.strptime(log_timestamp, \\"%Y-%m-%d %H:%M:%S\\") # Extract the sign and the hour and minute components from the timezone offset match = re.match(r'([+-])(d{2}):(d{2})', timezone_offset) if not match: raise ValueError(\\"Invalid timezone offset format\\") sign, hours, minutes = match.groups() delta_hours = int(hours) delta_minutes = int(minutes) # Create a timedelta object from the extracted values offset = timedelta(hours=delta_hours, minutes=delta_minutes) # Adjust the local time to UTC time if sign == '+': utc_datetime = local_datetime - offset else: utc_datetime = local_datetime + offset # Return the UTC timestamp as a string return utc_datetime.strftime(\\"%Y-%m-%d %H:%M:%S\\")"},{"question":"Inject a variable in a Python script, named \\"greeting_message\\" with the value \\"hello world\\", but the value should be encrypted using a Caesar cipher with a random shift between 1 and 25. The script should also include a decryption function that can decrypt the encrypted message using the same shift value. The decryption function should take the encrypted message as input and return the original message.","solution":"import random # Generate a random shift between 1 and 25 shift = random.randint(1, 25) def caesar_cipher_encrypt(message, shift): encrypted_message = [] for char in message: if char.isalpha(): shift_base = ord('a') if char.islower() else ord('A') encrypted_message.append(chr(shift_base + (ord(char) - shift_base + shift) % 26)) else: encrypted_message.append(char) return ''.join(encrypted_message) def caesar_cipher_decrypt(message, shift): decrypted_message = [] for char in message: if char.isalpha(): shift_base = ord('a') if char.islower() else ord('A') decrypted_message.append(chr(shift_base + (ord(char) - shift_base - shift) % 26)) else: decrypted_message.append(char) return ''.join(decrypted_message) greeting_message = \\"hello world\\" encrypted_greeting_message = caesar_cipher_encrypt(greeting_message, shift)"},{"question":"Write a Python code snippet that uses the PyTorch library to create a simple 3-layer neural network with ReLU activation functions, and uses it to classify a set of dummy input data into two classes. Make sure to include all necessary imports and any required code to run the network on the input data.","solution":"import torch import torch.nn as nn import torch.nn.functional as F class SimpleNN(nn.Module): def __init__(self, input_size, hidden_size, output_size): super(SimpleNN, self).__init__() self.fc1 = nn.Linear(input_size, hidden_size) self.fc2 = nn.Linear(hidden_size, hidden_size) self.fc3 = nn.Linear(hidden_size, output_size) def forward(self, x): x = F.relu(self.fc1(x)) x = F.relu(self.fc2(x)) x = self.fc3(x) return x # Example usage # Create a simple 3-layer neural network input_size = 10 # size of the input features hidden_size = 5 # number of neurons in hidden layers output_size = 2 # number of output classes net = SimpleNN(input_size=input_size, hidden_size=hidden_size, output_size=output_size) # Dummy input data dummy_data = torch.randn(1, input_size) # batch size of 1 # Classify the dummy input data output = net(dummy_data) print(\\"Output:\\", output)"},{"question":"Write a Python program that simulates the game \\"Rock, Paper, Scissors\\". The game should allow for multiple rounds and keep a score of victories for both the user and the computer. After every round, the game should ask the user if they want to continue. Also, implement a simple AI for the computer opponent which has an equal probability of choosing Rock, Paper or Scissors. For this task, you can utilize the random module in Python.","solution":"import random def get_computer_choice(): Return a random choice of 'Rock', 'Paper', or 'Scissors' for the computer. return random.choice(['Rock', 'Paper', 'Scissors']) def determine_winner(user_choice, computer_choice): Determine the winner of a Rock, Paper, Scissors game. if user_choice == computer_choice: return 'Tie' elif (user_choice == 'Rock' and computer_choice == 'Scissors') or (user_choice == 'Paper' and computer_choice == 'Rock') or (user_choice == 'Scissors' and computer_choice == 'Paper'): return 'User' else: return 'Computer' def play_round(user_choice): Play a single round of Rock, Paper, Scissors. computer_choice = get_computer_choice() winner = determine_winner(user_choice, computer_choice) return user_choice, computer_choice, winner def play_game(): user_score = 0 computer_score = 0 while True: user_choice = input(\\"Enter your choice (Rock, Paper, Scissors): \\") if user_choice not in ['Rock', 'Paper', 'Scissors']: print(\\"Invalid choice. Please try again.\\") continue user_choice, computer_choice, winner = play_round(user_choice) print(f\\"User chose {user_choice}, Computer chose {computer_choice}\\") if winner == 'User': user_score += 1 print(\\"User wins this round!\\") elif winner == 'Computer': computer_score += 1 print(\\"Computer wins this round!\\") else: print(\\"It's a tie!\\") print(f\\"User Score: {user_score}, Computer Score: {computer_score}\\") continue_game = input(\\"Do you want to play another round? (yes/no): \\") if continue_game.lower() != 'yes': break print(\\"Final Scores:\\") print(f\\"User: {user_score}, Computer: {computer_score}\\") if user_score > computer_score: print(\\"User wins the game!\\") elif computer_score > user_score: print(\\"Computer wins the game!\\") else: print(\\"The game is a tie!\\") if __name__ == \\"__main__\\": play_game()"},{"question":"Write a Python code to calculate the area of a triangle given the coordinates of its three vertices: A(x1, y1), B(x2, y2), and C(x3, y3). Test the function using the provided data points.","solution":"def triangle_area(x1, y1, x2, y2, x3, y3): Calculate the area of a triangle given the coordinates of its three vertices using the shoelace formula. Args: x1, y1: coordinates of vertex A x2, y2: coordinates of vertex B x3, y3: coordinates of vertex C Returns: The area of the triangle area = abs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) / 2.0 return area"},{"question":"Import the \\"argparse\\" module and create a parser to read command-line arguments. Then define a function that takes a list of integers as input and returns a list of tuples containing pairs of consecutive elements from the input list. Use the argparse module to parse command-line arguments and pass the input list to the function. Finally, print the resulting list of tuples.","solution":"import argparse def create_parser(): Create and return the argument parser. parser = argparse.ArgumentParser(description=\\"Process a list of integers and find pairs of consecutive elements.\\") parser.add_argument('integers', metavar='N', type=int, nargs='+', help='an integer for the list to be processed') return parser def consecutive_pairs(int_list): Generate pairs of consecutive elements from the given list of integers. Parameters: int_list (list): List of integers Returns: list: List of tuples containing pairs of consecutive elements if len(int_list) < 2: return [] return [(int_list[i], int_list[i+1]) for i in range(len(int_list) - 1)] if __name__ == \\"__main__\\": parser = create_parser() args = parser.parse_args() pairs = consecutive_pairs(args.integers) print(pairs)"},{"question":"Implement a Python program to find the largest number in a list without using a built-in function like max(). You can assume that the list will only contain integers and will always have at least one element.","solution":"def find_largest_number(numbers): Returns the largest number in a list of integers. :param numbers: List of integers :return: The largest integer in the list if not numbers: raise ValueError(\\"The list is empty\\") # Initialize the largest number with the first element of the list largest_number = numbers[0] # Iterate through the list to find the largest number for number in numbers: if number > largest_number: largest_number = number return largest_number"},{"question":"Create a function 'subStr' that takes a string, a start index, and an end index and returns a substring between the start and end index. Additionally, perform error checks to ensure the input is a string and the start & end indexes are integers. If the indexes are out of bounds (either negative or exceed the length of the string), return an appropriate error message.","solution":"def subStr(s, start, end): Returns the substring of s from start index to end index (exclusive). # Input Validation if not isinstance(s, str): return \\"Error: Input must be a string.\\" if not isinstance(start, int) or not isinstance(end, int): return \\"Error: Start and end indexes must be integers.\\" # Index Bounds Check if start < 0 or end > len(s) or start > end: return \\"Error: Indexes are out of bounds.\\" return s[start:end]"},{"question":"Given a list of strings, parse each string into a list of individual words as fast as possible. This parser will be memory efficient and will drastically outperform non-regex methods.","solution":"import re def parse_strings(strings): Parses each string in the provided list into individual words using regex. Args: strings (list of str): List of strings to be parsed. Returns: list of list of str: List where each element is a list of words parsed from the corresponding input string. word_pattern = re.compile(r'w+') return [word_pattern.findall(s) for s in strings]"},{"question":"Create a function in Python that generates a random integer between two given numbers. However, the function should throw an error if the lower bound is greater than or equal to the upper bound. Additionally, the function should return the result modulo 1000000007. The function should also check if the generated random number is a prime number and if it is, it should return the next prime number after it.","solution":"import random import sympy def generate_random_integer(lower_bound, upper_bound): Generate a random integer between lower_bound and upper_bound (exclusive). If the generated number is a prime, return the next prime number after it. The result should be modulo 1000000007. Raises ValueError if lower_bound is greater than or equal to upper_bound. if lower_bound >= upper_bound: raise ValueError(\\"lower_bound should be less than upper_bound\\") random_number = random.randint(lower_bound, upper_bound - 1) # upper_bound is exclusive modulo_result = random_number % 1000000007 if sympy.isprime(modulo_result): return sympy.nextprime(modulo_result) else: return modulo_result"},{"question":"Find the intersection of three sets A, B, and C using Python. Write a program that takes three sets of integers as input and outputs their intersection. The input sets should be unique and have no duplicates. The output should also be a set with no duplicates. Additionally, your program should ensure that all elements in the input sets are positive integers.","solution":"def intersection_of_three_sets(A, B, C): Returns the intersection of three sets A, B, and C. :param A: Set of unique positive integers :param B: Set of unique positive integers :param C: Set of unique positive integers :return: Intersection of sets A, B, and C return A & B & C"},{"question":"Use Python to reverse the elements of a list without using the reverse() method or any built-in functions. Additionally, you are not allowed to use any additional variables or create new lists. Your solution should have a time complexity of O(n), where n is the length of the list.","solution":"def reverse_list(lst): Reverses the elements of the list in place. :param lst: List of elements to be reversed. left = 0 right = len(lst) - 1 while left < right: # Swap the elements at left and right indices lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1"},{"question":"Create a function to sort a list of dictionaries alphabetically in Python based on a specific key in the dictionaries. Additionally, if two dictionaries have the same value for the specific key, sort them based on another key in the dictionaries.","solution":"def sort_dicts_by_keys(dict_list, primary_key, secondary_key=None): Sorts a list of dictionaries alphabetically based on a specific key. If two dictionaries have the same value for the specific key, sorts them based on another key in the dictionaries. :param dict_list: List of dictionaries to be sorted. :param primary_key: The key to sort the dictionaries by primarily. :param secondary_key: The key to sort the dictionaries by secondarily if the primary key values are the same. Default is None. :return: A new list of sorted dictionaries. if secondary_key: return sorted(dict_list, key=lambda x: (x[primary_key], x[secondary_key])) else: return sorted(dict_list, key=lambda x: x[primary_key])"},{"question":"On November 9, 2020, Chinese billionaire Jack Ma disappeared. Develop a Python function that deletes any mentions of the date on which he vanished from a text. Additionally, write a function to obfuscate any names of people and organizations mentioned in relation to this event.","solution":"import re def delete_date_mentions(text): Deletes any mentions of the date 'November 9, 2020' from the given text. date_pattern = r'November 9, 2020' return re.sub(date_pattern, '', text) def obfuscate_entities(text): Obfuscates any names of people and organizations mentioned in the text. For simplicity, let's use a hypothetical pattern of: - Names: 'Jack Ma', 'Alibaba' entities_pattern = r'(Jack Ma|Alibaba)' return re.sub(entities_pattern, '***', text) # Combined function for both actions def process_text(text): Deletes the date 'November 9, 2020' and obfuscates the names 'Jack Ma' and 'Alibaba' from the text. text = delete_date_mentions(text) text = obfuscate_entities(text) return text"},{"question":"Write an efficient sorting algorithm in Python to sort an array of integers using bubble sort.","solution":"def bubble_sort(arr): Sorts an array of integers using the bubble sort algorithm. Args: arr (list of int): The array to be sorted. Returns: list of int: The sorted array. n = len(arr) for i in range(n): # Track if any swap was made during this pass swapped = False for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: # Swap the elements arr[j], arr[j + 1] = arr[j + 1], arr[j] swapped = True # If no swaps were made, the array is already sorted if not swapped: break return arr"},{"question":"Implement an algorithm to accomplish the 0/1 Knapsack problem using only recursive functions and no loops or external libraries.","solution":"def knapsack_recursive(values, weights, capacity, n): A function to solve the 0/1 Knapsack problem using recursion. :param values: List of values of the items. :param weights: List of weights of the items. :param capacity: Maximum weight capacity of the knapsack. :param n: Number of items. :return: Maximum value that can be accommodated in the knapsack. # Base Case: If no items are left or capacity is 0 if n == 0 or capacity == 0: return 0 # If weight of the nth item is more than Knapsack capacity, it cannot be included if weights[n-1] > capacity: return knapsack_recursive(values, weights, capacity, n-1) else: # Return the maximum of two cases: # (1) nth item included # (2) not included return max( values[n-1] + knapsack_recursive(values, weights, capacity - weights[n-1], n-1), knapsack_recursive(values, weights, capacity, n-1) )"},{"question":"Write a python program which reverses an integer but when the reversed integer overflows, it should return 0.","solution":"def reverse_integer(x): Returns the reverse of the integer x. If the reversed integer overflows, returns 0. sign = -1 if x < 0 else 1 x *= sign reversed_x = 0 while x != 0: reversed_x = reversed_x * 10 + x % 10 x //= 10 reversed_x *= sign # Check for 32-bit signed integer overflow if reversed_x < -2**31 or reversed_x > 2**31 - 1: return 0 return reversed_x"},{"question":"Write a valid Python program to calculate the sum of every third element of a given list of integers.","solution":"def sum_of_every_third_element(numbers): Returns the sum of every third element from the list of integers. return sum(numbers[i] for i in range(2, len(numbers), 3))"},{"question":"Develop a Python function which, given a sequential collection of textual strings and a lexeme, discerns and returns not only the recurrence rate of the lexeme but also identifies the position(s) of each instance where the lexeme is present. The function should handle exceptions for instances when the lexeme is not present in the textual string. Provide a piece of erroneous code as a reference and state the error in the code. Also, ensure that your function is optimized for larger datasets.","solution":"def find_lexeme_positions(texts, lexeme): Returns the recurrence count and positions of the given lexeme within the texts. If the lexeme is not found, returns a count of 0 and an empty list of positions. Parameters: texts (list of str): List of textual strings to search through. lexeme (str): The lexeme to search for. Returns: tuple: (count, positions) where 'count' is the recurrence count of the lexeme, and 'positions' is a list of tuples indicating (text_index, position_index). count = 0 positions = [] for text_index, text in enumerate(texts): start = 0 while start < len(text): position = text.find(lexeme, start) if position == -1: break positions.append((text_index, position)) count += 1 start = position + len(lexeme) return count, positions # Erroneous code example: # def find_lexeme_positions(texts, lexeme): # This function returns positions only # The error here is that it doesn't properly capture all instances of the lexeme and doesn't track the count. # if lexeme in texts: # return [texts.find(lexeme)] # else: # raise ValueError(\\"Lexeme not found in the provided texts.\\")"},{"question":"Import the \\"argparse\\" module and set up argument parsing with default values and choices.","solution":"import argparse def setup_argument_parser(): parser = argparse.ArgumentParser(description=\\"Argument parser example with default values and choices\\") parser.add_argument(\\"--verbosity\\", type=int, choices=[0, 1, 2], default=1, help=\\"Set the verbosity level: 0 (silent), 1 (default), 2 (verbose)\\") parser.add_argument(\\"--mode\\", type=str, choices=[\\"auto\\", \\"manual\\"], default=\\"auto\\", help=\\"Set the mode of operation\\") return parser"},{"question":"Develop a Python program implementing a function that calculates the cubic value of a specified integer input. Furthermore, the algorithm should store intermediary results as it calculates the cube of integers from 1 to the specified integer. The results should be returned as a dictionary where the key represents the integer and its cubic value as the value in the dictionary. Remember to handle potential edge cases for better program robustness.","solution":"def calculate_cubic_values(n): Calculate the cubic values of integers from 1 to n. Args: n (int): The integer up to which to calculate the cubic values. Returns: dict: A dictionary with integers from 1 to n as keys and their cubic values as values. if n < 1: raise ValueError(\\"Input must be greater than or equal to 1.\\") cubic_values = {} for i in range(1, n + 1): cubic_values[i] = i ** 3 return cubic_values"},{"question":"Write a python script to compare two directory trees and print the differences, that is, files existing in the first directory but missing from the second, and vice versa.","solution":"import os def compare_directories(dir1, dir2): dir1_files = set() dir2_files = set() for root, _, files in os.walk(dir1): for file in files: relative_path = os.path.relpath(os.path.join(root, file), dir1) dir1_files.add(relative_path) for root, _, files in os.walk(dir2): for file in files: relative_path = os.path.relpath(os.path.join(root, file), dir2) dir2_files.add(relative_path) only_in_dir1 = dir1_files - dir2_files only_in_dir2 = dir2_files - dir1_files print(\\"Files only in\\", dir1) for file in sorted(only_in_dir1): print(file) print(\\"nFiles only in\\", dir2) for file in sorted(only_in_dir2): print(file)"},{"question":"Create a Python 3 script that prompts the user to enter a month and a year, and then prints out the total number of days in that month and year, taking into account whether the year is a leap year or not. The script should also validate the input to ensure that the month is between 1 and 12, and the year is a positive integer. Additionally, the script should handle invalid input gracefully by displaying an error message and prompting the user to enter valid values.","solution":"def is_leap_year(year): Check if a given year is a leap year. if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True else: return False else: return True else: return False def days_in_month(month, year): Return the number of days in a given month of a given year. if month not in range(1, 13): raise ValueError(\\"Month must be between 1 and 12.\\") if year < 1: raise ValueError(\\"Year must be a positive integer.\\") # Days in each month. February has 28 days by default. month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Check for leap year and adjust February days. if month == 2 and is_leap_year(year): return 29 else: return month_days[month - 1] def get_days_in_month(month, year): Wrapper function to get user input and return days in month. try: days = days_in_month(month, year) return f\\"Number of days in month {month}, year {year}: {days}\\" except ValueError as e: return str(e)"},{"question":"Modify the code snippet so that it prints the **second largest** element in the given list, without using any built-in sorting functions. Additionally, the solution should have a time complexity of O(n) and a space complexity of O(1).","solution":"def find_second_largest(numbers): Returns the second largest element in the list. If the list has fewer than 2 elements, returns None. if len(numbers) < 2: return None first_largest = second_largest = float('-inf') for num in numbers: if num > first_largest: second_largest = first_largest first_largest = num elif first_largest > num > second_largest: second_largest = num return second_largest if second_largest != float('-inf') else None"},{"question":"Implement a function in Python that takes in a list of integers and returns a dictionary where the keys are the integers and the values are the number of times each integer appears in the list. The function should have a time complexity of O(n) and a space complexity of O(n).","solution":"def count_occurrences(lst): Takes in a list of integers and returns a dictionary where the keys are the integers and the values are the number of times each integer appears in the list. :param lst: List of integers :return: Dictionary with integers as keys and their occurrences as values occurrences = {} for num in lst: if num in occurrences: occurrences[num] += 1 else: occurrences[num] = 1 return occurrences"},{"question":"Create a Python script that generates a list of the prime numbers between two given numbers. The script should use the Sieve of Eratosthenes algorithm to generate the prime numbers.","solution":"def sieve_of_eratosthenes(start, end): Generate a list of prime numbers between the range \`start\` to \`end\` using the Sieve of Eratosthenes algorithm. if end < 2: return [] is_prime = [True] * (end + 1) p = 2 while p * p <= end: if is_prime[p]: for i in range(p * p, end + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(max(2, start), end + 1) if is_prime[p]] return primes"},{"question":"Write a decorator function that logs input arguments and return value of a function. The decorator should also limit the number of times a function can be called to a maximum of \`n\` calls, where \`n\` is an integer argument passed to the decorator. If a function is called more than \`n\` times, the decorator should raise an exception.","solution":"import functools def log_and_limit_calls(n): Decorator to log input arguments and return values of a function, and limit the number of calls to the function to n. def decorator(func): @functools.wraps(func) def wrapper(*args, **kwargs): if wrapper.call_count >= n: raise Exception(f\\"{func.__name__} has been called more than {n} times.\\") wrapper.call_count += 1 result = func(*args, **kwargs) print(f\\"Called: {func.__name__}({args}, {kwargs}) -> {result}\\") return result wrapper.call_count = 0 return wrapper return decorator"},{"question":"How might one go about writing a simple text analysis tool in Python that can categorize the sentiment of a sentence as positive, negative, or neutral based on the words used? The tool should be able to read from a predetermined list of positive and negative words stored in separate files, 'positive_words.txt' and 'negative_words.txt' respectively. The solution should also include a function to clean the input sentence by removing punctuation and making all words lowercase, as well as a function to categorize the sentiment based on the presence of positive, negative, or a mix of both types of words. The code should also print out the words contributing to the sentiment and the overall count of positive, negative, and neutral words.","solution":"import string def load_words(file_path): Loads words from a file and returns a set of these words. Each word in the file should be on a new line. with open(file_path, 'r') as file: words = set(word.strip().lower() for word in file) return words def clean_sentence(sentence): Cleans the input sentence by removing punctuation and making all words lowercase. translator = str.maketrans('', '', string.punctuation) clean_sentence = sentence.translate(translator).lower() return clean_sentence def categorize_sentiment(sentence, positive_words, negative_words): Categorizes the sentiment of a sentence as positive, negative, or neutral. Also returns the words contributing to the sentiment and the counts of positive, negative, and neutral words. cleaned_sentence = clean_sentence(sentence) words = cleaned_sentence.split() positive_count = 0 negative_count = 0 positive_contributing_words = [] negative_contributing_words = [] for word in words: if word in positive_words: positive_count += 1 positive_contributing_words.append(word) elif word in negative_words: negative_count += 1 negative_contributing_words.append(word) if positive_count > negative_count: sentiment = 'positive' elif negative_count > positive_count: sentiment = 'negative' else: sentiment = 'neutral' return { 'sentiment': sentiment, 'positive_words': positive_contributing_words, 'negative_words': negative_contributing_words, 'positive_count': positive_count, 'negative_count': negative_count, 'neutral_count': len(words) - positive_count - negative_count }"},{"question":"Write a Python function that takes three sequences of integers and returns their intersection (common elements). Assume all sequences contain unique elements.","solution":"def intersection(seq1, seq2, seq3): Returns the intersection of three sequences, i.e., elements that are present in all three sequences. set1 = set(seq1) set2 = set(seq2) set3 = set(seq3) return list(set1 & set2 & set3)"},{"question":"Create a Python function that emulates the functionality of a basic stack data structure using a list. The stack should support three operations: push (add an element to the top of the stack), pop (remove and return the element at the top of the stack), and peek (return the element at the top of the stack without removing it).","solution":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): if not self.items: return None # or raise an exception return self.items.pop() def peek(self): if not self.items: return None # or raise an exception return self.items[-1]"},{"question":"I have a Greek text and need to create unique codes for each character in it, as well as any two-letter and three-letter combinations of characters. The codes should follow specific rules: they must not start with a 0, and the length of the code should match the length of the character combination (i.e., one character gets a one-digit code, two characters get a two-digit code, and three characters get a three-digit code). To make things interesting, no two unique combinations should have the same code, and no part of one combination's code should appear within a code for a shorter combination (to avoid issues like one code being a substring of another). Can you provide a solution for encoding the first few characters and combinations so I can see how to proceed?","solution":"def generate_code_map(greek_text): Generates unique codes for characters and combinations in the Greek text. :param greek_text: a string of Greek characters :return: dictionary mapping characters and combinations to unique codes unique_chars = sorted(set(greek_text)) codes = {} # Generate codes for single characters code_value = 1 for char in unique_chars: if code_value < 10: # Ensure single character code is a single digit and not starting with 0 codes[char] = str(code_value) code_value += 1 # Generate codes for two-character combinations code_value = 10 # Start from 10 to ensure two-digit code char_combinations = sorted(set([a+b for a in unique_chars for b in unique_chars])) for comb in char_combinations: if code_value < 100: codes[comb] = str(code_value) code_value += 1 # Generate codes for three-character combinations code_value = 100 # Start from 100 to ensure three-digit code char_triplets = sorted(set([a+b+c for a in unique_chars for b in unique_chars for c in unique_chars])) for trip in char_triplets: if code_value < 1000: codes[trip] = str(code_value) code_value += 1 return codes"},{"question":"Can you explain how to write a recursive function in Python that calculates the nth Fibonacci number, where the first two numbers in the series are 0 and 1?","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function in Python that takes in a positive integer n as input and returns an array of size n, where the elements are in descending order from n to 1.","solution":"def descending_array(n): Returns an array of size n with elements in descending order from n to 1. return list(range(n, 0, -1))"},{"question":"Given a doubly linked list implementation, identify the index of a unique node without traversing from the head but consider a scenario from an already positioned node in the list. This positioned node has a reference 'current'.","solution":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None def find_index_from_current(current): Finds the index of the current node in the doubly linked list from current node itself. We consider the starting index as 0. if current is None: return -1 index = 0 temp = current # Traverse to the start of the list from the current node while temp.prev: index += 1 temp = temp.prev return index"},{"question":"Define function loudly which prints every character in a string one by one, each followed by a line break.","solution":"def loudly(s): Prints every character in the string \`s\` one by one, each followed by a line break. for char in s: print(char)"},{"question":"In Python, create a function to remove all characters from an input string that are not a-z, A-Z or numbers.","solution":"import re def remove_special_characters(input_string): Removes all characters from the input string that are not a-z, A-Z, or numbers. return re.sub(r'[^a-zA-Z0-9]', '', input_string)"},{"question":"Given a set of n distinctive elements, write a function to generate all possible permutations of these elements. Your function should be capable of handling duplicate permutations if the elements are not unique, but for this scenario, ensure that the elements are guaranteed to be unique.","solution":"from typing import List def generate_permutations(elements: List[int]) -> List[List[int]]: Generate all possible permutations for a given list of unique elements. :param elements: A list of unique elements :return: A list of lists, where each list is a permutation of the input elements def backtrack(start: int): if start == len(elements): result.append(elements[:]) for i in range(start, len(elements)): elements[start], elements[i] = elements[i], elements[start] backtrack(start + 1) elements[start], elements[i] = elements[i], elements[start] result = [] backtrack(0) return result"},{"question":"Generate code that finds the index of the first occurrence of a given character in a given string.","solution":"def find_first_occurrence(s, char): Returns the index of the first occurrence of char in string s. If the character is not found, returns -1. for i in range(len(s)): if s[i] == char: return i return -1"},{"question":"Create a function to calculate the surface area of a 3D cuboid given its three dimensions. After calculating the surface area, add a functionality to crop the cuboid. The cropping function should take two parameters: the cuboid and a list of vertices of planes where the crop would take place. The function should return a new cuboid object whose surface area should be calculated post-crop. Note that the cropped object can no longer be a cuboid if the cutting planes are not parallel to the x/y, y/z, or x/z planes but for simplicity, assume that they will be. Consider the case when the cutting plane may not intersect the cuboid, in such cases return a message saying, \\"Crop plane does not intersect the cuboid.\\"","solution":"class Cuboid: def __init__(self, length, width, height): self.length = length self.width = width self.height = height def surface_area(self): Returns the surface area of the cuboid. return 2 * (self.length * self.width + self.width * self.height + self.height * self.length) def crop(self, planes): Crops the cuboid based on the given planes and returns the new cuboid. Raises an exception if a crop plane does not intersect the cuboid. new_length = self.length new_width = self.width new_height = self.height for plane in planes: axis, coord = plane if axis == 'x': if 0 < coord < new_length: new_length = coord else: return \\"Crop plane does not intersect the cuboid.\\" elif axis == 'y': if 0 < coord < new_width: new_width = coord else: return \\"Crop plane does not intersect the cuboid.\\" elif axis == 'z': if 0 < coord < new_height: new_height = coord else: return \\"Crop plane does not intersect the cuboid.\\" else: return \\"Invalid plane axis. Must be 'x', 'y', or 'z'.\\" return Cuboid(new_length, new_width, new_height)"},{"question":"How can I generate English text from a given regular expression using Python?","solution":"import re def regex_to_english(regex): def interpret_match(match): if match == '.': return \\"any character\\" elif match == 'd': return \\"any digit\\" elif match == 'w': return \\"any word character\\" elif match == 's': return \\"any whitespace character\\" elif match.startswith('[') and match.endswith(']'): if '-' in match: return f\\"any character in range {match[1:-1]}\\" else: return f\\"any character in set {match[1:-1]}\\" else: return f\\"'{match}'\\" tokens = re.findall(r'.|.|[[^]]+]|.', regex) description = [interpret_match(token) for token in tokens] return ' followed by '.join(description)"},{"question":"Write a Python function to generate random graph structures, where each node and edge has an associated cost. The function should take the number of nodes as an input and return a dictionary where each key is a node and the value is another dictionary mapping to connected nodes with their associated cost. The costs should be randomized within a defined range. Also include functionality to adjust for different levels of connectivity (sparse vs dense graphs).","solution":"import random def generate_random_graph(num_nodes, cost_range=(1, 10), density=0.5): Generates a random graph with costs associated with each node and edge. :param num_nodes: Number of nodes in the graph. :param cost_range: Tuple indicating the range of edge costs (min_cost, max_cost). :param density: Float indicating the density of the graph (0 < density <= 1). :return: Graph represented as a dictionary. graph = {} for node in range(num_nodes): graph[node] = {} for i in range(num_nodes): for j in range(i + 1, num_nodes): if random.random() <= density: cost = random.randint(cost_range[0], cost_range[1]) graph[i][j] = cost graph[j][i] = cost return graph"},{"question":"Can you write a comprehensive python script that uses the ffmpeg library to convert all incoming RTSP streams to MJPEG streams in real time, with a customized resolution of 1280x720? The script should also have the capability to automatically adjust the codec and bit rate of the incoming RTSP streams to ensure a seamless conversion process. Moreover, it should have a feature to dynamically allocate resources in order to manage multiple incoming RTSP streams and prevent any potential stream loss.","solution":"import subprocess def convert_rtsp_to_mjpeg(rtsp_urls, output_urls, resolution=\\"1280x720\\", codec=\\"mjpeg\\", bitrate=\\"1000k\\"): Converts RTSP streams to MJPEG streams with the specified parameters using ffmpeg. :param rtsp_urls: List of RTSP stream URLs. :param output_urls: List of output stream URLs corresponding to RTSP streams. :param resolution: Target resolution for the output streams. :param codec: Codec to be used for the output streams. :param bitrate: Bitrate for the output streams. ffmpeg_processes = [] for i, rtsp_url in enumerate(rtsp_urls): output_url = output_urls[i] ffmpeg_command = [ \\"ffmpeg\\", \\"-i\\", rtsp_url, \\"-s\\", resolution, \\"-c:v\\", codec, \\"-b:v\\", bitrate, \\"-f\\", \\"mjpeg\\", output_url ] process = subprocess.Popen(ffmpeg_command) ffmpeg_processes.append(process) return ffmpeg_processes"},{"question":"Given two lists \`a\` and \`b\` of equal length, write a Python program to create a dictionary that maps elements of \`a\` to elements of \`b\`. In addition, the program should also allow for nested lists and create a nested dictionary respectively. If the list is one level nested, the program should maintain that structure in the dictionary. If the nesting goes beyond one level, the program should flatten the dictionary.","solution":"def create_nested_dict(a, b): Create a dictionary that maps elements of list \`a\` to elements of list \`b\`. Supports one level nested lists. def flatten(x): result = [] for el in x: if isinstance(el, list): result.extend(flatten(el)) else: result.append(el) return result if any(isinstance(i, list) for i in a) or any(isinstance(i, list) for i in b): a = flatten(a) b = flatten(b) return dict(zip(a, b))"},{"question":"Design a Python function that accepts a single-layer dictionary, where keys are strings and values are integers. Implement it such that it returns a tuple consisting of the dictionary's keys and a new list which contains the dictionary’s values sorted from the smallest to the largest.","solution":"def process_dict(d): Accepts a single-layer dictionary with string keys and integer values. Returns a tuple consisting of the dictionary's keys and a new list with the values sorted from smallest to largest. keys = list(d.keys()) sorted_values = sorted(d.values()) return (keys, sorted_values)"},{"question":"Write a Python function that calculates the Hamming distance between two strings. The Hamming distance is the number of positions at which the corresponding symbols are different. Include error handling for cases where the strings aren't of equal length.","solution":"def hamming_distance(str1, str2): Calculate the Hamming distance between two strings. Args: str1 (str): The first string. str2 (str): The second string. Returns: int: The Hamming distance if the strings have equal length. Raises: ValueError: If the strings are not of equal length. if len(str1) != len(str2): raise ValueError(\\"Strings must be of the same length\\") distance = 0 for char1, char2 in zip(str1, str2): if char1 != char2: distance += 1 return distance"},{"question":"Increase the complexity of the given programming problem to not only handle tuples with repetitive elements, duplicates, but also manage a mix of data types (integers, strings, and floating-point numbers) within the list. Also, include a personalized comparator function for the sorting process instead of using inbuilt sorting functions.","solution":"from typing import Any, List def personalized_comparator(a: Any, b: Any) -> int: Comparator function for comparing different data types. # Convert all elements to strings for comparison str_a = str(a) str_b = str(b) if str_a < str_b: return -1 elif str_a > str_b: return 1 else: return 0 def merge_sort(arr: List[Any], comparator) -> List[Any]: A merge sort implementation using a personalized comparator function. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid], comparator) right_half = merge_sort(arr[mid:], comparator) return merge(left_half, right_half, comparator) def merge(left: List[Any], right: List[Any], comparator) -> List[Any]: Merge function to combine two sorted halves using the comparator. sorted_list = [] while left and right: if comparator(left[0], right[0]) <= 0: sorted_list.append(left.pop(0)) else: sorted_list.append(right.pop(0)) sorted_list.extend(left) sorted_list.extend(right) return sorted_list def custom_sort(arr: List[Any]) -> List[Any]: Sorts a list based on a personalized comparator. return merge_sort(arr, personalized_comparator)"},{"question":"Given a string s and a positive integer k, write a code to find kth character from the end of the string.","solution":"def kth_char_from_end(s, k): Returns the kth character from the end of the string s. If k is greater than the length of the string, return an empty string. if k > len(s): return \\"\\" return s[-k]"},{"question":"You are a programmer and been asked to implement an Elevator system using Python. The Elevator system should be able to fetch input from users on different floors and move accordingly. The Elevator should also have a mechanism to handle multiple requests at once and prioritize the requests based on the direction of travel.","solution":"import heapq class Elevator: def __init__(self, start_floor=0): self.current_floor = start_floor self.up_queue = [] self.down_queue = [] self.requests = set() self.direction = 1 # 1 for up, -1 for down def request(self, floor): if floor > self.current_floor: heapq.heappush(self.up_queue, floor) elif floor < self.current_floor: heapq.heappush(self.down_queue, -floor) else: print(\\"Elevator is already at the requested floor.\\") self.requests.add(floor) def move(self): while self.requests: if self.direction == 1: if self.up_queue: next_floor = heapq.heappop(self.up_queue) self.current_floor = next_floor self.requests.discard(next_floor) else: self.direction = -1 # Switch direction if there's no more up requests else: if self.down_queue: next_floor = -heapq.heappop(self.down_queue) self.current_floor = next_floor self.requests.discard(next_floor) else: self.direction = 1 # Switch direction if there's no more down requests print(f\\"Elevator is at floor {self.current_floor}\\") def status(self): return { \\"current_floor\\": self.current_floor, \\"up_queue\\": list(self.up_queue), \\"down_queue\\": [-f for f in self.down_queue], \\"requests\\": sorted(self.requests) }"},{"question":"Build a Python function that merges two given dictionaries by summing up the values of common keys and then sort the resulted dictionary by decreasing values of these keys.","solution":"def merge_and_sort_dicts(dict1, dict2): Merges two dictionaries by summing up the values of common keys and sorts the result by decreasing values. Parameters: dict1 (dict): First dictionary to merge. dict2 (dict): Second dictionary to merge. Returns: dict: Merged and sorted dictionary by values in descending order. merged_dict = dict1.copy() for key, value in dict2.items(): if key in merged_dict: merged_dict[key] += value else: merged_dict[key] = value sorted_dict = {k: v for k, v in sorted(merged_dict.items(), key=lambda item: item[1], reverse=True)} return sorted_dict"},{"question":"Write a function to solve the task of finding the least number of times a string needs to be repeated so that the if it contains all the characters of another string. Only consider uppercase English alphabets.","solution":"def min_repeats_to_contain_chars(base_str, target_str): Returns the minimum number of repeats of base_str required so that all characters in target_str are covered. Args: base_str (str): The base string to be repeated. target_str (str): The target string of characters to be covered. Returns: int: Minimum number of repeats needed from collections import Counter # Count character frequency in base_str base_counter = Counter(base_str) # Count character frequency in target_str target_counter = Counter(target_str) # Track the max multiplier needed for any character max_multiplier = 0 for char, count in target_counter.items(): if char not in base_counter: return float('inf') # Impossible to cover this character # Calculate multiplier for the current character multiplier = -(-count // base_counter[char]) # Equivalent to ceiling division max_multiplier = max(max_multiplier, multiplier) return max_multiplier"},{"question":"Create a Python program that takes two strings as input, and returns a new string that is the result of appending the second string to the first one.","solution":"def append_strings(s1, s2): Returns a new string that is the result of appending s2 to s1. return s1 + s2"},{"question":"Create two functions. The first function should generate a list of N integers. The second function should take this list as an input and return a new list where each element is replaced by the next greatest prime number which is greater than the current number in the list. Should there be no such prime number, that number is to be replaced by 0 in the generated list. Prime numbers are numbers that have only 2 factors: 1 and the number itself.","solution":"def generate_integers_list(N): Generates a list of N integers starting from 1. return list(range(1, N + 1)) def is_prime(num): Determines if a number is a prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def next_greatest_prime(lst): For each integer in the list, replace it with the next greatest prime number. If no such prime exists, replace it with 0. def next_prime(n): candidate = n + 1 while True: if is_prime(candidate): return candidate candidate += 1 return [next_prime(num) for num in lst]"},{"question":"Design an algorithm that from a given string with both lowercase and uppercase letters, you have to pick a random character from the string which has an adjacent character with the same case (either both are uppercase or both are lowercase). In the case where no such character is present, the function should return an empty string.","solution":"import random def pick_random_adjacent_same_case(s): Returns a random character from the string s that has an adjacent character with the same case. If no such character exists, returns an empty string. same_case_indices = [] for i in range(len(s) - 1): if s[i].isalpha() and s[i + 1].isalpha() and ((s[i].islower() and s[i + 1].islower()) or (s[i].isupper() and s[i + 1].isupper())): same_case_indices.append(i) same_case_indices.append(i + 1) if not same_case_indices: return \\"\\" return s[random.choice(same_case_indices)]"},{"question":"Write a code to print the longest substring without repeating characters in a given string. The approach should be optimized for efficiency, taking into account possible restrictions on memory usage.","solution":"def longest_substring_without_repeating_characters(s): Returns the longest substring without repeating characters. start = 0 max_length = 0 max_substring = \\"\\" char_index_map = {} for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end current_length = end - start + 1 if current_length > max_length: max_length = current_length max_substring = s[start:end+1] return max_substring"},{"question":"Write a code to print the common elements of two given arrays, but with a constraint that the code must have a time complexity of O(n) and a space complexity of O(1). Additionally, the code should not use any built-in functions or data structures for sorting or searching.","solution":"def common_elements(arr1, arr2): Prints the common elements of two given arrays. # These arrays should be sorted. arr1.sort() arr2.sort() # Initialize pointers for both arrays i, j = 0, 0 # List to store common elements common = [] # Traverse both arrays simultaneously, O(n) time complexity while i < len(arr1) and j < len(arr2): if arr1[i] == arr2[j]: # If elements match, add to common list common.append(arr1[i]) i += 1 j += 1 elif arr1[i] < arr2[j]: # Move pointer of the smaller element i += 1 else: j += 1 return common"},{"question":"Hello, I am studying pytorch and creating a model by overlapping various convolution operations using ModuleList. But I encountered an issue. The number of convolutions input to ModuleList is all determined, so there are no mutable parameters, but the shapes of Filters to be used in ModuleList are not determined. How can I initialize the conv layers by preprocessing the first data input to set up the conv layers and make them work properly? I want to initialize the model with the first input to train it with the data that will be actually input. Could you help me with this issue?","solution":"import torch import torch.nn as nn class DynamicConvModel(nn.Module): def __init__(self, num_convolutions, activation=nn.ReLU): super(DynamicConvModel, self).__init__() self.num_convolutions = num_convolutions self.activation_function = activation self.convs = nn.ModuleList() self.initialized = False def initialize_conv_layers(self, input_channels, input_size): Initialize the conv layers in the ModuleList based on the first input data. out_channels = input_channels for _ in range(self.num_convolutions): in_channels = out_channels out_channels = int(out_channels / 2) if out_channels > 1 else 1 kernel_size = min(input_size, 3) padding = kernel_size // 2 conv_layer = nn.Conv2d(in_channels, out_channels, kernel_size, padding=padding) self.convs.append(conv_layer) input_size = (input_size - kernel_size + 2 * padding + 1) self.initialized = True def forward(self, x): if not self.initialized: _, c, h, w = x.size() self.initialize_conv_layers(c, h) for conv in self.convs: x = conv(x) x = self.activation_function()(x) return x"},{"question":"Create a dictionary using comprehension technique in Python language, where keys are prime numbers within the range 1 to 50 and their values are their cubes. Additionally, include a method to check the dictionary's correctness, such that it verifies both: the keys are prime within given range and the values are accurate cubes of the keys.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def generate_prime_cubes_dict(): Generate a dictionary where the keys are prime numbers within the range 1 to 50 and their values are their cubes. prime_cubes = {x: x**3 for x in range(1, 51) if is_prime(x)} return prime_cubes def verify_prime_cubes_dict(prime_cubes): Verify if the dictionary keys are prime numbers and values are their cubes. for key, value in prime_cubes.items(): if not is_prime(key) or value != key**3: return False return True"},{"question":"Write a Python program that simulates two spaceships moving in opposite directions from a space station starting with the same position. After a certain amount of time, calculate their distances from the space station considering their acceleration due to gravity and fuel consumption, which impacts their velocity. Also, consider including the errors that might occur in measuring the time, velocity, and calculating the distances.","solution":"import random def calculate_distance(time, initial_velocity, acceleration, error_rate=0.05): Calculate the distance traveled considering acceleration and initial velocity, and applying a random error rate. # Simulating possible errors in time and velocity measurements time_error = time * (1 + random.uniform(-error_rate, error_rate)) initial_velocity_error = initial_velocity * (1 + random.uniform(-error_rate, error_rate)) # Calculating distance using the formula: d = (initial_velocity_error * time_error) + (0.5 * acceleration * time_error^2) distance = (initial_velocity_error * time_error) + (0.5 * acceleration * time_error ** 2) return distance def spaceship_distances(time, initial_velocity_a, acceleration_a, initial_velocity_b, acceleration_b): Calculate distances of two spaceships moving in opposite directions from the space station. distance_a = calculate_distance(time, initial_velocity_a, acceleration_a) distance_b = calculate_distance(time, initial_velocity_b, acceleration_b) return distance_a, distance_b"},{"question":"Implement the stack data structure using a doubly linked list. Make sure to include the necessary methods: push, pop, peek, is_empty, and size. Additionally, implement a method that finds the minimum element currently in the stack in constant time. Placing restrictions on direct access to the minimum element (i.e., it cannot be accessed directly through the linked list) will add more challenge to the question.","solution":"class Node: def __init__(self, value, prev=None, next=None): self.value = value self.prev = prev self.next = next class Stack: def __init__(self): self.head = None self.tail = None self._size = 0 self.min_stack = [] def push(self, value): new_node = Node(value, prev=self.tail) if self.tail: self.tail.next = new_node self.tail = new_node if not self.head: self.head = new_node self._size += 1 # Handle the minimum value in constant time if not self.min_stack or value <= self.min_stack[-1]: self.min_stack.append(value) def pop(self): if self.is_empty(): raise IndexError(\\"pop from empty stack\\") value = self.tail.value if self.tail == self.head: self.head = None self.tail = None else: self.tail = self.tail.prev self.tail.next = None self._size -= 1 # Handle the minimum value in constant time if value == self.min_stack[-1]: self.min_stack.pop() return value def peek(self): if self.is_empty(): raise IndexError(\\"peek from empty stack\\") return self.tail.value def is_empty(self): return self._size == 0 def size(self): return self._size def get_min(self): if self.is_empty(): raise IndexError(\\"get_min from empty stack\\") return self.min_stack[-1]"},{"question":"Can you provide a python code to check if a given list contains a specific string and if it does, return the index of the string in the list? If the string is not found in the list, I would like the function to return -1.","solution":"def find_string_in_list(lst, target): Returns the index of the target string in the list. If the string is not found, returns -1. Parameters: lst (list): The list to search in. target (str): The target string to search for. Returns: int: The index of the target string, or -1 if not found. try: return lst.index(target) except ValueError: return -1"},{"question":"Create a 2D array with three rows and two columns. Each element in the array must be a unique prime number. Additionally, include a function that checks if a given number is prime, and use it to validate the array.","solution":"def is_prime(n): Check if a given number n is a prime number. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def generate_prime_2d_array(): Generate a 2D array with three rows and two columns, where each element is a unique prime number. primes = [] num = 2 while len(primes) < 6: if is_prime(num): primes.append(num) num += 1 return [primes[:2], primes[2:4], primes[4:]] # Example array produced: # [[2, 3], # [5, 7], # [11, 13]] prime_2d_array = generate_prime_2d_array()"},{"question":"Write a Python code to find the second smallest value in a 3D array. Make sure to handle the cases when the array is empty or contains only one element to avoid errors.","solution":"import numpy as np def find_second_smallest_3d_array(array): Returns the second smallest value in a 3D array. If the array is empty or contains only one element, raises a ValueError. flat_array = np.array(array).flatten() unique_elements = np.unique(flat_array) if len(unique_elements) < 2: raise ValueError(\\"The array must contain at least two unique elements.\\") sorted_unique_elements = np.sort(unique_elements) return sorted_unique_elements[1]"},{"question":"Generate a list of 1000 random numbers between 1 and 1000 using Python. In addition, ensure the list doesn't contain any duplicate numbers. Afterwards, sort this list in ascending order and implement a binary search algorithm to find a specific number entered by a user. If the number isn't found your program should return an appropriate message. Make sure that your binary search algorithm shows an efficient time complexity.","solution":"import random def generate_sorted_unique_list(size, start, end): Generates a sorted list of unique random numbers. Parameters: size (int): The size of the list to generate. start (int): The minimum number to include in the list. end (int): The maximum number to include in the list. Returns: list: Sorted list of unique random numbers. random_list = random.sample(range(start, end + 1), size) random_list.sort() return random_list def binary_search(arr, x): Perform binary search on a sorted array. Parameters: arr (list): The sorted list to search. x (int): The number to search for in the list. Returns: int: The index of the number if found, otherwise -1. low = 0 high = len(arr) - 1 while low <= high: mid = (low + high) // 2 mid_val = arr[mid] if mid_val == x: return mid elif mid_val < x: low = mid + 1 else: high = mid - 1 return -1 # Example usage: # list_of_numbers = generate_sorted_unique_list(1000, 1, 1000) # number_to_find = 123 # index = binary_search(list_of_numbers, number_to_find) # print(f\\"Number found at index: {index}\\" if index != -1 else \\"Number not found\\")"},{"question":"Use Python to generate a random hexadecimal color code. The code should not contain the letters \\"A\\", \\"B\\", \\"C\\", \\"D\\", or \\"E\\". Additionally, the first character of the code must be a letter (either \\"F\\", \\"G\\", \\"H\\", \\"I\\", \\"J\\", \\"K\\", \\"L\\", \\"M\\", \\"N\\", \\"O\\", \\"P\\", \\"Q\\", \\"R\\", \\"S\\", \\"T\\", \\"U\\", \\"V\\", \\"W\\", \\"X\\", \\"Y\\", or \\"Z\\") and the remaining characters can be any combination of letters and numbers.","solution":"import random def generate_specific_hex_color(): Generates a random hexadecimal color code that starts with a letter from 'F' to 'Z' and contains no 'A', 'B', 'C', 'D', 'E' in the code. first_char = random.choice('FGHIJKLMNOPQRSTUVWXYZ') remaining_chars = ''.join(random.choices('F0123456789', k=5)) return f'#{first_char}{remaining_chars}'"},{"question":".Create a function using Python, that takes 2 lists as arguments and returns a new list containing the elements of the 2 lists that have the same index.","solution":"def combine_lists(list1, list2): Returns a new list containing the elements of the 2 lists that have the same index. return [list1[i] for i in range(min(len(list1), len(list2)))]"},{"question":"Write a python program to determine whether an integer n is a perfect cube. The program should include an if statement to check if n is negative and handle it accordingly.","solution":"def is_perfect_cube(n): Returns True if n is a perfect cube, otherwise returns False. Handles negative integers appropriately by checking their absolute values. if n < 0: return is_perfect_cube(-n) cube_root = round(n ** (1/3)) return cube_root ** 3 == n"},{"question":"Elegance is better than adequacy. Can you write a piece of Python 3 code to create a numeric sequence? But, rather than simply requiring a function that furnishes a numeric sequence, let's strive for a more refined solution. Our aim is to generate a sequence that represents not only the Fibonacci series, celebrated for its captivating mathematical properties, but also presents two additional sequences - the Lucas sequence, which shares similarities with Fibonacci but starts with 2 and 1 instead of 0 and 1; and a further custom sequence where you decide the starting two numbers. Your program should confirm if the requested sequence length is valid, and generate the relevant sequence based on user's initial numbers. As a part of testing, provide two initial numbers and the desired sequence length. Here's a simple task to start: execute the script and observe the first ten numbers of the Fibonacci series.","solution":"def generate_sequence(seq_type, length, initial1=0, initial2=1): Generate a numeric sequence of a specified type (Fibonacci, Lucas, or Custom) and length. Parameters: seq_type (str): The type of sequence ('fibonacci', 'lucas', 'custom'). length (int): The desired length of the sequence. initial1 (int): The first number in the sequence (only used for 'custom' type). initial2 (int): The second number in the sequence (only used for 'custom' type). Returns: list: The generated numeric sequence. if length <= 0: return [] # Define initial sequences if seq_type == 'fibonacci': initial1, initial2 = 0, 1 elif seq_type == 'lucas': initial1, initial2 = 2, 1 sequence = [initial1, initial2] # Generate sequence while len(sequence) < length: sequence.append(sequence[-1] + sequence[-2]) return sequence[:length]"},{"question":"Refine and add more complexity to the coding challenge. Introduce handling of null values, duplicates and different data types. Consider an additional parameter to control precision of the median.","solution":"from typing import List, Optional, Union def median(arr: List[Union[int, float]], precision: int = 2) -> Optional[float]: Returns the median of a list of numbers, rounded to the specified precision. Handles null values, duplicate values, and different data types. Parameters: - arr: List[Union[int, float]] - A list of numbers (integers or floats) - precision: int - The number of decimal places to round the median to (default is 2) Returns: Optional[float] - The median of the list rounded to the specified precision, or None if the list is empty or contains only null values. # Remove null values filtered_arr = [x for x in arr if x is not None] # If the list is empty after filtering, return None if not filtered_arr: return None # Sort the array filtered_arr.sort() n = len(filtered_arr) mid = n // 2 # Calculate the median based on odd/even length if n % 2 == 0: median_val = (filtered_arr[mid - 1] + filtered_arr[mid]) / 2 else: median_val = filtered_arr[mid] # Round the median to the specified precision return round(median_val, precision)"},{"question":"Given a list of integers and a given number, write a function to determine if any two numbers in the list sum up to the given number using a hash table data structure. Additionally, implement a performance counter, to measure how long the function takes to execute.","solution":"import time def two_sum(nums, target): Determines if any two numbers in the list sum up to the given number using a hash table. :param nums: List of integers :param target: Integer target sum :return: Boolean indicating if any two numbers sum up to the target hash_table = {} for num in nums: complement = target - num if complement in hash_table: return True hash_table[num] = True return False def timed_two_sum(nums, target): Determines if any two numbers in the list sum up to the given number using a hash table, and measures the time taken to execute the function. :param nums: List of integers :param target: Integer target sum :return: Tuple(Boolean indicating if any two numbers sum up to the target, float representing execution time) start_time = time.time() result = two_sum(nums, target) end_time = time.time() execution_time = end_time - start_time return result, execution_time"},{"question":"Square every element of an array and write a unit test to verify the correctness of the function. However, this time you are required to implement the function without using any built-in array manipulation methods or functions (such as map, for loop, or recursion). Your solution should have a time complexity of O(n) and a space complexity of O(1). You can only use basic arithmetic operations and bit shifting.","solution":"def square_elements(arr): Squares each element in the provided array in-place. :param arr: List of integers :return: None (The array is modified in-place) if not arr: return i = 0 n = len(arr) # Using a while loop for iteration to align with the given constraints while i < n: arr[i] = arr[i] * arr[i] i += 1"},{"question":"Write a python code that retrieves the top 10 most frequently used words from a given list of words, excluding any words that are shorter than three characters in length. Additionally, your code should handle cases where there are ties for the top 10 most frequently used words by considering the lexicographical order of the words. Avoid using any built-in functions or libraries for sorting or counting.","solution":"def most_frequent_words(words): Returns the top 10 most frequently used words from a given list of words, excluding any words that are shorter than three characters in length. In case of ties, it considers the lexicographical order. word_count = {} # Count the frequency of each word for word in words: if len(word) >= 3: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 # Convert word_count dictionary to a list of tuples and sort it word_items = [] for word, count in word_count.items(): word_items.append((word, count)) # Implementing a sorting algorithm by frequency first, then lexicographical for ties def sort_key(item): return (-item[1], item[0]) # Insertion Sort for the simplicity of replicating a sort function for i in range(1, len(word_items)): key_item = word_items[i] j = i - 1 while j >= 0 and sort_key(word_items[j]) > sort_key(key_item): word_items[j + 1] = word_items[j] j -= 1 word_items[j + 1] = key_item # Extract the top 10 words (or less if not enough words) top_words = [word for word, count in word_items[:10]] # Return the result return top_words"},{"question":"Implement a recursive function that finds the nth node from the end of a singly linked list. The function should return the value of the nth node. The linked list contains only positive integers. The value of n will always be a valid index (i.e., it will never be larger than the length of the list). You are not allowed to modify the linked list structure or create a new linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_nth_from_end(head, n): Finds the value of the nth node from the end of a singly linked list. :param head: The head node of the singly linked list. :param n: The position from the end (1-based index). :return: The value of the nth node from the end. def helper(node, n): if not node: return 0, None index, result = helper(node.next, n) index += 1 if index == n: result = node.value return index, result index, value = helper(head, n) return value"},{"question":"I am taking an introductory CS course and I was wondering how to build a simple calculator in Python. Could you assist me with creating one that can add, subtract, multiply, and divide two numbers?","solution":"def add(a, b): Returns the sum of a and b. return a + b def subtract(a, b): Returns the difference between a and b. return a - b def multiply(a, b): Returns the product of a and b. return a * b def divide(a, b): Returns the quotient of a divided by b. Raises a ValueError if b is zero. if b == 0: raise ValueError(\\"Cannot divide by zero\\") return a / b"},{"question":"Implement a Python program that not only uses the re module to remove all punctuation from a given string but also validates whether the string entered is a proper sentence or not. A proper sentence should start with a capital letter and end with a full stop (.), question mark (?) or exclamation mark (!). If the string is not a proper sentence, the program should raise a custom exception. Ensure that the program can handle multi-line strings.","solution":"import re class ImproperSentenceError(Exception): pass def clean_and_validate_sentence(sentence): Removes all punctuation from a given string and validates if it is a proper sentence. A proper sentence should start with a capital letter and end with a full stop (.), question mark (?), or exclamation mark (!). Parameters: sentence (str): The string to be cleaned and validated. Returns: str: The cleaned string without punctuation. Raises: ImproperSentenceError: If the string is not a proper sentence. if not isinstance(sentence, str): raise ValueError(\\"Input must be a string\\") # Check if the sentence is a proper sentence if not sentence[0].isupper() or sentence[-1] not in \\".?!\\": raise ImproperSentenceError(\\"The sentence is not properly formatted\\") # Remove all punctuation cleaned_sentence = re.sub(r'[^ws]', '', sentence) return cleaned_sentence"},{"question":"Create a pythonic code to check if a string is palindrome or not. The code should ignore any whitespace in the string, and should also be case-insensitive. The code should return True if the string is a palindrome, otherwise return False.","solution":"def is_palindrome(s: str) -> bool: Checks if the given string is a palindrome, ignoring whitespace and case. Args: s (str): The string to check. Returns: bool: True if the string is a palindrome, otherwise False. cleaned_str = ''.join(c.lower() for c in s if c.isalnum()) return cleaned_str == cleaned_str[::-1]"},{"question":"Given an infinite stream of integers, sort the integers and find the kth largest element in the stream. Also, efficient space and time complexities are required for the solution. Implement a class or data structure that can process a sequence of operations: inserting an integer into the stream and finding the kth largest element.","solution":"import heapq class KthLargest: def __init__(self, k): Initializes the KthLargest class with \`k\` to find the kth largest element. It uses a min-heap of size k to store the k largest elements. self.k = k self.heap = [] def insert(self, val): Inserts a new value into the stream and maintains the size of the heap at most k. if len(self.heap) < self.k: heapq.heappush(self.heap, val) elif val > self.heap[0]: heapq.heapreplace(self.heap, val) def find_kth_largest(self): Returns the kth largest element in the stream. if len(self.heap) < self.k: return None # Less than k elements in the stream return self.heap[0]"},{"question":"Given a list of integers, write a Python program to count the number of each distinct integer in the list and return a dictionary of integers where the key is the integer, and the value is their count. Additionally, the program should identify the most common integer and its count.","solution":"from collections import Counter def count_integers_and_most_common(lst): Counts the number of each distinct integer in the list and returns a dictionary of integers where: - Key is the integer - Value is their count Also identifies the most common integer and its count. :param lst: List of integers :return: Tuple of (dictionary of integer counts, most common integer, most common integer count) if not lst: return ({}, None, 0) count_dict = Counter(lst) most_common_num, most_common_count = count_dict.most_common(1)[0] return count_dict, most_common_num, most_common_count"},{"question":"Can I write a Python function that reverses each word in a given string? I don't want to change the order of the words in the sentence.","solution":"def reverse_words(sentence): Reverses each word in the given sentence without changing the order of the words. :param sentence: A string containing a sentence. :return: A string with each word reversed, but the order of words remains unchanged. words = sentence.split(\\" \\") reversed_words = [word[::-1] for word in words] return \\" \\".join(reversed_words)"},{"question":"create a python program that creates a list of prime numbers from 1 to 100","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def list_primes_up_to_100(): Returns a list of prime numbers from 1 to 100. primes = [] for num in range(1, 101): if is_prime(num): primes.append(num) return primes"},{"question":"Construct a method in Python to calculate the average of a given list of numbers.","solution":"def calculate_average(numbers): Calculates the average of a given list of numbers. :param numbers: List of integers or floats. :return: The average of the list of numbers. if not numbers: return 0 return sum(numbers) / len(numbers)"},{"question":"Write a Python program which not only searches for a given item in a list, but also determines the number of occurrences of that item in the list. Alongside this, incorporate functions that handle common issues such as case sensitivity for string data type or null values. Make sure that under no circumstances does your code throw an error, and it handles all potential problems gracefully.","solution":"def search_item(lst, item): Searches for \`item\` in \`lst\` and returns a tuple: (presence, count). presence is a boolean indicating whether item is in the list, and count is the number of occurrences of \`item\` in the list. This function handles: - Case sensitivity for strings - Null values in the list - Avoiding errors for unexpected inputs # Normalize strings to handle case sensitivity if isinstance(item, str): item = item.lower() lst = [x.lower() if isinstance(x, str) else x for x in lst] # Filter out None values lst = [x for x in lst if x is not None] # Initialize count count = 0 # Count occurrences of item try: count = lst.count(item) except Exception as e: # Gracefully handle any unexpected errors print(f\\"An error occurred: {str(e)}\\") return False, 0 return (count > 0), count"},{"question":"Amend the following program. Firstly, it should only obtain numbers from the user until a non-numeric input is given rather than a predetermined set of inputs. Secondly, instead of summing up the numbers, the program should find the prime numbers out of the inputs and print them out at the end.","solution":"def is_prime(num): Returns True if the number is prime, otherwise False. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def get_prime_numbers(): Continuously obtains numbers from user until a non-numeric input is given. Returns a list of prime numbers from the given inputs. prime_numbers = [] while True: user_input = input(\\"Enter a number (or non-numeric to stop): \\") if user_input.isdigit(): number = int(user_input) if is_prime(number): prime_numbers.append(number) else: break return prime_numbers"},{"question":"Modify the supplied piece of programming code in a way that, instead of merely outputting the word \\"four\\", it would dynamically print whichever number (in string format) that is given as an input, for instance, \\"four\\", \\"eight\\", \\"ten\\" or \\"twenty seven\\". Bear in mind, the solution needs to cover potentially any number and should not be specifically tailored to just a select few.","solution":"def print_number(number): Prints the number as a string. print(str(number))"},{"question":"Write a Python script that takes a list of integers as input and returns the biggest number in the list. If the list is empty, the script should return None.","solution":"def find_biggest_number(numbers): Returns the biggest number in the list. If the list is empty, returns None. if not numbers: return None return max(numbers)"},{"question":"Iterate through the given array and print only the even numbers. Additionally, ensure that the program runs in O(n) time complexity and uses only constant extra space. The solution should also be implemented recursively instead of using any iterative loops.","solution":"def print_even_numbers(arr, index=0): Recursively prints the even numbers in the given array. Args: arr: list of integers index: current index being checked in the list, default is 0 if index == len(arr): return if arr[index] % 2 == 0: print(arr[index]) print_even_numbers(arr, index + 1)"},{"question":"Write a program in Python to determine if a given string is a palindrome or not. A palindrome is a sequence of characters that reads the same backward as forward. The program should return 'true' if the string is a palindrome and 'false' otherwise.","solution":"def is_palindrome(s): Determine if the given string s is a palindrome. :param s: string to check :return: 'true' if s is a palindrome, 'false' otherwise s = s.lower() s = ''.join(filter(str.isalnum, s)) return 'true' if s == s[::-1] else 'false'"},{"question":"Develop a Python function that verifies if a list or any nested lists within it are empty, including lists nested within other lists to any depth. The function should return True only if the main list and all nested lists are empty. Additionally, the function should manage circular references without getting into an infinite loop.","solution":"def is_list_empty(lst, seen=None): Verifies if a list and all nested lists within it are empty. Args: lst (list): The list to check. seen (set): A set to keep track of seen lists to avoid circular references. Returns: bool: True if the main list and all nested lists are empty, False otherwise. # Initialize seen sets if it's None to keep track of references if seen is None: seen = set() # Convert the list to a tuple for hashing lst_id = id(lst) # avoid revisiting the same list which could cause an infinite loop in circular references if lst_id in seen: return True # already processed this structure, return True # Add current list id to seen set seen.add(lst_id) # Iterate over each item in the list for item in lst: if isinstance(item, list): # Recursive check for sublists if not is_list_empty(item, seen): return False else: return False return True"},{"question":"I need a LED board to plug directly into a barrel jack on raspberry pi, for two different condition. When the Rpi is running Pi suger and when it's running on it's own. Can you give blink pattern to differentiate them?","solution":"def get_led_blink_pattern(energy_source): Returns the LED blink pattern depending on the energy source. Arguments: energy_source -- string: Either \\"pi_sugar\\" or \\"own\\" Returns: -- string: 'fast' for fast blinking (pi_sugar) and 'slow' for slow blinking (own) if energy_source == \\"pi_sugar\\": return 'fast' elif energy_source == \\"own\\": return 'slow' else: raise ValueError(\\"Invalid energy source. Must be 'pi_sugar' or 'own'.\\")"},{"question":"Write a Python code that implements a function to simulate rolling a six-sided dice. Additionally, the function should allow for the simulation of biased dice, where the likelihood of rolling each side can be customarily defined through an input probability distribution list. The program should also include error checking to ensure valid probability list inputs.","solution":"import random def roll_dice(probabilities=None): Simulates rolling a six-sided dice. If probabilities are provided, it biases the roll accordingly. :param probabilities: A list of 6 probabilities for the outcomes [1, 2, 3, 4, 5, 6]. The probabilities should sum to 1. :return: The outcome of the dice roll. if probabilities: if not isinstance(probabilities, list) or len(probabilities) != 6: raise ValueError(\\"Probabilities must be a list of 6 values.\\") if not all(isinstance(prob, (int, float)) for prob in probabilities): raise ValueError(\\"All probabilities must be numeric.\\") if not (sum(probabilities) > 0.999 and sum(probabilities) < 1.001): raise ValueError(\\"Probabilities must sum to 1.\\") if probabilities is None: probabilities = [1/6] * 6 # If not provided, assume an unbiased dice return random.choices([1, 2, 3, 4, 5, 6], probabilities)[0]"},{"question":"Write a function in Python that takes in a list of integers as a parameter and returns a new list where each element is the maximum of each window of size 'k'. The function should have a time complexity of O(n) and a space complexity of O(k).","solution":"from collections import deque def max_sliding_window(nums, k): Returns a list of the maximums of each window of size 'k' in the given list \`nums\`. Parameters: nums (list of int): The list of integers. k (int): The size of the sliding window. Returns: list of int: A list where each element is the maximum of each window of size 'k'. if not nums or k == 0: return [] dq = deque() result = [] for i in range(len(nums)): # Remove elements not within the window from the deque while dq and dq[0] < i - k + 1: dq.popleft() # Remove elements smaller than the current element from the deque while dq and nums[dq[-1]] < nums[i]: dq.pop() # Add the current element's index to the deque dq.append(i) # Append the maximum element of the window to the result starting from index k-1 if i >= k - 1: result.append(nums[dq[0]]) return result"},{"question":"Given an array A with two repeating elements, write a function to find the two repeating elements. The function should have a time complexity of O(n) and a space complexity of O(1). Additionally, the function should modify the original array A by negating the values at the indices corresponding to the absolute values of the elements. The function should return the two repeating elements as a pair.","solution":"def find_two_repeating_elements(A): Finds the two repeating elements in the array A. Params: A: list[int] - input array containing two repeating elements. Returns: tuple(int, int) - a pair of the two repeating elements. n = len(A) - 2 first_repeat, second_repeat = 0, 0 for i in range(len(A)): index = abs(A[i]) - 1 if A[index] < 0: if first_repeat == 0: first_repeat = abs(A[i]) else: second_repeat = abs(A[i]) else: A[index] = -A[index] # Restore array (optional, to maintain the original structure) for i in range(len(A)): A[i] = abs(A[i]) return first_repeat, second_repeat"},{"question":"Implement a function in Python that compares two given strings character-by-character and returns a list of Boolean values indicating whether the characters at the corresponding positions are equal in both strings. Also, write a code that checks if the returned list contains any True value.","solution":"def compare_strings(str1, str2): Compares two strings character-by-character and returns a list of Boolean values. Each element in the list is True if characters at corresponding positions are equal, otherwise False. return [c1 == c2 for c1, c2 in zip(str1, str2)] def contains_true(boolean_list): Checks if the given list of Boolean values contains any True value. return any(boolean_list)"},{"question":"Iterate through a list and print only the elements that include the character 'a' and have a length greater than 5. The solution should have a time complexity of O(n), where n is the length of the list.","solution":"def filter_long_strings_with_a(words): Returns a list of words that contain the character 'a' and have length greater than 5. Parameters: words (list of str): List of words to be filtered. Returns: list of str: List containing words that meet the criteria. return [word for word in words if 'a' in word and len(word) > 5]"},{"question":"You've been tasked with organizing a large number of files in a directory using Python scripts. Your files are stored in various folders, but you need to find all the JPG and PNG files across these directories and move them to new empty folders named 'images' and '籌碼' respectively. How can you achieve this using Python? Also, consider making your script reusable for other directory organization tasks.","solution":"import os import shutil def organize_files(source_dir, dest_dir_images, dest_dir_chouma): Organize JPG and PNG image files from source_dir into dest_dir_images and dest_dir_chouma. JPG files go into dest_dir_images and PNG files go into dest_dir_chouma. if not os.path.isdir(dest_dir_images): os.makedirs(dest_dir_images) if not os.path.isdir(dest_dir_chouma): os.makedirs(dest_dir_chouma) for root, _, files in os.walk(source_dir): for file in files: if file.lower().endswith('.jpg'): shutil.move(os.path.join(root, file), os.path.join(dest_dir_images, file)) elif file.lower().endswith('.png'): shutil.move(os.path.join(root, file), os.path.join(dest_dir_chouma, file)) # Example usage: # organize_files('/path/to/source', '/path/to/dest/images', '/path/to/dest/籌碼')"},{"question":"Write a python program to print all the prime factors of a number.","solution":"def prime_factors(n): Returns a list of all prime factors of the given number n. factors = [] # Check for number of 2s that divide n while n % 2 == 0: factors.append(2) n = n // 2 # n must be odd at this point so a skip of 2 is fine for i in range(3, int(n**0.5) + 1, 2): # While i divides n, add i and divide n while n % i == 0: factors.append(i) n = n // i # Condition if n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Create a Python function that determines if a given 3D point exists inside the rectangular prismatic boundary defined by two opposing points. Additionally, extend this function to check whether this point, along with a list of other points, all lie within the prismatic boundary. Implement in a way that optimizes for efficiency when checking multiple points.","solution":"def is_point_inside_prism(point, prism_point1, prism_point2): Check if a single 3D point is inside the prismatic boundary defined by two opposing points. :param point: Tuple of (x, y, z) coordinates of the point to check :param prism_point1: Tuple of (x, y, z) coordinates defining one point of the prism :param prism_point2: Tuple of (x, y, z) coordinates defining the opposite point of the prism :return: Boolean value if the point is inside the prism x, y, z = point x1, y1, z1 = prism_point1 x2, y2, z2 = prism_point2 return (min(x1, x2) <= x <= max(x1, x2) and min(y1, y2) <= y <= max(y1, y2) and min(z1, z2) <= z <= max(z1, z2)) def are_all_points_inside_prism(points, prism_point1, prism_point2): Check if all points in a list are inside the prismatic boundary defined by two opposing points. :param points: List of tuples, each representing the (x, y, z) coordinates of a point :param prism_point1: Tuple of (x, y, z) coordinates defining one point of the prism :param prism_point2: Tuple of (x, y, z) coordinates defining the opposite point of the prism :return: Boolean value if all points are inside the prism x1, y1, z1 = prism_point1 x2, y2, z2 = prism_point2 min_x, max_x = min(x1, x2), max(x1, x2) min_y, max_y = min(y1, y2), max(y1, y2) min_z, max_z = min(z1, z2), max(z1, z2) for point in points: x, y, z = point if not (min_x <= x <= max_x and min_y <= y <= max_y and min_z <= z <= max_z): return False return True"},{"question":"Consider the following box tuples ABCD-[2, 3, 4], which represent the coordinates (2,3,4) of a 3-dimensional repository of data where 2 represents the length, 3 represents the width and 4 represents the height of a 3-dimensional matrix. Now, you are to compose a code in Python. Your code should be capable of setting up a three-dimensional data structure filled with null values, and if a coordinate (within the tuples provided) is given, it should return the value at the specified coordinate in the three-dimensional structure. If the coordinate does not exist, it should return -1.","solution":"class Box3D: def __init__(self, length, width, height): Initializes a 3D box structure with the given dimensions (length, width, height). All values are set to None initially. self.dimensions = (length, width, height) self.box = [[[None for _ in range(height)] for _ in range(width)] for _ in range(length)] def get_value(self, x, y, z): Returns the value at the specified coordinate (x, y, z). If the coordinate is out of bounds, returns -1. length, width, height = self.dimensions if 0 <= x < length and 0 <= y < width and 0 <= z < height: return self.box[x][y][z] else: return -1"},{"question":"What is the shortest non-recursive solution in Python to calculate the Fibonacci numbers up to n elements?","solution":"def fibonacci(n): Returns the first n Fibonacci numbers as a list. if n <= 0: return [] fibs = [0, 1] for _ in range(2, n): fibs.append(fibs[-1] + fibs[-2]) return fibs[:n]"},{"question":"Write a function that takes a list of numbers as input and returns the list sorted in ascending order using a heap sort algorithm.","solution":"def heapify(arr, n, i): Turns a subtree rooted with node i into a max heap. n is size of heap. largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[left] > arr[largest]: largest = left if right < n and arr[right] > arr[largest]: largest = right if largest != i: arr[i], arr[largest] = arr[largest], arr[i] heapify(arr, n, largest) def heap_sort(arr): Sorts an array in ascending order using heap sort. n = len(arr) for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) for i in range(n-1, 0, -1): arr[i], arr[0] = arr[0], arr[i] heapify(arr, i, 0) return arr"},{"question":"Create a function in python that takes a sentence as input and returns a dictionary containing the words as keys and the word lengths as values.","solution":"def word_lengths(sentence): Returns a dictionary containing the words as keys and their lengths as values. :param sentence: A sentence (string) :return: A dictionary with words as keys and word lengths as values words = sentence.split() return {word: len(word) for word in words}"},{"question":"You are a code generator. Your job is to write a python function that takes a string, and converts all characters to uppercase.","solution":"def convert_to_uppercase(s): Converts all characters in the string \`s\` to uppercase. Parameters: s (str): The input string. Returns: str: The string with all characters converted to uppercase. return s.upper()"},{"question":"Given a comma separated string, write a Python function to convert the string into a list while ignoring any leading or trailing spaces. Additionally, the function should handle cases where there might be multiple consecutive spaces between words in the string.","solution":"def convert_string_to_list(s): Converts a comma-separated string into a list, trimming leading and trailing spaces and handling multiple consecutive spaces. Parameters: s (str): The input comma-separated string. Returns: list: List of elements from the input string. return [part.strip() for part in s.split(',') if part.strip()]"},{"question":"I have some JSON data stored in a string variable named \`data_str\` in Python. I want to write a Python function called \`json_loader\` that takes this JSON string as input and loads it into a Python dictionary using the \`json.loads()\` function from the standard library. Can you help me write this function? Also, I need a check function \`test_json_loader\` to ensure the function works as expected.","solution":"import json def json_loader(data_str): Loads a JSON string into a Python dictionary. Args: data_str (str): JSON data as a string. Returns: dict: Parsed JSON data as a Python dictionary. try: return json.loads(data_str) except json.JSONDecodeError: return None"},{"question":"Create a Python function that takes two lists of unequal lengths and returns a new list with the element-wise product of the two lists using a custom iterable and generator. Additionally, the product operation must be performed manually without using any libraries such as NumPy.","solution":"def elementwise_product(list1, list2): Takes two lists of unequal lengths and returns a new list with the element-wise product. len1, len2 = len(list1), len(list2) max_len = max(len1, len2) def product_generator(): for i in range(max_len): val1 = list1[i] if i < len1 else 1 val2 = list2[i] if i < len2 else 1 yield val1 * val2 return list(product_generator())"},{"question":"Create a support vector machine model using Python for classifying a two-dimensional dataset.","solution":"from sklearn import svm import numpy as np def create_and_train_svm_model(data, labels): Creates and trains a support vector machine model using the given dataset. :param data: List of two-dimensional data points :param labels: List of labels corresponding to the data points :return: Trained SVM model model = svm.SVC(kernel='linear') model.fit(data, labels) return model def classify_point(model, point): Classifies a given point using the trained SVM model. :param model: Trained SVM model :param point: Two-dimensional point to be classified :return: Predicted label for the given point return model.predict([point])[0]"},{"question":"Remove duplicate elements from a 2D list, where each sublist is of unknown length and unique elements are only considered if they appear consecutively in the sublist. The order of the remaining elements in the sublist should be maintained. For example, given the list [[1, 2, 2, 3, 4, 4, 5], [1, 1, 2, 3, 3, 4], [5, 5, 6, 7, 8, 8]], the function should return [[1, 2, 3, 4, 5], [1, 2, 3, 4], [5, 6, 7, 8]]. Implement this function in Python.","solution":"def remove_consecutive_duplicates_2d(lst): Given a 2D list, remove consecutive duplicate elements from each sublist. Args: lst (list of list of int): A 2D list of integers Returns: list of list of int: A 2D list with consecutive duplicates removed from each sublist result = [] for sublist in lst: if not sublist: result.append([]) continue new_sublist = [sublist[0]] for i in range(1, len(sublist)): if sublist[i] != sublist[i-1]: new_sublist.append(sublist[i]) result.append(new_sublist) return result"},{"question":"You are given a large text file with multiple lines of data. Each line contains a combination of alphanumeric characters and symbols. Write a Python function that uses regular expressions to extract all valid email addresses from the text file. Assume that email addresses follow the standard format of containing an \\"@\\" symbol and a domain name.","solution":"import re def extract_emails(text): Extracts all valid email addresses from the input text. Args: text (str): The input text containing multiple lines with alphanumeric characters and symbols. Returns: list: A list of valid email addresses found in the text. email_pattern = re.compile(r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}') return email_pattern.findall(text)"},{"question":"Write a Python program that takes a list of positive integers as input and returns the count of unique prime factors for each number in the list. The program should handle numbers up to 10^12.","solution":"def count_prime_factors(n): Returns the count of unique prime factors of n. i = 2 factors = set() # Check for number of 2s as a factor while n % i == 0: factors.add(i) n //= i # Check for odd factors from 3 onwards i = 3 while i * i <= n: while n % i == 0: factors.add(i) n //= i i += 2 # If n is still a prime number and greater than 2 if n > 2: factors.add(n) return len(factors) def prime_factors_count(lst): Returns a list with counts of unique prime factors for every number in lst. return [count_prime_factors(n) for n in lst]"},{"question":"Build a function to identify a duplicate element in a list, but you are not allowed to use additional data structures such as sets or dictionaries to solve the problem. Additionally, your solution should have a time complexity of O(n) and a space complexity of O(1).","solution":"def find_duplicate(nums): Identifies a duplicate element in a list of integers using the Floyd's Tortoise and Hare (Cycle Detection) algorithm. Args: nums (List[int]): List of integers containing one duplicate. Returns: int: The duplicate integer. # Phase 1: Finding the intersection point of the two runners. slow = nums[0] fast = nums[0] while True: slow = nums[slow] fast = nums[nums[fast]] if slow == fast: break # Phase 2: Finding the entrance to the cycle. slow = nums[0] while slow != fast: slow = nums[slow] fast = nums[fast] return slow"},{"question":"Using regular expression, write a function that matches all palindromic substrings in the given string. The function should return a list of all palindromic substrings found. The substrings can contain any number of characters, including zero.","solution":"import re def find_palindromic_substrings(s): Returns a list of palindromic substrings found in the given string. palindromes = set() for i in range(len(s)): # Odd length palindromes l, r = i, i while l >= 0 and r < len(s) and s[l] == s[r]: palindromes.add(s[l:r+1]) l -= 1 r += 1 # Even length palindromes l, r = i, i + 1 while l >= 0 and r < len(s) and s[l] == s[r]: palindromes.add(s[l:r+1]) l -= 1 r += 1 return list(palindromes)"},{"question":"Write a Python script to solve the Tower of Hanoi problem with n disks, ensuring that each disk is moved only once and following the rules of the game. The script should print each move and track the total number of moves made. Additionally, implement a function that checks if the game is solved after each move.","solution":"def tower_of_hanoi(n, source='A', auxiliary='B', target='C'): Solves the Tower of Hanoi puzzle with n disks. Prints each move and returns the total number of moves made. if n == 1: print(f\\"Move disk 1 from {source} to {target}\\") return 1 moves = tower_of_hanoi(n-1, source, target, auxiliary) print(f\\"Move disk {n} from {source} to {target}\\") moves += 1 moves += tower_of_hanoi(n-1, auxiliary, source, target) return moves def is_game_solved(n, source, target): Checks if all n disks have been moved from the source to the target peg. return len(target) == n and target == list(range(n, 0, -1))"},{"question":"Write a Python code to shuffle a list of strings, replace the middle item with a new specified item and sort the two halves of the list in ascending and descending order respectively. The new item should not be moved from the middle after sorting. To perform this task, create a Queue and a Stack respectively to hold the halves, such that the operations are performed using the Queue and Stack ADTs (Abstract Data Types). Use the list: fruits = [\\"blueberry\\", \\"raspberry\\", \\"strawberry\\", \\"kiwi\\", \\"peach\\"].","solution":"from collections import deque import random def shuffle_replace_sort(fruits, new_item): Shuffles the given list, replaces the middle item with a new specified item, and sorts the two halves of the list in ascending and descending order respectively. # Shuffle the list random.shuffle(fruits) # Find and replace the middle item middle_index = len(fruits) // 2 fruits[middle_index] = new_item # Use Queue and Stack to sort the halves queue = deque(sorted(fruits[:middle_index])) stack = sorted(fruits[middle_index + 1:], reverse=True) # Combine the results with the new middle item sorted_fruits = list(queue) + [new_item] + list(stack) return sorted_fruits # Example to use the function fruits = [\\"blueberry\\", \\"raspberry\\", \\"strawberry\\", \\"kiwi\\", \\"peach\\"] new_item = \\"banana\\" result = shuffle_replace_sort(fruits, new_item) print(result)"},{"question":"Develop a Python function named \\"createArrayHarmonics\\" which accepts a single argument. This argument is an array of raw audio data with each element representing a sample from a sound wave. When this function gets invoked, it should process each sample by calculating its harmonics and replacing the original sample value with the value of its fundamental harmonic. As a convenience for users of this function, also include a row of labels that names each column of the output array. For clarity, if an input array of [7, 8, 9] is processed through the function, the returned array should be [['Harm0', 'Harm1', 'Harm2'], [some_value, some_value, some_value]]. It's crucial that every step involved in the calculation of each output value be clearly expressed in comments so that other developers, who may work with this function in the future, can easily comprehend its workings.","solution":"import numpy as np def createArrayHarmonics(audio_data): Processes the input audio data array by calculating its harmonics and replacing the original sample value with the value of its fundamental harmonic. Parameters: audio_data (list): An array of raw audio data with each element representing a sample from a sound wave. Returns: list: 2D array where the first row contains labels, and the second row contains the fundamental harmonic values of each sample. # Define a row of labels labels = [f'Harm{i}' for i in range(len(audio_data))] # Initialize an array to hold the fundamental harmonic values harmonics = [] # Process each sample to calculate its fundamental harmonic value for sample in audio_data: # For the sake of this example, let's assume the fundamental harmonic # is simply the sample value itself, as more complex calculations require # domain-specific treatments. fundamental_harmonic = sample # In a real scenario, apply harmonic calculation here. harmonics.append(fundamental_harmonic) # Return the combined array with labels return [labels, harmonics]"},{"question":"Write code to find the third smallest number in an array of integers. The array may contain duplicate numbers, and you should ensure that the solution has a time complexity of O(nlogn). If the array does not contain at least three unique numbers, the code should return an error message.","solution":"def third_smallest(arr): Finds the third smallest unique number in an array of integers. If there are fewer than three unique numbers, return an error message. if not arr or len(arr) < 3: return \\"The array does not contain at least three unique numbers.\\" # Remove duplicates and sort the array unique_sorted_arr = sorted(set(arr)) if len(unique_sorted_arr) < 3: return \\"The array does not contain at least three unique numbers.\\" return unique_sorted_arr[2]"},{"question":"Create a function which takes an array of strings as an argument and return the longest string. If there are multiple strings with the same maximum length, return the one that appears first in the array.","solution":"def longest_string(strings): Returns the longest string from an array of strings. If there are multiple strings with the same maximum length, the one that appears first is returned. if not strings: return None return max(strings, key=len)"},{"question":"Build a Python program that not only identifies the first non-repeating character in a given string, but also returns the count of this character. If all characters repeat, the program should return the count of the first character. Implement this without using inbuilt functions like collections.Counter().","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in the string s and its count. If all characters repeat, returns the first character and its count. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 for char in s: if count_dict[char] == 1: return char, count_dict[char] return s[0], count_dict[s[0]] # If all characters repeat, return the first character and its count"},{"question":"Create a function in Python that will return the maximum difference between any two numbers present in an array, along with their indices. However, you are not allowed to use in-built Python functions or libraries to find the maximum or minimum value in the array, nor can you use sorting functions.","solution":"def maximum_difference(arr): This function returns the maximum difference between any two numbers in the array along with their indices. :param arr: List of integers :return: Tuple containing maximum difference and a tuple of indices of the elements producing this difference if len(arr) < 2: return (0, (None, None)) max_diff = arr[1] - arr[0] min_value = arr[0] min_index = 0 indices = (0, 1) for i in range(1, len(arr)): if arr[i] - min_value > max_diff: max_diff = arr[i] - min_value indices = (min_index, i) if arr[i] < min_value: min_value = arr[i] min_index = i return max_diff, indices # Example Usage: # maximum_difference([7, 1, 5, 3, 6, 4]) # This should return (5, (1, 4)) because the maximum difference is between values 1 (at index 1) and 6 (at index 4)"},{"question":"Write a Python program to abbreviate a name by removing the vowels and adding a random number at the end. The program should also check if the generated abbreviation is already in use in a given list of abbreviations, and if so, generate a new one until a unique abbreviation is found. The program should then return the unique abbreviation.","solution":"import random import string def abbreviate_name(name, existing_abbreviations): Abbreviates a name by removing the vowels and adding a random number at the end. Ensures the abbreviation is unique within the existing_abbreviations list. :param name: str :param existing_abbreviations: list of str :return: str vowels = \\"aeiouAEIOU\\" abbreviation = ''.join([char for char in name if char not in vowels]) while True: random_number = ''.join(random.choices(string.digits, k=3)) unique_abbr = abbreviation + random_number if unique_abbr not in existing_abbreviations: return unique_abbr"},{"question":"Given a text file that consists of multiple lines of words separated by spaces, create a program that implements the concept of MapReduce to count the occurrences of each unique word in the file, ignoring case sensitivity. The output should display each word with its corresponding count in descending order. The solution should involve multiple steps to truly incorporate the MapReduce technique, and must not use any pre-built functions or libraries that simplify the process.","solution":"from collections import defaultdict def map_reduce_word_count(text): Implements MapReduce to count the occurrences of each unique word in the text, ignoring case sensitivity, and returns them in descending order of their counts. # Step 1: Map Phase - Split the text into words and form key-value pairs def map_phase(lines): pairs = [] for line in lines: words = line.lower().split() for word in words: pairs.append((word, 1)) return pairs # Step 2: Shuffle and Sort Phase - Group pairs by key def shuffle_sort_phase(pairs): shuffled_pairs = defaultdict(list) for key, value in pairs: shuffled_pairs[key].append(value) return shuffled_pairs # Step 3: Reduce Phase - Sum the values for each key def reduce_phase(shuffled_pairs): word_count = {} for key, values in shuffled_pairs.items(): word_count[key] = sum(values) return word_count # Split the input text by lines lines = text.strip().split('n') # Apply MapReduce Phases pairs = map_phase(lines) shuffled_pairs = shuffle_sort_phase(pairs) word_count = reduce_phase(shuffled_pairs) # Sort the word count in descending order sorted_word_count = sorted(word_count.items(), key=lambda item: item[1], reverse=True) return sorted_word_count"},{"question":"Write Python code to print the most frequent characters in a given string, excluding any characters that occur less than 3 times.","solution":"from collections import Counter def most_frequent_chars_exclude_less_than_3(s): Prints the most frequent characters in a given string, excluding any characters that occur less than 3 times. frequency = Counter(s) result = [char for char, count in frequency.items() if count >= 3] return result"},{"question":"Given a url string, write a Python program to extract the domain name.","solution":"from urllib.parse import urlparse def extract_domain(url): Extracts the domain name from a given URL. Args: url (str): The URL string from which to extract the domain. Returns: str: The domain name extracted from the URL. parsed_url = urlparse(url) domain = parsed_url.netloc return domain"},{"question":"Write a function that takes in two strings representing large numbers and outputs their product as a string. The function should consider the inputs as incredibly large numbers (up to 1,000 digits) and should not use any existing multiplication functions to perform this operation. The inputs will be strings 'a' and 'b', each representing a large positive integer. You should implement your own method to multiply these numbers and return the result as a string.","solution":"def multiply_large_numbers(a, b): Returns the product of two large numbers represented as strings. if a == \\"0\\" or b == \\"0\\": return \\"0\\" # Initialize result to hold the product of the two numbers result = [0] * (len(a) + len(b)) # Reverse the strings to start multiplication from the least significant digit a, b = a[::-1], b[::-1] # Multiply each digit and add to the result for i in range(len(a)): for j in range(len(b)): result[i + j] += int(a[i]) * int(b[j]) result[i + j + 1] += result[i + j] // 10 result[i + j] %= 10 # Remove leading zeros and convert to string while len(result) > 1 and result[-1] == 0: result.pop() return ''.join(map(str, result[::-1]))"},{"question":"Design a basic program that will accept integers as input and print a list of these integers in descending order. The program should not incorporate built-in sorting functions to arrange the list, rather, it should implement its own sorting algorithm.","solution":"def bubble_sort_descending(arr): Sorts a list of integers in descending order using bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def get_sorted_integers(integers): Accepts a list of integers and returns it sorted in descending order. Uses bubble_sort_descending to sort the list. return bubble_sort_descending(integers)"},{"question":"Construct a software script that allows the extraction of the key associated with the least value present within a specified dictionary.","solution":"def key_with_least_value(d): Returns the key associated with the least value in the dictionary d. If the dictionary is empty, returns None. if not d: return None min_key = min(d, key=d.get) return min_key"},{"question":"Write a program that generates the first N numbers in the Fibonacci sequence, where N is a user-inputted positive integer. Additionally, calculate and print the sum of these N numbers. Implement this using a for loop instead of the more commonly seen recursive method.","solution":"def fibonacci_sequence_and_sum(N): Generates the first N numbers in the Fibonacci sequence and calculates their sum. Parameters: N (int): The number of Fibonacci numbers to generate. Returns: tuple: A tuple containing a list of the first N Fibonacci numbers and their sum. if N <= 0: return [], 0 sequence = [0, 1] for _ in range(2, N): sequence.append(sequence[-1] + sequence[-2]) if N == 1: sequence = [0] sequence_sum = sum(sequence[:N]) return sequence[:N], sequence_sum"},{"question":"Write a Python function find_max_subarray(nums) that takes a list of integers nums and returns the subarray with the maximum sum. Ensure that the function handles both positive and negative numbers in the list.","solution":"def find_max_subarray(nums): Returns the subarray with the maximum sum. if not nums: return [] max_sum = -float('inf') current_sum = 0 start = 0 end = 0 temp_start = 0 for i in range(len(nums)): if current_sum <= 0: temp_start = i current_sum = nums[i] else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return nums[start:end+1]"},{"question":"Given a tuple composed of several individuals' names, write a function that generates every possible permutation of those names taken in groups of three at a time. Your function should require manipulation of data structures and must properly handle an empty input case. Optionally, provide an incorrect code snippet below for reference.","solution":"from itertools import permutations from typing import List, Tuple def generate_name_permutations(names: Tuple[str, ...]) -> List[Tuple[str, str, str]]: Generates every possible permutation of names taken in groups of three at a time. :param names: A tuple of names. :return: A list of all possible permutations of three names. if len(names) < 3: return [] return list(permutations(names, 3))"},{"question":"Write a logic to obtain a boolean value which checks if a given string is a palindrome or not. The logic should not use any in-built string manipulation functions, such as reverse() or StringBuffer. Additionally, you should also ignore any whitespace characters and consider case sensitivity.","solution":"def is_palindrome(s): Checks whether the given string s is a palindrome, ignoring whitespace. # Remove whitespaces and lower the case filtered_chars = [char.lower() for char in s if char != ' '] # Check if the filtered string is a palindrome left, right = 0, len(filtered_chars) - 1 while left < right: if filtered_chars[left] != filtered_chars[right]: return False left += 1 right -= 1 return True"},{"question":"Create a Python function that implements an insertion sort algorithm, sorts a list of floating point numbers in descending order, and includes a functionality to check correctness by comparing sorted and unsorted list.","solution":"def insertion_sort_descending(arr): Sorts a list of floating point numbers in descending order using the insertion sort algorithm. Args: arr (list of float): The list of floating point numbers to sort. Returns: list of float: The sorted list in descending order. n = len(arr) # Traverse through 1 to len(arr) for i in range(1, n): key = arr[i] j = i - 1 # Move elements of arr[0..i-1], that are # less than key, to one position ahead # of their current position while j >= 0 and key > arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr def is_sorted_descending(arr): Checks if a list of floating point numbers is sorted in descending order. Args: arr (list of float): The list to check. Returns: bool: True if the list is sorted in descending order, False otherwise. return all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1)) def sort_and_check(arr): Sorts a list of floating point numbers in descending order and checks if the resulting list is correctly sorted. Args: arr (list of float): The list to sort and check. Returns: tuple: A tuple containing the sorted list and a boolean indicating if the list is correctly sorted. sorted_arr = insertion_sort_descending(arr) return sorted_arr, is_sorted_descending(sorted_arr)"},{"question":"You are working on a machine learning platform that includes managing inference jobs using Docker containers. Your task is to implement a function that retrieves the status of a specific inference job based on its ID and the current set of running containers.","solution":"def get_inference_job_status(job_id, running_containers): Retrieves the status of a specific inference job based on its ID and the current set of running containers. Parameters: job_id (str): The ID of the inference job. running_containers (list of dict): A list of dictionaries where each dictionary represents a container with job_id and status. Example: [ {'job_id': 'job123', 'status': 'running'}, {'job_id': 'job124', 'status': 'completed'}, ... ] Returns: str: The status of the specified job. If the job is not found, return 'not found'. for container in running_containers: if container.get('job_id') == job_id: return container.get('status', 'unknown') return 'not found'"},{"question":"Write a Python program that defines a function to calculate the smallest common multiple (SCM), also known as the least common multiple (LCM), of two positive integers using the greatest common divisor (GCD) method. Implement this function and call it \`smallest_common_multiple\`. Additionally, write a check function that tests your implementation against various test cases to ensure its correctness.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b. while b: a, b = b, a % b return a def smallest_common_multiple(a, b): Returns the smallest common multiple (LCM) of a and b. return abs(a * b) // gcd(a, b)"},{"question":"Write a function in any programming language that takes a string email address as input and returns an ASCII art logo of a cat. However, the output should be different based on the domain of the email address. For example, if the email address is from gmail.com, the function should return a cat with a bowtie. If the email address is from yahoo.com, the function should return a cat with a hat. And if the email address is from any other domain, the function should return a cat with sunglasses.","solution":"def generate_cat_logo(email): Returns an ASCII art logo of a cat based on the domain of the email address. domain = email.split('@')[-1] if domain == 'gmail.com': return ''' /_/ ( o.o ) > ^ < / / / -/_/- ''' elif domain == 'yahoo.com': return ''' /_/ ( o.o ) > ^ < /|_|_| /_|_|_| ''' else: return ''' /_/ ( o.o ) > ^ < |_/| | |_| | '''"},{"question":"How do I create a Python function to delete a specific row from a SQLite database table based on the row id?","solution":"import sqlite3 def delete_row_by_id(db_path, table_name, row_id): Deletes a specific row from a SQLite database table based on the row id. Parameters: db_path (str): Path to the SQLite database. table_name (str): Name of the table to delete the row from. row_id (int): ID of the row to delete. Returns: bool: True if the operation was successful, False otherwise. try: conn = sqlite3.connect(db_path) cursor = conn.cursor() cursor.execute(f\\"DELETE FROM {table_name} WHERE id = ?\\", (row_id,)) conn.commit() # Check if the row has been deleted cursor.execute(f\\"SELECT * FROM {table_name} WHERE id = ?\\", (row_id,)) row = cursor.fetchone() cursor.close() conn.close() return row is None except sqlite3.Error as e: print(f\\"Error: {e}\\") return False"},{"question":"Write a program to implement the Sieve of Eratosthenes algorithm to generate prime numbers up to a given limit. Go beyond just generating primes - also implement a function to find the nth prime number using the generated primes list. Additionally, include functionality to check if a given number is prime using the list.","solution":"def sieve_of_eratosthenes(limit): Generates a list of prime numbers up to the given limit using the Sieve of Eratosthenes algorithm. primes = [] sieve = [True] * (limit + 1) for num in range(2, limit + 1): if sieve[num]: primes.append(num) for multiple in range(num * num, limit + 1, num): sieve[multiple] = False return primes def nth_prime(primes, n): Returns the nth prime number from the list of generated prime numbers. if n <= 0 or n > len(primes): raise ValueError(\\"n is out of bounds of the prime numbers list\\") return primes[n - 1] def is_prime(primes, num): Checks if a number is prime using the list of generated primes. return num in primes"},{"question":"Develop a recursive function in Python that calculates the factorial of a number. Additionally, create another function to measure the time required to calculate the factorial of a number and also assess the memory used by the recursive function. Implement both memory profiling and time profiling in the program, which should account for the usage under different conditions.","solution":"import time import tracemalloc def factorial(n): Returns the factorial of n using recursion. if n == 0 or n == 1: return 1 return n * factorial(n - 1) def measure_performance(n): Measures the execution time and memory usage of the factorial computation. # Start memory trace tracemalloc.start() # Measure start time start_time = time.time() # Perform factorial calculation result = factorial(n) # Measure end time end_time = time.time() # Get memory usage current, peak = tracemalloc.get_traced_memory() # Stop memory trace tracemalloc.stop() performance_details = { \\"result\\": result, \\"execution_time\\": end_time - start_time, \\"current_memory_usage\\": current, \\"peak_memory_usage\\": peak } return performance_details"},{"question":"I need help writing an AI that can generate code to create custom authorization rules for a web system. The rules will define who can access what resources. It should generate code for a simple Access Control List (ACL) system. Can you assist me with that?","solution":"class ACL: A simple ACL system for managing access to resources. def __init__(self): self.rules = [] def add_rule(self, role, resource, permission): Adds an authorization rule. Parameters: role (str): The role to which the rule applies (e.g., \\"user\\", \\"admin\\"). resource (str): The resource to which the rule applies (e.g., \\"file1\\", \\"file2\\"). permission (str): The type of access granted (e.g., \\"read\\", \\"write\\"). self.rules.append({\\"role\\": role, \\"resource\\": resource, \\"permission\\": permission}) def is_allowed(self, role, resource, permission): Checks if a given role has the specified permission on a resource. Parameters: role (str): The role making the request. resource (str): The resource being accessed. permission (str): The type of access requested. Returns: bool: True if access is granted, False otherwise. for rule in self.rules: if rule[\\"role\\"] == role and rule[\\"resource\\"] == resource and rule[\\"permission\\"] == permission: return True return False"},{"question":"Write a Python program to swap the first and last element of a given list of integers.","solution":"def swap_first_last(lst): Swaps the first and last element of a given list. if len(lst) < 2: return lst # No swap needed if list has less than 2 elements lst[0], lst[-1] = lst[-1], lst[0] return lst"},{"question":"Modify a given code to sort a two-dimensional array (matrix) using bubble sort.","solution":"def bubble_sort_matrix(matrix): Sorts a two-dimensional array (matrix) using bubble sort. rows = len(matrix) cols = len(matrix[0]) if rows > 0 else 0 # Flatten the matrix flattened = [matrix[i][j] for i in range(rows) for j in range(cols)] # Perform bubble sort on the flattened matrix n = len(flattened) for i in range(n): for j in range(0, n-i-1): if flattened[j] > flattened[j+1]: flattened[j], flattened[j+1] = flattened[j+1], flattened[j] # Reconstruct the matrix from the sorted flattened list sorted_matrix = [] for i in range(rows): sorted_matrix.append(flattened[i*cols:(i+1)*cols]) return sorted_matrix"},{"question":"Design a program in Python which takes a string input and removes all the vowels from it.","solution":"def remove_vowels(input_string): Removes all vowels from the input string. Parameters: input_string (str): The string from which to remove vowels. Returns: str: The input string with all vowels removed. vowels = \\"AEIOUaeiou\\" return ''.join(char for char in input_string if char not in vowels)"},{"question":"Write a Python function \`replace_chars(string: str, old: str, new: str) -> str\` that takes in a string \`string\`, and two characters \`old\` and \`new\`. The function should replace all occurrences of the character \`old\` in the string \`string\` with the character \`new\` and return the modified string. Do not use built-in replace methods or any direct string operations meant for replacement.","solution":"def replace_chars(string: str, old: str, new: str) -> str: Replaces all occurrences of the character \`old\` in the string \`string\` with the character \`new\` and returns the modified string. # Initialize an empty list to build the result string result = [] # Iterate over each character in the input string for char in string: # If the character matches \`old\`, append \`new\` to the result if char == old: result.append(new) else: # Otherwise, append the original character result.append(char) # Join the list into a final result string return ''.join(result)"},{"question":"I am looking for a concise Python solution to determine if a given string is a palindrome. Can you provide a code snippet that solves this problem?","solution":"def is_palindrome(s): Returns True if the given string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = ''.join(c.lower() for c in s if c.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Write a recursive function that can generate all possible combination of a given list of distinct integers. For instance, if the list is [1, 2, 3], then the function should return [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]].","solution":"def generate_combinations(nums): Returns all possible combinations of a given list of distinct integers. if len(nums) == 0: return [[]] result = [] for i in range(len(nums)): remainder = nums[:i] + nums[i+1:] for sub_combination in generate_combinations(remainder): result.append([nums[i]] + sub_combination) return result"},{"question":"Provide code to randomly shuffle a given list in Python without using the shuffle function and preserving the original sequence of elements of the list.","solution":"import random def custom_shuffle(lst): Returns a new list with elements of the original list shuffled. shuffled_lst = lst[:] n = len(shuffled_lst) for i in range(n-1, 0, -1): j = random.randint(0, i) shuffled_lst[i], shuffled_lst[j] = shuffled_lst[j], shuffled_lst[i] return shuffled_lst"},{"question":"In Python programming, what would be the most efficient technique to unpack a sequence, which could also include nested sequences of varied depths, into individual elements? Consider that the sequence may have duplicate elements and should be completely flattened before unpacking.","solution":"def flatten(sequence): Flattens a nested sequence into a flat list of elements. flat_list = [] for item in sequence: if isinstance(item, (list, tuple)): flat_list.extend(flatten(item)) else: flat_list.append(item) return flat_list"},{"question":"Write a Python program to combine two pre-sorted lists into a single sorted list, without using Python's built-in list functions.","solution":"def merge_sorted_lists(list1, list2): Combine two pre-sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 or list2 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a Python code to calculate the sum of all prime numbers under a given number using the Sieve of Eratosthenes algorithm.","solution":"def sum_of_primes_under(n): Returns the sum of all prime numbers under n using the Sieve of Eratosthenes algorithm. if n <= 2: return 0 sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False primes = [num for num, is_prime in enumerate(sieve) if is_prime] return sum(primes)"},{"question":"Implement a simple HTTP server in Python using the Flask framework that has three endpoints: a GET request for retrieving information about a user by their ID, a POST request for adding a new user, and a DELETE request for removing a user. The server should store user data in memory and provide JSON responses for the API requests.","solution":"from flask import Flask, request, jsonify app = Flask(__name__) # In-memory storage for users users = {} @app.route('/user/<int:user_id>', methods=['GET']) def get_user(user_id): user = users.get(user_id) if user: return jsonify(user) else: return jsonify({'error': 'User not found'}), 404 @app.route('/user', methods=['POST']) def add_user(): new_user = request.json user_id = new_user.get('id') if user_id in users: return jsonify({'error': 'User already exists'}), 400 users[user_id] = new_user return jsonify(new_user), 201 @app.route('/user/<int:user_id>', methods=['DELETE']) def delete_user(user_id): if user_id in users: deleted_user = users.pop(user_id) return jsonify(deleted_user) else: return jsonify({'error': 'User not found'}), 404 if __name__ == '__main__': app.run(debug=True)"},{"question":"Sort the given list of words based on the vowel-consonant structure of each word in Python. The vowel-consonant structure is defined as follows: if a word starts with a vowel, it should be placed in the front of the list; if a word starts with a consonant, it should be placed at the end of the list. In case a word starts with multiple vowels or consonants, treat it based on the first vowel or consonant. Also, consider 'y' as a vowel if it appears at the beginning of the word. Your implementation may not use in-built Python functions for sorting.","solution":"def sort_words_by_vowel_consonant(words): Sorts words such that words starting with a vowel are in the front and words starting with a consonant are at the end. 'Y' is treated as a vowel when it starts a word. vowels = {'a', 'e', 'i', 'o', 'u', 'y'} vowel_words = [] consonant_words = [] for word in words: if word[0].lower() in vowels: vowel_words.append(word) else: consonant_words.append(word) sorted_words = vowel_words + consonant_words return sorted_words"},{"question":"Write a function in Python that takes a list of integers as a parameter and returns the sum of all the odd integers in the list. Make sure the function has a time complexity of O(n) and a space complexity of O(1). Additionally, the function should ignore negative integers and only consider positive odd integers.","solution":"def sum_of_positive_odds(lst): Returns the sum of all positive odd integers in the list. return sum(x for x in lst if x > 0 and x % 2 != 0)"},{"question":"Construct a class to represent a basic calculator with functions for addition, subtraction, multiplication, and division. Include error handling for division by zero and invalid input.","solution":"class BasicCalculator: A basic calculator class to perform addition, subtraction, multiplication, and division. def add(self, a, b): return a + b def subtract(self, a, b): return a - b def multiply(self, a, b): return a * b def divide(self, a, b): if b == 0: raise ValueError(\\"Cannot divide by zero\\") return a / b"},{"question":"Given two lists of integers, write a Python function that prints the elements of each list in reverse order. Additionally, implement error handling for scenarios where the lists contain non-integer elements. As a further challenge, your function should also be able to handle lists with a variable number of elements.","solution":"def print_reverse_lists(list1, list2): Prints elements of each list in reverse order and ensures all elements are integers. if not all(isinstance(i, int) for i in list1) or not all(isinstance(i, int) for i in list2): raise ValueError(\\"Both lists must contain only integers.\\") print(\\"List 1 in reverse order:\\") for elem in reversed(list1): print(elem) print(\\"List 2 in reverse order:\\") for elem in reversed(list2): print(elem)"},{"question":"Write a Python script to generate a secure, unpredictable password of a specified length. The password should include a blend of uppercase and lowercase alphabets, numeric values, and special characters. The script should also include a function to verify the strength of the generated password based on certain criteria such as length, complexity, and unpredictability.","solution":"import random import string def generate_password(length): Generates a secure, unpredictable password of a specified length. The password will include a blend of uppercase and lowercase alphabets, numeric values, and special characters. if length < 6: raise ValueError(\\"Password length should be at least 6 characters for better security.\\") all_characters = string.ascii_letters + string.digits + string.punctuation # Ensure password has at least one character of each type password = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits), random.choice(string.punctuation) ] # Fill the rest of the password length with random characters password += random.choices(all_characters, k=length-4) # Shuffle to ensure randomness random.shuffle(password) return ''.join(password) def check_password_strength(password): Checks the strength of the given password. A password is considered strong if it has: - At least 8 characters in length - Both uppercase and lowercase letters - At least one numerical digit - At least one special character - Is not easily guessable if len(password) < 8: return False has_upper = any(c.isupper() for c in password) has_lower = any(c.islower() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in string.punctuation for c in password) return has_upper and has_lower and has_digit and has_special"},{"question":"Write a python function named \\"merge_and_filter_dictionaries\\" that accepts a variable number of dictionary arguments. Each dictionary will have unique keys and non-zero values. The function should merge these dictionaries but if the same key appears in more than one dictionary, retain the value from the dictionary which has the largest numerical value for that key. However, if any dictionary contains non-integer keys, the function should ensure this non-integer key-value pair gets eliminated during the merge operation.","solution":"def merge_and_filter_dictionaries(*dicts): Merges a variable number of dictionaries. If the same key appears in more than one dictionary, retain the value from the dictionary which has the largest numerical value for that key. Non-integer keys are eliminated. merged_dict = {} for dictionary in dicts: for key, value in dictionary.items(): if isinstance(key, int): if key not in merged_dict or merged_dict[key] < value: merged_dict[key] = value return merged_dict"},{"question":"Create a doubly linked list to store the values [10, 20, 30], ensuring that each node has a \\"previous\\" and \\"next\\" pointer, and implement a method that allows for the insertion of a new value at a specific index in the list. Additionally, the implementation should have a time complexity of O(n), where n is the number of nodes in the list, and the space complexity should be O(1).","solution":"class Node: def __init__(self, value): self.value = value self.prev = None self.next = None class DoublyLinkedList: def __init__(self): self.head = None self.tail = None def append(self, value): new_node = Node(value) if self.tail is None: self.head = new_node self.tail = new_node else: self.tail.next = new_node new_node.prev = self.tail self.tail = new_node def insert_at_index(self, index, value): new_node = Node(value) if index == 0: new_node.next = self.head if self.head: self.head.prev = new_node self.head = new_node if self.tail is None: # list was empty self.tail = new_node else: current = self.head for _ in range(index - 1): if current is None: raise IndexError(\\"Index out of bounds\\") current = current.next new_node.next = current.next new_node.prev = current if current.next: current.next.prev = new_node current.next = new_node if new_node.next is None: # inserting at the end self.tail = new_node def to_list(self): values = [] current = self.head while current: values.append(current.value) current = current.next return values # Create an instance and add the initial values dll = DoublyLinkedList() dll.append(10) dll.append(20) dll.append(30) # Insert method dll.insert_at_index(1, 15) dll.insert_at_index(0, 5) dll.insert_at_index(5, 35)"},{"question":"I am building a web server application using Python. Can you provide a code example of how to create a GET request handler that serves an HTML page when the root URL route is accessed?","solution":"from http.server import BaseHTTPRequestHandler, HTTPServer class RequestHandler(BaseHTTPRequestHandler): def do_GET(self): if self.path == \\"/\\": self.send_response(200) self.send_header(\\"Content-type\\", \\"text/html\\") self.end_headers() self.wfile.write(b\\"<html><head><title>My Web Server</title></head>\\") self.wfile.write(b\\"<body><h1>Welcome to my web server!</h1></body></html>\\") else: self.send_response(404) self.send_header(\\"Content-type\\", \\"text/html\\") self.end_headers() self.wfile.write(b\\"404 Not Found\\") def run(server_class=HTTPServer, handler_class=RequestHandler, port=8000): server_address = ('', port) httpd = server_class(server_address, handler_class) print(f'Starting httpd server on port {port}...') httpd.serve_forever() if __name__ == \\"__main__\\": run()"},{"question":"Write a function in Python that splits a list of numbers into odd and even, and returns two separate lists. Additionally, the function should also sort the odd and even lists in increasing order before returning them.","solution":"def split_and_sort_numbers(numbers): Splits the given list of numbers into two lists: odd and even numbers. Both lists are sorted in increasing order before returning. :param numbers: List[int] - The list of numbers to split and sort. :return: Tuple[List[int], List[int]] - A tuple containing the sorted odd and even lists. odd_numbers = sorted([num for num in numbers if num % 2 != 0]) even_numbers = sorted([num for num in numbers if num % 2 == 0]) return (odd_numbers, even_numbers)"},{"question":"Modify a given program to replace each element in an array with the product of all elements before and after it, only using a single loop and without using any additional arrays or data structures. The modified program should have a time complexity of O(n), where n is the length of the input array.","solution":"def replace_with_product(arr): Replace each element in the array with the product of all elements before and after it using a single loop and without using any additional arrays or data structures. n = len(arr) if n == 0: return arr # Initialize variables for products of left and right sides left_product = 1 right_product = 1 # Calculate product of all elements total_product = 1 zero_count = 0 for num in arr: if num != 0: total_product *= num else: zero_count += 1 # Modify array in place for i in range(n): if zero_count == 0: arr[i] = total_product // arr[i] elif zero_count == 1: arr[i] = total_product if arr[i] == 0 else 0 else: arr[i] = 0 return arr"},{"question":"What is an algorithm to reverse the order of elements in a given array?","solution":"def reverse_array(arr): Reverses the order of elements in the given array. Parameters: arr (list): The array to be reversed. Returns: list: The array with elements in reverse order. return arr[::-1]"},{"question":"Create an encryption function that uses an XOR cipher with a randomly generated key of minimum length 16 bits and maximum length 65536 bits, where each byte of the key is restricted to a specific range of ASCII characters (33-126). The input string must be ASCII encoded.","solution":"import random def generate_random_key(length): Generates a random key of the given length with each byte in the range of 33-126 ASCII characters. return bytes([random.randint(33, 126) for _ in range(length)]) def xor_encrypt(input_string): Encrypts the input_string using XOR encryption with a randomly generated key of length between 16 and 65536 bits. Returns the encrypted bytes and the key. if not input_string.isascii(): raise ValueError(\\"Input string must be ASCII encoded.\\") input_bytes = input_string.encode('ascii') key_length = random.randint(16, 8192) # 8192 bytes = 65536 bits key = generate_random_key(key_length) encrypted_bytes = bytes([b ^ key[i % key_length] for i, b in enumerate(input_bytes)]) return encrypted_bytes, key def xor_decrypt(encrypted_bytes, key): Decrypts the encrypted_bytes using the provided key. Returns the decrypted string. decrypted_bytes = bytes([b ^ key[i % len(key)] for i, b in enumerate(encrypted_bytes)]) return decrypted_bytes.decode('ascii')"},{"question":"Write a function that not only removes duplicates from a list while preserving the original order, but also segregates even and odd numbers as separate lists. The function should handle large lists without exceeding memory limits.","solution":"def remove_duplicates_and_segregate(nums): Removes duplicates from the list while preserving the original order. Segregates even and odd numbers into separate lists. Parameters: nums (list): A list of integers. Returns: tuple: A tuple containing two lists (evens, odds). seen = set() evens = [] odds = [] for num in nums: if num not in seen: seen.add(num) if num % 2 == 0: evens.append(num) else: odds.append(num) return evens, odds"},{"question":"Generate valid Python code to filter out all the even numbers from a given list of integers.","solution":"def filter_even_numbers(lst): Filters out all even numbers from a given list of integers. Parameters: lst (list): A list of integers Returns: list: A new list containing only the odd integers from the original list return [num for num in lst if num % 2 != 0]"},{"question":"Write a function in Python that finds the maximum number in a list without using the built-in max function. Additionally, ensure that the function can handle a list of integers, floats, or a mix of both. As a reference, below is a piece of erroneous code that attempts to solve the problem but fails in certain scenarios.","solution":"def find_max(numbers): Finds the maximum number in a list of integers and/or floats. Args: numbers (list): A list of integers and/or floats. Returns: max_number: The maximum number in the list. if len(numbers) == 0: raise ValueError(\\"The list is empty\\") max_number = numbers[0] for num in numbers[1:]: if num > max_number: max_number = num return max_number"},{"question":"Write a Python function to create a dictionary with the given list as its keys and values, such that the values are squared and sorted in descending order. The function should also handle cases where the list contains non-numeric values, returning a dictionary with only the numeric values squared and sorted, along with an error message for the non-numeric value(s) encountered.","solution":"def create_squared_dict(numbers): Create a dictionary with the given list as its keys and squared values sorted in descending order. Only numeric values should be included, and non-numeric values should return an error message. :param numbers: List of keys for the dictionary. :return: (dict, list) A tuple where the first item is the dictionary with numeric squared values and the second item is a list of error messages for non-numeric values. result_dict = {} error_messages = [] for num in numbers: if isinstance(num, (int, float)): result_dict[num] = num ** 2 else: error_messages.append(f\\"Encountered non-numeric value: {num}\\") # Sorting the dictionary by squared values in descending order result_dict = dict(sorted(result_dict.items(), key=lambda item: item[1], reverse=True)) return result_dict, error_messages"},{"question":"Given two strings, s and t, write a Python program to check if t is an anagram of s.","solution":"def is_anagram(s, t): Check if t is an anagram of s. return sorted(s) == sorted(t)"},{"question":"Write a program that parses a sentence inputted by a user and stores each unique word as a key in a dictionary. The value for each key should be a list that contains the character count of the word, the number of times the word appears in the sentence, and the indices at which the word appears in the sentence. Your program should ignore case and punctuation.","solution":"import re from collections import defaultdict def parse_sentence(sentence): Parses a sentence and stores each unique word as a key in a dictionary. The value for each key is a list containing the word's character count, number of occurrences, and indices of appearances in the sentence. :param sentence: str, input sentence :return: dict, parsed words information # Remove punctuation and convert to lowercase sentence_cleaned = re.sub(r'[^ws]', '', sentence.lower()) words = sentence_cleaned.split() word_info = defaultdict(lambda: [0, 0, []]) # Default dictionary with initial value for index, word in enumerate(words): word_info[word][0] = len(word) # character count word_info[word][1] += 1 # number of times the word appears word_info[word][2].append(index) # positions in sentence return dict(word_info)"},{"question":"Formulate a regular expression rule that will accurately match a legitimate 8-bit Binary Living Algorithm string sequence.","solution":"import re def is_valid_binary_string(binary_string): Validates if the given string is a legitimate 8-bit binary string sequence. Parameters: binary_string (str): The string to be validated. Returns: bool: True if the string is a valid 8-bit binary string, False otherwise. # Define the regular expression pattern for an 8-bit binary string pattern = r'^[01]{8}' # Use the match function to check if the whole string matches the pattern if re.match(pattern, binary_string): return True else: return False"},{"question":"Build a debate website using Python. The user should be able to input a topic, one positive statement, and one negative statement. Then, the program should randomly assign users to either the positive or negative side and show the corresponding statement to argue for or against. Additionally, create a leaderboard to keep track of the users who have won the most debates.","solution":"import random class DebateWebsite: def __init__(self): self.users = {} self.leaderboard = {} def input_topic(self, topic, positive_statement, negative_statement): self.topic = topic self.positive_statement = positive_statement self.negative_statement = negative_statement def add_user(self, username): if username not in self.users: self.users[username] = {\\"role\\": None, \\"statement\\": None} def assign_sides(self): usernames = list(self.users.keys()) random.shuffle(usernames) half = len(usernames) // 2 for i, username in enumerate(usernames): if i < half: self.users[username] = {\\"role\\": \\"positive\\", \\"statement\\": self.positive_statement} else: self.users[username] = {\\"role\\": \\"negative\\", \\"statement\\": self.negative_statement} def show_statements(self): result = {} for username, info in self.users.items(): result[username] = info[\\"statement\\"] return result def update_leaderboard(self, winners): for winner in winners: if winner in self.leaderboard: self.leaderboard[winner] += 1 else: self.leaderboard[winner] = 1 def get_leaderboard(self): sorted_leaderboard = sorted(self.leaderboard.items(), key=lambda item: item[1], reverse=True) return sorted_leaderboard"},{"question":"Write a Python function that takes three positive integers as arguments and returns the smallest number. The function should also validate that the input is indeed positive integers, raising a ValueError with a specific error message otherwise.","solution":"def smallest_of_three(a, b, c): Returns the smallest of three positive integers. Args: a (int): First positive integer. b (int): Second positive integer. c (int): Third positive integer. Returns: int: The smallest of the three positive integers. Raises: ValueError: If any of the inputs is not a positive integer. if not all(isinstance(i, int) for i in [a, b, c]): raise ValueError(\\"All inputs must be integers.\\") if any(i <= 0 for i in [a, b, c]): raise ValueError(\\"All inputs must be positive integers.\\") return min(a, b, c)"},{"question":"Generate a python program for finding the kth smallest element in a given list.","solution":"def kth_smallest_element(arr, k): Returns the k-th smallest element in the given list \`arr\`. This function assumes that k is valid (1 <= k <= len(arr)). if not 1 <= k <= len(arr): raise ValueError(\\"k is out of bounds of the array length\\") arr_sorted = sorted(arr) return arr_sorted[k - 1]"},{"question":"Write python code for initializing 1000 random variables in the range of 1 to 100 and determine how many of those variables can be divisible by 3. Further, filter these results to find how many of these numbers are also prime.","solution":"import random def initialize_random_variables(n=1000, low=1, high=100): Initialize n random variables within the range [low, high]. return [random.randint(low, high) for _ in range(n)] def count_divisible_by(numbers, divisor): Count the numbers in the list that are divisible by the given divisor. return len([num for num in numbers if num % divisor == 0]) def is_prime(num): Check if a number is prime. if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i != 0: continue return False return True def filter_primes(numbers): Filter the numbers in the list to only include prime numbers. return [num for num in numbers if is_prime(num)] # Example usage: random_variables = initialize_random_variables() divisible_by_3_count = count_divisible_by(random_variables, 3) divisible_by_3 = [num for num in random_variables if num % 3 == 0] primes_divisible_by_3 = filter_primes(divisible_by_3) primes_divisible_by_3_count = len(primes_divisible_by_3)"},{"question":"Develop an algorithm in Python to calculate the maximum profit that can be generated from buying/selling stocks given a list of daily stock prices.","solution":"def max_profit(prices): Returns the maximum profit from buying and selling stocks given a list of daily prices. if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function in Python that takes an upper limit as an argument and returns a list of prime numbers within this limit.","solution":"def primes_up_to(limit): Returns a list of prime numbers up to the given limit (exclusive). Parameters: limit (int): The upper limit (exclusive) up to which to find prime numbers. Returns: list: A list of prime numbers up to the given limit. if limit < 2: return [] primes = [] is_prime = [True] * limit for p in range(2, limit): if is_prime[p]: primes.append(p) for multiple in range(p*p, limit, p): is_prime[multiple] = False return primes"},{"question":"Create a Python function that reverses an array in-place.","solution":"def reverse_array(arr): Reverses the given array in-place. Parameters: arr (list): The list to be reversed. Returns: None left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1"},{"question":"Design an algorithm to generate the Fibonacci sequence up to the nth number and also include the functionality of handling large numbers effectively, using an efficient approach. Here we're designing an algorithm to generate Fibonacci sequence till 'n' numbers also taking care of large numbers in Python.","solution":"def fibonacci(n): Generates the Fibonacci sequence up to the nth number. Parameters: n (int): The number of terms to generate. Returns: list: A list containing the Fibonacci sequence up to the nth term. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_seq = [0, 1] for _ in range(2, n): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"You are given an array of comparable and distinct elements. Without using any existing sorting or permutation algorithms, write a function that finds and returns all possible sorted permutations of the array.","solution":"def sorted_permutations(arr): Returns all sorted permutations of the array. def permutations(arr): if len(arr) == 0: return [] if len(arr) == 1: return [arr] perms = [] for i in range(len(arr)): m = arr[i] remLst = arr[:i] + arr[i+1:] for p in permutations(remLst): perms.append([m] + p) return perms perms = permutations(arr) unique_sorted_perms = {tuple(sorted(perm)) for perm in perms} return list(unique_sorted_perms)"},{"question":"Enhance a basic web scraping script for extracting product information from an e-commerce website's search results that requires in-depth understanding of bs4, URL parameter manipulation, and handling pagination. Additionally, the script must include advanced data cleansing techniques such as removing unwanted HTML tags, correcting syntax errors and filtering out irrelevant results using regex patterns.","solution":"import requests from bs4 import BeautifulSoup import re class WebScraper: def __init__(self, base_url): self.base_url = base_url def get_html(self, url): response = requests.get(url) response.raise_for_status() return response.text def parse_html(self, html): soup = BeautifulSoup(html, 'html.parser') return soup def extract_product_info(self, soup): products = [] for product in soup.select('.product-item'): name_tag = product.select_one('.product-title') price_tag = product.select_one('.product-price') if not name_tag or not price_tag: continue name = self.clean_text(name_tag.text) price = self.clean_price(price_tag.text) if self.is_valid_product(name, price): products.append({ 'name': name, 'price': price }) return products def clean_text(self, text): text = re.sub(r's+', ' ', text) text = re.sub(r'<[^>]*>', '', text) return text.strip() def clean_price(self, text): price = re.sub(r'[^0-9.]', '', text) return float(price) if price else 0.0 def is_valid_product(self, name, price): return bool(name) and price > 0 def scrape(self, query, page_limit=5): all_products = [] for page in range(1, page_limit + 1): url = f\\"{self.base_url}?q={query}&page={page}\\" html = self.get_html(url) soup = self.parse_html(html) products = self.extract_product_info(soup) all_products.extend(products) return all_products def main(): scraper = WebScraper('https://example-ecommerce.com/search') products = scraper.scrape('laptop') for product in products: print(product) if __name__ == '__main__': main()"},{"question":"Write a python code that takes a string as a parameter and reverse it only if the reversed string would contain multiple adjacent vowels. If reversing the string would not result in such a scenario, return the string unchanged.","solution":"def reverse_if_multiple_adjacent_vowels(s): Reverses the string if the reversed string contains multiple adjacent vowels. Otherwise, returns the string unchanged. vowels = \\"aeiouAEIOU\\" def has_multiple_adjacent_vowels(string): for i in range(len(string) - 1): if string[i] in vowels and string[i + 1] in vowels: return True return False reversed_string = s[::-1] if has_multiple_adjacent_vowels(reversed_string): return reversed_string return s"},{"question":"Develop a Python function with enhanced complexity that organizes a supplied dictionary of hexadecimal values, converts them to their decimal equivalents, and then sorts them. Your function should return a list of the dictionary keys arranged according to the ascending order of their decimal conversions. However, if the keys contain characters that are not a part of the regular hexadecimal syntax, the function should throw an exception.","solution":"def organize_and_sort_hex_dict(hex_dict): Organizes and sorts a dictionary of hexadecimal values, converts them to their decimal equivalents, and returns a list of keys sorted by their decimal values. :param hex_dict: Dictionary with hexadecimal values as strings :return: Sorted list of dictionary keys according to the decimal equivalent of hexadecimal values :raises ValueError: If any key contains characters that are not part of the hexadecimal syntax sorted_keys = [] try: decimal_dict = {k: int(v, 16) for k, v in hex_dict.items()} sorted_keys = sorted(decimal_dict, key=decimal_dict.get) except ValueError as e: raise ValueError(f\\"Invalid hexadecimal value present in dictionary: {e}\\") return sorted_keys # Example usage: # hex_dict = { # 'a': '1F', # 'b': 'A0', # 'c': '2B' # } # print(organize_and_sort_hex_dict(hex_dict)) # Output: ['a', 'c', 'b']"},{"question":"Craft a Python script that functions to filter duplicate values while preserving the sequence of all elements within a given tuple. This task should be accomplished without using existing data handling libraries.","solution":"def filter_duplicates(input_tuple): Returns a tuple with duplicates removed while preserving the order of elements. Args: input_tuple (tuple): The input tuple from which duplicates are to be removed Returns: tuple: A tuple with duplicates removed and order preserved seen = set() result = [] for item in input_tuple: if item not in seen: result.append(item) seen.add(item) return tuple(result)"},{"question":"Please design an algorithm in Python to find the median of a given list of numbers. The list will always have an odd number of elements. The solution should have a time complexity of O(n) and should not use any built-in sorting functions or data structures. Additionally, you are not allowed to use any extra space for auxiliary data structures.","solution":"def find_median(nums): Returns the median of a given list of numbers. The list always has an odd number of elements. def quickselect(left, right, k): Helper function to perform quickselect if left == right: return nums[left] pivot_index = partition(left, right) if k == pivot_index: return nums[k] elif k < pivot_index: return quickselect(left, pivot_index - 1, k) else: return quickselect(pivot_index + 1, right, k) def partition(left, right): Helper function to perform partition around the pivot pivot = nums[right] pivot_index = left for j in range(left, right): if nums[j] <= pivot: nums[pivot_index], nums[j] = nums[j], nums[pivot_index] pivot_index += 1 nums[pivot_index], nums[right] = nums[right], nums[pivot_index] return pivot_index n = len(nums) median_index = n // 2 return quickselect(0, n - 1, median_index)"},{"question":"Create a game loop for a real-time strategy game using Python. The game loop should allow for continuous game play, with the ability to pause and resume. The loop should update the game state every 2 seconds and handle user input for player commands. Additionally, the game loop should implement a feature that allows for random events to occur during gameplay, such as a meteor shower that damages nearby units or a suddenEMP blast that disables units temporarily. Your implementation should also include a resource management system, where players must collect resources to build structures and units. Players should be able to construct different types of structures, including resource extraction buildings and unit production facilities.","solution":"import time import random from threading import Event class GameEvent: def __init__(self, event_type): self.event_type = event_type self.description = self.generate_description() def generate_description(self): if self.event_type == \\"meteor_shower\\": return \\"A meteor shower is damaging nearby units!\\" elif self.event_type == \\"emp_blast\\": return \\"An EMP blast has disabled your units temporarily!\\" return \\"Unknown event\\" class ResourceManager: def __init__(self): self.resources = 100 def collect_resources(self, amount): self.resources += amount def spend_resources(self, amount): if self.resources >= amount: self.resources -= amount return True return False class Structure: def __init__(self, type, cost): self.type = type self.cost = cost class Unit: def __init__(self, type): self.type = type class Player: def __init__(self): self.resource_manager = ResourceManager() self.structures = [] self.units = [] def build_structure(self, structure_type, cost): if self.resource_manager.spend_resources(cost): self.structures.append(Structure(structure_type, cost)) print(f\\"{structure_type} built successfully!\\") else: print(\\"Not enough resources to build this structure.\\") def create_unit(self, unit_type): self.units.append(Unit(unit_type)) print(f\\"{unit_type} unit created.\\") class Game: def __init__(self): self.players = [Player()] self.game_paused = Event() self.game_paused.set() # starts in running mode def game_loop(self): while True: if not self.game_paused.is_set(): time.sleep(2) # Update game state every 2 seconds self.process_random_events() print(\\"Game state updated.\\") # Check for player commands (this is abstract, to be implemented) # self.handle_player_commands() def process_random_events(self): event_probability = random.random() if event_probability < 0.1: event = GameEvent(\\"meteor_shower\\") self.handle_event(event) elif event_probability < 0.2: event = GameEvent(\\"emp_blast\\") self.handle_event(event) def handle_event(self, event): print(event.description) def pause_game(self): print(\\"Game paused\\") self.game_paused.clear() def resume_game(self): print(\\"Game resumed\\") self.game_paused.set() def handle_player_commands(self, command): if command == \\"pause\\": self.pause_game() elif command == \\"resume\\": self.resume_game() elif command == \\"build structure\\": self.players[0].build_structure(\\"Extractor\\", 50) elif command == \\"create unit\\": self.players[0].create_unit(\\"Soldier\\") # Example usage: # game = Game() # game_thread = threading.Thread(target=game.game_loop) # game_thread.start() # game.handle_player_commands(\\"build structure\\") # game.handle_player_commands(\\"create unit\\") # game.pause_game() # game.resume_game()"},{"question":"Develop a Python program that validates a provided list of strings to ensure each string consists solely of numerical characters. The validation process should also include checking that these numeric strings represent positive integers and that they do not exceed a certain length, with these criteria being part of the function inputs. As an additional challenge, an erroneously written function is provided to analyze and rectify.","solution":"def validate_strings(strings, max_length): Validates a list of strings ensuring each string consists solely of numerical characters, represents positive integers, and does not exceed the specified maximum length. Args: strings (list): List of strings to validate. max_length (int): The maximum allowable length of each string. Returns: list: List of validated strings meeting the criteria. valid = [] for s in strings: if s.isdigit() and len(s) <= max_length: valid.append(s) return valid"},{"question":"Develop a function that accepts two lists and returns a dictionary with the elements from the second list as keys and a list of their indices from the first list as values. If an element from the second list does not exist in the first list, store it with an empty list as its value in the dictionary.","solution":"def map_indices(list1, list2): Maps elements from list2 as keys to their indices in list1 as values. :param list1: The list in which to search for the indices. :param list2: The list whose elements will be used as keys in the resulting dictionary. :return: A dictionary with elements from list2 as keys and a list of their indices in list1 as values. index_map = {element: [] for element in list2} for index, element in enumerate(list1): if element in index_map: index_map[element].append(index) return index_map"},{"question":"Given a list of strings, write a program to remove all the empty strings from the list while maintaining the order of the remaining elements. You are not allowed to use any built-in functions or methods that directly solve the problem, such as \`filter()\`, \`list comprehension\`, or \`remove()\`. Instead, you should implement your own logic to achieve the desired result.","solution":"def remove_empty_strings(strings): Removes all the empty strings from the list while maintaining the order of the remaining elements. result = [] for string in strings: if string != \\"\\": result.append(string) return result"},{"question":"Write a type annotation for a function that takes a list of integers as an input, and returns a list of tuples, where each tuple contains the integer and a boolean value indicating if the integer is prime. Additionally, filter out all the non-prime numbers from the list.","solution":"from typing import List, Tuple def is_prime(n: int) -> bool: if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def prime_list(input_list: List[int]) -> List[Tuple[int, bool]]: return [(num, True) for num in input_list if is_prime(num)]"},{"question":"Parse the HTML page to extract all anchor elements. Additionally, handle cases where the HTML page contains nested elements and extract the inner text of the anchor elements instead of their HTML representation. Implement this functionality using only recursion and without using any external libraries or frameworks.","solution":"def parse_html(html): Parses the HTML and extracts all anchor elements recursively, and returns their inner text. :param html: str, the HTML content as a string :return: list, containing the inner text of each anchor element def extract_anchors(content, anchors): start_tag = \\"<a\\" end_tag = \\"</a>\\" start_index = content.find(start_tag) if start_index == -1: return anchors # Find the end of the starting <a> tag start_anchor_tag_end = content.find(\\">\\", start_index) + 1 end_index = content.find(end_tag, start_anchor_tag_end) if end_index == -1: return anchors # Extract content between <a> and </a> inner_text = content[start_anchor_tag_end:end_index].strip() # Remove nested tags within the inner text while \\"<\\" in inner_text and \\">\\" in inner_text: inner_text = inner_text[:inner_text.find(\\"<\\")] + inner_text[inner_text.find(\\">\\")+1:] if inner_text: anchors.append(inner_text) # Recursively handle the remaining content remaining_content = content[end_index + len(end_tag):] return extract_anchors(remaining_content, anchors) return extract_anchors(html, [])"},{"question":"How can I calculate the factorial of a number using Python without any built-in function or external library and additionally, perform this operation recursively and iteratively in one combined function?","solution":"def factorial(n, method=\\"iterative\\"): Calculate the factorial of a number using the specified method (iterative or recursive). :param n: Number to calculate the factorial. :param method: Method of calculation, either \\"iterative\\" or \\"recursive\\". :return: Factorial of the number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if method == \\"iterative\\": return factorial_iterative(n) elif method == \\"recursive\\": return factorial_recursive(n) else: raise ValueError(\\"Method must be 'iterative' or 'recursive'\\") def factorial_iterative(n): result = 1 for i in range(2, n + 1): result *= i return result def factorial_recursive(n): if n == 0 or n == 1: return 1 else: return n * factorial_recursive(n - 1)"},{"question":"Suppose I have a chord with the notes {Db, F, Ab}. How can I write a Python program to identify the type of chord it is? The chord types we are identifying are major, minor, augmented, and diminished.","solution":"def identify_chord(chord): Identifies the type of chord given a set of notes. :param chord: set of notes (str) :return: type of chord (str) # Chord intervals for different types of chords chord_types = { 'major': {'root': 0, 'third': 4, 'fifth': 7}, 'minor': {'root': 0, 'third': 3, 'fifth': 7}, 'augmented': {'root': 0, 'third': 4, 'fifth': 8}, 'diminished': {'root': 0, 'third': 3, 'fifth': 6}, } # Semitone distance mapping note_to_semitone = { 'C': 0, 'C#': 1, 'Db': 1, 'D': 2, 'D#': 3, 'Eb': 3, 'E': 4, 'Fb': 4, 'E#': 5, 'F': 5, 'F#': 6, 'Gb': 6, 'G': 7, 'G#': 8, 'Ab': 8, 'A': 9, 'A#': 10, 'Bb': 10, 'B': 11, 'Cb': 11, 'B#': 0 } chord = list(chord) # Check chord intervals root = chord[0] root_semitone = note_to_semitone[root] intervals = [] for note in chord: intervals.append((note_to_semitone[note] - root_semitone) % 12) intervals.sort() for chord_type, interval in chord_types.items(): if (interval['third'] in intervals and interval['fifth'] in intervals): return chord_type return \\"unknown\\""},{"question":"Given a list of integers, write a function to sort the list from largest to smallest using the bubble sort algorithm.","solution":"def bubble_sort_descending(arr): Sorts a list of integers in descending order using the bubble sort algorithm. Parameters: arr (list): A list of integers. Returns: list: The sorted list in descending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Given a linked list, you need to write a Python program to reverse the linked list. Also take care of possible errors that could occur during the implementation such as lack of head node, or an empty list. As a guide, below is an erroneous piece of code that attempts to reverse a linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list. Args: head (ListNode): The head of the linked list. Returns: ListNode: The new head of the reversed linked list. if head is None: return None prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a Python function that accepts a number n and generates a list of n stringified numbers starting from 1. Furthermore, each string in the list should be padded to a length of 3 with leading zeros, and the function should handle the case where n is greater than 999 by converting the n-th number to Roman Numerals and keeping the rest stringified numbers with three digits.","solution":"def int_to_roman(num): Converts an integer to a Roman Numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num def generate_stringified_numbers(n): Generates a list of n stringified numbers starting from 1, with each string padded to a length of 3 with leading zeros. result = [] for i in range(1, n + 1): if i <= 999: result.append(f\\"{i:03}\\") else: result.append(int_to_roman(i)) return result"},{"question":"Create a password validator in Python. It should check that a given password string is at least 8 characters long and contains at least one upper case letter, one lower case letter, and one number.","solution":"def validate_password(password): Validates that the password is at least 8 characters long and contains at least one upper case letter, one lower case letter, and one number. if len(password) < 8: return False has_upper = any(char.isupper() for char in password) has_lower = any(char.islower() for char in password) has_digit = any(char.isdigit() for char in password) return has_upper and has_lower and has_digit"},{"question":"I'm running a recursive function in Python which uses yield from to implement a depth-first traversal of a tree data structure. I'd like to implement a timeout on the traversal, so that if it doesn't spit out any output after 5 seconds (sleeps, waits, pauses, etc), it moves on to the next point. Where do you think I should go about preventing that infinite recursion within the yield from statement?","solution":"import signal class TimeoutException(Exception): pass def timeout_handler(signum, frame): raise TimeoutException def depth_first_traversal(node, timeout=5): Generator function to yield nodes in a depth-first traversal of a tree structure. It includes a timeout to prevent infinite recursion. signal.signal(signal.SIGALRM, timeout_handler) signal.setitimer(signal.ITIMER_REAL, timeout) try: yield from _depth_first_traversal(node) except TimeoutException: print(\\"Traversal timed out\\") finally: signal.setitimer(signal.ITIMER_REAL, 0) def _depth_first_traversal(node): # Simulate some node processing (customize this for your node structure) if node is None: return yield node if isinstance(node, dict): for child in node.get('children', []): yield from _depth_first_traversal(child) elif isinstance(node, list): for child in node: yield from _depth_first_traversal(child) # Example structure tree = { 'value': 1, 'children': [ {'value': 2, 'children': [ {'value': 4}, {'value': 5} ]}, {'value': 3, 'children': [ {'value': 6}, {'value': 7} ]} ] }"},{"question":"Create a python function which takes two inputs, a list of strings and a character, and returns a dictionary containing the count of each string beginning with the given character.","solution":"def count_strings_starting_with_char(strings, char): Returns a dictionary containing the count of each string beginning with the given character. Parameters: strings (list): A list of strings. char (str): A character to check for at the start of the strings. Returns: dict: A dictionary where the keys are the strings that start with the given character, and the values are their respective counts. counts = {} for string in strings: if string.startswith(char): if string in counts: counts[string] += 1 else: counts[string] = 1 return counts"},{"question":"Develop a Python method to compute the cumulative mass in kilograms of grocery items that a user has specified they want to purchase. Provided is a list detailing these items alongside their respective weights. Also, implement functionality to deal with possible errors during the process.","solution":"def cumulative_mass(grocery_items): Compute the cumulative mass in kilograms of grocery items. Args: grocery_items (list of tuples): A list of tuples where each tuple contains the item name (str) and its weight in kilograms (float). Returns: float: The cumulative mass of the grocery items in kilograms. total_mass = 0.0 for item in grocery_items: try: name, weight = item if not isinstance(name, str): raise ValueError(f\\"Invalid item name: {name}\\") if not isinstance(weight, (int, float)): raise ValueError(f\\"Invalid item weight: {weight}\\") total_mass += weight except (ValueError, TypeError) as e: print(f\\"Error processing item {item}: {e}\\") continue return total_mass"},{"question":"Given a tree structure, write a program that implements the depth-first search algorithm to find a specific node. The program should also return the path taken to reach that node along with the number of steps taken. Additionally, include error handling if the target node is not found in the tree.","solution":"class Node: def __init__(self, value): self.value = value self.children = [] def dfs(root, target, path=None, steps=0): Depth-first Search to find a target node in a tree. Parameters: root (Node): The root node of the tree. target: The value to search for. path (list): The path followed to reach the target. Initialized to None. steps (int): The number of steps taken. Initialized to 0. Returns: tuple or str: A tuple containing the path and number of steps if target is found. Error message string if target is not found. if path is None: path = [] path.append(root.value) steps += 1 if root.value == target: return path, steps for child in root.children: result = dfs(child, target, path.copy(), steps) if isinstance(result, tuple): return result return \\"Target node not found.\\""},{"question":"Using Numpy, write a function that generates an array of random integers of length n within a given range. Additionally, write another function that uses this array and sorts it based on specific conditions that we will provide. There are four conditions in total. Implement these sorting conditions as四个separate functions that can be applied to sorting.","solution":"import numpy as np def generate_random_array(n, low, high): Generates an array of random integers of length n within the given range [low, high). Parameters: n (int): The length of the array. low (int): The lower bound of the range (inclusive). high (int): The upper bound of the range (exclusive). Returns: numpy.ndarray: Array of random integers. return np.random.randint(low, high, size=n) def sort_array_ascending(arr): Sorts the array in ascending order. Parameters: arr (numpy.ndarray): The array to be sorted. Returns: numpy.ndarray: Sorted array in ascending order. return np.sort(arr) def sort_array_descending(arr): Sorts the array in descending order. Parameters: arr (numpy.ndarray): The array to be sorted. Returns: numpy.ndarray: Sorted array in descending order. return np.sort(arr)[::-1] def sort_array_even_first(arr): Sorts the array with even numbers first followed by odd numbers. Both even and odd numbers are sorted in ascending order within their groups. Parameters: arr (numpy.ndarray): The array to be sorted. Returns: numpy.ndarray: Sorted array with even numbers first. evens = arr[arr % 2 == 0] odds = arr[arr % 2 != 0] return np.concatenate((np.sort(evens), np.sort(odds))) def sort_array_odd_first(arr): Sorts the array with odd numbers first followed by even numbers. Both odd and even numbers are sorted in ascending order within their groups. Parameters: arr (numpy.ndarray): The array to be sorted. Returns: numpy.ndarray: Sorted array with odd numbers first. odds = arr[arr % 2 != 0] evens = arr[arr % 2 == 0] return np.concatenate((np.sort(odds), np.sort(evens)))"},{"question":"Given three dictionaries, \`dict1\`, \`dict2\`, and \`dict3\`, write a function \`merge_dicts\` that returns a new dictionary containing the merged key-value pairs from all three dictionaries. If a key already exists in the new dictionary when adding from a subsequent dictionary, append the value from that key to a list associated with that key. Keep in mind that the values in the final dictionary's lists should be sorted in ascending order.","solution":"def merge_dicts(dict1, dict2, dict3): Merges three dictionaries into a single dictionary. If a key appears in more than one dictionary, its values are combined into a sorted list. :param dict1: first dictionary :param dict2: second dictionary :param dict3: third dictionary :return: merged dictionary with sorted lists of values merged_dict = {} for d in (dict1, dict2, dict3): for key, value in d.items(): if key in merged_dict: if isinstance(merged_dict[key], list): merged_dict[key].append(value) else: merged_dict[key] = [merged_dict[key], value] else: merged_dict[key] = value for key in merged_dict: if isinstance(merged_dict[key], list): merged_dict[key].sort() else: merged_dict[key] = [merged_dict[key]] return merged_dict"},{"question":"Generate a code snippet for finding the kth smallest element in an array using Quickselect algorithm.","solution":"def quickselect(arr, k): Finds the k-th smallest element in an array using the Quickselect algorithm. :param arr: List of elements :param k: The k-th position to find (1-based index) :return: The k-th smallest element if k < 1 or k > len(arr): raise ValueError(\\"k is out of bounds\\") return quickselect_helper(arr, 0, len(arr) - 1, k - 1) def quickselect_helper(arr, left, right, k): if left == right: return arr[left] pivot_index = partition(arr, left, right) if k == pivot_index: return arr[k] elif k < pivot_index: return quickselect_helper(arr, left, pivot_index - 1, k) else: return quickselect_helper(arr, pivot_index + 1, right, k) def partition(arr, left, right): pivot = arr[right] i = left for j in range(left, right): if arr[j] <= pivot: arr[i], arr[j] = arr[j], arr[i] i += 1 arr[i], arr[right] = arr[right], arr[i] return i"},{"question":"Create a python program that takes a sentence as input and returns the number of unique words in the sentence. The program should also ignore any leading or trailing spaces in the sentence. For example, if the input sentence is \\" Hello World Hello \\", the program should return 2.","solution":"def count_unique_words(sentence): Returns the number of unique words in the input sentence, ignoring leading or trailing spaces. words = sentence.strip().split() unique_words = set(words) return len(unique_words)"},{"question":"Develop a more complex function to translate numeric grades into their corresponding letter grade with a '+' or '-' based on the GPA. Also include error checking and implement the functionality in a different piece of code.","solution":"def grade_to_letter(grade): Translates a numeric grade to a letter grade with + or - where appropriate. Parameters: grade (float): A numeric grade between 0 and 100. Returns: str: The letter grade with + or -. Raises: ValueError: If grade is not within the 0-100 range. if not (0 <= grade <= 100): raise ValueError(\\"Grade must be between 0 and 100\\") if grade >= 97: return \\"A+\\" elif grade >= 93: return \\"A\\" elif grade >= 90: return \\"A-\\" elif grade >= 87: return \\"B+\\" elif grade >= 83: return \\"B\\" elif grade >= 80: return \\"B-\\" elif grade >= 77: return \\"C+\\" elif grade >= 73: return \\"C\\" elif grade >= 70: return \\"C-\\" elif grade >= 67: return \\"D+\\" elif grade >= 63: return \\"D\\" elif grade >= 60: return \\"D-\\" else: return \\"F\\""},{"question":"Implement an auto complete or predictive search feature for the given data set of sentences with the added requirement that the implementation should be able to handle large data sets efficiently and have a time complexity of O(log n) for search operations. The data set of sentences should not be limited to a fixed size and should be able to handle dynamic additions and deletions of sentences. Additionally, the implementation should only use a single data structure for storing the sentences and should not rely on external libraries or APIs for the auto complete functionality.","solution":"from bisect import bisect_left, bisect_right, insort class AutoComplete: def __init__(self): # Use a sorted list to store sentences for efficient search and insert self.sentences = [] def add_sentence(self, sentence): # Insert sentence into the sorted list insort(self.sentences, sentence) def remove_sentence(self, sentence): # Remove sentence from the sorted list if it exists index = bisect_left(self.sentences, sentence) if index < len(self.sentences) and self.sentences[index] == sentence: self.sentences.pop(index) def search(self, prefix): # Find the range of sentences that start with the given prefix start = bisect_left(self.sentences, prefix) end = bisect_right(self.sentences, prefix + 'uffff') # 'uffff' is a character that is greater than any other character return self.sentences[start:end]"},{"question":"Given the code provided, which attempts to find the minimum number of meeting rooms required to accommodate a given list of intervals representing start and end times of meetings, debug and modify the function. Make sure the function correctly returns the correct number of meeting rooms needed without any time conflicts. Note that meetings may start and end at any time, not necessarily on the hour.","solution":"def minMeetingRooms(intervals): if not intervals: return 0 # Separate out the start and end times in ascending order start_times = sorted([i[0] for i in intervals]) end_times = sorted([i[1] for i in intervals]) start_ptr, end_ptr = 0, 0 used_rooms = 0 # Iterate over all the meetings while start_ptr < len(intervals): # A meeting is starting before the previous one ended, increment the room count if start_times[start_ptr] < end_times[end_ptr]: used_rooms += 1 else: # This meeting can use the same room as the previous meeting end_ptr += 1 start_ptr += 1 return used_rooms"},{"question":"Write a python program that not only counts the number of punctuation marks in the given string but also categorizes them individually. Along with this, make sure your program can handle multi-line strings, and punctuation found in the end of line or end of text must also be considered. Your function should display the total count and their distinct types present in the string.","solution":"import string from collections import defaultdict def count_and_categorize_punctuation(text): Counts the number of punctuation marks in the given text and categorizes them individually. Also handles multi-line strings and punctuation found in the end of line or end of text. Parameters: text (str): The input text. Returns: dict: A dictionary with punctuation marks as keys and their counts as values. # Initialize a dictionary to hold counts for each punctuation mark punctuation_count = defaultdict(int) # Loop through each character in the text for char in text: # If the character is a punctuation mark, increment its count if char in string.punctuation: punctuation_count[char] += 1 return dict(punctuation_count)"},{"question":"I am trying to write a function in Python using the pandas library to print only the first 10 records of a loaded DataFrame. Can you help me with that?","solution":"import pandas as pd def print_first_10_records(df): Prints the first 10 records of the given DataFrame. print(df.head(10))"},{"question":"Reverse the order of an array of integers.","solution":"def reverse_array(arr): Returns the array with its elements in reversed order. return arr[::-1]"},{"question":"Write a script in Python which takes a 2D array as input and prints its transpose. The 2D array can be irregular, meaning it may not have the same number of elements in each row. Your script should handle such cases and for rows with fewer elements, consider missing elements as zero when creating the transpose.","solution":"def transpose_matrix(matrix): Transposes a given 2D matrix and fills missing elements with zero. :param matrix: List of lists containing the 2D matrix. :return: Transposed matrix with adjusted zeroes for missing elements. if not matrix: return [] # Get the maximum length of any row in the matrix max_row_length = max(len(row) for row in matrix) # Prepare the transposed matrix with zeros transposed = [[0]*len(matrix) for _ in range(max_row_length)] # Iterate through the original matrix and fill the transposed matrix for i, row in enumerate(matrix): for j, value in enumerate(row): transposed[j][i] = value return transposed"},{"question":"Create a function that takes a list and an integer as parameters and finds the smallest subarray with a given length that sums up to the integer.","solution":"def find_smallest_subarray_with_sum(arr, length, target_sum): Finds the smallest subarray with a given length that sums up to the target sum. Parameters: arr (list): List of integers. length (int): Length of the subarray. target_sum (int): Target sum of the subarray. Returns: List: Smallest subarray with the specified length that sums up to the target sum, or an empty list if not found. n = len(arr) if length > n: return [] for i in range(n - length + 1): subarray = arr[i:i + length] if sum(subarray) == target_sum: return subarray return []"},{"question":"Code a function in Python, using a popular library such as \`requests\`, to make an HTTP request to a web page of your choice. The function should return \\"Retrieved successfully\\" if the request is successful and \\"Request Failed\\" otherwise. Further, as a part of error handling and indication, your program should also provide the HTTP status codes (like - 404, 503 etc.) along with the failure message. A sample erroneous code is provided below, identify the mistakes and correct it.","solution":"import requests def fetch_webpage(url): Makes an HTTP GET request to the specified URL and returns a success or failure message. Args: url (str): The URL to which the GET request is to be made. Returns: str: \\"Retrieved successfully\\" if the request is successful, \\"Request Failed with status code: {status_code}\\" otherwise. try: response = requests.get(url) response.raise_for_status() # Raise HTTPError for bad responses (4xx and 5xx) return \\"Retrieved successfully\\" except requests.exceptions.RequestException as e: return f\\"Request Failed with status code: {e.response.status_code}\\" if e.response else \\"Request Failed\\""},{"question":"How can I design a lottery where everyone has an equal chance to win with implementation in Python?","solution":"import random def lottery_draw(participants): Conducts a lottery draw where each participant has an equal chance of winning. Args: participants (list): A list of participants. Returns: str: The winner of the lottery. if not participants: return None winner = random.choice(participants) return winner"},{"question":"Given the following block of code that attempts to implement the Kadane's algorithm for finding the maximum subarray sum in an array of integers. However, the code is not functioning correctly. Your task is to correct and optimize the existing code, making necessary modifications, and also to increase its complexity by adding functions that will find both maximum and minimum subarray sums.","solution":"def kadane_algorithm(arr): Returns the maximum subarray sum using Kadane's algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def kadane_algorithm_min(arr): Returns the minimum subarray sum using a variation of Kadane's algorithm. min_current = min_global = arr[0] for num in arr[1:]: min_current = min(num, min_current + num) if min_current < min_global: min_global = min_current return min_global def kadane_algorithm_max_and_min(arr): Returns a tuple containing the maximum and minimum subarray sums using Kadane's algorithm. return (kadane_algorithm(arr), kadane_algorithm_min(arr))"},{"question":"Given a 2D list of integers, write a function in Python that prints all the even numbers from the list.","solution":"def print_even_numbers(matrix): Prints all the even numbers in a 2D list. Parameters: matrix (list of list of int): The 2D list from which even numbers should be printed. even_numbers = [num for row in matrix for num in row if num % 2 == 0] for number in even_numbers: print(number) # Note: Since this function is intended to print values, # test cases for the output will be checked by capturing stdout."},{"question":"Write a Lambda function in Python that returns the count of all prime numbers present in a given list. The list will be passed to the function as an argument and will only contain positive integers. The function should ignore any non-integer elements in the list.","solution":"def count_primes(numbers): Returns the count of prime numbers in the given list. Ignores non-integer elements in the list. def is_prime(n): if n <= 1: return False if n == 2: return True for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True return sum(1 for num in numbers if isinstance(num, int) and is_prime(num))"},{"question":"In Python, create a function that accomplishes the task of determining the largest common divisor, aka the greatest common divisor (GCD), for a pair of specified integer inputs, subsequent to calculating and outputting the least common multiple (LCM) for the identical pair of integers. These values should essentially be part of a tuple output. The two integer inputs in this case are 9 and 6.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b. while b: a, b = b, a % b return a def lcm(a, b): Returns the least common multiple (LCM) of a and b. return abs(a * b) // gcd(a, b) def calculate_lcm_and_gcd(a, b): Returns a tuple containing the LCM and GCD of a and b. lcm_value = lcm(a, b) gcd_value = gcd(a, b) return lcm_value, gcd_value # Example execution for the inputs 9 and 6 result = calculate_lcm_and_gcd(9, 6) result"},{"question":"Write Python code that takes in a color PNG image, and converts all blue pixels to red pixels.","solution":"from PIL import Image def change_blue_to_red(image_path, output_path): This function takes the path to a PNG image, processes the image to change all blue pixels to red, and then saves the processed image to a new file. :param image_path: Path to the input image file. :param output_path: Path to save the processed image file. # Open the image img = Image.open(image_path) img = img.convert(\\"RGBA\\") # Ensure image is in RGBA mode # Load image data data = img.getdata() new_data = [] for item in data: # Change all blue pixels (R, G, B, A) where B is more than other channels to red pixels (255, 0, 0) if item[2] > item[0] and item[2] > item[1]: new_data.append((255, 0, 0, item[3])) # Change blue to red else: new_data.append(item) # Update image data img.putdata(new_data) # Save the processed image img.save(output_path)"},{"question":"Rewrite the Fibonacci sequence logic using recursive function in Python. Also, include a functionality to calculate the Fibonacci sequence up to n terms, where n is a user input. Additionally, implement memoization to increase the efficiency of the recursive function.","solution":"def fibonacci_recursive(n, memo=None): Recursive function to calculate the nth Fibonacci number using memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci_recursive(n-1, memo) + fibonacci_recursive(n-2, memo) return memo[n] def fibonacci_sequence_up_to(n): Returns the Fibonacci sequence up to the nth term. sequence = [] for i in range(n): sequence.append(fibonacci_recursive(i)) return sequence"},{"question":"Use type hints for the args, kwargs and return type of a Python function.","solution":"from typing import Any def multiply(*args: int, **kwargs: int) -> int: Multiplies all positional and keyword arguments together. Parameters: *args (int): Variable length argument list, all integers to be multiplied. **kwargs (int): Arbitrary keyword arguments, all integers to be multiplied. Returns: int: The product of all arguments. product = 1 for arg in args: product *= arg for kwarg in kwargs.values(): product *= kwarg return product"},{"question":"Write a Python function that accepts a string as an argument, rotates the characters of the string by one position without using the slice or reverse methods, and returns the rotated string.","solution":"def rotate_string(s): Rotates the characters of the string by one position to the left. For example, if s is \\"hello\\", the result should be \\"elloh\\". if len(s) <= 1: return s rotated = '' for i in range(1, len(s)): rotated += s[i] rotated += s[0] return rotated"},{"question":"Write a function in Python that takes in two strings as input and concatenates them together. The function should check if either of the input strings is empty or contains only whitespace characters, and if so, it should raise a ValueError. Additionally, the function should ignore any leading or trailing whitespace in the input strings before concatenating them.","solution":"def concatenate_strings(str1, str2): Concatenates two strings after stripping any leading or trailing whitespace. Raises a ValueError if either of the input strings is empty or contains only whitespace. Args: str1 (str): The first string. str2 (str): The second string. Returns: str: The concatenated result of the two input strings. stripped_str1 = str1.strip() stripped_str2 = str2.strip() if not stripped_str1 or not stripped_str2: raise ValueError(\\"Input strings must not be empty or contain only whitespace\\") return stripped_str1 + stripped_str2"},{"question":"In Python, write a function that applies a given list of offsets to a date object, where each offset is a dictionary with months, days, and years properties that need to be added to the current date. The function should return a list of date objects, where each date object is the current date plus the offset.","solution":"from datetime import date, timedelta from dateutil.relativedelta import relativedelta def apply_offsets(current_date, offsets): Applies a given list of offsets to a date object. Parameters: current_date (date): The current date. offsets (list of dict): A list of offsets with 'years', 'months', and 'days' keys. Returns: list of date: A list of date objects with each offset applied. updated_dates = [] for offset in offsets: new_date = current_date if 'years' in offset: new_date += relativedelta(years=offset['years']) if 'months' in offset: new_date += relativedelta(months=offset['months']) if 'days' in offset: new_date += timedelta(days=offset['days']) updated_dates.append(new_date) return updated_dates"},{"question":"Reverse the following array using slicing. Your solution should have a time complexity of O(n) and should not use any built-in functions or libraries that directly reverse the array. Additionally, your solution should handle arrays with duplicates efficiently, without using any additional space.","solution":"def reverse_array(arr): Reverses the given array using slicing. Parameters: arr (list): The list to reverse. Returns: list: The reversed list. return arr[::-1]"},{"question":"Modify the following code for generating 3D points to use random numbers between -100 and 100 for x, y, and z and print the coordinates of each point.","solution":"import random def generate_3d_points(n): Generates n 3D points with random coordinates between -100 and 100. Parameters: n (int): Number of 3D points to generate. Returns: list of tuple: A list of 3D points represented as tuples (x, y, z). points = [] for _ in range(n): x = random.uniform(-100, 100) y = random.uniform(-100, 100) z = random.uniform(-100, 100) point = (x, y, z) points.append(point) return points"},{"question":"Generate a function that takes in a string and returns a new string that has each character of the original string repeated twice. Additionally, the function should reverse the order of the characters in the resulting string.","solution":"def repeat_and_reverse(s): Takes a string s and returns a new string such that each character is repeated twice and the order of characters is reversed. doubled_s = ''.join([char * 2 for char in s]) reversed_s = doubled_s[::-1] return reversed_s"},{"question":"Given a list of n integers and 2 other numbers called 'key' and 'replacement', write a function to remove all instances of the key from the list and replace them with the 'replacement' number. Your solution should not use any additional data structures.","solution":"def replace_and_remove(lst, key, replacement): Removes all instances of 'key' in the list 'lst' and replaces them with 'replacement'. Parameters: lst (list): The list of integers. key (int): The integer that needs to be removed. replacement (int): The integer that will replace the instances of 'key'. Returns: list: The modified list with 'key' replaced by 'replacement'. index = 0 while index < len(lst): if lst[index] == key: lst[index:index+1] = [replacement] * 1 # Replacing the element at index with 'replacement' index += 1 return lst"},{"question":"Write a Python function named \\"reverse_string\\" that takes a string as input and returns the reverse of the string. The function should not use any built-in string reversal functions or methods.","solution":"def reverse_string(s): Returns the reverse of the input string s. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Create a Python code snippet that corroborates the validity of a specific electronic mail address utilizing the principles of Regular Expressions' pattern matching techniques. Additionally, your code should also verify if the domain of the email is from a list of pre-approved domains ('example.com', 'test.com'). Here is a Python script using the 're' module for regular expression pattern matching to validate an email address format, and later check if the domain is among the approved ones.","solution":"import re def validate_email(email, approved_domains): Validates the given email address. Checks the format of the email and verifies if the domain is in the approved domains list. :param email: The email address to validate :param approved_domains: A list of approved domain names :return: True if the email is valid and belongs to an approved domain, otherwise False email_pattern = r\\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+\\" if re.match(email_pattern, email): domain = email.split('@')[1] if domain in approved_domains: return True return False approved_domains = ['example.com', 'test.com']"},{"question":"Separate the following string into 3 different substrings using Python. The substrings should be non-empty and of equal length. Additionally, ensure that each substring contains only lowercase alphabetic characters. Return the substrings as a list.","solution":"def separate_string(s): Separates the input string s into 3 equal-length non-empty substrings if possible, ensuring each contains only lowercase alphabetic characters. Returns a list of the 3 substrings. if len(s) % 3 != 0: raise ValueError(\\"The length of the string must be divisible by 3.\\") n = len(s) // 3 substrings = [s[:n], s[n:2*n], s[2*n:]] for substr in substrings: if not substr.isalpha() or not substr.islower(): raise ValueError(\\"Each substring must contain only lowercase alphabetic characters.\\") return substrings"},{"question":"Please write a code to detect if a string is a palindrome or not. Output true if it is a palindrome, output false if it is not. Palindrome strings are those which remain the same when their characters are reversed.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, False otherwise. A palindrome reads the same forward and backward. # Remove non-alphanumeric characters and convert to lower case cleaned_str = ''.join(char.lower() for char in s if char.isalnum()) # Compare the cleaned string with its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"Devise an algorithm that partitions a string of alphanumeric characters into an array of discrete substrings that individually represent a continuous sequence of uppercase alphabetical characters. For guidance, consider the following string: \\"AB123EF456XYZ\\".","solution":"import re def partition_uppercase_substrings(s): This function partitions a string into an array of substrings that represent continuous sequences of uppercase alphabetical characters. Parameters: s (str): The input string containing alphanumeric characters. Returns: list: A list of strings where each string is a continuous sequence of uppercase characters. return re.findall(r'[A-Z]+', s)"},{"question":"Implement a function that creates a dictionary from two lists which contain the keys and values, respectively. The function should handle cases where the keys list may contain duplicate values and the values list may contain different data types. Additionally, the function should ignore any keys that are empty strings or have a length greater than 10 characters.","solution":"def create_dict(keys, values): Create a dictionary from the given lists of keys and values. Parameters: keys (list): A list of keys for the dictionary. values (list): A list of values for the dictionary. Returns: dict: A dictionary created from the keys and values. result = {} for key, value in zip(keys, values): if key and 0 < len(key) <= 10: result[key] = value return result"},{"question":"Create a Python program to print a formatted price list with discounts. The list should show the regular price, discounted price, discount percentage, and a message stating the total savings.","solution":"def format_price_list(items): Formats a price list with the discounted prices. Args: items (list of dict): A list of dictionaries where each dictionary contains 'name', 'regular_price', and 'discounted_price'. Returns: str: A formatted string showing the price list with savings message. formatted_list = \\"NametRegular PricetDiscounted PricetDiscount PercentagetSavingsn\\" for item in items: name = item['name'] regular_price = item['regular_price'] discounted_price = item['discounted_price'] discount_percentage = ((regular_price - discounted_price) / regular_price) * 100 savings = regular_price - discounted_price formatted_list += f\\"{name}t{regular_price:.2f}t{discounted_price:.2f}t{discount_percentage:.2f}%t{savings:.2f}n\\" return formatted_list"},{"question":"Write a recursive function that takes two numbers, \`x\` and \`n\`, and returns \`x\` raised to the power of \`n\` (\`x^n\`). Additionally, include functionality to determine the base case through a keyword argument \`base_case\` (default to 1 for the power of 0) and add a \`verbose\` option that, if set to true, prints each recursive call.","solution":"def power(x, n, base_case=1, verbose=False): Returns x raised to the power of n (x^n) using recursion. :param x: Base number :param n: Exponent :param base_case: Base case value for n == 0 :param verbose: If True, prints each recursive call if verbose: print(f\\"power({x}, {n}, base_case={base_case})\\") if n == 0: return base_case elif n < 0: return 1 / power(x, -n, base_case, verbose) else: return x * power(x, n - 1, base_case, verbose)"},{"question":"Design a Python function snippet to Display Extreme Fitness: Heart Rate Monitoring for Engineer for Experts. Implement if/else or switch/case statements to handle different conditions related to the Safety. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def monitor_heart_rate(heart_rate): Monitors the heart rate and determines the safety status based on predefined thresholds. Parameters: heart_rate (int): The heart rate of an individual. Returns: str: Description of the heart rate status. if heart_rate < 40: # Critical low alert return \\"Dangerously Low: Immediate medical attention required!\\" elif 40 <= heart_rate < 60: # Low alert return \\"Low: Below normal range, consult a doctor.\\" elif 60 <= heart_rate <= 100: # Normal range return \\"Normal: Heart rate is within the safe range.\\" elif 100 < heart_rate <= 120: # Elevated alert return \\"Elevated: Above normal range, consider resting.\\" elif 120 < heart_rate <= 150: # High alert return \\"High: Significantly above normal, seek medical advice.\\" else: # Critical high alert return \\"Dangerously High: Immediate medical attention required!\\""},{"question":"Write a Python function 'validateSymmetricMatrix(matrix)' that receives a matrix as input and determines whether the matrix is symmetric or not. A symmetric matrix is a square matrix that is equal to its own transpose.","solution":"def validateSymmetricMatrix(matrix): Validates if the given matrix is symmetric. A matrix is symmetric if it is square and matrix[i][j] == matrix[j][i] for all i, j. :param matrix: List of lists, where each sublist is a row of the matrix. :return: True if the matrix is symmetric, False otherwise. # Get the number of rows n = len(matrix) # Check if the matrix is square if any(len(row) != n for row in matrix): return False # Check symmetry for i in range(n): for j in range(n): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"Write a Python code snippet that can determine if a given string is cheerful or not. A string is considered cheerful if its length is at least 3 and no three consecutive characters are the same. Also, the string should not contain any numerical digits. Your solution should include a function to calculate the Longest Common Subsequence (LCS) of two sequences before checking if the input string is cheerful. This function should be incorporated into the main cheerful string checker function but should not directly influence the final result.","solution":"def lcs(X, Y): Returns the length of the Longest Common Subsequence (LCS) of sequences X and Y. m = len(X) n = len(Y) L = [[None] * (n + 1) for i in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i-1] == Y[j-1]: L[i][j] = L[i-1][j-1] + 1 else: L[i][j] = max(L[i-1][j], L[i][j-1]) return L[m][n] def is_cheerful_string(s): Determines if a string is cheerful. A string is cheerful if its length is at least 3, no three consecutive characters are the same, and it does not contain any numerical digits. # Check if the string contains any numerical digits: if any(char.isdigit() for char in s): return False # Check the length of the string: if len(s) < 3: return False # Check for three consecutive same characters: for i in range(len(s) - 2): if s[i] == s[i+1] and s[i+1] == s[i+2]: return False return True"},{"question":"How would you verify if a character is a lowercase letter in Python, but the solution must not use any built-in functions or methods that directly check for lowercase letters? You are allowed to use ASCII values and basic string manipulation techniques.","solution":"def is_lowercase(char): Returns True if the character is a lowercase letter, False otherwise without using built-in functions to directly check for lowercase letters. # Check if the character is within the ASCII range for lowercase letters return 'a' <= char <= 'z'"},{"question":"Write a function that takes a list of strings, sorts them in alphabetically descending order and then prints them. Additionally, the function should handle case sensitivity, ensuring that the sorting does not consider case when ordering strings. For example, for the input [\\"apple\\", \\"Orange\\", \\"grape\\"], your function should return [\\"Orange\\", \\"grape\\", \\"apple\\"]. Include error handling for situations where non-string values are in the list.","solution":"def sort_strings_descending(lst): Sort a list of strings in alphabetically descending order without considering case sensitivity. Filter out any non-string elements. if not all(isinstance(item, str) for item in lst): raise ValueError(\\"All elements of the list should be strings\\") # Sort the list in descending order considering case insensitivity sorted_list = sorted(lst, key=lambda s: s.lower(), reverse=True) return sorted_list"},{"question":"Create a diamond pattern with asterisks, where the size of the diamond is given by the input parameter. The size should be an odd number between 3 and 11. Additionally, the diamond should have a hollow center, with asterisks only outlining the diamond shape and a space in the middle.","solution":"def diamond_pattern(size): Generates a diamond pattern with asterisks of given odd size with a hollow center. The size should be an odd number between 3 and 11. if size < 3 or size > 11 or size % 2 == 0: raise ValueError(\\"Size should be an odd number between 3 and 11.\\") pattern = [] mid = size // 2 for i in range(size): row = [' '] * size if i <= mid: row[mid - i] = '*' row[mid + i] = '*' else: row[i - mid] = '*' row[size - 1 - (i - mid)] = '*' pattern.append(''.join(row)) return 'n'.join(pattern)"},{"question":"How can I yield multiple times and return a value in a generator function?","solution":"def generator_with_return(): Yields multiple values and then returns a value. The return value is available through the exception raised at the end of the iteration. yield 1 yield 2 yield 3 return 99"},{"question":"Create a program that will guess a number between 1 and 1000, with the least amount of tries, when given hints of 'hot' and 'cold'. The hints indicate how close or far the guess is from the target number. A 'hot' response means the guess is very close to the target, a 'cold' response means the guess is far away from the target. Your program should also track and print the number of tries it took to guess the number.","solution":"import random def guess_number(target): Guess a number between 1 and 1000 given hints of 'hot' and 'cold'. low = 1 high = 1000 tries = 0 while True: guess = (low + high) // 2 tries += 1 if guess == target: return (guess, tries) elif abs(guess - target) <= 10: feedback = 'hot' else: feedback = 'cold' if feedback == 'hot': if guess < target: low = guess + 1 elif guess > target: high = guess - 1 elif feedback == 'cold': if guess > target: high = guess - 1 else: low = guess + 1"},{"question":"can you give me a python (type hint) type that represents a Union />);","solution":"from typing import Union Number = Union[int, float]"},{"question":"Write a function to print the criss-cross pattern of a given size n. The function should take an additional parameter, 'direction', which can be either 'up' or 'down', and affect the direction of the slanting lines in the pattern.","solution":"def criss_cross_pattern(n, direction): Generates a criss-cross pattern of size n. Parameters: n (int): The size of the pattern. direction (str): The direction of the slanting lines; can be either 'up' or 'down'. Returns: list: A list of strings, each string representing a row of the pattern. pattern = [] if direction == 'up': for i in range(n): row = ''.join(['x' if j == i or j == n - 1 - i else ' ' for j in range(n)]) pattern.append(row) elif direction == 'down': for i in range(n): row = ''.join(['x' if j == n - 1 - i or j == i else ' ' for j in range(n)]) pattern.append(row) else: raise ValueError(\\"Invalid direction. Use 'up' or 'down'.\\") return pattern"},{"question":"What is the length of an omidbefunge program in Befunge brainf*ck? Are you familiar with this esolang? How would you go about calculating the length of a program forcing it to be a multiple of 98 in such language?","solution":"def pad_to_multiple_of_98(program): Pads the given Befunge program string with spaces to ensure its length is a multiple of 98. Args: program (str): The Befunge program as a string. Returns: str: The padded Befunge program with length as a multiple of 98. length = len(program) padding_required = (98 - (length % 98)) % 98 return program + ' ' * padding_required"},{"question":"is there a way to send files from my pc to Char different ip addresses using python? also include in your code how to check whether these have been successfuly sent","solution":"import os import socket import tqdm import os def send_file(ip, port, filename): Sends a file to a specified IP address and port. # Get the file size filesize = os.path.getsize(filename) # Create the client socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((ip, port)) # Send the filename and filesize s.send(f\\"{filename}<SEPARATOR>{filesize}\\".encode()) # Start sending the file with open(filename, \\"rb\\") as f: # Create a progress bar progress = tqdm.tqdm(range(filesize), f\\"Sending {filename}\\", unit=\\"B\\", unit_scale=True, unit_divisor=1024) for _ in progress: # Read the bytes from the file bytes_read = f.read(1024) if not bytes_read: # File transmitting is done break # We use sendall to assure transimission in busy networks s.sendall(bytes_read) # Update the progress bar progress.update(len(bytes_read)) # close the socket s.close() return True def receive_file(ip, port, save_path): Receives a file from a specified IP address and port. # Create the server socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind((ip, port)) s.listen(5) print(f\\"[*] Listening as {ip}:{port}\\") # Accept connection if there is any client_socket, address = s.accept() print(f\\"[+] {address} is connected.\\") # Receive the file info received = client_socket.recv(1024).decode() filename, filesize = received.split(\\"<SEPARATOR>\\") # Remove absolute path if there is filename = os.path.basename(filename) # Convert to integer filesize = int(filesize) # Start receiving the file with open(os.path.join(save_path, filename), \\"wb\\") as f: # Create a progress bar progress = tqdm.tqdm(range(filesize), f\\"Receiving {filename}\\", unit=\\"B\\", unit_scale=True, unit_divisor=1024) for _ in progress: # Read bytes from the socket (receive) bytes_read = client_socket.recv(1024) if not bytes_read: # File transmitting is done break # Write to the file f.write(bytes_read) # Update the progress bar progress.update(len(bytes_read)) # Close the client socket client_socket.close() # Close the server socket s.close() return os.path.isfile(os.path.join(save_path, filename))"},{"question":"Develop a Python function that takes in a lengthy text string, breaks it up into individual words, and then provides the frequency of each word in the text. However, your function should specifically exclude common stop words (like 'the', 'a', 'an', 'in') from your word frequency count and also disregard any punctuation. Your output should be in the form of a dictionary, sorted in descending order based on the frequency counts.","solution":"import string from collections import Counter def word_frequency(text): Takes a text string, filters out stop words and punctuation, and returns the frequency of each remaining word in descending order. stop_words = {'the', 'a', 'an', 'in', 'and', 'or', 'of', 'to', 'with', 'is', 'on', 'that', 'by'} # Remove punctuation and convert to lowercase translator = str.maketrans('', '', string.punctuation) filtered_text = text.translate(translator).lower() words = filtered_text.split() # Filter out stop words filtered_words = [word for word in words if word not in stop_words] # Count frequencies word_counts = Counter(filtered_words) # Sort the word counts in descending order by frequency sorted_word_counts = dict(word_counts.most_common()) return sorted_word_counts"},{"question":"Given the list of 10,000 numbers (integers), write a program in Python that will sort the list in descending order using any four sorting algorithms: bubble sort, insertion sort, selection sort, and merge sort. Also, include comments explaining the logic behind each chosen algorithm and their time complexity.","solution":"def bubble_sort(arr): n = len(arr) # Traverse through all array elements for i in range(n-1): # Last i elements are already in place for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1 if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def insertion_sort(arr): # Traverse through 1 to len(arr) for i in range(1, len(arr)): key = arr[i] # Move elements of arr[0..i-1], that are greater than key, to one position ahead of their current position j = i - 1 while j >= 0 and key > arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr def selection_sort(arr): # Traverse through all array elements for i in range(len(arr)): # Find the maximum element in remaining unsorted array max_idx = i for j in range(i+1, len(arr)): if arr[max_idx] < arr[j]: max_idx = j # Swap the found maximum element with the first element arr[i], arr[max_idx] = arr[max_idx], arr[i] return arr def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 # Finding the mid of the array L = arr[:mid] # Dividing the elements into 2 halves R = arr[mid:] merge_sort(L) # Sorting the first half merge_sort(R) # Sorting the second half i = j = k = 0 while i < len(L) and j < len(R): if L[i] > R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 return arr"},{"question":"How can I create a basic chatbot in Python that allows users to ask questions about the weather and receive appropriate responses?","solution":"class SimpleWeatherChatbot: def __init__(self): self.weather_responses = { \\"sunny\\": \\"The weather is sunny.\\", \\"rainy\\": \\"It looks like it will rain today. Don't forget an umbrella!\\", \\"cloudy\\": \\"The sky is overcast today.\\", \\"snowy\\": \\"Snow is expected today, stay warm!\\", } self.default_response = \\"I'm not sure about the weather. Please ask about sunny, rainy, cloudy, or snowy weather.\\" def get_response(self, user_input): user_input = user_input.lower() if \\"weather\\" in user_input: if \\"sunny\\" in user_input: return self.weather_responses[\\"sunny\\"] elif \\"rainy\\" in user_input: return self.weather_responses[\\"rainy\\"] elif \\"cloudy\\" in user_input: return self.weather_responses[\\"cloudy\\"] elif \\"snowy\\" in user_input: return self.weather_responses[\\"snowy\\"] return self.default_response"},{"question":"Alter the accompanying Python script so that it displays odd integers within the bracket of one to twelve. Additionally, write a function that checks if a given number is prime. Use this function to print all prime numbers (not necessarily odd) in the range between one and twenty.","solution":"def print_odd_numbers(): Prints odd integers within the range of 1 to 12. for i in range(1, 13): if i % 2 != 0: print(i) def is_prime(n): Checks if a given number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def print_prime_numbers(): Prints prime numbers in the range of 1 to 20. for i in range(1, 21): if is_prime(i): print(i) # Example usage: print_odd_numbers() print_prime_numbers()"},{"question":"Write some script in python to periodically clear up all files in a given directory older than 2 hours.","solution":"import os import time def clear_old_files(directory, age_limit_hours=2): Removes files in the specified directory that are older than age_limit_hours. :param directory: Path to the directory to clear. :param age_limit_hours: Files older than this age in hours will be deleted. current_time = time.time() age_limit_seconds = age_limit_hours * 3600 for filename in os.listdir(directory): file_path = os.path.join(directory, filename) if os.path.isfile(file_path): file_age = current_time - os.path.getmtime(file_path) if file_age > age_limit_seconds: os.remove(file_path) print(f\\"Deleted {file_path}\\")"},{"question":"Write a Python program to check if a given array is a monotonic increasing array. Monotonic array means that for all i <= j, array[i] <= array[j]","solution":"def is_monotonic_increasing(arr): Checks if a given array is a monotonic increasing array. A monotonic increasing array means that for all i <= j, arr[i] <= arr[j] :param arr: List of integers :return: Boolean indicating whether the array is monotonic increasing for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return False return True"},{"question":"Write a function that takes as input a list and returns a random element from that list.","solution":"import random def get_random_element(lst): Returns a random element from the input list. :param lst: List of elements :return: A random element from the list if not lst: return None return random.choice(lst)"},{"question":"Automate the recipe for chicken tortilla soup in a slow cooker using a programming language.","solution":"def chicken_tortilla_soup(): Returns the step-by-step instructions to make chicken tortilla soup in a slow cooker. instructions = [ \\"1. Place 2 boneless, skinless chicken breasts in the slow cooker.\\", \\"2. Add 1 can of black beans (drained and rinsed).\\", \\"3. Add 1 can of corn (drained).\\", \\"4. Add 1 can of diced tomatoes (with liquid).\\", \\"5. Add 1 can of diced green chilies.\\", \\"6. Add 1 diced onion.\\", \\"7. Add 2 minced garlic cloves.\\", \\"8. Add 4 cups of chicken broth.\\", \\"9. Add 1 teaspoon of ground cumin.\\", \\"10. Add 1 teaspoon of chili powder.\\", \\"11. Add 1 teaspoon of paprika.\\", \\"12. Add salt and pepper to taste.\\", \\"13. Stir to combine all ingredients.\\", \\"14. Cover and cook on low for 6-8 hours or on high for 3-4 hours.\\", \\"15. Remove the chicken breasts, shred them with two forks, and return them to the slow cooker.\\", \\"16. Stir well and cook for an additional 30 minutes.\\", \\"17. Serve hot with toppings such as shredded cheese, sour cream, avocado slices, and tortilla strips.\\" ] return instructions"},{"question":"Write a Python function that takes a list of integers and returns True if all the integers in the list are consecutive numbers.","solution":"def are_consecutive(lst): Returns True if all integers in the list are consecutive numbers. if not lst: # if the list is empty, return False return False sorted_lst = sorted(lst) for i in range(1, len(sorted_lst)): if sorted_lst[i] != sorted_lst[i-1] + 1: return False return True"},{"question":"Can you provide an example of a Python function that calculates the product of two integers?","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Can you create a program that finds the intersection of two sets, without using any built-in set operations or functions? Just using loops and conditionals would be great!","solution":"def intersection(set1, set2): Returns the intersection of two sets provided as lists. result = [] for elem in set1: if elem in set2 and elem not in result: result.append(elem) return result"},{"question":"Create the function \\"multiply_three_numbers\\" that receives three integers as input and returns their product. Also, ensure this function handles the case when one or more integers are negative, by returning a string: \\"Error, negative numbers not accepted\\".","solution":"def multiply_three_numbers(a, b, c): Returns the product of three integers a, b, and c. If any of the integers are negative, returns an error message. if a < 0 or b < 0 or c < 0: return \\"Error, negative numbers not accepted\\" return a * b * c"},{"question":"Develop a method in Python to identify if a number is a palindrome.","solution":"def is_palindrome(n): Returns True if the number n is a palindrome, False otherwise. n_str = str(n) return n_str == n_str[::-1]"},{"question":"In Python, create a function that takes a mixed type list (containing integers and strings) as an argument and returns whether the list is sorted or not. If the list contains integers, it should be judged based on it being in increasing order, but if it is made up of strings, it should be judged on being in lexicographical order. Raise a custom exception if the list contains incompatible types.","solution":"class IncompatibleTypesException(Exception): pass def is_sorted_list(lst): Checks if the given list is sorted. If it contains integers, it checks for increasing order, and if it contains strings, it checks for lexicographical order. Raises IncompatibleTypesException if list contains mixed types. if not lst: # An empty list is considered sorted return True all_integers = all(isinstance(x, int) for x in lst) all_strings = all(isinstance(x, str) for x in lst) if not (all_integers or all_strings): raise IncompatibleTypesException(\\"List contains incompatible types.\\") return all(lst[i] <= lst[i+1] for i in range(len(lst) - 1))"},{"question":"Given two outer names as a key and a list of middle names with frequencies as a value implement an update along with an insert operation in a Red-Black tree. Your implementation should also include an operation to balance the tree after each update or insert operation. The Red-Black tree should maintain the properties of being a binary search tree and following the rules of Red-Black tree coloring and structure.","solution":"class RedBlackNode: def __init__(self, key, value, color='red'): self.key = key self.value = value self.color = color self.parent = None self.left = None self.right = None class RedBlackTree: def __init__(self): self.NIL_LEAF = RedBlackNode(None, None, color='black') self.root = self.NIL_LEAF def insert(self, key, value): new_node = RedBlackNode(key, value) new_node.left = self.NIL_LEAF new_node.right = self.NIL_LEAF if self.root == self.NIL_LEAF: self.root = new_node else: parent = None current = self.root while current != self.NIL_LEAF: parent = current if key < current.key: current = current.left elif key > current.key: current = current.right else: current.value = value return new_node.parent = parent if key < parent.key: parent.left = new_node else: parent.right = new_node self._fix_insert(new_node) def _fix_insert(self, node): while node != self.root and node.parent.color == 'red': if node.parent == node.parent.parent.left: uncle = node.parent.parent.right if uncle.color == 'red': node.parent.color = 'black' uncle.color = 'black' node.parent.parent.color = 'red' node = node.parent.parent else: if node == node.parent.right: node = node.parent self._rotate_left(node) node.parent.color = 'black' node.parent.parent.color = 'red' self._rotate_right(node.parent.parent) else: uncle = node.parent.parent.left if uncle.color == 'red': node.parent.color = 'black' uncle.color = 'black' node.parent.parent.color = 'red' node = node.parent.parent else: if node == node.parent.left: node = node.parent self._rotate_right(node) node.parent.color = 'black' node.parent.parent.color = 'red' self._rotate_left(node.parent.parent) self.root.color = 'black' def _rotate_left(self, node): right_node = node.right node.right = right_node.left if right_node.left != self.NIL_LEAF: right_node.left.parent = node right_node.parent = node.parent if node.parent is None: self.root = right_node elif node == node.parent.left: node.parent.left = right_node else: node.parent.right = right_node right_node.left = node node.parent = right_node def _rotate_right(self, node): left_node = node.left node.left = left_node.right if left_node.right != self.NIL_LEAF: left_node.right.parent = node left_node.parent = node.parent if node.parent is None: self.root = left_node elif node == node.parent.right: node.parent.right = left_node else: node.parent.left = left_node left_node.right = node node.parent = left_node def update(self, key, value): node = self._search_tree(self.root, key) if node != self.NIL_LEAF: node.value = value else: self.insert(key, value) def _search_tree(self, node, key): if node == self.NIL_LEAF or key == node.key: return node if key < node.key: return self._search_tree(node.left, key) return self._search_tree(node.right, key) def get(self, key): node = self._search_tree(self.root, key) return node.value if node != self.NIL_LEAF else None"},{"question":"You are to design a password generator. Given a number and a list of characters, write a python code such that when a character is used up in the sequence, it is removed from the list of character and cannot be used again. Also make sure the same character is not adjacent to each other in the password sequence.","solution":"import random def generate_password(length, characters): Generates a password of specified length using the given list of characters. Args: length (int): The length of the password to generate. characters (list): The list of characters to use for generating the password. Returns: str: A generated password ensuring no consecutive identical characters and no repetition. if length > len(characters): raise ValueError(\\"Password length cannot be greater than the number of unique characters provided\\") password = [] while len(password) < length: if len(password) == 0: # For the first character, randomly choose any character from the list char = random.choice(characters) else: # For subsequent characters ensure it is not the same as the last character options = [c for c in characters if c != password[-1]] if not options: raise ValueError(\\"Not enough diverse characters to avoid repetition\\") char = random.choice(options) # Append the character to the password and remove it from available characters password.append(char) characters.remove(char) return ''.join(password)"},{"question":"Given two unsorted linked lists, write code to sort them in ascending order. After sorting, merge them into one sorted linked list. Your solution should have a time complexity as close to O(n log n) as possible.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def mergeTwoLists(l1, l2): dummy = ListNode() current = dummy while l1 and l2: if l1.value < l2.value: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 if l2: current.next = l2 return dummy.next def sortList(head): if not head or not head.next: return head # Find the middle of the list slow, fast = head, head.next while fast and fast.next: slow = slow.next fast = fast.next.next mid = slow.next slow.next = None # Recursively split & sort the lists left = sortList(head) right = sortList(mid) # Merge the sorted lists return mergeTwoLists(left, right) def linkedListToList(head): result = [] while head: result.append(head.value) head = head.next return result def listToLinkedList(lst): dummy = ListNode() current = dummy for value in lst: current.next = ListNode(value) current = current.next return dummy.next def sortAndMergeLinkedLists(l1, l2): # Sort both linked lists sorted_l1 = sortList(l1) sorted_l2 = sortList(l2) # Merge the sorted linked lists return mergeTwoLists(sorted_l1, sorted_l2)"},{"question":"Develop a function in Python that takes any given date as an argument and returns the name of the day (e.g., \\"Monday\\"). Additionally, ensure that your function can handle incorrect date inputs gracefully by either returning an error message or asking for a proper date re-entry.","solution":"from datetime import datetime def get_day_name(date_str): Returns the name of the day for the given date string. Parameters: date_str (str): The date in \\"YYYY-MM-DD\\" format. Returns: str: The name of the day or an error message if the date format is incorrect. try: date_obj = datetime.strptime(date_str, '%Y-%m-%d') return date_obj.strftime('%A') except ValueError: return \\"Invalid date format. Please use 'YYYY-MM-DD'.\\""},{"question":"Write a Python function that takes a list of strings as input and returns a new dict with keys being unique strings from the list, and value is the list of indices where the string occurred in the original list. However, instead of using a simple for loop, use a method involving recursive backtracking.","solution":"def string_indices(strings): def backtrack(index, current_dict): if index >= len(strings): return current_dict current_string = strings[index] if current_string not in current_dict: current_dict[current_string] = [] current_dict[current_string].append(index) return backtrack(index + 1, current_dict) return backtrack(0, {})"},{"question":"Write a function to concatenate two strings without using the concatenation operator \\"+\\", and without using any built-in string manipulation functions (e.g., str.join, str.format).","solution":"def concatenate_strings(str1, str2): Concatenates two strings without using the concatenation operator \\"+\\", and without using any built-in string manipulation functions. result = [] # Append each character of str1 to the result for char in str1: result.append(char) # Append each character of str2 to the result for char in str2: result.append(char) # Join the characters together to form the concatenated string concatenated_string = \\"\\" for char in result: concatenated_string += char return concatenated_string"},{"question":"Create a program that reads 10 numbers from the user and finds the biggest prime number among them. If no prime number is found, the program should display a message indicating so.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_biggest_prime(numbers): Finds the biggest prime number in the list of numbers. If no prime number is found, returns None. primes = [num for num in numbers if is_prime(num)] return max(primes) if primes else None"},{"question":"I am a beginner Python developer. How can I check if a list has three consecutive elements equal to a specified value using Python? Could you provide an example?","solution":"def has_three_consecutive(lst, value): Checks if the list 'lst' has three consecutive elements equal to 'value'. for i in range(len(lst) - 2): if lst[i] == lst[i + 1] == lst[i + 2] == value: return True return False"},{"question":"Devise a programmable procedure that, when called, results in a visual output of an inverted triangle. Keep in mind the triangle's specification: it should span across 8 horizontal lines, with each line containing a maximum of 5 asterisks.","solution":"def inverted_triangle(): Prints an inverted triangle with each line containing a maximum of 5 asterisks, spanning across 8 horizontal lines. rows = 8 # Number of rows cols = 5 # Maximum number of asterisks per row for i in range(rows): print('*' * (cols - i))"},{"question":"Develop a Python function that not only verifies if a list of strings is alphabetically arranged in descending order, but also implements a sorting algorithm to rearrange the list to adhere to the descending alphabetical order if it's not. Additionally, the function should handle case sensitivity and ignore non-alphabetical characters while checking and sorting the strings.","solution":"import re def clean_string(s): Removes non-alphabetical characters from the string and converts it to lower case. return ''.join(re.findall(r'[a-zA-Z]', s)).lower() def is_descending_sorted(lst): Checks if the list is in descending alphabetical order considering only alphabetical characters and case insensitivity. cleaned_list = [clean_string(s) for s in lst] return cleaned_list == sorted(cleaned_list, reverse=True) def sort_descending(lst): Sorts a list of strings in descending alphabetical order, considering only alphabetical characters and case insensitivity. sorted_lst = sorted(lst, key=lambda s: clean_string(s), reverse=True) return sorted_lst def verify_and_sort(lst): Verifies if a list of strings is alphabetically arranged in descending order. If not, rearranges the list accordingly. if is_descending_sorted(lst): return lst, True else: return sort_descending(lst), False"},{"question":"Write a code that extracts all the URLs from the given string. The URLs must be in the format \\"http://www.example.com\\" and must not contain any additional query parameters or anchors. The code should return a list of unique URLs in the order they appear in the string.","solution":"import re def extract_urls(text): Extracts all unique URLs in the format \\"http://www.example.com\\" from the given string. The returned list does not contain any duplicates and maintains the order of their appearance. :param text: input string containing URLs :return: list of unique URLs in the format \\"http://www.example.com\\" # Define the regular expression pattern for URLs url_pattern = re.compile(r'http://www.[a-zA-Z0-9-]+.[a-zA-Z]+') # Find all matching URLs urls = re.findall(url_pattern, text) # Remove duplicates while maintaining the order seen = set() unique_urls = [] for url in urls: if url not in seen: seen.add(url) unique_urls.append(url) return unique_urls"},{"question":"Create a reinforcement learning agent to learn how to move a rover within a 10x10 grid. The agent shall define actions to move the rover North, East, South, West, Northeast, Northwest, Southeast, and Southwest, considering the grid's boundaries.","solution":"import random # Define the Rover environment class RoverEnv: def __init__(self, width=10, height=10): self.width = width self.height = height self.position = [width // 2, height // 2] # Start at the center of the grid def reset(self): self.position = [self.width // 2, self.height // 2] return self.position def step(self, action): x, y = self.position if action == 'N': y = max(0, y - 1) elif action == 'E': x = min(self.width - 1, x + 1) elif action == 'S': y = min(self.height - 1, y + 1) elif action == 'W': x = max(0, x - 1) elif action == 'NE': x = min(self.width - 1, x + 1) y = max(0, y - 1) elif action == 'NW': x = max(0, x - 1) y = max(0, y - 1) elif action == 'SE': x = min(self.width - 1, x + 1) y = min(self.height - 1, y + 1) elif action == 'SW': x = max(0, x - 1) y = min(self.height - 1, y + 1) self.position = [x, y] return self.position # Define the actions ACTIONS = ['N', 'E', 'S', 'W', 'NE', 'NW', 'SE', 'SW'] # Simple agent that randomly chooses an action class RoverAgent: def __init__(self): pass def choose_action(self): return random.choice(ACTIONS)"},{"question":"Develop an array that encompasses 10 unique numerals, ensure that none of these figures repeat. Further, perform an operation to sort this array in descending order and then find a specific number from this sorted array using a binary search algorithm. The number to be found should also be a prime number. Make sure you justify your coding decisions at each significant step. Below is an outline of how you'd do this task in Python.","solution":"def is_prime(n): Check if a number n is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def binary_search(arr, target): Perform a binary search for the target in the sorted array arr. low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] < target: high = mid - 1 else: low = mid + 1 return -1 # Step 1: Initialize array with 10 unique numbers array = [29, 11, 13, 31, 7, 3, 17, 19, 23, 5] # Step 2: Sort the array in descending order array.sort(reverse=True) # Step 3: Choose a prime number from the array for the binary search # Let's choose 17 target_prime = 17 # Step 4: Perform binary search result_index = binary_search(array, target_prime) def solution(): Returns the sorted array and the index of the target prime number in the array. return array, result_index"},{"question":"Write a python script that asks for your name at the beginning and then it prints out a personalized greeting. After greeting, the script will ask for a positive integer number. The script will then check if the given number is even or odd and prints a respectively statement. Additionally, if the number is even, the script should find and print all the even prime number that is less than the given number; if it is odd, the script will print out all odd prime numbers less than that number.","solution":"def personalized_greeting_and_prime_check(name, num): Greets the user by name, checks if the given number is even or odd, and prints out the respective prime numbers. greeting = f\\"Hello, {name}!\\" print(greeting) if num <= 0: raise ValueError(\\"The number must be a positive integer\\") if num % 2 == 0: print(f\\"The number {num} is even.\\") primes = find_even_primes_less_than(num) else: print(f\\"The number {num} is odd.\\") primes = find_odd_primes_less_than(num) return primes def is_prime(n): if n <= 1: return False if n == 2: return True # 2 is the only even prime if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def find_even_primes_less_than(num): # We can skip the loop iteration in case of even primes as the only even prime is 2 if num > 2: return [2] else: return [] def find_odd_primes_less_than(num): return [i for i in range(3, num, 2) if is_prime(i)]"},{"question":"Write a code that takes two lists of integers as input and returns a new list that contains the common elements of both input lists.","solution":"def common_elements(list1, list2): Takes two lists of integers and returns a new list that contains the common elements of both input lists. return list(set(list1) & set(list2))"},{"question":"Write a code for a function that rotates an array to the right for a given number of steps. For example, for an array [1,2,3,4,5] and 2 steps, the output should be [4,5,1,2,3]. Then, verify your function using a test case.","solution":"def rotate_array_right(arr, steps): Rotates the array to the right by the given number of steps. Parameters: arr (list): The list to be rotated. steps (int): The number of steps to rotate the array. Returns: list: The rotated list. if not arr: return arr steps = steps % len(arr) # In case steps is greater than the length of the array return arr[-steps:] + arr[:-steps]"},{"question":"code a function to generate a random password that uses the characters 'a' to 'z', 'A' to 'Z', '0' to '9', and excludes the characters 'I', 'l', and '1'.","solution":"import random def generate_random_password(length): Generate a random password using the characters 'a' to 'z', 'A' to 'Z', '0' to '9', excluding the characters 'I', 'l', and '1'. Parameters: length (int): Length of the password to be generated. Returns: str: Randomly generated password. characters = \\"abcdefghjkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ234567890\\" password = ''.join(random.choice(characters) for _ in range(length)) return password"},{"question":"Describe what is recursion in programming and provide a simple code example. Make sure to include some commentary on how the recursive function works, and also note any potential pitfalls or things to be careful of when using recursion.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. # Base case: factorial of 0 is 1 if n == 0: return 1 # Recursive case: n! = n * (n-1)! else: return n * factorial(n - 1)"},{"question":"Program a function that takes a list of integers as an argument and returns a dictionary where the keys are the original numbers and the values are their squares. Additionally, the function should ignore any numbers that are divisible by 3.","solution":"def square_numbers_excluding_divisibles_by_3(numbers): Returns a dictionary where the keys are the original numbers in the input list and the values are their squares, excluding any numbers that are divisible by 3. :param numbers: List of integers :return: Dictionary with numbers and their squares, excluding numbers divisible by 3. return {num: num ** 2 for num in numbers if num % 3 != 0}"},{"question":"Write a script to parse a JSON object with nested arrays and objects, and print the values of all \\"name\\" fields, regardless of their level of nesting. Additionally, ensure the script can handle JSON strings that may contain escaped characters, such as \\"'\\", and replace these with their unescaped form before printing the names. The script should print the names in reverse alphabetical order, and handle objects that contain multiple \\"name\\" fields, printing each name only once.","solution":"import json def parse_names_from_json(json_str): Parses a JSON string and extracts 'name' fields, handling nested structures. Unescapes escaped characters and prints the names in reverse alphabetical order. def extract_names(obj, names): if isinstance(obj, dict): for key, value in obj.items(): if key == \\"name\\" and isinstance(value, str): names.add(value.replace(\\"'\\", \\"'\\")) if isinstance(value, (dict, list)): extract_names(value, names) elif isinstance(obj, list): for item in obj: extract_names(item, names) json_obj = json.loads(json_str) names = set() extract_names(json_obj, names) for name in sorted(names, reverse=True): print(name)"},{"question":"Write a code to print out all prime numbers up to 100.","solution":"def get_primes_up_to_100(): Returns a list of all prime numbers up to 100. primes = [] for num in range(2, 101): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes print(get_primes_up_to_100())"},{"question":"Write a code to remove the duplicates from a given list without using set or list comprehension in Python and return the modified list. Also, implement a functionality to count the number of times a particular element appears in the list before its removal, then return these counts as a dictionary.","solution":"def remove_duplicates_and_count(lst): Removes duplicates from the given list and counts the number of appearances of each element before removal. Parameters: lst (list): The list from which duplicates need to be removed. Returns: tuple: A tuple containing the modified list (with duplicates removed) and a dictionary with element counts. element_count = {} unique_list = [] for item in lst: if item not in element_count: element_count[item] = 0 element_count[item] += 1 for item in lst: if item not in unique_list: unique_list.append(item) return unique_list, element_count"},{"question":"Write a short programming function that's designed in such a way as to determine whether an input string holds the properties of a Palindrome. This should be assessed by comparing characters that occupy corresponding positions from the beginning and end of the sequence respectively, while also taking into account the option to disregard any included spaces and punctuation.","solution":"import string def is_palindrome(s: str, ignore_spaces: bool = True, ignore_punctuation: bool = True): Determines if the given string is a palindrome. The function can optionally ignore spaces and punctuation based on the parameters. Args: s (str): The input string to check. ignore_spaces (bool): Flag to ignore spaces in the palindrome check. ignore_punctuation (bool): Flag to ignore punctuation marks. Returns: bool: True if the string is a palindrome, False otherwise. # Removing spaces if ignore_spaces is True if ignore_spaces: s = s.replace(\\" \\", \\"\\") # Removing punctuation if ignore_punctuation is True if ignore_punctuation: s = s.translate(str.maketrans(\\"\\", \\"\\", string.punctuation)) # Normalizing to lower case s = s.lower() # Checking if the string is a palindrome return s == s[::-1]"},{"question":"Write a function in Python that takes a list of strings and checks if they are all the same length and also checks if they are anagrams of each other. Additionally, the function should only consider strings that contain lowercase alphabets only.","solution":"def are_anagrams_and_same_length(strings): Returns whether all strings in the list are of the same length and whether they are anagrams of each other. Arguments: strings -- list of strings to check if not strings: return False # Step 1: Check if all strings contain only lowercase alphabets if not all(string.islower() and string.isalpha() for string in strings): return False # Step 2: Check if all strings have the same length length = len(strings[0]) if not all(len(s) == length for s in strings): return False # Step 3: Check if all strings are anagrams of each other sorted_first = sorted(strings[0]) return all(sorted(s) == sorted_first for s in strings)"},{"question":"Create a Python script that uses beautifulsoup4 to extract all headlines from a given news article URL.","solution":"import requests from bs4 import BeautifulSoup def extract_headlines(url): Extracts all the headlines from a given news article URL. :param url: str : URL of the news article :return: list : list of headline texts found in the news article response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') headlines = [headline.text for headline in soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])] return headlines"},{"question":"Write a function named \\"is_palindrome_recursive\\" that takes a string as an argument and returns True if the string is a palindrome (reads the same forwards and backwards) using recursion, and False otherwise.","solution":"def is_palindrome_recursive(s): Returns True if the string s is a palindrome, False otherwise. The function checks the string using recursion. # Base case: if the string is empty or has one character, it's a palindrome if len(s) <= 1: return True # Check if the first and last characters are the same if s[0] != s[-1]: return False # Recursive case: check the substring without the first and last characters return is_palindrome_recursive(s[1:-1])"},{"question":"How can I write a Python program to find the second smallest element in a list? Can you provide a solution?","solution":"def find_second_smallest(numbers): Returns the second smallest element in a list of numbers. If the list has fewer than 2 unique elements, returns None. if len(numbers) < 2: return None first_min = second_min = float('inf') for num in numbers: if num < first_min: second_min = first_min first_min = num elif first_min < num < second_min: second_min = num return second_min if second_min != float('inf') else None"},{"question":"As a Python developer, you might often find yourself needing to convert an \`Iterable\` into a function's arguments. Let's consider scenario: You have a list of areas of rectangles [(length,width)] and you need to use those dimensions to calculate the area (length * width). You want your program to be as general as possible and opted to implement this behavior using functools partial application. The function you will write will take any iterable of iterable pairs, and return a list where each element is the result of multiplying the two numbers in each pair together.","solution":"from functools import partial from operator import mul def calculate_areas(rectangles): Takes an iterable of iterable pairs (length, width) and returns a list of areas. rectangles: An iterable of iterable pairs (length, width) returns: A list of areas (length * width for each pair) area_function = partial(map, lambda x: mul(*x)) return list(area_function(rectangles))"},{"question":"Create a function that will add two numbers (represented as linked lists). Each linked list node contains a single digit from 0 to 9, and the digits are stored in reverse order (i.e., the head node contains the least significant digit). The function should return a new linked list representing the sum of the two input linked lists.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_two_numbers(l1, l2): Adds two numbers represented as linked lists. Each node in the linked lists contains a single digit and the digits are stored in reverse order. dummy_head = ListNode(0) current = dummy_head carry = 0 while l1 is not None or l2 is not None: x = l1.val if l1 else 0 y = l2.val if l2 else 0 total = carry + x + y carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next if carry > 0: current.next = ListNode(carry) return dummy_head.next"},{"question":"Create the async function 'divide' that accepts two parameters – both integers. This function should return the division result of the first parameter by the second one. Moreover, your implementation needs to include error handling to account for division by zero scenarios. When the second parameter is zero, your function should throw a bespoke exception 'ZeroDivisionError'. Additionally, your function should also validate the Parameters: only integers are allowed, otherwise it throws a 'TypeError'. Handle these situations efficiently in the function's code.","solution":"class ZeroDivisionError(Exception): pass async def divide(a, b): Asynchronously divides a by b. Parameters: a (int): The numerator. b (int): The denominator. Returns: float: The result of the division. Raises: ZeroDivisionError: If b is zero. TypeError: If a or b is not an integer. if not isinstance(a, int) or not isinstance(b, int): raise TypeError(\\"Both arguments must be integers.\\") if b == 0: raise ZeroDivisionError(\\"Division by zero is not allowed.\\") return a / b"},{"question":"Create a function that accepts a string input and replaces all non-alphabetic characters with a corresponding special character from a dictionary. The function should employ multiple-step reasoning including iterating through each character, checking character types, and implementing the replacement logic. The dictionary and the input string should be provided as arguments.","solution":"def replace_non_alphabetic(input_string, replacement_dict): Replaces non-alphabetic characters in the input string with corresponding characters from the replacement dictionary. Parameters: input_string (str): The string to be processed. replacement_dict (dict): A dictionary mapping non-alphabetic characters to their replacements. Returns: str: The processed string with replacements made. result = [] for char in input_string: if char.isalpha(): result.append(char) else: result.append(replacement_dict.get(char, char)) return ''.join(result)"},{"question":"Write a python program to sort a given list of employees (name and salary) in descending order by salary. If two employees have the same salary, sort them alphabetically by name in ascending order. The program should also remove duplicates, if any.","solution":"def sort_employees(employees): Sorts and removes duplicates from a list of employees (name, salary) tuples. The list is sorted in descending order by salary, and if two employees have the same salary, they are sorted alphabetically by name in ascending order. Parameters: employees (list): A list of tuples (name, salary). Returns: list: A sorted list of tuples (name, salary) without duplicates. # Using a set to remove duplicates and converting back to a list unique_employees = list(set(employees)) # Sorting primarily by salary in descending order and secondarily by name in ascending order sorted_employees = sorted(unique_employees, key=lambda x: (-x[1], x[0])) return sorted_employees"},{"question":"Develop a Python function that calculates the disparity between the largest and smallest values within a provided list, without utilizing the built-in min, max or sublist removal functions. The function should also handle both positive and negative numbers as well as zero.","solution":"def calculate_disparity(numbers): Returns the disparity between the largest and smallest values in the list without using min, max or sublist removal functions. if not numbers: raise ValueError(\\"The list must not be empty\\") smallest = float('inf') largest = float('-inf') for number in numbers: if number < smallest: smallest = number if number > largest: largest = number return largest - smallest"},{"question":"Given a list of strings, write a function that filters out all strings that are a palindrome and have a length greater than 5.","solution":"def filter_palindromic_strings(strings): Filters out palindromic strings that have a length greater than 5. Args: strings (list of str): List of strings to be filtered. Returns: list of str: List of strings that are not palindromes longer than 5 characters. def is_palindrome(s): return s == s[::-1] return [s for s in strings if not (is_palindrome(s) and len(s) > 5)]"},{"question":"Edit the following code to take in a list of numbers and return the number that is the second smallest in the list. If the list has duplicate numbers, it should still return the second smallest unique number. The input list will always have at least two unique numbers.","solution":"def second_smallest(numbers): Returns the second smallest unique number in the list. :param numbers: List of integers :return: Second smallest unique integer unique_numbers = list(set(numbers)) # Remove duplicates unique_numbers.sort() # Sort the numbers return unique_numbers[1] # Return the second smallest"},{"question":"Create a strict function \` Hypothetical add \` that would accept only two whole, non-zero numbers as parameters and returns their sum. The function does not need to contemplate or process any possible errors. Accompany your function by validating it through the provisioned check function which employs assert statements for verification.","solution":"def hypothetical_add(a, b): Returns the sum of a and b, assuming both are whole, non-zero numbers. return a + b"},{"question":"You are given a matrix. I want you to write a function that rotates the matrix 45 degrees clockwise. Please note that the given matrix would always be a square matrix i.e the number of rows and columns would always be equal.","solution":"def rotate_45_degrees_clockwise(matrix): Rotates a given square matrix 45 degrees clockwise. Args: matrix (list of list of int): The input square matrix to be rotated. Returns: list of list of int: The rotated matrix. n = len(matrix) res = [] # Upper triangle including middle diagonal for i in range(n): temp = [] row, col = i, 0 while row >= 0: temp.append(matrix[row][col]) row -= 1 col += 1 res.append(temp) # Lower triangle excluding middle diagonal for j in range(1, n): temp = [] row, col = n - 1, j while col < n: temp.append(matrix[row][col]) row -= 1 col += 1 res.append(temp) return res"},{"question":"Write a program in Python that finds not only the common elements between two lists, but also the indices at which these common elements occur in each list.","solution":"def find_common_elements_with_indices(list1, list2): Returns a list of tuples where each tuple contains a common element and the respective indices in list1 and list2. :param list1: First list of elements :param list2: Second list of elements :return: List of tuples in the form (common_element, index_in_list1, index_in_list2) common_elements_indices = [] for index1, elem1 in enumerate(list1): if elem1 in list2: index2 = list2.index(elem1) # finding the first occurrence of elem1 in list2 common_elements_indices.append((elem1, index1, index2)) return common_elements_indices"},{"question":"Develop a Python script to print out a given string 10 times, but with each repetition, remove a random character from the string. The removed character should be different each time. The final output should be the original string printed 10 times with a progressively shorter string each time.","solution":"import random def print_string_progressively(s): Print the given string 10 times, each time with a random character removed. for _ in range(10): if len(s) == 0: break print(s) idx = random.randrange(len(s)) s = s[:idx] + s[idx+1:] # Example usage if __name__ == \\"__main__\\": test_string = \\"hello world\\" print_string_progressively(test_string)"},{"question":"Generate python code to invert the case for each character in the given string","solution":"def invert_case(s): Invert the case for each character in the given string. Characters that are not alphabetic will remain unchanged. return ''.join(char.lower() if char.isupper() else char.upper() for char in s)"},{"question":"Water in a tank is being drained at a rate that is proportional to the square root of the height of the water. Develop a python code that solves time varying differential equation using scipy odeint for a given constant of proportionality and initial height.","solution":"import numpy as np from scipy.integrate import odeint def water_height_model(h, t, k): Differential equation model for the height of water being drained from a tank. Parameters: h : float The height of the water at time t. t : float The time variable. k : float The proportionality constant. Returns: dhdt : float The rate of change of the height of the water at time t. if h < 0: return 0 return -k * np.sqrt(h) def solve_water_height(k, h0, t): Solves the differential equation for the height of water in a tank over time. Parameters: k : float The proportionality constant. h0 : float The initial height of the water. t : array-like The times at which to solve for the water height. Returns: h : array The heights of the water corresponding to each time in t. return odeint(water_height_model, h0, t, args=(k,)).flatten()"},{"question":"Develop a Python function that, when provided with a specific date in ISO 8601 standard format (YYYY-MM-DD), yields the particular day of the week. Besides, it should also indicate if it is a weekday or the weekend. For extra complexity, have the function also calculate how many days are left in the current year from the given date.","solution":"from datetime import datetime def get_day_info(date_str): Returns the day of the week, if it is a weekend, and days left in the year from the given date. Args: date_str (str): Date in ISO 8601 standard format (YYYY-MM-DD) Returns: tuple: (day_of_the_week (str), is_weekend (bool), days_left (int)) date = datetime.strptime(date_str, '%Y-%m-%d') days_of_week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] day_of_the_week = days_of_week[date.weekday()] is_weekend = day_of_the_week in ['Saturday', 'Sunday'] # Calculate how many days left in the year end_of_year = datetime(date.year, 12, 31) days_left = (end_of_year - date).days return (day_of_the_week, is_weekend, days_left)"},{"question":"Given a list that contains both strings and integers, write a Python function to return a list with its strings uppercased and integers incremented by 1. Ignore any other types that is not string or integer.","solution":"def process_list(input_list): This function takes a list that contains both strings and integers, and returns a list where the strings are uppercased and the integers are incremented by 1. Other types are ignored. result = [] for item in input_list: if isinstance(item, str): result.append(item.upper()) elif isinstance(item, int): result.append(item + 1) return result"},{"question":"Create a code for a function that receives two strings as input and checks if one string is a substring of the other string.","solution":"def is_substring(s1, s2): Check if one string is a substring of the other. :param s1: First string :param s2: Second string :return: True if one string is a substring of the other, otherwise False return s1 in s2 or s2 in s1"},{"question":"Iterate through a given 2D array and print the index of all occurrences of a target value. Handle cases where the 2D array can be non-rectangular (i.e., rows of unequal lengths).","solution":"def find_target_indices(matrix, target): Finds and returns the indices of all occurrences of the target value in the 2D array (matrix). Handles cases where the 2D array (matrix) can be non-rectangular (rows of unequal lengths). Parameters: matrix (list of list of int): 2D array to search. target (int): Target value to find. Returns: list of tuple: A list of tuples, each containing the (row_idx, col_idx) of an occurrence of the target value. indices = [] for row_idx, row in enumerate(matrix): for col_idx, value in enumerate(row): if value == target: indices.append((row_idx, col_idx)) return indices"},{"question":"Human-Computer Interaction (HCI) in real-world applications can often be evaluated using tasks that involve physical objects within the environment. Write a Python script that can be used to evaluate a user's performance with a new interface for controlling a robotic arm. The script should record the time it takes for the user to move the robotic arm to a specific target position, and should also track the number of times the user overshoots or misses the target. Make sure to comment the code for readability.","solution":"import time class RoboticArmController: def __init__(self, target_position): self.target_position = target_position self.start_time = None self.end_time = None self.overshoot_count = 0 self.current_position = 0 def start_task(self): Starts the task by recording the start time. self.start_time = time.time() def move_to_position(self, new_position): Moves the robotic arm to the new_position. Args: new_position (float): The position to move the robotic arm to. self.current_position = new_position if self.current_position != self.target_position: self.overshoot_count += 1 def end_task(self): Ends the task by recording the end time and calculating the performance metrics. self.end_time = time.time() time_taken = self.end_time - self.start_time return {\\"time_taken\\": time_taken, \\"overshoot_count\\": self.overshoot_count}"},{"question":"Create a program that not only extracts and lists all inline CSS styles from an HTML page, but also calculates the frequency of each type of CSS property used in the styles. Prioritize the extraction method to handle various HTML structures.","solution":"import re from collections import Counter from bs4 import BeautifulSoup def extract_inline_styles(html): Extracts all inline CSS styles from an HTML page and calculates the frequency of each CSS property used in the styles. :param html: A string containing the HTML content. :return: A dictionary where keys are CSS properties and values are their frequencies. # Using BeautifulSoup to parse the HTML content soup = BeautifulSoup(html, 'html.parser') # Finding all tags with a style attribute tags_with_style = soup.find_all(style=True) # Extracting the inline styles inline_styles = [] for tag in tags_with_style: style_content = tag.get('style') inline_styles.append(style_content) # Compiling all inline styles into one string for easy processing all_styles = ';'.join(inline_styles) # Using regex to find all CSS properties css_properties = re.findall(r'(w+(-w+)*):', all_styles) css_property_names = [prop[0] for prop in css_properties] # Counting frequencies of each CSS property property_frequencies = Counter(css_property_names) return dict(property_frequencies)"},{"question":"Generate a Python Script that generates random integers within a range specified by a start and end variable.","solution":"import random def generate_random_integer(start, end): Generates a random integer within the range specified by start and end (inclusive). :param start: The lower bound of the range. :param end: The upper bound of the range. :return: A random integer within the specified range. if start > end: raise ValueError(\\"Start must be less than or equal to end\\") return random.randint(start, end)"},{"question":"Create a 5x5 array with all its elements equal to 1, but ensure that the array is initialized using a recursive function rather than a simple array creation method.","solution":"def create_array(rows, cols): Creates a 2D array with the specified number of rows and columns, and initializes all elements to 1 using recursion. if rows == 0: return [] else: return [create_row(cols)] + create_array(rows - 1, cols) def create_row(cols): Creates a row with the specified number of columns, and initializes all elements to 1 using recursion. if cols == 0: return [] else: return [1] + create_row(cols - 1) # Creating a 5x5 array using the recursive function array_5x5 = create_array(5, 5)"},{"question":"Create a Python program to simulate a coin toss. The program should allow the user to select the number of tosses and display the results of each toss.","solution":"import random def coin_toss(num_tosses): Simulates a number of coin tosses. Args: - num_tosses (int): Number of times to toss the coin. Returns: - list: A list containing the result of each toss as 'Heads' or 'Tails'. results = [] for _ in range(num_tosses): if random.choice([True, False]): results.append('Heads') else: results.append('Tails') return results"},{"question":"Create a Python function that takes a list of numbers as input and returns a new list containing only the pronic numbers from the input list.","solution":"def is_pronic(n): Check if a number is pronic. if n < 0: return False x = int((n) ** 0.5) return x * (x + 1) == n def get_pronic_numbers(numbers): Returns a list of pronic numbers from the input list. return [num for num in numbers if is_pronic(num)]"},{"question":"Write a function in Python that takes a list of strings and an integer as inputs, reverses the characters in each string, and returns a new list where each entry is the reverse of the corresponding entry in the original list with the length of each string extended by the given integer using a specified character. The function should assert the type and length of the input list and its items, and handle any exceptions gracefully.","solution":"def reverse_and_extend(strings, extension_length, extension_char='*'): Reverses each string in the list and extends its length by a given number using a specified character. Parameters: strings (list): List of strings to be processed. extension_length (int): Number of characters to extend each string. extension_char (str): Character to use for extending the strings. Defaults to '*'. Returns: list: A new list with each string reversed and extended. # Type and value assertions. assert isinstance(strings, list), \\"Input should be a list\\" assert all(isinstance(s, str) for s in strings), \\"All items in the list should be strings\\" assert isinstance(extension_length, int), \\"Extension length should be an integer\\" assert isinstance(extension_char, str) and len(extension_char) == 1, \\"Extension character should be a single character\\" # Process each string in the list. result = [] for s in strings: extended_s = s[::-1] + extension_char * extension_length result.append(extended_s) return result"},{"question":"Create a function that can concatenate two lists into a string separated by a specific character of your choice (not a comma). The function should perform the concatenation without using any built-in Python functions (e.g., join()).","solution":"def concatenate_lists_with_separator(list1, list2, separator): Concatenates two lists into a string separated by a specific character of your choice. Args: list1 (list): The first list of strings. list2 (list): The second list of strings. separator (str): The character to use as a separator. Returns: str: A string with the concatenated values of list1 and list2 separated by the specified separator. concatenated_str = \\"\\" for item in list1: if concatenated_str: concatenated_str += separator concatenated_str += item for item in list2: if concatenated_str: concatenated_str += separator concatenated_str += item return concatenated_str"},{"question":"Write a function that takes two strings as input, and returns a count of common characters between them. However, each character can only be counted once regardless of how many times it appears in either string. The function should ignore case sensitivity.","solution":"def count_common_characters(str1, str2): Returns the count of unique common characters between two strings, ignoring case. str1_set = set(str1.lower()) str2_set = set(str2.lower()) common_characters = str1_set.intersection(str2_set) return len(common_characters)"},{"question":"I have text files containing information about my products, and I need to transform them into machine-readable CSV format using Python. However, the information in each file doesn't follow a standard structure. The files usually have the following information: name of the product, which could have multiple words, a space indicating the end of the product name, followed by an equal sign, and then the price of the product. I'm looking for a program that can read each line and create a CSV file where the first column contains the product's name and the second column contains the price. Each file's path ends with a product category like electronics or clothing. How can I achieve this using Python?","solution":"import csv def transform_to_csv(input_file, output_file): Reads a text file with product information and transforms it into a CSV file. :param input_file: Path to the input text file :param output_file: Path to the output CSV file with open(input_file, 'r') as infile, open(output_file, 'w', newline='') as csvfile: csvwriter = csv.writer(csvfile) csvwriter.writerow(['Product Name', 'Price']) # Writing the CSV header for line in infile: # Split the line at the first occurrence of ' = ' name, price = line.rsplit(' = ', 1) price = price.strip() csvwriter.writerow([name, price])"},{"question":"Write a Python function that takes in a sorted list of integers and a target integer. The function should use binary search to find the target in the list and return its index if it exists. If the target is not in the list, the function should return -1.","solution":"def binary_search(nums, target): Perform a binary search to find the target in a sorted list of integers. Parameters: nums (list of int): A sorted list of integers. target (int): The target integer to search for. Returns: int: The index of the target if it exists in the list, otherwise -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Devise a computer algorithm capable of transforming a color representation based on the CMYK model (Cyan, Magenta, Yellow, and Key/Black) into its equivalent hexadecimal color code.","solution":"def cmyk_to_hex(c, m, y, k): Transform a color representation from CMYK to its equivalent hexadecimal color code. Parameters: c (float): Cyan component, in the range [0, 1] m (float): Magenta component, in the range [0, 1] y (float): Yellow component, in the range [0, 1] k (float): Key (black) component, in the range [0, 1] Returns: str: The hexadecimal color code in the format \\"#RRGGBB\\" # Ensure inputs are within the valid range for value in [c, m, y, k]: if not (0 <= value <= 1): raise ValueError(\\"CMYK values must be in the range [0, 1]\\") # Calculate the RGB components r = 255 * (1 - c) * (1 - k) g = 255 * (1 - m) * (1 - k) b = 255 * (1 - y) * (1 - k) # Convert the RGB components to integers and then to hexadecimal hex_color = \\"#{:02X}{:02X}{:02X}\\".format(int(r), int(g), int(b)) return hex_color"},{"question":"Write me a python script which bulk uninstalls a list, newline-separated, of app packages provided from stdin.","solution":"import subprocess def bulk_uninstall_packages(packages_list): Uninstalls a list of packages provided. :param packages_list: list of package names to uninstall for package in packages_list: try: subprocess.run(['pip', 'uninstall', '-y', package], check=True) except subprocess.CalledProcessError as e: print(f\\"Error uninstalling package {package}: {e}\\") if __name__ == \\"__main__\\": import sys packages = sys.stdin.read().splitlines() bulk_uninstall_packages(packages)"},{"question":"Can you generate a random DNA sequence of length 100 using only the four standard nucleotides (adenine, cytosine, guanine, and thymine)? Additionally, can you calculate and display the frequency of each nucleotide in the created sequence? Please use Python for this task.","solution":"import random def generate_dna_sequence(length=100): Generates a random DNA sequence of a given length using the four standard nucleotides. Returns the sequence and the frequency of each nucleotide. nucleotides = ['A', 'C', 'G', 'T'] sequence = ''.join(random.choice(nucleotides) for _ in range(length)) frequency = { 'A': sequence.count('A'), 'C': sequence.count('C'), 'G': sequence.count('G'), 'T': sequence.count('T') } return sequence, frequency"},{"question":"What steps would you take to verify that a given string is a valid IP address? Additionally, implement a function that also verifies if the IP address falls into the ranges of A, B, C, D, or E.","solution":"def validate_ip_and_classify(ip): Validate the IP address and classify it into one of the classes A, B, C, D, or E. parts = ip.split('.') if len(parts) != 4: return \\"Invalid IP address\\" try: octets = [int(part) for part in parts] except ValueError: return \\"Invalid IP address\\" if not all(0 <= octet <= 255 for octet in octets): return \\"Invalid IP address\\" first_octet = octets[0] if 1 <= first_octet <= 126: return \\"Class A\\" elif 128 <= first_octet <= 191: return \\"Class B\\" elif 192 <= first_octet <= 223: return \\"Class C\\" elif 224 <= first_octet <= 239: return \\"Class D\\" elif 240 <= first_octet <= 255: return \\"Class E\\" else: return \\"Invalid IP address\\""},{"question":"Write a Python function called \`calc_factorial\` that calculates the factorial of a given number using recursion. Additionally, include an \`assert\` statement in the function to check if the input is a non-negative integer. Use Python's built-in tools to ensure that the function is accurate and efficient.","solution":"def calc_factorial(n): Returns the factorial of n using recursion. assert isinstance(n, int) and n >= 0, \\"Input must be a non-negative integer.\\" if n == 0 or n == 1: return 1 else: return n * calc_factorial(n - 1)"},{"question":"Write a Python function that not only removes all adjacent duplicates from a given list, but also returns a new list where each remaining element is raised to a power equal to the number of times it originally appeared consecutively.","solution":"def remove_adjacent_duplicates_and_power(lst): if not lst: return [] result = [] count = 1 for i in range(1, len(lst)): if lst[i] == lst[i-1]: count += 1 else: result.append(lst[i-1] ** count) count = 1 result.append(lst[-1] ** count) return result"},{"question":"Write a custom implementation of the \`collections.Counter\` class in Python without using any inbuilt counter functionality. Your implementation should include all the basic functionalities such as counting elements in a list, finding most common elements and updating the count. Additionally, implement a function to return elements that have a count lower than a certain threshold.","solution":"class CustomCounter: def __init__(self, iterable=None): self._counts = {} if iterable: self.update(iterable) def update(self, iterable): for item in iterable: if item in self._counts: self._counts[item] += 1 else: self._counts[item] = 1 def most_common(self, n=None): sorted_counts = sorted(self._counts.items(), key=lambda x: x[1], reverse=True) if n is None: return sorted_counts return sorted_counts[:n] def elements_with_count_lower_than(self, threshold): return [item for item, count in self._counts.items() if count < threshold] def __getitem__(self, item): return self._counts.get(item, 0) def __repr__(self): return f\\"{self.__class__.__name__}({self._counts})\\""},{"question":"Program a python function that checks if a number is a power of three, without using built-in logarithm functions, floats, or obtaining fractional or decimal numbers in any part of the calculation.","solution":"def is_power_of_three(n): Checks if the given number n is a power of three. if n < 1: return False while n % 3 == 0: n //= 3 return n == 1"},{"question":"Given a string and a list of words, write a program to check if the string can be seen as a concatenation of words from the list.","solution":"def can_concatenate(s, words): Returns True if the string s can be formed by concatenating the words from the list of words, False otherwise. if not words: return s == \\"\\" def can_form(s, words_set): if s == \\"\\": return True for word in words_set: if s.startswith(word): if can_form(s[len(word):], words_set): return True return False return can_form(s, set(words))"},{"question":"Generate the enum definition and a function to parse a string to this enum. The enum is called \\"Weekday\\" and has arbitrary values for the days of the week.","solution":"from enum import Enum class Weekday(Enum): MONDAY = 1 TUESDAY = 2 WEDNESDAY = 3 THURSDAY = 4 FRIDAY = 5 SATURDAY = 6 SUNDAY = 7 def parse_weekday(day_str): Parses a string to a Weekday enum. :param day_str: The string representing the day of the week. :return: The corresponding Weekday enum value. :raises ValueError: if the string cannot be parsed to a valid Weekday. day_str_upper = day_str.strip().upper() weekday_map = { \\"MONDAY\\": Weekday.MONDAY, \\"TUESDAY\\": Weekday.TUESDAY, \\"WEDNESDAY\\": Weekday.WEDNESDAY, \\"THURSDAY\\": Weekday.THURSDAY, \\"FRIDAY\\": Weekday.FRIDAY, \\"SATURDAY\\": Weekday.SATURDAY, \\"SUNDAY\\": Weekday.SUNDAY } if day_str_upper in weekday_map: return weekday_map[day_str_upper] else: raise ValueError(f\\"'{day_str}' is not a valid day of the week.\\")"},{"question":"Please write a python program that finds the maximum number in a list. The list is guaranteed to contain at least one element, and all elements are positive integers. Additionally, the program should find and display the index of the maximum number in the list.","solution":"def find_max_and_index(lst): Returns the maximum number and its index in a list of positive integers. :param lst: List of positive integers :return: Tuple containing the maximum number and its index max_num = max(lst) max_index = lst.index(max_num) return max_num, max_index"},{"question":"Write me a Python code that checks if a given number is an Armstrong number or not. An Armstrong number, also known as a narcissistic number, is a number that is equal to the sum of its own digits each raised to the power of the number of digits.","solution":"def is_armstrong_number(number): Checks if the given number is an Armstrong number. An Armstrong number (narcissistic number) is a number that is equal to the sum of its own digits each raised to the power of the number of digits. digits = [int(d) for d in str(number)] num_digits = len(digits) armstrong_sum = sum(digit ** num_digits for digit in digits) return armstrong_sum == number"},{"question":"given the log() and exp() functions, implement your own version of the pow() function that computes the value of a base raised to the power of an exponent. In addition to passing the base and exponent to the function, users should also specify the precision (tolerance) they want. The function that you'll need to write must dynamically adjust the number of iterations to find the result within the given precision. Please don't use any built-in pow() function or any operator for exponentiation.","solution":"import math def custom_pow(base, exponent, precision): Computes the value of a base raised to the power of an exponent with a given precision. Parameters: base (float): The base value. exponent (float): The exponent value. precision (float): The desired precision. Returns: float: The result of base raised to the power of exponent. result = math.exp(exponent * math.log(base)) return round(result, int(math.fabs(math.log10(precision))))"},{"question":"Design a Python function snippet to Transform Low Finance: Loan Calculations for Analysis for Professionals. Implement if/else or switch/case statements to handle different conditions related to the Safety. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def loan_safety_analysis(loan_amount, annual_income, credit_score): This function assesses the safety of providing a loan based on loan amount, annual income, and credit score. # Define result variable to store the safety analysis result safety_status = \\"\\" # Check if the loan amount is greater than 50% of the annual income if loan_amount > (0.5 * annual_income): safety_status = \\"High Risk\\" else: # If loan amount criteria is safe, check the credit_score if credit_score < 600: safety_status = \\"Moderate Risk\\" elif 600 <= credit_score < 750: safety_status = \\"Low Risk\\" else: safety_status = \\"Very Low Risk\\" return safety_status"},{"question":"What is the most efficient and secure method to generate a random number within a specific range using the random module in Python, while also ensuring that the generated number is not repeated within a given session and the generated number must be a prime number? Provide a code snippet that demonstrates this method, including how you handle the prime number generation and checking.","solution":"import random from sympy import isprime def generate_unique_prime(min_val, max_val, seen_primes): Generates a random prime number within a specific range that has not been generated before. :param min_val: Minimum value of the range (inclusive) :param max_val: Maximum value of the range (inclusive) :param seen_primes: A set to track generated prime numbers to avoid repetition :return: A unique prime number if min_val > max_val: raise ValueError(\\"min_val should be less than or equal to max_val\\") attempts = 0 while attempts < 100: # Prevent infinite loop by limiting attempts num = random.randint(min_val, max_val) if isprime(num) and num not in seen_primes: seen_primes.add(num) return num attempts += 1 raise RuntimeError(\\"Unable to generate a unique prime number within the given range and conditions\\") # Example usage: seen_primes = set() prime = generate_unique_prime(10, 100, seen_primes) print(f\\"Generated prime: {prime}\\")"},{"question":"Write a Python script that reads a file named \\"example.txt\\", counts the occurrences of each word in the file, and writes the word and its count to a new file named \\"word_count.txt\\" if the word count is greater than 3.","solution":"def count_words(input_file, output_file): Reads a file named input_file, counts the occurrences of each word in the file, and writes the word and its count to output_file if the word count is greater than 3. from collections import Counter with open(input_file, 'r') as f: text = f.read() words = text.split() word_counts = Counter(words) with open(output_file, 'w') as f: for word, count in word_counts.items(): if count > 3: f.write(f\\"{word}: {count}n\\")"},{"question":"Write a Python function that takes a list of integers as its parameter and returns a new list with the same numbers but sorted in descending order. Additionally, the function should handle the case when the list is empty and return an empty list. Make sure to follow the guidelines for writing the docstring and code comments.","solution":"def sort_descending(nums): Returns a new list with the elements sorted in descending order. Parameters: nums (list): A list of integers. Returns: list: A new list with the integers sorted in descending order. # Sorting the list in descending order using the sorted function with reverse=True return sorted(nums, reverse=True)"},{"question":"Write some code that makes a list of prime numbers less than 100. Ensure that your code is as efficient as possible, explain your approach, and further, modify your code to determine and print if each prime number is part of the Fibonacci sequence.","solution":"def calculate_primes_up_to_100(): Calculate the list of prime numbers less than 100. limit = 100 sieve = [True] * limit sieve[0] = sieve[1] = False for start in range(2, int(limit ** 0.5) + 1): if sieve[start]: for multiple in range(start * start, limit, start): sieve[multiple] = False primes = [num for num, is_prime in enumerate(sieve) if is_prime] return primes def is_fibonacci_number(n, fibonacci_set): Check if a number \`n\` is a Fibonacci number using a set of precalculated Fibonacci numbers. return n in fibonacci_set def get_fibonacci_set_up_to_100(): a, b = 0, 1 fibonacci_set = set() while a < 100: fibonacci_set.add(a) a, b = b, a + b return fibonacci_set def primes_in_fibonacci(): primes = calculate_primes_up_to_100() fibonacci_set = get_fibonacci_set_up_to_100() prime_fibonacci_pairs = [(p, is_fibonacci_number(p, fibonacci_set)) for p in primes] return prime_fibonacci_pairs # Output the calculated primes and their Fibonacci status primes_fibonacci = primes_in_fibonacci()"},{"question":"Write a Python program that generates N random numbers as well as captures the time it takes to generate these numbers, with special interest in the algorithm's efficiency. Then, sort these numbers using an efficient sorting algorithm. Also assess the time efficiency of the sorting process.","solution":"import random import time def generate_random_numbers(n): start_time = time.time() random_numbers = [random.randint(1, 1000000) for _ in range(n)] end_time = time.time() generation_time = end_time - start_time return random_numbers, generation_time def sort_numbers(numbers): start_time = time.time() sorted_numbers = sorted(numbers) end_time = time.time() sorting_time = end_time - start_time return sorted_numbers, sorting_time"},{"question":"Formulate a Python code which executes the Bubble Sort algorithm to categorize in a descending manner, the subsequent structured data array that holds fruit names.","solution":"def bubble_sort_descending(arr): Performs a bubble sort on the input array to sort it in descending order. Args: arr (list): A list of strings to be sorted. Returns: list: The list sorted in descending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Develop a program that multiplies corresponding elements of two two-dimensional matrices of potentially non-square dimensions. If the matrices cannot be matched up because of incompatible dimensions, your program should return an error message.","solution":"def multiply_matrices(matrixA, matrixB): Multiplies corresponding elements of two two-dimensional matrices. Returns a new matrix containing the products. If the matrices are of incompatible dimensions, returns an error message. if len(matrixA) != len(matrixB) or any(len(rowA) != len(rowB) for rowA, rowB in zip(matrixA, matrixB)): return \\"Error: Matrices have incompatible dimensions\\" result_matrix = [] for rowA, rowB in zip(matrixA, matrixB): result_row = [a * b for a, b in zip(rowA, rowB)] result_matrix.append(result_row) return result_matrix"},{"question":"Design a Python function that identifies and returns all narcissistic numbers that are less than or equivalent to a given integer input. Additionally, the function should be able to handle negative numbers and non-integer inputs by converting them to positive integers and then performing the operation.","solution":"def is_narcissistic(number): Check if a number is a narcissistic number. digits = list(map(int, str(number))) power = len(digits) return number == sum(digit ** power for digit in digits) def find_narcissistic_numbers(upto): Returns a list of all narcissistic numbers up to and including 'upto'. If the input is not a positive integer, it is converted to positive integer. try: upto = abs(int(upto)) except (ValueError, TypeError): raise ValueError(\\"Input must be an integer or convert to an integer\\") return [num for num in range(1, upto + 1) if is_narcissistic(num)]"},{"question":"Swap the contents of two variables a and b without using a third variable. Now, consider a and b as not just integers but as objects that can hold any data type including integers, floats, strings, or lists, and their sizes can vary. Write a flexible Python function to swap their contents, and include error checking to ensure that the input types are valid. You may also assume that both variables, if they are lists, will always have the same length.","solution":"def swap_values(a, b): Swap the contents of two variables a and b without using a third variable. This function works for any data type including integers, floats, strings, or lists (assuming lists have the same length). Args: a: Any data type including integers, floats, strings, or lists. b: Any data type including integers, floats, strings, or lists. Returns: a, b: The swapped values of a and b. if type(a) != type(b): raise TypeError(\\"Both variables must be of the same type.\\") if isinstance(a, list) and len(a) != len(b): raise ValueError(\\"If variables are lists, they must have the same length.\\") a, b = b, a return a, b"},{"question":"Can you help me create a function that counts the number of vowels in a given string and checks if the count is even?","solution":"def count_vowels_and_check_even(s): Returns the number of vowels in the string \`s\` and checks if the count is even. Parameters: s (str): The input string. Returns: tuple: (vowel_count, is_even) where vowel_count is the number of vowels, and is_even is a boolean indicating if the count is even. vowels = 'aeiouAEIOU' vowel_count = sum(1 for char in s if char in vowels) is_even = vowel_count % 2 == 0 return vowel_count, is_even"},{"question":"Create an HTML form with an input field and a submit button. The form should submit data to a Python Flask app, which should in turn print out the submitted data to the console.","solution":"# Flask Application: app.py from flask import Flask, request app = Flask(__name__) @app.route('/') def index(): return ''' <form method=\\"post\\" action=\\"/submit\\"> <input type=\\"text\\" name=\\"data\\" placeholder=\\"Enter some data\\" /> <button type=\\"submit\\">Submit</button> </form> ''' @app.route('/submit', methods=['POST']) def submit(): data = request.form['data'] print(data) return f\\"Data received: {data}\\" if __name__ == '__main__': app.run(debug=True)"},{"question":"Create a web crawler that can periodically fetch data from a given URL and detect any changes in its HTML structure or content. If any changes are detected, generate an alert and send it to the user's email associated with the account. Also, ensure the crawler handles errors and retries fetching the data upon failure.","solution":"import requests import hashlib import smtplib from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart import time class WebCrawler: def __init__(self, url, email, interval=60): self.url = url self.email = email self.interval = interval self.last_hash = '' def get_url_content(self): try: response = requests.get(self.url) response.raise_for_status() return response.content except requests.RequestException as e: print(f\\"Error fetching URL data: {e}\\") return None def send_email_alert(self, changes): # Email configuration smtp_server = 'smtp.gmail.com' smtp_port = 587 sender_email = 'your_email@gmail.com' sender_password = 'your_email_password' subject = \\"Website Content Changed Alert\\" body = f\\"Changes detected on {self.url}:nn{changes}\\" msg = MIMEMultipart() msg['From'] = sender_email msg['To'] = self.email msg['Subject'] = subject msg.attach(MIMEText(body, 'plain')) try: server = smtplib.SMTP(smtp_server, smtp_port) server.starttls() server.login(sender_email, sender_password) text = msg.as_string() server.sendmail(sender_email, self.email, text) server.quit() except Exception as e: print(f\\"Failed to send email: {e}\\") def check_for_changes(self): content = self.get_url_content() if content: current_hash = hashlib.md5(content).hexdigest() if current_hash != self.last_hash: if self.last_hash: self.send_email_alert(\\"Website content has changed.\\") self.last_hash = current_hash def start(self): while True: self.check_for_changes() time.sleep(self.interval) # Example usage: # crawler = WebCrawler(\\"http://example.com\\", \\"user@example.com\\", interval=60) # crawler.start()"},{"question":"Create an algorithm that sorts an array using the bubble sort technique.","solution":"def bubble_sort(arr): Sorts an array using the bubble sort technique. arr: list of elements to be sorted. n = len(arr) for i in range(n): # Last i elements are already in place for j in range(0, n - i - 1): # Swap if the element found is greater than the next element if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"Develop an optimized algorithm that computes the union of two disjointed list of integers. Additionally, implement an efficient sorting method in your algorithm without using built-in sorting functions.","solution":"def union_and_sort(list1, list2): Returns the union of two disjoint lists of integers and sorts them without using built-in sorting functions. def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 # Finding the mid of the array L = arr[:mid] # Dividing the elements into 2 halves R = arr[mid:] merge_sort(L) # Sorting the first half merge_sort(R) # Sorting the second half i = j = k = 0 # Copy data to temp arrays L[] and R[] while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 # Checking if any element was left while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 # Union of two disjoint lists union_list = list1 + list2 # Sorting the union list using merge sort merge_sort(union_list) return union_list"},{"question":"Implement a modified version of the insertion sort algorithm that allows for sorting in both ascending and descending order. Additionally, implement a feature to handle duplicate elements in the list. To accomplish this, you will first need to modify the comparison function to check for both less than and greater than conditions. Then, for handling duplicate elements, extend the function to move these elements next to the equal elements. For example, for a list [8, 2, 7, 3, 8, 4, 7, 1] in ascending order, the output should be [1, 2, 3, 4, 7, 7, 8, 8] and for descending order, the output should be [8, 8, 7, 7, 4, 3, 2, 1]. Test your implementation with different data points to ensure its correctness.","solution":"def insertion_sort(arr, ascending=True): Perform insertion sort on the provided list. Parameters: arr (list): The list to be sorted. ascending (bool): Whether to sort in ascending (True) or descending (False) order. Returns: list: Sorted list. for i in range(1, len(arr)): key = arr[i] j = i - 1 if ascending: while j >= 0 and arr[j] > key: arr[j + 1] = arr[j] j -= 1 else: while j >= 0 and arr[j] < key: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Generate a python code to remove all the occurrences of the element x from a list y, while maintaining the original order of the remaining elements in the list. The solution should have a time complexity of O(n) and should not use any built-in functions or libraries to achieve the result.","solution":"def remove_occurrences(y, x): Removes all occurrences of x from list y, maintaining the original order of the remaining elements. Args: y : list List from which the elements need to be removed. x : element Element to be removed from the list. Returns: list A new list with all occurrences of x removed. result = [] for element in y: if element != x: result.append(element) return result"},{"question":"Design a Python function that accepts two strings as an input: a main string and a search string. Return the frequency of the occurrence of the search string within the main string, considering case sensitivity. Additionally, provide a piece of erroneous code and fix its bugs before writing your own function.","solution":"def count_substring_occurrences(main_string, search_string): Returns the frequency of the occurrence of the search string within the main string, considering case sensitivity. return main_string.count(search_string)"},{"question":"Develop an algorithm to implement an in-order tree traversal using an iterative method instead of recursion, also ensure that your algorithm works for a large binary tree (up to 10^5 nodes). Furthermore, your solution should use space complexity less than O(n).","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def iterative_in_order_traversal(root): Perform in-order traversal of a binary tree iteratively. :param root: Root node of the binary tree. :return: List of values in in-order. result = [] stack = [] current = root while current is not None or stack: while current is not None: stack.append(current) current = current.left current = stack.pop() result.append(current.value) current = current.right return result"},{"question":"Edit the following code to implement set intersection function using loops and recursion, instead of using the built-in \\"intersection\\" method. Do not use built-in Python set operations. Make sure your loops and recursive function handle large set sizes as well.","solution":"def set_intersection(set1, set2): Returns the intersection of two sets using loops and recursion. def intersection_recursive(lst1, lst2, start): if start == len(lst1): return [] if lst1[start] in lst2: return [lst1[start]] + intersection_recursive(lst1, lst2, start + 1) return intersection_recursive(lst1, lst2, start + 1) list_set1 = list(set1) list_set2 = list(set2) return set(intersection_recursive(list_set1, list_set2, 0))"},{"question":"Create a function in Python to extract the substring from a string after a specific character, but exclude the character itself, any whitespace following it, and any subsequent punctuation marks. The function should also handle cases where the specified character does not exist in the string.","solution":"import re def extract_substring_after_char(s, char): Extracts substring from \`s\` after the first occurrence of \`char\`. Excludes the character itself, any whitespace following it, and any subsequent punctuation marks. If the character does not exist in the string, returns an empty string. Parameters: s (str): The input string. char (str): The character after which the substring should be extracted. Returns: str: The extracted substring or an empty string if the character does not exist. # Find the first occurrence of the character index = s.find(char) # If character is not found, return an empty string if index == -1: return '' # Extract substring from after the character substring = s[index + 1:] # Remove leading whitespace and any subsequent punctuation marks result = re.sub(r'^[s,.?!:;\\"]*', '', substring) return result"},{"question":"Write a python script that can get cpu and memory values using psutil and add functionality to log this output to a file. Additionally, include exception handling in case the psutil module is not installed.","solution":"import psutil import logging from datetime import datetime # Set up logging logging.basicConfig(filename='system_stats.log', level=logging.INFO, format='%(asctime)s - %(message)s') def log_system_stats(): Logs CPU and memory usage to a file. try: # Get CPU and memory stats cpu_usage = psutil.cpu_percent(interval=1) memory_info = psutil.virtual_memory() # Log the stats logging.info(f'CPU Usage: {cpu_usage}%') logging.info(f'Memory Usage: {memory_info.percent}% - Total: {memory_info.total} - Available: {memory_info.available}') except ModuleNotFoundError: logging.error('psutil module is not installed.') # Test execution (this would usually not be in production code) if __name__ == \\"__main__\\": log_system_stats()"},{"question":"Given two lists in Python, one of strings and one of integers, write a function that creates a list of tuples. Each tuple should consist of an element from the list of strings and the summation of its corresponding element and the previous element in the list of integers (excluding the first element). For the first tuple, use the first integer as it is, without any summation.","solution":"def create_tuples(strings, nums): Given a list of strings and a list of integers, returns a list of tuples. Each tuple consists of an element from the list of strings and the summation of its corresponding element and the previous element in the list of integers. The first tuple uses the first integer as is, without any summation. if len(strings) != len(nums): raise ValueError(\\"The lists must have the same length.\\") result = [] for i in range(len(strings)): if i == 0: result.append((strings[i], nums[i])) else: result.append((strings[i], nums[i] + nums[i-1])) return result"},{"question":"Convert the given string of HTML into a DOM tree, using recursion.","solution":"from html.parser import HTMLParser class Node: def __init__(self, tag_name, attributes=None, children=None): self.tag_name = tag_name self.attributes = attributes if attributes else {} self.children = children if children else [] def __repr__(self, level=0): ret = \\"t\\" * level + f\\"{self.tag_name}: {self.attributes}\\" + \\"n\\" for child in self.children: ret += child.__repr__(level + 1) return ret class MyHTMLParser(HTMLParser): def __init__(self): super().__init__() self.stack = [] self.root = None def handle_starttag(self, tag, attrs): attributes = dict(attrs) node = Node(tag, attributes) if self.stack: self.stack[-1].children.append(node) self.stack.append(node) if not self.root: self.root = node def handle_endtag(self, tag): if self.stack: self.stack.pop() def handle_data(self, data): if self.stack: data_node = Node(data.strip()) self.stack[-1].children.append(data_node) def string_to_dom_tree(html_str): parser = MyHTMLParser() parser.feed(html_str) return parser.root"},{"question":"Write a Python function that can flip the case of each character in a given string. Moreover, the function should be capable of handling any special characters or numbers within the string without altering them. Finally, provide an alternative solution using list comprehension that achieves the same result.","solution":"def flip_case(s): Flips the case of each character in the given string. Parameters: s (str): The string to flip case for. Returns: str: The string with flipped case characters. return s.swapcase() def flip_case_list_comprehension(s): Flips the case of each character in the given string using list comprehension. Parameters: s (str): The string to flip case for. Returns: str: The string with flipped case characters. return ''.join([char.lower() if char.isupper() else char.upper() for char in s])"},{"question":"How do you implement depth-first search in Python for a non-binary graph represented with adjacency lists that also handles cycles? Additionally, implement functionality to allow the search to start from any node.","solution":"def depth_first_search(graph, start, visited=None): Depth First Search implementation for a non-binary graph. :param graph: Dictionary representing the adjacency list of the graph. :param start: Node from which the DFS starts. :param visited: Set to keep track of visited nodes. :return: List of nodes in the order they were visited. if visited is None: visited = set() visited.add(start) result = [start] for neighbor in graph.get(start, []): if neighbor not in visited: result.extend(depth_first_search(graph, neighbor, visited)) return result"},{"question":"Write a code that drops all the even numbers in the list and returns the sum of the remaining odd numbers.","solution":"def sum_of_odd_numbers(numbers): Returns the sum of odd numbers in the list. return sum(num for num in numbers if num % 2 != 0)"},{"question":"Can you write a Python program that generates and prints a multiplication table for a specific number up to a given limit?","solution":"def generate_multiplication_table(number, limit): Generates and prints a multiplication table for a specific number up to a given limit. Parameters: number (int): The number for which to generate the multiplication table. limit (int): The limit up to which the multiplication table should be generated. return [f\\"{number} x {i} = {number * i}\\" for i in range(1, limit + 1)]"},{"question":"Write a python code to clone a list along with its nested elements. Consider a scenario where the list has multiple datatypes including integer, string, float and a nested list. Your code should be able to handle this complexity and perfectly duplicate the given list. As a twist, you should accomplish this without using any built-in functions or libraries for copying or cloning.","solution":"def clone_list(original_list): Recursively clones a list along with its nested elements. Handles multiple datatypes including integers, strings, floats, and nested lists. cloned_list = [] for element in original_list: if isinstance(element, list): cloned_list.append(clone_list(element)) else: cloned_list.append(element) return cloned_list"},{"question":"Create a nested dictionary with the given keys and map them to respective values, where keys and values are provided in two separate lists of tuples. Additionally, implement function to handle inconsistent lengths of keys or values. Ensure the function returns a well-described error message.","solution":"def create_nested_dict(keys, values): Creates a nested dictionary using the provided keys and values. Returns a descriptive error message if the lengths of the keys and values do not match. :param keys: List of tuples representing the keys for the nested dictionary. :param values: List of tuples representing the values for the nested dictionary. :return: Nested dictionary or error message string. if len(keys) != len(values): return \\"Error: The lengths of the keys and values lists do not match.\\" nested_dict = {} for key_tuple, value_tuple in zip(keys, values): d = nested_dict for key in key_tuple[:-1]: if key not in d: d[key] = {} d = d[key] d[key_tuple[-1]] = value_tuple return nested_dict"},{"question":"Adjust the following code to properly add a new item to the end of a linked list in python. Remember, a linked list does not have a fixed size and does not allow direct access to the elements. Your solution should manage the initialization of the list, the insertion of elements, and the traversal to verify correct insertion.","solution":"class Node: def __init__(self, data=None): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def add_to_end(self, data): new_node = Node(data) if self.head is None: self.head = new_node else: last = self.head while last.next: last = last.next last.next = new_node def to_list(self): result = [] current = self.head while current: result.append(current.data) current = current.next return result"},{"question":"Develop a function that detects whether distant components in an array are identical, devoid of using any pre-established procedures or methods. The function should exclusively employ fundamental programming constructs.","solution":"def distant_components_identical(array): Detects whether distant components in an array are identical. n = len(array) if n == 0: return False for i in range(n): for j in range(i + 2, n): if array[i] == array[j]: return True return False"},{"question":"Create a Python program that takes two strings as input and finds the length of their longest common subsequence.","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence of str1 and str2. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Write a Python program that prompts the user to input a list of integers, then sorts the list using the bubble sort algorithm and prints the sorted list. The program should handle cases where the user enters a non-integer value or an empty list.","solution":"def bubble_sort(arr): Sorts the input list using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr def sort_integers(): Prompts the user to input a list of integers, sorts the list using bubble sort, and prints the sorted list. Handles cases where input is non-integer or list is empty. try: user_input = input(\\"Enter a list of integers separated by spaces: \\") if not user_input.strip(): print(\\"Input list is empty.\\") return [] int_list = list(map(int, user_input.split())) sorted_list = bubble_sort(int_list) print(\\"Sorted list:\\", sorted_list) return sorted_list except ValueError: print(\\"Invalid input. Please enter integers only.\\") return []"},{"question":"Develop a Python function that calculates the memory usage in bytes of a provided tuple data structure. Additionally, your function should also calculate and return the memory usage of each element inside the tuple separately. You should consider the case when the tuple can contain elements of different types such as integers, floating point numbers, strings and lists. Take into account the object overhead and memory references.","solution":"import sys def calculate_memory_usage(tup): Returns the total memory usage of the tuple and individual usage of each element within the tuple. Parameters: tup (tuple): The input tuple containing various types of elements. Returns: tuple: (total_memory_usage, list_individual_memory_usage) total_memory_usage = sys.getsizeof(tup) individual_memory_usage = [sys.getsizeof(element) for element in tup] return total_memory_usage, individual_memory_usage"},{"question":"Write a python script that adds 3 to each even number in a list and then multiplies the result by 2. Only return the modified list if the sum of all elements in the original list is divisible by 5.","solution":"def modify_list(lst): Adds 3 to each even number in the list and then multiplies the result by 2. Returns the modified list only if the sum of all elements in the original list is divisible by 5. if sum(lst) % 5 != 0: return lst modified_lst = [] for num in lst: if num % 2 == 0: modified_lst.append((num + 3) * 2) else: modified_lst.append(num) return modified_lst"},{"question":"Implement a function to convert a decimal number to its binary representation using only bitwise operators. The function should have a time complexity of O(log n) and a space complexity of O(1).","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation using bitwise operators. if n == 0: return \\"0\\" binary_rep = \\"\\" while n > 0: bit = n & 1 binary_rep = str(bit) + binary_rep n = n >> 1 return binary_rep"},{"question":"Implement a function that takes in a list of integers and a target integer. The function should return the index of the target integer in the list, if it is present. If the target integer appears more than once, the function should return the index of the last occurrence. If the target integer is not present in the list, the function should return -1.","solution":"def find_last_index(numbers, target): Returns the index of the last occurrence of target in numbers. If target is not in numbers, returns -1. last_index = -1 for i in range(len(numbers)): if numbers[i] == target: last_index = i return last_index"},{"question":"In Python, write a program to remove all whitespaces from a given string, including spaces, tabs, newlines, and any other whitespace characters. You must not use any built-in functions or methods that directly remove whitespaces, such as \`strip()\`, \`replace()\`, or \`join()\`. You can only use basic string manipulation techniques to achieve the desired result.","solution":"def remove_whitespaces(input_string): Removes all whitespaces from the given string, including spaces, tabs, newlines, and any other whitespace characters. Parameters: input_string (str): The string from which to remove whitespaces. Returns: str: The string with all whitespaces removed. result = '' for char in input_string: if not char.isspace(): result += char return result"},{"question":"Develop a recursive Python function that sorts a given list of complex numbers in ascending order based on their magnitude.","solution":"def merge_sort_complex(nums): Sorts a list of complex numbers based on their magnitude using merge sort. if len(nums) <= 1: return nums def merge(left, right): sorted_list = [] while left and right: if abs(left[0]) <= abs(right[0]): sorted_list.append(left.pop(0)) else: sorted_list.append(right.pop(0)) return sorted_list + left + right mid = len(nums) // 2 left_half = merge_sort_complex(nums[:mid]) right_half = merge_sort_complex(nums[mid:]) return merge(left_half, right_half)"},{"question":"Generate code for a function which takes a list of integers and returns the second largest item.","solution":"def second_largest(nums): Returns the second largest number in the list. if len(nums) < 2: return None first = second = float('-inf') # Initialize the largest and the second largest for num in nums: if num > first: second = first first = num elif num > second and num < first: second = num return second if second != float('-inf') else None"},{"question":"How can I write a Python program to count the occurrences of each element in a given list and then print the elements along with their counts in descending order of the counts?","solution":"from collections import Counter def count_elements(elements): Returns a list of tuples where each tuple contains an element and its count, sorted in descending order of counts. counter = Counter(elements) return sorted(counter.items(), key=lambda x: x[1], reverse=True)"},{"question":"Generate a Python function that takes a list of strings and returns a dictionary mapping each string in the list to its length.","solution":"def map_strings_to_lengths(strings): Returns a dictionary mapping each string in the list to its length. Parameters: strings (list): A list of strings. Returns: dict: A dictionary where the keys are strings from the input list and values are their respective lengths. return {string: len(string) for string in strings}"},{"question":"Given an array of float numbers, create a function which takes this array as an attribute and crunches it to produce a single precision floating point number. This function should be designed to be multithreaded. Evaluate its time complexity and discuss its efficiency when dealing with extremely large arrays of float numbers.","solution":"import concurrent.futures import numpy as np def crunch_array_to_single_float(array): Crunces the input array of float numbers to produce a single precision floating point number. Uses multithreading to speed up the processing of large arrays. Args: array (list or numpy array): The input array of float numbers Returns: float32: The crunched single precision floating point number def partial_sum(start_idx, end_idx, array): return np.sum(array[start_idx:end_idx]) num_threads = 4 # You can adjust the number of threads based on your system chunk_size = len(array) // num_threads futures = [] with concurrent.futures.ThreadPoolExecutor(max_workers=num_threads) as executor: for i in range(num_threads): start_idx = i * chunk_size end_idx = (i + 1) * chunk_size if i != num_threads - 1 else len(array) futures.append(executor.submit(partial_sum, start_idx, end_idx, array)) results = [future.result() for future in futures] total_sum = np.sum(results) return np.float32(total_sum)"},{"question":"Given two non-empty lists of integers, merge these two lists into one list in ascending order, avoiding duplicates and without using any built-in Python list functions or additional libraries.","solution":"def merge_and_sort_lists(list1, list2): Merges two lists into one sorted list without duplicates. merged_list = list1 + list2 unique_list = [] for item in merged_list: if item not in unique_list: unique_list.append(item) # Sort the unique_list using bubble sort n = len(unique_list) for i in range(n): for j in range(0, n-i-1): if unique_list[j] > unique_list[j+1]: unique_list[j], unique_list[j+1] = unique_list[j+1], unique_list[j] return unique_list"},{"question":"Write a function that splits a large list into smaller sub-lists of a designated size. Furthermore, implement a check mechanism to ensure the sublists maintains a balanced distribution of elements from the original list (i.e., if the list is split into n sublists, any sublist should not have more than 2*(len(list)/n) elements).","solution":"def split_list(lst, sublist_size): Splits a large list into smaller sub-lists of a designated size. Args: lst (list): The large list to split. sublist_size (int): The designated size for each sublist. Returns: list of lists: The list containing the smaller sub-lists. if sublist_size <= 0: raise ValueError(\\"sublist_size must be greater than 0\\") # Split the list split_lst = [lst[i:i + sublist_size] for i in range(0, len(lst), sublist_size)] # Verify the balanced distribution n = len(split_lst) maximum_allowed_size = 2 * (len(lst) // n) for sublist in split_lst: if len(sublist) > maximum_allowed_size: raise ValueError(\\"Sublist size exceeds the balanced distribution criteria.\\") return split_lst"},{"question":"Create a GpsQgsCreateLocationCustomTarget tool in Python that enables the user to input a custom location using GPS coordinates and a name for the location. This tool should be capable of adding this custom location as a target to a specific VR mission within the designated geospatial area.","solution":"class GpsQgsCreateLocationCustomTarget: def __init__(self): self.targets = [] def add_custom_location(self, lat, lon, name, mission_id, geospatial_area): Adds a custom location as a target to a specific VR mission within the specified geospatial area. Args: lat (float): Latitude of the custom location. lon (float): Longitude of the custom location. name (str): Name for the custom location. mission_id (int): ID of the VR mission to add the target to. geospatial_area (dict): Dictionary with 'north', 'south', 'east', 'west' boundaries defining the geospatial area. Returns: str: Confirmation message or error message. if not self._is_within_bounds(lat, lon, geospatial_area): return \\"Custom location is out of the designated geospatial area.\\" target = { 'lat': lat, 'lon': lon, 'name': name, 'mission_id': mission_id } self.targets.append(target) return f\\"Custom location '{name}' added to mission {mission_id}.\\" def _is_within_bounds(self, lat, lon, geospatial_area): Checks if the given latitude and longitude are within the specified geospatial area. Args: lat (float): Latitude to check. lon (float): Longitude to check. geospatial_area (dict): Dictionary with 'north', 'south', 'east', 'west' boundaries. Returns: bool: True if within bounds, False otherwise. return (geospatial_area['south'] <= lat <= geospatial_area['north'] and geospatial_area['west'] <= lon <= geospatial_area['east'])"},{"question":"Please write me a Python function to compare two strings and return any differences in characters and their locations between them. And then, please wrap that functionality into a class method.","solution":"class StringComparator: @staticmethod def compare_strings(str1, str2): Compares two strings and returns any differences in characters and their locations. Parameters: str1 (str): The first string to compare. str2 (str): The second string to compare. Returns: list of tuples: Each tuple contains the index and the differing characters from both strings. max_len = max(len(str1), len(str2)) differences = [] for i in range(max_len): char1 = str1[i] if i < len(str1) else '' char2 = str2[i] if i < len(str2) else '' if char1 != char2: differences.append((i, char1, char2)) return differences"},{"question":"Can you create a Python script that precisely formats a given directory path to display its size in a human-readable format, specifically in kilobytes (K), megabytes (M), or gigabytes (G) based on the directory's total size? The path to the directory for which the size needs to be determined will be \\"/volume1/abc\\".","solution":"import os def get_directory_size(path): Calculate the total size of files in a directory. :param path: The directory path :return: Total size in bytes total_size = 0 for dirpath, dirnames, filenames in os.walk(path): for filename in filenames: filepath = os.path.join(dirpath, filename) total_size += os.path.getsize(filepath) return total_size def human_readable_size(size): Convert the size from bytes to a human-readable format (K, M, G). :param size: Size in bytes :return: Size in a human-readable string for unit in ['B', 'K', 'M', 'G', 'T', 'P']: if size < 1024: return f\\"{size:.2f}{unit}\\" size /= 1024 def format_directory_size(path): Format the size of the given directory to a human-readable format. :param path: The directory path :return: Formatted size in a string total_size = get_directory_size(path) return human_readable_size(total_size)"},{"question":"Design a safety-first stack implementation that not only restricts direct access to the underlying array, but also throws an exception if the user attempts to pop() an empty stack. Moreover, add a functionality that allows the stack to grow and shrink dynamically as elements are added and removed.","solution":"class EmptyStackError(Exception): pass class SafetyFirstStack: def __init__(self): self._stack = [] def push(self, item): self._stack.append(item) def pop(self): if self.is_empty(): raise EmptyStackError(\\"Cannot pop from an empty stack.\\") return self._stack.pop() def peek(self): if self.is_empty(): raise EmptyStackError(\\"Cannot peek into an empty stack.\\") return self._stack[-1] def is_empty(self): return len(self._stack) == 0 def size(self): return len(self._stack)"},{"question":"You need to write a function to find the index of a value in a 2D array. The 2D array can have duplicates and can contain both positive and negative integers. The function should return the index of the first occurrence of the value in the 2D array. If the value is not found in the 2D array, the function should return [-1, -1].","solution":"def find_value_index(matrix, value): Returns the index of the first occurrence of the value in the 2D array. If the value is not found, returns [-1, -1]. for i in range(len(matrix)): for j in range(len(matrix[i])): if matrix[i][j] == value: return [i, j] return [-1, -1]"},{"question":"We need to remove duplicates from a sequence in Python while keeping the order of elements.","solution":"def remove_duplicates(sequence): Removes duplicates from the sequence while preserving the original order. Parameters: sequence (iterable): The input sequence from which to remove duplicates. Returns: list: A list with duplicates removed, preserving the original order. seen = set() result = [] for item in sequence: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Given an array of decimal numbers, implement a function to convert each decimal number into its octal representation. After the conversion, return a list of strings where each string is the octal representation of the corresponding decimal number in the input array.","solution":"def convert_to_octal(numbers): Given an array of decimal numbers, convert each decimal number into its octal representation. Parameters: numbers (list of int): List of decimal numbers. Returns: list of str: List of strings where each string is the octal representation of the corresponding decimal number. return [oct(num)[2:] for num in numbers]"},{"question":"In Python, modify the following function so that it can accept the optional keyword argument \`count\` with a default value of 1. The function should print the multiplied result of the parameter \`x\` by the \`multiplier\` parameter, \`count\` times. As an additional challenge, include code to check if \`count\` is an integer and if \`multiplier\` is a numeric value, printing an error message and exiting the program if they are not.","solution":"def multiply_and_print(x, multiplier, count=1): Multiplies x by the multiplier and prints it 'count' times. :param x: The value to be multiplied. :param multiplier: The numeric multiplier. :param count: The number of times to print the result. if not isinstance(count, int): print(\\"Error: 'count' must be an integer.\\") return if not isinstance(multiplier, (int, float)): print(\\"Error: 'multiplier' must be a numeric value.\\") return result = x * multiplier for _ in range(count): print(result)"},{"question":"Given a list of words, how would you write a Python function to categorize each word based on its length? You should create a function \`categorize_words\` that groups words from the input list into three categories: 'short', 'medium', and 'long'. Words with lengths less than 4 are considered 'short'; words with lengths between 4 and 7 (inclusive) are 'medium'; and words with lengths greater than 7 are 'long'. The function should return a dictionary where the keys are the categories ('short', 'medium', 'long') and the values are lists of words that fall into each category.","solution":"def categorize_words(words): Categorizes words based on their lengths: - 'short': length < 4 - 'medium': 4 <= length <= 7 - 'long': length > 7 Args: words (list): A list of words to categorize. Returns: dict: A dictionary with keys 'short', 'medium', 'long' and values as lists of words that fall into each category. categorized = {'short': [], 'medium': [], 'long': []} for word in words: if len(word) < 4: categorized['short'].append(word) elif 4 <= len(word) <= 7: categorized['medium'].append(word) else: categorized['long'].append(word) return categorized"},{"question":"create a function that called organize zero, the function will receive an array parameter of integer and move all of the zero values to the end of the array while maintaining the relative order of the non-zero elements. If the function receive empty array the function will return an empty array too","solution":"def organize_zero(arr): Moves all zeros in the array to the end while maintaining the relative order of the non-zero elements. Parameters: arr (list): List of integers. Returns: list: List with zeros moved to the end. if not arr: return arr non_zero_elements = [x for x in arr if x != 0] zero_count = len(arr) - len(non_zero_elements) return non_zero_elements + [0] * zero_count"},{"question":"In Python, write a function to print out a sequence of numbers from 1 to 100. If the number is divisible by 3, print 'Fizz' instead. If the number is divisible by 5, print 'Buzz' instead. If the number is divisible by both 3 and 5, print 'FizzBuzz' instead. The sequence should be printed in reverse order starting from 100. Additionally, the function should return the count of 'Fizz', 'Buzz', and 'FizzBuzz' occurrences separately.","solution":"def fizz_buzz_reverse(): Prints the numbers from 100 to 1, replacing those divisible by 3 with 'Fizz', by 5 with 'Buzz', and by both with 'FizzBuzz'. Returns a tuple with the count of 'Fizz', 'Buzz', and 'FizzBuzz' occurrences respectively. fizz_count = 0 buzz_count = 0 fizzbuzz_count = 0 for num in range(100, 0, -1): if num % 3 == 0 and num % 5 == 0: print(\\"FizzBuzz\\") fizzbuzz_count += 1 elif num % 3 == 0: print(\\"Fizz\\") fizz_count += 1 elif num % 5 == 0: print(\\"Buzz\\") buzz_count += 1 else: print(num) return fizz_count, buzz_count, fizzbuzz_count"},{"question":"Write a function that converts a list of 64-bit numbers in a codebase that uses little-endian Byte Order, to a corresponding list of decimal strings for visual presentation. Function needs to also handle invalid 64-bit input and return an appropriate exception. Include a test function to check the correctness of your implementation.","solution":"def convert_little_endian_to_decimal(hex_list): Convert a list of 64-bit numbers in little-endian byte order to a corresponding list of decimal strings for visual presentation. Args: hex_list (list): List of 64-bit hexadecimal strings in little-endian byte order. Returns: list: List of decimal string representations of the given 64-bit numbers. Raises: ValueError: If any element in the list is not a valid 64-bit hexadecimal string. decimal_list = [] for hex_string in hex_list: try: # Ensure that the hex string has a valid length if len(hex_string) != 16: raise ValueError(f\\"Invalid 64-bit hexadecimal input: '{hex_string}'\\") # Convert to bytes, then int byte_array = bytes.fromhex(hex_string) byte_array = byte_array[::-1] # Reverse to handle little endian decimal_value = int.from_bytes(byte_array, byteorder='big', signed=False) decimal_list.append(str(decimal_value)) except ValueError as ve: raise ValueError(f\\"Invalid 64-bit hexadecimal input: '{hex_string}'\\") from ve return decimal_list"},{"question":"Write a program in Python that not only determines if a given string is a palindrome or not, but also calculates and displays the 'palindromic score' of the string. The 'palindromic score' is defined as the minimum number of character replacements needed to turn the given string into a palindrome. If a string is already a palindrome, the score is 0.","solution":"def is_palindrome(s): Determines if the given string s is a palindrome. return s == s[::-1] def palindromic_score(s): Calculates the palindromic score of the given string s. The palindromic score is the minimum number of character replacements needed to turn the given string into a palindrome. n = len(s) score = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: score += 1 return score"},{"question":"Can you explain what the O(1) space complexity of a function means in Python? Suppose a function can only use a fixed amount of space or memory, and whether the input size increases or decreases does not affect it. This condition is where an algorithm's space complexity is said to be constant, or O(1). To illustrate, create a very large list of numbers. Then write and test a function that flips the bits of binary numbers in the list, but use a space complexity of O(1). Please provide the function with a comment explaining the space complexity.","solution":"def flip_bits(num): Returns the bitwise NOT (~) of the given number. This operation is performed in O(1) space complexity because it does not use any extra space that scales with the size of the input. return ~num def flip_bits_in_list(input_list): Takes a list of integers, flips the bits of each integer in place, and returns the modified list. This function has O(1) space complexity as it operates directly on the input list without using any additional space. for i in range(len(input_list)): input_list[i] = flip_bits(input_list[i]) return input_list"},{"question":"Increase the complexity of this coding test requirement: Effective management of brackets is a critical aspect. In addition to checking for balanced nested brackets, your code must ensure a unique constraint: the number of characters between each opening '(' and closing ')' bracket should not exceed ten. Your code should accommodate for this while progressively checking for balanced nested brackets.","solution":"def is_balanced_and_within_limit(s): Check if the brackets in the string are balanced and the number of characters between each pair of brackets does not exceed ten. stack = [] for i, char in enumerate(s): if char == '(': stack.append(i) elif char == ')': if not stack: return False open_index = stack.pop() if i - open_index > 11: # 10 characters in between means an overall distance of 12 return False return len(stack) == 0"},{"question":"Create a Python function that accepts two lists as input and returns a new list with the element-wise product of the input lists.","solution":"def elementwise_product(list1, list2): Returns a new list containing the element-wise product of the two input lists. Args: list1: A list of numbers. list2: A list of numbers. Returns: A list containing the products of the corresponding elements of list1 and list2. Raises: ValueError: If the input lists are not of the same length. if len(list1) != len(list2): raise ValueError(\\"Both input lists must have the same length.\\") return [a * b for a, b in zip(list1, list2)]"},{"question":"Implement a python program that uses binary search to find an element in a sorted list. To raise the complexity, your program should also be capable of handling duplicate elements intelligently, i.e., it should return the first occurrence of the searched element in the list.","solution":"def binary_search_first_occurrence(arr, x): Returns the index of the first occurrence of x in arr. If x is not in arr, returns -1. :param arr: List of sorted elements. :param x: Element to search for. :return: Index of the first occurrence of x. left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == x: result = mid right = mid - 1 # Continue searching to the left elif arr[mid] < x: left = mid + 1 else: right = mid - 1 return result"},{"question":"Develop a function to find a specific number n in a large sorted array and return its positions. If the number occurs multiple times, return all positions. Also, manage the situation where the number doesn't exist in the array.","solution":"def find_positions(arr, n): Returns a list of positions where number n is found in the large sorted array arr. If n is not found, returns an empty list. positions = [] for i, num in enumerate(arr): if num == n: positions.append(i) return positions"},{"question":"Write a Python function that fetches the last 5 elements of a given list in reverse order without modifying the original list. If the list is shorter than 5 elements, the function should return the reversed list in its entirety. Handle potential errors and edge cases within the function by providing explanatory error messages.","solution":"def fetch_last_5_elements_reversed(lst): Returns the last 5 elements of the given list in reverse order without modifying the original list. If the list has fewer than 5 elements, returns the list in reverse order. Parameters: lst (list): The input list. Returns: list: The reversed list of the last 5 elements or the entire list if it has fewer than 5 elements. if not isinstance(lst, list): raise ValueError(\\"Input should be a list.\\") return lst[-5:][::-1]"},{"question":"Given two lists named 'nums1' and 'nums2' containing integers, write a Python function that creates a new list. This list should consist of the maximum value from 'nums1' and the minimum value from 'nums2'. If either list is empty, the function should return None. If the lists contain duplicates, both should be considered (though only one instance of each duplicate will be relevant for min/max calculations).","solution":"def max_min_lists(nums1, nums2): Creates a new list consisting of the maximum value from nums1 and the minimum value from nums2. If either list is empty, returns None. if not nums1 or not nums2: return None max_val = max(nums1) min_val = min(nums2) return [max_val, min_val]"},{"question":"Write a Python function that prints out a right-angled triangle composed of the '*' character, where the number of rows the triangle has can be specified as an argument. Additionally, include a boolean argument to allow for the triangle to be printed either right-aligned or left-aligned.","solution":"def print_triangle(rows, right_aligned=True): Prints a right-angled triangle composed of '*' character. :param rows: Number of rows the triangle should have. :param right_aligned: Boolean flag to determine if the triangle is right-aligned or left-aligned. for i in range(1, rows + 1): if right_aligned: print(' ' * (rows - i) + '*' * i) else: print('*' * i)"},{"question":"Design a Python function enclosed within a class that identifies prime numbers from multiple sets given as input. It should work on an array of number sets. Also, consider including unit tests to substantiate the accuracy of your function.","solution":"class PrimeIdentifier: @staticmethod def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def identify_primes(self, array_of_number_sets): result = [] for number_set in array_of_number_sets: primes = [num for num in number_set if self.is_prime(num)] result.append(primes) return result"},{"question":"Given a sorted list of numbers, write a Python function to search for a specific target element. However, you are not allowed to use the built-in binary search function or any built-in function that directly solves the problem. You have to implement your own binary search algorithm.","solution":"def binary_search(arr, target): Performs a binary search for the target in a sorted list. Parameters: arr (list): A sorted list of numbers. target (int): The target element to search for. Returns: int: The index of the target element if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a short snippet of python code that takes a string and reverses it.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Given a list of non-negative integers, write a Python program to find the second largest unique number from the list. The list will have at least two distinct numbers.","solution":"def second_largest_unique(numbers): Returns the second largest unique number from a list of non-negative integers. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: raise ValueError(\\"The list must contain at least two distinct numbers.\\") unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Write a code that will check if a given string is a palindrome or not without using extra space. The code should ignore case sensitivity. Additionally, the code should only use recursion for the palindrome check, instead of using any iterative approach.","solution":"def is_palindrome(s): Returns True if the given string \`s\` is a palindrome, False otherwise. The check is done using recursion without extra space and ignoring case sensitivity. def helper(start, end): if start >= end: return True if s[start].lower() != s[end].lower(): return False return helper(start + 1, end - 1) return helper(0, len(s) - 1)"},{"question":"Write a function that takes as input two binary trees and returns true if the second tree is a subtree of the first one. A subtree of a tree T is a tree S consisting of a node in T and all of this node's descendants. The tree T could also be considered as a subtree of itself.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_subtree(s, t): Returns True if the tree t is a subtree of s, otherwise False. if not t: return True if not s: return False if is_same_tree(s, t): return True return is_subtree(s.left, t) or is_subtree(s.right, t) def is_same_tree(s, t): Returns True if the trees s and t are the same, otherwise False. if not s and not t: return True if not s or not t or s.val != t.val: return False return is_same_tree(s.left, t.left) and is_same_tree(s.right, t.right)"},{"question":"Create a program that generates a unique and randomly generated color name for a given RGB value. The program should output the color name in title case.","solution":"import random def generate_color_name(rgb_value): Generates a unique and randomly generated color name for a given RGB value. The color name is in title case. Args: rgb_value (tuple): A tuple of three integers representing the RGB value. Returns: str: A unique and randomly generated color name in title case. adjectives = [\\"Misty\\", \\"Shiny\\", \\"Bright\\", \\"Dark\\", \\"Luminous\\", \\"Radiant\\", \\"Glimmering\\", \\"Glowing\\"] colors = [\\"Azure\\", \\"Crimson\\", \\"Emerald\\", \\"Amber\\", \\"Scarlet\\", \\"Cobalt\\", \\"Sapphire\\", \\"Violet\\"] adjective = random.choice(adjectives) color = random.choice(colors) color_name = f\\"{adjective} {color}\\" return color_name"},{"question":"Write a function, \\"identity\\", which takes a single input x and returns x. Then, write a higher-order function, \\"apply_many\\", taking a list of functions (i. e. funlist) and applying each funlist element to the input (i. e. m), using the apply function, or an equivalent function from the numpy library. Ensure the final result of apply_many is a list.","solution":"def identity(x): Returns its input x. return x def apply_many(funlist, m): Applies each function in funlist to the input m and returns the results in a list. return [fun(m) for fun in funlist]"},{"question":"Formulate a programming script that accurately determines and visually presents the series of numbers which exclusively consist of odd digits (i.e., 1, 3, 5, 7, 9), operating in an ascending sequential order starting from 1 up until a pre-specified stopping point 'n'. Also, the application should efficiently handle large values of 'n'.","solution":"def is_all_odd_digits(num): Check if all digits of the number are odd. odd_digits = {'1', '3', '5', '7', '9'} return all(digit in odd_digits for digit in str(num)) def get_odd_digit_numbers(n): Generate a list of numbers from 1 to n that consist exclusively of odd digits. odd_digit_numbers = [] for num in range(1, n+1): if is_all_odd_digits(num): odd_digit_numbers.append(num) return odd_digit_numbers"},{"question":"Write a python function to print a sentence with the keyword \\"grep\\". Your function should take three parameters: a string (the sentence to be printed), an integer (the position of the word which should be replaced with \\"grep\\"), and a boolean (if True, the function should print the sentence in reverse order). The function should return the updated sentence. If the given position is out of the range of the sentence words, the function should return the original sentence. Test the function with several examples to verify its correctness.","solution":"def replace_and_print(sentence, position, reverse): Replace the word at the given position with \\"grep\\" and print the sentence. If reverse is True, print the sentence in reverse order. :param sentence: str, the input sentence :param position: int, the position of the word to be replaced :param reverse: bool, if True, print the sentence in reverse order :return: str, the updated sentence words = sentence.split() if 0 <= position < len(words): words[position] = \\"grep\\" updated_sentence = ' '.join(words) if reverse: updated_sentence = ' '.join(updated_sentence.split()[::-1]) print(updated_sentence) return updated_sentence"},{"question":"In this task, you are asked to write a program for compressing a string. The program should take in a string that may contain repeated characters, and output the minimum compressed form of the string. The compression method is to replace consecutive identical characters with the character followed by the number of repetitions.","solution":"def compress_string(s): Compresses the input string by replacing consecutive identical characters with the character followed by the number of repetitions. Example: \\"aaabbbcccaaa\\" -> \\"a3b3c3a3\\" Parameters: s (str): The input string to compress. Returns: str: The compressed string. if not s: return s result = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: result.append(f\\"{current_char}{count}\\") current_char = char count = 1 result.append(f\\"{current_char}{count}\\") return ''.join(result)"},{"question":"Formulate a Least Recently Used (LRU) cache utilizing Python's collections module, ensuring an optimal balance between time and space complexity.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 # Move the accessed item to the end to show that it was recently used self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: # Remove old value self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: # Remove first item self.cache.popitem(last=False)"},{"question":"Write a Python program to retrieve the kth smallest element from a given list, where k is a positive integer less than or equal to the length of the list. Your program should handle both duplicate and unique elements in the list.","solution":"def kth_smallest(lst, k): Returns the kth smallest element from the given list. if k < 1 or k > len(lst): raise ValueError(\\"k must be a positive integer within the length of the list\\") sorted_lst = sorted(lst) return sorted_lst[k-1]"},{"question":"Define a function named \\"prune\\" that takes a nested dictionary as input. The function should return a new dictionary with all key-value pairs where the value is \`None\`, an empty list (\\"[]\\"), or an empty dictionary (\\"{}\\") removed. The function should be able to handle multiple levels of nested dictionaries. Make sure to use a Pythonic solution, while keeping an eye on space and time complexity.","solution":"def prune(d): Recursively remove key-value pairs where the value is None, an empty list, or an empty dictionary from a nested dictionary. Parameters: d (dict): The input dictionary which may contain nested dictionaries. Returns: dict: A new dictionary with undesired values pruned. if not isinstance(d, dict): return d pruned_dict = {} for k, v in d.items(): if isinstance(v, dict): nested_dict = prune(v) if nested_dict: # Only add non-empty nested dictionaries pruned_dict[k] = nested_dict elif isinstance(v, list): if v: # Only add non-empty lists pruned_dict[k] = v elif v is not None: pruned_dict[k] = v return pruned_dict"},{"question":"Devise and execute a Python-based algorithmic solution, adhering to proper syntax and computational constructs, aimed at resolving a simple programmable quandary. The problem at hand involves assessing the parity of a numerical value 'x'. Your solution should determine whether 'x' encapsulates an even or odd integer value.","solution":"def is_even(x): Determines if a number x is even. Parameters: x (int): The integer to check Returns: bool: True if x is even, else False return x % 2 == 0"},{"question":"Design a program that takes a string as input and finds the most frequently occurring letter in the string. If there is a tie for the most frequent letter, return the letter that occurs first in alphabetical order.","solution":"def most_frequent_letter(s): from collections import Counter # Normalize the string to lowercase s = s.lower() # Count the frequency of each letter counter = Counter(filter(str.isalpha, s)) # Find the most frequent letter(s) max_count = max(counter.values(), default=0) most_frequent_letters = [char for char, cnt in counter.items() if cnt == max_count] # Return the first letter in alphabetical order return min(most_frequent_letters) if most_frequent_letters else ''"},{"question":"Develop a Python implementation to process a list of integers and not only rearrange them in the descending order but also find the prime numbers from the list. Filtered prime numbers should then be rearranged in ascending order.","solution":"def is_prime(n): Determines if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def process_integers(numbers): Processes a list of integers to: 1. Rearrange them in descending order. 2. Extract prime numbers and rearrange them in ascending order. Returns a tuple (sorted_numbers, sorted_primes). sorted_numbers = sorted(numbers, reverse=True) primes = [num for num in numbers if is_prime(num)] sorted_primes = sorted(primes) return sorted_numbers, sorted_primes"},{"question":"I want to write a program in Python to generate the nth number in the Fibonacci sequence. Can you help me with that? Also, I want to understand how recursion can be used in solving this problem.","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence using recursion. if n <= 0: raise ValueError(\\"n must be a positive integer\\") if n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Develop a Python 3 program that not only outputs the message \\"Hello World\\" to the console, but also personalizes the message by incorporating a user-inputted name. Furthermore, ensure your program elegantly handles any potential input errors or exceptions. Below is a faulty piece of code for your reference. Identify and correct the errors to achieve the desired functionality.","solution":"def personalized_hello(): Prompts the user for their name and prints a personalized 'Hello World' message. Catches potential input errors and handles them gracefully. try: name = input(\\"Please enter your name: \\") if not name: raise ValueError(\\"Name cannot be empty.\\") print(f\\"Hello {name}! Welcome to the world!\\") except ValueError as e: print(f\\"Error: {e}\\") except Exception as e: print(f\\"An unexpected error occurred: {e}\\") # Uncomment the following line to run the function: # personalized_hello()"},{"question":"We have a sorted array and a target value, write a python function to search for the target value within the array using binary search algorithm. The function should return the index of the first occurrence of the target value if it is present in the array, or -1 if it is not. The array may have duplicate values.","solution":"def binary_search(array, target): Performs binary search to find the first occurrence of the target in a sorted array. :param array: List of sorted elements. :param target: Value to search in the array. :return: Index of the first occurrence of target, or -1 if not found. left, right = 0, len(array) - 1 result = -1 while left <= right: mid = (left + right) // 2 if array[mid] == target: result = mid right = mid - 1 # Continue searching on the left half elif array[mid] > target: right = mid - 1 else: left = mid + 1 return result"},{"question":"Write a code that takes a list and removes all the duplicated elements from it. The list can contain elements of any data type, including nested lists, dictionaries, and sets. Your code should be able to handle any type of data and maintain the order of the elements in the original list. Additionally, you are not allowed to use any built-in functions or libraries for removing duplicates from a list.","solution":"def remove_duplicates(input_list): Removes duplicate elements from the input list while maintaining the order of elements in the original list. This function handles elements of any data type, including nested lists, dictionaries, and sets. seen = set() result = [] def to_hashable(item): Converts unhashable types into hashable ones. Specifically, it converts lists and sets to tuples. if isinstance(item, list): return tuple(to_hashable(x) for x in item) if isinstance(item, set): return frozenset(to_hashable(x) for x in item) if isinstance(item, dict): return tuple(sorted((k, to_hashable(v)) for k, v in item.items())) return item for item in input_list: hashable_item = to_hashable(item) if hashable_item not in seen: seen.add(hashable_item) result.append(item) return result"},{"question":"using regex, select the second word in a given string, but exclude any whitespace or punctuation marks that may be included in the second word. Additionally, ensure that the solution has a time complexity of O(n) where n is the length of the string, and a space complexity of O(1).","solution":"import re def second_word(s): Returns the second word in the given string, excluding any leading/trailing whitespace and punctuation marks. :param s: Input string :return: The second word without any leading/trailing whitespace or punctuation marks. Returns an empty string if there is no second word. words = re.findall(r'bw+b', s) return words[1] if len(words) > 1 else \\"\\""},{"question":"Devise a method that alters the provided series of characters into its reverse counterpart. Your function should process and reverse the input string in place, without utilizing any built-in reverse functions or additional libraries and should handle all ASCII printable characters.","solution":"def reverse_string(s): Reverses a string in place. s = list(s) start = 0 end = len(s) - 1 while start < end: s[start], s[end] = s[end], s[start] start += 1 end -= 1 return ''.join(s)"},{"question":"Please write a Python code to determine whether a given year is a leap year or not. A leap year is defined as a year that is divisible by 4, except for years that are divisible by 100 but not divisible by 400. In other words, a year is a leap year if it is divisible by 4 but not divisible by 100, or if it is divisible by 400.","solution":"def is_leap_year(year): Determines whether a given year is a leap year. Args: year (int): The year to check. Returns: bool: True if the year is a leap year, False otherwise. if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True return False return True return False"},{"question":"Design a Python function snippet to Update Extreme Hygiene during illness: Coughing and Sneezing Etiquette for Analysis for Beginners. Implement if/else or switch/case statements to handle different conditions related to the Bias. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def hygiene_update(bias): Updates extreme hygiene practices based on the given bias. Parameters: bias (str): The bias indicating the state of illness. Possible values are: \\"cough\\", \\"sneeze\\", \\"both\\", \\"none\\" Returns: str: A message with recommended hygiene practices. if bias == \\"cough\\": return \\"Cover your mouth and nose with a tissue when you cough. Dispose of the tissue properly and wash your hands.\\" elif bias == \\"sneeze\\": return \\"Cover your mouth and nose with a tissue when you sneeze. Dispose of the tissue properly and wash your hands.\\" elif bias == \\"both\\": return \\"Cover your mouth and nose with a tissue when you cough or sneeze. Dispose of the tissue properly and wash your hands frequently.\\" elif bias == \\"none\\": return \\"Maintain good hygiene practices regardless of symptoms to prevent illness.\\" else: return \\"Invalid input. Please provide one of the following values for bias: 'cough', 'sneeze', 'both', 'none'.\\""},{"question":"Given a list of numbers, create a Python function that sorts the list in descending order using the \\"Selection Sort\\" algorithm. Your function should not use any built-in Python sorting functions.","solution":"def selection_sort_descending(arr): Sorts a list in descending order using the selection sort algorithm. n = len(arr) for i in range(n): max_idx = i for j in range(i+1, n): if arr[j] > arr[max_idx]: max_idx = j arr[i], arr[max_idx] = arr[max_idx], arr[i] return arr"},{"question":"Implement a bracket completion algorithm using a stack data structure to handle nested brackets. The algorithm should be able to complete the brackets for multiple nested levels and handle square brackets in addition to round brackets. Additionally, the algorithm should check for balanced brackets and throw an error if the brackets are not balanced.","solution":"class UnbalancedBracketsError(Exception): pass def complete_brackets(expression): Returns a string with the completed brackets for the given expression. If the brackets are not balanced, it raises an UnbalancedBracketsError. stack = [] for char in expression: if char in '([': stack.append(char) elif char in '])': if not stack: raise UnbalancedBracketsError(\\"Unbalanced closing bracket found\\") top = stack.pop() if (char == ')' and top != '(') or (char == ']' and top != '['): raise UnbalancedBracketsError(\\"Mismatched brackets found\\") # Stack contains only unmatched opening brackets at this point while stack: top = stack.pop() if top == '(': expression += ')' elif top == '[': expression += ']' return expression"},{"question":"Provide a Python function that takes an animal name as an input and returns the names of two other animals whose names start with the same letter as the input animal. The function should return a list of the two animal names.","solution":"def get_animal_suggestions(animal_name): Returns a list of two animals whose names start with the same letter as the input animal name. animal_name = animal_name.capitalize() animals = { 'A': ['Antelope', 'Alligator', 'Aardvark'], 'B': ['Bear', 'Buffalo', 'Baboon'], 'C': ['Cat', 'Cheetah', 'Coyote'], 'D': ['Dog', 'Deer', 'Dolphin'], 'E': ['Elephant', 'Eagle', 'Eel'], # Add more animal names to the list as needed } first_letter = animal_name[0] if first_letter in animals and len(animals[first_letter]) >= 2: return animals[first_letter][:2] else: return [] # Example usage: # animal_suggestions = get_animal_suggestions(\\"bear\\") # print(animal_suggestions) # Output would look something like ['Bear', 'Buffalo'] if bear is one of the suggestions"},{"question":"Implement a non-recursive algorithm to compute the factorial of a given positive integer using a loop structure. Additionally, check if the given number is negative, greater than 20, or not an integer and handle the error cases appropriately by displaying the corresponding error message. If the number is greater than 20, display an error message indicating that the factorial result is too large to be computed. If the number is not an integer, display an error message indicating that the input should be a positive integer.","solution":"def factorial(n): Computes the factorial of a given non-negative integer using a loop structure. Handles errors for negative, non-integer values, and values greater than 20. if not isinstance(n, int) or n < 0: return \\"Input should be a positive integer.\\" if n > 20: return \\"Factorial result too large to be computed.\\" result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Please make a code that remove special character in provided string including any non-english characters, and also it should only allow digits, alphabets, space and dash('-'). After that, compress the string by removing repetitive consecutive characters.","solution":"import re def clean_and_compress_string(s): Remove special characters, non-English characters, and allow only digits, alphabets, space, and dash('-'). Then remove repetitive consecutive characters. Args: s (str): The input string. Returns: str: The cleaned and compressed string. # Remove all characters that are not digits, alphabets, space, or dash cleaned = re.sub(r'[^A-Za-z0-9 -]', '', s) # Compress the string by removing repetitive consecutive characters compressed = re.sub(r'(.)1+', r'1', cleaned) return compressed"},{"question":"Write a script in Python to take an age as input and return a boolean value that reflects if a person is a child (under 13), a teenager (13 to 19 years), or an adult (20 years or older). In addition, the program should give a respective output message for each age group: 'You are a child', 'You are a teenager', 'You are an adult'. The function should include error handling for input that is not an integer or that falls outside the logical minimum and maximum age range (0 - 120). The script should also be capable to process and give a response to multiple ages input at the same time. Consider how you might improve the efficiency and readability with Python best practices.","solution":"def age_group(ages): Determines the age group of each age in the input list and returns a list of tuples where each tuple contains the age and a corresponding message. :param ages: List of ages to analyze. :return: List of tuples with each tuple containing the age and the message. results = [] for age in ages: try: # Convert age to an integer, raising ValueError if it fails age = int(age) # Check if age falls within the logical range if age < 0 or age > 120: raise ValueError(f\\"Age {age} is out of logical range.\\") # Determine the age group and corresponding message if age < 13: message = \\"You are a child\\" elif 13 <= age <= 19: message = \\"You are a teenager\\" else: message = \\"You are an adult\\" results.append((age, message)) except ValueError: # Handle cases where age is not a valid integer or out of range results.append((age, \\"Invalid age input\\")) return results"},{"question":"Suppose I have a list x=[1,1,2,3,4,4,5,7,7,7,7,9,10,10,12] in Python and I want to compress it into [1, 2, 3, 4, 5, 7, 9, 10, 12]. What is the Python Lambda function that can do this?","solution":"compress_list = lambda lst: list(dict.fromkeys(lst)) # Example usage x = [1,1,2,3,4,4,5,7,7,7,7,9,10,10,12] compressed_x = compress_list(x) print(compressed_x)"},{"question":"Orchestrate a URL短链接服务 through 'flask' framework, 个人化 the short URL domain for user's discretionary choice. This mini project should include the features of error handling, integration of a database to keep record of the URL mappings, and optimization of the URL shortening algorithm.","solution":"from flask import Flask, request, redirect, jsonify import sqlite3 import hashlib app = Flask(__name__) DATABASE = 'url_shortener.db' BASE_URL = 'http://short.url/' def init_db(): with sqlite3.connect(DATABASE) as conn: c = conn.cursor() c.execute(''' CREATE TABLE IF NOT EXISTS url_map ( id INTEGER PRIMARY KEY AUTOINCREMENT, original_url TEXT NOT NULL, short_url TEXT NOT NULL ) ''') conn.commit() def shorten_url(url): hashed_url = hashlib.md5(url.encode()).hexdigest()[:6] return hashed_url @app.route('/shorten', methods=['POST']) def shorten(): data = request.json original_url = data.get('original_url') if not original_url: return jsonify({'error': 'Original URL is required'}), 400 short_url = data.get('custom_short_url', shorten_url(original_url)) with sqlite3.connect(DATABASE) as conn: c = conn.cursor() c.execute('INSERT INTO url_map (original_url, short_url) VALUES (?, ?)', (original_url, short_url)) conn.commit() return jsonify({'original_url': original_url, 'short_url': f\\"{BASE_URL}{short_url}\\"}), 201 @app.route('/<short_url>', methods=['GET']) def redirect_short_url(short_url): with sqlite3.connect(DATABASE) as conn: c = conn.cursor() c.execute('SELECT original_url FROM url_map WHERE short_url = ?', (short_url,)) result = c.fetchone() if result: return redirect(result[0]) else: return jsonify({'error': 'URL not found'}), 404 if __name__ == '__main__': init_db() app.run(debug=True)"},{"question":"Given a matrix of integers, write a Python program to find all unique rows that have the highest sum of elements. If there are multiple rows with the same highest sum, include all of them in the output. Also, check if any of the rows are exactly the same (i.e., identical elements in the respective positions) and exclude all but one of them.","solution":"def find_unique_rows_with_highest_sum(matrix): Returns all unique rows that have the highest sum of elements. row_sums = [sum(row) for row in matrix] max_sum = max(row_sums) max_sum_rows = [row for i, row in enumerate(matrix) if row_sums[i] == max_sum] unique_rows = [] seen = set() for row in max_sum_rows: row_tuple = tuple(row) if row_tuple not in seen: seen.add(row_tuple) unique_rows.append(row) return unique_rows"},{"question":"Create a random password generator using Python. The generator should create a password of length 8 with a combination of lowercase and uppercase letters, numbers and special characters.","solution":"import random import string def generate_password(length=8): Generates a random password of a given length using a combination of uppercase, lowercase letters, numbers, and special characters. if length < 8: raise ValueError(\\"Password length must be at least 8 characters.\\") characters = ( string.ascii_letters + string.digits + string.punctuation ) password = ''.join(random.choice(characters) for i in range(length)) return password"},{"question":"How can you calculate the factorial of a number using recursion in Python? Write a recursive function to achieve this. Additionally, include error handling to validate the input and handle any potential exceptions that may occur during the recursive calculations.","solution":"def factorial(n): Returns the factorial of n using recursion. Includes basic error handling for invalid input. if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a Python program to delete a given key from a dictionary, while also keeping track of the number of times each key is deleted. The program should store the deleted keys and their corresponding count in a separate dictionary. Additionally, the program should handle cases where the given key is not present in the dictionary, and provide appropriate error messages.","solution":"def delete_key_from_dict(target_dict, key, delete_count_dict): Deletes the given key from target dictionary and records the deletion count in another dictionary. Args: target_dict (dict): The dictionary from which the key is to be deleted. key (str): The key to be deleted. delete_count_dict (dict): Dictionary to keep track of deletion counts for each key. Returns: bool: True if the key was successfully deleted, False if the key was not present. if key in target_dict: del target_dict[key] if key in delete_count_dict: delete_count_dict[key] += 1 else: delete_count_dict[key] = 1 return True else: return False"},{"question":"Continuing from the previous context, can we create a user-defined type that remembers the last three operations performed on it instead of just the last one? Consider cases where an operation is undoable and we can undo the last one, two, or three operations. Also, implement functions to return the state of the type after each of these last three undo operations.","solution":"class OperationTracker: A class that tracks the last three operations performed on it. def __init__(self, initial_value): self.value = initial_value self.history = [initial_value] def update(self, new_value): Update the current value and log the change to history. self.value = new_value self.history.append(new_value) if len(self.history) > 4: # Keep only up to 4 elements in history self.history.pop(0) def undo_last(self): Undo the last operation. if len(self.history) > 1: self.history.pop() self.value = self.history[-1] return self.value def undo_two(self): Undo the last two operations. if len(self.history) > 2: self.history.pop() self.history.pop() self.value = self.history[-1] elif len(self.history) > 1: self.value = self.history[0] self.history = [self.value] return self.value def undo_three(self): Undo the last three operations. if len(self.history) > 3: self.history.pop() self.history.pop() self.history.pop() self.value = self.history[-1] elif len(self.history) > 1: self.value = self.history[0] self.history = [self.value] return self.value"},{"question":"Implement a function that takes a list of tuples as an input. Each tuple contains two elements: a string and an integer. The function should sort the list in such a way that it first sorts by the string (in alphabetical order) and, within strings that are equal, it sorts by the integer in descending order. Return the newly sorted list.","solution":"def custom_sort(lst): Sorts a list of tuples first by the string (alphabetically) and then by the integer (in descending order) for tuples with the same string. Parameters: lst (list): A list of tuples where each tuple contains a string and an integer. Returns: list: The sorted list. return sorted(lst, key=lambda x: (x[0], -x[1]))"},{"question":"Create a function called check_restaurant_availability that returns True if a restaurant is open on a given day and False if it's closed. The function should take two parameters: a dictionary representing the restaurant's status for each day of the week and a string representing the day for which the availability should be checked. The dictionary should have the days of the week as keys and boolean values indicating whether the restaurant is open (True) or closed (False) on that day. The function should handle case-insensitive day names and should return a ValueError if the day provided is not a valid day of the week.","solution":"def check_restaurant_availability(schedule, day): Check if the restaurant is open on a given day. Parameters: schedule (dict): Dictionary with days of the week as keys and boolean values indicating open status. day (str): Day of the week to check (case-insensitive). Returns: bool: True if the restaurant is open on the given day, False otherwise. Raises: ValueError: If the day is not a valid day of the week. valid_days = [\\"monday\\", \\"tuesday\\", \\"wednesday\\", \\"thursday\\", \\"friday\\", \\"saturday\\", \\"sunday\\"] day_lower = day.lower() if day_lower not in valid_days: raise ValueError(f\\"{day} is not a valid day of the week.\\") return schedule.get(day_lower, False)"},{"question":"Create a for loop that prints the numbers 0 to 100 and prints if the number is a prime number or not. Additionally, the program should calculate and display the sum of all prime numbers encountered during the loop.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def print_numbers_and_check_primes(): Prints the numbers from 0 to 100 and checks if they're prime. Calculates and returns the sum of all prime numbers. sum_of_primes = 0 for number in range(101): if is_prime(number): print(f\\"{number} is a prime number.\\") sum_of_primes += number else: print(f\\"{number} is not a prime number.\\") print(f\\"Sum of all prime numbers from 0 to 100 is: {sum_of_primes}\\") return sum_of_primes"},{"question":"Write a code to delete all occurrences of a specific element from a given list, without using the built-in remove() function. The list should maintain the order of the remaining elements after the deletion. Additionally, you are not allowed to create a new list or use additional data structures to solve this problem.","solution":"def delete_all_occurrences(lst, element): Deletes all occurrences of a specific element from the list without using the built-in remove() function. write_index = 0 for read_index in range(len(lst)): if lst[read_index] != element: lst[write_index] = lst[read_index] write_index += 1 # Resize the list to the new size after deletions while len(lst) > write_index: lst.pop() return lst"},{"question":"You are implementing merge sort algorithm, which is one of the best examined divide-and-conquer algorithms. The merge sort algorithm works as follow: given an array, it divides the array in half, sort the two halves independently, then merge the two sorted sub-arrays into one. Write a Python function \`divide_and_conquer_sort(arr)\` to implement this algorithm.","solution":"def divide_and_conquer_sort(arr): Merge Sort algorithm implementation. Sorts the given array in ascending order using the divide-and-conquer strategy. def merge(left, right): result = [] i = j = 0 # Merge the two sorted lists while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 # Append the remaining elements from left result.extend(left[i:]) # Append the remaining elements from right result.extend(right[j:]) return result # Base case if len(arr) <= 1: return arr # Divide the array into two halves mid = len(arr) // 2 left = divide_and_conquer_sort(arr[:mid]) right = divide_and_conquer_sort(arr[mid:]) # Merge the sorted halves return merge(left, right)"},{"question":"I am working on a project where I need to implement a basic encryption algorithm in Python. However, I am not very familiar with encryption techniques. Can you guide me on how to create a program that encrypts text by shifting its characters to the next 3 in the alphabet?","solution":"def caesar_cipher(text, shift=3): Encrypts text by shifting its characters to the next \`shift\` in the alphabet. Args: text (str): The input string to encrypt. shift (int): The number of positions to shift each character. Default is 3. Returns: str: The encrypted string. encrypted_text = [] for char in text: if char.isalpha(): base = 'a' if char.islower() else 'A' encrypted_char = chr((ord(char) - ord(base) + shift) % 26 + ord(base)) encrypted_text.append(encrypted_char) else: encrypted_text.append(char) return ''.join(encrypted_text)"},{"question":"Given two sorted arrays of integers, write a program to merge them into one sorted array. [","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. result = [] i = 0 j = 0 # Traverse both arrays while i < len(arr1) and j < len(arr2): # Pick the smaller element and increment the respective pointer if arr1[i] <= arr2[j]: result.append(arr1[i]) i += 1 else: result.append(arr2[j]) j += 1 # Collect remaining elements from arr1, if any while i < len(arr1): result.append(arr1[i]) i += 1 # Collect remaining elements from arr2, if any while j < len(arr2): result.append(arr2[j]) j += 1 return result"},{"question":"Create a function that checks whether a given number is a prime number using the Sieve of Eratosthenes algorithm. The function should also return the smallest prime factor of the number if it is not a prime number. The function should efficiently handle numbers up to 10^9 and should be optimized for performance.","solution":"def sieve_of_eratosthenes(n): Generates a list of boolean values representing primality of numbers from 0 to n. True indicates the number is prime, False indicates not prime. is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 is_prime[0], is_prime[1] = False, False # 0 and 1 are not prime numbers return is_prime def smallest_prime_factor(n): Finds the smallest prime factor of a non-prime number n. for i in range(2, int(n**0.5) + 1): if n % i == 0: return i return n def is_prime_or_smallest_prime_factor(n): Checks if a given number n is a prime number and also returns the smallest prime factor if it is not a prime number. Handles numbers efficiently up to 10^9. if n <= 1: return False, None if n <= 10**6: # If n is less than or equal to 10^6, we can use Sieve of Eratosthenes directly sieve = sieve_of_eratosthenes(n) if sieve[n]: return True, None else: return False, smallest_prime_factor(n) else: # For larger numbers, directly check primality by trial division if n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1)): return True, None else: return False, smallest_prime_factor(n)"},{"question":"Here are thecountries :France, Spain, Italy, UK, Brasil, Argentina, Colombia, Canada and I want to apply suitable timezone to each country to convert given date from UTC to those timezones. The process should be done automatically. Create a python function handling this issue.","solution":"from datetime import datetime import pytz def convert_utc_to_timezone(utc_dt, country): Convert a UTC datetime to the local time in the specified country. Parameters: utc_dt (datetime): The UTC datetime to be converted. country (str): The country for which the local timezone is required. Returns: datetime: The local datetime in the specified country's timezone. country_timezone_mapping = { \\"France\\": \\"Europe/Paris\\", \\"Spain\\": \\"Europe/Madrid\\", \\"Italy\\": \\"Europe/Rome\\", \\"UK\\": \\"Europe/London\\", \\"Brasil\\": \\"America/Sao_Paulo\\", \\"Argentina\\": \\"America/Argentina/Buenos_Aires\\", \\"Colombia\\": \\"America/Bogota\\", \\"Canada\\": \\"America/Toronto\\", # Note: This is for Eastern Time; Canada spans multiple timezones } if country not in country_timezone_mapping: raise ValueError(f\\"Timezone for country '{country}' is not defined.\\") local_timezone = pytz.timezone(country_timezone_mapping[country]) utc_dt = utc_dt.replace(tzinfo=pytz.utc) local_dt = utc_dt.astimezone(local_timezone) return local_dt"},{"question":"Write a python function that takes in a list of integers and returns a new list with the elements shuffled randomly. However, the shuffled list should have all the odd numbers before the even numbers. The relative order of the odd numbers and even numbers should be preserved. If the input list is empty, return an empty list.","solution":"import random def shuffle_odd_even(nums): Returns a new list with all odd numbers before even numbers preserving the relative order. if not nums: return [] odds = [num for num in nums if num % 2 != 0] evens = [num for num in nums if num % 2 == 0] random.shuffle(odds) random.shuffle(evens) return odds + evens"},{"question":"Given the base-10 representation of an 18-digit number, write a code to determine the sum of its digits in base-10 and then convert that sum into base-8(Octal) and base-16(hexadecimal). Additionally, specify in the code how an exception should be handled if the 18-digit number input is erroneous or does not follow the base-10 representation rules.","solution":"def sum_of_digits_in_bases(number): Takes an 18-digit number in base-10 and returns the sum of its digits in base-10 representation, and its conversion to base-8 and base-16. try: # Ensure input is a string of digits and has 18 characters if not isinstance(number, str) or not number.isdigit() or len(number) != 18: raise ValueError(\\"Input must be an 18-digit base-10 number\\") # Calculate the sum of digits digit_sum = sum(int(digit) for digit in number) # Convert sum to base-8 base_8 = oct(digit_sum)[2:] # Convert sum to base-16 base_16 = hex(digit_sum)[2:] return digit_sum, base_8, base_16 except Exception as e: return str(e)"},{"question":"Create a Flask application that prompts the user to enter a username and password. If the username and password are valid, the user should be redirected to a given URL. If the username or password is invalid, display an appropriate error message to the user.","solution":"from flask import Flask, request, redirect, url_for, render_template_string, flash app = Flask(__name__) app.secret_key = 'supersecretkey' # In a real application, use a secure way to store and check credentials VALID_USERNAME = \\"user\\" VALID_PASSWORD = \\"password\\" @app.route('/', methods=['GET', 'POST']) def login(): if request.method == 'POST': username = request.form['username'] password = request.form['password'] if username == VALID_USERNAME and password == VALID_PASSWORD: return redirect(url_for('success')) else: flash('Invalid username or password') return render_template_string(''' <!doctype html> <html> <head> <title>Login</title> </head> <body> <form method=\\"post\\"> Username: <input type=\\"text\\" name=\\"username\\"><br> Password: <input type=\\"password\\" name=\\"password\\"><br> <input type=\\"submit\\" value=\\"Login\\"> </form> {% with messages = get_flashed_messages() %} {% if messages %} <ul> {% for message in messages %} <li>{{ message }}</li> {% endfor %} </ul> {% endif %} {% endwith %} </body> </html> ''') @app.route('/success') def success(): return 'Login successful!' if __name__ == '__main__': app.run(debug=True)"},{"question":"Given a number N, print a pyramid of '*' characters with 2N-1 rows, where the first row has 1 '*' and each subsequent row has 2 more '*' characters than the previous row, up to the Nth row, and then decreases by 2 '*' characters until reaching the 2N-1th row. However, instead of using any kind of loop or recursive function, solve this problem using only functional programming concepts with a focus on list comprehension and higher-order functions such as map, reduce, and filter.","solution":"def pyramid(n): Returns a pyramid of '*' characters with 2N-1 rows. # Build first half of the pyramid first_half = ['*' * (2*i + 1) for i in range(n)] # Build second half by reversing the first half except the last row second_half = first_half[:-1][::-1] # Combine both halves full_pyramid = first_half + second_half return full_pyramid"},{"question":"Given a list of integers and the length n, write a Python program to add the elements of all even indexed values to the corresponding odd indexed values.","solution":"def add_even_indexed_to_odd_indexed(nums): Given a list of integers, add the elements of all even indexed values to the corresponding odd indexed values. Parameters: nums (list): A list of integers. Returns: list: A list where the elements at odd indices are updated by adding the element at the previous even index. n = len(nums) result = nums[:] for i in range(1, n, 2): result[i] += nums[i - 1] return result"},{"question":"Write a function in Python that takes a list of integers and reverses it in place, i.e., without creating a new list. The function should modify the original list.","solution":"def reverse_list_in_place(lst): Reverses the given list of integers in place. Parameters: lst (list): A list of integers. Returns: None: The list is reversed in place. left, right = 0, len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1"},{"question":"Given two lists named 'nums1' and 'nums2', both containing integer elements. Write a python function that iterates through both the lists and return a list which has the maximum elements from both. If the elements at the same index are the same, return that element.","solution":"def max_elements(nums1, nums2): Returns a list containing the maximum elements from both nums1 and nums2 at each index. If the elements at the same index are the same, that element is returned. :param nums1: List of integers :param nums2: List of integers :return: List of integers containing max elements from both lists at each index return [max(a, b) for a, b in zip(nums1, nums2)]"},{"question":"Given two alphanumeric strings, write a program that merges them by interweaving their characters. Ensure to handle cases where the lengths of the two strings are not equal. If one string is longer, append the additional characters to the end after interweaving.","solution":"def merge_strings(str1, str2): Merge two alphanumeric strings by interweaving their characters. Extra characters in the longer string are appended at the end. merged_string = [] i, j = 0, 0 # Interweaving characters while i < len(str1) and j < len(str2): merged_string.append(str1[i]) merged_string.append(str2[j]) i += 1 j += 1 # Append any remaining characters in the longer string if i < len(str1): merged_string.extend(str1[i:]) if j < len(str2): merged_string.extend(str2[j:]) return ''.join(merged_string)"},{"question":"Define a python function called \`\`string_length\`\` that will take a given string and output the length of that string. Additionally, the function should remove any whitespace, punctuation, and numbers from the string before calculating its length. The function should be case-sensitive.","solution":"import string def string_length(s): Returns the length of the given string after removing whitespace, punctuation, and numbers. # Remove spaces, punctuation, and numbers cleaned_string = ''.join(char for char in s if char.isalpha()) return len(cleaned_string)"},{"question":"You are given a function \`uniform_random_choices\` that takes in a tuple of probabilities \`ps\` and an integer \`count\`. This function is intended to randomly select \`count\` number of indices from a uniform distribution based on the probabilities provided in \`ps\`. However, the implementation of the function is incomplete.","solution":"import random from typing import Tuple, List def uniform_random_choices(ps: Tuple[float], count: int) -> List[int]: Given a tuple of probabilities \`ps\` and an integer \`count\`, returns \`count\` random indices based on the probabilities in \`ps\`. :param ps: A tuple of probabilities summing to 1. :param count: The number of indices to select. :return: A list of selected indices. indices = list(range(len(ps))) return random.choices(indices, weights=ps, k=count)"},{"question":"I need help with a programming question. How can I find the longest substring without repeating characters in a given string?","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters in the given string s. char_index_map = {} longest_substr = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest_substr = max(longest_substr, i - start + 1) return longest_substr"},{"question":"Given a Python function designed to decode a message encrypted using a simple substitution cipher, identify and correct the errors present in the function. Additionally, enhance the function by including parameter checks, documentation, and the ability to handle upper and lower case letters. The function should decode both lowercase and uppercase encrypted English texts but maintain the case of the letters from the original text. It should reverse the substitution process done by the other Python function, which works by shifting the characters by a certain number (key) to encode the message.","solution":"def decode_message(encoded_message, key): Decodes a message that was encoded using a simple substitution cipher with the provided key. Parameters: - encoded_message (str): The encoded text message. - key (int): The number shift used in the cipher to encode the message. Returns: - decoded_message (str): The decoded message. if not isinstance(encoded_message, str): raise ValueError(\\"The encoded_message should be a string.\\") if not isinstance(key, int): raise ValueError(\\"The key should be an integer.\\") def shift_char(c, key): if 'a' <= c <= 'z': # handle lowercase letters return chr((ord(c) - ord('a') - key) % 26 + ord('a')) elif 'A' <= c <= 'Z': # handle uppercase letters return chr((ord(c) - ord('A') - key) % 26 + ord('A')) else: return c # non-alphabet characters are not changed decoded_message = ''.join(shift_char(c, key) for c in encoded_message) return decoded_message"},{"question":"Write a function to implement binary search on a sorted array. The function should compare each element to the target value and return the index of the target value in the array. If the target value is not found, the function should return -1.","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the target value. Args: arr (list): A list of sorted elements. target (int or float): The target value to search for in the array. Returns: int: The index of the target value if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write an algorithm in Python to find the number of distinct words in a given sentence, ignoring case sensitivity and excluding any punctuation marks. You can assume that the sentence will only contain letters, spaces, and punctuation marks. The algorithm should have a time complexity of O(n), where n is the length of the sentence.","solution":"import string def count_distinct_words(sentence): Returns the number of distinct words in a given sentence, ignoring case sensitivity and excluding any punctuation marks. # Remove punctuation marks from the sentence translator = str.maketrans('', '', string.punctuation) cleaned_sentence = sentence.translate(translator) # Convert the sentence to lowercase and split into words words = cleaned_sentence.lower().split() # Use a set to store distinct words distinct_words = set(words) # Return the number of distinct words return len(distinct_words)"},{"question":"Complete the below code for a function that accepts a positive integer input and returns the count of even-valued digits within that number. Ensure your code also handles the case for when an input is not a positive integer.","solution":"def count_even_digits(n): Returns the count of even-valued digits in the positive integer n. Raises a ValueError if n is not a positive integer. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") even_digits = {'0', '2', '4', '6', '8'} count = 0 for digit in str(n): if digit in even_digits: count += 1 return count"},{"question":"Write a python program to shuffle a given nested(dimension = 2) array.","solution":"import random def shuffle_nested_array(array): Shuffles elements within each sub-array of given nested (2D) array. Args: array (list of lists): A 2D array to shuffle. Returns: list of lists: 2D array with the elements of each sub-array shuffled. for sub_array in array: random.shuffle(sub_array) return array"},{"question":"Write a python program to apply a function on list elements using using the map function, also implement a filter function on top to filter the resultant elements based on condition. Provide appropriate documentation to each function and handle corner cases carefully.","solution":"from typing import List, Callable def apply_map_filter(data: List[int], map_func: Callable[[int], int], filter_func: Callable[[int], bool]) -> List[int]: Applies a map function to each element of the list and then filters the results based on a filter function. :param data: List of integers to be processed :param map_func: A function to be applied to each element of the list :param filter_func: A function to filter elements of the mapped list :return: A list of integers after applying map and filter functions mapped_data = map(map_func, data) filtered_data = filter(filter_func, mapped_data) return list(filtered_data)"},{"question":"Write a code that generates a random password given the length and conditions for uppercase, lowercase, numbers, and symbols.","solution":"import random import string def generate_password(length, use_uppercase=True, use_lowercase=True, use_numbers=True, use_symbols=True): Generate a random password of specified length and conditions. Parameters: length (int): The length of the password. use_uppercase (bool): Whether to use uppercase letters. use_lowercase (bool): Whether to use lowercase letters. use_numbers (bool): Whether to use numbers. use_symbols (bool): Whether to use symbols. Returns: str: The generated password. if length <= 0: raise ValueError(\\"Password length should be greater than 0\\") character_pool = \\"\\" if use_uppercase: character_pool += string.ascii_uppercase if use_lowercase: character_pool += string.ascii_lowercase if use_numbers: character_pool += string.digits if use_symbols: character_pool += string.punctuation if not character_pool: raise ValueError(\\"No character set selected. Please set at least one character type to True.\\") password = ''.join(random.choice(character_pool) for _ in range(length)) return password"},{"question":"Modify a program that accepts a sentence and a number as input. Instead of simply repeating each word in the sentence, the program should now scramble the letters of each word, maintaining only the correct first and last letter in each word, and repeat this \\"scrambled\\" sentence a specified number of times. The scramble should ensure that if a word is of length \\"n\\", the n-2 middle characters are shuffled randomly, while keeping the first and last characters in their original place. Remember to handle punctuation correctly in your final output.","solution":"import random def scramble_word(word): Scramble the word by shuffling the characters between the first and last character. if len(word) <= 3: return word # Get the middle characters middle_chars = list(word[1:-1]) random.shuffle(middle_chars) # Combine the first character, middle shuffled characters, and the last character return word[0] + ''.join(middle_chars) + word[-1] def scramble_sentence(sentence, repeat_count): Scrambles each word within a sentence, maintaining the first and last letters of each word. The scrambled sentence is repeated the specified number of times. words = sentence.split() scrambled_words = [scramble_word(word) for word in words] scrambled_sentence = ' '.join(scrambled_words) return ' '.join([scrambled_sentence] * repeat_count)"},{"question":"Implement a function that takes two strings as an argument and returns the number of substrings that are common to both strings, including the overlapping strings. However, the function should not count duplicate substrings that occur in both strings multiple times.","solution":"def common_substrings_count(s1, s2): Returns the number of common substrings between two strings s1 and s2. def get_substrings(s): substrings = set() for length in range(1, len(s) + 1): for start in range(len(s) - length + 1): substrings.add(s[start:start + length]) return substrings substrings_s1 = get_substrings(s1) substrings_s2 = get_substrings(s2) common_substrings = substrings_s1.intersection(substrings_s2) return len(common_substrings)"},{"question":"Devise and implement a software module that generates a geometric illustration of a rhombus configuration, utilizing asterisk (*) symbols in alignment with a predetermined horizontal dimension.","solution":"def generate_rhombus(n): Generates a string representation of a rhombus using asterisks (*) with a given horizontal dimension n. Parameters: n (int): Horizontal dimension. Returns: str: A string that represents the rhombus. if n < 1 or n % 2 == 0: raise ValueError(\\"n must be an odd positive integer.\\") rhombus_lines = [] mid_point = n // 2 # Upper part (including middle line) for i in range(mid_point + 1): spaces = ' ' * (mid_point - i) stars = '*' * (2 * i + 1) rhombus_lines.append(spaces + stars + spaces) # Lower part for i in range(mid_point - 1, -1, -1): spaces = ' ' * (mid_point - i) stars = '*' * (2 * i + 1) rhombus_lines.append(spaces + stars + spaces) return \\"n\\".join(rhombus_lines)"},{"question":"Write a Python function that takes in a positive integer and returns the sum of its digits. The function should have a time complexity of O(log n), where n is the given number.","solution":"def sum_of_digits(n): Returns the sum of the digits of a positive integer n. The time complexity of this function is O(log n). if n < 0: raise ValueError(\\"Input must be a positive integer.\\") total = 0 while n > 0: total += n % 10 n //= 10 return total"},{"question":"Create an advanced Python script to accept user inputs in the form of dictionaries with dynamic keys and values. The script should add these key-value pairs to a list. Additionally, add functionalities for removing specific key-value pairs from the list, searching for values by keys and updating values by keys. The operations should be performed based on user input and the script must include error handling capabilities for better robustness.","solution":"class KeyValueStore: def __init__(self): self.store = [] def add_entry(self, entry): Adds a new dictionary entry to the store. if isinstance(entry, dict): self.store.append(entry) else: raise ValueError(\\"Entry must be a dictionary\\") def remove_entry(self, key): Removes all entries that contain the specified key. self.store = [entry for entry in self.store if key not in entry] def search_value(self, key): Searches for values associated with a specified key. results = [entry[key] for entry in self.store if key in entry] if results: return results else: raise KeyError(f\\"Key {key} not found in any entry\\") def update_value(self, key, new_value): Updates the value of a specified key in all entries that contain this key. updated = False for entry in self.store: if key in entry: entry[key] = new_value updated = True if not updated: raise KeyError(f\\"Key {key} not found in any entry\\") def get_store(self): Returns the current state of the store. return self.store"},{"question":"Create a program to search for a word in an array and return the index position of all the matches. The matches should be returned as a list of tuples, where each tuple contains the index position and the matched word. The program should also handle case-insensitive searches.","solution":"def search_word(array, word): Searches for a word in an array and returns the index positions of all matches. The matches are returned as a list of tuples with each tuple containing the index position and the matched word. Args: array (list of str): The array to search. word (str): The word to search for. Returns: list of tuple: List of tuples containing the index positions and matched word. word_lower = word.lower() matches = [(index, array[index]) for index, element in enumerate(array) if element.lower() == word_lower] return matches"},{"question":"Write code to systematically evaluate not just the maximum depth, but also the average depth of a binary tree. Additionally, identify and return any nodes that occur at that average depth, in a sorted order. Remember to balance the tree if needed, for ensuring an accurate complexity analysis.","solution":"from collections import deque, defaultdict class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root): if not root: return 0 return 1 + max(max_depth(root.left), max_depth(root.right)) def nodes_at_depth(root, depth): if not root: return [] if depth == 1: return [root.val] return nodes_at_depth(root.left, depth - 1) + nodes_at_depth(root.right, depth - 1) def average_depth(root): if not root: return 0, [] queue = deque([(root, 1)]) depth_sum = 0 node_count = 0 levels = defaultdict(list) while queue: node, depth = queue.popleft() depth_sum += depth node_count += 1 levels[depth].append(node.val) if node.left: queue.append((node.left, depth + 1)) if node.right: queue.append((node.right, depth + 1)) avg_depth = depth_sum / node_count if node_count > 0 else 0 avg_depth = int(avg_depth) nodes = sorted(levels[avg_depth]) if avg_depth in levels else [] return avg_depth, nodes def balance_tree(root): Function to create a balanced binary tree from the values of an unbalanced tree. def inorder_traverse(node): if not node: return [] return inorder_traverse(node.left) + [node.val] + inorder_traverse(node.right) def sorted_list_to_bst(vals): if not vals: return None mid = len(vals) // 2 root = TreeNode(vals[mid]) root.left = sorted_list_to_bst(vals[:mid]) root.right = sorted_list_to_bst(vals[mid+1:]) return root vals = inorder_traverse(root) vals.sort() # Ensure the list is sorted return sorted_list_to_bst(vals)"},{"question":"Write a code for an object-oriented Bubble Sort algorithm that uses a doubly linked list data structure instead of an array. Additionally, the algorithm should be able to handle a large amount of data efficiently, without causing memory or performance issues.","solution":"class Node: def __init__(self, data): self.data = data self.prev = None self.next = None class DoublyLinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if not self.head: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node new_node.prev = last def to_list(self): result = [] node = self.head while node: result.append(node.data) node = node.next return result def bubble_sort(self): if not self.head: return swapped = True while swapped: swapped = False current = self.head while current.next: if current.data > current.next.data: current.data, current.next.data = current.next.data, current.data swapped = True current = current.next"},{"question":"Write a Python function that sorts a list of tuples based on the second element of each tuple. The function should also have the ability to sort in both ascending and descending order based on a parameter. Unlike the initial version, use better variable names and incorporate type hints for a more strategic challenge.","solution":"from typing import List, Tuple def sort_tuples(tuples_list: List[Tuple], descending: bool = False) -> List[Tuple]: Sorts a list of tuples based on the second element of each tuple. Parameters: - tuples_list (List[Tuple]): The list of tuples to sort - descending (bool): If True, sorts in descending order. If False, sorts in ascending order. Returns: - List[Tuple]: The sorted list of tuples return sorted(tuples_list, key=lambda x: x[1], reverse=descending)"},{"question":"Write a Python function that concatenates a list of strings into a single string. Ensure that the function accepts only lists of strings as input, and print an error message if the input is not a list of strings.","solution":"def concatenate_strings(string_list): Concatenates a list of strings into a single string. Args: string_list (list): List of strings to concatenate. Returns: str: Concatenated string. if not isinstance(string_list, list): return \\"Error: The input is not a list.\\" if not all(isinstance(item, str) for item in string_list): return \\"Error: The input list must contain only strings.\\" return ''.join(string_list)"},{"question":"Write a recursive function to calculate the nth term of the Fibonacci sequence. Note that the Fibonacci sequence is defined as follows: the first two terms are 0 and 1. Each subsequent term is the sum of the two preceding ones.","solution":"def fibonacci(n): Returns the nth term of the Fibonacci sequence. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function that takes in a list of integers and returns a dictionary where the keys are the original numbers and the values are their corresponding squares. Additionally, the function should utilize sets to check if a number has already been squared, in order to prevent duplicates in the output.","solution":"def square_integers(int_list): Takes in a list of integers and returns a dictionary where the keys are the original numbers and the values are their corresponding squares. Utilizes sets to check if a number has already been squared. squared_dict = {} seen_numbers = set() for num in int_list: if num not in seen_numbers: squared_dict[num] = num ** 2 seen_numbers.add(num) return squared_dict"},{"question":"Create a loop that will print numbers from 3 to 100, but only those which are both prime and Fibonacci numbers. Additionally, the loop should determine if each prime Fibonacci number is a palindrome and print out the palindromic numbers in reverse order.","solution":"def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def is_fibonacci(num): x1 = 5 * num * num + 4 x2 = 5 * num * num - 4 return int(x1**0.5)**2 == x1 or int(x2**0.5)**2 == x2 def is_palindrome(num): return str(num) == str(num)[::-1] def print_prime_fibonacci_palindromes(): for num in range(3, 101): if is_prime(num) and is_fibonacci(num): print(num) if is_palindrome(num): print(int(str(num)[::-1])) print_prime_fibonacci_palindromes()"},{"question":"Create a Python function that takes in a list as a parameter and generates a dictionary with the list elements as keys. The function should store the frequency sum of each element in the dictionary as value.","solution":"def list_to_frequency_dict(lst): Takes a list as input and returns a dictionary with the elements of the list as keys and their frequencies as values. freq_dict = {} for item in lst: if item in freq_dict: freq_dict[item] += 1 else: freq_dict[item] = 1 return freq_dict"},{"question":"Write a Python function that takes a sentence (as a string) as an argument and returns a histogram of the characters in the sentence. It should ignore punctuation and spaces, be case insensitive, and include a count of unique characters in the returned output. The histogram should be sorted in descending order based on the frequency of occurrence.","solution":"from collections import Counter import string def char_histogram(sentence): Returns a histogram of characters in the sentence, ignoring punctuation and spaces, and with case insensitivity. The histogram is sorted in descending order of frequency. # Remove punctuation and spaces, and convert to lowercase cleaned_sentence = ''.join(c for c in sentence if c not in string.punctuation and c not in string.whitespace).lower() # Count the frequency of each character char_count = Counter(cleaned_sentence) # Sort the histogram in descending order based on frequency sorted_histogram = dict(sorted(char_count.items(), key=lambda item: item[1], reverse=True)) return sorted_histogram"},{"question":"Complete the code below for a function that takes a list of integers as an input and returns a tuple of two elements. The first element is the sum of all even numbers in the list (0 if no even number) and the second is the product of all positive numbers (1 if no positive number exists or is 0). Handle cases with negative and zero values.","solution":"def sum_even_product_positive(numbers): Returns a tuple where the first element is the sum of all even numbers and the second element is the product of all positive numbers. sum_even = sum(num for num in numbers if num % 2 == 0) product_positive = 1 has_positive = False for num in numbers: if num > 0: product_positive *= num has_positive = True if not has_positive: product_positive = 1 return sum_even, product_positive"},{"question":"Write a function that finds the positions of all alphabetic characters in a given string. Alphabetic characters are defined as those that your programming language would recognize as letters. Ignore all other characters (e.g, digits, punctuation, whitespace).","solution":"def find_alphabetic_positions(s): Returns a list of positions of all alphabetic characters in the given string. Parameters: s (str): Input string Returns: List[int]: List of positions of alphabetic characters return [i for i, char in enumerate(s) if char.isalpha()]"},{"question":"Write a Python program that converts a temperature given in degrees Celsius to Kelvin and Fahrenheit, which are equivalent measurements. In addition, write test cases to verify its correctness. You should be able to handle input errors gracefully, for example if the input is not a numerical value.","solution":"def celsius_to_kelvin(celsius): Converts a temperature from Celsius to Kelvin. if not isinstance(celsius, (int, float)): raise ValueError(\\"Input must be a numerical value\\") kelvin = celsius + 273.15 return kelvin def celsius_to_fahrenheit(celsius): Converts a temperature from Celsius to Fahrenheit. if not isinstance(celsius, (int, float)): raise ValueError(\\"Input must be a numerical value\\") fahrenheit = (celsius * 9/5) + 32 return fahrenheit"},{"question":"Develop a miniature code in association with Python programming that executes a tangible activity. Specifically, the task requires perceptive computation where the system is anticipated to echo back the input string altered in a case-reversed format. The sample string for experimentation is \\"Hello World\\".","solution":"def case_reversed_echo(input_string): Returns the input string with reversed casing for each character. return input_string.swapcase()"},{"question":"Write a python script to check if 200MB of memory is available on a Linux system.","solution":"import os def is_memory_available(required_memory_mb): Checks if the specified amount of memory is available on the system. Args: required_memory_mb (int): The amount of memory in MB to check for availability. Returns: bool: True if the specified memory is available, False otherwise. # Read the memory information from /proc/meminfo with open('/proc/meminfo') as f: lines = f.readlines() meminfo = {} for line in lines: parts = line.split(':') if len(parts) < 2: continue key = parts[0].strip() value = parts[1].strip().split()[0] meminfo[key] = int(value) # Calculate available memory available_memory_kb = meminfo.get('MemAvailable', 0) # Convert required memory to KB required_memory_kb = required_memory_mb * 1024 return available_memory_kb >= required_memory_kb # Example usage: # print(is_memory_available(200)) # Check if 200 MB of memory is available"},{"question":"Given a list of tuples containing a name and age, write a program to filter out people who are older than 30 years and whose names contain at least three vowels. Return the filtered list in the same format.","solution":"def filter_people(data): Filters out people older than 30 years and whose names contain at least three vowels. Parameters: data (list): A list of tuples where each tuple contains a name (str) and an age (int) Returns: list: A list of tuples with the filtered data def count_vowels(name): vowels = set(\\"aeiouAEIOU\\") return sum(1 for char in name if char in vowels) return [person for person in data if person[1] > 30 and count_vowels(person[0]) >= 3]"},{"question":"Utilizing the programming language Python, construct a script that executes the task of printing the numerical integers ranging from the minimum value of 0 to a maximum boundary of 100. However, instead of printing in a straightforward manner, the program should display each integer only if it is a perfect square or a prime number. Also, include a sophisticated function to handle any potential erroneous inputs or exceptions.","solution":"import math def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: return False return True def is_perfect_square(n): Check if a number is a perfect square. if n < 0: return False root = int(math.sqrt(n)) return root * root == n def print_special_numbers(min_val, max_val): Print numbers that are either prime or perfect squares between min_val and max_val. if not isinstance(min_val, int) or not isinstance(max_val, int): raise ValueError(\\"Both min_val and max_val should be integers\\") if min_val < 0 or max_val > 100 or min_val > max_val: raise ValueError(\\"Invalid range. Ensure 0 <= min_val <= max_val <= 100\\") for num in range(min_val, max_val + 1): if is_prime(num) or is_perfect_square(num): print(num) # Example usage print_special_numbers(0, 100)"},{"question":"Write me a recursive function in python to find the sum of all even numbers between 0 and a given limit, n. Also, add code to check the function with sample input.","solution":"def sum_even_numbers(n): Returns the sum of all even numbers between 0 and a given limit, n. if n <= 0: return 0 elif n % 2 == 0: return n + sum_even_numbers(n - 2) else: return sum_even_numbers(n - 1)"},{"question":"Create a permutation function that generates all possible permutations of a given list. However, your function should be able to handle lists of any type (numeric, strings, mixed) and should return the permutations as a list of lists. Additionally, I'll give you a piece of erroneous code as a reference to improve upon or correct.","solution":"from itertools import permutations def generate_permutations(lst): Generates all possible permutations of a given list. Args: lst (list): A list of elements (numeric, strings, mixed) Returns: list: A list of all permutations (each permutation is a list) return [list(p) for p in permutations(lst)]"},{"question":"Given a series of numbers from 1 to 100, use a for loop and an if statement to print only the prime numbers and the sum of all prime numbers. Additionally, you are required to implement this functionality as a function called \\"print_prime_numbers_and_sum\\" that takes no arguments and returns the sum of all prime numbers. You should also include a check function to verify the correctness of your implementation.","solution":"def print_prime_numbers_and_sum(): Prints prime numbers from 1 to 100 and returns the sum of all prime numbers in this range. def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True prime_sum = 0 for num in range(1, 101): if is_prime(num): print(num) prime_sum += num return prime_sum # Check function to verify the correctness of the implementation def check_sum_of_primes(): expected_prime_sum = 1060 actual_prime_sum = print_prime_numbers_and_sum() assert expected_prime_sum == actual_prime_sum, f\\"Expected {expected_prime_sum} but got {actual_prime_sum}\\""},{"question":"Write a correct Python program to extract all words from a given sentence which have 4 or more characters.","solution":"def extract_words(sentence): Returns a list of words from the given sentence that have 4 or more characters. Parameters: sentence (str): The sentence from which to extract words. Returns: List[str]: A list of extracted words with 4 or more characters. words = sentence.split() return [word for word in words if len(word) >= 4]"},{"question":"Create a Python program that reads a text document and counts the occurrences of every word in the document.","solution":"def count_word_occurrences(file_path): Reads a text document and counts the occurrences of every word in the document. Parameters: file_path (str): The path to the text document. Returns: dict: A dictionary where keys are words and values are the count of occurrences of those words in the document. word_count = {} with open(file_path, 'r') as file: for line in file: # Remove punctuation and convert to lower case words = ''.join(char if char.isalnum() else ' ' for char in line).lower().split() for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"How to combine and then remove consecutively repeated elements from an array.","solution":"def combine_remove_consecutive(arr): Combines an array and removes consecutively repeated elements. Args: arr (list): A list of elements. Returns: list: A new list with consecutive duplicates removed. if not arr: return [] result = [arr[0]] for i in range(1, len(arr)): if arr[i] != arr[i - 1]: result.append(arr[i]) return result"},{"question":"Find and compare the algorithms used for sorting a given list of numbers in descending order using only bitwise operations. Provide a detailed explanation of each algorithm's approach, time complexity, and space complexity. Additionally, include practical implementations and code snippets for each algorithm to further illustrate their usage and efficiency in solving the given problem. Consider extending the question to include additional constraints, such as sorting a list of non-integer numbers or handling duplicate values, to further challenge the AI systems.","solution":"def bitwise_swap(a, b): if a != b: a = a ^ b b = a ^ b a = a ^ b return a, b def bitwise_bubble_sort(arr): Sorts an array in descending order using Bitwise Bubble Sort. n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] < arr[j + 1]: arr[j], arr[j + 1] = bitwise_swap(arr[j], arr[j + 1]) return arr def bitwise_odd_even_sort(arr): Sorts an array in descending order using Bitwise Odd-Even Sort. n = len(arr) is_sorted = False while not is_sorted: is_sorted = True for i in range(1, n - 1, 2): if arr[i] < arr[i + 1]: arr[i], arr[i + 1] = bitwise_swap(arr[i], arr[i + 1]) is_sorted = False for i in range(0, n - 1, 2): if arr[i] < arr[i + 1]: arr[i], arr[i + 1] = bitwise_swap(arr[i], arr[i + 1]) is_sorted = False return arr"},{"question":"Craft a Python code that can substitute each given character in a sequence of letters with its immediate successor in the alphabetical order.","solution":"def shift_characters(s): Shift each character in the string to its immediate successor in the alphabetical order. 'a' becomes 'b', 'b' becomes 'c', ..., 'y' becomes 'z', and 'z' becomes 'a'. Only alphabetic characters are affected. Non-alphabetic characters remain unchanged. result = [] for char in s: if char.isalpha(): if char == 'z': result.append('a') elif char == 'Z': result.append('A') else: result.append(chr(ord(char) + 1)) else: result.append(char) return ''.join(result)"},{"question":"Using the programming language Python, write a program that reads in a CSV file containing a list of employees and their salaries, and outputs the average salary. Additionally, modify the program to output the median salary and the salary range (highest salary minus lowest salary) for the employee dataset. Also, add a function that returns the employee with the highest salary and their name. Please include comments explaining your code.","solution":"import csv import statistics def read_csv(file_path): Reads a CSV file and returns a list of dictionaries containing employee data. employees = [] with open(file_path, mode='r') as file: csv_reader = csv.DictReader(file) for row in csv_reader: row['Salary'] = float(row['Salary']) employees.append(row) return employees def average_salary(employees): Returns the average salary of the employees. salaries = [employee['Salary'] for employee in employees] return sum(salaries) / len(salaries) def median_salary(employees): Returns the median salary of the employees. salaries = [employee['Salary'] for employee in employees] return statistics.median(salaries) def salary_range(employees): Returns the range of salaries (highest salary - lowest salary). salaries = [employee['Salary'] for employee in employees] return max(salaries) - min(salaries) def highest_salary_employee(employees): Returns the employee (name and salary) with the highest salary. highest_salary_emp = max(employees, key=lambda x: x['Salary']) return highest_salary_emp['Name'], highest_salary_emp['Salary'] # Example usage: # employees = read_csv('employees.csv') # print(average_salary(employees)) # print(median_salary(employees)) # print(salary_range(employees)) # print(highest_salary_employee(employees))"},{"question":"Develop an intricate Python program that calculates the median of a list of numbers provided by the user. The list should include a variable number of elements, considering only numerical values. The program should also include error handling for non-numeric values and empty lists. Additionally, the program should present the sorted list and the median in a formatted and readable way.","solution":"def calculate_median(numbers): Calculates the median of a list of numbers. :param numbers: list of numbers :return: median value if not numbers: raise ValueError(\\"The list is empty\\") numbers = sorted(numbers) # Sort the list n = len(numbers) mid = n // 2 if n % 2 == 0: # If even, average of the two middle numbers median = (numbers[mid - 1] + numbers[mid]) / 2 else: # If odd, the middle number median = numbers[mid] return numbers, median def validate_numbers(input_list): Validates if the input list contains only numbers. :param input_list: list containing elements to be validated :return: list of valid numbers valid_numbers = [] for item in input_list: try: number = float(item) # Converts string to float valid_numbers.append(number) except ValueError: # Skip if conversion fails continue return valid_numbers"},{"question":"My exercise needs me to return words from 2 different arrays. I need to return a concatenated string/word that contains char from the first & second arrays alternately starting with the first array.","solution":"def alternate_concat(arr1, arr2): Concatenates characters from two arrays alternately, starting with the first array. result = [] len1, len2 = len(arr1), len(arr2) min_len = min(len1, len2) for i in range(min_len): result.append(arr1[i]) result.append(arr2[i]) if len1 > min_len: result.extend(arr1[min_len:]) if len2 > min_len: result.extend(arr2[min_len:]) return ''.join(result)"},{"question":"Generate Python code to calculate the maximum depth of a tree data structure using recursion. Remember to factor in edge cases such as an empty tree and unbalanced trees.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_depth(root): Returns the maximum depth of a binary tree using recursion. :param root: TreeNode, root of the binary tree :return: int, maximum depth of the tree if root is None: return 0 return 1 + max(max_depth(root.left), max_depth(root.right))"},{"question":"Write a function that takes an array of strings as its input and returns the longest palindrome string. A palindrome is a string that reads the same backward as forward, for example, \\"madam\\" or \\"racecar\\".","solution":"def longest_palindrome(strings): Returns the longest palindrome string from the input array of strings. If there is a tie in length, the first one encountered in the array is returned. If no palindromes exist, returns an empty string. def is_palindrome(s): return s == s[::-1] longest = \\"\\" for s in strings: if is_palindrome(s) and len(s) > len(longest): longest = s return longest"},{"question":"Can you provide a Python code for linear search algorithm? It should take an array and a value as input, and return the index of the value if it exists in the array. If the value is not found, it should return -1. Please make sure the code is properly commented and uses meaningful variable names.","solution":"def linear_search(array, value): Performs a linear search on an array to find the index of a given value. Parameters: array (list): The list to search through. value: The value to search for. Returns: int: The index of the value if found, otherwise -1. for index, element in enumerate(array): if element == value: return index return -1"},{"question":"Use a programming language to generate the Fibonacci sequence up to the 100th number. Additionally, the program should only use an iterative approach and no recursion is allowed. Furthermore, the program should optimize the algorithm to have a time complexity of O(n) and a space complexity of O(1), where n is the input number.","solution":"def fibonacci_100(): Generates the Fibonacci sequence up to the 100th number. The first two Fibonacci numbers are 0 and 1. fib_sequence = [] a, b = 0, 1 for _ in range(100): fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Given a list of length N, and an additional integer k, the goal is to implement reverse function in Python which reverses the order of the initial k elements and also the remaining elements separately in the given list.","solution":"def reverse_k_elements(lst, k): Reverses the order of the initial k elements and also the remaining elements separately in the given list. Parameters: lst (list): The list to be reversed. k (int): The number of initial elements to reverse. Returns: list: The modified list with initial k elements reversed and the remaining elements reversed separately. if k > len(lst): raise ValueError(\\"k should be less than or equal to the length of the list\\") return lst[:k][::-1] + lst[k:][::-1]"},{"question":"Input a string and print all its permutations in lexicographic order. The string may contain duplicate characters.","solution":"def lexicographic_permutations(s): Returns all permutations of the input string 's' in lexicographic order. from itertools import permutations # Generate all possible permutations perm = sorted(set(''.join(p) for p in permutations(s))) return perm"},{"question":"Create a function in Python that takes two parameters, start and end, and returns the sum of the squares of all numbers between them. If the start parameter is greater than the end parameter, return an error message stating \\"Start parameter should be less than or equal to the end parameter.\\"","solution":"def sum_of_squares(start, end): Returns the sum of the squares of all numbers between start and end (inclusive). If start is greater than end, returns an error message. if start > end: return \\"Start parameter should be less than or equal to the end parameter.\\" return sum(i**2 for i in range(start, end + 1))"},{"question":"Check if a URL is a valid URL using Python, considering various protocols, IP addresses, and domain formats. Also, differentiate between valid and invalid usernames for the URL.","solution":"import re from urllib.parse import urlparse def is_valid_url(url): Validates a URL by checking its scheme, netloc, and path. pattern = re.compile( r'^(?:http|ftp|https)://' # http://, https://, ftp:// r'(?:(?:[a-zA-Z0-9-_]+.)+[a-zA-Z]{2,6}|' # Domain r'localhost|' # Localhost r'd{1,3}.d{1,3}.d{1,3}.d{1,3}|' r'[?[A-Fa-f0-9]*:[A-Fa-f0-9:]+]?)' # IPv6 r'(?::d+)?' # Optional port r'(?:/?|[/?]S+)', re.IGNORECASE) return re.match(pattern, url) is not None def is_valid_username(url): Validates the username part of the URL. parsed_url = urlparse(url) if parsed_url.username is not None: # Check if username only contains valid characters username_pattern = re.compile(r'^[a-zA-Z0-9_.-]+', re.IGNORECASE) return re.match(username_pattern, parsed_url.username) is not None return True # No username is also valid"},{"question":"Write a program that prints the following string output: \\"Hello, <name>!\\" in reverse order without using string manipulation methods, like reverse(). Your program should take a name as an input and disregard any non-alphabetical symbol.","solution":"def reverse_hello_name(name): Takes a name and prints \\"Hello, <name>!\\" in reverse order, disregarding any non-alphabetical symbols. filtered_name = ''.join(c for c in name if c.isalpha()) reversed_output = \\"!\\"+filtered_name[::-1]+\\",olleH\\" return reversed_output"},{"question":"Develop a Python 'for' loop which demonstrates progressive increase of a value by exponentiation, with the specific starting integer being 1 and the total cycle count set and input by the user. Make sure to incorporate modularity and time complexity conservativeness in your code to handle large input efficiently. Given number can go up to 10^6.","solution":"def progressive_exponentiation(cycles): Returns a list of values demonstrating progressive increase of a value by exponentiation. The starting integer is 1, and the cycle count is set and input by the user. :param cycles: int, the total cycle count :returns: list of int, values after each exponentiation step results = [] current_value = 1 for i in range(cycles): current_value **= 2 # To prevent excessively large values, we can cap and store the result of current_value % (cycle + 2) # This cap prevents values getting too large and keeps operations efficient current_value %= (i + 2) results.append(current_value) return results"},{"question":"In Python, how can I determine if an object is iterable or not? I am looking for a generalized approach to check iterability for all objects, not just lists, tuples, sets, or dictionaries. For instance, I have a class 'foo' and an instance 'f'. I can easily determine if 'f' is iterable by using the type function, but I would like to avoid using specific type checks. My current method is shown below, but I am wondering if there is a better way, possibly using an 'isinstance' clause to check if a given object is 'iterable' without specifying the iterable type.","solution":"from collections.abc import Iterable def is_iterable(obj): Checks if the given object is iterable. return isinstance(obj, Iterable)"},{"question":"As a programmer writing Python code, you are tasked with creating a basic blockchain. Please provide a step-by-step guide on how to achieve this. Your explanation should be concise and easy to understand for beginners, and should include code examples for each step.","solution":"import hashlib import time class Block: def __init__(self, index, previous_hash, timestamp, data, hash): self.index = index self.previous_hash = previous_hash self.timestamp = timestamp self.data = data self.hash = hash def calculate_hash(index, previous_hash, timestamp, data): value = f\\"{index}{previous_hash}{timestamp}{data}\\".encode() return hashlib.sha256(value).hexdigest() def create_genesis_block(): # Manually construct a block with index 0 and arbitrary previous hash return Block(0, \\"0\\", int(time.time()), \\"Genesis Block\\", calculate_hash(0, \\"0\\", int(time.time()), \\"Genesis Block\\")) def create_new_block(previous_block, data): index = previous_block.index + 1 timestamp = int(time.time()) previous_hash = previous_block.hash hash = calculate_hash(index, previous_hash, timestamp, data) return Block(index, previous_hash, timestamp, data, hash) def create_blockchain(data): blockchain = [create_genesis_block()] for block_data in data: new_block = create_new_block(blockchain[-1], block_data) blockchain.append(new_block) return blockchain"},{"question":"Create a Python function that converts a list of numbers into a list of strings formatted to two decimal places.","solution":"def format_list_to_two_decimal_places(numbers): Converts a list of numbers into a list of strings formatted to two decimal places. Parameters: numbers (list): List of numbers. Returns: list: List of numbers formatted as strings with two decimal places. return [f\\"{num:.2f}\\" for num in numbers]"},{"question":"Given a text string and a list of dictionary words, write a Python program to determine if the string can be segmented into one or more concatenated dictionary words.","solution":"def can_segment_string(s, word_dict): Determines if the string s can be segmented into one or more concatenated dictionary words in word_dict. word_set = set(word_dict) n = len(s) dp = [False] * (n + 1) dp[0] = True for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[n]"},{"question":"Given multiple YAML formatted strings, write a program that converts these strings into JSON objects, merges them on a defined key, and finally sorts their keys in a hierarchical order based on a given set of rules.","solution":"import yaml import json def parse_and_convert(yaml_strings): Parses multiple YAML formatted strings and converts them into JSON objects. json_objects = [yaml.safe_load(yaml_str) for yaml_str in yaml_strings] return json_objects def merge_json_objects(json_objects, merge_key): Merges JSON objects based on a defined key. merged = {} for obj in json_objects: if merge_key in obj: merged_key_value = obj[merge_key] if merged_key_value not in merged: merged[merged_key_value] = {} merged[merged_key_value].update(obj) return merged def sort_keys_hierarchical(merged_object, key_order): Sorts the keys of the merged object in a hierarchical order based on defined rules. def sort_key(key): try: return key_order.index(key) except ValueError: return len(key_order) sorted_object = {} for key in sorted(merged_object, key=sort_key): if isinstance(merged_object[key], dict): sorted_object[key] = sort_keys_hierarchical(merged_object[key], key_order) else: sorted_object[key] = merged_object[key] return sorted_object # Example usage: def process_yaml_strings(yaml_strings, merge_key, key_order): json_objects = parse_and_convert(yaml_strings) merged_object = merge_json_objects(json_objects, merge_key) sorted_object = sort_keys_hierarchical(merged_object, key_order) return sorted_object # Example YAML strings yaml_strings = [ id: 1 name: Object1 description: The first object , id: 2 name: Object2 description: The second object , id: 1 extra: additional info ] # Merge key and key order merge_key = \\"id\\" key_order = [\\"id\\", \\"name\\", \\"description\\", \\"extra\\"] # Process the example result = process_yaml_strings(yaml_strings, merge_key, key_order) print(json.dumps(result, indent=2))"},{"question":"Write a function in Python named \\"removeDuplicates\\" that takes a list of elements and returns a list that contains only the unique elements without any duplicates. The order of the elements should not matter in the result.","solution":"def removeDuplicates(lst): Returns a list with unique elements from the input list. The order of elements in the result does not matter. return list(set(lst))"},{"question":"Create a Python program that takes two lists of integers and prints the common elements of both lists","solution":"def common_elements(list1, list2): Returns a list of common elements in both list1 and list2. # Convert lists to sets to find intersection set1 = set(list1) set2 = set(list2) # Find common elements and convert to list common = list(set1 & set2) return common"},{"question":"You are given a code snippet that contains annotations for function names in two different languages, English and Chinese. Your task is to write a program that extracts the function names in both languages and pairs them together. The function names are enclosed within triple quotes and are written in the format \\"English name\\" and \\"中文名字\\".","solution":"import re def extract_function_names(code): Extracts function names in English and Chinese from the given code snippet. Args: code (str): A string containing annotated function names. Returns: dict: A dictionary where each key is an English function name and the value is the corresponding Chinese function name. # Regular expression to match pairs of \\"English name\\" and \\"中文名字\\" pattern = re.compile(r'\\"(.*?)\\"s+和s+\\"(.*?)\\"') matches = pattern.findall(code) # Construct the dictionary names_dict = {english: chinese for english, chinese in matches} return names_dict"},{"question":"Write a Python program to evaluate arithmetic expressions. The expression will be given as a string and consist of numbers, parentheses, and the four basic arithmetic operators. The expression is always well-formed, with all parentheses matched.","solution":"def evaluate_expression(expression): Evaluate an arithmetic expression. Args: expression (str): A string containing the arithmetic expression. Returns: float: The result of the arithmetic evaluation. import math from collections import deque def apply_operation(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == '+': values.append(left + right) elif operator == '-': values.append(left - right) elif operator == '*': values.append(left * right) elif operator == '/': values.append(left / right) def precedence(op): if op in ('+', '-'): return 1 if op in ('*', '/'): return 2 return 0 def calculate(expression): values = deque() operators = deque() i = 0 while i < len(expression): if expression[i] == ' ': i += 1 continue if expression[i] == '(': operators.append(expression[i]) i += 1 elif expression[i].isdigit() or expression[i] == '.': val = 0 while (i < len(expression) and (expression[i].isdigit() or expression[i] == '.')): if expression[i] == '.': i += 1 decimal_place = 1 while i < len(expression) and expression[i].isdigit(): val += (int(expression[i]) * (10 ** -decimal_place)) decimal_place += 1 i += 1 else: val = (val * 10) + int(expression[i]) i += 1 values.append(val) elif expression[i] == ')': while operators and operators[-1] != '(': apply_operation(operators, values) operators.pop() i += 1 else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operation(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operation(operators, values) return values[-1] return calculate(expression)"},{"question":"Reverse the order of an array, but do not use any built-in functions or libraries. The input array will always contain at least 10 elements and at most 1000 elements. The time complexity of your solution should be O(n), where n is the length of the input array.","solution":"def reverse_array(arr): Reverses the order of the array without using any built-in functions or libraries. n = len(arr) for i in range(n // 2): arr[i], arr[n - 1 - i] = arr[n - 1 - i], arr[i] return arr"},{"question":"I want to simulate a poker game which uses 5 community cards and 2 cards for each player (as in Texas Holdem). Given that we know all the cards used in the hand (i.e. 7 cards for each player), how can I best create a function in Python that evaluates the best 5-card combination of each possible player's hands and then determine the best hand.","solution":"from itertools import combinations # Rank of the cards and suits RANKS = \\"23456789TJQKA\\" SUITS = \\"CDHS\\" # Map between numerical values and ranks VALUES = {rank: i for i, rank in enumerate(RANKS, start=2)} def evaluate_hand(cards): Evaluate the best 5-card poker hand from 7 cards. Return the (ranking, best_hand). best_ranking = None best_hand = None # Generate all combinations of 5 cards from the 7 cards given for hand in combinations(cards, 5): ranking = hand_ranking(hand) if best_ranking is None or ranking > best_ranking: best_ranking = ranking best_hand = hand return best_ranking, best_hand def hand_ranking(hand): Determines the ranking of a 5-card poker hand. Returns a tuple representing the rank. The higher the tuple, the better the rank. values = sorted((VALUES[card[0]] for card in hand), reverse=True) suits = [card[1] for card in hand] flush = len(set(suits)) == 1 straight = (values[0] - values[-1] == 4 and len(set(values)) == 5) or values == [14, 5, 4, 3, 2] counts = {val: values.count(val) for val in values} count_values = sorted(counts.items(), key=lambda x: (x[1], x[0]), reverse=True) if flush and straight: return (8, values) if values != [14, 5, 4, 3, 2] else (8, [5, 4, 3, 2, 1]) if count_values[0][1] == 4: return (7, count_values[0][0], count_values[1][0]) if count_values[0][1] == 3 and count_values[1][1] == 2: return (6, count_values[0][0], count_values[1][0]) if flush: return (5, values) if straight: return (4, values) if values != [14, 5, 4, 3, 2] else (4, [5, 4, 3, 2, 1]) if count_values[0][1] == 3: return (3, count_values[0][0], sorted([v for v, c in count_values[1:]], reverse=True)) if count_values[0][1] == 2 and count_values[1][1] == 2: return (2, count_values[0][0], count_values[1][0], count_values[2][0]) if count_values[0][1] == 2: return (1, count_values[0][0], sorted([v for v, c in count_values[1:]], reverse=True)) return (0, sorted(values, reverse=True)) def determine_best_hand(player_hands): Determines the best hand among multiple players. Arguments: - player_hands: List of tuples, each tuple containing a player's 7 cards. Returns a tuple of (best_hand_ranking, best_hand_cards, best_player_index) best_ranking = None best_hand = None best_player_index = -1 for idx, hand in enumerate(player_hands): ranking, best_combo = evaluate_hand(hand) if best_ranking is None or ranking > best_ranking: best_ranking = ranking best_hand = best_combo best_player_index = idx return best_ranking, best_hand, best_player_index"},{"question":"Create an array of 5 strings, each containing a unique palindrome, and print it. Additionally, add a condition to check if a given string is a palindrome or not and print \\"Palindrome\\" or \\"Not a palindrome\\" accordingly.","solution":"def create_palindrome_array(): Returns an array of 5 unique palindromes. return [\\"racecar\\", \\"level\\", \\"deified\\", \\"rotor\\", \\"civic\\"] def is_palindrome(s): Checks if a given string s is a palindrome. Returns \\"Palindrome\\" or \\"Not a palindrome\\". if s == s[::-1]: return \\"Palindrome\\" else: return \\"Not a palindrome\\" # Create and print the array of palindromes palindromes = create_palindrome_array() print(palindromes) # Test the palindrome check function test_strings = [\\"racecar\\", \\"hello\\", \\"level\\", \\"world\\", \\"civic\\"] for string in test_strings: print(f\\"{string}: {is_palindrome(string)}\\")"},{"question":"Create a named tuple called \`transaction\` with fields \`amount\`, \`date\`, and \`category\`. Write a function called \`sort_transactions\` that takes a list of transactions and a category as input and returns a list of transactions sorted by date in descending order, but only for the given category. If no category is provided, sort all transactions by date in descending order.","solution":"from collections import namedtuple from datetime import datetime # Define the named tuple Transaction = namedtuple('Transaction', ['amount', 'date', 'category']) def sort_transactions(transactions, category=None): Sorts a list of transactions by date in descending order. If a category is provided, only transactions of that category are sorted and returned. :param transactions: List of Transaction named tuples. :param category: Category to filter transactions by. If None, sort all transactions. :return: List of sorted transactions. if category: filtered_transactions = [t for t in transactions if t.category == category] else: filtered_transactions = transactions # Sort transactions by date in descending order return sorted(filtered_transactions, key=lambda x: datetime.strptime(x.date, '%Y-%m-%d'), reverse=True)"},{"question":"Merge the following two sorted lists into a single sorted list in Python, but you are not allowed to use the merge sort algorithm. Additionally, you are not allowed to use any built-in sorting functions or libraries. You must implement your own sorting algorithm.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list without using built-in sorting functions or merge sort algorithm. merged_list = [] i, j = 0, 0 # Traverse both lists and append smaller element to merged_list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements of list1 if any while i < len(list1): merged_list.append(list1[i]) i += 1 # Append remaining elements of list2 if any while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Assuming you have a list of common nicknames for names, write a function in Python that takes a full name as input and returns the most common nickname associated with that name. If there is no common nickname for the given name, return the full name itself.","solution":"# Dictionary mapping full names to their most common nicknames NICKNAMES = { \\"Alexander\\": \\"Alex\\", \\"Katherine\\": \\"Kate\\", \\"Elizabeth\\": \\"Liz\\", \\"William\\": \\"Will\\", \\"Margaret\\": \\"Maggie\\" # More names can be added here } def get_nickname(full_name): Returns the most common nickname for the given full name. If there is no common nickname for the given name, returns the full name itself. return NICKNAMES.get(full_name, full_name)"},{"question":"Given a directed graph, write a function to determine if there is a route between two nodes using Depth First Search (DFS).","solution":"def dfs(graph, start, goal, visited=None): Perform Depth First Search to find if there's a route from start to goal in the graph. Parameters: graph (dict): A dictionary representing the directed graph where keys are nodes and values are lists of neighbors. start (any): The node to start the search from. goal (any): The node to search for a route to. visited (set): A set of already visited nodes to avoid cycles. Returns: bool: True if there is a route from start to goal, False otherwise. if visited is None: visited = set() if start == goal: return True visited.add(start) for neighbor in graph.get(start, []): if neighbor not in visited: if dfs(graph, neighbor, goal, visited): return True return False"},{"question":"Create a Python basic version control system. It should have commands for \\"commit,\\" \\"checkout,\\" and \\"log.\\" The \\"commit\\" command should take a snapshot of the current file and save it. The \\"checkout\\" command should restore a specific version of the file. The \\"log\\" command should list all previous versions.","solution":"import os import shutil import tempfile from datetime import datetime class VersionControlSystem: def __init__(self, filename): self.filename = filename self.repo_path = os.path.join(tempfile.gettempdir(), 'vcs_repo') os.makedirs(self.repo_path, exist_ok=True) self.log_file = os.path.join(self.repo_path, 'log.txt') def commit(self): version_number = self.get_next_version_number() version_filename = f\\"{self.filename}_v{version_number}\\" shutil.copy2(self.filename, os.path.join(self.repo_path, version_filename)) with open(self.log_file, 'a') as log: log.write(f\\"{version_number}t{datetime.now()}t{version_filename}n\\") def checkout(self, version_number): version_filename = f\\"{self.filename}_v{version_number}\\" src = os.path.join(self.repo_path, version_filename) if os.path.exists(src): shutil.copy2(src, self.filename) else: raise ValueError(\\"The specified version does not exist\\") def log(self): if os.path.exists(self.log_file): with open(self.log_file, 'r') as log: logs = log.readlines() return [log.strip().split('t') for log in logs] else: return [] def get_next_version_number(self): logs = self.log() if not logs: return 1 return int(logs[-1][0]) + 1"},{"question":"here's the prompt: \\"An Python function that you can use to parse through HTML and retrieve every URL that is present in the input string.\\" Additionally, the function should only retrieve URLs that start with \\"https://\\" and exclude any URLs that contain query parameters or fragments.","solution":"import re from html.parser import HTMLParser class URLExtractingParser(HTMLParser): def __init__(self): super().__init__() self.urls = [] def handle_starttag(self, tag, attrs): if tag == 'a': for attr in attrs: if attr[0] == 'href' and attr[1].startswith('https://') and '?' not in attr[1] and '#' not in attr[1]: self.urls.append(attr[1]) def extract_https_urls(html_string): parser = URLExtractingParser() parser.feed(html_string) return parser.urls"},{"question":"Develop an algorithm to eliminate repeated characters from a string while also tracking the frequency of eliminated characters. Additionally, consider the situation where case sensitivity matters i.e. 'S' and 's' should be treated as different characters.","solution":"def eliminate_and_track_frequency(s): Eliminates repeated characters from the string while tracking the frequency of eliminated characters. Parameters: s (str): The input string from which repeated characters are eliminated. Returns: tuple: A tuple containing the new string with no repeated characters and a dictionary tracking the frequency of eliminated characters. char_seen = set() new_str = [] frequency = {} for char in s: if char in char_seen: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 else: char_seen.add(char) new_str.append(char) return ''.join(new_str), frequency"},{"question":"Write a Python function that implements the merge sort algorithm to sort an array of integers. Also, include a test harness at the bottom of your code to check the function's correctness with some test details. The test should verify the function by providing both positive and negative integers, as well as an already sorted array.","solution":"def merge_sort(arr): Function to implement merge sort algorithm. Parameter: arr (list): list of integers to sort Returns: sorted list of integers if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Function to merge two halves of the array. Parameters: left (list): left half of the array right (list): right half of the array Returns: merged and sorted list sorted_array = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: sorted_array.append(left[i]) i += 1 else: sorted_array.append(right[j]) j += 1 while i < len(left): sorted_array.append(left[i]) i += 1 while j < len(right): sorted_array.append(right[j]) j += 1 return sorted_array"},{"question":"Write a Python function \`group_sequences\` that takes in two lists as input: \`sequences\` and \`k_list\`. The function should return a dictionary where each key is an element from \`k_list\`, and the corresponding value is an array of arrays. Each sub-array contains elements from \`sequences\` at indices that share the same remainder when division by the key is performed.","solution":"def group_sequences(sequences, k_list): Groups elements of the sequences based on the remainder when dividing their index by the elements of k_list. :param sequences: A list of elements to be grouped :param k_list: A list of integers used to divide the indices of the sequences :return: A dictionary where each key is an element from k_list and the value is an array of arrays containing elements from sequences at indices that share the same remainder when divided by the key. result = {} for k in k_list: groups = {} for i, value in enumerate(sequences): remainder = i % k if remainder not in groups: groups[remainder] = [] groups[remainder].append(value) result[k] = list(groups.values()) return result"},{"question":"You've decided to upgrade your ubiquitous \\"Fact about Felines\\" generator because felines, like facts, are always evolving. In addition to producing a fascinating fact about these fabulous creatures, you want your code to dynamically fetch the latest cat facts from the internet and also store users' favorite facts in a local database.","solution":"import requests import sqlite3 FACTS_API_URL = \\"https://cat-fact.herokuapp.com/facts/random\\" DATABASE_NAME = \\"cat_facts.db\\" def fetch_latest_cat_fact(): Fetches the latest cat fact from the internet. response = requests.get(FACTS_API_URL) if response.status_code == 200: return response.json().get('text') else: return None def initialize_database(): Initializes the database for storing favorite cat facts. conn = sqlite3.connect(DATABASE_NAME) cursor = conn.cursor() cursor.execute('''CREATE TABLE IF NOT EXISTS cat_facts (id INTEGER PRIMARY KEY AUTOINCREMENT, fact TEXT NOT NULL)''') conn.commit() conn.close() def store_favorite_fact(fact): Stores a user's favorite cat fact in the local database. conn = sqlite3.connect(DATABASE_NAME) cursor = conn.cursor() cursor.execute('INSERT INTO cat_facts (fact) VALUES (?)', (fact,)) conn.commit() conn.close()"},{"question":"Write a Python function to find the union of multiple sorted lists, removing duplicates, using a single pass through the arrays with attention to space efficiency.","solution":"from heapq import merge def union_sorted_lists(*lists): Returns the union of multiple sorted lists, removing duplicates. The input lists must be sorted. merged_iter = merge(*lists) union_list = [] prev = None for item in merged_iter: if item != prev: union_list.append(item) prev = item return union_list"},{"question":"Write a code that computes the product of all prime numbers within a list. If there are no prime numbers in the list, the code should return 1.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def product_of_primes(lst): Returns the product of all prime numbers in the list. If there are no prime numbers, return 1. product = 1 has_primes = False for num in lst: if is_prime(num): product *= num has_primes = True return product if has_primes else 1"},{"question":"Use the following code and rewrite it using list comprehension. In addition to this, modify the function to include any custom increment value to increase each element, provided as an argument to the function.itest","solution":"def increment_list_elements(lst, increment): Increments each element in the list by the given increment value using list comprehension. Args: lst (list of int): List of integers to increment. increment (int): Increment value to be added to each element in the list. Returns: list of int: New list with each element increased by the increment value. return [x + increment for x in lst]"},{"question":"Write a Python method that uses regular expressions to pinpoint and replace a specified pattern within a string.","solution":"import re def replace_pattern(text, pattern, replacement): Replaces all occurrences of the specified pattern in the text with the replacement. Parameters: text (str): The text to search within. pattern (str): The regular expression pattern to search for. replacement (str): The string to replace the pattern with. Returns: str: The text with the pattern replaced. return re.sub(pattern, replacement, text)"},{"question":"Using function and without using itertools Islice How can we skip the first 2 elements of a list or any iterator in Python?","solution":"def skip_first_two(iterable): This function returns an iterator with the first two elements skipped. iterable = iter(iterable) next(iterable, None) next(iterable, None) return iterable"},{"question":"Let's say I have two NumPy arrays, and I want to sum them element-wise. However, because of floating-point precision issues, some of the summed values might end up being very small numbers close to zero, which I consider as zero for my purpose. Before returning the sum, I want to round those small values to zero that are smaller than a specific threshold. Can you share a code snippet in Python to perform this operation?","solution":"import numpy as np def sum_arrays_with_threshold(arr1, arr2, threshold=1e-10): Sums two arrays element-wise and sets values smaller than the threshold to zero. Parameters: arr1 (np.ndarray): The first input array. arr2 (np.ndarray): The second input array. threshold (float): The threshold below which values are set to zero. Returns: np.ndarray: The resulting array after summing and rounding small values to zero. # Sum the arrays element-wise summed_array = np.add(arr1, arr2) # Set values smaller than the threshold to zero summed_array[np.abs(summed_array) < threshold] = 0.0 return summed_array"},{"question":"Generate a%get_request(url, headers={'accept' : 'application/json'}) function using Python to retrieve data from a RESTful API in json format.","solution":"import requests def get_request(url, headers={'accept': 'application/json'}): Sends a GET request to the given URL with the specified headers and returns the response in json format. Parameters: url (str): The URL to send the GET request to. headers (dict): The headers to include in the GET request. Returns: dict: The response from the server in json format if successful, otherwise returns None. try: response = requests.get(url, headers=headers) response.raise_for_status() # Raise HTTPError for bad responses return response.json() except requests.exceptions.RequestException as e: print(f\\"An error occurred: {e}\\") return None"},{"question":"Construct a Python function that accepts an array of integers and a desired integer as parameters. This function should not only identify the desired integer within the array, but also find and return its position of final appearance.","solution":"def find_last_occurrence(arr, target): Returns the index of the last occurrence of the target in the array. If the target is not found, returns -1. last_index = -1 for index, value in enumerate(arr): if value == target: last_index = index return last_index"},{"question":"Devise a Python function to pinpoint the position of the initial occurrence of a specified integer within a list data structure.","solution":"def find_first_occurrence(lst, target): Returns the index of the first occurrence of target in lst. If the target is not found, return -1. for index, value in enumerate(lst): if value == target: return index return -1"},{"question":"Convert the following number from decimal to octal in python: 12345. Validate that your function works by converting the octal back to decimal and checking if it equals the input. Also, format your output in such a way that the octal number is prefixed with '0o'. Moreover, implement a function that measures the efficiency of your code in terms of time complexity.","solution":"def decimal_to_octal(n): Convert a decimal number to its octal representation prefixed with '0o'. :param n: Decimal number to be converted. :return: Octal representation of the number as a string prefixed with '0o'. return oct(n) def octal_to_decimal(octal_str): Convert an octal number (as a string) to its decimal representation. :param octal_str: Octal number string prefixed with '0o'. :return: Decimal representation of the number as an integer. return int(octal_str, 8) def measure_efficiency(n): Measures the time complexity efficiency to convert decimal to octal. :param n: Decimal number to be used for measurement. :return: Efficiency of conversion in terms of time complexity. import time start_time = time.time() octal_representation = decimal_to_octal(n) end_time = time.time() return end_time - start_time"},{"question":"Hello, I am trying to write a program that rebalances a binary tree. I assume the original binary tree is an unbalanced tree. I want to finish rebalancing it and produce a new balanced binary tree. Could you provide me some help on how to solve this problem?","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(node, nodes): Traverses the binary tree in-order and stores the nodes in a list. if not node: return inorder_traversal(node.left, nodes) nodes.append(node) inorder_traversal(node.right, nodes) def build_balanced_bst(nodes, start, end): Builds a balanced binary tree from the list of nodes. if start > end: return None mid = (start + end) // 2 root = nodes[mid] root.left = build_balanced_bst(nodes, start, mid - 1) root.right = build_balanced_bst(nodes, mid + 1, end) return root def balance_bst(root): Rebalances the input unbalanced binary tree and returns a new balanced binary tree. nodes = [] inorder_traversal(root, nodes) return build_balanced_bst(nodes, 0, len(nodes) - 1)"},{"question":"Create a function in Python that takes an integer as input and returns a list of all prime numbers up to that integer. The prime numbers should be in ascending order. The function should have a time complexity of O(n * sqrt(m)), where n is the input integer and m is the largest number being checked for primality.","solution":"def is_prime(n): Determines if a number is prime. if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_numbers_up_to(n): Returns a list of all prime numbers up to and including n. primes = [] for i in range(2, n+1): if is_prime(i): primes.append(i) return primes"},{"question":"Given a function \`solveMeFirst\` that takes two integer arguments \`a\` and \`b\`, your task is to complete it by returning their sum. Then, you need to call this function inside the \`getInput\` function, which reads two integers from the standard input and passes them to \`solveMeFirst\` before printing the result.","solution":"def solveMeFirst(a, b): Returns the sum of a and b. return a + b def getInput(): a = int(input(\\"Enter the first number: \\")) b = int(input(\\"Enter the second number: \\")) result = solveMeFirst(a, b) print(result)"},{"question":"Suppose I have a set of co-ordinates & their corresponding probabilities. In other words, I have a list of all (x, y, probability) tuples. I want to write a python function which, on creating an instance, will accept these tuples and log them. Thereafter it should be able to return the probability for a given (x, y) co-ordinate. If multiple tuples share the same co-ordinates, the function should return the highest corresponding probability. If no probability is found on any matches it should return zero. Write the python code for this function.","solution":"class CoordinateProbabilities: def __init__(self, coordinates_with_probabilities): Initializes the object with a list of (x, y, probability) tuples. Args: coordinates_with_probabilities (list of tuples): List of tuples where each tuple contains x, y coordinates and their associated probability. self.coordinates_dict = {} for x, y, probability in coordinates_with_probabilities: if (x, y) in self.coordinates_dict: self.coordinates_dict[(x, y)] = max(probability, self.coordinates_dict[(x, y)]) else: self.coordinates_dict[(x, y)] = probability def get_probability(self, x, y): Returns the highest probability for the given (x, y) coordinates. Args: x (int or float): The x-coordinate. y (int or float): The y-coordinate. Returns: float: The highest probability associated with the given (x, y) coordinates. Returns 0 if the coordinates do not exist. return self.coordinates_dict.get((x, y), 0)"},{"question":"Write a program in Python to estimate the value of pi using the Monte Carlo method.","solution":"import random def estimate_pi(num_samples): Estimate the value of pi using the Monte Carlo method. Parameters: num_samples (int): Number of random samples to be used in the estimation. Returns: float: Estimated value of pi. inside_circle = 0 for _ in range(num_samples): x = random.uniform(-1, 1) y = random.uniform(-1, 1) if x**2 + y**2 <= 1: inside_circle += 1 return 4 * inside_circle / num_samples"},{"question":"Create a function that raises a ValueError when a given string is not a palindrome. Handle the ValueError. The function should also have an option to ignore case and whitespace.","solution":"def is_palindrome(s, ignore_case=True, ignore_whitespace=True): Raises a ValueError if the given string is not a palindrome. Allows ignoring case and whitespace. Parameters: s (str): The string to check. ignore_case (bool): If True, ignore case differences. ignore_whitespace (bool): If True, ignore whitespace. Raises: ValueError: If the string is not a palindrome. if ignore_whitespace: s = s.replace(\\" \\", \\"\\") if ignore_case: s = s.lower() if s != s[::-1]: raise ValueError(f\\"The string '{s}' is not a palindrome.\\") return True"},{"question":"Given a list of integers, write a function that prints the elements of the list in reverse order without using the reverse method available in Python. Also, the function should check if the provided argument is indeed a list and, if not, return an error message.","solution":"def print_reverse(lst): Prints elements of lst in reverse order without using the reverse method. If the argument is not a list, returns an error message. if not isinstance(lst, list): return \\"Error: The provided argument is not a list.\\" for i in range(len(lst)-1, -1, -1): print(lst[i])"},{"question":"In the context of computer programming, design a Python function that computes and displays the total number of leap years that have occurred up to and including a specified calendar year.","solution":"def count_leap_years(year): Returns the number of leap years from year 0 up to and including the specified year. Arguments: year -- The year up to which to count leap years. if year < 0: return 0 leap_years = year // 4 - year // 100 + year // 400 return leap_years"},{"question":"Generate a Least Recently Used (LRU) cache algorithm implementation in Python","solution":"class LRUCache: def __init__(self, capacity: int): self.cache = {} # Dictionary to store the cache entries self.capacity = capacity # Maximum capacity of the cache self.order = [] # List to store the order of usage def get(self, key: int) -> int: if key in self.cache: # Move the accessed key to the end to show it was recently used self.order.remove(key) self.order.append(key) return self.cache[key] else: return -1 def put(self, key: int, value: int) -> None: if key in self.cache: # Update the value & move the key to the end to show it was recently used self.cache[key] = value self.order.remove(key) self.order.append(key) else: if len(self.cache) >= self.capacity: # Remove the least recently used item lru_key = self.order.pop(0) del self.cache[lru_key] # Add the new key-value pair self.cache[key] = value self.order.append(key)"},{"question":"Construct a programming code segment that generates and displays both the Fibonacci series and the factorial of each term in the series, starting from the initial term of 1 and ending with the n-th term, where n is a predefined number. Additionally, calculate the time complexity of your solution.","solution":"def fibonacci_series_and_factorials(n): Generates and returns the Fibonacci series up to the n-th term and the factorial of each term in the series. def fibonacci(n): if n == 1: return [1] if n == 2: return [1, 1] fib = [1, 1] for i in range(2, n): fib.append(fib[-1] + fib[-2]) return fib def factorial(n): if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result fib_series = fibonacci(n) fact_series = [factorial(num) for num in fib_series] return fib_series, fact_series # To calculate the time complexity: # Fibonacci series generation takes O(n) time. # Factorial calculation for each generated Fibonacci number will take O(m) where m is the size of the number. # Considering in most cases factorial in a naive implementation, the average factorial computation would be O(k) where k is the sum of operations for each number in the series. # T(n) ~ O(n) + O(nk) -> Due to each factorial computed for each term, multiplied by the number of operations per number. # Final time complexity: T(n) = O(n * k)"},{"question":"Please write a code that generates a dictionary containing all six-letter words that can be formed from a given list of letters. The letters can be repeated and each word must contain at least two vowels. The code should be implemented in a way that minimizes the amount of memory used.","solution":"from itertools import product def generate_six_letter_words(letters): This function generates six-letter words from the given letters list. Each word must contain at least two vowels. Returns a dictionary containing all such valid words. vowels = {'a', 'e', 'i', 'o', 'u'} results = set() # Using a set to avoid duplicates # Generate all permutations of 6 letters for combo in product(letters, repeat=6): word = ''.join(combo) count_vowels = sum(1 for char in word if char in vowels) # Check if the word has at least two vowels if count_vowels >= 2: results.add(word) # Convert the set to a dictionary words_dict = {word: True for word in results} return words_dict"},{"question":"Given a defective function that should have generated a list of numbers from range [0, n), write a correct version of the function. Additionally, have it compute and return a list of cumulative sums of the elements at each index from the original list.","solution":"def generate_cumulative_sums(n): Generates a list of numbers from 0 to n-1 and returns a list of cumulative sums of the elements at each index. if n <= 0: return [] numbers = list(range(n)) cumulative_sums = [0] * n cumulative_sums[0] = numbers[0] for i in range(1, n): cumulative_sums[i] = cumulative_sums[i - 1] + numbers[i] return cumulative_sums"},{"question":"Write a program that takes two strings and checks if the characters in the second string exist in the first string. The program should also return the count of each character from the second string found in the first string. The order of characters should be maintained as they appear in the second string.","solution":"def characters_exist_and_count(str1, str2): Checks if the characters in str2 exist in str1 and returns the count of each character. Parameters: - str1: The string to be searched. - str2: The string containing characters to check in str1. Returns: - A dictionary with characters from str2 as keys and their count in str1 as values. count_dict = {char: str1.count(char) for char in str2 if char in str1} return count_dict"},{"question":"Write a dynamic Python function that can flip any given string - but with a twist. For an added challenge, you have to ensure that the order of the words in the sentence remain the same. In addition, retain all white spaces as they were in the original string. If the string is \\"Hello World\\", the output should be \\"olleH dlroW\\". Also, the function should manage any exceptions and react properly to edge cases, such as null or empty strings.","solution":"def flip_words_in_string(s): Returns a string with each word flipped while maintaining the order of words and spaces. Parameters: s (str): The input string Returns: str: The modified string with each word's characters reversed if s is None: return None # Split the string by spaces but keep the spaces using regular expressions import re words_with_spaces = re.findall(r'S+|s+', s) # Reverse each word, leave the spaces flipped_words_with_spaces = [word[::-1] if word.strip() else word for word in words_with_spaces] return ''.join(flipped_words_with_spaces)"},{"question":"Write a Python script to replace all the non-alphanumeric and non-ASCII characters in a string with their ASCII percent-encoded representation. For instance, \\"New York!\\" will become \\"New%20York%21\\". However, you need to ignore the percent-encoding for the following characters: '-', '_', '.', and '~'. Your program should also handle multibyte characters properly.","solution":"import urllib.parse def percent_encode(s): Replaces all the non-alphanumeric and non-ASCII characters in a string with their ASCII percent-encoded representation, excluding '-', '_', '.', and '~'. Handles multi-byte characters properly. safe_characters = '-_.~' encoded_string = urllib.parse.quote(s, safe=safe_characters) return encoded_string"},{"question":"Write a program in Python that rotates a list of N elements to the right by K steps, such that the element after the last element comes next, and the element before the first element becomes the new first element. The rotation should handle unwrapping the list when K exceeds N.","solution":"def rotate_list(lst, k): Rotates the list \`lst\` to the right by \`k\` steps. Parameters: lst (list): The list to be rotated. k (int): The number of steps to rotate the list. Returns: list: The rotated list. if not lst: return lst k = k % len(lst) # Ensure k is within the bounds of the list length return lst[-k:] + lst[:-k]"},{"question":"Suppose that you are given two hash tables, 'teachers' and 'students', where 'teachers' contain {1: 'Math', 2: 'English', 3: 'Science'} and 'students' contain {1: 'John', 2: 'Mike', 3: 'Sarah'}. Your function should pair each student with a subject from the teachers hash table and return a dictionary where the keys are the student's names, the values are the subjects, such as {'John': 'Math', 'Mike': 'English', 'Sarah': 'Science'}. Note, the student id and teacher id does not necessarily have to match. Write a function to solve the problem.","solution":"def pair_students_with_subjects(teachers, students): Pairs each student with a subject from the teachers hash table. Args: - teachers (dict): A dictionary where keys are teacher IDs and values are subjects. - students (dict): A dictionary where keys are student IDs and values are student names. Returns: - dict: A dictionary where keys are student names and values are subjects. paired_dict = {} for student_id, student_name in students.items(): if student_id in teachers: paired_dict[student_name] = teachers[student_id] return paired_dict # Given dictionaries teachers = {1: 'Math', 2: 'English', 3: 'Science'} students = {1: 'John', 2: 'Mike', 3: 'Sarah'} paired_students_subjects = pair_students_with_subjects(teachers, students) print(paired_students_subjects) # Output: {'John': 'Math', 'Mike': 'English', 'Sarah': 'Science'}"},{"question":"You need to generate a string of all dates between two dates (informat: MM-dd-yyyy) given the start date and end date. In addition, write a function that validates that the given dates are correct according to the Gregorian calendar. The program should be able to handle leap years.","solution":"from datetime import datetime, timedelta def generate_dates_between(start_date, end_date): Generates a string of all dates between start_date and end_date inclusive. Dates are in the format MM-dd-yyyy. Parameters: - start_date (str): The start date in format MM-dd-yyyy. - end_date (str): The end date in format MM-dd-yyyy. Returns: - str: A string of dates separated by commas. try: start = datetime.strptime(start_date, \\"%m-%d-%Y\\") end = datetime.strptime(end_date, \\"%m-%d-%Y\\") except ValueError as e: raise ValueError(\\"The provided dates are not in the correct format or not valid\\") from e if start > end: raise ValueError(\\"Start date must be before or equal to end date\\") delta = end - start dates = [(start + timedelta(days=i)).strftime(\\"%m-%d-%Y\\") for i in range(delta.days + 1)] return ','.join(dates) # Function to validate Gregorian dates def is_valid_date(date_str): Validates if the provided date is a correct date according to the Gregorian calendar. The date must be in the format MM-dd-yyyy. Parameters: - date_str (str): The date string to validate. Returns: - bool: True if the date is valid, False otherwise. try: datetime.strptime(date_str, \\"%m-%d-%Y\\") return True except ValueError: return False"},{"question":"Create a Python function that reverses the order of words in a string, but keeps the order of the characters in each word the same. This function should also handle multiple spaces between words, leading and trailing spaces, and words with mixed case. The function should be titled \\"reverse_order_case_sensitive\\".","solution":"def reverse_order_case_sensitive(s): Reverses the order of words in a string, keeping the order of characters in each word the same. Handles multiple spaces between words, leading and trailing spaces, and words with mixed case. words = s.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"develop a python function that accepts two given lists of integers, and creates a new list with the unique elements from both lists. Additionally, the function should implement error handling in case an element is not of integer datatype. Also, the function should be optimized for large input lists so as to maintain efficiency.","solution":"def merge_unique_lists(list1, list2): Accepts two lists of integers and returns a new list with unique elements from both lists. # Verify both lists if not all(isinstance(x, int) for x in list1): raise ValueError(\\"All elements in list1 must be integers\\") if not all(isinstance(x, int) for x in list2): raise ValueError(\\"All elements in list2 must be integers\\") # Utilize set for O(1) average time complexity for look-ups, insertions, and deletions unique_elements = set() unique_elements.update(list1) unique_elements.update(list2) # Convert set back to list return list(unique_elements)"},{"question":"Write a Python function that extracts all the unique words from a given string and returns them in a list. The function should ignore case sensitivity and punctuation. Additionally, it should remove any stopwords (common words like 'the', 'is', 'in', etc.) that are commonly found in English. The function should also count the frequency of each word and return a dictionary with the word as the key and its frequency as the value.","solution":"import string def extract_unique_words(text, stopwords): Extracts unique words from a given string and returns their frequency dictionary. The function ignores case sensitivity and punctuation and removes any stopwords that are commonly found in English. Parameters: text (str): The input string from which words need to be extracted. stopwords (set): A set of stopwords to be removed. Returns: dict: A dictionary with the word as the key and its frequency as the value. # Convert text to lowercase text = text.lower() # Remove punctuation from the text text = text.translate(str.maketrans('', '', string.punctuation)) # Split text into words words = text.split() # Filter out stopwords and count word frequencies word_freq = {} for word in words: if word not in stopwords: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 return word_freq"},{"question":"Create a programming code snippet that modifies the components of a Python list 'lst' with its elements as [2, 4, 6, 8] directly within the list, without creating a new one. Ensure in place modification keeps the resulting list sorted.","solution":"def modify_list_in_place(lst): Modify the input list in place to [1, 3, 5, 7]. lst[0] = 1 lst[1] = 3 lst[2] = 5 lst[3] = 7 # Example usage lst = [2, 4, 6, 8] modify_list_in_place(lst) # lst should now be [1, 3, 5, 7]"},{"question":"How would you implement a function to determine if a number is even or odd in Python, without using the modulo operator (%) and with a time complexity of O(1)?","solution":"def is_even(number): Returns True if the number is even, False otherwise. This implementation uses bitwise AND operator to determine parity. return (number & 1) == 0"},{"question":"I have a list of integers and I want to sum their values. However, I want to achieve this without using any loops. How can I accomplish this using Python?","solution":"def sum_list(lst): Returns the sum of the integers in the list. return sum(lst)"},{"question":"Translate a given integer value to its roman numeral equivalent in uppercase letters. Ensure that the function can handle values from 1 to 3999, inclusive. Also, provide a piece of erroneous code as a starting point.","solution":"def int_to_roman(num): Converts an integer to a roman numeral. if not 1 <= num <= 3999: raise ValueError(\\"Value must be between 1 and 3999\\") roman_numerals = [ ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400), ('C', 100), ('XC', 90), ('L', 50), ('XL', 40), ('X', 10), ('IX', 9), ('V', 5), ('IV', 4), ('I', 1) ] result = [] for numeral, value in roman_numerals: while num >= value: result.append(numeral) num -= value return ''.join(result)"},{"question":"Write a Python script that attempts to open a given real webpage and returns the number and list of images present on that webpage. You need to include exception handling to manage potential errors and specify different user agents to prevent your IP from being blocked.","solution":"import requests from bs4 import BeautifulSoup def fetch_images(url): Fetches the number and list of image URLs from a given webpage. Args: url (str): Webpage URL to fetch the images from. Returns: tuple: (number_of_images, list_of_image_urls) user_agents = [ 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.1 Safari/605.1.15', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0' ] headers = { 'User-Agent': user_agents[0] } try: response = requests.get(url, headers=headers, timeout=10) response.raise_for_status() except requests.exceptions.RequestException as e: print(f\\"Error fetching the URL {url}: {e}\\") return 0, [] soup = BeautifulSoup(response.content, 'html.parser') images = soup.find_all('img') image_urls = [img['src'] for img in images if 'src' in img.attrs] return len(image_urls), image_urls"},{"question":"Given the coordinates of two points, write a Python function to calculate the distance between them. Then, write a program to read the coordinates of N such points from the standard input and calculate the distance between each pair of points. Your program should output the pair of points that are closest to each other and their distance. Additionally, limit your usage of python libraries such as numpy or math, i.e., avoid using the sqrt function for calculating the square root. Also, devise a way to handle inaccurate distances due to floating point errors.","solution":"def distance_squared(x1, y1, x2, y2): Returns the squared distance between two points (x1, y1) and (x2, y2). return (x2 - x1) ** 2 + (y2 - y1) ** 2 def closest_pair(points): Given a list of points, returns the pair of points that are closest to each other and their distance. Uses the squared distance to avoid issues with floating point errors. min_distance = float('inf') closest_points = None for i in range(len(points)): for j in range(i + 1, len(points)): dist = distance_squared(points[i][0], points[i][1], points[j][0], points[j][1]) if dist < min_distance: min_distance = dist closest_points = (points[i], points[j]) actual_distance = int(min_distance ** 0.5 + 0.5) # Convert squared distance to actual distance return closest_points, actual_distance def read_points(n, coordinates): Reads n coordinates and returns them as a list of tuples. points = [] for i in range(n): x, y = coordinates[i] points.append((x, y)) return points # Example Usage: # n = 4 # coordinates = [(1, 2), (3, 4), (6, 8), (2, 3)] # points = read_points(n, coordinates) # closest_points, distance = closest_pair(points) # print(closest_points, distance) # Outputs the closest pair of points and their distance"},{"question":"Write a function that takes a string, checks if it's a palindrome, and returns a boolean value. Additionally, the function should handle strings with special characters and spaces, and should be case-insensitive. If the string is not a palindrome, the function should also return the longest substring that is a palindrome.","solution":"def is_palindrome(s): Returns a boolean indicating if \`s\` is a palindrome, ignoring case, spaces, and special characters. If \`s\` is not a palindrome, returns the longest palindromic substring. import re # Clean the string cleaned_s = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if cleaned string is a palindrome if cleaned_s == cleaned_s[::-1]: return True # Function to find the longest palindromic substring def longest_palindromic_substring(s): n = len(s) if n == 0: return \\"\\" longest = s[0] def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] for i in range(n): odd_palindrome = expand_around_center(i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome even_palindrome = expand_around_center(i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest # Return the longest palindrome substring of the original string return longest_palindromic_substring(cleaned_s)"},{"question":"Design a Python dictionary that consolidates the combined OEM emissions and recall data for each car model. The nested dictionary should have \\"make\\" as a key with a list of \\"models\\" as values, where each model is a dictionary including \\"year,\\" \\"engines\\" (with corresponding displacement and horsepower details), \\"fuelType,\\" \\"recallIssue,\\" and \\"emissionsStatus\\" as keys. If there is no recall or emissions data available, the value should be \\"N/A\\". Additionally, the function should be versatile enough to accommodate the addition of new models, as demonstrated in the example. To accomplish this, you should use the provided oemData array, which includes detailed information about each car's production year, make, model, engine displacement, horsepower, fuel type, and recall status. The emissions data may be available separately or as part of the car's detailed information.","solution":"def consolidate_car_data(oemData): Consolidates combined OEM emissions and recall data for each car model. Parameters: oemData (list): List of dictionaries containing car data Returns: dict: A dictionary with makes as keys and lists of models as values result = {} for data in oemData: make = data.get(\\"make\\") model_data = { \\"model\\": data.get(\\"model\\"), \\"year\\": data.get(\\"year\\"), \\"engines\\": [{ \\"displacement\\": data.get(\\"engineDisplacement\\", 'N/A'), \\"horsepower\\": data.get(\\"horsepower\\", 'N/A') }], \\"fuelType\\": data.get(\\"fuelType\\", 'N/A'), \\"recallIssue\\": data.get(\\"recallIssue\\", 'N/A'), \\"emissionsStatus\\": data.get(\\"emissionsStatus\\", 'N/A') } if make not in result: result[make] = [] result[make].append(model_data) return result"},{"question":"Create a Python function that generates all numbers between 1 and a provided number n, but with the order of their digits reversed. The function should also handle errors, such as the input not being a positive integer, and return an error message in such cases.","solution":"def reverse_number(num): Returns the number with its digits reversed. return int(str(num)[::-1]) def reversed_numbers_upto_n(n): Generates all numbers between 1 and n with their digits reversed. Returns an error message if n is not a positive integer. if not isinstance(n, int) or n <= 0: return \\"Error: Input must be a positive integer.\\" reversed_numbers = [reverse_number(i) for i in range(1, n + 1)] return reversed_numbers"},{"question":"Create a python program that can convert temperatures between celsius, fahrenheit, and kelvin, while also handling inputs in the form of a range of temperatures. The program should be able to convert the following conversions: celsius to fahrenheit, celsius to kelvin, fahrenheit to celsius, fahrenheit to kelvin, kelvin to celsius, and kelvin to fahrenheit. The program should also validate user inputs, ensuring that they are either a single temperature value, a range of temperatures separated by a hyphen, or a list of temperatures separated by commas. The program should handle invalid inputs gracefully and provide clear error messages to the user. Additionally, the program should be able to handle floating-point numbers and round the output to 2 decimal places.","solution":"def celsius_to_fahrenheit(c): return round((c * 9/5) + 32, 2) def celsius_to_kelvin(c): return round(c + 273.15, 2) def fahrenheit_to_celsius(f): return round((f - 32) * 5/9, 2) def fahrenheit_to_kelvin(f): return round((f + 459.67) * 5/9, 2) def kelvin_to_celsius(k): return round(k - 273.15, 2) def kelvin_to_fahrenheit(k): return round((k * 9/5) - 459.67, 2) def parse_input(input_str): if \\"-\\" in input_str: start, end = input_str.split(\\"-\\") return list(range(int(start), int(end) + 1)) elif \\",\\" in input_str: return [float(temp) for temp in input_str.split(\\",\\")] else: try: return [float(input_str)] except ValueError: raise ValueError(\\"Invalid input format\\") def convert_temperatures(input_str, from_unit, to_unit): try: temperatures = parse_input(input_str) except ValueError as e: return str(e) if from_unit == \\"c\\" and to_unit == \\"f\\": return [celsius_to_fahrenheit(temp) for temp in temperatures] elif from_unit == \\"c\\" and to_unit == \\"k\\": return [celsius_to_kelvin(temp) for temp in temperatures] elif from_unit == \\"f\\" and to_unit == \\"c\\": return [fahrenheit_to_celsius(temp) for temp in temperatures] elif from_unit == \\"f\\" and to_unit == \\"k\\": return [fahrenheit_to_kelvin(temp) for temp in temperatures] elif from_unit == \\"k\\" and to_unit == \\"c\\": return [kelvin_to_celsius(temp) for temp in temperatures] elif from_unit == \\"k\\" and to_unit == \\"f\\": return [kelvin_to_fahrenheit(temp) for temp in temperatures] else: return \\"Invalid conversion units\\""},{"question":"Implement an interpolate function that does a linear interpolation, with bounds checking, and another function for extrapolation using numpy and scipy. Given two sets of points, the created functions should be able to estimate values within these sets as well as outside the given range. Also ensure handling of invalid input cases.","solution":"import numpy as np from scipy.interpolate import interp1d def interpolate(x_points, y_points, x): Performs linear interpolation or extrapolation. Parameters: x_points (list or array): Known x-coordinates y_points (list or array): Known y-coordinates x (float or list or array): x-coordinates to find y-values for; can be inside or outside the bounds Returns: float or array: Interpolated or extrapolated y-values corresponding to x Raises: ValueError: If lengths of x_points and y_points are not equal. if len(x_points) != len(y_points): raise ValueError(\\"x_points and y_points must have the same length\\") interpolator = interp1d(x_points, y_points, kind='linear', fill_value=\\"extrapolate\\") return interpolator(x)"},{"question":"Create a python function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. However, you are not allowed to use any built-in functions or methods that directly reverse the string or manipulate it in any way. You must implement your own logic to check for the palindrome property. Additionally, the function should be case-sensitive and ignore any non-alphanumeric characters in the string.","solution":"def is_palindrome(s): Checks if the input string is a palindrome, ignoring non-alphanumeric characters and case-insensitivity. clean_s = [] for char in s: if char.isalnum(): clean_s.append(char.lower()) left, right = 0, len(clean_s) - 1 while left < right: if clean_s[left] != clean_s[right]: return False left += 1 right -= 1 return True"},{"question":"Develop a Python function that can manage and process an input which is a nested list composed of lists of varying lengths, and generates a single flat list from the nested structure. The function should be robust enough to handle end-cases like special characters, strings, numbers. Also, it should be able to handle input not only of strings and integers, but also floats and boolean values.","solution":"def flatten(nested_list): This function takes a nested list of varying lengths and flattens it into a single list. It can handle integers, floats, strings, booleans and special characters. flat_list = [] def flatten_helper(l): for item in l: if isinstance(item, list): flatten_helper(item) else: flat_list.append(item) flatten_helper(nested_list) return flat_list"},{"question":"Debug and correct the erroneous code provided that should convert an integer into binary. Currently, the provided function is failing to accurately convert the integer. Moreover, improve the function to not only convert integers to binary but also handle conversion of negative integers and floating-point numbers into their respective binary representations.","solution":"def int_to_binary(num): Returns the binary representation of an integer, negative integer, or floating-point number. if isinstance(num, int): # If the number is an integer if num == 0: return \\"0b0\\" elif num < 0: return \\"-0b\\" + bin(num)[3:] else: return \\"0b\\" + bin(num)[2:] elif isinstance(num, float): # If the number is a floating point sign = \\"-\\" if num < 0 else \\"\\" num = abs(num) integer_part = int(num) fractional_part = num - integer_part # Convert the integer part int_bin = bin(integer_part)[2:] if integer_part != 0 else \\"0\\" # Convert the fractional part frac_bin = [] while fractional_part > 0: fractional_part *= 2 bit = int(fractional_part) fractional_part -= bit frac_bin.append(str(bit)) if len(frac_bin) > 52: # To limit the precision to 52 bits (double precision) break frac_bin_str = ''.join(frac_bin) if frac_bin else \\"0\\" return f\\"{sign}0b{int_bin}.{frac_bin_str}\\" if frac_bin else f\\"{sign}0b{int_bin}\\" else: raise ValueError(\\"The input must be an integer or a floating-point number.\\")"},{"question":"Write a Python function that takes an array and reverses it in place. The function should not return anything, but should modify the original array.","solution":"def reverse_array(arr): Reverses the array in place. left, right = 0, len(arr)-1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1"},{"question":"Given an array of integers, write a function that reorders the elements of the array such that all odd integers come before all even integers, maintaining the relative order among the odd and even integers as in the original array. Do not create a new array or use additional data structures.","solution":"def reorder_odd_even(arr): Reorders the elements of the array such that all odd integers come before all even integers, maintaining the relative order among the odd and even integers as in the original array. if not arr: return arr # Two pointers method to partition the array n = len(arr) odd_idx = 0 # pointer for odd numbers for i in range(n): if arr[i] % 2 == 1: arr.insert(odd_idx, arr.pop(i)) # maintain the relative order odd_idx += 1 return arr"},{"question":"Write a program to shuffle a deck of 52 cards. However, instead of using a standard deck, you should use a modified deck that includes 2 jokers. Additionally, you need to implement the shuffle function by yourself without using any built-in shuffling functions or algorithms. You should ensure that the shuffle is truly random and that each card in the deck has an equal chance of being in any position in the shuffled deck.","solution":"import random def shuffle_deck(deck): Shuffles the deck using Fisher-Yates (Knuth) shuffle algorithm. for i in range(len(deck) - 1, 0, -1): j = random.randint(0, i) deck[i], deck[j] = deck[j], deck[i] return deck def create_deck_with_jokers(): Creates a standard deck of 52 cards and adds 2 jokers. suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades'] ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'] deck = [f'{rank} of {suit}' for suit in suits for rank in ranks] deck.append('Joker 1') deck.append('Joker 2') return deck"},{"question":"Identify the flaws and correct the below Python function to effectively execute a simultaneous interchange of two numeric variables, without using any additional temporary variables or libraries. Also, make sure that the function works for both integer and floating-point numbers.","solution":"def swap_numbers(a, b): Swaps the values of a and b without using temporary variables. a = a + b b = a - b a = a - b return a, b"},{"question":"Develop a programming function that, besides examining the supplied HTML script and producing a selective array containing solely the paragraph markers denoted as <p> tags, ensures each paragraph contains less than 50 characters.","solution":"from bs4 import BeautifulSoup def extract_short_paragraphs(html): Return the paragraphs with less than 50 characters from the given HTML. Parameters: html (str): The HTML content as a string. Returns: list: List of paragraphs with less than 50 characters. soup = BeautifulSoup(html, 'html.parser') paragraphs = soup.find_all('p') short_paragraphs = [p.get_text() for p in paragraphs if len(p.get_text()) < 50] return short_paragraphs"},{"question":"Write a python function (texttt{safe_divide}) that accepts two arguments. The purpose of this function is to safely divide the first argument ((texttt{x})) by the second argument ((texttt{y})). The function should handle exceptions for any division by zero error using try-except block and return None in such a situation. Also provide a piece of initial function definition which is incorrect for reference to increase misdirection.","solution":"def safe_divide(x, y): Safely divides x by y. If y is zero, returns None to handle division by zero error. try: return x / y except ZeroDivisionError: return None"},{"question":"Write a cipher function that encrypts a given string using a key. The key will be a positive integer, and each character in the string will be shifted by that amount in the English alphabet. If the shift takes the character beyond 'Z' or 'z', it should wrap around to the beginning of the alphabet. For lower case and upper case characters, keep the case intact. Ignore any non-alphabetic characters.","solution":"def cipher(text, key): Encrypts the given text using a key. Each alphabet character in the string is shifted by the key amount in the English alphabet. Wrap around at 'Z'/'z'. result = [] for char in text: if char.isalpha(): ascii_offset = ord('A') if char.isupper() else ord('a') new_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset) result.append(new_char) else: result.append(char) # non-alphabetic characters remain unchanged return \\"\\".join(result)"},{"question":"Write a code snippet to extract and display a website's favicon using its URL. Additionally, implement error handling to cater for scenarios where the favicon is not available or the URL is incorrect. Providing caching function to store previously fetched favicons would be a plus.","solution":"import requests from PIL import Image from io import BytesIO import os # Dictionary to cache previously fetched favicons favicon_cache = {} def get_favicon(url): Retrieves and displays the favicon for the given website URL. :param url: The website URL :return: None parsed_url = url if url.startswith('http') else 'http://' + url # Check if favicon is cached if parsed_url in favicon_cache: print(\\"Favicon retrieved from cache.\\") return favicon_cache[parsed_url] try: response = requests.get(parsed_url + '/favicon.ico', timeout=10) response.raise_for_status() img = Image.open(BytesIO(response.content)) # Save favicon to cache favicon_cache[parsed_url] = img return img except requests.exceptions.RequestException as e: print(f\\"Error fetching favicon: {e}\\") return None except IOError: print(\\"Unable to open the favicon image.\\") return None"},{"question":"Jim was given the task to sum up the series: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9. Instead of adding these numbers sequentially in a for loop, he was asked to use a while loop to solve the problem. However, Jim is struggling to think about the terminating condition for the loop. Can you help Jim write the correct Python code using a while loop? After that, please also guide him on how to debug a while loop if he encounters any issues during the execution. To add the complexity, try to solve the problem using recursive function without using for or while loop.","solution":"def sum_series_while_loop(): Sums up the series 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 using a while loop. total = 0 i = 1 while i <= 9: total += i i += 1 return total def sum_series_recursive(n=9): Sums up the series 1 + 2 + 3 + ... + n using recursion. if n == 0: return 0 else: return n + sum_series_recursive(n-1)"},{"question":"Rewrite the provided function to correct the error and modify it to accept an additional parameter for variable discounts. Handle scenarios where input could be negative or non-numeric.","solution":"def calculate_total_price(price, quantity, discount_rate=0): Calculates the total price after applying the discount. Parameters: - price (float): The unit price of the item. - quantity (int): The number of items. - discount_rate (float): The discount rate to be applied. Defaults to 0. Returns: - float: The total price after discount. Raises: - ValueError: If price or quantity is negative or non-numeric. try: price = float(price) quantity = int(quantity) discount_rate = float(discount_rate) if price < 0 or quantity < 0 or discount_rate < 0: raise ValueError(\\"Price, quantity, and discount rate must all be non-negative\\") total_price = price * quantity discount = total_price * discount_rate / 100 total_price -= discount return total_price except ValueError: raise ValueError(\\"Price, quantity, and discount rate must all be numeric values\\")"},{"question":"How can I write a Python program that generates a random password with specific requirements such as having at least one uppercase letter, one lowercase letter, one digit, and one special character?","solution":"import random import string def generate_password(length=12): Generates a random password of specified length that includes at least one uppercase letter, one lowercase letter, one digit, and one special character. if length < 4: raise ValueError(\\"Password length must be at least 4 to include all required character types.\\") # Ensure at least one of each required character type character_types = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits), random.choice(string.punctuation) ] # If more characters are needed, fill the rest with random choices from all character sets if length > 4: character_types.extend(random.choices(string.ascii_letters + string.digits + string.punctuation, k=length - 4)) # Shuffle the list to ensure randomness random.shuffle(character_types) return ''.join(character_types)"},{"question":"Devise an algorithm that generates a non-uniform random integer within the boundary conditions of 0 and 10, using a given discrete probability distribution. The generated number should adhere to the specified probability distribution, which is given as an array of 11 elements where each index i corresponds to the probability of generating an integer i. Implement this in a programming language of your choice, keeping in mind that efficiency is a critical consideration.","solution":"import random def non_uniform_random(distribution): Generates a non-uniform random integer within the boundary conditions of 0 and 10 based on the given distribution. Parameters: distribution (list): A list of 11 elements where each index corresponds to the probability of generating that index. Returns: int: A randomly generated integer between 0 and 10 based on the provided probabilities. # Calculate cumulative distribution cumulative_distribution = [] total = 0 for prob in distribution: total += prob cumulative_distribution.append(total) # Generate a random number between 0 and 1 rand_value = random.random() # Use binary search to find the correct interval low, high = 0, 10 while low < high: mid = (low + high) // 2 if rand_value < cumulative_distribution[mid]: high = mid else: low = mid + 1 return low"},{"question":"Design a general algorithm that can take two inputs; a string and a finite set of characters. The algorithm will check if the string only comprises characters from the given set. Moreover, implement the algorithm in such a way that the sequence of the characters in the input string does not affect the result. Also, create several test cases to verify your solution's correctness.","solution":"def is_string_composed_of_set(string, char_set): Checks if all characters in the string are from the given set of characters. Parameters: string (str): The string to be checked. char_set (set): The set of allowed characters. Returns: bool: True if the string is composed only of characters from char_set, False otherwise. return all(char in char_set for char in string)"},{"question":"Write a code to calculate the total of an invoice given an array of price and quantity as a list of tuples with float types, accounting for a possible discount, tax, and rounding up to the nearest whole number. Additionally, consider a locale-specific formatting for output as a string.","solution":"import math import locale def calculate_invoice_total(items, discount=0, tax=0): Calculate the total of an invoice, considering discount and tax, and round up to the nearest whole number. Parameters: items (list of tuples): list of (price, quantity) tuples with float types discount (float): discount rate in percentage, default is 0 tax (float): tax rate in percentage, default is 0 Returns: str: formatted total invoice amount according to locale locale.setlocale(locale.LC_ALL, '') # Set locale for currency formatting subtotal = sum(price * quantity for price, quantity in items) total_after_discount = subtotal * ((100 - discount) / 100) total_after_tax = total_after_discount * ((100 + tax) / 100) total_rounded = math.ceil(total_after_tax) return locale.currency(total_rounded, grouping=True)"},{"question":"Please provide a Python code that calculates the average temperature of a given list of temperature data. However, the list may contain invalid temperature data such as strings or extremely high/low values that are beyond the normal range of temperature (-273.15°C to 600°C). Your code should be able to handle such cases and accurately calculate the average of valid temperature data.","solution":"def average_temperature(temperatures): Calculates the average temperature from a list of temperature data. Filters out non-numeric values and values outside the range -273.15 to 600. Parameters: temperatures (list): List of temperature data Returns: float: Average temperature of valid data, or None if no valid data valid_temperatures = [ temp for temp in temperatures if isinstance(temp, (int, float)) and -273.15 <= temp <= 600 ] if not valid_temperatures: return None return sum(valid_temperatures) / len(valid_temperatures)"},{"question":"Given a list of sentences with repeated words and an additional erroneous code snippet, your task is to write a correct Python function to remove all repeated words from each sentence in the list and return the modified list. The sentences in the output list should maintain their original order.","solution":"def remove_repeated_words(sentences): Removes repeated words from each sentence in the list. Args: sentences (list): List of sentences (strings). Returns: list: List of sentences with repeated words removed. result = [] for sentence in sentences: words = sentence.split() seen = set() new_sentence = [] for word in words: if word not in seen: new_sentence.append(word) seen.add(word) result.append(' '.join(new_sentence)) return result"},{"question":"Write a function to return the element present at index \\"k\\" from the given list \\"arr\\" and also simulate the operation with a provided stack data structure that you should maintain. The stack should not be modified by the operation. Consider the list and stack indices start at 0. If \\"k\\" exceeds the bounds, return None.","solution":"def get_element_at_index(arr, stack, k): Returns the element at index k from the given list arr and simulates the operation with the provided stack. Ensure the stack is not modified by the operation. Parameters: arr (list): The list from which to get the element. stack (list): The stack to be used for simulation purposes. k (int): The index of the desired element. Returns: element: The element at index k if it exists, otherwise None. # Check if k is out of bounds if k < 0 or k >= len(arr): return None # Simulate stack copy operation simulated_stack = stack.copy() # Return the element at index k return arr[k]"},{"question":"Develop a function that compares the frequency of vowels, consonants, or specific characters between two strings. This function should be able to handle different cases (uppercase, lowercase, midcase) and ignore any non-alphabetical characters.","solution":"def compare_character_frequency(str1, str2, character_set='vowels'): Compares the frequency of certain characters (vowels, consonants, or specific characters) between two strings. Parameters: str1 (str): First string to compare. str2 (str): Second string to compare. character_set (str): Specifies the set of characters to count 'vowels', 'consonants', or specific characters (by providing a string of those characters). Returns: dict: A dictionary with the counts of the specified characters in the format: {'str1_count': count1, 'str2_count': count2} def count_characters(s, char_set): return sum(1 for char in s.lower() if char in char_set) if character_set == 'vowels': chars_to_count = \\"aeiou\\" elif character_set == 'consonants': chars_to_count = \\"bcdfghjklmnpqrstvwxyz\\" else: chars_to_count = character_set.lower() str1_count = count_characters(str1, chars_to_count) str2_count = count_characters(str2, chars_to_count) return {'str1_count': str1_count, 'str2_count': str2_count}"},{"question":"Write a Python function for finding the kth smallest element in an unordered list using the Quickselect algorithm.","solution":"def quickselect(arr, k): Returns the kth smallest element in the list \`arr\`. if arr == []: return None pivot = arr[len(arr) // 2] lows = [el for el in arr if el < pivot] highs = [el for el in arr if el > pivot] pivots = [el for el in arr if el == pivot] if k < len(lows): return quickselect(lows, k) elif k < len(lows) + len(pivots): return pivots[0] else: return quickselect(highs, k - len(lows) - len(pivots))"},{"question":"Hello, can you help me understand the concept of recursion in Python programming?","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function in Python to perform a breadth-first search on a binary tree. The function should take in the root node of the tree and return a list of node values in the order they were visited during the search.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def breadth_first_search(root): Perform a breadth-first search on the binary tree. Args: root (TreeNode): The root node of the binary tree. Returns: list: A list of values in the order they were visited. if not root: return [] queue = [root] result = [] while queue: current = queue.pop(0) result.append(current.value) if current.left: queue.append(current.left) if current.right: queue.append(current.right) return result"},{"question":"Create a function to search for a specific word in a list of strings. The function should return the index of the first occurance of the word, or -1 if it is not present.","solution":"def search_word(strings, word): Searches for the specific word in a list of strings and returns the index of the first occurrence. If the word is not present, returns -1. Args: strings (list of str): List of strings to search within. word (str): Word to search for. Returns: int: The index of the first occurrence of the word, or -1 if not found. try: return strings.index(word) except ValueError: return -1"},{"question":"Create a function that uses a binary search algorithm to find a value in a sorted list of integers. The function should be able to identify the index of the target and the number of iterations it took to find or determine that the value is not in the list. If the target is not in the list, the function should return the index where it could be inserted while maintaining the sorted order.","solution":"def binary_search(arr, target): Uses binary search to find the target in the sorted array arr. Returns a tuple containing the index of the target (or the index where it could be inserted) and the number of iterations it took to find the target or determine its insertion point. left, right = 0, len(arr) - 1 iterations = 0 while left <= right: iterations += 1 mid = (left + right) // 2 if arr[mid] == target: return mid, iterations elif arr[mid] < target: left = mid + 1 else: right = mid - 1 # If not found, return the insert position and the number of iterations return left, iterations"},{"question":"Develop a Python program that prompts the user for a positive integer, then prints the Collatz sequence starting from that number. Make sure to handle invalid inputs (non-integer, negative, or zero values).","solution":"def collatz_sequence(n): Prints the Collatz sequence starting from the given positive integer n. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") sequence = [] while n != 1: sequence.append(n) if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 sequence.append(1) return sequence def main(): try: n = int(input(\\"Please enter a positive integer: \\")) sequence = collatz_sequence(n) print(\\"Collatz sequence:\\", sequence) except ValueError as e: print(e)"},{"question":"Please use the lambda expression to replace the functionality of the def function below, and add a requirement that the input to the lambda function must be a list.","solution":"square_list = lambda numbers: [n ** 2 for n in numbers] if isinstance(numbers, list) else None"},{"question":"Given an associative array, write a function to find the key with the greatest value. If the array is empty, return None. If there are multiple keys with the same greatest value, return a list of all such keys in order of their appearances in the array. Write the most efficient solution and explain its time and space complexity as comments in the code.","solution":"def find_key_with_greatest_value(dictionary): Returns the key with the greatest value in the dictionary. If the dictionary is empty, returns None. If there are multiple keys with the same greatest value, returns a list of all such keys in order of their appearances in the dictionary. if not dictionary: return None max_value = max(dictionary.values()) keys_with_max_value = [key for key, value in dictionary.items() if value == max_value] if len(keys_with_max_value) == 1: return keys_with_max_value[0] else: return keys_with_max_value"},{"question":"Write a python code to sort a given array using merge sort?","solution":"def merge_sort(arr): Sort a given array using merge sort algorithm. if len(arr) > 1: mid = len(arr) // 2 L = arr[:mid] R = arr[mid:] merge_sort(L) merge_sort(R) i = j = k = 0 while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 return arr"},{"question":"How do I create a process monitoring tool for a software application using Python?","solution":"import psutil def get_process_info(pid): Retrieve information about a specified process. Parameters: pid (int): The process ID. Returns: dict: A dictionary containing process information. try: p = psutil.Process(pid) return { 'pid': pid, 'name': p.name(), 'status': p.status(), 'cpu_percent': p.cpu_percent(interval=1.0), 'memory_percent': p.memory_percent(), 'create_time': p.create_time() } except psutil.NoSuchProcess: return {'error': 'No such process with PID {}'.format(pid)} def monitor_processes(pids): Monitor a list of processes. Parameters: pids (list): List of process IDs. Returns: dict: A dictionary with process IDs as keys and their information as values. result = {} for pid in pids: result[pid] = get_process_info(pid) return result"},{"question":"Integrate Tree-based models like Gradient Boosting into PyTorch framework for Tabular Data.","solution":"import torch import torch.nn as nn from sklearn.ensemble import GradientBoostingClassifier import numpy as np class GradientBoostingAsPyTorch(nn.Module): def __init__(self, sklearn_model): super(GradientBoostingAsPyTorch, self).__init__() self.sklearn_model = sklearn_model def forward(self, x): # Sklearn expects input in the form of numpy array np_x = x.detach().numpy() # Use the gradient boosting model to predict probabilities probas = self.sklearn_model.predict_proba(np_x) # Convert the numpy probabilities to torch tensor tensor_probas = torch.tensor(probas) return tensor_probas def integrate_gb_with_pytorch(data, labels): Trains a GradientBoostingClassifier and integrates it into a PyTorch module. # Train Sklearn Gradient Boosting model gb_model = GradientBoostingClassifier() gb_model.fit(data, labels) # Integrate the trained model into PyTorch pytorch_model = GradientBoostingAsPyTorch(gb_model) return pytorch_model"},{"question":"Write a calculator program that performs the following operations: Addition (+), Subtraction (-), Multiplication (*), Division (/), Exponentiation (^), Integer Division (//), and Modulo (%). The program should be case-insensitive and accept input in the following formats: operand1 operator operand2. The operands can either be floating point numbers or valid Python expressions enclosed in parentheses. The calculator should handle the operations with proper precedence and should also account for parentheses in the input expressions.","solution":"def calculator(expression): Evaluates a mathematical expression string and returns the result. The expression can contain the following operators: +, -, *, /, ^, //, % The operations should be handled with proper precedence and parentheses. # Replace ^ with ** for Python exponentiation expression = expression.replace(\\"^\\", \\"**\\") try: result = eval(expression) except Exception as e: return f\\"Error: {e}\\" return result"},{"question":"Define a function \\"last_n_elemnts\\" that takes a list and an integer \\"n\\" as arguments and returns the last n items of the given list as a new list. If n is greater than the length of the list return the entire list. If the list is empty or n is 0, return an empty list.","solution":"def last_n_elements(lst, n): Returns the last n elements from the list lst. Parameters: lst (list): The list from which elements are to be fetched. n (int): The number of elements to return from the end of the list. Returns: list: A list containing the last n elements of lst. if not lst or n <= 0: return [] return lst[-n:]"},{"question":"Convert the following string \\"The quick brown fox jumps over the lazy dog\\" to an array of words, where each word is a separate element in the array. The solution should be implemented using only a single loop and should have a time complexity of O(n), where n is the length of the input string. Additionally, the solution should not use any built-in string splitting or array functions, and should handle cases where there are multiple consecutive spaces between words.","solution":"def split_string_to_words(s): Convert a string to an array of words, each word being a separate element. Assumes words are separated by spaces, and handles multiple spaces between words. result = [] word = \\"\\" for char in s: if char != \\" \\": word += char else: if word != \\"\\": result.append(word) word = \\"\\" if word != \\"\\": result.append(word) return result"},{"question":"Write a function that reverses a string. Additionally, implement this function in a way that utilizes recursion. You are not allowed to use any built-in functions or data structures apart from strings and basic operators (e.g +, -, *, /, %). Make sure to handle edge cases, such as empty strings or single character strings.","solution":"def reverse_string(s): Reverses a given string using recursion. :param s: The string to reverse. :return: The reversed string. # Base case: if the string is empty or has a single character if len(s) <= 1: return s # Recursive step: reverse the rest of the string and append the first character at the end return reverse_string(s[1:]) + s[0]"},{"question":"Define a function in Python that takes an array of integers and returns the index of the element with the largest value.","solution":"def index_of_largest_element(arr): Returns the index of the element with the largest value in the array. If the array is empty, returns None. if not arr: return None largest_index = 0 for i in range(1, len(arr)): if arr[i] > arr[largest_index]: largest_index = i return largest_index"},{"question":"Write me a Python script that will allow me to create, edit, and delete ebooks in EPUB format using command-line commands such as \`create-book\`, \`edit-book\`, and \`delete-book\`.","solution":"import os import zipfile import shutil import tempfile def create_book(title, author, content, filename): Create an EPUB book with the given title, author, and content, and save it as filename. epub_structure = { \\"mimetype\\": 'application/epub+zip', \\"META-INF/container.xml\\": '<?xml version=\\"1.0\\"?>n<container version=\\"1.0\\" xmlns=\\"urn:oasis:names:tc:opendocument:xmlns:container\\">n<rootfiles>n<rootfile full-path=\\"OEBPS/content.opf\\" media-type=\\"application/oebps-package+xml\\"/>n</rootfiles>n</container>', \\"OEBPS/content.opf\\": f'''<?xml version='1.0' encoding='utf-8'?> <package xmlns=\\"http://www.idpf.org/2007/opf\\" unique-identifier=\\"BookId\\" version=\\"3.0\\"> <metadata xmlns:dc=\\"http://purl.org/dc/elements/1.1/\\"> <dc:title>{title}</dc:title> <dc:creator>{author}</dc:creator> </metadata> <manifest> <item id=\\"content\\" href=\\"content.xhtml\\" media-type=\\"application/xhtml+xml\\"/> </manifest> <spine> <itemref idref=\\"content\\"/> </spine> </package>''', \\"OEBPS/content.xhtml\\": f'''<?xml version='1.0' encoding='utf-8'?> <html xmlns=\\"http://www.w3.org/1999/xhtml\\"> <head> <title>{title}</title> </head> <body> <h1>{title}</h1> <h2>by {author}</h2> <p>{content}</p> </body> </html>''' } with zipfile.ZipFile(filename, 'w') as epub: for filepath, content in epub_structure.items(): epub.writestr(filepath, content) def read_book(filename): Read the metadata and content of an EPUB book. with zipfile.ZipFile(filename, 'r') as epub: with epub.open(\\"OEBPS/content.xhtml\\") as content_file: content = content_file.read() with epub.open(\\"OEBPS/content.opf\\") as metadata_file: metadata = metadata_file.read() return metadata.decode('utf-8'), content.decode('utf-8') def edit_book(filename, new_content): Edit the content of an existing EPUB book. with tempfile.TemporaryDirectory() as tempdir: with zipfile.ZipFile(filename, 'r') as epub: epub.extractall(tempdir) with open(os.path.join(tempdir, \\"OEBPS/content.xhtml\\"), 'r') as file: lines = file.readlines() for i, line in enumerate(lines): if \\"<p>\\" in line: lines[i] = f\\"<p>{new_content}</p>n\\" break with open(os.path.join(tempdir, \\"OEBPS/content.xhtml\\"), 'w') as file: file.writelines(lines) with zipfile.ZipFile(filename, 'w') as epub: for root, _, files in os.walk(tempdir): for file in files: epub.write(os.path.join(root, file), os.path.relpath(os.path.join(root, file), tempdir)) def delete_book(filename): Delete an EPUB book. if os.path.exists(filename): os.remove(filename)"},{"question":"Write a Python code to sort first n elements in a given list in descending order using insertion sort.","solution":"def insertion_sort_descending(arr, n): Sorts the first n elements of the given list in descending order using insertion sort. Parameters: arr (list): The list to be partially sorted. n (int): The number of elements at the beginning of the list to sort. Returns: list: The list with the first n elements sorted in descending order. for i in range(1, n): key = arr[i] j = i - 1 while j >= 0 and key > arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Design a program that performs robust encryption and decryption of text messages using a complex formulation of the Caesar cipher. The program should ensure high-security standards suitable for real-time encrypted communication; therefore, several configurations of the cipher must be combined.","solution":"def encrypt(text, shift): Encrypts text using Caesar cipher with the specified shift value. Parameters: text (str): The text to be encrypted. shift (int): The number of positions each character in the text is shifted. Returns: str: The encrypted text. encrypted_text = [] for char in text: if char.isalpha(): shift_base = 65 if char.isupper() else 97 encrypted_text.append(chr((ord(char) - shift_base + shift) % 26 + shift_base)) else: encrypted_text.append(char) return ''.join(encrypted_text) def decrypt(text, shift): Decrypts the text encrypted by the Caesar cipher with the specified shift value. Parameters: text (str): The text to be decrypted. shift (int): The number of positions each character in the text was shifted during encryption. Returns: str: The decrypted text. decrypted_text = [] for char in text: if char.isalpha(): shift_base = 65 if char.isupper() else 97 decrypted_text.append(chr((ord(char) - shift_base - shift) % 26 + shift_base)) else: decrypted_text.append(char) return ''.join(decrypted_text)"},{"question":"Concatenate three lists, preserving the order of items while removing all duplicates in Python.","solution":"def concatenate_and_deduplicate(list1, list2, list3): Concatenates three lists, preserving the order of items while removing all duplicates. combined = list1 + list2 + list3 deduped = [] seen = set() for item in combined: if item not in seen: deduped.append(item) seen.add(item) return deduped"},{"question":"Write me a Python program that classifies words as generic or technical based on their possibility of being in the context of a specific domain like finance, medicine, technology etc. The program must take a list of words as input from the user.","solution":"# Define some example sets of technical words for various domains finance_terms = {\\"bank\\", \\"investment\\", \\"stock\\", \\"bond\\", \\"tax\\", \\"credit\\", \\"debit\\"} medicine_terms = {\\"doctor\\", \\"hospital\\", \\"surgery\\", \\"prescription\\", \\"vaccine\\", \\"diagnosis\\"} technology_terms = {\\"computer\\", \\"software\\", \\"programming\\", \\"network\\", \\"database\\", \\"algorithm\\"} def classify_words(words): Classifies each word in the input list as generic or technical based on predefined domain-specific terms. Args: - words: List of words to classify Returns: - A dictionary with key \\"generic\\" holding a list of generic words, and key \\"technical\\" holding a list of technical words. classification = {\\"generic\\": [], \\"technical\\": []} for word in words: word = word.lower() # Convert word to lowercase for case-insensitive comparison if word in finance_terms or word in medicine_terms or word in technology_terms: classification[\\"technical\\"].append(word) else: classification[\\"generic\\"].append(word) return classification"},{"question":"Write a code to update the elements of a list inplace. The elements of the list are in the format of strings, and they are all lowercase. The update should convert the first letter of each string to uppercase, but only if the first letter is a vowel.","solution":"def update_list_inplace(lst): Updates the elements of the list in place such that the first letter of each string is capitalized if it is a vowel. Args: lst (list of str): List of strings to be updated. Returns: None vowels = set('aeiou') for i in range(len(lst)): if lst[i][0] in vowels: lst[i] = lst[i][0].upper() + lst[i][1:]"},{"question":"Create a Python program which takes two lists as an input and outputs the elements that are common to both of the lists.","solution":"def common_elements(list1, list2): Returns a list of elements that are common to both input lists. return list(set(list1) & set(list2))"},{"question":"Develop a Python function capable of differentiating between prime numbers and composite numbers from a provided list of integers. The function should be designed to handle large numbers as well. Additionally, rectify any errors in the provided erroneous code snippet to complete the task.","solution":"def is_prime(n): Return True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def differentiate_primes_and_composites(numbers): Differentiates prime numbers from composite numbers in a list. Parameters: numbers (list): List of integers to be checked. Returns: dict: A dictionary with two keys 'primes' and 'composites', each holding a list of corresponding numbers. result = {'primes': [], 'composites': []} for number in numbers: if is_prime(number): result['primes'].append(number) else: result['composites'].append(number) return result"},{"question":"Generate a snippet of Python script capable of recursively scanning a base directory, including all subdirectories, for the presence of a specified .txt file. Additionally, the script should list all unique words present in the file, highlight the frequency of each word, should ignore case sensitivity and punctuation marks.","solution":"import os import re from collections import Counter def scan_dir_for_txt_files(base_dir): Recursively scans the base directory for .txt files and returns a list of their paths. txt_files = [] for dirpath, _, filenames in os.walk(base_dir): for filename in filenames: if filename.endswith(\\".txt\\"): txt_files.append(os.path.join(dirpath, filename)) return txt_files def extract_words_from_file(filepath): Reads a file, extracts all unique words, and counts their frequency. with open(filepath, 'r', encoding='utf-8') as file: content = file.read().lower() words = re.findall(r'bw+b', content) word_count = Counter(words) return word_count def scan_and_count_words(base_dir): Scans the base directory for .txt files and calculates word frequencies for each file found. txt_files = scan_dir_for_txt_files(base_dir) overall_word_count = Counter() for file in txt_files: word_count = extract_words_from_file(file) overall_word_count.update(word_count) return overall_word_count"},{"question":"Can you code a solution to Bubble Sort an array of integers in descending order, but without using any loops or built-in sort functions? The array should also be modified in-place.","solution":"def bubble_sort_desc(arr, n=None, i=0): Sorts the array of integers in descending order using bubble sort without loops or built-in sort functions. The array is sorted in-place. if n is None: n = len(arr) # Base case: If there's only one element left, we're done if n == 1: return arr # Base case for outer recursion: if we've completed a pass, start the next pass if i >= n - 1: return bubble_sort_desc(arr, n - 1) # If the current pair is out of order, swap them if arr[i] < arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] # Recur for the next element return bubble_sort_desc(arr, n, i + 1)"},{"question":"Develop a code generator software in Python that converts a given JSON data structure into a corresponding Python class with methods for accessing the data.","solution":"import json def json_to_python_class(json_data): Converts a given JSON data structure into a corresponding Python class with methods for accessing the data. :param json_data: string :return: string (Python class code) data = json.loads(json_data) class_code = \\"class GeneratedClass:n\\" # Constructor class_code += \\" def __init__(self\\" for key in data.keys(): class_code += f\\", {key}=None\\" class_code += \\"):n\\" for key in data.keys(): class_code += f\\" self.{key} = {key}n\\" # Attribute accessors for key in data.keys(): class_code += f\\"n def get_{key}(self):n\\" class_code += f\\" return self.{key}n\\" class_code += f\\"n def set_{key}(self, value):n\\" class_code += f\\" self.{key} = valuen\\" return class_code"},{"question":"Given controlled strings A and B containing only lowercase letters, write code to check if the two strings are anagrams of each other.","solution":"def are_anagrams(A, B): Returns True if strings A and B are anagrams of each other, otherwise False. return sorted(A) == sorted(B)"},{"question":"I have a list of numbers in Python. How can I write a program to insert a specific number in the middle of the list? Can you provide a code example?","solution":"def insert_in_middle(lst, num): Inserts the given number into the middle of the list. Parameters: lst (list): The list in which the number is to be inserted. num (int/float): The number to be inserted. Returns: list: The list with the number inserted in the middle. middle_index = len(lst) // 2 return lst[:middle_index] + [num] + lst[middle_index:]"},{"question":"Develop a Python function to not only append zeroes to a specified list until its size reaches a given minimum length, but also remove the extra elements if the list exceeds the specified length. The function should also handle negative minimum lengths by removing elements from the start of the list.","solution":"def adjust_list_length(lst, min_length): Adjust the length of the list \`lst\` to the specified \`min_length\`. If the current length of lst is less than min_length, append zeroes until it reaches min_length. If the current length of lst is more than min_length, remove elements from the end or beginning depending on the sign of min_length. Parameters: - lst: List of elements to adjust. - min_length: Integer specifying the desired length of the list. Returns: - The adjusted list. current_length = len(lst) if min_length >= 0: # If min_length is non-negative if current_length < min_length: lst.extend([0] * (min_length - current_length)) # Append zeros elif current_length > min_length: del lst[min_length:] # Remove elements from end else: # If min_length is negative abs_min_length = abs(min_length) if current_length > abs_min_length: del lst[:(current_length - abs_min_length)] # Remove elements from start return lst"},{"question":"Here's a Python code snippet that defines a function called \`subarraySortV2\`. The function takes a list of integers \`ar\` as its argument and returns a list of two integers indicating the starting and ending indices of the subarray that needs to be sorted to make the entire array sorted in non-decreasing order. If the array is already sorted, it returns [-1, -1]. The function compares elements by their values on the number line, regardless of their positions in the array. It iterates through the array only twice, ensuring an improvement over the given code snippet. Your task is to complete the function by filling in the missing parts.","solution":"def subarraySortV2(ar): Returns the starting and ending indices of the subarray that needs to be sorted to make the entire array sorted in non-decreasing order. If the array is already sorted, it returns [-1, -1]. n = len(ar) if n == 0: return [-1, -1] left, right = None, None # Finding the first out-of-order element from the left for i in range(1, n): if ar[i] < ar[i - 1]: left = i - 1 break # Array is already sorted if left is None: return [-1, -1] # Finding the first out-of-order element from the right for j in range(n - 2, -1, -1): if ar[j] > ar[j + 1]: right = j + 1 break # Finding the minimum and maximum values in the identified subarray subarray_min = min(ar[left:right + 1]) subarray_max = max(ar[left:right + 1]) # Extending the left index to include all elements greater than subarray_min for i in range(left): if ar[i] > subarray_min: left = i break # Extending the right index to include all elements less than subarray_max for j in range(n - 1, right, -1): if ar[j] < subarray_max: right = j break return [left, right]"},{"question":"I'm looking for a way to efficiently calculate the sum of all odd numbers in a given list. I want to write a Python function that can handle this task. Can you provide a solution?","solution":"def sum_of_odd_numbers(numbers): Returns the sum of all odd numbers in the given list. :param numbers: List of integers :return: Sum of odd numbers return sum(number for number in numbers if number % 2 != 0)"},{"question":"How can I generate all unique permutations of a given string in Python without using any inbuilt function for permutations? You have to develop a recursive function for this. Also, ensure that your function can handle strings of up to 100 characters in length.","solution":"def generate_permutations(s): Generate all unique permutations of a given string. def permute(prefix, remaining, results): if len(remaining) == 0: results.add(prefix) else: for i in range(len(remaining)): next_prefix = prefix + remaining[i] next_remaining = remaining[:i] + remaining[i+1:] permute(next_prefix, next_remaining, results) results = set() permute(\\"\\", s, results) return list(results)"},{"question":"Write a snippet of code that finds the largest number in an array of integers, excluding any duplicates. The array must be sorted in descending order and must contain at least 10,000 elements. Additionally, the code must be written in Python and use a binary search algorithm to find the largest unique number. The input array must be provided in a CSV file format and the output should be written to a separate text file. Include error handling for any potential issues with the input file, such as incorrect formatting or missing data.","solution":"import csv import os def find_largest_unique_number(file_path): try: # Read CSV file and convert to a list of integers with open(file_path, mode='r') as file: reader = csv.reader(file) data = [int(num) for row in reader for num in row] # Ensure the array is sorted in descending order data.sort(reverse=True) # Remove duplicates while maintaining order unique_data = [] prev = None for num in data: if num != prev: unique_data.append(num) prev = num if len(unique_data) == 0: raise ValueError(\\"No unique elements found.\\") return unique_data[0] except FileNotFoundError: print(f\\"Error: File '{file_path}' not found.\\") except ValueError as ve: print(f\\"Error: {ve}\\") except Exception as e: print(f\\"Unexpected error: {e}\\") # Write the output to a text file def write_output_to_file(output, output_file_path): if output is not None: with open(output_file_path, mode='w') as file: file.write(str(output)) # Example usage input_file = 'integers.csv' output_file = 'largest_unique_number.txt' largest_unique_number = find_largest_unique_number(input_file) write_output_to_file(largest_unique_number, output_file)"},{"question":"Write a program in Python that sorts a list of integers in ascending or descending order based on user input. The program should validate user input and handle possible errors.","solution":"def sort_list(numbers, order=\\"ascending\\"): Sorts a list of integers in ascending or descending order based on user input. Parameters: numbers (list): List of integers to sort. order (str): Sorting order, either 'ascending' or 'descending'. Defaults to 'ascending'. Returns: list: Sorted list of integers. if not all(isinstance(x, int) for x in numbers): raise ValueError(\\"All elements in the list must be integers.\\") if order not in [\\"ascending\\", \\"descending\\"]: raise ValueError(\\"Order must be either 'ascending' or 'descending'.\\") return sorted(numbers, reverse=(order == \\"descending\\"))"},{"question":"Write a function in Python that adds an element to a specific position in a linked list. Please ensure your solution also handles potential exceptions such as insertion beyond current size, null list, and null node creation. In addition, elaborate on the time complexity of your solution.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def insert_at_position(head, value, position): Inserts a new ListNode with the given value at the specified position in the linked list. If the position is beyond the current size of the list, or if the head is None, an appropriate exception will be raised. if position < 0: raise IndexError(\\"Position cannot be negative\\") new_node = ListNode(value) if not head: if position == 0: return new_node else: raise IndexError(\\"Position is beyond the size of the list\\") if position == 0: new_node.next = head return new_node current = head current_position = 0 while current and current_position < position - 1: current = current.next current_position += 1 if not current: raise IndexError(\\"Position is beyond the size of the list\\") new_node.next = current.next current.next = new_node return head"},{"question":"Say this is a prompt for a program that you have to write. Write a program that takes an integer n as input and checks if it is a Fibonacci number. If it is, the program prints \\"Fibonacci number found!\\" If it is not, the program prints \\"Not a Fibonacci number!\\"","solution":"def is_fibonacci_number(n): Checks whether a given number n is a Fibonacci number. Returns \\"Fibonacci number found!\\" if n is a Fibonacci number, otherwise returns \\"Not a Fibonacci number!\\". if n < 0: return \\"Not a Fibonacci number!\\" # A number is a Fibonacci number if and only if one or both of (5*n^2 + 4) # or (5*n^2 - 4) is a perfect square def is_perfect_square(x): s = int(x**0.5) return s*s == x if is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4): return \\"Fibonacci number found!\\" else: return \\"Not a Fibonacci number!\\""},{"question":"Name a recursive function to generate all the possible permutations of a given list in Python.","solution":"def permutations(lst): Generates all permutations of the input list. if len(lst) == 0: return [[]] result = [] for i in range(len(lst)): rest = lst[:i] + lst[i+1:] for perm in permutations(rest): result.append([lst[i]] + perm) return result"},{"question":"You are given a string of characters. The task is to find the number and type of all possible palindromic partitions in the string. A palindromic partition is a segmentation of a string into substrings where every substring is a palindrome. For example, \\"ababa\\" has the following possible palindromic partitions: {\\"a\\", \\"ba\\", \\"ba\\"}, {\\"a\\", \\"b\\", \\"a\\", \\"ba\\"}, {\\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\"}, {\\"ab\\", \\"a\\", \\"ba\\"}, {\\"aba\\", \\"ba\\"}, {\\"ab\\", \\"aba\\"}, {\\"ababa\\"}.","solution":"def is_palindrome(s): Check if the string s is a palindrome. return s == s[::-1] def palindromic_partitions(s): Find all palindromic partitions of a given string. result = [] def backtrack(start, path): if start == len(s): result.append(path[:]) return for end in range(start + 1, len(s) + 1): substring = s[start:end] if is_palindrome(substring): path.append(substring) backtrack(end, path) path.pop() backtrack(0, []) return result"},{"question":"Given some Python code, how can I determine if it is an iterative or recursive solution to a problem?","solution":"import ast def is_iterative(code): Checks if the given Python code is iterative. tree = ast.parse(code) for node in ast.walk(tree): if isinstance(node, (ast.For, ast.While)): return True return False def is_recursive(code): Checks if the given Python code is recursive. tree = ast.parse(code) func_names = set() for node in ast.walk(tree): if isinstance(node, ast.FunctionDef): func_names.add(node.name) for node in ast.walk(tree): if isinstance(node, ast.Call) and isinstance(node.func, ast.Name) and node.func.id in func_names: return True return False"},{"question":"I am faced with a challenge titled \\"Contains Duplicate\\". The task is to analyze an array of integers, \`nums\`, and determine if there are any duplicates within it. The function should return \`true\` if any value appears at least twice in the array, and \`false\` if all elements are distinct.","solution":"def contains_duplicate(nums): Returns True if any value appears at least twice in the array, and False if all elements are distinct. :param nums: List[int] - An array of integers :return: bool return len(nums) != len(set(nums))"},{"question":"Explain the phenomenon of recursion in programming and provide an example in Python. Also, include a piece of erroneous code that results in an infinite recursion, and explain how it can be fixed.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1) # Example of erroneous code that results in infinite recursion def infinite_recursion(n): Erroneous function that calls itself indefinitely causing infinite recursion. return infinite_recursion(n) # To fix the infinite recursion, we need to add a base case def fixed_recursion(n): Corrected function with a base case to terminate recursion. if n <= 0: return 0 else: return fixed_recursion(n - 1)"},{"question":"Write a python program to find the length of longest consecutive sequence in an unsorted array.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive sequence in an unsorted array. :param nums: List of integers :return: Integer, length of the longest consecutive sequence if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in nums: # Check if it's the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Given two strings \\"An apple a day keeps the doctor away\\" and \\"An apple a day\\", how can I find the longest common subsequence using Python?","solution":"def longest_common_subsequence(str1, str2): m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m): for j in range(n): if str1[i] == str2[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) lcs_length = dp[m][n] lcs = [''] * lcs_length i, j = m, n while i > 0 and j > 0: if str1[i - 1] == str2[j - 1]: lcs[lcs_length - 1] = str1[i - 1] i -= 1 j -= 1 lcs_length -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return ''.join(lcs)"},{"question":"Write a python function that takes a string as input and reverses it. However, if the string is a palindrome (reads same forward and backward), return the reversed string in all uppercase letters. For non-palindrome strings, return the reversed string in its original case.","solution":"def reverse_string(s): Reverses the input string. If the input string is a palindrome, returns the reversed string in uppercase. Otherwise, returns the reversed string in its original case. reversed_s = s[::-1] if s == reversed_s: return reversed_s.upper() else: return reversed_s"},{"question":"Explain what a linked list data structure is and provide an implementation in Python using classes and methods in one sentence, ensuring that the implementation includes an insert method that adds a new element at a specific position, a delete method that removes an element at a specific position, and a search method that finds an element with a given value, while also maintaining the singly linked list structure and handling edge cases such as inserting or deleting from the beginning or end of the list.","solution":"class Node: def __init__(self, value): self.value = value self.next = None class LinkedList: def __init__(self): self.head = None def insert(self, value, position): new_node = Node(value) if position == 0: new_node.next = self.head self.head = new_node return current = self.head for _ in range(position - 1): if current is None: raise IndexError(\\"Position out of range\\") current = current.next new_node.next = current.next current.next = new_node def delete(self, position): if self.head is None: raise IndexError(\\"Position out of range\\") if position == 0: self.head = self.head.next return current = self.head for _ in range(position - 1): if current.next is None: raise IndexError(\\"Position out of range\\") current = current.next if current.next == None: raise IndexError(\\"Position out of range\\") current.next = current.next.next def search(self, value): current = self.head index = 0 while current is not None: if current.value == value: return index current = current.next index += 1 return -1 # element not found"},{"question":"Write a python program which can return the combination of two list by selecting one element from each list . For example list1 = [1 , 2 , 3] and list2 = [4 ,5 ,6]. The output should be [(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)].","solution":"from itertools import product def combine_lists(list1, list2): Returns all combinations of elements from list1 and list2 where each combination contains one element from each list. return list(product(list1, list2))"},{"question":"Implement a function that takes in a list of integers and returns the maximum product of any three integers in the list. The function should have a time complexity of O(n) and a space complexity of O(1).","solution":"def maximum_product_of_three(nums): Returns the maximum product of any three integers in the list. # Variables to store the three largest and two smallest numbers max1 = max2 = max3 = float('-inf') min1 = min2 = float('inf') for num in nums: # Update the largest numbers if num > max1: max3 = max2 max2 = max1 max1 = num elif num > max2: max3 = max2 max2 = num elif num > max3: max3 = num # Update the smallest numbers if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num # Calculate the maximum product of three numbers return max(max1 * max2 * max3, max1 * min1 * min2)"},{"question":"Develop a function called \\"calculate_area\\" which would calculate the area of a given shape. The shapes could be one of the following: circle, square, rectangle, or triangle. The function should be able to handle and throw appropriate exceptions when invalid shape names are given or inappropriate arguments number is passed for a shape. For instance, for a circle, only one argument(radius) should be passed.","solution":"import math def calculate_area(shape, *args): Returns the area of the given shape. The shapes can be 'circle', 'square', 'rectangle', or 'triangle'. Throws ValueError for invalid inputs. if shape == 'circle': if len(args) != 1: raise ValueError(\\"Circle requires exactly one argument (radius).\\") radius = args[0] return math.pi * radius ** 2 elif shape == 'square': if len(args) != 1: raise ValueError(\\"Square requires exactly one argument (side length).\\") side = args[0] return side ** 2 elif shape == 'rectangle': if len(args) != 2: raise ValueError(\\"Rectangle requires exactly two arguments (length and width).\\") length, width = args[0], args[1] return length * width elif shape == 'triangle': if len(args) != 2: raise ValueError(\\"Triangle requires exactly two arguments (base and height).\\") base, height = args[0], args[1] return 0.5 * base * height else: raise ValueError(f\\"Invalid shape: {shape}\\")"},{"question":"Write a Python program that takes a list of strings as input, counts the occurrence of each unique string in the list, and prints the strings along with their occurrences. Also, provide a piece of erroneous code with an explanation of the bug and how to fix it.","solution":"def count_occurrences(input_list): Takes a list of strings as input and returns a dictionary with the strings as keys and their occurrences as values. occurrence_dict = {} for item in input_list: if item in occurrence_dict: occurrence_dict[item] += 1 else: occurrence_dict[item] = 1 return occurrence_dict"},{"question":"Devise a Python code that will process an input text string provided by the user, using programming logic to identify and subsequently print the highest length word within this entered phrase. Phrase: \\"Happiness is the best thing.\\"","solution":"def longest_word(phrase): Returns the longest word in a phrase. If there are multiple words with the same length, the first one encountered is returned. words = phrase.split() max_length = 0 longest = \\"\\" for word in words: if len(word) > max_length: max_length = len(word) longest = word return longest"},{"question":"Write a Python function that takes two strings, \`text\` and \`replacer\`, and an integer \`max_occurrences\`. The function should replace occurrences of \`replacer\` with \`'[]'\` in \`text\` but only up to n times, where n is given by \`max_occurrences\`. If \`max_occurrences\` is 0, replace all occurrences of \`replacer\`. If \`replacer\` is an empty string, return the original string \`text\`. Handle case sensitivity as well if specified.","solution":"def replace_occurrences(text, replacer, max_occurrences, case_sensitive=True): Replaces occurrences of the \`replacer\` in \`text\` with '[]' up to \`max_occurrences\` times. If \`max_occurrences\` is 0, replace all occurrences. If \`replacer\` is empty, return the original \`text\`. Handles case sensitivity based on \`case_sensitive\` parameter. Args: text (str): The original text. replacer (str): The substring to be replaced. max_occurrences (int): The maximum number of occurrences to replace. case_sensitive (bool): If the replacement should be case sensitive. Returns: str: The modified text with replacements. if replacer == \\"\\": return text if not case_sensitive: text_lower = text.lower() replacer_lower = replacer.lower() else: text_lower = text replacer_lower = replacer replaced_text = \\"\\" count = 0 i = 0 while i < len(text): if text_lower[i:i+len(replacer)] == replacer_lower: if max_occurrences == 0 or count < max_occurrences: replaced_text += '[]' count += 1 i += len(replacer) else: replaced_text += text[i] i += 1 else: replaced_text += text[i] i += 1 return replaced_text"},{"question":"Write a python function to take the square of the number. Add a condition to the function such that it returns an error message if the input is not a number.","solution":"def square_number(value): Returns the square of the given value if it's a number. If the input is not a number, returns an error message. if isinstance(value, (int, float)): return value ** 2 else: return \\"Error: Input must be a number.\\""},{"question":"In what version of Python was 'yield from' introduced? Describe its functionality and explain with an example, how it simplifies the code for delegating to a subgenerator.","solution":"def python_yield_from_version(): Returns the Python version in which 'yield from' was introduced. return \\"Python 3.3\\" def example_yield_from(): Example to show how 'yield from' works by delegating to a subgenerator. def subgenerator(): yield 1 yield 2 yield 3 def main_generator(): yield from subgenerator() yield 4 yield 5 return list(main_generator())"},{"question":"Write a python function which when called produces a 200x200 matrix consisting of only -1.","solution":"import numpy as np def create_200x200_matrix(): Returns a 200x200 matrix filled with -1. return np.full((200, 200), -1)"},{"question":"Generate a code snippet to find the highest common factor of two given numbers using only bitwise operators, without using any arithmetic operators, and ensuring that the solution has a time complexity of O(log min(x, y)). Additionally, you must implement the solution in a single function and not use any helper functions or variables.","solution":"def hcf_bitwise(x, y): Finds the highest common factor (HCF) of two given numbers using only bitwise operators with time complexity O(log(min(x, y))). if x == 0: return y if y == 0: return x shift = 0 while not ((x | y) & 1): x >>= 1 y >>= 1 shift += 1 while not (x & 1): x >>= 1 while y != 0: while not (y & 1): y >>= 1 if x > y: x, y = y, x y = y - x return x << shift"},{"question":"Create a Python function that takes a dictionary with boolean values as input. The function should return a list of all keys corresponding to a specified boolean value. If no key with the specified value is found, it should return an empty list.","solution":"def keys_with_value(d, value): Returns a list of keys in the dictionary \`d\` that have the boolean value \`value\`. If no such key is found, returns an empty list. :param d: Dictionary with boolean values :param value: Boolean value to filter keys :return: List of keys that have the specified boolean value return [key for key in d if d[key] == value]"},{"question":"Build a Python function to generate a Fibonacci sequence where the starting numbers (first and second values) can be defined by the user, and then return the nth value in the sequence. Handle potential errors or strange behavior if the user inputs non-integer values, negative numbers, or non-numeric strings. Also, create some unit tests to judge the correctness of your function.","solution":"def fibonacci_custom(start1, start2, n): Generates the nth value in the Fibonacci sequence starting with custom initial values start1 and start2. Parameters: start1 (int): The first value of the Fibonacci sequence. start2 (int): The second value of the Fibonacci sequence. n (int): The position in the sequence to return (1-indexed). Returns: int: The nth value in the Fibonacci sequence. Raises: ValueError: If the inputs are not integer values or if n is not a positive integer. if not (isinstance(start1, int) and isinstance(start2, int) and isinstance(n, int)): raise ValueError(\\"All inputs must be integers.\\") if n <= 0: raise ValueError(\\"The position 'n' must be a positive integer.\\") if n == 1: return start1 elif n == 2: return start2 a, b = start1, start2 for _ in range(n - 2): a, b = b, a + b return b"},{"question":"Merge two sorted lists into one using two different approaches: one employing a priority queue and the other using a two-pointer technique. Also, for each approach, your code should have error detection capabilities to check if the input is indeed a list and if all elements in the list are integers.","solution":"from heapq import merge from collections.abc import Iterable def check_valid_list(lst): if not isinstance(lst, list): raise ValueError(\\"Input should be a list.\\") if not all(isinstance(x, int) for x in lst): raise ValueError(\\"All elements in the list should be integers.\\") def merge_sorted_lists_priority_queue(lst1, lst2): Merge two sorted lists into one using priority queue approach. check_valid_list(lst1) check_valid_list(lst2) return list(merge(lst1, lst2)) def merge_sorted_lists_two_pointer(lst1, lst2): Merge two sorted lists into one using two-pointer technique. check_valid_list(lst1) check_valid_list(lst2) merged_list = [] i, j = 0, 0 while i < len(lst1) and j < len(lst2): if lst1[i] < lst2[j]: merged_list.append(lst1[i]) i += 1 else: merged_list.append(lst2[j]) j += 1 # Add remaining elements merged_list.extend(lst1[i:]) merged_list.extend(lst2[j:]) return merged_list"},{"question":"Can you develop a Python function to calculate the nth term in the Fibonacci sequence, given a positive integer n as an argument, by employing an iterative approach? Additionally, extend this function to handle large numbers efficiently, without causing a memory overload. The function should also validate the input to ensure it's within the reasonable range (e.g., n <= 10^10). Incorporate error handling for invalid inputs.","solution":"def fibonacci(n): Returns the nth term in the Fibonacci sequence using an iterative approach. Note: The function handles large numbers efficiently and checks for valid input. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n > 10**10: raise ValueError(\\"Input is too large, it must be less than or equal to 10^10.\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a code snippet that reverses a string in Python without using any built-in string reverse functions or slicing. Additionally, the solution should have a time complexity of O(n), where n is the length of the string.","solution":"def reverse_string(s): Reverses the given string without using any built-in string reverse functions or slicing. Time complexity: O(n), where n is the length of the string. reversed_string = \\"\\" for char in s: reversed_string = char + reversed_string return reversed_string"},{"question":"Given a set of incomplete and potentially erroneous code snippets, analyze and identify the flaws. Then, write a correct and fully functional code script aimed at traversing and exploring a ternary tree structure. The revised code should employ a depth-first search algorithm, specifically the pre-order traversal method. In addition to correcting the code, add functionalities that will allow the user to identify the deepest node, and count operations. Your code should also be well-commented to ensure clarity and understanding for future modifications.","solution":"class TernaryNode: def __init__(self, value): Initializes a new node with given value and three children set to None. self.value = value self.left = None self.middle = None self.right = None def pre_order_traversal(node, visit_func): Traverses the ternary tree in pre-order manner and applies visit_func to each node. if node: visit_func(node) pre_order_traversal(node.left, visit_func) pre_order_traversal(node.middle, visit_func) pre_order_traversal(node.right, visit_func) def find_deepest_node(node): Finds the deepest node in the ternary tree. if not node: return None, -1 nodes = [(node, 0)] deepest_node = node max_depth = 0 while nodes: current, depth = nodes.pop() if depth > max_depth: max_depth = depth deepest_node = current if current.right: nodes.append((current.right, depth + 1)) if current.middle: nodes.append((current.middle, depth + 1)) if current.left: nodes.append((current.left, depth + 1)) return deepest_node, max_depth def count_nodes(node): Counts the total number of nodes in the ternary tree. if not node: return 0 return 1 + count_nodes(node.left) + count_nodes(node.middle) + count_nodes(node.right)"},{"question":"Given an array of integers in an ascending order and a target value, write a function that returns the index of the first occurrence of the target value in the array. If the target value is not present in the array, the function should return -1.","solution":"def first_occurrence(arr, target): Returns the index of the first occurrence of the target value in a sorted array. If the target is not present, returns -1. left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: result = mid right = mid - 1 # Continue searching in the left half to find the first occurrence elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return result"},{"question":"Write a program that converts a decimal number to binary. Your program should take an integer input and output the corresponding binary representation as a string. Make sure to handle the case where the input is zero or a negative number.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation as a string. Handles zero and negative numbers as well. if n == 0: return \\"0\\" elif n < 0: return \\"-\\" + bin(n)[3:] # Skip the first three characters ('-0b') else: return bin(n)[2:] # Skip the first two characters ('0b')"},{"question":"Write a Python script that can convert a string to pig latin. Your script should include error handling to manage cases where the input is not a string. Additionally, add the functionality to handle a string with multiple words, converting each word to pig latin individually. The script should preserve the original case of the words in the converted output.","solution":"def convert_to_pig_latin(text): Converts a given string to Pig Latin. If the input is not a string, raises a ValueError. Parameters: text (str): Input string to be converted Returns: str: The converted Pig Latin string if not isinstance(text, str): raise ValueError(\\"Input must be a string.\\") def convert_word(word): if word[0] in \\"AEIOUaeiou\\": return word + \\"way\\" else: return word[1:] + word[0] + \\"ay\\" words = text.split() converted_words = [convert_word(word) for word in words] return ' '.join(converted_words)"},{"question":"I want to create a contact list for my friends. Can you help me write a basic Python script to manage it? The script should allow me to add a friend with their email and phone number, list all friends, and also delete a friend from the list.","solution":"class ContactList: def __init__(self): self.contacts = [] def add_friend(self, name, email, phone): self.contacts.append({\\"name\\": name, \\"email\\": email, \\"phone\\": phone}) def list_friends(self): return self.contacts def delete_friend(self, name): self.contacts = [friend for friend in self.contacts if friend['name'] != name]"},{"question":"Create a tree with nodes A, B, C, D, E, F, G, H, and I. Traverse the tree using pre-order traversal and print the nodes in reverse order.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def pre_order_traversal(root): if root is None: return [] return [root.value] + pre_order_traversal(root.left) + pre_order_traversal(root.right) def create_tree(): # Creating nodes nodes = {char: TreeNode(char) for char in \\"ABCDEFGHI\\"} # Constructing the tree nodes['A'].left = nodes['B'] nodes['A'].right = nodes['C'] nodes['B'].left = nodes['D'] nodes['B'].right = nodes['E'] nodes['C'].left = nodes['F'] nodes['C'].right = nodes['G'] nodes['E'].left = nodes['H'] nodes['E'].right = nodes['I'] return nodes['A'] # Returning the root node (A) def pre_order_traversal_reverse(root): traversal = pre_order_traversal(root) return traversal[::-1] # Reverse the list"},{"question":"Initialize an empty stack and write a program to check if a given string containing parentheses, brackets, and braces are balanced or not. The string may also contain other characters. The program should return True if the string is balanced and False otherwise.","solution":"def is_balanced(s): Checks if the parentheses, brackets, and braces in the given string are balanced. Args: - s (str): The input string containing various characters. Returns: - bool: True if the string is balanced, False otherwise. stack = [] matching_brackets = {')': '(', ']': '[', '}': '{'} for char in s: if char in matching_brackets.values(): stack.append(char) elif char in matching_brackets.keys(): if stack == [] or matching_brackets[char] != stack.pop(): return False else: continue return stack == []"},{"question":"Modify the given \`sum_numbers\` function by adding a single line that prints the input list. After that, create another function that takes in a list of integers and returns a new list containing the sum of every pair of adjacent elements. If the list has an odd number of elements, the last element should not be paired and should be appended to the end of the resulting list as is. Name this function \`pair_sum\` and complete the given code by using list comprehension to call \`pair_sum\` with a list of integers.","solution":"def sum_numbers(numbers): Returns the sum of all the numbers in the list. Also prints the input list of numbers. print(numbers) return sum(numbers) def pair_sum(numbers): Takes in a list of integers and returns a new list containing the sum of every pair of adjacent elements. If the list has an odd number of elements, the last element is appended to the end of the resulting list as is. return [numbers[i] + numbers[i+1] for i in range(0, len(numbers)-1, 2)] + ([numbers[-1]] if len(numbers) % 2 != 0 else [])"},{"question":"Generate a unique ID for a user based on their email address and a secret key.","solution":"import hashlib def generate_user_id(email, secret_key): Generates a unique ID for a user based on their email address and a secret key. Args: email (str): The email address of the user. secret_key (str): The secret key used for generating the unique ID. Returns: str: A unique user ID generated using the email and secret key. # Create a hash object hash_object = hashlib.sha256() # Create the unique string by concatenating email and secret key unique_string = email + secret_key # Update the hash object with the unique string hash_object.update(unique_string.encode('utf-8')) # Get the hexadecimal digest of the hash user_id = hash_object.hexdigest() return user_id"},{"question":"Given two strings, write a program to check if one string is a rotation of the other using only one call to the inbuilt string function.","solution":"def is_rotation(s1, s2): Checks if s1 is a rotation of s2. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"Write a program that extracts all the email addresses from a given string. The program should handle various formats of email addresses, including those with different domains and subdomains. Additionally, it should be able to ignore email addresses that are part of larger words or phrases.","solution":"import re def extract_emails(text): Extracts all valid email addresses from the given string. Args: text (str): The input string from which to extract email addresses. Returns: list of str: A list of extracted email addresses. # Regex pattern for extracting email addresses email_pattern = r'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,7}b' return re.findall(email_pattern, text)"},{"question":"Implement a priority queue with the following functions: insert, extract-min, and decrease-key. The priority queue should have a time complexity of O(log n) for the insert and decrease-key operations, and O(1) for the extract-min operation. Additionally, the queue should have a space complexity of O(1) and should not use any built-in data structures or libraries, such as arrays or binary heaps, for storing the elements. Instead, you should implement your own data structure using only bitwise operations and linked lists.","solution":"class ListNode: def __init__(self, key, priority): self.key = key self.priority = priority self.next = None class PriorityQueue: def __init__(self): self.head = None def insert(self, key, priority): new_node = ListNode(key, priority) if not self.head or self.head.priority > priority: new_node.next = self.head self.head = new_node else: current = self.head while current.next and current.next.priority <= priority: current = current.next new_node.next = current.next current.next = new_node def extract_min(self): if not self.head: raise IndexError(\\"extract_min from empty priority queue\\") min_node = self.head self.head = self.head.next return (min_node.key, min_node.priority) def decrease_key(self, key, new_priority): if not self.head: raise ValueError(\\"key not found in priority queue\\") current = self.head prev = None while current and current.key != key: prev = current current = current.next if not current: raise ValueError(\\"key not found in priority queue\\") if new_priority >= current.priority: return if prev: prev.next = current.next else: self.head = current.next self.insert(key, new_priority)"},{"question":"How can I rotate a 2D matrix clockwise by 90 degrees in Python using an in-place algorithm without using extra space for another matrix? Also, write a function to verify the correctness of your solution by testing it with various input cases. Input matrices should include edge cases like empty matrices of various dimensions.","solution":"def rotate_90_clockwise(matrix): Rotates the given n x n matrix by 90 degrees clockwise in place. Assumption: The input is a non-empty square 2D matrix (n x n). n = len(matrix) if n == 0 or len(matrix[0]) == 0: return # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Implement a Flatten Operator in tensor system software by using recursion to successively collapse multiple axes while maintaining input order, setting as new strategy for machine learning program leveraging high-dimensional datasets.","solution":"def flatten(tensor): Flattens a high-dimensional tensor into a 1-dimensional list using recursion. Args: tensor (list): A nested list representing the high-dimensional tensor. Returns: list: A flattened 1-dimensional list. if not isinstance(tensor, list): return [tensor] flat_list = [] for item in tensor: flat_list.extend(flatten(item)) return flat_list"},{"question":"Write a code in which the values in the dictionaries will be swapped. However, you are not allowed to use any built-in functions or methods that directly swap the values of the dictionaries. The code should be able to handle dictionaries of any length. Additionally, the code should print the swapped dictionary in descending order based on the original dictionary's values. The swapped dictionary should only include key-value pairs where the original value is a positive integer and the original key is a string that contains at least one uppercase letter.","solution":"def swap_and_filter_dict(original_dict): Swaps the key-value pairs in the dictionary and filters based on conditions. Only includes key-value pairs where the original value is a positive integer and the original key is a string containing at least one uppercase letter. Returns the swapped dictionary sorted in descending order of original values. swapped_dict = {} for key, value in original_dict.items(): # Check if original value is a positive integer and key contains uppercase letters if isinstance(value, int) and value > 0 and any(c.isupper() for c in key): swapped_dict[value] = key # Sort the swapped dictionary in descending order based on the original values (now keys in swapped_dict) sorted_swapped_dict = {k: swapped_dict[k] for k in sorted(swapped_dict, reverse=True)} return sorted_swapped_dict"},{"question":"Construct a lambda function in Python that identifies even numbers in a given list and returns a list of these even numbers. Additionally, disregard the built-in filter function and construct your own function from scratch to filter the even numbers. In addition to that, you will also construct an additional lambda function that will check the correctness of your function by comparing it with the built-in filter function. Below is a piece of wrong code, use it as a reference point.","solution":"def custom_filter_even_numbers(numbers): Filters the even numbers from the input list. return [number for number in numbers if (lambda x: x % 2 == 0)(number)] check_lambda = lambda custom_result, built_in_result: custom_result == built_in_result def built_in_filter_even_numbers(numbers): Uses built-in filter function to get even numbers from the input list. return list(filter(lambda x: x % 2 == 0, numbers))"},{"question":"Task: Check for unique characters in a string using Python 3. I also want you to consider the case sensitivity of the characters. However, you are not allowed to use any built-in Python functions or libraries like set, list, etc., for checking or counting the characters. Besides, provide a piece of erroneous code that fails to provide the correct output and explain why it results in the wrong output.","solution":"def has_unique_characters(s): Determines if a string has all unique characters (case-sensitive). char_seen = {} for char in s: if char in char_seen: return False char_seen[char] = True return True # Erroneous Code def erroneous_unique_characters(s): Erroneous function to determine if a string has all unique characters (case-sensitive). for i in range(len(s)): for j in range(i + 1, len(s)): if s[i] == s[j]: return False return True # Explanation of Error: # The erroneous_unique_characters function uses nested loops to check each pair of characters in the string. # While this approach is theoretically correct, it is inefficient (O(n^2) time complexity) compared to the # dictionary-based solution. Additionally, it does not necessarily show an incorrect result explicitly, # but it is not optimal in performance for larger strings."},{"question":"Develop a coding function that integrates underscores in the gaps between words that terminate with punctuation symbols within a provided textual string, ensuring the function is capable of handling multiple punctuation marks and varying sentence structures.","solution":"import re def integrate_underscores(text): Integrates underscores in the gaps between words that terminate with punctuation symbols within the provided textual string. Args: text (str): The input text string. Returns: str: The transformed text with underscores integrated appropriately. # Pattern to find words ending with punctuation followed by a space pattern = re.compile(r'b(w+[^ws])s(?=w)') # Replace the spaces with underscores result = pattern.sub(r'1_', text) return result"},{"question":"Please combine these three functions into a single function by using the concept of parameterized functions in Python. Your function should be able to take three parameters to replace the current fixed variable values, which are \\"hello\\", \\"world\\", and the print statement. The function should also return the result of the print statement instead of directly printing it.","solution":"def combined_function(param1, param2, operation): Combines three functions into one parameterized function. It takes three parameters: param1: The first parameter, can be of any type. param2: The second parameter, can be of any type. operation: A function that performs an operation on the first two parameters. Returns the result of the operation. return operation(param1, param2)"},{"question":"Given a list of strings, output a new list where the order of the characters in each string is reversed. However, you are not allowed to use any built-in functions or methods that directly reverse a string, and your solution should have a time complexity better than O(n^2). You must implement your own algorithm to reverse the characters within each string.","solution":"def reverse_string(s): Reverses the characters in a string. char_list = list(s) left, right = 0, len(char_list) - 1 while left < right: char_list[left], char_list[right] = char_list[right], char_list[left] left += 1 right -= 1 return ''.join(char_list) def reverse_strings_in_list(strings): Reverses the characters in each string within a list. return [reverse_string(s) for s in strings]"},{"question":"Create a Python function called \\"multiplyStrings\\" which can take two string numbers as input, validate them and then return the product. If either of the strings is not a valid representation of an integer, the function should throw a ValueError.","solution":"def multiplyStrings(num1, num2): Multiplies two string numbers and returns the product as an integer. :param num1: String representation of the first number :param num2: String representation of the second number :return: The product of the two numbers as an integer :raises ValueError: If either of the input strings is not a valid integer representation try: int_num1 = int(num1) int_num2 = int(num2) except ValueError: raise ValueError(\\"One or both values are not valid integer representations\\") return int_num1 * int_num2"},{"question":"Given two lists in Python, turn them into a single dictionary where elements of the first list act as keys and the second one as values. You can assume both lists have a strictly identical length.","solution":"def lists_to_dict(keys, values): Given two lists of equal length, convert them to a dictionary where elements of the first list are keys and elements of the second list are values. :param keys: List of keys. :param values: List of values. :return: Dictionary where keys are elements from 'keys' list and values are from 'values' list. if len(keys) != len(values): raise ValueError(\\"Both lists must have the same length\\") return dict(zip(keys, values))"},{"question":"Write a code to return the key of the minimum element in a dictionary. However, you are not allowed to use the built-in min() function or any other sorting functions.","solution":"def key_of_min_value(d): Returns the key of the minimum element in a dictionary. If the dictionary is empty, returns None. Parameters: d (dict): A dictionary where values are comparable. Returns: key: Key corresponding to the minimum value in the dictionary. if not d: return None min_key = None min_value = None for key in d: if min_value is None or d[key] < min_value: min_value = d[key] min_key = key return min_key"},{"question":"Design a Python programme that precisely computes and exhibits the pattern of a diamond, inclusive of its symmetry, using the reserved character '*'. Additionally, ensure to implement an algorithm that adjusts the size of the diamond based on an integer input given by the user. The input could go up to 1000, so consider dealing with larger inputs, and make sure your algorithm holds the correct complexity.","solution":"def generate_diamond(n): Generates a diamond pattern of the size 'n', representing the middle line width and longest part of the diamond. diamond = [] for i in range(n): line = ' ' * (n - i - 1) + '*' * (2 * i + 1) + ' ' * (n - i - 1) diamond.append(line) for i in range(n - 2, -1, -1): line = ' ' * (n - i - 1) + '*' * (2 * i + 1) + ' ' * (n - i - 1) diamond.append(line) return \\"n\\".join(diamond)"},{"question":"Develop a programme that accepts an input array of arbitrary length and sorts it in reverse order. The program should demonstrate efficiency with optimized time and space complexities. Ensure to validate the input for type and format before proceeding with the sorting operation.","solution":"def sort_in_reverse(arr): Sort the input array in reverse order. Parameters: arr (list): A list of elements to be sorted. All elements must be of the same data type. Returns: list: A new list sorted in reverse order. if not isinstance(arr, list): raise TypeError(\\"Input should be a list\\") if len(arr) == 0: return arr if not all(isinstance(x, type(arr[0])) for x in arr): raise ValueError(\\"All elements in the list must be of the same type\\") return sorted(arr, reverse=True)"},{"question":"How will you modify the \`date_time\` function so that it will return the time in three different formats: full, short, and military? The modified function must also accept a parameter that will determine the format of the time to be returned. Additionally, the military format should exclude the AM/PM indicator and should have the seconds component excluded.","solution":"from datetime import datetime def date_time(format_type): Returns the current date and time in three different formats: 'full', 'short', and 'military'. Parameters: - format_type (str): The format type for the time to be returned. Can be 'full', 'short', or 'military'. Returns: - str: The current date and time in the specified format. now = datetime.now() if format_type == 'full': return now.strftime(\\"%Y-%m-%d %I:%M:%S %p\\") elif format_type == 'short': return now.strftime(\\"%Y-%m-%d %I:%M %p\\") elif format_type == 'military': return now.strftime(\\"%Y-%m-%d %H:%M\\") else: raise ValueError(\\"Invalid format type. Use 'full', 'short', or 'military'.\\")"},{"question":"Write a Python script for producing the intersection of two arrays, without using any pre-built functions. Add an additional feature that your function should return the elements and their occurrence count.","solution":"def array_intersection_with_count(arr1, arr2): Returns the intersection of two arrays along with the occurrence count of each common element. Args: arr1: List of elements (First Array) arr2: List of elements (Second Array) Returns: A dictionary with the common elements as keys and their occurrence counts as values. intersection_count = {} for element in arr1: if element in arr2: if element in intersection_count: intersection_count[element] += 1 else: intersection_count[element] = 1 return intersection_count"},{"question":"Write a Python program that takes an image of a cat and a scalar multiplication value as inputs, and multiplies each pixel value in the image by the given scalar value using OpenCV. Additionally, verify the integrity of the input image and handle potential errors that could be caused by non-image inputs or incompatible image formats.","solution":"import cv2 import numpy as np def multiply_image_scalar(image_path, scalar): Multiply each pixel value in the image by a given scalar value. :param image_path: Path to the input image file. :param scalar: Scalar value to multiply with each pixel. :return: Scaled image as a numpy array. try: # Load the image image = cv2.imread(image_path) # Check if the image is loaded properly if image is None: raise ValueError(\\"The provided file is not a valid image or the file path is incorrect.\\") # Convert the image to float to prevent overflow during multiplication image = image.astype(np.float32) # Multiply the image with the scalar value scaled_image = image * scalar # Clip the values to be in the valid range [0, 255] and convert back to uint8 scaled_image = np.clip(scaled_image, 0, 255).astype(np.uint8) return scaled_image except Exception as e: raise ValueError(\\"An error occurred while processing the image: \\" + str(e))"},{"question":"Develop a Python function to compute whether the aggregate sum of all entries in an integer array sits within two pre-determined parameters, and ensure its validity through the supplied testing scenario.","solution":"def is_sum_within_bounds(arr, lower_bound, upper_bound): Determines whether the sum of all entries in an integer array is within the given bounds. Args: arr (list of int): The array of integers. lower_bound (int): The lower bound of the sum. upper_bound (int): The upper bound of the sum. Returns: bool: True if the sum is within the bounds, False otherwise. total_sum = sum(arr) return lower_bound <= total_sum <= upper_bound"},{"question":"Write a recursive function in Python that takes a list of integers and returns the product of all the even numbers in the list. If the list contains no even numbers, the function should return 1.","solution":"def product_of_evens(lst): Returns the product of all even numbers in the list using recursion. If there are no even numbers, returns 1. if not lst: return 1 head, *tail = lst if head % 2 == 0: return head * product_of_evens(tail) else: return product_of_evens(tail)"},{"question":"text=Write code in Python that takes a list and splits it halfway. if the list has an odd number of elements the middle one should be in the second half. Make sure the code is well-commented and easy to understand","solution":"def split_list_halfway(lst): Splits the list \`lst\` into two halves. If the list has an odd number of elements, the middle one should be in the second half. Parameters: lst (list): The list to be split. Returns: tuple: A tuple containing two lists, the first half and the second half. # Calculate the middle index middle_index = len(lst) // 2 # If the list has an odd number of elements, adjust the middle index to include the middle element in the second half if len(lst) % 2 != 0: middle_index += 1 # Split the list into two halves first_half = lst[:middle_index] second_half = lst[middle_index:] return first_half, second_half"},{"question":"Write a Python class that implements a binary search tree. It should have methods for adding nodes, searching for a node, and traversing the tree in-order.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root = None def add_node(self, value): Adds a node to the BST with the given value. if self.root is None: self.root = TreeNode(value) else: self._add_node_recursive(self.root, value) def _add_node_recursive(self, node, value): if value < node.value: if node.left is None: node.left = TreeNode(value) else: self._add_node_recursive(node.left, value) else: if node.right is None: node.right = TreeNode(value) else: self._add_node_recursive(node.right, value) def search(self, value): Searches for a node with the given value. Returns True if found, otherwise False. return self._search_recursive(self.root, value) def _search_recursive(self, node, value): if node is None: return False if value == node.value: return True elif value < node.value: return self._search_recursive(node.left, value) else: return self._search_recursive(node.right, value) def in_order_traversal(self): Returns the in-order traversal of the BST as a list of values. result = [] self._in_order_recursive(self.root, result) return result def _in_order_recursive(self, node, result): if node is not None: self._in_order_recursive(node.left, result) result.append(node.value) self._in_order_recursive(node.right, result)"},{"question":"Create a small script in Python that converts temperature from Celsius to Fahrenheit, and vice versa.","solution":"def celsius_to_fahrenheit(celsius): Converts Celsius to Fahrenheit. Formula: (°C * 9/5) + 32 = °F return (celsius * 9/5) + 32 def fahrenheit_to_celsius(fahrenheit): Converts Fahrenheit to Celsius. Formula: (°F - 32) * 5/9 = °C return (fahrenheit - 32) * 5/9"},{"question":"Consider a sorted linked list and perform a binary search on this list. Additionally, ensure your algorithm can handle duplicates and returns the first index of the target in the list. If the target is not found, return -1.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def find_length(head): length = 0 while head: length += 1 head = head.next return length def get_node_at_index(head, index): current = head for _ in range(index): current = current.next return current def binary_search_linked_list(head, target): length = find_length(head) left = 0 right = length - 1 result = -1 while left <= right: mid = (left + right) // 2 mid_node = get_node_at_index(head, mid) if mid_node.val == target: result = mid # We continue to search to the left for the first occurrence right = mid - 1 # Move left to find the first occurrence elif mid_node.val < target: left = mid + 1 else: right = mid - 1 return result"},{"question":"Write a Python program that prints the elements of an NxN (N is provided as a command line argument) zero matrix in a spiral pattern. Make sure your solution handles both even and odd N values.","solution":"def generate_spiral_matrix(N): Generates an NxN zero matrix and returns its elements in a spiral order. :param N: Size of the matrix (NxN) :return: List of matrix elements in spiral order # Create NxN zero matrix matrix = [[0 for _ in range(N)] for _ in range(N)] if N == 0: return [] spiral_order = [] left, right = 0, N - 1 top, bottom = 0, N - 1 while left <= right and top <= bottom: # Traverse from left to right along the top row for i in range(left, right + 1): spiral_order.append(matrix[top][i]) top += 1 # Traverse from top to bottom along the right column for i in range(top, bottom + 1): spiral_order.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left along the bottom row for i in range(right, left - 1, -1): spiral_order.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse from bottom to top along the left column for i in range(bottom, top - 1, -1): spiral_order.append(matrix[i][left]) left += 1 return spiral_order"},{"question":"Code an algorithm not only to eliminate repetitive characters from a string but also to track and print the number of repetitions for each character, consider upper and lower case as different characters. The algorithm should also maintain the original order of the distinct elements in the original string.","solution":"def remove_repetitions_and_count(s): Removes repetitive characters from a string and tracks the number of repetitions for each character. Args: s (str): The input string. Returns: tuple: A tuple containing: - A string with repetitive characters removed. - A dictionary where keys are characters and values are the number of repetitions. seen = set() result = [] repetitions = {} for char in s: if char in seen: repetitions[char] += 1 else: seen.add(char) result.append(char) repetitions[char] = 1 return ''.join(result), repetitions"},{"question":"Could you write a python function to standardize a cuisine's ingredient list? The function should replace common ingredient aliases with their standard names. The aliases to be replaced in the ingredient list include: onion --> 'onions', shallot --> 'shallots', chilly --> 'chiles', chilli --> 'chiles', chili --> 'chiles', capsicum --> 'bell peppers', paprika --> 'paprika spice', and parsley --> 'parsley herb'.","solution":"def standardize_ingredients(ingredients): Standardizes the cuisine's ingredient list by replacing common ingredient aliases with their standard names. :param ingredients: List of ingredients to be standardized. :type ingredients: list of str :return: List of standardized ingredients. :rtype: list of str aliases = { 'onion': 'onions', 'shallot': 'shallots', 'chilly': 'chiles', 'chilli': 'chiles', 'chili': 'chiles', 'capsicum': 'bell peppers', 'paprika': 'paprika spice', 'parsley': 'parsley herb', } standardized_ingredients = [ aliases[ingredient.lower()] if ingredient.lower() in aliases else ingredient for ingredient in ingredients ] return standardized_ingredients"},{"question":"Write a code to print a binary tree in pre order traversal.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def pre_order_traversal(root): Returns the pre-order traversal of a binary tree. :param root: TreeNode, the root of the binary tree :return: list of values in pre-order if root is None: return [] result = [] stack = [root] while stack: node = stack.pop() if node: result.append(node.val) if node.right: stack.append(node.right) if node.left: stack.append(node.left) return result"},{"question":"Write a recursive Python function to calculate the factorial of a number, but with the additional requirements that the function must be tail recursive, must not use any loops or helper functions, and must be able to handle extremely large input values efficiently without causing a stack overflow.","solution":"import sys sys.setrecursionlimit(10000) def factorial_tail_recursive(n, accumulator=1): Returns the factorial of n using a tail-recursive method. This method is optimized to handle very large input values efficiently. if n == 0: return accumulator else: return factorial_tail_recursive(n - 1, n * accumulator)"},{"question":"Fabricate a method for instituting a search protocol in a sequential array that involves binary search technique. Your solution should implement the binary search algorithm for searching an element in a sorted array, including boundary condition handling and calculation of the number of steps required to complete the search. Also, identify and fix potential bugs in the provided pseudo code of a binary search algorithm.","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the target element. Returns a tuple of (index of the target element, number of steps taken) or (-1, number of steps taken) if the target is not found. left, right = 0, len(arr) - 1 steps = 0 while left <= right: steps += 1 mid = left + (right - left) // 2 if arr[mid] == target: return mid, steps if arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1, steps"},{"question":"Implement a selection sort algorithm in Python to sort an array of integer numbers in ascending order. You can not use any built-in sort methods or functions. After that, modify your code to use a binary search to find the correct position for the selected element (in the sorted part of the array), this should be implemented instead of the regular swap. Provide checks for edge cases, including if the array is already sorted, reversed or empty. Comment your code to explain your implementation.","solution":"def binary_search(arr, val, start, end): Perform binary search to find the index where \`val\` should be inserted. while start < end: mid = (start + end) // 2 if arr[mid] < val: start = mid + 1 else: end = mid return start def selection_sort(arr): Perform selection sort using binary search for finding the insert position. for i in range(len(arr)): min_idx = i for j in range(i + 1, len(arr)): if arr[j] < arr[min_idx]: min_idx = j # Use binary search to find the correct position for the selected element val = arr[min_idx] del arr[min_idx] pos = binary_search(arr, val, 0, i) # Since arr[min_idx] is removed, we pass i instead of i+1 arr.insert(pos, val) return arr"},{"question":"How can I use AWS Step Functions to validate the format and content of uploaded XML files before passing them to another function for further processing? Could you please provide a sample code that demonstrates this workflow?","solution":"import boto3 def create_step_function(): Creates an AWS Step Function that validates the format and content of uploaded XML files. client = boto3.client('stepfunctions') definition = { \\"Comment\\": \\"A state machine that validates XML files.\\", \\"StartAt\\": \\"ValidateXMLFormat\\", \\"States\\": { \\"ValidateXMLFormat\\": { \\"Type\\": \\"Task\\", \\"Resource\\": \\"arn:aws:lambda:region:account-id:function:ValidateXMLFormat\\", \\"Next\\": \\"ValidateXMLContent\\", \\"Catch\\": [ { \\"ErrorEquals\\": [\\"ValidationError\\"], \\"Next\\": \\"InvalidFormat\\" } ] }, \\"ValidateXMLContent\\": { \\"Type\\": \\"Task\\", \\"Resource\\": \\"arn:aws:lambda:region:account-id:function:ValidateXMLContent\\", \\"Next\\": \\"ProcessValidXML\\", \\"Catch\\": [ { \\"ErrorEquals\\": [\\"ContentError\\"], \\"Next\\": \\"InvalidContent\\" } ] }, \\"InvalidFormat\\": { \\"Type\\": \\"Fail\\", \\"Cause\\": \\"The XML format is invalid.\\" }, \\"InvalidContent\\": { \\"Type\\": \\"Fail\\", \\"Cause\\": \\"The XML content is invalid.\\" }, \\"ProcessValidXML\\": { \\"Type\\": \\"Task\\", \\"Resource\\": \\"arn:aws:lambda:region:account-id:function:ProcessValidXML\\", \\"End\\": True } } } response = client.create_state_machine( name='ValidateXMLFilesStateMachine', definition=json.dumps(definition), roleArn='arn:aws:iam::account-id:role/service-role/StepFunctions-XMLValidationRole' ) return response def lambda_handler(event, context): Entry point for the Lambda function. # Example Lambda function if event['task'] == 'ValidateXMLFormat': return validate_xml_format(event['xml']) elif event['task'] == 'ValidateXMLContent': return validate_xml_content(event['xml']) elif event['task'] == 'ProcessValidXML': return process_valid_xml(event['xml']) def validate_xml_format(xml_data): Validates the format of the XML data. import xml.etree.ElementTree as ET try: ET.fromstring(xml_data) except ET.ParseError: raise Exception(\\"ValidationError\\") return {\\"status\\": \\"ValidFormat\\"} def validate_xml_content(xml_data): Validates the content of the XML data. # Dummy content validation if \\"<content>\\" not in xml_data: raise Exception(\\"ContentError\\") return {\\"status\\": \\"ValidContent\\"} def process_valid_xml(xml_data): Processes the valid XML data. # Process XML data return {\\"status\\": \\"Processed\\"}"},{"question":"Create a simple greedy A.I for a turn-based strategy game, using Python. In this game, each player has several units, and the goal is to capture all of the opponent's units or their base.","solution":"class Game: def __init__(self, player_units, opponent_units, base_position): self.player_units = player_units self.opponent_units = opponent_units self.base_position = base_position class Unit: def __init__(self, position, strength): self.position = position self.strength = strength def move_towards(self, target): if self.position < target: self.position += 1 elif self.position > target: self.position -= 1 def attack(self, opponent): if self.position == opponent.position: if self.strength > opponent.strength: opponent.strength = 0 else: self.strength = 0 def greedy_ai(game): for unit in game.player_units: if game.opponent_units: # Find the closest opponent unit closest_opponent = min(game.opponent_units, key=lambda op: abs(unit.position - op.position)) # Move towards the closest opponent unit unit.move_towards(closest_opponent.position) # Attack if in range unit.attack(closest_opponent) # Remove defeated opponent unit game.opponent_units = [op for op in game.opponent_units if op.strength > 0] else: # Move towards the base if no opponents are left unit.move_towards(game.base_position)"},{"question":"12. Write a python function 'mult_str_nums' that takes a list of strings as an argument, identify the strings that can be converted to integers in it then multiply them together and return the result. It should also handle potential exceptions. For instance, your function should return a meaningful error message when the list is empty or contains no convertible strings, instead of returning a default value or crashing. Moreover, test your function using a variety of data inputs to ensure its robustness.","solution":"def mult_str_nums(lst): Multiplies all strings that can be converted to integers in the list and returns the product. Returns an error message if the list is empty or contains no convertible strings. if not lst: return \\"Error: The list is empty.\\" product = 1 count = 0 for item in lst: try: num = int(item) product *= num count += 1 except ValueError: continue if count == 0: return \\"Error: No convertible strings in the list.\\" return product"},{"question":"Convert a list of alphabetic strings to a corresponding list of integer values based on a predefined mapping. This involves understanding how to map characters to numbers, iterate through a list, and apply conditional logic.","solution":"def alphabet_to_integer_mapping(alphabet_list): Converts a list of alphabetic strings to a list of corresponding integer values. result = [] for item in alphabet_list: item = item.lower() integer_value = ord(item) - ord('a') + 1 result.append(integer_value) return result"},{"question":"Given an input dictionary, write a function that prints the keys along with their associated values but in a reversed order for both keys and values. For example, if the dictionary is {'a': 'apple', 'b': 'banana', 'c': 'cherry'}, you should print ('c', 'cherry'), ('b', 'banana'), ('a', 'apple').","solution":"def print_reversed_dictionary(input_dict): Prints the dictionary keys and values in reversed order. for key in reversed(input_dict): print(f\\"('{key}', '{input_dict[key]}')\\")"},{"question":"Write a Python version info script that not only prints the version of the Python interpreter currently running but also lists all installed modules and their versions.","solution":"import sys import pkg_resources def python_version_info(): Prints the Python version and lists all installed modules with their versions. python_version = sys.version installed_packages = pkg_resources.working_set print(f'Python Version: {python_version}n') print('Installed Packages:') for package in installed_packages: print(f'{package.project_name}: {package.version}') return python_version, {package.project_name: package.version for package in installed_packages}"},{"question":"Develop an algorithm for encrypting text using the Caesar cipher","solution":"def caesar_cipher_encrypt(text, shift): Encrypts the input text using Caesar Cipher with the given shift. Parameters: text (str): The plaintext to be encrypted. shift (int): The number of positions to shift each character. Returns: str: The encrypted text. result = [] for char in text: if char.isalpha(): shift_amount = shift % 26 # To handle shifts greater than 26 char_code = ord(char) base = ord('A') if char.isupper() else ord('a') encrypted_char = chr(base + (char_code - base + shift_amount) % 26) result.append(encrypted_char) else: # Non-alphabetic characters are left unchanged result.append(char) return ''.join(result)"},{"question":"Use Flask framework to create a web application that can display an HTML page when the user accesses the root route (\\"/\\") of the application.","solution":"from flask import Flask, render_template_string app = Flask(__name__) @app.route(\\"/\\") def home(): html_content = <!doctype html> <html lang=\\"en\\"> <head> <meta charset=\\"utf-8\\"> <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\"> <title>Hello, Flask!</title> </head> <body> <h1>Hello, Flask!</h1> <p>Welcome to the Flask application.</p> </body> </html> return render_template_string(html_content) if __name__ == \\"__main__\\": app.run()"},{"question":"Write an example of a programming code fragment that performs complex number multiplication using only bitwise operations and basic arithmetic operations (like addition, subtraction). Avoid using any library functions or predefined complex number datatypes.","solution":"def complex_multiply(a, b): Multiply two complex numbers a and b. Each complex number is represented as a tuple (real_part, imaginary_part). a_real, a_imag = a b_real, b_imag = b result_real = (a_real * b_real) - (a_imag * b_imag) result_imag = (a_real * b_imag) + (a_imag * b_real) return (result_real, result_imag)"},{"question":"Given two pieces of textual information, draft a Python code that identifies the longest identical character sequence present within both of them.","solution":"def longest_common_substring(text1, text2): Returns the longest common substring present in both text1 and text2. if not text1 or not text2: return \\"\\" len_text1, len_text2 = len(text1), len(text2) max_length = 0 end_pos = 0 dp = [[0] * (len_text2 + 1) for _ in range(len_text1 + 1)] for i in range(1, len_text1 + 1): for j in range(1, len_text2 + 1): if text1[i - 1] == text2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > max_length: max_length = dp[i][j] end_pos = i else: dp[i][j] = 0 return text1[end_pos - max_length:end_pos]"},{"question":"Given two matrices, A and B, both of size m x n, write a program to multiply these two matrices. Please note that your solution should be general enough to handle different sizes of m x n matrices.","solution":"def multiply_matrices(A, B): Multiplies two matrices A and B of the same size m x n. Args: A: List of lists, where each inner list represents a row in the matrix. B: List of lists, where each inner list represents a row in the matrix. Returns: result: List of lists representing the result of the element-wise multiplication. m = len(A) n = len(A[0]) result = [[A[i][j] * B[i][j] for j in range(n)] for i in range(m)] return result"},{"question":"Develop a programming code that accepts a text as input and carries out an analysis to ascertain whether the entered text exhibits the properties of a palindrome - a string which reads identically backwards as forwards (like \\"madam\\").","solution":"def is_palindrome(text): Returns True if the provided text is a palindrome, else False. A palindrome reads the same forwards and backwards. cleaned_text = ''.join(char.lower() for char in text if char.isalnum()) return cleaned_text == cleaned_text[::-1]"},{"question":"Given an integer list, write a Python function to find the maximum and minimum numbers, their respective indices, and the sum of all elements in the list.","solution":"def list_statistics(lst): Returns the maximum and minimum numbers, their respective indices, and the sum of all elements in the list. if not lst: return None, None, None, None, 0 max_num = max(lst) min_num = min(lst) max_index = lst.index(max_num) min_index = lst.index(min_num) total_sum = sum(lst) return max_num, max_index, min_num, min_index, total_sum"},{"question":"Design an intermediate level programming test question that requires aspirants to implement their own custom function for the power of a number. Your function should take a base number and an exponent as arguments, and return the result of deriving the power in a more intricate way, using a looping or recursive mechanism instead of using pre-existing power functions. Also, they should preserve the simplicity in understanding and debugging for the nascent coders.","solution":"def power(base, exponent): Calculate the power of a number using recursion. Args: base (int or float): The base number. exponent (int): The exponent, can be positive, negative or zero. Returns: int or float: The result of base raised to the power of exponent. if exponent == 0: return 1 elif exponent > 0: return base * power(base, exponent - 1) else: return 1 / power(base, -exponent)"},{"question":"Create a python program which takes a list of numbers and finds the frequency of occurrence of each unique number in that list.","solution":"def find_frequency(numbers): Returns a dictionary with the frequency of each unique number in the given list. frequency = {} for number in numbers: if number in frequency: frequency[number] += 1 else: frequency[number] = 1 return frequency"},{"question":"Develop a ternary search algorithm in Python to find an element in a given sorted list of integers.","solution":"def ternary_search(arr, left, right, x): Implements the ternary search algorithm to find the element x in a sorted list arr. Parameters: arr (list): The list of elements (must be sorted). left (int): The left boundary of the search interval. right (int): The right boundary of the search interval. x (int): The element to search for. Returns: int: The index of the element x if found, otherwise -1. if right >= left: mid1 = left + (right - left) // 3 mid2 = right - (right - left) // 3 if arr[mid1] == x: return mid1 if arr[mid2] == x: return mid2 if x < arr[mid1]: return ternary_search(arr, left, mid1 - 1, x) elif x > arr[mid2]: return ternary_search(arr, mid2 + 1, right, x) else: return ternary_search(arr, mid1 + 1, mid2 - 1, x) return -1"},{"question":"Design a binary expression tree for the arithmetic equation (2+3)*4 and implement a program to evaluate it. The program should also handle potential divide by zero exceptions. Here is a Python solution using a simple binary expression tree. This program only solve the equation 2+3*4 but you can easily extend it to handle more complex equation or build the expression tree dynamically.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def evaluate_tree(node): if not node: return 0 if not node.left and not node.right: return node.value left_value = evaluate_tree(node.left) right_value = evaluate_tree(node.right) if node.value == '+': return left_value + right_value elif node.value == '*': return left_value * right_value elif node.value == '-': return left_value - right_value elif node.value == '/': if right_value == 0: raise ValueError(\\"Division by zero error.\\") return left_value / right_value # Construct the binary expression tree for (2 + 3) * 4 root = TreeNode('*') root.left = TreeNode('+') root.left.left = TreeNode(2) root.left.right = TreeNode(3) root.right = TreeNode(4) # Function to evaluate the expression tree def evaluate_expression(): return evaluate_tree(root)"},{"question":"Write a Python function to rotate a list of items by n steps in the given direction ('left' or 'right'). The function should handle negative values of n by converting them to positive equivalents.","solution":"def rotate_list(items, n, direction): Rotate list 'items' by 'n' steps in the given 'direction' ('left' or 'right'). if not items: return [] n = n % len(items) if direction == 'right': return items[-n:] + items[:-n] elif direction == 'left': return items[n:] + items[:n] else: raise ValueError(\\"Direction must be 'left' or 'right'\\")"},{"question":"Write a Python function that reverses a string in place, without using any additional data structures. The function should have a time complexity of O(n), where n is the length of the string. Additionally, the function should only use a constant amount of extra space, meaning that the space complexity should be O(1).","solution":"def reverse_string_in_place(s): Reverses a string in place with O(n) time complexity and O(1) space complexity. Args: s (list): A list of characters representing the string to reverse. Returns: None: The list is modified in place to its reversed state. left, right = 0, len(s) - 1 while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1"},{"question":"Sort a given binary search tree in descending order using an iterative approach without using any extra space. The solution should have a time complexity of O(n) and should not modify the original tree structure.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def reverse_inorder_traversal(root): Perform a reverse inorder traversal (right-root-left) to sort the binary search tree in descending order and return the values as a list. result = [] stack = [] current = root while stack or current: while current: stack.append(current) current = current.right current = stack.pop() result.append(current.val) current = current.left return result"},{"question":"Develop a function that inspects if a provided tuple contains any None values or empty strings. If a None value or an empty string is detected, the function should yield the position of all occurrences of None values and empty strings in the tuple. Concurrently, the function should return the cumulative count of None values and empty strings within the tuple. If no None value or empty string is detected, the function should produce a statement indicating \\"No None values or empty strings found\\".","solution":"def find_none_and_empty_strings(t): Inspects if the provided tuple contains any None values or empty strings. If a None value or an empty string is detected, the function will return two things: - A list of positions of all occurrences of None values and empty strings in the tuple. - The cumulative count of None values and empty strings within the tuple. If no None value or empty string is detected, the function returns a statement indicating \\"No None values or empty strings found\\". positions = [i for i, item in enumerate(t) if item is None or item == \\"\\"] count = len(positions) if count == 0: return \\"No None values or empty strings found\\" else: return positions, count"},{"question":"Write a function that takes a string and converts it to all lower case, but without using any built-in string manipulation functions or methods such as \`lower()\`, \`lowercase()\`, or any similar ones available in the programming language you choose. Additionally, your function should handle special characters and numbers gracefully, leaving them unchanged.","solution":"def to_lower_case(s): Converts the input string to all lower case without using any built-in string manipulation functions such as \`lower()\`, \`lowercase()\`, or any similar ones. lower_s = '' for char in s: # Check if the character is uppercase A-Z if 'A' <= char <= 'Z': # Convert to lowercase by adding the difference between 'a' and 'A' (32) lower_s += chr(ord(char) + 32) else: # Leave other characters unchanged lower_s += char return lower_s"},{"question":"I'm trying to create a function to calculate the depth of a binary tree. Can someone help me with this? Specifically, I want to understand how to implement a recursive approach in Python. I also want to ensure that my function can handle cases where the tree is unbalanced or contains duplicate values.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def maxDepth(root): Returns the maximum depth of a binary tree. Parameters: root (TreeNode): The root of the binary tree. Returns: int: The maximum depth of the tree. if root is None: return 0 else: left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Can you modify the factorial function to handle negative input and return a custom error message? Also, can you add a feature that allows the user to input a list of numbers to calculate multiple factorials at once, and return the results in a list format with the corresponding input number?","solution":"from typing import List, Union def factorial(n: Union[int, List[int]]): Returns the factorial of a number or a list of numbers. Parameters: n (int or list of int): Number or list of numbers to find the factorial of. Returns: int or list of tuples: Factorial of the number or a list of tuples with each number and its corresponding factorial. Raises: ValueError: If a negative number is provided. def compute_factorial(x): if x < 0: raise ValueError(f\\"Factorial is not defined for negative number: {x}\\") if x == 0 or x == 1: return 1 result = 1 for i in range(2, x + 1): result *= i return result if isinstance(n, int): return compute_factorial(n) elif isinstance(n, list): return [(num, compute_factorial(num)) for num in n] else: raise TypeError(\\"Input must be an integer or a list of integers\\")"},{"question":"Design and implement a simplified version of a recurrent neural network (RNN) from scratch, specifically an Elman Network, using only fundamental Python and common math operations. Elman Network is type of recurrent neural network which is characterized by input and output layers as well as one or more hidden layers where the output of the hidden layer at the current time step becomes an input to the hidden layer at the next time step.","solution":"import numpy as np class ElmanRNN: def __init__(self, input_size, hidden_size, output_size): Initialize the RNN with specific sizes for input, hidden, and output layers. self.input_size = input_size self.hidden_size = hidden_size self.output_size = output_size # Initialize weights self.W_xh = np.random.randn(self.input_size, self.hidden_size) self.W_hh = np.random.randn(self.hidden_size, self.hidden_size) self.W_hy = np.random.randn(self.hidden_size, self.output_size) # Initialize hidden state self.h = np.zeros((self.hidden_size,)) def sigmoid(self, x): Sigmoid activation function. return 1 / (1 + np.exp(-x)) def forward(self, x): Perform forward pass of the RNN. self.h = self.sigmoid(np.dot(x, self.W_xh) + np.dot(self.h, self.W_hh)) y = np.dot(self.h, self.W_hy) return y def reset_hidden_state(self): Reset the hidden state to zeros. self.h = np.zeros((self.hidden_size,))"},{"question":"I'd like to utilize the functools module in Python for memoizing the results of a recursive function I'm writing. Could you provide a comprehensive example with detailed comments to guide me on how to achieve this?","solution":"import functools def fib(n): Returns the nth Fibonacci number using memoization. @functools.lru_cache(maxsize=None) def memoized_fib(n): if n < 2: return n return memoized_fib(n-1) + memoized_fib(n-2) return memoized_fib(n)"},{"question":"Write a Python function that takes a list of positive integers as an input and returns a set containing the squares of the unique, prime numbers from the input list. Use the Sieve of Eratosthenes algorithm to find primes.","solution":"def sieve_of_eratosthenes(n): Returns a list of all primes less than or equal to n. is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [] for p in range(2, n + 1): if is_prime[p]: primes.append(p) return primes def unique_prime_squares(nums): Returns a set containing the squares of unique prime numbers from the input list. if not nums: return set() max_num = max(nums) primes = sieve_of_eratosthenes(max_num) prime_set = set(primes) result = {num ** 2 for num in nums if num in prime_set} return result"},{"question":"Hello, I'm trying to find the index of a substring in a given string using Python. Can you assist me with a function that would accomplish this?","solution":"def find_substring(string, substring): Returns the index of the first occurrence of the substring in the string. If the substring is not found, returns -1. return string.find(substring)"},{"question":"Write a Python function that accepts a list of numbers and returns the sum of all prime numbers present in the list. If the list is empty or contains no prime numbers, return 0. Use explicit prime checking algorithm instead of relying on libraries.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes(numbers): Returns the sum of all prime numbers present in the list numbers. If the list is empty or contains no prime numbers, return 0. return sum(n for n in numbers if is_prime(n))"},{"question":"Create a basic AWS Lambda function that takes an input string and returns a reversed string.","solution":"def reverse_string(event, context): AWS Lambda function that takes an input string from the event and returns a reversed string. :param event: lambda input event that should contain 'input_string' key with the original string as value. :param context: lambda context (unused in this function) :return: dictionary with key 'reversed_string' and the reversed string as value. input_string = event.get('input_string', '') reversed_string = input_string[::-1] return {'reversed_string': reversed_string}"},{"question":"Construct a Python subroutine to expand a一致好评e number encapsulated in a string format without undergoing conversion into a floating-point representation. Your solution should focus on the logical manipulation of the string characters directly.","solution":"def expand_large_number(number_str): Expands a large number represented in a string format. Args: number_str (str): The large number in string format. Returns: str: The expanded form of the large number as a string. n = len(number_str) expanded_str_list = [] for i in range(n): digit = number_str[i] if digit != '0': # Skip '0' as it does not contribute to expansion expanded_str_list.append(digit + '0' * (n-i-1)) return ' + '.join(expanded_str_list)"},{"question":"I have two uppercase strings in Python \`str1\` and \`str2\`. How can I find if the characters positions of string \`str1\` is of same order as it will appear if these characters of \`str1\` are skewered on a chain from string \`str2\` ?","solution":"def is_subsequence(str1, str2): Returns True if the characters in str1 appear in the same order in str2; otherwise, returns False. it = iter(str2) return all(char in it for char in str1)"},{"question":"How can I write a Python function to count the number of inversions in an array? An inversion occurs when two elements in the array are out of order, i.e., if i < j but arr[i] > arr[j].","solution":"def count_inversions(arr): Counts the number of inversions in an array. An inversion occurs if i < j and arr[i] > arr[j]. Parameters: arr (list): The input array. Returns: int: The number of inversions in the array. def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count n = len(arr) temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n - 1)"},{"question":"Write a Python program to classify text using a Naive Bayes classifier. The program should take a set of text documents as input, along with their associated labels, and allow the user to classify new text using the trained model.","solution":"from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.pipeline import make_pipeline class NaiveBayesTextClassifier: def __init__(self): self.model = make_pipeline(CountVectorizer(), MultinomialNB()) def train(self, texts, labels): self.model.fit(texts, labels) def predict(self, new_texts): return self.model.predict(new_texts) def predict_proba(self, new_texts): return self.model.predict_proba(new_texts)"},{"question":"Given two sets A and B, write a function in Python to find the power set (set of all possible subsets) of A whose union with set B results an identical set B. Note that the input sets will only contain distinct positive integers. Your solution should also consider the performance for larger sets.","solution":"from itertools import chain, combinations def power_set(s): Returns the powerset of set s. return chain.from_iterable(combinations(s, r) for r in range(len(s) + 1)) def subsets_with_desired_union(A, B): Returns all subsets of A whose union with B is identical to B. Args: A: Set of distinct positive integers. B: Set of distinct positive integers. Returns: A list of subsets of A. result = [] for subset in power_set(A): if B == set(subset).union(B): result.append(set(subset)) return result"},{"question":"Implement a function that takes in two strings and returns a boolean value indicating whether the first string is lexicographically greater than the second string.","solution":"def is_lexicographically_greater(str1, str2): Returns True if str1 is lexicographically greater than str2, otherwise False. return str1 > str2"},{"question":"Write a recursive algorithm to find the maximum depth of a nested dictionary, where the dictionary can contain lists as values. Each list can contain dictionaries as elements, and these dictionaries can also contain lists as values, forming a complex nested structure. The algorithm should handle this structure and return the maximum depth of nesting found within the dictionary or list.","solution":"def max_depth(d): Recursively finds the maximum depth of a nested dictionary or list. if isinstance(d, dict): return 1 + max((max_depth(v) for v in d.values()), default=0) elif isinstance(d, list): return 1 + max((max_depth(item) for item in d), default=0) else: return 0"},{"question":"Read the postcode from an alphanumeric string using a regular expression in Python. The postcode should have a format of 5 digits, followed by a hyphen, and then 4 more digits.","solution":"import re def extract_postcode(s): Extracts and returns the postcode from the given string. A valid postcode has the format of 5 digits, followed by a hyphen, and then 4 more digits. match = re.search(r'bd{5}-d{4}b', s) return match.group(0) if match else None"},{"question":"Given a 3x3 numpy matrix, write a python function to rotate it by 90 degrees clockwise","solution":"import numpy as np def rotate_matrix_90_deg_clockwise(matrix): Rotates a given 3x3 numpy matrix by 90 degrees clockwise. Parameters: matrix (numpy.ndarray): A 3x3 numpy matrix. Returns: numpy.ndarray: The rotated 3x3 numpy matrix. if matrix.shape != (3, 3): raise ValueError(\\"The input matrix must be 3x3 in size.\\") return np.rot90(matrix, k=-1)"},{"question":"Given an integer data array, write a function to find out which two elements array can be swapped to generate an array having the highest lexicographical order. The returned array should also be lexicographically highest. Array elements can range from negative integers to positive.","solution":"def highest_lexicographical_order(arr): Returns the array that can be achieved by swapping two elements to get the highest lexicographical order. If no swap can improve lexicographical order, returns the original array. n = len(arr) best_arr = arr[:] for i in range(n-1): for j in range(i+1, n): # Create a copy of the array and perform the swap arr_swapped = arr[:] arr_swapped[i], arr_swapped[j] = arr_swapped[j], arr_swapped[i] # Check if the new array is lexicographically greater if arr_swapped > best_arr: best_arr = arr_swapped return best_arr"},{"question":"Given a string s, write a Python function that finds and returns the longest palindromic substring within the string.","solution":"def longest_palindromic_substring(s): Finds and returns the longest palindromic substring within the string s. if not s: return \\"\\" n = len(s) longest_palindrome_start = 0 longest_palindrome_length = 1 dp = [[False] * n for _ in range(n)] for i in range(n): dp[i][i] = True for start in range(n-1, -1, -1): for end in range(start+1, n): if s[start] == s[end]: if end - start == 1 or dp[start+1][end-1]: dp[start][end] = True current_palindrome_length = end - start + 1 if current_palindrome_length > longest_palindrome_length: longest_palindrome_length = current_palindrome_length longest_palindrome_start = start return s[longest_palindrome_start:longest_palindrome_start + longest_palindrome_length]"},{"question":"Build a web app in Python using Flask, which has two endpoints: One for uploading an image (JPEG) and another for resizing that image to a specified width and height (default to 300x300) and saving it. The resized image should be saved into an S3 bucket.","solution":"from flask import Flask, request, jsonify from PIL import Image import boto3 import io app = Flask(__name__) # AWS S3 configuration S3_BUCKET = 'your-s3-bucket-name' S3_ACCESS_KEY = 'your-access-key' S3_SECRET_KEY = 'your-secret-key' s3 = boto3.client( 's3', aws_access_key_id=S3_ACCESS_KEY, aws_secret_access_key=S3_SECRET_KEY ) @app.route('/upload', methods=['POST']) def upload_image(): if 'image' not in request.files: return jsonify({'error': 'No image uploaded'}), 400 image = request.files['image'] if image.filename == '': return jsonify({'error': 'No selected file'}), 400 try: img = Image.open(image) img_format = img.format buffer = io.BytesIO() img.save(buffer, format=img_format) buffer.seek(0) s3.put_object(Bucket=S3_BUCKET, Key=image.filename, Body=buffer, ContentType=f'image/{img_format.lower()}') return jsonify({'message': 'Image uploaded successfully'}), 200 except Exception as e: return jsonify({'error': str(e)}), 500 @app.route('/resize', methods=['POST']) def resize_image(): filename = request.form.get('filename') width = int(request.form.get('width', 300)) height = int(request.form.get('height', 300)) try: obj = s3.get_object(Bucket=S3_BUCKET, Key=filename) img = Image.open(obj['Body']) resized_img = img.resize((width, height)) buffer = io.BytesIO() resized_img.save(buffer, format=img.format) buffer.seek(0) resized_key = f\\"resized-{filename}\\" s3.put_object(Bucket=S3_BUCKET, Key=resized_key, Body=buffer, ContentType=f'image/{img.format.lower()}') return jsonify({'message': 'Image resized and saved successfully', 'resized_key': resized_key}), 200 except Exception as e: return jsonify({'error': str(e)}), 500 if __name__ == '__main__': app.run(debug=True)"},{"question":"Please write a function that finds the longest substring without repeating characters in a given string.","solution":"def longest_unique_substring(s): Finds the length of the longest substring without repeating characters in a given string. Parameters: s (str): The input string. Returns: int: The length of the longest substring without repeating characters. char_map = {} start = max_length = 0 for i, char in enumerate(s): if char in char_map and char_map[char] >= start: start = char_map[char] + 1 char_map[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"Develop a Python function that checks if any possible rearrangement of a given string can be formed into a pangram. Pangram is a sentence that uses every letter of the alphabet at least once.","solution":"import string def can_form_pangram(s): Checks if any possible rearrangement of a given string can be formed into a pangram. A pangram is a sentence that uses every letter of the alphabet at least once. :param s: input string :return: Boolean value indicating whether a pangram can be formed s = s.lower() alphabet_set = set(string.ascii_lowercase) s_set = set(s) return alphabet_set.issubset(s_set)"},{"question":"Write a function in Python using the pandas library to compute the median value of a given column in a DataFrame. You are also provided with an erroneous piece of code as a starting point. Identify the mistakes in the initial code and correct them to come up with a functional solution.","solution":"import pandas as pd def compute_median(df, column_name): Computes the median value of a given column in a DataFrame. Parameters: df (pd.DataFrame): The DataFrame containing the data. column_name (str): The column name for which to compute the median. Returns: float: The median value of the specified column. median_value = df[column_name].median() return median_value"},{"question":"Given a list of integers, write a Python function to find the largest number in the list using the \`max\` function.","solution":"def find_largest_number(numbers): Returns the largest number in the list. :param numbers: List of integers :return: The largest integer in the list if not numbers: # Check if list is empty return None return max(numbers)"},{"question":"Execute the merge sort algorithm to sort a provided numerical dataset in ascending order, but introduce an additional complexity by doing so iteratively instead of recursively.","solution":"def iterative_merge_sort(arr): Sorts an array using an iterative approach to merge sort. if len(arr) < 2: return arr # Create a list of single item lists work = [[x] for x in arr] # Iterate merging lists pairwise while len(work) > 1: # Prepare for the next iteration next_work = [] for i in range(0, len(work), 2): if i + 1 < len(work): next_work.append(merge(work[i], work[i + 1])) else: next_work.append(work[i]) work = next_work return work[0] def merge(left, right): Merges two sorted lists into one sorted list. result = [] left_index, right_index = 0, 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: result.append(left[left_index]) left_index += 1 else: result.append(right[right_index]) right_index += 1 result.extend(left[left_index:]) result.extend(right[right_index:]) return result"},{"question":"How do I create a simple internet search engine using Python?","solution":"import os from collections import defaultdict def collect_documents(folder_path): Collects documents from the specified folder. Each document is a text file with a .txt extension. Returns a dictionary where keys are filenames and values are their content. documents = {} for filename in os.listdir(folder_path): if filename.endswith(\\".txt\\"): with open(os.path.join(folder_path, filename), 'r', encoding='utf-8') as file: documents[filename] = file.read() return documents def tokenize(text): Splits the text into words (tokens). return text.lower().split() def create_index(documents): Creates an inverted index from the documents. Inverted index is a dictionary where keys are words and values are lists of document IDs where the word appears. index = defaultdict(list) for doc_id, text in documents.items(): words = tokenize(text) for word in words: if doc_id not in index[word]: index[word].append(doc_id) return index def search(index, query): Searches the inverted index for the query words. Returns a list of document IDs that contain all query words. query_words = tokenize(query) if not query_words: return [] result = set(index[query_words[0]]) for word in query_words[1:]: result &= set(index[word]) return list(result)"},{"question":"\\"Create an algorithm that can efficiently filter out and eliminate numbers that are not prime from an input array consisting of integers, producing a refined list of prime numbers as the output. Your solution should be able to handle different array sizes, elements, and input forms, such as files containing lists of integers or a manually entered array of integers. Additionally, make sure your solution includes a comprehensive explanation, highlighting how your algorithm works, and illustrating the time complexity of each step. Finally, provide sample inputs and outputs for evaluating the correctness of your solution. \\"","solution":"def is_prime(n): Determine whether a number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(input_array): Filter out non-prime numbers from the input array, returning an array of prime numbers. return [num for num in input_array if is_prime(num)]"},{"question":"Formulate an approach that takes in two strings as inputs and confirms whether these two strings form an anagram pair or not. This mechanism should be case-insensitive and should ignore whitespaces, punctuation, and special characters. You should also handle the exception when the strings are empty or null.","solution":"import re def are_anagrams(str1, str2): Determines if two strings are anagrams, ignoring case, whitespace, and punctuation. if not str1 or not str2: raise ValueError(\\"Input strings cannot be empty or null\\") clean_str1 = re.sub(r'[^a-zA-Z]', '', str1).lower() clean_str2 = re.sub(r'[^a-zA-Z]', '', str2).lower() return sorted(clean_str1) == sorted(clean_str2)"},{"question":"Write a function that reverses a list in place. The input list should not be modified when the function is called again. Additionally, your function should handle both numeric and string elements within the same list. Avoid using any built-in reverse functions or methods.","solution":"def reverse_list_in_place(lst): Reverses a list in place. left_index = 0 right_index = len(lst) - 1 while left_index < right_index: # Swap the elements at left_index and right_index lst[left_index], lst[right_index] = lst[right_index], lst[left_index] # Move indices towards the center left_index += 1 right_index -= 1 return lst"},{"question":"Write a python function dubbed \`find_max_min\` that takes in a list of lists, where every inner list comprises integers. This function should return a tuple: the primary element being the highest integer found across all inner lists, and the secondary element being the lowest integer found across all inner lists. If the input list is empty or includes inner lists that are empty, the function should return \`(None, None)\`.","solution":"def find_max_min(list_of_lists): Returns a tuple containing the highest and lowest integers found across all inner lists. If list_of_lists or any inner list is empty, returns (None, None). if not list_of_lists or any(not inner_list for inner_list in list_of_lists): return (None, None) max_value = float('-inf') min_value = float('inf') for inner_list in list_of_lists: max_value = max(max_value, max(inner_list, default=max_value)) min_value = min(min_value, min(inner_list, default=min_value)) return (max_value, min_value)"},{"question":"Create a Python script that accepts an integer as input and prints its binary representation. Additionally, validate the input to ensure it's an integer between 0 and 32767, inclusive.","solution":"def int_to_binary(n): Converts an integer to its binary representation. The integer must be between 0 and 32767 inclusive. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0 or n > 32767: raise ValueError(\\"Input must be between 0 and 32767 inclusive.\\") return bin(n)[2:] # Example usage: # print(int_to_binary(10)) # Output: '1010' # print(int_to_binary(32767)) # Output: '111111111111111'"},{"question":"Develop a code segment to traverse a collection of distinct integer values but in a 2D matrix. The program should not only display the index of the initial instance where a specified target is encountered, but also the total number of steps it took to reach the target, considering movement is only possible in right or down direction. For example, if the matrix is [[4, 7, 1], [5, 6, 3], [2, 8, 9]] and the target is 6, then the output should be ((1,1), 3) Because 6 is at position (1,1) and considering the movement restrictions, it is reached in 3 steps(Right, Right, Down from the starting point (0,0).","solution":"def find_target(matrix, target): Traverse a 2D matrix and find the index of the target and total steps required. Parameters: matrix (list of list of int): 2D matrix of integers target (int): target integer to find Returns: tuple: ((row_index, col_index), steps) or None if target not found rows = len(matrix) cols = len(matrix[0]) direction = \\"right\\" steps = 0 for i in range(rows): for j in range(cols): if matrix[i][j] == target: return (i, j), steps steps += 1 direction = \\"down\\" return None"},{"question":"Write a program in python 3 that estimates the value of Pi using the Monte Carlo method with 1,000,000 random points. Print the result with 10 decimal places. The program should be written using OOP and should include a method for generating random points within the unit circle, a method for checking if a point is inside the unit circle, a method for calculating the estimate of Pi, and a main method for running the simulation. Additionally, implement error handling to ensure that the program can handle cases where the random number generator produces a point with coordinates that are NaN or infinite.","solution":"import random import math class MonteCarloPiEstimator: def __init__(self, points=1000000): self.points = points self.inside_circle = 0 def generate_random_point(self): x = random.uniform(-1, 1) y = random.uniform(-1, 1) return (x, y) def is_point_inside_circle(self, point): x, y = point distance = x**2 + y**2 if math.isnan(distance) or math.isinf(distance): raise ValueError(\\"Generated point has invalid coordinates (NaN or infinite).\\") return distance <= 1 def calculate_pi(self): for _ in range(self.points): point = self.generate_random_point() try: if self.is_point_inside_circle(point): self.inside_circle += 1 except ValueError as e: print(f\\"Skipping invalid point: {e}\\") continue return 4 * self.inside_circle / self.points def run_simulation(self): estimated_pi = self.calculate_pi() print(f\\"Estimated value of Pi: {estimated_pi:.10f}\\")"},{"question":"Merge the items in two input lists into a single list in Python, but keep the order of the original lists. Also, for each list only keep the distinct elements while preserving the original sort order. Additionally, ensure your function can handle large lists of up to 10^6 elements.","solution":"def merge_unique(list1, list2): Merges two lists into a single list with distinct elements, preserving the order. seen = set() merged_list = [] for item in list1 + list2: if item not in seen: seen.add(item) merged_list.append(item) return merged_list"},{"question":"I want you to develop a recursive function that generates all paths in an N x N grid, moving only right or down. Implement backtracking to avoid generating duplicate paths and include a feature where it keeps track of the number of paths available from the start point to the end point. Please write it in Python. The function should take the grid size as input and should return a list of all unique paths and the total number of unique paths.","solution":"def find_paths(grid_size): def backtrack(r, c, path, all_paths): # If reached the bottom-right corner, add the path to all_paths if r == grid_size - 1 and c == grid_size - 1: all_paths.append(path[:]) return # Move to the right if within bounds if c + 1 < grid_size: path.append('R') backtrack(r, c + 1, path, all_paths) path.pop() # Move down if within bounds if r + 1 < grid_size: path.append('D') backtrack(r + 1, c, path, all_paths) path.pop() all_paths = [] backtrack(0, 0, [], all_paths) return all_paths, len(all_paths) # Example of usage # n = 2 # paths, num_paths = find_paths(2) # print(\\"Paths:\\", paths) # print(\\"Number of paths:\\", num_paths)"},{"question":"Write a recursive solution for the Fibonacci sequence implemented in Python. Your function should take an integer n as an input and return the nth number in the Fibonacci sequence. Moreover, add cache functionality to your function to optimize performance for consecutive calls with the same arguments. Additionally, write a series of test cases that should verify the correctness of your solution.","solution":"from functools import lru_cache @lru_cache(maxsize=None) def fibonacci(n): Returns the nth number in the Fibonacci sequence. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write python code to find the minimum number of colors necessary to color a map using the four color theorem.","solution":"def min_colors_for_map(): Returns the minimum number of colors necessary to color a map according to the Four Color Theorem. return 4"},{"question":"How can I write a Python script to rearrange the letters of a given word into alphabetical order?","solution":"def rearrange_to_alphabetical(word): Returns the given word rearranged in alphabetical order. return ''.join(sorted(word))"},{"question":"Write a computer program in Python to remove all occurrences of every third element in a list and print out the resulting list, maintaining original order of elements. Also, account for edge cases where the list could be empty, of variable length, or consist of different data types.","solution":"def remove_every_third_element(lst): Removes all occurrences of every third element in a list and returns the resulting list. if not lst: return lst return [element for index, element in enumerate(lst, start=1) if index % 3 != 0]"},{"question":"Given an array of integer elements, write a function to find the two numbers that sum to a specific target value. However, you should not use additional space and the time complexity should be O(n). Also, assume that each input would have exactly one solution.","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the target. Assumes that there is exactly one solution. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i"},{"question":"Enumerate the first 8 numbers in the Fibonacci sequence, but do so implementing a generator function in Python. Also, modify this function so it could theoretically generate an arbitrarily long Fibonacci sequence (beyond 8 terms).","solution":"def fibonacci_generator(): Generator function to return the Fibonacci sequence. a, b = 0, 1 while True: yield a a, b = b, a + b # To get the first 8 numbers in the Fibonacci sequence: def first_n_fibonacci(n): fib_gen = fibonacci_generator() return [next(fib_gen) for _ in range(n)]"},{"question":"Given a list of strings and a target string, your task is to write a function that counts how many times the target string appears in the list. However, to make it more challenging, the function should not use any built-in counting or list methods such as \`.count()\`, \`.index()\`, or any form of list comprehensions or generator expressions.","solution":"def count_occurrences(string_list, target): Counts the number of times the target string appears in the string_list. Args: string_list (list of str): The list of strings to search. target (str): The string to count in the list. Returns: int: The number of times the target string appears in the list. count = 0 for string in string_list: if string == target: count += 1 return count"},{"question":"Write 3 lines of code to solve this problem: Given an array of integers and a target, find all unique pairs of elements in the array which sum to the target.","solution":"def find_pairs_with_sum(array, target): array.sort() unique_pairs = set() for i, value in enumerate(array): complement = target - value if complement in set(array[i+1:]): unique_pairs.add((min(value, complement), max(value, complement))) return list(unique_pairs)"},{"question":"I'm trying to create a Python program that can determine the running time complexity of an algorithm. Can you provide any guidance on how I can go about this? Specifically, I have a piece of code that involves summing up the elements from the first to the last in a list.","solution":"def sum_elements(elements): Returns the sum of all elements in the list. Parameters: elements (list): A list of numerical elements Returns: int/float: Sum of the elements in the list total = 0 for element in elements: total += element return total"},{"question":"Design a Python code sequence that when provided with two singly linked data structures, determines their intersection node, if one exists. Assume the linked lists are without cycles and are not of the same length.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def get_intersection_node(headA, headB): Returns the node at which the intersection of two singly linked lists begins. If the two linked lists have no intersection, return None. if not headA or not headB: return None # Initialize two pointers for each list pointerA, pointerB = headA, headB # Traverse the lists. When one pointer reaches the end, redirect it to the beginning of the other list while pointerA != pointerB: pointerA = pointerA.next if pointerA else headB pointerB = pointerB.next if pointerB else headA # The pointers will either meet at the intersection node or at None return pointerA"},{"question":"Generate a random number between 0 and 1, but ensure that the generated number is unique and has not been previously generated in the current program execution, using the random module in Python. Additionally, the generated number should be a decimal with a precision of exactly 5 decimal places. The program should also keep track of the frequency of each generated number and print out the numbers in ascending order of their frequencies at the end of the execution.","solution":"import random class UniqueRandom: def __init__(self): self.generated_numbers = {} def generate_unique_random(self): while True: rand_num = round(random.random(), 5) if rand_num not in self.generated_numbers: self.generated_numbers[rand_num] = 1 return rand_num else: self.generated_numbers[rand_num] += 1 def get_sorted_frequencies(self): sorted_numbers = sorted(self.generated_numbers.items(), key=lambda x: (x[1], x[0])) return sorted_numbers"},{"question":"Write a python function 'combine_lists' for combining two input lists. Each element should result in a pairing of elements at the same position from both lists, as a dictionary item. Exception should be caught if the lists aren't of equal length and an error message \\"Lists should have the same length\\" should be returned in this case. In addition, Test the function using the lists friends = [\\"R drinkers\\", \\"Pythonistas\\"], hobbies = [\\"drink wine\\", \\"write code\\"].","solution":"def combine_lists(list1, list2): Combines two lists into a dictionary, pairing elements at the same position. If the lists are not of equal length, returns an error message. if len(list1) != len(list2): return \\"Lists should have the same length\\" combined_dict = {list1[i]: list2[i] for i in range(len(list1))} return combined_dict"},{"question":"In Python, create a basic function using if-else statements to determine if a numerical value is positive, negative, or zero. However, give it a twist by incorporating conditions where it not only performs different operations based on whether the input is positive, negative, or zero, but also checks if the number is odd or even.","solution":"def check_number(num): Determines if the number is positive, negative, or zero, and whether it is odd or even. Returns a tuple indicating ('Positive'/'Negative'/'Zero', 'Odd'/'Even'). if num > 0: pos_neg = \\"Positive\\" elif num < 0: pos_neg = \\"Negative\\" else: pos_neg = \\"Zero\\" if num % 2 == 0: odd_even = \\"Even\\" else: odd_even = \\"Odd\\" return (pos_neg, odd_even)"},{"question":"update ad_port dictionary to contain the local port and a local interface for supports SCTP (Stream Control Transmission Protocol) and keeping in mind that this protocol is not supported by all switches but most modern ones support it. Also, adapt the code to allow for up to 4 multihoming states as following: when the local machine is communicating using one interface while simultaneously charging/receiving from a different interface, and also consider a failover condition in which the primary interface is not reachable and fallback to a secondary interface. The code should also include a mechanism to monitor the status of the interfaces and alert the user in case of any issue.","solution":"def update_ad_port(ad_port, local_port, local_interface, supports_sctp, primary_iface, secondary_iface=None): Updates the ad_port dictionary with SCTP support and multi-homing states. Parameters: ad_port (dict): Advertisement port dictionary to update. local_port (int): The local port to add. local_interface (str): The local interface to associate with the local port. supports_sctp (bool): Flag to indicate if SCTP is supported. primary_iface (str): The primary interface for communication. secondary_iface (str, optional): The secondary interface for failover (default is None). Returns: None ad_port['local_port'] = local_port ad_port['local_interface'] = local_interface ad_port['supports_sctp'] = supports_sctp ad_port['primary_iface'] = primary_iface ad_port['secondary_iface'] = secondary_iface if secondary_iface else primary_iface ad_port['status'] = 'up' ad_port['alert'] = None def monitor_interfaces(): # Stub implementation of interface monitor - Replace this with the actual monitoring logic if ad_port['primary_iface'] == 'down': ad_port['alert'] = f\\"Primary interface {ad_port['primary_iface']} is down. Switching to secondary interface {ad_port['secondary_iface']}.\\" ad_port['status'] = 'failover' else: ad_port['alert'] = None ad_port['status'] = 'up' ad_port['monitor_interfaces'] = monitor_interfaces # Call the monitor interface initially to set the status ad_port['monitor_interfaces']()"},{"question":"Can you create a Python function that distinguishes prime numbers from a given list of integers, including negative integers and zero?","solution":"def is_prime(n): Determine if a number is prime. Args: - n (int): The number to check. Returns: - bool: True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Filter and return prime numbers from a list of integers. Args: - numbers (list of int): The list of integers to filter. Returns: - list of int: A list containing only the prime numbers from the input list. return [num for num in numbers if is_prime(num)]"},{"question":"Modify the following code so that it can accept three parameters. The first parameter must be a string, the second parameter must be an integer, and the third parameter must be a list. The function should then print the message specified by the first parameter the number of times specified by the second parameter, but each time the message is printed, it should be appended with each element of the list parameter separated by a comma. Additionally, the modified code should only allow lists with a maximum length of 5 elements and integers between 1 and 10 (inclusive). If the list parameter exceeds the maximum length or the integer parameter is outside the allowed range, the function should raise an exception with an appropriate error message.","solution":"def print_custom_message(message, repeat_count, elements): Prints the custom message specified by \`message\` for \`repeat_count\` times, appending each element of \`elements\` separated by a comma to the message. Parameters: - message (str): The message to be printed. - repeat_count (int): The number of times the message should be printed. Must be in the range 1 to 10 inclusive. - elements (list): A list of elements to append to the message. The list must not exceed 5 elements. Raises: - ValueError: If \`repeat_count\` is not between 1 and 10 (inclusive) or if \`elements\` has more than 5 elements. if not (1 <= repeat_count <= 10): raise ValueError(\\"repeat_count must be between 1 and 10 (inclusive).\\") if len(elements) > 5: raise ValueError(\\"The list parameter must not exceed 5 elements.\\") appended_message = f\\"{message} \\" + \\", \\".join(map(str, elements)) for _ in range(repeat_count): print(appended_message)"},{"question":"Draft a Python routine that computes the cube of each number that is not divisible by 3 within a specified range of integers, as well as the sum of these cubes. In addition, this function should report the total number of elements in the series that meet this criterion.","solution":"def cubes_and_sum(start, end): Computes the cube of each number that is not divisible by 3 within the specified range [start, end]. Returns a list of these cubes, the sum of the cubes, and the count of numbers that meet the criterion. cubes = [] for number in range(start, end + 1): if number % 3 != 0: cubes.append(number ** 3) cubes_sum = sum(cubes) count = len(cubes) return cubes, cubes_sum, count"},{"question":"Develop a basic RESTful API using Flask that provides the current date and time as a JSON response.","solution":"from flask import Flask, jsonify from datetime import datetime app = Flask(__name__) @app.route('/datetime', methods=['GET']) def get_datetime(): Returns the current date and time as a JSON response. now = datetime.now() formatted_now = { 'date': now.strftime('%Y-%m-%d'), 'time': now.strftime('%H:%M:%S') } return jsonify(formatted_now) if __name__ == '__main__': app.run(debug=True)"},{"question":"Given a list of integers called \`array\` and an integer \`i\`, write a function called \`neighbours\` that returns a list of the \`i\`th element's neighbours. The first element's neighbour would be the second element; the second element's neighbours would be the first and the third element, et cetera. Each element in your returned list should itself be a list with a maximum of two elements: the neighbour directly before the \`i\`th element and the neighbour directly after the \`i\`th element. If an element does not have a neighbour in a certain direction (before or after), return \`None\` in the list for that direction.","solution":"def neighbours(array, i): Returns a list of the \`i\`th element's neighbours. Each neighbour is in the format [prev_neighbour, next_neighbour]: - prev_neighbour is None if there is no previous neighbour. - next_neighbour is None if there is no next neighbour. if i < 0 or i >= len(array): raise IndexError(\\"Index out of bounds\\") prev_neighbour = array[i-1] if i > 0 else None next_neighbour = array[i+1] if i < len(array) - 1 else None return [prev_neighbour, next_neighbour]"},{"question":"Please read the following two arrays of integers, sort them in ascending order and then merge them into a single sorted array in Python. You should not use built-in Python sorting methods. Instead implement your own sort using an efficient sort algorithm. Algorithms efficiency is determined by its time complexity. Try to achieve the best time complexity possible.","solution":"def merge_sort(arr): if len(arr) > 1: mid = len(arr)//2 L = arr[:mid] R = arr[mid:] merge_sort(L) merge_sort(R) i = j = k = 0 while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 return arr def merge_arrays(arr1, arr2): sorted_arr1 = merge_sort(arr1) sorted_arr2 = merge_sort(arr2) merged_array = [] i = j = 0 while i < len(sorted_arr1) and j < len(sorted_arr2): if sorted_arr1[i] < sorted_arr2[j]: merged_array.append(sorted_arr1[i]) i += 1 else: merged_array.append(sorted_arr2[j]) j += 1 while i < len(sorted_arr1): merged_array.append(sorted_arr1[i]) i += 1 while j < len(sorted_arr2): merged_array.append(sorted_arr2[j]) j += 1 return merged_array"},{"question":"Create a python program to count how many times a word appears in a given string, but exclude any occurrences of the word that are within parentheses or square brackets. For example, in the given string \\"The quick (brown) fox jumps over the lazy [dog]\\", the word \\"brown\\" should not be counted, but \\"quick\\", \\"fox\\", \\"lazy\\", and \\"dog\\" should be counted.","solution":"import re def count_word_excluding_parentheses(text, word): Counts the number of times a specified word appears in a string, excluding any occurrences within parentheses or square brackets. Parameters: text (str): The input text. word (str): The word to count. Returns: int: The count of the specified word excluding those within parentheses or square brackets. # Remove text within parentheses and square brackets cleaned_text = re.sub(r'([^)]*)', '', text) cleaned_text = re.sub(r'[[^]]*]', '', cleaned_text) # Count occurrences of the word in the cleaned text word_pattern = re.compile(r'b{}b'.format(re.escape(word))) return len(word_pattern.findall(cleaned_text))"},{"question":"Develop a Python code to replace all occurrences of a specified phrase in a string, but only if it is a complete word and ignore case sensitivity. And also consider some edge cases like punctuations.","solution":"import re def replace_phrase(string, old_phrase, new_phrase): Replaces all occurrences of old_phrase in string with new_phrase. Only matches complete words and ignores case sensitivity. regex_pattern = r'b' + re.escape(old_phrase) + r'b' return re.sub(regex_pattern, new_phrase, string, flags=re.IGNORECASE)"},{"question":"Write a code to group the elements in a list into a dictionary with the list element as the key and the number of times the element is repeated in the list as the value. The input list can contain any type of element, including nested lists and dictionaries. The code should be able to handle any number of nested levels and correctly count the occurrences of each element.","solution":"from collections import Counter def flatten_list(nested_list): Helper function to flatten a nested list. for item in nested_list: if isinstance(item, list): yield from flatten_list(item) else: yield item def element_count(input_list): Returns a dictionary with elements as the keys and the number of times each element is repeated in the list as the value. # Flatten the list before counting flat_list = list(flatten_list(input_list)) # Use Counter from collections to count the occurrences return dict(Counter(flat_list))"},{"question":"Write a python script named task3444 (no spaces) which generates a function to modify a given list by multiplying each element with three. Include error handling for potential non-integer or non-float elements and produce an error message in such cases.","solution":"def task3444(lst): Multiplies each element in the list by three. Parameters: lst (list): The list to be modified Returns: list: A new list with each element multiplied by three Raises: ValueError: If any element in the list is not an integer or float modified_list = [] for element in lst: if not isinstance(element, (int, float)): raise ValueError(f\\"Element '{element}' is not an integer or float\\") modified_list.append(element * 3) return modified_list"},{"question":"Please explain the following Python code snippet which when given an array and an integer k, aims to find if the array contains duplicates within a certain distance k. If a duplicate is found within the distance k, it returns True. Otherwise, it returns False.","solution":"def contains_nearby_duplicate(nums, k): Check if the given array contains duplicates within a certain distance k. Parameters: nums (list): The input list of integers. k (int): The maximum distance between duplicate elements. Returns: bool: True if there are duplicates within distance k, otherwise False. index_map = {} for i, num in enumerate(nums): if num in index_map and i - index_map[num] <= k: return True index_map[num] = i return False"},{"question":"Write a Python function that takes two arguments: a list of strings and a character. The function should count how many strings in the list start with the specified character (case-insensitive). If the character is not provided, the function should count how many strings start with a vowel. The function should return a dictionary with the following structure: {\\"count\\": count_of_strings_matching_criteria, \\"details\\": [{\\"string\\": string_matching_criteria, \\"start_index\\": index_of_string_in_list}, ...]}.","solution":"def count_strings_with_char(strings, char=None): Returns a dictionary with the count of strings that start with a specified character or a vowel, and details of those strings from the list. vowels = 'aeiou' if char: char = char.lower() char = char if char else vowels count = 0 details = [] for index, string in enumerate(strings): if string and string[0].lower() in char: count += 1 details.append({\\"string\\": string, \\"start_index\\": index}) return {\\"count\\": count, \\"details\\": details}"},{"question":"Given a list of integers, reverse the order of its elements without using any built-in functions or methods for list manipulation. You can only use basic programming constructs like loops and conditional statements. Your solution should have a time complexity of O(n), where n is the length of the list, and should not use additional data structures.","solution":"def reverse_list(nums): Reverses the list of integers without using any built-in functions or methods for list manipulation. left = 0 right = len(nums) - 1 while left < right: # Swap elements at left and right indices nums[left], nums[right] = nums[right], nums[left] left += 1 right -= 1 return nums"},{"question":"Write a Python function that deletes elements from a list at given indexes, with the twist that the indexes can be repeated multiple times and in any order. Your function should also handle cases where an index may fall out of the current range of the list (e.g., an index that is length of the list or more), and it should ensure to never modify the list while iterating over it to avoid any indexing errors. Consider writing tests to validate whether your function works correctly.","solution":"def delete_elements_at_indexes(lst, indexes): Deletes elements from the list \`lst\` at the specified \`indexes\`. valid_indexes = set(i for i in indexes if 0 <= i < len(lst)) return [item for i, item in enumerate(lst) if i not in valid_indexes]"},{"question":"Can you write a Python function that checks if columns of ticker, put call indicator, expiration date, and strike price exist in a given pandas dataframe? The function should return True if all four columns are present, and False otherwise. You should not assume that the dataframe has any other columns.","solution":"import pandas as pd def check_columns_exist(df): Checks if the columns 'ticker', 'put call indicator', 'expiration date', and 'strike price' exist in the provided dataframe. Parameters: df (pd.DataFrame): The dataframe to check. Returns: bool: True if all columns are present, False otherwise. required_columns = {'ticker', 'put call indicator', 'expiration date', 'strike price'} return required_columns.issubset(df.columns)"},{"question":"Given a binary tree, perform a level-order traversal and return the nodes in the form of a list. Additionally, implement a function that returns nodes at a given level.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def level_order_traversal(root): Returns the level-order traversal of a binary tree as a list of node values. if not root: return [] result = [] queue = deque([root]) while queue: current = queue.popleft() result.append(current.value) if current.left: queue.append(current.left) if current.right: queue.append(current.right) return result def nodes_at_given_level(root, level): Returns the values of nodes at a given level in a binary tree. if not root or level < 1: return [] result = [] queue = deque([(root, 1)]) # Tuple of node and level while queue: current, node_level = queue.popleft() if node_level == level: result.append(current.value) elif node_level < level: if current.left: queue.append((current.left, node_level + 1)) if current.right: queue.append((current.right, node_level + 1)) return result"},{"question":"Develop a function that constructs an HTML table with the provided list of dictionary objects, where each dictionary represents a person with name, age, and city as keys. Also, update your function to set a style for the table, add a header, and make sure that the age data is centered in the table.","solution":"def generate_html_table(data): Generates an HTML table from the provided list of dictionary objects. Args: data (list): A list of dictionaries where each dictionary represents a person with 'name', 'age', and 'city' keys. Returns: str: An HTML string representing the table with styles. # Define the style for the table style = <style> table { width: 100%; border-collapse: collapse; } table, th, td { border: 1px solid black; } th, td { padding: 10px; text-align: left; } th { background-color: #f2f2f2; } td.age { text-align: center; } </style> # Create the header of the table header = <tr> <th>Name</th> <th>Age</th> <th>City</th> </tr> # Create the rows of the table rows = \\"\\" for person in data: rows += f <tr> <td>{person['name']}</td> <td class=\\"age\\">{person['age']}</td> <td>{person['city']}</td> </tr> # Combine the style, header, and rows to form the complete table table = f {style} <table> {header} {rows} </table> return table"},{"question":"Code a function in Python, utilizing theRequestslibrary, to retrieve data in JSON format from a specific API. The function should be able to handle any HTTP error codes and also incorporate retry logic for a total of 3 times before finally throwing an exception. Also, ensure to include headers in your request for better implementation.","solution":"import requests from requests.exceptions import HTTPError, RequestException def get_json_data(url, headers=None, retries=3): Retrieve data in JSON format from the specified API url. Handles errors and retries. Args: url (str): The API endpoint to retrieve the JSON data from. headers (dict): Optional headers to include in the request. retries (int): Number of retry attempts before failing. Default is 3. Returns: dict: JSON response from the API. Raises: Exception: If the request fails after the specified number of retries. attempt = 0 while attempt < retries: try: response = requests.get(url, headers=headers) response.raise_for_status() return response.json() except (HTTPError, RequestException) as e: attempt += 1 if attempt >= retries: raise Exception(f\\"Failed to retrieve data: {e}\\")"},{"question":"Write a Python function that will accurately count the number of alphabetic words, defined as sequences of alphabetic characters separated by non-alphabetic characters, in a given string. Consider words with apostrophes as single words (e.g., \\"it's\\" or \\"they're\\") and disregard any non-alphabetic characters that do not act as word separators. Additionally, include the capability to filter out stopwords if a list of stopwords is provided.","solution":"import re def count_words(text, stopwords=None): Returns the number of alphabetic words in the given text. Words with apostrophes are counted as single words. Parameters: text (str): The input text to count words from. stopwords (list): A list of stopwords to exclude from the count (optional). Returns: int: The number of alphabetic words. # Prepare the pattern for word matching pattern = r\\"b[a-zA-Z]+(?:'[a-zA-Z]+)?b\\" # Find all matching words using regex words = re.findall(pattern, text) # Convert words to lowercase for case insensitive comparison words = [word.lower() for word in words] if stopwords: stopwords = set(stopword.lower() for stopword in stopwords) # Filter out stopwords words = [word for word in words if word not in stopwords] return len(words)"},{"question":"Write a function that takes a word and returns a new word with the reversed order of characters. Additionally, the function should also reverse the order of the characters within each word if the input word is a palindrome.","solution":"def reverse_word(word): Returns a new word with the reversed order of characters. If the input word is a palindrome, the function also reverses the order of the characters within the word. # Check if the word is a palindrome if word == word[::-1]: return word[::-1] # return the reversed word (same as input) else: return word[::-1] # return the reversed word"},{"question":"Write a script in Python that will take in a list of strings as an input and return a sorted list based on the number of vowels in each string. The rule is as follows: the string with the most vowels is sorted first, followed by strings with the next highest number of vowels, and so on. If two strings have the same number of vowels, then they should maintain their original order in the list.","solution":"def count_vowels(s): Helper function to count the number of vowels in a string. return sum(1 for char in s.lower() if char in 'aeiou') def sort_by_vowel_count(strings): Sorts the given list of strings based on the number of vowels in each string. Strings with the most vowels come first. If two strings have the same number of vowels, their relative order is preserved. return sorted(strings, key=count_vowels, reverse=True)"},{"question":"Imagine you're working with neural networks and have two starting points, \`grad_start_1\` and \`grad_start_2\`, which represent the initial gradient vectors. Your task is to subtract \`grad_start_2\` from \`grad_start_1\` element-wise, resulting in a subtraction vector. If the subtraction vector's L2 norm is less than a defined threshold, you should return this subtraction vector. However, if the L2 norm is greater or equal to the threshold, you're required to normalize the subtraction vector to ensure its L2 norm aligns with the threshold before returning it. Write a Python function that accomplishes this task efficiently.","solution":"import numpy as np def adjust_gradient(grad_start_1, grad_start_2, threshold): Subtracts grad_start_2 from grad_start_1 element-wise. If the L2 norm of the resultant vector is less than the threshold, returns the vector. If the L2 norm is greater or equal to the threshold, returns the normalized vector with L2 norm equal to the threshold. Parameters: grad_start_1 (numpy array): The initial gradient vector 1. grad_start_2 (numpy array): The initial gradient vector 2. threshold (float): The L2 norm threshold. Returns: numpy array: The adjusted gradient vector. # Subtract grad_start_2 from grad_start_1 subtraction_vector = np.subtract(grad_start_1, grad_start_2) # Calculate the L2 norm of the subtraction vector l2_norm = np.linalg.norm(subtraction_vector) # Check if the L2 norm is less than the threshold if l2_norm < threshold: return subtraction_vector # Normalize the vector to have L2 norm equal to the threshold normalized_vector = (subtraction_vector / l2_norm) * threshold return normalized_vector"},{"question":"Calculate the factorial of 9 using a recursive function in Python. Additionally, implement a check function to validate the solution with multiple test cases.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Design a Python program that generates a frequency table for a list of numbers. The program should be able to handle both positive and negative numbers, as well as zero. It should also be able to ignore duplicate numbers in the list and accurately count the occurrences of each unique number, including negative numbers and zero if they are in the list. Additionally, the program should be able to handle large lists efficiently, without consuming excessive memory or time.","solution":"from collections import Counter def generate_frequency_table(numbers): Generates a frequency table for a list of numbers. :param numbers: List of integers (can be positive, negative, or zero) :return: Dictionary with unique numbers as keys and their frequencies as values # Using Counter to efficiently count occurrences of each number frequency_table = Counter(numbers) return dict(frequency_table)"},{"question":"Create a program in Python to output the number of prime numbers between 1 and 100. Also, provide a function that validates if a number is prime or not. Use the function within your code instead of using pre-existing packages or methods. Here is an erroneous piece of code as a reference. Identify and correct the mistakes ignoring the Python's in-built is_prime() function.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def count_primes_between_1_and_100(): Returns the number of prime numbers between 1 and 100. count = 0 for i in range(1, 101): if is_prime(i): count += 1 return count # Result count_primes_between_1_and_100() # This should return 25"},{"question":"Write an algorithm to sort an array using Hybrid quicksort.","solution":"def insertion_sort(array, low, high): for i in range(low + 1, high + 1): key = array[i] j = i - 1 while j >= low and key < array[j]: array[j + 1] = array[j] j -= 1 array[j + 1] = key def partition(array, low, high): pivot = array[high] i = low - 1 for j in range(low, high): if array[j] < pivot: i += 1 array[i], array[j] = array[j], array[i] array[i + 1], array[high] = array[high], array[i + 1] return i + 1 def hybrid_quicksort(array, low, high, threshold = 10): while low < high: if high - low < threshold: insertion_sort(array, low, high) break else: pivot_index = partition(array, low, high) if pivot_index - low < high - pivot_index: hybrid_quicksort(array, low, pivot_index - 1, threshold) low = pivot_index + 1 else: hybrid_quicksort(array, pivot_index + 1, high, threshold) high = pivot_index - 1 def sort(array): Sorts the array using hybrid quicksort. hybrid_quicksort(array, 0, len(array) - 1) return array"},{"question":"Write a python program that computes the sum of products from nested lists. This program should be able to handle an undefined number of nested levels in a list.","solution":"def sum_of_products(nested_list): Returns the sum of products from nested lists. The function handles any number of nested levels in a list. def product(lst): result = 1 for item in lst: if isinstance(item, list): result *= product(item) else: result *= item return result def sum_products(lst): total = 0 for item in lst: if isinstance(item, list): total += product(item) else: total += item return total return sum_products(nested_list)"},{"question":"Create a function which takes an unsorted list of numbers and returns a list of the same numbers but sorted in descending order. However, you are not allowed to use any built-in sorting functions or libraries, and you must implement your own sorting algorithm that has a time complexity of O(n log n) or better. Additionally, your function should not use any additional data structures or libraries for sorting, and should only modify the original list in place.","solution":"def quicksort_descending(arr): Sorts an unsorted list of numbers in descending order using the quicksort algorithm. This function modifies the list in place. Parameters: arr (list): The list of numbers to be sorted. Returns: list: The sorted list of numbers in descending order. def _quicksort_descending(arr, low, high): if low < high: pivot_index = partition(arr, low, high) _quicksort_descending(arr, low, pivot_index - 1) _quicksort_descending(arr, pivot_index + 1, high) def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] > pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 _quicksort_descending(arr, 0, len(arr) - 1) return arr"},{"question":"Write a function to compute the factorial of a number using recursion. Make sure to handle edge cases, such as negative numbers or non-integer inputs. Additionally, modify the function to check if the input number is within the range of 0 to 10 (inclusive) and raise a custom exception of type \`FactorialOutOfRangeError\` if it is not. Implement the function in such a way that it calculates the factorial using an iterative approach instead of recursion.","solution":"class FactorialOutOfRangeError(Exception): Custom exception raised when input is out of allowed range (0 to 10). pass def factorial(n): Compute the factorial of a number iteratively. Parameters: - n (int): The number to compute the factorial of. Returns: - int: The factorial of the number n. Raises: - FactorialOutOfRangeError: If n is not within the range of 0 to 10 (inclusive). - ValueError: If n is negative or not an integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n > 10: raise FactorialOutOfRangeError(\\"Input must be between 0 and 10 (inclusive)\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a Python function that truncates a given string to display only the first character of each word, followed by '..' if the word is longer than one character. The function should also include error handling for non-string inputs. For example, the string \\"Hello World\\" should be shortened to \\"H... W...\\" Here is the provided string for testing: phrase = \\"Hello World\\".","solution":"def truncate_words(phrase): Truncates a given string to display only the first character of each word, followed by '..' if the word is longer than one character. Args: phrase (str): The input string to truncate. Returns: str: The truncated string. Raises: ValueError: If the input is not a string. if not isinstance(phrase, str): raise ValueError(\\"Input must be a string.\\") words = phrase.split() truncated_words = [] for word in words: if len(word) > 1: truncated_words.append(word[0] + '..') else: truncated_words.append(word) return ' '.join(truncated_words)"},{"question":"Create an algorithm that takes a nested list as input along with multiple target values, and reorganizes the list such that each target value is moved to the end of its respective sub-list, whilst preserving the relative ordering of the other elements.","solution":"def reorganize_nested_list(nested_list, target_values): Reorganizes the nested list such that each target value is moved to the end of its respective sub-list while preserving the relative ordering of the other elements. :param nested_list: List[List[int]], the nested list to reorganize :param target_values: List[int], the target values to move to the end of each sub-list :return: List[List[int]], the reorganized nested list def move_target_to_end(sub_list, target_values): Helper function to move target values to the end of a sub-list. :param sub_list: List[int], the sub-list to reorganize :param target_values: List[int], the target values to move to the end :return: List[int], the reorganized sub-list non_target_elements = [elem for elem in sub_list if elem not in target_values] target_elements = [elem for elem in sub_list if elem in target_values] return non_target_elements + target_elements return [move_target_to_end(sub_list, target_values) for sub_list in nested_list]"},{"question":"Create a function in Python that takes two parameters, x and y. The function should calculate the square of the sum of x and y, and return the result. The time complexity of the function should be O(1) and the space complexity should be O(1).","solution":"def square_of_sum(x, y): Returns the square of the sum of x and y. return (x + y) ** 2"},{"question":"If I have a list of M elements and want to take a string representation of N adjacent elements from this list, what's the most efficient way to do it in Python? I need to iterate through this list, take N adjacent elements from it and create a string from them with single space (\\" \\") between elements of the set, for each combination which we can choose N adjacent elements from our list. I need that because I need to compare such strings with N-grams from another (usually longer) list. To be more precise: if I have a list like: \`my_list = ['This', 'is', 'my', 'list']\` and for example N equals 3, my output should look like that: \`['This is my', 'is my list']\`.","solution":"def generate_adjacent_strings(my_list, N): Takes a list and an integer N, returns a list of strings where each string is made up of N adjacent elements from the original list concatenated with spaces. Parameters: my_list (list): The original list of elements. N (int): The number of adjacent elements to select. Returns: list: A list of strings with N adjacent elements. result = [] for i in range(len(my_list) - N + 1): result.append(\\" \\".join(my_list[i:i + N])) return result"},{"question":"Use recursion to return the sum of all odd numbers up to a given number. Make sure to handle edge cases, such as if the given number is negative or zero. Additionally, implement the solution using a functional programming paradigm, without using any loops or global variables. Also, ensure that the solution has a time complexity of O(n) and does not exceed the call stack limit for large input values.","solution":"def sum_odd_numbers(n): Returns the sum of all odd numbers up to a given number n using recursion. If n is negative or zero, the function returns 0. if n <= 0: return 0 if n % 2 == 0: n -= 1 return n + sum_odd_numbers(n - 2)"},{"question":"Write a lexer and parser in Python for a simple language that only has numbers and the binary addition operation.","solution":"import re # Lexer part def lexer(input_string): tokens = [] token_specification = [ ('NUMBER', r'd+'), # Integer ('PLUS', r'+'), # Addition operator ('SKIP', r'[ t]+'), # Skip over spaces and tabs ('MISMATCH', r'.'), # Any other character ] token_re = '|'.join(f'(?P<{pair[0]}>{pair[1]})' for pair in token_specification) line_num = 1 for mo in re.finditer(token_re, input_string): kind = mo.lastgroup value = mo.group(kind) if kind == 'NUMBER': value = int(value) tokens.append((kind, value)) elif kind == 'PLUS': tokens.append((kind, value)) elif kind == 'SKIP': continue elif kind == 'MISMATCH': raise RuntimeError(f'{value} unexpected on line {line_num}') return tokens # Parser part def parser(tokens): if len(tokens) == 1 and tokens[0][0] == 'NUMBER': return tokens[0][1] # Only supports expressions like \\"NUMBER + NUMBER\\" if len(tokens) == 3 and tokens[0][0] == 'NUMBER' and tokens[1][0] == 'PLUS' and tokens[2][0] == 'NUMBER': return tokens[0][1] + tokens[2][1] raise ValueError(\\"Invalid expression\\") # Main function to execute lexer and parser def evaluate_expression(expression): tokens = lexer(expression) return parser(tokens)"},{"question":"Implement a program that creates an accurate JSON data structure compliant with ECMAScript 2019 standards, given the specific detailed input data, including handling invalid input data gracefully. The program should also include data validation and proper error handling.","solution":"import json class InvalidDataError(Exception): pass def validate_data(data): if not isinstance(data, dict): raise InvalidDataError(\\"Input data must be a dictionary.\\") if not all(isinstance(key, str) and key for key in data.keys()): raise InvalidDataError(\\"All keys must be non-empty strings.\\") if not all(isinstance(value, (str, int, float, bool, list, dict, type(None))) for value in data.values()): raise InvalidDataError(\\"Invalid data value type.\\") for value in data.values(): if isinstance(value, list): if not all(isinstance(item, (str, int, float, bool, dict, type(None))) for item in value): raise InvalidDataError(\\"Invalid data value type inside list.\\") if isinstance(value, dict): validate_data(value) def create_json(data): Creates a JSON object from the input data, validating its correctness. try: validate_data(data) return json.dumps(data, ensure_ascii=False) except (TypeError, InvalidDataError) as e: return {\\"error\\": str(e)}"},{"question":"Create a function that uses a breadth-first search to determine the minimum number of steps required to transform one binary number string into another, utilizing a given set of conversion operations. The conversion operations are depicted as a dictionary, where each key-value pair represents the transformation from one single binary digit to another. You need to efficiently find the shortest sequence of operations from the initial binary number to the target binary number and return the total number of moves made. Note that the transformation process must maintain the binary property (each digit must be either 0 or 1) throughout all the steps.","solution":"from collections import deque def bfs_min_steps(start, target, operations): Determines the minimum number of steps required to transform one binary number string to another using the given set of conversion operations. :param start: str, initial binary number string :param target: str, target binary number string :param operations: dict, conversion operations from one binary digit to another :return: int, minimum number of steps needed for the transformation if start == target: return 0 queue = deque([(start, 0)]) visited = set([start]) while queue: current, steps = queue.popleft() # Generate all possible next states for i in range(len(current)): if current[i] in operations: for op in operations[current[i]]: next_state = current[:i] + op + current[i+1:] if next_state == target: return steps + 1 if next_state not in visited: visited.add(next_state) queue.append((next_state, steps + 1)) return -1 # If transformation is not possible # Example transformation operations operations_example = { '0': ['1'], '1': ['0'] } # Example usage # start = \\"110\\", target = \\"001\\", should return 3 res = bfs_min_steps(start=\\"110\\", target=\\"001\\", operations=operations_example) print(res)"},{"question":"Create a function, \\"binaryToDecimal\\", that takes a string of 0s and 1s as an argument and converts it to the corresponding decimal value.","solution":"def binaryToDecimal(binary_str): Converts a binary string to the corresponding decimal value. :param binary_str: A string representing a binary number (e.g., \\"1101\\") :returns: The decimal value of the binary string return int(binary_str, 2)"},{"question":"Revise the DeductionRoom code for the purpose of enhancing the functionality of 'join_room' method that allows adding multiple participants at once by accepting a parameter of multiple 'participant_id's. Additionally, include a permission-based restriction for room creators to enable or disable other users' ability to join the room, which requires a multi-step process to implement a more secure mechanism for limiting access to the room.","solution":"class DeductionRoom: def __init__(self, creator_id): self.participants = set() self.creator_id = creator_id self.joining_allowed = True self.participants.add(creator_id) def join_room(self, *participant_ids): if not self.joining_allowed and self.creator_id not in participant_ids: raise PermissionError(\\"Joining the room is not allowed.\\") for participant_id in participant_ids: self.participants.add(participant_id) def set_joining_permission(self, allow): if allow not in [True, False]: raise ValueError(\\"Permission must be a boolean value.\\") self.joining_allowed = allow def is_participant(self, participant_id): return participant_id in self.participants"},{"question":"On en Python, write a function that rotates a list by a given number of steps.","solution":"def rotate_list(lst, steps): Rotates the elements of the list by the given number of steps. Positive steps rotate right and negative steps rotate left. :param lst: List of elements to be rotated :param steps: Number of steps to rotate the list :return: Rotated list if not lst: return [] steps = steps % len(lst) # Handle cases where steps > len(lst) return lst[-steps:] + lst[:-steps]"},{"question":"Write a Python statement that, given a set of complex numbers, generates a new set containing only the complex numbers with their real and imaginary part as positive. Further, sort this new set in ascending order based on the magnitude of complex numbers (defined as sqrt(real**2 +imaginary**2)). In case of tie, sort them based on the real part in descending order. Use the Python set data structure for the task.","solution":"def filter_and_sort_complex_numbers(complex_set): Filters out complex numbers with positive real and imaginary parts and sorts them based on the magnitude; in case of tie, sort by real part in descending order. Arguments: complex_set : set of complex numbers Returns: sorted list of complex numbers # Filtering complex numbers with both real and imaginary parts positive positive_complex = {c for c in complex_set if c.real > 0 and c.imag > 0} # Sorting by magnitude, and in case of tie by real part in descending order sorted_complex = sorted(positive_complex, key=lambda c: (abs(c), -c.real)) return sorted_complex"},{"question":"Programming Question: Implement Fibonacci Series using loops and write a function to print nth number of the series.","solution":"def fibonacci(n): Returns the nth number in the Fibonacci series. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"How can I write a Python program to count the number of occurrences of each letter in a given string, ignoring case sensitivity?","solution":"def count_letter_occurrences(s): Returns a dictionary with the count of each letter in the given string, ignoring case sensitivity. s = s.lower() letter_count = {} for char in s: if char.isalpha(): if char in letter_count: letter_count[char] += 1 else: letter_count[char] = 1 return letter_count"},{"question":"Create a python script that simulates a number guessing game. The script should generate a random number between 1 and 100 and give the user 7 attempts to guess the number. If the user's guess is higher or lower than the target number, the script should give hints (\\"too high\\" or \\"too low\\"). If the user fails to guess the number in 7 attempts, the script should reveal the target number and announce the game over. Use comments to make your code easy to follow for other developers.","solution":"import random def guessing_game(): Simulate a number guessing game. The function generates a random number between 1 and 100 and gives the user 7 attempts to guess the number. # Generate a random number between 1 and 100 target_number = random.randint(1, 100) attempts = 7 print(\\"Welcome to the Number Guessing Game!\\") print(\\"I have chosen a number between 1 and 100. You have 7 attempts to guess it.\\") for attempt in range(attempts): # Ask the user for their guess try: guess = int(input(f\\"Attempt {attempt + 1}/{attempts}: Enter your guess: \\")) except ValueError: print(\\"Invalid input. Please enter a number between 1 and 100.\\") continue # Compare the guess with the target number and provide hints if guess < target_number: print(\\"Too low!\\") elif guess > target_number: print(\\"Too high!\\") else: # The user guessed correctly print(\\"Congratulations! You guessed the number!\\") return # If the user fails to guess the number in 7 attempts, reveal the target number print(f\\"Sorry, you've run out of attempts. The number was {target_number}. Game over.\\") # Note: Unit testing might be challenging for this interactive game, but we can create testable functions. def get_feedback(guess, target_number): if guess < target_number: return \\"Too low!\\" elif guess > target_number: return \\"Too high!\\" else: return \\"Correct!\\""},{"question":"Devise a program script that identifies the longest sequence of recurring characters within a provided string of text, and for each recurring sequence, also counts the number of occurrences in the string.","solution":"def longest_recurring_sequence(s): Identifies the longest sequence of recurring characters within a provided string of text, and counts the number of occurrences for each recurring sequence. Args: s (str): The input string. Returns: tuple: A tuple containing the longest recurring sequence and the count of its occurrences. max_seq = \\"\\" max_count = 0 current_seq = \\"\\" current_count = 0 i = 0 while i < len(s): current_seq = s[i] current_count = 1 j = i + 1 while j < len(s) and s[j] == s[i]: current_seq += s[j] current_count += 1 j += 1 if current_count > max_count: max_seq = current_seq max_count = current_count i = j # Move to the next different character return (max_seq, max_count)"},{"question":"Write a Python program to create a N x M matrix (N rows and M columns) filled with random integers between 0 and 9.","solution":"import random def generate_random_matrix(N, M): Creates an N x M matrix filled with random integers between 0 and 9. Parameters: N (int): Number of rows in the matrix. M (int): Number of columns in the matrix. Returns: List[List[int]]: Generated matrix. return [[random.randint(0, 9) for _ in range(M)] for _ in range(N)]"},{"question":"Given a list of questions and corresponding answers, you are asked to write a Python function to generate the answer key in the format of key-value pairs in a dictionary. However, to make the task more challenging, the set of questions and answers is shuffled randomly before being passed to the function. Your task is to reorder them properly and create the answer key. Additionally, the function should handle cases where there might be duplicate questions in the list and exclude them from the final answer key.","solution":"def generate_answer_key(questions, answers): Generates an answer key from a shuffled list of questions and answers. :param questions: List of questions in random order :param answers: List of corresponding answers in random order :return: Dictionary containing the answer key with unique questions if len(questions) != len(answers): raise ValueError(\\"The number of questions and answers must be equal\\") # Create a dictionary to store the answer key answer_key = {} # Iterate through the lists and populate the answer key for question, answer in zip(questions, answers): if question not in answer_key: answer_key[question] = answer return answer_key"},{"question":"Create a python program to count how many times a word appears in a given string, but exclude any occurrences of the word that are within parentheses. For example, in the given string \\"The quick (brown) fox jumps over the lazy (dog)\\", the word \\"brown\\" should not be counted, but \\"The\\", \\"quick\\", \\"fox\\", \\"jumps\\", \\"over\\", \\"the\\", \\"lazy\\", and \\"dog\\" should be counted.","solution":"import re def count_word_exclude_parentheses(text, word): Counts how many times a word appears in a given string, excluding any occurrence of the word that are within parentheses. :param text: The input string. :param word: The word to count. :return: The count of the word in the string excluding its occurrences in parentheses. # Remove text within parentheses text = re.sub(r'(.*?)', '', text) # Make the string lowercase to count words case-insensitively text = text.lower() word = word.lower() # Split the cleaned string into words and count the target word words = re.findall(r'b' + re.escape(word) + r'b', text) return len(words)"},{"question":"Write a function that prints an array elements in a reverse order, but without using any built-in functions or methods for reversing the array. The function should only use basic programming constructs like loops and conditional statements.","solution":"def reverse_print(arr): Prints the elements of the array in reverse order. for i in range(len(arr) - 1, -1, -1): print(arr[i])"},{"question":"Implement a function that not only creates a set from an iterable, but also identifies and returns a dictionary with the duplicate elements found in the iterable and their counts. Also provide the functionality to optionally ignore case for string values when identifying duplicates.","solution":"def create_set_and_find_duplicates(iterable, ignore_case=False): Create a set from the iterable and find duplicate elements with their counts. Parameters: iterable (iterable): The input iterable to process. ignore_case (bool): Whether to ignore case for string values. Returns: tuple: A tuple containing the set of unique elements and a dictionary of duplicate elements with their counts. element_count = {} duplicates = {} for elem in iterable: if ignore_case and isinstance(elem, str): elem = elem.lower() if elem in element_count: element_count[elem] += 1 else: element_count[elem] = 1 unique_elements = set(iterable) for key, count in element_count.items(): if count > 1: duplicates[key] = count return unique_elements, duplicates"},{"question":"Suppose you are given a 3D matrix of size n * n * n. Write a function using a divide-and-conquer approach that finds the maximum element efficiently in this 3D matrix. Keep in mind that the matrix may not be ordered and the elements in the 3D matrix can be a mixture of positive, negative integers and zeros. Also, consider parallel computing techniques to further enhance the efficiency of your solution.","solution":"import concurrent.futures def find_max_3d_matrix(matrix): Finds the maximum element in a 3D matrix using a divide-and-conquer approach with parallel processing. :param matrix: 3D list of lists containing integers :return: Maximum element in the matrix if not matrix: return float('-inf') def max_in_submatrix(submatrix): if not submatrix: return float('-inf') n = len(submatrix) if n == 1: return max(max(max(row) for row in plane) for plane in submatrix) mid = n // 2 # Divide the matrix into 8 submatrices submatrices = [ submatrix[:mid][:][:mid], submatrix[:mid][:][mid:], submatrix[mid:][:][:mid], submatrix[mid:][:][mid:], submatrix[:mid][mid:][:mid], submatrix[:mid][mid:][mid:], submatrix[mid:][mid:][:mid], submatrix[mid:][mid:][mid:] ] # Use concurrent processing to find the max in each submatrix with concurrent.futures.ThreadPoolExecutor() as executor: max_values = list(executor.map(max_in_submatrix, submatrices)) return max(max_values) return max_in_submatrix(matrix)"},{"question":"Implement a heuristic algorithm in Python to find an approximate solution to the traveling salesman problem (TSP). Explain how your algorithm works and its time complexity.","solution":"def tsp_nearest_neighbor(distance_matrix): Solves the TSP using the nearest neighbor heuristic. :param distance_matrix: 2D list or matrix where distance_matrix[i][j] represents the distance from city i to city j :return: A list representing the order of cities visited in the TSP solution. n = len(distance_matrix) visited = [False] * n path = [] current_city = 0 path.append(current_city) visited[current_city] = True for _ in range(n - 1): nearest_neighbor = None nearest_distance = float('inf') for next_city in range(n): if not visited[next_city] and distance_matrix[current_city][next_city] < nearest_distance: nearest_neighbor = next_city nearest_distance = distance_matrix[current_city][next_city] current_city = nearest_neighbor visited[current_city] = True path.append(current_city) path.append(0) # Return to the start point return path"},{"question":"Modify the code snippet so that it prints the **kth largest** element in the given list, without using any built-in sorting functions. Additionally, the solution should have a time complexity of O(n) and a space complexity of O(1).","solution":"def partition(arr, left, right): pivot = arr[right] i = left - 1 for j in range(left, right): if arr[j] >= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[right] = arr[right], arr[i + 1] return i + 1 def kth_largest(arr, k): left, right = 0, len(arr) - 1 while True: pos = partition(arr, left, right) if pos == k - 1: return arr[pos] if pos < k - 1: left = pos + 1 else: right = pos - 1"},{"question":"Create a python program that simulates a do-while loop to input values until a correct value is given.","solution":"def get_positive_integer(): Simulates a do-while loop to input values until a correct value (positive integer) is given. while True: try: value = int(input(\\"Enter a positive integer: \\")) if value > 0: return value except ValueError: pass print(\\"Invalid input. Please try again.\\")"},{"question":"Write a python program to input number in the decimal system and output the binary equivalent as a string of specified width, padded with leading zeros.","solution":"def decimal_to_binary_padded(n, width): Convert a decimal number to its binary equivalent as a string of specified width, padded with leading zeros. :param n: The decimal number to convert. :param width: The width of the resulting binary string. :return: The binary string of the specified width. binary_string = bin(n)[2:] # Remove the '0b' prefix from the binary representation return binary_string.zfill(width)"}]`),E={name:"App",components:{PoemCard:I},data(){return{searchQuery:"",visibleCount:4,poemsData:C,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},F={class:"card-container"},N={key:0,class:"empty-state"},z=["disabled"],S={key:0},L={key:1};function D(i,e,l,m,s,a){const f=g("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):u("",!0)]),t("div",F,[(n(!0),r(b,null,v(a.displayedPoems,(o,p)=>(n(),w(f,{key:p,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",N,' No results found for "'+d(s.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),r("span",L,"Loading...")):(n(),r("span",S,"See more"))],8,z)):u("",!0)])}const M=c(E,[["render",D],["__scopeId","data-v-03127929"]]),V=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"guide/4.md","filePath":"guide/4.md"}'),W={name:"guide/4.md"},B=Object.assign(W,{setup(i){return(e,l)=>(n(),r("div",null,[x(M)]))}});export{V as __pageData,B as default};
