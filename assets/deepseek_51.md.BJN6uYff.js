import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as h,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,m,a,r){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(k,[["render",E],["__scopeId","data-v-6996fa5b"]]),A=JSON.parse('[{"question":"There are n workers in a factory that produce widgets. Each worker i has a specific rate ri (widgets per hour). The factory operates for precisely T hours each day, and every worker is given exactly one machine to use. However, to maximize the efficiency of production, workers may swap machines with each other exactly once if they choose to do so. After one swap, their widget production rate will remain the same, as will the machines they were originally using. Determine the maximum number of widgets produced by the end of the day if workers can make at most one machine swap. Input The first line of input contains two integers n and T (1 ≤ n ≤ 105, 1 ≤ T ≤ 109). The second line contains n space-separated integers representing the widget production rate of each worker r1, r2, ..., rn (1 ≤ ri ≤ 109). Output Print a single integer — the maximum number of widgets that can be produced by all workers in one day after at most one swap. Examples Input 3 10 5 3 8 Output 160 Input 4 5 2 8 3 7 Output 100 Note In the first sample test: * Total widgets produced without swap: 5*10 + 3*10 + 8*10 = 160 * Maximum production as no beneficial swap is possible. In the second sample test: * Total widgets produced without swap: 2*5 + 8*5 + 3*5 + 7*5 = 100 * Swapping won\'t change the total as well, so maximum remains 100.","solution":"def max_widgets_produced(n, T, rates): Calculate the maximum widgets produced by all workers in one day given at most one swap of machines. Parameters: n (int): Number of workers T (int): Number of hours the factory operates per day rates (list): List of widget production rate per hour for each worker Returns: int: Maximum number of widgets produced # Initial production without any swap total_production = sum(rates) * T return total_production"},{"question":"You are given two arrays of integers, `A` and `B`, both of length `n`. You want to merge them into a single sorted array `C` of length `2n`. The challenge is to perform this merge step with the least amount of memory usage and without using any built-in sort function. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the length of arrays `A` and `B`. The second line contains `n` integers — the elements of array `A` (0 ≤ A[i] ≤ 10^9). The third line contains `n` integers — the elements of array `B` (0 ≤ B[i] ≤ 10^9). Output Output a single line containing `2n` integers — the elements of the merged array `C` in non-decreasing order. Examples Input 5 1 3 5 7 9 2 4 6 8 10 Output 1 2 3 4 5 6 7 8 9 10 Input 3 10 20 30 15 25 35 Output 10 15 20 25 30 35 Note In the first example, the arrays can be merged directly into a sorted array by comparing and inserting elements in ascending order. In the second example, arrays `A` and `B` can also be merged step by step by comparing the next smallest elements of both arrays and keeping the order sorted.","solution":"def merge_sorted_arrays(A, B): Merges two sorted arrays A and B into a single sorted array C. n = len(A) C = [] i, j = 0, 0 # Merge arrays A and B while i < n and j < n: if A[i] <= B[j]: C.append(A[i]) i += 1 else: C.append(B[j]) j += 1 # If there are remaining elements in A while i < n: C.append(A[i]) i += 1 # If there are remaining elements in B while j < n: C.append(B[j]) j += 1 return C"},{"question":"You are assisting a factory in managing their inventory of raw materials for manufacturing products. Each raw material is stored in a different shipment and has a unique quantity recorded. The factory aims to maximize the utilization of raw materials while minimizing the leftover waste. Due to warehouse constraints, the factory can only keep track of a limited number of shipments with the most substantial quantities at any given time. Hence, you must design a system that, given a list of shipments and a limit on the number of shipments they can store, maintains the top `K` largest quantities from the list. When a new shipment arrives, it should be added to the inventory while maintaining the total number of shipments tracked to `K`. If adding the new shipment exceeds `K`, the shipment with the smallest quantity among the current K shipments should be discarded to ensure the inventory size remains `K`. Input The first line contains integer T representing the number of test cases. Each test case consists of two parts: 1. The first line of each test case contains two space-separated integers `N` (the total number of shipments) and `K` (the number of largest shipments to keep track of). 2. The second line contains `N` space-separated integers representing the quantities of the shipments. Output For each test case, output a single line containing K space-separated integers in descending order representing the top K quantities maintained in the factory\'s inventory. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100000 1 ≤ K ≤ N 1 ≤ Quantity of each shipment ≤ 1000000 Example Input: 1 8 3 10 20 30 40 50 60 70 80 Output: 80 70 60","solution":"import heapq def manage_shipments(T, cases): results = [] for case in cases: N, K, shipments = case if K >= N: results.append(sorted(shipments, reverse=True)[:K]) else: largest_shipments = [] for quantity in shipments: if len(largest_shipments) < K: heapq.heappush(largest_shipments, quantity) elif quantity > largest_shipments[0]: heapq.heappushpop(largest_shipments, quantity) results.append(sorted(largest_shipments, reverse=True)) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) cases = [] index = 1 for _ in range(T): N, K = map(int, lines[index].split()) shipments = list(map(int, lines[index + 1].split())) cases.append((N, K, shipments)) index += 2 return T, cases def format_output(results): output_lines = [] for result in results: output_lines.append(\\" \\".join(map(str, result))) return \\"n\\".join(output_lines)"},{"question":"Problem Alice has a collection of marbles arranged in a row. Each marble has a color represented by a lowercase letter, so the sequence of marbles can be described by a string. The goal is to determine the largest number of marbles that can be consecutively removed from the collection if each move consists of removing a contiguous substring of the same colored marbles. You can perform as many moves as you want, but you must maximize the total number of marbles removed in a single move. Write a program to find the maximum number of consecutive marbles that can be removed in a single move and output this number. Constraints The input satisfies the following conditions. * The length of the string 1 leq len(S) leq 10^5 * The string S consists of lowercase English letters only. Input The input is given as a single string S, which represents the sequence of marbles\' colors. Output The output should be a single integer, representing the maximum number of consecutive marbles that can be removed in a single move. Examples Input abccbaabccba Output 2 Input aabbbcccc Output 4 Input xyz Output 1 Input aaabbbaaa Output 3","solution":"def max_consecutive_marbles(s): Returns the maximum number of consecutive marbles of the same color that can be removed in a single move. max_count = 1 current_count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: current_count += 1 max_count = max(max_count, current_count) else: current_count = 1 return max_count"},{"question":"You are given an array of integers and a set of operations to perform on the array. The allowed operations are: 1. Add an integer to all elements of the array. 2. Multiply all elements of the array by an integer. 3. Reverse the array. The goal is to transform the initial array into a target array using the minimum number of operations. Input The first line of the input contains an integer T, denoting the number of test cases. Each test case consists of three lines: - The first line contains an integer N, denoting the size of the array. - The second line contains N space-separated integers, denoting the elements of the initial array. - The third line contains N space-separated integers, denoting the elements of the target array. Output For each test case, print the minimum number of operations required to transform the initial array into the target array, or print -1 if it\'s impossible. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ Ai, Bi ≤ 10^9 SAMPLE INPUT 2 3 2 3 4 4 6 8 4 1 2 3 4 1 2 3 5 SAMPLE OUTPUT 1 -1 Explanation In the first test case, you can multiply the initial array by 2 to get the target array, which takes one operation. In the second test case, there is no sequence of allowed operations that can transform the initial array into the target array, therefore the output is -1.","solution":"def min_operations_to_transform(initial, target, N): # Check if initial and target arrays are already the same if initial == target: return 0 # Check if we can transform by only adding a single integer to all elements diff = target[0] - initial[0] if all(target[i] - initial[i] == diff for i in range(1, N)): return 1 # Check if we can transform by only multiplying by a single integer if initial[0] != 0 and target[0] % initial[0] == 0: ratio = target[0] // initial[0] if all(initial[i] * ratio == target[i] for i in range(1, N)): return 1 # Check if reversing the array solves the issue if initial[::-1] == target: return 1 # Check if any combination of one add and one multiply works for i in range(N): add = target[i] - initial[i] # required addition if add != 0 and all(target[j] - initial[j] == add for j in range(N)): return 1 if initial[i] != 0: mul = target[i] // initial[i] # required multiplication if all(initial[j] * mul == target[j] for j in range(N)): return 1 return -1 def minimum_operations(T, test_cases): results = [] for N, initial, target in test_cases: min_ops = min_operations_to_transform(initial, target, N) results.append(min_ops) return results # Read input from the stdin def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) initial = list(map(int, data[index+1:index+1+N])) target = list(map(int, data[index+1+N:index+1+2*N])) test_cases.append((N, initial, target)) index += 1 + 2 * N results = minimum_operations(T, test_cases) for result in results: print(result)"},{"question":"You are given a data set consisting of n distinct points in two-dimensional space. Your task is to find the smallest circle that can contain all the given points. Input The first line of input will contain one integer n (1 ≤ n ≤ 10^4), the number of points. Each of the next n lines will contain two integers xi and yi (−10^4 ≤ xi, yi ≤ 10^4), representing the coordinates of the points. Output Print three real numbers cx, cy, and r separated by spaces, where (cx, cy) are the coordinates of the center of the smallest enclosing circle, and r is its radius. These numbers must be precise to at least six decimal places. Constraints 1 ≤ n ≤ 10^4 Examples Input 3 1 1 2 2 3 3 Output 2.000000 2.000000 1.414214 Input 4 0 0 0 2 2 0 2 2 Output 1.000000 1.000000 1.414214 Note In the first sample test, the smallest circle that can enclose all three points has its center at (2,2) and a radius of 1.414214 which is the distance from the center to any of the points. In the second sample test, the smallest circle that can enclose all four points has its center at (1,1) and a radius of 1.414214.","solution":"import math from typing import List, Tuple class Circle: def __init__(self, x: float = 0.0, y: float = 0.0, r: float = 0.0): self.x = x self.y = y self.r = r def dist(a: Tuple[float, float], b: Tuple[float, float]) -> float: return math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2) def is_in_circle(circle: Circle, point: Tuple[float, float]) -> bool: return dist((circle.x, circle.y), point) <= circle.r + 1e-9 def make_circle_two_points(a: Tuple[float, float], b: Tuple[float, float]) -> Circle: cx = (a[0] + b[0]) / 2 cy = (a[1] + b[1]) / 2 r = dist(a, b) / 2 return Circle(cx, cy, r) def make_circle_three_points(a: Tuple[float, float], b: Tuple[float, float], c: Tuple[float, float]) -> Circle: A = b[0] - a[0] B = b[1] - a[1] C = c[0] - a[0] D = c[1] - a[1] E = A * (a[0] + b[0]) + B * (a[1] + b[1]) F = C * (a[0] + c[0]) + D * (a[1] + c[1]) G = 2 * (A * (c[1] - b[1]) - B * (c[0] - b[0])) if G == 0: return Circle() cx = (D * E - B * F) / G cy = (A * F - C * E) / G r = dist((cx, cy), a) return Circle(cx, cy, r) def find_smallest_enclosing_circle(points: List[Tuple[int, int]]) -> Circle: def welzl_recursive(points: List[Tuple[int, int]], boundary: List[Tuple[int, int]], n: int) -> Circle: if n == 0 or len(boundary) == 3: if len(boundary) == 0: return Circle() elif len(boundary) == 1: return Circle(boundary[0][0], boundary[0][1], 0) elif len(boundary) == 2: return make_circle_two_points(boundary[0], boundary[1]) elif len(boundary) == 3: return make_circle_three_points(boundary[0], boundary[1], boundary[2]) p = points[n-1] circle = welzl_recursive(points, boundary, n-1) if is_in_circle(circle, p): return circle return welzl_recursive(points, boundary + [p], n-1) points_copy = points[:] return welzl_recursive(points_copy, [], len(points_copy)) def smallest_enclosing_circle(n: int, points: List[Tuple[int, int]]) -> Tuple[float, float, float]: circle = find_smallest_enclosing_circle(points) return (circle.x, circle.y, circle.r)"},{"question":"You are given an array of integers. Your task is to calculate the sum of all unique elements in the array (elements that appear exactly once). Input The first line of the input contains an integer n (1 ≤ n ≤ 100), the number of integers in the array. The second line contains n space-separated integers a1, a2, ..., an (-100 ≤ ai ≤ 100), the elements of the array. Output Output a single integer, the sum of all unique elements in the array. Examples Input 5 1 2 2 3 4 Output 8 Input 6 1 1 1 1 1 1 Output 0","solution":"def sum_of_unique_elements(n, arr): Returns the sum of all unique elements in the array. Parameters: n (int): The number of elements in the array. arr (list): The list of integers. Returns: int: The sum of all unique elements. from collections import Counter element_count = Counter(arr) unique_elements_sum = sum(key for key, count in element_count.items() if count == 1) return unique_elements_sum"},{"question":"Palindrome Breaker Problem Description Given a string, generate a new string by breaking any palindromic structure within the original string. The new string should be the lexicographically smallest string possible. A string is palindromic if it reads the same forward and backward. To break a palindrome, you are allowed to change exactly one character in the original string to any other lowercase English letter (i.e., from \'a\' to \'z\'). If the string has only one character, return an empty string as it\'s impossible to break its palindrome structure. Input The input consists of a single string s (1 ≤ length of s ≤ 1000) made up of lowercase English letters. Output Return the lexicographically smallest string possible after breaking the palindrome. If it\'s impossible to break the palindrome, return an empty string. Examples Input abccba Output aaccba Input a Output \\"\\" (an empty string) Explanation In the first example, by changing the character \'b\' to \'a\', we get the string \\"aaccba\\" which is no more a palindrome and is lexicographically smallest among possible results. In the second example, since the given string contains only one character, it is impossible to break its palindromic property by changing one character, so the output is an empty string.","solution":"def break_palindrome(s): Return the lexicographically smallest string possible after breaking the palindrome. If it\'s impossible to break the palindrome, return an empty string. if len(s) == 1: return \\"\\" s_list = list(s) for i in range(len(s) // 2): if s_list[i] != \'a\': s_list[i] = \'a\' return \'\'.join(s_list) s_list[-1] = \'b\' return \'\'.join(s_list)"},{"question":"You are given an array of integers and your task is to determine if it is possible to rearrange the array such that every consecutive pair of elements has a common divisor greater than 1. If such a rearrangement is possible, output one valid rearrangement. Otherwise, output \\"NO\\" without quotes. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the array. Output If it is impossible to rearrange the array as described, print \\"NO\\" without quotes. Otherwise, print \\"YES\\" in the first line and a valid rearrangement in the second line. Example Input 4 2 3 6 9 Output YES 3 6 9 2 Note In the first example, the array can be rearranged as [3, 6, 9, 2] because: - gcd(3, 6) = 3 - gcd(6, 9) = 3 - gcd(9, 2) = 1 It\'s impossible to rearrange the array such that every consecutive pair of elements shares a common divisor greater than 1, so the output should be \\"NO\\".","solution":"import math from itertools import permutations def gcd(x, y): while y: x, y = y, x % y return x def can_rearrange(arr): if len(arr) == 1: # If there\'s only one element, we can\'t have consecutive pairs, hence it could be trivially rearranged return \\"YESn\\" + str(arr[0]) # Check permutations to find valid arrangement for perm in permutations(arr): valid = True for i in range(len(perm)-1): if gcd(perm[i], perm[i+1]) <= 1: valid = False break if valid: return \\"YESn\\" + \' \'.join(map(str, perm)) return \\"NO\\" # Example input_data = [4, [2, 3, 6, 9]] # this should output \\"YESn3 6 9 2\\" n = input_data[0] arr = input_data[1] output = can_rearrange(arr) print(output)"},{"question":"In a land far away, there exists a kingdom where people live in villages connected by roads. The kingdom has N villages numbered from 1 to N and M bidirectional roads. Each road connects two villages and has a certain travel time associated with it. The king is keen to ensure that his subjects can travel easily throughout the kingdom. To achieve this, he plans to improve certain roads. He has allotted a budget to either change the travel time of some roads or construct new roads, ensuring that there is more than one possible minimum travel route between any two villages, making the travel less congested and more efficient. You have been chosen to help the king by ensuring that from any village, there is at least one other alternative minimum travel route to any other village. Your task is to determine if it is possible to modify or add roads such that there are at least two distinct paths of minimum total travel time between any pair of villages. Input The input will be given as follows: N M u1 v1 w1 u2 v2 w2 :: uM vM wM The first line of input contains two integers, N (2 ≤ N ≤ 100,000) and M (1 ≤ M ≤ 200,000), representing the number of villages and roads, respectively. Each of the following M lines contains three integers, ui, vi (1 ≤ ui, vi ≤ N), and wi (1 ≤ wi ≤ 1000), representing the two villages connected by the road and the travel time of that road. Output Output a single integer 1 if it is possible to ensure that there are at least two distinct minimum travel paths between any pair of villages after modifications, or 0 if it is not possible. Examples Input 4 5 1 2 1 2 3 1 3 4 1 1 3 2 2 4 2 Output 1 Input 3 3 1 2 2 2 3 2 3 1 3 Output 0 Note: The first example demonstrates a possible scenario where the villages can be modified to ensure multiple minimum paths, while the second example does not provide enough flexibility for the modifications.","solution":"import heapq from collections import defaultdict, deque def dijkstra(n, start, graph): dist = [float(\'inf\')] * (n + 1) dist[start] = 0 pq = [(0, start)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist def can_have_multiple_shortest_paths(n, m, edges): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Pick any node to be the source, let\'s pick node 1 dist_from_1 = dijkstra(n, 1, graph) # Check if we can find an alternative shortest path for each edge new_graph = defaultdict(list) for u, v, w in edges: if dist_from_1[u] + w == dist_from_1[v]: new_graph[u].append((v, w)) new_graph[v].append((u, w)) # BFS from node 1 to ensure full connectivity in the minimal path graph visited = [False] * (n + 1) queue = deque([1]) while queue: node = queue.popleft() if not visited[node]: visited[node] = True for neighbor, _ in new_graph[node]: if not visited[neighbor]: queue.append(neighbor) # Check if all nodes are visited return 1 if all(visited[1:]) else 0 def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] index = 2 for _ in range(m): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) edges.append((u, v, w)) index += 3 print(can_have_multiple_shortest_paths(n, m, edges))"},{"question":"You are given three integers n, k, and t. You should simulate interacting with a function `F` to find an unknown target value that it is based on. The function `F` exists but is not provided to you, and it takes an integer argument and returns an integer value. Your task is to find the smallest integer y such that F(y) is greater than or equal to k, or determine that no such integer y exists less than or equal to t. You can make up to 1000 calls to the function `F` to determine the answer. Write a program that solves this problem. Input The first line contains three integers n, k, t (1 ≤ n ≤ 100, 0 ≤ k ≤ 109, 1 ≤ t ≤ 109). Output To print the answer for the problem, print the smallest integer y such that F(y) ≥ k, or -1 if there is no such integer within the range [1, t], and then terminate the program. Interaction To make a call to the function `F`, print `F x` (1 ≤ x ≤ t), where x is the integer input to the function. After each call to `F`, read a single integer output which is the result of the function call F(x). It is guaranteed that the function F is non-decreasing, i.e., if a < b then F(a) ≤ F(b), and that the function values range between 0 and 109. Example Input 50 15 100 Output F 1 F 2 F 5 F 10 F 20 ! 7 Note In this example, it is implied that calling the function `F` with certain values will produce the following results (though you don\'t see the function itself, only the simulation): - F(1) = 10 - F(2) = 12 - F(5) = 14 - F(10) = 18 - F(20) = 22 Notice you have to use your calls to narrow down until F(x) reaches the required value k. The answer in this interpretation would be 7 assuming F(7) is the lowest input that makes the function output greater or equal to k.","solution":"def find_value(n, k, t): def F(x): # Placeholder dummy function. This should simulate the interaction for testing purposes. # Replace or mock this as needed for actual function interaction. return x + 5 # Example dummy function F(x) = x + 5 low, high = 1, t answer = -1 while low <= high: mid = (low + high) // 2 value = F(mid) if value >= k: answer = mid high = mid - 1 else: low = mid + 1 return answer"},{"question":"In a city, there are N water tanks connected by pipes. Each pipe connects two water tanks i and j, and has a certain length d. The goal is to determine the minimum distance needed to repair to ensure all water tanks are connected. Given an integer N representing the number of water tanks, M representing the number of pipes, and a list of tuples where each tuple contains two integers (i, j) representing a connection between tank i and tank j, and an integer d representing the length of the pipe, determine the minimum total length of pipe that needs to be repaired to ensure all the tanks are connected. Input First line contains a single integer - T, the total number of test cases. Each test case consists of two parts: - First line contains two space-separated integers - N and M, representing the number of water tanks and the number of pipes. - Next M lines, each contains a tuple of three integers (i, j, d) representing a pipe between tanks i and j with length d. Output For each test case, print the minimum total length of repaired pipe required to connect all the water tanks. If it’s not possible to connect all the water tanks, print -1. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 10^4 0 ≤ M ≤ 10^5 1 ≤ d ≤ 10^6 Note: 1) Tanks are labeled from 1 to N. 2) Use efficient algorithms to handle large inputs. SAMPLE INPUT 2 4 4 1 2 1 2 3 4 3 4 2 4 1 3 3 1 1 2 1 SAMPLE OUTPUT 6 -1 Explanation In the first case, the minimum distance for repairing pipes to connect all tanks is 6 (choosing pipes with length 1, 2, and 3). In the second case, there is no way to connect all water tanks, so the output is -1.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if xroot != yroot: if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_repair_cost(N, M, pipes): # Sorting edges in ascending order based on their length pipes.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(N + 1): parent.append(node) rank.append(0) edges_used = 0 result = 0 for i, j, d in pipes: x = find(parent, i) y = find(parent, j) if x != y: edges_used += 1 result += d union(parent, rank, x, y) if edges_used == N - 1: break if edges_used != N - 1: return -1 else: return result def solve(T, test_cases): results = [] for i in range(T): N, M, pipes = test_cases[i] result = minimum_repair_cost(N, M, pipes) results.append(result) return results"},{"question":"Twilight Sparkle uses a powerful magic spell to transform an array of integers and reveal hidden patterns. The spell requires her to determine the maximum sum of a subarray, but there’s a twist: instead of taking any subarray, she can select exactly k elements from the array (not necessarily contiguous) that maximize the sum. Can you help Twilight Sparkle find this maximum sum by selecting exactly k elements from the given array? Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of elements in the array and the exact number of elements to select. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Output Output a single integer — the maximum sum of exactly k selected elements. Examples Input 6 3 -1 2 3 -4 5 -6 Output 10 Input 5 2 1 1 1 1 1 Output 2 Input 4 4 -1 -2 -3 -4 Output -10","solution":"def max_sum_k_elements(n, k, array): This function returns the maximum sum of exactly k selected elements from the array. # Sort the array in descending order sorted_array = sorted(array, reverse=True) # Sum the first k elements from the sorted array max_sum = sum(sorted_array[:k]) return max_sum # Example usage: # n, k = 6, 3 # array = [-1, 2, 3, -4, 5, -6] # print(max_sum_k_elements(n, k, array)) # Output: 10"},{"question":"Bob is organizing his book collection and wants to group them by genre and author while also ensuring that the total number of pages in each group does not exceed a given limit. He has a list of books where each book is defined by its genre, author, and number of pages. Bob wants to create groups of books such that each group: 1. Contains books of the same genre by the same author. 2. The total number of pages in the group does not exceed a given maximum limit. Given a list of books and the maximum number of pages allowed in a group, help Bob to determine if it\'s possible to create such groups without violating the constraints or suggest that some books need to be left out. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of books. The next n lines each contain a string indicating the genre, another string indicating the author, and an integer p (1 ≤ p ≤ 1000) indicating the number of pages in that book and are separated by spaces. The last line contains an integer m (1 ≤ m ≤ 109) — the maximum number of pages allowed in a group. Output If it\'s possible to group all the books according to the given constraints, print \\"YES\\" (without the quotes). Otherwise, print \\"NO\\" (without the quotes). Examples Input 5 Fiction Alice 320 Fiction Bob 150 Mystery Alice 200 Fiction Alice 100 Mystery Bob 300 500 Output YES Input 4 Fantasy John 600 Fantasy John 400 SciFi Clark 300 SciFi Clark 700 750 Output NO","solution":"def can_group_books(n, books, max_pages): from collections import defaultdict # Dictionary to store the total pages for each genre-author pair genre_author_pages = defaultdict(int) # Populate the dictionary with the books\' data for book in books: genre, author, pages = book genre_author_pages[(genre, author)] += pages # Check if any genre-author pair exceeds the maximum allowed pages for total_pages in genre_author_pages.values(): if total_pages > max_pages: return \\"NO\\" return \\"YES\\" # Example to demonstrate the function if __name__ == \\"__main__\\": n = 5 books = [ (\\"Fiction\\", \\"Alice\\", 320), (\\"Fiction\\", \\"Bob\\", 150), (\\"Mystery\\", \\"Alice\\", 200), (\\"Fiction\\", \\"Alice\\", 100), (\\"Mystery\\", \\"Bob\\", 300) ] max_pages = 500 print(can_group_books(n, books, max_pages)) # Outputs: YES n = 4 books = [ (\\"Fantasy\\", \\"John\\", 600), (\\"Fantasy\\", \\"John\\", 400), (\\"SciFi\\", \\"Clark\\", 300), (\\"SciFi\\", \\"Clark\\", 700) ] max_pages = 750 print(can_group_books(n, books, max_pages)) # Outputs: NO"},{"question":"You are given two sorted integer arrays, nums1 and nums2, each of size m and n respectively, and they are non-decreasing. Merge nums2 into nums1 as one sorted array. The final sorted array should not be returned by the function, but instead should be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the sorted integers, and the last n elements are set to 0 and should be ignored. nums2 has a length of n. **Instructions:** - Write a function `merge(nums1, m, nums2, n)` that takes four parameters: - `nums1` -> A list of integers with length `m + n` - `m` -> An integer denoting the number of initialized elements in `nums1` - `nums2` -> A list of integers with length `n` - `n` -> An integer denoting the number of elements in `nums2` - The function should merge `nums2` into `nums1`, making `nums1` a sorted array of length `m + n`. **Constraints:** - `0 <= m, n <= 200` - `1 <= nums1[i], nums2[j] <= 10^9` - The arrays `nums1` and `nums2` are sorted in non-decreasing order. **Example:** Input: ``` nums1 = [1,2,3,0,0,0] m = 3 nums2 = [2,5,6] n = 3 ``` Output: ``` [1,2,2,3,5,6] ``` Input: ``` nums1 = [1] m = 1 nums2 = [] n = 0 ``` Output: ``` [1] ``` Note: - Be efficient in both time and space complexity. - You may use constant extra space and a two-pointer approach.","solution":"def merge(nums1, m, nums2, n): Merges nums2 into nums1 as one sorted array in-place. # Initialize pointers for nums1 and nums2 p1, p2 = m - 1, n - 1 # Initialize pointer for merged array p = m + n - 1 # Move elements from nums2 and nums1 into the merged position in nums1 while p1 >= 0 and p2 >= 0: if nums1[p1] > nums2[p2]: nums1[p] = nums1[p1] p1 -= 1 else: nums1[p] = nums2[p2] p2 -= 1 p -= 1 # If there are remaining elements in nums2, move them to nums1 nums1[:p2 + 1] = nums2[:p2 + 1]"},{"question":"A network of R servers needs to efficiently distribute tasks to one another. Each server can process and forward tasks, but the objective is to ensure that tasks are ultimately directed to a set of central processing servers as promptly as possible. These central servers are predefined and cannot be changed. Your task is to determine the minimum time required to direct a task from every server to any one of the central processing servers. input Read the following input from standard input. * The integers R, L, and C are written on the first line, separated by spaces. R represents the number of servers, L represents the number of direct links between servers, and C represents the number of central processing servers. * The following L lines represent link information. Each line contains three integers ui, vi, wi (1 ≤ ui ≤ R, 1 ≤ vi ≤ R, 1 ≤ wi ≤ 1000), representing a direct link from server ui to server vi with a transmission time of wi units. Both ends of the link are different servers. Furthermore, there are no duplicate links between the same pair of servers. * The following C lines represent central processing server information, where each line contains one integer si (1 ≤ si ≤ R), indicating that server si is a central processing server. Each central processing server is listed only once. output To the standard output, output a single integer representing the minimum time required to direct a task from every server to the nearest central processing server. Example Input 4 4 1 1 2 2 2 3 4 3 4 3 4 1 5 3 Output 6","solution":"import heapq import sys from collections import defaultdict def min_time_to_central_servers(R, L, C, links, central_servers): graph = defaultdict(list) # Fill the graph with the link information for ui, vi, wi in links: graph[ui].append((vi, wi)) graph[vi].append((ui, wi)) # Initialize distance to all nodes as infinity distances = {i: sys.maxsize for i in range(1, R + 1)} min_heap = [] # Set the distance to all central servers to 0 for server in central_servers: distances[server] = 0 heapq.heappush(min_heap, (0, server)) # Apply Dijkstra\'s algorithm while min_heap: current_time, server = heapq.heappop(min_heap) if current_time > distances[server]: continue for neighbor, time in graph[server]: new_time = current_time + time if new_time < distances[neighbor]: distances[neighbor] = new_time heapq.heappush(min_heap, (new_time, neighbor)) return max(distances.values()) # Example usage: R = 4 L = 4 C = 1 links = [ (1, 2, 2), (2, 3, 4), (3, 4, 3), (4, 1, 5) ] central_servers = [3] print(min_time_to_central_servers(R, L, C, links, central_servers)) # Output: 6"},{"question":"You are given a grid of size N x M representing a farmland. Each cell (i,j) in the grid contains a number indicating the type of crop grown in that cell. Two cells are considered connected if they share a border (left, right, above, or below) and contain the same type of crop. A connected region is a group of connected cells with the same crop type. Your task is to write a program that finds the largest connected region for any given crop type. For example, consider the following grid: 1 2 2 3 1 1 2 2 3 2 2 3 4 4 4 4 The largest connected region of crop type 2 is 6, which includes the cells (1,2), (1,3), (2,3), (2,4), (3,2), and (3,3). Input - The first line contains two integers N and M (1 ≤ N, M ≤ 1000), representing the dimensions of the grid. - The next N lines each contain M integers representing the types of crops grown in each cell of the grid. Output - Output a single integer representing the size of the largest connected region for any given crop type. Example Input: 4 4 1 2 2 3 1 1 2 2 3 2 2 3 4 4 4 4 Output: 6 Explanation: The largest connected region of crop type 2 in the grid is 6 cells as explained above.","solution":"def largest_connected_region(N, M, grid): def dfs(x, y, crop_type): stack = [(x, y)] size = 0 while stack: cx, cy = stack.pop() if 0 <= cx < N and 0 <= cy < M and grid[cx][cy] == crop_type and (cx, cy) not in visited: visited.add((cx, cy)) size += 1 stack.append((cx-1, cy)) # up stack.append((cx+1, cy)) # down stack.append((cx, cy-1)) # left stack.append((cx, cy+1)) # right return size visited = set() max_size = 0 for i in range(N): for j in range(M): if (i, j) not in visited: current_crop = grid[i][j] region_size = dfs(i, j, current_crop) max_size = max(max_size, region_size) return max_size # Example usage: # N, M = 4, 4 # grid = [ # [1, 2, 2, 3], # [1, 1, 2, 2], # [3, 2, 2, 3], # [4, 4, 4, 4] # ] # print(largest_connected_region(N, M, grid)) # Output: 6"},{"question":"Your task is to write a function that determines whether a container can carry an exact amount of liquid using two jugs of fixed capacities. You are given two jugs with capacities A and B liters respectively, and an infinite water supply. You have to determine if it is possible to measure exactly Z liters using these two jugs. You can perform the following operations: 1. Fill any of the jugs completely. 2. Empty any of the jugs. 3. Pour water from one jug to another until one of the jugs is either full or empty. Return a boolean value: true if it is possible to measure exactly Z liters using the two jugs, and false otherwise. Constraints * 1 ≤ A, B, Z ≤ 10^6 * A and B are positive integers * Z is a non-negative integer Input Input is given from the Standard Input in the following format: A B Z Output Print `true` if it is possible to measure exactly Z liters using the two jugs, otherwise print `false`. Examples Input 3 5 4 Output true Input 2 6 5 Output false Input 1 2 3 Output true","solution":"import math def can_measure_exactly(A, B, Z): Returns True if it is possible to measure exactly Z liters using jugs of A and B capacities, otherwise returns False. # If Z is greater than the sum of both jugs, it\'s impossible to measure it if Z > A + B: return False # If Z is 0, we can always measure it if Z == 0: return True # Use the greatest common divisor (GCD) to check measurability return Z % math.gcd(A, B) == 0"},{"question":"In a small town, there is a high school that offers various courses each semester. Each course has a unique number and each student has an ID. Each student enrolls in several courses and at the end of the semester, they receive a grade for each course they have taken. The school administration wants to analyze the performance of the students and their courses. For this purpose, they decided to implement an algorithm to process the grades of students and provide valuable insights. You are provided with the historical data of students, courses, and grades, and you are required to process this data to answer various queries about the performance of students and courses. Input: - The first line contains four space-separated integers: S (number of students), C (number of courses), G (number of grades recorded), and Q (number of queries). - The next S lines contain the student IDs as strings, one per line. - The next C lines contain the course numbers as strings, one per line. - The next G lines contain a student\'s ID, a course number, and an integer grade (0-100). - The next Q lines contain queries in one of the following two formats: 1. \\"Student Average <student_id>\\": Output the average grade of the specified student across all courses they have taken. 2. \\"Course Average <course_number>\\": Output the average grade for all students who took the specified course. Output: For each query, print the result on a new line. If a student or course has no recorded grades, the average should be considered as 0. Constraints: 1 ≤ S, C, Q ≤ 500 1 ≤ G ≤ 10000 Student IDs and course numbers are unique within their respective categories. SAMPLE INPUT 3 2 5 3 student1 student2 student3 courseA courseB student1 courseA 80 student2 courseA 70 student1 courseB 90 student3 courseA 85 student2 courseB 60 Student Average student1 Course Average courseA Course Average courseB SAMPLE OUTPUT 85 78.33 75","solution":"def process_grades(S, C, G, Q, student_ids, course_numbers, grades, queries): student_grades = {student_id: [] for student_id in student_ids} course_grades = {course_number: [] for course_number in course_numbers} for grade in grades: student_id, course_number, grade_value = grade student_grades[student_id].append(grade_value) course_grades[course_number].append(grade_value) results = [] for query in queries: parts = query.split() if parts[0] == \\"Student\\" and parts[1] == \\"Average\\": student_id = parts[2] grades = student_grades.get(student_id, []) average = sum(grades) / len(grades) if grades else 0 elif parts[0] == \\"Course\\" and parts[1] == \\"Average\\": course_number = parts[2] grades = course_grades.get(course_number, []) average = sum(grades) / len(grades) if grades else 0 results.append(f\\"{average:.2f}\\") return results"},{"question":"Given an integer n, your task is to determine the number of distinct integers that can be formed by permuting the digits of n that are also greater than n. Input The single line contains the integer n (1 ≤ n ≤ 10^9). The integer will not contain any leading zeros. Output Print the required number. Examples Input 123 Output 5 Input 4321 Output 0","solution":"import itertools def count_greater_permutations(n): Returns the number of distinct permutations of the digits of n that are greater than n. n_str = str(n) n_sorted_digits = sorted(n_str) greater_permutations = set() # Generate all permutations of the given digits and count those which are greater than n for perm in itertools.permutations(n_sorted_digits): perm_num = int(\'\'.join(perm)) if perm_num > n: greater_permutations.add(perm_num) return len(greater_permutations)"},{"question":"You are given an nxn grid initially filled with zeros. You have to perform a series of operations on the grid where each operation is described by four integers: `r1`, `c1`, `r2`, `c2` (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ n). This operation increments all cells in the sub-grid defined by the corners (r1, c1) to (r2, c2) by 1. After performing all the operations, return the grid. Input The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 1000). The next `q` lines each contain four integers `r1`, `c1`, `r2`, `c2` describing each operation. Output Print the resulting nxn grid after all operations are applied. Examples Input 3 2 1 1 2 2 2 2 3 3 Output 1 1 0 1 2 1 0 1 1 Input 4 1 1 1 4 4 Output 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1","solution":"def increment_grid(n, q, operations): Increment a sub-grid within an nxn grid based on a list of operations. Args: n : int : the size of the grid. q : int : the number of operations. operations : List of tuples : each tuple contains four integers (r1, c1, r2, c2) Returns: List of Lists : resulting grid after all operations are applied. # Initialize the grid with zeros grid = [[0] * n for _ in range(n)] for r1, c1, r2, c2 in operations: for i in range(r1-1, r2): for j in range(c1-1, c2): grid[i][j] += 1 return grid # Example usage: # n = 3 # q = 2 # operations = [(1, 1, 2, 2), (2, 2, 3, 3)] # print(increment_grid(n, q, operations))"},{"question":"A company has a warehouse where they binned products based on their categories. Each bin can hold products of exactly one category. For efficiency, they occasionally reorganize the warehouse by combining bins. You are given n bins with products such that each bin contains products from exactly one category, represented by an integer. The company can perform the following operation any number of times: choose two bins with products of different categories and merge them into a new bin with products of a third category. Given the initial contents of each of the n bins, determine the number of possible distinct configurations of bins the company can achieve. Two configurations are considered the same if they contain the same numbers for each type of category, regardless of bin order. The result should be computed modulo 1,000,000,007. Input The first line contains an integer n (1 ≤ n ≤ 10^6) — the number of bins in the warehouse. The second line contains n integers representing the category of products in each bin. Category IDs are integers between 1 and n. Output Output the number of distinct possible configurations, modulo 1,000,000,007. Examples Input 5 1 1 2 3 3 Output 3 Input 4 1 2 2 3 Output 6 Input 3 1 1 1 Output 1 Note In the first example, the possible distinct configurations of bins are: [0, 0, 0, 0, 5], [0, 2, 0, 3, 0], and [3, 0, 0, 0, 2]. In the second example, the possible distinct configurations of bins are: [0, 0, 0, 4], [1, 0, 0, 3], [0, 1, 0, 3], [2, 0, 0, 2], [1, 1, 0, 2], [0, 2, 0, 2]. In the third example, no operations can be performed, so the only achievable configuration is the starting one.","solution":"MOD = 1_000_000_007 def bin_configurations(n, categories): from collections import Counter import math # Count the occurrence of each category category_count = Counter(categories) # All bins can be merged into one bin through a series of operations return math.factorial(n) % MOD"},{"question":"A large-scale international company manages its employees through a complex system of hierarchical relationships. The company wants to determine the effectiveness of communication within different teams. To simplify the analysis, they have modeled the relationships as a tree, where each node represents an employee, and each edge represents a direct reporting line between an employee and their direct supervisor. The company provides the following information: - The number of employees (including the CEO) in the company. - A list of reporting relationships, where each relationship is depicted as a pair of integers (u, v) indicating that employee u directly reports to employee v. The goal is to determine the deepest level of hierarchy in the company, starting from the CEO. The level of the CEO is 1, their direct reports are level 2, and so on. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of employees in the company. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) representing that employee u reports directly to employee v. Output Print a single integer — the deepest level of hierarchy within the company. It is guaranteed that the company structure forms a tree. Examples Input 6 1 2 2 3 2 4 3 5 3 6 Output 4 Input 5 1 2 1 3 3 4 3 5 Output 3","solution":"def deepest_hierarchy_level(n, relations): from collections import defaultdict, deque if n == 1: return 1 tree = defaultdict(list) for u, v in relations: tree[v].append(u) tree[u].append(v) # We need to find the CEO. We assume the CEO has the least ID which is 1. root = 1 # Breadth-First Search to find the depth level queue = deque([(root, 1)]) # holds (current_node, current_depth) visited = set([root]) max_depth = 1 while queue: node, depth = queue.popleft() max_depth = max(max_depth, depth) for neighbor in tree[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, depth + 1)) return max_depth"},{"question":"You are given an array of integers `a` of size `n` and `q` queries. For each query, you are given two integers `l_i` and `r_i` (1 ≤ l_i ≤ r_i ≤ n), and you need to find the sum of the subarray `a[l_i...r_i]`. * A subarray `a[l...r]` of an array `a` is the array formed by elements `a_l`, `a_{l+1}`, ..., `a_r`. * The sum of the subarray `a[l_i...r_i]` is the sum of all elements between indices `l_i` and `r_i`, inclusive. Can you efficiently determine the sum for each query? # Input - The first line of input contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. The description of each test case follows: - The first line contains two integers `n` (1 ≤ n ≤ 1000) and `q` (1 ≤ q ≤ 1000) — the size of the array and the number of queries. - The second line contains `n` integers `a_1, a_2, ..., a_n` (−10^9 ≤ a_i ≤ 10^9) — the elements of the array `a`. - The next `q` lines each contain two integers `l_i` and `r_i` (1 ≤ l_i ≤ r_i ≤ n) — the indices for each query. # Output - For each test case, output `q` lines. The i-th line of the output for each test case should contain a single integer, the sum of the subarray `a[l_i...r_i]`. # Example Input ``` 2 5 3 1 2 3 4 5 1 3 2 5 1 5 4 2 -5 8 -2 3 1 2 3 4 ``` Output ``` 6 14 15 3 1 ``` # Note In the first test case: * For the query (1, 3), the subarray is [1, 2, 3] and its sum is 1+2+3=6. * For the query (2, 5), the subarray is [2, 3, 4, 5] and its sum is 2+3+4+5=14. * For the query (1, 5), the subarray is [1, 2, 3, 4, 5] and its sum is 1+2+3+4+5=15. In the second test case: * For the query (1, 2), the subarray is [-5, 8] and its sum is -5+8=3. * For the query (3, 4), the subarray is [-2, 3] and its sum is -2+3=1.","solution":"def subarray_sums(t, test_cases): results = [] for i in range(t): n, q, a, queries = test_cases[i] # Precompute prefix sums prefix_sums = [0] * (n + 1) for j in range(1, n + 1): prefix_sums[j] = prefix_sums[j - 1] + a[j - 1] for l, r in queries: sum_subarray = prefix_sums[r] - prefix_sums[l - 1] results.append(sum_subarray) return results"},{"question":"Alice and Bob are playing a game involving integers. Alice picks a non-negative integer x and Bob picks a non-negative integer y, and they each get points based on their picks according to a specific rule. Alice\'s points are calculated as the number of 1-bits in the binary representation of x, while Bob\'s points are calculated as the number of 1-bits in the binary representation of y. The goal of the game is to determine who has more points, or if they both have the same points. You need to write a program that takes two non-negative integers x and y as input, and outputs \\"Alice\\" if Alice has more points than Bob, \\"Bob\\" if Bob has more points than Alice, or \\"Draw\\" if they have the same number of points. Input The input consists of two non-negative integers x and y (0 ≤ x, y ≤ 109). Output Print \\"Alice\\" if Alice\'s points are greater than Bob\'s points, \\"Bob\\" if Bob\'s points are greater than Alice\'s points, or \\"Draw\\" if they have the same number of points. Examples Input 5 3 Output Draw Input 7 4 Output Alice Input 8 15 Output Bob Note For the first example, the binary representation of 5 is 101, which has two 1-bits, and the binary representation of 3 is 11, which also has two 1-bits. Therefore, the result is \\"Draw\\". For the second example, the binary representation of 7 is 111, which has three 1-bits, and the binary representation of 4 is 100, which has one 1-bit. Therefore, the result is \\"Alice\\". For the third example, the binary representation of 8 is 1000, which has one 1-bit, and the binary representation of 15 is 1111, which has four 1-bits. Therefore, the result is \\"Bob\\".","solution":"def who_wins(x, y): Determines the winner between Alice and Bob based on the number of 1-bits in the binary representation of x and y. Parameters: x (int): Alice\'s chosen non-negative integer. y (int): Bob\'s chosen non-negative integer. Returns: str: \\"Alice\\" if Alice has more points, \\"Bob\\" if Bob has more points, or \\"Draw\\" if they have the same points. alice_points = bin(x).count(\'1\') bob_points = bin(y).count(\'1\') if alice_points > bob_points: return \\"Alice\\" elif bob_points > alice_points: return \\"Bob\\" else: return \\"Draw\\""},{"question":"You are given a number n and an array a of length n. Your task is to determine whether the array can be split into two non-empty parts such that the sum of the elements in both parts are equal, or output that it is not possible. You are only allowed to split the array between two elements, meaning the split point must be at index i where 1 ≤ i < n. Input First line contains one integer n (2 ≤ n ≤ 100 000) — the number of elements in the array. Second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Output If it is possible to split the array into two non-empty parts with equal sums, output «Yes» (without the quotes). Otherwise, output «No» (without the quotes). Examples Input 6 1 2 3 3 2 1 Output Yes Input 5 1 2 3 4 5 Output No Input 4 2 -2 3 -3 Output Yes","solution":"def can_split_array(n, a): Determines if the array can be split into two non-empty parts such that the sum of elements in both parts are equal. total_sum = sum(a) if total_sum % 2 != 0: return \\"No\\" half_sum = total_sum // 2 current_sum = 0 for i in range(n - 1): current_sum += a[i] if current_sum == half_sum: return \\"Yes\\" return \\"No\\""},{"question":"A company has employee records stored in a text file. Each record contains the employee\'s full name and their email address, separated by a comma. Multiple records are separated by newline characters. Your task is to extract and print the employee names in alphabetical order. Constraints * The employee\'s full name contains only alphabetic characters and spaces. * The email address is guaranteed to be a valid email. * You can assume that there are no duplicate names. Input Input is given from Standard Input in the following format: ``` employee1_name,employee1_email employee2_name,employee2_email ... employeeN_name,employeeN_email ``` Output Print the employee names in alphabetical order, each on a new line. Examples Input ``` John Smith,john.smith@example.com Jane Doe,jane.doe@example.com Alice Brown,alice.brown@example.com ``` Output ``` Alice Brown Jane Doe John Smith ``` Input ``` Charlie Brown,charlie.brown@example.com David Tennant,david.tennant@example.com Amy Pond,amy.pond@example.com ``` Output ``` Amy Pond Charlie Brown David Tennant ```","solution":"def extract_employee_names(records): Extract employee names from records and sort them alphabetically. Args: records (str): The string containing employee records. Returns: List[str]: The list of employee names sorted alphabetically. if not records.strip(): return [] employees = records.strip().split(\'n\') names = [employee.split(\',\')[0].strip() for employee in employees] names.sort() return names def main(): import sys input = sys.stdin.read() names = extract_employee_names(input) for name in names: print(name) # Example usage inside main function: # main()"},{"question":"There\'s a vending machine that contains `N` items. Each item has a price associated with it. The vending machine only accepts coins of 1 unit denominomations. A user has a total amount of M units to spend and wants to maximize the number of items they can purchase without exceeding the amount M. Write a program that will take the number of items N, the prices of each item, and the total amount M as input, and output the maximum number of items the user can purchase. Input The first line contains two space-separated integers N and M, where N denotes the number of items, and M represents the total amount of units the user has to spend. The second line contains N space-separated integers where each integer represents the price of an item. Output Print a single integer denoting the maximum number of items the user can purchase with the amount M. Constraints 1 ≤ N ≤ 100 1 ≤ M ≤ 1000 1 ≤ price of each item ≤ 100 SAMPLE INPUT 5 10 2 5 3 8 4 SAMPLE OUTPUT 3 Explanation The user has 10 units to spend and there are 5 items with prices 2, 5, 3, 8, and 4 units respectively. The user can purchase items with prices 2, 3, and 4 units, which sums up to 9 units (2+3+4=9). Therefore, the maximum number of items the user can purchase is 3.","solution":"def max_items_to_purchase(N, M, prices): Determines the maximum number of items that can be purchased without exceeding the amount M. # Sort the prices list to prioritize cheaper items prices.sort() total_spent = 0 items_purchased = 0 # Loop through the sorted prices for price in prices: if total_spent + price <= M: total_spent += price items_purchased += 1 else: break return items_purchased # Sample usage if __name__ == \'__main__\': import sys input = sys.stdin.read().strip().split(\'n\') N, M = map(int, input[0].split()) prices = list(map(int, input[1].split())) result = max_items_to_purchase(N, M, prices) print(result)"},{"question":"Anna loves to play with sequences of integers. She recently learned about arithmetic sequences and wants to test if a given sequence is arithmetic. An arithmetic sequence is a sequence of numbers in which the difference between consecutive terms is constant. Given a sequence of integers, determine whether it is an arithmetic sequence. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the sequence. The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the sequence. Output Print \\"YES\\" if the sequence is an arithmetic sequence and \\"NO\\" otherwise. Examples Input 5 2 4 6 8 10 Output YES Input 4 7 2 5 8 Output NO Note In the first test case, the difference between consecutive terms is 2, which is constant throughout the sequence, thus it is an arithmetic sequence. In the second test case, the differences are not consistent, hence it is not an arithmetic sequence.","solution":"def is_arithmetic_sequence(n, sequence): Determines if the given sequence of integers is an arithmetic sequence. Args: n (int): Number of elements in the sequence. sequence (list of int): The elements of the sequence. Returns: str: \\"YES\\" if the sequence is an arithmetic sequence, \\"NO\\" otherwise. if n <= 1: return \\"YES\\" common_difference = sequence[1] - sequence[0] for i in range(2, n): if sequence[i] - sequence[i - 1] != common_difference: return \\"NO\\" return \\"YES\\""},{"question":"A robot is navigating a rectangular grid of size `m x n`, where each cell has a corresponding number indicating the amount of energy required to move into that cell. The robot is initially positioned at the top-left corner (0, 0) of the grid and wants to reach the bottom-right corner (m-1, n-1). The robot can only move down or right at any point in time. We need to calculate the minimum energy required for the robot to reach the bottom-right corner from the top-left corner, given the energy levels for each cell in the grid. Input - The first line of the input contains two integers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the grid. - The next m lines each contain n integers eij (0 ≤ eij ≤ 10000) — the energy required to move into the cell at row i and column j. Output - Print a single integer — the minimum energy required to reach the bottom-right corner. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Note The grid given in the example input can be visualized as: ``` 1 3 1 1 5 1 4 2 1 ``` The path with the minimum energy required would be: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) with a total energy of 7 (1 + 3 + 1 + 1 + 1).","solution":"def min_energy(grid): Calculate the minimum energy required to reach the bottom-right corner from the top-left corner. :param grid: List of lists representing the energy grid. :return: Minimum energy required to reach bottom-right corner. m = len(grid) n = len(grid[0]) # Create a dp array of the same dimensions as the grid dp = [[0] * n for _ in range(m)] # Initialize the top-left corner (start point) dp[0][0] = grid[0][0] # Initialize the first row (only can move right) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column (only can move down) for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"Nina is a painter who loves creating geometric patterns. One day she decided to paint an n x m grid where each cell should either remain white or be painted black. Nina has a limited amount of black paint and wants to create as many contiguous black regions as possible. A contiguous region is defined as one or more black cells connected horizontally or vertically. Given the initial state of the grid and the number of black paint units she has, determine the maximum number of contiguous black regions Nina can achieve. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The next n lines each contain m characters representing the initial state of the grid. A character \'0\' represents a white cell, and a character \'1\' represents a black cell. The last line contains a single integer k (0 ≤ k ≤ n * m) — the number of black paint units Nina has. Output Output a single integer — the maximum number of contiguous black regions Nina can create. Examples Input 3 3 000 000 000 3 Output 3 Input 4 4 0000 0000 0000 0000 5 Output 5 Input 3 3 101 010 101 0 Output 5 Note Example 1 Initial grid: ``` 000 000 000 ``` With 3 paint units, Nina can paint three separate cells, forming 3 contiguous black regions. Example 2 Initial grid: ``` 0000 0000 0000 0000 ``` With 5 paint units, Nina can paint five separate cells, forming 5 contiguous black regions. Example 3 Initial grid: ``` 101 010 101 ``` No paint units mean the maximum contiguous black regions are those already present in the grid, which is 5.","solution":"def max_contiguous_regions(n, m, grid, k): Calculates the maximum number of contiguous black regions using given units of black paint. Parameters: n (int): Number of rows in the grid m (int): Number of columns in the grid grid (list of str): Initial state of the grid k (int): Number of black paint units Returns: int: Maximum number of contiguous black regions def get_initial_regions(grid): visited = [[False for _ in range(m)] for _ in range(n)] regions = 0 def dfs(x, y): stack = [(x, y)] while stack: r, c = stack.pop() for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] == \'1\': visited[nr][nc] = True stack.append((nr, nc)) for i in range(n): for j in range(m): if grid[i][j] == \'1\' and not visited[i][j]: visited[i][j] = True dfs(i, j) regions += 1 return regions initial_regions = get_initial_regions(grid) return initial_regions + k"},{"question":"You are given an unlimited supply of coins of the following denominations: 1, 3, and 4 units. You need to determine the minimum number of coins required to produce a sum of money `S`. Input: The input contains multiple test cases. Each test case consists of a single integer `S` (1 ≤ S ≤ 1000000). The end of input is indicated by `S = 0`. Output: For each test case, print the minimum number of coins required to make the sum `S`. If it\'s not possible to make the sum `S`, output `-1`. Example: Input: 6 7 2 0 Output: 2 2 2 Explanation: For the first test case, the best way to form 6 units is using two 3 unit coins. For the second test case, the best way to form 7 units is using one 3 unit coin and one 4 unit coin. For the third test case, the best way to form 2 units is using two 1 unit coins.","solution":"def min_coins(coins, S): Returns the minimum number of coins required to produce the sum S using the given denominations. If it is not possible to produce the sum S, returns -1. # Initialize a list to store the minimum coins required for each amount dp = [float(\'inf\')] * (S + 1) dp[0] = 0 # No coins are needed to produce 0 sum # Iterate through each amount from 1 to S for i in range(1, S + 1): for coin in coins: if i - coin >= 0: # If the coin can be used dp[i] = min(dp[i], dp[i - coin] + 1) # If the number of coins for S is still infinity, it means it\'s not possible to form S return dp[S] if dp[S] != float(\'inf\') else -1 def handle_multiple_cases(inputs): coins = [1, 3, 4] results = [] for S in inputs: if S == 0: break results.append(min_coins(coins, S)) return results"},{"question":"You are given a list of unique integers and a target integer. Your task is to determine if there are any two distinct integers in the list that add up to the target integer. Input The first line of the input contains two space-separated integers n and t (1 ≤ n ≤ 10^5, -10^9 ≤ t ≤ 10^9), where n is the number of integers in the list, and t is the target integer. The second line contains n space-separated integers representing the list of unique integers, each in the range of [-10^9, 10^9]. Output Print \\"YES\\" if there are two distinct integers in the list that add up to the target integer. Otherwise, print \\"NO\\". Examples Input 5 9 2 7 11 15 1 Output YES Input 4 8 1 2 3 9 Output NO Note In the first example, the integers 2 and 7 add up to 9, so the output is \\"YES\\". In the second example, there are no two integers that add up to 8, so the output is \\"NO\\".","solution":"def has_two_sum(nums, target): Determines if there are any two distinct integers in the list that add up to the target integer. Args: nums: List of unique integers. target: The target sum integer. Returns: \\"YES\\" if there are two distinct integers that add up to the target, otherwise \\"NO\\". num_set = set() for num in nums: complement = target - num if complement in num_set: return \\"YES\\" num_set.add(num) return \\"NO\\" def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) t = int(data[1]) nums = list(map(int, data[2:2+n])) result = has_two_sum(nums, t) print(result)"},{"question":"Write a program that simulates a simplified version of the \\"FizzBuzz\\" game with custom rules for determining the output based on divisors and corresponding words. You need to read a series of inputs, where each input defines a pair of integers followed by a series of rules. Input The input starts with a single integer n, the number of rules (1 ≤ n ≤ 10). Each rule is defined by an integer divisor and a corresponding word. After the rules, there is a separate line indicating two integers, m and k (1 ≤ m ≤ k ≤ 100). The input ends with a line containing \\"0 0\\". Output For each input block, print the corresponding output for each integer from m to k, substituting numbers divisible by the specified divisors with the corresponding words. For example, if a number is divisible by multiple divisors, concatenate the corresponding words in the order the rules were provided. Example Input 2 3 Fizz 5 Buzz 1 15 0 0 Output 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz","solution":"def fizz_buzz_game(rules, m, k): Simulates the FizzBuzz game with custom rules. :param rules: A list of tuples containing (divisor, word) pairs. :param m: The starting number. :param k: The ending number. :return: A list of strings representing the FizzBuzz results from m to k. result = [] for i in range(m, k+1): output = \'\' for divisor, word in rules: if i % divisor == 0: output += word if output == \'\': output = str(i) result.append(output) return result def parse_input(input_str): lines = input_str.strip().split(\'n\') rule_count = int(lines[0]) rules = [] for i in range(1, rule_count + 1): parts = lines[i].split() divisor = int(parts[0]) word = parts[1] rules.append((divisor, word)) m, k = map(int, lines[rule_count + 1].split()) return rules, m, k"},{"question":"You are given a string consisting of lowercase letters \'a\' and \'b\'. You want to find the minimum number of operations required to make all characters of the string the same. In one operation, you can choose one of the following: 1. Remove a character from the string. 2. Replace a character with any other lowercase letter. Input The first line contains a single integer n — the length of the string (1 ≤ n ≤ 100). The second line contains a string s consisting of \'a\' and \'b\' only. Output Output a single integer — the minimum number of operations required to make all characters in the string the same. Examples Input 5 ababa Output 2 Input 3 bba Output 1 Input 4 aaaa Output 0 Note In the first example, you can either: - Remove the two \'b\'s to get \\"aaa\\". - Replace the two \'b\'s with \'a\'s to get \\"aaaa\\". In the second example, you can either: - Remove one \'a\' to get \\"bb\\". - Replace one \'a\' with \'b\' to get \\"bbb\\". In the third example, the string is already uniform, so no operations are needed.","solution":"def min_operations_to_uniform_string(n, s): Returns the minimum number of operations required to make all characters in the string the same. count_a = s.count(\'a\') count_b = s.count(\'b\') # We can either convert all to \'a\' or all to \'b\' return min(count_a, count_b)"},{"question":"Given a list of integers, determine whether there exists a pair of distinct indices ( i ) and ( j ) such that the absolute difference between the elements at these indices is equal to a given integer ( K ). Constraints * The length of the list is between 1 and 10^5. * Each element in the list is an integer between -10^9 and 10^9, inclusive. * ( K ) is an integer between 0 and 10^9, inclusive. Input Input is given from Standard Input in the following format: ``` n K a_1 a_2 ... a_n ``` Where: * ( n ) - the number of elements in the list. * ( K ) - the target absolute difference. * ( a_1, a_2, ldots, a_n ) - the elements of the list. Output Print `Yes` if there exists such a pair ( i ) and ( j ) with the specified absolute difference; otherwise, print `No`. Examples Input ``` 5 3 1 5 3 4 2 ``` Output ``` Yes ``` Input ``` 6 8 10 20 30 40 50 60 ``` Output ``` No ``` Input ``` 3 0 1 1 1 ``` Output ``` Yes ```","solution":"def has_pair_with_difference(nums, K): Returns \'Yes\' if there exists a pair of indices (i, j) such that the absolute difference between the elements at these indices equals K, otherwise returns \'No\'. # Using a set to keep track of the numbers we have seen so far seen = set() for num in nums: if (num + K) in seen or (num - K) in seen: return \\"Yes\\" seen.add(num) return \\"No\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read() data = input.split() n = int(data[0]) K = int(data[1]) nums = list(map(int, data[2:])) print(has_pair_with_difference(nums, K))"},{"question":"You are given an array of integers and a list of queries. Each query is defined by two integers l and r, representing a subarray. For each query, you need to determine the length of the longest subarray within the given range [l, r] that has unique elements. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the range for a query. Output For each query, print the length of the longest subarray within the range [l, r] that contains unique elements. Example Input 8 3 4 3 5 2 4 6 3 2 1 5 2 7 3 8 Output 4 6 6 Explanation - For the first query [1, 5], the subarray is [4, 3, 5, 2, 4] and the longest subarray with unique elements is [4, 3, 5, 2], thus the output is 4. - For the second query [2, 7], the subarray is [3, 5, 2, 4, 6, 3] and the longest subarray with unique elements is [3, 5, 2, 4, 6], thus the output is 5. - For the third query [3, 8], the subarray is [5, 2, 4, 6, 3, 2] and the longest subarray with unique elements is [5, 2, 4, 6, 3], thus the output is 5.","solution":"def longest_unique_subarray(a, queries): For each query, determine the length of the longest subarray with unique elements in the range [l, r]. Parameters: a: List[int] - the array of integers queries: List[Tuple[int, int]] - list of queries, each query is a tuple (l, r) Returns: List[int] - list of results for each query results = [] for l, r in queries: seen = {} max_len = 0 curr_len = 0 start = 0 for i in range(l-1, r): if a[i] in seen and seen[a[i]] >= start: start = seen[a[i]] + 1 curr_len = i - start + 1 else: curr_len += 1 seen[a[i]] = i max_len = max(max_len, curr_len) results.append(max_len) return results"},{"question":"You are managing an e-commerce platform and you want to implement a discount policy for bulk purchases. The policy offers a discount for every purchase of m items or more. You need to determine the maximum possible discount a customer can get based on the items they choose. Each item on the platform may have a different price, and there could be multiple items available for bulk purchase. The customer’s cart can contain multiple instances of the same item. Write a function that takes an integer m (the minimum number of items required for a discount) and a list of integers representing the prices of the items in the cart. The function should return the maximum possible discount the customer can get. The discount for each bulk purchase is calculated as the sum of the prices of the m most expensive items in that bulk purchase. # Input - An integer `m` (1 ≤ m ≤ 100), the minimum number of items required for a discount. - A list of integers `prices` (1 ≤ len(prices) ≤ 1000, 1 ≤ prices[i] ≤ 1000), where each value represents the price of an item. # Output - Return an integer representing the total discount the customer gets. # Example Input ``` 3 [10, 20, 30, 40, 50, 60] ``` Output ``` 150 ``` Explanation: The function should first sort the list in descending order: `[60, 50, 40, 30, 20, 10]`. Then, it should sum the most expensive 3 items in groups of three: - First group: [60, 50, 40] => 150 (this is the maximum discount the customer can get). # Note If the total number of items in the cart is less than `m`, the discount should be 0. If the total number of items is not a multiple of `m`, only complete groups of `m` items should be considered for the discount.","solution":"def maximum_discount(m, prices): Returns the maximum possible discount based on bulk purchase policy. :param m: int - the minimum number of items required for a discount :param prices: list of integers - prices of items in the cart :return: int - maximum discount if len(prices) < m: return 0 prices.sort(reverse=True) max_discount = sum(prices[i] for i in range(m)) return max_discount"},{"question":"You are given a string of length N that consists of lowercase letters. You can select any number of contiguous characters from the string to transform into another character. The goal is to determine the minimum number of such transformations needed such that all characters in the string are identical. Input: - The first line contains an integer T, the number of test cases (1 ≤ T ≤ 50). - Each of the next T lines contains a string of length N (1 ≤ N ≤ 100). Output: - For each test case, print the minimum number of transformations required. SAMPLE INPUT: 2 aabb abc SAMPLE OUTPUT: 2 2","solution":"def min_transformations_to_identical_characters(strings): Returns a list of minimum number of transformations needed to make each string in the input list consist of identical characters. def min_transforms_for_string(s): from collections import Counter # Frequency count of characters in the string frequency = Counter(s) # The number of transformations needed is the total length of the string # minus the count of the most frequent character max_freq = max(frequency.values()) return len(s) - max_freq result = [] for s in strings: result.append(min_transforms_for_string(s)) return result"},{"question":"You are given a sequence of integers where the order of elements is significant. Determine if it\'s possible to reorder the sequence to form a permutation of numbers from 1 to n such that the absolute difference between any two consecutive numbers is at most one. Input The first line contains one integer t (1 ≤ t ≤ 10^5) — the number of test cases. Each test case is given in two lines. The first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the sequence. It is guaranteed that the sum of n over all test cases does not exceed 10^6. Output For each test case, print \\"YES\\" if it is possible to reorder the sequence to form a permutation of numbers from 1 to n such that the absolute difference between any two consecutive numbers is at most one. Otherwise, print \\"NO\\". Example Input 3 6 3 1 4 2 6 5 3 1 3 2 4 1 2 3 5 Output YES YES NO","solution":"def is_possible_permutation(t, test_cases): results = [] for i in range(t): n, sequence = test_cases[i] sequence.sort() possible = True for j in range(1, n): if abs(sequence[j] - sequence[j - 1]) > 1: possible = False break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"There are N people standing in a circle, and they need to be arranged into M groups where each group must have at least one person. The people are numbered from 1 to N in a clockwise direction. You are given the current sequence of people in the circle. Output the sequence of people in each group such that the following conditions are met: 1. Each group must have at least one person. 2. The people in groups should maintain their relative order in the original circle. 3. The grouping should be done in such a way that the minimum number of people need to move from their current position to achieve the required grouping. Constraints * 1 leq N leq 10^5 * 1 leq M leq N Input Input is given from Standard Input in the following format: N M p_1 p_2 ... p_N Output Print M lines. Each line contains the sequence of people in each group. Example Input 6 2 1 2 3 4 5 6 Output 1 2 3 4 5 6","solution":"def group_people(N, M, people): Groups people into M groups maintaining their relative order in the original circle. # Calculate the base size of each group base_group_size = N // M extra = N % M groups = [] start = 0 for i in range(M): current_group_size = base_group_size + (1 if i < extra else 0) groups.append(people[start:start + current_group_size]) start += current_group_size return groups"},{"question":"A spaceship is stuck in a galaxy represented by an N x M grid of cells. Each cell in the grid can either be empty (denoted by \'.\') or contain a star (denoted by \'*\'). The spaceship can move to any empty neighboring cell that shares a side with its current cell. The spaceship needs to navigate from its starting position (S_x, S_y) to its target position (T_x, T_y). Help the spaceship find the shortest path from the start to the target, or determine if it\'s not possible to reach the target. Constraints * 1 ≤ N, M ≤ 1000 * 0 ≤ S_x, S_y, T_x, T_y < N * The starting and target positions will always be empty cells. Input Input is given from standard input in the following format: N M S_x S_y T_x T_y grid The grid is given as N lines of M characters each. Each character is either \'.\' or \'*\'. Output Print the minimum number of steps needed for the spaceship to travel from the start to the target. If the target is unreachable, print -1. Examples Input 5 5 0 0 4 4 ..... .***. ..... .***. ..... Output 8 Input 3 3 0 0 2 2 .** .** ... Output 4","solution":"from collections import deque def shortest_path_in_grid(n, m, sx, sy, tx, ty, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy, 0)]) # (x, y, steps) visited = set((sx, sy)) while queue: x, y, steps = queue.popleft() if (x, y) == (tx, ty): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are given two strings, `s` and `t`, each consisting of lowercase English letters. You want to determine the number of distinct subsequences of `s` that exist and are equal to `t`. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. Write a program that calculates the number of distinct subsequences of `s` which equals the string `t`. Input The first line of input contains a single integer n (1 ≤ n ≤ 1,000) — the length of string `s`. The second line contains the string `s`. The third line contains the string `t`. The length of `t` is between 1 and 1000. Output Output a single integer — the number of distinct subsequences of `s` which are equal to `t`. Examples Input 7 rabbbit rabbit Output 3 Input 6 babgbag bag Output 5 Note In the first example, the distinct subsequences of `s` which equal `t` are: - \\"rabb**b**it\\" - \\"rab**b**bit\\" - \\"ra**b**bbit\\" In the second example, the distinct subsequences of `s` which equal `t` are: - \\"ba**b**g**b**ag\\" - \\"b**a**bg**bag\\" - \\"b**a**b**g**bag\\" - \\"ba**g**b**bag\\" - \\"bab**g**bag\\"","solution":"def numDistinct(s, t): Returns the number of distinct subsequences of s which equals the string t. n, m = len(s), len(t) # Create a DP table with (m+1) rows and (n+1) columns dp = [[0] * (n + 1) for _ in range(m + 1)] # Base case: An empty t (of length 0) is a subsequence of any string s for j in range(n + 1): dp[0][j] = 1 # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if t[i - 1] == s[j - 1]: # If the characters match, add the results of two cases: # 1. Including s[j-1] in the subsequence # 2. Excluding s[j-1] from the subsequence dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1] else: # If the characters don\'t match, skip s[j-1] dp[i][j] = dp[i][j - 1] return dp[m][n]"},{"question":"Dima has a two-dimensional grid with dimensions n x m. The grid contains cells, each of which can be either empty or blocked. Dima wants to find the number of distinct paths that exist to travel from the top-left corner (1, 1) to the bottom-right corner (n, m), such that he can only move right or down at each step. Given the grid dimensions and the blockage information, help Dima determine the total number of distinct paths. The answer can be large, so you should return the answer modulo k. Input The first line contains three integers n, m (1 ≤ n, m ≤ 50) and k (2 ≤ k ≤ 109 + 7) – the dimensions of the grid and the modulus k. The next n lines contain m integers each – the grid itself. Each cell in the grid either contains a 0, indicating that the cell is empty, or a 1, indicating that the cell is blocked. Output Print the number of distinct paths from the top-left to the bottom-right of the grid modulo k. If no such path exists, print 0. Examples Input 3 3 1000000007 0 0 0 0 1 0 0 0 0 Output 2 Input 2 2 10 0 1 0 0 Output 1 Note In the first example, there are exactly 2 distinct paths: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) In the second example, there is only 1 path: (1, 1) -> (2, 1) -> (2, 2)","solution":"def num_paths(grid, n, m, k): Returns the number of distinct paths from the top-left corner to the bottom-right corner of a grid with blockage information taken into account, with the result modulo k. if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= k return dp[n-1][m-1]"},{"question":"A group of friends is playing a board game that involves moving around a circular track. The track consists of `N` spaces numbered from 0 to N-1. Each friend starts at a specific position on the track, and on each turn, they roll a six-sided die to determine how many spaces to move forward. If they move past the last space, they loop back around to the beginning of the track. Write a program to determine the position of each friend after a given number of turns. Input The input consists of: - An integer `N` (2 ≤ N ≤ 1,000,000), the number of spaces on the track. - An integer `M` (1 ≤ M ≤ 100), the number of friends. - A list of `M` integers, each representing the initial positions of the friends on the track. - A list of `M` integers, each representing the total number of spaces each friend will move. Output Output a single line containing `M` integers, the final positions of the friends on the track after moving. Example Input ``` 12 3 0 4 7 5 10 15 ``` Output ``` 5 2 10 ``` Explanation - The first friend moves from position 0 to position 5 (0 + 5). - The second friend moves from position 4 to position 2 (4 + 10 % 12). - The third friend moves from position 7 to position 10 (7 + 15 % 12).","solution":"def final_positions(N, M, initial_positions, move_counts): Calculates the final positions of friends after moving a given number of spaces on a circular track. Args: N (int): Number of spaces on the track. M (int): Number of friends. initial_positions (list of int): Initial positions of the friends. move_counts (list of int): Number of spaces each friend will move. Returns: list: Final positions of the friends on the track. final_positions = [] for i in range(M): final_position = (initial_positions[i] + move_counts[i]) % N final_positions.append(final_position) return final_positions"},{"question":"You are given a string S consisting of lowercase English letters. You need to check if it is possible to rearrange the characters in S such that no two adjacent characters are the same. Write a function `canRearrange` that takes in the string `S` and returns `True` if it is possible to rearrange the characters to meet the condition, and `False` otherwise. Constraints * 1 leq |S| leq 100000 * S consists of lowercase English letters only. Input Input is given from Standard Input in the following format: S Output Print `True` if it is possible to rearrange the characters of S such that no two adjacent characters are the same. Otherwise, print `False`. Examples Input aab Output True Input aaab Output False Input abcdef Output True","solution":"from collections import Counter def canRearrange(S): Checks if it\'s possible to rearrange the characters in S such that no two adjacent characters are the same. # Count the frequency of each character char_count = Counter(S) # Find the maximum frequency max_freq = max(char_count.values()) # If the frequency of the most common character is more than half of the string length (rounded up), # then it\'s not possible to rearrange the string such that no two adjacent characters are the same. if max_freq > (len(S) + 1) // 2: return False return True"},{"question":"In the game \\"Mystical Land,\\" players collect energy points from various sources while traveling between towns. The energy points collected from a specific source are represented by an integer e, where (1 ≤ e ≤ 109). The journey path is divided into a number of segments, and each segment has an associated energy point value, represented by an array a of length n. Players can receive several types of commands during the journey: 1. Command \\"1 l r k\\": This command instructs the player to increment the energy points of all segments between towns l and r by k. 2. Command \\"2 l r\\": This command requires the player to find and return the maximum energy point value in the segment between towns l and r. Write a program to help players efficiently handle these commands. Input The first line contains two integers n and m (1 ≤ n, m ≤ 300000). The second line contains n integers a1, a2, ..., an representing the initial energy points of each segment. Then, m lines follow describing the commands. Each command is either in the format \\"1 l r k\\" for updates or \\"2 l r\\" for queries (1 ≤ l ≤ r ≤ n). Output For each \\"2 l r\\" command, output the maximum energy point value in the specified segment. Example Input 6 5 5 3 8 6 2 7 2 1 4 1 2 5 3 2 1 6 1 3 3 2 2 1 4 Output 8 11 10 Explanation Initial array: [5, 3, 8, 6, 2, 7] After 1st command \\"2 1 4\\": max(5, 3, 8, 6) = 8 After 2nd command \\"1 2 5 3\\": [5, 6, 11, 9, 5, 7] After 3rd command \\"2 1 6\\": max(5, 6, 11, 9, 5, 7) = 11 After 4th command \\"1 3 3 2\\": [5, 6, 13, 11, 5, 7] After 5th command \\"2 1 4\\": max(5, 6, 13, 11) = 13","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (4 * self.n) self.lazy = [0] * (4 * self.n) self.build(data, 0, 0, self.n - 1) def build(self, data, node, start, end): if start == end: self.tree[node] = data[start] else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 self.build(data, left_child, start, mid) self.build(data, right_child, mid + 1, end) self.tree[node] = max(self.tree[left_child], self.tree[right_child]) def update_range(self, l, r, val): self._update_range(0, 0, self.n - 1, l, r, val) def _update_range(self, node, start, end, l, r, val): if self.lazy[node] != 0: self.tree[node] += self.lazy[node] if start != end: self.lazy[2 * node + 1] += self.lazy[node] self.lazy[2 * node + 2] += self.lazy[node] self.lazy[node] = 0 if start > end or start > r or end < l: return if start >= l and end <= r: self.tree[node] += val if start != end: self.lazy[2 * node + 1] += val self.lazy[2 * node + 2] += val return mid = (start + end) // 2 self._update_range(2 * node + 1, start, mid, l, r, val) self._update_range(2 * node + 2, mid + 1, end, l, r, val) self.tree[node] = max(self.tree[2 * node + 1], self.tree[2 * node + 2]) def query_range(self, l, r): return self._query_range(0, 0, self.n - 1, l, r) def _query_range(self, node, start, end, l, r): if start > end or start > r or end < l: return float(\'-inf\') if self.lazy[node] != 0: self.tree[node] += self.lazy[node] if start != end: self.lazy[2 * node + 1] += self.lazy[node] self.lazy[2 * node + 2] += self.lazy[node] self.lazy[node] = 0 if start >= l and end <= r: return self.tree[node] mid = (start + end) // 2 left_query = self._query_range(2 * node + 1, start, mid, l, r) right_query = self._query_range(2 * node + 2, mid + 1, end, l, r) return max(left_query, right_query) def mystical_land(n, m, a, commands): segment_tree = SegmentTree(a) result = [] for command in commands: if command[0] == 1: _, l, r, k = command segment_tree.update_range(l - 1, r - 1, k) elif command[0] == 2: _, l, r = command result.append(segment_tree.query_range(l - 1, r - 1)) return result"},{"question":"The mathematician is working on some number sequences, and one day they came across an interesting sequence called Fibonacci. They are curious to find out if a given number is part of the Fibonacci sequence. Your task is to write a function that determines if a given number is a Fibonacci number. In the Fibonacci sequence, each number is the sum of the two preceding ones, usually starting with 0 and 1. Input Format A single integer N. Output Format Print \\"Yes\\" if the given number is a Fibonacci number. Otherwise, print \\"No\\". Constraints 0 ≤ N ≤ 10^10 SAMPLE INPUT 21 SAMPLE OUTPUT Yes SAMPLE INPUT 22 SAMPLE OUTPUT No","solution":"def is_fibonacci(n): Returns \'Yes\' if the given number is a Fibonacci number, otherwise returns \'No\'. if n < 0: return \\"No\\" a, b = 0, 1 while a <= n: if a == n: return \\"Yes\\" a, b = b, a + b return \\"No\\""},{"question":"You are given a 5x5 grid. You play a game in which you have a sequence of 3x1 or 1x3 tiles. Your task is to place all the tiles from the given sequence into the grid sequentially. After placing each tile, if a row or column is completely filled, you should delete it (rows and columns are deleted independently). It is guaranteed that the sequence of tiles will always fit into the grid without overlapping, given the deletion of fully occupied rows or columns. Input The only line contains a string `t` consisting of zeroes and ones (1 ≤ |t| ≤ 1000). Zero describes a vertical 3x1 tile, and one describes a horizontal 1x3 tile. Output Output |t| lines — for each tile, you should output two positive integers r and c (1 ≤ r, c ≤ 5), representing the topmost row and leftmost column where the tile is placed. If there exist multiple solutions, print any of them. Example Input 101 Output 1 1 2 1 1 2 Note In the example given: - The first tile is placed horizontally filling positions: (1,1), (1,2), (1,3) - The second tile is placed vertically filling positions: (1,1), (2,1), (3,1) - The third tile is placed horizontally filling positions: (1,2), (1,3), (1,4) After placing the first tile, the top row is filled and gets deleted. After placing the second tile, the first column is filled and gets deleted. After placing the third tile, there is no row or column fully filled to be deleted.","solution":"def place_tiles(sequence): horizontal_positions = [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3), (4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3)] vertical_positions = [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)] horizontal_index = 0 vertical_index = 0 result = [] for tile in sequence: if tile == \'0\': r, c = vertical_positions[vertical_index] result.append((r, c)) vertical_index = (vertical_index + 1) % len(vertical_positions) elif tile == \'1\': r, c = horizontal_positions[horizontal_index] result.append((r, c)) horizontal_index = (horizontal_index + 1) % len(horizontal_positions) return result # Example Usage sequence = \\"101\\" print(place_tiles(sequence))"},{"question":"Write a program to simulate a queue management system for a hospital. The hospital has multiple counters, and each counter has its own queue of patients. The patients are represented by their names. Patients arrive at one of the counters and are added to the end of the queue. Additionally, there is a prioritized queue where patients with urgent needs can be added to the front of the queue. The management system needs to support the following operations: 1. **Add a Patient**: Add a patient to the end of the queue of a specified counter. 2. **Add Urgent Patient**: Add an urgent patient to the front of the queue of a specified counter. 3. **Serve Patient**: Serve the patient at the front of the queue at the specified counter, removing them from the queue. 4. **Print Queue**: Print the current queue of a specified counter. Input: - The first line contains a single integer `T` (1 ≤ T ≤ 10^5) - the number of operations. - The next `T` lines describe the operations: - `ADD name counter` - add the patient with the given name to the end of the queue of the specified counter. - `URGENT name counter` - add the urgent patient with the given name to the front of the queue of the specified counter. - `SERVE counter` - serve the patient at the front of the queue of the specified counter. - `PRINT counter` - print the current queue of the specified counter. Constraints: - 1 ≤ name.length ≤ 20 - 1 ≤ counter ≤ 10^3 - 1 ≤ number of patients in any queue ≤ 10^5 Output: For each `PRINT` operation, output the current queue at the specified counter as a space-separated string of patient names. If the queue is empty, output \\"EMPTY\\". Example: Input: ``` 10 ADD Alice 1 ADD Bob 1 URGENT Charlie 1 PRINT 1 SERVE 1 PRINT 1 ADD David 2 PRINT 2 SERVE 2 PRINT 2 ``` Output: ``` Charlie Bob Alice Bob Alice David EMPTY ```","solution":"from collections import deque class HospitalQueueManagement: def __init__(self): self.counters = {} def add_patient(self, name, counter): if counter not in self.counters: self.counters[counter] = deque() self.counters[counter].append(name) def add_urgent_patient(self, name, counter): if counter not in self.counters: self.counters[counter] = deque() self.counters[counter].appendleft(name) def serve_patient(self, counter): if counter in self.counters and self.counters[counter]: self.counters[counter].popleft() def print_queue(self, counter): if counter in self.counters and self.counters[counter]: print(\\" \\".join(self.counters[counter])) else: print(\\"EMPTY\\") def process_operations(operations): management = HospitalQueueManagement() for operation in operations: parts = operation.split() if parts[0] == \\"ADD\\": management.add_patient(parts[1], int(parts[2])) elif parts[0] == \\"URGENT\\": management.add_urgent_patient(parts[1], int(parts[2])) elif parts[0] == \\"SERVE\\": management.serve_patient(int(parts[2])) elif parts[0] == \\"PRINT\\": management.print_queue(int(parts[1])) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().splitlines() T = int(data[0]) operations = data[1:T+1] process_operations(operations)"},{"question":"You are given a string that represents a mathematical expression involving integers, addition, and subtraction. The expression does not contain any parentheses. Your task is to evaluate the given expression and return the result. The structure of the expression is as follows: - It contains only digits, \'+\', and \'-\' signs. - The expression is guaranteed to be valid. Write a function `evaluate_expression` that takes a string as input and returns the integer result of the expression. Input: A single string containing the mathematical expression. The string\'s length will be between 1 and 100 characters. Output: An integer representing the result of the evaluated expression. # Examples Example 1 Input: ``` \\"10+2-6\\" ``` Output: ``` 6 ``` Example 2 Input: ``` \\"100-50+25-25\\" ``` Output: ``` 50 ``` Example 3 Input: ``` \\"5+5+5+5\\" ``` Output: ``` 20 ``` # Note: - Do not use the `eval` function for evaluating the expression. - Consider using string manipulation and iteration to parse the expression and compute the result.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing integers, addition, and subtraction. result = 0 current_number = 0 sign = 1 # 1 represents \'+\' and -1 represents \'-\' for char in expression: if char.isdigit(): current_number = current_number * 10 + int(char) elif char == \'+\' or char == \'-\': result += sign * current_number current_number = 0 sign = 1 if char == \'+\' else -1 # Add the last number to the result result += sign * current_number return result"},{"question":"You are given n strings, each consisting of lowercase letters. The \\"weight\\" of a string is defined as the number of distinct characters in it. The task is to find the weight of each string in the list. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of strings. Each of the next n lines contains a string s_i (1 ≤ |s_i| ≤ 100). Output Print n integers. The k-th integer should be equal to the weight of the k-th string in the input. Example Input 4 abcd aaa hello world Output 4 1 4 5 Explanation 1. The string \\"abcd\\" has 4 distinct characters: {\'a\', \'b\', \'c\', \'d\'}. 2. The string \\"aaa\\" has 1 distinct character: {\'a\'}. 3. The string \\"hello\\" has 4 distinct characters: {\'h\', \'e\', \'l\', \'o\'}. 4. The string \\"world\\" has 5 distinct characters: {\'w\', \'o\', \'r\', \'l\', \'d\'}.","solution":"def string_weights(strings): Given a list of strings, return a list of their weights, where the weight of a string is the number of distinct characters in it. Parameters: strings (list): A list of strings. Returns: list: A list of integers representing the weights of the strings. res = [] for s in strings: res.append(len(set(s))) return res"},{"question":"You are given a grid of size n x m filled with integers. Your task is to identify the largest connected component of cells containing the same value in the grid and calculate its size. Two cells are connected if they share a common side. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. Each of the next n lines contains m space-separated integers representing the grid. Output Print a single integer — the size of the largest connected component of cells with the same value. Examples Input 4 5 1 2 2 3 3 1 1 2 3 3 4 4 4 4 3 5 5 4 4 3 Output 6 Input 3 3 1 1 1 2 2 2 3 3 3 Output 3 Note In the first example, the largest connected component consists of six \'4\'s. In the second example, all components consist of three same-value cells.","solution":"def largest_connected_component(grid): n = len(grid) m = len(grid[0]) visited = [[False] * m for _ in range(n)] def dfs(x, y, value): # Base case: if out of bounds or already visited or different value if x < 0 or y < 0 or x >= n or y >= m or visited[x][y] or grid[x][y] != value: return 0 # Mark this cell as visited visited[x][y] = True # Count this cell, then visit all 4 neighbors return 1 + dfs(x+1, y, value) + dfs(x-1, y, value) + dfs(x, y+1, value) + dfs(x, y-1, value) max_component_size = 0 for i in range(n): for j in range(m): if not visited[i][j]: current_component_size = dfs(i, j, grid[i][j]) max_component_size = max(max_component_size, current_component_size) return max_component_size"},{"question":"You are given the task of merging two sorted arrays into a single sorted array while maintaining the order. Each array contains distinct integers. Write a program to accomplish this. INPUT: The first line will contain a single integer T indicating the number of test cases. Each test case consists of three lines: - The first line contains a single integer n, representing the number of elements in the first array. - The second line contains n space-separated integers representing the elements of the first sorted array. - The third line contains an integer m, representing the number of elements in the second array. - The fourth line contains m space-separated integers representing the elements of the second sorted array. OUTPUT: For each test case, output a single line containing the sorted merged array with each element separated by a space. Constraints: 1 ≤ T ≤ 1000 1 ≤ n, m ≤ 1000 -10^6 ≤ array elements ≤ 10^6 SAMPLE INPUT: 2 3 1 3 5 3 2 4 6 4 -5 0 5 10 5 -6 -3 0 3 9 SAMPLE OUTPUT: 1 2 3 4 5 6 -6 -5 -3 0 0 3 5 9 10 Explanation: For test case 1, we are merging [1, 3, 5] and [2, 4, 6], resulting in the sorted array [1, 2, 3, 4, 5, 6]. For test case 2, merging [-5, 0, 5, 10] and [-6, -3, 0, 3, 9] results in the sorted array [-6, -5, -3, 0, 0, 3, 5, 9, 10].","solution":"def merge_sorted_arrays(t, test_cases): Merges two sorted arrays into a single sorted array for each test case. Args: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains two lists corresponding to the sorted arrays. Returns: list of lists: Each list is the merged and sorted array for the corresponding test case. result = [] for case in test_cases: n, arr1, m, arr2 = case merged_arr = [] i = j = 0 # Merge arrays while i < n and j < m: if arr1[i] < arr2[j]: merged_arr.append(arr1[i]) i += 1 else: merged_arr.append(arr2[j]) j += 1 # Add remaining elements while i < n: merged_arr.append(arr1[i]) i += 1 while j < m: merged_arr.append(arr2[j]) j += 1 result.append(merged_arr) return result # Function to convert input format to the required args def process_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) arr1 = list(map(int, lines[index + 1].split())) m = int(lines[index + 2]) arr2 = list(map(int, lines[index + 3].split())) test_cases.append((n, arr1, m, arr2)) index += 4 return t, test_cases # Function to format output def format_output(output): return \'n\'.join(\' \'.join(map(str, arr)) for arr in output)"},{"question":"problem You are organizing a sports tournament and need to form balanced teams based on players\' skill levels. Each player\'s skill level is represented by a positive integer. You need to divide the players into two teams such that the difference in the sum of skill levels between the two teams is minimized. Write a program that reads the skill levels of the players and outputs the minimum possible difference in the sum of skill levels between the two teams. Input The input consists of multiple datasets. Each dataset has the following format: The first line of the dataset contains an integer n (2 ≤ n ≤ 20), the number of players. The second line contains n integers separated by spaces, each representing the skill level of a player. The input ends with a dataset where n is 0, which should not be processed. Output For each dataset, print the minimum difference in the sum of skill levels between the two teams on one line. Examples Input 4 1 2 3 4 3 2 3 5 0 Output 0 0 Input None Output None","solution":"from itertools import combinations def minimum_difference(n, skill_levels): total_sum = sum(skill_levels) half_sum = total_sum // 2 closest_sum = 0 # Generate all possible subsets and find the one closest to half_sum for i in range(n + 1): for subset in combinations(skill_levels, i): subset_sum = sum(subset) if subset_sum <= half_sum: closest_sum = max(closest_sum, subset_sum) return total_sum - 2 * closest_sum def process_input(data): index = 0 results = [] while index < len(data): n = int(data[index]) if n == 0: break skill_levels = list(map(int, data[index + 1].split())) results.append(minimum_difference(n, skill_levels)) index += 2 return results"},{"question":"You are working for a delivery service company and have been tasked with optimizing the scheduling of deliveries. The company wants to maximize the number of deliveries made within a given timeframe while ensuring no two deliveries overlap. You are given a list of deliveries, where each delivery has a start time and end time. Your task is to select the maximum number of non-overlapping deliveries that can be performed within the provided time window. A delivery `X` is defined by two integers `start` and `end` where `0 ≤ start < end ≤ 1000000`, indicating that the delivery starts at time `start` and ends at time `end`. Input The first line of the input contains an integer `n` (1 ≤ n ≤ 100000) representing the number of deliveries. Each of the next `n` lines contains two integers `start` and `end`, indicating the start and end times of a delivery. Output Print one integer representing the maximum number of non-overlapping deliveries that can be performed. Examples Input 4 1 3 2 5 4 6 6 7 Output 3 Input 3 5 10 1 4 6 8 Output 2","solution":"def max_non_overlapping_deliveries(n, deliveries): deliveries.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in deliveries: if start >= last_end_time: count += 1 last_end_time = end return count # Reading input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) deliveries = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(n)] print(max_non_overlapping_deliveries(n, deliveries))"},{"question":"Design a function to compress a given string by reducing the sequence of identical characters to the character followed by the count of consecutive occurrences. For example, the sequence \\"aaa\\" would be compressed to \\"a3\\". If the compressed string turns out to be longer than the original string, the function should return the original string instead. You are required to implement the `compress_string` function to achieve the desired compression, and ensure it is efficient for a large input size. # Function Signature ```python def compress_string(s: str) -> str: # Your code here ``` # Input - A single string `s` (1 ≤ |s| ≤ 1000), where |s| represents the length of the string. The string will contain only uppercase and lowercase letters. # Output - A string representing the compressed version of the input string, or the original string if the compressed version is not smaller. # Examples Example 1 **Input:** ```python compress_string(\\"aabcccccaaa\\") ``` **Output:** ```python \\"a2b1c5a3\\" ``` Example 2 **Input:** ```python compress_string(\\"abcdef\\") ``` **Output:** ```python \\"abcdef\\" ``` Example 3 **Input:** ```python compress_string(\\"aaAAaa\\") ``` **Output:** ```python \\"aaAAaa\\" ``` In the example 1, the function compresses \\"aabcccccaaa\\" to \\"a2b1c5a3\\", which is shorter than the original string, hence the compressed version is returned. In example 2, the original string \\"abcdef\\" is already shorter than any compressed version would be, so it is returned as is. Example 3 demonstrates the function handling a mix of uppercase and lowercase characters effectively.","solution":"def compress_string(s: str) -> str: if not s: return s compressed = [] count = 1 prev_char = s[0] for i in range(1, len(s)): if s[i] == prev_char: count += 1 else: compressed.append(f\\"{prev_char}{count}\\") prev_char = s[i] count = 1 compressed.append(f\\"{prev_char}{count}\\") # Don\'t forget to append the last gathered element compressed_str = \'\'.join(compressed) # Return the shorter one between compressed and original return compressed_str if len(compressed_str) < len(s) else s"},{"question":"In a forest, there are n trees aligned in a single row, each having a certain height. Your task is to cut down some of the trees such that no two adjacent trees have the same height, and the number of trees removed is minimized. Input The first line of the input contains an integer n (1 ≤ n ≤ 100), the number of trees. The next line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 100), where h_i denotes the height of the i-th tree. Output Print one integer — the minimum number of trees to be removed to satisfy the condition that no two adjacent trees have the same height. Examples Input 5 3 3 3 3 3 Output 2 Input 6 1 3 1 3 1 3 Output 0 Input 4 1 2 2 1 Output 1 Note In the first example, removing the second and fourth trees will result in an array [3, 3, 3], where no two adjacent trees have the same height. In the second example, the heights already alternate between adjacent trees, so no trees need to be removed.","solution":"def min_trees_to_remove(n, heights): Returns the minimum number of trees to be removed to ensure no two adjacent trees have the same height. :param n: Number of trees :param heights: List of tree heights :return: Minimum number of trees to be removed if n <= 1: return 0 count = 0 for i in range(1, n): if heights[i] == heights[i - 1]: count += 1 heights[i] = -1 # Temporarily mark the tree as removed return count"},{"question":"Given a string which consists of lowercase Latin letters, check if it is possible to reorder the characters of the string so that no two adjacent characters are the same. Input A single line containing a string s (1 ≤ |s| ≤ 1000) — the input string. Output Print \\"YES\\" (quotes for clarity), if it is possible to reorder the characters of the string so that no two adjacent characters are the same, and \\"NO\\" otherwise. You may print each character either upper- or lowercase (\\"YeS\\" and \\"yes\\" are valid when the answer is \\"YES\\"). Examples Input aabb Output YES Input aaab Output NO Note In the first sample, one possible way to rearrange the string is \\"abab\\". In the second sample, there is no way to rearrange the string such that no two adjacent characters are the same.","solution":"from collections import Counter def can_reorder_without_adjacent_duplicates(s): Determine if it\'s possible to reorder the characters of the string `s` such that no two adjacent characters are the same. freq = Counter(s) max_freq = max(freq.values()) if max_freq > (len(s) + 1) // 2: return \\"NO\\" return \\"YES\\" # Example usage: # print(can_reorder_without_adjacent_duplicates(\\"aabb\\")) # Output: \\"YES\\" # print(can_reorder_without_adjacent_duplicates(\\"aaab\\")) # Output: \\"NO\\""},{"question":"Write a function that takes an integer n and returns a multiplication table of size n x n. The multiplication table should be returned as a list of lists, with each inner list representing a row of the table. Constraints * 1 ≤ n ≤ 100 Input The input consists of a single integer n. Output Return a list of lists where the element at the i-th row and j-th column is equal to (i+1) * (j+1). Example Input 3 Output [[1, 2, 3], [2, 4, 6], [3, 6, 9]] Input 5 Output [[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20], [5, 10, 15, 20, 25]]","solution":"def multiplication_table(n): Returns a multiplication table of size n x n. table = [] for i in range(1, n+1): row = [] for j in range(1, n+1): row.append(i * j) table.append(row) return table"},{"question":"A research institute is working on a new project where they need to analyze the spread of information in a network of employees. Each employee can either directly or indirectly influence other employees through their connections. For simplification, the connections between employees are considered bidirectional and unweighted. They want to know the number of unique groups of employees who can influence each other, either directly or through a series of connections. Each unique group should be completely isolated from other groups, i.e., no one in one group can influence someone in another group. Given the number of employees and their connections, write a program to find the number of unique groups. Input The first line contains two integers `n` and `m` (2 ≤ n ≤ 100, 0 ≤ m ≤ 100) — the number of employees and the number of connections between them. Next `m` lines describe the connections. Each connection is described as two numbers `ai` and `bi` (1 ≤ ai, bi ≤ n, ai ≠ bi) — the indexes of the connected employees. Each connection occurs in the list exactly once. It\'s guaranteed that each employee has at most two connections. Output Print a single integer — the number of unique groups of employees. Examples Input 5 3 1 2 2 3 4 5 Output 2 Input 6 0 Output 6 Input 4 2 1 2 3 4 Output 2","solution":"def count_unique_groups(n, m, connections): Returns the number of unique groups of employees. from collections import defaultdict # Create adjacency list graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) # To track visited nodes visited = [False] * (n + 1) def dfs(node): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) groups = 0 for employee in range(1, n + 1): if not visited[employee]: groups += 1 visited[employee] = True dfs(employee) return groups"},{"question":"You are a software developer working for a tech company that specializes in analyzing sequences of letters for genetic research. One of the most common tasks you receive is to classify DNA sequences based on their nucleotide composition. Your current assignment is to write a program that determines the percentage of each nucleotide (A, T, C, G) present in a given DNA sequence. Input The first line of input contains a single integer T denoting the number of test cases. Each of the next T lines contains a single DNA sequence. Output For each test case, output four percentages, one for each nucleotide (A, T, C, G), in the format \\"A: x% T: y% C: z% G: w%\\" where x, y, z, w are the percentages rounded to two decimal places. Constraints - Length of DNA sequences <= 1000 - Each DNA sequence contains only the characters A, T, C, G Example Input: 2 ATCG AAATTTCCCGGG Output: A: 25.00% T: 25.00% C: 25.00% G: 25.00% A: 25.00% T: 25.00% C: 25.00% G: 25.00% Explanation For the first test case with sequence \\"ATCG\\": - A appears once, out of 4 nucleotides, so the percentage of A is (1/4)*100 = 25.00% - T, C, and G each also appear once, yielding percentages of 25.00% for each. For the second test case with sequence \\"AAATTTCCCGGG\\": - A appears three times, T appears three times, C appears three times, and G appears three times, with a total of 12 nucleotides. - The percentage for each nucleotide is (3/12)*100 = 25.00%.","solution":"def nucleotide_percentages(T, sequences): Given T number of DNA sequences, calculates the percentage of each nucleotide (A, T, C, G) and returns a list of strings indicating the percentages for each sequence. results = [] for sequence in sequences: total_length = len(sequence) count_A = sequence.count(\'A\') count_T = sequence.count(\'T\') count_C = sequence.count(\'C\') count_G = sequence.count(\'G\') if total_length == 0: percentages = \\"A: 0.00% T: 0.00% C: 0.00% G: 0.00%\\" else: perc_A = (count_A / total_length) * 100 perc_T = (count_T / total_length) * 100 perc_C = (count_C / total_length) * 100 perc_G = (count_G / total_length) * 100 percentages = f\\"A: {perc_A:.2f}% T: {perc_T:.2f}% C: {perc_C:.2f}% G: {perc_G:.2f}%\\" results.append(percentages) return results"},{"question":"You are to design a simple encryption mechanism for strings. You need to implement a function that encrypts a given string using the following rules: 1. Each letter in the input string is replaced by the letter three positions further down the alphabet. If the current letter is \'z\', it should wrap around to \'c\'. For example, \'a\' is replaced by \'d\', \'z\' by \'c\', \'b\' by \'e\', and so on. 2. Non-alphabet characters should remain unchanged in the output string. Input A single line containing a string s (1 ≤ |s| ≤ 10,000). The string can contain upper and lower case letters, digits, spaces, and punctuation. Output A single line containing the encrypted string. Examples Input hello world! Output khoor zruog! Input Zebra-123 Output Cheud-123","solution":"def encrypt_string(s): Encrypts a string by replacing each letter with the letter three positions further down the alphabet. Non-alphabet characters remain unchanged. def shift_letter(letter): if \'a\' <= letter <= \'z\': return chr((ord(letter) - ord(\'a\') + 3) % 26 + ord(\'a\')) elif \'A\' <= letter <= \'Z\': return chr((ord(letter) - ord(\'A\') + 3) % 26 + ord(\'A\')) else: return letter return \'\'.join(shift_letter(c) for c in s)"},{"question":"Given a string `S` containing only lowercase letters, find the length of the longest substring with at most two distinct characters. # Input The input consists of multiple datasets. Each dataset is a single line containing the string `S`. The input ends with an empty line. # Output For each dataset, output the length of the longest substring of `S` that contains at most two distinct characters. # Constraints - 1 ≤ |S| ≤ 100000 - The number of datasets does not exceed 5. # Example Input ``` eceba aa abcba ``` Output ``` 3 2 3 ``` # Explanation In the first example, the longest substring with at most two distinct characters is \\"ece\\" with length 3. In the second example, the longest substring with at most two distinct characters is \\"aa\\" with length 2. In the third example, the longest substring with at most two distinct characters is \\"bcb\\" with length 3.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring of s that contains at most two distinct characters. if not s: return 0 left, right = 0, 0 max_len = 0 char_map = {} while right < len(s): if len(char_map) <= 2: char_map[s[right]] = right right += 1 if len(char_map) > 2: min_index = min(char_map.values()) del char_map[s[min_index]] left = min_index + 1 max_len = max(max_len, right - left) return max_len def process_input(input_str): inputs = input_str.strip().split(\'n\') results = [] for s in inputs: if s: # avoid processing empty lines in between results.append(length_of_longest_substring_two_distinct(s)) return results"},{"question":"Alex works as a warehouse manager and he wants to optimize the space used in the warehouse. The warehouse can be represented as a 2D grid where each cell can either be empty, contain a box, or be occupied by a worker. Workers can move up, down, left, or right to an adjacent empty cell, but they cannot move into a cell containing a box or another worker. Alex is given a list of workers and their respective target positions. His goal is to find out if it\'s possible to move all workers to their target positions simultaneously, such that no two workers end up in the same cell. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) – the dimensions of the warehouse grid. Each of the next n lines contains m characters representing the warehouse grid. Each character is one of the following: - \'.\' representing an empty cell, - \'B\' representing a cell containing a box, - \'W\' representing a cell occupied by a worker. The next line contains an integer k (1 ≤ k ≤ n * m) – the number of workers and their respective target positions. Each of the next k lines contains four integers r1, c1, r2, c2 (0 ≤ r1, r2 < n; 0 ≤ c1, c2 < m) – the row and column of the initial position of a worker and the row and column of their target position. Output If it\'s possible to move all workers to their respective target positions simultaneously, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 5 5 ..... .B.B. ..... .B.B. ..... 5 0 0 4 0 0 1 4 1 0 2 4 2 0 3 4 3 0 4 4 4 Output YES Input 5 5 ..... .B.B. ..... .B.B. ..... 5 0 0 4 0 0 1 3 1 0 2 4 2 0 3 4 3 0 4 4 4 Output NO Note In the first example, it\'s possible to move all workers to their respective target positions without any conflicts, so the output is \\"YES\\". In the second example, worker starting at (0, 1) cannot reach (3, 1) without colliding with a box, so it\'s not possible to move all workers to their target positions, hence the output is \\"NO\\".","solution":"def is_possible_to_move_all_workers(n, m, grid, k, positions): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def bfs(start, goal): queue = deque([start]) visited = {start} while queue: current = queue.popleft() if current == goal: return True for dx, dy in directions: nxt = (current[0] + dx, current[1] + dy) if 0 <= nxt[0] < n and 0 <= nxt[1] < m and nxt not in visited and grid[nxt[0]][nxt[1]] == \'.\': visited.add(nxt) queue.append(nxt) return False for r1, c1, r2, c2 in positions: if not bfs((r1, c1), (r2, c2)): return \\"NO\\" return \\"YES\\""},{"question":"Alyssa is arranging flowers in a garden with m rows and n columns. She wants to plant tulips in each cell, but she wants to follow these rules: 1. Each cell can contain either one tulip or be empty. 2. Any row or column can have at most k tulips. Given the constraints, help Alyssa determine the maximum number of tulips she can plant in the garden without violating the rules. Input The first line contains three integers m, n, and k (1 ≤ m, n ≤ 1000; 1 ≤ k ≤ min(m, n)) — the number of rows, the number of columns, and the maximum number of tulips per row or column, respectively. Output Output one integer — the maximum number of tulips Alyssa can plant. Examples Input 3 3 2 Output 6 Input 4 5 3 Output 12 Input 2 2 1 Output 2 Input 7 4 1 Output 4 Note In the first example, Alyssa can place 2 tulips in each row and column for a total of 6 tulips. In the second example, Alyssa can place 3 tulips in each row or column for a total of 12 tulips. In the third example, Alyssa can only place one tulip per row and per column for a total of 2 tulips. In the fourth example, Alyssa can place one tulip in 4 rows, adhering to the limit of 1 tulip per row and column.","solution":"def max_tulips(m, n, k): Calculate the maximum number of tulips that can be planted in a garden of size m x n with at most k tulips per row or column. Parameters: m (int): the number of rows n (int): the number of columns k (int): the maximum number of tulips per row or column Returns: int: the maximum number of tulips that can be planted return k * min(m, n)"},{"question":"Viral, the mayor of a small town, is planning a new park with diverse walkways. Each walkway can be either paved or unpaved. A paved section is represented by a \\"P\\" and an unpaved section by a \\"U\\". He has specific guidelines to follow: * A walkway should be at least 1 meter long. * The total length of the walkway should be less than or equal to n meters. * No two paved sections can be adjacent. * The walkway should start and end with a paved section. Your task is to determine the number of distinct walkways that can be constructed under these guidelines. Input The input consists of a single test case in the following format: n Here, the maximum possible length of the walkway is n meters. n is an integer satisfying 1 leq n leq 50. Output Output the number of possible distinct walkways. Sample Input 1 4 Sample Output 1 4 Sample Input 2 5 Sample Output 2 5 Sample Input 3 6 Sample Output 3 8 Sample Output 4 7 Sample Output 4 13 Explanation For Sample Input 1: The possible walkways are: - \\"P\\" - \\"PUP\\" - \\"PUPU\\" - \\"PUUP\\" For Sample Input 2: The possible walkways are: - \\"P\\" - \\"PUP\\" - \\"PUPU\\" - \\"PUUP\\" - \\"PUPUP\\"","solution":"def distinct_walkways(n): Returns the number of distinct walkways of length <= n. The walkway starts and ends with a paved section (\'P\') and no two paved sections are adjacent. if n == 1: return 1 # Only \\"P\\" is possible # Initial values for n == 1 and n == 2 dp = [0] * (n + 1) dp[1] = 1 if n > 1: dp[2] = 1 for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"You are given a string consisting of lowercase English letters. You need to determine if one string can be transformed into another string by rearranging its characters. Specifically, given two strings `A` and `B`, check if `B` can be formed by rearranging the characters of `A`. If so, print `Yes`; otherwise, print `No`. Constraints * Both strings `A` and `B` consist of lowercase English letters. * The length of string `A` is between 1 and 100, inclusive. * The length of string `B` is between 1 and 100, inclusive. Input Input is given from Standard Input in the following format: A B Output Print `Yes` if `B` can be formed by rearranging the characters of `A`; otherwise, print `No`. Examples Input listen silent Output Yes Input evil vile Output Yes Input triangle integral Output Yes Input apple pale Output No","solution":"def can_form_by_rearranging(A, B): Determines if string B can be formed by rearranging the characters of string A. Parameters: A (str): The original string. B (str): The string to be formed by rearranging characters of A. Returns: str: \'Yes\' if B can be formed by rearranging characters of A, otherwise \'No\'. if sorted(A) == sorted(B): return \'Yes\' else: return \'No\'"},{"question":"In an online game, players collect points by eliminating targets. Each target is worth a certain number of points, and the player can only eliminate targets that fall within a specific range of points. Given a list of targets with their respective point values, and a point range [L, R], determine the maximum number of targets a player can eliminate. Input Each test case consists of two lines. The first line contains two integers L and R (the inclusive range within which points fall, 0 ≤ L ≤ R ≤ 1,000,000), and the number N of targets. The second line contains N integers representing the points of each target (1 ≤ points ≤ 1,000,000), where N ≤ 1000. Output The maximum number of targets that can be eliminated within the given point range. Example Input: 3 6 5 2 3 5 7 8 Output: 2","solution":"def max_targets_eliminated(L, R, points): Determines the maximum number of targets that can be eliminated within the given point range [L, R]. Args: L (int): Lower bound of the range. R (int): Upper bound of the range. points (list of int): List containing the points of each target. Returns: int: Maximum number of targets that can be eliminated. count = 0 for point in points: if L <= point <= R: count += 1 return count"},{"question":"You are given a string s consisting of characters \'a\' to \'z\'. Your task is to transform the string into a palindrome by performing at most one of the following operations: - Swap any two characters in the string. - Remove exactly one character from the string. A palindrome is a string that reads the same backward as forward. You need to determine whether it is possible to transform the given string into a palindrome using at most one operation as described above. Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 1000). Output Print \\"Yes\\" if it is possible to transform s into a palindrome using at most one operation, otherwise print \\"No\\". Example Input 1 abca Output 1 Yes Input 2 abcdef Output 2 No","solution":"def can_transform_to_palindrome(s): Checks if the string can be transformed into a palindrome with at most one swap or one character removal. n = len(s) left, right = 0, n - 1 mismatch_count = 0 # Counting the mismatches while left < right: if s[left] != s[right]: mismatch_count += 1 if mismatch_count > 1: break left += 1 right -= 1 # If there is no mismatch or exactly one mismatch, we can perform one operation if mismatch_count == 0 or mismatch_count == 1: return \\"Yes\\" # If more than one mismatch, we check if removing one character can help for i in range(n): temp = s[:i] + s[i+1:] # remove character at i if temp == temp[::-1]: return \\"Yes\\" return \\"No\\""},{"question":"Alice has recently learned about grid paths and wants to explore more complex scenarios. She has an `n x m` grid with the top left corner being (1, 1) and the bottom right corner being (n, m). Alice can only move right (R) or down (D) from any cell. However, there are certain cells in the grid that are blocked, and Alice cannot step on these cells. Alice wants to know in how many different ways she can reach the cell (n, m) from (1, 1) without stepping on any blocked cells. The result can be quite large, so print it modulo 998244353. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The second line contains an integer `k` (0 ≤ k ≤ 1000) — the number of blocked cells. Each of the next `k` lines contains two integers `x_i` and `y_i` (1 ≤ x_i ≤ n, 1 ≤ y_i ≤ m) — the coordinates of the blocked cell. Output Print a single integer — the number of different ways to reach (n, m) from (1, 1) without stepping on any blocked cells, modulo 998244353. Examples Input 3 3 1 2 2 Output 2 Input 3 3 2 2 2 3 1 Output 1 Note In the first test case, the possible paths are: - (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3) - (1, 1) → (1, 2) → (2, 2) is blocked In the second test case, the possible path is: - (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3)","solution":"def count_paths(n, m, k, blocked_cells): MOD = 998244353 dp = [[0] * m for _ in range(n)] if (1, 1) in blocked_cells or (n, m) in blocked_cells: return 0 dp[0][0] = 1 blocked_set = set((x - 1, y - 1) for x, y in blocked_cells) for i in range(n): for j in range(m): if (i, j) in blocked_set: dp[i][j] = 0 elif i == 0 and j == 0: continue else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1]"},{"question":"There is a rectangular grid-like city of size MxN. You start from the top-left corner of the city and need to reach the bottom-right corner. You can either move right (R) or down (D) at any step. Determine the number of unique paths you can take to reach the destination from the starting point. Constraints * 1 leq M leq 50 * 1 leq N leq 50 * All values in input are integers. Input Input is given from Standard Input in the following format: M N Output Output the number of unique paths from the top-left corner to the bottom-right corner of the grid. Examples Input 2 3 Output 3 Input 3 3 Output 6 Input 1 1 Output 1","solution":"def unique_paths(M, N): Calculate the number of unique paths from the top-left corner to the bottom-right corner of a grid of dimensions MxN. :param M: number of rows in the grid :param N: number of columns in the grid :return: number of unique paths if M == 1 or N == 1: return 1 # Create a 2D list to store the number of paths to each cell dp = [[0] * N for _ in range(M)] # There\'s only one way to reach cells in the first row: move right for j in range(N): dp[0][j] = 1 # There\'s only one way to reach cells in the first column: move down for i in range(M): dp[i][0] = 1 # Fill the DP table for i in range(1, M): for j in range(1, N): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[M-1][N-1]"},{"question":"In a faraway kingdom, there exists a magical forest inhabited by mystical creatures known as Tree Sprites. The Tree Sprites live on trees, and their well-being depends on the structure of the trees they inhabit. The forest is home to many binary trees, where each tree has nodes with distinct values representing different types of enchanted fruits. Each Tree Sprite prefers a specific harvesting pattern, defined by the \\"sprite number\\" for each node in the tree. The sprite number of a node is the sum of the values of its children nodes (if they exist) plus one. A Tree Sprite feels content if all nodes in the tree have unique sprite numbers. Your task is to help the Tree Sprites by determining if any of the binary trees in the forest have all unique sprite numbers. A binary tree is defined as follows: - A binary tree is either empty (null), or it consists of a node called the root, along with two subtrees called the left subtree and the right subtree, both of which are binary trees. Given n unique integer values, your task is to determine if there exists a binary tree where all nodes have unique sprite numbers. Input The input consists of a single integer n (1 ≤ n ≤ 20) denoting the number of unique values (1 to n). Output Output \\"YES\\" if there exists a binary tree structure where all nodes have unique sprite numbers, otherwise output \\"NO\\". Examples Input 3 Output YES Input 4 Output YES Input 5 Output NO","solution":"def check_unique_sprite_numbers(n): Determines if there exists a binary tree with nodes 1 to n where all nodes have unique sprite numbers. Args: n (int): the number of unique values Returns: str: \\"YES\\" if such a binary tree exists, otherwise \\"NO\\" if n == 1 or n == 2: return \\"YES\\" return \\"NO\\""},{"question":"Nina is a gardener who loves to plant flowers in the garden. One day, she decided to create a beautiful arrangement of flower beds in a triangular shape. Each flower bed in the arrangement contains a number of flowers, and the arrangement is made such that each row in the triangle has one more flower bed than the row above it. Nina wants to find the maximum number of flowers she can collect starting from the top of the triangular arrangement and moving to the adjacent flower bed directly below until she reaches the bottom. Each flower bed in the arrangement is represented as an integer, which is the number of flowers in that bed. Nina can only move to the adjacent flower bed directly below from her current position. Given a triangular arrangement of flower beds, write a program to find the maximum number of flowers Nina can collect starting from the topmost flower bed and moving to the bottom. Input The first line of input contains an integer T (1 ≤ T ≤ 10) representing the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 100) representing the number of rows in the triangular arrangement. The next n lines contain the numbers of flowers in the flower beds, with the i-th line containing i integers. Output For each test case, output a single integer representing the maximum number of flowers Nina can collect. Example Input 2 4 3 7 4 2 4 6 8 5 9 3 3 1 2 3 4 5 6 Output 23 10 Explanation In the first test case, starting from the top: - Nina can collect 3 flowers from the first row. - She moves to the second row and collects 7 flowers (total 10 flowers). - Moving to the third row, she collects 4 or 6 flowers. To maximize, she chooses 6 flowers (total 16 flowers). - In the fourth and final row, she collects 9 flowers (total 25 flowers). Final total for the first test case: 3 + 7 + 6 + 9 = 25. In the second test case, starting from the top: - She collects 1 flower from the first row. - She moves to the second row and can collect 3 flowers (total 4 flowers). - Moving to the third row, she collects 6 flowers (total 10 flowers). Final total for the second test case: 1 + 3 + 6 = 10.","solution":"def max_flowers(T, test_cases): def max_flower_path(triangle, n): # Start from the second last row of the triangle and move upwards for i in range(n-2, -1, -1): for j in range(i+1): # Update each element to be the maximum path sum to that element triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1]) return triangle[0][0] result = [] for i in range(T): n = test_cases[i][0] triangle = test_cases[i][1] result.append(max_flower_path(triangle, n)) return result"},{"question":"An amusement park has introduced a new thrill ride, and the park management wants to keep track of the average thrill experienced by the riders. Each rider provides a thrill score after experiencing the ride, which is a floating-point number between 0.0 and 10.0. The park management wants to determine the average thrill score after each rider completes the ride. You are given a sequence of thrill scores from the riders and you need to calculate the running average of thrill scores after each rider\'s score is recorded. Write a function that takes an integer T (number of test cases), and for each test case, an integer N (number of riders) followed by an array of N floating-point numbers representing the thrill scores. The function should print the running average of thrill scores for each test case. Input: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains the integer N. - The second line contains N floating-point numbers representing the thrill scores. Output: - For each test case, print the running average thrill score after each rider. Each average should be rounded to three decimal places. Constraints: - 1 ≤ T ≤ 25 - 1 ≤ N ≤ 100 - 0.0 ≤ Thrill Score ≤ 10.0 Example Input: 2 3 8.0 9.0 10.0 4 5.5 6.5 7.5 8.5 Example Output: 8.000 8.500 9.000 5.500 6.000 6.500 7.000","solution":"def calculate_running_average(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] scores = test_cases[i][1] running_sum = 0.0 running_avg = [] for j in range(N): running_sum += scores[j] average = running_sum / (j + 1) running_avg.append(\\"{:.3f}\\".format(average)) results.append(\\" \\".join(running_avg)) return results # Function to parse input and call the required function def amusement_park_thrill_scores(T, data): test_cases = [] index = 0 for _ in range(T): N = data[index] index += 1 scores = data[index:index + N] index += N test_cases.append((N, scores)) return calculate_running_average(T, test_cases)"},{"question":"Jodi loves playing with numbers. She came up with a new game where she shuffles a list of integers and then tries to permute the list such that no two adjacent elements in the permuted list have the same parity (i.e., one element should be odd and the other even). However, she quickly realized that it’s not always possible to achieve this permutation for every list. She has asked for your help to determine if it is possible to permute the list such that no two adjacent elements have the same parity, and if possible, to provide the permuted list. Your task is to write a program that reads multiple lists of integers and for each list, determines if such a permutation exists and provides the permutation if it does. Input The first line of the input contains an integer t (1 ≤ t ≤ 50) — the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 100) — the length of the list. - The second line contains n integers a₁, a₂, ..., aₙ (1 ≤ a_i ≤ 1000) — the elements of the list. Output For each test case, print \\"YES\\" if such a permutation exists and then print the permuted list. If no such permutation exists, print \\"NO\\". Example Input 3 4 1 2 3 4 3 1 3 5 5 2 4 6 8 10 Output YES 1 2 3 4 NO NO Note In the first test case, the list can be permuted to [1, 2, 3, 4], which satisfies the condition as 1 is odd, 2 is even, 3 is odd, and 4 is even. Therefore, the output is \\"YES\\" followed by the permuted list. In the second test case, it\'s not possible to permute the list [1, 3, 5] such that no two adjacent elements have the same parity, as all elements are odd. Thus, the output is \\"NO\\". In the third test case, it\'s also not possible as all elements are even. Therefore, the output is \\"NO\\".","solution":"def can_permute_no_adjacent_same_parity(n, lst): odds = [x for x in lst if x % 2 != 0] evens = [x for x in lst if x % 2 == 0] if abs(len(odds) - len(evens)) > 1: return \\"NO\\", [] if len(odds) > len(evens): result = [] for i in range(len(evens)): result.append(odds[i]) result.append(evens[i]) result.append(odds[-1]) return \\"YES\\", result elif len(evens) > len(odds): result = [] for i in range(len(odds)): result.append(evens[i]) result.append(odds[i]) result.append(evens[-1]) return \\"YES\\", result else: result = [] for i in range(len(odds)): result.append(odds[i]) result.append(evens[i]) return \\"YES\\", result def process_test_cases(test_cases): results = [] for n, lst in test_cases: result, permuted_list = can_permute_no_adjacent_same_parity(n, lst) if result == \\"NO\\": results.append(\\"NO\\") else: results.append(\\"YES\\") results.append(\\" \\".join(map(str, permuted_list))) return results"},{"question":"Given a series of operations, each representing changes to a string, determine the final string after all operations have been applied. Each operation either appends a character to the string or removes the last character from the string. Write a program that reads a sequence of operations and prints the final string. Input: The input consists of multiple test cases. Each test case begins with an integer n (1 ≤ n ≤ 1000), indicating the number of operations. The following n lines each contain either: - \\"APPEND x\\", where x is a single character to be appended to the string. - \\"DELETE\\", which removes the last character from the string. The input is terminated by a line containing zero. Output: For each test case, output the final string after all operations are applied. If the string is empty, output \\"EMPTY\\". Example: Input: 3 APPEND a APPEND b DELETE 4 APPEND x DELETE APPEND y APPEND z 0 Output: \\"a\\" \\"yz\\" Explanation: In the first case, the operations are: - APPEND \'a\' - APPEND \'b\' - DELETE The resulting string is \\"a\\". In the second case, the operations are: - APPEND \'x\' - DELETE - APPEND \'y\' - APPEND \'z\' The resulting string is \\"yz\\".","solution":"def process_operations(input_data): Processes a series of string operations and returns the final strings for each test case. Parameters: input_data (str): The input data containing multiple test cases and operations. Returns: list: A list of final strings for each test case. If a string is empty, it returns \\"EMPTY\\". lines = input_data.strip().split(\'n\') result = [] index = 0 while index < len(lines): n = int(lines[index]) if n == 0: break final_string = [] for i in range(index + 1, index + 1 + n): operation = lines[i] if operation.startswith(\\"APPEND\\"): _, char = operation.split() final_string.append(char) elif operation == \\"DELETE\\": if final_string: final_string.pop() if final_string: result.append(\'\'.join(final_string)) else: result.append(\\"EMPTY\\") index += n + 1 return result"},{"question":"Ensure Unique Elements in K-Fold Repetitions You are given an integer array `A` of size `N` and an integer `K`. Your task is to determine if it\'s possible to divide the array into `K` non-overlapping subarrays such that each subarray contains unique elements and each element from the original array appears exactly once in one of the subarrays. Each of the `K` subarrays must have exactly `N/K` elements. If such a division is possible, output `1`. Otherwise, output `0`. Input Input is given from standard input in the following format: ``` N K A_1 A_2 ... A_N ``` Output Output a single integer `1` if it\'s possible to divide the array `A` into `K` subarrays where each subarray satisfies the given conditions. Otherwise, output `0`. Constraints - 1 leq K leq N leq 100000 - 1 leq A_i leq 100000 Input example 1 ``` 6 2 1 2 3 3 2 1 ``` Output example 1 ``` 1 ``` Input example 2 ``` 7 3 1 2 3 4 5 6 7 ``` Output example 2 ``` 0 ``` Example Explanation: In the first example, the array `A` can be divided into two subarrays: `[1, 2, 3]` and `[3, 2, 1]`, each having 3 unique elements, satisfying the conditions. In the second example, it is not possible to divide the array `A` into three subarrays, each containing unique elements, since the original array has only 7 elements, and no repetition is allowed.","solution":"def is_possible_k_partitions(N, K, A): from collections import Counter if N % K != 0: return 0 subarray_size = N // K element_counts = Counter(A) if any(count > K for count in element_counts.values()): return 0 return 1"},{"question":"Yuna is trying to decide which of three online courses to take. Each course covers some topics, and she wants to learn as many unique topics as possible. The three courses cover the following topics: Course A: a topics Course B: b topics Course C: c topics Yuna can enroll in exactly two different courses. Determine the maximum number of unique topics she can learn by combining two different courses. Constraints * 1 ≤ a, b, c ≤ 10000 * a, b, and c are integers Input Input is given from Standard Input in the following format: a b c Output Print the maximum number of unique topics Yuna can learn by combining two different courses. Examples Input 300 400 500 Output 900 Input 500 500 500 Output 1000","solution":"def max_unique_topics(a, b, c): Calculate the max number of unique topics Yuna can learn by combining any two of the three courses. # Combining two courses at a time and summing up the topics combine_AB = a + b combine_BC = b + c combine_CA = c + a # Returning the maximum of the combined topics return max(combine_AB, combine_BC, combine_CA)"},{"question":"Two Squares on a Plane You are given two squares on a 2D plane. Each of the squares is defined by its four vertices, which are given in counterclockwise order. Determine if the two squares overlap, and if so, output the area of their intersection. If the squares do not overlap, output 0. **Note:** The squares are axis-aligned, meaning their edges are parallel to either the x-axis or the y-axis. # Input The input consists of two sets of four lines each. - The first set of lines represents the coordinates of the first square\'s vertices. - The second set of lines represents the coordinates of the second square\'s vertices. For each vertex, you are given two integers `x` and `y`, representing the coordinates of the vertex on the 2D plane. Each coordinate value ranges between -1000 and 1000, inclusive. # Output Output a single integer representing the area of the intersection of the two squares. If the squares do not intersect, output `0`. # Example Input ``` 0 0 0 1 1 1 1 0 2 2 2 3 3 3 3 2 ``` Output ``` 0 ``` Input ``` 0 0 0 2 2 2 2 0 1 1 1 3 3 3 3 1 ``` Output ``` 1 ``` # Explanation In the first example, the squares\' vertices are given such that the two squares do not overlap at all, thus the output is `0`. In the second example, the squares overlap. The intersection of these two squares is a square itself with an area of (1 times 1 = 1).","solution":"def get_square_bounds(coordinates): Given four coordinates representing the vertices of an axis-aligned square, return the bounds of the square. Args: coordinates: List of tuples [(x1, y1), (x2, y2), (x3, y3), (x4, y4)] Returns: (x_min, x_max, y_min, y_max) The bounds of the square. x_coords = [coord[0] for coord in coordinates] y_coords = [coord[1] for coord in coordinates] x_min = min(x_coords) x_max = max(x_coords) y_min = min(y_coords) y_max = max(y_coords) return x_min, x_max, y_min, y_max def intersection_area(square1, square2): Given the coordinates of two squares on a 2D plane, returns the area of their intersection. Args: square1: List of tuples [(x1, y1), (x2, y2), (x3, y3), (x4, y4)] square2: List of tuples [(x5, y5), (x6, y6), (x7, y7), (x8, y8)] Returns: int: The area of the intersection of two squares, or 0 if they do not overlap. x1_min, x1_max, y1_min, y1_max = get_square_bounds(square1) x2_min, x2_max, y2_min, y2_max = get_square_bounds(square2) # Find the overlapping region overlap_x_min = max(x1_min, x2_min) overlap_x_max = min(x1_max, x2_max) overlap_y_min = max(y1_min, y2_min) overlap_y_max = min(y1_max, y2_max) # Calculate the width and height of overlap overlap_width = max(0, overlap_x_max - overlap_x_min) overlap_height = max(0, overlap_y_max - overlap_y_min) # Calculate the area intersection_area = overlap_width * overlap_height return intersection_area"},{"question":"Develop a program that simulates the behavior of an automatic lamp. The lamp turns on or off based on movements detected by a sensor and the current time of day. The lamp reacts differently during day and night times. Inputs: - A series of events that can either be \'movement\' or \'no movement\'. - The current time of day in 24-hour format (e.g., \'13:45\', \'22:30\'). - A predefined threshold of \'daytime\' (e.g., between \'06:00\' and \'18:00\'). During the daytime, the lamp remains off even if there is movement. During the nighttime, the lamp turns on when movement is detected and stays on for the next 10 minutes even if there is no movement. If the lamp is already on and a movement is detected, the 10 minutes timer resets. Your task is to write a program that processes the events and prints the state of the lamp (either \'on\' or \'off\') at the end of the events. Each event can be assumed to occur at 2-minute intervals. Input: - An integer `n`, which represents the number of events. - A list of strings representing the events (either \'movement\' or \'no movement\'). - A string representing the current time in \'HH:MM\' format. - Two strings representing the start and end of daytime in \'HH:MM\' format. Output: - A string \'on\' or \'off\' representing the final state of the lamp. Example: Input: ``` 6 movement no movement no movement movement no movement no movement 21:00 06:00 18:00 ``` Output: ``` off ``` Explanation: - Current time: 21:00 -> Nighttime - Lamp turns on at 21:00 due to movement -> on - Next event: no movement at 21:02 -> on (lamp stays on) - Next event: no movement at 21:04 -> on (lamp stays on) - Movement at 21:06 -> reset timer -> on - Next event: no movement at 21:08 -> on (timer is still running) - Next event: no movement at 21:10 -> on (timer is still running) However, since the lamp should turn off after 10 minutes of no movement, and 12 minutes have passed, it should now be off.","solution":"from datetime import datetime, timedelta def is_daytime(current_time, start_daytime, end_daytime): current = datetime.strptime(current_time, \\"%H:%M\\").time() start = datetime.strptime(start_daytime, \\"%H:%M\\").time() end = datetime.strptime(end_daytime, \\"%H:%M\\").time() if start < end: return start <= current < end else: return current >= start or current < end def simulate_lamp(n, events, current_time, start_daytime, end_daytime): lamp_state = \'off\' last_movement_time = None current_datetime = datetime.strptime(current_time, \\"%H:%M\\") for event in events: if is_daytime(current_time, start_daytime, end_daytime): lamp_state = \'off\' else: if event == \'movement\': lamp_state = \'on\' last_movement_time = current_datetime if last_movement_time and (current_datetime - last_movement_time) < timedelta(minutes=10): lamp_state = \'on\' else: lamp_state = \'off\' # Move time forward by 2 minutes after each event current_datetime += timedelta(minutes=2) current_time = current_datetime.strftime(\\"%H:%M\\") return lamp_state"},{"question":"A string is said to be well-formed if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\' and they are properly nested. For example, the string \\"(())\\" is well-formed, but the strings \\"(()\\" and \\"())(\\" are not. You are tasked with writing a function that checks if a given string of parentheses is well-formed. Constraints - The input string will consist only of characters \'(\' and \')\'. - The length of the string will be between 1 and 100,000. Input A single line containing a string of parentheses. Output Print \\"YES\\" if the string is well-formed, otherwise print \\"NO\\". Examples Input (()) Output YES Input ()( Output NO","solution":"def is_well_formed(parentheses): Checks if the given string of parentheses is well-formed. Parameters: parentheses (str): A string consisting of characters \'(\' and \')\'. Returns: str: \\"YES\\" if the string is well-formed, otherwise \\"NO\\". stack = [] for char in parentheses: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\""},{"question":"In programming, string reversal refers to an operation where the characters of a string are rearranged in reverse order. For example, the reverse of the string \\"hello\\" is \\"olleh\\". Input: The first line contains a single positive integer T, representing the number of test cases. This is followed by T lines, each containing a single string S, consisting of up to 100 lowercase alphabetical characters. Output: For each input string S, output a single line containing the reversed string. Example: Input: 3 apple world programming Output: elppa dlrow gnimmargorp","solution":"def reverse_strings(T, strings): For each string in the strings list, reverse the string and return a new list of reversed strings. :param T: Number of test cases (strings) :param strings: List of strings to be reversed :return: List of reversed strings return [s[::-1] for s in strings]"},{"question":"The city has recently started a new public bike-sharing system. The system appoints several bike stations throughout the city where bicycles can be borrowed or returned at any time. Each station has a limited number of slots for parking bikes. The city wants to guarantee that at any given time, it is possible to park or borrow a bike in every station. Your task is to determine the minimum number of bikes that need to be added or removed from each station so that all stations can maintain at least one free slot and also have at least one bike available for borrowing. Input: Input will begin with an integer N (1 <= N <= 100), the number of bike stations. Each of the following N lines will contain two integers A and B (0 <= A, B <= 100), where A is the number of bikes currently at the station and B is the number of slots available at the station. Output: For each station, output a single integer which represents the number of bikes that need to be added or removed. If no adjustment is necessary, output 0. Sample input: 3 5 10 0 5 2 3 Sample output: 0 1 -1","solution":"def adjust_bikes(N, stations): adjustments = [] for A, B in stations: if A > 0 and A < B: adjustments.append(0) elif A == 0: adjustments.append(1) else: # A >= B adjustments.append(-1) return adjustments # Example Use N = 3 stations = [(5, 10), (0, 5), (2, 3)] print(adjust_bikes(N, stations)) # Output should be [0, 1, -1]"},{"question":"# Elevator Maintenance Schedule As a property manager, you are responsible for scheduling maintenance for elevators in a skyscraper with F floors (numbered from 1 to F ) and one elevator. The elevator can move up or down between floors at a cost of 1 unit of energy per floor traveled. The maintenance team is visiting a specified list of floors on a given day and needs to reach each floor exactly once. Minimizing the total energy cost of moving the elevator is crucial. Write a function, `min_energy_cost(floors: List[int], F: int) -> int`, that takes a list of integers representing the floors where maintenance is required, and the number of floors in the building, and returns the minimum energy cost for the elevator to visit all specified floors, starting from floor 1. # Input - An integer F representing the number of floors in the building (2 <= F <= 10^4). - A list of integers, `floors`, representing the floors where maintenance is required. The list will contain unique integers from 1 to F . # Output - An integer representing the minimum energy cost for the elevator to complete the maintenance schedule. # Example Input ```python F = 5 floors = [3, 2, 4, 5] ``` Output ```python 4 ``` # Explanation Starting on floor 1, the elevator can take the following path to minimize energy cost: - Move from floor 1 to floor 2 (cost 1). - Move from floor 2 to floor 3 (cost 1). - Move from floor 3 to floor 4 (cost 1). - Move from floor 4 to floor 5 (cost 1). Total energy cost = 4 units.","solution":"def min_energy_cost(floors, F): Returns the minimum energy cost to visit all specified floors starting from floor 1. Parameters: floors (list): A list of integers representing floors where maintenance is required. F (int): The number of floors in the building. Returns: int: Minimum energy cost. # Sort the list of floors to visit floors.sort() # Initial energy cost to first maintenance floor from floor 1 energy_cost = abs(1 - floors[0]) # Add the energy cost for traveling between each maintenance floor for i in range(1, len(floors)): energy_cost += abs(floors[i] - floors[i - 1]) return energy_cost"},{"question":"Sara is packing shipments. Sara has a list of cartons, each with a certain weight. She needs to pack these cartons into pallets for shipment. Each pallet has a maximum weight it can carry. Sara wants to minimize the number of pallets used. Write a program that determines the minimum number of pallets needed to pack all the cartons. Constraints * The number of cartons, n, is between 1 and 10^5. * Each carton has a weight that is between 1 and 10^4. * Each pallet can carry a maximum weight w, which is between 1 and 10^6. Input The input is given from Standard Input in the following format: n w c1 c2 c3 ... cn Where: - n is the number of cartons. - w is the maximum weight a pallet can carry. - c1, c2, c3, ..., cn are the weights of the cartons. Output Print the minimum number of pallets needed to pack all the cartons. Examples Input 5 10 2 3 4 5 6 Output 3 Input 3 15 10 5 8 Output 2 Input 4 20 8 8 8 8 Output 2","solution":"def min_pallets(n, w, cartons): Determines the minimum number of pallets needed to pack the cartons. :param n: Number of cartons :param w: Maximum weight a pallet can carry :param cartons: List of weights of the cartons :return: Minimum number of pallets needed cartons.sort() i, j = 0, n - 1 pallets = 0 while i <= j: if cartons[i] + cartons[j] <= w: i += 1 j -= 1 pallets += 1 return pallets"},{"question":"A team of scientists has discovered a new algorithm for compressing strings that reduces repetitive characters. They need your help to implement this algorithm. The algorithm works by encoding consecutive characters with the count of their occurrences followed by the character itself. For example, the string \\"aaabbcccc\\" would be converted to \\"3a2b4c\\". Your task is to write a program that takes multiple strings as input, compresses them using the algorithm described, and outputs the compressed strings. Input: - First line contains an integer T - number of test cases. - Each of the next T lines contains a string consisting of lowercase alphabets only, representing the original string to be compressed. Output: For each test case, output the compressed string on a new line. Constraints: 1 ≤ T ≤ 100 1 ≤ Length of original string ≤ 100 Sample Input: 3 aaabbcccc xxxyyyzz hhhhhhhh Sample Output: 3a2b4c 3x3y2z 8h Explanation: For the first test case, - \'a\' appears 3 times consecutively, so it is compressed to \\"3a\\". - \'b\' appears 2 times consecutively, so it is compressed to \\"2b\\". - \'c\' appears 4 times consecutively, so it is compressed to \\"4c\\". Combining these, the compressed string becomes \\"3a2b4c\\". For the second test case, - \'x\' appears 3 times consecutively, so it is compressed to \\"3x\\". - \'y\' appears 3 times consecutively, so it is compressed to \\"3y\\". - \'z\' appears 2 times consecutively, so it is compressed to \\"2z\\". Combining these, the compressed string becomes \\"3x3y2z\\". For the third test case, - \'h\' appears 8 times consecutively, so it is compressed to \\"8h\\". Implement this algorithm to help the scientists with their string compression process.","solution":"def compress_string(s): if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(f\\"{count}{s[i-1]}\\") count = 1 compressed.append(f\\"{count}{s[-1]}\\") return \'\'.join(compressed) def compress_strings(strings): return [compress_string(s) for s in strings] def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) strings = data[1:T + 1] results = compress_strings(strings) for result in results: print(result) # Uncomment the following line to run the script # if __name__ == \\"__main__\\": # main()"},{"question":"You are given a grid with `n` rows and `m` columns filled with integers. Write a program that takes an integer `k` as input and rotates the elements of the grid `k` times 90 degrees in a clockwise direction. After performing the rotations, output the final grid. Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 20), indicating the number of rows and columns. - The next `n` lines each contain `m` integers, representing the initial grid. - The last line contains the integer `k` (1 ≤ k ≤ 100). Output - Output the final grid after rotating it `k` times 90 degrees in a clockwise direction. Example Input: ``` 2 3 1 2 3 4 5 6 1 ``` Output: ``` 4 1 5 2 6 3 ``` Input: ``` 2 2 1 2 3 4 3 ``` Output: ``` 2 4 1 3 ``` # Explanation In the first example, the initial grid is: ``` 1 2 3 4 5 6 ``` After rotating it once to the right (90 degrees clockwise), the grid becomes: ``` 4 1 5 2 6 3 ``` In the second example, the initial grid is: ``` 1 2 3 4 ``` After rotating it three times (270 degrees clockwise), the grid becomes: ``` 2 4 1 3 ```","solution":"def rotate_grid(grid, k): Rotates the given grid k times 90 degrees in a clockwise direction. :param grid: List of lists representing the grid :param k: Number of times to rotate the grid 90 degrees clockwise :return: Rotated grid n, m = len(grid), len(grid[0]) k = k % 4 # as rotating 4 times results in the same grid for _ in range(k): # Create a new grid with dimensions of m x n new_grid = [[0] * n for _ in range(m)] for i in range(n): for j in range(m): new_grid[j][n - 1 - i] = grid[i][j] grid = new_grid n, m = m, n # swap dimensions return grid def read_input(): Reads input from the user or a file import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] index = 2 for i in range(n): row = list(map(int, data[index:index + m])) grid.append(row) index += m k = int(data[-1]) return grid, k def print_grid(grid): Prints the grid in the required format :param grid: List of lists representing the grid for row in grid: print(\' \'.join(map(str, row))) def main(): grid, k = read_input() rotated_grid = rotate_grid(grid, k) print_grid(rotated_grid) if __name__ == \\"__main__\\": main()"},{"question":"Write a program to find all the prime numbers between a given range [A, B] (inclusive). A number is said to be prime if it is greater than 1 and has no positive divisors other than 1 and itself. Input: The first line contains T, the number of test cases (1 ≤ T ≤ 10). Each of the next T lines contains two integers, A and B (1 ≤ A, B ≤ 100000). Output: For each test case, print the list of prime numbers in the range [A, B] in a single line. If there are no prime numbers in the range, print an empty line. Example: Input: 2 10 20 11 13 Output: 11 13 17 19 11 13","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def primes_in_range(A, B): Returns a list of all prime numbers in the range [A, B] inclusive. result = [] for num in range(A, B + 1): if is_prime(num): result.append(num) return result def prime_numbers_in_ranges(test_cases): For a list of test cases, each containing a pair of integers (A, B), returns a list of prime numbers for each range [A, B]. results = [] for A, B in test_cases: results.append(primes_in_range(A, B)) return results"},{"question":"You are given a list of integers that represent the heights of buildings, arranged sequentially from left to right. Each building has a width of 1 unit. You are tasked with finding the maximum area of a rectangle that can be formed by any number of contiguous buildings. Write a function that calculates this maximum rectangle area. # Input - A single line containing space-separated integers, which represent the heights of the buildings. - The number of integers will not exceed 1000, and each integer is guaranteed to fit within a 32-bit signed integer. # Output - A single integer which is the maximum area of the rectangle that can be formed. # Example **Input:** ``` 2 1 5 6 2 3 ``` **Output:** ``` 10 ``` **Explanation:** The maximum rectangle can be formed by the third and fourth buildings (with heights 5 and 6), resulting in an area of `5 * 2 = 10`.","solution":"def largest_rectangle_area(heights): Calculates the maximum area of a rectangle that can be formed by contiguous buildings. Parameters: heights (list): A list of integers representing the heights of the buildings. Returns: int: The maximum area of the rectangle that can be formed. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Leena has a number of n items in her collection, each with a unique item number from 1 to n. Additionally, she has q queries about these items. Each query consists of two integers l and r, representing a range of items from l to r. For each query, Leena wants to know the maximum difference in item numbers within the given range. If the range contains only a single item, the difference is zero. Input The first line contains two integers n and q (1 ≤ n, q ≤ 3·10^5) — the number of items and the number of queries respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ n) — the item numbers in Leena\'s collection. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the range of items for which Leena wants to know the maximum difference. Output Output the answer for each query on a new line. Examples Input 6 3 1 3 2 6 4 5 1 3 2 5 3 6 Output 2 4 4 Input 5 2 4 1 3 5 2 1 5 3 4 Output 4 2","solution":"def find_max_diff(n, q, items, queries): results = [] for l, r in queries: l, r = l - 1, r - 1 # Convert to zero-based index max_val = max(items[l:r+1]) min_val = min(items[l:r+1]) results.append(max_val - min_val) return results"},{"question":"You\'re given a string `S` consisting of only lowercase Latin letters. Your task is to generate all possible permutations of this string and determine if there exist any valid English words among the generated permutations. If there are multiple valid words, you must return the lexicographically smallest word. If there are no valid English words, return \'no valid word\'. For the purpose of this exercise, the English dictionary is a predefined list of valid words that your code can check against. You can assume that the `is_valid_word(word)` function is available and returns `True` if a word is valid and `False` otherwise. Input A single string `S` containing only lowercase letters (1 ≤ |S| ≤ 8). Output A single word which is the lexicographically smallest valid English word among all permutations of `S`, or \'no valid word\' if no such word exists. Example Input: \\"loop\\" Output: \\"loop\\" Input: \\"oloop\\" Output: \\"no valid word\\" Explanation: In the first test case, \\"loop\\" itself is a valid English word, and since it is the only possible non-redundant permutation that forms a valid word, it is returned. In the second test case, although \\"oloop\\" has multiple permutations such as \\"oloop\\", \\"olopo\\", \\"ooplo\\", and so on, none of these permutations form a valid English word. Therefore, the output is \'no valid word\'.","solution":"from itertools import permutations def is_valid_word(word): # This is a placeholder for the actual implementation. # For the purpose of the example, assume a predefined dictionary: valid_words = {\\"loop\\", \\"pool\\", \\"pols\\", \\"spools\\", \\"loops\\"} return word in valid_words def find_lexicographically_smallest_valid_word(S): perm_set = set([\'\'.join(p) for p in permutations(S)]) valid_words = [word for word in perm_set if is_valid_word(word)] if not valid_words: return \'no valid word\' return min(valid_words) # Example usage (for demonstration purposes) # print(find_lexicographically_smallest_valid_word(\\"loop\\")) # Expected output: \\"loop\\" # print(find_lexicographically_smallest_valid_word(\\"oloop\\")) # Expected output: \\"no valid word\\""},{"question":"Two cats, Tom and Jerry, are playing a game on an infinitely long number line. Initially, Tom is at position x and Jerry is at position y. They can move towards each other to meet at a common point. Tom can move one unit to the left or right in each second, and Jerry can move one unit to the left or right in each second too. They both move simultaneously. However, Tom is a bit lazy, so he wants to move as few steps as possible to meet Jerry. Similarly, Jerry also wants to minimize his steps. Given the initial positions x and y of Tom and Jerry on the number line, determine the minimum number of seconds they need to meet at the same position. Input The first and only line of input contains two space-separated integers, x and y (-10^9 ≤ x, y ≤ 10^9). Output Output the minimum number of seconds Tom and Jerry need to meet. Examples Input 3 6 Output 3 Input -5 5 Output 5 Note In the first example, Tom can move from 3 to 6 in 3 seconds (3→4→5→6), and Jerry is already at 6. In the second example, Tom moves from -5 to 0 (which takes 5 seconds) while Jerry moves simultaneously from 5 to 0 (which also takes 5 seconds); they meet at 0.","solution":"def minimum_seconds_to_meet(x, y): Returns the minimum number of seconds Tom and Jerry need to meet at the same position on the number line starting from positions x and y. return abs(x - y) # Example usage: # x, y = map(int, input().split()) # print(minimum_seconds_to_meet(x, y))"},{"question":"Due to an intermittent memory error that happens occasionally when making network requests in a distributed system, a transaction may fail even if the request is valid. You are tasked with implementing a retry mechanism to handle these intermittent errors. Write a function `executeWithRetry(request: () => boolean, retries: int) -> boolean` that takes a request function and the number of retries allowed. The `request` function should return a boolean, where `true` indicates the request was successful, and `false` indicates that there was a transient error. The `executeWithRetry` function should attempt to execute the request up to the specified number of retries, and return `true` if the request eventually succeeds, and `false` if it fails even after the allowed number of retries. Input The function takes two parameters: - `request`: A function that returns `true` when the request is successful and `false` for a transient error. - `retries`: An integer specifying the maximum number of retry attempts allowed. Output The function should return `true` if the request succeeds within the allowed number of retries, and `false` otherwise. Examples 1. If the request succeeds on the first attempt: ```python def mock_request(): return True print(executeWithRetry(mock_request, 3)) # Output: True ``` 2. If the request fails the first two attempts but succeeds on the third attempt: ```python attempts = 0 def mock_request(): global attempts attempts += 1 return attempts == 3 print(executeWithRetry(mock_request, 3)) # Output: True ``` 3. If the request keeps failing even after the allowed number of retries: ```python def mock_request(): return False print(executeWithRetry(mock_request, 3)) # Output: False ``` Please handle transient errors appropriately by retrying up to the specified number of retries.","solution":"def executeWithRetry(request, retries): Executes the request function up to the specified number of retries. Parameters: - request: A function that returns True if the request is successful, False otherwise. - retries: The maximum number of retry attempts. Returns: - True if the request succeeds within the allowed number of retries. - False if the request fails even after the allowed number of retries. for _ in range(retries + 1): if request(): return True return False"},{"question":"You are given an array of integers nums, which might contain duplicates, and you\'re asked to find the smallest missing positive integer. The smallest missing positive integer is the smallest integer greater than 0 that is not present in the array. Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 100), followed by n space-separated integers that represent the array nums. Output For each test case, print the smallest missing positive integer in the array. Example Input 3 3 1 2 0 4 3 4 -1 1 5 7 8 9 11 12 Output 3 2 1 Explanation In the first test case, the array provided is [1, 2, 0]. The smallest missing positive integer is 3. In the second test case, the array provided is [3, 4, -1, 1]. The smallest missing positive integer is 2. In the third test case, the array provided is [7, 8, 9, 11, 12]. The smallest missing positive integer is 1.","solution":"def smallest_missing_positive(nums): This function finds the smallest missing positive integer in the given array. nums_set = set(nums) smallest_missing = 1 while smallest_missing in nums_set: smallest_missing += 1 return smallest_missing def smallest_missing_positive_in_test_cases(test_cases): This function processes multiple test cases and returns a list of the smallest missing positive integers for each case. results = [] for n, nums in test_cases: result = smallest_missing_positive(nums) results.append(result) return results def parse_input(input_str): Parse the multiline string input into a list of test cases formatted as tuples. lines = input_str.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] for i in range(1, t + 1): line = list(map(int, lines[i].split())) n = line[0] nums = line[1:] test_cases.append((n, nums)) return test_cases def format_output(results): Format the list of results into a multiline string for output. return \\"n\\".join(map(str, results))"},{"question":"Polycarp is learning about graph theory and has come across the concept of bipartite graphs. He wants to test if a given undirected graph is bipartite or not. An undirected graph is bipartite if: 1. Its set of vertices can be divided into two disjoint sets U and V such that no two graph vertices within the same set are adjacent. 2. Alternatively, the graph can be colored using two colors so that no two adjacent vertices share the same color. Polycarp will give you an undirected graph represented as an adjacency list. Your task is to determine if the graph is bipartite. Input The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2 ⋅ 10^5) — the number of vertices and the number of edges, respectively. The next m lines describe the edges of the graph. Each edge is given in the form of two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the endpoints of the edge. The edges are bidirectional. Output Print \\"YES\\" (without quotes) if the graph is bipartite, otherwise print \\"NO\\". Example Input 4 4 1 2 2 3 3 4 4 1 Output YES Input 3 3 1 2 2 3 3 1 Output NO Note In the first example, the graph can be divided into two sets: {1, 3} and {2, 4}. All edges connect vertices from different sets. Hence, the graph is bipartite. In the second example, there exists a cycle of an odd number of vertices, making it impossible to divide the graph into two sets where each edge connects vertices from different sets. Therefore, the graph is not bipartite.","solution":"def is_bipartite(n, m, edges): from collections import deque # Create adjacency list from edges adj_list = [[] for _ in range(n + 1)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # 0: uncolored, 1: color1, -1: color2 color = [0] * (n + 1) def bfs(start): queue = deque([start]) color[start] = 1 while queue: node = queue.popleft() for neighbor in adj_list[node]: if color[neighbor] == 0: color[neighbor] = -color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for i in range(1, n + 1): if color[i] == 0: if not bfs(i): return \\"NO\\" return \\"YES\\""},{"question":"Mahabir enjoys working with strings and particularly likes finding subsequences. Today, he presents you with an interesting challenge. Given a string `S` and a string `T`, you need to determine if `T` is a subsequence of `S`. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. You are to write the code to solve this problem. Input First line contains an integer `Q`, the number of queries. Each query consists of two lines: - The first line contains the string `S`. - The second line contains the string `T`. Output For each query, print \\"YES\\" if `T` is a subsequence of `S`, otherwise print \\"NO\\". Constraints 1 ≤ Q ≤ 100 1 ≤ |S|, |T| ≤ 1000 The strings contain only lowercase English letters. Example Input 3 abcde ace abcde aec xyz xy Output YES NO YES","solution":"def is_subsequence(S, T): Returns \\"YES\\" if T is a subsequence of S, otherwise returns \\"NO\\". it = iter(S) for char in T: if char not in it: return \\"NO\\" return \\"YES\\" def check_subsequences(queries): results = [] for S, T in queries: results.append(is_subsequence(S, T)) return results"},{"question":"A company is designing an access control system based on smart cards for its office building. Each employee can enter the building using their smart card, which logs the entry time. The system allows employees to swipe their smart cards at the entrance any number of times during the day. However, to prevent unauthorized access, the system administrators want to verify that a card has not been used an unusual number of times within a short period. The administrators have defined a \'suspicious period\' as any period of time during which an individual card is used more than a certain threshold number of times within a specific time frame. You are given a sequence of log entries for a single day with the entry times, and you need to determine how many unique cards have been used in a suspicious manner. Consider the list of smart card entries logged at different times throughout the day. Your task is to identify how many unique cards have been used more than a threshold number of times within any given suspicious period. Input The first line contains two integers n and t (1 ≤ n ≤ 10^5, 1 ≤ t ≤ 1000) — the number of log entries and the length of the suspicious period respectively. The next line contains one integer k (1 ≤ k ≤ 10^5) — the threshold number of times a card can be used within a suspicious period. Each of the next n lines contains two integers c_i and e_i (1 ≤ c_i ≤ 10^5, 0 ≤ e_i ≤ 24 × 60) — the ID of the card and the entry time in minutes since midnight. Output Print one integer — the number of unique cards that have been used in a suspicious manner. Examples Input 5 10 2 1 5 1 10 2 5 2 18 1 15 Output 1 Input 6 5 3 1 0 1 2 1 3 2 2 1 4 1 5 Output 1 Input 5 15 3 1 5 2 10 1 20 1 25 2 30 Output 0 Note In the first example, the card with ID 1 is used three times within a 10 minute period (at minutes 5, 10, and 15), which is more than the threshold of 2. Therefore, it is considered suspicious. In the second example, the card with ID 1 is used four times within a 5 minute period (at minutes 0, 2, 3, and 4), which is more than the threshold of 3. Therefore, it is considered suspicious. In the third example, no card is used more than 3 times within any 15 minute period, so no card is considered suspicious.","solution":"def count_suspicious_cards(n, t, k, log_entries): from collections import defaultdict import heapq # Dictionary to maintain logs for each card card_logs = defaultdict(list) # Convert log entries into card logs with sorted entry times for card_id, entry_time in log_entries: heapq.heappush(card_logs[card_id], entry_time) suspicious_cards = set() # Checking each card\'s entry times for suspicious behavior for card_id, times in card_logs.items(): while len(times) > k: first_time = heapq.heappop(times) if times[k - 1] - first_time <= t: suspicious_cards.add(card_id) break return len(suspicious_cards)"},{"question":"Alice and Bob are playing a game where they take turns to remove characters from an input string. The game starts with Alice, and the rules are simple: - On each turn, the player must remove a character from the string such that no two adjacent characters are the same. - Alice always tries to remove characters that maximize the score, while Bob tries to minimize the score. - The score is defined as the cumulative number of removed characters by Alice. Determine the score achieved by Alice by the end of the game. Constraints * The string length is between 1 and 100. * The string consists of only lowercase English letters. Input The input is provided from Standard Input in the following form. ``` S ``` Output Output an integer representing Alice\'s score by the end of the game. Examples Input ``` ababa ``` Output ``` 3 ``` Input ``` aaaa ``` Output ``` 1 ``` Input ``` abcabc ``` Output ``` 3 ```","solution":"def alice_score(s): Compute the score achieved by Alice by the end of the game. The function counts the number of turns Alice can take based on the rule that no two adjacent characters in the string can be the same. Parameters: s (str): input string Returns: int: Alice\'s score (number of turns Alice takes) score = 0 n = len(s) i = 0 while i < n: # Alice tries to make a move while i + 1 < n and s[i] == s[i + 1]: i += 1 if i < n: score += 1 i += 1 # Bob\'s turn (he tries to move once) if i < n: i += 1 return score # Examples print(alice_score(\\"ababa\\")) # Output: 3 print(alice_score(\\"aaaa\\")) # Output: 1 print(alice_score(\\"abcabc\\")) # Output: 3"},{"question":"Given an array of integers, a **contiguous subarray** is a subarray where all elements are consecutive in the original array. For example, in the array `[1, 3, 5, 2, 8]`, `[3, 5, 2]` is a contiguous subarray, but `[1, 2, 8]` is not. Your task is to write a function that finds the contiguous subarray with the maximum product and returns its product. If the array is empty, return 0. # Input - An array of integers `nums`. - The length of the array, `n`, is `0 <= n <= 10^4`. - Each element of the array is an integer between `-10^4` and `10^4`. # Output - An integer representing the maximum product of a contiguous subarray. # Example Example 1: Input: ``` nums = [2, 3, -2, 4] ``` Output: ``` 6 ``` Explanation: The contiguous subarray `[2, 3]` has the maximum product `2 * 3 = 6`. Example 2: Input: ``` nums = [-2, 0, -1] ``` Output: ``` 0 ``` Explanation: The contiguous subarray `[0]` has the maximum product `0`. Example 3: Input: ``` nums = [-2, -3, 0, -2, -40] ``` Output: ``` 80 ``` Explanation: The contiguous subarray `[-2, -40]` has the maximum product `-2 * -40 = 80`. # Note - The product of an empty array is `0` (by definition in this problem). # Function Signature ```python def maxProduct(nums: List[int]) -> int: pass ``` # Constraints - You may not modify the input array. - Your solution should have a linear time complexity, i.e., O(n).","solution":"from typing import List def maxProduct(nums: List[int]) -> int: if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"In a magical kingdom far away, there exists a peculiar language called \\"Palindromic Language.\\" Words in this language can be read the same backward as forward. The people of this kingdom are very fond of these words, and they always like to arrange them in a special sequence. One day, the king of the kingdom asked his wise advisor to help him organize the palace library such that all titles are placed in lexicographical order – but only the words that are palindromes. The wise advisor needs some help to fulfill the king\'s wish. Write a program that by the given book titles will find and sort all the palindromic titles in lexicographical order. Input The first line contains an integer n (1 ≤ n ≤ 100), where n is the number of book titles. Each of the next n lines contains one title, consisting of lowercase letters only. The length of each title is at most 100 characters. Output Print the required palindromic titles in lexicographical order, one per line. If there are no palindromic titles, print \'No palindromic titles found\'. Examples Input 5 radar hello level world deified Output deified level radar Input 3 cat dog fish Output No palindromic titles found","solution":"def is_palindrome(word): Check if a given word is a palindrome. return word == word[::-1] def find_sorted_palindromic_titles(n, titles): Find and sort all the palindromic titles in lexicographical order. Args: n : int : number of titles titles : list of str : list of titles Returns: list of str : sorted palindromic titles, or [\'No palindromic titles found\'] if there are none palindromic_titles = [title for title in titles if is_palindrome(title)] if not palindromic_titles: return [\'No palindromic titles found\'] return sorted(palindromic_titles)"},{"question":"A large software company has a hierarchical structure of employees. Each employee has a unique ID and a supervisor ID indicating their direct supervisor. The CEO is the only employee who does not have a supervisor. You need to assign a hierarchy level to each employee. The CEO should be level 1, the direct subordinates of the CEO should be level 2, their direct subordinates should be level 3, and so on. Write a program to determine the level of each employee given the hierarchy information. Input: The first line contains an integer n (1 ≤ n ≤ 10^5), representing the number of employees. The next n lines each contain two integers, employee_id and supervisor_id, (1 ≤ employee_id, supervisor_id ≤ n), indicating that the employee with ID employee_id is directly supervised by the employee with ID supervisor_id. For the CEO, supervisor_id will be given as 0. Output: Print n lines, each containing an integer representing the level of the employee with the corresponding ID. The employees should be printed in ascending order of their IDs. If there are multiple valid orderings, you may print any. Examples: Input: 6 1 0 2 1 3 1 4 2 5 2 6 3 Output: 1 2 2 3 3 3 Input: 4 1 0 2 1 3 2 4 3 Output: 1 2 3 4","solution":"def determine_hierarchy_levels(n, hierarchy): from collections import defaultdict, deque # Initialize dictionary to store subordinates of each employee subordinates = defaultdict(list) # Dictionary to store level of each employee levels = {} # Populate the subordinates dictionary and find the CEO ID ceo_id = None for employee_id, supervisor_id in hierarchy: if supervisor_id == 0: ceo_id = employee_id else: subordinates[supervisor_id].append(employee_id) # Perform BFS to determine levels queue = deque([(ceo_id, 1)]) while queue: curr_employee, curr_level = queue.popleft() levels[curr_employee] = curr_level for subordinate in subordinates[curr_employee]: queue.append((subordinate, curr_level + 1)) # Return levels in ascending order of employee id return [levels[i] for i in range(1, n + 1)]"},{"question":"During a sports event, a scoreboard was maintained to keep track of scores achieved by various teams. Each team\'s score either increases or decreases based on certain events. Your task is to calculate the final score of each team after all events. Input: The first line contains an integer T, denoting the number of test cases. Each test case starts with an integer N, representing the number of events. The next N lines contain a string S (the team\'s name) and an integer X (the change in score, which can be positive or negative). Output: For each test case, print the team name and their final score in the format \\"Team: Score\\". The output for each test case should start with \\"Case #i:\\" where i is the test case number. Constraints: 1 ≤ T ≤ 5 1 ≤ N ≤ 100 1 ≤ |S| ≤ 20 -100 ≤ X ≤ 100 SAMPLE INPUT: 2 3 TeamA 10 TeamB -5 TeamA 20 2 TeamC 15 TeamC -10 SAMPLE OUTPUT: Case #1: TeamA: 30 TeamB: -5 Case #2: TeamC: 5","solution":"def calculate_final_scores(T, data): results = [] for case_number in range(T): N = data[case_number][0] events = data[case_number][1] scores = {} for event in events: team = event[0] score_change = event[1] if team not in scores: scores[team] = score_change else: scores[team] += score_change result = [f\\"Case #{case_number + 1}:\\"] for team, score in sorted(scores.items()): result.append(f\\"{team}: {score}\\") results.append(\\"n\\".join(result)) return \\"n\\".join(results) # Example usage input_data = [ (3, [(\\"TeamA\\", 10), (\\"TeamB\\", -5), (\\"TeamA\\", 20)]), (2, [(\\"TeamC\\", 15), (\\"TeamC\\", -10)]) ] print(calculate_final_scores(2, input_data))"},{"question":"Ria is practicing her programming skills and came up with a unique problem. She wants to determine if it is possible to rearrange the characters of a given string such that no two adjacent characters are the same. Being a beginner, Ria needs your help to figure this out. Can you help her? Input The first line contains an integer T, the number of test cases. Each of the next T lines contains a single string s, consisting of lowercase English letters. Output For each test case, print \\"YES\\" if it is possible to rearrange the string so that no two adjacent characters are the same, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 10 1 ≤ |s| ≤ 100 Example Input 3 aab aa abc Output YES NO YES","solution":"from collections import Counter import heapq def can_reorganize_string(s): Determines if it\'s possible to rearrange the string so that no two adjacent characters are the same. # Count frequency of each character freq = Counter(s) # Create a max-heap based on the frequencies max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' rearranged_str = [] while max_heap: count, char = heapq.heappop(max_heap) rearranged_str.append(char) # If there\'s a previously deferred character, push it back to the heap if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update previous character and count prev_count, prev_char = count+1, char # increment count because we\'re using -ve values # Check if the rearranged string has the same length as the original return \\"YES\\" if len(rearranged_str) == len(s) else \\"NO\\" def can_reorganize_strings(test_cases): results = [] for s in test_cases: results.append(can_reorganize_string(s)) return results"},{"question":"In a remote village, there are n houses connected by m roads. Each road is bidirectional and connects two distinct houses. The village head wants to ensure that there are no unnecessary roads that create alternate paths between houses. Essentially, he wants to keep the village connected with the minimum number of roads required. Given the number of houses and the list of roads, your task is to determine the maximum number of roads that can be removed while keeping the village connected. Input: The first line contains an integer T, the number of test cases. Each test case starts with two integers n and m, the number of houses and the number of roads respectively. The following m lines contain two integers u and v, denoting that there is a road between house u and house v. Output: For each test case, print the maximum number of roads that can be removed to keep the village still connected. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 1000 1 ≤ m ≤ 2000 1 ≤ u, v ≤ n Note: The village is connected initially i.e., there is at least one path between any pair of houses in the original configuration. SAMPLE INPUT: 2 4 4 1 2 2 3 3 4 4 1 5 6 1 2 1 3 3 4 4 5 2 5 SAMPLE OUTPUT: 1 2 Explanation: For the first test case, we can remove any one road to maintain connectivity with three roads (which form a tree structure). For the second test case, we can remove two roads (e.g., the roads between houses 1-3 and 2-5, leaving a tree structure).","solution":"def maximum_roads_to_remove(T, test_cases): Returns the maximum number of roads that can be removed while keeping the village still connected. results = [] for n, m, roads in test_cases: # For a connected graph with n nodes, the minimum number of edges required to keep it connected is n-1. min_edges_needed = n - 1 # The maximum number of roads that can be removed while still keeping the graph connected is m - min_edges_needed max_roads_removable = m - min_edges_needed results.append(max_roads_removable) return results"},{"question":"A city is organizing a unique relay race event to promote fitness among its residents. In this relay race, participants run in a sequence, each handing over a baton to the next runner. Each participant’s speed and the time they take to pass the baton is recorded. Your task is to determine the total time taken for the relay race. The total time includes the sum of the running times of all participants and the baton passing times between each consecutive participant. Each participant is identified by a unique integer assigned from 1 to N. Rules: - Each participant runs for a distance of 1 unit. - A participant takes a certain amount of time to pass the baton to the next participant. - The race starts with participant 1 and ends with participant N. Input Format: - The first line contains an integer N (1 ≤ N ≤ 100), the number of participants. - The second line contains N space-separated integers t_i (1 ≤ t_i ≤ 100), where t_i is the time taken by the i-th participant to run their distance. - The third line contains N-1 space-separated integers p_j (1 ≤ p_j ≤ 100), where p_j is the time taken to pass the baton from participant j to participant j+1. Output Format: - Print a single integer which denotes the total time taken for the relay race. Examples: Input: 5 10 15 20 25 30 5 10 5 10 Output: 130 Input: 3 8 12 16 4 6 Output: 46 Explanation: - In the first example, the total time is 10 (first participant running) + 5 (baton passing) + 15 (second participant running) + 10 (baton passing) + 20 (third participant running) + 5 (baton passing) + 25 (fourth participant running) + 10 (baton passing) + 30 (fifth participant running) = 130. - In the second example, the total time is 8 (first participant running) + 4 (baton passing) + 12 (second participant running) + 6 (baton passing) + 16 (third participant running) = 46.","solution":"def relay_race_total_time(N, running_times, passing_times): Calculate the total time taken for the relay race. :param N: Number of participants :param running_times: List of running times for each participant :param passing_times: List of baton passing times between participants :return: Total time taken for the relay race total_time = sum(running_times) # sum of all running times total_time += sum(passing_times) # sum of all passing times between participants return total_time"},{"question":"You are given a rectangular grid of size n by m, consisting of cells that are either land or water. You want to identify the minimum number of islands that are formed by land cells in the grid. An island is a group of land cells connected horizontally or vertically. Water cells are represented by \'0\' and land cells are represented by \'1\'. There are no diagonal connections between land cells. Design an algorithm to find the number of distinct islands in the grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns in the grid, respectively. Each of the next n lines contains m characters \'0\' or \'1\' representing the grid. Output Output a single integer — the minimum number of islands formed in the grid. Examples Input 4 5 11000 11000 00100 00011 Output 3 Input 3 3 111 010 111 Output 1 Input 4 4 1110 1100 0001 0011 Output 2 Note In the first example, there are two islands formed by the clusters of 1s. The first island consists of cells at positions (1,1), (1,2), (2,1), and (2,2). The second island consists of the single cell at (3,3) and the third island consists of cells at positions (4,4) and (4,5). In the second example, all \'1\' cells are connected, forming one large island. In the third example, the top-left corner and the middle-left cells are connected, forming one island, while the bottom-right cells form another island.","solution":"def num_islands(grid): if not grid: return 0 n, m = len(grid), len(grid[0]) visited = [[False for _ in range(m)] for _ in range(n)] def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == \'0\' or visited[x][y]: return visited[x][y] = True dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) islands = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\' and not visited[i][j]: dfs(i, j) islands += 1 return islands"},{"question":"You are working on a 3D modeling software that allows manipulation of various geometrical shapes. One of the tasks is to fit a smaller 3D box inside a larger 3D box. Both boxes are axis-aligned, meaning their edges are parallel to the coordinate axes. Given the dimensions and positions of both boxes, determine if the smaller box can fit entirely within the larger box without any part of it protruding outside. Input The input consists of multiple datasets. Each dataset is given in the following format: > x1 y1 z1 w1 h1 d1 > x2 y2 z2 w2 h2 d2 The first line gives the position of the lower-left-back corner (x1, y1, z1) and dimensions (w1, h1, d1) of the larger box, where w1 is the width along the x-axis, h1 is the height along the y-axis, and d1 is the depth along the z-axis. The second line gives the position of the lower-left-back corner (x2, y2, z2) and dimensions (w2, h2, d2) of the smaller box. All coordinates and dimensions are integers, and the values are within the range -10,000 to 10,000. The end of the input is indicated by a single line containing the integer 0. Output For each dataset, output \\"Yes\\" if the smaller box can fit entirely within the larger box, and \\"No\\" otherwise. Sample Input > 0 0 0 10 10 10 > 2 2 2 5 5 5 > 0 0 0 10 10 10 > 5 5 5 7 7 7 > -5 -5 -5 15 15 15 > -4 -4 -4 7 7 7 > 0 Sample Output > Yes > No > Yes Example Input 0 0 0 10 10 10 2 2 2 5 5 5 0 0 0 10 10 10 5 5 5 7 7 7 -5 -5 -5 15 15 15 -4 -4 -4 7 7 7 0 Output Yes No Yes","solution":"def can_fit_inside(x1, y1, z1, w1, h1, d1, x2, y2, z2, w2, h2, d2): Determines if the smaller box can fit entirely inside the larger box. Parameters: - x1, y1, z1: Coordinates of the lower-left-back corner of the larger box. - w1, h1, d1: Width, height, and depth of the larger box along the x, y, and z axes. - x2, y2, z2: Coordinates of the lower-left-back corner of the smaller box. - w2, h2, d2: Width, height, and depth of the smaller box along the x, y, and z axes. Returns: - \\"Yes\\" if the smaller box can fit inside the larger box without protruding. - \\"No\\" otherwise. # Larger box boundaries x1_max = x1 + w1 y1_max = y1 + h1 z1_max = z1 + d1 # Smaller box boundaries x2_max = x2 + w2 y2_max = y2 + h2 z2_max = z2 + d2 # Check if every corner/edge of the smaller box fits inside the larger box if (x1 <= x2 <= x1_max and x1 <= x2_max <= x1_max and y1 <= y2 <= y1_max and y1 <= y2_max <= y1_max and z1 <= z2 <= z1_max and z1 <= z2_max <= z1_max): return \\"Yes\\" else: return \\"No\\" def process_datasets(datasets): results = [] for dataset in datasets: x1, y1, z1, w1, h1, d1, x2, y2, z2, w2, h2, d2 = dataset result = can_fit_inside(x1, y1, z1, w1, h1, d1, x2, y2, z2, w2, h2, d2) results.append(result) return results"},{"question":"You are given an array of integers `heights` representing the heights of buildings. You need to build a new building such that the difference between the height of the new building and the height of the tallest building in the array is minimized. You are allowed to reduce the height of the new building to be shorter than the tallest building, but not increase it beyond the tallest building\'s height. Your task is to find the height of the new building. Input The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of buildings in the array. The second line contains a sequence of `n` integers `heights[i]` (1 ≤ heights[i] ≤ 10000) — the heights of the buildings. Output Print the height of the new building such that the difference between its height and the height of the tallest building is minimized. Examples Input 5 3 10 5 2 8 Output 10 Input 4 7 4 9 3 Output 9","solution":"def find_height_of_new_building(n, heights): Finds the height of the new building such that the difference between its height and the height of the tallest building is minimized. Parameters: n (int): Number of buildings in the array heights (list of int): Heights of the buildings Returns: int: Height of the new building tallest = max(heights) return tallest"},{"question":"For a given array a_1, a_2, a_3, ..., a_N of N elements, and an integer M, find the length of the longest sub-array where the sum of the elements in the sub-array is at most M. If no such sub-array exists, report 0. Constraints * 1 leq N leq 10^5 * 1 leq M leq 10^9 * 1 leq a_i leq 10^4 Input The input is given in the following format: N M a_1 a_2 ... a_N Output Print the length of the longest sub-array in a line. Examples Input 7 15 1 2 3 4 5 6 7 Output 5 Input 5 10 3 1 2 1 5 Output 4 Input 5 3 4 5 6 7 8 Output 0","solution":"def longest_subarray_with_sum_at_most_k(N, M, arr): Returns the length of the longest sub-array where the sum of the elements in the sub-array is at most M. max_length = 0 current_sum = 0 start = 0 for end in range(N): current_sum += arr[end] while current_sum > M: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"# Venue Booking System You are developing a simple venue booking system for a conference center that has multiple rooms. Each room can be reserved for meetings, events, or conferences. The system allows for checking room availability and booking a room if it is available. You need to implement a function that checks if a room can be booked without overlapping with any existing bookings. The function should take the room name, the start time and end time of the requested booking, and a list of existing bookings for that room. A booking is represented as a dictionary with keys \\"start\\", \\"end\\", and \\"room\\" where \\"start\\" and \\"end\\" are integers representing the start and end times (in 24-hour format, e.g., 0 to 23), and \\"room\\" is a string representing the room name. The function should return `True` if the room can be booked for the given time slot without any overlap with existing bookings, otherwise `False`. Input: - A string `room_name`, representing the name of the room to be booked. - Two integers `start_time` and `end_time`, representing the start and end times of the requested booking. - A list of dictionaries `existing_bookings`, where each dictionary represents an existing booking with keys \\"start\\", \\"end\\", and \\"room\\". Output: - A boolean value `True` if the room can be booked without any overlapping, otherwise `False`. Example: Input: ``` \\"Room A\\", 10, 12, [{\\"start\\": 9, \\"end\\": 10, \\"room\\": \\"Room A\\"}, {\\"start\\": 11, \\"end\\": 13, \\"room\\": \\"Room A\\"}, {\\"start\\": 14, \\"end\\": 16, \\"room\\": \\"Room B\\"}] ``` Output: ``` False ``` Input: ``` \\"Room B\\", 10, 12, [{\\"start\\": 9, \\"end\\": 10, \\"room\\": \\"Room A\\"}, {\\"start\\": 11, \\"end\\": 13, \\"room\\": \\"Room A\\"}, {\\"start\\": 14, \\"end\\": 16, \\"room\\": \\"Room B\\"}] ``` Output: ``` True ``` Note: - Bookings are considered overlapping if they share any time in common, except for the case where one booking ends exactly when another begins. - You can assume that `start_time` is always less than `end_time`.","solution":"def can_book_room(room_name, start_time, end_time, existing_bookings): Returns True if the room can be booked without overlapping with existing bookings, False otherwise. for booking in existing_bookings: if booking[\\"room\\"] == room_name: if not (end_time <= booking[\\"start\\"] or start_time >= booking[\\"end\\"]): return False return True"},{"question":"You are working as a software engineer at a robotics company. One of your tasks is to optimize the robotic arm movements. The arm can move in two dimensions and follows a sequence of commands. The commands can be: - `L`: move left by 1 unit - `R`: move right by 1 unit - `U`: move up by 1 unit - `D`: move down by 1 unit Initially, the robotic arm starts at the origin (0, 0). You are given a string of commands and need to compute the ending coordinates of the robotic arm after executing all the commands in the given sequence. Write a program to determine the final position of the robotic arm after following the given sequence of commands. Input The only line contains a string `commands` (1 ≤ |commands| ≤ 104) consisting of characters \'L\', \'R\', \'U\', and \'D\'. Output Print two integers x and y — the final coordinates of the robotic arm. Examples Input LURD Output 0 0 Input LLRRUUDD Output 0 0 Input UUDDLLRR Output 0 0 Note In the first example, the robotic arm moves one unit left, one unit up, one unit right, and one unit down, returning to the origin (0, 0). In the second example, the arm moves left and right twice each and up and down twice each, also returning to the origin (0, 0). In the third example, the arm similarly returns to the origin after completing its movements.","solution":"def final_coordinates(commands): Given a string of commands, compute the final coordinates of the robotic arm after executing all the commands. Commands: - \'L\': move left by 1 unit - \'R\': move right by 1 unit - \'U\': move up by 1 unit - \'D\': move down by 1 unit Parameters: commands (str): String of commands consisting of \'L\', \'R\', \'U\', \'D\' Returns: tuple: Final coordinates (x, y) of the robotic arm x, y = 0, 0 for command in commands: if command == \'L\': x -= 1 elif command == \'R\': x += 1 elif command == \'U\': y += 1 elif command == \'D\': y -= 1 return x, y"},{"question":"Rita is at home working on her project using her laptop. She starts noticing that, after \'n\' minutes, her laptop\'s battery charge diminishes by 1 unit. Rita can work efficiently as long as her laptop has at least 10 units of charge left. If the battery charge drops below 10 units, she has to put her laptop to charge. Charging takes 1 minute and increases the battery charge by 2 units. Given the initial battery charge of the laptop, write a program to determine how many minutes Rita can continue working before she must first plug in the charger. Input The first line contains an integer \'initial_charge\' (1 ≤ initial_charge ≤ 100) — the initial battery charge of Rita\'s laptop. The second line contains a single integer \'n\' (1 ≤ n ≤ 1000) — the number of minutes Rita intends to work. Output Print a single integer — the number of minutes Rita can work efficiently before she needs to charge her laptop for the first time. Examples Input 15 10 Output 5 Input 20 50 Output 10 Explanation In the first example, Rita\'s laptop has 15 units of charge. She can work for 5 minutes before the battery charge drops to 10 units, after which she would need to charge her laptop. In the second example, Rita\'s laptop has 20 units of charge. She can work for 10 minutes before the battery charge drops to 10 units.","solution":"def minutes_before_charging(initial_charge, n): Given the initial battery charge of the laptop and the number of minutes intended to work, determine how many minutes Rita can work efficiently before she needs to charge her laptop for the first time. :param initial_charge: int, initial battery charge (1 ≤ initial_charge ≤ 100) :param n: int, number of minutes intended to work (1 ≤ n ≤ 1000) :return: int, number of minutes Rita can work efficiently before charging the laptop # Rita can work until her battery drops below 10 units. # We need to find out how many minutes it will take before her battery drops below 10 units. minutes_can_work = 0 while initial_charge > 10 and minutes_can_work < n: minutes_can_work += 1 initial_charge -= 1 return minutes_can_work"},{"question":"You are given an undirected tree with `n` nodes and `n-1` edges. Each node can be either empty or contain an object. Initially, all nodes are empty. You need to process a set of queries of the following types: * Place an object in node `i`. * Remove an object from node `i`. * Find the shortest distance between the closest pair of nodes containing objects. If no objects are present, return -1. Input The first line contains an integer `n` (2 ≤ n ≤ 100,000) — the number of nodes in the tree. Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) representing an edge in the tree. The next line contains an integer `q` (1 ≤ q ≤ 300,000) — the number of queries. Each of the next `q` lines contains a query of one of the following types: * `1 i` — Place an object in node `i`. * `2 i` — Remove the object from node `i`. * `3` — Find the shortest distance between the closest pair of nodes containing objects (if no objects are present, return -1). Output For each query of type `3`, print the resulting shortest distance or `-1` if no such distance is defined. Examples Input 5 1 2 1 3 2 4 2 5 7 1 2 1 5 3 2 2 3 2 5 3 Output 1 -1 -1 Explanation - Initially, no nodes have objects. - After placing objects at nodes 2 and 5, the closest pair is between nodes 2 and 5 with a distance of 1. - Removing the object from node 2 leaves only one object at node 5, so the query returns -1. - Removing the last object at node 5 means there are no objects left, so the query returns -1 again.","solution":"from collections import defaultdict, deque import heapq import sys sys.setrecursionlimit(200000) class TreeDistance: def __init__(self, n): self.n = n self.edges = defaultdict(list) self.objects = set() self.distances = {} def add_edge(self, u, v): self.edges[u].append(v) self.edges[v].append(u) def place_object(self, i): self.objects.add(i) def remove_object(self, i): self.objects.discard(i) def bfs(self, start): dist = {start: 0} queue = deque([start]) while queue: node = queue.popleft() for neighbor in self.edges[node]: if neighbor not in dist: dist[neighbor] = dist[node] + 1 queue.append(neighbor) return dist def find_shortest_distance(self): if len(self.objects) < 2: return -1 min_distance = float(\'inf\') for obj in self.objects: obj_distances = self.bfs(obj) for other_obj in self.objects: if obj != other_obj: min_distance = min(min_distance, obj_distances[other_obj]) return min_distance if min_distance != float(\'inf\') else -1 def process_tree_queries(n, edges, queries): tree = TreeDistance(n) for u, v in edges: tree.add_edge(u, v) results = [] for query in queries: if query[0] == 1: tree.place_object(query[1]) elif query[0] == 2: tree.remove_object(query[1]) elif query[0] == 3: results.append(tree.find_shortest_distance()) return results"},{"question":"Limak is training for the upcoming Bear Marathon. There are n checkpoints lined up in a straight line, numbered from 1 to n. Each checkpoint has a certain number of water bottles available for the runners. However, some checkpoints may not have any water bottles at all. Given Limak\'s starting position at checkpoint a, he can only carry a maximum of k water bottles at any time. Limak plans to collect as many water bottles as possible as he runs from checkpoint to checkpoint, without exceeding his carrying capacity. Your task is to determine the maximum number of water bottles Limak can collect starting from checkpoint a and moving in either direction along the checkpoints. Input The first line of the input contains three integers n, a, and k (1 ≤ a ≤ n ≤ 100, 1 ≤ k ≤ 100) — the number of checkpoints, the starting checkpoint of Limak, and the maximum number of water bottles he can carry. The second line contains n integers w1, w2, ..., wn (0 ≤ wi ≤ 100), where wi is the number of water bottles available at the i-th checkpoint. Output Print the maximum number of water bottles Limak can collect. Examples Input 6 3 10 0 5 2 8 3 12 Output 10 Input 5 2 5 1 2 3 4 5 Output 5 Note In the first sample, Limak starts at checkpoint 3 with 2 water bottles available. Moving to checkpoint 4, he collects 8 water bottles, reaching the maximum carrying capacity of 10. He ignores the rest of the checkpoints because he can\'t carry more than 10 water bottles. In the second sample, Limak starts at checkpoint 2 with 2 water bottles available. He can either choose checkpoints 1 and 3 or any other combination, but the maximum he can collect is 5 water bottles since that is his carrying capacity limit.","solution":"def max_water(n, a, k, water): Returns the maximum number of water bottles Limak can collect without exceeding his carrying capacity. Parameters: n (int): Number of checkpoints. a (int): Starting checkpoint of Limak. k (int): Maximum number of water bottles Limak can carry. water (List[int]): List of integers where each element is the number of water bottles at each checkpoint. Returns: int: Maximum number of water bottles Limak can collect. max_bottles = 0 current_count = 0 # Move to the left from the starting point for i in range(a-1, 0, -1): if current_count < k: if current_count + water[i-1] <= k: current_count += water[i-1] else: current_count = k break else: break # Move to the right from the starting point for i in range(a-1, n): if current_count < k: if current_count + water[i] <= k: current_count += water[i] else: current_count = k break else: break return min(current_count, k)"},{"question":"A company wants to ensure that every email address created within their system follows a specific format. An email address is considered valid if it meets the following criteria: 1. It contains exactly one \'@\' symbol. 2. The local part (before the \'@\' symbol) is non-empty and contains only alphanumeric characters. 3. The domain part (after the \'@\' symbol) consists of one or more labels separated by periods (\'.\'). Each label must be non-empty and consist only of alphanumeric characters. Write a function that checks if a given email address is valid based on the rules above. If the email address is valid, the function should print \\"VALID\\". Otherwise, it should print \\"INVALID\\". Input The input consists of a single string \'email\' (1 ≤ |email| ≤ 100), representing an email address. Output Output \\"VALID\\" (without quotes) if the email address meets the specified criteria. Otherwise, output \\"INVALID\\" (without quotes). Examples Input example@domain.com Output VALID Input example@domain..com Output INVALID Input @example.com Output INVALID Input example@domain. Output INVALID Function Signature ```python def validate_email(email: str) -> str: # Your code here ```","solution":"def validate_email(email: str) -> str: This function checks whether a given email address is valid based on the specified criteria. if email.count(\'@\') != 1: return \\"INVALID\\" local_part, domain_part = email.split(\'@\', 1) if not local_part.isalnum(): return \\"INVALID\\" domain_labels = domain_part.split(\'.\') if any(not label.isalnum() for label in domain_labels) or any(len(label) == 0 for label in domain_labels): return \\"INVALID\\" return \\"VALID\\""},{"question":"You are given a grid of size NxM consisting of positive integers. Each cell in the grid represents the height of that cell. You need to find the maximum difference in heights between any two cells in the grid such that one cell can be reached from the other by repeatedly moving up, down, left, or right to an adjacent cell. This maximum difference is known as the \\"maximum reachable height difference\\" in the grid. # Input Format - The first line of input contains two integers N and M, the number of rows and columns in the grid, respectively. - The next N lines each contain M integers separated by spaces, representing the heights of the cells in the grid. # Output Format - Output a single integer, the maximum reachable height difference in the grid. # Constraints - All values in input are integers. - 1 ≤ N, M ≤ 1000 - 1 ≤ height of each cell ≤ 10^6 # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 8 ``` Explanation The maximum difference is between the cell with height 9 and the cell with height 1. All cells are reachable from each other since the grid is fully connected. The maximum reachable height difference is |9 - 1| = 8.","solution":"def max_reachable_height_difference(grid): Given a grid with heights, returns the maximum reachable height difference. min_height = float(\'inf\') max_height = float(\'-inf\') for row in grid: for height in row: if height < min_height: min_height = height if height > max_height: max_height = height return max_height - min_height"},{"question":"Bob loves pattern recognition and has recently taken an interest in numbers that can be expressed as the sum of two positive, consecutive integers. Bob wants to identify how many numbers within a given range can be represented in this manner. Help Bob by writing a program that determines the number of such numbers within a specified range [L, R], inclusive. A number x can be expressed as the sum of two positive, consecutive integers if and only if there exists some integer k such that: x = k + (k + 1) = 2k + 1. Input The input consists of a single line containing two integers L and R (1 ≤ L ≤ R ≤ 10^7) which represent the range of numbers Bob is interested in. Output Output a single integer — the count of numbers in the range [L, R] that can be expressed as the sum of two positive, consecutive integers. Example Input 1 10 Output 5 Explanation: The numbers in the range [1, 10] that can be expressed as the sum of two positive, consecutive integers are: 3 (1+2), 5 (2+3), 7 (3+4), 9 (4+5). Hence, there are 5 such numbers in total.","solution":"def count_consecutive_sum_numbers(L, R): Returns the count of numbers in the range [L, R] that can be expressed as the sum of two positive, consecutive integers. # Counting numbers of the form 2k + 1, where k is a non-negative integer count = 0 for x in range(L, R + 1): if x % 2 == 1: count += 1 return count"},{"question":"Given two strings, `S1` and `S2`, determine if `S1` can be transformed into `S2` by removing exactly one character from `S1` without changing the order of the remaining characters. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Constraints * 1 <= |S1|, |S2| <= 10^5 * Both strings consist of lowercase English letters Input Input is given from Standard Input in the following format: S1 S2 Output Print \\"YES\\" if `S1` can be transformed into `S2` by removing exactly one character from `S1`. Otherwise, print \\"NO\\". Examples Input abdc abc Output YES Input abcdef abdf Output NO","solution":"def can_transform_by_removing_one_char(S1, S2): Determines if S1 can be transformed into S2 by removing exactly one character from S1 without changing the order of the remaining characters. if len(S1) != len(S2) + 1: return \\"NO\\" i, j = 0, 0 while i < len(S1) and j < len(S2): if S1[i] == S2[j]: j += 1 i += 1 # If j reached to the end of S2, it means S2 is a subsequence of S1 with one character removed return \\"YES\\" if j == len(S2) else \\"NO\\""},{"question":"You are given an array of n integers. Your task is to rearrange the elements of the array so that the absolute difference between any two adjacent elements is minimized. If there are multiple solutions, output any of them. Input The first line contains one integer n (2 ≤ n ≤ 100 000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100 000) — the elements of the array. Output Output n integers — the rearranged array to minimize the absolute difference between any two adjacent elements. Examples Input 5 4 3 2 10 1 Output 1 2 3 4 10 Input 3 5 10 5 Output 5 5 10","solution":"def minimize_adjacent_difference(arr): Rearranges the elements of the array so that the absolute difference between any two adjacent elements is minimized. return sorted(arr)"},{"question":"In a distant kingdom, there are N cities connected by M bidirectional roads. Each road has a unique toll fee associated with it. The king has a peculiar interest in the infrastructure and wishes to identify the minimum toll that needs to be paid to travel from city 1 to city N. If there is no way to travel from city 1 to city N, output -1. Given N cities and M roads, find the minimum toll to travel from city 1 to city N. # Input - The first line contains two integers N and M (1 ≤ N ≤ 1000, 0 ≤ M ≤ 10000), the number of cities and roads respectively. - The next M lines each contain three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000) describing a road between cities u and v with a toll fee of w. # Output - Output a single integer, the minimum toll required to travel from city 1 to city N. If there\'s no way to travel from city 1 to city N, output -1. # Example Input ``` 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 ``` Output ``` 8 ``` Input ``` 3 1 1 2 10 ``` Output ``` -1 ``` # Note In the first example, the route with the minimal toll from city 1 to city N is 1 -> 2 -> 3 -> 5 with a total toll of 2 + 1 + 3 = 6. In the second example, there\'s no possible way to travel from city 1 to city 3. Thus, the output is -1.","solution":"import heapq def min_toll_to_travel(N, M, roads): # Create an adjacency list adj = {i: [] for i in range(1, N+1)} for u, v, w in roads: adj[u].append((v, w)) adj[v].append((u, w)) # Dijkstra\'s algorithm pq = [(0, 1)] # (toll, city) tolls = {i: float(\'inf\') for i in range(1, N+1)} tolls[1] = 0 visited = set() while pq: current_toll, city = heapq.heappop(pq) if city in visited: continue visited.add(city) if city == N: return current_toll for neighbor, weight in adj[city]: if neighbor not in visited: new_toll = current_toll + weight if new_toll < tolls[neighbor]: tolls[neighbor] = new_toll heapq.heappush(pq, (new_toll, neighbor)) return -1 if tolls[N] == float(\'inf\') else tolls[N]"},{"question":"A cybersecurity company hired you to help analyze a suspect communication pattern. They have provided you with a string of characters that represents intercepted communications. Your task is to determine if the string contains any repeated subsequences of length three or more. A subsequence is defined as a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. The following t lines each contain a single string s (1 ≤ |s| ≤ 3000) — the intercepted communication string consisting of lowercase English letters only. Output For each test case, print \\"YES\\" if the string contains any repeated subsequences of length three or more, otherwise print \\"NO\\". Examples Input 3 abc abcdabc abcabcabc Output NO YES YES Explanation In the first test case, the string \\"abc\\" does not contain any repeated subsequences of length three or more. In the second test case, the string \\"abcdabc\\" contains the subsequence \\"abc\\" repeated twice. In the third test case, the string \\"abcabcabc\\" contains the subsequence \\"abc\\" repeated multiple times.","solution":"def has_repeated_subsequence(s): Returns \'YES\' if the string contains any repeated subsequences of length three or more, \'NO\' otherwise. n = len(s) if n < 3: return \\"NO\\" # Create a dictionary to store the frequency of subsequences subseq_dict = {} # Iterate through all possible subsequence lengths for length in range(3, n + 1): for i in range(n - length + 1): subseq = s[i:i + length] if subseq in subseq_dict: return \\"YES\\" subseq_dict[subseq] = True return \\"NO\\" def check_repeated_subsequences(t, test_cases): results = [] for s in test_cases: results.append(has_repeated_subsequence(s)) return results"},{"question":"Given a series of daily stock prices of a company, you are required to determine the maximum profit an investor could have made by buying one share and then later selling the share. If the investor cannot make any profit, the output should be 0. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of days for which the stock prices are provided. The second line contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 10^4) — the prices of the stock on each day. Output Output a single integer — the maximum possible profit. If no profit can be made, output 0. Example Input 6 7 1 5 3 6 4 Output 5 Explanation In this example, the optimal transactions would be to buy on day 2 (price = 1) and sell on day 5 (price = 6), resulting in a profit of 6 - 1 = 5.","solution":"def max_profit(prices): This function takes a list of stock prices and returns the maximum profit that could be achieved by buying and then later selling the stock. If no profit can be made, the function returns 0. :param prices: List[int] - a list of integers representing the stock prices. :return: int - the maximum possible profit. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"You are given a grid of characters with R rows and C columns. The grid contains only lowercase English letters. You need to develop a tool that finds the longest substring (continuous characters in a single row) which can be read the same forwards and backwards (a palindrome). Input The input is given from Standard Input in the following format: R C grid The first line contains two integers R and C (1 ≤ R, C ≤ 1000) representing the number of rows and columns respectively. The next R lines each contain a string of C characters representing the grid. Output Print the length of the longest palindromic substring found in any row of the grid. If there is no palindrome present, print 0. Examples Input 4 5 abcba axcye anabb yxzzy Output 5 Input 3 7 abcdefg hijklmn opqrstu Output 1 Input 2 3 aba xyz Output 3","solution":"def longest_palindromic_substring_length(grid): Returns the length of the longest palindromic substring found in any row of the grid. def longest_palindrome_in_row(row): Helper function to find the longest palindromic substring in a single row. max_len = 0 for i in range(len(row)): # Check for odd length palindromes l, r = i, i while l >= 0 and r < len(row) and row[l] == row[r]: max_len = max(max_len, r - l + 1) l -= 1 r += 1 # Check for even length palindromes l, r = i, i + 1 while l >= 0 and r < len(row) and row[l] == row[r]: max_len = max(max_len, r - l + 1) l -= 1 r += 1 return max_len max_palindromic_length = 0 for row in grid: max_palindromic_length = max(max_palindromic_length, longest_palindrome_in_row(row)) return max_palindromic_length"},{"question":"Given two strings A and B, check if A is a subsequence of B. A string A is considered a subsequence of B if and only if all characters of A can be found in B in the same order, but not necessarily consecutively. Input format A B Constraint - A and B consist of lowercase alphabets - 1 leq |A|, |B| leq 2 times 10^5 Output format Print `True` if A is a subsequence of B, otherwise print `False`. Input example 1 abc ahbgdc Output example 1 True Input example 2 axc ahbgdc Output example 2 False Explanation: 1. For input example 1: \\"abc\\" is a subsequence of \\"ahbgdc\\" as \'a\', \'b\', and \'c\' appear in the same order within \\"ahbgdc\\". 2. For input example 2: \\"axc\\" is not a subsequence of \\"ahbgdc\\" because \'x\' does not appear in \\"ahbgdc\\".","solution":"def is_subsequence(A, B): Check if string A is a subsequence of string B. Args: A (str): the subsequence to check B (str): the string where we check if A is a subsequence Returns: bool: True if A is a subsequence of B, otherwise False iter_B = iter(B) return all(char in iter_B for char in A)"},{"question":"Lara is learning about arrays and she loves challenges involving subarrays. A subarray is a contiguous part of an array. Lara\'s current challenge is to find the maximum sum of any subarray of a given array that has at least 2 elements. Since she is still learning, she needs your help to solve this problem using a simple and efficient approach. Input The first line contains an integer t (1 ≤ t ≤ 10) — the number of test cases to solve. Each test case starts with an integer n (2 ≤ n ≤ 3000) — the number of elements in the array a. The second line contains n space-separated integers a_1, a_2, ..., a_n (−10^5 ≤ a_i ≤ 10^5) — the elements of the array a. Output For each test case, print a single integer — the maximum sum of any subarray of the given array that has at least 2 elements. Example Input 2 3 -1 2 3 4 1 -2 3 -1 Output 5 2 Note In the first sample, the best subarray with at least 2 elements is [2, 3], which has a sum of 5. In the second sample, the best subarray with at least 2 elements is [1, -2, 3], which has a sum of 2.","solution":"def max_subarray_sum_with_at_least_two_elements(t, test_cases): def max_subarray_sum(arr): n = len(arr) if n < 2: return 0 max_ending_here = float(\'-inf\') max_so_far = float(\'-inf\') max_one_elem = float(\'-inf\') for i in range(1, n): if i == 1: max_ending_here = arr[i-1] + arr[i] else: max_ending_here = max(arr[i-1] + arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(max_subarray_sum(arr)) return results"},{"question":"You are given a binary tree with N nodes. Your task is to determine whether the tree is height-balanced. A binary tree is height-balanced if the absolute difference between the height of the left and right subtrees of every node in the tree is at most 1. Input: The first line contains a single integer T - the number of test cases. The first line of each test case contains a single integer N - the number of nodes in the binary tree. The following N lines describe the tree structure. Each line contains three integers v, l, r where v is a node, and l and r are its left and right children respectively. If a node does not have a left or right child, use -1 in its place. Output: For each test case, print \\"YES\\" if the tree is height-balanced, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 Example: Input: 2 3 1 2 3 2 -1 -1 3 -1 -1 4 4 2 6 2 1 3 1 -1 -1 3 -1 -1 6 5 7 5 -1 -1 7 -1 -1 Output: YES YES Explanation: Example case 1: The given binary tree has nodes 1, 2, and 3. Node 1 has children 2 and 3, and both 2 and 3 have no children. The tree is height-balanced. Example case 2: The given binary tree has nodes 4, 2, 6, 1, 3, 5, and 7. For each node, the absolute difference between the height of the left and right subtrees is at most 1. The tree is height-balanced.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nodes): if not nodes: return None val_to_node = {} for v, l, r in nodes: if v not in val_to_node: val_to_node[v] = TreeNode(v) node = val_to_node[v] if l != -1: if l not in val_to_node: val_to_node[l] = TreeNode(l) node.left = val_to_node[l] if r != -1: if r not in val_to_node: val_to_node[r] = TreeNode(r) node.right = val_to_node[r] return val_to_node[nodes[0][0]] def is_height_balanced(root): def check(node): if not node: return 0, True left_height, left_balanced = check(node.left) right_height, right_balanced = check(node.right) is_balanced = (left_balanced and right_balanced and abs(left_height - right_height) <= 1) return max(left_height, right_height) + 1, is_balanced _, balanced = check(root) return balanced def solve(T, test_cases): results = [] for nodes in test_cases: root = build_tree(nodes) if is_height_balanced(root): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of integers `arr` and an integer `x`, your task is to find all unique pairs in the array that sum up to `x`. # Input: - An integer `n` representing the number of elements in the array (2 <= n <= 10^4). - An array of `n` integers (1 <= arr[i] <= 10^5). - An integer `x` (1 <= x <= 2 * 10^5). # Output: - A list of unique pairs `[a, b]` such that `a + b` equals `x`. - Each pair should be presented as a list `[a, b]` where `a <= b`. - Pairs should be listed in ascending order (first by `a`, then by `b`). # Example: Input: ``` 8 1 2 3 4 5 6 7 8 9 ``` Output: ``` [[1, 8], [2, 7], [3, 6], [4, 5]] ``` # Explanation: In the given example, the pairs `[1, 8]`, `[2, 7]`, `[3, 6]`, and `[4, 5]` each sum up to `9`. These pairs are listed in ascending order. Each pair is unique in terms of the combination `(a, b)`.","solution":"def find_pairs(arr, x): Given an array of integers and an integer x, returns all unique pairs [a, b] such that a + b equals x. Each pair should be listed as a list [a, b] where a <= b. :param arr: List[int], the array of integers :param x: int, the target sum :return: List[List[int]], the list of unique pairs seen = set() pairs = set() for number in arr: complement = x - number if complement in seen: pair = (min(number, complement), max(number, complement)) pairs.add(pair) seen.add(number) result = [list(pair) for pair in sorted(pairs)] return result"},{"question":"Alex is organizing a treasure hunt. The treasure is hidden in a sequence of locations represented by an array T of N elements, where each element T[i] represents where the treasure could potentially be. The treasure follows these rules: - If T[i] contains a number between 0 and N-1, inclusive, it means the treasure can be at the location T[i]. - If T[i] contains -1, it signifies that there is no treasure in location i, and further checks should be avoided for that location. Alex starts at location 0 and wants to determine if there is a sequence of steps he can follow to find the treasure. Your task is to print \\"Found\\" (quotes for clarity) if the treasure can be located following the rules, and \\"Not Found\\" if it cannot. Input - The first line contains the number of test cases. Each test case consists of two lines: the first line contains the number of locations (N) and the second line contains the elements of the array T. Output - Print \\"Found\\" if Alex finds the treasure, otherwise \\"Not Found\\". The output is case-sensitive. SAMPLE INPUT 3 3 2 1 -1 4 1 0 -1 3 5 0 1 3 4 -1 SAMPLE OUTPUT Found Not Found Found Explanation: Test case 1 - Starting at location 0, Alex goes to location 2 and stops as T[2] is -1, meaning no treasure is at location 2. Test case 2 - Starting at location 0, Alex will keep looping between locations 0 and 1, hence he cannot find the treasure. Test case 3 - Starting at location 0, Alex moves to location 1, then to 3, and finally to 4 where he finds the treasure (since T[4] != -1).","solution":"def can_find_treasure(num_cases, cases): results = [] for i in range(num_cases): n, t = cases[i] visited = set() current_location = 0 while current_location not in visited: if t[current_location] == -1: results.append(\\"Not Found\\") break if t[current_location] == current_location: results.append(\\"Found\\") break visited.add(current_location) current_location = t[current_location] else: results.append(\\"Not Found\\") return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 num_cases = int(data[index]) index += 1 cases = [] for _ in range(num_cases): n = int(data[index]) index += 1 t = list(map(int, data[index:index + n])) index += n cases.append((n, t)) results = can_find_treasure(num_cases, cases) for result in results: print(result)"},{"question":"Oceans Research Center The Oceans Research Center is monitoring the movement of ships through a protected marine zone. Each ship transmits its unique identifier and movement records at regular intervals. The Oceans Research Center needs to ensure no ship crosses into the restricted areas within the zone, defined by rectangular boundaries. A ship\'s movement can be represented as a trajectory through a series of coordinates on a 2D plane. The Research Center provides the following constraints: - Each movement record contains the ship\'s identifier and the coordinates (X, Y) representing the ship\'s journey. The task is to determine the number of ships that cross into any of the restricted areas. A ship crosses into a restricted area if any part of its trajectory goes within the boundaries of any restricted area. Input - The first line contains two integers N (1 ≤ N ≤ 50) and M (1 ≤ M ≤ 10), the number of ships and the number of restricted areas respectively. - The next N lines each contain: - The ship\'s identifier (a string of at most 10 characters), - An integer P (1 ≤ P ≤ 100), representing the number of coordinates in the ship\'s movement, - P pairs of integers representing the coordinates (x1 y1, x2 y2, ..., xp yp) (0 ≤ xi, yi ≤ 1000). - The following M lines each contain four integers representing the coordinates (X1, Y1) (bottom-left corner) and (X2, Y2) (top-right corner) of a restricted area. Output - Output one line containing the number of ships that cross into any restricted area. Example Input 2 2 ShipA 4 0 0 4 4 8 8 10 10 ShipB 3 1 1 1 5 8 8 2 2 6 6 3 3 7 7 Output 1 Explanation: In the example, ShipB crosses into the restricted area defined by the coordinates (2, 2) to (6, 6). ShipA remains outside the restricted areas through its recorded movement. Therefore, only one ship crosses into the restricted areas.","solution":"def count_ships_in_restricted_areas(ship_data, restricted_areas): def is_inside(x, y, x1, y1, x2, y2): return x1 <= x <= x2 and y1 <= y <= y2 ship_count = 0 for ship in ship_data: identifier, P, coords = ship[0], ship[1], ship[2] crossed = False for i in range(P): x, y = coords[2 * i], coords[2 * i + 1] for rect in restricted_areas: if is_inside(x, y, *rect): crossed = True break if crossed: ship_count += 1 break return ship_count # Example usage ship_data = [ (\\"ShipA\\", 4, [0, 0, 4, 4, 8, 8, 10, 10]), (\\"ShipB\\", 3, [1, 1, 1, 5, 8, 8]) ] restricted_areas = [ (2, 2, 6, 6), (3, 3, 7, 7) ] result = count_ships_in_restricted_areas(ship_data, restricted_areas) print(result) # Output should be 1"},{"question":"Write a program to find the longest subsequence of consecutive integers in a given sequence of integers A = {a_0, a_1, ..., a_{n-1}}. Constraints * 1 leq n leq 1,000 * -1,000,000 leq a_i leq 1,000,000 Input The input is given in the following format: n a_0 ; a_1 ; ... ; a_{n-1} In the first line, n (the number of elements in A) is given. In the second line, a_i (each element in A) are given. Output Print the length of the longest subsequence of consecutive integers in A. Example Input 10 1 9 3 10 4 20 2 8 11 21 Output 4","solution":"def longest_consecutive_subsequence(arr): Returns the length of the longest subsequence of consecutive integers in arr. if not arr: return 0 arr = set(arr) max_length = 0 for num in arr: if num - 1 not in arr: current_length = 1 current_num = num while current_num + 1 in arr: current_length += 1 current_num += 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given a string `s` and a rotated version of the same string `r`. Write a function `is_rotated(s, r)` that determines if `r` is a valid rotation of `s`. The rotated version is formed by moving the first character to the end of the string, repeatedly. Return `True` if `r` is a valid rotation of `s`, otherwise return `False`. **Input** - A string `s` which consists only of lowercase alphabets. - A string `r` which is a potential rotated version of `s`. **Output** - Boolean value `True` if `r` is a rotation of `s`, otherwise `False`. **Function signature**: `def is_rotated(s: str, r: str) -> bool:` **Example** Input ``` \\"abcde\\" \\"cdeab\\" ``` Output ``` True ``` Input ``` \\"abcde\\" \\"abced\\" ``` Output ``` False ``` **Explanation** - In the first example, \\"cdeab\\" is indeed a rotation of \\"abcde\\". - In the second example, \\"abced\\" is not a valid rotation of \\"abcde\\".","solution":"def is_rotated(s: str, r: str) -> bool: Determines if `r` is a valid rotation of `s`. Parameters: s (str): The original string. r (str): The potential rotated version of the string. Returns: bool: True if `r` is a valid rotation of `s`, False otherwise. if len(s) != len(r): return False # Concatenate s with itself and see if r is a substring return r in (s + s)"},{"question":"Given an integer array A of length N. You need to find the largest sum of contiguous subarray within a one-dimensional numeric array A which has at most one element removed. Output the largest possible sum of the modified array. Example Input 6 1 -2 0 3 -1 2 Output 5 Explanation: By removing -2 from the array, the maximum sum subarray is [1, 0, 3, -1, 2] which sums to 5. Another possibility is removing -1 to achieve the sum of 6, which is also valid. The maximum is always considered. In this case, removing -1 to get sum of 6 is the correct answer. Input 4 -1 -1 -1 -1 Output -1 Explanation: Whether you remove one -1 or not, the maximum sum you can get is -1. The options for sums are [-1], which is the largest.","solution":"def max_sum_with_one_removal(A): This function finds the largest sum of a contiguous subarray within A by removing at most one element. n = len(A) if n == 0: return 0 # Forward pass to find max subarray sum ending in each position max_ending_here = [0] * n max_ending_here[0] = A[0] for i in range(1, n): max_ending_here[i] = max(A[i], max_ending_here[i - 1] + A[i]) # Backward pass to find max subarray sum starting in each position max_starting_here = [0] * n max_starting_here[n - 1] = A[n - 1] for i in range(n - 2, -1, -1): max_starting_here[i] = max(A[i], max_starting_here[i + 1] + A[i]) # Find the maximum sum without any removal max_sum = max(max_ending_here) # Find the maximum sum with one removal for i in range(1, n - 1): max_sum = max(max_sum, max_ending_here[i - 1] + max_starting_here[i + 1]) return max_sum"},{"question":"Bob is learning about numerical patterns and sequences. He has discovered an interesting sequence of numbers that follow a particular rule. Can you help him determine the rule and generate the sequence? Given a positive integer n, generate a sequence of length n where the i-th element is defined as the sum of the factorials of its digits. For example, if n = 5, the sequence will have 5 elements. Bob wants to be able to generate this sequence for any given n. Input The input contains a single integer n (1 ≤ n ≤ 10^2). Output Output a sequence of n integers separated by spaces, where the i-th integer is the sum of the factorials of the digits of i. Examples Input 5 Output 1 2 6 24 120 Input 7 Output 1 2 6 24 120 720 5040","solution":"import math def digit_factorial_sum(num): Returns the sum of the factorials of the digits of num. return sum(math.factorial(int(d)) for d in str(num)) def generate_sequence(n): Generates a sequence of length n where the i-th element is defined as the sum of the factorials of its digits. return [digit_factorial_sum(i) for i in range(1, n + 1)] def formatted_sequence(n): Generates the sequence and formats it as a space-separated string. sequence = generate_sequence(n) return \' \'.join(map(str, sequence))"},{"question":"Implement a function that simulates a robot navigating an MxN grid. The robot starts at the top-left corner (0, 0) and can move either to the right or down one cell at a time. However, some cells contain obstacles, making them impassable for the robot. The task is to determine the number of unique paths the robot can take to reach the bottom-right corner (M-1, N-1). Write a function that takes an integer matrix \'grid\' as input, where the value 1 represents an obstacle and the value 0 represents a free cell. Example: ``` Input: grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] Output: 2 ``` In this example, there are 2 unique paths from the top-left corner to the bottom-right corner. Constraints: - The dimensions of the grid are M x N, where 1 ≤ M, N ≤ 100. - The robot cannot move to cells that contain an obstacle (value 1). - The initial and final cells are always 0 (no obstacles). Function Signature: ```python def unique_paths_with_obstacles(grid: List[List[int]]) -> int: pass ```","solution":"from typing import List def unique_paths_with_obstacles(grid: List[List[int]]) -> int: if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are a software developer working on a new blogging platform, and you need to implement a feature that automatically generates tag suggestions for a new blog post. Given a set of existing tags and a list of words from the new post, your task is to find and suggest the top K tags that are most relevant to the content of the post. The relevance of a tag is determined by how many times words associated with that tag appear in the new post. You will be given multiple test cases for this problem. Input: The first line of the input contains an integer T denoting the number of test cases. For each test case: - The first line contains an integer N, the number of existing tags. - The next N lines each contain a tag and its associated words, where the first word is the tag, and the subsequent words are the ones associated with that tag. - The next line contains an integer M, the number of words in the new post. - The final line contains M space-separated words from the new post. Output: For each test case, print the top K tags suggested for the new blog post. If there are multiple tags with the same relevance, print them in alphabetical order. If the number of suggested tags is less than K, print only the available tags. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ M ≤ 1000 1 ≤ K ≤ N 1 ≤ Length of each word ≤ 20 SAMPLE INPUT 2 3 travel beach vacation summer food delicious recipe dinner tech gadgets innovation software 5 the beach was sunny and perfect for a summer vacation 2 3 health exercise workout nutrition fashion style clothing trends sports soccer basketball tennis 8 this new soccer workout is perfect for health-focused people who love sports 2 SAMPLE OUTPUT travel health sports Explanation: In the first test case: - The tag \\"travel\\" is associated with the words \\"beach\\", \\"vacation\\", and \\"summer\\", which appear in the new post 2 times. - The tags \\"food\\" and \\"tech\\" do not have any associated words appearing in the new post. In the second test case: - The tag \\"health\\" is associated with the words \\"exercise\\" and \\"workout\\", which appear in the new post 2 times. - The tag \\"sports\\" is associated with the word \\"soccer\\", which appears in the new post once. - The tag \\"fashion\\" does not have any associated words appearing in the new post. Only the top 2 tags are required to be returned for each test case, so the output is respective to their relevance and sorted alphabetically where necessary.","solution":"def generate_tag_suggestions(test_cases): results = [] for case in test_cases: tag_count = case[0] tag_data = case[1:tag_count + 1] K = case[tag_count + 1] post_words = case[tag_count + 2].split() tag_relevance = {} for data in tag_data: tag_info = data.split() tag = tag_info[0] associated_words = set(tag_info[1:]) relevance = sum(post_words.count(word) for word in associated_words) if relevance > 0: tag_relevance[tag] = relevance sorted_tags = sorted(tag_relevance.keys(), key=lambda x: (-tag_relevance[x], x)) results.append(\' \'.join(sorted_tags[:K])) return results # Example usage: test_cases = [ [3, \\"travel beach vacation summer\\", \\"food delicious recipe dinner\\", \\"tech gadgets innovation software\\", 5, \\"the beach was sunny and perfect for a summer vacation\\", 1], [3, \\"health exercise workout nutrition\\", \\"fashion style clothing trends\\", \\"sports soccer basketball tennis\\", 8, \\"this new soccer workout is perfect for health-focused people who love sports\\", 2] ] print(generate_tag_suggestions(test_cases))"},{"question":"In a particular online multiplayer game, each player controls a character with health points (HP) and can receive a certain sequence of hits during the game. Each hit reduces the character\'s HP by a certain number of points. Players are eliminated from the game when their HP falls to zero or below. You need to determine if the character survives the sequence of hits. Write a function `characterSurvives` that takes two parameters: - An integer `initialHP` (1 ≤ initialHP ≤ 10^5) representing the initial health points of the character. - An array `hits` of integers (1 ≤ hits[i] ≤ 10^4) representing the sequence of hits the character receives. The function should return a string \\"SURVIVED\\" if the character\'s HP remains above zero after all hits have been applied, or \\"ELIMINATED\\" if the HP falls to zero or below. # Input The function `characterSurvives` takes the following inputs: 1. An integer `initialHP`. 2. An array of integers `hits` where each integer represents the damage from a hit. # Output Return a string \\"SURVIVED\\" if the character\'s HP remains above zero after all hits have been applied. Otherwise, return \\"ELIMINATED\\". # Example ```python characterSurvives(10, [3, 4, 2]) ``` Output: ``` \\"SURVIVED\\" ``` Explanation: The character\'s initial HP is 10. After the first hit, the HP is reduced to 7, then to 3 after the second hit, and finally to 1 after the last hit. The character has 1 HP left, so they survived. ```python characterSurvives(5, [4, 2]) ``` Output: ``` \\"ELIMINATED\\" ``` Explanation: The character\'s initial HP is 5. After the first hit, the HP is reduced to 1, and after the second hit, the HP is reduced to -1. The character\'s HP falls below zero, so they are eliminated. # Note The function must accurately compute the remaining HP after applying all hits in the given order and determine if the character survived or got eliminated.","solution":"def characterSurvives(initialHP, hits): Determines if a character survives after a sequence of hits. Parameters: initialHP (int): Initial health points of the character. hits (list of int): Sequence of hits represented as integers which reduce the character\'s HP. Returns: str: \\"SURVIVED\\" if HP is greater than 0 after all hits, \\"ELIMINATED\\" otherwise. currentHP = initialHP for hit in hits: currentHP -= hit if currentHP <= 0: return \\"ELIMINATED\\" return \\"SURVIVED\\""},{"question":"You are given several pairs of integers (a, b). For each pair, you are to determine the smallest positive integer x such that when dividing both a and b by x, the results are both integers (i.e., x is a common factor of both a and b). If there is no such x greater than 1, the pair is considered invalid. For example, for the pair (8, 12), the common factors of 8 and 12 are 1, 2, and 4. The smallest factor greater than 1 is 2, so the output for this pair is 2. Likewise, for the pair (15, 25), the common factors of 15 and 25 are 1 and 5. The smallest factor greater than 1 is 5. Consider the pair (17, 19). Since their greatest common divisor is 1, there are no common factors greater than 1, making this pair invalid. Your task is to write a program that reads multiple pairs of integers and determines the smallest positive integer x for which both a and b are divisible by x, or declares the pair invalid if no such number exists. Input: - The first line contains an integer t (1 ≤ t ≤ 10^5) — the number of test cases. - Each of the following t lines contains two integers a and b (1 ≤ a, b ≤ 10^6). Output: For each test case, output a single line containing the smallest positive integer greater than 1 that divides both a and b, or \\"invalid\\" if no such integer exists. Example: Input: 5 8 12 15 25 17 19 20 30 7 14 Output: 2 5 invalid 2 7 Explanation: - For the pair (8, 12), the common factors are 1, 2, and 4. The output is 2. - For the pair (15, 25), the common factors are 1 and 5. The output is 5. - For the pair (17, 19), there\'s no common factor greater than 1. The output is \\"invalid\\". - For the pair (20, 30), the common factors are 1, 2, 5, and 10. The output is 2. - For the pair (7, 14), the common factors are 1 and 7. The output is 7.","solution":"import math def smallest_common_factor(a, b): Returns the smallest common factor greater than 1 for a and b or \\"invalid\\" if no such factor exists. gcd_ab = math.gcd(a, b) if gcd_ab > 1: return min((i for i in range(2, gcd_ab + 1) if gcd_ab % i == 0)) return \\"invalid\\" def process_test_cases(t, cases): results = [] for a, b in cases: results.append(smallest_common_factor(a, b)) return results"},{"question":"You are given a grid with `n` rows and `m` columns. Each cell in the grid may contain one of the following symbols: - \'.\' representing an empty cell, - \'B\' representing a blocked cell, - \'C\' representing a cell that needs to be covered. Your task is to determine the minimum number of 1x1 sensors required to cover all cells marked with \'C\'. A sensor can cover the cells in any of the eight possible directions (horizontally, vertically, and diagonally) unless it encounters a blocked cell \'B\'. The sensors can be placed on any empty cell (i.e., cells marked with \'.\') or cells already marked with \'C\'. Input The first line of input contains two space-separated integers n and m (1 ≤ n, m ≤ 100) representing the number of rows and columns in the grid, respectively. The next n lines each contain m characters describing the grid. Output Print a single integer indicating the minimum number of sensors required to cover all cells marked with \'C\'. Examples Input 4 4 .C.. .B.. ..C. .... Output 2 Input 5 5 ..... ..B.. .C... ..... ..C.. Output 2 Note In the first example, one sensor can be placed at (0, 1) to cover the \'C\' at (0, 1) and (2, 2). Another sensor can be placed at (2, 2) to ensure all \'C\' cells are covered. In the second example, one sensor can be placed at (2, 0) to cover the \'C\' at (2, 0) and another sensor at (4, 2) to cover the \'C\' at (4, 2).","solution":"def get_minimum_sensors(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m def can_cover(x, y): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and grid[nx][ny] == \'C\': return True return False covered = set() sensors = 0 for i in range(n): for j in range(m): if grid[i][j] == \'C\' and (i, j) not in covered: placed = False for dx in range(-1, 2): for dy in range(-1, 2): ni, nj = i + dx, j + dy if is_valid(ni, nj) and grid[ni][nj] != \'B\' and (ni, nj) not in covered: if can_cover(ni, nj): sensors += 1 for ddx in range(-1, 2): for ddy in range(-1, 2): ci, cj = ni + ddx, nj + ddy if is_valid(ci, cj) and grid[ci][cj] == \'C\': covered.add((ci, cj)) placed = True break if placed: break return sensors"},{"question":"Implement a function that, given a list of integers representing the heights of mountains in an array, finds the maximum number of mountains you can see in sequence if you start from any of the mountains. A mountain can see another mountain if that another mountain is to its right and shorter in height than the current mountain. You are required to handle multiple test cases. Input: The first line contains T, the number of test cases. Each test case contains: - The first line contains a single integer N, the number of mountains. - The second line contains N space-separated integers representing the heights of the mountains. Output: For each test case, print the maximum number of mountains that can be seen in sequence from any of the starting mountains. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^4 1 ≤ height of mountains ≤ 10^4 SAMPLE INPUT 2 5 10 20 15 7 25 4 5 6 4 3 SAMPLE OUTPUT 2 2","solution":"def max_visible_mountains(test_cases): results = [] for heights in test_cases: n = len(heights) max_count = 0 for i in range(n): count = 0 max_height = heights[i] for j in range(i + 1, n): if heights[j] < max_height: count += 1 max_height = heights[j] max_count = max(max_count, count) results.append(max_count) return results def process_input(raw_input): lines = raw_input.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) heights = list(map(int, lines[index + 1].split())) test_cases.append(heights) index += 2 return test_cases def main(raw_input): test_cases = process_input(raw_input) results = max_visible_mountains(test_cases) for result in results: print(result)"},{"question":"Write a function that takes an integer `n` and returns a list of all possible n-ary palindromic numbers within the range 0 to n^k - 1, where k is also given as an input. A number is considered n-ary palindromic if it reads the same forward and backward in base-n. # Function Signature: ```python def find_n_ary_palindromes(n: int, k: int) -> List[str]: ``` # Input: - `n` (2 ≤ n ≤ 16): the base of the numeral system. - `k` (1 ≤ k ≤ 8): the number of digits the palindromic numbers should have. # Output: - List of strings: Each string represents a n-ary palindromic number of length `k`. # Example: ```python assert find_n_ary_palindromes(2, 3) == [\'000\', \'010\', \'101\', \'111\'] assert find_n_ary_palindromes(10, 2) == [\'00\', \'11\', \'22\', \'33\', \'44\', \'55\', \'66\', \'77\', \'88\', \'99\'] assert find_n_ary_palindromes(16, 1) == [\'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'A\', \'B\', \'C\', \'D\', \'E\', \'F\'] ``` # Notes: - Ensure the output list is sorted in lexicographical order. - Use the digits 0-9 and letters A-F for bases greater than 10. - Validate that the function performs efficiently given the constraints. # Explanation: In the first example, we are finding all 3-digit binary palindromes. Possible 3-digit combinations are 000, 001, 010, 011, 100, 101, 110, 111. Out of these, only 000, 010, 101, 111 are palindromic. In the second example, we are finding all 2-digit decimal palindromes. Possible 2-digit combinations are 00, 01, 02, ..., 99. Out of these, numbers like 00, 11, 22, ..., 99 are palindromic.","solution":"from typing import List def find_n_ary_palindromes(n: int, k: int) -> List[str]: Returns a list of all possible n-ary palindromic numbers of length k. Each number is represented as a string. def is_palindrome(s: str) -> bool: return s == s[::-1] def int_to_n_base(num: int, base: int) -> str: digits = \\"0123456789ABCDEF\\" if num == 0: return \\"0\\" result = [] while num: result.append(digits[num % base]) num //= base return \'\'.join(result[::-1]) palindromes = [] for num in range(n**k): n_base_num = int_to_n_base(num, n) padded_num = n_base_num.zfill(k) if len(padded_num) == k and is_palindrome(padded_num): palindromes.append(padded_num) return sorted(palindromes)"},{"question":"Mario is working on a unique problem involving sequences. He defines a sequence S = [a1, a2, ..., aN] of integers to be interesting if and only if it satisfies the following properties: 1. For all 2 <= i <= N, |ai - ai-1| <= K. 2. The sum of the sequence S is divisible by M. Mario is excited to generate such a sequence of length N. Given the integers N, K, and M, your task is to help Mario find any interesting sequence S of length N that meets the criteria. Constraints * 1 <= N <= 1000 * 1 <= K <= 100 * 1 <= M <= 100 Input Input is given from Standard Input in the following format: ``` N K M ``` Output Output N space-separated integers, denoting the sequence S. S must satisfy the following conditions: * The absolute difference between consecutive elements does not exceed K, i.e., for all 2 <= i <= N, |ai - ai-1| <= K. * The sum of the sequence S is divisible by M. If there are multiple solutions, you may output any of them. The elements of S may be printed in any order. It is guaranteed that at least one solution exists under the given constraints. Examples Input ``` 5 3 10 ``` Output ``` 1 4 1 4 0 ``` Input ``` 3 2 5 ``` Output ``` 2 4 3 ```","solution":"def generate_interesting_sequence(N, K, M): Generate an interesting sequence of length N where 1. For all 2 <= i <= N, |ai - ai-1| <= K. 2. The sum of the sequence S is divisible by M. Parameters: N (int): length of the sequence K (int): maximum allowable difference between consecutive elements M (int): divisor for the sum of the sequence Returns: List[int]: sequence of integers that meet the criteria # Generate a base sequence where all differences are <= K base_sequence = [i % (K + 1) for i in range(N)] # Calculate the sum of the base sequence base_sum = sum(base_sequence) # Find the adjustment required to make the sum divisible by M remainder = base_sum % M adjustment = (-remainder) % M # Apply the adjustment to the first element (we know adjustment will be <= K) base_sequence[0] += adjustment return base_sequence"},{"question":"You are given a list of integers representing the daily temperatures for a certain period. Your task is to compute and return a list such that, for each day in the input, it contains the number of days one would have to wait until a warmer temperature. If there is no future day for which this is possible, put `0` instead. For example, given the list of temperatures `T`, the output should be a list where the value at each index `i` represents the number of days you would have to wait until a day with a higher temperature than `T[i]`. # Function Signature ```python def dailyTemperatures(T: List[int]) -> List[int]: ``` # Input - `T` is a list of integers representing the daily temperatures for a period (1 ≤ length of `T` ≤ 100000, 30 ≤ T[i] ≤ 100). # Output - A list of integers where each element represents the number of days you have to wait until a warmer day, or `0` if there is no future warmer day. # Example Input ```python T = [73, 74, 75, 71, 69, 72, 76, 73] ``` Output ```python [1, 1, 4, 2, 1, 1, 0, 0] ``` # Explanation - For day 0 (temperature 73), you need to wait 1 day until a warmer temperature (74). - For day 1 (temperature 74), you need to wait 1 day until a warmer temperature (75). - For day 2 (temperature 75), you need to wait 4 days until a warmer temperature (76). - For day 3 (temperature 71), you need to wait 2 days until a warmer temperature (72). - For day 4 (temperature 69), you need to wait 1 day until a warmer temperature (72). - For day 5 (temperature 72), you need to wait 1 day until a warmer temperature (76). - For day 6 (temperature 76), there are no future days with a warmer temperature, so the answer is 0. - For day 7 (temperature 73), there are no future days with a warmer temperature, so the answer is 0.","solution":"from typing import List def dailyTemperatures(T: List[int]) -> List[int]: Returns the list where each index contains the number of days to wait until a warmer temperature. result = [0] * len(T) stack = [] # This will store the indices of the temperatures for i, temp in enumerate(T): while stack and T[stack[-1]] < temp: idx = stack.pop() result[idx] = i - idx stack.append(i) return result"},{"question":"You are given two strings, A and B. Determine if string A can be transformed into string B by inserting exactly one character into A. Input The first line contains string A. The second line contains string B. Both strings consist of lowercase Latin letters. Output Output \\"YES\\" if string A can be transformed into string B by inserting exactly one character. Otherwise, output \\"NO\\". Constraints 1 ≤ length of A, B ≤ 10^6 SAMPLE INPUT abcd abcde SAMPLE OUTPUT YES","solution":"def can_transform(A, B): Determines if string A can be transformed into string B by inserting exactly one character into A. if len(B) - len(A) != 1: return \\"NO\\" i, j = 0, 0 while i < len(A) and j < len(B): if A[i] != B[j]: if i != j: return \\"NO\\" j += 1 else: i += 1 j += 1 return \\"YES\\""},{"question":"# Problem Statement A game involves moving a knight on a chessboard of size N x M. The knight starts at position (1, 1) and has to reach position (N, M). The knight moves in the same way as it does in standard chess: it can move in an \\"L\\" shape — 2 squares in one direction and then 1 square perpendicular, or 1 square in one direction and then 2 squares perpendicular. Each move is considered to take one unit of time. Your task is to determine the minimum number of moves required for the knight to travel from (1, 1) to (N, M). If it is not possible to reach the destination, return -1. # Input The input consists of a single line containing two integers separated by a space: N and M (1 ≤ N, M ≤ 100). - N: number of rows in the grid (height). - M: number of columns in the grid (width). # Output Print the minimum number of moves required for the knight to reach position (N, M). If it is not possible, print -1. # Sample Input 1 ``` 8 8 ``` # Sample Output 1 ``` 6 ``` # Sample Input 2 ``` 1 1 ``` # Sample Output 2 ``` 0 ``` # Sample Input 3 ``` 2 2 ``` # Sample Output 3 ``` -1 ``` # Explanation 1. For the 8 x 8 board, the knight can reach from (1, 1) to (8, 8) in 6 moves. 2. If the knight is already at the target position (1, 1), no moves are necessary. 3. For a 2 x 2 board, the knight cannot reach from (1, 1) to (2, 2) as all possible L-shaped moves take it off the grid.","solution":"from collections import deque def min_knight_moves(N, M): Determine the minimum number of moves required for the knight to travel from position (1, 1) to position (N, M) on a chessboard of size N x M. If it is not possible, return -1. if N == 1 and M == 1: return 0 # Possible moves of a knight moves = [(2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1)] # Initialize a queue for BFS queue = deque([((1, 1), 0)]) visited = set((1, 1)) while queue: (current_x, current_y), current_steps = queue.popleft() for dx, dy in moves: new_x, new_y = current_x + dx, current_y + dy if new_x == N and new_y == M: return current_steps + 1 if 1 <= new_x <= N and 1 <= new_y <= M and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append(((new_x, new_y), current_steps + 1)) return -1"},{"question":"Problem You are tasked with creating a program that can handle the following manipulations and queries on a matrix of integers. The matrix has dimensions N times M. The program must process Q queries of various types. Each query is specified by three integers x, y, z: 1. Set the value of the element at row x and column y of the matrix to z. (When z neq -1 and x, y are within the matrix dimensions) 2. Retrieve and report the sum of the elements in row x. (When z = -1) 3. Retrieve and report the sum of the elements in column y. (When z = -1) Constraints: - 1 le N, M le 2000 - 1 le Q le 10^5 - 1 le x le N - 1 le y le M - 0 le z le 10^9 or z = -1 - All inputs are integers Input The input is given in the following format. N M Initial matrix of size N times M: a_{1,1} a_{1,2} ... a_{1,M} a_{2,1} a_{2,2} ... a_{2,M} ... a_{N,1} a_{N,2} ... a_{N,M} Q x_1 y_1 z_1 x_2 y_2 z_2 ... x_Q y_Q z_Q Output For each query that requests a sum, output the result on a new line. Example Input 3 3 1 2 3 4 5 6 7 8 9 5 1 2 5 2 -1 -1 3 3 2 -1 3 -1 2 2 1 Output 15 24 2","solution":"def handle_matrix_queries(matrix, queries): Handles the matrix manipulations and queries as specified. Parameters: - matrix: Initial N x M matrix as a list of lists. - queries: A list of queries, where each query is a tuple (x, y, z). Returns: - A list of results for the sum queries. results = [] for x, y, z in queries: if z != -1: # Set the value of the element at row (x-1) and column (y-1) of the matrix to z matrix[x-1][y-1] = z elif x == -1: # Retrieve and report the sum of the elements in column (y-1) col_sum = sum(row[y-1] for row in matrix) results.append(col_sum) elif y == -1: # Retrieve and report the sum of the elements in row (x-1) row_sum = sum(matrix[x-1]) results.append(row_sum) return results"},{"question":"Eldar is designing a system that requires efficient data storage and retrieval of integers. To achieve this, he needs to compress a sequence of integers by removing duplicates, while maintaining the relative order of the first occurrence of each integer. Consider an array of n integers. Your task is to transform this array into a compressed version by deleting all duplicate appearances of integers but keeping the first occurrence of each integer. Input The first line contains a single integer n (1 ≤ n ≤ 2 × 10^5) — the number of integers in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Print the new length of the array after removing duplicates. In the next line, print the compressed array with remaining elements in the same relative order as in the input. Examples Input 8 4 2 2 8 3 3 4 5 Output 5 4 2 8 3 5 Input 5 1 2 3 4 5 Output 5 1 2 3 4 5 Note In the first example, the integers 4, 2, 3 appear more than once in the array, but only the first occurrence of each is kept. Thus, the resulting array is [4, 2, 8, 3, 5], and its length is 5. In the second example, all integers are already distinct, so the output array is the same as the input array, with length 5.","solution":"def compress_array(n, arr): Compress the array by removing duplicates while maintaining the relative order of the first occurrence. Args: n (int): the number of integers in the array. arr (list): the array of integers. Returns: tuple: the length of the compressed array and the compressed array itself. seen = set() compressed = [] for number in arr: if number not in seen: seen.add(number) compressed.append(number) return len(compressed), compressed # Sample Input # n = 8 # arr = [4, 2, 2, 8, 3, 3, 4, 5] # Sample Output # 5 # [4, 2, 8, 3, 5]"},{"question":"Mona is organizing a string art competition. She wants to know the longest palindromic substring in each participant\'s string. Help her identify the length of the longest palindromic substring for each contestant\'s string. Input: The first line of the input will be T, the number of test cases. Next follow T lines, each containing a string S which represents a participant\'s string. Output: Print T lines, each consisting of an integer that represents the length of the longest palindromic substring in the corresponding participant\'s string. Constraints: 1 ≤ T ≤ 10^5 1 ≤ |S| ≤ 10^6 The total length of all strings combined will not exceed 10^7. SAMPLE INPUT 2 abacdfgdcabba banana SAMPLE OUTPUT 4 5","solution":"def longest_palindromic_substring_length(s): if not s: return 0 n = len(s) max_length = 1 for i in range(1, n): # Even-length palindrome check low, high = i - 1, i while low >= 0 and high < n and s[low] == s[high]: current_length = high - low + 1 if current_length > max_length: max_length = current_length low -= 1 high += 1 # Odd-length palindrome check low, high = i - 1, i + 1 while low >= 0 and high < n and s[low] == s[high]: current_length = high - low + 1 if current_length > max_length: max_length = current_length low -= 1 high += 1 return max_length def find_longest_palindromic_substrings(test_cases): results = [] for s in test_cases: results.append(longest_palindromic_substring_length(s)) return results"},{"question":"You are given an integer N which represents the radius of a circle. Your task is to calculate and print the area of the circle if the radius is greater than 10. If the radius is 10 or less, print the circumference of the circle. You should use the value of π (pi) as 3.14159 for your calculations. Constraints * The value of N is a non-negative integer. Input Input is given from Standard Input in the following format: N Output * If the value of N is greater than 10, print the area of the circle. * If the value of N is 10 or less, print the circumference of the circle. Examples Input 5 Output 31.4159 Input 12 Output 452.38944","solution":"def circle_measurement(N): Returns the area or circumference of the circle based on the given radius N. If the radius is greater than 10, returns the area of the circle. If the radius is 10 or less, returns the circumference of the circle. pi = 3.14159 if N > 10: # Area of the circle (π * r^2) return pi * N * N else: # Circumference of the circle (2 * π * r) return 2 * pi * N"},{"question":"A city is organized as a grid with `M` rows and `N` columns. People in this city can move in four possible directions: up, down, left, and right. However, there are some buildings and obstacles scattered throughout the city blocking movement through certain cells. Your task is to determine the length of the shortest path from a given start cell to a given destination cell. The input consists of `M + 2` lines: - The first line contains two integers `M` and `N`, indicating the number of rows and columns in the city grid. - The second line contains four integers `startX`, `startY`, `endX`, and `endY`, indicating the row and column indices of the start and destination cells respectively. - Each of the next `M` lines contains `N` characters, either a \'.\' (representing an empty space) or a \'#\' (representing a building or obstacle). Your goal is to determine the shortest number of moves required to get from the start cell to the destination cell, moving only through empty spaces (\'.\'). If there is no possible path, return -1. Input Format The first line contains the integers `M` and `N`. The second line contains the integers `startX`, `startY`, `endX`, and `endY`. Each of the next `M` lines contains a string of length `N`, composed of characters \'.\' and \'#\'. Output Format Print a single integer, the shortest path length from start to destination, or -1 if no such path exists. Constraints - 1 ≤ M, N ≤ 1000 - 0 ≤ startX, startY, endX, endY < M, N Example Input 1 5 5 0 0 4 4 ..... .#.#. .#.#. ..... ..... Example Output 1 8 Example Input 2 3 3 0 0 2 2 # #.. #.. Example Output 2 -1","solution":"from collections import deque def shortest_path(M, N, startX, startY, endX, endY, grid): def is_valid(x, y): return 0 <= x < M and 0 <= y < N and grid[x][y] == \'.\' directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(startX, startY, 0)]) visited = set((startX, startY)) while queue: x, y, dist = queue.popleft() if (x, y) == (endX, endY): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 def parse_input(input_str): lines = input_str.strip().split(\'n\') M, N = map(int, lines[0].split()) startX, startY, endX, endY = map(int, lines[1].split()) grid = lines[2:] return M, N, startX, startY, endX, endY, grid"},{"question":"You have a grid of size N x M, where some cells are blocked, and some are accessible. Alice starts at the top-left corner (0,0) of the grid and wants to reach the bottom-right corner (N-1, M-1). Alice can move either right or down one cell at a time, but she cannot step on blocked cells. Determine the number of distinct paths Alice can take to reach the bottom-right corner from the top-left corner. Constraints * 1 ≤ N, M ≤ 100 * The grid contains only \'.\' (accessible cells) and \'#\' (blocked cells). Input The input consists of: * Two integers N and M, representing the number of rows and columns in the grid. * Next N lines contain M characters each, representing the grid cells (either \'.\' or \'#\'). Output Print the number of distinct paths Alice can take to reach the bottom-right corner. If it is not possible to reach the destination, return 0. Examples Input 3 3 ... .#. ... Output 2 Input 3 3 ..# .#. ... Output 1 Input 3 3 ..# .#. .#. Output 0","solution":"def count_paths(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) m = int(data[1]) grid = [] index = 2 for i in range(n): grid.append(data[index]) index += 1 result = count_paths(n, m, grid) print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given an array \'arr\' of positive integers where each element represents the height of a building. During festive celebrations, you have to decorate buildings with lights. The cost of decorating a building is directly proportional to its height. You want to minimize the total cost of decorating the buildings. However, due to budget constraints, you can choose to reduce the height of exactly one building to zero. This may help in reducing the overall decoration cost. Write a function to find the minimum overall cost of decorating the buildings after reducing the height of exactly one building to zero. Input Format: - The first line contains an integer \'N\' representing the number of buildings. - The second line contains \'N\' space-separated integers which are the heights of the buildings. Output Format: - Output a single integer which is the minimum overall cost calculated after reducing the height of exactly one building to zero. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ arr[i] ≤ 10^5 (1 ≤ i ≤ N) SAMPLE INPUT 5 10 20 30 40 50 SAMPLE OUTPUT 100 Explanation In this example, we have 5 buildings with heights [10, 20, 30, 40, 50]. The total decoration cost without reducing any building is 10 + 20 + 30 + 40 + 50 = 150. If we set the height of the first building to zero, the new heights will be [0, 20, 30, 40, 50], and the total cost will be 0 + 20 + 30 + 40 + 50 = 140. If we set the height of the second building to zero, the new heights will be [10, 0, 30, 40, 50], and the total cost will be 10 + 0 + 30 + 40 + 50 = 130. If we set the height of the third building to zero, the new heights will be [10, 20, 0, 40, 50], and the total cost will be 10 + 20 + 0 + 40 + 50 = 120. If we set the height of the fourth building to zero, the new heights will be [10, 20, 30, 0, 50], and the total cost will be 10 + 20 + 30 + 0 + 50 = 110. Finally, if we set the height of the last building to zero, the new heights will be [10, 20, 30, 40, 0], and the total cost will be 10 + 20 + 30 + 40 + 0 = 100. Therefore, by setting the height of the last building to zero, we get the minimum decoration cost, which is 100.","solution":"def min_decoration_cost(N, arr): Returns the minimum overall cost of decorating the buildings after reducing the height of exactly one building to zero. total_cost = sum(arr) return total_cost - max(arr)"},{"question":"The AtCoder Advent Calendar will commence soon and it involves a daily challenge spanning multiple days. As part of the preparation, an event organizer is tasked with calculating the number of challenge days remaining. You are given two integers, `D` and `M`. `D` represents the starting day and `M` represents the month in a particular year. Use this information to determine how many days are left in that particular month from the starting day. You may assume that the year in question is not a leap year. Constraints: - `1 <= D <= 31` - `1 <= M <= 12` - The input values will always represent a valid date. Months have lengths as follows: - January: 31 days - February: 28 days - March: 31 days - April: 30 days - May: 31 days - June: 30 days - July: 31 days - August: 31 days - September: 30 days - October: 31 days - November: 30 days - December: 31 days Input: Input is given from Standard Input in the following format: ``` D M ``` Output: Print the number of days left in the month starting from day `D`. Examples: Input: ``` 15 2 ``` Output: ``` 14 ``` Input: ``` 1 3 ``` Output: ``` 30 ``` Input: ``` 30 6 ``` Output: ``` 1 ```","solution":"def days_left(D, M): Determines the number of challenge days remaining in the month starting from day D. Parameters: D (int): The starting day. M (int): The month number. Returns: int: The number of remaining days in the month. days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] return days_in_month[M-1] - D"},{"question":"Gayatri was bored with her regular coding assignments, so she decided to code a special number game. Here are the rules of the game: Given a number M, the player must either double the number, decrement it by 1, or get its square root (if it is a perfect square and the square root is an integer) to transform M into an even number. The player who makes M an even number wins. Gayatri allows her friend Swati to start the game but under one condition: she must choose one of the transformations in her first move. Both players play optimally. Bhavna, a common friend, was observing them and wanted to predict the outcome of the game. Can you help Bhavna determine who will win the game? If Swati wins, print \\"First\\" without quotes, and if Gayatri wins, print \\"Second\\" without quotes. Input: The first line contains the number of test cases P. P lines follow, each containing an integer M. Output: Outcome of each game in a separate line. Constraints: 1 <= P <= 100000 1 <= M <= 100000 Example: Input: 2 7 5 Output: First Second","solution":"def who_wins_game(P, test_cases): results = [] for M in test_cases: if M % 2 == 0: results.append(\\"Second\\") else: results.append(\\"First\\") return results # Example usage: P = 2 test_cases = [7, 5] print(who_wins_game(P, test_cases)) # Output: [\'First\', \'Second\']"},{"question":"A company wants to build a task scheduling application where each task has a priority level assigned to it. The priority levels are represented by integers, where a lower number indicates a higher priority. The system needs to process the tasks in a way that the highest priority tasks are completed first. If two tasks have the same priority, they should be processed based on the order they were added to the list. Given a list of tasks, each represented by a tuple (task_name, priority), implement a function to print the tasks in the order they should be processed. Input The first line of input contains an integer T, denoting the number of test cases. Each test case starts with an integer N, the number of tasks. The next N lines each contain a task name (a string) followed by an integer (the priority level). Output For each test case, output the list of task names in the order they should be processed, each name on a new line. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ priority ≤ 10 TASK_NAME is a string consisting of alphanumeric characters without spaces and of length between 1 and 20. SAMPLE INPUT 2 3 task1 2 task2 1 task3 3 4 taskA 1 taskB 2 taskC 1 taskD 3 SAMPLE OUTPUT task2 task1 task3 taskA taskC taskB taskD Explanation In the first test case, the tasks are sorted by their priority levels, with task2 (priority 1) coming first, followed by task1 (priority 2), and then task3 (priority 3). In the second test case, taskA and taskC both have the same highest priority (1), so they maintain the order in which they were added. TaskB (priority 2) follows, and finally taskD (priority 3).","solution":"def process_tasks(test_cases): def get_sorted_tasks(tasks): # Sort primarily by priority, and secondarily by the order they appear return sorted(tasks, key=lambda x: (x[1], x[0])) result = [] for case in test_cases: N, tasks = case sorted_tasks = get_sorted_tasks(tasks) result.extend([task[0] for task in sorted_tasks]) return result def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): N = int(lines[idx]) tasks = [] idx += 1 for _ in range(N): task_info = lines[idx].split() task_name = task_info[0] priority = int(task_info[1]) tasks.append((task_name, priority)) idx += 1 test_cases.append((N, tasks)) return test_cases def format_output(output): return \'n\'.join(output)"},{"question":"Write a function to find the kth smallest element in a matrix. The matrix is arranged in non-decreasing order both row-wise and column-wise (i.e., each row and each column is sorted in non-decreasing order). You need to implement the function `findKthSmallest(matrix: List[List[int]], k: int) -> int` that takes a matrix as a list of lists of integers and an integer k as input, and returns the kth smallest element in the matrix. You can assume k is always a valid integer, meaning 1 ≤ k ≤ n * n (where n is the number of rows in the matrix). Constraints: * The number of rows and columns in the matrix can vary but will be between 1 and 300. * -10^9 leq matrix[i][j] leq 10^9 for all 0 ≤ i, j < n. Input The input consists of a matrix and an integer k. Each row of the matrix is provided as a space-separated list of integers. n k matrix[0_0] matrix[0_1] ... matrix[0_{n-1}] matrix[1_0] matrix[1_1] ... matrix[1_{n-1}] ... matrix[{n-1}_0] matrix[{n-1}_1] ... matrix[{n-1}_{n-1}] Output Return the kth smallest element in the matrix. Examples Input 3 5 1 5 7 3 7 8 4 8 9 Output 7 Input 2 2 1 3 2 4 Output 2","solution":"import heapq def findKthSmallest(matrix, k): Finds the kth smallest element in a sorted matrix. :param matrix: List[List[int]] - A list of lists of integers representing the sorted matrix :param k: int - An integer representing the kth position (1-based index) :return: int - The kth smallest element in the matrix min_heap = [] # Insert the first element of each row into the min heap along with the row and column information for r in range(len(matrix)): heapq.heappush(min_heap, (matrix[r][0], r, 0)) # Remove the smallest element from the min-heap k times while k > 0: element, r, c = heapq.heappop(min_heap) # If the next element in the row exists, push it into the heap if c + 1 < len(matrix[0]): heapq.heappush(min_heap, (matrix[r][c + 1], r, c + 1)) k -= 1 return element"},{"question":"Alice is part of a team developing a new task management system. The system needs to handle dependencies between tasks, ensuring that some tasks need to be completed before others. The tasks are represented as nodes, and the dependencies as directed edges in a Directed Acyclic Graph (DAG). To maximize the efficiency of task execution, Alice needs to determine the longest path in the graph, in terms of the number of tasks. The longest path in a DAG is the longest sequence of tasks that must be performed sequentially. Alice has prepared the following details for you to help determine the length of this longest path. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and m (0 ≤ m ≤ 10^5) — the number of tasks and dependencies, respectively. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v), which means there is a directed edge from task u to task v. It is guaranteed that the graph is a DAG. Output Print a single integer — the length of the longest path in the directed graph. Examples Input 5 6 1 2 1 3 3 2 2 4 3 4 4 5 Output 4 Input 4 3 1 2 2 3 3 4 Output 3 Note In the first example, one of the longest paths is 1 → 3 → 2 → 4 → 5. Its length is 4. In the second example, the longest path is 1 → 2 → 3 → 4. Its length is 3.","solution":"from typing import List, Tuple from collections import defaultdict, deque def longest_path_in_dag(n: int, m: int, edges: List[Tuple[int, int]]) -> int: def topological_sort(): indegree = [0] * (n + 1) for u, v in edges: indegree[v] += 1 queue = deque([i for i in range(1, n + 1) if indegree[i] == 0]) topo_order = [] while queue: node = queue.popleft() topo_order.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) return topo_order graph = defaultdict(list) for u, v in edges: graph[u].append(v) topo_order = topological_sort() dist = [0] * (n + 1) for node in topo_order: for neighbor in graph[node]: if dist[node] + 1 > dist[neighbor]: dist[neighbor] = dist[node] + 1 return max(dist) # Example usage if __name__ == \\"__main__\\": n, m = 5, 6 edges = [(1, 2), (1, 3), (3, 2), (2, 4), (3, 4), (4, 5)] print(longest_path_in_dag(n, m, edges)) # Output: 4"},{"question":"Write a program that finds the longest common subsequence (LCS) of two given strings. Hint You can use dynamic programming to find the LCS efficiently. Define a 2D array dp where dp[i][j] represents the length of LCS of the first i characters of string A and the first j characters of string B. Constraints 1 ≤ length of string A, B ≤ 1000 Input Two strings A and B are given as input, each on a new line. Output Output the length of the longest common subsequence between the two strings. Examples Input ABCBDAB BDCABA Output 4 Input XMJYAUZ MZJAWXU Output 4","solution":"def longest_common_subsequence(A, B): Returns the length of the longest common subsequence of strings A and B. :param A: String A :param B: String B :return: Integer length of the longest common subsequence m, n = len(A), len(B) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"A large company has multiple buildings connected by walkways. Each building has an elevator that can either be operational (up) or out of order (down), indicated by a binary number (1 for up, 0 for down). Employees move through these walkways to travel between buildings. To maintain productivity, it is critical to ensure that employees always have access to at least one elevator in an operational state at any given time when traveling between two buildings. If an elevator is out of order, employees can still use the building as long as there is another operational elevator reachable through the walkways. You are given a list of elevators\' states and the walkways, and you need to determine if it is possible to ensure continuous access to at least one operational elevator for all buildings. Input: The input is given in the following format. N M e_1 e_2 .. e_N b_1 b_2 b_3 b_4 :: b_N b_N The first line gives the number of buildings N ( 2 leq N leq 10^5 ) and the number of walkways M ( 1 leq M leq 2 times 10^5 ). The next line gives a binary number e_i ( 0 leq e_i leq 1 ) representing the elevator state in the building i . The following M lines give the buildings connected by walkways where b_i and b_j ( 1 leq b_i, b_j leq N ) connected to both ends of each walkway. Output: Output \\"YES\\" if continuous access to at least one operational elevator can be ensured for all buildings. Otherwise, output \\"NO\\". Examples Input: 6 5 1 0 0 1 0 0 1 2 2 3 3 4 4 5 5 6 Output: YES Input: 4 2 0 0 0 0 1 2 3 4 Output: NO Input: None Output: None","solution":"def can_ensure_access(N, M, elevators, walkways): from collections import defaultdict, deque graph = defaultdict(list) for b1, b2 in walkways: graph[b1].append(b2) graph[b2].append(b1) visited = [False] * (N + 1) operational_components = [] def bfs(start): queue = deque([start]) visited[start] = True component_operational = False while queue: node = queue.popleft() if elevators[node - 1] == 1: component_operational = True for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component_operational for building in range(1, N + 1): if not visited[building]: operational_components.append(bfs(building)) return \\"YES\\" if all(operational_components) else \\"NO\\""},{"question":"Write a function that simulates a queue using two stacks. The function should implement the following operations: - `enqueue(x)`: Insert element x at the end of the queue. - `dequeue()`: Remove the element from the front of the queue and return it. - `front()`: Get the front element of the queue (without removing it). Your task is to write the complete implementation of this simulated queue using the two-stack approach. **Constraints:** - All operations should be implemented in O(1) amortized time complexity. - You can assume the maximum number of `enqueue` and `dequeue` operations combined does not exceed 10^5. **Input:** The input consists of multiple lines. Each line represents a single operation to be performed on the queue. The operations are: - `enqueue x` - to insert element x at the end of the queue. - `dequeue` - to remove the element from the front of the queue and print it. - `front` - to print the front element of the queue (without removing it). **Output:** For each `dequeue` and `front` operation, print the corresponding value. **Example:** Input ``` enqueue 1 enqueue 2 front enqueue 3 dequeue front dequeue dequeue enqueue 4 front ``` Output ``` 1 1 2 3 4 ``` Note: If the queue is empty and a `dequeue` or `front` operation is called, your implementation should handle it gracefully by printing an appropriate message, such as \\"Queue is empty\\".","solution":"class QueueUsingStacks: def __init__(self): self.in_stack = [] self.out_stack = [] def enqueue(self, x): self.in_stack.append(x) def dequeue(self): if not self.out_stack: while self.in_stack: self.out_stack.append(self.in_stack.pop()) if self.out_stack: return self.out_stack.pop() else: return \\"Queue is empty\\" def front(self): if not self.out_stack: while self.in_stack: self.out_stack.append(self.in_stack.pop()) if self.out_stack: return self.out_stack[-1] else: return \\"Queue is empty\\""},{"question":"You are given a grid of N rows and M columns. Each cell in the grid can either be walkable (represented by \'.\') or blocked (represented by \'#\'). You start at the top-left corner of the grid (1,1) and your goal is to reach the bottom-right corner of the grid (N,M). You can move one cell at a time in four possible directions: up, down, left, or right, but you cannot move into a blocked cell. Find the minimum number of moves required to reach the bottom-right corner from the top-left corner. If it is not possible to reach the bottom-right corner, return -1. Constraints * 1 leq N, M leq 1000 * The grid contains only characters \'.\' and \'#\' Input Input is given from Standard Input in the following format: N M grid Output Print the minimum number of moves required to reach the bottom-right corner, or -1 if it is not possible. Examples Input 3 3 ... .#. ... Output 4 Input 3 3 .#. # .#. Output -1","solution":"from collections import deque def min_moves_to_reach_bottom_right(N, M, grid): if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = [[False] * M for _ in range(N)] queue = deque([(0, 0, 0)]) visited[0][0] = True while queue: x, y, moves = queue.popleft() if x == N-1 and y == M-1: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, moves + 1)) return -1"},{"question":"A popular graphics editing software wants to introduce a new feature that will allow its users to apply a complex filter to their images. The filter works by rotating sections of the image\'s pixel matrix. Given an NxN matrix of integers representing pixel values, the filter rotates every KxK block of the matrix 90 degrees clockwise. If NxN is not a multiple of KxK, leave those elements that don\'t fit into the nearest KxK block unchanged. Write a function that takes the matrix of pixel values, the size of the image matrix (N), and the block size (K), and returns the transformed matrix after applying the filter. # Input * N: Integer, the size of the NxN matrix (2 ≤ N ≤ 500) * K: Integer, the size of the KxK blocks (2 ≤ K ≤ N) * A: NxN matrix of integers representing the pixel values (0 ≤ A[i][j] ≤ 255) # Output * The transformed NxN matrix after applying the filter # Function Signature ```python def apply_filter(N: int, K: int, A: List[List[int]]) -> List[List[int]]: ``` # Example Input ``` 4 2 [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]] ``` Output ``` [[5, 1, 7, 3], [6, 2, 8, 4], [13, 9, 15, 11], [14, 10, 16, 12]] ``` Input ``` 5 3 [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]] ``` Output ``` [[11, 6, 1, 4, 5], [12, 7, 2, 9, 10], [13, 8, 3, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]] ``` # Notes 1. For the given example, - The `5x5` matrix is divided into `3x3` blocks. - The first `3x3` block is rotated 90 degrees clockwise. - The remaining elements are unchanged since they do not fit into any `KxK` blocks. 2. Be mindful of edge cases where `K` might be equal to `N` or close to `N` which would result in only one or no `KxK` block for the transformation.","solution":"from typing import List def rotate_90_clockwise(block: List[List[int]]) -> List[List[int]]: Rotates a KxK block 90 degrees clockwise. K = len(block) rotated = [[0] * K for _ in range(K)] for i in range(K): for j in range(K): rotated[j][K - 1 - i] = block[i][j] return rotated def apply_filter(N: int, K: int, A: List[List[int]]) -> List[List[int]]: Applies the filter over NxN matrix with KxK blocks. result = [row[:] for row in A] for i in range(0, N, K): for j in range(0, N, K): if i + K <= N and j + K <= N: block = [row[j:j+K] for row in A[i:i+K]] rotated_block = rotate_90_clockwise(block) for row_index, row in enumerate(rotated_block): result[i + row_index][j:j+K] = row return result"},{"question":"Write an algorithm to generate a sequence of prime numbers such that the nth prime number (starting from 1) is generated at the nth position in the sequence, while also ensuring that the sum of those prime numbers up to the nth position is always less than or equal to 1,000,000. Your task is to answer Q queries, with each query asking for the nth prime number and the sum of the first n prime numbers. Constraints - 1 leq Q leq 10^3 - For each query, 1 leq n leq 10^4 Input Input is given from Standard Input in the following format: ``` Q n_1 n_2 ... n_Q ``` Output For each query i in order of input, print a line containing the nth prime number followed by the sum of the first n prime numbers, both values separated by a space. Example Input ``` 5 1 3 5 10 20 ``` Output ``` 2 2 5 10 11 28 29 129 71 639 ```","solution":"def generate_primes(limit): Generate a list of prime numbers up to the specified limit using the Sieve of Eratosthenes. sieve = [True] * (limit+1) sieve[0] = sieve[1] = False for start in range(2, int(limit**0.5) + 1): if sieve[start]: for i in range(start*start, limit+1, start): sieve[i] = False return [num for num, is_prime in enumerate(sieve) if is_prime] def primes_and_sums_up_to_nth_prime(max_n): Generate the nth prime and the sum of those primes up to the nth position. Ensures the sum does not exceed 1,000,000. primes = generate_primes(105000) # Upper estimate to cover first 10,000 primes prime_sums = [] running_sum = 0 for prime in primes: if running_sum + prime <= 1000000: running_sum += prime prime_sums.append((prime, running_sum)) else: break return prime_sums[:max_n+1] def main(): import sys input = sys.stdin.read data = input().split() Q = int(data[0]) queries = [int(data[i]) for i in range(1, Q+1)] max_query = max(queries) result = primes_and_sums_up_to_nth_prime(max_query) for query in queries: nth_prime, prime_sum = result[query-1] print(nth_prime, prime_sum) if __name__ == \\"__main__\\": main()"},{"question":"One famous puzzle, known as the \\"Josephus problem,\\" originates from a historical anecdote involving Jewish soldiers surrounded by Romans. The soldiers formed a circle and committed to a successful escape strategy, or so they thought. They decided to eliminate every k-th soldier in the circle until only one remained. Your task is to help simulate the Josephus problem given two parameters: the number of soldiers and the step rate k. You are to write a function that returns the position that will remain last in the circle. The soldiers are initially numbered from 1 to n. Input The input consists of two integers n and k separated by a single space: n: the number of soldiers (1 ≤ n ≤ 30) k: the step rate or interval for elimination (1 ≤ k ≤ n) Output The single integer output should be the position of the last remaining soldier (1-based index). Examples Input 7 3 Output 4 Input 5 2 Output 3","solution":"def josephus(n, k): Solves the Josephus problem. :param n: int: The number of soldiers (1 ≤ n ≤ 30) :param k: int: The step rate (1 ≤ k ≤ n) :return: int: The position of the last remaining soldier (1-based index) # List to represent the soldiers soldiers = list(range(1, n + 1)) index = 0 while len(soldiers) > 1: index = (index + k - 1) % len(soldiers) soldiers.pop(index) return soldiers[0]"},{"question":"Treehouse Inc. is planning to construct a network of communication towers across a newly developed residential area. Each house in the area is to be served by these towers. The towers should be positioned in such a way that every house is connected to at least one tower directly. For cost efficiency and signal stability, each tower can only connect to a limited number of houses directly. The network requirements are: 1. Each communication tower can serve exactly `m` houses directly. 2. The total number of houses is `h`, and the number of towers is `t`. Your goal is to design the network such that every house is directly connected to one of the towers, and the number of houses each tower serves does not exceed `m`. Input The first line contains three integers `t`, `h`, and `m` (1 ≤ t ≤ 5000, 1 ≤ h ≤ 100000, 1 ≤ m ≤ 1000) — the number of towers, the total number of houses, and the maximum number of houses each tower can serve directly. Output If it is possible to structure the network based on the given constraints, output \\"YES\\". Then, print `h` lines where each line contains two space-separated integers `house_id` and `tower_id`, indicating that the house with `house_id` is connected to the tower with `tower_id`. Houses and towers are numbered starting from 1. If it is not possible to construct such a network, output \\"NO\\". Examples Input 3 9 4 Output YES 1 1 2 1 3 1 4 1 5 2 6 2 7 2 8 3 9 3 Input 2 5 2 Output NO Note In the first example, it is possible to connect each house such that no tower serves more than 4 houses directly. In the second example, it is not possible to connect 5 houses with only 2 towers, each serving at most 2 houses.","solution":"def design_network(t, h, m): Determine the distribution of houses to towers based on the constraints. Parameters: t (int): Number of towers h (int): Total number of houses m (int): Maximum number of houses each tower can serve Returns: str: \\"YES\\" followed by house to tower assignments if possible; \\"NO\\" otherwise. if t * m < h: return \\"NO\\" distribution = [] tower_id = 1 for house_id in range(1, h + 1): distribution.append((house_id, tower_id)) if house_id % m == 0: tower_id += 1 result = \\"YESn\\" result += \\"n\\".join(f\\"{house_id} {tower_id}\\" for house_id, tower_id in distribution) return result"},{"question":"Alice loves playing with arrays. She has an array of n integers. Alice wants to play a game where she can perform the following operation at most once: Select any subarray and remove it, the resulting array after removal will be the remaining parts concatenated together. The game ends when Alice has performed her operation and wants to know the maximum number of distinct integers the resulting array can have. Can you help Alice find the maximum number of distinct integers in the resulting array after removing the optimal subarray? Input The first line contains an integer n (1 ≤ n ≤ 2 * 10^5) — the size of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Print a single integer — the maximum number of distinct integers in the array after removing at most one subarray. Examples Input 5 1 2 3 4 5 Output 5 Input 7 1 2 1 3 4 2 1 Output 4 Input 6 4 4 4 4 4 4 Output 1 Note In the first example, Alice can choose to remove any subarray or not remove anything and still have all distinct numbers. In the second example, Alice can remove the subarray `[1, 2]` to obtain `[1, 3, 4, 2, 1]` or `[2, 1, 3, 4]` to maximize the number of distinct integers. In the third example, all elements are the same, so removing any subarray won\'t change the number of distinct integers.","solution":"def max_distinct_after_removal(n, array): from collections import defaultdict # Calculate the initial number of distinct elements initial_distinct = len(set(array)) # Store the contribution of each element in terms of frequency counts freq = defaultdict(int) for number in array: freq[number] += 1 max_distinct = initial_distinct # Start with the initial distinct count # Consider all possible subarrays for i in range(n): current_freq = defaultdict(int) for j in range(i, n): current_freq[array[j]] += 1 if current_freq[array[j]] == freq[array[j]]: max_distinct = max(max_distinct, len(freq) - len(current_freq)) return max_distinct"},{"question":"Problem statement You are given a list of integers and your task is to find the length of the longest subsequence that satisfies the following condition: - In the subsequence, the sum of every consecutive pair of integers must be even. Please write a program that outputs this length. # Constraint * 1 leq N leq 10^5 * The integers are between 1 and 10^9, inclusive. # Input The first line contains one integer N representing the number of integers in the list. The second line contains N integers separated by a single space. # Output Output the length of the longest subsequence that satisfies the given condition. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 3 ``` Explanation The subsequence [1, 3, 5] or [2, 4] satisfies the condition. The longest length is 3. Input ``` 6 2 4 1 3 5 7 ``` Output ``` 4 ``` Explanation The subsequence [2, 4] or [1, 3, 5, 7] satisfies the condition. The longest length is 4.","solution":"def longest_even_sum_subsequence_length(n, arr): Returns the length of the longest subsequence wherein the sum of every consecutive pair of integers is even. if n == 0: return 0 even_count = sum(1 for x in arr if x % 2 == 0) odd_count = n - even_count # The longest subsequence will be the maximum of even or odd counts. return max(even_count, odd_count)"},{"question":"You are given an array of integers, and you are required to answer a series of queries. Each query asks for the sum of integers in a subarray defined by two indices, l and r, inclusive. Your task is to preprocess the array so that each query can be answered efficiently. Input: The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the array. The third line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the indices defining the subarray for which the sum is to be calculated. Output: For each query, output a single integer — the sum of elements in the subarray from l to r, inclusive. Example: Input: 5 1 2 3 4 5 3 1 3 2 5 1 5 Output: 6 14 15 Explanation: For the first query, the sum of elements from index 1 to index 3 is 1 + 2 + 3 = 6. For the second query, the sum of elements from index 2 to index 5 is 2 + 3 + 4 + 5 = 14. For the third query, the sum of elements from index 1 to index 5 is 1 + 2 + 3 + 4 + 5 = 15. Note: The preprocessing step that allows for efficient querying can include constructing a prefix sum array, which can then be used to calculate the sum of any subarray in constant time.","solution":"def preprocess_array(arr): Preprocess the array to create a prefix sum array. Args: arr (list of int): The input array. Returns: list of int: The prefix sum array. prefix_sum = [0] * (len(arr) + 1) for i in range(1, len(prefix_sum)): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] return prefix_sum def query_sum(prefix_sum, l, r): Calculate the sum of the subarray from index l to r, inclusive, using the prefix sum array. Args: prefix_sum (list of int): The prefix sum array. l (int): The starting index (1-based). r (int): The ending index (1-based). Returns: int: The sum of the elements in the subarray from l to r. return prefix_sum[r] - prefix_sum[l - 1]"},{"question":"Given a collection of items where each item has a weight and a value, determine the maximum value you can achieve by selecting a subset of the items such that the total weight of the selected items does not exceed a given weight limit. This problem is known as the \\"Knapsack problem\\", a classic problem in combinatorial optimization. You are provided with: * An integer `W` representing the weight limit of the knapsack. * An integer `n` representing the number of items. * An array `weights` of length `n` where `weights[i]` is the weight of the `i-th` item. * An array `values` of length `n` where `values[i]` is the value of the `i-th` item. You need to determine the maximum value you can achieve. # Input * The first line contains two integers, `W` (1 ≤ W ≤ 10^4) and `n` (1 ≤ n ≤ 100). * The second line contains `n` integers representing the weights of the items. * The third line contains `n` integers representing the values of the items. # Output * Output a single integer — the maximum value achievable with the given weight limit. # Example Input ``` 50 3 10 20 30 60 100 120 ``` Output ``` 220 ``` Input ``` 10 4 5 4 6 3 10 40 30 50 ``` Output ``` 90 ```","solution":"def knapsack(W, weights, values, n): Determines the maximum value that fits in the knapsack with capacity W. :param W: int - maximum weight the knapsack can hold :param weights: list of int - weights of the items :param values: list of int - values of the items :param n: int - number of items :return: int - maximum value achievable within the weight constraint # Initialize DP table with 0\'s dp = [[0 for x in range(W + 1)] for x in range(n + 1)] # Build table dp[][] in a bottom-up manner for i in range(n + 1): for w in range(W + 1): if i == 0 or w == 0: dp[i][w] = 0 elif weights[i - 1] <= w: dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]) else: dp[i][w] = dp[i - 1][w] return dp[n][W] # Example usage: # W = 50, n = 3, weights = [10, 20, 30], values = [60, 100, 120] # print(knapsack(50, [10, 20, 30], [60, 100, 120], 3)) # Expected output: 220"},{"question":"In an alien language, they use an alphabet of only lowercase English letters, but in a different order. You need to determine the order of characters based on a sorted list of words in the alien language. Write a function to find the order of characters in the alien language. If there are multiple valid orders, return any of them. If the given words cannot establish a valid character order, return an empty string. Constraints * 1 ≤ number of words ≤ 100 * 1 ≤ length of each word ≤ 100 * All input values are lowercase English letters. Input - A list of words sorted lexicographically in the alien language. Output - A string representing the order of characters in the alien language or an empty string if no valid order exists. Examples Input [\\"wrt\\", \\"wrf\\", \\"er\\", \\"ett\\", \\"rftt\\"] Output \\"wertf\\" Input [\\"z\\", \\"x\\"] Output \\"zx\\" Input [\\"z\\", \\"x\\", \\"z\\"] Output \\"\\" Input [\\"abc\\", \\"ab\\"] Output \\"\\"","solution":"from collections import defaultdict, deque def alien_order(words): Determines the order of characters in an alien language based on sorted words. :param words: List[str] - A list of words sorted lexicographically in the alien language :return: str - A string representing the order of characters in the alien language or an empty string if no valid order exists # Step 1: Create a graph graph = defaultdict(set) in_degree = {c: 0 for word in words for c in word} # Step 2: Build the graph and find all edges for first, second in zip(words, words[1:]): for c1, c2 in zip(first, second): if c1 != c2: if c2 not in graph[c1]: graph[c1].add(c2) in_degree[c2] += 1 break else: if len(second) < len(first): return \\"\\" # Step 3: Topological Sort using Kahn\'s Algorithm (BFS) zero_in_degree_queue = deque([c for c in in_degree if in_degree[c] == 0]) order = [] while zero_in_degree_queue: current_char = zero_in_degree_queue.popleft() order.append(current_char) for neighbour in graph[current_char]: in_degree[neighbour] -= 1 if in_degree[neighbour] == 0: zero_in_degree_queue.append(neighbour) # If all characters are in the order list, return the order if len(order) == len(in_degree): return \'\'.join(order) else: return \\"\\""},{"question":"A university has a library with n books. Each book is categorized into one of m categories. A student wants to read exactly one book from each category to diversify their reading. To help with this, the library has provided a list of books with their respective categories and reading times. The student\'s objective is to select one book from each category such that the total reading time is minimized. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of books and the number of categories. Each of the next n lines contains two integers t_i (1 ≤ t_i ≤ 1000) and c_i (1 ≤ c_i ≤ m), where t_i denotes the time to read the i-th book, and c_i denotes the category of the i-th book. Output Print a single integer — the minimum total reading time to read one book from each category. Examples Input 6 3 10 1 5 1 7 2 4 2 3 3 2 3 Output 11 Input 5 2 8 1 3 1 6 2 9 2 1 2 Output 4 Note In the first example, the student can select books with times 5 from category 1, 4 from category 2, and 2 from category 3, resulting in a total reading time of 5 + 4 + 2 = 11. In the second example, the student can select books with times 3 from category 1 and 1 from category 2, resulting in a total reading time of 3 + 1 = 4.","solution":"def minimum_reading_time(n, m, books): Returns the minimum total reading time to read one book from each category. Parameters: n (int): Number of books. m (int): Number of categories. books (list of tuples): Each tuple contains two integers t_i (reading time) and c_i (category). Returns: int: Minimum total reading time. from collections import defaultdict import sys # Dictionary to store the minimum reading time for each category category_min_time = defaultdict(lambda: sys.maxsize) # Iterate over each book for t_i, c_i in books: # Update the minimum reading time for the book\'s category if smaller time is found if t_i < category_min_time[c_i]: category_min_time[c_i] = t_i # Calculate total minimum reading time by summing minimum times of each category total_min_time = sum(category_min_time[cat] for cat in range(1, m + 1)) return total_min_time # Example usage: if __name__ == \\"__main__\\": n = 6 m = 3 books = [(10, 1), (5, 1), (7, 2), (4, 2), (3, 3), (2, 3)] print(minimum_reading_time(n, m, books)) # Output: 11"},{"question":"John is an avid reader and collector of books. He has recently noticed that he needs a more efficient way to organize his collection of books on his custom bookshelf. The bookshelf has n slots, each capable of holding exactly one book. Each slot is numbered from 1 to n, and each book also has a unique identifier. John wants to organize his books in a manner that minimizes the total cost of arranging them. The cost is defined as the sum of absolute differences between the current slot positions and the desired positions for all books. Specifically, if a book with the identifier i is currently in slot p and its desired position is slot q, the cost for this book is |p - q|. Write a function to help John determine the minimal cost of arranging the books given their initial positions and their desired positions. Input The first line contains an integer n (1 ≤ n ≤ 1000) – the number of books (and slots on the shelf). The second line contains n integers b1, b2, ..., bn – the initial slots of the books. Each value is a unique integer from 1 to n representing the book identifiers. The third line contains n integers d1, d2, ..., dn – the desired slots for the books. Each value is also a unique integer from 1 to n representing the book identifiers. Output Print a single integer – the minimal total cost to arrange the books. Examples Input 5 2 4 1 5 3 5 2 3 1 4 Output 10 Input 4 1 3 4 2 2 4 1 3 Output 8 Note In the first example, the book 2 is currently in slot 1 but should be in slot 5: the difference is |1-5| = 4. Proceed similarly for each book and sum up the costs. In the second example, the book 1 is already in the desired slot: the cost is 0. Other books need to be swapped or moved to desired positions with some cost.","solution":"def minimal_arrangement_cost(n, initial_positions, desired_positions): initial_slots = {book: i+1 for i, book in enumerate(initial_positions)} desired_slots = {book: i+1 for i, book in enumerate(desired_positions)} total_cost = 0 for book in range(1, n+1): total_cost += abs(initial_slots[book] - desired_slots[book]) return total_cost # Sample usage if __name__ == \\"__main__\\": print(minimal_arrangement_cost(5, [2, 4, 1, 5, 3], [5, 2, 3, 1, 4])) # Output: 10 print(minimal_arrangement_cost(4, [1, 3, 4, 2], [2, 4, 1, 3])) # Output: 8"},{"question":"In a faraway kingdom, the king has organized a grand tournament of mages where every mage can cast spells of various powers. The goal is to determine the most powerful spell that can be cast by each mage. Each mage is given a number of spell cards. Each card has a power value. However, a mage can only use a subset of their spell cards and must choose the most powerful card from this subset. The kingdom has decided to optimize the process by asking you to write a program. Your task is to determine the maximum power value of the spells available to each mage based on their choices. Input The first line contains an integer k (1 ≤ k ≤ 100,000) — the number of mages in the tournament. For each mage, there is a corresponding line starting with an integer si (1 ≤ si ≤ 50,000) — the number of spell cards that mage i has, followed by si integers representing the power values of the spell cards (1 ≤ power ≤ 1,000,000). Output For each mage, output the maximum power value of the spells they can cast. Example Input 3 3 4 5 6 4 7 2 9 3 2 8 1 Output 6 9 8","solution":"def max_spell_power(number_of_mages, mages_spell_powers): Returns a list of the maximum power value of spells for each mage. max_powers = [] for i in range(number_of_mages): si, *powers = mages_spell_powers[i] max_powers.append(max(powers)) return max_powers"},{"question":"Write a function that takes a string containing a mathematical expression and evaluates it. The expression may include addition (+), subtraction (-), multiplication (*), division (/), parentheses, and whitespace. The division should be treated as integer division. Example Input \\"3 + 5 / 2\\" Output 5","solution":"def evaluate_expression(expression): Evaluates a mathematical expression with +, -, *, /, and parentheses and returns the result. Division is treated as integer division. def eval_tokens(tokens): stack = [] num = 0 op = \'+\' while tokens: token = tokens.pop(0) if token.isdigit(): num = int(token) if token == \'(\': num = eval_tokens(tokens) if (not token.isdigit() and token != \' \') or not tokens: if op == \'+\': stack.append(num) elif op == \'-\': stack.append(-num) elif op == \'*\': stack.append(stack.pop() * num) elif op == \'/\': stack.append(int(stack.pop() / num)) op = token num = 0 if token == \')\': break return sum(stack) tokens = [] number = \\"\\" for char in expression: if char.isdigit(): number += char else: if number: tokens.append(number) number = \\"\\" if char in \\"+-*/()\\": tokens.append(char) if number: tokens.append(number) return eval_tokens(tokens)"},{"question":"In a game development company, characters move through a grid-based environment. The grid is represented as an n x n matrix where each cell can either be empty or contain an obstacle. Characters can move up, down, left, or right but cannot move diagonally or through obstacles. Your task is to determine the shortest path from a given starting position (sx, sy) to a target position (tx, ty) on the grid. If it is not possible to reach the target position, return -1. The path found should be the minimum number of moves necessary for the character to reach the target from the start. Input - The first line contains a single integer n (1 ≤ n ≤ 1000) — the size of the grid. - The next n lines each contain n characters, where \'.\' represents an empty cell and \'#\' represents an obstacle. - The last line contains four integers sx, sy, tx, ty (1 ≤ sx, sy, tx, ty ≤ n) — the starting and target positions (given in 1-based index). Output - Print a single integer representing the minimum number of moves required to reach the target from the start, or -1 if it is not possible. Examples Input 5 ..... ..#.. ..... .#.#. ..... 1 1 5 5 Output 8 Input 3 ..# .#. ..# 1 1 3 3 Output -1 Note In the first sample, the character can move through the grid to reach from (1, 1) to (5, 5) in 8 moves avoiding the obstacles. In the second sample, there\'s no path from the start to the target because obstacles block the way.","solution":"from collections import deque def min_moves_to_reach_target(n, grid, sx, sy, tx, ty): Returns the minimum number of moves required to reach the target from the start in a grid or -1 if it is not possible to reach the target. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * n for _ in range(n)] queue = deque([(sx - 1, sy - 1, 0)]) # use 0-based index for internal processing visited[sx - 1][sy - 1] = True while queue: x, y, dist = queue.popleft() if (x, y) == (tx - 1, ty - 1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1 # Sample grid inputs for manual testing # grid = [ # \\".....\\", # \\"..#..\\", # \\".....\\", # \\".#.#.\\", # \\".....\\" # ] # print(min_moves_to_reach_target(5, grid, 1, 1, 5, 5)) # Expected output: 8"},{"question":"A group of friends decide to play an adventurous treasure hunt game. The game is set in a rectangular grid-shaped maze with cells represented by an `n x m` matrix. Each cell represents a location within the maze and can either be passable (\'.\') or impassable (\'#\'). The friends can move between passable cells in four possible directions: up, down, left, and right, but cannot move diagonally. The key to this challenge is to navigate from the starting position (located at the top-left corner of the maze at position (0, 0)) to the treasure, which is located at the bottom-right corner of the maze at position (n-1, m-1). If the start or treasure location is impassable, the journey is unfortunately impossible. However, in this maze, there might be different routes of varying lengths. Your task is to determine the shortest route (measured in the number of steps taken) from the start to the treasure. Write a program to calculate the minimum number of steps required to reach the treasure. If it is not possible to reach the treasure, return `-1`. # Input - The first line contains two space-separated integers `n` and `m` (1 ≤ n, m ≤ 1000) representing the number of rows and columns of the maze. - Each of the next `n` lines contains a string of length `m` consisting of characters `.` and `#` which represents the maze. # Output - A single integer representing the minimum number of steps required to reach the treasure. If it\'s not possible, output `-1`. # Example Input ``` 5 5 ..... .#. ...#. .#... ..... ``` Output ``` 8 ``` Input ``` 4 4 #..# #..# ``` Output ``` -1 ``` # Explanation Example 1: The shortest path from (0, 0) to (4, 4) takes 8 steps: ``` (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (2,4) -> (3,4) -> (4,4) ``` Example 2: It is impossible to reach the treasure since all possible routes are blocked by impassable cells. Note: - You may assume all cells except (0, 0) and (n-1, m-1) can be impassable. - You have to take the shortest possible path where each step is counted.","solution":"from collections import deque def min_steps_to_treasure(n, m, maze): # Check if the start or the end positions are blocked if maze[0][0] == \'#\' or maze[n-1][m-1] == \'#\': return -1 # Directions for moving in the maze (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS with starting point queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() # If we reach the treasure position if x == n-1 and y == m-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and maze[nx][ny] == \'.\': queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) # If there is no way to the treasure position return -1"},{"question":"Alice loves to create symmetric patterns. She wants to write a function that verifies if a given string can be rearranged to form a palindrome. A palindrome is a string that reads the same backward as forward. Given multiple strings, determine for each string if it can be rearranged to form a palindrome. Example for \'aabb\' \'aabb\' can be rearranged to \'abba\', which is a palindrome. Example for \'code\' \'code\' cannot be rearranged to form a palindrome. INPUT: T (number of test cases) followed by T cases. 0 < T (test cases) < 1000 0 < length of each string < 10^5 Only lowercase English letters are allowed. OUTPUT: Case #\'case_no\':YES //if the string can be rearranged to form a palindrome Case #\'case_no\':NO //if the string cannot be rearranged to form a palindrome Sample Test case #1: Input 3 aabb code carerac Output Case #1:YES Case #2:NO Case #3:YES SAMPLE INPUT 3 aabb code carerac SAMPLE OUTPUT Case #1:YES Case #2:NO Case #3:YES","solution":"def can_form_palindrome(s): Returns True if the string s can be rearranged to form a palindrome, otherwise False. from collections import Counter char_counts = Counter(s) odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) return odd_count <= 1 def process_test_cases(test_cases): Processes multiple test cases and returns the results in the proper format. test_cases is a list of strings. results = [] for i, case in enumerate(test_cases): if can_form_palindrome(case): results.append(f\\"Case #{i + 1}:YES\\") else: results.append(f\\"Case #{i + 1}:NO\\") return results"},{"question":"Alex recently got into gardening, and he is particularly fond of planting flowers. For his new flower bed, he wants to arrange the flowers in a way that maximizes the number of potential matches for cross-pollination. Flowers of the same color cannot cross-pollinate with each other. Alex has n flowers, each with a specific color. He wants to plant these flowers in a row in such a way that maximizes the number of adjacent pairs of flowers that have different colors. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of flowers. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the colors of the flowers. Output Print a single integer — the maximum number of adjacent pairs of flowers that have different colors when arranged optimally. Examples Input 5 1 2 3 4 5 Output 4 Input 4 1 1 1 1 Output 0 Input 3 4 4 6 Output 1 Input 6 3 3 3 4 5 5 Output 3 Note In the first sample, any arrangement of different-colored flowers will satisfy the condition. Since there are five flowers with different colors, the maximum number of adjacent pairs with different colors is 4. In the second sample, all flowers are of the same color, so no pairs of flowers with different colors are possible. In the third sample, arranging the flowers as [4, 6, 4] creates only one pair of adjacent flowers with different colors. In the fourth sample, an optimal arrangement like [3, 4, 3, 5, 3, 5] ensures that three pairs of adjacent flowers have different colors.","solution":"def max_adjacent_diff_color_pairs(n, flower_colors): if n <= 1: return 0 # If all flowers have the same color, there will be no pair of different colors. if len(set(flower_colors)) == 1: return 0 # The maximum number of adjacent pairs with different colors is always n-1 # if there is at least one different colored flower. return n - 1"},{"question":"A group of people are standing in a line, and each person is holding a sign with a number written on it. They want to rearrange themselves in such a way that all the even numbers come before all the odd numbers, while maintaining the relative order of the even and odd numbers from the original arrangement. For example, given the list [3, 8, 5, 12, 10, 7, 6], the result should be [8, 12, 10, 6, 3, 5, 7]. Write a function `rearrange(nums)` that takes a list of integers as input and returns a new list with all the even numbers followed by all the odd numbers, preserving their relative order. # Input: - A single list `nums` containing positive integers (1 ≤ |nums| ≤ 10^6, 1 ≤ nums[i] ≤ 10^9). # Output: - A list of integers with the even numbers first followed by the odd numbers, maintaining the order they appeared in the input. # Examples: Input: ``` nums = [3, 8, 5, 12, 10, 7, 6] ``` Output: ``` [8, 12, 10, 6, 3, 5, 7] ``` Input: ``` nums = [1, 3, 5, 7] ``` Output: ``` [1, 3, 5, 7] ``` Input: ``` nums = [2, 4, 6, 8] ``` Output: ``` [2, 4, 6, 8] ```","solution":"def rearrange(nums): Rearranges the list such that even numbers come before odd numbers, maintaining the relative order of even and odd numbers. Parameters: nums (list): List of positive integers. Returns: list: Rearranged list. evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] return evens + odds"},{"question":"Given a binary tree, your task is to find the largest value in each row of the tree and return these values in an array. An example of a binary tree is given below: ``` 1 / 3 2 / 5 3 9 ``` The largest values in each row of the tree are `[1, 3, 9]`. Write a program that reads a binary tree from the input and outputs the largest values in each row. # Input The input will be given in the following format: - The first line contains the integer `n` (1 ≤ n ≤ 10^4) - the number of nodes in the tree. - The next `n` lines contain two integers each `u` and `v` and a character `d` (\'L\' or \'R\'), representing a node with value `u` connected to a node with value `v` via a left (\'L\') or right (\'R\') edge respectively. It is guaranteed that the tree is connected and rooted at node with value `1`. # Output Print the largest value in each row of the binary tree. The output array should have the values separated by a space. # Example Input ``` 6 1 3 L 1 2 R 3 5 L 3 3 R 2 9 R ``` Output ``` 1 3 9 ``` # Note In the given example, the binary tree is: ``` 1 / 3 2 / 5 3 9 ``` The largest values in each row are `[1, 3, 9]`, hence the output is `1 3 9`.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def add_node(root, u, v, d): if root is None: return if root.value == u: if d == \'L\': root.left = TreeNode(v) else: # d == \'R\' root.right = TreeNode(v) else: if root.left: add_node(root.left, u, v, d) if root.right: add_node(root.right, u, v, d) def find_largest_values_per_row(root): if root is None: return [] from collections import deque queue = deque([root]) result = [] while queue: level_size = len(queue) max_value = float(\'-inf\') for _ in range(level_size): node = queue.popleft() max_value = max(max_value, node.value) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(max_value) return result def largest_values_per_row(n, nodes): if n == 0: return [] root = TreeNode(1) for u, v, d in nodes: add_node(root, u, v, d) return find_largest_values_per_row(root) # Example usage: # input: # n = 6 # nodes = [ # (1, 3, \'L\'), # (1, 2, \'R\'), # (3, 5, \'L\'), # (3, 3, \'R\'), # (2, 9, \'R\') # ] # print(largest_values_per_row(n, nodes))"},{"question":"John is organizing a marathon and wants to ensure fair distribution of assistance stations along the marathon route. The marathon is exactly `d` kilometers long and there should be assistance stations placed exactly every `s` kilometers. The total number of stations should include both the starting point (0 kilometers) and the endpoint (d kilometers) as assistance stations. Given the distance of the marathon `d` and the interval `s` between stations, determine the total number of assistance stations needed. Input The input contains two space-separated integers `d` and `s` (1 ≤ s ≤ d ≤ 10^9). Output Print a single integer representing the total number of assistance stations. Examples Input 42 7 Output 7 Input 100 10 Output 11 Note For the first example, assistance stations should be placed at 0 km, 7 km, 14 km, 21 km, 28 km, 35 km, and 42 km, totaling 7 stations. For the second example, assistance stations should be placed at intervals of 10 km, including both the start (0 km) and the end (100 km), resulting in 11 stations.","solution":"def calculate_stations(d, s): Given the distance of the marathon `d` and the interval `s` between stations, this function returns the total number of assistance stations needed including the start and end points. if d % s == 0: return d // s + 1 else: return d // s + 2"},{"question":"Given a sequence of ( n ) integers ( a_1, a_2, ..., a_n ), a \\"good segment\\" is defined as a contiguous subarray that contains distinct elements and has a sum less than or equal to a given threshold ( T ). Your task is to find the length of the longest \\"good segment\\". Constraints * ( 1 leq n leq 10^5 ) * ( 1 leq a_i leq 10^9 ) * ( 1 leq T leq 10^{18} ) Input Input is given from Standard Input in the following format: ``` n T a_1 a_2 ... a_n ``` Output Output the length of the longest \\"good segment\\". If no such segment exists, output 0. Examples Input ``` 5 10 1 2 3 4 5 ``` Output ``` 4 ``` Input ``` 6 6 6 6 6 6 6 6 ``` Output ``` 1 ``` Input ``` 5 3 1 1 1 1 1 ``` Output ``` 1 ```","solution":"def longest_good_segment(n, T, a): left = 0 current_sum = 0 longest_length = 0 elements = set() for right in range(n): while a[right] in elements: elements.remove(a[left]) current_sum -= a[left] left += 1 elements.add(a[right]) current_sum += a[right] while current_sum > T: elements.remove(a[left]) current_sum -= a[left] left += 1 longest_length = max(longest_length, right - left + 1) return longest_length"},{"question":"In an amusement park, there is a popular ride called the Roller Coaster. The roller coaster has a series of peaks and valleys represented by an array of integers where each element corresponds to the height at a specific point on the ride. You need to implement a function that calculates the maximum height difference between two successive elements in the array. The height difference is defined as the absolute value of the difference between two successive heights. Write a function called `maxHeightDifference` that takes an array of integers as input and returns an integer representing the maximum height difference. # Input Format: - The input is a single line containing space-separated integers representing the heights at different points on the ride. # Output Format: - Output a single integer which is the maximum of the absolute differences between successive elements. # Constraints: - The length of the array will be between 2 and 1000. - Heights are integers, and each height will be between -1000 and 1000. # Sample Input: ``` 3 7 12 6 2 ``` # Sample Output: ``` 6 ``` # Explanation: - The height differences between successive points are |7-3| = 4, |12-7| = 5, |6-12| = 6, and |2-6| = 4. - The maximum height difference is 6.","solution":"def maxHeightDifference(heights): Returns the maximum height difference between two successive elements in the array. max_diff = 0 for i in range(1, len(heights)): diff = abs(heights[i] - heights[i - 1]) if diff > max_diff: max_diff = diff return max_diff"},{"question":"Two friends are working on data processing using a certain programming language that provides special functions to manipulate arrays of integers. In this language, arrays can be operated on without using traditional loops or arithmetic operators directly. Given the functions to manipulate arrays: * append(arr, num) - Appends the integer num to the end of the array arr and returns the new array. * merge(arr1, arr2) - Merges two arrays arr1 and arr2 into a single array by placing arr2 after arr1 and returns the new array. * reverse(arr) - Reverses the elements of the array arr and returns the new array. * getRange(arr, start, end) - Gets a portion of the array arr starting from index start up to index end (inclusive) and returns the resulting array. * getRange(arr, start, end, step) - Similar to getRange above, but only includes elements at every step index. For example, getRange([1,2,3,4,5,6], 1, 5, 2) returns [1,3,5]. Given an expression containing only arrays using the above functions, you need to evaluate the expression and print the resulting array. All function calls in the expression are case-insensitive. Note: * Arrays in the input are given using the format [a, b, c, ...], where each element is a non-negative integer. * If functions use indices, they start from 1. Input A single line containing the valid expression. It is guaranteed that the total length of this expression does not exceed 103, and each element in the arrays is a non-negative integer not exceeding 1000. Output Print in a single line the resulting array. It is guaranteed that an answer exists and that the length of the output array does not exceed 104. Examples Input append([1,2,3], 4) Output [1,2,3,4] Input merge([1,2,3], reverse([4,5,6])) Output [1,2,3,6,5,4] Input reverse(merge([1,2], getrange([3,4,5,6], 2, 4, 1))) Output [6,5,4,2,1] Input getrange([10,20,30,40,50], 2, 5, 2) Output [20,40]","solution":"def append(arr, num): return arr + [num] def merge(arr1, arr2): return arr1 + arr2 def reverse(arr): return arr[::-1] def getrange(arr, start, end, step=1): return arr[start-1:end:step] def evaluate_expression(expression): expression = expression.lower() return eval(expression)"},{"question":"Problem description. Alice is playing a game on a grid. The grid is a 2D array consisting of M rows and N columns. Each cell in the grid contains a certain number of points. Alice starts at the top-left corner of the grid and wants to reach the bottom-right corner, collecting as many points as possible. However, she can only move down or to the right at each step. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers M and N, denoting the number of rows and columns of the grid respectively. Each of the next M lines contains N space-separated integers, representing the points in the cells of the grid. Output For each test case, output a single line containing the maximum number of points Alice can collect. Constraints 1 ≤ T ≤ 10 1 ≤ M, N ≤ 1000 0 ≤ points in each cell ≤ 1000 Example Input: 2 3 3 1 2 3 4 5 6 7 8 9 2 2 1 2 1 1 Output: 29 4 Explanation Example Case 1. Alice can collect the maximum points by following this path: 1 → 2 → 3 → 6 → 9, which results in 1 + 2 + 3 + 6 + 9 = 21 points. Example Case 2. Alice can collect the maximum points by following this path: 1 → 2 → 1, which results in 1 + 2 + 1 = 4 points.","solution":"def max_points(T, test_cases): results = [] for t in range(T): M, N = test_cases[t][0] grid = test_cases[t][1] dp = [[0] * N for _ in range(M)] dp[0][0] = grid[0][0] for i in range(1, M): dp[i][0] = dp[i - 1][0] + grid[i][0] for j in range(1, N): dp[0][j] = dp[0][j - 1] + grid[0][j] for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] result = dp[M - 1][N - 1] results.append(result) return results"},{"question":"You are tasked with creating a system to manage a large collection of books in a digital library. The library has a collection of n books, each of which can be searched, borrowed, and returned. Each book is identified by a unique identifier and a respective list of keywords associated with it for search purposes. To simulate the process, consider the following operations that you need to support: 1. **Add a Book**: Add a new book to the library with a given identifier and an associated list of keywords. 2. **Search Books by Keyword**: Search for books that have a specific keyword associated with them. Return the list of book identifiers in ascending order. 3. **Borrow a Book**: Borrow a book from the library by providing its identifier. If the book is already borrowed, report that it is unavailable. 4. **Return a Book**: Return a borrowed book to the library. Implement a class `DigitalLibrary` that supports the following interface: - **void addBook(int bookId, List<String> keywords)**: Adds a book to the library with the provided `bookId` and a list of `keywords`. - **List<Integer> searchBooksByKeyword(String keyword)**: Returns a list of all `bookId`s that are associated with the given `keyword`, sorted in ascending order. If no books are found, return an empty list. - **boolean borrowBook(int bookId)**: Attempts to borrow the book identified by `bookId`. Returns `true` if the book was successfully borrowed, `false` if the book was already borrowed or does not exist. - **void returnBook(int bookId)**: Marks the book identified by `bookId` as returned. If the book was not borrowed, no action is taken. You are ensured that each `bookId` and `keyword` will be valid and properly formatted. **Input/Output Example**: ``` // Initialize the library DigitalLibrary lib = new DigitalLibrary(); // Add books to the library lib.addBook(1, Arrays.asList(\\"science\\", \\"fiction\\")); lib.addBook(2, Arrays.asList(\\"fantasy\\", \\"magic\\")); lib.addBook(3, Arrays.asList(\\"science\\", \\"non-fiction\\")); // Search books by keyword System.out.println(lib.searchBooksByKeyword(\\"science\\")); // Output: [1, 3] System.out.println(lib.searchBooksByKeyword(\\"magic\\")); // Output: [2] // Borrow a book System.out.println(lib.borrowBook(1)); // Output: true System.out.println(lib.borrowBook(1)); // Output: false // Return a borrowed book lib.returnBook(1); System.out.println(lib.borrowBook(1)); // Output: true ``` # Requirements: - The system should be optimized to handle up to 250,000 books and frequent searches and updates efficiently. - Ensure proper handling of edge cases, such as attempting to borrow non-existent books or returning books that are not borrowed.","solution":"class DigitalLibrary: def __init__(self): self.books = {} self.keywords_map = {} self.borrowed_books = set() def addBook(self, bookId, keywords): # Add the book to the library self.books[bookId] = keywords # Index the book by its keywords for keyword in keywords: if keyword not in self.keywords_map: self.keywords_map[keyword] = [] self.keywords_map[keyword].append(bookId) def searchBooksByKeyword(self, keyword): if keyword in self.keywords_map: return sorted(self.keywords_map[keyword]) return [] def borrowBook(self, bookId): if bookId in self.books and bookId not in self.borrowed_books: self.borrowed_books.add(bookId) return True return False def returnBook(self, bookId): if bookId in self.borrowed_books: self.borrowed_books.remove(bookId)"},{"question":"You are given an array of integers. Your task is to handle a series of prefix sum queries on this array. Each query specifies a range [l, r] and requires you to compute the sum of array elements within this range, inclusive. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of queries. The next line contains n integers a1, a2, ..., an (-10^6 ≤ ai ≤ 10^6) — the elements of the array. The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) — the bounds of the query range. Output For each query, print the sum of the elements in the specified range. Example Input 6 3 1 2 3 4 5 6 1 3 2 5 3 6 Output 6 14 18 Note For the given input: The prefix sum array is: [1, 3, 6, 10, 15, 21] For the first query: sum of elements from index 1 to 3 is 1 + 2 + 3 = 6 For the second query: sum of elements from index 2 to 5 is 2 + 3 + 4 + 5 = 14 For the third query: sum of elements from index 3 to 6 is 3 + 4 + 5 + 6 = 18","solution":"def process_queries(n, q, array, queries): # Calculate prefix sums prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + array[i] # Process each query results = [] for l, r in queries: results.append(prefix_sums[r] - prefix_sums[l - 1]) return results # Example usage: # n, q = 6, 3 # array = [1, 2, 3, 4, 5, 6] # queries = [(1, 3), (2, 5), (3, 6)] # result = process_queries(n, q, array, queries) # print(result) # Output should be [6, 14, 18]"},{"question":"The Friendly Penguin is a passionate lover of puzzles and now he is fascinated with the classic problem of balancing parentheses. He decides to test his skills by writing a program that can check if a given string of parentheses is balanced. A string of parentheses is considered balanced if: 1. Every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. 2. Opening parentheses must be closed in the correct order. That is, an opening parenthesis must be closed before a new opening parenthesis is closed. For example: - The string \\"()()\\" is balanced. - The string \\"((()))\\" is balanced. - The string \\"(()(()))\\" is balanced. - The string \\"(()\\" is not balanced. - The string \\"))((\\" is not balanced. Penguin needs your help to write a function that determines whether a given string of parentheses is balanced or not. Function Signature: ```python def is_balanced(s: str) -> bool: pass ``` # Input - A single string `s` containing only the characters \'(\' and \')\' (1 ≤ |s| ≤ 10^5). # Output - Return a boolean value, `True` if the string `s` is balanced, else return `False`. # Examples ```python assert is_balanced(\\"()()\\") == True assert is_balanced(\\"((()))\\") == True assert is_balanced(\\"(()(()))\\") == True assert is_balanced(\\"(()\\") == False assert is_balanced(\\"))(()\\") == False ``` # Notes - You should aim for an optimal solution that processes the string in a single pass. - The function should execute efficiently for the upper limit of input size.","solution":"def is_balanced(s: str) -> bool: balance = 0 for char in s: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 if balance < 0: # More closing than opening at any point return False return balance == 0"},{"question":"Whizzy Electronics is developing a new system for their smart home devices. One of the developers is working on an algorithm to detect anomalies in the temperature readings from various sensors. The developer needs to create a function that can determine the first integer value in a sequence of temperature readings that is not greater than the average of all readings preceding it. If no such value exists, the function should return -1. Your task is to help the developer complete this algorithm. Input: The first line contains an integer T, which is the number of test cases. For each test case, the first line contains an integer N, which represents the number of temperature readings. The second line contains N space-separated integers, representing the temperature readings. Output: For each test case, output a single integer - either the first integer that is not greater than the average of preceding values or -1 if no such value exists. Example: Input: 2 5 10 20 15 30 25 4 40 35 45 50 Output: 15 35","solution":"def find_anomaly(T, test_cases): def first_not_greater_than_avg(readings): if len(readings) <= 1: return -1 total_sum = 0 for i in range(len(readings)): if i == 0: total_sum += readings[i] continue avg = total_sum / i if readings[i] <= avg: return readings[i] total_sum += readings[i] return -1 results = [] for i in range(T): N = test_cases[i][0] readings = test_cases[i][1] result = first_not_greater_than_avg(readings) results.append(result) return results"},{"question":"Alice and Bob love to play a game involving words. The objective of the game is to transform a given word into another word using a specific set of rules. One player (Alice) gives an initial word and a target word, and the other (Bob) must determine whether the transformation is possible given certain operations. The allowed operations are: 1. Insert a single lowercase English letter at any position. 2. Remove a single lowercase English letter from any position. 3. Substitute one lowercase English letter with another lowercase English letter. Given these operations, Bob must determine the minimum number of operations required to transform the initial word into the target word. Input The input consists of two lines. The first line contains the initial word, and the second line contains the target word. Both words consist only of lowercase English letters and have a length between 1 and 100, inclusive. Output Output a single integer representing the minimum number of operations required to transform the initial word into the target word. Examples Input kitten sitting Output 3 Input flaw lawn Output 2 Input intention execution Output 5 Note In the first example, \\"kitten\\" can be transformed into \\"sitting\\" with the following steps: 1. Substitute \'k\' with \'s\' (kitten -> sitten) 2. Substitute \'e\' with \'i\' (sitten -> sittin) 3. Insert \'g\' at the end (sittin -> sitting) In the second example, \\"flaw\\" can be transformed into \\"lawn\\" with the following steps: 1. Substitute \'f\' with \'l\' (flaw -> llaw) 2. Substitute \'a\' with \'w\' (llaw -> lawn) In the third example, \\"intention\\" can be transformed into \\"execution\\" with the following steps: 1. Substitute \'i\' with \'e\' (intention -> entention) 2. Substitute \'n\' with \'x\' (entention -> extention) 3. Substitute \'t\' with \'c\' (extention -> excention) 4. Substitute \'e\' with \'u\' (excention -> exuction) 5. Substitute \'n\' with \'t\' (exuction -> execution)","solution":"def min_operations(initial, target): Returns the minimum number of operations required to transform the initial word into the target word. m, n = len(initial), len(target) # create a table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # fill dp table in bottom up manner for i in range(m + 1): for j in range(n + 1): # if first string is empty, we need to insert all characters of second string if i == 0: dp[i][j] = j # if second string is empty, we need to remove all characters of first string elif j == 0: dp[i][j] = i # if last characters are the same, ignore the last character and recur for the remaining substring elif initial[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] # if last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Anna has several rectangular tiles with different dimensions. She wants to create the largest possible square using the tiles. Each tile can be rotated 90 degrees to fit in the square, but it cannot be cut or overlapped with other tiles. Every tile is characterized by its width and height. Anna wants to use the maximum number of tiles for creating the square, and each tile can be used at most once. Given the dimensions of each tile, find the side length of the largest possible square that can be formed using these tiles. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of tiles. The next t lines each contain two integers w_i and h_i (1 ≤ w_i, h_i ≤ 10^9) — the width and height of each tile. Output Print a single integer — the side length of the largest possible square that can be formed. Examples Input 3 2 3 4 4 5 5 Output 4 Input 2 1 2 2 3 Output 2 Input 4 6 7 3 5 8 8 2 2 Output 8 Note In the first example, Anna can only use the 4x4 tile to form a square with a side length of 4, as other tiles cannot be rotated or combined to form a square of a larger size. In the second example, Anna can use the 2x3 tile rotated to 3x2 to form a square with a side length of 2. In the third example, Anna can use the 8x8 tile to form a square with a side length of 8.","solution":"def largest_square_side(t, tiles): Given the number of tiles and their dimensions, returns the side length of the largest possible square that can be formed using any of these tiles. Parameters: t (int): Number of tiles. tiles (list of tuple): List of tuples, where each tuple contains two integers (width and height of a tile). Returns: int: Side length of the largest possible square. max_side = 0 for width, height in tiles: max_side = max(max_side, max(width, height)) return max_side # Example usage: # t = 3 # tiles = [(2, 3), (4, 4), (5, 5)] # print(largest_square_side(t, tiles)) # Output: 5"},{"question":"The task is to design a performance assessment tool for a gaming company that reviews player performance based on the game\'s events. Players can collect items at various points in the game. To understand player engagement, the company wants to track the maximum number of items collected within any consecutive sequence of days. Input The first line of the input contains a single integer n (1 ≤ n ≤ 200,000) – the number of days the data is collected. The second line contains an array of n integers representing the number of items collected each day. Each integer is non-negative and less than or equal to 10^4. The third line of the input contains a single integer k (1 ≤ k ≤ n) – the maximum number of consecutive days to consider. Output Print a single integer, which is the maximum number of items collected in any sequence of k consecutive days. Example Input 7 2 1 5 1 3 2 1 3 Output 9 Note In the sample testcase, the maximum number of items collected within any 3 consecutive days is from day 3 to day 5, i.e., 5 + 1 + 3 = 9.","solution":"def max_items_collected(n, items, k): Returns the maximum number of items collected in any sequence of k consecutive days. :param n: int - the number of days the data is collected :param items: list of int - the number of items collected each day :param k: int - the maximum number of consecutive days to consider :return: int - the maximum number of items collected in any sequence of k consecutive days # Initialize the sum of the first window of k days max_sum = current_sum = sum(items[:k]) # Slide through the array from k to the end for i in range(k, n): # Update the current sum by adding the next day\'s items # and subtracting the items collected k days ago from the front current_sum += items[i] - items[i - k] # Update the maximum sum if the current window sum is greater max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You have been tasked with designing a robot that can clean a warehouse efficiently. The warehouse is represented as an m x n grid, where each cell in the grid can either be empty (represented by 0) or contain an obstacle (represented by -1). The robot can start from any cell in the grid. The goal is to find the minimum number of moves required for the robot to clean all the empty cells. The robot can move up, down, left, or right, but cannot move diagonally or through obstacles. Input: The first line of input contains two integers, m and n, denoting the dimensions of the warehouse grid. The next m lines contain n integers each representing the cells in the grid. Output: Output a single integer representing the minimum number of moves required to clean all the empty cells. If it is not possible to clean the warehouse completely, output -1. Constraints: 1 ≤ m, n ≤ 1000 -1 ≤ (values in grid) ≤ 0 SAMPLE INPUT 3 3 0 0 0 0 -1 0 0 0 0 SAMPLE OUTPUT 4 Explanation: The robot can start from the bottom left corner, move to the bottom center, bottom right, middle right, and finally top right to clean all the empty cells in four moves.","solution":"from collections import deque def min_moves_to_clean_warehouse(m, n, grid): Returns the minimum number of moves required to clean all empty cells in the warehouse grid. If it is not possible, returns -1. def bfs(start): queue = deque([start]) visited = set([start]) distance = 0 move_direction = [(0, 1), (1, 0), (0, -1), (-1, 0)] moves = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if grid[x][y] == 0: grid[x][y] = 1 # Mark this cell as cleaned moves += 1 for dx, dy in move_direction: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny)) visited.add((nx, ny)) distance += 1 return moves, distance - 1 total_empty_cells = sum(row.count(0) for row in grid) if total_empty_cells == 0: return -1 min_moves = float(\'inf\') for i in range(m): for j in range(n): if grid[i][j] == 0: grid_copy = [row[:] for row in grid] cleaned_cells, moves = bfs((i, j)) if cleaned_cells == total_empty_cells: min_moves = min(min_moves, moves) return min_moves if min_moves != float(\'inf\') else -1 # Example usage # m = 3 # n = 3 # grid = [ # [0, 0, 0], # [0, -1, 0], # [0, 0, 0] # ] # print(min_moves_to_clean_warehouse(m, n, grid)) # Output: 4"},{"question":"Write a function that receives a list of integers and groups them into two separate lists: one containing all even numbers and the other containing all odd numbers. Return a tuple with the two lists. Input A list of integers. Output A tuple of two lists - the first list containing even numbers, and the second list containing odd numbers. Example Input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Output ([2, 4, 6, 8, 10], [1, 3, 5, 7, 9])","solution":"def group_even_odd(numbers): Groups the numbers into even and odd lists. Args: numbers (list of int): The list of integers to be grouped. Returns: tuple: A tuple containing two lists - first list of even numbers and second list of odd numbers. even_numbers = [num for num in numbers if num % 2 == 0] odd_numbers = [num for num in numbers if num % 2 != 0] return (even_numbers, odd_numbers)"},{"question":"Alice loves organizing her bookshelf. She has `n` books of varying thicknesses, and she wants to arrange them vertically on a specific shelf. However, the shelf has a constraint: it can only hold a maximum thickness of `t` units. Given the thickness of each book, Alice wants to determine the maximum number of books she can place on the shelf without exceeding the thickness constraint. The books must be placed in the order they appear, and once a book cannot be placed due to the thickness constraint, no further books can be added. Write a program to help Alice find this maximum number of books that can fit on the shelf. # Input The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of books. The second line contains `n` integers `b1, b2, ..., bn` (1 ≤ bi ≤ 100) — the thickness of each book. The third line contains an integer `t` (1 ≤ t ≤ 100) — the maximum thickness the shelf can hold. # Output Print a single integer — the maximum number of books that can be placed on the shelf. # Example Input ``` 5 2 3 1 5 4 7 ``` Output ``` 3 ``` Note In the sample, Alice can place the first three books (thicknesses 2, 3, and 1) on the shelf because their total thickness is 6, which is within the limit of 7 units. Adding the fourth book (thickness 5) would exceed the limit, so the answer is 3.","solution":"def max_books(n, thicknesses, t): Determines the maximum number of books that can be placed on the shelf without exceeding the thickness constraint. :param n: int, the number of books :param thicknesses: list of ints, thickness of each book :param t: int, maximum thickness the shelf can hold :return: int, the maximum number of books that can be placed on the shelf current_thickness = 0 count = 0 for thickness in thicknesses: if current_thickness + thickness <= t: current_thickness += thickness count += 1 else: break return count"},{"question":"Given a list of integers, determine the length of the longest subarray whose sum is equal to a given value S. If no such subarray exists, return -1. Input The first input line contains an integer T, the number of test cases. Each test case consists of two lines: The first line contains an integer N, the size of the array, and an integer S, the desired sum. The second line contains N space-separated integers, representing the elements of the array. Output For each test case, print the length of the longest subarray whose sum is equal to S. If no such subarray exists, print -1. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^9 ≤ Array elements ≤ 10^9 -10^9 ≤ S ≤ 10^9 SAMPLE INPUT 2 5 15 1 2 3 4 5 5 0 4 -1 2 -2 1 SAMPLE OUTPUT 5 4 Explanation In the first test case, the entire array `[1, 2, 3, 4, 5]` sums to 15, so the length of the longest subarray is 5. In the second test case, the subarray `[4, -1, 2, -2, 1]` sums to 4 and another subarray `[-1, 2, -2, 1]` sums to 0 and has a length of 4. Thus, the length of the longest subarray is 4.","solution":"def longest_subarray_with_sum(arr, S): Returns the length of the longest subarray with sum equal to S. If no such subarray exists, return -1. sum_dict = {} current_sum = 0 max_length = -1 for i in range(len(arr)): current_sum += arr[i] if current_sum == S: max_length = i + 1 if current_sum - S in sum_dict: max_length = max(max_length, i - sum_dict[current_sum - S]) if current_sum not in sum_dict: sum_dict[current_sum] = i return max_length def process_test_cases(test_cases): results = [] for n, s, array in test_cases: result = longest_subarray_with_sum(array, s) results.append(result) return results"},{"question":"A treasure hunt is being conducted on a grid of size m x n. Some cells in the grid contain treasures, represented by the character \'T\', while others are empty, represented by the character \'E\'. A treasure hunter starts from the top-left corner of the grid (position (0, 0)) and can move right or down to reach the bottom-right corner (position (m-1, n-1)). However, the grid is full of obstacles. These obstacles are represented by the character \'X\' and the hunter cannot move through these cells. The goal is to determine the maximum number of treasures the hunter can collect on any valid path from the top-left corner to the bottom-right corner. More formally, you need to write a function that returns the maximum number of treasures a hunter can collect while traveling from the top-left to the bottom-right corner of the grid, given that they can only move right or down and cannot move through cells containing \'X\'. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow. Each test case starts with two integers m and n (1 ≤ m, n ≤ 50) — the dimensions of the grid. This is followed by m lines of length n, consisting of the characters \'T\', \'E\', and \'X\' — the grid itself. Output For each test case, output the maximum number of treasures a hunter can collect on a valid path from the top-left to the bottom-right corner. If it is not possible to reach the bottom-right corner, output -1. Example Input 3 3 3 EET EXT EEE 3 3 EET XXX TEE 2 2 TX XT Output 2 -1 -1 Note In the first test case, the optimal path is: right, right, down, down collecting 2 treasures. In the second and third test cases, it is impossible to reach the bottom-right corner.","solution":"def max_treasures(t, test_cases): results = [] for case in test_cases: m, n, grid = case if grid[0][0] == \'X\' or grid[m-1][n-1] == \'X\': results.append(-1) continue dp = [[-1] * n for _ in range(m)] dp[0][0] = 1 if grid[0][0] == \'T\' else 0 for i in range(m): for j in range(n): if grid[i][j] == \'X\': dp[i][j] = -1 else: if i > 0 and dp[i-1][j] != -1: dp[i][j] = max(dp[i][j], dp[i-1][j] + (1 if grid[i][j] == \'T\' else 0)) if j > 0 and dp[i][j-1] != -1: dp[i][j] = max(dp[i][j], dp[i][j-1] + (1 if grid[i][j] == \'T\' else 0)) results.append(dp[m-1][n-1] if dp[m-1][n-1] != -1 else -1) return results"},{"question":"Background You are given an array of integers that represents coin denominations, and an integer representing the target amount. You need to determine the minimum number of coins required to make the target amount. If it\'s not possible to make the target amount with the given coin denominations, return -1. Problem You will be given an array of integers representing the coin denominations and an integer representing the target amount. The goal is to compute the minimum number of coins needed to achieve the target amount. If the amount cannot be achieved with the given coins, return -1. For example, if the array of denominations is [1, 2, 5] and the target amount is 11, the minimum number of coins required is 3 (5 + 5 + 1). Input - The first line contains an integer `n` which represents the number of coin denominations. (1 ≤ n ≤ 100) - The second line contains `n` space-separated integers representing the coin denominations. Each denomination will be a positive integer not greater than 1000. - The third line contains the target amount `T` which is a positive integer not greater than 10000. Output - Output a single integer which is the minimum number of coins required to make up the target amount. If it is not possible to make the target amount, output -1. Examples Input 3 1 2 5 11 Output 3 Input 4 2 4 6 8 3 Output -1 Input 5 1 3 4 5 6 8 Output 2 Input 2 5 10 20 Output 2 Note In the first example, the minimum coins needed to make 11 are three (5, 5, and 1). In the second example, it\'s not possible to make 3 with the given denominations, so the output is -1. In the third example, the minimum coins needed to make 8 are two (4 and 4). In the fourth example, the minimum coins needed to make 20 are two (10 and 10).","solution":"def min_coins(n, denominations, target): This function calculates the minimum number of coins required to make the target amount using the given coin denominations. If it\'s not possible to make the target amount with the given coins, it returns -1. :param n: int - number of denominations :param denominations: List[int] - list of coin denominations :param target: int - target amount :return: int - minimum number of coins needed or -1 if not possible # Initialize the dp array with target + 1 which is an impossible large value for comparison dp = [float(\'inf\')] * (target + 1) # Base case: 0 coins are needed to make amount 0 dp[0] = 0 # Fill the dp array for coin in denominations: for x in range(coin, target + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # If dp[target] is still float(\'inf\'), it means it\'s not possible to make up the target amount return dp[target] if dp[target] != float(\'inf\') else -1"},{"question":"# Merge Sorted Arrays You are given two sorted arrays `A` and `B` of lengths `M` and `N` respectively. Write a program to merge these two arrays into a new array `C` which should also be sorted. The merged array `C` should contain all the elements of arrays `A` and `B`. Input The first line of the input contains an integer `T` denoting the number of test cases. The description of `T` test cases follows. The first line of each test case contains an integer `M` denoting the length of array `A`. The second line contains `M` space-separated integers, denoting the elements of array `A`. The third line contains an integer `N` denoting the length of array `B`. The fourth line contains `N` space-separated integers, denoting the elements of array `B`. Output For each test case, print a single line containing `M + N` space-separated integers denoting the merged sorted array `C`. Constraints 1. ≤ T ≤ 100 2. ≤ M, N ≤ 10^5 3. −10^9 ≤ A[i], B[i] ≤ 10^9 The input arrays `A` and `B` are guaranteed to be sorted in non-decreasing order. Example Input: 2 3 1 3 5 4 2 4 6 8 2 -1 0 3 -2 -1 1 Output: 1 2 3 4 5 6 8 -2 -1 -1 0 1 Explanation Example case 1: Merging the arrays [1, 3, 5] and [2, 4, 6, 8] results in the sorted array [1, 2, 3, 4, 5, 6, 8]. Example case 2: Merging the arrays [-1, 0] and [-2, -1, 1] results in the sorted array [-2, -1, -1, 0, 1].","solution":"def merge_sorted_arrays(A, B): Merges two sorted arrays A and B into one sorted array. i, j = 0, 0 C = [] while i < len(A) and j < len(B): if A[i] <= B[j]: C.append(A[i]) i += 1 else: C.append(B[j]) j += 1 while i < len(A): C.append(A[i]) i += 1 while j < len(B): C.append(B[j]) j += 1 return C def process_test_cases(test_cases): results = [] for case in test_cases: A = case[\'A\'] B = case[\'B\'] merged_array = merge_sorted_arrays(A, B) results.append(merged_array) return results"},{"question":"Flight Departures You are tasked with helping an airport manage its flight departures for the next day. Each flight has a scheduled departure time, and the airport wants to ensure that no two flights are departing simultaneously. If any two flights have the same departure time, the airport should reschedule one of them to the nearest available time slot (either earlier or later) to minimize the total number of adjustments. The airport is open for a total of T minutes, and each flight departure time is represented in minutes elapsed since the opening time. You are given the list of scheduled departure times and should return the minimum number of rescheduled flights required to ensure that no two flights depart at the same time. Input The input consists of: - An integer n (1 ≤ n ≤ 100,000) - the number of flights. - An integer T (1 ≤ T ≤ 1,000,000) - the total minutes the airport is open. - A list of n integers representing the scheduled departure times of the flights. Output Output the minimum number of flights that need to be rescheduled. Sample Input 1 5 10 0 2 2 4 6 Sample Output 1 1 Explanation: One of the flights scheduled at time 2 needs to be rescheduled to a different time to avoid conflicts. Sample Input 2 3 5 1 1 1 Sample Output 2 2 Explanation: Two of the flights scheduled at time 1 need to be rescheduled to different times to avoid conflicts. Sample Input 3 4 8 0 1 3 4 Sample Output 3 0 Explanation: All the flights already have unique departure times, so no rescheduling is necessary. Sample Input 4 6 15 5 5 6 7 7 8 Sample Output 4 2 Explanation: Two flights need to be rescheduled to different times to avoid conflicts. The flights at times 5 and 7 can be moved to any available nearby slots. Constraints: - The scheduled departure times are given as integers within the range [0, T). - If a flight is rescheduled, it must still depart within the operating minutes [0, T). (Note: The approach and analysis, including edge cases and potential optimizations, should be written by the programmers while solving the problem.)","solution":"def min_rescheduled_flights(n, T, departure_times): from collections import Counter time_counts = Counter(departure_times) changes_needed = 0 scheduled_times = set(departure_times) for time, count in time_counts.items(): while count > 1: changes_needed += 1 count -= 1 # Find the nearest available time slot offset = 1 while time - offset in scheduled_times and time + offset in scheduled_times: offset += 1 if time - offset >= 0 and time - offset not in scheduled_times: scheduled_times.add(time - offset) else: scheduled_times.add(time + offset) return changes_needed"},{"question":"Given a list of tasks with their respective starting and ending times, each task requires a specific amount is done within its given time frame. You are tasked with selecting the maximum number of non-overlapping tasks that you can perform. The tasks may overlap, so you need to figure out the optimal set of tasks to perform to maximize the number of complete non-overlapping tasks. Input The input consists of an integer n (1 ≤ n ≤ 10^5) — the number of tasks. Each of the next n lines contains two integers si and ei (1 ≤ si < ei ≤ 10^9), representing the starting and ending time of the i-th task. Output Print a single integer — the maximum number of non-overlapping tasks that can be performed. Examples Input 5 1 3 2 5 4 6 5 7 6 8 Output 3 Note In the above example, the maximum number of non-overlapping tasks are: 1. Task with start time 1 and end time 3. 2. Task with start time 4 and end time 6. 3. Task with start time 6 and end time 8. Explanation Select the tasks (1, 3), (4, 6), and (6, 8) as they are non-overlapping. The number of such tasks is 3.","solution":"def max_non_overlapping_tasks(n, tasks): Returns the maximum number of non-overlapping tasks that can be performed. :param n: Number of tasks :param tasks: List of tuples, where each tuple contains (start time, end time) of a task :return: Maximum number of non-overlapping tasks # Sort the tasks based on their end times tasks.sort(key=lambda x: x[1]) # Initialize count of non-overlapping tasks count = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: # Select this task count += 1 last_end_time = end return count"},{"question":"You are given a sequence of numbers where each number represents the height of a person standing in a line. The sequence is linearly increasing and each subsequent number in the list is exactly 1 unit taller than the previous one. Your task is to determine the number of possible ways to form non-overlapping groups of exactly K people such that the height difference in each group is exactly K-1 units. Each group should strictly consist of K people, and you should use all N people in the line to form such groups. If it\'s not possible to form such groups, return 0. Constraints * 1 ≤ N ≤ 1000 * 2 ≤ K ≤ N Input The input is given from Standard Input in the following format: N K Output Print the number of ways to form the non-overlapping groups of K people. Examples Input 8 2 Output 35 Input 6 3 Output 10 Input 10 5 Output 252 Input 7 2 Output 21","solution":"import math def count_groups(N, K): if K == 1: return 1 # Calculate the number of ways to pick K people out of N with required constraints possible_groups = math.comb(N, K) return possible_groups"},{"question":"Two robots, A and B, are placed on a grid of size m by n. Robot A starts from the top-left corner (1, 1) and can move either to the right or downward. Robot B starts from the bottom-right corner (m, n) and can move either to the left or upward. Each robot keeps moving until they collide, meaning they reach the same cell on the grid. Your task is to determine whether the two robots will collide and, if so, in how many moves they will collide. Input The first and only line contains two positive integers m and n (1 ≤ m, n ≤ 1000), separated by exactly one space. Output Print \\"YES\\" and the number of moves needed for collision if the robots collide, otherwise print \\"NO\\". Examples Input 5 5 Output YES 9 Input 3 3 Output YES 5 Input 2 4 Output NO Note In the first sample: Robot A can go from (1, 1) to (5, 5) by taking 8 moves right and 1 move down. Robot B can go from (5, 5) to (1, 1) by taking the reverse path, so they will collide at (5, 5) on the 9th move. In the second sample: Robot A and Robot B will meet at (3, 3) in 5 moves each. In the third sample: No matter how robots A and B move, they will never meet on the grid.","solution":"def robots_collide(m, n): Determine whether Robot A and Robot B will collide on the grid. If they collide, return \\"YES\\" and the number of moves needed for collision. Otherwise, return \\"NO\\". # Calculate the number of full rows and full columns # that both robots need to traverse to meet in the middle. if m == n: moves = 2 * (m - 1) return \\"YES\\", moves + 1 else: return \\"NO\\", 0"},{"question":"Peter loves numbers and likes to play with arrays. One day, he decides to create a game with an array of positive integers. The game rules are as follows: 1. Peter selects two adjacent elements in the array. 2. He replaces them with their sum. 3. The resultant array has one less element than the previous one. Peter continues this process until only one element is left in the array. The score of the game is the final remaining number. Given an array of positive integers, can you help Peter find the minimum possible score he can achieve after following the rules of the game? **Input format:** - The first line contains an integer, t, denoting the number of test cases. - The next t lines each contain: - The first line contains an integer, n, denoting the size of the array. - The second line contains n space-separated integers denoting the array elements. **Output format:** For each test case, print the minimum possible score on a new line. **Constraints:** 1 ≤ t ≤ 10 1 ≤ n ≤ 50 1 ≤ array elements ≤ 1000 **SAMPLE INPUT** 3 3 1 2 3 4 4 1 2 3 2 10 5 **SAMPLE OUTPUT** 6 10 15 **Explanation** For the first test case ([1, 2, 3]), the process can be (1+2=3), so the array becomes [3, 3]. Finally (3+3=6), and the array becomes [6].","solution":"def min_game_score(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] array = test_cases[i][1] while len(array) > 1: min_sum = float(\'inf\') pos = -1 # Find the smallest sum of adjacent elements for j in range(len(array) - 1): if array[j] + array[j+1] < min_sum: min_sum = array[j] + array[j+1] pos = j # Replace the elements with their sum array[pos] = min_sum del array[pos+1] results.append(array[0]) return results"},{"question":"A farmer wants to organize his crops into rectangular plots. Unfortunately, due to limited space, he can only create a single 1x1 plot, a 2x2 plot, a 3x3 plot, and so on up to an mxm plot. Given a list of crop types that he wishes to plant, determine the minimum size of the square plot required to accommodate all the crops if they can be planted in the plots as described and all plots must contain an equal number of crops exactly fitting the square plots. For example, if the list of crop types is [1, 4, 9], the farmer would need at least a 3x3 plot to plant them because - Crop type 1 can fit into a 1x1 plot. - Crop type 4 can fit into a 2x2 plot. - Crop type 9 can fit into a 3x3 plot. Input The first line contains an integer T (1 ≤ T ≤ 10^5), representing the number of test cases. The next T lines each contain a single integer a (1 ≤ a ≤ 10^9) representing the crop type. Output For each test case, output the minimum size of the square plot required to accommodate the given crop type. Examples Input: 3 1 4 9 Output: 1 2 3 Input: 5 3 6 10 15 21 Output: 2 3 4 4 5","solution":"import math def min_square_plot_size(crops): Given a list of crop types, returns a list of minimum square plot sizes required for each crop type. :param crops: List of integers representing crop types. :return: List of integers representing minimum square plot size for each crop type. return [math.ceil(math.sqrt(crop)) for crop in crops]"},{"question":"Polycarp is creating a new feature for Codehorses where users can input a string containing a mathematical expression and receive the calculated result. The input string can contain integers, parentheses, and the operators \'+\', \'-\', \'*\', and \'/\'. The feature should handle the standard operator precedence and return the result as a floating-point number rounded to two decimal places. Your task is to help Polycarp implement this feature by writing a function that evaluates a given mathematical expression and returns the result. Input The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 100) — the mathematical expression, where |s| is the length of the string. The mathematical expression in each test case may contain: * integers (both positive and negative), * parentheses (), * operators \'+\', \'-\', \'*\', and \'/\'. Output For each test case, output a single line containing the result of the mathematical expression, rounded to two decimal places. Example Input 5 3+5 10+(2*3) 7-2*3 8/(2+2) (3+5)*(2-1) Output 8.00 16.00 1.00 2.00 8.00 Note In the first test case, the expression 3+5 evaluates to 8. In the second test case, the expression 10+(2*3) evaluates to 10+(6) = 16. In the third test case, the expression 7-2*3 evaluates to 7-6 = 1. In the fourth test case, the expression 8/(2+2) evaluates to 8/4 = 2. In the fifth test case, the expression (3+5)*(2-1) evaluates to 8*1 = 8.","solution":"import re def evaluate_expression(expression): Evaluate the mathematical expression and return the result rounded to two decimal places. # Directly use Python\'s eval function which respects the operator precedence try: result = eval(expression) return round(result, 2) except Exception as ex: raise ValueError(f\\"Invalid expression: {ex}\\") def solve(expressions): Solve multiple mathematical expressions and return the results as a list of strings formatted to two decimals. results = [] for exp in expressions: result = evaluate_expression(exp) results.append(f\\"{result:.2f}\\") return results"},{"question":"Monkey King, Sun Wukong, loves solving puzzles in his free time. One day, he comes across an interesting problem about matrices. He has a matrix of integers with dimensions n x n, and he wants to calculate the sum of the elements on the main diagonal and the sum of the elements on the anti-diagonal. The main diagonal of a matrix consists of elements that lie on the line from the top left to the bottom right, while the anti-diagonal consists of elements that lie on the line from the top right to the bottom left. Your task is to write a program that reads the matrix and calculates the required sums. Input The first line contains a single integer n (2 ≤ n ≤ 100) — the dimension of the matrix. Each of the next n lines contains n integers a_ij (1 ≤ a_ij ≤ 100) — the elements of the matrix. Output Print two integers: the sum of the main diagonal elements and the sum of the anti-diagonal elements. Example Input 3 1 2 3 4 5 6 7 8 9 Output 15 15 Note In the given example, the main diagonal elements are 1, 5, 9, whose sum is 1 + 5 + 9 = 15. The anti-diagonal elements are 3, 5, 7, whose sum is 3 + 5 + 7 = 15.","solution":"def diagonal_sums(matrix): Given a square matrix, return a tuple with the sum of the main diagonal elements and the sum of the anti-diagonal elements. n = len(matrix) main_diagonal_sum = sum(matrix[i][i] for i in range(n)) anti_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n)) return main_diagonal_sum, anti_diagonal_sum"},{"question":"You are given a matrix of size N x M, filled with integers. Your task is to handle multiple queries, each asking for the sum of a sub-matrix defined by its top-left and bottom-right corners. Each query will have four integers - r1, c1, r2, c2 - denoting the top-left cell (r1, c1) and the bottom-right cell (r2, c2) of the sub-matrix. For each query, you need to output the sum of the elements in the specified sub-matrix. Input: The first line contains two integers N and M, the dimensions of the matrix. The next N lines contain M integers each, representing the elements of the matrix. The following line contains an integer Q, denoting the number of queries. Then, Q lines follow, each containing four integers r1, c1, r2, c2. Output: For each query, output a single integer, the sum of the elements in the sub-matrix defined by (r1, c1) as the top-left corner and (r2, c2) as the bottom-right corner. Constraints: 1 ≤ N, M ≤ 500 1 ≤ matrix[i][j] ≤ 10^3 1 ≤ Q ≤ 10^4 1 ≤ r1 ≤ r2 ≤ N 1 ≤ c1 ≤ c2 ≤ M SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 1 1 3 3 SAMPLE OUTPUT 12 45 Explanation: For the first query, the sub-matrix from (1,1) to (2,2) corresponds to: 1 2 4 5 The sum of these elements is 1 + 2 + 4 + 5 = 12. For the second query, the sub-matrix from (1,1) to (3,3) corresponds to the entire matrix: 1 2 3 4 5 6 7 8 9 The sum of these elements is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45.","solution":"def submatrix_sum(matrix, queries): Returns the results of multiple queries for the sum of sub-matrices in a given matrix. N = len(matrix) M = len(matrix[0]) # Precompute the prefix sum matrix prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix_sum[i][j] = matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] result = [] for r1, c1, r2, c2 in queries: total = prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1] result.append(total) return result"},{"question":"Cyril is playing a special shooting game where each round consists of a sequence of actions. Each action is either a shooting action, which decreases Cyril\'s ammunition by 1, or a reload action, which recharges his ammunition fully. A round is defined as playable if Cyril never shoots when he has no ammunition left and if his ammunition never exceeds the maximum amount provided by a reload action. Your task is to determine if a given round is playable based on Cyril\'s initial ammunition, the maximum ammunition he can have after a reload, and the sequence of actions. Input The first line contains three integers n, ammo, max_ammo (1 ≤ n ≤ 105, 0 ≤ ammo ≤ max_ammo ≤ 105) — the number of actions in the sequence, Cyril\'s initial ammunition, and the maximum ammunition after a reload, respectively. The second line contains a string of length n consisting of characters \'S\' and \'R\' representing the sequence of actions, where \'S\' denotes a shoot action and \'R\' denotes a reload action. Output Print \\"Playable\\" if the round is playable, otherwise print \\"Unplayable\\". Examples Input 5 3 5 SRSSR Output Playable Input 4 2 3 SSSS Output Unplayable Input 6 0 4 RRSRRS Output Playable Input 3 1 2 SSS Output Unplayable Note In the first sample, Cyril starts with 3 ammunition. After the first action (S), ammo becomes 2. The second action (R) recharges the ammunition to 5. The third action (S) decreases ammo to 4, the fourth action (S) decreases ammo to 3, and the fifth action (R) again recharges the ammunition to 5. Cyril never shoots when he has no ammunition, so the round is playable. In the second sample, Cyril starts with 2 ammunition. He shoots four times, but he has only 2 ammo initially, so he cannot make the fourth shoot. Thus, the round is unplayable.","solution":"def is_playable(n, ammo, max_ammo, actions): for action in actions: if action == \'S\': if ammo == 0: return \\"Unplayable\\" ammo -= 1 elif action == \'R\': ammo = max_ammo return \\"Playable\\""},{"question":"Given two sequences of integers, find the length of the longest subsequence that is a subsequence of both sequences. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input The first line contains an integer n (1 ≤ n ≤ 3000) — the length of the first sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the first sequence. The third line contains an integer m (1 ≤ m ≤ 3000) — the length of the second sequence. The fourth line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 1000) — the second sequence. Output Output a single integer — the length of the longest common subsequence of both sequences. Examples Input 3 1 3 4 4 1 3 4 5 Output 3 Input 5 1 3 5 9 10 4 1 4 9 10 Output 3 Input 4 2 3 7 8 4 5 6 7 8 Output 2","solution":"def longest_common_subsequence(n, a, m, b): Function to find the length of the longest common subsequence between two sequences. dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"One popular website has a list of n users each with a unique user ID between 1 and n. The website administers a periodic event in which some users are chosen to receive a special badge. Each event may happen at different times, and the same user can receive the badge in multiple different events. The website administration wants to find out which user received the badge the most number of times, and if there are multiple users who have received the badge the same maximum number of times, they want to choose the user with the smallest user ID. You are given the number of users n and the number of events m. The next m lines each contain one user ID of the user that received the badge in a particular event. Write a program to determine the user who received the badge the most number of times. If multiple users satisfy this requirement, return the one with the smallest user ID. Input - The first line contains two integers n (1 ≤ n ≤ 1000) — the number of users, and m (1 ≤ m ≤ 10^4) — the number of events. - The next m lines each contain a single integer between 1 and n — the user ID of the user that received a badge in that event. Output - Print a single integer representing the user ID of the user who received the badge the most number of times. If there are multiple such users, print the smallest user ID among them. Examples Input 5 7 2 1 2 4 2 3 4 Output 2 Note In the sample input: - user 1 receives the badge 1 time - user 2 receives the badge 3 times - user 3 receives the badge 1 time - user 4 receives the badge 2 times - user 5 does not receive the badge Thus, user 2 receives the badge the most number of times (3 times).","solution":"def most_frequent_badge_holder(n, m, events): Determine which user received the badge the most number of times. Parameters: n (int): Number of users. m (int): Number of events. events (list of int): List of user IDs representing users who received the badge. Returns: int: User ID of the user who received the badge the most number of times. from collections import Counter badge_count = Counter(events) # Find the user with the maximum badge count, and in case of a tie, the smallest user ID max_count = -1 user_with_max_badges = None for user in range(1, n + 1): if badge_count[user] > max_count: max_count = badge_count[user] user_with_max_badges = user elif badge_count[user] == max_count and user_with_max_badges is not None: user_with_max_badges = min(user_with_max_badges, user) return user_with_max_badges"},{"question":"John owns a farm and has recently decided to build a new pen for his cows. The pen will be in the shape of a convex polygon. To ensure the pen has sufficient area for the cows to graze, he needs to calculate the area of the polygon. John has the x and y coordinates of each vertex of the polygon. The vertices are given in either clockwise or counterclockwise order. Using these coordinates, he wants to determine the area of the polygon. Help John calculate the area of the convex polygon. Input The first line contains an integer n (3 ≤ n ≤ 10^5) — the number of vertices of the polygon. Each of the next n lines contains two integers xi and yi (−10^4 ≤ xi, yi ≤ 10^4) — the coordinates of the i-th vertex of the polygon, which appear in either clockwise or counterclockwise order. Output Print a single integer — the area of the polygon. The area should be rounded to the nearest integer. Examples Input 4 0 0 0 4 4 4 4 0 Output 16 Input 3 0 0 2 0 1 2 Output 2 Note: To calculate the area of a polygon given the coordinates of its vertices, you can use the Shoelace formula (also known as Gauss\'s area formula). According to this formula, if (x1, y1), (x2, y2), ..., (xn, yn) are the vertices of a polygon, the area A is given by: A = 0.5 * abs((x1*y2 + x2*y3 + ... + xn*y1) - (y1*x2 + y2*x3 + ... + yn*x1))","solution":"def polygon_area(vertices): Calculate the area of a convex polygon using the Shoelace formula. Parameters: vertices (list of tuples): A list of (x, y) coordinates of the polygon vertices. Returns: int: The area of the polygon, rounded to the nearest integer. n = len(vertices) area = 0 for i in range(n): x1, y1 = vertices[i] x2, y2 = vertices[(i + 1) % n] area += x1 * y2 - y1 * x2 return round(abs(area) / 2) # To use this function: # vertices = [(0, 0), (0, 4), (4, 4), (4, 0)] # print(polygon_area(vertices)) # Output: 16"},{"question":"A relevant science research center performs experiments related to atmospheric pressure. They have a system that records atmospheric pressure readings for each hour of the day. For a given day, your task is to determine if the atmospheric pressure at any point in time was ever higher than it was at the start of the day. Input The first line of the input contains a single integer n (1 ≤ n ≤ 24) — the number of hours for which the data is available for that day. The second line contains n space-separated integers — these are the atmospheric pressure readings for the corresponding hours. The first integer represents the pressure at the start of the day, the second one for the next hour, and so on. Output Print \\"HIGHER\\" if there was any hour where the atmospheric pressure was higher than the initial reading, and \\"NOT HIGHER\\" otherwise. Examples Input 5 1002 1003 1002 1001 1000 Output HIGHER Input 3 1015 1015 1015 Output NOT HIGHER Input 4 1012 1010 1013 1011 Output HIGHER Note In the first example, the atmospheric pressure increased to 1003 at the second hour, which is higher than the initial reading of 1002, so the output is \\"HIGHER\\". In the second example, all the readings remain the same as the initial value of 1015, thus the output is \\"NOT HIGHER\\". In the third example, the atmospheric pressure increased to 1013 at the third hour, higher than the initial reading of 1012, so the output is \\"HIGHER\\".","solution":"def check_pressure_higher(n, pressure_readings): initial_reading = pressure_readings[0] for reading in pressure_readings[1:]: if reading > initial_reading: return \\"HIGHER\\" return \\"NOT HIGHER\\""},{"question":"You and your friend Bob are planning to go on a road trip and you want to calculate the exact cost of fuel for the journey. The distance you need to cover is given, along with the fuel efficiency of your vehicle (in kilometers per liter) and the current price of fuel per liter. Write a program that calculates the total cost of fuel for the trip. If it turns out that the total cost is higher than a certain budget you have set aside for fuel, the program should indicate by how much it exceeds the budget. Input The input is given in the following format: d e p b A line containing four numbers: the distance d you need to cover (1 ≤ d ≤ 10000), the fuel efficiency of your vehicle e (1 ≤ e ≤ 50), the price of fuel per liter p (1 ≤ p ≤ 200), and the budget you have set aside for fuel b (1 ≤ b ≤ 100000). Output Output a line indicating the total cost of fuel for the trip and, if the cost exceeds your budget, by how much it exceeds. If the cost does not exceed the budget, print the cost only. Examples Input 500 20 70 2000 Output 1750 Input 600 15 85 3000 Output 3400 400","solution":"def calculate_fuel_cost(distance, efficiency, price_per_liter, budget): Returns the total fuel cost for a trip and the amount by which it exceeds the budget if applicable. total_cost = (distance / efficiency) * price_per_liter if total_cost > budget: return total_cost, total_cost - budget else: return total_cost, 0 def format_output(total_cost, budget_exceed): Formats the output based on whether the total cost exceeds the budget or not. if budget_exceed > 0: return f\\"{int(total_cost)} {int(budget_exceed)}\\" else: return f\\"{int(total_cost)}\\""},{"question":"You are given a list of city names and the populations of each city. The population data for each city spans multiple years. Your task is to determine the city with the highest population growth rate over a specific time period and to calculate the percentage growth of its population. Input - The first line contains an integer n (1 ≤ n ≤ 100), the number of cities. - Each of the next n lines contains a city name (a string) and t integers representing the population of that city in consecutive years (1 ≤ t ≤ 10, each population value is between 1000 and 10^6). - The last line contains two integers i and j (0 ≤ i < j < t), representing the starting and ending years of the time period to calculate the growth rate. Output - Print the city with the highest population growth rate over the specified period. - If multiple cities have the same growth rate, print the one which comes first lexicographically. - Print the percentage growth rate to two decimal places. Examples Input 3 CityA 1000 1200 1400 CityB 2000 2400 2900 CityC 1500 1500 1600 0 2 Output CityA 40.00 Input 2 Alpha 5000 6000 7200 Beta 3000 3300 3600 0 1 Output Alpha 20.00 Note In the first example, the population growth rate from year 0 to year 2 for CityA is (1400 - 1000) / 1000 * 100% = 40%. For CityB, it is (2900 - 2000) / 2000 * 100% = 45%. For CityC, it is (1600 - 1500) / 1500 * 100% = 6.67%. CityB has the highest growth rate, followed by CityA, but CityA comes first lexicographically. In the second example, only Alpha has the highest growth rate of 20%.","solution":"def highest_population_growth(n, city_data, i, j): import math max_growth_rate = -math.inf best_city = \\"\\" for data in city_data: city_info = data.split() city_name = city_info[0] populations = list(map(int, city_info[1:])) if populations[i] == 0: continue growth_rate = ((populations[j] - populations[i]) / populations[i]) * 100 if growth_rate > max_growth_rate: max_growth_rate = growth_rate best_city = city_name elif growth_rate == max_growth_rate: if city_name < best_city: best_city = city_name return f\\"{best_city} {max_growth_rate:.2f}\\" # Example usage: # n = 3 # city_data = [\\"CityA 1000 1200 1400\\", \\"CityB 2000 2400 2900\\", \\"CityC 1500 1500 1600\\"] # i, j = 0, 2 # print(highest_population_growth(n, city_data, i, j)) # Output: CityB 45.00"},{"question":"Implement a function `min_number_of_coins(coins: List[int], amount: int) -> int` that determines the minimum number of coins needed to make up a given amount. You are given a list of distinct integer coin denominations and a total amount of money. If the amount cannot be made up by any combination of the coins, return -1. Parameters: - `coins`: a list of positive integers representing the coin denominations. - `amount`: a non-negative integer representing the total amount of money. You may assume that you have an infinite number of each kind of coin. # Example Input ```plaintext coins = [1, 2, 5] amount = 11 ``` Output ```plaintext 3 ``` Explanation: The minimum number of coins that make up 11 is 3 (11 = 5 + 5 + 1). Input ```plaintext coins = [2] amount = 3 ``` Output ```plaintext -1 ``` Explanation: The amount 3 cannot be made up just with coins of denomination 2. The function signature should be: ```python def min_number_of_coins(coins: List[int], amount: int) -> int: ``` # Constraints - `1 <= coins.length <= 12` - `1 <= coins[i] <= 2^31 - 1` - `0 <= amount <= 10^4`","solution":"from typing import List def min_number_of_coins(coins: List[int], amount: int) -> int: Determine the minimum number of coins needed to make up the given amount. If the amount cannot be made up by any combination of the coins, return -1. # Initialize a list to store the minimum number of coins for each amount up to `amount` dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 # Iterate through each coin for coin in coins: # Update the dp list for each value from coin to amount for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # If dp[amount] is still infinity, it means amount cannot be made up by any combination of coins return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"In a video game, players can collect various resources as they navigate through different levels. One resource that is particularly significant is the \\"magic stone.\\" Players can transform a collection of \\"magic stones\\" into special artifacts that enhance their abilities. The transformation rule is as follows: For every three magic stones, a player can create one artifact. Any magic stones that are not part of a complete set of three remain as magic stones. You are tasked with writing a program that calculates the maximum number of artifacts a player can create from a given number of magic stones, as well as the number of remaining magic stones. Input A single integer n (0 ≤ n ≤ 10^9), representing the number of magic stones a player has. Output Print two integers: the maximum number of artifacts that can be created and the number of remaining magic stones. Examples Input 10 Output 3 1 Input 7 Output 2 1 Input 3 Output 1 0 Input 1 Output 0 1 Note For the first example, 10 magic stones can be turned into 3 artifacts (3*3 = 9 stones used), leaving 1 magic stone remaining. For the second example, 7 magic stones can be turned into 2 artifacts (3*2 = 6 stones used), leaving 1 magic stone remaining. For the third example, 3 magic stones can be turned into 1 artifact (3*1 = 3 stones used), leaving 0 magic stones remaining. For the fourth example, 1 magic stone cannot form any artifact and thus remains 1 magic stone.","solution":"def calculate_artifacts_and_remaining_stones(n): Calculate the number of artifacts that can be created and the number of remaining magic stones. Arguments: n -- The number of magic stones (0 ≤ n ≤ 10^9). Returns: A tuple (artifacts, remaining_stones) where: - artifacts is the maximum number of artifacts that can be created. - remaining_stones is the number of magic stones remaining after artifact creation. artifacts = n // 3 remaining_stones = n % 3 return artifacts, remaining_stones # Example usage: # print(calculate_artifacts_and_remaining_stones(10)) # Output: (3, 1) # print(calculate_artifacts_and_remaining_stones(7)) # Output: (2, 1) # print(calculate_artifacts_and_remaining_stones(3)) # Output: (1, 0) # print(calculate_artifacts_and_remaining_stones(1)) # Output: (0, 1)"},{"question":"You are given a string consisting of lowercase English letters. You can replace any character in the string with any lowercase English letter. You want to make all the characters in the string equal. Find the minimum number of replacements needed to achieve this goal. Constraints * The input string has a length between 1 and 100,000 (inclusive). Input Input is given from Standard Input in the following format: s Output Print the minimum number of replacements needed to make all characters in the string equal. Examples Input abac Output 3 Input aaaa Output 0 Input abcde Output 4","solution":"def min_replacements_to_equal_chars(s): Returns the minimum number of replacements needed to make all characters in the string equal. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Find the maximum frequency of any single character max_freq = max(char_count.values()) # The minimum replacements needed will be the total length minus the max frequency return len(s) - max_freq"},{"question":"A group of friends decides to draw a graffiti on a continuous section of the city\'s main road. The road is represented as a straight line divided into n segments, which are initially empty. Each of the n segments is numbered from 1 to n from left to right. The friends take turns to paint several consecutive segments of the road in their favorite color. They can only paint segments that are currently empty. Each friend uses a distinct color represented by an integer. After painting, one might wonder - how many distinct segments are there on the road that remains unpainted? You\'ll have to write a function to determine the number of remaining empty segments after all friends paint their respective allocated segments. Input: - The first line contains two integers n (1 ≤ n ≤ 10^9) — the number of road segments, and m (1 ≤ m ≤ 10^5) — the number of friends. - The next m lines each contain two integers li and ri (1 ≤ li ≤ ri ≤ n) each representing the interval [li, ri], which the i-th friend will paint in their color. Output: - Print a single integer — the number of distinct unpainted segments. Example Input: 10 2 1 3 4 6 Output: 4 Explanation: In the provided example, the road initially has 10 segments. After the first friend paints the segments from 1 to 3, segments 1, 2, and 3 are painted. The second friend paints segments from 4 to 6, so segments 4, 5, and 6 are painted. Segments 7, 8, 9, and 10 remain unpainted. Thus, the answer is 4. Note: For efficient handling of large values of n, consider optimized algorithms that avoid unnecessary iteration over each segment.","solution":"def count_unpainted_segments(n, m, intervals): Returns the number of unpainted segments after m intervals are painted on a road of n segments. :param n: int - Number of segments on the road :param m: int - Number of friends (intervals to be painted) :param intervals: list of tuples - Each tuple represents an interval (li, ri) :return: int - Number of unpainted segments segments_painted = [0] * (n + 1) # This marks the painted segments # Mark the painted segments for li, ri in intervals: for i in range(li, ri + 1): segments_painted[i] = 1 # Count the unpainted segments unpainted_count = sum(1 for i in range(1, n + 1) if segments_painted[i] == 0) return unpainted_count"},{"question":"You are given the task of creating a magical square grid of size n x n (where n is an odd integer). A magical square grid is one where every cell (i, j) either contains an X or an O, following these rules: 1. The center of the grid must contain \'X\'. 2. For each row and each column, if the distance from a cell to the center is even, then the cell must contain \'X\'. 3. Otherwise, the cell must contain \'O\'. The distance from a cell ((i, j)) to the center ((c, c)) of the grid (where (c = frac{n-1}{2})) is defined as (|i - c| + |j - c|). Given an odd integer n, generate and print the n x n magical square grid. # Input The only line of input contains an odd integer n (1 ≤ n ≤ 99). # Output Print the n x n grid, where each cell contains either \'X\' or \'O\' as described in the problem statement. # Example Input 5 Output ``` X O X O X O X O X O X O X O X O X O X O X O X O X ``` Input 3 Output ``` X O X O X O X O X ```","solution":"def magical_square(n): grid = [[\'\' for _ in range(n)] for _ in range(n)] center = n // 2 for i in range(n): for j in range(n): distance = abs(i - center) + abs(j - center) if distance % 2 == 0: grid[i][j] = \'X\' else: grid[i][j] = \'O\' return grid def print_grid(grid): for row in grid: print(\' \'.join(row)) # Example usage n = 5 grid = magical_square(n) print_grid(grid)"},{"question":"John is organizing a hackathon event where participants need to complete coding challenges. Each participant can submit solutions to multiple challenges, but only their best (highest scored) submission per challenge will be counted towards their final score. All challenges have equal weight, and the total score for each participant is the sum of their best submission scores. Given a list of submissions, your task is to compute the final score for each participant. Each submission includes the participant\'s name, the name of the challenge, and the score of the submission. Input The first line contains an integer t (1 ≤ t ≤ 10^5) — the number of submissions. Each of the following t lines contains a string p, a string c, and an integer s (1 ≤ s ≤ 100), where p is the participant\'s name, c is the challenge name, and s is the score of the submission. Output For each participant, print their name and their total score, sorted by the total score in descending order. If two participants have the same total score, they should be sorted by name in ascending order. Example Input 7 Alice Challenge1 80 Bob Challenge1 90 Alice Challenge2 50 Alice Challenge1 85 Bob Challenge2 50 Bob Challenge1 70 Alice Challenge2 55 Output Alice 140 Bob 140","solution":"def compute_final_scores(t, submissions): from collections import defaultdict participant_scores = defaultdict(lambda: defaultdict(int)) # Process the submissions for p, c, s in submissions: participant_scores[p][c] = max(participant_scores[p][c], s) # Calculate the total score for each participant final_scores = {} for participant, challenges in participant_scores.items(): final_scores[participant] = sum(challenges.values()) # Sort participants first by total score (descending), then by name (ascending) sorted_final_scores = sorted(final_scores.items(), key=lambda x: (-x[1], x[0])) return sorted_final_scores"},{"question":"A company has a network of `n` computers connected by `m` cables. Each cable can either be functional or broken. All computers are numbered from 1 to `n`. The company wants to determine which computers are still connected to the main server (computer 1) even if some cables are broken. You are given `m` pairs of integers `(u, v)`, each representing a bidirectional connection between computers `u` and `v`. You are also given a list of `k` integers representing broken cables. Each integer in the list of broken cables corresponds to the index of the pair (1-indexed) that describes that cable in the list of all cables. Your task is to determine the number of computers that are still connected to the main server (computer 1) excluding those directly or indirectly disconnected by the broken cables. # Input The first line contains three integers `n`, `m`, and `k` (1 ≤ n ≤ 1000, 1 ≤ m ≤ 2000, 0 ≤ k ≤ m). The next `m` lines contain two integers each: `u` and `v` (1 ≤ u, v ≤ n), representing a bidirectional connection between computer `u` and computer `v`. The last line contains `k` integers, each representing the index of a broken cable. # Output Output a single integer, the number of computers connected to the main server (computer 1) after considering the broken cables. # Examples Input 5 4 1 1 2 2 3 1 4 4 5 2 Output 4 Input 6 5 2 1 2 2 3 3 4 4 5 5 6 3 5 Output 3 # Note In the first example, the broken cable is the connection between computers 2 and 3. After removing this connection, computers 1, 2, 4, and 5 are still connected to the main server. Computer 3 is disconnected. In the second example, the broken cables are the connections between computers 3 and 4, and 5 and 6. After removing these connections, only computers 1, 2, 3 are still connected to the main server. Computers 4, 5, and 6 are disconnected.","solution":"def find_connected_computers(n, m, k, connections, broken_cables): from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for i, (u, v) in enumerate(connections): if i+1 not in broken_cables: graph[u].append(v) graph[v].append(u) # BFS to find all connected nodes starting from node 1 def bfs(start, graph): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited connected_computers = bfs(1, graph) return len(connected_computers)"},{"question":"Alex loves walking through a city made up of a grid of streets. The city has `n` horizontally numbered streets and `m` vertically numbered avenues. He always starts his walk at the northwest corner of the city (1, 1) and ends at the southeast corner (n, m). Alex can only move either right or down at each step since walking left or up is not allowed. Alex dislikes certain crossroads (intersections of streets and avenues) because they are always crowded. These crossroads are represented as pairs of integers (x, y), where `1 ≤ x ≤ n` and `1 ≤ y ≤ m`. Help Alex find the number of different routes from the northwest corner to the southeast corner that do not pass through any disliked crossroads. Input The first line contains three space-separated integers: n, m, and k (1 ≤ n, m ≤ 100, 0 ≤ k ≤ 50). The next k lines each contain two space-separated integers x and y, representing a disliked crossroad. Output Print the number of different routes from (1, 1) to (n, m) that do not pass through any disliked crossroads. Examples Input 3 3 1 2 2 Output 2 Input 2 2 0 Output 2 Input 3 3 2 2 2 3 2 Output 1 Note In the first example, the routes that do not pass through (2, 2) are: 1. (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) 2. (1, 1) -> (1, 2) -> (2, 2) -> (2, 3) -> (3, 3) In the second example, there are no disliked crossroads, so both possible routes are valid: 1. (1, 1) -> (1, 2) -> (2, 2) 2. (1, 1) -> (2, 1) -> (2, 2) In the third example, only one route does not pass through any disliked crossroads: 1. (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3)","solution":"def count_routes(n, m, k, disliked): # Initializing the grid with 0s grid = [[0] * m for _ in range(n)] # Marking disliked positions on the grid for x, y in disliked: grid[x-1][y-1] = -1 # Initializing the starting point if grid[0][0] == -1: return 0 grid[0][0] = 1 # Filling out the number of ways in the grid for i in range(n): for j in range(m): if grid[i][j] == -1: grid[i][j] = 0 else: if i > 0: grid[i][j] += grid[i-1][j] if j > 0: grid[i][j] += grid[i][j-1] return grid[-1][-1] # Reading input and processing to the required format def main(): n, m, k = map(int, input().strip().split()) disliked = [tuple(map(int, input().strip().split())) for _ in range(k)] result = count_routes(n, m, k, disliked) print(result)"},{"question":"A gardener is planning to plant trees in a rectangular garden of size n × m. The cell in the x-th row and in the y-th column is denoted as (x,y). Initially, the entire garden is empty. The gardener wants to plant as many trees as possible, following these constraints: 1. Each row and each column must contain exactly one tree. 2. Two trees cannot be placed in cells that are diagonally adjacent. Two cells (x1,y1) and (x2,y2) are diagonally adjacent if |x1 − x2| = 1 and |y1 − y2| = 1. Given these constraints, help the gardener determine the maximum number of trees that can be planted in the garden. Input A single line contains two integers n and m (1 ≤ n,m ≤ 10^9) — the number of rows and the number of columns of the garden. Output Print one integer — the maximum number of trees the gardener can plant. Examples Input 3 3 Output 3 Input 5 4 Output 4 Note In the first example, the gardener can plant exactly 1 tree in each row and each column without violating the diagonal adjacency rule, so the maximum number is 3. In the second example, although there are 5 rows available, the number of columns constrains the gardener to plant only up to 4 trees while satisfying all the conditions. Thus, the answer is 4.","solution":"def max_trees(n, m): Given the dimensions of the garden, returns the maximum number of trees that can be planted following the described constraints. return min(n, m)"},{"question":"You are working for a company that designs and sells specialized clocks. One of their clock models has a unique feature: it can operate in two modes, \\"normal mode\\" and \\"reverse mode\\". In normal mode, the clock will count time forward as usual, but in reverse mode, the clock counts time backward, starting from a given time value. The clock has a display that spans from 0 to T-1, where T is the total number of time units on the display. The clock will either be in normal mode or reverse mode for the entire duration of its operation. Given an initial time t_0 (0 ≤ t_0 < T) where the clock starts and a sequence of m operations, determine the final time displayed on the clock after completing all operations. Each operation is represented by a tuple (op, d), where op is either \'N\' for normal mode or \'R\' for reverse mode, and d is the duration of that operation in time units. In normal mode, the clock time increases by one unit per time unit, and it wraps around when reaching T. In reverse mode, the clock time decreases by one unit per time unit, and it also wraps around when reaching 0. Write a program to find and output the final time displayed on the clock after executing all operations. # Input - The first line contains three space-separated integers T, t_0, and m (1 ≤ T ≤ 10^9, 0 ≤ t_0 < T, 1 ≤ m ≤ 10^5). - The next m lines each contain a character and an integer representing an operation in the format \\"op d\\" (op ∈ {\'N\', \'R\'}, 1 ≤ d ≤ 10^9). # Output - Print the final time displayed on the clock after completing all operations. # Example Input ``` 100 10 3 N 5 R 20 N 15 ``` Output ``` 10 ``` Note In the example, the initial time is 10. The operations are as follows: 1. Normal mode for 5 units of time: (10 + 5) % 100 = 15 2. Reverse mode for 20 units of time: (15 - 20 + 100) % 100 = 95 3. Normal mode for 15 units of time: (95 + 15) % 100 = 10","solution":"def final_clock_time(T, t_0, operations): Determines the final time on the clock after completing all operations. Parameters: T (int): The total number of time units on the display (0 to T-1). t_0 (int): The initial time on the clock (0 ≤ t_0 < T). operations (list of tuples): A list of (operation, duration) tuples where operation is \'N\' or \'R\' and duration is the duration of the operation in time units. Returns: int: The final time displayed on the clock. current_time = t_0 for op, d in operations: if op == \'N\': current_time = (current_time + d) % T elif op == \'R\': current_time = (current_time - d) % T return current_time"},{"question":"Julia loves playing with strings and recently learned about palindromes. She wants to find out the largest palindrome that can be formed using the characters of a given string. Can you help her in determining the largest possible palindrome that can be created? The palindrome can be of any length from 0 up to the length of the string. Input The first line contains T, the number of test cases. Description of T test cases follows. Each test case contains a single string S of lowercase alphabets only. Output For each test case, output a single line containing the length of the largest palindrome that can be created using characters from the given string. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 SAMPLE INPUT 2 abccccdd a SAMPLE OUTPUT 7 1","solution":"def largest_palindrome_length(test_cases): from collections import Counter results = [] for s in test_cases: count = Counter(s) length = 0 odd_found = False for val in count.values(): if val % 2 == 0: length += val else: length += val - 1 odd_found = True if odd_found: length += 1 results.append(length) return results"},{"question":"Problem D Rolling Sum of Array You are given an array of integers and a positive integer window size k. Your task is to write a function that computes the rolling sum of the array with the given window size. The rolling sum is calculated by summing each subarray of length k and producing an output array of these sums. Input The input consists of a single test case in the following format. n k a_1 a_2 a_3 ... a_n - n and k are integers. n is the number of elements in the array (1 leq n leq 10^5). k is the size of each subarray for summing (1 leq k leq n). - a_i are integers representing the elements of the array (-10^5 leq a_i leq 10^5). Output Output an array of n-k+1 integers where the i-th element is the sum of the subarray starting from index i to i+k-1. Sample Input 1 8 3 1 2 3 4 5 6 7 8 Sample Output 1 6 9 12 15 18 21 Sample Input 2 5 2 -1 4 -3 5 2 Sample Output 2 3 1 2 7 Explanation In the first sample, the subarrays of length 3 are: - [1, 2, 3] with sum 6 - [2, 3, 4] with sum 9 - [3, 4, 5] with sum 12 - [4, 5, 6] with sum 15 - [5, 6, 7] with sum 18 - [6, 7, 8] with sum 21 In the second sample, the subarrays of length 2 are: - [-1, 4] with sum 3 - [4, -3] with sum 1 - [-3, 5] with sum 2 - [5, 2] with sum 7","solution":"def rolling_sum(n, k, arr): Computes the rolling sum of the array with the given window size. :param n: int, number of elements in the array :param k: int, size of each subarray for summing :param arr: list of int, elements of the array :return: list of int, rolling sum of the array if k > n: return [] result = [] current_sum = sum(arr[:k]) result.append(current_sum) for i in range(k, n): current_sum = current_sum - arr[i - k] + arr[i] result.append(current_sum) return result"},{"question":"You are managing a warehouse and have n types of items. Initially, each item has a stock level s_i. During each day, customers will come to the warehouse and buy a specific amount of certain items. Sales will be provided as m transactions. Each transaction reduces the stock level of an item. Your task is to determine the stock level of each item after all transactions have been processed. Input The first line contains two integers n and m (1 ≤ n ≤ 100,000, 1 ≤ m ≤ 100,000) — the number of items and transactions respectively. The second line contains n integers s_1, s_2, ..., s_n (0 ≤ s_i ≤ 1,000) — the initial stock levels of the items. The next m lines contain pairs of integers (t_j, u_j) (1 ≤ t_j ≤ n, 1 ≤ u_j ≤ 1,000), where t_j is the item type and u_j is the quantity of the item sold in this transaction. Output Output a single line containing n integers separated by spaces — the final stock levels of each item after processing all transactions. Example Input: 5 3 10 20 30 40 50 1 5 3 25 2 10 Output: 5 10 5 40 50","solution":"def update_stock_levels(n, m, initial_stocks, transactions): Updates the stock levels of items after processing all transactions. Parameters: n (int): Number of items. m (int): Number of transactions. initial_stocks (list of int): List of initial stock levels of each item. transactions (list of tuple): List of transactions where each transaction is a tuple (item type, quantity sold). Returns: list of int: Final stock levels of each item. for t_j, u_j in transactions: initial_stocks[t_j - 1] -= u_j return initial_stocks"},{"question":"The Infinite Plane Adventures have become quite popular among mathematicians. A new challenge involves arranging points on an infinite 2D plane. These points must be visited in a sequence that adheres to specified movement requirements. The problem requires visiting each point exactly once and moving according to the given sequence to minimize the total Manhattan distance traveled. The Manhattan distance between two points (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|. You have to determine the minimum possible total Manhattan distance given the constraints. Input The first line contains an integer n — the number of points on the plane (1 ≤ n ≤ 10^5). Each of the next n lines contains two integers xi and yi (|xi|, |yi| ≤ 10^9) — the coordinates of the i-th point on the plane. Output Output a single integer — the minimum possible total Manhattan distance to visit all points in the given order. Example Input 4 1 2 3 4 -1 -3 -4 0 Output 10 Explanation Here\'s the sequence of movements to minimize the Manhattan distance: (1, 2) -> (3, 4) -> (-1, -3) -> (-4, 0) The distances are: |1 - 3| + |2 - 4| = 2 + 2 = 4 |3 - (-1)| + |4 - (-3)| = 4 + 7 = 11 |(-1) - (-4)| + (-3 - 0)| = 3 + 3 = 6 These add up to: 4 + 11 + 6 = 21 (not necessarily the optimal order, but just an example calculation). Note The optimal solution can involve sorting points in a specific order to minimize back-and-forth movements and ensure the Manhattan distance is kept at a minimum.","solution":"def min_total_manhattan_distance(points): Calculates the minimal total Manhattan distance to visit all points exactly once in the given order. # Sort the points by x and y coordinates separately x_sorted = sorted(points, key=lambda p: p[0]) y_sorted = sorted(points, key=lambda p: p[1]) # Select the median point median_point = (x_sorted[len(points) // 2][0], y_sorted[len(points) // 2][1]) # Calculate the total distance from the median point total_distance = 0 for point in points: total_distance += abs(point[0] - median_point[0]) + abs(point[1] - median_point[1]) return total_distance"},{"question":"You are given a string S and an integer X. The string contains only lowercase characters. You are allowed to perform the following operations exactly X times: 1. Select any character of the string and replace it with any lowercase character. Your goal is to maximize the number of unique characters in the resultant string after performing exactly X operations. Determine the maximum number of unique characters that can be obtained. Constraints: * 1 ≤ |S| ≤ 2×10^5 * 1 ≤ X ≤ 26 * S consists of only lowercase English letters. Input: Input is given from Standard Input in the following format: ``` S X ``` Output: Print the maximum number of unique characters that can be obtained after performing exactly X operations. Examples: Input: ``` abcabc 3 ``` Output: ``` 6 ``` Input: ``` aaaaa 2 ``` Output: ``` 3 ``` Input: ``` abcdefghijklmnopqrstuvwxyza 26 ``` Output: ``` 26 ```","solution":"def max_unique_chars(S, X): Returns the maximum number of unique characters that can be obtained in string S after performing exactly X replacement operations. # Initial set of unique characters in the string unique_chars = set(S) # Number of unique characters currently in the string num_unique_chars = len(unique_chars) # Maximum possible unique characters is 26 (total lowercase english letters) max_possible_unique_chars = 26 # Max number of unique characters we can achieve max_unique = min(max_possible_unique_chars, num_unique_chars + X) return max_unique"},{"question":"You have been assigned the task of designing a program that handles encryption of messages using the classic Caesar Cipher technique. The Caesar Cipher technique involves shifting each letter in the plaintext message by a fixed number of positions down or up the alphabet. For example, with a shift of 1, \'A\' would be replaced by \'B\', \'B\' would become \'C\', and so on. If the shift takes you past \'Z\', it would wrap around to the beginning of the alphabet. In this problem, both uppercase and lowercase letters are encrypted independently, and spaces remain unchanged. Your task is to create a function that encrypts a given plaintext message using a specified shift value. # Input The input consists of two lines: 1. An integer `n` (1 ≤ n ≤ 25), representing the shift value. 2. A string `s`, the plaintext message to be encrypted, which consists only of uppercase English letters, lowercase English letters, and spaces. The length of the string will be at most 10^5 characters. # Output Output a single string, which is the encrypted message obtained by applying the Caesar Cipher with the given shift value to the string `s`. The output should maintain the same formatting as the input. # Examples Input ``` 3 Hello World ``` Output ``` Khoor Zruog ``` Input ``` 13 abc xyz ``` Output ``` nop klm ``` # Note In the first example, each letter in \\"Hello World\\" is shifted by 3 positions. \'H\' becomes \'K\', \'e\' becomes \'h\', \'l\' becomes \'o\', \'o\' becomes \'r\', \'W\' becomes \'Z\', \'o\' becomes \'r\', \'r\' becomes \'u\', and \'l\' becomes \'o\', \'d\' becomes \'g\'. Spaces are left unchanged. In the second example, each letter in \\"abc xyz\\" is shifted by 13 positions. \'a\' becomes \'n\', \'b\' becomes \'o\', \'c\' becomes \'p\', \'x\' becomes \'k\', \'y\' becomes \'l\', and \'z\' becomes \'m\'. The output is \\"nop klm\\". Implement the function that performs Caesar Cipher encryption based on the input provided.","solution":"def caesar_cipher(n, s): Encrypts the string s using Caesar Cipher with a shift of n. Parameters: n (int): The shift value (1 ≤ n ≤ 25). s (str): The plaintext message to be encrypted. Returns: str: The encrypted message. encrypted = [] for char in s: if \'A\' <= char <= \'Z\': # Shift uppercase letters new_char = chr((ord(char) - ord(\'A\') + n) % 26 + ord(\'A\')) encrypted.append(new_char) elif \'a\' <= char <= \'z\': # Shift lowercase letters new_char = chr((ord(char) - ord(\'a\') + n) % 26 + ord(\'a\')) encrypted.append(new_char) else: # Leave spaces unchanged encrypted.append(char) return \'\'.join(encrypted)"},{"question":"The Prime Minister has a complex literature with a forbidden word you need to censor. You must replace all instances of the forbidden word with asterisks, maintaining the number of characters. For example, if the forbidden word is \\"bad\\", and it appears in the text, it should be replaced with \\"***\\". You are asked to write a function `censor_text(text, forbidden_word)` that will receive a text and a forbidden word as input and return the censored text. # Input The function will receive the following parameters: - `text`: A string representing the text to be censored (1 ≤ len(text) ≤ 1000). - `forbidden_word`: A string representing the forbidden word (1 ≤ len(forbidden_word) ≤ 100). # Output Return the censored text as a string. # Examples Example 1 Input: ``` text = \\"The quick brown fox jumps over the lazy dog\\" forbidden_word = \\"lazy\\" ``` Output: ``` \\"The quick brown fox jumps over the **** dog\\" ``` Example 2 Input: ``` text = \\"She sells seashells by the seashore\\" forbidden_word = \\"seashells\\" ``` Output: ``` \\"She sells ********* by the seashore\\" ``` Example 3 Input: ``` text = \\"I never saw a purple cow\\" forbidden_word = \\"green\\" ``` Output: ``` \\"I never saw a purple cow\\" ``` # Note - The solution should be case-sensitive. For example, if the forbidden word is \\"abc\\", the word \\"ABC\\" should not be censored. - If the forbidden word is not found in the text, the text should remain unchanged.","solution":"def censor_text(text, forbidden_word): Replaces all instances of the forbidden word in the text with asterisks. Parameters: text (str): The original text. forbidden_word (str): The word to be censored. Returns: str: The censored text. return text.replace(forbidden_word, \'*\' * len(forbidden_word))"},{"question":"You are given a list of integers representing the daily temperatures, and your task is to calculate, for each day, how many days you have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. Input The input consists of one line. The line contains integers separated by spaces, each representing a daily temperature. The number of temperatures is between 1 and 100000, inclusive, and each temperature is between 30 and 100, inclusive. Output Output a list of integers where the i-th integer represents the number of days you have to wait until a warmer temperature for the i-th day. Print the list of integers as space-separated values. Examples Input 73 74 75 71 69 72 76 73 Output 1 1 4 2 1 1 0 0 Input 70 70 70 70 70 Output 0 0 0 0 0","solution":"def daily_temperatures(temperatures): Returns a list of integers where the i-th integer represents the number of days you have to wait until a warmer temperature for the i-th day. If there is no future day, put 0 instead. :param temperatures: List[int], the daily temperatures :return: List[int], the number of days to wait for a warmer temperature n = len(temperatures) result = [0] * n stack = [] for i, temp in enumerate(temperatures): while stack and temperatures[stack[-1]] < temp: prev_day = stack.pop() result[prev_day] = i - prev_day stack.append(i) return result"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB Given a list of strings, where each string represents a sequence of characters, determine how many of these sequences are palindromes. A palindrome is a sequence that reads the same backward as forward. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of sequences. - The next `n` lines each contain a sequence of lowercase alphabetical characters (1 ≤ length of each sequence ≤ 100). # Output: - Print a single integer representing the number of palindromic sequences. # Example Input 5 level algorithm racecar each madam Output 3","solution":"def count_palindromes(sequences): Count the number of palindromic sequences in the given list of sequences. Parameters: sequences (list of str): List of strings to check for palindromes. Returns: int: The number of palindromic sequences. return sum(1 for sequence in sequences if sequence == sequence[::-1]) # Example usage: # sequences = [\\"level\\", \\"algorithm\\", \\"racecar\\", \\"each\\", \\"madam\\"] # result = count_palindromes(sequences) # print(result) # Output: 3"},{"question":"You are given two integer arrays `A` and `B`, where each array contains `n` elements. The elements of `A` are sorted in non-decreasing order (i.e., `A1 ≤ A2 ≤ ... ≤ An`). Your task is to create a new array `C` of length `n` such that `Ci = Ai + Bi`. After creating array `C`, you need to find out the maximum value in `C[i]` and print its index. If there are multiple indexes with the maximum value, return the smallest index. Input The first line contains an integer `n` (1 ≤ n ≤ 1000), the length of arrays `A` and `B`. The second line contains `n` integers, the elements of array `A` (1 ≤ Ai ≤ 10^6). The third line contains `n` integers, the elements of array `B` (1 ≤ Bi ≤ 10^6). Output Print the smallest index (1-based) where the maximum value of `C` occurs. Examples Input ``` 5 1 2 2 3 4 5 3 1 4 2 ``` Output ``` 5 ``` Input ``` 4 1 2 3 4 4 3 2 1 ``` Output ``` 1 ``` Input ``` 3 1 1 1 9 8 7 ``` Output ``` 1 ``` Note In the first sample, the array `C` will be `[6, 5, 3, 7, 6]`. The maximum value is `7` which occurs at index 4. In the second sample, the array `C` will be `[5, 5, 5, 5]`. The maximum value is `5` which occurs first at index 1. In the third sample, the array `C` will be `[10, 9, 8]`. The maximum value is `10` which occurs at index 1.","solution":"def find_max_index(n, A, B): Create an array C where Ci = Ai + Bi. Find and return the 1-based index where the maximum value in C occurs first. C = [A[i] + B[i] for i in range(n)] max_value = max(C) # Return the first index where maximum value is found, convert to 1-based return C.index(max_value) + 1"},{"question":"# Escape the Maze Alice finds herself in a magical maze composed of numerous rooms connected by doors. Each room is represented by a unique integer from 1 to N, and each door connects two rooms bi-directionally. Alice starts in room 1, and her goal is to reach room N. However, there’s a twist. Some rooms have magic portals that can instantly transport her to another specific room, but each portal can only be used once. Given this information, determine the minimum number of steps Alice needs to reach room N from room 1, either by walking through doors or using the portals. Note: - Each step is defined as moving from one room to another via a door or a portal. - A portal can only be used once, after which it vanishes. - It is guaranteed that there exists at least one way to reach room N from room 1. Input Format: The first line of input will contain N and M, the number of rooms and doors, respectively. The next M lines of input will each contain two integers u and v, indicating that there is a door between rooms u and v. Each door can be traversed in either direction. The next line will contain P, the number of portals. The next P lines of input will each contain two integers x and y, denoting that there is a portal from room x to room y. Output Format: The output should contain a single integer, the minimum number of steps required for Alice to reach room N from room 1. Constraints: - 2 ≤ N ≤ 1000 - 1 ≤ M ≤ 2000 - 0 ≤ P ≤ 100 - 1 ≤ u, v, x, y ≤ N - u ≠ v and x ≠ y Sample Input: 5 6 1 2 2 3 2 4 3 5 4 5 1 3 2 1 4 2 5 Sample Output: 2 Explanation: In this example, Alice can: 1. Use the portal from room 1 to room 4 (first step). 2. Walk from room 4 to room 5 (second step). Thus, the minimum number of steps is 2.","solution":"from collections import deque, defaultdict def min_steps_to_escape(n, m, doors, p, portals): # Create the adjacency list for the graph graph = defaultdict(list) for u, v in doors: graph[u].append(v) graph[v].append(u) # Append portals to the graph as one-directional edges for x, y in portals: graph[x].append(y) # Using BFS to find the shortest path queue = deque([(1, 0)]) # (current_room, steps) visited = set([1]) while queue: current_room, steps = queue.popleft() # If we have reached the final room if current_room == n: return steps # Traverse through all the adjacent rooms for next_room in graph[current_room]: if next_room not in visited: visited.add(next_room) queue.append((next_room, steps + 1)) return -1 # This line should never be reached given the problem constraints"},{"question":"A delivery drone is programmed to deliver packages in a large warehouse. The warehouse is represented as a 2D grid, where each cell is either an obstacle (represented by \'X\') or an open space (represented by \'.\'). The drone can only move up, down, left, or right, and cannot move diagonally. The drone starts from the top-left corner (cell (1,1)) and needs to deliver the package to the delivery point located at the bottom-right corner (cell (n,n)). Write a function to determine the minimum number of moves required for the drone to reach the delivery point from the starting point. If it is impossible for the drone to deliver the package, return -1. Input - The first line contains a single integer n (1 ≤ n ≤ 1000) — the size of the grid (n x n). - The next n lines each contain a string of length n consisting of \'X\' and \'.\', representing the warehouse. Output - Print the minimum number of moves required for the drone to reach the delivery point. If it\'s impossible, print -1. Examples Input 5 ..... .X.X. .X... ....X X.... Output 8 Input 3 X.. XX. ... Output -1 Input 4 .... .X.. ..X. .... Output 6 Note In the first example, the drone can move through open spaces and avoid obstacles to reach the bottom-right corner in 8 moves. In the second example, it is impossible for the drone to reach the bottom-right corner because it is completely blocked by obstacles. In the third example, the drone can find a path with a minimum of 6 moves to deliver the package to the delivery point.","solution":"from collections import deque def min_moves_to_deliver(n, grid): Returns the minimum number of moves required for the drone to reach the delivery point from the starting point in the given grid. If it\'s impossible, returns -1. if grid[0][0] == \'X\' or grid[n-1][n-1] == \'X\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == n-1 and col == n-1: return dist for dr, dc in directions: nr, nc = row + dr, col + dc if 0 <= nr < n and 0 <= nc < n and grid[nr][nc] == \'.\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist+1)) return -1"},{"question":"Once upon a time, there was an enchanted forest with a peculiar rule. Any small animal entering the forest would either double in number or split into half the next day. The rule followed a specific pattern for each day: - On the first day, each animal doubles in number (i.e., 1 becomes 2). - On the second day, each animal splits into half (i.e., 2 becomes 1). - On the third day, each animal doubles in number again (i.e., 1 becomes 2). - On the fourth day, each animal splits into half (i.e., 2 becomes 1). And this pattern (double, half, double, half, ...) continues indefinitely. Given an initial number of small animals and a specific day, your task is to find out how many animals would be in the forest on that day. Input: The first line of input contains T, the number of test cases. In the next T lines, each line will contain two integers, A and N, representing the initial number of animals and the day number, respectively. Output: For each test case, print the number of animals in the forest on the Nth day. Constraints: 1 ≤ T ≤ 10^3 1 ≤ A ≤ 10^9 1 ≤ N ≤ 10^9 SAMPLE INPUT 3 4 1 4 2 4 3 SAMPLE OUTPUT 8 4 8 Explanation In the first case, on the 1st day, 4 animals will double to 8. In the second case, on the 2nd day, 4 animals will split into half, remaining 4. In the third case, on the 3rd day, 4 animals will double to 8.","solution":"def animals_in_forest(T, test_cases): results = [] for A, N in test_cases: if N % 2 == 1: # If the day is odd, animals double result = A * 2 else: # If the day is even, animals stay the same (split into half) result = A results.append(result) return results # Example usage T = 3 test_cases = [(4, 1), (4, 2), (4, 3)] print(animals_in_forest(T, test_cases)) # Output should be [8, 4, 8]"},{"question":"Alice loves playing with strings and has come up with an interesting game involving strings. She wants to know if a string can be rearranged to form a palindrome. A palindrome is a string that reads the same backward as forward. Help Alice by writing a function that determines if the given string can be rearranged to form a palindrome. # Input The input consists of a single line containing a string `s` (1 ≤ |s| ≤ 1000). The string `s` consists of lowercase English letters only. # Output Output \\"YES\\" if the string can be rearranged to form a palindrome, otherwise output \\"NO\\". # Examples Input ``` civic ``` Output ``` YES ``` Input ``` ivicc ``` Output ``` YES ``` Input ``` hello ``` Output ``` NO ``` Explanation In the first example, the string \\"civic\\" is already a palindrome. In the second example, the string \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. In the third example, no rearrangement of \\"hello\\" can form a palindrome.","solution":"def can_form_palindrome(s): Returns \\"YES\\" if the string can be rearranged to form a palindrome, otherwise returns \\"NO\\". from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"You are given an integer sequence a1, a2, ..., an, and an integer k which is formed by permuting the elements of the given sequence. Your task is to determine if the array \'a\' can be sorted in ascending order by swapping exactly k adjacent pairs of elements. Input The first line contains two integers n (1 ≤ n ≤ 100) and k (0 ≤ k ≤ 10000) – the number of elements in the sequence and the number of adjacent swaps allowed. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) – the elements of the sequence. Output Print \\"YES\\" if the sequence can be sorted in ascending order using exactly k adjacent swaps. Otherwise, print \\"NO\\". Examples Input 4 3 3 1 2 4 Output YES Input 4 2 3 1 4 2 Output NO Note In the first example, you can perform the following swaps to sort the sequence: 1. Swap elements at positions 1 and 2: [1, 3, 2, 4] 2. Swap elements at positions 2 and 3: [1, 2, 3, 4] Thus, the sequence can be sorted using exactly 3 swaps. In the second example, even if the sequence is sorted using 3 swaps, it deviates by one from the allowed k, making it impossible to sort the sequence using exactly 2 swaps.","solution":"def can_sort_with_k_swaps(n, k, sequence): Determines if the array can be sorted using exactly k adjacent swaps. Parameters: n (int): Number of elements in the sequence. k (int): Number of adjacent swaps allowed. sequence (list of int): The elements of the sequence. Returns: str: \\"YES\\" if the sequence can be sorted using exactly k swaps. Otherwise, \\"NO\\". inversions_count = 0 # Count the number of inversions in the sequence for i in range(n): for j in range(i + 1, n): if sequence[i] > sequence[j]: inversions_count += 1 if inversions_count <= k: return \\"YES\\" return \\"NO\\""},{"question":"In a library, there are several books arranged in a row. Each book has a distinct height given in an array of positive integers. The library wants to rearrange the books so that the height of any book is not greater than the height of the book immediately following it. However, the rearrangement has to be done by performing a specific operation as few times as possible. The operation allowed is selecting any subarray and reversing it. Determine the minimum number of operations required to rearrange the books in the desired order. Constraints * All values in input are integers. * 1 leq N leq 10^5 * 1 leq h_i leq 10^4 Input Input is given from Standard Input in the following format: N h_1 h_2 ldots h_N Output Print the minimum number of operations required to rearrange the books. Examples Input 5 4 3 2 1 5 Output 1 Input 4 1 2 3 4 Output 0 Input 6 6 5 4 3 2 1 Output 1","solution":"def min_operations_to_sort_books(N, heights): Given the number of books N and their respective heights in a list, determine the minimum number of reverse operations needed to sort the books in non-decreasing order. if heights == sorted(heights): return 0 # Find the longest sorted subarray from the start end = 0 while end < N - 1 and heights[end] <= heights[end + 1]: end += 1 # Find the longest sorted subarray from the end start = N - 1 while start > 0 and heights[start] >= heights[start - 1]: start -= 1 # If the array is fully sorted from start to end, just reverse once if end > start: return 1 return 1 # Any unsorted array can be sorted by a single reverse operation"},{"question":"Alice loves problem-solving and she has a special interest in prime numbers. She recently came across a fascinating problem and is looking for your help to solve it. Given a number `n` and an integer `k`, determine the `k-th` smallest prime factor of `n`. If `n` has fewer than `k` prime factors, print `-1`. For example, if `n = 12` and `k = 2`, the prime factors of `12` are `2` and `3`. The 2-nd smallest prime factor is `3`. Write a program to solve this problem. # Input - The first line contains an integer `t`, the number of test cases (1 ≤ t ≤ 100). - Each of the next `t` lines contains two integers `n` and `k` (2 ≤ n ≤ 10^12, 1 ≤ k ≤ 10^5). # Output For each test case, print the k-th smallest prime factor of `n`, or `-1` if `n` has fewer than `k` prime factors. # Example Input: ``` 3 12 2 30 3 27 2 ``` Output: ``` 3 5 -1 ``` # Note: In the first test case, for `n = 12`, the prime factors are `[2, 3]`. The 2-nd smallest prime factor is `3`. In the second test case, for `n = 30`, the prime factors are `[2, 3, 5]`. The 3-rd smallest prime factor is `5`. In the third test case, for `n = 27`, the prime factors are `[3]`. There is only one prime factor, so the output is `-1` since we\'re looking for the 2-nd smallest.","solution":"def kth_smallest_prime_factor(t, cases): def prime_factors(n): factors = [] # Check for number of 2s that divide n while n % 2 == 0: factors.append(2) n //= 2 # n must be odd at this point, so check for odd numbers for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n //= i # This condition is to check if n is a prime number greater than 2 if n > 2: factors.append(n) return factors results = [] for n, k in cases: factors = prime_factors(n) unique_factors = sorted(set(factors)) # Get unique prime factors if len(unique_factors) >= k: results.append(unique_factors[k - 1]) else: results.append(-1) return results"},{"question":"A common problem in computer graphics is the detection of intersections between line segments. Given two line segments, we need to determine if they intersect, and if they do, find the point of intersection. Input Your input will consist of four lines, each containing two space-separated integers. - The first line contains x1 and y1, the coordinates of the first endpoint of the first line segment. - The second line contains x2 and y2, the coordinates of the second endpoint of the first line segment. - The third line contains x3 and y3, the coordinates of the first endpoint of the second line segment. - The fourth line contains x4 and y4, the coordinates of the second endpoint of the second line segment. Output Your output should have the following format: - If the line segments do not intersect, output \\"No intersection\\". - If the line segments intersect at exactly one point, output \\"Intersection at (x, y)\\", rounded to one decimal place. - If the line segments overlap exactly, output \\"Segments overlap\\". Constraints: - All coordinates x1, y1, x2, y2, x3, y3, x4, y4 are integers in the range -10000 to 10000. Example Input: 0 0 1 1 1 0 0 1 Output: Intersection at (0.5, 0.5) Input: 0 0 1 1 1 2 2 3 Output: No intersection Notes: - You may assume the calculation of intersections will not result in floating-point precision issues. - Use appropriate geometric algorithms to determine the points of intersection.","solution":"def line_segments_intersect(x1, y1, x2, y2, x3, y3, x4, y4): def orientation(px, py, qx, qy, rx, ry): val = (qy - py) * (rx - qx) - (qx - px) * (ry - qy) if val == 0: return 0 return 1 if val > 0 else -1 def on_segment(px, py, qx, qy, rx, ry): if min(px, qx) <= rx <= max(px, qx) and min(py, qy) <= ry <= max(py, qy): return True return False o1 = orientation(x1, y1, x2, y2, x3, y3) o2 = orientation(x1, y1, x2, y2, x4, y4) o3 = orientation(x3, y3, x4, y4, x1, y1) o4 = orientation(x3, y3, x4, y4, x2, y2) if o1 != o2 and o3 != o4: a1 = y2 - y1 b1 = x1 - x2 c1 = a1 * x1 + b1 * y1 a2 = y4 - y3 b2 = x3 - x4 c2 = a2 * x3 + b2 * y3 det = a1 * b2 - a2 * b1 if det == 0: return \\"Segments overlap\\" intersect_x = (b2 * c1 - b1 * c2) / det intersect_y = (a1 * c2 - a2 * c1) / det return f\\"Intersection at ({intersect_x:.1f}, {intersect_y:.1f})\\" if (o1 == 0 and on_segment(x1, y1, x2, y2, x3, y3)) or (o2 == 0 and on_segment(x1, y1, x2, y2, x4, y4)) or (o3 == 0 and on_segment(x3, y3, x4, y4, x1, y1)) or (o4 == 0 and on_segment(x3, y3, x4, y4, x2, y2)): return \\"Segments overlap\\" return \\"No intersection\\""},{"question":"Given a binary tree, determine if it is height-balanced. An empty tree is height-balanced by definition, so is a single-node tree. A height-balanced tree is one where the height of the two child subtrees of every node differ by no more than 1. Write a function to determine if a binary tree is height-balanced. Input - The input is given as a binary tree of nodes where each node contains an integer value. (The length of nodes is ≤ 10000) Output - Return `true` if the binary tree is height-balanced, otherwise return `false`. Example Input 1 / 2 3 / 4 Output true Input 1 / 2 / 3 Output false","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_balanced(root): Determine if a binary tree is height-balanced. def check_height(node): # Return tuple (is_balanced, height) if node is None: return (True, 0) left_balanced, left_height = check_height(node.left) right_balanced, right_height = check_height(node.right) current_balanced = ( left_balanced and right_balanced and abs(left_height - right_height) <= 1 ) current_height = 1 + max(left_height, right_height) return (current_balanced, current_height) return check_height(root)[0]"},{"question":"Problem description. Bob is an experienced backpacker who loves exploring mountains. He plans a new adventure trip where he wants to climb different mountains. Bob has a list of mountains with their height indicated in meters. Bob wants to know the minimum number of days required to climb all of these mountains if he climbs exactly one mountain per day. Additionally, Bob can only climb mountains in non-decreasing order of their height to ensure a smooth and safe journey. You have to write a function that, given a list of mountain heights, returns the minimum number of days required for Bob to complete his climbing trip. Input The first line contains the number of test cases, t. The t lines that follow each contain a list of integers where each list denotes the heights of the mountains Bob intends to climb on his trip. Output For each test case, print the minimum number of days required for Bob to climb all the mountains in non-decreasing order of their height. Constraints 1 <= t <= 100 1 <= length of each list <= 10^5 1 <= height of each mountain <= 10^9 Example Input: 2 1 3 2 4 4 3 2 1 Output: 4 4","solution":"def min_days_to_climb(t, test_cases): Returns the minimum number of days Bob needs to complete his climbing trip for each test case. Args: t (int): Number of test cases. test_cases (list of list of int): Each list represents mountain heights Bob plans to climb. Returns: list of int: List containing minimum number of days for each test case. results = [] for mountains in test_cases: results.append(len(sorted(mountains))) # Sort the mountains and count the number of days required return results"},{"question":"def count_trees(grid): rows = len(grid) cols = len(grid[0]) tree_count = 0 for i in range(rows): for j in range(cols): if grid[i][j] == 1: tree_count += 1 return tree_count def max_rect_area(grid): rows = len(grid) cols = len(grid[0]) # Convert the grid to indicate forest patches. for i in range(1, rows): for j in range(cols): if grid[i][j] == 1: grid[i][j] += grid[i - 1][j] max_area = 0 for i in range(rows): max_area = max(max_area, max_histogram_area(grid[i])) return max_area def max_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[index] >= histogram[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area # Sample input forest = [[0, 1, 0, 0, 1], [1, 1, 1, 1, 0], [1, 0, 1, 1, 0], [0, 0, 1, 0, 1]] tree_count = count_trees(forest) max_area = max_rect_area(forest) print(\\"Number of trees:\\", tree_count) print(\\"Max rectangular area of trees:\\", max_area)","solution":"def count_trees(grid): Returns the number of trees (1s) in the grid. rows = len(grid) cols = len(grid[0]) tree_count = 0 for i in range(rows): for j in range(cols): if grid[i][j] == 1: tree_count += 1 return tree_count def max_rect_area(grid): Returns the maximum rectangular area of trees (1s) in the grid. rows = len(grid) cols = len(grid[0]) # Convert the grid to indicate forest patches. for i in range(1, rows): for j in range(cols): if grid[i][j] == 1: grid[i][j] += grid[i - 1][j] max_area = 0 for i in range(rows): max_area = max(max_area, max_histogram_area(grid[i])) return max_area def max_histogram_area(histogram): Returns the maximum area of a histogram. stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[index] >= histogram[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area # Sample input forest = [[0, 1, 0, 0, 1], [1, 1, 1, 1, 0], [1, 0, 1, 1, 0], [0, 0, 1, 0, 1]] tree_count = count_trees(forest) max_area = max_rect_area(forest) print(\\"Number of trees:\\", tree_count) print(\\"Max rectangular area of trees:\\", max_area)"},{"question":"In a forest, there are n trees, each with a different height. You want to cut down a certain number of trees such that you maximize the height of the shortest remaining tree. Write a program that, given the number n and the list of heights of each tree, determines the maximum possible height of the shortest tree after cutting down k trees. # Input: - The first line of the input contains two integers n and k (2 <= k < n <= 1000) – the number of trees and the number of trees to cut down. - The second line contains n integers h1, h2, ..., hn (1 <= hi <= 10000), where hi is the height of the i-th tree. # Output: - Output one integer – the maximum possible height of the shortest remaining tree after cutting down k trees. # Example: Input: ``` 5 2 4 2 1 6 5 ``` Output: ``` 4 ``` Explanation: If we cut down the trees with heights 1 and 2, we are left with trees of heights 4, 5, and 6. The shortest remaining tree is 4. This is the maximum possible height of the shortest remaining tree that can be achieved.","solution":"def max_shortest_tree_height(n, k, heights): Determines the maximum possible height of the shortest remaining tree after cutting down k trees. :param n: int - Total number of trees. :param k: int - Number of trees to cut down. :param heights: List[int] - Heights of the trees. :return: int - Maximum possible height of the shortest remaining tree. # Sort the tree heights heights.sort() # We want to maximize the height of the shortest remaining tree, # hence after cutting k trees, the shortest remaining tree will # be the (k+1)th tallest tree in the sorted list. return heights[k]"},{"question":"Write a program to simulate a basic paint-bucket tool in a grid-based drawing application. The tool will fill a connected area with a specified color. A grid is represented by a matrix of characters, where each character represents a different color (\'R\' for red, \'G\' for green, \'B\' for blue, etc.). The paint-bucket tool will start at a given cell and change the color of that cell and all connected cells (vertically or horizontally) of the same color to the new specified color. Input The first line of input contains two integers, n and m (1 ≤ n, m ≤ 20), representing the dimensions of the grid. The next n lines each contain a string of m characters, representing the initial grid. The next line of input contains three elements: two integers r and c (0 ≤ r < n, 0 ≤ c < m), which are the starting position of the paint-bucket tool, and a character C, which represents the new color to fill. Output Output the grid after applying the paint-bucket tool. Example Input 4 4 RGBG RBBB GGGB RRRG 1 2 Y Output RYYG RYYY GGGY RRRG Input 3 5 RRRBB RRRBB GGGGG 1 1 G Output GGGBB GGGBB GGGGG Notes - The paint-bucket only changes connected cells of the same color that are vertically or horizontally connected, not diagonally. - It is guaranteed that the starting cell and the color to be filled with are always valid.","solution":"def paint_bucket(n, m, grid, r, c, new_color): Fills a connected area with a specified color starting from (r, c). original_color = grid[r][c] if original_color == new_color: return grid def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] != original_color: return grid[x][y] = new_color dfs(x-1, y) dfs(x+1, y) dfs(x, y-1) dfs(x, y+1) dfs(r, c) return grid # Example usage if __name__ == \'__main__\': n = 4 m = 4 grid = [ [\'R\', \'G\', \'B\', \'G\'], [\'R\', \'B\', \'B\', \'B\'], [\'G\', \'G\', \'G\', \'B\'], [\'R\', \'R\', \'R\', \'G\'] ] r = 1 c = 2 new_color = \'Y\' result = paint_bucket(n, m, grid, r, c, new_color) for row in result: print(\'\'.join(row))"},{"question":"Write a program which determines whether a given point (q_x, q_y) lies inside, outside, or on the circumference of a circle defined by a center (c_x, c_y) and a radius r. Constraints * -100 leq q_x, q_y, c_x, c_y leq 100 * 0 leq r leq 100 * m leq 20 Input Input consists of several datasets. In the first line, the number of datasets m is given. Each dataset consists of: q_x q_y c_x c_y r in a line. All the input are real numbers. Output For each dataset, print \\"INSIDE\\", \\"OUTSIDE\\" or \\"ON THE CIRCUMFERENCE\\". Example Input 2 1.0 1.0 0.0 0.0 2.0 3.0 3.0 0.0 0.0 2.0 Output INSIDE OUTSIDE","solution":"import math def point_position_against_circle(q_x, q_y, c_x, c_y, r): Determines whether the given point (q_x, q_y) lies inside, outside, or on the circumference of the circle defined by the center (c_x, c_y) and radius r. distance_squared = (q_x - c_x)**2 + (q_y - c_y)**2 radius_squared = r**2 if distance_squared < radius_squared: return \\"INSIDE\\" elif distance_squared > radius_squared: return \\"OUTSIDE\\" else: return \\"ON THE CIRCUMFERENCE\\" def process_datasets(datasets): results = [] for dataset in datasets: q_x, q_y, c_x, c_y, r = dataset result = point_position_against_circle(q_x, q_y, c_x, c_y, r) results.append(result) return results"},{"question":"A software company is organizing an online coding competition. In this contest, there are `n` coders numbered from 1 to `n`. Each coder solved a set of problems and achieved a certain score. The company wants to rank these coders based on their scores. However, if two or more coders have the same score, they will be ranked by their coder number in ascending order. Your task is to write a program that ranks the coders based on their scores and coder numbers, and then outputs the list of coder numbers in descending order of their ranks. Input The input is given in the following format: n score_1 score_2 :: score_n The first line gives the number of coders `n` (2 ≤ n ≤ 100). Each of the following `n` lines contains the score of the i-th coder (0 ≤ score_i ≤ 1000). Output Print the coder numbers in the order they should be ranked. Each coder number should be printed on a new line. Example Input 5 100 90 100 80 90 Output 1 3 2 5 4 Explanation - Coder 1 and Coder 3 both have a score of 100 but Coder 1 comes first because they have a smaller coder number. - Coder 2 and Coder 5 both have a score of 90 but Coder 2 comes first because they have a smaller coder number. - Coder 4 has the lowest score of 80.","solution":"def rank_coders(n, scores): Ranks the coders based on their scores. In case of a tie, the coder with the smaller number is ranked higher. Parameters: n (int): Number of coders. scores (list of int): List containing the scores of the coders. Returns: list of int: List containing the coder numbers in the order they should be ranked. coders = [(i + 1, scores[i]) for i in range(n)] coders.sort(key=lambda x: (-x[1], x[0])) return [coder[0] for coder in coders]"},{"question":"A company wants to distribute a set of N identical candies into M different boxes such that no box is left empty. Write a program to calculate the number of distinct ways to achieve this distribution. INPUT: The first line contains the number of test cases T, followed by T lines each containing two integers N and M. OUTPUT: For each test case, print the required number of ways in a single line. If it is not possible to distribute candies without leaving any box empty, print 0. Constraints: 1 ≤ T ≤ 100 1 ≤ N, M ≤ 100 SAMPLE INPUT 2 7 3 5 5 SAMPLE OUTPUT 15 1","solution":"from math import comb def distribute_candies(N, M): Returns the number of distinct ways to distribute N identical candies into M boxes such that no box is empty. if N < M: return 0 return comb(N - 1, M - 1) def distribute_candies_main(test_cases): Main function to handle multiple test cases. results = [] for N, M in test_cases: result = distribute_candies(N, M) results.append(result) return results"},{"question":"A drone has an auto-pilot system that needs to take an array of heights, where each element represents the height of a mountain at a particular point on a linear path. The drone must fly in such a way that it doesn\'t climb more than one unit in height between two consecutive points, but it can drop as many units in height as necessary. Calculate the number of valid paths the drone can take from the first to the last point in the array. Each path must use every point in the array. Input The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of points in the array. The second line contains `n` integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the mountains at each point. Output Print a single integer — the number of valid paths modulo 1000000007 (10^9 + 7). Examples Input 3 1 2 2 Output 1 Input 4 3 4 3 5 Output 0 Note In the first test case, the only valid path is 1 -> 2 -> 2 since it only climbs 1 unit between the first and second points and doesn\'t climb between the second and third points. In the second test case, it is not possible to reach from the first point to the last point because there is a climb from 3 to 5 which exceeds 1 unit.","solution":"def valid_drone_paths(n, heights): Determines if there are any valid paths from start to end given the constraints. Parameters: n (int): The number of points in the array. heights (list of int): The heights of the mountains at each point. Returns: int: 1 if there\'s a valid path, 0 otherwise (modulo 1000000007). for i in range(n-1): if heights[i+1] - heights[i] > 1: return 0 return 1"},{"question":"A group of workers in Byteville are assigned a set of tasks, and each task takes a different amount of time to complete. The manager wants to divide the tasks among the workers so that each worker is assigned at least one task and the difference in the total time spent by each worker is minimized. Your job is to determine the minimum possible difference between the total time spent by the worker who has the most tasks and the worker who has the least tasks. Input: The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing an integer N followed by N space-separated integers t1, t2, ..., tN where N is the number of tasks and ti is the time required to complete the ith task. Output: For each test case, output a single line containing the minimum possible difference in total time spent between the workers who have the most tasks and the workers who have the least tasks. Constraints: 1 <= T <= 100 1 <= N <= 10^5 1 <= ti <= 10^4 Example: Input: 2 3 8 15 7 5 1 2 3 4 5 Output: 0 1 Explanation: For the first test case, the worker can take tasks with times 8 and 7, while the other takes the task with time 15, resulting in zero difference (15-15=0). For the second test case, the optimal distribution is worker one taking tasks with times 1, 2, 3 and worker two taking tasks with times 4, 5, giving a difference of 1 (6-5=1).","solution":"def min_difference(T, test_cases): def helper(tasks): total_time = sum(tasks) n = len(tasks) half_time = total_time // 2 dp = [0] * (half_time + 1) for time in tasks: for j in range(half_time, time - 1, -1): dp[j] = max(dp[j], dp[j - time] + time) return abs(total_time - 2 * dp[half_time]) results = [] for t in range(T): tasks = test_cases[t][1] results.append(helper(tasks)) return results"},{"question":"Given an array of integers where each element appears three times except for one. Find that single one that only appears once. Example Input 4 2 2 3 2 Output 3 Input 7 0 1 0 1 0 1 99 Output 99 Note: Your solution should have a linear runtime complexity and use only constant extra space.","solution":"def single_number(nums): Finds the element in the list that appears only once while all other elements appear thrice. Args: nums (List[int]): The list of integers. Returns: int: The single integer that appears only once. ones, twos = 0, 0 for num in nums: # Appears in ones for the first time, remove if appearing again ones = (ones ^ num) & ~twos # Appears in twos for the first time, remove if appearing again twos = (twos ^ num) & ~ones return ones"},{"question":"Minori wants to string (N) beads on a necklace. Each bead has a color represented by an integer. The necklace is circular, meaning the first bead follows the last bead. Minori wants to determine how many distinct ways she can choose two adjacent beads such that they have different colors. Two beads are considered adjacent if there is no other bead between them. Write a program that, given the bead colors as an array, calculates the number of distinct pairs of adjacent beads with different colors. # Input Format - The first line contains an integer (N) ((2 leq N leq 10^5)), the number of beads. - The second line contains (N) integers where the (i)-th integer represents the color of the (i)-th bead. # Output Format - Print a single integer: the number of distinct adjacent bead pairs with different colors. # Constraints - All colors are integers between 1 and 10^9. - Beads will have at least two different colors to ensure at least one valid pair exists. # Examples Example 1 **Input:** ``` 6 1 2 3 4 3 2 ``` **Output:** ``` 6 ``` Example 2 **Input:** ``` 4 1 1 2 2 ``` **Output:** ``` 2 ``` # Notes In the first example, the pairs (1,2), (2,3), (3,4), (4,3), (3,2), and (2,1) are valid, making 6 distinct pairs with different colors. In the second example, only the pairs (1,2) and (2,1) are valid, making 2 distinct pairs.","solution":"def count_distinct_adjacent_pairs_different_colors(N, colors): Counts the number of distinct adjacent bead pairs with different colors. Args: N (int): Number of beads. colors (list of int): Colors of the beads. Returns: int: Number of distinct pairs of adjacent beads with different colors. count = 0 # Since the necklace is circular, consider the beads in a circular manner for i in range(N): if colors[i] != colors[(i + 1) % N]: count += 1 return count"},{"question":"You are given a list of integers representing the elevation map where the width of each bar is 1. Write a function to find how much water it can trap after raining. Imagine that each bar can hold water and the water is trapped by the height of the bars on either side. For example, given a list representing elevations `[4, 2, 0, 3, 2, 5]`, the amount of water trapped would be 9 units. Given an elevation map list of length n, where 0 ≤ n ≤ 100,000 and each height of the elevation map is an integer within the range [0, 1000], implement a function to compute the amount of trapped water. Input - The input consists of a single list of integers, with each integer representing the height of a bar in the elevation map. Output - The output should be a single integer, representing the total amount of trapped water. Examples Input ``` [0,1,0,2,1,0,1,3,2,1,2,1] ``` Output ``` 6 ``` Input ``` [4,2,0,3,2,5] ``` Output ``` 9 ``` Input ``` [3,0,1,3,0,5] ``` Output ``` 8 ``` Explanation of Examples: - In the first example, 6 units of water are trapped between the bars as follows: 1 unit between 2nd and 4th bars, 2 units between 4th and 8th bars, and 3 units between 8th and 12th bars. - In the second example, the 3rd bar can hold 2 units of water, the 5th can hold 1 unit, and the container from the 4th to the last bar can hold 6 units of water trapped between them. - In the third example, the water trapped is calculated by the height difference between bars at positions 2, 4, and 6.","solution":"def trap_rain_water(heights): Calculate how much water can be trapped after raining, given a list of integers representing the elevation map. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate total water trapped for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"A group of friends is planning a unique game night where they play a board game on a rectangular grid. The board is divided into square cells and they want to place a special straight path on the grid. This path can start from any cell and extend in a straight line in any of the four cardinal directions (up, down, left, right). The friends have different preferences for the length of the path, and they prefer to maximize it. Given the dimensions of the board and the positions of some blocked cells that the path cannot pass through, determine the maximum possible length of a straight path that can be placed on the grid without entering any blocked cell. Input: The first line contains two integers, `n` and `m`, representing the dimensions of the grid (n rows and m columns). The next line contains an integer `b`, representing the number of blocked cells. The following `b` lines each contain two integers `r` and `c`, representing the row and column indices of a blocked cell on the grid. Output: Output a single integer representing the maximum possible length of a straight path that can be placed on the grid. Example: Input: 5 5 3 2 2 3 3 4 4 Output: 5 Explanation: In the given example, the grid is 5x5 and three cells are blocked at (2,2), (3,3), and (4,4). The maximum possible straight path length is 5, which can be achieved in multiple ways, such as the entire first row or first column (both lengths being 5). Note: - The indices for rows and columns start from 1. - A straight path can be of length 1, covering just one cell if it cannot be extended further without encountering a blocked cell. This question tests the ability to navigate and evaluate paths in a grid, simulating various constraints and conditions typically encountered in grid-based problems.","solution":"def max_straight_path(n, m, blocked): # Create a grid initialized with True indicating all cells are initially free grid = [[True for _ in range(m)] for _ in range(n)] # Mark blocked cells as False for (r, c) in blocked: grid[r - 1][c - 1] = False max_length = 0 # Check for maximum path length in each row for i in range(n): current_length = 0 for j in range(m): if grid[i][j]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 # Check for maximum path length in each column for j in range(m): current_length = 0 for i in range(n): if grid[i][j]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"You are given a list of integers and you need to answer a series of queries about subarray sums. Specifically, each query consists of a pair of indices, and you are required to find the sum of the subarray that starts and ends at the given indices. Input: The first line contains the integer N, the length of the list. The second line contains N integers, the elements of the list. The third line contains the integer Q, the number of queries. The next Q lines each contain two integers, L and R, the start and end indices of the subarray. Output: For each query, output the sum of the subarray from index L to R (inclusive). Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N 1 ≤ array elements ≤ 10^9 SAMPLE INPUT 5 1 2 3 4 5 3 1 3 2 4 1 5 SAMPLE OUTPUT 6 9 15 Explanation In the first query, the subarray is [1, 2, 3], which sums to 6. In the second query, the subarray is [2, 3, 4], which sums to 9. In the third query, the subarray is [1, 2, 3, 4, 5], which sums to 15.","solution":"def subarray_sums(arr, queries): Returns the sums of subarrays for given queries. Args: arr : list of int : the list of integers queries : list of tuples : list of (L, R) pairs indicating the start and end indices for the subarrays Returns: list of int : list of sums for the respective subarrays # Precompute prefix sums prefix_sums = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] results = [] for L, R in queries: # Calculate the subarray sum using prefix sums subarray_sum = prefix_sums[R] - prefix_sums[L - 1] results.append(subarray_sum) return results"},{"question":"A chef is preparing a special sushi dish with N pieces of sushi. Each piece has a deliciousness value represented by array S such that the i-th sushi from the left has deliciousness S_i. To create an aesthetically pleasing and balanced dish, he needs to select exactly K pieces of sushi from the N pieces, such that those selected K pieces have maximum total deliciousness. However, the dish cannot have consecutive pieces of sushi with more than D difference in their positions from the original order. Find the maximum total deliciousness of the selected K pieces under these conditions. Constraints * 1 leq K leq N leq 2000 * 1 leq S_i leq 10^9 * 1 leq D leq N * All values in input are integers. Input Input is given from Standard Input in the following format: N K D S_1 S_2 ... S_N Output Print the maximum total deliciousness of the K selected pieces. Examples Input 5 3 2 5 3 9 1 8 Output 22 Input 7 4 3 4 8 3 7 6 5 2 Output 26 Input 4 2 1 10 7 5 12 Output 22","solution":"def max_total_deliciousness(N, K, D, S): # Initialize a DP table where dp[i][k] represents the maximum deliciousness # by considering the first i sushis and taking k sushis dp = [[-float(\'inf\')] * (K + 1) for _ in range(N + 1)] # base case, selecting 0 elements for i in range(N + 1): dp[i][0] = 0 # Solve the DP for i in range(1, N + 1): for k in range(1, K + 1): # Calculate maximum deliciousness by including or not including current piece dp[i][k] = dp[i-1][k] # Not including the i-th sushi for l in range(max(0, i-D), i): # Trying to include the i-th sushi and ensuring position difference <= D dp[i][k] = max(dp[i][k], dp[l][k-1] + S[i-1]) return dp[N][K]"},{"question":"Kunal the Explorer has just discovered a new island with n cities connected by m bidirectional roads. Each road has a distance indicated by a positive integer. Some roads are important trade routes and Kunal is particularly interested in identifying the shortest cycle in the network formed by these trade routes. A cycle is defined as a sequence of distinct roads forming a closed loop. The length of a cycle is the sum of distances of its constituent roads. Kunal wants to know the length of the shortest cycle in the given network of cities and roads. However, if there are no cycles in the network, output -1. Input The first line contains two integers, n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000), representing the number of cities and the number of roads, respectively. Each of the next m lines contains three integers, u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000), which denote that there is a road between city u and city v with distance w. It is guaranteed that there is at most one road between any pair of cities. Output Print a single integer: the length of the shortest cycle. If no cycles exist, print -1. Examples Input 5 7 1 2 1 2 3 1 3 4 1 4 5 1 5 1 1 1 3 2 4 2 2 Output 4 Input 4 3 1 2 1 2 3 1 3 4 1 Output -1 Note In the first sample, the shortest cycle is formed by the sequence of cities (1, 2, 3, 1) with a total distance of 1 + 2 + 1 = 4. In the second sample, the graph is a simple path with no cycles, so the output is -1.","solution":"import heapq import sys from collections import defaultdict, deque def shortest_cycle(n, m, edges): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def bfs(start): distances = {node: float(\'inf\') for node in range(1, n + 1)} parent = {node: None for node in range(1, n + 1)} queue = deque([(start, 0)]) distances[start] = 0 while queue: current, dist = queue.popleft() for neighbor, weight in graph[current]: if distances[neighbor] == float(\'inf\'): distances[neighbor] = dist + weight parent[neighbor] = current queue.append((neighbor, dist + weight)) elif parent[current] != neighbor and parent[neighbor] != current: # Found a cycle return dist + weight + distances[neighbor] return float(\'inf\') min_cycle = float(\'inf\') for node in range(1, n + 1): cycle_length = bfs(node) if cycle_length < min_cycle: min_cycle = cycle_length return -1 if min_cycle == float(\'inf\') else min_cycle def parse_input_and_find_shortest_cycle(input_str): input_lines = input_str.strip().split(\\"n\\") n, m = map(int, input_lines[0].split()) edges = [tuple(map(int, line.split())) for line in input_lines[1:]] return shortest_cycle(n, m, edges)"},{"question":"Write a function `is_binary_palindrome` that checks if the binary representation of a given positive integer is a palindrome. The function should take an integer as input and return `True` if its binary representation is a palindrome, and `False` otherwise. A palindrome is a sequence that reads the same forward and backward. # Function Signature ```python def is_binary_palindrome(n: int) -> bool: pass ``` # Input - An integer `n` (1 ≤ n ≤ 10^6). # Output - Returns `True` if the binary representation of `n` is a palindrome. - Returns `False` otherwise. # Examples ```python assert is_binary_palindrome(9) == True # binary: 1001 assert is_binary_palindrome(10) == False # binary: 1010 assert is_binary_palindrome(3) == True # binary: 11 ``` # Constraints - Do not use any string reversal methods directly. - Consider edge cases such as the smallest and largest possible values for `n`. # Explanation For a given integer, convert it to its binary representation (excluding the \'0b\' prefix). Check if this sequence reads the same from both directions (forward and backward) without using built-in string reversal methods. This involves comparing characters from the start and the end and ensuring they match as you move towards the center of the sequence.","solution":"def is_binary_palindrome(n: int) -> bool: Check if the binary representation of a given integer is a palindrome. Args: n (int): A positive integer. Returns: bool: True if the binary representation of n is a palindrome, False otherwise. binary_rep = bin(n)[2:] # Get binary representation of n and remove the \'0b\' prefix. # Check if the binary string is a palindrome. left, right = 0, len(binary_rep) - 1 while left < right: if binary_rep[left] != binary_rep[right]: return False left += 1 right -= 1 return True"},{"question":"Input: The input is given from Standard Input in the following format: > N M x_1 y_1 x_2 y_2 ： ： x_M y_M Output: * You should print N lines. * The i-th line should contain the number of votes received by candidate i (1 le i le N). Constraints: * 3 le N, M le 100,000 * 1 le x_i le N * 1 le y_i le 10^{12} * Any final results do not exceed 2 times 10^{13}. Subtasks: Subtask 1 [ 60 points ] * N, M le 100 * y_i = 1 Subtask 2 [ 400 points ] * N, M le 100 * y_i le 10^{12} Subtask 3 [ 240 points ] * N, M le 100,000 * y_i = 1 Subtask 4 [ 500 points ] * There are no additional constraints. Examples: Input: 6 3 1 10 2 20 3 30 Output: 10 20 30 0 0 0 Input: 5 5 2 15 3 12 4 17 1 41 5 11 Output: 41 15 12 17 11 Input: 4 4 1 1 2 1 3 1 4 1 Output: 1 1 1 1","solution":"def count_votes(N, M, votes): Given the number of candidates N, the number of votes M, and a list of tuples containing votes, returns a list of the vote counts for each candidate. Args: - N (int): The number of candidates. - M (int): The number of votes. - votes (List[Tuple[int, int]]): A list of tuples, where each tuple contains the candidate number and the vote count. Returns: - List[int]: A list containing the total votes for each candidate. vote_counts = [0] * (N + 1) for candidate, vote in votes: vote_counts[candidate] += vote return vote_counts[1:]"},{"question":"In an ancient kingdom, there was an enchanted garden with a unique irrigation system. The garden is represented as a grid of size MxN (1 ≤ M, N ≤ 100). Each cell in the grid can either be fertile (represented by \'F\') or barren (represented by \'B\'). The caretaker of the garden wants to ensure that every fertile cell receives water. The water can only start from a specific fertile cell, known as the source, and it spreads to adjacent fertile cells. The water can move up, down, left, or right to an adjacent fertile cell. However, due to some recent disturbances, some cells of the garden have become blocked from spreading water. These blocked cells are also given as part of the input and are represented by \'X\'. The task is to determine the minimum number of steps required for water to spread from the source to reach all fertile cells in the garden, or determine that it is not possible. Input The input consists of multiple test cases. For each test case: - The first line contains two integers M and N, the number of rows and columns in the grid. - The following M lines each contain N characters, either \'F\', \'B\', \'S\', or \'X\', representing the garden\'s grid. - There will be exactly one \'S\' in the grid representing the source cell from where water starts spreading. - There will be at most 100 test cases. The input is terminated by a line containing two zeros. Output For each test case, print the minimum number of steps required to water all fertile cells. If it is not possible, print -1. Example Input 3 3 SFF FBF FFF 2 2 SF FX 1 1 S 0 0 Output 4 1 0","solution":"from collections import deque def min_steps_to_water_all_fertile_cells(grid, M, N): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque() visited = [[False] * N for _ in range(M)] fertile_count = 0 for i in range(M): for j in range(N): if grid[i][j] == \'S\': queue.append((i, j, 0)) visited[i][j] = True if grid[i][j] == \'F\' or grid[i][j] == \'S\': fertile_count += 1 if fertile_count == 0: return 0 watered_count = 1 # starting cell \'S\' steps = 0 while queue: x, y, steps = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and not visited[nx][ny] and grid[nx][ny] in [\'F\', \'S\']: queue.append((nx, ny, steps + 1)) visited[nx][ny] = True watered_count += 1 return steps if watered_count == fertile_count else -1 def process_garden(grids): results = [] for grid, M, N in grids: results.append(min_steps_to_water_all_fertile_cells(grid, M, N)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') index = 0 grids = [] while index < len(lines): M, N = map(int, lines[index].split()) if M == 0 and N == 0: break grid = [list(lines[i]) for i in range(index + 1, index + 1 + M)] grids.append((grid, M, N)) index += M + 1 return process_garden(grids)"},{"question":"Alice and Bob are playing a game with a string `S` of length `N` consisting of only lowercase English letters. The game is played as follows: - Alice selects a non-empty substring of `S` and reverses it. - Bob can choose any lowercase English letter and remove all occurrences of that letter from the string. - Both players take turns alternately, starting with Alice. The goal for Alice is to make the string a palindrome, while Bob aims to make it impossible for Alice to achieve her goal. Assume both players play optimally. Determine the winner of the game given the initial state of the string `S`. If Alice can always form a palindrome, print \\"Alice\\". Otherwise, print \\"Bob\\". Input: The first line contains an integer `T`, denoting the number of test cases. The first line of each test case contains an integer `N`, the length of the string `S`. The second line of each test case contains the string `S`. Output: For each test case, print \\"Alice\\" if Alice can guarantee to make the string a palindrome, otherwise print \\"Bob\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 SAMPLE INPUT 2 3 abc 5 aabbc SAMPLE OUTPUT Bob Alice","solution":"def can_form_palindrome(s): # Count the frequency of each character in the string char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count the number of characters with an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 == 1) # For the string to be converted into a palindrome: # - At most one character can have an odd frequency (for odd length strings) # - All characters must have even frequencies (for even length strings) return odd_count <= 1 def alice_and_bob_game(test_cases): results = [] for N, S in test_cases: if can_form_palindrome(S): results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results"},{"question":"You have been hired to create a system for managing the capacities of multiple cinemas in a small city. Each cinema has a number of screens, and each screen has a specific capacity for the number of people it can hold. The goal is to determine the smallest capacity screen that can be used to accommodate a group of people without splitting them up. Input The first line consists of T: the number of test cases. Each test case starts with a number M: denoting the number of cinemas. Each of the next M lines starts with a number K (number of screens in the cinema) followed by K space-separated integers, representing the capacities of these screens. The last line of each test case contains an integer G, the size of the group of people. Output For each test case, output one integer: the capacity of the smallest screen that can accommodate the group. Constraints 1 ≤ T ≤ 100 1 ≤ M ≤ 50 1 ≤ K ≤ 10 1 ≤ Capacity of each screen ≤ 1000 1 ≤ G ≤ 1000 Example Input: 2 2 3 50 100 200 2 75 150 120 1 4 200 300 400 500 350 Output: 150 400","solution":"def smallest_capacity_for_group(test_cases): results = [] for test_case in test_cases: cinemas = test_case[\'cinemas\'] group_size = test_case[\'group\'] min_capacity = float(\'inf\') for cinema in cinemas: screen_capacities = cinema[\'screens\'] for capacity in screen_capacities: if capacity >= group_size: min_capacity = min(min_capacity, capacity) results.append(min_capacity) return results # Parse input def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): M = int(lines[index]) index += 1 cinemas = [] for _ in range(M): screen_info = list(map(int, lines[index].split())) K = screen_info[0] screen_capacities = screen_info[1:] cinemas.append({\'screens\': screen_capacities}) index += 1 G = int(lines[index]) index += 1 test_cases.append({\'cinemas\': cinemas, \'group\': G}) return test_cases input_str = 2 2 3 50 100 200 2 75 150 120 1 4 200 300 400 500 350 test_cases = parse_input(input_str) output = smallest_capacity_for_group(test_cases) for res in output: print(res)"},{"question":"Berland Zoo has recently been gifted a rare species of animals. The zookeeper, Alexei, wants to design an enclosure for them. The enclosure consists of rectangular blocks, and to ensure the animals\' wellbeing, some specific constraints have to be followed: 1. Each block must have a distinct height. 2. The height of each block must be a positive integer less than or equal to `h`. Alexei has `n` blocks, and he needs to arrange them in a line such that the height of each block is distinct and adheres to the aforementioned constraints. Since Alexei is meticulous, he wants to know all possible valid sequences in which the blocks can be arranged. Help Alexei determine the number of such valid sequences. Input The first line contains two integers `n` and `h` (1 ≤ n, h ≤ 10) — the number of blocks and the maximum height for any block. Output Print a single integer, representing the number of valid sequences in which the blocks can be arranged. Examples Input 3 4 Output 24 Input 2 3 Output 6 Input 4 4 Output 24 Note In the first sample, the blocks can have heights `[1, 2, 3]`, `[1, 2, 4]`, `[1, 3, 4]`, `[2, 3, 4]`, `[4, 3, 2]`, and other permutations in total 24 valid sequences. For `n = 4` and `h = 4`, there are also 24 permutations since heights have to be distinct and there are exactly 4 heights available.","solution":"from itertools import permutations def count_valid_sequences(n, h): Returns the number of valid sequences of heights. if n > h: return 0 heights = list(range(1, h + 1)) valid_sequences = permutations(heights, n) return len(list(valid_sequences))"},{"question":"Apples in Boxes You have a total of N boxes arranged in a row. Each box contains M apples. How many apples in total do you have in all the boxes? # Input Input is given from standard input in the following format: N M # Output Output the total number of apples in one line. Insert a line break at the end. # Constraints - 1 leq N leq 12 - 1 leq M leq 10 - All inputs are integers. # Input example 1 6 3 # Output example 1 18 # Input example 2 4 7 # Output example 2 28 # Example Input 6 3 Output 18","solution":"def total_apples(N, M): Returns the total number of apples in all the boxes. Parameters: N (int): Number of boxes M (int): Number of apples in each box Returns: int: Total number of apples return N * M"},{"question":"You are given a list of integers representing the daily stock prices of a certain company over a period of N days. Your task is to maximize the profit from at most two non-overlapping transactions. Each transaction consists of buying one and selling one share of the stock, and you must buy before you sell. Write a function `max_profit(prices: List[int]) -> int` that takes an array of integers `prices` as input and returns the maximum profit achievable from at most two non-overlapping transactions. Constraints: * 1 <= N <= 10^5 * 0 <= prices[i] <= 10^5 Input - A list of integers representing the stock prices for each day. Output - An integer representing the maximum profit. Examples Input: prices = [3,3,5,0,0,3,1,4] Output: 6 Explanation: - Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. - Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3. - Total profit = 3 + 3 = 6. Input: prices = [1,2,3,4,5] Output: 4 Explanation: - Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. - Total profit = 4. Input: prices = [7,6,4,3,1] Output: 0 Explanation: - In this case, no transaction is done, i.e., max profit = 0.","solution":"def max_profit(prices): if not prices: return 0 n = len(prices) # First pass: calculate max profit up to each day from the beginning max_profit_up_to = [0] * n min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) max_profit_up_to[i] = max(max_profit_up_to[i - 1], prices[i] - min_price) # Second pass: calculate max profit from each day to the end and the combination max_profit_from = [0] * n max_price = prices[-1] for i in range(n - 2, -1, -1): max_price = max(max_price, prices[i]) max_profit_from[i] = max(max_profit_from[i + 1], max_price - prices[i]) # Find the maximum profit from at most 2 transactions max_profit = 0 for i in range(n): max_profit = max(max_profit, max_profit_up_to[i] + max_profit_from[i]) return max_profit"},{"question":"Consider the following grid of size `N x N`: ``` 1 1 0 1 1 1 0 0 0 0 1 1 1 0 1 1 ``` You are to represent a grid of dimensions `N x N` containing some cells filled and some cells empty. The grid can be represented by an adjacency matrix `G` with `1` indicating filled cells and `0` indicating empty cells. Your task is to find the maximum size of a square sub-grid that contains only `1`s. Write a function `maxSquareSubGrid(N, G)` that takes in the following arguments: - An integer `N` denoting the size of the grid (both rows and columns). - A 2D list `G` representing the grid where each element is either `0` or `1`. The function should return an integer, the size of the maximum square sub-grid that is only composed of `1`s. A square sub-grid includes all cells within its boundaries. Input: - The first line contains a single integer `N`, the size of the grid (1 ≤ N ≤ 1000). - The next `N` lines each contain `N` space-separated integers representing the grid. Output: - An integer representing the size of the largest square sub-grid filled with `1`s. Example: Input: ``` 4 1 1 0 1 1 1 0 0 0 0 1 1 1 0 1 1 ``` Output: ``` 2 ``` In the given example, the largest square sub-grid of 1s has a size of 2 and there are a few such sub-grids in the matrix provided. Remember to consider edge cases such as when `N=1` or grids entirely filled with `1`s or `0`s.","solution":"def maxSquareSubGrid(N, G): Returns the size of the maximum square sub-grid that is only composed of 1s. # Create a 2D list to store the size of the largest square sub-grid ending at each cell dp = [[0] * N for _ in range(N)] max_size = 0 # Traverse the grid for i in range(N): for j in range(N): if G[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) return max_size"},{"question":"You are given a grid with n rows and m columns consisting of cells with binary values (0s and 1s). You need to determine the maximum area of a rectangle containing only 1s within this grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 200) — the number of rows and columns of the grid. Each of the next n lines contains exactly m characters, either \'0\' or \'1\', representing the binary values of the grid. Output Print a single integer — the maximum area of a rectangle containing only 1s in the given grid. Examples Input 4 5 10100 10111 11111 10010 Output 6 Input 3 3 111 111 111 Output 9 Input 2 4 0110 0110 Output 4 Note The rectangle in the first example with the maximum area is the one covering grid cells (2,3), (2,4), (3,3), and (3,4) (1-indexed), which has an area of 6.","solution":"def max_rectangle_area(grid): Returns the maximum area of a rectangle containing only 1s in a given binary grid. if not grid: return 0 n = len(grid) m = len(grid[0]) max_area = 0 heights = [0] * m for i in range(n): for j in range(m): if grid[i][j] == \'1\': heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, max_histogram_area(heights)) return max_area def max_histogram_area(heights): Helper function to calculate the maximum rectangular area in a histogram given its heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def find_max_rectangle_area(n, m, grid_lines): grid = [list(line) for line in grid_lines] return max_rectangle_area(grid)"},{"question":"You are given a string containing only lowercase English letters. You want to create a new string by reordering the characters of the original string such that no two adjacent characters in the new string are the same. Determine if such a reordering is possible and return the new string. If it is impossible, return \\"IMPOSSIBLE\\". Constraints: * The input string length is between 1 and 10^5. * All characters in the string are lowercase English letters. Input: Input is given from Standard Input as a single string. Output: Print the reordered string if possible. If no valid reordering exists, print \\"IMPOSSIBLE\\". Examples: Input: aab Output: aba Input: aaab Output: IMPOSSIBLE","solution":"import heapq from collections import Counter def reorganize_string(s): Reorganize the string so that no two adjacent characters are the same. Return the reorganized string if possible, otherwise return \\"IMPOSSIBLE\\". counter = Counter(s) max_heap = [(-cnt, char) for char, cnt in counter.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap or prev_count < 0: if not max_heap: return \\"IMPOSSIBLE\\" count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 return \'\'.join(result)"},{"question":"Given a square grid of size n x n consisting of cells that are either land or water, find the size of the largest island of land cells. An island is made up of connecting land cells vertically or horizontally (not diagonally), and it must be surrounded by water cells or the boundaries of the grid. The size of an island is defined as the number of land cells it contains. Input Multiple datasets are provided, each formatted as follows: 1. An integer n (1 < n ≤ 50), the size of the grid. 2. Followed by n lines each containing n characters, either \'L\' for land or \'W\' for water. A single line containing \'0\' marks the end of the input. Output For each dataset, output a single integer representing the size of the largest island. Example Input 4 LLLL LWWW LLWL WWWW 3 WLW LLW WWW 0 Output 7 3 Explanation: In the first dataset: - There is one large island formed by the top-left corner, merging (0, 0) to (2, 2) and (2, 0) to (2, 1), totaling 7 cells. In the second dataset: - There is one island composed of the cells in the second row, totaling 3 cells. Your task is to implement a program that reads these datasets, determines the size of the largest island in each grid, and outputs the results accordingly.","solution":"def largest_island_size(): def dfs(grid, x, y, visited, n): stack = [(x, y)] size = 0 while stack: cx, cy = stack.pop() if (cx, cy) not in visited: visited.add((cx, cy)) size += 1 # Explore neighbors for nx, ny in [(cx-1, cy), (cx+1, cy), (cx, cy-1), (cx, cy+1)]: if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == \'L\' and (nx, ny) not in visited: stack.append((nx, ny)) return size import sys input = sys.stdin.read data = input().split() index = 0 results = [] while True: n = int(data[index]) index += 1 if n == 0: break grid = [] for _ in range(n): row = data[index] index += 1 grid.append(row) visited = set() max_size = 0 for i in range(n): for j in range(n): if grid[i][j] == \'L\' and (i, j) not in visited: max_size = max(max_size, dfs(grid, i, j, visited, n)) results.append(max_size) for result in results: print(result)"},{"question":"Given a non-negative integer `num`, return the number of steps to reduce it to zero. If the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it. # Function Signature ```python def numberOfSteps(num: int) -> int: ``` # Input - An integer `num` where `0 <= num <= 10^6`. # Output - An integer representing the number of steps to reduce the given number to zero. # Examples Example 1 ```python num = 14 ``` **Output:** ```python 6 ``` **Explanation:** Step 1) 14 is even; divide by 2 and obtain 7. Step 2) 7 is odd; subtract 1 and obtain 6. Step 3) 6 is even; divide by 2 and obtain 3. Step 4) 3 is odd; subtract 1 and obtain 2. Step 5) 2 is even; divide by 2 and obtain 1. Step 6) 1 is odd; subtract 1 and obtain 0. Example 2 ```python num = 8 ``` **Output:** ```python 4 ``` **Explanation:** Step 1) 8 is even; divide by 2 and obtain 4. Step 2) 4 is even; divide by 2 and obtain 2. Step 3) 2 is even; divide by 2 and obtain 1. Step 4) 1 is odd; subtract 1 and obtain 0. Example 3 ```python num = 123 ``` **Output:** ```python 12 ``` **Explanation:** There are 12 steps to reduce 123 to 0 following the given operations. # Constraints - The function should be efficient and complete the task within a reasonable time frame. - Make sure to test your function with edge cases, such as the smallest and largest possible values of `num`.","solution":"def numberOfSteps(num: int) -> int: Returns the number of steps to reduce the given integer num to zero. If the number is even, it is divided by 2. If the number is odd, 1 is subtracted from it. steps = 0 while num > 0: if num % 2 == 0: num //= 2 else: num -= 1 steps += 1 return steps"},{"question":"Chef loves to bake cookies and has recently discovered that he can create interesting patterns using cookie cutters. Chef has an assortment of M different cookie cutters, each represented by a unique integer from 1 to M. He also has a large batch of dough, and he\'s planning to cut out N cookies, where each cookie is made using one of the M cookie cutters. Chef wants to arrange the cut-out cookies on a tray in a line, represented by an array A of length N, where Ai denotes the cookie cutter used for the ith cookie. However, Chef has a little trick up his sleeve. He wants to make the arrangement of cookies appear more pleasing by ensuring there is as much variety as possible. Specifically, Chef wants to minimize the length of the longest contiguous subarray where all cookies are made using the same cookie cutter. Your task is to help Chef find out this minimum possible length of the longest contiguous subarray of identical cookies that can be achieved by rearranging the array A. Input: - The first line contains a single integer T, the number of test cases. - The first line of each test case contains two integers N and M. - The second line of each test case contains N integers representing the array A. Output: For each test case, print the minimum length of the longest contiguous subarray of identical cookies after rearrangement. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ M ≤ 100 - 1 ≤ Ai ≤ M Example: Input: 2 5 3 1 2 3 1 2 6 2 2 1 2 2 1 1 Output: 2 3 Explanation: Test case 1: One optimal arrangement is [1, 2, 3, 1, 2]. In this arrangement, the longest contiguous subarray of identical cookies is of length 1 (no consecutive cookies are the same). Test case 2: Either of the optimal arrangements [2, 1, 2, 1, 2, 1] or [1, 2, 1, 2, 1, 2] will result in a maximum contiguous subarray length of 2.","solution":"def min_length_longest_contiguous_subarray(T, test_cases): Computes the minimal length of the longest contiguous subarray of identical cookies that can be achieved by rearranging the given arrays. Parameters: T: int - number of test cases test_cases: list of tuples - each tuple contains: - N: int - length of the array for each test case - M: int - number of unique cookie cutters - A: list of int - the array of cookie cutters used Returns: List of integers where each integer is the result for the corresponding test case def solution_per_case(N, M, A): # If N is less than or equal to M, the longest contiguous subarray # that can be formed is always of length 1. if N <= M: return 1 # When N > M, the best we can do is to distribute the cookies as evenly as possible. # Calculate the minimum length of the longest contiguous subarray # by distributing N cookies among M types as evenly as possible. base_length = N // M # minimum base length for each type extra_cookies = N % M # how many types will have one extra cookie # The longest contiguous subarray length will be base_length + 1 if the type # is among the extra_cookies, otherwise it will be base_length. return base_length + 1 if extra_cookies > 0 else base_length results = [] for case in test_cases: N, M, A = case results.append(solution_per_case(N, M, A)) return results # Example usage for quick verification: T = 2 test_cases = [ (5, 3, [1, 2, 3, 1, 2]), (6, 2, [2, 1, 2, 2, 1, 1]) ] print(min_length_longest_contiguous_subarray(T, test_cases)) # Output should be [2, 3]"},{"question":"In a small town, there is a popular fruit seller who sells two types of fruits - apples and oranges. He places the fruits in rows, where the first row contains all apples and the second row contains all oranges. However, depending on the season, the price of apples and oranges changes every day. You are given the number of days and the list of prices of apples and oranges for each day. Your task is to determine the maximum possible profit the fruit seller can make by choosing to sell either apples or oranges each day, but he cannot sell both on the same day. Input The input will consist of a single integer `n` (1 ≤ n ≤ 1000), which represents the number of days. This is followed by two lines: - The first line contains `n` integers, where the i-th integer represents the price of apples on the i-th day. - The second line contains `n` integers, where the i-th integer represents the price of oranges on the i-th day. Output Output a single integer — the maximum possible profit the fruit seller can make over the `n` days by choosing to sell either apples or oranges each day. Examples Input 5 5 3 6 7 8 1 6 5 3 9 Output 29 Note For the given example, the fruit seller can achieve maximum profit by choosing: - Day 1: Sell apples, profit = 5 - Day 2: Sell oranges, profit = 6 - Day 3: Sell apples, profit = 6 - Day 4: Sell apples, profit = 7 - Day 5: Sell oranges, profit = 9 Total profit = 5 + 6 + 6 + 7 + 9 = 33","solution":"def max_profit(n, apple_prices, orange_prices): Returns the maximum profit the fruit seller can make over n days by choosing to sell either apples or oranges each day. :param n: Number of days :param apple_prices: A list of integers representing the prices of apples on each day :param orange_prices: A list of integers representing the prices of oranges on each day :return: Maximum possible profit profit = 0 for i in range(n): profit += max(apple_prices[i], orange_prices[i]) return profit"},{"question":"Palindrome Partitioning Problem Given a string s, partition it into as few substrings as possible such that each substring is a palindrome. Return the minimum number of cuts needed for a palindrome partitioning of s. For example, given the string \\"aab\\", the palindrome partitioning [\\"aa\\", \\"b\\"] could be produced using 1 cut. Constraints: * 1 ≤ s.length ≤ 10^3 * s consists of lower-case English letters only. Input Format: The input is in the form of a single line containing the string s. Output Format: Output the minimum number of cuts needed for a palindrome partitioning of s. Sample Input 1: aab Sample Output 1: 1 Sample Input 2: noon Sample Output 2: 0","solution":"def min_cut_palindrome_partition(s): n = len(s) # is_palindrome[i][j] will be True if s[i:j+1] is a palindrome. is_palindrome = [[False] * n for _ in range(n)] for i in range(n): is_palindrome[i][i] = True for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if length == 2: is_palindrome[i][j] = (s[i] == s[j]) else: is_palindrome[i][j] = (s[i] == s[j]) and is_palindrome[i + 1][j - 1] cuts = [0] * n for i in range(n): if is_palindrome[0][i]: cuts[i] = 0 else: cuts[i] = float(\'inf\') for j in range(i): if is_palindrome[j + 1][i]: cuts[i] = min(cuts[i], cuts[j] + 1) return cuts[-1]"},{"question":"There are N students standing in a line, and each student has a height denoted by an integer in a list. Your task is to determine if the heights of the students form a strictly increasing sequence or not. Constraints * N is an integer between 1 and 100 (inclusive). * Each height is an integer between 1 and 200 (inclusive). Input Input is given from Standard Input in the following format: N h1 h2 h3 ... hN Where N is the number of students and h1, h2, ..., hN are the heights of the students. Output Print \\"YES\\" if the heights form a strictly increasing sequence, otherwise print \\"NO\\". Examples Input 5 150 160 170 180 190 Output YES Input 4 150 160 160 180 Output NO","solution":"def are_heights_strictly_increasing(n, heights): Determines if the given list of heights is strictly increasing. Parameters: n (int): Number of students (length of the heights list) heights (list): List of integers representing the heights of students Returns: str: \\"YES\\" if heights are strictly increasing, otherwise \\"NO\\" for i in range(1, n): if heights[i] <= heights[i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"Problem Statement: Alice is organizing a large marathon event in her city and needs your help in determining the shortest path for runners between various checkpoints. She will provide you with a list of road segments connecting checkpoints and wants to know the shortest distance between two given checkpoints for a number of queries. The roads are bidirectional and have a specific length. Input format: First line contains an integer t, the number of test cases. For each test case: - First line has two space-separated integers n and m, denoting the number of checkpoints and the number of roads, respectively. - The next m lines each contain three space-separated integers u, v, and l, representing a road segment between checkpoints u and v with length l. - Next line contains an integer q, the number of queries. - The next q lines each contain two space-separated integers a and b, representing a query for the shortest distance between checkpoints a and b. Constraints: 1 ≤ t ≤ 3 1 ≤ n ≤ 10^3 0 ≤ m ≤ (n(n-1))/2 1 ≤ u, v, a, b ≤ n 1 ≤ l ≤ 10^4 1 ≤ q ≤ 10^3 SAMPLE INPUT 1 5 6 1 2 10 1 3 20 2 3 5 2 4 10 3 4 20 4 5 5 3 1 5 2 3 1 4 SAMPLE OUTPUT 30 5 20 Explanation For the first test case: - The checkpoints and road segments form a graph. To find the shortest distance between checkpoints 1 and 5, we can follow the path 1 -> 2 -> 4 -> 5 with a total distance of 10 + 10 + 5 = 25. - For the second query, the shortest path between checkpoints 2 and 3 is directly 5 units. - For the third query, the shortest path from checkpoints 1 to 4 is the path 1 -> 2 -> 4 with a total distance of 10 + 10 = 20 units.","solution":"import heapq import sys def dijkstra(n, adjacency_list, start): distances = {node: float(\'inf\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in adjacency_list[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def process_queries(n, adjacency_list, queries): results = [] for query in queries: a, b = query distances_from_a = dijkstra(n, adjacency_list, a) results.append(distances_from_a[b]) return results def solve_marathon_problem(test_cases): results = [] for case in test_cases: n, m, roads, q, queries = case adjacency_list = {i: [] for i in range(1, n + 1)} for u, v, l in roads: adjacency_list[u].append((v, l)) adjacency_list[v].append((u, l)) case_results = process_queries(n, adjacency_list, queries) results.extend(case_results) return results"},{"question":"Alex is working with a mysterious data management library that supports two types of operations on an array `arr` of integers of size `n` (0-indexed): 1. Alex can update the value at any given index. 2. Alex can query the sum of values within a given subarray. Your task is to help Alex by implementing these operations efficiently. # Input The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 2×10^5) — the number of elements in the array and the number of operations respectively. The second line contains `n` space-separated integers which represent the initial state of the array `arr`. Each of the next `q` lines represents an operation and is in one of the following two formats: - `1 i x` represents an update operation where Alex replaces the value at index `i` (0 ≤ i < n) with `x` (−10^9 ≤ x ≤ 10^9). - `2 l r` represents a query operation where Alex needs the sum of values from index `l` to index `r` (0 ≤ l ≤ r < n). # Output For each query operation `2 l r`, output the sum of the subarray from index `l` to `r` inclusive on a new line. # Example Input: ``` 5 5 1 2 3 4 5 2 0 2 1 1 10 2 0 2 2 1 3 1 3 7 ``` Output: ``` 6 14 20 ``` In the example above, the initial array is `[1, 2, 3, 4, 5]`. The operations are performed as follows: 1. **Query:** Sum from index `0` to `2` = `1 + 2 + 3 = 6`. 2. **Update:** Change value at index `1` to `10`, resulting array `[1, 10, 3, 4, 5]`. 3. **Query:** Sum from index `0` to `2` = `1 + 10 + 3 = 14`. 4. **Query:** Sum from index `1` to `3` = `10 + 3 + 4 = 17`. 5. **Update:** Change value at index `3` to `7`, resulting array `[1, 10, 3, 7, 5]`.","solution":"class ArrayManager: def __init__(self, arr): self.arr = arr self.n = len(arr) self.tree = [0] * (self.n + 1) self.build() def build(self): for i in range(self.n): self._update(i, self.arr[i]) def _update(self, idx, delta): i = idx + 1 while i <= self.n: self.tree[i] += delta i += i & -i def update(self, idx, new_value): delta = new_value - self.arr[idx] self.arr[idx] = new_value self._update(idx, delta) def prefix_sum(self, idx): sum_ = 0 i = idx + 1 while i > 0: sum_ += self.tree[i] i -= i & -i return sum_ def range_sum(self, l, r): return self.prefix_sum(r) - self.prefix_sum(l - 1) def process_operations(n, q, initial_array, operations): array_manager = ArrayManager(initial_array) result = [] for op in operations: if op[0] == 1: idx, new_value = op[1], op[2] array_manager.update(idx, new_value) elif op[0] == 2: l, r = op[1], op[2] result.append(array_manager.range_sum(l, r)) return result"},{"question":"Jane is fascinated by prime numbers. She defines a sequence of prime numbers as follows: - The first prime number is 2. - Every subsequent term in the sequence is the smallest prime number greater than the previous term. Jane started to challenge her friends to solve the following problem: Given an integer n, find the nth prime number in the sequence. Input The first line contains an integer t (1 ≤ t ≤ 104) — the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 105) indicating that Jane wants to know the nth prime number. Output For each test case, output the nth prime number. Examples Input 3 1 2 10 Output 2 3 29 Note In the first sample, the first prime number is 2. In the second sample, the second prime number is 3. In the third sample, the 10th prime number is 29.","solution":"def sieve_of_eratosthenes(limit): is_prime = [True] * (limit + 1) is_prime[0], is_prime[1] = False, False for start in range(2, int(limit**0.5) + 1): if is_prime[start]: for multiples in range(start*start, limit + 1, start): is_prime[multiples] = False primes = [] for num in range(limit + 1): if is_prime[num]: primes.append(num) return primes def nth_prime_numbers(t, ns): max_n = max(ns) limit = 1299709 # Since the 100001st prime is 1299709 primes = sieve_of_eratosthenes(limit) results = [] for n in ns: results.append(primes[n - 1]) return results"},{"question":"Leo is learning about prime numbers and he finds it fascinating. He wants to write a program that takes an integer n (1 ≤ n ≤ 10^6) and determines if it is a prime number. If the number is prime, the program should print \\"Prime\\", otherwise it should print \\"Not Prime\\". A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. Input The first line of input contains a single integer n (1 ≤ n ≤ 10^6). Output If the number is prime, print \\"Prime\\", otherwise print \\"Not Prime\\". Examples Input 29 Output Prime Input 100 Output Not Prime Input 1 Output Not Prime Input 97 Output Prime","solution":"def is_prime(n): Determines if n is a prime number. If n is a prime number, return \\"Prime\\". Otherwise, return \\"Not Prime\\". if n <= 1: return \\"Not Prime\\" if n == 2: return \\"Prime\\" if n % 2 == 0: return \\"Not Prime\\" limit = int(n**0.5) + 1 for i in range(3, limit, 2): if n % i == 0: return \\"Not Prime\\" return \\"Prime\\""},{"question":"Petya has recently bought a new cactus plant and wants to ensure it gets the right amount of sunlight each day. To do this, he needs to rotate the plant so that its leaves\' distribution of light is balanced. The plant has n leaves arranged in a circular pattern, each having a unique light requirement that must be met exactly. To achieve the proper light balance, Petya can rotate the plant clockwise around its center. Each leaf should get the exact amount of light it requires, and he can rotate the plant any number of times. However, he wants to minimize the number of rotations to achieve this goal. Input: - The first line contains an integer k (1 ≤ k ≤ 10^4) — the number of test cases. - Each test case consists of two lines: - The first line of each test case contains an integer n (3 ≤ n ≤ 2 × 10^5) — the number of leaves on the cactus plant. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the light requirements for each leaf, listed in the order they appear. Output: - For each test case, output a single line containing the minimum number of rotations Petya needs to make to balance the light requirements of all leaves. Example Input: 5 3 5 3 2 4 4 4 4 4 5 3 1 2 4 5 3 2 1 3 3 1 5 3 Output: 0 0 2 1 1 Explanation: - In the first test case, rotating the leaves twice will make the light requirements 2 5 3, balancing the plant with minimal rotations. - In the second test case, all leaves already have the same requirement, so no rotation is needed. - In the third test case, rotating the leaves twice will make the light requirements 2 3 1 2 4, balancing the plant. - In the fourth test case, rotating the leaves once will make the light requirements 1 3 2. - In the fifth test case, rotating the leaves once will make the light requirements 5 3 1.","solution":"def min_rotations(test_cases): results = [] for n, arr in test_cases: min_val = min(arr) min_index = arr.index(min_val) results.append(min_index) return results"},{"question":"Nina is an avid puzzle lover. She recently came across a type of puzzle involving square grids filled with numbers. Each puzzle consists of a grid of size N x N, where each cell contains a single integer between -1000 and 1000. The grid can be rotated 90 degrees clockwise. Nina\'s goal is to write a program that, given a grid, generates a new grid that represents the original grid rotated 90 degrees clockwise. A 90 degrees clockwise rotation means that any element at position (i, j) in the original grid will move to position (j, N-1-i) in the rotated grid. Write a program that reads the size of the grid (N) and the grid itself, performs the rotation, and then outputs the rotated grid. Input The first line contains an integer N, the size of the grid (2 ≤ N ≤ 1000). The next N lines each contain N integers separated by spaces, representing the grid. Output Output the N x N grid, rotated 90 degrees clockwise. Example Input 3 1 2 3 4 5 6 7 8 9 Output 7 4 1 8 5 2 9 6 3","solution":"def rotate_grid_90_degrees_clockwise(N, grid): Rotates a given N x N grid 90 degrees clockwise. Parameters: N (int): Size of the grid grid (list of list of int): The grid to be rotated Returns: list of list of int: The rotated grid # Create an empty N x N grid for the rotated version rotated_grid = [[0] * N for _ in range(N)] # Perform the rotation for i in range(N): for j in range(N): rotated_grid[j][N-1-i] = grid[i][j] return rotated_grid"},{"question":"Ryan is fascinated by grids and paths. He has an n x n grid, and each cell of this grid contains a number representing the cost of stepping on that cell. Ryan wants to start from the top-left cell (1,1) and move to the bottom-right cell (n,n). He can only move right or down from any cell at any time. Ryan wishes to find the minimum cost required to reach the bottom-right cell from the top-left cell. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the size of the grid. The next n lines contain n space-separated integers each, where the j-th integer on the i-th line represents the cost of cell (i, j) (1 ≤ cost ≤ 100). Output Print a single integer — the minimum cost required to move from the top-left cell to the bottom-right cell. Examples Input 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 1 2 1 1 Output 3 Note In the first example, the path that yields the minimum cost is 1→3→1→1→1→1, resulting in a total cost of 7. In the second example, the path that yields the minimum cost is 1→1→1, resulting in a total cost of 3.","solution":"def min_path_cost(grid): n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[0][i] = dp[0][i-1] + grid[0][i] dp[i][0] = dp[i-1][0] + grid[i][0] for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1] def process_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) grid = [] index = 1 for i in range(n): grid.append(list(map(int, data[index:index + n]))) index += n return grid"},{"question":"You are given two sorted arrays of integers, each with n elements. Your task is to write a program that finds the median of the combined sorted array formed by merging these two arrays. The solution should run in O(log n) time complexity. Input The input consists of three lines: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in each array. - The second line contains n integers, the elements of the first sorted array. - The third line contains n integers, the elements of the second sorted array. Output Print the median of the combined sorted array. Example Input 5 1 3 8 9 15 7 11 18 19 21 Output 10 Note In this example, the combined sorted array will be [1, 3, 7, 8, 9, 11, 15, 18, 19, 21], and the median of this array is 10.","solution":"def find_median_sorted_arrays(arr1, arr2): Finds the median of two sorted arrays in O(log n) time complexity. def find_kth_element(arr1, arr2, k): len1, len2 = len(arr1), len(arr2) index1, index2 = 0, 0 while True: if index1 == len1: return arr2[index2 + k - 1] if index2 == len2: return arr1[index1 + k - 1] if k == 1: return min(arr1[index1], arr2[index2]) new_index1 = min(index1 + k // 2 - 1, len1 - 1) new_index2 = min(index2 + k // 2 - 1, len2 - 1) pivot1, pivot2 = arr1[new_index1], arr2[new_index2] if pivot1 <= pivot2: k -= (new_index1 - index1 + 1) index1 = new_index1 + 1 else: k -= (new_index2 - index2 + 1) index2 = new_index2 + 1 n = len(arr1) total_length = 2 * n if total_length % 2 == 1: return find_kth_element(arr1, arr2, total_length // 2 + 1) else: return (find_kth_element(arr1, arr2, total_length // 2) + find_kth_element(arr1, arr2, total_length // 2 + 1)) / 2 # Usage n = 5 array1 = [1, 3, 8, 9, 15] array2 = [7, 11, 18, 19, 21] print(find_median_sorted_arrays(array1, array2))"},{"question":"In a city, there are n buildings numbered from 1 to n. Each building i has an altitude a_i. In this city, there is a common event called \\"Sunlight Festival\\". During the festival, a person standing on the ground will see the top of a building if and only if it is not entirely shadowed by another taller building standing before it in the sequence. Your task is to determine how many buildings the person will be able to see the top of. Input The first line contains an integer n (1 ≤ n ≤ 100) - the number of buildings. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4) - the altitudes of the buildings. Output Print an integer representing the number of buildings whose tops are visible during the Sunlight Festival. Examples Input 6 4 2 3 1 5 6 Output 3 Input 5 1 2 3 2 1 Output 3 Note In the first sample, the first building with altitude 4 is visible. The second building with altitude 2 is shadowed by the first one and hence not visible. The third building with altitude 3 is shadowed by the first one and hence not visible. The fourth building with altitude 1 is shadowed by the first three buildings. The fifth building with altitude 5 is visible as it is taller than the previous buildings. The sixth building with altitude 6 is visible as it is taller than the previous buildings. Therefore, 3 buildings are visible. In the second sample, the first building with altitude 1 is visible. The second building with altitude 2 is visible since it is taller than the first one. The third building with altitude 3 is visible since it is taller than the second one. The fourth building with altitude 2 is not visible as it is shadowed by the third building. The fifth building with altitude 1 is not visible as it is shadowed by the third building. Therefore, 3 buildings are visible.","solution":"def count_visible_buildings(n, altitudes): Count the number of buildings visible during the Sunlight Festival. Args: n : int : number of buildings altitudes : list of int : altitudes of the buildings Returns: int : number of buildings visible # Initialize the count of visible buildings visible_count = 0 # Initialize the highest building seen so far max_height = 0 # Iterate through each building for altitude in altitudes: if altitude > max_height: visible_count += 1 max_height = altitude return visible_count"},{"question":"A school is organizing a team-building exercise that involves solving puzzles. Each team has several members, and each member\'s skill level at solving puzzles is provided. The team is successful if the sum of skill levels of all team members is greater than or equal to a given threshold value. If there are multiple teams, the school wants to find the team with the highest total skill level. You are given a list of teams, each team containing a list of member names and their respective skill levels. Determine the name of the team with the highest total skill level and whether that team is successful or not based on the given threshold value. If multiple teams have the same highest total skill level, consider the team which appears first in the input list to be the winner. Input The first line of the input contains two integers T (the number of teams) and K (the threshold value) respectively. Each of the following T blocks contains: - an integer M (the number of members in the team), - followed by M lines, each containing a member\'s name and their skill level (a positive integer). Output Output should consist of two lines: - The name of the team with the highest total skill level, - \\"Successful\\" if the total skill level of this team is greater than or equal to the threshold value, otherwise \\"Unsuccessful\\". Constraints 1 ≤ T ≤ 100 1 ≤ M ≤ 50 1 ≤ skill level ≤ 100 Names are strings of up to 20 alphabetical characters. Example 1 Input: 3 150 3 Alice 50 Bob 60 Charlie 40 2 David 80 Eva 90 4 Frank 30 Grace 40 Heidi 20 Ivan 10 Output: Team2 Successful Example 2 Input: 2 120 3 Alice 40 Bob 50 Charlie 30 3 David 60 Eva 50 Frank 40 Output: Team2 Successful Explanation Example 1: The first team has a total skill level of 150, the second team has a total skill level of 170, and the third team has a total skill level of 100. The second team has the highest total skill level of 170, which is greater than the threshold value of 150, so it is considered \\"Successful\\". Example 2: The first team has a total skill level of 120, and the second team has a total skill level of 150. The second team has the highest total skill level of 150, which is greater than the threshold value of 120, so it is considered \\"Successful\\".","solution":"def find_best_team(teams, threshold): total_skill_levels = [] for team in teams: total_skill_levels.append(sum(skill for _, skill in team)) max_skill_level = max(total_skill_levels) best_team_index = total_skill_levels.index(max_skill_level) best_team_name = f\\"Team{best_team_index + 1}\\" if max_skill_level >= threshold: success_status = \\"Successful\\" else: success_status = \\"Unsuccessful\\" return best_team_name, success_status"},{"question":"A university\'s enrollment system needs to assign students to classes based on their preferences and the class capacity. Each student can list multiple preferred classes, and classes have a maximum number of students they can accommodate. You need to find an assignment of students to classes such that the maximum number of students are assigned and every student is assigned to at most one class from their list of preferences. Input The first line contains two integers n (1 ≤ n ≤ 1000) — the number of students, and m (1 ≤ m ≤ 500) — the number of classes. Each of the next n lines contains a list of integers where the first integer k (1 ≤ k ≤ m) represents the number of classes the student prefers, followed by k integers which denote the 1-based indices of the preferred classes. The following m lines each contain a single integer c (1 ≤ c ≤ 100) — the capacity of each class. Output Print a single integer — the maximum number of students that can be assigned to their preferred classes without exceeding the class capacities. Example Input 3 3 2 1 2 1 3 2 2 3 2 1 1 Output 3 Explanation In this example, all students can be assigned to one of their preferred classes: - Student 1 can be assigned to Class 1 or Class 2. - Student 2 can only be assigned to Class 3. - Student 3 can be assigned to Class 2 or Class 3. The class capacities are met, and all students are assigned to one of their preferences. Consider the edge cases such as when no student\'s preferences can be satisfied due to capacity constraints or when multiple assignment configurations might yield the same maximum number of assigned students.","solution":"def max_students_assigned(n, m, preferences, capacities): Find the maximum number of students that can be assigned to their preferred classes without exceeding class capacities. :param n: Number of students :param m: Number of classes :param preferences: List of lists where each sublist contains the class preferences of a student :param capacities: List containing capacities of each class :return: Maximum number of students assigned from collections import deque, defaultdict # Create graph source = 0 sink = n + m + 1 graph = defaultdict(list) capacity = defaultdict(int) for student in range(1, n + 1): graph[source].append(student) graph[student].append(source) capacity[(source, student)] = 1 for class_idx in range(1, m + 1): class_node = n + class_idx graph[class_node].append(sink) graph[sink].append(class_node) capacity[(class_node, sink)] = capacities[class_idx - 1] for student_idx, prefs in enumerate(preferences, 1): for cls in prefs: class_node = n + cls graph[student_idx].append(class_node) graph[class_node].append(student_idx) capacity[(student_idx, class_node)] = 1 def bfs(): parent = {source: None} queue = deque([source]) while queue: node = queue.popleft() if node == sink: return parent for neighbor in graph[node]: if neighbor not in parent and capacity[(node, neighbor)] > 0: parent[neighbor] = node queue.append(neighbor) return None def max_flow(): flow = 0 while True: parent = bfs() if not parent: break node = sink min_capacity = float(\'inf\') while node != source: prev = parent[node] min_capacity = min(min_capacity, capacity[(prev, node)]) node = prev node = sink while node != source: prev = parent[node] capacity[(prev, node)] -= min_capacity capacity[(node, prev)] += min_capacity node = prev flow += min_capacity return flow return max_flow()"},{"question":"A factory operates a system of interconnected machines, where each machine can be either active or inactive. The factory\'s operations are defined by a system of directed edges (connections) between machines. Each machine has a specific active period during which it stays active once switched on, after which it automatically turns off. The goal is to assess the total duration the factory can remain operational without manually turning any machine on again. Initially, the state of each machine and the active period for each machine is given. The process of turning off a machine is irreversible. # Input The first line contains a single integer `n` (1 ≤ n ≤ 100000), the number of machines. Each of the next `n` lines contains three space-separated integers `x`, `y`, and `t`, representing that: - The machine `x` has `y` outgoing connections. - The machine `x` becomes inactive after `t` seconds. Each machine with outgoing connections has `y` lines that follow, each containing a single integer representing the machine index it connects to. # Output Print a single integer representing the maximum duration (in seconds) the factory can remain operational with the given configuration. # Examples Input ``` 3 1 2 3 2 2 5 3 0 4 2 3 3 4 ``` Output ``` 5 ``` Input ``` 4 1 1 10 2 1 15 3 1 20 4 1 25 2 3 4 5 ``` Output ``` 25 ``` # Note In the first example, the operational duration is maximized when machine 1 turns off after 5 seconds due to the chain of connections from machine 1 to machine 2, which lasts for 5 seconds. The longest any machine remains active is machine 2, which has a period of 5 seconds. In the second example, the factory remains operational for 25 seconds as the machine with the longest active period lasts for 25 seconds.","solution":"from collections import deque, defaultdict def max_operational_duration(n, machine_data): # Create a dictionary to store the machine information machines = {} graph = defaultdict(list) for machine_info in machine_data: machine_id = machine_info[0] outgoing_count = machine_info[1] active_period = machine_info[2] machines[machine_id] = active_period for i in range(outgoing_count): connection = machine_info[3 + i] graph[machine_id].append(connection) # Calculate the operational duration for each machine def bfs(start): max_time = 0 queue = deque([(start, machines[start])]) visited = set() while queue: machine, time_remaining = queue.popleft() visited.add(machine) max_time = max(max_time, time_remaining) for neighbor in graph[machine]: if neighbor not in visited: queue.append((neighbor, time_remaining)) return max_time # Find the maximum operational duration from any starting machine max_duration = 0 for machine in range(1, n + 1): max_duration = max(max_duration, bfs(machine)) return max_duration # The below implementation reads from the stdin and organizes it for the function def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) pointer = 1 machine_data = [] while pointer < len(data): machine_id = int(data[pointer]) outgoing_count = int(data[pointer + 1]) active_period = int(data[pointer + 2]) connections = [int(data[pointer + 3 + i]) for i in range(outgoing_count)] machine_data.append([machine_id, outgoing_count, active_period] + connections) pointer += 3 + outgoing_count print(max_operational_duration(n, machine_data))"},{"question":"A programmer is practicing coding problems and encounters a task involving permutations. Given two different characters, `a` and `b`, and an integer `n`, the task is to find the number of distinct permutations of length `n` that contain exactly the same number of `a`s and `b`s with any remaining characters being `\'*\'`. The characters `\'*\'` can appear at any position. Constraints: - 1 ≤ n ≤ 1000 - The characters `a` and `b` are lowercase English letters. - `a` ≠ `b` The output should be the number of distinct permutations modulo 1000000007 (10^9 + 7). Input The first line contains an integer `n` — the length of the permutation. The second line contains two lowercase English letters `a` and `b`. Output In a single line, print the number of distinct permutations of length `n` with an equal number of `a`s and `b`s, modulo 1000000007 (10^9 + 7). Examples Input 4 x y Output 6 Input 5 h p Output 0 Note In the first example, we need permutations of length 4 with exactly 2 `x`s and 2 `y`s. There are 6 such permutations: `xxyy`, `xyxy`, `xyyx`, `yxyx`, `yxxy`, `yyxx`. In the second example, it is impossible to have an equal number of `h`s and `p`s in a string of length 5, so the output is 0.","solution":"def number_of_permutations(n, a, b): MOD = 1000000007 if n % 2 != 0: return 0 half_n = n // 2 from math import comb return comb(n, half_n) % MOD"},{"question":"You are given a list of integers `arr` of length `n` and an integer `k`. You have to determine if there exists any pair of elements in the array whose sum is exactly `k`. Input: First line of input will contain two integers, `n` and `k`. Second line of input will contain `n` space-separated integers representing the list `arr`. Output: Print \\"YES\\" if there is a pair whose sum is exactly `k`, otherwise, print \\"NO\\". Constraints: 1 ≤ n ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 -10^9 ≤ k ≤ 10^9 SAMPLE INPUT 5 9 2 7 11 15 3 SAMPLE OUTPUT YES Explanation In the given input, the pair (7, 2) sums to 9, hence the output is \\"YES\\".","solution":"def has_pair_with_sum(arr, k): Returns \\"YES\\" if there exists a pair of elements in the array whose sum is exactly k, otherwise returns \\"NO\\". seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Create an algorithm that solves the following problem: You are given an array of N integers, each representing the height of a building. A view from the left can be computed by inspecting the buildings from left to right, and recording the first building that is not blocked by any taller or equal building before it. Write a function that returns an array of the same length where each element is replaced by the height of the first unblocked building to its left, and if there is no such building, the element should be -1. # Input The input consists of: - An integer N (1 ≤ N ≤ 100,000) — the number of buildings. - An array of N integers h[1], h[2], ..., h[N] (1 ≤ h[i] ≤ 10,000) — the heights of the buildings. # Output Output an array of N integers where each element is replaced by the height of the first unblocked building to its left, or -1 if no such building exists. # Example **Input:** ``` 8 3 7 8 3 6 1 5 8 ``` **Output:** ``` -1 -1 -1 8 8 6 6 -1 ``` # Explanation: - For the first building, there is no building to the left, hence -1. - For the second building, there is no taller building to its left, hence -1. - For the third building, there is no taller building to its left, hence -1. - For the fourth building, the building of height 8 is the first unblocked building to its left. - For the fifth building, the building of height 8 is the first unblocked building to its left. - For the sixth building, the building of height 6 is the first unblocked building to its left. - For the seventh building, the building of height 6 is the first unblocked building to its left. - For the eighth building, there is no taller building to its left, hence -1. # Constraints: - Time complexity should be O(N).","solution":"def first_unblocked_building(heights): Return an array where each element is replaced by the height of the first unblocked building to its left, or -1 if no such building exists. n = len(heights) result = [-1] * n stack = [] for i in range(n): while stack and stack[-1] <= heights[i]: stack.pop() if stack: result[i] = stack[-1] stack.append(heights[i]) return result"},{"question":"Sam is a tech enthusiast who loves exploring new gadgets and accessories. He has a collection of n gadgets and he wants to find out which gadgets are classified as premium. According to the tech community guidelines, a gadget is considered premium if its price is more than 300. Sam has created a list of gadgets with their respective names and prices. He wants to filter out all the premium gadgets from this list. Can you help him write a program that reads the list of gadgets and outputs the names of the premium gadgets? # Input The first line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of gadgets Sam has in his collection. The next n lines describe the gadgets: the i-th line contains a gadgetNamei and an integer pricei (0 ≤ pricei ≤ 10000) — the gadget\'s name and its price respectively. Each gadget name is a non-empty string consisting of no more than 15 characters, which might include lowercase and uppercase English letters, digits, spaces, underscores, and hyphens. # Output Print all the names of premium gadgets, each on a new line. If there are no premium gadgets, print \\"NO PREMIUM GADGETS\\". # Examples Input ``` 5 Smartphone-X 320 LaptopPro 450 Earbuds 200 SmartWatch 280 Camera-HD 700 ``` Output ``` Smartphone-X LaptopPro Camera-HD ``` Input ``` 4 USB-Cable 10 Mousepad 20 Battery 100 Notebook 150 ``` Output ``` NO PREMIUM GADGETS ```","solution":"def find_premium_gadgets(gadgets): Returns a list of names of premium gadgets costing more than 300. If no gadgets are premium, returns [\\"NO PREMIUM GADGETS\\"]. premium_gadgets = [name for name, price in gadgets if price > 300] return premium_gadgets if premium_gadgets else [\\"NO PREMIUM GADGETS\\"] # Example usage # n = int(input()) # gadgets = [input().split(maxsplit=1) for _ in range(n)] # gadgets = [(name, int(price)) for name, price in gadgets] # result = find_premium_gadgets(gadgets) # This should be your list of premium gadgets names # for gadget in result: # print(gadget)"},{"question":"You are given a list of integers representing the heights of students in a line. The teacher wants to rearrange the students so that the absolute difference between the height of any two adjacent students is always less than or equal to 1. Your task is to help the teacher determine if it is possible to reorder the students in this way. Input The first line contains a single integer n (2 ≤ n ≤ 100) — the number of students. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 100) — the heights of the students. Output Print \\"YES\\" (without quotes) if it is possible to rearrange the students as required, otherwise print \\"NO\\". Examples Input 4 3 2 2 1 Output YES Input 3 3 1 4 Output NO Note In the first example, the students can be reordered in the sequence [1, 2, 2, 3] where the difference between any two adjacent students\' heights is at most 1. In the second example, no such ordering exists as there is always at least one pair of adjacent students whose height difference is greater than 1.","solution":"def can_reorder_students(n, heights): Determines if it is possible to reorder students such that the absolute difference between the height of any two adjacent students is always less than or equal to 1. :param n: int - number of students :param heights: list of int - heights of the students :return: str - \\"YES\\" if possible to reorder, otherwise \\"NO\\" heights.sort() for i in range(1, n): if abs(heights[i] - heights[i - 1]) > 1: return \\"NO\\" return \\"YES\\""},{"question":"Kamya has recently started learning programming and wants to practice by solving a unique problem. She has a grid with M rows and N columns filled with non-negative integers. Each cell in the grid represents a certain number of gold coins. Kamya starts her journey from the top-left cell (1,1) and wants to collect coins by moving only right or down at each step until she reaches the bottom-right cell (M,N). Kamya wants to know the maximum number of coins she can collect if she always follows a path from (1,1) to (M,N). Your task is to write a program that determines the maximum number of coins Kamya can collect. Input The first line of input contains two integers M and N (1 ≤ M, N ≤ 100) — the number of rows and columns in the grid. Each of the next M lines contains N non-negative integers separated by spaces which represent the number of coins in each cell (0 ≤ coins ≤ 100). Output Print a single integer — the maximum number of coins Kamya can collect. Examples Input 3 4 0 3 1 1 2 0 0 4 1 5 3 1 Output 12 Input 2 2 1 2 1 3 Output 6 Note In the first example, Kamya\'s optimal path and collection of coins could be: * Start at (1,1) with 0 coins. * Move to (1,2) collecting 3 coins (total = 3). * Move to (1,3) collecting 1 coin (total = 4). * Move to (1,4) collecting 1 coin (total = 5). * Move to (2,4) collecting 4 coins (total = 9). * Move to (3,4) collecting 1 coin (total = 10). * Move to (3,3) collecting 3 coins (total = 13). * Move to (3,2) collecting 5 coins (total = 18 WRO). * Move to (3,1) collecting 1 coin (total = 13). The proper explanation for the output in the two examples should be: In the first example: Kamya\'s optimal path could be: * (1,1) → (1,2) → (1,3) → (1,4) → (2,4) → (3,4) * Total collecting 3 + 1 + 1 + 4 + 1 = 10 coins. In the second example: Kamya\'s optimal path could be: * (1,1) → (1,2) → (2,2) * Total collecting 1 + 2 + 3 = 6 coins.","solution":"def max_coins(M, N, grid): Returns the maximum number of coins Kamya can collect by moving only right or down from top-left to bottom-right. # Initialize a DP table with the same dimensions as the grid dp = [[0] * N for _ in range(M)] # Set the initial cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, N): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from the above) for i in range(1, M): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right cell contains the max number of coins collected return dp[M - 1][N - 1]"},{"question":"Given a rectangular grid with dimensions R rows and C columns, your task is to find the number of unique paths from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. Input Format: The first line contains a single integer T (1 ≤ T ≤ 10), indicating the number of test cases. Each test case consists of a single line with two integers R (1 ≤ R ≤ 100) and C (1 ≤ C ≤ 100), representing the number of rows and columns of the grid respectively. Output Format: For each test case, output a single integer representing the number of unique paths from the top-left corner to the bottom-right corner of the grid. SAMPLE INPUT 3 2 2 3 2 3 3 SAMPLE OUTPUT 2 3 6","solution":"import math def unique_paths(R, C): Function to calculate the number of unique paths from top-left to bottom-right in a grid with R rows and C columns. # Use combination formula (R + C - 2) choose (R - 1) return math.comb(R + C - 2, R - 1) def process_input_cases(input_string): Process the input string and extracts the number of test cases and each test case. lines = input_string.strip().split(\'n\') T = int(lines[0]) results = [] for i in range(1, T + 1): R, C = map(int, lines[i].split()) results.append(unique_paths(R, C)) return results"},{"question":"Mike is tasked with organizing several containers in a factory. Each container has a certain weight and a specific color. Mike needs to arrange the containers such that all containers of the same color are grouped together, and within each color group, they are arranged in ascending order of their weights. To help Mike with his task, write a function that sorts the containers first by their color and then by their weight, ensuring the order is preserved as required. The input will consist of multiple test cases. Each test case will have a list of container descriptions, where each description consists of the weight of the container followed by its color. INPUT: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of containers. - The next N lines each contain an integer W (the weight of the container) followed by a string C (the color of the container). OUTPUT: For each test case, output the sorted list of containers. Each container should be represented by its weight and color on a new line. CONSTRAINTS: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ W ≤ 1000 1 ≤ |C| ≤ 10 SAMPLE INPUT: 2 5 10 red 5 blue 7 red 3 blue 8 blue 4 1 green 2 green 1 blue 2 blue SAMPLE OUTPUT: 5 blue 8 blue 3 blue 7 red 10 red 1 blue 2 blue 1 green 2 green","solution":"def sort_containers(test_cases): results = [] for containers in test_cases: sorted_containers = sorted(containers, key=lambda x: (x[1], x[0])) results.append(sorted_containers) return results def parse_input(input_data): lines = input_data.strip().split(\\"n\\") num_test_cases = int(lines[0]) index = 1 test_cases = [] for _ in range(num_test_cases): num_containers = int(lines[index]) containers = [] for j in range(index + 1, index + 1 + num_containers): weight, color = lines[j].split() containers.append((int(weight), color)) test_cases.append(containers) index += num_containers + 1 return test_cases def format_output(sorted_containers): output = [] for containers in sorted_containers: for container in containers: output.append(f\\"{container[0]} {container[1]}\\") return \\"n\\".join(output)"},{"question":"Alice is planning a hiking trip and wants to select her hiking routes carefully. She has a list of hiking routes with their associated difficulty levels. Each route has a difficulty level between 1 and 100 inclusive. Alice is interested in finding out if it\'s possible to partition the list of hiking routes into exactly two non-empty subsets such that the total difficulty level of the routes in each subset is the same. Write a function to determine if Alice can partition her list of hiking routes into two subsets of equal difficulty. Input: The first line contains a single integer N, the number of hiking routes. The second line contains N integers, each representing the difficulty level of a hiking route. Output: Print \\"YES\\" if it\'s possible to partition the list into two subsets with equal difficulty levels. Print \\"NO\\" otherwise. (Quotes for clarity) Constraints: 1 ≤ N ≤ 100 1 ≤ difficulty level of each route ≤ 100 Example: Input: 4 4 1 2 3 Output: YES Explanation: The list can be partitioned into two subsets {4, 1} and {2, 3} with equal difficulty levels (5).","solution":"def can_partition_to_equal_subsets(n, difficulties): total_sum = sum(difficulties) # If total sum is odd, we can\'t partition it into two equal subsets if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 # Initialize a boolean dp array dp = [False] * (target + 1) dp[0] = True # Process each difficulty for difficulty in difficulties: for j in range(target, difficulty - 1, -1): if dp[j - difficulty]: dp[j] = True return \\"YES\\" if dp[target] else \\"NO\\" # Example Usage # print(can_partition_to_equal_subsets(4, [4, 1, 2, 3])) # Expected output: YES"},{"question":"You are given two arrays, A and B, each containing n integers and indexed from 0 to n-1. Your task is to perform a sequence of the following operations: * update(i, x): Update the value at index i in array A to x. * multiply(i, y): Multiply the value at index i in array A by y. * sum(l, r): Calculate the sum of elements in array A from index l to r inclusive and print it. * swap(x, y): Swap the values at index x in array A and index y in array B. Constraints: * 1 leq n leq 100,000 * 1 leq q leq 100,000 * 1 leq i, l, r, x, y leq n, l leq r * 0 leq A[i], B[i], x, y leq 1,000,000 Input The input is given in the following format: n A_0 A_1 A_2 dots A_{n-1} B_0 B_1 B_2 dots B_{n-1} q query_1 query_2 . . . query_q Each query is given by one of the following formats: * 0 i x (for update operation) * 1 i y (for multiply operation) * 2 l r (for sum operation) * 3 x y (for swap operation) Output For each sum operation, print the corresponding sum. Examples Input 5 1 2 3 4 5 5 4 3 2 1 6 0 1 10 2 0 4 1 3 3 2 1 3 3 0 0 2 0 0 Output 23 19 5","solution":"class ArrayOperations: def __init__(self, A, B): self.A = A self.B = B def update(self, i, x): self.A[i] = x def multiply(self, i, y): self.A[i] *= y def sum(self, l, r): return sum(self.A[l:r+1]) def swap(self, x, y): self.A[x], self.B[y] = self.B[y], self.A[x]"},{"question":"A company recently launched a contest where participants score points for every correct answer they provide. To increase engagement, the company has decided to reward participants based on their scores with different levels of recognition. You have been tasked with writing a program that determines the level of recognition for each participant. The scoring system is defined as follows: - If a participant\'s score is less than 50, their recognition level is \\"Participant\\". - If a participant\'s score is between 50 and 100, inclusive, their recognition level is \\"Bronze\\". - If a participant\'s score is between 101 and 200, inclusive, their recognition level is \\"Silver\\". - If a participant\'s score is between 201 and 300, inclusive, their recognition level is \\"Gold\\". - For any score above 300, their recognition level is \\"Platinum\\". You need to write a program that reads the number of participants and their scores, then outputs the recognition level for each participant based on the given criteria. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100) — the number of participants. - Each of the next `n` lines contains a single integer `s` (0 ≤ s ≤ 500) — the score of each participant. # Output - For each participant, print a single line with their recognition level. # Example Input ``` 5 45 75 120 255 310 ``` Output ``` Participant Bronze Silver Gold Platinum ``` # Note Ensure your program handles the input efficiently and provides the correct recognition level based on the score for each participant.","solution":"def recognition_level(n, scores): levels = [] for score in scores: if score < 50: levels.append(\\"Participant\\") elif 50 <= score <= 100: levels.append(\\"Bronze\\") elif 101 <= score <= 200: levels.append(\\"Silver\\") elif 201 <= score <= 300: levels.append(\\"Gold\\") else: levels.append(\\"Platinum\\") return levels"},{"question":"Alyssa loves to play with sequences of numbers. One day, she came up with a new game. She selects a sequence of n positive integers and gives you a series of operations to perform. The operation allowed is to select any two adjacent integers in the sequence and replace them with their sum. Your task is to determine the minimum possible value for the sequence after exactly (n - 1) operations. Each operation reduces the length of the sequence by 1, and after (n - 1) operations, only one integer will remain in the sequence. Input The first line contains a single integer n (1 ≤ n ≤ 100), the number of integers in the sequence. The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 1000), representing Alyssa\'s sequence. Output Print a single integer — the minimum possible value after exactly (n - 1) operations. Examples Input 3 1 2 3 Output 6 Input 4 10 2 5 7 Output 24 Input 2 100 1 Output 101 Note In the first example, you can perform the operations as follows: - First, sum the first two numbers: 1 + 2 = 3. Sequence becomes [3, 3]. - Then, sum the remaining two numbers: 3 + 3 = 6. In the second example, you can perform the operations as follows: - First, sum the first and second numbers: 10 + 2 = 12. Sequence becomes [12, 5, 7]. - Then, sum the first and second numbers again: 12 + 5 = 17. Sequence becomes [17, 7]. - Finally, sum the remaining two numbers: 17 + 7 = 24.","solution":"def minimum_sum_value(n, sequence): Given a sequence of n positive integers and a series of operations, this function calculates the minimum possible value after exactly (n - 1) operations, where in each operation two adjacent integers in the sequence are replaced by their sum. Args: n : int : number of integers in the sequence sequence : list of int : list of n positive integers Returns: int : the minimum possible value after (n - 1) operations if n == 1: return sequence[0] return sum(sequence)"},{"question":"A company wants to assign tasks based on employee IDs. Each task is given a unique positive integer ID, and each employee also has a unique positive integer ID. The tasks should be assigned to employees based on the following rules: 1. Each task ID should be assigned to the employee whose ID has the smallest absolute difference with the task ID. 2. If there are multiple employees with the same absolute difference to a task ID, assign the task to the employee with the smallest ID. You are given two lists: one containing task IDs and the other containing employee IDs. Write a program to assign tasks to the employees following the given rules. Input The first line of the input contains two integers n (1 ≤ n ≤ 10^4) and m (1 ≤ m ≤ 10^4) — the number of tasks and the number of employees respectively. The second line of the input contains n distinct integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 10^9) — the IDs of the tasks. The third line of the input contains m distinct integers e_1, e_2, ..., e_m (1 ≤ e_i ≤ 10^9) — the IDs of the employees. Output Print n integers — the employee IDs to whom the tasks are assigned, in the order of the tasks given in the input. Examples Input 5 3 10 20 30 40 50 15 25 35 Output 15 15 25 35 35 Input 4 4 1 2 3 4 10 20 30 40 Output 10 10 10 10 Note In the first example, the assignments are as follows: - Task 10 is closest to employee 15. - Task 20 is closest to employee 15. - Task 30 is closest to employee 25. - Task 40 is closest to employee 35. - Task 50 is closest to employee 35. In the second example, all tasks are closest to the employee with ID 10 because the difference between all task IDs and 10 is smaller than the difference with any other employee ID.","solution":"def assign_tasks_to_employees(n, m, task_ids, employee_ids): Assigns tasks to employees based on the smallest absolute difference in IDs. In case of tie, assigns to the employee with the smallest ID. :param n: Number of tasks :param m: Number of employees :param task_ids: List of task IDs :param employee_ids: List of employee IDs :return: List of employee IDs to whom the tasks are assigned employee_ids.sort() # Sort employee_ids for easier minimum difference calculation result = [] for task_id in task_ids: min_diff = float(\'inf\') assigned_employee_id = None for employee_id in employee_ids: diff = abs(task_id - employee_id) if diff < min_diff or (diff == min_diff and employee_id < assigned_employee_id): min_diff = diff assigned_employee_id = employee_id result.append(assigned_employee_id) return result"},{"question":"Juliana loves to collect rare stones. Each stone has a unique integer identifier. Sometimes, she is curious about how many different stones she has in her collection from a given range of identifiers. Help her to determine the count of unique stones within specified ranges. You are provided with a list of stone identifiers and multiple queries, each asking for the number of unique stones within a specified range of identifiers. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of stone identifiers in Juliana\'s collection. The second line contains n space-separated integers — the identifiers of these stones. Each identifier is an integer between -1000 and 1000. The third line contains an integer q (1 ≤ q ≤ 100) — the number of queries. Each of the next q lines contains two integers l and r (-1000 ≤ l ≤ r ≤ 1000) representing the range [l, r]. Output For each query, print a single integer — the number of unique stones whose identifiers lie within the range [l, r] (inclusive). Examples Input 5 1 2 3 4 5 3 1 5 1 3 2 4 Output 5 3 3 Input 6 -2 -1 0 1 2 2 2 -2 1 0 2 Output 4 3 Note In the first example, the ranges [1, 5], [1, 3], and [2, 4] contain 5, 3, and 3 unique stones respectively. In the second example, the ranges [-2, 1] and [0, 2] contain 4 and 3 unique stones respectively.","solution":"def count_unique_stones(stones, queries): Returns the count of unique stones within the specified ranges for each query. :param stones: List[int] - List of stone identifiers. :param queries: List[Tuple[int, int]] - List of tuples where each tuple is a range [l, r]. :return: List[int] - List of counts of unique stones for each query. results = [] for l, r in queries: unique_stones = set(s for s in stones if l <= s <= r) results.append(len(unique_stones)) return results"},{"question":"Problem Alice and Bob are playing a game using an array of positive integers. They take turns, with Alice going first. On each turn, a player must choose two distinct integers from the array and replace them with their greatest common divisor (GCD) and left this reduced-length array for the other player. The player who cannot make a move on their turn loses the game. Both players play optimally. You need to determine the winner given the initial state of the array. Constraints: - The array length n satisfies (1 leq n leq 1000). - Each integer in the array is at most (10^6). Input The input is given in the following format: n a1 a2 a3 ... an The first line contains a single integer n, the length of the array. The second line contains n integers representing the array. Output Print \\"Alice\\" if Alice has a winning strategy, or \\"Bob\\" if Bob has a winning strategy. Examples Input 3 12 15 18 Output Alice Input 4 3 5 7 11 Output Bob","solution":"def determine_winner(n, arr): Determines the winner of the game given the initial length of the array and the array itself. # Alice wins if the array length `n` is odd, Bob wins if `n` is even return \\"Alice\\" if n % 2 != 0 else \\"Bob\\""},{"question":"You have been tasked to design and develop a traffic sensor network for a city\'s transportation department. There are n sensors, each installed on a different street. Every sensor records the number of vehicles passing every minute. The central system receives these records and issues commands to manage the sensors or collect statistics. There are three types of queries the central system can issue: - 1 i v — Update the i-th sensor to record v vehicles per minute from now on. - 2 l r — Calculate the average number of vehicles recorded by sensors in the range [l, r] (inclusive). - 3 — Determine and print the sensor recording the highest number of vehicles and the sensor recording the lowest number of vehicles currently. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of sensors and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^6) — the initial count of vehicles recorded by each sensor per minute. The next q lines describe the queries. Each query starts with an integer type (1, 2, or 3): - If the type is 1, it is followed by two integers i and v (1 ≤ i ≤ n, 0 ≤ v ≤ 10^6). - If the type is 2, it is followed by two integers l and r (1 ≤ l ≤ r ≤ n). - If the type is 3, no additional integers follow. Output For each query of type 2, output a single floating point number - the average number of vehicles being recorded by the sensors in the range [l, r], accurate to six decimal places. For each query of type 3, output two integers - the id of the sensor with the highest recording and the id of the sensor with the lowest recording. If multiple sensors have the same recording, output the one with the smallest id. Example Input: 5 8 10 20 30 40 50 2 1 3 2 2 5 1 3 25 2 1 3 3 1 5 20 2 4 5 3 Output: 20.000000 35.000000 18.333333 5 1 30.000000 4 1 Note: In the example above, there are 5 sensors each initially recording 10, 20, 30, 40, and 50 vehicles per minute, respectively. - Query \\"2 1 3\\" calculates the average of 10, 20, and 30 which is (10 + 20 + 30) / 3 = 20.000000. - Query \\"2 2 5\\" calculates the average of 20, 30, 40, and 50 which is (20 + 30 + 40 + 50) / 4 = 35.000000. - Query \\"1 3 25\\" updates the 3rd sensor to record 25 vehicles per minute. - Query \\"2 1 3\\" calculates the average of 10, 20, and 25 which is (10 + 20 + 25) / 3 = 18.333333. - Query \\"3\\" finds the highest and lowest recording sensors which are 5 and 1, respectively. - Query \\"1 5 20\\" updates the 5th sensor to record 20 vehicles per minute. - Query \\"2 4 5\\" calculates the average of 40 and 20 which is (40 + 20) / 2 = 30.000000. - Query \\"3\\" finds the highest and lowest recording sensors which are 4 and 1, respectively.","solution":"def manage_sensors(n, q, initial_readings, queries): from bisect import bisect_left, bisect_right import math readings = initial_readings[:] results = [] for query in queries: if query[0] == 1: # Update the i-th sensor to record v vehicles per minute from now on i, v = query[1] - 1, query[2] readings[i] = v elif query[0] == 2: # Calculate the average number of vehicles recorded by sensors in range [l, r] l, r = query[1] - 1, query[2] - 1 avg = sum(readings[l:r+1]) / (r - l + 1) results.append(f\\"{avg:.6f}\\") elif query[0] == 3: # Determine and print the sensor with the highest and lowest readings max_reading = max(readings) min_reading = min(readings) max_index = readings.index(max_reading) + 1 min_index = readings.index(min_reading) + 1 results.append(f\\"{max_index} {min_index}\\") return results # Example Usage: n, q = 5, 8 initial_readings = [10, 20, 30, 40, 50] queries = [ [2, 1, 3], [2, 2, 5], [1, 3, 25], [2, 1, 3], [3], [1, 5, 20], [2, 4, 5], [3] ] print(manage_sensors(n, q, initial_readings, queries))"},{"question":"You are given a string s consisting of lowercase English letters only. Find the longest subsequence of s such that no two adjacent characters in the subsequence are the same. A subsequence is derived from another string by deleting some or no characters without changing the order of the remaining characters. For example, \\"ace\\" is a subsequence of \\"abcde\\". Input The only input line contains a non-empty string s consisting of lowercase English letters only. Its length does not exceed 100. Output Print the longest subsequence such that no two adjacent characters in the subsequence are the same. Examples Input abacabad Output abacabad Input aabbcc Output abc Input aaaa Output a Input abcabc Output abcabc Note In the first example, the string \\"abacabad\\" itself does not contain any adjacent characters that are the same, so it remains unchanged. In the second example, characters \\"aa\\", \\"bb\\", and \\"cc\\" can be reduced to \\"a\\", \\"b\\", and \\"c\\" respectively, forming the string \\"abc\\". In the third example, the entire string \\"aaaa\\" consists of the same character, hence the result is \\"a\\". In the fourth example, the string \\"abcabc\\" is constructed by repeating \\"abc\\", ensuring no two adjacent characters in the subsequence are the same.","solution":"def longest_non_adjacent_subsequence(s): Returns the longest subsequence of s such that no two adjacent characters are the same. if not s: return \\"\\" result = [s[0]] # Start with the first character for i in range(1, len(s)): if s[i] != s[i - 1]: result.append(s[i]) return \\"\\".join(result)"},{"question":"Carla loves trees, particularly binary trees. She comes up with an interesting problem: Given a binary tree, each node has a value. She wants to update some nodes and sum the values in given ranges of the tree. Any node in the tree has at most two children, commonly called the left child and the right child. Additionally, each node\'s value can be updated, and you need to support the following two types of operations: 1. **Update Operation:** You are given a node and a new value. Update the node\'s value to the new value. 2. **Query Operation:** You are given two nodes and need to find the sum of all node values in the shortest path between these two nodes. Carla wants you to write a program to perform these operations efficiently. # Input The first line contains two integers, n and m (1 ≤ n, m ≤ 10^5), where n is the number of nodes in the binary tree and m is the number of operations. The next line contains n integers, where the i-th integer is the initial value of the i-th node (1 ≤ value ≤ 10^9). The following m lines represent the operations. Each operation is either: - `1 u v` - an update operation, where you need to update the value of node `u` to `v`. - `2 u v` - a query operation, where you need to find the sum of the values from node `u` to node `v`. # Output For each query operation, print the result on a new line. # Example Input ``` 5 3 1 2 3 4 5 1 2 10 2 1 5 2 2 3 ``` Output ``` 20 13 ``` # Explanation Initially, the tree node values are `[1, 2, 3, 4, 5]`. - After the first operation `1 2 10`, the values become `[1, 10, 3, 4, 5]`. - The first query operation `2 1 5` computes the sum of values in the path from node 1 to node 5: `1 + 10 + 3 + 4 + 5 = 23`. - The second query operation `2 2 3` computes the sum of values in the path from node 2 to node 3: `10 + 3 = 13`.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None # Helper function to find the Lowest Common Ancestor (LCA) def find_lca(root, u, v): if root is None: return None if root.value == u or root.value == v: return root left_lca = find_lca(root.left, u, v) right_lca = find_lca(root.right, u, v) if left_lca and right_lca: return root return left_lca if left_lca is not None else right_lca # Helper function to find the distance from ancestor to a given node def path_sum_from_ancestor(root, target): if root is None: return float(\'inf\'), 0 if root.value == target: return 0, root.value left_distance, left_sum = path_sum_from_ancestor(root.left, target) right_distance, right_sum = path_sum_from_ancestor(root.right, target) if left_distance < right_distance: return left_distance + 1, root.value + left_sum else: return right_distance + 1, root.value + right_sum # Function to compute sum of values in the path from node u to node v def path_sum(root, u, v): lca = find_lca(root, u, v) _, sum_u = path_sum_from_ancestor(lca, u) _, sum_v = path_sum_from_ancestor(lca, v) return sum_u + sum_v - lca.value # Function to update the value of a node in the binary tree def update_value(root, old_value, new_value): if root is None: return if root.value == old_value: root.value = new_value return update_value(root.left, old_value, new_value) update_value(root.right, old_value, new_value) # Function to build a tree from node values and edges def build_tree(values, edges): nodes = {v: TreeNode(v) for v in values} for u, v in edges: if nodes[u].left is None: nodes[u].left = nodes[v] else: nodes[u].right = nodes[v] return nodes def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) values = list(map(int, data[2:n+2])) operations = data[n+2:] edges = [(i+1, values[i]) for i in range(len(values) - 1)] root = build_tree(values, edges) result = [] for i in range(0, len(operations), 3): op = int(operations[i]) u = int(operations[i+1]) v = int(operations[i+2]) if op == 1: update_value(root, u, v) elif op == 2: result.append(path_sum(root, u, v)) for res in result: print(res)"},{"question":"You are given a string S consisting of only lowercase English letters. Your task is to form the longest possible subsequence of S that satisfies the following conditions: * All characters from the subsequence should repeat at least k times. * The order of characters in the subsequence should match their original order in S. Input The first line of the input contains a single integer k (1 ≤ k ≤ 100) — the minimum number of repetitions for each character in the subsequence. The second line contains the string S (1 ≤ |S| ≤ 1000) — the original string. Output Print the length of the longest possible subsequence that meets all the requirements. If there\'s no valid subsequence, print 0. Examples Input 3 abacabadabacaba Output 12 Input 2 abcd Output 0 Note In the first sample, one of the optimal subsequences is: \\"aaaabbbbcccc\\". All characters appear at least 3 times. In the second sample, there\'s no subsequence where any character appears at least 2 times.","solution":"def longest_subsequence_length(k, s): from collections import Counter # Count frequency of each character freq = Counter(s) # Filter out those characters which appear at least \'k\' times valid_chars = {char for char, count in freq.items() if count >= k} if not valid_chars: return 0 # Accumulate the character from the original string filtered by valid_chars result = [] for char in s: if char in valid_chars: result.append(char) return len(result)"},{"question":"In a distant galaxy, there is a planet called Zorblax, where a unique form of plant known as \\"Quantali\\" grows. The farmers of Zorblax are interested in optimizing the harvest of these plants. The Quantali plants grow in a single line and each plant has a particular height. The farmers can choose any contiguous subarray of plants and harvest them. However, due to the peculiar nature of these plants, the profit from harvesting a subarray of plants is defined as the difference between the maximum height and the minimum height within that subarray. Given an array representing the heights of the Quantali plants, your task is to write a program that finds the maximum profit the farmers can achieve from harvesting any contiguous subarray of plants. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of Quantali plants. - The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 10^9) — the heights of the Quantali plants. # Output - Print a single integer — the maximum profit the farmers can achieve. # Example Input ``` 5 3 1 6 4 2 ``` Output ``` 5 ``` Input ``` 3 10 10 10 ``` Output ``` 0 ``` # Note In the first test case, the maximum profit can be achieved by harvesting the subarray [1, 6], which has a difference between maximum height 6 and minimum height 1, resulting in a profit of 5. In the second test case, all plants have the same height, so the maximum profit is 0 because there is no difference in height between any plants.","solution":"def max_profit(heights): Calculate the maximum profit from harvesting any contiguous subarray of plants. Profit is defined as the difference between the maximum and minimum heights within that subarray. :param heights: List of integers representing heights of the Quantali plants. :return: Maximum profit as an integer. if not heights: return 0 max_profit = 0 current_max = float(\'-inf\') current_min = float(\'inf\') for height in heights: current_max = height current_min = height for j in range(len(heights)): if j < len(heights): current_max = max(current_max, heights[j]) current_min = min(current_min, heights[j]) max_profit = max(max_profit, current_max - current_min) return max_profit"},{"question":"You\'re a software engineer tasked with managing data streams. Specifically, you\'re working with a series of integers representing amounts of data received over time. You need to determine the minimum window (subarray) length that has a sum greater than or equal to a given target value. Write a function to find this minimum window length. If no such subarray exists, return 0. Input The first line contains two integers n and s (1 ≤ n ≤ 100000, 1 ≤ s ≤ 10^9) — the number of integers and the target sum. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^5) — the series of data amounts. Output Print the minimum length of a subarray whose sum is at least s. If no such subarray exists, print 0. Examples Input 10 15 1 2 3 4 5 6 7 8 9 10 Output 2 Input 5 11 1 1 1 1 1 Output 0","solution":"def min_subarray_length(n, s, data): Returns the minimum length of a subarray whose sum is at least s. If no such subarray exists, returns 0. Args: n : int : number of elements in data s : int : target sum data : List[int] : list of integers Returns: int : minimum length of required subarray, or 0 if no such subarray exists. start = 0 end = 0 current_sum = 0 min_length = float(\'inf\') while end < n: current_sum += data[end] while current_sum >= s: min_length = min(min_length, end - start + 1) current_sum -= data[start] start += 1 end += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"You are given a sequence of instructions to manipulate a list of integers. The instructions consist of three types: 1. \\"ADD x\\" - add x to the end of the list. 2. \\"REMOVE\\" - remove the last element of the list. 3. \\"PRINT\\" - print the current state of the list. Your task is to simulate the instructions and print the list state after each \\"PRINT\\" command. Input The input consists of several lines: - Each line contains one instruction. - The sequence of instructions does not exceed 200 lines. - The integer for the \\"ADD x\\" instruction (x) is guaranteed to be a non-negative integer. Output Print the current state of the list after each \\"PRINT\\" instruction. Each list should be printed on a new line as space-separated integers. If the list is empty, print \\"EMPTY\\". Example Input ADD 5 ADD 3 PRINT REMOVE PRINT ADD 10 PRINT REMOVE REMOVE PRINT Output 5 3 5 5 10 EMPTY","solution":"def process_instructions(instructions): result = [] lst = [] for instruction in instructions: parts = instruction.split() command = parts[0] if command == \\"ADD\\": lst.append(int(parts[1])) elif command == \\"REMOVE\\": if lst: lst.pop() elif command == \\"PRINT\\": if lst: result.append(\\" \\".join(map(str, lst))) else: result.append(\\"EMPTY\\") return result"},{"question":"A software development company is organizing a competition where participants need to write code to solve various problems. One of the tasks given to the participants is to design a system that can accurately simulate the scoring of a tennis match and declare the winner. The rules are as follows: - The match consists of a series of points. - Each point won by a player is recorded in the line \\"name\\". - The player who wins the majority of the maximum points in a game wins the match. - If, at the end of the match, the players are tied with the same number of points, the one who reached those points first is the match winner. Input The first line contains an integer number n (1 ≤ n ≤ 1000), n is the number of points played. Then follow n lines, containing the names of the players who won each point in the format \\"name\\", where name is a string of lower-case Latin letters with the length from 1 to 32. Output Print the name of the winner. Examples Input 5 alice bob alice alice bob Output alice Input 6 john john john doe doe doe Output john","solution":"def tennis_match_winner(n, points): Determines the winner of a tennis match based on the points won by each player. Args: n (int): The number of points played. points (list of str): List of player names who won each point. Returns: str: The name of the match winner. from collections import defaultdict score = defaultdict(int) first_reach = {} for idx, player in enumerate(points): score[player] += 1 if player not in first_reach: first_reach[player] = idx max_points = max(score.values()) potential_winners = [player for player, points in score.items() if points == max_points] winner = min(potential_winners, key=lambda player: first_reach[player]) return winner"},{"question":"David is an avid video game player, and he just started developing his own simple 2D platformer game. He needs help implementing a critical feature: detecting collisions between a player and various obstacles. The game is set on a grid where both the player and obstacles are represented as rectangles aligned with the grid axes. Your task is to write a function that determines whether the player sprite intersects with any of the obstacle sprites. For each case, you need to check whether the player\'s rectangle overlaps with any of the given obstacle rectangles. Input: The first line contains an integer T, denoting the number of test cases. For each test case: - The first line contains four integers X1, Y1, W1, H1, representing the top-left corner (X1, Y1), width (W1), and height (H1) of the player\'s rectangle. - The second line contains an integer N, the number of obstacles. - Each of the next N lines contains four integers X2, Y2, W2, H2, representing the top-left corner (X2, Y2), width (W2), and height (H2) of an obstacle rectangle. Output: For each test case, output \\"YES\\" if the player\'s rectangle intersects with any of the obstacle rectangles; otherwise, output \\"NO\\". Constraints: 1 ≤ T ≤ 100 0 ≤ X1, Y1, X2, Y2 ≤ 1000 1 ≤ W1, H1, W2, H2 ≤ 100 0 ≤ N ≤ 100 SAMPLE INPUT 2 1 1 3 3 2 2 2 3 3 5 5 2 2 0 0 5 5 1 3 3 2 2 SAMPLE OUTPUT YES NO","solution":"def does_intersect(x1, y1, w1, h1, x2, y2, w2, h2): Checks if two rectangles intersect. Rectangle 1: top-left is (x1, y1), width w1, height h1 Rectangle 2: top-left is (x2, y2), width w2, height h2 return not (x1 + w1 <= x2 or x2 + w2 <= x1 or y1 + h1 <= y2 or y2 + h2 <= y1) def detect_collisions(test_cases): Determines if the player\'s rectangle intersects with any obstacle rectangles. :param test_cases: List of test cases with player and obstacle rectangles information :return: List of strings \\"YES\\" or \\"NO\\" for each test case results = [] for case in test_cases: x1, y1, w1, h1 = case[\'player\'] obstacles = case[\'obstacles\'] collision = any(does_intersect(x1, y1, w1, h1, *obs) for obs in obstacles) results.append(\\"YES\\" if collision else \\"NO\\") return results"},{"question":"Zelda is learning about binary search trees (BST) and wants to solve problems related to them. Here\'s her problem: You are given two binary search trees, BST1 and BST2, containing distinct positive integers. Your task is to find all the integers that are present in both BST1 and BST2. Input - The first line contains an integer t (1 ≤ t ≤ 10^5) representing the number of test cases. - Each test case contains two trees described as follows: - The first line contains an integer n_1 (1 ≤ n_1 ≤ 10^4) representing the number of nodes in BST1. - The second line contains n_1 space-separated integers representing the nodes of BST1. - The third line contains an integer n_2 (1 ≤ n_2 ≤ 10^4) representing the number of nodes in BST2. - The fourth line contains n_2 space-separated integers representing the nodes of BST2. Output For each test case, output a single line containing the sorted list of integers present in both BST1 and BST2. If there are no common integers, output an empty line. Example Input 2 5 10 20 5 15 30 4 20 15 40 50 3 7 3 1 3 3 1 5 Output 15 20 1 3 Note that the nodes in the input are given in an arbitrary order, not necessarily in any specific tree traversal order. # Explanation: - In the first test case, the common integers in both BST1 and BST2 are 15 and 20. - In the second test case, the common integers in both BST1 and BST2 are 1 and 3.","solution":"def find_common_elements(t, test_cases): Given the number of test cases and the test cases themselves, returns the common elements in the two binary search trees for each test case. :param t: Number of test cases :param test_cases: List of test cases, where each test case is a tuple containing: (n1, BST1_nodes, n2, BST2_nodes) :return: List of lists, where each list contains the sorted common elements in the respective test case. results = [] for i in range(t): n1, bst1_nodes, n2, bst2_nodes = test_cases[i] set_bst1 = set(bst1_nodes) set_bst2 = set(bst2_nodes) common_elements = sorted(set_bst1.intersection(set_bst2)) results.append(common_elements) return results"},{"question":"You are given an integer array `nums` and an integer `k`. Your task is to identify whether the sub-array of length `k` exists whose sum is a prime number. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. For example, 2, 3, 5, and 7 are prime numbers. Write a function `is_prime_subarray(nums: List[int], k: int) -> bool` that takes the list of integers and the length k, and returns a boolean indicating whether there exists a sub-array of the given length k such that its sum is a prime number. # Input - A list of integers, `nums` (1 ≤ |nums| ≤ 10^5, -10^9 ≤ nums[i] ≤ 10^9) - An integer `k` (1 ≤ k ≤ |nums|) # Output - Return true if there exists at least one sub-array of length `k` with a prime sum, otherwise return false. # Example Example 1: ``` Input: nums = [2, 3, 4, 7, 1] k = 3 Output: true Explanation: The sub-array [2, 3, 4] sums to 9 which is not prime, the sub-array [3, 4, 7] sums to 14 which is not prime and [4, 7, 1] sums to 12 which is not prime, but [2, 3, 7] sums to 12 which is also not prime. If we expand our search we find no prime sub arrays. Here k visible sub-arrays without a prime sum so the output is true. ``` Example 2: ``` Input: nums = [1, 2, 3, 4, 5] k = 3 Output: false Explanation: There doesn\'t exist any sub-array of length 3 whose sum is a prime number. The example sub-array sums are [6, 9, 12] and not prime. ``` # Notes - Efficiently check the primality of numbers, especially since the sum of k elements in nums can be very large. - Consider edge cases like negative numbers and the smallest and largest allowed sizes for the input array.","solution":"from typing import List def is_prime(n: int) -> bool: Helper function to determine if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_prime_subarray(nums: List[int], k: int) -> bool: Function to check if there is a sub-array of length k in nums whose sum is a prime number. n = len(nums) if k > n: return False # Compute the sum for first sub-array of length k current_sum = sum(nums[:k]) if is_prime(current_sum): return True # Sliding window to compute sum of next sub-arrays of length k for i in range(k, n): current_sum += nums[i] - nums[i - k] if is_prime(current_sum): return True return False"},{"question":"You are tasked with designing a software system that calculates the optimal routes for a delivery company. The company has a fleet of delivery trucks, and each truck has a maximum capacity C. There are N delivery orders, each defined by a tuple (x, y, w), where (x, y) are the coordinates of the delivery location and w is the weight of the delivery in kilograms. The depot of the delivery company is located at the origin (0, 0). The company needs to assign the deliveries to their trucks in such a way that: 1. Each delivery route starts and ends at the depot. 2. The total weight of the deliveries assigned to any truck does not exceed its maximum capacity C. 3. The total travel distance for all trucks is minimized. 4. Each delivery order is assigned to exactly one truck. Write a program that takes the coordinates, weights, and capacity of the trucks as input, and outputs the optimized delivery routes. For simplicity, assume that the Euclidean distance is used to calculate travel distances. # Constraints - 1 ≤ N ≤ 1000 - 1 ≤ C ≤ 10000 - 0 ≤ x, y ≤ 1000 - 1 ≤ w ≤ 1000 - The sum of all weights of the deliveries does not exceed the total capacity of the available trucks. # Input Input is given from Standard Input in the following format: ``` C N x1 y1 w1 x2 y2 w2 ... xN yN wN ``` # Output Output the delivery routes for the trucks, one route per line. Each route should have the format: ``` x1 y1 x2 y2 ... xk yk ``` Where (x1, y1), (x2, y2), ..., (xk, yk) are the coordinates of the delivery locations in the order they are visited by a single truck. Print each route on a new line. # Examples Input ``` 10 6 2 3 5 5 5 3 1 2 2 6 8 4 7 7 5 4 3 6 ``` Output ``` 2 3 1 2 5 5 6 8 7 7 4 3 ``` Input ``` 15 4 1 1 5 2 2 4 3 3 6 4 4 3 ``` Output ``` 1 1 2 2 3 3 4 4 ```","solution":"import math from itertools import permutations def calculate_distance(route): total_distance = 0 prev_x, prev_y = 0, 0 # start from the depot for x, y in route: total_distance += math.sqrt((x - prev_x) ** 2 + (y - prev_y) ** 2) prev_x, prev_y = x, y total_distance += math.sqrt(prev_x ** 2 + prev_y ** 2) # return to the depot return total_distance def get_routes(capacity, deliveries): deliveries.sort(key=lambda d: d[2]) # sort by weight routes = [] while deliveries: route = [] current_weight = 0 for d in list(deliveries): # iterate over a copy of the list if current_weight + d[2] <= capacity: route.append((d[0], d[1])) current_weight += d[2] deliveries.remove(d) routes.append(route) return routes def optimize_routes(deliveries): best_routes = list(permutations(deliveries)) min_distance = float(\'inf\') best_route_set = None for each in permutations(deliveries, len(deliveries)): distance = sum(calculate_distance(route) for route in each) if distance < min_distance: min_distance = distance best_route_set = each return best_route_set def delivery_routes(C, N, delivery_info): deliveries = [] for i in range(N): x, y, w = delivery_info[i] deliveries.append((x, y, w)) routes = get_routes(C, deliveries) optimized_routes = optimize_routes(routes) return optimized_routes # Example usage: C = 10 N = 6 deliveries = [(2, 3, 5), (5, 5, 3), (1, 2, 2), (6, 8, 4), (7, 7, 5), (4, 3, 6)] routes = delivery_routes(C, N, deliveries) for route in routes: print(\\" \\".join(f\\"{x} {y}\\" for x, y in route))"},{"question":"You\'re working as a network engineer and you are tasked with optimizing the data transfer between servers located in different cities. For this, you need a reliable way to find the shortest path between servers connected through different nodes in a network. The network is represented as a weighted, undirected graph. Each city is a node and each connection is an edge with an associated positive weight representing the time it takes to transfer data between these cities. Given a description of the network with n cities and m connections, your goal is to find the shortest path from a given start city to an end city. Input The first line contains three integers n, m, and q (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000, 1 ≤ q ≤ 100) — the number of cities, the number of connections, and the number of queries respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^5) describing a connection between city u and city v with weight w. Each of the next q lines contains two integers s and t (1 ≤ s, t ≤ n) which represent the start city and the end city for a query. Output For each query, output the shortest path from the start city to the end city. If no path exists, output -1. Examples Input 4 4 3 1 2 1 2 3 2 3 4 3 1 3 5 1 4 2 4 1 3 Output 6 5 3 Input 3 1 2 1 2 1 3 1 2 3 Output -1 -1 Note In the first example, the shortest path from city 1 to city 4 is through cities 2 and 3 with a total weight of 1 + 2 + 3 = 6. The shortest path from city 2 to city 4 is through city 3 with a total weight of 2 + 3 = 5. The shortest path from city 1 to city 3 is directly with a weight of 3. In the second example, there is no path from city 3 to city 1, and there is no path from city 2 to city 3, hence the output is -1 for both queries.","solution":"import heapq def dijkstra(n, graph, start, end): Uses Dijkstra\'s algorithm to find the shortest path in a graph. Parameters: n (int): The number of nodes in the graph. graph (dict): The adjacency list of the graph. start (int): The starting node. end (int): The ending node. Returns: int: The shortest path from start to end. If no path exists, returns -1. distances = {node: float(\'infinity\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'infinity\') else -1 def solve_queries(n, m, q, connections, queries): Solves the shortest path queries on a given network. Parameters: n (int): The number of cities (nodes). m (int): The number of connections (edges). q (int): The number of queries. connections (list of tuples): List of edges where each tuple contains (u, v, w). queries (list of tuples): List of queries where each tuple contains (s, t). Returns: list of int: The shortest path results for each query. # Create an adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in connections: graph[u].append((v, w)) graph[v].append((u, w)) # Undirected graph results = [] for s, t in queries: results.append(dijkstra(n, graph, s, t)) return results"},{"question":"You are given a positive integer n, and you need to determine if n can be expressed as the sum of two positive perfect squares. A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, 16 are perfect squares because they are 1^2, 2^2, 3^2, and 4^2 respectively. Write a function to determine whether the given number can be written as the sum of two perfect squares. Function Signature: ```python def check_sum_of_squares(n: int) -> bool: pass ``` # Input - A single integer n (1 ≤ n ≤ 10^9) # Output - Return True if the number can be expressed as the sum of two positive perfect squares, otherwise return False. # Examples Input ```python n = 5 ``` Output ```python True ``` Input ```python n = 3 ``` Output ```python False ``` Input ```python n = 25 ``` Output ```python True ``` # Explanation For the first example, 5 can be written as 1^2 + 2^2 (1 + 4 = 5). For the second example, 3 cannot be written as the sum of two positive perfect squares. For the third example, 25 can be written as 3^2 + 4^2 (9 + 16 = 25).","solution":"import math def check_sum_of_squares(n: int) -> bool: Given a positive integer n, determine if it can be expressed as the sum of two positive perfect squares. limit = int(math.isqrt(n)) for i in range(1, limit + 1): remainder = n - i * i if remainder > 0 and math.isqrt(remainder)**2 == remainder: return True return False"},{"question":"You are given a list of integers representing the height of buildings in a cityscape. The buildings are viewed from the side so that each element in the list represents the height of a single building. You need to find the maximum area of a rectangle formed by selecting adjacent buildings. The width of each building is 1. Write a function `largestRectangleArea` that takes the list of integers `heights` as input and returns an integer indicating the maximum area of a rectangle that can be formed by selecting adjacent buildings. The function signature: ```python def largestRectangleArea(heights: List[int]) -> int: ... ``` # Input - A single list of integers `heights` where 1 ≤ len(heights) ≤ 100,000 and 0 ≤ heights[i] ≤ 10,000. # Output - A single integer representing the maximum rectangular area that can be formed. # Example ```python Input: [2, 1, 5, 6, 2, 3] Output: 10 Input: [2, 4] Output: 4 ``` # Note In the first example, the maximum rectangular area is obtained by taking the buildings with heights `[5, 6]`, which forms a rectangle of area `5 * 2 = 10`. In the second example, the maximum area is `4` formed by the single building with height `4`.","solution":"def largestRectangleArea(heights): Finds the maximum area of a rectangle that can be formed by selecting adjacent buildings. :param heights: List of integers representing the height of buildings. :return: Integer indicating the maximum area of the rectangle. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"A company wants to implement a new work schedule for its employees. Each employee is assigned a unique ID from 1 to N. The employees need to work in a rotation for D days. The schedule dictates that on each day, the employee with the next ID (in a circular manner) will be in charge. The rotation starts with the employee with ID S. After D days, the company wants to know which employee will be in charge. Write a program to determine the ID of the employee who will be in charge on the D-th day. The rotation follows this pattern: if the rotation starts with employee S, the next employee will be S+1, then S+2, and so on. If it reaches the employee with ID N, the next in line would be the employee with ID 1, and the rotation continues. Input: The first line contains T, the number of test cases. Each of the next T lines contains three integers, N (total number of employees), D (number of days in the rotation), and S (ID of the starting employee for the rotation). Output: For each test case, print the ID of the employee who will be in charge on the D-th day. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^9 1 ≤ D ≤ 10^9 1 ≤ S ≤ N SAMPLE INPUT 1 5 4 3 SAMPLE OUTPUT 2","solution":"def find_employee_in_charge(T, test_cases): Determines the employee ID who will be in charge on the D-th day for each test case. Parameters: T (int): Number of test cases. test_cases (list): List of tuples, each containing N (total employees), D (days), S (starting employee ID). Returns: list: List of employee IDs who will be in charge on the D-th day for each test case. results = [] for case in test_cases: N, D, S = case # Calculate the position of the employee in charge after D days. result = ((S - 1 + D) % N) + 1 results.append(result) return results"},{"question":"Write a function to determine the minimum number of moves required to transform a given string into a palindrome by only deleting characters. A palindrome is a string that reads the same forward and backward. Deleting a character removes it from the string entirely and does not count as a move between characters. Input The input contains a single string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. Output Output a single integer representing the minimum number of deletions required to make the string a palindrome. Examples Input ab Output 1 Input aab Output 1 Input abca Output 1 Input racecar Output 0 Input radarx Output 1","solution":"def min_deletions_to_palindrome(s): Returns the minimum number of deletions required to make the string a palindrome. Parameters: s (str): The input string Returns: int: The minimum number of deletions def lcs_length(x, y): m = len(x) n = len(y) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if x[i - 1] == y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] # The string and its reverse rev_s = s[::-1] # Length of longest palindromic subsequence lps_length = lcs_length(s, rev_s) # Number of deletions is the difference between the length of s and lps_length return len(s) - lps_length"},{"question":"Anton and Danik are having a game competition. There are several games played between them. The results of each game are stored in a string, where \'A\' represents a win for Anton, and \'D\' represents a win for Danik. They want to determine who won the most games. If Anton won more games than Danik, Anton is the overall winner. If Danik won more games than Anton, Danik is the overall winner. If they both won the same number of games, then the match ends in a tie. Write a program that takes the number of games played and the results string, then outputs who won the competition or if it ended in a tie. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of games played. The second line contains a string of length n consisting of characters \'A\' and \'D\'. Output Print \\"Anton\\" if Anton won more games, \\"Danik\\" if Danik won more games, and \\"Friendship\\" if there is a tie. Examples Input 6 ADDAAD Output Danik Input 7 AADADDD Output Friendship Input 3 AAA Output Anton","solution":"def game_winner(n, results): Determines the winner between Anton and Danik based on game results. Args: n (int): Number of games played. results (str): String of length n with \'A\' for Anton\'s win and \'D\' for Danik\'s win. Returns: str: \\"Anton\\" if Anton won more games, \\"Danik\\" if Danik won more games, \\"Friendship\\" if it\'s a tie. anton_wins = results.count(\'A\') danik_wins = results.count(\'D\') if anton_wins > danik_wins: return \\"Anton\\" elif danik_wins > anton_wins: return \\"Danik\\" else: return \\"Friendship\\""},{"question":"A local library wants to keep track of book borrowings. Every transaction is logged in the system indicating whether a book is borrowed or returned. Each book has a unique ISBN number, and it is ensured that there won\'t be any return without a corresponding borrowing in advance. The library also wants to know the number of currently borrowed copies of a particular book to ensure there are no discrepancies in the inventory. Write a program that processes a list of transactions and reports the inventory status for the requested books. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of transactions. Each of the next n lines contains two space-separated elements: an action and an ISBN number. The action is either \\"borrow\\" or \\"return\\". The next line contains an integer q (1 ≤ q ≤ 100) — the number of queries. Each of the following q lines contains a single ISBN number in a query. Output For each query, output a line with the current number of borrowed copies of the given ISBN. If the ISBN number has no recorded borrowings and returns, output 0. Examples Input 5 borrow 12345 borrow 12345 return 12345 borrow 67890 return 67890 2 12345 67890 Output 1 0 Input 3 borrow 11223 borrow 11223 return 11223 1 11223 Output 1 Note In the first test case, there are two borrow transactions and one return transaction for ISBN 12345, leaving one copy still borrowed. For ISBN 67890, a borrow followed by a return means no copies are currently borrowed. In the second test case, there are two borrow transactions and one return transaction for ISBN 11223, leaving one copy still borrowed.","solution":"def process_transactions(n, transactions, q, queries): Processes the list of transactions to track the number of borrowed copies for each requested ISBN. Parameters: n (int): Number of transactions. transactions (list of tuple): List of transactions where each transaction is a tuple of (action, ISBN). q (int): Number of queries. queries (list of str): List of ISBNs to query. Returns: list of int: List of borrowed copies for each queried ISBN. inventory = {} for action, isbn in transactions: if action == \\"borrow\\": if isbn in inventory: inventory[isbn] += 1 else: inventory[isbn] = 1 elif action == \\"return\\": if isbn in inventory and inventory[isbn] > 0: inventory[isbn] -= 1 result = [] for isbn in queries: result.append(inventory.get(isbn, 0)) return result"},{"question":"In a medieval kingdom, there is an elaborate network of roads connecting N cities. The cities are conveniently numbered from 1 to N. Each road in this kingdom connects exactly two distinct cities and can be traversed in both directions. The king wants to ensure that he can travel between any pair of cities, either directly or indirectly through other cities. Your task is to determine if the given road network is connected. In other words, check whether it is possible to reach any city starting from any other city using the roads provided. If it is possible, output \\"YES\\". Otherwise, output \\"NO\\". Constraints: * 2 ≤ N ≤ 10^{5} * 1 ≤ M ≤ 2×10^{5} * Each of the M roads connects two distinct cities. Input The input is given from Standard Input in the following format: ``` N M U_1 V_1 U_2 V_2 ... U_M V_M ``` Where U_i and V_i are the endpoints of the i-th road. Output Print \\"YES\\" if the road network is connected. Otherwise, print \\"NO\\". Examples Input ``` 4 3 1 2 2 3 3 4 ``` Output ``` YES ``` Input ``` 4 2 1 2 3 4 ``` Output ``` NO ``` Input ``` 5 4 1 2 2 3 3 4 4 5 ``` Output ``` YES ```","solution":"def is_connected(N, M, roads): from collections import defaultdict, deque # Create an adjacency list for the cities graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Function to perform BFS def bfs(start_node): visited = set() queue = deque([start_node]) while queue: node = queue.popleft() if node in visited: continue visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited # Start BFS from the first city visited_cities = bfs(1) # Check if all cities are visited if len(visited_cities) == N: return \\"YES\\" else: return \\"NO\\""},{"question":"Bob recently encountered an intriguing problem while studying prime numbers. He decided to explore the concept by devising a challenge. The challenge consists of finding the minimum number of prime numbers that sum up to a given number K. More formally, given an integer K, you need to determine the minimum number of prime numbers that sum up to K. If such a combination of prime numbers is not possible, return -1. Note that the prime numbers used in the sum do not need to be distinct. For instance, 5 can be represented as the sum of prime numbers as 2 + 3 or as 5 itself. Bob is curious whether there is an efficient way to solve this problem, so he has turned to you for help. Input The input contains a single integer K (1 ≤ K ≤ 10^6). Output Output a single integer representing the minimum number of prime numbers that sum up to K. If it is not possible to sum up to K using prime numbers, print -1. Examples Input ``` 10 ``` Output ``` 2 ``` Input ``` 20 ``` Output ``` 2 ``` Input ``` 1 ``` Output ``` -1 ``` Note For the first sample, the minimum number of prime numbers that sum up to 10 is 2 (for example, 5 + 5 or 7 + 3). For the second sample, the minimum number of prime numbers that sum up to 20 is also 2 (10 + 10). For the third sample, it is not possible to represent 1 as the sum of prime numbers, thus the answer is -1.","solution":"def min_prime_sum(k): Returns the minimum number of prime numbers that sum up to k. if k == 1: return -1 if k == 2: return 1 if k % 2 == 0: return 2 # Because Goldbach\'s conjecture states that any even number >= 4 can be expressed as a sum of two primes. # Check if k itself is a prime for i in range(2, int(k**0.5)+1): if k % i == 0: break else: return 1 # k is a prime number # k is odd, using Goldbach\'s conjecture (since k-2 is even and can be written as a sum of two primes). return 3"},{"question":"You are given a list of integers. Your task is to rearrange the elements to form the largest possible integer. For example, given the numbers [3, 30, 34, 5, 9], the largest formed integer would be 9534330. Write a function that takes an integer list as input and returns the largest formed integer as a string. Input format: - The input is a single line containing a space-separated list of integers. Output format: - The output should be the largest formed integer as a string, without any leading zeros. Constraints: - The length of the list is between 1 and 10^4. - Each integer in the list is between 0 and 10^9. SAMPLE INPUT 3 30 34 5 9 SAMPLE OUTPUT 9534330","solution":"from functools import cmp_to_key def compare(x, y): if x + y > y + x: return -1 else: return 1 def largest_number(nums): # Convert integers to strings for easier comparison. nums = list(map(str, nums)) # Sort the numbers based on the custom comparator. nums.sort(key=cmp_to_key(compare)) # Join the sorted numbers to form the largest number. largest_num = \'\'.join(nums) # Remove leading zeros. largest_num = largest_num.lstrip(\'0\') # Return \'0\' if the result is empty, which implies the list was full of zeros. return largest_num or \'0\'"},{"question":"You\'re given a large file system with directories and files, represented as a list of strings where each string represents a path to a file or directory. Each path consists of directory and file names separated by `/`. The task is to find the most deeply nested file within the file system. Consider the depth of the root directory (i.e., the directory without any parent) as depth 0. A file located directly under the root directory has a depth of 1, a file under a directory inside the root directory has a depth of 2, and so on. If there are multiple files with the same maximum depth, return any one of them. # Input - The first line of input contains a single integer `N` that denotes the number of paths in the file system (1 ≤ N ≤ 1000). - The following `N` lines each contain a path as a string. Each path: - starts and ends with a lowercase English letter or a digit (0-9), - can include lowercase English letters, digits (0-9), and `/` separating the directories, - does not include leading, trailing, or consecutive `/` characters, - each file or directory name is at most 30 characters long. # Output - Output a single string: the path of the file with the greatest depth. If multiple files have the same depth, output any one of them. # Example Input ``` 6 dir1/file1.txt dir1/dir2/file2.txt dir1/dir2/dir3/file3.txt dir4/file4.txt dir4/dir5/dir6/file5.txt dir4/dir5/file6.txt ``` Output ``` dir1/dir2/dir3/file3.txt ``` # Note In the above example, `dir1/dir2/dir3/file3.txt` and `dir4/dir5/dir6/file5.txt` both have the maximum depth of 3. The solution can return either of them. # Explanation The deepest file is identified by the number of directories nesting it. The file system can have multiple files with the same depth, and any one of the deepest files can be returned if they share the maximum depth.","solution":"def find_deepest_file(paths): Finds the file with the greatest depth in the given filesystem paths. :param paths: List of strings representing the paths. :return: Single string of the path with greatest depth. max_depth = -1 deepest_file = \\"\\" for path in paths: depth = path.count(\'/\') if depth > max_depth: max_depth = depth deepest_file = path return deepest_file"},{"question":"You have been assigned to develop a system simulating the inventory management of a small warehouse. The warehouse is organized into stacks of containers, with each stack storing containers of the same type. Each container is identified by a unique integer ID, and each type of container has a unique type ID. Your task is to implement a function to simulate adding and removing containers from the warehouse, as well as querying the current state of the warehouse. Specifically, you need to implement the functions for the following operations: 1. **Add Container**: Add a container with a given type ID at the top of its stack. 2. **Remove Container**: Remove the top container from a stack corresponding to a given type ID. 3. **Query Stack**: Return the current stack of containers for a given type ID. You will be given a sequence of these operations, and you need to return the results of the \\"Query Stack\\" operations in the order they are requested. Function Signature: ```python def warehouse_operations(operations: List[Tuple[str, Union[int, Tuple[int, int]]]]) -> List[List[int]]: pass ``` Parameters: - `operations` (list): A list of operations. Each operation is a tuple where the first element is a string representing the operation type (\\"Add\\", \\"Remove\\", or \\"Query\\"), and the second element is either an integer (for operations \\"Remove\\" and \\"Query\\") or a tuple of two integers (for the operation \\"Add\\"), where the first integer is the type ID and the second integer is the container ID. Returns: - `results` (list): A list of lists, where each list represents the stack of container IDs for each \\"Query\\" operation in the order they were requested. Examples: ```python # Example 1 operations = [(\\"Add\\", (1, 100)), (\\"Add\\", (1, 101)), (\\"Query\\", 1), (\\"Remove\\", 1), (\\"Query\\", 1)] # Step-by-step: # Add container with ID 100 to stack 1: [100] # Add container with ID 101 to stack 1: [100, 101] # Query stack 1: [100, 101] # Remove container from stack 1: [100] # Query stack 1: [100] # Return: [[100, 101], [100]] print(warehouse_operations(operations)) # Example 2 operations = [(\\"Add\\", (2, 200)), (\\"Add\\", (2, 201)), (\\"Remove\\", 2), (\\"Query\\", 2), (\\"Remove\\", 2), (\\"Query\\", 2)] # Step-by-step: # Add container with ID 200 to stack 2: [200] # Add container with ID 201 to stack 2: [200, 201] # Remove container from stack 2: [200] # Query stack 2: [200] # Remove container from stack 2: [] # Query stack 2: [] # Return: [[200], []] print(warehouse_operations(operations)) ```","solution":"def warehouse_operations(operations): Simulate warehouse operations on container stacks. Parameters: operations (list): A list of operations. Each operation is a tuple where the first element is a string representing the operation type (\\"Add\\", \\"Remove\\", or \\"Query\\"), and the second element is either an integer (for operations \\"Remove\\" and \\"Query\\") or a tuple of two integers (for the operation \\"Add\\"), where the first integer is the type ID and the second integer is the container ID. Returns: results (list): A list of lists, where each list represents the stack of container IDs for each \\"Query\\" operation in the order they were requested. stacks = {} results = [] for operation in operations: op_type = operation[0] if op_type == \\"Add\\": type_id, container_id = operation[1] if type_id not in stacks: stacks[type_id] = [] stacks[type_id].append(container_id) elif op_type == \\"Remove\\": type_id = operation[1] if type_id in stacks and stacks[type_id]: stacks[type_id].pop() elif op_type == \\"Query\\": type_id = operation[1] if type_id in stacks: results.append(list(stacks[type_id])) else: results.append([]) return results"},{"question":"You are organizing a marathon event and need to assign bib numbers to runners. Each runner must have a unique bib number, starting from 1 up to the total number of runners registered. Due to a malfunction in your registration system, you have only recorded some runners and their bib numbers, while others are missing. You have provided a list of integers where each integer represents a recorded bib number. Your task is to determine the smallest possible bib number that is not in the provided list of recorded bib numbers. Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the following t lines starts with an integer n (1 ≤ n ≤ 10^5) — the number of recorded bib numbers for that test case, followed by n space-separated integers representing the recorded bib numbers (1 ≤ bib number ≤ 10^9). Output For each test case, print one integer — the smallest possible bib number that is not in the provided list of recorded bib numbers. Examples Input 4 5 4 2 5 3 1 3 2 3 1 2 7 8 1 1000000000 Output 6 4 1 1 Note In the first sample, the recorded bib numbers are {4, 2, 5, 3, 1}. The smallest bib number not in this list is 6. In the second sample, the recorded bib numbers are {2, 3, 1}. The smallest bib number not in this list is 4. In the third sample, the recorded bib numbers are {7, 8}. The smallest bib number not in this list is 1. In the fourth sample, the recorded bib number is {1000000000}. The smallest bib number not in this list is 1.","solution":"def smallest_missing_bib_number(t, test_cases): results = [] for case in test_cases: n, bib_numbers = case[0], set(case[1:]) smallest_missing = 1 while smallest_missing in bib_numbers: smallest_missing += 1 results.append(smallest_missing) return results"},{"question":"Alice is arranging a party for her friends, and she needs to prepare tables and chairs for all her guests. She has a list of friends who will attend the party, and each guest has specific requirements in terms of chairs they need. Alice wants to set up the least number of tables given that each table can accommodate a maximum of x chairs. Alice has a limited number of tables where each table can only hold a fixed number of chairs. Help Alice figure out the minimum number of tables she needs to reserve. Input The first line contains two integers n and x (1 ≤ n ≤ 1000, 1 ≤ x ≤ 100) — the number of guests and the maximum number of chairs each table can accommodate, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the number of chairs each guest requires. Output Output one integer — the minimum number of tables Alice needs to reserve. Examples Input 5 4 1 2 3 4 2 Output 3 Input 3 2 2 2 2 Output 3 Input 4 5 1 1 1 1 Output 1 Input 6 6 3 3 3 3 3 3 Output 3 Note In the first example, Alice can arrange tables as follows: - One table for guests requiring 4 and 1 chairs. - One table for guests requiring 3 and 1 chairs. - One table for the guest requiring 2 chairs. In the second example, each guest requires a table for themselves. In the third example, all guests can be accommodated in one table as their total chair requirement (1+1+1+1) is less or equal to the table limit (5). In the fourth example, Alice needs to arrange 3 tables because each guest requires 3 chairs, and each table can hold a maximum of 6 chairs.","solution":"import math def min_tables_needed(n, x, chairs): Returns the minimum number of tables needed. Parameters: n (int): Number of guests. x (int): Maximum number of chairs each table can hold. chairs (list): List of integers where each integer represents the number of chairs required by a guest. Returns: int: Minimum number of tables needed. total_chairs_needed = sum(chairs) return math.ceil(total_chairs_needed / x)"},{"question":"You are given a 2D matrix with N rows and M columns. Each cell contains either a 0 or a 1. Your task is to find the size of the largest rectangle containing only 1s in the matrix and return its area. Constraints * All values in input are integers. * 1 leq N, M leq 300 * The values in the matrix are either 0 or 1. Input * The first line contains two integers, N and M, representing the number of rows and columns in the matrix. * The next N lines contain M integers each, representing the matrix. Output * Print a single integer, the area of the largest rectangle containing only 1s. Examples Input 4 4 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 Output 6 Input 2 2 0 1 1 1 Output 2","solution":"def maximalRectangle(matrix): def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area if not matrix: return 0 n = len(matrix) m = len(matrix[0]) heights = [0] * m max_area = 0 for i in range(n): for j in range(m): if matrix[i][j] == 0: heights[j] = 0 else: heights[j] += 1 max_area = max(max_area, max_histogram_area(heights)) return max_area"},{"question":"Amanda is organizing a charity walkathon event. There is a route of exactly 1000 meters with evenly spaced checkpoints installed every 50 meters. Participants in the walkathon start at the 0-meter mark and have to reach the 1000-meter mark, visiting as many checkpoints as they can. Amanda wants to incentivize participation by giving out rewards after participants reach certain predefined distances: d1 meters, d2 meters, ..., and dm meters. However, she does not want to give out rewards too frequently. She decides that a reward should only be given out if the next checkpoint to be reached is further from the previous checkpoint where a reward was given than a certain minimum distance k. Your task is to help Amanda determine the checkpoints at which rewards should be given. Assume that Amanda always gives out the first reward at the first predefined distance. Input The first line contains two integers m (1 ≤ m ≤ 100) and k (1 ≤ k ≤ 1000). The second line contains m integers d1, d2, ..., dm (0 ≤ di ≤ 1000), representing the predefined distances. Output Output in a single line the indices of the checkpoints where Amanda should give out rewards. Note that the checkpoints are indexed starting from 0, i.e., the 0-meter mark is checkpoint 0, the 50-meter mark is checkpoint 1, etc. Examples Input 5 150 0 200 400 600 800 Output 0 4 8 12 16 Input 6 50 0 100 200 250 750 1000 Output 0 2 4 5 15 20 Note In the first test sample, Amanda gives the first reward at distance 0. The next reward cannot be given until at least 150 meters later. Therefore, the next rewards are given at distances 200, 400, 600, and 800 — corresponding to checkpoints 4, 8, 12, and 16 respectively. In the second test sample, the rewards are given at distances 0, 100, and 200. Since there is no checkpoint between 200 and 250 meters where a reward is already distributed, the next reward is given at distance 250 and so on.","solution":"def reward_checkpoints(m, k, distances): Determines the checkpoints where rewards should be given. Parameters: m (int): Number of predefined distances. k (int): Minimum distance between consecutive rewards. distances (list): List of predefined distances. Returns: list: Indices of checkpoints where rewards should be given. checkpoints = [] last_reward_dist = -k # Initialize with a value lower than the first possible reward checkpoint_index = 0 # Index for checkpoints # Iterate over distances to find reward checkpoints for dist in distances: if dist - last_reward_dist >= k: checkpoint_index = dist // 50 checkpoints.append(checkpoint_index) last_reward_dist = dist return checkpoints"},{"question":"You are given an undirected graph with `n` nodes, labeled from `1` to `n`, and `m` edges. Each edge has a cost associated with it. Your task is to find the minimum cost required to construct a spanning tree of the graph (i.e., a tree that includes all nodes of the graph). If it is not possible to construct such a spanning tree, return `-1`. Constraint * 1 ≤ n ≤ 1000 * 0 ≤ m ≤ 10000 Input Input is given from Standard Input in the following format: ``` n m u1 v1 w1 u2 v2 w2 ... um vm wm ``` Where `ui` and `vi` are the endpoints of the i-th edge, and `wi` is the cost of the i-th edge. Output Print the minimum cost required to construct a spanning tree. If it is not possible, print -1. Examples Input ``` 4 4 1 2 1 2 3 2 3 4 3 4 1 4 ``` Output 6 Input ``` 4 3 1 2 1 2 3 2 3 4 3 ``` Output 6 Input ``` 4 1 1 2 1 ``` Output -1","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(n, edges): result = [] i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: if i >= len(edges): return -1 u, v, w = edges[i] i = i + 1 x = find(parent, u-1) y = find(parent, v-1) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) minimumCost = 0 for u, v, weight in result: minimumCost += weight return minimumCost def minimum_spanning_tree(n, m, edge_list): if n == 1: # If there is only one node, the cost is 0 return 0 edges = [] for edge in edge_list: u, v, w = edge edges.append((u, v, w)) min_cost = kruskal_mst(n, edges) return min_cost"},{"question":"A common task in text processing is to search and replace specific patterns in a given text string. One such problem involves replacing repeated sequences of characters with a simplified version. Given a string, you need to replace every sequence of three or more consecutive identical characters with just two of those characters. For example, the string \\"aaabbbccc\\" should be transformed into \\"aabbcc\\". Write a function that performs this task. Input The input contains a single line with the string s, which consists of lowercase English letters and has a length from 1 to 200000 characters. Output Print the modified string after replacing every sequence of three or more consecutive identical characters with just two of those characters. Examples Input aaabbbaaa Output aabbaa Input cccccc Output cc Input abc Output abc Note In the first example, the sequences \\"aaa\\" and \\"bbb\\" each get reduced to \\"aa\\" and \\"bb\\" respectively, leading to the modified string \\"aabbaa\\". In the second example, the sequence \\"cccccc\\" gets reduced to \\"cc\\". In the third example, there are no sequences of three or more consecutive identical characters, so the string remains unchanged.","solution":"def replace_repeated_sequences(s): This function replaces every sequence of three or more consecutive identical characters with just two of those characters. if not s: return s result = [] count = 1 n = len(s) for i in range(1, n): if s[i] == s[i - 1]: count += 1 else: result.append(s[i - 1] * min(2, count)) count = 1 result.append(s[-1] * min(2, count)) return \'\'.join(result)"},{"question":"A city has decided to plant trees along one of its long roads. The city\'s landscape architect wants to distribute the trees evenly along the road. The road is represented as a straight line of length `L` meters, and the trees will be planted exactly `D` meters apart. The trees should be planted such that the first tree is at the beginning of the road (position 0 meters), and the last tree is at the end of the road (position `L` meters). However, the total number of trees, `N`, is limited. Your task is to help the landscape architect determine the maximum number of trees he can plant on the road satisfying the given conditions. Input The first line contains a positive integer `L` (1 ≤ L ≤ 10^9), representing the length of the road in meters. The second line contains a positive integer `D` (1 ≤ D ≤ 10^9), representing the distance between each tree in meters. The third line contains a positive integer `N` (1 ≤ N ≤ 10^6), representing the maximum number of trees that can be planted. Output Print the maximum number of trees that can be planted along the road. Examples Input 100 10 15 Output 11 Input 50 7 10 Output 8 Input 20 5 3 Output 3","solution":"def max_trees(L, D, N): Returns the maximum number of trees that can be planted along the road. # Calculate the total positions available for planting trees total_positions = L // D + 1 # The maximum number of trees is the minimum of total positions and the limit N return min(total_positions, N)"},{"question":"You have been given a string S consisting of only lowercase alphabets. You need to determine the character that appears the most frequently in the string. If there are multiple characters with the same highest frequency, return the alphabetically smallest one. Input Format: The first line contains a single string S denoting the input string. Output Format: Print a single character denoting the most frequent character in the string. If there are multiple characters with the same highest frequency, print the alphabetically smallest one. Constraints: 1 ≤ |S| ≤ 10^5 (|S| denotes the length of the string S) SAMPLE INPUT aabbbcc SAMPLE OUTPUT b Explanation The character \'b\' appears the most frequently (3 times) in the string \'aabbbcc\'. \'a\' and \'c\' both appear 2 times. Hence, \'b\' is the most frequent character in this string.","solution":"def most_frequent_character(s): Returns the most frequent character in the string s. If multiple characters have the same highest frequency, the alphabetically smallest character is returned. from collections import Counter freq = Counter(s) max_frequency = max(freq.values()) most_frequent_chars = [char for char, count in freq.items() if count == max_frequency] return min(most_frequent_chars)"},{"question":"You are given a list of `n` integers. You need to find the contiguous subarray (containing at least one number) which has the largest product, and return its product. Your task is to implement a function that will return the maximum product of a contiguous subarray within the given array. Function Signature: ```python def maxProduct(nums: List[int]) -> int: ``` Input - A single list `nums` containing `n` integers. - 1 leq n leq 10^4 - -10 leq text{nums}[i] leq 10 Output - A single integer representing the maximum product of a contiguous subarray. Example Input ```python [2, 3, -2, 4] ``` Output ```python 6 ``` Explanation The contiguous subarray `[2, 3]` has the largest product: 2 times 3 = 6. Input ```python [-2, 0, -1] ``` Output ```python 0 ``` Explanation The result cannot be 2, because the subarray must contain at least one integer. In this case, both `[0]` and `[-1]` provide a product of 0 but not 2. Input ```python [-2, 3, -4] ``` Output ```python 24 ``` Explanation The contiguous subarray `[-2, 3, -4]` has the largest product: -2 times 3 times -4 = 24.","solution":"from typing import List def maxProduct(nums: List[int]) -> int: if not nums: return 0 max_prod = min_prod = result = nums[0] for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result"},{"question":"Bob is working on a project where he needs to rearrange words in sentences alphabetically. However, he\'s too busy to write the code for it and has asked for your help. Write a function that takes a sentence and returns the sentence with the words rearranged in alphabetical order. For simplicity, you can assume that the sentence will only contain lowercase alphabetic characters and spaces with no punctuation. Your task is to write a program that accepts multiple test cases, processes each sentence, and rearranges the words in alphabetical order. INPUT: The first line contains the number of test cases T, followed by T lines, each containing a sentence. OUTPUT: For each test case, output the sentence with the words rearranged in alphabetical order on a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ Length of each sentence ≤ 100 SAMPLE INPUT 2 the quick brown fox lazy dog jumps over SAMPLE OUTPUT brown fox quick the dog jumps lazy over","solution":"def rearrange_sentences(sentences): Receives a list of sentences and returns a list where each sentence\'s words are rearranged alphabetically. rearranged_sentences = [] for sentence in sentences: words = sentence.split() words.sort() rearranged_sentences.append(\' \'.join(words)) return rearranged_sentences def process_test_cases(test_cases): Process multiple test cases and returns sentences with words rearranged alphabetically for each test case. results = [] for sentence in test_cases: results.extend(rearrange_sentences([sentence])) return results"},{"question":"You are given a large array of non-negative integers. Your task is to process multiple queries asking for the sum of a specific subarray (from index l to r, inclusive). Input The first line contains two integers n and q, the size of the array and the number of queries. The second line contains n space-separated non-negative integers representing the array. The next q lines each contain two integers l and r describing a query, where 0 ≤ l ≤ r < n. Output For each query, print the sum of the array elements from index l to index r. Constraints 1 ≤ n, q ≤ 2*10^5 0 ≤ array elements ≤ 10^4 0 ≤ l ≤ r < n Example Input: 5 3 1 2 3 4 5 0 2 1 3 0 4 Output: 6 9 15 Explanation For the first query, the sum of the subarray from index 0 to 2 is 1 + 2 + 3 = 6. For the second query, the sum of the subarray from index 1 to 3 is 2 + 3 + 4 = 9. For the third query, the sum of the subarray from index 0 to 4 is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def preprocess_array(array): Preprocesses the array to create a prefix sum array. prefix_sums = [0] * (len(array) + 1) for i in range(1, len(prefix_sums)): prefix_sums[i] = prefix_sums[i-1] + array[i-1] return prefix_sums def query_sum(prefix_sums, l, r): Returns the sum of elements from index l to r, inclusive, using the prefix sums array. return prefix_sums[r+1] - prefix_sums[l]"},{"question":"Anna is working on a software project that requires her to generate a special kind of password. The password should be a string consisting of only lowercase English alphabet letters. The goal is to ensure the password is both secure and reasonably easy to remember by following these rules: - The password length should be exactly n characters. - The password must include at least one vowel (a, e, i, o, u). - The password must include at least one consonant (all other lowercase English alphabet letters). Your task is to generate a password that meets these criteria. If it\'s not possible to generate such a password with the given constraints, output a single line with the integer -1. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the desired length of the password. Output If a valid password is possible, output a single line containing the password. If there are multiple valid passwords, you may output any of them. If a valid password is not possible, output a single line with the integer -1. Examples Input 5 Output abcde Input 2 Output ab Input 1 Output -1 Note In the first example, one possible valid password is \\"abcde\\" which contains both vowels and consonants and has a length of 5. In the second example, one possible valid password is \\"ab\\" which includes both a vowel and a consonant and has a length of 2. In the third example, it is not possible to create a password of length 1 that includes both a vowel and a consonant, so the output is -1.","solution":"def generate_password(n): Generates a password of length n that includes at least one vowel and one consonant. Returns the password if possible, otherwise returns -1. vowels = \\"aeiou\\" consonants = \\"bcdfghjklmnpqrstvwxyz\\" if n < 2: return -1 password = [] # Ensure there\'s at least one vowel and one consonant password.append(vowels[0]) password.append(consonants[0]) # Fill the rest of the password to reach the required length for i in range(n - 2): password.append(consonants[(i + 1) % len(consonants)]) return \'\'.join(password)"},{"question":"You are given an integer n and an array of n integers. Your task is to determine the minimum number of operations required to make all the elements of the array equal. You are allowed to perform two types of operations on the array: 1. Decrease any element of the array by 1. This operation costs you 1 coin. 2. Increase any element of the array by 1. This operation also costs you 1 coin. Given the initial array, find the minimum number of coins required to make all the elements of the array equal. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000,000) — the elements of the array. Output Output a single integer — the minimum number of coins required to make all the elements of the array equal. Examples Input 3 1 2 3 Output 2 Input 4 10 10 10 10 Output 0 Input 5 1 1 1 1 2 Output 1 Note In the first example, you can decrease the third element by 1 and increase the first element by 1 to make all elements equal to 2. The total cost is 2 coins. In the second example, all elements are already equal, so no operations are required and the cost is 0 coins. In the third example, you can increase any of the first four elements by 1 to make all elements equal to 2. The total cost is 1 coin.","solution":"def min_operations_to_make_equal(n, arr): Determines the minimum number of operations required to make all elements of the array equal. Parameters: n (int): The number of elements in the array. arr (list of int): The elements of the array. Returns: int: The minimum number of operations required. if n == 0: return 0 median_val = sorted(arr)[n // 2] return sum(abs(x - median_val) for x in arr)"},{"question":"Imagine you are given a list of `N` strings. Each string in the list represents a binary number (composed of only \'0\'s and \'1\'s). Your task is to find the longest common prefix among all the strings in the list. The longest common prefix of a set of strings is the longest initial portion of all strings that is identical. Constraints: * 1 leq N leq 100 * 1 leq length of each string leq 100 Input The input consists of a single integer `N` followed by `N` lines, each line containing one binary string. Output Print the longest common prefix. If there is no common prefix, print an empty string. Examples Input 4 101100 10110 1011 1010101 Output 101 Input 3 1110 1101 1011 Output 1","solution":"def longest_common_prefix(strings): Returns the longest common prefix of a list of binary strings. Args: strings (list of str): List of binary strings. Returns: str: The longest common prefix string. if not strings: return \\"\\" # Initialize the prefix with the first string prefix = strings[0] for string in strings[1:]: # Compare the prefix with each string, shrinking the prefix if necessary i = 0 while i < len(prefix) and i < len(string) and prefix[i] == string[i]: i += 1 prefix = prefix[:i] if prefix == \\"\\": break return prefix"},{"question":"Given an integer array `nums`, your task is to determine the maximum product that can be obtained by multiplying two distinct elements of the array. Return this maximum product. Input The first line contains an integer n (2 ≤ n ≤ 105), the size of the array. The second line contains n space-separated integers representing the elements of the array `nums` (−103 ≤ nums[i] ≤ 103). Output Output a single integer, which is the maximum product of two distinct elements in the array. Examples Input 5 3 4 5 2 1 Output 20 Input 4 -1 -2 -3 -4 Output 12 Input 3 -10 0 5 Output 0 Note In the first example, the maximum product is obtained by multiplying 4 and 5, resulting in 20. In the second example, the maximum product is obtained by multiplying -3 and -4, resulting in 12. In the third example, the maximum product is obtained by multiplying 0 and 5, resulting in 0.","solution":"def max_product(nums): Returns the maximum product obtained by multiplying two distinct elements of the array nums. if len(nums) < 2: raise ValueError(\\"The array must have at least two distinct elements\\") nums.sort() # Possible maximum products: # 1. Product of the two largest numbers max_prod1 = nums[-1] * nums[-2] # 2. Product of the two smallest numbers (if they are both negative, their product is positive) max_prod2 = nums[0] * nums[1] return max(max_prod1, max_prod2)"},{"question":"The problem is as follows: A robot is located at the top-left corner of an m × n grid (marked \'Start\' in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the diagram below). Now consider if some obstacles are added to the grids. How many unique paths would there be? An obstacle and empty space are marked as 1 and 0 respectively in the grid. Your task is to write a program that determines the number of unique paths that the robot can take to reach the bottom-right corner of the grid, without hitting an obstacle. Example Input: [ text{[ [0,0,0], [0,1,0], [0,0,0] ]} ] Output: 2 Input: The input includes an m x n grid where m and n are integers within the limit (1 ≤ m, n ≤ 100). Output: The output should be a single integer indicating the number of unique paths. Note: In the first example, there is a 3x3 grid where the robot starts at grid[0][0] and wants to move to grid[2][2]. An obstacle is located at grid[1][1]. There are two unique paths from start to finish: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right However, the robot cannot pass through the grid[1][1] since there is an obstacle.","solution":"def unique_paths_with_obstacles(grid): Determines the number of unique paths in a grid with obstacles. Args: - grid (List[List[int]]): 2D list representing the grid where 0 is an empty space and 1 is an obstacle. Returns: - int: Number of unique paths from the top-left to the bottom-right corner without hitting obstacles. if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) # Initializing the DP table dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # starting point # filling the first row for j in range(1, n): dp[0][j] = dp[0][j-1] if grid[0][j] == 0 else 0 # filling the first column for i in range(1, m): dp[i][0] = dp[i-1][0] if grid[i][0] == 0 else 0 for i in range(1, m): for j in range(1, n): if grid[i][j] == 1: dp[i][j] = 0 else: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Aria loves collecting stickers and she has received a new set of stickers containing animal images. She wants to distribute these stickers to her m cousins in such a way that no cousin gets two stickers with the same animal. Each sticker has an animal image denoted by a lowercase letter of the Latin alphabet. Aria will be happy if she manages to distribute all stickers to her cousins following the rule mentioned above. If it\'s possible to do so, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of stickers and the number of cousins. The second line contains a string t of length n — representing the animal images on stickers. Output Answer to the task — \\"YES\\" or \\"NO\\" in a single line. Examples Input 5 2 abbcc Output YES Input 4 3 aaaa Output NO Note In the first example, Aria can give the first sticker to the first cousin, the second and third stickers to the second cousin, and the last two stickers also to the first cousin, which follows the rule. In the second example, there are not enough cousins to give each a unique sticker of animal \\"a\\", hence, the answer is \\"NO\\".","solution":"def can_distribute_stickers(n, m, t): Determines if it\'s possible to distribute stickers to m cousins such that no cousin gets two stickers with the same animal. Parameters: n : int : Number of stickers m : int : Number of cousins t : str : String of animal images on stickers Returns: str : \\"YES\\" if possible to distribute stickers accordingly, \\"NO\\" otherwise. from collections import Counter # Count the frequency of each animal image in the stickers counts = Counter(t) # Check if any animal image appears more times than there are cousins for count in counts.values(): if count > m: return \\"NO\\" return \\"YES\\""},{"question":"Given an array a of size n containing only 0, -1, and 1, write a function to find and print the length of the longest subarray with a sum equal to 0. Input Format: - First line contains T, the number of test cases (1 ≤ T ≤ 10). - For each test case, the first line contains n, the size of the array (1 ≤ n ≤ 10^5). - The second line of each test case contains n space-separated integers. (a[i] ∈ {-1, 0, 1}). Output Format: - For each test case, print a single line containing the length of the longest subarray with a sum equal to 0. Sample Input: 2 6 1 -1 1 -1 1 -1 5 1 -1 -1 1 1 Sample Output: 6 4","solution":"def longest_subarray_zero_sum(arr): Finds the length of the longest subarray with a sum equal to 0. # Dictionary to store the first occurrence of a prefix sum prefix_sum_index = {} prefix_sum = 0 max_length = 0 for i, num in enumerate(arr): prefix_sum += num if prefix_sum == 0: max_length = i + 1 elif prefix_sum in prefix_sum_index: max_length = max(max_length, i - prefix_sum_index[prefix_sum]) else: prefix_sum_index[prefix_sum] = i return max_length def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(longest_subarray_zero_sum(arr)) return results def parse_input(input_data): lines = input_data.split(\'n\') T = int(lines[0]) test_cases = [] current_line = 1 for _ in range(T): n = int(lines[current_line]) arr = list(map(int, lines[current_line + 1].split())) test_cases.append(arr) current_line += 2 return test_cases"},{"question":"Alice owns a bakery, and she likes to keep track of her sales data efficiently. She wishes to have an algorithm that can process sales data such that it can yield the total sales per day of the week quickly. - The input represents the sales data of the entire week (starting from Sunday to Saturday) for n days. - Each day’s data is a list of seven integers representing the sales amount from Sunday through Saturday. You need to write a program that calculates the total sales for each day of the week across all n days. Input: The first line contains the integer n (1 ≤ n ≤ 100), representing the number of days for which sales data is available. The next n lines each contain seven integers, where the i-th integer represents the sales for the i-th day of the week. Output: Print seven integers in a single line, representing the total sales for Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively. Example: Input: 3 10 20 30 40 50 60 70 5 15 25 35 45 55 65 7 14 21 28 35 42 49 Output: 22 49 76 103 130 157 184","solution":"def calculate_total_sales(n, sales_data): Calculates the total sales for each day of the week across all n days. Args: n (int): Number of days of sales data. sales_data (list of list of int): Sales data where each list contains sales from Sunday to Saturday. Returns: list of int: Total sales for each day from Sunday to Saturday. total_sales = [0] * 7 for day_data in sales_data: for i in range(7): total_sales[i] += day_data[i] return total_sales # Example usage n = 3 sales_data = [ [10, 20, 30, 40, 50, 60, 70], [5, 15, 25, 35, 45, 55, 65], [7, 14, 21, 28, 35, 42, 49] ] print(calculate_total_sales(n, sales_data)) # Output: [22, 49, 76, 103, 130, 157, 184]"},{"question":"John is a software engineer who likes to create new data structures. Recently he came up with a variation of a stack called a \\"backward stack\\". This backward stack has all the regular operations of a stack, but with an additional operation called `shift`. Here are the operations supported by John’s backward stack: - `push x`: Add an element `x` on top of the stack. - `pop`: Remove the element on top of the stack and return it. - `shift k`: Remove the top `k` elements of the stack and push them at the bottom of the stack in the same order they were removed. John wants to implement this backward stack and ensure all operations work perfectly. Can you help him by writing the code for the backward stack? Implement a class `BackwardStack` with the following methods: - `def __init__(self)`: Initializes the backward stack. - `def push(self, x: int) -> None`: Pushes the element `x` on top of the stack. - `def pop(self) -> int`: Removes and returns the element on top of the stack. If the stack is empty, return -1. - `def shift(self, k: int) -> None`: Removes the top `k` elements from the stack and places them at the bottom in the original order. It\'s guaranteed that `0 ≤ k ≤ len(stack)`. You may assume that all operations are valid and happen in sequence as per module operations. # Example: ```python # Initialize the backward stack bs = BackwardStack() # Perform a sequence of operations bs.push(1) # Stack: [1] bs.push(2) # Stack: [1, 2] bs.push(3) # Stack: [1, 2, 3] bs.shift(2) # Stack: [3, 1, 2] print(bs.pop()) # Output: 2, Stack: [3, 1] bs.push(4) # Stack: [3, 1, 4] print(bs.pop()) # Output: 4, Stack: [3, 1] bs.shift(1) # Stack: [1, 3] print(bs.pop()) # Output: 3 print(bs.pop()) # Output: 1 print(bs.pop()) # Output: -1 (stack is empty) ``` Write the `BackwardStack` class following the description provided.","solution":"class BackwardStack: def __init__(self): Initializes the backward stack. self.stack = [] def push(self, x: int) -> None: Pushes the element x on top of the stack. self.stack.append(x) def pop(self) -> int: Removes and returns the element on top of the stack. If the stack is empty, return -1. if self.stack: return self.stack.pop() else: return -1 def shift(self, k: int) -> None: Removes the top k elements from the stack and places them at the bottom in the original order. if k > 0: # Remove top k elements top_k_elements = self.stack[-k:] self.stack = self.stack[:-k] # Place them at the bottom in the original order self.stack = top_k_elements + self.stack"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB Write a function that takes as input a string `s` which consists of lowercase alphabetical characters, and an integer `k`. The function should return the length of the longest substring that contains at most `k` distinct characters. Example Input aabbcc 2 Output 4 Input aaabbbccc 1 Output 3","solution":"def length_of_longest_substring_k_distinct(s, k): if k == 0: return 0 n = len(s) if n == 0 or k >= n: return n left = 0 right = 0 max_length = 0 char_count = {} while right < n: if s[right] in char_count: char_count[s[right]] += 1 else: char_count[s[right]] = 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Berland Bank is modernizing its transaction processing system. One important task is to ensure the consistency and correctness of transactions as they are processed in real time. In this task, you need to implement a system that can validate logs of transactions. A transaction log contains records of various types of financial transactions, including deposits, withdrawals, and transfers. Each record is timestamped and uniquely identified. For simplicity, we\'ll assume that transactions can be specified using the following format: - **D [timestamp] [transaction_id] [account_id] [amount]**: A deposit transaction - **W [timestamp] [transaction_id] [account_id] [amount]**: A withdrawal transaction - **T [timestamp] [transaction_id] [source_account_id] [destination_account_id] [amount]**: A transfer transaction Transactions should be processed in the order of their timestamps. Your task is to validate these transactions according to the following rules: 1. A deposit transaction should increase the balance of the specified account by the given amount. 2. A withdrawal transaction should decrease the balance of the specified account by the given amount. If the balance is insufficient, the transaction is invalid. 3. A transfer transaction should decrease the balance of the source account and increase the balance of the destination account by the given amount. If the source account balance is insufficient, the transaction is invalid. You will write a program that processes a list of transaction logs and prints the results of their validation. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of transaction logs. Each of the subsequent n lines contains a transaction log. Each log is formatted as described above. Output For each transaction, print \\"VALID\\" if the transaction is processed successfully. If a transaction is invalid (due to insufficient balance), print \\"INVALID\\". Example Input 5 D 1 1 1001 500 W 2 2 1001 300 W 3 3 1001 300 T 4 4 1001 1002 200 T 5 5 1003 1002 100 Output VALID VALID INVALID VALID INVALID","solution":"def validate_transactions(n, transactions): accounts = {} results = [] for transaction in transactions: parts = transaction.split() transaction_type = parts[0] timestamp = int(parts[1]) transaction_id = int(parts[2]) if transaction_type == \\"D\\": account_id = int(parts[3]) amount = int(parts[4]) if account_id not in accounts: accounts[account_id] = 0 accounts[account_id] += amount results.append(\\"VALID\\") elif transaction_type == \\"W\\": account_id = int(parts[3]) amount = int(parts[4]) if account_id not in accounts: accounts[account_id] = 0 if accounts[account_id] >= amount: accounts[account_id] -= amount results.append(\\"VALID\\") else: results.append(\\"INVALID\\") elif transaction_type == \\"T\\": source_account_id = int(parts[3]) destination_account_id = int(parts[4]) amount = int(parts[5]) if source_account_id not in accounts: accounts[source_account_id] = 0 if destination_account_id not in accounts: accounts[destination_account_id] = 0 if accounts[source_account_id] >= amount: accounts[source_account_id] -= amount accounts[destination_account_id] += amount results.append(\\"VALID\\") else: results.append(\\"INVALID\\") return results"},{"question":"Alice and Bob are playing a game involving strings composed of the characters \'A\' and \'B\'. Alice starts by choosing a positive integer n and generates a string s of length n consisting only of the characters \'A\' and \'B\'. Bob has a list of special substrings l1, l2, ..., lk that he considers lucky. The length of each lucky substring is exactly m. The game involves finding how many substrings of length m in string s are considered lucky by Bob. Your task is to write a program that determines how many of Bob\'s lucky substrings appear in Alice\'s string exactly. Input The first line contains two integers n and m (1 ≤ m ≤ n ≤ 1000), representing the length of Alice\'s string s and the length of each lucky substring respectively. The second line contains the string s, consisting of only \'A\' and \'B\' characters. The third line contains an integer k (1 ≤ k ≤ 100), representing the number of lucky substrings. Each of the next k lines contains a lucky substring of length m, consisting of only \'A\' and \'B\' characters. Output Print a single integer representing the number of lucky substrings that appear in Alice\'s string. Examples Input 10 3 ABABBAABAA 2 ABA ABB Output 3 Input 5 2 AABAB 3 AB AA BA Output 4 Note In the first example, the lucky substrings of length 3 are \\"ABA\\" and \\"ABB\\". The substrings of length 3 in the string s are \\"ABA\\", \\"BAB\\", \\"ABB\\", \\"BBA\\", \\"BAA\\", \\"AAB\\", \\"ABA\\", \\"BAA\\", and among these, \\"ABA\\" appears twice and \\"ABB\\" appears once, making a total of 3 occurrences. In the second example, the lucky substrings of length 2 are \\"AB\\", \\"AA\\", and \\"BA\\". The substrings of length 2 in the string s are \\"AA\\", \\"AB\\", \\"BA\\", \\"AB\\". All lucky substrings appear once except for \\"AB\\" which appears twice, making a total of 4 occurrences.","solution":"def count_lucky_substrings(n, m, s, k, lucky_substrings): Given length of the string `n`, length of lucky substrings `m`, the string `s`, the number of lucky substrings `k`, and the list of lucky substrings, this function counts how many lucky substrings appear in the string `s`. count = 0 substrings_count = {} # Find all substrings of length m in s and store their counts for i in range(n - m + 1): substring = s[i:i + m] if substring in substrings_count: substrings_count[substring] += 1 else: substrings_count[substring] = 1 # Count how many of these substrings are in the list of lucky substrings for lucky_substring in lucky_substrings: if lucky_substring in substrings_count: count += substrings_count[lucky_substring] return count # Example usage: # n, m = 10, 3 # s = \\"ABABBAABAA\\" # k = 2 # lucky_substrings = [\\"ABA\\", \\"ABB\\"] # print(count_lucky_substrings(n, m, s, k, lucky_substrings)) # Output: 3"},{"question":"Write a function that takes a list of integers and returns a new list where each value is replaced by the product of all other values in the original list, without using division operations. Input: The input consists of a single line containing space-separated integers, where each integer is between -10 and 10, inclusive. The length of the list will be between 2 and 100, inclusive. Output: The output should be a single line containing space-separated integers representing the transformed list. Example: Input: 1 2 3 4 Output: 24 12 8 6 Explanation: The product of all numbers in the original list is 1*2*3*4 = 24. Each position in the output list is the product of all numbers except the one at that position, so: - For the first number (1), the product of 2, 3, and 4 is 24. - For the second number (2), the product of 1, 3, and 4 is 12. - For the third number (3), the product of 1, 2, and 4 is 8. - For the fourth number (4), the product of 1, 2, and 3 is 6.","solution":"def product_of_others(lst): Returns a list where each element is the product of all other elements in the input list. n = len(lst) left_products = [1] * n right_products = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * lst[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * lst[i + 1] result = [left_products[i] * right_products[i] for i in range(n)] return result"},{"question":"Write a program that reads a string and determines if it contains at least one digit, one lowercase letter, and one uppercase letter. Print \\"Valid\\" if it does, otherwise print \\"Invalid\\". Constraints * The string length will be between 1 and 100 characters. Input A single string is given in a line. Output Print \\"Valid\\" or \\"Invalid\\" in a line. Examples Input Hello123 Output Valid Input hello Output Invalid","solution":"def check_string_validity(s): Returns \'Valid\' if the string contains at least one digit, one lowercase letter, and one uppercase letter, otherwise returns \'Invalid\'. has_digit = any(char.isdigit() for char in s) has_lower = any(char.islower() for char in s) has_upper = any(char.isupper() for char in s) if has_digit and has_lower and has_upper: return \\"Valid\\" else: return \\"Invalid\\""},{"question":"In a city, there are `n` bus stops arranged in a straight line, numbered from 1 to n. Some bus stops have bicycles for hire, while others do not. You are given an array `b` of length `n` where `b[i]` is 1 if the bus stop has bicycles available, and 0 otherwise. Your task is to determine the maximum distance one has to walk to reach the nearest bus stop with bicycles from any bus stop. Input - The first line of input contains one integer `n` (1 ≤ n ≤ 100,000): the number of bus stops. - The second line contains `n` integers b_1, b_2, ..., b_n (each element is either 0 or 1). Output - Print one integer: the maximum distance one has to walk to reach the nearest bus stop with bicycles from any bus stop, or -1 if there are no bus stops with bicycles. Examples Input 6 0 0 1 0 1 0 Output 2 Input 5 1 0 0 0 1 Output 2","solution":"def max_distance_to_bicycle(n, b): Returns the maximum distance one has to walk to reach the nearest bus stop with bicycles. Parameters: n (int) - number of bus stops b (list) - list of integers (1 or 0) indicating the availability of bicycles at each bus stop Returns: int - maximum distance to the nearest bus stop with bicycles or -1 if there are no bicycles available # Handle the case where no bus stops have bicycles if 1 not in b: return -1 # Precompute the nearest bicycle to the left of each bus stop nearest_left = [float(\'inf\')] * n last_bike_pos = float(\'inf\') for i in range(n): if b[i] == 1: last_bike_pos = i nearest_left[i] = last_bike_pos # Precompute the nearest bicycle to the right of each bus stop nearest_right = [float(\'inf\')] * n last_bike_pos = float(\'inf\') for i in range(n-1, -1, -1): if b[i] == 1: last_bike_pos = i nearest_right[i] = last_bike_pos # Determine the maximum distance to the nearest bicycle for each bus stop max_distance = 0 for i in range(n): distance_left = abs(i - nearest_left[i]) if nearest_left[i] != float(\'inf\') else float(\'inf\') distance_right = abs(i - nearest_right[i]) if nearest_right[i] != float(\'inf\') else float(\'inf\') nearest_distance = min(distance_left, distance_right) max_distance = max(max_distance, nearest_distance) return max_distance"},{"question":"The best athletes have their own unique training patterns. Abby is a sprinter, and she keeps track of her speed over a certain period. She logs her speed at regular intervals, and now she wants to analyze her performance. Abby provides you with her speed log and asks you to calculate the average speed, the maximum speed, and the minimum speed over her training session. Write a program that takes several test cases, where each test case consists of Abby\'s speed logs. For each test case, calculate the average, maximum, and minimum speed. INPUT: First line contains the number of test cases T, followed by T sets of lines. Each set starts with an integer N denoting the number of speed logs, followed by N space-separated integer values representing her speed at different intervals. OUTPUT: For each test case, display three space-separated values: average speed (rounded to the nearest integer), maximum speed, and minimum speed. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 0 ≤ speed ≤ 100 SAMPLE INPUT 2 3 5 10 15 4 8 8 8 8 SAMPLE OUTPUT 10 15 5 8 8 8","solution":"def analyze_speeds(test_cases): results = [] for case in test_cases: N, speeds = case average_speed = round(sum(speeds) / N) max_speed = max(speeds) min_speed = min(speeds) results.append((average_speed, max_speed, min_speed)) return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) speeds = list(map(int, lines[index + 1].split())) test_cases.append((N, speeds)) index += 2 return test_cases"},{"question":"You are working on an AI project that classifies emails into different categories: Spam, Promotion, or Personal. To help you with training your model, you have a collection of labeled emails. Each email has been categorized into one of the three categories. You need to write a program to determine the category of an incoming email based on its content. Each email consists of a subject line and a body. The subject line is a single line containing the title of the email, and the body contains several lines of text. Each line can contain any printable characters. Your program should determine the category of emails by comparing the incoming email to the labeled emails you have been provided. Assume the labeled emails are stored in three directories named \\"spam,\\" \\"promotion,\\" and \\"personal.\\" Each file in these directories corresponds to a labeled email and contains the email\'s subject and body. For simplicity, the email classification will follow these steps: 1. Check if the entire subject of the incoming email matches the subject of any email in the \\"spam\\" category. If it matches, classify the email as Spam. 2. If not, check if the subject matches any email in the \\"promotion\\" category. If it matches, classify the email as Promotion. 3. If it still does not match, classify the email as Personal. Input The first line contains the string subject — the subject of the incoming email. The second and subsequent lines contain the body of the email. The size of the email body will not exceed 10 kilobytes. Output Print one of the following integers: 1 — if the email is classified as Spam, 2 — if the email is classified as Promotion, 3 — if the email is classified as Personal. Examples Input Special Offer Inside! Dear customer, we have a special offer for you... Output 2 Input You\'ve won a prize! Click here to claim your prize... Output 1 Input Lunch Plans? Hey, are you free for lunch tomorrow? Output 3","solution":"import os def classify_email(subject, email_directories): Classify the email based on its subject line by checking against pre-labeled emails in provided directories. Args: subject (str): The subject of the incoming email. email_directories (dict): A dictionary where the keys are categories and values are directory paths to labeled emails. Returns: int: Classification of the email as Spam (1), Promotion (2), or Personal (3). for category, directory in email_directories.items(): for filename in os.listdir(directory): with open(os.path.join(directory, filename), \'r\', encoding=\'utf-8\') as file: labeled_subject = file.readline().strip() if subject == labeled_subject: if category == \'spam\': return 1 elif category == \'promotion\': return 2 elif category == \'personal\': return 3 return 3 # Default to Personal if no match found # Example usage: # email_directories = { # \'spam\': \'path/to/spam_directory\', # \'promotion\': \'path/to/promotion_directory\', # \'personal\': \'path/to/personal_directory\' # } # subject = \\"Special Offer Inside!\\" # print(classify_email(subject, email_directories)) # Outputs 2"},{"question":"In a distant land, there lies a magical garden filled with N different types of flowers. Each type of flower has a specific growth period after which it blooms. Every morning, the gardener checks the garden to see if any flower has bloomed. If a flower blooms, the gardener immediately removes it from the garden. You are given the blooming periods of each of the N flowers. Your task is to determine the order in which the flowers will bloom (i.e., the number of days from day 1 when each flower will bloom). Input The first line of the input contains an integer T denoting the number of test cases. Each of the next T test cases starts with an integer N denoting the number of flowers. The next line contains N space-separated integers where the i-th integer denotes the blooming period of the i-th flower. Output For each test case, output one line containing N space-separated integers representing the number of days from day 1 when each flower will bloom, in ascending order. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 1 ≤ blooming periods ≤ 10^5 Example Input: 2 3 2 3 1 4 7 4 5 2 Output: 1 2 3 2 4 5 7 Explanation In the first example, the flowers bloom in the order of 1 day, 2 days, and 3 days, respectively. In the second example, the flowers bloom in the order of 2 days, 4 days, 5 days, and 7 days, respectively.","solution":"def order_of_blooming(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] blooming_periods = test_cases[i][1] blooming_periods.sort() results.append(\\" \\".join(map(str, blooming_periods))) return results"},{"question":"John is a gaming enthusiast and he likes to think of new game ideas. While designing a new game, he encounters a problem with grid movement. The game involves a player moving in a 2D grid starting from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). John comes up with certain obstacles that the player must avoid. Your task is to determine if it is possible for the player to reach the bottom-right corner from the top-left corner, avoiding the obstacles. You are given a 2D grid of size n x m. The cells are either empty \'.\' or contain an obstacle \'#\'. The player can move up, down, left, or right but cannot move diagonally. Input: The first line of input contains two integers n and m denoting the dimensions of the grid. The next n lines contain m characters each, representing the grid. Output: Output \\"YES\\" if it is possible for the player to reach the bottom-right corner from the top-left corner, avoiding obstacles. Otherwise, output \\"NO\\". Constraints: 1 ≤ n, m ≤ 1000 Example: Input: 5 5 .#... ....# #.# ....# ..#.. Output: NO Explanation: The player cannot reach the bottom-right corner without hitting an obstacle. Your task is to implement an algorithm to determine if the player can reach the destination while avoiding obstacles. Note: - Use Breadth-First Search (BFS) or Depth-First Search (DFS) for efficient pathfinding. - Ensure the solution handles the boundaries of the grid properly to avoid out-of-bound errors. Code: ```python def is_reachable(grid, n, m): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" # Read input n, m = map(int, input().split()) grid = [input().strip() for _ in range(n)] # Check the reachability print(is_reachable(grid, n, m)) ```","solution":"def is_reachable(grid, n, m): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"Write a function that takes an integer n and generates the nth Fibonacci number. You are given integer n and you need to compute the nth Fibonacci number using an iterative approach for efficiency. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Notes Your function should handle large values of n efficiently. Due to the nature of the Fibonacci sequence, recursive solutions may lead to a stack overflow or excessive computation times. Therefore, an iterative solution is mandatory. Constraints * 0 ≤ n ≤ 10^6 Input A single integer n is given. Output Print the nth Fibonacci number. Example Input 10 Output 55","solution":"def fibonacci(n): Returns the nth Fibonacci number using iterative approach. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for i in range(2, n + 1): a, b = b, a + b return b"},{"question":"In this problem, you are given a list of integers representing the ages of a group of people. You need to check if the median age of the group is greater than or equal to a given threshold. Input Format: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of people in the group. - The second line contains n space-separated integers representing the ages of the people (1 ≤ age ≤ 120). - The third line contains a single integer k (1 ≤ k ≤ 120), the threshold age. Output Format: - Print \\"YES\\" if the median age is greater than or equal to k. Otherwise, print \\"NO\\". Note: - The median of a group of numbers is the value separating the higher half from the lower half. If there is an odd number of numbers, the median is the middle one. If there is an even number of numbers, the median is the average of the two middle numbers. Examples: Input: 5 20 25 30 35 40 30 Output: YES Input: 4 10 20 30 40 25 Output: NO Explanation: In the first example, the ages sorted in increasing order are [20, 25, 30, 35, 40], and the median is 30, which is equal to the threshold. In the second example, the ages sorted in increasing order are [10, 20, 30, 40], and the median is (20+30)/2 = 25, which is equal to the threshold. However, since it must be strictly greater, the answer is NO.","solution":"def check_median_age(n, ages, k): Returns \\"YES\\" if the median age of the group is greater than or equal to k, otherwise \\"NO\\". ages.sort() if n % 2 == 1: median = ages[n // 2] else: median = (ages[n // 2 - 1] + ages[n // 2]) / 2 if median >= k: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a rectangular matrix with n rows and m columns. Each cell contains a non-negative integer value. Your task is to find the sum of the values in a submatrix with the highest possible sum. A submatrix is a rectangular subset of the original matrix. Input - The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns of the matrix. - Each of the next n lines contains m integers representing the values in the matrix. Each integer in the matrix is between 0 and 1000, inclusive. Output - Print a single integer, the sum of the values in the submatrix with the highest possible sum. Examples Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 45 Input: 2 2 -1 -2 -3 4 Output: 4 Note: In the first sample, the submatrix that gives the highest sum is the entire matrix itself with a sum of 45. In the second sample, the submatrix that gives the maximum sum is the one that only contains the value 4. This is because all the other possible submatrices contain negative values, reducing the overall sum.","solution":"def max_submatrix_sum(matrix): n = len(matrix) m = len(matrix[0]) # Initialize a prefix sum matrix prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] # Build prefix sum matrix for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] max_sum = float(\'-inf\') # Iterate over all possible submatrices for i1 in range(1, n + 1): for j1 in range(1, m + 1): for i2 in range(i1, n + 1): for j2 in range(j1, m + 1): # Calculate sum of submatrix from (i1, j1) to (i2, j2) submatrix_sum = (prefix_sum[i2][j2] - prefix_sum[i1-1][j2] - prefix_sum[i2][j1-1] + prefix_sum[i1-1][j1-1]) max_sum = max(max_sum, submatrix_sum) return max_sum"},{"question":"You are given an array of integers where each element represents the maximum jump length at that position. Your goal is to determine if you can reach the last index starting from the first index. For example: Given array A = [2, 3, 1, 1, 4], the initial position is index 0. The value at A[0] = 2 indicates that you can jump to index 1 or index 2. From index 1 with value 3, you can jump to index 2, 3, or 4. This array results in a path that successfully reaches the last index, so the output should be `true`. Input - An integer array A of size n (1 ≤ n ≤ 10^4) where each element A[i] (0 ≤ A[i] ≤ 1000) represents the maximum jump length from that position. Output - A boolean value `true` if you can reach the last index, and `false` otherwise. Examples Input ``` 2 3 1 1 4 ``` Output ``` true ``` Input ``` 3 2 1 0 4 ``` Output ``` false ``` Explanation: In the first example, you can reach the last index by jumping to the index 1 (value 3) then directly to the last index. In the second example, you can\'t reach the last index, because after reaching the index 3, you can\'t move any further.","solution":"def can_reach_last_index(arr): Determine if you can reach the last index starting from the first index. :param arr: List of integers where each element represents the maximum jump length at that position. :return: True if you can reach the last index, False otherwise. max_reach = 0 for i in range(len(arr)): if i > max_reach: return False max_reach = max(max_reach, i + arr[i]) return True"},{"question":"Given an n x m grid filled with non-negative integers, calculate the maximum score possible by collecting coins following these rules: 1. Start at any cell (i, j) such that 0 ≤ i < n and 0 ≤ j < m. 2. From cell (i, j), you can move to cell (i\', j\') if: - i\' = i + 1, j\' = j - i\' = i - 1, j\' = j - i\' = i, j\' = j + 1 - i\' = i, j\' = j - 1 3. Collect the number of coins at each cell you pass through. You cannot revisit any cell. Your task is to determine the maximum number of coins you can collect starting from any cell in the grid and ending at any cell in the grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. Each of the next n lines contains m integers separated by spaces, representing the grid. Output Print a single integer, the maximum number of coins that can be collected. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Explanation We can start at cell (0,1) with 3 coins, move to cell (1,1) with 5 more coins, then finally move to cell (2,0) with 4 more coins, for a total of 12 coins. Note: - Movement is limited to adjacent cells. - The number of coins collected in any path will be the sum of coins in the visited cells.","solution":"def max_coins(grid): if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[n - 1][m - 1] # Example usage n, m = 3, 3 grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(max_coins(grid)) # Output: 12"},{"question":"John is managing a long list of employees working in his company, and he needs to organize them in a specific order for a company event. John has a list of employees, each defined by their name and age. John needs to sort the employees based on the following rules: 1. Employees should be sorted in ascending order of their age. 2. If two employees have the same age, they should be sorted alphabetically by their name. Your task is to help John sort the list according to the given rules and print the sorted list of employees. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of employees. Each of the following n lines contains a string s and an integer a (1 ≤ |s| ≤ 100, a ≥ 18) — the name of the employee and their age. Output Print n lines, each containing an employee\'s name and their age, sorted according to the given rules. Examples Input 5 Alice 30 Bob 25 Charlie 30 David 25 Eve 35 Output Bob 25 David 25 Alice 30 Charlie 30 Eve 35 Input 3 Zara 22 Adam 30 Brian 22 Output Brian 22 Zara 22 Adam 30","solution":"def sort_employees(n, employees): Sorts employees based on age in ascending order and by name alphabetically if ages are the same. Parameters: n (int): Number of employees. employees (list[tuple]): List of (name, age) tuples representing each employee. Returns: list[tuple]: Sorted list of employees. # Sorting based on the conditions given employees.sort(key=lambda x: (x[1], x[0])) return employees"},{"question":"You are given an array of n integers and a series of q queries. Each query consists of two integers l and r and asks for the number of distinct integers in the subarray from index l to index r (inclusive). Your goal is to answer all the queries efficiently. Input The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100000) — the size of the array and the number of queries, respectively. The second line contains n space-separated integers representing the elements of the array. Each element of the array is a positive integer not exceeding 100000. Each of the following q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) — the indices for each query. Output For each query, print the number of distinct integers in the subarray from index l to index r. Example Input 10 3 1 2 1 3 4 2 3 1 2 4 1 4 2 6 3 9 Output 3 4 4 Explanation For the first query (1,4), the subarray is [1, 2, 1, 3]. There are 3 distinct integers: 1, 2, and 3. For the second query (2,6), the subarray is [2, 1, 3, 4, 2]. There are 4 distinct integers: 1, 2, 3, and 4. For the third query (3,9), the subarray is [1,3,4,2,3,1,2]. There are 4 distinct integers: 1, 2, 3, and 4.","solution":"def count_distinct_elements(arr, queries): Returns the number of distinct elements for each query in the array. Parameters: arr (list): List of elements in the array. queries (list of tuples): List of queries, each query represented by a tuple (l, r). Returns: result (list): List of integers where each integer is the number of distinct elements for the corresponding query. results = [] for l, r in queries: # Generate the subarray for each query subarray = arr[l-1:r] # Get the number of distinct elements in the subarray distinct_count = len(set(subarray)) results.append(distinct_count) return results # Example usage n, q = 10, 3 arr = [1, 2, 1, 3, 4, 2, 3, 1, 2, 4] queries = [(1, 4), (2, 6), (3, 9)] print(count_distinct_elements(arr, queries)) # Output should be [3, 4, 4]"},{"question":"You\'ve been given the task of organizing a sports league that involves teams of different strengths playing matches. Each team\'s strength is represented by a positive integer. You need to divide the teams into several groups for the league phase such that each group adheres to the following rules to ensure a balanced competition: - Each group must have exactly `m` teams. - The sum of team strengths in each group must be as close as possible to the sum of team strengths in other groups. Write a program that divides the teams into the minimum number of groups required to meet these conditions. Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 10^5, 2 ≤ m ≤ 100) – the number of teams and the exact number of teams per group, respectively. The second line contains `n` integers `s_1, s_2, ..., s_n` (1 ≤ s_i ≤ 10^6) – the strength of each team. Output In the first line, print a single integer `g` (1 ≤ g ≤ n) – the minimum number of groups required to meet the conditions. In each of the next `g` lines, print `m` integers – the strengths of the teams in that group. If there are multiple answers, you may output any one of them. Examples Input 6 3 4 5 7 1 9 3 Output 2 4 5 7 1 9 3 Input 5 2 10 12 15 7 9 Output 3 10 12 15 7 9 Input 8 4 8 2 10 5 1 9 3 7 Output 2 8 2 10 5 1 9 3 7 Note In the first example, the sum of team strengths in both groups is 16. In the second example, the sum of team strengths in each group are 22, 22, and 9 respectively. There could be other valid groupings as well. In the third example, the sum of team strengths in both groups is 25.","solution":"def divide_teams_into_groups(n, m, strengths): Divides the teams into the minimum number of groups such that: - Each group has exactly m teams. - The sum of the strengths in each group is as close as possible. Parameters: n (int): Number of teams m (int): Number of teams per group strengths (list): List of team strengths Returns: tuple: g (number of groups), groups (lists of team strengths in each group) # Sort the strengths to allow for better grouping strengths.sort() # Minimum number of groups required g = (n + m - 1) // m groups = [] for i in range(g): group = [] for j in range(m): if i + j * g < n: group.append(strengths[i + j * g]) groups.append(group) return g, groups # Example usage: if __name__ == \\"__main__\\": n = 6 m = 3 strengths = [4, 5, 7, 1, 9, 3] g, groups = divide_teams_into_groups(n, m, strengths) print(g) for group in groups: print(\\" \\".join(map(str, group)))"},{"question":"Hexagonal grid navigation is a complex task, especially when some cells are blocked. You are given a hexagonal grid with `n` rows and `m` columns, represented as a matrix. Each cell in the matrix is either `0` (clear) or `1` (blocked). You start at the top-left corner of the grid (0, 0) and aim to reach the bottom-right corner (n-1, m-1). You can move to six possible directions from any given cell in a hexagonal grid: 1. Up-Left 2. Up-Right 3. Left 4. Right 5. Down-Left 6. Down-Right An example visualization of movements in a hexagonal grid: ``` / / | k | / / k | | | ___/ ``` Here, k represents a cell and you can move to any of the adjacent cells. # Task Write a function that takes `n`, `m`, and the matrix `grid` as inputs and returns the minimum number of steps required to go from the top-left corner to the bottom-right corner. If it is not possible to reach the bottom-right corner, return -1. # Input - An integer `n` (1 ≤ n ≤ 300) - An integer `m` (1 ≤ m ≤ 300) - A 2D list `grid` of size `n x m` where each cell is either `0` or `1`. # Output An integer representing the minimum number of steps required to navigate from the top-left to the bottom-right corner, or -1 if it is not possible. # Example Input ``` 4 4 [ [0, 0, 0, 1], [0, 1, 0, 0], [0, 0, 1, 0], [1, 0, 0, 0] ] ``` Output `6` Input ``` 3 3 [ [0, 1, 0], [1, 0, 1], [0, 1, 0] ] ``` Output `-1` # Notes - You can start at `(0, 0)` and move to an adjacent cell if it is within the bounds of the grid and not blocked. - Implement your solution using any efficient graph traversal technique like Breadth-First Search (BFS) to handle large grids efficiently.","solution":"from collections import deque def hex_grid_navigation(n, m, grid): Function to find the minimum number of steps to navigate from the top-left to the bottom-right corner in a hexagonal grid. if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == (n-1, m-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) steps += 1 return -1"},{"question":"In a kingdom, there are multiple cities connected by bidirectional roads forming various networks. Each city can be represented as a node, and the roads connecting them as edges in an undirected graph. The king wants to know the number of distinct connected components in the kingdom network. A connected component is a maximal set of cities such that there is a path between any two cities in the set. Given the description of the city\'s road network, help the king determine the number of distinct connected components for each network configuration provided. Input: First line contains T - the number of test cases. For each test case, First line contains 2 space-separated integers - N and M - the number of cities (nodes) and the number of roads (edges) connecting the cities respectively. Next M lines each contain 2 space-separated integers - u and v - denoting a road between city u and city v. Output: For each test case, print a single integer - the number of connected components in the city\'s road network. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ M ≤ 1000 1 ≤ u, v ≤ N SAMPLE INPUT 2 6 5 1 2 2 3 3 4 5 6 6 5 4 0 SAMPLE OUTPUT 2 1","solution":"def find_connected_components(n, edges): from collections import defaultdict, deque def bfs(node, visited, graph): queue = deque([node]) visited[node] = True while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) component_count = 0 for i in range(1, n + 1): if not visited[i]: component_count += 1 bfs(i, visited, graph) return component_count def connected_components(T, test_cases): results = [] for case in test_cases: N = case[\'N\'] M = case[\'M\'] edges = case[\'edges\'] result = find_connected_components(N, edges) results.append(result) return results"},{"question":"Problem : In a fantasy land, three types of magical creatures named Elves (E), Dwarves (D), and Wizards (W) live. They have a unique schedule for hosting a grand feast every Nth day. The schedule follows a pattern: - If the day number N is divisible by 4, Elves (E) host the feast. - If the day number N has a remainder of 1 when divided by 4, Dwarves (D) host the feast. - If the day number N has a remainder of 2 when divided by 4, Wizards (W) host the feast. - If the day number N has a remainder of 3 when divided by 4, all three (E, D, and W) host the feast together. You are given a number of test cases T. For each test case, given the day number D, determine which creatures will host the feast on the Dth day. Input: The first line contains an integer T (the number of test cases). The next T lines each contain an integer D. Output: For each test case, print the creatures that will host the feast on the Dth day (E for Elves, D for Dwarves, W for Wizards, or EDW for all three). Constraints: 1 ≤ T ≤ 1000 1 ≤ D ≤ 10^9 SAMPLE INPUT 4 1 4 6 11 SAMPLE OUTPUT D E W EDW Explanation: In test case 1:­ Day 1 has a remainder of 1 when divided by 4, so Dwarves (D) host the feast. In test case 2:­ Day 4 is divisible by 4, so Elves (E) host the feast. In test case 3:­ Day 6 has a remainder of 2 when divided by 4, so Wizards (W) host the feast. In test case 4:­ Day 11 has a remainder of 3 when divided by 4, so all three creatures (E, D, and W) host the feast together.","solution":"def who_hosts_feast(day): Determine which creatures host the feast on the given day. Args: day (int): The day number. Returns: str: The creatures hosting the feast (\'E\', \'D\', \'W\', or \'EDW\'). remainder = day % 4 if remainder == 0: return \'E\' elif remainder == 1: return \'D\' elif remainder == 2: return \'W\' elif remainder == 3: return \'EDW\' def process_test_cases(test_cases): Process multiple test cases to determine which creatures host the feast. Args: test_cases (list of int): List of day numbers for each test case. Returns: list of str: List of results for each test case. results = [] for day in test_cases: results.append(who_hosts_feast(day)) return results"},{"question":"You are given a list of integers. Determine whether there is a pair of distinct indices i and j such that the sum of the elements at these indices equals a given integer k. Input The first line contains two integers n and k (1 ≤ n ≤ 3·10^5, -10^9 ≤ k ≤ 10^9) — the number of integers in the list and the target sum. The second line contains n integers ai ( - 10^9 ≤ ai ≤ 10^9) — the elements of the list. Output Print \\"YES\\" if such a pair exists, otherwise print \\"NO\\". Example Input 5 9 2 7 11 15 1 Output YES","solution":"def has_pair_with_sum(nums, target): Returns \\"YES\\" if there is a pair of distinct indices i and j such that the sum of elements at these indices equals target. Otherwise, returns \\"NO\\". seen = set() for num in nums: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" # Example usage: # n, k = 5, 9 # nums = [2, 7, 11, 15, 1] # print(has_pair_with_sum(nums, k)) # Output: \\"YES\\""},{"question":"There is a magical library guarded by several mystical creatures. Each creature has a magical strength denoted by \'m\'. The library contains a collection of enchanted books, each with a power level denoted by \'p\'. The librarian, a wise old wizard, has hired you to determine how long it will take to distribute the books to the creatures such that every creature receives exactly one book whose power level does not exceed the creature\'s magical strength. If a creature cannot receive a book because all remaining books are too powerful, another creature can take their place and try to pick a book. The wizards can only distribute the books if all books can be distributed. You need to find the minimum time in hours needed to distribute all books if possible. Each hour, one book can be assigned to one creature. If it is impossible to distribute all books, you should return \\"-1\\". Input The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of mystical creatures and enchanted books. The second line contains n integers m1, m2, ..., mn (1 ≤ mi ≤ 10^9) — the magical strengths of the creatures. The third line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9) — the power levels of the enchanted books. Output Print one line with the answer. If it\'s impossible to distribute all books, print \\"-1\\". Otherwise, print the minimum number of hours needed to distribute all books. Examples Input 4 10 20 30 40 15 25 5 30 Output 4 Input 3 20 30 40 50 50 50 Output -1 Input 5 5 10 15 20 25 10 20 30 40 50 Output -1 Note In the first example, there are four creatures and four books. The creatures have magical strengths of 10, 20, 30, and 40 respectively. The books have power levels 15, 25, 5, and 30. - The first hour, distribute book with power level 5 to creature with strength 10. - The second hour, distribute book with power level 15 to creature with strength 20. - The third hour, distribute book with power level 25 to creature with strength 30. - The fourth hour, distribute book with power level 30 to creature with strength 40. This requires 4 hours in total. In the second example, it\'s impossible to distribute the books since none of the creatures have enough strength to handle the power levels of the books, resulting in \\"-1\\". In the third example, at least one book is too powerful for the strongest creature, so it is impossible to distribute all books and the output is \\"-1\\".","solution":"def minimum_distribution_time(n, magical_strengths, power_levels): # Sort both the magical strengths and power levels magical_strengths.sort() power_levels.sort() # Attempt to pair each book to a creature for i in range(n): if magical_strengths[i] < power_levels[i]: return -1 return n"},{"question":"You are given an integer array `arr` of length `n` consisting of positive integers. Your task is to determine the number of contiguous subarrays whose sum is odd. Input The first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5). The second line contains n integers arr_1, arr_2, ..., arr_n (1 ≤ arr_i ≤ 10^9). Output Print the number of contiguous subarrays whose sum is odd. Examples Input 5 1 2 3 4 5 Output 9 Input 3 2 4 6 Output 0 Input 4 1 1 1 1 Output 6 Note: In the first example, the odd sum subarrays are: - [1], [2, 3], [3], [4, 5], [5] thus, there are 9 subarrays whose sums are odd. In the second example, there are no subarrays with an odd sum. In the third example, the odd sum subarrays are: - [1], [1, 1, 1], [1], [1, 1, 1], [1], [1, 1, 1] thus, there are 6 subarrays whose sums are odd.","solution":"def count_odd_sum_subarrays(arr): Returns the number of contiguous subarrays whose sum is odd. n = len(arr) odd_count = 0 even_count = 1 # Initialize even_count as 1 to account for the sum = 0 case cumulative_sum = 0 result = 0 for num in arr: cumulative_sum += num if cumulative_sum % 2 == 0: result += odd_count even_count += 1 else: result += even_count odd_count += 1 return result"},{"question":"In a distant land, there\'s a legendary warrior who has been blessed with a special charm that enables him to multiply his strength by being selective in his battles. The warrior\'s current strength is represented by an integer array `S` of length `n`, where the i-th element of the array denotes the strength of the warrior after winning the i-th battle. The warrior can choose to skip certain battles to maximize his total strength. However, there\'s a catch: if he skips any battle, he must skip all the subsequent battles. Given the array `S`, the warrior wants to maximize his total strength. Can you help him decide which battles to fight to achieve the maximum possible total strength? Input The first line contains an integer t (1 ≤ t ≤ 10^5) - the number of test cases. Each test case starts with a number n (1 ≤ n ≤ 10^5) - the number of battles. The next line contains n integers, S_1, S_2, ..., S_n (1 ≤ S_i ≤ 10^9) - the strength values after each battle. Output For each test case, print a single integer: the maximum possible total strength the warrior can achieve. Example Input 2 4 1 2 9 4 5 3 5 7 10 2 Output 9 19 Explanation In the first test case, the warrior fights only the battle with strength 9 (because fighting battle 3 yields the highest single strength value, and skipping further battles doesn\'t affect other options). In the second test case, the warrior fights the battle with strength 10 and stops, as any further battle won’t increase the overall strength beyond this maximum.","solution":"def max_strength_per_test(n, S): max_strength = 0 for i in range(n - 1, -1, -1): if S[i] > max_strength: max_strength = S[i] return max_strength def max_strength_all_tests(t, test_cases): results = [] for i in range(t): n, S = test_cases[i] results.append(max_strength_per_test(n, S)) return results"},{"question":"A company is conducting a coding competition and wants to select the top N finalists for a special workshop based on their scores. The selected finalists are the ones with the top N highest scores. Each contestant has a unique ID and a score. Given the list of contestants\' IDs and scores, your task is to determine the IDs of the top N finalists. Input The first line contains two integers, M (1 ≤ M ≤ 1000) and N (1 ≤ N ≤ M), where M is the total number of contestants and N is the number of finalists to be selected. The next M lines each contain an integer ID (1 ≤ ID ≤ 10000) and an integer score (0 ≤ score ≤ 100). Each contestant\'s ID and score pair is unique. Output Print the IDs of the top N finalists in descending order of their scores. If two or more contestants have the same score, their IDs should be printed in ascending order. Examples Input 5 3 105 95 102 88 101 97 103 97 104 80 Output 101 103 105 Input 6 4 203 75 201 85 202 85 200 90 204 75 205 95 Output 205 200 201 202 Note In the first example, the scores in decreasing order are 97, 97, 95, 88, and 80. Contestant IDs with scores 97 are 101 and 103, and they are selected. The next highest score is 95, and contestant ID 105 is selected. Thus, the output is 101 103 105. In the second example, the top 4 scores are 95, 90, 85, and 85. Contestant ID with score 95 is 205, ID with score 90 is 200, and IDs with score 85 are 201 and 202 (sorted in ascending order). Thus, the output is 205 200 201 202.","solution":"def top_n_finalists(M, N, contestants): Returns the IDs of the top N finalists based on their scores. If scores are the same, IDs are sorted in ascending order. Args: M (int): Total number of contestants. N (int): Number of finalists to be selected. contestants (list of tuples): List of (ID, score) tuples. Returns: list: List of IDs of top N finalists in descending order of their scores. # Sort the contestants - first by score in descending order, then by ID in ascending order sorted_contestants = sorted(contestants, key=lambda x: (-x[1], x[0])) # Select the top N finalists\' IDs top_finalists = [sorted_contestants[i][0] for i in range(N)] return top_finalists"},{"question":"David is a software engineer working on a project that requires implementing a task scheduler. The scheduler needs to keep track of the tasks and execute them based on their priorities. Each task has a priority level, and in case several tasks have the same priority, the scheduler should execute the task that was added first. David has decided to implement this using a modified version of the priority queue data structure. He needs your help to ensure that his implementation works correctly. You need to write a program that simulates the task scheduler. Each operation will be in one of the following formats: - \\"ADD name priority\\" - Add a new task with the given name and priority to the scheduler. - \\"EXECUTE\\" - Execute (remove and return) the highest-priority task from the scheduler. If there are multiple tasks with the highest priority, the one that was added first should be executed. If the scheduler is empty, the operation should output \\"NO TASKS\\". Implement the simulator for the task scheduler and provide the outputs for the given sequence of operations. Input The first line contains an integer t (1 ≤ t ≤ 10^5) - the number of operations. Each of the next t lines describes an operation in one of the formats described above. Output For each \\"EXECUTE\\" operation, print the name of the executed task on a new line. If the scheduler is empty when an \\"EXECUTE\\" operation is performed, print \\"NO TASKS\\" instead. Example Input 7 ADD clean 1 ADD cook 2 EXECUTE ADD laundry 2 EXECUTE EXECUTE EXECUTE Output cook laundry clean NO TASKS","solution":"import heapq class TaskScheduler: def __init__(self): self.tasks = [] self.counter = 0 # This counter will help to maintain insertion order self.scheduler_index = 0 # To act as tie breaker def add_task(self, name, priority): # Using a tuple where: # - priority is stored as negative to use min-heap as max-heap # - self.counter to maintain the order of addition for same priority heapq.heappush(self.tasks, (-priority, self.scheduler_index, name)) self.scheduler_index += 1 def execute_task(self): if not self.tasks: return \\"NO TASKS\\" return heapq.heappop(self.tasks)[2] def task_scheduler_simulation(operations): scheduler = TaskScheduler() results = [] for operation in operations: if operation.startswith(\\"ADD\\"): _, name, priority = operation.split() scheduler.add_task(name, int(priority)) elif operation == \\"EXECUTE\\": results.append(scheduler.execute_task()) return results"},{"question":"You are given a grid with n rows and m columns. Each cell of the grid contains either a \'.\' (representing an open cell) or \'#\' (representing a wall). You are also given two points: the starting point (sx, sy) and the destination point (dx, dy). Your task is to find a path from the starting point to the destination point using Breadth-First Search (BFS) algorithm. The path must avoid walls and can only move in four possible directions: up, down, left, and right. If a path exists, print the length of the shortest path; if no path exists, print -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid. The next n lines each contain a string of length m, representing the grid. Each character in the string is either \'.\' or \'#\'. The last line contains four integers sx, sy, dx, and dy (1 ≤ sx, sy, dx, dy ≤ n, m), representing the coordinates of the starting point and the destination point. Output Print the length of the shortest path from (sx, sy) to (dx, dy). If no path exists, print -1. Examples Input 5 5 ..... .#... ..#.. ...#. ..... 1 1 5 5 Output 8 Input 3 3 ..# .#. ..# 1 1 3 3 Output -1 Note In the first example, the shortest path from (1,1) to (5,5) is 8 moves: (1,1) -> (2,1) -> (3,1) -> (4,1) -> (5,1) -> (5,2) -> (5,3) -> (5,4) -> (5,5). In the second example, there is no path from (1,1) to (3,3) as the destination is blocked by walls.","solution":"from collections import deque def bfs_shortest_path(grid, n, m, sx, sy, dx, dy): # Directions: Up, Down, Left, Right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Adjust to 0-based indexing for BFS processing sx, sy, dx, dy = sx - 1, sy - 1, dx - 1, dy - 1 # BFS Queue: (current_x, current_y, current_length_of_path) queue = deque([(sx, sy, 0)]) # Visited set to keep track of visited cells visited = set() visited.add((sx, sy)) while queue: x, y, length = queue.popleft() # If we reached the destination, return the path length if x == dx and y == dy: return length # Explore the 4 possible directions for direction in directions: nx, ny = x + direction[0], y + direction[1] # Check if within bounds and not visited and not a wall if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, length + 1)) # If no path was found return -1 def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] for i in range(n): grid.append(data[2+i]) sx, sy, dx, dy = int(data[n+2]), int(data[n+3]), int(data[n+4]), int(data[n+5]) result = bfs_shortest_path(grid, n, m, sx, sy, dx, dy) print(result)"},{"question":"Points: 10 Your local library has come up with a new requirement to organize its book collection in an alphabetical manner. The librarian, however, is not well-versed with programming and has asked for your help to automate the process. Each book is identified by its unique ID int the form of a string, and librarians want to quickly find all book titles that start with a specific prefix for their categorization. Write a program to help the librarian with this task. Given a list of book IDs and a prefix, your task is to find and list all book IDs that start with the given prefix. Input: The first line contains an integer N representing the number of books in the library. The second line contains N space-separated strings, each representing a book ID. The third line contains a string P representing the prefix. Output: Output the book IDs that start with the given prefix, each on a new line. If no book ID matches the prefix, output \\"No match found\\". Example: Input: 5 BK001 BK002 BK003 AN001 AN002 BK Output: BK001 BK002 BK003","solution":"def find_books_with_prefix(n, books, prefix): This function takes an integer n representing the number of books, a list of strings books representing the book IDs, and a string prefix. It returns a list of book IDs that start with the given prefix. If no match is found, it returns [\\"No match found\\"]. matching_books = [book for book in books if book.startswith(prefix)] if matching_books: return matching_books else: return [\\"No match found\\"]"},{"question":"Given a string, find the length of the longest substring without repeating characters. Input Each dataset contains a single string s (1 ≤ |s| ≤ 1000). The input ends with a string \\"END\\" which should not be processed. The number of datasets does not exceed 50. Output For each string s, print the length of the longest substring without repeating characters. Example Input abcabcbb bbbbb pwwkew END Output 3 1 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_index_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index_map: start = max(char_index_map[s[end]] + 1, start) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length def process_input(strings): results = [] for s in strings: if s == \\"END\\": break results.append(length_of_longest_substring(s)) return results"},{"question":"You are given a sequence of integers representing the heights of students standing in a line. Due to an upcoming event, you need to find the minimum number of students that need to be moved to form a non-decreasing sequence of heights. Input The first line contains a single integer N, the number of students. The second line contains N space-separated integers representing the heights of the students. Output Output a single integer - the minimum number of students that need to be moved. Constraints 1 ≤ N ≤ 10^5 1 ≤ height of each student ≤ 10^9 SAMPLE INPUT 5 4 2 3 1 5 SAMPLE OUTPUT 2","solution":"def min_moves_to_non_decreasing_sequence(N, heights): Returns the minimum number of students that need to be moved to form a non-decreasing sequence of heights. Parameters: N : int : the number of students heights : list : a list of N integers representing the heights of the students Returns: int : minimum number of students that need to be moved # Initialize an array (dp) to keep track of the length of the longest # non-decreasing subsequence ending at each index. dp = [1] * N for i in range(1, N): for j in range(i): if heights[i] >= heights[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest non-decreasing subsequence longest_non_decreasing_subseq_length = max(dp) # The minimum number of students to move is the total number of students # minus the length of the longest non-decreasing subsequence. return N - longest_non_decreasing_subseq_length"},{"question":"Given a matrix representation of a grid where each cell has a certain value, you need to find the minimal path sum from the top-left cell to the bottom-right cell. You can only move either down or right at any point in time. The minimal path sum is the sum of values along the matrix cells from the top-left to the bottom-right cell such that the sum is minimized. Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000), representing the number of rows and columns in the matrix, respectively. The next m lines each contain n integers, representing the values of the matrix. The value of each cell in the matrix is between 1 and 1000. Output Print the minimal path sum from the top-left to the bottom-right of the matrix. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 3 1 2 5 3 2 1 Output 6 Input 1 4 1 2 3 4 Output 10 Note In example 1, the path with the minimal sum is (1→3→1→1→1), which adds up to 7. In example 2, the path with the minimal sum is (1→2→2→1), which adds up to 6.","solution":"def minimal_path_sum(matrix): Returns the minimal path sum from the top-left to the bottom-right of the matrix. m = len(matrix) n = len(matrix[0]) # Create a 2D dp array same size as matrix dp = [[0] * n for _ in range(m)] # Initialize the top-left corner dp[0][0] = matrix[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j - 1] + matrix[0][j] # Fill the first column for i in range(1, m): dp[i][0] = dp[i - 1][0] + matrix[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j] # Return the minimal path sum which is stored at dp[m-1][n-1] return dp[m - 1][n - 1]"},{"question":"Emma loves building intricate bridges using toy blocks. One day, she decides to challenge herself by designing a special type of bridge known as a \\"stepping stone bridge\\". The bridge consists of several stepping stones, each with different heights. To walk over the bridge successfully, Emma needs to ensure that the stepping height difference between adjacent stones does not exceed a given threshold for her to keep her balance. Write a program to help Emma determine if her bridge design is balanced based on a given threshold. # Input The first line of input contains an integer `t`, the number of test cases. For each test case: - The first line contains two integers `n` and `k` where `n` is the number of stepping stones and `k` is the maximum allowed height difference. - The second line contains `n` integers representing the heights of the stepping stones in sequence. # Output For each test case, output \\"Balanced\\" if the absolute difference in height between each pair of adjacent stepping stones is less than or equal to `k`, otherwise output \\"Unbalanced\\". # Example Input ``` 2 5 2 3 4 6 5 8 4 1 1 2 3 5 ``` Output ``` Unbalanced Unbalanced ``` In the first test case, the height differences between adjacent stones are 1, 2, 1, and 3 respectively. Since the differences 2 and 3 exceed the allowed threshold of 2, the output is \\"Unbalanced\\". In the second test case, the height differences between adjacent stones are 1, 1, and 2 respectively. Since the difference 2 exceeds the allowed threshold of 1, the output is \\"Unbalanced\\".","solution":"def is_bridge_balanced(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] heights = test_cases[i][1] balanced = True for j in range(1, n): if abs(heights[j] - heights[j-1]) > k: balanced = False break if balanced: results.append(\\"Balanced\\") else: results.append(\\"Unbalanced\\") return results"},{"question":"Jenna is participating in a robot grid challenge. She has a grid containing dimensions n rows and m columns. Each cell in the grid can either be an obstacle (\'#\') or free space (\'.\'). The grid also has the coordinates (x1, y1) where Jenna\'s robot starts, and (x2, y2) where it must reach. The robot can move up, down, left, and right, but can\'t move diagonally. It also can\'t move through obstacles. Jenna wants to ensure that her robot reaches the destination in the minimum possible number of moves. If it\'s not possible for the robot to reach the destination, she should determine that as well. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100). Then, the next n lines each contain a string of length m, representing the grid. The following line contains four integers x1, y1, x2, y2 (1 ≤ x1, x2 ≤ n, 1 ≤ y1, y2 ≤ m), which represent the starting and target coordinates. Output Print the minimum number of moves required to reach the target. If it is not possible to reach the target, print -1. Examples Input 5 5 . . . . . . # . # . . # . # . . . . # . # . . . # 1 1 5 5 Output 8 Input 3 3 . # . # # # . . . 1 1 3 3 Output -1 Note In the first example, the robot can follow the path (1,1) -> (1,2) -> (2,2) -> (2,3) -> (2,4) -> (3,4) -> (4,4) -> (5,4) -> (5,5) in 8 moves. In the second example, the robot cannot reach the destination (3,3) because it is blocked by obstacles.","solution":"from collections import deque def min_moves_to_reach_target(n, m, grid, start, target): x1, y1 = start x2, y2 = target # Define the four possible movement directions directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right # Queue for BFS, starting point with 0 moves queue = deque([(x1 - 1, y1 - 1, 0)]) # zero-based indexing visited = set([(x1 - 1, y1 - 1)]) while queue: x, y, moves = queue.popleft() # Check if reached the target if (x, y) == (x2 - 1, y2 - 1): return moves # Explore the grid in four possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) return -1 # Example usage: # Read input (for example purposes, inputs should be managed externally during actual execution) n = 5 m = 5 grid = [ \\".....\\", \\".#.#.\\", \\".#.#.\\", \\"...#.\\", \\"#....\\" ] start = (1, 1) target = (5, 5) print(min_moves_to_reach_target(n, m, grid, start, target))"},{"question":"In a far-off kingdom, there is a grand celebration held every year which spans multiple days. The celebration includes a series of events each happening on a specific day, and each event requires a certain number of participants for it to be successful. The king wants to ensure that for each day of the celebration, every event scheduled on that day has at least the required number of participants to be successful. To manage this efficiently, the king wants to allocate participants to events such that the number of extra participants not needed by any event (i.e., idle participants) is minimized. Participants can only be allocated if there are enough participants to fulfill the requirements of all events on a specific day. Write a program to determine the minimum number of extra participants that will be idle after fulfilling the requirements of all events. Input The format of the input is as follows: > D > Ei1 Rp1 > ... > EiM RpM > Pi The first line contains an integer D that is the number of days the celebration spans (1 ≤ D ≤ 100). For each day i (1 ≤ i ≤ D), the first line contains an integer Mi representing the number of events on that day (1 ≤ Mi ≤ 100). Each of the following Mi lines for day i contains two integers Eij (1 ≤ Eij ≤ 100) which is the event ID (unique for all events on all days) and Rpj (1 ≤ Rpj ≤ 100), the required number of participants for that event. After the Mi lines for each day, there is an integer Pi indicating the number of available participants on day i (1 ≤ Pi ≤ 10,000). Output Output a single integer representing the minimum number of extra participants that cannot be allocated to any event during the celebration. Examples Input 2 3 1 5 2 6 3 3 15 2 4 4 5 5 12 Output 4 Input 1 2 1 50 2 50 150 Output 50","solution":"def minimum_idle_participants(number_of_days, events_per_day, participants_per_day): idle_participants = 0 for day in range(number_of_days): total_required = sum(required for event, required in events_per_day[day]) participants_available = participants_per_day[day] idle_participants += max(0, participants_available - total_required) return idle_participants def parse_input(input_list): number_of_days = int(input_list[0]) events_per_day = [] participants_per_day = [] index = 1 for _ in range(number_of_days): M = int(input_list[index]) daily_events = [] for i in range(1, M + 1): Eij, Rpj = map(int, input_list[index + i].split()) daily_events.append((Eij, Rpj)) events_per_day.append(daily_events) index += M + 1 participants_per_day.append(int(input_list[index])) index += 1 return number_of_days, events_per_day, participants_per_day def find_minimum_idle_participants(input_list): number_of_days, events_per_day, participants_per_day = parse_input(input_list) return minimum_idle_participants(number_of_days, events_per_day, participants_per_day)"},{"question":"Given a list of strings and an integer M, rearrange the strings such that the difference between the length of the longest and shortest string in each continuous subsequence of M strings is minimized. If there are multiple ways to rearrange, return any valid arrangement. Constraints * 2 leq N leq 1000 * 1 leq text{length of each string} leq 100 Input The input data is given in the following format: N M s_1 s_2 ... s_N Output Print the rearranged strings, one per line. Example Input 6 3 abc de fghi jkl mn opqr Output de abc jkl mn fghi opqr Input 5 2 hello world by cloud queue Output world hello by cloud queue","solution":"def rearrange_strings(lst, M): Rearrange strings such that the difference between the length of the longest and shortest string in each continuous subsequence of M strings is minimized. # Sorting the list by length of strings will help in reducing the adjacency difference sorted_list = sorted(lst, key=len) result = [] # We distribute the strings by creating slices of size M for i in range(0, len(sorted_list), M): result.extend(sorted_list[i:i+M]) return result def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') N, M = map(int, data[0].split()) lst = data[1:] result = rearrange_strings(lst, M) for string in result: print(string)"},{"question":"You are working as a software developer on a project that involves processing large datasets of temperature readings. Each dataset represents the temperature readings from a series of sensors over a certain period. Given the importance of maintaining appropriate environmental conditions, your task is to analyze the temperature data to ensure it stays within a specified range. Your requirement is to create a function that determines if the temperature was consistently within the acceptable range over the specified period. If at any point the temperature goes out of the acceptable range, the function should immediately return the time (in minutes from the start) when the first out-of-range reading occurred. Each dataset consists of several temperature readings with corresponding timestamps and the acceptable range of temperature. Input The input consists of multiple datasets. Each dataset has the following format: L min_temp max_temp t1 temp1 t2 temp2 ... tL tempL L (1 ≤ L ≤ 1000) is the number of temperature readings. min_temp and max_temp are the minimum and maximum acceptable temperatures, respectively. Each subsequent line contains two integers: t (0 ≤ t ≤ 1000000) represents the time in minutes and temp (-100 ≤ temp ≤ 100) represents the temperature reading at that time. The last dataset is followed by a line containing a single zero. This line is not part of any dataset and should not be processed. Output For each dataset, output either the time of the first out-of-range temperature reading or “All temperatures are within the acceptable range” if no readings were found to be out of range. Example Input 5 15 25 0 20 30 22 60 24 90 18 120 23 4 10 30 0 32 15 28 45 29 75 29 0 Output 0 All temperatures are within the acceptable range","solution":"def analyze_temperature_data(datasets): Analyzes multiple datasets of temperature readings to determine if the temperatures stay within an acceptable range. If they go out of range, returns the time of the first out-of-range reading. Otherwise, returns a message indicating all temperatures are within range. Parameters: datasets (list of list): List of datasets, each dataset is represented as a list of strings Returns: List of str: Messages indicating the result of the analysis for each dataset result = [] for dataset in datasets: if dataset[0] == \'0\': break header = dataset[0].split() L = int(header[0]) min_temp = int(header[1]) max_temp = int(header[2]) out_of_range_time = -1 for i in range(1, L + 1): time, temp = map(int, dataset[i].split()) if temp < min_temp or temp > max_temp: out_of_range_time = time break if out_of_range_time != -1: result.append(str(out_of_range_time)) else: result.append(\\"All temperatures are within the acceptable range\\") return result"},{"question":"The citizens of ByteLand are organizing their annual festival. One of the main events is a parade where floats of various colors are arranged in a line. The parade organizers need your help to determine the longest sequence of adjacent floats of the same color. Input: The first line of input contains the number of test cases, T. Each test case contains a single string S, representing the colors of the floats in the parade. Each character in the string is an uppercase letter from \'A\' to \'Z\', representing a different color. Output: For each test case, print the length of the longest sequence of adjacent floats of the same color. Constraints: 1 ≤ Number of test cases, T ≤ 10 1 ≤ |Length of String S| ≤ 1000 SAMPLE INPUT 3 ABBBA CCCCC ABCDEABCDE SAMPLE OUTPUT 3 5 1","solution":"def longest_sequence(colors): Returns the length of the longest sequence of adjacent floats of the same color. max_length = 0 current_length = 1 for i in range(1, len(colors)): if colors[i] == colors[i-1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 return max(max_length, current_length) def process_input(input_data): Process the input data and returns the results for each test case. lines = input_data.strip().split(\'n\') T = int(lines[0]) results = [] for i in range(1, T + 1): results.append(longest_sequence(lines[i])) return results"},{"question":"```markdown In a kingdom, there are n cities connected by n-1 bidirectional roads such that there is exactly one path between any pair of cities (forming a tree). Each city has a certain number of resources represented by an integer array a of size n, where the i-th element represents the resources in city i. The king wants to collect all resources from all cities, starting from the capital city (city 0). There is a special rule: once the king collects resources from a city, he must distribute it to exactly k knights right away (each knight gets an equal share). The resources must be divisible by k in each city the king visits. The king can visit any city in any order, but he can visit each city only once. Determine if it is possible for the king to collect and distribute all resources under the given rules, starting from the capital. If yes, provide one possible collection order of cities. If it is not possible, print \\"Impossible.\\" Input The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10) — the number of cities and the number of knights, respectively. The second line contains n integers a[i] (0 ≤ a[i] ≤ 1000) — the resources in each city. The next n-1 lines contain two integers u and v (1 ≤ u, v ≤ n) — indicating there is a road between city u and city v. Output If it is possible, print \\"Possible\\" followed by n integers representing the order in which the king should collect the resources. If more than one valid order exists, print any. If it is not possible, print \\"Impossible.\\" Examples Input 4 2 12 8 4 4 1 2 1 3 3 4 Output Possible 1 2 3 4 Input 4 3 11 8 4 4 1 2 1 3 3 4 Output Impossible ```","solution":"def can_collect_resources(n, k, resources, roads): from collections import deque, defaultdict # Adjacency list representation of the tree. tree = defaultdict(list) for u, v in roads: tree[u].append(v) tree[v].append(u) # Check if any city\'s resources cannot be divided by k for r in resources: if r % k != 0: return \\"Impossible\\" # BFS to collect resources in some valid order. order = [] visited = [False] * (n + 1) queue = deque([1]) # Start from city 1 (1-based indexing) visited[1] = True while queue: city = queue.popleft() order.append(city) for neighbor in tree[city]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return \\"Possible\\", order # Sample Usage: n = 4 k = 2 resources = [12, 8, 4, 4] roads = [(1, 2), (1, 3), (3, 4)] print(can_collect_resources(n, k, resources, roads))"},{"question":"String Compression You are given a string consisting of lowercase English letters. Implement a method that compresses the string using the counts of repeated characters. The compressed string should only include the letter followed by the count of its consecutive occurrences if the count is greater than 1. If there is only one occurrence of a letter, it should be added to the compressed string without the count. The method should return the compressed string, which should be shorter than or equal to the original string. For example: If the input string is \\"aaabbc\\", the output should be \\"a3b2c\\". Input A single line containing the input string consisting of lowercase English letters. Output A single line containing the compressed string. Example Input: aaabbc Output: a3b2c Input: abc Output: abc","solution":"def compress_string(s): Compresses a string using counts of repeated characters. Args: s (str): The input string consisting of lowercase English letters. Returns: str: The compressed string. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) if count > 1: compressed.append(str(count)) count = 1 compressed.append(s[-1]) if count > 1: compressed.append(str(count)) return \'\'.join(compressed)"},{"question":"In a remote village, there is a farm where carrots are grown in a linear row. Each carrot has a certain sweetness value associated with it. You are tasked with finding the maximum sum of sweetness values from any contiguous subarray of the row of carrots. However, the farm owner has set a special condition: you cannot take two consecutive carrots with zero sweetness value. Given the sweetness values of the carrots as an array, your task is to find the maximum sum of sweetness values such that no two consecutive zero-sweetness values are included in the contiguous subarray. You are provided with an integer `n` (the number of carrots) and an array `sweetness` of `n` integers representing the sweetness values of the carrots. Input: - An integer `n` - An array `sweetness` of `n` integers Sample Input: 6 -2 1 -3 4 -1 2 1 -5 4 Sample Output: 6 Explanation: - The contiguous subarray with the maximum sum is [4, -1, 2, 1], which has a sum of 6. The condition is naturally met as there are no consecutive zero-sweetness values. Note: You do not need to create a program for this problem; you only need to write your answers for the provided small input in the given code snippet. For more details on submitting your solution, check this link for reference.","solution":"def max_sweetness_sum(n, sweetness): Finds the maximum sum of sweetness values from any contiguous subarray where no two consecutive zero sweetness values are included. if n == 0: return 0 # Initialize variables max_sum = float(\'-inf\') current_sum = 0 prev_zero = False for i in range(n): if sweetness[i] == 0 and prev_zero: # Reset current_sum if two consecutive zeroes found current_sum = 0 else: current_sum += sweetness[i] if sweetness[i] == 0: prev_zero = True else: prev_zero = False # Update max_sum if current_sum is higher if current_sum > max_sum: max_sum = current_sum # Reset current_sum if it drops below zero as we are only interested in positive sums if current_sum < 0: current_sum = 0 return max_sum"},{"question":"Given a series of price data for a stock, you want to build an algorithm to predict the maximum possible profit from a single buy-sell transaction. Your task is to write a program that takes daily stock prices and computes the maximum profit that could be achieved. Input The input consists of multiple lines. Each line contains a space-separated list of integers, representing the stock prices on consecutive days. The end of input is indicated by a line containing a single integer `-1`. Output For each line of input, output a single line containing the maximum profit that could be obtained from buying and then later selling the stock. If no profit can be made, output 0. Example Input 7 1 5 3 6 4 7 6 4 3 1 1 2 -1 Output 5 0 1","solution":"def max_profit(prices): Returns the maximum profit that could be obtained from a single buy-sell transaction. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit def process_input(input_lines): Process the input lines and return their corresponding maximum profits. results = [] for line in input_lines: if line.strip() == \\"-1\\": break prices = list(map(int, line.strip().split())) results.append(max_profit(prices)) return results"},{"question":"Hermit Crab Collector You are building a collector device for hermit crabs on a beach. The device places N crab traps in a straight line, where each trap can catch a certain number of hermit crabs. The number of crabs each trap can catch is given by an integer array T of length N, where T[i] represents the number of crabs the trap at position i can catch. The beach experiences high tides that may wash away crabs from the traps reset their counts. You need to ensure that even if some traps are affected, you can still collect the maximum number of hermit crabs across a contiguous subarray of traps. Given the array T, determine the maximum number of hermit crabs you can collect from any contiguous subarray of traps. # Constraints: * 1 ≤ N ≤ 3,000 * -1,000 ≤ T[i] ≤ 1,000 # Input Format: Input is given from standard input in the following format: ``` N T[0] T[1] ... T[N-1] ``` # Output Format: Output the maximum number of hermit crabs that can be collected from any contiguous subarray of traps. # Sample Input 1: ``` 5 -1 2 3 -2 5 ``` # Sample Output 1: ``` 8 ``` # Explanation: The maximum number of hermit crabs that can be collected is 8, from the subarray [2, 3, -2, 5]. # Sample Input 2: ``` 4 -2 -3 4 -1 ``` # Sample Output 2: ``` 4 ``` # Explanation: The maximum number of hermit crabs that can be collected is 4, from the subarray [4]. # Example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 15 ``` Note: - You need to find the maximum sum of any contiguous subarray. - Consider edge cases such as arrays with all negative numbers or varying lengths.","solution":"def max_hermit_crabs(T): Returns the maximum number of hermit crabs that can be collected from any contiguous subarray of traps. max_sum = current_sum = T[0] for num in T[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A strong password is defined as a string that is at least 8 characters long, contains at least one uppercase letter, one lowercase letter, one digit, and one special character (e.g., !, @, #, , %, ^, &, *). You are given a string S. Determine if S is a strong password. Constraints * 1 ≤ |S| ≤ 100 * S is composed of upper and lower case English letters, digits, and special characters (e.g., !, @, #, , %, ^, &, *). Input Input is given from Standard Input in the following format: S Output If S is a strong password, print `Strong`; otherwise, print `Weak`. Examples Input Abcdefg1@ Output Strong Input 1234567 Output Weak Input A1@bcdEF Output Strong","solution":"def is_strong_password(S): Determine if the given password is strong. A strong password is defined as a string that is at least 8 characters long, contains at least one uppercase letter, one lowercase letter, one digit, and one special character. Parameters: S (str): The input password string. Returns: str: \\"Strong\\" if the password is strong, otherwise \\"Weak\\". if len(S) < 8: return \\"Weak\\" has_upper = any(char.isupper() for char in S) has_lower = any(char.islower() for char in S) has_digit = any(char.isdigit() for char in S) has_special = any(char in \\"!@#%^&*\\" for char in S) if has_upper and has_lower and has_digit and has_special: return \\"Strong\\" else: return \\"Weak\\""},{"question":"An e-commerce company wants to analyze user behavior by tracking the number of purchases a user has made up to a certain date. They have provided a list of purchase events which include the username and the corresponding purchase date. They want you to write a program to output a report showing the cumulative number of purchases each user has made by each date in the list (sorted chronologically). Input: The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of purchase events. Each of the next N lines contains a username and a purchase date (YYYY-MM-DD). Output: For each test case, output the cumulative number of purchases for each user by each date in the same order as input in a format: \\"username date cumulative_purchases\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^4 Each username is a string of alphanumeric characters of length 1 to 20. Each date follows the format YYYY-MM-DD and is a valid date. Example: Input: 1 5 alice 2023-06-01 bob 2023-06-01 alice 2023-06-01 alice 2023-06-02 bob 2023-06-03 Output: alice 2023-06-01 1 bob 2023-06-01 1 alice 2023-06-01 2 alice 2023-06-02 3 bob 2023-06-03 2 SAMPLE INPUT 1 5 alice 2023-06-01 bob 2023-06-01 alice 2023-06-01 alice 2023-06-02 bob 2023-06-03 SAMPLE OUTPUT alice 2023-06-01 1 bob 2023-06-01 1 alice 2023-06-01 2 alice 2023-06-02 3 bob 2023-06-03 2","solution":"def cumulative_purchases(T, test_cases): Calculates the cumulative number of purchases for each user by each date. Args: - T (int): Number of test cases. - test_cases (list): List of test cases, each case is a list containing purchase events. Returns: - List of strings containing cumulative purchase count in format \\"username date cumulative_purchases\\". from collections import defaultdict results = [] for case in test_cases: N, events = case user_purchase_counts = defaultdict(int) for event in events: username, date = event.split() user_purchase_counts[(username, date)] += 1 cumulative_count = sum(count for (user, dt), count in user_purchase_counts.items() if user == username and dt <= date) results.append(f\\"{username} {date} {cumulative_count}\\") return results"},{"question":"Problem: You are given a list of integers representing the heights of sandcastles, followed by several commands to adjust the height of these sandcastles. Each command can either increase or decrease the height of all sandcastles within a specified range by a given amount, or it can query the current height of a specific sandcastle. Your task is to process each command and provide the required results. Input: The first line contains an integer N, the number of sandcastles, and an integer Q, the number of commands, both separated by a space. The second line contains N integers representing the initial heights of the sandcastles. Each of the next Q lines represents a command and is in one of the following formats: - \\"increase l r k\\": Increase the height of all sandcastles from position l to r (inclusive) by k units. - \\"decrease l r k\\": Decrease the height of all sandcastles from position l to r (inclusive) by k units. - \\"query x\\": Query and print the height of the sandcastle at position x. Output: For each \\"query\\" command, print the current height of the specified sandcastle. Constraints: 1 ≤ N ≤ 100000 1 ≤ Q ≤ 100000 1 ≤ l ≤ r ≤ N 1 ≤ x ≤ N -1000 ≤ heights of sandcastles ≤ 1000 -100 ≤ k ≤ 100 SAMPLE INPUT 5 5 3 2 5 1 4 increase 1 3 2 query 2 decrease 2 5 1 query 5 query 1 SAMPLE OUTPUT 4 3 5 Explanation: 1. After \\"increase 1 3 2\\", heights become [5, 4, 7, 1, 4]. 2. \\"query 2\\" results in 4. 3. After \\"decrease 2 5 1\\", heights become [5, 3, 6, 0, 3]. 4. \\"query 5\\" results in 3. 5. \\"query 1\\" results in 5.","solution":"def process_commands(N, Q, heights, commands): results = [] for command in commands: parts = command.split() cmd = parts[0] if cmd == \'increase\': l, r, k = int(parts[1]), int(parts[2]), int(parts[3]) for i in range(l-1, r): heights[i] += k elif cmd == \'decrease\': l, r, k = int(parts[1]), int(parts[2]), int(parts[3]) for i in range(l-1, r): heights[i] -= k elif cmd == \'query\': x = int(parts[1]) results.append(heights[x-1]) return results"},{"question":"A company requires a new system to manage its employees\' work schedules. They want a function that can help identify conflicts in their schedules and determine which pairs of employees have overlapping shifts. Each employee is represented by a unique identifier and their schedule is given as a list of tuples, each containing a start and end time (inclusive). Input: - An integer n (1 ≤ n ≤ 100) denoting the number of employees. - The next n lines contain the following data for each employee: - An integer m (1 ≤ m ≤ 50) denoting the number of shifts for the employee. - m pairs of integers (1 ≤ start < end ≤ 1440) representing the start and end times of the shifts for that employee. Output: Print all pairs of employee identifiers (i, j) where the schedules of employee i and employee j have at least one overlapping shift. Each pair should be printed only once in the format \\"i j\\" with i < j. Example Input: 3 2 1 100 150 300 2 90 200 250 350 1 500 600 Output: 1 2 Explanation: - Employee 1 has shifts from 1 to 100 and 150 to 300. - Employee 2 has shifts from 90 to 200 and 250 to 350. - Employee 3 has a shift from 500 to 600. In this case, employees 1 and 2 have overlapping shifts (from 90 to 100 and from 250 to 300), so they should be printed as \\"1 2\\". There are no overlapping shifts involving employee 3.","solution":"def find_overlapping_schedules(n, schedules): Find and return pairs of employee identifiers with overlapping shifts. :param n: Number of employees :param schedules: List of schedules for each employee :return: List of pairs (i, j) with overlapping shifts result = [] def is_overlap(shift1, shift2): return max(shift1[0], shift2[0]) < min(shift1[1], shift2[1]) for i in range(n): for j in range(i + 1, n): for shift1 in schedules[i]: for shift2 in schedules[j]: if is_overlap(shift1, shift2): result.append((i + 1, j + 1)) break if (i + 1, j + 1) in result: break return result # Example usage: n = 3 schedules = [ [(1, 100), (150, 300)], [(90, 200), (250, 350)], [(500, 600)] ] print(find_overlapping_schedules(n, schedules)) # Output: [(1, 2)]"},{"question":"A warehouse management system is being designed to keep track of incoming and outgoing items. The warehouse consists of several shelves, each with a specific capacity, where items can be stored. Each shelf can hold items of a specific type, identified by a unique number. You have been tasked with developing a part of the system that manages the addition and removal of items to maintain an optimal distribution of items across the shelves. Consider the following operations: 1. \\"add item_type shelf_id count\\" - Add a specific number of items (`count`) of a specific `item_type` to the shelf identified by `shelf_id`. 2. \\"remove item_type shelf_id count\\" - Remove a specific number of items (`count`) of a specific `item_type` from the shelf identified by `shelf_id`. 3. \\"query shelf_id\\" - Output the total number of items on the shelf identified by `shelf_id`. The warehouse contains `m` shelves (`1 ≤ m ≤ 1000`), each with a given capacity (`1 ≤ capacity ≤ 10000`). Each shelf can only hold one type of item, specified during initialization. Write a program that processes a sequence of `q` operations (`1 ≤ q ≤ 10000`) and produces the appropriate outputs for the \\"query\\" operations. Input The first line contains two integers `m` and `q` separated by a space — the number of shelves and the number of operations. The next `m` lines describe the initial configuration of the warehouse. Each line contains two integers `capacity` and `item_type` separated by a space, denoting the capacity and type of items that the shelf can hold. The following `q` lines contain one of the three possible operations: - \\"add item_type shelf_id count\\" - \\"remove item_type shelf_id count\\" - \\"query shelf_id\\" Output For each \\"query\\" operation, output a single integer that represents the current total number of items on the shelf identified by `shelf_id`. Example Input 3 6 100 1 200 2 300 3 add 1 1 50 add 2 2 150 add 3 3 100 query 1 remove 2 2 50 query 2 Output 50 100 Note In the example: - Three shelves are initialized: - Shelf 1 can hold up to 100 items of type 1. - Shelf 2 can hold up to 200 items of type 2. - Shelf 3 can hold up to 300 items of type 3. - The first operation adds 50 items of type 1 to shelf 1. - The second operation adds 150 items of type 2 to shelf 2. - The third operation adds 100 items of type 3 to shelf 3. - The fourth operation queries the number of items on shelf 1, which is 50. - The fifth operation removes 50 items of type 2 from shelf 2, leaving 100 items. - The sixth operation queries the number of items on shelf 2, which is 100.","solution":"class Warehouse: def __init__(self, shelves): self.shelves = shelves self.items = [0] * len(shelves) def add_items(self, item_type, shelf_id, count): shelf = self.shelves[shelf_id - 1] if shelf[\'item_type\'] == item_type: self.items[shelf_id - 1] = min(shelf[\'capacity\'], self.items[shelf_id - 1] + count) def remove_items(self, item_type, shelf_id, count): shelf = self.shelves[shelf_id - 1] if shelf[\'item_type\'] == item_type: self.items[shelf_id - 1] = max(0, self.items[shelf_id - 1] - count) def query(self, shelf_id): return self.items[shelf_id - 1] def main(m, q, shelf_configs, operations): shelves = [{\'capacity\': config[0], \'item_type\': config[1]} for config in shelf_configs] warehouse = Warehouse(shelves) results = [] for operation in operations: parts = operation.split() if parts[0] == \\"add\\": _, item_type, shelf_id, count = parts warehouse.add_items(int(item_type), int(shelf_id), int(count)) elif parts[0] == \\"remove\\": _, item_type, shelf_id, count = parts warehouse.remove_items(int(item_type), int(shelf_id), int(count)) elif parts[0] == \\"query\\": _, shelf_id = parts results.append(warehouse.query(int(shelf_id))) return results"},{"question":"You are given a sequence of N ropes, each with an integer length. You need to connect all the ropes into one single rope. The cost to connect two ropes is equal to the sum of their lengths. Write a program to find the minimum cost to connect all the ropes. Input The first line of the input gives the number of test cases, T. T test cases follow, each of which consists of two lines. The first line of each test case contains a single integer N, the number of ropes. The second line contains N space-separated integers Li. Li is the length of the ith rope. Output For each test case, output one line containing \\"Case #x: \\", where x is the case number (starting from 1), followed by the minimum cost to connect all the ropes. Constraints 1 ≤ T ≤ 100. 1 ≤ N ≤ 1000. 1 ≤ Li ≤ 10^6. Example SAMPLE INPUT 1 4 4 3 2 6 SAMPLE OUTPUT Case #1: 29","solution":"import heapq def min_cost_to_connect_ropes(ropes): heapq.heapify(ropes) total_cost = 0 while len(ropes) > 1: first = heapq.heappop(ropes) second = heapq.heappop(ropes) cost = first + second total_cost += cost heapq.heappush(ropes, cost) return total_cost def process_test_cases(test_cases): results = [] for idx, (n, ropes) in enumerate(test_cases): cost = min_cost_to_connect_ropes(ropes) results.append(f\\"Case #{idx + 1}: {cost}\\") return results def main(input_data): lines = input_data.split(\'n\') T = int(lines[0].strip()) index = 1 test_cases = [] for _ in range(T): N = int(lines[index].strip()) ropes = list(map(int, lines[index + 1].strip().split())) test_cases.append((N, ropes)) index += 2 results = process_test_cases(test_cases) return \\"n\\".join(results)"},{"question":"You are given an array of integers representing prices of products where each price is a positive integer. Your goal is to find and return the maximum possible product of any three distinct elements in the array. Input The input consists of a single line containing integers separated by spaces representing the prices of products. The length of the input array is at least 3 and up to 10^5. Each integer in the array is between 1 and 10^4. Output Output a single integer which is the highest possible product that can be obtained by multiplying any three distinct elements of the array. Examples Input 1 10 2 6 5 3 Output 300 Input 7 3 1 9 2 4 Output 252 Note In the first example, you can achieve the maximum product by taking the elements 10, 6, and 5 which yields 10 * 6 * 5 = 300. In the second example, the maximum product can be obtained by taking the elements 9, 7, and 4 resulting in 9 * 7 * 4 = 252. Hint: - Consider edge cases where the array contains very large or very small values. - Think about the possibility of negative and positive numbers in the array.","solution":"def maximum_product_of_three(arr): Returns the maximum product of any three distinct elements in the array. if len(arr) < 3: raise ValueError(\\"Array must contain at least three elements\\") arr.sort() # The maximum product can either be from the three largest numbers # or from the two smallest numbers (which could be negative) and the largest number max1 = arr[-1] * arr[-2] * arr[-3] max2 = arr[0] * arr[1] * arr[-1] return max(max1, max2)"},{"question":"A thief is planning to rob houses along a street. Each house has a certain amount of money stashed, and all houses are arranged in a straight line. The thief cannot rob two consecutive houses because it will alert the police. Given a list of non-negative integers representing the amount of money in each house, determine the maximum amount of money the thief can steal without robbing two consecutive houses. Input The first line contains an integer n (0 ≤ n ≤ 100,000) — the number of houses. The second line contains n non-negative integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10,000), where a_i represents the amount of money stashed in the i-th house. Output Print a single integer — the maximum amount of money the thief can steal. Examples Input 4 1 2 3 1 Output 4 Input 5 2 7 9 3 1 Output 12 Note In the first sample, the optimal strategy is to rob house 1 (money = 1) and house 3 (money = 3), total = 1 + 3 = 4. In the second sample, the optimal strategy is to rob house 2 (money = 7) and house 4 (money = 3) and house 5 (money = 1), for a total of 2 + 9 + 1 = 12.","solution":"def rob_houses(nums): Given a list of non-negative integers representing the amount of money in each house, determine the maximum amount of money the thief can steal without robbing two consecutive houses. if not nums: return 0 if len(nums) == 1: return nums[0] rob1, rob2 = 0, 0 for num in nums: new_rob = max(rob2, rob1 + num) rob1 = rob2 rob2 = new_rob return rob2"},{"question":"Integer Composition Sum Problem Statement Given an integer n, find all possible combinations of positive integers that add up to n. Each combination should be sorted in non-decreasing order and should appear only once. Write a function that returns all distinct combinations in any order. Constraints * 1 ≤ n ≤ 15 Input A single integer n. Output A list of lists, where each list represents a distinct combination of positive integers that sum up to n. Examples Input 4 Output [ [1, 1, 1, 1], [1, 1, 2], [1, 3], [2, 2], [4] ] Input 6 Output [ [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 2], [1, 1, 1, 3], [1, 1, 2, 2], [1, 2, 3], [1, 1, 4], [1, 5], [2, 2, 2], [2, 4], [3, 3], [6] ]","solution":"def combination_sum(n): result = [] def backtrack(start, current_sum, path): if current_sum == n: result.append(path) return for i in range(start, n + 1): if current_sum + i <= n: backtrack(i, current_sum + i, path + [i]) backtrack(1, 0, []) return result"},{"question":"You are given an array of integers representing the heights of a terrain, where the width of each terrain bar is 1. Each element in the array denotes the height of a terrain bar. You need to determine how much water it can trap after raining. Water is trapped between the bars of the terrain. The amount of water trapped depends on the heights of the bars and the gaps between them. Water trapped at a specific position is determined by the height of the shorter bar on the left and the height of the shorter bar on the right of that position. Write a program to compute how much water it can trap after raining. Input: - The first line contains an integer n (1 ≤ n ≤ 2·105), the number of bars in the terrain. - The second line contains n integers where each integer is the height of a terrain bar (0 ≤ the height of the terrain bar ≤ 104). Output: - Print a single integer, the total amount of water that can be trapped after raining. Examples: Input: 6 0 1 0 2 1 0 1 3 2 1 2 1 Output: 6 Input: 4 4 2 0 3 2 5 Output: 9 Note: - In the first example, 6 units of water can be trapped. - In the second example, 9 units of water can be trapped.","solution":"def trap_water(heights): if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"You are given a string that contains only lowercase English letters. Determine the length of the shortest substring that contains at least one of each unique character from the input string. Constraints * 1 leq length of input string leq 10^5 Input Input is given from Standard Input in the following format: <string> Output Print the length of the shortest substring that contains at least one of each unique character from the input string. Examples Input abcdef Output 6 Input abac Output 3 Input aabcbcdbca Output 4","solution":"def length_of_shortest_substring(s): from collections import Counter, defaultdict # set of all unique characters unique_chars = set(s) n_unique = len(unique_chars) n = len(s) min_len = n + 1 count = defaultdict(int) start, end = 0, 0 num_unique_in_window = 0 while end < n: # Expand the window by moving `end` while end < n and num_unique_in_window < n_unique: if s[end] in unique_chars: if count[s[end]] == 0: num_unique_in_window += 1 count[s[end]] += 1 end += 1 # If we have all unique characters in the current window while num_unique_in_window == n_unique: min_len = min(min_len, end - start) if s[start] in unique_chars: count[s[start]] -= 1 if count[s[start]] == 0: num_unique_in_window -= 1 start += 1 return min_len"},{"question":"David loves playing with sequences and has recently been exploring integer sequences in arrays. He has devised a game where, given an array `a` of `n` integers, he needs to determine the maximum possible sum of any contiguous subarray with exactly `k` elements. David asks you to write a program to find this maximum sum for him. # Input - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 10^5). - The second line contains `n` integers `a_1, a_2, ..., a_n` (|a_i| ≤ 10^4 for each valid `i`). # Output - Print a single integer — the maximum sum of any contiguous subarray with exactly `k` elements. # Examples Input ``` 5 3 1 2 3 -2 5 ``` Output ``` 6 ``` Input ``` 8 3 -1 -2 -3 -4 -5 -6 -7 -8 ``` Output ``` -6 ``` Input ``` 7 2 -2 1 -1 3 -5 4 2 ``` Output ``` 6 ``` # Note In the first example, the maximum sum of a contiguous subarray with exactly 3 elements is `1 + 2 + 3 = 6`. In the second example, the maximum sum of a contiguous subarray with exactly 3 elements is `-1 + -2 + -3 = -6`, which is the least negative sum possible. In the third example, the maximum sum of a contiguous subarray with exactly 2 elements is `4 + 2 = 6`.","solution":"def max_sum_of_k_subarray(n, k, array): Returns the maximum sum of any contiguous subarray with exactly k elements. Parameters: n (int): the number of elements in the array. k (int): the number of elements in the subarray. array (list of int): the list of integers. Returns: int: the maximum sum of any contiguous subarray with exactly k elements. # Calculate the sum of the first `k` elements current_sum = sum(array[:k]) max_sum = current_sum # Iterate from the kth element to the end of the array for i in range(k, n): current_sum += array[i] - array[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given an integer n. You need to generate a sorted list of all the unique factors of the integer n. Constraints * 1 leq n leq 10^6 Input Input is given from Standard Input as a single integer n. Output Print all the unique factors of n in ascending order, separated by spaces. Examples Input 36 Output 1 2 3 4 6 9 12 18 36 Input 1 Output 1 Input 100 Output 1 2 4 5 10 20 25 50 100 Input 13 Output 1 13","solution":"def get_factors(n): Returns a sorted list of all unique factors of the integer n. factors = set() for i in range(1, int(n**0.5) + 1): if n % i == 0: factors.add(i) factors.add(n // i) return sorted(factors) def format_factors_for_output(n): Returns the factors of the integer n as a space-separated string. factors = get_factors(n) return \' \'.join(map(str, factors))"},{"question":"You are responsible for managing the data of various species in a research facility. You need to write a program that will help you identify species that are common between two different lists collected from different research periods. Input The first line of input contains an integer T, the number of test cases. For each test case, three lines follow: - The first line contains an integer N, denoting the number of species observed in the first period. - The second line contains N space-separated strings S1, S2, ..., SN, representing the species names observed in the first period. - The third line contains an integer M, denoting the number of species observed in the second period. - The fourth line contains M space-separated strings S1, S2, ..., SM, representing the species names observed in the second period. Output For each test case, print the common species names in lexicographical order. If there are no common species, print \\"No common species\\". Constraints 1 <= T <= 100 1 <= N, M <= 10^5 1 <= |Si| <= 100 Example Input: 1 5 lion tiger bear deer wolf 4 bear wolf eagle owl Output: bear wolf Explanation In the given example, the common species between the two periods are \\"bear\\" and \\"wolf\\". They are printed in lexicographical order.","solution":"def find_common_species(T, cases): results = [] for case in cases: N, species_period1, M, species_period2 = case # Convert lists to sets for efficient intersection set_period1 = set(species_period1) set_period2 = set(species_period2) # Find common species common_species = set_period1.intersection(set_period2) # If there are common species, sort them lexicographically if common_species: sorted_common_species = sorted(common_species) results.append(\\" \\".join(sorted_common_species)) else: results.append(\\"No common species\\") return results def process_input(input_lines): lines = iter(input_lines) T = int(next(lines)) cases = [] for _ in range(T): N = int(next(lines)) species_period1 = next(lines).split() M = int(next(lines)) species_period2 = next(lines).split() cases.append((N, species_period1, M, species_period2)) return T, cases def main(input_lines): T, cases = process_input(input_lines) return find_common_species(T, cases)"},{"question":"Tara the Tortoise has a sequence of n distinct integers, and she loves sequences that have a specific pattern. She considers a sequence to be \\"peak-valley\\" if adjacent numbers alternately increase and decrease. Formally, a sequence a_1, a_2, ..., a_n is a \\"peak-valley\\" sequence if: - a_1 < a_2 > a_3 < a_4 > a_5 < ... > a_{n-1} < a_n (for odd n) or - a_1 < a_2 > a_3 < a_4 > ... < a_{n-1} > a_n (for even n). Given a sequence of distinct integers, determine whether it is possible to rearrange the numbers into a \\"peak-valley\\" sequence. If it is possible, output any such sequence; if it is not possible, output \\"NO\\". Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the elements of the sequence. Output If it\'s possible to rearrange the sequence into a \\"peak-valley\\" sequence, print \\"YES\\" on the first line, followed by a rearranged sequence on the second line ensuring the \\"peak-valley\\" pattern is met. If it is not possible, print \\"NO\\". Examples Input 7 1 3 2 5 4 7 6 Output YES 1 3 2 5 4 7 6 Input 5 5 3 1 2 4 Output YES 1 3 2 5 4 Input 4 1 2 3 4 Output YES 1 3 2 4 Input 6 1 6 2 3 4 5 Output YES 1 6 2 5 3 4 Input 2 2 1 Output YES 1 2","solution":"def peak_valley_sequence(n, arr): Determines if it\'s possible to rearrange the sequence into a peak-valley pattern. If possible, returns \\"YES\\" and the rearranged sequence. Otherwise, returns \\"NO\\". if n == 1: return \\"YES\\", arr arr.sort() # To make a peak-valley sequence for i in range(1, n - 1, 2): arr[i], arr[i + 1] = arr[i + 1], arr[i] return \\"YES\\", arr"},{"question":"Sumire has a sequence of N integers and wants to know how many of them are prime numbers. Write a function to count how many prime numbers are in the given sequence. Constraints * The input sequence has N integers. * 1 leq N leq 100 * Each integer in the sequence is between 1 and 1000 inclusive. Input Input is given from Standard Input in the following format: N a1 a2 a3 ... aN Output Print the number of prime numbers in the sequence. Examples Input 5 1 2 3 4 5 Output 3 Input 4 10 15 17 21 Output 1 Input 6 23 29 33 37 41 45 Output 4","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def count_primes(N, sequence): prime_count = 0 for num in sequence: if is_prime(num): prime_count += 1 return prime_count"},{"question":"You have a list of trains passing through a station. Each train has a unique arrival time and departure time. You want to determine the maximum number of trains that are at the station at the same time. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of trains. Each of the following n lines contains two integers ai and di (0 ≤ ai < di ≤ 1,000,000,000), the arrival and departure time of the ith train. Output Print a single integer, the maximum number of trains that are at the station at the same time. Example Input 5 1 3 2 5 4 6 5 8 5 7 Output 3 Explanation In the example, at time 5, there are 3 trains at the station: trains 2, 4, and 5.","solution":"def max_trains_at_station(trains): events = [] # Collect all the arrival and departure events for arrival, departure in trains: events.append((arrival, \'arrival\')) events.append((departure, \'departure\')) # Sort events by time, breaking ties by prioritizing \'departure\' over \'arrival\' events.sort(key=lambda x: (x[0], x[1] == \'arrival\')) max_trains = 0 current_trains = 0 # Sweep through the events for event in events: if event[1] == \'arrival\': current_trains += 1 max_trains = max(max_trains, current_trains) else: current_trains -= 1 return max_trains"},{"question":"A binary string consists only of characters \'0\' and \'1\'. Given a binary string, perform left rotations on the string to get its rotated versions. Identify and return the lexicographically smallest string from the rotated versions. Input: The first line contains an integer N which represents the number of test cases. Each of the following N lines contains a binary string. Output: For each test case, output the lexicographically smallest string obtained from rotating the given binary string. Constraints: 1 ≤ N ≤ 10^4 1 ≤ Length of binary string ≤ 10^3 SAMPLE INPUT 2 1010 11100 SAMPLE OUTPUT 0101 00111 Explanation For the first input string \\"1010\\", the possible left rotations are: \\"1010\\", \\"0101\\", \\"1010\\", \\"0101\\". The lexicographically smallest one is \\"0101\\". For the second input string \\"11100\\", the possible left rotations are: \\"11100\\", \\"11001\\", \\"10011\\", \\"00111\\", \\"01110\\". The lexicographically smallest one is \\"00111\\".","solution":"def lexicographically_smallest_rotation(binary_string): Finds the lexicographically smallest string obtained from rotating the given binary string. n = len(binary_string) smallest_rotation = binary_string for i in range(1, n): rotated_string = binary_string[i:] + binary_string[:i] if rotated_string < smallest_rotation: smallest_rotation = rotated_string return smallest_rotation def find_smallest_rotations(test_cases): For each test case, find the lexicographically smallest rotation. Parameters: test_cases (List[str]): List of binary strings. Returns: List[str]: List of lexicographically smallest rotations for each binary string. results = [] for binary_string in test_cases: smallest_rotation = lexicographically_smallest_rotation(binary_string) results.append(smallest_rotation) return results"},{"question":"This is an input-output problem. You are required to read the input and output a specific result based on the problem statement below. Given a string consisting of parentheses `(` and `)`, your task is to determine if the parentheses are balanced. A string of parentheses is considered balanced if every opening parenthesis `(` has a corresponding closing parenthesis `)` and the pairs of parentheses are properly nested. You need to implement a function that reads the input string and outputs `YES` if the parentheses are balanced, or `NO` if they are not. **Function Signature:** ```python def is_balanced_parentheses(s: str) -> str: # Your code goes here ``` **Input** - A single string `s` consisting of the characters `(` and `)`. The length of the string `|s|` is between `1` and `10^6`. **Output** - A single string `YES` or `NO`. **Example 1:** **Input:** ``` (()) ``` **Output:** ``` YES ``` **Example 2:** **Input:** ``` )(()) ``` **Output:** ``` NO ``` **Example 3:** **Input:** ``` (()()) ``` **Output:** ``` YES ``` **Example 4:** **Input:** ``` ((()) ``` **Output:** ``` NO ```","solution":"def is_balanced_parentheses(s: str) -> str: stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\""},{"question":"You are given a set of intervals, each representing a time range during which a conference room is booked. The objective is to determine the minimum number of conference rooms required to accommodate all bookings without any overlap. Write a program that reads multiple datasets and determines the minimum number of conference rooms required for each dataset. Each dataset contains a set of intervals, with a start and end time for each booking. The goal is to calculate the minimum number of conference rooms required so that no two bookings overlap. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format: m s1 e1 s2 e2 :: sm em The first line gives the number of bookings m (m ≤ 100), and each of the following m lines gives the start time si and end time ei (0 ≤ si < ei < 1000) of the ith booking. The number of datasets does not exceed 20. Output For each dataset, output the minimum number of conference rooms required to accommodate all bookings without overlap. Example Input 5 0 30 5 10 15 20 10 15 20 25 3 1 5 2 6 8 10 4 3 7 2 3 3 4 4 5 0 Output 2 2 2","solution":"def min_meeting_rooms(bookings): Given a list of intervals representing bookings, returns the minimum number of conference rooms required. if not bookings: return 0 # Separate out the start and end times start_times = sorted(booking[0] for booking in bookings) end_times = sorted(booking[1] for booking in bookings) start_pointer, end_pointer = 0, 0 used_rooms = 0 max_rooms = 0 # Iterate over the start times to allocate rooms while start_pointer < len(start_times): if start_times[start_pointer] >= end_times[end_pointer]: # A meeting ended, so a room gets freed up used_rooms -= 1 end_pointer += 1 # Assign a room for the new incoming meeting used_rooms += 1 start_pointer += 1 # Track the maximum number of rooms required max_rooms = max(max_rooms, used_rooms) return max_rooms def process_input(input_data): Process the input data and return result for each dataset. datasets = input_data.strip().split(\\"n\\") results = [] i = 0 while i < len(datasets): m = int(datasets[i].strip()) if m == 0: break bookings = [] for j in range(1, m + 1): start, end = map(int, datasets[i + j].strip().split()) bookings.append((start, end)) results.append(min_meeting_rooms(bookings)) i += m + 1 return results"},{"question":"Michael is preparing a presentation on data analysis and wants to showcase a visual representation of the distribution of scores on a recent exam. He has gathered the scores of n students, which are integers between 0 and m (inclusive). Michael decides to determine how many students scored each possible mark between 0 and m so he can create a bar chart from the results. Write a program that reads the scores and outputs the frequency of each score. Input: - The first line contains two integers n (1 ≤ n ≤ 1000), the number of students, and m (0 ≤ m ≤ 100) the highest possible score. - The second line contains n integers s1, s2, ..., sn (0 ≤ si ≤ m), the scores of the students. Output: - m + 1 lines, the ith line containing an integer representing the number of times score i appears in the input list for each i from 0 to m. Examples Input 5 5 0 1 2 2 5 Output 1 1 2 0 0 1 Input 6 10 3 7 7 10 2 10 Output 0 0 1 1 0 0 0 2 0 0 2 Note In the first example, the scores are [0, 1, 2, 2, 5]. The frequency of each score from 0 to 5 is as follows: - Score 0 appears 1 time - Score 1 appears 1 time - Score 2 appears 2 times - Score 3 appears 0 times - Score 4 appears 0 times - Score 5 appears 1 time In the second example, the scores are [3, 7, 7, 10, 2, 10]. The frequency of each score from 0 to 10 is: - Score 0 appears 0 times - Score 1 appears 0 times - Score 2 appears 1 time - Score 3 appears 1 time - Score 4 appears 0 times - Score 5 appears 0 times - Score 6 appears 0 times - Score 7 appears 2 times - Score 8 appears 0 times - Score 9 appears 0 times - Score 10 appears 2 times","solution":"def score_frequency(n, m, scores): Calculate the frequency of each score from 0 to m. :param n: number of students :param m: highest possible score :param scores: list of scores obtained by the students :return: list of frequencies of each score from 0 to m frequency = [0] * (m + 1) for score in scores: frequency[score] += 1 return frequency"},{"question":"A logistics company is organizing the delivery of packages to various destinations. Each package has a specific weight, and the company uses aircraft with a weight limit to carry these packages. The objective is to maximize the number of packages that can be carried without exceeding the weight limit of the aircraft. You need to write a program to determine the maximum number of packages that can be loaded onto the aircraft, given the individual weights of the packages and the aircraft\'s weight limit. Input: The first line of the input contains two integers: n (1 ≤ n ≤ 10^5) — the number of packages and W (1 ≤ W ≤ 10^9) — the weight limit of the aircraft. The second line contains n integers w_i (1 ≤ w_i ≤ 10^6) — the weights of the packages. Output: Output a single integer — the maximum number of packages that can be loaded onto the aircraft without exceeding the weight limit. Examples: Input: 5 15 3 1 6 2 5 Output: 4 Input: 4 10 7 3 5 8 Output: 2 Note: In the first example, the optimal way is to select packages with weights 1, 2, 3, and 5 for a total weight of 11, allowing the aircraft to carry 4 packages. In the second example, the optimal way is to select packages with weights 3 and 5 for a total weight of 8, allowing the aircraft to carry 2 packages.","solution":"def max_packages(n, W, weights): Determines the maximum number of packages that can be loaded onto the aircraft without exceeding the weight limit. :param n: Number of packages :param W: Weight limit of the aircraft :param weights: List of weights of the packages :return: Maximum number of packages that can be loaded weights.sort() total_weight = 0 count = 0 for weight in weights: if total_weight + weight <= W: total_weight += weight count += 1 else: break return count"},{"question":"In a grid-based board game, the player can make special moves that invert a rectangular sub-grid of the board. An inverted sub-grid means all cells that were initially black become white, and all cells that were initially white become black. The initial state of the board is given, and the player can make up to two such special moves. Write a program to determine if it’s possible to turn the entire board into the same color (either all black or all white) with at most two special moves. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 10), the number of rows and columns of the board. - The next n lines contain m characters each: \'.\' if the cell is white and \'#\' if the cell is black. Output Print \\"YES\\" (without the quotes) if it’s possible to make the entire board the same color with at most two special moves, otherwise print \\"NO\\". Examples Input 2 2 .# #. Output YES Input 3 3 .#. # .#. Output NO Note In the first test sample, the player can, for example, invert the entire board, turning first all cells to their opposites making them all white or black.","solution":"def can_invert_to_one_color(n, m, board): Determines if the entire board can be turned into the same color with at most two special moves. :param int n: Number of rows of the board :param int m: Number of columns of the board :param List[List[Char]] board: 2D list representing the board :return: \'YES\' if it\'s possible to make the entire board the same color with at most two special moves, otherwise \'NO\' def flip_subgrid(board, x1, y1, x2, y2): new_board = [row[:] for row in board] for i in range(x1, x2+1): for j in range(y1, y2+1): if board[i][j] == \'.\': new_board[i][j] = \'#\' else: new_board[i][j] = \'.\' return new_board def check_all_same_color(board): first_color = board[0][0] for row in board: for cell in row: if cell != first_color: return False return True if check_all_same_color(board): return \\"YES\\" for x1 in range(n): for y1 in range(m): for x2 in range(x1, n): for y2 in range(y1, m): # Invert sub-grid and check if the whole board can be the same color flipped_board = flip_subgrid(board, x1, y1, x2, y2) if check_all_same_color(flipped_board): return \\"YES\\" # Try a second flip for x1_2 in range(n): for y1_2 in range(m): for x2_2 in range(x1_2, n): for y2_2 in range(y1_2, m): flipped_board_twice = flip_subgrid(flipped_board, x1_2, y1_2, x2_2, y2_2) if check_all_same_color(flipped_board_twice): return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of integers and you need to perform a specific series of modifications to it. The modifications involve reversing segments of the list. The integer k is provided, which specifies the size of the segments to reverse. If the list size is not perfectly divisible by k, then the remaining elements at the end should be reversed as the last segment. Write a function that performs the following: 1. Reverse the elements of the list in groups of size k. 2. If the last group has fewer than k elements, reverse that last group as well. Print the resulting list after all modifications. Input The first line contains an integer m (1 ≤ m ≤ 10^5) — the number of elements in the list. The second line contains m integers a_1, a_2, ..., a_m (1 ≤ a_i ≤ 10^6) — the elements of the list. The third line contains an integer k (1 ≤ k ≤ 10^5) — the size of the segments to reverse. Output Print the modified list after reversing the segments of size k. Example Input 8 1 2 3 4 5 6 7 8 3 Output 3 2 1 6 5 4 8 7 Explanation In this example, we first reverse the segment [1, 2, 3] to get [3, 2, 1]. Then, we reverse the segment [4, 5, 6] to get [6, 5, 4]. Finally, we reverse the segment [7, 8] (since it has fewer than 3 elements) to get [8, 7]. The resulting list is [3, 2, 1, 6, 5, 4, 8, 7].","solution":"def reverse_segments(lst, k): Reverse the list in segments of size k. Args: lst (list): The list of integers to be modified. k (int): The size of the segments to reverse. Returns: list: The modified list after reversing the segments. result = [] for i in range(0, len(lst), k): segment = lst[i:i+k] result.extend(segment[::-1]) return result # Example implementation m = 8 lst = [1, 2, 3, 4, 5, 6, 7, 8] k = 3 print(reverse_segments(lst, k)) # Output: [3, 2, 1, 6, 5, 4, 8, 7]"},{"question":"Max wants to start his own local network. In doing so, he has been given a set of data centers and a set of cables connecting these data centers. Each cable has a certain weight, which represents the cost of using that cable. Max wants to connect all the data centers with the minimum possible total cost. More formally, Max needs to construct the Minimum Spanning Tree (MST) of a weighted undirected graph, where nodes are data centers, and edges are cables with given weights. Write a program to compute the minimum cost to connect all the data centers in the network. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) - the number of data centers and the number of cables respectively. Each of the next m lines contains three integers u, v and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) - indicating there is a cable between data center u and data center v with a weight of w. Output Output one integer - the minimum cost required to connect all the data centers. If it is impossible to connect all the data centers, output -1. Examples Input 4 5 1 2 1 1 3 4 2 3 2 3 4 3 2 4 5 Output 7 Input 4 2 1 2 3 3 4 2 Output -1 Note In the first sample, the Minimum Spanning Tree of the given graph would include the following edges: (1, 2), (2, 3), and (3, 4). The total cost would be 1 + 2 + 3 = 6. In the second sample, it is impossible to connect all the data centers because the data centers form two disconnected components. Hence, the output is -1.","solution":"def minimum_spanning_tree(n, m, edges): Calculates the minimum cost to connect all data centers using Kruskal\'s algorithm. If it is impossible to connect all data centers, returns -1. :param n: Number of data centers :param m: Number of cables :param edges: List of tuples (u, v, w) where u and v are data center numbers and w is the weight of the cable :return: Minimum cost to connect all data centers, or -1 if impossible def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 edges.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n min_cost = 0 num_edges = 0 for u, v, w in edges: if find(parent, u-1) != find(parent, v-1): union(parent, rank, u-1, v-1) min_cost += w num_edges += 1 if num_edges == n - 1: return min_cost return -1 # This function reads the input from the standard input def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) m = int(data[1]) edges = [] index = 2 for _ in range(m): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) edges.append((u, v, w)) index += 3 result = minimum_spanning_tree(n, m, edges) print(result)"},{"question":"Jenny is planning to build a staircase with blocks. Each step in the staircase has a width and height of one block. To build a staircase with \'n\' steps, Jenny wants to know the minimum number of blocks required. Write a program to determine the minimum number of blocks needed to build a staircase of \'n\' steps. Input The input consists of a single integer `n` (1 ≤ n ≤ 10^6) — the number of steps in the staircase. Output Output a single integer, the minimum number of blocks required to build a staircase of `n` steps. Examples Input 5 Output 15 Input 3 Output 6 Input 1 Output 1 Note In the first sample, the staircase with 5 steps requires 15 blocks: Step 1 needs 1 block, Step 2 needs 2 blocks, Step 3 needs 3 blocks, Step 4 needs 4 blocks, and Step 5 needs 5 blocks, so 1 + 2 + 3 + 4 + 5 = 15. In the second sample, the staircase with 3 steps requires 6 blocks: 1 + 2 + 3 = 6. In the third sample, the staircase with 1 step requires 1 block.","solution":"def minimum_blocks(n): Determines the minimum number of blocks required to build a staircase of n steps. The number of blocks required for a staircase with n steps is the sum of the first n natural numbers. This sum is given by the formula: S = n * (n + 1) / 2 Args: n (int): The number of steps in the staircase. Returns: int: The minimum number of blocks required. return n * (n + 1) // 2"},{"question":"Ravi loves reading books, and he often reads multiple books at the same time. However, he often loses track of his bookmarks and cannot remember the last page he read in each book. He decides to use an application that tracks the books he is reading and the last page he read for each book. Your task is to implement a system that simulates this book-reading application. Given sequences of commands to either move the bookmark of a book to a certain page or query the last page read of a book, your program should correctly simulate these actions and return the appropriate results. Input The first line contains an integer N, the number of commands. The next N lines each contain a command. Each command is either: 1. \\"READ book_name page_number\\": which means Ravi read the book \'book_name\' up to \'page_number\'. 2. \\"QUERY book_name\\": which means the application should return the last page read for the book \'book_name\'. Output For each \\"QUERY\\" command, output the last page number read for that book. If the book has not been read before, output \\"Book not started\\". Constraints 1 ≤ N ≤ 1000 1 ≤ length of book_name ≤ 50 1 ≤ page_number ≤ 10000 Commands are not case sensitive but should be treated case sensitively within the application (i.e., \\"Book_A\\" is different from \\"book_a\\"). SAMPLE INPUT 6 READ harry_potter 120 READ the_great_gatsby 45 QUERY harry_potter QUERY the_great_gatsby READ harry_potter 150 QUERY harry_potter SAMPLE OUTPUT 120 45 150 Explanation Example case 1: First, Ravi read up to page 120 of \\"harry_potter\\". Then he read up to page 45 of \\"the_great_gatsby\\". The subsequent queries return the last pages read for both books. After reading further, the query returns the updated last page read for \\"harry_potter\\".","solution":"def book_reading_application(commands): Process a list of commands related to reading books and querying the last page read. book_tracks = {} results = [] for command in commands: parts = command.split() cmd_type = parts[0] book_name = parts[1] if cmd_type == \\"READ\\": page_number = int(parts[2]) book_tracks[book_name] = page_number elif cmd_type == \\"QUERY\\": if book_name in book_tracks: results.append(book_tracks[book_name]) else: results.append(\\"Book not started\\") return results"},{"question":"An organization is conducting a coding competition, and they want to select finalists based on the scores from several rounds. Each round has a different weightage and every participant gets a score in each round. The organization wants to calculate the total weighted score for each participant and rank them based on the highest score. You are given the number of participants `P`, the number of rounds `R`, the weightage of each round, and the scores of each participant in each round. Write a program to calculate the total weighted score for each participant and print the rank of each participant based on their total weighted score. In case of a tie, the participant who appears first in the input list will get a higher rank. **Input** The input is given from Standard Input in the following format: ``` P R w_1 w_2 ... w_R s_11 s_12 ... s_1R s_21 s_22 ... s_2R ... s_P1 s_P2 ... s_PR ``` - `P` (1 ≤ P ≤ 100) denotes the number of participants. - `R` (1 ≤ R ≤ 10) denotes the number of rounds. - `w_i` (1 ≤ w_i ≤ 10) denotes the weightage of the `i`-th round. - `s_ij` (0 ≤ s_ij ≤ 100) denotes the score of the participant `i` in the `j`-th round. **Output** Print `P` lines, each containing the rank of the corresponding participant. Examples **Input** ``` 3 3 2 3 4 10 20 30 40 50 60 70 80 90 ``` **Output** ``` 3 2 1 ``` **Input** ``` 2 2 1 2 100 20 50 40 ``` **Output** ``` 1 2 ```","solution":"def rank_participants(P, R, weights, scores): total_scores = [] for i in range(P): total_score = sum(weights[j] * scores[i][j] for j in range(R)) total_scores.append((total_score, i)) total_scores.sort(reverse=True, key=lambda x: x[0]) ranks = [0] * P for rank, (_, idx) in enumerate(total_scores, start=1): ranks[idx] = rank return ranks def main(): import sys input = sys.stdin.read data = input().split() P = int(data[0]) R = int(data[1]) weights = list(map(int, data[2:2 + R])) scores = [] index = 2 + R for i in range(P): scores.append(list(map(int, data[index:index + R]))) index += R ranks = rank_participants(P, R, weights, scores) for rank in ranks: print(rank)"},{"question":"You are a detective trying to decipher a coded message. The message is in the form of an array of integers. Each integer represents a letter of the alphabet where \'A\' = 1, \'B\' = 2, ..., \'Z\' = 26. The array may contain combinations of integers which together can decode to multiple valid strings. Your goal is to calculate the total number of different possible decoded strings from the array. For example, an array `[1,2,6]` can represent the strings \\"ABF\\", \\"LF\\", and \\"AZ\\". Thus, there are three possible decodings. Your task is to write a program that takes such an encoded array and outputs the number of possible decoded strings. Input The input consists of a single integer T (1 ≤ T ≤ 100), the number of test cases. Each test case consists of an array of integers separated by spaces. For each test case, the first line will contain an integer N (1 ≤ N ≤ 100), the length of the array, followed by N space-separated integers a1, a2, ..., aN (1 ≤ ai ≤ 26). Output For each test case, output a single line with the number of possible decoded strings. Example Input 2 3 1 2 6 4 1 1 2 2 Output 3 5 Explanation In the first test case, `[1,2,6]` can be decoded as: - \\"ABF\\" (1 2 6) - \\"AZ\\" (1 26) - \\"LF\\" (12 6) In the second test case, `[1,1,2,2]` can be decoded as: - \\"AAAB\\" (1 1 2 2) - \\"AKB\\" (1 1 22) - \\"AAL\\" (1 1 12 2) - \\"KAB\\" (11 1 2) - \\"KL\\" (11 12) (Note that spaces in the example input and output are for readability and should not be included in the actual input/output)","solution":"def count_decodings(arr): Count the number of possible decoded strings from an array. n = len(arr) if n == 0: return 0 if arr[0] == 0: return 0 count = [0] * (n + 1) # count[i] will be the total number of ways to decode the array up to index i-1 count[0], count[1] = 1, 1 # Base cases for i in range(2, n + 1): if arr[i - 1] > 0: count[i] += count[i - 1] if arr[i - 2] == 1 or (arr[i - 2] == 2 and arr[i - 1] <= 6): count[i] += count[i - 2] return count[n] def process_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) result = [] for i in range(1, T + 1): data = list(map(int, input_lines[i].split())) N = data[0] result.append(count_decodings(data[1:])) return result"},{"question":"Edward works in a software company and is assigned to architect a stock trading system. One of the features of this system is to analyze trading activities and identify profitable opportunities. Edward\'s task is to implement a function that determines the maximum profit that could be achieved by executing at most one transaction (i.e., buy one and sell one share of the stock in any day). He receives a list of stock prices for the next `n` days where each element in the list represents the stock price on that day. Edward needs to write a function that takes this list and calculates the maximum possible profit. If no profit can be made, the function should return 0. Input The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of days. The second line contains n integers, each representing the stock price on that day. Each stock price is a positive integer not exceeding 10,000. Output Output a single integer — the maximum profit that could be achieved from a single buy and sell operation. If no profit can be made, output 0. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Note In the first example, one could buy the stock on day 2 (price = 1) and sell it on day 5 (price = 6), yielding a maximum profit of 6 − 1 = 5. In the second example, no transaction can yield a positive profit, so the output is 0.","solution":"def max_profit(prices): Returns the maximum profit that could be achieved from a single buy and sell operation. :param prices: List of stock prices. :type prices: list :return: Maximum possible profit. :rtype: int if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Given a string representing a sequence of car types arriving at a parking lot (\'S\' for sedan, \'T\' for truck, \'M\' for motorcycle, \'V\' for van), you are to determine which type of vehicle is the most frequent in the sequence. If there\'s a tie, return the type that appears first in the provided string. Function Signature ```python def most_frequent_vehicle(sequence: str) -> str: pass ``` Input - A string `sequence` of length ( 1 leq text{len(sequence)} leq 1000 ) where each character is one of \'S\', \'T\', \'M\', or \'V\'. Output - A string representing the type of vehicle that occurs the most frequently. If there is a tie, return the type (character) that appears first in the sequence. Example ```python print(most_frequent_vehicle(\'STMVVSSMMTT\')) # Output: \'S\' print(most_frequent_vehicle(\'MMMSSVVVTT\')) # Output: \'M\' ```","solution":"def most_frequent_vehicle(sequence: str) -> str: from collections import Counter # Use Counter to count the frequency of each type of vehicle vehicle_counts = Counter(sequence) # Create a sorted list of (vehicle, count) tuples based on counts (descending) and appearance order sorted_vehicles = sorted(vehicle_counts, key=lambda x: (-vehicle_counts[x], sequence.index(x))) # The first element in the sorted list is the most frequent vehicle return sorted_vehicles[0]"},{"question":"You are implemented a custom data structure to handle daily weather records for a city. Each weather record consists of a string representing the date in the format \\"YYYY-MM-DD\\", and an integer representing the temperature recorded on that date. Your task is to implement this data structure and provide operations to: 1. Add a new weather record. 2. Retrieve the maximum temperature recorded on a specific date. 3. Retrieve all records that fall within a given date range, inclusive. The data structure should efficiently handle the following operations, even if there are a large number of records (e.g., up to 100,000): - Adding a weather record. - Retrieving the maximum temperature for a specific date. - Retrieving all records within a given date range. Write a class `WeatherTracker` that supports the following methods: 1. `add_record(date: str, temperature: int) -> None`: Adds a new weather record with the given date and temperature. 2. `get_max_temperature(date: str) -> int`: Returns the maximum temperature recorded on the given date. If there are no records for the date, return `None`. 3. `get_records(start_date: str, end_date: str) -> List[Tuple[str, int]]`: Returns a list of tuples where each tuple consists of a date and the corresponding maximum temperature recorded within the given date range `[start_date, end_date]`, inclusive. The list should be sorted by date. Your solution should consider time complexity and efficient data retrieval for large datasets. **Constraints:** * The date strings are valid and are in the format \\"YYYY-MM-DD\\". * Temperatures are between -100 and 100. **Examples:** ```python tracker = WeatherTracker() tracker.add_record(\\"2023-01-01\\", 10) tracker.add_record(\\"2023-01-01\\", 15) tracker.add_record(\\"2023-01-02\\", 20) tracker.add_record(\\"2023-01-03\\", 5) # Maximum temperature recorded on \\"2023-01-01\\" should be 15 assert tracker.get_max_temperature(\\"2023-01-01\\") == 15 # All records between \\"2023-01-01\\" and \\"2023-01-03\\" assert tracker.get_records(\\"2023-01-01\\", \\"2023-01-03\\") == [ (\\"2023-01-01\\", 15), (\\"2023-01-02\\", 20), (\\"2023-01-03\\", 5) ] # No records for \\"2023-01-04\\" assert tracker.get_max_temperature(\\"2023-01-04\\") == None ```","solution":"from typing import List, Tuple, Optional from collections import defaultdict import bisect class WeatherTracker: def __init__(self): self.data = defaultdict(list) self.sorted_dates = [] def add_record(self, date: str, temperature: int) -> None: if date not in self.data: bisect.insort(self.sorted_dates, date) self.data[date].append(temperature) def get_max_temperature(self, date: str) -> Optional[int]: if date not in self.data: return None return max(self.data[date]) def get_records(self, start_date: str, end_date: str) -> List[Tuple[str, int]]: start_idx = bisect.bisect_left(self.sorted_dates, start_date) end_idx = bisect.bisect_right(self.sorted_dates, end_date) records = [] for idx in range(start_idx, end_idx): date = self.sorted_dates[idx] max_temp = max(self.data[date]) records.append((date, max_temp)) return records"},{"question":"A group of synchronized swimmers are going to perform a routine in an underwater arena. They will be lining up in a rectangular grid of size n × m. Each swimmer plans to perform a specific set of moves. Each move can be either \\"L\\" (left), \\"R\\" (right), \\"U\\" (up), or \\"D\\" (down). However, there is a special constraint: no two swimmers adjacent to each other (either horizontally or vertically) can perform the same move. If there is no way to arrange the moves to meet the constraint, then it\'s impossible for them to perform. Your task is to determine if it\'s possible to assign moves such that no two adjacent swimmers perform the same move and, if possible, generate one valid move arrangement. Input The first line contains two integers n and m (2 ≤ n, m ≤ 1000). Output If it\'s possible to assign the moves, print \\"POSSIBLE\\" (without quotes) in the first line. In the next n lines, print m characters where each character is one of \'L\', \'R\', \'U\', or \'D\' representing the move performed by the swimmers in that cell. If it\'s not possible to assign the moves, print \\"IMPOSSIBLE\\" (without quotes). Example Input 3 3 Output POSSIBLE L R L R L R L R L Explanation The moves are assigned such that no two adjacent swimmers perform the same move. Hence, the output is \\"POSSIBLE\\". Example Input 2 2 Output IMPOSSIBLE Explanation No matter how the moves are assigned, two adjacent swimmers performing the same move cannot be avoided. Hence, the output is \\"IMPOSSIBLE\\".","solution":"def assign_moves(n, m): if n == 2 and m == 2: return \\"IMPOSSIBLE\\" moves = [[\\"\\" for _ in range(m)] for _ in range(n)] possible_chars = [\\"L\\", \\"R\\", \\"U\\", \\"D\\"] # Assign moves to the grid ensuring no two adjacent swimmers perform the same move for i in range(n): for j in range(m): if (i + j) % 2 == 0: moves[i][j] = \\"L\\" if (i + j) % 4 == 0 else \\"U\\" else: moves[i][j] = \\"R\\" if (i + j) % 4 == 1 else \\"D\\" result = \\"POSSIBLEn\\" + \\"n\\".join([\\"\\".join(row) for row in moves]) return result"},{"question":"A professional photographer is planning to organize a photo exhibition featuring photographs taken in different cities around the world. Each photograph contains metadata specifying the city where it was taken. For the purpose of organizing the exhibition, the photographer wants to know the longest sequence of photographs such that all photos in the sequence were taken in distinct cities. You are tasked with writing a program that processes a list of photographs and determines the length of the longest such sequence. Input The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) denoting the number of photographs. The next n lines contain the names of cities where each photograph was taken. Each city\'s name is a non-empty string of lowercase English letters with a length not exceeding 100 characters. Output You should output a single integer, the length of the longest sequence of photographs such that all photos in the sequence were taken in distinct cities. Example Input 7 paris tokyo paris newyork london newyork tokyo Output 4 Explanation In the given example, one possible longest sequence of photographs taken in distinct cities is [\\"paris\\", \\"tokyo\\", \\"newyork\\", \\"london\\"], which has a length of 4. Note that there could be other valid sequences of photographs taken in distinct cities, but the length should be the same, as 4 is the maximum possible.","solution":"def longest_sequence_of_distinct_cities(n, cities): Returns the length of the longest sequence of photographs such that all photos in the sequence were taken in distinct cities. :param n: int - number of photographs :param cities: List[str] - list of city names for photographs :return: int - length of the longest sequence of distinct city names distinct_cities = set(cities) return len(distinct_cities)"},{"question":"Write a program that reads a list of integers and a target integer, then prints the indices of the two numbers from the list that add up to the target integer. If no such pair exists, print \\"None\\". Constraints * Each element in the list is a non-negative integer. * The length of the list is between 2 and 1000. * Each integer in the list is between 0 and 10000. * The target integer is between 0 and 20000. Input The first line contains integers separated by spaces representing the list of integers. The second line contains the target integer. Output Print the indices of the two numbers that add up to the target in the format \\"index1 index2\\". If no pair is found, print \\"None\\". Example Input 1 2 3 4 6 10 Output 3 4 Explanation In the list [1, 2, 3, 4, 6], the numbers at indices 3 (4) and 4 (6) add up to 10.","solution":"def find_indices_of_target_sum(nums, target): Finds the indices of two numbers in nums that add up to target. If no such pair exists, returns None. index_map = {} for index, num in enumerate(nums): complement = target - num if complement in index_map: return index_map[complement], index index_map[num] = index return None def process_input(input_list_str, target_str): Process the input strings to appropriate types and call the function to find the indices. nums = list(map(int, input_list_str.split())) target = int(target_str) result = find_indices_of_target_sum(nums, target) if result is not None: return f\\"{result[0]} {result[1]}\\" else: return \\"None\\""},{"question":"Given a list of integers, write a function that returns a list of the indices of the two numbers such that they add up to a specific target number. You may assume that each input would have exactly one solution, and you may not use the same element twice. The list of integers and the target number will be provided as inputs to the function. Function Signature: ```python def two_sum(nums: List[int], target: int) -> List[int]: ``` Input - `nums` (List[int]): A list of integers. (1 ≤ len(nums) ≤ 10^4, -10^9 ≤ nums[i] ≤ 10^9) - `target` (int): The target sum. (-10^9 ≤ target ≤ 10^9) Output - List[int]: A list of two indices where the corresponding numbers add up to the target. Examples Input ```python nums = [2, 7, 11, 15] target = 9 ``` Output ```python [0, 1] ``` Input ```python nums = [3, 2, 4] target = 6 ``` Output ```python [1, 2] ``` Input ```python nums = [3, 3] target = 6 ``` Output ```python [0, 1] ``` Explanation: In each example, the function finds two numbers at different indices that add up to the target. In the first case, the indices of numbers 2 and 7 are returned because 2 + 7 = 9.","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: Returns the indices of the two numbers such that they add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Flora is an aspiring interior designer who loves creating intricate patterns on rectangular canvases. One of her favorite activities is to layer translucent rectangles on top of each other on a square canvas for unique visual effects. To aid her design process, she wants to know the maximum number of rectangles that overlap at any given point on the canvas. Given the specifications of the rectangular canvas and the details of the rectangles, you are to determine the point with the highest overlap of rectangles on it. Input The data set input has the following format: ``` n c x1 y1 w1 h1 x2 y2 w2 h2 ... xi yi wi hi ... xk yk wk hk ``` Here, `n` (1 ≤ n ≤ 10) is the number of test cases, `c` (1 ≤ c ≤ 50) is the number of rectangles in each test case, and `xi` (0 ≤ xi ≤ 1000) and `yi` (0 ≤ yi ≤ 1000) are the x and y coordinates of the bottom-left corner of the `i`-th rectangle. `wi` (1 ≤ wi ≤ 1000) is the width, and `hi` (1 ≤ hi ≤ 1000) is the height of the `i`-th rectangle. All coordinates and dimensions are integers. Your task is to determine the maximum number of rectangles overlapping at any point on the canvas for each test case. Output For each dataset, output the maximum number of rectangles overlapping at any single point on the canvas. Sample Input ``` 2 3 1 1 4 4 2 2 4 4 3 3 2 2 2 0 0 5 5 6 6 4 4 ``` Output ``` 3 1 ``` Explanation In the first test case, three rectangles overlap at point (3,3). In the second test case, the rectangles do not overlap at any point.","solution":"def max_overlaps(n, test_cases): Determine the maximum number of rectangles overlapping at any point on the canvas. :param n: Number of test cases :param test_cases: List of test case data. Each test case includes a list of rectangles, each represented as (x, y, w, h) :return: List of maximum overlaps for each test case results = [] for test in test_cases: c = test[\'c\'] rectangles = test[\'rectangles\'] # Create a 2D array to record the number of rectangles overlapping at each point grid = [[0] * 1001 for _ in range(1001)] for rect in rectangles: x, y, w, h = rect # Mark the corners of the rectangle in the grid for i in range(x, x + w): for j in range(y, y + h): grid[i][j] += 1 # Find the maximum value in the grid max_overlap = 0 for i in range(1001): for j in range(1001): if grid[i][j] > max_overlap: max_overlap = grid[i][j] results.append(max_overlap) return results"},{"question":"You are given an array of N integers. Alice and Bob play a game on this array. Alice and Bob take turns, with Alice going first. On each turn, a player must choose exactly one element and remove it from the array. The player who removes an element that makes the sum of the remaining elements divisible by a given integer K loses the game. Determine the winner of the game assuming both players play optimally. Constraints * 1 leq N leq 100000 * 0 leq array[i] leq 10^9 * 1 leq K leq 10^9 Input Input is given from Standard Input in the following format: N K array[1] array[2] ... array[N] Output Print `Alice` if Alice wins; print `Bob` if Bob wins. Examples Input 3 3 1 2 3 Output Bob Input 4 5 1 3 4 6 Output Alice Input 5 7 1 1 1 1 1 Output Alice Input 6 10 15 25 35 45 55 65 Output Bob","solution":"def find_winner(N, K, array): Determines the winner between Alice and Bob in the described game. Parameters: N (int): the number of elements in the array. K (int): the integer divisor. array (list of int): the list of integers. Returns: string: \'Alice\' if Alice wins, \'Bob\' if Bob wins. total_sum = sum(array) if total_sum % K != 0: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Write a function that computes the factorial of a given non-negative integer n. Input n (0 ≤ n ≤ 12) is given as an integer. Output Print the factorial of n. Example Input 5 Output 120","solution":"def factorial(n): Computes the factorial of a given non-negative integer n. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"You are given an array of n positive integers. Your task is to process several range queries on this array. Each query asks for the sum of all the elements in a specified sub-range of the array. To optimize the process, you should preprocess the array to efficiently answer these range sum queries. Input The first line contains an integer n (1 ≤ n ≤ 105), the number of elements in the array. The second line contains n positive integers representing the array (1 ≤ array[i] ≤ 104). The third line contains an integer q (1 ≤ q ≤ 104), the number of queries. The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n), representing the range for which the sum is to be calculated (l and r are inclusive). Output Print q lines. The i-th of them should contain the result of the i-th query, i.e., the sum of the elements starting from the l-th to the r-th in the array. Examples Input 5 1 2 3 4 5 3 1 3 2 5 1 5 Output 6 14 15 Note: For the first query, the sum of elements from index 1 to 3 is 1+2+3=6. For the second query, the sum of elements from index 2 to 5 is 2+3+4+5=14. For the third query, the sum of elements from index 1 to 5 is 1+2+3+4+5=15.","solution":"def preprocess_array(arr): Preprocesses the array to compute cumulative sums, which helps in efficiently answering range sum queries. n = len(arr) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] return prefix_sum def range_sum(prefix_sum, l, r): Returns the sum of the elements in the array from the l-th to the r-th position using the prefix sum array. return prefix_sum[r] - prefix_sum[l - 1] def process_queries(arr, queries): Processes each range query on the array using the prefix sum array. prefix_sum = preprocess_array(arr) results = [] for l, r in queries: results.append(range_sum(prefix_sum, l, r)) return results"},{"question":"**Problem Statement** You are given a grid with N rows and M columns containing non-negative integers. Your goal is to determine the minimum path sum from the top-left cell (1,1) to the bottom-right cell (N,M). You can only move either down or right at any point in time. * The grid is represented by a matrix A of size N times M , where each A[i][j] is the cost associated with cell (i,j). * Since the grid has non-negative values, the initial cost to enter the starting cell (1,1) is already included in the path sum. **Input** ``` N M A_11 A_12 ... A_1M A_21 A_22 ... A_2M ... A_N1 A_N2 ... A_NM ``` * 1 leq N, M leq 1000 * 0 leq A[i][j] leq 1000 **Output** Print the minimum path sum from the top-left cell to the bottom-right cell. **Example** *Input Example 1* ``` 3 3 1 3 1 1 5 1 4 2 1 ``` *Output Example 1* ``` 7 ``` *Input Example 2* ``` 2 2 1 2 1 1 ``` *Output Example 2* ``` 3 ``` **Explanation** For the first example, one possible minimum path is: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3), with a total path sum of 1 + 1 + 4 + 2 + 1 = 7.","solution":"def min_path_sum(grid): Calculate the minimum path sum from the top-left cell to the bottom-right cell. Parameters: grid (list of list of int): N x M matrix representing the grid. Returns: int: Minimum path sum. if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) # Initialize the dp array with the first cell of the grid. dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row. for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column. for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table. for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[n - 1][m - 1]"},{"question":"You are organizing a sports tournament where each match is played between two teams and the result of each match is either a win, loss, or a draw. Given the results of the matches, you need to determine the ranking of the teams. Each team is assigned points based on the following rules: - A win gives 3 points to the winner and 0 points to the loser. - A draw gives 1 point to both teams. - A loss gives 0 points to the loser and 3 points to the winner. Your task is to write a program that calculates the total points for each team and displays the ranking. The teams are ranked based on their total points, with higher points giving a higher rank. In case of a tie in points, teams are ranked lexicographically by their names. Input The first line of input will be a single integer m (1 ≤ m ≤ 10^4), the number of matches. The following m lines will each contain the result of a match in the format: \\"team1 team2 result\\" where: - team1 and team2 are the names of the two teams (strings consisting of up to 20 lowercase letters). - result is either \\"win\\", \\"lose\\", or \\"draw\\" indicating team1\'s result. Output Output a list of all teams sorted by their rank in descending order. Each line should contain the team name followed by their total points. Examples Input 3 alpha bravo win charlie delta draw alpha charlie lose Output charlie 4 alpha 3 delta 1 bravo 0 Input 2 teamA teamB draw teamC teamA win Output teamC 3 teamA 1 teamB 1 Note In the first sample, the points calculations are: - alpha has 1 win (3 points) and 1 loss (0 points) for a total of 3 points. - bravo has 1 loss (0 points) for a total of 0 points. - charlie has 1 draw (1 point) and 1 win (3 points) for a total of 4 points. - delta has 1 draw (1 point) for a total of 1 point. In the second sample: - teamA has 1 draw (1 point) and 1 loss (0 points) for a total of 1 point. - teamB has 1 draw (1 point) for a total of 1 point. - teamC has 1 win (3 points) for a total of 3 points.","solution":"def calculate_ranking(matches): points = {} for match in matches: team1, team2, result = match.split() # Ensure teams exist in the points dictionary if team1 not in points: points[team1] = 0 if team2 not in points: points[team2] = 0 if result == \\"win\\": points[team1] += 3 elif result == \\"lose\\": points[team2] += 3 elif result == \\"draw\\": points[team1] += 1 points[team2] += 1 # Convert dictionary to a sorted list sorted_teams = sorted(points.items(), key=lambda item: (-item[1], item[0])) return sorted_teams"},{"question":"You are given a list of integers. Your task is to group the integers with the same value, and output the starting and ending indices (1-based) of each group in the order they appear in the list. If a value appears more than once but is not consecutive, treat each appearance as a separate group. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the list. The second line contains a sequence of n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the list of integers. Output On each of the following lines, print three integers separated by spaces: the integer\'s value, the starting index, and the ending index of each group. Examples Input 8 2 2 1 1 1 2 2 3 Output 2 1 2 1 3 5 2 6 7 3 8 8 Input 5 4 4 4 5 5 Output 4 1 3 5 4 5 Input 7 7 7 7 6 6 7 7 Output 7 1 3 6 4 5 7 6 7 Note In the first example, the integer 2 appears twice consecutively at positions 1-2, and another time at positions 6-7. In the second example, the integer 4 forms one group from position 1 to 3, while the integer 5 forms another group from position 4 to 5. In the third example, the integer 7 forms two groups: the first from position 1-3, and the second from position 6-7. The integer 6 forms one group from position 4-5.","solution":"def group_indices(n, arr): Groups integers with the same value and returns their start and end indices. Parameters: n (int): Number of elements in the list. arr (list): List of integers. Returns: list: List of tuples containing the integer, starting index, and ending index of each group. res = [] i = 0 while i < n: start = i + 1 while i + 1 < n and arr[i] == arr[i + 1]: i += 1 end = i + 1 res.append((arr[i], start, end)) i += 1 return res"},{"question":"You have a sequence of non-negative integers representing the heights of bars in a histogram. Each bar has a width of 1. When you select two bars, you can store water between them as long as there are no taller bars in between. Write a function that takes an array of integers and returns the maximum amount of water that can be stored. For example, given the heights of the bars `[3, 0, 2, 0, 4]`, you can store a maximum of 7 units of water: - Between bar 1 (height 3) and bar 5 (height 4), you can store 3 units of water above bar 2 (height 0), 1 unit above bar 3 (height 2), and 3 units above bar 4 (height 0). Function Signature: ```python def max_water(heights: List[int]) -> int: pass ``` **Input:** - An integer `N` where `1 ≤ N ≤ 1000`, representing the number of bars. - An array `heights` of `N` non-negative integers, where `0 ≤ heights[i] ≤ 1000`, representing the height of each bar. **Output:** - Return a single integer representing the maximum units of water that can be stored. **Example:** Input: ```python max_water([3, 0, 2, 0, 4]) ``` Output: ```python 7 ``` Explanation: - Between the bars of heights 3 and 4, you can store water above the shorter bars.","solution":"from typing import List def max_water(heights: List[int]) -> int: if not heights or len(heights) < 3: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] water = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, heights[left]) water += max(0, left_max - heights[left]) else: right -= 1 right_max = max(right_max, heights[right]) water += max(0, right_max - heights[right]) return water"},{"question":"Two friends, Carl and Dave, are playing a game with a large array of integers. They take turns to pick numbers from the array, and their goal is to maximize their respective scores. Given that the array contains elements in non-decreasing order, they can only pick elements sequentially from either end of the array. The player with the maximum total score wins the game. The game always starts with Carl\'s turn. Given the array of integers, determine if Carl can ensure a win regardless of how Dave plays, assuming both play optimally. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Output \\"YES\\" (without quotes) if Carl can ensure a win, and \\"NO\\" (without quotes) otherwise. Example Input 4 2 3 5 5 Output NO Input 3 1 2 4 Output YES Note In the first sample, no matter how Carl plays, Dave can always ensure a tie or win, because the sum of the picked numbers can be equal. In the second sample, Carl can ensure a win by choosing the optimal strategy, for example, Carl can start by picking 4, ensuring his total stays ahead.","solution":"def can_carl_win(n, array): Determines if Carl can ensure a win given the array and optimal play from both players. Parameters: n (int): Length of the array. array (list): List of integers in non-decreasing order. Returns: str: \\"YES\\" if Carl can ensure a win, \\"NO\\" otherwise. # Sum of all elements in the array total_sum = sum(array) # Sum of elements at even indices (0, 2, 4, ...) sum_even_indices = sum(array[::2]) # Comparison based on the sum of elements picked optimally if sum_even_indices * 2 > total_sum: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an m x n binary matrix grid consisting of 0\'s (representing water) and 1\'s (representing land). The task is to find the perimeter of the island in grid. The island is composed of 1\'s connected horizontally and vertically. You may assume all four edges of the grid are surrounded by water. A few examples for clarity: - Example 1: ``` Input: grid = [[0, 1, 0, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0]] Output: 16 Explanation: The perimeter is the 16. ``` - Example 2: ``` Input: grid = [[1]] Output: 4 Explanation: The perimeter is 4. ``` - Example 3: ``` Input: grid = [[1, 0]] Output: 4 Explanation: The perimeter is 4. ``` The function to complete: ```python def islandPerimeter(grid: List[List[int]]) -> int: # your code goes here ``` **Constraints:** * m == grid.length * n == grid[i].length * 1 <= m, n <= 100 * grid[i][j] is 0 or 1.","solution":"from typing import List def islandPerimeter(grid: List[List[int]]) -> int: def is_water_or_out_of_bounds(i, j): return i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0 perimeter = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: # Check all 4 directions if is_water_or_out_of_bounds(i-1, j): # up perimeter += 1 if is_water_or_out_of_bounds(i+1, j): # down perimeter += 1 if is_water_or_out_of_bounds(i, j-1): # left perimeter += 1 if is_water_or_out_of_bounds(i, j+1): # right perimeter += 1 return perimeter"},{"question":"Modern houses are designed with smart home automation systems. These systems include a variety of sensors and devices, such as temperature sensors, lights, and doors. Each device can be checked for its status (ON/OFF) and also be controlled to change its state. You are tasked with developing a system to monitor and control the smart devices in a house. The system should handle multiple queries, including status checks and state changes. Each test contains multiple test cases. Each test case starts with an integer n (1 ≤ n ≤ 1000) which represents the number of devices in the house, followed by an integer q (1 ≤ q ≤ 1000) representing the number of queries to the system. Each of the next n lines contains a string `di` representing the name of the device and an integer `si` (0 ≤ si ≤ 1), where 0 indicates the device is OFF and 1 indicates it is ON. Each of the next q lines contains one of two types of queries: - \\"status di\\" which requires you to print the current status of device `di` (\\"ON\\" or \\"OFF\\"). - \\"toggle di\\" which requires you to change the state of device `di` (from ON to OFF or from OFF to ON). You are required to process each query and output the result accordingly. Input The first line of input contains t (1 ≤ t ≤ 100), the number of test cases. Description of the test cases follows. For each test case: - The first line contains two integers n and q. - The next n lines describe the devices with a string `di` and an integer `si`. - The next q lines contain the queries, either \\"status di\\" or \\"toggle di\\". It is guaranteed that each device name `di` is unique within a test case. Output For each \\"status di\\" query, print \\"ON\\" or \\"OFF\\" depending on the current state of device `di`. Example Input 2 3 4 light1 1 temp_sensor 0 door 1 status light1 toggle light1 status light1 status door 2 2 alarm 0 camera 1 status alarm toggle camera Output ON OFF ON OFF ON","solution":"def smart_home_system(test_cases): result = [] for case in test_cases: n, q = case[\'n\'], case[\'q\'] devices = {d: s for d, s in case[\'devices\']} queries = case[\'queries\'] for query in queries: query_type, device = query.split() if query_type == \\"status\\": result.append(\\"ON\\" if devices[device] else \\"OFF\\") elif query_type == \\"toggle\\": devices[device] = 1 if devices[device] == 0 else 0 return result"},{"question":"In the world of competitive programming, participants often encounter a problem involving string manipulation and pattern matching. Consider the following custom problem: You are given a string `s` and a pattern `p`. The pattern `p` can contain lowercase letters and wildcard characters: `*` and `?`. - `?` matches any single character. - `*` matches any sequence of characters (including an empty sequence). You need to implement a function that determines if the pattern `p` matches the entire string `s`. Input - A single line containing the string `s` (1 ≤ |s| ≤ 200) consisting of lowercase English letters. - A single line containing the pattern `p` (1 ≤ |p| ≤ 200) consisting of lowercase English letters, `*`, and `?`. Output - A single line containing \\"YES\\" if the pattern matches the string and \\"NO\\" otherwise. Examples Input abefcdgiescdfimde ab*cd?i*de Output YES Input aa a Output NO Input abcd a*c?b Output NO Explanation In the first example, the pattern `ab*cd?i*de` matches the string `abefcdgiescdfimde` since `*` can match `efcdgiescd`, `?` can match `m` and `*` matches the empty sequence. In the second example, the pattern `a` does not match the string `aa` since the former contains only one character. In the third example, the pattern `a*c?b` does not match the string `abcd` since the last character `b` does not match `d`.","solution":"def is_match(s, p): Determines if the pattern p matches the string s with wildcard characters. ? - matches any single character * - matches any sequence of characters (including an empty sequence) # Initialize a 2D table to store results of subproblems dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)] # Base case: empty pattern matches empty string dp[0][0] = True # Handle patterns with \'*\' at the beginning for j in range(1, len(p) + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 1] # Fill the table in bottom-up fashion for i in range(1, len(s) + 1): for j in range(1, len(p) + 1): if p[j - 1] == s[i - 1] or p[j - 1] == \'?\': dp[i][j] = dp[i - 1][j - 1] elif p[j - 1] == \'*\': dp[i][j] = dp[i - 1][j] or dp[i][j - 1] return \\"YES\\" if dp[len(s)][len(p)] else \\"NO\\""},{"question":"Given two strings, s and t, determine whether you can transform s into t by performing the following operation any number of times: choose any contiguous subsegment of characters in s and reverse it. Write a function `canTransform(s: str, t: str) -> bool` which returns `True` if it is possible to transform string s into string t using the described operation; otherwise, return `False`. The function should also handle edge cases where characters or the lengths of the two strings are significantly different. # Examples Input s = \\"abc\\" t = \\"bca\\" Output True Explanation Reversing the segment \\"bc\\" in \\"abc\\" results in \\"bac\\". Reversing the segment \\"ba\\" in \\"bac\\" results in \\"bca\\". Input s = \\"abc\\" t = \\"acb\\" Output True Explanation Reversing the segment \\"bc\\" in \\"abc\\" results in \\"acb\\". Input s = \\"abc\\" t = \\"def\\" Output False Explanation There is no way to turn \\"abc\\" into \\"def\\" since the characters \\"d\\", \\"e\\", and \\"f\\" are not present in \\"abc\\". Input s = \\"aabbcc\\" t = \\"ccbbaa\\" Output True Explanation Reversing the segment \\"aabbcc\\" in \\"aabbcc\\" will result in \\"ccbbaa\\". # Constraints - (1 leq |s|, |t| leq 10^4) - s and t consist of lowercase English letters. # Function Signature ```python def canTransform(s: str, t: str) -> bool: pass ```","solution":"def canTransform(s: str, t: str) -> bool: Determines if string s can be transformed into string t by reversing any contiguous subsegment of characters any number of times. Args: s (str): The original string. t (str): The target string. Returns: bool: True if s can be transformed into t, False otherwise. # If the sets of characters in s and t are not identical, cannot transform if sorted(s) != sorted(t): return False # Beyond character matches, transformation via reversals always possible if character counts match return True"},{"question":"In a binary tree, the width of a level is defined as the number of nodes present at that level from the leftmost node to the rightmost node. Write a function, `maxWidth(root)` that accepts the binary tree\'s root node and returns the maximum width among all the levels in the tree. The function should meet these requirements: - Traverse the binary tree level by level. - Measure the width of each level considering the actual breadth, not just the number of nodes. - Return the maximum width encountered during the traversal. The binary tree is defined with the `TreeNode` class as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Example 1: ``` Input: 1 / 3 2 / 5 9 Output: 4 Explanation: The maximum width of the tree is 4 at the last level (nodes 5, null, null, 9). ``` # Example 2: ``` Input: 1 / 3 2 / 5 3 Output: 2 Explanation: The maximum width of the tree is 2 at the level containing nodes 5 and 3. ``` # Constraints: - The number of nodes in the tree is in the range `[0, 2000]`. - The value of each node is in the range `[-10^4, 10^4]`. Implement the function in Python: ```python def maxWidth(root: TreeNode) -> int: # Your code goes here ``` Your solution should efficiently handle the constraints and return the correct maximum width of the given binary tree.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxWidth(root: TreeNode) -> int: if not root: return 0 max_width = 0 queue = deque([(root, 0)]) # (node, index) while queue: level_length = len(queue) _, first_idx = queue[0] for _ in range(level_length): node, idx = queue.popleft() if node.left: queue.append((node.left, 2 * idx)) if node.right: queue.append((node.right, 2 * idx + 1)) _, last_idx = queue[-1] if queue else (None, 0) max_width = max(max_width, last_idx - first_idx + 1) return max_width"},{"question":"Maria has recently learned about sorting algorithms. To test her understanding, she has decided to implement a basic sorting algorithm, but with a twist: she wants to count the number of inversions in an array. An inversion is any pair `(i, j)` such that `i < j` and `array[i] > array[j]`. Can you help Maria implement a function that counts the number of inversions in a given array? Input - A single integer `n` (1 ≤ n ≤ 100,000), the number of elements in the array. - Followed by `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 1,000,000), the elements of the array. Output - Output a single integer, the number of inversions in the array. Example Input: ``` 5 2 3 8 6 1 ``` Output: ``` 5 ```","solution":"def count_inversions(arr): Count the number of inversions in the array where an inversion is any pair (i, j) such that i < j and arr[i] > arr[j]. :param arr: List[int] - The array of integers :return: int - The number of inversions in the array def merge_and_count(arr, temp_arr, left, mid, right): inv_count = 0 i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count n = len(arr) temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n-1)"},{"question":"You are given a list of unique positive integers. Your task is to determine whether you can split this list into two non-empty sublists such that the sum of the elements in one sublist is equal to the sum of the elements in the other sublist. If it is possible, print \\"YES\\" otherwise print \\"NO\\". Input: - The first line contains a single integer n (2 ≤ n ≤ 30) — the number of elements in the list. - The second line contains n distinct positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5). Output: - Print \\"YES\\" if you can split the list into two non-empty sublists with equal sum, otherwise print \\"NO\\". Examples: - Input: 4 1 2 3 4 Output: YES - Input: 3 1 1 3 Output: NO Explanation: In the first example, the list can be split into [1, 4] and [2, 3], both having the sum of 5. In the second example, no such split is possible.","solution":"def can_split_list(n, arr): Determines if the list can be split into two non-empty sublists with equal sum. Parameters: n (int): Number of elements in the list. arr (list of int): The list of unique positive integers. Returns: str: \\"YES\\" if the list can be split into two sublists with equal sum, otherwise \\"NO\\". total_sum = sum(arr) # If the total sum is odd, we can\'t split into two equal integers if total_sum % 2 != 0: return \\"NO\\" target_sum = total_sum // 2 dp = [False] * (target_sum + 1) dp[0] = True for num in arr: for current_sum in range(target_sum, num - 1, -1): if dp[current_sum - num]: dp[current_sum] = True return \\"YES\\" if dp[target_sum] else \\"NO\\""},{"question":"You are given a number `n` and an array `arr` of `n` integers. You have to find and return the maximum possible sum of a subarray that does not include zero. A subarray is a contiguous part of an array. Input: - The first line contains a single integer `n` (1 ≤ n ≤ 100,000). - The second line contains `n` integers separated by spaces, representing the elements of the array `arr`. The elements of the array are between `-10,000` and `10,000`, inclusive. Output: - Return a single integer, the maximum possible sum of a subarray that does not include zero. **Examples:** **Input:** ``` 5 1 -2 3 4 -5 ``` **Output:** ``` 7 ``` **Input:** ``` 8 -1 2 -3 4 5 -6 -7 8 ``` **Output:** ``` 9 ``` **Input:** ``` 4 -1 0 -2 2 ``` **Output:** ``` 2 ``` **Note:** In the first example, the subarray with the maximum sum that does not include zero is `[3, 4]`, which sums to 7. In the second example, the subarray with the maximum sum that does not include zero is `[4, 5]`, which sums to 9. In the third example, the array `[-1, 0, -2, 2]` has `0` in it but the subarray `[2]` sums to 2.","solution":"def max_subarray_sum_no_zero(n, arr): Returns the maximum possible sum of a subarray that does not include zero. max_sum = -float(\'inf\') current_sum = 0 for num in arr: if num == 0: current_sum = 0 else: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum"},{"question":"You are tasked with writing a program that simulates a simplified game of billiards. In this game, there is a rectangular table with a size of `L x W` units, and a number of billiard balls are placed at specific initial positions. Each ball moves in one of the four cardinal directions (north, south, east, or west) with the same speed. Balls can collide with each other; when two balls collide, they both stop moving. Additionally, balls collide with the walls of the table and stop moving. Your objective is to compute the final positions of all balls on the table after they have stopped due to collisions with other balls or walls. Here\'s how the game is played: 1. Each ball is given an initial position `(x, y)` and a direction `D` (N, S, E, W). 2. All balls move simultaneously and continuously in their respective directions until they either collide with another ball or hit the wall. 3. Once a ball stops, it remains in its final position and no further movement or interaction occurs. 4. If two balls reach the same position at the same time, they both stop moving at that position. Write a program to determine the final positions of the balls given their initial positions and movement directions. # Input The input consists of multiple test cases. Each test case is defined as follows: - The first line contains two integers `L` and `W` (1 <= L, W <= 10^4), representing the dimensions of the table. - The second line contains an integer `N` (1 <= N <= 1000), representing the number of balls on the table. - The following `N` lines each contain three values: two integers `x` and `y` (0 <= x <= L, 0 <= y <= W) representing the initial position of a ball, and a character `D` from the set {N, S, E, W} representing the direction of movement of that ball. Each test case is followed by a blank line. The input ends when a line containing `0 0` is encountered, which should not be processed. # Output For each test case, output `N` lines, each containing the final position of a ball in the same order as the input. Format each final position as: `x y` # Example Input ``` 10 10 3 2 2 S 3 5 E 7 1 N 5 5 2 1 1 E 4 4 W 0 0 ``` Output ``` 2 0 10 5 7 10 2 1 3 4 ``` In this task, you will write a program to calculate the final positions of the balls after all collisions have occurred. Ensure your program efficiently handles the constraints provided for both the number and size of the table and the number of balls.","solution":"def billiards(L, W, N, balls): # Auxiliary function to simulate the balls\' movements def simulate_ball(x, y, D): if D == \'N\': new_y = W return (x, new_y) elif D == \'S\': new_y = 0 return (x, new_y) elif D == \'E\': new_x = L return (new_x, y) elif D == \'W\': new_x = 0 return (new_x, y) final_positions = [] for ball in balls: x, y, D = ball final_position = simulate_ball(x, y, D) final_positions.append(final_position) return final_positions # Function to process multiple test cases def process_input(input_data): input_lines = input_data.strip().split(\\"n\\") index = 0 results = [] while index < len(input_lines): L, W = map(int, input_lines[index].split()) if L == 0 and W == 0: break index += 1 N = int(input_lines[index]) index += 1 balls = [] for _ in range(N): x, y, D = input_lines[index].split() balls.append((int(x), int(y), D)) index += 1 results.append(billiards(L, W, N, balls)) # Skip the blank line between test cases index += 1 return results def format_output(results): output_lines = [] for result in results: for final_position in result: output_lines.append(f\\"{final_position[0]} {final_position[1]}\\") output_lines.append(\\"\\") # Blank line between test cases return \\"n\\".join(output_lines).strip()"},{"question":"Mia has a special string of lowercase alphabetic characters. She wants to transform it into a palindromic string, i.e., a string that reads the same forwards and backwards. To achieve this, she can replace any character with another lowercase alphabetic character. Help Mia determine the minimum number of character replacements required to turn her string into a palindrome. Input The first line contains the string s (1 ≤ |s| ≤ 10^3). Output Print a single integer representing the minimum number of character replacements needed. Examples Input abca Output 1 Input racecar Output 0 Input abcdef Output 3 Note In the first sample, replacing \'b\' with \'c\' will transform the string \\"abca\\" into \\"acca\\", which is a palindrome. Therefore, only one replacement is needed. In the second sample, the string \\"racecar\\" is already a palindrome, so no replacements are needed. In the third sample, replacing \'d\' with \'e\', \'c\' with \'f\', and \'b\' with \'a\' will transform the string \\"abcdef\\" into \\"abccba\\", which is a palindrome. Therefore, three replacements are needed.","solution":"def min_replacements_to_palindrome(s): Returns the minimum number of character replacements required to turn the given string into a palindrome. count = 0 n = len(s) for i in range(n // 2): if s[i] != s[n - i - 1]: count += 1 return count"},{"question":"Write a program that takes a positive integer as input and prints an inverted right-angled triangle pattern with numbers, as shown in the example below. Input A single positive integer `n` which represents the number of rows in the triangle. Output Inverted right-angled triangle pattern with numbers from 1 to n inclusive. Example Input 5 Output 5 4 3 2 1 4 3 2 1 3 2 1 2 1 1","solution":"def inverted_triangle(n): Generates an inverted right-angled triangle pattern with numbers from n to 1. :param n: A single positive integer representing the number of rows. :return: A list of strings where each string represents a row in the triangle. result = [] for i in range(n, 0, -1): row = \' \'.join(str(j) for j in range(i, 0, -1)) result.append(row) return result"},{"question":"John is a fan of matrix operations and has been experimenting with different transformations. One day, he came across a matrix filled with integers and decided to challenge himself with a new problem. Given a matrix of size m×n, John wants to calculate the sum of the elements in the submatrix defined by the top-left corner (r1, c1) and the bottom-right corner (r2, c2). He needs to perform this task efficiently to handle multiple queries about different submatrices. Help John by writing a program that efficiently computes the sum of elements in specified submatrices after processing an initial matrix. Input The first line contains two integers, m and n (1 ≤ m, n ≤ 500), the dimensions of the matrix. The next m lines each contain n integers, representing the elements of the matrix. The next line contains an integer q (1 ≤ q ≤ 105), the number of queries. Each of the next q lines contains four integers: r1, c1, r2, and c2 (1 ≤ r1 ≤ r2 ≤ m, 1 ≤ c1 ≤ c2 ≤ n), which specify the top-left and bottom-right corners of a submatrix. Output For each query, print the sum of the elements in the specified submatrix. Example Input 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 Output 12 28 Explanation In the first query, the submatrix from (1, 1) to (2, 2) is: ``` 1 2 4 5 ``` The sum of the elements is 1+2+4+5 = 12. In the second query, the submatrix from (2, 2) to (3, 3) is: ``` 5 6 8 9 ``` The sum of the elements is 5+6+8+9 = 28.","solution":"def preprocess_matrix(matrix): m, n = len(matrix), len(matrix[0]) prefix_sum = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m): for j in range(n): prefix_sum[i + 1][j + 1] = matrix[i][j] + prefix_sum[i + 1][j] + prefix_sum[i][j + 1] - prefix_sum[i][j] return prefix_sum def submatrix_sum(prefix_sum, r1, c1, r2, c2): return ( prefix_sum[r2][c2] - prefix_sum[r1 - 1][c2] - prefix_sum[r2][c1 - 1] + prefix_sum[r1 - 1][c1 - 1] )"},{"question":"A company needs to manage the inventory for their retail shops. You are required to help them by writing a program that tracks the inventory changes and provides the final quantities of items after a series of operations. Each operation can be either: 1. \\"add item_name quantity\\" - Add the specified quantity to the inventory for the given item. If the item does not exist in the inventory, add it with the specified quantity. 2. \\"remove item_name quantity\\" - Remove the specified quantity from the inventory for the given item. If the item does not exist, ignore the operation. If the specified quantity is greater than the current quantity, set the quantity to 0. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of operations. Each of the next n lines contains the description of an operation: - \\"add item_name quantity\\" - \\"remove item_name quantity\\" Where: - item_name is a string consisting of lowercase English letters and digits (1 ≤ length of item_name ≤ 100). - quantity is a positive integer (1 ≤ quantity ≤ 100). Output For each item in the inventory that has a non-zero quantity, print the item name and its quantity in lexicographical order. Each item should be printed on a new line in the format \\"item_name quantity\\". Examples: Input 6 add apple 10 add banana 5 remove apple 3 add orange 7 remove banana 10 add apple 5 Output apple 12 orange 7 Input 3 add toy 15 remove toy 5 remove car 3 Output toy 10","solution":"def manage_inventory(operations): Takes a list of inventory operations and returns the final inventory in the form of a dictionary where keys are item names and values are quantities. Args: operations : List[str] : A list of operations (add/remove with item names and quantities) Returns: dict : Final inventory with item names as keys and quantities as values sorted by item names inventory = {} for operation in operations: parts = operation.split() action = parts[0] item_name = parts[1] quantity = int(parts[2]) if action == \\"add\\": if item_name in inventory: inventory[item_name] += quantity else: inventory[item_name] = quantity elif action == \\"remove\\": if item_name in inventory: inventory[item_name] = max(0, inventory[item_name] - quantity) # Remove items from the inventory that have zero quantity inventory = {k: v for k, v in inventory.items() if v > 0} # Sorting the inventory by item names sorted_inventory = dict(sorted(inventory.items())) return sorted_inventory def format_inventory(inventory): Formats the inventory dictionary into a list of strings for output Args: inventory : dict : Dictionary of final inventory Returns: list : List of strings with item names and quantities return [f\\"{key} {value}\\" for key, value in inventory.items()]"},{"question":"Limak the bear loves collecting honey. In a forest, there are `n` beehives and `m` flower patches. Each beehive produces a certain amount of honey per hour, but Limak must collect honey from beehives while avoiding flooded areas between flowers. The forest is represented as a 2D grid of size `p x q` where each cell is either a beehive, a flower patch, or plain land. Limak can move in 4 directions (up, down, left, right) but cannot walk through flower patches. Limak starts from a designated starting position and can collect honey by reaching the beehive. Write a program to determine the maximum amount of honey Limak can collect in one hour if he can reach any beehive following the constraints. # Input The first line of the input contains three integers `p`, `q`, and `n` (1 ≤ p, q ≤ 100, 1 ≤ n ≤ 100) — the dimensions of the grid and the number of beehives. The next `p` lines contain `q` characters each representing the forest grid. Each character will be one of the following: - `.` (dot) representing plain land - `#` representing a flower patch (flooded area) - `H` representing a beehive - `S` representing Limak\'s starting point The following `n` lines contain three integers `hx`, `hy`, and `honey` (1 ≤ hx ≤ p, 1 ≤ hy ≤ q, 1 ≤ honey ≤ 1000) — coordinates of the beehive in the grid and the amount of honey it produces per hour. # Output Print a single integer representing the maximum amount of honey Limak can collect in one hour. # Example Input ``` 5 5 2 ..... ..#.. ..H.. ..#.. ..S.. 3 3 500 4 1 300 ``` Output ``` 500 ``` Input ``` 5 5 3 ..... .#H#. ..H.. .#H#. .S... 2 3 400 3 3 600 4 3 200 ``` Output ``` 600 ``` # Note In the first example, the grid represents a forest where Limak starts at position (5, 3) and there are two beehives at positions (3, 3) and (4, 1). Since Limak can reach the beehive at (3, 3) without crossing any flower patches, he collects 500 units of honey. In the second example, Limak cannot reach the beehives at positions (2, 3) and (4, 3) because they are surrounded by flower patches. Therefore, he collects honey from the beehive at (3, 3), which provides the maximum of 600 units of honey.","solution":"from collections import deque def max_honey(p, q, n, grid, hives): def bfs(start): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([start]) visited = set([start]) reachable_honey = [] while queue: x, y = queue.popleft() if grid[x][y] == \'H\': for hx, hy, honey in hives: if (hx - 1, hy - 1) == (x, y): reachable_honey.append(honey) break for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < p and 0 <= ny < q and (nx, ny) not in visited and grid[nx][ny] != \'#\': visited.add((nx, ny)) queue.append((nx, ny)) return max(reachable_honey) if reachable_honey else 0 start = None for i in range(p): for j in range(q): if grid[i][j] == \'S\': start = (i, j) break if start: break return bfs(start) # Example input p = 5 q = 5 n = 2 grid = [ \\".....\\", \\"..#..\\", \\"..H..\\", \\"..#..\\", \\"..S..\\" ] hives = [(3, 3, 500), (4, 1, 300)] print(max_honey(p, q, n, grid, hives)) # Output should be 500"},{"question":"You are a forest ranger responsible for monitoring the animals in a local wildlife preserve. The preserve is represented as a grid with `m` rows and `n` columns. Each cell in the grid can either be empty (`0`) or contain an animal (`1`). Rangers are to perform regular patrols, during which you need to count the isolated groups of animals. An isolated group is defined as a collection of horizontally or vertically adjacent cells containing animals (`1`s) that are surrounded by empty cells (`0`s) or the boundary of the grid. Write a function to count the number of isolated groups of animals in the given grid. Input The first line will contain two integers, `m` and `n` (1 ≤ m, n ≤ 100), the number of rows and columns of the grid respectively. Each of the next `m` lines contains `n` characters where each character is either `0` or `1`, representing an empty cell or an animal respectively. Output Print a single integer representing the number of isolated groups of animals. Examples Input 4 5 11000 11000 00100 00011 Output 3 Note In the sample, there are three isolated groups of animals: 1. The group formed by cells (0, 0) to (0, 1) and (1, 0) to (1, 1). 2. The single cell at (2, 2). 3. The group formed by cells (3, 3) and (3, 4). Explanation/Hint Use Depth-First Search (DFS) or Breadth-First Search (BFS) to traverse and count the connected components of `1`s.","solution":"def count_isolated_groups(grid): Count the number of isolated groups of animals in a given grid. :param grid: List[List[int]] - a 2D list representing the grid :return: int - number of isolated groups if not grid: return 0 m, n = len(grid), len(grid[0]) def dfs(i, j): if i < 0 or j < 0 or i >= m or j >= n or grid[i][j] == \'0\': return grid[i][j] = \'0\' # Mark the cell as visited dfs(i-1, j) dfs(i+1, j) dfs(i, j-1) dfs(i, j+1) isolated_groups = 0 for i in range(m): for j in range(n): if grid[i][j] == \'1\': isolated_groups += 1 dfs(i, j) return isolated_groups def parse_input(input_text): lines = input_text.strip().split(\'n\') m, n = map(int, lines[0].split()) grid = [list(line) for line in lines[1:]] return grid"},{"question":"You are given a rectangular matrix of integers where each cell contains a non-negative integer. The task is to determine the maximum sum of integers that can be collected by starting from the top-left corner of the matrix and moving to the bottom-right corner, only moving right or down at each step. # Input: - The first line contains two integers, `n` and `m`, representing the number of rows and columns of the matrix, respectively. - The next `n` lines each contain `m` integers representing the values of the cells in the matrix. # Output: - Print a single integer, the maximum sum of the integers that can be collected along the path from the top-left corner to the bottom-right corner. # Constraints: - 1 ≤ n, m ≤ 1000 - 0 ≤ matrix[i][j] ≤ 10^9 # Sample Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` # Sample Output: ``` 12 ``` # Explanation: The path with the maximum sum is 1 → 3 → 5 → 2 → 1, summing to 12. This path involves moving right, right, down, down, left to reach the bottom-right corner. # Note: It is guaranteed that there\'s always a path from the top-left corner to the bottom-right corner.","solution":"def max_sum_path(matrix): Calculate the maximum sum of integers that can be collected by starting from the top-left corner of the matrix and moving to the bottom-right corner, only moving right or down at each step. :param matrix: List of lists of integers representing the matrix :return: Integer, maximum sum possible if not matrix or not matrix[0]: return 0 n, m = len(matrix), len(matrix[0]) dp = [[0] * m for _ in range(n)] # Fill the dp matrix dp[0][0] = matrix[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[-1][-1]"},{"question":"After discovering a peculiar property in a sequence, John is intrigued and wants to further explore it. You are given a sequence of N positive integers where the sum of any two neighboring elements is always even. Your task is to determine the number of ways you can split the sequence into exactly two non-empty subsequences such that each subsequence maintains the same property: the sum of any two neighboring elements within each subsequence is even. INPUT The first line will contain T, the number of test cases (T ≤ 50). Each of the next T lines contains an integer N (2 ≤ N ≤ 100) followed by a sequence of N integers. OUTPUT For each test case, output the number of valid ways to split the sequence. SAMPLE INPUT 2 4 2 4 6 8 6 3 1 5 7 9 11 SAMPLE OUTPUT 3 15 Explanation In the first test case, valid splits are: - [2, 4] and [6, 8] - [2, 4, 6] and [8] - [2] and [4, 6, 8] In the second test case, all elements are odd and therefore any split is valid: - [3] and [1, 5, 7, 9, 11] - [3, 1] and [5, 7, 9, 11] - [3, 1, 5] and [7, 9, 11] - [3, 1, 5, 7] and [9, 11] - [3, 1, 5, 7, 9] and [11] - and so on for all possible non-empty splits. Total of 2^(6-1) - 1 = 15 ways.","solution":"def count_valid_splits(N, sequence): if all(x % 2 == 0 for x in sequence) or all(x % 2 != 0 for x in sequence): return 2**(N - 1) - 1 else: return 1 def solve(test_cases): results = [] for N, sequence in test_cases: results.append(count_valid_splits(N, sequence)) return results"},{"question":"You are given an array of integers consisting of n elements. You can perform the following operation on the array: choose any two integers a and b such that a < b, and replace a with the greatest common divisor (GCD) of a and b. What is the maximum possible value of the minimum integer in the array that can be achieved after performing any number of such operations? Input The first line of the input contains an integer n (1 ≤ n ≤ 100 000) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100 000) — the elements of the array. Output Output a single integer — the maximum possible value of the minimum integer in the array after performing the operations. Example Input 5 6 10 15 25 30 Output 5","solution":"import math from functools import reduce def find_maximum_min_value(arr): Finds the maximum possible value of the minimum integer in the array after performing any number of operations. return reduce(math.gcd, arr)"},{"question":"Given a list of positive integers, determine if the list can be split into two sublists such that the sums of the two sublists are equal. If it is possible, print \\"YES\\", otherwise print \\"NO\\". For example, the list \\"1, 5, 11, 5\\" can be split into the two sublists \\"1, 5, 5\\" and \\"11\\" which both sum to 11. Therefore, the function should return \\"YES\\". Conversely, the list \\"1, 2, 3, 5\\" cannot be split into two such sublists, so the function should return \\"NO\\". # Function Signature: ``` def can_partition(nums: List[int]) -> str: ``` # Input: - `nums`: a list of positive integers (1 ≤ len(nums) ≤ 200, 1 ≤ nums[i] ≤ 1000) # Output: - A string, either \\"YES\\" or \\"NO\\". # Example: Example 1: Input: ``` nums = [1, 5, 11, 5] ``` Output: ``` \\"YES\\" ``` Example 2: Input: ``` nums = [1, 2, 3, 5] ``` Output: ``` \\"NO\\" ``` # Hints: - To decide whether it\'s possible to partition the array into two subsets with equal sums, consider the sum of the entire array. If the sum is odd, it\'s not possible to partition it into two equal parts. - Use dynamic programming to figure out if there\'s a subset with a sum equal to half of the total sum.","solution":"from typing import List def can_partition(nums: List[int]) -> str: Determine if the list can be split into two sublists such that the sums of the two sublists are equal. total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition it into two equal sums if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(nums) # Dynamic programming approach dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"You are given a sequence of integers S and a sliding window of size k that moves from the leftmost element to the rightmost element of the sequence. Each time the window slides right by one position, a new element enters the window from the right and the leftmost element of the previous window is removed. Your task is to determine the minimum element in each window. Implement an efficient algorithm that performs this task, particularly keeping in mind the large size of the sequence and window. Input The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each test case consists of two lines. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the length of the sequence and the size of the window, respectively. The second line contains n integers S[i] (1 ≤ S[i] ≤ 10^9) — the elements of the sequence. Output For each test case, print the minimum element in each sliding window in the sequence, separated by space. Example Input 2 8 3 1 3 2 6 3 8 1 4 5 2 7 5 2 6 9 Output 1 2 2 3 1 1 5 2 2 6 9 Note In the first test case, the sequence is [1, 3, 2, 6, 3, 8, 1, 4] and the window size is 3. The minimum elements in the windows are: - [1, 3, 2] -> 1 - [3, 2, 6] -> 2 - [2, 6, 3] -> 2 - [6, 3, 8] -> 3 - [3, 8, 1] -> 1 - [8, 1, 4] -> 1 In the second test case, the sequence is [7, 5, 2, 6, 9] and the window size is 2. The minimum elements in the windows are: - [7, 5] -> 5 - [5, 2] -> 2 - [2, 6] -> 2 - [6, 9] -> 6","solution":"from collections import deque def min_sliding_window(arr, k): Returns a list of the minimum element in each sliding window of size k for the given array. n = len(arr) if k == 1: return arr q = deque() result = [] for i in range(n): # Remove elements not in the current window if q and q[0] == i - k: q.popleft() # Maintain the order in deque while q and arr[q[-1]] >= arr[i]: q.pop() q.append(i) # First window sum at position k-1 if i >= k - 1: result.append(arr[q[0]]) return result def solve(t, test_cases): Processes the input test cases and returns the results as specified in the problem. results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] results.append(min_sliding_window(arr, k)) return results"},{"question":"Given a list of n integers, determine if it is possible to partition the list into two non-empty sublists such that the sum of the elements in both sublists is equal. If such a partition is possible, print \\"YES\\". Otherwise, print \\"NO\\". A partition can be defined as a way to split the list into two contiguous sublists. Input The first line contains an integer t (1 ≤ t ≤ 10) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the list. The second line contains n space-separated integers a_1, a_2, …, a_{n} (-10^4 ≤ a_i ≤ 10^4) — the elements of the list. Output For each test case, print \\"YES\\" if the list can be partitioned into two non-empty sublists with equal sums, otherwise print \\"NO\\". Example Input 3 4 1 2 3 4 5 1 1 1 1 2 3 -1 1 0 Output NO YES YES Explanation In the first test case, no such partition that results in equal sums exists. In the second test case, the list [1, 1, 1, 1, 2] can be partitioned into [1, 1, 1, 1] and [2]. The sum of both sublists is 4 and 2 respectively, which are not equal. In the third test case, the list [-1, 1, 0] can be partitioned into [-1, 1] and [0]. The sum of both sublists is 0, which are equal.","solution":"def can_partition_equal_sum(t, test_cases): results = [] for test_case in test_cases: n, a = test_case total_sum = sum(a) if total_sum % 2 != 0: results.append(\\"NO\\") continue target_sum = total_sum // 2 current_sum = 0 found = False for num in a: current_sum += num if current_sum == target_sum: found = True break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are tasked with building a system to analyze a collection of books and extract key statistical information about their content. Given a dataset containing multiple books, your program should compute the average number of unique words found in each book. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of books in the dataset. Each of the following n blocks describes a book in the following format: - The first line of each block contains an integer m (1 ≤ m ≤ 10⁵) — the number of words in the book. - The next m lines each contain a single word (a-z, A-Z characters only). Assume all words are separated by whitespace and case-sensitive (\'Word\' and \'word\' are considered different). Output Print a single floating-point number representing the average number of unique words per book with precision up to two decimal places. Examples Input 2 3 Hello world world 5 Programming is fun fun fun Output 2.50","solution":"def average_unique_words(book_data): Computes the average number of unique words per book. :param book_data: List of book descriptions where each description contains the total number of words followed by that many words. :return: The average number of unique words per book. num_books = book_data[0] index = 1 unique_word_counts = [] for _ in range(num_books): m = book_data[index] index += 1 words = book_data[index:index + m] unique_words = set(words) unique_word_counts.append(len(unique_words)) index += m average_unique = sum(unique_word_counts) / num_books return round(average_unique, 2)"},{"question":"A factory has several robotic arms arranged in a one-dimensional line. Each robotic arm can reach and pick up a specific number of boxes from its position either to the left or to the right but cannot move itself. Given an array representing the number of boxes each robotic arm can pick up from its position, your task is to determine if all boxes can be picked up and collected by the robotic arms acting within their capacity. Consider an array of integers where each element at index i represents the number of boxes robotic arm i can pick up from its position. A robotic arm standing at position i can reach and pick up boxes within the range [i - reach, i + reach], where \'reach\' is the value of the element at position i in the array. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of robotic arms (and also the length of the array). The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 50) — the number of boxes that each robotic arm can pick up. Output Print \\"YES\\" if all boxes can be collected by the arms from their positions, otherwise, print \\"NO\\". Examples Input 6 1 2 0 1 2 1 Output YES Input 5 0 0 0 0 5 Output NO Note In the first example, the robotic arms at positions 1, 2, 4, and 5 can collectively cover the entire array between positions 0 and 5. In the second example, only the robotic arm at the last position can act, and it cannot reach any other positions in the array to pick up boxes except those from its initial position at the end. Hence, it is impossible to collect all boxes.","solution":"def can_collect_all_boxes(n, boxes): max_reached = 0 for i, reach in enumerate(boxes): if i > max_reached: break max_reached = max(max_reached, i + reach) return \\"YES\\" if max_reached >= n - 1 else \\"NO\\""},{"question":"You are given a sequence of N integers, and you need to perform M operations on this sequence. Each operation can either update an element in the sequence or retrieve the maximum value from a certain range of the sequence. Write a program to handle the operations efficiently. # Input The first line contains two integers N and M (1 ≤ N, M ≤ 10^5) — the number of elements in the sequence and the number of operations. The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9) — the initial sequence. The next M lines describe the operations. Each line contains three integers: - The first integer is an operation type `t` (1 for update, 2 for query). - If `t = 1`, the next two integers are `i` (1 ≤ i ≤ N) and `x` (1 ≤ x ≤ 10^9) — update the i-th element to x. - If `t = 2`, the next two integers are `l` (1 ≤ l ≤ r ≤ N) and `r` — query the maximum value in the range from l to r (inclusive). # Output For each query operation, output the maximum value in the specified range. # Example Input ``` 5 5 1 5 2 4 3 2 2 4 1 3 6 2 1 5 1 5 7 2 4 5 ``` Output ``` 5 6 7 ``` # Note In the example, initially the sequence is `[1, 5, 2, 4, 3]`. The operations are: 1. Query maximum value from index 2 to 4, which is `5`. 2. Update the 3rd element to `6`, so the sequence becomes `[1, 5, 6, 4, 3]`. 3. Query maximum value from index 1 to 5, which is `6`. 4. Update the 5th element to `7`, so the sequence becomes `[1, 5, 6, 4, 7]`. 5. Query maximum value from index 4 to 5, which is `7`. # Implementation Tips - Use a data structure that supports both efficient updates and range maximum queries, such as a Segment Tree or a Fenwick Tree (Binary Indexed Tree) augmented for range maximum queries.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Insert leaf nodes in tree for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, pos, value): # Update the leaf node pos += self.n self.tree[pos] = value # Update the parents while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def range_query(self, left, right): # Range is [left, right) left += self.n right += self.n max_val = float(\'-inf\') while left < right: if left % 2: max_val = max(max_val, self.tree[left]) left += 1 if right % 2: right -= 1 max_val = max(max_val, self.tree[right]) left //= 2 right //= 2 return max_val def handle_operations(n, m, sequence, operations): seg_tree = SegmentTree(sequence) results = [] for op in operations: t, x, y = op if t == 1: seg_tree.update(x - 1, y) elif t == 2: results.append(seg_tree.range_query(x - 1, y)) return results"},{"question":"There is a rectangular grid of cells with dimensions `N x M`. Some of these cells contain obstacles represented by `1`, and empty cells are represented by `0`. You start from the top-left corner of the grid and want to reach the bottom-right corner. You can only move right or down through the grid, but you cannot move through cells that contain obstacles. Determine if there is a path from the top-left corner to the bottom-right corner and, if so, print the path as a sequence of moves (`R` for right and `D` for down). If there are multiple paths, any one of them is valid. Constraints * 1 leq N, M leq 1000 * The grid representation is a 2D list of integers where 0 leq grid[i][j] leq 1. Input The input is given from Standard Input in the following format: N M N lines with M integers (0 or 1) Output If there\'s no valid path from the top-left to the bottom-right corner, print `-1`. Otherwise, print a string representing one valid path from top-left to bottom-right corner. Examples Input 3 4 0 0 0 0 0 1 0 1 0 0 0 0 Output DDRRR Input 3 3 0 0 1 0 1 0 1 0 0 Output -1","solution":"def find_path(grid): n = len(grid) m = len(grid[0]) path = [] def dfs(x, y): if x == n - 1 and y == m - 1: return True if x + 1 < n and grid[x + 1][y] == 0: path.append(\'D\') if dfs(x + 1, y): return True path.pop() if y + 1 < m and grid[x][y + 1] == 0: path.append(\'R\') if dfs(x, y + 1): return True path.pop() return False if grid[0][0] == 0 and dfs(0, 0): return \'\'.join(path) else: return \'-1\'"},{"question":"A school is conducting a survey on the favorite fruits of the students. Each student can vote for one or more of their favorite fruits among the given options. The school wants to determine how many unique combinations of votes were cast. Given N students and F unique fruits, each student can vote for any subset of the F fruits (including voting for no fruits). Your task is to count the number of distinct voting patterns among all students. Constraints * 1 leq N leq 100 * 1 leq F leq 10 Input Input is given from Standard Input in the following format: N F votes_1 votes_2 ... votes_N Each votes_i line contains a space-separated list of integers representing the indices of the fruits that the i-th student voted for. Indices are 0-based. If a student didn\'t vote for any fruits, the corresponding line will be empty. Output Print the number of unique combinations of votes. Examples Input 3 3 1 2 0 2 2 Output 3 Input 4 2 0 1 0 1 1 0 Output 3 Input 2 4 0 1 2 3 3 Output 2","solution":"def count_unique_patterns(N, F, votes): Returns the number of unique combinations of votes cast by students. Parameters: N (int): Number of students F (int): Number of unique fruits votes (list of list of int): Each sublist contains indices of fruits voted by a student Returns: int: The number of unique combinations of votes unique_patterns = set() for vote in votes: # Convert the list of votes to a tuple (hashable type) to store in a set unique_patterns.add(tuple(sorted(vote))) return len(unique_patterns)"},{"question":"A game involves two players, Alice and Bob. They start with a pile of n stones. The players take turns making a move, with Alice going first. In each move, a player must remove any non-zero square number of stones from the pile. The player who cannot make a move loses the game. Determine who will be the winner if both players play optimally. Input A single integer n (1 ≤ n ≤ 1000), the initial number of stones in the pile. Output Print \\"Alice\\", if Alice wins, or \\"Bob\\", if Bob wins. You should print everything without the quotes. Examples Input 1 Output Alice Input 2 Output Bob Input 7 Output Bob Note In the first example, there is 1 stone in the pile. Alice can remove 1 stone (which is a square number), leaving Bob with no stones. Hence, Alice wins. In the second example, there are 2 stones in the pile. Alice cannot remove a square number of stones, so she loses. Thus, Bob wins. In the third example, there are 7 stones in the pile. The possible moves Alice can make are removing 1 or 4 stones. No matter what move Alice makes, Bob will always be left with a number of stones that ensures his victory, assuming both play optimally. Hence, Bob wins.","solution":"def game_winner(n): Determine the winner of the game given n stones. import math # Determine a dynamic programming list to track winning and losing positions. dp = [False] * (n + 1) for i in range(1, n + 1): j = 1 while j * j <= i: if not dp[i - j * j]: dp[i] = True break j += 1 return \\"Alice\\" if dp[n] else \\"Bob\\""},{"question":"In an alien language, words consist of lowercase Latin letters, and numerous words can match the same English word but correspond to different meanings. You are given a dictionary containing words in the alien language and their respective meanings in English. However, the meanings are scrambled, and you need to determine which word corresponds to which meaning correctly. Write a program that takes as input a list of alien words and their scrambled meanings. The program should determine whether it is possible to assign each meaning to exactly one word, in such a way that each word gets a unique meaning and no meaning is reused improperly. Input The first line contains the number n (1 ≤ n ≤ 1000) — the number of words and meanings. Then n lines follow, each containing an alien word and its corresponding scrambled meaning. Each word and each scrambled meaning are strings of lowercase Latin letters from 1 to 100 characters long. All strings are guaranteed to be unique. Output Print \\"YES\\" without quotes if it is possible to assign meanings uniquely, otherwise print \\"NO\\". Examples Input 4 axr lio bkm emd cwi przy dfo zynv Output YES Input 3 zla nrt bxo lwz myp umk Output YES Input 3 abc def def abc ghi def Output NO","solution":"def can_assign_unique_meanings(n, word_meanings): meaning_to_word = {} for word, meaning in word_meanings: if meaning in meaning_to_word: if meaning_to_word[meaning] != word: return \\"NO\\" else: meaning_to_word[meaning] = word return \\"YES\\""},{"question":"You are given a sequence of n integers: a_1, a_2, ..., a_n. You can perform the following operation on this sequence: choose any two adjacent elements and replace both of them with their product. Continue performing this operation until there is only one element left in the sequence. Let g(a_1, a_2, ..., a_n) denote the value of this final element after performing the operations optimally to maximize the result. For example: if the starting sequence is [2, 3, 1, 4], you can choose (1, 4) first, then the sequence becomes [2, 3, 4]. After that, choose (2, 3), making the sequence [6, 4]. Finally, choose (6, 4), which leaves the final element as 24. You are given a sequence of integers and have to answer multiple queries of the form (l, r), where for the i-th query you have to output g([a_{l}, a_{l+1}, ..., a_{r}]). Input The first line contains a single integer n (2 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6). The third line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the next q lines contains two integers l_i, r_i (1 ≤ l_i ≤ r_i ≤ n) — i-th query. Output Output q lines, in the i-th line output single integer — g([a_{l_i}, a_{l_i + 1}, ..., a_{r_i}]), answer to the i-th query. Examples Input 4 2 3 1 4 3 1 4 2 3 1 3 Output 24 3 6 Input 5 1 5 2 4 3 2 1 5 2 4 Output 120 40 Note In the first example: - For the sequence [2, 3, 1, 4], performing operations as described gives 24. - For the subsequence [3, 1], the optimal product sequence is [3, 1] → 3. - For the subsequence [2, 3, 1], the optimal product sequence is [2, 3, 1] → [6, 1] → 6. In the second example: - For the sequence [1, 5, 2, 4, 3], the optimal product sequence gives 120. - For the subsequence [5, 2, 4], the optimal product sequence gives 40.","solution":"def maximize_subsequence_product(sequence, queries): # Function to calculate the product of a subsequence def product(subsequence): result = 1 for num in subsequence: result *= num return result results = [] for l, r in queries: subsequence = sequence[l-1:r] results.append(product(subsequence)) return results"},{"question":"Alice is an avid book collector and she likes to organize her books into various categories on her bookshelf. She wants to automate the process of checking if her bookshelf is organized according to a given set of rules. Each book has a title and belongs to exactly one category. The rules are: 1. Books from the same category must be placed together. 2. Books from different categories must be placed in a specific order. You are tasked with writing a program that checks if Alice\'s bookshelf is organized correctly based on the categories and their required ordering. Input: The first line contains an integer C, the number of categories. The second line contains C space-separated strings, the names of the categories in the required order. The third line contains an integer B, the number of books on the shelf. Each of the next B lines describes one book and contains two strings: the book\'s title and its category name. It is guaranteed that the category name is one of the C categories provided in the second line. Output: Output \\"CORRECT\\" if the books are organized correctly, otherwise \\"INCORRECT\\". Constraints: 1 <= C <= 20 1 <= B <= 100 1 <= length of each title and category name <= 20 Example: Input: 3 Fiction Mystery Sci-fi 5 Book1 Fiction Book2 Fiction Book3 Mystery Book4 Mystery Book5 Sci-fi Output: CORRECT Explanation: The books from each category are together and follow the required category order. Example: Input: 3 Fiction Mystery Sci-fi 6 Book1 Fiction Book2 Mystery Book3 Fiction Book4 Mystery Book5 Sci-fi Book6 Sci-fi Output: INCORRECT Explanation: Books belonging to \\"Fiction\\" category are not placed together. Book2 violates the rule by belonging to the \\"Mystery\\" category separating the books from the \\"Fiction\\" category. Therefore, the book order is incorrect.","solution":"def check_bookshelf(C, categories, B, books): Check if the bookshelf is organized correctly based on the categories and their required ordering. # Create a map of category to its order index category_order = {category: i for i, category in enumerate(categories)} # Track the last seen order index of category in the bookshelf last_seen_order = -1 current_category = None for book_title, book_category in books: order_index = category_order[book_category] if current_category != book_category: if order_index < last_seen_order: return \\"INCORRECT\\" current_category = book_category last_seen_order = order_index return \\"CORRECT\\""},{"question":"A new restaurant, \\"Optimized Cuisine,\\" is opening soon and they are trying to develop a system to help the chefs prepare dishes more efficiently. Each dish requires a specific number of steps to be prepared, and each step takes a certain amount of time. The restaurant wants to know the minimum total time required to prepare a list of dishes if the chefs can work on different dishes simultaneously. Assume any number of chefs is available. Each dish preparation starts from when the chef starts the first step of that dish and ends when the chef finishes the last step of that dish. Each step of the dish must be completed in sequence, and only one chef can work on a single dish at a time. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 100), the number of dishes. Each of the next n lines describes a dish. Each line starts with an integer s (1 ≤ s ≤ 1000), the number of steps for that dish, followed by s integers, representing the time in minutes required for each step. Output For each test case, output a single integer — the minimum total time required to prepare all dishes simultaneously using infinite chefs. Example Input 2 3 2 3 4 4 2 2 1 1 3 4 6 2 2 3 1 3 2 2 4 1 Output 14 9 Explanation In the first test case, the minimum total time required is 14 since the longest dish takes that amount of time (4 + 6 + 2). In the second test case, the longest dish takes 9 minutes (1 + 3 + 2 + 3).","solution":"def min_total_time_for_dishes(test_cases): results = [] for test in test_cases: n = test[0] max_time = 0 for dish in test[1]: max_time = max(max_time, sum(dish)) results.append(max_time) return results def parse_input(input_data): lines = input_data.split(\\"n\\") t = int(lines[0].strip()) test_cases = [] index = 1 for _ in range(t): n = int(lines[index].strip()) index += 1 dishes = [] for _ in range(n): parts = list(map(int, lines[index].strip().split())) s, step_times = parts[0], parts[1:] dishes.append(step_times) index += 1 test_cases.append((n, dishes)) return test_cases"},{"question":"Little Jhool is back with another interesting problem. This time, it\'s related to his intense love for coding competitions. Little Jhool loves solving problems on arrays and he came across a rather challenging one that he needs your help with. Given an array of n integers, Little Jhool wants to find out the maximum sum possible by summing up all the elements except for exactly one element. In other words, he needs to determine the maximum sum by excluding one element at a time and then find the maximum value among those sums. Input format: The first line contains a single integer t, the number of test cases. Each test case contains: - The first line contains a single integer n, the number of elements in the array. - The second line contains n space-separated integers denoting the elements of the array. Output format: For each test case, print a single integer representing the maximum sum obtained by summing up all the elements except for one element. Constraints: 1 ≤ t ≤ 100 2 ≤ n ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 SAMPLE INPUT 3 5 1 2 3 4 5 4 -1 -2 -3 -4 6 100 200 300 400 500 600 SAMPLE OUTPUT 14 -1 2000 Explanation: In the first test case, the available sums are: - Excluding 1: 2+3+4+5 = 14 - Excluding 2: 1+3+4+5 = 13 - Excluding 3: 1+2+4+5 = 12 - Excluding 4: 1+2+3+5 = 11 - Excluding 5: 1+2+3+4 = 10 The maximum sum is 14. In the second test case, since we are dealing with negative numbers: - Excluding -1: -2-3-4 = -9 - Excluding -2: -1-3-4 = -8 - Excluding -3: -1-2-4 = -7 - Excluding -4: -1-2-3 = -6 The maximum sum is -1, which is obtained by excluding -4.","solution":"def max_sum_excluding_one(arr): This function takes an array of integers and returns the maximum sum possible by summing all the elements except for exactly one element. total_sum = sum(arr) min_element = min(arr) return total_sum - min_element def process_test_cases(test_cases): Given a list of test cases, each being a tuple (n, arr), return a list of results for each test case. results = [] for n, arr in test_cases: results.append(max_sum_excluding_one(arr)) return results"},{"question":"You are tasked with designing a warehouse robot system that navigates a grid to pick up and deliver packages. The grid is represented as an NxN matrix where each cell can either be empty or contain an obstacle. The robot starts at the top-left corner of the grid and needs to reach the bottom-right corner to complete its task. The robot can only move right or down at each step. Write a program to find the number of distinct paths the robot can take from the top-left to the bottom-right corner, avoiding obstacles. Input The input is given in the following format: N row1 row2 :: rowN The first line contains an integer N (1 ≤ N ≤ 100) representing the size of the grid. Each of the next N lines contains N characters which are either \'.\' (indicating an empty cell) or \'#\' (indicating an obstacle). Output Output a single integer representing the number of distinct paths the robot can take from the top-left to the bottom-right corner, avoiding obstacles. If there is no valid path, output 0. Example Input 5 ..#.. ..... #.# .#... ...#. Output 2","solution":"def num_paths(grid): N = len(grid) if grid[0][0] == \'#\' or grid[N-1][N-1] == \'#\': return 0 dp = [[0] * N for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(N): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][N-1] def number_of_paths(input_data): lines = input_data.strip().split(\'n\') N = int(lines[0]) grid = [list(line) for line in lines[1:N+1]] return num_paths(grid)"},{"question":"Erin is planning a garden renovation and wants to cover her backyard with square tiles. She has a square backyard with a side length of n meters, and she has two types of tiles available: small tiles that cover 1 square meter each, and large tiles that cover 2 square meters each. The large tiles are only available in even quantities, specifically in packs of two tiles per pack. Erin\'s goal is to cover as much of her backyard as possible with the large tiles, and then use the small tiles to cover the remaining area. Given the number of packs of large tiles (each pack containing two large tiles) and the total area of the backyard, determine the number of each type of tile needed to completely cover the backyard. Input The input consists of: - A single integer n (1 ≤ n ≤ 10^6), the side length of the square backyard in meters. - A single integer p (0 ≤ p ≤ 10^6), the number of packs of large tiles available. Output Print two integers: the number of large tiles and the number of small tiles required to cover the backyard completely. Examples Input 4 3 Output 6 10 Input 5 4 Output 8 9 Note In the first example, the backyard is 4x4 meters, so the entire area is 16 square meters. Erin has 3 packs of large tiles, which means 6 large tiles. Each large tile covers 2 square meters, so 6 large tiles will cover 12 square meters. She will need (16 - 12) / 1 = 4 small tiles to cover the remaining area. In the second example, the backyard is 5x5 meters, so the entire area is 25 square meters. Erin has 4 packs of large tiles, which means 8 large tiles. Each large tile covers 2 square meters, so 8 large tiles will cover 16 square meters. She will need (25 - 16) / 1 = 9 small tiles to cover the remaining area.","solution":"def compute_tiles(n, p): Compute the number of large and small tiles needed to cover the backyard. n: int - side length of the square backyard in meters p: int - number of packs of large tiles available (each pack contains two large tiles) Returns: Tuple (int, int) - number of large tiles used, number of small tiles used total_area = n * n large_tiles_available = p * 2 large_tile_area_covered = large_tiles_available * 2 if large_tile_area_covered > total_area: large_tiles_usable = total_area // 2 else: large_tiles_usable = large_tiles_available small_tiles_needed = total_area - large_tiles_usable * 2 return (large_tiles_usable, small_tiles_needed)"},{"question":"You are given two strings, `s` and `t`, each of length `n` consisting of lowercase English letters. You are allowed to perform the following operation any number of times: select two indices `i` and `j` (1 ≤ i, j ≤ n) and swap characters `s[i]` and `s[j]`. You need to determine if it is possible to make the two strings identical after any number of such operations. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the strings. The second line contains the string `s`. The third line contains the string `t`. Output Print \\"Yes\\" if it is possible to make `s` and `t` identical by performing the allowed operations any number of times. Otherwise, print \\"No\\". Example Input 5 abcde edcba Output Yes Input 4 aabb abab Output Yes Input 3 abc def Output No Note In the first example, you can swap characters to transform `s` into `t` or vice versa. In the second example, due to the frequencies of each character in `s` and `t` being the same, it is possible to perform swaps to make `s` and `t` identical. In the third example, it\'s impossible to make `s` and `t` identical as they contain different sets of characters.","solution":"def can_be_made_identical(n, s, t): Determines if two strings s and t can be made identical by swapping characters. :param n: Length of the strings (1 ≤ n ≤ 100) :param s: First string :param t: Second string :return: \\"Yes\\" if it is possible to make `s` and `t` identical, otherwise \\"No\\" # If both strings have the same set of characters and frequencies, they can be made identical if sorted(s) == sorted(t): return \\"Yes\\" else: return \\"No\\""},{"question":"You are given an array of integers and a target integer. Determine if there exists a pair of elements in the array that sum up to the target integer. If such a pair exists, print \\"YES\\". Otherwise, print \\"NO\\". Constraints * 2 leq array length leq 10^5 * -10^9 leq array elements leq 10^9 * -10^9 leq target leq 10^9 Input Input is given from Standard Input in the following format: * The first line contains the integer representing the target. * The second line contains the elements of the array separated by spaces. Output Print \\"YES\\" if there exists a pair of elements in the array that sum up to the target integer. Otherwise, print \\"NO\\". Examples Input 9 2 7 11 15 Output YES Input 10 1 2 3 4 5 Output NO","solution":"def pair_sum_exists(target, array): Determines if there exists a pair of elements in the array that sum up to the target integer. :param target: The target sum value as an integer :param array: List of integers :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\" complements = set() for num in array: if target - num in complements: return \\"YES\\" complements.add(num) return \\"NO\\""},{"question":"You are given a string `s` consisting of lowercase English characters. You can perform the following operation on the string `s` any number of times: choose any substring of the string `s` and reverse it. Your task is to determine if it is possible to convert the string `s` into a palindrome by performing any number of the above operations. Note: - A string is a palindrome if it reads the same forward and backward. - A substring is a contiguous sequence of characters within a string. Input The first line contains a single integer `t` (1 ≤ t ≤ 100), the number of test cases. Each of the next `t` lines contains a single string `s` (1 ≤ |s| ≤ 100), the string for which you need to determine if it can be converted into a palindrome. Output For each test case, print \\"YES\\" if it is possible to convert the string `s` into a palindrome by performing any number of operations. Otherwise, print \\"NO\\". Example Input 3 abcba abccba ab Output YES YES NO Explanation In the first test case, the string `s` is already a palindrome. In the second test case, the string `s` is already a palindrome. In the third test case, the string `s` contains more than one distinct character with an odd frequency. Thus, it cannot be converted into a palindrome.","solution":"def can_be_converted_to_palindrome(s): from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 def solve(t, test_cases): results = [] for s in test_cases: if can_be_converted_to_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Sample usage if __name__ == \\"__main__\\": t = 3 test_cases = [\\"abcba\\", \\"abccba\\", \\"ab\\"] print(solve(t, test_cases)) # Should output [\'YES\', \'YES\', \'NO\']"},{"question":"Given an array of integers, determine the number of distinct values in the array. Input The first line contains T denoting the number of test cases. Each test case consists of an integer N, the size of the array, followed by N integers representing the elements of the array. Output For each test case output one integer, the number of distinct values in the array. Constraints T ≤ 100 1 ≤ N ≤ 100 1 ≤ Array Element ≤ 10^4 SAMPLE INPUT 3 5 1 2 3 4 5 5 1 1 1 1 1 8 1 2 2 3 3 4 4 5 SAMPLE OUTPUT 5 1 5","solution":"def count_distinct_values(test_cases): Given a list of test cases where each test case is a list of integers, returns a list of integers where each integer represents the number of distinct values in that test case. results = [] for case in test_cases: distinct_count = len(set(case)) results.append(distinct_count) return results def parse_input(input_string): Parses the input string into a list of test cases. lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T + 1): test_case = list(map(int, lines[i].strip().split()[1:])) test_cases.append(test_case) return test_cases"},{"question":"In a country called Wordland, each citizen owns a unique word. The government wants to create a special code for each word such that no two words have the same code. The code for each word is constructed by concatenating the ASCII values of its characters in the same order as they appear. For example, the code for the word \\"abc\\" would be \\"979899\\" since the ASCII values of \'a\', \'b\', and \'c\' are 97, 98, and 99 respectively. There is a password cracking competition in Wordland, and participants are using a hacking algorithm that tries to guess the original word for a given code. To make it harder for them, the government decided to group the words in such a way that no two words in the same group have the same code. However, different groups can have the same code. Given a list of unique words, come up with the minimum number of groups required such that no two words within the same group have the same code. Input - The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. - For each test case, the first line contains an integer n (1 ≤ n ≤ 1000) — the number of words. - The next n lines contain one word each. The length of each word is between 1 and 20, inclusive, and consists of lowercase English letters only. Output For each test case, output a single integer — the minimum number of groups required. Example Input 2 3 abc def ghi 4 abc bac cab abc Output 1 3 Explanation In the first test case, all words have distinct codes, so only 1 group is needed. In the second test case, although \\"abc\\" appears twice, it still needs to be placed in different groups. \\"bac\\" and \\"cab\\" also have unique codes and can remain in one group. Therefore, 3 groups are required.","solution":"def word_to_code(word): Converts a word to its corresponding ASCII code representation. return \'\'.join(str(ord(char)) for char in word) def min_number_of_groups(test_cases): For each test case, determines the minimum number of groups required such that no two words within the same group have the same code. results = [] for words in test_cases: code_count = {} for word in words: code = word_to_code(word) if code in code_count: code_count[code] += 1 else: code_count[code] = 1 # The number of groups required is determined by the max frequency of any code max_frequency = max(code_count.values()) results.append(max_frequency) return results"},{"question":"You are given an array of size n, where the initial array elements are all zeros. You need to perform q operations on this array. Each operation is described by three integers: l, r and x. The operation increases each element of the array from index l to r (inclusive) by x. After all the operations are performed, you need to find the sum of all the elements in the array. Input The first line contains two integers n (1 ≤ n ≤ 10^6) and q (1 ≤ q ≤ 10^6) — the size of the array and the number of operations. Each of the next q lines contains three integers l, r and x (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10^9) — the parameters of the operation. Output Print a single integer — the sum of all the elements in the array after performing all the operations. Example Input 5 3 1 3 2 2 4 3 1 5 1 Output 20 Explanation Initially, the array is [0, 0, 0, 0, 0]. After the first operation: [2, 2, 2, 0, 0]. After the second operation: [2, 5, 5, 3, 0]. After the third operation: [3, 6, 6, 4, 1]. The sum is 3 + 6 + 6 + 4 + 1 = 20.","solution":"def sum_after_operations(n, q, operations): Returns the sum of all elements in the array after performing the given q operations. Parameters: n (int): Size of the array. q (int): Number of operations. operations (list of tuples): Each tuple contains three integers (l, r, x) representing an operation. Returns: int: Sum of the elements in the array after all operations. array = [0] * (n + 1) # Use an extra space for ease of implementation # Applying the operation using a difference array approach for l, r, x in operations: array[l-1] += x if r < n: array[r] -= x # Calculate the prefix sum to get the final array current_value = 0 final_sum = 0 for i in range(n): current_value += array[i] final_sum += current_value return final_sum"},{"question":"You are given an integer array `a` of length `n` and a target integer `t`. Your task is to determine if there exists a subarray of `a` such that the sum of elements in the subarray equals `t`. A subarray is defined as a contiguous portion of the array. Print \\"YES\\" if such a subarray exists and \\"NO\\" otherwise. # Input Format: - The first line contains two space-separated integers `n` and `t` (1 ≤ n ≤ 10^5, -10^9 ≤ t ≤ 10^9). - The second line contains `n` space-separated integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). # Output Format: - Print \\"YES\\" if there exists a subarray whose sum is `t`. Otherwise, print \\"NO\\". # Examples: Input: ``` 5 9 1 2 3 4 5 ``` Output: ``` YES ``` Input: ``` 5 20 1 2 3 4 5 ``` Output: ``` NO ``` Input: ``` 3 -1 -1 -2 -3 ``` Output: ``` YES ``` # Note: In the first example, the subarray [2, 3, 4] has the sum 9. In the second example, no subarray sums up to 20. In the third example, the subarray [-1] has the sum -1.","solution":"def subarray_sum_exists(n, t, a): current_sum = 0 sum_dict = {0: 1} for num in a: current_sum += num if (current_sum - t) in sum_dict: return \\"YES\\" sum_dict[current_sum] = sum_dict.get(current_sum, 0) + 1 return \\"NO\\""},{"question":"You are given two arrays a and b, each consisting of n integers. Your task is to determine if there exists a permutation p of the array a such that the sum of the bitwise AND of corresponding elements of p and b is at least a given integer k. In other words, you need to check whether we can reorder the elements of a to form an array p so that the following condition holds: (p[1] & b[1]) + (p[2] & b[2]) + ... + (p[n] & b[n]) ≥ k Input The first line of input contains two integers n and k (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ k ≤ 10^9) — the number of elements in arrays a and b, and the required sum of bitwise ANDs. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the elements of the array a. The third line contains n integers b_1, b_2, ..., b_n (0 ≤ b_i ≤ 10^9) — the elements of the array b. Output If there exists a suitable permutation p of array a that satisfies the condition, print \\"YES\\" on the first line. Otherwise, print \\"NO\\". Example Input 4 10 1 3 5 7 2 4 6 8 Output YES Input 3 15 1 2 3 4 5 6 Output NO","solution":"def can_form_permutation_with_min_and_sum(n, k, a, b): Determines if there exists a permutation of a such that the sum of the bitwise AND of corresponding elements of the permutation and b is at least k. Parameters: n (int): Number of elements in arrays a and b. k (int): The required minimum sum of bitwise ANDs. a (list of int): The elements of the array a. b (list of int): The elements of the array b. Returns: str: \\"YES\\" if such a permutation exists, \\"NO\\" otherwise. from itertools import permutations # Generate all possible permutations of array a for perm in permutations(a): and_sum = sum(x & y for x, y in zip(perm, b)) if and_sum >= k: return \\"YES\\" return \\"NO\\""},{"question":"Problem Statement The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. Given a positive integer N, your task is to compute the total number of terms in the Collatz sequence starting from N until it reaches 1. Input The first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. Each test case consists of exactly one line containing an integer N. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000000 (10^6) Output For each test case, output the total number of terms in the Collatz sequence starting from N until it reaches 1. Example Input: 3 6 19 27 Output: 9 21 112 Explanation Case #1: The sequence starting from 6 is: 6, 3, 10, 5, 16, 8, 4, 2, 1. The total number of terms is 9. Case #2: The sequence starting from 19 is: 19, 58, 29, 88, 44, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1. The total number of terms is 21. Case #3: The sequence starting from 27 has 112 terms before reaching 1.","solution":"def collatz_sequence_length(n): Returns the total number of terms in the Collatz sequence starting from n until it reaches 1. count = 1 # Starting from n itself while n != 1: if n % 2 == 0: n //= 2 else: n = 3 * n + 1 count += 1 return count def process_collatz_sequences(test_cases): Processes a list of test cases and returns the lengths of the Collatz sequences for each. test_cases: List of integers where each integer is a starting point for the Collatz sequence. Returns a list of integers representing the lengths of the sequences. return [collatz_sequence_length(n) for n in test_cases]"},{"question":"You are given an array `a` consisting of `n` integers and an integer `x`. Your task is to find the maximum length of any contiguous subarray in `a` such that the sum of the elements in the subarray is less than or equal to `x`. If no such subarray exists, you should return `0`. For example, if `a = [1, 2, 3, 4, 5]` and `x = 11`, one possible subarray is `[1, 2, 3, 4]` with a sum of `10`, and its length is `4`. Input The first line of the input contains two integers `n` and `x` (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ x ≤ 10^9) — the number of elements in the array `a` and the desired maximum sum, respectively. The second line of the input contains exactly `n` integers `a_1, a_2, ..., a_n` (1 ≤ `a_i` ≤ 10^9). Output Print a single integer — the maximum length of a contiguous subarray in `a` such that the sum of its elements is less than or equal to `x`. If no such subarray exists, print `0`. Examples Input ``` 5 11 1 2 3 4 5 ``` Output ``` 4 ``` Input ``` 5 5 6 7 8 9 10 ``` Output ``` 0 ``` Input ``` 8 15 5 1 2 3 8 6 1 4 ``` Output ``` 4 ``` Note In the first example, the maximum length subarray is `[1, 2, 3, 4]` with a sum of `10` and a length of `4`. In the second example, no subarray has a sum less than or equal to `5`. In the third example, the subarray `[5, 1, 2, 3]` has a sum of `11` and the length is `4`.","solution":"def max_length_subarray(a, x): n = len(a) max_length = 0 current_sum = 0 start = 0 for end in range(n): current_sum += a[end] while current_sum > x and start <= end: current_sum -= a[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given an array `arr` of `N` integers, you have to debug a function that finds the maximum sum of a subarray with a length exactly `K`. A subarray of array `arr` is a contiguous sequence of zero or more elements of `arr`. Your goal is to fix the code and implement a function that correctly returns the maximum sum of a subarray of length `K`. The function signature is as follows: ```python def max_sum_subarray_length_k(arr: List[int], K: int) -> int: ``` # Input - The function `max_sum_subarray_length_k` takes two arguments: 1. `arr`: A list of integers `(1 <= len(arr) <= 10^5, -10^4 <= arr[i] <= 10^4)`. 2. `K`: An integer `(1 <= K <= len(arr))`. # Output - The function returns an integer representing the maximum sum of a subarray of length `K`. # Example Input ``` arr = [5, 2, -1, 0, 3, 1, 2] K = 3 ``` Output ``` 6 ``` Explanation The subarray `[5, 2, -1]` gives the sum `6`, which is the maximum sum of any subarray of length `K`. Here is the initial buggy code for the function: ```python def max_sum_subarray_length_k(arr: List[int], K: int) -> int: n = len(arr) max_sum = float(\'-inf\') for i in range(n - K + 1): current_sum = sum(arr[i:i + K]) if current_sum > max_sum: max_sum = current_sum return max_sum ``` # Task You need to analyze the above function, identify the bug, and correct it to meet the requirements specified. Your corrected version should also be efficient in terms of execution time.","solution":"from typing import List def max_sum_subarray_length_k(arr: List[int], K: int) -> int: Returns the maximum sum of a subarray of length K. n = len(arr) max_sum = float(\'-inf\') current_sum = sum(arr[:K]) max_sum = current_sum for i in range(K, n): current_sum = current_sum + arr[i] - arr[i - K] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are organizing a movie marathon event at your university. Each movie has a specific duration. To keep the audience engaged, you want to create a marathon schedule such that the total duration of the selected movies is as close as possible to a given target duration T. You need to find the closest total duration to T that can be achieved by selecting zero or more movies from a given list of n movie durations. Input: The first line of the input contains two integers n and T (1 ≤ n ≤ 100, 1 ≤ T ≤ 10^5) — the number of movies and the target duration, respectively. The second line of the input contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 10^5), where d_i is the duration of the i-th movie. Output: Print one integer — the closest possible total duration to T that can be achieved by selecting zero or more movies from the list. Examples: Input 5 100 20 30 50 40 10 Output 100 Input 3 60 15 25 35 Output 60 Input 4 123 45 50 75 85 Output 120 Note: In the first example, you can select the movies with durations 50 and 50 to achieve exactly 100, which is the target duration. In the second example, you can select all movies with durations 15, 25, and 35 to achieve a total duration of 60. In the third example, you can select movies with durations 45 and 75 to achieve a total duration of 120, which is the closest to 123 without exceeding it.","solution":"def closest_movie_duration(n, T, durations): dp = [0] * (T + 1) for duration in durations: for j in range(T, duration - 1, -1): dp[j] = max(dp[j], dp[j - duration] + duration) return dp[T]"},{"question":"You are given an array of integers representing the number of pages in each chapter of a new book you are about to read. Your goal is to determine the maximum number of pages you can read during your most productive reading session. During any reading session, you can only read a contiguous sequence of chapters. Write a function `max_pages` that takes in a list of integers `pages` and returns the maximum number of pages read during any contiguous reading session. **Function Signature** ```python def max_pages(pages: List[int]) -> int: ``` **Input** - `pages` (List[int]): A list of integers where each integer represents the number of pages in a chapter. `1 <= len(pages) <= 10^5` and `1 <= pages[i] <= 1000`. **Output** - Returns an integer representing the maximum number of pages read during any contiguous reading session. **Examples** ```python assert max_pages([5, 2, -1, 3, -2, 6]) == 13 assert max_pages([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6 assert max_pages([1, 2, 3, 4, 5]) == 15 ``` **Explanation** 1. In the first example, the best contiguous sequence of chapters to read would be [5, 2, -1, 3, -2, 6] which sums up to 13. 2. In the second example, the contiguous sequence [4, -1, 2, 1] sums up to 6. 3. In the third example, the entire list forms the contiguous sequence with the highest sum, which is 15.","solution":"from typing import List def max_pages(pages: List[int]) -> int: Returns the maximum number of pages read during any contiguous reading session. max_sum = pages[0] current_sum = pages[0] for i in range(1, len(pages)): current_sum = max(pages[i], current_sum + pages[i]) max_sum = max(max_sum, current_sum) return max_sum # Examples to test the function print(max_pages([5, 2, -1, 3, -2, 6])) # Should output 13 print(max_pages([-2, 1, -3, 4, -1, 2, 1, -5, 4])) # Should output 6 print(max_pages([1, 2, 3, 4, 5])) # Should output 15"},{"question":"You are tasked with designing the layout of a garden using tiles. The garden is represented as an n x m grid, where n is the number of rows and m is the number of columns. Each cell in the grid can either be a grass tile (1) or a water tile (0). You have a limited number of stone tiles available which you can place on grass tiles to create paths. Each stone tile can be placed on a grass tile, but not on a water tile. Your goal is to create a single continuous path from the top-left corner of the grid (1, 1) to the bottom-right corner of the grid (n, m) using the stone tiles. You can move horizontally or vertically, but not diagonally. Given the grid and the number of stone tiles you have, determine if it is possible to create such a path. If it is possible, output \\"YES\\", otherwise output \\"NO\\". Input The first line contains three integers n, m, k (1 ≤ n, m ≤ 100, 0 ≤ k ≤ min(n * m, 1000)) — the number of rows, columns, and stone tiles you have, respectively. Each of the next n lines contains m integers representing the garden grid (either 0 for water or 1 for grass). Output Print \\"YES\\" if you can create a path from the top-left corner to the bottom-right corner using exactly k stone tiles, otherwise print \\"NO\\". Example Input 3 3 4 1 0 1 1 1 0 0 1 1 Output YES Input 2 2 2 1 0 0 1 Output NO Note In the first example, you can create the following path using 4 stone tiles: 1 0 1 1 1 0 0 1 1 In the second example, it\'s not possible to create a continuous path from the top-left to the bottom-right corner using 2 stone tiles.","solution":"def can_create_path(n, m, k, grid): Determines if it\'s possible to create a path from the top-left corner to the bottom-right corner of the grid using the given number of stone tiles only on grass tiles. if grid[0][0] == 0 or grid[n-1][m-1] == 0: return \\"NO\\" from collections import deque def bfs(): queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, stones = queue.popleft() if (x, y) == (n-1, m-1): return stones <= k for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 1: visited.add((nx, ny)) queue.append((nx, ny, stones + 1)) return False return \\"YES\\" if bfs() else \\"NO\\""},{"question":"Problem You are given an array of integers and a positive integer k. Your task is to rotate the array to the right by k steps, where k is non-negative. You need to return the modified array after k rotations. # Input - The first line contains an integer n, the size of the array (1 ≤ n ≤ 10^5). - The second line contains n integers, the elements of the array arr (1 ≤ arr[i] ≤ 10^9). - The third line contains the integer k (0 ≤ k ≤ 10^9). # Output - Output the array after rotating it to the right by k steps. # Examples Example 1: Input: ``` 5 1 2 3 4 5 2 ``` Output: ``` 4 5 1 2 3 ``` Example 2: Input: ``` 7 10 20 30 40 50 60 70 3 ``` Output: ``` 50 60 70 10 20 30 40 ``` Example 3: Input: ``` 4 1 2 3 4 4 ``` Output: ``` 1 2 3 4 ``` # Note: - Make sure to handle large values of k efficiently. The rotation of the array by k steps can be optimized by noting that rotating an array of size n by k steps is equivalent to rotating it by k % n steps.","solution":"def rotate_array(arr, k): Rotates the array to the right by k steps. :param arr: List[int], the array of integers :param k: int, the number of steps to rotate the array :return: List[int], the rotated array n = len(arr) k = k % n # Reduce k to the minimal equivalent rotation return arr[-k:] + arr[:-k]"},{"question":"A company wants to manage its network of computers more efficiently. Each computer can be thought of as a node in a graph, and a direct connection between two computers is an edge in that graph. Each direct connection between two computers has a certain cost, represented by positive integer values. The company wants to connect all the computers with the minimum possible total cost, ensuring there is exactly one path between any two computers (i.e., the network must be a tree). Write a program to find the minimum cost to connect all computers in the network. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of computers (nodes) and the number of direct connections (edges), respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — representing a direct connection between computer u and computer v with a cost w. Output Print the minimum cost to connect all the computers. If it is not possible to connect all the computers, print -1. Examples Input 4 5 1 2 1 1 3 2 1 4 3 2 3 4 3 4 5 Output 6 Input 3 1 1 2 1 Output -1 Note In the first example, the minimum cost to connect all computers is obtained by choosing the edges with costs 1, 2, and 3, thus the total cost is 6. In the second example, it is not possible to connect all three computers with the given single connection.","solution":"def find_minimum_cost(n, m, connections): Function to find the minimum cost to connect all computers in the network using Kruskal\'s Algorithm. If it\'s not possible, return -1. # Union-Find Data Structure to detect cycles parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x = find(x) root_y = find(y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 return True return False connections.sort(key=lambda x: x[2]) # Sort by edge costs total_cost = 0 edges_used = 0 for u, v, w in connections: if union(u, v): total_cost += w edges_used += 1 if edges_used == n - 1: # Minimum spanning tree is completed return total_cost return -1 if edges_used < n - 1 else total_cost # Read inputs def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) connections = [] index = 2 for _ in range(m): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) connections.append((u, v, w)) index += 3 print(find_minimum_cost(n, m, connections)) if __name__ == \\"__main__\\": main()"},{"question":"A delivery company operates in a city with n distinct districts connected by m bidirectional roads. Each road has a specific length associated with it. The company needs to create an optimal route from their headquarters in district 1 to make deliveries to all other districts, while minimizing the total travel distance. Given the number of districts n and the list of roads, determine the minimum distance needed for the company\'s delivery truck to travel to all districts from district 1. If some districts are unreachable, return -1. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 10,000) — the number of districts and the number of roads, respectively. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1,000), indicating that there is a road between districts u and v with length w. Output Print the minimum distance required for the delivery truck to reach all districts from district 1. If some districts are unreachable, print -1. Examples Input 4 4 1 2 1 2 3 2 3 4 1 1 3 4 Output 4 Input 3 1 1 2 1 Output -1 Note In the first sample, the optimal route is 1 -> 2 -> 3 -> 4 with a total distance of 4. In the second sample, district 3 is unreachable from district 1, so the output is -1.","solution":"import heapq def delivery_minimum_distance(n, m, roads): def dijkstra(graph, start, n): distances = {node: float(\'infinity\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) distances = dijkstra(graph, 1, n) max_distance = max(distances.values()) return max_distance if max_distance != float(\'infinity\') else -1"},{"question":"Given two integer arrays, nums1 and nums2, both of which are sorted in non-decreasing order, and two integers m and n representing the number of elements in nums1 and nums2 respectively, merge nums2 into nums1 as one sorted array. Note: - You may assume that nums1 has sufficient space (size that is equal to m + n) to hold additional elements from nums2. - nums1 and nums2 will not necessarily have the same length, and can have zero length. Input Format - The first line contains an array of integers, nums1. - The second line contains an array of integers, nums2. - The third line contains two integers, m and n. Output Format - A single line containing the merged and sorted array in non-decreasing order. Constraints: - 0 <= m, n <= 1000 - 1 <= nums1[i], nums2[i] <= 1000 (if m or n is not zero) Sample Input nums1: [1,2,3,0,0,0] nums2: [2,5,6] m: 3 n: 3 Sample Output [1,2,2,3,5,6] Explanation: nums1 has three initialized elements (1, 2, 3) and nums2 has three elements (2, 5, 6). When merged and sorted, the resulting array is [1, 2, 2, 3, 5, 6].","solution":"def merge(nums1, m, nums2, n): Merges two sorted arrays, nums2 into nums1, resulting in a sorted array. Parameters: nums1 (List[int]): First list of integers with a size of m + n. m (int): Number of initialized elements in nums1. nums2 (List[int]): Second list of integers. n (int): Number of initialized elements in nums2. Returns: List[int]: The merged and sorted array. # Last index of nums1 last = m + n - 1 # Merge in reverse order while m > 0 and n > 0: if nums1[m - 1] > nums2[n - 1]: nums1[last] = nums1[m - 1] m -= 1 else: nums1[last] = nums2[n - 1] n -= 1 last -= 1 # Fill nums1 with leftover elements of nums2 while n > 0: nums1[last] = nums2[n - 1] n -= 1 last -= 1 return nums1"},{"question":"Write a function `max_product_subarray` that takes a list of integers and returns the maximum product that can be obtained from a contiguous subarray. A subarray is defined as a contiguous segment of the array, and the product of a subarray is the product of all its elements. Your function should handle both positive and negative numbers, as well as zeros. The input list will have at least one integer. # Input - A list of integers `arr` with length `n` (1 ≤ n ≤ 10^5), where each integer in the list can be in the range from -1000 to 1000. # Output - An integer representing the maximum product of a contiguous subarray. # Example ```python max_product_subarray([2, 3, -2, 4]) # should return 6 max_product_subarray([-2, 0, -1]) # should return 0 ``` # Explanation - In the first example, the subarray `[2, 3]` yields the maximum product of 6. - In the second example, the single element subarray `[0]` yields the maximum product of 0.","solution":"def max_product_subarray(arr): Returns the maximum product of a contiguous subarray. if not arr: return 0 max_prod = min_prod = result = arr[0] for num in arr[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result"},{"question":"A light has been installed at the entrance of a tunnel. The tunnel is r meters long and a train of length l meters is expected to pass through it. The light turns on exactly at the moment the front end of the train enters the tunnel and turns off exactly at the moment the rear end of the train exits the tunnel. Given the speed of the train, v meters per second, calculate the total time (in seconds) the light remains on. Input The first line contains the length of the tunnel r (1 ≤ r ≤ 10^4), the length of the train l (1 ≤ l ≤ 10^4), and the speed of the train v (1 ≤ v ≤ 100) — all integers. Output Print the total time in seconds the light remains on with a precision of two decimal places. Examples Input 300 100 30 Output 13.33 Input 5000 500 60 Output 91.67 Note In the first sample, the total length covered by the train while the light is on is the sum of the tunnel length and the train length (300 + 100 = 400 meters). The time the light stays on is the total length divided by the speed (400 / 30 ≈ 13.33 seconds). In the second sample, the total length covered by the train while the light is on is the sum of the tunnel length and the train length (5000 + 500 = 5500 meters). The time the light stays on is the total length divided by the speed (5500 / 60 ≈ 91.67 seconds).","solution":"def light_on_duration(r, l, v): Returns the total time (in seconds) the light remains on with a precision of two decimal places. Parameters: r (int): Length of the tunnel in meters (1 ≤ r ≤ 10^4). l (int): Length of the train in meters (1 ≤ l ≤ 10^4). v (int): Speed of the train in meters per second (1 ≤ v ≤ 100). Returns: float: The time the light remains on in seconds. total_length = r + l # total distance the light needs to be on time_on = total_length / v return round(time_on, 2)"},{"question":"An alien species uses a numerical system based on base-7 instead of the usual base-10 that humans are accustomed to. They have a computer system where every number is stored as a base-7 numeral string. Given two such base-7 numeral strings, you are to perform several addition operations on pairs of integers obtained by converting the base-7 numeral strings back into base-10 integers. The result of each addition should also be represented as a base-7 numeral string. Your task is to write a function that performs these additions and returns the results in base-7 format. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of pairs of base-7 numeral strings. The next n lines each contain two base-7 numeral strings a and b (1 ≤ |a|, |b| ≤ 10), representing the two numbers to be added in that pair. Output Print n lines, each containing the result of the addition in base-7 format. Example Input 3 10 6 4 3 100 2 Output 16 10 102 Note The original pairs of base-7 numeral strings: 1. First pair \\"10\\" + \\"6\\" in base-7 is 7 + 6 = 13 (10 + 6 in base-10) which is 16 in base-7. 2. Second pair \\"4\\" + \\"3\\" in base-7 is 4 + 3 = 7 which is 10 in base-7. 3. Third pair \\"100\\" + \\"2\\" in base-7 is 49 + 2 = 51 (100 + 2 in base-10) which is 102 in base-7.","solution":"def base7_addition(pairs): results = [] for a, b in pairs: # Convert base-7 strings to base-10 integers a_base10 = int(a, 7) b_base10 = int(b, 7) # Perform addition in base-10 sum_base10 = a_base10 + b_base10 # Convert the sum back to base-7 sum_base7 = \'\' while sum_base10 > 0: sum_base7 = str(sum_base10 % 7) + sum_base7 sum_base10 //= 7 results.append(sum_base7 if sum_base7 else \'0\') return results"},{"question":"Layla loves puzzles and decides to challenge her friend Sam with a unique string manipulation problem. Given a string S consisting of lowercase alphabets only, Sam can perform the following operation any number of times: - Choose any two different characters in the string and swap all their occurrences. For example, if the string is \\"aabbcc\\" and Sam decides to swap \'a\' and \'b\', the resulting string will be \\"bbaacc\\". Layla asks Sam to determine the lexicographically smallest and largest strings he can form by performing any number of such operations. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S. Output: For each input string S, output one line containing the lexicographically smallest and largest strings Sam can form, separated by a space. Constraints: 1 ≤ T ≤ 10 1 ≤ Length of S ≤ 100,000 Scoring: 1 ≤ T ≤ 10, 1 ≤ Length of S ≤ 10 (20 pts) 1 ≤ T ≤ 10, 10 ≤ Length of S ≤ 1,000 (30 pts) 1 ≤ T ≤ 10, 1000 ≤ Length of S ≤ 100,000 (50 pts) SAMPLE INPUT 3 cbad abcd zzz SAMPLE OUTPUT abcd dcba abcd dcba zzz zzz Explanation Case 1: The lexicographically smallest string that can be formed from \\"cbad\\" by swapping characters is \\"abcd\\", and the largest is \\"dcba\\". Case 2: The input string \\"abcd\\" is already the smallest and the largest since it is perfectly sorted. Case 3: The input string \\"zzz\\" has all identical characters, so no swaps will change its configuration. Therefore, the smallest and largest strings are both \\"zzz\\".","solution":"def get_lexicographical_bounds(S): Given a string S, return a tuple containing the lexicographically smallest and largest string that can be formed by any number of swapping operations between different characters. smallest = \'\'.join(sorted(S)) largest = \'\'.join(sorted(S, reverse=True)) return smallest, largest def solve(T, strings): Given T test cases and a list of strings, returns the result for each string with the lexicographically smallest and largest strings possible. results = [] for S in strings: smallest, largest = get_lexicographical_bounds(S) results.append(f\\"{smallest} {largest}\\") return results"},{"question":"Alice loves organizing contests for her friends. This time, she came up with a number guessing game. She writes down a secret number and asks her friends to guess it. To make the game fair and interesting, she gives some hints. After each friend\'s guess, she tells them how many digits in their guess match the secret number exactly in both digit and position. Alice wants to automate this process, and she needs your help to write a program that compares each guess against the secret number and provides the number of exact matches. # Function Signature ```python def count_exact_matches(secret: str, guesses: List[str]) -> List[int]: # Your code goes here ``` # Input - `secret`: A string consisting of digits (0-9) representing the secret number. - `guesses`: A list of strings, where each string is a friend\'s guessed number consisting of digits (0-9). # Output - Return a list of integers where each integer represents the count of exact matches for the corresponding guess. # Constraints - The length of `secret` and each guess will be the same. - All characters in `secret` and `guesses` will be numeric digits. # Example Input ```python secret = \\"1234\\" guesses = [\\"1256\\", \\"1234\\", \\"4321\\", \\"5678\\"] ``` Output ```python [2, 4, 0, 0] ``` Explanation - The first guess \\"1256\\" has 2 digits (1, 2) matching in both digit and exact position with the secret \\"1234\\". - The second guess \\"1234\\" matches exactly with the secret, hence 4 matches. - The third guess \\"4321\\" has no digits matching in exact position, so 0 matches. - The fourth guess \\"5678\\" also has no digits matching in exact position, so 0 matches.","solution":"from typing import List def count_exact_matches(secret: str, guesses: List[str]) -> List[int]: Returns a list of integers where each integer represents the count of exact matches for the corresponding guess. result = [] for guess in guesses: matches = sum(1 for s, g in zip(secret, guess) if s == g) result.append(matches) return result"},{"question":"In a small town, there is a long road that runs straight from one end to the other. The road has houses situated on it, and each house has a specific position along the road. There is also a mailman who starts his delivery from the first house to the last house on the road. The mailman travels in a straight line from the starting house to the ending house, stopping at all the houses in between to deliver mail. Each house is defined by its position. Your task is to determine the maximum distance between any two consecutive houses on the road. This will help the mailman prepare for the longest interval he needs to cover without stopping. Input The first line contains a single integer n (2 ≤ n ≤ 100) — the number of houses on the road. The second line contains n space-separated integers, x1, x2, ..., xn (1 ≤ xi ≤ 1000) — the positions of the houses. The positions are given in arbitrary order and no two houses share the same position. Output Print a single integer — the maximum distance between any two consecutive houses after sorting the house positions in ascending order. Examples Input 4 2 5 12 8 Output 4 Input 3 1 4 7 Output 3 Input 5 10 3 6 1 15 Output 5","solution":"def max_distance_between_houses(n, positions): Calculate the maximum distance between any two consecutive houses. Args: n : int : number of houses positions : list of int : positions of the houses Returns: int : maximum distance between two consecutive houses # Sort the house positions positions.sort() # Calculate the maximum distance between consecutive houses max_distance = 0 for i in range(1, n): distance = positions[i] - positions[i - 1] if distance > max_distance: max_distance = distance return max_distance"},{"question":"You are given n vertices and m edges representing an undirected graph. The vertices are labeled from 1 to n. Each edge has a positive integer weight. Find the weight of the shortest path between two given vertices u and v. If there is no path between u and v, return -1. Input The first input line contains two integers n and m (1 ≤ n ≤ 200, 0 ≤ m ≤ 10000) — the number of vertices and edges in the graph, respectively. The following m lines contain three integers a, b and w (1 ≤ a, b ≤ n, 1 ≤ w ≤ 1000), where a and b are the vertices connected by an edge with weight w. The last line contains two integers u and v (1 ≤ u, v ≤ n) — the vertices for which you need to find the shortest path. Output Output a single integer — the weight of the shortest path between u and v, or -1 if there is no path. Examples Input 5 6 1 2 4 1 3 2 2 3 5 2 4 10 3 5 3 4 5 4 1 5 Output 5 Input 3 1 1 2 6 2 3 2 1 3 Output -1 Note In the first sample, one of the shortest paths from vertex 1 to vertex 5 is: 1 -> 3 -> 5, with a total weight of 2 + 3 = 5. In the second sample, there is no path from vertex 1 to vertex 3. Thus, the output is -1.","solution":"import heapq def shortest_path(n, m, edges, u, v): graph = [[] for _ in range(n + 1)] for a, b, w in edges: graph[a].append((w, b)) graph[b].append((w, a)) def dijkstra(src, dest): distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[src] = 0 priority_queue = [(0, src)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_vertex == dest: return current_distance if current_distance > distances[current_vertex]: continue for weight, neighbor in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return -1 return dijkstra(u, v)"},{"question":"Suppose you are given the following task: You need to write a function **findWays(n)** that determines the number of distinct ways to climb a staircase with **n** steps, where at each step you can either climb **1 step**, **2 steps**, or **3 steps**. Your function should return the number of distinct ways modulo **10^9 + 7 (1000000007)**. # Input - An integer **n** (1 ≤ n ≤ 10^6) representing the number of steps in the staircase. # Output - The function should output an integer representing the number of distinct ways to climb the staircase modulo **10^9 + 7**. # Examples Input ``` 3 ``` Output ``` 4 ``` **Explanation:** - There are 4 ways to climb a staircase with 3 steps: [1, 1, 1], [1, 2], [2, 1], [3]. Input ``` 4 ``` Output ``` 7 ``` **Explanation:** - There are 7 ways to climb a staircase with 4 steps: [1, 1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2], [1, 3], [3, 1]. # Note Write a function **findWays(n)** that calculates the number of distinct ways to climb the staircase of height **n**. Return the result modulo **10^9 + 7**.","solution":"def findWays(n): MOD = 1000000007 if n == 1: return 1 elif n == 2: return 2 elif n == 3: return 4 ways = [0] * (n + 1) ways[1], ways[2], ways[3] = 1, 2, 4 for i in range(4, n + 1): ways[i] = (ways[i-1] + ways[i-2] + ways[i-3]) % MOD return ways[n]"},{"question":"In a certain coding competition, participants engage in pair programming to solve challenging problems. To ensure variety, participants can only team up if their skill levels are different. Given a list of participants\' skill levels, you are required to determine the maximum number of teams that can be formed under these restrictions. Formally, you are given an integer array `skill` of size `N` where `skill[i]` denotes the skill level of the i-th participant. The participants can form a team if and only if no two team members have the same skill level. Your objective is to find the maximum possible number of such teams. Input: The first line of the input contains an integer `T`, the number of test cases. Each test case consists of two lines. The first line contains a single integer `N`, the number of participants. The second line contains `N` space-separated integers denoting the skill levels of the participants `skill[0], skill[1], ..., skill[N-1]`. Output: For each test case, print a single integer, which is the maximum number of teams that can be formed such that no team has participants with identical skill levels. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ skill[i] ≤ 10^9 Example: Input: 2 5 3 1 3 2 2 4 1 2 3 4 Output: 3 4 Explanation: In the first test case, the participants can be divided into the following teams: - Team 1: Participants with skill levels 1, 2 - Team 2: Participants with skill levels 2, 3 - Team 3: Participant with skill level 3 Hence, the maximum number of teams is 3. In the second test case, all skill levels are unique, so each participant can form a unique team. Consequently, the maximum number of teams is 4.","solution":"def max_teams_for_different_skills(T, cases): results = [] for i in range(T): N = cases[i][0] skills = cases[i][1] unique_skills = set(skills) results.append(len(unique_skills)) return results"},{"question":"Sam is learning Morse Code, which encodes letters and digits into sequences of dots (.) and dashes (-). He wants to write a function that translates a given string into Morse Code and vice versa. Your task is to help him by writing two functions: one that encodes a string into Morse Code and another that decodes a Morse Code string back into the original string. To make it interesting, let\'s consider only the English alphabet (A–Z, case-insensitive) and digits (0–9). Morse Code representation for each character is provided below: ``` A: .- N: -. 0: ----- B: -... O: --- 1: .---- C: -.-. P: .--. 2: ..--- D: -.. Q: --.- 3: ...-- E: . R: .-. 4: ....- F: ..-. S: ... 5: ..... G: --. T: - 6: -.... H: .... U: ..- 7: --... I: .. V: ...- 8: ---.. J: .--- W: .-- 9: ----. K: -.- X: -..- L: .-.. Y: -.-- M: -- Z: --.. ``` Spaces are used to separate Morse Code representations of individual characters, and three spaces ( ) are used to separate different words in Morse Code. # Input: The input consists of two lines: - The first line contains a string S indicating the operation type: \\"ENCODE\\" or \\"DECODE\\". - The second line contains the string that needs to be encoded or decoded. If the operation type is \\"ENCODE\\", it will be a regular string. If the operation type is \\"DECODE\\", it will be a string encoded in Morse Code using the rules mentioned above. # Output: Output the transformed string as required by the operation. # Example: Input 1: ``` ENCODE HELLO 123 ``` Output 1: ``` .... . .-.. .-.. --- .---- ..--- ...-- ``` Input 2: ``` DECODE .... . .-.. .-.. --- .---- ..--- ...-- ``` Output 2: ``` HELLO 123 ``` # Note: - All inputs will be valid and non-empty strings. - Characters should be case-insensitive for encoding and decoding. - Spaces in the original text should be retained during encoding and decoding, following the rules specified above.","solution":"morse_code_dict = {} reverse_morse_code_dict = {value: key for key, value in morse_code_dict.items()} def encode_morse(text): Encodes a regular string into Morse Code. text = text.upper() morse_list = [] words = text.split(\' \') for word in words: morse_word = \' \'.join(morse_code_dict[char] for char in word) morse_list.append(morse_word) return \' \'.join(morse_list) def decode_morse(morse): Decodes a Morse Code string into a regular string. words = morse.split(\' \') decoded_list = [] for word in words: decoded_word = \'\'.join(reverse_morse_code_dict[char] for char in word.split(\' \')) decoded_list.append(decoded_word) return \' \'.join(decoded_list) def process_input(operation, string): if operation == \\"ENCODE\\": return encode_morse(string) elif operation == \\"DECODE\\": return decode_morse(string) else: raise ValueError(\\"Invalid operation type.\\")"},{"question":"You are given an array of N integers. Your task is to make all the elements equal by applying the following operation any number of times: - Choose any subarray of the array and increment every element in that subarray by 1. Determine the minimum number of operations required to make all the elements equal. Input The first line contains a single integer T, denoting the number of test cases. The first line of each test case contains a single integer N, denoting the number of elements in the array. The next line contains N integers, the elements of the array. Output For each test case, print a single integer, the minimum number of operations required to make all elements of the array equal. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ ai ≤ 10^9 SAMPLE INPUT 2 3 1 2 3 4 7 7 9 8 SAMPLE OUTPUT 3 3 Explanation For the first test case, you can increment the subarray [1,2,3] three times to get [4,4,4]. For the second test case, you can increment the subarray [7,7,9,8] three times to get [10,10,12,11], [11,11,13,12], [12,12,14,13], then incrementing subarray [14,13] to get [14,14,14,14], making all elements equal requires minimum of 3 steps.","solution":"def min_operations_to_equalize(nums): Returns the number of increments needed to make all elements in the array equal. min_val = min(nums) operations = sum(num - min_val for num in nums) return operations def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] nums = test_cases[i][1] results.append(min_operations_to_equalize(nums)) return results"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid contains either a \'.\' or a \'*\'. \'.\' represents an empty cell and \'*\' represents a mine. Your task is to determine how many mines are adjacent to each cell and replace each empty cell with that number. Cells containing mines should remain unchanged. A cell is considered adjacent to another cell if it is horizontally, vertically, or diagonally neighboring. Input - The first line contains two integers N and M, representing the number of rows and columns in the grid, respectively. - The next N lines contain M characters each, representing the grid. Output - Output the modified grid with the same dimensions, where each empty cell is replaced by a digit representing the count of adjacent mines, and each mine remains unchanged. Constraints 1 ≤ N, M ≤ 50 Example Input: 4 4 .*.. .... ..*. .... Output: 1*10 1221 01*1 0111 Explanation For the given example, the output grid is calculated as follows: - The cell (1,2) contains a mine, so it remains \'*\'. - The cell (1,1) has 1 adjacent mine, so it is replaced with \'1\'. - The cell (2,2) has 2 adjacent mines, so it is replaced with \'2\'. - And so on for each cell.","solution":"def count_adjacent_mines(grid, row, col): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < len(grid) and 0 <= new_col < len(grid[0]): if grid[new_row][new_col] == \'*\': count += 1 return count def modify_grid(N, M, grid): result_grid = [] for row in range(N): result_row = \'\' for col in range(M): if grid[row][col] == \'*\': result_row += \'*\' else: mine_count = count_adjacent_mines(grid, row, col) result_row += str(mine_count) result_grid.append(result_row) return result_grid"},{"question":"You are given a rectangular grid with R rows and C columns. Each cell in the grid can be either empty or blocked. You can move up, down, left, or right from an empty cell to another empty cell. Your task is to calculate the number of distinct paths from the top-left corner (cell (1, 1)) to the bottom-right corner (cell (R, C)). A path is considered distinct if it visits a different sequence of cells, regardless of the actual order of moves. Constraints * 1 ≤ R, C ≤ 10 * Cells are either \'.\' (empty) or \'#\' (blocked). Input Input is given from Standard Input in the following format: ``` R C grid_1 grid_2 : grid_R ``` Each `grid_i` line contains C characters, representing the cells in row i of the grid. Output Output the number of distinct paths from (1, 1) to (R, C). Examples Input ``` 3 3 ... .#. ... ``` Output ``` 2 ``` Input ``` 3 3 ... ... ... ``` Output ``` 6 ``` Input ``` 3 3 .#. .#. ... ``` Output ``` 1 ``` Input ``` 3 3 # # # ``` Output ``` 0 ```","solution":"def num_distinct_paths(grid): Returns the number of distinct paths from the top-left corner to the bottom-right corner in a grid. R = len(grid) C = len(grid[0]) # If starting or ending positions are blocked, return 0 if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return 0 # Create a 2D dp array to store the number of ways to reach each cell dp = [[0] * C for _ in range(R)] dp[0][0] = 1 # Starting point for r in range(R): for c in range(C): if grid[r][c] == \'#\': dp[r][c] = 0 else: if r > 0: dp[r][c] += dp[r-1][c] if c > 0: dp[r][c] += dp[r][c-1] return dp[R-1][C-1] def parse_input(): import sys input = sys.stdin.read data = input().split() R, C = int(data[0]), int(data[1]) grid = data[2:] return R, C, grid def main(): R, C, grid = parse_input() print(num_distinct_paths(grid)) if __name__ == \\"__main__\\": main()"},{"question":"You are working on a new system for managing inventory in a warehouse. The warehouse receives shipments with specific quantities of items and records them as transactions. Each transaction specifies the item type and the quantity received. Sometimes, the same item type is received multiple times in different transactions. Your task is to create a consolidated inventory report that lists each item type and its total quantity in a sorted manner by item type. Write a function, `consolidate_inventory(transactions)`, that receives a list of tuples where each tuple represents a transaction in the format `(item_type, quantity)`. The function should return a list of tuples, where each tuple contains an item type and the consolidated quantity of that item, sorted by item type in increasing order. For example, the transaction list `[(“Apples”, 10), (“Bananas”, 5), (“Apples”, 20), (“Oranges”, 7), (“Bananas”, 3)]` should be consolidated and sorted as `[(\\"Apples\\", 30), (\\"Bananas\\", 8), (\\"Oranges\\", 7)]`. # Input - A list of tuples, where each tuple contains a string and an integer. - The item type is a non-empty string that consists of letters (both uppercase and lowercase). - The quantity is a positive integer. - The list contains at least one transaction and at most 100 transactions. # Output - A list of tuples containing the item type and the total quantity, sorted by item type. # Example Input ``` [(\\"Apples\\", 10), (\\"Bananas\\", 5), (\\"Apples\\", 20), (\\"Oranges\\", 7), (\\"Bananas\\", 3)] ``` Output ``` [(\\"Apples\\", 30), (\\"Bananas\\", 8), (\\"Oranges\\", 7)] ``` Input ``` [(\\"Paper\\", 15), (\\"Pen\\", 5), (\\"Notebook\\", 12), (\\"Pen\\", 3), (\\"Eraser\\", 10)] ``` Output ``` [(\\"Eraser\\", 10), (\\"Notebook\\", 12), (\\"Paper\\", 15), (\\"Pen\\", 8)] ```","solution":"def consolidate_inventory(transactions): Consolidates and sorts inventory transactions. Args: transactions (list of tuples): Each tuple contains an item type (string) and quantity (int). Returns: list of tuples: Consolidated and sorted inventory. inventory = {} for item, quantity in transactions: if item in inventory: inventory[item] += quantity else: inventory[item] = quantity consolidated_list = sorted(inventory.items()) return consolidated_list"},{"question":"You are given an array of integers. You want to partition the array into some number of non-empty subarrays such that each subarray is strictly increasing. Determine the minimum number of such subarrays required. Constraints * 1 leq |arr| leq 10^5 * -10^9 leq arr[i] leq 10^9 Input Input is given from Standard Input in the following format: n arr Where n is the number of elements in the array, and arr is the array containing n integers. Output Print the minimum number of subarrays required. Examples Input 6 1 2 3 4 3 4 Output 2 Input 5 5 6 3 7 8 Output 2 Input 7 10 20 30 40 50 60 70 Output 1 Input 4 4 1 2 3 Output 2","solution":"def min_partitions_for_increasing_subarrays(n, arr): if n == 0: return 0 partitions = 1 for i in range(1, n): if arr[i] <= arr[i - 1]: partitions += 1 return partitions"},{"question":"Ravi is designing a game application and he wants to simulate chessboard operations. One operation he needs help with is finding all the valid moves of a knight from a given position on the chessboard. The knight moves in an L-shape: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Input: Two integers representing the knight\'s position on the chessboard, `x` (row) and `y` (column). The position is 1-indexed (i.e., `x`, `y` in range 1 to 8). Output: Print all valid positions the knight can move to, each on a new line. The positions should be in the format (row, column) and ordered by the row number first and then by the column number. Constraints: 1 ≤ x, y ≤ 8 Example Input 1: 4 4 Example Output 1: (2, 3) (2, 5) (3, 2) (3, 6) (5, 2) (5, 6) (6, 3) (6, 5) Example Input 2: 1 1 Example Output 2: (2, 3) (3, 2)","solution":"def knight_moves(x, y): Returns a sorted list of valid knight moves from position (x, y) on a chessboard. Each move is represented as a tuple (row, column). # Valid knight moves (L-shaped) knight_moves = [ (2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1) ] # Validate and collect moves valid_moves = [] for move in knight_moves: new_x, new_y = x + move[0], y + move[1] if 1 <= new_x <= 8 and 1 <= new_y <= 8: valid_moves.append((new_x, new_y)) # Sort by row and then by column valid_moves.sort() return valid_moves"},{"question":"Alice loves reading books and recently she has received a new bookshelf for her collection. The bookshelf has exactly m shelves and each shelf has a maximum capacity of k books. Alice intends to arrange her n books on the bookshelf where each book has a certain height h_i. She wants to place the books in such a way that no shelf has books exceeding k in number and the total height of the books on any shelf does not exceed the capacity limit c. Can you help Alice determine whether it is possible to organize the books in her new bookshelf while satisfying the given constraints? Input The first line of input contains four integers n, m, k, and c (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100, 1 ≤ k ≤ 100, 1 ≤ c ≤ 10^9), the number of books, the number of shelves, the maximum number of books per shelf, and the maximum height capacity per shelf, respectively. The second line contains n integers h_i (1 ≤ h_i ≤ 10^9), which denote the heights of the books. Output Output \\"YES\\" if Alice can arrange all her books on the bookshelf according to the constraints. Otherwise, output \\"NO\\". Examples Input 5 3 2 15 5 10 14 7 4 Output YES Input 4 1 3 10 6 5 4 3 Output NO Note In the first test case, Alice can arrange her books in the following manner: - Shelf 1: Book 1 (height 5) and Book 5 (height 4), total height = 9 - Shelf 2: Book 2 (height 10), total height = 10 - Shelf 3: Book 3 (height 14), total height = 14 Not exceeding k books per shelf and not exceeding the height capacity c per shelf. In the second test case, Alice cannot fit all her books on the single shelf since the total number exceeds the capacity k = 3. Even though the total height does not exceed the capacity c.","solution":"def can_organize_books(n, m, k, c, heights): heights.sort(reverse=True) shelf_count = [0] * m shelf_height = [0] * m for height in heights: placed = False for i in range(m): if shelf_count[i] < k and shelf_height[i] + height <= c: shelf_count[i] += 1 shelf_height[i] += height placed = True break if not placed: return \\"NO\\" return \\"YES\\" # Example usage n = 5 m = 3 k = 2 c = 15 heights = [5, 10, 14, 7, 4] print(can_organize_books(n, m, k, c, heights)) # Output: YES n = 4 m = 1 k = 3 c = 10 heights = [6, 5, 4, 3] print(can_organize_books(n, m, k, c, heights)) # Output: NO"},{"question":"Sarah loves coding challenges and has recently come across a unique problem involving dynamic programming. The problem is about finding the longest common subsequence of characters between two given strings. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The longest common subsequence (LCS) of two sequences is one that appears as a subsequence in both sequences and is as long as possible. Sarah needs to write a program that computes the length of the longest common subsequence between two given strings. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the first string. - The second line contains a single integer m (1 ≤ m ≤ 1000) — the length of the second string. - The third line contains a string of length n. - The fourth line contains a string of length m. Output: - Print the length of the longest common subsequence of the two given strings. Examples Input: 6 7 ABCBDAB BDCABDC Output: 4 Input: 4 3 XMJY MJA Output: 2 Note: In the first example, one of the longest common subsequences is BCAB, which has a length of 4. In the second example, the longest common subsequence is MJ, which has a length of 2.","solution":"def longest_common_subsequence_length(n, m, s1, s2): Returns the length of the longest common subsequence of two given strings s1 and s2. n: Length of the first string s1 m: Length of the second string s2 s1: First string s2: Second string # Create a 2D array to store the lengths of longest common subsequence dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill the dp array using a bottom-up dynamic programming approach for i in range(1, n + 1): for j in range(1, m + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"A software company is developing a new feature for their product that suggests friend connections for their users based on common interests. To achieve this, they need to analyze the common interests of different users efficiently. The company have two sets of users\' interests and your task is to find the maximum similarity score among these interests using the following method: Two sets of interests A and B have a similarity score which is the cardinality of the intersection of sets A and B, i.e., the number of interests that are common between A and B. Given two lists of integers representing the interests of two users, your task is to determine the maximum similarity score between them. Input The first line of the input contains an integer T denoting the number of test cases. For each of the next T test cases, the first line contains two space-separated integers N and M, representing the number of interests of the two users. The second line contains N integers representing the interests of the first user. The third line contains M integers representing the interests of the second user. Output For each test case, print a single integer corresponding to the maximum similarity score. Constraints 1 ≤ T ≤ 100 1 ≤ N, M ≤ 10^5 1 ≤ Interest value ≤ 10^6 Example Input: 2 3 4 1 2 3 2 3 4 5 5 5 1 2 3 4 5 6 7 8 9 10 Output: 2 0 Explanation Example case 1: The interests of the first user are {1, 2, 3} and the interests of the second user are {2, 3, 4, 5}. The common interests are {2, 3}, hence the similarity score is 2. Example case 2: The interests of both users are disjoint sets {1, 2, 3, 4, 5} and {6, 7, 8, 9, 10}. Hence, there are no common interests and the similarity score is 0.","solution":"def maximum_similarity_score(T, test_cases): results = [] for i in range(T): N, M, interests_A, interests_B = test_cases[i] set_A = set(interests_A) set_B = set(interests_B) similarity_score = len(set_A & set_B) results.append(similarity_score) return results"},{"question":"Problem Description Given an array of integers, find the maximum product that can be obtained from any three distinct elements in the array. **Example** The array `[1, 2, 3, 4]` has several possible triplets (e.g., `[1,2,3]`, `[2,3,4]`, etc.), but the triplet `[2, 3, 4]` yields the maximum product, which is `24`. **Additional Example** Consider the array `[-10, -10, 5, 2]`. The triplet `[-10, -10, 5]` yields the maximum product, `-10 * -10 * 5 = 500`. **Input** - The first line contains an integer `n` denoting the number of elements in the array. - The second line contains `n` integers, describing the elements of the array. **Output** Return a single integer, which is the maximum product of any three distinct elements in the array. **Constraints** - `3 ≤ n ≤ 5*10^5` - `-10^6 ≤ array[i] ≤ 10^6` **Example** Sample Input: ``` 4 1 2 3 4 ``` Sample Output: ``` 24 ``` **Explanation** In the given array `[1, 2, 3, 4]`, the maximum product is obtained by multiplying `2, 3, and 4`, which results in `24`. **Clarification** The answer should handle negative numbers and zero efficiently. Ensure that the implementation can handle large inputs within the given constraints effectively. Use appropriate sorting algorithms and be mindful of time complexity.","solution":"def max_product_of_three(nums): Returns the maximum product of any three distinct elements in the array. nums.sort() # The product can be either the three largest numbers # or two smallest (which can be negative) and the largest one return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Andrew is fascinated with binary trees and recently started exploring different types of walks on binary trees. A binary tree is called complete if every level, except possibly the last, is completely filled, and all nodes are as far left as possible. Andrew decided to count how many unique binary trees can be formed using all values from 1 to n. To start off simply, he decided to preserve the in-order traversal sequence, meaning the nodes must appear in sorted order from 1 to n in the in-order traversal of the tree. Could you help Andrew compute the number of such unique binary trees? Input The single line contains an integer n which is the number of nodes in the binary tree (1 ≤ n ≤ 1000). Output You must print the number of unique binary trees on a single line. As the answer can be rather large, print it modulo 1000000007. Examples Input 3 Output 5 Input 4 Output 14","solution":"MOD = 1000000007 def num_unique_bsts(n): if n == 0 or n == 1: return 1 catalan = [0] * (n + 1) catalan[0] = 1 catalan[1] = 1 for i in range(2, n + 1): for j in range(i): catalan[i] = (catalan[i] + (catalan[j] * catalan[i - 1 - j]) % MOD) % MOD return catalan[n]"},{"question":"Given a string s consisting of only lowercase alphabets, you can delete any number of characters from the string. However, if you delete a character, you must also delete all instances of that character. Your goal is to determine the maximum length of a substring containing no repeating characters that you can achieve after performing any number of deletions. For example, if s = \\"abac\\", you can delete both \'a\'s to achieve the substring \\"bc\\", having no repeating characters, with a length of 2. Another example is if s = \\"abcabc\\", you can delete all \'a\'s, \'b\'s, or \'c\'s to achieve a substring of length 2. Your task is to implement a function that solves this problem for multiple strings provided as input. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The following t lines each contain a string s_i (1 ≤ |s_i| ≤ 100), representing the i-th test case. Output For each test case, print a single integer — the maximum length of a substring containing no repeating characters after performing any number of deletions. Example Input 3 abac abcabc aabbcc Output 2 2 2","solution":"def max_substring_no_repeats(s): Returns the maximum length of a substring containing no repeating characters after performing deletions. unique_characters = set(s) return len(unique_characters) def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(max_substring_no_repeats(s)) return results"},{"question":"Write a program that finds and prints all the prime numbers between two given integers m and n (inclusive). Constraints * 0 < m ≤ n < 10^6 Input Two integers m and n. Output Print all the prime numbers between m and n (inclusive) in a line, separated by a single space. If there are no prime numbers in the range, output an empty line. Examples Input 10 30 Output 11 13 17 19 23 29 Input 2 2 Output 2 Input 15 16 Output","solution":"def is_prime(num): Helper function to determine if a number is prime. if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def find_primes(m, n): Finds and returns all prime numbers between m and n (inclusive). primes = [] for i in range(m, n + 1): if is_prime(i): primes.append(i) return primes def format_primes(primes): Formats the list of prime numbers into a space-separated string. return \' \'.join(map(str, primes))"},{"question":"You are given n points in a 2D coordinate system, and an integer k. Your task is to find k points that form the smallest possible perimeter of a convex polygon. If there are multiple sets of k points that form such a polygon, you should return any one of them. Input - The first line contains two integers n and k (3 ≤ k ≤ n ≤ 200), representing the number of points and the number of points in the polygon, respectively. - The next n lines contain two integers x and y each, representing the coordinates of the points. All coordinates are within the range [-10^4, 10^4]. Output - Output k lines containing the coordinates of the k points that form the polygon with the smallest perimeter. The points should be listed in counterclockwise order around the polygon. Examples Input 5 3 0 0 1 0 0 1 1 1 2 2 Output 0 0 1 0 0 1 Input 6 4 4 4 5 4 4 5 5 5 1 2 2 1 Output 4 4 5 4 5 5 4 5","solution":"from itertools import combinations from math import sqrt def distance(p1, p2): return sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def calc_perimeter(points): n = len(points) perimeter = 0 for i in range(n): perimeter += distance(points[i], points[(i+1) % n]) return perimeter def convex_hull(points): points = sorted(points) if len(points) <= 1: return points def cross(o, a, b): return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) lower = [] for p in points: while len(lower) >= 2 and cross(lower[-2], lower[-1], p) <= 0: lower.pop() lower.append(p) upper = [] for p in reversed(points): while len(upper) >= 2 and cross(upper[-2], upper[-1], p) <= 0: upper.pop() upper.append(p) return lower[:-1] + upper[:-1] def smallest_perimeter_polygon(n, k, points): points = [tuple(p) for p in points] smallest_perimeter = float(\'inf\') best_polygon = None for comb in combinations(points, k): hull = convex_hull(list(comb)) if len(hull) == k: perimeter = calc_perimeter(hull) if perimeter < smallest_perimeter: smallest_perimeter = perimeter best_polygon = hull return best_polygon"},{"question":"Finding the unique length subsequences from a given sequence is a challenging yet interesting problem. Let’s create a question based on this concept. In the Kingdom of Sequence, sequences hold utmost importance. King Arrya has a sequence of integers and he wishes to find all unique subsequences of a given length k. A subsequence is defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Help King Arrya find all unique subsequences of length k from his sequence. Input: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100), the length of the sequence and the required length of the subsequences. - The second line contains n integers a1, a2, ..., an, the elements of the sequence. Output: - Print all unique subsequences of length k in lexicographical order. Each subsequence should be printed in a new line with elements separated by spaces. Example: Input: 5 3 1 2 2 3 4 Output: 1 2 2 1 2 3 1 2 4 1 3 4 2 2 3 2 2 4 2 3 4","solution":"from itertools import combinations def unique_subsequences(n, k, sequence): Returns all unique subsequences of length k from the given sequence in lexicographical order. sequence.sort() subsequences = sorted(set(combinations(sequence, k))) return subsequences"},{"question":"Given an integer array nums, you need to find all distinct triplets in the array that sum up to zero. Formally, you need to find three distinct indices i, j, k such that nums[i] + nums[j] + nums[k] == 0. Input The first line contains an integer n (3 ≤ n ≤ 104) — the number of elements in the array. The second line contains n space-separated integers representing the elements of the array nums, which may contain both positive and negative numbers. Output Print all distinct triplets that sum up to zero. Each triplet should be printed in ascending order within the triplet, and the triplets themselves should be printed in lexicographical order. If there are no such triplets, print an empty list. Example 1 Input 6 -1 0 1 2 -1 -4 Output -1 -1 2 -1 0 1 Example 2 Input 5 -2 0 1 1 2 Output -2 0 2 -2 1 1","solution":"def three_sum(nums): Returns all distinct triplets in the array that sum up to zero. Args: nums (List[int]): List of integers. Returns: List[List[int]]: List of all distinct triplets that sum up to zero. nums.sort() n = len(nums) result = [] for i in range(n-2): if i > 0 and nums[i] == nums[i-1]: # Skip duplicate elements continue left, right = 0, 0 left, right = i+1, n-1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left+1]: # Skip duplicate elements left += 1 while left < right and nums[right] == nums[right-1]: # Skip duplicate elements right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return result def format_triplets(triplets): Formats the triplets to be printed as output. Args: triplets (List[List[int]]): List of triplets. Returns: None for triplet in triplets: print(\' \'.join(map(str, triplet)))"},{"question":"You\'re given a string s consisting of lowercase English letters and an integer k. You can perform the following operation on the string as many times as you want: * Select any substring of length k and reverse it. Your task is to determine the lexicographically smallest string that can be obtained by performing the above operation. A substring is defined as a contiguous sequence of characters within a string. A string x is lexicographically smaller than string y if there exists an index i such that x_i<y_i, and x_j=y_j for all 1 ≤ j < i. Input The first line contains an integer k (1 ≤ k ≤ 100) — the length of the substring you can reverse. The second line contains a string s (1 ≤ |s| ≤ 1000) — the initial string consisting of lowercase English letters. Output Output the lexicographically smallest string you can get by performing the operation any number of times. Examples Input 3 cba Output abc Input 2 dcba Output abcd Note In the first example, by reversing the substring \\"cba\\", you get \\"abc\\", which is already the smallest possible string. In the second example, you can reverse the substring \\"dc\\" to get \\"cdba\\", and then reverse the substring \\"ba\\" to get \\"abcd\\".","solution":"def lexicographically_smallest_string(k, s): Returns the lexicographically smallest string by reversing any k-length substring any number of times. if k == 1: return \'\'.join(sorted(s)) # Perform the operations smallest_string = \'\'.join(sorted(s)) if k > 1 and k <= len(s): for i in range(len(s)): substring = s[i:i+k] if len(substring) < k: continue reversed_substring = substring[::-1] new_string = s[:i] + reversed_substring + s[i+k:] if new_string < smallest_string: smallest_string = \'\'.join(sorted(new_string)) return smallest_string"},{"question":"A city is organizing a series of hackathon events. Each hackathon can have multiple stages, but for simplicity, let\'s consider each hackathon event consists of only one coding challenge. You are tasked with organizing these hackathons in such a way that maximizes participation. Each hackathon event has certain constraints: 1. The event must start at a specific time and end at a specific time. 2. No two hackathon events should overlap. Given a list of hackathon events with their start and end times, determine the maximum number of hackathon events that can be organized without any overlap. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of hackathon events. - The following n lines each contain two integers si and ei (0 ≤ si < ei ≤ 10000) representing the start and end times of each event, respectively. Output: - A single integer, the maximum number of non-overlapping hackathon events that can be organized. Example: Input: 5 1 4 2 5 3 6 4 7 5 8 Output: 2 Input: 3 1 3 2 4 3 5 Output: 2 Clarification: In the first example, the maximum number of hackathon events without overlapping is 2, which can be achieved with the intervals [1, 4] and [5, 8], or [4, 7] and [5, 8]. In the second example, the maximum number of hackathon events without overlapping is also 2, which can be achieved with the intervals [1, 3] and [3, 5].","solution":"def max_non_overlapping_events(n, events): Returns the maximum number of non-overlapping hackathon events. Parameters: n (int): The number of hackathon events. events (list): List of tuples, where each tuple contains two integers (si, ei) representing the start and end times of each event. Returns: int: The maximum number of non-overlapping hackathon events that can be organized. # Sort events based on end time events.sort(key=lambda x: x[1]) max_events = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: max_events += 1 last_end_time = end return max_events"},{"question":"You are given two strings, `S` and `T`. You need to check if the string `T` can be formed by deleting some characters of string `S` (not necessarily contiguous). Write a function `isSubsequence(S: str, T: str) -> bool` that returns `True` if `T` can be formed from `S` by deleting some of the characters, otherwise return `False`. # Constraints * 1 <= |S| <= 10^4 * 1 <= |T| <= 10^4 * `S` and `T` consist of lowercase English letters only. # Input The function will take the following parameters: * `S`: a string representing the source string. * `T`: a string representing the target string. # Output The function should return a boolean value, `True` or `False`. # Examples Example 1 **Input:** S = \\"abcde\\" T = \\"ace\\" **Output:** True **Explanation:** We can delete the characters \'b\' and \'d\' from \\"abcde\\" to get \\"ace\\". Example 2 **Input:** S = \\"abcde\\" T = \\"aec\\" **Output:** False **Explanation:** It is not possible to form \\"aec\\" from \\"abcde\\" because \'e\' comes before \'c\' in `S`. Example 3 **Input:** S = \\"abc\\" T = \\"abc\\" **Output:** True **Explanation:** `S` and `T` are identical, so `T` is trivially a subsequence of `S`.","solution":"def isSubsequence(S: str, T: str) -> bool: Determines if T is a subsequence of S. :param S: Source string :param T: Target string :return: True if T is a subsequence of S, False otherwise t_index = 0 t_length = len(T) if t_length == 0: return True for char in S: if char == T[t_index]: t_index += 1 if t_index == t_length: return True return False"},{"question":"You are building a text editor that supports a feature called \\"balanced Bracket Checking\\". In this feature, the editor helps the user by automatically checking if the brackets in the text are balanced or not. Your task is to implement a function that takes a string containing various types of brackets - round `()`, square `[]`, and curly `{}` - and determines if the brackets are balanced. A string is considered to have balanced brackets if: 1. Every opening bracket has a corresponding closing bracket of the same type. 2. The brackets close in the correct order. Input: The input consists of a single line containing a string s (0 ≤ |s| ≤ 1000), where |s| is the length of the string. The string will contain only the characters `()`, `[]`, `{}`, and lowercase Latin letters. Output: Print `YES` if the string has balanced brackets, otherwise print `NO`. Examples: Input: {[()()]} Output: YES Input: {[(])} Output: NO Input: abc{def[ghi]} Output: YES Input: abc{def[ghijkl(mno]pqrs} Output: NO","solution":"def is_balanced(s): Checks if the input string s has balanced brackets. stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"Jennifer is a wildlife biologist who is studying the movement patterns of animals in a forest. She places several sensors in the forest that track the positions of animals at regular intervals. Each sensor records the coordinates of an animal when it passes by. Jennifer\'s task is to analyze these coordinates to determine if an animal is following a cyclic path or not. A cyclic path means that the animal returns to the same position it started from. To help Jennifer, you need to write a program that takes a sequence of positions recorded by sensors and determines if the animal has completed a cycle. Input The input consists of multiple datasets. Each dataset describes the sequence of positions recorded for one animal. Each dataset is in the following format: N x1 y1 x2 y2 ... xN yN The first line of each dataset contains an integer N (2 ≤ N ≤ 1000), which is the number of positions recorded. The next N lines each contain two integers xi and yi (0 ≤ xi, yi ≤ 1000), which are the coordinates of the positions recorded by the sensors. Input is terminated by a line containing only the integer \'0\'. This line should not be processed. Output For each dataset, print \\"Cycle\\" if the sequence of positions forms a cyclic path, otherwise print \\"No Cycle\\". Example Input 4 0 0 2 3 4 5 0 0 5 1 2 3 4 5 6 7 8 9 10 0 Output Cycle No Cycle","solution":"def is_cyclic_path(positions): Determine if the sequence of positions forms a cyclic path. :param positions: List of tuples containing (x, y) positions. :return: \\"Cycle\\" if the positions form a cyclic path, otherwise \\"No Cycle\\". return \\"Cycle\\" if positions[0] == positions[-1] else \\"No Cycle\\" def process_input(data): Process the input data to extract sequences of positions and determine if each forms a cyclic path. :param data: Multi-line string with the input data. :return: List of results for each dataset. results = [] lines = data.strip().split(\'n\') i = 0 while i < len(lines): N = int(lines[i]) if N == 0: break positions = [] for j in range(1, N + 1): x, y = map(int, lines[i + j].split()) positions.append((x, y)) results.append(is_cyclic_path(positions)) i += N + 1 return results"},{"question":"problem Ella is planning a hiking trip and wants to know the maximum height she can reach without running out of energy. She has a certain amount of initial energy and each step she takes either increases or decreases her energy. She can go up, down, left, or right, but she cannot revisit a step. Given the terrain and the energy costs, calculate the maximum height she can reach without depleting her energy. The terrain is represented as a 2D grid where each cell contains the energy cost to step into that cell and the height of that cell. Ella starts at a given starting position with the terrain having M rows and N columns. Each move she makes will also take up an energy unit. Create a program that finds the maximum achievable height starting from the given position and considering the energy constraints. Input The input consists of M + 2 lines. On the first line, two integers M and N (1 ≤ M, N ≤ 100) representing the number of rows and columns in the terrain grid are given. On the second line, two integers Sx and Sy (0 ≤ Sx < M, 0 ≤ Sy < N) representing the starting position. On the third line, one integer E (1 ≤ E ≤ 10000) representing the initial amount of energy. In the following M lines, each line contains N pairs of integers H and C (0 ≤ H ≤ 10000, 1 ≤ C ≤ 100) where H is the height of the cell and C is the energy cost to step into that cell. Output Print the maximum height that Ella can reach without running out of energy. Example Input 3 3 0 0 20 10 1 15 2 20 3 5 1 30 1 25 2 10 2 35 1 40 1 Output 40 Explanation Ella starts at (0, 0) with a height of 10 and energy 20. Possible path: (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) Energy used: 1 (to move)+ 1 (cost at (1,0)) = 2 2 + 1 (to move)+ 1 (cost at (1,1)) = 4 4 + 1 (to move) + 1 (cost at (2,1)) = 6 6 + 1 (to move) + 1 (cost at (2,2)) = 8 Remaining energy: 20 - 8 = 12 Maximum height reached following the above path = 40.","solution":"def max_height_reachable(M, N, Sx, Sy, E, terrain): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = set() max_height = 0 def dfs(x, y, energy, current_height): nonlocal max_height if energy < 0 or (x, y) in visited: return visited.add((x, y)) current_height = terrain[x][y][0] max_height = max(max_height, current_height) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N: new_energy = energy - 1 - terrain[nx][ny][1] dfs(nx, ny, new_energy, current_height) visited.remove((x, y)) energy_left = E - terrain[Sx][Sy][1] if energy_left >= 0: dfs(Sx, Sy, energy_left, terrain[Sx][Sy][0]) return max_height # Helper function to parse input and call max_height_reachable def parse_and_solve(input_str): lines = input_str.strip().split(\'n\') M, N = map(int, lines[0].split()) Sx, Sy = map(int, lines[1].split()) E = int(lines[2]) terrain = [] for i in range(3, 3 + M): row = list(map(int, lines[i].split())) terrain_row = [(row[j * 2], row[j * 2 + 1]) for j in range(N)] terrain.append(terrain_row) return max_height_reachable(M, N, Sx, Sy, E, terrain)"},{"question":"In a mysterious land called Matrixville, there exist `m x n` grid rooms. Each cell in the grid can either be empty (denoted by 0) or contain an obstacle (denoted by 1). You are tasked with creating an algorithm that finds the number of unique paths from the top-left corner of the grid (cell (0,0)) to the bottom-right corner (cell (m-1,n-1)), without hitting any obstacles. You can only move either down or right at any point in time and cannot pass through cells with obstacles. Input - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 100), the dimensions of the grid. - The next `m` lines each contain `n` integers `0` or `1`, representing the grid. Output - Output the number of unique paths from the top-left to the bottom-right corner of the grid. If there are no valid paths, output `0`. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 2 2 0 1 0 0 Output 1 Note In the first example, there are two paths from the top-left to the bottom-right corner: right→right→down→down and down→down→right→right. In the second example, there is only one path: down→right, as the right→down path is blocked by an obstacle.","solution":"def unique_paths_with_obstacles(grid): m = len(grid) n = len(grid[0]) # If the starting or ending cell is an obstacle, return 0 if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Initialize the DP table dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = 1 # Fill the first column for i in range(1, m): if grid[i][0] == 0: dp[i][0] = dp[i-1][0] # Fill the first row for j in range(1, n): if grid[0][j] == 0: dp[0][j] = dp[0][j-1] # Fill the rest of the DP table for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given a string S of length n consisting of characters A and B, and you can perform the following operations any number of times, in any order: 1. Choose any substring \\"ABA\\" and replace it with \\"BA\\". 2. Choose any substring \\"BAB\\" and replace it with \\"AB\\". Your goal is to determine the minimum number of operations needed to transform the string S into a string that contains no substrings \\"ABA\\" or \\"BAB\\". Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases in the test. Then t test cases follow. Each test case consists of a single string S (1 ≤ |S| ≤ 2 ⋅ 10^5) — the input string containing only characters \'A\' and \'B\'. Output For each test case, print a single integer — the minimum number of operations required to transform the string S into a string that contains no substrings \\"ABA\\" or \\"BAB\\". Example Input 3 ABABA BABAB AAABBBAA Output 2 2 0 Note In the first test case, you can make the following sequence of operations: - Replace the first \\"ABA\\" with \\"BA\\": \\"ABABA\\" -> \\"BABA\\" - Replace the \\"BAB\\" with \\"AB\\": \\"BABA\\" -> \\"ABAA\\" - Replace the second \\"ABA\\" with \\"BA\\": \\"ABAA\\" -> \\"BAA\\" Thus, you need a minimum of 2 operations. In the second test case, you can make the following sequence of operations: - Replace the first \\"BAB\\" with \\"AB\\": \\"BABAB\\" -> \\"ABAB\\" - Replace the second \\"BAB\\" with \\"AB\\": \\"ABAB\\" -> \\"AAB\\" Thus, you need a minimum of 2 operations. In the third test case, no operations are needed as the string does not contain \\"ABA\\" or \\"BAB\\".","solution":"def min_operations_to_transform_string(s): Determines the minimum number of operations required to transform the string s into a string with no substrings \\"ABA\\" or \\"BAB\\". count = 0 i = 0 while i < len(s) - 2: if s[i:i+3] == \'ABA\' or s[i:i+3] == \'BAB\': count += 1 i += 2 else: i += 1 return count def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_operations_to_transform_string(s)) return results"},{"question":"You are given an integer array `nums` and an integer `k`. You need to find the smallest `k` numbers from the array and return them. If there are multiple ways to do this (e.g., multiple elements with the same value), any combination of the smallest `k` numbers will be accepted. Input The first line contains an integer `t` (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ n) — the size of the array and the number of smallest elements to find. The second line of each test case contains `n` integers `nums_1, nums_2, ..., nums_n` (-10^9 ≤ nums_i ≤ 10^9) — the elements of the array. Output For each test case, output the smallest `k` numbers from the array on a new line. The elements of the array can be printed in any order. If there are multiple correct answers, any of them will be accepted. Example Input 3 5 2 4 2 5 3 1 6 3 9 7 2 6 5 8 4 4 1 1 1 1 Output 1 2 2 5 6 1 1 1 1","solution":"def find_smallest_k_numbers(nums, k): Return the smallest k numbers from the array. return sorted(nums)[:k] def process_test_cases(test_cases): Process multiple test cases. results = [] for n, k, nums in test_cases: smallest_k = find_smallest_k_numbers(nums, k) results.append(smallest_k) return results"},{"question":"Design a function that takes a list of heights of students and returns the number of students who are surrounded by taller students on both sides. You are provided with a list that represents the heights of students standing in a line. Input - The input consists of a single list of integers, where each integer represents the height of a student. Output - The output should be a single integer, the count of students who are shorter than both their immediate neighbors. Constraints - The length of the list is between 3 and 100 (inclusive). - Each height will be a positive integer no greater than 200. Example Input: [120, 130, 115, 140, 135, 150] Output: 2 Explanation: - The student with height 115 is shorter than both 130 and 140. - The student with height 135 is shorter than both 140 and 150.","solution":"def count_students_surrounded_by_taller(students): Returns the number of students who are shorter than both their immediate neighbors. :param students: List of integers representing the heights of students. :return: Integer count of students who are surrounded by taller students. count = 0 for i in range(1, len(students) - 1): if students[i] < students[i - 1] and students[i] < students[i + 1]: count += 1 return count"},{"question":"Diana is working on a project that involves managing a graph of servers. The servers are connected in a way that allows bi-directional communication between certain pairs. Diana needs to perform certain operations on this graph, and she needs your help to write a program to handle these operations. The graph consists of `n` servers and `m` bidirectional connections. The servers are numbered from 1 to `n`. Between any pair of servers, there can either be a direct connection or no connection at all. Diana needs to perform a sequence of operations on this graph and gather information about the connectivity of the servers. The operations can be of the following types: 1. Check if there is a direct or indirect path between server `u` and server `v`. 2. Add a new direct connection between server `u` and server `v`. Input The first line contains three integers `n`, `m`, and `q` (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5, 1 ≤ q ≤ 10^5) — the number of servers, the number of initial direct connections between servers, and the number of operations, respectively. The next `m` lines describe the initial direct connections. Each line contains two integers `u` and `v` (1 ≤ u, v ≤ n) indicating that there is a direct connection between server `u` and server `v`. The next `q` lines contain one of the following types of operations: * `1 u v`: Check if there is a path (direct or indirect) between server `u` and server `v`. Output \\"YES\\" if there is a path, otherwise output \\"NO\\". * `2 u v`: Add a new direct connection between server `u` and server `v`. It is guaranteed that there is initially at most one direct connection between any pair of servers, and no connections will be duplicated as part of operations. Output For each operation of the first type, print the result on a separate line. Examples Input 6 3 5 1 2 2 3 4 5 1 1 3 1 1 4 2 3 4 1 1 4 1 4 6 Output YES NO YES NO","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [0] * size def find(self, p): if self.parent[p] != p: self.parent[p] = self.find(self.parent[p]) return self.parent[p] def union(self, p, q): rootP = self.find(p) rootQ = self.find(q) if rootP != rootQ: if self.rank[rootP] > self.rank[rootQ]: self.parent[rootQ] = rootP elif self.rank[rootP] < self.rank[rootQ]: self.parent[rootP] = rootQ else: self.parent[rootQ] = rootP self.rank[rootP] += 1 def manage_servers(n, m, q, connections, operations): uf = UnionFind(n + 1) # servers are 1-indexed for u, v in connections: uf.union(u, v) results = [] for op in operations: if op[0] == 1: _, u, v = op if uf.find(u) == uf.find(v): results.append(\\"YES\\") else: results.append(\\"NO\\") elif op[0] == 2: _, u, v = op uf.union(u, v) return results"},{"question":"The city of Technoville has a unique binary system where every citizen\'s ID is stored as a binary string of length n. The mayor has decided to enhance cybersecurity by identifying IDs that exhibit a unique property: an ID is considered \\"secure\\" if no subsequence of its bits forms a palindrome longer than 1 bit. Given a binary string of length n, help the mayor find the first position of a secure ID substring of maximum possible length. The substring is considered secure if no subsequence (contiguous or non-contiguous) of its bits forms a palindrome longer than 1 bit. A palindrome is a sequence that reads the same forward and backward, and characters are case-sensitive. Input The first line contains an integer n (1 ≤ n ≤ 100 000) – the length of the binary string. The second line contains a binary string of length n. Output Print two integers – the starting and ending positions (1-based indexing) of the longest secure substring. If there are multiple substrings of the same maximal length, print the earliest one. Examples Input 5 10101 Output 1 1 Input 8 10011001 Output 1 1 Input 4 1111 Output 1 1 Note In the first example, all possible substrings contain palindromic subsequences longer than one character except for substrings of length 1. Hence, the first position 1, 1 is printed. In the second example, all possible substrings longer than length 1 contain a palindromic subsequence. Hence the substring starting at the first position with length 1 is printed. In the third example, all substrings of length greater than 1 are palindromes themselves. Hence, the substring from position 1 to 1 is printed.","solution":"def find_secure_substring(n, binary_string): Finds the first position of a secure substring of maximum possible length, where an ID is considered secure if no subsequence of its bits forms a palindrome longer than 1 bit. # Since any possible substring of length > 1 will have palindrome subsequences, # the maximal secure substring is any individual character. return 1, 1"},{"question":"Write a program to simulate a banking system that tracks accounts and allows financial transactions. The system should be able to process creation of new accounts, deposits, withdrawals, and balance inquiries. Ensure that withdrawals do not exceed the available balance. Each transaction should be validated and recorded appropriately. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset consists of a number of commands describing transactions and account-related operations. The first line of each dataset contains the number of commands n (1 ≤ n ≤ 100). Each of the next n lines contains a command: 1. \\"CREATE account_id initial_balance\\" creates a new account with the given account_id and initial_balance. 2. \\"DEPOSIT account_id amount\\" deposits the specified amount into the account with account_id. 3. \\"WITHDRAW account_id amount\\" withdraws the specified amount from the account with account_id, if the balance is sufficient. 4. \\"BALANCE account_id\\" outputs the current balance of the account with account_id. Account IDs are alphanumeric strings with a length of at most 10 characters. Initial balances and amounts are non-negative integers not exceeding 100,000. Output For each \\"BALANCE\\" command, output the balance of the specified account. If a withdrawal is attempted with insufficient funds, output \\"INSUFFICIENT_FUNDS\\". If an operation is attempted on a non-existent account, output \\"ACCOUNT_NOT_FOUND\\". Example Input 7 CREATE acc1 1000 DEPOSIT acc1 500 WITHDRAW acc1 300 BALANCE acc1 CREATE acc2 1500 WITHDRAW acc2 2000 BALANCE acc2 5 CREATE account1 5000 BALANCE account1 CREATE account2 3000 DEPOSIT account2 1000 BALANCE account2 0 Output 1200 INSUFFICIENT_FUNDS 1500 5000 4000","solution":"class Account: def __init__(self, initial_balance=0): self.balance = initial_balance def deposit(self, amount): self.balance += amount def withdraw(self, amount): if amount > self.balance: return \\"INSUFFICIENT_FUNDS\\" self.balance -= amount return \\"SUCCESS\\" class Bank: def __init__(self): self.accounts = {} def create_account(self, account_id, initial_balance): if account_id not in self.accounts: self.accounts[account_id] = Account(initial_balance) def deposit(self, account_id, amount): if account_id in self.accounts: self.accounts[account_id].deposit(amount) else: return \\"ACCOUNT_NOT_FOUND\\" def withdraw(self, account_id, amount): if account_id in self.accounts: return self.accounts[account_id].withdraw(amount) else: return \\"ACCOUNT_NOT_FOUND\\" def balance(self, account_id): if account_id in self.accounts: return self.accounts[account_id].balance else: return \\"ACCOUNT_NOT_FOUND\\" def process_bank_commands(input_list): bank = Bank() output = [] for command_set in input_list: for command in command_set: parts = command.split() action = parts[0] if action == \\"CREATE\\": bank.create_account(parts[1], int(parts[2])) elif action == \\"DEPOSIT\\": result = bank.deposit(parts[1], int(parts[2])) if result == \\"ACCOUNT_NOT_FOUND\\": output.append(result) elif action == \\"WITHDRAW\\": result = bank.withdraw(parts[1], int(parts[2])) if result == \\"ACCOUNT_NOT_FOUND\\" or result == \\"INSUFFICIENT_FUNDS\\": output.append(result) elif action == \\"BALANCE\\": result = bank.balance(parts[1]) if result == \\"ACCOUNT_NOT_FOUND\\": output.append(result) else: output.append(str(result)) return output def bank_system_executor(input_string): input_list = input_string.strip().split(\'n\') i = 0 datasets = [] while i < len(input_list): if input_list[i] == \'0\': break num_commands = int(input_list[i]) commands = input_list[i+1:i+num_commands+1] datasets.append(commands) i += num_commands + 1 return process_bank_commands(datasets)"},{"question":"The mayor of a small town wants to organize a series of events to celebrate the town\'s anniversary. The main event will be a series of connected parades, moving from one venue to another. Each venue can be considered a node, and the roads connecting them are edges in an undirected graph. The mayor wants to ensure that it is possible to start at any venue and visit every other venue exactly once, forming a Hamiltonian cycle. However, due to the budget constraints, the mayor can only afford a certain number of roads. You need to determine whether it is possible to construct the desired Hamiltonian cycle with the given nodes and edges. Input The input contains: 1. A single integer n (1 ≤ n ≤ 10) representing the number of venues. 2. A single integer m (0 ≤ m ≤ n*(n-1)/2) representing the number of available roads. 3. m lines each containing two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a bidirectional road between the venues u and v. Output Output \\"Yes\\" if it is possible to form a Hamiltonian cycle with the given venues and roads, otherwise print \\"No\\". Examples Input 4 4 1 2 2 3 3 4 4 1 Output Yes Input 4 3 1 2 2 3 3 1 Output No","solution":"from itertools import permutations def is_hamiltonian_cycle(n, edges): if n <= 1: return True adj_list = {i: set() for i in range(1, n + 1)} for u, v in edges: adj_list[u].add(v) adj_list[v].add(u) for perm in permutations(range(1, n + 1)): valid = True for i in range(n): if perm[i] not in adj_list[perm[i - 1]]: valid = False break if valid and perm[0] in adj_list[perm[-1]]: return True return False def can_form_hamiltonian_cycle(n, m, edge_list): edges = [tuple(map(int, edge.split())) for edge in edge_list] return \\"Yes\\" if is_hamiltonian_cycle(n, edges) else \\"No\\""},{"question":"Given a list of words, you need to find all the words that are concatenations of at least two other words from the list. The words in the list are provided as comma-separated strings with no spaces. Write a function to accomplish this task. The function should output the concatenated words in the same order they appear in the input list. If no such concatenated words exist, output an empty list. Input: A comma-separated string of words. Output: A list of concatenated words that can be formed by at least two other words from the input list. SAMPLE INPUT cat,dog,catdog,cats,dogcat,catsdog SAMPLE OUTPUT catdog,dogcat,catsdog","solution":"def find_concatenated_words(words_str): words = words_str.split(\',\') word_set = set(words) concatenated_words = [] def is_concatenated(word): if word in word_set: word_set.remove(word) for i in range(1, len(word)): prefix, suffix = word[:i], word[i:] if prefix in word_set and (suffix in word_set or is_concatenated(suffix)): word_set.add(word) return True word_set.add(word) return False for word in words: if is_concatenated(word): concatenated_words.append(word) return concatenated_words"},{"question":"Given a list of integers, return the length of the longest increasing subsequence. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, the subsequences of [3, 10, 2, 1, 20] include [3, 10], [3, 2], [3, 1], [3, 20], and so on. Notice that [10, 2] and [10, 1] are not subsequences as they do not maintain the order of elements from the original sequence. Write a function, `length_of_lis(nums)`, to compute the length of the longest increasing subsequence in a given list of integers. # Input - A single list `nums` of integers. The length of the list can be up to 2500 with each integer in the range of -10^4 to 10^4. # Output - Return an integer representing the length of the longest increasing subsequence. # Example ```python assert length_of_lis([10, 9, 2, 5, 3, 7, 101, 18]) == 4 # The longest increasing subsequence is [2, 3, 7, 101]) assert length_of_lis([0, 1, 0, 3, 2, 3]) == 4 # The longest increasing subsequence is [0, 1, 2, 3]) assert length_of_lis([7, 7, 7, 7, 7, 7, 7]) == 1 # The longest increasing subsequence is [7] ``` # Note The algorithm should run in `O(n log n)` time complexity, where `n` is the number of elements in the input list.","solution":"import bisect def length_of_lis(nums): Calculates the length of the longest increasing subsequence in a given list of integers. Uses a dynamic programming approach combined with binary search for O(n log n) complexity. if not nums: return 0 lis = [] for num in nums: pos = bisect.bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis)"},{"question":"Two friends, Sara and Tom, are playing a game with strings. Each player has a string of lowercase English letters, and they take turns transforming their string by either swapping any two characters or by reversing any substring of their string. The goal is for Sara to modify her string `s` so that it matches Tom\'s string `t`. You need to determine if it is possible for Sara to transform her string `s` into Tom\'s string `t` using these operations. Input The input consists of two lines. The first line contains string `s` and the second line contains string `t` (1 ≤ |s|, |t| ≤ 1000). Output Print \\"YES\\" (without quotes) if it is possible for Sara to transform `s` into `t`, and \\"NO\\" (without quotes) otherwise. Examples Input aabb bbaa Output YES Input xyz zyx Output YES Input abc abd Output NO Note In the first example, Sara can swap the first \'a\' with the first \'b\', and then swap the second \'a\' with the second \'b\' to make `s` equal to `t`. In the second example, Sara can reverse the entire string `s` to match `t`. In the third example, it is not possible to transform `s` into `t` because they contain different characters.","solution":"def can_transform(s, t): Determine if string s can be transformed into string t using given operations. :param s: source string :param t: target string :return: \\"YES\\" if possible, \\"NO\\" otherwise # To transform s into t, both strings must be permutations of each other if sorted(s) == sorted(t): return \\"YES\\" else: return \\"NO\\""},{"question":"Vera has recently developed an interest in strings and patterns. One day, she encountered an interesting problem. She has a string `s` and a pattern `t`, and she wonders how many distinct subsequences of `s` match pattern `t`. A subsequence is derived from string `s` by deleting some (or none) of its characters while preserving the relative order of the remaining characters. Vera is curious to find out how many different ways the pattern `t` can be formed as a subsequence from the string `s`. Input The first line contains a string `s` (1 ≤ |s| ≤ 100) consisting of lowercase letters. The second line contains a string `t` (1 ≤ |t| ≤ 100) consisting of lowercase letters. Output Output a single integer — the number of distinct subsequences of `s` that match `t`. Examples Input babgbag bag Output 5 Input rabbbit rabbit Output 3 Note In the first sample, the pattern `t` (\\"bag\\") can be formed in the following ways from `s` (\\"babgbag\\"): 1. ba_bg__a_g 2. ba_b__b_ag 3. ba_bg__ba__g 4. _b_a_bg__a__g 5. b_a__b__ag In the second sample, the pattern `t` (\\"rabbit\\") can be formed in the following ways from `s` (\\"rabbbit\\"): 1. r_a_bb_b_it 2. r_abb__b_it 3. rb_a_b_bit","solution":"def num_distinct(s, t): Function to count the number of distinct subsequences of s that match t. m, n = len(s), len(t) # dp[i][j] will hold the number of distinct subsequences of s[0..i-1] that equals t[0..j-1] dp = [[0] * (n + 1) for _ in range(m + 1)] # An empty pattern t can be matched with any substring s by deleting all characters in s for i in range(m + 1): dp[i][0] = 1 # Fill the dp table for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: # If the characters match, the number of ways to match is the sum of the ways to match without the current character and with it dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] else: # If the characters don\'t match, the number of ways to match is the same as without the current character dp[i][j] = dp[i - 1][j] return dp[m][n]"},{"question":"You are given two arrays of integers a and b, both of length n. Your goal is to transform array a into array b using a series of operations. In each operation, you can increment or decrement any element of array a by 1. You need to find the minimum number of operations required to transform a into b. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the arrays a and b. The second line contains n integers a1, a2, ..., an (−10^6 ≤ ai ≤ 10^6) — the elements of array a. The third line contains n integers b1, b2, ..., bn (−10^6 ≤ bi ≤ 10^6) — the elements of array b. Output Print a single integer — the minimum number of operations required to transform array a into array b. Examples Input 3 1 2 3 2 3 4 Output 3 Input 5 -1 -2 -3 -4 -5 -1 -2 -3 -4 -10 Output 5 Note In the first example, you can increment each element of a by 1 to get b. In the second example, you need to decrement the last element of a by 5 to get b. In both cases, the number of operations is minimized by making a direct transformation of corresponding elements.","solution":"def min_operations_to_transform(n, a, b): Returns the minimum number of operations to transform array a into array b. Each element of a can be incremented or decremented by 1 per operation. :param n: Length of the arrays a and b :param a: List of integers, initial array :param b: List of integers, target array :return: Minimum number of operations operations = 0 for i in range(n): operations += abs(a[i] - b[i]) return operations"},{"question":"Amanda is solving a problem relating to binary trees. She needs to find the maximum depth of a binary tree. The depth of a binary tree is the number of nodes along the longest path from the root node down to the farthest leaf node. Help Amanda by writing a function that computes the maximum depth of a binary tree. Your function will be given the root node of a binary tree. # Input - The input will be a binary tree represented as a list of values in level-order traversal (i.e., breadth-first traversal), where a `None` value signifies the absence of a node. # Output - Output a single integer representing the maximum depth of the binary tree. # Function Signature ```python def max_depth(tree: List[Optional[int]]) -> int: ``` # Constraints - The maximum number of nodes in the tree, `n`, is `10^5`. - The tree may be empty, i.e., it may contain no nodes at all. # Example Input ```python [3, 9, 20, None, None, 15, 7] ``` Output ```python 3 ``` Note In the given example, the tree structure is: ``` 3 / 9 20 / 15 7 ``` The maximum depth of the tree is 3. Another Example Input ```python [1, None, 2] ``` Output ```python 2 ``` Note In this example, the tree structure is: ``` 1 2 ``` The maximum depth of the tree is 2.","solution":"from typing import List, Optional from collections import deque class TreeNode: def __init__(self, val: Optional[int]): self.val = val self.left = None self.right = None def build_tree(level_order: List[Optional[int]]) -> Optional[TreeNode]: if not level_order: return None root = TreeNode(level_order[0]) queue = deque([root]) i = 1 while queue and i < len(level_order): node = queue.popleft() if level_order[i] is not None: node.left = TreeNode(level_order[i]) queue.append(node.left) i += 1 if i < len(level_order) and level_order[i] is not None: node.right = TreeNode(level_order[i]) queue.append(node.right) i += 1 return root def max_depth(tree: List[Optional[int]]) -> int: def dfs(node: Optional[TreeNode]) -> int: if not node: return 0 return 1 + max(dfs(node.left), dfs(node.right)) root = build_tree(tree) return dfs(root)"},{"question":"Given an integer N, print the reverse of the number. Input: First and only line in input contains an integer N. Output: Print the reverse of the integer N. Constraints: -10^9 <= N <= 10^9 SAMPLE INPUT 1234 SAMPLE OUTPUT 4321","solution":"def reverse_integer(N): Returns the reverse of the integer N. Handles both positive and negative integers. sign = -1 if N < 0 else 1 reversed_num = int(str(abs(N))[::-1]) return sign * reversed_num"},{"question":"Given an array A of length N , find the sum of the maximum difference between any two elements of each subarray of length K in the array. A subarray is defined as a contiguous portion of the array. # Input - An integer N (2 ≤ N ≤ 1000), the length of the array. - An integer K (1 ≤ K ≤ N), the length of the subarrays. - An array A of N integers. # Output - Output the sum of the maximum differences of all possible subarrays of length K . # Example Input 6 3 1 -2 4 5 -1 6 Output 21 # Explanation The subarrays of length 3 are [1, -2, 4], [-2, 4, 5], [4, 5, -1], and [5, -1, 6]. - Maximum difference in [1, -2, 4] is 4 - (-2) = 6. - Maximum difference in [-2, 4, 5] is 5 - (-2) = 7. - Maximum difference in [4, 5, -1] is 5 - (-1) = 6. - Maximum difference in [5, -1, 6] is 6 - (-1) = 7. The sum of these maximum differences is 6 + 7 + 6 + 7 = 26.","solution":"def max_diff_sum(N, K, A): def max_diff(subarray): return max(subarray) - min(subarray) total_sum = 0 for i in range(N - K + 1): subarray = A[i:i + K] total_sum += max_diff(subarray) return total_sum # Example usage: # N, K = 6, 3 # A = [1, -2, 4, 5, -1, 6] # print(max_diff_sum(N, K, A)) # Output: 26"},{"question":"Create a function `search_word_in_grid(grid, word)` that determines if a given word can be found in a grid of characters. A word can be found in the grid if it can be constructed from sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once within a single word. # Input: 1. `grid` : A list of lists of characters representing the grid (2D grid). 2. `word` : A string representing the word to be searched in the grid. # Output: Return `True` if the word can be found in the grid; otherwise, return `False`. # Constraints: - The grid can contain between 1 and 2000 rows, inclusive. - Each row in the grid contains between 1 and 2000 columns, inclusive. - Each character in the grid will be a lowercase English letter (`\'a\'` to `\'z\'`). - The length of word will be between 1 and 5000, inclusive. - The input word will contain only lowercase English letters. # Example: ```python grid = [ [\'a\', \'b\', \'c\', \'e\'], [\'s\', \'f\', \'c\', \'s\'], [\'a\', \'d\', \'e\', \'e\'] ] word = \\"abcced\\" print(search_word_in_grid(grid, word)) # Output: True grid = [ [\'a\', \'b\', \'c\', \'e\'], [\'s\', \'f\', \'c\', \'s\'], [\'a\', \'d\', \'e\', \'e\'] ] word = \\"see\\" print(search_word_in_grid(grid, word)) # Output: True grid = [ [\'a\', \'b\', \'c\', \'e\'], [\'s\', \'f\', \'c\', \'s\'], [\'a\', \'d\', \'e\', \'e\'] ] word = \\"abcb\\" print(search_word_in_grid(grid, word)) # Output: False ``` # Explanation: - In the first example, the word `abcced` can be found by following the path: grid[0][0] → grid[0][1] → grid[0][2] → grid[1][2] → grid[2][2] → grid[2][1]. - In the second example, the word `see` can be found by following the path: grid[2][2] → grid[2][1] → grid[1][3]. - In the third example, the word `abcb` cannot be constructed from the grid following the rules, as the character \'b\' needs to be reused which is not allowed.","solution":"def search_word_in_grid(grid, word): if not grid: return False rows, cols = len(grid), len(grid[0]) def dfs(r, c, idx): if idx == len(word): return True if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] != word[idx]: return False temp, grid[r][c] = grid[r][c], \'#\' found = (dfs(r + 1, c, idx + 1) or dfs(r - 1, c, idx + 1) or dfs(r, c + 1, idx + 1) or dfs(r, c - 1, idx + 1)) grid[r][c] = temp return found for i in range(rows): for j in range(cols): if grid[i][j] == word[0]: if dfs(i, j, 0): return True return False"},{"question":"Ivan loves writing stories and always carries his notebook where he writes down his thoughts. He quickly realizes he often gets inspiration in short bursts, which results in multiple lines being written down at various times throughout the day. However, for one specific story, Ivan needs to gather together the lines he wrote in proper chronological order. Given several timestamps and corresponding text lines that were recorded in an unordered list, your job is to help Ivan by sorting the lines based on when they were written. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of entries. Each of the next n lines contains a timestamp in the format \\"yyyy-mm-dd hh:mm:ss\\" followed by a text line. The timestamp and text line are separated by a space. Output Print each of the text lines in the order they were originally written, based on their timestamp. Each text line should be printed on a new line. Examples Input 3 2023-09-21 14:10:23 The sun is setting beautifully. 2023-09-21 08:55:12 An idea for a new story strikes me. 2023-09-21 22:33:01 The moon looks stunning tonight. Output An idea for a new story strikes me. The sun is setting beautifully. The moon looks stunning tonight. Input 2 2024-08-15 14:54:33 Today is a good day for a walk. 2024-08-15 06:33:45 Breakfast was especially delicious. Output Breakfast was especially delicious. Today is a good day for a walk.","solution":"def sort_story_entries(n, entries): Returns the text lines sorted by their timestamp. Args: n (int): The number of entries. entries (list of str): List of entries, each containing a timestamp and a text line. Returns: list of str: The text lines sorted by the timestamp. # Split each entry into timestamp and text line and store as tuples in a list parsed_entries = [] for entry in entries: timestamp, text = entry[:19], entry[20:] parsed_entries.append((timestamp, text)) # Sort the parsed entries by the timestamp parsed_entries.sort(key=lambda x: x[0]) # Extract the sorted text lines sorted_text_lines = [text for _, text in parsed_entries] return sorted_text_lines"},{"question":"Little Anya loves playing with arrays and finding interesting patterns in them. She came up with a new game for her summer vacation. The game involves creating a zigzag pattern using the elements of an array of distinct integers. A zigzag pattern in an array occurs when the differences between consecutive elements alternate between positive and negative. Formally, for an array `a` of length `n` (where `n > 1`), it should satisfy one of the following conditions for all indices `i` (1 ≤ i < n): - `a[i-1] < a[i] > a[i+1]` or - `a[i-1] > a[i] < a[i+1]` Given an array of distinct integers, your task is to determine if it can be rearranged to form a zigzag pattern. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Input format: - The first line contains an integer, t, denoting the number of test cases. - The next t lines contain a single integer, n, denoting the length of the array. - Following each n, there are n space-separated integers representing the elements of the array. Output format: - For each test case, print \\"YES\\" if the array can be rearranged to form a zigzag pattern, otherwise print \\"NO\\". Constraints: 1 ≤ t ≤ 100 2 ≤ n ≤ 1000 -1000 ≤ elements of the array ≤ 1000 SAMPLE INPUT 2 3 1 7 4 5 9 6 8 3 2 SAMPLE OUTPUT YES YES Explanation In the first test case, the array [1, 7, 4] is already in a zigzag pattern where the differences (7-1) and (7-4) alternate between positive and negative. In the second test case, one possible zigzag arrangement is [6, 9, 3, 8, 2], satisfying the condition where the differences (9-6), (3-9), (8-3), and (2-8) alternate between positive and negative.","solution":"def can_form_zigzag_pattern(array): Determines if an array can be rearranged to form a zigzag pattern. Args: array (list): List of distinct integers. Returns: str: \'YES\' if it can be rearranged to form a zigzag pattern, \'NO\' otherwise. n = len(array) if n < 2: return \\"NO\\" # Sort the array array.sort() # Form a zigzag pattern for i in range(1, n-1, 2): array[i], array[i+1] = array[i+1], array[i] # Check if the formed array is in zigzag pattern for i in range(1, n - 1): if not ((array[i-1] < array[i] > array[i+1]) or (array[i-1] > array[i] < array[i+1])): return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): Processes multiple test cases to determine if each can form a zigzag pattern. Args: t (int): Number of test cases. test_cases (list of tuples): List where each tuple contains (n, array) for a test case. Returns: list: List of results (\'YES\' or \'NO\') for each test case. results = [] for i in range(t): n, array = test_cases[i] results.append(can_form_zigzag_pattern(array)) return results"},{"question":"You are given an array of integers. In one move, you can choose any two integers in the array and replace them with their sum. Your task is to determine the minimum number of moves required to reduce the array to a single integer. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100) – the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) – the elements of the array. Output Print one integer – the minimum number of moves required to reduce the array to a single integer. Examples Input 4 1 2 3 4 Output 3 Input 5 5 5 5 5 5 Output 4 Input 2 10 20 Output 1 Note In the first example, we can perform the following moves: - Choose 1 and 2 and replace them with 3 (Array becomes [3, 3, 4]) - Choose 3 and 3 and replace them with 6 (Array becomes [6, 4]) - Choose 6 and 4 and replace them with 10 (Array becomes [10]) In the second example, we can perform the following moves: - Choose 5 and 5 and replace them with 10 (Array becomes [10, 5, 5, 5]) - Choose 10 and 5 and replace them with 15 (Array becomes [15, 5, 5]) - Choose 15 and 5 and replace them with 20 (Array becomes [20, 5]) - Choose 20 and 5 and replace them with 25 (Array becomes [25]) Therefore, the minimum number of moves to reduce the array to a single integer is n - 1.","solution":"def minimum_moves_to_reduce_array(n, arr): Returns the minimum number of moves required to reduce the array to a single integer. # The minimum number of moves to reduce array to single integer is always n - 1 return n - 1"},{"question":"In a certain country, there are n cities and m roads connecting some pairs of cities. Every road has an associated cost, which represents the fee travelers have to pay to use it. The government of the country wants to ensure that it is possible to travel between any two cities, but they also want to minimize the total cost. Your task is to determine the minimal total cost required to ensure that there is a way to travel between any two cities by building some of the roads. It is guaranteed that every city is reachable from every other city by traveling along the roads that are initially built. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000), the number of cities and roads, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), indicating that there is a road between cities u and v with cost w. It is guaranteed that there will be no more than one road between any pair of cities, and that there will be no self-loops. Output Print a single integer – the minimal total cost required to ensure that there is a way to travel between any two cities. Examples Input 4 5 1 2 3 1 3 2 2 3 4 3 4 1 2 4 5 Output 6 Input 3 3 1 2 1 2 3 2 1 3 5 Output 3","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_min_cost(n, edges): result = 0 i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: u, v, w = edges[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 result += w union(parent, rank, x, y) return result"},{"question":"You are given a string s of length n consisting of lowercase English letters. Find the number of distinct pairs (i, j) (1 ≤ i < j ≤ n) where the substring formed by s_i and s_j is a palindrome (that is, the substring reads the same forwards and backwards). For example, if s = \\"ababa\\", the suitable pairs are: * i=1 and j=5 (\\"a\\" and \\"a\\"); * i=2 and j=4 (\\"b\\" and \\"b\\"); * i=3 and j=3 (\\"a\\" and \\"a\\"); * i=4 and j=2 (\\"b\\" and \\"b\\"). Input The first line contains an integer t (1 ≤ t ≤ 10^3). Then t test cases follow. The first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains the string s of length n. It is guaranteed that the sum of n across all test cases does not exceed 2 ⋅ 10^5. Output For each test case, output a single integer — the number of distinct index pairs (i, j) (i < j), such that the substring formed by s_i and s_j is a palindrome. Example Input 3 5 ababa 4 abcd 3 aaa Output 4 0 3","solution":"def count_palindromic_pairs(n, s): Given a string s of length n, this function returns the number of distinct pairs (i, j) (1 ≤ i < j ≤ n) where s_i and s_j are the same. count = 0 char_count = {} # Iterate over each character in the string for char in s: # If the character has been seen before, increment the count by the frequency of this character seen so far if char in char_count: count += char_count[char] char_count[char] += 1 else: char_count[char] = 1 return count def process_cases(test_cases): results = [] for n, s in test_cases: results.append(count_palindromic_pairs(n, s)) return results"},{"question":"You are given an array of integers and a target integer sum. Your task is to determine the number of ways you can select two different integers from the array that sum up to the target. Write a function to solve this problem. Below is the structure of the problem. **Function Signature:** ```python def count_pairs(arr: List[int], target: int) -> int: ``` **Input:** - An integer `N` (1 ≤ N ≤ 100), the number of elements in the array. - A list of `N` integers `arr` (−10^5 ≤ arr[i] ≤ 10^5), the elements of the array. - An integer `target` (−10^5 ≤ target ≤ 10^5), the target sum. **Output:** - Return an integer representing the number of distinct pairs whose sum equals the target. **Example:** ```python print(count_pairs([1, 2, 3, 4, 3], 6)) # Output: 2 print(count_pairs([1, 1, 1, 1], 2)) # Output: 1 print(count_pairs([1, 2, 3], 5)) # Output: 1 print(count_pairs([1, 2, -3], -1)) # Output: 1 ``` **Explanation:** - In the first example, the pairs (1, 5) and (2, 4) result in a sum of 6. - In the second example, the only valid pair is (1, 1). - In the third example, the pair (3, 2) results in a sum of 5. - In the fourth example, the pair (1, -2) results in a sum of -1.","solution":"from typing import List def count_pairs(arr: List[int], target: int) -> int: This function returns the count of distinct pairs in the array that sum up to the target. if len(arr) < 2: return 0 counts = {} pair_count = 0 for number in arr: complement = target - number if complement in counts and counts[complement] > 0: pair_count += 1 counts[complement] -= 1 elif number in counts: counts[number] += 1 else: counts[number] = 1 return pair_count"},{"question":"Given a matrix `M` of size `n x m` filled with non-negative integers, your task is to rotate the matrix 90 degrees clockwise. Rotating a matrix 90 degrees clockwise means that the element at position `M[i][j]` in the original matrix will be positioned at `M[j][n-i-1]` in the rotated matrix. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), representing the number of rows and columns of the matrix `M`. - The next `n` lines contain `m` space-separated integers representing the elements of the matrix `M`. # Output - Output the rotated matrix of size `m x n` where each row is printed on a new line and elements are space-separated. # Examples Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 7 4 1 8 5 2 9 6 3 ``` Input ``` 2 4 1 2 3 4 5 6 7 8 ``` Output ``` 5 1 6 2 7 3 8 4 ``` # Note In the first example, the original matrix ``` 1 2 3 4 5 6 7 8 9 ``` is rotated to ``` 7 4 1 8 5 2 9 6 3 ``` In the second example, the original matrix ``` 1 2 3 4 5 6 7 8 ``` is rotated to ``` 5 1 6 2 7 3 8 4 ```","solution":"def rotate_matrix_90_degrees_clockwise(matrix): Rotates the given matrix 90 degrees clockwise. Parameters: matrix (list of list of int): The matrix to be rotated. Returns: list of list of int: The rotated matrix. n = len(matrix) m = len(matrix[0]) rotated_matrix = [[0] * n for _ in range(m)] for i in range(n): for j in range(m): rotated_matrix[j][n-i-1] = matrix[i][j] return rotated_matrix"},{"question":"A company has a number of projects, each requiring a certain number of developer days to complete. You are given a list of projects, each with a start day, end day, and the daily developer requirement. You need to determine if it is possible to complete all projects with a total of k developers available each day. Specifically, you need to check if on any given day, the total number of developers required by all ongoing projects exceeds k. Input The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of projects and the number of developers available each day. Each of the next n lines contains three integers si, ei, di (1 ≤ si ≤ ei ≤ 10^9, 1 ≤ di ≤ 10^9) where si is the start day, ei is the end day, and di is the number of developers required each day for the project. Output Output \\"YES\\" if it is possible to complete all projects without exceeding the total number of developers available on any given day. Otherwise, output \\"NO\\". Examples Input 3 10 1 3 4 2 5 6 4 6 5 Output NO Input 2 5 1 2 2 2 3 2 Output YES Input 4 15 1 4 5 2 6 4 3 5 6 7 8 3 Output YES","solution":"def can_complete_projects(n, k, projects): events = [] for project in projects: si, ei, di = project events.append((si, di)) events.append((ei + 1, -di)) events.sort() current_developers = 0 for event in events: day, change = event current_developers += change if current_developers > k: return \\"NO\\" return \\"YES\\" # Example usage: # n, k = 3, 10 # projects = [(1, 3, 4), (2, 5, 6), (4, 6, 5)] # print(can_complete_projects(n, k, projects)) # Output: NO"},{"question":"Vlad is an avid cyclist who loves exploring new terrains. On one of his adventures, he stumbled upon a unique problem while navigating through a landscape of hills and valleys. Vlad decided to model the problem and solve it programmatically. The landscape can be represented as a sequence of n hills and valleys, each defined by an integer indicating its height. Vlad wants to travel from the leftmost point of the landscape to the rightmost point, following a set of specific movement rules: 1. Vlad can move right to the next point in the sequence. 2. Vlad can move left to the previous point in the sequence. 3. Vlad can jump directly to any other point in the sequence, but this consumes a certain amount of energy. The cost of moving from point i to point j (where ( i neq j )) is calculated as the absolute difference in height between point i and point j. Vlad starts at the leftmost point (index 0) and wants to determine the minimum energy required to reach the rightmost point (index n - 1). Input The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of points in the landscape. The second line contains n integers ( h_1, h_2, ldots, h_n ) (1 ≤ ( h_i ) ≤ 1,000,000) — the heights of the points in the landscape. Output Print a single integer — the minimum energy required for Vlad to reach the rightmost point from the leftmost point. Example Input 5 4 7 2 8 5 Output 3 Note In the example, Vlad can jump directly from the first point (height 4) to the last point (height 5) with an energy cost of |4 - 5| = 1, which is the minimum energy required. Alternatively, he can move in the sequence directly from the first to the last with a series of jumps: - From 0 to 1 (cost |7 - 4| = 3) - Directly from 1 to 4 (cost |5 - 7| = 2) The optimal path, however, minimizes the direct energy cost with a single jump.","solution":"def min_energy_to_travel(n, heights): Returns the minimum energy required for Vlad to travel from the leftmost point to the rightmost point of the landscape. # Vlad can jump directly from the leftmost point to the rightmost point return abs(heights[0] - heights[-1])"},{"question":"There is a popular game where a player has to guess a hidden word. The word is represented by a list of unique lowercase English letters. The player makes guesses by selecting a letter from the alphabet. If the guessed letter is in the list, all occurrences of that letter in the hidden word are revealed; otherwise, the player loses a life. The player has a limited number of lives before the game ends. Write a function that, given the hidden word and the maximum number of lives, determines if the player can guess the word without losing all their lives. The function should return a boolean value: `True` if the player can guess the word successfully, and `False` otherwise. Input: - A string `word` consisting of unique lowercase English letters (1 ≤ len(word) ≤ 26). - An integer `lives` representing the maximum number of lives (1 ≤ lives ≤ 26). Output: - A boolean value `True` or `False`. The player is assumed to use a strategy where they guess each letter of the word correctly on their first try. Example Input: ```python word = \\"apple\\" lives = 5 ``` Output: ```python True ``` Input: ```python word = \\"banana\\" lives = 4 ``` Output: ```python False ```","solution":"def can_guess_word(word, lives): Determines if the player can guess the word without losing all their lives. Parameters: word (str): A string of unique lowercase English letters representing the hidden word. lives (int): The maximum number of lives the player has. Returns: bool: True if the player can guess the word successfully, and False otherwise. return len(word) <= lives"},{"question":"A bot working at a warehouse is tasked with sorting packages. The packages are arranged in a row and each package has a certain weight. The bot can perform the following operation an unlimited number of times: 1. Select two packages at indices i and j (1 ≤ i, j ≤ n and i ≠ j) such that the weight of the package at index i is greater than the weight of the package at index j. 2. Swap the two packages. Your task is to determine if the bot can sort the packages in non-decreasing order of their weights using these operations. Input The first line contains an integer t (1 ≤ t ≤ 10^5) — the number of test cases. The descriptions of the test cases follow. The first line of each test case contains an integer n (1 ≤ n ≤ 10^5) — the number of packages. The second line contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10^9) — the weights of the packages. It is guaranteed that the sum of n over all test cases does not exceed 10^5. Output For each test case, print \\"Yes\\" if the bot can sort the packages in non-decreasing order using the described operation. Otherwise, print \\"No\\". Example Input 3 5 5 3 4 1 2 1 2 4 7 6 3 8 Output Yes Yes Yes Explanation In the first test case, the bot can sort the packages as follows: Swap packages at indices 1 and 4 to get [1, 3, 4, 5, 2] Swap packages at indices 5 and 3 to get [1, 3, 2, 5, 4] Swap packages at indices 4 and 5 to get [1, 3, 2, 4, 5] Swap packages at indices 2 and 3 to get [1, 2, 3, 4, 5] Thus, the packages can be sorted in non-decreasing order. In the second test case, there is only one package, which is trivially sorted. In the third test case, the bot can sort the packages as follows: Swap packages at indices 1 and 3 to get [3, 6, 7, 8] Therefore, the packages can be sorted in non-decreasing order in all the given test cases.","solution":"def can_sort_packages(t, test_cases): results = [] for i in range(t): n, weights = test_cases[i] sorted_weights = sorted(weights) if weights == sorted_weights: results.append(\\"Yes\\") else: results.append(\\"Yes\\") return results"},{"question":"The Great Master at the Python Monastery is instructing his disciples on the art of list manipulation. One of the exercises involves performing a series of operations on a list of integers. Each operation either adds an integer to the list, removes an integer from the list, or queries the current sum of the list elements. The list starts empty. Your task is to implement a program that processes these operations and prints the results of the sum queries. Input The first line of input contains a single integer n (1 ≤ n ≤ 200000), the number of operations. Each of the following n lines contains one operation, which can be in one of the following formats: * \\"ADD x\\", where \\"ADD\\" is followed by a space and an integer x (-10^9 ≤ x ≤ 10^9). This operation adds the integer x to the list. * \\"REMOVE x\\", where \\"REMOVE\\" is followed by a space and an integer x (-10^9 ≤ x ≤ 10^9). This operation removes one occurrence of the integer x from the list. If the integer x is not in the list, this operation is ignored. * \\"SUM\\", which queries the sum of all the elements in the list and awaits a response. Output For each \\"SUM\\" operation, print the sum of the integers currently in the list. Example Input 8 ADD 5 ADD 3 SUM REMOVE 5 SUM ADD 10 ADD -2 SUM Output 8 3 11 Explanation Initially, the list is empty. After \\"ADD 5\\" -> [5] After \\"ADD 3\\" -> [5, 3] \\"SUMP 8\\" -> 5 + 3 = 8 After \\"REMOVE 5\\" -> [3] \\"SUM\\" -> 3 After \\"ADD 10\\" -> [3, 10] After \\"ADD -2\\" -> [3, 10, -2] \\"SUM\\" -> 3 + 10 + (-2) = 11","solution":"def process_operations(n, operations): result = [] current_list = [] current_sum = 0 for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": x = int(parts[1]) current_list.append(x) current_sum += x elif command == \\"REMOVE\\": x = int(parts[1]) if x in current_list: current_list.remove(x) current_sum -= x elif command == \\"SUM\\": result.append(current_sum) return result"},{"question":"You are given a rectangular matrix of dimensions m x n filled with positive integers. Your task is to find the total number of unique paths from the top-left corner to the bottom-right corner of the matrix. While navigating through the matrix, you can only move either down or right at any point in time. Write a program to determine the number of unique paths while avoiding cells marked as obstacles. Constraints * The dimensions of the matrix m and n are each ≤ 100. * Obstacle cells are marked with a 0, and traversable cells are marked with a 1. * The matrix has at least one path from the top-left to the bottom-right in the absence of obstacles. Input * The first line of input contains integers m and n, the dimensions of the matrix. * The next m lines each contain n integers (either 0 or 1), representing the matrix. Output Print the number of unique paths from the top-left to the bottom-right of the matrix, avoiding obstacles. Example Input 3 3 1 1 1 1 0 1 1 1 1 Output 2 Explanation There are two unique paths from the top-left to the bottom-right corner: 1. (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) 2. (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2)","solution":"def unique_paths_with_obstacles(matrix): Returns the number of unique paths from the top-left to the bottom-right corner of the matrix, avoiding obstacles. if not matrix or matrix[0][0] == 0: return 0 m = len(matrix) n = len(matrix[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if matrix[i][j] == 1: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"You are given a list of courses with their respective starting and ending times. Your task is to determine if a student can attend all the courses without any time conflicts. Input The input starts with an integer **T** (1 ≤ T ≤ 100), the number of test cases. Each test case starts with an integer **N** (1 ≤ N ≤ 100), the number of courses. The next N lines each contain two integers **start** and **end** (0 ≤ start < end ≤ 10000), representing the starting and ending times of a course. Output For each test case, output \\"YES\\" if the student can attend all courses without any conflicts, otherwise output \\"NO\\". Example Input 3 3 1 4 2 5 6 8 4 1 2 3 4 5 6 7 8 2 1 5 4 6 Output NO YES NO","solution":"def can_attend_all_courses(test_cases): results = [] for courses in test_cases: courses.sort(key=lambda x: x[0]) # sort courses by their starting times can_attend = True for i in range(1, len(courses)): if courses[i][0] < courses[i-1][1]: # if there is an overlap can_attend = False break results.append(\\"YES\\" if can_attend else \\"NO\\") return results"},{"question":"An e-commerce platform keeps a log of transactions made by customers. Each transaction record includes the customer ID, the amount spent, and the transaction type (either \\"purchase\\" or \\"refund\\"). Your task is to determine the net spending of each customer after all transactions are processed. A refund will reduce the net spending, whereas a purchase will increase it. In case of a refund, the amount will be deducted from the customer\'s total spending. Input: The first line contains an integer N, denoting the number of transactions. The next N lines each contain a string in the format \\"customer_ID amount transaction_type\\". Output: For each unique customer ID, print the customer ID followed by the net spending in the format \\"customer_ID net_spending\\". The output should be sorted in ascending order of customer ID. Constraints: 1 ≤ N ≤ 10^4 1 ≤ amount ≤ 10^5 The transaction_type will be either \\"purchase\\" or \\"refund\\". Note: Customer IDs are alphanumeric strings of up to 10 characters. SAMPLE INPUT 5 cust1 100 purchase cust2 200 purchase cust1 50 refund cust3 300 purchase cust2 30 refund SAMPLE OUTPUT cust1 50 cust2 170 cust3 300 Explanation cust1 has two transactions: a purchase of 100 and a refund of 50, yielding a net spending of 50. cust2 has two transactions: a purchase of 200 and a refund of 30, yielding a net spending of 170. cust3 has one transaction: a purchase of 300, yielding a net spending of 300.","solution":"def calculate_net_spending(transactions): Calculate net spending for each customer based on the list of transactions. Parameters: transactions (list of str): A list of transaction records in the format \\"customer_ID amount transaction_type\\" Returns: list of tuple: A sorted list of tuples where each tuple contains customer_ID and net_spending from collections import defaultdict spending = defaultdict(int) for record in transactions: parts = record.split() customer_id = parts[0] amount = int(parts[1]) transaction_type = parts[2] if transaction_type == \\"purchase\\": spending[customer_id] += amount elif transaction_type == \\"refund\\": spending[customer_id] -= amount result = sorted(spending.items()) return result"},{"question":"You are given a grid of size m x n. An ant is located at the top-left corner of the grid (1, 1), and it wants to reach the bottom-right corner (m, n). The ant can only move either down or right at any point in time. However, some cells are blocked and the ant cannot move to those cells. Your task is to determine the number of unique paths that the ant can take to reach the bottom-right corner of the grid from the top-left corner, modulo 1000000007 (109 + 7). Input - The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns of the grid. - The next m lines each contain n characters. Each character is either \'.\' indicating a free cell, or \'#\' indicating a blocked cell. Output Print a single integer representing the number of unique paths from the top-left corner to the bottom-right corner (1, 1) to (m, n), modulo 1000000007 (109 + 7). Examples Input 3 3 ... .#. ... Output 2 Input 3 3 #.# .#. #.# Output 0 Note - In the first sample, the following two paths are valid: (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) and (1, 1) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3). - In the second sample, there is no valid path because the first cell or the last cell is blocked.","solution":"def unique_paths_with_obstacles(m, n, grid): MOD = 1000000007 if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Starting point for i in range(m): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[m-1][n-1]"},{"question":"You are given a list of flight connections between several cities and the number of available frequent-flyer miles (FFM) you have. Each flight connection has a cost in FFM. Your goal is to determine if there is a way to travel from a starting city to a destination city using the available FFM. If a travel path is possible, you should return the sequence of cities you would travel through. If there are multiple such sequences, return any one of them. If no such path exists, return -1. Input The first line contains three integers n, m, and f (2 ≤ n ≤ 100, 1 ≤ m ≤ 5000, 0 ≤ f ≤ 10000), where n is the number of cities, m is the number of flights, and f is the number of available FFM. Each of the next m lines contains three integers u, v and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 10000), indicating a flight from city u to city v with a cost of c FFM. The last line contains two integers s and d (1 ≤ s, d ≤ n), where s is the starting city and d is the destination city. Output If there is a travel path from city s to city d that costs no more than f FFM, print the sequence of cities representing this path. If there are multiple possible sequences, you can print any one. If no such path exists, print -1. Example Input 5 6 1000 1 2 200 1 3 500 2 4 700 3 4 300 4 5 400 3 5 600 1 5 Output 1 3 4 5 Explanation In this example, you start at city 1 and have 1000 FFM. You can travel through cities 1 -> 3 -> 4 -> 5 with a total cost of 500 + 300 + 400 = 1200 FFM. There is no valid path within 1000 FFM. Therefore, the expected output is -1.","solution":"from collections import defaultdict, deque def find_path(n, m, f, flights, s, d): Determines if there is a way to travel from city `s` to city `d` using available frequent-flyer miles `f`. Returns the sequence of cities if possible, otherwise returns -1. graph = defaultdict(list) for u, v, c in flights: graph[u].append((v, c)) graph[v].append((u, c)) queue = deque([(s, [s], 0)]) visited = {s: 0} while queue: city, path, cost = queue.popleft() if cost > f: continue if city == d: return path for next_city, next_cost in graph[city]: new_cost = cost + next_cost if next_city not in visited or new_cost < visited[next_city]: visited[next_city] = new_cost queue.append((next_city, path + [next_city], new_cost)) return -1 # Example n = 5 m = 6 f = 1000 flights = [ (1, 2, 200), (1, 3, 500), (2, 4, 700), (3, 4, 300), (4, 5, 400), (3, 5, 600) ] s = 1 d = 5 # Output print(find_path(n, m, f, flights, s, d))"},{"question":"In the fictive land of Stringland, there is a special type of strings called \\"alternating strings\\". A string is considered an alternating string if it consists of characters \'A\' and \'B\' only, and no two consecutive characters are the same. Given a string s of length n (1 ≤ n ≤ 100), you are to determine the minimum number of operations required to make the string an alternating string. In one operation, you can replace any character in the string with either \'A\' or \'B\'. Input The first line contains a single integer n, which denotes the length of the string. The second line contains the string s consisting of uppercase letters \'A\' and \'B\'. Output Print a single integer — the minimum number of operations required to convert the string into an alternating string. Examples Input 5 AABBA Output 2 Input 4 BABA Output 0","solution":"def min_operations_to_alternate(n, s): Returns the minimum number of operations required to make the string an alternating string. ops1 = ops2 = 0 for i in range(n): expected_char_1 = \'A\' if i % 2 == 0 else \'B\' expected_char_2 = \'B\' if i % 2 == 0 else \'A\' if s[i] != expected_char_1: ops1 += 1 if s[i] != expected_char_2: ops2 += 1 return min(ops1, ops2)"},{"question":"You are given a list of integers. Your task is to determine if you can find a pair of integers (i, j) such that arr[i] + arr[j] equals a given integer k and i < j. Input The first line contains two integers n and k, where n is the number of integers in the list (1 ≤ n ≤ 10^5), and k is the target integer. The second line contains n integers separated by spaces representing the elements of the list. Each integer in the list is in the range from -10^9 to 10^9. Output Print \\"YES\\" (without the quotes) if there exists a pair (i, j) in the list such that arr[i] + arr[j] equals k and i < j. Print \\"NO\\" otherwise. Examples Input 5 9 1 2 3 4 5 Output YES Input 4 8 5 1 2 4 Output NO Input 6 10 2 7 11 15 3 6 Output YES Note In the first sample test, the pair (4, 5) has a sum of 9 which matches k, so the answer is \\"YES\\". In the second sample test, there is no pair with a sum of 8, hence the answer is \\"NO\\". In the third sample test, the pair (3, 7) has a sum of 10 which matches k, so the answer is \\"YES\\".","solution":"def can_find_pair(arr, k): Determines if there\'s a pair of integers in \'arr\' whose sum equals \'k\'. Parameters: arr (list of int): The list of integers. k (int): The target sum. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for number in arr: if k - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"A game is played between two players. The game consists of several rounds. In each round, both players select an integer from a set of positive integers. The score for the round is determined by the difference in the integers chosen by the two players. The player with the higher integer scores the difference as points. If the integers are the same, neither player scores any points. The game ends after a specified number of rounds, and the player with the most points wins. You are given two lists of integers representing the choices made by the two players in each round. Determine the winner of the game or if it\'s a tie. Input The input consists of three lines: - The first line contains a single integer n (1 ≤ n ≤ 100) representing the number of rounds. - The second line contains n space-separated integers representing the choices of the first player in each round. - The third line contains n space-separated integers representing the choices of the second player in each round. Output Output \\"PLAYER 1 WINS\\" if the first player wins, \\"PLAYER 2 WINS\\" if the second player wins, and \\"TIE\\" if the game ends in a tie. Examples Input 3 4 5 8 3 5 7 Output PLAYER 1 WINS Input 2 4 6 5 6 Output TIE","solution":"def determine_winner(n, player1, player2): Determine the winner of the game based on the points scored by two players in each round. Args: n : int : the number of rounds player1 : list of int : the choices made by the first player player2 : list of int : the choices made by the second player Returns: str : the winner of the game (\\"PLAYER 1 WINS\\", \\"PLAYER 2 WINS\\" or \\"TIE\\") score1, score2 = 0, 0 for i in range(n): if player1[i] > player2[i]: score1 += player1[i] - player2[i] elif player2[i] > player1[i]: score2 += player2[i] - player1[i] if score1 > score2: return \\"PLAYER 1 WINS\\" elif score2 > score1: return \\"PLAYER 2 WINS\\" else: return \\"TIE\\""},{"question":"Given an integer array `nums` of size `n`, return the majority element. The majority element is the element that appears more than `⌊n / 2⌋` times. You may assume that the majority element always exists in the array. Write a function: ```python def majority_element(nums: List[int]) -> int: ``` # Input - The first line of input contains the integer `n` (1 ≤ n ≤ 5000) — the size of the array. - The second line contains `n` integers `nums[i]` (−10^9 ≤ nums[i] ≤ 10^9) — the elements of the array. # Output - Return the majority element as a single integer. # Example Input 1: ``` 5 3 3 4 2 3 ``` Output 1: ``` 3 ``` Input 2: ``` 7 2 2 1 1 1 2 2 ``` Output 2: ``` 2 ``` # Note: You can use any efficient algorithm to solve this problem, including but not limited to: - Sorting the array and returning the middle element. - Using a hash map to count the occurrences of each element. - Applying the Boyer-Moore Voting Algorithm.","solution":"from typing import List def majority_element(nums: List[int]) -> int: Function to find the majority element in an array. The majority element is the element that appears more than n/2 times. count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate"},{"question":"Shantam has recently started a new venture and wants to monitor the activity on his company\'s website. The website tracks user sessions, where each session has a start time and end time represented as integer timestamps. Shantam is particularly interested in identifying the peak activity time on the website, defined as the time at which the maximum number of user sessions overlap. Your task is to determine: 1. The timestamp at which the peak activity occurs. 2. The maximum number of overlapping sessions at that timestamp. If there are multiple timestamps where the peak activity occurs, return the smallest timestamp. Input Format: - The first line contains T, the number of test cases. - Each test case starts with an integer N, which denotes the number of sessions. - The next N lines each contain two integers, S and E (1 ≤ S < E ≤ 10^9), representing the start and end timestamps of a session. Output Format: For each test case, output one line containing two space-separated integers: - The timestamp with the peak activity. - The maximum number of overlapping sessions at that timestamp. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 SAMPLE INPUT: 2 3 1 4 2 5 3 6 4 10 20 15 25 17 23 18 22 SAMPLE OUTPUT: 3 3 18 3 Explanation: For the first test case: - At timestamp 1, there is 1 session active. - At timestamp 2, there are 2 sessions active. - At timestamp 3, there are 3 sessions active. - At timestamp 4, there are 2 sessions active. Hence, the peak activity occurs at timestamp 3 with 3 overlapping sessions. For the second test case: - At timestamp 10, there is 1 session active. - At timestamp 15, there are 2 sessions active. - At timestamp 17, there are 3 sessions active. - At timestamp 18, there are 4 sessions active. Hence, the peak activity occurs at timestamp 18 with 3 (max overlapping sessions).","solution":"from collections import defaultdict def peak_activity(t, sessions_list): This function calculates the timestamp at which peak activity occurs and the maximum number of overlapping sessions at that timestamp. It takes in number of sessions and list of sessions with (start, end) times. events = [] # Generate events for all sessions for sessions in sessions_list: for s, e in sessions: events.append((s, 1)) # start of session events.append((e, -1)) # end of session # Sort events: first by time, then by type (-1 before +1 to ensure e is processed before s when equal) events.sort() max_overlap = 0 current_overlap = 0 peak_time = float(\'inf\') # Iterate through events to find peak time and maximum overlap for time, change in events: current_overlap += change if current_overlap > max_overlap: max_overlap = current_overlap peak_time = time elif current_overlap == max_overlap: peak_time = min(peak_time, time) return peak_time, max_overlap def process_input(input_data): input_lines = input_data.strip().split(\'n\') t = int(input_lines[0]) index = 1 results = [] for _ in range(t): n = int(input_lines[index]) sessions = [] for i in range(index + 1, index + 1 + n): s, e = map(int, input_lines[i].split()) sessions.append((s, e)) index += n + 1 results.append(peak_activity(t, [sessions])) return results def main(input_data): results = process_input(input_data) return \\"n\\".join(f\\"{ts} {count}\\" for ts, count in results)"},{"question":"Given n strings in a directory system, each representing a unique file path with components separated by slashes (\\"/\\"). All the paths are distinct and start with a leading slash \\"/\\". The root directory is represented by the first slash. You want to determine the minimum set of directories (including subdirectories) such that each path is covered by exactly one directory from the set. A directory covers a path if the path is a subdirectory (or the directory itself). Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the total number of file paths in the system. Each of the following n lines contains a string representing an absolute path of a file in the directory system. All paths are distinct. Output Print the minimum number of directories required to cover all paths in the input. Then print those directories line by line, each on a new line. If there are multiple solutions, print any of them. Examples Input 3 /a/b/c/d /a/b/c /a/x Output 2 /a/b/c /a/x Input 4 /a/b /a/b/a /a/b/b /a/c Output 2 /a/b /a/c","solution":"def min_directories_to_cover_paths(n, paths): Calculate the minimum number of directories required to cover all paths. Parameters: n (int): The number of file paths. paths (list of str): The list of file paths. Returns: tuple: The number of directories and the list of directories. # Sort paths to facilitate the grouping of directories paths.sort() result = [] for path in paths: if not result or not path.startswith(result[-1] + \'/\'): result.append(path) return len(result), result"},{"question":"You are tasked with designing an online marketplace\'s recommendation system. The primary function of this system is to identify and recommend similar products to a user based on their browsing history. You have access to a list of products, where each product is described by a name and a set of features. Additionally, you have a list of user browsing histories, each representing a sequence of products a user has viewed. Your task is to implement a function that, given a target product, outputs a list of products that share the most features with the target product. The list should be sorted in descending order based on the number of shared features. In case of a tie, the products should be sorted lexicographically by their name. Input 1. A single integer `p` (1 ≤ p ≤ 1000) — the number of products. 2. The next `p` lines each contain a string `name` and an integer `f` (1 ≤ f ≤ 100) followed by `f` space-separated strings representing the features of the product. 3. A single string `target` — the name of the target product. Output - A list of product names sorted in descending order based on the number of shared features with the target product. If two products have the same number of shared features, they should be sorted lexicographically by name. Constraints - Each product name is a non-empty string of at most 50 characters. - Each feature is a non-empty string of at most 50 characters. - All product names are unique. Example Input ``` 5 Laptop 3 lightweight powerful affordable Smartphone 2 portable lightweight Tablet 3 portable affordable screen Headphones 2 sound quality Keyboard 2 mechanical durable Laptop ``` Output ``` Smartphone Tablet Headphones Keyboard ``` In this example, - \\"Laptop\\" has 3 features: lightweight, powerful, affordable. - \\"Smartphone\\" shares 1 feature (lightweight) with \\"Laptop\\". - \\"Tablet\\" shares 1 feature (affordable) with \\"Laptop\\". - \\"Headphones\\" and \\"Keyboard\\" don\'t share any features with \\"Laptop\\". \\"Smartphone\\" and \\"Tablet\\" are sorted lexicographically because they both share 1 feature with \\"Laptop\\".","solution":"def recommend_products(p, product_list, target): Recommends products based on shared features with the target product. # Parse the product list into a dictionary products = {} for product in product_list: parts = product.split() name = parts[0] features = set(parts[2:]) products[name] = features # Get the target product features if target not in products: return [] target_features = products[target] # Calculate shared features for other products recommendations = [] for name, features in products.items(): if name != target: shared = len(features & target_features) recommendations.append((shared, name)) # Sort by shared features (descending) and lexicographically by name recommendations.sort(key=lambda x: (-x[0], x[1])) # Return the sorted list of recommended product names return [name for _, name in recommendations]"},{"question":"Adrian loves mountains and enjoys plotting them on a 2D Cartesian coordinate system. Each mountain can be represented as a series of connected line segments that must form a peak, starting and ending at the same height. Adrian has a specific way to define a mountain: - A peak starts at coordinate (0, 0), ascends to coordinate (h, h), and descends to coordinate (2h, 0). - The points that form the mountain are all integer coordinates on the grid. However, Adrian encounters a problem when studying a sequence of mountains. Each mountain shares its ending point with the starting point of the next mountain in the sequence. Given the heights of the mountains, he needs to determine the path of the entire sequence. Help Adrian by writing a program that will generate the coordinates for a given sequence of mountains. Input The input consists of: - An integer n (1 ≤ n ≤ 500) — the number of mountains in the sequence. - n integers h_i (1 ≤ h_i ≤ 1000) — the heights of the mountains in the sequence. Output Print the sequence of coordinates defining the path of the sequence of mountains. Each coordinate should be in the format (x, y). Example Input 3 1 2 1 Output (0, 0) (1, 1) (2, 0) (3, 1) (5, 3) (6, 2) (7, 3) (9, 1) (10, 0) Explanation For the given input, the first mountain ascends from (0, 0) to (1, 1), then descends to (2, 0). The second mountain starts at (2, 0), ascends to (3, 2) and reaches its peak at (5, 4), then descends to (7, 0). The third mountain continues from (7, 0) to (8, 1) and ends at (10, 0). Note Ensure that: - The path starts at (0, 0) and follows the described pattern for each mountain sequentially. - There are no gaps between mountains; the end of one mountain is the start of the next.","solution":"def generate_mountain_path(n, heights): Generates the sequence of coordinates defining the path of a sequence of mountains. Parameters: n (int): Number of mountains heights (list): List of heights of the mountains Returns: list of tuples: Each tuple is a coordinate (x, y) path = [] current_x = 0 for h in heights: # Ascend to peak for i in range(1, h + 1): path.append((current_x + i, i)) # Update current_x to peak current_x += h # Descend to base for i in range(h, 0, -1): path.append((current_x + (h - i + 1), i - 1)) # Update current_x to the end of current mountain current_x += h return path # Example usage # print(generate_mountain_path(3, [1, 2, 1]))"},{"question":"Alice is working on a project involving a large dataset. She needs to filter and sort the data efficiently. The dataset consists of `n` integers, where each integer can range from 1 to 100. Alice wants to perform `q` queries on this dataset. Each query specifies a range of integers, from `a` to `b`, and Alice must return the `kth` smallest integer in that range within the dataset. Input The first line of input contains two integers `n` and `q` (1 ≤ n, q ≤ 105). The second line contains `n` integers, representing the dataset, each between 1 and 100. Then follow `q` lines, each containing three integers `a`, `b`, and `k` (1 ≤ a ≤ b ≤ 100, 1 ≤ k ≤ b-a+1), representing a query where Bob needs to find the `kth` smallest integer in the dataset between the integers `a` and `b`, inclusive. Output For each query, print one integer, the `kth` smallest integer in the specified range in the dataset. Example Input 10 2 5 3 9 1 6 8 3 7 2 4 3 8 4 1 5 2 Output 5 2 Note In the first query, the sorted subarray of integers between 3 and 8 is [3, 3, 4, 5, 6, 7, 8]. The 4th smallest integer in this range is 5. In the second query, the sorted subarray of integers between 1 and 5 is [1, 2, 3, 3, 4]. The 2nd smallest integer in this range is 2.","solution":"def kth_smallest_in_range(n, q, data, queries): For each query, returns the kth smallest integer in the range [a, b] within the dataset. n : int : The number of integers in the dataset. q : int : The number of queries. data : list of int : The dataset with n integers, each between 1 and 100. queries : list of tuple : List of q queries. Each query is a tuple (a, b, k). return : list of int : The results of the queries. results = [] for a, b, k in queries: filtered_data = [x for x in data if a <= x <= b] filtered_data.sort() results.append(filtered_data[k-1]) return results"},{"question":"You are given a binary string, which is a string consisting only of characters \'0\' and \'1\'. You need to find a balanced substring of this binary string. A balanced substring is a substring that contains an equal number of \'0\'s and \'1\'s. If there are multiple balanced substrings, you need to find the shortest one. If there is still more than one possible answer, return the one that appears first in the original string. Input The input contains a single string s (1 ≤ |s| ≤ 100000), consisting of only \'0\' and \'1\'. Output Print the shortest balanced substring from the given string. If there is no balanced substring, print the single number \\"-1\\" (without the quotes). Examples Input 110 Output 10 Input 1001001 Output 10 Input 1111 Output -1","solution":"def find_balanced_substring(s): Find the shortest balanced substring in the given binary string. A balanced substring has an equal number of \'0\'s and \'1\'s. n = len(s) min_length = float(\'inf\') result = \\"-1\\" for i in range(n): for j in range(i + 1, n + 1): substring = s[i:j] if substring.count(\'0\') == substring.count(\'1\'): if len(substring) < min_length: min_length = len(substring) result = substring break # Since we only need the shortest, break out of inner loop return result"},{"question":"The Youkumo Forest Preserve consists of a series of connected patches of land, each of which is accessible from certain other patches via footpaths. The forest preserve management wants to ensure that there are enough drinking water stations across the preserve such that every patch of land has access to at least one station within a certain number of footpath steps. You are tasked with writing a program to determine the minimum number of drinking water stations needed to ensure that all patches are accessible within a given number of steps `D` from at least one drinking water station. Input The input is given in the following format: ``` N M D u_1 v_1 u_2 v_2 : u_M v_M ``` - The first line provides three integers `N`, `M`, and `D` (1 ≤ N ≤ 1000, 0 ≤ M ≤ 5000, 1 ≤ D ≤ N), where `N` is the number of patches, `M` is the number of footpaths, and `D` is the maximum number of steps that each patch can be from a drinking water station. - The next `M` lines each contain two integers `u_i` and `v_i` (1 ≤ u_i, v_i ≤ N), describing a bidirectional footpath between patches `u_i` and `v_i`. Output Output a single integer representing the minimum number of drinking water stations required. Example Input ``` 6 7 2 1 2 1 3 2 4 2 5 3 5 4 6 5 6 ``` Output ``` 2 ``` Input ``` 5 5 3 1 2 2 3 3 4 4 5 1 5 ``` Output ``` 1 ```","solution":"def min_drinking_water_stations(N, M, D, paths): Returns the minimum number of drinking water stations required such that every patch is accessible within D steps from at least one water station. N : int : number of patches M : int : number of footpaths D : int : maximum number of steps paths : List[Tuple[int, int]] : list of tuples representing the footpaths return : int : minimum number of drinking water stations from collections import defaultdict, deque def bfs(start, graph, D): visited = set() queue = deque([(start, 0)]) visited.add(start) reachable = set() while queue: node, distance = queue.popleft() if distance > D: break reachable.add(node) for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return reachable graph = defaultdict(list) for u, v in paths: graph[u].append(v) graph[v].append(u) all_patches = set(range(1, N+1)) stations = 0 covered = set() while covered != all_patches: uncovered = all_patches - covered patch = uncovered.pop() reachable = bfs(patch, graph, D) covered.update(reachable) stations += 1 return stations"},{"question":"Given a list of integers, write a function that returns the sum of all the even numbers in the list. Constraints * The list contains at least one integer. * Each integer in the list can be positive or negative. * The length of the list is between 1 and 100 (inclusive). Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n - n is an integer representing the number of elements in the list. - a_1, a_2, ..., a_n are the integers in the list. Output Print a single integer representing the sum of all the even numbers in the list. Examples Input 5 1 2 3 4 5 Output 6 Input 3 -2 -4 -6 Output -12 Input 6 1 3 5 7 9 11 Output 0","solution":"def sum_of_even_numbers(int_list): Returns the sum of all even numbers in the given list. return sum(x for x in int_list if x % 2 == 0)"},{"question":"A large IT company has implemented a secure transmission system to send secret messages. However, to further enhance the security, they decide to encode the messages using a special algorithm before transmission. Each message is represented as a string of lowercase alphabetic characters. The encoding algorithm works based on shifting each character in the string by a certain number of positions in the alphabet. For example, if the character is \'a\' and it needs to be shifted by 3 positions, it will become \'d\'. After \'z\', the shifting continues cyclically from \'a\'. Write a function `encode_message` that takes two inputs: the string message and an integer shift value. The function should return the encoded message. **Function Signature:** ```python def encode_message(message: str, shift: int) -> str: ``` # Input: - `message` (1 ≤ len(message) ≤ 100): A string of lowercase alphabetic characters. - `shift` (1 ≤ shift ≤ 25): An integer that represents the number of positions each character in the message needs to be shifted. # Output: - A string: The encoded message after shifting each character. # Example: **Input:** ```python message = \\"hello\\" shift = 3 ``` **Output:** ```python \\"khoor\\" ``` **Explanation:** - \'h\' shifted by 3 positions is \'k\'. - \'e\' shifted by 3 positions is \'h\'. - \'l\' shifted by 3 positions is \'o\'. - \'l\' shifted by 3 positions is \'o\'. - \'o\' shifted by 3 positions is \'r\'. - Therefore, the encoded message is \\"khoor\\". # Constraints: - The shift is always positive and not greater than 25. - The message consists only of lowercase alphabetic characters. # Notes: - Make sure to handle the cyclic nature of the shift, where after \'z\', it wraps back to \'a\'. **Testing the function:** 1. `encode_message(\\"abc\\", 1)` should return `\\"bcd\\"`. 2. `encode_message(\\"xyz\\", 2)` should return `\\"zab\\"`. 3. `encode_message(\\"python\\", 10)` should return `\\"zidryx\\"`.","solution":"def encode_message(message: str, shift: int) -> str: encoded_chars = [] for char in message: # Shift char and handle wrap-around using modulo new_char = chr(((ord(char) - ord(\'a\') + shift) % 26) + ord(\'a\')) encoded_chars.append(new_char) return \'\'.join(encoded_chars)"},{"question":"Create a function that simulates the inventory management system for a small bookstore. The bookstore must keep track of the stock of books. Your function will need to handle multiple queries to add new books, sell books, or check the current stock of a particular book. Input Format The first line contains a single integer `n`, the number of queries. The next `n` lines contain queries in one of the following three formats: 1. \\"ADD book_name x\\" - This query adds `x` copies of `book_name` to the stock. 2. \\"SELL book_name x\\" - This query sells `x` copies of `book_name`. If there are not enough copies of `book_name` in stock, sell as many as possible without going negative. 3. \\"STOCK book_name\\" - This query prints the current stock of `book_name`. If the book is not found, print \\"Not in stock\\". Output Format For each \\"STOCK book_name\\" query, output the number of copies of `book_name` in the stock or \\"Not in stock\\" if the book is not available. There is no output for \\"ADD\\" and \\"SELL\\" queries. Example Input: ``` 8 ADD HarryPotter 5 ADD LordOfTheRings 7 SELL HarryPotter 3 STOCK HarryPotter STOCK LordOfTheRings SELL HarryPotter 5 STOCK HarryPotter STOCK GameOfThrones ``` Example Output: ``` 2 7 0 Not in stock ```","solution":"def bookstore_inventory(queries): inventory = {} results = [] for query in queries: parts = query.split() action = parts[0] book_name = parts[1] if action == \\"ADD\\": quantity = int(parts[2]) if book_name in inventory: inventory[book_name] += quantity else: inventory[book_name] = quantity elif action == \\"SELL\\": quantity = int(parts[2]) if book_name in inventory: inventory[book_name] = max(0, inventory[book_name] - quantity) elif action == \\"STOCK\\": if book_name in inventory: results.append(inventory[book_name]) else: results.append(\\"Not in stock\\") return results"},{"question":"Marina loves hiking and she has a collection of GPS tracks of her adventurous journeys. Each track is represented by an array of positive integers where each integer indicates the altitude at different points along the journey. Marina noticed a peculiar pattern in some of her journeys — these are called \\"unique peak journeys\\". In a unique peak journey, there is exactly one peak point such that the altitude strictly decreases to its left and strictly increases to its right. You are tasked with determining whether a given journey is a unique peak journey. Write a function `is_unique_peak_journey` that takes a list of positive integers representing the altitudes in the journey, and returns `True` if the journey is a unique peak journey, and `False` otherwise. # Input * A single line containing space-separated positive integers representing the altitudes in the journey. The length of the list is between 3 and 100000. # Output * Output `True` if the journey is a unique peak journey, otherwise output `False`. # Examples Example 1 **Input:** ``` 1 4 3 2 ``` **Output:** ``` True ``` Example 2 **Input:** ``` 4 5 6 5 4 3 2 1 ``` **Output:** ``` False ``` Example 3 **Input:** ``` 1 3 5 4 2 ``` **Output:** ``` True ``` # Note In the first example, there is exactly one peak (4) where altitudes decrease to its left (1) and increase to its right (3, 2). In the second example, there are no positions that satisfy the strict decrease on the left and strict increase on the right condition. The third example also satisfies the unique peak journey condition as the peak is 5 with strictly decreasing and increasing sequences on either side.","solution":"def is_unique_peak_journey(altitudes): Determines if the given journey is a unique peak journey. Parameters: altitudes (list of int): List of positive integers representing the altitudes in the journey. Returns: bool: True if the journey is a unique peak journey, otherwise False. if len(altitudes) < 3: return False peak_found = False for i in range(1, len(altitudes) - 1): if altitudes[i - 1] < altitudes[i] > altitudes[i + 1]: if peak_found: return False peak_found = True return peak_found"},{"question":"Write a function that takes in a matrix and returns the matrix in a spirally traversed list. The traversal starts from the top-left corner of the matrix and proceeds in a clockwise spiral pattern. # Input - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 100) representing the number of rows and columns in the matrix respectively. - The next `m` lines each contains `n` space-separated integers representing the elements of the matrix. # Output - A single line containing the elements of the matrix in the order they were traversed, space-separated. # Example Input: 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output: 1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10 Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 1 2 3 6 9 8 7 4 5","solution":"def spiral_traversal(matrix): Takes a matrix as input and returns the elements in a clockwise spiral order. Args: matrix (list of list of int): The matrix to be spirally traversed. Returns: list: A list containing the elements of the matrix in spirally traversed order. if not matrix: return [] m, n = len(matrix), len(matrix[0]) result = [] top, bottom, left, right = 0, m - 1, 0, n - 1 while top <= bottom and left <= right: for i in range(left, right + 1): # traverse from left to right result.append(matrix[top][i]) top += 1 for i in range(top, bottom + 1): # traverse from top to bottom result.append(matrix[i][right]) right -= 1 if top <= bottom: for i in range(right, left - 1, -1): # traverse from right to left result.append(matrix[bottom][i]) bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): # traverse from bottom to top result.append(matrix[i][left]) left += 1 return result"},{"question":"You\'re given an unsorted array of integers, and your task is to sort it in such a way that the odd numbers appear first (in ascending order), followed by the even numbers (also in ascending order). For example, given the input array `[9, 1, 4, 7, 3, 2]`, the sorted array should be `[1, 3, 7, 9, 2, 4]`. # Input - The first line of the input contains an integer n (1 ≤ n ≤ 100), which represents the number of elements in the array. - The second line contains n integers, which denote the elements of the array. Each element is a positive integer less than or equal to 10^9. # Output - Output the sorted array, with odd numbers appearing first in ascending order, followed by even numbers in ascending order. # Examples Example 1: **Input:** ``` 6 9 1 4 7 3 2 ``` **Output:** ``` 1 3 7 9 2 4 ``` Example 2: **Input:** ``` 5 10 21 32 43 54 ``` **Output:** ``` 21 43 10 32 54 ``` Example 3: **Input:** ``` 4 8 6 2 4 ``` **Output:** ``` 2 4 6 8 ``` # Note Ensure you handle edge cases like arrays with only even numbers or only odd numbers appropriately.","solution":"def sort_odd_even(arr): This function sorts an array such that odd numbers come first in ascending order, followed by even numbers in ascending order. odd_numbers = sorted([x for x in arr if x % 2 != 0]) even_numbers = sorted([x for x in arr if x % 2 == 0]) return odd_numbers + even_numbers"},{"question":"Write a function `reorganize_string` that takes a string `s` and attempts to reorganize the string such that no two adjacent characters are the same. If such an arrangement is possible, return a possible result as a string. If not, return an empty string. Function Signature: ```python def reorganize_string(s: str) -> str: ``` Input: - A single string `s` of length `n` (1 ≤ `n` ≤ 10^4) consisting of lowercase English letters. Output: - A string that is a reorganization of `s` where no two adjacent characters are the same, or an empty string if it\'s not possible. Constraints: - The string `s` will have no more than `10,000` characters. - The repositioned string, if any, must be derived by rearranging the characters of `s`. Example: Input: ``` aab ``` Output: ``` aba ``` Input: ``` aaab ``` Output: ``` \\"\\" ``` Explanation: For the first example, the string \\"aab\\" can be rearranged to \\"aba\\" because no two adjacent characters are the same. For the second example, it\'s impossible to rearrange \\"aaab\\" to meet the required condition, so the function returns an empty string.","solution":"import heapq from collections import Counter def reorganize_string(s: str) -> str: Rearranges the string such that no two adjacent characters are the same. If not possible, returns an empty string. # Count the frequency of each character freq = Counter(s) # Create a max heap based on the frequency max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap or prev_count: if prev_count and not max_heap: return \\"\\" count, char = heapq.heappop(max_heap) result.append(char) if prev_count: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 # since count is negative return \'\'.join(result)"},{"question":"Alice has recently taken an interest in coding. One day, she encountered a problem related to strings and decided to solve it. She has a string `s` consisting of lowercase English letters only. Alice wants to remove some characters from `s` to make it a palindrome. A palindrome is a string that reads the same forward and backward. Alice wants to minimize the number of characters to be removed to achieve this. Given the string `s`, find the minimum number of characters that need to be removed to make `s` a palindrome. Input: The first line contains a single integer `t` (1 ≤ t ≤ 1000) — the number of test cases. Each of the next `t` lines contains a single string `s` (1 ≤ |s| ≤ 2000). Output: For each test case, print the minimum number of characters that need to be removed to make the string a palindrome. Examples Input 3 abac a abca Output 1 0 1 Note In the first example, one possible way to make \\"abac\\" a palindrome is to remove the character \'b\', resulting in the string \\"aac\\". In the second example, the string \\"a\\" is already a palindrome, so no characters need to be removed. In the third example, one possible way to make \\"abca\\" a palindrome is to remove the character \'b\' or \'c\', resulting in the strings \\"aca\\" or \\"aba\\" respectively.","solution":"def min_deletions_to_palindrome(s): Returns the minimum number of deletions required to make s a palindrome. n = len(s) # Create a DP table to store results of subproblems dp = [[0] * n for _ in range(n)] # Build the table for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1] def minimum_deletions_to_palindromes(test_cases): results = [] for s in test_cases: results.append(min_deletions_to_palindrome(s)) return results"},{"question":"You are given an array of integers and an integer value `m`. Your task is to repeatedly perform the following operation on the array until no more operations can be applied: 1. From the array, find the smallest element that is a multiple of `m`. If there are multiple such elements, pick the one with the smallest index. 2. Remove this element from the array. You need to compute and display the final state of the array after applying the operation as many times as possible. Input The first line of input contains a single integer `m` (2 ≤ m ≤ 1000). The second line contains an integer `n` (1 ≤ n ≤ 1000) followed by `n` space-separated integers representing the elements of the array (1 ≤ ai ≤ 10^9). Output Print the elements of the final state of the array in the order they appear. If the array becomes empty, print \\"EMPTY\\". Examples Input 3 6 9 15 10 6 12 3 Output 10 Input 2 5 8 4 2 6 10 12 Output EMPTY Input 5 4 5 8 15 10 Output 4 8","solution":"def remove_multiples(arr, m): Repeatedly removes the smallest multiple of m from the array. Returns the final state of the array. while True: smallest_multiple = None smallest_index = None for i, value in enumerate(arr): if value % m == 0: if smallest_multiple is None or value < smallest_multiple: smallest_multiple = value smallest_index = i if smallest_multiple is None: # No more multiples of m found in the array break else: arr.pop(smallest_index) return arr if arr else [\\"EMPTY\\"]"},{"question":"Given a list of integers representing weights, determine if the list can be partitioned into two subsets such that the sum of the elements in both subsets is equal. If the partition exists, return \\"YES\\". Otherwise, return \\"NO\\". Input: An integer stating the number of test cases T and that many lines follow, each containing a list of integers representing weights. Output: One string (\\"YES\\" or \\"NO\\") for each test case, indicating whether the partition is possible. Constraints: 1 <= T <= 1000 1 <= Length of list <= 100 1 <= Weight value <= 1000 Sample Input: 3 2 1 5 7 3 3 3 3 6 1 1 2 3 Sample Output: NO YES NO","solution":"def can_partition(weights): Determine if a list of integers can be partitioned into two subsets with equal sum. total_sum = sum(weights) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True # Base case for weight in weights: for i in range(target, weight - 1, -1): dp[i] = dp[i] or dp[i - weight] return \\"YES\\" if dp[target] else \\"NO\\" def handle_test_cases(test_cases): Handle the test cases. results = [] for weights in test_cases: results.append(can_partition(weights)) return results"},{"question":"# Problem Statement Implement an in-memory key-value store that supports transactions. You are required to implement the following commands: 1. `SET [key] [value]` Sets the specified key to the provided value. 2. `GET [key]` Returns the value of the specified key. If the key does not exist, output `NULL`. 3. `DELETE [key]` Deletes the specified key, returning the value that was deleted or `NULL` if the key did not exist. 4. `BEGIN` Starts a new transaction. 5. `COMMIT` Commits all operations performed in the current transaction. If no transaction is active, output `NO TRANSACTION`. 6. `ROLLBACK` Reverts all operations performed in the current transaction. If no transaction is active, output `NO TRANSACTION`. Multiple transactions can be nested. Committing a transaction should persist all the changes made in all nested transactions that were started after this transaction. Rolling back a transaction should revert all the changes made in all nested transactions that were started after this transaction. # Input The program will receive a series of commands, each in its own line, terminated by the end of file (EOF). # Output For each operation that requires output (`GET`, `DELETE`, `COMMIT`, `ROLLBACK`), output the result in a new line. # Example Input ``` SET a 10 GET a BEGIN SET a 20 GET a ROLLBACK GET a BEGIN SET a 30 COMMIT GET a DELETE a GET a COMMIT ROLLBACK ``` Output ``` 10 20 10 30 NULL NO TRANSACTION NO TRANSACTION ``` # Explanation - `SET a 10`: Set key `a` to 10. - `GET a`: Return value of key `a`, which is 10. - `BEGIN`: Start a transaction. - `SET a 20`: Within the transaction, set key `a` to 20. - `GET a`: Return value of key `a`, which is 20 within the transaction. - `ROLLBACK`: Revert the transaction. Key `a` is back to 10. - `GET a`: Return value of key `a`, which is now 10. - `BEGIN`: Start another transaction. - `SET a 30`: Within the transaction, set key `a` to 30. - `COMMIT`: Commit the transaction. Key `a` is now 30. - `GET a`: Return value of key `a`, which is 30. - `DELETE a`: Delete key `a`. Output is NULL because key `a` is deleted. - `GET a`: Return value of key `a`, which is now NULL. - `COMMIT`: Try to commit but no active transaction exists, output `NO TRANSACTION`. - `ROLLBACK`: Try to rollback but no active transaction exists, output `NO TRANSACTION`.","solution":"class InMemoryKVStore: def __init__(self): self.store = {} self.transactions = [] def set(self, key, value): if self.transactions: self.transactions[-1][key] = value else: self.store[key] = value def get(self, key): for transaction in reversed(self.transactions): if key in transaction: return transaction[key] return self.store.get(key, \\"NULL\\") def delete(self, key): if self.transactions: if key in self.transactions[-1]: return self.transactions[-1].pop(key) return self.transactions[-1].pop(key, \\"NULL\\") return self.store.pop(key, \\"NULL\\") def begin(self): self.transactions.append({}) def commit(self): if not self.transactions: return \\"NO TRANSACTION\\" while self.transactions: transaction = self.transactions.pop(0) self.store.update(transaction) def rollback(self): if not self.transactions: return \\"NO TRANSACTION\\" self.transactions.pop()"},{"question":"You are given a directed graph with nodes numbered 1 through N and M directed edges. Each directed edge has a unique ID from 1 to M, and you are provided the start node and end node for each edge. The task is to find the shortest path from node S to node T using as few edges as possible. If there are multiple shortest paths, output the sequence of edge IDs for the lexicographically smallest sequence. Constraints All values in input are integers. ``` 2 ≤ N ≤ 1000 1 ≤ M ≤ 10000 1 ≤ S, T ≤ N 1 ≤ start_i, end_i ≤ N ``` There may not be any path from node S to node T. Input Input is given from Standard Input in the following format: ``` N M S T start_1 end_1 start_2 end_2 : start_M end_M ``` Output If there is a path from node S to node T, print the sequence of edge IDs for the lexicographically smallest sequence representing the shortest path from node S to node T. If there is no path, print -1. Examples Input ``` 4 5 1 4 1 2 1 3 2 3 2 4 3 4 ``` Output ``` 1 4 ``` Input ``` 3 3 1 3 1 2 2 3 1 3 ``` Output ``` 3 ``` Input ``` 3 2 1 3 1 2 2 1 ``` Output ``` -1 ```","solution":"import heapq def find_shortest_path(N, M, S, T, edges): import collections graph = collections.defaultdict(list) for i, (u, v) in enumerate(edges, 1): graph[u].append((v, i)) # Dijkstra\'s algorithm to find the shortest path using edge count and lexicographically smallest sequence pq = [(0, S, [])] # (edge_count, current_node, path_edge_ids) visited = {} while pq: edge_count, node, path = heapq.heappop(pq) if node == T: return path if node in visited and visited[node] <= edge_count: continue visited[node] = edge_count for neighbor, edge_id in graph[node]: heapq.heappush(pq, (edge_count + 1, neighbor, path + [edge_id])) return -1 def parse_input_and_find_path(input_data): input_lines = input_data.strip().split(\'n\') N, M, S, T = map(int, input_lines[0].split()) edges = [tuple(map(int, line.split())) for line in input_lines[1:M+1]] result = find_shortest_path(N, M, S, T, edges) if result == -1: return \\"-1\\" return \\" \\".join(map(str, result))"},{"question":"The kingdom of Berland consists of a grid of size n x m. Each cell in the grid can either be empty or contain an obstacle. Polycarp is standing in the top-left corner of the grid (cell (1, 1)), and his goal is to reach the bottom-right corner of the grid (cell (n, m)). Polycarp can move to a neighboring cell if it is not blocked by an obstacle. Specifically, from a given cell (i, j), he can move to the cell (i+1, j) or the cell (i, j+1), provided those cells are within the grid and are not blocked by obstacles. Polycarp would like to know the number of distinct paths he can take to get from the top-left corner to the bottom-right corner of the grid, avoiding obstacles. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. - The next n lines each contain m characters. Each character is either \'.\' (representing an empty cell) or \'#\' (representing an obstacle). Output: - Print a single integer — the number of distinct paths from the top-left corner to the bottom-right corner of the grid. Since this number can be large, print it modulo 10^9 + 7. It is guaranteed that the top-left corner and the bottom-right corner are empty cells. Example: Input: 3 3 ... .#. ... Output: 2 Note: In the example above, there are two distinct paths from the top-left corner to the bottom-right corner: 1. (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) 2. (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) Note that while (1, 1) and (3, 3) are guaranteed to be empty cells, some of the intermediate cells might contain obstacles, and Polycarp must find a way around them.","solution":"def number_of_paths(n, m, grid): MOD = 10**9 + 7 if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1]"},{"question":"You are given a list of positive integers. Your task is to find the next greater element for each element in the list. The next greater element for an element x is the first greater element on the right side of x in the list. If no such element exists, output -1 for that element. Input: The first line contains an integer n (1 ≤ n ≤ 10000) — the length of the list. The second line contains n positive integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub> (1 ≤ a<sub>i</sub> ≤ 1000000) — the elements of the list. Output: Output n integers, where the i-th integer is the next greater element for a<sub>i</sub> in the list. If no such element exists, output -1. Examples: Input: 4 4 5 2 25 Output: 5 25 25 -1 Input: 5 13 7 6 12 10 Output: -1 12 12 -1 -1","solution":"def next_greater_element(lst): Returns a list where each element is the next greater element of the corresponding input element. If no such element exists for an input element, the output is -1 for that element. n = len(lst) result = [-1] * n stack = [] for i in range(n): while stack and lst[stack[-1]] < lst[i]: index = stack.pop() result[index] = lst[i] stack.append(i) return result"},{"question":"Tamia is participating in a coding competition and one of the challenges she\'s facing involves an operable list of integers. For each query, she needs to efficiently handle two types of operations: updating an element in the list and calculating the sum of a sub-array. Given an initial list of integers and a series of queries, help Tamia by writing a program that can efficiently execute the operations. Input: - The first line of the input contains an integer `N`, denoting the number of elements in the list. - The second line contains `N` space-separated integers, representing the elements of the list. - The third line contains an integer `Q`, denoting the number of queries. - The following `Q` lines each describe a query. A query can be of two types: - `1 x y`: Update the element at index `x` (0-based index) to `y`. - `2 l r`: Calculate the sum of elements from index `l` to index `r` (inclusive, 0-based index). Output: For each query of the second type (`2 l r`), output the sum of the elements in the specified sub-array. Constraints: - `1 <= N <= 10^5` - `1 <= Q <= 10^5` - `-10^9 <= list[i], y <= 10^9` - `0 <= x < N` - `0 <= l <= r < N` Example: # Input: ``` 5 1 2 3 4 5 3 2 1 3 1 2 10 2 1 3 ``` # Output: ``` 9 16 ``` Explanation: - For the first query `2 1 3`, the sum of elements from index 1 to 3 (`2 + 3 + 4`) is `9`. - For the second query `1 2 10`, the element at index 2 is updated to `10`, making the list `1 2 10 4 5`. - For the third query `2 1 3`, the sum of elements from index 1 to 3 (`2 + 10 + 4`) is `16`.","solution":"class OperableList: def __init__(self, nums): self.nums = nums self.n = len(nums) def update(self, x, y): self.nums[x] = y def sum_subarray(self, l, r): return sum(self.nums[l:r+1]) def process_queries(n, initial_list, queries): ol = OperableList(initial_list) results = [] for query in queries: if query[0] == 1: # update operation ol.update(query[1], query[2]) elif query[0] == 2: # sum subarray operation results.append(ol.sum_subarray(query[1], query[2])) return results"},{"question":"You are given a sequence of integers `A` and a positive integer `d`. Create a new sequence `B` such that: - `B` is a permutation of `A` - For any consecutive integers `B_i` and `B_i+1` in the sequence `B`, their absolute difference is divisible by `d`. Your task is to determine if such a sequence `B` exists, and if it does, print it. If there are multiple solutions, print any. If no valid sequence exists, print `-1`. Input The first line contains a positive integer `n` (1 ≤ n ≤ 10^5), the number of elements in the sequence `A`. The second line contains `n` integers, representing the elements of sequence `A` (1 ≤ A_i ≤ 10^9). The third line contains a single positive integer `d` (1 ≤ d ≤ 10^9). Output Print a single line containing the sequence `B` or `-1` if no valid sequence exists. Examples Input 4 5 1 3 7 2 Output 1 3 5 7 Input 3 4 8 2 3 Output -1 Input 5 10 15 20 25 30 5 Output 10 15 20 25 30 Note In the first example, the sequence `1 3 5 7` is valid because the absolute difference between any two consecutive elements is 2, which is divisible by `d = 2`. In the second example, no valid sequence exists because the differences between the elements cannot be made divisible by `d = 3`. In the third example, the given sequence is already valid as the absolute difference between any two consecutive elements is 5, which is divisible by `d = 5`.","solution":"def find_permuted_sequence(A, d): Returns a permutation of A such that the absolute difference between any two consecutive elements is divisible by d. If no such permutation exists, returns -1. A.sort() for i in range(1, len(A)): if abs(A[i] - A[i-1]) % d != 0: return -1 return A"},{"question":"Rahul is an avid coder and loves working with arrays. One day, he came across a peculiar problem and decided to solve it. He has an array of integers and a range of indices. Rahul wants to find the maximum value within the specified range of indices for multiple queries. He asks for your help to write an efficient program that can handle this task. Input: The first line contains two integers N and Q, where N is the size of the array and Q is the number of queries. The second line contains N integers representing the elements of the array. Each of the next Q lines contains two integers L and R, representing the range [L, R] (inclusive) for which the maximum value needs to be found. Output: For each query, output the maximum value within the specified range. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ array[i] ≤ 10^5 1 ≤ L ≤ R ≤ N SAMPLE INPUT 5 3 1 3 5 7 9 1 3 2 4 3 5 SAMPLE OUTPUT 5 7 9","solution":"def find_max_in_ranges(arr, queries): Returns maximum values for specified ranges in array for multiple queries. result = [] for l, r in queries: # Sliding the window to [L, R] (0-based index adjustment) result.append(max(arr[l-1:r])) return result"},{"question":"Anna is designing a password verifier for her company\'s new software platform. The password rules are very specific, and she needs a function that can determine if a given password complies with all the following conditions: 1. The password must be at least 8 characters long. 2. The password must contain at least one uppercase letter. 3. The password must contain at least one lowercase letter. 4. The password must contain at least one digit. 5. The password must contain at least one special character from the set: !@#%^&*()-_+= Anna wants you to write a function `is_valid_password(password)`, which takes a string `password` as input and returns `True` if the password meets all the criteria, and `False` otherwise. Input - `password`: a string representing the password to be verified. The length of the string is between 1 and 100 characters. Output - A boolean value indicating whether the password meets all criteria (`True`) or not (`False`). Examples ``` is_valid_password(\\"Anna2021!\\") -> True is_valid_password(\\"Anna2021\\") -> False is_valid_password(\\"anna2021!\\") -> False is_valid_password(\\"ANNA2021!\\") -> False is_valid_password(\\"Anna!\\") -> False is_valid_password(\\"A1a!b2B*\\") -> True ``` Note In the first example, the password \\"Anna2021!\\" meets all the criteria: it is at least 8 characters long, contains uppercase and lowercase letters, digits, and a special character. In the second example, the password \\"Anna2021\\" is missing a special character from the specified set. In the third example, the password \\"anna2021!\\" is missing an uppercase letter. In the fourth example, the password \\"ANNA2021!\\" is missing a lowercase letter. In the fifth example, the password \\"Anna!\\" is not at least 8 characters long. In the sixth example, the password \\"A1a!b2B*\\" meets all the criteria.","solution":"def is_valid_password(password): Returns True if the password meets all criteria, False otherwise. if len(password) < 8: return False has_upper = any(char.isupper() for char in password) has_lower = any(char.islower() for char in password) has_digit = any(char.isdigit() for char in password) has_special = any(char in \\"!@#%^&*()-_+=\\" for char in password) return has_upper and has_lower and has_digit and has_special"},{"question":"**Problem Statement:** Alex has a large bag of N chocolates, each with an integer value representing its sweetness. He loves to eat chocolates in a manner specific to his sweet tooth. He picks chocolates from the bag in pairs such that the sum of their sweetness is an even number. Alex keeps picking and eating pairs of chocolates until no more valid pairs can be formed. Given N chocolates, you need to determine the maximum number of chocolates Alex can eat. **Input:** - The first line contains a single integer N (1 ≤ N ≤ 2·10^5) – the number of chocolates. - The second line contains N space-separated integers a1, a2, ..., aN (1 ≤ ai ≤ 10^5) – the sweetness values of the chocolates. **Output:** - Output a single integer – the maximum number of chocolates Alex can eat. **Examples:** **Input:** ``` 6 1 3 5 2 4 6 ``` **Output:** ``` 4 ``` **Explanation:** Alex can make the following pairs: (1, 3), (5, 7), (2, 4), (4, 6). The remaining unpaired chocolate(s): {6}. **Input:** ``` 5 2 4 6 8 10 ``` **Output:** ``` 4 ``` **Explanation:** Alex can make the following pairs: (2, 4), (6, 8), (8, 10), (4, 6). The remaining unpaired chocolate(s): {10}. **Note:** Alex prioritizes making pairs and eating chocolates until no more valid pairs can be made. He does not consider the sweetness of the chocolates if they cannot form a valid even-sum pair.","solution":"def max_chocolates_eaten(N, sweetness_values): This function calculates the maximum number of chocolates Alex can eat given the rules. odd_count = 0 even_count = 0 for sweetness in sweetness_values: if sweetness % 2 == 0: even_count += 1 else: odd_count += 1 # Each pair of even chocolates can be eaten, and each pair of odd chocolates can be eaten # Therefore, Alex can eat chocolates in pairs (2 chocolates per pair) from both odd and even counts chocolates_eaten = (even_count // 2) * 2 + (odd_count // 2) * 2 return chocolates_eaten"},{"question":"Polycarp loves to play with numbers, and he recently came up with an interesting problem involving permutations. Given an integer n, he generates a permutation p of the first n natural numbers such that the sum of the absolute differences between the adjacent elements of p is maximized. Formally, for a permutation p = [p1, p2, ..., pn] of {1, 2, ..., n}, we want to maximize the value of: |p1 - p2| + |p2 - p3| + ... + |pn-1 - pn| Your task is to help Polycarp find such a permutation. Input The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. The following t lines each contain a single integer n (1 ≤ n ≤ 10^5) representing the size of the permutation. Output For each test case, output the permutation of n which maximizes the absolute differences sum. Example Input 5 1 2 3 4 5 Output 1 1 2 1 3 2 1 4 2 3 1 5 2 4 3 Explanation In the example, for t=5, the permutations are designed to maximize the sum of absolute differences between consecutive elements. For instance: - For n=4, the sum for permutation [1, 4, 2, 3] is |1-4| + |4-2| + |2-3| = 3 + 2 + 1 = 6. - For n=5, the sum for permutation [1, 5, 2, 4, 3] is |1-5| + |5-2| + |2-4| + |4-3| = 4 + 3 + 2 + 1 = 10.","solution":"def maximize_permutation(n): Generates a permutation of the first n natural numbers such that the sum of the absolute differences between the adjacent elements is maximized. if n == 1: return [1] permutation = [1] for i in range(n-1): if i % 2 == 0: permutation.append(n - (i//2)) else: permutation.append((i//2) + 2) return permutation def solve(t, test_cases): results = [] for n in test_cases: results.append(maximize_permutation(n)) return results"},{"question":"# Problem Statement Jiro has a rectangular grid of size H x W, where each cell of the grid contains a letter. He can perform the following operation any number of times: - Select two adjacent cells (either vertically or horizontally) and swap their letters. He would like to form a palindrome from the letters in the grid by performing at most (10^5) operations. A palindromic grid is a grid where each row, read from left to right, forms a palindrome, and each column, read from top to bottom, also forms a palindrome. Write a program to determine if it is possible to rearrange the grid into a palindromic grid within the given constraint of at most (10^5) swaps, and if possible, provide one such sequence of swaps. # Constraints - (2 leq H, W leq 50) - Each cell of the grid contains a lowercase English letter (\'a\' to \'z\'). # Input Format The input is given from the standard input in the following format: ``` H W r1 r2 ... rH ``` Where each `ri` is a string of length W representing a row of the grid. # Output Format If it is not possible to rearrange the grid into a palindromic grid, print a single line containing \\"NO\\". Otherwise, print \\"YES\\" followed by an integer (m) (the number of swaps), and then (m) lines describing the swaps in the following format: ``` YES m i1 j1 x1 y1 i2 j2 x2 y2 ... im jm xm ym ``` In each line ((ik, jk, xk, yk)), the cells ((ik, jk)) and ((xk, yk)) are swapped. Indices are 1-based. # Example Input ``` 3 3 aba aba aba ``` Output ``` YES 0 ``` Input ``` 3 4 abcc bccb abcc ``` Output ``` YES 2 1 2 3 4 1 3 3 2 ``` # Notes - If there are multiple valid solutions, any one of them is acceptable. - The solution will be accepted if the number of swaps (m) is at most (10^5) and the final grid is palindromic.","solution":"def is_palindromic_grid_possible(grid, H, W): Determines if it\'s possible to rearrange the grid into a palindromic grid. :param grid: 2D list of characters representing the grid. :param H: height of the grid. :param W: width of the grid. :return: tuple (bool, list_of_swaps). If possible, return (True, swaps_list). Otherwise, (False, []). def can_form_palindrome(char_count): Check if the characters counts can form a palindrome. odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if H % 2 == 0 and W % 2 == 0: return odd_count == 0 elif H % 2 == 1 and W % 2 == 1: return odd_count == 1 else: return odd_count <= max(H, W) # Create a counter for all the characters in the grid from collections import Counter char_count = Counter(char for row in grid for char in row) if not can_form_palindrome(char_count): return False, [] # Method to form the palindromic grid swaps = [] target_grid = [[\'\'] * W for _ in range(H)] def place_in_grid(char, r, c): if r >= H or c >= W: return target_grid[r][c] = char if r + r2 < H: target_grid[H - 1 - r][c] = char if c + c2 < W: target_grid[r][W - 1 - c] = char if r + r2 < H and c + c2 < W: target_grid[H - 1 - r][W - 1 - c] = char # Preparing the target palindromic grid for r2 in range((H + 1) // 2): for c2 in range((W + 1) // 2): char = None places_needed = 4 # corners for k, v in char_count.items(): if v >= places_needed or r2 == H // 2 or c2 == W // 2: char = k break if char is None: return False, [] char_count[char] -= places_needed place_in_grid(char, r2, c2) return True, swaps def palindromic_grid(H, W, grid): possible, swaps = is_palindromic_grid_possible(grid, H, W) if not possible: return [\'NO\'] result = [\'YES\', str(len(swaps))] for swap in swaps: result.append(\' \'.join(map(str, swap))) return result def read_input(): import sys input = sys.stdin.read data = input().split() H, W = int(data[0]), int(data[1]) grid = [list(data[i + 2]) for i in range(H)] return H, W, grid def main(): H, W, grid = read_input() result = palindromic_grid(H, W, grid) for line in result: print(line) if __name__ == \\"__main__\\": main()"},{"question":"A recycling company requires its sorting machine to efficiently process incoming scrap metal pieces based on their material composition. The machine can sort pieces into three categories: aluminum, copper, and steel. The company wants to maximize the efficiency of the sorting process by generating output that equally distributes pieces among the three categories whenever possible. Your task is to write a program that determines the maximum number of sets of three pieces (one of each material) that can be formed from the input data for each processing day. input The input consists of one dataset. Input data is given in the following format. D a1 c1 s1 a2 c2 s2 :: aD cD sD Where D (0 ≤ D ≤ 100) on the first line indicates the number of days for which the sorting efficiency needs to be calculated. For each subsequent line, ai (0 ≤ ai ≤ 1000) represents the number of aluminum pieces, ci (0 ≤ ci ≤ 1000) represents the number of copper pieces, and si (0 ≤ si ≤ 1000) represents the number of steel pieces available on day i. output Output the maximum number of sets of three pieces that can be formed on one line for each day. Example Input 3 4 6 8 3 3 3 10 1 5 Output 4 3 1","solution":"def max_sets_of_three(distributions): Given a list of tuples where each tuple represents the number of aluminum, copper, and steel pieces on a particular day, this function returns a list of integers where each integer is the maximum number of sets of three pieces (one of each material) that can be formed for the corresponding day. result = [] for aluminum, copper, steel in distributions: result.append(min(aluminum, copper, steel)) return result def process_input(data): Processes the input data to extract the number of days and the distributions of materials for each day. lines = data.strip().split(\'n\') D = int(lines[0]) distributions = [] for i in range(1, D + 1): a, c, s = map(int, lines[i].split()) distributions.append((a, c, s)) return distributions"},{"question":"A company regularly needs to restock items in its warehouse. They receive a daily delivery with a varying number of items. The warehouse manager wants to rearrange the items into boxes. Each box can contain a fixed number of items, and each box must be completely filled with no items left outside. The manager can choose any number of boxes to use, but he should use the fewest total number of boxes possible. If some items are not enough to fill even one box completely, those items will be discarded. Help the manager determine the minimum number of boxes required to pack the daily delivery. Input format: The only line of the input contains two space-separated integers T and B, where T represents the total number of items delivered, and B represents the number of items each box can contain. Output format: Output the single integer -- the minimum number of boxes needed. Constraints: 1 ≤ T, B ≤ 10^5 SAMPLE INPUT 57 10 SAMPLE OUTPUT 6","solution":"def min_boxes(T, B): Determines the minimum number of boxes required to pack the given number of items. Parameters: T (int): Total number of items delivered. B (int): Number of items each box can contain. Returns: int: Minimum number of boxes needed. if T % B == 0: return T // B else: return T // B + 1"},{"question":"Vincent enjoys solving classic puzzles and has recently come across the problem of filling a grid with numbers while adhering to specific rules. Given an n x n grid, he needs to fill the grid such that each cell contains a number and all consecutive numbers (from 1 to n*n) are placed such that each number (except the last one) is adjacent to the following one either horizontally or vertically. More formally, given a grid with cells indexed from (1,1) to (n,n), you need to fill the grid with integers from 1 to n*n in such a way that any two consecutive numbers (i and i+1) are located either in the same row or same column directly next to each other. Help Vincent solve this puzzle by outputting one valid configuration for any given n. Input The input contains a single integer n (1 ≤ n ≤ 10), which represents the dimension of the square grid. Output Print the filled n x n grid, where each cell contains the numbers from 1 to n*n and all consecutive numbers are placed adjacently (horizontally or vertically). Examples Input 3 Output 1 2 3 8 9 4 7 6 5 Input 4 Output 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 Note In the first example, the numbers are filled such that 1 is adjacent to 2, 2 is adjacent to 3, 3 is adjacent to 4, and so on, maintaining the required rule. In the second example, the numbers are filled similarly, following the required adjacency rule. Each valid output configuration may not be unique and different valid solutions are acceptable as long as they respect the rules.","solution":"def generate_grid(n): Generates a n x n grid containing numbers from 1 to n*n such that consecutive numbers are adjacent either horizontally or vertically. grid = [[0] * n for _ in range(n)] num = 1 for layer in range((n + 1) // 2): # Fill top row from left to right for i in range(layer, n - layer): grid[layer][i] = num num += 1 # Fill right column from top to bottom for i in range(layer + 1, n - layer): grid[i][n - layer - 1] = num num += 1 # Fill bottom row from right to left if not same as top row if layer != n - layer - 1: for i in range(n - layer - 2, layer - 1, -1): grid[n - layer - 1][i] = num num += 1 # Fill left column from bottom to top if not same as right column if layer != n - layer - 1: for i in range(n - layer - 2, layer, -1): grid[i][layer] = num num += 1 return grid # Helper function to print the grid def print_grid(grid): for row in grid: print(\\" \\".join(map(str, row)))"},{"question":"ZS the Coder is practicing on a different kind of computer where words typed are not subject to a time-based disappearing rule, but rather they might contribute to a sub-sequence that is in non-decreasing order. More formally, if he types a word at second a with length la and then types a word at second b with length lb, then lb should be greater than or equal to la to have lb as part of the subsequence. Given the times when ZS the Coder typed the words and their respective lengths, determine the length of the longest subsequence of typed words such that the lengths of words in this sequence are non-decreasing. Input The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of words ZS the Coder typed. The next n lines contain two integers each, ti and li (1 ≤ ti ≤ 109, 1 ≤ li ≤ 109) — the second ti when the i-th word was typed and its length li. Output Print a single positive integer, the number of words in the longest non-decreasing subsequence of typed words based on their lengths. Example Input 6 1 5 3 3 8 4 14 6 19 8 20 7 Output 4 Note For the given example, the longest non-decreasing subsequence based on word lengths is: 5, 6, 8, 7 is not a valid subsequence. However, 3, 4, 6, 8 is valid and its length is 4.","solution":"def longest_non_decreasing_subsequence(words): Finds the length of the longest non-decreasing subsequence based on word lengths. :param words: List of tuples where each tuple contains two integers (t, l) :return: Length of the longest non-decreasing subsequence of words based on their lengths lengths = [l for t, l in words] n = len(lengths) if n == 0: return 0 # List to store the length of the longest increasing subsequence ending at each index dp = [1] * n for i in range(1, n): for j in range(0, i): if lengths[j] <= lengths[i]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Find K-Complementary Pairs in an Array Problem: You are analyzing a sequence of integers and need to find pairs of integers (a, b) in the sequence such that their sum equals a given integer K. This concept is known as K-complementary pairs in an array. The task is to write a program that takes the integer sequence and the target integer K as input and outputs the number of such pairs. Input format: - The first row contains an integer N, which represents the length of the sequence. - The second row contains N integers representing each element of the sequence, separated by spaces. - The third row contains the integer K, the target sum. Output format: - Output the number of K-complementary pairs for the given sequence. Constraints: - 1 ≤ N ≤ 100,000 - -10^9 ≤ Sequence elements, K ≤ 10^9 Example input 1: 5 1 5 7 -1 5 6 Example output 1: 3 Explanation: The pairs are (1, 5), (7, -1), and (1, 5), therefore the number of pairs is 3. Example input 2: 4 2 4 3 3 6 Example output 2: 2 Explanation: The pairs are (2, 4) and (3, 3), hence the number of pairs is 2. Implement the function to find the number of K-complementary pairs in the array.","solution":"def count_k_complementary_pairs(arr, k): Returns the number of K-complementary pairs (a, b) in the array arr, such that a + b = k. count = 0 value_count = {} for number in arr: complement = k - number if complement in value_count: count += value_count[complement] if number in value_count: value_count[number] += 1 else: value_count[number] = 1 return count def process_input(N, sequence, K): return count_k_complementary_pairs(sequence, K)"},{"question":"Fedor likes to play computer games in his free time. He is currently enjoying a game that involves collecting treasures distributed across multiple islands. Each island is represented as a point in a 2D plane. Additionally, there are pathways between some islands, and each pathway has a certain danger level associated with it. Fedor wants to travel from the starting island to the destination island while minimizing the maximum danger level he has to face on any pathway during his journey. You are given the coordinates of the islands, the indices of the connected islands, and the danger levels of the pathways. Your task is to determine the minimum possible value for the maximum danger level Fedor has to face to reach his destination island starting from the given starting island. Input The first line contains three integers n, m, and d (1 ≤ n ≤ 10^3, 1 ≤ m ≤ 10^4, 1 ≤ d ≤ 10^3) — the number of islands, the number of pathways, and the destination island\'s index respectively (1-indexed). Each of the next n lines contains two integers xi and yi (0 ≤ xi, yi ≤ 10^9) — the coordinates of the i-th island. Note that the starting island is always the island with index 1. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^3) — the indices of two islands and the danger level of the pathway between them. Output Print a single integer — the minimum possible value of the maximum danger level Fedor has to face during his travel from the starting island to the destination island. If it is not possible to reach the destination island, print -1. Examples Input 4 4 4 0 0 2 1 3 4 6 5 1 2 3 2 3 2 3 4 4 1 3 6 Output 4 Input 3 2 3 1 2 4 6 7 8 1 2 5 2 3 10 Output 10 Input 3 1 3 0 1 2 5 4 8 1 2 7 Output -1 Note In the first example, Fedor can start at island 1, travel to island 3 with pathways that have a maximum danger level of 4, and finally reach island 4. In the second example, Fedor has no choice but to use the pathway with a danger level of 10 to reach the destination island. In the third example, it is not possible to reach the destination island, and hence the output is -1.","solution":"import heapq from collections import defaultdict def minimum_maximum_danger(n, m, d, coordinates, paths): # Building the graph adjacency list graph = defaultdict(list) for u, v, w in paths: graph[u - 1].append((w, v - 1)) graph[v - 1].append((w, u - 1)) # Using a priority queue for modified Dijkstra\'s algorithm heap = [(0, 0)] # (maximum danger level, current island) max_danger = [float(\'inf\')] * n max_danger[0] = 0 while heap: current_max_danger, u = heapq.heappop(heap) if u == d - 1: return current_max_danger for w, v in graph[u]: new_max_danger = max(current_max_danger, w) if new_max_danger < max_danger[v]: max_danger[v] = new_max_danger heapq.heappush(heap, (new_max_danger, v)) return -1 if max_danger[d - 1] == float(\'inf\') else max_danger[d - 1]"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB We have a list of words, and you need to find the longest word that can be formed by deleting some characters of a given string while keeping the relative order of the characters intact. Function Signature: ```python def find_longest_word(s: str, d: List[str]) -> str: ``` **Input:** - `s`: A string consisting of lowercase letters (1 ≤ len(s) ≤ 1000). - `d`: A list of strings consisting of lowercase letters (1 ≤ len(d) ≤ 100, 1 ≤ len(word) ≤ 100 for each word in the list). **Output:** - Return the longest word in the dictionary that can be formed by deleting some characters of the given string `s`. If there are multiple possible results, return the one which is lexicographically smallest. **Example:** Input: ```python s = \\"abpcplea\\" d = [\\"ale\\", \\"apple\\", \\"monkey\\", \\"plea\\"] ``` Output: ``` \\"apple\\" ``` Input: ```python s = \\"bab\\" d = [\\"ba\\", \\"ab\\", \\"a\\", \\"b\\"] ``` Output: ``` \\"ab\\" ``` **Note:** - The function needs to check if each word in `d` can be formed by deleting some characters from `s` and return the longest one among those. If multiple words have the same length, return the lexicographically smallest one.","solution":"from typing import List def find_longest_word(s: str, d: List[str]) -> str: def is_subsequence(x, y): it = iter(y) return all(c in it for c in x) d.sort(key=lambda x: (-len(x), x)) for word in d: if is_subsequence(word, s): return word return \\"\\""},{"question":"Given an array of integers, decide if it is a wave array. An array \'a\' is called a wave array if it contains an equal number of even and odd numbers, and every adjacent pair (a[i], a[i+1]) contains one even number and one odd number. If it is a wave array, return 1. Otherwise, return 0. A pair (a[i], a[i+1]) where a[i] is even and a[i+1] is odd is considered valid, and vice-versa. For example, [2, 3, 4, 5] is a wave array, while [2, 4, 5, 3] is not. The function signature is: ```python def is_wave_array(arr: List[int]) -> int: pass ``` Input The first line contains a single integer T (1 ≤ T ≤ 100) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the array \'a\'. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10000) — the array elements. Output For each test case, print a single integer — 1 if the given array is a wave array, otherwise 0. Example Input ``` 3 4 2 3 4 5 5 2 3 3 6 5 3 1 2 3 ``` Output ``` 1 0 0 ``` Explanation In the first test case, [2, 3, 4, 5] has equal numbers of even and odd numbers, and between each pair of adjacent elements, one is even and the other is odd. Hence it is a wave array. In the second test case, [2, 3, 3, 6, 5] has more odd numbers than even numbers, hence it is not a wave array. In the third test case, [1, 2, 3] does not alternate between even and odd pairs across the entire array, hence it is not a wave array.","solution":"from typing import List def is_wave_array(arr: List[int]) -> int: n = len(arr) # Check if the number of evens and odds are equal evens = sum(1 for x in arr if x % 2 == 0) odds = n - evens if evens != odds: return 0 # Check if every adjacent pair (a[i], a[i+1]) contains one even and one odd number for i in range(n - 1): if (arr[i] % 2 == 0 and arr[i+1] % 2 == 0) or (arr[i] % 2 != 0 and arr[i+1] % 2 != 0): return 0 return 1"},{"question":"A group of friends are planning a road trip and they need to calculate the fuel consumption for their journey. They have a map represented as a weighted, undirected graph where nodes represent cities and edges represent the roads between them, with weights corresponding to the fuel cost to travel that road. They want to determine the minimum fuel consumption required to travel between two specified cities for several queries. Given a graph with n nodes and m edges and q queries, each query asking for the minimum fuel cost to travel between two cities, help the friends by answering the queries. Input The first line contains three integers n, m, and q (1 ≤ n, m, q ≤ 100,000) — the number of cities (nodes), the number of roads (edges), and the number of queries. Each of the next m lines contains three integers ui, vi, and ci (1 ≤ ui, vi ≤ n, 1 ≤ ci ≤ 1,000), representing a road between cities ui and vi with fuel cost ci. Each of the next q lines contains two integers si and ti (1 ≤ si, ti ≤ n) — representing a query for the minimum fuel cost to travel between cities si and ti. Output For each query, output the minimum fuel cost as a single integer. If there is no path between the given cities, output -1. Examples Input 5 6 3 1 2 10 1 3 20 2 4 15 3 4 5 4 5 10 3 5 25 1 5 2 3 5 1 Output 35 20 35 Note In the above example, the first query asks for the minimum fuel cost to travel from city 1 to city 5. The optimal path is 1 -> 2 -> 4 -> 5 costing 10 + 15 + 10 = 35. The second query asks for the minimum fuel cost to travel from city 2 to city 3. The optimal path is 2 -> 4 -> 3 costing 15 + 5 = 20. The third query asks for the minimum fuel cost to travel from city 5 to city 1, which is the reverse of the path in the first query, still costing 35.","solution":"import heapq def dijkstra(n, graph, start): dist = [float(\'inf\')] * (n + 1) dist[start] = 0 pq = [(0, start)] while pq: current_dist, node = heapq.heappop(pq) if current_dist > dist[node]: continue for neighbor, weight in graph[node]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return dist def min_fuel_consumption(n, edges, queries): graph = [[] for _ in range(n + 1)] for u, v, c in edges: graph[u].append((v, c)) graph[v].append((u, c)) answers = [] for si, ti in queries: dist = dijkstra(n, graph, si) answers.append(dist[ti] if dist[ti] != float(\'inf\') else -1) return answers"},{"question":"Given an integer array `nums` and an integer `target`, find two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. Return the indices of the two numbers in ascending order. Input: - The first line contains an integer `n`, the number of elements in the array (`2 <= n <= 1000`). - The second line contains `n` integers (`nums[0], nums[1], ..., nums[n-1]`, where `-1000 <= nums[i] <= 1000`). - The third line contains the integer `target` (`-2000 <= target <= 2000`). Output: - Print the indices of the two numbers in ascending order, separated by a space. Examples: Input: 5 2 7 11 15 8 9 Output: 0 1 Input: 3 3 2 4 6 Output: 1 2","solution":"def two_sum(nums, target): Finds indices of two numbers in the list `nums` that add up to `target`. Returns the indices in ascending order. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: index1 = num_to_index[complement] index2 = i return (min(index1, index2), max(index1, index2)) num_to_index[num] = i"},{"question":"Alice loves working with strings and number sequences. She is excited about a new problem involving modifying sequences based on string patterns. Alice is given two strings S and T consisting of lowercase English letters, and a sequence of integers A of length n. Alice\'s goal is to create a new sequence B of the same length as A following these steps: 1. For each character in string S, if it matches the corresponding character in T, multiply the corresponding integer in A by 2. 2. If it does not match, subtract 1 from the integer in A. 3. Then, calculate the sum of the resulting sequence B. Write a program to help Alice achieve this. Input The first line contains an integer n (1 ≤ n ≤ 100,000) representing the length of the sequence A. The second line contains the string S of length n. The third line contains the string T of length n. The fourth line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100,000), separated by spaces, representing the sequence A. Output Print a single integer — the sum of sequence B after the modifications. Examples Input 4 abcd abcf 1 2 3 4 Output 16 Input 3 xyz xyz 10 20 30 Output 120 Input 5 abcde fghij 5 5 5 5 5 Output 0 Note In the first example, the sequences are modified as follows: - Compare \'a\' with \'a\': They match, so 1 is doubled to 2. - Compare \'b\' with \'b\': They match, so 2 is doubled to 4. - Compare \'c\' with \'c\': They match, so 3 is doubled to 6. - Compare \'d\' with \'f\': They do not match, so 4 becomes 3. The new sequence B is [2, 4, 6, 3] and the sum is 15. In the second example, all characters match, so each number in sequence A is doubled. The new sequence B is [20, 40, 60] and the sum is 120. In the third example, none of the characters match, so each number in sequence A is decreased by 1. The new sequence B is [4, 4, 4, 4, 4] and the sum is 20.","solution":"def calculate_modified_sequence_sum(n, S, T, A): This function calculates the sum of the modified sequence B based on the matching characters of strings S and T. Parameters: n (int): Length of the sequences S (str): The first string of length n T (str): The second string of length n A (list of int): The sequence of integers of length n Returns: int: The sum of the modified sequence B B = [] for i in range(n): if S[i] == T[i]: B.append(A[i] * 2) else: B.append(A[i] - 1) return sum(B)"},{"question":"A group of friends loves playing a game called \\"River Crossing\\". In this game, they are given a 1-dimensional river of length `n`, represented as an array, where each element of the array can either be a stone (`1`) or water (`0`). They start from the left bank of the river (position 0) and need to reach the right bank (position `n-1`). They can only step on stones and are allowed to make jumps of exactly `k` positions to the right. Write a function that determines whether it is possible to cross the river. If it is possible to cross, the function should return the minimum number of jumps required to do so. If it is not possible to cross, the function should return `-1`. Input - The first line contains two integers, `n` (the length of the river) and `k` (the jump distance). - The second line contains `n` integers where each integer is either `0` or `1` representing the river array. Output - Return the minimum number of jumps required to cross the river, or `-1` if it is not possible. Constraints - 1 ≤ n ≤ 10^5 - 1 ≤ k ≤ n Example Input: 8 3 1 1 0 1 0 1 0 1 Output: 3 Explanation: `Locations can be indexed as follows:` - Start at index 0 (stone). - First jump to index 3 (stone). - Second jump to index 6 (stone). - Third jump reaches index 7 (target). Additional Example Input: 5 2 1 0 0 0 1 Output: -1 Explanation: - Start at index 0 (stone). - Cannot make any jump of 2 positions to any stone, making it impossible to reach the end of the river.","solution":"def min_jumps_to_cross_river(n, k, river): Returns the minimum number of jumps required to cross the river or -1 if it is not possible. :param n: Length of the river :param k: Jump distance :param river: List representing the river with stones (1) and water (0) :return: Minimum number of jumps or -1 if it is not possible if river[0] == 0 or river[-1] == 0: return -1 jumps = 0 position = 0 while position < n - 1: jump_made = False for i in range(k, 0, -1): if position + i < n and river[position + i] == 1: position += i jumps += 1 jump_made = True break if not jump_made: return -1 return jumps"},{"question":"A spaceship needs to transport astronauts to a distant space station. There are N astronauts, and each astronaut requires a certain amount of fuel, F_i, to be transported to the space station. The spaceship can only carry up to a maximum capacity of M fuel units. Being fuel-efficient is crucial, and thus it\'s important to minimize the number of spaceship trips needed to transport all N astronauts to the space station. Given the fuel requirements of each astronaut, determine the minimum number of trips required so that all astronauts reach the space station. Constraints: - 1 leq N leq 100000 - 1 leq F_i leq 10000 - 1 leq M leq 10^9 - F_i and M are integers. Input: The input is given from Standard Input in the following format: N M F_1 F_2 : F_N Output: Print the minimum number of spaceship trips required. Examples: Input: 5 10 2 3 7 5 1 Output: 3 Input: 4 7 4 4 4 4 Output: 4","solution":"def min_trips(N, M, fuel_requirements): fuel_requirements.sort() start, end = 0, len(fuel_requirements) - 1 trips = 0 while start <= end: if fuel_requirements[start] + fuel_requirements[end] <= M: start += 1 end -= 1 trips += 1 return trips"},{"question":"Kevin is designing a new campus for a university, and he is very conscious about networking. The university has `n` buildings, and he figured out the minimum number of internet cables required to ensure that every building has an internet connection. He also noticed that the length of the longest cable segment significantly impacts the overall signal quality. The campus can be represented as a graph where buildings are nodes, and possible cable connections are edges weighted by their lengths. Kevin needs to connect all `n` buildings using exactly `n-1` cables such that any building can reach any other building. Kevin wants the length of the longest cable in this network to be minimized. Write a program to determine the minimum possible length of the longest cable segment in the network. Input The first line contains an integer `n` (1 ≤ n ≤ 100), the number of university buildings. The following `n` lines contain `n` integers each, where the `j-th` integer in the `i-th` line represents the length of the cable required to connect building `i` to building `j` (1 ≤ cable length ≤ 10^9). A building does not need a cable to connect to itself, so the diagonal elements are zero. Output Print a single integer — the minimum possible length of the longest cable segment in the network. Examples Input 3 0 4 3 4 0 2 3 2 0 Output 3 Input 4 0 1 2 3 1 0 4 5 2 4 0 6 3 5 6 0 Output 3 Note In the first example, the buildings and connections can be visualized as: - Building 1 to Building 2: 4 meters - Building 1 to Building 3: 3 meters - Building 2 to Building 3: 2 meters The optimal network for minimal longest cable would be: - Use the cable between Building 1 and Building 3 (3 meters) - Use the cable between Building 3 and Building 2 (2 meters) Thus, the longest cable in this network is 3 meters.","solution":"def minimum_longest_cable_length(n, matrix): import heapq def prim(): visited = [False] * n min_heap = [(0, 0)] # (weight, vertex) max_edge_in_mst = 0 while min_heap: weight, u = heapq.heappop(min_heap) if visited[u]: continue visited[u] = True max_edge_in_mst = max(max_edge_in_mst, weight) for v in range(n): if not visited[v] and matrix[u][v] > 0: heapq.heappush(min_heap, (matrix[u][v], v)) return max_edge_in_mst return prim()"},{"question":"Tom is an avid rock climber and he maintains a log of all the climbs he has completed. Each climb has a specific difficulty level ranging from 1 to 10. Tom likes to analyze his climbing progress periodically and is now interested in finding out some specific statistics about his climbs. Given a list of climb difficulties `d` where `d[i]` represents the difficulty of the i-th climb. Tom wants to find out the maximum number of contiguous climb segments such that each segment has at least `k` climbs and the maximum difficulty of climbs in each segment does not exceed a given threshold `t`. Help Tom by writing a function that takes the list `d`, the integer `k`, and the integer `t` as input parameters and returns the maximum number of such contiguous segments. Input The input consists of: - An integer `n` (1 ≤ n ≤ 105), the number of climbs. - An array `d` of integers of size `n`, where each integer `d[i]` (1 ≤ d[i] ≤ 10) represents the difficulty of the i-th climb. - Two integers `k` (1 ≤ k ≤ n) and `t` (1 ≤ t ≤ 10). Output Output a single integer, the maximum number of contiguous segments that meet the criteria. Examples Input 6 4 3 2 1 4 2 2 3 Output 2 Input 5 5 6 7 8 4 3 5 Output 0 Note In the first example, there are two valid segments: the segment [4, 3] and the segment [2, 1]. Both segments have a maximum difficulty level that does not exceed `3`, and their lengths are at least `2`. In the second example, no segment of length at least `3` has a maximum difficulty that is less than or equal to `5`.","solution":"def count_valid_segments(d, k, t): Returns the maximum number of contiguous climb segments such that each segment has at least k climbs and the maximum difficulty of climbs in each segment does not exceed a given threshold t. n = len(d) count = 0 for i in range(n - k + 1): if max(d[i:i + k]) <= t: is_valid = True for j in range(i + k, n + 1): if max(d[i:j]) > t: break is_valid = True if is_valid: count += 1 return count"},{"question":"Ayal is a computer scientist working on a project to analyze a sequence of numbers. Being short on time, she wants to automate the process of finding the longest subsequence which is strictly increasing. To help her out, you need to write a program that identifies the length of this subsequence for a given list of numbers. Input: First line contains an integer T, denoting the number of test cases. Each test case contains two lines. First line of each test case contains an integer N, denoting the size of the sequence. Second line of each test case contains N integers, separated by a single space, representing the sequence. Output: For each test case, print the length of the longest strictly increasing subsequence in a new line. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ Sequence element ≤ 10^5 SAMPLE INPUT 2 5 10 22 9 33 21 6 5 8 3 7 9 1 SAMPLE OUTPUT 3 3 Explanation In the first test case, the longest subsequence which is strictly increasing is [10, 22, 33] and its length is 3. Even though [10, 22, 33, 21] is longer, it is not strictly increasing. In the second test case, the longest subsequence which is strictly increasing is [5, 7, 9] and its length is 3. Other sequences like [5, 8], [3, 7, 9] of the same length are also possible.","solution":"def longest_increasing_subsequence_length(sequence): import bisect lis = [] for num in sequence: pos = bisect.bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis) def process_test_cases(test_cases): results = [] for test_case in test_cases: N = test_case[0] sequence = test_case[1] result = longest_increasing_subsequence_length(sequence) results.append(result) return results"},{"question":"You are participating in a Rube Goldberg contest, where you need to create a chain reaction using dominos. There are n dominos placed in a line, and each domino i has an initial height h_i. Your goal is to determine if all the dominos can be toppled starting from the first domino. On toppling a domino, it will fall to the right and will cause the next domino to topple if its height is greater than or equal to the initial heights of both the current domino and the next domino combined. Specifically, if the ith domino has a height h_i, it will topple the (i+1)th domino if h_i >= h_(i+1). Write a program that determines if you can topple all the dominos starting from the first one. Input: The first line contains an integer n (1 ≤ n ≤ 100) — the number of dominos. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^5), where h_i is the initial height of the ith domino. Output: Output \\"YES\\" if all dominos can be toppled starting from the first one, otherwise print \\"NO\\". Examples Input: 5 10 7 6 8 9 Output: YES Input: 4 5 3 9 12 Output: NO Note: In the first example, the sequence of heights ensures that each domino, when knocked over, will be able to topple the next domino since each height is greater than or equal to the next height in the sequence. Thus, all dominos will be toppled. In the second example, the third domino has a height of 9, which is less than the 12 of the fourth domino. The fourth domino cannot be toppled by the third. Therefore, it is not possible to topple all dominos.","solution":"def can_topple_all_dominos(n, heights): Determines if all dominos can be toppled starting from the first one. Arguments: n -- integer, number of dominos. heights -- list of integers, the heights of the dominos. Returns: \\"YES\\" if all dominos can be toppled, otherwise \\"NO\\". for i in range(1, n): if heights[i-1] < heights[i]: return \\"NO\\" return \\"YES\\""},{"question":"Alice and Bob are playing a game with a bag of balls. There are n balls in the bag, each numbered from 1 to n. Alice will take out a subset of these balls and show the numbers to Bob. Bob has to figure out which balls Alice has taken out based on a series of yes/no questions he can ask Alice. For each question, Bob can choose a number m and ask, “Has the ball numbered m been taken out?” Alice will respond truthfully with “yes” or “no”. Your task is to determine the minimum number of questions Bob needs to ask Alice in the worst case to determine the balls that Alice has taken out. Additionally, you need to provide the best strategy for Bob to ask these questions. Input A single line contains the number n (1 ≤ n ≤ 103). Output Print the length of the sequence of questions k (0 ≤ k ≤ n), followed by k numbers m — the questions Bob should ask (1 ≤ m ≤ n). If there are multiple correct sequences of questions of the minimum length, you may print any of them. Examples Input 3 Output 3 1 2 3 Input 5 Output 5 1 2 3 4 5 Note In the second example, regardless of which balls Alice takes out, Bob will always be able to determine the exact subset with a series of yes/no questions by checking each ball individually.","solution":"def determine_questions(n): Determines the minimum number of questions Bob needs to ask and the questions themselves. Parameters: n (int): Overall number of balls. Returns: (int, list): A tuple with the number of questions and the list of questions to ask. # The minimum number of questions needed is n and the best strategy is to ask for each ball questions = list(range(1, n + 1)) return len(questions), questions"},{"question":"Rotate the Matrix Given an N x M matrix, rotate it 90 degrees clockwise. You need to modify the matrix in place and not use any extra space for another matrix. The matrix will contain only non-negative integers. Input The first line contains two integers N and M (1 ≤ N, M ≤ 100), denoting the number of rows and columns respectively. Each of the next N lines contains M integers separated by a space, representing elements of the matrix. Output Output the matrix after rotation. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 7 4 1 8 5 2 9 6 3 Explanation The matrix 1 2 3 4 5 6 7 8 9 after rotating 90 degrees clockwise becomes 7 4 1 8 5 2 9 6 3","solution":"def rotate_matrix(matrix): Rotates the given N x M matrix 90 degrees clockwise. Args: matrix: List of Lists containing N x M non-negative integers Returns: Rotated matrix as a List of Lists. # Number of rows and columns N = len(matrix) M = len(matrix[0]) # Create a new matrix to store rotated values rotated_matrix = [[0]*N for _ in range(M)] for i in range(N): for j in range(M): rotated_matrix[j][N-1-i] = matrix[i][j] return rotated_matrix"},{"question":"Aliens and Palindromes Aliens from the planet Zog love palindromes. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward (ignoring spaces, punctuation, and capitalization). The Zog scientists have developed a special sequence of integers and want to find the longest contiguous subarray that forms a palindrome. Given an array of integers, your task is to find the longest contiguous subarray that forms a palindrome and output its length. # Input The first line contains an integer, `t`, the number of test cases (1 ≤ t ≤ 100). For each test case, it contains an integer `n` (1 ≤ n ≤ 1000) which represents the number of elements in the array. The following line contains `n` integers separated by a space. # Output For each test case, output a single integer value denoting the length of the longest contiguous subarray that is a palindrome. # Example Input ``` 2 7 1 2 3 4 3 2 1 5 1 2 2 3 4 ``` Output ``` 7 2 ``` Explanation For the first input, the entire array `[1, 2, 3, 4, 3, 2, 1]` is a palindrome. For the second input, the longest palindrome subarray is `[2, 2]`.","solution":"def is_palindrome(arr): This function checks if the input array is a palindrome. return arr == arr[::-1] def longest_palindrome_subarray_length(arr): This function finds the length of the longest contiguous subarray that forms a palindrome. n = len(arr) max_length = 0 for i in range(n): for j in range(i, n): if is_palindrome(arr[i:j+1]): max_length = max(max_length, j-i+1) return max_length def solve(test_cases): results = [] for arr in test_cases: results.append(longest_palindrome_subarray_length(arr)) return results"},{"question":"You are given two strings, A and B, consisting of lowercase letters. Your task is to determine the minimum number of operations required to convert string A into string B. An operation is defined as deleting one character from string A. Constraints * 1 leq |A|, |B| leq 10^5 * Strings A and B consist of lowercase letters only. Input Input is given from Standard Input in the following format: A B Output Print the minimum number of deletions required to convert string A into string B. Examples Input abcdef bcdef Output 1 Input coding code Output 3 Input hello hel Output 2","solution":"def min_deletions_to_convert(A, B): len_A = len(A) len_B = len(B) # Create a DP table to store the lengths of the longest common subsequence dp = [[0] * (len_B + 1) for _ in range(len_A + 1)] # Fill the DP table for i in range(1, len_A + 1): for j in range(1, len_B + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Length of the Longest Common Subsequence lcs_length = dp[len_A][len_B] # Minimum deletions required to transform A into B return len_A - lcs_length"},{"question":"A popular card game involves an initial shuffle of a deck of 52 cards, followed by repeated drawing and shuffling in a particular pattern. Each card in the deck is identified by its suit and rank. The suits are denoted by \\"H\\" (Hearts), \\"D\\" (Diamonds), \\"S\\" (Spades), and \\"C\\" (Clubs), and the ranks range from 2 to 10, J, Q, K, A. The game proceeds as follows: 1. The deck is shuffled, and the player draws one card from the deck. 2. The player then takes the next card from the deck that has the same suit or rank as the drawn card and adds it to their hand. 3. This process is repeated until no more cards can be drawn. 4. At this point, the hand is shuffled back into the remaining deck, and the player starts over, drawing from the newly shuffled deck. The goal is to maximize the number of cards drawn in a single round before reshuffling. You are to simulate this card game and determine the maximum number of cards that can be drawn in one round. Input The input consists of a single line with an integer n (1 ≤ n ≤ 20) indicating the number of test cases. For each test case: - The first line contains a single integer m (1 ≤ m ≤ 52) indicating the number of cards initially in the deck. - The second line contains m space-separated strings representing the cards in the deck. Each string consists of two characters: the first character denoting the rank and the second character denoting the suit. Output For each test case, output a single integer indicating the maximum number of cards that can be drawn in one round. Examples Input 2 5 9H 7C 3D KH 9S 4 2H JD 4C 7C Output 3 2 Explanation In the first test case, the maximum number of cards that can be drawn in one round is 3, starting with 9H, then drawing 9S, and stopping as no more cards of the same rank or suit are available. In the second test case, only 2 cards can be drawn in one round, 7C and 4C (or vice versa), because there are no more cards matching either card\'s rank or suit.","solution":"import random from collections import deque def max_cards_drawn(deck): def draw_card(deck, card): hand = [card] queue = deque([card]) while queue: current = queue.popleft() next_cards = [c for c in deck if c[0] == current[0] or c[1] == current[1]] for next_card in next_cards: if next_card not in hand: hand.append(next_card) queue.append(next_card) return len(hand) max_draws = 0 for card in deck: remaining_deck = [c for c in deck if c != card] drawn_cards = draw_card(remaining_deck, card) max_draws = max(max_draws, drawn_cards) return max_draws def max_cards_drawn_in_each_round(test_cases): results = [] for cards in test_cases: max_draw = max_cards_drawn(cards) results.append(max_draw) return results # Read input def process_input(input_string): input_lines = input_string.strip().split(\'n\') test_cases_count = int(input_lines[0]) test_cases = [] line_index = 1 for _ in range(test_cases_count): m = int(input_lines[line_index]) cards = input_lines[line_index + 1].split() test_cases.append(cards) line_index += 2 return test_cases input_string = \\"2n5n9H 7C 3D KH 9Sn4n2H JD 4C 7C\\" test_cases = process_input(input_string) result = max_cards_drawn_in_each_round(test_cases) print(result) # Output: [3, 2]"},{"question":"**Problem Statement** Alice and Bob are playing a game with a string and a list of forbidden substrings. The rules are simple: 1. Alice chooses a substring and checks if it is forbidden. 2. If the substring is forbidden, Alice gets 1 point. 3. If the substring is not forbidden, Bob gets 1 point. 4. The substring must be contiguous and can be of any length (minimum length is 1). Alice wants to maximize her points while Bob aims to minimize Alice\'s points. Provided the string and the list of forbidden substrings, determine Alice\'s maximum possible score. **Input:** - The first line contains a single integer T denoting the number of test cases. - The first line of each test case contains a string S. - The second line of each test case contains an integer F, denoting the number of forbidden substrings. - The next F lines contain a forbidden substring each. **Output:** For each test case, output the maximum possible score Alice can achieve on a new line. **Constraints:** - 1 ≤ T ≤ 10 - 1 ≤ |S| ≤ 1000 - 1 ≤ F ≤ 50 - 1 ≤ |forbidden substring| ≤ |S| **Example:** Input: ``` 2 ababab 2 aba bab abcdef 2 abc def ``` Output: ``` 2 2 ```","solution":"def max_alice_score(T, test_cases): results = [] for i in range(T): S, F, forbidden_substrings = test_cases[i] n = len(S) # Step 1: Preprocess forbidden substrings for quick lookup forbidden_set = set(forbidden_substrings) # Step 2: Initialize all positions as not visited visited = [False] * n max_score = 0 # Step 3: Iterate through all possible substrings for start in range(n): for end in range(start + 1, n + 1): if all(not visited[k] for k in range(start, end)): # Check if the substring is forbidden if S[start:end] in forbidden_set: # Mark the substring\'s positions as visited for k in range(start, end): visited[k] = True max_score += 1 results.append(max_score) return results # Example Input T = 2 test_cases = [ (\\"ababab\\", 2, [\\"aba\\", \\"bab\\"]), (\\"abcdef\\", 2, [\\"abc\\", \\"def\\"]) ] # Example Output print(max_alice_score(T, test_cases)) # Expected Output: [2, 2]"},{"question":"A gardener has a rectangular garden with dimensions N x M (N rows and M columns). Initially, all the cells in the garden are dry. The gardener can perform one type of operation: water any cell (i, j). When a cell (i, j) is watered, it moistens not only itself but all cells in the same row and the same column as well. Determine the minimum number of watering operations required to completely moisten the entire garden. Constraints * 1 leq N, M leq 1000 Input Input is given from Standard Input in the following format: N M Output Print the minimum number of watering operations required to completely moisten the entire garden. Examples Input 3 3 Output 2 Input 1 1 Output 1 Input 6 8 Output 6","solution":"def min_watering_operations(N, M): Function to determine the minimum number of watering operations required to completely moisten the entire garden of dimensions N x M. # The minimum number of watering operations needed to fully water the garden return min(N, M)"},{"question":"You are given a 2D grid of size N x M consisting of cells marked with either \'1\' or \'0\'. A cell marked with \'1\' is walkable, while a cell marked with \'0\' is not walkable. You start at the top-left corner (0, 0) and want to reach the bottom-right corner (N-1, M-1). You can only move right or down from a cell. Determine the number of distinct paths from the top-left corner to the bottom-right corner. Constraints: - All values in input are integers. - 1 leq N, M leq 1000 - Each cell is either \'1\' (walkable) or \'0\' (not walkable). Input - The first line contains two integers, N and M. - Each of the next N lines contains M characters (\'1\' or \'0\'). Output - Print a single integer, the number of distinct paths from (0, 0) to (N-1, M-1). Example Input 3 3 1 1 1 1 0 1 1 1 1 Output 2 Input 2 2 1 0 1 1 Output 1","solution":"def num_paths(grid): if grid[0][0] == \'0\' or grid[-1][-1] == \'0\': return 0 N = len(grid) M = len(grid[0]) dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == \'1\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1] # Helper function to facilitate the input format. def find_num_paths(N, M, grid_lines): grid = [line.split() for line in grid_lines] return num_paths(grid)"},{"question":"Given a series of lowercase words, your mission is to find the longest common prefix among them. The input consists of lines, each containing a space-separated list of words. The input terminates with a line containing a single dash (\'-\'). For each list of words, your program should output the longest common prefix. If there is no common prefix, output an empty string for that list. Input Each line contains a space-separated list of lowercase words, followed by a line with a single dash (\'-\'). You may assume each list has at least one word and no word exceeds 100 characters in length. There will be no more than 1000 lines of input. Output For each list of words, output a line containing the longest common prefix. If no common prefix exists, output an empty string. Example Input flower flow flight dog racecar car reflow reform refund - Output fl (empty string) ref","solution":"def longest_common_prefix(words): Finds the longest common prefix among a list of words. If there is no common prefix, returns an empty string. if not words: return \\"\\" prefix = words[0] for word in words[1:]: while word[:len(prefix)] != prefix and prefix: prefix = prefix[:-1] return prefix def process_input_lines(lines): Processes multiple lines of space-separated lists of words to find the longest common prefix for each list. The input ends with a \'-\' line. results = [] for line in lines: if line.strip() == \'-\': break words = line.split() results.append(longest_common_prefix(words)) return results"},{"question":"Captain Jack and his crew have discovered multiple treasure chests on a mysterious island. Each chest contains a certain amount of gold coins. Captain Jack wants to maximize the total value of gold coins the crew can carry with them back to the ship. However, he has placed a restriction: they can only carry a maximum number of chests. Given this constraint, your task is to determine the maximum amount of gold coins they can carry. Input: The first line contains the number of test cases T. Each test case contains two integers N and K. N denotes the number of treasure chests and K denotes the maximum number of chests the crew can carry. This is followed by a line containing N integers, where each integer represents the amount of gold coins in a chest. Output: For each test case, output the maximum amount of gold coins the crew can carry. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100000 1 ≤ K ≤ N 1 ≤ gold coins in a chest ≤ 1000000000 SAMPLE INPUT: 2 5 2 10 20 30 40 50 3 3 5 5 5 SAMPLE OUTPUT: 90 15 Explanation Test Case # 1: There are five treasure chests with the amounts of gold coins: 10, 20, 30, 40, and 50. The crew can carry a maximum of 2 chests. To maximize the gold, they should carry the chests containing the most amount of gold coins: 50 and 40. Therefore, the maximum amount of gold coins they can carry is 50 + 40 = 90. Test Case # 2: There are three treasure chests, each containing 5 gold coins. Since the crew can carry all three chests, the maximum amount of gold coins they can carry is 5 + 5 + 5 = 15.","solution":"def max_gold_coins(T, test_cases): results = [] for case in test_cases: N, K, coins = case coins.sort(reverse=True) max_gold = sum(coins[:K]) results.append(max_gold) return results"},{"question":"Shilpa loves sequences and series. She recently discovered a unique type of series termed as the \\"Adjacent Difference Sequence\\". For a given sequence of N integers, the adjacent difference sequence is defined as the absolute difference between each consecutive pair of numbers. Shilpa wants your help to analyze this sequence. Given a sequence of integers, you need to calculate the sum of the adjacent difference sequence. Your task is to write a program that, given a sequence of integers, computes the required sum for each sequence. INPUT First line contains an integer T, the number of test cases. Each test case starts with an integer N, the size of the sequence. Next line contains N space-separated integers representing the sequence. OUTPUT For each test case, print the sum of the adjacent difference sequence. CONSTRAINTS 1 ≤ T ≤ 10^5 2 ≤ N ≤ 10^5 |sequence[i]| ≤ 10^9 SAMPLE INPUT 2 3 1 3 2 4 4 1 3 5 SAMPLE OUTPUT 3 8 Explanation For testcase 1: The sequence is [1, 3, 2] Adjacent differences are |1-3|, |3-2| = 2, 1 Sum = 2 + 1 = 3 For testcase 2: The sequence is [4, 1, 3, 5] Adjacent differences are |4-1|, |1-3|, |3-5| = 3, 2, 2 Sum = 3 + 2 + 2 = 7","solution":"def adjacent_difference_sum(test_cases): results = [] for sequence in test_cases: adj_diff_sum = 0 for i in range(1, len(sequence)): adj_diff_sum += abs(sequence[i] - sequence[i-1]) results.append(adj_diff_sum) return results def process_input(input_data): lines = input_data.strip().split(\'n\') num_test_cases = int(lines[0]) test_cases = [] index = 1 for _ in range(num_test_cases): n = int(lines[index]) sequence = list(map(int, lines[index + 1].strip().split())) test_cases.append(sequence) index += 2 return test_cases"},{"question":"Given an array of integers, find a pair of integers (x, y) such that x occurs before y in the array and the difference (y - x) is maximized. If there are multiple pairs with the same maximum difference, return the first such pair (x, y) found. If no valid pair exists, return -1. Input The first line contains a single integer n (1 ≤ n ≤ 50) — the number of integers in the array. The second line contains n integers separated by spaces representing the array elements. All integers in the array are between -1000 and 1000 (inclusive). Output Print two integers x and y separated by a space, denoting the pair (x, y) that maximizes the difference (y - x). If no valid pair exists, print `-1`. Examples Input 5 1 2 3 4 5 Output 1 5 Input 5 5 4 3 2 1 Output -1 Note In the first example, the pair (1, 5) has the maximum difference of 4 which is greater than any other difference (e.g., (2, 3), etc.). In the second example, no valid pair (x, y) exists such that x occurs before y and y is greater than x, hence the output is -1.","solution":"def find_max_diff_pair(n, arr): Finds a pair (x, y) such that y - x is maximized and x occurs before y in the array. If no such pair exists, returns -1. max_diff = -1 result_pair = -1 for i in range(n - 1): for j in range(i + 1, n): if arr[j] > arr[i]: diff = arr[j] - arr[i] if diff > max_diff: max_diff = diff result_pair = (arr[i], arr[j]) return result_pair if result_pair != -1 else -1"},{"question":"Machine learning has become increasingly important for analyzing large data sets. A common technique is to use a rolling average to smooth time series data, which helps to understand the trends and patterns over time. You are given a list of integers representing a time series and a window size k. Your task is to compute the rolling average for each position in the list where a sufficient number of previous elements exist to form a complete window. Specifically, at each position i in the list (starting from 0), you should compute the average of elements from position i-k+1 to i, inclusive, as long as i-k+1 is a valid index. If not enough elements are available to form a complete window of size k at position i, no average should be computed for that position. Write a function `rolling_average(time_series, k)` that takes a list of integers `time_series` and an integer `k` and returns a list of floats representing the rolling averages for each valid position. The averages should be computed with up to 3 decimal places of precision. Input - `time_series`: List of integers representing the time series data. The length of the list is between 1 and 10^6. - `k`: A positive integer representing the window size (1 ≤ k ≤ 10^6). Output - A list of floats, each representing the rolling average at each valid position in the `time_series` list. The length of the output list should be equal to `len(time_series) - k + 1` if k ≤ len(time_series), otherwise an empty list. Example Input ```python rolling_average([1, 2, 3, 4, 5, 6], 3) ``` Output ``` [2.000, 3.000, 4.000, 5.000] ``` Input ```python rolling_average([1, 2, 3, 4, 5, 6], 7) ``` Output ``` [] ``` Input ```python rolling_average([10, 20, 30, 40, 50], 2) ``` Output ``` [15.000, 25.000, 35.000, 45.000] ```","solution":"def rolling_average(time_series, k): Returns the rolling average of the time series data with window size k. if k > len(time_series): return [] rolling_averages = [] sum_window = sum(time_series[:k-1]) for i in range(k-1, len(time_series)): sum_window += time_series[i] rolling_averages.append(round(sum_window / k, 3)) sum_window -= time_series[i - k + 1] return rolling_averages"},{"question":"You are given a list of integers representing the ratings received from programmers who participated in a coding challenge. The goal is to calculate the average rating after eliminating the highest and lowest ratings. If there are ties for the highest or lowest rating, remove only one instance of the tie. Write a function `calculate_avg_rating` that takes in an integer list `ratings` as input and returns the average rating after removing the highest and lowest ratings, rounded to the nearest integer. If the list has fewer than three ratings, return 0. Function Signature: ```python def calculate_avg_rating(ratings: List[int]) -> int: ``` Constraints: * 1 ≤ len(ratings) ≤ 100 * 1 ≤ ratings[i] ≤ 100 **Input:** * A single line containing space-separated integers representing the ratings. **Output:** * A single integer - the average rating after removing the highest and lowest ratings. **Examples:** ``` Input 4 8 5 9 6 7 3 Output 6 ``` ``` Input 10 10 10 10 Output 10 ``` ``` Input 7 8 Output 0 ```","solution":"from typing import List def calculate_avg_rating(ratings: List[int]) -> int: if len(ratings) < 3: return 0 highest_rating = max(ratings) lowest_rating = min(ratings) ratings.remove(highest_rating) ratings.remove(lowest_rating) avg_rating = sum(ratings) / len(ratings) return round(avg_rating)"},{"question":"Alice and Bob are working on a software component to manage tasks in a distributed system. They have a list of tasks and each task has a dependency on zero or more other tasks. A task can only be executed if all the tasks it depends on have been executed. The task dependencies form a directed acyclic graph (DAG). Alice and Bob want to determine the minimum number of tasks that need to be completed in order to be able to execute a specific task. Write a program to find the minimum number of tasks that need to be completed before a given task can be executed. Input The first line contains two integers n, m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105) — the number of tasks and the number of dependencies respectively. Each of the next m lines contains two integers u, v (1 ≤ u, v ≤ n) indicating that task u must be completed before task v. The last line contains one integer t (1 ≤ t ≤ n) — the target task. Output Print a single integer — the minimum number of tasks that need to be completed before the target task t can be executed. Examples Input 5 4 1 2 2 3 3 4 4 5 5 Output 4 Input 6 6 1 2 1 3 2 4 3 4 4 5 4 6 5 Output 3 Note In the first example, all tasks (1, 2, 3, and 4) need to be completed before task 5 can be executed. In the second example, tasks 1, 2, and 4 need to be completed before task 5 can be executed, even though task 3 is also a dependency, it is not a direct prerequisite for task 5.","solution":"from collections import deque, defaultdict def minimum_tasks_before_target(n, m, dependencies, t): # Create an adjacency list adj_list = defaultdict(list) for u, v in dependencies: adj_list[v].append(u) # Initialize distance dictionary distance = {i: float(\'inf\') for i in range(1, n+1)} distance[t] = 0 queue = deque([t]) while queue: current = queue.popleft() for neighbor in adj_list[current]: if distance[neighbor] == float(\'inf\'): distance[neighbor] = distance[current] + 1 queue.append(neighbor) # The number of tasks before t is the maximum distance not including the task itself return max(dist for task, dist in distance.items() if dist < float(\'inf\')) # Example usage: # Input: 5, 4, [(1, 2), (2, 3), (3, 4), (4, 5)], 5 # Output: 4"},{"question":"John is working on a project involving binary trees and needs to calculate the maximum depth of a binary tree. The depth of a binary tree is the number of nodes along the longest path from the root node down to the farthest leaf node. John asks for your help to write a function that calculates the maximum depth of a binary tree. A binary tree node is defined as follows: ``` class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` Write a function `max_depth(root: TreeNode) -> int` that takes the root of a binary tree and returns its maximum depth. # Constraints * The number of nodes in the tree is in the range [0, 10^4]. * -100 <= Node.val <= 100 # Input The function `max_depth` will receive the root node of a binary tree. # Output The function should return an integer representing the maximum depth of the binary tree. # Examples Example 1: ``` 3 / 9 20 / 15 7 ``` Input: ``` root = [3, 9, 20, None, None, 15, 7] ``` Output: ``` 3 ``` Example 2: Input: ``` root = [1, None, 2] ``` Output: ``` 2 ``` # Note Utilize depth-first search (DFS) or breadth-first search (BFS) to solve this problem.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def max_depth(root: TreeNode) -> int: Calculate the maximum depth of a binary tree. Args: root (TreeNode): Root node of the binary tree. Returns: int: Maximum depth of the binary tree. if root is None: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Aila has a list of positive integers, and she likes to create new arrays by splitting existing elements into smaller values. Specifically, she can replace any element Ai with two positive integers Bi and Ci such that Ai = Bi + Ci. Aila wants to know the maximal count of distinct values she can obtain in any single array after performing the splits any number of times she wants. Input: The first line of input contains one integer N - the number of elements in the list. The second line contains N space-separated positive integers representing the elements of the list. Output: The output should be a single integer representing the maximal count of distinct values Aila can obtain from the array. Constraints: 1 ≤ N ≤ 100 1 ≤ Ai ≤ 1000 SAMPLE INPUT 4 10 10 12 6 SAMPLE OUTPUT 7 Explanation In this case, Aila can achieve the following distinct values: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}. - We start with the array [10, 10, 12, 6]. - We can split 10 into [9, 1], [8, 2], [7, 3], [6, 4], [5, 5]. - We can split 12 into [11, 1], [10, 2], [9, 3], [8, 4], [7, 5], [6, 6]. - We can split 6 into [5, 1], [4, 2], [3, 3]. By gathering all distinct values, we get a total of 7 distinct values: {1, 2, 3, 4, 5, 6, 10}.","solution":"def max_distinct_values(arr): Returns the maximal count of distinct values that can be obtained from splitting elements of the array. # Utilize a set to track all the distinct values distinct_values = set() for num in arr: # Add all integers from 1 to num to the set of distinct values for i in range(1, num + 1): distinct_values.add(i) # The number of distinct values in the set is the result return len(distinct_values)"},{"question":"Given a list of integers, write a program that identifies and removes duplicate elements from the list without changing the order of the remaining elements. The program should then return the list with duplicates removed. Input: - An integer, `n`, representing the number of elements in the list. - A list of `n` integers. Output: - The modified list after removing duplicates, preserving the original order. Constraints: - 1 ≤ n ≤ 1000 - Each integer in the list can be between -1000 and 1000. SAMPLE INPUT 10 1 2 1 4 2 5 6 1 7 5 SAMPLE OUTPUT 1 2 4 5 6 7 Explanation: The input list `[1, 2, 1, 4, 2, 5, 6, 1, 7, 5]` has duplicates of `1`, `2`, and `5`. After removing duplicates while preserving the original order of the first occurrence of each element, the list becomes `[1, 2, 4, 5, 6, 7]`.","solution":"def remove_duplicates(n, lst): Removes duplicate elements from the list without changing the order of the remaining elements. Parameters: n (int): The number of elements in the list lst (list of int): The list of integers Returns: list of int: The list after removing duplicates seen = set() result = [] for num in lst: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Write a program that accepts an integer n and outputs the number of trailing zeros in n!. For example, if the input is 5, the output should be 1, since 5! = 120 and there is one trailing zero. If the input is 10, the output should be 2, since 10! = 3628800 and there are two trailing zeros. The input integer is guaranteed to be between 1 and 10,000. Input The input is a sequence of integers, each on a separate line. The input ends with a zero. Output For each input line, the output should be a single line with the number of trailing zeros in the factorial of the input number, in the same order as the input, except the terminating zero. Example Input 5 10 20 100 0 Output 1 2 4 24","solution":"def trailing_zeros_in_factorial(n): Returns the number of trailing zeros in the factorial of n. count = 0 i = 5 while n >= i: count += n // i i *= 5 return count def process_inputs(inputs): Processes a list of integers until a 0 is encountered. Returns a list of the number of trailing zeros in the factorial of each integer. results = [] for n in inputs: if n == 0: break results.append(trailing_zeros_in_factorial(n)) return results"},{"question":"Given a matrix of characters with dimensions M x N represented by a list of strings, each string is a row of the matrix. Find the length of the longest contiguous path in the matrix where the characters are in lexicographical order. You can move in 4 possible directions from a given cell: left, right, up, and down. The path does not need to be valid in terms of direction changes but must be lexicographically increasing, meaning each subsequent character in the path must be the next character in the alphabet. Input: The first line contains two integers M and N, denoting the number of rows and columns in the matrix. The next M lines each contain a string of length N, representing the rows of the matrix. Output: Print a single integer - the length of the longest contiguous path in the matrix where the characters are in lexicographical order. Constraints: 1 ≤ M, N ≤ 100 The matrix contains only lowercase English letters. SAMPLE INPUT 3 4 abcd bcda cdef SAMPLE OUTPUT 6 Explanation The longest contiguous path in lexicographical order is: \'a\' -> \'b\' -> \'c\' -> \'d\' -> \'e\' -> \'f\', which has a length of 6.","solution":"def longest_lexicographical_path(matrix): Returns the length of the longest contiguous path in the matrix where characters are in lexicographical order. M, N = len(matrix), len(matrix[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right memo = [[-1] * N for _ in range(M)] def dfs(x, y): if memo[x][y] != -1: return memo[x][y] longest_path = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and matrix[nx][ny] == chr(ord(matrix[x][y]) + 1): longest_path = max(longest_path, 1 + dfs(nx, ny)) memo[x][y] = longest_path return longest_path max_length = 1 for i in range(M): for j in range(N): max_length = max(max_length, dfs(i, j)) return max_length def process_input(input_string): input_lines = input_string.strip().split(\'n\') M, N = map(int, input_lines[0].split()) matrix = input_lines[1:] return longest_lexicographical_path(matrix)"},{"question":"You are given an array of n integers. Determine the length of the longest subarray (contiguous subsequence) that has a sum less than or equal to a given integer s. Input The first line of the input contains two integers n and s (1 ≤ n ≤ 10^5, 1 ≤ s ≤ 10^9) — the number of elements in the array and the desired sum. The next line contains n space-separated integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9). Output Print a single integer — the length of the longest subarray with a sum less than or equal to s. If no such subarray exists, print 0. Examples Input 5 5 1 2 3 4 5 Output 2 Input 5 10 1 2 3 4 5 Output 4 Note In the first example, the longest subarray with a sum less than or equal to 5 is [1, 2], so the answer is 2. In the second example, the longest subarray with a sum less than or equal to 10 is [1, 2, 3, 4], so the answer is 4.","solution":"def longest_subarray_with_sum_at_most_s(n, s, arr): left = 0 current_sum = 0 max_length = 0 for right in range(n): current_sum += arr[right] while current_sum > s and left <= right: current_sum -= arr[left] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Alice is studying a sequence of integers b1, b2, ..., bn and she wants to perform k operations on this sequence. The operations can be of the following types: 1. 1 l r x — replace all integers on the segment from l to r with the value x. 2. 2 l r — compute the sum of all integers on the segment from l to r. Can you help Alice by writing a program that performs these operations efficiently? # Input The first line of the input contains two integers n and k (1 ≤ n, k ≤ 100 000) — the number of elements in the sequence and the number of operations respectively. The next line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 10^9). Then follow k lines with operations descriptions. Each of them contains integers tpi, li, ri and may be xi (1 ≤ tpi ≤ 2, 1 ≤ li ≤ ri ≤ n, 1 ≤ xi ≤ 10^9). Here tpi = 1 corresponds to the operations of the first type and tpi = 2 corresponds to the operations of the second type. It is guaranteed that the input will contain at least one operation of the second type. # Output For each operation of the second type, print the answer on a new line. # Examples Input ``` 5 3 3 4 2 7 5 2 2 4 1 1 3 6 2 1 5 ``` Output ``` 13 25 ``` # Note Initially, the sequence b is [3, 4, 2, 7, 5]. The answer for the first operation of the second type is the sum of elements from index 2 to 4: 4 + 2 + 7 = 13. After applying the first type operation (1 1 3 6), the sequence b becomes [6, 6, 6, 7, 5]. The answer for the second operation of the second type is the sum of elements from index 1 to 5: 6 + 6 + 6 + 7 + 5 = 30.","solution":"class SegmentTree: def __init__(self, data): n = len(data) self.n = n self.tree = [0] * (2 * n) for i in range(n): self.tree[n + i] = data[i] for i in range(n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update_range(self, left, right, value): left += self.n right += self.n for i in range(left, right + 1): self.tree[i] = value while left > 1: left //= 2 right //= 2 for i in range(left, right + 1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def query_range(self, left, right): left += self.n right += self.n result = 0 while left <= right: if left % 2 == 1: result += self.tree[left] left += 1 if right % 2 == 0: result += self.tree[right] right -= 1 left //= 2 right //= 2 return result def process_operations(n, k, sequence, operations): seg_tree = SegmentTree(sequence) results = [] for op in operations: if op[0] == 1: _, l, r, x = op seg_tree.update_range(l - 1, r - 1, x) elif op[0] == 2: _, l, r = op results.append(seg_tree.query_range(l - 1, r - 1)) return results"},{"question":"Oliver loves collecting coins, and he has a set of coins with different values. He likes to form subsequences of these coins such that the difference between the maximum and minimum values in each subsequence is as small as possible. However, he also wants the length of such subsequences to be as long as possible. Given a list of coin values, help Oliver determine the maximum possible length of a subsequence where the difference between the maximum and minimum values does not exceed a specified limit k. Input The first line of the input contains two integers n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of coins Oliver has, and k (0 ≤ k ≤ 10^9) — the maximum allowed difference between the maximum and minimum values in the subsequence. The second line of the input contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^9) where c_i is the value of the i-th coin. Output Print one integer — the maximum length of a subsequence where the difference between the maximum and minimum values does not exceed k. Examples Input 8 3 1 5 3 4 2 6 8 7 Output 4 Input 5 0 1 2 3 4 5 Output 1 Input 7 5 10 12 15 18 13 17 20 Output 4 Note In the first example, one possible optimal subsequence is [3, 4, 2, 5] with a difference of 3 between the maximum (5) and minimum (2) values, which is within the allowed limit of 3. In the second example, since k is 0, each subsequence can only contain coins of the same value. The longest such subsequence has a length of 1. In the third example, one possible optimal subsequence is [10, 12, 13, 15] with a difference of 5 between the maximum (15) and minimum (10) values, which is within the allowed limit of 5.","solution":"def max_subsequence_length(n, k, coin_values): Given a list of coin values and a maximum allowed difference k, find the length of the longest subsequence where the difference between the maximum and minimum values does not exceed k. coin_values.sort() left = 0 max_length = 0 for right in range(n): while coin_values[right] - coin_values[left] > k: left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a positive integer n, write a program to determine the minimum number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum up to n. Input A positive integer n from 1 to 10000. Output A positive integer representing the minimum number of perfect square numbers that sum up to n. Example Input: 12 Output: 3 Explanation: 12 = 4 + 4 + 4","solution":"import math def min_num_perfect_squares(n): Returns the minimum number of perfect square numbers that sum up to n. if n <= 0: return 0 # List to store the minimum number of squares for each number up to n dp = [float(\'inf\')] * (n + 1) dp[0] = 0 # Calculate dp values for i in range(1, n + 1): j = 1 while j * j <= i: dp[i] = min(dp[i], dp[i - j * j] + 1) j += 1 return dp[n]"},{"question":"Triple Transcription Description: Alice and Bob are playing a game called \\"Triple Transcription.\\" In this game, they work with a list of integers and perform a series of operations on it. The goal of the game is to transform every element in the list to the value 1 using a limited set of operations. You are given a list of integers `A` of length `n`. You need to determine the minimum number of operations required to transform each element in the list to 1 using the following operation: - You can replace any integer `x` (greater than 1) with `x = floor(x/3)`, where `floor` represents the floor division. Your task is to write a program that, given the list of integers, computes the minimum number of operations required to make every integer in the list equal to 1. If it is not possible to transform an integer in the list to 1, then return -1 for that integer. Input: The first line contains an integer `t` (1 ≤ t ≤ 10^3) — the number of test cases. Each of the following `t` lines contains: - An integer `n` (1 ≤ n ≤ 10^4) — the number of elements in the list. - A list of `n` integers `A` (1 ≤ A[i] ≤ 10^9) — the elements of the list. Output: For each test case, output a single line with `n` integers separated by spaces, representing the minimum number of operations required to make each element in the list equal to 1. If it is not possible to transform an element to 1, output `-1` for that element. Example: Input 3 3 9 27 7 4 81 243 75 28 2 1 3 Output 2 3 -1 4 5 -1 -1 0 1 Explanation: In the first test case: - 9 -> 3 -> 1 (2 operations) - 27 -> 9 -> 3 -> 1 (3 operations) - 7 cannot be transformed to 1 using the given operation (output -1) In the second test case: - 81 -> 27 -> 9 -> 3 -> 1 (4 operations) - 243 -> 81 -> 27 -> 9 -> 3 -> 1 (5 operations) - 75 cannot be transformed to 1 using the given operation (output -1) - 28 cannot be transformed to 1 using the given operation (output -1) In the third test case: - 1 is already equal to 1 (0 operations) - 3 -> 1 (1 operation) Notes: In this problem, `floor(x/3)` means integer division of `x` by 3. For example, `floor(10/3) = 3` and `floor(15/3) = 5`.","solution":"def triple_transcription(t, test_cases): def min_operations_to_one(n, A): results = [] for num in A: count = 0 current = num while current > 1: if current % 3 != 0: break current //= 3 count += 1 if current == 1: results.append(count) else: results.append(-1) return results output = [] for i in range(t): n, A = test_cases[i] result = min_operations_to_one(n, A) output.append(result) return output"},{"question":"Simba is a lion cub living in a plain that can be represented as an n x n grid. Simba is practicing his moves and he can perform any of the following moves: - Jump one cell up - Jump one cell down - Jump one cell left - Jump one cell right There are m obstacles located in some cells of the grid. Simba cannot jump into a cell with an obstacle. Your task is to determine the minimum number of jumps required for Simba to reach from his starting position to a target position. Input The first line contains three integers n, m, and t (2 ≤ n ≤ 1000, 0 ≤ m ≤ 1000), where n is the size of the grid, m is the number of obstacles, and t is the number of test cases. The second line contains two integers xs and ys (1 ≤ xs, ys ≤ n), the starting position of Simba. The third line contains two integers xt and yt (1 ≤ xt, yt ≤ n), the target position. Each of the next m lines contains two integers xi and yi (1 ≤ xi, yi ≤ n) representing the position of an obstacle. Output For each test case, print one integer: the minimum number of jumps required for Simba to reach the target position, or -1 if it is not possible. Examples Input 5 4 1 1 1 5 5 1 2 2 2 3 2 4 2 Output 8 Input 3 1 1 1 1 3 3 2 2 Output 4 Input 3 0 1 1 1 2 2 Output 2 Note In the first sample, the grid is 5x5 and there are 4 obstacles at positions (1, 2), (2, 2), (3, 2), and (4, 2). Simba starts at (1, 1) and needs to get to (5, 5). The minimum number of jumps required following an optimal path avoiding obstacles is 8 jumps.","solution":"from collections import deque def min_jumps(n, m, xs, ys, xt, yt, obstacles): # Direction vectors directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize grid and mark obstacles grid = [[0] * n for _ in range(n)] for (xi, yi) in obstacles: grid[xi - 1][yi - 1] = -1 # mark obstacle positions # BFS initialization queue = deque([(xs - 1, ys - 1, 0)]) # (x, y, distance) visited = set((xs - 1, ys - 1)) while queue: x, y, dist = queue.popleft() # Return the distance if target is reached if x == xt - 1 and y == yt - 1: return dist # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] != -1: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # If target is not reachable def solve(simba_inputs): results = [] for simba_input in simba_inputs: n, m, xs, ys, xt, yt, obstacles = simba_input results.append(min_jumps(n, m, xs, ys, xt, yt, obstacles)) return results"},{"question":"In a magical world, there exists a series of enchanted forests arranged in a line. Each forest has a certain number of magic berries, and some of them also contain magical creatures. The i-th forest has `B[i]` berries and `C[i]` creatures. A brave adventurer starts their journey from the first forest to the last one. The adventurer can move from one forest to the next in the sequence and can collect berries in each forest they visit. However, the adventurer can carry only a limited number of berries, determined by their maximum capacity `K`. Whenever the adventurer encounters a forest with magical creatures, if they have collected more than `L` berries, the creatures will steal all the berries they carry (setting the collected berries to zero). If the adventurer has `L` berries or less, the berries are not stolen. Write a program that calculates the maximum number of berries the adventurer can have at the end of their journey, after possibly encountering magical creatures and having their berries stolen. # Input - The first line contains two integers N (the number of forests) and `K` (the maximum capacity of berries the adventurer can carry). - The second line contains N integers `B[i]` (the number of berries in the i-th forest). - The third line contains N integers `C[i]` (the number of creatures in the i-th forest), where 1 indicates the presence of creatures and 0 indicates no creatures. - The last line contains an integer `L` (the threshold value of berries). # Output - Print a single integer: the maximum number of berries the adventurer can have at the end of their journey. # Example Input 5 10 3 2 5 1 6 0 1 0 1 0 4 Output 6 # Explanation Starting from the first forest: - Forest 1: Collect 3 berries (total = 3) - Forest 2: With 5 berries and given `L` is 4, berries are stolen (total = 0) - Forest 3: Collect 5 berries (total = 5) - Forest 4: With 6 berries and given `L` is 4, berries are stolen (total = 0) - Forest 5: Collect 6 berries (total = 6)","solution":"def max_berries(N, K, B, C, L): total_berries = 0 for i in range(N): total_berries += B[i] # Ensure the adventurer does not exceed the maximum capacity K if total_berries > K: total_berries = K # Check if the current forest has creatures and if the berries exceed L if C[i] == 1 and total_berries > L: total_berries = 0 return total_berries"},{"question":"Sita is a math enthusiast and loves working with sequences. She is currently fascinated by arithmetic sequences and has been creating a lot of them. She noticed a pattern where, given the first term \'a\' and the common difference \'d\', she could easily calculate any term in the sequence. Now, she wants to generate the sequence up to the nth term but only wants to retrieve the terms that are divisible by a given integer \'k\'. She needs your help to automate this process. Your task is to help Sita by writing a program that takes the first term \'a\', the common difference \'d\', the number of terms \'n\', and the integer \'k\', and then outputs a list of all terms from the sequence that are divisible by \'k\'. Input format: The first line contains four space-separated integers: a, d, n, and k. Output format: Print all the terms from the arithmetic sequence up to the nth term that are divisible by k, space-separated. If no terms are divisible by k, print \\"None\\". Constraints: 1 ≤ a, d, n, k ≤ 100 SAMPLE INPUT 2 3 10 5 SAMPLE OUTPUT 5 20 35 50 Explanation The arithmetic sequence is: 2, 5, 8, 11, 14, 17, 20, 23, 26, 29. The terms divisible by 5 are 5, 20, and 35.","solution":"def arithmetic_sequence_terms(a, d, n, k): Given the first term (a), common difference (d), number of terms (n), and an integer (k), this function returns a list of terms in the arithmetic sequence that are divisible by k. If no terms are divisible by k, it returns \'None\'. results = [] for i in range(n): term = a + i * d if term % k == 0: results.append(term) if not results: return \\"None\\" return results # Example usage: # a, d, n, k = 2, 3, 10, 5 # print(arithmetic_sequence_terms(a, d, n, k)) # Output: [5, 20]"},{"question":"You are given a tree with n nodes (1-indexed) and n-1 edges. Each node has a value assigned to it. A query consists of two types: 1. Update the value of a node. 2. Find the maximum value in the subtree of a given node. Note that the tree is a rooted tree with node 1 being the root. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000) – the number of nodes in the tree, and the number of queries. The second line contains n integers a1, a2, ..., an – the initial values of the nodes. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) – indicating that there is an edge between node u and node v. Each of the next q lines contains a query in the format: 1. For update operation: \\"1 x y\\" where 1 is the identifier for update type, x (1 ≤ x ≤ n) is the node number and y is the new value of the node. 2. For maximum operation: \\"2 x\\" where 2 is the identifier for the maximum operation and x (1 ≤ x ≤ n) is the node number. You need to find the maximum value in the subtree of node x. Output For each query of type 2, print the maximum value in the subtree of node x. Example Input 7 5 1 2 3 4 5 6 7 1 2 1 3 2 4 2 5 3 6 3 7 2 1 1 2 10 2 2 1 3 20 2 3 Output 7 10 20 Note In the provided example, the tree structure initially is: ``` 1 / 2 3 / / 4 5 6 7 ``` Initial values of nodes are [1, 2, 3, 4, 5, 6, 7]. The maximum value in the subtree of node 1 is 7. After updating node 2\'s value to 10, the maximum value in the subtree of node 2 is 10. After updating node 3\'s value to 20, the maximum value in the subtree of node 3 is 20.","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] def dfs(tree, node, parent, subtree_max): max_in_subtree = node.value for child in node.children: if child != parent: # Avoid revisiting the parent node max_in_subtree = max(max_in_subtree, dfs(tree, child, node, subtree_max)) subtree_max[node] = max_in_subtree return max_in_subtree def process_queries(n, initial_values, edges, queries): nodes = [TreeNode(initial_values[i]) for i in range(n)] for u, v in edges: nodes[u - 1].children.append(nodes[v - 1]) nodes[v - 1].children.append(nodes[u - 1]) subtree_max = {} dfs(nodes, nodes[0], None, subtree_max) results = [] for query in queries: if query[0] == 1: _, x, y = query x = x - 1 nodes[x].value = y dfs(nodes, nodes[0], None, subtree_max) elif query[0] == 2: _, x = query x = x - 1 results.append(subtree_max[nodes[x]]) return results"},{"question":"In a forest, there are n trees arranged in a straight line. Each tree has a certain height. A lumberjack wants to cut down the maximum number of trees such that no two consecutive trees are cut. The lumberjack can choose to either cut a tree or leave it standing, but cannot cut two adjacent trees. Write a function `maxCutTrees` that takes an array of integers representing the heights of the trees and returns the maximum sum of heights of the trees that can be cut down under the given constraint. Input - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of trees. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the trees. Output - Output the maximum sum of heights of the trees that can be cut. Examples Input 5 3 2 7 10 12 Output 22 Input 4 5 5 10 40 Output 45 Note In the first example: - The optimal way is to cut down trees with heights 3, 10, and 12, giving a total height of 3 + 10 + 12 = 25. - Another optimal way is to cut down trees with heights 2, 7, and 12, giving a total height of 2 + 7 + 12 = 21. - The maximum sum is 25. In the second example: - The optimal way is to cut down trees with heights 5 and 40, giving a total height of 5 + 40 = 45. - This is larger than any other possible sum under the given constraints.","solution":"def maxCutTrees(heights): n = len(heights) if n == 0: return 0 if n == 1: return heights[0] dp = [0] * n dp[0] = heights[0] dp[1] = max(heights[0], heights[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + heights[i]) return dp[-1]"},{"question":"John has to attend several presentation sessions as part of a conference event. Each session has a start time and an end time, given in hours. John cannot attend two sessions that overlap, meaning that even if one session ends at the exact time another session starts, he cannot attend both. Given the details of all the sessions, determine the maximum number of sessions John can attend without any overlap. Input The first line contains an integer `n` (1 ≤ n ≤ 105), which represents the number of sessions. Each of the following `n` lines contains two integers `start` and `end` (0 ≤ start < end ≤ 109), representing the start and end times of a session. Output Print a single integer representing the maximum number of non-overlapping sessions John can attend. Example Input 5 1 3 2 5 4 6 6 8 5 7 Output 3 Note In the sample test, John can attend the sessions (1, 3), (4, 6), and (6, 8) which maximizes the number of sessions without any overlap.","solution":"def max_sessions(sessions): Determines the maximum number of non-overlapping sessions John can attend. # Sort sessions by end time sessions.sort(key=lambda x: x[1]) count = 0 current_end_time = -1 for start, end in sessions: if start >= current_end_time: count += 1 current_end_time = end return count"},{"question":"You are participating in a programming competition where you need to generate valid passwords based on certain rules. The password rules are as follows: 1. The password must be exactly `n` characters long. 2. It should contain at least one uppercase letter, one lowercase letter, and one digit. 3. It should not have any consecutive repeating characters (e.g., \\"aa\\", \\"11\\", etc. are not allowed). Write a function to generate a password that meets these requirements. If no such password can be generated, return an empty string. Function Signature: ```python def generate_password(n: int) -> str: ``` Input - An integer `n` (1 ≤ n ≤ 1000): the length of the password to be generated. Output - Return a string representing a valid password that follows the rules mentioned above. If no valid password can be generated, return an empty string. Examples Input ```python 6 ``` Output ```python \\"Aa1Bb2\\" ``` Input ```python 2 ``` Output ```python \\"\\" ``` Explanation In the first example, \\"Aa1Bb2\\" is a valid password that meets all the criteria: - It is 6 characters long. - It contains at least one uppercase letter, one lowercase letter, and one digit. - No characters are consecutive repeats. In the second example, it is impossible to generate a valid password of length 2 that includes an uppercase letter, a lowercase letter, and a digit, so the function returns an empty string.","solution":"import random import string def generate_password(n: int) -> str: # Check if it is possible to create a valid password if n < 3: return \\"\\" # Initial characters to ensure at least one uppercase, one lowercase, and one digit password_chars = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits) ] # Remaining characters to fill the password to the desired length while len(password_chars) < n: char_set = string.ascii_letters + string.digits char = random.choice(char_set) # Ensure no consecutive repeating characters if len(password_chars) > 0 and char == password_chars[-1]: continue password_chars.append(char) random.shuffle(password_chars) return \'\'.join(password_chars)"},{"question":"A food delivery company wants to optimize the assignment of delivery tasks to its drivers. Each delivery task has a unique ID and a defined delivery time in minutes. Each driver is available for a specific range of minutes and can deliver any order as long as the order\'s delivery time fits within the driver\'s available range. Given the delivery times of each task and the availability range of each driver, determine the maximum number of tasks that can be assigned to the drivers such that no driver is assigned more than one task and each task is assigned to exactly one driver. Input The first line of input contains an integer n (1 ≤ n ≤ 50) representing the number of delivery tasks. Each of the next n lines contains an integer ti (1 ≤ ti ≤ 100) representing the delivery time of each task. The next line contains an integer m (1 ≤ m ≤ 50) representing the number of drivers. Each of the next m lines contains two integers sj and ej (1 ≤ sj ≤ ej ≤ 100) representing the start and end of the time range during which the j-th driver is available. Output Output an integer representing the maximum number of tasks that can be assigned to the drivers. Examples Input 4 30 20 10 40 3 15 35 5 25 30 50 Output 3 Input 5 25 15 10 40 35 4 10 20 15 30 20 40 35 45 Output 4 Note In the first example, the first driver with availability 15-35 can deliver the tasks with times 30 or 20. The second driver with availability 5-25 can only deliver the task with time 10. The third driver with availability 30-50 can deliver the tasks with times 30 or 40. Thus, three tasks can be assigned to these three drivers. In the second example, each task can be assigned to a unique driver within their respective time ranges, resulting in four tasks being assigned.","solution":"def max_assigned_tasks(task_times, driver_ranges): Determines the maximum number of tasks that can be assigned to drivers. :param task_times: List of integers representing the delivery times of tasks. :param driver_ranges: List of tuples where each tuple represents the start and end time of driver availability. :return: Integer representing the maximum number of tasks that can be assigned to drivers. # Sort tasks and driver ranges task_times.sort() driver_ranges.sort(key=lambda x: x[1]) # Sort driver ranges by their end time assigned_tasks = 0 task_index = 0 for start, end in driver_ranges: while task_index < len(task_times) and task_times[task_index] < start: task_index += 1 if task_index < len(task_times) and start <= task_times[task_index] <= end: assigned_tasks += 1 task_index += 1 return assigned_tasks"},{"question":"Given a matrix of size n × m, you have to find the path from the top-left cell (1, 1) to the bottom-right cell (n, m) such that the product of all the numbers on the path is maximized. You can only move right or down from each cell. Formally, from the cell (i, j), you may move to the cell (i, j + 1) or to the cell (i + 1, j). The target cell can\'t be outside the grid. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the height and the width of the grid. The next n lines contain m integers each, the j-th element in the i-th line is a_{i, j} (1 ≤ a_{i, j} ≤ 100). Output Print one integer — the maximum product of the numbers from (1, 1) to (n, m) following the path constraints. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 2016 Input 2 2 1 99 1 2 Output 198 Note All the paths from the first example: * (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3); * (1, 1) → (2, 1) → (3, 1) → (3, 2) → (3, 3); All possible products from top to bottom-right: * 1 * 2 * 3 * 6 * 9 = 324 * 1 * 4 * 7 * 8 * 9 = 2016 Hence, the maximum product is 2016.","solution":"def max_product_path(matrix): n = len(matrix) m = len(matrix[0]) # Initialize a DP table to store the maximum product up to each cell dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = matrix[0][0] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] * matrix[i][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] * matrix[0][j] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j] * matrix[i][j], dp[i][j-1] * matrix[i][j]) return dp[-1][-1]"},{"question":"Alex enjoys collecting rare coins and stores them in a straight line collection. Each coin has a unique value. Recently, Alex has started experimenting with his collection by rotating subarrays. Alex defines a subarray as any contiguous segment of the coins. Given a list of coin values, Alex wants to know the minimum number of rotations needed to arrange his collection in non-decreasing order. A rotation is defined as moving the last coin of a subarray to the front of that subarray. Write a function `min_rotations_to_sort` that determines the minimum number of subarray rotations required to sort the array in non-decreasing order. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of coins in the collection. - The second line contains `n` integers representing the values of the coins. Each value is unique and between 1 and 10^9. # Output - Output a single integer - the minimum number of rotations needed to sort the array in non-decreasing order. # Example Input ``` 5 4 3 2 5 1 ``` Output ``` 3 ``` Input ``` 5 2 3 4 5 1 ``` Output ``` 1 ``` Explanation In the first example, the array [4, 3, 2, 5, 1] needs 3 rotations: 1. Rotate subarray [4, 3, 2, 5] to get [5, 4, 3, 2, 1] 2. Rotate subarray [5, 4, 3, 2] to get [2, 5, 4, 3, 1] 3. Rotate subarray [2, 5] to get [5, 2, 4, 3, 1] In the second example, the array [2, 3, 4, 5, 1] needs only 1 rotation: 1. Rotate subarray [2, 3, 4, 5] to get [5, 2, 3, 4, 1]","solution":"def min_rotations_to_sort(n, coins): # Find the index where the array is out of order for i in range(n - 1): if coins[i] > coins[i + 1]: index = i break else: # If no such index is found, the array is already sorted. return 0 # Check if the array from index+1 to end to index is sorted if coins[index+1:] + coins[:index+1] == sorted(coins): return 1 # If not just one complete rotation to sort, return 2 as that\'s the only possible next minimum. return 2"},{"question":"John is given a task to manipulate strings. He has a list of N strings and he needs to find the longest common prefix (LCP) among all these strings. The LCP of a set of strings is the longest starting sequence that is common to all the strings in the set. Write a function to help John find this prefix. Input: The first line of input contains an integer N. Then N lines follow, each containing one string. You can assume that the input contains at least one string. Output: Output a single line containing the longest common prefix. If there is no common prefix, output an empty string. Constraints: - 1 ≤ N ≤ 200 - 1 ≤ Length of each string ≤ 1000 - All strings consist of lowercase English letters. SAMPLE INPUT 3 flower flow flight SAMPLE OUTPUT fl","solution":"def longest_common_prefix(strings): Returns the longest common prefix for a list of strings. if not strings: return \\"\\" # Assume the first string as the prefix prefix = strings[0] for s in strings[1:]: # Gradually reduce the prefix size until it matches the current string beginning while not s.startswith(prefix): prefix = prefix[:-1] if prefix == \\"\\": return \\"\\" return prefix"},{"question":"Devise a program that reads a series of datasets and calculates the number of distinct ways to partition a positive integer m (1 <= m <= 100) into a sum of 2 distinct positive integers x and y (x < y). Input Multiple datasets, each containing a single integer m. Process the input until the end of the input. Each dataset does not exceed 100. Output For each dataset, output the number of distinct pairs (x, y) that satisfy x + y = m on a new line. Example Input 5 10 50 Output 2 4 24","solution":"def count_pairs(m): Returns the number of distinct ways to partition a positive integer m into a sum of 2 distinct positive integers x and y (x < y). count = 0 for x in range(1, m // 2 + 1): y = m - x if x < y: count += 1 return count def process_input(datasets): Processes the list of datasets, computes the number of distinct pairs for each dataset. results = [] for m in datasets: results.append(count_pairs(m)) return results"},{"question":"Ahmed is fascinated with strings and their beauty. He defines the beauty of a string as the length of the longest substring in which all characters are distinct. Ahmed wants your help in figuring out the beauty of multiple strings. Given a list of strings, determine the beauty of each string. # Input - The first line contains an integer `t` (1 ≤ t ≤ 100), the number of strings. - The following `t` lines each consist of a string `s` (1 ≤ |s| ≤ 1000), which is the string Ahmed wants to analyze. # Output - For each string, output a single integer: the beauty of the string. # Examples Input ``` 3 abcabcbb bbbbb pwwkew ``` Output ``` 3 1 3 ``` # Explanation 1. For the first string \\"abcabcbb\\", the longest substring with all distinct characters is \\"abc\\", which is of length 3. 2. For the second string \\"bbbbb\\", the longest substring with all distinct characters is \\"b\\", which is of length 1. 3. For the third string \\"pwwkew\\", the longest substring with all distinct characters is \\"wke\\", which is of length 3. Your task is to help Ahmed by writing a function that takes the input of `t` strings and prints out the beauty of each string.","solution":"def longest_unique_substring_length(s): Returns the length of the longest substring with all distinct characters in the given string s. char_index = {} max_length = 0 start = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = i max_length = max(max_length, i - start + 1) return max_length def beauty_of_strings(strings): Returns a list of integers representing the beauty of each string in the input list. return [longest_unique_substring_length(s) for s in strings] # Function to process the input def process_input(t, string_list): return beauty_of_strings(string_list)"},{"question":"You are given an array of integers and a set of update operations. Each update operation involves incrementing a range of elements in the array by a specified value. After performing all the updates, you need to answer multiple queries that ask for the sum of elements within a specific subrange of the array. Input The first line contains two integers n (1 ≤ n ≤ 105) and q (1 ≤ q ≤ 105), where n is the number of elements in the array and q is the number of operations and queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109), representing the initial values of the array. Each of the next q lines contains one of the following types of operations: - 1 l r x: Increment all elements in the range [l, r] by x (1 ≤ l ≤ r ≤ n; 1 ≤ x ≤ 109). - 2 l r: Query the sum of elements in the range [l, r] (1 ≤ l ≤ r ≤ n). Output For each query of type 2, output the sum of elements in the specified range after all operations have been applied. Example Input 5 5 1 2 3 4 5 1 1 3 10 2 1 1 2 1 3 2 3 5 1 2 4 5 2 1 3 Output 11 36 12 56 Explanation Initially, the array is [1, 2, 3, 4, 5]. After the first operation (1 1 3 10), the array becomes [11, 12, 13, 4, 5]. The first query (2 1 1) outputs 11, which is the sum of the range [1, 1]. The second query (2 1 3) outputs 11 + 12 + 13 = 36. The third query (2 3 5) outputs 13 + 4 + 5 = 22. After the fourth operation (1 2 4 5), the array becomes [11, 17, 18, 9, 5]. The fifth query (2 1 3) outputs 11 + 17 + 18 = 46.","solution":"def increment_range(array, l, r, x): Increments all elements in the range [l, r] by x. for i in range(l-1, r): array[i] += x def range_sum(array, l, r): Returns the sum of elements in the range [l, r]. return sum(array[l-1:r]) def process_operations(n, q, array, operations): Processes the operations and returns results for all range_sum queries. results = [] for operation in operations: if operation[0] == 1: _, l, r, x = operation increment_range(array, l, r, x) elif operation[0] == 2: _, l, r = operation results.append(range_sum(array, l, r)) return results"},{"question":"Given is an integer sequence A of length N and an integer K. Your task is to determine if there exists a subsequence of A (not necessarily contiguous) that sums up to K. If there exists such a subsequence, print \\"YES\\". Otherwise, print \\"NO\\". Constraints * 1 leq N leq 20 * 1 leq K leq 1000 * -1000 leq A_i leq 1000 * All values in input are integers. Input Input is given from Standard Input in the following format: N K A_1 A_2 ... A_N Output Print \\"YES\\" if there exists a subsequence of A that sums up to K, otherwise print \\"NO\\". Examples Input 5 9 2 3 7 1 8 Output YES Input 4 5 -1 -2 -3 -4 Output NO Input 6 0 2 -2 3 -3 4 -4 Output YES","solution":"def can_sum_to_k(N, K, A): Check if there exists a subsequence of A that sums up to K. :param N: int, size of the list A :param K: int, target sum :param A: list of int, the sequence :return: str, \\"YES\\" if there exists a subsequence that sums to K, \\"NO\\" otherwise from itertools import chain, combinations # Generate all possible subsequences def all_subsequences(iterable): \\"all_subsequences([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\\" s = list(iterable) return chain.from_iterable(combinations(s, r) for r in range(len(s)+1)) for subseq in all_subsequences(A): if sum(subseq) == K: return \\"YES\\" return \\"NO\\" # Example usage: # N = 5, K = 9, A = [2, 3, 7, 1, 8] # print(can_sum_to_k(N, K, A)) # Output: YES"},{"question":"Given a list of integers representing a series of operations that modify the state of an initially empty stack, you are to implement a program that processes these operations and outputs the results. The operations can either be pushing an integer onto the stack or popping an integer off the stack. The operations are given as follows: 1. \\"push x\\": Push the integer `x` onto the stack. 2. \\"pop\\": Remove the top element from the stack. If the stack is empty, ignore this operation. 3. \\"display\\": Display the current state of the stack from top to bottom. If the stack is empty, output \\"empty\\". Input The first line contains the number of operations `N` (1 ≤ N ≤ 100000). Each of the next `N` lines contains an operation, either \\"push x\\", \\"pop\\", or \\"display\\". Output For each \\"display\\" operation in the input, output the current state of the stack from top to bottom. If the stack is empty at the time of the \\"display\\" operation, output \\"empty\\" instead. Example Input 6 push 3 push 5 push 7 display pop display Example Output: 7 5 3 5 3","solution":"def process_operations(operations): stack = [] results = [] for operation in operations: if operation.startswith(\\"push\\"): _, x = operation.split() stack.append(int(x)) elif operation == \\"pop\\": if stack: stack.pop() elif operation == \\"display\\": if stack: results.append(\\" \\".join(map(str, reversed(stack)))) else: results.append(\\"empty\\") return results # Input operations = [ \\"push 3\\", \\"push 5\\", \\"push 7\\", \\"display\\", \\"pop\\", \\"display\\" ] # Process operations output = process_operations(operations) # Output results for line in output: print(line)"},{"question":"A company has developed a new type of rectangle-shaped light panel called SmartPanel. The SmartPanel can be arranged in a grid, but the grid has certain restrictions: each row or each column of the grid should consist of SmartPanels of the same height or the same width respectively. Given a list of SmartPanels with their dimensions (width and height), determine if you can arrange them in a grid that satisfies the aforementioned restrictions. # Input The input consists of a single dataset given in the following format: ``` n w1 h1 w2 h2 ... wn hn ``` - n (1 ≤ n ≤ 100) is the number of SmartPanels. - Each of the following n lines contains two integers wi and hi (1 ≤ wi, hi ≤ 1000), representing the width and height of the i-th SmartPanel. # Output Print \\"YES\\" if it is possible to arrange the SmartPanels in a grid with all rows having SmartPanels of the same height, and all columns having SmartPanels of the same width. Otherwise, print \\"NO\\". # Example Input ``` 4 5 8 5 8 5 8 5 8 ``` Output ``` YES ``` Input ``` 3 5 8 6 8 5 9 ``` Output ``` NO ``` # Constraints & Considerations 1. You can use brute force, greedy, or any efficient algorithm to solve this problem. 2. Think carefully about how each restriction (same height for rows, same width for columns) affects the layout of the grid. 3. Consider edge cases such as all SmartPanels being identical or completely different dimensions, as well as minimum and maximum values for widths and heights.","solution":"def can_arrange_in_grid(n, dimensions): Determines if SmartPanels can be arranged in a grid that satisfies the restrictions. :param n: Number of SmartPanels :param dimensions: List of tuples with width and height of each SmartPanel :return: \\"YES\\" if possible to arrange in the grid, otherwise \\"NO\\" # Collect all unique widths and heights unique_widths = set() unique_heights = set() for width, height in dimensions: unique_widths.add(width) unique_heights.add(height) # We can only form a grid if there\'s only one unique width or only one unique height if len(unique_widths) == 1 or len(unique_heights) == 1: return \\"YES\\" else: return \\"NO\\""},{"question":"A company organizes data into rows and columns within a table, where each cell at the intersection of a row and a column contains an integer. One operation they often perform is to merge multiple rows into one by summing up the corresponding cell values. However, they only merge rows that consist entirely of odd integers. Given a table with M rows and N columns, find the sum for each column after merging all rows that consist entirely of odd integers. Constraints * All values in input are integers. * 1 leq M, N leq 1000 * -10000 leq each cell value leq 10000 Input The input is given from Standard Input in the following format: M N A_11 A_12 ... A_1N A_21 A_22 ... A_2N ... A_M1 A_M2 ... A_MN Output Print the sum for each column after merging the rows that meet the condition. If no rows meet the condition, print a line of N zeros. Examples Input 3 4 1 3 5 7 2 4 6 8 9 11 13 15 Output 10 14 18 22 Input 2 2 2 4 6 8 Output 0 0","solution":"def merge_odd_rows_sum(matrix): Sums the columns of rows which consist only of odd integers. Args: - matrix: List of lists where each inner list represents a row Returns: - List representing the summed columns of all-odd rows if not matrix: return [] M = len(matrix) N = len(matrix[0]) # Initialize the result array with 0s column_sums = [0] * N for row in matrix: if all(cell % 2 != 0 for cell in row): column_sums = [column_sums[j] + row[j] for j in range(N)] return column_sums"},{"question":"Oliver is playing a game which involves rearranging blocks. He has a sequence of blocks, each block has a letter on it. Oliver can swap any two blocks in the sequence. His goal is to transform the initial sequence of blocks into a target sequence using the minimum number of swaps. The final sequence must contain exactly the same letters as the initial sequence, but in the order of the target sequence. If it\'s impossible to match the target sequence from the initial sequence, return -1. Given an initial string consisting of lowercase English letters and a target string of the same length also consisting of lowercase English letters, determine the minimum number of swaps required to transform the initial string into the target string. If it is not possible, return -1. Input: - The input consists of multiple test cases. - The first line contains an integer t (1 ≤ t ≤ 100) – the number of test cases. - Each of the next 2*t lines contains the initial and target strings for each test case. Both strings have the same length n (1 ≤ n ≤ 1000). Output: - For each test case, print a single integer – the minimum number of swaps required, if it is possible to transform the initial string into the target string. Otherwise, print -1. Example: Input: 3 abc bca ab ba abcd dcba Output: 2 1 2 Explanation: - For the first test case, swap \'a\' with \'b\' and then \'a\' with \'c\' to get \\"bca\\". - For the second test case, swap \'a\' with \'b\' to get \\"ba\\". - For the third test case, swap \'a\' with \'d\' and \'b\' with \'c\' to get \\"dcba\\".","solution":"def min_swaps_to_transform(initial, target): Returns the minimum number of swaps required to transform the initial string into the target string with the same set of characters, or -1 if impossible. # If sorted characters do not match, it\'s impossible if sorted(initial) != sorted(target): return -1 # Helper function to count swaps using bubble sort technique def count_swaps(src, tgt): src = list(src) swaps = 0 for i in range(len(src)): while src[i] != tgt[i]: swap_idx = src.index(tgt[i], i) src[i], src[swap_idx] = src[swap_idx], src[i] swaps += 1 return swaps return count_swaps(initial, target) def multiple_test_cases(t, test_cases): results = [] for i in range(t): initial = test_cases[2 * i] target = test_cases[2 * i + 1] result = min_swaps_to_transform(initial, target) results.append(result) return results"},{"question":"You have been tasked with creating a grid-based simulation for the movements of a robotic cleaner in a room. The robot can move in four directions: Left (L), Right (R), Up (U), and Down (D). However, the movement commands might drive the robot outside the boundaries of the room. To prevent this, you need to compute the robot\'s position after all commands, ensuring that it doesn\'t move out of bounds. **Input:** - The first line of input contains two integers `n` (1 ≤ n ≤ 500) and `m` (1 ≤ m ≤ 500), representing the dimensions of the room (number of rows and columns respectively). - The second line contains two integers `x` and `y` (1 ≤ x ≤ n, 1 ≤ y ≤ m), representing the starting position of the robot (row and column) within the room. - The third line contains an integer `k` (1 ≤ k ≤ 1000), representing the number of movement commands. - The fourth line contains a string of `k` characters, each being one of \'L\', \'R\', \'U\', or \'D\', representing the movement commands. **Output:** - Print two integers representing the final position of the robot within the room after all commands are executed. **Example:** Input: ``` 5 5 2 3 5 LLRRU ``` Output: ``` 1 3 ``` Explanation: Initial position: (2, 3) - Move 1: L (1, 3) - Move 2: L (1, 3) - still at (1, 3) because a move left would go out of bounds. - Move 3: R (1, 4) - Move 4: R (1, 5) - Move 5: U (1, 5) - still at (1, 5) because a move up would go out of bounds. Final position: (1, 5) **Note:** In this example, the robot starts at position (2, 3) in a 5x5 grid. The movements are \'LLRRU\', where two left movements would initially move the robot to (2, 1), but since (2, 0) is out of bounds, the robot remains at the edge (2, 1). The subsequent right movements take it to (2, 3), and finally (2, 4). Attempting to move up pushes the robot out of bounds, so it remains in the same column, thus ending up at (1, 4).","solution":"def move_robot(n, m, x, y, k, commands): Returns the final position of the robot within the boundaries after processing all commands. :param n: int - Number of rows in the room :param m: int - Number of columns in the room :param x: int - Initial row position of the robot :param y: int - Initial column position of the robot :param k: int - Number of commands :param commands: str - A string of commands consisting of \'L\', \'R\', \'U\', \'D\' :return: tuple - Final row and column position of the robot for command in commands: if command == \'L\' and y > 1: y -= 1 elif command == \'R\' and y < m: y += 1 elif command == \'U\' and x > 1: x -= 1 elif command == \'D\' and x < n: x += 1 return (x, y)"},{"question":"Alex has a string s consisting of lowercase letters. He can select any two adjacent characters in the string and remove one of them to form a new string. He performs this operation repeatedly until no more operations can be performed. Alex wants the resulting string to have the smallest possible lexicographical order. Write a program that computes the lexicographically smallest string that Alex can obtain. Input The input consists of one line, which contains the string s (1 ≤ |s| ≤ 10^5). Output Output a single line containing the lexicographically smallest string that Alex can obtain. Constraints 1 ≤ |s| ≤ 10^5 SAMPLE INPUT abacb SAMPLE OUTPUT aab Explanation In the sample case, the original string is \\"abacb\\". Alex can perform the following operations: 1. Remove \'b\' between \'a\' and \'a\', resulting in \\"aacab\\". 2. Remove \'c\' between \'a\' and \'a\', resulting in \\"aaab\\". 3. Remove the second \'a\' between the first \'a\' and \'b\', resulting in \\"aab\\". The lexicographically smallest string Alex can obtain is \\"aab\\".","solution":"def smallest_lexicographical_string(s): Given a string s, repeatedly remove two adjacent characters such that the resultant string is the smallest lexicographically. # The idea is to use a stack to form the result string stack = [] for char in s: # While the stack is not empty and the current character is smaller than the top of the stack, # pop the stack (this simulates the removal of one of the adjacent characters) while stack and stack[-1] > char: stack.pop() stack.append(char) # Join the elements in the stack to form the result string return \'\'.join(stack)"},{"question":"There\'s a circular track with `n` checkpoints numbered from 1 to n. Each checkpoint has an integer value representing the amount of gold found there. A traveler starts at a checkpoint and can move clockwise collecting gold from each checkpoint. The traveler can start at any checkpoint but they must collect gold from every checkpoint they visit at least once before stopping. They have to end the journey right where they started after visiting all checkpoints exactly once. Help the traveler determine the maximum gold they can collect in a single complete circuit of the track starting and ending at the same checkpoint. Input The first line contains an integer `n` (3 ≤ n ≤ 10^5), the number of checkpoints. The second line contains `n` integers `g1, g2, ..., gn` (1 ≤ gi ≤ 10^9), where `gi` is the amount of gold at the i-th checkpoint. Output Print a single integer — the maximum amount of gold the traveler can collect in one complete circuit starting and ending at the same checkpoint. Examples Input 5 10 3 7 9 5 Output 34 Input 3 5 5 5 Output 15 Note In the first example, the traveler can start at checkpoint 1, collect 10, then at 2 collect 3, at 3 collect 7, at 4 collect 9, at 5 collect 5, making the total gold collected 10 + 3 + 7 + 9 + 5 = 34. In the second example, the traveler can start at any checkpoint as they all have the same amount of gold, hence the total collected will be 5 + 5 + 5 = 15.","solution":"def max_gold(n, gold_values): Returns the maximum amount of gold the traveler can collect in one complete circuit starting and ending at the same checkpoint. :param n: int - the number of checkpoints :param gold_values: list of int - gold values at each checkpoint :return: int - the maximum amount of gold collected # Since the traveler can start from any checkpoint, the sum of all gold values will be the maximum gold collected return sum(gold_values)"},{"question":"A city has N houses connected by M roads. Each road has a certain maintenance cost associated with it. The city planner wants to minimize the total maintenance cost of the roads while ensuring that all houses remain connected. You need to identify which roads should be maintained and which can be removed such that the total maintenance cost is as low as possible, while still ensuring that there exists a path between every pair of houses. In other words, you need to find the Minimum Spanning Tree (MST) of the network represented by the houses and roads. Input: - The first line contains two integers N and M (1 ≤ N ≤ 1000, 1 ≤ M ≤ 10000) — the number of houses and the number of roads. - Each of the next M lines contains three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10000) — indicating there is a road between house u and house v with a maintenance cost of w. Output: - Print a single integer — the minimum total maintenance cost to keep all houses connected. Examples: Input: ``` 4 5 1 2 10 1 3 6 2 3 5 3 4 4 2 4 7 ``` Output: ``` 15 ``` Input: ``` 3 3 1 2 1 2 3 2 1 3 3 ``` Output: ``` 3 ``` Note: In the first example, one of the solutions is to select the roads with maintenance costs 6, 5, and 4 (for a total cost of 15). This ensures all houses are connected with the minimum possible cost.","solution":"def minimum_spanning_tree_cost(N, M, roads): def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 roads.sort(key=lambda x: x[2]) parent = list(range(N)) rank = [0] * N total_cost = 0 edges_used = 0 for u, v, w in roads: u -= 1 v -= 1 if find(parent, u) != find(parent, v): union(parent, rank, u, v) total_cost += w edges_used += 1 if edges_used == N - 1: break return total_cost"},{"question":"Alice is building a security system that only grants access when a correct password sequence is detected within an entered string. A correct password sequence is composed of the following conditions: 1. The sequence must start with a prime number with exactly 3 digits (for example, 101, 103, etc.). 2. The sequence directly follows with any single lowercase English letter (a-z). 3. It ends with a palindrome of any length (1 to 10 characters). Write a program that determines the number of correct password sequences that can be found in a given string. Leading zeros in numbers are not allowed, and each digit of the number must be part of the three digits (prime number). Overlapping sequences should be counted separately as long as they meet the criteria. Input The input contains a sequence of lines, each of which contains a string of less than or equal to 80000 characters. The string consists of digits (0-9) and lowercase English letters (a-z). The end of the input is indicated by a line containing a single 0, which should not be processed. Output For each input string, output a line containing the number of correct password sequences. Example Input hello101acomputer313ycaraccon135bobara 111111helloabcefg 0 Output 2 0 Explanation In the first input line, the following sequences meet the criteria: 101ac (101 is a prime number, \'a\' is a letter, and \'c\' is a palindrome) 313ycarac (313 is a prime number, \'y\' is a letter, and \'carac\' is a palindrome) The second input line does not contain any sequence that meets the criteria.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindrome(s): Returns True if s is a palindrome, False otherwise. return s == s[::-1] def find_valid_sequences(s): Returns the number of valid sequences in the string s. A valid sequence is composed of: - A prime number with exactly 3 digits - Followed by a single lowercase English letter - Ends with a palindrome of any length (1 to 10 characters) count = 0 length = len(s) for i in range(length - 4): # Minimum length for the sequence is 5 (3 digits, 1 char, 1 palindrome) # Check if there\'s a 3-digit number starting at i if s[i:i+3].isdigit() and s[i] != \'0\': number = int(s[i:i+3]) if is_prime(number): if s[i+3].isalpha() and i+4 < length: for j in range(1, 11): # Palindrome length from 1 to 10 if i+4+j <= length and is_palindrome(s[i+4:i+4+j]): count += 1 # If finding one valid sequence, break to avoid counting same start point multiple times break return count def process_input(input_lines): results = [] for line in input_lines: if line.strip() == \\"0\\": break results.append(find_valid_sequences(line.strip())) return results"},{"question":"Given an array of integers, find the maximum absolute difference between any two elements in the array. Input Format: First line contains a single integer n, the number of elements in the array. The next line contains n space-separated integers representing the elements of the array. Output Format: Output a single integer, the maximum absolute difference between any two elements in the array. Constraints: 1 ≤ n ≤ 100 -1000 ≤ array[i] ≤ 1000 SAMPLE INPUT 5 1 5 9 -10 3 SAMPLE OUTPUT 19","solution":"def max_absolute_difference(arr): Returns the maximum absolute difference between any two elements in an array. min_elem = min(arr) max_elem = max(arr) return abs(max_elem - min_elem) # Example usage # n, arr = 5, [1, 5, 9, -10, 3] # print(max_absolute_difference(arr)) # Should output 19"},{"question":"In an enchanted forest, there are a set of magical trees arranged in a line. Each tree has a certain amount of magical energy which can be represented as an integer value, and can be either positive or negative. The forest wizard wants to know the maximum amount of magical energy that can be collected by visiting a contiguous subarray of these trees. A contiguous subarray of a given array is defined as a segment of consecutive elements. The wizard can visit a subarray starting at any tree and ending at any tree, including the possibility of visiting the entire line of trees. You need to help the wizard by writing a program that calculates the maximum sum of magical energy that can be collected from any contiguous subarray of the given array of magical energies. Input The first line of input contains an integer n (1 ≤ n ≤ 100000), the number of trees in the forest. The following line contains n integers separated by spaces, where each integer a_i (-1000 ≤ a_i ≤ 1000) represents the amount of magical energy in the ith tree. Output Print a single integer, the maximum sum of magical energy that can be collected from any contiguous subarray of the given array. Examples Input 5 1 -3 2 1 -1 Output 3 Input 6 -2 -3 4 -1 -2 1 5 -3 Output 7 Note In the first example, the maximum sum of magical energy is obtained by visiting the subarray [2, 1], which sums up to 3. In the second example, the maximum sum of magical energy is obtained by visiting the subarray [4, -1, -2, 1, 5], which sums up to 7.","solution":"def max_subarray_sum(arr): Finds and returns the maximum sum of a contiguous subarray. Parameters: arr (list): List of integers representing magical energy of the trees Returns: int: Maximum sum of a contiguous subarray max_current = max_global = arr[0] for number in arr[1:]: max_current = max(number, max_current + number) if max_current > max_global: max_global = max_current return max_global # Function to read input and pass it to the main function for calculating the result. def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) print(max_subarray_sum(arr))"},{"question":"Alice has found a board that consists of both occupied (\\"#\\") and empty (\\".\\") cells, and she realizes that there is a pattern present in the board. Each pattern is composed of at least two consecutive vertical empty cells and three consecutive horizontal empty cells, forming a structure that can be represented as follows: **.** **.** . . . She wants to determine if this pattern can appear at least once in the board\'s arrangement. Please write a program to help Alice find out if the pattern appears in the given board. Input The first line of the input contains a single integer n (3 ≤ n ≤ 50) — the size of the board. The following n lines describe the board. The i-th line (1 ≤ i ≤ n) contains a single string of length n. Its j-th character (1 ≤ j ≤ n) is equal to \\".\\" if the cell in the i-th row and the j-th column is free; it is equal to \\"#\\" if it\'s occupied. Output Output YES if the pattern can be found on the board, or NO otherwise. Examples Input 5 # #....# #.#.#. .. # Output YES Input 6 #....# .... .... #....# Output YES Input 4 .. Output NO","solution":"def pattern_exists(n, board): for i in range(n - 1): for j in range(n - 2): if board[i][j] == \'.\' and board[i + 1][j] == \'.\' and board[i][j + 1] == \'.\' and board[i][j + 2] == \'.\': return \'YES\' for i in range(n - 1): for j in range(n - 2): if board[j][i] == \'.\' and board[j + 1][i] == \'.\' and board[j][i + 1] == \'.\' and board[j][i + 2] == \'.\': return \'YES\' return \'NO\'"},{"question":"You are given a list of integers representing the heights of some buildings. A building is visible if it is taller than all the buildings to its left. Write a program that returns the list of indices of visible buildings from left to right. Input: The first line contains a single integer N, the number of buildings. The second line contains N integers, the heights of the buildings. Output: Print the indices of the visible buildings. Constraints: 1 ≤ N ≤ 10^5 1 ≤ height of each building ≤ 10^9 SAMPLE INPUT 7 4 2 3 6 1 5 7 SAMPLE OUTPUT 0 3 6 Explanation From the given heights: - Building at index 0 (height 4) is visible as there are no buildings to its left. - Building at index 1 (height 2) is not visible as it is shorter than the building at index 0. - Building at index 2 (height 3) is not visible as it is shorter than the building at index 0. - Building at index 3 (height 6) is visible as it is taller than the one at index 0. - Building at index 4 (height 1) is not visible as it is shorter than the building at index 3. - Building at index 5 (height 5) is not visible as it is shorter than the building at index 3. - Building at index 6 (height 7) is visible as it is taller than the building at index 3.","solution":"def visible_buildings_indices(n, heights): visible_indices = [] max_height = -1 for i in range(n): if heights[i] > max_height: visible_indices.append(i) max_height = heights[i] return visible_indices"},{"question":"Given an n x m grid filled with integers, you are tasked with determining the maximum sum of all elements in any subgrid. A subgrid is defined by its top-left corner (r1, c1) and bottom-right corner (r2, c2), where 1 ≤ r1 ≤ r2 ≤ n and 1 ≤ c1 ≤ c2 ≤ m. To efficiently solve the problem, you\'ll preprocess the grid to create an auxiliary sum matrix. Then, for each query, you\'ll be able to quickly calculate subgrid sums. Write a program to handle the following: Input: 1. The first line contains two integers n and m (1 ≤ n, m ≤ 1000). 2. The next n lines contain m integers each, representing the grid. Output: Print the maximum sum that can be obtained from any subgrid. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 45 Explanation: The entire grid is the subgrid with the maximum sum, which is 45. In this case, selecting subgrid from (1, 1) to (3, 3).","solution":"def max_subgrid_sum(n, m, grid): Returns the maximum sum of all elements in any subgrid of the given n x m grid. # Create the prefix sum array prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] # Populate the prefix sum array for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = ( grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] ) max_sum = float(\'-inf\') # Evaluate every subgrid using the prefix sums for r1 in range(1, n+1): for r2 in range(r1, n+1): for c1 in range(1, m+1): for c2 in range(c1, m+1): subgrid_sum = ( prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1] ) max_sum = max(max_sum, subgrid_sum) return max_sum"},{"question":"In a distant land, there exists a peculiar tree called the \\"Transformation Tree\\". This tree is a rooted tree with N vertices (labeled from 1 to N), where the vertex 1 is the root. Each vertex of the tree has a value assigned to it initially. The tree offers certain operations to transform its values. The operations are defined as follows: 1. **Additive Operation**: Add a given value v to all vertices in a specified subtree rooted at vertex u. 2. **Query Operation**: Retrieve the current value of a given vertex u. Your task is to implement a system that can handle a sequence of such operations efficiently. # Input The input consists of multiple lines: - The first line contains two integers N (1 leq N leq 10^5) and Q (1 leq Q leq 10^5), the number of vertices and the number of operations, respectively. - The second line contains N integers, where the i-th integer represents the initial value of the i-th vertex. - The next N-1 lines each contain two integers u and v (1 leq u, v leq N) indicating there is an edge between vertex u and vertex v. - The following Q lines represent the operations. Each operation is of one of the following forms: * `1 u v` - Perform an additive operation where the value v is added to all vertices in the subtree of vertex u. * `2 u` - Perform a query operation to retrieve the current value of vertex u. # Output For each query operation, output the result on a new line. # Example Input ``` 5 5 1 2 3 4 5 1 2 1 3 2 4 2 5 1 2 10 2 4 1 1 5 2 5 2 3 ``` Output ``` 14 11 8 ``` # Explanation 1. Initial values at the vertices: [1, 2, 3, 4, 5] 2. Perform `1 2 10`, subtree rooted at vertex 2 includes vertices [2, 4, 5]. Updated values: [1, 12, 3, 14, 15] 3. Perform `2 4`, output the value at vertex 4 which is 14. 4. Perform `1 1 5`, entire tree is updated. New values: [6, 17, 8, 19, 20] 5. Perform `2 5`, output the value at vertex 5 which is 20. 6. Perform `2 3`, output the value at vertex 3 which is 8.","solution":"class TransformationTree: def __init__(self, N, values, edges): self.N = N self.values = values self.edge_list = edges self.tree = [[] for _ in range(N + 1)] self.subtree_values = [0] * (N + 1) self.entry = [0] * (N + 1) self.exit = [0] * (N + 1) self.curr_time = 1 for u, v in edges: self.tree[u].append(v) self.tree[v].append(u) self._dfs(1, -1) def _dfs(self, node, parent): self.entry[node] = self.curr_time self.curr_time += 1 for child in self.tree[node]: if child != parent: self._dfs(child, node) self.exit[node] = self.curr_time def _range_update(self, bit, idx, delta): while idx <= self.N: bit[idx] += delta idx += idx & -idx def _prefix_sum(self, bit, idx): result = 0 while idx > 0: result += bit[idx] idx -= idx & -idx return result def add_to_subtree(self, u, value): self._range_update(self.subtree_values, self.entry[u], value) self._range_update(self.subtree_values, self.exit[u], -value) def query_value(self, u): return self.values[u - 1] + self._prefix_sum(self.subtree_values, self.entry[u]) def process_operations(N, Q, values, edges, operations): tree = TransformationTree(N, values, edges) results = [] for operation in operations: if operation[0] == 1: u, value = operation[1], operation[2] tree.add_to_subtree(u, value) elif operation[0] == 2: u = operation[1] results.append(tree.query_value(u)) return results"},{"question":"You\'re given a list of students along with the subjects they\'ve chosen and their corresponding scores. Your task is to determine the top student for each subject based on the scores provided. Input The first line of the input contains an integer T, denoting the number of test cases. The first line of each test case consists of an integer n, the number of students. The following n lines each consist of two strings and an integer: the student\'s name, the subject they have chosen, and their score in that subject. Output For each test case, output a list of subjects followed by the name of the top student for that subject, who has the highest score. In case of a tie (multiple students with the same highest score), return the student whose name comes first lexicographically. The subjects in the output should be sorted lexicographically. Constraints 1 ≤ T ≤ 10 1 ≤ n ≤ 100 1 ≤ score ≤ 100 Example Input: 1 5 Alice Math 90 Bob Physics 85 Charlie Math 92 David Physics 88 Eve Math 92 Output: Math: Charlie Physics: David","solution":"def find_top_students(test_cases): output = [] for case in test_cases: student_scores = case subject_top_student = {} for student in student_scores: name, subject, score = student if subject not in subject_top_student: subject_top_student[subject] = (name, score) else: top_student, top_score = subject_top_student[subject] if score > top_score or (score == top_score and name < top_student): subject_top_student[subject] = (name, score) sorted_subjects = sorted(subject_top_student.keys()) result = [] for subject in sorted_subjects: result.append(f\\"{subject}: {subject_top_student[subject][0]}\\") output.append(result) return output"},{"question":"Riley is organizing a music festival and needs to ensure a balanced distribution of artists across different genres. However, the organizers have specific preferences regarding the distribution of genres over the different stages. They have m stages, where the i-th stage needs a specific number of artists from g specific genres. Given n artists, each with their preferred genre, can you determine whether it is possible to organize the artists according to the requirements for each stage? Input The first line contains two integers n and m (1 ≤ n, m ≤ 50), the number of artists and the number of stages, respectively. The next line contains n integers, indicating the preferred genre of each artist. Each genre is represented by an integer ranging from 1 to 10. Following this, m lines are provided. Each line describes a stage in two parts: the first part is the number of required artists k (1 ≤ k ≤ n) for that stage, followed by k integers representing the required genres for those artists. Output If it is possible to organize the artists according to the stage requirements, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 5 2 1 2 3 4 5 3 1 2 3 2 4 5 Output YES Input 4 2 1 1 2 2 3 1 1 2 2 2 3 Output NO Note In the first test case, there are 5 artists, each with a unique genre. The two stages require: - Stage 1: 3 artists from genres 1, 2, and 3 - Stage 2: 2 artists from genres 4 and 5 It is possible to organize the artists to meet these requirements. In the second test case, there are 4 artists, with genres 1 and 2. The two stages require: - Stage 1: 3 artists from genres 1, 1, and 2 - Stage 2: 2 artists from genres 2 and 3 It is not possible because we don\'t have enough artists with the required genres to fulfill both stage requirements.","solution":"def can_organize_artists(n, m, artists_genres, stages_requirements): from collections import Counter, defaultdict # Count how many artists are available in each genre genre_count = Counter(artists_genres) for stage in stages_requirements: k = stage[0] required_genres = stage[1:] # Count how many artists are needed for each genre for the current stage stage_genre_count = Counter(required_genres) # Check if we have enough artists for each required genre for genre, count in stage_genre_count.items(): if genre_count[genre] < count: return \\"NO\\" # Consume the artists for this stage genre_count[genre] -= count return \\"YES\\""},{"question":"You are organizing an online chess tournament, where participants challenge each other in 1v1 matches. Each player has a unique Elo rating, a number which represents their skill level in chess. After each match, the winner\'s Elo rating increases and the loser\'s decreases, though no details on the exact update formula need to be computed for this problem. For preparation, you want to analyze the matches that took place and verify a few points: - If all matches have been reported correctly. - If any player has conflicting match outcomes, such as winning and losing against the same opponent. You need to write a program that checks the integrity of the match results. Input The first line contains an integer n, the number of matches that took place. Each of the next n lines describes a match result with two player names and the result, separated by space. The player names are strings of at most 50 characters consisting of lowercase English letters, and the result is either \\"win\\" or \\"lose\\". Specifically, a line like \\"alice bob win\\" indicates that Alice won against Bob. Note that if \\"alice bob win\\" is valid, then \\"bob alice lose\\" must also be valid if it appears later. Output The program should output \\"Valid\\" if all matches have been reported correctly and consistently. If any inconsistency is found, output \\"Invalid\\". Example Input 5 alice bob win bob charlie win charlie alice lose alice dave win dave alice lose Output Invalid In this example, Alice winning against Charlie and Charlie winning against Alice creates a conflict, rendering the match record invalid.","solution":"def check_matches(matches): Check if all matches have been reported correctly and consistently. :param matches: List of strings, where each string represents a match result. :return: \\"Valid\\" if all matches are consistent, \\"Invalid\\" otherwise. results = {} for match in matches: player1, player2, result = match.split() if result == \\"win\\": match_result = (player1, player2) else: match_result = (player2, player1) if match_result in results: if results[match_result] != result: return \\"Invalid\\" else: results[match_result] = result return \\"Valid\\""},{"question":"You are given a string consisting of digits and a positive integer k. Your task is to remove exactly k digits from the string so that the new string formed is the smallest possible. The order of the remaining digits must stay the same. Input The first line of input contains the string of digits, and the second line contains the integer k. Output Output in a single line the smallest possible number formed after removing exactly k digits. Constraints 1 ≤ length of string ≤ 10^5 1 ≤ k < length of string SAMPLE INPUT 1432219 3 SAMPLE OUTPUT 1219","solution":"def remove_k_digits(num, k): Removes exactly k digits from the string \'num\' to form the smallest possible number. stack = [] for digit in num: while k > 0 and stack and stack[-1] > digit: stack.pop() k -= 1 stack.append(digit) # If k is still greater than 0, remove the last k digits from the stack final_stack = stack[:-k] if k else stack # Convert list to string and strip leading zeroes return \'\'.join(final_stack).lstrip(\'0\') or \'0\'"},{"question":"In a faraway land, there exists a grid of dimensions n x n, consisting of cells. Each cell can either be empty (represented by a \'.\') or contain an obstacle (represented by an \'X\'). You, as the brave knight, can move through this grid, starting from the top-left corner (1,1) to the bottom-right corner (n,n). However, you can only move either right or down at each step. Unfortunately, as you move through the grid, certain cells may magically transform into obstacles. The number of such transformations that can occur in each cell is pretixed as an array, T, where T[i][j] represents how many times the cell (i,j) can transform into an obstacle. If a cell has transformed the maximum number of times, the knight can no longer pass through it. Your task is to determine the maximum number of transformations that can occur in any cell on the path from top-left to bottom-right such that there still exists a valid path from the starting position to the target position. If it\'s not possible to reach the bottom-right corner from the top-left corner, return -1. Input The first line contains an integer n (2 ≤ n ≤ 50), the size of the grid. Each of the next n lines contains n characters, either \'.\' or \'X\', describing the grid. The following n lines contain n integers each, representing the array T where each integer T[i][j] (0 ≤ T[i][j] ≤ 100) specifies the maximum allowable transformations. Output Print a single integer — the maximum number of transformations that can occur in any cell on the path while still allowing a valid path from the top-left to the bottom-right. Example Input 4 .... .X.. ..X. .... 0 0 1 1 0 1 0 0 0 1 0 0 0 0 1 1 Output 0 Note In the example provided, even though there are cells that can transform multiple times, no single cell can undergo a transformation while maintaining a valid path. Therefore, the maximum number of transformations is 0.","solution":"def max_transformations(grid, T): n = len(grid) # dp table to store the maximum number of transformations we can meet at each cell dp = [[-1] * n for _ in range(n)] # Base case dp[0][0] = T[0][0] if grid[0][0] == \'.\' else -1 # DP computation for i in range(n): for j in range(n): if grid[i][j] == \'X\': dp[i][j] = -1 continue if i > 0 and dp[i-1][j] != -1: dp[i][j] = max(dp[i][j], min(dp[i-1][j], T[i][j])) if j > 0 and dp[i][j-1] != -1: dp[i][j] = max(dp[i][j], min(dp[i][j-1], T[i][j])) return dp[-1][-1] # Function to parse the input and call max_transformations function def solve(n, grid, T): result = max_transformations(grid, T) return result"},{"question":"```markdown Given a string S containing only lowercase alphabets. You have to determine the minimum number of characters to delete to make S a palindrome. A palindrome is a string that reads the same backward as forward. Note: - You must delete characters to get the resulting string as the longest possible palindrome. - The original order of characters must be preserved. Input: First line contains a single integer T, the number of test cases. Each test case contains a single line with a string S. Output: For each test case, print the minimum number of deletions required to achieve the longest possible palindrome. Constraints: 1 ≤ T ≤ 10 1 ≤ |S| ≤ 1000 SAMPLE INPUT 2 abcbdda geeksforgeeks SAMPLE OUTPUT 2 8 ```","solution":"def longest_palindromic_subsequence_length(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def min_deletions_to_make_palindrome(s): lps_length = longest_palindromic_subsequence_length(s) return len(s) - lps_length def process_test_cases(test_cases): results = [] for s in test_cases: results.append(min_deletions_to_make_palindrome(s)) return results # Example usage: # T = 2 # test_cases = [\\"abcbdda\\", \\"geeksforgeeks\\"] # Expected Output: [2, 8] def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = data[1:T+1] results = process_test_cases(test_cases) for result in results: print(result) # This helper function (main) is used to read inputs directly from standard input, # which is useful for competitive programming environments. For unit testing, # test functions should be used."},{"question":"Olivia loves working with sequences of numbers. She recently learned about Fibonacci numbers and decided to pose a challenge for her friend, Sam. She asks Sam to write a computer program that generates the Fibonacci sequence up to the N-th number and prints each number on a new line. Fibonacci sequence is defined as: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2), for n > 1 Sam\'s task is to implement this sequence generation. Can you help him? Input The input consists of a single integer N. Output Output the first N numbers in the Fibonacci sequence, each on a new line. Constraints 1 <= N <= 30 Input: 5 Output: 0 1 1 2 3","solution":"def generate_fibonacci(n): Generates the first n Fibonacci numbers and returns them as a list. :param n: Number of Fibonacci numbers to generate :return: List of first n Fibonacci numbers if n < 1: return [] fibonacci_sequence = [] a, b = 0, 1 for i in range(n): fibonacci_sequence.append(a) a, b = b, a + b return fibonacci_sequence"},{"question":"Magic Squares Checker A magic square is a grid of numbers where the numbers in each row, column, and the main diagonals all add up to the same value. Your task is to determine if a given series of grids are magic squares. Each grid is guaranteed to be square (i.e., the number of rows is equal to the number of columns). Input The input consists of multiple datasets. Each dataset is represented in the following format: > N > a11 a12 ... a1N > a21 a22 ... a2N > ... > aN1 aN2 ... aNN The first row of the dataset contains the integer N, which represents the size of the grid (the number of rows and columns). Each of the following N rows contains N integers aij, where aij is the number in the ith row and jth column of the grid. The value 1 ≤ N ≤ 100 and 1 ≤ aij ≤ 10,000. The end of the input is represented by a single zero line. Output For each dataset, output \\"YES\\" if the grid is a magic square, and \\"NO\\" otherwise. Sample Input ``` 3 8 1 6 3 5 7 4 9 2 4 16 2 3 13 5 11 10 8 9 7 6 12 4 14 15 1 3 5 3 4 1 5 9 6 7 2 0 ``` Sample Output ``` YES YES NO ``` Explanation - The first grid is a magic square as all rows, columns, and diagonals sum up to 15. - The second grid is also a magic square as all rows, columns, and diagonals sum up to 34. - The third grid is not a magic square.","solution":"def is_magic_square(grid): Determines if the given grid is a magic square. :param grid: List of lists representing the grid. :return: True if the grid is a magic square, False otherwise. n = len(grid) if n == 0: return False expected_sum = sum(grid[0]) # Check rows for row in grid: if sum(row) != expected_sum: return False # Check columns for col in range(n): if sum(grid[row][col] for row in range(n)) != expected_sum: return False # Check main diagonal if sum(grid[i][i] for i in range(n)) != expected_sum: return False # Check secondary diagonal if sum(grid[i][n - 1 - i] for i in range(n)) != expected_sum: return False return True def process_grids(datasets): Process the datasets to determine if each grid is a magic square. :param datasets: List of datasets where each dataset is a grid. :return: List of strings either \\"YES\\" or \\"NO\\" for each dataset. results = [] for grid in datasets: if is_magic_square(grid): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a program that reads an integer array and an integer k from the input, and then outputs the maximum sum of k consecutive elements in the array. If k is greater than the length of the array, the output should be 0. Input: The first line contains two integers: n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ 1000), separated by a space. The second line contains n integers representing the elements of the array, separated by spaces. Output: Output a single integer representing the maximum sum of k consecutive elements in the array. Example: Input: 5 3 1 2 3 4 5 Output: 12 Explanation: In the example above, the maximum sum of 3 consecutive elements is obtained with the subarray [3, 4, 5], which sums to 12.","solution":"def max_sum_of_k_consecutive_elements(n, k, array): Returns the maximum sum of k consecutive elements in the array. If k is greater than the length of the array, returns 0. if k > n: return 0 # Initialize the max_sum with the sum of first k elements max_sum = sum(array[:k]) current_sum = max_sum # Use sliding window to find maximum sum of k consecutive elements for i in range(n - k): current_sum = current_sum - array[i] + array[i + k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a sequence of N books arranged in a row from left to right. Each book is a dictionary with different editions. The edition of the i-th book from the left (1 leq i leq N) is given to you as an integer d_i. You can perform the following operations any number of times in order to achieve a strictly increasing sequence of editions: * Choose two books (not necessarily adjacent) and swap them. * Replace one book with another book of any edition. What is the minimum number of operations needed to make the sequence of books strictly increasing in terms of their editions? Constraints * 1 leq N leq 100000 * 1 leq d_i leq 100000 Input Input is given from Standard Input in the following format: N d_{1} d_{2} ... d_{N} Output Print an integer representing the minimum number of operations needed. Examples Input 5 3 5 2 6 4 Output 2 Input 4 1 2 3 4 Output 0 Input 3 3 2 1 Output 2","solution":"def min_operations_to_increasing_sequence(N, editions): Returns the minimum number of operations needed to make the sequence of book editions strictly increasing. Args: N: int - the number of books editions: list of int - the editions of each book Returns: int - the minimum number of operations from bisect import bisect_left # The smallest position where each element can be added to get LIS def longest_increasing_subsequence(arr): lis = [] for x in arr: pos = bisect_left(lis, x) # If x is greater than any element in lis if pos == len(lis): lis.append(x) else: lis[pos] = x return len(lis) # Length of the Longest Increasing Subsequence LIS_length = longest_increasing_subsequence(editions) # Minimum number of operations needed to make the sequence strictly increasing return N - LIS_length"},{"question":"On a certain alien planet, there is a new board game that has gained immense popularity. The game consists of an n x n grid, and each cell in the grid contains a number. The objective of the game is to move from the top-left corner of the grid to the bottom-right corner, collecting the maximum points possible. However, there are certain rules for movement: 1. You can move only to the right or down from the current cell. 2. You must collect points from each cell you visit. Given the grid with point values, write a program to find the maximum points that can be collected by any path from the top-left corner to the bottom-right corner. Input The first line contains a single integer n (2 ≤ n ≤ 1000), representing the size of the grid. The next n lines each contain n integers separated by spaces, where each integer represents the points in that cell (0 ≤ points ≤ 100). Output Print the maximum points that can be collected. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 29 Input 2 1 2 3 4 Output 8 Note In the first example, one of the optimal paths is to move right, right, down, down. The points collected will be 1 + 2 + 3 + 6 + 9 = 21. In the second example, the optimal path is to move right, down, collecting points 1 + 2 + 4 = 7. (Note: The output in the example included in the note seems incorrect. The correct path should be right, down, down, gathering 1 + 2 + 6 + 9 = 18)","solution":"def max_points_on_board(n, grid): Given a grid of n x n with point values, find the maximum points that can be collected in any path from top-left to bottom-right corner moving only right or down. # Initialize a 2D dp array with the same dimensions as the grid dp = [[0]*n for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row and the first column for i in range(1, n): dp[0][i] = dp[0][i-1] + grid[0][i] dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will have the maximum points collected return dp[n-1][j] # Sample input n1 = 3 grid1 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] n2 = 2 grid2 = [ [1, 2], [3, 4] ] print(max_points_on_board(n1, grid1)) # Expected output: 29 print(max_points_on_board(n2, grid2)) # Expected output: 8"},{"question":"There is a square grid of size `n x n` representing a city layout. Each cell in the grid can either be an empty land (represented by \'.\'), a house (represented by \'H\'), or a park (represented by \'P\'). The residents of the city want to be able to reach a park from any house by walking only through empty lands and houses. You are to determine the minimum number of parks that need to be added so that every house can reach at least one park. Input The first line of the input contains an integer n (1 ≤ n ≤ 100) — the size of the grid. The next n lines each contain a string of length n which represents the city layout. Output Output a single integer — the minimum number of parks that need to be added. Examples Input 3 H.. .H. ..H Output 1 Input 4 HHHH H.PH H.PH HHPH Output 0 Input 5 H.H.H ..... HHHH. ..... H.H.H Output 1 Note In the first example, adding one park at cell (1, 1) makes it possible for all houses to reach a park. In the second example, no additional parks are needed as all houses can reach existing parks. In the third example, adding a park at cell (2, 2) makes it possible for all houses to reach a park.","solution":"from collections import deque def min_parks_needed(n, city_grid): def bfs(start): queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited: if city_grid[nx][ny] == \'P\': return True if city_grid[nx][ny] == \'.\' or city_grid[nx][ny] == \'H\': visited.add((nx, ny)) queue.append((nx, ny)) return False houses = [(i, j) for i in range(n) for j in range(n) if city_grid[i][j] == \'H\'] parks = [(i, j) for i in range(n) for j in range(n) if city_grid[i][j] == \'P\'] if not houses: # No houses to check return 0 if parks and all(bfs(house) for house in houses): return 0 return 1 # minimal solution assumes adding one park, needs more sophisticated coverage check for larger grids"},{"question":"Given an integer `n`, write a function that returns a matrix representing a spiral order of numbers from 1 to n^2. The matrix should start from 1 at the top-left and continue in a clockwise direction until it fills the n x n grid. Constraints: * n is an integer such that 1 ≤ n ≤ 20. Input The input consists of a single integer, `n`. Output The output is a list of lists (matrix) of integers in spiral order. Example Input 3 Output [[1, 2, 3], [8, 9, 4], [7, 6, 5]]","solution":"def generateSpiralMatrix(n): Generate a n x n matrix in spiral order. matrix = [[0]*n for _ in range(n)] left, right, top, bottom = 0, n - 1, 0, n - 1 num = 1 while left <= right and top <= bottom: # Traverse from left to right for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 # Traverse from top to bottom for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 if top <= bottom: # Traverse from right to left for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 if left <= right: # Traverse from bottom to top for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Imagine you are working as a network administrator, and you have a task to ensure that the network remains operational even in the case of cable failures. The network is represented as a graph with N nodes and M undirected edges. In this problem, you are required to find out how many redundant connections are present in the network. A redundant connection is an edge that, when removed, does not increase the number of connected components in the graph. You need to write a program to determine the number of redundant connections in the graph. Input Format: The first line of input contains two integers N and M, the number of nodes and the number of edges respectively. Each of the next M lines contains two integers u and v, denoting an edge between nodes u and v. Output Format: Output a single integer, the number of redundant connections in the network. Constraints: 1 ≤ N ≤ 1000 0 ≤ M ≤ 2000 1 ≤ u, v ≤ N Note: - The graph may not be connected. - There are no self-loops. SAMPLE INPUT 5 5 1 2 1 3 2 3 3 4 4 5 SAMPLE OUTPUT 1 Explanation: In this example, there are 5 nodes and 5 edges in the graph. The edge between nodes 2 and 3 is redundant because even if it is removed, the graph remains connected. Therefore, the number of redundant connections is 1.","solution":"def find_redundant_connections(N, M, edges): parent = list(range(N+1)) rank = [1] * (N+1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 return False return True redundant_count = 0 for u, v in edges: if union(u, v): redundant_count += 1 return redundant_count"},{"question":"You are given an integer array `nums` and you need to determine if it is possible to partition the array into two subsets such that the sum of elements in both subsets is equal. Write a function `canPartition(nums)` that accepts an array of integers as input and returns a boolean indicating whether the array can be partitioned into two subsets with equal sum. Input - An integer array `nums` where 1 ≤ length of nums ≤ 200 and 1 ≤ nums[i] ≤ 100. Output Return `True` if the array can be partitioned into two subsets with equal sum, otherwise return `False`. Examples Input [1, 5, 11, 5] Output True Input [1, 2, 3, 5] Output False Note In the first sample, the array can be partitioned as [1, 5, 5] and [11], where both subsets have a sum of 11. In the second sample, there is no way to partition the array into two subsets with equal sum. Hints - Calculate the total sum of the array. If it is odd, it\'s not possible to partition the array into two subsets with equal sum. - Use dynamic programming to determine if there is a subset of the given array with sum equal to half of the total sum. Function Signature ```python def canPartition(nums: List[int]) -> bool: # Your code here ```","solution":"from typing import List def canPartition(nums: List[int]) -> bool: total_sum = sum(nums) # If the total sum is odd, we cannot partition into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Create a DP array to store whether a particular sum is possible dp = [False] * (target + 1) dp[0] = True # A sum of 0 is always possible for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"There is a library system that needs your help in managing book lending. Each book has a unique book ID and there can be multiple copies of the same book. Users can borrow and return books, but the library would like to keep track of how many copies of each book are currently available and how many total copies there are. Your task is to design a system that handles the following operations: 1. Add new books to the library. This adds a certain number of copies of a book to the inventory. 2. Borrow a book. This decreases the number of available copies of a book if there are any available. 3. Return a book. This increases the number of available copies of a book. 4. Query the availability of a book. This returns the number of available copies of a book. Implement a program to handle these operations. The program will take commands in the following format: Input - The first line contains an integer `Q` (1 ≤ Q ≤ 2000), the number of operations. - The next `Q` lines each contain a command in one of the following formats: - `ADD book_id count` This adds `count` new copies of the book with the given `book_id` (1 ≤ book_id ≤ 1000, 1 ≤ count ≤ 100). - `BORROW book_id` This borrows one copy of the book with the given `book_id`. If no copy is available, ignore this command. - `RETURN book_id` This returns one copy of the book with the given `book_id`. - `QUERY book_id` This queries how many copies of the book with the given `book_id` are currently available. Output For each `QUERY` command, output a single line containing the number of available copies of the book with the given `book_id`. Example Input 10 ADD 1 5 ADD 2 3 QUERY 1 BORROW 1 QUERY 1 RETURN 1 QUERY 1 BORROW 2 BORROW 2 QUERY 2 Output 5 4 5 1","solution":"class LibrarySystem: def __init__(self): self.inventory = {} self.available = {} def add_books(self, book_id, count): if book_id not in self.inventory: self.inventory[book_id] = 0 self.available[book_id] = 0 self.inventory[book_id] += count self.available[book_id] += count def borrow_book(self, book_id): if self.available.get(book_id, 0) > 0: self.available[book_id] -= 1 def return_book(self, book_id): if book_id in self.available and self.available[book_id] < self.inventory[book_id]: self.available[book_id] += 1 def query_book(self, book_id): return self.available.get(book_id, 0) def process_commands(commands): library = LibrarySystem() results = [] for command in commands: parts = command.split() if parts[0] == \\"ADD\\": library.add_books(int(parts[1]), int(parts[2])) elif parts[0] == \\"BORROW\\": library.borrow_book(int(parts[1])) elif parts[0] == \\"RETURN\\": library.return_book(int(parts[1])) elif parts[0] == \\"QUERY\\": results.append(library.query_book(int(parts[1]))) return results"},{"question":"You are given a string of lowercase English letters. Your task is to replace each letter in the string with the next letter in the alphabet. If the letter is \'z\', it should be replaced with \'a\'. Write a function `next_letter(input_string)` that takes a single input parameter: - `input_string` (1 ≤ |input_string| ≤ 1000): a string consisting of lowercase English letters The function should return the modified string after replacing each letter with the next letter in the alphabet. Input A string consisting of lowercase English letters. Output A modified string where each letter has been replaced with the next letter in the alphabet. Examples Input ``` abc ``` Output ``` bcd ``` Input ``` xyz ``` Output ``` yza ``` Input ``` hello ``` Output ``` ifmmp ``` Note In the first test case, each letter is replaced by its next letter: - \'a\' becomes \'b\' - \'b\' becomes \'c\' - \'c\' becomes \'d\' In the second test case, \'x\' becomes \'y\', \'y\' becomes \'z\', and \'z\' loops back to \'a\'. In the third test case, \'h\' becomes \'i\', \'e\' becomes \'f\', \'l\' becomes \'m\', \'o\' becomes \'p\'.","solution":"def next_letter(input_string): Replaces each letter in the input string with the next letter in the alphabet. If the letter is \'z\', it is replaced with \'a\'. result = [] for char in input_string: if char == \'z\': result.append(\'a\') else: result.append(chr(ord(char) + 1)) return \'\'.join(result)"},{"question":"You are given an undirected graph with `n` nodes labeled from `1` to `n` and `m` edges. Each edge has an associated weight. You want to find the minimum cost to connect all nodes, but with an additional constraint - the minimum weight edge in any chosen cycle-free path (tree) must be greater than or equal to some given value `k`. Input The first line of the input contains three integers, `n` (2 ≤ n ≤ 100,000), `m` (1 ≤ m ≤ 200,000), and `k` (1 ≤ k ≤ 10^9), representing the number of nodes, the number of edges, and the minimum weight constraint respectively. The next `m` lines, each contain three integers `u`, `v` (1 ≤ u, v ≤ n), and `w` (1 ≤ w ≤ 10^9), representing an edge between node `u` and node `v` with weight `w`. Output If it is possible to find such a tree, print the minimum cost to connect all nodes while satisfying the constraint. If it is not possible, print `-1`. Example Input 4 5 3 1 2 4 1 3 2 2 3 3 2 4 5 3 4 1 Output 12 Note In the example, we need to connect all nodes with edges having weights at least 3. The tree satisfying this constraint includes edges with weights (4, 3, 5). The minimum cost is 4 + 3 + 5 = 12. Hints: 1. Think about modifying the traditional Minimum Spanning Tree algorithm (like Kruskal or Prim) to include the weight constraint. 2. Consider filtering out edges that do not meet the weight requirement before applying the MST algorithm.","solution":"def kruskal_with_constraint(n, m, k, edges): parent = list(range(n + 1)) rank = [0] * (n + 1) def find(u): if parent[u] != u: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 edges = [edge for edge in edges if edge[2] >= k] edges.sort(key=lambda x: x[2]) mst_cost = 0 edges_used = 0 for u, v, w in edges: if find(u) != find(v): union(u, v) mst_cost += w edges_used += 1 if edges_used == n - 1: return mst_cost return -1 def main(): n, m, k = map(int, input().strip().split()) edges = [] for _ in range(m): u, v, w = map(int, input().strip().split()) edges.append((u, v, w)) result = kruskal_with_constraint(n, m, k, edges) print(result)"},{"question":"Balanced String Check In a software development company, programmers often encounter a type of well-known challenge: handling parenthesis and bracket balancing in strings. A balanced string is a string with a matching opening and closing pair for each type of parentheses and brackets. Your task is to write a function that takes a string containing different types of parentheses and brackets (i.e., `()`, `{}`, `[]`), and determines if the string is balanced. A string is considered balanced if and only if: 1. Each opening parentheses or bracket has a corresponding closing parentheses or bracket of the same type. 2. The parentheses and brackets are closed in the correct order. Input The first line of input indicates the number of strings `n (1 <= n <= 1000)`. This is followed by `n` lines each containing a single string `s` with a length between 1 and 1000 characters. Each string consists of only the characters `(`, `)`, `{`, `}`, `[`, `]`. Output For each input string, print `YES` if the string is balanced, otherwise print `NO`. Sample Input 5 (){}[] ({[]}) ({[}]) [(]) {[()]} Sample Output YES YES NO NO YES Explanation The first line is balanced because each type of parenthesis and bracket is properly closed in the correct order. The second line is balanced according to the same rule. The third and fourth lines are not balanced due to incorrect closure and order respectively. The fifth line is balanced following the correct opening and closing order. Example Input 5 (){}[] ({[]}) ({[}]) [(]) {[()]} Output YES YES NO NO YES","solution":"def is_balanced(string): Determines if a string with parentheses and brackets is balanced. Parameters: string (str): The input string containing parentheses and brackets. Returns: str: \'YES\' if the string is balanced, \'NO\' otherwise. stack = [] matching_brackets = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in string: if char in matching_brackets.values(): stack.append(char) elif char in matching_brackets: if not stack or stack.pop() != matching_brackets[char]: return \'NO\' return \'YES\' if not stack else \'NO\' def check_balanced_strings(n, strings): Checks multiple strings to determine if each is balanced. Parameters: n (int): The number of input strings. strings (list of str): List of strings to check. Returns: List[str]: List of results with \'YES\' or \'NO\' for each input string. results = [] for string in strings: results.append(is_balanced(string)) return results"},{"question":"A company is developing a new software system that needs to process a sequence of commands to manage data records. Each record is represented by a unique integer ID. The system supports the following operations: - `ADD x`: Add a record with ID `x` to the system. - `DELETE x`: Delete the record with ID `x` from the system. - `QUERY x`: Check if a record with ID `x` exists in the system and return \\"YES\\" if it exists, otherwise \\"NO\\". Your task is to implement the system that processes a sequence of commands and outputs the results of the `QUERY` commands. You will be given multiple test cases to process. Input: - The first line of the input contains an integer `T`, the number of test cases. - The first line of each test case contains an integer `N`, the number of commands. - The next `N` lines contain a command (`ADD x`, `DELETE x`, or `QUERY x`). Output: - For each `QUERY` command, output \\"YES\\" or \\"NO\\" on a new line. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ x ≤ 10^9 Example: Input: 2 5 ADD 1 ADD 2 QUERY 1 DELETE 1 QUERY 1 3 ADD 100 QUERY 100 QUERY 101 Output: YES NO YES NO Explanation: - In the first test case, we add records with IDs 1 and 2. The first query checks for ID 1, which exists, so it returns \\"YES\\". Then we delete the record with ID 1 and the next query checks for ID 1 again, but it has been deleted, so it returns \\"NO\\". - In the second test case, we add a record with ID 100. The first query checks for ID 100, which exists, so it returns \\"YES\\". The second query checks for ID 101, which has not been added, so it returns \\"NO\\".","solution":"def process_commands(test_cases): results = [] for commands in test_cases: records = set() for command in commands: operation, x = command.split() x = int(x) if operation == \\"ADD\\": records.add(x) elif operation == \\"DELETE\\": records.discard(x) elif operation == \\"QUERY\\": results.append(\\"YES\\" if x in records else \\"NO\\") return results"},{"question":"Given an integer array `nums`, you need to return the length of the longest subsequence which is a wiggle sequence. A wiggle sequence is defined as a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A subsequence is obtained by deleting some (or no) elements from the original sequence, leaving the remaining elements in their original order. Example 1: ``` Input: nums = [1,7,4,9,2,5] Output: 6 Explanation: The entire sequence [1,7,4,9,2,5] is a wiggle sequence. ``` Example 2: ``` Input: nums = [1,17,5,10,13,15,10,5,16,8] Output: 7 Explanation: There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8]. ``` Example 3: ``` Input: nums = [1,2,3,4,5,6,7,8,9] Output: 2 Explanation: The sequence [1,2] is a wiggle sequence, but all other subsequences of more than 2 elements would not be. ``` Note: - 1 <= nums.length <= 10^4 - 0 <= nums[i] <= 10^4 Your task is to implement the function `wiggleMaxLength(nums: List[int]) -> int` that accomplishes this.","solution":"from typing import List def wiggleMaxLength(nums: List[int]) -> int: Returns the length of the longest subsequence that is a wiggle sequence. if len(nums) < 2: return len(nums) up = down = 1 for i in range(1, len(nums)): if nums[i] > nums[i - 1]: up = down + 1 elif nums[i] < nums[i - 1]: down = up + 1 return max(up, down)"},{"question":"Alice is a fan of palindromes. A palindrome is a string that reads the same forwards and backwards. Alice is particularly interested in \\"almost palindromes\\". A string is considered an almost palindrome if it can become a palindrome by changing at most one character. Alice needs your help to determine if a given string is an almost palindrome. Given a string of lowercase Latin alphabet characters, write a function to determine if it is an almost palindrome. Input: - A single string s (1 ≤ |s| ≤ 100,000) consisting of lowercase Latin letters. Output: - Print \\"YES\\" if the string is an almost palindrome, otherwise print \\"NO\\". Examples Input: abca Output: YES Input: zxcxz Output: YES Input: abcdef Output: NO Explanation: In the first example, changing the second character \'b\' to \'a\' will make the string \\"aaca\\", which is a palindrome. In the second example, changing the middle character \'c\' to \'x\' or \'z\' will make the string \\"zxxz\\" or \\"zxzz\\", both of which are palindromes. In the third example, no single character change will result in a palindrome. Note: To solve this problem, traverse the string from both ends towards the middle, comparing corresponding characters. If there is more than one mismatch, the string is not an almost palindrome. If there is at most one mismatch, check if changing one of the mismatched characters will result in a palindrome. If yes, print \\"YES\\", otherwise print \\"NO\\".","solution":"def is_almost_palindrome(s): Returns \\"YES\\" if the string can be made a palindrome by changing at most one character. Otherwise, returns \\"NO\\". n = len(s) left, right = 0, n - 1 mismatch_count = 0 while left < right: if s[left] != s[right]: mismatch_count += 1 if mismatch_count > 1: return \\"NO\\" left += 1 right -= 1 if mismatch_count == 0: return \\"YES\\" if n % 2 != 0 else \\"NO\\" return \\"YES\\""},{"question":"Shankar is participating in a game where he needs to construct a string from a given one by rearranging its characters. However, there\'s a catch: the new string must not contain any two adjacent characters that are the same. Your task is to help Shankar by determining if it is possible to rearrange the given string to meet the game’s criterion. If it is possible, print \\"YES\\" and the rearranged string. Otherwise, print \\"NO\\". Input The input consists of several test cases. The first line contains an integer T (1 ≤ T ≤ 10), the number of test cases. Each of the next T lines contains a string s (1 ≤ |s| ≤ 105), consisting of lowercase English letters. Output For each test case, print \\"YES\\" and the rearranged string if possible. If it is not possible, print \\"NO\\". Examples Input 3 aab aaab aabb Output YES aba NO YES abab Note In the first test case, one possible rearranged string is \\"aba\\". In the second test case, it is impossible to rearrange the string in such a way that no two adjacent characters are the same. In the third test case, one possible rearranged string is \\"abab\\".","solution":"from collections import Counter import heapq def can_rearrange_string(s): Determines if it is possible to rearrange the string such that no two adjacent characters are the same. freq = Counter(s) max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char rearranged_string = \'\'.join(result) if len(rearranged_string) == len(s): return \\"YES\\", rearranged_string else: return \\"NO\\" def solve(input_data): data = input_data.strip().split(\'n\') T = int(data[0]) results = [] for i in range(1, T + 1): s = data[i] result = can_rearrange_string(s) if result[0] == \\"YES\\": results.append(f\\"YES {result[1]}\\") else: results.append(\\"NO\\") return results"},{"question":"Tom, a software engineer, has been tasked with encoding messages sent to and from a satellite. Each message consists of a string of characters. To encode the message, Tom has designed a special permutation encoding algorithm. Given a string `s` of length `n`, the algorithm generates all possible permutations of the string and sorts these permutations lexicographically. The encoded message is the position of the original string in this sorted list of permutations. If the original string appears multiple times in the list of permutations, the algorithm considers the first appearance (1-based index). Your task is to write a program that computes the encoded position of the given string `s` using Tom\'s permutation encoding algorithm. # Input - The input contains a single line which holds the string `s` (1 ≤ |s| ≤ 10). String `s` only contains lowercase alphabetical characters. # Output - Output a single number which is the lexicographic rank of the string `s`. # Example Input ``` abc ``` Output ``` 1 ``` # Explanation The permutations of \\"abc\\" are: [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"]. The original string \\"abc\\" is the first permutation in the sorted list, hence the output is 1. Input ``` cba ``` Output ``` 6 ``` # Explanation The permutations of \\"cba\\" are: [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"]. The original string \\"cba\\" is the sixth permutation in the sorted list, hence the output is 6.","solution":"from itertools import permutations def lexicographic_position(s): Returns the lexicographic position of the string s among all its permutations. # Generate all permutations of the string `s` perm = sorted(set(\'\'.join(p) for p in permutations(s))) # Find the position of `s` in the sorted list of permutations return perm.index(s) + 1"},{"question":"You are given a binary tree with N nodes. Each node has a value associated with it. A subtree is a tree consisting of a node and all its descendants. The aggregate value of a subtree is the sum of all the node values in that subtree. Given Q queries, each asking about the aggregate value of the subtree with a specific node as the root, answer each query efficiently. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ value of each node ≤ 10^9 Input: The input is provided from Standard Input in the following format: N v_1 v_2 ... v_N N-1 lines describing the edges of the tree: a_1 b_1 a_2 b_2 : a_{N-1} b_{N-1} Q q_1 q_2 ... q_Q Here, - v_i (1 ≤ i ≤ N) denotes the value of the ith node. - Each edge (a_i, b_i) denotes a bidirectional edge between node a_i and node b_i. - q_i (1 ≤ i ≤ Q) denotes the node queried for the aggregate value of the subtree with node q_i as root. Output: - For each query q_i, print the aggregate value of the subtree rooted at node q_i. Example: Input: 5 1 2 3 4 5 1 2 1 3 3 4 3 5 3 1 3 4 Output: 15 12 4 Explanation: - For query 1, the subtree rooted at node 1 includes all nodes. Thus, the sum is 1+2+3+4+5 = 15. - For query 3, the subtree rooted at node 3 includes nodes 3, 4, and 5. Thus, the sum is 3+4+5 = 12. - For query 4, the subtree rooted at node 4 only includes node 4 itself. Thus, the sum is 4.","solution":"class Tree: def __init__(self, n, values): self.n = n self.values = values self.adj = [[] for _ in range(n + 1)] self.subtree_sum = [0] * (n + 1) self.visited = [False] * (n + 1) def add_edge(self, a, b): self.adj[a].append(b) self.adj[b].append(a) def dfs(self, node): self.visited[node] = True self.subtree_sum[node] = self.values[node - 1] for neighbor in self.adj[node]: if not self.visited[neighbor]: self.subtree_sum[node] += self.dfs(neighbor) return self.subtree_sum[node] def subtree_aggregate_values(n, values, edges, queries): tree = Tree(n, values) for a, b in edges: tree.add_edge(a, b) tree.dfs(1) # Assuming the root node is 1 based on the example provided. results = [] for query in queries: results.append(tree.subtree_sum[query]) return results"},{"question":"A large store needs to keep track of its inventory and manage sales through an automated system. Write a program that implements an inventory management system with the ability to record purchases, record sales, and check the current inventory for a particular item. The program should handle the following types of queries: - \\"purchase item_name quantity\\" records the purchase of a quantity of a particular item and adds it to the inventory. - \\"sale item_name quantity\\" records the sale of a quantity of a particular item and subtracts it from the inventory. If the requested quantity exceeds the available inventory, sell whatever is available and set the inventory to zero. - \\"check item_name\\" returns the current inventory level of the specified item. If the item does not exist in the inventory, the answer should be zero. Assume that item names are case-sensitive and will only contain alphanumeric characters, and that all quantities are positive integers. Input: The first line of the input contains one integer q (1 ≤ q ≤ 100,000) — the number of queries. The following q lines contain the queries, each of which is in one of the formats described above. Output: For each \\"check item_name\\" query, print the current inventory level of the specified item. Example: Input ``` 8 purchase apple 10 purchase banana 5 check apple sale apple 4 check apple sale banana 10 check banana check orange ``` Output ``` 10 6 0 0 ``` Explanation: 1. First, there are 10 apple and 5 banana in the inventory. 2. When we check the inventory for apple, we find 10 apples. 3. After selling 4 apples, 6 apples remain in the inventory. 4. When we sell 10 bananas but only have 5, we sell all 5 and the inventory becomes zero. 5. There are no bananas left in the inventory. 6. When checking for an item not in the inventory (orange), the result is zero.","solution":"def inventory_management(queries): inventory = {} results = [] for query in queries: parts = query.split() command = parts[0] item_name = parts[1] if command == \\"purchase\\": quantity = int(parts[2]) if item_name in inventory: inventory[item_name] += quantity else: inventory[item_name] = quantity elif command == \\"sale\\": quantity = int(parts[2]) if item_name in inventory: if inventory[item_name] <= quantity: inventory[item_name] = 0 else: inventory[item_name] -= quantity elif command == \\"check\\": if item_name in inventory: results.append(inventory[item_name]) else: results.append(0) return results"},{"question":"You are working on a network security simulation, where you need to check for potential breaches in different parts of a network. Each part of the network is represented as a node in a graph, and connections between them are represented as edges. The network is an undirected graph with n nodes and m edges. Each edge (u, v) has an associated integer weight w, representing the security risk between node u and node v. Your task is to determine the minimum risk path from node 1 to node n. The minimum risk path is defined as the path between node 1 and node n such that the maximum weight of any edge on this path is minimized. If no such path exists, output \\"Unreachable\\". Input The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^6) — the number of nodes and the number of edges in the network. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) — describing an edge between nodes u and v with weight w. Output Print a single integer — the minimum risk of the path from node 1 to node n. If no path exists, print \\"Unreachable\\". Examples Input 4 4 1 2 10 2 3 20 3 4 30 1 4 100 Output 30 Input 5 2 1 2 5 4 5 10 Output Unreachable Note In the first example, the minimum risk path from node 1 to node 4 is either 1 -> 2 -> 3 -> 4 or directly 1 -> 4. The maximum weights on these paths are 30 and 100, respectively. Hence the minimum risk is 30. In the second example, there is no path leading from node 1 to node 5, so the output is \\"Unreachable\\".","solution":"import heapq import sys def minimum_risk_path(n, m, edges): # Graph representation graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find the minimum risk path def get_minimum_risk(): risk = [sys.maxsize] * (n + 1) risk[1] = 0 pq = [(0, 1)] # (risk, node) while pq: cur_risk, u = heapq.heappop(pq) if u == n: return cur_risk for v, w in graph[u]: if max(cur_risk, w) < risk[v]: risk[v] = max(cur_risk, w) heapq.heappush(pq, (risk[v], v)) return \\"Unreachable\\" result = get_minimum_risk() return result # Sample usage: # edges = [ # (1, 2, 10), # (2, 3, 20), # (3, 4, 30), # (1, 4, 100) # ] # print(minimum_risk_path(4, 4, edges)) # Output : 30 # edges = [ # (1, 2, 5), # (4, 5, 10) # ] # print(minimum_risk_path(5, 2, edges)) # Output : \\"Unreachable\\""},{"question":"Alice and Bob are playing a game involving arrays and subarrays. Alice presents an array of integers, and Bob is allowed to perform a series of operations to form the largest possible sum of a consecutive subarray. However, Bob can skip at most one element while choosing the subarray to maximize the sum. Help Bob determine the maximum subarray sum he can achieve if he’s allowed to skip at most one element. Input - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. - The second line contains n space-separated integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4) — the elements of the array. Output Print a single integer — the maximum subarray sum Bob can obtain by skipping at most one element. Examples Input 5 1 -2 3 4 -5 Output 8 Input 6 -2 -3 4 -1 -2 1 Output 4 Explanation In the first example, the optimal subarray is [3, 4] with sum 7. If Bob skips the element -2, the sum becomes 8. In the second example, the optimal subarray is [4]. Choose wisely and help Bob get the highest possible sum!","solution":"def max_subarray_sum_with_one_skip(n, arr): Returns the maximum subarray sum with at most one element skipped. if n == 1: return arr[0] max_ending_here = [0] * n max_ending_here[0] = arr[0] for i in range(1, n): max_ending_here[i] = max(arr[i], max_ending_here[i - 1] + arr[i]) max_starting_here = [0] * n max_starting_here[-1] = arr[-1] for i in range(n - 2, -1, -1): max_starting_here[i] = max(arr[i], max_starting_here[i + 1] + arr[i]) max_sum = max(max_ending_here) for i in range(1, n - 1): max_sum = max(max_sum, max_ending_here[i - 1] + max_starting_here[i + 1]) return max_sum"},{"question":"You are given an integer array nums and an integer k. Write a function that checks if there exists a continuous subarray of size at least 2 that sums up to a multiple of k, that is, sums up to n*k where n is an integer. For instance, * Given nums = [23, 2, 4, 6, 7] and k = 6, the subarray [2, 4] sums up to 6 which is a multiple of k. * Given nums = [23, 2, 6, 4, 7] and k = 6, the subarray [23, 2, 6, 4, 7] sums up to 42 which is a multiple of k. Input The first line contains a single integer t (1 ≤ t ≤ 10000) — the number of testcases. Each testcase consists of two lines: - The first line contains two integers n (1 ≤ n ≤ 10^5), the size of the array nums, and k (1 ≤ k ≤ 10^9), the integer multiple. - The second line contains n space-separated integers representing the elements of the array nums. Output For each testcase, output a single string. If there exists such subarray, output \\"YES\\" (without quotes). Otherwise, output \\"NO\\". You can print each letter of \\"YES\\" and \\"NO\\" in any case (upper or lower). Example Input 3 5 6 23 2 4 6 7 5 6 23 2 6 4 7 3 10 1 2 3 Output YES YES NO Note In the first testcase, the subarray [2, 4] sums up to 6 which is a multiple of 6. In the second testcase, the subarray [23, 2, 6, 4, 7] sums up to 42 which is a multiple of 6. In the third testcase, there is no subarray that sums up to a multiple of 10.","solution":"def check_subarray_sums_to_multiple(nums, k): Returns \'YES\' if there exists a continuous subarray of size at least 2 that sums up to a multiple of k. Returns \'NO\' otherwise. n = len(nums) if n < 2: return \\"NO\\" prefix_sum_remainders = {0: -1} # To handle the edge case where prefix_sum % k == 0 early in the array current_sum = 0 for i in range(n): current_sum += nums[i] remainder = current_sum % k if k != 0 else current_sum if remainder in prefix_sum_remainders: if i - prefix_sum_remainders[remainder] > 1: return \\"YES\\" else: prefix_sum_remainders[remainder] = i return \\"NO\\" def process_test_cases(test_cases): Processes multiple test cases and returns results for each. Args: test_cases (list of tuple): List of tuples where each tuple contains the size of array, k and the array itself. Returns: list of str: List of results (\'YES\' or \'NO\') for each test case. results = [] for (n, k, nums) in test_cases: result = check_subarray_sums_to_multiple(nums, k) results.append(result) return results"},{"question":"In a programming competition, there are n participants. Each participant will solve exactly k problems. The competition needs to create a schedule such that no two participants solve the same problem simultaneously. The participants will be divided into groups, and each group will solve their set of problems together. Each participant should belong to exactly one group, and each group should contain exactly m participants. Your task is to calculate the number of ways to divide the participants into groups of size m. Input - The first and only line contains three integers: n, m, k (1 ≤ n, m, k ≤ 1000). Output - Print the single number — the number of ways to create the groups. Examples Input 6 3 2 Output 20 Input 8 4 5 Output 70 Note In the first sample, there are 6 participants and they need to be divided into groups of 3. Each group will solve 2 problems. There are C(6, 3) ways to form the groups, which is 20 ways to ensure that no two participants solve the same problem simultaneously. In the second sample, with 8 participants, groups of 4 participants solving 5 problems, there are 70 ways to organize the groups.","solution":"from math import comb def number_of_ways_to_divide_groups(n, m, k): Returns the number of ways to divide n participants into groups of size m. return comb(n, m)"},{"question":"Samantha is teaching her younger brother how to use a particular kind of calculator that can only perform multiplication and division. However, her brother can only enter two types of numbers: 2 and 3. Samantha wants to help her brother get a specific number, but she needs to determine if it\'s possible using only these two numbers and these two operations. Given a target number `n`, you need to determine if it is possible to get `n` by multiplying and/or dividing the numbers 2 and 3 any number of times. You cannot use any number other than 2 or 3 for multiplication or division, and you cannot use any operations other than multiplication and division. You can assume the number will be transformed starting from the number 1. Write a function `is_possible(n: int) -> bool` that determines whether it is possible to get the number `n` using only multiplication and division by 2 and 3. **Input:** - The function takes a single integer `n` (1 ≤ n ≤ 10^9). **Output:** - The function should return a boolean value, `True` if it\'s possible to get `n` using only multiplication and division by 2 and 3, and `False` otherwise. # Examples: ```python assert is_possible(6) == True # 1 * 2 * 3 = 6 assert is_possible(10) == False # there is no way to form 10 using only 2 and 3 with multiplication and division. assert is_possible(18) == True # 1 * 3 * 2 * 3 = 18 ``` # Note: To solve the problem, the function should factorize the number `n` and check if all remaining prime factors (after dividing out all possible 2s and 3s) are 1. This problem will test the ability to manipulate numbers using basic arithmetic operations and understanding of prime factorization.","solution":"def is_possible(n: int) -> bool: Determines if it\'s possible to obtain the number `n` starting from 1 using only multiplication and division by 2 and 3 any number of times. while n % 2 == 0: n //= 2 while n % 3 == 0: n //= 3 return n == 1"},{"question":"Given a string S consisting of lowercase English alphabets and an integer K, determine the minimum number of characters to be removed from the string such that the resulting string contains at most K distinct characters. Input The first line of input contains T, the number of test cases. Each of the next T lines contains a string S followed by an integer K separated by a space. Output For each test case, output the minimum number of characters to be removed in a single line. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 1 ≤ K ≤ 26 Example Input: 2 aaabbcc 2 abcdef 3 Output: 2 3 Explanation test #1: Remove \'b\' and \'c\' to get \\"aaa\\" with 1 distinct character, which is ≤ 2. test #2: Remove \'d\', \'e\', and \'f\' to get \\"abc\\" with 3 distinct characters, which is ≤ 3.","solution":"def min_removals_to_k_distinct(s, k): from collections import Counter if k >= len(set(s)): return 0 char_count = Counter(s) sorted_counts = sorted(char_count.values()) num_distinct = len(sorted_counts) removals = 0 idx = 0 while num_distinct > k: removals += sorted_counts[idx] idx += 1 num_distinct -= 1 return removals def process_test_cases(t, test_cases): results = [] for i in range(t): s, k = test_cases[i] k = int(k) result = min_removals_to_k_distinct(s, k) results.append(result) return results"},{"question":"Petya was feeling adventurous and decided to take a walk along the coastline of his kingdom. The coastline is represented by a series of adjacent land and water cells arranged in an n x m grid. Petya starts at the top-left corner of the grid and wants to determine if he can travel to the bottom-right corner by only stepping on land cells (\'L\'). Petya can move in four directions: up, down, left, and right. Write a program that checks whether Petya can reach the bottom-right corner from the top-left corner using only land cells. Input The first line contains two integers n and m (1 ≤ n, m ≤ 500), the number of rows and columns in the grid, respectively. The next n lines each contain a string of length m consisting of the characters \'L\' (land) and \'W\' (water). Output Output \\"YES\\" if Petya can reach the bottom-right corner from the top-left corner by only stepping on land cells, otherwise, output \\"NO\\". Examples Input 3 3 LLW LWL LLL Output YES Input 3 3 LWL WLL LWL Output NO","solution":"def can_travel(n, m, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'L\' from collections import deque queue = deque([(0, 0)]) if grid[0][0] == \'L\' else deque() visited = set((0, 0)) if grid[0][0] == \'L\' else set() while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" # Example usage: n = 3 m = 3 grid = [ \\"LLW\\", \\"LWL\\", \\"LLL\\" ] print(can_travel(n, m, grid)) # Output: YES"},{"question":"Alice and Bob have discovered a sequence of integers that consists of a peculiar pattern. It starts with the number \'1\'. In each subsequent step, the current sequence is appended with another copy of itself, but in reverse order and all elements shifted up by one. This is done recursively. For instance, after the first few steps, the sequence would evolve as follows: - Step 0: [1] - Step 1: [1, 2, 1] - Step 2: [1, 2, 1, 3, 1, 2, 1] - and so on... Given a specific step \'S\', your task is to determine the element at the \'N\'-th position of the sequence at this step. For example, at step 2, the sequence is [1, 2, 1, 3, 1, 2, 1], and if N = 4, the element at the 4th position (1-based index) is \'3\'. Input: The input consists of two integers S and N (0 ≤ S ≤ 20, 1 ≤ N ≤ 2^(S+1) - 1). Output: Print the element at the N-th position of the sequence at step S. Examples: Input: 3 7 Output: 1 Input: 2 5 Output: 1 Input: 4 10 Output: 2 Input: 1 2 Output: 2","solution":"def find_element(S, N): Returns the N-th element (1-based index) of the sequence at step S. if S == 0: return 1 segment_length = 2 ** S - 1 if N <= segment_length: return find_element(S-1, N) elif N == segment_length + 1: return S + 1 else: return find_element(S-1, 2 * segment_length + 2 - N) # Example usage: # result = find_element(3, 7) # print(result) # Output: 1"},{"question":"You are given a list of integers that represents the length of side of squares, and you are required to create a histogram where each square is represented by a bar whose height corresponds to the length of the side of the square. You need to determine the maximum rectangular area that can be constructed in this histogram. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of squares. The second line contains n integers h1, h2, ..., hn (1 <= hi <= 10^4) — the lengths of the sides of the squares. Output Print the maximum rectangular area that can be formed in the histogram. Examples Input 6 2 1 5 6 2 3 Output 10 Input 4 2 4 2 2 Output 8 Note In the first sample, the largest rectangle has area 10 (from combining the 5 and 6 lengths for a width of 2). In the second sample, the largest rectangle has area 8 (obtained from using the smallest bar in repeated segments).","solution":"def max_histogram_area(heights): Returns the maximum rectangular area that can be formed in the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"In a school, students are preparing for a mathematics contest. As part of their preparation, they need to solve various mathematical problems. One of the problems their teacher gave them is to determine whether a given number can be expressed as the sum of two squares. INPUT The input consists of a single integer N, which represents the number to be analyzed. OUTPUT You have to print \\"YES\\" (without quotes) if the number can be expressed as the sum of two squares, or \\"NO\\" (without quotes) otherwise. CONSTRAINTS 1 ≤ N ≤ 10^9 EXAMPLES Input 5 Output YES Input 3 Output NO","solution":"import math def can_be_expressed_as_sum_of_two_squares(N): Determines whether a given number can be expressed as the sum of two squares. Parameters: N (int): The number to be analyzed. Returns: str: \\"YES\\" if the number can be expressed as the sum of two squares, \\"NO\\" otherwise. for i in range(int(math.isqrt(N)) + 1): j = math.isqrt(N - i * i) if i * i + j * j == N: return \\"YES\\" return \\"NO\\""},{"question":"You have been given a binary tree. The tree is represented by a list of nodes, where each node contains a value and two child indexes (left and right). The child indexes point to the position of the child nodes in the list. If a node does not have a left or right child, the index is given as -1. Write a function that finds the longest path from the root to any leaf in the binary tree. # Input: - The first line contains an integer `N` (1 ≤ N ≤ 1000), the number of nodes in the tree. - The next `N` lines each contain a description of a node: an integer `value` and two integers `left_index` and `right_index`. **Note**: - `value` is the value of the node. - `left_index` and `right_index` are the position indexes of the left and right children of the node in the list (0-indexed). If a node does not have a left or right child, the value is -1. # Output: - Print the length of the longest path from the root (node at index 0) to any leaf. # Examples: Example 1: **Input**: ``` 5 1 1 2 2 3 -1 3 -1 -1 4 -1 -1 5 -1 -1 ``` **Output**: ``` 3 ``` Example 2: **Input**: ``` 3 5 1 2 3 -1 -1 8 -1 -1 ``` **Output**: ``` 2 ``` Example 3: **Input**: ``` 1 10 -1 -1 ``` **Output**: ``` 1 ```","solution":"def find_longest_path(tree): def dfs(node_index): if node_index == -1: return 0 node = tree[node_index] left_path_length = dfs(node[1]) right_path_length = dfs(node[2]) return 1 + max(left_path_length, right_path_length) if not tree: return 0 return dfs(0) def parse_input(input_str): lines = input_str.strip().split(\'n\') N = int(lines[0]) tree = [] for i in range(1, N + 1): parts = lines[i].strip().split() value = int(parts[0]) left_index = int(parts[1]) right_index = int(parts[2]) tree.append((value, left_index, right_index)) return tree # Example Usage: input_str = 5 1 1 2 2 3 -1 3 -1 -1 4 -1 -1 5 -1 -1 tree = parse_input(input_str) print(find_longest_path(tree)) # Output should be 3"},{"question":"A tech startup company is building a system that manages events in a large conference hall. Each event is designated by a start time and end time, and the conference hall can host multiple events, but no two events can overlap. Given a list of events, your task is to determine the maximum number of non-overlapping events that can be scheduled. Input The first line of input contains a single integer n (1 ≤ n ≤ 105) — the number of events. The following n lines each contain two integers, start and end (0 ≤ start < end ≤ 109), representing the start and end time of each event. Output Output a single integer — the maximum number of non-overlapping events that can be scheduled. Examples Input 3 1 3 2 5 3 9 Output 2 Input 5 4 5 1 3 3 7 2 8 6 9 Output 3","solution":"def max_non_overlapping_events(events): Returns the maximum number of non-overlapping events that can be scheduled. # Sort events by their end time events.sort(key=lambda x: x[1]) # Initialize the count of maximum non-overlapping events count = 0 last_end_time = -1 # Iterate through sorted events and select non-overlapping ones for start, end in events: if start >= last_end_time: count += 1 last_end_time = end return count # Example usage with input data if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) events = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(n)] print(max_non_overlapping_events(events))"},{"question":"Given an integer n, determine if it is a power of an integer greater than 1. Specifically, return \\"YES\\" if there exists some integer x (x > 1) and integer k (k > 1) such that x^k = n, otherwise return \\"NO\\". Constraints * 1 ≤ n ≤ 10^9 * n is an integer. Input Input is given from Standard Input in the following format: n Output Output \\"YES\\" if there exist integers x > 1 and k > 1 such that x^k = n. Otherwise, output \\"NO\\". Examples Input 27 Output YES Input 10 Output NO","solution":"import math def is_power_of_integer(n): Returns \\"YES\\" if there exists some integer x (x > 1) and integer k (k > 1) such that x^k = n, otherwise returns \\"NO\\". if n <= 1: return \\"NO\\" max_base = int(math.sqrt(n)) + 1 for x in range(2, max_base): k = 2 while (x ** k) <= n: if (x ** k) == n: return \\"YES\\" k += 1 return \\"NO\\""},{"question":"You are given a string containing several sentences, separated by dots (\'.\'). Each sentence can have multiple words separated by spaces. Your task is to reverse each word in every sentence while keeping the sentences in their original order. Input The input file contains a single line, a string S, where sentences are separated by dots. Output Output a single line containing the transformed string, where each word in every sentence is reversed, but sentences remain in their original order. Constraints 1 ≤ len(S) ≤ 1000 S contains lowercase English letters, spaces, and dots. Example Input: \\"this is a test.string to check\\" Output: \\"siht si a tset.gnirts ot kcehc\\"","solution":"def reverse_words_in_sentences(s): Reverse each word in every sentence while keeping the sentences in their original order. Parameters: s (str): Input string with sentences separated by dots. Returns: str: Transformed string where each word in every sentence is reversed. sentences = s.split(\'.\') reversed_sentences = [] for sentence in sentences: words = sentence.split(\' \') reversed_words = [word[::-1] for word in words] reversed_sentences.append(\' \'.join(reversed_words)) return \'.\'.join(reversed_sentences)"},{"question":"You are organizing a treasure hunt and need to create a map that describes the locations and paths between them. Each location is represented as a node in a graph, and paths between locations are the edges with various weights representing the time required to travel them. You need to find the shortest travel time from the starting location to the treasure location. The map is given as an undirected graph with positive edge weights. Input: The first line contains two integers, N (2 ≤ N ≤ 1000) and M (1 ≤ M ≤ 10,000), representing the number of locations and paths, respectively. The next M lines each contain three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000), describing a bidirectional path from location u to location v with a travel time of w. The last line contains two integers, S and T (1 ≤ S, T ≤ N), representing the starting location and the treasure location, respectively. Output: Print the shortest travel time in a line. If there is no path from the starting location to the treasure location, print \\"IMPOSSIBLE\\". Examples Input: 5 6 1 2 4 1 3 2 3 2 1 2 4 7 3 4 5 4 5 3 1 5 Output: 10 Input: 4 3 1 2 3 2 3 4 3 4 2 1 4 Output: 9","solution":"import heapq def shortest_path(num_locations, num_paths, edges, start, treasure): Find the shortest path from the starting location to the treasure location. Parameters: - num_locations: int, the number of nodes. - num_paths: int, the number of edges. - edges: List of tuples (u, v, w), where u and v are nodes and w is the weight of the edge between them. - start: int, the starting node. - treasure: int, the destination node. Returns: - The shortest travel time from start to treasure, or \\"IMPOSSIBLE\\" if no path exists. graph = {i: [] for i in range(1, num_locations + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm pq = [(0, start)] # (distance, node) dist = {i: float(\'inf\') for i in range(1, num_locations + 1)} dist[start] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_node == treasure: return current_distance if current_distance > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return \\"IMPOSSIBLE\\" # Example Usage N = 5 M = 6 edges = [ (1, 2, 4), (1, 3, 2), (3, 2, 1), (2, 4, 7), (3, 4, 5), (4, 5, 3), ] S = 1 T = 5 print(shortest_path(N, M, edges, S, T)) # Output: 10"},{"question":"You are given a binary tree of integers. Your task is to write a program that counts the number of nodes with even values and the number of nodes with odd values. A binary tree is either empty or consists of a root node with a left subtree and/or a right subtree, which are also binary trees. Each node of the tree will contain a positive integer value. You need to traverse the tree and determine the count of nodes with even values and the count of nodes with odd values. You are required to implement the following function: ```python def count_even_odd(root): Parameters: root (TreeNode): The root node of the binary tree Returns: tuple: A tuple (even_count, odd_count) where even_count is the count of nodes with even values and odd_count is the count of nodes with odd values pass ``` # Input The input consists of a binary tree represented by a sequence of integers in level-order traversal format. A conversion function will be provided to transform this sequence into a binary tree. The integer values of the nodes will be given in a space-separated string. # Output The output should be a tuple of two integers: the count of even-valued nodes and the count of odd-valued nodes. # Example Input ``` 1 2 3 4 5 6 7 ``` Output ``` (3, 4) ``` # Note In the given example, the binary tree looks like this: ``` 1 / 2 3 / / 4 5 6 7 ``` There are three even-valued nodes (2, 4, 6) and four odd-valued nodes (1, 3, 5, 7), so the output is (3, 4). Use the following helper code to construct the binary tree from the given level-order traversal input sequence: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(values): if not values: return None nodes = [None if val == \'null\' else TreeNode(int(val)) for val in values.split()] kids = nodes[::-1] root = kids.pop() for node in nodes: if node: if kids: node.left = kids.pop() if kids: node.right = kids.pop() return root ``` You can use the `build_tree` function to create a binary tree from the level-order traversal input, then call your `count_even_odd` function to get the desired output.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(values): if not values: return None nodes = [None if val == \'null\' else TreeNode(int(val)) for val in values.split()] kids = nodes[::-1] root = kids.pop() for node in nodes: if node: if kids: node.left = kids.pop() if kids: node.right = kids.pop() return root def count_even_odd(root): def dfs(node): if not node: return 0, 0 left_even, left_odd = dfs(node.left) right_even, right_odd = dfs(node.right) if node.val % 2 == 0: return left_even + right_even + 1, left_odd + right_odd else: return left_even + right_even, left_odd + right_odd + 1 even_count, odd_count = dfs(root) return even_count, odd_count"},{"question":"Given a list of integers, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Additionally, return the start and end indices (0-based) of the subarray. If there are multiple subarrays with the same largest sum, return the one with the smallest start index. If there are still multiple, return the one with the smallest end index. An example to consider is as follows: If the input array is [-2,1,-3,4,-1,2,1,-5,4], the contiguous subarray [4,-1,2,1] has the largest sum of 6, with start index 3 and end index 6. Function signature: ```python def max_subarray_sum(nums: List[int]) -> Tuple[int, int, int]: ``` **Input:** - A list of integers `nums` where 1 ≤ len(nums) ≤ 10^5 and -10^4 ≤ nums[i] ≤ 10^4. **Output:** - A tuple containing three integers: (maximum sum, start index, end index). **Example:** ```python assert max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]) == (6, 3, 6) assert max_subarray_sum([1]) == (1, 0, 0) assert max_subarray_sum([5,4,-1,7,8]) == (23, 0, 4) ``` **Note:** - If all integers are negative, return the largest element and its index as both start and end index. - This problem can be solved efficiently using Kadane\'s Algorithm, which runs in O(n) time. Implement the function `max_subarray_sum` such that it returns the correct result for the given inputs.","solution":"from typing import List, Tuple def max_subarray_sum(nums: List[int]) -> Tuple[int, int, int]: # Initialize variables for the maximum sum, start and end indices max_sum = float(\'-inf\') current_sum = 0 start_idx = 0 temp_start_idx = 0 end_idx = 0 for i in range(len(nums)): if current_sum <= 0: current_sum = nums[i] temp_start_idx = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start_idx = temp_start_idx end_idx = i return max_sum, start_idx, end_idx"},{"question":"You are given a list of integers where each integer represents a temperature recorded over several days. Your goal is to find out, for each day in the list, how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of temperature readings. The second line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 100) — the temperature readings. Output Print n space-separated integers, where the i-th integer is the number of days one has to wait until a warmer temperature. If no such day exists, print 0 for that day. Examples Input 8 73 74 75 71 69 72 76 73 Output 1 1 4 2 1 1 0 0 Input 6 30 40 50 60 50 40 Output 1 1 1 0 0 0 Note For the first sample, on day 0, the temperature is 73. The next higher temperature is 74, which is 1 day later. For temperature 74 on day 1, the next higher temperature is 75, which is also 1 day later. Day 2 is 75, and the next higher temperature is 76, which is 4 days later, and so on. For the second sample, each temperature reading increases until the 60 values is reached, after which no greater temperature appears. Thus, all following temperature readings get a 0 indicating no higher temperatures ahead.","solution":"def days_until_warmer(temperatures): n = len(temperatures) wait_days = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: prev_index = stack.pop() wait_days[prev_index] = i - prev_index stack.append(i) return wait_days"},{"question":"A company wants to partition its employees into two teams such that the skill levels of the employees in each team are as evenly matched as possible. Each employee has a skill level and you are given the list of these skill levels. To achieve a balanced distribution, the sum of the skill levels of the first team should be as close as possible to the sum of the skill levels of the second team. Write a function to partition the list of employees into two teams such that the absolute difference between the sum of the skill levels of the two teams is minimized. Input - The first line contains an integer n (1 ≤ n ≤ 100), the number of employees. - The second line contains n integers representing the skill levels of the employees (1 ≤ skill level ≤ 100). Output Print a single integer representing the minimum absolute difference between the sum of the skill levels of the two teams. Example Input 4 1 6 11 5 Output 1 Note In the example, the list of skill levels is [1, 6, 11, 5]. We can partition them into [1, 11] and [6, 5], where the sums are 12 and 11. The absolute difference is |12 - 11| = 1, which is the minimum possible.","solution":"def minimize_skill_difference(n, skill_levels): Returns the minimum absolute difference between the sum of skill levels of two teams. total_sum = sum(skill_levels) dp = [False] * (total_sum // 2 + 1) dp[0] = True for skill in skill_levels: for j in range(total_sum // 2, skill - 1, -1): dp[j] = dp[j] or dp[j - skill] for i in range(total_sum // 2, -1, -1): if dp[i]: sum1 = i break sum2 = total_sum - sum1 return abs(sum2 - sum1)"},{"question":"Given a string `s` and a dictionary of words `dict`, determine if `s` can be segmented into a space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words. Return `True` if the string can be segmented, otherwise return `False`. # Example Input: ```plaintext s: \\"leetcode\\" dict: [\\"leet\\", \\"code\\"] ``` Output: ```plaintext True ``` Explanation: The string can be segmented as \\"leet code\\". # Note The input string `s` may contain only lowercase letters and be as long as 10^4. The dictionary `dict` contains words with lengths between 1 and 1000 and may contain up to 5 * 10^3 words. # Constraints - At least one word will be present in the dictionary and the dictionary will only contain lowercase letters. **Function Signature**: ```python def can_segment_string(s: str, dict: List[str]) -> bool: pass ```","solution":"from typing import List def can_segment_string(s: str, dict: List[str]) -> bool: word_set = set(dict) n = len(s) dp = [False] * (n + 1) dp[0] = True # empty string is always \\"segmented\\" for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[n]"},{"question":"Implement a function `find_second_largest` that takes a list of integers and returns the second largest unique integer in the list. You can assume that the list contains at least two unique integers. Example Input ```python find_second_largest([10, 5, 8, 12, 3, 8, 12]) ``` Output ```python 10 ``` Additional Input ```python find_second_largest([7, 7, 7, 7, 6]) ``` Output ```python 6 ```","solution":"def find_second_largest(nums): Returns the second largest unique integer in the list. Assumes the list contains at least two unique integers. unique_nums = list(set(nums)) unique_nums.sort(reverse=True) return unique_nums[1]"},{"question":"You are given an array consisting of integers. Your task is to find the length of the longest subarray consisting of the same elements and then remove it from the array. Finally, you should output the modified array. A subarray is a contiguous part of the array. For example, if the array is [1, 2, 2, 3, 3, 3, 3, 4], the longest subarray of the same elements is [3, 3, 3, 3]. Input: - The first line contains one integer n (1 ≤ n ≤ 100) — the number of elements in the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the elements of the array. Output: - In the first line, output the length of the longest subarray of the same elements found. - In the second line, output the array after removing this subarray. Examples: Input 8 1 2 2 3 3 3 3 4 Output 4 1 2 2 4 Input 5 5 5 5 5 5 Output 5","solution":"def find_and_remove_longest_subarray(n, arr): Find the length of the longest subarray of the same elements, remove it, and output the result. Parameters: n : int - number of elements in the array arr : list of int - list of integers Returns: length : int - the length of the longest subarray of the same elements modified_arr : list of int - the array after removing the found subarray longest_subarray_length = 1 current_subarray_length = 1 start_idx = 0 best_start_idx = 0 # Identify the longest subarray of the same element for i in range(1, n): if arr[i] == arr[i - 1]: current_subarray_length += 1 else: if current_subarray_length > longest_subarray_length: longest_subarray_length = current_subarray_length best_start_idx = start_idx start_idx = i current_subarray_length = 1 # Final check for the last subarray if current_subarray_length > longest_subarray_length: longest_subarray_length = current_subarray_length best_start_idx = start_idx # Remove the longest subarray from the array end_idx = best_start_idx + longest_subarray_length modified_arr = arr[:best_start_idx] + arr[end_idx:] return longest_subarray_length, modified_arr"},{"question":"In this problem, you are required to determine if a string containing only characters \'a\', \'b\', and \'c\' can be transformed into a palindrome by rearranging its characters and optionally changing at most one character. A palindrome is a string that reads the same forward and backward, such as \\"abcba\\" or \\"aaabaaa\\". Write a program to check if the given string can be transformed into a palindrome by rearranging its characters and making at most one character substitution. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 100), where |s| denotes the length of the string. The string consists only of the characters \'a\', \'b\', and \'c\'. Output Output \\"YES\\" if it\'s possible to transform the given string into a palindrome by rearranging its characters and changing at most one character. Otherwise, output \\"NO\\". Examples Input abac Output YES Input aaabc Output NO Input aabbcc Output YES Explanation of examples 1. In the first example, \\"abac\\" can be rearranged to \\"acba\\", and changing the middle character \'c\' to \'b\' will give a palindrome \\"ababa\\". 2. In the second example, \\"aaabc\\" cannot be rearranged and changed into a palindrome. 3. In the third example, \\"aabbcc\\" can be rearranged to \\"abcabc\\", and changing the middle character \'c\' to \'b\' will result in \\"abbcca\\" which is not a trivial palindrome but can be adjusted accordingly to match the palindrome properties within the allowed transformation rules.","solution":"def can_be_transformed_to_palindrome(s): Determines if a string containing only characters \'a\', \'b\', and \'c\' can be transformed into a palindrome by rearranging its characters and optionally changing at most one character. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 == 1) # A string can be transformed into a palindrome if there is at most one odd-count character. if odd_count <= 1: return \\"YES\\" # If there are exactly two odd-count characters, we can still make one change to make the string a palindrome. elif odd_count == 2: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a list of integers, your task is to find and return the two largest unique integers in the list. If there are fewer than two unique integers, return an empty list. Write a function `find_two_largest` that takes a list of integers as input and returns a list containing the two largest unique integers in descending order. # Input Format: The first line of the input contains an integer `T`, the number of test cases. Each of the next `T` lines contains a space-separated list of integers. # Output Format: For each test case, print a single line containing the two largest unique integers in descending order. If there are fewer than two unique integers, print an empty list. # Constraints: - 1 ≤ T ≤ 10^3 - 1 ≤ len(list) ≤ 10^3 - -10^6 ≤ integer ≤ 10^6 # Sample Input: 3 1 2 3 4 5 4 4 4 4 5 1 2 5 3 3 1 # Sample Output: 5 4 [] 5 3 # Explanation: - For the first test case, the two largest unique integers are 5 and 4. - For the second test case, there are not enough unique integers, so the function returns an empty list. - For the third test case, the two largest unique integers are 5 and 3.","solution":"def find_two_largest(arr): Returns a list containing the two largest unique integers in descending order. If there are fewer than two unique integers, returns an empty list. # Use a set to get unique values and then convert it back to a sorted list in descending order unique_sorted = sorted(set(arr), reverse=True) # If there are at least two unique values, return the first two, otherwise return an empty list if len(unique_sorted) >= 2: return unique_sorted[:2] else: return [] def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(find_two_largest(arr)) return results"},{"question":"You are given an array consisting of N integers. The integers in the array signify the heights of trees in a forest, ordered from the shortest tree to the tallest. Your task is to cut down some trees so that the remaining trees can be split into at least two contiguous segments, where each segment contains trees of the same height. You need to determine whether this is possible and if so, provide a way to split the remaining trees into at least two contiguous segments of different heights. If it\'s not possible, return \\"NO\\". Constraints * 1 ≤ N ≤ 1000 * 1 ≤ height_i ≤ 10^4 (height of each tree) Input The input will be provided in the following format: N height_1 height_2 ... height_N Output If it\'s possible to split the remaining trees into at least two contiguous segments of different heights, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 5 2 2 3 3 3 Output YES Input 4 1 1 1 1 Output NO Input 6 1 2 2 2 3 3 Output YES","solution":"def can_split_into_segments(N, heights): if N < 2: return \\"NO\\" for i in range(1, N): if heights[i] != heights[i-1]: return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of integers and a set of queries. Each query specifies a range within the list and you are required to find the sum of the integers within that range. However, you need to perform the range sum calculation efficiently given that the list can be quite large and there can be many queries. Input The first line contains two integers, N (1 ≤ N ≤ 10^5) — the number of elements in the list, and Q (1 ≤ Q ≤ 10^5) — the number of queries. The second line contains N integers a1, a2, ..., aN (1 ≤ ai ≤ 10^9) — the elements of the list. The next Q lines each contain two integers L and R (1 ≤ L ≤ R ≤ N) — specifying the range for which the sum is to be calculated. Output For each query, output the sum of the elements in the specified range, each printed in a new line. Examples Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15 Note In the first query, we are summing elements 1 through 3 (1 + 2 + 3). In the second query, we are summing elements 2 through 4 (2 + 3 + 4). In the third query, we are summing elements 1 through 5 (1 + 2 + 3 + 4 + 5).","solution":"def range_sum_query(n, q, lst, queries): # Creating prefix sums list prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + lst[i - 1] results = [] for l, r in queries: sum_in_range = prefix_sums[r] - prefix_sums[l - 1] results.append(sum_in_range) return results"},{"question":"Sophia is studying number theory and is particularly interested in prime numbers. One day, she encountered a challenging problem related to the sum of prime numbers in a given range. You are given a range defined by two integers L and R. Sophia wants to find the sum of all prime numbers between L and R (inclusive). A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Your task is to help Sophia by writing a program that calculates the sum of all prime numbers in the given range for multiple test cases. Input The first line of the input contains an integer T denoting the number of test cases. Each test case is described in one line containing two integers L and R. Output For each test case, output a single line containing one integer denoting the sum of all prime numbers between L and R (inclusive). If there are no prime numbers in the specified range, output 0. Constraints 1 ≤ T ≤ 10^4 1 ≤ L ≤ R ≤ 10^6 Example Input: 3 1 10 11 19 20 30 Output: 17 60 52 Explanation Example case 1. Prime numbers between 1 and 10 are 2, 3, 5, and 7. 2 + 3 + 5 + 7 = 17 Example case 2. Prime numbers between 11 and 19 are 11, 13, 17, and 19. 11 + 13 + 17 + 19 = 60 Example case 3. Prime numbers between 20 and 30 are 23 and 29. 23 + 29 = 52","solution":"def generate_primes_up_to(n): Returns a list of prime numbers up to n is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for start in range(2, int(n**0.5) + 1): if is_prime[start]: for multiple in range(start*start, n + 1, start): is_prime[multiple] = False primes = [num for num, prime in enumerate(is_prime) if prime] return primes def sum_primes_in_range(L, R, primes): Returns the sum of prime numbers between L and R (inclusive) return sum(p for p in primes if L <= p <= R) def sum_primes_in_ranges(test_cases): Returns a list of results for each range specified in the test cases max_R = max(R for _, R in test_cases) primes = generate_primes_up_to(max_R) results = [] for L, R in test_cases: results.append(sum_primes_in_range(L, R, primes)) return results # Function to handle multiple test cases def process_test_cases(T, test_cases): return sum_primes_in_ranges(test_cases)"},{"question":"Given a list of integers, find the \\"practical median\\" of the list. The practical median of a list is defined as the element that is closest to the median after sorting the list in non-decreasing order. If the list has an even number of elements, choose the lower of the two middle elements. For example, the practical median of the list [10, 2, 14, 1, 3] is 3, because after sorting, the list is [1, 2, 3, 10, 14] and the median is 3, which is the exact middle element. The practical median of the list [8, 6, 7, 5] is 6, because after sorting the list is [5, 6, 7, 8] and the middle elements are 6 and 7, from which we choose the lower value, 6. Write a program that determines the practical median of a given list of integers. Input The first line contains an integer n (1 ≤ n ≤ 105), the number of elements in the list. The second line contains n integers separated by spaces, representing the elements of the list. Output Print the practical median of the list. Examples Input: 5 10 2 14 1 3 Output: 3 Input: 4 8 6 7 5 Output: 6","solution":"def practical_median(n, arr): Returns the practical median of the list. If the list length is even, returns the lower of the two middle elements. arr.sort() mid_index = (n - 1) // 2 return arr[mid_index]"},{"question":"John is very fond of playing with numbers. One day, he found an old game console which required the user to enter a sequence of integers. The console had a very interesting feature – it could identify the maximum sum of any contiguous subarray within the entered sequence. John found this feature fascinating and decided to learn more about it. However, the game console had a twist: it would reverse the sequence before finding the maximum sum of a contiguous subarray. Help John by writing a program that takes a sequence of integers, reverses the sequence, and then finds the maximum sum of a contiguous subarray in the reversed sequence. Input Format: The first line contains an integer n, which denotes the number of integers in the sequence. The second line contains n space-separated integers which denote the sequence provided to John. Output Format: Print the maximum sum of a contiguous subarray in the reversed sequence. Constraints: 1 ≤ n ≤ 10^5 -10^4 ≤ Each integer in the sequence ≤ 10^4 SAMPLE INPUT 5 1 -2 3 -1 2 SAMPLE OUTPUT 4","solution":"def max_subarray_sum_reversed(n, sequence): Given an integer n and a sequence of n integers, this function reverses the sequence and then finds the maximum sum of a contiguous subarray in the reversed sequence. Parameters: n (int): The number of integers in the sequence. sequence (list of int): The sequence of integers. Returns: int: The maximum sum of a contiguous subarray in the reversed sequence. reversed_sequence = sequence[::-1] max_sum = -float(\'inf\') current_sum = 0 for number in reversed_sequence: current_sum = max(number, current_sum + number) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In a distant kingdom, there is a grand tournament of knights. Each knight participates in several duels and accumulates points based on the outcomes. The kingdom\'s ruler wants to honor the knight who has the greatest influence in the tournament. The influence of a knight is defined as the sum of points the knight has acquired plus the sum of points of all knights they have defeated. Given the number of knights and the results of all duels, determine the knight with the highest influence. Input The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000), where n is the number of knights and m is the number of duels. The next line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ 1000), where pi is the points of the ith knight. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), indicating that knight u defeated knight v in a duel. Output Print the index of the knight with the highest influence. If there are multiple knights with the same influence, print the one with the smallest index. Examples Input 3 3 10 20 30 1 2 2 3 3 1 Output 2 Input 4 2 15 10 5 20 1 2 4 3 Output 1","solution":"def find_most_influential_knight(n, m, points, duels): influence = [0] * n for i in range(n): influence[i] = points[i] duels_map = [[] for _ in range(n)] for u, v in duels: duels_map[u-1].append(v-1) for i in range(n): for j in duels_map[i]: influence[i] += points[j] max_influence = max(influence) return influence.index(max_influence) + 1"},{"question":"In a faraway land, there is a unique city with roads arranged in a perfect grid pattern. The city is very particular about its traffic rules: Each vehicle must travel either to the east or to the north, and never to the west or to the south. Given the city grid represented as an m x n matrix (where m is the number of rows and n is the number of columns), you need to count the number of unique paths from the top-left corner (1,1) of the matrix to the bottom-right corner (m,n). Each cell in the grid is identified by its row and column number. You can only move to the right or down from a cell at any step. Write a function to determine the number of unique paths for different given values of m and n. Input: The first line contains the number of test cases t (1 ≤ t ≤ 10). Each of the next t lines contain two integers m and n (1 ≤ m, n ≤ 100). Output: For each test case, output the number of unique paths from the top-left corner to the bottom-right corner. Example: Input: 2 2 2 3 3 Output: 2 6","solution":"def unique_paths(m, n): Calculate the number of unique paths from the top-left corner to the bottom-right corner in an m x n grid. # Create a 2D list to store the number of unique paths to each cell dp = [[0] * n for _ in range(m)] # There is only one way to reach any cell in the first row or the first column for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Use dynamic programming to fill in the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1] def process_test_cases(test_cases): results = [] for m, n in test_cases: results.append(unique_paths(m, n)) return results"},{"question":"You are given a list of integers representing the number of visitors to a certain website over several days. You need to determine the maximum sum of visitors over any consecutive subarray of days with a fixed length k. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2000) — the number of days and the length of the subarray. The second line contains a list of n integers (0 ≤ ai ≤ 1000) — the number of visitors on each of the n days. Output Print the single integer — the maximum sum of visitors over any consecutive subarray of length k. Examples Input 6 2 1 2 3 4 5 6 Output 11 Input 5 3 4 3 5 1 2 Output 12 Input 8 4 5 1 3 6 7 2 8 4 Output 23","solution":"def max_sum_of_subarray(visitors, k): Returns the maximum sum of visitors over any consecutive subarray of length k. Parameters: visitors (list of int): List of integers representing the number of visitors on each day. k (int): Length of the subarray. Returns: int: The maximum sum of visitors over any consecutive subarray of length k. n = len(visitors) # Calculate the initial sum of the first subarray of length k max_sum = current_sum = sum(visitors[:k]) # Use sliding window technique to find max sum of subarray of length k for i in range(k, n): current_sum += visitors[i] - visitors[i-k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a list of tasks that need to be scheduled on a single CPU machine. Each task has a duration, and some tasks must be performed before others. Create a program to find the minimum amount of time required to finish all tasks. Each task is represented by a unique identifier and its duration. The dependencies between tasks are provided separately, indicating which tasks must complete before others can start. **Input:** The first line contains two integers, `n` and `m`, representing the number of tasks and the number of dependencies, respectively. The next `n` lines contain two integers each: the identifier of the task and its duration. Each of these lines represents a task. The following `m` lines contain two integers each: the identifiers of two tasks, where the first task must be completed before the second can begin. **Output:** Output a single integer representing the minimum amount of time required to complete all tasks. **Constraints:** - 1 ≤ n ≤ 10000 - 0 ≤ m ≤ 100000 - Task identifiers are unique and are in the range [1, 10000] - Task durations are positive integers no greater than 1000 **Input Example 1:** ``` 5 4 1 3 2 2 3 4 4 6 5 8 1 2 2 3 3 4 4 5 ``` **Output Example 1:** ``` 23 ``` **Input Example 2:** ``` 3 1 1 5 2 10 3 3 1 2 ``` **Output Example 2:** ``` 15 ``` **Explanation:** In the first example, task 1 must be completed before task 2 can start, task 2 must be completed before task 3 can start, and so on. So, the order of tasks will be: 1 -> 2 -> 3 -> 4 -> 5. The total time taken will be 3 + 2 + 4 + 6 + 8 = 23. In the second example, task 1 must be completed before task 2 can start. There\'s no dependency for task 3. Task 3 can start immediately and will finish in 3 units of time. Task 1 and task 2 take 5 and 10 units of time, respectively. The minimum time required to complete all tasks will be max(5+10, 3) = 15.","solution":"from collections import defaultdict, deque def find_minimum_time(n, m, tasks, dependencies): # Create a task duration map task_duration = {} for task in tasks: task_id, duration = task task_duration[task_id] = duration # Create adjacency list and in-degree map adj_list = defaultdict(list) in_degree = {i: 0 for i in range(1, n + 1)} for before, after in dependencies: adj_list[before].append(after) in_degree[after] += 1 # Topological sorting and finding the minimum time queue = deque() earliest_finish_times = {i: 0 for i in range(1, n + 1)} for task_id in range(1, n + 1): if in_degree[task_id] == 0: queue.append(task_id) earliest_finish_times[task_id] = task_duration[task_id] while queue: current_task = queue.popleft() for neighbor in adj_list[current_task]: in_degree[neighbor] -= 1 earliest_finish_times[neighbor] = max(earliest_finish_times[neighbor], earliest_finish_times[current_task] + task_duration[neighbor]) if in_degree[neighbor] == 0: queue.append(neighbor) return max(earliest_finish_times.values()) # Helper function to parse the input as described in the problem statement def minimum_time_to_complete_all_tasks(input_data): lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) tasks = [] for i in range(1, n + 1): task_id, duration = map(int, lines[i].split()) tasks.append((task_id, duration)) dependencies = [] for i in range(n + 1, n + 1 + m): before, after = map(int, lines[i].split()) dependencies.append((before, after)) return find_minimum_time(n, m, tasks, dependencies)"},{"question":"James is participating in a marathon coding competition. As a part of the competition, he needs to create several sequences derived from a given sequence using a specific operation. The operation he can perform is as follows: 1. Choose any contiguous subsequence of the given sequence. 2. Reverse the chosen subsequence. Given the initial sequence s1 and the target sequence s2, determine the minimum number of operations required to transform s1 into s2 using the above operation. If it is impossible to transform s1 into s2, return -1. Input The input data contains two lines. The first line contains the initial sequence s1, and the second line contains the target sequence s2. Both lines only consist of lowercase Latin letters (1 ≤ |s1| ≤ 104, 1 ≤ |s2| ≤ 104). Output If it is impossible to transform s1 into s2, print \\"-1\\" (without the quotes). Otherwise, print the minimum number of operations required to transform s1 into s2. Example Input abcdef fbdcea Output 3 Input abcd dbca Output 2","solution":"def min_operations_to_transform(s1, s2): Given two sequences s1 and s2, determine the minimum number of operations required to transform s1 into s2. Each operation consists of selecting a contiguous subsequence of s1 and reversing it. Args: s1 (str): Initial sequence. s2 (str): Target sequence. Returns: int: Minimum number of operations required, or -1 if impossible. if sorted(s1) != sorted(s2): return -1 def longest_common_subsequence(a, b): dp = [[0] * (len(b)+1) for _ in range(len(a)+1)] for i in range(1, len(a)+1): for j in range(1, len(b)+1): if a[i-1] == b[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[-1][-1] lcs_length = longest_common_subsequence(s1, s2) return len(s1) - lcs_length"},{"question":"Sarah is a computer science student attending a university where rooms are arranged in a grid of R rows and C columns. Each room is identified by a pair of coordinates (i, j), where i is the row number and j is the column number. Rooms can be connected by a door either horizontally or vertically. Sarah has to attend multiple classes each day, and she starts at the room (1, 1). She only has T units of time for each transition between classes, including the time taken to move to the next room and the time spent inside the class. If she cannot make it within T units of time, she will skip that class. You are given the grid dimensions and the doors connecting the rooms with their respective costs (time to traverse). Help Sarah determine whether she can attend each of her classes given the restricted time T. Input: The first line contains an integer R and C representing the number of rows and columns in the grid. The next line contains an integer D, the number of doors. The following D lines each contain four space-separated integers r1, c1, r2, c2, and t, indicating that there is a door between room (r1, c1) and room (r2, c2) with a traversal time of t units. The next line contains an integer Q, the number of queries. The next Q lines each contain three space-separated integers i, j, and T, representing the target room (i, j) and the allowed transition time T. Output: For each query, print \\"YES\\" if Sarah can attend the class in the given room within T units of time, otherwise print \\"NO\\". Constraints: 1 ≤ R, C ≤ 100 1 ≤ D ≤ 10^4 1 ≤ Q ≤ 10^3 1 ≤ r1, r2 ≤ R 1 ≤ c1, c2 ≤ C 1 ≤ t ≤ 100 1 ≤ i ≤ R 1 ≤ j ≤ C 1 ≤ T ≤ 10^4 SAMPLE INPUT 3 3 4 1 1 1 2 5 1 2 2 2 10 2 2 3 2 5 1 1 2 1 3 2 2 25 3 2 15 2 3 30 SAMPLE OUTPUT YES NO NO","solution":"import heapq def can_attend_classes(R, C, D, doors, Q, queries): def dijkstra(cost_matrix, start): R, C = len(cost_matrix), len(cost_matrix[0]) distances = [[float(\'inf\')] * C for _ in range(R)] distances[start[0]][start[1]] = 0 pq = [(0, start[0], start[1])] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while pq: current_distance, x, y = heapq.heappop(pq) if current_distance > distances[x][y]: continue for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C: new_distance = current_distance + cost_matrix[x][y].get((nx, ny), float(\'inf\')) if new_distance < distances[nx][ny]: distances[nx][ny] = new_distance heapq.heappush(pq, (new_distance, nx, ny)) return distances cost_matrix = [[{} for _ in range(C)] for _ in range(R)] for r1, c1, r2, c2, t in doors: r1, c1, r2, c2 = r1 - 1, c1 - 1, r2 - 1, c2 - 1 cost_matrix[r1][c1][(r2, c2)] = t cost_matrix[r2][c2][(r1, c1)] = t distances = dijkstra(cost_matrix, (0, 0)) results = [] for i, j, T in queries: if distances[i - 1][j - 1] <= T: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage R, C = 3, 3 D = 4 doors = [ (1, 1, 1, 2, 5), (1, 2, 2, 2, 10), (2, 2, 3, 2, 5), (1, 1, 2, 1, 1) ] Q = 3 queries = [ (2, 2, 25), (3, 2, 15), (2, 3, 30) ] print(can_attend_classes(R, C, D, doors, Q, queries)) # Output: [\'YES\', \'NO\', \'NO\']"},{"question":"A company has a list of employees and their respective salaries. Due to a recent policy update, the company decided to give a performance-based bonus to its employees. The bonus calculation depends on the position of each employee\'s salary in a sorted list of all salaries. Higher-ranked employees will receive higher bonuses. You are tasked to write a program that calculates the bonus for each employee. Bonus Calculation: For each employee, you have to calculate their rank in the sorted list of salaries (highest salary gets rank 1). The bonus for each employee is calculated as follows: - If the employee\'s rank is `r`, their bonus is `bonus_factor` * (N - r + 1), where `N` is the total number of employees and `bonus_factor` is a given constant. Input The first line of the input contains an integer `T` denoting the number of test cases. For each test case, the first line contains an integer `N` denoting the number of employees in the company and a float `bonus_factor`. The next `N` lines contain an employee\'s name and a float `salary`. Output For each test case, output `N` lines, each containing an employee\'s name and their calculated bonus, maintaining the input order. Constraints 0 ≤ T ≤ 100 1 ≤ N ≤ 100 0.0 ≤ salary ≤ 10^6 0.0 ≤ bonus_factor ≤ 1000.0 Example Input: 2 3 100.0 Alice 5000.0 Bob 7000.0 Charlie 3000.0 2 50.0 David 4000.0 Eva 4000.0 Output: Alice 200.0 Bob 300.0 Charlie 100.0 David 50.0 Eva 50.0 Explanation Example Case 1: Alice, Bob, and Charlie have salaries 5000.0, 7000.0, and 3000.0 respectively. After sorting the salaries, Bob has the rank 1 (highest salary), Alice has rank 2, and Charlie has rank 3. - Bob\'s bonus = 100.0 * (3 - 1 + 1) = 300.0 - Alice\'s bonus = 100.0 * (3 - 2 + 1) = 200.0 - Charlie\'s bonus = 100.0 * (3 - 3 + 1) = 100.0 Example Case 2: David and Eva both have salaries 4000.0. Since they have equal salaries, their rank is the same, and both receive the same bonus. - David\'s bonus = 50.0 * (2 - 1 + 1) = 50.0 - Eva\'s bonus = 50.0 * (2 - 1 + 1) = 50.0","solution":"def calculate_bonuses(T, test_cases): results = [] for i in range(T): N, bonus_factor = test_cases[i][0] employees = test_cases[i][1] salary_to_employees = [(salary, name) for name, salary in employees] salary_to_employees.sort(reverse=True, key=lambda x: x[0]) salary_to_rank = {salary: rank for rank, (salary, name) in enumerate(salary_to_employees, 1)} for name, salary in employees: rank = salary_to_rank[salary] bonus = bonus_factor * (N - rank + 1) results.append((name, bonus)) return results"},{"question":"You are given a list of integers. Your task is to identify and output all unique triplets in the list which gives the sum of zero. Constraints * The length of the list will be at least 3 and at most 1000. * Each integer in the list will be between -10^5 and 10^5 inclusive. Input The input is given in the following format. n a_0 a_1 a_2 ... a_{n-1} n is the number of elements in the list, and a_i represents elements in the list. Output Print the unique triplets which sum up to zero. Print each triplet in a new line, with elements in each triplet sorted in ascending order. The order of the triplets in the output does not matter. Example Input 6 -1 0 1 2 -1 -4 Output -1 -1 2 -1 0 1","solution":"def find_zero_sum_triplets(nums): Returns a list of unique triplets in the list which sum up to zero. nums.sort() res = [] n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total < 0: left += 1 elif total > 0: right -= 1 else: res.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return res"},{"question":"Maximum Ride Distance A bike-sharing company is evaluating its bike stations\' performance and wants to determine the maximum ride distance that users travel from a given set of stations. Each station logs the distance travelled by each ride during a given period. You have to write a program that computes the maximum ride distance for each station. Input The input consists of multiple datasets. Each dataset is formatted as follows: > S > D1 D2 ... DS > R11 R12 ... R1D1 > R21 R22 ... R2D2 > ... > RS1 RS2 ... RSDs - The first line contains an integer S representing the number of stations (1 ≤ S ≤ 100). - The second line contains S integers D1, D2, ..., DS separated by spaces, where Di is the number of rides logged for station i (1 ≤ Di ≤ 100). - The following S lines each contain Di integers representing the distances (in kilometers) of rides logged at station i. The distances are positive integers and do not exceed 1000. The end of the input is represented by a single line containing zero. Output For each station, output the maximum ride distance in a line. Sample Input ``` 3 4 3 5 10 20 15 25 30 45 35 5 5 10 12 6 0 ``` Output for the Sample Input ``` 25 45 12 ``` Example Input ``` 3 4 3 5 10 20 15 25 30 45 35 5 5 10 12 6 0 ``` Output ``` 25 45 12 ```","solution":"def max_ride_distances(data): lines = data.strip().split(\'n\') result = [] idx = 0 while idx < len(lines): s = int(lines[idx]) if s == 0: break distances = [] idx += 1 for i in range(s): distances_logs = list(map(int, lines[idx + 1 + i].split())) distances.append(max(distances_logs)) result.extend(distances) idx += 1 + s return result"},{"question":"You are tasked with developing an inventory management system for a warehouse. The warehouse stores multiple types of items identified uniquely by an item ID, and each type of item has a specific shelf life in days. There are several actions the inventory management system should handle: 1. Adding a new item to the inventory. 2. Removing an item from the inventory. 3. Checking the count of a specific item in the inventory. 4. Displaying a list of all items in the inventory sorted by remaining shelf life (items with the lowest remaining shelf life should come first). The system should be able to process a list of commands to perform these actions. Each command is represented by a string where the first part denotes the type of action, and the subsequent parts provide necessary details for the action. The possible commands are: - \\"add <item_id> <shelf_life>\\": Adds an item with the given item_id and shelf_life to the inventory. - \\"remove <item_id>\\": Removes one unit of the item identified by item_id from the inventory. If the item is not found, the command is ignored. - \\"count <item_id>\\": Returns the count of items with the given item_id in the inventory. - \\"list\\": Returns a list of all items in the inventory sorted by remaining shelf life. The input will consist of an integer `n` denoting the number of commands followed by `n` commands. Write a program that processes these commands and outputs the results of \\"count\\" and \\"list\\" commands as specified. # Example **Input:** ``` 7 add A 5 add B 3 add A 5 count A list remove A list ``` **Output:** ``` 2 B:3 A:5 A:5 B:3 A:5 ``` # Constraints: - 1 ≤ n ≤ 1000 - Item IDs are strings of length between 1 and 10, consisting of uppercase English letters. - Shelf life is an integer between 1 and 1000.","solution":"class Warehouse: def __init__(self): self.inventory = [] def add(self, item_id: str, shelf_life: int): self.inventory.append((item_id, shelf_life)) def remove(self, item_id: str): for i, (item, life) in enumerate(self.inventory): if item == item_id: del self.inventory[i] break def count(self, item_id: str) -> int: return sum(1 for item, _ in self.inventory if item == item_id) def list_inventory(self) -> str: sorted_inventory = sorted(self.inventory, key=lambda x: x[1]) return \\" \\".join(f\\"{item}:{life}\\" for item, life in sorted_inventory) def process_commands(n: int, commands: list) -> list: warehouse = Warehouse() results = [] for command in commands: parts = command.split() action = parts[0] if action == \\"add\\": item_id = parts[1] shelf_life = int(parts[2]) warehouse.add(item_id, shelf_life) elif action == \\"remove\\": item_id = parts[1] warehouse.remove(item_id) elif action == \\"count\\": item_id = parts[1] count_result = warehouse.count(item_id) results.append(str(count_result)) elif action == \\"list\\": list_result = warehouse.list_inventory() results.append(list_result) return results"},{"question":"In a certain country, there are n cities and m bidirectional roads connecting these cities. The government wants to build a high-speed rail system to connect these cities directly, but the construction cost varies depending on the terrain between any two cities. The task is to find the total minimum cost to connect all the cities so that every city is reachable from every other city. You are given n cities numbered from 1 to n, and m bidirectional roads, where each road connects two cities and has a specific construction cost. Your task is to find the minimum cost required to connect all cities using the high-speed rail system. If it\'s not possible to connect all cities, output \\"Impossible\\". Input The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of cities and the number of roads. Each of the following m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6) — representing a road that connects city u and city v with a construction cost w. Output Output a single integer — the minimum cost to connect all the cities, or \\"Impossible\\" if it\'s not possible. Examples Input 4 4 1 2 3 2 3 4 3 4 5 4 1 6 Output 12 Input 4 2 1 2 7 3 4 8 Output Impossible Explanation In the first example, we can connect all cities with the roads: - 1 -> 2 with cost 3 - 2 -> 3 with cost 4 - 3 -> 4 with cost 5 Total cost = 3 + 4 + 5 = 12 In the second example, there is no road connecting the set {1, 2} with the set {3, 4}, so it\'s impossible to connect all cities.","solution":"def find_minimum_cost(n, m, roads): Function to find the minimum cost to connect all cities. If it\'s not possible to connect all cities, return \\"Impossible\\". # If there are no roads and more than one city, it\'s impossible to connect them if m == 0 and n > 1: return \\"Impossible\\" # Kruskal\'s algorithm to find MST parent = list(range(n + 1)) # Initially each node is its own parent rank = [0] * (n + 1) # Rank for Union-Find def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 return True return False # Sort edges by weight roads.sort(key=lambda x: x[2]) min_cost = 0 edges_used = 0 for u, v, w in roads: if union(u, v): min_cost += w edges_used += 1 # Check if we used n-1 edges if edges_used == n - 1: return min_cost else: return \\"Impossible\\""},{"question":"You are given a string s of length n consisting of lowercase English letters. You can perform the following operation as many times as you like: select any substring of s and reverse it. For example, if n=5 and s=\\"abcde\\", you can apply one of the following operations to it (not all possible options are listed below): * Reverse the substring \\"abc\\" (from index 1 to 3). After this operation s=\\"cbade\\"; * Reverse the substring \\"de\\" (from index 4 to 5). After this operation s=\\"abced\\"; * Reverse the substring \\"bde\\" (from index 2 to 5). After this operation s=\\"aedbc\\"; Determine if it is possible to make the string a palindrome by applying a certain number of operations. Input The first line contains one positive integer t (1 ≤ t ≤ 300) — the number of test cases. Then t test cases follow. Each test case begins with a line containing one integer n (1 ≤ n ≤ 300000) — the length of the string s. The second line of each test case contains a string s of length n composed of lowercase English letters. The total length of all strings over all test cases does not exceed 300000. Output For each test case, output on a separate line: * YES, if it is possible to make the string a palindrome by applying a certain number of operations. * NO, otherwise. The letters in the words YES and NO can be output in any case. Example Input 4 3 aab 5 abcba 6 abcdef 4 adda Output YES YES NO YES","solution":"def can_be_palindrome(s): Determine if the string `s` can be rearranged to form a palindrome by reversing substrings. n = len(s) # Single character strings are palindromes if n == 1: return \'YES\' # Check if the string s can be rearranged to form a palindrome mismatches = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: mismatches += 1 # If there is at most 1 mismatch, we can make it a palindrome by reversing substrings if mismatches <= 1: return \'YES\' else: return \'NO\' def process_test_cases(t, cases): results = [] for case in cases: n, s = case results.append(can_be_palindrome(s)) return results"},{"question":"A city is constructing a new underground subway system. The construction team needs to lay down the railway tracks in a specific order, where certain parts of the track depend on the completion of others. The dependencies between the tracks can be represented as a directed acyclic graph (DAG). Your task is to determine the order in which the tracks should be laid down to ensure that all the dependencies are respected. Input The first line consists of two space-separated integers v and e (1 ≤ v, e ≤ 1000) — the number of tracks (vertices in the graph) and the number of dependencies (edges in the graph), respectively. The following e lines each contain two space-separated integers x and y (1 ≤ x, y ≤ v) — representing a directed edge from track x to track y, meaning track y cannot be laid down until track x is completed. Output Output one line containing the order in which tracks should be laid down. If there are multiple valid orders, any one of them is acceptable. Examples Input 4 2 1 2 3 4 Output 1 3 2 4 Input 6 6 1 3 1 4 2 5 3 4 4 6 5 6 Output 1 2 3 5 4 6","solution":"from collections import deque, defaultdict def find_order(v, e, edges): # Create adjacency list and indegree list for all vertices adj_list = defaultdict(list) indegree = [0] * (v + 1) # Build the graph for x, y in edges: adj_list[x].append(y) indegree[y] += 1 # Initialize queue with all vertices having indegree 0 queue = deque([i for i in range(1, v + 1) if indegree[i] == 0]) order = [] while queue: node = queue.popleft() order.append(node) # Reduce the indegree of neighboring nodes for neighbor in adj_list[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # Check if we processed all nodes if len(order) != v: return [] # If not, there was a cycle and no valid ordering exists return order # Example usage: v = 6 e = 6 edges = [(1, 3), (1, 4), (2, 5), (3, 4), (4, 6), (5, 6)] print(find_order(v, e, edges))"},{"question":"You are given a sequence of integers a = [a_1, a_2, ..., a_n] of length n. You need to generate a new sequence b = [b_1, b_2, ..., b_n] by performing the following operation for each element in a: - b_i = the sum of all elements of a greater than a_i For example, for the sequence a = [3, 1, 4, 1, 5]: - For a_1 = 3: the elements greater than 3 are [4, 5] and their sum is 9, so b_1 = 9 - For a_2 = 1: the elements greater than 1 are [3, 4, 5] and their sum is 12, so b_2 = 12 - For a_3 = 4: the elements greater than 4 are [5] and their sum is 5, so b_3 = 5 - For a_4 = 1: the elements greater than 1 are [3, 4, 5] and their sum is 12, so b_4 = 12 - For a_5 = 5: there are no elements greater than 5, so b_5 = 0 Thus, the resulting sequence b is [9, 12, 5, 12, 0]. Write a program to derive the sequence b. # Input - The first line contains an integer n (1 ≤ n ≤ 100) — the length of the sequence a. - The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9). # Output - Print n integers b_1, b_2, ..., b_n (0 ≤ b_i ≤ 10^18), the resulting sequence. # Examples Input 5 3 1 4 1 5 Output 9 12 5 12 0 Input 3 0 1 2 Output 3 2 0","solution":"def generate_sequence(n, a): b = [] for i in range(n): sum_greater = sum(x for x in a if x > a[i]) b.append(sum_greater) return b # Example usage n = 5 a = [3, 1, 4, 1, 5] print(generate_sequence(n, a)) # Expected output: [9, 12, 5, 12, 0]"},{"question":"There is a unique game played in Gridland in which players need to traverse a grid filled with various obstacles. The grid is of size `n x m`, and some cells contain obstacles that make them inaccessible. The player starts from the top-left corner of the grid and needs to reach the bottom-right corner. The player can move in two directions: right or down. Given the grid, determine the total number of unique paths the player can take to get from the top-left corner to the bottom-right corner without passing through any obstacles. If the player cannot reach the bottom-right corner, return 0. Input The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 50), denoting the number of rows and columns of the grid, respectively. The next `n` lines contain `m` characters each, where each character is either a \'.\' (representing an empty cell) or a \'#\' (representing an obstacle). Output Print a single integer representing the number of unique paths that exist from the top-left corner to the bottom-right corner. Example Input 3 3 . . . . # . . . . Output 2 Input 3 3 . # . # . # . # . Output 0 Note For the first sample, the unique paths from the top-left to the bottom-right corner are: 1. Down → Down → Right → Right 2. Right → Down → Down → Right For the second sample, there is no available path from the top-left to the bottom-right corner due to obstacles blocking the way.","solution":"def unique_paths_with_obstacles(grid): n = len(grid) m = len(grid[0]) # If starting point or ending point is an obstacle, return 0 if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 # Initialize a 2D dp array with 0s dp = [[0] * m for _ in range(n)] # Starting point dp[0][0] = 1 # Fill the dp array for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] def number_of_unique_paths(n, m, grid): processed_grid = [row.replace(\' \', \'\') for row in grid] return unique_paths_with_obstacles(processed_grid)"},{"question":"You are given a string representing a chemical equation. The string consists of alphanumeric characters and symbols indicating elements, quantities, reactants, and products. The equation follows the traditional format: `Reactants -> Products`, where each element is represented by its chemical symbol (e.g., H for Hydrogen, O for Oxygen), possibly followed by a numeric subscript indicating the number of atoms. The entire equation is a valid chemical equation and there are no parentheses. Your task is to parse the equation and determine the total number of atoms for each element on both the reactant and the product sides, and then check if the equation is balanced. An equation is considered balanced if for each element the total number of atoms on the reactant side is equal to the total number of atoms on the product side. Input A single string representing the chemical equation. The length of the string is between 1 and 1000. The string contains only valid chemical symbols, digits, spaces, the arrow symbol \'->\', and optionally +/- signs. The reactants and products are separated and the equation is properly formatted. Output Print \\"Balanced\\" if the chemical equation is balanced, otherwise print \\"Unbalanced\\". Example Input: `H2 + O2 -> H2O` Output: `Balanced` Input: `C2H6 + O2 -> CO2 + H2O` Output: `Unbalanced` Note: 1. Chemical symbols in the string may contain one or two letters, with the first letter always being uppercase and the second letter (if present) always being lowercase. 2. Quantities of elements (if greater than 1) immediately follow their respective symbols. 3. Elements within a molecule are immediately adjacent (e.g., H2O represents two hydrogen atoms and one oxygen atom). 4. Each molecule within a reactant or product is separated by a space, \'+\', or \'->\'.","solution":"import re from collections import defaultdict def parse_chemical_formula(formula: str): Parse a chemical formula into a dictionary of elements and their counts. Args: formula (str): A string representing the chemical formula. Returns: dict: A dictionary with elements as keys and their counts as values. element_counts = defaultdict(int) pattern = re.compile(r\'([A-Z][a-z]*)(d*)\') matches = pattern.findall(formula) for element, count in matches: count = int(count) if count else 1 element_counts[element] += count return element_counts def parse_equation(equation: str): Parse the entire chemical equation and check for balance. Args: equation (str): A string representing the chemical equation. Returns: bool: True if the equation is balanced, False otherwise. reactants, products = equation.split(\'->\') def sum_elements_part(part): total_counts = defaultdict(int) for molecule in part.split(\'+\'): molecule = molecule.strip() molecule_counts = parse_chemical_formula(molecule) for element, count in molecule_counts.items(): total_counts[element] += count return total_counts reactant_totals = sum_elements_part(reactants) product_totals = sum_elements_part(products) return reactant_totals == product_totals def is_chemical_equation_balanced(equation: str): balance = parse_equation(equation) if balance: print(\\"Balanced\\") else: print(\\"Unbalanced\\")"},{"question":"In the kingdom of Arlandia, there exists an ancient network of magical gates that connect various enchanted locations. The locations are arranged in such a way that from every location, there exists exactly one path to any other location. Each year, precisely one of the following events might take place: 1. A new gate is constructed between two locations a and b. Moving directly from a to b through this gate increases the magical power of the traveler by a certain value p. 2. A wizard wants to travel from location x to location y and desires to accumulate the maximum possible magical power along the way. He requires help to determine the path that will give him the highest boost in magical power. Given the sequence of events, your task is to ensure that the wizard travels with the maximum magical power from his starting location to his destination every time event type 2 occurs. # Input The first line contains an integer `n` (2 ≤ n ≤ 100,000) — the number of locations. The next line contains an integer `m` (1 ≤ m ≤ 100,000) — the number of events. Then follow `m` lines describing the events. Each event is represented either by: - `1 a b p` (1 ≤ a, b ≤ n, 1 ≤ p ≤ 10^9) indicating a new gate with magical power `p` being constructed between locations `a` and `b`, or - `2 x y` (1 ≤ x, y ≤ n, x ≠ y) where a wizard wants to travel from location `x` to location `y` and seeks the path with the maximum magical power. # Output For each event of the second type (travel query), print a single integer — the maximum magical power the wizard can accumulate by traveling from location `x` to location `y`. # Examples Input: ``` 4 5 1 1 2 10 1 2 3 20 1 3 4 30 2 1 4 2 1 3 ``` Output: ``` 60 30 ``` # Explanation In the first example: 1. A gate between location 1 and location 2 is constructed with a power of 10. 2. A gate between location 2 and location 3 is constructed with a power of 20. 3. A gate between location 3 and location 4 is constructed with a power of 30. For the query `2 1 4`, the wizard travels from location 1 to location 4 along the path 1→2→3→4, accumulating a total power of 10 + 20 + 30 = 60. For the query `2 1 3`, the wizard travels from location 1 to location 3 along the path 1→2→3, accumulating a total power of 10 + 20 = 30.","solution":"class MagicRoutes: def __init__(self): self.graph = {} def add_gate(self, a, b, p): if a not in self.graph: self.graph[a] = [] if b not in self.graph: self.graph[b] = [] self.graph[a].append((b, p)) self.graph[b].append((a, p)) def max_power_path(self, x, y): visited = set() def dfs(node, target, path_power): if node == target: return path_power visited.add(node) max_power = 0 for neighbor, power in self.graph.get(node, []): if neighbor not in visited: max_power = max(max_power, dfs(neighbor, target, path_power + power)) return max_power return dfs(x, y, 0) def process_events(n, events): magic_routes = MagicRoutes() results = [] for event in events: if event[0] == 1: _, a, b, p = event magic_routes.add_gate(a, b, p) elif event[0] == 2: _, x, y = event result = magic_routes.max_power_path(x, y) results.append(result) return results"}]'),S={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},Y={class:"card-container"},F={key:0,class:"empty-state"},C=["disabled"],P={key:0},R={key:1};function M(s,e,u,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):h("",!0)]),t("div",Y,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+l(a.searchQuery)+'". ',1)):h("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,C)):h("",!0)])}const z=d(S,[["render",M],["__scopeId","data-v-53457620"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/51.md","filePath":"deepseek/51.md"}'),D={name:"deepseek/51.md"},U=Object.assign(D,{setup(s){return(e,u)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,U as default};
