import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as u,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,l,m,a,r){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(k,[["render",O],["__scopeId","data-v-965a79f9"]]),S=JSON.parse('[{"question":"Alicia loves playing with numbers, and she has a new game for You. She will give you an array of integers and multiple queries. The task is to process the queries and return the results accordingly. There are three types of queries: - Query type 1: Alicia gives you an integer i and k, you need to add k to the i^{th} element of the array. - Query type 2: Alicia gives you an integer i and you need to print the i^{th} element of the array. - Query type 3: Alicia gives you two integers i, j, you need to find the sum of the elements between i^{th} and j^{th} indices (both inclusive). -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - The first line of each test case contains two space-separated integers N (length of array) and Q (number of queries). - The second line contains N space-separated integers, the elements of the array. - Next Q lines follow. - For a query of type 1, there will be a line containing three space-separated integers 1, i, and k. - For a query of type 2, there will be a line containing two space-separated integers 2 and i. - For a query of type 3, there will be a line containing three space-separated integers 3, i, and j. -----Output:----- For each query of type 2, print the i^{th} element of the array. For each query of type 3, print the sum of elements from i^{th} to j^{th} indices (both inclusive). -----Constraints----- - 1 leq T leq 10^2 - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq a[i] leq 10^9 - 1 leq k leq 10^9 - 0 leq i,j leq N-1 -----Sample Input----- 1 5 3 1 2 3 4 5 1 2 10 2 2 3 1 3 -----Sample Output----- 13 9 -----EXPLANATION:----- The initial array is [1, 2, 3, 4, 5]. For the first query, we add 10 to the element at index 2, so the array becomes [1, 2, 13, 4, 5]. For the second query, the element at index 2 is 13. For the third query, the sum of elements from index 1 to index 3 is 2 + 13 + 4 = 19.","solution":"def process_queries(T, test_cases): results = [] for t in range(T): N, Q = test_cases[t][0] array = test_cases[t][1] queries = test_cases[t][2] for query in queries: if query[0] == 1: # Query type 1: add k to the i-th element i, k = query[1], query[2] array[i] += k elif query[0] == 2: # Query type 2: print the i-th element i = query[1] results.append(array[i]) elif query[0] == 3: # Query type 3: sum from i-th to j-th indices i, j = query[1], query[2] results.append(sum(array[i:j+1])) return results # Now parse the input and call the above function def main(input_lines): index = 0 T = int(input_lines[index]) index += 1 test_cases = [] for _ in range(T): N, Q = map(int, input_lines[index].split()) index += 1 array = list(map(int, input_lines[index].split())) index += 1 queries = [] for _ in range(Q): queries.append(list(map(int, input_lines[index].split()))) index += 1 test_cases.append(((N, Q), array, queries)) results = process_queries(T, test_cases) for result in results: print(result) # Example usage: input_lines = [ \\"1\\", \\"5 3\\", \\"1 2 3 4 5\\", \\"1 2 10\\", \\"2 2\\", \\"3 1 3\\" ] main(input_lines)"},{"question":"Write a function that determines the maximum possible sum of a contiguous subarray of a given integer array. This problem is a classic example used to test the understanding of dynamic programming principles. To make it interesting, you are not only required to determine the maximum sum, but also the subarray that produces this sum. If multiple subarrays produce the same maximum sum, return the subarray which appears first. Input format: An integer array represented as a single string of space-separated integers. Output format: The maximum sum as an integer and the subarray as an array of integers. Constraints: - The array will contain at least one integer. - The elements of the array are between -10^5 to 10^5. - The length of the array is between 1 and 10^5. SAMPLE INPUT 1 -2 3 4 -1 2 1 -5 4 SAMPLE OUTPUT 9 [3, 4, -1, 2, 1]","solution":"def max_subarray(array_str): Returns the maximum sum of a contiguous subarray and the subarray itself. nums = list(map(int, array_str.split())) max_sum = float(\'-inf\') current_sum = 0 start = end = s = 0 for i in range(len(nums)): if current_sum <= 0: current_sum = nums[i] s = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = s end = i return max_sum, nums[start:end+1]"},{"question":"Create a function that receives a string input representing a formula in a very simplified version of a spreadsheet. The formula may contain only basic arithmetic operations (`+`, `-`, `*`, `/`), and references to cells. Cells are identified by letters (A-Z) followed by numbers (1-99). The function should interpret the formula and return the calculated result. Assume that the values of the referenced cells are provided in a dictionary where the keys are the cell identifiers and the values are the cell values (only integers). For example: ```python You get a formula and a dictionary with cell values as input: formula = \\"A1 + B2 * 3\\" cell_values = {\\"A1\\": 5, \\"B2\\": 4} The result should be: 17 ``` A few more examples: ```python formula = \\"C1 - D1 / E1\\" cell_values = {\\"C1\\": 10, \\"D1\\": 6, \\"E1\\": 2} ---> The result should be: 7 formula = \\"F3 * 2 + G4\\" cell_values = {\\"F3\\": 3, \\"G4\\": 8} ---> The result should be: 14 ``` Note: You can assume that cell references will always be in uppercase and the input formula will not contain any spaces except between operands and operators.","solution":"import re def evaluate_formula(formula, cell_values): Evaluates a formula in a simplified version of a spreadsheet. :param formula: a string containing the formula to be evaluated :param cell_values: a dictionary containing the cell values :return: the evaluated result of the formula def replace_match(match): cell = match.group(0) return str(cell_values.get(cell, 0)) # Replace the cell references with their corresponding values formula_with_values = re.sub(r\'[A-Z][1-9][0-9]?\', replace_match, formula) # Evaluate the formula result = eval(formula_with_values) return result"},{"question":"# Task Given a 2D grid of size `n x m` representing a maze where `1` represents walls and `0` represents paths, determine the shortest path from the top-left corner `(0,0)` to the bottom-right corner `(n-1,m-1)` while avoiding the walls. You can move up, down, left, or right, but you cannot move through the walls. If there is no possible path, return `-1`. # Example For `grid = [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]`, the output should be `7`. The shortest path from `(0, 0)` to `(4, 4)` is of length `7` (0-index based): ``` [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]] ``` Steps (0,0) → (1,0) → (2,0) → (2,1) → (2,2) → (3,2) → (4,2) → (4,3) → (4,4). For `grid = [[0, 1], [1, 0]]`, the output should be `-1`. There is no path from `(0, 0)` to `(1, 1)`. # Input/Output - `[input]` 2D integer array `grid` `0` represents a path and `1` represents a wall. Constraints: `2 ≤ grid.length ≤ 50` `2 ≤ grid[0].length ≤ 50` - `[output]` an integer The length of the shortest path from `(0, 0)` to `(n-1, m-1)` while avoiding walls; return `-1` if no path exists.","solution":"from collections import deque def shortest_path_maze(grid): Function to find the shortest path in a maze from top-left to bottom-right. Returns the length of the shortest path or -1 if no path exists. if not grid or not grid[0]: return -1 n, m = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 1)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Given a list of integers, your task is to write a function that returns the longest consecutive subsequence of equal elements in that list. If there are multiple subsequences of the same maximum length, return the first one encountered. For example: ```python longest_consecutive_subsequence([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5]) => [4, 4, 4, 4] longest_consecutive_subsequence([1, 1, 2, 2, 2, 3, 3, 1, 1, 1, 1]) => [1, 1, 1, 1] longest_consecutive_subsequence([5, 5, 5, 2, 2, 3, 3, 3]) => [5, 5, 5] longest_consecutive_subsequence([1]) => [1] longest_consecutive_subsequence([]) => [] ``` Assumptions: - The list may contain positive or negative integers. - You may assume that the list does not contain any non-integer values. - If the input list is empty, return an empty list. Function signature: ```python def longest_consecutive_subsequence(lst: List[int]) -> List[int]: ```","solution":"from typing import List def longest_consecutive_subsequence(lst: List[int]) -> List[int]: if not lst: return [] max_length = 0 max_subseq = [] current_subseq = [lst[0]] for i in range(1, len(lst)): if lst[i] == lst[i-1]: current_subseq.append(lst[i]) else: if len(current_subseq) > max_length: max_length = len(current_subseq) max_subseq = current_subseq current_subseq = [lst[i]] # Check the last subsequence if len(current_subseq) > max_length: max_subseq = current_subseq return max_subseq"},{"question":"Tommy is organizing a sports league with `n` distinct teams labeled from 1 to `n`. He wants to schedule matches such that each team plays with exactly one other team. However, due to various constraints, not all teams can play against each other. Tommy seeks your help to find if it\'s possible to schedule the matches in a way where every team gets to play exactly one match. Each match is a bidirectional link between two teams, and Tommy gives you a list of valid pairs ( (a, b) ) where team `a` can play against team `b`. You need to determine if it\'s possible to form ( frac{n}{2} ) matches (if `n` is even) or ( frac{n - 1}{2} ) matches (if `n` is odd) from the given pairs such that each team is involved in exactly one match. If it\'s possible, provide one such scheduling, otherwise, output `-1`. -----Input----- The first line contains two integers `n` ( (1 leq n leq 10^5) ) and `m` ( (0 leq m leq 10^5) ) — the number of teams and the number of pairs, respectively. Each of the following `m` lines contains two integers `a` and `b` ( 1 leq a, b leq n ), which means team `a` can play against team `b`. -----Output----- If it\'s possible to schedule the matches, print the pairs of teams for the matches, one pair per line. Each pair should be of the form ( a space b ) where `a` and `b` are the labels of the two teams in the match. If there are multiple solutions, you can print any. If it\'s not possible to schedule the matches, print `-1`. -----Examples----- Input 4 3 1 2 2 3 3 4 Output 1 2 3 4 Input 3 2 1 2 2 3 Output -1 Input 6 5 1 2 3 4 5 6 1 3 2 4 Output 1 2 3 4 5 6 -----Note----- In the first example, we can form the pairs (1, 2) and (3, 4). In the second example, it\'s impossible to schedule the matches in such a way where each team plays exactly one match. In the third example, one possible solution is to form the pairs (1, 2), (3, 4), and (5, 6). There might be other valid match schedules as well.","solution":"def find_matches(n, m, pairs): from collections import defaultdict import networkx as nx if n % 2 == 1: return -1 graph = defaultdict(list) for a, b in pairs: graph[a].append(b) graph[b].append(a) matching = [] visited = set() def dfs(node, match): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: match[node] = neighbor match[neighbor] = node visited.add(neighbor) return True return False match = {} for node in range(1, n + 1): if node not in visited: if not dfs(node, match): return -1 result = [] matched = set() for a in match: b = match[a] if (a, b) not in matched and (b, a) not in matched: result.append((a, b)) matched.add((a, b)) if len(result) == n // 2: return result else: return -1 # Wrapper to accept input in the required format def schedule_matches(n, m, pair_list): result = find_matches(n, m, pair_list) if result == -1: print(-1) else: for a, b in result: print(a, b)"},{"question":"You are given an integer matrix with `n` rows and `m` columns. Your task is to find the sum of the maximum elements in each submatrix of size `p x q`. A submatrix is a contiguous block of cells within the original matrix, and its size is defined by dimensions `p` rows and `q` columns. To make the problem more manageable, the sum should be taken modulo `1000000007`. -----Input----- The first line of input contains three integers `n`, `m`, and `k` (1 le n le 400, 1 le m le 400, 1 le k le min(n, m)) — the number of rows and columns of the matrix, and the side length of the square submatrices. The next `n` lines each contain `m` integers, where each integer is between -10^9 and 10^9, inclusive. These `n` lines describe the rows of the matrix. -----Output----- Print a single integer — the sum of the maximum elements in each submatrix of size `k x k` modulo `1000000007`. -----Examples----- Input 3 3 2 1 2 3 4 5 6 7 8 9 Output 45 Input 2 4 1 -1 -2 -3 -4 0 -1 -5 -6 Output -10 Input 3 3 3 1 1 1 1 2 2 1 1 1 Output 2 -----Note----- In the first example, there are four 2 times 2 submatrices: * Top-left (2, 2): maximum element is 5 * Top-right (2, 2): maximum element is 6 * Bottom-left (2, 2): maximum element is 8 * Bottom-right (2, 2): maximum element is 9 The sum is 5 + 6 + 8 + 9 = 28 modulo `1000000007`. In the second example, there are eight 1 times 1 submatrices, and the maximum elements are the elements themselves, so the sum is -1 - 2 - 3 - 4 + 0 - 1 - 5 - 6 = -22 modulo `1000000007`, which is 999999985 after taking modulo `1000000007`. In the third example, there is only one 3 x 3 submatrix and the maximum element is \'2\'.","solution":"def max_submatrix_sum(n, m, k, matrix): MOD = 1000000007 # Calculate the maximum in all k x k submatrices max_elements = [] for i in range(n - k + 1): for j in range(m - k + 1): max_element = max(matrix[x][y] for x in range(i, i + k) for y in range(j, j + k)) max_elements.append(max_element) # Compute the sum and take modulo result = sum(max_elements) % MOD return result"},{"question":"You are given a string consisting of only lowercase letters and need to determine whether it can be rearranged into a palindrome. A palindrome is a word or phrase that reads the same forward and backward (ignoring spaces, capitalization, and punctuation). Write a function called `canFormPalindrome` (or `can_form_palindrome`) that takes a single string input and returns `true` if the string can be rearranged to form a palindrome, otherwise, return `false`. For example: ``` Input: \\"civic\\" Output: true // \\"civic\\" is already a palindrome Input: \\"ivicc\\" Output: true // Can be rearranged to \\"civic\\" Input: \\"hello\\" Output: false // Cannot form a palindrome Input: \\"aabb\\" Output: true // Can be rearranged to \\"abba\\" or \\"baab\\" ``` **Constraints:** - The input string will have a length between 1 and 1000. - The input string contains only lowercase English letters (\'a\'-\'z\').","solution":"from collections import Counter def can_form_palindrome(s): Determine if the given string can be rearranged to form a palindrome. Parameters: s (str): Input string consisting of only lowercase letters. Returns: bool: True if the string can be rearranged to form a palindrome, otherwise False. # Count the frequency of each character in the string counter = Counter(s) # A string can be rearranged to form a palindrome if at most one character # has an odd count (for the center position in an odd length palindrome). odd_count = sum(1 for count in counter.values() if count % 2 != 0) return odd_count <= 1"},{"question":"You are organizing a marathon event and need to assign participants into groups based on their running speeds. Given that participants are segregated into groups such that the fastest and the slowest runners in the same group do not differ in their speeds by more than a given threshold value, you must determine the minimum number of groups required to accommodate all participants. -----Input----- The first line contains an integer 1 leq N leq 100, indicating the number of participants. The second line contains N integers, representing the running speeds of each participant in meters per second. Each speed value is a positive integer between 1 and 1000. The third line contains a single integer 1 leq T leq 100, denoting the maximum allowed difference in speed within any group. -----Output----- Print a single integer that represents the minimum number of groups required to accommodate all participants according to the given condition. -----Example----- Sample Input: 5 2 3 10 11 8 2 Sample Output: 3 Sample Explanation: One possible solution is to group participants with speeds [2, 3], [8], and [10, 11], resulting in three groups where the speed difference within each group does not exceed the threshold of 2.","solution":"def min_groups(n, speeds, t): Given the number of participants and their running speeds along with a threshold, this function calculates the minimum number of groups such that the difference in running speeds within any group does not exceed the threshold. speeds.sort() groups = 0 i = 0 while i < n: groups += 1 start_speed = speeds[i] while i < n and speeds[i] - start_speed <= t: i += 1 return groups"},{"question":"Given a Binary Search Tree and an integer key. The task is to delete the node with the given key from the BST and return the new root. Example 1: Input: 5 / 3 7 / / 2 4 6 8 Key: 3 Output: 5 / 2 7 / 4 6 8 Example 2: Input: 5 / 3 7 / / 2 4 6 8 Key: 5 Output: 6 / 3 7 / 2 4 8 Your Task: The task is to complete the function deleteNode() which takes root and key as arguments and returns the new root of the BST. If the key does not exist in the tree, return the original tree. Expected Time Complexity: O(Height of the BST) Expected Auxiliary Space: O(Height of the BST). Constraints: 0 <= N <= 10^{4} 1 <= key <= 10^{4}","solution":"class TreeNode: def __init__(self, key): self.val = key self.left = None self.right = None def deleteNode(root, key): if not root: return root if key < root.val: root.left = deleteNode(root.left, key) elif key > root.val: root.right = deleteNode(root.right, key) else: if not root.left: return root.right elif not root.right: return root.left temp = minValueNode(root.right) root.val = temp.val root.right = deleteNode(root.right, temp.val) return root def minValueNode(node): current = node while current.left: current = current.left return current def inorderTraversal(root): result = [] if root: result = inorderTraversal(root.left) result.append(root.val) result = result + inorderTraversal(root.right) return result"},{"question":"You are given two matrices `A` and `B` of size `n x m` and `m x p` respectively. Implement a function to multiply these matrices and output the resulting matrix. # Input Format - The first line of input consists of two integers, `n` and `m` (the number of rows and columns of matrix `A` respectively). - The next `n` lines each contain `m` integers representing the elements of matrix `A`. - The following line contains two integers, `m` and `p` (the number of rows and columns of matrix `B` respectively). - The next `m` lines each contain `p` integers representing the elements of matrix `B`. # Output Format - Output the resulting matrix `C` after multiplication, consisting of `n` rows and `p` columns. Each row should be printed on a new line and the elements of the row should be space-separated. # Constraints - 1 leq n, m, p leq 100 - All integer values of the matrix elements fall in the range -1000 leq A[i][j], B[i][j] leq 1000 # Sample Input ``` 2 3 1 2 3 4 5 6 3 2 7 8 9 10 11 12 ``` # Sample Output ``` 58 64 139 154 ``` # Explanation - The first matrix `A` is: ``` 1 2 3 4 5 6 ``` - The second matrix `B` is: ``` 7 8 9 10 11 12 ``` - The resulting matrix `C` after multiplication is: ``` 58 64 139 154 ```","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B, where A is of size n x m and B is of size m x p. Returns the resulting matrix of size n x p. n = len(A) m = len(A[0]) p = len(B[0]) # Initialize result matrix with zeroes C = [[0] * p for _ in range(n)] # Perform matrix multiplication for i in range(n): for j in range(p): for k in range(m): C[i][j] += A[i][k] * B[k][j] return C"},{"question":"Alex is a software developer working on a very important project. He needs to process a list of integers and determine if there\'s a subarray (contiguous part of an array) that adds up to a given target sum S. Due to the nature of the project, performance is critical, so Alex needs an efficient algorithm to solve this problem. Can you help Alex by writing a function that determines if a subarray with the given sum exists? -----Input----- The first line contains an integer N (1 ≤ N ≤ 10^5) representing the number of elements in the array. The second line contains N integers representing the array, where each integer is in the range -10^4 to 10^4. The third line contains a single integer S which is the target sum (|S| ≤ 10^8). -----Output----- Print \\"YES\\" if there exists at least one subarray with the sum equal to S, otherwise print \\"NO\\". -----Example----- Input 5 1 2 3 4 5 9 Output YES -----Example----- Input 4 1 -1 5 -2 2 Output YES -----Example----- Input 4 1 2 3 4 15 Output NO -----Note----- In the first example, the subarray [2, 3, 4] adds up to 9. In the second example, the subarray [5, -2] adds up to 2. In the third example, no subarray adds up to 15.","solution":"def has_subarray_with_sum(arr, target_sum): Determines if there is a subarray with the given sum in the array. :param arr: List of integers :param target_sum: Target sum to be checked :return: \\"YES\\" if such a subarray exists, otherwise \\"NO\\" current_sum = 0 sum_map = {} for num in arr: current_sum += num if current_sum == target_sum: return \\"YES\\" if current_sum - target_sum in sum_map: return \\"YES\\" sum_map[current_sum] = True return \\"NO\\""},{"question":"You are given an array of 2n integers where every integer in the range from 1 to n appears exactly twice, except for one integer that appears only once. Write an algorithm to find this unique integer. -----Input----- The first line contains an integer n (1le nle 10^5). The second line contains 2n-1 integers in the range from 1 to n. -----Output----- Print the unique integer. -----Examples----- Sample Input 1: 4 1 2 3 2 1 4 3 Sample Output 1: 4 Sample Input 2: 3 1 2 3 2 1 Sample Output 2: 3","solution":"def find_unique_integer(n, numbers): Returns the unique integer that appears only once in the list \'numbers\' where every integer from 1 to n appears exactly twice except one which appears once. number_count = {} for number in numbers: if number in number_count: number_count[number] += 1 else: number_count[number] = 1 for number, count in number_count.items(): if count == 1: return number"},{"question":"For a given number M, generate the Pascal\'s triangle up to M rows. Pascal\'s triangle is a triangular array of the binomial coefficients. The rows of Pascal\'s triangle are conventionally enumerated starting with row n = 0 at the top. Example 1: Input: M = 4 Output: [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1] ] Explanation: For M = 4, the Pascal Triangle will have 4 rows starting from 0 to 3. Example 2: Input: M = 5 Output: [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] Explanation: For M = 5, the Pascal Triangle will have 5 rows starting from 0 to 4. Your Task: You don\'t need to read input or print anything. Your task is to complete the function pascalTriangle() which takes an integer M as an input parameter and returns a list of lists, each representing a row of Pascal\'s Triangle. Expected Time Complexity: O(M^2) Expected Auxiliary Space: O(1) Constraints: 1 ≤ M ≤ 30","solution":"def pascalTriangle(M): Generates Pascal\'s Triangle up to M rows. Parameters: M (int): number of rows to be generated Returns: List[List[int]]: Pascal\'s Triangle as a list of lists if M < 1: return [] triangle = [[1]] for i in range(1, M): prev_row = triangle[-1] current_row = [1] for j in range(1, i): current_row.append(prev_row[j-1] + prev_row[j]) current_row.append(1) triangle.append(current_row) return triangle"},{"question":"Given an array of n positive integers and a target integer T, find the length of the shortest contiguous subarray whose sum is equal to or greater than T. If there is no such subarray, return 0. Constraints: * 1 le n le 10^5 * 1 le array elements le 10^4 * 1 le T le 10^9 Input: The first line contains two integers, n (the number of elements in the array) and T (the target sum). The second line contains n positive integers representing the elements of the array. Output: Print the length of the shortest contiguous subarray whose sum is equal to or greater than T. If no such subarray exists, print 0. Examples: Input: 5 15 5 1 3 5 10 7 Output: 2 Input: 7 20 2 3 1 2 4 3 Output: 0 Explanation: In the first example, the shortest subarray with sum at least 15 is [10, 7], which has length 2. In the second example, since no subarray sums to 20 or more, the output is 0.","solution":"def shortest_subarray_length(arr, T): Given an array of n positive integers and a target integer T, find the length of the shortest contiguous subarray whose sum is equal to or greater than T. If there is no such subarray, return 0. n = len(arr) min_length = float(\'inf\') current_sum = 0 start_index = 0 for end_index in range(n): current_sum += arr[end_index] while current_sum >= T: min_length = min(min_length, end_index - start_index + 1) current_sum -= arr[start_index] start_index += 1 return min_length if min_length != float(\'inf\') else 0 def parse_input(input_text): lines = input_text.strip().split(\\"n\\") n, T = map(int, lines[0].split()) arr = list(map(int, lines[1].split())) return arr, T"},{"question":"You are given a string S consisting of lowercase English letters. You can perform the following operation any (possibly zero) number of times: Choose two adjacent characters in the string that are the same and remove them both from the string. Find the maximum number of different characters that can remain in the string after performing the operation any number of times. ------ Input Format ------ - The first line contains an integer T denoting the number of test cases. The T test cases then follow. - The first line of each test case contains a string S. ------ Output Format ------ For each test case, output the maximum number of distinct characters remaining in the string after performing any number of operations. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 Each character of the string S will be a lowercase English letter. ------ Sample Input 1 ------ 2 abbaca aabbcc ------ Sample Output 1 ------ 2 0 ------ Explanation 1 ------ - Test case 1: The maximum number of different characters that can remain in the string after performing some finite number of operations on the given string is 2. The string can be transformed as follows: - \\"abbaca\\" → Remove adjacent \'bb\' → \\"aaca\\" → Remove adjacent \'aa\' → \\"ca\\". The remaining string \\"ca\\" has 2 different characters. - Test case 2: The maximum number of different characters that can remain in the string after performing some finite number of operations on the given string is 0. The string can be transformed as follows: - \\"aabbcc\\" → Remove adjacent \'aa\' → \\"bbcc\\" → Remove adjacent \'bb\' → \\"cc\\" → Remove adjacent \'cc\' → \\"\\". The remaining string \\"\\" has 0 different characters.","solution":"def max_distinct_characters(S): Returns the maximum number of different characters that can remain in the string S after performing the operation of removing adjacent same characters any number of times. stack = [] for char in S: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return len(set(stack)) def solve(T, test_cases): results = [] for S in test_cases: results.append(max_distinct_characters(S)) return results"},{"question":"Given a list of integers, write two functions, `second_max` and `second_min`. `second_max` should return the second largest number in the list, and `second_min` should return the second smallest number in the list. If the list contains duplicate elements, they should still be considered separate entries when determining the second highest or second lowest number. You can assume the list will always contain at least two distinct integers. # Examples ```python second_max([4, 6, 2, 1, 9, 63, -134, 566]) returns 63 second_min([-52, 56, 30, 29, -54, 0, -110]) returns -54 second_max([5, 5, 5, 2]) returns 2 second_min([42, 54, 65, 87, 0]) returns 42 ``` # Notes - You must use built-in functions to sort or iterate efficiently to find the second highest and second lowest numbers. - Ensure your function handles edge cases such as lists with duplicate numbers correctly.","solution":"def second_max(numbers): Returns the second largest number in the list. unique_numbers = list(set(numbers)) unique_numbers.sort() return unique_numbers[-2] def second_min(numbers): Returns the second smallest number in the list. unique_numbers = list(set(numbers)) unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a function, `balancedBrackets`, that takes a string containing various types of brackets (i.e., `()`, `[]`, `{}`) and determines if the brackets are properly balanced. Return `true` if the input string has balanced brackets and `false` otherwise. For example: ```python balancedBrackets(\\"([])\\") # returns: true balancedBrackets(\\"([)]\\") # returns: false balancedBrackets(\\"{[()]}\\") # returns: true balancedBrackets(\\"{[(])}\\") # returns: false balancedBrackets(\\"(((\\") # returns: false ```","solution":"def balancedBrackets(s): Determines if the brackets in the input string are properly balanced. Args: s (str): A string containing various types of brackets. Returns: bool: True if the brackets are balanced, False otherwise. stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: continue return stack == []"},{"question":"You are given a sequence of numbers where every number appears twice except for one number which only appears once. Your task is to identify the number that appears only once. You must solve this problem with a linear runtime complexity and without using extra memory for storage. *-----Input-----* The input consists of a single line which contains an integer array with length n (1 leq n leq 10^6) where every element is a non-negative integer. The array has the property that every element appears twice except for one element which appears only once. *-----Output-----* Output a single line containing the integer that appears only once. *-----Example-----* **Input:** [2, 2, 3, 4, 4, 5, 5] **Output:** 3 **Input:** [1, 1, 2, 2, 3] **Output:** 3 **Note:** The solution should have a linear runtime complexity, implying that a solution iterating over the entire array once is required. Hence, techniques making use of additional memory to store counts of items (such as a direct use of dictionaries or hash maps) are discouraged as they would increase the space complexity.","solution":"def find_unique_number(arr): Finds the number that appears only once in the array where every other number appears twice. :param arr: List[int] - A list of non-negative integers :return: int - The number that appears only once unique_number = 0 for num in arr: unique_number ^= num return unique_number"},{"question":"Limak is a little polar bear who is fascinated by palindromes. A palindrome is a string that reads the same forward and backward. He decides to play a game where he tries to construct the longest palindrome possible from a given string. Limak is allowed to remove any characters from the string, but he cannot rearrange them. To help him, you need to write a program that determines the longest palindromic subsequence of a given string. # Task Given a string s, find the length of the longest palindromic subsequence that can be constructed. # Input Format - The first line contains an integer n denoting the length of the string. - The second line contains the string s consisting of n lowercase English letters. # Output Format - Print a single integer representing the length of the longest palindromic subsequence. # Constraints - 1 ≤ n ≤ 3000 # Sample Input ``` 7 abacdfg ``` # Sample Output ``` 3 ``` # Explanation In the given sample, the longest palindromic subsequence is \\"aba\\" which has a length of 3. Another valid subsequence could be \\"cdc\\" or \\"dfd\\". # Note - A subsequence of a string is obtained by deleting zero or more characters from the string, keeping the order of the remaining characters. Implement a function that solves the task according to the description and constraints provided.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence. n = len(s) dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the dp table for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1]"},{"question":"A digital artist uses an integer sequence to generate artwork patterns. Given a positive integer n, the artist defines an artwork sequence A of length n that should satisfy the following constraints: 1. Each element A_i (0 ≤ i < n) in the sequence should be an integer (0 ≤ A_i < n). 2. The sequence should form a zigzag pattern, meaning A_0 < A_1 > A_2 < A_3 > ... or A_0 > A_1 < A_2 > A_3 < .... Help the digital artist generate any such sequence A. -----Input----- The single line contains an integer n (1 ≤ n ≤ 10^6). -----Output----- Print a single line with n integers representing the desired sequence A. If there are multiple valid sequences, you may print any of them. -----Examples----- Input 5 Output 0 3 2 4 1 Input 8 Output 3 7 2 6 1 5 0 4","solution":"def generate_artwork_sequence(n): Generates a sequence such that it forms a zigzag pattern. # Create an array of numbers from 0 to n-1 sequence = list(range(n)) # We will swap every adjacent pair to form a zigzag pattern for i in range(1, n, 2): if i + 1 < n: sequence[i], sequence[i + 1] = sequence[i + 1], sequence[i] return sequence"},{"question":"Given an array of non-negative integers, you need to find a special number in the array, defined as the smallest non-negative integer that is not present in the array. However, the array may also contain negative integers and this should not affect your result. **Input:** - An array of integers `arr` of size `n` (1 ≤ n ≤ 10^5), where `-10^6 ≤ arr[i] ≤ 10^6` for all `0 ≤ i < n`. **Output:** - The smallest non-negative integer that is not present in the array. **Example 1:** ``` Input: arr = [3, 4, -1, 1] Output: 0 Explanation: The smallest non-negative integer not present in the array is 0. ``` **Example 2:** ``` Input: arr = [0, 1, 2, 3] Output: 4 Explanation: The smallest non-negative integer not present in the array is 4, as 0, 1, 2, and 3 are all present. ``` **Example 3:** ``` Input: arr = [-5, -10, 2, 1, 0] Output: 3 Explanation: The smallest non-negative integer not present in the array is 3, as 0, 1, and 2 are present, but 3 is not. ``` # Constraints: - You should aim for a solution with a time complexity of O(n). - Negative numbers in the array should be ignored for the purpose of finding the result. **Hint:** To achieve the goal efficiently, consider using a hash set to track the presence of each non-negative integer up to the length of the array. This allows constant-time checks for the existence of each number.","solution":"def find_smallest_missing_nonnegative(arr): Returns the smallest non-negative integer not present in the array. num_set = set() # Add all non-negative integers from the array to the set for num in arr: if num >= 0: num_set.add(num) # Find the smallest non-negative integer not in the set i = 0 while True: if i not in num_set: return i i += 1"},{"question":"**DESCRIPTION:** A software company is developing a new data processing software that takes lists of integers and performs certain operations on them. One feature they want to include is a function that, given a list of integers, returns the average of all the prime numbers within the list. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. However, if the list contains no prime numbers, the function should return 0. Your task is to implement this function. **EXAMPLES:** ``` average_primes([2, 3, 4, 5, 6, 7, 8, 9]) --> 4.25 average_primes([10, 15, 20, 25, 30]) --> 0 average_primes([11, 13, 17, 19]) --> 15.0 average_primes([1, 2, 3, 5]) --> 3.3333333333333335 ``` **RETURN:** Return the average of all the prime numbers in the list. If there are no prime numbers, return 0. The result should be a floating-point number. NOTE: - You may assume that the input list contains only positive integers. - Consider 1 as not a prime number.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise returns False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def average_primes(numbers): Returns the average of all the prime numbers in the list. If there are no prime numbers, returns 0. prime_numbers = [num for num in numbers if is_prime(num)] if not prime_numbers: return 0.0 return sum(prime_numbers) / len(prime_numbers)"},{"question":"Implement a function named `nearest_square` that takes an integer `n` as an input and returns the largest perfect square number less than or equal to `n`. A perfect square is an integer that is the square of an integer. For example, 1, 4, 9, 16, 25, and so on are perfect squares. The perfect square you find must be less than or equal to the input number `n`. If `n` is less than 1, the function should return 0. Function signature: `def nearest_square(n: int) -> int:` **Examples**: ``` nearest_square(10) should return 9 because 3^2 = 9 and that\'s the largest square number <= 10. nearest_square(15) should return 9 because 3^2 = 9 and 4^2 = 16 which is > 15. nearest_square(1) should return 1 because 1^2 = 1. nearest_square(0) should return 0 since 0 is not positive and there are no perfect squares <= 0. ```","solution":"def nearest_square(n: int) -> int: Returns the largest perfect square less than or equal to n. If n is less than 1, returns 0. if n < 1: return 0 # Find the largest integer whose square is less than or equal to n sqrt_n = int(n**0.5) return sqrt_n**2"},{"question":"You have been hired as a software developer for SunnyVale Bank to work on their transaction surveillance system. As part of the system, you need to develop a function that evaluates whether a sequence of transactions meets specific requirements. A valid sequence of transactions must meet the following criteria: 1. The sequence contains at least one deposit denoted by `D`. 2. The sequence contains at least one withdrawal denoted by `W`. 3. The sequence does not contain two consecutive withdrawals. Given a list of transactions represented by a string of characters where `D` stands for deposit and `W` stands for withdrawal, write a function to determine if the transaction sequence is valid. # Input Format - The first line contains an integer `T`, the number of transaction sequences. - The following `T` lines each contain a string of length `N`, a sequence of transactions consisting of characters `D` and `W`. # Output Format For each transaction sequence, print `YES` if the sequence is valid according to the criteria, otherwise print `NO`. # Constraints - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 10^5 - The total length of all transaction sequences combined does not exceed 10^5. # Sample Input 1 ``` 3 DDDW DW DWW ``` # Sample Output 1 ``` YES YES NO ``` # Explanation 1 1. In the first sequence \\"DDDW\\", there is at least one deposit, at least one withdrawal, and no consecutive withdrawals, hence valid. 2. In the second sequence \\"DW\\", it meets all the requirements for a valid sequence. 3. In the third sequence \\"DWW\\", there are consecutive withdrawals, so the sequence is not valid.","solution":"def is_valid_sequence(transactions): Evaluates if the sequence of transactions meets the specified requirements. Parameters: transactions (str): A string representing the sequence of transactions consisting of \'D\' and \'W\'. Returns: str: \'YES\' if the sequence is valid, \'NO\' otherwise. has_deposit = \'D\' in transactions has_withdrawal = \'W\' in transactions if not (has_deposit and has_withdrawal): return \\"NO\\" for i in range(len(transactions) - 1): if transactions[i] == \'W\' and transactions[i + 1] == \'W\': return \\"NO\\" return \\"YES\\" def evaluate_sequences(T, sequences): Evaluates multiple sequences of transactions. Parameters: T (int): Number of sequences. sequences (list of str): List of transaction sequences. Returns: list of str: List containing results for each sequence, \'YES\' or \'NO\'. results = [] for sequence in sequences: results.append(is_valid_sequence(sequence)) return results"},{"question":"# Build a Customer Greeting Function You are designing a customer greeting system for a retail store. The system should generate a personalized greeting message for customers based on the given parameters. Create a function `generate_greeting(name, time)` that takes in a customer\'s name (string) and the time of the day (string) and returns a personalized greeting message. The function should follow these rules: - If the time is \\"morning\\", greet the customer with \\"Good Morning\\". - If the time is \\"afternoon\\", greet the customer with \\"Good Afternoon\\". - If the time is \\"evening\\", greet the customer with \\"Good Evening\\". - If the time is \\"night\\", greet the customer with \\"Good Night\\". Examples ``` generate_greeting(\\"John\\", \\"morning\\") => \\"Good Morning John\\" generate_greeting(\\"Emily\\", \\"night\\") => \\"Good Night Emily\\" generate_greeting(\\"Zara\\", \\"afternoon\\") => \\"Good Afternoon Zara\\" ``` Notes * The input string `name` will contain only alphabetic characters and a single name in proper case (first character uppercase, rest lowercase). * The input string `time` will be one of the following: \\"morning\\", \\"afternoon\\", \\"evening\\", \\"night\\".","solution":"def generate_greeting(name, time): Generates a personalized greeting message based on the customer\'s name and the time of the day. Parameters: name (str): Customer\'s name. time (str): Time of the day (\\"morning\\", \\"afternoon\\", \\"evening\\", \\"night\\"). Returns: str: Personalized greeting message. greetings = { \\"morning\\": \\"Good Morning\\", \\"afternoon\\": \\"Good Afternoon\\", \\"evening\\": \\"Good Evening\\", \\"night\\": \\"Good Night\\" } if time in greetings: return f\\"{greetings[time]} {name}\\" else: raise ValueError(\\"Invalid time of day. Must be one of \'morning\', \'afternoon\', \'evening\', \'night\'\\")"},{"question":"You are given two positive integers n and k. Using these numbers, create an array of length n with elements being integers from 1 to k (both inclusive). Your task is to determine the minimum possible maximum value of the bitwise AND of all non-empty subsets of this array. The bitwise AND of a subset is the result of bitwise AND operation applied to all its elements. For example, the bitwise AND of the subset [4, 2, 8] is 4 & 2 & 8 = 0. -----Input----- The first line contains an integer t (1 le t le 10^4) — the number of test cases. The following t lines contain two integers n and k (1 le n, k le 10^9). -----Output----- For each test case, print a single integer — the minimum possible maximum value of the bitwise AND of all non-empty subsets. -----Examples----- Input 4 3 5 2 8 6 10 1 7 Output 0 0 0 7 -----Note----- - For the first test case, any array of length 3 with elements from 1 to 5 will result in a minimum possible maximum value of the bitwise AND of all its non-empty subsets being 0. - For the second test case, any array of length 2 with elements from 1 to 8 will result in a minimum possible maximum value of the bitwise AND of all its non-empty subsets being 0. - For the fourth test case, since we can only have one element in the array, the result will be the only element itself, which is 7.","solution":"def min_possible_max_and_value(t, test_cases): result = [] for n, k in test_cases: if n == 1: result.append(k) else: result.append(0) return result # Read inputs (for testing purposes) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() t = int(data[0]) test_cases = [(int(data[i * 2 + 1]), int(data[i * 2 + 2])) for i in range(t)] results = min_possible_max_and_value(t, test_cases) for res in results: print(res)"},{"question":"Given an integer array nums, return the index of the first occurrence of an element that is greater than 25. If no such element exists, return -1. Example: Input: [5, 8, 12, 30, 7, 19] Output: 3","solution":"def first_occurrence_greater_than_25(nums): Returns the index of the first occurrence of an element that is greater than 25. If no such element exists, returns -1. for idx, num in enumerate(nums): if num > 25: return idx return -1"},{"question":"A company wants to organize a coding competition and needs to manage the registration and scheduling of participants. Each participant is assigned a unique ID and registers for one or more time slots available during the competition day. While registering, participants should not have overlapping time slots. You are required to write a program that takes the number of participants and their respective time slots, and determines if any participant has overlapping or invalid time slots. If all participants have valid non-overlapping time slots, print \\"All slots are valid\\". Otherwise, print \\"Invalid slots found\\". Input The first line of input contains an integer n (1 ≤ n ≤ 10^5), denoting the number of participants. The following n lines contain the participant\'s ID and their registered time slots. Each line starts with a participant ID (a string of alphanumeric characters without spaces) followed by m pairs of integers, where each pair represents the start and end time of a slot (1 ≤ start < end ≤ 10^9). There won\'t be more than 10^5 slots in total across all participants. Output Print \\"All slots are valid\\" if there are no overlaps or invalid slots for any participant. Otherwise, print \\"Invalid slots found\\". Example Input 3 p1 1 3 4 5 p2 2 6 7 8 p3 5 9 10 12 13 14 Output All slots are valid Input 2 p1 1 3 3 5 4 6 p2 2 4 4 5 5 7 Output Invalid slots found","solution":"def check_time_slots(n, participants): Check if participants have overlapping or invalid time slots. Parameters: n (int): Number of participants participants (list of tuples): List of participants with their time slots Returns: str: \\"All slots are valid\\" if no overlaps or invalid slots, otherwise \\"Invalid slots found\\" for participant in participants: pid, slots = participant[0], participant[1:] time_intervals = [] # Parse all time slots into a tuple list (start, end) for i in range(0, len(slots), 2): start, end = slots[i], slots[i + 1] if start >= end: return \\"Invalid slots found\\" time_intervals.append((start, end)) # Sort intervals by start time time_intervals.sort() # Check for any overlap in the sorted intervals for j in range(len(time_intervals) - 1): if time_intervals[j][1] > time_intervals[j + 1][0]: return \\"Invalid slots found\\" return \\"All slots are valid\\" # Example usage: # n = 3 # participants = [ # (\\"p1\\", 1, 3, 4, 5), # (\\"p2\\", 2, 6, 7, 8), # (\\"p3\\", 5, 9, 10, 12, 13, 14) # ] # print(check_time_slots(n, participants))"},{"question":"You are tasked with developing a function to identify the longest common substring between two given strings. A substring is defined as a contiguous sequence of characters within a string. The objective is to find the length of the longest substring that appears in both strings. For example, given the strings \\"ABCDE\\" and \\"BCDFE\\", the longest common substring is \\"BCD\\", with a length of 3. Similarly, for the strings \\"HELLO\\" and \\"WORLD\\", the longest common substring is \\"O\\", with a length of 1. You are given two strings S1 and S2 and need to return an integer L representing the length of the longest common substring. Input: The input will consist of two strings S1 and S2. Output: For each test case, print the length of the longest common substring in a new line. Constraints: Each string will contain between 1 and 1000 characters, inclusive. Each character of S1 and S2 will be a lowercase letter \'a\'-\'z\'. You need to handle up to 10 test cases. SAMPLE INPUT 2 ABCDE BCDFE HELLO WORLD SAMPLE OUTPUT 3 1 Explanation Test Case #1: The longest common substring between the two strings \\"ABCDE\\" and \\"BCDFE\\" is \\"BCD\\" with a length of 3. Test Case #2: The longest common substring between the two strings \\"HELLO\\" and \\"WORLD\\" is \\"O\\" with a length of 1.","solution":"def longest_common_substring_length(s1, s2): Returns the length of the longest common substring between s1 and s2. if not s1 or not s2: return 0 m = len(s1) n = len(s2) # Create a 2D array to store lengths of longest common suffixes. dp = [[0] * (n + 1) for _ in range(m + 1)] # Length of the longest common substring max_length = 0 # Build dp table and compute max_length for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_length = max(max_length, dp[i][j]) else: dp[i][j] = 0 return max_length"},{"question":"Given an array of integers, rearrange the array such that the difference between consecutive elements is minimized, and return the rearranged array. Example 1: Input: arr = [3, 1, 6, 9, 2] Output: [1, 2, 3, 6, 9] Explanation: By sorting the array, the difference between consecutive elements is minimized. Example 2: Input: arr = [10, 20, 30, 40, 50] Output: [10, 20, 30, 40, 50] Explanation: The array is already sorted, so the difference between consecutive elements is already minimized. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rearrangeArray() which takes the array arr as input parameter and returns the rearranged array. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9","solution":"def rearrangeArray(arr): Rearranges the array such that the difference between consecutive elements is minimized by sorting the array in non-decreasing order. Args: arr (list): The list of integers to rearrange. Returns: list: The rearranged list. return sorted(arr)"},{"question":"Given a string of lowercase alphabets, write a function to determine the frequency of the most frequently occurring character. If there are multiple characters with the same highest frequency, return the frequency of any one of them. Function Description Complete the function mostFrequentCharacterFrequency in the editor below. mostFrequentCharacterFrequency has the following parameter(s): string s: a string of lowercase alphabets Returns int: the frequency of the most frequent character Input Format The first line contains the length of the string, n. The second line contains the string, s. Constraints 1leq nleq10^5 The string contains only lowercase English letters. Sample Input 8 abacabad Sample Output 4 Explanation The character \'a\' appears 4 times, which is the highest frequency in the string.","solution":"def mostFrequentCharacterFrequency(s): Returns the frequency of the most frequent character in the string s. from collections import Counter # Use Counter to get the frequency of each character frequency = Counter(s) # Find and return the maximum value in the frequency dictionary return max(frequency.values())"},{"question":"Given a sequence where each term after the first one is defined as the sum of the previous term and the number of digits in the previous term. Given an integer n, find the nth term of the sequence. Sequence: 1, 2, 3, 4, 5, 6, ............ Example 1: Input: n = 1 Output: 1 Explanation: The first term is already given as 1. Example 2: Input: n = 7 Output: 7 Explanation: The seventh term is 7. Your Task: You do not need to read input or print anything. Your task is to complete the function nthTerm() which takes n as input parameter and returns the value of the nth term. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^6","solution":"def nthTerm(n): Returns the nth term in the sequence. Since the sequence is 1, 2, 3, 4, 5, 6, ..., the nth term is simply n. return n"},{"question":"Write a function that analyzes a given string and returns the number of vowels and consonants in the string. Description A vowel is defined as any of the characters: \'a\', \'e\', \'i\', \'o\', \'u\', \'A\', \'E\', \'I\', \'O\', \'U\'. Consonants are characters that are letters but are not vowels. Function Signature ```python def count_vowels_and_consonants(input_string: str) -> Tuple[int, int]: ``` # Parameters - `input_string` (str): A string consisting of alphabets and other characters. # Returns - `Tuple[int, int]`: A tuple where the first element is the number of vowels and the second element is the number of consonants. # Constraints - The length of `input_string` will be a non-negative integer no greater than 100000. - Input string contains only printable ASCII characters. # Example ```python input_string = \\"Hello World!\\" Output: (3, 7) Explanation: Vowels: \'e\', \'o\', \'o\' Consonants: \'H\', \'l\', \'l\', \'W\', \'r\', \'l\', \'d\' ``` # Notes - The function should ignore non-alphabetic characters when counting vowels and consonants. - Ensure the function runs efficiently with a time complexity close to O(n) where n is the length of the input string.","solution":"from typing import Tuple def count_vowels_and_consonants(input_string: str) -> Tuple[int, int]: vowels_set = {\'a\', \'e\', \'i\', \'o\', \'u\', \'A\', \'E\', \'I\', \'O\', \'U\'} vowels_count = 0 consonants_count = 0 for char in input_string: if char.isalpha(): if char in vowels_set: vowels_count += 1 else: consonants_count += 1 return (vowels_count, consonants_count)"},{"question":"Given an array of distinct integers and a target value K. Find two unique integers in the array whose sum is closest to K. Example 1: Input: arr = [10, 22, 28, 29, 30, 40] K = 54 Output: 22, 30 Explanation: The sum of 22 and 30 is 52, which is closest to 54 than any other pair. Example 2: Input: arr = [1, 3, 4, 7, 10] K = 15 Output: 4, 10 Explanation: The sum of 4 and 10 is 14, which is closest to 15 than any other pair. Your Task: You don\'t need to read input or print anything. Your task is to complete the function closestPair() which takes an array of integers and an integer K as input and returns a pair of integers whose sum is closest to K. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(1) Constraints: 2 <= len(arr) <= 10^5 -10^6 <= arr[i] <= 10^6 -10^6 <= K <= 10^6","solution":"def closestPair(arr, K): Returns two unique integers in the array whose sum is closest to K. arr.sort() left, right = 0, len(arr) - 1 closest_sum = float(\'inf\') closest_pair = (None, None) while left < right: current_sum = arr[left] + arr[right] if abs(K - current_sum) < abs(K - closest_sum): closest_sum = current_sum closest_pair = (arr[left], arr[right]) if current_sum < K: left += 1 elif current_sum > K: right -= 1 else: break return closest_pair"},{"question":"In a programming competition, you are tasked with creating a function that determines whether a given sequence of parentheses is balanced. A sequence of parentheses is considered balanced if every opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are properly nested. For example: - \\"(())\\" is balanced. - \\"(()\\" is not balanced. - \\"()()()\\" is balanced. - \\")(()\\" is not balanced. ----- Input ----- The number of test cases (<100) A series of strings containing only \'(\' and \')\' for each test case. ----- Output ----- A string \\"BALANCED\\" for each test case if the sequence is balanced, otherwise \\"NOT BALANCED\\". ----- Example ----- Input: 3 (()) (() ()()() Output: BALANCED NOT BALANCED BALANCED Write a function in a programming language of your choice to solve this problem. The function should read the input, process each test case, and print the appropriate output for each sequence.","solution":"def balance_parentheses(test_cases): Determines if each provided sequence of parentheses is balanced. Args: test_cases (list): A list of strings containing only \'(\' and \')\'. Returns: list: A list of strings \\"BALANCED\\" or \\"NOT BALANCED\\" for each input sequence. results = [] for sequence in test_cases: balance = 0 balanced = True for char in sequence: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 if balance < 0: balanced = False break if balance != 0: balanced = False results.append(\\"BALANCED\\" if balanced else \\"NOT BALANCED\\") return results"},{"question":"There is only one rescue boat available to save people from a sinking ship, and you have to rescue everyone with the minimum number of runs. You are given the list of weights of each person onboard the ship, and the boat\'s maximum weight capacity. Your task is to find out the minimum number of runs required to rescue everyone. On each run, the boat can carry as many people as its weight capacity allows. Write a function: ```python def minimumBoatRuns(weights, capacity): # Your code here ``` # Input - A list of integers `weights` where each value represents the weight of a person. - An integer `capacity` which represents the maximum weight capacity of the boat. # Output - Return the minimum number of runs required to save everyone. # Example ```python # Example 1 weights = [50, 50, 70, 80] capacity = 100 print(minimumBoatRuns(weights, capacity)) # Output: 3 ``` # Constraints - The weights list will have between 1 and 100 people, inclusive. - Each weight will be an integer between 1 and the capacity, inclusive. - The capacity will be an integer between 50 and 300. # Note In the example provided, the optimal grouping is: - First run: 50 and 50 (100) - Second run: 70 (70) - Third run: 80 (80) Thus, the boat needs to make 3 runs to rescue everyone.","solution":"def minimumBoatRuns(weights, capacity): weights.sort() i, j = 0, len(weights) - 1 runs = 0 while i <= j: if weights[i] + weights[j] <= capacity: i += 1 j -= 1 runs += 1 return runs"},{"question":"There is an upcoming coding competition where each participant needs to solve T programming problems. Each problem has a distinct difficulty level, and the difficulty of the problems is represented as an array of T integers where the ith integer denotes the difficulty of the ith problem. To ensure uniformity in the competition, the organizers decided that each participant should solve problems in a specific difficulty range. Given the array of problem difficulties and the desired range [L, R], determine how many problems fall within this difficulty range (inclusive). ------ Input Format ------ - The first line contains a single integer T, the number of problems. - The second line contains T space-separated integers representing the difficulty of each problem. - The third line contains two integers L and R, the lower and upper bound of the desired difficulty range, respectively. ------ Output Format ------ Output a single integer representing the count of problems that have a difficulty level within the range [L, R]. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ difficulty_i ≤ 1000 1 ≤ L ≤ R ≤ 1000 ----- Sample Input 1 ------ 5 1 5 10 20 30 10 20 ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ Among the given problems, only two problems have difficulty levels within the range [10, 20]: difficulty 10 and difficulty 20. Thus the output is 2.","solution":"def count_problems_in_range(T, difficulties, L, R): Returns the count of problems with difficulty within the range [L, R]. Args: T (int): Number of problems. difficulties (list of int): List of difficulty levels of each problem. L (int): Lower bound of the desired difficulty range. R (int): Upper bound of the desired difficulty range. Returns: int: Count of problems within the difficulty range. count = 0 for difficulty in difficulties: if L <= difficulty <= R: count += 1 return count"},{"question":"Given an integer array `arr` of size N, your task is to return the maximum element in the array. Example 1: Input: arr = [1, 2, 3, 4, 5] Output: 5 Explanation: Maximum element in the array is 5. Example 2: Input: arr = [5, 17, 9, 1, 100] Output: 100 Explanation: Maximum element in the array is 100. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findMaxElement` which takes an integer array `arr` and returns the maximum element in the array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 1 <= arr[i] <= 10^9","solution":"def findMaxElement(arr): Returns the maximum element in the array. if not arr: raise ValueError(\\"The array is empty\\") max_element = arr[0] for num in arr: if num > max_element: max_element = num return max_element"},{"question":"Taro likes permutations. He came up with the following problem: For given integers n and k, find how many permutations of the set {1, 2, ..., n} have exactly k inversions. An inversion in a permutation p of length n is a pair of indices (i, j) such that i < j and p[i] > p[j]. Write a program that can find the number of such permutations, given n and k. Input The first and only line of input contains two integers n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ n(n-1)/2). Output Output a single integer – the number of permutations of the set {1, 2, ..., n} with exactly k inversions. Examples Input 3 1 Output 2 Input 4 4 Output 5 Input 5 0 Output 1 Note In the first sample, the permutations with exactly one inversion are {2,1,3} and {1,3,2}. In the second sample, the permutations with exactly four inversions are {3,2,1,4}, {2,4,1,3}, {3,1,4,2}, {4,1,3,2}, and {4,2,1,3}. In the third sample, permutations with zero inversions include only the sorted permutation itself, which is {1, 2, 3, 4, 5}.","solution":"def count_inversions(n, k): Returns the number of permutations of the set {1, 2, ..., n} with exactly k inversions. # Dynamic programming table, dp[i][j] represents number of permutations of set {1, 2, ..., i} with exactly j inversions. dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)] # Base case: 1 permutation of an empty set with 0 inversions. dp[0][0] = 1 for i in range(1, n + 1): for j in range(k + 1): dp[i][j] = 0 for x in range(min(j, i - 1) + 1): dp[i][j] += dp[i - 1][j - x] return dp[n][k]"},{"question":"You are given a series of tasks. Each task consists of climbing a staircase with `n` steps. You can climb the stairs by taking either one step or two steps at a time. Calculate the number of unique ways to climb to the top for each task. Input The input consists of multiple test cases. Each test case is represented by a single integer `n`, where `n` is the number of steps in the staircase. The input is terminated by a single zero. For each `n`, you need to find the number of distinct ways to climb a staircase with `n` steps. Output For each test case, print the answer in a line formatted as \\"Case #i: x\\", where `i` is the test case number starting from 1, and `x` is the number of unique ways to climb to the top. Constraints: - 0 ≤ `n` ≤ 50 Example Input 3 5 0 Output Case #1: 3 Case #2: 8 Explanation: - For the first test case (n=3): - You can climb in the following ways: (1, 1, 1), (1, 2), (2, 1) - Hence, there are 3 ways to climb a staircase with 3 steps. - For the second test case (n=5): - The possible ways to climb are: (1, 1, 1, 1, 1), (1, 1, 1, 2), (1, 1, 2, 1), (1, 2, 1, 1), (2, 1, 1, 1), (2, 2, 1), (2, 1, 2), (1, 2, 2) - Hence, there are 8 ways to climb a staircase with 5 steps.","solution":"def count_ways(n): Return the number of unique ways to climb a staircase with n steps. if n == 0: return 0 elif n == 1: return 1 elif n == 2: return 2 # Using dynamic programming to store the number of ways to solve subproblems dp = [0] * (n + 1) dp[1] = 1 dp[2] = 2 for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n] def process_staircases(steps_list): Process a list of steps, and return a list of results for each steps count in the format described. results = [] case_number = 1 for n in steps_list: if n == 0: break result = count_ways(n) results.append(f\\"Case #{case_number}: {result}\\") case_number += 1 return results"},{"question":"You are given a string s consisting of lowercase alphabets. You can perform the following operation as many times as you want: 1. Choose two adjacent characters in the string such that they are not the same and swap them. What is the length of the longest possible substring that can be made with consecutive identical characters after performing the operations any number of times? -----Input----- The first line contains an integer t (1 le t le 100), the number of test cases in the input. Each of the next t lines contains a string s (1 le text{length of } s le 1000). -----Output----- For each test case, print a single integer: the length of the longest substring with consecutive identical characters. -----Example----- Input 3 abc aab abac Output 1 2 2 -----Note----- In the first test case, you can not create any substring longer than one character with all identical characters. In the second test case, the longest possible substring with consecutive identical characters is \\"aa\\" which has length 2. In the third test case, you can swap \\"b\\" and \\"a\\" to form \\"aabc\\", and then the longest possible substring with consecutive identical characters is \\"aa\\" which has length 2.","solution":"def longest_consecutive_identical_substring(t, strings): results = [] for s in strings: freq = [0] * 26 # Frequency array for characters a-z for char in s: freq[ord(char) - ord(\'a\')] += 1 # The maximum frequency in the string indicates the longest possible substring max_len = max(freq) results.append(max_len) return results"},{"question":"Given an array of n integers, you need to find the maximum sum of its contiguous subarray, using Kadane\'s Algorithm. A contiguous subarray is defined as a subset of the array that is contiguous and maintains the order of the elements. Constraints * 1 ≤ n ≤ 100,000 * -10,000 ≤ A[i] ≤ 10,000 Input The first line of the input includes an integer n, the number of elements in the sequence. In the second line, n elements of the sequence are given separated by spaces. Output Print a single integer representing the maximum sum of a contiguous subarray. Example Input 8 -2 -3 4 -1 -2 1 5 -3 Output 7 Explanation: The contiguous subarray with the maximum sum is [4, -1, -2, 1, 5], which sums up to 7.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray using Kadane\'s Algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global # Example usage: # nums = [-2, -3, 4, -1, -2, 1, 5, -3] # print(max_subarray_sum(nums)) # Output: 7"},{"question":"Marla is a clever detective working to solve a tricky puzzle. She has identified a pattern in a sequence of numbers and needs your help to uncover a secret message. She knows that the secret message is encoded as a sequence of the most frequent digits across segments of the sequence. Can you assist Marla in deciphering the message? Problem: Given a sequence of digits (each digit ranging from 0 to 9) and several ranges within this sequence, for each range [L, R], find the digit that appears most frequently. If multiple digits have the same frequency, return the smallest digit. Report the results for all ranges. INPUT: The first line contains an integer n, denoting the number of digits in the sequence. The second line contains n space-separated digits describing the sequence. The third line contains an integer m, denoting the number of ranges. The next m lines each contain two integers L and R (0-indexed and inclusive). OUTPUT: Output m lines, each containing a single digit which is the most frequent (or the smallest frequent if there is a tie) in the corresponding range. 1 ≤ n ≤ 100000 1 ≤ m ≤ 100000 0 ≤ L ≤ R < n SAMPLE INPUT 10 1 2 3 0 2 2 3 4 1 0 3 0 9 1 4 2 6 SAMPLE OUTPUT 2 2 2","solution":"from collections import Counter def most_frequent_digit(n, sequence, m, ranges): results = [] for L, R in ranges: segment = sequence[L:R+1] counter = Counter(segment) most_freq_digit = min((digit for digit in counter if counter[digit] == max(counter.values()))) results.append(most_freq_digit) return results # reading input and invoking the function def main(input_list): n = input_list[0] sequence = input_list[1] m = input_list[2] ranges = input_list[3:] results = most_frequent_digit(n, sequence, m, ranges) return results"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid is either a wall (\'#\') or a path (\'.\'). You start at the top-left corner of the grid (1, 1) and your goal is to reach the bottom-right corner of the grid (N, M). You can only move up, down, left, or right. Additionally, you have a limited number of K bomb moves, where a bomb move allows you to destroy one wall and turn it into a path, letting you pass through it. Determine the minimum number of moves required to reach the bottom-right corner. If it\'s impossible to reach the corner, return -1. -----Constraints----- - All values in input are integers. - 2 leq N, M leq 100 - 0 leq K leq 10 -----Input----- Input is given from Standard Input in the following format: N M K Grid[1][1] Grid[2][2] vdots Grid[N][M] Each string Grid[i] contains exactly M characters (either \'.\' or \'#\'). -----Output----- Output the minimum number of moves required to reach the cell (N, M). If it\'s impossible, output -1. -----Sample Input----- 5 6 1 ...... .#.. ...#.. .#.. ...... -----Sample Output----- 9 Explanation: Starting from (1, 1), move down four times to (5, 1), use a bomb at (5, 2), and then move right five times to (5, 6). This results in a total of 9 moves.","solution":"from collections import deque def min_moves_with_bombs(n, m, k, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] start = (0, 0, k) # (x, y, bombs_left) queue = deque([(0, 0, k, 0)]) # (x, y, bombs_left, moves) visited = set() visited.add(start) while queue: x, y, bombs_left, moves = queue.popleft() if x == n - 1 and y == m - 1: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: if grid[nx][ny] == \'.\': nxt = (nx, ny, bombs_left) if nxt not in visited: visited.add(nxt) queue.append((nx, ny, bombs_left, moves + 1)) elif grid[nx][ny] == \'#\' and bombs_left > 0: nxt = (nx, ny, bombs_left - 1) if nxt not in visited: visited.add(nxt) queue.append((nx, ny, bombs_left - 1, moves + 1)) return -1"},{"question":"D: Magic Sorter-Magic Sorter- story I live in a magical land where everything is done with spells and incantations. One day, I encountered an ancient scroll that contains a spell to sort an array of integers, but it comes with a twist. The spell operates by repeatedly deciding, for each pair of adjacent elements, whether to swap them or not based on certain mysterious rules. I want to understand this magic and see if it can help me sort arrays. problem You are given an array of N integers. A sorting spell will choose, for each pair of adjacent elements, with probability P, to swap the elements if they are in the wrong order (i.e., the larger element is before the smaller element). The spell will continue to do this pass over all adjacent pairs until the array is sorted, or until a certain number of maximum passes (K) is reached. Your task is to determine whether the array can be sorted using this spell within the given number of passes. Input format The input is given in the following format: N K P a_1 a_2 ... a_N The first line contains three integers: N representing the length of the array (1 ≤ N ≤ 100), K representing the maximum number of passes allowed (1 ≤ K ≤ 1000), and P representing the probability of swapping adjacent elements (0 ≤ P ≤ 1). The second line contains the N integers of the array (0 ≤ a_i ≤ 1000). Output format Output \\"Yes\\" if the array can be sorted within the given number of passes, and \\"No\\" otherwise. Input example 1 4 10 1.0 4 3 2 1 Output example 1 Yes Input example 2 5 5 0.5 5 1 3 2 4 Output example 2 No Input example 3 3 7 0.7 3 1 2 Output example 3 Yes Example Input 5 5 0.8 3 4 1 5 2 Output Yes","solution":"import random def magic_sorter(N, K, P, array): Determines if the array can be sorted within K passes using a spell that swaps adjacent elements with a probability P if they are out of order. def is_sorted(arr): return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) for _ in range(K): if is_sorted(array): return \\"Yes\\" for i in range(N-1): if array[i] > array[i+1] and random.random() < P: array[i], array[i+1] = array[i+1], array[i] return \\"Yes\\" if is_sorted(array) else \\"No\\" # Example Usage: # result = magic_sorter(5, 5, 0.8, [3, 4, 1, 5, 2]) # print(result) # Expected Output: \\"Yes\\""},{"question":"Adam is playing a game where he needs to navigate a n times m grid. Each cell on the grid has an initial value b_{i,j} representing the height of a pile of blocks at cell (i, j). Adam can perform the following operations: 1. Move one block from a cell (i, j) to any of its adjacent cells (up, down, left, or right). 2. Remove a block from any cell, but cannot add blocks directly from an external source. Adam\'s goal is to make all cells in the grid have the same height using the above operations. However, he realizes that it\'s not always possible to achieve this goal. Therefore, Adam wants to know the number of ways to initialize the grid such that for given n, m, and a range L le b_{i,j} le R for all 1 le i le n, 1 le j le m, it is possible to make all cells have the same height. As the answer might be large, output it modulo 1,000,000,007. # Input The first line contains four integers n, m, L, and R (1 le n, m le 100, 0 le L le R le 100). The next n lines each contain m integers representing the initial heights b_{i,j} of the grid cells. # Output Output one integer, representing the number of ways to initialize the grid so that it is possible to achieve the goal modulo 1,000,000,007. # Examples Input 2 2 1 3 1 1 2 2 Output 3 Input 3 3 2 3 2 2 2 3 3 3 2 2 2 Output 1 # Explanation In the first example, the possible initial configurations that can be made homogeneous are: - All cells being 1. - All cells being 2. - All cells being 3. In the second example, we can only initialize the grid to have an initial configuration where all cells have height 3 for it to become homogeneous.","solution":"def number_of_ways(n, m, L, R): MOD = 1000000 return (R - L + 1) % MOD"},{"question":"You are tasked with developing an inventory management system for a retail store. The store has multiple sections, and each section has a variety of products. Write a program that reads a series of inventory update notices and reports the current stock levels for each product in each section. For each update notice, you are given three integers s, p, and c, which represent that c units of product p were added to section s. If c is negative, it means that c units of product p were removed from section s. Assume that initially, the stock level of each product in each section is zero. Constraints * No incorrect section and product numbers are given. * 0 ≤ the stock level of any product in any section during the management ≤ 100 Input In the first line, the number of update notices n is given. The following n lines contain a set of three integers s, p, and c, representing the update notice. Output For each section, print the stock levels of each product in this order: product 1, product 2, ..., product 10. Print a single space character before the stock level. Print \\"********************\\" (20 \'*\') between sections. Example Input 4 1 2 15 3 1 5 2 10 -3 1 5 7 Output 0 15 0 0 7 0 0 0 0 0 ******************** 0 0 0 0 0 0 0 0 0 -3 ******************** 5 0 0 0 0 0 0 0 0 0 Explanation: 1. Section 1 receives 15 units of product 2 and 7 units of product 5. 2. Section 3 receives 5 units of product 1. 3. Section 2 has a reduction of 3 units of product 10.","solution":"def inventory_management(n, updates): # Dictionary to keep track of stock levels for each section inventory = {section: [0] * 10 for section in range(1, 4)} # Process each update for s, p, c in updates: inventory[s][p - 1] += c # Create the result result = [] for section in range(1, 4): result.append(\' \'.join(map(str, inventory[section]))) if section < 3: result.append(\'*\' * 20) return result"},{"question":"# Stock Price Change Tracker You are given a list of tuples representing the daily stock prices for a company over a period of time. Each tuple consists of a date (in \'YYYY-MM-DD\' format) and the stock price (a float value). For example: ```python [ (\'2023-01-01\', 100.5), (\'2023-01-02\', 102.0), (\'2023-01-03\', 101.0), (\'2023-01-04\', 103.5), ] ``` You need to write a function that calculates the largest change in stock price from one day to the next within the given period. The function should return a tuple containing the date when the largest change occurred and the corresponding change in price. The steps for our example would be: - The change from 2023-01-01 to 2023-01-02: `102.0 - 100.5 = 1.5` - The change from 2023-01-02 to 2023-01-03: `101.0 - 102.0 = -1.0` - The change from 2023-01-03 to 2023-01-04: `103.5 - 101.0 = 2.5` The largest change occurs from 2023-01-03 to 2023-01-04 with a change of 2.5. Input: - A list of tuples, each containing a date (string in \'YYYY-MM-DD\' format) and a stock price (float). Output: - A tuple containing the date when the largest change occurred (string) and the change in stock price (float). Function Signature: ```python def largest_stock_change(prices: List[Tuple[str, float]]) -> Tuple[str, float]: ``` Example: ```python # Input prices = [ (\'2023-01-01\', 100.5), (\'2023-01-02\', 102.0), (\'2023-01-03\', 101.0), (\'2023-01-04\', 103.5), ] # Output (\'2023-01-03\', 2.5) ```","solution":"from typing import List, Tuple def largest_stock_change(prices: List[Tuple[str, float]]) -> Tuple[str, float]: Calculates the largest change in stock price from one day to the next. Parameters: - prices: List of tuples, each containing a date (string in \'YYYY-MM-DD\' format) and a stock price (float). Returns: - A tuple containing the date when the largest change occurred (string) and the change in stock price (float). if len(prices) < 2: return (\\"\\", 0.0) largest_change = 0.0 date_of_largest_change = \\"\\" for i in range(1, len(prices)): current_date, current_price = prices[i] previous_date, previous_price = prices[i-1] change = current_price - previous_price if abs(change) > abs(largest_change): largest_change = change date_of_largest_change = previous_date return (date_of_largest_change, largest_change)"},{"question":"Given a list of integers, find out whether any two distinct indices i and j in the list exist such that the absolute difference between the integers at these indices is exactly k. Example 1: Input: nums = [1, 9, 5, 3, 7], k = 4 Output: True Explanation: The pairs (1, 5) and (5, 9) both satisfy the condition where the absolute difference between them is exactly 4. Example 2: Input: nums = [4, 7, 2, 3, 9], k = 10 Output: False Explanation: No such pair exists in the list where the absolute difference is exactly 10. Your Task: You don\'t need to read or print anything. Your task is to complete the function checkDifference(nums, k) which takes a list of integers nums and an integer k as input and returns a boolean value indicating whether such a pair exists. Constraints: 1 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4 0 <= k <= 10^4","solution":"def checkDifference(nums, k): Returns True if there exist two distinct indices i and j in nums such that the absolute difference between nums[i] and nums[j] is exactly k. Otherwise, returns False. seen = set() for num in nums: if (num + k) in seen or (num - k) in seen: return True seen.add(num) return False"},{"question":"Nested Parentheses Validation Given a string comprised of only \'(\' and \')\', and potentially nested, determine if the parentheses are properly nested and balanced. The string is considered properly nested if for every opening parenthesis \'(\' there is a corresponding closing parenthesis \')\'. Additionally, the pairs of parentheses must be correctly nested. Write a function called `is_valid_parentheses` that takes a string representing a sequence of parentheses and returns `True` if the string is properly nested and balanced, and `False` otherwise. # Constraints - The length of the string `s` will be at most 1000. # Input - `s`: A string of length `n` (1 ≤ n ≤ 1000) containing only characters \'(\' and \')\'. # Output - A boolean value `True` if the string is properly nested and balanced, `False` otherwise. # Example Input ```plaintext \\"((()))\\" ``` Output ```plaintext True ``` Input ```plaintext \\"(()\\" ``` Output ```plaintext False ``` # Note In the first example, the string \\"((()))\\" is properly nested and balanced. Every opening parenthesis has a corresponding closing parenthesis, and the pairs are correctly nested. In the second example, the string \\"(()\\" is not properly nested or balanced because there is one opening parenthesis that does not have a matching closing parenthesis.","solution":"def is_valid_parentheses(s): Returns True if the string s contains properly nested and balanced parentheses, otherwise returns False. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"A company is organizing a coding competition with multiple rounds. Each round consists of a set of problems that participants need to solve. In each round, participants earn points based on the problems they solve. You are responsible for keeping track of the scores and predicting the winner. Your task is to write a program that processes the scores of participants in each round and determines the overall winner at the end of the competition. The winner is the participant with the highest total score across all rounds. In case of a tie, the participant who reached the highest total score first should be considered the winner. Input The first line contains an integer T representing the number of test cases. Each test case starts with an integer N representing the number of rounds in the competition. For each round, a line will follow with multiple space-separated strings indicating the name of a participant and their score for that round in the format \\"name:score\\". Output For each test case, print the name of the participant who is the winner of the competition. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^3 0 ≤ score ≤ 100 The length of participants\' names will be between 1 and 20 characters, including only alphabets. SAMPLE INPUT 2 3 Alice:25 Bob:20 Charlie:30 Alice:30 Charlie:20 Bob:50 Charlie:10 2 Dana:45 Eva:20 Dana:20 Eva:45 SAMPLE OUTPUT Charlie Dana Explanation In the first test case, the total scores are: Alice: 55 (25+30) Bob: 70 (20+50) Charlie: 60 (30+20+10) Bob has the highest total score. In the second test case, the total scores are: Dana: 65 (45+20) Eva: 65 (20+45) Dana reached the highest total score first, hence she is the winner.","solution":"def determine_winner(test_cases): results = [] for test in test_cases: rounds = test[1:] scores = {} first_to_reach = [] for round_entry in rounds: participants = round_entry.split() for participant in participants: name, score = participant.split(\':\') score = int(score) if name not in scores: scores[name] = score first_to_reach.append(name) else: scores[name] += score max_score = max(scores.values()) winner = None for name in first_to_reach: if scores[name] == max_score: winner = name break results.append(winner) return results # Read test cases from input def process_input(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) rounds = lines[index+1:index+1+N] test_cases.append((N, *rounds)) index += N + 1 return test_cases"},{"question":"You are given two arrays of integers, `A` and `B`, where each element in `A` has a paired element in `B` at the same indexing position (i.e., `A[i]` corresponds to `B[i]`). You need to determine if the integers in `A` can be rearranged in such a way that the sum of absolute differences between the paired elements does not exceed a given value `D`. # Function Signature ```python def can_rearrange_for_min_diff(A: List[int], B: List[int], D: int) -> bool: pass ``` # Input - `A`: A list of `n` integers. - `B`: A list of `n` integers. - `D`: An integer representing the maximum allowable sum of absolute differences. # Output Returns a boolean value: - `True` if the integers in `A` can be rearranged to meet the condition. - `False` otherwise. # Example ```python can_rearrange_for_min_diff([1, 3, 5], [5, 3, 1], 4) ``` - Returns: `True` ```python can_rearrange_for_min_diff([1, 2, 3], [7, 8, 9], 4) ``` - Returns: `False` # Constraints - The array lengths will be between `1` and `100,000`. - The elements in the arrays may be negative or positive numbers. # Notes - The function should be optimized for large inputs. - Consider edge cases such as empty arrays or arrays with a single element.","solution":"from typing import List def can_rearrange_for_min_diff(A: List[int], B: List[int], D: int) -> bool: # Sort both arrays A.sort() B.sort() # Calculate the sum of absolute differences total_diff = sum(abs(a - b) for a, b in zip(A, B)) # Check if the total difference is within the allowed limit return total_diff <= D"},{"question":"You are given a list of words and a set of characters. The task is to write a function that determines how many words in the list can be formed using the given set of characters. Each character can only be used once per word. You need to return the number of words that can be completely formed using the characters in the set. A word is \\"completely formed\\" if every character in the word can be found in the set of characters provided. Use the following guidelines for implementation: - The function will receive two inputs: - A list of strings where each string represents a word. - A string representing the set of characters available for forming words. - The output should be an integer representing the count of words that can be fully formed using the given characters. **Example**: ```python def count_valid_words(words, chars): # Your code here # Example usage words = [\\"hello\\", \\"world\\", \\"students\\"] chars = \\"welldonerhstu\\" print(count_valid_words(words, chars)) # Output: 2 ``` In this example, the words \\"hello\\" and “students” can be formed using the characters in \\"welldonerhstu\\", so the function returns 2. The word \\"world\\" cannot be fully formed because the character \'o\' is already used in \\"hello\\" and there’s only one \'o\' in the set of characters, so the function does not count \\"world\\".","solution":"def count_valid_words(words, chars): from collections import Counter def can_form_word(word, char_count): word_count = Counter(word) for char, count in word_count.items(): if count > char_count.get(char, 0): return False return True char_count = Counter(chars) return sum(1 for word in words if can_form_word(word, char_count))"},{"question":"You are given an integer `n`. Write a function that generates all possible combinations of well-formed parentheses of length `n`. Example 1: Input: 2 Output: [\\"()()\\",\\"(())\\"] Example 2: Input: 3 Output: [\\"((()))\\",\\"(()())\\",\\"(())()\\",\\"()(())\\",\\"()()()\\"] Your Task: You don\'t need to input anything. Complete the function `generateParenthesis` which takes an integer `n` as the input parameter and returns a list of all combinations of well-formed parentheses of length `n`. Constraints: - 1 <= n <= 8","solution":"def generateParenthesis(n): Generates all combinations of well-formed parentheses of length n * 2. result = [] def backtrack(S = \'\', left = 0, right = 0): if len(S) == n * 2: result.append(S) return if left < n: backtrack(S + \'(\', left + 1, right) if right < left: backtrack(S + \')\', left, right + 1) backtrack() return result"},{"question":"A botanist is studying the branching pattern of a tree and wants to visualize the structure. She needs a program to generate a graphical representation of the tree structure based on the number of levels in the tree. Your task is to assist the botanist in creating this pattern. -----Input:----- - The first line contains T, the number of test cases. - Each of the following T lines contains a single integer L representing the number of levels in the tree. -----Output:----- For each test case, output the tree representation. Each tree should be separated by a blank line. -----Constraints----- - 1 leq T leq 50 - 1 leq L leq 50 -----Sample Input:----- 3 1 2 3 -----Sample Output:----- * | -+ * | -+ | -+ * | -+ | -+ | -+ -----EXPLANATION:----- Each tree level consists of two parts: a trunk (represented by `|`) and a pair of branches extending from it (represented by `-+`). The depth of the tree equals the number of levels (L) provided in the input. The complexity of each level increases with indentation to signify the hierarchy and depth of the tree branches.","solution":"def generate_tree(levels): Generate a tree structure with the specified number of levels. tree = [\\"*\\"] for i in range(1, levels + 1): tree.append(\\" \\" * (i - 1) + \\"|\\") tree.append(\\" \\" * (i - 1) + \\"-+\\") return \\"n\\".join(tree) def process_trees(input_data): Process multiple tree structures based on the input_data list. T = int(input_data[0]) results = [] for i in range(1, T + 1): levels = int(input_data[i]) results.append(generate_tree(levels)) return \\"nn\\".join(results)"},{"question":"Ami loves playing with numbers, particularly with sequences of numbers. She recently encountered a sequence puzzle that she wants to solve with your help. The puzzle is about finding the smallest subsequence that needs to be sorted (in ascending order) so that the entire sequence becomes sorted. For example : Given the sequence (1, 3, 5, 4, 2, 6, 7), the smallest subsequence that must be sorted is (3, 5, 4, 2). Sorting this will make the sequence (1, 2, 3, 4, 5, 6, 7). Your task is to write a function that finds the smallest subsequence that needs to be sorted and returns the start and end indices (0-based) of this subsequence. INPUT The first line of input contains the integer T, which represents the number of test cases. Each test case begins with an integer N which represents the length of the sequence. The next line contains N integers separated by spaces which represent the sequence. OUTPUT For each test case, print the start and end indices of the smallest subsequence that needs to be sorted. If the sequence is already sorted, print \\"0 0\\". Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000000 -1000000 ≤ sequence[i] ≤ 1000000 SAMPLE INPUT 2 7 1 3 5 4 2 6 7 5 1 2 3 4 5 SAMPLE OUTPUT 1 4 0 0","solution":"def find_subsequence_boundaries(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] sequence = test_cases[i][1] start, end = 0, 0 # Find the first element which is out of the increasing order for j in range(N - 1): if sequence[j] > sequence[j + 1]: start = j break else: # If the full loop runs, then the list is already sorted results.append((0, 0)) continue # Find the first element from end which is out of the decreasing order for j in range(N - 1, 0, -1): if sequence[j] < sequence[j - 1]: end = j break # Find the minimum and maximum in the identified subarray sub_min = min(sequence[start:end+1]) sub_max = max(sequence[start:end+1]) # Extend the subsequence to include any out-of-order element for j in range(start): if sequence[j] > sub_min: start = j break for j in range(end + 1, N): if sequence[j] < sub_max: end = j break results.append((start, end)) return results"},{"question":"You are given a string s consisting of lowercase English letters. You can perform the following operation as many times as you like: Select any palindrome substring of s and reverse it. Since the substring is already a palindrome, reversing it does not change the substring itself, but you can use this operation to indicate a move. Determine if it is possible to transform the given string s into a lexicographically smallest possible permutation using the allowed operation. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 100000) consisting of only lowercase English letters. The total length of all strings in the input does not exceed 1000000. Output For each test case, output one line: * YES, if it is possible to transform the string into its lexicographically smallest permutation using the allowed operation. * NO, otherwise. Example Input 3 abba abc aabbcc Output YES NO YES","solution":"def can_be_lexicographically_smallest(s): Determines if a string can be transformed into its lexicographically smallest permutation by reversing its palindrome substrings. Args: - s (str): The input string. Returns: - str: \\"YES\\" if the string can be transformed, \\"NO\\" otherwise. # All strings can be transformed into lexicographically smallest strings. return \\"YES\\" def process_test_cases(test_cases): Processes multiple test cases. Args: - test_cases: List of test case strings Returns: - List: Result strings for each test case results = [] for s in test_cases: results.append(can_be_lexicographically_smallest(s)) return results"},{"question":"You are working on developing a new application that manages user registration and user details. Each user has a unique identifier and an associated list of hobbies. You want to implement a feature that can verify user details and suggest friends based on common hobbies. Given a list of users with their unique IDs and hobbies, implement a function that will: 1. Verify if a user with a given ID exists. 2. Suggest a list of user IDs who share at least one hobby with the given user. The input will be formatted as follows: 1. The first line contains an integer N, the number of users. 2. The next N lines each contain a user ID followed by their list of hobbies. 3. The last line contains a user ID for which the details need to be verified and friends suggested. Constraints: * 1 ≤ N ≤ 100 * Each user ID is a string of lowercase letters and digits, with a length between 1 and 10 characters. * A user\'s hobbies are given as space-separated integers, each between 1 and 50. * Each user has at least one hobby and at most 10 hobbies. Input: The input is given from Standard Input in the following format: ``` N user_id1 hobby1 hobby2 ... hobbyM1 user_id2 hobby1 hobby2 ... hobbyM2 ... user_idN hobby1 hobby2 ... hobbyMN target_user_id ``` Output: If the target user ID exists, print \\"User found\\" followed by a list of friend user IDs who share at least one hobby with the target user, each on a new line. If the target user ID does not exist, print \\"User not found\\". Examples: Input: ``` 4 alice 1 2 3 bob 2 4 charlie 5 6 dave 1 3 4 alice ``` Output: ``` User found bob dave ``` Input: ``` 3 alice 1 2 3 bob 2 3 4 charlie 5 6 eva ``` Output: ``` User not found ```","solution":"def verify_and_suggest_friends(data, target_user_id): Verify if a user with the given ID exists and suggest friends based on common hobbies. Parameters: data (list of tuples): List containing tuples, where each tuple represents a user and their hobbies. The first item in each tuple is a user ID (string) and the remaining items are hobbies (ints). target_user_id (str): The user ID to be verified and for whom friends are suggested. Returns: str: A message indicating whether the target user was found and suggesting friends. user_hobbies = {} for entry in data: user_id, hobbies = entry[0], entry[1:] user_hobbies[user_id] = set(hobbies) if target_user_id not in user_hobbies: return \'User not found\' target_hobbies = user_hobbies[target_user_id] friends = [user_id for user_id, hobbies in user_hobbies.items() if user_id != target_user_id and target_hobbies & hobbies] output = \\"User foundn\\" + \\"n\\".join(friends) if friends else \\"User found\\" return output"},{"question":"You are given a grid representing a field of plants. Each cell in the grid contains an integer representing the height of the plant at that cell. A farmer wants to select a subgrid that forms a square and harvest all the plants within that subgrid. However, for the plants to be suitable for harvesting, the height of the plants within this square subgrid must have all plants of the same height (i.e., all cells in the chosen subgrid must have the same integer value). Determine the maximum possible size of such a square subgrid. The size of the square subgrid is defined by the length of its side, and a subgrid’s side lengths can range from 0 up to the minimum of the grid’s dimensions. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 500), representing the number of rows and columns of the grid, respectively. Each of the next n lines contains m integers separated by spaces, where the j-th integer in the i-th line represents the height of the plant at cell (i, j) (0 ≤ height ≤ 10^4). Output Print an integer representing the side length of the largest square subgrid with all cells having the same height. If no such subgrid exists, print 0. Examples Input 4 5 1 2 2 3 4 2 1 1 1 5 2 1 1 1 1 3 3 3 3 3 Output 2 Input 3 3 1 2 1 1 1 1 1 2 1 Output 1 Input 2 2 4 4 4 4 Output 2","solution":"def largest_uniform_subgrid(n, m, grid): def is_uniform(i, j, size): height = grid[i][j] for x in range(i, i + size): for y in range(j, j + size): if grid[x][y] != height: return False return True max_side = 0 for size in range(1, min(n, m) + 1): for i in range(n - size + 1): for j in range(m - size + 1): if is_uniform(i, j, size): max_side = size return max_side"},{"question":"A **Morse Code Translator** translates text into Morse code and vice versa. Morse code is a method used in telecommunication to encode text characters as sequences of two different signal durations, called dots and dashes, or dits and dahs. Morse code was developed in the 1830s and is still used today. For this problem, you must implement two functions: 1. `text_to_morse(text: str) -> str`: Accepts a string of text and returns its Morse code equivalent. 2. `morse_to_text(morse: str) -> str`: Accepts a string of Morse code and returns its text equivalent. The Morse code for each letter and digit is as follows: ``` A .- B -... C -.-. D -.. E . F ..-. G --. H .... I .. J .--- K -.- L .-.. M -- N -. O --- P .--. Q --.- R .-. S ... T - U ..- V ...- W .-- X -..- Y -.-- Z --.. 0 ----- 1 .---- 2 ..--- 3 ...-- 4 ....- 5 ..... 6 -.... 7 --... 8 ---.. 9 ----. ``` The Morse code uses spaces to separate letters and slashes (`/`) to separate words. For example, \\"HELLO WORLD\\" in Morse code is \\".... . .-.. .-.. --- / .-- --- .-. .-.. -..\\". Examples: ``` text_to_morse(\\"HELLO WORLD\\") -> \\".... . .-.. .-.. --- / .-- --- .-. .-.. -..\\" text_to_morse(\\"SOS\\") -> \\"... --- ...\\" morse_to_text(\\".... . .-.. .-.. --- / .-- --- .-. .-.. -..\\") -> \\"HELLO WORLD\\" morse_to_text(\\"... --- ...\\") -> \\"SOS\\" ``` To ensure robust handling of the inputs: - Ignore any invalid characters in the text input (characters that are not letters or digits). - Ignore extra spaces between Morse code letters and words in the Morse code input. Implement the two functions to accurately transform text to Morse code and Morse code back to text.","solution":"MORSE_CODE_DICT = {} def text_to_morse(text: str) -> str: Converts text to its Morse code equivalent. text = text.upper() morse_code = [] for char in text: if char == \' \': morse_code.append(\'/\') elif char in MORSE_CODE_DICT: morse_code.append(MORSE_CODE_DICT[char]) return \' \'.join(morse_code) def morse_to_text(morse: str) -> str: Converts Morse code to its text equivalent. morse_words = morse.split(\' / \') text = [] for word in morse_words: morse_chars = word.split() for char in morse_chars: for key, value in MORSE_CODE_DICT.items(): if value == char: text.append(key) break text.append(\' \') return \'\'.join(text).strip()"},{"question":"Problem: You are the lead developer for a new startup focusing on financial technology solutions. One of the core services your company wants to provide is an algorithm that identifies suspicious patterns in transaction data, which could indicate potential fraud. As part of this new feature, your task is to detect if a sequence of transactions include sums to zero, indicating potential fraudulent reversals or refunds. Given a list of transactions, you need to determine if there exist any continuous subarray that sums to zero. Input: - t: number of test cases. Each test case contains: - n: an integer denoting the number of transactions. - arr: a list of n integers representing the transaction values. Output: - For each test case, print \\"Yes\\" if there exists at least one continuous subarray which sums to zero, otherwise print \\"No\\". Constraints: - 1 ≤ t ≤ 100 - 1 ≤ n ≤ 1000 - -10^6 ≤ arr[i] ≤ 10^6 Example: SAMPLE INPUT 2 6 4 2 -3 1 6 5 4 2 0 1 6 SAMPLE OUTPUT Yes Yes Explanation: In the first test case, the subarray with elements [2, -3, 1] sums to zero. In the second test case, the subarray with a single element [0] sums to zero, thus the output is \\"Yes\\" for both test cases.","solution":"def has_zero_sum_subarray(arr): Detects if there exists a continuous subarray that sums to zero. # Using a set to track the cumulative sum seen_sums = set() current_sum = 0 for num in arr: current_sum += num if current_sum == 0 or current_sum in seen_sums: return \\"Yes\\" seen_sums.add(current_sum) return \\"No\\" def detect_fraudulent_patterns(test_cases): Processes multiple test cases to check for continuous subarray summing to zero. test_cases: List of tuples, where each tuple contains the number of transactions and the transaction array. results = [] for n, arr in test_cases: result = has_zero_sum_subarray(arr) results.append(result) return results # Example usage: # t = 2 # test_cases = [ # (6, [4, 2, -3, 1, 6]), # (5, [4, 2, 0, 1, 6]) # ] # print(detect_fraudulent_patterns(test_cases))"},{"question":"You have an array of integers and you need to process several queries. Each query can either be to find the minimum value in a subarray or to update a specific element in the array. 1. The query format to find the minimum value in the subarray from index l to index r (inclusive) is \\"min l r\\". 2. The query format to update the value at index i to x is \\"update i x\\". For each \\"min l r\\" query, output the minimum value in the subarray from index l to index r. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of elements in the array and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Each of the next q lines contains a query in one of the following formats: - \\"min l r\\" (1 ≤ l ≤ r ≤ n) - \\"update i x\\" (1 ≤ i ≤ n, 1 ≤ x ≤ 10^9) Output For each \\"min l r\\" query, print the minimum value of the subarray [l, r]. Examples Input 5 5 4 3 2 1 5 min 1 3 update 3 6 min 1 3 update 5 0 min 4 5 Output 2 3 0","solution":"class ArrayProcessor: def __init__(self, n, array): Initializes the ArrayProcessor with the given array. self.array = array def process_query(self, query): Processes a single query on the array. It can either be an \'update\' or \'min\' query. parts = query.split() if parts[0] == \\"min\\": l, r = int(parts[1]), int(parts[2]) return self.get_min(l, r) elif parts[0] == \\"update\\": i, x = int(parts[1]), int(parts[2]) self.update(i, x) return None def get_min(self, l, r): Returns the minimum value in the array from index l to r (1-based index). return min(self.array[l-1:r]) def update(self, i, x): Updates the value at index i (1-based index) to x. self.array[i-1] = x"},{"question":"# Task Given an integer `n`, generate all sequences of `n` pairs of balanced parentheses. A string is considered to have balanced parentheses if: * Every opening parenthesis `\'(\'` has a corresponding closing parenthesis `\')\'`. * The pairs of parentheses are properly nested. # Example For `n = 3`, the output should be: ``` [ \\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\" ] ``` For `n = 1`, the output should be: ``` [ \\"()\\" ] ``` # Input/Output - `[input]` integer `n` Constraints: `0 ≤ n ≤ 8` - `[output]` array of strings An array containing all sequences of `n` pairs of balanced parentheses. Sequences are expected to be in lexicographical order.","solution":"def generate_parentheses(n): Generates all sequences of n pairs of balanced parentheses. :param n: Number of pairs of parentheses :type n: int :return: A list of strings, each representing a valid sequence of n pairs of balanced parentheses :rtype: list def backtrack(combination, open_count, close_count): if open_count == close_count == n: result.append(\\"\\".join(combination)) return if open_count < n: combination.append(\'(\') backtrack(combination, open_count + 1, close_count) combination.pop() if close_count < open_count: combination.append(\')\') backtrack(combination, open_count, close_count + 1) combination.pop() result = [] backtrack([], 0, 0) return result"},{"question":"You have been hired as a software engineer in a company that provides tech solutions for a multi-story building. The building has multiple floors and each floor has a varying number of rooms. The rooms on each floor are connected by hallways in such a way that you can always reach any room from any other room on the same floor. The building administration needs a tool to find the largest number of rooms that can be visited starting from any room on any floor. Task Your task is to write a function that identifies the largest connected component of rooms on each floor. A connected component in this context is a group of rooms where there is a path between any two rooms in the group. Input The input consists of multiple test cases. Each test case corresponds to a floor and is provided as follows: - The first line contains an integer `T`, the number of test cases (1 ≤ T ≤ 10). - Each test case starts with two integers `R` and `H` (1 ≤ R, H ≤ 50000), representing the number of rooms and the number of hallways respectively. - The next `H` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ R, u ≠ v), indicating that there is a hallway between room `u` and room `v`. Output For each test case, output a single integer — the size of the largest connected component of rooms. Example # Input ``` 2 5 4 1 2 2 3 3 4 4 5 4 2 1 2 3 4 ``` # Output ``` 5 2 ``` # Explanation In the first test case, all 5 rooms are connected: 1-2-3-4-5 So the largest connected component has 5 rooms. In the second test case, there are two connected components: {1, 2} and {3, 4}. Each component contains 2 rooms. Hence the largest connected component in this case is of size 2.","solution":"def find_largest_connected_component(T, test_cases): from collections import defaultdict, deque def bfs(node, visited, adjacency_list): queue = deque([node]) visited[node] = True count = 0 while queue: current = queue.popleft() count += 1 for neighbor in adjacency_list[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return count results = [] for case in test_cases: R, H, hallways = case[\\"R\\"], case[\\"H\\"], case[\\"hallways\\"] adjacency_list = defaultdict(list) for u, v in hallways: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = [False] * (R + 1) largest_component_size = 0 for room in range(1, R + 1): if not visited[room]: component_size = bfs(room, visited, adjacency_list) largest_component_size = max(largest_component_size, component_size) results.append(largest_component_size) return results"},{"question":"A delivery drone needs to transport packages between two points in a warehouse as quickly as possible. The warehouse layout is a grid of size NxM and some cells in the grid are marked as obstacles where the drone cannot pass through. The drone can move up, down, left, or right from a cell to an adjacent cell in the grid. You need to determine the minimum number of moves the drone requires to get from the starting point (sx, sy) to the delivery point (dx, dy), avoiding all obstacles. If it is not possible to reach the delivery point, return -1. ------ Input Format ------ - The first line of the input contains an integer T denoting the number of test cases. The T test cases then follow. - The first line of each test case contains three integers N, M, and O where N and M are the dimensions of the warehouse grid, and O is the number of obstacles in the grid. - The next O lines for each test case contain two integers r and c where (r, c) are the coordinates of an obstacle in the grid. - The next line contains two integers sx and sy denoting the starting position of the drone. - The final line contains two integers dx and dy denoting the delivery position of the drone. ------ Output Format ------ - For each test case, output a single integer representing the minimum number of moves required for the drone to reach the delivery point from the starting point. If it is not possible, output -1. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ N, M ≤ 10^3 0 ≤ O ≤ N times M 0 ≤ r < N, 0 ≤ c < M 0 ≤ sx, sy, dx, dy < N and < M ----- Sample Input 1 ------ 2 5 5 3 1 2 3 2 2 3 0 0 4 4 3 3 0 1 1 2 2 ----- Sample Output 1 ------ 8 2 ----- Explanation 1 ------ For the first test case: The drone starts at (0, 0) and needs to reach (4, 4). The obstacles at (1, 2), (3, 2), and (2, 3) force the drone to navigate around them. The minimum path avoiding obstacles might be something like (0, 0) → (0, 1) → (0, 2) → (1, 1) → (2, 1) → (3, 1) → (4, 1) → (4, 2) → (4, 3) → (4, 4). For the second test case: The warehouse is clear of obstacles, and the minimum move path is (1, 1) → (2, 1) → (2, 2).","solution":"from collections import deque def min_moves(N, M, obstacles, start, end): Calculate the minimum number of moves required for the drone to reach the delivery point from the starting point while avoiding obstacles. :param N: Number of rows in the grid. :param M: Number of columns in the grid. :param obstacles: List of tuples representing obstacle coordinates. :param start: Tuple representing the starting coordinates (sx, sy). :param end: Tuple representing the delivery coordinates (dx, dy). :return: Minimum number of moves or -1 if unreachable. # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Grid initialization grid = [[0 for _ in range(M)] for _ in range(N)] # Marking the obstacles in the grid for r, c in obstacles: grid[r][c] = 1 # Starting BFS queue = deque([(start[0], start[1], 0)]) # (x, y, moves) visited = set() visited.add((start[0], start[1])) while queue: x, y, moves = queue.popleft() # Check if we have reached the destination if (x, y) == end: return moves # Exploring all 4 directions for dx, dy in directions: nx, ny = x + dx, y + dy # Check bounds and obstacles if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) # If the loop terminates without reaching the destination return -1 def solve(T, test_cases): results = [] for i in range(T): N, M, O = test_cases[i][\'dimensions\'] obstacles = test_cases[i][\'obstacles\'] start = test_cases[i][\'start\'] end = test_cases[i][\'end\'] results.append(min_moves(N, M, obstacles, start, end)) return results"},{"question":"Quentin is planning his vegetable garden! He starts with two integers (M) and (D). His goal is to determine if it\'s possible to arrange (D) vegetable plots in a grid of size (M times M), such that: - Each plot is a 1x1 square. - No two plots share a row or a column. - The Manhattan distance between any two plots is at least 3. - The Manhattan distance between plot ((x_1, y_1)) and plot ((x_2, y_2)) is (|x_1 - x_2| + |y_1 - y_2| geq 3). Help Quentin by writing a function that generates possible coordinates for the plots, or determines it\'s not possible to arrange them. If it’s possible, print the coordinates of the plots; otherwise, print \\"This arrangement is not possible\\". If there are multiple solutions, you may output any one of them. -----Input----- - The first line input contains a single integer (T) denoting the number of test cases. - Each of the next (T) lines contains two space-separated integers (M) and (D) respectively. -----Output----- - For each test case, if the arrangement is possible, output (D) lines. - Each line should contain two space-separated integers (x) and (y). - If the arrangement is not possible, print \\"This arrangement is not possible\\". -----Constraints----- - (1 leq T leq 10^3) - (3 leq M leq 50) - (1 leq D leq M) -----Sample Input----- 2 4 3 5 5 -----Sample Output----- 0 0 2 2 1 3 This arrangement is not possible","solution":"def find_plots(M, D): Function to find possible coordinates for D vegetable plots in an MxM grid. if D > M: return \\"This arrangement is not possible\\" plots = [] for i in range(D): plots.append((i, i)) return plots def vegetable_garden(test_cases): results = [] for M, D in test_cases: result = find_plots(M, D) if result == \\"This arrangement is not possible\\": results.append(result) else: results.append(\\"n\\".join(\\" \\".join(map(str, plot)) for plot in result)) return results"},{"question":"You are given an equation in the form of a string. The equation contains only integers, variables (denoted by single lowercase letters), addition (+), and equality (=) signs. The task is to solve for the given variable and return its value. If the equation is invalid or cannot be solved for the variable, return None. For example, an input equation \\"3a + 5 = 23\\" would mean solving for \'a\' in the equation 3a + 5 = 23, resulting in a = 6. Example 1: Input: equation = \\"3x + 2 = 14\\", variable = \\"x\\" Output: 4 Explanation: Solving for x, we get x = (14 - 2) / 3 = 4. Example 2: Input: equation = \\"4y + 7 = 19\\", variable = \\"y\\" Output: 3 Explanation: Solving for y, we get y = (19 - 7) / 4 = 3. Your Task: You don\'t need to read or print anything. Your task is to complete the function SolveEquation() which takes two input parameters: the equation string and the variable to solve for. The function should return the value of the variable. Expected Time Complexity: O(N), where N is the length of the equation string. Expected Space Complexity: O(1) Constraints: 1 <= |equation| <= 100 The equation is guaranteed to have a unique solution.","solution":"def SolveEquation(equation, variable): Solves the linear equation in one variable and returns the value of the variable. Args: equation : str : the equation in the format of a string variable : str : the variable to be solved Returns: float or int or None : value of the variable if solvable, otherwise None. # Remove spaces for simplicity equation = equation.replace(\' \', \'\') # Find the position of the equal sign equal_pos = equation.index(\'=\') # Split the equation into LHS and RHS lhs = equation[:equal_pos] rhs = equation[equal_pos+1:] # Find variable coefficient in LHS import re # Regular expression to find the pattern like \\"3x\\" or \\"x\\" match = re.match(r\'([+-]?d*)([a-z])\', lhs) if not match: return None # Coefficient of the variable coeff = match.group(1) coeff = int(coeff) if coeff and coeff != \'+\' and coeff != \'-\' else (1 if coeff == \'\' or coeff == \'+\' else -1) # Constant term in the LHS const = re.findall(r\'[+-]?d+\', lhs.replace(match.group(0), \'\')) const = int(const[0]) if const else 0 # RHS value rhs_value = int(rhs) # Solving for the variable try: variable_value = (rhs_value - const) / coeff except ZeroDivisionError: return None return variable_value"},{"question":"In a land far away, there is a village where the roads form a perfect grid. The village is represented as an `N x N` grid of cells, where each cell can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). The villagers need to find out if there is a way to go from the top-left corner of the grid (cell (1,1)) to the bottom-right corner of the grid (cell (N,N)) by moving only right or down through empty cells. Write a program to determine whether it is possible to make this journey. ------ Input Format ------ - First line will contain an integer T, the number of test cases. - Each test case starts with an integer N, the size of the grid. - Then follow N lines, each containing a string of N characters representing the grid. ------ Output Format ------ For each test case, print `YES` if it is possible to reach the bottom-right corner from the top-left corner. Otherwise, print `NO`. You may print each character of the string in uppercase or lowercase (for example, the strings `YeS`, `yEs`, `yes`, and `YES` will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 100 Each cell in the grid is either \'.\' or \'#\'. ------ Sample Input 1 ------ 2 3 ..# .#. ... 4 .... ..#. .#.. ...# ------ Sample Output 1 ------ YES NO ----- Explanation 1 ------ Test Case 1: There is a path from the start to the end: (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3). Test Case 2: There is no path from the start to the end due to obstacles blocking the way.","solution":"def is_path_exists(grid): N = len(grid) visited = [[False] * N for _ in range(N)] def dfs(x, y): # If out of bounds or cell is an obstacle or already visited, return False if x < 0 or y < 0 or x >= N or y >= N or grid[x][y] == \'#\' or visited[x][y]: return False # If we reached the bottom-right corner, return True if x == N - 1 and y == N - 1: return True # Mark this cell as visited visited[x][y] = True # Move right or down if dfs(x + 1, y) or dfs(x, y + 1): return True return False return dfs(0, 0) def solve(T, cases): results = [] for case in cases: N, grid = case if is_path_exists(grid): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Bob loves puzzles with strings. He defines a string \\"resonant\\" if it is made entirely of the characters \'a\' and \'b\', and every \'a\' in the string has exactly two \'b\'s immediately following it. Given a positive integer N, your task is to find the N-th lexicographically smallest resonant string. -----Input----- The first and only line of input contains a positive integer N (1 le N le 10^9). -----Output----- The first and only line of output must contain the N-th lexicographically smallest resonant string. -----Examples----- Sample Input 1: 1 Sample Output 1: abb Sample Input 2: 2 Sample Output 2: aabbbbbb","solution":"def generate_nth_resonant_string(n): Generates the N-th lexicographically smallest resonant string. result = [] while n: result.append(\\"abb\\") n -= 1 return \'\'.join(result)"},{"question":"A widget factory produces widgets in batches, and each batch has a specific production cost associated with it. The company wants to minimize the total cost of production by merging the batches. The cost of merging two batches is equal to the sum of their production costs. Given an array representing the production cost of each batch, determine the minimum total cost required to merge all the batches into one. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) representing the number of batches. The second line contains n integers c_i (1 ≤ c_i ≤ 1000), where c_i denotes the production cost of the i-th batch. -----Output----- Output a single integer representing the minimum total cost required to merge all batches. -----Examples----- Input 4 4 6 8 12 Output 58 Input 3 1 2 3 Output 9 -----Note----- In the first example, one optimal way to merge the batches is as follows: - Merge 4 and 6 (cost = 10) - Merge the resulting batch (10) with 8 (cost = 18) - Merge the resulting batch (18) with 12 (cost = 30) Total cost = 10 + 18 + 30 = 58 In the second example, one optimal way to merge the batches is as follows: - Merge 1 and 2 (cost = 3) - Merge the resulting batch (3) with 3 (cost = 6) Total cost = 3 + 6 = 9","solution":"import heapq def min_merge_cost(n, costs): Computes the minimum cost required to merge all batches into one. Parameters: n (int): The number of batches. costs (list of int): The production cost of each batch. Returns: int: The minimum total cost required to merge all batches. if n == 1: return 0 # No cost if there\'s only one batch # Use a min-heap to efficiently get the minimum cost batches to merge heapq.heapify(costs) total_cost = 0 while len(costs) > 1: # Pop the two smallest elements first = heapq.heappop(costs) second = heapq.heappop(costs) # Merge them merge_cost = first + second total_cost += merge_cost # Push the merged batch back to the heap heapq.heappush(costs, merge_cost) return total_cost"},{"question":"You have been assigned the task of managing a prize distribution event in a carnival. The event comprises several games, each with a predefined number of prize tickets that can be won. When a player participates in a game, they can win a certain number of prize tickets, which they can then exchange for rewards at the prize counter. However, the prize counter can only accommodate a certain number of prize tickets at any given time, and players need to submit their prize tickets smoothly without any overflow. Your task is to develop a program that simulates the process of prize ticket submission and ensures that the prize counter does not overflow. The counter has a fixed capacity, and it can accept prize tickets from players. If a submission of prize tickets exceeds the counter’s capacity, the submission is rejected. Input: - The first line contains an integer n - the number of players. - The second line contains an integer c - the capacity of the prize counter. - The next n lines each contain an integer t(i) (1 ≤ t(i) ≤ 1000) - the number of prize tickets the ith player wants to submit. Output: Print \\"Accepted\\" if all players\' submissions are accommodated within the capacity without overflow; otherwise, print \\"Rejected\\". Constraints: 1 ≤ n ≤ 1000 1 ≤ c ≤ 10000 Example: Input: 5 100 20 30 10 25 15 Output: Accepted Input: 5 50 10 20 15 10 10 Output: Rejected","solution":"def prize_submission(n, c, tickets): Determines whether the prize counter can accommodate all players\' submissions without overflow. Parameters: n (int): The number of players. c (int): The capacity of the prize counter. tickets (list of int): The number of tickets submitted by each player. Returns: str: \\"Accepted\\" if all submissions fit within the capacity, otherwise \\"Rejected\\". current_capacity = 0 for t in tickets: current_capacity += t if current_capacity > c: return \\"Rejected\\" return \\"Accepted\\" # Example usage: # n = 5 # c = 100 # tickets = [20, 30, 10, 25, 15] # print(prize_submission(n, c, tickets)) # Output will be \\"Accepted\\""},{"question":"Find the Longest Substring Without Repeating Characters Write a program that takes a string as input and returns the length of the longest substring without repeating characters. Constraints * The input string length (s) will be between 1 and 1000. * The string consists of only ASCII characters. Input A single string s. Output Print the length of the longest substring without repeating characters. Example Input abcabcbb Output 3 Input bbbbb Output 1","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) max_len = 0 start = 0 seen = {} for end in range(n): if s[end] in seen: start = max(start, seen[s[end]] + 1) seen[s[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"You are given a string s consisting of lowercase English letters and an integer k. You want to modify the string such that it becomes lexicographically smallest among all possible strings that can be obtained by rotating its characters up to k times to the right. For example, rotating the string abc to the right by 1 results in cab, and another rotation by 1 results in bca. Your task is to determine the lexicographically smallest string that can be obtained after performing at most k right rotations on the initial string. -----Input----- The first line contains one integer k (1 le k le 10^9). The second line contains a string s of length n (1 le n le 100) consisting only of lowercase English letters. -----Output----- Print the lexicographically smallest string that can be obtained after performing at most k rotations on the given string s. -----Examples----- Input 2 cba Output acb Input 1 abc Output abc -----Note----- In the first example, after rotating cba one time, we get acb, which is the lexicographically smallest string obtainable within the limit of k=2 rotations. In the second example, the string abc is already the lexicographically smallest string obtainable, even after performing one rotation.","solution":"def lexicographically_smallest_string(s, k): def rotate_right(s): return s[-1] + s[:-1] n = len(s) if k >= n: # if k >= n, then any permutation is possible return \'\'.join(sorted(s)) smallest = s for _ in range(k): s = rotate_right(s) if s < smallest: smallest = s return smallest # Example usage: # print(lexicographically_smallest_string(\\"cba\\", 2)) # Output: \\"acb\\" # print(lexicographically_smallest_string(\\"abc\\", 1)) # Output: \\"abc\\""},{"question":"You are given a list of words from a dictionary that are sorted lexicographically according to a new language\'s alphabetical order. You need to determine the order of characters in the new language based on the given words. Assume the dictionary is sorted based on the rules of the new language. The order of characters will be the minimum possible order that maintains the given sorted order of words. Constraints * 1 leq |words| leq 100 * 1 leq |words[i]| leq 100 * `words[i]` consists of only lowercase English letters. Input The input begins with an integer n, the number of words in the dictionary. The next n lines each contain a word representing the dictionary. Output Print the characters of the new language\'s alphabet in the correct order on a single line. Example Input 5 wrt wrf er ett rftt Output wertf Explanation 1. \'w\' comes before \'e\' because \\"wrt\\" and \\"er\\" imply that. 2. \'r\' comes before \'t\' because \\"wrf\\" and \\"rftt\\" imply that. 3. \'t\' comes before \'f\' because \\"wrt\\" and \\"wrf\\" imply that. Thus, the correct order of characters in the new language is \\"wertf\\". Note that there can be multiple valid outputs for the given input. Any valid output is acceptable.","solution":"from collections import defaultdict, deque def find_alphabet_order(words): # Build graph and find all unique characters adj_list = defaultdict(set) in_degree = {ch: 0 for word in words for ch in word} # Build the graph for i in range(len(words) - 1): first, second = words[i], words[i + 1] min_length = min(len(first), len(second)) for j in range(min_length): if first[j] != second[j]: if second[j] not in adj_list[first[j]]: adj_list[first[j]].add(second[j]) in_degree[second[j]] += 1 break else: if len(first) > len(second): # Check if second is a prefix of first return \\"\\" # Topological sort using Kahn\'s algorithm queue = deque([ch for ch in in_degree if in_degree[ch] == 0]) sorted_order = [] while queue: curr_char = queue.popleft() sorted_order.append(curr_char) for neighbor in adj_list[curr_char]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If not all characters are in sorted_order, it means there was a cycle if len(sorted_order) != len(in_degree): return \\"\\" return \\"\\".join(sorted_order)"},{"question":"Given a binary number represented as a string, implement a function to return its hexadecimal representation in uppercase. Input - A single binary string `s` of length n (1 ≤ n ≤ 10^6). Output - A single string representing the hexadecimal representation of the binary input. Example Input ``` 1010 ``` Output ``` A ``` Input ``` 11111010 ``` Output ``` FA ``` Notes - The output should not have any leading zeros. - The binary string will always be valid and contain only \'1\'s and \'0\'s.","solution":"def binary_to_hexadecimal(binary_str): Convert a binary string to its hexadecimal representation in uppercase. Parameters: binary_str (str): A string representing a binary number. Returns: str: The hexadecimal representation of the binary number in uppercase. # Convert binary string to an integer decimal_value = int(binary_str, 2) # Convert integer to hexadecimal and return in uppercase without \'0x\' prefix hexadecimal_str = hex(decimal_value)[2:].upper() return hexadecimal_str"},{"question":"You are given an array `arr` consisting of `n` integers. You are also given an integer `k`. Your task is to find the maximum possible sum of an increasing subsequence of length `k`. A subsequence is obtained by deleting some (possibly zero) elements from the array without changing the order of the remaining elements. An increasing subsequence is a subsequence where every element is smaller than the one that follows it. Write a program to find the maximum sum of any increasing subsequence of length `k` in the given array. If no such subsequence exists, return `-1`. -----Input----- The first line contains an integer `t` (1 le t le 50) — the number of test cases. Then the test cases follow, each represented by two lines. The first line of each test case contains two integers `n` (1 le n le 1000) and `k` (1 le k le n) — the number of elements in the array and the length of the subsequence, respectively. The second line contains `n` integers a_1, a_2, ..., a_n (1 le a_i le 10^4) — the elements of the array. -----Output----- For each test case, print one integer — the maximum possible sum of an increasing subsequence of length `k`. If no such subsequence exists, print `-1`. -----Example----- Input 3 5 3 1 2 3 4 5 6 2 5 4 3 2 1 6 4 2 10 1 2 10 Output 12 11 12","solution":"def max_sum_increasing_subsequence(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] # Initialize a list to store the possible sums of increasing subsequences dp = [[-1] * n for _ in range(k)] for j in range(n): dp[0][j] = arr[j] for length in range(1, k): for j in range(n): for m in range(j): if arr[m] < arr[j] and dp[length - 1][m] != -1: dp[length][j] = max(dp[length][j], dp[length - 1][m] + arr[j]) max_sum = max(dp[k-1]) results.append(max_sum if max_sum != -1 else -1) return results def process_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] idx = 1 for _ in range(t): n, k = map(int, lines[idx].split()) arr = list(map(int, lines[idx + 1].split())) test_cases.append(((n, k), arr)) idx += 2 return t, test_cases def process_output(results): return \\"n\\".join(map(str, results)) input_str = 3 5 3 1 2 3 4 5 6 2 5 4 3 2 1 6 4 2 10 1 2 10 t, test_cases = process_input(input_str) results = max_sum_increasing_subsequence(t, test_cases) output_str = process_output(results) print(output_str)"},{"question":"Create a function that checks whether a given password complies with a set of security requirements. A valid password: 1. Must be at least 8 characters long. 2. Must contain at least one uppercase letter. 3. Must contain at least one lowercase letter. 4. Must contain at least one numerical digit. 5. Must contain at least one special character (e.g., @, #, , %, &, *). Write a function that takes a string as input and returns `true` if the password meets all the requirements, otherwise returns `false`. Input: A single string representing the password. Output: A boolean value, `true` or `false`. Examples: - `isValidPassword(\\"Passw0rd!\\")` should return `true` - `isValidPassword(\\"password\\")` should return `false`","solution":"import re def isValidPassword(password): Checks if the given password meets the security requirements. Args: password (str): The password string to check. Returns: bool: True if the password meets all requirements, False otherwise. if len(password) < 8: return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'[0-9]\', password): return False if not re.search(r\'[!@#%^&*(),.?\\":{}|<>[];\'/]\', password): return False return True"},{"question":"You are given a string with lowercase alphabets sorted in ascending order. You are allowed to choose any substring of this string and change the order of its characters. Your goal is to determine if it is possible to convert the given string into another string by performing at most one such operation. ---- Input: ---- - First line will contain T, the number of testcases. - Each testcase contains two lines. The first line contains a string S of length n, and the second line contains a string T of length n. ---- Output: ---- For each testcase, print \\"YES\\" if it is possible to convert string S to string T by performing at most one operation, otherwise print \\"NO\\". ---- Sample Input: ---- 1 abcde acbde ---- Sample Output: ---- YES ---- Constraints: ---- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 100","solution":"def is_convertible_with_one_swap(s, t): Determines if it\'s possible to convert string s to string t by performing at most one swap of any substring. if len(s) != len(t): return \\"NO\\" # If both strings are already equal if s == t: return \\"YES\\" # Iterate and find the indices where s and t differ indices = [] for i in range(len(s)): if s[i] != t[i]: indices.append(i) # If they are exactly the same or have more than two differences if len(indices) != 2: return \\"NO\\" # Swap the two differing indices in s and check if it matches t i, j = indices s = list(s) s[i], s[j] = s[j], s[i] s = \'\'.join(s) return \\"YES\\" if s == t else \\"NO\\" def process_input(num_cases, test_cases): results = [] for s, t in test_cases: result = is_convertible_with_one_swap(s, t) results.append(result) return results # Function to parse the input and output results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): s = data[index] t = data[index + 1] test_cases.append((s, t)) index += 2 results = process_input(T, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given an array of integers where every element appears twice except for one. Find the element that appears only once. Your solution should have a linear runtime complexity. Write a function that accepts an array as its parameter and returns the single number. Example cases: - Input: [2, 2, 1] Output: 1 - Input: [4, 1, 2, 1, 2] Output: 4 - Input: [1] Output: 1 Hint: Try to use bitwise operations.","solution":"def single_number(nums): Returns the single number in the array where every element appears twice except for one. # Initialize a variable to hold the result result = 0 # Traverse each number in the array for num in nums: # XOR the current number with the result result ^= num # The result will be the number that appears only once return result"},{"question":"You are given an array of integers `arr` where each integer is unique and in the range from 1 to the length of the array inclusive. The array is permuted (shuffled) such that it does not follow any specific order. Your task is to return the first missing integer from the array which does not appear in the array, starting from 1. If all integers from 1 to the length of the array are present, return the next integer which exceeds the length of the array by 1. Example 1: Input: [2, 3, 4] Output: 1 Example 2: Input: [1, 2, 4, 6, 3, 7, 8] Output: 5 Example 3: Input: [1, 2, 3, 4, 5] Output: 6 Note: - `1 <= arr.length <= 10000` - `1 <= arr[i] <= arr.length` - Every element in the array is unique.","solution":"def first_missing_integer(arr): Returns the first missing integer starting from 1. If all integers from 1 to len(arr) are present, returns the next integer, which is len(arr) + 1. n = len(arr) present = [False] * (n + 1) for number in arr: if 1 <= number <= n: present[number] = True for i in range(1, n + 1): if not present[i]: return i return n + 1"},{"question":"You are given an array of integers and an integer `k`. Rotate the array to the right by `k` steps, where `k` is non-negative. This means that the array should be shifted to the right `k` times, and the elements near the end of the array will wrap around to the beginning. For example, with n=7 and k=3, the array [1, 2, 3, 4, 5, 6, 7] becomes [5, 6, 7, 1, 2, 3, 4]. Your task is to write a function that performs this rotation. -----Input----- The input consists of two lines: - The first line contains an integer `n` (1 le n le 10^5), the length of the array, and an integer `k` (0 le k le 10^5), the number of rotation steps. - The second line contains `n` space-separated integers representing the elements of the array. -----Output----- Output the array after rotating it to the right by `k` steps. -----Examples----- Sample Input 1: 7 3 1 2 3 4 5 6 7 Sample Output 1: 5 6 7 1 2 3 4 Sample Input 2: 6 2 -1 -100 3 99 0 38 Sample Output 2: 0 38 -1 -100 3 99","solution":"def rotate_array(n, k, arr): Rotates the array arr to the right by k steps. Parameters: n (int): Length of the array arr. k (int): Number of rotation steps. arr (list): List of integers representing the array. Returns: list: Rotated array. k %= n # In case k is greater than n, take modulo to reduce unnecessary rotations return arr[-k:] + arr[:-k]"},{"question":"Create a function that takes an integer `n` as an argument and returns an array of the first `n` Fibonacci numbers. The Fibonacci sequence is defined as follows: - The first number is 0, - The second number is 1, - Each subsequent number is the sum of the two preceding numbers. Return the results as an array (or list in Python, Haskell or Elixir). Examples: ```python fibonacci(5) #should return [0, 1, 1, 2, 3] fibonacci(10) #should return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ```","solution":"def fibonacci(n): Returns a list of the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"A binary tree is a data structure where each node has up to two children referred to as the left child and the right child. The depth of a node is the number of edges from the root to the node. Given a binary tree, define the vibration of the tree as the sum of the depths of all nodes in the tree. Your task is to write a function that, given the root of a binary tree, returns its vibration. Write a function: ```python def treeVibration(root: TreeNode) -> int: # your code goes here ``` where: - `TreeNode` class is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` - `root` is the root node of the binary tree, which can be `None` (an empty tree). # Input A binary tree node defined as above where: - The number of nodes in the tree will be in the range `[0, 10^5]`. - The value of each node will be an integer in the range `[-10^9, 10^9]`. # Output Return a single integer, the vibration of the binary tree. # Example ```python # Example binary tree: # 1 # / # 2 3 # / # 4 5 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) print(treeVibration(root)) # Output: 6 ``` # Explanation: - Node 1 has a depth of 0. - Nodes 2 and 3 each have a depth of 1. - Nodes 4 and 5 each have a depth of 2. The vibration is `0 + 1 + 1 + 2 + 2 = 6`.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def treeVibration(root: TreeNode) -> int: Calculate the vibration of a binary tree, which is the sum of depths of all nodes. def helper(node, depth): if not node: return 0 return depth + helper(node.left, depth + 1) + helper(node.right, depth + 1) return helper(root, 0)"},{"question":"John is obsessed with palindromes. He believes that palindromic numbers possess special properties and wants to explore them further. Given a number M, he wants to find the smallest palindromic number which is strictly greater than M. -----Input----- First line of input contains number of test cases T. For each test case, there exists only one line containing a non-negative integer M. -----Output----- For each test case, output a single line containing the smallest palindromic number greater than M. -----Constraints----- 1 <= T <= 1000 0 <= M <= 10^100 -----Example----- Input: 2 123 808 Output: 131 818","solution":"def is_palindrome(num): return str(num) == str(num)[::-1] def next_palindrome(M): M = int(M) while True: M += 1 if is_palindrome(M): return M def find_palindromes_for_test_cases(test_cases): results = [] for M in test_cases: results.append(next_palindrome(M)) return results def main(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = input_lines[1:T + 1] results = find_palindromes_for_test_cases(test_cases) return \'n\'.join(map(str, results))"},{"question":"Problem K: Minimum Platform Requirement A railway station has multiple platforms, and each train has a specific arrival and departure time. To efficiently manage the train traffic, the station needs to optimize the platform usage such that it requires the minimum number of platforms to accommodate all trains without any train waiting. Write a program that determines the minimum number of platforms required at the railway station to ensure that no train has to wait for another train to vacate a platform. Input The input starts with a line containing an integer n (1 <= n <= 1000), the number of trains. The following n lines contain two integers each: the arrival and departure times of each train (0 <= arrival, departure <= 2359 in 24-hour format). Output Print the minimum number of platforms required. Examples Input 6 900 910 940 1200 950 1120 1100 1130 1500 1900 1800 2000 Output 3 Input 3 1000 1030 1100 1130 1200 1230 Output 1","solution":"def minimum_platforms(n, train_times): Determine the minimum number of platforms required for the given train times. Parameters: n (int): Number of trains train_times (list of tuples): List of tuples where each tuple contains arrival and departure times of a train Returns: int: Minimum number of platforms required if n == 0: return 0 arrival_times = sorted([time[0] for time in train_times]) departure_times = sorted([time[1] for time in train_times]) platform_needed = 0 max_platform_needed = 0 i = 0 j = 0 while i < n and j < n: if arrival_times[i] < departure_times[j]: platform_needed += 1 i += 1 if platform_needed > max_platform_needed: max_platform_needed = platform_needed else: platform_needed -= 1 j += 1 return max_platform_needed # Reading input - Using this function signature for simplicity if __name__ == \\"__main__\\": n = int(input()) train_times = [] for _ in range(n): arrival, departure = map(int, input().strip().split()) train_times.append((arrival, departure)) print(minimum_platforms(n, train_times))"},{"question":"David is organizing a conference with several sessions. Each session has a specific start and end time, and David wants to ensure that none of the sessions overlap. Your task is to help David find the maximum number of non-overlapping sessions he can schedule for the conference. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of sessions. The following n lines each contain two integers, start and end (1 ≤ start < end ≤ 10^9), representing the start and end times of a session. Output Print a single integer — the maximum number of non-overlapping sessions David can schedule. Examples Input 3 1 3 2 5 4 6 Output 2 Input 4 1 2 2 3 3 4 1 5 Output 3 Note In the first example, David can schedule the sessions (1, 3) and (4, 6). In the second example, David can schedule the sessions (1, 2), (2, 3), and (3, 4).","solution":"def max_non_overlapping_sessions(n, sessions): This function takes in the number of sessions n and a list of sessions, each represented by a start and end time, and returns the maximum number of non-overlapping sessions that can be scheduled. # Sort the sessions by end time sessions.sort(key=lambda x: x[1]) # Initialize count of non-overlapping sessions and the end time of the last added session count = 0 last_end_time = 0 for start, end in sessions: if start >= last_end_time: # If the current session starts after the last added session ends, add this session count += 1 last_end_time = end return count"},{"question":"# Sorting Check! You are given an array of integers, and your task is to determine if the array can be sorted in ascending order by reversing exactly one segment of the array. A segment is defined as any contiguous subarray. # Argument `arr` is an array of integers. # Return Your function must return `true` if the array can be sorted by reversing exactly one segment, and `false` otherwise. # Examples `canBeSortedByReversingOneSegment([1, 3, 2, 4, 5])` returns `true` because reversing the segment `[3, 2]` will result in `[1, 2, 3, 4, 5]`. `canBeSortedByReversingOneSegment([1, 5, 3, 4, 2, 6])` returns `false` because no single segment can be reversed to sort the array. `canBeSortedByReversingOneSegment([10, 20, 30, 40, 50])` returns `true` because the array is already sorted.","solution":"def canBeSortedByReversingOneSegment(arr): Determines if the array can be sorted by reversing exactly one segment of the array. n = len(arr) if n <= 1: return True # Identify the start and end of the segment to be reversed start, end = -1, -1 for i in range(n - 1): if arr[i] > arr[i + 1]: if start == -1: start = i end = i + 1 # If start and end were never modified, the array is already sorted if start == -1: return True # Reverse the identified segment arr[start:end + 1] = arr[start:end + 1][::-1] # Check if the resulting array is sorted return arr == sorted(arr)"},{"question":"Input The input is given from Standard Input in the following format: > N M a_1 b_1 a_2 b_2 ： ： a_M b_M Output * You have to print N lines. * The i-th line should contain the total amount after all transactions for account i (1 leq i leq N). Constraints * 3 leq N, M leq 100,000 * 1 leq a_i leq N * -10^{12} leq b_i leq 10^{12} * Any final results do not exceed 2 times 10^{13}. Subtasks Subtask 1 [60 points]: * N, M leq 100 * b_i = 1 Subtask 2 [400 points]: * N, M leq 100 * -10^{12} leq b_i leq 10^{12} Subtask 3 [240 points]: * N, M leq 100,000 * b_i = 1 Subtask 4 [500 points]: * There are no additional constraints. Examples Input 6 4 1 100 2 -50 3 75 1 -25 Output 75 -50 75 0 0 0 Input 5 5 5 250 4 100 3 -50 2 0 1 -100 Output -100 0 -50 100 250 Input 4 3 1 200 4 100 2 -150 Output 200 -150 0 100 Input 7 7 7 700 6 600 5 500 4 400 3 300 2 200 1 100 Output 100 200 300 400 500 600 700","solution":"def process_transactions(N, M, transactions): Processes M transactions for N accounts and returns the final amounts for each account. Args: N (int): The number of accounts. M (int): The number of transactions. transactions (list of tuples): Each tuple contains (account, amount). Returns: list: A list of final amounts for each account. # Initialize the accounts with zeros account_balances = [0] * N # Process each transaction for a, b in transactions: account_balances[a - 1] += b return account_balances"},{"question":"In a country, there are n cities connected by m bidirectional roads. Each road connects two distinct cities and has an associated travel cost. The king wants to travel to every city starting from his capital, which is City 1. However, the roads are not in good condition, and some roads might be blocked due to poor weather. To maximize the chances of traveling, the king wants to know the minimum cost required to ensure that he can travel between all pairs of cities directly or indirectly, considering only the roads that are currently available. Given the current road network, determine the minimum travel cost for the king to be able to travel between all cities. -----Input----- The first line contains two integers n (2 leq n leq 100) and m (1 leq m leq 1000) — the number of cities and the number of roads. The following m lines each contain three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10000), which means there is a road connecting city u and city v with travel cost w. It is guaranteed that each city is connected by at least one road. -----Output----- Print a single integer — the minimum cost required for the king to be able to travel between all cities. If it is not possible to travel between all cities, print -1. -----Examples----- Input 4 5 1 2 5 1 3 10 2 3 3 2 4 8 3 4 4 Output 17 Input 3 2 1 2 7 2 3 15 Output 22 -----Note----- In the first example, the network of roads and cities can be visualized as follows: 1 --5-- 2 --3-- 3 | | / | 10 8 4 4 | | | 4 -------------------- One possible way to connect all cities with minimal cost is: 1 to 2 (5), 2 to 3 (3), 3 to 4 (4), so the total cost is 5 + 3 + 4 = 12. In the second example, all cities can be connected with the given roads, and the minimal cost to ensure the king can travel to every city is 7 + 15 = 22.","solution":"import heapq def minimum_travel_cost(n, m, roads): def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 roads.sort(key=lambda x: x[2]) # Sort edges by cost parent = [i for i in range(n + 1)] rank = [0] * (n + 1) mst_cost = 0 edge_count = 0 for u, v, w in roads: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += w edge_count += 1 if edge_count == n - 1: break return mst_cost if edge_count == n - 1 else -1"},{"question":"A game development company wants to implement a feature that allows for efficient collision detection between characters in a 2D grid-based game. Each character occupies a unique cell in the grid, represented by Cartesian coordinates (x, y). The goal is to group characters into clusters, where a cluster is defined as a set of characters positioned in a connected set of grid cells such that you can move from one character to another using only vertical and horizontal moves (no diagonal moves) and stay within the cells occupied by the characters. You are tasked with finding and printing all the clusters of characters in the grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of characters and the maximum coordinate value, respectively. The next n lines each contain two integers xi and yi (0 ≤ xi, yi ≤ m) — the coordinates of the characters. The coordinates will be unique and there will be no duplicate characters. Output For each cluster, print the coordinates of the characters in the cluster sorted first by their x-coordinate, and then by their y-coordinate. Each cluster should be printed in a separate line, and clusters should be separated by a blank line. Examples Input 5 10 1 1 2 1 1 2 3 4 4 4 Output 1 1 1 2 2 1 3 4 4 4 In the first example, three characters at (1, 1), (2, 1), and (1, 2) form one cluster because they are connected horizontally and vertically. The remaining two characters at (3, 4) and (4, 4) form another cluster.","solution":"def find_clusters(n, m, coordinates): from collections import deque, defaultdict def bfs(start, visited, adj_list): queue = deque([start]) cluster = [] while queue: x, y = queue.popleft() if (x, y) not in visited: visited.add((x, y)) cluster.append((x, y)) for neighbor in adj_list[(x, y)]: if neighbor not in visited: queue.append(neighbor) cluster.sort() return cluster adj_list = defaultdict(list) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] coordinates_set = set(coordinates) for x, y in coordinates: for dx, dy in directions: nx, ny = x + dx, y + dy if (nx, ny) in coordinates_set: adj_list[(x, y)].append((nx, ny)) visited = set() clusters = [] for coord in coordinates: if coord not in visited: cluster = bfs(coord, visited, adj_list) clusters.append(cluster) return clusters # Example usage n = 5 m = 10 coordinates = [(1, 1), (2, 1), (1, 2), (3, 4), (4, 4)] clusters = find_clusters(n, m, coordinates) for cluster in clusters: for c in cluster: print(c) print()"},{"question":"You are given an array of `n` integers where `n` is even. Your task is to partition this array into two subarrays such that the absolute difference between the sum of the elements in the first subarray and the sum of the elements in the second subarray is minimized. Each element must belong to exactly one subarray. The sum of the sizes of the two subarrays must equal `n`. Write a function to find this minimum possible difference. -----Input----- The first line contains a single integer `t` (1 leq t leq 1000) — the number of test cases. The next `2 × t` lines describe the test cases. Each test case consists of two lines, where the first line contains a single integer `n` (2 leq n leq 100; `n` is even), and the second line contains `n` space-separated integers representing the array of integers. -----Output----- For each test case, print a single line containing the minimum possible difference for that test case. -----Example----- Input 2 4 1 2 3 4 6 1 2 3 4 5 6 Output 0 1 -----Note----- For the first test case, the array `[1, 2, 3, 4]` can be partitioned into two subarrays `[1, 4]` and `[2, 3]` which have sums `5` and `5`, respectively. The absolute difference between the sums is `0`. For the second test case, the array `[1, 2, 3, 4, 5, 6]` can be partitioned into two subarrays `[1, 6, 2]` and `[3, 4]` which have sums `9` and `10`, respectively. The absolute difference between the sums is `1`. Different partitions may also yield the same minimum difference.","solution":"def partition_array_min_diff(arr): Partition the array into two subarrays with minimum absolute difference between their sums. total_sum = sum(arr) n = len(arr) half_sum = total_sum // 2 # Using Dynamic programming to find the closest sum to half_sum dp = [False] * (half_sum + 1) dp[0] = True for num in arr: for j in range(half_sum, num-1, -1): if dp[j - num]: dp[j] = True for i in range(half_sum, -1, -1): if dp[i]: sum1 = i break sum2 = total_sum - sum1 return abs(sum1 - sum2) def find_min_partition_diffs(test_cases): results = [] for n, arr in test_cases: results.append(partition_array_min_diff(arr)) return results"},{"question":"List comprehensions provide a more syntactically elegant way to create lists. They consist of brackets containing an expression followed by a for clause, then zero or more for or if clauses. The result will be a new list resulting from evaluating the expression in the context of the for and if clauses. Example Code ```python >>> squares = [x**2 for x in range(10)] >>> print(squares) [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] >>> evens = [x for x in range(10) if x % 2 == 0] >>> print(evens) [0, 2, 4, 6, 8] ``` Task You are given a list of integers. Use list comprehensions to create a new list `result` containing the squares of even numbers from the given list. Input Format The first line contains an integer N, the number of elements in the list. The second line contains N space-separated integers. Constraints 1 leq N leq 100 Output Format Print the space-separated elements of the list `result`. Sample Input 6 1 2 3 4 5 6 Sample Output 4 16 36","solution":"def squares_of_evens(N, nums): Returns a list of squares of even numbers from the input list. Params: N (int): The number of elements in the list. nums (list of int): The list of integers. Returns: list of int: A list containing squares of even numbers from the input list. result = [x**2 for x in nums if x % 2 == 0] return result"},{"question":"You are given a string containing only digits. This string can be mapped to letters using the following decoding scheme: ``` \'A\' -> 1 \'B\' -> 2 ... \'Z\' -> 26 ``` Given such a string, determine the total number of ways the string can be decoded. Note that an empty string maps to 1 way. The answer should be provided modulo 10^9 + 7. # Example: Input: ``` \\"12\\" ``` Output: ``` 2 ``` Explanation: The input string \\"12\\" could be decoded as \\"AB\\" (1 2) or \\"L\\" (12), resulting in 2 ways. # Constraints: - The input string will only contain digits and will have a length between 1 and 1000.","solution":"def num_decodings(s): Returns the number of ways to decode a given string s. MOD = 10**9 + 7 length = len(s) if length == 0: return 1 dp = [0] * (length + 1) dp[0] = 1 for i in range(1, length + 1): if s[i - 1] != \'0\': dp[i] += dp[i - 1] if i > 1 and \'10\' <= s[i - 2:i] <= \'26\': dp[i] += dp[i - 2] dp[i] %= MOD return dp[length]"},{"question":"Given a string `s` consisting of lowercase alphabets, we define a \\"beautiful substring\\" as a substring which contains at least one character \'a\', one \'b\', and one \'c\'. Your task is to find the length of the shortest beautiful substring in the given string. # Input: - A single string `s` (1 ≤ |s| ≤ 10^5), where `|s|` is the length of the string. # Output: - A single integer representing the length of the shortest beautiful substring. If no such substring exists, print `-1`. # Example: Input: ``` abcabc ``` Output: ``` 3 ``` Input: ``` bcaacb ``` Output: ``` 3 ``` Input: ``` aaaa ``` Output: ``` -1 ```","solution":"def shortest_beautiful_substring(s): Returns the length of the shortest beautiful substring that contains at least one \'a\', one \'b\', and one \'c\'. If no such substring exists, return -1. n = len(s) min_length = float(\'inf\') left = 0 count = {\'a\': 0, \'b\': 0, \'c\': 0} for right in range(n): if s[right] in count: count[s[right]] += 1 while all(count[char] > 0 for char in \'abc\'): min_length = min(min_length, right - left + 1) count[s[left]] -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"In the kingdom of Avalon, there is a unique tradition practiced by the royal court mathematicians. They love to explore different number patterns and sequences. One day, the king challenges his mathematicians with a new problem involving palindromic numbers. A number is said to be a palindrome if it reads the same both forward and backward. For instance, 121 and 141 are palindromic, but 123 and 122 are not. Your task is to determine whether a given number is palindromic or not. Given multiple numbers, write a program to check each one individually and print the result. Input Format: The first line contains an integer t, denoting the number of test cases. Each of the next t lines contains a number n. Output Format: For each test case, print \\"Palindrome\\" if the number is palindromic, otherwise print \\"Not a Palindrome\\". Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 10^6 Sample Input: 3 121 123 222 Sample Output: Palindrome Not a Palindrome Palindrome Help the mathematicians of Avalon by writing the required program.","solution":"def is_palindrome(number): Returns \'Palindrome\' if the number is a palindrome, \'Not a Palindrome\' otherwise. num_str = str(number) if num_str == num_str[::-1]: return \\"Palindrome\\" else: return \\"Not a Palindrome\\" def check_palindromes(test_cases): Given a list of test case numbers, determines if each is a palindrome. Returns a list of results. results = [] for n in test_cases: results.append(is_palindrome(n)) return results"},{"question":"Write a program that checks if a given point lies inside a given triangle. The program should read the coordinates of the three vertices of the triangle and the coordinates of the point, then determine whether the point lies inside the triangle, on the boundary, or outside. Constraints * -10000 leq x, y, x1, y1, x2, y2, x3, y3 leq 10000 Input Eight integers, the coordinates of the three vertices of the triangle (x1, y1), (x2, y2), (x3, y3) and the coordinates of the point (x, y) separated by spaces. Output Print \\"Inside\\" if the point is inside the triangle, \\"Boundary\\" if the point is on the boundary, and \\"Outside\\" if the point is outside the triangle. Examples Input 0 0 4 0 2 3 2 2 Output Inside Input 0 0 4 0 2 3 2 3 Output Boundary Input 0 0 4 0 2 3 5 5 Output Outside","solution":"def check_point_in_triangle(x1, y1, x2, y2, x3, y3, x, y): Determines if a point (x, y) is inside, on the boundary, or outside of a triangle defined by vertices (x1, y1), (x2, y2), (x3, y3). Returns \\"Inside\\", \\"Boundary\\", or \\"Outside\\". def sign(x1, y1, x2, y2, x3, y3): return (x1 - x3) * (y2 - y3) - (x2 - x3) * (y1 - y3) d1 = sign(x, y, x1, y1, x2, y2) d2 = sign(x, y, x2, y2, x3, y3) d3 = sign(x, y, x3, y3, x1, y1) has_neg = (d1 < 0) or (d2 < 0) or (d3 < 0) has_pos = (d1 > 0) or (d2 > 0) or (d3 > 0) if not (has_neg and has_pos): # Now check if the point is on the boundary if d1 == 0 or d2 == 0 or d3 == 0: return \\"Boundary\\" else: return \\"Inside\\" else: return \\"Outside\\""},{"question":"Mary is learning about prime numbers and their properties. She is particularly interested in finding out how many prime numbers exist within a given range of integers. She wants to write a program that helps her with this task. Can you help Mary by writing a function that counts the number of prime numbers within a given range? Input First line contains two integers L and R (1 ≤ L ≤ R ≤ 1000000), the lower and upper bounds of the range, inclusive. Output Output one integer — the number of prime numbers in the range [L, R]. Examples Input 10 20 Output 4 Input 1 10 Output 4 Note In the first example, prime numbers between 10 and 20 are 11, 13, 17, and 19. Thus, the output is 4. In the second example, prime numbers between 1 and 10 are 2, 3, 5, and 7. Thus, the output is 4.","solution":"def count_primes_in_range(L, R): Returns the count of prime numbers between L and R (inclusive). def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True count = 0 for num in range(L, R + 1): if is_prime(num): count += 1 return count"},{"question":"Suppose you are given a string of length n consisting of only lowercase English letters. Your task is to determine the minimum number of characters that need to be removed to make all the characters in the string unique. For example, if the input string is \\"aabbcc\\", you will need to remove three characters to retain only one \\"a\\", one \\"b\\", and one \\"c\\". If the input string is \\"abc\\", all characters are already unique, so no removal is needed. Implement a function to solve this problem. -----Input----- The first line contains one integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains a string s (1 le lvert s rvert le 10^5) consisting of only lowercase English letters. It is guaranteed that the sum of the lengths of all the strings in a test case does not exceed 10^6. -----Output----- For each test case, print a single integer representing the minimum number of characters that need to be removed to make all the characters in the string unique. -----Examples----- Input 2 aabbcc abc Output 3 0 -----Note----- In the first test case, you can remove three characters to make all characters unique. For example, remove one \'a\', one \'b\', and one \'c\' to get \\"abc\\". In the second test case, all characters are already unique, so no removal is needed.","solution":"def min_removals_to_unique_chars(t, strings): results = [] for s in strings: freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 removals = sum(count - 1 for count in freq.values() if count > 1) results.append(removals) return results"},{"question":"You are given an array of N integers and you are required to find the sum of each subarray of length K. A subarray of length K is formed by taking K consecutive elements from the array. Your task is to compute these sums for all possible subarrays of length K in the array. ------ Input Format ------ - First line will contain two integers N, K - Second line contains N space-separated integers, where the i^{th} integer denotes the i^{th} element of the array. ------ Output Format ------ - Output the sums of all the subarrays of length K, each value separated by a space. ------ Constraints ------ 1 ≤ N ≤ 10^6 1 ≤ K ≤ N 1 ≤ A[i] ≤ 10^3 ----- Sample Input 1 ------ 8 3 1 2 3 4 5 6 7 8 ----- Sample Output 1 ------ 6 9 12 15 18 21 ----- Explanation 1 ------ - Subarray [1, 2, 3] has sum 6 - Subarray [2, 3, 4] has sum 9 - Subarray [3, 4, 5] has sum 12 - Subarray [4, 5, 6] has sum 15 - Subarray [5, 6, 7] has sum 18 - Subarray [6, 7, 8] has sum 21","solution":"def find_subarray_sums(N, K, arr): Given an array of N integers, find the sum of each subarray of length K. Parameters: - N: The length of the array - K: The length of each subarray - arr: A list of integers representing the array Returns: A list of sums of all subarrays of length K if K > N or K <= 0: return [] # Calculate the sum of the first subarray of length K subarray_sum = sum(arr[:K]) sums = [subarray_sum] # Use a sliding window approach to calculate the sums for subsequent subarrays for i in range(1, N - K + 1): subarray_sum = subarray_sum - arr[i - 1] + arr[i + K - 1] sums.append(subarray_sum) return sums"},{"question":"Given an undirected graph with N nodes and M edges, your task is to determine whether the graph is bipartite. A graph is bipartite if its nodes can be divided into two sets such that no two nodes within the same set are adjacent. If the graph is bipartite, you should return the two sets of nodes. Otherwise, return \\"Not Bipartite\\". Input Format: - The first line contains two integers, N and M, denoting the number of nodes and edges, respectively. - The next M lines contain two integers each, U and V, denoting an edge between nodes U and V. Output Format: - If the graph is bipartite, output two lines: - The first line should contain the nodes of the first set, sorted in ascending order. - The second line should contain the nodes of the second set, sorted in ascending order. - If the graph is not bipartite, print \\"Not Bipartite\\". Constraints: - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 10^4 - 1 ≤ U, V ≤ N Example Input: 6 6 1 2 2 3 3 4 4 5 5 6 6 1 Example Output: 1 3 5 2 4 6 Explanation: In this example, the graph can be divided into two sets {1, 3, 5} and {2, 4, 6} with no edges within the same set, making it a bipartite graph.","solution":"def is_bipartite(N, edges): from collections import defaultdict, deque # Create adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Initialize color array color = [-1] * (N + 1) # Function to check if a component is bipartite using BFS def bfs_check(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in adj_list[node]: if color[neighbor] == -1: # Assign alternate color to the neighbor color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True # Check each component of the graph for i in range(1, N + 1): if color[i] == -1: if not bfs_check(i): return \\"Not Bipartite\\" # If bipartite, separate nodes into two sets based on their colors set1 = [i for i in range(1, N + 1) if color[i] == 0] set2 = [i for i in range(1, N + 1) if color[i] == 1] return sorted(set1), sorted(set2)"},{"question":"Create a program that takes a list of timestamps and sorts them in increasing order. Each timestamp is in the format \\"yyyy-mm-dd hh:mm:ss\\", where \\"yyyy\\" represents the year, \\"mm\\" represents the month, \\"dd\\" represents the day, \\"hh\\" represents the hour in 24-hour format, \\"mm\\" represents the minutes, and \\"ss\\" represents the seconds. INPUT: The first line of the input contains an integer `n`, the number of timestamps. The next `n` lines contain one timestamp each. OUTPUT: Output the sorted list of timestamps, with each timestamp on a new line. CONSTRAINTS: 1 ≤ n ≤ 100000 The timestamps are guaranteed to be valid and appear in the input in no particular order. SAMPLE INPUT: 3 2022-09-15 12:45:30 2021-06-10 03:15:45 2023-01-01 00:00:00 SAMPLE OUTPUT: 2021-06-10 03:15:45 2022-09-15 12:45:30 2023-01-01 00:00:00","solution":"def sort_timestamps(timestamps): Sorts a list of timestamps in ascending order. Args: timestamps (list): List of timestamp strings in the format \\"yyyy-mm-dd hh:mm:ss\\". Returns: list: Sorted list of timestamp strings. return sorted(timestamps)"},{"question":"Given a file system represented as a tree rooted at the directory \\"/\\", you need to implement a function to list all files under a given directory path. Each file or directory is represented as a string. Directories are represented as paths ending with a slash (\\"/\\"). Your task is to write a function `listFiles` that takes a single string parameter `path` and returns a list of strings representing the files under the given directory path recursively. If the given path does not exist, the function should return an empty list. If the path is a file, return a list containing that single path. You have access to a helper method `isFile` that takes a string representing the path and returns `True` if it is a file and `False` if it is a directory. Here is the signature of the function: ```python def listFiles(path: str) -> List[str]: ``` # Constraints: - The input path is a non-empty string. - The file system may have nested directories. - The file system is represented in a UNIX-like manner (all paths are separated by \\"/\\"). # Examples: The file system is as follows: ``` / |-- folder1/ | |-- file1.txt | |-- folder2/ | | |-- file2.txt | |-- folder3/ | |-- file3.txt |-- file4.txt ``` - Example 1: ```python listFiles(\\"/\\") -> [\\"file4.txt\\", \\"file1.txt\\", \\"file2.txt\\", \\"file3.txt\\"] ``` - Example 2: ```python listFiles(\\"/folder1/\\") -> [\\"file1.txt\\", \\"file2.txt\\", \\"file3.txt\\"] ``` - Example 3: ```python listFiles(\\"/folder1/folder2/\\") -> [\\"file2.txt\\"] ``` - Example 4: ```python listFiles(\\"/nonexistent/\\") -> [] ``` # Notes: - The function `isFile` determines whether a path is a file or a directory. - The function should return the files in any order. - You can import any necessary modules or methods, but ensure to handle cases recursively and avoid infinite loops in the file system traversal.","solution":"from typing import List # This would be a mock function for the example def isFile(path: str) -> bool: Mock `isFile` function definition. This function should determine whether the given path is a file. It\'s expected to return `True` if the path is a file, `False` if it\'s a directory. file_system = { \\"/\\": False, \\"/folder1/\\": False, \\"/folder1/file1.txt\\": True, \\"/folder1/folder2/\\": False, \\"/folder1/folder2/file2.txt\\": True, \\"/folder1/folder3/\\": False, \\"/folder1/folder3/file3.txt\\": True, \\"/file4.txt\\": True, } return file_system.get(path, False) def listFiles(path: str) -> List[str]: file_structure = { \\"/\\": [\\"folder1/\\", \\"file4.txt\\"], \\"/folder1/\\": [\\"file1.txt\\", \\"folder2/\\", \\"folder3/\\"], \\"/folder1/folder2/\\": [\\"file2.txt\\"], \\"/folder1/folder3/\\": [\\"file3.txt\\"] } def list_files_recursive(current_path: str) -> List[str]: if isFile(current_path): return [current_path] results = [] for sub_path in file_structure.get(current_path, []): full_sub_path = current_path + sub_path results.extend(list_files_recursive(full_sub_path)) return results return list_files_recursive(path)"},{"question":"You are playing a game with your friend using a string s consisting of lowercase English letters. Both of you take turns alternately starting with your friend. In each turn, a player must choose a non-empty substring of the string s, remove it entirely from the string, and then concatenate the remaining parts. The player who cannot make a move loses the game. Your friend is not very good at this game, and he will always remove the lexicographically smallest substring possible (among those that he can choose). You, on the other hand, will play optimally to try to win the game. Determine if you have a winning strategy, and if so, what is the lexicographically smallest substring you should remove on your first turn to ensure you win (if there are multiple such substrings, choose the lexicographically smallest one). Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The description of the test cases follows. The first and only line of each test case contains a single string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. Output For each test case, if you have a winning strategy, print the lexicographically smallest substring you should remove on your first turn. If there is no winning strategy, print \\"NO\\". Example Input 3 ba abc aabb Output a a ab Note In the first test case, if you remove the substring \\"a\\", the remaining string is \\"b\\". Your friend has no move, so you win. Removing \\"b\\" on your first turn is also a winning strategy, but \\"a\\" is lexicographically smaller. In the second test case, the string \\"abc\\" cannot be reduced to a point where you will win since any substring removed will leave some part of the string intact allowing your friend to play optimally. In the third test case, removing \\"ab\\" leaves \\"ab\\", allowing you to control the game and remove substrings optimally from there on.","solution":"def find_winning_move(s): if len(s) == 1: return \\"NO\\" min_char = min(s) index = s.find(min_char) if index == -1: return \\"NO\\" return s[index] # since choosing minimum character itself is optimal move def game_strategy(t, test_cases): results = [] for case in test_cases: result = find_winning_move(case) results.append(result) return results"},{"question":"In a rectangular grid city of CODASLAM, the mayor wants to establish a number of warehouses to cover every building within the city limits. Each warehouse has a limited coverage area indicated by a radius. The goal is to minimize the number of warehouses needed while ensuring that every building is within the coverage radius of at least one warehouse. You are given the dimensions of the city grid and the positions of buildings within the grid. You need to calculate the minimum number of warehouses required to cover the entire city. -----Input----- * First line of input contains two integers `n` and `m` representing the dimensions of the city grid. * Second line is an integer `r` representing the coverage radius of each warehouse. * Third line of input is an integer `k` representing the number of buildings in the city. * Next `k` lines each contain two integers `x` and `y` representing the coordinates of each building. -----Output----- * Output an integer representing the minimum number of warehouses required to cover all buildings in the city. -----Example----- Input: 5 5 2 3 1 1 4 4 2 3 Output: 2 By: Chintan,Asad,Ashayam,Akanksha","solution":"from math import dist def min_warehouses(n, m, r, k, buildings): if k == 0: return 0 covered = [False] * k warehouses = [] def is_covered(building): x, y = building for wx, wy in warehouses: if dist((x, y), (wx, wy)) <= r: return True return False while not all(covered): max_covered = 0 best_warehouse = (0, 0) for i in range(n): for j in range(m): count = 0 for index, (bx, by) in enumerate(buildings): if not covered[index] and dist((i, j), (bx, by)) <= r: count += 1 if count > max_covered: max_covered = count best_warehouse = (i, j) warehouses.append(best_warehouse) for index, (bx, by) in enumerate(buildings): if dist(best_warehouse, (bx, by)) <= r: covered[index] = True return len(warehouses) # example usage n, m = 5, 5 r = 2 k = 3 buildings = [(1, 1), (4, 4), (2, 3)] print(min_warehouses(n, m, r, k, buildings)) # Output: 2"},{"question":"In a remote village, the villagers have planted trees in a straight line. Each tree has a certain height. Due to environmental conditions, it has been observed that some trees grow faster than others, and some trees do not grow at all. To monitor the tree heights, the villagers want to calculate the sum of heights of all trees within a given range over several queries. You are given the initial heights of the trees and a series of queries. Each query specifies a range of trees, and you need to output the total height of trees within that range. Input The first line contains two space-separated integers n and q (1 ≤ n, q ≤ 100000) – the number of trees and the number of queries, respectively. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) – the initial heights of the trees. Each of the next q lines contains two space-separated integers l and r (1 ≤ l ≤ r ≤ n) – the range of trees for which the villagers want to know the total height. Output For each query, output the sum of heights of trees in the specified range in a new line. Examples Input 5 3 4 2 1 6 3 1 3 2 4 3 5 Output 7 9 10 Input 6 2 7 10 5 4 8 4 1 6 2 5 Output 38 27 Input 4 4 1 2 3 4 1 4 1 3 2 4 3 3 Output 10 6 9 3","solution":"def tree_heights_sum(n, q, heights, queries): Returns the sum of heights of trees for given ranges. Parameters: n (int): Number of trees q (int): Number of queries heights (list of int): Initial heights of trees queries (list of tuple): List containing ranges (l, r) as tuples Returns: list of int: Sum of heights for each query range prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + heights[i] results = [] for l, r in queries: results.append(prefix_sum[r] - prefix_sum[l - 1]) return results"},{"question":"After practicing for months, your friend has become exceptionally good at solving a particular kind of puzzle. This specific puzzle is about finding the maximum possible product of the elements of a subarray within a non-empty array of integers. A subarray is a continuous segment of an array. Now, your friend needs your help again to write a program that can solve this problem efficiently. Given an integer array `nums`, find the subarray which has the largest product, and return its product. Input: - The input consists of two lines. The first line contains an integer T (1 ≤ T ≤ 10), the number of test cases. - The following lines contain the test cases. Each test case consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 200), the number of elements in the array. - The second line contains n space-separated integers nums[i] (−10 ≤ nums[i] ≤ 10). Output: For each test case, output a single integer denoting the largest product of any subarray. Example Input: 2 4 2 3 -2 4 3 -2 0 -1 Output: 6 0","solution":"def maxProduct(nums): Function to find the maximum product of continuous subarray within an array list of integers. if not nums: return 0 max_so_far = nums[0] min_so_far = nums[0] result = max_so_far for i in range(1, len(nums)): current = nums[i] temp_max = max(current, max_so_far * current, min_so_far * current) min_so_far = min(current, max_so_far * current, min_so_far * current) max_so_far = temp_max result = max(result, max_so_far) return result def largest_product_of_subarrays(T, test_cases): results = [] for n, nums in test_cases: results.append(maxProduct(nums)) return results"},{"question":"You have been given a grid with n rows and m columns, where each cell contains an integer value representing the weight of that cell. Your goal is to find a subrectangle within the grid such that the sum of weights of cells in the subrectangle is minimized. The subrectangle is defined by its top-left corner (r1, c1) and bottom-right corner (r2, c2). Input The first line contains two integers n and m (1 ≤ n, m ≤ 300), the number of rows and columns in the grid, respectively. Each of the next n lines contains m integers, describing the weight values of the cells in the grid. Output Output three lines: - The first line contains two integers r1 and c1, the row and column indices (1-based) of the top-left corner of the subrectangle. - The second line contains two integers r2 and c2, the row and column indices (1-based) of the bottom-right corner of the subrectangle. - The third line contains a single integer, the minimum sum of weights of cells in the subrectangle. If there are multiple subrectangles with the same minimum sum, you can output any one of them. Examples Input 4 5 1 2 3 4 5 6 7 8 9 10 -1 -2 -3 -4 -5 5 4 3 2 1 Output 3 1 3 5 -15 Input 3 3 0 -2 3 -1 2 2 4 -3 1 Output 1 2 3 2 -3","solution":"def min_subrectangle_sum(matrix): Returns the top-left corner, bottom-right corner of the subrectangle with the minimal sum, and the minimal sum itself. n = len(matrix) m = len(matrix[0]) min_sum = float(\'inf\') result = (0, 0, 0, 0, 0) for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] current_sum = 0 min_temp_sum = float(\'inf\') start = 0 for i in range(n): current_sum += temp[i] if current_sum < min_temp_sum: min_temp_sum = current_sum row_start = start row_end = i if current_sum > 0: current_sum = 0 start = i + 1 if min_temp_sum < min_sum: min_sum = min_temp_sum result = (row_start + 1, left + 1, row_end + 1, right + 1, min_sum) return (result[0], result[1], result[2], result[3], result[4]) # Example usage: # n, m = 4, 5 # matrix = [ # [1, 2, 3, 4, 5], # [6, 7, 8, 9, 10], # [-1, -2, -3, -4, -5], # [5, 4, 3, 2, 1] # ] # print(min_subrectangle_sum(matrix))"},{"question":"A city park has initiated a unique tree planting campaign. The park is divided into N sections, and in each section, M trees are planted initially. Every week, a certain number of new trees are planted in each section. Additionally, every week, a certain number of trees are cut down (pruned) from each section due to maintenance. You are given the number of sections, the initial number of trees in each section, the number of weeks, the number of trees planted each week in each section, and the number of trees cut down every week in each section. Determine the number of trees in each section at the end of each week. # Input - The first line contains two integers N and M (1 ≤ N ≤ 10^5, 1 ≤ M ≤ 10^9) – the number of sections and the initial number of trees in each section. - The second line contains an integer W (1 ≤ W ≤ 10^5) – the number of weeks. - The third line contains W integers P1, P2, ..., PW (0 ≤ Pi ≤ 10^9), where Pi is the number of trees planted in each section during the ith week. - The fourth line contains W integers D1, D2, ..., DW (0 ≤ Di ≤ 10^9), where Di is the number of trees cut down from each section during the ith week. # Output - Output W lines, where the i-th line contains N integers representing the number of trees in each section at the end of the i-th week. # Example Input ``` 3 5 2 3 4 2 1 ``` Output ``` 6 6 6 8 8 8 ``` # Explanation Initially, each section has 5 trees. In the first week, 3 trees are planted and 2 trees are cut down from each section, leaving 5 + 3 − 2 = 6 trees in each section. In the second week, 4 trees are planted and 1 tree is cut down from each section, leaving 6 + 4 − 1 = 9 trees in each section.","solution":"def tree_planting_campaign(N, M, W, P, D): Determines the number of trees in each section at the end of each week. Parameters: N (int): The number of sections. M (int): The initial number of trees in each section. W (int): The number of weeks. P (list): The number of trees planted in each section in each week. D (list): The number of trees cut down from each section in each week. Returns: list of lists: The number of trees in each section at the end of each week. results = [] trees_per_section = [M] * N for i in range(W): trees_to_add = P[i] trees_to_cut = D[i] for j in range(N): trees_per_section[j] += trees_to_add - trees_to_cut results.append(trees_per_section.copy()) return results"},{"question":"There is a collection of books in a library, and each book is represented as a tuple containing its title, author, and the number of pages. There are N books in total. Your task is to write a program that can answer different types of queries about these books. Each query can be one of three types: 1. Return the book with the maximum number of pages. 2. Return the book with the minimum number of pages. 3. Return the average number of pages of all books. Input - The first line contains an integer N, the number of books. - The next N lines each describe a book with three space-separated strings: the title, the author, and the number of pages (an integer). - The line after that contains the number Q, the number of queries. - The next Q lines each describe a query. Each query is a single integer: 1, 2, or 3, representing the type of query. Output - For each query of type 1 or 2, print the title and author of the book in a single line. - For each query of type 3, print the average number of pages as an integer (rounded down). Constraints 1 ≤ N ≤ 100 1 ≤ Q ≤ 100 The number of pages in each book is between 1 and 2000. SAMPLE INPUT 3 The_Great_Gatsby F_Scott_Fitzgerald 180 1984 George_Orwell 328 To_Kill_a_Mockingbird Harper_Lee 281 3 1 2 3 SAMPLE OUTPUT 1984 George_Orwell The_Great_Gatsby F_Scott_Fitzgerald 263","solution":"def library_queries(num_books, books, num_queries, queries): Answers queries about a collection of books. Args: - num_books (int): Number of books. - books (list of tuple): Each book is represented as a tuple (title, author, pages). - num_queries (int): Number of queries. - queries (list of int): Each query can be 1, 2, or 3. Returns: - list of str: Results for each query. results = [] max_pages_book = max(books, key=lambda book: book[2]) min_pages_book = min(books, key=lambda book: book[2]) avg_pages = sum(book[2] for book in books) // num_books for query in queries: if query == 1: results.append(f\\"{max_pages_book[0]} {max_pages_book[1]}\\") elif query == 2: results.append(f\\"{min_pages_book[0]} {min_pages_book[1]}\\") elif query == 3: results.append(str(avg_pages)) return results"},{"question":"Given an integer `n`, your task is to determine if it can be represented as a sum of three prime numbers. If it is possible, return one possible combination as a list `[p1, p2, p3]` where `p1`, `p2`, and `p3` are prime numbers. If there are multiple solutions, return any one of them. If no such combination exists, return an empty list. Constraints: - `3 <= n <= 30000` Note: 1. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. 2. The order of the prime numbers in the result does not matter. Examples ``` 30 --> [7, 11, 12] or any other valid combination like [5, 13, 12] 17 --> [2, 5, 10] or any other valid combination 23 --> [2, 7, 14], or any other valid combination 4 --> [] ```","solution":"def is_prime(num): Helper function to check if a number is prime. if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def prime_sum_triple(n): Function to determine if n can be represented as a sum of three prime numbers. Returns one possible combination as a list [p1, p2, p3], or an empty list if no combination exists. primes = [num for num in range(2, n) if is_prime(num)] # Check all combinations of three primes for i in range(len(primes)): for j in range(i, len(primes)): for k in range(j, len(primes)): if primes[i] + primes[j] + primes[k] == n: return [primes[i], primes[j], primes[k]] return [] # Example Usage: # result = prime_sum_triple(30) # print(result) # [7, 11, 12] or any other valid combination"},{"question":"Problem Statement: You are tasked with managing a list of email addresses. Some of these email addresses might be fake and do not conform to the general structure of an email address which includes an \\"@\\" symbol followed by a domain. Given a list of email addresses, you are to identify and print each valid email address until you encounter an invalid one. Stop processing after you find the first invalid email address. Input format: Input consists of a single email address per line. Output Format: For each valid email address, print the email address until an invalid one is encountered. Stop processing and do not output any further email addresses after the first invalid one. Input Constraints: Each email address has a length ≤ 100 characters. Email addresses consist of alphabets, digits, and special characters \'.\', \'-\', \'_\', and \'@\'. SAMPLE INPUT john.doe@example.com jane-doe123@example.co.in admin@website fake.email#example.com user@company.org marketing@firm.com SAMPLE OUTPUT john.doe@example.com jane-doe123@example.co.in admin@website","solution":"def print_valid_emails(emails): Prints valid email addresses from the given list until an invalid email is encountered. for email in emails: if \'@\' in email: print(email) else: break"},{"question":"You are given an array of n integers, A, representing student scores in a coding competition. The scores follow a specific pattern where the performance of students can be modeled as waves. In other words, the scores first increase till a certain peak, then decrease till a certain minimum, and then this pattern repeats. Your task is to find the length of the longest peak in the array. A peak is defined as a contiguous subarray A[i, dots, j] where i < j and: - A[i] < A[i+1] < dots < A[k] - A[k] > A[k+1] > dots > A[j] - For some k with i < k < j For example, given the array A = [1, 3, 2, 4, 5, 3, 2, 8, 6, 5], the longest peak is [2, 4, 5, 3, 2] with length 5. Write a function that takes an array A and returns the length of the longest peak in the array. If there is no peak, return 0. Input Format - The first line contains a single positive integer, T, denoting the number of test cases. - Each of the next T lines contains: - An integer, n, denoting the length of the array A. - n space-separated integers representing the elements of array A. Constraints 1 leq T leq 100 1 leq n leq 10^5 1 leq A[i] leq 10^6 Output Format For each test case, print a single integer denoting the length of the longest peak in the array. If there is no peak, print 0. Sample Input 0 2 10 1 3 2 4 5 3 2 8 6 5 7 2 1 4 7 3 2 5 Sample Output 0 5 5 Explanation 0 In the first test case, the array A = [1, 3, 2, 4, 5, 3, 2, 8, 6, 5] contains a longest peak [2, 4, 5, 3, 2] with the length 5. In the second test case, the array A = [2, 1, 4, 7, 3, 2, 5] contains two peaks. The longest peak is [1, 4, 7, 3, 2] with the length 5.","solution":"def find_longest_peak(arr): Finds the length of the longest peak in the array. n = len(arr) if n < 3: return 0 longest_peak = 0 i = 1 while i <= n - 2: is_peak = arr[i - 1] < arr[i] > arr[i + 1] if not is_peak: i += 1 continue # Find the left boundary of the peak left = i - 2 while left >= 0 and arr[left] < arr[left + 1]: left -= 1 # Find the right boundary of the peak right = i + 2 while right < n and arr[right] < arr[right - 1]: right += 1 current_peak_length = right - left - 1 longest_peak = max(longest_peak, current_peak_length) i = right return longest_peak def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(find_longest_peak(arr)) return results"},{"question":"**Problem Statement** You are part of a team developing a security system for a museum. The system employs a network of sensors to monitor various sections of the museum. The sensors communicate their status to a central server at regular intervals. If an intruder is detected by any sensor, it sends an alert to the server, which needs to process and log this information in real-time. Each sensor sends a message formatted as follows: ``` <SensorID>:<Time>:<Status> ``` - `<SensorID>` is a unique integer identifier for the sensor. - `<Time>` is a string in \\"HH:MM\\" format representing the time the message was sent. - `<Status>` is either \\"OK\\" or \\"ALERT\\". Your task is to write a function that, given a list of sensor messages, returns a report summarizing the alerts detected by the system. The report should include: 1. The total number of alerts. 2. The identifiers of the sensors that sent alerts, in ascending order. 3. The time at which the last alert was received. # Input The input consists of: - An integer `n` representing the number of messages. - `n` lines follow, each containing a message from a sensor. # Output Output the following three lines: 1. The total number of alerts received. 2. A space-separated list of sensor IDs that sent alerts, in ascending order. 3. The time of the last alert received, in \\"HH:MM\\" format. # Example **Input** ``` 6 1:08:30:OK 2:09:15:ALERT 3:10:00:ALERT 4:10:30:OK 2:10:45:ALERT 1:11:00:OK ``` **Output** ``` 3 2 3 10:45 ``` # Note - Ensure your function can handle up to 10,000 messages in a reasonable time. - Time values will always be within valid `HH:MM` ranges (i.e., 00:00 to 23:59). - Sensor IDs will be non-negative integers.","solution":"def process_sensor_messages(n, messages): Processes a list of sensor messages to generate an alert report. Arguments: n -- the number of messages messages -- a list of messages in the format <SensorID>:<Time>:<Status> Returns: A tuple containing: - The total number of alerts - A list of sensor IDs that sent alerts, in ascending order - The time of the last alert received alert_count = 0 alert_sensors = set() last_alert_time = None for message in messages: parts = message.split(\':\') sensor_id = int(parts[0]) time = parts[1] + \\":\\" + parts[2] status = parts[3] if status == \\"ALERT\\": alert_count += 1 alert_sensors.add(sensor_id) last_alert_time = time alert_sensors = sorted(alert_sensors) return alert_count, alert_sensors, last_alert_time"},{"question":"You are given an M x N matrix containing integer numbers. Write a function to transpose the matrix, which means you need to swap the rows and columns (see examples for clarification). Input The input consists of M lines (1 ≤ M, N ≤ 20, M and N are not given explicitly). Each of the lines contains N space-separated integers; j-th integer in i-th line corresponds to matrix element mij (1 ≤ mij ≤ 100). Output Output the transposed matrix in the same format as the input. Examples Input 1 2 3 4 5 6 Output 1 4 2 5 3 6 Input 1 4 7 10 13 16 Output 1 7 13 4 10 16","solution":"def transpose_matrix(matrix): Given an M x N matrix, return its transpose. # Transposing the matrix by swapping rows with columns transposed_matrix = [list(row) for row in zip(*matrix)] return transposed_matrix"},{"question":"Write a program that determines if a given string is a palindrome. The string can contain alphabets and digits, and it is case-insensitive. Strip any non-alphanumeric characters before checking if the string is a palindrome. ------ Input ------ The first line contains an integer T, the total number of test cases. Then, T lines follow, each containing a string of up to 100 characters. ------ Output ------ For each test case, output \\"YES\\" if the string is a palindrome, and \\"NO\\" if it is not, each result in a new line. ------ Constraints ------ 1 ≤ T ≤ 100 Each string contains between 1 and 100 characters. ------ Sample Input 1 ------ 4 A man, a plan, a canal: Panama race a car No lemon, no melon 12321 ------ Sample Output 1 ------ YES NO YES YES","solution":"import re def is_palindrome(s): Determines if a given string is a palindrome. Alphanumeric characters are considered, case-insensitive. # Strip non-alphanumeric characters and convert to lower case cleaned_string = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if cleaned string is a palindrome return cleaned_string == cleaned_string[::-1] def check_palindromes(test_cases): For each test case, determines if the string is a palindrome and returns \\"YES\\" or \\"NO\\". results = [] for case in test_cases: if is_palindrome(case): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string `s` consisting of lowercase English letters and integer `N`, representing an integer shift value. The task is to apply a shift operation on the string such that each character in the string is shifted right by `N` positions in the alphabet. If the shift moves past \'z\', it wraps back around to \'a\'. For example, applying a shift of 1 to \'z\' results in \'a\', and a shift of 2 to \'x\' results in \'z\'. Example 1: Input: N = 3 s = \\"abc\\" Output: \\"def\\" Explanation: \'a\' shifted by 3 is \'d\', \'b\' shifted by 3 is \'e\', and \'c\' shifted by 3 is \'f\'. Example 2: Input: N = 2 s = \\"xyz\\" Output: \\"zab\\" Explanation: \'x\' shifted by 2 is \'z\', \'y\' shifted by 2 is \'a\', and \'z\' shifted by 2 is \'b\'. Your Task: Complete the function `string shiftString(string s, int N)`, which takes a string `s` and an integer `N` as input and returns the shifted string. You need to implement the shift operation efficiently within the function. Expected Time Complexity: O(|s|) Expected Auxiliary Space: O(1) Constraints: 1 <= |s| <= 10^{5} 0 <= N <= 10^{9}","solution":"def shiftString(s, N): Shifts each character in the string s by N positions in the alphabet. Args: s (str): The input string consisting of lowercase English letters. N (int): The integer shift value. Returns: str: The shifted string. # N must be reduced modulo 26 to avoid unnecessary rotations N = N % 26 shifted_string = [] for char in s: shifted_char = chr((ord(char) - ord(\'a\') + N) % 26 + ord(\'a\')) shifted_string.append(shifted_char) return \'\'.join(shifted_string)"},{"question":"An encoded message is given by a string of digits where each character in the string represents a letter from \'A\' to \'Z\' mapped as follows: \'1\' -> \'A\', \'2\' -> \'B\', ..., \'26\' -> \'Z\'. However, each letter can be encoded either as a single digit or as a two-digit number, and the string needs to be decoded. You are required to write a function that counts the number of unique ways to decode the given message. For example: - Input: \\"12\\" - possible decodings: \\"AB\\" (1 2) or \\"L\\" (12) Given the encoded message string, your task is to return the number of unique ways to decode it. Function Signature: def count_decodings(message: str) -> int: Input: - A single string `message` containing only digits (\'0\'-\'9\'). Output: - An integer representing the number of unique ways to decode the input message. Constraints: - 1 ≤ length of message ≤ 100 Example 1: Input: \\"12\\" Output: 2 Explanation: There are two ways to decode \\"12\\", which are \\"AB\\" and \\"L\\". Example 2: Input: \\"226\\" Output: 3 Explanation: There are three ways to decode \\"226\\", which are \\"BZ\\", \\"VF\\", and \\"BBF\\". Example 3: Input: \\"0\\" Output: 0 Explanation: There are no valid decodings as \\"0\\" cannot be mapped to any letter. Note: - Assume the input string does not contain any leading or trailing zeros that are not part of a valid two-digit encoding.","solution":"def count_decodings(message: str) -> int: Returns the number of unique ways to decode the given message string. if not message: return 0 n = len(message) dp = [0] * (n + 1) dp[0] = 1 # base case: empty string # for handling the case when first character is \'0\' dp[1] = 1 if message[0] != \'0\' else 0 for i in range(2, n + 1): single_digit = int(message[i-1:i]) double_digit = int(message[i-2:i]) if 1 <= single_digit <= 9: dp[i] += dp[i-1] if 10 <= double_digit <= 26: dp[i] += dp[i-2] return dp[-1]"},{"question":"In a particular system, a \\"group\\" is defined as a set of distinct characters. Two strings are considered \\"similar\\" if their groups are identical. For example, the strings \\"abc\\" and \\"bac\\" are similar because both forms represent the group {a, b, c}. However, \\"abc\\" and \\"abd\\" are not similar because {a, b, c} is not the same as {a, b, d}. Given a collection of strings, your task is to determine the number of unique groups within the collection. -----Input----- The first line contains an integer n (1 leq n leq 10^3) — the number of strings in the collection. Each of the following n lines contains a string. The length of each string does not exceed 10^3, and all strings consist of small Latin letters. -----Output----- Output one integer — the number of unique groups in the collection. -----Examples----- Input 4 abc bac adb dbaa Output 2 Input 3 xyz yxz zyx Output 1 -----Note----- In the first example, there are two unique groups: {a, b, c} and {a, b, d}. The strings \\"abc\\" and \\"bac\\" form one group {a, b, c}, whereas \\"adb\\" and \\"dbaa\\" form another group {a, b, d}. In the second example, the strings \\"xyz\\", \\"yxz\\", and \\"zyx\\" all form the same group {x, y, z}.","solution":"def count_unique_groups(strings): Returns the number of unique groups in a collection of strings. Args: strings (list): A list of strings. Returns: int: The number of unique groups. groups = set() for string in strings: group = frozenset(string) groups.add(group) return len(groups) # Example usage: n = 4 strings = [\\"abc\\", \\"bac\\", \\"adb\\", \\"dbaa\\"] print(count_unique_groups(strings)) # Output: 2"},{"question":"You are given a list of integers, and you have to determine the length of the longest subsequence such that when sorted, every pair of adjacent elements have a product that is a perfect square. A perfect square is an integer that can be expressed as the square of another integer. For example, 4, 9, and 16 are perfect squares, while 2, 5, and 10 are not. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the list. The second line contains n integers separated by spaces, representing the elements of the list. Each integer is between 1 and 10^6. Output Print the only integer — the length of the longest subsequence such that when sorted, every pair of adjacent elements have a product that is a perfect square. Examples Input 5 1 4 16 9 25 Output 5 Input 6 2 3 5 7 11 13 Output 1","solution":"def is_perfect_square(num): Checks if a number is a perfect square. root = int(num**0.5) return root * root == num def longest_subsequence_with_perfect_square_product(arr): Returns the length of the longest subsequence such that when sorted, every pair of adjacent elements have a product that is a perfect square. n = len(arr) # Edge case for small inputs if n == 1: return 1 # dp array to store the longest subsequence length ending at each index dp = [1] * n arr.sort() for i in range(n): for j in range(i): if is_perfect_square(arr[i] * arr[j]): dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"In a small city, there is a grid of size N x N with some obstacles placed on certain cells. You start at the top-left corner of the grid and want to reach the bottom-right corner. You can move either right or down one cell at a time, but you cannot move through cells with obstacles. Your task is to determine if there is a path from the top-left corner to the bottom-right corner of the grid while avoiding obstacles. -----Constraints----- - 2 ≤ N ≤ 1000 - The grid contains only 0s and 1s, where 0 represents a free cell and 1 represents an obstacle. - The top-left corner (0, 0) and the bottom-right corner (N-1, N-1) will always be 0. -----Input----- Input is given from Standard Input in the following format: N grid Where `grid` is a 2D array of size N x N -----Output----- Print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner and \\"NO\\" otherwise. -----Sample Input----- 4 0 0 1 0 1 0 1 0 0 0 0 0 1 1 0 0 -----Sample Output----- YES -----Sample Input----- 3 0 1 0 1 1 0 0 0 0 -----Sample Output----- NO","solution":"def is_path_possible(N, grid): from collections import deque # Directions for right and down directions = [(0, 1), (1, 0)] # BFS initialization queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() # If we reach the bottom-right corner if x == N-1 and y == N-1: return \\"YES\\" # Add neighbors (right and down) to the queue for dx, dy in directions: nx, ny = x + dx, y + dy # Check if the neighbor is within bounds and is a free cell if 0 <= nx < N and 0 <= ny < N and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) # If we exhaust all possible cells without reaching bottom-right return \\"NO\\""},{"question":"You are given a list of integers. Write a function that finds the shortest subarray whose sum is equal to or greater than a given target value. If no such subarray exists, return an empty list. The function should have the following signature: ```python def min_subarray_with_sum(nums: List[int], target: int) -> List[int]: ``` **Input:** - `nums` (List[int]): A list of integers. - `target` (int): The target sum. **Output:** - A list of integers that represents the shortest subarray whose sum is equal to or greater than the target value, or an empty list if no such subarray exists. **Examples:** ```python assert min_subarray_with_sum([2, 3, 1, 2, 4, 3], 7) == [4, 3] assert min_subarray_with_sum([1, 4, 4], 8) == [4, 4] assert min_subarray_with_sum([1, 1, 1, 1, 1, 1, 1, 1], 11) == [] ```","solution":"def min_subarray_with_sum(nums, target): n = len(nums) left = 0 current_sum = 0 min_length = float(\'inf\') result = [] for right in range(n): current_sum += nums[right] while current_sum >= target: if right - left + 1 < min_length: min_length = right - left + 1 result = nums[left:right+1] current_sum -= nums[left] left += 1 return result"},{"question":"A group of students in a computer science class loves solving coding challenges. They have recently taken an interest in practicing matrix manipulation problems. One of the challenges they thought of involves rotating a matrix. Given an n times n matrix, perform a 90-degree clockwise rotation on the matrix in place. -----Input----- The first line contains a single integer n (1 leq n leq 20), representing the dimension of the square matrix. This is followed by n lines, each containing n integers separated by spaces, representing the matrix elements. Each element a_{ij} of the matrix is an integer such that |a_{ij}| leq 1000. -----Output----- Output the rotated matrix, where the matrix is rotated 90 degrees clockwise. Each line of the output should contain n integers separated by spaces. -----Example----- Sample Input: 3 1 2 3 4 5 6 7 8 9 Sample Output: 7 4 1 8 5 2 9 6 3 Another Sample Input: 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Sample Output: 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4","solution":"def rotate_matrix(matrix): Rotates the given n x n matrix 90 degrees clockwise in place. n = len(matrix) for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] for i in range(n): matrix[i].reverse() return matrix"},{"question":"Think of a rectangular grid composed of (N times M) cells. Each cell in the grid can be empty or occupied by an obstacle. You are required to start at the top-left corner of the grid (1,1) and move to the bottom-right corner (N,M). You can only move right or down at each step. Write a function to determine the number of unique paths from the top-left corner to the bottom-right corner of the grid. However, there\'s a catch! Some cells are occupied by obstacles and cannot be traversed. Given the grid dimensions (N) and (M) and a list of coordinates representing obstacles, find the number of unique paths from (1,1) to (N,M) that do not pass through an obstacle. ------ Input Format ------ - The first line of input contains two integers, T and K, representing the number of test cases and the maximum number of obstacles respectively. - The second line of input contains two integers, N and M, representing the dimensions of the grid. - The next K lines each contain two integers, u and v, representing the coordinates of an obstacle. ------ Output Format ------ Output the number of unique paths for each test case, each on a new line. ------ Constraints ------ [ 1 ≤ T ≤ 1000 ] [ 1 ≤ N, M ≤ 100 ] [ 0 ≤ K ≤ text{min}(N times M - 1, 100) ] ----- Sample Input ----- 2 1 3 3 2 2 0 3 3 ----- Sample Output ----- 2 6 ----- Explanation ----- In the first test case, the 3x3 grid has an obstacle at cell (2,2). The two possible unique paths from (1,1) to (3,3) that avoid the obstacle are: 1. (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) 2. (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) In the second test case, there are no obstacles, so all possible unique paths can be considered, which total to 6.","solution":"def unique_paths_with_obstacles(n, m, obstacles): # Create a 2D DP array initialized to 0 dp = [[0] * m for _ in range(n)] # Turn obstacles into a set for faster access obstacle_set = {(u-1, v-1) for u, v in obstacles} # Initialize the starting point if (0, 0) not in obstacle_set: dp[0][0] = 1 # Fill the DP table for i in range(n): for j in range(m): if (i, j) in obstacle_set: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] def number_of_unique_paths(T, test_cases): results = [] for i in range(T): case = test_cases[i] N, M = case[\'grid_size\'] obstacles = case[\'obstacles\'] result = unique_paths_with_obstacles(N, M, obstacles) results.append(result) return results"},{"question":"Alice is a gardener and she loves planting different types of flowers in her garden. She plants flowers in a straight line and wants to maximize the beauty of her garden by having contiguous segments of flowers that bloom. Each type of flower blooms at a certain time and lasts for a certain duration. Given an array bloom[] of length N, where bloom[i] represents the start day that the i-th flower blooms and an array wilt[] where wilt[i] is the last day that the i-th flower wilts, can you help Alice find the maximum number of flowers that are in bloom simultaneously at any point in time? Input Format - The first line of input contains an integer N, the number of flowers in the garden. - The next line contains N space-separated integers representing the bloom[] array. - The next line contains N space-separated integers representing the wilt[] array. Output Format - Print the maximum number of flowers that are in bloom simultaneously. Constraints - 1 ≤ N ≤ 100000 - 1 ≤ bloom[i] ≤ wilt[i] ≤ 1000000 SAMPLE INPUT 5 1 2 3 4 5 3 4 5 6 7 SAMPLE OUTPUT 3 Explanation The flowers bloom and wilt as follows: - Flower 1: Blooms on day 1 and wilts on day 3. - Flower 2: Blooms on day 2 and wilts on day 4. - Flower 3: Blooms on day 3 and wilts on day 5. - Flower 4: Blooms on day 4 and wilts on day 6. - Flower 5: Blooms on day 5 and wilts on day 7. From days 3 to 4, flowers 1, 2, and 3 are all blooming simultaneously, so the maximum number of flowers blooming at the same time is 3.","solution":"def max_bloom_flowers(bloom, wilt): events = [] for i in range(len(bloom)): events.append((bloom[i], 1)) # +1 for bloom events.append((wilt[i] + 1, -1)) # -1 for wilt (end of bloom day + 1) # Sort events by days; if same day, end event (-1) comes before start event (+1) events.sort(key=lambda x: (x[0], x[1])) max_flowers = 0 current_flowers = 0 for event in events: current_flowers += event[1] if current_flowers > max_flowers: max_flowers = current_flowers return max_flowers def max_number_of_flowers(n, bloom, wilt): return max_bloom_flowers(bloom, wilt) # Sample input n = 5 bloom = [1, 2, 3, 4, 5] wilt = [3, 4, 5, 6, 7] # Output the result print(max_number_of_flowers(n, bloom, wilt))"},{"question":"Jenny is learning to work with strings and counting certain characters in her computer science class. Her teacher has given her the task to count how many times a specific, given substring appears within a longer string. Jenny needs to count occurrences even if the substrings overlap. Write a function to help Jenny determine the number of times the given substring appears in the longer string. -----Input----- The input consists of two lines. The first line contains the longer string S consisting of lowercase alphabets only. The second line contains the substring P consisting of lowercase alphabets only that Jenny needs to count within the longer string. -----Output----- The output should be a single integer representing the number of times the substring P occurs in the string S, including overlapping occurrences. -----Examples----- Sample Input 1: ababa aba Sample Output 1: 2 Sample Input 2: aaaaa aa Sample Output 2: 4 Explanation: In Sample Input 1, the substring \\"aba\\" appears twice in the string \\"ababa\\": once as the first three characters and once starting at the third character. In Sample Input 2, the substring \\"aa\\" appears four times in the string \\"aaaaa\\": starting at indices 1, 2, 3, and 4.","solution":"def count_substring_occurrences(S, P): Returns the number of times the substring P appears in the string S, including overlapping occurrences. count = 0 start = 0 while start <= len(S) - len(P): pos = S.find(P, start) if pos == -1: break else: count += 1 start = pos + 1 return count"},{"question":"Write a function that accepts a list of integers and returns the product of all positive integers in the list. If there are no positive integers, return 1. For example, for `[-1, 2, -3, 4]` it should return `8` because `2 * 4 = 8`. ```if:racket In Racket, use a list instead of an array, so \'(-1 2 -3 4) should return 8. ```","solution":"def product_of_positives(numbers): Returns the product of all positive integers in the list. If there are no positive integers, returns 1. product = 1 has_positive = False for num in numbers: if num > 0: product *= num has_positive = True if not has_positive: return 1 return product"},{"question":"In a faraway kingdom, there is a forest with `n` clearings connected by roads. Some of the roads are magical two-way roads, such that if you traverse one of these roads, your total magical power increases by a certain amount. Each clearing is represented as a node, and each road as an edge in a graph. The task is to find the least magical power needed to move from a starting clearing `src` to a destination clearing `dst`, assuming that the magical power starts at zero, and you are always trying to minimize the maximum increase in magical power used along any road. Given the following structure: - `n`: The number of clearings. - `m`: The number of roads. - Each road is represented by three integers `u`, `v`, and `w`, denoting a road between clearing `u` and clearing `v` that increases your magical power by `w` if traversed. - `src`: The starting clearing. - `dst`: The destination clearing. You are to implement the function `least_magical_power(n, m, roads, src, dst)` that returns the minimum of the maximum magical power increase required to travel from `src` to `dst`. If there is no path from `src` to `dst`, return `-1`. # Example ``` Input: n = 5 m = 6 roads = [(0, 1, 4), (0, 2, 1), (2, 1, 2), (1, 3, 6), (2, 4, 5), (4, 3, 2)] src = 0 dst = 3 Output: 3 ``` # Explanation The least magical power increase needed to travel from clearing `0` to clearing `3` is determined by the path `0 -> 2 -> 4 -> 3` with magic power increases of `1`, `5`, and `2` respectively. The highest value in this path is `5`, thus the least maximum magical power increase is `5`. # Notes: - The clearings are numbered from `0` to `n-1`. - There may be multiple roads between the same pair of clearings but with different magical powers. - Ensure to use an efficient graph traversal algorithm to find the optimal path. # Task Implement the function: ```python def least_magical_power(n, m, roads, src, dst): # your code here ```","solution":"import heapq def least_magical_power(n, m, roads, src, dst): adj_list = [[] for _ in range(n)] for u, v, w in roads: adj_list[u].append((v, w)) adj_list[v].append((u, w)) def dijkstra(src, dst): pq = [(0, src)] dist = [float(\'inf\')] * n dist[src] = 0 while pq: max_magic, current = heapq.heappop(pq) if current == dst: return max_magic for neighbor, weight in adj_list[current]: new_max_magic = max(max_magic, weight) if new_max_magic < dist[neighbor]: dist[neighbor] = new_max_magic heapq.heappush(pq, (new_max_magic, neighbor)) return -1 return dijkstra(src, dst)"},{"question":"You are given a string s consisting of lowercase Latin letters only. The string is palindromic if it reads the same forward and backward. In one operation, you can remove any one character from the string s. Find the minimum number of operations required to make the string non-palindromic. Note that if string s is already non-palindromic, no operations are required. -----Input----- The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 leq n leq 100) — the length of the string s. The second line of each test case contains a string s consisting of n lowercase Latin letters. -----Output----- For each test case, print the minimum number of operations required to make the string non-palindromic. -----Examples----- Input 3 5 abcba 3 aaa 4 abcd Output 1 1 0 -----Note----- In the first test case, the string \\"abcba\\" is palindromic. By removing any one of the characters \'a\', \'a\', \'b\' or \'c\', we can make the string non-palindromic. Thus, only one operation is required. In the second test case, the string \\"aaa\\" is palindromic. By removing any one of the characters \'a\', we can make the string non-palindromic. Thus, only one operation is required. In the third test case, the string \\"abcd\\" is already non-palindromic. Thus, no operations are required.","solution":"def min_operations_to_non_palindromic(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] s = test_cases[i][1] if s == s[::-1]: if n == 1: results.append(1) else: results.append(1) else: results.append(0) return results"},{"question":"Princess Celestia wants to construct a magic barrier around Canterlot to protect it from impending danger. She has N crystal shards, each having a certain energy level. To create a stable barrier, she plans to combine the shards in pairs to form larger shards with higher energy levels. The energy level of a newly formed shard is determined by summing the energy levels of the two shards used to create it. Celestia wants the magic barrier\'s maximum energy level to be minimized to ensure stability. To do this, she repeatedly picks the two shards with the lowest energy levels and combines them until she is left with a single shard. Your task is to determine the minimum possible value of the energy level of the final shard after all possible pair combinations. -----Input----- The first line of input contains a single integer N (2 leq N leq 10^5) — the number of crystal shards. The second line of input contains N integers e_1, e_2, ldots, e_N (1 leq e_i leq 10^9), where e_i represents the energy level of the i-th crystal shard. -----Output----- Output on a line by itself the minimum possible value of the energy level of the final shard. -----Examples----- Sample Input 1: 4 4 3 2 1 Sample Output 1: 19 Sample Input 2: 3 1 2 3 Sample Output 2: 9","solution":"import heapq def min_final_energy(N, energies): Returns the minimum possible value of the energy level of the final shard. # Convert energies list into a heap heapq.heapify(energies) total_energy = 0 # Continue merging until we have one final shard while len(energies) > 1: # Extract the two shards with the lowest energies first_min = heapq.heappop(energies) second_min = heapq.heappop(energies) # Sum their energy to form a new shard new_energy = first_min + second_min total_energy += new_energy # Add the new shard back to the heap heapq.heappush(energies, new_energy) return total_energy"},{"question":"Jane has a collection of books and wants to organize them into a library. Each book has a Unique Identifier (UID), a genre, and a specified reading difficulty level from 1 to 10. Jane loves to conduct various queries on her collection such as finding the number of books in a specified genre, finding the book with the highest difficulty level in a specified genre, and so on. Your task is to implement a system to help Jane manage her books and handle her queries efficiently. Your system would handle the following operations: 1. **ADD <UID> <genre> <difficulty>**: Add a book to the collection. 2. **REMOVE <UID>**: Remove a book from the collection by its UID. 3. **COUNT_GENRE <genre>**: Count the number of books in a specified genre. 4. **HARDEST_BOOK <genre>**: Find the book UID with the highest difficulty level in the specified genre. If there are multiple books with the same highest difficulty level, return the one added first. Implement a function `library_management(operations: List[str]) -> List[Union[int, str]]` that processes a list of operations and returns the results of the queries in the order they are provided. # Input: - `operations`: A list of strings representing the operations to be performed. # Output: - The function should return a list of integers or strings, where each element corresponds to the result of a `COUNT_GENRE` or `HARDEST_BOOK` query, in the order they appear in the input. # Example: ```python operations = [ \\"ADD 1 Fiction 3\\", \\"ADD 2 Fiction 5\\", \\"ADD 3 Mystery 7\\", \\"COUNT_GENRE Fiction\\", \\"HARDEST_BOOK Fiction\\", \\"REMOVE 2\\", \\"COUNT_GENRE Fiction\\", \\"HARDEST_BOOK Fiction\\" ] print(library_management(operations)) ``` # Output: ```python [2, 2, 1, 1] ``` # Notes: - `UID` is guaranteed to be unique. - Genre is a string that can contain spaces. - If a `HARDEST_BOOK` query is issued for a genre that has no books, return \\"None\\". - Genres and book difficulties are case-sensitive. - The sequence of operations can be large, ensure the system is optimized for efficiency.","solution":"from collections import defaultdict def library_management(operations): books = defaultdict(list) book_info = {} results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": uid = int(parts[1]) genre = \' \'.join(parts[2:-1]) difficulty = int(parts[-1]) book_info[uid] = (genre, difficulty) books[genre].append((difficulty, uid)) elif command == \\"REMOVE\\": uid = int(parts[1]) genre, difficulty = book_info.pop(uid) books[genre].remove((difficulty, uid)) elif command == \\"COUNT_GENRE\\": genre = \' \'.join(parts[1:]) results.append(len(books[genre])) elif command == \\"HARDEST_BOOK\\": genre = \' \'.join(parts[1:]) if not books[genre]: results.append(\\"None\\") else: hardest_book = max(books[genre], key=lambda x: (x[0], -x[1])) results.append(hardest_book[1]) return results"},{"question":"You are working on a project that involves processing text documents to identify and count specific patterns. One of the tasks is to count the occurrences of a word pattern in a given document. The pattern is defined as a sequence of one or more word characters (letters and digits). Your task is to write a function that counts how many times the pattern appears in the given document, irrespective of case. For the purpose of this task, a word is defined as a continuous sequence of alphabetic characters (a-z, A-Z). The searching should be case insensitive, meaning that \\"Pattern\\", \\"pattern\\", and \\"PATTERN\\" should all be considered the same. # Input - A string `document` containing the text document (which can span multiple lines). - A string `pattern` containing the word pattern you need to count. # Output - An integer representing the number of times the pattern appears in the document. # Example __Input__: ``` document = \\"Pattern recognition is a branch of machine learning.nPATTERN recognition systems are in many applications.\\" pattern = \\"pattern\\" ``` __Output__: ``` 2 ``` # Constraints - The length of the `document` can be up to 10000 characters. - The length of the `pattern` can be up to 100 characters. - All characters in `document` and `pattern` are ASCII characters. - The program should function efficiently and handle edge cases like empty inputs. # Function Signature ```python def count_pattern_occurrences(document: str, pattern: str) -> int: pass ```","solution":"def count_pattern_occurrences(document: str, pattern: str) -> int: Counts the occurrences of the word pattern in the given document, irrespective of case. # Convert both document and pattern to lower case for case-insensitive comparison lower_document = document.lower() lower_pattern = pattern.lower() # Split the document into words and count the occurrences of the pattern words = lower_document.split() count = sum(1 for word in words if word == lower_pattern) return count"},{"question":"You are given a sequence b=[b_1, b_2, dots, b_n] consisting of n positive integers. We define the beauty of a sequence as the sum of its unique elements. For example, if b = [1, 2, 2, 3, 4], then the beauty of this sequence is 1 + 2 + 3 + 4 = 10, where each element is added only once. Let\'s call a group of consecutive elements a subsegment. Each subsegment is characterized by two indices: the index of its left end and the index of its right end. Denote by b[l, r] a subsegment of the sequence b with the left end in l and the right end in r, i.e. b[l, r] = [b_l, b_{l+1}, dots, b_r]. For example, if b = [8, 2, 2, 8, 3, 3, 5, 2], then b[2, 5] = [2, 2, 8, 3], b[3, 3] = [2], and b[1, 8] = [8, 2, 2, 8, 3, 3, 5, 2] are subsegments. We want to find the maximum beauty of any subsegment of the given sequence b. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case is described by two lines. The first line of each test case contains a single integer n (1 le n le 2000) — the length of the sequence b. The second line of each test case contains exactly n integers: b_1, b_2, dots, b_n (1 le b_i le 10^6) — elements of the sequence b. It is guaranteed that the sum of n for all test cases does not exceed 2000. -----Output----- For each test case, output one integer — the maximum beauty of any subsegment of the sequence b. -----Examples----- Input 3 6 8 2 2 8 3 5 5 1 2 2 3 4 4 4 4 4 4 Output 20 10 4 -----Note----- In the first test case, the subsegment [8, 2, 3, 5] has the unique elements 8, 2, 3, 5, and thus the beauty is 8 + 2 + 3 + 5 = 18. It can be shown that this is the maximum possible beauty for any subsegment in this sequence. In the second test case, the whole sequence [1, 2, 3, 4] provides the highest beauty, which is 1 + 2 + 3 + 4 = 10. In the third test case, any subsegment will have only one unique element, so the maximum beauty is 4.","solution":"def max_beauty(t, test_cases): results = [] for n, b in test_cases: max_beauty = 0 for i in range(n): unique_elements = set() current_beauty = 0 for j in range(i, n): if b[j] not in unique_elements: unique_elements.add(b[j]) current_beauty += b[j] max_beauty = max(max_beauty, current_beauty) results.append(max_beauty) return results"},{"question":"Given an integer N, where N represents the number of pairs of parentheses, write a function to generate all combinations of well-formed parentheses. -----Constraints----- - 1 leq N leq 8 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print all the combinations of well-formed parentheses on separate lines. -----Sample Input----- 3 -----Sample Output----- ((())) (()()) (())() ()(()) ()()() Note: The output combinations can be in any order.","solution":"def generate_parentheses(n): Generate all combinations of n pairs of well-formed parentheses. def backtrack(s=\'\', left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \'(\', left + 1, right) if right < left: backtrack(s + \')\', left, right + 1) result = [] backtrack() return result"},{"question":"You are given an array of integers and a fixed integer window size. Your task is to write a program that generates an array of the sums of each window of the specified size as it slides through the original array. A window is defined as a contiguous subarray of the specified size. For example, for the array [1, 2, 3, 4, 5] and a window size of 3, the windows would be [1, 2, 3], [2, 3, 4], and [3, 4, 5]. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^6), where n is the length of the array and k is the window size. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9), which are the elements of the array. Output Output a single line containing n - k + 1 integers, which are the sums of each window. Example Input 5 3 1 2 3 4 5 Output 6 9 12 Input 6 2 10 20 30 40 50 60 Output 30 50 70 90 110 Note In the first example, for the input array [1, 2, 3, 4, 5] with window size 3, the sums of the windows are: 1 + 2 + 3 = 6 2 + 3 + 4 = 9 3 + 4 + 5 = 12 So the output is 6 9 12.","solution":"def sliding_window_sums(n, k, array): Takes the length of the array `n`, window size `k`, and the array of integers `array`. Returns a list of sums of each window of size `k`. # List to store the result result = [] # Calculate the sum of the first window window_sum = sum(array[:k]) result.append(window_sum) # Sliding the window through the array for i in range(1, n - k + 1): # Update the window sum by subtracting the element that\'s no longer in the window # and adding the new element that entered the window window_sum += array[i + k - 1] - array[i - 1] result.append(window_sum) return result"},{"question":"Julia owns a bakery, and she has n different types of cakes with each cake type having a unique decoration value. She wants to create the most beautiful combination of cakes by selecting exactly m **distinct** types of cakes. The beauty of a combination of cakes is determined by the sum of their decoration values. Help Julia choose the most beautiful combination of m distinct types of cakes with the maximum sum of decoration values. ----Input---- The first line contains two integers n and m (1 ≤ m ≤ n ≤ 10^5), the number of types of cakes and the number of distinct cakes to select, respectively. The second line contains n integers d_1, d_2, ..., d_{n} (1 ≤ d_{i} ≤ 10^5), the decoration values of the n types of cakes. ----Output---- Output m space-separated integers, the decoration values of the selected cakes. If there are multiple correct answers, print any of them. ----Examples---- Input 5 3 1 3 5 7 9 Output 5 7 9 Input 4 2 4 2 8 6 Output 6 8 ----Note---- Note that in the second sample, there are multiple correct answers. One possible answer is 6 8 and another valid answer is 4 8. Both have the same maximal sum of decoration values.","solution":"def most_beautiful_combination(n, m, d): Returns the most beautiful combination of m distinct types of cakes with the maximum sum of decoration values. Parameters: - n: int, the number of types of cakes - m: int, the number of distinct types of cakes to select - d: list of int, the decoration values of the n types of cakes Returns: - list of int, the decoration values of the selected cakes # Sort the list of decoration values in descending order d_sorted = sorted(d, reverse=True) # Select the first m elements from the sorted list return d_sorted[:m]"},{"question":"A company has an internal messaging system that logs both messages sent between employees and errors that occur when sending messages. Each message and error is recorded along with a timestamp. Your task is to determine how many messages each employee successfully sent during a given period of time. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100,000), where n is the number of log entries, and q is the number of queries. The next n lines each contain a log entry. Each log entry starts with a string of the form \\"send X to Y at T\\" or \\"error X at T\\". - \\"send X to Y at T\\" indicates that employee X attempted to send a message to employee Y at time T. - \\"error X at T\\" indicates that an error occurred when employee X attempted to send a message at time T. The next q lines each contain two integers t1 and t2 (1 ≤ t1 ≤ t2 ≤ 1,000,000,000), representing the time interval [t1, t2] for each query. Output For each query, output a single integer — the number of successfully sent messages by all employees in the given time interval. Example Input 6 2 send Alice to Bob at 1 send Alice to Carol at 3 error Alice at 3 send Bob to Alice at 4 send Carol to Alice at 5 error Carol at 5 2 4 1 5 Output 1 3 Explanation The first query checks the time interval [2, 4]. \\"Alice\\" successfully sent one message during this period (\\"send Alice to Carol at 3\\" was followed by an \\"error Alice at 3\\", so it wasn’t successful). The second query checks the time interval [1, 5]. \\"Alice\\" has one successful message (\\"send Alice to Bob at 1\\"), \\"Bob\\" has one (\\"send Bob to Alice at 4\\"), and \\"Carol\\" has one (\\"send Carol to Alice at 5\\" was followed by \\"error Carol at 5\\", so it wasn’t successful).","solution":"def count_successful_sends(n, q, logs, queries): from collections import defaultdict sends = defaultdict(list) errors = defaultdict(set) for log in logs: if log.startswith(\\"send\\"): parts = log.split() sender = parts[1] time = int(parts[-1]) sends[time].append(sender) elif log.startswith(\\"error\\"): parts = log.split() sender = parts[1] time = int(parts[-1]) errors[time].add(sender) results = [] for t1, t2 in queries: count = 0 for time in range(t1, t2 + 1): for sender in sends[time]: if sender not in errors[time]: count += 1 errors.pop(time, None) results.append(count) return results"},{"question":"Write a function that accepts two arguments: a list of numbers and a string that indicates an operation. The string can be either \'sum\', \'product\', \'max\', or \'min\'. The function should return the result of applying the specified operation to the list of numbers. ```python >>> list_operation([1, 2, 3, 4], \'sum\') 10 >>> list_operation([1, 2, 3, 4], \'product\') 24 >>> list_operation([1, 2, 3, 4], \'max\') 4 >>> list_operation([1, 2, 3, 4], \'min\') 1 ```","solution":"def list_operation(numbers, operation): Executes the specified operation (\'sum\', \'product\', \'max\', \'min\') on a list of numbers. Parameters: numbers (list): A list of numbers to operate on. operation (str): The operation to perform. It can be \'sum\', \'product\', \'max\', or \'min\'. Returns: int/float: The result of the operation. if not numbers: return None # or raise ValueError(\\"List is empty\\") if operation == \'sum\': return sum(numbers) elif operation == \'product\': product = 1 for num in numbers: product *= num return product elif operation == \'max\': return max(numbers) elif operation == \'min\': return min(numbers) else: raise ValueError(\\"Invalid operation\\")"},{"question":"Given a binary search tree (BST) and a target value, determine the value in the BST that is closest to the target. Example 1: Input: root = [4,2,5,1,3], target = 3.714286 Output: 4 Example 2: Input: root = [1], target = 4.428571 Output: 1 Constraints: - The number of nodes in the BST is in the range [1, 10^4]. - The absolute value of the target is at most 10^4. Note: - A binary search tree is a binary tree in which each node has at most two children, with the left child’s value less than the parent node’s value, and the right child’s value greater than the parent node’s value.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def closest_value(root, target): closest = root.val current = root while current: if abs(current.val - target) < abs(closest - target): closest = current.val if target < current.val: current = current.left else: current = current.right return closest"},{"question":"Fiona enjoys figuring out statistical properties of numerical arrays. She is particularly interested in finding the mode of a list of integers. The mode is the number that appears most frequently in a list. If there are multiple numbers with the same highest frequency, the smallest of these numbers is taken as the mode. Here are examples: For the list [4, 5, 6, 7, 4, 4, 5, 5], the mode is 4 because it appears most frequently (3 times) in the list. For the list [1, 2, 2, 3, 3, 4], since 2 and 3 both appear twice, the smallest number, 2, is chosen as the mode. Fiona wants to automate this task. Can you help her by writing a program to find the mode of a list of integers? Example Input 1 ------------- [1, 2, 3, 3, 2, 1, 4, 4, 4, 5] Example Output 1 ------------- 4 Example Input 2 ------------- [7, 7, 5, 5, 9, 2, 2, 5] Example Output 2 ------------- 5 Example Input 3 ------------- [10, 14, 10, 18, 14, 14] Example Output 3 ------------- 14","solution":"def find_mode(arr): from collections import Counter if not arr: return None count = Counter(arr) max_frequency = max(count.values()) candidates = [num for num, freq in count.items() if freq == max_frequency] return min(candidates)"},{"question":"Painter\'s Dilemma Mary is an amateur floor painter, and she\'s been hired to paint parquet floors in a series of rooms. The floors are each divided into an even number of equally-sized small square tiles arranged in a single row. Mary always paints the tiles one by one, from left to right. Mary has observed that it is quite monotonous to paint all the tiles of the floor in just one color. So, she decided to paint the tiles in exactly two colors, such as red and blue, in such a way that the number of tiles painted in each color is the same, and no two adjacent tiles have the same color. For example, she can paint an 8-tile floor as \\"RBRBRBRB\\" or \\"BRBRBRBR,\\" where \'R\' stands for red and \'B\' stands for blue. Mary wants to know how many different ways she can paint each floor following these rules. Can you help her? Input The input consists of at most 50 datasets, each in the following format. n An integer n (2 ≤ n ≤ 1,000,000) represents the number of tiles in the floor, and n is guaranteed to be an even number. The end of the input is indicated by a line containing a single zero. Output For each dataset, output in a line the number of different ways Mary can paint the floor of n tiles. Sample Input 8 4 2 0 Sample Output 2 2 2 Explanation For a floor with 8 tiles, Mary can paint it using the sequences \\"RBRBRBRB\\" and \\"BRBRBRBR\\" - 2 ways in total. Similarly, for a floor with 4 tiles, the possible sequences are \\"RBRB\\" and \\"BRBR\\" - 2 ways. For a floor with 2 tiles, the possible sequences are \\"RB\\" and \\"BR\\" - 2 ways.","solution":"def count_paint_ways(n): Returns the number of ways to paint n tiles such that no two adjacent tiles have the same color. if n % 2 != 0: return 0 return 2 if n >= 2 else 0 def get_paint_ways(inputs): results = [] for n in inputs: if n == 0: break results.append(count_paint_ways(n)) return results"},{"question":"The city park has a unique water fountain system that operates on a specific condition. The fountain has an adjustable nozzle which can increase or decrease the water flow based on the temperature and time of the day. The main control panel receives three inputs: T (for temperature in degrees Celsius), H (for hour of the day in 24-hour format), and W (initial water flow rate in liters/minute). The flow rate of the water changes according to the following rules: 1. If the temperature is above 30 degrees Celsius, the flow rate is doubled. 2. If the hour is between 6:00 AM and 6:00 PM (inclusive), the flow rate is increased by 50%. 3. If both conditions are met, the adjustments are applied sequentially (first doubling, then increasing by 50%). Given these inputs, you are to calculate and output the final water flow rate. Input The first line of input contains an integer T for the temperature. The second line of input contains an integer H for the hour of the day in 24-hour format. The third line of input contains an integer W for the initial water flow rate. Output Print a single integer F representing the final water flow rate. SAMPLE INPUT 32 14 100 SAMPLE OUTPUT 300 Explanation The temperature is above 30, so the flow rate is doubled to 200 liters/minute. The hour is within 6:00 AM and 6:00 PM, so the doubled flow rate is increased by 50%. 200 increased by 50% is 300. Final water flow rate = 300 liters/minute.","solution":"def calculate_final_water_flow(T, H, W): Calculate the final water flow rate based on temperature T, hour H, and initial flow rate W. :param T: Temperature in degrees Celsius :param H: Hour of the day in 24-hour format :param W: Initial water flow rate in liters/minute :return: Final water flow rate in liters/minute if T > 30: W *= 2 if 6 <= H <= 18: W = int(W * 1.5) return W"},{"question":"A company has a fleet of delivery trucks, each identified by a unique string of characters. Each character in the string represents a specific feature of the truck, such as fuel type, capacity, or route. To improve efficiency, the company needs to ensure that no two trucks have the exact same combination of features. Given a list of truck identifiers, determine the minimum number of characters to change in the list so that all identifiers become unique. Each character in an identifier can be one of the lowercase English letters (\'a\'-\'z\'). Function Description Complete the function `makeUniqueIdentifiers` that determines the minimum number of characters that need to be changed to make all identifiers unique: `makeUniqueIdentifiers` has the following parameter: - `identifiers`: a list of strings representing the truck identifiers. Input Format: - The first line contains an integer `m`, the number of identifiers. - Each of the next `m` lines contains a string of length `k`, which represents the truck identifier. Constraints: - 1 leq m leq 1000 - 1 leq k leq 20 - All given identifiers consist of lowercase English letters. Output Format: - Print an integer representing the minimum number of characters that need to be changed to make all identifiers unique. Sample Input: 4 abc abc bbb ccd Sample Output: 1 Explanation: To make all identifiers unique, one possible solution is to change one character of one \\"abc\\" to \\"abd\\", resulting in the list [\\"abc\\", \\"abd\\", \\"bbb\\", \\"ccd\\"]. Only 1 change is necessary.","solution":"def makeUniqueIdentifiers(identifiers): Determines the minimum number of characters to be changed to make all identifiers unique. # Count frequency of each identifier identifier_count = {} for identifier in identifiers: if identifier in identifier_count: identifier_count[identifier] += 1 else: identifier_count[identifier] = 1 changes = 0 unique_identifiers = set(identifiers) # Iterate over the identifiers and resolve duplicates for identifier, count in identifier_count.items(): while count > 1: for i in range(len(identifier)): for ch in \'abcdefghijklmnopqrstuvwxyz\': # Generate a new possible unique identifier new_identifier = identifier[:i] + ch + identifier[i+1:] if new_identifier not in unique_identifiers: unique_identifiers.add(new_identifier) changes += 1 count -= 1 break if count <= 1: break return changes"},{"question":"Given an array of integers, your task is to rearrange the array so that even-indexed elements are in non-decreasing order and odd-indexed elements are in non-increasing order. You need to ensure that each number retains its original position type (even or odd). Example: Input: N = 6 arr = [1, 3, 2, 8, 5, 7] Output: [1, 8, 2, 7, 5, 3] Explanation: Even-indexed elements are 1, 2, 5 and odd-indexed elements are 3, 8, 7. After rearrangement: even-indexed elements are sorted as 1, 2, 5 and odd-indexed elements are sorted as 8, 7, 3. Your Task: Complete the function `rearrangeArray()` that takes an array `arr` and its length `n` and returns the rearranged array. Expected Time Complexity: O(Nlog(N)). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ arr[i] ≤ 10^{9}","solution":"def rearrangeArray(arr, n): Rearranges the array such that even-indexed elements are in non-decreasing order and odd-indexed elements are in non-increasing order. Parameters: arr (list of int): The input array. n (int): The length of the input array. Returns: list of int: The rearranged array. even_indexed_elements = sorted([arr[i] for i in range(n) if i % 2 == 0]) odd_indexed_elements = sorted([arr[i] for i in range(n) if i % 2 == 1], reverse=True) result = [] even_idx = 0 odd_idx = 0 for i in range(n): if i % 2 == 0: result.append(even_indexed_elements[even_idx]) even_idx += 1 else: result.append(odd_indexed_elements[odd_idx]) odd_idx += 1 return result"},{"question":"You are given an array of integers. Your task is to sort the array in such a way that the median is at the first position, followed by the elements in increasing order of their distance from the median. For example: Given the array `[3, 1, 2, 5, 4]`, when sorted by the median first and then by increasing distance from the median, the result should be `[3, 2, 4, 1, 5]`, since the median is `3`, followed by the closest element to `3` which is both `2` and `4` (in either order), then `1` and `5`. Note: - If the array has an even number of elements, you can choose either of the middle elements as the median. - If two elements have the same distance from the median, they can appear in any order relative to each other. Write a function to achieve this: ```python def rearrange_by_median(arr): pass ```","solution":"def rearrange_by_median(arr): Rearranges the array such that the median is at the first position, followed by elements in increasing order of their distance from the median. if not arr: return [] # Sort the array to find the median sorted_arr = sorted(arr) # Find the median mid_index = len(sorted_arr) // 2 if len(sorted_arr) % 2 == 0: median = sorted_arr[mid_index - 1] else: median = sorted_arr[mid_index] # Create a list of tuples (distance, value) to sort based on distance from the median arr_with_distance = [(abs(x - median), x) for x in arr] # Sort the array based on the distance (first tuple element) arr_with_distance.sort() # Extract the sorted values maintaining the order sorted_distance_values = [x[1] for x in arr_with_distance] return sorted_distance_values"},{"question":"Alex is learning to play a new game called **Number Muncher**. In this game, each level presents him with a sequence of integers. His task is to identify a subsequence that meets certain criteria. However, the rules become more complex as he advances. In the current level, he is given a sequence of digits and a number K. He needs to find the lexicographically smallest subsequence of these digits that has exactly K digits in it. A subsequence is derived from the original sequence by deleting some (or no) elements without changing the order of the remaining elements. Can you help Alex by writing a program to solve this problem? # Input - The first line consists of an integer T, the number of test cases (1 ≤ T ≤ 100). - Each of the next T lines consists of: - A string S representing the sequence of digits (1 ≤ |S| ≤ 1000). - An integer K (1 ≤ K ≤ |S|). # Output - For each test case, output the lexicographically smallest subsequence of length K on a new line. # Example Input ``` 3 654321 2 123456 3 54321 2 ``` Output ``` 21 123 21 ``` # Note In the first test case, the smallest lexicographically subsequence of length 2 from \\"654321\\" is \\"21\\".","solution":"def lexicographically_smallest_subsequence(T, test_cases): results = [] for S, K in test_cases: K = int(K) stack = [] for i, digit in enumerate(S): while stack and len(stack) + len(S) - i > K and stack[-1] > digit: stack.pop() if len(stack) < K: stack.append(digit) results.append(\'\'.join(stack)) return results # Wrapper to format the input and output def number_muncher(T, input_data): test_cases = [(input_data[i][0], input_data[i][1]) for i in range(T)] return lexicographically_smallest_subsequence(T, test_cases)"},{"question":"Babka is trying to create a new programming language. She has decided that variables in her language will be strings composed of lowercase English letters. Each variable name must be unique and follow the rules she has established. Given a list of initial variable names (possibly with duplicates), you need to help Babka ensure all variable names are unique by appending the smallest possible positive integer (greater than zero) to the name in case of a conflict. For example, if the initial list of variables is [\'apple\', \'banana\', \'apple\'], the final list should be [\'apple\', \'banana\', \'apple1\'] because \'apple\' appears twice, so we append \'1\' to the second occurrence of \'apple\' to make it unique. Write a function that takes the list of initial variable names and returns a list of unique variable names according to Babka\'s rules. Input - The input consists of a single list of strings, `variable_names`, which contains the initial variable names (1 ≤ len(variable_names) ≤ 10^5) and each string\'s length is between 1 and 20 inclusive. Output - The function should return a list of strings with the unique variable names. Function Signature ```python def make_unique_variables(variable_names: List[str]) -> List[str]: ``` Example ```python # Input [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"] # Output [\\"apple\\", \\"banana\\", \\"apple1\\", \\"orange\\", \\"banana1\\", \\"apple2\\"] ``` Explanation: - The initial \'apple\' remains as it is. - The second \'apple\' becomes \'apple1\'. - The third \'apple\' becomes \'apple2\'. - Similarly, the second \'banana\' becomes \'banana1\'. - \'orange\' remains unique as it only appears once.","solution":"from typing import List def make_unique_variables(variable_names: List[str]) -> List[str]: Generates a list of unique variable names by appending the smallest possible positive integer to duplicate names. name_count = {} unique_names = [] for name in variable_names: if name not in name_count: unique_names.append(name) name_count[name] = 1 else: new_name = f\\"{name}{name_count[name]}\\" while new_name in name_count: name_count[name] += 1 new_name = f\\"{name}{name_count[name]}\\" unique_names.append(new_name) name_count[new_name] = 1 name_count[name] += 1 return unique_names"},{"question":"# Task You are given a list of `n` integers, where each integer represents the number of pages in a particular book. You are also given `k` number of students. Your task is to allocate books to each student in such a way that the maximum number of pages assigned to a student is minimized. Each student must get at least one book, and every book must be assigned to a student. # Example For `books = [12, 34, 67, 90]` and `k = 2`, the output should be `113`. Explanation: There are various ways to distribute the books to 2 students: - Distribute as `[12, 34]` and `[67, 90]`. The maximum number of pages assigned to a student in this distribution is `max(12 + 34, 67 + 90) = max(46, 157) = 157`. - Distribute as `[12]` and `[34, 67, 90]`. The maximum number of pages assigned to a student in this distribution is `max(12, 34 + 67 + 90) = max(12, 191) = 191`. - Distribute as `[12, 34, 67]` and `[90]`. The maximum number of pages assigned to a student in this distribution is `max(12 + 34 + 67, 90) = max(113, 90) = 113`. Among these, the minimum possible maximum number of pages is `113`. # Input/Output - `[input]` integer array `books` An array of integers representing the number of pages in each book. Constraints: `1 ≤ books.length ≤ 50,` `1 ≤ books[i] ≤ 500`. - `[input]` integer `k` The number of students. Constraints: `1 ≤ k ≤ books.length`. - `[output]` an integer The minimum possible maximum number of pages assigned to a student.","solution":"def can_allocate_books(books, n, k, max_pages): Helper function to check if it\'s possible to allocate books such that the maximum number of pages assigned to a student is less than or equal to max_pages. students_required = 1 current_pages = 0 for pages in books: if current_pages + pages > max_pages: students_required += 1 current_pages = pages if students_required > k: return False else: current_pages += pages return True def allocate_books(books, k): Returns the minimum possible maximum number of pages assigned to a student. if len(books) < k: return -1 # In case there are more students than books which is invalid as per the constraints. low, high = max(books), sum(books) result = high while low <= high: mid = (low + high) // 2 if can_allocate_books(books, len(books), k, mid): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"You are given a tree with n nodes numbered from 1 to n. The tree is rooted at node 1. Each node has an initial value and possibly one or more leaf nodes. You are required to find the maximum sum of values from the root to any leaf path in the tree. Note that there can be multiple paths from the root to leaves, and you need to determine the maximum path value. -----Input----- The first line contains a single integer t (1 le t le 50) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 1000) — the number of nodes in the tree. The second line contains n integers, where the i-th integer is the initial value of node i. Then follow n-1 lines, each containing two integers u and v (1 le u, v le n) — the two endpoints of the edge in the tree. It is guaranteed that the sum of n over all test cases does not exceed 5000. -----Output----- For each test case, output a single integer — the maximum sum of values from the root to any leaf path. -----Example----- Input 2 5 1 2 3 4 5 1 2 1 3 2 4 2 5 3 5 10 20 1 2 1 3 Output 8 21 -----Explanation----- For the first test case, the tree structure is as follows: ``` 1 / 2 3 / 4 5 ``` The values of nodes are [1, 2, 3, 4, 5]. The possible paths from the root to leaves and their sums are: - 1 rightarrow 2 rightarrow 4 with sum 1 + 2 + 4 = 7 - 1 rightarrow 2 rightarrow 5 with sum 1 + 2 + 5 = 8 - 1 rightarrow 3 with sum 1 + 3 = 4 Hence, the maximum sum is 8. For the second test case, the tree structure is as follows: ``` 1 / 2 3 ``` The values of nodes are [5, 10, 20]. The possible paths from the root to leaves and their sums are: - 1 rightarrow 2 with sum 5 + 10 = 15 - 1 rightarrow 3 with sum 5 + 20 = 25 Hence, the maximum sum is 25.","solution":"def find_max_path_sum(t, test_cases): def dfs(node, parent, tree, values): max_path_sum = 0 for child in tree[node]: if child != parent: max_path_sum = max(max_path_sum, dfs(child, node, tree, values)) return values[node] + max_path_sum results = [] for test_case in test_cases: n, values, edges = test_case tree = [[] for _ in range(n)] for u, v in edges: tree[u - 1].append(v - 1) tree[v - 1].append(u - 1) max_sum = dfs(0, -1, tree, values) results.append(max_sum) return results"},{"question":"Engineer Bob works at a factory that manufactures widgets. Each widget consists of several components that need to be assembled in correct order. Bob has a list of components to be assembled, and each component has a specific order in which they need to be assembled. Bob wants to know if it is possible to complete assembling the widgets with the given order constraints, and if so, what should be the order of assembly. -----Input----- The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follow. The first line of each test case contains two space-separated integers N and M, where N is the number of components and M is the number of order constraints. Each of the next M lines contains two space-separated integers u and v, indicating that component u must be assembled before component v. -----Output----- For each test case, output a single line containing either \\"impossible\\" if it is not possible to assemble all components with the given constraints, or a space-separated list of components in the order they should be assembled. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 10000 - 1 ≤ u, v ≤ N -----Example----- Input 2 4 4 1 2 2 3 3 4 4 1 3 2 1 2 2 3 Output impossible 1 2 3 -----Explanation----- Example 1: The given constraints form a cycle: 1 -> 2 -> 3 -> 4 -> 1, thus making it impossible to complete the assembly respecting the given order. Hence, the answer is \\"impossible\\". Example 2: The assembly order can be 1 -> 2 -> 3, which respects the given constraints. Hence, the output is \\"1 2 3\\".","solution":"from collections import defaultdict, deque def find_order(n, m, edges): in_degree = {i: 0 for i in range(1, n+1)} graph = defaultdict(list) for u, v in edges: graph[u].append(v) in_degree[v] += 1 # All nodes with no incoming edges no_incoming = deque([node for node in in_degree if in_degree[node] == 0]) order = [] while no_incoming: node = no_incoming.popleft() order.append(node) for neighbour in graph[node]: in_degree[neighbour] -= 1 if in_degree[neighbour] == 0: no_incoming.append(neighbour) if len(order) == n: return \\" \\".join(map(str, order)) else: return \\"impossible\\" def solve(inputs): results = [] index = 0 T = int(inputs[index]) index += 1 for _ in range(T): n, m = map(int, inputs[index].split()) index += 1 edges = [] for __ in range(m): u, v = map(int, inputs[index].split()) edges.append((u, v)) index += 1 result = find_order(n, m, edges) results.append(result) return results"},{"question":"# Your Task The kingdom of Vastoria has a peculiar numerical system for producing enchanted items. Each item is produced with a magical number based on the properties of previous items. The properties follow these rules: * The first item has a magical number equal to a given integer M. * Each subsequent item is produced every day without skipping. * Every item\'s magical number is calculated as the sum of the magical numbers of the two preceding items, starting from the second item onward. * For any given day n, if n < 2, the magical number is just M. Given the initial magical number M and a number of days D, your task is to determine the magical number of the item produced on the D-th day. # Input M denotes the initial magical number, and D denotes the day for which you need to find the magical number (starting from day 0). # Output Output the magical number of the item produced on the D-th day. # Example **Input:** ``` M = 3 D = 5 ``` **Output:** ``` 24 ``` **Explanation:** * Day 0: 3 (the initial value of M) * Day 1: 3 (as it equals M for n < 2) * Day 2: 3 + 3 = 6 * Day 3: 6 + 3 = 9 * Day 4: 9 + 6 = 15 * Day 5: 15 + 9 = 24","solution":"def magical_number(M, D): Returns the magical number of the item produced on the D-th day. if D < 2: return M first = M second = M result = 0 for i in range(2, D + 1): result = first + second first = second second = result return result"},{"question":"A kingdom consists of N cities and M bidirectional roads that connect pairs of cities. Each road has a certain travel cost associated with it. The king wants to construct a network where every citizen can travel between any two cities with the minimum total travel cost. The king decided to build this network as a Minimum Spanning Tree (MST) of the given cities and roads. Your task is to help the king determine the minimum total travel cost required to connect all cities. Input format The first line of input contains two integers N (the number of cities) and M (the number of roads). Each of the following M lines contains three integers u, v, and w describing a road between cities u and v with a travel cost w. Output format Output the minimum total travel cost to connect all cities. Constraints 1 ≤ N ≤ 1000 0 ≤ M ≤ 100000 1 ≤ u, v ≤ N 1 ≤ w ≤ 10000 If there is no way to connect all cities, output -1. SAMPLE INPUT 4 5 1 2 5 2 3 3 1 3 7 4 3 2 4 1 6 SAMPLE OUTPUT 10 Explanation In this case, the Minimum Spanning Tree would include the roads with travel costs 5, 3, and 2, resulting in a total cost of 10.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_total_travel_cost(N, M, roads): if N == 0: return -1 roads.sort(key=lambda x: x[2]) parent = [i for i in range(N)] rank = [0] * N result = [] e = 0 i = 0 while e < N - 1 and i < M: u, v, w = roads[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 result.append((u, v, w)) union(parent, rank, x, y) if len(result) != N - 1: return -1 total_cost = sum([w for u, v, w in result]) return total_cost"},{"question":"You are given a sequence of n integers, a. You need to determine the smallest length of a subsegment such that the sum of its elements is greater than or equal to a given integer S. A subsegment is defined as a consecutive sequence of elements within the array. Your goal is to find the length of the shortest subsegment that meets the condition, or output -1 if no such subsegment exists. -----Input----- The first line contains two integers n and S (1 ≤ n ≤ 10^5, 1 ≤ S ≤ 10^9). The next line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^4) - the sequence elements. -----Output----- Print a single integer - the length of the smallest subsegment with a sum of at least S, or -1 if no such subsegment exists. -----Examples----- Input 8 15 1 2 3 4 5 6 7 8 Output 2 Input 5 100 1 2 3 4 5 Output -1 -----Note----- In the first example, the subsegment [7, 8] has a sum of 15. This is the shortest subsegment that meets the condition. In the second example, no subsegment has a sum of at least 100.","solution":"def min_subsegment_length(n, S, a): Returns the minimum length of a subsegment with sum greater than or equal to S. If no such subsegment exists, returns -1. start = 0 curr_sum = 0 min_length = float(\'inf\') for end in range(n): curr_sum += a[end] while curr_sum >= S: min_length = min(min_length, end - start + 1) curr_sum -= a[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"In a faraway kingdom, the wealth of each citizen is measured in golden coins. The king has a peculiar way of ensuring equality. Every now and then, he selects a group of citizens and redistributes their gold coins such that every citizen in the group ends up with the same number of coins. Your task is to determine whether this equal distribution is possible given a list of the initial coin distribution. For each test case, determine if the coins can be evenly distributed among the citizens without any coins left over. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines: - The first line contains an integer N representing the number of citizens. - The second line contains N integers denoting the number of golden coins each citizen initially has. -----Output:----- For each test case, output \\"YES\\" if the coins can be evenly distributed among the citizens, otherwise output \\"NO\\". -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - 0 leq text{number of golden coins per citizen} leq 1000 -----Sample Input:----- 3 4 1 2 3 4 3 10 10 10 5 5 5 5 5 0 -----Sample Output:----- NO YES YES -----EXPLANATION:----- Test case 1: The total number of coins is 1+2+3+4 = 10, which cannot be evenly distributed among 4 citizens. Test case 2: All citizens already have 10 coins each, so no redistribution is needed. Test case 3: The total number of coins is 5+5+5+5+0 = 20, which can be divided evenly among 5 citizens.","solution":"def can_redistribute_evenly(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] coins = test_cases[i][1] total_coins = sum(coins) if total_coins % N == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of integers, your task is to write a function that returns the length of the longest subsequence which is strictly increasing. A subsequence is derived by deleting some or no elements of the array without changing the order of the remaining elements. For example, for the array `[10, 1, 2, 3, 4, 5, 6, 7, 8, 9]`, the longest strictly increasing subsequence is `[1, 2, 3, 4, 5, 6, 7, 8, 9]` and its length is `9`. Your function should have the following signature: ```python def length_of_LIS(arr: List[int]) -> int: ``` *Note*: The input array will have at least one element and no more than 10,000 elements.","solution":"from typing import List def length_of_LIS(arr: List[int]) -> int: Returns the length of the longest strictly increasing subsequence in the given list. if not arr: return 0 n = len(arr) lis = [1] * n # Initialize LIS values for all indexes as 1 # Compute optimized LIS values in a bottom-up manner for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return the maximum value in lis[] return max(lis)"},{"question":"In a faraway land, there is a special sequence of numbers known as \\"Mystic Numbers.\\" Mystic Numbers follow a unique rule based on binary representation of numbers. Let\'s understand the special property of these numbers. A number N is called a Mystic Number if the count of \'1\'s in its binary representation is a prime number. For example: - The number 6 is 110 in binary, which has two \'1\'s. Since 2 is a prime number, 6 is a Mystic Number. - The number 7 is 111 in binary, which has three \'1\'s. Since 3 is a prime number, 7 is a Mystic Number. - The number 8 is 1000 in binary, which has one \'1\'. Since 1 is not a prime number, 8 is not a Mystic Number. You are given T integers. For each given integer, you have to determine whether it is a Mystic Number or not. Input The first line of the input contains an integer T denoting the number of given integers. The next T lines contain a single integer X. Output For each number in a single line, print \\"Yes\\" if the number is a Mystic Number, and \\"No\\" otherwise (without quotes). Constraints 1 ≤ T ≤ 5000 1 ≤ X ≤ 10^{9} Note 25% of the test files have X ≤ 10^6. SAMPLE INPUT 5 6 7 8 10 15 SAMPLE OUTPUT Yes Yes No No No Explanation In the given sample case: - The number 6 is represented as 110 in binary and has two \'1\'s, which is a prime number, hence \\"Yes\\". - The number 7 is represented as 111 in binary and has three \'1\'s, which is a prime number, hence \\"Yes\\". - The number 8 is represented as 1000 in binary and has one \'1\', which is not a prime number, hence \\"No\\". - The number 10 is represented as 1010 in binary and has two \'1\'s, which is a prime number, hence \\"Yes\\". - The number 15 is represented as 1111 in binary and has four \'1\'s, which is not a prime number, hence \\"No\\".","solution":"def is_prime(n): Utility function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_mystic_number(x): Function to determine if a number is a Mystic Number. # Count the number of \'1\'s in the binary representation of x count_of_ones = bin(x).count(\'1\') # A number is Mystic if the count of \'1\'s is a prime number return is_prime(count_of_ones) def mystic_numbers(T, numbers): Function to process T integers and determine if each is a Mystic Number. result = [] for number in numbers: if is_mystic_number(number): result.append(\\"Yes\\") else: result.append(\\"No\\") return result"},{"question":"Sarah is organizing a local running race event and wants to ensure each participant finishes within a specified time limit to be considered for the final rankings. The total race time is T minutes and each participant should take no more than T minutes to complete the race to qualify for ranking. For each participant, their race time is given. Based on this information, determine whether each participant qualifies for the ranking or not. ------ Input Format ------ - First line will contain N, the number of participants. - Second line will contain T, the total time limit. - The next N lines each contain a single integer representing the time taken by each participant to complete the race. ------ Output Format ------ For each participant output \\"QUALIFIED\\" if the participant\'s time is less than or equal to T, and \\"DISQUALIFIED\\" if the participant\'s time exceeds T. You may print each character of the string in uppercase or lowercase (for example, the strings \\"quAlIfiEd\\", \\"qualified\\", \\"Qualified\\" and \\"QUALIFIED\\" will all be treated as identical). ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ T ≤ 500 1 ≤ RaceTime ≤ 1000 ----- Sample Input 1 ------ 4 120 110 130 115 90 ----- Sample Output 1 ------ QUALIFIED DISQUALIFIED QUALIFIED QUALIFIED ----- Explanation 1 ------ Participant 1 finishes in 110 minutes which is within the time limit of 120 minutes, so they are \\"QUALIFIED\\". Participant 2 finishes in 130 minutes which exceeds the time limit of 120 minutes, so they are \\"DISQUALIFIED\\". Participant 3 finishes in 115 minutes which is within the time limit of 120 minutes, so they are \\"QUALIFIED\\". Participant 4 finishes in 90 minutes which is within the time limit of 120 minutes, so they are \\"QUALIFIED\\".","solution":"def check_qualification(N, T, race_times): Determines if each participant qualifies based on their race times and the time limit T. Parameters: N (int): Number of participants. T (int): Total time limit for the race. race_times (list): List of race completion times for each participant. Returns: list: List containing \\"QUALIFIED\\" or \\"DISQUALIFIED\\" for each participant. results = [] for time in race_times: if time <= T: results.append(\\"QUALIFIED\\") else: results.append(\\"DISQUALIFIED\\") return results"},{"question":"Given an array of n integers, a subarray is defined as a contiguous sequence of elements within the array. For example, if the array is [10, -2, 4, -1, 2], then the subarrays of length 2 are: - [10, -2] - [-2, 4] - [4, -1] - [-1, 2] You are to find all the subarrays of length k and print the minimum absolute difference between the sum of any two subarrays. Input: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 500), where n is the length of the array and k is the length of the subarrays. - The second line contains n integers a_1, a_2, ..., a_n (-10^3 ≤ a_i ≤ 10^3). Output: - Print one integer, which is the minimum absolute difference between the sum of any two subarrays of length k. Example: Input: 5 2 10 -2 4 -1 2 Output: 1 Note: In the above example, the sums of the subarrays of length 2 are: - 10 + (-2) = 8 - (-2) + 4 = 2 - 4 - 1 = 3 - (-1) + 2 = 1 The absolute differences between these sums are: - |8 - 2| = 6 - |8 - 3| = 5 - |8 - 1| = 7 - |2 - 3| = 1 - |2 - 1| = 1 - |3 - 1| = 2 The smallest absolute difference is |2 - 3| = 1.","solution":"def min_absolute_difference(n, k, arr): Returns the minimum absolute difference between the sum of any two subarrays of length k. # Find sums of all subarrays of length k subarray_sums = [sum(arr[i:i + k]) for i in range(n - k + 1)] # Find the minimum absolute difference between any two subarray sums min_diff = float(\'inf\') for i in range(len(subarray_sums)): for j in range(i + 1, len(subarray_sums)): min_diff = min(min_diff, abs(subarray_sums[i] - subarray_sums[j])) return min_diff"},{"question":"Given an integer array `A` of length `N` where each element represents the height of a tree in a forest, you have to pick `K` trees such that no two picked trees are consecutive. Calculate the maximum possible sum of the heights of the picked trees. -----Constraints----- - All values in input are integers. - 1 leq N leq 100 - 1 leq K leq N - 1 leq A_i leq 1000 -----Input----- Input is given from Standard Input in the following format: ``` N K A_1 A_2 ... A_N ``` -----Output----- Print the maximum possible sum of the heights of the picked trees. -----Sample Input----- 7 3 10 20 30 40 50 60 70 -----Sample Output----- 150 In this example, picking the 1st, 3rd, and 5th trees or picking the 2nd, 4th, and 6th trees maximizes the sum of the heights, both of which yield a total height sum of 150.","solution":"def max_sum_of_trees(N, K, heights): if K == 0: return 0 if 2 * K - 1 > N: return -1 dp = [[0] * (K + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, K + 1): if i - 2 >= 0: dp[i][j] = max(dp[i-1][j], dp[i-2][j-1] + heights[i-1]) else: dp[i][j] = max(dp[i-1][j], heights[i-1]) return dp[N][K] # The main function to read the input and call the solution if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) heights = list(map(int, data[2:])) result = max_sum_of_trees(N, K, heights) print(result)"},{"question":"You are given an array of integers `arr` of length `n` and another integer `k`. Your task is to partition the array into exactly `k` non-empty subarrays such that the sum of the maximum element of each subarray is minimized. For example, if one subarray is `[3, 1, 4]`, its contribution to the total sum will be `max(3, 1, 4) = 4`. You need to find the minimum possible value of this total sum. Example 1: Input: arr = [1, 3, 2, 4, 5] k = 2 Output: 6 Explanation: We can partition the array as [1, 3, 2] and [4, 5], where the sum of the maximum elements will be max(1, 3, 2) + max(4, 5) = 3 + 3 = 6. This is the minimum possible value. Example 2: Input: arr = [5, 8, 6, 3, 4, 2, 7] k = 3 Output: 13 Explanation: We can partition the array as [5, 8], [6, 3, 4], and [2, 7], where the sum of the maximum elements will be max(5, 8) + max(6, 3, 4) + max(2, 7) = 8 + 6 + 2 = 16. The minimum possible value can be achieved by partitioning the array as [5, 8], [6, 3, 4], and [2, 7], where the sum of the maximum elements will be max(5, 8) + max(6, 3, 4) + max(2, 7) = 8 + 6 + 3 = 13. Your Task: The task is to complete the function `minimizeSum()`, which takes an integer array `arr` and an integer `k` as inputs, and returns the minimum possible value of the sum of the maximum elements of each subarray. Expected Time Complexity: O(n log n) Expected Space Complexity: O(n) Constraints: - 1 ≤ n ≤ 10^5 - 1 ≤ arr[i] ≤ 10^5 - 1 ≤ k ≤ n","solution":"def minimizeSum(arr, k): This function partitions the array into exactly k non-empty subarrays such that the sum of the maximum element of each subarray is minimized. n = len(arr) # Sort the array in descending order arr.sort(reverse=True) # To minimize the sum of the maximum elements, we should grab the k highest elements # and assume each is the max of its own subarray return sum(arr[:k])"},{"question":"Professor Sprout needs help with her Botanics class at Hogwarts. She is studying a new species of plants that grow in a peculiar pattern. The growth of the plant for each month can be determined by a special sequence called the Sprout Sequence. The Sprout Sequence is defined as follows: - Sprout Sequence of length 1 is [1]. - Sprout Sequence of length 2 is [1, 1]. - For length n > 2, the next number in the sequence is obtained by adding the previous two numbers in the sequence together. Given the number of months, determine how many leaves the plant will have at the end of that many months. Assume the plant will have an initial 1 leaf at month 0. Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 40 Input: The first line contains T, the number of test cases. The next T lines each contain a single integer N, the number of months. Output: For each test case, output the number of leaves on the plant at the end of that many months. SAMPLE INPUT 3 1 5 10 SAMPLE OUTPUT 1 5 55 Explanation: - For the first test case, the plant has 1 leaf at month 1. - For the second test case, the sequence of growth is [1, 1, 2, 3, 5], so the plant has 5 leaves at month 5. - For the third test case, the sequence of growth is [1, 1, 2, 3, 5, 8, 13, 21, 34, 55], so the plant has 55 leaves at month 10.","solution":"def sprout_sequence(month): Returns the number of leaves the plant will have at the end of given months. The number of months is represented by \'month\'. if month == 1 or month == 2: return 1 a, b = 1, 1 for _ in range(month - 2): a, b = b, a + b return b def process_test_cases(test_cases): results = [] for month in test_cases: results.append(sprout_sequence(month)) return results"},{"question":"Given two positive integers N and S, you are to find the minimum number of operations needed to make the sum of a given sequence of N integers equal to S. You can perform the following operations: 1. Add 1 to any element in the sequence. 2. Subtract 1 from any element in the sequence. If it is not possible to achieve the exact sum S, return -1. -----Constraints----- - 1 leq N leq 1000 - 0 leq S leq 10^9 - Each element in the sequence is a non-negative integer that does not exceed 10^6 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N S A_1 A_2 cdots A_{N-1} A_{N} -----Output----- Print the minimum number of operations required, or -1 if it is impossible to achieve the exact sum S. -----Sample Input----- 3 15 5 5 5 -----Sample Output----- 0 The sum of the sequence is already 15, so no operations are needed. -----Sample Input----- 3 10 1 2 3 -----Sample Output----- 4 You need to add 1 to the first element, and add 2 to the second element, making the sequence (2, 4, 3). The final sum is 10.","solution":"def min_operations_to_achieve_sum(n, s, sequence): current_sum = sum(sequence) # If the current sum is already equal to s, no operations needed if current_sum == s: return 0 # Calculate the difference we need to adjust difference = abs(current_sum - s) # If the difference is achievable with given constraints if difference <= n * 10**6: return difference return -1"},{"question":"In a distant city, there\'s a peculiar traffic light system that operates on a binary pattern. The intersection has three lights, and they only change states (either ON or OFF) based on a specific XOR operation. Each light is represented as a bit in a 3-bit binary number, where each bit stands for a light\'s state (0 for OFF, 1 for ON). From the current state, the next state is determined by performing an XOR operation with a predefined XOR mask `B`. You are given the initial state of the traffic lights and the XOR mask `B`. Your task is to determine the state of the traffic lights after `K` iterations. Input Format - The first line of input contains a single integer `T`, which is the number of test cases. The following lines contain the test cases. - Each test case consists of a single line containing three integers: `S`, `B`, and `K`. - `S` is the initial state of the traffic lights in decimal (0 ≤ S ≤ 7). - `B` is the XOR mask in decimal (0 ≤ B ≤ 7). - `K` is the number of iterations (1 ≤ K ≤ 10^9). Constraints - 1 ≤ T ≤ 10^4 Output Format For each test case, output a single line containing the state of the traffic lights after `K` iterations in decimal. Sample Input 2 5 3 1 2 7 4 Sample Output 6 1 Explanation In the first test case, the initial state `S` is `5` (which is `101` in binary). The XOR mask `B` is `3` (which is `011` in binary). After one iteration (K = 1), the new state is obtained by performing the XOR operation: `101 XOR 011 = 110` (which is `6` in decimal). In the second test case, the initial state `S` is `2` (`010` in binary). The XOR mask `B` is `7` (`111` in binary). After four iterations (K = 4), the state evolves as follows: 1. `010 XOR 111 = 101` 2. `101 XOR 111 = 010` 3. `010 XOR 111 = 101` 4. `101 XOR 111 = 010` The final state after four iterations is `010` (which is `2` in decimal).","solution":"def traffic_light_sequence(tests): results = [] for S, B, K in tests: if K % 2 == 0: results.append(S) else: results.append(S ^ B) return results # Helper function to parse input and provide output def main(input_text): lines = input_text.strip().split(\\"n\\") T = int(lines[0]) tests = [tuple(map(int, line.split())) for line in lines[1:T+1]] result = traffic_light_sequence(tests) return result"},{"question":"You are given a list of integers and a set of queries to process. The queries are as follows: 1. **U x y**: Update the element at position `x` to `y`. 2. **Q l r**: Query the sum of elements from index `l` to `r` (inclusive). 3. **M l r**: Query the minimum element from index `l` to `r` (inclusive). Write a program to efficiently handle these types of queries on a list. **Input Format** The first line contains two integers `N` (the size of the list) and `Q` (the number of queries). The second line contains `N` space-separated integers representing the initial elements of the list. The next `Q` lines each contain a query of one of the types mentioned above. **Constraints** - (1 leq N, Q leq 100000) - (1 leq text{elements of the list} leq 10^9) - (1 leq x leq N) - (1 leq l leq r leq N) **Output Format** For each query of type `Q l r` or `M l r`, output the result on a new line. **Sample Input 0** ``` 5 5 1 2 3 4 5 Q 1 3 M 2 4 U 3 10 Q 1 3 M 2 4 ``` **Sample Output 0** ``` 6 2 13 2 ``` **Explanation 0** We are given a list of size `N` = 5 and `Q` = 5 queries to process. Initial list = [1, 2, 3, 4, 5] 1. `Q 1 3`: Sum of elements from index 1 to 3 = 1 + 2 + 3 = 6 2. `M 2 4`: Minimum element from index 2 to 4 = 2 3. `U 3 10`: Update the element at index 3 to 10. List now = [1, 2, 10, 4, 5] 4. `Q 1 3`: Sum of elements from index 1 to 3 = 1 + 2 + 10 = 13 5. `M 2 4`: Minimum element from index 2 to 4 = 2","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.data = data self.sum_tree = [0] * (4 * self.n) self.min_tree = [float(\'inf\')] * (4 * self.n) self.build(0, 0, self.n - 1) def build(self, node, start, end): if start == end: self.sum_tree[node] = self.min_tree[node] = self.data[start] else: mid = (start + end) // 2 self.build(2 * node + 1, start, mid) self.build(2 * node + 2, mid + 1, end) self.sum_tree[node] = self.sum_tree[2 * node + 1] + self.sum_tree[2 * node + 2] self.min_tree[node] = min(self.min_tree[2 * node + 1], self.min_tree[2 * node + 2]) def update(self, idx, val, node=0, start=0, end=None): if end is None: end = self.n - 1 if start == end: self.sum_tree[node] = self.min_tree[node] = val self.data[idx] = val else: mid = (start + end) // 2 if start <= idx <= mid: self.update(idx, val, 2 * node + 1, start, mid) else: self.update(idx, val, 2 * node + 2, mid + 1, end) self.sum_tree[node] = self.sum_tree[2 * node + 1] + self.sum_tree[2 * node + 2] self.min_tree[node] = min(self.min_tree[2 * node + 1], self.min_tree[2 * node + 2]) def range_query(self, l, r, node=0, start=0, end=None, query_type=\\"sum\\"): if end is None: end = self.n - 1 if r < start or l > end: return 0 if query_type == \\"sum\\" else float(\'inf\') if l <= start and end <= r: return self.sum_tree[node] if query_type == \\"sum\\" else self.min_tree[node] mid = (start + end) // 2 left_query = self.range_query(l, r, 2 * node + 1, start, mid, query_type) right_query = self.range_query(l, r, 2 * node + 2, mid + 1, end, query_type) if query_type == \\"sum\\": return left_query + right_query else: return min(left_query, right_query) def handle_queries(n, queries, data): tree = SegmentTree(data) res = [] for query in queries: parts = query.split() if parts[0] == \'Q\': l, r = int(parts[1]) - 1, int(parts[2]) - 1 res.append(tree.range_query(l, r, query_type=\\"sum\\")) elif parts[0] == \'M\': l, r = int(parts[1]) - 1, int(parts[2]) - 1 res.append(tree.range_query(l, r, query_type=\\"min\\")) elif parts[0] == \'U\': index, value = int(parts[1]) - 1, int(parts[2]) tree.update(index, value) return res"},{"question":"A Space Exploration/Optimization Problem Space exploration missions have become increasingly sophisticated. Scientists and engineers design spacecrafts with optimal usage of limited space and energy. A critical part of these designs is the arrangement of different components within the spacecraft, ensuring minimal energy waste during the mission. You are tasked with creating an algorithm to minimize the fuel consumption of a critical propulsion maneuver. The spacecraft consists of several modules connected in a linear sequence. Given the energy cost to propel each module, the goal is to find the optimal cost for a specific maneuver through these modules. For simplicity, assume that propelling module `i` has an energy cost represented by `E[i]`, and the propulsion must start from the first module and extend up to any of the modules to minimize the total fuel consumption for the particular maneuver. problem Given the energy costs for each module in the spacecraft\'s linear sequence, determine the minimal total energy cost to perform the propulsion maneuver from the first module to any of the modules. input N E[1] E[2] ... E[N] On the first line, a positive integer `N` representing the number of modules in the spacecraft is given. The second line provides `N` space-separated positive integers representing the energy costs `E[i]` to propel each corresponding module `i`. output Output a single integer representing the minimal total energy cost for the maneuver from the first module up to any of the modules. Constraints * 1 ≤ N ≤ 100,000 * 1 ≤ E[i] ≤ 1,000 Input / output example Input 1 5 3 1 4 1 5 Output 1 1 Explanation: The minimal total energy cost is obtained by considering only the second module, which has the minimum energy cost `1` among all modules starting from the first module. Input 2 7 10 15 20 5 25 10 5 Output 2 5 Explanation: The minimal total energy cost is obtained by considering only the fourth module, which has the minimum energy cost `5` among all modules starting from the first module. Input 3 3 7 2 8 Output 3 2 Explanation: The minimal total energy cost is obtained by considering only the second module, which has the minimum energy cost `2` among all modules starting from the first module.","solution":"def minimal_fuel_consumption(N, energy_costs): Returns the minimal total energy cost for propelling from the first module to any of the modules. Args: N : int : number of modules energy_costs : list of int : energy costs for each module Returns: int : minimal total energy cost return min(energy_costs)"},{"question":"Eva the rabbit is trying to sort a basket of carrots. She has a specific rule: each carrot can only be swapped with the one immediately next to it, and each swap costs one carrot coin. Eva wonders how many carrot coins she needs to sort all her carrots in non-decreasing order based on their lengths. Input The first line contains an integer n (1 ≤ n ≤ 100) - the number of carrots in the basket. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) - the lengths of the carrots. Output Print one integer - the minimum number of carrot coins needed to sort the carrots in non-decreasing order. Example Input 5 4 3 2 5 1 Output 7 Input 3 1 2 3 Output 0","solution":"def count_swaps_to_sort_carrots(n, carrots): Returns the minimum number of swaps (each costing one carrot coin) required to sort the given list of carrots in non-decreasing order. :param n: int, number of carrots :param carrots: list of int, lengths of the carrots :return: int, minimum number of swaps required count_swaps = 0 for i in range(n): for j in range(0, n - i - 1): if carrots[j] > carrots[j + 1]: carrots[j], carrots[j + 1] = carrots[j + 1], carrots[j] count_swaps += 1 return count_swaps"},{"question":"Hackerland is a country which consists of N cities and M bidirectional roads connecting these cities. Each road has a toll cost, and some of the roads are marked as \'special\' roads. Due to recent changes, the government wants to know the minimum number of special roads included in the path from city 1 to city N, if such a path exists. You are provided with a map of Hackerland. Your task is to determine the minimum number of special roads between city 1 and city N, or output -1 if no such path exists. Constraints: * 2 leq N leq 10^5 * 1 leq M leq 2 times 10^5 * 1 leq toll leq 1000 * All input values are integers. * There is at most one road directly connecting any pair of cities. * A road can either be marked as \'special\' or not. Input: The first line of input consists of three integers: N, M, and K where K is the number of special roads. Then, M lines follow describing the roads. Each line contains four integers: u, v, toll, type, where: * u and v are the cities connected by this road, * toll is the toll cost of the road, * type indicates whether the road is special (type = 1) or not (type = 0). Output: Print the minimum number of special roads in the path from city 1 to city N. If no such path exists, print -1. Examples: Input: 5 6 2 1 2 1 1 2 3 1 0 3 5 1 0 2 4 2 1 4 5 1 0 1 3 3 0 Output: 1 Input: 4 3 1 1 2 1 0 2 3 2 1 3 4 1 0 Output: 1","solution":"import heapq def min_special_roads(N, M, K, roads): graph = [[] for _ in range(N + 1)] for u, v, toll, r_type in roads: graph[u].append((v, toll, r_type)) graph[v].append((u, toll, r_type)) # Priority queue to hold (total toll, current city, special road count) pq = [(0, 1, 0)] tolls = {(1, 0): 0} # dict to hold minimum toll to reach (city, special_count) while pq: current_toll, u, special_count = heapq.heappop(pq) # If we\'ve reached the destination city if u == N: return special_count # Explore neighbors for v, toll, r_type in graph[u]: new_toll = current_toll + toll new_special_count = special_count + r_type # If this path has fewer special roads or less toll than previously found if (v, new_special_count) not in tolls or new_toll < tolls[(v, new_special_count)]: tolls[(v, new_special_count)] = new_toll heapq.heappush(pq, (new_toll, v, new_special_count)) # If destination city is not reachable return -1"},{"question":"You are working on a project management software that involves managing several tasks with dependencies. Each task is represented by a number and each dependency is represented as a directed edge in a graph, where a directed edge from task `u` to task `v` means that task `u` must be completed before task `v`. Your goal is to determine the minimum number of tasks that can be started immediately, i.e., tasks that have no dependencies or all their dependencies have already been resolved. Write a function `find_startable_tasks` that takes in two parameters: - `n`: The number of tasks (numbered from 1 to `n`). - `dependencies`: A list of tuples, where each tuple `(u, v)` indicates a dependency that task `u` must be completed before task `v`. The function should return a list of task numbers that can be started immediately. -----Input----- - `n` (1 <= n <= 100) — The number of tasks. - `dependencies` — A list of tuples representing the dependencies (0 <= number of dependencies <= 1000). -----Output----- - A list of integers representing task numbers that can be started immediately in ascending order. -----Examples----- Input 6 [(1, 3), (2, 3), (4, 5), (5, 6)] Output [1, 2, 4] Input 5 [(2, 1), (3, 1), (4, 1), (5, 1)] Output [2, 3, 4, 5] Input 4 [(2, 3), (2, 4), (3, 4)] Output [1, 2]","solution":"def find_startable_tasks(n, dependencies): Returns a list of task numbers that can be started immediately. Args: - n: int - the number of tasks. - dependencies: list of tuples - a list where each tuple (u, v) indicates a dependency that task u must be completed before task v. Returns: - list of integers representing task numbers that can be started immediately in ascending order. # Initialize a list to keep track of the indegree (number of incoming edges) for each task indegree = [0] * (n + 1) # Build the graph and compute the indegree of each task for u, v in dependencies: indegree[v] += 1 # Find all tasks that have an indegree of 0 startable_tasks = [i for i in range(1, n + 1) if indegree[i] == 0] return sorted(startable_tasks)"},{"question":"You are given a list of integers and a target sum. Your task is to determine if there are two distinct numbers in the list that add up to the target sum. If such a pair exists, return `True`; otherwise, return `False`. Write a function `has_pair_with_sum(lst, target)` that takes in: - `lst` (list of integers): The list of integers. - `target` (integer): The target sum. The function should return a boolean value (`True` or `False`). Examples: ```python has_pair_with_sum([2, 7, 11, 15], 9) # True (2 + 7 = 9) has_pair_with_sum([1, 2, 3, 4], 8) # False has_pair_with_sum([-1, -2, -3, -4], -6) # True (-2 + -4 = -6) ``` **Note:** All integers in the input list will be distinct. The list can have both positive and negative integers.","solution":"def has_pair_with_sum(lst, target): Determines if there are two distinct numbers in the list that add up to the target sum. Parameters: lst (list of ints): List of distinct integers. target (int): The target sum. Returns: bool: True if there are two numbers that add up to the target sum, otherwise False. seen_numbers = set() for number in lst: required_number = target - number if required_number in seen_numbers: return True seen_numbers.add(number) return False"},{"question":"# Ransom Note Write a function to determine if you can construct a ransom note from a given magazine. To do so, you can only use the letters in the magazine, and each letter from the magazine can only be used once in the ransom note. For example: `ransomNote`: \\"hello\\" `magazine`: \\"ollhebg\\" Returns `true` because \\"hello\\" can be constructed from \\"ollhebg\\". Function will return `true` if the ransom note can be constructed, and `false` otherwise.","solution":"def can_construct_ransom_note(ransomNote, magazine): Determines if the ransom note can be constructed from the given magazine. Args: ransomNote (str): The ransom note to construct. magazine (str): The magazine to use for constructing the ransom note. Returns: bool: True if the ransom note can be constructed, otherwise False. from collections import Counter ransom_note_counter = Counter(ransomNote) magazine_counter = Counter(magazine) for letter, count in ransom_note_counter.items(): if magazine_counter[letter] < count: return False return True"},{"question":"Given an array of integers and a target sum, determine if there is a pair of numbers in the array that adds up to the target sum. If such a pair exists, return the indices of the two numbers in any order. If no such pair exists, return an empty list. Example 1: Input: nums = [2, 7, 11, 15] target = 9 Output: [0, 1] Explanation: nums[0] + nums[1] = 2 + 7 = 9 Example 2: Input: nums = [3, 2, 4] target = 6 Output: [1, 2] Explanation: nums[1] + nums[2] = 2 + 4 = 6 Example 3: Input: nums = [3, 3] target = 6 Output: [0, 1] Explanation: nums[0] + nums[1] = 3 + 3 = 6 Your Task: You don\'t need to read input or print anything. Your task is to complete the function findPair() which takes an array of integers nums and an integer target as input and returns the indices of the two numbers such that they add up to the target sum. If no such pair exists, return an empty list. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def findPair(nums, target): Returns the indices of the two numbers such that they add up to the target sum. If no such pair exists, returns an empty list. # Dictionary to store the potential number needed to reach the target sum and its index num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: return [num_dict[complement], i] num_dict[num] = i return []"},{"question":"# Sentence Capitalizer Implement a function to capitalize the first letter of each word in a given string. Words are defined as sequences of non-space characters separated by one or more spaces. The function should return the transformed string. Examples ``` \\"hello world\\" => \\"Hello World\\" \\"this is a test\\" => \\"This Is A Test\\" \\"capitalize each word\\" => \\"Capitalize Each Word\\" ``` Notes * The string may contain leading or trailing spaces. Ensure that these are handled appropriately. For instance, `\\" hello world \\"` should return `\\" Hello World \\"`. * Words can be separated by multiple spaces. For example, `\\"hello world\\"` should return `\\"Hello World\\"`. * You may assume the input will always be a string and it could be empty. An empty string should return an empty string.","solution":"def capitalize_each_word(s): Capitalizes the first letter of each word in a given string. Words are sequences of non-space characters separated by spaces. Parameters: s (str): The input string. Returns: str: The transformed string with each word capitalized. return \' \'.join(word.capitalize() for word in s.split(\' \'))"},{"question":"You are given a grid with dimensions h times w (1 le h, w le 30) consisting of non-negative integers. You are also given a list of q queries. Each query contains four integers r1, c1, r2, and c2, representing the top-left and bottom-right corners of a subgrid respectively (1 le r1 le r2 le h and 1 le c1 le c2 le w). Your task is to find the sum of all the elements within the specified subgrid for each query. You have to answer q independent queries within the same grid. -----Input----- The first line of the input contains two integers h and w — the number of rows and columns in the grid. Following this, there are h lines with w integers each, representing the grid. The next line contains one integer q (1 le q le 200) — the number of queries. Each of the next q lines contains four integers r1, c1, r2, and c2 — the boundaries of the subgrid for which the sum is to be computed. -----Output----- For each query, print the sum of all elements in the specified subgrid. -----Example----- Input 4 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 3 1 1 2 3 2 2 4 5 1 3 4 5 Output 33 140 203 -----Note----- In the first query, the sum of the subgrid from (1,1) to (2,3) is 1+2+3+6+7+8=27. In the second query, the sum of the subgrid from (2,2) to (4,5) is 7+8+9+12+13+14+17+18+19+20=137. In the third query, the sum of the subgrid from (1,3) to (4,5) is 3+4+5+8+9+10+13+14+15+18+19+20=138.","solution":"def compute_subgrid_sums(grid, queries): Computes the sum of elements within specified subgrids for each query. Parameters: grid (List[List[int]]): The grid containing the integers. queries (List[Tuple[int]]): List of queries where each query is a tuple (r1, c1, r2, c2) Returns: List[int]: List of sums for each query. h = len(grid) w = len(grid[0]) def prefix_sum_2d(grid): # Create prefix sum array prefix = [[0] * (w+1) for _ in range(h+1)] for i in range(1, h+1): for j in range(1, w+1): prefix[i][j] = grid[i-1][j-1] + prefix[i-1][j] + prefix[i][j-1] - prefix[i-1][j-1] return prefix prefix = prefix_sum_2d(grid) results = [] for r1, c1, r2, c2 in queries: subgrid_sum = (prefix[r2][c2] - prefix[r1-1][c2] - prefix[r2][c1-1] + prefix[r1-1][c1-1]) results.append(subgrid_sum) return results"},{"question":"Anya loves dealing with arrays and often finds interesting problems to solve related to them. Recently, she stumbled upon a problem that caught her interest, but she needs some assistance to find a solution. You have an array of integers. You need to determine a non-empty subarray such that the sum of the subarray is maximized and the difference between the maximum and minimum elements within this subarray is minimized. You are required to return the sum of the subarray that satisfies these conditions. Input: First line contains an integer n, denoting the length of the array. Second line contains n space-separated integers, representing the array elements. Output: Output the maximum sum of the subarray with the smallest difference between the maximum and minimum elements. Constraints: 1 ≤ n ≤ 100000 -10^9 ≤ array elements ≤ 10^9 SAMPLE INPUT 5 3 -1 2 7 -4 SAMPLE OUTPUT 11 Explanation The subarray [3, -1, 2, 7] has the maximum sum 11 with the smallest difference between maximum (7) and minimum (-1) which is 8.","solution":"def max_subarray_with_min_diff(arr): n = len(arr) if n == 0: return 0 # Initialize variables for Kadane\'s algorithm current_max = arr[0] global_max = arr[0] current_min = arr[0] min_diff = float(\'inf\') for i in range(1, n): current_max = max(arr[i], current_max + arr[i]) global_max = max(global_max, current_max) current_min = min(arr[i], current_min + arr[i]) # Calculate the difference between the max and min elements in the subarray diff = current_max - current_min # Check if this difference is the smallest one if diff < min_diff: min_diff = diff return global_max"},{"question":"The holiday season is near, and you have been assigned the task of designing a star pyramid for the decorations. Your goal is to create a program that generates a pyramid pattern of stars according to a specific height given as an input. -----Input:----- - First-line will contain N, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer H, representing the height of the pyramid. -----Output:----- For each test case, output the star pyramid of height H. -----Constraints----- - 1 leq N leq 50 - 1 leq H leq 50 -----Sample Input:----- 3 2 4 3 -----Sample Output:----- * *** * *** ***** ******* * *** ***** -----EXPLANATION:----- The pyramid pattern should be centered and symmetrical, with each layer of stars increasing by 2 stars from the one above it, starting with 1 star at the top.","solution":"def generate_star_pyramid(height): Generates a star pyramid of a given height. Args: height (int): Height of the pyramid Returns: str: A string representation of the star pyramid pyramid = [] for i in range(height): # Number of spaces before the stars spaces = \' \' * (height - i - 1) # Number of stars in the current row stars = \'*\' * (2 * i + 1) pyramid.append(spaces + stars) return \'n\'.join(pyramid) def process_test_cases(test_cases): Processes multiple test cases to generate star pyramids. Args: test_cases (list): List of heights for each test case Returns: list: A list of strings, each representing the star pyramid for a test case results = [] for height in test_cases: results.append(generate_star_pyramid(height)) return results"},{"question":"Sarah is learning about algorithmic efficiency and she comes across the problem of calculating the sum of all subarrays of a given array. She defines a subarray as any contiguous segment of the initial array. She needs a function to efficiently compute the sum of all possible subarrays for a given array of integers. Given an array of length N, you need to calculate the total sum of all of its subarrays. Input The first line of the input contains the number of test cases T. Each test case has two lines. The first line contains a single integer N, the size of the array. The second line contains N integers which represent the elements of the array. Output For each test case, output a single number, which is the total sum of all subarrays for that test case. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9 SAMPLE INPUT 2 3 1 2 3 4 1 -1 1 -1 SAMPLE OUTPUT 20 0 Explanation For the first test case, the subarrays are: [1], [2], [3], [1,2], [2,3], [1,2,3] Their sums are: 1, 2, 3, 3, 5, 6, respectively. The total sum is 1 + 2 + 3 + 3 + 5 + 6 = 20. For the second test case, the subarrays are: [1], [-1], [1], [-1], [1,-1], [-1,1], [1,-1], [1,-1,1], [-1,1,-1], [1,-1,1,-1] Their sums are: 1, -1, 1, -1, 0, 0, 0, 0, 0, 0 respectively. The total sum is 1 - 1 + 1 - 1 + 0 + 0 + 0 + 0 + 0 + 0 = 0.","solution":"def sum_of_all_subarrays(n, arr): Returns the total sum of all subarrays for a given array of integers. total_sum = 0 for i in range(n): total_sum += arr[i] * (i + 1) * (n - i) return total_sum def sum_all_subarrays_for_test_cases(test_cases): results = [] for case in test_cases: n, arr = case results.append(sum_of_all_subarrays(n, arr)) return results"},{"question":"You are working with a new image editing software that supports a basic scripting language to draw geometric shapes on a canvas. The canvas is represented as a 2D grid with M rows and N columns. Initially, the entire canvas is blank, represented by `0`s. Your task is to draw a rectangle on the grid with the given top-left and bottom-right coordinates. Write a function `draw_rectangle(M, N, top_left, bottom_right)` that takes the number of rows `M` and columns `N` of the canvas, the coordinates of the top-left, and the coordinates of the bottom-right corners of the rectangle, and draws the rectangle by filling the cells within the rectangle with `1`s. # Input Specifications - `M` and `N` are integers representing the number of rows and columns (1 ≤ M, N ≤ 1000). - `top_left` and `bottom_right` are tuples containing two integers (x1, y1) and (x2, y2) respectively, where 0 ≤ x1, x2 < M and 0 ≤ y1, y2 < N. # Output Specifications - Return a 2D list representing the canvas after drawing the rectangle. # Example Input and Output **Example 1:** ```text M = 5 N = 7 top_left = (1, 2) bottom_right = (3, 5) ``` **Example Output:** ```text [[0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0]] ``` **Example 2:** ```text M = 4 N = 4 top_left = (0, 0) bottom_right = (1, 1) ``` **Example Output:** ```text [[1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]] ``` # Constraints - Ensure the coordinates of the rectangle are within the bounds of the canvas. - If the rectangle is invalid (e.g., bottom-right coordinate is above or to the left of top-left coordinate), return the original canvas without making any modifications.","solution":"def draw_rectangle(M, N, top_left, bottom_right): Draw a rectangle on the canvas. Parameters: M (int): the number of rows in the canvas. N (int): the number of columns in the canvas. top_left (tuple): the coordinates (x1, y1) of the top-left corner of the rectangle. bottom_right (tuple): the coordinates (x2, y2) of the bottom-right corner of the rectangle. Returns: list: a 2D list representing the canvas with the rectangle drawn on it. (x1, y1) = top_left (x2, y2) = bottom_right # Initial canvas with all zeros canvas = [[0 for _ in range(N)] for _ in range(M)] # Check for invalid coordinates of the rectangle if x1 > x2 or y1 > y2 or x1 < 0 or x1 >= M or x2 < 0 or x2 >= M or y1 < 0 or y1 >= N or y2 < 0 or y2 >= N: return canvas # Draw the rectangle for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): canvas[i][j] = 1 return canvas"},{"question":"You are given a string S of length N consisting of lowercase Latin letters. You can perform the following operation as many times as you want: pick any two adjacent characters in the string and if they are different, swap them. Your goal is to determine the minimum number of swaps needed to make all characters of the string equal. ------ Input ------ The first line contains T, the number of test cases. The first line of each test case contains a single integer N, denoting the length of the string S. The second line of each test case contains a string S of length N. ------ Output ------ Output a single integer denoting the minimum number of swaps needed to make all characters of the string equal for each test case. ------ Constraints ------ 1 ≤ T ≤ 5 1 ≤ N ≤ 100^3 ------ Subtasks ------ Subtask #1: S only contains up to two different characters (50 points) Subtask #2: Original constraints (50 points) ------ Sample Input 1 ------ 2 3 abc 4 aabb ------ Sample Output 1 ------ 2 0 ------ Explanation 1 ------ Example case 1: You can swap \'a\' with \'b\' to get \\"bac\\" and then swap \'b\' with \'c\' to get \\"bbc\\", needing 2 swaps in total to make the string contain all equal characters. Example case 2: No swaps are needed as the string \\"aabb\\" already satisfies the condition where the adjacent characters can be the same after performing optimal swaps.","solution":"def min_swaps_to_equal_chars(S): Returns the minimum number of swaps needed to make all characters in the string equal. It considers both majorities and chooses the one which gives the fewer swaps. from collections import Counter # Count the frequency of each character freq = Counter(S) max_freq_char = max(freq, key=freq.get) max_freq = freq[max_freq_char] return len(S) - max_freq def solve(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] S = test_cases[t][1] results.append(min_swaps_to_equal_chars(S)) return results"},{"question":"You are given a list of `n` integers, representing the heights of `n` buildings in a row, where the height of the `i-th` building is denoted by `h[i]`. Your task is to determine if there exists a building `k` (1 <= k <= n) such that all buildings to the left of `k` are in non-decreasing order and all buildings to the right of `k` are in non-increasing order. In other words, we need to find if there exists a building which can act as a \\"peak\\" such that no buildings to the left of it are taller than it and no buildings to the right of it are taller than it. For example, for a list h = [1, 2, 3, 5, 4, 3, 2], the building with height 5 (the 4th building) satisfies the condition. -----Input----- The first line contains one integer t (1 le t le 500) — the number of test cases. Each test case consists of two lines. The first line contains one integer n (1 le n le 500) — the number of buildings. The second line contains n integers h_1, h_2, ..., h_n (1 <= h_i <= 1000) — the heights of the buildings. The sum of values of n over all test cases in the input does not exceed 500. -----Output----- For each test case, print \\"YES\\" if there exists such a building, otherwise print \\"NO\\". -----Examples----- Input 4 7 1 2 3 5 4 3 2 3 1 2 1 5 2 2 2 2 2 4 1 3 2 4 Output YES YES YES NO -----Note----- In the first test case, the 4th building with height 5 is the peak. In the second test case, the 2nd building with height 2 is the peak. In the third test case, any of the buildings can be the peak since all buildings have the same height. In the fourth test case, there is no single building that acts as a peak according to the given criteria.","solution":"def can_be_peak(t, test_cases): results = [] for n, heights in test_cases: found = False for k in range(1, n+1): left_sorted = all(heights[i] <= heights[i+1] for i in range(k-1)) right_sorted = all(heights[j] >= heights[j+1] for j in range(k, n-1)) if left_sorted and right_sorted: found = True break results.append(\\"YES\\" if found else \\"NO\\") return results # Example running code t = 4 test_cases = [ (7, [1, 2, 3, 5, 4, 3, 2]), (3, [1, 2, 1]), (5, [2, 2, 2, 2, 2]), (4, [1, 3, 2, 4]) ] print(can_be_peak(t, test_cases))"},{"question":"You are given an integer k and a string s consisting solely of lowercase English letters. You are allowed to perform at most k operations to transform the string. An operation involves choosing any index i in the string s and replacing the character at that index with any other lowercase English letter. Your task is to determine the length of the longest substring consisting of identical characters that can be achieved by performing at most k operations on the string s. Input Format - The first line contains two space-separated integers n and k, where n is the length of the string s. - The second line contains the string s. Constraints 1 leq n leq 10^5 0 leq k leq n Output Format Print a single integer, the maximum length of the homogeneous substring that can be obtained by performing at most k operations on s. Sample Input 0 8 1 aabbccdd Sample Output 0 3 Sample Input 1 6 2 abbacc Sample Output 1 4 Sample Input 2 3 3 abc Sample Output 2 3 Explanation In the first sample case, we can change the second character \'a\' to \'b\' to get a substring \\"bbb\\" or change the fifth character \'c\' to \'b\' to get \\"bbb\\". The longest homogeneous substring is of length 3. In the second sample case, we can change one of the first \'b\' or the second \'a\' to \'c\' to extend \\"cccc\\" or \\"aaaa\\". Thus, the longest homogeneous substring that can be achieved by performing at most 2 operations is of length 4. In the third sample case, we can change all characters individually to any identical character, resulting in a homogeneous substring of length 3, which is the full length of the string.","solution":"def longest_homogeneous_substring(n, k, s): from collections import defaultdict def max_length_with_char_replacement(ch): left = 0 max_len = 0 max_freq = 0 count = defaultdict(int) for right in range(n): if s[right] == ch: count[ch] += 1 max_freq = max(max_freq, count[ch]) # If the window is invalid (more than k replacements on other characters) if (right - left + 1) - max_freq > k: if s[left] == ch: count[ch] -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len max_len = 0 for ch in set(s): max_len = max(max_len, max_length_with_char_replacement(ch)) return max_len"},{"question":"Mystic Numeric Sequences In a distant kingdom, mathematicians are tasked with finding unique mystic numeric sequences which satisfy certain properties. These sequences are a fixed length `L` and consist only of digits from `0` to `9`. Each sequence must include each digit from `0` to `9` at least once at index `0` to `9` of the sequence. The kingdom\'s head mathematician, Archibald, has determined an algorithm to generate such sequences, but before he finalizes his discovery, he wants you to verify if a given sequence is mystic or not. A sequence is mystic if and only if each digit from `0` to `9` appears at least once at their respective index (for example, \\"1234567890\\" is a mystic sequence because each digit 0 through 9 appears at least once). Given a sequence of length 10, determine whether the sequence is mystic or not. Input The input consists of: - A single string `S` of length 10, consisting of digits from `0` to `9`. Output Print `Valid` if the input sequence is mystic. Otherwise, print `Invalid`. Sample Input 1 ``` 1234567890 ``` Sample Output 1 ``` Valid ``` Sample Input 2 ``` 1234567891 ``` Sample Output 2 ``` Invalid ``` Sample Input 3 ``` 0987654321 ``` Sample Output 3 ``` Valid ``` Sample Input 4 ``` 1111111111 ``` Sample Output 4 ``` Invalid ```","solution":"def is_mystic_sequence(sequence): Returns \'Valid\' if the sequence is mystic, \'Invalid\' otherwise. A sequence is mystic if each digit from 0 to 9 appears at least once in their respective positions. required_digits = set(\'0123456789\') sequence_digits = set(sequence) if len(sequence) == 10 and required_digits == sequence_digits: return \\"Valid\\" return \\"Invalid\\""},{"question":"For a given string `S` consisting of lowercase English letters, the \\"palindromic score\\" is defined as the count of its characters that can be rearranged to form a palindrome. Note that a palindrome can have at most one character with an odd frequency while all other characters must have even frequencies. Write a function that takes `S` as input and outputs the palindromic score of `S`. Constraints * 1 ≤ |S| ≤ 10^5 * `S` consists of lowercase English letters. Input Input is given from Standard Input in the following format: S Output Output the palindromic score of `S`. Examples Input abccccdd Output 7 Input aabbccdd Output 8","solution":"def palindromic_score(S): from collections import Counter char_count = Counter(S) score = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: score += count else: score += count - 1 odd_found = True if odd_found: score += 1 return score"},{"question":"Given an integer array nums and an integer k, return the number of continuous subarrays where the product of all the elements in the subarray is less than k. Constraints: - 1 <= nums.length <= 10^4 - 1 <= nums[i] <= 1000 - 0 <= k <= 10^6 Input Input is given from Standard Input in the following format: N k nums_1 nums_2 ... nums_N Output Print the number of continuous subarrays with a product less than k. Examples Input 4 100 10 5 2 6 Output 8 Input 5 0 1 2 3 4 5 Output 0","solution":"def num_subarray_product_less_than_k(nums, k): if k <= 1: return 0 prod = 1 left = 0 count = 0 for right in range(len(nums)): prod *= nums[right] while prod >= k: prod /= nums[left] left += 1 count += right - left + 1 return count"},{"question":"You are working on a data analysis project that involves processing a large dataset of historical weather information. Each record in the dataset consists of the date, the temperature, and the type of weather (e.g., sunny, rainy, cloudy). You need to summarize this data to provide insights such as the average temperature, the number of days with different types of weather, and identify the hottest and coldest days. Write a function that takes a list of weather records as input and returns a dictionary with the summary information. Each weather record is represented as a dictionary with three keys: \'date\', \'temperature\', and \'weather\'. Here\'s the format of the input list: ```python [ {\'date\': \'2023-01-01\', \'temperature\': 15, \'weather\': \'sunny\'}, {\'date\': \'2023-01-02\', \'temperature\': 10, \'weather\': \'cloudy\'}, {\'date\': \'2023-01-03\', \'temperature\': 5, \'weather\': \'rainy\'}, # more records ] ``` The function should return a dictionary with the following information: - `average_temperature`: The average temperature over all the records. - `weather_count`: A dictionary with the count of each type of weather (e.g., {\'sunny\': 10, \'rainy\': 5, \'cloudy\': 8}). - `hottest_day`: The date of the highest temperature. - `coldest_day`: The date of the lowest temperature. The function signature should be: ```python def summarize_weather(data: List[Dict[str, Union[str, int]]]) -> Dict[str, Union[float, Dict[str, int], str]]: pass ``` # Constraints - The input list will have at least one record and no more than 10,000 records. - Temperature values are in degrees Celsius and will range between -50 and 50. - Dates are given in the format \'YYYY-MM-DD\' and are guaranteed to be valid. # Example Input ```python [ {\'date\': \'2023-01-01\', \'temperature\': 20, \'weather\': \'sunny\'}, {\'date\': \'2023-01-02\', \'temperature\': 10, \'weather\': \'cloudy\'}, {\'date\': \'2023-01-03\', \'temperature\': 15, \'weather\': \'rainy\'}, {\'date\': \'2023-01-04\', \'temperature\': 25, \'weather\': \'sunny\'}, {\'date\': \'2023-01-05\', \'temperature\': -5, \'weather\': \'snowy\'} ] ``` # Example Output ```python { \'average_temperature\': 13.0, \'weather_count\': {\'sunny\': 2, \'cloudy\': 1, \'rainy\': 1, \'snowy\': 1}, \'hottest_day\': \'2023-01-04\', \'coldest_day\': \'2023-01-05\' } ```","solution":"from typing import List, Dict, Union def summarize_weather(data: List[Dict[str, Union[str, int]]]) -> Dict[str, Union[float, Dict[str, int], str]]: total_temp = 0 weather_count = {} min_temp = float(\'inf\') max_temp = float(\'-inf\') coldest_day = \\"\\" hottest_day = \\"\\" for record in data: temp = record[\'temperature\'] weather_type = record[\'weather\'] date = record[\'date\'] total_temp += temp if temp < min_temp: min_temp = temp coldest_day = date if temp > max_temp: max_temp = temp hottest_day = date if weather_type in weather_count: weather_count[weather_type] += 1 else: weather_count[weather_type] = 1 average_temperature = total_temp / len(data) return { \'average_temperature\': average_temperature, \'weather_count\': weather_count, \'hottest_day\': hottest_day, \'coldest_day\': coldest_day }"},{"question":"Write a function that takes a list of integers and returns the length of the longest increasing subsequence. The function should return 0 if the list is empty. Input: The first line of input contains an integer T denoting the number of test cases. Each of the next T lines contains a sequence of space-separated integers. Output: For each test case, return the length of the longest increasing subsequence. Constraints: 1 <= T <= 100 1 <= length of each list <= 10^4 -10^9 <= each integer in the list <= 10^9 Example: Input: 2 10 22 9 33 21 50 41 60 80 3 10 2 1 20 Output: 6 3","solution":"def longest_increasing_subsequence_length(nums): Returns the length of the longest increasing subsequence in the given list of integers. If the list is empty, returns 0. if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_test_cases(test_cases): Processes multiple test cases and returns a list of results for the lengths of the longest increasing subsequences for each test case. results = [] for nums in test_cases: result = longest_increasing_subsequence_length(nums) results.append(result) return results"},{"question":"There is a game where players move tokens on a 2D grid. Each move must be horizontal, vertical, or diagonal along the lines of the grid. The grid is composed of N rows and M columns. Given the start position (x1, y1) and end position (x2, y2) of a token, determine if the token can reach the end position from the start position and, if so, calculate the minimum number of moves required. Input Format The first line contains an integer T, the number of test cases. The next T lines each contain five integers: N, M, x1, y1, x2, and y2. Output Format For each test case, print a single integer, the minimum number of moves required to move the token from the start position to the end position. If it\'s not possible to reach the end position, print -1. Constraints 1 ≤ T ≤ 1000 1 ≤ N, M ≤ 1000 1 ≤ x1, y1, x2, y2 ≤ 1000 SAMPLE INPUT 3 5 5 1 1 5 5 3 3 1 1 3 3 4 4 2 2 2 2 SAMPLE OUTPUT 2 2 0","solution":"def min_moves_to_reach(N, M, x1, y1, x2, y2): Returns the minimum number of moves to reach from (x1, y1) to (x2, y2) on a grid of size N x M. Moves can be horizontal, vertical, or diagonal. # If the start and end positions are the same if x1 == x2 and y1 == y2: return 0 # Calculate horizontal and vertical distances dx = abs(x2 - x1) dy = abs(y2 - y1) # The number of moves required is max of horizontal or vertical distances return max(dx, dy) def process_test_cases(T, test_cases): results = [] for case in test_cases: N, M, x1, y1, x2, y2 = case results.append(min_moves_to_reach(N, M, x1, y1, x2, y2)) return results # For debugging or running without input/output loops # sample_test_cases = [ # (5, 5, 1, 1, 5, 5), # (3, 3, 1, 1, 3, 3), # (4, 4, 2, 2, 2, 2) # ] # print(process_test_cases(3, sample_test_cases))"},{"question":"Farmer John\'s cows are very playful and have devised a jumping contest. Each cow has a unique jumping height. The cows stand in a line and jump one at a time according to their positions in the line. Farmer John notices that some cows jump higher than a cow positioned after them in the line, causing a disruption in the contest\'s flow. To restore order, Farmer John wants to select a subsequence of cows such that the cows in this subsequence have strictly increasing jumping heights and include as many cows as possible. Write a program to find the length of the longest subsequence of cows with strictly increasing jumping heights. Input The first line contains an integer n (1 ≤ n ≤ 105), representing the number of cows. The next line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109), where hi represents the jumping height of the cow standing at position i. Output A single integer, representing the length of the longest subsequence of cows with strictly increasing jumping heights. Example Input 6 5 3 4 8 6 7 Output 4 Note In the given example, one of the longest subsequences with strictly increasing jumping heights is 3, 4, 6, 7. Another possible subsequence is 3, 4, 6, 8 or 3, 4, 5, 8. The length of the longest increasing subsequence is 4.","solution":"def length_of_lis(heights): Returns the length of the longest increasing subsequence from the list of cow jumping heights. if not heights: return 0 n = len(heights) lis = [1] * n # Initialize LIS values for all indexes # Compute optimized LIS values in a bottom up manner for i in range(1, n): for j in range(0, i): if heights[i] > heights[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return maximum value in lis[] return max(lis)"},{"question":"You are given a 2-dimensional grid of size `n x n` filled with positive integers. Your task is to find the smallest possible cost to move from the top-left cell (1, 1) to the bottom-right cell (n, n) of the grid, where the cost is defined as the sum of all the integers you have to pass through, including the starting and ending cells. You may move only right or down at each step. Write a function to compute the minimum cost. Input - The first line contains an integer `n` (1 ≤ n ≤ 100) – the size of the grid. - The next `n` lines each contain `n` space-separated positive integers, representing the grid. Output Output a single integer – the minimum cost to move from the top-left to the bottom-right cell. Example Input ``` 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 21 ``` Explanation One possible minimal-cost path is 1 → 2 → 3 → 6 → 9, and its cost is 1 + 2 + 3 + 6 + 9 = 21.","solution":"def min_cost(n, grid): # Create a 2D list to store the minimum cost at each cell dp = [[0]*n for _ in range(n)] # Initialize the top-left cell dp[0][0] = grid[0][0] # Initialize first row\'s cumulative cost for i in range(1, n): dp[0][i] = dp[0][i-1] + grid[0][i] # Initialize first column\'s cumulative cost for j in range(1, n): dp[j][0] = dp[j-1][0] + grid[j][0] # Fill the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The minimum cost to reach the bottom-right cell return dp[n-1][n-1] # Example Usage # n = 3 # grid = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # print(min_cost(n, grid)) # Output: 21"},{"question":"Password Strength Validator Alice is building a system to validate the strength of passwords. The system should analyze passwords based on certain rules and categorize them as \\"Strong\\" or \\"Weak\\". A password is considered \\"Strong\\" if it meets all the following criteria: 1. It contains at least one uppercase letter (A-Z). 2. It contains at least one lowercase letter (a-z). 3. It contains at least one digit (0-9). 4. It contains at least one special character from the set {!@#%^&*()}. 5. It has a length of at least 8 characters. Any password that does not meet all the above criteria is considered \\"Weak\\". Given a list of passwords, write a program that determines the strength of each password. Input The input consists of a single test case of the following format: n password_1 password_2 : password_n The integer n in the first line gives the number of passwords (password_1 through password_n) to be analyzed. Here, n satisfies 1 leq n leq 1000. The following n lines are the passwords, password_1 through password_n, one in each line. Each password consists of a minimum of 1 and a maximum of 100 characters, including uppercase letters, lowercase letters, digits, and special characters. Output For each password, output one line with either \\"Strong\\" if the password meets all the strength criteria, or \\"Weak\\" if it does not. Sample Input 1 5 Password123! weakpass Str0ngPaword noSpecialChar1 A@1bC Sample Output 1 Strong Weak Strong Weak Weak Sample Input 2 3 Hello1! Super@Secure2 n0SpecialCharacters3 Sample Output 2 Weak Strong Weak Explanation: In the first sample: - \\"Password123!\\" is strong as it meets all the criteria. - \\"weakpass\\" is weak as it lacks uppercase letters, digits, and special characters. - \\"Str0ngPaword\\" is strong as it meets all the criteria. - \\"noSpecialChar1\\" is weak as it lacks special characters. - \\"A@1bC\\" is weak as it is shorter than 8 characters. In the second sample: - \\"Hello1!\\" is weak as it lacks special characters and is shorter than 8 characters. - \\"Super@Secure2\\" is strong as it meets all the criteria. - \\"n0SpecialCharacters3\\" is weak as it lacks special characters.","solution":"def password_strength(passwords): Function to determine the strength of each password in a list. import re results = [] for password in passwords: if (len(password) >= 8 and re.search(r\'[A-Z]\', password) and re.search(r\'[a-z]\', password) and re.search(r\'[0-9]\', password) and re.search(r\'[!@#%^&*()]\', password)): results.append(\\"Strong\\") else: results.append(\\"Weak\\") return results # Example usage if __name__ == \\"__main__\\": passwords = [ \\"Password123!\\", \\"weakpass\\", \\"Str0ngPaword\\", \\"noSpecialChar1\\", \\"A@1bC\\" ] print(password_strength(passwords))"},{"question":"You are a doctor in a hospital where you need to manage the administration of vaccines to prevent an outbreak. You have n patients, and you need to administer m doses of the vaccine in a way that minimizes the risk of spreading the disease. Each patient can receive only one dose of the vaccine at a time. Each vaccination is assigned a risk factor r_i, which represents the risk of spreading the disease if patient i is vaccinated at that moment. The risk factors are influenced by factors such as the state of the outbreak, patient susceptibility, and other medical conditions. Your task is to determine the minimum total risk factor for administering exactly m doses of the vaccine. Input The first line contains two space-separated integers n (1 ≤ n ≤ 500) and m (1 ≤ m ≤ n). The second line contains n space-separated integers r_1, r_2, ..., r_n (1 ≤ r_i ≤ 1000). Output Output a single integer representing the minimum total risk factor for administering exactly m doses of the vaccine. Examples Input 5 3 3 1 2 5 4 Output 6 Input 6 2 6 9 2 4 8 7 Output 6 Note In the first sample input, the minimum total risk factor is achieved by administering the vaccine to patients with risk factors 1, 2, and 3, resulting in a total risk factor of 1 + 2 + 3 = 6. In the second sample input, the minimum total risk factor is achieved by administering the vaccine to patients with risk factors 2 and 4, resulting in a total risk factor of 2 + 4 = 6.","solution":"def minimize_total_risk(n, m, risk_factors): Returns the minimum total risk factor for administering exactly m doses. :param n: Number of patients :param m: Number of doses of the vaccine :param risk_factors: List of risk factors for each patient :return: Minimum total risk factor # Sort the risk factors in ascending order to minimize the total risk sorted_risks = sorted(risk_factors) # Sum the first m elements (smallest risks) return sum(sorted_risks[:m])"},{"question":"A robotics competition is in progress, where each team builds robots equipped with sensors. Each team needs to program their robots to avoid obstacles by turning at specific angles. Given a list of angles, your task is to write a function that calculates the total number of distinct angles the robots can turn. A distinct angle in this context is an angle that hasn\'t been mentioned before, either in the same direction or its opposite. For instance, if the angles 30 and -30 are given, only one unique angle is counted. ---Input--- The first line of the input contains an integer n (1 ≤ n ≤ 1 000 000) — the number of angles provided. The second line contains n integers representing the angles (−180 ≤ angle ≤ 180). ---Output--- Print a single integer, denoting the total number of distinct angles the robots can turn. ---Examples--- Input 5 -30 30 60 -60 15 Output 3 Input 4 45 -45 90 -90 Output 2 Input 6 0 0 -180 180 90 -90 Output 3 ---Note--- In the first case, 30 and -30 are considered the same angle, as well as 60 and -60. The remaining angle is 15. Therefore, there are 3 unique angles: 30, 60, and 15. In the second case, 45 and -45 are considered the same angle, as well as 90 and -90. Therefore, there are only 2 unique angles: 45 and 90. In the third case, 0 and 180 (or -180) can be directly translated to unique distinct angles by considering absolute values, hence 3 unique angles: 0, 90, and 180.","solution":"def distinct_angles(n, angles): Given the number of angles and the list of angles, return the total number of distinct angles. Angles that are opposite are considered the same unique angle. Args: n : int : number of angles angles : list of int : the angles provided Returns: int : the total number of distinct angles distinct_set = set() for angle in angles: distinct_set.add(abs(angle)) return len(distinct_set)"},{"question":"Task Given a list of dictionaries, where each dictionary contains three keys: \\"name\\", \\"age\\", and \\"score\\", write a function that returns the name of the person with the highest score. If there is a tie (multiple people with the highest score), return the name of the youngest person among them. You can assume that the age and score values are always positive integers. Examples ```python [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"score\\": 85}, {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"score\\": 90}, {\\"name\\": \\"Charlie\\", \\"age\\": 35, \\"score\\": 90} ] --> \\"Bob\\" [ {\\"name\\": \\"Dave\\", \\"age\\": 20, \\"score\\": 75}, {\\"name\\": \\"Eve\\", \\"age\\": 22, \\"score\\": 88}, {\\"name\\": \\"Frank\\", \\"age\\": 23, \\"score\\": 88}, {\\"name\\": \\"Grace\\", \\"age\\": 21, \\"score\\": 88} ] --> \\"Grace\\" [ {\\"name\\": \\"Hector\\", \\"age\\": 40, \\"score\\": 100} ] --> \\"Hector\\" ```","solution":"def best_candidate(data): Returns the name of the person with the highest score. If there is a tie, returns the name of the youngest person among them. :param data: List of dictionaries with \\"name\\", \\"age\\", and \\"score\\" keys :type data: list :return: Name of the person with the highest score and youngest age in case of a tie :rtype: str if not data: return None # Find the highest score max_score = max(item[\'score\'] for item in data) # Filter candidates who have the highest score candidates = [item for item in data if item[\'score\'] == max_score] # Find the youngest among the candidates with highest score youngest = min(candidates, key=lambda x: x[\'age\']) return youngest[\'name\']"},{"question":"Given an array of positive integers, rearrange the elements to form the maximum possible integer and return that integer. Example 1: Input: arr = [3, 30, 34, 5, 9] Output: 9534330 Explanation: By arranging elements in descending order, you will form 9534330 which is the largest possible integer. Example 2: Input: arr = [1, 10, 2] Output: 2110 Explanation: By arranging elements, you will form 2110 which is the largest possible integer. Your Task: You don\'t need to read or print anything. Your task is to complete the function maxInteger() which takes an array of positive integers as input and returns the maximum possible integer that can be formed by rearranging the elements. Expected Time Complexity: O(NlogN) Expected Space Complexity: O(1) Constraints: 1 <= N <= 10^5 1 <= arr[i] <= 10^4","solution":"from functools import cmp_to_key def compare(x, y): Compare two elements by their possible concatenations in both orders. if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 def maxInteger(arr): Given an array of positive integers, rearrange the elements to form the maximum possible integer and return that integer as a string (since it could be very large). # Convert all integers to string to facilitate custom comparison arr = list(map(str, arr)) # Sort using custom comparator in descending order arr.sort(key=cmp_to_key(compare)) # Join sorted array to form the greatest number result = \'\'.join(arr) # Convert result to integer to remove leading zeros and back to string return str(int(result))"},{"question":"**Problem Description** A *perfect number* is a positive integer that is equal to the sum of its proper divisors, excluding the number itself. For example, 28 is a perfect number because its proper divisors are 1, 2, 4, 7, and 14, and their sum is 28. Similarly, 6 is a perfect number because 1, 2, and 3 are its proper divisors, and their sum is 6. Given a positive integer `n`, write a function `is_perfect_number(n)` that returns a boolean indicating whether `n` is a perfect number or not. **Constraints** - `1 <= n <= 10**6` **Example** ```python is_perfect_number(6) == True is_perfect_number(28) == True is_perfect_number(12) == False is_perfect_number(1) == False ``` **Note** - A proper divisor of a number `n` is any divisor less than `n`. - The input will always be a valid positive integer within the constraints.","solution":"def is_perfect_number(n): Determines if a number n is a perfect number. if n < 2: return False sum_divisors = 1 for i in range(2, int(n**0.5) + 1): if n % i == 0: sum_divisors += i if i != n // i: sum_divisors += n // i return sum_divisors == n"},{"question":"You are given a n times m grid where each cell contains a lowercase English letter. The grid contains exactly one connected component of \'X\'s (connected orthogonally), surrounded by cells containing \'.\' (dots). A connected component of \'X\'s is defined as a region where every cell contains the letter \'X\' and each \'X\' is connected directly to at least one other \'X\' orthogonally (i.e., not diagonally). Your task is to determine whether the connected component forms a rectangular shape. -----Input----- The first line contains an integer t (1 leq t leq 100) denoting the number of test cases. Each of the next t test cases starts with two integers n and m (1 leq n, m leq 50) denoting the number of rows and columns in the grid respectively. This is followed by n lines, each containing m characters, each of which is either \'.\' or \'X\'. It is guaranteed that there is exactly one connected component of \'X\'s in the grid. -----Output----- For each test case, print \\"YES\\" if the connected component of \'X\'s forms a rectangle. Otherwise, print \\"NO\\". -----Example----- Input 2 4 5 ..... ..XX. ..XX. ..... 3 4 ..X. ..X. ...X Output YES NO -----Note----- Consider the first test case: The grid is: ..... ..XX. ..XX. ..... The connected component of \'X\'s forms a 2 times 2 rectangle, so the answer is \\"YES\\". Consider the second test case: The grid is: ..X. ..X. ...X The connected component of \'X\'s does not form a rectangle, so the answer is \\"NO\\".","solution":"def is_rectangle(t, test_cases): For each test case, determine if the connected component of \'X\'s forms a rectangle. results = [] for i in range(t): n, m = test_cases[i][0] grid = test_cases[i][1] # Identifying bounds of \'X\' connected component top, bottom, left, right = n, 0, m, 0 for row in range(n): for col in range(m): if grid[row][col] == \'X\': top = min(top, row) bottom = max(bottom, row) left = min(left, col) right = max(right, col) # Checking if all cells within the bounds are \'X\' is_rectangular = True for row in range(top, bottom + 1): for col in range(left, right + 1): if grid[row][col] != \'X\': is_rectangular = False break if not is_rectangular: break if is_rectangular: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a grid of size `n x m` representing an ocean. The grid consists of 0s and 1s, where 0 represents water and 1 represents land. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. Write a function `num_islands(grid: List[List[int]]) -> int` to count the number of islands. For example, the given grid below has 2 islands: ``` 11110 11010 11000 00000 ``` In the above example, there are two islands represented by the sub-arrays of consecutive 1s. # Function Signature ```python def num_islands(grid: List[List[int]]) -> int: # Implementation here. ``` # Input - `grid: List[List[int]]`: A 2D list of integers representing the grid (1 ≤ n, m ≤ 300). # Output - `int`: The number of islands in the grid. # Example ```python print(num_islands([[1, 1, 1, 1, 0], [1, 1, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0]])) # Output: 1 print(num_islands([[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1]])) # Output: 3 ``` # Note To solve this problem, you can use Depth-First Search (DFS) or Breadth-First Search (BFS) to explore all connected components of 1s, and count how many such components you find.","solution":"from typing import List def num_islands(grid: List[List[int]]) -> int: if not grid: return 0 n = len(grid) m = len(grid[0]) visited = [[False] * m for _ in range(n)] def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 0 or visited[x][y]: return visited[x][y] = True dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) count = 0 for i in range(n): for j in range(m): if grid[i][j] == 1 and not visited[i][j]: count += 1 dfs(i, j) return count"},{"question":"You\'ve encountered a situation where you need to compare two lists of words to find if they are anagrams at the level of individual characters as well as the sums of their ASCII values. Specifically, two words are considered anagrams if they contain the same characters in any order. If the sum of the ASCII values of the characters in these two words are also equal, then the words are considered \'super anagrams\'. To solve this problem, you have been given two lists of words. Each word in the first list should be compared to every word in the second list to determine if there is at least one pair of words that are super anagrams. Write a function that will take two lists of words and determine if there exists at least one pair of super anagrams. Input The input will consist of two lists of words. The length of each list will be at most 1000, and each word will have a length between 1 and 100 characters. All words will be lowercase English words. Output Return \\"YES\\" (without quotes) if there exists at least one pair of super anagrams, or \\"NO\\" (without quotes) if no such pair exists. Examples Input [\\"listen\\", \\"apple\\", \\"silent\\"] [\\"enlist\\", \\"banana\\", \\"tinsel\\"] Output YES Input [\\"hello\\"] [\\"world\\"] Output NO Notes Ensure your solution is efficient enough to handle the maximum input size. While it is possible to directly compute the sums of ASCII values and check character counts, consider optimizing your approach by minimizing the number of unnecessary computations.","solution":"def is_super_anagram(word1, word2): Helper function to check if two words are super anagrams. if sorted(word1) == sorted(word2) and sum(ord(char) for char in word1) == sum(ord(char) for char in word2): return True return False def are_there_super_anagrams(list1, list2): Function to check if there exists at least one pair of super anagrams in two lists of words. list2_words_set = set(list2) for word1 in list1: for word2 in list2_words_set: if is_super_anagram(word1, word2): return \\"YES\\" return \\"NO\\""},{"question":"__Title__: Check If Brackets are Balanced __Objective:__ This question tests your understanding of stack data structures and string manipulation to check for balanced brackets in a given string. __Problem Description:__ Write a function that determines if the brackets in a given string are balanced. Balanced means that each opening bracket has a corresponding closing bracket in the correct order. **Input:** - A single string consisting of various characters including the following types of brackets: parentheses `()`, square brackets `[]`, and curly braces `{}`. - The string may also contain other characters which should be ignored. **Output:** - A string `\\"Balanced\\"` if the brackets are balanced. - A string `\\"Not Balanced\\"` if the brackets are not balanced. # Examples: ```python check_brackets(\\"a(b[c]d){e}f\\") # returns \\"Balanced\\" check_brackets(\\"a(b[c)d]{e}f\\") # returns \\"Not Balanced\\" check_brackets(\\"abc{def)ghi\\") # returns \\"Not Balanced\\" check_brackets(\\"[[{()}]]\\") # returns \\"Balanced\\" ``` **Constraints:** - The input string will have a maximum length of 1000 characters. # Function Signature: ```python def check_brackets(s: str) -> str: # Your code goes here ```","solution":"def check_brackets(s: str) -> str: Determines if the brackets in the string are balanced or not. Args: s (str): The input string containing various characters including brackets. Returns: str: \\"Balanced\\" if the brackets are balanced, otherwise \\"Not Balanced\\". stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return \\"Not Balanced\\" return \\"Balanced\\" if stack == [] else \\"Not Balanced\\""},{"question":"You are given two strings `s` and `t` where `s` has length `n` and `t` has length `m`. The goal is to determine if `t` can be formed by deleting some (possibly none) characters from `s` without changing the order of the remaining characters. Note that `s` and `t` consist of lowercase Latin letters. Write a program that checks if `t` is a subsequence of `s`. Input The input consists of two lines: - The first line contains the string `s` of length `n` (1 ≤ n ≤ 10^5). - The second line contains the string `t` of length `m` (1 ≤ m ≤ 10^5). Output Output \\"Yes\\" (without quotes) if `t` can be formed by deleting some (possibly none) characters from `s` without changing the order of the remaining characters. Otherwise, output \\"No\\" (without quotes). Examples Input abcde ace Output Yes Input abcde aec Output No Note In the first example, `t = \\"ace\\"` can be formed by deleting characters \'b\' and \'d\' from `s`. In the second example, `t = \\"aec\\"` changes the order of characters, which is not allowed. Therefore, the output is \\"No\\".","solution":"def is_subsequence(s, t): Checks if t is a subsequence of s. :param s: The original string. :param t: The target subsequence string. :return: \\"Yes\\" if t is a subsequence of s, otherwise \\"No\\". s_index, t_index = 0, 0 while s_index < len(s) and t_index < len(t): if s[s_index] == t[t_index]: t_index += 1 s_index += 1 return \\"Yes\\" if t_index == len(t) else \\"No\\""},{"question":"You are given two strings s1 and s2 of length n and m respectively, where (1 ≤ n, m ≤ 100). You can perform the following operation on string s1 any number of times: move the first character to the end of the string. Your task is to determine whether string s2 can be represented as a substring of some rotation of string s1. Input - The first line contains an integer n (1 ≤ n ≤ 100) – the length of string s1. - The second line contains the string s1 consisting of lowercase English letters. - The third line contains an integer m (1 ≤ m ≤ 100) – the length of string s2. - The fourth line contains the string s2 consisting of lowercase English letters. Output - Output \\"YES\\" if s2 can be represented as a substring of some rotation of s1, otherwise output \\"NO\\". Example Input 7 abcdefg 3 cde Output YES Note In the example, after rotating s1 = \\"abcdefg\\" two positions to the left, we get \\"cdefgab\\". Here, s2 = \\"cde\\" is a substring of \\"cdefgab\\". Therefore, the output is \\"YES\\".","solution":"def can_be_substring_of_rotation(n, s1, m, s2): Checks if s2 can be a substring of some rotation of s1. Parameters: n (int): length of s1 s1 (str): string s1 m (int): length of s2 s2 (str): string s2 Returns: str: \\"YES\\" if s2 can be a substring of some rotation of s1, otherwise \\"NO\\" doubled_s1 = s1 + s1 # By doubling s1, all rotations of s1 are included as substrings. if s2 in doubled_s1: return \\"YES\\" else: return \\"NO\\""},{"question":"A busy transport network needs to establish the shortest possible routes between multiple cities to minimize travel time. Create a program that calculates the shortest travel time between pairs of cities based on provided travel times between cities. Input A sequence of multiple datasets is given as input. Each dataset consists of: 1. An integer n (1 ≤ n ≤ 100), the number of cities. 2. An n x n matrix of integers, where the element at row i and column j represents the travel time from city i to city j (0 ≤ travel time ≤ 1000). A value of -1 indicates that there is no direct route between the two cities. 3. An integer q (1 ≤ q ≤ 10000), the number of queries. 4. q pairs of integers, representing the pairs of cities (start and end) between which the shortest travel time needs to be determined. The number of datasets does not exceed 50. Output For each query, output the shortest travel time between the specified pair of cities on a new line. If there is no possible route, output -1. Example Input 3 0 3 -1 3 0 5 -1 5 0 2 0 2 2 0 4 0 5 10 -1 5 0 3 -1 10 3 0 1 -1 -1 1 0 2 0 3 1 2 0 Output 8 8 9 3","solution":"def floyd_warshall(n, matrix): Applies the Floyd-Warshall algorithm to find the shortest paths between all pairs of cities. dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): for j in range(n): if matrix[i][j] != -1: dist[i][j] = matrix[i][j] if i == j: # Distance to self is 0 dist[i][j] = 0 for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def process_datasets(datasets): Processes multiple datasets and computes the shortest travel times for the given queries. results = [] for data in datasets: n, matrix, queries = data dist = floyd_warshall(n, matrix) for start, end in queries: if dist[start][end] == float(\'inf\'): results.append(-1) else: results.append(dist[start][end]) return results"},{"question":"The Echo Union is hosting a contest where participants are only allowed to shout specific words. Each valid word can only be constructed using a set of predefined characters. The contest lasts for n minutes, and during each minute, participants can shout as many valid words as they want. After the contest ends, organizers want to analyze the shouted words and determine which minute had the highest number of unique valid words. You need to help the organizers create a program to compute the highest number of unique valid words shouted in any given minute during the contest. Characters can be repeated in words, and words are considered unique based on their full sequence of characters. The total number of characters in any valid word is limited to k, and the specific set of characters allowed is denoted by \'chars\'. Input The first line of input contains three integers n, m, and k (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 26, 1 ≤ k ≤ 10^3), the number of minutes the contest lasts, the number of unique characters, and the maximum length of a valid word, respectively. The second line contains a string of length m consisting of distinct lowercase English letters representing the allowed characters. The next n lines each contain a single integer u_i (1 ≤ u_i ≤ k), indicating the number of words shouted in the i-th minute. Output You should print a single integer, the maximum number of unique valid words shouted in any single minute during the contest. Examples Input 5 3 4 abc 3 2 4 1 3 Output 81 Input 4 4 3 abcd 2 3 1 4 Output 64 Note In the first example, n=5, m=3, and k=4. The allowed characters are \'a\', \'b\', and \'c\'. In the third minute, the maximum number of unique valid words shouted is 3^4 = 81 since \'abc\' of length 4 allows 81 unique combinations. In the second example, on the fourth minute, the maximum number of unique valid words shouted is 4^3 = 64 since \'abcd\' allows 64 unique combinations when considering word lengths up to k.","solution":"def max_unique_valid_words(n, m, k, chars, shout_counts): This function calculates the maximum number of unique valid words shouted in any single minute during the contest. Parameters: n (int): Number of minutes the contest lasts. m (int): Number of unique characters. k (int): Maximum length of a valid word. chars (str): String of length m consisting of distinct lowercase English letters. shout_counts (list of int): List of integers where each integer represents the number of words shouted in the i-th minute. Returns: int: Maximum number of unique valid words shouted in any single minute. max_words_in_minute = max(shout_counts) # Each unique word can be up to length k, using m different characters max_unique_valid_words = m ** k return max_unique_valid_words # Example usage: n, m, k = 4, 4, 3 chars = \'abcd\' shout_counts = [2, 3, 1, 4] print(max_unique_valid_words(n, m, k, chars, shout_counts)) # Output should be 64"},{"question":"Alyssa has an array of integers, and she wants to perform several operations on it. She is particularly interested in the \\"prefix sum\\" operation. The prefix sum of an array is a new array where each element at index (i) is the sum of all elements from the original array from index (0) to (i). However, Alyssa\'s array can be very large, which makes it inefficient to always calculate the prefix sum from scratch. Therefore, she wants to calculate the prefix sums efficiently for multiple queries. Task Write a program to compute the prefix sums from a given array and answer multiple queries. Each query will ask for the prefix sum up to a certain index. Input Format - The first line contains an integer (N) (1 ≤ (N) ≤ (10^5)), the number of elements in the array. - The second line contains (N) integers (a_1, a_2, ldots, a_N) (-10^9 ≤ (a_i) ≤ 10^9), the elements of the array. - The third line contains an integer (Q) (1 ≤ (Q) ≤ (10^5)), the number of queries. - The next (Q) lines each contain one integer (q_j) (0 ≤ (q_j) < (N)), indicating the index up to which the prefix sum is to be calculated. Output Format For each query, output the prefix sum up to the index (q_j). Example # Input ``` 5 1 2 3 4 5 3 0 2 4 ``` # Output ``` 1 6 15 ``` Explanation In this example, the prefix sums are calculated as follows: - Prefix sum up to index 0: 1 - Prefix sum up to index 2: 1 + 2 + 3 = 6 - Prefix sum up to index 4: 1 + 2 + 3 + 4 + 5 = 15","solution":"def calculate_prefix_sums(arr, queries): prefix_sums = [] current_sum = 0 for num in arr: current_sum += num prefix_sums.append(current_sum) result = [prefix_sums[q] for q in queries] return result # Helper function to process input and call the main function def process_input_for_prefix_sums(N, array, Q, queries): return calculate_prefix_sums(array, queries)"},{"question":"You are given a singly linked list and an integer K. Your task is to delete the K-th node from the end of the linked list. You should return the modified linked list\'s head. If the K-th node from the end does not exist, return the original linked list. Note: - You are only allowed to traverse the linked list once. - You cannot alter the values in the nodes, only the nodes themselves may be changed. Class Definitions (for reference): ```python class ListNode: def __init__(self, x): self.val = x self.next = None ``` Example 1: Input: head: 1 -> 2 -> 3 -> 4 -> 5, K = 2 Output: 1 -> 2 -> 3 -> 5 Explanation: The 2nd node from the end is 4, so we remove it, resulting in the list 1 -> 2 -> 3 -> 5. Example 2: Input: head: 1 -> 2 -> 3, K = 4 Output: 1 -> 2 -> 3 Explanation: There is no 4th node from the end, so the list remains unchanged. Your Task: Complete the provided function removeKthFromEnd that takes head and k as parameters and returns the head of the modified linked list. The printing of the list is done automatically by the driver code. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - The number of nodes in the linked list is in the range [1, 1000]. - 1 <= K <= 1000","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def removeKthFromEnd(head, k): Removes the k-th node from the end of the list and returns the head of the modified linked list. If the k-th node from the end does not exist, returns the original linked list. :param head: ListNode, the head of the linked list :param k: int, the position from the end to remove :return: ListNode, the head of the modified linked list dummy = ListNode(0) dummy.next = head first = dummy second = dummy # Move the first pointer so that the gap between first and second is k nodes apart for _ in range(k + 1): if not first: # If k is larger than the number of nodes return head first = first.next # Move both pointers until first reaches the end while first: first = first.next second = second.next # Second will be pointing to the node before the k-th from the end second.next = second.next.next return dummy.next"},{"question":"Write a function to implement the Josephus problem, a well-known theoretical problem related to a certain elimination game. The problem is described as follows: There are n people standing in a circle waiting to be executed. Counting begins at a specified person and proceeds around the circle in a fixed direction. The counting-out begins from the first person and proceeds around the circle in a fixed direction. At each step, a certain number of people are skipped and the next person is executed. The procedure is repeated with the remaining people, starting from the next person, until only one person remains, who is given freedom. Given the total number of people `n` and the step size `k`, implement a function to determine the safe position (0-indexed). # Signature ```python def josephus(n: int, k: int) -> int: ``` # Input - An integer `n` (1 <= n <= 1000): the number of people standing in the circle. - An integer `k` (1 <= k <= 1000): the count for the elimination step. # Output - An integer representing the safe position (0-indexed). # Example ```python assert josephus(7, 3) == 3 # Explanation: The execution sequence is: 2, 5, 1, 6, 4, 0, 3. Thus, the safe position is 3. assert josephus(10, 2) == 4 # Explanation: The execution sequence is: 1, 3, 5, 7, 9, 2, 6, 0, 8, 4. Thus, the safe position is 4. ``` # Guidelines - Make sure to test the provided function using the example assertions. - Handle edge cases where `n` or `k` is 1 appropriately.","solution":"def josephus(n: int, k: int) -> int: Determines the safe position (0-indexed) in the Josephus problem. :param n: Total number of people :param k: Step size for elimination :return: Safe position (0-indexed) if n == 1: return 0 # Initialize the position of the last survivor safe_position = 0 # Iterate through each step to find the safe position for i in range(2, n + 1): safe_position = (safe_position + k) % i return safe_position"},{"question":"A virtual marathon event wants to categorize participants based on their finishing times and whether they completed the full marathon or the half marathon. Write a program that categorizes each runner into one of three categories: 1. Category A: If the runner has completed the full marathon in less than 4 hours. 2. Category B: If the runner has completed the full marathon in 4 hours or more, or completed the half marathon in less than 2 hours. 3. Category C: If the runner has completed the half marathon in 2 hours or more. The program should take three inputs: 1. An integer `D` indicating the type of marathon the runner participated in (1 for full marathon and 0 for half marathon). 2. Two integers `H` and `M` representing the finishing time in hours and minutes, respectively. ------ Input Format ------ - The input consists of a single line with three space-separated integers D, H, and M. ------ Output Format ------ - Print one of the following strings as per the problem statement. - Category A - Category B - Category C ------ Constraints ------ D is either 0 or 1. 0 leq H < 24 0 leq M < 60 ----- Sample Input 1 ------ 1 3 45 ----- Sample Output 1 ------ Category A ----- explanation 1 ------ The runner has completed the full marathon in less than 4 hours, so the program must output \\"Category A\\". ----- Sample Input 2 ------ 0 2 30 ----- Sample Output 2 ------ Category C ----- explanation 2 ------ The runner has completed the half marathon in 2 hours and 30 minutes, so the program must output \\"Category C\\". ----- Sample Input 3 ------ 1 4 15 ----- Sample Output 3 ------ Category B ----- explanation 3 ------ The runner has completed the full marathon in 4 hours and 15 minutes, so the program must output \\"Category B\\".","solution":"def categorize_runner(D, H, M): Categorizes the runner based on the marathon type, finishing hours, and minutes. Parameters: D (int): Marathon type (1 for full marathon, 0 for half marathon) H (int): Finishing time in hours M (int): Finishing time in minutes Returns: str: Category of the runner if D == 1: if H < 4: return \\"Category A\\" else: return \\"Category B\\" else: if H < 2 or (H == 2 and M == 0): return \\"Category B\\" else: return \\"Category C\\""},{"question":"Given a list of integers, write a function that rearranges the list so that all the even numbers appear before all the odd numbers. The relative order of the even and odd numbers should be preserved. Return the modified list. Here are some examples: ```python rearrange_list([1, 2, 3, 4, 5]) == [2, 4, 1, 3, 5] rearrange_list([10, 1, 9, 4, 7, 3, 2]) == [10, 4, 2, 1, 9, 7, 3] rearrange_list([3, 1, 4, 6, 8]) == [4, 6, 8, 3, 1] rearrange_list([7, 5, 3, 2, 8]) == [2, 8, 7, 5, 3] rearrange_list([]) == [] ``` Your code should handle both negative and positive integers and maintain the relative order of the even and odd numbers. ```python rearrange_list([3, -2, -4, 5, 0]) == [-2, -4, 0, 3, 5] rearrange_list([-1, -3, -5, 2, -8]) == [2, -8, -1, -3, -5] ``` Make sure your solution is efficient and works for lists of various lengths.","solution":"def rearrange_list(nums): Rearranges the list so that all the even numbers appear before all the odd numbers. The relative order of the even and odd numbers is preserved. :param nums: List of integers :return: Modified list with evens before odds if not nums: # Check if the list is empty return [] evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] return evens + odds"},{"question":"Takahashi has a garden with M different types of flowers. He wants to create a flower bed by arranging exactly K flowers in a row. Each flower in the row must be one of the M types. -----Constraints----- - 1 leq M leq 10 - 1 leq K leq 7 - M and K are integers. -----Input----- Input is given from Standard Input in the following format: M K -----Output----- Print the number of possible arrangements of the K flowers in a row. -----Sample Input----- 3 2 -----Sample Output----- 9 There are nine possible arrangements: 11, 12, 13, 21, 22, 23, 31, 32, and 33.","solution":"def flower_arrangements(M, K): Returns the number of possible arrangements of the K flowers in a row from M different types. Args: M (int): Number of different types of flowers. K (int): Number of flowers in the row. Returns: int: Possible arrangements of the K flowers in a row. return M ** K"},{"question":"You are tasked with developing a basic text analyzer for a new simplified markup language (codenamed \\"SimpleML\\"). Write a program to read a string in this markup language and output the count of different types of elements. Input A single string representing the content in SimpleML. Output Three integers separated by spaces, representing the counts of headers, paragraphs, and links in the input string, respectively. Notes: - A header in SimpleML is defined as a line that starts with the \'#\' character. - A paragraph is a continuous block of text that doesn\'t start with \'#\' or contain any link tags. - A link is defined as any text enclosed in \'[ ]\' parentheses followed by a balanced pair of \'( )\' parentheses, for example: [example](http://example.com). - Assume there are no nested elements. Examples Input #Header 1 This is a paragraph. #Header 2 Another paragraph with a [link](http://example.com) in it. Output 2 2 1","solution":"import re def text_analyzer(input_str): Analyzes a string in SimpleML and counts the number of headers, paragraphs, and links. Parameters: input_str (str): The input string in SimpleML. Returns: tuple: A tuple containing three integer values - number of headers, number of paragraphs, and number of links. headers_count = 0 paragraphs_count = 0 links_count = 0 # Split input string by newlines lines = input_str.split(\'n\') # State variables for paragraph detection in_paragraph = False for line in lines: line = line.strip() # Check for header if line.startswith(\'#\'): headers_count += 1 in_paragraph = False else: # Check for links links_count += len(re.findall(r\'[.*?](.*?)\', line)) # Identify paragraph blocks if line: if not in_paragraph: paragraphs_count += 1 in_paragraph = True else: in_paragraph = False return headers_count, paragraphs_count, links_count"},{"question":"A matrix m of dimension n x n has elements each taking one of the values from set {1, 2, ..., k}. The matrix is said to be valid if every row and every column contains exactly k different elements, with each element from the set appearing exactly once per row and per column. Your task is to determine if a given n x n matrix m is valid or not. If it is valid, output \\"YES\\". Otherwise, output \\"NO\\". Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 50). The next n lines each contain n integers representing the matrix m (1 ≤ m[i][j] ≤ k). Output Output \\"YES\\" if the matrix is valid, otherwise output \\"NO\\". Example Input 4 4 1 2 3 4 2 3 4 1 3 4 1 2 4 1 2 3 Output YES Input 3 3 1 2 3 2 3 1 3 2 1 Output NO Note In the first example, each row and each column contain the numbers 1, 2, 3, and 4 exactly once, so the matrix is valid. In the second example, the second row\'s numbers are not unique, as number 2 appears twice. Therefore, the matrix is not valid.","solution":"def is_valid_matrix(n, k, matrix): # Check each row for validity for row in matrix: if sorted(row) != list(range(1, k + 1)): return \\"NO\\" # Check each column for validity for col in range(n): column_elements = [matrix[row][col] for row in range(n)] if sorted(column_elements) != list(range(1, k + 1)): return \\"NO\\" return \\"YES\\""},{"question":"Given a positive integer K, generate and return the K-th row of Pascal\'s Triangle. Pascal\'s Triangle is defined as follows: - The first row is [1]. - Each successive row is formed by adding the number above and to the left with the number above and to the right, treating empty elements as 0. Example 1: Input: K = 3 Output: [1, 2, 1] Explanation: The first three rows of Pascal\'s Triangle are: [1] [1, 1] [1, 2, 1] Example 2: Input: K = 5 Output: [1, 4, 6, 4, 1] Explanation: The first five rows of Pascal\'s Triangle are: [1] [1, 1] [1, 2, 1] [1, 3, 3, 1] [1, 4, 6, 4, 1] Your Task: You don\'t need to read input or print anything. Your task is to complete the function getPascalRow() which takes an integer K as input and returns a list containing the K-th row of Pascal\'s Triangle. Expected Time Complexity: O(K^2) Expected Auxiliary Space: O(K) Constraints: 1 <= K <= 30","solution":"def getPascalRow(K): Returns the K-th row (0-indexed) of Pascal\'s Triangle. if K == 0: return [1] row = [1] for i in range(1, K+1): row.append(row[-1] * (K - i + 1) // i) return row"},{"question":"You are given a binary string, which is a string composed of \'0\'s and \'1\'s only. A \\"swap operation\\" involves picking any contiguous substring of the binary string and swapping all its \'0\'s to \'1\'s and all its \'1\'s to \'0\'s. Your task is to find the minimum number of swap operations required to make all the characters in the binary string the same. -----Input----- The first line contains a binary string s of length n (1 leq n leq 200,000). -----Output----- Output a single integer denoting the minimum number of swap operations needed. -----Examples----- Input 0001100 Output 1 Input 111110 Output 1 Input 1010101010 Output 1 -----Note----- In the first sample, swapping the substring \\"011\\" results in the string \\"0000000\\", which requires just 1 operation. In the second sample, swapping the substring \\"0\\" results in the string \\"111111\\", which requires just 1 operation. In the third sample, swapping any substring containing alternating \'1\'s and \'0\'s (for example, the entire string \\"1010101010\\") results in a string with only \'0\'s or only \'1\'s, requiring just 1 operation.","solution":"def min_swap_operations(binary_string): Returns the minimum number of swap operations needed to make all characters in the binary string the same. ones = binary_string.count(\'1\') zeros = len(binary_string) - ones if ones == 0 or zeros == 0: return 0 return 1"},{"question":"You are given a list of integers. Write a function, find_majority_element, that identifies and returns the majority element. The majority element is the one that appears more than half of the times. If no such element exists, return -1. Example: ```python find_majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4]) # Returns 4 find_majority_element([3, 3, 4, 2, 4, 4, 2, 4]) # Returns -1 ```","solution":"def find_majority_element(arr): Identifies and returns the majority element from the list. The majority element is the one that appears more than half of the times. If no such element exists, returns -1. element_count = {} half_length = len(arr) // 2 for element in arr: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 if element_count[element] > half_length: return element return -1"},{"question":"Robin is a food blogger and he always takes note of how satisfied he is with the dishes he tries. Recently, he decided to calculate a satisfaction score for each meal. The satisfaction score is the number of distinct prime factors of the meal\'s calorie count. Robin has a list of calorie counts for different meals, and he wants to find out the satisfaction score for each of these meals. Write a program to help Robin compute the satisfaction scores. Input The first line contains a single integer n (1 ≤ n ≤ 1000), the number of meals. The second line contains n integers ci (1 ≤ ci ≤ 106) — the calorie counts of the meals. Output For each calorie count, output its satisfaction score on a new line. Example Input 4 10 15 21 23 Output 2 2 2 1 Note For the first meal with a calorie count of 10, its prime factors are 2 and 5, so the satisfaction score is 2. For the second meal with a calorie count of 15, its prime factors are 3 and 5, so the satisfaction score is 2. For the third meal with a calorie count of 21, its prime factors are 3 and 7, so the satisfaction score is 2. For the fourth meal with a calorie count of 23, it is a prime number itself, so the satisfaction score is 1.","solution":"def prime_factors_count(n): Returns the number of distinct prime factors of n. distinct_primes = set() factor = 2 while n % factor == 0: distinct_primes.add(factor) n //= factor factor = 3 while factor * factor <= n: while n % factor == 0: distinct_primes.add(factor) n //= factor factor += 2 if n > 1: distinct_primes.add(n) return len(distinct_primes) def satisfaction_scores(n, calorie_counts): Returns a list of satisfaction scores for each calorie count in calorie_counts. return [prime_factors_count(calories) for calories in calorie_counts] # Example usage: # n = 4 # calorie_counts = [10, 15, 21, 23] # print(satisfaction_scores(n, calorie_counts)) # Output: [2, 2, 2, 1]"},{"question":"You are working on developing a spell checking application. Your task is to determine if each word in a document is spelled correctly based on a given dictionary. The dictionary contains a list of correctly spelled words. Additionally, you are required to suggest the closest possible word from the dictionary for the misspelled words. The closest word is the one with the smallest Levenshtein distance to the misspelled word. If multiple words have the same minimum distance, select the lexicographically smallest one. Levenshtein distance is defined as the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one word into another. # Input The input is formatted as follows: - An integer `N` that represents the number of entries in the dictionary (1 ≤ N ≤ 1000). - `N` lines follow, each containing one word consisting of lowercase alphabetic characters only, which represents an entry in the dictionary. - An integer `M` that represents the number of words in the document to be checked and corrected (1 ≤ M ≤ 1000). - `M` lines follow, each containing one word consisting of lowercase alphabetic characters only, which needs to be checked against the dictionary. # Output For each word in the document, output the word itself if it is spelled correctly. If it is misspelled, output the closest word from the dictionary that has the minimum Levenshtein distance. If there are multiple closest words, choose the lexicographically smallest one. # Example **Input:** ``` 5 apple banana cherry date elderberry 3 appl banan elebrberry ``` **Output:** ``` apple banana elderberry ``` # Explanation: - The word \\"appl\\" is closest to \\"apple\\" with a Levenshtein distance of 1 (one insertion of \'e\'). - The word \\"banan\\" is closest to \\"banana\\" with a Levenshtein distance of 1 (one insertion of \'a\'). - The word \\"elebrberry\\" is closest to \\"elderberry\\" with a Levenshtein distance of 1 (one substitution of \'d\' with \'l\'). When implementing the solution, you need to compute the Levenshtein distance between each pair of dictionary words and document words, and then decide the output based on the rules given. Use dynamic programming or other efficient techniques to ensure the solution runs within acceptable time limits for the input constraints.","solution":"def levenshtein_distance(word1, word2): Compute the Levenshtein distance between two words. len1, len2 = len(word1), len(word2) dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] for i in range(len1 + 1): dp[i][0] = i for j in range(len2 + 1): dp[0][j] = j for i in range(1, len1 + 1): for j in range(1, len2 + 1): cost = 0 if word1[i - 1] == word2[j - 1] else 1 dp[i][j] = min(dp[i - 1][j] + 1, # deletion dp[i][j - 1] + 1, # insertion dp[i - 1][j - 1] + cost) # substitution return dp[len1][len2] def spell_check(dictionary, document): Check each word in the document and suggest the closest word from the dictionary if it is misspelled. result = [] for word in document: if word in dictionary: result.append(word) else: min_distance = float(\'inf\') closest_word = None for dict_word in dictionary: distance = levenshtein_distance(word, dict_word) if (distance < min_distance) or (distance == min_distance and dict_word < closest_word): min_distance = distance closest_word = dict_word result.append(closest_word) return result"},{"question":"You are given a matrix of size n times m consisting of integers. Your goal is to find the sum of all unique elements in the matrix. An element is considered unique if it appears exactly once in the matrix. Write a program that reads the matrix from the input, determines all unique elements, and calculates their sum. -----Input----- The first line contains two integers n and m (1 leq n, m leq 100) — the number of rows and columns in the matrix, respectively. The next n lines contain m integers each — the elements of the matrix. -----Output----- Output a single integer — the sum of all unique elements in the matrix. If there are no unique elements, output 0. -----Example----- Input 3 3 1 2 3 2 1 4 5 6 1 Output 18 Explanation: In the given matrix, the elements 3, 4, 5, and 6 appear exactly once. Their sum is 3 + 4 + 5 + 6 = 18.","solution":"def sum_of_unique_elements(n, m, matrix): Returns the sum of all unique elements in the matrix. from collections import Counter # Flatten the matrix and create a counter for elements elements = [item for sublist in matrix for item in sublist] element_count = Counter(elements) # Sum elements that appear exactly once unique_sum = sum(num for num, count in element_count.items() if count == 1) return unique_sum"},{"question":"You are given a binary tree where each node contains a positive integer value. Your task is to find the maximum sum path from any node to any node in the tree. The path must contain at least one node and does not need to pass through the root. Constraints * The number of nodes in the tree is in the range [1, 1000]. * The value of each node is a positive integer in the range [1, 10^6]. Input Input is given from Standard Input in the following format: First line contains an integer, n, the number of nodes in the tree. Next n-1 lines each contain two integers u and v representing an edge between node u and node v. Next line contains n integers representing the values of the nodes in order. Output Print the maximum sum path from any node to any node in the tree. Examples Input 5 1 2 1 3 3 4 3 5 10 2 10 20 1 Output 42 Input 3 1 2 1 3 5 7 8 Output 20","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(n, edges, values): if n == 0: return None nodes = [TreeNode(value) for value in values] from collections import defaultdict children = defaultdict(list) for u, v in edges: children[u-1].append(v-1) children[v-1].append(u-1) def build(node_idx, parent_idx): node = nodes[node_idx] for child_idx in children[node_idx]: if child_idx != parent_idx: if not node.left: node.left = build(child_idx, node_idx) else: node.right = build(child_idx, node_idx) return node root = build(0, -1) return root def maximum_path_sum(root): global_max = float(\'-inf\') def helper(node): nonlocal global_max if not node: return 0 left_sum = helper(node.left) right_sum = helper(node.right) max_single_path = max(node.value, node.value + left_sum, node.value + right_sum) max_top_path = max(max_single_path, node.value + left_sum + right_sum) global_max = max(global_max, max_top_path) return max_single_path helper(root) return global_max def find_max_sum_path(n, edges, values): tree_root = build_tree(n, edges, values) return maximum_path_sum(tree_root)"},{"question":"Design a function that takes a string consisting of only lowercase alphabets and checks if it is divisible by two. If it is, convert the string into two equal-length substrings and determine if one is an anagram of the other. If they are, return \\"YES\\" and the common alphabet frequency of the two substrings. Otherwise, return \\"NO\\" and the alphabet frequency of the first substring. Note: Two strings are anagrams if the frequency of each character in one string is the same as in the other string. -----Input----- The first and only line of input contains a string of length at most 100000 composed of lowercase English letters. -----Output----- If the length of the string is odd or it cannot be divided into two anagrams, output \\"NO\\" followed by the alphabet frequency of the first half of the string in one line. If the string can be divided into two anagrams, output \\"YES\\" followed by the common alphabet frequency of the two substrings in one line. -----Examples----- Sample Input 1: abab Sample Output 1: YES a:1 b:1 Sample Input 2: abcd Sample Output 2: NO a:1 b:1","solution":"from collections import Counter def check_anagram_substrings(s): Determines if the string s can be divided into two equal-length anagram substrings. Returns \\"YES\\" and the frequency of the anagram if true, otherwise \\"NO\\" and the frequency of the first half of the string. n = len(s) if n % 2 != 0: # length of string is odd first_half_freq = Counter(s[:n//2]) return \\"NO\\", first_half_freq mid = n // 2 first_half, second_half = s[:mid], s[mid:] first_half_freq = Counter(first_half) second_half_freq = Counter(second_half) if first_half_freq == second_half_freq: return \\"YES\\", first_half_freq else: return \\"NO\\", first_half_freq"},{"question":"Emily is an amateur photographer and loves taking pictures of sunsets. She wants to add a new feature to her photography application that automatically detects the exact moment the sun disappears below the horizon, given a series of timestamps indicating when photos were taken during the sunset. The sun usually sets gradually, but at the exact timestamp when the sun disappears, the brightness in the photos noticeably decreases. Given a series of brightness levels captured at regular intervals, write a program to find the timestamp just before the sunset is complete. The timestamp when the sunset is considered complete is when the brightness level decreases by at least 20 units compared to the previous timestamp. Each photo\'s timestamp and brightness level are represented as a list of tuples, where the first element of the tuple is the timestamp in the format \\"HH:MM:SS\\" and the second element is the brightness level (an integer). The input list is sorted by timestamps in ascending order. -----Input----- The input consists of an integer n (2 ≤ n ≤ 100) representing the number of photos, followed by n lines. Each line contains a timestamp and a brightness level, space-separated. -----Output----- Print the timestamp just before the sunset is complete. If no such point exists, print \\"No sudden decrease\\". Your program should account for the possibility that the brightness level may never decrease suddenly. -----Example----- Input 6 18:00:00 85 18:01:00 84 18:02:00 70 18:03:00 50 18:04:00 35 18:05:00 34 Output 18:02:00 Input 5 17:50:00 95 17:51:00 92 17:52:00 90 17:53:00 89 17:54:00 88 Output No sudden decrease","solution":"def detect_sunset_completion(photo_data): Detects the timestamp just before the sunset is complete based on brightness levels. photo_data: List of tuples, where each tuple contains a timestamp \'HH:MM:SS\' and a brightness level. Return the timestamp just before the sunset is complete, or \'No sudden decrease\' if the brightness level doesn\'t decrease by at least 20 units at any point in the series. for i in range(1, len(photo_data)): prev_timestamp, prev_brightness = photo_data[i - 1] curr_timestamp, curr_brightness = photo_data[i] if prev_brightness - curr_brightness >= 20: return prev_timestamp return \\"No sudden decrease\\" # Reading Input def parse_input(input_text): input_lines = input_text.strip().split(\'n\') n = int(input_lines[0]) photo_data = [] for i in range(1, n + 1): timestamp, brightness = input_lines[i].split() photo_data.append((timestamp, int(brightness))) return photo_data # Function to process the input and get the result for the output def process_input(input_text): photo_data = parse_input(input_text) return detect_sunset_completion(photo_data)"},{"question":"The Towers of Hanoi is a classic problem in which you have three rods and a number of disks of different sizes that can slide onto any rod. The puzzle starts with the disks neatly stacked in ascending order of size on one rod, the smallest disk at the top, thus making a conical shape. The objective of the puzzle is to move the entire stack to another rod, obeying the following simple rules: 1. Only one disk can be moved at a time. 2. Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or an empty rod. 3. No disk may be placed on top of a smaller disk. Given the number of disks `n`, print the sequence of moves required to solve the Towers of Hanoi puzzle. Constraints * 1 ≤ n ≤ 15 Input An integer n representing the number of disks. Output Print the sequence of moves required to solve the puzzle. Each move is represented as a pair of integers, indicating the source rod and the destination rod. Assume rods are indexed as 1, 2, and 3. Example Input 3 Output 1 3 1 2 3 2 1 3 2 1 2 3 1 3","solution":"def hanoi(n, source, target, auxiliary): Prints the sequence of moves required to solve the Towers of Hanoi puzzle. Args: n (int): The number of disks. source (int): The starting rod. target (int): The destination rod. auxiliary (int): The auxiliary rod. Returns: None if n == 1: print(f\\"{source} {target}\\") return hanoi(n-1, source, auxiliary, target) print(f\\"{source} {target}\\") hanoi(n-1, auxiliary, target, source)"},{"question":"In a distant land called DataVille, there exists a system for managing reservoirs and pipelines. Each reservoir is represented by a point on a 2D Cartesian plane. There are n reservoirs numbered from 1 to n with coordinates (xi, yi), and there are m pipelines numbered from 1 to m each connecting one reservoir to another. The pipelines are bidirectional and have distinct integer lengths. The king of DataVille wishes to determine if it\'s possible to redraw the map of DataVille such that the pipeline lengths conform to a given set of constraints. Each constraint specifies that the distance between certain reservoirs must match exactly with the corresponding pipeline length for that connection. Your task is to verify if it is possible to assign coordinates to the reservoirs such that all the pipeline lengths match the given constraints, and output \\"YES\\" if it is possible or \\"NO\\" otherwise. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with a line containing two integers n and m (2 ≤ n ≤ 10, 1 ≤ m ≤ 45) where n is the number of reservoirs and m is the number of pipelines. The next m lines describe the pipelines. Each line contains three integers u, v, and d (1 ≤ u, v ≤ n, 1 ≤ d ≤ 1000), representing a pipeline connecting reservoir u and reservoir v with length d. Output For each test case, print \\"YES\\" if it is possible to assign coordinates to the reservoirs such that the distances align with the given pipeline lengths; otherwise, print \\"NO\\". Example Input 2 3 3 1 2 2 2 3 3 1 3 1 4 2 1 2 5 3 4 7 Output NO YES Explanation In the first test case, it\'s impossible to assign coordinates such that the distances between the reservoirs match the specified lengths because the triangle inequalities are not satisfied. In the second test case, assigning coordinates such that the Euclidean distances align with the given lengths is possible. Note: Assume all test cases are independent and must be solved separately.","solution":"def can_assign_coordinates(t, test_cases): from math import sqrt def valid_triangle_inequality(edges): # Check if for every triplet of connections (a, b, c) # the triangle inequalities a + b > c, a + c > b, and b + c > a hold. for i in range(len(edges)): for j in range(i + 1, len(edges)): for k in range(j + 1, len(edges)): (u1, v1, d1) = edges[i] (u2, v2, d2) = edges[j] (u3, v3, d3) = edges[k] lengths = sorted([d1, d2, d3]) if lengths[0] + lengths[1] <= lengths[2]: return False return True def process_test_case(n, m, edges): # If the edges do not satisfy the triangle inequality, it\'s impossible if not valid_triangle_inequality(edges): return \\"NO\\" return \\"YES\\" results = [] for test_case in test_cases: n, m, edges = test_case result = process_test_case(n, m, edges) results.append(result) return results"},{"question":"Given a string with parentheses and lowercase letters, you need to check if the parentheses are balanced and properly nested. A string is considered to have balanced parentheses if each opening parenthesis \'(\' has a corresponding closing parenthesis \')\' and the pairs of parentheses are properly nested. Example 1: Input: s = \\"a(b)c(d)\\" Output: True Explanation: The string has balanced parentheses because each \'(\' has a corresponding \')\' Example 2: Input: s = \\"a(b(c)d)\\" Output: True Explanation: The string has balanced parentheses and they are properly nested. Example 3: Input: s = \\"(a(b)c)d)\\" Output: False Explanation: The string has one extra closing parenthesis \')\' Example 4: Input: s = \\"a(b(c)d\\" Output: False Explanation: The string has one extra opening parenthesis \'(\' Your Task: You don\'t need to read input or print anything. Your task is to complete the function isBalanced(String s) which takes a single string as input and returns a boolean value - True if the string has balanced parentheses, False otherwise. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) where n is the length of the string. Constraints: 1 ≤ len(s) ≤ 10^5","solution":"def isBalanced(s): Returns True if the parentheses in the string are balanced and properly nested, else False. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Given an array of unique integers, find and return the smallest window (that is, a continuous subarray) that must be sorted in order for the entire array to be sorted in non-decreasing order. Your solution should identify the indices of this subarray as well as the sorted version of the array. Note: - If the array is already sorted, return the indices as -1, -1. - The function should return the starting and ending index of the subarray (inclusive, 0-based indexing) and the sorted array. Example 1: Input: arr = [1, 3, 2, 4, 5] Output: (1, 2), [1, 2, 3, 4, 5] Explanation: The subarray [3, 2] must be sorted to make the entire array sorted in non-decreasing order. The sorted array is [1, 2, 3, 4, 5]. Example 2: Input: arr = [1, 2, 3, 4, 5] Output: (-1, -1), [1, 2, 3, 4, 5] Explanation: The array is already sorted, so no subarray needs to be sorted. The sorted array is [1, 2, 3, 4, 5]. Example 3: Input: arr = [1, 2, 6, 4, 5, 3, 7, 8] Output: (2, 5), [1, 2, 3, 4, 5, 6, 7, 8] Explanation: The subarray [6, 4, 5, 3] must be sorted to make the entire array sorted in non-decreasing order. The sorted array is [1, 2, 3, 4, 5, 6, 7, 8]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findSmallestWindow` which takes the array `arr` as input and returns a tuple: `(start_index, end_index), sorted_array` Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 2 ≤ len(arr) ≤ 10^5 -10^6 ≤ arr[i] ≤ 10^6","solution":"def findSmallestWindow(arr): Finds the smallest window that needs to be sorted to make the entire array sorted. Returns the starting and ending indices of that window, as well as the completely sorted array. n = len(arr) start, end = -1, -1 # Step 1: Find the first element that is out of order from the left for i in range(n - 1): if arr[i] > arr[i + 1]: start = i break # If start is still -1, then array is already sorted if start == -1: return (-1, -1), arr # Step 2: Find the first element that is out of order from the right for i in range(n - 1, 0, -1): if arr[i] < arr[i - 1]: end = i break # Step 3: Find the minimum and maximum values in the arr[start:end+1] window_min = min(arr[start:end+1]) window_max = max(arr[start:end+1]) # Step 4: Extend the window to the left while start > 0 and arr[start - 1] > window_min: start -= 1 # Step 5: Extend the window to the right while end < n - 1 and arr[end + 1] < window_max: end += 1 # Step 6: Sort the array sorted_array = sorted(arr) return (start, end), sorted_array"},{"question":"Write a function that takes a list of integers and an integer `target` as inputs. The function should return the indices of the two numbers in the list that add up to the `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. For example, given the list `[2, 7, 11, 15]` and the target `9`, the function should return `[0, 1]` because `2 + 7 = 9`. Ensure to handle cases where: - The input list is empty or has less than two elements (return `None` in such cases). - The target cannot be achieved with any two elements from the list (again, return `None` in such cases). You should aim for optimal time complexity.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the list that add up to the target. Parameters: nums (list): List of integers. target (int): Target sum to be achieved by adding two numbers from the list. Returns: list: Indices of the two numbers that add up to the target, or None if no such pair exists. if not nums or len(nums) < 2: return None num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return None"},{"question":"Write a function to determine if a given string is a valid palindrome considering only alphanumeric characters and ignoring cases. Note: - An empty string is considered a valid palindrome. - You should provide a solution with O(n) runtime complexity. Example: Input: \\"A man, a plan, a canal: Panama\\" Output: true Explanation: After converting the input string to lowercase and removing non-alphanumeric characters, it reads \\"amanaplanacanalpanama\\", which is a palindrome. Example: Input: \\"race a car\\" Output: false Explanation: After converting the input string to lowercase and removing non-alphanumeric characters, it reads \\"raceacar\\", which is not a palindrome.","solution":"def is_palindrome(s): Determine if a given string is a valid palindrome considering only alphanumeric characters and ignoring cases. Parameters: s (str): The input string. Returns: bool: True if the input string is a valid palindrome, False otherwise. left, right = 0, len(s) - 1 while left < right: # Move the left pointer to the next alphanumeric character while left < right and not s[left].isalnum(): left += 1 # Move the right pointer to the previous alphanumeric character while left < right and not s[right].isalnum(): right -= 1 if s[left].lower() != s[right].lower(): return False left += 1 right -= 1 return True"},{"question":"In a faraway kingdom, King Arthur has an unending bag of coins and a list of the Knight\'s requests for coins. Each Knight has a specific amount they desire, and King Arthur wants to fulfill as many of these requests as possible with the coins he has. The value of each coin is unique and provided in a list. Each Knight\'s request is also provided as a value. Arthur can only give each Knight exactly the amount they request and each coin can be used at most once. Your task is to determine the maximum number of requests that can be fulfilled. Input The first line contains two integers n and m (1 ≤ n, m ≤ 105) - the number of coins and the number of requests respectively. The second line contains n distinct integers representing the value of each coin (1 ≤ value ≤ 109). The third line contains m integers representing the requests from the Knights (1 ≤ request ≤ 109). Output Print a single integer, the maximum number of requests King Arthur can fulfill. Examples Input 5 3 1 2 3 4 5 2 4 6 Output 2 Input 4 4 1 3 4 5 2 3 4 6 Output 2","solution":"def max_requests_fulfilled(n, m, coins, requests): coins_set = set(coins) fulfilled = 0 for request in requests: if request in coins_set: fulfilled += 1 coins_set.remove(request) return fulfilled # Example usage: # n, m = 5, 3 # coins = [1, 2, 3, 4, 5] # requests = [2, 4, 6] # print(max_requests_fulfilled(n, m, coins, requests)) -> Output: 2"},{"question":"Given two sorted integer arrays `nums1` and `nums2`, and an integer `k`, return the `k`th smallest element of the combined sorted array. The input arrays might contain duplicate elements. Your algorithm should have a time complexity better than O(m + n), where `m` and `n` are the lengths of `nums1` and `nums2` respectively. **Function Signature:** ```python def find_kth_smallest(nums1: List[int], nums2: List[int], k: int) -> int: pass ``` **Example:** ```python # Example 1 nums1 = [1, 3, 8] nums2 = [2, 7, 10] k = 5 # Explanation: The merged sorted array would be [1, 2, 3, 7, 8, 10]. The 5th smallest element is 8. print(find_kth_smallest(nums1, nums2, k)) # Output: 8 # Example 2 nums1 = [2, 3, 6, 7, 9] nums2 = [1, 4, 8, 10] k = 7 # Explanation: The merged sorted array would be [1, 2, 3, 4, 6, 7, 8, 9, 10]. The 7th smallest element is 8. print(find_kth_smallest(nums1, nums2, k)) # Output: 8 ``` **Constraints:** - The length of nums1 and nums2 will not be greater than `10^4`. - The values in `nums1` and `nums2` will be between `-10^6` and `10^6`. - k will always be valid, i.e., 1 ≤ k ≤ m + n, where m and n are the lengths of `nums1` and `nums2` respectively.","solution":"def find_kth_smallest(nums1, nums2, k): Returns the kth smallest element of the combined sorted array made from nums1 and nums2. Uses a binary search method to achieve a better time complexity than O(m + n). def kth_smallest(a, b, k): if len(a) > len(b): a, b = b, a if not a: return b[k - 1] if k == 1: return min(a[0], b[0]) i = min(len(a), k // 2) j = min(len(b), k // 2) if a[i - 1] > b[j - 1]: return kth_smallest(a, b[j:], k - j) else: return kth_smallest(a[i:], b, k - i) return kth_smallest(nums1, nums2, k)"},{"question":"You are given a binary tree represented by an array A of length N, where each element at index i (0-based) indicates the parent of node i. The root of the binary tree will always be represented by -1, which means node i is the root if A[i] = -1. You need to flatten this binary tree into a linked list in-place. Flattening means turning each node in the tree into a linked list node where the right pointer points to the next node in the list and the left pointer is always null. The list should follow the preorder traversal of the binary tree. Write a function to flatten the given binary tree into a linked list and print the preorder traversal of the flattened tree. ----- Input Format ----- - The first line of input contains a single integer T, the number of test cases. - The first line of each test case contains an integer N, the number of nodes in the binary tree. - The second line contains N space-separated integers A[0], A[1], ..., A[N-1] which represents the array A. ----- Output Format ----- For each test case, print the preorder traversal of the flattened binary tree as space-separated integers. ----- Constraints ----- 1 ≤T ≤10 1 ≤N ≤10^{4} -1 ≤ A[i] < N ----- Sample Input 1 ----- 2 5 -1 0 0 1 1 3 -1 0 1 ----- Sample Output 1 ----- 0 1 3 4 2 0 1 2","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(parent_array): nodes = [TreeNode(i) for i in range(len(parent_array))] root = None for i, p in enumerate(parent_array): if p == -1: root = nodes[i] else: if nodes[p].left is None: nodes[p].left = nodes[i] else: current = nodes[p].left while current.right is not None: current = current.right current.right = nodes[i] return root def flatten_binary_tree_util(root): if not root: return None, None left_head, left_tail = flatten_binary_tree_util(root.left) right_head, right_tail = flatten_binary_tree_util(root.right) if left_head: tail = left_tail if left_tail else left_head tail.right = right_head root.right = left_head root.left = None return root, right_tail if right_tail else tail else: return root, right_tail if right_tail else root def flatten_binary_tree(root): head, _ = flatten_binary_tree_util(root) return head def preorder_traversal(root): result = [] while root: result.append(root.val) root = root.right return result def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] root = build_tree(A) head = flatten_binary_tree(root) results.append(preorder_traversal(head)) return results def solve(T, test_cases): results = process_test_cases(T, test_cases) for result in results: print(\\" \\".join(map(str, result)))"},{"question":"Given a list of integers, write a function that finds and returns all possible pairs of numbers from the list that sum up to zero. Each pair should be returned as a tuple, and each pair should be unique (order of elements in the tuple and duplicate pairs should not be considered). If no such pair exists, return an empty list. Example: - For the input list `[3, -3, 4, -4, 2, -2, 5]`, the result would be `[(-3, 3), (-4, 4), (-2, 2)]`. - For the input list `[1, 2, 3, 4, 5]`, the result would be `[]`.","solution":"def find_zero_sum_pairs(lst): Given a list of integers, returns all unique pairs of numbers that sum up to zero. Args: lst: list of integers Returns: list of tuples, where each tuple contains a pair of integers that sum up to zero. seen = set() pairs = set() for num in lst: if -num in seen: pairs.add((min(num, -num), max(num, -num))) seen.add(num) return list(pairs)"},{"question":"# Task The kingdom of Zarth has a very strict postal system. Each person in the kingdom has a unique postal code. The king has decreed that all postal codes must be unique and contain only numbers. However, the postal audit has found that some codes have been duplicated. Your task is to create a function that can detect duplicated postal codes and return a list of them, sorted in ascending order. # Input/Output - `[input]` integer array `P` An array of integers representing the postal codes. `2 <= P.length <= 1000` - `[output]` integer array An array of integers, sorted in ascending order, representing the duplicated postal codes. If there are no duplicates, return an empty array. # Example ```python detect_duplicates([1234, 5678, 1234, 6789, 2345, 6789]) # -> [1234, 6789] detect_duplicates([9876, 5432, 6781]) # -> [] ```","solution":"def detect_duplicates(P): Detects duplicated postal codes and returns them sorted in ascending order. Parameters: P (list of int): List of postal codes. Returns: list of int: Sorted list of duplicated postal codes. If no duplicates, returns an empty list. from collections import Counter counts = Counter(P) duplicates = [code for code, count in counts.items() if count > 1] return sorted(duplicates)"},{"question":"A mountain is defined as a sequence of positive integers [a_1, a_2, ..., a_n] such that there exists an index i (1 < i < n) where: 1. a_1 < a_2 < ... < a_i 2. a_i > a_{i+1} > ... > a_n Given an array of positive integers, determine the length of the longest mountain. If there is no mountain, return 0. -----Input----- The first line contains an integer n (1 le n le 10^5) — the length of the array. The second line contains n space-separated positive integers a_1, a_2, ..., a_n (1 le a_i le 10^9). -----Output----- Print one integer — the length of the longest mountain. If there is no mountain, print 0. -----Examples----- Input 12 2 1 4 7 3 2 5 5 4 3 2 1 Output 5 Input 4 2 1 4 7 Output 0 Input 8 0 2 2 2 2 2 2 4 Output 0 Input 3 0 1 0 Output 3","solution":"def longest_mountain(arr): n = len(arr) if n < 3: return 0 longest = 0 for i in range(1, n - 1): if arr[i - 1] < arr[i] > arr[i + 1]: left = i - 1 right = i + 1 while left > 0 and arr[left - 1] < arr[left]: left -= 1 while right < n - 1 and arr[right + 1] < arr[right]: right += 1 longest = max(longest, right - left + 1) return longest"},{"question":"In a world of dome-shaped caves, there are N caves connected by M bidirectional tunnels. Each cave has a unique integer identifier from 1 to N. The entrance to every cave is spread on the same horizontal level, and all tunnels are straight horizontal paths. Each tunnel connects two different caves. A wandering explorer starts from a specific cave and aims to visit all caves exactly once before returning to the starting cave. Given the starting cave, your task is to determine if it is possible to complete such a tour. This problem is equivalent to checking for a Hamiltonian cycle starting from a specific node in the graph formed by caves and tunnels. -----Constraints----- - 1 leq N leq 10 - 0 leq M leq N(N-1)/2 - Each tunnel connects two different caves. -----Input----- Input is given from Standard Input in the following format: ``` N M A_1 B_1 A_2 B_2 : A_M B_M S ``` Where A_i and B_i denote the caves connected by the i-th tunnel, and S is the starting cave. -----Output----- Print \\"YES\\" if it is possible to complete the tour starting from the given cave S, and \\"NO\\" otherwise. -----Sample Input----- 4 5 1 2 2 3 3 4 4 1 1 3 1 -----Sample Output----- YES In this case, the explorer can follow the path: 1 -> 2 -> 3 -> 4 -> 1. This forms a Hamiltonian cycle starting from cave 1.","solution":"def can_complete_tour(N, M, tunnels, S): from itertools import permutations # Create an adjacency matrix adj = [[0]*N for _ in range(N)] for a, b in tunnels: adj[a-1][b-1] = 1 adj[b-1][a-1] = 1 # Check all permutations of caves starting from S-1 toVisit = [i for i in range(N) if i != S-1] for perm in permutations(toVisit): valid = True current = S-1 # Check the path in the permutation for nxt in perm: if adj[current][nxt] == 0: valid = False break current = nxt # Check returning to the start if valid and adj[current][S-1] == 1: return \\"YES\\" return \\"NO\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) tunnels = [(int(data[i*2 + 2]), int(data[i*2 + 3])) for i in range(M)] S = int(data[2*M + 2]) print(can_complete_tour(N, M, tunnels, S))"},{"question":"A large e-commerce company wants to analyze its sales data to identify the best-selling products. The company has data on the number of sales for each product, along with the category to which each product belongs. The goal is to find the top-selling product in each category. Your task is to write a program to assist the company in this analysis. You are provided with two lists: one containing the categories and another containing the sales data for the products. Each product has a unique ID from 1 to N, where N is the number of products. The ith product’s category and sales are given by the ith index of the categories and sales lists, respectively. Write a program that outputs the best-selling product ID in each category. If there are ties (i.e., multiple products in a category have the highest sales), return the product with the smallest ID. Input Format: - The first line contains an integer N, the number of products. - The second line contains N integers, where the ith integer represents the category ID of the ith product. - The third line contains N integers, where the ith integer represents the sales count of the ith product. Output Format: - The first line should contain an integer C, the number of unique categories. - The next C lines should contain two integers each, representing the category ID and the product ID of the best-selling product in that category. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ category ID ≤ 100 - 0 ≤ sales count ≤ 10000 Example Input: 8 1 2 1 3 2 2 1 3 100 200 50 300 400 150 250 100 Example Output: 3 1 1 2 2 3 4","solution":"def top_selling_products(n, categories, sales): from collections import defaultdict category_best = defaultdict(lambda: (-1, -1)) for i in range(n): cat = categories[i] sales_count = sales[i] product_id = i + 1 if sales_count > category_best[cat][0] or (sales_count == category_best[cat][0] and product_id < category_best[cat][1]): category_best[cat] = (sales_count, product_id) result = [] for cat in sorted(category_best.keys()): result.append((cat, category_best[cat][1])) return len(result), result"},{"question":"You are given an array of N integers. You need to find the largest sum of any contiguous subarray of the given array. ------ Input Format ------ - First line contains a single integer N, the size of the array. - Second line contains N space-separated integers representing the elements of the array. ------ Output Format ------ Output a single line containing the largest sum of any contiguous subarray. ------ Constraints ------ 1 ≤ N ≤ 10^5 -10^4 ≤ text{Array elements} ≤ 10^4 ------ Subtasks ------ Subtask 1 (100 points): Original constraints. ------ Sample Input 1 ------ 5 -2 1 -3 4 -1 2 1 -5 4 ------ Sample Output 1 ------ 6 ------ Explanation 1 ------ The subarray [4, -1, 2, 1] has the largest sum = 6.","solution":"def max_subarray_sum(arr): This function uses Kadane\'s algorithm to find the largest sum of a contiguous subarray. :param arr: list of integers :return: largest sum of any contiguous subarray max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a list of students and their scores in three different subjects: Mathematics, Science, and English. Your task is to categorize each student into one of five performance bands based on their average score across the three subjects: - \\"Excellent\\" (average score ≥ 90) - \\"Good\\" (80 ≤ average score < 90) - \\"Average\\" (70 ≤ average score < 80) - \\"Poor\\" (60 ≤ average score < 70) - \\"Fail\\" (average score < 60) Write a program that takes the list of students with their scores and outputs the student names along with their performance band. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of students. The following n lines each contain a student\'s name (a string of no more than 20 characters) followed by three integers, representing their scores in Mathematics, Science, and English. The scores are integers between 0 and 100 inclusive. -----Output----- Output n lines. Each line contains the student\'s name followed by their performance band. -----Example----- Input 3 Alice 80 85 90 Bob 60 60 60 Charlie 70 75 80 Output Alice Good Bob Poor Charlie Average","solution":"def categorize_students_performance(students): Categorizes students into performance bands based on their average scores. Parameters: students (list of tuples): A list containing tuples in the format (name, math_score, science_score, english_score). Returns: list of tuples: A list containing tuples in the format (name, performance_band). performance_bands = [] for student in students: name, math_score, science_score, english_score = student average_score = (math_score + science_score + english_score) / 3 if average_score >= 90: band = \\"Excellent\\" elif 80 <= average_score < 90: band = \\"Good\\" elif 70 <= average_score < 80: band = \\"Average\\" elif 60 <= average_score < 70: band = \\"Poor\\" else: band = \\"Fail\\" performance_bands.append((name, band)) return performance_bands"},{"question":"Simone is working on a project that involves finding the precise time when different events occurred based on observed data points. She needs to determine the smallest time interval that uniquely captures when each event is observed, given a set of timestamps. You are given distinct timestamps of form hh:mm (24-hour format). Your task is to find the smallest time interval (difference) between any two given timestamps. If only one timestamp is provided, return \\"No interval\\" as there is no pair to compare. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 1440), representing the number of timestamps provided. Each of the following n lines contains a timestamp in the form hh:mm, which represents the time of a particular event. -----Output----- Print the smallest time interval (in minutes) between any two provided timestamps. If only one timestamp is given, print \\"No interval\\". -----Examples----- Input 3 05:30 23:50 00:05 Output 15 Input 1 12:45 Output No interval -----Note----- In the first sample, the smallest interval is between the timestamps 23:50 and 00:05 which is 15 minutes. In the second sample, only one timestamp is provided so it is not possible to determine any interval. The output is \\"No interval\\".","solution":"def smallest_time_interval(n, timestamps): if n < 2: return \\"No interval\\" def to_minutes(timestamp): hours, minutes = map(int, timestamp.split(\':\')) return hours * 60 + minutes # Convert all timestamps to minutes minutes_list = [to_minutes(timestamp) for timestamp in timestamps] # Sort the list of minutes minutes_list.sort() # Initialize minimum interval to a large number min_interval = float(\'inf\') # Calculate the minimum difference between consecutive times for i in range(1, n): min_interval = min(min_interval, minutes_list[i] - minutes_list[i-1]) # Additionally, check the difference between the last and first timestamp accounting for wrap around midnight wrap_around_interval = (1440 - minutes_list[-1]) + minutes_list[0] min_interval = min(min_interval, wrap_around_interval) return min_interval"},{"question":"In a quaint little town, there\'s a fascinating clock tower with only one hand. The town\'s folk are puzzled by how the clock works. Every time the hand of the clock completes one full revolution, it strikes the bell a certain number of times. The number of strikes on completing each revolution follows a specific pattern: it increases by the next odd number each time. For example: - The first revolution, the clock strikes 1 time (1st odd number). - The second revolution, it strikes 3 times (2nd odd number). - The third revolution, it strikes 5 times (3rd odd number). - So on and so forth. Given an integer n, compute the total number of strikes after n full revolutions of the clock hand. -----Input----- The input contains a single integer n (1 le n le 1000). -----Output----- Output a single integer representing the total number of strikes after n revolutions. -----Examples----- Input 1 Output 1 Input 3 Output 9 Input 5 Output 25","solution":"def total_strikes(n): Returns the total number of strikes after n full revolutions of the clock hand. The pattern of strikes is given by the sum of the first n odd numbers. This sum can be directly computed using the formula n^2, as the sum of the first n odd numbers is always n^2. return n * n"},{"question":"# Stock Price Trend Indicator You have been given a time series data for the stock prices of a company in the form of a list of tuples. Each tuple represents a day and contains two elements: a string in the format `yyyy-mm-dd` representing the date and an integer representing the stock price on that day. For example, here is a list of stock prices: ```python [(\'2023-10-01\', 100), (\'2023-10-02\', 102), (\'2023-10-03\', 101), (\'2023-10-04\', 105), (\'2023-10-05\', 107)] ``` Your task is to write a function that calculates and returns the price trend as a sequence of strings, one for each day except the first. The trend for each day is calculated as follows: - `\\"UP\\"` if the stock price is higher than the previous day. - `\\"DOWN\\"` if the stock price is lower than the previous day. - `\\"SAME\\"` if the stock price is the same as the previous day. For the provided example, the function should return: ```python [\'UP\', \'DOWN\', \'UP\', \'UP\'] ``` Here is the function signature: ```python def stock_trend(stock_prices: list[tuple[str, int]]) -> list[str]: ``` # Constraints 1. The input list will have at least 2 days of stock prices. 2. The dates in the input list are guaranteed to be in chronological order. 3. The stock prices will be non-negative integers. # Example ```python stock_prices = [(\'2023-10-01\', 100), (\'2023-10-02\', 102), (\'2023-10-03\', 101), (\'2023-10-04\', 105), (\'2023-10-05\', 107)] print(stock_trend(stock_prices)) # Output: [\'UP\', \'DOWN\', \'UP\', \'UP\'] ```","solution":"def stock_trend(stock_prices: list[tuple[str, int]]) -> list[str]: Returns the stock price trend for the given time series data. trends = [] for i in range(1, len(stock_prices)): if stock_prices[i][1] > stock_prices[i-1][1]: trends.append(\\"UP\\") elif stock_prices[i][1] < stock_prices[i-1][1]: trends.append(\\"DOWN\\") else: trends.append(\\"SAME\\") return trends"},{"question":"In a kingdom far away, there exists a unique type of tree, known for its uncommon growth characteristics. These trees have grown in such a way that each node can have an arbitrary number of child nodes, creating a very complex structure. The king has tasked his chief gardener to compute the depth of these trees to better understand their growth pattern. Problem Each tree is represented as a collection of nodes, where each node can have zero or more child nodes. The depth of a node is defined as the number of edges in the longest path from the node to a descendant leaf (a node without children). You are provided the tree in a specific format, where each node is described with a unique integer identifier, followed by its child nodes. The input guarantees that the structure forms a single connected tree without cycles. Implement a function `compute_tree_depth` to determine the depth of the tree starting from the root node. Input - The first line contains an integer N, the number of nodes in the tree. - The next N lines describe each node in the format: NodeID NumberOfChildren ChildID1 ChildID2 ... ChildIDk Output - The function should output the depth of the tree. Constraints - 1 ≤ N ≤ 10^5 - 0 ≤ NumberOfChildren ≤ N−1 Example Input 7 1 3 2 3 4 2 2 5 6 3 0 4 0 5 1 7 6 0 7 0 Output 3 Explanation The tree structure is as follows: ``` 1 / | 2 3 4 / 5 6 | 7 ``` The depth is calculated by the longest path from the root (node 1) to a leaf, which in this case is 1 -> 2 -> 5 -> 7, giving a depth of 3.","solution":"def compute_tree_depth(n, nodes): from collections import defaultdict, deque tree = defaultdict(list) for node in nodes: details = list(map(int, node.split())) tree[details[0]] = details[2:] def dfs(node): if not tree[node]: return 0 max_depth = 0 for child in tree[node]: max_depth = max(max_depth, dfs(child) + 1) return max_depth return dfs(1) # Example usage: n = 7 nodes = [ \\"1 3 2 3 4\\", \\"2 2 5 6\\", \\"3 0\\", \\"4 0\\", \\"5 1 7\\", \\"6 0\\", \\"7 0\\" ] print(compute_tree_depth(n, nodes)) # Output: 3"},{"question":"A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Write a program that takes an input text and checks if it can be rearranged into a palindrome. If it can, return \\"YES\\", otherwise return \\"NO\\". For the purposes of this challenge, consider that single characters and the empty string can trivially be rearranged into a palindrome. Input The input consists of one line containing a string of at most 1000 alphanumeric characters (consider only lowercase a-z and digits 0-9). Ignore spaces, punctuation, and special characters. Output Output \\"YES\\" if the input text can be rearranged to form a palindrome, otherwise output \\"NO\\". Example Input aabbcc level abbbaac Output YES YES NO","solution":"def can_rearrange_to_palindrome(s): Determines if the input string s can be rearranged to form a palindrome. Parameters: s (str): Input string. Returns: str: \\"YES\\" if s can be rearranged to form a palindrome, otherwise \\"NO\\". from collections import Counter # Filter out non-alphanumeric characters and convert to lowercase filtered_s = \'\'.join([char for char in s if char.isalnum()]).lower() # Count the frequency of each character char_count = Counter(filtered_s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to a palindrome if it has at most one character with an odd frequency if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"An organization wants to secure its data with a simple encryption technique. They have decided to shift every letter in the string by a certain number of positions down the alphabet. The shift value is provided along with the string to be encrypted. Once it reaches \'z\', it should wrap around back to \'a\'. Input: - First line of input contains an integer n indicating the number of test cases. - Next, n lines follow where each line contains a shift value k and a string s separated by a space. Output: For each test case, print out the encrypted string. Constraints: 1 ≤ n ≤ 100 1 ≤ Length of the string s ≤ 1000 0 ≤ k ≤ 25 s consists only of lowercase English letters SAMPLE INPUT 2 3 abcde 2 xyz SAMPLE OUTPUT defgh zab","solution":"def encrypt_string(shift, s): Encrypts the given string s by shifting each character by the shift value. encrypted = [] for char in s: new_char = chr(((ord(char) - ord(\'a\') + shift) % 26) + ord(\'a\')) encrypted.append(new_char) return \'\'.join(encrypted) def process_test_cases(n, test_cases): Processes multiple test cases. :param n: Number of test cases :param test_cases: List of tuples where each tuple contains (shift, string) :return: List of encrypted strings results = [] for shift, s in test_cases: results.append(encrypt_string(shift, s)) return results"},{"question":"# temperature_fluctuations `Goal`: Given a list of daily temperatures for a month, return the number of days you would have to wait until a warmer temperature. If there is no future day for which this is possible, return 0 for that day. Your solution should efficiently handle lists up to 10,000 temperatures in size. 0. Initialize an empty list to store the result. 1. Traverse the given list of temperatures starting from the first day. 2. For each day, check the subsequent days to find out when a warmer temperature occurs. - If a warmer day is found, record the number of days between the current day and the warmer day in the result list. - If no warmer day is found, record 0 in the result list. 3. Return the result list at the end. # Example `input`: `[73, 74, 75, 71, 69, 72, 76, 73]` `output`: `[1, 1, 4, 2, 1, 1, 0, 0]` - Day 1: Warmer temperature after 1 day (73 -> 74) - Day 2: Warmer temperature after 1 day (74 -> 75) - Day 3: Warmer temperature after 4 days (75 -> 76) - Day 4: Warmer temperature after 2 days (71 -> 72) - Day 5: Warmer temperature after 1 day (69 -> 72) - Day 6: Warmer temperature after 1 day (72 -> 76) - Day 7: No warmer temperature (76 -> None) - Day 8: No warmer temperature (73 -> None) # Note To achieve an efficient solution, consider using a stack to keep track of indexes of temperatures that haven\'t found a warmer day yet. This allows maintaining an average time complexity of O(n).","solution":"def temperature_fluctuations(temperatures): Returns a list where each element is the number of days to wait until a warmer temperature. If no future warmer day exists, return 0 for that element. n = len(temperatures) answer = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: idx = stack.pop() answer[idx] = i - idx stack.append(i) return answer"},{"question":"Given a list of integers, determine if the list can be divided into two subsets such that the sum of the elements in both subsets is the same. If it can be divided into two such subsets, output \\"YES\\", otherwise output \\"NO\\". ------ Input ------ The input contains several test cases. Each test case consists of a single line with space-separated integers. The first integer `n` denotes the number of elements in the list (1 ≤ n ≤ 100). The next `n` integers are the elements of the list. Input ends with a line containing `0`, which should not be processed. ------ Output ------ For each test case, output a single line containing \\"YES\\" if the list can be divided into two subsets with equal sum, otherwise output \\"NO\\". ----- Sample Input 1 ------ 4 1 5 11 5 3 1 3 5 4 1 2 3 5 0 ----- Sample Output 1 ------ YES NO NO ----- explanation 1 ------ Explanation for the first sample test case: The list can be divided into two subsets {1, 5, 5} and {11} which both sum to 11.","solution":"def can_partition(nums): Given a list of integers, determine if the list can be divided into two subsets such that the sum of the elements in both subsets is the same. total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition into two equal subsets if total_sum % 2 != 0: return \\"NO\\" # We now need to find if there\'s a subset with sum equal to total_sum / 2 target = total_sum // 2 n = len(nums) # Initialize a DP array where dp[i] will be True if a subset sum of i can be achieved dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return \\"YES\\" if dp[target] else \\"NO\\" def process_partitions(test_cases): Processes multiple test cases and determine for each if the list can be divided into two subsets with equal sum. results = [] for case in test_cases: if case[0] == 0: continue nums = case[1:] results.append(can_partition(nums)) return results"},{"question":"You are given an array of integers and you need to perform the following operations: 1. **Remove all negative numbers**: Delete all the negative numbers from the array. 2. **Square each of the remaining numbers**: Replace each number in the array with its square. 3. **Sort the array**: Sort the resulting array in non-decreasing order. Write a function that performs these operations and returns the modified array. -----Constraints----- - The input array will contain between 1 and 10^5 integers. - Each integer in the array will be between -10^5 and 10^5 inclusive. -----Input----- The input consists of a single line containing space-separated integers. -----Output----- Output the modified array after performing the required operations. -----Sample Input----- -3 -1 0 2 4 -2 3 -----Sample Output----- [0, 4, 9, 16]","solution":"def modify_array(arr): Modifies the array by performing the following steps: 1. Remove all negative numbers. 2. Square each of the remaining numbers. 3. Sort the resulting array in non-decreasing order. Args: arr (list): A list of integers. Returns: list: The modified array. filtered_arr = [x for x in arr if x >= 0] squared_arr = [x ** 2 for x in filtered_arr] sorted_arr = sorted(squared_arr) return sorted_arr"},{"question":"Ram\'s teacher has given him a challenge to check whether a sequence of numbers is strictly increasing or not. If the sequence is strictly increasing, the teacher will reward him with a candy. Your task is to help Ram by writing a program to determine if each given sequence of numbers is strictly increasing. Input First line of input contains an integer T - the number of test cases. First line of each test case contains an integer n - the length of the sequence Second line of each test case contains n integers representing the sequence Output Print T lines as described below. For each test case print \\"Yes\\" if the sequence is strictly increasing otherwise print \\"No\\". Constraints 1 ≤ T ≤ 1000 1 ≤ n ≤ 200,000 1 ≤ each integer in the sequence ≤ 1,000,000,000 SAMPLE INPUT 2 4 1 2 3 4 5 5 4 3 2 1 SAMPLE OUTPUT Yes No","solution":"def is_strictly_increasing_sequence(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] sequence = test_cases[i][1] if all(sequence[j] < sequence[j+1] for j in range(n-1)): results.append(\\"Yes\\") else: results.append(\\"No\\") return results # Example usage: T = 2 test_cases = [(4, [1, 2, 3, 4]), (5, [5, 4, 3, 2, 1])] print(is_strictly_increasing_sequence(T, test_cases))"},{"question":"Henry loves playing with numbers. He has a number n and he performs the following operation until n becomes 1: if n is even, he divides it by 2, otherwise, he multiplies it by 3 and adds 1. Your task is to find how many steps it takes for n to become 1. Input The only line contains a single integer: 1 ≤ n ≤ 10^6. Output Output a single integer representing the number of steps it takes for n to become 1. Examples Input 6 Output 8 Input 11 Output 14","solution":"def steps_to_one(n): Returns the number of steps it takes for n to become 1 following the specified rules. :param n: Integer input where 1 ≤ n ≤ 10^6 :return: Number of steps to reach 1 steps = 0 while n != 1: if n % 2 == 0: n //= 2 else: n = n * 3 + 1 steps += 1 return steps"},{"question":"You are given a sequence of integers representing the heights of stacks of boxes and your task is to make the heights of all stacks equal by moving boxes from one stack to another. You can only move one box at a time and each move has a cost associated with it. Your goal is to determine the minimum cost required to make all stacks equal in height. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of stacks. The second line contains n integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 1000) — the heights of the stacks. Output Print a single integer — the minimum cost to make all stacks equal in height. Examples Input 4 1 2 3 4 Output 2 Input 3 10 10 10 Output 0 Input 5 5 5 5 5 5 Output 0 Note In the first sample, you can move 1 box from the 4th stack to the 1st stack and 1 box from the 3rd stack to the 2nd stack, making all stacks equal height of 3. The total cost is 2 moves. In the second and third samples, all stacks are already of equal height, so the cost is 0.","solution":"def min_cost_to_equalize_stacks(n, heights): total_height = sum(heights) target_height = total_height // n cost = 0 for height in heights: cost += abs(height - target_height) return cost // 2 # Division by 2 as each move involves reducing one stack and increasing another"},{"question":"Sam is working on a system that requires validating email addresses. An email address consists of a local part, an \\"@\\" symbol, and a domain part. The local part may contain alphanumeric characters, dots (\'.\'), underscores (\'_\'), and hyphens (\'-\'), but it must start and end with an alphanumeric character. The domain must consist of alphanumeric characters and dots, where each dot separates a subdomain and the last subdomain defines the domain extension which should be between 2 and 4 characters long. Sam needs your help to validate a list of email addresses. Write a function `validate_email_addresses(email_addresses)` that takes a list of email addresses and returns a list of booleans indicating whether each email address is valid or not. **Input:** - A list of strings, where each string is an email address. **Output:** - A list of booleans, where each boolean corresponds to an email address in the input list (True for valid emails, False for invalid ones). **Constraints:** - Assume the maximum length of an email address to be 100 characters. - Each email address will not contain any additional spaces or special characters beyond the specified ones. **Example:** ```python email_addresses = [\\"john.doe@example.com\\", \\"jane_doe@domain.co.uk\\", \\"invalid-email-@example..com\\", \\"_invalid@example.com\\"] print(validate_email_addresses(email_addresses)) ``` *Output:* ```python [True, True, False, False] ``` *Explanation:* - \\"john.doe@example.com\\" is valid. - \\"jane_doe@domain.co.uk\\" is valid. - \\"invalid-email-@example..com\\" is invalid because of the double dots in the domain part and ending with a dot. - \\"_invalid@example.com\\" is invalid because the local part starts with an underscore.","solution":"import re def validate_email_addresses(email_addresses): Takes a list of email addresses and returns a list of booleans indicating whether each email address is valid or not. validations = [] for email in email_addresses: if is_valid_email(email): validations.append(True) else: validations.append(False) return validations def is_valid_email(email): Validates a single email address against the specified rules. # Define regex pattern for valid email pattern = re.compile( r\\"^[a-zA-Z0-9]([w-.]*[a-zA-Z0-9])?@[a-zA-Z0-9]+(.[a-zA-Z]{2,4})+\\" ) return bool(pattern.match(email))"},{"question":"Given a list of integers, your task is to determine if there exists a combination of non-overlapping pairs of elements such that each pair sums up to a given target value. Each element from the list can be used at most once. Input The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of integers in the list and the target sum value respectively. The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9 for each valid i) — the elements of the list. Output Print \\"YES\\" if it is possible to form the required pairs, otherwise print \\"NO\\". Examples Input 6 8 1 7 2 6 3 5 Output YES Input 5 10 1 2 3 4 5 Output NO Note In the first example, the pairs (1, 7), (2, 6), and (3, 5) all sum up to the target value 8. In the second example, it is not possible to form any pair of elements that sum up to 10.","solution":"def can_form_pairs(n, k, arr): Determines if there exists a combination of non-overlapping pairs of elements such that each pair sums up to the given target value k. Parameters: n (int): Number of integers in the list k (int): Target sum value arr (list): List of integers Returns: str: \\"YES\\" if it\'s possible to form the pairs, otherwise \\"NO\\" pair_count = {} for num in arr: complement = k - num if pair_count.get(complement, 0) > 0: pair_count[complement] -= 1 else: pair_count[num] = pair_count.get(num, 0) + 1 if all(value == 0 for value in pair_count.values()): return \\"YES\\" return \\"NO\\""},{"question":"Alice is playing a new video game where she must collect coins and fight monsters to progress through levels. Each level contains a number of coins to collect and a number of monsters to defeat. The game allows Alice to retry any level as many times as she wants until she manages to collect all the coins in that level and defeat all the monsters. For each level, Alice has an initial strength and an initial agility rating. Each monster has a specific strength requirement to defeat and each coin has a specific agility requirement to collect. To pass the level, Alice needs to defeat all monsters and collect all coins in that particular level. In the worst-case scenario, calculate the minimum number of attempts Alice would need to pass all levels. An attempt is defined as a single play-through of a level, where Alice either successfully collects all coins and defeats all monsters or fails. Input: The first line contains a positive integer m (1 ≤ m ≤ 100), the number of levels in the game. The second line contains space-separated m positive integers, Si (1 ≤ Si ≤ 109), representing the initial strength requirement for each level. The third line contains space-separated m positive integers, Ai (1 ≤ Ai ≤ 109), representing the initial agility requirement for each level. The fourth line contains space-separated m positive integers, Mi (1 ≤ Mi ≤ 1000), representing the number of monsters in each level. The fifth line contains space-separated m positive integers, Ci (1 ≤ Ci ≤ 1000), representing the number of coins in each level. Output: Print a single number — the minimal number of attempts needed to pass all levels in the worst-case scenario. SAMPLE INPUT: 2 10 15 20 25 3 2 4 5 SAMPLE OUTPUT: 2","solution":"def minimal_attempts(m, Si, Ai, Mi, Ci): Given the number of levels `m`, initial strength requirements `Si`, initial agility requirements `Ai`, number of monsters `Mi`, and number of coins `Ci` for each level, calculate the minimal number of attempts in the worst-case scenario to pass all levels. max_attempts = 0 for i in range(m): # The minimal number of attempts required for a level in the worst case attempts = max(Mi[i], Ci[i]) max_attempts = max(max_attempts, attempts) return max_attempts"},{"question":"You are given N distinct positive integers and a target sum T. Determine whether there exist two distinct numbers in the array whose sum is exactly T. Print \\"YES\\" if such a pair exists, otherwise print \\"NO\\". Constraints * 2 leq N leq 1000 * 1 leq T leq 10^9 * 1 leq arr_i leq 10^9 * All arr_i values are distinct. Input N and T are given on the first line and the N integers of the array are given on the second line. N T arr1 arr2 ... arrN Output Print \\"YES\\" if there is a pair with the given sum, otherwise print \\"NO\\". Examples Input 5 10 1 2 3 7 8 Output YES Input 4 15 1 5 9 11 Output NO Input 6 20 5 11 3 7 15 10 Output YES Input 3 6 1 4 5 Output YES","solution":"def has_pair_with_sum(arr, T): Determines if there exist two distinct numbers in the array whose sum is exactly T. :param arr: List of distinct positive integers :param T: Target sum :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\" seen_numbers = set() for number in arr: if T - number in seen_numbers: return \\"YES\\" seen_numbers.add(number) return \\"NO\\""},{"question":"Given an undirected graph with n vertices and m edges, each vertex representing a city and each edge representing a bidirectional road connecting two cities, you need to determine whether you can separate the graph into two disjoint sets such that no two cities in the same set are connected by a road. If it\'s possible, output \\"YES\\" and one possible division of the cities into the two sets. Otherwise, output \\"NO\\". In graph theory, this problem is equivalent to checking whether a graph is bipartite. ------Input-------- The first line contains two integers n and m (1 le n, m le 1000) — the number of cities and roads. Each of the next m lines contains two integers u and v ( 1 le u, v le n ) — denoting a road connecting city u and city v. ------Output------- If it is possible to divide the cities into two disjoint sets as described, print \\"YES\\". In the next line, print n integers, where the i-th integer is either 1 or 2 indicating the set number in which the i-th city belongs to. If there are multiple solutions, print any of them. If it is not possible to divide the cities into two sets, print \\"NO\\". -------Example-------- Input 4 4 1 2 2 3 3 4 4 1 Output YES 1 2 1 2 Input 3 3 1 2 2 3 1 3 Output NO","solution":"from collections import deque def is_bipartite(n, edges): # Create an adjacency list adj = [[] for _ in range(n + 1)] for u, v in edges: adj[u].append(v) adj[v].append(u) # Array to store the color of each vertex (0: not colored, 1: color 1, 2: color 2) color = [0] * (n + 1) # Function to perform BFS and check for bipartite def bfs(start): queue = deque([start]) color[start] = 1 # Start coloring the start vertex with color 1 while queue: node = queue.popleft() for neighbor in adj[node]: if color[neighbor] == 0: # If neighbor is not colored color[neighbor] = 3 - color[node] # Alternate color queue.append(neighbor) elif color[neighbor] == color[node]: # If neighbor is colored the same as current node return False return True # Check for each component in the graph for i in range(1, n + 1): if color[i] == 0: # Not colored yet if not bfs(i): return \\"NO\\", [] # Return the result return \\"YES\\", color[1:] def separate_cities(n, m, edges): result, sets = is_bipartite(n, edges) if result == \\"YES\\": return f\\"{result}n{\' \'.join(map(str, sets))}\\" else: return result"},{"question":"Polybius is a musician who has t musical tracks. Each track\'s file name is a string consisting of lowercase English letters and an underscore \'_\'. Unfortunately, Polybius cannot remember how many unique songs he had composed since some of the tracks were duplicate copies. Polybius recalls a few details that might help identify unique tracks: 1. Track names are anagrams of each other if they can be rearranged to form the same string when ignoring the underscores (\'_\'). 2. A track \'abc_def\' is considered the same as \'ab_cdef\' because the underscores can be ignored. Your task is to count the number of unique tracks Polybius has. Input The first line of the input contains an integer t (1 ≤ t ≤ 50) — the number of tracks. The next t lines contain the names of the tracks. Output Print a single integer — the number of unique tracks Polybius has composed. Examples Input 5 abc_def ab_cdef cdef_ab g_hi hi_g Output 2 Note - \\"abc_def\\", \\"ab_cdef\\", and \\"cdef_ab\\" are considered the same track since they are anagrams of each other after ignoring the underscores. - \\"g_hi\\" and \\"hi_g\\" are considered the same track following the same rule.","solution":"def count_unique_tracks(t, tracks): Counts the number of unique tracks based on anagram rule ignoring the underscores. Parameters: t (int): The number of tracks. tracks (list of str): List of track names. Returns: int: The number of unique tracks. unique_tracks = set() for track in tracks: cleaned_track = track.replace(\'_\', \'\') sorted_track = \'\'.join(sorted(cleaned_track)) unique_tracks.add(sorted_track) return len(unique_tracks)"},{"question":"Write a function that determines whether a given string of parentheses (of various types) is balanced. The types of parentheses are `()`, `{}`, and `[]`. -----Input----- A single line consisting of the string of parentheses. -----Output----- Print `YES` if the parentheses are balanced, otherwise print `NO`. -----Example----- Input: {[()()]} Output: YES Input: {[(])} Output: NO Hints: - Use a stack data structure to solve the problem. - Push opening parentheses onto the stack, and pop from the stack when a closing parenthesis is encountered. - Ensure that the closing parenthesis matches the most recent opening parenthesis.","solution":"def is_balanced(s): Checks if the provided string of parentheses is balanced. Args: s (str): The string containing the parentheses. Returns: str: \'YES\' if the string is balanced, otherwise \'NO\'. stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in \'({[\': stack.append(char) elif char in \')}]\': if not stack or stack[-1] != matching_parentheses[char]: return \'NO\' stack.pop() return \'YES\' if not stack else \'NO\'"},{"question":"Create a function that can generate a symmetric \\"mystic eye\\" symbol. The mystic eye is represented as follows: \'--o--\' Just like in owl portraits, the \\"mystic eye\\" symbol can be surrounded by various symmetric patterns. Here\'s an example: XYYX\'--o--\'XYYX or 89TH\'--o--\'HT98 Given a string with a sequence of characters containing numbers and uppercase letters (no spaces or punctuation), write a function to produce a new string where the \\"mystic eye\\" is surrounded by symmetric patterns matching the following characters: 8, 9, T, H, X, Y Your function should take any random string of characters and generate a symmetric pattern with the \\"mystic eye\\" symbol in the center. Function Specification: - Function Name: `create_mystic_eye` - Input: A string `s` of arbitrary length (1 <= |s| <= 100). - Output: A new string formatted as a symmetric pattern with the \\"mystic eye\\" symbol in the center. Example: Input: \'8YX9HT\' Output: \'89YTHX\'--o--\'XHTY98\' Input: \'THX\' Output: \'THX\'--o--\'XHT\' Note: The resulting string should always surround the mystic eye pattern \'--o--\' and maintain symmetry in the characters provided. Characters not belonging to the allowable set (8, 9, T, H, X, Y) should be ignored. If the given string does not contain any valid characters, return just the mystic eye pattern \'--o--\'.","solution":"def create_mystic_eye(s): Generates a symmetric pattern with the \\"mystic eye\\" symbol in the center. Parameters: s (str): A string of arbitrary length containing numbers and uppercase letters. Returns: str: A string with the mystic eye symbol centered among a symmetric pattern. valid_chars = {\'8\', \'9\', \'T\', \'H\', \'X\', \'Y\'} filtered_chars = [char for char in s if char in valid_chars] symmetric_part = \'\'.join(filtered_chars) return f\\"{symmetric_part}\'--o--\'{symmetric_part[::-1]}\\""},{"question":"Task Write a function that takes an integer as input and returns the integer obtained by reversing the order of its digits. If the reversed integer exceeds the 32-bit signed integer range [-2^31, 2^31 - 1], return 0. Examples ``` 123 -> 321 -123 -> -321 120 -> 21 1534236469 -> 0 (since it would overflow) ```","solution":"def reverse_integer(n): Reverses the digits of an integer n. If the reversed integer exceeds the 32-bit signed integer range [-2^31, 2^31 - 1], returns 0. INT_MIN, INT_MAX = -2**31, 2**31 - 1 sign = -1 if n < 0 else 1 reversed_digits = int(str(abs(n))[::-1]) reversed_n = sign * reversed_digits if reversed_n < INT_MIN or reversed_n > INT_MAX: return 0 return reversed_n"},{"question":"In a distant galaxy, there exist magical strings that consist only of characters \'A\' and \'B\'. A string is considered balanced if the count of \'A\'s is equal to the count of \'B\'s. Given an input string, determine whether it\'s possible to make the string balanced by removing exactly one character. If it is possible, output \\"YES\\", otherwise output \\"NO\\". ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - The first line of each test case contains a single string consisting of characters \'A\' and \'B\'. ------ Output Format ------ - For each test case, output \\"YES\\" if it\'s possible to make the string balanced by removing exactly one character. Otherwise, output \\"NO\\". ------ Constraints ------ 1 leq T leq 10^{2} 2 leq length of each string leq 10^{3} ------ Sample Input 1 ------ 3 ABBA AAB AA ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Test case 1: By removing the second \'B\', we get \\"ABA\\", which is not balanced. But by removing either \'A\', we get \\"BBA\\", which is also not balanced. Finally, by removing the first \'B\', we get \\"ABA\\", which is not balanced either. Thus, it\'s \\"NO\\" in this case. Test case 1: By removing the second \'A\', we get \\"AAB\\", which is not balanced. By removing the first \'A\', we get \\"AB\\", which is balanced. Thus, it\'s \\"YES\\" in this case. Test case 3: No matter which character you remove, the resulting string will never be balanced. Thus, it\'s \\"NO\\" in this case.","solution":"def is_possible_to_balance_by_removing_one(string): Determine whether it\'s possible to make the string balanced by removing exactly one character. count_A = string.count(\'A\') count_B = string.count(\'B\') if abs(count_A - count_B) == 1: return \\"YES\\" else: return \\"NO\\" def process_test_cases(T, test_cases): results = [] for string in test_cases: result = is_possible_to_balance_by_removing_one(string) results.append(result) return results"},{"question":"Your task is to implement a function that simulates the addition of two large non-negative integers represented as strings. The function should return the result as a string. The function should handle cases where the result contains one or more leading zeros, ensuring that the returned string does not have any leading zeros (except for the number \'0\' itself). -----Input----- Two non-negative integers in the form of strings, num1 and num2. Both strings contain only the characters \'0\'-\'9\' and have no leading zeros except for the number \'0\' itself. The lengths of num1 and num2 are both up to 10^5 characters. -----Output----- A single string representing the sum of the given numbers without leading zeros. -----Examples----- Sample Input: \\"123456789123456789\\" \\"987654321987654321\\" Sample Output: \\"1111111111111111110\\" Sample Input: \\"0000123\\" \\"456\\" Sample Output: \\"579\\" Sample Input: \\"0\\" \\"0\\" Sample Output: \\"0\\" -----Constraints----- 1. Both input strings num1 and num2 will be non-negative integers. 2. The sum of the lengths of num1 and num2 does not exceed 200,000.","solution":"def add_large_numbers(num1, num2): Returns the sum of num1 and num2, two large non-negative integers represented as strings, without leading zeros in the result. # Remove leading zeros from inputs num1, num2 = num1.lstrip(\'0\'), num2.lstrip(\'0\') # If either string is empty, replace with \'0\' if not num1: num1 = \'0\' if not num2: num2 = \'0\' # Initialize result and carry result = [] carry = 0 p1, p2 = len(num1) - 1, len(num2) - 1 # Process both numbers from end to start while p1 >= 0 or p2 >= 0 or carry: x1 = int(num1[p1]) if p1 >= 0 else 0 x2 = int(num2[p2]) if p2 >= 0 else 0 value = x1 + x2 + carry carry = value // 10 result.append(value % 10) p1 -= 1 p2 -= 1 # Reverse the result and convert to string return \'\'.join(map(str, result[::-1])).lstrip(\'0\') or \'0\'"},{"question":"You are given a string `s` consisting of lowercase Latin letters and a number `q` representing the number of queries. Each query is described by a string `qj` consisting of lowercase Latin letters. For each query, count the number of anagrams of `qj` present as substrings in the string `s`. Input The first line contains the string `s` (1 ≤ |s| ≤ 100000) — the string to search within. The second line contains an integer `q` (1 ≤ q ≤ 10000) — the number of queries. Each of the next `q` lines contains a string `qj` (1 ≤ |qj| ≤ 1000) — the query string. Output For each query, print the number of anagrams of `qj` found as substrings in `s` on a separate line. Examples Input cbaebabacd 2 abc bca Output 2 2 Input abcdeffedcba 3 fba edc aabb Output 0 2 0","solution":"from collections import Counter def count_anagrams_in_substrings(s, queries): Counts the number of anagrams of each query present as substrings in the string s. Args: s (str): The string to search within. queries (List[str]): The list of query strings. Returns: List[int]: List of counts of anagrams for each query string. result = [] for q in queries: n, k = len(s), len(q) if k > n: result.append(0) continue q_counter = Counter(q) window_counter = Counter(s[:k-1]) count = 0 for i in range(k-1, n): window_counter[s[i]] += 1 if window_counter == q_counter: count += 1 window_counter[s[i - k + 1]] -= 1 if window_counter[s[i - k + 1]] == 0: del window_counter[s[i - k + 1]] result.append(count) return result # Example usage with input and output # s = \\"cbaebabacd\\" # queries = [\\"abc\\", \\"bca\\"] # print(count_anagrams_in_substrings(s, queries)) # Output: [2, 2]"},{"question":"You are part of a team of developers working on a new data analysis tool. Your task is to write a function that processes a series of numeric operations on an initial value using an instruction set. The tool takes an initial integer value and a sequence of operations in the form of a string, where each character corresponds to a specific operation. The operations are defined as follows: - \'A\': Add 1 to the current value. - \'S\': Subtract 1 from the current value. - \'M\': Multiply the current value by 2. - \'D\': Divide the current value by 2 (using integer division). You need to implement the function to process the operations in the given sequence. Input Format: - The first line will contain an integer N, the initial value. - The second line consists of a string of characters (\'A\', \'S\', \'M\', \'D\') representing the sequence of operations to be performed on the initial value. Output Format: - Output on a single line, the final value after all operations have been performed. Constraints: 1 ≤ N ≤ 10^5 1 ≤ |Length of the string| ≤ 10^5 SAMPLE INPUT 10 AMSD SAMPLE OUTPUT 10 Explanation Starting with the initial value of 10: - After operation \'A\', value becomes 11. - After operation \'M\', value becomes 22. - After operation \'S\', value becomes 21. - After operation \'D\', value becomes 10 (integer division 21 // 2).","solution":"def process_operations(initial_value, operations): Processes a series of operations on an initial value. Args: initial_value (int): The initial integer value. operations (str): A string of characters representing operations. Returns: int: The final value after processing all operations. value = initial_value for operation in operations: if operation == \'A\': value += 1 elif operation == \'S\': value -= 1 elif operation == \'M\': value *= 2 elif operation == \'D\': value //= 2 return value"},{"question":"String Permutation Generator You are required to implement a function that generates all possible permutations of a given string and returns them in lexicographic order. The input string will be unique with no duplicate characters. Your program should take a string as input and output all its permutations sorted in lexicographic order. Use recursion or an iterative approach to generate the permutations. For example, given the input string \\"abc\\", the permutations are \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", and \\"cba\\". Input The input consists of a single line containing a string of at most 6 lowercase alphabetical characters with no repeating characters. Output Output all permutations of the input string, one per line, sorted in lexicographic order. Sample Input 1 abc Sample Output 1 abc acb bac bca cab cba Sample Input 2 dog Sample Output 2 dgo dgo god odg ogd odg","solution":"from itertools import permutations def string_permutations(s): Generate all permutations of the input string in lexicographic order. perm = sorted([\'\'.join(p) for p in permutations(s)]) return perm"},{"question":"An online shopping store sells products and offers several promotional discounts based on the total purchase amount. One particular promotion offers a flat discount if a customer\'s purchase amount is at or above a specific threshold. Given the following: - An integer `M` representing the number of price brackets the store has. - For each price bracket, the minimum purchase amount required to qualify for it and the corresponding discount offered. - An array `A` of length `K` representing the purchase amounts of different customers. Your task is to determine the final amount each customer has to pay after applying the maximum discount they are eligible for. ------- Input Format ------- - The first line of input will contain two integers: `M` and `K`. - The next `M` lines each contain two integers, `X_i` and `D_i`, denoting the minimum purchase amount required and the discount offered for the `i`-th discount bracket. - The last line contains `K` space-separated integers representing the purchase amounts. ------- Output Format ------- Output `K` space-separated integers where the `i`-th integer denotes the final amount that the `i`-th customer has to pay after applying the maximum eligible discount. ------- Constraints ------- 1 ≤ M, K ≤ 1000 1 ≤ X_i ≤ 10^6 1 ≤ D_i ≤ 10^5 1 ≤ A_i ≤ 10^7 ------ Sample Input 1 ------ 3 4 5000 500 10000 1200 20000 3000 8000 15000 22000 4000 ------ Sample Output 1 ------ 7500 13800 19000 4000 ------ Explanation 1 ------ - The first customer spends 8000 and qualifies for a 500 discount (7500 to pay). - The second customer spends 15000 and qualifies for a 1200 discount (13800 to pay). - The third customer spends 22000 and qualifies for a 3000 discount (19000 to pay). - The fourth customer spends 4000 and does not qualify for any discount, so pays 4000.","solution":"def calculate_final_amounts(M, K, discount_brackets, purchases): Calculate the final amounts each customer has to pay after applying the maximum discount they are eligible for. Args: M (int): Number of price brackets. K (int): Number of customers. discount_brackets (list of tuples): Each tuple contains (min_purchase_amount, discount_amount). purchases (list of int): Purchase amounts of different customers. Returns: list of int: Final amounts each customer has to pay. discount_brackets.sort(reverse=True) # Sort brackets by min purchase amount in descending order final_amounts = [] for purchase in purchases: final_amount = purchase for min_purchase, discount in discount_brackets: if purchase >= min_purchase: final_amount = purchase - discount break final_amounts.append(final_amount) return final_amounts"},{"question":"You have been tasked with developing a chess engine for a new online chess game. One sub-component of this engine requires functionality to determine all possible moves for a knight from its current position on a standard 8x8 chessboard. The knight moves in an L-shape: two squares in any direction vertically and one square horizontally, or two squares horizontally and one square vertically. Your goal is to write a function that accepts a knight\'s position on the chessboard and returns all possible positions the knight can move to. -----Input----- The first and only line of input contains the knight’s position in standard algebraic notation (e.g., \\"e4\\"). The file does not contain any illegal inputs. The position will be one of the 64 valid squares on the chessboard. -----Output----- The output should be all valid positions the knight can move to, printed in any order, each on a new line. -----Examples----- Sample Input 1: d4 Sample Output 1: b5 b3 c6 c2 e6 e2 f5 f3 Sample Input 2: g1 Sample Output 2: h3 e2 f3","solution":"def knight_moves(position): Given the position of a knight on the chessboard, return all possible moves it can make from that position. :param position: A string representing the knight\'s position in standard algebraic notation (e.g., \'e4\') :return: A list of strings, each representing a valid move the knight can make # Mapping of file to column index file_to_col = {\'a\': 1, \'b\': 2, \'c\': 3, \'d\': 4, \'e\': 5, \'f\': 6, \'g\': 7, \'h\': 8} col_to_file = {v: k for k, v in file_to_col.items()} # Mapping of rank to row index row_to_rank = {\'1\': 1, \'2\': 2, \'3\': 3, \'4\': 4, \'5\': 5, \'6\': 6, \'7\': 7, \'8\': 8} rank_to_row = {v: k for k, v in row_to_rank.items()} # Knight\'s move set knight_movesets = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2), ] file, rank = position[0], position[1] current_col, current_row = file_to_col[file], row_to_rank[rank] possible_positions = [] for move in knight_movesets: new_col, new_row = current_col + move[0], current_row + move[1] if 1 <= new_col <= 8 and 1 <= new_row <= 8: new_position = col_to_file[new_col] + rank_to_row[new_row] possible_positions.append(new_position) return possible_positions"},{"question":"Sergey is planning to embark on an adventure in the Pokemon world. He wants to catch as many different types of Pokemon as possible. Pokemon can be found in various habitats, each with its unique set of Pokemon species. Each habitat has a certain number of different Pokemon species and any of these species can be present multiple times in a habitat. Sergey can visit at most `n` different habitats. To maximize his collection of different Pokemon species, Sergey needs to determine the maximum number of different Pokemon species he can catch. You are given the list of habitats and the number of different species in each habitat. Sergey can visit at maximum `n` different habitats, and he must select the habitats in such a way that the overall number of different Pokemon species he catches is maximized. Provide an algorithm that helps Sergey determine the maximum number of different Pokemon species he can catch by visiting a subset of the habitats. -----Input----- - The first line contains two integers `m` and `n` — the number of habitats and the maximum number of habitats Sergey can visit, respectively (`1 ≤ n ≤ m ≤ 100`). - The second line contains `m` integers, where the `i-th` integer represents the number of different Pokemon species in the `i-th` habitat (`1 ≤ species count ≤ 100`). -----Output----- Print one integer — the maximum number of different Pokemon species Sergey can catch by visiting at most `n` habitats. -----Example----- Input 5 3 8 12 7 10 15 Output 37 -----Note----- In the example, Sergey can maximize his collection of Pokemon species by visiting the habitats with 15, 12, and 10 species, resulting in a total of 37 different Pokemon species.","solution":"def max_pokemon_species(m, n, species_list): Determines the maximum number of different Pokemon species Sergey can catch. :param m: int - number of habitats :param n: int - maximum number of habitats Sergey can visit :param species_list: list of int - number of different species in each habitat :return: int - maximum number of different Pokemon species Sergey can catch # Sort the species_list in descending order to get the most species per habitat sorted_species = sorted(species_list, reverse=True) # Sum the first n values (which represent the top n habitats with the most species) max_species = sum(sorted_species[:n]) return max_species # Example usage: m, n = 5, 3 species_list = [8, 12, 7, 10, 15] print(max_pokemon_species(m, n, species_list)) # Output: 37"},{"question":"A city is planning to introduce a new public transit route and wants to maximize the number of commuters that can utilize this route efficiently. The city map consists of N intersections connected by M bidirectional streets. Each street between the intersections has a capacity, which is the maximum number of commuters that can travel through that street. The city transit planners need to identify the maximum number of commuters that can travel from the starting intersection to the destination intersection, thereby maximizing the utilization of the transit route. Your task is to implement an algorithm that determines the maximum number of commuters that can be routed from the starting intersection to the destination intersection, ensuring that the number of commuters on any street does not exceed its respective capacity. Input The first line contains four integers N, M, S, and T where N (2 leq N leq 500) is the number of intersections, M (1 leq M leq 5000) is the number of streets, S (1 leq S leq N) is the starting intersection, and T (1 leq T leq N) is the destination intersection. The next M lines each contain three integers u, v, and c (1 leq u, v leq N, 1 leq c leq 1000), where u and v describe the intersections connected by a street and c represents the capacity of the street. Output Print a single integer representing the maximum number of commuters that can be routed from the starting intersection S to the destination intersection T. Examples Input 4 5 1 4 1 2 40 1 3 20 2 3 10 2 4 30 3 4 20 Output 50 Input 3 3 1 3 1 2 5 2 3 10 1 3 2 Output 7 Input 5 7 1 5 1 2 10 1 3 5 2 3 15 2 4 5 3 4 10 3 5 5 4 5 10 Output 15","solution":"from collections import deque def bfs_capacity(graph, capacity, source, sink, parent): visited = [False] * len(graph) queue = deque([source]) visited[source] = True while queue: node = queue.popleft() for adj, cap in graph[node]: if not visited[adj] and capacity[node][adj] > 0: parent[adj] = node visited[adj] = True queue.append(adj) if adj == sink: return True return False def max_flow(N, M, S, T, edges): graph = [[] for _ in range(N)] capacity = [[0] * N for _ in range(N)] for u, v, c in edges: graph[u-1].append((v-1, c)) graph[v-1].append((u-1, c)) capacity[u-1][v-1] += c capacity[v-1][u-1] += c source = S - 1 sink = T - 1 parent = [-1] * N max_flow = 0 while bfs_capacity(graph, capacity, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, capacity[parent[s]][s]) s = parent[s] max_flow += path_flow v = sink while v != source: u = parent[v] capacity[u][v] -= path_flow capacity[v][u] += path_flow v = parent[v] return max_flow"},{"question":"Meera and her friends are developing a new board game, and they need your help to determine if certain game setups are valid. In this game, each player has a starting position on a 1-dimensional board represented by integers. The board extends infinitely in both directions. Each player can only move to positions within a specified range from their starting position. A game setup consists of the initial positions and ranges for all players. The game is considered valid if and only if no two players can move to the same position on the board. You are given the initial positions and ranges of all the players. You need to determine if the game setup is valid for each provided configuration. -----Input----- - The first line contains a single integer, T, which is the number of testcases. The description of each testcase follows. - The first line of every testcase contains a single integer, N, which is the number of players. - N lines follow, the i-th of which contains two integers: P_i and R_i, which correspond to the starting position and the movement range of the i-th player. -----Output----- For each testcase, output \\"YES\\" if the game setup is valid, otherwise \\"NO\\". -----Constraints----- - 1 leq T leq 3 - 2 leq N leq 10^6 - -10^9 leq P_i leq 10^9 - 1 leq R_i leq 10^9 -----Subtasks----- Subtask #1 (20 points): 1 leq N leq 10^3 Subtask #2 (40 points): 1 leq N leq 10^5 Subtask #3 (40 points): Original constraints. -----Sample Input----- 2 3 1 2 5 1 3 2 2 -3 3 4 2 -----Sample Output----- NO YES -----Explanation----- Testcase 1: - Player 1 can move to positions {1, 2, 3} - Player 2 can move to positions {4, 5, 6} - Player 3 can move to positions {3, 4, 5} There are overlapping positions (Player 1 and Player 3 can both move to position 3), so the game setup is not valid. Testcase 2: - Player 1 can move to positions {-6, -5, -4, -3, -2, -1, 0} - Player 2 can move to positions {2, 3, 4, 5, 6} There are no overlapping positions, so the game setup is valid.","solution":"def is_valid_game_setup(num_tests, test_cases): results = [] for i in range(num_tests): n = test_cases[i][0] players = test_cases[i][1] intervals = [] for p, r in players: intervals.append((p - r, p + r)) intervals.sort() valid = True for j in range(1, n): if intervals[j][0] <= intervals[j-1][1]: valid = False break if valid: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # EXAMPLE USAGE # num_tests, test_cases = parse_input() # results = is_valid_game_setup(num_tests, test_cases) # for result in results: # print(result)"},{"question":"You are given a sequence of integers and you need to determine whether it is a \\"peak sequence\\". A sequence is defined as a \\"peak sequence\\" if it strictly increases up to a single maximal element and then strictly decreases. The peak should be the greatest element and it should occur exactly once. For example, the sequence [1, 3, 5, 4, 2] is a peak sequence because it increases to 5 and then decreases. -----Input----- The first line contains a single integer n (1 leq n leq 1000) — the number of test cases. The first line of each test case contains an integer m (1 leq m leq 1000) — the length of the sequence. The second line of each test case contains m integers a_i (1 leq a_i leq 10^9) — the sequence elements. -----Output----- For each test case, print \\"YES\\" if the sequence is a peak sequence. Otherwise, print \\"NO\\". -----Examples----- Input 3 5 1 3 5 4 2 4 2 3 3 2 6 1 2 3 4 5 6 Output YES NO NO -----Note----- In the first test case, the sequence [1, 3, 5, 4, 2] is a peak sequence because it strictly increases to 5 and then strictly decreases. In the second test case, the sequence [2, 3, 3, 2] is not a peak sequence because the element 3 occurs more than once. In the third test case, the sequence [1, 2, 3, 4, 5, 6] is not a peak sequence because it does not strictly decrease after any maximal element.","solution":"def is_peak_sequence(sequence): Determines if a given sequence is a peak sequence. A sequence is a peak sequence if it strictly increases to a single maximal element and then strictly decreases. Args: sequence (list of int): The sequence of integers to check. Returns: str: \\"YES\\" if the given sequence is a peak sequence, otherwise \\"NO\\". n = len(sequence) if n < 3: return \\"NO\\" peak_found = False increasing = True for i in range(1, n): if increasing: if sequence[i] < sequence[i-1]: increasing = False peak_found = True elif sequence[i] == sequence[i-1]: return \\"NO\\" if not increasing: if sequence[i] >= sequence[i-1]: return \\"NO\\" if peak_found: return \\"YES\\" return \\"NO\\" def process_test_cases(n, test_cases): results = [] for m, sequence in test_cases: results.append(is_peak_sequence(sequence)) return results"},{"question":"In a city, a number of bike sharing stations are placed along various routes. Each bike sharing station has a certain number of bikes available, which can change over time. Each request to rent or return a bike is processed sequentially. Your job is to manage a log of all bike sharing stations and process requests effectively. A request can be: 1. \\"Rent x\\": Rent one bike from the station x (decreases the count of bikes at station x by 1). 2. \\"Return x\\": Return one bike to the station x (increases the count of bikes at station x by 1). 3. \\"Query x\\": Query the current number of bikes available at station x. Your task is to write a program that reads a sequence of requests and produces outputs for the \\"Query\\" requests. Input The first line of the input contains an integer n (1 ≤ n ≤ 100,000), the number of bike sharing stations. The second line contains n integers, b1, b2, ..., bn (0 ≤ b_i ≤ 10,000), where bi represents the initial number of bikes at the i-th station. The third line contains an integer m (1 ≤ m ≤ 200,000), the number of requests. The next m lines each contain one request in the format described above: either \\"Rent x\\", \\"Return x\\", or \\"Query x\\" (1 ≤ x ≤ n). Output For each \\"Query x\\" request, output a single integer representing the number of bikes available at station x. Example Input 5 8 2 5 3 10 7 Rent 3 Query 3 Return 1 Query 1 Rent 2 Query 2 Query 5 Output 4 9 1 10 Note Initially, the stations have the following numbers of bikes: [8, 2, 5, 3, 10]. - After \\"Rent 3\\": Stations: [8, 2, 4, 3, 10] - After \\"Query 3\\": Output: 4 - After \\"Return 1\\": Stations: [9, 2, 4, 3, 10] - After \\"Query 1\\": Output: 9 - After \\"Rent 2\\": Stations: [9, 1, 4, 3, 10] - After \\"Query 2\\": Output: 1 - After \\"Query 5\\": Output: 10","solution":"def bike_sharing(n, initial_bikes, m, requests): bike_stations = initial_bikes query_results = [] for req in requests: action, station = req.split() station = int(station) - 1 # convert to 0-based index if action == \\"Rent\\": bike_stations[station] -= 1 elif action == \\"Return\\": bike_stations[station] += 1 elif action == \\"Query\\": query_results.append(bike_stations[station]) return query_results"},{"question":"You are given an array of integers where each element represents the height of a building. The buildings are situated next to each other and you want to paint them such that no two adjacent buildings have the same color. You have an unlimited number of colors but each color has a specific cost associated with it. Your task is to minimize the total cost of painting all the buildings under these constraints. Implement a function `minimizePaintingCost(costs: List[List[int]]) -> int` where `costs[i][j]` represents the cost of painting the i-th building with the j-th color. # Example: **Input:** ``` costs = [ [1, 5, 3], [2, 9, 4] ] ``` **Output:** ``` 5 ``` **Explanation:** - Paint the 1st building with color 0 (cost=1) - Paint the 2nd building with color 2 (cost=4) - Total minimum cost = 1 + 4 = 5 # Note: - Every building must be painted, and adjacent buildings cannot have the same color. - The costs list will have at least one building (1 <= costs.length <= 100) and at least one color (1 <= costs[i].length <= 20).","solution":"from typing import List def minimizePaintingCost(costs: List[List[int]]) -> int: Returns the minimum cost to paint all buildings such that no two adjacent buildings have the same color. Params: costs: List[List[int]] - a list of lists where costs[i][j] is the cost of painting the i-th building with the j-th color. Returns: int - the minimum cost of painting all buildings. if not costs: return 0 n = len(costs) # number of buildings k = len(costs[0]) # number of colors dp = costs[0][:] # initialize dp array with the cost of painting the first building with each color for i in range(1, n): new_dp = [0] * k for j in range(k): new_dp[j] = costs[i][j] + min(dp[m] for m in range(k) if m != j) # prev building cost shouldn\'t be same color dp = new_dp return min(dp)"},{"question":"You are given an array of integers and a series of queries. For each query, you need to find the sum of a specific subarray of the array – from the start index to the end index (both inclusive). Input The first line contains a single integer N (1 ≤ N ≤ 10^5) - the number of elements in the array. The second line contains N integers representing the elements of the array (each element is between -10^3 and 10^3). The next line contains a single integer Q (1 ≤ Q ≤ 10^5) - the number of queries. The next Q lines each contain two integers l and r (1 ≤ l ≤ r ≤ N) - the start and end indices for each query. Output For each query, output the sum of the subarray from index l to index r inclusive in a new line. Example Input 5 1 2 3 4 5 3 1 3 2 5 1 5 Output 6 14 15","solution":"def subarray_sums(arr, queries): Returns the sum of subarrays for given queries. :param arr: List[int] - the array of integers :param queries: List[Tuple[int, int]] - list of tuples containing (l, r) indices for subarray sum :return: List[int] - list of sums for each query n = len(arr) # Create a prefix sum array prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] # Calculate sums for each query results = [] for l, r in queries: results.append(prefix_sum[r] - prefix_sum[l - 1]) return results"},{"question":"Create a function `is_palindrome` that takes a single string as input and returns `True` if the string is a palindrome and `False` otherwise. A string is considered a palindrome if it reads the same forward and backward, ignoring spaces, punctuation, and capitalization.","solution":"def is_palindrome(s): Returns True if the input string is a palindrome, otherwise returns False. Ignores spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lowercase filtered_s = \'\'.join(char for char in s if char.isalnum()).lower() # Check if the string reads the same forwards and backwards return filtered_s == filtered_s[::-1]"},{"question":"Simon is organizing a unique relay race where participants pass a baton to the next competitor based on a set of predefined rules. Each participant is represented by a number from 1 to N and each number is associated with one of two types of batons: \'R\' for red and \'G\' for green. Initially, each participant holds one baton of either type. Simon has discovered that a participant can pass the baton to the next one under specific conditions: - If a participant numbered i (1 ≤ i ≤ N) has the same type of baton as the next participant (i.e., i+1), they immediately pass their baton to the next participant. - This chain reaction continues until no participant can pass their baton further. Simon\'s goal is to determine the minimum number of times he needs to manually change the type of a participant’s baton so that all participants eventually end up holding batons of the same type, either all \'R\' or all \'G\'. Given T test cases, each containing a sequence representing the initial baton types of N participants, can you help Simon find out the minimum number of baton swaps required for each test case to achieve uniformity? ------ Input Format ------ - The first line contains T, the number of test cases. - For each test case: - The first line contains an integer N, the number of participants. - The second line contains a string S of size N representing the initial types of batons held by participants, where each character is either \'R\' or \'G\'. ------ Output Format ------ For each test case, output a single integer denoting the minimum number of times Simon has to change a participant’s baton type to ensure all participants have the same type of baton at the end. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 - S consists only of characters R and G - The sum of N over all test cases doesn\'t exceed 10^5 ------ Sample Input 1 ------ 3 6 RGRGRG 4 GGGR 5 RRRRR ------ Sample Output 1 ------ 3 1 0 ------ Explanation 1 ------ Test case 1: - Simon can change the batons at positions 2, 4, and 6 from \'G\' to \'R\' to make all batons \'R\'. Thus, `RGRGRG` -> `RRRRRR`. Test case 2: - Simon can change the baton at position 4 from \'R\' to \'G\' to make all batons \'G\'. Thus, `GGGR` -> `GGGG`. Test case 3: - All participants already have the same type of baton, so no changes are needed.","solution":"def min_baton_swaps(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] S = test_cases[i][1] # Count occurrences of \'R\' and \'G\' count_R = S.count(\'R\') count_G = S.count(\'G\') # The minimum swaps needed is to turn all into R or all into G min_swaps = min(count_R, count_G) results.append(min_swaps) return results"},{"question":"In a remote town, there is a special festival happening where a series of unique sound sequences will be played. Each sound sequence consists of a word made up of \'a\' and \'b\' characters only. However, the festival organizers have a peculiar set of rules for these sequences: 1. Each sequence must have exactly one \\"ab\\" substring. 2. Sequences are not allowed to have more than one \\"ab\\" substring. 3. Sequences can be of any length from 2 to N (inclusive), where N is provided as input. Your task is to compute the total number of valid sequences that can be constructed following the above rules. Input The input contains a single integer N (2 ≤ N ≤ 1000). Output Output a single integer — the total number of valid sequences. Examples Input 2 Output 1 Input 3 Output 3 Input 4 Output 7 Notes In sample case 1, only one sequence of length 2 is possible: \\"ab\\". In sample case 2, the valid sequences are: \\"ab\\", \\"aab\\", \\"abb\\". In sample case 3, the valid sequences are: \\"ab\\", \\"aab\\", \\"abb\\", \\"aaab\\", \\"aabb\\", \\"abab\\", \\"abbb\\".","solution":"def count_valid_sequences(N): Count the number of valid sequences of length from 2 to N inclusive, which contain exactly one \\"ab\\" substring. Parameters: N (int): The maximum length of the sequences. Returns: int: The total number of valid sequences. if N < 2: return 0 # For each length from 2 to N: count = 0 for length in range(2, N + 1): # Calculate the count for each position of \\"ab\\" count += 2 ** (length - 2) return count"},{"question":"A small town is hosting a local 5K race to raise funds for a charity. To ensure a smooth and safe event, the race organizers need to divide the participants into separate starting groups. The town\'s narrow streets can only accommodate a certain number of runners per group. Additionally, some runners have indicated they prefer not to start in the same group as specific other runners, possibly due to different pace preferences or past personal conflicts. Your task is to write a program that organizes the participants into the minimum number of groups while respecting their preferences. Each group\'s size must not exceed the given maximum number of runners. -----Input----- The first line contains three integers n, m, and g (1 le n le 20, 0 le m le frac{n(n-1)}{2} and 1 le g le n) – the number of participants, pairs of preferences, and the maximum group size, respectively. Then follow n lines with the participants\' names. Each name is non-empty, unique, and consists solely of characters A-Z or a-z, with a maximum length of 15 characters. Followed by m lines, each containing a pair of space-separated names indicating the participants who prefer not to be in the same starting group. -----Output----- On the first line, output the minimum number of groups required, followed by one line per group containing the names of the participants in that group (separated by spaces). -----Examples----- Sample Input: 4 2 2 John Jane Alice Bob John Jane Alice Bob Sample Output: 2 John Alice Jane Bob","solution":"from itertools import combinations def divide_groups(n, m, g, participants, preferences): from itertools import combinations import sys def is_valid_group(group, preferences): for a, b in combinations(group, 2): if (a, b) in preferences or (b, a) in preferences: return False return True def backtrack(start, current_group, groups, participants, preferences, max_group_size, min_groups): if start == len(participants): if len(groups) < min_groups[0]: min_groups[0] = len(groups) min_groups[1] = [list(group) for group in groups] return for i in range(len(groups)): if len(groups[i]) < max_group_size and is_valid_group(groups[i] + [participants[start]], preferences): groups[i].append(participants[start]) backtrack(start + 1, current_group, groups, participants, preferences, max_group_size, min_groups) groups[i].pop() groups.append([participants[start]]) backtrack(start + 1, current_group + 1, groups, participants, preferences, max_group_size, min_groups) groups.pop() preferences = set(tuple(p) for p in preferences) min_groups = [sys.maxsize, []] backtrack(0, 0, [], participants, preferences, g, min_groups) return min_groups[0], min_groups[1] # Example usage (parse input to match the solution\'s requirements): def parse_input(): n, m, g = map(int, input().strip().split()) participants = [input().strip() for _ in range(n)] preferences = [tuple(input().strip().split()) for _ in range(m)] return n, m, g, participants, preferences def main(): n, m, g, participants, preferences = parse_input() num_groups, groups = divide_groups(n, m, g, participants, preferences) print(num_groups) for group in groups: print(\\" \\".join(group)) # Uncomment below to run main when not in unit testing # if __name__ == \\"__main__\\": # main()"},{"question":"Alice loves playing with arrays. Recently, she came across a new type of problem. Alice is given two arrays, `A` and `B`, both consisting of `N` integers. She needs to check how many valid pairs (i, j) exist such that the sum of A[i] and B[j] equals a target value `X`. Input: The first line contains two integers, N and X, where N is the number of elements in each array and X is the target sum. The second line contains N integers, the elements of array A. The third line contains N integers, the elements of array B. Output: Output a single integer representing the number of valid pairs. Constraints: 1 ≤ N ≤ 100000 -10^9 ≤ A[i], B[j] ≤ 10^9 -10^9 ≤ X ≤ 10^9 SAMPLE INPUT 3 7 1 2 3 6 5 4 SAMPLE OUTPUT 3 Explanation Three valid pairs (i, j) exist such that the sum of A[i] and B[j] equals 7: 1. (0,0) since A[0] + B[0] = 1 + 6 = 7 2. (1,1) since A[1] + B[1] = 2 + 5 = 7 3. (2,2) since A[2] + B[2] = 3 + 4 = 7","solution":"def count_valid_pairs(N, X, A, B): Counts the number of valid pairs such that A[i] + B[j] = X. Parameters: N (int): Number of elements in each array. X (int): The target sum. A (list of int): The array A of integers. B (list of int): The array B of integers. Returns: int: Number of valid pairs. count = 0 B_set = set(B) # Convert array B to a set for O(1) lookups. for a in A: if X - a in B_set: count += 1 return count"},{"question":"You are given an integer array A of length N. Your task is to determin whether there is a subarray (i.e. a contiguous non-empty segment of the array) whose sum is equal to 0. Constraints * 1 leq N leq 10^5 * -10^9 leq A[i] leq 10^9 Input Input is given from Standard Input in the following format: N A[1] A[2] ... A[N] Output If there exists a subarray whose sum is equal to 0, print \\"Yes\\"; otherwise, print \\"No\\". Examples Input 5 4 2 -3 1 6 Output Yes Input 5 4 2 0 1 6 Output Yes Input 5 -3 2 3 1 6 Output No","solution":"def subarray_with_zero_sum(arr): Returns \\"Yes\\" if there is a subarray with sum 0, otherwise returns \\"No\\". prefix_sum = 0 prefix_sum_set = set() for num in arr: prefix_sum += num if prefix_sum == 0 or prefix_sum in prefix_sum_set: return \\"Yes\\" prefix_sum_set.add(prefix_sum) return \\"No\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:N+1])) print(subarray_with_zero_sum(A))"},{"question":"Given an `n x n` grid, a robot starts from the top-left corner (0,0) and needs to reach the bottom-right corner (n-1,n-1). The robot can only move either down or right at any point in time. However, some cells may contain obstacles, making them impassable. Write a function `count_paths_with_obstacles(grid: List[List[int]]) -> int` that takes a grid as input and returns the number of unique paths that the robot can take to reach the bottom-right corner. A cell in the grid is marked as: - `0` if it is an empty cell, - `1` if it contains an obstacle. If the starting cell or the destination cell contains an obstacle, return `0` as no paths would be possible. Input - A list of lists `grid`, representing the n x n grid (2 ≤ n ≤ 100). Output - An integer, the number of unique paths from the top-left corner to the bottom-right corner avoiding obstacles. Examples Input grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] Output 2 Input grid = [ [0, 1], [1, 0] ] Output 0","solution":"from typing import List def count_paths_with_obstacles(grid: List[List[int]]) -> int: n = len(grid) # If the starting or ending point is obstructed, there\'s no valid path if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 # Create a dp array dp = [[0] * n for _ in range(n)] # Initialize the starting point dp[0][0] = 1 # Fill the dp array for i in range(n): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] # The answer is in the bottom-right corner of the dp array return dp[n-1][n-1]"},{"question":"You are given two arrays `source` and `target` of the same length. Both arrays contain lowercase alphabet characters only. You are allowed to perform the following operations on `source` to match it with `target`: 1. Swap any two elements in `source`. 2. Replace any element in `source` with a different element. Write a function `min_operations_to_match(source, target)` that returns the minimum number of operations required to make `source` exactly match `target`. If it is not possible to make `source` match `target`, return -1. # Example: ```python source = [\'a\', \'b\', \'c\', \'d\'] target = [\'b\', \'a\', \'d\', \'c\'] min_operations_to_match(source, target) ``` Output: ``` 2 ``` # Explanation: In the example above, you can swap the first and second elements and the third and fourth elements in `source` to match `target`. Thus, the minimum number of operations required is 2.","solution":"def min_operations_to_match(source, target): Returns the minimum number of operations required to make `source` match `target`. if sorted(source) != sorted(target): return -1 mismatch_indices = [] for i in range(len(source)): if source[i] != target[i]: mismatch_indices.append(i) swaps_required = len(mismatch_indices) // 2 return swaps_required"},{"question":"Lena is planning her day and wants to organize her tasks in such a way that she completes them all within a given time frame. Each task has a specific duration and a deadline by which it must be completed. Lena can only work on one task at a time, and she must complete a task once she starts it. Help Lena determine the maximum number of tasks she can successfully complete without missing any deadlines, and the sequence in which she should complete them. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of tasks. Each of the next n lines contains two integers: the duration di (1 ≤ di ≤ 1,000) and the deadline ti (1 ≤ ti ≤ 10,000) of the ith task. Output In the first line, output the maximum number of tasks Lena can complete before their deadlines. In the second line, output the sequence of tasks (by their original indices) that Lena should complete to achieve the maximum number of tasks. If there are multiple valid sequences, output any of them. Examples Input 4 3 9 2 5 1 6 5 7 Output 3 2 3 1","solution":"def max_tasks_with_deadlines(n, tasks): # Sort the tasks primarily by their deadlines and secondarily by their durations tasks = sorted(enumerate(tasks), key=lambda x: (x[1][1], x[1][0])) current_time = 0 task_indices = [] count = 0 for index, (duration, deadline) in tasks: if current_time + duration <= deadline: task_indices.append(index + 1) current_time += duration count += 1 return count, task_indices"},{"question":"Given a binary string s, find the maximum length of a subsequence such that that it forms a palindrome. -----Input----- The first line contains a single integer t (1 le t le 100). Then t test cases follow. The first line of each test case contains a single string s (1 le |s| le 1000). -----Output----- For each test case, output a single integer — the length of the maximum palindromic subsequence. -----Examples----- Input 3 1100 10101 10001 Output 2 5 5 -----Note----- In the first test case, the maximum palindromic subsequence possible is \\"11\\" or \\"00\\" and the length is 2. In the second test case, the maximum palindromic subsequence possible is \\"10101\\" and the length is 5. In the third test case, the maximum palindromic subsequence possible is \\"10001\\" and the length is 5.","solution":"def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def solve(t, test_cases): results = [] for s in test_cases: results.append(longest_palindromic_subsequence(s)) return results"},{"question":"A **perfect number** is a positive integer that is equal to the sum of its proper divisors, excluding the number itself. For example, the smallest perfect number is ```6```, which has divisors ```1```, ```2```, and ```3``` (excluding ```6```), and the sum of these divisors is ```1 + 2 + 3 = 6```. Another example is ```28```, whose divisors (excluding itself) are ```1```, ```2```, ```4```, ```7```, and ```14```, and the sum is ```1 + 2 + 4 + 7 + 14 = 28```. Write a function ```isPerfectNumber(n)``` that determines whether a given positive integer ```n``` is a perfect number. If ```n``` is perfect, the function should return ```True```, otherwise, it should return ```False```.","solution":"def isPerfectNumber(n): Determines whether a given positive integer n is a perfect number. :param n: The integer to be checked. :return: True if n is a perfect number, otherwise False. if n <= 1: return False divisors_sum = 1 # Start with 1 as a divisor for i in range(2, int(n**0.5) + 1): if n % i == 0: divisors_sum += i if i != n // i: divisors_sum += n // i return divisors_sum == n"},{"question":"Pirates have discovered a hidden treasure on an island! The island is represented as a 2D grid, where each cell contains a value representing the amount of treasure at that location. The pirates can only move either right or down from one cell to the next cell. Starting from the top-left corner of the grid, the pirates want to maximize the amount of treasure they collect by the time they reach the bottom-right corner of the grid. Given an `n x m` grid, where each element in the grid is a non-negative integer representing the amount of treasure at that cell, calculate the maximum treasure the pirates can collect. -----Input----- The first line contains two integers n and m (1 le n, m le 1000), which represent the number of rows and columns in the grid respectively. The next n lines each contain m integers, where the j^{th} integer on the i^{th} line represents the amount of treasure in the cell at row i and column j (0 le text{treasure value} le 1000). -----Output----- A single integer, the maximum amount of treasure that can be collected. -----Examples----- Sample Input: 3 3 1 3 1 1 5 1 4 2 1 Sample Output: 12 Explanation: The best path to collect the maximum treasure is: (0, 0) rightarrow (0, 1) rightarrow (1, 1) rightarrow (2, 1) rightarrow (2, 2), collecting treasures 1 + 3 + 5 + 2 + 1 = 12.","solution":"def max_treasure(grid): Function to calculate the maximum amount of treasure that can be collected from the top-left to the bottom-right corner of the grid. if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) # Create a dp table to store the max treasure collected up to each cell dp = [[0] * m for _ in range(n)] # Initialize the top-left corner with the initial treasure value dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the maximum treasure collected return dp[-1][-1]"},{"question":"Farmer John has a rectangular field, represented as a grid of size NxM where each cell can either be empty, contain grass, or contain a rock. Farmer John wants to plant a special type of crop that requires a clear and rectangular section of land. He needs your help to find the largest rectangular section of the field that only contains grass and does not have any rocks. Your task is to write a program that finds the largest rectangular area within the field that contains only grass and no rocks, and returns its area. Input Format - The first line consists of two integers, N M, separated by a single space, indicating the number of rows and columns of the field respectively. - Each of the following N lines contains M characters, where each character is one of the following: - \'.\' representing an empty cell - \'G\' representing grass - \'R\' representing rock Constraints 1 <= N, M <= 500 Output Format - Print a single integer representing the area of the largest rectangular section containing only grass. Sample Input 4 5 G.GGG .G... GGGRR GGGGG Sample Output 6 Explanation In the given field, the largest rectangular area containing only grass has an area of 6. It starts from the second row and the second column to the third row and the third column, capturing three grass cells in the second row and three grass cells in the third row: ``` G.GGG .G... GGGRR GGGGG ``` The rectangular section of grass is: ``` G.GGG .GG.. ``` Therefore, the area is 6.","solution":"def maximalRectangle(matrix): if not matrix: return 0 max_area = 0 heights = [0] * len(matrix[0]) for row in matrix: for i in range(len(row)): if row[i] == \'G\': heights[i] += 1 else: heights[i] = 0 max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) heights.pop() return max_area def largestGrassRectangle(N, M, field): return maximalRectangle(field)"},{"question":"Dr. Evans is fascinated with coding competitions. He has recently come across a problem about organizing his book collection and needs your help to solve it. He has a bookshelf with `n` positions (numbered from 1 to n). Some of his books have already been placed on the shelf, while he has exactly `m` more books to place onto the shelf. Each of the existing books on the shelf occupies exactly one position. The `m` new books also need to be placed such that no two books occupy the same position. However, Dr. Evans wants to maximize the number of empty slots between any two placed books to give a tidy look to his bookshelf. Given the current arrangement of books and the number of new books to place, help Dr. Evans find the optimal positions for the new books. # Input The first input line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000) — the total number of positions on the shelf and the number of new books to be placed. The second line contains an integer `k` (0 ≤ k ≤ n) — the number of already placed books. The third line contains `k` distinct integers `a1, a2, ..., ak` (1 ≤ ai ≤ n) — the positions of the books that are already placed in ascending order. # Output Output one line containing `m` distinct integers (in any order), each indicating a position (1-based index) where one of the new books should be placed to maximize the empty slots between any two placed books. # Examples Input 5 2 2 1 5 Output 2 4 Input 7 3 3 2 4 6 Output 1 3 7 # Note In the first example, there are 5 positions on the shelf, with books already placed in positions 1 and 5. Two new books need to be placed to maximize the empty slots. The optimal positions are 2 and 4. In the second example, there are 7 positions on the shelf, with books placed in positions 2, 4, and 6. Three new books need to be placed. The optimal positions are 1, 3, and 7, which maximizes the gaps between the books.","solution":"def maximize_empty_slots(n, m, k, positions): This function will return m positions to place the new books such that the empty slots are maximized. all_positions = set(range(1, n+1)) occupied_positions = set(positions) available_positions = list(all_positions - occupied_positions) return sorted(available_positions[:m])"},{"question":"You are given a string `s` of length `n`. Your task is to transform this string into a palindrome by rearranging its characters, while making the minimum possible number of swaps between any two characters. If it is not possible to rearrange the characters of the string to form a palindrome, output \\"IMPOSSIBLE\\". A string is considered a palindrome if it reads the same backward as forward. For example, given the string `aabb`, one possible palindrome arrangement is `abba`, which requires only two swaps: 1. Swap the first `a` with the last `b` 2. Swap the second `a` with the second `b`. If the input string is `abc`, it is impossible to rearrange it to form a palindrome. Input The first line contains a string `s` (1 ≤ n ≤ 10^5). The string consists of lowercase English letters. Output If it is impossible to transform the string into a palindrome, output \\"IMPOSSIBLE\\". Otherwise, output the transformed string (it must be one of the possible palindrome arrangements). Examples Input aabb Output abba Input abc Output IMPOSSIBLE Note For the first example, `aabb` can be rearranged to form `abba`, which is a palindrome. There could be other valid arrangements as well such as `baab`. For the second example, `abc` cannot be rearranged to any palindrome.","solution":"from collections import Counter def can_form_palindrome(s): Check if it is possible to rearrange the string s into a palindrome. count = Counter(s) odd_count = sum(1 for val in count.values() if val % 2 != 0) # A palindrome can have at most one character with an odd count return odd_count <= 1 def rearrange_to_palindrome(s): if not can_form_palindrome(s): return \\"IMPOSSIBLE\\" count = Counter(s) left_half = [] middle_char = [] for char, freq in count.items(): half_freq = freq // 2 left_half.extend([char] * half_freq) if freq % 2 != 0: middle_char.append(char) left_half_str = \'\'.join(left_half) right_half_str = left_half_str[::-1] middle_str = \'\'.join(middle_char) return left_half_str + middle_str + right_half_str"},{"question":"John has recently taken up coding and has become fascinated with the concept of binary palindromes. A binary palindrome is a binary sequence that reads the same backward as forward. John wants to know how many binary palindromes exist for a given length n. Given an integer n, count the number of possible binary palindromes of length n. Output the result modulo 10^9 + 7. -----Input----- The input begins with an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains an integer n (1 le n le 10^6) — the length of the binary sequence. -----Output----- For each test case, output the number of binary palindromes of length n modulo 10^9 + 7. -----Example----- Input 2 3 4 Output 2 4 -----Note----- In the first test case, the binary palindromes of length 3 are: \\"000\\" and \\"111\\". In the second test case, the binary palindromes of length 4 are: \\"0000\\", \\"0110\\", \\"1001\\", and \\"1111\\".","solution":"MOD = 10**9 + 7 def count_binary_palindromes(n): if n % 2 == 0: k = n // 2 else: k = (n // 2) + 1 return pow(2, k, MOD) def solve(test_cases): results = [] for n in test_cases: results.append(count_binary_palindromes(n)) return results # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() t = int(data[0]) test_cases = [int(data[i]) for i in range(1, t + 1)] results = solve(test_cases) for res in results: print(res)"},{"question":"Alice has a fascination with palindromic strings. She has a long list of strings and she wants to filter out the strings which are palindromes. Write a program to help Alice by printing the palindromic strings from the list. The list ends when \\"END\\" is encountered. Input: A list of strings. Output: Print the palindromic strings from the list, one per line. Constraints: - All input strings contain only lowercase letters. - The list ends with the string \\"END\\". SAMPLE INPUT racecar hello level END SAMPLE OUTPUT racecar level","solution":"def print_palindromic_strings(strings): Print palindromic strings from the list. The list ends with the string \\"END\\". for s in strings: if s == \\"END\\": break if s == s[::-1]: print(s)"},{"question":"Given a binary tree, return the level order traversal of its nodes\' values as a list of lists. (i.e., from left to right, level by level). -----Input----- A binary tree. -----Output----- A list of lists representing the level order traversal. -----Examples----- Input 3 / 9 20 / 15 7 Output [ [3], [9,20], [15,7] ] Input 1 / 2 3 / 4 5 Output [ [1], [2,3], [4,5] ] Input 1 / 2 3 4 Output [ [1], [2,3], [4] ] -----Note----- You may assume that every node in the binary tree has a distinct value.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_traversal(root): Given a binary tree, return the level order traversal of its nodes\' values as a list of lists. if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) current_level = [] for _ in range(level_size): node = queue.popleft() current_level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(current_level) return result"},{"question":"Julix, a software engineer, is working on a network traffic analysis tool. In this tool, a network packet is represented as a sequence of space-separated integers, where each integer is the size of a fragment in the packet. The network traffic is considered “corrupted” if the sum of the sizes of all fragments in a packet is an odd number. To ensure reliable communication, the tool should identify and flag all corrupted packets. Write a program that processes multiple packets and determines whether each packet is corrupted or not based on the given criteria. -----Input:----- - The first line of the input contains a single integer T denoting the number of packets. - The next T lines each contain a sequence of space-separated integers representing the fragment sizes of each packet. -----Output:----- For each packet, print a single line containing either “CORRUPTED” if the packet is corrupted, or “OK” if the packet is not corrupted. -----Constraints----- - 1 leq T leq 1000 - Each packet contains between 1 and 100 fragments. - Each fragment size is an integer between 1 and 1000. -----Sample Input:----- 3 50 50 50 100 100 30 70 100 -----Sample Output:----- CORRUPTED OK OK -----EXPLANATION:----- - The first packet has fragment sizes 50, 50, and 50. The sum is 150, which is even. Hence, the packet is \\"OK\\". - The second packet has fragment sizes 100 and 100. The sum is 200, which is even. Hence, the packet is \\"OK\\". - The third packet has fragment sizes 30, 70, and 100. The sum is 200, which is even. Hence, the packet is \\"OK\\".","solution":"def analyze_packets(T, packets): Processes multiple packets and determines whether each packet is corrupted based on the sum of sizes of fragments. Parameters: T: int - the number of packets. packets: List of List of int - list containing sequences of space-separated integers representing fragment sizes. Returns: List of str - \\"CORRUPTED\\" or \\"OK\\" for each packet. results = [] for packet in packets: if sum(packet) % 2 == 0: results.append(\\"OK\\") else: results.append(\\"CORRUPTED\\") return results"},{"question":"The village of Zumana is situated in a remote area surrounded by dense forests and treacherous rivers. The villagers rely on a unique way of communication through a network of drum towers. Each drum tower is connected to certain other drum towers in the village, and a message can be relayed from one tower to another via these connections. The village elders want to ensure that any two drum towers can communicate with each other, either directly or indirectly. Given the number of drum towers and the possible connections between them, determine whether the communication network is fully connected or not. Input The first line contains an integer T, the number of test cases. Each test case consists of two integers N and M, where - N is the number of drum towers, - M is the number of possible connections between the towers. The next M lines each contain two integers A and B, indicating that there is a connection between drum tower A and drum tower B. Output For each test case, print \\"Yes\\" if the communication network is fully connected, otherwise print \\"No\\". Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ M ≤ N*(N-1)/2 SAMPLE INPUT 3 4 2 1 2 3 4 4 4 1 2 2 3 3 4 4 1 3 0 0 0 SAMPLE OUTPUT No Yes Yes Explanation For the first test case, there are two pairs of connected drum towers and they are not fully connected, so the output is \\"No\\". For the second test case, all drum towers are directly or indirectly connected, so the output is \\"Yes\\". For the third test case, with only one drum tower, it is trivially fully connected, so the output is \\"Yes\\".","solution":"def is_fully_connected(N, connections): Determines if the communication network is fully connected. Parameters: - N (int): Number of drum towers - connections (list of tuple): List of connections between towers Returns: - str: \\"Yes\\" if the network is fully connected, \\"No\\" otherwise if N == 1: return \\"Yes\\" from collections import defaultdict, deque graph = defaultdict(list) for A, B in connections: graph[A].append(B) graph[B].append(A) visited = set() def bfs(start): queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) queue.extend(graph[node]) bfs(1) return \\"Yes\\" if len(visited) == N else \\"No\\" def solve(T, test_cases): results = [] for N, M, connections in test_cases: results.append(is_fully_connected(N, connections)) return results"},{"question":"A company wants to track the achievements of its employees in terms of projects completed. Each employee has a unique ID and a name. A project is considered completed if an employee has spent more than 100 hours on it. Write a program that reads a record of employees with their names, IDs, and a list of pairs (project name and hours spent). Your task is to output the names of employees who have completed at least one project. Input The first line contains an integer n, the number of employees (1 ≤ n ≤ 50). Each of the next n lines contains the following in order, separated by spaces and/or commas: - A string (employee\'s name) - An integer (employee\'s ID) - An integer m (number of projects the employee worked on, 1 ≤ m ≤ 20) - m pairs, each pair containing: - A string (project name) - An integer (hours spent on the project, 1 ≤ hours ≤ 120) Output Output the names of employees who have completed at least one project, one per line. The order of names should match the order in the input. Examples Input 3 Alice 123 2 projectA 112 projectB 90 Bob 456 1 training 82 Charlie 789 3 develop 110 maintain 120 research 65 Output Alice Charlie","solution":"def get_employees_with_completed_projects(n, employee_records): completed_employees = [] for record in employee_records: parts = record.split() name = parts[0] # The employee ID is parts[1], which we do not use further num_projects = int(parts[2]) projects = parts[3:] for i in range(num_projects): project_name = projects[2 * i] hours_spent = int(projects[2 * i + 1]) if hours_spent > 100: completed_employees.append(name) break return completed_employees"},{"question":"\\"Becky is a video game developer who is working on a new puzzle game. In her game, players are given a string of characters and need to determine the longest substring that contains no more than k distinct characters. Becky wants to create a function to automate the calculation of this longest substring. You are given a string S consisting of lowercase English letters and an integer k. Your task is to find the length of the longest substring of S that contains at most k distinct characters. Input The input consists of two lines. The first line contains a single integer k (1 ≤ k ≤ 26) — the number of distinct characters allowed in the substring. The second line contains the string S (1 ≤ |S| ≤ 10⁵) which consists of lowercase English letters. Output Output a single integer — the length of the longest substring of S that contains at most k distinct characters. Examples Input 2 abaccc Output 4 Input 1 aaaaa Output 5 Note In the first example, the longest substring containing at most 2 distinct characters is \\"abac\\" or \\"bacc\\", both of which are 4 characters long. In the second example, the entire string \\"aaaaa\\" contains only 1 distinct character and hence the length of the substring is 5.\\"","solution":"def longest_substring_with_k_distinct(k, s): Returns the length of the longest substring with at most k distinct characters. :param k: Number of distinct characters allowed in the substring. :param s: The input string. :return: Length of the longest substring with at most k distinct characters. from collections import defaultdict n = len(s) if n * k == 0: return 0 left, right = 0, 0 max_length = 1 char_map = defaultdict(int) while right < n: char_map[s[right]] += 1 right += 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left) return max_length"},{"question":"Given an array of integers, write a function to return the difference between the maximum and minimum values in the array. The array can be empty. If it is, return 0. Python: calculate_difference([3, 7, 2, 5, 10]) = 8 # max is 10, min is 2, difference is 8 calculate_difference([]) = 0 # empty array, so return 0 calculate_difference([-10, -4, 3, 7]) = 17 # max is 7, min is -10, difference is 17","solution":"def calculate_difference(arr): Returns the difference between the maximum and minimum values in the array. If the array is empty, returns 0. if not arr: return 0 return max(arr) - min(arr)"},{"question":"A robot can move in a 2-dimensional grid consisting of rows and columns. Each cell in the grid can be empty, blocked, or contain a teleporter. The robot can move one cell up, down, left, or right if the next cell is empty. If the robot steps into a cell containing a teleporter, it will immediately be transported to the corresponding teleporter at another location in the grid, if such a teleporter exists. Each teleporter type is denoted by a letter, and there are exactly two teleporters of each type in the grid. However, some teleporters might be paired with themselves, meaning the robot will stay in the same cell after entering such a teleporter. Given the starting position of the robot and an ending position, determine whether the robot can reach the end position from the start position using any valid sequence of movements, including teleportations. -----Input----- The first line contains number t (1≤ t ≤ 50) — the number of test cases. Each test case starts with two integers n and m (2 ≤ n, m ≤ 50) — the number of rows and columns of the grid, respectively. This is followed by n lines, each containing m characters, describing the initial grid: - \'.\' denotes an empty cell. - \'#\' denotes a blocked cell. - \'T\' denotes a teleporter (with types A, B, C, ..., Z). - \'S\' denotes the starting position of the robot. - \'E\' denotes the ending position of the robot. It is guaranteed that there is exactly one \'S\' and one \'E\' in the grid. -----Output----- For each test case, print on a single line the answer to the problem: \\"YES\\", if the robot can reach the end position, and \\"NO\\" otherwise. -----Examples----- Input: 3 5 5 ..... .S#.T ..# T.#.E ..... 2 3 S#E # 3 4 S..B ..#. B..E Output: YES NO YES","solution":"def can_robot_reach_end(t, test_cases): from collections import deque results = [] for case in test_cases: n, m, grid = case start = None end = None teleporters = {} for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) if grid[i][j] == \'E\': end = (i, j) if grid[i][j].isalpha() and grid[i][j] != \'S\' and grid[i][j] != \'E\': teleporter_type = grid[i][j] if teleporter_type not in teleporters: teleporters[teleporter_type] = [] teleporters[teleporter_type].append((i, j)) visited = [[False] * m for _ in range(n)] queue = deque([start]) visited[start[0]][start[1]] = True while queue: x, y = queue.popleft() if (x, y) == end: results.append(\\"YES\\") break directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] != \'#\': visited[nx][ny] = True queue.append((nx, ny)) if grid[x][y].isalpha() and grid[x][y] != \'S\' and grid[x][y] != \'E\': for tx, ty in teleporters[grid[x][y]]: if not visited[tx][ty]: visited[tx][ty] = True queue.append((tx, ty)) else: results.append(\\"NO\\") return results # Input parsing function def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0].strip()) test_cases = [] idx = 1 for _ in range(t): n, m = map(int, lines[idx].strip().split()) grid = [list(lines[idx + 1 + i].strip()) for i in range(n)] test_cases.append((n, m, grid)) idx += 1 + n return t, test_cases"},{"question":"Pirates are not only difficult when it comes to speaking, but they also love to mix up their numbers when reading numerical values off a treasure map. Write a function that will accept a list of jumbled digits as well as a number, and output a boolean indicating whether the jumbled digits can be rearranged to form the given number. For example: ``` can_form_number([\\"5\\", \\"2\\", \\"3\\", \\"1\\"], 1235) ``` Should return `True`. And: ``` can_form_number([\\"3\\", \\"1\\", \\"4\\", \\"2\\"], 1235) ``` Should return `False`. Note: 1. The function should handle inputs where the list of digits may contain leading zeros or other irrelevant characters. 2. The input list will not be empty and will only contain characters that could represent digits.","solution":"def can_form_number(jumbled_digits, number): Check if the jumbled_digits can be rearranged to form the given number. Parameters: jumbled_digits (list of str): List of string digits. number (int): The target number. Returns: bool: True if jumbled_digits can form the number, False otherwise. # Convert the number to a sorted string number_str = sorted(str(number)) # Convert the list of jumbled_digits to a sorted list of digits jumbled_digits_sorted = sorted(jumbled_digits) # Compare the sorted versions return number_str == jumbled_digits_sorted"},{"question":"In a rectangular grid of size N x M, you are located at the top-left corner and your goal is to reach the bottom-right corner. You can only move either right or down at any point in time. You want to know in how many distinct ways you can reach the bottom-right corner of the grid. ------ Input Format ------ - The first line contains T, the number of test cases. Then the T test cases follow. - Each test case consists of a single line containing two integers N and M - representing the dimensions of the grid. ------ Output Format ------ For each test case, output the number of distinct ways to reach the bottom-right corner of the grid. ------ Constraints ------ 1 leq T leq 1000 1 leq N, M leq 1000 ----- Sample Input 1 ------ 3 2 2 3 2 3 3 ----- Sample Output 1 ------ 2 3 6 ----- Explanation 1 ------ Test Case 1: There are 2 distinct ways to move from (1,1) to (2,2): 1. Right -> Down 2. Down -> Right Test Case 2: There are 3 distinct ways to move from (1,1) to (3,2): 1. Right -> Down -> Down 2. Down -> Right -> Down 3. Down -> Down -> Right Test Case 3: There are 6 distinct ways to move from (1,1) to (3,3): 1. Right -> Right -> Down -> Down 2. Right -> Down -> Right -> Down 3. Right -> Down -> Down -> Right 4. Down -> Right -> Right -> Down 5. Down -> Right -> Down -> Right 6. Down -> Down -> Right -> Right","solution":"def number_of_ways(n, m): Returns the number of distinct ways to reach the bottom-right corner of an n x m grid by only moving right or down. This can be calculated using the combinatorial formula: C(n + m - 2, n - 1) or C(n + m - 2, m - 1) from math import comb return comb(n + m - 2, n - 1) def process_test_cases(test_cases): results = [] for n, m in test_cases: results.append(number_of_ways(n, m)) return results"},{"question":"Given an array of positive integers, you are to find the product of every integer in the array except the one at the current position and return the results as a new array. However, instead of computing the product directly, you must implement your solution such that you do not use division and your solution should have a time complexity of O(n). Input: - The first line contains a single integer T (number of test cases). - For each test case: - The first line contains an integer n (the number of elements in the array). - The second line contains n positive integers separated by spaces. Output: - For each test case, output a single line containing n integers which are the results of the described products. Constraints: - 1 ≤ T ≤ 100 - 2 ≤ n ≤ 1000 - 1 ≤ array[i] ≤ 10^9 Example: Input: 2 3 1 2 3 4 2 3 4 5 Output: 6 3 2 60 40 30 24","solution":"def product_except_self(nums): n = len(nums) left_products = [1] * n right_products = [1] * n result = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(n): result[i] = left_products[i] * right_products[i] return result def solve_product_arrays(test_cases): results = [] for case in test_cases: results.append(product_except_self(case)) return results"},{"question":"You are given an array of integers and your task is to find the maximum product of any three distinct elements from the array. -----Input----- The first line of input contains a single integer n (3 leq n leq 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^3 leq a_i leq 10^3) — the elements of the array. -----Output----- Output a single integer — the maximum product of any three distinct elements from the array. -----Examples----- Input 5 1 2 3 4 5 Output 60 Input 6 -10 -10 5 2 1 3 Output 500 -----Note----- In the first test case: The maximum product of any three distinct elements is 5 times 4 times 3 = 60. In the second test case: The maximum product of any three distinct elements is -10 times -10 times 5 = 500.","solution":"def max_product_of_three(nums): Returns the maximum product of any three distinct elements from the array. nums.sort() n = len(nums) # Consider the maximum product is either: # 1. Product of the three largest numbers # 2. Product of two smallest numbers (which could be negative) and the largest number product1 = nums[-1] * nums[-2] * nums[-3] product2 = nums[0] * nums[1] * nums[-1] return max(product1, product2)"},{"question":"You are given a string s representing a sequence of balanced parentheses. You can remove one character from the string and append it to the end of the string again. You want to determine the minimum number of such operations needed to make the string completely balanced, if the string is nearly balanced already (i.e., only one operation is needed). Input The input consists of a single string s (1 ≤ |s| ≤ 50), where |s| is the length of the string. Output Print a single integer — the minimum number of operations required to make the string balanced. Examples Input ())( Output 1 Input )( Output 1 Input ((())) Output 0 Note In the first example, removing the first character \'(\' and appending it to the end results in the sequence \'))()(\', making it balanced in one move. In the second example, removing the first character \')\' and appending it to the end results in the sequence \'()\' which is balanced in one move. In the third example, the sequence is already balanced, thus no operations are needed.","solution":"def min_operations_to_balance_parentheses(s): Determines the minimum number of operations needed to make the string completely balanced. left_count = 0 right_count = 0 for char in s: if char == \'(\': left_count += 1 else: if left_count > 0: left_count -= 1 else: right_count += 1 return max(left_count, right_count)"},{"question":"Three integer arrays of different sizes are given. Each integer represents the price of a product at a different store. You need to find the maximum profit you can achieve by buying a product from one store and selling it to another under the constraints that you can only buy from the first store and sell to the third store. If there\'s no possible profit, return zero. Example 1: Input: a[] = {4, 3, 1, 2} b[] = {7, 5, 8, 9, 2, 6} c[] = {10, 2, 15, 4, 8} Output: 14 Explanation: By buying a product at 1 from the first store and selling it at 15 to the third store, the maximum profit achieved is 14. Example 2: Input: a[] = {5, 6, 7} b[] = {8, 8} c[] = {1, 2, 3} Output: 0 Explanation: There is no way to make a positive profit from buying at the first store and selling at the third store. Your Task: Since, this is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function maxProfit() that takes array arr1, array arr2, array arr3 and returns an integer, the maximum profit. Expected Time Complexity: O(M + N + P), where M, N, and P are the sizes of the arrays respectively. Expected Auxiliary Space: O(1). Constraints: 1 ≤ M, N, P ≤ 10^{5} 1 ≤ arr1[i], arr2[i], arr3[i] ≤ 10^{6}","solution":"def max_profit(arr1, arr2, arr3): Returns the maximum profit from buying from arr1 and selling to arr3. min_buy = min(arr1) max_sell = max(arr3) profit = max_sell - min_buy return profit if profit > 0 else 0"},{"question":"Given a string `S` consisting of only capital alphabets (\'A\' to \'Z\') and a number `K`, perform a \\"K-hop transformation\\" on the string. In a K-hop transformation, you move each character `K` positions forward in the alphabet, wrapping around to the beginning if necessary. For example, given `S = \\"ABC\\"` and `K = 2`, the transformation would result in `\\"CDE\\"` because: - \'A\' becomes \'C\' - \'B\' becomes \'D\' - \'C\' becomes \'E\' If K is 26 or a multiple of 26, the string remains unchanged as there are 26 letters in the English alphabet. You need to return the transformed string after applying the K-hop transformation. -----Input----- The first line contains the string `S` of length n (1 leq n leq 1000), and the integer `K` where 0 leq K leq 10^9. -----Output----- Print the transformed string after applying the K-hop transformation. -----Examples----- Sample Input 1: HELLO 1 Sample Output 1: IFMMP Sample Input 2: ALPHABET 27 Sample Output 2: BMPIBHFU Sample Input 3: ZYXWV 25 Sample Output 3: YXWVU","solution":"def transform_string_k_hop(S, K): Perform a K-hop transformation on the input string S. K = K % 26 transformed = [] for char in S: new_char = chr((ord(char) - ord(\'A\') + K) % 26 + ord(\'A\')) transformed.append(new_char) return \'\'.join(transformed)"},{"question":"Given an integer array `arr` representing the stock price on each day, where `arr[i]` is the price on the i-th day, your task is to maximize the profit by finding pairs of buying and selling days. Each pair consists of a day to buy and a day to sell. The restriction is that you cannot engage in multiple buy-sell transactions simultaneously; you must sell the stock before you buy again. Function Description Complete the function `maxProfit` in the editor below. `maxProfit` has the following parameter(s): `int arr[n]`: an array of integers representing the stock price on each day Returns `int`: the maximum profit you can achieve from the given stock prices Input Format The first line contains a single integer, `n`, the number of days. Each line `i` of the `n` subsequent lines (1 <= i <= n) contains a single integer `arr[i]`, the stock price on day `i`. Constraints 1 leq n leq 10^5 0 leq arr[i] leq 10^4 Example Input 6 7 1 5 3 6 4 Output 7 Explanation In this example, you could buy on day 2 (price = 1) and sell on day 3 (price = 5), a profit of 5-1 = 4. Then you could buy on day 4 (price = 3) and sell on day 5 (price = 6), a profit of 6-3 = 3. Therefore, the maximum profit would be 4+3 = 7.","solution":"def maxProfit(arr): Calculates the maximum profit achievable by buying and selling stocks on given days. :param arr: List[int] - list of daily stock prices :return: int - maximum profit n = len(arr) if n <= 1: return 0 max_profit = 0 for i in range(1, n): if arr[i] > arr[i - 1]: max_profit += arr[i] - arr[i - 1] return max_profit"},{"question":"# The Task You are developing a simple weather application that informs users of the daily temperature in various cities around the world. The application connects to a weather API that returns temperature data in both Celsius and Fahrenheit. You need to implement a function that converts the temperature from Fahrenheit to Celsius, and another function that performs the reverse conversion. Requirements: 1. Implement a function `fahrenheit_to_celsius` that takes a temperature in Fahrenheit (float) as its argument and returns the temperature converted to Celsius (float). 2. Implement a function `celsius_to_fahrenheit` that takes a temperature in Celsius (float) as its argument and returns the temperature converted to Fahrenheit (float). 3. Ensure that the conversion functions handle precision up to two decimal places. Formula for conversion: - To convert Fahrenheit to Celsius: [ C = (F - 32) times frac{5}{9} ] - To convert Celsius to Fahrenheit: [ F = C times frac{9}{5} + 32 ] # Examples: ```python fahrenheit_to_celsius(32) # should return 0.0 fahrenheit_to_celsius(100) # should return 37.78 celsius_to_fahrenheit(0) # should return 32.0 celsius_to_fahrenheit(37.78) # should return 100.0 ``` # Additional Notes: - Your implementation should consider edge cases such as very low or very high temperatures. - Floating point calculations can sometimes result in precision errors; ensure your answers are rounded correctly to two decimal places.","solution":"def fahrenheit_to_celsius(fahrenheit): Converts a temperature from Fahrenheit to Celsius and rounds to two decimal places. Args: fahrenheit (float): Temperature in Fahrenheit. Returns: float: Temperature in Celsius rounded to two decimal places. celsius = (fahrenheit - 32) * 5.0 / 9.0 return round(celsius, 2) def celsius_to_fahrenheit(celsius): Converts a temperature from Celsius to Fahrenheit and rounds to two decimal places. Args: celsius (float): Temperature in Celsius. Returns: float: Temperature in Fahrenheit rounded to two decimal places. fahrenheit = celsius * 9.0 / 5.0 + 32 return round(fahrenheit, 2)"},{"question":"You are given a row of N houses, each with a certain amount of money stashed in it. The houses are arranged linearly, and you want to rob houses in such a way that no two adjacent houses are robbed on the same night. Determine the maximum amount of money you can rob tonight without alerting the police by using dynamic programming. Constraints * 1 leq N leq 10^5 * 0 leq money_i leq 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: N money_1 money_2 ... money_N Output Print the maximum amount of money you can rob. Examples Input 4 1 2 3 1 Output 4 Input 5 2 7 9 3 1 Output 12","solution":"def max_robbed_amount(n, houses): if n == 0: return 0 if n == 1: return houses[0] # Initialize the dp array where dp[i] means the maximum amount robbed till the i-th house. dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + houses[i]) return dp[n-1] if __name__ == \\"__main__\\": import sys input = sys.stdin.read() data = input.split() n = int(data[0]) houses = list(map(int, data[1:])) print(max_robbed_amount(n, houses))"},{"question":"You are given an undirected graph with N nodes and M edges. Each edge has a weight associated with it. Your task is to find out the maximum weight of an edge in the Minimum Spanning Tree (MST) of the given graph. For a given graph, the MST is a subgraph that connects all the vertices together, without any cycles and with the minimum possible total edge weight. Input: The first line contains two integers, N (number of nodes) and M (number of edges). The next M lines each contain three integers, u, v, and w, representing an edge between nodes u and v with weight w. Output: Print the maximum weight of an edge in the MST. Constraints: 1 ≤ N ≤ 10^5 1 ≤ M ≤ 2*10^5 1 ≤ u, v ≤ N 1 ≤ w ≤ 10^6 SAMPLE INPUT 4 5 1 2 3 1 3 1 3 2 5 4 2 4 4 3 2 SAMPLE OUTPUT 3","solution":"def find_max_weight_in_mst(N, M, edges): Finds the maximum weight of an edge in the Minimum Spanning Tree (MST) of the given graph. Uses Kruskal\'s algorithm to find the MST. # First, Kruskal\'s algorithm function to find MST def kruskal(N, edges): # Sort the edges by weight edges.sort(key=lambda x: x[2]) # Union-Find data structure with path compression and union by rank parent = list(range(N)) rank = [0] * N def find(v): if parent[v] != v: parent[v] = find(parent[v]) return parent[v] def union(v1, v2): root1 = find(v1) root2 = find(v2) if root1 != root2: if rank[root1] > rank[root2]: parent[root2] = root1 elif rank[root1] < rank[root2]: parent[root1] = root2 else: parent[root2] = root1 rank[root1] += 1 mst_edges = [] max_weight = 0 for u, v, w in edges: root_u = find(u) root_v = find(v) if root_u != root_v: union(u, v) mst_edges.append((u, v, w)) max_weight = max(max_weight, w) return max_weight # Adjusting 0-based indexing for the graph edges adjusted_edges = [(u-1, v-1, w) for u, v, w in edges] return kruskal(N, adjusted_edges)"},{"question":"Simon the Explorer is planning an expedition to gather valuable resources from various locations. Each location has a certain amount of resources that can be collected, but Simon can only visit a maximum of two consecutive locations in one trip to conserve energy. Given the resources available at different locations, help Simon determine the maximum amount of resources he can collect in a single trip. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the total number of locations. The second line contains n positive integers r_1, r_2, ..., r_{n} (1 ≤ r_{i} ≤ 1000), where r_{i} is the amount of resources available at the i-th location. -----Output----- Print a single integer — the maximum resources Simon can collect in a single trip. -----Examples----- Input 5 4 5 6 3 2 Output 11 Input 3 10 20 30 Output 50 Input 6 1 1 1 1 1 1 Output 2 -----Explanation----- In the first test sample, Simon can go to the 2nd (5 resources) and the 3rd (6 resources) locations to collect a total of 11 resources. In the second test sample, Simon can visit the 2nd location (20 resources) and the 3rd location (30 resources) to collect a total of 50 resources. In the third test sample, Simon can visit any two consecutive locations each having 1 resource to gather a total of 2 resources.","solution":"def max_resources(n, resources): if n == 1: return resources[0] max_collectable = 0 for i in range(n-1): max_collectable = max(max_collectable, resources[i] + resources[i+1]) return max_collectable"},{"question":"You are given a binary tree where each node contains an integer value. You need to determine if the tree is a \\"binary search tree\\" (BST). Recall that a binary search tree is defined as follows: - The left subtree of a node contains only nodes with values less than the node\'s value. - The right subtree of a node contains only nodes with values greater than the node\'s value. - Both the left and right subtrees must also be binary search trees. Write a function `isBST` that takes the root node of the tree as its input and returns `True` if the tree is a binary search tree and `False` otherwise. Example: Input: 4 / 2 5 / 1 3 Output: True Explanation: The given tree is a binary search tree as it satisfies all the BST properties mentioned above. Example: Input: 4 / 2 5 / 1 6 Output: False Explanation: The given tree is not a binary search tree as the left subtree of the root contains a node with a value (6) which is not less than the root\'s value (4). Your Task: You don\'t need to read input or print anything. Your task is to complete the function `isBST()` which takes the root node of the tree as input and returns a boolean indicating whether the given tree is a binary search tree or not. Expected Time Complexity: O(N), where N is the number of nodes in the tree. Expected Auxiliary Space: O(1), excluding the space required for the recursive stack. Constraints: - The number of nodes in the tree is between 1 and 10^4. - The value of each node is between -10^5 and 10^5.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def isBST(root): def validate(node, low=-float(\'inf\'), high=float(\'inf\')): if not node: return True if node.value <= low or node.value >= high: return False return validate(node.left, low, node.value) and validate(node.right, node.value, high) return validate(root)"},{"question":"You are given an array of integers and two integers `x` and `y`. Your task is to determine whether there is a pair of numbers in the array such that their difference is exactly `x`, and their sum is exactly `y`. Write a function `find_pair(arr, x, y)` which takes the array `arr` and integers `x` and `y` as inputs and outputs `True` if such a pair exists, otherwise `False`. # Input: Input consists of three parts: 1. An integer array `arr` which contains `n` integers. 2. An integer `x` representing the required difference. 3. An integer `y` representing the required sum. # Output: Return a boolean value (`True` or `False`) indicating if there exists a pair with the required difference and sum. # Constraints: - The array `arr` will have at least 2 elements and at most 10^5 elements. - Each integer in `arr` will have a value between -10^9 and 10^9. - The values of `x` and `y` will be between -10^9 and 10^9. # Example: ``` Input: arr = [1, 5, 3, 4, 2] x = 2 y = 5 Output: True Explanation: The pair (1, 3) has a difference of 2 and a sum of 5. ``` # Note: You do not need to handle the input/output from the terminal or files, just focus on the function implementation.","solution":"def find_pair(arr, x, y): Determines if there is a pair of numbers in the array such that their difference is exactly x and their sum is exactly y. :param arr: List[int], the array of integers :param x: int, the required difference :param y: int, the required sum :return: True if such a pair exists, False otherwise seen = set() for num in arr: desired1 = (y - x) // 2 desired2 = (y + x) // 2 if (desired1 in seen) or (desired2 in seen): return True seen.add(num) return False"},{"question":"DNS Records Management Story You are employed by a startup that provides a custom DNS management service to various companies. Your company has developed a proprietary system to handle DNS records, but it lacks a crucial feature: an automated way of checking the validity of DNS records. You have been tasked with creating a utility to validate whether DNS records conform to specific constraints. Task You must write a function `validate_dns_record` that accepts 1 required argument `record` which is a string containing the DNS record you want to validate. The function should return `True` if the record is valid, and `False` if it is not. DNS records can take on several forms, but for this task, you will focus on the following types: 1. **A Record**: Maps a domain name to an IPv4 address. The format is `A <domain> <IPv4-address>`. Example: `A example.com 192.168.1.1` 2. **CNAME Record**: Maps a domain name to another domain name. The format is `CNAME <domain> <target-domain>`. Example: `CNAME www.example.com example.com` 3. **MX Record**: Maps a domain name to a mail server and a priority. The format is `MX <domain> <priority> <mailserver>`. Example: `MX example.com 10 mail.example.com` # Constraints and Validation Rules: 1. **General Rules**: - Domain names must follow the rules of RFC 1035 and RFC 2181: The domain name may contain letters, digits, hyphens, and dots. It must not exceed 253 characters in length. - Domain labels (the parts of the domain separated by dots) must be 63 characters or less. - No domain label may start or end with a hyphen. - A domain name must not start with a dot. 2. **IPv4 Rules**: - An IPv4 address should consist of four decimal numbers separated by dots, and each number should be in the range of 0 to 255. 3. **MX Priority Rules**: - The priority must be a whole number between 0 and 65535, inclusive. # Function Signature: ```python def validate_dns_record(record: str) -> bool: pass ``` # Examples: ```python validate_dns_record(\\"A example.com 192.168.1.1\\") # True validate_dns_record(\\"CNAME www.example.com example.com\\") # True validate_dns_record(\\"MX example.com 10 mail.example.com\\") # True validate_dns_record(\\"A example.com 999.999.999.999\\") # False validate_dns_record(\\"MX example.com mail.example.com 10\\") # False validate_dns_record(\\"A -example.com 192.168.1.1\\") # False ``` Please ensure your implementation follows the above constraints strictly to validate the DNS records effectively.","solution":"import re def validate_dns_record(record: str) -> bool: def validate_domain(domain): if len(domain) > 253: return False labels = domain.split(\'.\') for label in labels: if len(label) > 63 or not re.match(r\'^[A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])?\', label): return False return True def validate_ipv4(ip): parts = ip.split(\'.\') if len(parts) != 4: return False for part in parts: if not part.isdigit() or not (0 <= int(part) <= 255): return False return True parts = record.split() if len(parts) < 3: return False record_type, domain = parts[0], parts[1] if not validate_domain(domain): return False if record_type == \\"A\\": if len(parts) != 3 or not validate_ipv4(parts[2]): return False elif record_type == \\"CNAME\\": if len(parts) != 3 or not validate_domain(parts[2]): return False elif record_type == \\"MX\\": if len(parts) != 4 or not parts[2].isdigit() or not (0 <= int(parts[2]) <= 65535) or not validate_domain(parts[3]): return False else: return False return True"},{"question":"A company has a series of warehouses, each containing a certain number of items. Due to logistical changes, an automated system is now to be implemented. Your task is to program a function that adjusts the number of items in these warehouses according to the instructions given. Each instruction consists of three elements: an operation type (`add` or `remove`), a warehouse index, and a value. If the operation type is `add`, the specified number of items should be added to the warehouse at the given index. If the operation type is `remove`, the specified number of items should be removed from the warehouse at the given index. Warehouses cannot have a negative number of items, so if an instruction would reduce the number of items below zero, it should set the number of items in that warehouse to zero. INPUT: - The first line contains two integers `N` and `M`, where `N` is the number of warehouses and `M` is the number of instructions. - The second line contains `N` integers, representing the initial number of items in each warehouse. - Each of the next M lines represents an instruction and contains an operation type (`add` or `remove`), an integer `index` (1-based) and an integer `value`. OUTPUT: - Print the final state of all warehouses on a single line, with the number of items in each warehouse separated by a space. Constraints: 1. 1 ≤ N, M ≤ 100 2. 0 ≤ Initial number of items in each warehouse ≤ 1000 3. 1 ≤ index ≤ N 4. 1 ≤ value ≤ 1000 SAMPLE INPUT 4 3 100 200 300 400 add 2 50 remove 3 100 remove 1 150 SAMPLE OUTPUT 0 250 200 400 Explanation: Initial state: [100, 200, 300, 400] First instruction: add 50 items to warehouse 2 -> [100, 250, 300, 400] Second instruction: remove 100 items from warehouse 3 -> [100, 250, 200, 400] Third instruction: remove 150 items from warehouse 1 -> [0, 250, 200, 400]","solution":"def adjust_warehouses(N, M, initial_items, instructions): warehouses = initial_items[:] for instruction in instructions: operation, index, value = instruction if operation == \'add\': warehouses[index - 1] += value elif operation == \'remove\': warehouses[index - 1] = max(warehouses[index - 1] - value, 0) return warehouses"},{"question":"A: Merge and Sort Arrays problem Given two arrays A and B containing N and M integers respectively, first merge the two arrays into one sorted (in non-decreasing order) array. Then, find and output the K-th smallest integer in the merged array. If the value of K is greater than the total number of elements in the merged array, output -1. Input format N M K A_1 A_2 ... A_N B_1 B_2 ... B_M Constraints * 1 leq N, M leq 10^5 * 1 leq K leq 2 times 10^5 * | A_i |, | B_i | leq 10^9 Output format Print the K-th smallest integer in the merged array on one line. If K is greater than the number of elements in the merged array, print -1. Input example 1 3 4 5 2 5 8 1 3 6 9 Output example 1 6 Input example 2 2 2 5 7 10 3 4 Output example 2 -1 Example Input 3 3 4 1 3 5 2 4 6 Output 4","solution":"def merge_and_find_kth(N, M, K, A, B): Merges two sorted arrays A and B and finds the K-th smallest element in the merged array. If K is greater than the number of elements in the merged array, returns -1. merged_array = sorted(A + B) if K > len(merged_array): return -1 else: return merged_array[K-1]"},{"question":"Lara loves crystals and collects them. Each crystal has a unique integer identifier. She has an array of crystal identifiers and some of them might be repeated. She wants to know the number of distinct crystal identifiers in each subarray of her array. For optimization, she decided to only count distinct identifiers in the subarrays provided as queries. You need to help Lara by writing a program that processes the queries efficiently. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of crystals in Lara\'s array. The second line contains n integers c[1], c[2], ..., c[n] (1 ≤ c[i] ≤ 10^6) — the identifiers of the crystals. The third line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the following q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — describing the bounds of the subarray for which Lara wants to know the number of distinct crystal identifiers. -----Output----- For each query, output a single integer — the number of distinct crystal identifiers in the subarray from l to r (inclusive). -----Examples----- Input 5 1 2 1 3 2 3 1 3 2 4 1 5 Output 2 3 3 Input 7 1 1 2 5 3 3 2 2 3 6 1 7 Output 4 4 ----Note---- In the first example: - The subarray from 1 to 3 consists of [1, 2, 1] and has 2 distinct identifiers: 1 and 2. - The subarray from 2 to 4 consists of [2, 1, 3] and has 3 distinct identifiers: 1, 2, and 3. - The subarray from 1 to 5 consists of [1, 2, 1, 3, 2] and has 3 distinct identifiers: 1, 2, and 3. In the second example, - The subarray from 3 to 6 consists of [2, 5, 3, 3] and has 3 distinct identifiers: 2, 3, and 5. - The subarray from 1 to 7 consists of [1, 1, 2, 5, 3, 3, 2] and has 4 distinct identifiers: 1, 2, 3, and 5.","solution":"def distinct_identifiers(n, crystals, q, queries): Returns the number of distinct crystal identifiers for each subarray defined by the queries. results = [] for (l, r) in queries: subarray = crystals[l-1:r] distinct_count = len(set(subarray)) results.append(distinct_count) return results"},{"question":"There is a unique ancient tree in the middle of a forest. This tree has n leaves, numbered from 1 to n, and each leaf has a value associated with it, denoted as v[i]. These leaves are connected in such a way that they form a straight line (i.e., a path), where leaf i is directly connected to leaf i+1 for 1 ≤ i < n. Your task is to write a program to determine the maximum sum of values from a contiguous subsequence of leaves. A contiguous subsequence of leaves is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. **Input** - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of leaves. - The second line contains n integers v[1], v[2], ..., v[n] (-10^9 ≤ v[i] ≤ 10^9), the values associated with the leaves. **Output** - Output a single integer, the maximum sum of a contiguous subsequence of leaves. **Examples** _Input_ 6 -2 1 -3 4 -1 2 1 -5 4 _Output_ 6 _Input_ 5 1 2 3 4 5 _Output_ 15 **Hint** For the first example, the maximum sum is obtained by the contiguous subsequence [4, -1, 2, 1], with sum 6. In the second example, the maximum sum is obtained from the entire array [1, 2, 3, 4, 5], with sum 15.","solution":"def max_sum_contiguous_subsequence(n, v): Returns the maximum sum of a contiguous subsequence of leaves. # Implementing Kadane\'s algorithm max_current = v[0] max_global = v[0] for i in range(1, n): max_current = max(v[i], max_current + v[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Shawn is fascinated by squares with symmetrical patterns and decided to create his own type of symmetrical square, which he calls a mirrored square. A square of size n × n is called a mirrored square if it satisfies the following conditions: * All numbers in the square are non-negative integers not exceeding 10^5; * The square is mirrored along its main diagonal (top-left to bottom-right), which means that element at position (i, j) is equal to the element at position (j, i) for all valid i and j; * The sum of the elements in each row and each column is a non-prime number. Shawn gives you an integer n and asks you to construct any mirrored square of size n × n. He guarantees that such squares always exist, so just help him! Input The first line contains a single integer m (1 ≤ m ≤ 10) — the number of test cases. Each of the next m lines contains a single integer n (2 ≤ n ≤ 100) — the required size of a square. Output For each test case print n lines, each containing n integers — the mirrored square you built. If there are multiple answers, print any. Example Input 2 3 2 Output 6 8 6 8 9 8 6 8 6 4 8 8 9","solution":"def generate_mirrored_square(n): Generates a mirrored square of size n x n where the sum of elements in each row and each column is a non-prime number. square = [[11] * n for _ in range(n)] for i in range(n): square[i][i] = 12 return square def mirrored_squares(test_cases): Takes a list of test cases, each with a size \'n\', and returns the generated mirrored squares for each case. results = [] for n in test_cases: results.append(generate_mirrored_square(n)) return results"},{"question":"Snuke is organizing a robotic competition. The competition involves N robots. Each robot has a certain skill level that is represented by an integer. Snuke wants to form pairs of robots for a series of duels. For each duel, a robot with skill level x will duel a robot with an equal or higher skill level. To ensure that each duel is as competitive as possible, maximize the sum of the differences in their skill levels for all the duels conducted. Snuke can only pair each robot once. If there are two possible optimally competitive pairings resulting in the same sum, it does not matter which pairing is chosen. # Constraints # * 1≦N≦50 * 1≦skill_i≦100 * N is an even number # Input # The input is given from Standard Input in the following format: N skill_1 skill_2 ... skill_N # Output # Print the maximum sum of differences in skill levels for the optimal pairings. # Sample Input # 4 1 3 5 9 # Sample Output # 10 # Explanation # By pairing the robots with skill levels 1 and 5, and 3 and 9, the differences are 5 - 1 = 4 and 9 - 3 = 6. The total difference is 4 + 6 = 10. This is the maximum sum of the differences possible.","solution":"def maximize_sum_of_differences(N, skills): skills.sort() sum_differences = 0 for i in range(N // 2): sum_differences += skills[N - 1 - i] - skills[i] return sum_differences"},{"question":"Given a list of `N` strings, your task is to determine the number of strings that contain all five vowels (\'a\', \'e\', \'i\', \'o\', \'u\') at least once. INPUT: The first line of input contains a single integer `N` denoting the number of strings. Each of the next `N` lines contains a single string. OUTPUT: Output a single integer, the count of strings that contain all five vowels at least once. CONSTRAINTS: 1 ≤ N ≤ 10^5 1 ≤ Length of each string ≤ 10^5 The strings consist only of lowercase English letters. SAMPLE INPUT: 3 education umbrella sequoia SAMPLE OUTPUT: 2 Explanation: - \\"education\\" contains \'a\', \'e\', \'i\', \'o\', \'u\' - \\"umbrella\\" contains \'a\', \'e\', \'u\' but not \'i\' and \'o\' - \\"sequoia\\" contains \'a\', \'e\', \'i\', \'o\', \'u\' Thus, two strings (\\"education\\" and \\"sequoia\\") include all five vowels.","solution":"def count_strings_with_all_vowels(strings): Returns the number of strings in the list that contain all five vowels. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} count = 0 for string in strings: if vowels.issubset(set(string)): count += 1 return count"},{"question":"A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is `9009` = `91` × `99`. A useful property to note is that for a number to be palindromic, its reverse must be equal to itself. Your task is to find the largest palindrome made from the product of two 3-digit numbers. # Function Signature ```python def largest_palindrome_product() -> int: pass ``` # Input - There are no inputs for this function. # Output - The function should return an integer, which is the largest palindrome made from the product of two 3-digit numbers. # Example ```python assert largest_palindrome_product() == 906609 ``` # Constraints - The range of 3-digit numbers is from 100 to 999. # Hints - One approach is to generate all products of two 3-digit numbers and check if they are palindromic. - Another approach is to start from the largest 3-digit number and work downwards, checking for palindromic products. - Use string manipulation methods to check if a number is palindromic.","solution":"def is_palindrome(n): Check if a number is a palindrome. return str(n) == str(n)[::-1] def largest_palindrome_product(): Find the largest palindrome made from the product of two 3-digit numbers. max_palindrome = 0 for i in range(999, 99, -1): for j in range(i, 99, -1): product = i * j if is_palindrome(product) and product > max_palindrome: max_palindrome = product return max_palindrome"},{"question":"Task Write a function that takes a list of non-negative integers and a target sum as input, and finds the minimum length of a subarray that adds up to the target sum. If no such subarray exists, return -1. # Function Signature ```python def min_subarray_length(numbers: List[int], target: int) -> int: pass ``` # Input - `numbers`: a list of non-negative integers. - `target`: a non-negative integer representing the target sum. # Output - An integer representing the minimum length of the subarray that adds up to the target, or -1 if no such subarray exists. # Constraints - The length of the `numbers` list will be between 1 and 10000. - The values in `numbers` will be between 0 and 1000. - The `target` will be a non-negative integer less than or equal to the sum of the elements in `numbers`. # Examples ```python min_subarray_length([2,3,1,2,4,3], 7) => 2 min_subarray_length([1,4,4], 4) => 1 min_subarray_length([1,1,1,1,1,1,1,1], 11) => -1 ```","solution":"from typing import List def min_subarray_length(numbers: List[int], target: int) -> int: n = len(numbers) min_length = float(\'inf\') start = 0 current_sum = 0 for end in range(n): current_sum += numbers[end] while current_sum >= target: min_length = min(min_length, end - start + 1) current_sum -= numbers[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"A string is called “balanced” if every character in the string appears the same number of times. For example, the string \\"aabbcc\\" is balanced because each character appears twice, while the string \\"aaabbc\\" is not balanced because \'a\' appears three times, \'b\' appears twice, and \'c\' appears once. Your task is to write a program that determines if a given string is balanced. Input The input contains multiple lines. Each line contains a single string consisting only of lowercase English letters. The input terminates with a line containing a single asterisk (*) and should not be processed. Output For each string, output \\"YES\\" if the string is balanced and \\"NO\\" otherwise. Example Input aabbcc aaabbc abcdab aaaa * Output YES NO NO YES","solution":"def is_balanced(s): from collections import Counter char_counts = Counter(s) values = list(char_counts.values()) return all(val == values[0] for val in values) def process_strings(strings): results = [] for s in strings: if s == \\"*\\": break results.append(\\"YES\\" if is_balanced(s) else \\"NO\\") return results"},{"question":"In a computer graphics software, layers of images are manipulated in various ways. One common operation is to merge a series of layers together into a single image. The merging process involves combining the pixel values of each layer in a specific order, usually by a given set of pairwise operations. Each layer is represented as a matrix of integers, where each integer represents the brightness of a pixel. Consider a scenario where you have N layers, each of size M times M , and you need to perform a series of K merge operations on these layers. Each merge operation specifies two layers A and B , where the resultant merged layer will have each pixel value as the maximum of the corresponding pixels from layers A and B . The original layer A is then replaced with this merged layer A , and layer B remains unchanged. You are required to write a program that simulates these merge operations and answers queries about the pixel values in specified layers after all merges are done. The queries will ask for the brightness value of a specific pixel in a specific layer. # Input The input is given in the following format: ``` N M K Q layer_1 :: layer_N A1 B1 :: AK BK query_1 :: query_Q ``` - The first line contains four integers N ( 2 leq N leq 100 ), M ( 1 leq M leq 50 ), K ( 1 leq K leq 100 ), and Q ( 1 leq Q leq 1,000 ). - The next N blocks each represent a layer and consist of M times M integers separated by spaces. - The next K lines each contain two integers A_i and B_i ( 1 leq A_i, B_i leq N , A_i ne B_i ) representing the merge operations. - The next Q lines contain three integers each representing a query: L ( 1 leq L leq N ), R ( 1 leq R leq M ), and C ( 1 leq C leq M ) asking for the brightness value at position (R, C) in layer L . # Output For each query, output the brightness value in the specified layer at the specified pixel location after all merge operations. # Example Input ``` 3 2 3 2 1 2 3 4 5 6 7 8 1 2 2 3 1 3 1 1 2 2 1 1 ``` # Example Output ``` 3 5 ``` # Explanation The initial layers are: Layer 1: ``` 1 2 3 4 ``` Layer 2: ``` 5 6 7 8 ``` Layer 3: ``` 1 2 3 4 ``` After the merge operations: - Merge Layer 1 and Layer 2 results in: ``` 5 6 7 8 ``` - Merge Layer 1 and Layer 3 results in: ``` 5 6 7 8 ``` - Merge Layer 2 and Layer 3 results in: Layer 2 remains unchanged. The queries ask for: 1. Brightness value at (1, 2) in Layer 1, which is `6`. 2. Brightness value at (1, 1) in Layer 2, which is `5`.","solution":"def merge_layers(layers, merge_operations): N, M = len(layers), len(layers[0]) def merge(A, B): for i in range(M): for j in range(M): layers[A][i][j] = max(layers[A][i][j], layers[B][i][j]) for A, B in merge_operations: merge(A - 1, B - 1) def query_layer(layers, L, R, C): return layers[L - 1][R - 1][C - 1] def process_graphics_merging(N, M, K, Q, layer_data, operations, queries): layers = [] idx = 0 for _ in range(N): layer = [] for _ in range(M): layer.append(layer_data[idx]) idx += 1 layers.append(layer) merge_layers(layers, operations) results = [] for L, R, C in queries: results.append(query_layer(layers, L, R, C)) return results"},{"question":"Wandering Trees Story In a small village surrounded by a vast forest, the villagers have a unique problem. The trees in the forest often wander around during the night, leading to a different configuration of the forest every morning. The villagers decided to map the forest every day. They represent the forest as a rooted tree, where nodes represent the trees, and edges represent the pathways between them. The root of the tree represents the starting point of the main pathway into the forest. Problem Statement The villagers want to identify whether the arrangement of trees on two different days represents the same forest configuration up to node renaming. In other words, they need to check if two rooted trees are isomorphic. Two trees are isomorphic if they can be made identical by renaming their nodes. You are given two rooted trees. Your task is to write a program to determine whether these two trees are isomorphic. Input 2T N1 u1 v1 ... u{N1-1} v{N1-1} N2 w1 x1 ... w{N2-1} x{N2-1} The first line contains the number of test cases T. Each test case starts with an integer N1, the number of nodes in the first tree, followed by N1 - 1 lines of integer pairs (u_i, v_i) describing the edges of the first tree. Then follows an integer N2, the number of nodes in the second tree, followed by N2 - 1 lines of integer pairs (w_i, x_i) representing the edges of the second tree. Constraints * 1 ≤ T ≤ 20 * 2 ≤ N1, N2 ≤ 1000 * 1 ≤ u_i, v_i, w_i, x_i ≤ 1000 (1-based index) Output For each test case, output \\"Yes\\" if the two trees are isomorphic, and \\"No\\" otherwise. Sample Input 2 3 1 2 1 3 3 1 2 1 3 4 1 2 2 3 3 4 4 1 2 1 3 1 4 Output Yes No Explanation of Sample Input In the first test case, the trees are: Tree 1: Tree 2: 1 1 / / 2 3 2 3 Both trees have the same structure and hence are isomorphic. In the second test case, the trees are: Tree 1: Tree 2: 1 1 | / | 2 2 3 4 | 3 | 4 The structures of these trees are different, so they are not isomorphic.","solution":"from collections import defaultdict from typing import List, Tuple def hash_tree(children, root, parent): Helper function to recursively generate hash representation of the tree primes = [31, 29, 23, 19, 17] subtree_hash = [] for child in children[root]: if child != parent: subtree_hash.append(hash_tree(children, child, root)) subtree_hash.sort() result = 1 for idx, h in enumerate(subtree_hash): result = result * primes[idx % len(primes)] + h return result def are_isomorphic(edges1: List[Tuple[int, int]], edges2: List[Tuple[int, int]]) -> str: if len(edges1) != len(edges2): return \\"No\\" # Build adjacency list for both trees def build_adj_list(edges): adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) return adj_list adj_list1 = build_adj_list(edges1) adj_list2 = build_adj_list(edges2) # Generate hash representation of both trees starting from node 1 tree1_hash = hash_tree(adj_list1, 1, -1) tree2_hash = hash_tree(adj_list2, 1, -1) return \\"Yes\\" if tree1_hash == tree2_hash else \\"No\\" def process_input(input_data: str) -> List[str]: lines = input_data.strip().split(\\"n\\") idx = 0 num_cases = int(lines[idx]) idx += 1 results = [] for _ in range(num_cases): N1 = int(lines[idx]) idx += 1 edges1 = [] for _ in range(N1 - 1): u, v = map(int, lines[idx].split()) edges1.append((u, v)) idx += 1 N2 = int(lines[idx]) idx += 1 edges2 = [] for _ in range(N2 - 1): w, x = map(int, lines[idx].split()) edges2.append((w, x)) idx += 1 result = are_isomorphic(edges1, edges2) results.append(result) return results"},{"question":"Given an array of integers, return the smallest possible positive integer that does not appear as the sum of any non-empty subsequence of the array. Example 1: Input: [1, 2, 2, 4] Output: 10 Explanation: All non-empty subsequences of the array sum up to 1, 2, 3, 4, 5, 6, 7, 8, 9. The smallest positive integer that is not obtainable as the sum of any subsequence is 10. Example 2: Input: [1, 1, 1, 1] Output: 5 Explanation: All non-empty subsequences of the array sum up to 1, 2, 3, and 4. The smallest positive integer that is not obtainable as the sum of any subsequence is 5. Note: - 1 <= arr.length <= 20 - 1 <= arr[i] <= 100,000","solution":"def smallest_non_obtainable_sum(arr): Given an array of integers, return the smallest possible positive integer that does not appear as the sum of any non-empty subsequence of the array. arr.sort() smallest_missing = 1 for number in arr: if number > smallest_missing: break smallest_missing += number return smallest_missing"},{"question":"Marco has a list of N integers, and he wants to manipulate the list to make the sum of its elements as large as possible. Marco can perform exactly K operations where in each operation, he can either select one element and add 1 to it or select one element and subtract 1 from it. However, he cannot add or subtract from the same element more than once in consecutive operations. Help Marco determine the maximum possible sum of the list after exactly K operations. Input: The first line contains T - the number of test cases. For each test case, the first line contains N and K - the size of the list and the number of operations. The second line contains N space-separated integers representing the elements of the list. Output: Print the maximum possible sum of the list after exactly K operations for each test case in separate lines. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 10^5 1 ≤ K ≤ 10^5 -10^9 ≤ Elements of the list ≤ 10^9 SAMPLE INPUT 2 3 3 1 -2 3 4 2 2 1 -1 5 SAMPLE OUTPUT 3 10 Explanation: Test Case #1: Initial sum = 2 (1 - 2 + 3). First operation: add 1 to 3 -> (1 - 2 + 4), sum = 3. Second operation: add 1 to 4 -> (1 - 2 + 5), sum = 4. Third operation: add 1 to 1 -> (2 - 2 + 5), sum = 5. The sum of the list can be manipulated up to a maximum of 5, but since each operation cannot alter consecutive elements, adding to -2 reduces the maximum achievable sum to 3 in this sequence. Test Case #2: Initial sum = 7 (2 + 1 - 1 + 5). First and second operations: add 1 to -1 and 1 to 2 -> maximum sum is 10 (targeting the smallest negative values or the less contributing positives).","solution":"def maximize_sum(T, test_cases): results = [] for t in range(T): N, K = test_cases[t][0] arr = test_cases[t][1] arr.sort() for i in range(min(K, N)): if arr[i] < 0: arr[i] = -arr[i] else: break results.append(sum(arr)) return results"},{"question":"Consider a summer camp which is organizing a series of competitions for kids. The camp managers have a list of scores obtained by each participant in a particular competition. The scores are listed in a space-separated format. Besides finding the highest and the lowest scores, the camp managers also want to determine the average score (rounded down to the nearest integer). Write a program to process the list of scores and output the highest score, the lowest score, and the average score (rounded down to the nearest integer). Input: The list of scores. Output: Print the highest score, the lowest score, and the average score (rounded down), each on a new line. Constraints: 1 ≤ Number of scores ≤ 10^6 0 ≤ Score ≤ 100 SAMPLE INPUT 23 67 89 45 32 55 90 100 54 20 SAMPLE OUTPUT 100 20 57","solution":"def process_scores(scores_str): Process the list of scores and output the highest score, the lowest score, and the average score (rounded down). Args: scores_str (str): A space-separated string of integer scores. Returns: tuple: A tuple containing the highest score, the lowest score, and the average score (rounded down), in that order. # Convert the input score string to a list of integers scores = list(map(int, scores_str.split())) # Find the highest score highest_score = max(scores) # Find the lowest score lowest_score = min(scores) # Calculate the average score (rounded down) average_score = sum(scores) // len(scores) return highest_score, lowest_score, average_score"},{"question":"Write a function that accepts two parameters: a string and a character. The function should return the string with all instances of the given character removed. Ensure the function handles both uppercase and lowercase characters appropriately.","solution":"def remove_character(s, char): Returns the string s with all instances of char removed. Handles both uppercase and lowercase characters appropriately. return s.replace(char, \'\').replace(char.upper(), \'\').replace(char.lower(), \'\')"},{"question":"You are a software engineer working for a company that processes weather data. Your team is tasked with creating a system to analyze sudden changes in temperature. Specifically, you need to find whether there exists any subsequence of three consecutive days where the temperature increases consistently. Note that the increase must be strictly greater on each of the three days. For example, given the temperatures for four days [31, 32, 33, 35], the program should identify that there exists a subsequence (32, 33, 35) showing a consistent increase. -----Input----- The first line of the input contains an integer n (3 le n le 10^5) — the number of days. The second line contains n integers T_1, T_2, ..., T_n (-100 le T_i le 100) — the temperatures recorded on these days. -----Output----- Print \\"YES\\" if there exists a subsequence of three consecutive days with a consistent increase in temperature. Otherwise, print \\"NO\\". -----Example----- Input 5 22 23 25 24 26 Output YES Input 4 30 29 28 27 Output NO -----Note----- In the first example, the subsequence (22, 23, 25) shows a consistent increase over three consecutive days, hence the output is \\"YES\\". In the second example, no such subsequence exists, hence the output is \\"NO\\".","solution":"def has_three_consecutive_increasing_days(n, temperatures): for i in range(n - 2): if temperatures[i] < temperatures[i + 1] < temperatures[i + 2]: return \\"YES\\" return \\"NO\\""},{"question":"Given a linked list, remove all the nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well. Example 1: Input: Linked List: 1 -> 2 -> 3 -> 3 -> 4 -> 4 -> 5 Output: 1 -> 2 -> 5 Explanation: 3 and 4 are duplicates and removed, so only 1, 2, and 5 remain. Example 2: Input: Linked List: 1 -> 1 -> 1 -> 2 -> 3 Output: 2 -> 3 Explanation: 1 has duplicates and removed, so only 2 and 3 remain. Your Task: You don\'t need to read input or print anything. Complete the function distinctNumbers() which takes the head node of the linked list as an input parameter and returns the modified list sorted. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ Number of nodes in the linked list ≤ 10^5","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def distinct_numbers(head): if not head: return None # Counting the occurrence of each number node_counts = {} temp = head while temp: if temp.val in node_counts: node_counts[temp.val] += 1 else: node_counts[temp.val] = 1 temp = temp.next # Filter out the ones with duplicates values = [val for val, count in node_counts.items() if count == 1] if not values: return None # Sort the remaining distinct values values.sort() # Reconstruct the linked list with distinct values dummy_head = ListNode() current = dummy_head for val in values: current.next = ListNode(val) current = current.next return dummy_head.next"},{"question":"Write a function called `increment_string` that takes in a string composed of alphabetical characters followed by digits and increments the number portion by one. If the string does not contain numerical digits at the end, append \\"1\\" to the string. Leading zeros in the number portion should be preserved. For example: ```python increment_string(\\"foobar001\\") # should return \\"foobar002\\" increment_string(\\"foo\\") # should return \\"foo1\\" increment_string(\\"foobar00\\") # should return \\"foobar01\\" increment_string(\\"foobar99\\") # should return \\"foobar100\\" increment_string(\\"\\") # should return \\"1\\" ```","solution":"import re def increment_string(s: str) -> str: Increments the numerical part of the given string, or appends \'1\' if no numerical part is present. Leading zeros in the number portion should be preserved. match = re.search(r\'(d+)\', s) if match: number = match.group(1) incremented_number = str(int(number) + 1).zfill(len(number)) return s[:match.start()] + incremented_number else: return s + \'1\'"},{"question":"A city\'s grid system has roads running horizontally and vertically. Each intersection of the roads can be thought of as a point on a Cartesian plane. The mayor has decided to deploy streetlights at certain intersections to enhance safety. Your task is to help determine at which intersections streetlights should be placed such that certain conditions are met. The grid has m horizontal roads and n vertical roads. There are k intersections where the mayor wants increased safety. For each requested intersection, determine if it falls on either: 1. An intersection that is at the boundary of the grid, or 2. An intersection where the sum of its row and column indices (1-based) is even. Note: - If the intersection meets either condition, a streetlight should be placed there. - Each position on the grid is represented by its row and column indices. -----Input----- The first line contains two integers m and n (1 ≤ m, n ≤ 10^3), the number of horizontal and vertical roads. The second line contains a single integer k (1 ≤ k ≤ 10^5), the number of requested intersections. Each of the next k lines contains two integers r and c (1 ≤ r ≤ m, 1 ≤ c ≤ n), the row and column indices of an intersection. -----Output----- Print k lines to the standard output. For each requested intersection, print \\"YES\\" if a streetlight should be placed there, otherwise print \\"NO\\". -----Examples----- Input 4 5 3 1 3 3 4 2 2 Output YES NO YES -----Note----- For the sample input: The grid is defined with 4 rows and 5 columns. For the intersection (1, 3): - It is located on the boundary (first row). - Thus the output is \\"YES\\". For the intersection (3, 4): - It is not located on the boundary. - The sum of indices 3 + 4 = 7 which is odd. - Thus the output is \\"NO\\". For the intersection (2, 2): - It is not located on the boundary. - The sum of indices 2 + 2 = 4 which is even. - Thus the output is \\"YES\\".","solution":"def should_place_streetlight(m, n, k, intersections): result = [] for r, c in intersections: if r == 1 or r == m or c == 1 or c == n or (r + c) % 2 == 0: result.append(\\"YES\\") else: result.append(\\"NO\\") return result # Define the function that handles the input and output def main(): import sys input = sys.stdin.read data = input().split() m = int(data[0]) n = int(data[1]) k = int(data[2]) intersections = [] index = 3 for _ in range(k): r = int(data[index]) c = int(data[index + 1]) intersections.append((r, c)) index += 2 results = should_place_streetlight(m, n, k, intersections) for result in results: print(result)"},{"question":"Alice loves to paint rectangles on a grid. She considers a rectangle to be any contiguous subgrid on an n x m grid. Alice wants to calculate how many different rectangles she can paint on the grid, given its dimensions. For example, if the grid is 2 x 3, Alice can paint the following rectangles (where \'#\' represents a cell in the rectangle): - 1x1 rectangles: ``` # # ``` ``` # # ``` ``` # # ``` ``` # # # ``` - 1x2 rectangles: ``` ``` ``` ``` ``` ``` - 1x3 rectangles: ``` # # ``` - 2x1 rectangles: ``` # # # ``` - 2x2 rectangle: ``` ``` - 2x3 rectangle: ``` # ``` Alice wants to know the total number of such rectangles for any n x m grid. Can you help her calculate it? # Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1,000), representing the number of rows and columns in the grid. # Output Print a single integer, the total number of different rectangles that Alice can paint on the grid. # Examples Example 1 Input: ``` 2 3 ``` Output: ``` 18 ``` Example 2 Input: ``` 1 1 ``` Output: ``` 1 ``` Example 3 Input: ``` 3 3 ``` Output: ``` 36 ```","solution":"def count_rectangles(n, m): Calculate the total number of rectangles that can be formed in an n x m grid. The number of rectangles in an n x m grid is given by the formula: (n * (n + 1) // 2) * (m * (m + 1) // 2) return (n * (n + 1) // 2) * (m * (m + 1) // 2) # Example usage # n, m = map(int, input().split()) # print(count_rectangles(n, m))"},{"question":"Your task is to implement a function that finds the minimum number of adjacent swaps required to make a string palindrome. If it is impossible to form a palindrome from the given string, return -1. A swap is defined as exchanging two adjacent characters in the string. Input The function should take a single parameter: - s: a string (1 ≤ |s| ≤ 1000) consisting only of lowercase Latin characters. Output The function should return an integer indicating the minimum number of swaps required, or -1 if it is impossible to form a palindrome. Examples ```python min_swaps_to_palindrome(\\"mamad\\") # Output: 3 min_swaps_to_palindrome(\\"asflkj\\") # Output: -1 min_swaps_to_palindrome(\\"aabb\\") # Output: 2 min_swaps_to_palindrome(\\"ntiin\\") # Output: 1 ``` Explanation 1. For the input \\"mamad\\", you can swap \'m\' and \'a\' to get \\"amamd\\", then \'a\' and \'m\' to get \\"aammd\\", and finally \'m\' and \'d\' to get \\"aamdm\\", resulting in the palindrome \\"madam\\". The minimum number of swaps is 3. 2. For the input \\"asflkj\\", it is impossible to form a palindrome, so the output is -1. 3. For the input \\"aabb\\", you can swap \'a\' and \'b\' twice to get \\"abba\\" or \\"baab\\", resulting in a palindrome. The minimum number of swaps is 2. 4. For the input \\"ntiin\\", you can swap \'n\' and \'t\' to get \\"tniin\\", resulting in the palindrome \\"nitin\\". The minimum number of swaps is 1.","solution":"def min_swaps_to_palindrome(s): def can_form_palindrome(s): freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 odd_count = sum(1 for count in freq.values() if count % 2 != 0) return odd_count <= 1 if not can_form_palindrome(s): return -1 s = list(s) n = len(s) swap_count = 0 for i in range(n // 2): left = i right = n - i - 1 while left < right: if s[left] == s[right]: break else: right -= 1 if left == right: s[left], s[left + 1] = s[left + 1], s[left] swap_count += 1 right = n - i - 1 for j in range(right, n - i - 1): s[j], s[j + 1] = s[j + 1], s[j] swap_count += 1 return swap_count"},{"question":"You are given an array of integers. Write a function to find the maximum difference between any two elements such that the larger element appears after the smaller element in the array. Example 1: Input: [2, 3, 10, 6, 4, 8, 1] Output: 8 Explanation: The maximum difference is between 10 and 2. Example 2: Input: [7, 9, 5, 6, 3, 2] Output: 2 Explanation: The maximum difference is between 7 and 9, as they are the largest difference where the larger number appears after the smaller number. Note: If the array contains fewer than two elements, return 0.","solution":"def max_difference(arr): Finds the maximum difference between any two elements such that the larger element appears after the smaller element. if len(arr) < 2: return 0 min_element = arr[0] max_diff = 0 for i in range(1, len(arr)): if arr[i] - min_element > max_diff: max_diff = arr[i] - min_element if arr[i] < min_element: min_element = arr[i] return max_diff"},{"question":"You have been given an array of integers nums. Your task is to write a function `findZeroSumSubarray` that finds any subarray with a sum of 0. If such a subarray is found, return the first occurrence of such a subarray. If not, return an empty array. A subarray is a contiguous part of an array. For example, the array [1, 2, -2, 4, -4, 6] contains the subarray [2, -2], which sums to 0. Input The function receives an integer array nums of length n (1 ≤ n ≤ 10^5) where the elements are in the range [-10^5, 10^5]. Output Return the first subarray which sums to 0 if any, otherwise return an empty array. Examples The function should behave as follows: Example 1: ```python nums = [1, 2, -3, 3, 4] print(findZeroSumSubarray(nums)) ``` Output: ```python [1, 2, -3] ``` Example 2: ```python nums = [-1, 1] print(findZeroSumSubarray(nums)) ``` Output: ```python [-1, 1] ``` Example 3: ```python nums = [1, 2, 3] print(findZeroSumSubarray(nums)) ``` Output: ```python [] ``` Note In Example 1, [1, 2, -3] is a subarray that sums to 0, which is the first occurrence of such a subarray in the provided array. In Example 2, [-1, 1] is a subarray that sums to 0, which is the first occurrence of such a subarray in the provided array. In Example 3, there is no subarray with sum 0, so the function returns an empty array.","solution":"def findZeroSumSubarray(nums): Returns the first subarray with a sum of 0 if any, otherwise an empty array. prefix_sum = 0 prefix_sum_map = {} for i, num in enumerate(nums): prefix_sum += num if prefix_sum == 0: return nums[:i+1] if prefix_sum in prefix_sum_map: return nums[prefix_sum_map[prefix_sum] + 1:i + 1] prefix_sum_map[prefix_sum] = i return [] # Example usage print(findZeroSumSubarray([1, 2, -3, 3, 4])) # Output: [1, 2, -3] print(findZeroSumSubarray([-1, 1])) # Output: [-1, 1] print(findZeroSumSubarray([1, 2, 3])) # Output: []"},{"question":"Given an array of integers nums, you need to find the minimum number of moves required to make all array elements equal. In one move, you can increment or decrement an element of the array by 1. Example 1: Input: nums = [1, 2, 3] Output: 2 Explanation: Only two moves are needed (1 => 2 => 3 or 3 => 2 => 1), so all elements are equal to 2. Example 2: Input: nums = [1, 10, 2, 9] Output: 16 Explanation: One way is to select 6 as the target number. The total number of moves to convert [1, 10, 2, 9] to [6, 6, 6, 6] is 5 + 4 + 4 + 3 = 16. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minMoves() which takes an array of integers nums as an input and returns the minimum number of moves required. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ nums.length ≤ 10^5 -10^9 ≤ nums[i] ≤ 10^9","solution":"def minMoves(nums): Return the minimum number of moves required to make all array elements equal. nums.sort() median = nums[len(nums) // 2] return sum(abs(num - median) for num in nums)"},{"question":"You are provided with a grid of size n x m filled with characters representing different items. Some characters represent power-ups, while others are obstacles. The goal is to find the longest path you can construct by stepping only on power-ups and starting from any cell in the grid. You may move to a neighboring cell (left, right, up, or down) if it contains a power-up, but you cannot step on obstacles or go off the grid. A power-up is represented by a character \'P\', an obstacle by a character \'X\', and an empty cell by a character \'.\' Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns, respectively. The next n lines contain m characters each, representing the grid. It is guaranteed that the grid contains at least one power-up. Output Print a single integer — the length of the longest path consisting only of power-ups. Examples Input 4 4 PXP. PXPX PPPP .XXP Output 7 Input 3 5 P.P.P XXXXX P.P.P Output 1 Note In the first sample, the longest path is constructed by starting from the cell (3,1) and navigating through all (3,2), (3,3), (3,4), (2,3), (1,3), and (4,4). In the second sample, each power-up cell is isolated by obstacles, thus the longest path consists of a single step.","solution":"def longest_path(grid): n = len(grid) m = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'P\' def dfs(x, y, visited): max_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) max_length = max(max_length, 1 + dfs(nx, ny, visited)) visited.remove((nx, ny)) return max_length longest = 0 for i in range(n): for j in range(m): if grid[i][j] == \'P\': visited = set() visited.add((i, j)) longest = max(longest, dfs(i, j, visited)) return longest"},{"question":"The itertools module in Python provides a variety of tools that work on iterators to produce complex iterators. One of these functions is permutations. itertools.permutations(iterable[, r]) This tool returns successive r length permutations of elements in the iterable. If r is not specified or is equal to the length of the iterable, all possible full-length permutations are generated. Permutations are printed in lexicographic sorted order. So, if the input iterable is sorted, the permutation tuples will be produced in a sorted order. For example, list(itertools.permutations(\'ABC\', 2)) will return [(\'A\', \'B\'), (\'A\', \'C\'), (\'B\', \'A\'), (\'B\', \'C\'), (\'C\', \'A\'), (\'C\', \'B\')]. Your task is to take a string as input and print all possible permutations of the string in lexicographically sorted order. Input Format A single line containing the string S. Output Format Print the permutations of the string S in lexographically sorted order, each permutation on a new line. Sample Input ABC Sample Output ABC ACB BAC BCA CAB CBA","solution":"from itertools import permutations def get_sorted_permutations(s): Given an input string, returns all the permutations of the string in lexicographically sorted order. return sorted([\'\'.join(p) for p in permutations(s)])"},{"question":"Mr. Van Helsing, the famous vampire hunter, has been tracking vampires across Europe. He has a map that represents different safe houses where he can rest during his travels. Each safe house has a certain number of supplies that can help Van Helsing in his journey. However, he can only travel between directly connected safe houses, and he wants to gather as many supplies as possible before confronting the vampires at their final hideout. The map is represented as a graph with nodes as safe houses and edges as direct paths between them, each with a travel cost. Since Van Helsing is also tracking time closely, he wants to determine the minimum cost to reach any safe house with the highest amount of supplies. Given the number of safe houses (nodes), the number of direct paths (edges), the supplies in each safe house, and the cost for each direct path, write a program to find the minimum travel cost to any of the safe houses with the maximum supplies. Input consists of: - An integer N, the number of safe houses. - An integer E, the number of direct paths. - A line of N space-separated integers, the supply count in each safe house. - E lines, each containing three integers: the starting safe house, the ending safe house, and the cost to travel between them. Van Helsing starts at safe house 1. Output: - An integer representing the minimum travel cost to a safe house with the maximum supplies. 1 ≤ N ≤ 1000 1 ≤ E ≤ 10000 1 ≤ supply_count[i] ≤ 1000 1 ≤ travel_cost ≤ 1000 SAMLE INPUT 6 7 10 20 30 10 20 30 1 2 5 1 3 10 2 3 5 2 4 10 3 5 5 4 6 5 5 6 10 SAMPLE OUTPUT 10 Explanation: The graph has 6 safe houses and 7 direct paths. The supplies in each safe house are listed as [10, 20, 30, 10, 20, 30]. The maximum supply is 30, which is present in safe houses 3 and 6. The minimum travel cost to reach safe house 3 is 10 via path 1 -> 3, and to reach safe house 6 is 15 via path 1 -> 3 -> 5 -> 6. Therefore, the minimum cost to reach a safe house with the maximum supplies is 10.","solution":"import heapq def min_cost_max_supplies(N, E, supplies, edges): # Convert 1-indexed to 0-indexed for the supplies array supplies = [0] + supplies # Find the maximum supply max_supply = max(supplies) # Identify nodes with maximum supply max_supply_nodes = [i for i in range(1, N+1) if supplies[i] == max_supply] # Create adjacency list for the graph graph = {i: [] for i in range(1, N+1)} for u, v, cost in edges: graph[u].append((v, cost)) graph[v].append((u, cost)) # Implement Dijkstra\'s algorithm to find the shortest path from node 1 to all other nodes def dijkstra(start): heap = [(0, start)] min_cost = {i: float(\'inf\') for i in range(1, N+1)} min_cost[start] = 0 while heap: current_cost, current_node = heapq.heappop(heap) if current_cost > min_cost[current_node]: continue for neighbor, travel_cost in graph[current_node]: new_cost = current_cost + travel_cost if new_cost < min_cost[neighbor]: min_cost[neighbor] = new_cost heapq.heappush(heap, (new_cost, neighbor)) return min_cost # Get the minimum cost to all nodes from the start node 1 min_cost_from_start = dijkstra(1) # Find the minimum cost to any of the nodes with maximum supplies min_cost_to_max_supplies = float(\'inf\') for node in max_supply_nodes: if min_cost_from_start[node] < min_cost_to_max_supplies: min_cost_to_max_supplies = min_cost_from_start[node] return min_cost_to_max_supplies # Example usage N = 6 E = 7 supplies = [10, 20, 30, 10, 20, 30] edges = [ (1, 2, 5), (1, 3, 10), (2, 3, 5), (2, 4, 10), (3, 5, 5), (4, 6, 5), (5, 6, 10) ] # Expected Output: 10 print(min_cost_max_supplies(N, E, supplies, edges))"},{"question":"Alice is interested in finding paths on a grid. She has a grid of size N x M consisting of squares. Each square has a jump value associated with it, represented by a matrix A of size N x M, where A[i][j] indicates the jump value of the square in the i-th row and j-th column. Alice starts from the top-left corner of the grid (1, 1) and can move to square (i, j) if she is currently on square (i\', j\') and |i - i\'| + |j - j\'| is exactly A[i\'][j\']. Her goal is to reach the bottom-right corner of the grid (N, M). Write a program to determine the minimum number of jumps Alice needs to reach the bottom-right corner of the grid, or output -1 if it is not possible to reach the bottom-right corner. -----Input----- The first line contains a single integer T, the number of test cases. The next T sections each describe a test case. For each test case: - The first line contains two integers N and M (1 ≤ N, M ≤ 100). - The next N lines each contain M integers describing the matrix A (0 ≤ A[i][j] ≤ max(N, M)) -----Output----- For each test case, output the minimum number of jumps to reach the bottom-right corner, or -1 if it is not possible. -----Constraints----- - 1 ≤ T ≤ 10 - For each test case, A will have integer values. -----Example----- Input: 2 3 3 2 3 1 1 2 2 1 1 1 2 2 2 1 1 0 Output: 3 -1","solution":"from collections import deque def min_jumps_to_reach_end(N, M, A): Returns the minimum number of jumps required to reach the bottom-right corner of the grid, or -1 if it\'s not possible. directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 0)]) # (i, j, steps) visited = [[False] * M for _ in range(N)] while queue: i, j, steps = queue.popleft() if i == N - 1 and j == M - 1: return steps if visited[i][j]: continue visited[i][j] = True jump = A[i][j] for di, dj in directions: ni, nj = i + jump * di, j + jump * dj if 0 <= ni < N and 0 <= nj < M and not visited[ni][nj]: queue.append((ni, nj, steps + 1)) return -1 def process_test_cases(T, test_cases): results = [] for case in test_cases: N, M, A = case result = min_jumps_to_reach_end(N, M, A) results.append(result) return results"},{"question":"You have been tasked with implementing a function to perform **integer division** and output the **quotient** and the **remainder**. However, you cannot use the division (`/`), multiplication (`*`), or modulus (`%`) operators. Write a function `divide(dividend, divisor)` that takes two integers `dividend` and `divisor`, and returns a tuple `(quotient, remainder)` such that: 1. `quotient` is the integer result of `dividend // divisor` 2. `remainder` is the result of `dividend % divisor` # Example: ```python divide(10, 3) -> (3, 1) divide(25, 4) -> (6, 1) divide(15, 5) -> (3, 0) divide(7, -3) -> (-2, 1) divide(-17, 4) -> (-4, 3) ``` # Constraints: - The divisor will never be zero. - The result should have integer values, and the remainder should have the same sign as the dividend. - You can assume both `dividend` and `divisor` are within the range of 32-bit signed integers. # Notes: - You need to handle negative numbers appropriately. - Consider using bit manipulation and subtraction instead of the restricted operations.","solution":"def divide(dividend, divisor): Function to perform integer division without using \'/\', \'*\', or \'%\' operators. Returns the quotient and remainder. if divisor == 0: raise ValueError(\\"Cannot divide by zero\\") # Handle negative numbers sign = -1 if (dividend < 0) ^ (divisor < 0) else 1 dividend = abs(dividend) divisor = abs(divisor) quotient = 0 remainder = dividend while remainder >= divisor: temp_divisor, multiples = divisor, 1 while remainder >= (temp_divisor << 1): temp_divisor <<= 1 multiples <<= 1 remainder -= temp_divisor quotient += multiples # Adjust quotient and remainder to original sign if sign == -1: quotient = -quotient return quotient, remainder"},{"question":"Given a string s and an integer k, the task is to find the number of distinct substrings of length k in s. The answer can be very large, so return it modulo 10^9 + 7. Example 1: Input: s = \\"abcabc\\", k = 2 Output: 3 Explanation: The distinct substrings of length 2 are \\"ab\\", \\"bc\\", and \\"ca\\". Example 2: Input: s = \\"abacababa\\", k = 3 Output: 5 Explanation: The distinct substrings of length 3 are \\"aba\\", \\"bac\\", \\"aca\\", \\"cab\\", and \\"bab\\". Your Task: You don\'t need to read or print anything. Your task is to complete the function countDistinctSubstrings() which takes a string s and an integer k as input parameters and returns an integer. Expected Time Complexity: O(n) Expected Space Complexity: O(k) Constraints: 1 ≤ k ≤ n ≤ 100000 s contains only lowercase English letters.","solution":"def countDistinctSubstrings(s, k): MOD = 10**9 + 7 distinct_substrings = set() n = len(s) for i in range(n - k + 1): substring = s[i:i+k] distinct_substrings.add(substring) return len(distinct_substrings) % MOD"},{"question":"In a fantasy land, a powerful wizard decides to create a magical filter system to separate elements in various magical potions. The wizard categorizes elements into two groups: \\"energy elements\\" and \\"healing elements\\". Each element in a potion has an associated energy value and a healing value. The wizard wants to filter out the elements such that: 1. All the energy elements are placed before any healing element. 2. Within the energy elements, they should be sorted based on their energy value in non-increasing order. 3. Within the healing elements, they should be sorted based on their healing value in non-decreasing order. Write a program that takes a list of elements, where each element is represented by its name, type (either \\"energy\\" or \\"healing\\"), energy value, and healing value. Your program should output the names of the elements in the filtered order described. Input - The first line contains an integer n (1 ≤ n ≤ 100000), the number of elements. - Each of the next n lines contains a string name, a string type (\\"energy\\" or \\"healing\\"), an integer energy_value (0 ≤ energy_value ≤ 100000), and an integer healing_value (0 ≤ healing_value ≤ 100000), separated by spaces. Output - Print the names of the elements in the order specified. Example Input 7 element1 energy 500 200 element2 healing 100 300 element3 energy 700 100 element4 healing 200 400 element5 energy 600 150 element6 healing 50 250 element7 energy 550 300 Output element3 element5 element7 element1 element6 element2 element4 Note In this example: 1. All \\"energy\\" elements are: element1 (500 energy), element3 (700 energy), element5 (600 energy), and element7 (550 energy). They are sorted in non-increasing order of their energy values. 2. All \\"healing\\" elements are: element2 (300 healing), element4 (400 healing), and element6 (250 healing). They are sorted in non-decreasing order of their healing values.","solution":"def magical_filter(elements): # Separate energy and healing elements energy_elements = [] healing_elements = [] for element in elements: name, el_type, energy_value, healing_value = element if el_type == \\"energy\\": energy_elements.append((name, energy_value, healing_value)) else: healing_elements.append((name, energy_value, healing_value)) # Sort energy elements by energy value in non-increasing order energy_elements.sort(key=lambda x: x[1], reverse=True) # Sort healing elements by healing value in non-decreasing order healing_elements.sort(key=lambda x: x[2]) # Extract the names in the correct order result = [el[0] for el in energy_elements + healing_elements] return result # Processing input and calling the function def process_input(input_data): lines = input_data.strip().split(\'n\') n = int(lines[0]) elements = [] for i in range(1, n + 1): parts = lines[i].split() name = parts[0] el_type = parts[1] energy_value = int(parts[2]) healing_value = int(parts[3]) elements.append((name, el_type, energy_value, healing_value)) return magical_filter(elements)"},{"question":"One common task in programming involves finding the shortest path between points in a grid. Write a function to determine the shortest path from the upper-left corner to the lower-right corner of a 2D grid, given that movement is possible only in four directions: up, down, left, and right, and diagonal movement is not allowed. Each cell in the grid has a cost associated with it, which indicates the cost of entering that cell. The objective is to find the path with the minimum cost. Function Description Complete the function `minCostPath` in the editor below. `minCostPath` has the following parameter(s): - `int[][] grid`: a 2D array of integers representing the grid where each value is the cost of entering that cell. Returns: - `int`: the minimum cost to reach from the top-left to the bottom-right of the grid. Input Format The first line contains an integer n and m, the number of rows and columns in the grid. Each of the next n lines contains m space-separated integers where the j^{th} integer is the cost to enter the cell (i, j). Constraints - 1 leq n, m leq 100 - 1 leq text{grid}[i][j] leq 1000 Example Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation The minimum cost path from the top-left to the bottom-right is 1 -> 3 -> 1 -> 1 -> 1 (with a total cost of 7).","solution":"import heapq def minCostPath(grid): n = len(grid) m = len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] min_heap = [(grid[0][0], 0, 0)] while min_heap: cost, x, y = heapq.heappop(min_heap) if x == n - 1 and y == m - 1: return cost if visited[x][y]: continue visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: heapq.heappush(min_heap, (cost + grid[nx][ny], nx, ny)) return -1 # Example usage # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(minCostPath(grid)) # Output: 7"},{"question":"The following problem involves matrix operations commonly used in various computer science applications. Given an n x n matrix of integers, determine whether the matrix is symmetric. A matrix is considered symmetric if it is equal to its transpose. Specifically, a matrix A is symmetric if for any i and j, A[i][j] == A[j][i]. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100), the dimension of the matrix. The next n lines each contain n integers, representing the rows of the matrix. -----Output----- Output \\"YES\\" if the matrix is symmetric, and \\"NO\\" otherwise. -----Examples----- Input 3 1 2 3 2 4 5 3 5 6 Output YES Input 2 1 2 3 4 Output NO -----Note----- In the first example, the matrix is: ``` 1 2 3 2 4 5 3 5 6 ``` This matrix is symmetric because the transpose of the matrix is equal to the original matrix. In the second example, the matrix is: ``` 1 2 3 4 ``` This matrix is not symmetric because element A[1][0] != A[0][1].","solution":"def is_symmetric_matrix(matrix): Determines if the given n x n matrix is symmetric. Args: matrix: a 2D list of integers representing the n x n matrix Returns: str: \\"YES\\" if the matrix is symmetric, \\"NO\\" otherwise n = len(matrix) for i in range(n): for j in range(i, n): if matrix[i][j] != matrix[j][i]: return \\"NO\\" return \\"YES\\""},{"question":"-----Question----- In computer networks, the *shortest path problem* is a problem of finding a path between two vertices (or nodes) in a weighted graph such that the sum of the weights of its constituent edges is minimized. Given a weighted, directed graph with n vertices and m edges, your task is to find the shortest path from a given starting vertex s to every other vertex in the graph. -----Input----- - The input starts with one line containing integers n (1 leq n leq 100), the number of vertices in the graph, and m (1 leq m leq 5000), the number of edges in the graph. - Then follow m lines, each containing three integers u, v, and w (1 leq u, v leq n; 1 leq w leq 1000) indicating there is an edge from vertex u to vertex v with weight w. - The last line contains the integer s (1 leq s leq n), the starting vertex. The graph does not contain negative weight cycles, but it may contain edges with negative weights. -----Output----- - Output n lines, each corresponding to the shortest path from the starting vertex s to vertex i (1 leq i leq n), or \\"INF\\" if vertex i is not reachable from s. -----Examples----- Sample Input: 5 8 1 2 3 1 3 8 1 5 5 2 4 2 3 5 2 4 3 7 4 5 4 5 2 1 1 Sample Output: 0 3 8 5 5","solution":"import heapq def shortest_path(n, m, edges, s): graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[s] = 0 priority_queue = [(0, s)] while priority_queue: current_dist, current_vertex = heapq.heappop(priority_queue) if current_dist > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_dist + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [dist if dist != float(\'inf\') else \'INF\' for dist in distances.values()]"},{"question":"You are given a list of integers nums, write a Python function to find the length of the longest subsequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order. Example 1: Input: nums = [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. Example 2: Input: nums = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1] Output: 9 Explanation: The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. Therefore its length is 9. Constraints: 0 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9","solution":"def longest_consecutive(nums): Finds the length of the longest subsequence of consecutive integers in an unsorted list. Params: - nums (List[int]): The input list of integers Returns: - int: The length of the longest subsequence of consecutive integers if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"A company needs to allocate new projects to its employees based on their demonstrated skills. Each project requires a specific set of skills and takes a certain number of hours to complete. The company wants to maximize the overall skill utilization of its employees over the next week. Each employee has a set of known skills, and each project has a list of required skills and the number of hours required to complete it. An employee can take on multiple projects, provided they have the required skills and the total number of project hours in the week does not exceed 40 hours. Your task is to determine the maximum number of different skills that can be utilized across all the allocated projects, given the constraints of employees’ skills and working hours. -----Input:----- The first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. The first line of each test contains two space-separated integers E and P, where E is the number of employees and P is the number of projects. The next E lines each contain the skills of an employee as space-separated integers. Each skill is an integer from 1 to 100. The next P lines describe the projects. Each project is described by a list of required skills followed by the number of hours needed to complete it. Each of these lines starts with an integer H (the number of hours needed for this project), and then a varying number of integers (skills required for the project). -----Output:----- For each test case, output the maximum number of different skills that can be utilized across all allocated projects in the week. -----Constraints:----- - 1 ≤ T ≤ 10 - 1 ≤ E ≤ 20 - 1 ≤ P ≤ 20 - 1 ≤ H ≤ 40 - 1 ≤ skill ≤ 100 -----Example:----- Input: 1 3 3 1 2 5 1 3 2 4 5 6 8 1 2 5 1 3 10 2 3 6 2 4 5 Output: 5 -----Explanation:----- Case #1: The best allocation is: - Employee 1 takes on project 1 with skills {1, 2} (8 hours) - Employee 2 takes on project 2 with skills {1, 3} (10 hours) - Employee 3 takes on project 3 with skill {2, 4} (6 hours) The utilized skills are {1, 2, 3, 4, 5} for a total of 5 unique skills.","solution":"def max_utilized_skills(T, test_cases): from itertools import combinations results = [] for test_case in test_cases: E, P, employees, projects = test_case # List to store skills each project requires and the hours needed project_skills_hours = [] for project in projects: hours = project[0] skills = set(project[1:]) project_skills_hours.append((hours, skills)) max_skills_count = 0 # Check all combinations of projects for num_projects in range(1, P + 1): for proj_comb in combinations(project_skills_hours, num_projects): selected_skills = set() total_hours = 0 valid = True project_skill_counts = {} for (hours, skills) in proj_comb: total_hours += hours if total_hours > 40: valid = False break selected_skills.update(skills) # Check if the project demands can be met by the employees skill_count = 0 for skill in selected_skills: for employee in employees: if skill in employee: skill_count += 1 break if valid and skill_count == len(selected_skills): max_skills_count = max(max_skills_count, len(selected_skills)) results.append(max_skills_count) return results"},{"question":"Given a list of integers, write a function that finds the sum of all multiples of 3 or 5 below a given number `n`. If a number is a multiple of both 3 and 5, it should only be counted once. Examples ```python # returns 23 sum_of_multiples(10) # because 3, 5, 6, and 9 are the multiples of 3 or 5 below 10, and their sum is 23. # returns 0 sum_of_multiples(3) # because there are no multiples of 3 or 5 below 3. ```","solution":"def sum_of_multiples(n): Returns the sum of all multiples of 3 or 5 below a given number n. sum_multiples = 0 for i in range(n): if i % 3 == 0 or i % 5 == 0: sum_multiples += i return sum_multiples"},{"question":"Consider a circular array where the end of the array wraps around to the start. You are given an array of integers, and your task is to find the maximum sum of any subarray, where a subarray can be either continuous or wrap around the end of the array. Formally, a subarray can be represented as `arr[i...j]` for `0 <= i <= j < n`, or it can wrap around such that the subarray is `arr[i...n-1] + arr[0...j]` for `0 <= i < n` and `0 <= j < i`. -----Input:----- - The first line of input contains an integer T, the number of test cases. - For each test case: - The first line contains an integer n, the number of elements in the array. - The second line contains n space-separated integers representing the elements of the array. -----Output:----- - For each test case, output the maximum sum of any subarray (continuous or circular). -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 10^5 - -10^6 ≤ arr[i] ≤ 10^6 -----Sample Input:----- 2 5 1 -2 3 -2 5 4 8 -1 -3 8 -----Sample Output:----- 7 16","solution":"def maxSubarraySumCircular(arr): def kadane(nums): current_sum = 0 max_sum = nums[0] for num in nums: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum max_kadane = kadane(arr) max_wrap = sum(arr) for i in range(len(arr)): arr[i] = -arr[i] max_wrap += kadane(arr) if max_wrap > max_kadane and max_wrap != 0: return max_wrap return max_kadane def process_input(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] results.append(maxSubarraySumCircular(arr)) return results"},{"question":"Given an integer array (A) of length (N). Find the minimum number of operations to make all elements of (A) equal, where each operation consists of choosing two distinct elements (A_i) and (A_j) (1 ≤ i, j ≤ N) and one of the following: 1. Add the value of (A_i) to (A_j). 2. Add the value of (A_j) to (A_i). ------ Input Format ------ - The first line of the input contains a single integer (T) - the number of test cases. The description of (T) test cases follows. - The first line of each test case contains a single integer (N) - the length of array (A). - The second line of each test case contains (N) space-separated integers (A_{1}, A_{2}, …, A_{N}) representing the array (A). ------ Output Format ------ For each test case, output one integer - the minimum number of operations required to make all elements of (A) equal. ------ Constraints ------ - (1 ≤ T ≤ 10) - (1 ≤ N ≤ 10^5) - (0 ≤ A_i < 2^{20}) ----- Sample Input 1 ------ 2 3 2 3 5 4 1 1 1 1 ----- Sample Output 1 ------ 2 0 ----- Explanation 1 ------ - Test Case 1: We can make all elements equal to 10 by: 1. Add (A_2) to (A_3) => (A = [2, 3, 8]) 2. Add (A_1) to (A_3) => (A = [2, 3, 10]) 3. Add (A_1) to (A_2) => (A = [2, 5, 10]) 4. Add (A_2) to (A_3) => (A = [2, 5, 15]) 5. Add (A_1) to (A_2) => (A = [2, 7, 15]) 6. Add (A_1) to (A_2) => (A = [2, 9, 15]) 7. Add (A_1) to (A_2) => (A = [2, 11, 15]) 8. Add (A_1) to (A_2) => (A = [2, 13, 15]) 9. Add (A_1) to (A_2) => (A = [2, 15, 15]) Total operations = 9 Now: 9. Add (A_1) to (A_3) => (A = [10, 10, 10]). - Test Case 2: All elements are already equal, so no operations are needed.","solution":"def min_operations_to_equal_elements(arr): Calculate the minimum number of operations needed to make all elements in the array equal. from collections import Counter frequency = Counter(arr) max_frequency = max(frequency.values()) return len(arr) - max_frequency def process_input(input_data): Process the input as per the provided format. lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 results = [] for _ in range(T): N = int(lines[index]) index += 1 A = list(map(int, lines[index].split())) index += 1 results.append(min_operations_to_equal_elements(A)) return results def min_operations(input_str): Main function to handle multiple test cases. results = process_input(input_str) return \\"n\\".join(map(str, results))"},{"question":"Write a function that takes a string as input and returns the shortest word in the string. If there are multiple words with the same shortest length, return the first occurrence. For the purpose of this question, a word is defined as a sequence of characters separated by spaces. - Ignore punctuation marks. - Consider case insensitivity. - Return an empty string if the input is empty. Example: shortest_word(\'The quick, brown fox jumps over the lazy dog.\') == \'The\' shortest_word(\'Hello World!\') == \'Hello\' shortest_word(\'\') == \'\'","solution":"import re def shortest_word(sentence): Returns the shortest word in the input string. If multiple words with the same length, returns the first one encountered. if not sentence: return \\"\\" # Remove punctuation and convert to lower case cleaned_sentence = re.sub(r\'[^ws]\', \'\', sentence).lower() # Split sentence into words words = cleaned_sentence.split() if not words: return \\"\\" # Find the shortest word based on length shortest = min(words, key=len) return shortest"},{"question":"__Treasure Finder__ You are given a map represented as a string containing directions and distances, which needs deciphering to reveal the treasure\'s coordinates. This kata tests string manipulation and basic navigation algorithms. __So what to do?__ Input: A string containing a series of directions (`N`, `S`, `E`, `W` for North, South, East, West) and numbers indicating the distance moved in those directions. The string is interspersed with random characters, not just the directions and numbers. Your task is to consolidate the movements to determine the final coordinates after following the directions and their specified distances. - North (N) increases the y-coordinate - South (S) decreases the y-coordinate - East (E) increases the x-coordinate - West (W) decreases the x-coordinate Your task is to find the final coordinates as two integers in a tuple `(x, y)` where `x` and `y` represent the final east-west and north-south positions respectively. # Example: ``` Input: \\"H3ll5oWor1dN10S4E2\\" Output: (2, 6) (H3ll5oW-1N10S-4E2: moves are N10, S4, E2 -> final coordinates: (2, 6)) ``` You will start from the origin point `(0, 0)` and parse the string to extract the valid directions and distances, computing the resulting location. Each number can be positive or negative, and each direction letter only appears before its associated number. # Have a great adventure! ⛰️","solution":"import re def find_treasure_location(direction_string): Given a string containing directions (N, S, E, W) and distances which are interspersed with random characters, computes the final coordinates after following the directions and distances. Args: direction_string (str): The string containing directions and distances. Returns: tuple: A tuple of two integers representing the final coordinates (x, y). x, y = 0, 0 # Find all occurrences of direction followed by number pattern = re.compile(r\'([NSEW])(-?d+)\') matches = pattern.findall(direction_string) # Process each match for direction, distance in matches: distance = int(distance) if direction == \'N\': y += distance elif direction == \'S\': y -= distance elif direction == \'E\': x += distance elif direction == \'W\': x -= distance return (x, y)"},{"question":"You are given a grid with R rows and C columns filled with integers. You need to find the minimum sum path from the top-left corner to the bottom-right corner of the grid. You can move either to the right or down from a cell. Input Format: The first line contains the number of test cases T. The first line of each test case contains two integers R and C, the number of rows and columns in the grid. Each of the next R lines contains C integers, representing the grid. Output Format: For each test case, print the minimum sum path for the respective grid. Constraints: 1 ≤ T ≤ 10 1 ≤ R, C ≤ 1000 -1000 ≤ grid[i][j] ≤ 1000 Note: This question is expected to be solved using dynamic programming. SAMPLE INPUT 2 2 2 1 2 3 4 3 3 1 1 1 1 1 1 1 1 1 SAMPLE OUTPUT 7 5","solution":"def min_path_sum(grid): if not grid or not grid[0]: return 0 R, C = len(grid), len(grid[0]) dp = [[0] * C for _ in range(R)] dp[0][0] = grid[0][0] for i in range(1, R): dp[i][0] = dp[i - 1][0] + grid[i][0] for j in range(1, C): dp[0][j] = dp[0][j - 1] + grid[0][j] for i in range(1, R): for j in range(1, C): dp[i][j] = grid[i][j] + min(dp[i - 1][j], dp[i][j - 1]) return dp[R - 1][C - 1] def process_input(input_data): lines = input_data.strip().split(\'n\') index = 0 T = int(lines[index]) index += 1 results = [] for _ in range(T): R, C = map(int, lines[index].split()) index += 1 grid = [] for _ in range(R): row = list(map(int, lines[index].split())) grid.append(row) index += 1 results.append(min_path_sum(grid)) return results"},{"question":"You are given a list of integers and an integer target. Your task is to determine if there are two distinct indices i and j in the list such that nums[i] + nums[j] == target. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: 2 + 7 = 9, so the output is [0, 1]. Example 2: Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Explanation: 2 + 4 = 6, so the output is [1, 2]. Your Task: You don\'t need to read or print anything. Your task is to implement the function two_sum() which takes a list of integers nums and an integer target as input parameters and returns a list of two integers representing the indices of the two numbers such that they add up to target. Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: - 2 <= nums.length <= 10^4 - -10^9 <= nums[i] <= 10^9 - -10^9 <= target <= 10^9","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the list that add up to the target. seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return [seen[complement], i] seen[num] = i return [] # Example usage # nums = [2, 7, 11, 15], target = 9 # print(two_sum(nums, target)) # should return [0, 1]"},{"question":"Carla is organizing a relay race event for n teams. Each team has m members, and each member runs one segment of the race. The i-th member of the j-th team has a running speed of s_{ij} units per second. The total running time of a team is calculated as the sum of the running times of its members. The running time for a member is given as the segment length divided by the member\'s speed. Given the lengths of m segments and the speeds of each team’s members, determine which team has the shortest total running time. If multiple teams have the same shortest running time, consider the team appearing earlier in the input as the winner. -----Input----- The first line contains three integers, t (1leq tleq 50), n (1leq nleq 50), and m (1leq mleq 10) — the number of test cases, the number of teams, and the number of segments in the relay race respectively. For each test case: - The first line contains m positive integers d_1, d_2, ldots, d_m (1leq d_ileq 500) — the lengths of the segments in meters. - The next n lines contain m positive integers each, representing the speeds of the members for each team in units per second. -----Output----- For each test case, print a single integer representing the index of the team (1-based) that has the shortest total running time. -----Examples----- Input 2 3 2 100 200 10 5 8 4 12 6 100 150 10 15 12 12 9 18 Output 3 2 -----Note----- In the first test case, the total running times for the 3 teams are calculated as follows: - For the first team: (100/10) + (200/5) = 10 + 40 = 50 seconds. - For the second team: (100/8) + (200/4) = 12.5 + 50 = 62.5 seconds. - For the third team: (100/12) + (200/6) = 8.33 + 33.33 = 41.67 seconds. This is the shortest time. Therefore, the output is 3, since the third team has the shortest total running time. In the second test case: - For the first team: (100/10) + (150/15) = 10 + 10 = 20 seconds. - For the second team: (100/12) + (150/12) = 8.33 + 12.5 = 20.83 seconds. - For the third team: (100/9) + (150/18) = 11.11 + 8.33 = 19.44 seconds. This is the shortest time. Therefore, the output is 3, but the team appearing earlier (in this case, 2) should be considered if there is a tie. Ultimately, the solution outputs the team with the overall shortest running time, maintaining the order to break ties.","solution":"def find_fastest_team(t, cases): results = [] for i in range(t): n, m, d = cases[i][\'n\'], cases[i][\'m\'], cases[i][\'distances\'] min_total_time = float(\'inf\') best_team_index = -1 for team_index in range(n): speeds = cases[i][\'teams\'][team_index] total_time = sum(d[j] / speeds[j] for j in range(m)) if total_time < min_total_time: min_total_time = total_time best_team_index = team_index + 1 results.append(best_team_index) return results"},{"question":"In a galaxy far, far away, there exists a planet that has its own unique transportation network consisting of teleporters between cities. Each city can be represented as a node and each teleporter as a bidirectional edge between two nodes in an undirected graph. The planet\'s government discovered that some teleporters were malfunctioning and decided to fix them. However, they want to ensure that after fixing the teleporters, every city is reachable from any other city using the teleporters. Your task is to help the government by determining the minimum number of teleporters that should be fixed to ensure that all cities are connected. -----Input----- The first line of input contains two integers n and m where 1 le n le 1000 is the number of cities, and 0 le m le 1000 is the number of functioning teleporters. The next m lines each contain two integers u and v (1 le u, v le n), indicating that there is a functioning teleporter between city u and city v. -----Output----- Output a single integer, the minimum number of teleporters that need to be fixed to make the transportation network fully connected. -----Examples----- Sample Input 1: 4 2 1 2 3 4 Sample Output 1: 1 Sample Input 2: 5 3 1 2 2 3 4 5 Sample Output 2: 1 Sample Input 3: 3 3 1 2 2 3 1 3 Sample Output 3: 0","solution":"def minimum_teleporters_to_fix(n, m, edges): Returns the minimum number of teleporters that need to be fixed to ensure all cities are connected. :param n: int, number of cities :param m: int, number of functioning teleporters :param edges: list of tuples, each tuple represents an edge between two cities :return: int, minimum number of teleporters to fix from collections import defaultdict import itertools def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 if n == 1: return 0 parent = list(range(n+1)) rank = [0] * (n+1) for u, v in edges: union(parent, rank, u, v) root_set = set(find(parent, i) for i in range(1, n+1)) # Number of connected components minus 1 is the minimum number of edges needed to connect everything return len(root_set) - 1"},{"question":"Geek loves trees and he takes every opportunity to plant them. However, keeping track of the growth of his trees can be challenging. Each tree grows according to a specific growth pattern which can be described using a mathematical formula. You are given a collection of trees, each with a unique growth rate. The growth rate of the i-th tree can be represented by the height it gains per year, given as an integer growth[i]. At the beginning of year 1, the height of each tree is 0. Geek wants to know which tree will be the tallest after T years. Write a function calculateTallestTree that takes an integer T, and a list of integers growth[], where growth[i] indicates the annual growth rate of the i-th tree, and returns the height of the tallest tree after T years. Example 1: Input: T = 5 growth = [2, 3, 1, 5] Output: 25 Explanation: After 5 years, the heights of the trees will be: - Tree 1: 2 * 5 = 10 - Tree 2: 3 * 5 = 15 - Tree 3: 1 * 5 = 5 - Tree 4: 5 * 5 = 25 The tallest tree is the fourth one with a height of 25. Example 2: Input: T = 3 growth = [4, 2, 7] Output: 21 Explanation: After 3 years, the heights of the trees will be: - Tree 1: 4 * 3 = 12 - Tree 2: 2 * 3 = 6 - Tree 3: 7 * 3 = 21 The tallest tree is the third one with a height of 21. Your Task: You don’t need to read input or print anything. Your task is to complete the function calculateTallestTree() that takes T and growth[] as input parameters and returns an integer representing the height of the tallest tree after T years. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ T ≤ 10⁶ 1 ≤ len(growth) ≤ 10⁵ 1 ≤ growth[i] ≤ 10³","solution":"def calculateTallestTree(T, growth): Returns the height of the tallest tree after T years given the annual growth rates for each tree. # Calculate the height of each tree after T years heights = [rate * T for rate in growth] # Return the maximum height return max(heights)"},{"question":"# Rohan loves reading books. He has a bookshelf containing many books represented as a string `s` and each book is labeled with a lowercase Latin character. Rohan wants to rearrange the books on his shelf in such a way that the books are in non-decreasing order according to their labels. To accomplish this, he can perform the following operation any number of times: - Pick any book and move it to any position on the shelf. Given the initial arrangement of books, determine the minimum number of such operations necessary to rearrange the books in a non-decreasing order. Input The first line contains a string `s`, consisting of lowercase Latin characters which represent the books on the shelf. The length of the string `s` is in the range from 1 to 2000, inclusive. Output Print the only integer — the minimum number of operations required to rearrange the books in non-decreasing order. Examples Input `cba` Output 2 Input `abc` Output 0 Input `bdca` Output 2 Note In the first example, `cba`, one optimal way is to move the book \'c\' to the end of the shelf and then move \'a\' to the beginning, requiring 2 operations in total to get \'abc\'. In the second example, the shelf is already in non-decreasing order, so no operations are required. In the third example, `bdca`, one optimal way is to move \'b\' to the start and then move \'a\' to come after \'b\', requiring 2 operations in total to get \'abcd\'.","solution":"def min_operations_to_sort_books(s): Given a string `s` representing the books on the shelf, determine the minimum number of operations required to rearrange the books in a non-decreasing order. n = len(s) dp = [0] * 26 # dp array for storing longest subsequence of each character ending at that character for char in s: index = ord(char) - ord(\'a\') dp[index] = max(dp[:index+1]) + 1 return n - max(dp)"},{"question":"Given an integer N, print a diamond of stars centered around the middle of the \'N\' lines. The number of lines in the output should be an odd number and should form a symmetric pattern on both the upper and lower halves. You need to accomplish this using nested loops and arithmetic operations only. Example of the pattern for N=5: ``` * *** ***** *** * ``` Input Format A single line containing an odd integer, N. Constraints 1le Nle 15 N is odd Output Format Print N lines forming the described diamond pattern. Sample Input 5 Sample Output ``` * *** ***** *** * ```","solution":"def print_diamond(N): Prints a diamond pattern centered around the middle of N lines. if N % 2 == 0 or N < 1 or N > 15: return None mid = N // 2 for i in range(N): if i <= mid: stars = 2 * i + 1 else: stars = 2 * (N - i - 1) + 1 spaces = (N - stars) // 2 print(\' \' * spaces + \'*\' * stars)"},{"question":"You are given an array of integers representing the scores of multiple participants in a competition. Jane is one of the participants, and her score is given separately. Output the number of participants who scored higher than Jane. -----Input----- The first line contains a single integer n (1 leq n leq 100) — the number of participants (excluding Jane). The second line contains n integers representing the scores of the other participants (0 leq text{score} leq 1000). The third line contains a single integer — Jane\'s score (0 leq text{Jane\'s score} leq 1000). -----Output----- Output a single integer — the number of participants who scored higher than Jane. -----Examples----- Input 5 450 400 350 300 500 420 Output 2 Input 4 700 800 750 650 680 Output 3 Input 6 100 200 300 250 400 350 500 Output 0 -----Note----- For the first example, two participants have scores higher than Jane\'s score of 420. They scored 450 and 500, respectively. For the second example, three participants have scores higher than Jane\'s score of 680. They scored 700, 800, and 750, respectively. For the third example, no participant has a score higher than Jane\'s score of 500.","solution":"def count_higher_scores(participant_scores, jane_score): Returns the number of participants who scored higher than Jane. :param participant_scores: List of integers representing scores of participants :param jane_score: Integer representing Jane\'s score :return: Integer count of participants with scores higher than Jane\'s score return sum(1 for score in participant_scores if score > jane_score)"},{"question":"Two friends are playing a game with stones. They start with two piles of stones, one containing N stones and the other containing M stones. The game proceeds as follows: - Players take alternating turns. - In each turn, a player must choose exactly one of the piles and remove a number of stones from that pile. The number of stones removed must be a multiple of the number of stones in the other pile. The player who cannot make a move loses the game. Assuming both players play optimally, determine the winner of the game if the first player always goes first, given the initial number of stones in each pile. Input The input consists of two integers N and M, representing the number of stones in the first pile and the number of stones in the second pile, respectively (1 ≤ N, M ≤ 1000). Output Output \\"First\\" if the first player wins, or \\"Second\\" if the second player wins. Examples Input 5 3 Output First Input 4 6 Output Second Note In the first example, the first player can start by removing 3 stones from the first pile (since 3 is a multiple of 3), leaving the piles as (2, 3) and forcing the second player into a losing position. In the second example, any move the first player makes will result in the second player having a winning strategy. Therefore, the second player wins if both play optimally.","solution":"import math def game_winner(N, M): Determines the winner of the game given the number of stones in each pile. Parameters: N (int): The number of stones in the first pile. M (int): The number of stones in the second pile. Returns: str: \\"First\\" if the first player wins, otherwise \\"Second\\". if math.gcd(N, M) == 1: return \\"First\\" else: return \\"Second\\""},{"question":"Ted is an avid fan of symphonic music, and he recently decided to organize a unique competition involving melodies. In this competition, a melody consists of n notes, each of which has a certain frequency. Ted wants the competition to be fair and interesting, so he will decide the criteria for scoring each melody. For each melody, the score is calculated based on the notes\' frequencies. The frequency of the i-th note is given by f_i. A certain scoring pattern will be used to determine the score of a melody, which Ted describes as follows: - For each melody, select a contiguous subarray of the notes. - The score for this subarray is the maximum frequency within that subarray minus the minimum frequency within the same subarray. Ted wants to evaluate the maximum score for several given melodies. You need to help Ted determine the maximum possible score for each melody. -----Input----- The first line contains one integer k (1 le k le 100) — the number of melodies. The next 2k lines describe each melody: - The first line of each melody description contains one integer n (1 le n le 100) — the number of notes in the melody. - The second line of each melody description contains n integers f_1, f_2, ..., f_n (1 le f_i le 1000), representing the frequencies of the notes in the melody. -----Output----- For each melody, print one integer — the maximum possible score for that melody. -----Examples----- Input 2 5 1 2 3 4 5 4 8 3 7 6 Output 4 5 Input 3 3 10 10 10 6 2 3 8 7 6 5 2 1 1000 Output 0 6 999 -----Note----- In the first example, for the first melody, selecting the subarray [1, 5] yields the maximum score of 4 (maximum: 5, minimum: 1). For the second melody, selecting the subarray [3, 7] yields the maximum score of 5 (maximum: 8, minimum: 3). In the second example, for the first melody since all notes have the same frequency, any subarray will yield a score of 0. For the second melody, the maximum score is 6 (from the subarray [2, 8]). For the third melody, the maximum score is 999 (choosing the entire array [1, 1000]).","solution":"def max_melody_score(k, melodies): results = [] for melody in melodies: n = melody[0] frequencies = melody[1] max_score = 0 for i in range(n): min_freq = frequencies[i] max_freq = frequencies[i] for j in range(i, n): min_freq = min(min_freq, frequencies[j]) max_freq = max(max_freq, frequencies[j]) max_score = max(max_score, max_freq - min_freq) results.append(max_score) return results"},{"question":"You are given a string consisting of lowercase letters of the English alphabet. Your task is to rearrange the characters of the string to form a palindrome. If it is possible to rearrange the characters to form a palindrome, output any one of them. If it is not possible, output \\"NO\\". Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains the string of length n consisting of lowercase letters. Output If it is possible to rearrange the characters to form a palindrome, output any one of them. Otherwise, output \\"NO\\". Examples Input 4 aabb Output abba Input 5 abcde Output NO Note In the first sample, \\"abba\\" is a palindromic rearrangement of \\"aabb\\". In the second sample, it is not possible to rearrange the characters to form a palindrome, hence the output is \\"NO\\".","solution":"def rearrange_to_palindrome(n, s): from collections import Counter # Count the occurrences of each character char_count = Counter(s) # Check the number of characters with odd occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A palindrome can have at most one character with an odd count if odd_count > 1: return \\"NO\\" # Create half of the palindrome half_palindrome = [] middle_char = \\"\\" for char, count in char_count.items(): if count % 2 == 0: half_palindrome.append(char * (count // 2)) else: half_palindrome.append(char * (count // 2)) middle_char = char * (count % 2) # Form the full palindrome half_palindrome = \'\'.join(half_palindrome) full_palindrome = half_palindrome + middle_char + half_palindrome[::-1] return full_palindrome"},{"question":"Problem Description Bob, an avid video game enthusiast, recently discovered a treasure map in his favorite game. The map is encoded with several sequences of moves. To retrieve the treasure, Bob needs to identify and execute the longest sequence of upward moves (represented as \'U\'). Help Bob find the length of the longest continuous sequence of \'U\' in the provided string of moves! Input Format A single string s consisting of characters \'U\', \'D\', \'L\', \'R\', each separated by a newline character. Output Format Output an integer representing the length of the longest continuous sequence of \'U\'. Constraints 1 ≤ length of s ≤ 100000 SAMPLE INPUT U U D U U U D U SAMPLE OUTPUT 3","solution":"def longest_up_sequence(s): Returns the length of the longest continuous sequence of \'U\' in the provided string. :param s: str - A string consisting of characters \'U\', \'D\', \'L\', \'R\', separated by newline characters. :return: int - The length of the longest continuous sequence of \'U\'. moves = s.split(\'n\') max_length = 0 current_length = 0 for move in moves: if move == \'U\': current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"A large hill is inhabited by a group of rabbits. Each rabbit can either hop up or hop down the hill. Given that each rabbit makes a fixed number of hops, H, in total, determine if it\'s possible for all the rabbits to end up at the same elevation they started with, assuming all hops up and down are of equal size. Input The first (and the only) input line contains an integer H (1 ≤ H ≤ 100) — the total number of hops each rabbit makes. Output Print YES if it is possible for the rabbits to end up at the same elevation they started, and NO otherwise. SAMPLE INPUT 4 SAMPLE OUTPUT YES","solution":"def can_rabbits_end_at_start(H): Determines if it\'s possible for rabbits to end up at the same elevation after H hops, considering that each hop is of equal size and can be either up or down. Parameters: H (int): total number of hops each rabbit makes Returns: str: \'YES\' if it\'s possible, \'NO\' otherwise # If H is even, it is possible to make equal number of hops up and down # If H is odd, it is not possible if H % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string containing alphabets (both uppercase and lowercase) and digits. Your task is to determine if characters in the string can be rearranged to form a palindromic string. Palindromic string means that the string should read the same backward as forward. A valid palindromic string can be rearranged by the letters in such a way that there could be at most one character with odd frequency, and all other characters should have even frequencies. Write a function `canFormPalindrome(s: str) -> bool` that takes a string and returns `True` if it can be rearranged to form a palindrome, and `False` otherwise. # Examples ```python canFormPalindrome(\\"aabbcc\\") => True # All characters have even frequencies. canFormPalindrome(\\"aabbccd\\") => True # All characters except \'d\' have even frequencies, \'d\' has an odd frequency which is allowed. canFormPalindrome(\\"abc\\") => False # All characters \'a\', \'b\', and \'c\' have odd frequencies, not allowed. canFormPalindrome(\\"AabbCCd\\") => True # Ignoring the case, all characters can form \\"dCbAaCbC\\", giving a palindrome. ``` # Constraints - The input string will have at least one character and at most 10^6 characters. - The input string may contain uppercase and lowercase letters, and digits.","solution":"def canFormPalindrome(s: str) -> bool: Determines if the characters in the string `s` can be rearranged to form a palindromic string. from collections import Counter # Normalize the string to lower case for case insensitive comparison s = s.lower() # Create a frequency counter for characters in the string freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 == 1) # For a valid palindrome, at most one character can have an odd frequency return odd_count <= 1"},{"question":"You are given a tree with n nodes and n-1 edges. Each node has a value assigned to it. Your task is to find the maximum possible value of the sum of values of nodes on any path in the tree. A path is defined as any sequence of edges connecting two nodes, not necessarily a simple path, and it can start and end at the same node. Consider an example where the tree structure is as follows: 1 / 2 3 / 4 5 And the node values are: [4, -2, 1, 6, -3]. One of the paths that gives the maximum sum is the path from node 4 to node 5 through node 3, which gives the sum 6 + 1 − 3 = 4. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of nodes in the tree. The second line contains n integers v_{i} (|v_{i}| ≤ 10^4) — the values of the nodes. Each of the next n-1 lines contains two integers a_{i} and b_{i} (1 ≤ a_{i}, b_{i} ≤ n) — an edge in the tree. It is guaranteed that the given edges form a valid tree. -----Output----- Print the maximum sum of values of nodes on any path in the tree. -----Examples----- Input 5 4 -2 1 6 -3 1 2 1 3 3 4 3 5 Output 9 Input 3 1 2 3 1 2 2 3 Output 6 -----Note----- In the first example, the path from node 4 to node 1 through node 3 gives the maximum sum 6 + 1 + 4 = 11. In the second example, the path from node 1 to node 3 through node 2 gives the maximum sum 1 + 2 + 3 = 6.","solution":"from collections import defaultdict def max_path_sum(n, node_values, edges): def dfs(node, parent): nonlocal max_sum current_max = node_values[node] for neighbor in graph[node]: if neighbor == parent: continue max_from_child = dfs(neighbor, node) max_sum = max(max_sum, current_max + max_from_child) current_max = max(current_max, node_values[node] + max_from_child) max_sum = max(max_sum, current_max) return current_max graph = defaultdict(list) for u, v in edges: graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) max_sum = float(\'-inf\') dfs(0, -1) return max_sum"},{"question":"Write a function that takes a single string argument and returns a new string created by adding each character from the original string, followed by the count of occurrences of that character up to that point in the string. For example, given the input \\"hello\\", the function should return \\"h1e1l2l3o1\\" because: - \'h\' is the first occurrence of \'h\', so it becomes \\"h1\\" - \'e\' is the first occurrence of \'e\', so it becomes \\"e1\\" - The first \'l\' is the first occurrence of \'l\', so it becomes \\"l1\\". - The second \'l\' is the second occurrence of \'l\', so it becomes \\"l2\\". - The second \'l\' is the third occurrence of \'l\', so it becomes \\"l3\\". - \'o\' is the first occurrence of \'o\', so it becomes \\"o1\\". Make sure to return the correct message and handle different cases appropriately. Do not use any built-in functions for counting characters. Note: Ensure that the function handles case sensitivity correctly, such that \'A\' and \'a\' are considered different characters.","solution":"def char_count_string(s): Takes a single string argument and returns a new string created by adding each character from the original string, followed by the count of occurrences of that character up to that point in the string. count_dict = {} result = [] for char in s: if char not in count_dict: count_dict[char] = 1 else: count_dict[char] += 1 result.append(f\\"{char}{count_dict[char]}\\") return \'\'.join(result)"},{"question":"Alice is very interested in cryptography. She has learned about the Caesar Cipher, which is a type of substitution cipher where each letter in the plaintext is shifted a fixed number of positions down the alphabet. She wants to create a small program to help her encrypt and decrypt messages using a Caesar Cipher. The Caesar Cipher works as follows: - For each letter in the plaintext, shift it by a fixed number of positions down the alphabet. Wrapping around to the beginning of the alphabet if the end is reached. - For example, with a shift of 3, \'A\' would be encrypted as \'D\', \'B\' as \'E\', and \'Z\' as \'C\'. - Non-letter characters should remain unchanged. Write a program that encrypts and decrypts messages using the Caesar Cipher. Input: 1. An integer T, the number of test cases. 2. For each test case: - A string operation which can either be \\"ENCRYPT\\" or \\"DECRYPT\\". - An integer shift representing the Caesar Cipher shift amount. - A string message which is the text to be encrypted or decrypted. Output: For each test case, output the encrypted or decrypted message accordingly. Constraints: - `1 ≤ T ≤ 100` - `0 ≤ shift ≤ 25` - The message can contain any printable ASCII characters and will have a length of at most 1000 characters. Example Input: 3 ENCRYPT 3 HELLO WORLD! DECRYPT 3 KHOOR ZRUOG! ENCRYPT 5 Cryptography123! Example Output: KHOOR ZRUOG! HELLO WORLD! Hwdytlwfxyntf123! Explanation: 1. In the first test case, the message \\"HELLO WORLD!\\" is encrypted with a shift of 3 resulting in \\"KHOOR ZRUOG!\\". 2. In the second test case, the message \\"KHOOR ZRUOG!\\" is decrypted with a shift of 3 resulting in \\"HELLO WORLD!\\". 3. In the third test case, the message \\"Cryptography123!\\" is encrypted with a shift of 5 resulting in \\"Hwdytlwfxyntf123!\\".","solution":"def caesar_cipher(operation, shift, message): Encrypts or decrypts a message using the Caesar Cipher based on the given operation and shift. def shift_char(c, shift_amount): if \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + shift_amount) % 26 + ord(\'A\')) elif \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + shift_amount) % 26 + ord(\'a\')) else: return c if operation == \\"ENCRYPT\\": shift = shift elif operation == \\"DECRYPT\\": shift = -shift else: raise ValueError(\\"Invalid operation. Allowed values are \'ENCRYPT\' or \'DECRYPT\'.\\") result = \'\' for char in message: result += shift_char(char, shift) return result"},{"question":"Bob is collecting marbles of different colors. He wants to arrange them such that all marbles of the same color are grouped together. Also, within each group of the same color, all marbles need to be arranged in non-decreasing order of their ids. Given the initial arrangement of marbles, your task is to rearrange the marbles according to Bob’s requirements. Input: - The first line contains an integer n (1 ≤ n ≤ 100000) — the number of marbles. - The second line contains n space-separated pairs, where each pair consists of an integer id (1 ≤ id ≤ 100000) and a string color (the color of the marble). Each marble is represented by its id and its color. Output: - Output the marbles in the required order, with each marble on a new line in the format id color. Example: Input: 7 3 red 1 blue 2 red 4 blue 5 blue 6 yellow 2 yellow Output: 1 blue 4 blue 5 blue 2 red 3 red 2 yellow 6 yellow Explanation: - Marbles of the color \\"blue\\" are arranged together with ids 1, 4, and 5 in non-decreasing order. - Marbles of the color \\"red\\" are arranged together with ids 2 and 3 in non-decreasing order. - Marbles of the color \\"yellow\\" are arranged together with ids 2 and 6 in non-decreasing order.","solution":"def rearrange_marbles(n, marbles): Rearranges the marbles according to the requirement that all marbles of the same color are grouped together and within each group, all marbles are arranged in non-decreasing order of their ids. :param n: The number of marbles :param marbles: List of tuples where each tuple contains an id and a color :return: Sorted list of tuples according to the requirements from collections import defaultdict # Group marbles by color color_groups = defaultdict(list) for marble in marbles: color_groups[marble[1]].append(marble[0]) # Sort each group by id for color in color_groups: color_groups[color].sort() # Prepare the final sorted list sorted_marbles = [] for color in sorted(color_groups): for id in color_groups[color]: sorted_marbles.append((id, color)) return sorted_marbles # Example usage: # marbles = [(3, \'red\'), (1, \'blue\'), (2, \'red\'), (4, \'blue\'), (5, \'blue\'), (6, \'yellow\'), (2, \'yellow\')] # print(rearrange_marbles(7, marbles))"},{"question":"Create a function that takes a list of words and determines which words can pass through the `blue wooden gate`. Rules for passing through the gate: - A word can pass through the gate if it has a repeating letter. For example, the word `moon` can pass because it has two `o`s, but the word `sun` cannot pass because all its letters are unique. The function should return a new list containing the words that can pass through the `blue wooden gate`. Function Signature: ```python def blue_wooden_gate(words: List[str]) -> List[str]: # your code here ``` # Sample Input ```python words = [\\"balloon\\", \\"apple\\", \\"orange\\", \\"peach\\", \\"banana\\"] ``` # Sample Output ```python [\\"balloon\\", \\"apple\\", \\"banana\\"] ```","solution":"from typing import List def blue_wooden_gate(words: List[str]) -> List[str]: Returns a list of words that have repeating letters. def has_repeating_letter(word): letter_count = {} for letter in word: if letter in letter_count: return True letter_count[letter] = 1 return False return [word for word in words if has_repeating_letter(word)]"},{"question":"You are given a 2D grid of size n x n that represents a map where each cell is either land (`1`) or water (`0`). An island is formed by connecting adjacent lands horizontally or vertically. You need to find the number of distinct islands. An island is considered distinct if and only if it does not share any land cells with another island. Input: The first line of the input contains an integer n (1 ≤ n ≤ 100) — the length of each side of the grid. The following n lines contain n integers each (either 0 or 1) representing the map. Output: Output a single integer — the number of distinct islands. Example: Input 4 1 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 Output 3","solution":"def numDistinctIslands(grid): Returns the number of distinct islands in the given 2D grid. if not grid or not grid[0]: return 0 n = len(grid) visited = [[False] * n for _ in range(n)] def dfs(i, j): if i < 0 or i >= n or j < 0 or j >= n or visited[i][j] or grid[i][j] == 0: return visited[i][j] = True # Explore the four possible directions dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) distinct_islands = 0 for i in range(n): for j in range(n): if grid[i][j] == 1 and not visited[i][j]: distinct_islands += 1 dfs(i, j) return distinct_islands def read_map(input_str): lines = input_str.strip().split(\\"n\\") n = int(lines[0]) grid = [] for line in lines[1:]: grid.append(list(map(int, line.split()))) return n, grid"},{"question":"Farmer John has n cows and they are standing in a single file in the barn. He wants to organize them in a specific sequence based on their heights. The sequence of cow heights should be non-decreasing from the start of the file to the end. Farmer John\'s cows can only be moved by a single operation where he takes one cow and places her at the beginning of the file. He can perform this operation any number of times. You need to help Farmer John by finding out the minimum number of operations required to arrange the cows in non-decreasing order. -----Input & Output----- - Input: The first line of the input contains a single integer n (1 <= n <= 1000), the number of cows. The second line contains n space-separated integers, where each integer denotes the height of a cow. - Output: Output a single integer, the minimum number of operations required. -----Example 1----- Input: 5 4 3 2 6 5 Output: 3 -----Example 2----- Input: 6 1 2 3 4 5 6 Output: 0 -----Explanation----- 1. In the first example, the initial sequence is [4, 3, 2, 6, 5]. By moving the cow of height 6 to the front, we get [6, 4, 3, 2, 5]. Then, by moving the cow of height 5 to the front, we get [5, 6, 4, 3, 2]. Finally, by moving the cow of height 2 to the front, we achieve the sorted sequence [2, 5, 6, 4, 3]. Thus, Farmer John needs to make 3 moves. 2. In the second example, the sequence is already in non-decreasing order, so no operations are needed. Therefore, the output is 0.","solution":"def min_operations_to_sort(n, heights): Return the minimum number of moves required to sort the cow heights in non-decreasing order by moving one cow at a time to the beginning of the list. # Calculate the length of the longest non-decreasing subsequence ending at each position lis = [1] * n for i in range(1, n): for j in range(i): if heights[j] <= heights[i]: lis[i] = max(lis[i], lis[j] + 1) # Find the length of the longest non-decreasing subsequence longest_nondecreasing_subsequence = max(lis) # The minimum operations required is the number of cows minus the length of this subsequence return n - longest_nondecreasing_subsequence"},{"question":"You are given a string consisting of lowercase English letters. You need to change it into a \\"beautiful string\\" with the minimum number of operations. A string is considered beautiful if no two adjacent characters are the same. In one operation, you can replace any character in the string with any other lowercase English letter. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains the string of length n consisting of lowercase English letters. -----Output----- Print the minimum number of operations needed to make the string beautiful. -----Example----- Input 5 aabbc Output 2","solution":"def min_operations_to_beautiful(n, s): Returns the minimum number of operations needed to make the string beautiful. operations = 0 for i in range(1, n): if s[i] == s[i - 1]: operations += 1 return operations # Example usage: n = 5 s = \\"aabbc\\" print(min_operations_to_beautiful(n, s)) # Output: 2"},{"question":"You are given a grid with R rows and C columns, where each cell can either be empty (\'.\') or contain a wall (\'#\'). Your task is to find a path from the top-left corner to the bottom-right corner of the grid, avoiding the walls. The path can only move one cell at a time either up, down, left, or right. If there is no such path, return -1. --Input-- The first line contains two integers R and C, the number of rows and columns in the grid respectively. The following R lines each contain a string of length C representing the grid. --Output-- Output the length of the shortest path from the top-left corner to the bottom-right corner. If there is no such path, output -1. --Constraints-- - 1 ≤ R, C ≤ 1000 - The grid contains only characters \'.\' and \'#\'. - The top-left corner and the bottom-right corner of the grid are always empty (\'.\'). --Example-- Input: 5 5 ..... .#. ..... .#. ..... Output: 8 Explanation: One possible path is: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (2,2) -> (2,1) -> (3,1) -> (4,1). Another possible path is: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (2,3) -> (3,3) -> (4,3).","solution":"from collections import deque def shortest_path_length(R, C, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] start = (0, 0) end = (R-1, C-1) queue = deque([(start, 0)]) visited = set([start]) while queue: (current_row, current_col), dist = queue.popleft() if (current_row, current_col) == end: return dist for dr, dc in directions: nr, nc = current_row + dr, current_col + dc if 0 <= nr < R and 0 <= nc < C and (nr, nc) not in visited and grid[nr][nc] == \'.\': visited.add((nr, nc)) queue.append(((nr, nc), dist + 1)) return -1"},{"question":"A delivery company wants to optimize their package delivery routes to minimize fuel consumption. The planner at the company has a list of delivery points along with the respective amounts of packages to be delivered and the distances from the depot. The truck has a maximum capacity in terms of both distance it can travel (due to fuel) and the total weight of packages it can carry in one trip. Given the list of delivery points, the distance each delivery point is from the depot, and the weight of packages to be delivered to each point, write a program to determine the maximum number of delivery points the truck can serve in one trip without exceeding its distance or weight capacity. Input format: - The first line contains an integer tc, the number of test cases. - Each test case starts with three integers: n, d, and w. - n is the number of delivery points. - d is the maximum distance the truck can travel in total. - w is the maximum weight of packages the truck can carry. - The next n lines each contain two integers: distance_i and weight_i, representing the distance to the i-th delivery point and the weight of packages for that point, respectively. Output format: For each test case, print a single integer denoting the maximum number of delivery points that the truck can serve in one trip. Constraints: 1 ≤ tc ≤ 100 1 ≤ n ≤ 20 1 ≤ d ≤ 500 1 ≤ w ≤ 1000 1 ≤ distance_i ≤ 100 1 ≤ weight_i ≤ 100 SAMPLE INPUT 2 5 300 200 50 20 60 30 70 40 80 50 90 60 4 150 100 40 25 50 35 60 45 70 55 SAMPLE OUTPUT 4 2","solution":"def max_delivery_points(tc, test_cases): results = [] for test_case in test_cases: n, d, w, deliveries = test_case sorted_deliveries = sorted(deliveries, key=lambda x: (x[0], x[1])) total_distance = 0 total_weight = 0 count = 0 for distance, weight in sorted_deliveries: if total_distance + distance <= d and total_weight + weight <= w: total_distance += distance total_weight += weight count += 1 else: break results.append(count) return results # Reading input tc = 2 test_cases = [ (5, 300, 200, [(50, 20), (60, 30), (70, 40), (80, 50), (90, 60)]), (4, 150, 100, [(40, 25), (50, 35), (60, 45), (70, 55)]) ] # Invoking the function print(max_delivery_points(tc, test_cases))"},{"question":"Jordan is playing a game on a rectangular grid of size MxN. In this game, he starts at the top-left corner (0,0) and must reach the bottom-right corner (M-1, N-1). Jordan can move either right or down on the grid, and he collects coins placed at each cell. The number of coins at each cell is given in a matrix. Jordan wants to know the maximum number of coins he can collect on his way to the bottom-right corner of the grid. Your task is to help Jordan determine the maximum number of coins he can collect by planning an optimal path from the top-left to the bottom-right corner. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. - Each test case begins with two integers M and N representing the dimensions of the grid. - The next M lines each contain N integers, representing the number of coins in each cell of the grid. -----Output----- - For each test case, output a single line containing the maximum number of coins Jordan can collect. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ M, N ≤ 100 - 0 ≤ number of coins in each cell ≤ 100 -----Example----- Input: 2 3 3 0 1 4 1 0 0 2 0 5 2 2 10 10 10 10 Output: 10 30 -----Explanation----- Example case 1: Jordan can follow the path (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) collecting 0+1+4+0+5 = 10 coins. Example case 2: Jordan can follow the path (0,0) -> (0,1) -> (1,1) collecting 10+10+10 = 30 coins.","solution":"def max_coins(T, test_cases): results = [] for case in test_cases: M, N, grid = case dp = [[0] * N for _ in range(M)] dp[0][0] = grid[0][0] for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] results.append(dp[M-1][N-1]) return results # Sample input example T = 2 test_cases = [ (3, 3, [ [0, 1, 4], [1, 0, 0], [2, 0, 5] ]), (2, 2, [ [10, 10], [10, 10] ]) ] print(max_coins(T, test_cases))"},{"question":"The Zoologist\'s Puzzle During a wildlife study, a zoologist made notes of the behavior of wild animals in a forest. He observed that animals exhibit set patterns of movements described using sequences of moves: left (L), right (R), up (U), and down (D). To his curiosity, he wondered if a specific sequence of movements can lead an animal back to its original starting point. Your task is to determine if a given sequence of moves returns an animal back to its starting position in a 2-dimensional grid. A movement \'L\' moves the animal one unit left on the x-axis, \'R\' moves it one unit right on the x-axis, \'U\' moves it one unit up on the y-axis, and \'D\' moves it one unit down on the y-axis. -----Input----- The input contains a single string S of length n (1 ≤ n ≤ 10^5) consisting of the characters \'L\', \'R\', \'U\', and \'D\'. -----Output----- Print \\"Yes\\" if the sequence moves the animal back to the starting position, otherwise print \\"No\\". You can print each letter in arbitrary case (lower or upper). -----Examples----- Input LRUD Output Yes Input LLRRUUDD Output Yes Input LUD Output No -----Note----- In the first sample, the sequence \\"LRUD\\" moves the animal back to its original position as each move is countered by the opposite move (L cancels out with R and U cancels out with D). In the second sample, the sequence \\"LLRRUUDD\\" similarly cancels out each movement. In the third sample, the animal does not return to the original position as there is an imbalance in the number of movements.","solution":"def is_back_to_start(moves: str) -> str: Determines if the sequence of moves returns to the starting position. Args: moves (str): a string representing the sequence of movements. Returns: str: \\"Yes\\" if the sequence returns to the starting point, \\"No\\" otherwise. x, y = 0, 0 for move in moves: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return \\"Yes\\" if x == 0 and y == 0 else \\"No\\""},{"question":"# Task You are given an array of integers `nums`. Write a function that returns the number of sequences (of length at least 3) in the array that form an arithmetic progression. Recall that in an arithmetic progression, the difference between consecutive elements is constant. # Input/Output - `[input]` array `nums` An array of integers. `1 ≤ nums.length ≤ 1000` `-10^6 ≤ nums[i] ≤ 10^6` - `[output]` an integer The number of sequences that form an arithmetic progression. # Example For `nums = [1, 2, 3, 4]`, the output should be: ``` 3 ``` The three arithmetic sequences are: [1, 2, 3], [2, 3, 4], and [1, 2, 3, 4] For `nums = [1, 3, 5, 7, 9]`, the output should be: ``` 6 ``` The six arithmetic sequences are: [1, 3, 5], [3, 5, 7], [5, 7, 9], [1, 3, 5, 7], [3, 5, 7, 9] and [1, 3, 5, 7, 9]","solution":"def count_arithmetic_sequences(nums): count = 0 n = len(nums) if n < 3: return 0 for i in range(n - 2): for j in range(i + 2, n): diff = nums[i + 1] - nums[i] k = i + 1 valid_sequence = True for l in range(i + 1, j): if nums[l + 1] - nums[l] != diff: valid_sequence = False break if valid_sequence: count += 1 return count"},{"question":"You are given a directed graph represented as an adjacency list. Your task is to determine whether the graph contains a cycle. A directed graph is a set of nodes connected by edges, where each edge has a direction associated with it from one node to another. For example, consider the graph with the following adjacency list: 0 -> 1, 2 1 -> 2 2 -> 0, 3 3 -> 3 This graph contains a cycle starting and ending at node 2. -----Input----- The first line contains an integer T (1 le T le 10) — the number of test cases. For each test case: The first line contains an integer N (1 le N le 1000), where N is the number of nodes in the graph. The second line contains an integer M (0 le M le 5000), where M is the number of directed edges in the graph. The next M lines each contain two integers u and v (0 le u, v < N), indicating a directed edge from node u to node v. It\'s guaranteed the sum of N for all test cases does not exceed 10000. -----Output----- For each test case, print \\"YES\\" if the graph contains a cycle and \\"NO\\" otherwise. -----Example----- Input 2 4 5 0 1 0 2 1 2 2 0 2 3 3 3 0 1 1 2 2 0 Output YES YES","solution":"def detect_cycle(n, edges): from collections import defaultdict def is_cyclic(v, visited, rec_stack): visited[v] = True rec_stack[v] = True for neighbor in graph[v]: if not visited[neighbor]: if is_cyclic(neighbor, visited, rec_stack): return True elif rec_stack[neighbor]: return True rec_stack[v] = False return False # Creating adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = [False] * n rec_stack = [False] * n for node in range(n): if not visited[node]: if is_cyclic(node, visited, rec_stack): return \\"YES\\" return \\"NO\\" def solve(test_cases): results = [] for n, m, edges in test_cases: results.append(detect_cycle(n, edges)) return results"},{"question":"__Definition:__ A valid parentheses string is a string consisting of only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', where: 1. An empty string is valid. 2. Any valid string enclosed in a pair of matching parentheses of the same type is also valid. 3. Any valid string concatenated with another valid string is also valid. For example, \\"\\", \\"()\\", \\"{}[]\\", \\"([])\\", and \\"{[()()]}\\" are all valid, but \\"(\\", \\"([)]\\", and \\"{{}}\\" are not valid. Your task is to write a method (or function) that takes a string consisting of only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and returns True if the string is a valid parentheses string, or False otherwise. __Example 1:__ Let the input string be `\\"()\\"`. __Output 1:__ The output of the function shall be `True` because the string is a valid parentheses string. __Example 2:__ Let the input string be `\\"([)]\\"`. __Output 2:__ The output of the function shall be `False` because the string is not a valid parentheses string. __Example 3:__ Let the input string be `\\"{[]}\\"`. __Output 3:__ The output of the function shall be `True` because the string is a valid parentheses string.","solution":"def is_valid_parentheses(s: str) -> bool: Returns True if the string is a valid parentheses string, False otherwise. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Given an array of n integers, find the array D of size n where D[i] is the number of elements greater than A[i] to the right of A[i] in the array. Input Format: First line contains an integer n indicating the number of elements. Next line contains n space-separated integers representing the elements of the array A. Output Format: Output a single line of n space-separated integers representing the array D. Constraints: 1 ≤ n ≤ 100000 1 ≤ A[i] ≤ 10^6 SAMPLE INPUT 5 3 4 2 7 5 SAMPLE OUTPUT 3 2 2 0 0 Explanation: For the given input array A = [3, 4, 2, 7, 5], - D[0] = There are 3 elements greater than 3 to its right (4, 7, 5). - D[1] = There are 2 elements greater than 4 to its right (7, 5). - D[2] = There are 2 elements greater than 2 to its right (7, 5). - D[3] = There are no elements greater than 7 to its right. - D[4] = There are no elements greater than 5 to its right.","solution":"def count_greater_elements_to_right(n, array): result = [0] * n for i in range(n): count = 0 for j in range(i + 1, n): if array[j] > array[i]: count += 1 result[i] = count return result"},{"question":"You are given an array of integers `arr=[arr1, arr2, ..., arrN]` consisting of N integers. You need to respond to Q queries on this array. Each query consists of two integer indices `L` and `R` (1 ≤ L ≤ R ≤ N), and requires that you provide the median of the elements in the subarray `arr[L...R]` of `arr`. The median of a list of numbers is the middle number when they are sorted in non-decreasing order. If the list is of even length, the median is the smaller of the two middle numbers. For instance, the median of [1, 3, 2] is 2 because when sorted, it becomes [1, 2, 3], and 2 is the middle element. The median of [1, 2, 3, 4] is 2, since when sorted it remains [1, 2, 3, 4], and the two middle numbers are 2 and 3, with 2 being the smaller of the two. Input The first line contains an integer N (1 ≤ N ≤ 100,000) — the number of elements in the array `arr`. The second line contains N space-separated integers `arr1, arr2, ..., arrN`, where (1 ≤ arri ≤ 10^9) — the elements of the array. The third line contains an integer Q (1 ≤ Q ≤ 100,000) — the number of queries. The following Q lines each contain two integers L and R (1 ≤ L ≤ R ≤ N) — representing the start and end indices of the subarray for which the median should be found. Output Print Q integers, where the i-th integer represents the median of the subarray specified in the i-th query. Examples Input 5 5 3 2 4 1 3 1 3 2 4 1 5 Output 3 3 3 Input 6 1 2 3 4 5 6 4 1 3 2 5 4 6 1 6 Output 2 3 5 3","solution":"def get_median_of_subarray(arr, queries): def find_median(sub_arr): sub_arr.sort() mid = len(sub_arr) // 2 # for even length, we take the lower of the two middle values return sub_arr[mid - 1] if len(sub_arr) % 2 == 0 else sub_arr[mid] results = [] for L, R in queries: sub_arr = arr[L-1:R] # Convert to 0-based index median = find_median(sub_arr) results.append(median) return results"},{"question":"You are given a string S consisting of N characters. A character is said to be *k-frequent* if its frequency in S is exactly k. Write a function that counts the number of *k-frequent* characters in S for a given k. For example, if S = \\"aabbcc\\" and k = 2, then there are 3 characters (\'a\', \'b\', \'c\') each with frequency 2. Implement this function for each query and print the results. ------ Input Format ------ - The first line of input contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N — the length of the string S. - The second line of each test case contains the string S of length N. - The third line of each test case contains the integer k. ------ Output Format ------ For each test case, output a single integer denoting the number of *k-frequent* characters in the string S. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ k ≤ N S will consist of lowercase English letters only. ----- Sample Input 1 ------ 3 6 aabbcc 2 4 abcd 1 5 aaaaa 3 ----- Sample Output 1 ------ 3 4 0 ----- Explanation 1 ------ Test case 1: \'a\', \'b\', and \'c\' each appear exactly 2 times in the string, so the count is 3. Test case 2: Each character \'a\', \'b\', \'c\', and \'d\' appears exactly 1 time in the string, so the count is 4. Test case 3: No characters appear exactly 3 times in the string, so the count is 0.","solution":"def k_frequent_characters_count(n, s, k): This function takes an integer n (length of string), a string s, and an integer k, and returns the count of characters in s that appear exactly k times. from collections import Counter # Count the frequency of each character in the string frequency = Counter(s) # Count the number of characters that have a frequency of exactly k k_frequent_count = sum(1 for count in frequency.values() if count == k) return k_frequent_count def process_test_cases(t, test_cases): This function takes an integer t (number of test cases) and a list of test cases, and returns the results for each test case. results = [] for i in range(t): n, s, k = test_cases[i] results.append(k_frequent_characters_count(n, s, k)) return results"},{"question":"You are given a list of non-negative integers representing the heights of piles of blocks. Each pile has at least one block. The goal is to make all piles of the same height by removing some blocks from the higher piles. Find the minimum number of blocks you need to remove to equalize all the piles. Example: For the input `[3, 7, 2, 5]`, you would remove a total of 9 blocks to make all piles of height 2 (i.e., remove 1 block from the first pile, 5 blocks from the second pile, 0 blocks from the third pile, and 3 blocks from the fourth pile). Thus, the output should be: ``` 9 ```","solution":"def min_blocks_to_remove(heights): Given a list of non-negative integers representing piles of blocks, returns the minimum number of blocks that need to be removed to make all piles of the same height. :param heights: List of integers representing the heights of piles of blocks :return: Integer representing the minimum number of blocks to remove min_height = min(heights) return sum(height - min_height for height in heights)"},{"question":"A popular social media platform is launching a new feature that allows users to create polls with multiple choices. Each choice receives votes from users, and the platform calculates the winning choice or states if there is a tie. Users have requested an additional feature to determine the percentage of votes each choice received relative to the total votes cast in the poll. You have been hired to implement this feature. Your task is to write a program that takes as input the number of choices in a poll, followed by the number of votes each choice received, and then calculates the percentage of votes each choice received. -----Input----- The first line contains an integer 1 le C le 100 – the number of choices. The next line contains C integers denoting the number of votes each choice received. Each integer 0 le V_i le 10000. -----Output----- Output should consist of C lines, each containing a real number: the percentage of votes received by each choice relative to the total votes, rounded to two decimal places. If no votes are cast, print \\"0.00%\\" for each choice. -----Examples----- Sample Input: 3 50 25 25 Sample Output: 50.00% 25.00% 25.00% Sample Input: 4 0 0 0 0 Sample Output: 0.00% 0.00% 0.00% 0.00% Sample Input: 2 30 70 Sample Output: 30.00% 70.00%","solution":"def calculate_vote_percentages(C, votes): Calculates the percentage of votes each choice received. total_votes = sum(votes) if total_votes == 0: return [\\"0.00%\\" for _ in range(C)] percentages = [(vote / total_votes) * 100 for vote in votes] return [f\\"{percentage:.2f}%\\" for percentage in percentages]"},{"question":"A manufacturer produces a batch of items every day. Each item is either defective or non-defective. The quality control team inspects `N` items from the batch, records their status (defective or non-defective), and reports this back. Based on this information, the management wants to determine if the batch should be accepted or rejected. The batch is accepted if: - The number of defective items in the inspected sample is less than or equal to a given threshold `T`. Write a function that takes the number of items `N`, a list representing the status of each inspected item (`1` for defective and `0` for non-defective), and the threshold `T`. The function should return \\"Accept\\" if the batch meets the criteria and \\"Reject\\" otherwise. **Input:** - The number of inspected items, `N` (an integer where 1 <= N <= 100). - A list of `N` integers where each integer is either 0 or 1. - An integer threshold `T` (where 0 <= T <= N). **Output:** - A string \\"Accept\\" or \\"Reject\\". **Example:** ```python defective_items = [0, 1, 0, 0, 1, 0] N = 6 T = 1 should_accept(N, defective_items, T) # Output: \\"Reject\\" ``` **Explanation:** In the given example, out of the 6 inspected items, there are 2 defective items which exceeds the threshold of 1. Thus, the batch is rejected.","solution":"def should_accept(N, defective_items, T): Determines if the batch should be accepted or rejected based on the number of defective items. Parameters: N (int): The number of inspected items. defective_items (list): A list of integers (0 or 1) representing the status of each inspected item. T (int): The threshold for the acceptable number of defective items. Returns: str: \\"Accept\\" if the number of defective items is less than or equal to the threshold, otherwise \\"Reject\\". defective_count = sum(defective_items) if defective_count <= T: return \\"Accept\\" else: return \\"Reject\\""},{"question":"Lucas is learning about sorting algorithms and has encountered the concept of the \\"minimum adjacent swaps\\" needed to sort an array in ascending order. He wants to write a program to determine the minimum number of swaps needed for several arrays. Given an array, you need to return the minimum number of adjacent swaps required to sort the array. You should also handle multiple test cases. Input Format: First line contains T, the number of test cases. Each test case is given in two lines: - The first line contains N, the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. Output Format: For each test case, output the minimum number of adjacent swaps needed to sort the array in a new line. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ array elements ≤ 1000 SAMPLE INPUT 2 5 5 4 3 2 1 4 2 3 4 1 SAMPLE OUTPUT 10 3 Problem Setter: Sarah Johnson","solution":"def count_minimum_adjacent_swaps(test_cases): results = [] for case in test_cases: arr = case[1] n = len(arr) swaps = 0 for i in range(n): for j in range(n - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swaps += 1 results.append(swaps) return results"},{"question":"# Task You are given a park which contains `n` sections arranged in a line. Each section contains a number of trees. Some of the trees in each section have fruit, while others do not. The park administration wants to know the total number of fruits present in every contiguous subarray of at least `k` sections, and find the subarray with the maximum number of fruits. # Input - `n`: The number of sections in the park. - `1 <= n <= 10^4` - `k`: The minimum number of contiguous sections to consider. - `1 <= k <= n` - `sections`: A list of integers where each integer represents the number of fruits in that section. - Each integer in the list will be between `0` and `1000`. # Output An integer. The maximum number of fruits found in any contiguous subarray of at least `k` sections. # Example ```python Input n = 5 k = 3 sections = [2, 1, 4, 5, 3] Output 12 Explanation The contiguous subarrays of at least 3 sections are: - [2, 1, 4] => 7 fruits - [1, 4, 5] => 10 fruits - [4, 5, 3] => 12 fruits - [2, 1, 4, 5] => 12 fruits - [1, 4, 5, 3] => 13 fruits - [2, 1, 4, 5, 3] => 15 fruits The subarray [2, 1, 4, 5, 3] contains 12 fruits, which is the maximum number of fruits for a subarray of at least 3 sections. ```","solution":"def max_fruits(n, k, sections): Returns the maximum number of fruits found in any contiguous subarray of at least `k` sections. max_fruits = 0 current_sum = 0 for i in range(n): current_sum += sections[i] if i >= k - 1: max_fruits = max(max_fruits, current_sum) current_sum -= sections[i - k + 1] return max_fruits"},{"question":"Task: Create a function topKFrequent that receives an array nums of integers and an integer k. The function should return the k most frequent elements in the array. You can assume that the array is not empty and k is always a valid integer between 1 and the number of unique elements in the array. Example Outputs: Input: nums = [1,1,1,2,2,3], k = 2 Output: [1, 2] Input: nums = [4,4,4,4,3,3,2,2,1,1], k = 1 Output: [4] Note: - Your output should be in the same format as the examples. - If multiple elements have the same frequency, you can return them in any order. - Do not use any built-in functions that directly solve the problem. Good luck!","solution":"def topKFrequent(nums, k): Returns the k most frequent elements in the array nums. from collections import Counter # Count the frequency of each element in the array frequency = Counter(nums) # Get the k most common elements most_common_elements = frequency.most_common(k) # Extract just the elements from the most_common function results result = [element for element, _ in most_common_elements] return result"},{"question":"Alice is tasked with reorganizing a binary string. Specifically, she has a binary string `s` of length `n` consisting of characters \'0\' and \'1\'. She can perform the following operations an unlimited number of times: - Pick any two adjacent characters and swap them. Alice wants to know the minimum number of contiguous substrings containing only \'1\'s in any rearrangement of `s`. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. For each test case: - The first line contains a single integer n (1 le n le 100) — the length of the binary string. - The second line contains the binary string `s` of length n. The sum of n over all test cases does not exceed 2 cdot 10^4. -----Output----- For each test case, print a single integer — the minimum number of contiguous substrings containing only \'1\'s in any rearrangement of `s`. -----Examples----- Input 3 5 10101 4 1100 6 111000 Output 2 1 1 -----Note----- In the first test case, the binary string is \\"10101\\". To minimize the number of contiguous \'1\'s, Alice can rearrange it as \\"11100\\" or \\"00111\\", resulting in 2 contiguous substrings containing only \'1\'s. In the second test case, the binary string is \\"1100\\", Alice can rearrange it as \\"0011\\" or \\"1100\\" itself, resulting in just 1 contiguous substring of \'1\'s. In the third test case, the binary string is \\"111000\\". It is already in the optimal arrangement with 1 contiguous substring containing only \'1\'s.","solution":"def min_contiguous_substrings(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] s = test_cases[i][1] if \'1\' in s: results.append(1) # At least one substring of \'1\'s else: results.append(0) # No \'1\' substrings return results # Input Reading and Function Execution def main(): import sys input = sys.stdin.read data = input().strip().split() t = int(data[0]) test_cases = [] index = 1 for _ in range(t): n = int(data[index]) s = data[index + 1] test_cases.append((n, s)) index += 2 results = min_contiguous_substrings(t, test_cases) for result in results: print(result)"},{"question":"Zoe is developing a software to manage the data of a small library. The library keeps track of books and their borrowing status. Each book has a unique ID and a borrowing status represented as a boolean value (True if it’s currently borrowed, False if it’s available). Zoe wants to implement a feature that determines the maximum number of consecutive books that are available and the indices at which this sub-array starts and ends. Help Zoe by writing a function that takes an array of booleans and returns the length of the longest sub-array of available books, as well as the starting and ending indices of this sub-array. -----Input----- The input consists of a single integer, N (1 leq N leq 200,000), representing the total number of books, followed by a sequence of N boolean values (True and False) separated by a space. -----Output----- Output two integers separated by a space: length of the longest sub-array of available books, and the starting and ending indices (0-based) of this sub-array. If there are multiple sub-arrays of the same maximum length, return the one which starts earliest. -----Example----- Input 10 False True False False True False True True False False Output 2 6 7 -----Note----- In the given example, the longest sequence of available books has length 2, starting from index 6 to 7. Another sub-array of same length starts at index 3 and ends at index 4 but its start is later than index 6, so we choose the earlier one.","solution":"def max_consecutive_available_books(n, status_list): max_length = 0 current_length = 0 start_index = 0 max_start_index, max_end_index = 0, 0 for i in range(n): if not status_list[i]: current_length += 1 if current_length > max_length: max_length = current_length max_start_index = start_index max_end_index = i else: current_length = 0 start_index = i + 1 return max_length, max_start_index, max_end_index"},{"question":"James, an astronomy student, loves to study star constellations represented by coordinate points in a 2D space. He defines a constellation as a set of points where no three points are collinear. Given a set of points, he wants to determine if they can form a valid constellation. The input consists of: - The first line contains T, the number of test cases. - For each test case, the first line contains N, the number of points. - The next N lines each contain two integers x and y, representing the coordinates of each point. 1 ≤ T ≤ 10 3 ≤ N ≤ 50 -1000 ≤ x, y ≤ 1000 Output \\"YES\\" for each test case if the points can form a valid constellation, otherwise output \\"NO\\". SAMPLE INPUT 2 4 1 1 2 2 3 3 4 4 5 0 0 1 2 2 3 3 1 4 4 SAMPLE OUTPUT NO YES Explanation In the first test case, all four points are collinear (they lie on a straight line), so they cannot form a valid constellation. Thus, the output is \\"NO\\". In the second test case, no three points are collinear, so they form a valid constellation, and the output is \\"YES\\".","solution":"def is_valid_constellation(points): Returns \'YES\' if given points can form a valid constellation, otherwise \'NO\' n = len(points) def are_collinear(p1, p2, p3): Check if three points are collinear. return (p2[1] - p1[1]) * (p3[0] - p1[0]) == (p3[1] - p1[1]) * (p2[0] - p1[0]) # Check for every triplet of points for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): if are_collinear(points[i], points[j], points[k]): return \'NO\' return \'YES\' def process_input(cases): Process multiple test cases and returns the result as per problem statement. results = [] for points in cases: results.append(is_valid_constellation(points)) return results # Define a function to parse input and output results def parse_and_solve(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 cases = [] for _ in range(T): N = int(lines[index]) points = [] for i in range(index + 1, index + N + 1): x, y = map(int, lines[i].split()) points.append((x, y)) cases.append(points) index += N + 1 results = process_input(cases) return \'n\'.join(results)"},{"question":"You are managing a contest system where participants submit their scores across different problems. You are required to build a reporting system to keep track of participants’ total scores in real-time. The system consists of three types of operations: 1) ADD P S --> Add a participant P with an initial score S. If participant P already exists, their score should be incremented by S. 2) UPDATE P S --> Update the score of participant P to S. If participant P doesn\'t exist, add them with the score S. 3) QUERY L R --> Print the total score of participants whose IDs lie between L and R inclusive. Write a program to handle these operations. Input: The first line contains Q, the number of operations to be performed. Each of the following Q lines contains an operation, either ADD, UPDATE, or QUERY, as described above. Output: For each QUERY operation, print the total score of the participants in the given range on a new line. Constraints: 1 ≤ Q ≤ 10^5 1 ≤ P ≤ 10^6 1 ≤ S ≤ 10^6 1 ≤ L ≤ R ≤ 10^6 SAMPLE INPUT 6 ADD 1 10 ADD 2 20 QUERY 1 2 UPDATE 2 15 ADD 3 30 QUERY 2 3 SAMPLE OUTPUT 30 45 Explanation: Initial state: 1. ADD 1 10 -> {1: 10} 2. ADD 2 20 -> {1: 10, 2: 20} 3. QUERY 1 2 -> Total score for participants 1 and 2 is 30 (10 + 20) 4. UPDATE 2 15 -> {1: 10, 2: 15} 5. ADD 3 30 -> {1: 10, 2: 15, 3: 30} 6. QUERY 2 3 -> Total score for participants 2 and 3 is 45 (15 + 30)","solution":"class ContestSystem: def __init__(self): self.scores = {} def add(self, P, S): if P in self.scores: self.scores[P] += S else: self.scores[P] = S def update(self, P, S): self.scores[P] = S def query(self, L, R): return sum(self.scores[P] for P in self.scores if L <= P <= R) def contest_system(operations): cs = ContestSystem() results = [] for operation in operations: op = operation.split() if op[0] == \\"ADD\\": _, P, S = op cs.add(int(P), int(S)) elif op[0] == \\"UPDATE\\": _, P, S = op cs.update(int(P), int(S)) elif op[0] == \\"QUERY\\": _, L, R = op results.append(cs.query(int(L), int(R))) return results"},{"question":"Given the current state of the amusement park \\"Happy Land\\", you are tasked with designing a new layout for the amusement rides such that it fulfills certain criteria. The park consists of `n` plot areas connected by `m` paths. Each plot area may either house a ride or be empty. The park owner wants to ensure that no two adjacent plot areas (connected by a path) both contain a ride, to avoid congestion and ensure safety. Your task is to determine if it is possible to place the rides in the park in such a way that no two adjacent plots both contain a ride. Input The first line contains two integers `n` and `m` — the number of plot areas and the number of paths (1 ≤ n ≤ 100, 0 ≤ m ≤ 4950). The next `m` lines each contain two integers `a` and `b` — representing a path between plot areas `a` and `b` (1 ≤ a, b ≤ n, a ≠ b). It is guaranteed that there are no multiple paths between any two plots, and no plot area has a path to itself. Output If it is possible to place the rides following the given criteria, print \\"POSSIBLE\\" (without quotes). Otherwise, print \\"IMPOSSIBLE\\" (without quotes). Examples Input 4 4 1 2 2 3 3 4 4 1 Output POSSIBLE Input 3 3 1 2 2 3 3 1 Output IMPOSSIBLE","solution":"def is_possible(n, m, paths): Determine if it is possible to place the rides in such a way that no two adjacent plots both contain a ride. Args: n: int - number of plot areas m: int - number of paths paths: list of (int, int) tuples - each tuple denotes a path between plots Returns: str: \\"POSSIBLE\\" if it\'s feasible to place the rides as per the criteria, otherwise \\"IMPOSSIBLE\\" from collections import defaultdict, deque # Create a graph from the paths graph = defaultdict(list) for a, b in paths: graph[a].append(b) graph[b].append(a) # To record the \\"color\\" of each node; 0: unvisited, 1: color 1, -1: color 2 color = [0] * (n + 1) # Use BFS to check if the graph is bipartite def bfs(start): queue = deque([start]) color[start] = 1 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == 0: # not colored color[neighbor] = -color[node] queue.append(neighbor) elif color[neighbor] == color[node]: # same color as current node return False return True # Check all connected components for i in range(1, n + 1): if color[i] == 0: if not bfs(i): return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\""},{"question":"You are given a 2D grid of size n times m filled with integers. You can perform the following operation any number of times (possibly, zero): - Choose any subgrid of size 3 times 3 and rotate its elements 90 degrees in the clockwise direction. Determine whether you can make all rows and columns of the grid sorted in non-decreasing order using the aforementioned operation. -----Input----- Each test consists of multiple test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. The description of test cases follows. The first line of each test case contains two integers n and m (3 le n, m le 10) — the dimensions of the grid. The next n lines contain m integers each, representing the elements of the grid. -----Output----- For each test case, output \\"Possible\\" (without quotes) if it\'s possible to make all rows and columns sorted in non-decreasing order, and \\"Impossible\\" (without quotes) otherwise. You can output \\"Possible\\" and \\"Impossible\\" in any case (for example, strings \\"POSSIBLE\\", \\"pOssible\\" and \\"possible\\" will be recognized as a positive response). -----Examples----- Input 2 3 3 1 2 3 4 5 6 7 8 9 3 4 7 5 3 1 6 4 2 8 9 0 1 3 Output Possible Impossible -----Note----- In the first test case, the grid is already sorted in non-decreasing order in both rows and columns. In the second test case, it can be shown that it\'s impossible to sort the entire grid using the given operation.","solution":"def can_sort_grid(test_cases): results = [] def is_sorted(lst): return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) for n, m, grid in test_cases: rows_sorted = all(is_sorted(row) for row in grid) cols_sorted = all(is_sorted([grid[i][j] for i in range(n)]) for j in range(m)) if rows_sorted and cols_sorted: results.append(\\"Possible\\") else: results.append(\\"Impossible\\") return results"},{"question":"The Knights of the Round Table are engaged in a campaign across various regions. Each region is represented as a grid of size P x Q, where each cell in the grid contains an integer representing the strength of that location\'s defenses. The knights aim to capture the regions, but they need to maximize their efficiency by targeting the weakest line of defense within each region. A line of defense can be either a row, a column, or a diagonal (both primary and secondary diagonals). The strength of a line of defense is the sum of the strengths of all cells in that line. Your task is to help the knights determine the weakest line of defense for each region and its corresponding strength. INPUT::: The first line contains a single integer K, the number of regions. For each region, the first line contains two space-separated integers P and Q (size of the region), followed by P lines containing Q integers, each representing the defense strength at that location. OUTPUT::: For each region, output a single integer representing the minimum strength of all lines of defense in the region. CONSTRAINTS::: 1 ≤ K ≤ 10, 1 ≤ P, Q ≤ 500, 0 ≤ Defense Strength ≤ 1000 SAMPLE INPUT 2 3 3 8 1 6 3 5 7 4 9 2 4 2 1 2 3 4 5 6 7 8 SAMPLE OUTPUT 10 3 Explanation For the first region, the weakest line of defense is either the row {3, 5, 7} or the secondary diagonal {6, 5, 4}, both summing to 15. However, there are no other weaker lines. For the second region, the vertical column {3, 4} has the smallest sum of 3.","solution":"def find_minimum_defense_strength(K, regions): results = [] for region in regions: P, Q = region[\\"size\\"] grid = region[\\"grid\\"] # Calculate row sums row_sums = [sum(row) for row in grid] # Calculate column sums col_sums = [sum(grid[i][j] for i in range(P)) for j in range(Q)] # Calculate primary diagonal sum primary_diagonal_sum = sum(grid[i][i] for i in range(min(P, Q))) # Calculate secondary diagonal sum secondary_diagonal_sum = sum(grid[i][Q - i - 1] for i in range(min(P, Q))) # Collect all possible line sums all_sums = row_sums + col_sums + [primary_diagonal_sum, secondary_diagonal_sum] # Find the minimum sum min_strength = min(all_sums) results.append(min_strength) return results # Handling input and output def process_input(): K = int(input().strip()) regions = [] for _ in range(K): P, Q = map(int, input().strip().split()) grid = [] for _ in range(P): grid.append(list(map(int, input().strip().split()))) regions.append({\\"size\\": (P, Q), \\"grid\\": grid}) return K, regions if __name__ == \\"__main__\\": K, regions = process_input() results = find_minimum_defense_strength(K, regions) for result in results: print(result)"},{"question":"You are building a new project management tool to help a company track its ongoing projects and their dependencies. Each project can depend on one or more other projects that must be completed first. The company wants to determine the order in which they should complete the projects to respect all dependencies. Your task is to write a program that calculates the shortest sequence of project completions that satisfies all dependencies. If it is not possible to complete all projects due to circular dependencies, your program should indicate this. A project can be represented by an integer identifier between 1 and N. -----Input----- The first line of input contains two integers N and D (2 le N le 10000, 0 le D le 100000) – the number of projects and the number of dependencies, respectively. Each of the following D lines contains two integers A and B (1 le A, B le N) indicating that project B depends on project A. -----Output----- If it is possible to complete all projects, output a space-separated sequence of N integers representing one valid order of completion. If it is not possible, output \\"IMPOSSIBLE\\". -----Examples----- Sample Input 1: 4 3 1 2 2 3 3 4 Sample Output 1: 1 2 3 4 Sample Input 2: 4 4 1 2 2 3 3 1 3 4 Sample Output 2: IMPOSSIBLE","solution":"from collections import defaultdict, deque def find_project_order(N, D, dependencies): Determines the order of project completions based on dependencies. Args: N : int : Number of projects D : int : Number of dependencies dependencies : list of tuples : List containing tuples of dependencies (A, B) Returns: str : A space-separated sequence of N integers representing valid order of completion or \\"IMPOSSIBLE\\" # Create adjacency list and indegree count adj_list = defaultdict(list) indegree = [0] * (N + 1) for A, B in dependencies: adj_list[A].append(B) indegree[B] += 1 # Initialize queue with nodes having no incoming edges queue = deque([i for i in range(1, N + 1) if indegree[i] == 0]) order = [] while queue: current = queue.popleft() order.append(current) for neighbor in adj_list[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(order) == N: return \\" \\".join(map(str, order)) else: return \\"IMPOSSIBLE\\" # A reusable function for readability and to aid in testing def project_management_tool(N, D, dependencies): return find_project_order(N, D, dependencies)"},{"question":"Aria is trying to maintain a database of her song collection. Each song in her collection has unique attributes including a song title, artist name, and duration (in seconds). Aria wants to implement a system where she can: 1. Add a new song to her collection. 2. Delete a song from her collection based on the song title. 3. Retrieve and sort all songs by either title, artist, or duration. 4. Find the total duration of all songs in her collection. Design an interface for Aria’s song collection system. Implement the basic functionality to support the operations mentioned above. **Specifications:** - Define a class `Song` with the following attributes: - `title` (string): The title of the song. - `artist` (string): The artist of the song. - `duration` (int): The duration of the song in seconds. - Define a class `SongCollection` to manage the song collection with the following methods: - `add_song(song: Song) -> None`: Adds a `Song` object to the collection. - `delete_song(title: str) -> bool`: Deletes the song with the given title from the collection. Returns `True` if the song was successfully deleted, and `False` if the song with the given title does not exist. - `get_sorted_songs(by: str) -> List[Song]`: Returns a list of `Song` objects sorted based on the attribute specified by `by`. The attribute `by` can be one of `\\"title\\"`, `\\"artist\\"`, or `\\"duration\\"`. - `get_total_duration() -> int`: Returns the total duration of all songs in the collection in seconds. **Input/Output:** - Your implementation should not read any input from standard input. - Your implementation should not write any output to standard output. - Instead, implement the classes and methods so that they can be tested programmatically. **Example:** ```python # Example usage: song1 = Song(title=\\"Song A\\", artist=\\"Artist A\\", duration=240) song2 = Song(title=\\"Song B\\", artist=\\"Artist B\\", duration=200) song3 = Song(title=\\"Song C\\", artist=\\"Artist A\\", duration=180) collection = SongCollection() collection.add_song(song1) collection.add_song(song2) collection.add_song(song3) assert collection.get_total_duration() == 620 sorted_by_title = collection.get_sorted_songs(by=\\"title\\") assert [song.title for song in sorted_by_title] == [\\"Song A\\", \\"Song B\\", \\"Song C\\"] sorted_by_artist = collection.get_sorted_songs(by=\\"artist\\") assert [song.title for song in sorted_by_artist] == [\\"Song A\\", \\"Song C\\", \\"Song B\\"] sorted_by_duration = collection.get_sorted_songs(by=\\"duration\\") assert [song.title for song in sorted_by_duration] == [\\"Song C\\", \\"Song B\\", \\"Song A\\"] assert collection.delete_song(\\"Song B\\") is True assert collection.delete_song(\\"Song D\\") is False assert collection.get_total_duration() == 420 ``` **Notes:** - Ensure the system handles cases where a song to be deleted does not exist. - Sorting by attributes should respect the natural order, i.e., alphabetical for strings and numerical for integers. - Your implementation should be efficient in terms of time and space complexity.","solution":"from typing import List class Song: def __init__(self, title: str, artist: str, duration: int): self.title = title self.artist = artist self.duration = duration class SongCollection: def __init__(self): self.songs = [] def add_song(self, song: Song) -> None: self.songs.append(song) def delete_song(self, title: str) -> bool: for song in self.songs: if song.title == title: self.songs.remove(song) return True return False def get_sorted_songs(self, by: str) -> List[Song]: if by == \\"title\\": return sorted(self.songs, key=lambda x: x.title) elif by == \\"artist\\": return sorted(self.songs, key=lambda x: x.artist) elif by == \\"duration\\": return sorted(self.songs, key=lambda x: x.duration) else: raise ValueError(\\"Sort by attribute must be \'title\', \'artist\', or \'duration\'\\") def get_total_duration(self) -> int: return sum(song.duration for song in self.songs)"},{"question":"Given a binary tree, print the nodes in the level order traversal starting from the bottom level up to the root level. Use a queue data structure to assist with the traversal. Example 1: Input: 1 / 2 3 / / 4 5 6 7 Output: 4 5 6 7 2 3 1 Explanation: First, nodes in the bottom level are printed, followed by nodes one level up, continuing till the root node. Example 2: Input: 10 / 20 30 / 40 Output: 40 20 30 10 Your Task: You don’t need to read input or print anything. Complete the function levelOrderBottomUp(root) that takes the root of the tree as input, and returns a list of the node values in the level order traversal from bottom to top. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: - The number of nodes in the tree is in the range [1, 10^4]. - -10^4 <= Node value <= 10^4","solution":"from collections import deque class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def levelOrderBottomUp(root): if not root: return [] queue = deque([root]) result = [] while queue: level_size = len(queue) level_nodes = [] for _ in range(level_size): node = queue.popleft() level_nodes.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.insert(0, level_nodes) return [val for sublist in result for val in sublist]"},{"question":"Ria and Sam are playing a card game with a deck of N cards. Each card is assigned a unique number from 1 to N. Ria and Sam want to split the deck into two non-empty subsets such that the difference between the maximum cards in the two subsets is minimized. Moreover, they want the sum of all cards in each subset to be as close as possible. Write an algorithm to find the minimal difference between the maximum cards in the two subsets and the minimal absolute difference between the sums of the cards in the two subsets. Formally, you have to partition the numbers from 1 to N into two non-empty sets A and B such that: - The maximum difference left| max(A) - max(B) right| is minimized. - The absolute difference left| sum(A) - sum(B) right| is minimized. If there are multiple distributions that yield the same minimal differences, any such distribution is acceptable. ----- Input ------ The input contains a single integer N, the number of cards in the deck. ----- Output ------ Output two space-separated integers. The first integer is the minimized maximum difference left| max(A) - max(B) right|, and the second integer is the minimized absolute difference left| sum(A) - sum(B) right|. ----- Constraints ------ 2 ≤ N ≤ 10^{6} ----- Sample Input 1 ------ 5 ----- Sample Output 1 ------ 0 1 ----- Sample Input 2 ------ 10 ----- Sample Output 2 ------ 0 0","solution":"def split_deck(N): Split a deck of N cards numbered from 1 to N into two subsets such that the difference between the maximum cards in the two subsets is minimized and the absolute difference between the sums of the cards in the two subsets is minimized. Returns a tuple of two integers representing these minimized differences. if N % 2 == 0: return 0, 0 else: return 0, 1"},{"question":"Given a string, determine if it is a permutation of a palindrome. A palindrome is a string that reads the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words. Example Input: \\"Tact Coa\\" Output: True (permutations: \\"taco cat\\", \\"atco cta\\", etc.) Function Description Complete the function isPalindromePermutation in the editor below. isPalindromePermutation has the following parameter(s): string s: the string to be checked Returns bool: a boolean indicating whether the string is a permutation of a palindrome Input Format A single line containing the string s. Constraints 1 leq |s| leq 50 The string will only contain spaces and uppercase and lowercase letters. Sample Input 0 a Sample Output 0 True Explanation 0 The input string has only one character, which is a palindrome by itself. Sample Input 1 ab Sample Output 1 False Explanation 1 There is no permutation of the string that can form a palindrome. Sample Input 2 Tact Coa Sample Output 2 True Explanation 2 The input string can be rearranged to form the palindrome \\"taco cat\\".","solution":"def isPalindromePermutation(s): Determine if the string is a permutation of a palindrome. :param s: The input string to check. :return: True if the string is a permutation of a palindrome, False otherwise. # Normalize the string: remove spaces and convert to lowercase s = s.replace(\\" \\", \\"\\").lower() # Create a dictionary to count occurrences of each character char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 # Check the number of chars with odd counts odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # For a string to be a permutation of a palindrome: # - It can have at most one character with an odd count return odd_count <= 1"},{"question":"Problem You are given a matrix of dimensions `n x m` filled with integers. Your task is to determine the minimum cost to reach the bottom-right cell (cell at position `(n-1, m-1)`) from the top-left cell (cell at position `(0, 0)`). You can only move to the right or down from a cell, and the cost of moving to a cell is the value of the integer in that cell. You need to find the minimum sum of the costs to reach the bottom-right cell. # Input The input consists of: 1. An integer, `n`, denoting the number of rows in the matrix. 2. An integer, `m`, denoting the number of columns in the matrix. 3. `n` lines follow, each containing `m` integers — the elements of the matrix. # Output Output the minimum cost to reach the bottom-right cell from the top-left cell. # Constraints - `1 <= n, m <= 1000` - `1 <= matrix[i][j] <= 1000` # Example Example 1 Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 7 ``` Explanation: ``` 1 -> 3 -> 1 | v 1 -> 1 | v 4 -> 2 -> 1 ``` The path with minimum cost to reach the bottom-right cell is `1 -> 3 -> 1 -> 1 -> 1`, having a total cost of `7`. Example 2 Input: ``` 2 2 1 2 1 1 ``` Output: ``` 3 ``` Explanation: ``` 1 -> 2 | v 1 -> 1 ``` The path with a minimum cost to reach the bottom-right cell is `1 -> 2 -> 1`, having a total cost of `3`.","solution":"def min_cost_path(matrix): Returns the minimum cost to reach the bottom-right cell from the top-left cell in a matrix. n = len(matrix) m = len(matrix[0]) # dp table to store the minimum cost path sum until each cell dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = matrix[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] # The bottom-right cell contains the minimum path cost to reach there return dp[n-1][m-1]"},{"question":"You are given an array arr[], where each element represents the height of a building. You need to find the number of buildings that have an unobstructed view of the sunset when looking from the left (starting from the first element). Example 1: Input: arr[] = {7, 4, 8, 2, 9} Output: 3 Explanation: Building heights are 7, 4, 8, 2, 9. Buildings with the heights 7, 8, and 9 have an unobstructed view of the sunset. Example 2: Input: arr[] = {4, 3, 2, 5, 2} Output: 2 Explanation: Building heights are 4, 3, 2, 5, 2. Buildings with the heights 4 and 5 have an unobstructed view of the sunset. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function countBuildingsWithView() that takes an array (arr), size of the array (n), and returns the count of buildings with an unobstructed view. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^7","solution":"def countBuildingsWithView(arr): Returns the number of buildings that have an unobstructed view of the sunset from the left side. max_height = 0 count = 0 for height in arr: if height > max_height: count += 1 max_height = height return count"},{"question":"Write a Python function that takes a list of integers and returns the second smallest number in the list. If there is no second smallest number (e.g., if the list contains less than two unique numbers), the function should return `None`. ```python def second_smallest(numbers): # Your code here # Example usage: print(second_smallest([1, 2, 3, 4, 5])) # Output: 2 print(second_smallest([5, 5, 5])) # Output: None ```","solution":"def second_smallest(numbers): Returns the second smallest number in the list. If there is no second smallest number, returns None. unique_numbers = list(set(numbers)) # Get unique numbers if len(unique_numbers) < 2: return None # No second smallest number if less than 2 unique numbers unique_numbers.sort() return unique_numbers[1] # Return the second smallest number"},{"question":"Rafik is a gardener who loves watering plants. He is currently designing an automated watering schedule for his new garden. Rafik\'s garden has n different plants, and each plant needs watering at different intervals to remain healthy. The i-th plant needs to be watered every a_i days. Rafik wants to ensure that each plant is watered exactly on its schedule. To create an efficient watering schedule, Rafik will select some days within a given range to water the plants. He wants to maximize the number of plants that are watered on each selected day, ensuring no plant is missed for its schedule. Given the total number of days d that Rafik can select for his watering schedule, and the watering intervals for all n plants, determine the maximum possible number of plants that can be watered exactly on their schedule throughout the entire period. -----Input----- The first line contains an integer t (1 le t le 50) — the number of test cases. Each test case consists of two lines. The first line contains two integers n and d (1 le n le 100, 1 le d le 1000) — the number of plants in the garden and the total days Rafik can select for watering. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the watering intervals of each plant. -----Output----- For each test case, print a single integer — the maximum number of plants that can be watered exactly on their schedule during the selected days. -----Examples----- Input 3 5 10 2 3 5 3 4 4 7 1 2 3 4 6 15 2 4 6 8 10 12 Output 5 4 6 -----Note----- In the first example, all 5 plants can be watered exactly according to their schedule within the 10 selected days. In the second example, selecting every day from the range will ensure all 4 plants are watered on their required intervals. In the third example, all 6 plants can be watered exactly according to their schedule within the 15 selected days.","solution":"def max_plants_watered(num_cases, cases): results = [] for case in cases: n, d = case[0] watering_intervals = case[1] count = 0 for interval in watering_intervals: if d // interval > 0: count += 1 results.append(count) return results"},{"question":"You are given a rectangular grid of cells, where each cell can be either \\"land\\" (1) or \\"water\\" (0). The grid represents a geographic area, and your task is to figure out how many distinct islands are present in the grid. An island is defined as a group of horizontally or vertically adjacent lands (1s) separated by water (0s). Diagonal adjacency does not count for the connection. Write a function `countIslands(grid)` that takes a 2D array representing the grid of cells and returns an integer representing the number of distinct islands in the grid. # Input: - A 2D list `grid` of integers where `grid[i][j]` is either 0 (water) or 1 (land). # Output: - An integer representing the number of distinct islands. # Example: ```python # Example 1 grid1 = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 1, 1] ] # Example 2 grid2 = [ [1, 1, 0, 0, 0], [1, 0, 0, 0, 1], [0, 0, 1, 1, 0], [0, 0, 1, 1, 1] ] # Output for Example 1: 4 # Output for Example 2: 3 ``` # Constraints: - The length of each side of the grid does not exceed 100. - The grid contains only 0s and 1s.","solution":"def countIslands(grid): Returns the number of distinct islands in the grid. if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == 0 or visited[r][c]: return visited[r][c] = True # Explore all 4 directions dfs(r - 1, c) dfs(r + 1, c) dfs(r, c - 1) dfs(r, c + 1) island_count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1 and not visited[r][c]: # Start a new DFS to mark all lands in this island dfs(r, c) island_count += 1 return island_count"},{"question":"Given two sequences of integers, `a` and `b`, of length `n`, determine the maximum value of any contiguous subarray of `a` that can be achieved by swapping at most `k` pairs of corresponding elements in `b`. For each swap, you can choose two different indices `i` and `j` and swap `b[i]` and `b[j]`. The task is to find the maximum sum of any contiguous subarray of `a` after performing at most `k` swaps on `b`. -----Input----- The first line contains one integer `t` (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers `n` (1 le n le 500) and `k` (0 le k le 100) — the length of the sequences and the maximum number of swaps allowed respectively. The second line contains `n` integers `a_i` (1 le a_i le 10^5) — the elements of the sequence `a`. The third line contains `n` integers `b_i` (1 le b_i le 10^5) — the elements of the sequence `b`. -----Output----- For each test case, print one integer, the maximum value of any contiguous subarray of `a` that can be achieved by performing at most `k` swaps on `b`. -----Example----- Input 3 5 2 1 5 3 1 2 2 1 3 4 5 4 0 4 3 2 1 5 6 7 8 6 1 10 20 30 40 50 60 6 5 4 3 2 1 Output 12 10 210 -----Note----- For the first case: One possible solution is to swap `b[1]` with `b[2]`, so `b` becomes [2, 1, 3, 4, 5]. Then take the sum of the first three elements in `a`, which is 1+5+3=9. Another solution swaps `b[1]` with `b[3]`, resulting in `b` becoming [2, 3, 1, 4, 5], and the contiguous subarray might give a higher sum such as 5+3+1+2=11. For the second case: No swap is allowed (`k=0`), hence the sum of any contiguous subarray in `a` remains as it is. For the third case: One possible swap is between `b[1]` and `b[6]`, resulting in `b` becoming [6, 5, 4, 3, 2, 1]. Then take the entire sequence of `a`, giving the sum 10+20+30+40+50+60=210.","solution":"def max_contiguous_subarray_sum_with_k_swaps(t, test_cases): results = [] def kadane(arr): max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global for i in range(t): n, k = test_cases[i][0] a = test_cases[i][1] b = test_cases[i][2] a_sorted = sorted(a, reverse=True) b_sorted = sorted(b) for j in range(min(k, n)): if a_sorted[j] > b_sorted[j]: b_sorted[j] = a_sorted[j] else: break max_sum = kadane(a) results.append(max_sum) return results"},{"question":"Given a string of integers, find the sum of the largest and smallest integers in the string. Example 1: Input: s = \\"4 2 -7 5 3\\" Output: -2 Explanation: From the string, the smallest integer is -7, and the largest integer is 5. Their sum is -7 + 5 = -2. Example 2: Input: s = \\"10 20 30 40 50\\" Output: 60 Explanation: From the string, the smallest integer is 10, and the largest integer is 50. Their sum is 10 + 50 = 60. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumLargestSmallest() which takes a string s as an input parameter and returns an integer representing the sum of the largest and smallest integers. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: -10^5 <= each integer in the string <= 10^5 1 <= number of integers in the string <= 1000","solution":"def sumLargestSmallest(s): Returns the sum of the largest and smallest integers in the string. numbers = list(map(int, s.split())) return min(numbers) + max(numbers)"},{"question":"# Arithmetic Sub-array Input A list of positive integers `arr`: ``` 1 <= len(arr) <= 1000 1 <= arr[i] <= 1000000 ``` Output The length of the longest arithmetic sub-array. Description An arithmetic sub-array is a contiguous sub-array in which the difference between consecutive elements is constant. If the list has multiple arithmetic sub-arrays of the same length, return that length. Example Starting with `[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]`: ``` The longest arithmetic sub-array: [1, 3, 5, 7, 9] The output would be: 5 Starting with `[10, 7, 4, 6, 8, 12, 8, 4]`: The longest arithmetic sub-array: [10, 7, 4] The output would be: 3","solution":"def longest_arithmetic_subarray(arr): Returns the length of the longest arithmetic sub-array in a given list of positive integers. if len(arr) < 2: return len(arr) max_len = 2 current_len = 2 current_diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i - 1] == current_diff: current_len += 1 else: current_diff = arr[i] - arr[i - 1] current_len = 2 max_len = max(max_len, current_len) return max_len"},{"question":"You have a grid of size NxM filled with positive integers. You are allowed to perform a series of operations on the grid, where in each operation, you can choose any subgrid with size 2x2 and multiply each element of this subgrid by a positive integer d>1. Your task is to transform the given grid (G) into a target grid (T) by performing the minimum number of operations, or determine if it is impossible. Input: - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M indicating the dimensions of the grid. - The next N lines contain M space-separated integers each, representing the original grid G. - The following N lines contain M space-separated integers each, representing the target grid T. Output: - For each test case, print a single line containing one integer ― the minimum required number of operations (if the conversion is possible), or else print \\"-1\\". Constraints: - 1 leq T leq 100 - 2 leq N, M leq 50 - 1 leq G[i][j], T[i][j] leq 10^4 Sample Input: ``` 1 2 2 1 1 1 2 2 2 2 4 ``` Sample Output: ``` 1 ```","solution":"def min_operations_to_transform_grid(T, test_cases): results = [] for t in range(T): N, M, G, target = test_cases[t] operations = 0 possible = True for i in range(N - 1): for j in range(M - 1): while G[i][j] < target[i][j]: factor = target[i][j] // G[i][j] if factor == 1: break operations += 1 for x in range(2): for y in range(2): G[i + x][j + y] *= factor for i in range(N): for j in range(M): if G[i][j] != target[i][j]: possible = False break if not possible: break if possible: results.append(operations) else: results.append(-1) return results"},{"question":"Amanda loves balanced strings. She defines a balanced string as follows: - A string that has an equal number of opening and closing brackets. - Every prefix of the string has at least as many opening brackets as closing brackets. Your task is to help Amanda determine if a given string is balanced. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the length of the string. The second line contains a string of length n consisting of the characters \'(\' and \')\'. -----Output----- Print \\"YES\\" or \\"NO\\" (without the quotes) depending on whether the string is balanced. -----Examples----- Input 6 (()()) Output YES Input 8 (()))(() Output NO","solution":"def is_balanced(n, s): Determines if a given string of brackets is balanced. Parameters: n (int): Length of the string s (str): String consisting of \'(\' and \')\' Returns: str: \\"YES\\" if the string is balanced, \\"NO\\" otherwise open_count = 0 for char in s: if char == \'(\': open_count += 1 elif char == \')\': open_count -= 1 if open_count < 0: return \\"NO\\" return \\"YES\\" if open_count == 0 else \\"NO\\""},{"question":"In a certain country, there are N cities connected by M direct flights. Each flight connects two cities and takes a certain amount of time. You are given the list of flights with the departure city, destination city, and the time it takes. Now, you want to determine the shortest possible time it takes to travel from City 1 to City N when considering only one stop at an intermediate city. Write a program to find the minimum travel time from City 1 to City N given that exactly one intermediate stop is allowed. -----Constraints----- - 3 ≤ N ≤ 200 000 - 1 ≤ M ≤ 200 000 - 1 ≤ time_i ≤ 10^6 - 1 ≤ a_i < b_i ≤ N - If i ≠ j, (a_i, b_i) ≠ (a_j, b_j). -----Input----- Input is given from Standard Input in the following format: N M a_1 b_1 time_1 a_2 b_2 time_2 : a_M b_M time_M -----Output----- Print a single integer representing the minimum travel time from City 1 to City N with exactly one intermediate stop. If it\'s not possible to travel from City 1 to City N with one stop, print -1. -----Sample Input----- 5 6 1 2 5 2 5 4 1 3 7 3 4 3 4 5 1 2 4 6 -----Sample Output----- 9","solution":"import heapq def find_min_time_with_one_stop(N, M, flights): # Create adjacency list for the graph adj_list = [[] for _ in range(N + 1)] for a, b, time in flights: adj_list[a].append((b, time)) adj_list[b].append((a, time)) def dijkstra(start): dist = [float(\'inf\')] * (N + 1) dist[start] = 0 pq = [(0, start)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in adj_list[u]: new_dist = current_dist + weight if new_dist < dist[v]: dist[v] = new_dist heapq.heappush(pq, (new_dist, v)) return dist # Get shortest path distances from City 1 and to City N dist_from_1 = dijkstra(1) dist_to_N = dijkstra(N) min_time = float(\\"inf\\") # Try all possible intermediate stops for a, b, time in flights: if dist_from_1[a] != float(\'inf\') and dist_to_N[b] != float(\'inf\'): min_time = min(min_time, dist_from_1[a] + time + dist_to_N[b]) if dist_from_1[b] != float(\'inf\') and dist_to_N[a] != float(\'inf\'): min_time = min(min_time, dist_from_1[b] + time + dist_to_N[a]) return -1 if min_time == float(\'inf\') else min_time # Example Usage N = 5 M = 6 flights = [ (1, 2, 5), (2, 5, 4), (1, 3, 7), (3, 4, 3), (4, 5, 1), (2, 4, 6) ] print(find_min_time_with_one_stop(N, M, flights)) # Output: 9"},{"question":"A company has developed a new machine that can perform several types of jobs. Each job type is identified by an integer. The machine has multiple modules, each capable of performing a specific set of job types. The modules are numbered from 1 to n. Each module can process only one job at a time, but they work in parallel. Given the set of jobs and the modules\' capacities, determine the minimum number of minutes required to process all jobs if jobs are assigned optimally. -----Input----- The first line contains an integer t (1 le t le 10^4) – the number of test cases. Each test case consists of two lines: - The first line contains two integers n and m (1 le n le 10^2, 1 le m le 10^3) – the number of modules and the number of jobs. - The second line contains m integers b_1, b_2, dots, b_m (1 le b_i le k), where k is the number of unique job types. The i-th integer indicates the type of the i-th job. The sum of m over all test cases does not exceed 10^4. -----Output----- For each test case, print a single integer – the minimum number of minutes required to process all jobs. -----Examples----- Input 2 2 4 1 2 1 3 3 5 1 2 3 1 2 Output 2 2 -----Note----- In the first test case, assigning the first job type 1 to module 1, the second job type 2 to module 2, and the fourth job type 3 to module 2 (so it requires another 1 minute to process the job), all jobs can be completed optimally in 2 minutes. In the second test case, modules can process the job types as follows: module 1 on the first job, module 2 on the second job, module 3 on the third job, module 1 on the fourth job, and module 2 on the fifth job. This will take 2 minutes to complete all jobs.","solution":"from collections import Counter def min_processing_time(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][0] jobs = test_cases[i][1] job_counter = Counter(jobs) job_frequencies = list(job_counter.values()) # Sort the frequencies in descending order job_frequencies.sort(reverse=True) time = 0 while job_frequencies: time += 1 for j in range(n): if job_frequencies: job_frequencies[0] -= 1 if job_frequencies[0] == 0: job_frequencies.pop(0) job_frequencies.sort(reverse=True) results.append(time) return results"},{"question":"You are given a string consisting of alphabetical letters, digits, and other characters. You need to write a function to check if the string is a palindrome, considering only the letters and digits and ignoring case. A string is a palindrome when it reads the same backward as forward. Function Signature: `def is_palindrome(s: str) -> bool:` # Examples Example 1: Input: s = \\"A man, a plan, a canal: Panama\\" Output: True Explanation: \\"amanaplanacanalpanama\\" is a palindrome. Example 2: Input: s = \\"race a car\\" Output: False Explanation: \\"raceacar\\" is not a palindrome. # Constraints: - 1 <= s.length <= 2*10^5 - The input string consists of printable ASCII characters.","solution":"def is_palindrome(s: str) -> bool: Returns True if the string \'s\' is a palindrome considering only alphanumeric characters and ignoring case. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered characters form a palindrome return filtered_chars == filtered_chars[::-1]"},{"question":"Given an array of integers, your task is to determine whether or not it is possible to partition the array into two subsets such that the sum of the elements in both subsets is equal. If such a partition exists, return `True`, otherwise return `False`. Examples -------- Here are some examples to see what is expected: ```python can_partition([1, 5, 11, 5]) # Returns: True can_partition([1, 2, 3, 5]) # Returns: False can_partition([3, 3, 3, 4, 5]) # Returns: True can_partition([2, 2, 3, 5]) # Returns: False ``` Notes ----- 1. Each input array will have at least one integer. 2. The array will contain only positive integers. 3. The expected time complexity is less than O(n^2). Hints ----- - You may recall this problem as being related to the \\"Knapsack Problem\\". - Try using dynamic programming to achieve the desired time complexity.","solution":"def can_partition(nums): Determine if we can partition nums into two subsets with equal sum. total_sum = sum(nums) # If total_sum is odd, cannot partition into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # DP array to store if a sum is possible using elements from the array dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"Write a function that takes a string containing a mixture of lowercase letters and space characters, and returns a new string with all the space characters replaced by underscores. Input :: \\"hello world\\" Output :: \\"hello_world\\"","solution":"def replace_spaces_with_underscores(input_string): Takes a string containing lowercase letters and space characters. Returns a new string with all spaces replaced by underscores. return input_string.replace(\' \', \'_\')"},{"question":"You are given an array of integers. You can perform the following operation on the array as many times as you want: - Choose an element of the array, remove it, and append twice its value to the end of the array. Determine the minimum number of operations required to make all the elements in the array equal. ------ Input Format ------ - The first line contains an integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N — the length of the array. - The second line of each test case contains N integers representing the array. ------ Output Format ------ For each test case, output the minimum number of operations required to make all the elements in the array equal. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^9 - Sum of N over all test cases does not exceed 10^5. ------ Sample Input 1 ------ 2 3 4 8 2 4 5 10 20 40 ------ Sample Output 1 ------ 2 3 ------ Explanation 1 ------ Test Case 1: We can remove 4 and append 8, then remove 2 and append 4. The array [8, 8, 8] can be achieved in 2 operations. Test Case 2: We can remove 5 and append 10, then remove 10 and append 20, then remove another 10 and append 20. The array [20, 20, 20, 20] can be achieved in 3 operations.","solution":"def min_operations_to_equal_elements(arr): from collections import Counter counter = Counter(arr) max_count = max(counter.values()) return len(arr) - max_count def process_test_cases(test_cases): results = [] for case in test_cases: _ = case[0] # length of array is not used array = case[1] result = min_operations_to_equal_elements(array) results.append(result) return results"},{"question":"In a given town, there is a very peculiar road network resembling a tree structure, where each road connects two towns in such a way that there is exactly one path between any two towns. Each town has a certain population. The Mayor of the town wants to allocate a budget for the construction of recreational facilities along these roads but with the constraint that only roads between certain high population towns can be prioritized. You are given the following: - `n`: Total number of towns (2 ≤ n ≤ 10^5). - `pop`: An array of integers of size n representing the population of each town. - `roads`: A list of (n-1) tuples where each tuple (a, b) represents a road connecting town `a` and town `b` (0 ≤ a, b < n). Your task is to compute and return a list of (n-1) integers where the i-th integer indicates the total population sum of the towns connected directly through the i-th road. Write a function `priority_roads(n: int, pop: List[int], roads: List[Tuple[int, int]]) -> List[int]` that returns the prioritized population for each road. # Input Format - `n` integer, the number of towns. - `pop` list of integers of size `n`, the population of each town. - `roads` list of n-1 tuples, where each tuple contains two integers representing a road between two towns. # Output Format - A list of `n-1` integers, where the i-th integer indicates the total population of towns connected by the i-th road. # Example Input ```python n = 5 pop = [1, 2, 3, 4, 5] roads = [(0, 1), (1, 2), (1, 3), (3, 4)] ``` Output ```python [3, 5, 6, 9] ``` # Explanation Here\'s the population sum of towns connected by each road: 1. Road (0, 1) connects towns 0 and 1: populations 1 and 2, total = 3. 2. Road (1, 2) connects towns 1 and 2: populations 2 and 3, total = 5. 3. Road (1, 3) connects towns 1 and 3: populations 2 and 4, total = 6. 4. Road (3, 4) connects towns 3 and 4: populations 4 and 5, total = 9. # Constraints To ensure this problem can handle the upper limits of input sizes: - Standard input methods should be fast. - The tree structure implies avoiding redundant paths, maximizing efficiency with the single root traversal, and keeping overall complexity around O(n).","solution":"from typing import List, Tuple def priority_roads(n: int, pop: List[int], roads: List[Tuple[int, int]]) -> List[int]: result = [] for a, b in roads: result.append(pop[a] + pop[b]) return result"},{"question":"Your task is to implement a function that rearranges a string such that the characters are sorted based on their frequency in descending order. If two characters have the same frequency, the lexicographically smaller character should come first. For example, given the string \\"tree\\", the function should return \\"eert\\", as \'e\' appears twice, and \'t\' and \'r\' both appear once. The character \'e\' comes first, followed by \'r\' and \'t\'. # Input - An integer `t` (1 leq t leq 20), the number of test cases. - For each test case, a single line containing the string `s` consisting of only lowercase alphabets. The length of the string is between 1 and 10^5. # Output For each test case, output the rearranged string. # Example Input ``` 3 tree cccaaa Aabb ``` Output ``` eert aaaccc bbAa ``` # Note - In the first example, the frequency of characters \'e\' is 2, \'r\' is 1, \'t\' is 1. The output is \'eert\'. - In the second example, the frequency of characters \'c\' is 3, and \'a\' is 3. The output is \'aaaccc\' due to lexicographical order. - In the third example, the frequency of characters \'A\' is 1, \'a\' is 1, \'b\' is 2. The output is \\"bbAa\\" being sorted lexicographically for the same frequency.","solution":"from collections import Counter def rearrange_string_by_frequency(t, test_cases): Rearranges strings based on character frequency in descending order. If two characters have the same frequency, the lexicographically smaller character comes first. Parameters: t (int): Number of test cases. test_cases (list of str): List of strings to be rearranged. Returns: list of str: List of rearranged strings. result = [] for s in test_cases: # Count the frequency of each character in the string freq = Counter(s) # Sort characters first by frequency in descending order then lexicographically sorted_chars = sorted(freq.items(), key=lambda x: (-x[1], x[0])) # Build the result string based on sorted characters and their frequencies rearranged_string = \'\'.join([char * count for char, count in sorted_chars]) result.append(rearranged_string) return result"},{"question":"Anjali loves reading books. She keeps a diary where she notes the ISBN number and the number of pages she reads each day for each book. She wants to analyze how consistently she has been reading books over the last `N` days. Consistency is measured by checking if the number of pages read each day is non-decreasing. You need to help Anjali by writing a function that takes ISBN numbers and the number of pages read each day over the last `N` days for multiple books, and checks if her reading pattern for each book is consistent or not. -----Input----- The first line contains an integer `T` denoting the number of books. Each of the next `T` blocks contains the following: - The first line of the block contains a string `ISBN` representing the ISBN number of the book. - The second line of the block contains an integer `N` representing the number of days. - The third line contains `N` space-separated integers representing the number of pages read each day over the last `N` days. -----Output----- For each book, output a single line containing the ISBN number followed by \\"YES\\" if the reading pattern is consistent, otherwise \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ Pages read each day ≤ 1000 - ISBN is a string with length between 10 and 13 containing alphanumeric characters. -----Example----- Input: 2 123456789X 5 10 20 30 40 50 9876543210 6 15 20 15 25 30 35 Output: 123456789X YES 9876543210 NO -----Explanation----- Example case 1: For the book with ISBN `123456789X`, the pages read each day are 10, 20, 30, 40, and 50 which is non-decreasing. Hence the output is \\"YES\\". Example case 2: For the book with ISBN `9876543210`, the pages read each day are 15, 20, 15, 25, 30, 35 which is not non-decreasing as the number of pages read on day 3 is less than that on day 2. Hence the output is \\"NO\\".","solution":"def check_reading_consistency(T, data): T: int, number of books data: List of tuples, each tuple represents data for a book and contains (ISBN: str, N: int, pages: List[int]) Returns a list of results, each corresponding to a book and in the format (ISBN, \\"YES\\"/\\"NO\\") results = [] for book in data: isbn, n, pages = book consistent = True for i in range(1, n): if pages[i] < pages[i - 1]: consistent = False break results.append((isbn, \\"YES\\" if consistent else \\"NO\\")) return results"},{"question":"Alice is interested in prime numbers, and she recently learned that palindromic prime numbers are quite fascinating. Palindromic prime numbers are prime numbers that remain the same when their digits are reversed. For example, 101 is a palindromic prime number since it is prime and reads the same forwards and backwards. Alice now has a new challenge for you. Given an integer N, find the smallest palindromic prime number that is greater than or equal to N. # Input Format A single integer N, where 1 ≤ N ≤ 10^6 # Output Format A single integer representing the smallest palindromic prime number greater than or equal to N. # Example Input 150 # Example Output 151 # Explanation - 150 is not a palindromic prime. - 151 is greater than 150 and is a palindromic prime number (it reads the same forwards and backwards and is also a prime number). # Notes - Your solution should be efficient enough to handle the upper constraints within reasonable time limits. - You should use appropriate methods to check for both primality and palindromicity. # Constraints 1 ≤ N ≤ 10^6","solution":"def is_palindrome(num): Check if the given number is a palindrome. return str(num) == str(num)[::-1] def is_prime(num): Check if the given number is a prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def smallest_palindromic_prime(N): Find the smallest palindromic prime number greater than or equal to N. num = N while True: if is_palindrome(num) and is_prime(num): return num num += 1"},{"question":"Dijkstra\'s Algorithm You are given a directed graph as an adjacency list where each edge has a non-negative weight. You need to implement Dijkstra\'s algorithm to find the shortest paths from a given starting node to all other nodes within the graph. Each edge in the graph is represented as a tuple `(target, weight)` indicating there is an edge from the origin node to the target node with the given weight. The graph is represented as a dictionary where the key is the origin node and the value is a list of edges (tuples). Task Write a function `dijkstra(graph, start)` that takes the graph and start node as input and returns a dictionary representing the shortest distance from the start node to each other node. If a node is not reachable from the start node, the distance to that node should be represented as `float(\'inf\')`. Example ```python graph = { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'C\', 2), (\'D\', 5)], \'C\': [(\'D\', 1)], \'D\': [] } start = \'A\' dijkstra(graph, start) ``` The function should return: ```python {\'A\': 0, \'B\': 1, \'C\': 3, \'D\': 4} ``` Explanation In this example, the shortest paths from node \'A\' are: - To \'A\': distance 0 (no travel needed) - To \'B\': distance 1 (via \'A\' -> \'B\') - To \'C\': distance 3 (via \'A\' -> \'B\' -> \'C\') - To \'D\': distance 4 (via \'A\' -> \'B\' -> \'C\' -> \'D\') # Note - Node labels in the graph are unique. - The graph may not be fully connected. - The graph does not contain negative weight edges. Tips - Use a priority queue to manage and fetch the minimum distance node to process next. - Keep track of the visited nodes to avoid processing a node more than once. - Update the distances dictionary only when a shorter path is found.","solution":"import heapq def dijkstra(graph, start): Implements Dijkstra\'s algorithm to find the shortest path from the start node to all other nodes in the graph. :param graph: A dictionary where the key is the origin node and value is a list of tuples (target, weight) representing the edges. :param start: The starting node for Dijkstra\'s algorithm. :return: A dictionary with shortest distances from start node to each node. # Initialize distances from start to all other nodes as infinity distances = {node: float(\'inf\') for node in graph} distances[start] = 0 # Priority queue to hold nodes to visit priority_queue = [(0, start)] visited = set() # Set to keep track of visited nodes while priority_queue: # Get the node with the smallest distance current_distance, current_node = heapq.heappop(priority_queue) # If node is already visited, skip it if current_node in visited: continue visited.add(current_node) # Update distances to neighbors for neighbor, weight in graph.get(current_node, []): distance = current_distance + weight # Only update if the new distance is smaller if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"In a particular country, a new highway system is being built to connect its cities. However, due to budget constraints, the government can only afford to build a limited number of bidirectional roads that directly connect two cities. Each road has a specific construction cost, and the government wants to minimize the total cost to connect all the cities. Given the number of cities and a list of possible roads with their corresponding construction costs, you need to determine the minimum cost required to construct the roads such that all cities are connected. If it\'s impossible to connect all cities, return -1. Input The first line contains two integers, n and m (1 <= n <= 1000, 0 <= m <= 100000), where n is the number of cities and m is the number of potential roads. The next m lines each contain three integers u, v, and w (1 <= u, v <= n, 1 <= w <= 10000), which represent a road that can be built between city u and city v with cost w. Output Output a single integer indicating the minimum total cost to connect all cities. If it is impossible to connect all the cities, return -1. Examples Input 4 5 1 2 1 1 3 4 2 3 2 3 4 3 1 4 3 Output 6 Input 4 2 1 2 3 3 4 5 Output -1","solution":"def find_min_cost_to_connect_cities(n, m, roads): Function to find the minimum cost to connect all cities using Kruskal\'s MST algorithm. :param n: Number of cities :param m: Number of possible roads :param roads: List of possible roads with their corresponding costs in the format [u, v, w] :return: The minimum cost to connect all cities, or -1 if not possible # Helper function to find the root of the set def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) # Helper function to union two sets def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 # Kruskal\'s algorithm initialization parent = [] rank = [] result = 0 edges = 0 # Sort all the edges in non-decreasing order by weight roads = sorted(roads, key=lambda item: item[2]) # Initialize disjoint sets for node in range(n): parent.append(node) rank.append(0) for u, v, w in roads: if edges == n - 1: break u -= 1 v -= 1 root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) result += w edges += 1 if edges == n - 1: return result else: return -1"},{"question":"A magician needs your help with an interesting number generation problem. He has an integer N and wants to create a sequence of numbers based on some rules. Help the magician to generate the sequence. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the generated sequence as one line separated by spaces. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 50 -----Rules to generate the sequence:----- 1. The sequence starts with the number 1. 2. Each subsequent number is defined as the sum of the previous number and the next integer in the sequence which is incremented by 1. -----Sample Input:----- 2 3 5 -----Sample Output:----- 1 2 4 1 2 4 7 11 -----EXPLANATION:----- For the input 3, the sequence is generated as: - Start with 1. - The next number is 1 + 1 = 2. - The next number is 2 + 2 = 4. For the input 5, the sequence further continues with: - The next number is 4 + 3 = 7. - The next number is 7 + 4 = 11.","solution":"def generate_sequence(N): Generates the sequence based on the given rules for an integer N. sequence = [1] for i in range(1, N): next_number = sequence[-1] + i sequence.append(next_number) return sequence def sequence_for_cases(T, cases): Returns the sequences for multiple test cases. results = [] for N in cases: sequence = generate_sequence(N) results.append(sequence) return results"},{"question":"Given an array of N integers, write a program to determine if all elements can be rearranged such that they form a geometric progression sequence. Example 1: Input: N=4 arr[] = {2, 6, 18, 54} Output: YES Explanation: Rearrange given array as {2, 6, 18, 54} which forms a geometric progression with a common ratio of 3. Example 2: Input: N=4 arr[] = {1, 7, 14, 28} Output: NO Your Task: Since, this is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function checkIsGP() that takes array arr and integer N as parameters and return true for \\"Yes\\" and false for \\"No\\". Expected Time Complexity: O(NLogN). Expected Auxiliary Space: O(1). Constraints: 2 ≤ N ≤ 10^{5}","solution":"def checkIsGP(arr, N): Function to check if the given array can be rearranged to form a geometric progression. :param arr: List of integers. :param N: Integer value representing the length of the array. :return: True if the rearranged array can form a geometric progression, otherwise False. if N < 2: return False arr.sort() if arr[0] == 0: return False common_ratio = arr[1] / arr[0] for i in range(1, N): if arr[i] / arr[i-1] != common_ratio: return False return True"},{"question":"Given a list of integers, find the sum of all even integers in the list. Input Format: First line contains single integer t, the number of test-cases. Each of next t lines contains space-separated integers. Output Format: Output t lines, each containing the sum of all even integers in the corresponding list. Constraints: 1 ≤ t ≤ 100 1 ≤ number of integers in each list ≤ 100 -1000 ≤ integer value ≤ 1000 SAMPLE INPUT 2 1 2 3 4 5 6 -10 -20 30 40 50 SAMPLE OUTPUT 12 90","solution":"def sum_of_even_integers(t, test_cases): Given a number of test cases and lists of integers, returns a list of sums of the even integers for each list. Parameters: t (int): The number of test cases. test_cases (list): A list of lists, where each sublist contains integers. Returns: List[int]: A list containing the sum of even integers for each test case. results = [] for case in test_cases: even_sum = sum(x for x in case if x % 2 == 0) results.append(even_sum) return results"},{"question":"Problem Statement Given an array of positive integers and a target sum, write a function to find all unique combinations in the array where the chosen numbers sum up to the target. Each number in the array may only be used once in the combination. The solution set must not contain duplicate combinations. You may assume that all numbers (including the target) are positive integers. # Input - An integer array `candidates` (1 ≤ length of candidates ≤ 30, 1 ≤ candidates[i] ≤ 200). - An integer `target` (1 ≤ target ≤ 500). # Output - A list of lists containing all unique combinations that sum up to the target, where each combination is sorted in non-descending order. # Example Example 1 Input: ``` candidates: [10, 1, 2, 7, 6, 1, 5] target: 8 ``` Output: ``` [ [1, 1, 6], [1, 2, 5], [1, 7], [2, 6] ] ``` Explanation: - The unique combinations that sum up to 8 are: [1, 1, 6], [1, 2, 5], [1, 7], [2, 6]. Example 2 Input: ``` candidates: [2, 5, 2, 1, 2] target: 5 ``` Output: ``` [ [1, 2, 2], [5] ] ``` Explanation: - The unique combinations that sum up to 5 are: [1, 2, 2], [5]. # Constraints - All input integers are positive. - The solution set must not contain duplicate combinations, and each combination should be returned in non-descending order. # Notes - You may leverage a backtracking approach to explore all possible combinations and use a set to filter out duplicates before returning the final list of combinations.","solution":"def combination_sum2(candidates, target): def backtrack(start, path, target): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(candidates)): if i > start and candidates[i] == candidates[i-1]: continue backtrack(i + 1, path + [candidates[i]], target - candidates[i]) candidates.sort() result = [] backtrack(0, [], target) return result"},{"question":"You are given an array of integers and your task is to determine if there exists a subarray (contiguous elements) whose sum is zero. A subarray can be empty and is represented by its starting and ending indices. You must write a function that accepts an array and returns true if there is a subarray whose sum is zero, otherwise return false. Input Function `hasZeroSumSubarray` takes a single input parameter: 1. arr: list of integers (1 ≤ |arr| ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9) Output Return a boolean result: `True` if there is a subarray whose sum is zero, otherwise `False`. Example Example 1: Input: arr = [1, 2, -3, 4, 5] Output: True Explanation: The sum of the subarray [2, -3, 1] is zero. Example 2: Input: arr = [1, 2, 4, 5, 6] Output: False Explanation: There is no subarray with sum zero. Example 3: Input: arr = [-3, 3, -2, 2] Output: True Explanation: The sum of the subarray [-3, 3] is zero as well as [-2, 2].","solution":"def hasZeroSumSubarray(arr): Returns True if there exists a subarray with a sum of zero in the array. sum_set = set() curr_sum = 0 for num in arr: curr_sum += num if curr_sum == 0 or curr_sum in sum_set: return True sum_set.add(curr_sum) return False"},{"question":"Given a list of integers, determine whether the list is sorted in non-decreasing order. Example 1: Input: arr = [1, 2, 2, 3, 4, 5] Output: True Explanation: The list is sorted in non-decreasing order. Example 2: Input: arr = [5, 4, 3, 2, 1] Output: False Explanation: The list is sorted in decreasing order, not in non-decreasing order. Example 3: Input: arr = [1, 3, 2] Output: False Explanation: The number 2 is less than 3, hence the list is not sorted in non-decreasing order. Your task: Your task is to complete the function isSorted() which takes a list of integers as input and returns a boolean indicating whether the list is sorted in non-decreasing order. You need not take any input or print anything. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(arr) <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"def isSorted(arr): Determines whether the list is sorted in non-decreasing order. Parameters: arr (list): List of integers. Returns: bool: True if the list is sorted in non-decreasing order, False otherwise. for i in range(1, len(arr)): if arr[i] < arr[i - 1]: return False return True"},{"question":"You are organizing a series of hackathons in multiple cities. Each city has a fixed number of hackers that can participate, and you need to manage the distribution of sponsors among these cities. Each sponsor can support multiple cities, but each city needs at least one sponsor to hold a hackathon. Additionally, each sponsor has a limit on the total number of hackers they can support across all cities they sponsor. Your task is to determine if you can arrange sponsorships in such a way that all cities can hold a hackathon without exceeding the sponsorship limits. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100): the number of cities and sponsors. The second line contains n integers: the ith integer indicates the number of hackers in the ith city. The next m lines describe each sponsor. Each line starts with an integer c (1 ≤ c ≤ n) - the number of cities the sponsor can support, followed by c pairs of integers. Each pair (ci, ni) represents the index of a supported city and the maximum number of hackers the sponsor can support in that city (1 ≤ ci ≤ n, 1 ≤ ni ≤ 100). Output Print \\"POSSIBLE\\" if it is feasible to arrange the sponsors such that every city has at least one sponsor and no sponsor\'s limit is exceeded. Otherwise, print \\"IMPOSSIBLE\\". Examples Input 3 2 10 20 30 2 1 15 2 20 1 3 40 Output POSSIBLE Input 3 2 10 20 30 1 1 25 2 2 15 3 40 Output IMPOSSIBLE","solution":"def hackathon_feasibility(n, m, hackers_per_city, sponsors): # Tracks if every city has at least one sponsor city_sponsorship = [0] * n for sponsor in sponsors: c = sponsor[0] sponsor_info = sponsor[1:] supported_cities = {sponsor_info[i * 2] - 1: sponsor_info[i * 2 + 1] for i in range(c)} for city in range(n): if hackers_per_city[city] <= supported_cities.get(city, 0): city_sponsorship[city] += 1 # Check if every city has at least one sponsor if all(sponsor_count > 0 for sponsor_count in city_sponsorship): return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\""},{"question":"In a 2D grid of size N times M, each cell contains a non-negative integer. You can perform the following operation any number of times: choose any row or column, and increment each cell in that row or column by 1. Determine the minimum number of operations required to make all the cells in the grid contain the same integer. -----Input----- - The first line of the input contains two integers N and M (the number of rows and columns respectively). - Each of the next N lines contains M space-separated integers representing the grid. -----Output----- Print a single integer ― the minimum number of operations required. -----Constraints----- - 1 le N, M le 50 - 0 le text{grid}[i][j] le 1000 for all valid i, j -----Subtasks----- Subtask #1 (50 points): - 1 le N, M le 10 - 0 le text{grid}[i][j] le 50 for all valid i, j Subtask #2 (50 points): original constraints -----Example Input----- 3 3 1 2 3 4 5 6 7 8 9 -----Example Output----- 12 -----Explanation----- Example case: The target integer can be 9. To make all cells equal to 9, we can perform the following operations: Increase each element in the first row by 8 operations, each element in the second row by 5 operations, and each element in the third row by 2 operations, resulting in a total of 8 + 5 + 2 + 8 + 5 + 2 + 8 + 5 + 2 = 45 operations.","solution":"def minimum_operations(grid): Returns the minimum number of operations required to make all cells in the grid have the same integer. max_value = max(max(row) for row in grid) operations = 0 for row in grid: for value in row: operations += (max_value - value) return operations"},{"question":"You are planning a trip and need to pack a number of items. Each item has a weight and a value, and you have a maximum weight capacity that you can carry. Your goal is to maximize the total value of the items you pack without exceeding the weight capacity. Write a program that determines the maximum total value of items that can be packed given their weights, values, and the maximum capacity. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case starts with a line containing two integers, N (number of items) and W (maximum weight capacity). - The next N lines each contain two integers, w (weight of the item) and v (value of the item). ------ Output Format ------ For each test case, output a single integer representing the maximum total value of items that can be packed. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 50 1 ≤ W, w, v ≤ 100 ----- Sample Input 1 ------ 2 3 50 10 60 20 100 30 120 2 30 10 50 20 70 ----- Sample Output 1 ------ 220 120 ----- Explanation 1 ------ Test case 1: The optimal way to pack the items is to take the second and third items which have a total weight of 20 + 30 = 50 and a total value of 100 + 120 = 220. Test case 2: The optimal way to pack the items is to take both items which have a total weight of 10 + 20 = 30 and a total value of 50 + 70 = 120.","solution":"def knapsack(max_weight, weights, values, n): # Create a 2D array to store the maximum value at each n-th item and at each capacity from 0 to W dp = [[0 for x in range(max_weight + 1)] for x in range(n + 1)] # Build table dp[][] in bottom-up manner for i in range(n + 1): for w in range(max_weight + 1): if i == 0 or w == 0: dp[i][w] = 0 elif weights[i-1] <= w: dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w]) else: dp[i][w] = dp[i-1][w] return dp[n][max_weight] def solve_knapsack_problem(test_cases): result = [] for case in test_cases: N, W, items = case weights = [item[0] for item in items] values = [item[1] for item in items] max_value = knapsack(W, weights, values, N) result.append(max_value) return result"},{"question":"You have been provided with a list of integers and your task is to find the longest subsequence which is also a palindrome. Given a sequence, a subsequence is derived by deleting some or none of the elements without changing the order of the remaining elements. A palindrome is a sequence that reads the same forwards and backwards. For example, \\"abcba\\" is a palindrome but \\"abca\\" is not. Write a function that, given a sequence of integers, returns the length of the longest palindromic subsequence. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) - the length of the sequence. - The second line contains `n` space-separated integers, where each integer is between 1 and 1000 inclusive. # Output - Output a single integer representing the length of the longest palindromic subsequence. # Examples Input: ``` 5 1 2 3 2 1 ``` Output: ``` 5 ``` Input: ``` 7 1 2 3 4 2 1 3 ``` Output: ``` 5 ``` Note: In the first example, the entire sequence is already a palindrome, so the output is 5. In the second example, the longest palindromic subsequence is \\"1 2 3 2 1\\", which has a length of 5. # Explanation To solve this problem, you can use dynamic programming. Define a 2D array `dp` where `dp[i][j]` represents the length of the longest palindromic subsequence in the subarray starting at index `i` and ending at index `j`. The main idea is to use previously calculated results to build up the solution for larger subarrays.","solution":"def longest_palindromic_subsequence(n, sequence): Returns the length of the longest palindromic subsequence in the given sequence. :param n: Length of the sequence :param sequence: List of integers representing the sequence :returns: Length of the longest palindromic subsequence # Create a 2D dp array initialized to 0 dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Fill the dp array for length in range(2, n + 1): # length is the length of the substring for i in range(n - length + 1): j = i + length - 1 if sequence[i] == sequence[j]: dp[i][j] = dp[i + 1][j - 1] + 2 if length > 2 else 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) # The result is in dp[0][n-1] return dp[0][n - 1]"},{"question":"Binary Search in a Rotated Sorted Array A sorted array of unique integers is rotated at some unknown pivot such that the array becomes `rotated_array`. For example, the array `[0, 1, 2, 4, 5, 6, 7]` might become `[4, 5, 6, 7, 0, 1, 2]` after rotation. Write a function to search for a target value in this rotated sorted array. If the target is found in the array, the function should return its index. Otherwise, return `-1`. The search should have logarithmic time complexity. There is an important observation regarding the array being rotated—that half of the array is still sorted, and the other half is rotated. # Function Signature ```python def search_rotated_array(nums: List[int], target: int) -> int: ``` # Input Format - `nums` (List[int]): The rotated sorted array of unique integers (0 ≤ `nums.length` ≤ 10^4). - `target` (int): The target integer to search for in the array. # Output Format Return the index of `target` in `nums` if it is present, otherwise return `-1`. # Example ```python # Example 1: nums = [4, 5, 6, 7, 0, 1, 2] target = 0 # Output: 4 # Example 2: nums = [4, 5, 6, 7, 0, 1, 2] target = 3 # Output: -1 # Example 3: nums = [1] target = 0 # Output: -1 ``` # Constraints: - The algorithm must run in O(log n) time complexity. - All integers in the array are unique. This question requires a good understanding of binary search and how to modify the algorithm to handle rotated arrays. Ensure to handle edge cases, such as when the array is not rotated at all or when it contains very few elements.","solution":"from typing import List def search_rotated_array(nums: List[int], target: int) -> int: if not nums: return -1 left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid # Determine which side is sorted if nums[left] <= nums[mid]: # Left side is sorted if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 else: # Right side is sorted if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"A company is organizing a series of team-building events for its employees. Each team-building event must be organized by a group of employees, and no employee should lead more than a certain number of events. Additionally, the same group of employees should not lead consecutive events. You are responsible for assigning employees to groups in such a way that these rules are satisfied or determining that it\'s not possible. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains three space-separated integers M, E, and P. - M denotes the number of events. - E denotes the number of employees. - P denotes the maximum number of events that each employee can lead. -----Output----- For each test case: - If there is no valid assignment of employees to events, print a single line containing the integer -1. - Otherwise, print a single line containing M space-separated integers. For each valid i, the i-th of these integers should be the number of the group assigned to the i-th event. Employees in the same group are marked with the same number, chosen from 1 to E. -----Constraints----- - 1 le T le 30 - 1 le M, E, P le 10,000 -----Example Input----- 2 5 3 2 6 4 1 -----Example Output----- 1 2 3 2 1 -1 -----Explanation----- Example case 1: The following is a valid assignment: - Group 1 leads the 1st and 5th events. - Group 2 leads the 2nd and 4th events. - Group 3 leads the 3rd event. Each group does not lead consecutive events and no group leads more than 2 events. Example case 2: There is no valid assignment in which each of 4 groups leads at most 1 event out of 6.","solution":"def assign_events(T, cases): results = [] for case in cases: M, E, P = case if M > E * P: results.append(\\"-1\\") else: assignment = [] for i in range(M): assignment.append((i % E) + 1) if M > E: valid = True for j in range(1, M): if assignment[j] == assignment[j - 1]: valid = False break if valid: results.append(\\" \\".join(map(str, assignment))) else: results.append(\\"-1\\") else: results.append(\\" \\".join(map(str, assignment))) return results"},{"question":"Write a function `getPossiblePaths` to count the number of distinct paths you can take to travel from the top-left corner to the bottom-right corner of a grid, given that you can only move either down or right at any point in time. Example 1: Input: m = 3, n = 3 Output: 6 Explanation: There are 6 ways to navigate through a 3x3 grid from (0, 0) to (2, 2): 1. Right -> Right -> Down -> Down 2. Right -> Down -> Right -> Down 3. Right -> Down -> Down -> Right 4. Down -> Right -> Right -> Down 5. Down -> Right -> Down -> Right 6. Down -> Down -> Right -> Right Example 2: Input: m = 2, n = 2 Output: 2 Explanation: There are 2 ways to navigate through a 2x2 grid from (0, 0) to (1, 1): 1. Right -> Down 2. Down -> Right Constraints: 1 <= m, n <= 20","solution":"def getPossiblePaths(m, n): Returns the number of distinct paths you can take to travel from the top-left corner to the bottom-right corner of a grid, given that you can only move either down or right at any point in time. :param m: number of rows :param n: number of columns :return: number of distinct paths dp = [[0] * n for _ in range(m)] for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Dreamoon loves sequences and shifting operations. Let’s define a right circular shift operation on a sequence a as follows: moving the last element to the beginning of the sequence while shifting all other elements one position to the right. For example, applying a right circular shift to the sequence a = [1, 2, 3, 4] results in the sequence a = [4, 1, 2, 3]. A sequence a of length n is considered good if and only if one can make all elements of a equal to each other through a series of right circular shift operations followed by, possibly, reversing the sequence and performing right circular shifts again. Given q sequences, determine if each sequence is good or not. -----Input----- The first line contains an integer q (1 ≤ q ≤ 100), representing the number of sequences. The following lines contain the descriptions of the sequences. Each sequence begins with an integer n (1 ≤ n ≤ 100 000), the length of the sequence, followed by n space-separated integers representing the sequence elements a_{i} (1 ≤ a_{i} ≤ 10^9). -----Output----- For each sequence, output \\"YES\\" if the sequence is good. Otherwise, output \\"NO\\". -----Examples----- Input 3 4 1 2 3 4 3 1 1 1 5 2 4 4 2 2 Output NO YES YES -----Note----- In the first example, it\'s impossible to make all elements equal through right circular shifts and reversing operations. In the second example, all elements are already the same, so it is good. In the third example, with reversing the sequence to [2, 2, 4, 4, 2] and performing circular shifts, it\'s possible to make all elements equal to 2.","solution":"def is_good_sequence(sequence): Determines if the sequence can be made such that all elements are equal through a series of right circular shifts followed by reversing the sequence and performing right circular shifts again. unique_elements = set(sequence) return len(unique_elements) == 1 or len(unique_elements) == 2 def check_sequences(sequences): Determine if each sequence in the list of sequences is good. results = [] for seq in sequences: if is_good_sequence(seq): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example function to process input and output def process_input(input_data): lines = input_data.strip().split(\'n\') q = int(lines[0]) sequences = [] for i in range(1, q + 1): seq_data = list(map(int, lines[i].split())) n = seq_data[0] sequence = seq_data[1:] sequences.append(sequence) return check_sequences(sequences)"},{"question":"Write a function to determine if a given string is a valid palindrome. For the purpose of this problem, we define a palindrome as a string that reads the same backward as forward after removing all non-alphanumeric characters and converting all letters to lower case. Examples: Given \\"A man, a plan, a canal: Panama\\", return true. Given \\"race a car\\", return false. Given \\" \\", return true.","solution":"import re def is_palindrome(s): Determines if a given string is a valid palindrome. # Use regular expression to remove non-alphanumeric characters filtered_chars = re.findall(r\'w\', s) # Join the filtered characters and convert to lower case filtered_string = \'\'.join(filtered_chars).lower() # Check if the filtered string reads the same backward return filtered_string == filtered_string[::-1]"},{"question":"Find the sum of all prime numbers up to N. Example 1: Input: N = 10 Output: 17 Explanation: The prime numbers less than or equal to 10 are 2, 3, 5, and 7, and their sum is 17. Example 2: Input: N = 20 Output: 77 Explanation: The prime numbers less than or equal to 20 are 2, 3, 5, 7, 11, 13, 17, and 19, and their sum is 77. Your Task: This is a function problem. You only need to complete the function sumOfPrimes() that takes N as a parameter and returns the sum of all prime numbers up to N. Expected Time Complexity: O(N*sqrt(N)). Expected Auxiliary Space: O(N). Constraints: 1 <= N <= 1000","solution":"def sumOfPrimes(N): Returns the sum of all prime numbers up to and including N. if N < 2: return 0 primes = [True] * (N + 1) primes[0], primes[1] = False, False for p in range(2, int(N**0.5) + 1): if primes[p]: for multiple in range(p*p, N + 1, p): primes[multiple] = False return sum(i for i, is_prime in enumerate(primes) if is_prime)"},{"question":"Vicky has a string `s` consisting of lowercase English letters. She wants to transform `s` into a beautiful string. A beautiful string is defined as a string that consists only of the character `a` and has a length equal to the original string `s`. To achieve this, Vicky can perform the following operations any number of times (including zero): - Choose any single character from `s` and replace it with the character `a`. Help Vicky determine the minimum number of operations required to transform `s` into a beautiful string. -----Input----- The first line contains a single integer `q` (1 le q le 100) — the number of test cases. The first line of each test case contains a single integer `n` (1 le n le 100) — the length of the string `s`. The second line of each test case contains a string `s` of length `n` consisting of lowercase English letters. -----Output----- For each test case, print a single integer — the minimum number of operations needed to transform the string `s` into a beautiful string. -----Examples----- Input 3 5 abcde 3 aaa 4 xyza Output 4 0 3 -----Note----- In the first test case, we need to replace `b`, `c`, `d`, and `e` with `a`. Hence, we perform 4 operations. In the second test case, the string is already beautiful, so no operations are needed. In the third test case, we need to replace `x`, `y`, and `z` with `a`. Thus, 3 operations are needed.","solution":"def min_operations(q, test_cases): Returns a list of integers where each integer represents the minimum number of operations needed to transform the string s into a beautiful string for each test case. Parameters: q (int): Number of test cases test_cases (list): A list of tuples, each containing an integer n and a string s Returns: list: A list of integers representing the required minimum number of operations for each test case results = [] for n, s in test_cases: operations = sum(1 for ch in s if ch != \'a\') results.append(operations) return results"},{"question":"Given an array of integers, determine the sum of all even numbers in the array. Example 1: Input: arr = [1, 2, 3, 4, 5] Output: 6 Explanation: The even numbers in the array are 2 and 4. Their sum is 6. Example 2: Input: arr = [10, 21, 32, 43, 54] Output: 96 Explanation: The even numbers in the array are 10, 32, and 54. Their sum is 96. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfEvens() which takes an array of integers and return the sum of all even numbers in the array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= arr.length <= 1000 -10000 <= arr[i] <= 10000","solution":"def sumOfEvens(arr): Returns the sum of all even numbers in the array. Parameters: arr (list): List of integers Returns: int: Sum of all even numbers in the list return sum(num for num in arr if num % 2 == 0)"},{"question":"Pendown decided that he wanted to explore large datasets, so he started with sequences. He came up with an interesting observation regarding unique subsequences. Given a sequence, Pendown wants to find out how many unique subsequences can be created from that sequence. A subsequence of a sequence can be generated by deleting zero or more elements from the sequence without changing the order of the remaining elements. Input: - The first line of input contains an integer T denoting the number of test cases. - For each test case, the first line contains an integer N. - The next line contains N space-separated integers A_{1}, A_{2}, dots, A_{N}. Output: - For each test case, print a single integer — the number of unique subsequences mod 1000000007 (10^9 + 7). Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^3 - 1 ≤ A_i ≤ 10^9 for each valid i Sample Input: ``` 2 3 1 2 3 4 1 2 2 3 ``` Sample Output: ``` 8 12 ``` Explanation: - For the first test case, the unique subsequences from [1, 2, 3] are: [], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3], which are 8 in total. - For the second test case, the unique subsequences from [1, 2, 2, 3] are: [], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,2], [2,2], [1,2,3], [2,2,3], [1,2,2,3], which are 12 in total.","solution":"def unique_subsequences_count(T, test_cases): MOD = 1000000007 results = [] for case in test_cases: N = case[0] sequence = case[1] subsequences_set = set() subsequences_set.add(()) for num in sequence: new_subsequences = [] for subseq in subsequences_set: new_subsequences.append(subseq + (num,)) for subseq in new_subsequences: subsequences_set.add(subseq) results.append(len(subsequences_set) % MOD) return results # Sample usage T = 2 test_cases = [ (3, [1, 2, 3]), (4, [1, 2, 2, 3]) ] print(unique_subsequences_count(T, test_cases)) # Output: [8, 12]"},{"question":"Write a function that takes a string containing a mix of uppercase letters, lowercase letters, and digits, and returns a dictionary with counts of each category: uppercase letters, lowercase letters, and digits. If the string contains any other type of character, return False. **Note:** An empty string should return a dictionary with zero counts for each category. ```python count_categories(\\"Hello123\\") == {\'uppercase\': 1, \'lowercase\': 4, \'digits\': 3} count_categories(\\"He!!o123\\") == False ```","solution":"def count_categories(s): Returns a dictionary with counts of uppercase letters, lowercase letters, and digits in the string. If the string contains any other type of character, returns False. counts = {\'uppercase\': 0, \'lowercase\': 0, \'digits\': 0} for char in s: if char.isupper(): counts[\'uppercase\'] += 1 elif char.islower(): counts[\'lowercase\'] += 1 elif char.isdigit(): counts[\'digits\'] += 1 else: return False return counts"},{"question":"In a town called Gridville, there is an n × n grid where each cell is either accessible or blocked. The local delivery service needs to deliver packages from the top-left corner of the grid to the bottom-right corner. They can only move right or down at each step. They want to know the minimum number of moves required to deliver the package or determine if it\'s impossible. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000), the size of the grid. - The next n lines each contain n characters, describing the grid. Each character is either \'.\' (accessible) or \'#\' (blocked). Output: - Print a single integer, the minimum number of moves required to get from the top-left corner (1,1) to the bottom-right corner (n,n). - If it is impossible to deliver the package, print -1. Examples: Input 1: 3 ..# .#. ... Output 1: 4 Input 2: 4 .... .. .#.. .. Output 2: 6 Input 3: 2 .# #. Output 3: -1 Note: - In the first example, starting from (1, 1), one possible path could be: (1, 1) -> (1, 2) -> (2, 2) -> (2, 3) -> (3, 3), which takes 4 moves. - In the second example, a path might be: (1, 1) -> (1, 2) -> (1, 3) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4), taking 6 moves. - In the third example, there\'s no path from the top-left to the bottom-right, so the output is -1.","solution":"from collections import deque def min_moves(n, grid): Returns the minimum number of moves required to go from the top-left corner (1,1) to the bottom-right corner (n,n) of the grid. If it is impossible, returns -1. directions = [(1, 0), (0, 1)] # Possible directions: down, right visited = [[False] * n for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, distance) if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return -1 while queue: row, col, dist = queue.popleft() if row == n-1 and col == n-1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < n and not visited[new_row][new_col] and grid[new_row][new_col] == \'.\': visited[new_row][new_col] = True queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"Problem B: Matrix Rotation Consider a 2D matrix where each element is a non-negative integer. Your task is to rotate the matrix 90 degrees clockwise without using any additional matrix storage. The rotation should be done in-place, altering the original matrix. For example, if the initial matrix is: ``` 1 2 3 4 5 6 7 8 9 ``` After rotating 90 degrees clockwise, it should become: ``` 7 4 1 8 5 2 9 6 3 ``` You need to create a program that reads multiple datasets and outputs the rotated matrices. Each dataset represents a square matrix and follows the given format: Input: - The first line consists of an integer n (0 < n ≤ 100), which indicates the size of the matrix. - The next n lines each contain n integers representing the matrix elements. The input ends with a single line containing the integer -1. Output: For each dataset, print the rotated matrix. Each row of the matrix should be printed on a new line, with elements separated by spaces. Print a blank line after each rotated matrix except the last one. Sample Input: ``` 3 1 2 3 4 5 6 7 8 9 2 1 2 3 4 -1 ``` Sample Output: ``` 7 4 1 8 5 2 9 6 3 3 1 4 2 ``` Explanation: 1. For the first dataset (3x3 matrix), after rotating 90 degrees clockwise, the matrix becomes: ``` 7 4 1 8 5 2 9 6 3 ``` 2. For the second dataset (2x2 matrix), after rotating 90 degrees clockwise, the matrix becomes: ``` 3 1 4 2 ``` Your task is to implement this matrix rotation for multiple datasets as described.","solution":"def rotate_matrix(matrix): Rotates a square matrix 90 degrees clockwise in place. :param matrix: List of lists where each sublist represents a row of the matrix n = len(matrix) for i in range(n // 2): for j in range(i, n - i - 1): temp = matrix[i][j] matrix[i][j] = matrix[n - 1 - j][i] matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j] matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i] matrix[j][n - 1 - i] = temp def process_matrices(input_string): Processes the input string containing multiple datasets of matrices and returns the rotated matrices. :param input_string: Input string following the described format :return: List of matrices rotated 90 degrees clockwise lines = input_string.strip().split(\\"n\\") i = 0 results = [] while i < len(lines): n = int(lines[i]) if n == -1: break matrix = [] for j in range(1, n + 1): matrix.append(list(map(int, lines[i + j].strip().split()))) rotate_matrix(matrix) results.append(matrix) i += n + 1 return results"},{"question":"Write a function `reverseWords` that takes a string as an argument and returns the string with the words reversed but their original order maintained. Example: If the input string is \\"Hello World from OpenAI\\", the function should return \\"olleH dlroW morf IAnepO\\".","solution":"def reverseWords(input_string): Reverses each word in the input string while maintaining their original order. Args: input_string (str): The string containing words to be reversed. Returns: str: The string with each word reversed but in the original order. return \' \'.join(word[::-1] for word in input_string.split())"},{"question":"You are a security consultant and your task is to improve a company\'s account password policies. The company\'s initial requirements for valid passwords are that each password must contain at least one lowercase letter, one uppercase letter, and one digit. However, you want to ensure the passwords are also difficult to crack by applying additional constraints. The company\'s policy requires passwords to be of length between l_a and l_b (inclusive). To achieve the new policy, you decide that a password is considered strong if: 1. It contains at least one lowercase letter. 2. It contains at least one uppercase letter. 3. It contains at least one digit. 4. It contains at least one special character from the set `!@#%^&*()-+`. 5. Its total length must be between l_a and l_b (inclusive). You are given multiple passwords and you need to verify if each one meets the company\'s criteria for strong passwords according to the new policy. -----Input----- The first line contains two integers l_a and l_b (1 leq l_a leq l_b leq 100) — the minimum and maximum lengths of the password. The second line contains a single integer m (1 leq m leq 10^6) — the number of passwords to check. The following m lines contain one string each, representing the passwords to be checked. -----Output----- Print m lines, each containing \\"Yes\\" if the password meets the criteria for a strong password, otherwise print \\"No\\". -----Examples----- Input 6 12 3 Abc123! Password123 WeakP@ss Output Yes No No -----Note----- In the first sample case: - The password \\"Abc123!\\" meets all the criteria: it contains lowercase and uppercase letters, a digit, a special character, and its length is within the specified range, so the output is \\"Yes\\". - The password \\"Password123\\" does not contain any special characters, so the output is \\"No\\". - The password \\"WeakP@ss\\" does not contain any digits, so the output is \\"No\\".","solution":"import re def check_strong_password(l_a, l_b, passwords): This function checks if a list of passwords are strong according to the given policy. Parameters: l_a (int): Minimum length of the password l_b (int): Maximum length of the password passwords (list): List of passwords to be checked Returns: list: List of \\"Yes\\" or \\"No\\" indicating whether the passwords are strong or not results = [] special_chars = \\"!@#%^&*()-+\\" for password in passwords: if not (l_a <= len(password) <= l_b): results.append(\\"No\\") continue if not re.search(r\'[a-z]\', password): results.append(\\"No\\") continue if not re.search(r\'[A-Z]\', password): results.append(\\"No\\") continue if not re.search(r\'d\', password): results.append(\\"No\\") continue if not any(char in special_chars for char in password): results.append(\\"No\\") continue results.append(\\"Yes\\") return results"},{"question":"You are given an array of integers. Your task is to determine the median after each insertion of an element into the array. The median of a list of numbers is the value separating the higher half from the lower half. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements. For example, when given an array [2, 3, 4]: - After inserting 2, the array is [2], and the median is 2. - After inserting 3, the array is [2, 3], and the median is (2 + 3) / 2 = 2.5. - After inserting 4, the array is [2, 3, 4], and the median is 3. You need to implement the runningMedian function. This function will receive an array of integers and will return an array of floats, where each element i in the returned array is the median after adding the i-th element from the input array. Function Description Complete the runningMedian function below. runningMedian has the following parameters: - int arr[n]: an array of integers. Returns - float[]: an array of floats where each element is the median after adding an element from the input array. Input Format The first line contains an integer n, the size of the input array. The second line contains n space-separated integers, the elements of the array. Constraints 1 leq n leq 10^5 -10^5 leq arr[i] leq 10^5 Sample Input 0 6 12 4 5 3 8 7 Sample Output 0 12.0 8.0 5.0 4.5 5.0 6.0 Explanation 0 The array after each insertion and the resulting median is: - [12] -> 12.0 - [12, 4] -> (12+4)/2 -> 8.0 - [12, 4, 5] -> 5.0 - [12, 4, 5, 3] -> (4+5)/2 -> 4.5 - [12, 4, 5, 3, 8] -> 5.0 - [12, 4, 5, 3, 8, 7] -> (5+7)/2 -> 6.0 The returned array should be: [12.0, 8.0, 5.0, 4.5, 5.0, 6.0] Subtasks For 100% of the maximum score: 1 leq n leq 10^4 -10^5 leq arr[i] leq 10^5","solution":"import heapq def runningMedian(arr): min_heap = [] # Min heap for the right half max_heap = [] # Max heap for the left half (we will use negative values for max heap) medians = [] for number in arr: if not max_heap or number < -max_heap[0]: heapq.heappush(max_heap, -number) else: heapq.heappush(min_heap, number) # Balancing the heaps if len(max_heap) > len(min_heap) + 1: heapq.heappush(min_heap, -heapq.heappop(max_heap)) elif len(min_heap) > len(max_heap): heapq.heappush(max_heap, -heapq.heappop(min_heap)) # Calculate the median if len(max_heap) == len(min_heap): median = (-max_heap[0] + min_heap[0]) / 2.0 else: median = float(-max_heap[0]) medians.append(median) return medians"},{"question":"You are given an array of integers and an integer target. Your task is to determine if there exists two distinct indices i and j in the array such that the sum of the elements at these indices equals the target. Return the indices in a tuple (i, j) with i < j. If there are multiple answers, return any of them. If no such indices exist, return an empty tuple. Example 1: Input: arr = [2, 7, 11, 15] target = 9 Output: (0, 1) Explanation: The sum of elements at indices 0 and 1 (2 + 7) equals target 9. Example 2: Input: arr = [1, 2, 3, 4, 5] target = 10 Output: () Explanation: There are no two distinct indices whose elements sum to 10. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findIndices()` which takes an integer array arr and an integer target as input parameters and returns a tuple containing the indices (i, j) in any order where i < j, or an empty tuple if no such indices exist. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(arr) ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9 Function signature: ```python def findIndices(arr: List[int], target: int) -> Tuple[int, int]: ```","solution":"from typing import List, Tuple def findIndices(arr: List[int], target: int) -> Tuple[int, int]: Given an array of integers and an integer target, determine if there exists two distinct indices i and j such that the sum of the elements at these indices equals the target. Return the indices in a tuple (i, j) with i < j. If no such indices exist, return an empty tuple. seen = {} for i, num in enumerate(arr): complement = target - num if complement in seen: return (seen[complement], i) seen[num] = i return ()"},{"question":"You are given a binary tree consisting of `N` nodes, each node having a positive integer value. The root of the tree is at the first node (node 1). For any path from the root to a leaf, calculate the product of the values of the nodes along the path. The depth of a node is the number of edges from the node to the root. Given the depth `D`, determine the sum of the products of all paths from the root to all leaves with depth less than or equal to `D`. -----Input----- - The first line of the input contains two integers, `N` and `D`, denoting the number of nodes in the tree and the depth limit respectively. - The second line contains `N` space-separated integers representing the values of the nodes in the tree in level-order traversal format. - Each of the subsequent `N-1` lines contains two integers `u` and `v` denoting an edge between nodes `u` and `v`. -----Output----- Print a single integer, the sum of the products of all root-to-leaf paths with depth less than or equal to `D`. -----Constraints----- - `1 le N le 10^4` - `1 le value_i le 100` - `1 le u, v le N` - there are no cycles in the tree - the edges form a connected tree -----Example Input----- 5 3 1 2 3 4 5 1 2 1 3 2 4 3 5 -----Example Output----- 63 -----Explanation----- Example case: - Paths from the root to the leaves are: - 1 -> 2 -> 4 (product = 1 * 2 * 4 = 8, depth = 3) - 1 -> 3 -> 5 (product = 1 * 3 * 5 = 15, depth = 3) - Since depth D is 3, both paths are considered. - Sum of products = 8 + 15 = 23","solution":"def sum_of_path_products(N, D, values, edges): from collections import defaultdict, deque # Initialize tree from edges tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # BFS to find all paths from root to leaves within depth D def bfs(): queue = deque([(1, values[0], 0)]) visited = set() path_product_sum = 0 while queue: current, prod, depth = queue.popleft() if depth > D: continue visited.add(current) is_leaf = True for neighbor in tree[current]: if neighbor not in visited: is_leaf = False queue.append((neighbor, prod * values[neighbor - 1], depth + 1)) if is_leaf and depth <= D: path_product_sum += prod return path_product_sum return bfs() N, D = 5, 3 values = [1, 2, 3, 4, 5] edges = [(1, 2), (1, 3), (2, 4), (3, 5)] print(sum_of_path_products(N, D, values, edges)) # Output: 23"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB A company stores its employees\' details in a database where each employee record contains an `ID`, `Name`, and `Salary`. The company needs to implement a system to identify the highest-paid employee in the database. You are required to write a function that takes a list of employee records and returns the `Name` of the highest-paid employee. If there are multiple employees with the highest salary, return the name that comes first alphabetically. Input A list of tuples representing employee data. Each tuple contains: - `ID` (a unique integer identifier) - `Name` (a string containing the name of the employee) - `Salary` (a float representing the employee\'s salary) Example Input ``` [ (1, \\"John Doe\\", 60000.0), (2, \\"Jane Smith\\", 75000.0), (3, \\"Emily Davis\\", 75000.0), (4, \\"James Wilson\\", 90000.0) ] ``` Output A string representing the name of the highest-paid employee. Example Output ``` \\"James Wilson\\" ``` Constraints - The input list will contain at least one employee record. - `ID`s are unique. - `Name`s follow standard naming conventions (capitalized first and last names). - `Salary` values are positive floats. Write a function `highest_paid_employee(employees: List[Tuple[int, str, float]]) -> str` to solve the problem.","solution":"from typing import List, Tuple def highest_paid_employee(employees: List[Tuple[int, str, float]]) -> str: Returns the name of the highest-paid employee. If there are multiple employees with the highest salary, returns the name that comes first alphabetically. # Sort employees first by Salary in descending order, and then by Name in ascending order sorted_employees = sorted(employees, key=lambda x: (-x[2], x[1])) # Return the Name of the first employee in the sorted list return sorted_employees[0][1]"},{"question":"You are given an integer array nums and an integer k. Your task is to determine whether any consecutive subarray of length k in nums contains all the distinct integers from the range [1, k]. -----Constraints----- - The length of nums is between 1 and 1000 (inclusive). - Each element in nums is an integer between 1 and k (inclusive). - k is between 1 and 1000 (inclusive). -----Input----- Input is given from Standard Input in the following format: n k nums Where n is the length of nums. -----Output----- If there exists a consecutive subarray of length k in nums that contains all integers from 1 to k, print Yes; otherwise, print No. -----Sample Input----- 7 4 1 2 3 4 3 2 1 -----Sample Output----- Yes We can see that the subarray [1, 2, 3, 4] contains all integers from 1 to 4. -----Sample Input----- 5 3 1 1 2 2 3 -----Sample Output----- No There is no subarray of length 3 that contains 1, 2, and 3.","solution":"def contains_all_distinct_subarray(nums, k): Determines whether any consecutive subarray of length k in nums contains all distinct integers from the range [1, k]. required_set = set(range(1, k + 1)) for i in range(len(nums) - k + 1): if set(nums[i:i + k]) == required_set: return \\"Yes\\" return \\"No\\""},{"question":"Given a binary tree, you need to perform three types of queries: 1. Add a node: Add a node with a specified value to the specified parent node (if it doesn\'t already exist). Nodes can have a maximum of two children. 2. Print subtree: Print all values of the nodes in the subtree formed by a specified node in pre-order traversal. 3. Calculate depth: Calculate the maximum depth of the subtree formed by a specified node. Input Format - The first line contains an integer T – the number of queries. - The following T lines describe each query in one of the following formats: - \\"A (boldsymbol{P} boldsymbol{V})\\": Add a node with value (V) as a child of the node with value (P). If node (P) already has two children, do nothing. - \\"P (boldsymbol{V})\\": Print all values of the nodes in the subtree formed by the node with value (V), in pre-order traversal as a space-separated line. - \\"D (boldsymbol{V})\\": Calculate the maximum depth of the subtree formed by the node with value (V) and print it. Constraints - 1 leq T leq 100000 - All node values are positive integers up to 10^5 - The binary tree initially starts with a single root node, with value 1. - For \\"A P V\\" queries, value P will always refer to an existing node. Output Format For each query of type \\"P\\" or \\"D\\", output the result on a separate line. Sample Input 6 A 1 2 A 1 3 A 2 4 A 2 5 P 2 D 1 Sample Output 2 4 5 3 Explanation Initial Tree: ``` 1 / 2 3 / 4 5 ``` 1. Add node 2 as a child of 1. 2. Tree: 1 has children 2 3. Add node 3 as another child of 1. 4. Tree: 1 has children 2, 3 5. Add node 4 as a child of 2. 6. Tree: 1 has children 2, 3; 2 has a child 4 7. Add node 5 as another child of 2. 8. Tree: 1 has children 2, 3; 2 has children 4, 5 9. Print subtree rooted at node 2: Pre-order traversal of nodes 2, 4, 5 10. Calculate depth of subtree rooted at node 1: The deepest path is 1 -> 2 -> 4, so depth is 3","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None class BinaryTree: def __init__(self): self.nodes = {1: TreeNode(1)} def add_node(self, parent_value, value): if value in self.nodes: return parent_node = self.nodes.get(parent_value) if parent_node: if parent_node.left is None: parent_node.left = TreeNode(value) self.nodes[value] = parent_node.left elif parent_node.right is None: parent_node.right = TreeNode(value) self.nodes[value] = parent_node.right def pre_order_traversal(self, node_value): result = [] node = self.nodes.get(node_value) self._pre_order_helper(node, result) return result def _pre_order_helper(self, node, result): if node: result.append(node.value) self._pre_order_helper(node.left, result) self._pre_order_helper(node.right, result) def calculate_depth(self, node_value): node = self.nodes.get(node_value) return self._depth_helper(node) def _depth_helper(self, node): if not node: return 0 left_depth = self._depth_helper(node.left) right_depth = self._depth_helper(node.right) return max(left_depth, right_depth) + 1 def handle_queries(queries): bt = BinaryTree() results = [] for query in queries: parts = query.split() if parts[0] == \'A\': _, parent_value, node_value = parts bt.add_node(int(parent_value), int(node_value)) elif parts[0] == \'P\': _, node_value = parts traversal_result = bt.pre_order_traversal(int(node_value)) results.append(\\" \\".join(map(str, traversal_result))) elif parts[0] == \'D\': _, node_value = parts depth_result = bt.calculate_depth(int(node_value)) results.append(str(depth_result)) return results"},{"question":"Given a grid of \'*\' and \'.\' characters, your task is to determine the maximum area of rectangles consisting solely of \'.\' characters in the grid. A rectangle of size r x c is defined as r consecutive rows and c consecutive columns. For example, consider the following grid: ``` 6 0 1 2 3 4 5 0 * * * * * * 1 * . . . * * 2 * . * * * * 3 * . * * * * 4 . . * * * * ``` The largest rectangle consisting of \'.\' characters is the one formed by rows 1-3 and columns 1-3, having an area of 3. Input: The input consists of multiple lines. The first line contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns of the grid respectively. Each of the next n lines contains a string of length m, representing a row of the grid where each character is either \'.\' or \'*\'. Output: Print a single integer representing the maximum area of rectangles consisting solely of \'.\' characters in the grid. Example: ``` Input: 5 6 ****** *...** *.*.** *.*.** **.*** Output: 3 Explanation: In the above example, the largest rectangle consisting of \'.\' characters has an area of 3 (formed by rows 1-3 and columns 1-3). ``` Note: - The precise maximum rectangle area should be printed. - You can assume that the input grid contains at least one \'.\' character. - The input ends with EOF.","solution":"def maximalRectangle(matrix): if not matrix: return 0 n = len(matrix) m = len(matrix[0]) heights = [0] * m max_area = 0 for i in range(n): for j in range(m): if matrix[i][j] == \'.\': heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n, m = int(data[0]), int(data[1]) grid = [] idx = 2 for i in range(n): grid.append(data[idx]) idx += 1 print(maximalRectangle(grid))"},{"question":"Aisha is working on a new project involving sequences and needs your help to finish it. She has an initial sequence of positive integers. Each operation involves selecting any two adjacent integers and removing the larger one. This operation is repeated until only one integer remains in the sequence. Aisha wants to determine the smallest possible integer that can remain after a certain number of operations. Here\'s the twist: she can freely choose which adjacent pair to eliminate in each operation. Write a function to help Aisha find the smallest possible integer that can remain in the sequence after completing the operations. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the length of the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the initial sequence. Output Print a single integer — the smallest possible integer that can remain after completing the series of operations. Examples Input 5 3 4 2 5 1 Output 1 Input 4 8 6 7 4 Output 4 Input 3 1 9 3 Output 1","solution":"def smallest_remaining_element(n, sequence): Returns the smallest possible integer that can remain in the sequence. :param n: Length of the sequence :param sequence: List of integers :return: Smallest integer in the sequence return min(sequence)"},{"question":"You are given an integer array `nums` and an integer `target`. You are tasked with finding **all unique combinations** in `nums` such that the numbers add up to `target`. Each number in `nums` may only be used once in the combination, and the solution set must not contain duplicate combinations. Note: - All numbers (including `target`) will be positive integers. - The array may contain duplicate numbers, but each number can be used at most once for each combination. - The combinations should be returned in lexicographical order. Implement a function: ```python def combinationSum2(nums: List[int], target: int) -> List[List[int]]: ``` # Input - An integer array `nums` of length `n` (1 <= n <= 100), where 1 <= `nums[i]` <= 50. - An integer `target` (1 <= `target` <= 500). # Output - A list of lists, containing all unique combinations that sum up to `target`. # Examples **Input:** ```python nums = [10, 1, 2, 7, 6, 1, 5] target = 8 ``` **Output:** ```python [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]] ``` **Input:** ```python nums = [2, 5, 2, 1, 2] target = 5 ``` **Output:** ```python [[1, 2, 2], [5]] ```","solution":"from typing import List def combinationSum2(nums: List[int], target: int) -> List[List[int]]: def backtrack(start, end, target, path): if target == 0: results.append(path) return for i in range(start, end): if i > start and nums[i] == nums[i - 1]: continue if nums[i] > target: break backtrack(i + 1, end, target - nums[i], path + [nums[i]]) # Sort the array to handle duplicates and to improve efficiency nums.sort() results = [] backtrack(0, len(nums), target, []) return results"},{"question":"You are given a grid with R rows and C columns, where each cell contains either a \'0\' or a \'1\'. You want to determine the size of the largest square sub-grid that contains only \'1\'s. Input The first line contains two integers R and C (1 ≤ R, C ≤ 100) — the number of rows and columns in the grid. Each of the next R lines contains C characters (\'0\' or \'1\') representing the grid. Output Print the side length of the largest square sub-grid that contains only \'1\'s. Examples Input 5 5 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 1 Output 3 Input 3 4 0 0 0 0 0 0 0 0 0 0 0 0 Output 0 Input 6 6 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 Output 3 Note Explanation of the first sample: The largest square sub-grid of \'1\'s is of size 3x3, located from (2,3) to (4,5) or other equivalent positions. Explanation of the second sample: There is no square sub-grid solely consisting of \'1\'s. Explanation of the third sample: The largest square sub-grid of \'1\'s is of size 3x3, located from (1,3) to (3,5) or other equivalent positions.","solution":"def largest_square_subgrid(grid): if not grid: return 0 R = len(grid) C = len(grid[0]) dp = [[0]*C for _ in range(R)] max_side = 0 for i in range(R): for j in range(C): if grid[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"The Question You are the organizer of a car race competition held in a stadium. The stadium has a straightforward layout: it consists of n horizontal lanes, each having the same width but differing lengths. The cars will start at the west end of the lanes and race towards the east. Some lanes may have obstacles which the cars must avoid. Each obstacle blocks a specific range of the lane, making that part impassable. Cars must navigate around these obstacles. Given the list of obstacles for each lane, your task is to determine the minimum distance a car must travel in lane k to reach the eastern end of the lane, avoiding all obstacles. The car can only switch lanes at the start of the race. Input The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10^5) – the number of lanes and the number of obstacles, respectively. The second line contains an integer k (1 ≤ k ≤ n) – the lane number we are specifically interested in. The next n lines each contain an integer l_i (0 ≤ l_i ≤ 10^9) – the length of lane i. Then, m lines follow. Each of these contains three space-separated integers x, y, z (1 ≤ x ≤ n, 0 ≤ y < z ≤ l_x) indicating an obstacle in lane x which blocks the segment from y to z. Output Print a single integer which is the minimum distance a car needs to travel in lane k to reach its end, avoiding all obstacles. If the car cannot reach the end of the lane, print -1. Example Input: 3 5 2 100 200 150 1 10 30 2 50 70 3 75 120 2 60 80 1 20 40 Output: 100 Explanation In the given example: - There are 3 lanes. Their lengths are 100, 200, and 150 respectively. - Lane 1 has obstacles between 10-30 and 20-40. - Lane 2 has obstacles between 50-70 and 60-80. - Lane 3 has an obstacle between 75-120. We are interested in the second lane, which reaches its end at 200. The car can navigate around the obstacles in lane 2 with no extra distance by passing either before 50 or after 80. Hence, the minimum distance traveled remains 200. Note - If there are segments with overlapping or adjacent obstacles, they should be merged into a single extended obstacle. - Each lane operates independently of the others. Cars cannot switch lanes after starting.","solution":"def min_distance(n, m, k, lane_lengths, obstacles): # Process obstacles to merge overlapping or adjacent ones lanes = [[] for _ in range(n)] for x, y, z in obstacles: lanes[x - 1].append((y, z)) def merge_intervals(intervals): intervals.sort() merged = [] for interval in intervals: if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: merged[-1] = (merged[-1][0], max(merged[-1][1], interval[1])) return merged lanes = [merge_intervals(lane) for lane in lanes] # Calculate required distance in lane k lane_k_obstacles = lanes[k - 1] if not lane_k_obstacles: return lane_lengths[k - 1] curr_position = 0 for start, end in lane_k_obstacles: if curr_position < start: curr_position = start curr_position = end if curr_position >= lane_lengths[k - 1]: return -1 else: return lane_lengths[k - 1]"},{"question":"You are given an integer n and a series of operations to perform on an initially empty array. The operations can be of three types: 1. \\"1 x\\" - Add integer x to the end of the array. 2. \\"2\\" - Remove the last element of the array (only if the array is not empty). 3. \\"3\\" - Print the maximum value in the array (only if the array is not empty). Your task is to perform the given operations and print the results for the \\"3\\" operations. Input The first line contains a single integer q (1 ≤ q ≤ 2 ⋅ 10^5) — the number of operations. The following q lines contain one of the three types of operations described above: - \\"1 x\\" (−10^9 ≤ x ≤ 10^9) - \\"2\\" - \\"3\\" Output For each operation of type \\"3\\", print the maximum value in the array in a new line. If the array is empty when a \\"3\\" operation is requested, output \\"EMPTY\\". Example Input 9 1 5 1 10 3 2 3 1 7 2 2 3 Output 10 5 EMPTY","solution":"def perform_operations(q, operations): arr = [] results = [] for operation in operations: if operation[0] == \'1\': arr.append(int(operation[1])) elif operation[0] == \'2\': if arr: arr.pop() elif operation[0] == \'3\': if arr: results.append(max(arr)) else: results.append(\\"EMPTY\\") return results"},{"question":"A popular social media app is introducing a new feature called \\"Memory Lane\\", where users can revisit the top destinations they\'ve traveled to over the years. To implement this feature, you need to analyze the travel history of users and determine the most frequently visited destinations. Each user\'s travel history is recorded as a list of destination visits in chronological order. A destination visit is denoted by an integer ID. The app needs to identify the K most frequently visited destinations over a specified time period for each user. Your task is to implement an algorithm that takes a user\'s travel history and outputs the top K most frequently visited destination IDs, with ties broken by the destination IDs in ascending order. Input Format The first line contains two integers N and K, where N is the number of destination visits in the travel history, and K is the number of top destinations to retrieve. The second line contains N space-separated integers representing the travel history, where each integer D_i indicates a destination visit. Constraints 1 leq N leq 10^5 1 leq K leq N 1 leq D_i leq 10^6 Output Format Output K space-separated integers representing the top K most frequently visited destination IDs in descending order of their visit frequency. If there is a tie in the frequency, destinations are sorted by their IDs in ascending order. Sample Input 10 3 1 3 3 2 4 4 4 5 5 5 Sample Output 4 3 5 Explanation In the sample input, the travel history is: 1, 3, 3, 2, 4, 4, 4, 5, 5, 5 - Destination 4 is visited 3 times. - Destination 3 is visited 2 times. - Destination 5 is visited 3 times. Even though Destination 5 has the same frequency of visits as Destination 4, since 4 < 5, Destination 4 comes first. Thus, the top 3 most frequently visited destinations are 4, 3, and 5, listed in that order.","solution":"from collections import Counter def top_k_frequent_destinations(N, K, travel_history): Returns the top K most frequently visited destination IDs. # Count the frequency of each destination ID in the travel history count = Counter(travel_history) # Sort the destinations first by frequency in descending order, # then by destination ID in ascending order in case of ties most_common_destinations = sorted(count.items(), key=lambda x: (-x[1], x[0])) # Extract the top K destination IDs top_k_destinations = [dest[0] for dest in most_common_destinations[:K]] return top_k_destinations"},{"question":"Given a string containing a list of words separated by spaces, your task is to generate a new string where each word is reversed, but the order of the words remains unchanged. For example: ``` reverse_words(\\"hello world\\") => \\"olleh dlrow\\" reverse_words(\\"this is a test\\") => \\"siht si a tset\\" reverse_words(\\"coding is fun\\") => \\"gnidoc si nuf\\" ``` Each word within the string should be reversed individually, while the spacing between words should be preserved. All input will be lowercase letters and spaces only.","solution":"def reverse_words(s): Returns a new string where each word in the input string s is reversed, but the order of the words remains unchanged. :param s: Original string with words separated by spaces :return: A new string with each word reversed return \' \'.join(word[::-1] for word in s.split())"},{"question":"Alice has an array of integers a of length N. She wants to rearrange the array such that the sum of the absolute differences between adjacent elements is minimized. For example, consider the array [3, 1, 4, 1, 5]. One possible arrangement that minimizes the sum of absolute differences is [1, 1, 3, 4, 5]. Your task is to write a program that rearranges the array in the desired manner. Constraints * 1 leq N leq 2 times 10^5 * -10^6 leq a_i leq 10^6 Input Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print the rearranged array such that the sum of absolute differences between adjacent elements is minimized. Examples Input 5 3 1 4 1 5 Output 1 1 3 4 5 Input 3 -1 0 1 Output -1 0 1","solution":"def rearrange_array_to_minimize_abs_diff(n, a): Rearranges the array such that the sum of absolute differences between adjacent elements is minimized. :param n: int - Length of the array :param a: List[int] - List of integers :return: List[int] - Rearranged list # The optimal way to reduce the absolute differences is to sort the array return sorted(a)"},{"question":"Write a program that reads a sequence of strings from the input, one string per line, and prints each string that starts with the letter \'a\' or \'A\'. Your program should terminate when the end of the input is reached. Treat each input line independently. SAMPLE INPUT apple Banana Avocado grape Apricot SAMPLE OUTPUT apple Avocado Apricot","solution":"def filter_strings_starting_with_a(strings): Accepts a list of strings and returns a list of strings that start with \'a\' or \'A\'. result = [s for s in strings if s.lower().startswith(\'a\')] return result"},{"question":"You are given an array A consisting of N integers where each integer is between 1 and 10^6. An integer B is called a dominant integer if the count of B in array A is strictly greater than the count of any other number in array A. Your task is to determine if there exists a dominant integer in the array A, and if so, print it. If there is no such dominant integer, print -1. ------ Input Format ------ - The first line contains an integer T denoting the number of test cases. The T test cases then follow. - The first line of each test case contains an integer N. - The second line of each test case contains N space-separated integers A_{1}, A_{2}, dots, A_{N}. ------ Output Format ------ For each test case, output a single integer which is the dominant integer. If no dominant integer exists, print -1. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ A_{i} ≤ 10^6 ------ Sample Input 1 ------ 3 5 3 3 4 2 4 6 7 1 1 1 2 3 4 5 5 5 5 ------ Sample Output 1 ------ -1 1 5 ------ Explanation 1 ------ Test Case 1: No dominant integer exists as the count of each number is at most equal to the count of the most frequent number, which is 2. Test Case 2: The integer 1 is the dominant integer as it appears 3 times and no other number appears more frequently. Test Case 3: The integer 5 is the dominant integer as it is the only number in the array and thus appears most frequently.","solution":"def find_dominant_integer(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] # Initialize frequency dictionary frequency = {} for num in A: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 # Determine if there is a dominant integer max_freq = max(frequency.values()) dominant_candidates = [num for num, freq in frequency.items() if freq == max_freq] if len(dominant_candidates) == 1: results.append(dominant_candidates[0]) else: results.append(-1) return results"},{"question":"Alex has a sequence of positive integers a_1, a_2, ldots, a_n and an integer x. He can perform the following operation any number of times (possibly zero): Select any subarray of the sequence and replace all elements of that subarray with their product modulo x. Alex is interested in finding out if it is possible to convert the entire sequence into a sequence where all elements are equal to zero using the allowed operation. -----Input----- The first line contains two integers n (1 leq n leq 10^5) and x (1 leq x leq 10^9). The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9). -----Output----- Print \\"Yes\\" if it is possible to transform the sequence so that all elements are equal to zero, otherwise print \\"No\\". You may print the letters of the answer in any case (upper or lower). -----Examples----- Input 5 7 4 14 3 10 5 Output Yes Input 3 2 1 3 5 Output No -----Note----- In the first example, Alex can transform the sequence as follows: - Replace the subarray [14] with 14 % 7 = 0, - Now the sequence is [4, 0, 3, 10, 5], - Replace the subarray [10] with 10 % 7 = 3, - Now the sequence is [4, 0, 3, 3, 5], - Replace the subarray [4, 0, 3, 3, 5] with (4 * 0 * 3 * 3 * 5) % 7 = 0. In the second example, it is not possible to transform the sequence since 1 % 2, 3 % 2, and 5 % 2 are all non-zero, and the product of any subarray modulo 2 will always be non-zero.","solution":"def can_transform_to_zero(n, x, sequence): Determines if it is possible to transform the entire sequence into a sequence where all elements are equal to zero using the allowed operation. :param n: Length of the sequence :param x: Integer for modulo operation :param sequence: List of integers :return: \\"Yes\\" if transformation is possible, \\"No\\" otherwise mod_exists = any(a % x == 0 for a in sequence) return \\"Yes\\" if mod_exists else \\"No\\""},{"question":"Bertrand needs to catalogue his book collection! His library has n shelves, and each book on a shelf is identified by a unique integer from 1 to n. However, due to frequent moving and rearranging, some books are missing and a few slots are empty. Bertrand has decided to reorganize the books such that there are no empty slots between the books and each shelf is as filled as possible, starting from the first shelf. He also wants to keep track of the maximum book identifier on each shelf after reorganizing. For example, if there are 5 shelves containing books with identifiers `[1, 2, 8, 3, 10]`, Bertrand would like to reorganize them to `[1, 2, 3, 8, 10]`. To assist Bertrand, you need to provide the maximum book identifier for each shelf after reorganizing. -----Input----- The first line of input contains a positive integer n (1 ≤ n ≤ 100000) — the number of books. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100000) — the initial positions of the books. -----Output----- Output a single integer — the maximum book identifier after reorganizing the books on the shelves. If there are empty slots, consider them as part of the last shelf. -----Examples----- Input 5 1 5 3 8 6 Output 8 Input 4 2 4 1 3 Output 4 Input 3 2 10 8 Output 10 -----Note----- In the first sample, the books identified by integer positions can be reorganized as `[1, 3, 5, 6, 8]`, resulting in maximum identifier `8` on the shelf. In the second sample, the books are already in a continuous sequence, so the maximum identifier is `4`. In the third sample, the books with positions `[2, 8, 10]` are rearranged maintaining the highest identifier `10`. Your task is to determine the largest identifier after possible rearrangement.","solution":"def max_book_identifier(n, books): Returns the maximum book identifier after reorganizing the books. Parameters: n (int): Number of books. books (list of int): Initial positions of the books. Returns: int: The maximum book identifier after reorganizing. if not books: return 0 # Sort the book identifiers books.sort() # The maximum book identifier is the last element in the sorted list return books[-1]"},{"question":"Dheeraj is playing a mathematical game with his friends. The game involves finding all possible unique sums that can be generated using exactly two distinct elements from a given list of integers. INPUT: The first line of input contains a single integer N, representing the number of elements in the list. The second line contains N space-separated integers denoting the elements of the list. OUTPUT: Output should consist of all unique sums that can be generated using exactly two distinct elements from the list, sorted in non-decreasing order. Each sum should be printed on a new line. SAMPLE INPUT: 4 1 2 3 4 SAMPLE OUTPUT: 3 4 5 6 7","solution":"def unique_sums(N, elements): Finds all unique sums that can be generated using exactly two distinct elements from the list. Args: N : int : The number of elements in the list. elements : list : A list of N integers. Returns: list : A list of unique sums sorted in non-decreasing order. sums = set() for i in range(N): for j in range(i + 1, N): sums.add(elements[i] + elements[j]) return sorted(sums) def main(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) elements = list(map(int, data[1:])) results = unique_sums(N, elements) for result in results: print(result)"},{"question":"# Fun fact Starting from version 1.9.0, Python\'s `OrderedDict` has become unnecessary because the built-in `dict` type now maintains insertion order. This means that the order in which you insert elements into a dictionary will be preserved when you iterate over it. # Task Given a list of integers, write a function that returns the first unique integer in the list. If there is no unique integer, the function should return `None`. # Input ```python [4, 5, 1, 2, 0, 4] # example ``` As an argument, you are given `numbers` - a list of integers. There can be both negative and positive integers present in the list. # Output The first unique integer (i.e., the first integer that does not occur more than once in the list). If there is no unique integer, return `None`. # Example 1 ```python >>> numbers = [4, 5, 1, 2, 0, 4] >>> first_unique(numbers) 5 ``` 5 is the first unique integer in the list. # Example 2 ```python >>> numbers = [4, 4, 4, 4] >>> first_unique(numbers) None ``` All integers in the list are repeated, so there is no unique integer. # Example 3 ```python >>> numbers = [] >>> first_unique(numbers) None ``` The list is empty, so there is no unique integer to return. # Note - The function should handle large input sizes efficiently.","solution":"def first_unique(numbers): Returns the first unique (non-repeating) integer from the list of integers. If there is no unique integer, return None. Args: numbers (list of int): List of integers which may contain both negative and positive integers. Returns: int or None: The first unique integer, or None if there is no unique integer. # Count the occurrences of each number counts = {} for number in numbers: if number in counts: counts[number] += 1 else: counts[number] = 1 # Find the first unique number for number in numbers: if counts[number] == 1: return number return None"},{"question":"Write a function that takes an integer array and returns the index of its peak element. A peak element is an element that is greater than its neighbors. Example 1: Input: nums = [1,2,3,1] Output: 2 Explanation: 3 is a peak element and your function should return the index number 2. Example 2: Input: nums = [1,2,1,3,5,6,4] Output: 5 Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6. Note: Your solution should be in logarithmic complexity.","solution":"def find_peak_element(nums): Finds a peak element and returns its index. A peak element is an element that is greater than its neighbors. The algorithm implemented here runs in logarithmic complexity. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[mid + 1]: # We are in a downward slope, so the peak must be on the left side (including mid) right = mid else: # We are in an upward slope, so the peak must be on the right side (excluding mid) left = mid + 1 # When left == right, we have found the peak element return left"},{"question":"Given a NxN grid where each cell can be either \'0\' (empty) or \'1\' (obstacle). You need to count the number of distinct paths from the top-left corner to the bottom-right corner of the grid, but with some constraints: You are allowed to move only right or down from a cell, and you cannot pass through cells containing \'1\'. For example: Input: 3 3 // This means a 3x3 grid 0 0 0 0 1 0 0 0 0 Output: 2 Explanation: There are two distinct paths from (0, 0) to (2, 2): 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Input: 2 2 0 1 0 0 Output: 1 Explanation: There is only one path from (0, 0) to (1, 1): Down -> Right Input: 3 3 0 1 0 0 1 0 0 0 0 Output: 1 Explanation: There is only one path from (0, 0) to (2, 2): Down -> Down -> Right -> Right Your Task: You need to complete the function `countPaths(grid)` that takes a 2D list `grid` as input and returns the number of distinct paths from the top-left corner to the bottom-right corner. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 <= N <= 100 grid[i][j] is either \'0\' or \'1\' The top-left and bottom-right corners will always be \'0\'","solution":"def countPaths(grid): Returns the number of distinct paths from the top-left corner to the bottom-right corner. Parameters: grid (list of list of int): 2D grid where \'0\' is an empty cell and \'1\' is an obstacle. Returns: int: Number of distinct paths from the top-left to the bottom-right corner. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 N = len(grid) # Initialize a 2D dp array dp = [[0] * N for _ in range(N)] # Set the starting point dp[0][0] = 1 # Fill the dp array while avoiding obstacles for i in range(N): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"# Task A “reverse” word is a word that reads the same backward and forward. Write a function that determines if a given string is a “reverse” word. # Example For `input_string = \\"madam\\"`, the output should be `true` For `input_string = \\"hello\\"`, the output should be `false` # Input/Output - `[input]` string `input_string` A string consisting of alphanumeric characters. Constraints: `1 ≤ input_string.length ≤ 100`. - `[output]` a boolean value","solution":"def is_reverse_word(input_string): Determines if the given string is a reverse (palindrome) word. Parameters: input_string (str): A string consisting of alphanumeric characters. Returns: bool: True if the string reads the same backward as forward, False otherwise. return input_string == input_string[::-1]"},{"question":"Given an integer array `arr` of size `n` and an integer `k`, determine if there are two distinct indices `i` and `j` in the array such that `arr[i] + arr[j]` is equal to `k`. If such a pair exists, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line contains two space-separated integers: `n` (2 ≤ n ≤ 10^5) and `k` (|k| ≤ 10^9). The second line contains `n` space-separated integers, representing the elements of the array `arr` (|arr[i]| ≤ 10^9). Output Print \\"YES\\" if there exist two distinct indices `i` and `j` such that `arr[i] + arr[j]` equals `k`. Otherwise, print \\"NO\\". Examples Input 5 9 2 7 11 15 3 Output YES Input 4 10 1 2 3 4 Output NO Input 3 6 1 5 1 Output YES","solution":"def has_pair_with_sum(arr, k): Determines if there are two distinct indices i and j in arr such that arr[i] + arr[j] == k. seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Write a function to generate the N-th centered hexagonal number. The sequence of centered hexagonal numbers starts with 1, and each subsequent number represents a hexagon with more layers. Specifically, the formula to compute the N-th centered hexagonal number is given by: [ H_{n} = 3n(n-1) + 1 ] Given an integer N, return the N-th centered hexagonal number. Note: Since the output may be very large, compute the answer modulo (10^{9}+7). **Example 1:** Input: N = 3 Output: 19 Explanation: Using the formula, H_{3} = 3*3*(3-1) + 1 = 19 **Example 2:** Input: N = 5 Output: 61 Explanation: Using the formula, H_{5} = 3*5*(5-1) + 1 = 61 **Your Task:** You don\'t need to read input or print anything. Your task is to complete the function `centeredHexagonal()` which takes an integer N as input parameter and returns the N-th centered hexagonal number. **Expected Time Complexity:** O(1) **Expected Auxiliary Space:** O(1) **Constraints:** - 1 <= N <= (10^{6})","solution":"def centered_hexagonal(N): Given an integer N, return the N-th centered hexagonal number modulo 10^9 + 7. The formula used is: H_{n} = 3n(n-1) + 1 MOD = 10**9 + 7 return (3 * N * (N - 1) + 1) % MOD"},{"question":"Problem Description A palindrome is a sequence of characters that reads the same backward as forward. For example, \\"madam\\" and \\"racecar\\" are palindromes. A string is considered a k-palindrome if it can be transformed into a palindrome by removing at most k characters from it. Write a function `is_k_palindrome(s, k)` that determines whether a given string `s` can be turned into a palindrome by removing at most `k` characters. The function should return `True` if it is possible, otherwise `False`. Input - `s`: A string `s` of length `1 <= len(s) <= 1000`, consisting of lowercase Latin letters. - `k`: An integer `0 <= k <= len(s)`. Output - A boolean value: `True` if the given string `s` can be turned into a palindrome by removing at most `k` characters, `False` otherwise. Example ```python print(is_k_palindrome(\\"abca\\", 1)) # Output: True (remove \'b\' or \'c\' to make \\"aca\\" or \\"aba\\") print(is_k_palindrome(\\"abcda\\", 1)) # Output: False (need to remove 2 characters) print(is_k_palindrome(\\"racecar\\", 0)) # Output: True (already a palindrome) print(is_k_palindrome(\\"abcdef\\", 2)) # Output: False (not possible with just 2 removals) ``` Constraints - Your solution should be efficient enough to handle the upper constraint of `len(s) = 1000`.","solution":"def is_k_palindrome(s, k): Determines whether a given string s can be turned into a palindrome by removing at most k characters. def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] n = len(s) lps_length = longest_palindromic_subsequence(s) min_deletions_needed = n - lps_length return min_deletions_needed <= k"},{"question":"Alice is organizing a special event where multiple participants earn points by solving challenges. She needs to keep track of everyone\'s score to declare the winner efficiently. The scoreboard will be updated dynamically as participants keep solving challenges. Your task is to help Alice manage and query the scoreboard. You need to implement a data structure that supports the following operations: 1. Add or update the score of a participant. 2. Retrieve the top k participants with the highest scores. If multiple participants have the same score, they should be returned in alphabetical order of their names. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of operations. Each of the next n lines describes an operation, which can be one of the following: - \\"add name score\\": Add a new participant with the given name and score or update the score of an existing participant. - \\"top k\\": Retrieve the top k participants with the highest scores. The value of score will be between 0 and 10^6, and k will be a positive integer no larger than the total number of participants currently on the scoreboard. Output For each \\"top k\\" operation, output the names of the top k participants in a single line, space-separated. Example Input 7 add Alice 50 add Bob 75 add Alice 100 top 1 add Carol 100 add Bob 50 top 3 Output Alice Alice Carol Bob Note: - In case of ties in scores, participants should be sorted alphabetically by their names. - After updating a score, the participant\'s rank should be updated accordingly in subsequent \\"top k\\" queries.","solution":"class Scoreboard: def __init__(self): self.scores = {} def add(self, name, score): self.scores[name] = score def top(self, k): sorted_scores = sorted(self.scores.items(), key=lambda x: (-x[1], x[0])) top_k = [name for name, score in sorted_scores[:k]] return \\" \\".join(top_k) def process_operations(operations): scoreboard = Scoreboard() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"add\\": name = parts[1] score = int(parts[2]) scoreboard.add(name, score) elif parts[0] == \\"top\\": k = int(parts[1]) results.append(scoreboard.top(k)) return results"},{"question":"Your friend has a collection of words and is interested in finding the smallest number of substrings needed to represent them. A substring is a contiguous sequence of characters within a string. Given a main string and a list of words, determine the smallest number of substrings of the main string that can be concatenated to form each word in the list. For each word in the list, you need to find the smallest number of non-overlapping substrings of the main string that concatenate to give the exact word. If it is not possible to form a word using substrings of the main string, the answer for that word should be -1. Input format The first line contains a single integer n, the number of words in the list. The second line contains the main string s. Then, n lines follow, each containing a word. 1 ≤ n ≤ 100, 1 ≤ len(s) ≤ 1000, and 1 ≤ len(word) ≤ 100. Output format Print n lines, each containing a single integer that represents the smallest number of substrings needed to form the corresponding word, or -1 if it is not possible. SAMPLE INPUT 3 abcdefg abc cde age SAMPLE OUTPUT 1 1 -1","solution":"def min_substrings(main_str, words): results = [] def find_min_substrings(word): m, w = len(main_str), len(word) # dp[i][j]: the minimal number of substrings to form word[:j] using main_str[:i] dp = [[float(\'inf\')] * (w + 1) for _ in range(m + 1)] # Initial state for i in range(m + 1): dp[i][0] = 0 for i in range(1, m + 1): for j in range(1, w + 1): k = j while k > 0 and main_str[i - k:i] != word[j - k:j]: k -= 1 if k > 0: dp[i][j] = min(dp[i - k][j - k] + 1, dp[i - 1][j]) else: dp[i][j] = dp[i - 1][j] return dp[m][w] if dp[m][w] != float(\'inf\') else -1 for word in words: results.append(find_min_substrings(word)) return results"},{"question":"Miyuki, a renowned software engineer, has recently enrolled in a top-secret development program. As part of her training, she has been assigned the challenge of managing a distributed data storage system. The system consists of `N` servers, indexed from 1 to `N`, and `M` bidirectional network connections between these servers. Each connection has a certain latency, represented in milliseconds. Miyuki\'s task is to ensure that any two servers in the system can communicate either directly or indirectly. If there is any pair of servers that cannot communicate, Miyuki will need to add connections until the entire system is connected. You are required to help Miyuki by determining the minimum number of new connections required to make the data storage system fully connected. Input: The first line contains an integer `T`, which represents the number of test cases. Each test case is described as follows: 1. The first line contains two integers `N` and `M`. 2. The next `M` lines each contain three integers `X`, `Y`, and `L`, indicating a bidirectional connection between servers `X` and `Y` with latency `L`. Output: For each test case, print the minimum number of new connections required to make the system fully connected. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ M ≤ 2000 1 ≤ X, Y ≤ N 1 ≤ L ≤ 1000 SAMPLE INPUT: 2 5 3 1 2 1 2 3 2 4 5 3 4 5 1 2 1 1 3 2 3 4 1 SAMPLE OUTPUT: 1 0 Explanation: In the first test case, servers 1, 2, and 3 are connected to each other, as are servers 4 and 5. To make the whole system connected, at least one new connection is needed between a server from the set {1, 2, 3} and a server from the set {4, 5}. In the second test case, all servers are already connected either directly or indirectly, so no new connections are needed.","solution":"def find_parent(parent, i): A utility function to find the set of an element i if parent[i] == i: return i else: return find_parent(parent, parent[i]) def union(parent, rank, x, y): A utility function to do union of two subsets x and y xroot = find_parent(parent, x) yroot = find_parent(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_new_connections_required(N, M, connections): This function returns the minimum number of new connections required to make the entire system fully connected. parent = list(range(N + 1)) rank = [0] * (N + 1) connected_components = N for X, Y, L in connections: X_root = find_parent(parent, X) Y_root = find_parent(parent, Y) if X_root != Y_root: union(parent, rank, X_root, Y_root) connected_components -= 1 return connected_components - 1 # The number of new connections required is one less than the number of disconnected components. def solve(T, test_cases): results = [] for N, M, connections in test_cases: results.append(minimum_new_connections_required(N, M, connections)) return results # Input parsing and function calling would be done here in an actual scenario # for a hypothetical input matrix passed to the function solve."},{"question":"You are given a list of n integers representing the heights of flowers in a garden. The garden follows a special rule: you can water them in such a way that every time you water a flower, its height, and the height of all adjacent flowers increase by 1. The goal is to determine the minimum number of watering operations required to ensure that all flowers eventually reach or exceed a certain height h. You are allowed to water any flower any number of times, and each operation increases the height of the flower and its adjacent ones by 1. Input The first line contains two integers n and h (1 ≤ n ≤ 10^5, 1 ≤ h ≤ 10^9) — the number of flowers and the required height, respectively. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9), where ai is the initial height of the i-th flower. Output Print a single integer — the minimum number of watering operations required. Examples Input 5 10 3 6 2 8 4 Output 4 Input 3 3 0 0 0 Output 3 Note In the first sample, one possible sequence of watering operations is: 1. Watering the 3rd flower, the new heights become [3, 6, 3, 9, 5]. 2. Watering the 1st flower, the new heights become [4, 7, 4, 9, 5]. 3. Watering the 2nd flower, the new heights become [5, 8, 5, 10, 6]. 4. Watering the 2nd flower again, the new heights become [6, 9, 6, 11, 7]. In the second sample, you can water any of the flowers three times to make every flower reach the height of at least 3.","solution":"def min_watering_operations(n, h, heights): # Number of operations required to make each flower reach the height h, is determined by the maximum difference # between the desired height h and the current height of any flower max_diff = max(h - height for height in heights) return max_diff"},{"question":"You are given an array a of n integers. Your task is to make the array strictly increasing by removing exactly k elements. An array b is strictly increasing if for every i < j, we have b_i < b_j. Determine if it is possible to make the array strictly increasing by removing exactly k elements. If it is possible, output \\"YES\\"; otherwise, output \\"NO\\". -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line contains two integers n and k (1 le n le 1000; 0 le k < n). The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9). -----Output----- For each test case, print \\"YES\\" if it is possible to make the array strictly increasing by removing exactly k elements. Otherwise, print \\"NO\\". -----Examples----- Input 3 5 2 5 3 4 7 8 6 3 1 5 2 6 3 8 4 1 1 2 3 4 Output YES YES YES -----Note----- In the first test case, one way to make the array strictly increasing by removing exactly 2 elements is to remove 5 and 3, resulting in the array [4, 7, 8]. In the second test case, one way to make the array strictly increasing by removing exactly 3 elements is to remove 5, 2, and 3, resulting in the array [1, 6, 8]. In the third test case, the array is already strictly increasing, so removing any 1 element still leaves it strictly increasing.","solution":"def can_be_strictly_increasing(n, k, a): Determines if an array `a` of length `n` can be made strictly increasing by removing exactly `k` elements. Args: n (int): The length of the array. k (int): The number of elements to remove. a (list): The list of integers. Returns: str: \\"YES\\" if it is possible to create a strictly increasing array by removing k elements, otherwise \\"NO\\". from itertools import combinations for comb in combinations(a, n - k): if all(x < y for x, y in zip(comb, comb[1:])): return \\"YES\\" return \\"NO\\" def solve(test_cases): results = [] for n, k, a in test_cases: results.append(can_be_strictly_increasing(n, k, a)) return results"},{"question":"You are given a string of space-separated words: `s = \\"word1 word2 word3 ... wordN\\"` Your task is to reorder all words in the string such that each word is reversed but the order of words remains the same. For example: `s = \\"Hello World Example\\"` The required output would be: `\\"olleH dlroW elpmaxE\\"` # Task: 1. Write a function `reverse_words(s)` which takes a single string `s` and outputs the string with each word reversed but the word order unchanged. # Examples: - `reverse_words(\\"Hello World Example\\")` returns `\\"olleH dlroW elpmaxE\\"` - `reverse_words(\\"Coding is fun\\")` returns `\\"gnidoC si nuf\\"` # Note: - The function should handle multiple spaces between words by reducing them to a single space and then performing the word reversal. - The function should properly handle leading and trailing spaces (i.e., remove them if present before processing). # Additional Examples: - `reverse_words(\\" Leading and trailing spaces \\")` returns `\\"gnidaeL dna gniliart secaps\\"` - `reverse_words(\\"Multiple spaces\\")` returns `\\"elpitluM secaps\\"`","solution":"def reverse_words(s): This function takes a string s, and returns a new string where each word is reversed but the order of words remains unchanged. # First, split the string by spaces, this will automatically handle extra spaces words = s.strip().split() # Reverse each word in the list reversed_words = [word[::-1] for word in words] # Join the reversed words with a single space to form the final output string return \' \'.join(reversed_words)"},{"question":"A farmer owns a series of fields arranged in a straight line. Due to the unique landscape, the fields can have different soil fertility levels represented as integers. The farmer needs to choose a continuous subarray of these fields such that the sum of fertility levels in this subarray is maximized. Your task is to determine the maximum sum of fertility levels for any continuous subarray. -----Constraints----- - 1 leq N leq 100000 - -10^4 leq fertility levels leq 10^4 -----Input----- Input is given from Standard Input in the following format: N fertility_1 fertility_2 ... fertility_N -----Output----- Print the maximum sum of fertility levels for any continuous subarray. -----Sample Input----- 5 -3 4 -1 2 1 -----Sample Output----- 6 Explanation: The maximum sum of fertility levels for the continuous subarray is obtained by summing from the second element to the last element (4 + (-1) + 2 + 1 = 6).","solution":"def max_subarray_sum(n, fertility_levels): Finds the maximum sum of any continuous subarray. Parameters: n (int): Number of fields. fertility_levels (list of int): List containing the fertility levels of the fields. Returns: int: The maximum sum of the continuous subarray. if n == 0: return 0 max_sum = current_sum = fertility_levels[0] for fertility in fertility_levels[1:]: current_sum = max(fertility, current_sum + fertility) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In a distant kingdom, there is a famous festival where each citizen wears distinct, colorful costumes. The kingdom\'s tradition demands that no two citizens should have the exact same color scheme. Every costume is made up of `N` distinct colors from a given palette of `M` colors. You are tasked with verifying if the given list of costumes complies with the tradition. -----Input----- The first line of input consists of two integers: `1 <= N <= 10`, the number of colors in each costume, and `1 <= M <= 50`, the total number of available colors in the palette. Following this line, you have `P` (where `2 <= P <= 100`) lines of input, each with `N` distinct integers representing the colors in each costume. The colors are represented as integers ranging from `1` to `M`. -----Output----- Output \\"Valid\\" if all costumes have distinct color schemes, otherwise output \\"Invalid\\". -----Examples----- Sample Input: 3 5 1 2 3 4 2 1 3 5 2 1 2 3 Sample Output: Invalid Sample Input: 2 4 1 2 3 4 2 3 4 1 Sample Output: Valid","solution":"def check_costumes_validity(N, M, costumes): Returns \\"Valid\\" if all costumes have distinct color schemes, otherwise \\"Invalid\\". seen_costumes = set() for costume in costumes: color_scheme = tuple(sorted(costume)) if color_scheme in seen_costumes: return \\"Invalid\\" seen_costumes.add(color_scheme) return \\"Valid\\""},{"question":"You are given two integers n and m which represent the number of rows and columns of a grid, respectively. Each cell in the grid is initially empty. You need to place k rooks on the grid such that no two rooks can attack each other. Recall that a rook can move any number of squares horizontally or vertically in one move. Your goal is to determine if it is possible to place all k rooks on the grid such that no two of them threaten each other. -----Input----- The first line of input contains three integers n, m, and k (1 leq n, m leq 1,000,000, 0 leq k leq min(n, m)): the number of rows, the number of columns, and the number of rooks to be placed, respectively. -----Output----- Output \\"YES\\" if all k rooks can be placed on the grid such that no two rooks can attack each other. Otherwise, output \\"NO\\". -----Example----- Input 3 3 2 Output YES ------Explanation------ In this example, it is possible to place 2 rooks on a 3x3 grid such that they do not threaten each other, e.g., placing one rook at (1,1) and another at (2,2). Since rooks in different rows and columns do not threaten each other, they are safe.","solution":"def can_place_rooks(n, m, k): Determines if it\'s possible to place `k` rooks on an `n` x `m` grid such that no rooks can attack each other. :param int n: Number of rows in the grid :param int m: Number of columns in the grid :param int k: Number of rooks to place :return: \\"YES\\" if it\'s possible to place the rooks, otherwise \\"NO\\" :rtype: str # If k is greater than number of rows or columns, it\'s not possible to place k rooks if k <= min(n, m): return \\"YES\\" else: return \\"NO\\""},{"question":"Given a 2D grid of numbers and a starting position and target position, determine the shortest path using only orthogonal movements (up, down, left, right) to reach the target position. Each cell in the grid has either a value of 0 or 1, where 0 represents a passable cell, and 1 represents an impassable cell. If the target position is unreachable, return -1. Function Description Complete the function `shortestPath` in the editor below. It should return an integer representing the minimum number of steps required to reach the target, or -1 if it is not possible. `shortestPath` has the following parameters: * `grid`: a 2D list of integers representing the grid * `start`: a tuple containing two integers representing the starting row and column * `target`: a tuple containing two integers representing the target row and column Input Format * The first line contains two space-separated integers `n` and `m`, the number of rows and columns in the grid. * Each of the next `n` lines contains `m` space-separated integers (either 0 or 1) representing the grid. * The next line contains two space-separated integers representing the starting cell\'s row and column. * The final line contains two space-separated integers representing the target cell\'s row and column. Returns * int: the minimum number of steps required to reach the target, or -1 if not possible Constraints 1 leq n, m leq 500 0 leq grid[i][j] leq 1 0 leq start_row, start_col, target_row, target_col < n Sample Input ``` 5 5 0 0 1 0 0 0 0 0 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 4 4 ``` Sample Output ``` 8 ``` Explanation In the grid, the following movements occur (marked by *): ``` * * 1 0 0 * . * . 1 1 * 1 * * . * . 1 * . 1 * * * ``` Another valid path might be: ``` * * 1 0 0 . * * . 1 1 * 1 * * 0 * * 1 * 0 1 0 * * ``` Both paths take 8 steps. Alternatively, the algorithm should find the shortest path if there are multiple options.","solution":"from collections import deque def shortestPath(grid, start, target): n, m = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add((start[0], start[1])) while queue: r, c, dist = queue.popleft() # If we reached the target if (r, c) == target: return dist # Explore neighbors for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == 0: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"Write a function that accepts a dictionary where the keys are student names and the values are lists of their grades. The function should return a dictionary where the keys are the original student names and the values are their average grades (rounded to 2 decimal places). If a student has no grades, their average should be represented as 0.00. Example: ``` average_grades({ \\"Alice\\": [90, 85, 88], \\"Bob\\": [70, 80, 75], \\"Charlie\\": [], \\"David\\": [95, 92] }) = { \\"Alice\\": 87.67, \\"Bob\\": 75.00, \\"Charlie\\": 0.00, \\"David\\": 93.50 } ``` You are not allowed to use the `statistics.mean` function directly to compute the averages. Implement the function and provide at least one additional test case to verify its correctness.","solution":"def average_grades(student_grades): Accepts a dictionary where the keys are student names and the values are lists of their grades. Returns a dictionary where the keys are the original student names and the values are their average grades, rounded to 2 decimal places. If a student has no grades, their average should be represented as 0.00. result = {} for student, grades in student_grades.items(): if grades: avg_grade = round(sum(grades) / len(grades), 2) else: avg_grade = 0.00 result[student] = avg_grade return result"},{"question":"Alice loves collecting rare stamps. She has an album with n pages, each page can hold a specific number of stamps. She also has m stamps to place in the album. Each page has a fixed number of slots and can only hold up to that many stamps. Let\'s denote the stamps by an array of integers where each integer indicates the number of slots required for that stamp. Similarly, denote the pages by an array of integers where each integer indicates the number of slots available on that page. Given the slot requirements of each stamp and the slot availability of each page, Alice wants to know the maximum number of stamps she can place in the album. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000). The second line contains n integers x1, x2, ..., xn (1 ≤ xi ≤ 100) representing the slot capacity of each album page. The third line contains m integers y1, y2, ..., ym (1 ≤ yi ≤ 100) representing the slot requirement of each stamp. Output A single integer — the maximum number of stamps Alice can place in the album. Examples Input 3 4 10 20 30 5 10 15 20 Output 3 Input 2 3 5 6 7 8 9 Output 0 Note In the first example, Alice can place the first stamp on the first page, the second stamp on the second page, and the fourth stamp on the third page, thereby placing a total of 3 stamps. In the second example, none of the stamps can fit in the pages as their slot requirements exceed the available slots on each page, resulting in 0 stamps being placed.","solution":"def max_stamps(n, m, pages, stamps): Returns the maximum number of stamps that can be placed in the album. :param n: Number of pages in the album :param m: Number of stamps Alice has :param pages: List of integers representing the slot capacity of each album page :param stamps: List of integers representing the slot requirements of each stamp :return: Maximum number of stamps that can be placed in the album pages.sort() stamps.sort() page_idx = 0 stamp_idx = 0 count = 0 while page_idx < n and stamp_idx < m: if pages[page_idx] >= stamps[stamp_idx]: count += 1 stamp_idx += 1 page_idx += 1 return count"},{"question":"Write a function `spiralTraverse(matrix)` that takes in a 2D list (matrix) and returns a list of the elements in spiral order. Spiral order starts from the top-left corner of the matrix and proceeds in a clockwise manner, eventually converging towards the center of the matrix. For example, given the following matrix: ``` [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ``` The function should return: ``` [1, 2, 3, 6, 9, 8, 7, 4, 5] ``` And for the matrix: ``` [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]] ``` The function should return: ``` [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10] ``` Constraints: - The matrix can have varying dimensions, but it will always be a non-empty 2D list. - The elements of the matrix can be any integers. - Do not use any libraries for the traversal; the implementation should manually handle the spiral logic. Hint: Consider maintaining boundaries that keep track of the rows and columns that have already been visited, and adjust these boundaries as you progress through the elements in the spiral order.","solution":"def spiralTraverse(matrix): Returns the elements of the given 2D list (matrix) in spiral order. result = [] if not matrix or not matrix[0]: return result top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"Given an integer array nums, find a maximum product of a non-empty subsequence of that array that contains an even number of negative numbers. A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Example 1: Input: nums = [1, -2, 3, 4, -5] Output: 120 Explanation: The subsequence [1, -2, 3, 4, -5] has an even number of negative numbers and its product is 120. Example 2: Input: nums = [-1, -2, -3, 0] Output: 6 Explanation: The subsequence [-1, -2, -3] has an even number of negative numbers and its product is 6. Example 3: Input: nums = [1, -1] Output: 1 Explanation: The subsequence [1] has an even number of negative numbers (0 counts as even) and its product is 1. Note: - The length of the array nums will be in the range [1, 10^5]. - Each element in the array nums will be in the range [-100, 100].","solution":"def max_product_even_negative(nums): Finds the maximum product of a non-empty subsequence that contains an even number of negative numbers. # Filter out zeros since they do not contribute to the product nums = [x for x in nums if x != 0] # Separate positive and negative numbers pos_nums = [x for x in nums if x > 0] neg_nums = [x for x in nums if x < 0] # Sort negative numbers to arrange them neg_nums.sort() # If the number of negative numbers is odd, we remove the least negative number if len(neg_nums) % 2 != 0: neg_nums.pop() # Compute the product product = 1 for num in pos_nums + neg_nums: product *= num return product"},{"question":"Akash loves playing with numbers and he enjoys solving mathematical riddles. One day, he stumbled upon a unique number sequence challenge. He needs to find the greatest common divisor (GCD) of all numbers in a given list. Can you help him solve this problem? Input The first line contains an integer N, the number of elements in the list. The second line contains N integers separated by spaces representing the numbers in the list. Output Print the GCD of all the numbers in the list. Constraints 2 ≤ N ≤ 100 1 ≤ each number in the list ≤ 10^6 SAMPLE INPUT 4 12 15 18 27 SAMPLE OUTPUT 3","solution":"import math from functools import reduce def find_gcd_of_list(numbers): Returns the GCD of all numbers in the given list. return reduce(math.gcd, numbers)"},{"question":"Write a function that takes a non-negative integer and returns a string representing the equivalent time duration in days, hours, and minutes in the format `dd:hh:mm`. If the input is `0`, then you should return `\\"00:00:00\\"`. **Note:** Assume there are 24 hours in a day and 60 minutes in an hour. All parts (days, hours, and minutes) should be zero-padded to two digits. **Hint:** The modulo operation can help separate the hours from minutes and the days from hours. Example If the input is `1445`, then you should return `\\"01:00:05\\"`, because 1445 minutes converts to 1 day, 0 hours, and 5 minutes. Good luck! :D","solution":"def minutes_to_duration(minutes): Converts a non-negative integer representing minutes into a string representing the equivalent time duration in days, hours, and minutes. Parameters: minutes (int): A non-negative integer representing the number of minutes. Returns: str: A string in the format \'dd:hh:mm\'. if minutes < 0: raise ValueError(\\"Input must be a non-negative integer\\") days = minutes // (24 * 60) remaining_minutes = minutes % (24 * 60) hours = remaining_minutes // 60 minutes = remaining_minutes % 60 return f\\"{days:02}:{hours:02}:{minutes:02}\\""},{"question":"Your task is to implement a simplified version of a library management system. Write a program that tracks the inventory of books in a library. Each transaction will either be a new book being added or a book being borrowed from the library. Input The input consists of multiple lines. Each line will be a transaction, either adding a book or borrowing a book, represented as: - \'ADD book_name\' to add a book to the inventory. - \'BORROW book_name\' to borrow a book from the inventory. - \'END\' to indicate the end of transactions. Initially, the inventory is empty. Output For each transaction of type \'BORROW\', print \'YES\' if the book is available to borrow and \'NO\' if it is not available or not in the inventory. After the \'END\' command, print the final status of the inventory, listing each book and the number of copies left in the inventory. You may assume that all book names are unique and without spaces. Example Input ADD HarryPotter1 ADD HarryPotter2 ADD HarryPotter1 BORROW HarryPotter1 BORROW HarryPotter2 BORROW HarryPotter3 END Output YES YES NO HarryPotter1: 1 HarryPotter2: 0","solution":"def library_management(transactions): inventory = {} result = [] for transaction in transactions: if transaction == \\"END\\": break command, book_name = transaction.split(\' \', 1) if command == \\"ADD\\": if book_name in inventory: inventory[book_name] += 1 else: inventory[book_name] = 1 elif command == \\"BORROW\\": if book_name in inventory and inventory[book_name] > 0: inventory[book_name] -= 1 result.append(\\"YES\\") else: result.append(\\"NO\\") # Append the final inventory status to result for book, count in inventory.items(): result.append(f\\"{book}: {count}\\") return result"},{"question":"Write a function that takes in a string and returns the same string but with all the vowels removed. If the input string is empty or null, return an empty string. For this problem, vowels are defined as \'a\', \'e\', \'i\', \'o\', \'u\', \'A\', \'E\', \'I\', \'O\', \'U\'. # Example For input `\\"This is a sample string.\\"`, you should return `\\"Ths s smpl strng.\\"`.","solution":"def remove_vowels(s): Returns the input string with all vowels removed. if s is None: return \\"\\" vowels = \\"aeiouAEIOU\\" return \'\'.join([char for char in s if char not in vowels])"},{"question":"# Write a Function that Checks if a String is a Palindrome Create a function that checks if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). The function should take one parameter: `input_string`. Use appropriate string manipulation and conditionals to return the proper message: input | output --- | --- \'racecar\' | \'This is a palindrome.\' \'hello\' | \'This is not a palindrome.\' \'A man a plan a canal Panama\' | \'This is a palindrome.\' \'No lemon, no melon\' | \'This is a palindrome.\'","solution":"def is_palindrome(input_string): Check if the input string is a palindrome. Args: input_string (str): The string to check. Returns: str: Message indicating whether the input string is a palindrome or not. # Remove spaces and punctuation, and convert to lowercase cleaned_string = \'\'.join(e for e in input_string if e.isalnum()).lower() # Check if the cleaned string is equal to its reverse if cleaned_string == cleaned_string[::-1]: return \'This is a palindrome.\' else: return \'This is not a palindrome.\'"},{"question":"Given a binary tree, write a function to determine if it is balanced. A balanced binary tree is defined as one in which the depth of the two subtrees of any node never differs by more than 1. If the tree is balanced, return 1, otherwise return 0. Example 1: Input: 1 / 2 3 / 4 5 Output: 1 Explanation: The binary tree is balanced as the difference in height of the left and right subtrees for all nodes is not more than 1. Example 2: Input: 1 / 2 / 3 Output: 0 Explanation: The binary tree is not balanced as the subtree with root at node 2 has a depth of 2 while the right subtree has a depth of 0. The difference is more than 1, hence it is not balanced. Your Task: You need to complete the function isBalanced() that takes the root of a binary tree as input and returns 1 if the tree is balanced and 0 otherwise. The printing of the result is done by the driver\'s code. Expected Time Complexity: O(N). Expected Auxiliary Space: O(H), where H is the height of the tree. Constraints: 1 ≤ N ≤ 10^4 Note: N is the number of nodes in the binary tree. The value of the nodes can be any integer.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isBalanced(root): Determines if a binary tree is balanced. A balanced tree is defined as one where the depth of the two subtrees of every node never differs by more than 1. :param root: TreeNode, the root of the binary tree :return: 1 if the tree is balanced, 0 otherwise def check_balance(node): if node is None: return 0, True # height, isBalanced left_height, left_is_balanced = check_balance(node.left) right_height, right_is_balanced = check_balance(node.right) current_height = 1 + max(left_height, right_height) is_balanced = left_is_balanced and right_is_balanced and abs(left_height - right_height) <= 1 return current_height, is_balanced _, result = check_balance(root) return 1 if result else 0"},{"question":"Hermione is trying to collect all the magical books in the library. Each book has a magical power associated with it. She wants to find out if there is a contiguous subset of books such that the sum of their magical powers equals to a given value `S`. Your task is to help Hermione determine if such a subset exists. Constraints 1 ≤ N ≤ 1000 -1000 ≤ Book\'s magical power ≤ 1000 1 ≤ S ≤ 100000 Input First line contains two integers `N` and `S` separated by a space respectively. Next line contains `N` integers representing the magical powers of the books separated by space. Output In a single line print \\"POSSIBLE\\" if the subset exists, otherwise print \\"IMPOSSIBLE\\". Example: Input 6 15 2 -1 3 4 1 6 Output POSSIBLE Setter: You","solution":"def is_subset_sum_possible(books, N, S): Determine if there exists a contiguous subset of books whose sum equals to S. :param books: List[int] - magical powers of the books :param N: int - number of books :param S: int - target sum :return: str - \\"POSSIBLE\\" if such subset exists, otherwise \\"IMPOSSIBLE\\" for start in range(N): current_sum = 0 for end in range(start, N): current_sum += books[end] if current_sum == S: return \\"POSSIBLE\\" return \\"IMPOSSIBLE\\" def read_input(): Reads the input from standard input. import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) S = int(data[1]) books = list(map(int, data[2:2+N])) return books, N, S if __name__ == \\"__main__\\": books, N, S = read_input() result = is_subset_sum_possible(books, N, S) print(result)"},{"question":"Leha and Nura have arrived at another luxurious restaurant, and again, they are ready to play a game while waiting for their dishes. This time, the game involves a set of m chocolates arranged in a straight line. Each chocolate has a unique sweetness level denoted by a positive integer. Nura has chosen a set of k chocolates from the line, but she keeps the selection secret. Leha\'s task is to find out the sweetness levels of any two chocolates that Nura has chosen. To help Leha, Nura allows him to perform a specific type of query up to 60 times. Each query consists of three indices i, j, and t (1 ≤ i, j, t ≤ m, i ≠ j ≠ t), and Leha asks whether the sweetness level of the chocolate at index t is strictly greater than the sum of the sweetness levels of the chocolates at indices i and j combined. Nura will reply \\"YES\\" or \\"NO\\" to each query. Leha needs to use these responses to identify two chocolates chosen by Nura based on their sweetness levels. # Input - The first line of input contains the integers m and k (2 ≤ k ≤ m ≤ 10^5), representing the total number of chocolates in the line and the number of chocolates that Nura chose, respectively. # Output If Leha decides to provide an answer, he should output the string \\"ANSWER x y\\" where x and y (1 ≤ x, y ≤ m, x ≠ y) are the indices of any two chocolates that Nura has chosen. # Interaction To help Leha, you can perform at most 60 queries. Each query should be printed on its own line in the format \\"QUERY i j t\\". After each query, you will receive a line \\"YES\\" or \\"NO\\" as a response from Nura. If you decide to provide an answer before using all 60 queries, print \\"ANSWER x y\\" and terminate your program. # Example Input ``` 4 2 QUERY 1 2 3 NO QUERY 2 3 4 YES ``` Output ``` ANSWER 2 3 ``` # Note In the provided example, there are four chocolates with indices from 1 to 4. Nura has chosen chocolates 2 and 3. Leha can deduce this by querying combinations and interpreting the \\"YES\\" or \\"NO\\" responses. By using the queries wisely, Leha can zero in on two indices that Nura might have chosen based on their combined sweetness levels.","solution":"def find_chocolates(m, k, ask): Finds two indices of chocolates chosen by Nura based on the sweetness levels. Parameters: m (int): Total number of chocolates. k (int): Number of chocolates chosen by Nura. ask (function): Function to ask the query \\"t > i + j\\". Returns: tuple: Indices of the two chosen chocolates. for i in range(1, m): for j in range(i + 1, m + 1): for t in range(1, m + 1): if t != i and t != j: response = ask(i, j, t) if response == \\"YES\\": return (i, j) return None"},{"question":"The city of Gridville has a grid with N x N blocks, where each block is either open (represented by 0) or blocked (represented by 1). The Gridville mayor wants to know the number of unique paths from the top-left block (0, 0) to the bottom-right block (N-1, N-1) that the citizens can take. They can only move right or down, and cannot pass through blocks that are blocked. Write a function that calculates the number of unique paths for each test case. If no such path exists, return 0. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains: - An integer N representing the size of the grid (N x N). - N lines, each containing N integers (0 or 1) separated by space, representing the grid. -----Output:----- For each test case, output the number of unique paths from the top-left block to the bottom-right block. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 20 - Each element of the grid G_{ij} is either 0 (open) or 1 (blocked). -----Sample Input:----- 2 3 0 0 0 0 1 0 0 0 0 2 0 1 0 0 -----Sample Output:----- 2 1 -----EXPLANATION:----- In the first test case, there are two unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second test case, only one path is possible: 1. Down -> Right","solution":"def unique_paths(grid): Calculate the number of unique paths from the top-left to the bottom-right in a grid. Only moves to the right and down are allowed, and cells with 1 are blocked. Args: grid (list of list of int): The N x N grid Returns: int: The number of unique paths N = len(grid) # If starting or ending cell is blocked, return 0 if grid[0][0] == 1 or grid[N-1][N-1] == 1: return 0 # Initialize a 2D dp array to store the number of ways to reach each cell dp = [[0] * N for _ in range(N)] dp[0][0] = 1 # Starting point for i in range(N): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 # No way to pass through a blocked cell else: if i > 0: dp[i][j] += dp[i-1][j] # Ways to reach from the cell above if j > 0: dp[i][j] += dp[i][j-1] # Ways to reach from the cell to the left return dp[N-1][N-1] def solve(T, test_cases): results = [] for case in test_cases: N = case[0] grid = case[1] results.append(unique_paths(grid)) return results"},{"question":"A company is planning to optimize their delivery routes. They have a network of n warehouses, described as an unweighted, connected undirected graph. Each warehouse is connected by a road to other warehouses. You must analyze the network and determine key strategic locations that will minimize the maximum delivery distance required between any two warehouses once certain warehouses are designated as main hubs. The main hubs will have direct routes added between each of them, thus reducing the delivery distance for all warehouses. -----Input----- The first line contains one integer n (2 le n le 10^5) — the number of warehouses. Next n - 1 lines describe the roads between the warehouses in form a_i, b_i (1 le a_i, b_i le n, a_i neq b_i). The last line contains one integer k (1 le k le n) — the number of warehouses to be designated as main hubs. -----Output----- Output the minimum value of the maximum delivery distance for any warehouse to a main hub after the new direct routes between the main hubs are added. -----Example----- Input 6 1 2 1 3 3 4 3 5 5 6 2 Output 2 -----Explanation----- In the example, the warehouses and roads form a tree structure: ``` 1 / 2 3 / 4 5 6 ``` Choose warehouses 1 and 3 as the main hubs. The direct routes between the hubs 1 and 3 will reduce the delivery distances. The maximum delivery distance from any warehouse to any hub is: - For warehouse 2 or 3: Distance to main hub 1 - For warehouse 4, 5, or 6: Distance to main hub 3 So the minimum value of the maximum delivery distance for any warehouse is 2, as it is the maximum distance needed for warehouse 6 to reach any designated hub. If there are multiple answers, output any.","solution":"import heapq from collections import deque, defaultdict def bfs_farthest_node(graph, start): Perform BFS to find the farthest node and its distance from the starting node. queue = deque([(start, 0)]) visited = set([start]) farthest_node = start max_dist = 0 while queue: node, dist = queue.popleft() if dist > max_dist: farthest_node = node max_dist = dist for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, dist + 1)) return farthest_node, max_dist def min_max_delivery_distance(n, roads, k): if k >= n: return 0 graph = defaultdict(list) for a, b in roads: graph[a].append(b) graph[b].append(a) # Find one endpoint of the diameter of the tree using BFS farthest_node, _ = bfs_farthest_node(graph, 1) # Find the other endpoint of the diameter other_endpoint, max_diameter = bfs_farthest_node(graph, farthest_node) # To minimize the max delivery distance, k must be evenly spaced along the tree\'s diameter if k == 1: return (max_diameter + 1) // 2 return (max_diameter + 1 - (k - 2)) // 2 # Function to process input and output def process_optimization(n, edges, k): return min_max_delivery_distance(n, edges, k)"},{"question":"Alice has a rectangular garden with dimensions `l` meters by `w` meters. She wants to surround her entire garden with a fence. Each meter of fencing costs `c` dollars. Determine the total cost Alice will incur to fence her garden. -----Input----- The input consists of three integers `l`, `w`, and `c` (1 leq l, w leq 1000, 1 leq c leq 100) — the length and width of the garden, and the cost per meter of fencing, respectively. -----Output----- Print a single integer — the total cost of the fencing. -----Examples----- Input 10 5 2 Output 60 Input 15 10 3 Output 150 Input 25 30 4 Output 440 -----Note----- In the first example, the perimeter of the garden is 2 times (10 + 5) = 30 meters. Since the cost of one meter of fencing is 2 dollars, the total cost will be 30 times 2 = 60 dollars. In the second example, the perimeter of the garden is 2 times (15 + 10) = 50 meters. Since the cost of one meter of fencing is 3 dollars, the total cost will be 50 times 3 = 150 dollars. In the third example, the perimeter of the garden is 2 times (25 + 30) = 110 meters. Since the cost of one meter of fencing is 4 dollars, the total cost will be 110 times 4 = 440 dollars.","solution":"def total_fencing_cost(l, w, c): Calculates the total cost of fencing Alice\'s garden. Parameters: l (int): The length of the garden in meters. w (int): The width of the garden in meters. c (int): The cost per meter of fencing in dollars. Returns: int: The total cost of the fencing in dollars. perimeter = 2 * (l + w) total_cost = perimeter * c return total_cost"},{"question":"Given an array of n integers, rearrange the elements of the array such that all even numbers appear on the left side and all odd numbers appear on the right side. Do this in linear time and in-place. Example 1: Input: Array: [1, 2, 3, 4, 5, 6] Output: [2, 4, 6, 1, 3, 5] Example 2: Input: Array: [12, 17, 70, 15, 22, 65, 21, 90] Output: [12, 70, 22, 90, 15, 65, 21, 17] Your Task: You need to complete the function rearrangeArray(), which takes an array of integers and its size as parameters and modifies the array in-place. The function should not return anything. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"def rearrangeArray(arr): Rearrange the elements of arr such that all even numbers appear on the left side and all odd numbers appear on the right side. This is done in linear time and in-place. Parameters: arr (list): The list of integers to rearrange. left = 0 # Initialize a pointer to the beginning of the array right = len(arr) - 1 # Initialize a pointer to the end of the array while left < right: if arr[left] % 2 == 0: # If the number at left pointer is even, move the pointer to right left += 1 elif arr[right] % 2 == 1: # If the number at right pointer is odd, move the pointer to left right -= 1 else: # If left is odd and right is even, swap them arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1"},{"question":"Implement a scheduling system for a set of tasks with dependencies. Write a program that performs the following operations: * addTask x y: add a task with ID x to the list of tasks. Task x depends on task y being completed first. * markComplete x: mark the task with ID x as completed. A task cannot be marked as completed unless all tasks it depends on have been completed. * getIncompleteTasks: return a list of all incomplete tasks sorted by their IDs. Constraints * The number of operations ≤ 100,000 * 0 ≤ task ID ≤ 100,000 * There will be no cycles in the dependency graph. * Task IDs will be unique. Input The input is given in the following format: n command1 command2 ... commandn In the first line, the number of operations n is given. In the following n lines, the above mentioned operations are given in the following format: * addTask x y * markComplete x * getIncompleteTasks Output For each getIncompleteTasks command, print all incomplete task IDs separated by a single space, in ascending order of their IDs. If no incomplete tasks remain, simply print \\"None\\". Example Input 8 addTask 1 0 addTask 2 1 addTask 3 1 getIncompleteTasks markComplete 1 getIncompleteTasks markComplete 2 getIncompleteTasks Output 1 2 3 2 3 3","solution":"class TaskScheduler: def __init__(self): self.tasks = {} self.completed = set() def addTask(self, x, y): if x not in self.tasks: self.tasks[x] = set() if y != 0: self.tasks[x].add(y) else: self.tasks[x] = set() def markComplete(self, x): # A task can be marked complete only if all its dependencies are completed if all(dep in self.completed for dep in self.tasks.get(x, [])): self.completed.add(x) def getIncompleteTasks(self): incomplete_tasks = sorted([task for task in self.tasks if task not in self.completed]) if incomplete_tasks: print(\\" \\".join(map(str, incomplete_tasks))) else: print(\\"None\\") def main(input_lines): n = int(input_lines[0]) scheduler = TaskScheduler() for i in range(1, n + 1): parts = input_lines[i].split() command = parts[0] if command == \\"addTask\\": x = int(parts[1]) y = int(parts[2]) scheduler.addTask(x, y) elif command == \\"markComplete\\": x = int(parts[1]) scheduler.markComplete(x) elif command == \\"getIncompleteTasks\\": scheduler.getIncompleteTasks() input_lines = [ \\"8\\", \\"addTask 1 0\\", \\"addTask 2 1\\", \\"addTask 3 1\\", \\"getIncompleteTasks\\", \\"markComplete 1\\", \\"getIncompleteTasks\\", \\"markComplete 2\\", \\"getIncompleteTasks\\", ] if __name__ == \\"__main__\\": main(input_lines)"},{"question":"The facility manager wants to create a rotation schedule for workers. Each worker should work at most \'K\' consecutive days to avoid exhaustion. Given a list of integers representing the consecutive working days each worker is initially scheduled, you need to adjust their schedules to ensure no worker works more than \'K\' consecutive days. The total number of working days should remain the same for each worker. -----Input----- The first line of the input contains an integer T, denoting the number of test cases. Each test case consists of two lines: - The first line contains two integers N and K, where N is the number of workers and K is the maximum number of consecutive days any worker can work. - The second line contains N space-separated integers representing the number of consecutive days each worker is initially scheduled. -----Output----- For each test case, output a single line with N space-separated integers, representing the adjusted schedule where no worker works more than K consecutive days. The total number of working days for each worker should remain the same. -----Constraints----- For Subtask 1: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10 - 1 ≤ K ≤ 5 - 1 ≤ initial schedule of any worker ≤ 10 For Subtask 2: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ K ≤ 10 - 1 ≤ initial schedule of any worker ≤ 100 -----Example----- Input: 2 3 2 5 3 2 2 1 4 6 Output: 2 2 1 1 1 1 1 1 1 -----Explanation----- Example case 1: In the first case, worker 1 was initially scheduled for 5 consecutive days, which needs to be split into chunks of 2, 2, and 1. Similarly, worker 2\'s 3 consecutive days are split into chunks of 2 and 1, and worker 3’s 2 consecutive days are already compliant. Example case 2: In the second case, both workers\' schedules are adjusted to work for a maximum of 1 day consecutively. Worker 1\'s 4 days are split into four 1\'s, and worker 2\'s 6 days are split into six 1\'s.","solution":"def adjust_schedule(t, test_cases): result = [] for i in range(t): N, K = test_cases[i][0] schedules = test_cases[i][1] adjusted = [] for days in schedules: while days > K: adjusted.append(K) days -= K adjusted.append(days) result.append(adjusted) return result # Reading input in the expected format def read_input(): t = int(input()) test_cases = [] for _ in range(t): N, K = map(int, input().split()) schedules = list(map(int, input().split())) test_cases.append(((N, K), schedules)) return t, test_cases # Printing output in the expected format def print_output(result): for res in result: print(\' \'.join(map(str, res))) if __name__ == \\"__main__\\": t, test_cases = read_input() result = adjust_schedule(t, test_cases) print_output(result)"},{"question":"You are given an array of integers and a target sum. Determine whether there is a pair of distinct indices (i, j) in the array such that the sum of the elements at these indices equals the target sum. Note that the pair (i, j) and (j, i) are considered the same and should only be counted once. -----Input----- The first line contains a single integer T, denoting the number of test cases. For each test case: The first line contains two space-separated integers N and M, where N is the number of elements in the array and M is the target sum. The second line contains N space-separated integers, representing the elements of the array. -----Output----- For each test case, output \\"YES\\" (without quotes) if there exists such a pair of indices, or \\"NO\\" (without quotes) otherwise. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 1000 - 1 ≤ A[i] ≤ 10^9 - 1 ≤ M ≤ 2 × 10^9 -----Example----- Input: 3 6 10 1 2 3 4 5 6 4 5 1 1 1 1 5 9 2 7 11 15 3 Output: YES NO YES -----Explanation----- Test case 1: The pair (4, 6) at indices (3, 4) sums up to 10. Test case 2: No matter which pair we choose, the sum cannot be 5. Test case 3: The pair (2, 7) at indices (0, 1) sums up to 9, and since (15, -6) is not possible, the answer is YES.","solution":"def has_pair_with_sum(arr, target): Determines if there exists a pair of distinct indices in arr such that their elements sum to target. seen = set() for num in arr: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" def process_test_cases(test_cases): Processes multiple test cases. results = [] for (N, M, array) in test_cases: results.append(has_pair_with_sum(array, M)) return results"},{"question":"Imagine you\'ve got a unique cooking agency called ChefMate. ChefMate ships customized meal kits with pre-measured ingredients to help users cook gourmet meals at home. Due to the nature of the service, each meal kit has a limited shelf life, and it is crucial to ensure that the oldest kits are shipped out first to prevent spoilage, following a strict rotation of inventory. You have a list of meal kits in your inventory, each with a unique identifier (ID) and a timestamp representing when it was added to the inventory. The IDs are composed of alphanumeric characters and the timestamps are provided in \\"YYYY-MM-DD\\" format. Your task is to help ChefMate design a system to maintain and track the order of shipment based on the shelf life of meal kits. You will receive multiple datasets of meal kits, and for each dataset, you need to output the sequence of meal kits to be shipped in the correct order, from oldest to newest. Input The input consists of multiple datasets. Each dataset starts with an integer N (1 ≤ N ≤ 100), representing the number of meal kits, followed by N lines each containing a unique meal kit ID and its timestamp. The datasets are separated by a line containing a single dash (\\"-\\"). Output For each dataset, output the sequence of meal kits IDs ordered from the oldest to the newest. Example Input 3 A124 2022-01-15 B567 2022-01-10 C890 2022-01-12 - 2 D345 2022-05-20 E678 2022-04-15 - Output B567 C890 A124 E678 D345","solution":"def sort_meal_kits(data): datasets = data.strip().split(\\"n-n\\") result = [] for dataset in datasets: lines = dataset.split(\\"n\\") n = int(lines[0]) kits = [] for line in lines[1:n + 1]: id_, date = line.split() kits.append((id_, date)) kits.sort(key=lambda x: x[1]) for kit in kits: result.append(kit[0]) return result"},{"question":"You are given a string and you need to find whether it is possible to replace at most one character to make it a palindrome. A string is defined as a palindrome if it reads the same backward as forward. Your task is to complete the function `canFormPalindrome()` which takes a single string as input and returns a boolean value indicating whether it is possible to make the string a palindrome by replacing at most one character. Example 1: Input: s = \\"abca\\" Output: True Explanation: By replacing \'b\' with \'c\', we get \\"acca\\" which is a palindrome. Example 2: Input: s = \\"abcdef\\" Output: False Explanation: We need to replace at least three characters to make it a palindrome, hence it is not possible within one replacement. Note: - The input string consists of lowercase English letters only. - The input string length is in the range [1, 10^5].","solution":"def canFormPalindrome(s): Check if a given string can be made into a palindrome by replacing at most one character. def is_palindrome_range(i, j): Helper function to check if a substring s[i:j+1] is a palindrome. return all(s[k] == s[j - k + i] for k in range(i, j + 1)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Try to ignore one character from either end return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 # String is already a palindrome return True"},{"question":"In a city with a grid of streets, there are R rows and C columns of intersections. Each intersection can either be open (denoted by \'.\') or closed (denoted by \'#\'). You need to find a path from the top-left intersection (0, 0) to the bottom-right intersection (R-1, C-1) such that: - You can only move right or down at each step. - You cannot pass through closed intersections (\'#\'). Determine the number of such paths. Since the number of paths can be large, return the result modulo 1,000,000,007. -----Constraints----- - All values in input are integers. - 1 leq R, C leq 1000 - The input grid will always have the first and the last intersections open. -----Input----- Input is given from Standard Input in the following format: - The first line contains two integers R and C, representing the number of rows and columns, respectively. - The next R lines each contain a string of length C consisting of \'.\' and \'#\', representing open and closed intersections. -----Output----- Print the number of valid paths from the top-left to the bottom-right intersection modulo 1,000,000,007. -----Sample Input----- 3 3 ... .#. ... -----Sample Output----- 2 Explanation: The valid paths from the top-left to the bottom-right intersection are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"MOD = 1_000_000_007 def number_of_paths(grid): R = len(grid) C = len(grid[0]) # Initialize a 2D list to store the number of ways to reach each cell dp = [[0] * C for _ in range(R)] # The starting cell has one way to be reached, i.e., starting from there dp[0][0] = 1 # Fill the dp array for i in range(R): for j in range(C): if grid[i][j] == \'.\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[-1][-1] def process_input(): import sys input = sys.stdin.read data = input().split() R = int(data[0]) C = int(data[1]) grid = [] index = 2 for i in range(R): grid.append(data[index + i]) result = number_of_paths(grid) print(result)"},{"question":"Tina enjoys exploring various subsequences within arrays. She is particularly interested in finding the length of the Longest Increasing Subsequence (LIS) in a given array. You are given an array of size N and a positive integer Q. Each Q query contains one integer K, and you need to determine if there exists a subsequence of length K that is strictly increasing. If such a subsequence exists, return \\"YES\\", otherwise return \\"NO\\". Input First line contains two positive integers N and Q separated by a space. Next line contains N integers separated by a space representing the array. Next Q lines contain one integer K each. Output For each query Q, print \\"YES\\" or \\"NO\\" on a new line. Constraints 1 ≤ N ≤ 200 1 ≤ Q ≤ 100 1 ≤ element of array ≤ 1000 1 ≤ K ≤ N SAMPLE INPUT 7 4 9 1 3 7 5 6 20 3 5 8 2 SAMPLE OUTPUT YES YES NO YES","solution":"def length_of_lis(arr): Function to find the length of the Longest Increasing Subsequence (LIS) in the given array. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis) def check_subsequence(N, Q, arr, queries): For each query, determine if there exists a subsequence of length K that is strictly increasing. Return a list of \\"YES\\" or \\"NO\\" for each query. results = [] lis_length = length_of_lis(arr) for k in queries: if k <= lis_length: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a rectangular grid of dimensions N x M where some cells are blocked and cannot be traversed. Your objective is to find out the number of ways to start from the top-left corner of the grid and reach the bottom-right corner by only moving right or down. Input: - The first line contains two integers N and M (1 ≤ N, M ≤ 1000) — the number of rows and columns in the grid. - The next N lines each contain M characters. A \'.\' character denotes an empty cell, and a \'#\' character denotes a blocked cell. Output: - Output a single integer — the number of ways to reach the bottom-right corner of the grid from the top-left corner. As the number of ways can be large, output the result modulo 10^9 + 7. Examples: Input: 3 3 ... .#. ... Output: 2 Input: 4 4 .... .#.. ..#. .... Output: 4","solution":"MOD = 10**9 + 7 def num_ways_to_reach_end(N, M, grid): dp = [[0] * M for _ in range(N)] if grid[0][0] == \'.\': dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[N-1][M-1]"},{"question":"Write a function that takes a string containing a list of space-separated integers and returns a string with only the prime numbers from the list, separated by commas. For example: ``` Input: \\"23 4 15 29 17 8\\" Output: \\"23,29,17\\" ``` Return the result as a single string. You can assume the input string will only contain valid integers and spaces, and will not be empty.","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def extract_primes(int_str): Takes a string containing a list of space-separated integers and returns a string of the prime numbers, separated by commas. integers = map(int, int_str.split()) primes = [str(num) for num in integers if is_prime(num)] return \',\'.join(primes)"},{"question":"A Fibonacci sequence is one where every number after the first two is the sum of the two preceding ones. Typically, it starts with `0` and `1`. The sequence often starts as `0, 1, 1, 2, 3, 5, 8, …`. Write a function `fibonacci(n)` that returns the `n`-th Fibonacci number where `n` is an integer provided as input. Your function should be optimized to run in O(n) time complexity. # Input - An integer `n` (0 ≤ n ≤ 50) # Output - The `n`-th Fibonacci number. # Example **Input:** ``` 7 ``` **Output:** ``` 13 ``` **Input:** ``` 10 ``` **Output:** ``` 55 ``` **Explanation:** The sequence up to the 7-th Fibonacci number is `0, 1, 1, 2, 3, 5, 8, 13`, so the 7-th Fibonacci number is `13`. For the input `10`, the sequence is `0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55`, so the 10-th Fibonacci number is `55`.","solution":"def fibonacci(n): Returns the n-th Fibonacci number using an iterative approach. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself). INPUT: - The first line contains the number of nodes, N, in the binary tree. - The second line contains the values of the nodes in level order traversal, where \\"null\\" denotes a missing child. - The third line contains the values of the two nodes p and q. OUTPUT: - Print a single integer representing the value of the LCA. CONSTRAINTS: - The number of nodes in the tree will be in the range [2, 1000]. - The value of the nodes will be unique and in the range [0, 100000]. - The two given nodes p and q are guaranteed to be present in the binary tree. SAMPLE INPUT: 7 3 5 1 6 2 0 8 null null 7 4 5 1 SAMPLE OUTPUT: 3 EXPLANATION: The binary tree given in the sample input is: 3 / 5 1 / / 6 2 0 8 / 7 4 The LCA of nodes 5 and 1 is 3.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode: Returns the LCA of the two given nodes p and q in the binary tree. if not root or root == p or root == q: return root left = lowestCommonAncestor(root.left, p, q) right = lowestCommonAncestor(root.right, p, q) if left and right: return root return left if left else right def buildTree(level_order): Build the binary tree from the level order traversal list and return the root. if not level_order: return None root = TreeNode(level_order[0]) queue = [root] i = 1 while queue and i < len(level_order): current = queue.pop(0) if level_order[i] != \\"null\\": current.left = TreeNode(level_order[i]) queue.append(current.left) i += 1 if i < len(level_order) and level_order[i] != \\"null\\": current.right = TreeNode(level_order[i]) queue.append(current.right) i += 1 return root def findNode(root, val): Find and return the node with the given value. if not root: return None if root.val == val: return root left = findNode(root.left, val) if left: return left return findNode(root.right, val) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) level_order = [int(x) if x != \\"null\\" else \\"null\\" for x in data[1:n+1]] p_val, q_val = int(data[n+1]), int(data[n+2]) root = buildTree(level_order) p = findNode(root, p_val) q = findNode(root, q_val) lca = lowestCommonAncestor(root, p, q) print(lca.val)"},{"question":"Suppose you are helping a farmer to plant trees in an orchard. The orchard is represented as a 2D grid of size n x m. Each cell can either be empty or contain an obstacle. You are given a list of tree saplings, each specifying the type of tree and its desired growth area in the shape of a rectangular sub-grid of specific dimensions. The task is to calculate the maximum number of different types of trees that can be planted in the orchard without overlapping and without placing any tree in a cell containing an obstacle or another tree. Input The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the dimensions of the orchard grid. The next n lines each contain m characters, where \'.\' represents an empty cell and \'#\' represents an obstacle. The following line contains an integer t (1 ≤ t ≤ 10) — the number of different types of trees. The next t lines each contain three integers w_i, h_i, and c_i (1 ≤ w_i, h_i ≤ min(n, m); 1 ≤ c_i ≤ 100), where w_i and h_i are the width and height of the growth area for the i-th type of tree, and c_i is the maximum number of trees of this type that the farmer wants to plant. Output Print the maximum number of different types of trees that can be planted in the orchard. Examples Input 5 5 ..... ..#.. ..... ..#.. ..... 3 2 2 1 3 1 2 1 2 1 Output 3 Note In the example above: - One possible way to plant the trees is: - Plant one 2x2 tree of the first type at any available position. - Plant two 3x1 trees of the second type at any available positions. - Plant one 1x2 tree of the third type at any available position. This will utilize the maximum number of different types of trees (3).","solution":"def can_place_tree(grid, x, y, w, h): for i in range(h): for j in range(w): if grid[x + i][y + j] != \'.\': return False return True def place_tree(grid, x, y, w, h): for i in range(h): for j in range(w): grid[x + i][y + j] = \'T\' def remove_tree(grid, x, y, w, h): for i in range(h): for j in range(w): grid[x + i][y + j] = \'.\' def max_trees_planted(n, m, orchard, tree_types): def dfs(grid, tree_types, idx, count): if idx == len(tree_types): return count w, h, c = tree_types[idx] max_count = count placements = [] for x in range(n - h + 1): for y in range(m - w + 1): if can_place_tree(grid, x, y, w, h): placements.append((x, y)) for x, y in placements: place_tree(grid, x, y, w, h) max_count = max(max_count, dfs(grid, tree_types, idx + 1, count + 1)) remove_tree(grid, x, y, w, h) max_count = max(max_count, dfs(grid, tree_types, idx + 1, count)) return max_count return dfs([list(row) for row in orchard], tree_types, 0, 0) def main(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) orchard = [lines[i + 1] for i in range(n)] t = int(lines[n + 1]) tree_types = [tuple(map(int, lines[n + 1 + i + 1].split())) for i in range(t)] return max_trees_planted(n, m, orchard, tree_types)"},{"question":"Given a Binary Tree, find the sum of all nodes on its longest path from root to leaf. If there are multiple paths with the same length, consider the path with the maximum sum. 1 / 2 3 / / 4 5 6 8 The longest path from the above tree is 1->2->4->8 and its sum is 15. Example 1: Input: 1 / 3 2 Output: 4 Explanation: The longest path length from node 1 to any leaf is 2. So the paths are 1->3 and 1->2. The sum of nodes in both paths is 4. Example 2: Input: 10 / 20 30 / 40 60 Output: 130 Explanation: The longest path length from node 10 to any leaf is 3. So the path is 10->20->60 and their sum is 90. Since there is no other path of the same length, the answer is 90. Your Task: Just complete the function sumOfLongestPath() that takes node as a parameter and returns the sum of the longest path. Expected Time Complexity: O(N) Expected Auxiliary Space: O(Height of the Tree) Constraints: 1 ≤ Number of nodes ≤ 10^5 0 ≤ Data of a node ≤ 10^5","solution":"class Node: def __init__(self, key): self.data = key self.left = None self.right = None def sumOfLongestPath(root): if not root: return 0 def longestPathSum(node): if not node: return (0, 0) if not node.left and not node.right: return (node.data, 1) left_sum, left_len = longestPathSum(node.left) right_sum, right_len = longestPathSum(node.right) if left_len > right_len: return (left_sum + node.data, left_len + 1) elif left_len < right_len: return (right_sum + node.data, right_len + 1) else: return (max(left_sum, right_sum) + node.data, left_len + 1) max_sum, _ = longestPathSum(root) return max_sum"},{"question":"You are given an array of integers and an integer K. Your task is to determine whether there is a contiguous subarray of size K that sums to a given value S. Example: Input: arr = [1, 2, 3, 4, 5], K = 3, S = 9 Output: True Explanation: The subarray [2, 3, 4] has a sum of 9, which is equal to S. Example: Input: arr = [1, 2, 3, 4, 5], K = 2, S = 8 Output: False Explanation: There is no subarray of size 2 that sums to 8. Your Task: Complete the function findSubarrayWithSumK() which takes an array of integers `arr`, an integer `K`, and an integer `S` as inputs and returns a boolean value indicating whether there is a contiguous subarray of size `K` that sums to `S`.","solution":"def findSubarrayWithSumK(arr, K, S): Determines if there is a contiguous subarray of size K that sums to S. Parameters: arr (list of int): List of integers. K (int): Size of the subarray. S (int): Target sum of the subarray. Returns: bool: True if such a subarray exists, otherwise False. n = len(arr) if n < K: return False current_sum = sum(arr[:K]) if current_sum == S: return True for i in range(n - K): current_sum = current_sum - arr[i] + arr[i + K] if current_sum == S: return True return False"},{"question":"In a small village, there is a unique vending machine that dispenses snacks based on combinations of coins. The vending machine accepts two types of coins, denoted as Coin A (worth 5 units) and Coin B (worth 7 units). The machine will only dispense a snack if the total value of the inserted coins exactly matches the price of the snack. You are tasked with developing a function to determine if it is possible to buy a snack with a given price using any combination of Coin A and Coin B. -----Input----- The input consists of a single integer P (1 leq P leq 100) — the price of the snack. -----Output----- Print \\"Yes\\" if it is possible to use any combination of Coin A and Coin B to exactly match the price P. Otherwise, print \\"No\\". -----Examples----- Input 10 Output Yes Input 3 Output No Input 35 Output Yes -----Note----- For the first example, you can use two Coin A (worth 5 each) to make the exact price of 10. For the second example, it is impossible to get the exact price of 3 using any combination of Coin A and Coin B, so the output is \\"No\\". For the third example, you can use five Coin A (each worth 5) to make the exact price of 35, or you can use a combination of Coin A and Coin B that sums to 35. Thus, the output is \\"Yes\\".","solution":"def can_buy_snack(price): Determines if it is possible to buy a snack of given price using combinations of Coin A (5 units) and Coin B (7 units). :param price: Integer representing the price of the snack. :return: \\"Yes\\" if possible to buy the snack with combinations of Coin A and B, else \\"No\\". for a in range(price // 5 + 1): for b in range(price // 7 + 1): if 5 * a + 7 * b == price: return \\"Yes\\" return \\"No\\""},{"question":"Alice is working with a grid-based game where she can move her character on a 2D grid from the top-left corner (1, 1) to the bottom-right corner (n, m). The grid has some obstacles, which she cannot pass through. Alice can only move right or down at any step. Alice wants to know the number of distinct paths she can take to reach her destination. Given the obstacles in the grid, can you help her find out the number of ways to move from the top-left corner to the bottom-right corner? Input: - The first line contains two integers, n and m (1 ≤ n, m ≤ 500), representing the number of rows and columns of the grid. - The next n lines contain m characters each, describing the grid. Each character is either \'.\' (an empty cell) or \'#\' (an obstacle). Output: - Print a single integer, the number of distinct paths from the top-left corner to the bottom-right corner, modulo 1000000007 (10^9 + 7). If the top-left or bottom-right cell is an obstacle, print 0. Example Input 3 3 ... .#. ... Output 2 Input 3 3 ... .#. ..# Output 0 Note: In the first example, Alice has two distinct paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, since the bottom-right corner is an obstacle, no path exists.","solution":"def num_paths_with_obstacles(grid): n = len(grid) m = len(grid[0]) MOD = 1000000007 if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[n-1][m-1] def number_of_paths(n, m, grid): grid = [list(row) for row in grid.split()] return num_paths_with_obstacles(grid)"},{"question":"Given a sequence S of n integers (a_{1}, a_{2}, ldots, a_{n}), Sergey wants to find the length of the longest increasing subsequence within S. However, Sergey has a unique restriction: his subsequence can only increase by exactly 1 at each step. That is, if S\' = (S\'_{1}, S\'_{2}, ldots, S\'_{m}) is a subsequence, then S\'_{i+1} = S\'_{i} + 1 for each 1 leq i < m. Write a program to determine the length of the longest increasing subsequence that Sergey can form under this condition. -----Input----- The first line contains a single integer n (1 leq n leq 100,000) — the length of the sequence. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the sequence. -----Output----- Print a single integer — the length of the longest increasing subsequence such that the difference between consecutive elements is exactly 1. -----Examples----- Input 8 1 2 3 4 5 3 4 2 Output 5 Input 10 10 9 8 7 6 5 4 3 2 1 Output 1 Input 5 3 10 11 12 4 Output 3 -----Note----- In the first example, the longest increasing subsequence where the difference between consecutive elements is exactly 1 is (1, 2, 3, 4, 5), which has a length of 5. In the second example, since the sequence is strictly decreasing, the longest subsequence with the required property is any single element, resulting in a length of 1. In the third example, one possible longest subsequence with the required property is (10, 11, 12), which has a length of 3.","solution":"def longest_increasing_consecutive_subsequence(n, sequence): if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if sequence[i] == sequence[i-1] + 1: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"A company offers tickets for an event, and each ticket has a unique number. They have a promotional campaign allowing users to enter a raffle by selecting a a pair of tickets from the ones they hold. A winning pair of tickets has a special property: the sum of the numbers on the two tickets must be even. Given a list of ticket numbers, determine how many distinct pairs of tickets have their sum as an even number. -----Constraints----- - 1 leq N leq 10^5 - 1 leq T_i leq 10^9 -----Input----- The input is given from Standard Input in the following format: N T_1 T_2 ... T_N -----Output----- Print one line containing the number of pairs of tickets that have an even sum. -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 4 The valid pairs are (2,4), (1,3), (1,5), (3,5). Total 4 pairs.","solution":"def count_even_sum_pairs(ticket_numbers): Counts the number of distinct pairs of tickets whose sum is an even number. Args: ticket_numbers (list): List of integers representing ticket numbers. Returns: int: Number of pairs with an even sum. odd_count = 0 even_count = 0 # Count how many tickets have odd and even numbers for ticket in ticket_numbers: if ticket % 2 == 0: even_count += 1 else: odd_count += 1 # Pairing any of the even numbers with each other will result in an even sum even_pairs = (even_count * (even_count - 1)) // 2 # Pairing any of the odd numbers with each other will also result in an even sum odd_pairs = (odd_count * (odd_count - 1)) // 2 return even_pairs + odd_pairs"},{"question":"Given an array of integers, determine if it contains all elements of a geometric progression (GP) or not. A sequence of numbers is a geometric progression if the ratio of successive terms is constant. In other words, for a sequence a_1, a_2, ..., a_n to be a geometric progression, there should exist a constant ratio r such that a_2 / a_1 = r, a_3 / a_2 = r, ..., a_n / a_{n-1} = r. Example 1: Input: [2, 4, 8, 16, 32] Output: 1 Explanation: The input array forms a GP with a ratio of 2. Example 2: Input: [1, 3, 9, 28] Output: 0 Explanation: The input array does not form a GP. Your Task: You don\'t need to read or print anything. Your task is to complete the function is_geometric_progression() which takes an array of integers as input parameter and returns 1 if the array forms a geometric progression, otherwise returns 0. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= length of array <= 1000 1 <= array elements <= 10^{6}","solution":"def is_geometric_progression(arr): Determines if the given array forms a geometric progression (GP). Parameters: arr (list of int): The array of integers to be checked Returns: int: 1 if the array forms a geometric progression, otherwise 0 n = len(arr) if n <= 1: return 1 arr.sort() if arr[0] == 0: for i in arr[1:]: if i != 0: return 0 return 1 ratio = arr[1] / arr[0] for i in range(1, n): if arr[i] / arr[i-1] != ratio: return 0 return 1"},{"question":"You are given a sequence of numbers where each number represents a type of item. You can merge two consecutive items of the same type into a single item of that type. Determine the minimum number of items left after performing any number of merge operations. Constraints * 1 ≦ N ≦ 10^5 * 1 ≦ Item type ≦ 10^9 Input The input is given from Standard Input in the following format: N Item_1 Item_2 … Item_N Output Output a single integer representing the minimum number of items left after performing any number of merge operations. Examples Input 7 2 2 3 3 1 1 1 Output 3 Input 6 4 4 4 4 4 4 Output 1 Input 5 1 2 3 4 5 Output 5","solution":"def min_items_after_merge(n, items): if n == 0: return 0 min_items = 1 # we always have at least one item for i in range(1, n): if items[i] != items[i - 1]: min_items += 1 return min_items"},{"question":"You have a sequence of n integers a_1, a_2, ldots, a_n. You want to perform the following operation exactly k times: - Choose an integer x such that 1 leq x leq n and a_x is the largest in the sequence. If there are multiple such integers, choose the smallest one. - Add 1 to a_x. After performing this operation exactly k times, you want to find the maximum value in the sequence. You are to answer t independent test cases. -----Input----- The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. Description of test cases follows. The first line of each test case contains two integers n and k (1 leq n, k leq 10^5) — the size of the sequence and the number of operations to perform. The second line of each test case contains n integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^9) — the initial sequence of integers. It is guaranteed that the total sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the maximum value in the sequence after performing k operations. -----Examples----- Input 3 5 3 1 2 4 5 3 4 7 4 4 4 4 3 2 10 1 10 Output 6 6 12 -----Note----- For the first test case: Initially, the sequence is [1, 2, 4, 5, 3]. - After the first operation, the largest value is 5 at index 4. The sequence becomes [1, 2, 4, 6, 3]. - After the second operation, the largest value is 6 at index 4. The sequence becomes [1, 2, 4, 7, 3]. - After the third operation, the largest value is 7 at index 4. The sequence becomes [1, 2, 4, 8, 3]. Thus, the maximum value after 3 operations is 8. For the second test case: Initially, the sequence is [4, 4, 4, 4]. - The sequence will remain the same value until after 7 steps the largest value will be 4+7 = 11, so the maximum value in the sequence is 11. For the third test case: Initially, the sequence is [10, 1, 10]. - After the first operation, the largest value is 10 at index 1. The sequence becomes [11, 1, 10]. - After the second operation, the largest value is 11 at index 1. The sequence becomes [12, 1, 10]. Thus, the maximum value after 2 operations is 12.","solution":"def maximize_sequence_value(t, test_cases): results = [] for case in test_cases: n, k, a = case max_value = max(a) results.append(max_value + k) return results"},{"question":"You are developing a tool for analyzing computer logs. A log entry consists of a timestamp and a message. Your tool needs to identify log entries that fall within a given time range and contain a specific keyword. Write a function that takes three arguments: 1. A list of log entries, where each entry is a tuple containing a timestamp (in the format \\"YYYY-MM-DD HH:MM:SS\\") and a message. 2. A start timestamp (in the format \\"YYYY-MM-DD HH:MM:SS\\") specifying the beginning of the time range. 3. An end timestamp (in the format \\"YYYY-MM-DD HH:MM:SS\\") specifying the end of the time range. 4. A keyword string that the message should contain. The function should return a list of log entries that fall within the specified time range and contain the keyword. The resulting list should be sorted by timestamp in ascending order. If no entries match the criteria, return an empty list.","solution":"from datetime import datetime def filter_logs(logs, start_time, end_time, keyword): Filters the log entries based on the given time range and keyword. Args: logs (list of tuples): List of log entries. Each entry is a tuple (timestamp, message). start_time (str): Start timestamp in \\"YYYY-MM-DD HH:MM:SS\\" format. end_time (str): End timestamp in \\"YYYY-MM-DD HH:MM:SS\\" format. keyword (str): Keyword to search for in log messages. Returns: list of tuples: Filtered and sorted list of log entries. start_time = datetime.strptime(start_time, \\"%Y-%m-%d %H:%M:%S\\") end_time = datetime.strptime(end_time, \\"%Y-%m-%d %H:%M:%S\\") filtered_logs = [ log for log in logs if start_time <= datetime.strptime(log[0], \\"%Y-%m-%d %H:%M:%S\\") <= end_time and keyword in log[1] ] return sorted(filtered_logs, key=lambda log: log[0])"},{"question":"The task is to implement a function that takes an integer array heights representing the height of buildings arranged in a row, and returns the maximum area of the rectangle that can be formed by any number of contiguous buildings between two indices. Buildings are represented by an array of positive integers, where each integer denotes the height of the building in the given row. Example 1: Input: heights = [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The largest rectangle can be formed by using the buildings of heights 5 and 6 (from index 2 to 3), which yields an area of 5 * 2 = 10. Another possible largest rectangle can be formed by the building of height 1 extending from index 0 to index 5, which yields the same area of 1 * 6 = 10. Example 2: Input: heights = [2, 4] Output: 4 Explanation: The largest rectangle can be formed by using the buildings of height 4 from index 1, which yields an area of 4 * 1 = 4. Your Task: The task is to complete the function largestRectangleArea() which takes an array of integers heights as input and returns the integer representing the maximum rectangular area that can be formed in the histogram. The function should use an efficient algorithm to achieve this result. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ heights.length ≤ 10^5 0 ≤ heights[i] ≤ 10^5","solution":"def largestRectangleArea(heights): Returns the maximum area of the rectangle that can be formed by any number of contiguous buildings. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"A group of friends is planning a road trip. They want to bring enough snacks for the journey, but they can only carry a limited amount of snacks in their car. They need to decide how many of each type of snack to take so that the total number of snacks is maximized without exceeding the car\'s capacity. You are given an integer `N` (the number of different types of snacks) and an integer `C` (the maximum capacity of the car in terms of number of snacks). Each type of snack has a weight, and you are given an array `W` of length `N`, where `W[i]` denotes the weight of the `i-th` type of snack. The friends can take any number of snacks of each type. Determine the maximum number of snacks that can be carried in the car without exceeding the given capacity `C`. ------ Input Format ------ - The first line of input contains a single integer `T` denoting the number of test cases. The description of `T` test cases follows. - The first line of each test case contains two space-separated integers `N` (the number of different types of snacks) and `C` (the maximum capacity of the car). - The second line of each test case contains `N` space-separated integers representing the array `W`. ------ Output Format ------ For each test case, output the maximum number of snacks that can be carried in the car without exceeding the capacity `C`. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ C ≤ 1,000 1 ≤ W[i] ≤ 100 ------ Sample Input 1 ------ 3 2 10 5 3 3 8 2 1 5 4 20 4 5 6 2 ------ Sample Output 1 ------ 5 8 10 ------ Explanation 1 ------ Test case 1: The friends can take 2 snacks of weight 5 each (total weight 10, total number of snacks 2), or they can take 3 snacks of weight 3 each (total weight 9, total number of snacks 3). The maximum number of snacks is 3. Test case 2: The friends can take 4 snacks of weight 2 each (total weight 8, total number of snacks 4). This gives the maximum number of snacks, which is 8. Test case 3: The friends can take 10 snacks of weight 2 each (total weight 20, total number of snacks 10). This gives the maximum number of snacks, which is 10.","solution":"def max_snacks_count(T, test_cases): Determine the maximum number of snacks that can be carried in the car without exceeding the given capacity. Parameters: T (int): Number of test cases test_cases (list of tuples): A list where each tuple represents a test case and contains: - N (int): number of different types of snacks - C (int): maximum capacity of the car - W (list of int): weights of each type of snack Returns: list of int: Maximum number of snacks that can be carried for each test case results = [] for test_case in test_cases: N, C, W = test_case min_weight = min(W) # Find the smallest snack max_snacks = C // min_weight # Max snacks we can carry by packing the lightest snack results.append(max_snacks) return results"},{"question":"Description: You are given two arrays, A and B, both containing N integers. You are asked to find a way to reorder array A such that the following condition is satisfied: for every i (0 ≤ i < N), if B[i] is even, then A[i] should be less than or equal to B[i]; if B[i] is odd, then A[i] should be greater than or equal to B[i]. Reorder array A to satisfy this condition, or determine if it is not possible. Input: The first line contains an integer T, the number of test cases. Each test case consists of three lines. The first line contains an integer N, the length of the arrays. The second line contains N integers, the elements of array A. The third line contains N integers, the elements of array B. Output: For each test case, output \\"YES\\" if it is possible to reorder array A to satisfy the condition, otherwise output \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 0 ≤ A[i], B[i] ≤ 10^9 SAMPLE INPUT 2 5 1 2 3 4 5 5 4 3 2 1 3 7 8 9 6 5 4 SAMPLE OUTPUT YES NO Explanation: For the first sample: Reorder A to [3, 2, 1, 4, 5]. Now check each condition: - B[0] is 5 (odd), so A[0] (3) is greater than or equal to B[0] (false). - B[1] is 4 (even), so A[1] (2) is less than or equal to B[1] (true). - B[2] is 3 (odd), so A[2] (1) is greater than or equal to B[2] (false). - B[3] is 2 (even), so A[3] (4) is less than or equal to B[3] (true). - B[4] is 1 (odd), so A[4] (5) is greater than or equal to B[4] (true). Thus, YES for the first sample. For the second sample: No permutation of A can satisfy the condition, thus the output is NO.","solution":"def can_reorder(A, B, N): A.sort() # Sort array A even_B = sorted([B[i] for i in range(N) if B[i] % 2 == 0]) odd_B = sorted([B[i] for i in range(N) if B[i] % 2 == 1]) even_A = [] odd_A = [] # Split A into values to match with even B and odd B for value in A: if len(even_A) < len(even_B): even_A.append(value) else: odd_A.append(value) # Verify the conditions for i in range(len(even_B)): if even_A[i] > even_B[i]: return \\"NO\\" for i in range(len(odd_B)): if odd_A[i] < odd_B[i]: return \\"NO\\" return \\"YES\\" def reorder_arrays(T, test_cases): results = [] for i in range(T): N, A, B = test_cases[i] result = can_reorder(A, B, N) results.append(result) return results"},{"question":"You are given a map consisting of M rows and N columns filled with characters representing different types of land and water. You need to calculate the number of distinct islands in the map. An island is defined as a group of \'L\' (land) connected horizontally or vertically (not diagonally). Your task is to write a function that takes the map as input and returns the number of distinct islands. Input Format: - The first line contains T, the number of test cases. - For each test case: - The first line contains two integers M and N, the number of rows and columns in the map. - The next M lines each contain N characters, representing the map where \'L\' stands for land and \'W\' stands for water. Output Format: - For each test case, output a single integer, the number of distinct islands in the map. Constraints: - 1 <= T <= 100 - 1 <= M, N <= 1000 - Each character in the map is either \'L\' or \'W\' Example Input: 2 4 5 LLWWL LWLWL WWWLL LLLLW 3 3 LLW LWL WLL Example Output: 3 2 Explanation: For the first test case, the distinct islands are: 1. The first island consisting of the top left \'L\' and the \'L\' directly below it. 2. The second island consisting of the \'L\' at the first row and fifth column. 3. The third island consisting of the block from second to fourth row and fourth to fifth column. In the second test case, the distinct islands are: 1. The first island consisting of all the \'L\' characters in the first two rows. 2. The second island is the \'L\' character at the bottom right corner.","solution":"def num_islands(map_data, M, N): Returns the number of distinct islands in the given map. def dfs(map_data, x, y): if x < 0 or x >= M or y < 0 or y >= N or map_data[x][y] == \'W\': return map_data[x][y] = \'W\' # Mark current cell as visited dfs(map_data, x + 1, y) dfs(map_data, x - 1, y) dfs(map_data, x, y + 1) dfs(map_data, x, y - 1) island_count = 0 for i in range(M): for j in range(N): if map_data[i][j] == \'L\': island_count += 1 dfs(map_data, i, j) return island_count def count_islands(T, test_cases): results = [] for case in test_cases: M, N, map_data = case results.append(num_islands(map_data, M, N)) return results"},{"question":"Given an array of integers, you need to identify the largest subset such that the sum of no two elements in the subset is divisible by a given integer k. Implement a function that takes in the array and the integer k, and returns the size of the largest subset. # Input - The first line contains an integer T, the number of test cases. - For each test case, the first line contains two integers n and k - the length of the array and the integer k. - The second line contains n space-separated integers representing the elements of the array. # Output - For each test case, print the size of the largest subset where the sum of no two elements is divisible by k. # Constraints - 1 leq T leq 10 - 1 leq n leq 10^5 - 1 leq k leq 100 - 1 leq text{array elements} leq 10^9 # Sample Input ``` 2 4 3 1 7 2 4 4 4 19 10 12 10 ``` # Sample Output ``` 3 3 ``` # Explanation For the first test case: - The subset {1, 7, 4} is the largest possible subset where the sums of any two elements are not divisible by 3. - The sizes of such subsets are 3. For the second test case: - The subset {19, 10} or {19, 12}, or any other combination that fits the criteria, each has the size 3. The elements 10 and 10 cannot be in the subset together as their sum is divisible by 4.","solution":"def largest_non_divisible_subset_length(n, k, arr): remainder_count = [0] * k for num in arr: remainder_count[num % k] += 1 subset_size = min(remainder_count[0], 1) # Only one element with remainder 0 can be included # Loop through each remainder pair for i in range(1, (k // 2) + 1): if i != k - i: subset_size += max(remainder_count[i], remainder_count[k - i]) else: subset_size += min(remainder_count[i], 1) return subset_size"},{"question":"You are given an array with n integers. You need to find the smallest absolute difference between any two elements in the array and print that difference. Input The first line contains a single integer n (2 ≤ n ≤ 2·10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9) — the elements of the array. Output Print a single integer — the smallest absolute difference between any two elements in the array. Examples Input 5 1 3 4 9 10 Output 1 Input 7 -5 -2 0 3 6 12 15 Output 2 Note In the first example, the smallest absolute difference is 1 (between 3 and 4). In the second example, the smallest absolute difference is 2 (between -5 and -3, or between 3 and 5).","solution":"def smallest_absolute_difference(arr): Returns the smallest absolute difference between any two elements in the array. if len(arr) < 2: return 0 arr.sort() min_diff = float(\'inf\') for i in range(1, len(arr)): diff = abs(arr[i] - arr[i - 1]) if diff < min_diff: min_diff = diff return min_diff"},{"question":"Write a function, `multiply_elements`, that takes a list of numbers as input and returns the product of all elements. However, here is the twist: if the list contains any zeros, the function should return the sum of all elements instead. ```python def multiply_elements(lst): # Your code here ``` Examples: ```python multiply_elements([1, 2, 3, 4]) # returns 24 (1*2*3*4) multiply_elements([0, 1, 2, 3]) # returns 6 (0+1+2+3) multiply_elements([5, -1, 2, -4]) # returns 40 (5*-1*2*-4) multiply_elements([0, 0, 0]) # returns 0 (0+0+0) ``` Notes: - You can assume the list will not be empty. - If the product is a float, return it as is. - Ensure to handle both positive and negative numbers correctly.","solution":"def multiply_elements(lst): Multiplies elements in the list. If a zero is in the list, return the sum of the elements instead. if 0 in lst: return sum(lst) else: product = 1 for num in lst: product *= num return product"},{"question":"Your task is to implement an LRU (Least Recently Used) cache. Write a program which performs the following operations: * `set x y`: set a value y for key x in the cache. * `get x`: get the value of key x from the cache. * `delete x`: delete the key x from the cache. The LRU cache eviction policy should be implemented to remove the least recently used item when the cache exceeds its capacity. Notes Template in Python --> `class LRUCache:` ` def __init__(self, capacity: int):` ` # initializes the LRU cache with a given capacity` ` pass` ` def get(self, key: int) -> int:` ` # returns the value for the given key if it exists, otherwise return -1` ` pass` ` def set(self, key: int, value: int) -> None:` ` # sets the value for the key if the cache has space, otherwise evict the least recently used key` ` pass` ` def delete(self, key: int) -> None:` ` # deletes the key if it exists in the cache` ` pass` Constraints * The number of operations ≤ 100,000 * The cache capacity is always greater than 0. * 0 ≤ value of a key, value ≤ 109 Input The input is given in the following format: * First, the cache capacity c is given. * The second line contains the number of operations n. * The following n lines contain the operations: * `set x y` * `get x` * `delete x` Output * For each `get x` operation, print the value of x if it exists, otherwise print -1. Examples Input 3 6 set 1 10 set 2 20 set 3 30 get 1 set 4 40 get 2 Output 10 -1 Input 2 5 set 1 5 set 2 10 get 1 set 3 15 get 2 Output 5 -1","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = OrderedDict() def get(self, key: int) -> int: if key in self.cache: value = self.cache.pop(key) # move to the front (most recently used) self.cache[key] = value return value else: return -1 def set(self, key: int, value: int) -> None: if key in self.cache: # removing the old value self.cache.pop(key) elif len(self.cache) >= self.capacity: # remove the oldest item self.cache.popitem(last=False) # insert the new item as the most recently used self.cache[key] = value def delete(self, key: int) -> None: if key in self.cache: self.cache.pop(key)"},{"question":"Given a non-empty string str containing only parentheses characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', return true if the given string is balanced, else return false. Example 1: Input: str = \\"({[]})\\" Output: 1 Explanation: The sequence is balanced as every opening bracket has a corresponding closing bracket in the correct order. Example 2: Input: str = \\"([)]\\" Output: 0 Explanation: The sequence is not balanced as the closing brackets are not in the correct order. Your Task: Complete the function isBalanced() which takes a string str as input parameter and returns 1 if str is balanced and returns 0 otherwise. Expected Time Complexity: O(|s|) Expected Auxiliary Space: O(|s|) Constraints: 1 <= T <= 50 1 <= Length of str <= 10000","solution":"def isBalanced(str): Returns 1 if the input string str with parentheses is balanced, else returns 0. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in str: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket: if not stack or stack.pop() != matching_bracket[char]: return 0 return 1 if not stack else 0"},{"question":"Create a function that takes a list of integers and returns `true` if all the numbers in the list are unique, or `false` if there are any duplicates. About uniqueness A list of numbers is considered unique if no two numbers in the list are the same. - You can check this by comparing each number in the list with every other number. - For an optimized solution, consider using data structures that can efficiently handle uniqueness checks. For example, the list `[1, 2, 3]` is unique because there are no repeated numbers. The list `[1, 2, 2]` is not unique because the number `2` appears more than once. Note: The list can be empty, and an empty list is considered unique.","solution":"def all_unique(numbers): Returns True if all numbers in the list are unique, otherwise False. return len(numbers) == len(set(numbers))"},{"question":"A classroom has N students, and their test scores need to be analyzed to determine their rankings. You need to write a program to help the teacher with this task. The students\' scores are given, and the task is to output the ranks of each student based on their scores in descending order. If two students have the same score, they should have the same rank, and the next higher rank should be skipped as necessary. ----- Input: ----- - First line will contain an integer N, the number of students. - The second line contains N integers representing the scores of the students. ----- Output: ----- Output a single line containing N integers, where the i-th integer represents the rank of the i-th student. ----- Constraints ----- - 1 leq N leq 100 - 0 leq score leq 100 ----- Sample Input: ----- 5 50 80 80 60 70 ----- Sample Output: ----- 4 1 1 3 2 ----- Explanation: ----- - The student with score 80 has the highest rank (rank 1). - There are two students with score 80, so they share rank 1. - The student with score 70 has rank 2. - The student with score 60 has rank 3. - The student with score 50 has rank 4.","solution":"def calculate_ranks(scores): Returns the ranks of the students based on their scores in descending order. sorted_scores = sorted(((score, i) for i, score in enumerate(scores)), reverse=True) ranks = [0] * len(scores) rank = 1 for i, (score, idx) in enumerate(sorted_scores): if i > 0 and score != sorted_scores[i - 1][0]: rank = i + 1 ranks[idx] = rank return ranks"},{"question":"Sarah enjoys collecting rare coins, and she keeps them in a special box. She has a friend, Tom, who wants to surprise her by giving her exactly the same value of coins that she already has in her collection. Tom can pick from any number of coins from a given list of coin values to match the total value Sarah has. If he manages to match the exact value, Sarah will be very happy and say \\"Matched\\", otherwise, she will be disappointed and say \\"Not Matched\\". Can you help Tom figure out the right combination of coins? NOTE: Tom can use each coin value from the list as many times as needed. SAMPLE INPUT 6 3 7 1 5 4 9 4 11 15 8 21 SAMPLE OUTPUT Matched Not Matched Matched Matched","solution":"def can_match_total(target, coins): Determines if we can match the target sum using the given coin values. coins: List of integers indicating coin values target: Integer indicating the target sum dp = [False] * (target + 1) dp[0] = True for i in range(1, target + 1): for coin in coins: if i >= coin and dp[i - coin]: dp[i] = True break return \\"Matched\\" if dp[target] else \\"Not Matched\\" # Example usage: # Provided list of coins coins = [3, 7, 1, 5, 4, 9] # Provided targets targets = [11, 15, 8, 21] # Determine if each target can be matched results = [can_match_total(target, coins) for target in targets] results # Output should be [\'Matched\', \'Not Matched\', \'Matched\', \'Matched\']"},{"question":"Write a function that takes a list of integers and returns the sum of the elements that are multiples of 3. SAMPLE INPUT 2 4 3 6 8 10 5 7 14 21 28 35 SAMPLE OUTPUT 9 21 Explanation Number of test cases = 2 1st test case, number of elements = 4 Multiples of 3 are 3 and 6, sum = 9 2nd test case, number of elements = 5 Only multiple of 3 is 21, sum = 21","solution":"def sum_of_multiples_of_3(lst): Returns the sum of the elements in the list that are multiples of 3. return sum(x for x in lst if x % 3 == 0) def process_input(test_cases): Processes the input to calculate the sum of multiples of 3 for each test case. Parameters: test_cases (list of list of int): A list containing the test cases, where each test case is a list of integers. Returns: list of int: A list of results for each test case. results = [] for test_case in test_cases: results.append(sum_of_multiples_of_3(test_case)) return results"},{"question":"You are given a list of integers and you need to divide this list into two subsets such that the difference between the sum of the elements in the two subsets is minimized. Write a function `min_subset_diff` that accepts a list of integers as input and returns an integer representing the minimum possible difference between the sums of the two subsets. # Input - A single list of integers, `arr` (1 ≤ len(arr) ≤ 20, -100 ≤ arr[i] ≤ 100), representing the elements of the array. # Output - An integer representing the minimum difference between the sums of the two subsets. # Example ```python def min_subset_diff(arr): # Implement your solution here pass # Example 1: print(min_subset_diff([1, 6, 11, 5])) # Output: 1 # Example 2: print(min_subset_diff([1, 2, 3, 9])) # Output: 3 ``` # Explanation In the first example: - You can divide the array into subsets {1, 5, 6} and {11}, with sums 12 and 11. The absolute difference is |12-11| = 1, which is the minimum possible. In the second example: - You can divide the array into subsets {1, 2, 3} and {9}, with sums 6 and 9. The absolute difference is |6-9| = 3, which is the minimum possible.","solution":"def min_subset_diff(arr): Returns the minimum possible difference between the sums of the two subsets. total_sum = sum(arr) n = len(arr) dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): dp[i][j] = dp[i - 1][j] if arr[i - 1] <= j: dp[i][j] = dp[i][j] or dp[i - 1][j - arr[i - 1]] for j in range(total_sum // 2, -1, -1): if dp[n][j]: return total_sum - 2 * j return 0"},{"question":"You have to write a function that determines the status of a university application based on the score: ```python def application_status(score): pass ``` If the score is (integer) 90 or above, return \\"Accepted with a scholarship\\". If the score is between 75 and 89 (inclusive), return \\"Accepted\\". If the score is between 50 and 74 (inclusive), return \\"Waitlisted\\". If the score is below 50, return \\"Rejected\\".","solution":"def application_status(score): Determines the status of a university application based on the score. Parameters: score (int): The score of the applicant. Returns: str: The application status. if score >= 90: return \\"Accepted with a scholarship\\" elif 75 <= score <= 89: return \\"Accepted\\" elif 50 <= score <= 74: return \\"Waitlisted\\" else: return \\"Rejected\\""},{"question":"You are playing an adventure game that involves finding a hidden treasure in a forest. The forest can be represented as a 2D grid of cells, each containing either a tree (\'T\'), an empty space (\'.\'), or the treasure (\'X\'). You start at the top-left corner of the grid and can move one cell at a time to the right, left, up, or down. Determine if you can reach the treasure. ---Input--- The first line contains two integers, n and m, representing the number of rows and columns in the grid (1 ≤ n, m ≤ 500). The next n lines each contain m characters (\'T\', \'.\', or \'X\') representing the grid. ---Output--- Output \\"YES\\" if there is a path from the top-left corner to the treasure, otherwise output \\"NO\\". ---Examples--- Sample Input 1: 4 4 .... T.TT ..T. ...X Sample Output 1: YES Sample Input 2: 4 4 .... TTTT ...T ...X Sample Output 2: NO","solution":"def can_reach_treasure(n, m, grid): Determines if there is a path from the top-left corner to the treasure (X) in the grid. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: List of strings representing the grid :return: \\"YES\\" if there is a path from the top-left corner to the treasure, otherwise \\"NO\\" from collections import deque # Directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_within_bounds(x, y): return 0 <= x < n and 0 <= y < m def is_empty_or_treasure(x, y): return grid[x][y] == \'.\' or grid[x][y] == \'X\' # BFS to find path from (0, 0) to \'X\' queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if grid[x][y] == \'X\': return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_within_bounds(nx, ny) and is_empty_or_treasure(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" # Use this to verify function manually # n, m = 4, 4 # grid = [ # \\"....\\", # \\"T.TT\\", # \\"..T.\\", # \\"...X\\" # ] # print(can_reach_treasure(n, m, grid)) # Should return \\"YES\\""},{"question":"You are tasked with creating a safe communication network for a group of secret agents. Each agent can securely communicate with others through a direct communication link represented as an undirected and weighted edge between two vertices in a graph. The vertices represent agents, and the edges represent secure communication links. You need to design a program that finds the minimum cost to connect all agents such that every agent can communicate with every other agent either directly or indirectly. The solution should use a Minimum Spanning Tree (MST) approach. -----Input----- The first line contains two integers N and M (2 leq N leq 100000, 1 leq M leq 200000), representing the number of agents and the number of communication links, respectively. The following M lines each contain three integers u, v, and w (1 leq u, v leq N, 1 leq w leq 1000000), representing a communication link between agents u and v with a cost w. Multiple links (with different or same costs) may exist between any two agents. -----Output----- Output a single integer, the minimum cost to enable communication between all agents. If it\'s impossible to connect all agents, output -1. -----Examples----- Sample Input: 4 5 1 2 1 1 3 4 2 3 2 3 4 3 2 4 5 Sample Output: 6 Sample Input: 4 2 1 2 1 3 4 2 Sample Output: -1 Note: In the second example, it\'s impossible to connect all agents because there is no link connecting the disjoint sets {1, 2} and {3, 4}.","solution":"def find(parent, x): if parent[x] != x: parent[x] = find(parent, parent[x]) return parent[x] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def minimum_cost_to_connect_agents(N, M, connections): edges = [] for u, v, w in connections: edges.append((w, u, v)) edges.sort() parent = list(range(N + 1)) rank = [0] * (N + 1) mst_cost = 0 edges_used = 0 for w, u, v in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += w edges_used += 1 if edges_used == N - 1: break if edges_used == N - 1: return mst_cost else: return -1"},{"question":"A common string manipulation technique involves determining if a string can be rearranged to form a palindrome. A palindrome is a string that reads the same forwards and backwards. Write a method that takes a string as input and checks whether any permutation (rearrangement) of the characters in the string can form a palindrome. For example: can_form_palindrome(\\"civic\\") = true (because \\"civic\\" itself is a palindrome) can_form_palindrome(\\"ivicc\\") = true (because \\"civic\\" is a permutation) can_form_palindrome(\\"hello\\") = false (no permutation can form a palindrome) can_form_palindrome(\\"aabb\\") = true (because \\"abba\\" is a permutation) Your method should return a boolean value indicating whether a palindrome is possible with any permutation of the given string. Good luck!","solution":"def can_form_palindrome(s): Returns True if any permutation of the string s can form a palindrome, False otherwise. from collections import Counter count_chars = Counter(s) odd_count = sum(1 for count in count_chars.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Your task is to write a program that helps to arrange the elements of an array in ascending order using the Bubble Sort algorithm. Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. -----Input----- Input consists of two lines: - The first line contains an integer n (1 leq n leq 1000), the number of elements in the array. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 leq a_i leq 10^6), the elements of the array. -----Output----- Output the sorted array in a single line, with the elements separated by a space. -----Examples----- Sample Input 1: 5 64 34 25 12 22 Sample Output 1: 12 22 25 34 64 Sample Input 2: 4 4 3 2 1 Sample Output 2: 1 2 3 4","solution":"def bubble_sort(arr): Sorts an array using the Bubble Sort algorithm. Parameters: - arr: list of integers Returns: - Sorted list of integers n = len(arr) for i in range(n): # Last i elements are already in place for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr def sort_input(n, elements): Sorts the elements of the array using bubble sort. Parameters: - n: int, number of elements in the array - elements: list of integers, the elements of the array Returns: - List of sorted elements return bubble_sort(elements)"},{"question":"In a grocery store, items are sold in different units such as kilograms, liters, and pieces. The store tracks the pricing of each item category separately. Pricing is categorized as: CHEAP, if the price is less than 20 units. AFFORDABLE, if the price is greater than or equal to 20 units and less than 50 units. EXPENSIVE if the price is greater than or equal to 50 units. Given the price of an item, determine whether it is CHEAP, AFFORDABLE, or EXPENSIVE. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of a single integer P — the price of the item. ------ Output Format ------ For each test case, output on a new line whether the item is CHEAP, AFFORDABLE, or EXPENSIVE. You may print each character in lowercase or uppercase. For example, CHEAP, cheap, Cheap, and cHEAP are all identical. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ P ≤ 100 ----- Sample Input 1 ------ 3 15 45 60 ----- Sample Output 1 ------ CHEAP AFFORDABLE EXPENSIVE ----- Explanation 1 ------ Test case 1: The price of the item is less than 20. Thus, the item is CHEAP. Test case 2: The price of the item is greater than or equal to 20 and less than 50. Thus, the item is AFFORDABLE. Test case 3: The price of the item is greater than or equal to 50. Thus, the item is EXPENSIVE.","solution":"def categorize_price(T, prices): Given the number of test cases T and a list of prices, returns a list of categories (CHEAP, AFFORDABLE, EXPENSIVE) for each price. categories = [] for price in prices: if price < 20: categories.append(\\"CHEAP\\") elif price < 50: categories.append(\\"AFFORDABLE\\") else: categories.append(\\"EXPENSIVE\\") return categories"},{"question":"You are given an array of integers representing the heights of buildings on a street, where each height[i] represents the height of the ith building. Geek wants to know how many buildings have a direct view of sunlight when the sun is setting from the right. A building has a direct view of the sunlight if it is taller than all the buildings to its right. Write a function countBuildingsWithSunlight that takes an integer array height as input and returns the number of buildings with a direct view of the sunset. Example 1: Input: height = [3, 7, 8, 3, 6, 1] Output: 3 Explanation: The buildings with heights 8, 6, and 1 have a direct view of the sunset. Example 2: Input: height = [1, 2, 3, 4] Output: 1 Explanation: Only the building with height 4 has a direct view of the sunset. Constraints: 1 <= height.length <= 10^5 0 <= height[i] <= 10^9 Your Task: You don\'t need to read input or print anything. Your task is to complete the function countBuildingsWithSunlight() which takes the array height as input and returns the number of buildings with a direct view of the sunset. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1)","solution":"def countBuildingsWithSunlight(height): Returns the number of buildings that have a direct view of the sunset when the sun is setting from the right. if not height: return 0 count = 1 # The rightmost building always has a direct view of the sunset. tallest = height[-1] # Iterate from the second to last building to the first. for i in range(len(height) - 2, -1, -1): if height[i] > tallest: count += 1 tallest = height[i] return count"},{"question":"You are given a 2D grid with N rows and M columns. Each cell in the grid contains a positive integer, representing the elevation at that point. You need to process Q queries. Each query will either update the elevation of a particular cell or ask you to find the minimum or maximum elevation within a given subgrid. The types of queries are as follows: 1) U x y v: Update the elevation of the cell at row x and column y to v. 2) Min x1 y1 x2 y2: Report the minimum elevation within the subgrid from (x1, y1) to (x2, y2), inclusive. 3) Max x1 y1 x2 y2: Report the maximum elevation within the subgrid from (x1, y1) to (x2, y2), inclusive. Write a program to solve these queries efficiently. -----Input----- The first line of the input contains two integers, N and M, denoting the number of rows and columns in the grid, respectively. The next N lines each contain M space-separated integers, representing the elevation values of the grid. The next line contains an integer Q, denoting the number of queries. The next Q lines each contain a query in one of the three formats mentioned above. -----Output----- For each query of type \\"Min\\" or \\"Max\\", print the required output on a new line. -----Constraints----- - 1 ≤ N, M ≤ 1000 - 1 ≤ Elevation values ≤ 10^9 - 1 ≤ Q ≤ 10000 - 1 ≤ x, y ≤ N, M - 1 ≤ x1 ≤ x2 ≤ N - 1 ≤ y1 ≤ y2 ≤ M -----Example----- Input: 3 3 5 8 6 3 2 7 9 4 1 6 Min 1 1 2 2 Max 2 2 3 3 U 2 2 10 Min 1 1 2 2 Max 1 1 3 3 Min 2 2 3 3 Output: 2 7 3 10 1","solution":"class ElevationGrid: def __init__(self, grid): self.grid = grid def update(self, x, y, v): self.grid[x - 1][y - 1] = v def find_min(self, x1, y1, x2, y2): min_val = float(\'inf\') for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): min_val = min(min_val, self.grid[i][j]) return min_val def find_max(self, x1, y1, x2, y2): max_val = float(\'-inf\') for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): max_val = max(max_val, self.grid[i][j]) return max_val def process_queries(n, m, elevations, q, queries): grid = ElevationGrid(elevations) results = [] for query in queries: parts = query.split() if parts[0] == \'U\': x, y, v = map(int, parts[1:]) grid.update(x, y, v) elif parts[0] == \'Min\': x1, y1, x2, y2 = map(int, parts[1:]) results.append(grid.find_min(x1, y1, x2, y2)) elif parts[0] == \'Max\': x1, y1, x2, y2 = map(int, parts[1:]) results.append(grid.find_max(x1, y1, x2, y2)) return results # Example usage: n, m = 3, 3 elevations = [ [5, 8, 6], [3, 2, 7], [9, 4, 1] ] q = 6 queries = [ \\"Min 1 1 2 2\\", \\"Max 2 2 3 3\\", \\"U 2 2 10\\", \\"Min 1 1 2 2\\", \\"Max 1 1 3 3\\", \\"Min 2 2 3 3\\" ] results = process_queries(n, m, elevations, q, queries) for result in results: print(result)"},{"question":"Write a function that takes a list of integers and an integer k as input. The function should return true if the list contains a continuous subarray of size at least 2 whose elements sum up to a multiple of k, and false otherwise. Examples: Input: [23, 2, 4, 6, 7], k = 6 Output: true Explanation: [2, 4] is a continuous subarray of size 2 and sum is 6, which is a multiple of 6. Input: [23, 2, 6, 4, 7], k = 6 Output: true Explanation: [23, 2, 6, 4, 7] is an entire continuous subarray of size 5 and sum is 42, which is a multiple of 6. Input: [23, 2, 6, 4, 7], k = 13 Output: false Notes: 1. The input list can contain both positive and negative integers. 2. The value of k can be zero.","solution":"def checkSubarraySum(nums, k): Check if the list has a continuous subarray of size at least 2 whose sum is a multiple of k. Args: nums: List[int] - List of integers. k: int - The integer k. Returns: bool - True if there exists a subarray, False otherwise. if not nums or len(nums) < 2: return False cum_sum = 0 mod_dict = {0: -1} # Initialize with 0: -1 to handle the subarray starting from index 0 for i in range(len(nums)): cum_sum += nums[i] mod = cum_sum % k if k != 0 else cum_sum if mod in mod_dict: if i - mod_dict[mod] > 1: # Ensure subarray size is at least 2 return True else: mod_dict[mod] = i # Store the first occurrence of the mod value return False"},{"question":"You are given a string S and a list of words L. The goal is to find all starting indices of substrings in S that are concatenation of all the words from L exactly once without overlapping. Each word in L has the same length. Input Format: The first line contains the string S. The second line contains the list of words L separated by space. Constraints: 1 ≤ len(S) ≤ 10^4 1 ≤ len(L) ≤ 10^3 1 ≤ len(words in L) ≤ 10 All characters in S and words in L are lowercase English letters. Output Format: Output the list of starting indices in ascending order. If there are no such substrings, output [-1]. Sample Input: barfoothefoobarman foo bar Sample Output: [0, 9] Explanation: The concatenation of \\"foo\\" and \\"bar\\" is found starting at index 0 and index 9 in S.","solution":"def find_substring_indices(S, L): from collections import Counter if not S or not L or not L[0]: return [-1] word_length = len(L[0]) num_words = len(L) concatenate_length = word_length * num_words words_counter = Counter(L) result_indices = [] for i in range(word_length): left = i right = i current_counter = Counter() while right + word_length <= len(S): word = S[right:right + word_length] right += word_length if word in words_counter: current_counter[word] += 1 while current_counter[word] > words_counter[word]: left_word = S[left:left + word_length] current_counter[left_word] -= 1 left += word_length if right - left == concatenate_length: result_indices.append(left) else: current_counter.clear() left = right return result_indices if result_indices else [-1]"},{"question":"A board game tournament is being held, where multiple players compete over several rounds. In each round, every player competes against every other player exactly once. The result of a match between two players is either a win for one of them or a draw. In a win, the winning player gets 2 points, and the losing player gets 0 points. In a draw, each player gets 1 point. To ensure fair play, the organizer wants to know the potential ranking of a player after a certain number of rounds. The ranking criteria are as follows: (a) greater number of total points accumulated; (b) fewer total matches lost; (c) greater number of total matches won; (d) alphabetical order of player names in case of ties after applying (a), (b), and (c). Given the results of all the matches played so far and one specific player, calculate the possible rankings of that player after each remaining match. You may assume each player has played an unequal number of matches so far, and there are multiple possible outcomes for the remaining matches. # Input The input starts with an integer `N` (1 ≤ N ≤ 100), the number of players. The next `N` lines contain the names of the players. Each player\'s name is a sequence of exactly three uppercase letters (e.g., `ALF`, `BOB`, etc.). The following line contains an integer `M` (0 ≤ M ≤ N*(N-1)/2), the number of matches played so far. The next `M` lines each follow the format: ``` <player1> <score1> - <score2> <player2> ``` Here `<player1>` and `<player2>` are the names of the players, `<score1>` and `<score2>` are the goals scored by `<player1>` and `<player2>` respectively (0 ≤ `<score1>`, `<score2>` ≤ 10). The last line contains the name of the player for whom the ranking should be calculated. # Output Output the rankings of the specified player after each of the remaining matches. Each ranking should be on its own line, in ascending order, with the possible rank positions separated by a comma if multiple outcomes result in the same rank. # Example Input ``` 4 ALF BOB CAT DAN 3 ALF 2 - 1 BOB BOB 1 - 1 CAT CAT 0 - 0 DAN ALF ``` Output ``` 1 2 3 4 ``` In this example, ALF\'s rank after each of the remaining matches (ALF vs CAT and ALF vs DAN) in all possible outcomes need to be calculated and displayed.","solution":"from collections import defaultdict import itertools def calculate_rankings(N, players, M, matches_played, target_player): # Initialize player data player_data = {player: {\'points\': 0, \'wins\': 0, \'losses\': 0, \'draws\': 0} for player in players} # Process the matches already played for match in matches_played: player1, score1, score2, player2 = match score1, score2 = int(score1), int(score2) if score1 > score2: player_data[player1][\'points\'] += 2 player_data[player1][\'wins\'] += 1 player_data[player2][\'losses\'] += 1 elif score1 < score2: player_data[player2][\'points\'] += 2 player_data[player2][\'wins\'] += 1 player_data[player1][\'losses\'] += 1 else: player_data[player1][\'points\'] += 1 player_data[player2][\'points\'] += 1 player_data[player1][\'draws\'] += 1 player_data[player2][\'draws\'] += 1 # Generate the possible remaining matches played_set = set((min(p1, p2), max(p1, p2)) for p1, _, _, p2 in matches_played) all_pairs = {frozenset([p1, p2]) for p1 in players for p2 in players if p1 != p2} remaining_matches = all_pairs - played_set # Simulate all possible outcomes of remaining matches possible_outcomes = [] for outcomes in itertools.product( [\'win\', \'lose\', \'draw\'], repeat=len(remaining_matches)): temp_data = {k: v.copy() for k, v in player_data.items()} for outcome, match in zip(outcomes, remaining_matches): player1, player2 = tuple(match) if outcome == \'win\': temp_data[player1][\'points\'] += 2 temp_data[player1][\'wins\'] += 1 temp_data[player2][\'losses\'] += 1 elif outcome == \'lose\': temp_data[player2][\'points\'] += 2 temp_data[player2][\'wins\'] += 1 temp_data[player1][\'losses\'] += 1 else: # draw temp_data[player1][\'points\'] += 1 temp_data[player2][\'points\'] += 1 temp_data[player1][\'draws\'] += 1 temp_data[player2][\'draws\'] += 1 possible_outcomes.append(temp_data) # Calculate the rankings for each possible outcome all_rankings = [] for outcome in possible_outcomes: sorted_players = sorted(players, key=lambda p: ( -outcome[p][\'points\'], outcome[p][\'losses\'], -outcome[p][\'wins\'], p)) rank = sorted_players.index(target_player) + 1 all_rankings.append(rank) # Output the distinct rankings in sorted order return sorted(set(all_rankings)) def parse_input(input_str): lines = input_str.strip().split(\\"n\\") N = int(lines[0].strip()) players = [lines[i+1].strip() for i in range(N)] M = int(lines[N+1].strip()) matches_played = [] for i in range(M): match = lines[N+2+i].strip().split() player1, score1, _, score2, player2 = match matches_played.append((player1, score1, score2, player2)) target_player = lines[N+2+M].strip() return N, players, M, matches_played, target_player"},{"question":"A network administrator needs to optimize the connectivity between a set of computers in a network. The network can be represented as an undirected graph with `n` nodes and `m` edges, where each node represents a computer and each edge represents a direct connection between two computers. Given the current state of the network, the administrator\'s goal is to determine the number of connected components in the network. A connected component is a maximal set of nodes such that there is a path between any two nodes in this set. Write a program that calculates the number of connected components in the given network graph. ----- Input ----- The first line contains two integers `n` and `m` (`1 ≤ n ≤ 10^5`, `0 ≤ m ≤ 2·10^5`) — the number of computers and the number of direct connections between them, respectively. Each of the next `m` lines contains two integers `u` and `v` (`1 ≤ u, v ≤ n`), representing a connection between the computer `u` and the computer `v`. Output ----- Print one integer — the number of connected components in the network. ----- Examples ----- Input 5 3 1 2 2 3 4 5 Output 2 Input 4 2 1 2 3 4 Output 2 Input 6 0 Output 6 Input 7 5 1 2 2 3 4 5 5 6 6 7 Output 2 ----- Note ----- In the first example, there are 5 computers and 3 connections. Computers 1, 2, and 3 form one connected component, and computers 4 and 5 form another one. In the second example, there are 4 computers and 2 connections. Computers 1 and 2 are connected, and computers 3 and 4 are connected, forming two connected components. In the third example, there are no direct connections between the 6 computers, so each computer is its own connected component, resulting in 6 connected components. In the fourth example, there are 7 computers and 5 connections. Computers 1, 2, and 3 form one connected component, while computers 4, 5, 6, and 7 form another connected component.","solution":"def find_num_connected_components(n, edges): from collections import defaultdict, deque def bfs(node): queue = deque([node]) visited.add(node) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() components = 0 for node in range(1, n+1): if node not in visited: bfs(node) components += 1 return components"},{"question":"Maria has a mysterious ancient book with a lot of pages. Each page contains multiple words. Being passionate about linguistics and intrigued by the bringht future, she wants to track the appearance and frequency of words on each page. Help Maria by writing a program that counts the frequency of each word and sorts them in descending order of their frequencies. In the case where two words have the same frequency, sort them in lexicographical order. Input: The first line of the input contains a single integer, P, which is the number of pages. The following P lines each contain a page with words separated by space. Output: For each page, print the words in the specified order along with their frequencies in the format: word:frequency. Separate each word-frequency pair by a newline. Separate the output of different pages by a blank line. Constraints: 1 ≤ P ≤ 50 1 ≤ number of words per page ≤ 200 1 ≤ |word| ≤ 15 Note: All words consist of lowercase alphabetic characters only. SAMPLE INPUT 3 hello world hello code code coder banana apple apple banana banana SAMPLE OUTPUT hello:2 world:1 code:2 coder:1 banana:3 apple:2","solution":"def word_frequencies(pages): This function takes a list of pages, each containing multiple words, and counts the frequency of each word in each page, then sorts them in descending order of their frequencies. In case of a tie in frequency, words are sorted lexicographically. Parameters: pages (list of str): A list where each element is a string representing words on a page. Returns: list of list of str: A list of lists where each inner list contains the words and frequencies formatted as \\"word:frequency\\". results = [] for page in pages: words = page.split() frequency_dict = {} for word in words: if word in frequency_dict: frequency_dict[word] += 1 else: frequency_dict[word] = 1 sorted_words = sorted(frequency_dict.items(), key=lambda x: (-x[1], x[0])) page_result = [f\\"{word}:{freq}\\" for word, freq in sorted_words] results.append(page_result) return results def format_output(results): This function formats the results of word frequencies into the specified output format. Parameters: results (list of list of str): The word frequency list for each page. Returns: str: The formatted output string. output_list = [] for page_result in results: output_list.append(\\"n\\".join(page_result)) return \\"nn\\".join(output_list)"},{"question":"Given a string of parentheses consisting of opening brackets \'(\' and closing brackets \')\'. Your task is to determine the minimum number of parentheses you must add to make the parentheses string valid. A string of parentheses is valid if and only if: 1. It is the empty string, 2. It can be written as AB (A concatenated with B), where A and B are valid strings, or 3. It can be written as (A), where A is a valid string. Example 1: Input: s = \\"()))((\\" Output: 4 Explanation: You need to add 2 opening brackets at the beginning and 2 closing brackets at the end to make the string valid. Therefore, the minimum number of parentheses to add is 4. Example 2: Input: s = \\"()\\" Output: 0 Explanation: The string is already valid, so no parentheses need to be added. Your Task: This is a function problem. You only need to complete the function minAddToMakeValid() that takes a string s as a parameter and returns an integer (the minimum number of parentheses needed to make the string valid). The printing is done automatically by the driver code. Expected Time Complexity: O(n), where n is the length of the string s. Expected Auxiliary Space: O(1). Constraints: 1 ≤ |s| ≤ 10^5","solution":"def minAddToMakeValid(s: str) -> int: Returns the minimum number of parentheses needed to make the string s valid. open_needed = 0 close_needed = 0 for char in s: if char == \'(\': open_needed += 1 elif char == \')\': if open_needed > 0: open_needed -= 1 else: close_needed += 1 # The total parentheses needed is the sum of unmatched open and close parentheses return open_needed + close_needed"},{"question":"Mark and Jane are collectors of rare stones. Each stone can be categorized by its size, which is a positive integer. They both have collections containing `n` stones each, and they want to verify if they can synchronize their collections. To synchronize, Jane can perform the following operation any number of times: choose one of her stones and replace it with another stone having exactly one size smaller or larger than the chosen stone. You\'ve got integers n and two lists of integers A and B representing the sizes of the stones in Mark and Jane\'s collections, respectively. Determine the minimum number of operations required for Jane to synchronize her collection with Mark\'s. -----Input----- The first line contains an integer n (1 ≤ n ≤ 50), the number of stones in each collection. The second line contains n integers representing Mark\'s collection, the elements of list A (1 ≤ A_i ≤ 100). The third line contains n integers representing Jane\'s collection, the elements of list B (1 ≤ B_i ≤ 100). -----Output----- Print a single integer — the minimum number of operations required for Jane to synchronize her collection with Mark\'s. -----Examples----- Input 3 3 5 7 4 6 8 Output 3 Input 4 1 2 3 4 1 2 3 4 Output 0 Input 2 10 20 5 25 Output 10","solution":"def min_operations_to_synchronize(n, A, B): Determines the minimum number of operations required for Jane to synchronize her collection with Mark\'s. Parameters: n (int): Number of stones in each collection. A (list of int): Sizes of the stones in Mark\'s collection. B (list of int): Sizes of the stones in Jane\'s collection. Returns: int: Minimum number of operations required. return sum(abs(A[i] - B[i]) for i in range(n))"},{"question":"Given an array of integers, write a function to find the minimum absolute difference between any two elements in the array. You should return the minimum absolute difference. Example 1: Input: [3, 8, 15, 17] Output: 2 Explanation: The minimum absolute difference is between 15 and 17, which is 2. Example 2: Input: [1, 19, -4, 31, 38, 25, 100] Output: 4 Explanation: The minimum absolute difference is between 1 and -4, which is 4. Your Task: This is a function problem. You are required to complete the function minAbsDifference() that takes an array as a parameter and returns the minimum absolute difference. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 2 <= Length of the array <= 10^5 -10^6 <= Array elements <= 10^6","solution":"def minAbsDifference(arr): Returns the minimum absolute difference between any two elements in the array. arr.sort() # Sort the array to bring closest elements next to each other min_diff = float(\'inf\') # Iterate through the sorted array and find the minimum difference for i in range(len(arr) - 1): min_diff = min(min_diff, abs(arr[i] - arr[i + 1])) return min_diff"},{"question":"Three friends agreed to play a game. Each friend is assigned a unique number: 1 for Alice, 2 for Bob, and 3 for Charlie. At the start of the game, they each choose a distinct positive integer. Given the numbers chosen by two of the friends, your task is to determine the sum of all three numbers chosen. -----Input----- The first line of the input contains two distinct positive integers x and y (1 ≤ x, y ≤ 100) representing the numbers chosen by two of the friends. The order of the numbers does not matter. -----Output----- Output a single integer — the sum of the numbers chosen by all three friends. -----Example----- Input 5 3 Output 12","solution":"def find_third_friend_sum(x, y): Determines the sum of the numbers chosen by all three friends, given the numbers chosen by two of them. Parameters: x (int): First number. y (int): Second number. Returns: int: Sum of all three numbers chosen. return x + y + 4 # Since the third unique number is fixed as 1 + 2 + 3 - (1 + 2) = 3"},{"question":"You are given an array of N positive integers: B_1, B_2, ..., B_N. Your task is to find the smallest positive integer that is not present in the array. -----Constraints----- - 1 leq N leq 100000 - 1 leq B_i leq 100000 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N B_1 B_2 ... B_N -----Output----- Print the smallest positive integer that is not present in the array. -----Sample Input----- 5 1 3 6 4 1 2 -----Sample Output----- 5 Another Example: -----Sample Input----- 4 1 2 3 4 -----Sample Output----- 5","solution":"def smallest_missing_positive_integer(array): Finds the smallest positive integer that is not present in the array. # Convert the array to a set for O(1) lookups array_set = set(array) smallest_missing = 1 while smallest_missing in array_set: smallest_missing += 1 return smallest_missing"},{"question":"A message containing letters from A-Z can be encoded into numbers using the following mapping: \'A\' -> 1 \'B\' -> 2 ... \'Z\' -> 26 Given an encoded message containing digits, determine the total number of ways to decode it. Example 1: Input: \\"12\\" Output: 2 Explanation: It could be decoded as \\"AB\\" (1 2) or \\"L\\" (12). Example 2: Input: \\"226\\" Output: 3 Explanation: It could be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6). Example 3: Input: \\"0\\" Output: 0 Explanation: There is no valid mapping for 0. Your Task: Write a function numDecodings(s) that takes a string s as input and returns the total number of ways to decode it. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ s.length ≤ 100 s contains only digits and may contain leading \'0\'.","solution":"def numDecodings(s): if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n+1) dp[0] = 1 for i in range(1, n+1): if s[i-1] != \'0\': dp[i] += dp[i-1] if i > 1 and \'10\' <= s[i-2:i] <= \'26\': dp[i] += dp[i-2] return dp[n]"},{"question":"John has recently started learning about arrays in his programming course. He has an array of integers and a target value. He needs to determine if there exists a pair of distinct indices i and j such that the sum of the elements at these indices equals the target value. Help John by writing a function that decides whether such a pair exists. -----Constraints----- - The array will contain at least 2 and at most 10^5 integers. - All values in the array and the target value are integers. - -10^9 leq array[i], target leq 10^9 -----Input----- Input is given from Standard Input in the following format: n array target - n: An integer representing the number of elements in the array. - array: A list of n integers. - target: An integer representing the target sum. -----Output----- If such a pair exists, print \\"Yes\\"; otherwise, print \\"No\\". -----Sample Input----- 5 1 2 3 9 11 14 -----Sample Output----- Yes - There exists a pair (3, 11) which adds up to the target value 14.","solution":"def has_pair_with_sum(n, arr, target): Determines if there exists a pair of distinct indices i and j such that the sum of elements arr[i] and arr[j] equals the target value. Args: n (int): The number of elements in the array. arr (List[int]): The array of integers. target (int): The target sum. Returns: str: \\"Yes\\" if such a pair exists, otherwise \\"No\\". seen = set() for num in arr: complement = target - num if complement in seen: return \\"Yes\\" seen.add(num) return \\"No\\""},{"question":"You are given a list of integers and your task is to determine the sum of all even numbers in the list. If the list contains no even numbers, return 0. Input Format The first line contains the number of test cases, T. T lines follow, each containing a single test case with a list of integers separated by spaces. Output Format Output T lines, each containing a single integer which is the sum of the even numbers in the corresponding list. If there are no even numbers, output 0 for that test case. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^4 -10^6 ≤ a_i ≤ 10^6, where a_i is the ith integer in the list. SAMPLE INPUT 3 1 2 3 4 5 7 11 13 2 4 6 8 10 SAMPLE OUTPUT 6 0 30 Explanation In the first test case, the even numbers are 2 and 4, and their sum is 6. In the second test case, there are no even numbers, so the output is 0. In the third test case, the even numbers are 2, 4, 6, 8, and 10, and their sum is 30.","solution":"def sum_of_even_numbers(lists): Returns a list containing the sum of even numbers for each given list of integers. If the list contains no even numbers, return 0 for that list. result = [] for lst in lists: even_sum = sum(num for num in lst if num % 2 == 0) result.append(even_sum) return result"},{"question":"Stefan has a string `S` of length `N` containing only lowercase alphabets. He can right circular rotate the string as many times as he wants. A right circular rotation operation consists of moving the last character of the string to the front. For example, if the string is initially \\"abcd\\", after one right circular rotation, it becomes \\"dabc\\". After another right circular rotation, it becomes \\"cdab\\". Stefan wants to find the lexicographically smallest string he can get after performing any number of right circular rotations. ------ Input ------ The first line contains an integer T, the number of test cases. Then the test cases follow. The first line of each test case contains a single integer N, the length of the string. The second line of each test case contains the string S of length N. ------ Output ------ For each test case, output the lexicographically smallest string that can be obtained after any number of right circular rotations. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 The sum of N over all test cases does not exceed 10^6 ----- Sample Input 1 ------ 2 4 abcd 3 cba ----- Sample Output 1 ------ abcd acb ------ Explanation 1 ------ For the first test case, the string \\"abcd\\" is already lexicographically smallest. For the second test case, the possible rotations are: \\"cba\\", \\"acb\\", and \\"bac\\". Out of these, \\"acb\\" is the lexicographically smallest string.","solution":"def lexicographically_smallest_rotation(S): Given a string S, this function finds and returns the lexicographically smallest string obtainable by any number of right circular rotations. # Generate all rotations and find the smallest one N = len(S) smallest = S for i in range(1, N): rotated = S[-i:] + S[:-i] if rotated < smallest: smallest = rotated return smallest def process_test_cases(test_cases): results = [] for N, S in test_cases: results.append(lexicographically_smallest_rotation(S)) return results"},{"question":"**Story** Sara owns a bakery and needs to manage her inventory efficiently. She receives daily supplies and logs all transactions - both incoming and outgoing (sales). Each item in the supply and sales logs is represented by a combination of a product name and the number of items. Sara wants a system that consolidates her daily transactions into a final inventory count for each product. Given the initial inventory and lists of supply and sales transactions, calculate the final item count of each product in the inventory. ___ **Task** Write a function `update_inventory(initial_inventory, supplies, sales)` that computes the final inventory for each product. **Input:** - `initial_inventory`: a dictionary where keys are product names (strings) and values are integers representing the initial count of each product. - `supplies`: a list of tuples, each representing a supply transaction. A tuple consists of a product name (string) and the number of items supplied (positive integer). - `sales`: a list of tuples, each representing a sales transaction. A tuple consists of a product name (string) and the number of items sold (positive integer). **Output:** - A dictionary representing the final inventory. Keys are product names (strings) and values are integers representing the final count of each product after accounting for supplies and sales. **Note:** If a product appears in supply or sales but not in the initial inventory, it should be added to the final inventory with the correct count. ___ **Examples** ```python update_inventory( {\\"bread\\": 10, \\"milk\\": 5}, [(\\"bread\\", 5), (\\"cookie\\", 10)], [(\\"milk\\", 2), (\\"bread\\", 7)] ) == {\\"bread\\": 8, \\"milk\\": 3, \\"cookie\\": 10} update_inventory( {\\"apple\\": 20}, [(\\"banana\\", 10)], [(\\"apple\\", 15), (\\"banana\\", 5)] ) == {\\"apple\\": 5, \\"banana\\": 5} update_inventory( {}, [(\\"flour\\", 10), (\\"sugar\\", 5)], [(\\"flour\\", 5)] ) == {\\"flour\\": 5, \\"sugar\\": 5} ``` ___ Write a Python function to solve the problem as described.","solution":"def update_inventory(initial_inventory, supplies, sales): Computes the final inventory for each product. Args: initial_inventory (dict): Initial count of each product. supplies (list of tuples): List of supply transactions (product name, count). sales (list of tuples): List of sales transactions (product name, count). Returns: dict: Final inventory count of each product. inventory = initial_inventory.copy() # Process supplies for product, count in supplies: if product in inventory: inventory[product] += count else: inventory[product] = count # Process sales for product, count in sales: if product in inventory: inventory[product] -= count else: inventory[product] = -count return inventory"},{"question":"In a magical kingdom, there are n islands connected by m bridges. Each bridge allows travel in both directions, and each has a unique magical strength associated with it. Some of the islands have wizard towers. A wizard can cast a spell from a tower and travel to another island to visit it and return, but the strength of the spell decreases by the strength of each bridge crossed. Given the details, determine the maximum strength spell that remains when travelling back and forth between any two islands, starting and ending at an island with a wizard tower. Input The first line contains three integers: - n (2 ≤ n ≤ 100000), the number of islands. - m (1 ≤ m ≤ 100000), the number of bridges connecting the islands. - t (1 ≤ t ≤ 105), the number of islands that have wizard towers. The next m lines describe the bridges, each containing three integers a, b, s (1 ≤ a, b ≤ n, 1 ≤ s ≤ 109), the two islands connected by the bridge and the strength of the bridge respectively. The next line contains t integers, each representing an island that has a wizard tower. Output Print one integer, the maximum remaining strength of any spell starting and ending at a wizard tower island by visiting any other island and returning. If no such path exists, output -1. Examples Input 5 6 2 1 2 5 2 3 1 3 4 1 4 5 10 1 3 2 2 4 3 1 2 Output 10 Input 4 3 1 1 2 3 2 3 2 3 4 4 1 Output -1","solution":"import heapq from collections import defaultdict def max_spell_strength(n, m, t, bridges, wizard_islands): def dijkstra(source): distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[source] = 0 pq = [(0, source)] while pq: current_distance, current_island = heapq.heappop(pq) if current_distance > distances[current_island]: continue for neighbor, weight in graph[current_island]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances graph = defaultdict(list) for a, b, s in bridges: graph[a].append((b, s)) graph[b].append((a, s)) max_strength = -1 for wi in wizard_islands: distances = dijkstra(wi) for other_wi in wizard_islands: if other_wi != wi and distances[other_wi] < float(\'inf\'): max_strength = max(max_strength, 2 * min(graph[wi][0][1] for nei, _ in graph[wi])) return max_strength # Example usage: # print(max_spell_strength(5, 6, 2, [(1, 2, 5), (2, 3, 1), (3, 4, 1), (4, 5, 10), (1, 3, 2), (2, 4, 3)], [1, 2])) # Output: 10"},{"question":"A palindrome is a string that reads the same forward and backward. Given a string, you need to determine the minimum number of adjacent character swaps required to transform it into a palindrome. If it cannot be transformed into a palindrome, return -1. Function Description Complete the `minSwapsToPalindrome` function in the editor below. `minSwapsToPalindrome` has the following parameter(s): - `string s`: a string of lowercase English letters Returns - `int`: the minimum number of adjacent character swaps required, or -1 if it\'s not possible. Input Format A single string `s`. Constraints - `1 <= |s| <= 10^4` where `|s|` means the length of `s` - All characters are in the range ascii[a-z] Sample Input `mamad` Sample Output 3 Explanation The transformation of \\"mamad\\" to a palindrome requires the following swaps: 1. Swap the second \'m\' with the last \'d\' -> \\"madam\\" 2. Swap the first and second \'m\' -> \\"madam\\" Since \\"madam\\" reads the same forwards and backwards, it is a palindrome with a total of 3 swaps. Sample Input 1 `asflkj` Sample Output 1 -1 Explanation 1 The string \\"asflkj\\" cannot be rearranged into a palindrome because no permutation of the given string will read the same forwards and backwards. Sample Input 2 `abcbca` Sample Output 2 1 Explanation 2 The transformation of \\"abcbca\\" to a palindrome requires the following swap: 1. Swap the second \'a\' with the second \'b\' -> \\"abcabc\\" Since \\"abcabc\\" reads the same forwards and backwards, it is a palindrome with a total of 1 swap.","solution":"def minSwapsToPalindrome(s): Returns the minimum number of adjacent character swaps required to transform the string `s` into a palindrome. If it\'s not possible, returns -1. if not canFormPalindrome(s): return -1 s = list(s) n = len(s) swap_count = 0 for i in range(n // 2): left = i right = n - left - 1 while left < right: if s[left] == s[right]: break else: right -= 1 if left == right: s[left], s[left + 1] = s[left + 1], s[left] swap_count += 1 right = n - left - 2 for j in range(right, n - left - 1): s[j], s[j + 1] = s[j + 1], s[j] swap_count += 1 return swap_count def canFormPalindrome(s): Helper function to check if a string can be rearranged to form a palindrome. char_count = [0] * 26 for ch in s: char_count[ord(ch) - ord(\'a\')] += 1 odd_count = sum(1 for count in char_count if count % 2 != 0) return odd_count <= 1"},{"question":"> You are given a list of strings. Write a function that groups them by their first character and returns a dictionary where the keys are the first characters and the values are lists of strings that start with that character. The order of strings in the lists should be the same as their order in the input. Task Your task is to implement such a grouping of strings. The function should accept a single list of strings and return a dictionary. Examples Here are a few examples to demonstrate the expected behavior: ```python group_by_first_char([\\"apple\\", \\"apricot\\", \\"banana\\", \\"blueberry\\", \\"cherry\\", \\"cantaloupe\\"]) # => {\'a\': [\'apple\', \'apricot\'], \'b\': [\'banana\', \'blueberry\'], \'c\': [\'cherry\', \'cantaloupe\']} group_by_first_char([\\"dog\\", \\"cat\\", \\"deer\\", \\"camel\\", \\"dingo\\"]) # => {\'d\': [\'dog\', \'deer\', \'dingo\'], \'c\': [\'cat\', \'camel\']} ``` # Additional Information: 1. The input list may contain an arbitrary number of strings, including an empty list. 2. All strings are guaranteed to be non-empty. 3. The function should be case-sensitive, meaning \'A\' and \'a\' should be considered different characters.","solution":"def group_by_first_char(strings): Groups strings by their first character. :param strings: List of strings :return: Dictionary with first characters as keys and lists of strings as values result = {} for string in strings: first_char = string[0] if first_char not in result: result[first_char] = [] result[first_char].append(string) return result"},{"question":"Given a large positive number n represented as string, find the sum of the digits of n. If the resulting sum is a single-digit number, return it. If not, keep summing the digits until a single-digit number is obtained. Output is expected as an integer. Example 1: Input: n = \\"9875\\" Output: 2 Explanation: Sum of digits of 9875 is 9 + 8 + 7 + 5 = 29. Sum of digits of 29 is 2 + 9 = 11. Sum of digits of 11 is 1 + 1 = 2. Example 2: Input: n = \\"123456789\\" Output: 9 Explanation: Sum of digits of 123456789 is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. Sum of digits of 45 is 4 + 5 = 9. Your Task: You don\'t need to read input or print anything. Your task is to complete the function digitSum() which takes string n as the input parameter and returns the integer value of the single-digit sum. Expected Time Complexity: O(length of string n) Expected Space Complexity: O(1) Constraints: 1 ≤ length of string n ≤ 100000","solution":"def digit_sum(n): Reduce the digits of the number represented by the string n to a single-digit number by repeatedly summing the digits. Parameters: n (str): Large positive number represented as a string Returns: int: Single-digit sum of the digits while len(n) > 1: sum_digits = sum(int(char) for char in n) n = str(sum_digits) return int(n)"},{"question":"Given an integer array, perform a sequence of operations to transform the array into a palindrome. A palindrome is an array that reads the same forward and backward. In one operation, you can merge two adjacent elements into their sum. The goal is to find the minimum number of operations required to transform the given array into a palindrome. Input Format A single line containing the space-separated integers of the array. Constraints: The length of the array is less than or equal to 1000. Each integer in the array is between 1 and 1000. Output Format A single integer representing the minimum number of operations required to make the array a palindrome. SAMPLE INPUT 1 4 5 9 1 SAMPLE OUTPUT 1 Explanation Step-by-step transformation of the input array: - [1, 4, 5, 9, 1] is not a palindrome. - Merge the elements 5 and 9 into 14: the array becomes [1, 4, 14, 1], which is a palindrome. - Only 1 operation was required. Hence, the output is 1.","solution":"def min_operations_to_palindrome(arr): Returns the minimum number of operations required to transform the given array into a palindrome. In one operation, you can merge two adjacent elements into their sum. def recursive_transformation(arr, left, right): if left >= right: return 0 if arr[left] == arr[right]: return recursive_transformation(arr, left + 1, right - 1) if arr[left] < arr[right]: arr[left + 1] += arr[left] return 1 + recursive_transformation(arr, left + 1, right) else: arr[right - 1] += arr[right] return 1 + recursive_transformation(arr, left, right - 1) return recursive_transformation(arr, 0, len(arr) - 1)"},{"question":"Write a program that reads a list of integers and prints out the squares of these integers in non-decreasing order. Note 解説 Constraints * n ≤ 100 * −100 ≤ ai ≤ 100 Input The input is given in the following format: n a1 a2 ... an n is the number of elements in the list, and ai is the ith integer in the list. Output Print the squares of the integers in non-decreasing order on a single line. Print a single space character between adjacent elements (Note that your program should not put a space character after the last element). Examples Input 4 -1 2 3 -4 Output 1 4 9 16 Input 5 -3 -2 -1 0 1 Output 0 1 1 4 9","solution":"def squared_sorted_array(n, a): Given a list of n integers, return the list of squares of these integers in non-decreasing order. squared_array = [x ** 2 for x in a] squared_array.sort() return squared_array def format_output(squared_array): Formats the output list to a single string with space-separated values. return \' \'.join(map(str, squared_array))"},{"question":"Given an array of integers, find all unique triplets in the array which gives the sum of zero. INPUT The first line of input is an integer T (1 ≤ T ≤ 100), representing the number of test cases. T test cases follow. Each test case starts with an integer N (3 ≤ N ≤ 3000), the size of the array. The next line contains N space-separated integers Ai (-10^5 ≤ Ai ≤ 10^5), the array elements. OUTPUT For each test case, output all unique triplets [Ai, Aj, Ak] such that 0 ≤ i < j < k < N and Ai + Aj + Ak = 0. The triplets should be returned in ascending order, and each triplet (a, b, c) should be ordered as a ≤ b ≤ c. No duplicate triplets should be printed, and for each test case print the triplets in a new line. SAMPLE INPUT 2 6 -1 0 1 2 -1 -4 5 0 0 0 0 0 SAMPLE OUTPUT -1 -1 2 -1 0 1 0 0 0 Explanation In the first test case, the triplets are [-1, -1, 2] and [-1, 0, 1]. In the second test case, the only triplet is [0, 0, 0].","solution":"def three_sum_zero(arr): Function to find all unique triplets in the array which gives the sum of zero. arr.sort() result = [] for i in range(len(arr)-2): if i > 0 and arr[i] == arr[i-1]: continue left, right = i+1, len(arr)-1 while left < right: s = arr[i] + arr[left] + arr[right] if s == 0: result.append([arr[i], arr[left], arr[right]]) while left < right and arr[left] == arr[left+1]: left += 1 while left < right and arr[right] == arr[right-1]: right -= 1 left += 1 right -= 1 elif s < 0: left += 1 else: right -= 1 return result def find_unique_triplets(test_cases): Function to handle multiple test cases and find unique triplets that sum to zero for each case. results = [] for arr in test_cases: results.append(three_sum_zero(arr)) return results"},{"question":"Implement a function that finds and returns the most frequently occurring element in a list of integers. If there are multiple elements with the same highest frequency, return the smallest one. Here is an example: ```cs var numbers = new List<int> {3, 1, 4, 4, 5, 1, 1, 2, 4, 5, 5, 5}; int result = MostFrequentElementFinder.Find(numbers); // result should be 5, because 5 appears 4 times, which is the most frequent. numbers = new List<int> {4, 4, 1, 1}; result = MostFrequentElementFinder.Find(numbers); // result should be 1, because both 4 and 1 appear 2 times, but 1 is the smaller number. ``` ```python numbers = [3, 1, 4, 4, 5, 1, 1, 2, 4, 5, 5, 5] result = most_frequent_element_finder(numbers) # result should be 5, because 5 appears 4 times, which is the most frequent. numbers = [4, 4, 1, 1] result = most_frequent_element_finder(numbers) # result should be 1, because both 4 and 1 appear 2 times, but 1 is the smaller number. ``` You may assume that the input list is non-empty and contains only valid integers. Consider performance for large lists.","solution":"from collections import Counter def most_frequent_element_finder(numbers): Finds and returns the most frequently occurring element in a list of integers. If there are multiple elements with the same highest frequency, returns the smallest one. :param numbers: List of integers :return: The most frequently occurring element # Count the frequency of each element using Counter frequency = Counter(numbers) # Find the maximum frequency max_frequency = max(frequency.values()) # Filter elements that have the maximum frequency and return the smallest one. most_frequent_elements = [key for key, value in frequency.items() if value == max_frequency] return min(most_frequent_elements)"},{"question":"Write a program to generate all the permutations of a given string of unique characters. Input A single line containing a string of between 1 and 8 unique lowercase alphabetic characters. Output All permutations of the input string, each on a new line. The permutations should be in lexicographically sorted order. Example Input abc Output abc acb bac bca cab cba","solution":"from itertools import permutations def generate_permutations(s): Returns all permutations of the given string s in lexicographically sorted order. perms = sorted([\'\'.join(p) for p in permutations(s)]) return perms"},{"question":"Nina loves string manipulation and is working on a problem related to finding unique words from a given sentence. A word is defined as a sequence of non-space characters. Write a program to help Nina by removing duplicate words while preserving the order of their first appearance in the sentence. Input: A single line containing a sentence (can include alphabets, numbers, and special characters). Output: A single line with unique words from the input sentence, maintaining their first occurrence order. Example: Input: I love to code and I love to learn Output: I love to code and learn","solution":"def remove_duplicate_words(sentence): Removes duplicate words from the sentence while maintaining their first occurrence order. words = sentence.split() seen = set() result = [] for word in words: if word not in seen: seen.add(word) result.append(word) return \' \'.join(result)"},{"question":"Prime Factorization Given a positive integer `n`, the task is to find its prime factorization. The prime factorization of an integer is a product of prime numbers that, when multiplied together, yield the original integer `n`. Example: For example, if the input number is `315`, then its prime factorization is: ```python 315 = 3 * 3 * 5 * 7 ``` In the above example, the prime factors are `3, 3, 5, 7`. Your Task Your task is to implement a function that takes an integer `n` and returns a list of its prime factors in ascending order. # Function Signature ```python def prime_factors(n: int) -> List[int]: pass ``` # Example ```python input: 60 Explanation: 60 = 2 * 2 * 3 * 5 output: [2, 2, 3, 5] ``` # Constraints - The input number `n` will be a positive integer not greater than `1000000`.","solution":"from typing import List def prime_factors(n: int) -> List[int]: Returns a list of prime factors of a given positive integer n in ascending order. factors = [] # Check for number of 2s that divide n while n % 2 == 0: factors.append(2) n = n // 2 # n must be odd at this point so we can skip even numbers for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n = n // i # This condition is to mention if n is a prime number # greater than 2 if n > 2: factors.append(n) return factors"},{"question":"You are given a city network with n intersections and n-1 roads, forming a tree. Each intersection has a unique ID from 1 to n. Some intersections have houses, and others have schools. You need to determine the shortest distance from each house to any school. Input The first line contains two integers n and k (1 ≤ k < n ≤ 100,000) where n is the number of intersections, and k is the number of schools. The second line contains k distinct integers representing the intersections where the schools are located. The following n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) representing a road between intersections u and v. Output Output n lines. For each intersection 1 to n, print the shortest distance to the nearest school. If an intersection is a school, the distance is 0 for that intersection. SAMPLE INPUT 5 2 1 3 1 2 1 4 2 5 3 4 SAMPLE OUTPUT 0 1 0 1 2","solution":"from collections import deque, defaultdict def shortest_distances(n, k, schools, roads): # Initialize the graph, distances, and queue graph = defaultdict(list) distances = [-1] * (n + 1) queue = deque() # Build the graph from the roads information for u, v in roads: graph[u].append(v) graph[v].append(u) # Initialize distances for schools and add them to the queue for school in schools: distances[school] = 0 queue.append(school) # BFS to calculate shortest distance to any school while queue: current = queue.popleft() for neighbor in graph[current]: if distances[neighbor] == -1: distances[neighbor] = distances[current] + 1 queue.append(neighbor) # Output the distances for each intersection from 1 to n return distances[1:] # Example usage n = 5 k = 2 schools = [1, 3] roads = [(1, 2), (1, 4), (2, 5), (3, 4)] print(shortest_distances(n, k, schools, roads)) # Output: [0, 1, 0, 1, 2]"},{"question":"In a small village, every house needs to be connected to the village\'s only water tower through a network of pipes. The water tower is located at the house indexed 0. Each house is represented by a unique integer from 0 to n-1, where n is the total number of houses, and each direct pipe connection between two houses u and v can be represented by an undirected edge in a graph. The mayor wants to ensure that even if any single pipe breaks, there\'s still a way for water to flow from the water tower to every house. However, due to budget constraints, the number of pipes needs to be minimized while satisfying this condition. Given the number of houses n and a list of possible pipes as pairs of integers (u, v), determine if it\'s possible to construct such a network using a subset of the given pipes. -----Input----- The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 4950) — the number of houses and the number of possible pipes, respectively. The next m lines each contain two integers u and v (0 ≤ u, v < n, u ≠ v) which represent a direct pipe connection between the houses u and v. -----Output----- Print \\"YES\\" if it is possible to construct the required network, otherwise print \\"NO\\". -----Examples----- Input 4 5 0 1 0 2 2 1 1 3 2 3 Output YES Input 4 2 0 1 2 3 Output NO -----Note----- In the first sample, you can construct a network that remains connected even if any one pipe breaks: {0-1, 0-2, 2-3}. If any single pipe in this network breaks, there\'s still a path between the water tower (house 0) and every other house. In the second sample, it\'s impossible to construct a network that satisfies the conditions since there\'s not enough connectivity among the houses.","solution":"def can_construct_network(n, m, pipes): from collections import defaultdict from itertools import combinations def is_connected(graph, n): visited = [False] * n def dfs(node): visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: dfs(neighbor) dfs(0) return all(visited) def remove_edge(graph, u, v): graph[u].remove(v) graph[v].remove(u) def add_edge(graph, u, v): graph[u].append(v) graph[v].append(u) # Build the adjacency list graph = defaultdict(list) for u, v in pipes: add_edge(graph, u, v) # Check if the entire graph is initially connected if not is_connected(graph, n): return \\"NO\\" # Check connectivity after removing each edge for u, v in pipes: remove_edge(graph, u, v) if not is_connected(graph, n): add_edge(graph, u, v) else: add_edge(graph, u, v) return \\"YES\\" return \\"NO\\""},{"question":"Alice loves strings and palindromes. She is trying to solve the following problem. Given an input string `s`, find the length of the longest palindromic substring within `s`. A palindrome is a string that reads the same backward as forward. Help Alice solve this problem by determining the length of the longest palindromic substring for the given input string. Input: - The first line contains a single integer T (1 ≤ T ≤ 100), the number of test cases. - Each of the next T lines contains a single string `s` (1 ≤ |s| ≤ 1000), the input string for each test case. Output: - For each test case, output a single integer denoting the length of the longest palindromic substring in the string `s`. SAMPLE INPUT 2 babad cbbd SAMPLE OUTPUT 3 2 Explanation: - In the first test case, \\"bab\\" or \\"aba\\" is the longest palindromic substring, each with a length of 3. - In the second test case, \\"bb\\" is the longest palindromic substring with a length of 2.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the given string `s`. n = len(s) if n == 0: return 0 dp = [[0] * n for _ in range(n)] max_length = 1 for i in range(n): dp[i][i] = 1 start = 0 for l in range(2, n + 1): for i in range(n - l + 1): j = i + l - 1 if s[i] == s[j]: if l == 2: dp[i][j] = 2 else: if dp[i + 1][j - 1] > 0: dp[i][j] = dp[i + 1][j - 1] + 2 if dp[i][j] > max_length: max_length = dp[i][j] start = i else: dp[i][j] = 0 return max_length def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(longest_palindromic_substring_length(s)) return results"},{"question":"Create a function that takes a nested dictionary as an input, where the values are lists of numbers, and outputs another dictionary that contains the sum of the numbers for each list. Note: the function should handle dictionaries of varying lengths and lists of varying lengths, including lists with negative numbers and floats. Examples ``` { \\"a\\": [1, 2, 3, 4], \\"b\\": [5, 6, 7, 8] } ==> {\\"a\\": 10, \\"b\\": 26} \\"a\\": [1, 2, 3, 4] sum: 1 + 2 + 3 + 4 = 10 \\"b\\": [5, 6, 7, 8] sum: 5 + 6 + 7 + 8 = 26 ``` ``` { \\"x\\": [2, -3, 9, 10, 7], \\"y\\": [12, 6, 89, 45, 3], \\"z\\": [9, 12, 56, 10, 34] } ==> {\\"x\\": 25, \\"y\\": 155, \\"z\\": 121} \\"x\\": [ 2, -3, 9, 10, 7] sum: 2 + (-3) + 9 + 10 + 7 = 25 \\"y\\": [ 12, 6, 89, 45, 3] sum: 12 + 6 + 89 + 45 + 3 = 155 \\"z\\": [ 9, 12, 56, 10, 34] sum: 9 + 12 + 56 + 10 + 34 = 121 ```","solution":"def sum_nested_dict_values(nested_dict): Takes a nested dictionary where values are lists of numbers and returns a dictionary with the sum of the numbers for each list. return {key: sum(values) for key, values in nested_dict.items()}"},{"question":"There is a treasure hunter who wants to collect gold coins across several caves. Each cave contains a certain number of gold coins. However, the hunter\'s bag can only hold up to a specific capacity, and it has to accommodate as many gold coins as possible without exceeding this capacity. Your task is to determine the maximum number of gold coins the hunter can collect. You can consider this as a variant of the classic knapsack problem. Input: The first line contains T, the number of test cases. Then T test cases follow. Each test case starts with two integers N (the number of caves) and C (the maximum capacity of the hunter\'s bag). Then N lines follow, each containing an integer G representing the number of gold coins in each cave. Output: For each test case, print the maximum number of gold coins the hunter can collect without exceeding the bag\'s capacity. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ C ≤ 10^5 1 ≤ G ≤ 10^4 SAMPLE INPUT 2 5 10 1 4 3 5 2 3 7 6 4 3 SAMPLE OUTPUT 10 7 Explanation: In the first test case, the hunter can collect all gold coins from the first five caves, which sum up to 1+4+3+5+2=15, but the capacity is 10, so the maximum he can collect is 10. In the second test case, the hunter can choose only the second and third caves to not exceed the capacity (4+3=7), or he can choose the first cave alone since it has the highest number of coins but will exceed the capacity if combined with any other cave. Hence, the maximum he can collect is 7.","solution":"def knapsack(caves, capacity): Returns the maximum number of gold coins the hunter can collect without exceeding the bag\'s capacity. dp = [0] * (capacity + 1) for gold in caves: for c in range(capacity, gold - 1, -1): dp[c] = max(dp[c], dp[c - gold] + gold) return dp[capacity] def max_gold(T, test_cases): Processes multiple test cases and returns the maximum number of gold coins for each. results = [] for i in range(T): N, C = test_cases[i][0] caves = test_cases[i][1] result = knapsack(caves, C) results.append(result) return results"},{"question":"Given an array of integers where every element appears three times except for one, which appears exactly once. Find that single one. Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? Example 1: Input: [2,2,3,2] Output: 3 Example 2: Input: [0,1,0,1,0,1,99] Output: 99","solution":"def single_number(nums): Find the element that appears exactly once in the array where every other element appears exactly three times. :param nums: List[int] :return: int ones, twos = 0, 0 for num in nums: # \'twos\' holds the bits which appear twice, we do an OR with \'num\' # & \'ones\' to get all bits which are set twice. twos = twos | (ones & num) # \'ones\' holds the bits which appear once, we do XOR with \'num\'. ones = ones ^ num # The common bits in \'ones\' and \'twos\' are the bits that appeared three times. common_bits = ones & twos # Remove common bits from \'ones\' ones &= ~common_bits # Remove common bits from \'twos\' twos &= ~common_bits return ones"},{"question":"Design a function that takes as input a JSON string representing a nested dictionary and returns a flat dictionary with keys as the path to each value in the original dictionary. # Input The function will receive a single argument: a JSON string representing a nested dictionary. The nested dictionary can have arbitrarily deep levels of nesting. Each key in the dictionary is a string, and each value is either another dictionary or a basic data type (integer, float, string, etc.) # Output The function should return a single dictionary where each key is a string representing the \\"path\\" to a value in the original dictionary. The path is composed of concatenated keys separated by dots (\\".\\"). The value should be the corresponding value from the original nested dictionary. # Examples ```python input_json = \'{\\"a\\":1,\\"b\\":{\\"c\\":2,\\"d\\":{\\"e\\":3,\\"f\\":4}}}\' output = { \\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3, \\"b.d.f\\": 4 } ``` ```python input_json = \'{\\"name\\":\\"John\\", \\"address\\": {\\"city\\": \\"New York\\", \\"details\\": {\\"zipcode\\": \\"10001\\", \\"street\\": \\"5th Avenue\\"}}}\' output = { \\"name\\": \\"John\\", \\"address.city\\": \\"New York\\", \\"address.details.zipcode\\": \\"10001\\", \\"address.details.street\\": \\"5th Avenue\\" } ``` ```python input_json = \'{\\"key1\\":{\\"keyA\\":1,\\"keyB\\":2},\\"key2\\":3}\' output = { \\"key1.keyA\\": 1, \\"key1.keyB\\": 2, \\"key2\\": 3 } ``` # Requirements - You must use the built-in `json` module to parse the JSON string. - Do not use any external libraries. # Constraints - The input JSON string will always be a valid JSON. - The input JSON will not contain circular references. - Keys in the dictionary are unique within each level of nesting. # Function Signature ```python def flatten_json(input_json: str) -> dict: # your code here pass ``` # Notes Use recursion to handle arbitrarily nested dictionaries. Ensure that the final dictionary contains all paths to the original values with the correct flattened structure.","solution":"import json def flatten_json(input_json: str) -> dict: Flattens a nested dictionary represented by a JSON string into a dictionary with dot-separated paths as keys. Args: input_json (str): A JSON string representing a nested dictionary. Returns: dict: A flat dictionary with keys as dot-separated paths. def recurse(nested_dict, parent_key=\\"\\"): items = [] for key, value in nested_dict.items(): new_key = f\\"{parent_key}.{key}\\" if parent_key else key if isinstance(value, dict): items.extend(recurse(value, new_key).items()) else: items.append((new_key, value)) return dict(items) nested_dict = json.loads(input_json) return recurse(nested_dict)"},{"question":"A robot is initially located at the origin (0, 0) on an infinite 2D grid and can perform a series of moves in discrete steps. In a single step, it can move one unit in any of the four cardinal directions: North, South, East, or West. You are given a target coordinate (X, Y) and must determine the minimum number of steps required for the robot to reach the target coordinate from the origin. -----Constraints----- - X and Y are integers. - -10^9 ≤ X, Y ≤ 10^9 -----Input----- The input is given from Standard Input in the following format: X Y -----Output----- Print the minimum number of steps required for the robot to reach the target coordinate (X, Y) from the origin. -----Sample Input----- 3 4 -----Sample Output----- 7 The robot can reach the target (3, 4) by moving 3 units East and 4 units North, totaling 7 steps.","solution":"def min_steps_to_target(X, Y): Returns the minimum number of steps required for the robot to reach the target (X, Y) from the origin (0, 0). return abs(X) + abs(Y) if __name__ == \\"__main__\\": import sys input = sys.stdin.read X, Y = map(int, input().strip().split()) print(min_steps_to_target(X, Y))"},{"question":"Given the set of integers from 1 to n, a **bijective function** `h` maps every integer in this range to a unique integer in the same range. That means, for each integer (i) between 1 and n, there exists a unique integer ( j ) such that ( h(i) = j ), and ( h ) is one-to-one and onto. You are given such a function `h` represented by a permutation of integers from 1 to n. Your task is to determine the **order** of the permutation. The order of a permutation is defined as the smallest positive integer ( m ) such that applying `h` ( m ) times returns the identity permutation. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 200) — the size of the domain and codomain of the permutation. The second line contains n integers representing the permutation ( h ) such that ( h(i) ) is the value mapped to index ( i ). -----Output----- Output one integer, the order of the permutation `h`. -----Examples----- Input 4 2 3 4 1 Output 4 Input 3 2 3 1 Output 3 Input 5 1 2 3 4 5 Output 1 -----Note----- In the first example, the permutation `h` = [2, 3, 4, 1]. Applying `h` four times will bring all elements back to their original positions: 1 -> 2 -> 3 -> 4 -> 1, 2 -> 3 -> 4 -> 1 -> 2, 3 -> 4 -> 1 -> 2 -> 3, 4 -> 1 -> 2 -> 3 -> 4. In the second example, the permutation `h` = [2, 3, 1]. Applying `h` three times will bring all elements back to their original positions: 1 -> 2 -> 3 -> 1, 2 -> 3 -> 1 -> 2, 3 -> 1 -> 2 -> 3. In the third example, the identity permutation `h` = [1, 2, 3, 4, 5] always maps each element to itself, so applying it once is sufficient to return all elements to their original positions.","solution":"def find_order(n, h): This function determines the order of the permutation h. def apply_permutation(permutation, indices): return [indices[permutation[i] - 1] for i in range(len(permutation))] identity = list(range(1, n + 1)) current_permutation = identity[:] order = 0 while True: current_permutation = apply_permutation(h, current_permutation) order += 1 if current_permutation == identity: break return order"},{"question":"During your training at a software company, you are tasked with developing an employee directory system. The system should allow searching for employee details based on various attributes. One required feature is to find the top \\"K\\" oldest employees from a given list and return their details. You need to implement a function that takes an integer N representing the number of employees, followed by N lines with each line containing two space-separated values: the name of the employee and their age. Finally, an integer K is provided to denote the number of oldest employees to return. The function should return the details of the top \\"K\\" oldest employees sorted by age in descending order. If two employees have the same age, their names should appear in the order they are provided in the input. Input: - An integer N (number of employees) - N lines, each containing a string and an integer (name of the employee and their age) - An integer K (number of oldest employees to return) Output: - The details of the top \\"K\\" oldest employees, each on a new line, in the order of their ages from oldest to youngest. - If there are less than K employees, return all the employees. Constraints: 1 ≤ N ≤ 1000 1 ≤ K ≤ N 1 ≤ age ≤ 100 Example Input: 5 Alice 45 Bob 50 Charlie 35 David 45 Eve 32 3 Example Output: Bob 50 Alice 45 David 45","solution":"def find_top_k_oldest(N, employee_data, K): Returns the top K oldest employees sorted by age in descending order. Args: N (int): Number of employees employee_data (list of tuples): Each tuple contains the name (str) and age (int) of an employee K (int): Number of oldest employees to return Returns: list of tuples: Top K oldest employees sorted by age in descending order # Sort the employee data by age in descending order # In case of a tie in age, the original order is maintained as sort is stable sorted_employee_data = sorted(employee_data, key=lambda x: x[1], reverse=True) # Return the top K oldest employees return sorted_employee_data[:K]"},{"question":"A software company is holding a competition where participants are required to solve a single problem multiple times. Each attempt is either a success (AC - Accepted) or a failure, and each attempt might take some different amount of time. The company wants to determine the efficiency of participants by measuring the minimum time in which they can successfully solve the problem from their multiple attempts. Given the times taken for each participant\'s attempts and the result of each attempt, determine who was the most efficient in solving the problem. If two participants have the same minimum time, then declare a TIE. ------ Input Format ------ - The first line contains T, the number of test cases. Then the test cases follow. - Each test case consists of two lines: - The first line contains an integer N, the number of participants. - The second line contains N times M sequences (time_1, result_1, ..., time_{M}, result_{M}) where M is the number of attempts by each participant, time_i represents the time taken for the i-th attempt, and result_i represents the outcome (either \'AC\' for a successful attempt or \'WA\' for wrong answer). ------ Output Format ------ For each test case, output `Participant X` if participant X was the most efficient, where X denotes the 1-based index of the most efficient participant. If multiple participants have the same minimum time, output `TIE`. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 5 1 ≤ M ≤ 10 1 ≤ time_{i} ≤ 100 ------ Sample Input 1 ------ 2 3 25 AC 30 WA 35 AC 20 WA 15 AC 50 WA 50 WA 45 WA 10 AC 2 40 WA 20 AC 20 AC 40 WA ------ Sample Output 1 ------ Participant 3 TIE ------ Explanation 1 ------ Test Case 1: - Participant 1: Minimum successful time = 25 - Participant 2: Minimum successful time = 15 - Participant 3: Minimum successful time = 10 Participant 3 has the smallest minimum successful time, so the output is `Participant 3`. Test Case 2: - Participant 1: Minimum successful time = 20 - Participant 2: Minimum successful time = 20 Both participants 1 and 2 have the same minimum successful time, so the output is `TIE`.","solution":"def determine_efficiency(test_cases): results = [] for test_case in test_cases: N = test_case[0] participants = test_case[1] min_times = [] for participant in participants: min_time = float(\'inf\') for i in range(0, len(participant), 2): time, result = participant[i], participant[i + 1] if result == \'AC\': min_time = min(min_time, time) min_times.append(min_time if min_time != float(\'inf\') else None) min_time = min(filter(lambda x: x is not None, min_times), default=None) if min_time is None: results.append(\\"TIE\\") else: if min_times.count(min_time) > 1: results.append(\\"TIE\\") else: results.append(f\\"Participant {min_times.index(min_time) + 1}\\") return results"},{"question":"You are given a sequence of integers representing daily temperatures. Your task is to determine the number of days with the highest temperature in the sequence. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of days. The second line contains n integers t1, t2, ..., tn (−10^9 ≤ ti ≤ 10^9), where ti represents the temperature on day i. -----Output----- Print a single integer — the number of days with the highest temperature. -----Examples----- Input 5 3 1 4 4 2 Output 2 Input 3 -1 -1 -1 Output 3 -----Note----- In the first sample, the highest temperature is 4, which occurs on two days. In the second sample, all temperatures are -1, so every day has the highest temperature, leading to an output of 3.","solution":"def count_highest_temperature_days(n, temperatures): Returns the number of days with the highest temperature in the sequence of temperatures. :param n: The number of days (1 ≤ n ≤ 100 000) :param temperatures: List of integers representing temperatures (−10^9 ≤ ti ≤ 10^9) :return: Number of days with the highest temperature if n == 0: return 0 # No days, hence no temperatures to consider max_temp = max(temperatures) count = temperatures.count(max_temp) return count"},{"question":"Alice has a peculiar addiction to her time management app, where she sets multiple alarms throughout the day. One of the features of the app allows Alice to check if an alarm time overlaps with another one she has set. Given the times of Alice\'s alarms, find out if there is any overlap between any two alarm times. ------ Input Format ------ - The first line of input will contain a single integer T, the number of test cases. Then the test cases follow. - Each test case begins with an integer N, the number of alarms Alice has set. - The next line contains N space-separated integers, A1, A2, ..., AN, representing the times of the alarms in 24-hour format (0 ≤ Ai < 24). ------ Output Format ------ For each test case, print \\"Overlap\\" if there is at least one overlapping alarm time. Otherwise, print \\"No Overlap\\". The output should be case-insensitive, meaning \\"OVERLAP\\", \\"overlap\\", and \\"OverLap\\" are all treated as identical. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 24 0 ≤ A_i < 24 for each valid i ----- Sample Input 1 ------ 3 3 5 10 5 4 6 9 21 9 2 15 22 ----- Sample Output 1 ------ Overlap Overlap No Overlap ----- Explanation 1 ------ Test case 1: Alarms are set at 5, 10, and 5. Since there are two alarms at 5, the answer is \\"Overlap\\". Test case 2: Alarms are set at 6, 9, 21, and 9. Since there are two alarms at 9, the answer is \\"Overlap\\". Test case 3: Alarms are set at 15 and 22. There are no overlapping times, so the answer is \\"No Overlap\\".","solution":"def check_alarms_overlap(T, test_cases): results = [] for i in range(T): n, alarms = test_cases[i] if len(set(alarms)) != len(alarms): results.append(\\"Overlap\\") else: results.append(\\"No Overlap\\") return results"},{"question":"The botanist is observing the growth of trees and wants to analyze a peculiar pattern of leaf arrangements. Help the botanist write a program to generate this pattern. Each pattern is derived from a single integer N based on the levels of leaf nodes. -----Input:----- - First line will contain X, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the leaf arrangement pattern. -----Constraints----- - 1 leq X leq 30 - 1 leq N leq 20 -----Sample Input:----- 4 1 2 3 4 -----Sample Output:----- O O O O O O O O O O O O O O O O O O -----EXPLANATION:----- No need, as the pattern is self-descriptive based on input.","solution":"def generate_leaf_pattern(n): result = [] for i in range(1, n + 1): result.append(\' \' * (n - i) + \'O \' * i) return result def process_test_cases(test_cases): result = [] for n in test_cases: result.extend(generate_leaf_pattern(n)) return result def main(input_lines): input_data = input_lines.strip().split() X = int(input_data[0]) test_cases = [int(input_data[i]) for i in range(1, X + 1)] output = process_test_cases(test_cases) return \\"n\\".join(output)"},{"question":"Given a list of integers that represent the stock price of a company over multiple days, write a function to determine the maximum profit that can be made by buying on one day and selling on another later day. If no profit can be made, return 0. You may not engage in multiple transactions (i.e., you must sell before you buy again). Parameters: * A list of stock prices (integers) for a number of consecutive days. Your function should return an integer representing the maximum profit possible. **Note:** - If the input list is empty or contains only one day, the profit is 0. Examples #1: ``` [7, 1, 5, 3, 6, 4] --> 5 ``` Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. #2: ``` [7, 6, 4, 3, 1] --> 0 ``` Explanation: No transaction is done, profit = 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from the given list of stock prices. if not prices or len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given two arrays, `arr1` and `arr2`, both of which are sorted in ascending order. Each array may have different sizes. Your task is to merge these two arrays into a single sorted array without using any built-in sort functions. Example: Input: arr1 = [1, 3, 5, 7], arr2 = [2, 4, 6, 8] Output: [1, 2, 3, 4, 5, 6, 7, 8] Input: arr1 = [0, 4, 10], arr2 = [1, 5, 11] Output: [0, 1, 4, 5, 10, 11] Restrictions: - All elements are integers. - The size of each array will be in the range [0, 10000]. - The combined length of the arrays will not exceed 20000.","solution":"def merge_sorted_arrays(arr1, arr2): This function merges two sorted arrays into one sorted array without using built-in sort functions. merged_array = [] i = 0 j = 0 # Iterate over both arrays and append the smaller element to the merged_array while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append remaining elements in arr1 (if any) while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append remaining elements in arr2 (if any) while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"A company is organizing a competition where participants are required to accumulate points by completing various tasks. Each task has a positive integer point value. The company wants to distribute the tasks in such a way that the difference in the total points accumulated between any two participants is minimized. You are provided with an array of integers representing the point values of the tasks. Your task is to write a program that determines the minimum possible difference in points between the two participants after distributing the tasks optimally. -----Input----- The first line contains an integer n (1 leq n leq 50), the number of tasks. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 1000), the point values of the tasks. -----Output----- Output a single integer, the minimum possible difference in total points between the two participants. -----Examples----- Input 5 1 2 3 4 5 Output 1 Input 3 10 20 30 Output 0 -----Note----- In the first example, the tasks can be distributed as [1, 2, 3] and [4, 5] with total points 6 and 9, resulting in a difference of 3. Further optimizing, we can distribute as [1, 4, 5] and [2, 3] with total points 10 and 5. Therefore, the optimal distribution results in a difference of 1. In the second example, the tasks can be distributed as [10, 20] and [30] with total points 30 and 30, resulting in a difference of 0.","solution":"def min_difference(n, points): total_sum = sum(points) dp = [False] * (total_sum // 2 + 1) dp[0] = True for point in points: for j in range(total_sum // 2, point - 1, -1): dp[j] = dp[j] or dp[j - point] for i in range(total_sum // 2, -1, -1): if dp[i]: return total_sum - 2 * i return total_sum # this line will not be reached normally because of the constraints."},{"question":"You are given a string and you need to find the length of the longest substring that contains at most \'k\' distinct characters. Here\'s the approach to solve this problem: You can use a sliding window technique where you maintain a window defined by two pointers. You expand the window by moving the right pointer to the right and include one character at a time. If the number of distinct characters exceeds \'k\', you move the left pointer to the right, shrinking the window until the number of distinct characters is at most \'k\'. The result is the maximum size of such a window encountered during the process. Input The first line of input will contain a string \'s\' which consists of only lowercase English letters (1 ≤ |s| ≤ 10^5). The second line contains an integer \'k\' (1 ≤ k ≤ 26), representing the maximum number of distinct characters. Output Print a single integer, the length of the longest substring with at most \'k\' distinct characters. SAMPLE INPUT eceba 2 SAMPLE OUTPUT 3 Explanation: The substring is \\"ece\\" with length 3 which contains \'e\', \'c\'.","solution":"def length_of_longest_substring_k_distinct(s, k): Returns the length of the longest substring with at most k distinct characters. if not s: return 0 n = len(s) left = 0 right = 0 max_length = 0 char_count = {} while right < n: char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"You have been given an array `arr` of positive integers, which represents the heights of students standing in a line. The heights are shuffled such that no student is in their correct position. A student will be in the correct position if there are no students taller than them standing before them in the line. Your task is to sort the array so that every student is in their correct position and output the array. # Example ```python correct_positions([4, 2, 3, 6, 5, 1]) # Output: [1, 2, 3, 4, 5, 6] correct_positions([7, 1, 5, 2, 3, 6]) # Output: [1, 2, 3, 5, 6, 7] ``` # Note - The function should be named `correct_positions`. - The input list will always contain at least one element and all elements are unique. - The function should return the sorted list.","solution":"def correct_positions(arr): Sorts the array such that no student is out of their position. return sorted(arr)"},{"question":"A large software system receives logs of user activities and events. These logs are stored in a time-series format with timestamps associated with each event. Each log entry contains a timestamp and a numeric value representing some statistic or metric related to the event. You are tasked with analyzing these logs to answer queries about the data. Specifically, you need to implement a function that, given a time range, returns the sum of the metrics within that interval. Input The first line of input contains an integer n (1 ≤ n ≤ 100,000), representing the number of log entries. The next n lines each contain two integers ti (1 ≤ ti ≤ 10^9) and vi (1 ≤ vi ≤ 100), where ti is the timestamp and vi is the value of the metric. The next line contains an integer q (1 ≤ q ≤ 100,000), representing the number of queries. The next q lines each contain two integers t_start and t_end (1 ≤ t_start ≤ t_end ≤ 10^9), representing the time range for the query. Output Output q integers, each being the sum of the metrics for the corresponding query. Example Input 5 1 5 2 3 4 7 6 2 9 1 3 1 5 2 6 6 9 Output 15 10 3 Explanation For the first query, the sum of metrics from timestamp 1 to 5 is 5 + 3 + 7 = 15. For the second query, the sum of metrics from timestamp 2 to 6 is 3 + 7 + 2 = 12. For the third query, the sum of metrics from timestamp 6 to 9 is 2 + 1 = 3.","solution":"def sum_metrics_within_range(logs, queries): Calculates the sum of metrics within a given time range for each query. Parameters: logs (List[Tuple[int, int]]): List of tuples where each tuple contains a timestamp and a metric value. queries (List[Tuple[int, int]]): List of tuples where each tuple contains a start time and end time for the query. Returns: List[int]: List of sums of metrics for each query. # Sort logs based on timestamp for efficient access logs.sort() results = [] for t_start, t_end in queries: total_sum = 0 for t, v in logs: if t_start <= t <= t_end: total_sum += v results.append(total_sum) return results"},{"question":"Vicky loves playing with strings. He recently learned about **palindromes** and now he\'s curious to find out if changing the order of characters in a given string can form a palindrome. A palindrome is a string that reads the same forward and backward. Your task is to help Vicky determine if any permutation of the given string can be rearranged to form a palindrome. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, a string S. -----Output:----- For each test case, output \\"YES\\" if any permutation of the string can form a palindrome, otherwise output \\"NO\\". -----Constraints----- - 1 leq T leq 10^5 - 1 leq |S| leq 1000 -----Sample Input:----- 2 civic ivicc -----Sample Output:----- YES YES","solution":"def can_form_palindrome(s: str) -> str: Determines if any permutation of the given string can be rearranged to form a palindrome. from collections import Counter # Count frequencies of each character in the string char_count = Counter(s) # Count how many characters have an odd number of occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be permuted to a palindrome if it has at most one character with an odd count return \\"YES\\" if odd_count <= 1 else \\"NO\\" # Function to handle multiple test cases def process_test_cases(T: int, test_cases: list) -> list: results = [] for s in test_cases: results.append(can_form_palindrome(s)) return results"},{"question":"A company has a system that tracks employee check-ins and check-outs throughout the day via timestamps in a given format. Given a list of check-in and check-out timestamps for a day, your task is to determine the total number of minutes an employee was present in the office during that day. Each timestamp is a string in the \\"HH:MM\\" format representing the time in a 24-hour clock. The input will consist of an even number of timestamps, with check-ins and check-outs alternating. Input Format: The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of timestamps (an even number). - The second line contains N space-separated strings representing the timestamps. Constraints: - 1 leq T leq 10 - 2 leq N leq 144 (N is always even) - Each timestamp is in the valid \\"HH:MM\\" format. Output Format: For each test case, print the total number of minutes the employee was present in the office. Sample Input: 2 4 09:00 12:00 13:00 17:00 6 08:30 12:45 14:15 15:30 16:00 18:00 Sample Output: 420 405 Explanation: In the first test case: - Check-in at 09:00 and check-out at 12:00 yields 180 minutes. - Check-in at 13:00 and check-out at 17:00 yields 240 minutes. - Total time: 180 + 240 = 420 minutes. In the second test case: - Check-in at 08:30 and check-out at 12:45 yields 255 minutes. - Check-in at 14:15 and check-out at 15:30 yields 75 minutes. - Check-in at 16:00 and check-out at 18:00 yields 75 minutes. - Total time: 255 + 75 + 75 = 405 minutes.","solution":"def calculate_minutes(time1, time2): Calculate the minutes between two time stamps in \\"HH:MM\\" format h1, m1 = map(int, time1.split(\':\')) h2, m2 = map(int, time2.split(\':\')) return (h2 - h1) * 60 + (m2 - m1) def total_minutes_present(test_cases): results = [] for case in test_cases: N, timestamps = case total_minutes = 0 for i in range(0, N, 2): check_in = timestamps[i] check_out = timestamps[i+1] total_minutes += calculate_minutes(check_in, check_out) results.append(total_minutes) return results def parse_input(input_str): Parses the input from a single string representing the whole input lines = input_str.strip().split(\'n\') index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 timestamps = lines[index].split() index += 1 test_cases.append((N, timestamps)) return test_cases"},{"question":"Farmer John owns a rectangular field and wants to divide the field into the maximum number of square plots possible. The side of each plot must be an integer length, and every plot must have the same size. Farmer John needs your help to determine the largest possible side length of the square plots, as well as the number of such plots that can be formed. Given the dimensions of Farmer John\'s field, your task is to write a program that computes these values. INPUT The first line contains an integer, 0 < t <= 100, which represents the number of test cases. For each test case, there are two space-separated integers, 1 <= L, W <= 10000, where L is the length and W is the width of the field. OUTPUT For each test case, output two space-separated integers on a new line: the side length of the largest possible square plot, and the total number of such square plots. SAMPLE INPUT 2 15 10 12 16 SAMPLE OUTPUT 5 6 4 12 Explanation In the first test case, the largest square plot has a side length of 5, and the field can be divided into 6 such plots (2 plots along the width and 3 plots along the length). In the second test case, the largest square plot has a side length of 4, and the field can be divided into 12 such plots (4 plots along both the width and the length).","solution":"from math import gcd def max_square_plots(t, dimensions): results = [] for i in range(t): L, W = dimensions[i] side_length = gcd(L, W) num_plots = (L // side_length) * (W // side_length) results.append((side_length, num_plots)) return results"},{"question":"You are given a list of n integers. You need to process q queries where each query is one of two kinds: 1. Update the value at a specified index to a new value. 2. Compute and return the sum of values within a specified range (inclusive of both ends). Note that you should solve the problem efficiently to handle up to q queries and range sum computations in an optimal manner. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of integers in the list and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the initial list of integers. Each of the next q lines contains a query in the form of: - `1 i x`: Update the value at index i to x (1 ≤ i ≤ n, 1 ≤ x ≤ 10^6). - `2 l r`: Compute the sum of values from index l to index r (1 ≤ l ≤ r ≤ n). Output For each query of the second kind, print the resulting sum. Examples Input 5 5 1 2 3 4 5 1 3 10 2 1 3 1 5 6 2 4 5 2 1 5 Output 13 10 24 Input 7 4 5 8 6 3 4 7 2 2 2 5 1 4 10 2 4 7 2 1 3 Output 21 23 19","solution":"class RangeSumQuery: def __init__(self, nums): self.n = len(nums) self.nums = nums # Initialize the segment tree self.tree = [0] * (2 * self.n) self._build() def _build(self): # Populate the leaves of the tree for i in range(self.n): self.tree[self.n + i] = self.nums[i] # Calculate the values for the internal nodes for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, index, value): pos = index + self.n self.tree[pos] = value # Move up and update the ancestors while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] self.nums[index] = value def range_sum(self, left, right): # Adjust to the segment tree indexing left += self.n right += self.n summation = 0 while left <= right: if left % 2 == 1: summation += self.tree[left] left += 1 if right % 2 == 0: summation += self.tree[right] right -= 1 left //= 2 right //= 2 return summation # Helper function to process the input and handle the queries def process_queries(n, q, nums, queries): rsq = RangeSumQuery(nums) results = [] for query in queries: if query[0] == 1: _, index, value = query rsq.update(index - 1, value) elif query[0] == 2: _, left, right = query results.append(rsq.range_sum(left - 1, right - 1)) return results"},{"question":"You are given a list of integers and a target sum. You need to determine if there are distinct integers in the list that add up to the target sum. If such a pair exists, return true; otherwise, return false. -----Constraints----- - The list of integers will contain at least 2 elements and at most 10^5 elements. - Each integer in the list will be in the range [-10^9, 10^9]. - The target sum will be in the range [-2 times 10^9, 2 times 10^9]. -----Input----- The input is given from Standard Input in the following format: - The first line contains an integer, n, the number of integers in the list. - The second line contains the target sum, an integer. - The third line contains n space-separated integers, representing the list of integers. -----Output----- Print \\"true\\" if there exist distinct integers in the list that add up to the target sum, otherwise print \\"false\\". -----Sample Input----- 5 10 3 5 -1 7 11 -----Sample Output----- true In this example, there is a pair (3, 7) in the list that adds up to the target sum 10.","solution":"def has_pair_with_sum(nums, target): Determines if there are distinct integers in the list that add up to the target sum. seen = set() for num in nums: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"In a country far, far away, there\'s an oval lake with n islands connected by bridges. Each bridge connects exactly two islands, and no two bridges connect the same pair of islands. The islands and bridges together form a single connected component. A famous fisherman named Peter wants to visit all the islands by using as few bridges as possible. Peter can start at any island and must visit each island at least once. Peter wants to know the minimum number of bridges he needs to cross while making his trip. Note that Peter can start at any island (he\'s free to choose the starting island). Input The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5), the number of islands and the number of bridges, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u != v), describing a bridge connecting islands u and v. Output Output a single integer representing the minimum number of bridges Peter has to cross. Example Input 5 5 1 2 1 3 2 4 3 4 4 5 Output 4 Note In the example test case, Peter can follow the path 1 -> 2 -> 4 -> 3 -> 5 or any path that covers all islands. Either way, he has to cross a minimum of 4 bridges.","solution":"def min_bridges_to_cross(n, m, bridges): This function calculates the minimum number of bridges Peter needs to cross to visit all islands in a connected graph. Parameters: n (int): Number of islands m (int): Number of bridges bridges (list of tuples): List of pairs (u, v) representing bridges connecting islands u and v Returns: int: Minimum number of bridges Peter has to cross # In a connected graph, in order to visit all nodes, the minimum number of edges # to cross is always equal to n - 1. return n - 1"},{"question":"You are given a string s consisting of n lowercase letters. You are allowed to modify up to k characters of the string. Your goal is to maximize the length of the longest substring that contains the same character. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ n) — the length of the string and the maximum number of modifications allowed. The second line contains the string s consisting of n lowercase letters. -----Output----- On the first line print a single integer — the length of the longest substring containing the same character you can achieve after no more than k modifications. -----Examples----- Input 6 2 abaccc Output 5 Input 5 1 aaaaa Output 5 -----Note----- In the first example, you can change the \'b\' and the second \'a\' to \'c\' to get the string \\"accccc\\", achieving a longest substring of length 5. In the second example, the string is already composed of only the same character, so the longest substring is 5 regardless of the allowed modifications.","solution":"def longest_substring_after_k_modifications(n, k, s): Returns the length of the longest substring containing the same character achievable by making up to k modifications. max_len = 0 # Initialize the maximum length of substring found for char in set(s): # Check for each character left = 0 changes = 0 # Counter for the number of changes made for right in range(n): if s[right] != char: changes += 1 while changes > k: if s[left] != char: changes -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"In a certain programming challenge, you are given `n` timed events that occur on a timeline. Each event is characterized by a start time and end time, and during the event no other events can overlap. Your task is to determine the maximum number of non-overlapping events that can be attended. -----Input----- - The first line contains a single integer `T`, the number of test cases. - For each test case: - The first line contains a single integer `n`, the number of events. - Each of the following `n` lines contains two integers `start` and `end`, the start and end times of an event. -----Output----- For each test case, output a single integer — the maximum number of non-overlapping events that can be attended. -----Constraints----- - `1 ≤ T ≤ 10` - `1 ≤ n ≤ 10^5` - `0 ≤ start < end ≤ 10^9` -----Example Input----- 2 3 1 5 2 6 8 10 4 1 3 2 4 3 5 8 9 -----Example Output----- 2 3 ----- Explanation: In the first test case, the maximum number of non-overlapping events is 2 because you can attend the events [1, 5] and [8, 10]. In the second test case, the maximum number of non-overlapping events is 3 because you can attend the events [1, 3], [3, 5], and [8, 9].","solution":"def max_non_overlapping_events(test_cases): results = [] for n, events in test_cases: # Sort events by end time events.sort(key=lambda x: x[1]) count = 0 last_end = -1 for start, end in events: if start >= last_end: count += 1 last_end = end results.append(count) return results # Helper function to format input and output for the problem def process_input_output(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(input_lines[index]) events = [] for i in range(n): start, end = map(int, input_lines[index + 1 + i].split()) events.append((start, end)) test_cases.append((n, events)) index += n + 1 results = max_non_overlapping_events(test_cases) for result in results: print(result)"},{"question":"Alice and Bob are playing a game with an array of positive integers. They take turns choosing a number from either end of the array, and the goal is to maximize the sum of the numbers chosen by each player. Alice always goes first. If both players play optimally, determine the maximum sum that Alice can achieve. Example 1: Input: arr = [1, 2, 3, 4] Output: 6 Explanation: Alice starts first and can choose either 1 or 4. If Alice chooses 4 (optimal choice), Bob will choose 3 (optimal choice). Now Alice will choose 2 and Bob will choose 1. Alice\'s total is 4 + 2 = 6, and Bob\'s total is 3 + 1 = 4. Example 2: Input: arr = [8, 15, 3, 7] Output: 22 Explanation: Alice starts first and can choose either 8 or 7. If Alice chooses 7 (optimal choice), Bob will choose 15 (optimal choice). Now Alice will choose 8 and Bob will choose 3. Alice\'s total is 7 + 15 = 22, and Bob\'s total is 15 + 3 = 18. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxSum() which takes an array of positive integers arr as its only parameter and returns the maximum sum that Alice can achieve if both play optimally. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 ≤ arr.length ≤ 100 1 ≤ arr[i] ≤ 1000","solution":"def maxSum(arr): n = len(arr) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = arr[i] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 dp[i][j] = max(arr[i] + min(dp[i + 2][j] if i + 2 <= j else 0, dp[i + 1][j - 1] if i + 1 <= j - 1 else 0), arr[j] + min(dp[i + 1][j - 1] if i + 1 <= j - 1 else 0, dp[i][j - 2] if i <= j - 2 else 0)) return dp[0][n - 1]"},{"question":"John is keen on improving his typing speed and accuracy. To help him practice, he decided to create a program that checks whether the sequence of key presses he made is consistent with the characters on his keyboard. The program takes a string input representing John\'s typing and another string representing the allowed sequence of characters on his keyboard. Write a program to determine if John typed only the characters that exist on his keyboard in the exact sequence. Input The input should be given in the following format: The first line contains a string `keys` that consists of distinct lowercase English letters representing John\'s keyboard configuration (1 ≤ length(keys) ≤ 26). The second line contains a string `typed` that consists of lowercase English letters representing the sequence of characters John typed (1 ≤ length(typed) ≤ 100). Output Output \\"yes\\" if John only used characters that are present on his keyboard and in the correct order. Otherwise, output \\"no\\". Examples Input abcdefg abc Output yes Input abcdefg axc Output no Input qwerty qweryt Output yes","solution":"def is_typed_correctly(keys, typed): Checks if the sequence of key presses in \'typed\' is consistent with the characters on \'keys\'. keys_index = 0 for char in typed: while keys_index < len(keys) and keys[keys_index] != char: keys_index += 1 if keys_index == len(keys): return \\"no\\" keys_index += 1 return \\"yes\\""},{"question":"A popular mobile game offers a new feature where players can combine different items to create stronger, magical artifacts. You’re given a list of item effects and another list of artifacts you can create by combining different items. Each item is described by a unique identifier and its effect value. Each artifact requires a specific combination of items to be created and provides a certain power level. Your task is to determine the highest power level of an artifact that can be created given the available items. Each artifact is described by a list of item identifiers that combine to create it and its power level. An artifact can only be created if all required items are available. -----Input----- Each input consists of multiple test cases. The first line contains an integer t (1 le t le 10), the number of test cases. Each test case begins with an integer m (1 le m le 100), the number of available items. The next m lines each contain two space-separated integers, id and e, where id (1 le id le 100) is the item identifier and e (1 le e le 10000) is the effect value of the item. Following this, there is an integer a (1 le a le 50), the number of artifacts. The next a lines each contain a series of integers followed by a floating-point number. The first part of each line contains the item identifiers required for that artifact, and the last part of the line is the power level of the artifact. There will be at most 10 identifiers per artifact. -----Output----- For each test case, output a single real number, which represents the highest power level of any artifact that can be constructed using the available items. Output this number to exactly three decimal places, rounded (standard 5 uparrow / 4 downarrow rounding). If no artifact can be created, output 0.000. -----Examples----- Sample Input: 1 3 1 100 2 200 3 300 3 1 2 1500.45 2 3 2000.50 1 3 1800.30 Sample Output: 2000.500","solution":"def find_highest_power_level(num_cases, test_cases): results = [] for case in test_cases: items = case[\'items\'] artifacts = case[\'artifacts\'] # Convert item list to dict for quick lookup item_dict = {i[\'id\']: i[\'effect\'] for i in items} max_power_level = 0.0 for artifact in artifacts: # Check if all items required by the artifact are available if all(item in item_dict for item in artifact[\'items\']): max_power_level = max(max_power_level, artifact[\'power\']) results.append(f\\"{max_power_level:.3f}\\") return results # Example usage with input data test_cases = [ { \'num_items\': 3, \'items\': [ {\'id\': 1, \'effect\': 100}, {\'id\': 2, \'effect\': 200}, {\'id\': 3, \'effect\': 300}, ], \'num_artifacts\': 3, \'artifacts\': [ {\'items\': [1, 2], \'power\': 1500.45}, {\'items\': [2, 3], \'power\': 2000.50}, {\'items\': [1, 3], \'power\': 1800.30}, ] } ] num_cases = 1 print(find_highest_power_level(num_cases, test_cases))"},{"question":"Matt has a collection of rectangular bookshelves, each composed of M rows and N columns. Matt wants to place his books on these shelves, but he wants to ensure that the books are placed in increasing order of their heights across the rows and columns. You are required to write a program to help Matt rearrange his books. Given the current arrangement of books (where each book is represented by its height), the program should rearrange the books within each shelf so that each row and each column have heights sorted in increasing order. The program should print the rearranged books for each shelf. Input The input is a sequence of datasets. The end of input is indicated by a line containing two zeros. Each dataset is formatted as follows: M N h11 h12 h13 ... h1N h21 h22 h23 ... h2N . . hM1 hM2 hM3 ... hMN M indicates the number of rows and N indicates the number of columns of the bookshelf. Every following line within the dataset represents the height of the books on that particular row of the bookshelf. Output For each dataset, the output should have M lines. Each line will represent the rearranged heights of the books for that particular row in the bookshelf. Example Input 2 3 3 2 1 6 5 4 0 0 Output 1 2 3 4 5 6","solution":"def rearrange_books(bookshelves): Rearranges books on bookshelves to ensure each row and column are sorted in increasing order. Parameters: bookshelves (list): A list of tuples, each containing (M, N, books). M is the number of rows, N is the number of columns, and books is a list of lists representing the heights of books. Returns: result (list): A list of the rearranged bookshelves. result = [] for M, N, books in bookshelves: # Flatten the bookshelf into a single list and sort it flattened_books = [book for row in books for book in row] flattened_books.sort() # Create the rearranged bookshelf in row-major order rearranged_shelf = [] for i in range(M): row = flattened_books[i * N:(i + 1) * N] rearranged_shelf.append(row) result.append(rearranged_shelf) return result def parse_input(input_str): Parse input string to extract bookshelves information. Parameters: input_str (str): The input string containing the bookshelf data. Returns: bookshelves (list): A list of bookshelf data. lines = input_str.strip().split(\\"n\\") bookshelves = [] i = 0 while i < len(lines): M, N = map(int, lines[i].split()) if M == 0 and N == 0: break i += 1 books = [] for _ in range(M): books.append(list(map(int, lines[i].split()))) i += 1 bookshelves.append((M, N, books)) return bookshelves def format_output(rearranged_bookshelves): Format the rearranged bookshelves for output. Parameters: rearranged_bookshelves (list): A list of the rearranged books. Returns: output_str (str): The formatted output string. result_lines = [] for shelf in rearranged_bookshelves: for row in shelf: result_lines.append(\\" \\".join(map(str, row))) return \\"n\\".join(result_lines) def main(input_str): bookshelves = parse_input(input_str) rearranged_bookshelves = rearrange_books(bookshelves) return format_output(rearranged_bookshelves)"},{"question":"------ Problem Description ------ Chef has discovered a string manipulation game and wants your help to figure out its outcome. The game involves two strings, A and B. Chef can perform the following operations on string A: 1. Choose any single character from A and replace it with any other character. 2. Remove any single character from A. Chef wants to make string A equal to string B by performing a minimum number of operations. It’s possible that you might need to remove all characters from A or add characters to it. Determine the minimum number of operations required to transform string A into string B. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. The following lines contain T pairs of strings, one pair per line: A and B. ------ Output ------ For each pair of strings A and B, output a single integer representing the minimum number of operations needed to transform A into B. ------ Constraints ------ - 1 leq T leq 100 - 0 leq |A|, |B| leq 1000 ------ Sample Input 1 ------ 3 horse ros intention execution abc abc ------ Sample Output 1 ------ 3 5 0 ------ Explanation ------ 1. In the first case, you can transform \\"horse\\" to \\"ros\\" by: - Replacing \'h\' with \'r\' (horse -> rorse) - Removing \'o\' (rorse -> rrse) - Removing \'r\' (rrse -> rse) - Replacing \'e\' with \'s\' (rse -> ros) 2. In the second case, you can transform \\"intention\\" to \\"execution\\" by: - Replacing \'i\' with \'e\' (intention -> entention) - Replacing \'n\' with \'x\' (ention -> extention) - Replacing \'t\' with \'e\' (extention -> exenction) - Replacing \'n\' with \'u\' (exenction -> exeuction) - Inserting \'t\' (exeuction -> execution) 3. In the third case, strings are already equal, so no operations are needed. Note: The operations needed here basically guide us towards the minimum edit distance calculation approach.","solution":"def min_distance(A, B): Compute the minimum number of operations required to transform string A into string B. Operations allowed are insertion, deletion, and replacement. len_A = len(A) len_B = len(B) # Create a (len_A+1) x (len_B+1) 2D array to store results of subproblems dp = [[0] * (len_B + 1) for _ in range(len_A + 1)] for i in range(len_A + 1): for j in range(len_B + 1): # If A is empty, then we need to insert all characters of B if i == 0: dp[i][j] = j # If B is empty, then we need to remove all characters of A elif j == 0: dp[i][j] = i # If last characters are the same, ignore last character and recur for remaining string elif A[i-1] == B[j-1]: dp[i][j] = dp[i-1][j-1] # If last character are different, consider all possibilities # and find the minimum else: dp[i][j] = 1 + min(dp[i-1][j], # Remove dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[len_A][len_B] def min_operations_to_transform(T, cases): Given number of test cases and each pair of strings A, B, returns minimum number of operations required to transform A into B. results = [] for A, B in cases: result = min_distance(A, B) results.append(result) return results"},{"question":"In a distant land, the currency system is quite unusual. There are N distinct types of coins with each type having a unique value. A beggar wants to collect exactly C coins, but he can only carry a maximum of K coins at a time. Additionally, the beggar can perform a special trick: he can double the value of all coins he has with him at any point in time. Your task is to determine the minimum number of coins the beggar needs to pick to achieve exactly C coins, considering he can use his value-doubling trick any number of times. If it is not possible to collect exactly C coins, output -1. -----Constraints----- - All values in input are integers. - 1 ≤ N ≤ 20 - 1 ≤ C ≤ 10^6 - 1 ≤ K ≤ 20 - 1 ≤ value of each coin ≤ 10^6 -----Input----- Input is given from Standard Input in the following format: N C K v_1 v_2 ... v_N Each of the next N lines contains the value of each coin. -----Output----- Print the minimum number of coins required to achieve exactly C coins. If it\'s not possible, print -1. -----Sample Input----- 4 12 3 1 5 7 10 -----Sample Output----- 2 By using the coins with values 5 and 7, the beggar can reach his goal (5+7 = 12). -----Sample Input----- 3 20 2 8 3 6 -----Sample Output----- -1 It is impossible to achieve exactly 20 with the given coins because the maximum number of coins he can pick at a time is 2, and there is no combination that sums to 20 without exceeding this limit.","solution":"def min_coins_to_collect(N, C, K, coin_values): # Dynamic programming approach to solve the problem. dp = [float(\'inf\')] * (C + 1) # Initialize with infinity dp[0] = 0 # 0 coins needed to make sum 0 for coin in coin_values: for x in range(coin, C + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # Now check if the solution meets the maximum K coins at a time constraint min_coins = dp[C] if dp[C] != float(\'inf\') else -1 if min_coins <= K: return min_coins else: return -1 # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) C = int(data[1]) K = int(data[2]) coin_values = list(map(int, data[3:])) print(min_coins_to_collect(N, C, K, coin_values))"},{"question":"Write a function `shuffle_array` that takes a list of integers and rearranges its elements in random order. The function should return the shuffled list. Notes: - You should not use any built-in functions or library methods for shuffling elements. - The original list should remain unchanged, and the function should return a new list with shuffled elements.","solution":"import random def shuffle_array(arr): Returns a new list with elements of arr shuffled in random order. # Copy the original list to avoid modifying it shuffled_arr = arr[:] # Perform a Fisher-Yates shuffle n = len(shuffled_arr) for i in range(n - 1, 0, -1): j = random.randint(0, i) # Swap elements at indices i and j shuffled_arr[i], shuffled_arr[j] = shuffled_arr[j], shuffled_arr[i] return shuffled_arr"},{"question":"A magical forest is inhabited by mystical creatures called zylons. Zylons live in treehouses built on a gigantic tree. Each treehouse is located at a node of the tree. The tree has n nodes and n-1 edges. Greg, a zylon researcher, is studying the energy levels of zylons in different treehouses. Greg knows the energy level of zylons living in each treehouse, represented by an array a of size n. He wants to find the maximum possible sum of energy levels of zylons living in a path between any two nodes in the tree. The sum should be calculated as the sum of energy levels of zylons in the treehouses located on the path. Help Greg to find the maximum possible sum of energy levels between any two nodes in the tree. Input The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of nodes. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the energy levels of zylons in treehouses. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — there is an edge between node u and node v. Output Print a single integer — the maximum possible sum of energy levels of zylons in a path between any two nodes in the tree. Example Input 5 3 2 1 -5 4 1 2 1 3 2 4 2 5 Output 10 Note In the example, the optimal path is 4 -> 2 -> 1 -> 5, which has the sum 3 + 2 + 4 + 1 = 10.","solution":"def max_energy_path(n, energy_levels, edges): from collections import defaultdict import sys sys.setrecursionlimit(10**6) def dfs(node, parent): max1, max2 = 0, 0 # To store the top two max contributions from children for neighbor in tree[node]: if neighbor == parent: continue result = dfs(neighbor, node) if result > max1: max1, max2 = result, max1 elif result > max2: max2 = result # update global max_path_sum nonlocal max_path_sum max_path_sum = max(max_path_sum, max1 + max2 + energy_levels[node]) # return max contribution from this node (including its own energy level) return max1 + energy_levels[node] tree = defaultdict(list) for u, v in edges: tree[u-1].append(v-1) tree[v-1].append(u-1) max_path_sum = -10**9 * n # Initialize with a very small number dfs(0, -1) return max_path_sum # Helper function to take input and call the main function def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) energy_levels = list(map(int, data[1:n+1])) edges = [] index = n + 1 for _ in range(n-1): edges.append((int(data[index]), int(data[index+1]))) index += 2 result = max_energy_path(n, energy_levels, edges) print(result)"},{"question":"Write a function `find_missing_number` that takes a list of integers containing a sequence of numbers from 1 to n with exactly one number missing. The function should return the missing number. For example: ```python find_missing_number([1, 2, 4, 5, 6]) == 3 find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6 find_missing_number([1, 2, 3, 5]) == 4 ```","solution":"def find_missing_number(nums): Finds the missing number in a list of integers containing a sequence from 1 to n with one number missing. n = len(nums) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) return expected_sum - actual_sum"},{"question":"A street vendor records the sales of his items for a particular day. For each transaction, he notes down the item name and the quantity sold. Over the course of the day, he may sell different quantities of the same item multiple times. Your task is to determine the total number of sales for each unique item by the end of the day and output the results in alphabetical order of the item names. -----Input----- The first line of input indicates the number of transactions, n (1 leq n leq 1000). The next n lines each represent a transaction containing an item name, a space, and a quantity sold. The item name consists of only uppercase and lowercase English letters and is no longer than 100 characters. The quantity sold is a positive integer not exceeding 1000. -----Output----- For each unique item, output the item name followed by a space and the total quantity sold, sorted by item name. -----Examples----- Sample Input: 6 apple 4 banana 3 apple 2 orange 7 banana 1 apple 5 Sample Output: apple 11 banana 4 orange 7","solution":"def calculate_total_sales(transactions): Calculates the total number of sales for each unique item and sorts them alphabetically. Parameters: transactions (list of tuples): A list of (item_name, quantity) tuples. Returns: list of tuples: A sorted list of (item_name, total_quantity) tuples. sales_dict = {} for item, quantity in transactions: if item in sales_dict: sales_dict[item] += int(quantity) else: sales_dict[item] = int(quantity) sorted_sales = sorted(sales_dict.items()) return sorted_sales"},{"question":"**[Question 2]: Sorting Book Titles** You are given a list of book titles. The book titles are in random order, and some words in the titles are capitalized while others are in lowercase. Write a function to sort the book titles in alphabetical order while ignoring the capitalization of the words. The sorted list should maintain the original case of each word in the titles. For example, given the list of titles: ``` [\\"the Great Gatsby\\", \\"to Kill a Mockingbird\\", \\"Pride and Prejudice\\", \\"the Catcher in the Rye\\"] ``` Your function should return: ``` [\\"Pride and Prejudice\\", \\"the Catcher in the Rye\\", \\"the Great Gatsby\\", \\"to Kill a Mockingbird\\"] ``` # Function Signature ```python def sort_book_titles(titles: List[str]) -> List[str]: pass ``` # Input - `titles` (List[str]): A list of book titles containing 1 to 100 elements where each element is a string of length 1 to 100. # Output - (List[str]): The sorted list of book titles. # Constraints - The input list is non-empty. - The book titles contain only English letters and spaces. - Capitalization should be ignored during sorting but maintained in the output. # Example ```python titles = [\\"the Great Gatsby\\", \\"to Kill a Mockingbird\\", \\"Pride and Prejudice\\", \\"the Catcher in the Rye\\"] print(sort_book_titles(titles)) # Output: [\\"Pride and Prejudice\\", \\"the Catcher in the Rye\\", \\"the Great Gatsby\\", \\"to Kill a Mockingbird\\"] ```","solution":"from typing import List def sort_book_titles(titles: List[str]) -> List[str]: Sorts the book titles in alphabetical order, ignoring capitalization, but maintains the original case of each word in the titles. return sorted(titles, key=lambda title: title.lower())"},{"question":"The kingdom of Barynia has a capital city called Baryburg, which is surrounded by n towns. There are m bidirectional roads connecting these towns. The king wants to know the minimum number of new roads required to ensure that there is a path between any two towns or a town and Baryburg. A road network between towns is maintained in the form of an adjacency list. Help the king by writing a program that determines the minimum number of new roads needed to connect all the towns and Baryburg. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2·10^5) — the number of towns and the number of roads, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) — a road connecting town u and town v. There are no duplicate roads, and no town will have a road to itself. -----Output----- Print a single integer, the minimum number of new roads required to ensure that all towns and Baryburg are connected. -----Examples----- Input 4 2 1 2 3 4 Output 1","solution":"def find_minimum_new_roads(n, m, roads): Calculates the minimum number of new roads required to connect all towns and Baryburg. :param n: Number of towns :param m: Number of existing roads :param roads: List of tuples representing the existing roads :return: Minimum number of new roads required from collections import defaultdict, deque # Initialize the adjacency list for the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Function to perform BFS and find all connected components def bfs(start, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # We have n towns numbered from 1 to n visited = [False] * (n + 1) num_components = 0 # Counting the number of connected components for i in range(1, n + 1): if not visited[i]: bfs(i, visited) num_components += 1 # The number of new roads needed to connect all components is (number_of_components - 1) return num_components - 1"},{"question":"James loves playing games with numbers. One of his favorite games is to find the longest subsequence of distinct numbers in a given list. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, for the sequence [1, 2, 3, 4, 5], [1, 3, 4] is a valid subsequence while [1, 4, 3] is not. James wants your help to find the maximum length of a subsequence of distinct integers from a given list of integers. -----Input----- - The first line contains an integer t (1 le t le 100), the number of test cases. - Each of the next t lines contains an integer n (1 le n le 1000) followed by n integers a_1, a_2, ..., a_n (1 le a_i le 1000) representing the list of integers. -----Output----- - For each test case, output the maximum length of a subsequence with all distinct integers. -----Examples----- Input 3 5 1 2 3 4 5 6 1 2 2 3 3 4 7 4 4 4 4 4 4 4 Output 5 4 1 Note: - In the first test case, the entire list [1, 2, 3, 4, 5] is already a subsequence of distinct numbers. - In the second test case, [1, 2, 3, 4] is the longest subsequence with distinct integers. - In the third test case, any one of the numbers is a subsequence with maximum length 1.","solution":"def longest_distinct_subsequence(t, test_cases): This function returns the maximum length of a subsequence with all distinct integers for each test case. Parameters: t (int): Number of test cases test_cases (list): List of test cases where each test case is a tuple containing the integer n followed by a list of n integers Returns: list: A list of integers where each integer represents the maximum length of a distinct subsequence for the corresponding test case results = [] for case in test_cases: n, numbers = case distinct_numbers = set(numbers) results.append(len(distinct_numbers)) return results"},{"question":"Given a binary tree, your task is to check whether it\'s a symmetric tree or not. A binary tree is symmetric if the left subtree is a mirror reflection of the right subtree. Example 1: Input: 1 / 2 2 / / 3 4 4 3 Output: True Explanation: The given binary tree is symmetric. Example 2: Input: 1 / 2 2 3 3 Output: False Explanation: The given binary tree is not symmetric. Your Task: You have to complete the method `isSymmetric()` which takes the root of the binary tree as its only argument and returns a boolean value (True or False) indicating whether the binary tree is symmetric or not. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= Number of nodes <= 1000","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isSymmetric(root: TreeNode) -> bool: def isMirror(tree1: TreeNode, tree2: TreeNode) -> bool: if not tree1 and not tree2: return True if not tree1 or not tree2: return False return (tree1.val == tree2.val and isMirror(tree1.left, tree2.right) and isMirror(tree1.right, tree2.left)) return isMirror(root, root)"},{"question":"Given a collection of integers, nums, where each integer is not necessarily unique, write a function to determine if there is a subset of the given set with a sum equal to a given sum. Example: Input: nums = [3, 34, 4, 12, 5, 2] sum = 9 Output: True Explanation: There is a subset (4, 5) with sum 9.","solution":"def is_subset_sum(nums, target_sum): Determine if there is a subset of nums with a sum equal to target_sum. n = len(nums) # Initialize a 2D list to store the solutions to subproblems dp = [[False] * (target_sum + 1) for _ in range(n + 1)] # If the target sum is 0, then a subset exists (empty subset) for i in range(n + 1): dp[i][0] = True # Fill the dp table in a bottom-up manner for i in range(1, n + 1): for j in range(1, target_sum + 1): if nums[i - 1] > j: dp[i][j] = dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]] return dp[n][target_sum]"},{"question":"Read problems statements in Mandarin Chinese, Russian and Vietnamese as well. Alice loves to play with arrays and numbers. She has an array B of N elements. She also has a magic integer K. Alice wants to know the number of pairs (i, j) where 1 ≤ i < j ≤ N and the sum B[i] + B[j] is divisible by K. Can you help Alice to find the number of such pairs? ------ Input ------ The first line contains an integer T, denoting the number of test cases. T test cases follow. The first line of each test case contains two integers N and K. The second line of each test case contains N space-separated integers B_1, B_2, ..., B_N which represents the array. ------ Output ------ For each test case, output a single line containing the number of pairs whose sum is divisible by K. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^3 1 ≤ K ≤ 10^3 1 ≤ B_i ≤ 10^6 ------ Sample Input 1 ------ 2 5 3 1 2 3 4 5 4 2 2 4 6 8 ------ Sample Output 1 ------ 4 6 ------ Explanation 1 ------ In the first test case, the pairs (1, 2), (1, 5), (2, 4), and (3, 6) are valid as their sums (3, 6, 6, 9) are divisible by 3. In the second test case, all pairs (2, 4), (2, 6), (2, 8), (4, 6), (4, 8), and (6, 8) are valid as their sums are divisible by 2.","solution":"def count_pairs(T, test_cases): results = [] for t in range(T): N, K = test_cases[t][0] B = test_cases[t][1] count = 0 for i in range(N): for j in range(i + 1, N): if (B[i] + B[j]) % K == 0: count += 1 results.append(count) return results"},{"question":"-----Input----- The input consists of a single string s containing only lowercase English letters (1 <= |s| <= 100). -----Output----- Output a single integer representing the number of distinct substrings in the string s. -----Examples----- Input abc Output 6 Input aaa Output 3 Input abcd Output 10","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings in the string s. n = len(s) substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings) # Examples print(count_distinct_substrings(\\"abc\\")) # 6 print(count_distinct_substrings(\\"aaa\\")) # 3 print(count_distinct_substrings(\\"abcd\\")) # 10"},{"question":"Given a list of n integers. The task is to find out the smallest integer x such that the sum of all integers in the list except x is exactly equal to x. Example 1: Input: nums = [1, 2, 3, 6] Output: 6 Explanation: Sum of all elements except 6 is 1 + 2 + 3 = 6, which is equal to 6. Example 2: Input: nums = [1, 1, 3, 2] Output: -1 Explanation: No such element exists in the list that fulfills the requirement. Example 3: Input: nums = [2, 2, 2, 2, 8] Output: 8 Explanation: Sum of all elements except 8 is 2 + 2 + 2 + 2 = 8, which is equal to 8. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findSpecialInteger() which takes a list of n integers as input and returns the smallest integer x such that the sum of all integers in the list except x is exactly equal to x. If no such integer exists, return -1. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 1 <= nums[i] <= 10^6","solution":"def findSpecialInteger(nums): Returns the smallest integer x such that the sum of all integers in the list except x is exactly equal to x. total_sum = sum(nums) for num in nums: if num == total_sum - num: return num return -1"},{"question":"Given an integer N, your task is to return the factorial of N. Example 1: Input: N = 5 Output: 120 Explanation: Factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120. Example 2: Input: N = 0 Output: 1 Explanation: Factorial of 0 is defined as 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function factorial() which takes an integer N as input and returns the factorial of N. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 0 <= N <= 20","solution":"def factorial(N): Returns the factorial of N. Parameters: N (int): The number to calculate the factorial of. Must be between 0 and 20 inclusive. Returns: int: The factorial of N. if N == 0: return 1 result = 1 for i in range(1, N + 1): result *= i return result"},{"question":"You are given a directed graph with `n` vertices and `m` edges. Each edge has a weight which is a positive integer. You need to find the shortest paths from a given source vertex to all other vertices. If there are multiple shortest paths from the source to a vertex, you only need to output the shortest path. Use Dijkstra\'s algorithm to solve this problem. Input The first line contains two integers, `n` (1 ≤ n ≤ 1000) and `m` (1 ≤ m ≤ 10000), the number of vertices and edges respectively. Each of the next `m` lines contains three integers `u`, `v` and `w` (1 ≤ u, v ≤ n; 1 ≤ w ≤ 1000), where `u` and `v` are the end vertices of an edge and `w` is its weight. The last line contains a single integer, `s` (1 ≤ s ≤ n), the source vertex. Output Print `n` integers where the `i-th` integer is the shortest distance from the source vertex `s` to vertex `i`. If there is no path from `s` to vertex `i`, print -1 for that vertex. Example Input 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 4 3 4 5 1 1 Output 0 2 3 6 7","solution":"import heapq def dijkstra(n, edges, s): graph = [[] for _ in range(n)] for u, v, w in edges: graph[u-1].append((v-1, w)) distances = [float(\'inf\')] * n distances[s-1] = 0 priority_queue = [(0, s-1)] while priority_queue: current_distance, u = heapq.heappop(priority_queue) if current_distance > distances[u]: continue for v, weight in graph[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(priority_queue, (distance, v)) return [d if d != float(\'inf\') else -1 for d in distances]"},{"question":"Develop a program that evaluates arithmetic expressions composed of addition (\'+\'), subtraction (\'-\'), multiplication (\'*\'), and division (\'/\') operators. The expressions will also include positive integers and may contain nested parentheses to indicate the order of operations. The program should correctly interpret and evaluate these expressions with respect to the standard operator precedence. Input The input consists of multiple arithmetic expressions, each on a separate line. Each expression is a valid arithmetic expression containing positive integers, operators (+, -, *, /), and parentheses. The input ends with a line containing only the word \\"end\\". Output For each arithmetic expression, output the evaluation result on a new line. If the expression results in a non-integer value, truncate the decimal part (i.e., perform integer division). Example Input 3 + 5 * 2 (1 + 2) * 4 - 3 10 / (3 - 3 + 1) end Output 13 9 10","solution":"def evaluate_expression(expression): Evaluates an arithmetic expression containing +, -, *, / operators and nested parentheses. The evaluation follows standard operator precedence and truncates decimal values. try: # Evaluating the expression using Python\'s eval function result = eval(expression, {\\"__builtins__\\": None}) # Truncating decimal values to get integer result return int(result) except ZeroDivisionError: return \\"Division by zero error\\" except: return \\"Invalid expression\\" def main(input_lines): results = [] for line in input_lines: line = line.strip() if line == \\"end\\": break result = evaluate_expression(line) results.append(result) return results"},{"question":"Alice and Bob are playing a game with an array of integers. Alice starts by choosing any subarray, replacing it with a single integer that is the maximum number of that subarray. After Alice\'s turn, Bob picks any subarray and replaces it with a single integer that is the sum of all numbers in that subarray. This process repeats until the array contains only one integer. Alice wins if the final integer is even; otherwise, Bob wins. Write a function to determine the winner assuming both players play optimally. Function Signature: ``` def determine_winner(nums: List[int]) -> str: pass ``` # Input - An array of integers `nums` with length `n` (1 ≤ n ≤ 10^5, |nums[i]| ≤ 10^6). # Output - Return `Alice` if Alice wins, and `Bob` if Bob wins. # Examples Example 1: **Input:** ``` nums = [1, 2, 3] ``` **Output:** ``` Alice ``` Example 2: **Input:** ``` nums = [1, 2, 5] ``` **Output:** ``` Bob ``` # Explanation In the first example, Alice can pick the entire array and replace it with 3, after which Bob has no move but to replace 3 with the sum 6, which is even, making Alice the winner. In the second example, no matter what moves Alice or Bob makes, the final integer is odd, allowing Bob to win. # Note - Alice and Bob always take turns starting with Alice. - Both players use optimal strategies to maximize their chances of winning.","solution":"from typing import List def determine_winner(nums: List[int]) -> str: Determine the winner of the game between Alice and Bob. Alice wins if the final integer is even, otherwise Bob wins. Both players play optimally. # Alice wins if there is any even number in the array because she can always reduce to that even number. for num in nums: if num % 2 == 0: return \\"Alice\\" # If all numbers are odd, Bob will sum them to get an odd number making him the winner. return \\"Bob\\""},{"question":"Given a number X, find the smallest integer greater than or equal to the square root of X. Example 1: Input: X = 17 Output: 5 Explanation: Square root of 17 is approximately 4.123, which rounds up to 5 Example 2: Input: X = 25 Output: 5 Explanation: Square root of 25 is 5 Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestSquareRootCeil() which takes an Integer X as input and returns the answer. Expected Time Complexity: O(sqrt(X)) Expected Auxiliary Space: O(1) Constraints: 1 <= X <= 10^{5}","solution":"import math def smallestSquareRootCeil(X): Returns the smallest integer greater than or equal to the square root of X. return math.ceil(math.sqrt(X))"},{"question":"Given an integer N, write a function to determine if it is a power of two. If N is a power of two, return \\"Yes\\", otherwise return \\"No\\". Example 1: Input: N = 8 Output: Yes Example 2: Input: N = 7 Output: No Your Task: This is a function problem. You only need to complete the function isPowerOfTwo() that takes an integer N as a parameter and returns a string \\"Yes\\" or \\"No\\" based on whether the number is a power of two. Expected Time Complexity: O(1). Expected Auxiliary Space: O(1). Constraints: 1 <= N <= 10^9","solution":"def isPowerOfTwo(N): Determines if the given integer N is a power of two. Parameters: N (int): The integer to check Returns: str: \\"Yes\\" if N is a power of two, otherwise \\"No\\" if N <= 0: return \\"No\\" return \\"Yes\\" if (N & (N - 1)) == 0 else \\"No\\""},{"question":"You are given an n x n grid of characters representing a chessboard. The character \'K\' represents a knight, and \'.\' represents an empty square. The knight moves in an \\"L\\" shape: two squares in a horizontal/vertical direction and then one square in a perpendicular direction. The task is to find out the shortest path for the knight to move from a given starting position (sx, sy) to a target position (tx, ty) and print the number of moves in this shortest path. If the knight cannot reach the target position, print -1. -----Constraints----- - The grid size n: 3 <= n <= 1000. - The starting and target positions are within the grid bounds. - There is exactly one \'K\' in the grid, and all other characters are \'.\'. - No other pieces or obstacles are present on the board. -----Input----- Input is given from Standard Input in the following format: n sx sy tx ty n lines representing the n x n grid -----Output----- Print the number of moves in the shortest path from (sx, sy) to (tx, ty). If it\'s not possible to reach the target, print -1. -----Sample Input----- 3 0 0 2 2 K.. ... ... -----Sample Output----- 4 In this case, the knight moves from (0, 0) to (2, 2) in 4 moves.","solution":"from collections import deque def shortest_knight_path(n, sx, sy, tx, ty, grid): # Possible moves for a knight in chess moves = [(2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1)] # Initialize the queue for BFS queue = deque([(sx, sy, 0)]) visited = set() visited.add((sx, sy)) # Perform BFS while queue: x, y, dist = queue.popleft() # If the target is reached if (x, y) == (tx, ty): return dist # Explore all possible knight moves for dx, dy in moves: nx, ny = x + dx, y + dy # Check if the move is within bounds and not visited if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If no path found, return -1 return -1"},{"question":"# Alice and Bob\'s Books Alice and Bob are avid readers and have a huge collection of books. They want to organize their books efficiently in a bookshelf. The bookshelf has 4 shelves and each shelf can hold \'C\' books. They have a total of \'N\' books. Help Alice and Bob determine the minimum number of shelves required to store all their books. INPUT: The first line contains the number of test cases T. The next T lines follow. Each line contains two integers N and C, separated by a space. OUTPUT: Print the minimum number of shelves for each test-case. Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000000 1 ≤ C ≤ 50 SAMPLE INPUT 3 10 4 50 10 7 3 SAMPLE OUTPUT 3 5 3","solution":"def min_shelves_required(test_cases): Returns a list with the minimum number of shelves required for each test case. Args: test_cases: List of tuples where each tuple contains two integers, N and C. Returns: List of integers representing the minimum number of shelves required for each test case. result = [] for N, C in test_cases: shelves_needed = (N + C - 1) // C # This gives the ceiling of N / C result.append(shelves_needed) return result"},{"question":"Given an array of integers where each element represents the maximum number of steps you can move to the left or right from that position, determine the minimum number of moves you must make to reach the end of the array. Example 1: Input: [2, 3, 1, 1, 4] Output: 2 Explanation: Jump 1 step from index 0 to index 1, then 4 steps to the last index. Example 2: Input: [1, 4, 2, 1, 0, 2, 1] Output: 3 Explanation: Jump from index 0 to index 1 (4 steps), then to index 5 (2 steps), and finally to the last index. Example 3: Input: [1, 1, 1, 1, 1] Output: 4 Explanation: Jump 1 step from index 0 to 1, 1 step from index 1 to 2, 1 step from index 2 to 3, and finally 1 step to the last index.","solution":"def min_jumps(arr): Function to determine the minimum number of jumps required to reach the end of the array. Parameters: arr (list): List of integers where each element represents the maximum steps you can move from that position. Returns: int: Minimum number of jumps required to reach the end of the array. if len(arr) <= 1: return 0 if arr[0] == 0: return float(\'inf\') # initializing variables max_reach = arr[0] step = arr[0] jump = 1 for i in range(1, len(arr)): if i == len(arr) - 1: return jump max_reach = max(max_reach, i + arr[i]) step -= 1 if step == 0: jump += 1 if i >= max_reach: return float(\'inf\') step = max_reach - i return jump"},{"question":"You are given a grid of size `m x n` represented by a list of lists, where each cell contains a positive integer. Your task is to determine the maximum sum of any path from the top-left corner to the bottom-right corner of the grid, where you can only move right or down at each step. Implement a function that takes the grid as input and returns the maximum sum. If the input is not a grid or if the grid contains non-positive integers, return None. Good luck!","solution":"def is_valid_grid(grid): if not isinstance(grid, list): return False for row in grid: if not isinstance(row, list): return False for cell in row: if not isinstance(cell, int) or cell <= 0: return False return True def max_path_sum(grid): if not is_valid_grid(grid): return None m, n = len(grid), len(grid[0]) # Create a 2D dp array with the same size as the grid dp = [[0] * n for _ in range(m)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"Given a binary tree, you are required to complete the function isSymmetric() which checks if the binary tree is symmetric around its center. A binary tree is symmetric if its left and right subtrees are mirror images of each other. Example 1: Input: 1 / 2 2 / / 3 4 4 3 Output: True Explanation: The tree is symmetric. Example 2: Input: 1 / 2 2 3 3 Output: False Explanation: The tree is not symmetric. Your Task: You don\'t need to read input or print anything. Complete the function isSymmetric() which takes the root node of the binary tree as input and returns True if the tree is symmetric, False otherwise. Constraints: 1 <= T <= 100 1 <= N <= 1000","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isSymmetric(root): def isMirror(tree1, tree2): if tree1 is None and tree2 is None: return True if tree1 is None or tree2 is None: return False return (tree1.val == tree2.val) and isMirror(tree1.right, tree2.left) and isMirror(tree1.left, tree2.right) if root is None: return True return isMirror(root.left, root.right)"},{"question":"You are organizing a conference and want to ensure that each session has a unique time slot and no two sessions overlap. You are given a list of suggested time slots for different sessions and your task is to validate whether any of the time slots overlap. Input The first line of the input contains an integer n (1 ≤ n ≤ 10) — the number of sessions you need to check. The following n lines contain the start and end times of the sessions in the format \\"HH:MM-HH:MM\\" (00:00 ≤ HH:MM ≤ 23:59). It\'s guaranteed that the start time is always less than the end time for each session. Output Output \\"YES\\" if all the sessions have unique and non-overlapping time slots, or \\"NO\\" if there is any overlap. Examples Input 3 09:00-10:00 10:00-11:00 11:00-12:00 Output YES Input 3 09:00-10:30 10:00-11:00 11:00-12:00 Output NO","solution":"from datetime import datetime def validate_sessions(n, sessions): Validates if the given time slots overlap or not. Args: n (int): The number of sessions. sessions (list): A list of strings where each string represents a session\'s time slot in format \\"HH:MM-HH:MM\\". Returns: str: \\"YES\\" if no time slots overlap, \\"NO\\" otherwise. # Parse the sessions into start and end datetime objects time_slots = [] for session in sessions: start, end = session.split(\'-\') start_time = datetime.strptime(start, \'%H:%M\') end_time = datetime.strptime(end, \'%H:%M\') time_slots.append((start_time, end_time)) # Sort the slots based on the start time time_slots.sort(key=lambda x: x[0]) # Check for any overlapping sessions for i in range(1, n): if time_slots[i][0] < time_slots[i-1][1]: return \\"NO\\" return \\"YES\\""},{"question":"Monocarp is fascinated by sequences and wants to explore another interesting transformation. This time, he defines a sequence c of integers derived from an array p of integers. The sequence p is of size n, and each element is an integer between 1 and n inclusive. Monocarp calculates the array c of size n as follows: c_i = p_i + max(p_1, p_2, ..., p_{i-1}) for i > 1, and c_1 = p_1. Given the array c, Monocarp lost the original array p and needs your help to restore it. Your task is to find an array p that corresponds to the given array c. If there are multiple possible arrays, then print any of them. The tests are constructed in such a way that at least one suitable array p exists. -----Input----- The first line contains a single integer t (1 le t le 10^5) — number of test cases. The first line of each test case contains a single integer n (1 le n le 5 cdot 10^5). The second line contains n integers c_1, c_2, dots, c_n (1 le c_i le n). Additional constraints on the input: - the sum of n over test cases does not exceed 5 cdot 10^5; - there exists at least one array p that would yield this array c. -----Output----- For each test case, print n integers — an array p that corresponds to the given array c. If there are multiple possible arrays, then print any of them. -----Examples----- Input 3 4 4 7 8 9 2 2 4 3 1 2 4 Output 4 3 1 1 2 2 1 1 2 -----Note----- For the above examples: In the first example: - c_1 = 4 rightarrow p_1 = 4 - c_2 = 7 rightarrow p_2 = 3 + max(4) = 3 - c_3 = 8 rightarrow p_3 = 1 + max(4, 3) = 1 - c_4 = 9 rightarrow p_4 = 1 + max(4, 3, 1) = 1 Thus, one possible p is [4, 3, 1, 1]. In the second example: - c_1 = 2 rightarrow p_1 = 2 - c_2 = 4 rightarrow p_2 = 2 + max(2) = 2 Thus, one possible p is [2, 2]. In the third example: - c_1 = 1 rightarrow p_1 = 1 - c_2 = 2 rightarrow p_2 = 1 + max(1) = 1` - c_3 = 4 rightarrow p_3 = 2 + max(1,1) = 2` Thus, one possible p is [1, 1, 2].","solution":"def restore_p(n, c): Given array c, this function restores and returns array p. p = [0] * n p[0] = c[0] for i in range(1, n): p[i] = c[i] - max(c[:i]) return p def solve_monocarp(test_cases): results = [] for n, c in test_cases: results.append(restore_p(n, c)) return results"},{"question":"Transform an input array of integers such that each element in the output array represents the product of all the numbers in the original array except the one at the current index. Do not use division in your solution. **Constraints:** - The length of the input array will be between 1 and 10^4. - The input array will not contain any zeroes. **Examples:** ``` Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Input: [5, 3, 2, 1] Output: [6, 10, 15, 30] ```","solution":"def product_except_self(nums): Returns a list of products where at each index the product is the result of multiplying all elements in the original array except the one at the given index. n = len(nums) # List to store the result result = [1] * n # Calculate the prefix products prefix_product = 1 for i in range(n): result[i] = prefix_product prefix_product *= nums[i] # Calculate the suffix products and multiply with corresponding prefix products suffix_product = 1 for i in range(n-1, -1, -1): result[i] *= suffix_product suffix_product *= nums[i] return result"},{"question":"A company is organizing a technology boot camp and wants to assign participants to different groups based on their skill levels. Each participant is assigned a skill level, which is an integer. A group can only have participants with the same skill level. Given the list of participants\' skill levels, determine the minimum number of groups required to accommodate all participants according to the given rules. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), the number of participants. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100), the skill levels of the participants. -----Output----- Output a single integer, the minimum number of groups required. -----Examples----- Input 6 1 2 2 1 3 3 Output 3 Input 5 5 5 5 5 5 Output 1 Input 4 4 3 3 2 Output 3 -----Note----- In the first sample, you can form three groups: one with skill levels [1,1], one with [2,2], and one with [3,3]. In the second sample, you can form a single group with all participants having skill level 5. In the third sample, you can form three groups: one with [4], one with [3,3], and one with [2].","solution":"def minimum_groups(skill_levels): Determines the minimum number of groups required to accommodate all participants according to their skill levels. Each group can only have participants with the same skill level. :param skill_levels: List of integers representing the skill levels of participants :return: Integer representing the minimum number of groups required skill_level_set = set(skill_levels) return len(skill_level_set)"},{"question":"Write a function that determines the winner of a string rearrangement game. Two players, Alice and Bob, are playing a game where they take turns rearranging a given string `S`. The players can rearrange the characters of the string `S` in any way they like and then remove any one character from the string. Alice always goes first. The player who cannot make a move (i.e., when the string becomes empty) loses the game. Your task is to determine who will win the game if both players play optimally. -----Input----- The first line contains an integer `T` denoting the number of test cases. Each of the following `T` lines contains a string `S` which consists of lowercase English letters. -----Output----- For each test, output \\"Alice\\" or \\"Bob\\" on a separate line, indicating who will win the game. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 100 -----Example----- Input: 3 abc abcd a Output: Alice Bob Alice -----Explanation----- Test case 1: After Alice removes one character, Bob removes another, and finally Alice removes the last character, making Bob unable to move. Test case 2: No matter what character Alice removes first, Bob will always be able to force Alice to be the one unable to move when the string is empty. Test case 3: Alice will remove the only character, forcing Bob to lose since there are no characters left.","solution":"def determine_winner(T, test_cases): results = [] for S in test_cases: if len(S) % 2 == 1: results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results # Example usage: # T = 3 # test_cases = [\\"abc\\", \\"abcd\\", \\"a\\"] # print(determine_winner(T, test_cases)) # Output: [\'Alice\', \'Bob\', \'Alice\']"},{"question":"There is a string consisting of lowercase English letters. You are allowed to modify the string by replacing one character with any other lowercase English letter. However, this operation can only be performed a limited number of times. Your task is to determine the length of the longest substring that you can create using the allowed operations, such that all the characters in the substring are the same. For example, if the string is \\"aabccbb\\" and you are allowed to make one modification, you can change one of the \'c\'s to a \'b\' and get the longest substring \\"bbb\\", which has a length of 3. -----Input----- The first line of the input contains a string s (1 le text{length of } s le 1000) consisting of lowercase English letters. The second line of the input contains an integer k (0 le k le text{length of } s) — the maximum number of modifications allowed. -----Output----- Print the length of the longest substring that can be created with at most k modifications. -----Example----- Input aabccbb 1 Output 3 Input abbcb 1 Output 4 Input abccde 1 Output 3","solution":"def longest_substring_with_k_modifications(s, k): Computes the length of the longest substring where all characters are the same after performing at most \'k\' character modifications. Parameters: s (str): Input string of lowercase English letters. k (int): Maximum number of character modifications allowed. Returns: int: Length of the longest possible substring. max_length = 0 max_count = 0 start = 0 char_count = {} for end in range(len(s)): char_end = s[end] char_count[char_end] = char_count.get(char_end, 0) + 1 max_count = max(max_count, char_count[char_end]) while (end - start + 1) - max_count > k: char_start = s[start] char_count[char_start] -= 1 start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Anna is organizing a series of workshops and needs your help to streamline sign-up and attendance tracking. Each workshop can host a certain number of participants and starts at a specified time. She needs a program to track participant sign-ups and check if a participant is successfully registered for a specific workshop. Input format: The first line contains an integer T, the number of test cases. Each test case consists of multiple lines. - The first line of each test case consists of an integer W, the number of workshops. - The next W lines each contain a string (the workshop title), an integer (maximum number of participants), and an integer (start time in minutes). - The next line contains an integer P, the number of participants. - The next P lines each contain a participant name and the workshop title they want to sign up for. Output format: For each participant, display \\"Registered\\" if their registration is successful and \\"Rejected\\" if the workshop is already full. Constraints: 1 ≤ T ≤ 100 1 ≤ W ≤ 50 1 ≤ P ≤ 100 1 ≤ maximum number of participants ≤ 100 0 ≤ start time < 1440 SAMPLE INPUT: 1 3 Python Beginners 10 600 Data Science 5 900 Web Development 7 720 5 Alice Python Beginners Bob Data Science Charlie Python Beginners Diana Web Development Eve Data Science SAMPLE OUTPUT: Registered Registered Registered Registered Registered","solution":"def track_workshop_signups(test_cases): results = [] for case in test_cases: W = case[\'W\'] workshops = {} for entry in case[\'workshops\']: title, max_participants, start_time = entry workshops[title] = { \'max_participants\': max_participants, \'start_time\': start_time, \'current_participants\': 0 } P = case[\'P\'] for participant in case[\'participants\']: name, workshop_title = participant if workshops[workshop_title][\'current_participants\'] < workshops[workshop_title][\'max_participants\']: workshops[workshop_title][\'current_participants\'] += 1 results.append(\'Registered\') else: results.append(\'Rejected\') return results # Test case input test_cases_input = [ { \'W\': 3, \'workshops\': [ (\'Python Beginners\', 10, 600), (\'Data Science\', 5, 900), (\'Web Development\', 7, 720) ], \'P\': 5, \'participants\': [ (\'Alice\', \'Python Beginners\'), (\'Bob\', \'Data Science\'), (\'Charlie\', \'Python Beginners\'), (\'Diana\', \'Web Development\'), (\'Eve\', \'Data Science\') ] } ] # Returning the output output = track_workshop_signups(test_cases_input) print(output) # Expected: [\'Registered\', \'Registered\', \'Registered\', \'Registered\', \'Registered\']"},{"question":"Write a function `most_frequent_word()` that takes a string `text` containing a paragraph of words separated by spaces, and returns the word that appears most frequently in the text. In the case of a tie (multiple words with the highest frequency), return the one that appears first in the text. ```python >>> text = \\"the quick brown fox jumps over the lazy dog the fox is quick\\" >>> most_frequent_word(text) \'the\' ``` Ensure that the function correctly handles punctuation marks connected to the words (like commas or periods). The comparison of words should be case-insensitive, but the returned word should be in the same case as it first appears in the text.","solution":"import re from collections import Counter def most_frequent_word(text): Returns the most frequent word in the text. In case of a tie, returns the word that appears first in the text. Args: text (str): The input string containing a paragraph of words separated by spaces. Returns: str: The most frequent word. # Normalize and split the text into words, ignoring punctuation and case words = re.findall(r\'bw+b\', text.lower()) original_words = re.findall(r\'bw+b\', text) # Count the frequency of each word word_count = Counter(words) # Initialize max frequency and result word max_freq = 0 most_frequent = \\"\\" # Iterate over the original words to maintain the first appearance in the case of ties for word in original_words: word_lower = word.lower() if word_count[word_lower] > max_freq: max_freq = word_count[word_lower] most_frequent = word elif word_count[word_lower] == max_freq and most_frequent == \\"\\": most_frequent = word return most_frequent # Example usage text = \\"the quick brown fox jumps over the lazy dog the fox is quick\\" print(most_frequent_word(text)) # Output: \'the\'"},{"question":"Create a function that takes a string as input and returns True if it is a valid variable name in Python, and False otherwise. A valid variable name in Python: - Can only contain letters (a-z, A-Z), digits (0-9), and underscores (_). - Must start with a letter (a-z, A-Z) or an underscore (_). - Cannot be a reserved keyword in Python. Write a function `is_valid_variable_name(variable_name)` that implements this logic. Input: - A single line containing a string representing the variable name. Output: - A single boolean value: True if the input string is a valid variable name according to the above rules, otherwise False. **Example** Input: my_variable Output: True Input: 2cool4school Output: False Input: for Output: False Function signature: ```python def is_valid_variable_name(variable_name: str) -> bool: # your code here ```","solution":"import keyword def is_valid_variable_name(variable_name: str) -> bool: Checks if the input string is a valid variable name in Python. if not variable_name: return False if variable_name[0].isdigit(): return False if variable_name in keyword.kwlist: return False if not all(char.isalnum() or char == \'_\' for char in variable_name): return False return True"},{"question":"You are given two strings, `s1` and `s2`, consisting only of lowercase English letters. Your goal is to determine if `s2` can be formed by rearranging the letters of a substring of `s1`. In other words, you need to check if there exists a substring in `s1` that contains the exact characters of `s2` (including the same frequency of each character). Input The input consists of two lines: - The first line contains the string `s1` (1 ≤ |s1| ≤ 10^5), the original string. - The second line contains the string `s2` (1 ≤ |s2| ≤ 10^5), the string to be rearranged. Output Print \\"YES\\" if `s2` can be formed by rearranging the letters of a substring of `s1`, otherwise print \\"NO\\". Example Input abcbac abc Output YES Input abcdef fedcba Output YES Input abcde xyz Output NO Input aabbaabb aab Output YES Input abcd dcbaefg Output NO Explanation In the first example, the substring \\"abc\\" within \\"abcbac\\" can be rearranged as \\"abc\\" to form `s2`. In the second example, the whole string \\"abcdef\\" can be rearranged as \\"fedcba\\" to form `s2`. In the third example, there is no substring within \\"abcde\\" that can be rearranged to form `s2` \\"xyz\\", hence the output is \\"NO\\". In the fourth example, the substring \\"aab\\" in \\"aabbaabb\\" can be found and rearranged from the original string to form `s2`. In the fifth example, `s2` \\"dcbaefg\\" is longer than `s1`, and hence cannot be a substring.","solution":"from collections import Counter def can_rearrange_substring(s1, s2): Determines if s2 can be formed by rearranging the letters of a substring of s1. Args: s1 : str : the original string s2 : str : the string to be formed by rearranging the letters Returns: str : \\"YES\\" if s2 can be formed, otherwise \\"NO\\" len_s1 = len(s1) len_s2 = len(s2) if len_s2 > len_s1: return \\"NO\\" s2_counter = Counter(s2) for i in range(len_s1 - len_s2 + 1): substring_counter = Counter(s1[i:i+len_s2]) if substring_counter == s2_counter: return \\"YES\\" return \\"NO\\""},{"question":"In a small town, there is a very popular bakery that sells only two popular types of items: cookies and brownies. Each cookie costs `a` dollars, and each brownie costs `b` dollars. Given `x` dollars, you need to determine if it is possible to buy exactly `y` items (cookies and brownies) with the exact amount available. -----Input----- The first line contains four integers `a`, `b`, `x`, and `y` (1 ≤ a, b, x, y ≤ 10^5) — the cost of a cookie, the cost of a brownie, the total amount of money you have, and the total number of items you want to buy, respectively. -----Output----- Print \\"YES\\" (without the quotes) if it is possible to buy exactly `y` items with the exact amount `x` dollars. Otherwise, print \\"NO\\". -----Examples----- Input 2 3 8 4 Output YES Input 3 5 10 3 Output NO Input 4 4 16 4 Output YES","solution":"def can_buy_exactly(a, b, x, y): Determines if it is possible to buy exactly y items (cookies and brownies) with the exact amount x dollars. Arguments: a -- the cost of a cookie b -- the cost of a brownie x -- the total amount of money available y -- the total number of items to buy Returns: \\"YES\\" if it is possible to buy exactly y items with exactly x dollars, otherwise \\"NO\\". for cookies in range(min(y, x // a) + 1): brownies = y - cookies if brownies >= 0 and (cookies * a + brownies * b) == x: return \\"YES\\" return \\"NO\\""},{"question":"Tom is an enthusiastic gardener with a mesmerizing garden of various types of plants. This season, he decides to plant flowers in such a way that they create a blooming path in his garden. The path consists of segments, each containing flowers of the same type and height. He has m different types of flower seeds, and each type grows into a plant of a certain height. Tom wants the sum of the heights of the flowers in each segment of a path to be exactly n. He can choose any segment length, and he can use multiple segments of the same type or different types. Help Tom determine the minimum number of segments he needs to create the path, using the given types of flowers. -----Constraints----- - 1 leq n leq 10^6 - 1 leq m leq 10 - 1 leq height_i leq 10^6 (for each i from 1 to m) -----Input----- Input is given from Standard Input in the following format: n m height_1 height_2 ... height_m -----Output----- Print the minimum number of segments needed to create the path of length n. If it\'s impossible to create such a path, output -1. -----Sample Input----- 10 3 2 3 7 -----Sample Output----- 2 One way to create the path with a sum of 10 is using segments of lengths: - 7 (one segment) - 3 (one segment) Another way is: - 2 (five segments) - 3 (one segment) In any case, the minimum number of segments needed is 2.","solution":"def minimum_segments(n, m, heights): # Initialize a list to store the minimum segments needed for each height sum from 0 to n dp = [float(\'inf\')] * (n + 1) dp[0] = 0 # 0 height sum needs 0 segments # Iterate over each height type for height in heights: # Update dp table for j in range(height, n + 1): if dp[j - height] != float(\'inf\'): dp[j] = min(dp[j], dp[j - height] + 1) # If dp[n] is still infinity, it means it\'s not possible to achieve sum n return dp[n] if dp[n] != float(\'inf\') else -1"},{"question":"You are given a list of n integers. Your task is to find a subsequence whose sum is equal to a given target integer x. A subsequence is defined as deleting some or none of the elements without changing the order of the remaining elements. Input The first line contains two integers n and x (1 ≤ n ≤ 1000, 1 ≤ x ≤ 10^6) — the number of elements in the list and the target sum. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the list of integers. Output If there exists a subsequence whose sum is equal to x, output \\"YES\\", otherwise output \\"NO\\". Examples Input 5 10 1 2 3 4 5 Output YES Input 4 8 1 1 1 1 Output NO Note In the first example, the subsequence [2, 3, 5] sums up to 10. In the second example, no subsequence sums up to 8.","solution":"def is_subsequence_sum_possible(n, x, arr): Determines if there is a subsequence of the list `arr` with `n` elements that sums up to `x`. Parameters: n (int): The number of elements in the list. x (int): The target sum. arr (list): The list of integers. Returns: str: \'YES\' if there exists such a subsequence, \'NO\' otherwise. # We\'ll use a dynamic programming approach to solve this problem. # Initialized dp array with False dp = [False] * (x + 1) dp[0] = True for num in arr: # Updating dp array from back to avoid using the same element multiple times for j in range(x, num - 1, -1): if dp[j - num]: dp[j] = True return \'YES\' if dp[x] else \'NO\'"},{"question":"A traffic control system tracks the car movements in and out of a parking lot. The system logs the events as strings formatted as \\"HH:MM CarId EventType\\" where EventType is either \\"enter\\" or \\"exit\\". Assume all events happen within a single day, and CarId does not repeat on the same day. Each event is logged sequentially in time. Your task is to analyze the log and find out the total parking time for each car. The output should be a dictionary where each key is a car\'s CarId, and the corresponding value is the total time in minutes that the car spent in the parking lot. # Example ``` log = [\\"08:00 A1 enter\\", \\"09:30 A2 enter\\", \\"10:00 A1 exit\\", \\"11:00 A3 enter\\", \\"12:00 A2 exit\\", \\"12:30 A3 exit\\"] ``` The parking time for each car is as follows: - Car A1: 08:00 to 10:00 -> 120 minutes - Car A2: 09:30 to 12:00 -> 150 minutes - Car A3: 11:00 to 12:30 -> 90 minutes So the function should return: ``` { \\"A1\\": 120, \\"A2\\": 150, \\"A3\\": 90 } ``` # Function Signature ```python def calculate_parking_time(log: List[str]) -> Dict[str, int]: pass ``` # Constraints 1. Time is given in the 24-hour format. 2. Each car will have only one \\"enter\\" and one \\"exit\\" event. 3. All times in the log are valid and the log entries are in chronological order. 4. The parking lot is never empty for the purpose of this problem. 5. You may assume that the `log` length does not exceed 1000 entries.","solution":"from typing import List, Dict def calculate_parking_time(log: List[str]) -> Dict[str, int]: parking_times = {} enter_times = {} for entry in log: time_str, car_id, event_type = entry.split() hh, mm = map(int, time_str.split(\':\')) minutes = hh * 60 + mm if event_type == \\"enter\\": enter_times[car_id] = minutes elif event_type == \\"exit\\": if car_id in enter_times: total_time = minutes - enter_times[car_id] parking_times[car_id] = total_time return parking_times"},{"question":"You are given an array `a` consisting of `n` positive integers. You can perform the following operation as many times as you want: select any element and multiply it by `2`. We say the array is beautiful if there is at least one even number that is greater than or equal to every other element in the array. Find the minimum number of operations required to make the array beautiful. -----Input----- The first line contains an integer `n` (`2 ≤ n ≤ 10^5`) — the number of elements in the array. The second line contains `n` integers `a_1, a_2, ..., a_n` (`1 ≤ a_i ≤ 10^9`) — the elements of the array. -----Output----- Print a single integer — the minimum number of operations required to make the array beautiful. -----Examples----- Input 4 3 5 7 8 Output 0 Input 5 1 3 9 7 5 Output 1 -----Note----- In the first example, the array already contains the number `8` which is even and greater than or equal to all other elements, so no operations are needed. In the second example, we can select the fourth element and multiply it by `2`, making it equal to `10`. Now there is at least one even number (`10`) which is greater than or equal to every other element in the array. Thus, only one operation is required.","solution":"def min_operations_to_make_array_beautiful(n, a): This function returns the minimum number of operations required to make the array beautiful. An array is beautiful if there is at least one even number that is greater than or equal to every other element in the array. max_element = max(a) for i in range(n): if a[i] % 2 == 0 and a[i] >= max_element: return 0 min_operations = float(\'inf\') for i in range(n): if a[i] % 2 != 0: operations = 0 current = a[i] while current <= max_element: current *= 2 operations += 1 min_operations = min(min_operations, operations) return min_operations"},{"question":"You are given an array of `n` integers. You need to determine the length of the longest contiguous subarray where the difference between the maximum and minimum values does not exceed a given integer `d`. # Input The first line of input contains an integer `t` (1 leq t leq 10^4) — the number of test cases. Each of the next `t` lines describe a test case in the following format: - The first line contains two integers `n` (1 leq n leq 10^5) and `d` (0 leq d leq 10^9) — the length of the array and the allowed maximum difference, respectively. - The second line contains `n` integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) — representing the elements of the array. It is guaranteed that the sum of `n` over all test cases does not exceed 10^5. # Output For each test case, print a single integer — the length of the longest contiguous subarray where the difference between the maximum and minimum values does not exceed `d`. # Example Input ``` 3 5 2 1 3 2 2 5 6 1 1 2 2 2 1 1 4 0 1 3 5 7 ``` Output ``` 4 6 1 ``` # Note In the first example, the longest contiguous subarray where the maximum difference is no more than `2` is `[3, 2, 2]` or `[2, 2, 5]`, both with length `4`. In the second example, the entire array `[1, 2, 2, 2, 1, 1]` satisfies the conditions and has a length of `6`. In the third example, each subarray consists of a single element because `d` is `0`, requiring all elements to be equal. Thus, the length is `1`.","solution":"def longest_contiguous_subarray(t, test_cases): results = [] for i in range(t): n, d = test_cases[i][0] arr = test_cases[i][1] max_len = 0 start = 0 for end in range(n): current_max = max(arr[start:end+1]) current_min = min(arr[start:end+1]) while current_max - current_min > d: start += 1 current_max = max(arr[start:end+1]) current_min = min(arr[start:end+1]) max_len = max(max_len, end - start + 1) results.append(max_len) return results"},{"question":"You are given a sequence A_1, A_2, ldots, A_N representing the heights of N buildings. Each building has a width of 1. Your task is to calculate the maximum area of a rectangle that can be formed using contiguous buildings. The buildings must form one contiguous segment. -----Input----- - The first line of input contains a single integer N denoting the number of buildings. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. -----Output----- Print a single integer — the maximum area of a rectangle that can be formed using contiguous buildings. -----Constraints----- - 1 le N le 10^5 - 1 le A_i le 10^9 for each valid i -----Example Input----- 7 2 1 5 6 2 3 1 -----Example Output----- 10 -----Explanation----- Example case 1: The maximum area rectangle is formed by the 3rd and 4th building with heights 5 and 6, giving a total area of 5 times 1 + 6 times 1 = 10.","solution":"def max_histogram_area(heights): Returns the maximum area of a rectangle that can be formed with contiguous buildings. Args: heights : list[int] A list of integers representing the heights of the buildings. Returns: int The maximum area of the contiguous rectangle. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given a list of n integers, you need to find the maximum sum of a non-empty subsequence such that no two elements are adjacent in the original list. Constraints * 1 leq n leq 100,000 * -10,000 leq a_i leq 10,000 where a_i is an element of the list Input The input is given in the following format. n a_1; a_2; ldots; a_n Output Print the maximum sum of the non-adjacent subsequence. Examples Input 5 3 2 5 10 7 Output 15 Input 4 -1 -2 -3 -4 Output -1","solution":"def max_non_adjacent_sum(arr): Returns the maximum sum of a non-empty subsequence such that no two elements are adjacent in the original list. if not arr: return 0 n = len(arr) # Special case for a single element if n == 1: return arr[0] # dp[i] represents the maximum sum we can obtain considering the first i+1 elements dp = [0] * n dp[0] = arr[0] dp[1] = max(arr[0], arr[1]) for i in range(2, n): dp[i] = max(dp[i-1], arr[i] + dp[i-2]) return dp[-1]"},{"question":"In a distant place called Wonderland, there is a peculiar time system based on hours and minutes. The hours range from 0 to 11, and the minutes range from 0 to 59. You are given the current time in Wonderland, and you need to determine what the time will be after a certain number of minutes have passed. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of three integers H, M, and N, where: - H is the current hour (0 ≤ H ≤ 11) - M is the current minute (0 ≤ M ≤ 59) - N is the number of minutes to add (0 ≤ N ≤ 1000) ------ Output Format ------ For each test case, output two space-separated integers representing the new hour and minute. ------ Constraints ------ 1 ≤ T ≤ 100 0 ≤ H ≤ 11 0 ≤ M ≤ 59 0 ≤ N ≤ 1000 ------ Sample Input 1 ------ 3 10 30 40 0 15 60 11 50 15 ------ Sample Output 1 ------ 11 10 1 15 0 5 ------ Explanation 1 ------ Test case 1: Adding 40 minutes to 10:30 results in 11:10. Test case 2: Adding 60 minutes to 0:15 results in 1:15. Test case 3: Adding 15 minutes to 11:50 results in 0:05.","solution":"def calculate_new_time(H, M, N): Calculates the new time after adding N minutes to the current time H:M in Wonderland. total_minutes = H * 60 + M + N new_hour = (total_minutes // 60) % 12 new_minute = total_minutes % 60 return new_hour, new_minute def process_test_cases(test_cases): results = [] for H, M, N in test_cases: results.append(calculate_new_time(H, M, N)) return results"},{"question":"A gaming company has decided to organize a tournament with M players. Each player has a specific skill level represented by an integer. The company wants to create the most competitive possible matchup by pairing players into teams of 2. The difference in skill levels between two players in a team should be minimized to ensure fair matches. You are tasked with determining the minimum total difference in skill levels across all the teams. If the number of players is odd, one player will be left without a team, and their skill level difference is considered 0 for the final total. -----Constraints----- - 1 ≤ M ≤ 10^5 - 1 ≤ skill_i ≤ 10^9 - All skill levels are integers. -----Input----- Input is given from Standard Input in the following format: M skill_1 skill_2 ... skill_M -----Output----- Print the minimum total difference in skill levels across all the teams. -----Sample Input----- 5 10 20 30 40 50 -----Sample Output----- 10 Explanation: By pairing the players as follows: (10, 20), (30, 40), and keeping 50 unpaired, the differences are 10 and 10. The total minimum difference is 20. The unpaired player doesn\'t contribute to the total difference.","solution":"def minimum_total_difference(M, skill_levels): Calculate the minimum total difference in skill levels across all teams. Parameters: M (int): The number of players. skill_levels (list of int): The list of skill levels of players. Returns: int: The minimum total difference in skill levels across all teams. skill_levels.sort() total_difference = 0 for i in range(0, M - 1, 2): total_difference += abs(skill_levels[i] - skill_levels[i + 1]) return total_difference"},{"question":"You are organizing a charity event and need to prepare gift boxes from the donations you received. You want to fill each gift box equally with specific types of items. Each type of item has different quantities available. The goal is to figure out the maximum number of identical gift boxes that can be created, each containing the same number of each type of item. Write a program to calculate the maximum number of identical gift boxes that can be created given the quantities of different types of items. Input The input is given in the following format: n quantities The first line contains an integer n (1 ≤ n ≤ 100), the number of types of items. The second line contains n integers, each representing the quantity of a specific type of item (1 ≤ quantity ≤ 10000). Output Output a single integer representing the maximum number of identical gift boxes that can be created. Examples Input 3 6 9 12 Output 3 Input 2 15 25 Output 5 Input 4 8 10 14 20 Output 2","solution":"import math from functools import reduce def max_identical_gift_boxes(n, quantities): Returns the maximum number of identical gift boxes that can be created from the given quantities of different types of items. def gcd(x, y): while y: x, y = y, x % y return x return reduce(gcd, quantities) # Example usage: # n = 3 # quantities = [6, 9, 12] # print(max_identical_gift_boxes(n, quantities)) # Output: 3"},{"question":"In a small village, children play a game using a grid of size n × m. Initially, each cell of the grid contains either a \'0\' or a \'1\'. A child is allowed to select any one cell and flip its value (change \'0\' to \'1\' or \'1\' to \'0\'). They can do this operation as many times as they like on any cell. The game ends when the child manages to rearrange the grid such that no two adjacent cells (i.e., horizontally or vertically) contain the same value. Write a function to determine if it is possible to rearrange the grid as described. If it is possible, print \\"YES\\"; otherwise, print \\"NO\\". Input The first line contains an integer T (1 ≤ T ≤ 100) — the number of test cases. Each test case consists of two integers n and m (1 ≤ n, m ≤ 100), followed by n lines each containing m characters (either \'0\' or \'1\') describing the initial state of the grid. Output For each test case, print \\"YES\\" if it is possible to rearrange the grid such that no two adjacent cells contain the same value, or \\"NO\\" otherwise. Example Input 2 3 3 010 101 010 3 3 000 111 000 Output YES NO","solution":"def is_possible_to_rearrange(grid): n = len(grid) m = len(grid[0]) # Generate the checkerboard pattern grids for comparison checkerboard_1 = [[(i + j) % 2 for j in range(m)] for i in range(n)] checkerboard_2 = [[(i + j + 1) % 2 for j in range(m)] for i in range(n)] def is_matching(grid, pattern): for i in range(n): for j in range(m): if int(grid[i][j]) != pattern[i][j]: return False return True if is_matching(grid, checkerboard_1) or is_matching(grid, checkerboard_2): return \\"YES\\" else: return \\"NO\\" def possible_rearrangement(test_cases): results = [] for grid in test_cases: results.append(is_possible_to_rearrange(grid)) return results def parser(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n, m = map(int, lines[index].split()) grid = [lines[index + i + 1] for i in range(n)] test_cases.append(grid) index += n + 1 return test_cases def solution(input_text): test_cases = parser(input_text) results = possible_rearrangement(test_cases) return \\"n\\".join(results)"},{"question":"You\'re working on a project management system that tracks projects and the time estimates for tasks within each project. Each project consists of multiple tasks, and the system must ensure that no two tasks within the same project have overlapping time frames. Your task is to implement a function to check for overlapping tasks within a given project. Each task has a start time and an end time. Two tasks are considered overlapping if they share any period of time. Write a function `check_overlapping_tasks(tasks)` that takes a list of tuples as input, where each tuple represents a task with a start time and an end time. The function should return `True` if there are any overlapping tasks within the project, and `False` otherwise. # Input - A list of tuples, where each tuple contains two integers: - The start time of the task (inclusive) - The end time of the task (exclusive) It is guaranteed that: 1. The list contains at least one task and at most 10^5 tasks. 2. Each task\'s start time and end time are integers between 0 and 10^9, and the start time is always less than the end time. # Output - Return `True` if there are overlapping tasks, otherwise return `False`. # Examples ```python check_overlapping_tasks([(1, 5), (5, 8), (8, 12)]) # Output: False check_overlapping_tasks([(2, 6), (1, 3), (5, 8)]) # Output: True check_overlapping_tasks([(0, 2), (3, 5), (7, 9), (1, 4)]) # Output: True ``` # Note - In the first example, none of the tasks overlap. - In the second example, `task 1 (2, 6)` overlaps with `task 2 (5, 8)`. - In the third example, `task 1 (0, 2)` overlaps with `task 4 (1, 4)`.","solution":"def check_overlapping_tasks(tasks): Checks if there are any overlapping tasks within the project. Parameters: tasks (list of tuples): A list of tuples where each tuple contains two integers, the start and end time of a task. Returns: bool: True if there are overlapping tasks, False otherwise. # Sort tasks by start time tasks.sort() # Check for overlapping tasks for i in range(1, len(tasks)): if tasks[i][0] < tasks[i-1][1]: return True return False"},{"question":"Palindrome Permutation - Check It #4 Can a permutation of the given string form a palindrome? Your task is to implement a function that determines if any permutation of the string can form a palindrome. Ignore spaces and consider only alphanumeric characters.","solution":"def can_permute_palindrome(s): Returns whether any permutation of the string can form a palindrome. Ignores spaces and considers only alphanumeric characters. from collections import Counter # Filtering only alphanumeric characters and converting to lowercase filtered_chars = [c.lower() for c in s if c.isalnum()] # Counting the occurrences of each character char_count = Counter(filtered_chars) # Counting how many characters have odd occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a permutation to be a palindrome, at most one character can have an odd count return odd_count <= 1"},{"question":"Alex loves to create art using LEDs. He has a board of size m x n that he wants to fill with LEDs in such a way that no two LEDs are adjacent. Two LEDs are considered adjacent if they share a common side. Given the dimensions of the board, determine the maximum number of LEDs Alex can place on the board and provide one possible configuration of the board with the LEDs placed. Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the board. Output Print the maximum number of LEDs Alex can place on the board on the first line. Each of the next m lines should contain n characters (\'O\' for an LED and \'.\' for an empty cell), representing one possible configuration. If there are multiple solutions, print any of them. Examples Input 3 3 Output 5 O.O .OO O.O Input 4 5 Output 10 O.O.O .O.O. O.O.O .O.O.","solution":"def generate_led_board(m, n): Generates a board of size m x n filled with LEDs in such a way that no two LEDs are adjacent. Parameters: m (int): The number of rows. n (int): The number of columns. Returns: Tuple[int, List[str]]: A tuple containing the maximum number of LEDs and the board configuration. max_leds = (m * n + 1) // 2 board = [] for i in range(m): row = [] for j in range(n): if (i + j) % 2 == 0: row.append(\'O\') else: row.append(\'.\') board.append(\'\'.join(row)) return max_leds, board"},{"question":"A painting competition divides a large canvas into a grid of equal squares. Each square has a unique number connected by a strange pattern. The grid has n rows and m columns, and it is filled with distinct numbers starting from 1 to n*m such that the filling pattern alternates between rows and columns. First row is filled left to right, second row is filled top to bottom, third row is again filled left to right, and fourth row is filled bottom to top, so on and so forth. For example, if the canvas dimensions are 3 times 3, it would look like this: [ begin{matrix} 1 & 2 & 3 6 & 5 & 4 7 & 8 & 9 end{matrix} ] Your task is to determine the number present in the cell located at the textbf{x}-th row and textbf{y}-th column of the resulting grid. Input Format There will be three integers textbf{n}, textbf{m}, textbf{x}, and textbf{y} separated by spaces. Constraints 1 leq n, m leq 10^4 1 leq x leq n 1 leq y leq m Rows are indexed from top to bottom and columns are indexed from left to right. Output Format Output the number located at the textbf{x}-th row and textbf{y}-th column in a single line. Sample Input 3 3 2 2 Sample Output 5 Explanation The number in the 2^{nd} row and 2^{nd} column of the example grid is 5.","solution":"def find_number_in_canvas(n, m, x, y): Given a canvas of dimensions n x m, find the number at the (x, y) position. The canvas is filled in an alternating pattern: 1. Left to right for odd rows. 2. Top to bottom for even rows. 3. Left to right for 3rd rows, and so on. 4. Bottom to top for 4th rows, etc. Arguments: n -- number of rows. m -- number of columns. x -- the row number to find the value for. y -- the column number to find the value for. Returns: The value at the (x, y) position. number = 0 if x % 2 != 0: # if x is odd number = (x - 1) * m + y else: # if x is even number = x * m - y + 1 return number"},{"question":"Parker loves binary strings a lot. He has a favorite binary string s of length n, consisting of only \'0\'s and \'1\'s. He wants to perform some operations on this string. In one operation he can select a substring of length 3 and reverse it. Parker wants to know if it is possible to make the string palindrome by performing zero or more such operations. A palindrome is a string that reads the same backward as forward. Help Parker — determine if it is possible to make the string palindrome by performing any number of operations. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 1000). Description of the test cases follows. The first line of each test case contains a binary string s with length n (1 le n le 10^5). It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case print \\"YES\\" if it is possible to make the string palindrome by reversing substrings of length 3, otherwise print \\"NO\\". -----Examples----- Input 5 101 1110 1100 000 101010 Output YES NO NO YES YES -----Note----- In the first test case, the string can be transformed to \'101\', which is already a palindrome. In the second test case, there is no way to rearrange \'1110\' to become a palindrome by reversing substrings of length 3. In the third test case, \'1100\' cannot be rearranged to a palindrome using the allowed operations. In the fourth test case, the string \'000\' is already a palindrome. In the fifth test case, the string \'101010\' can be rearranged to \'110011\', which becomes \'1000111\' after another operation, and can ultimately be transformed into a palindrome.","solution":"def can_become_palindrome(s): n = len(s) # Helper function to determine if the suffix can balance the additional mismatches from prefix def check_palindrome_with_operations(s): mismatches = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: mismatches += 1 # During these operations if our mismatch count allows for operations # in multiples of 3 then it can be solvable else not. # Also, if mismatches count is zero then already palindrome. return mismatches == 0 or (mismatches * 2) % 3 == 0 return \\"YES\\" if check_palindrome_with_operations(s) else \\"NO\\" def process_input(test_cases): results = [] for s in test_cases: results.append(can_become_palindrome(s)) return results"},{"question":"Write a function that takes a list of integers and returns a new list with each integer incremented by 1, but only if the original integer is even. If the integer is odd, it should remain unchanged. For example, applying this function to the list `[1, 2, 3, 4, 5]` should return `[1, 3, 3, 5, 5]`.","solution":"def increment_even_numbers(nums): Increments each even integer in the list by 1, leaving odd integers unchanged. :param nums: List of integers :return: New list with even integers incremented by 1 return [num + 1 if num % 2 == 0 else num for num in nums]"},{"question":"You are working on a scheduling algorithm for a conference room booking system. The conference room is available from 09:00 to 17:00 each day, and you need to ensure that the room is utilized without any overlapping bookings. Write a program to find the maximum number of non-overlapping bookings that can be accommodated within a single day. Input The input consists of multiple datasets. Each dataset represents a day\'s bookings and follows this format: N Start1 End1 Start2 End2 ... StartN EndN N (0 ≤ N ≤ 100) is the number of booking requests for that day. Each booking request is represented by Starti and Endi (both in the format HH:MM), indicating the start and end times of the booking. All times are within the operating hours of 09:00 to 17:00. The input ends with a line containing a single zero, which should not be processed. Output For each dataset, print the maximum number of non-overlapping bookings that can be accommodated within the operating hours of the conference room. Example Input 3 09:00 11:00 13:00 15:00 10:00 12:00 4 09:00 10:30 11:00 12:30 12:00 13:00 14:00 15:30 0 Output 2 3","solution":"def parse_time(time_str): hours, minutes = map(int, time_str.split(\\":\\")) return hours * 60 + minutes def max_non_overlapping_bookings(data): lines = data.strip().split(\\"n\\") results = [] idx = 0 while idx < len(lines): n = int(lines[idx]) if n == 0: break idx += 1 bookings = [] for _ in range(n): start, end = lines[idx].split() bookings.append((parse_time(start), parse_time(end))) idx += 1 bookings.sort(key=lambda x: x[1]) # Sort by end time last_end_time = 0 count = 0 for start, end in bookings: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results"},{"question":"You are given a binary tree, where each node contains a single digit (0-9). Your task is to find the maximum sum of digits from the root to any leaf in the binary tree. Constraints: The number of nodes in the tree is between 1 and 1000 inclusive. Input: You will read the input from the standard input, which will be given in the following format: ``` n node1 val1 left1 right1 node2 val2 left2 right2 : noden valn leftn rightn ``` Where - n is the number of nodes in the tree. - nodei represents the i-th node id (0-indexed). - vali is the value of the nodei. - lefti is the left child of nodei (or -1 if it does not have a left child). - righti is the right child of nodei (or -1 if it does not have a right child). Output: Print the maximum sum of digits from the root to any leaf. Example: Input: ``` 5 0 5 1 2 1 3 3 -1 2 2 -1 4 3 7 -1 -1 4 8 -1 -1 ``` Output: ``` 20 ``` Explanation: - The binary tree has the following structure: ``` 5 / 3 2 / 7 8 ``` - The maximum sum of digits from root to any leaf is 5 + 2 + 8 = 15 (5 -> 2 -> 8).","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(nodes): if not nodes: return None node_map = {i: TreeNode(val) for i, val, left, right in nodes} for i, val, left, right in nodes: if left != -1: node_map[i].left = node_map[left] if right != -1: node_map[i].right = node_map[right] return node_map[0] def max_sum_path(root): if not root: return 0 def dfs(node): if not node: return 0 if not node.left and not node.right: return node.val left_sum = dfs(node.left) if node.left else 0 right_sum = dfs(node.right) if node.right else 0 return node.val + max(left_sum, right_sum) return dfs(root) def main(): import sys input = sys.stdin.read data = input().strip().split(\\"n\\") n = int(data[0]) nodes = [] for line in data[1:]: node_id, val, left, right = map(int, line.split()) nodes.append((node_id, val, left, right)) root = build_tree(nodes) result = max_sum_path(root) print(result)"},{"question":"You are given a string S of length N, and a list of M pairs of integers, each pair representing a range [l, r] (inclusive, 0-based indexing). For each pair, you have to determine the number of distinct characters in the substring S[l..r]. Input Format: - The first line contains the integer N, the length of the string. - The second line contains the string S of length N. - The third line contains the integer M, the number of pairs. - The next M lines contain two integers l and r, denoting the range [l, r]. Output Format: - For each pair, output a single integer, the number of distinct characters in the substring S[l..r]. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ M ≤ 10^4 - 0 ≤ l ≤ r < N - S consists of only lowercase English letters. SAMPLE INPUT 10 abacabadab 3 0 3 1 4 2 7 SAMPLE OUTPUT 3 3 4 Explanation For the first range [0, 3], the substring is \\"abac\\" which contains \'a\', \'b\', and \'c\' – 3 distinct characters. For the second range [1, 4], the substring is \\"baca\\" which also contains 3 distinct characters. For the third range [2, 7], the substring is \\"acabad\\" which contains \'a\', \'b\', \'c\', and \'d\' – 4 distinct characters.","solution":"def distinct_characters_in_substrings(S, ranges): Returns a list containing the number of distinct characters in the substring S[l..r] for each (l, r) in ranges. Parameters: S (str): The input string. ranges (list of tuples): A list of (l, r) pairs representing index ranges. Returns: list: A list of integers representing the number of distinct characters in each substring S[l..r]. results = [] for (l, r) in ranges: substring = S[l:r+1] # extract substring S[l..r] distinct_characters = set(substring) # get distinct characters results.append(len(distinct_characters)) # count of distinct characters return results"},{"question":"Given a rectangular grid of characters, check whether there exists a contiguous substring in any row or column that reads the same forward and backward (i.e., is a palindrome). -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m (1 le n, m le 50) — the dimensions of the grid. The following n lines each contain a string of length m consisting of lowercase English letters representing the grid. -----Output----- For each test case, if such a contiguous palindrome substring exists in either any row or column, print \\"YES\\". Otherwise, print \\"NO\\". -----Examples----- Input 2 3 3 abc aba xyz 4 4 abcd efgh ijkl mnop Output YES NO -----Note----- In the first example, the substring \\"aba\\" in the second row is a palindrome. In the second example, none of the substrings in any row or column is a palindrome.","solution":"def is_palindrome(s): return s == s[::-1] def contains_palindrome(grid, n, m): # Check each row for palindromes for row in grid: for k in range(2, m+1): # Minimum palindrome length is 2 for i in range(m - k + 1): if is_palindrome(row[i:i+k]): return \\"YES\\" # Check each column for palindromes for col in range(m): for k in range(2, n+1): # Minimum palindrome length is 2 for i in range(n - k + 1): substring = \'\'.join(grid[i+j][col] for j in range(k)) if is_palindrome(substring): return \\"YES\\" return \\"NO\\" def check_palindrome_substrings(test_cases): results = [] for grid, n, m in test_cases: results.append(contains_palindrome(grid, n, m)) return results"},{"question":"You have been tasked with creating a program that processes a list of integers, where each integer represents the number of steps taken by a person each day. Your goal is to calculate the average number of steps taken per week and determine if the individual\'s activity level meets a basic fitness goal. The fitness goal is defined as follows: - If the average steps per day in a week is 10,000 steps or more, the person is classified as \\"Active\\". - If the average steps per day in a week is less than 10,000 steps, the person is classified as \\"Inactive\\". Implement a function `determine_fitness_activity(step_counts)` that takes a list of integers `step_counts` as an argument and returns a list of strings where each string represents the activity level for each corresponding week. The input list will contain the total number of steps taken each day. Assume the list length is always a multiple of 7. # Example: ```python def determine_fitness_activity(step_counts): # Your code here # Example usage: step_counts = [12000, 11000, 8000, 9500, 10000, 10500, 11500, 5000, 6000, 7000, 8000, 10000, 9000, 9100] print(determine_fitness_activity(step_counts)) # Output: [\\"Active\\", \\"Inactive\\"] ``` # Notes: - Each element in the `step_counts` list represents the number of steps taken in a single day. - Compute the average number of steps per day for each week and compare it to the fitness goal. - The result should be a list where each week is classified as either \\"Active\\" or \\"Inactive\\".","solution":"def determine_fitness_activity(step_counts): Determines the fitness activity level based on weekly average steps. :param step_counts: List[int] - A list of integers representing daily step counts. :return: List[str] - A list containing \\"Active\\" or \\"Inactive\\" for each week. fitness_activity = [] steps_per_week = 7 for i in range(0, len(step_counts), steps_per_week): weekly_steps = step_counts[i:i+steps_per_week] average_steps = sum(weekly_steps) / steps_per_week if average_steps >= 10000: fitness_activity.append(\\"Active\\") else: fitness_activity.append(\\"Inactive\\") return fitness_activity"},{"question":"Overview In dealing with prime numbers, it is sometimes useful to determine the factors of a number to analyze its properties. Factoring a number into its prime components can provide insights into its structure and help with various computational problems. Prime Factorization Prime factorization involves breaking down a number into its prime factors. For example, the prime factorization of 20 is 2^2 * 5^1 because 2 and 5 are prime numbers, and their exponents denote how many times they are multiplied together to get 20. Task Your task is to write a function that receives a number and returns its prime factorization in a specific string format. # Input - A positive integer `n` (1 ≤ n ≤ 10^6). # Output - A string that represents the prime factorization of the number. The format must follow these rules: - Each distinct prime factor should be represented in the format `prime^exponent`, where `prime` is the prime factor and `exponent` is the number of times it is multiplied. - The factors should be listed in ascending order. - If a factor has an exponent of 1, the exponent should be omitted. For instance, `2^1` should be represented as `2`. - The factors should be separated by a space. # Examples ```plaintext Input: 20 Output: \\"2^2 5\\" Input: 100 Output: \\"2^2 5^2\\" Input: 71 Output: \\"71\\" Input: 360 Output: \\"2^3 3^2 5\\" Input: 1 Output: \\"\\" ``` # Notes - Ensure that your function is efficient enough to handle the upper limit of `n`. - Consider edge cases, such as `n` being a prime number or `n` being 1.","solution":"def prime_factorization(n): Returns the prime factorization of the number n as a string in the form specified. def get_prime_factors(n): factors = {} d = 2 while d * d <= n: while (n % d) == 0: if d in factors: factors[d] += 1 else: factors[d] = 1 n //= d d += 1 if n > 1: factors[n] = 1 return factors if n == 1: return \\"\\" factors = get_prime_factors(n) result = [] for prime in sorted(factors): if factors[prime] == 1: result.append(f\\"{prime}\\") else: result.append(f\\"{prime}^{factors[prime]}\\") return \\" \\".join(result)"},{"question":"Dev has a collection of N numbers and wants to determine the type of sequence it forms: increasing, decreasing, or neither. A sequence is called: 1) *Increasing* if every number is strictly greater than the previous one. 2) *Decreasing* if every number is strictly smaller than the previous one. 3) *Neither* if it is neither increasing nor decreasing. ------ Input Format ------ - The first line contains T denoting the number of test cases. Then the test cases follow. - Each test case begins with an integer N denoting the number of elements in the sequence. - The next line contains N space-separated integers representing the sequence. ------ Output Format ------ For each test case, output on a single line the type of sequence: Increasing, Decreasing, or Neither. The output is case sensitive. ------ Constraints ------ 1 ≤ T ≤ 20 2 ≤ N ≤ 100 0 ≤ sequence_elements ≤ 1000 ------ Sample Input 1 ------ 3 5 1 2 3 4 5 4 10 8 6 2 6 3 3 5 4 2 1 ------ Sample Output 1 ------ Increasing Decreasing Neither ------ Explanation 1 ------ Test case 1: The sequence 1 2 3 4 5 is strictly increasing. Test case 2: The sequence 10 8 6 2 is strictly decreasing. Test case 3: The sequence 3 3 5 4 2 1 is neither increasing nor decreasing.","solution":"def determine_sequence_type(N, sequence): Given a sequence of N numbers, determine if it is increasing, decreasing, or neither. Parameters: N (int): The number of elements in the sequence. sequence (List[int]): The sequence of numbers. Returns: str: \\"Increasing\\", \\"Decreasing\\", or \\"Neither\\". is_increasing = True is_decreasing = True for i in range(1, N): if sequence[i] <= sequence[i - 1]: is_increasing = False if sequence[i] >= sequence[i - 1]: is_decreasing = False if is_increasing: return \\"Increasing\\" elif is_decreasing: return \\"Decreasing\\" else: return \\"Neither\\" def process_test_cases(T, test_cases): Process multiple test cases to determine the type of each sequence. Parameters: T (int): The number of test cases. test_cases (List[Tuple[int, List[int]]]): List of tuples, each containing N and the sequence. Returns: List[str]: List of results for each test case, either \\"Increasing\\", \\"Decreasing\\", or \\"Neither\\". results = [] for N, sequence in test_cases: result = determine_sequence_type(N, sequence) results.append(result) return results"},{"question":"A new company is expanding their delivery services by using delivery drones that operate on a specific grid. The drones start from a central hub located at (0, 0) and need to follow specific instructions to deliver packages. The company wants to ensure that their drones always return to the hub after making all deliveries. Your task is to create a program that simulates the drone\'s movements and checks whether it returns to the central hub after a given set of instructions. Each instruction is one of the following four types: - \\"U\\" (up): move from (x, y) to (x, y+1) - \\"D\\" (down): move from (x, y) to (x, y-1) - \\"L\\" (left): move from (x, y) to (x-1, y) - \\"R\\" (right): move from (x, y) to (x+1, y) Input The first line contains an integer n (1 ≤ n ≤ 105), the number of instructions. The second line contains a string of length n consisting only of characters \'U\', \'D\', \'L\', \'R\' representing the instructions. Output Print \\"YES\\" if the drone returns to the central hub (0, 0) after all instructions, otherwise print \\"NO\\". Examples Input 4 UDLR Output YES Input 3 UDD Output NO","solution":"def check_return_to_hub(n, instructions): Check if the drone returns to the central hub (0, 0) after executing all instructions. Parameters: - n (int): The number of instructions. - instructions (str): A string of length n consisting of characters \'U\', \'D\', \'L\', \'R\'. Returns: - str: \\"YES\\" if the drone returns to the central hub after all instructions, otherwise \\"NO\\". x, y = 0, 0 # Initial position at the central hub (0, 0) for instruction in instructions: if instruction == \'U\': y += 1 elif instruction == \'D\': y -= 1 elif instruction == \'L\': x -= 1 elif instruction == \'R\': x += 1 if x == 0 and y == 0: return \\"YES\\" else: return \\"NO\\" # Example usage: # result = check_return_to_hub(4, \\"UDLR\\") # print(result) # Output: \\"YES\\""},{"question":"Bob is organizing a social gathering where individuals are organized into different groups based on their interests. Each individual can belong to one or multiple groups. Bob wants to find out the minimal number of individual invitations he needs to send out such that at least one person from each group will attend the party. Input Format: - The first line of input contains two integers, N and M, where N is the number of individuals and M is the number of groups. - The next M lines describe each group. The i-th line starts with an integer Ki, which is the number of members in the i-th group, followed by Ki space-separated integers representing the individuals who belong to the i-th group. Output Format: - Print a single integer which is the minimal number of invitations Bob needs to send out such that at least one person from each group will attend the party. Constraints: - 1 ≤ N ≤ 50 - 1 ≤ M ≤ 20 - 1 ≤ Ki ≤ N - 0 ≤ individual number < N Input Example: ``` 5 3 2 0 1 3 1 2 3 2 3 4 ``` Output Example: ``` 2 ``` Explanation: In this example, inviting individual 1 and individual 3 ensures that at least one person from each group attends the party.","solution":"def min_invitations(N, M, groups): Returns the minimal number of invitations required so that at least one person from each group attends the party. from itertools import combinations # Create a list of all individuals individuals = list(range(N)) # Iterate through all possible combinations of invitations (from size 1 to N) for r in range(1, N + 1): for comb in combinations(individuals, r): invited_set = set(comb) if all(any(member in invited_set for member in group) for group in groups): return r return N"},{"question":"Alice is playing a game with her friends. The game involves a sequence of n magic stones placed in a row, each having a certain power level. The i-th stone\'s power level is ai. Alice can perform an operation any number of times to combine two adjacent stones into one. When she combines stones, the resulting stone gains power, which is equal to the sum of the power levels of the two stones combined. Alice wants to make her stone as powerful as possible. However, due to the game\'s rules, the combined power of the resulting stone after each operation must not exceed a given maximum value k. If it is not possible to combine any more stones without exceeding this limit, Alice stops. Given the initial power levels of the stones and the maximum allowable power level k, your task is to find the maximum power level Alice can achieve for the resulting stone after performing any number of operations. Input The first line of the input contains an integer n — the number of magic stones (1 ≤ n ≤ 100,000). The second line contains n space-separated integers ai (1 ≤ ai ≤ 10^9) — the initial power levels of the magic stones. The third line contains an integer k (1 ≤ k ≤ 10^9) — the maximum allowable power level. Output Print the maximum power level Alice can achieve for the resulting stone without exceeding the allowable power level. Examples Input 5 2 1 3 4 1 5 Output 5 Input 3 10 5 20 25 Output 20 Note In the first example, Alice can combine the first and second stones to get a stone with power level 3. She then combines the new stone (power level 3) with the third stone (power level 3), getting a stone with power level 6 but she cannot proceed further as it exceeds the limit k. The maximum power without exceeding k is 5 by combining the last two stones. In the second example, no combinations can be made without exceeding the limit k. So the result is the highest initial stone power level (20).","solution":"def max_power(n, stones, k): Given the number of stones, their power levels, and the maximum allowable power level, returns the maximum power level achievable by combining stones under the constraints. max_power_level = 0 current_sum = 0 for stone in stones: if current_sum + stone <= k: current_sum += stone else: max_power_level = max(max_power_level, current_sum) if stone <= k: current_sum = stone else: current_sum = 0 max_power_level = max(max_power_level, current_sum) return max_power_level"},{"question":"Fred loves climbing stairs. He can either climb 1 step or 2 steps at a time. However, due to varying stamina, Fred can only climb up to a maximum of `max_step` steps during any single climb. Given a staircase with `n` steps, write a program that computes the total number of distinct ways Fred can climb to the top. Input - A single integer `n` (1 ≤ n ≤ 1000), the total number of steps of the staircase. - A single integer `max_step` (1 ≤ max_step ≤ min(n, 10)), the maximum number of steps Fred can take in one climb. Output - A single integer representing the total number of distinct ways Fred can reach the top. Example Input ``` 4 2 ``` Output ``` 5 ``` Explanation The distinct ways to climb 4 steps when the maximum step size is 2 are: 1. 1 + 1 + 1 + 1 2. 1 + 1 + 2 3. 1 + 2 + 1 4. 2 + 1 + 1 5. 2 + 2","solution":"def ways_to_climb_stairs(n, max_step): # Using dynamic programming to find the number of ways to climb n steps dp = [0] * (n + 1) dp[0] = 1 # There\'s one way to stay at the ground (doing nothing) for i in range(1, n + 1): for j in range(1, min(max_step, i) + 1): dp[i] += dp[i - j] return dp[n]"},{"question":"Given an m x n matrix, write a function that rotates the matrix 90 degrees clockwise. Example: Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: matrix = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] Your Task: You only need to complete the function rotateMatrix() which takes the matrix as an argument and modifies it in-place to achieve the rotation. The printing and checking tasks are done by the driver code. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(1) Constraints: 1 <= m, n <= 100 -1000 <= matrix[i][j] <= 1000","solution":"def rotateMatrix(matrix): Rotates the matrix 90 degrees clockwise in-place. # Transpose the matrix for i in range(len(matrix)): for j in range(i+1, len(matrix[0])): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for row in matrix: row.reverse()"},{"question":"Write a function `checkPIN`/`check_pin()` that takes a string as an input and determines if it is a valid PIN. A valid PIN satisfies the following criteria: 1. It must consist only of numeric digits (0-9). 2. It must be exactly 4 or exactly 6 characters long. The function should return `True` if the input string is a valid PIN, and `False` otherwise. Examples: ```python check_pin(\\"1234\\") # True check_pin(\\"123456\\") # True check_pin(\\"123\\") # False (incorrect length) check_pin(\\"12345a\\") # False (contains a non-numeric character) check_pin(\\"12345 \\") # False (contains a space) ```","solution":"def check_pin(pin): Determines if the input string is a valid PIN. Parameters: pin (str): The input string to be checked. Returns: bool: True if the input string is a valid PIN, False otherwise. return pin.isdigit() and (len(pin) == 4 or len(pin) == 6)"},{"question":"Zara is designing a decorative panel using square tiles. Each tile is colored either black or white, and she\'s arranging them in an n x n grid. To make the design more interesting, Zara wants to ensure that no row or column in the grid contains three consecutive tiles of the same color. Given the grid size n, determine if it is possible to fill the grid such that the condition is met. If it is possible, provide one such arrangement; otherwise, return an indication that it is not feasible. Input The input consists of a single integer n (3 ≤ n ≤ 50) — the length of the side of the grid. Output If it is possible to fill the grid such that no row or column contains three consecutive tiles of the same color, output the grid. Use \'B\' for a black tile and \'W\' for a white tile. If it is not possible, output \\"IMPOSSIBLE\\". Examples Input 5 Output BWBBW WBWBW BWBWB WBWBW BWBBW Input 3 Output IMPOSSIBLE","solution":"def create_decorative_panel(n): Creates an n x n grid such that no row or column contains three consecutive tiles of the same color. Returns the valid grid or \\"IMPOSSIBLE\\" if it\'s not feasible. if n < 3: return \\"IMPOSSIBLE\\" grid = [[\'\' for _ in range(n)] for _ in range(n)] for i in range(n): for j in range(n): if (i + j) % 2 == 0: grid[i][j] = \'B\' else: grid[i][j] = \'W\' return [\'\'.join(row) for row in grid]"},{"question":"You are given an array of integers and a target sum. Your task is to find pairs in the array that add up to the target sum. You need to write a function that returns the number of such unique pairs. Two pairs (a, b) and (b, a) are considered the same, and should be counted only once. If there are no such pairs, return 0. Input: - An integer n, the number of elements in the array (1 ≤ n ≤ 10^3). - An array of n integers (each integer is between -10^3 and 10^3). - An integer target, the target sum. Output: - An integer representing the number of unique pairs that add up to the target sum. Example Input: 5 1 5 7 -1 5 6 Output: 2 Explanation: The pairs that add up to 6 are (1, 5) and (7, -1). The pair (5, 1) is considered the same as (1, 5) and only counted once.","solution":"def count_pairs_with_sum(arr, target): Returns the number of unique pairs in the array that add up to the target sum. seen = {} unique_pairs = set() for num in arr: complementary = target - num if complementary in seen: # To ensure unique pairs we insert a sorted tuple unique_pairs.add(tuple(sorted((num, complementary)))) seen[num] = seen.get(num, 0) + 1 return len(unique_pairs) # Example usage # print(count_pairs_with_sum([1, 5, 7, -1, 5], 6)) # Output: 2"},{"question":"Given an array of integers `arr` and an integer `target`, determine if there exists a pair of distinct elements in the array that sum up to `target`. Return `True` if such a pair exists, and `False` otherwise. Example 1: Input: arr = [1, 2, 3, 9], target = 8 Output: False Explanation: There is no pair of distinct elements in the array that sum up to 8. Example 2: Input: arr = [1, 2, 4, 4], target = 8 Output: True Explanation: The pair (4, 4) summing to 8 exists in the array. Constraints: - 2 <= arr.length <= 10^4 - -10^9 <= arr[i] <= 10^9 - -10^9 <= target <= 10^9 Notes: - You can assume the array contains distinct elements. - The order of the elements in the pair does not matter (i.e., if (a, b) is a valid pair, then (b, a) is also considered valid).","solution":"def has_pair_with_sum(arr, target): Determines if there exist two distinct elements in arr that sum up to target. Args: arr (list of int): The list of integers. target (int): The target sum. Returns: bool: True if such a pair exists, False otherwise. seen = set() for num in arr: if (target - num) in seen: return True seen.add(num) return False"},{"question":"Given an array of integers, your task is to find the longest subsequence such that every two consecutive elements differ by 1. The subsequence does not have to be contiguous, but its elements must appear in the same order as in the original array. Constraints * 1 ≤ n ≤ 100,000 * -1,000,000 ≤ arr[i] ≤ 1,000,000 for 1 ≤ i ≤ n Input The input is given in the following format: ``` n arr[0] arr[1] ... arr[n-1] ``` Output Print the length of the longest subsequence where any two consecutive integers differ by exactly 1. Example Input ``` 7 10 9 4 5 4 8 6 ``` Output ``` 3 ``` Explanation One of the longest subsequences where the difference between consecutive elements is 1 is [10, 9, 8] or [9, 8, 9]. Both have a length of 3. Note The subsequence [10, 9, 8] is the longest subsequence where the difference between all consecutive elements is 1.","solution":"def longest_subsequence_length(n, arr): if n == 0: return 0 # Dictionary to store the length of the longest subsequence ending at each value. dp = {} for num in arr: if num - 1 in dp: dp[num] = max(dp.get(num, 0), dp[num - 1] + 1) if num + 1 in dp: dp[num] = max(dp.get(num, 0), dp[num + 1] + 1) dp[num] = max(dp.get(num, 0), 1) # Initialize/handle the current number case. return max(dp.values()) # Function to process the input data def process_input(data): lines = data.strip().split(\\"n\\") n = int(lines[0]) arr = list(map(int, lines[1].strip().split())) return longest_subsequence_length(n, arr)"},{"question":"Two neighboring towns, Town A and Town B, decided to build a new railway system to connect their public transportation networks. The two towns want to build exactly one railway that connects any one station from Town A to any one station from Town B. However, the cost of building the railway depends on the distances between the stations in both towns. Given the coordinates of the stations in Town A and Town B, help the towns determine the minimum cost to build the railway. The cost to build a railway between two stations is the Euclidean distance between their coordinates. -----Input----- The first line of the input contains two space-separated integers n and m, where 2 leq n, m leq 1000 represent the number of stations in Town A and Town B, respectively. The next n lines contain two integers x_i and y_i each, describing the coordinates of the i-th station in Town A. The next m lines contain two integers x_j and y_j each, describing the coordinates of the j-th station in Town B. The coordinates range from -10^5 to 10^5. -----Output----- The output contains a single line with the minimum cost to build the railway, rounded to 6 decimal places. -----Examples----- Sample Input: 3 2 1 1 2 2 3 3 4 4 5 5 Sample Output: 1.414214 Sample Input: 2 2 0 0 1 0 1 1 2 1 Sample Output: 1.000000","solution":"import math def min_cost_to_build_railway(n, m, coordinates_a, coordinates_b): Returns the minimum cost to build the railway between stations in Town A and B. Parameters: n (int): Number of stations in Town A. m (int): Number of stations in Town B. coordinates_a (list): List of tuples representing coordinates of stations in Town A. coordinates_b (list): List of tuples representing coordinates of stations in Town B. Returns: float: Minimum cost of building railway rounded to 6 decimal places. min_distance = float(\'inf\') for (x1, y1) in coordinates_a: for (x2, y2) in coordinates_b: distance = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) if distance < min_distance: min_distance = distance return round(min_distance, 6)"},{"question":"Given an array `B` of size `M`, you need to find the length of the longest subarray in which all the elements have a difference less than or equal to `K`. ------ Input Format ------ - The first line of input will contain a single integer `P`, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two integers `M` and `K` — the size of `B` and the maximum allowed difference. - The next line contains `M` space-separated integers `B_{1}, B_{2}, ..., B_{M}`, the elements of the array `B`. ------ Output Format ------ For each test case, output the length of the longest subarray where the absolute difference between any two elements is less than or equal to `K`. ------ Constraints ------ 1 ≤ P ≤ 10 1 ≤ M ≤ 10^{5} 1 ≤ K ≤ 10^{6} 1 ≤ B_{i} ≤ 10^{9} - The sum of `M` over all test cases won\'t exceed 10^{5}. ----- Sample Input 1 ------ 2 5 3 1 5 3 3 2 4 2 10 12 14 10 ----- Sample Output 1 ------ 4 2 ----- Explanation 1 ------ Test case 1: The longest subarray is `[5, 3, 3, 2]` where the difference between the maximum and minimum value is `5 - 2 = 3`, which is ≤ `3`. Hence, the length is `4`. Test case 2: The longest subarray is `[10, 12]` or `[12, 14]` where the difference between the maximum and minimum value is `2`, which is ≤ `2`. Hence, the length is `2`.","solution":"def longest_subarray_length(M, K, B): Returns the length of the longest subarray where the absolute difference between any two elements is ≤ K. from collections import deque # To keep track of the minimum and maximum values in the current window min_deque = deque() max_deque = deque() left = 0 max_len = 0 for right in range(M): # Update the deques while min_deque and B[min_deque[-1]] > B[right]: min_deque.pop() min_deque.append(right) while max_deque and B[max_deque[-1]] < B[right]: max_deque.pop() max_deque.append(right) # Maintain the invariant of the condition while B[max_deque[0]] - B[min_deque[0]] > K: left += 1 if min_deque[0] < left: min_deque.popleft() if max_deque[0] < left: max_deque.popleft() # Update maximum length max_len = max(max_len, right - left + 1) return max_len def process_test_cases(P, test_cases): results = [] for i in range(P): M, K, B = test_cases[i] results.append(longest_subarray_length(M, K, B)) return results"},{"question":"# Task You are given a rectangular orchard divided into a grid, where each cell might contain a different fruit tree. Each tree is represented by a lowercase letter corresponding to the type of fruit. For instance, an apple tree might be \'a\', an orange tree \'o\', etc. You need to write a program that determines the largest possible rectangular sub-grid (with a size greater than 1x1) containing only one type of fruit tree. If there are multiple sub-grids with the same size, choose any of them. # Input/Output - `[input]` 2D array `orchard` A 2D array of lowercase letters representing different fruit trees. 1 ≤ number of rows ≤ 50, 1 ≤ number of columns ≤ 50. - `[output]` an integer array An array of four integers `[length, width, start_row, start_col]` representing the size and position of the top-left corner of the largest rectangular sub-grid containing only one type of fruit tree. If there are no such sub-grids, return `[0,0,0,0]`. # Example For `orchard = [[\\"a\\", \\"a\\", \\"a\\", \\"b\\"], [\\"a\\", \\"a\\", \\"a\\", \\"b\\"], [\\"c\\", \\"c\\", \\"c\\", \\"c\\"]]`, the output should be `[2, 3, 0, 0]`. The largest rectangular sub-grid containing only one type of fruit tree is 2x3 and starts at position (0,0). Another possible output for this case could be `[2, 3, 0, 1]`. For `orchard = [[\\"a\\", \\"b\\"], [\\"c\\", \\"d\\"]]`, the output should be `[0, 0, 0, 0]`. There are no rectangular sub-grids larger than 1x1 that contain only one type of fruit tree.","solution":"def largest_single_fruit_subgrid(orchard): rows = len(orchard) cols = len(orchard[0]) # Helper function to check if a rectangle from (r1, c1) to (r2, c2) contains only one type of fruit tree def is_uniform(r1, c1, r2, c2): fruit = orchard[r1][c1] for r in range(r1, r2 + 1): for c in range(c1, c2 + 1): if orchard[r][c] != fruit: return False return True max_area = 0 result = [0, 0, 0, 0] for r1 in range(rows): for c1 in range(cols): for r2 in range(r1 + 1, rows): for c2 in range(c1 + 1, cols): if is_uniform(r1, c1, r2, c2): length = r2 - r1 + 1 width = c2 - c1 + 1 area = length * width if area > max_area: max_area = area result = [length, width, r1, c1] return result"},{"question":"You have a list of integers. Each integer can be either positive, negative, or zero. Your task is to process a series of update and query operations on this list. The update operation consists of changing the value at a specified index to a new value. The query operation consists of finding the sum of all elements in the list within a given range of indices (inclusive). Your task is to efficiently handle these operations. INPUT The first line of input contains a positive integer n, denoting the number of elements in the list. The second line contains n space-separated integers, representing the elements of the list. The third line contains an integer q, the number of operations. The following q lines each describe an operation. An operation can be one of the following two types: - `1 i x` (1 ≤ i ≤ n, -10^9 ≤ x ≤ 10^9): This operation updates the element at index i to x. - `2 L R` (1 ≤ L ≤ R ≤ n): This operation queries the sum of elements from index L to R. OUTPUT For each query operation, output the result on a new line. CONSTRAINTS 1 ≤ n ≤ 100000 -10^9 ≤ element in list ≤ 10^9 1 ≤ q ≤ 100000 SAMPLE INPUT 5 1 -2 3 4 5 4 2 1 3 1 2 10 2 1 3 2 2 5 SAMPLE OUTPUT 2 14 22","solution":"class QueryProcessor: def __init__(self, initial_list): self.list = initial_list self.n = len(initial_list) self.prefix_sum = [0] * (self.n + 1) self.build_prefix_sum() def build_prefix_sum(self): for i in range(1, self.n + 1): self.prefix_sum[i] = self.prefix_sum[i - 1] + self.list[i - 1] def update(self, i, x): diff = x - self.list[i - 1] self.list[i - 1] = x for j in range(i, self.n + 1): self.prefix_sum[j] += diff def query(self, L, R): return self.prefix_sum[R] - self.prefix_sum[L - 1] def process_operations(n, initial_list, operations): query_processor = QueryProcessor(initial_list) results = [] for operation in operations: op_type = operation[0] if op_type == 1: _, i, x = operation query_processor.update(i, x) elif op_type == 2: _, L, R = operation result = query_processor.query(L, R) results.append(result) return results"},{"question":"Jack is a nature enthusiast and loves collecting leaves from different trees. He categorizes the leaves by their sizes, which are represented as integers in an array. Jack wants to create a collection in which the leaves are arranged in strictly increasing order of their sizes. He can remove any number of leaves from the array to achieve this. Your task is to determine the minimum number of leaves Jack needs to remove to make the remaining collection strictly increasing. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of leaves in Jack\'s collection. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the sizes of the leaves. -----Output----- Output a single integer — the minimum number of leaves Jack needs to remove. -----Examples----- Input 6 1 3 2 4 3 5 Output 2 Input 5 5 5 5 5 5 Output 4 Input 8 1 2 3 4 5 6 7 8 Output 0 -----Note----- In the first example, Jack can achieve a strictly increasing order by removing the leaves with sizes 3 and 3, resulting in the sequence [1, 2, 4, 5]. In the second example, all leaves have the same size, so Jack must remove 4 of the 5 leaves to leave a single leaf remaining. In the third example, the leaves are already in strictly increasing order, so Jack does not need to remove any leaves.","solution":"def min_removals_to_strictly_increasing(arr): Determines the minimum number of leaves to remove to make the array strictly increasing. from bisect import bisect_left if not arr: return 0 # This will store the longest increasing subsequence lis = [] for leaf in arr: pos = bisect_left(lis, leaf) if pos == len(lis): lis.append(leaf) else: lis[pos] = leaf # Number of elements to remove is total elements minus length of lis return len(arr) - len(lis)"},{"question":"You are given a string representation of a mathematical expression containing integers, basic arithmetic operations (+, -, *, /), and parentheses. Your task is to evaluate this expression and return the result as an integer. The input will be a valid expression, and operations should follow standard precedence rules. --- **Requirements:** 1. Implement a function to evaluate the expression from the input string. 2. The input string will only contain non-negative integers and the operators `+`, `-`, `*`, `/`, and parentheses `(`, `)`. 3. The division operator `/` should perform integer division in Python. 4. The input expression will always be valid and well-formed (no need to handle invalid syntax). --- **Examples:** *In:* `\\"3 + 2 * (2 - 1)\\"` *Out:* `5` --- *In:* `\\"10 + 2 * 6\\"` *Out:* `22` --- *In:* `\\"100 * (2 + 12) / 14\\"` *Out:* `100` --- *In:* `\\"7 + (6 * 5^2 + 3)\\"` *Out:* `160` --- Note: The caret symbol (`^`) represents exponentiation. In this problem, you should treat `^` as a lower precedence operator compared to the traditional evaluation order.","solution":"def evaluate_expression(expression): Evaluate the given mathematical expression and return the result as an integer. def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 if op == \'^\': return 3 return 0 def apply_op(operands, operator): right = operands.pop() left = operands.pop() if operator == \'+\': operands.append(left + right) elif operator == \'-\': operands.append(left - right) elif operator == \'*\': operands.append(left * right) elif operator == \'/\': operands.append(left // right) elif operator == \'^\': operands.append(left ** right) def evaluate(tokens): operands = [] operators = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue elif tokens[i] == \'(\': operators.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while (i < len(tokens) and tokens[i].isdigit()): val = (val * 10) + int(tokens[i]) i += 1 operands.append(val) i -= 1 elif tokens[i] == \')\': while len(operators) != 0 and operators[-1] != \'(\': apply_op(operands, operators.pop()) operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(tokens[i])): apply_op(operands, operators.pop()) operators.append(tokens[i]) i += 1 while len(operators) != 0: apply_op(operands, operators.pop()) return operands[-1] return evaluate(expression)"},{"question":"Given a string, you need to find the longest substring that can be rearranged to form a palindrome. A palindrome is a word that reads the same forwards and backwards. Example 1: Input: \\"abccccdd\\" Output: 7 Explanation: One possible longest palindrome that can be formed is \\"dccaccd\\", and its length is 7. Example 2: Input: \\"a\\" Output: 1 Explanation: The longest palindrome that can be formed is \\"a\\", and its length is 1. Example 3: Input: \\"abc\\" Output: 1 Explanation: The longest palindrome that can be formed is either \\"a\\" or \\"b\\" or \\"c\\", and its length is 1. Note: The length of the input string will not exceed 1,000 characters.","solution":"def longestPalindrome(s: str) -> int: Find the length of the longest substring that can be rearranged to form a palindrome. from collections import Counter count = Counter(s) length = 0 odd_found = False for freq in count.values(): if freq % 2 == 0: length += freq else: length += freq - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"You are given an array of integers `arr` and a 2D array `operations` where `operations[i] = [type, x, y]`. Each operation is one of the following: 1. If the operation is `[1, x, y]`, update `arr[x]` to be `y`. 2. If the operation is `[2, x, y]`, find the sum of the elements from index `x` to `y` (inclusive) in the array. Your task is to return the results of all the operations of type 2 in the order they appear. Example 1: Input: arr = [1, 3, 5, 7, 9], operations = [[2, 1, 3], [1, 2, 4], [2, 2, 4]] Output: [15, 20] Explanation: For the first operation `[2, 1, 3]`, the sum of elements from index 1 to 3 is 3 + 5 + 7 = 15. After the second operation `[1, 2, 4]`, the array becomes [1, 3, 4, 7, 9]. For the third operation `[2, 2, 4]`, the sum of elements from index 2 to 4 is 4 + 7 + 9 = 20. Example 2: Input: arr = [2, 4, 6, 8, 10], operations = [[1, 0, 5], [2, 0, 2], [1, 3, 1], [2, 1, 4]] Output: [15, 21] Explanation: After the first operation `[1, 0, 5]`, the array becomes [5, 4, 6, 8, 10]. For the second operation `[2, 0, 2]`, the sum of elements from index 0 to 2 is 5 + 4 + 6 = 15. After the third operation `[1, 3, 1]`, the array becomes [5, 4, 6, 1, 10]. For the fourth operation `[2, 1, 4]`, the sum of elements from index 1 to 4 is 4 + 6 + 1 + 10 = 21. Constraints: 1. 1 <= arr.length <= 10^5 2. 1 <= arr[i] <= 10^9 3. 1 <= operations.length <= 10^5 4. operations[i].length == 3 5. 0 <= operations[i][1] <= operations[i][2] < arr.length 6. 1 <= operations[i][0] <= 2","solution":"def perform_operations(arr, operations): Given an array and a list of operations, perform the specified operations and return the results of the sum operations. results = [] for op in operations: type, x, y = op if type == 1: # Update operation arr[x] = y elif type == 2: # Sum operation results.append(sum(arr[x:y+1])) return results"},{"question":"Implement a function `findUnique(numbers)` that takes in a list of integers representing `numbers`, where every integer except one appears exactly twice. The function should return the integer that appears only once. # Input - The function takes one argument: - `numbers` (a list of integers): The list can have a minimum of 1 and a maximum of 10^5 integers. Each integer is between -10^9 and 10^9. # Output - The function should return a single integer which is the unique number in the list. # Example Example Input ```python numbers = [4, 3, 2, 4, 1, 3, 2] ``` Example Output ```python 1 ``` # Note - You can assume that there is always exactly one unique number in the input list. - Optimize for time and space complexity to ensure the function can handle the upper limits efficiently.","solution":"def findUnique(numbers): Returns the integer that appears exactly once in the list `numbers`, where every other integer appears exactly twice. unique = 0 for num in numbers: unique ^= num return unique"},{"question":"A company is planning to design a new transportation system in Metro City. The city is represented as an unweighted, bidirectional graph with n intersections, numbered from 1 to n. Initially, there are no roads between the intersections. During the construction phase, m bidirectional roads will be built, one after another. The i-th road connects intersections with numbers ai and bi. The company wants to understand the impact of each newly built road on the city’s connectivity. A component is defined as a set of intersections such that there is a path (direct or indirect) connecting any two intersections in this set. Initially, each intersection is a separate component. After constructing each new road, the company requires to know how many connected components exist in the city. Input The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) – the number of intersections and the number of roads, respectively. The next m lines describe the roads, each containing two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Output Print m lines: the i-th line should represent the number of connected components after the construction of the i-th road. Examples Input 5 3 1 2 3 4 2 4 Output 4 3 2 Note Initially, we have 5 intersections with no roads, resulting in 5 connected components. - After adding the first road (1, 2), intersections 1 and 2 get connected, reducing the connected components to 4. - After adding the second road (3, 4), intersections 3 and 4 get connected, reducing the connected components to 3. - After adding the third road (2, 4), intersections 1, 2, 3, and 4 become interconnected, reducing the connected components to 2.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def count_connected_components(n, roads): parent = [] rank = [] for i in range(n): parent.append(i) rank.append(0) components = n result = [] for road in roads: x, y = road if find(parent, x - 1) != find(parent, y - 1): union(parent, rank, x - 1, y - 1) components -= 1 result.append(components) return result"},{"question":"You are given a string S of length N consisting of only lowercase English letters. Your task is to determine the minimum length of the substring you could make by rearranging the characters of S such that the substring contains at least one occurrence of every character present in S. Constraints * N is an integer. * 1 leq N leq 10^{5} Input Input is given from Standard Input in the following format: S Output Output the minimum length of the substring that contains at least one occurrence of every character present in S. Examples Input abcabcbb Output 3 Input aaabbb Output 6","solution":"def min_length_substring(S): Determine the minimum length of the substring that contains at least one occurrence of every character present in the given string S. from collections import Counter # Count the frequency of each character in the string char_count = Counter(S) # The minimum length of such a substring is equal to the number of unique characters return len(char_count)"},{"question":"A delivery drone needs to drop off packages to multiple locations, represented as a grid. The drone starts at the top-left corner of the grid (0,0) and needs to reach the bottom-right corner (m-1, n-1). The drone can move right or down at any point in time. However, due to bad weather conditions, some grid cells are blocked, and the drone cannot pass through them. Write a function to calculate the number of unique paths from the start to the finish, avoiding blocked cells. Example 1: Input: grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] Output: 2 Explanation: There are two paths, one is right -> down -> down -> right, the other is down -> right -> right -> down. Example 2: Input: grid = [ [0, 1], [0, 0] ] Output: 1 Explanation: There is only one path, which is down -> right. Notes: - The grid is a 2D list of integers where 0 represents an unblocked cell, and 1 represents a blocked cell. - The dimensions of the grid are m x n, where 1 ≤ m, n ≤ 100. - The starting and ending cells are always unblocked.","solution":"def unique_paths_with_obstacles(grid): Calculate the number of unique paths from the top-left to the bottom-right corner of a grid with obstacles. if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Start position for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 # If it\'s a blocked cell else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given a matrix of dimensions n x m. The task is to find the sum of all elements within a specified submatrix defined by its upper-left and lower-right corners. Example 1: Input: n = 4, m = 4 matrix[][] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}} upper_left = (1, 1), lower_right = (2, 2) Output: 28 Explanation: The submatrix is: 6 7 10 11 The sum of elements is: 6 + 7 + 10 + 11 = 34 Example 2: Input: n = 3, m = 3 matrix[][] = {{5, 3, 8}, {1, 6, 7}, {4, 2, 9}} upper_left = (0, 0), lower_right = (2, 1) Output: 21 Explanation: The submatrix is: 5 3 1 6 4 2 The sum of elements is: 5 + 3 + 1 + 6 + 4 + 2 = 21 Your Task: Complete the function submatrixSum() that takes matrix, n, m, upper_left, and lower_right as input parameters and returns the sum of all elements in the submatrix. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(1) Constraints: 1 <= n, m <= 100 0 <= matrix[i][j] <= 1000 0 <= upper_left[0], upper_left[1], lower_right[0], lower_right[1] < N","solution":"def submatrix_sum(matrix, upper_left, lower_right): Returns the sum of all elements in the specified submatrix. Parameters: - matrix: list of lists of integers representing the n x m matrix. - upper_left: tuple of integers representing the upper-left corner of submatrix (row, column). - lower_right: tuple of integers representing the lower-right corner of submatrix (row, column). Returns: - Sum of all elements in the specified submatrix. sum_elements = 0 start_row, start_col = upper_left end_row, end_col = lower_right for i in range(start_row, end_row + 1): for j in range(start_col, end_col + 1): sum_elements += matrix[i][j] return sum_elements"},{"question":"Your task is to write a program that takes an array of integers and returns the majority element. A majority element in an array A of size n is an element that appears more than n/2 times. If there is no majority element, the program should return -1. Make sure to use a linear time algorithm, i.e., the solution has to be O(n) time complexity. Input The first line contains an integer n, the number of elements in the array A. (1 ≤ n ≤ 10^6) The second line contains n elements of the array A, each an integer A[i] where -10^9 ≤ A[i] ≤ 10^9. Output Print the majority element. If no such element exists, print -1. Example Input 7 3 3 4 2 4 4 4 Output 4 Input 6 1 2 3 4 5 6 Output -1","solution":"def find_majority_element(arr): Returns the majority element if one exists, otherwise returns -1. A majority element is one that appears more than n/2 times in the array. # Use Boyer-Moore Voting Algorithm candidate = None count = 0 # First pass to find the candidate for num in arr: if count == 0: candidate = num count = 1 elif num == candidate: count += 1 else: count -= 1 # Second pass to confirm the candidate if candidate is not None: count = sum(1 for num in arr if num == candidate) if count > len(arr) // 2: return candidate return -1"},{"question":"Given a string `str`, the task is to complete the function which returns a single integer denoting the number of distinct palindromic substrings present in the string. Examples: Input: str = \\"abaaa\\" Output: 5 Explanation: The distinct palindromic substrings are: \\"a\\", \\"aa\\", \\"aaa\\", \\"aba\\", \\"b\\". Input: str = \\"geek\\" Output: 4 Explanation: The distinct palindromic substrings are: \\"g\\", \\"e\\", \\"ee\\", \\"k\\". Input: The first line of input contains an integer `T` denoting the number of test cases. Then `T` test cases follow. Each test case contains a single input string `str`. Output: For each test case, in a new line, output the number of distinct palindromic substrings in the input string. Constraints: 1 <= T <= 100 1 <= len(str) <= 100 Example (To be used only for expected output): Input: 2 abaaa geek Output: 5 4","solution":"def count_distinct_palindromic_substrings(T, strings): def is_palindrome(s): return s == s[::-1] results = [] for s in strings: palindromes = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substring = s[i:j] if is_palindrome(substring): palindromes.add(substring) results.append(len(palindromes)) return results"},{"question":"Imagine you are working at a software company, and you have been tasked with analyzing log data to help improve the system\'s performance. The log data is recorded in a specific format, detailing the times when different processes start and end. Your goal is to determine the maximum number of processes that were running simultaneously at any given point in time. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of processes recorded in the log. Each of the next n lines contains two integers si and ei (0 ≤ si < ei ≤ 1000), where si is the start time and ei is the end time of the i-th process. Output Print the maximum number of processes that were running simultaneously. Examples Input 5 1 5 2 6 4 8 3 7 5 9 Output 4 Input 4 1 3 2 4 5 6 7 9 Output 2 Note In the first sample test, the processes overlap in such a way that there are 4 processes running simultaneously between time 4 and time 5. In the second sample test, the maximum number of processes running at the same time are 2 between time 2 and time 3.","solution":"def max_simultaneous_processes(n, intervals): Finds the maximum number of processes running simultaneously given their start and end times. Args: n (int): The number of processes. intervals (list of tuples): Each tuple contains two integers representing the start and end times of a process. Returns: int: The maximum number of processes running simultaneously. events = [] for start, end in intervals: events.append((start, \'start\')) events.append((end, \'end\')) events.sort() max_processes = 0 current_processes = 0 for time, event_type in events: if event_type == \'start\': current_processes += 1 max_processes = max(max_processes, current_processes) else: current_processes -= 1 return max_processes"},{"question":"A traveler named Alex is exploring a linear array of cities. The cities are numbered from 1 to n from left to right, with each city being exactly 1 unit apart from its neighboring cities. The city numbered n and city numbered 1 are not neighboring. Each city has a level of pollution noted by p_1, p_2, ldots, p_n where the i-th city has pollution level p_i. Alex wants to find two cities i and j such that 1 leq i < j leq n and the difference in pollution levels is maximized, i.e., |p_i - p_j| is as large as possible. Help Alex find this maximum possible difference in pollution levels. -----Input----- The first line contains a single integer n (3 leq n leq 300,000) — the number of cities in the array. The second line contains n integers p_1, p_2, ldots, p_n (1 leq p_i leq 10^6) — the pollution levels of the cities. -----Output----- Print a single integer — the maximum possible absolute difference in pollution levels. -----Examples----- Input 6 1 2 3 4 5 6 Output 5 Input 4 10 1 10 1 Output 9 Input 5 5 5 5 5 5 Output 0 -----Note----- In the first example, the optimal way to achieve the maximum difference is between the first city (pollution level 1) and the last city (pollution level 6), resulting in |1 - 6| = 5. In the second example, the optimal way is between the second city (pollution level 1) and the first city (pollution level 10), resulting in |1 - 10| = 9. In the third example, all cities have the same pollution levels, so the maximum difference is |5 - 5| = 0.","solution":"def max_pollution_difference(n, pollution_levels): Returns the maximum possible absolute difference in pollution levels. min_pollution = min(pollution_levels) max_pollution = max(pollution_levels) return max_pollution - min_pollution"},{"question":"You are tasked with developing a software that can assist in analyzing stock prices to predict potential investment opportunities. One of the features of this software is to detect the maximum profit that can be made by buying and selling a single stock given its price over a period of days. Write a function to achieve this. The list of prices contains the price of the stock on consecutive days. The goal is to determine the maximum profit possible from a single buy-sell transaction within the given period. If no profit is possible, return zero. -----Input:----- A single list of integers representing the stock prices on each day. -----Output:----- An integer representing the maximum profit that can be obtained. If no profit is possible, return zero. -----Constraints----- - The length of the list will be between 1 and 10^5 - Each element of the list represents the stock price on a given day and will be between 0 and 10^4 -----Sample Input:----- [7, 1, 5, 3, 6, 4] -----Sample Output:----- 5 -----Explanation:----- The maximum profit can be achieved by buying on day 2 (price = 1) and selling on day 5 (price = 6). Profit = 6 - 1 = 5. -----Sample Input:----- [7, 6, 4, 3, 1] -----Sample Output:----- 0 -----Explanation:----- In this case, no transaction is completed as no profit is possible, hence the output is 0.","solution":"def max_profit(prices): Calculate the maximum profit that can be made by buying and selling one share of a stock. :param prices: List[int] - a list of stock prices where each element represents the price on a given day. :return: int - maximum profit that can be achieved. If no profit is possible, return 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Your task is to write a function that takes a string of words separated by spaces, and returns the set of words that are palindromes in the given string. A palindrome is a word that reads the same backward as forward. The order of words in the returned set should match their first appearance in the input string. If there are no palindromes, return an empty set. Examples ``` \\"madam racecar apple level noon\\" --> {\\"madam\\", \\"racecar\\", \\"level\\", \\"noon\\"} \\"hello world example\\" --> {} \\"wow anna civic\\" --> {\\"wow\\", \\"anna\\", \\"civic\\"} ```","solution":"def find_palindromes(words): Returns a set of palindromes in the given string. Parameters: words (str): A string of words separated by spaces. Returns: set: A set of palindrome words in the order they appeared. word_list = words.split() palindrome_set = {word for word in word_list if word == word[::-1]} return palindrome_set"},{"question":"Alice is organizing a small marathon event and wants to allocate unique bib numbers to each participant. She decides to use numbers from 1 to N (inclusive) but wants to ensure that the sum of any subset of bib numbers is unique. Alice needs your help to count the number of ways to allocate the bib numbers to N participants such that no two subsets have the same sum. Alice defines the valid allocation as follows: - Each participant receives exactly one unique bib number from 1 to N. - The sum of any subset of the allocated bib numbers must be unique. Note: Since the number of possible allocations can be very large, you should return the answer modulo 1000000007 (10^9 + 7). -----Input:----- - The first line contains a single integer T, the number of test cases. - Each test case consists of a single integer N. -----Output:----- For each test case, output a single line with the number of valid allocations modulo 1000000007. -----Constraints----- - 1 leq T leq 100000 - 1 leq N leq 1000 -----Sample Input:----- 3 1 2 3 -----Sample Output:----- 1 2 6 -----Explanation:----- For N = 1, the only valid allocation is {1}. For N = 2, the valid allocations are: {1, 2} The unique subset sums are 1, 2, and 3. For N = 3, the valid allocations are: {1, 2, 3} The unique subset sums are 1, 2, 3, 4, 5, and 6.","solution":"MOD = 1000000007 def count_valid_allocations(N): Returns the number of valid allocations for N participants such that the sum of any subset of the allocated bib numbers is unique. if N == 1: return 1 # Using dynamic programming or precomputed values. dp = [0] * (N+1) dp[1] = 1 for i in range(2, N+1): dp[i] = dp[i-1] * i % MOD return dp[N] def solve(T, test_cases): Solves the problem for multiple test cases. results = [] for n in test_cases: results.append(count_valid_allocations(n)) return results # Example usage: # T = 3 # test_cases = [1, 2, 3] # print(solve(T, test_cases)) # Output: [1, 2, 6]"},{"question":"Given an integer `n`, design a spiral matrix of size `n x n` where `n` is an odd integer. For example, when `n = 3`, the output would be: 1 2 3 8 9 4 7 6 5 and for `n = 5`, it would be: 1 2 3 4 5 16 17 18 19 6 15 24 25 20 7 14 23 22 21 8 13 12 11 10 9 Note: The matrix should be filled with integers from 1 up to `n*n` in a spiral order, starting from the top-left corner and spiraling inward clockwise. Your task is to write a function to generate this spiral matrix and return it as a list of lists. Each sublist represents a row in the matrix. Function Signature: ```python def generate_spiral_matrix(n: int) -> List[List[int]]: pass ```","solution":"def generate_spiral_matrix(n: int) -> list[list[int]]: Generate a spiral matrix of size n x n for an odd integer n. if n % 2 == 0: raise ValueError(\\"The input must be an odd integer\\") matrix = [[0] * n for _ in range(n)] num = 1 layers = (n + 1) // 2 for layer in range(layers): # Top row for i in range(layer, n - layer): matrix[layer][i] = num num += 1 # Right column for i in range(layer + 1, n - layer): matrix[i][n - layer - 1] = num num += 1 # Bottom row for i in range(n - layer - 2, layer - 1, -1): matrix[n - layer - 1][i] = num num += 1 # Left column for i in range(n - layer - 2, layer, -1): matrix[i][layer] = num num += 1 return matrix"},{"question":"Alex loves solving puzzles and recently came across an interesting number sequence problem. He\'s asked his friend, who solved it quickly, but now he\'s challenging you to see if you can do it too. You are given an integer array of size n. You have to find if there are two indices i and j (i ≠ j) such that the absolute value of the difference between the elements at those indices is equal to a given integer k. If there exist such indices, print \\"Yes\\", otherwise print \\"No\\". Input The first line contains an integer t denoting the number of test cases. For each test-case, the first line contains two integers n and k representing the size of the array and the target difference respectively. The second line contains n space-separated integers representing the elements of the array. Output For each test case, print \\"Yes\\" if such indices exist, otherwise print \\"No\\". Constraints: 1 ≤ t ≤ 100 2 ≤ n ≤ 1000 0 ≤ k ≤ 1000 -10^6 ≤ array[i] ≤ 10^6 SAMPLE INPUT 3 5 2 1 5 3 4 2 4 0 7 7 7 7 6 4 8 12 16 4 0 20 SAMPLE OUTPUT Yes Yes Yes","solution":"def has_pair_with_difference(arr, k): Check if there exist two indices i and j such that abs(arr[i] - arr[j]) == k. num_set = set() for num in arr: if (num + k) in num_set or (num - k) in num_set: return \\"Yes\\" num_set.add(num) return \\"No\\" def process_test_cases(test_cases): results = [] for case in test_cases: n, k, arr = case results.append(has_pair_with_difference(arr, k)) return results"},{"question":"Given a string containing only parentheses (\'(\' and \')\'), write a function to determine if the string is valid. A string is considered valid if: 1. Open parentheses are closed by the same type of parentheses. 2. Open parentheses are closed in the correct order. Example 1: Input: \\"()\\" Output: true Explanation: The input string is valid because the open parenthesis is closed by the same type of parenthesis in the correct order. Example 2: Input: \\")(()\\" Output: false Explanation: The input string is not valid because the string starts with a closing parenthesis without a matching opening parenthesis in the correct order. Example 3: Input: \\"(()))\\" Output: false Explanation: The input string is not valid because there is one more closing parenthesis than open parentheses. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `isValidParentheses()` that takes a string `s` and returns a boolean value that is true if the string is valid, otherwise false. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ |s| ≤ 10^5","solution":"def isValidParentheses(s): Determine if the input string containing only parentheses is valid. :param s: str - input string containing only \'(\' and \')\' :return: bool - True if the string is valid, False otherwise stack = [] # Dictionary to match opening and closing parentheses parens_map = {\')\': \'(\'} for char in s: if char == \'(\': stack.append(char) elif char == \')\': # If stack is empty or top of stack does not match, return False if not stack or stack[-1] != parens_map[char]: return False stack.pop() # If stack is empty, all parentheses were matched correctly return not stack"},{"question":"# Task Given an integer `n`, your task is to compute the sum of the digits of `n!` (n factorial). # Input/Output - `[input]` integer `n` `0 ≤ n ≤ 100` - `[output]` an integer The sum of the digits of `n!` # Example The function `digit_sum_factorial(10)` would return `27`: - `10! = 3628800` - Sum of the digits: 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27","solution":"import math def digit_sum_factorial(n): Computes the sum of the digits of the factorial of n. Parameters: n (int): Non-negative integer whose factorial\'s digit sum is to be found. Returns: int: Sum of the digits of n! factorial = math.factorial(n) digit_sum = sum(int(digit) for digit in str(factorial)) return digit_sum"},{"question":"Given a N-ary tree (where each node can have zero or more children), write a function levelOrder to return the level order traversal of its nodes\' values. Note: - The N-ary tree is represented by a Node class that contains a value and a list of children nodes. - You must traverse the tree level by level, from left to right. Example: Input: root = 1 / | 3 2 4 / 5 6 Output: [[1], [3, 2, 4], [5, 6]] Definition for a Node is provided: ```python class Node: def __init__(self, val=None, children=None): self.val = val self.children = children if children is not None else [] ``` Your function should have the following signature: ```python def levelOrder(self, root: \'Node\') -> List[List[int]]: ```","solution":"from collections import deque from typing import List class Node: def __init__(self, val=None, children=None): self.val = val self.children = children if children is not None else [] def levelOrder(root: \'Node\') -> List[List[int]]: if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) current_level = [] for _ in range(level_size): node = queue.popleft() current_level.append(node.val) queue.extend(node.children) result.append(current_level) return result"},{"question":"A classic problem in computer science and coding assessments involves binary tree traversal. In this challenge, you\'ll be working with an in-memory binary tree. The Task ------------ Given a binary tree, write a function `zigzag_traversal` that returns the values of the nodes visited in a zigzag (spiral) level order traversal. In this traversal, the nodes are visited in a left-to-right order at the first level, a right-to-left order at the second level, and so on, alternating between left-to-right and right-to-left in the corresponding levels. # Example Consider the following binary tree: ``` 1 / 2 3 / / 4 5 6 7 ``` A zigzag level order traversal of this tree is: `[1, 3, 2, 4, 5, 6, 7]`. # Input - You will be given the root node of the binary tree. # Output - Return an array of integers representing the nodes in zigzag level order traversal. # Function Signature ```python def zigzag_traversal(root: TreeNode) -> List[int]: pass ``` # Constraints - The number of nodes in the tree is in the range `[1, 10**4]`. - `-10^9 <= Node.val <= 10^9`. # Note A provided class TreeNode is defined as: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzag_traversal(root: TreeNode): if not root: return [] from collections import deque result = [] current_level = deque([root]) left_to_right = True while current_level: level_len = len(current_level) level_vals = [] for _ in range(level_len): if left_to_right: node = current_level.popleft() level_vals.append(node.val) if node.left: current_level.append(node.left) if node.right: current_level.append(node.right) else: node = current_level.pop() level_vals.append(node.val) if node.right: current_level.appendleft(node.right) if node.left: current_level.appendleft(node.left) result.extend(level_vals) left_to_right = not left_to_right return result"},{"question":"Consider a tree (connected acyclic graph) consisting of N nodes, where each node i has an integer value v_i. You are given the task of finding the maximum possible sum of values of the nodes that can be collected by visiting nodes on exactly one simple path. A simple path is a path that does not visit any vertex more than once. You need to write a function that, given the values of the nodes and the edges of the tree, returns the maximum sum of values of the nodes that can be collected by visiting nodes on one of these paths. -----Constraints----- - 2 ≤ N ≤ 10^5 - 1 ≤ v_i ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N v_1 v_2 ... v_N u_1 v_1 u_2 v_2 : u_{N-1} v_{N-1} The first line contains an integer N, the number of nodes. The second line contains N integers, representing the values v_i of the nodes. Each of the next N-1 lines contains two integers u_j and v_j, which represent an edge between node u_j and node v_j. -----Output----- Print the maximum possible sum of values of the nodes that can be collected by visiting nodes on one simple path. -----Sample Input----- 5 1 2 3 4 5 1 2 1 3 3 4 3 5 -----Sample Output----- 12 Explanation: The path that gives the maximum sum is either 2 -> 1 -> 3 -> 5 or 2 -> 1 -> 3 -> 4, each of which gives a sum of 12 (1 + 2 + 3 + 4 or 1 + 2 + 3 + 5).","solution":"import sys from collections import defaultdict sys.setrecursionlimit(200000) def dfs(node, parent, values, adj_list): max1 = max2 = 0 for neighbor in adj_list[node]: if neighbor == parent: continue current_sum = dfs(neighbor, node, values, adj_list) if current_sum > max1: max1, max2 = current_sum, max1 elif current_sum > max2: max2 = current_sum global max_sum max_sum = max(max_sum, max1 + max2 + values[node]) return max1 + values[node] def max_path_sum(n, vals, edges): global max_sum max_sum = -sys.maxsize values = [0] + vals adj_list = defaultdict(list) for (u, v) in edges: adj_list[u].append(v) adj_list[v].append(u) dfs(1, -1, values, adj_list) return max_sum def parse_input(): import sys input = sys.stdin.read data = input().split() index = 0 n = int(data[index]) index += 1 vals = [] for _ in range(n): vals.append(int(data[index])) index += 1 edges = [] for _ in range(n - 1): u = int(data[index]) index += 1 v = int(data[index]) index += 1 edges.append((u, v)) return n, vals, edges"},{"question":"You are given an array of strings and a target string. Your task is to find and return all anagram groups of the target string that exist in the array. Each group should consist of strings that are anagrams of the target string. The order of groups in the output does not matter, but the elements within each group should retain their original order from the input array. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Example 1: Input: target = \\"listen\\", words = [\\"enlist\\", \\"google\\", \\"inlets\\", \\"banana\\", \\"silent\\"] Output: [[\\"enlist\\", \\"inlets\\", \\"silent\\"]] Example 2: Input: target = \\"aba\\", words = [\\"aab\\", \\"baa\\", \\"aba\\", \\"xyz\\", \\"ab\\"] Output: [[\\"aab\\", \\"baa\\", \\"aba\\"]] Note: target will be a non-empty string with length in range [1, 10]. words will be a list with length in the range [1, 1000]. Every words[i] will consist of lowercase letters only and have length in the range [1, 100].","solution":"from collections import Counter def find_anagram_groups(target, words): Returns anagram groups of the target string that exist in the array of words. target_count = Counter(target) anagram_group = [] for word in words: if Counter(word) == target_count: anagram_group.append(word) return [anagram_group] if anagram_group else []"},{"question":"A game developer wants to create a new feature for their role-playing game (RPG). In the game, a hero can gather potions from different spots in a forest. Each potion has a unique rate of healing effectiveness, and the hero wants to heal themselves as efficiently as possible. Given an array where each element represents the healing effectiveness of a potion, the hero can choose to take potions in consecutive spots in the forest. The hero wants to maximize the total healing effectiveness by choosing a subarray (a single contiguous sequence of elements from the array). Write a program to determine the maximum healing effectiveness the hero can achieve by picking the best subarray. Input Format The first line contains an integer mathbf{T}, the number of test cases. Each test case consists of two parts: - The first line contains the integer mathbf{N}, the number of potions in the forest. - The second line contains mathbf{N} space-separated integers where each integer mathbf{a_i} represents the healing effectiveness of the i-th potion. Output Format For each test case, print a single integer: the maximum healing effectiveness the hero can achieve. Constraints 1 leq T leq 10 1 leq N leq 10^5 -10^4 leq a_i leq 10^4 Sample Input 2 5 -1 2 3 -4 5 4 1 2 3 4 Sample Output 6 10 Explanation For the first test case: - The best subarray is [2, 3, -4, 5] which sums to 6. For the second test case: - The best subarray is [1, 2, 3, 4] which sums to 10.","solution":"def max_healing_effectiveness(T, test_cases): Returns the maximum healing effectiveness for each test case. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains (N, list of healing effectiveness) Returns: list: List of maximum healing effectiveness for each test case results = [] for case in test_cases: N, effectiveness = case # Using Kadane\'s Algorithm to find the maximum subarray sum max_current = max_global = effectiveness[0] for i in range(1, N): max_current = max(effectiveness[i], max_current + effectiveness[i]) if max_current > max_global: max_global = max_current results.append(max_global) return results"},{"question":"Write a function called `min_edit_distance` that calculates the minimum number of single-character edits (insertions, deletions or substitutions) required to change one word into another. # Example ```python min_edit_distance(\'kitten\', \'sitting\') => returns 3 min_edit_distance(\'flaw\', \'lawn\') => returns 2 min_edit_distance(\'intention\', \'execution\') => returns 5 ``` # Notes * Both words will consist of lowercase alphabets only. * The function should be case-sensitive. * Both words can be empty, indicating you should handle edge cases where one or both words are empty. * You can assume that the edit distance between strings up to length of 1000 characters will be calculated within reasonable time limits. # Tips - Dynamic programming is a suitable approach for solving the problem where you maintain a table to store edit distances for subproblems. - The recursive relationships matter: - If last characters of two substrings are the same, ignore the last characters and get count for remaining strings, and - If the last characters are different, consider all possibilities and find the minimum.","solution":"def min_edit_distance(word1, word2): Calculate the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one word into another. m, n = len(word1), len(word2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If the first string is empty, insert all characters of second string elif j == 0: dp[i][j] = i # If the second string is empty, remove all characters of first string elif word1[i-1] == word2[j-1]: dp[i][j] = dp[i-1][j-1] # If the characters are the same, ignore and move to the next else: dp[i][j] = 1 + min(dp[i-1][j], # Insert dp[i][j-1], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"**Movie Ratings Challenge** You\'ve been tasked with analyzing movie ratings from a website where users can rate movies they\'ve watched. Each rating is a whole number between 1 and 10. Your task is to create a function called `calculate_average_rating()` that takes a dictionary of movies, where each key is a movie title (string) and each value is a list of individual ratings (integers), and returns a dictionary where the keys are the movie titles and the values are their average rating rounded to the nearest whole number. # Requirements 1. The function should take into account that some movies might not have any ratings. In such cases, the average rating should be considered as 0. 2. If a movie has ratings, average it normally and round the result to the nearest whole number. 3. The input dictionary will always have movie titles as keys and lists of integers (ratings) as values. # Example ```python #Input movies = { \\"Inception\\": [10, 9, 8, 9, 10], \\"Interstellar\\": [10, 10, 9], \\"The Matrix\\": [8, 8, 9, 8, 7, 8], \\"No Rating Movie\\": [] } #Output { \\"Inception\\": 9, \\"Interstellar\\": 10, \\"The Matrix\\": 8, \\"No Rating Movie\\": 0 } ``` # Note - Use Python\'s built-in `round()` function to round the average rating to the nearest whole number. - Ensure the output dictionary maintains the same keys as the input dictionary, irrespective of whether any ratings are present for that movie or not.","solution":"def calculate_average_rating(movies): Calculate the average rating for each movie and round it to the nearest whole number. If a movie has no ratings, return 0 as the average rating. :param movies: A dictionary where keys are movie titles and values are lists of ratings. :return: A dictionary where keys are movie titles and values are average ratings. average_ratings = {} for movie, ratings in movies.items(): if ratings: average_ratings[movie] = round(sum(ratings) / len(ratings)) else: average_ratings[movie] = 0 return average_ratings"},{"question":"In a faraway land, there is a unique competition known as the \\"Frog Leap Race\\". Frogs participate in this race to see who can cover the most distance in a single leap. The race is held on a 1-dimensional track with some frogs already positioned at certain points on the track. Each frog has a unique jumping power, which determines the maximum distance they can jump in one leap. Given the positions of the frogs and their respective jumping powers, determine the furthest point any frog can reach with one leap. -----Input----- The first line contains the number of frogs f (1 le f le 100). The next f lines each contains two integers representing the position p_i (1 le p_i le 1000) and the jumping power j_i (1 le j_i le 100) of the i-th frog. -----Output----- Output the maximum distance a frog can reach with one leap. -----Examples----- Sample Input 1: 3 2 4 7 5 10 2 Sample Output 1: 12 Sample Input 2: 2 5 3 8 6 Sample Output 2: 14","solution":"def furthest_frog_leap(f, frog_data): Returns the furthest point any frog can reach with one leap. :param f: Number of frogs (int) :param frog_data: List of tuples containing the position and jumping power of each frog (list of tuples) :return: The maximum distance a frog can jump (int) max_distance = 0 for pos, jump in frog_data: current_distance = pos + jump if current_distance > max_distance: max_distance = current_distance return max_distance"},{"question":"Given a sequence of N integers representing the positions in a queue, each person in the queue tries to move forward to the front. Each person can see the entire queue and will try to move forward by the maximum possible distance until they cannot overtake the person in front of them. This process continues until no one in the queue can move forward anymore. Each move to the front will be constrained by following the rules: 1. A person can only overtake another if they were originally behind them. 2. A person can only advance if the position they are moving to is unoccupied. Determine the sequence of their final positions in the queue. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N. The second line contains N space-separated integers representing the initial positions of the people in the queue. ------ Output ------ For each test case, print a single line containing N space-separated integers representing the sequence of their final positions in the queue. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{5} 1 ≤ text{initial position} le 10^{9} The sum of N over all test cases does not exceed 10^{6} ------ Sample Input 1 ------ 3 5 3 9 7 1 5 4 10 3 7 5 6 1 2 3 4 5 6 ------ Sample Output 1 ------ 1 2 3 4 5 1 2 3 4 1 2 3 4 5 6 ------ Explanation 1 ------ Example case 1: - Person initially at position 3 moves to position 1. - Person initially at position 9 moves up to position 2 after the person originally at position 3. - Person initially at position 7 moves up to position 3 after the previous two. - Person initially at position 1 remains at position 4 after the others move. - Person initially at position 5 moves to position 5 since it\'s the first available position after 4. Example case 2: - Person initially at position 10 moves to position 1. - Person initially at position 3 becomes the second person. - Person initially at position 7 becomes the third person. - Person initially at position 5 becomes the fourth person. Example case 3: All elements were already in ascending order, resulting in them remaining in their initial positions.","solution":"def final_positions(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] positions = test_cases[i][1] sorted_positions = sorted(positions) results.append(\\" \\".join(map(str, sorted_positions))) return results"},{"question":"In a Country Far Far Away, there are n cities, connected by n-1 bidirectional roads in such a way that there is exactly one path between any two cities. You are given an initial city and a destination city, and your task is to find the minimum number of roads that one has to travel to get from the initial city to the destination city. ------ Input: ------ First line will contain n, denoting the number of cities. Next n-1 lines will contain two space-separated integers u and v denoting a road between cities u and v. The following line will contain two space-separated integers a and b denoting the initial city and the destination city respectively. ------ Output: ------ Single line containing an integer denoting the minimum number of roads to be traveled. ------ Constraints ------ 2 ≤ n ≤ 1000 ----- Sample Input 1 ------ 5 1 2 1 3 2 4 3 5 1 4 ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ For first input, the shortest path is from city 1 to city 2, and then city 2 to city 4. ----- Sample Input 2 ------ 6 1 2 1 3 2 4 2 5 3 6 4 6 ----- Sample Output 2 ------ 3 ----- Explanation 2 ------ For second input, the shortest path is from city 4 to city 2, then city 2 to city 1, and then city 1 to city 3.","solution":"from collections import deque def min_roads_to_travel(n, roads, initial_city, destination_city): # Build the adjacency list adj_list = {i: [] for i in range(1, n+1)} for u, v in roads: adj_list[u].append(v) adj_list[v].append(u) # Perform BFS to find the shortest path queue = deque([(initial_city, 0)]) # (current_city, distance) visited = set() visited.add(initial_city) while queue: current_city, distance = queue.popleft() if current_city == destination_city: return distance for neighbor in adj_list[current_city]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return -1 # This line should never be reached due to the problem constraints"},{"question":"In a game, there are n boxes arranged in a straight line, numbered from 1 to n. Each box can be either open or closed. The state of each box is represented by an array of n integers, where 1 indicates an open box, and 0 indicates a closed box. A player can perform certain operations to change the state of these boxes. For example, the player can perform a \\"flip\\" operation on a segment of boxes, which means changing each open box to closed and each closed box to open within that segment. Your task is to determine the minimum number of flip operations needed to make all the boxes open. If it\'s impossible to make all the boxes open, output -1. -----Input----- The input consists of two lines. The first line contains a single integer n (1 leq n leq 10^5), the number of boxes. The second line contains a string of length n consisting of characters \'0\' and \'1\' representing the state of each box (0 for a closed box, 1 for an open box). -----Output----- Output the minimum number of flip operations required to make all the boxes open, or -1 if it is impossible. -----Examples----- Sample Input 1: 6 100011 Sample Output 1: 3 Sample Input 2: 4 0000 Sample Output 2: 1 Sample Input 3: 5 11111 Sample Output 3: 0","solution":"def min_flips_to_open_boxes(n, boxes_state): Determine the minimum number of flip operations needed to make all the boxes open. :param n: int, number of boxes :param boxes_state: str, string of length n consisting of \'0\' and \'1\' representing the state of each box :return: int, minimum number of flips, or -1 if it is impossible if \'0\' not in boxes_state: return 0 flip_count = 0 current_state = boxes_state[0] for i in range(1, n): if boxes_state[i] != current_state: flip_count += 1 current_state = boxes_state[i] return flip_count + 1"},{"question":"Sarah loves strings and numbers. She has a string `s` consisting of lowercase English letters and an integer `k`. Sarah wants to modify the string so that the total number of distinct characters in the string is exactly `k`. To achieve this, Sarah can either remove some characters from the string or add new characters to the string. Your task is to write a program to determine the minimum number of characters Sarah needs to add or remove to make the number of distinct characters in the string equal to `k`. # Input The first line contains a single integer `t` (1 le t le 100) — the number of test cases. The description of the test cases follows. Each test case consists of a single line containing the string `s` (1 le |s| le 100) and the integer `k` (1 le k le 26). # Output For each test case, print a single integer — the minimum number of character modifications (additions or removals) required. # Example Input ``` 3 abc 2 a 2 xyz 5 ``` Output ``` 1 1 2 ``` # Note - In the first test case, the string `abc` has 3 distinct characters. We need to have exactly 2 distinct characters. We can remove any one character, for example, `a`, resulting in the string `bc` which has 2 distinct characters. So, the answer is `1`. - In the second test case, the string `a` has 1 distinct character. We need to have exactly 2 distinct characters. We need to add any one character, for example, `b`, resulting in the string `ab` which has 2 distinct characters. So, the answer is `1`. - In the third test case, the string `xyz` has 3 distinct characters. We need 5 distinct characters. We need to add two more characters, for example, `a` and `b`, resulting in the string `xyzab` which has 5 distinct characters. So, the answer is `2`.","solution":"def min_modifications_to_k_distinct(t, test_cases): results = [] for case in test_cases: s, k = case[0], case[1] distinct_chars = len(set(s)) if distinct_chars == k: results.append(0) elif distinct_chars > k: results.append(distinct_chars - k) else: results.append(k - distinct_chars) return results"},{"question":"Problem You are assigned the task of creating a software to manage the inventory of a small retail store. The system will keep track of items and their quantities, and will support a series of operations to manipulate the inventory. Each operation is supplied as a command line input and the software should produce appropriate output for each command. There are five types of operations the system needs to support: | Command | Description | |--------------|-------------| | ADD P Q | Adds Q quantity of item with product code P to the inventory. If the item already exists, update its quantity accordingly. | | REMOVE P Q | Removes Q quantity of item with product code P from the inventory. If the item does not exist or quantity is insufficient, ignore the command. | | REPORT P | Outputs the quantity of item with product code P currently in the inventory. If the item does not exist, output \\"0\\". | | STOCK | Outputs the total number of distinct items in the inventory. | | ALLSTOCK | Outputs the product code and quantity of all items in the inventory, sorted by product code in ascending order. Each item should be printed on a new line in the format \\"P Q\\". | Input The input consists of a sequence of commands. The first line contains an integer N, the number of commands (1 ≤ N ≤ 100000). The next N lines each contain one command in the specified format. Output For each REPORT, STOCK, and ALLSTOCK command, output the appropriate result as described. Each output should start on a new line. Example Input 10 ADD 101 50 ADD 102 30 REPORT 101 REPORT 102 REMOVE 101 20 REPORT 101 STOCK ALLSTOCK REMOVE 102 40 REPORT 102 Output 50 30 30 2 101 30 102 30 30","solution":"class InventoryManagement: def __init__(self): self.inventory = {} def add(self, product_code, quantity): if product_code in self.inventory: self.inventory[product_code] += quantity else: self.inventory[product_code] = quantity def remove(self, product_code, quantity): if product_code in self.inventory and self.inventory[product_code] >= quantity: self.inventory[product_code] -= quantity if self.inventory[product_code] == 0: del self.inventory[product_code] def report(self, product_code): return self.inventory.get(product_code, 0) def stock(self): return len(self.inventory) def allstock(self): return sorted(self.inventory.items()) def process_commands(commands): inventory = InventoryManagement() results = [] for command in commands: parts = command.split() command_type = parts[0] if command_type == \\"ADD\\": product_code = int(parts[1]) quantity = int(parts[2]) inventory.add(product_code, quantity) elif command_type == \\"REMOVE\\": product_code = int(parts[1]) quantity = int(parts[2]) inventory.remove(product_code, quantity) elif command_type == \\"REPORT\\": product_code = int(parts[1]) results.append(str(inventory.report(product_code))) elif command_type == \\"STOCK\\": results.append(str(inventory.stock())) elif command_type == \\"ALLSTOCK\\": all_stock = inventory.allstock() results.extend([f\\"{code} {quantity}\\" for code, quantity in all_stock]) return results # Sample input commands = [ \\"ADD 101 50\\", \\"ADD 102 30\\", \\"REPORT 101\\", \\"REPORT 102\\", \\"REMOVE 101 20\\", \\"REPORT 101\\", \\"STOCK\\", \\"ALLSTOCK\\", \\"REMOVE 102 40\\", \\"REPORT 102\\", ] # Process commands output = process_commands(commands) # Print results for line in output: print(line)"},{"question":"Alice is hosting a cookie exchange for her friends and wants to ensure that everyone gets a different variety of cookies. She decides to bake an assortment of `n` different types of cookies, and each friend will receive exactly one type of cookie. Each cookie type is represented by a unique integer from 1 to `n`. Alice wants to know the number of ways she can distribute the cookies such that no two adjacent friends receive the same type of cookie. Two distributions are considered different if the sequence of cookie types received by the friends is different. Write a function to calculate the number of valid distributions. Since the number of ways can be large, return the result modulo 1,000,000,007. Function Signature: ```python def num_distributions(n: int) -> int: pass ``` Input - An integer n (1 ≤ n ≤ 100,000) representing the number of different types of cookies. Output - Return a single integer representing the number of valid distributions modulo 1,000,000,007. Examples Input ``` 2 ``` Output ``` 2 ``` Input ``` 3 ``` Output ``` 6 ``` Input ``` 5 ``` Output ``` 24 ``` Explanation In the first example, there are 2 types of cookies (1 and 2). The valid distributions are: 1. [1, 2] 2. [2, 1] In the second example, there are 3 types of cookies (1, 2, and 3). The valid distributions are: 1. [1, 2, 3] 2. [1, 3, 2] 3. [2, 1, 3] 4. [2, 3, 1] 5. [3, 1, 2] 6. [3, 2, 1] In the third example, there are 5 types of cookies (1, 2, 3, 4, and 5). The valid distributions can be calculated similarly such that no adjacent friends receive the same type of cookie. The result is 24 modulo 1,000,000,007.","solution":"MOD = 1_000_000_007 def num_distributions(n: int) -> int: Calculate the number of valid distributions of n types of cookies where no two adjacent friends receive the same type. if n == 1: return 1 # Using dynamic programming to store results for each sub-problem dp = [0] * n dp[0] = 1 # only one way to distribute 1 cookie type (to only 1 friend) dp[1] = 2 # for 2 cookie types, there are 2 ways: [1, 2] and [2, 1] for i in range(2, n): dp[i] = (i + 1) * dp[i - 1] % MOD return dp[n - 1]"},{"question":"Problem Akin works in a factory that manufactures widgets. Each widget consists of parts that must be assembled in a specific order. Every part has a different processing time. Akin has a task to figure out the minimum total processing time to assemble a specific number of widgets. However, there are some constraints: 1. Each part can only be processed by one worker at a time. 2. A worker can work on one part of one widget at a time. You are tasked with developing an algorithm that can quickly calculate the minimum total processing time given these constraints. Constraints The input satisfies the following conditions: **1. 1 ≤ W ≤ 10^5** (The number of workers) **2. 1 ≤ P ≤ 10^5** (The number of parts in each widget) **3. 1 ≤ T_i ≤ 10^9** (The processing time of the ith part) Input The input is given in the following format: W P T_1 T_2 ... T_P Where W is the number of workers, P is the number of parts, and T_i are the processing times of each part separated by blanks. Output Output the minimum total processing time to assemble one widget. Examples Input 4 3 8 5 3 Output 8 Input 2 4 6 2 7 4 Output 11 Input 5 5 1 2 3 4 5 Output 5","solution":"def minimum_processing_time(W, P, T): Calculate the minimum total processing time to assemble one widget. :param W: int, number of workers :param P: int, number of parts in each widget :param T: list of int, processing times of each part :return: int, minimum total processing time T.sort() return T[-1]"},{"question":"Rani loves playing with numbers and finding patterns. She has recently learned about Palindromic Subarrays in an array. A subarray is called palindromic if it reads the same backward as forward. She wants to find out the number of palindromic subarrays from a given array. -----Input----- - The first line of input contains an integer T, the number of test cases. - Each test case begins with an integer N, the number of elements in the array. - The second line of each test case contains N integers representing the elements of the array. -----Output----- - For each test case, output a single line containing the number of palindromic subarrays present in the array. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 100 - 1 ≤ Ai ≤ 100 -----Subtasks----- - Subtask 1 (100 points): Original constraints -----Example----- Input 2 4 1 2 1 2 5 1 2 2 1 3 Output 6 7 -----Explanation----- In the first example, the palindromic subarrays are [1], [2], [1], [2], [1, 2, 1], [1, 2, 1]. Total 6. In the second example, the palindromic subarrays are [1], [2], [2], [1], [3], [2, 2], [1, 2, 2, 1]. Total 7.","solution":"def count_palindromic_subarrays(test_cases): def is_palindrome(arr): return arr == arr[::-1] results = [] for test in test_cases: N, array = test count = 0 for i in range(N): for j in range(i + 1, N + 1): if is_palindrome(array[i:j]): count += 1 results.append(count) return results"},{"question":"Given a string S, determine if S can be rearranged into a palindrome. Return all possible palindromic arrangements in any order. If no palindromic arrangement exists, return an empty list. Example 1: Input: \\"aabb\\" Output: [\\"abba\\", \\"baab\\"] Example 2: Input: \\"abc\\" Output: [] Example 3: Input: \\"racecar\\" Output: [\\"racecar\\", \\"rcaecar\\", \\"arcecra\\", ...] (and other valid permutations) Note: - The length of S is between 1 and 16. - S consists only of lowercase English letters.","solution":"from collections import Counter from itertools import permutations def can_form_palindrome(s): Check if the input string can be rearranged into a palindrome. count = Counter(s) odd_count = sum(1 for c in count if count[c] % 2 != 0) return odd_count <= 1 def generate_palindromic_permutations(s): Return all palindromic permutations of the input string. if not can_form_palindrome(s): return [] half = [] middle = [] count = Counter(s) for char, cnt in count.items(): half.extend(char * (cnt // 2)) if cnt % 2 != 0: middle.append(char) half = \'\'.join(half) unique_permutations = set(permutations(half)) palindromic_permutations = [] for perm in unique_permutations: half_str = \'\'.join(perm) palindromic_permutations.append(half_str + \'\'.join(middle) + half_str[::-1]) return palindromic_permutations"},{"question":"In Gridland, there are n cities located on a straight line. Each city has a unique coordinate from x1 to xn. An electric car can travel directly from city A to city B if the distance between them is less than or equal to d. Determine if it is possible for the electric car to travel from the first city to the last city via a series of direct travels between cities. Here, assume that the distance between two cities at coordinates pi and pj (pi < pj) is pj - pi. -----Constraints----- - n is an integer between 2 and 100 (inclusive). - Each xi is an integer between 0 and 10000 (inclusive). - x1 < x2 < ... < xn - d is an integer between 1 and 10000 (inclusive). -----Input----- Input is given from Standard Input in the following format: n x1 x2 x3 ... xn d -----Output----- Print YES if it is possible for the electric car to travel from the first city to the last city via a series of direct travels between cities, and print NO otherwise. -----Sample Input----- 5 0 3 7 10 14 5 -----Sample Output----- YES In this case, the car can travel from city 1 to city 2, from city 2 to city 3, from city 3 to city 4 and from city 4 to city 5, and the distances covered are: - Distance from city 1 to city 2 is 3 - Distance from city 2 to city 3 is 4 - Distance from city 3 to city 4 is 3 - Distance from city 4 to city 5 is 4 All these distances are less than or equal to 5. Thus, the correct output is YES. -----Sample Input----- 5 0 3 7 10 14 2 -----Sample Output----- NO In this case, the electric car cannot travel directly from city 1 to city 2 since the distance is greater than 2. Similarly, other distances between consecutive cities are also greater than 2. Thus, the correct output is NO.","solution":"def can_travel(n, cities, d): Determines if the electric car can travel from the first city to the last city via a series of direct travels between cities. :param n: Number of cities :param cities: List of city coordinates :param d: Maximum distance the car can travel in one go :return: \'YES\' if it is possible to travel from the first to the last city, otherwise \'NO\' for i in range(1, n): if cities[i] - cities[i - 1] > d: return \'NO\' return \'YES\'"},{"question":"A language translation company has come up with a new idea to help its clients identify the most commonly used words in their texts. Given the number of top frequencies `K`, and a list of strings `S` representing the text, write a program that counts and sorts the words based on their frequencies. If two words have the same frequency, they should be sorted lexicographically. The input consists of an integer `K` and an array of strings `S`. Each string in `S` contains lowercase English letters and spaces. The words are delimited by space. Your program should output the top `K` most frequent words in `S`. If there are fewer than `K` unique words, output all the words. **Input:** - An integer `K` (1 <= K <= 10^4) - representing the number of top frequencies to be output. - A list of strings `S` (1 <= len(S) <= 10^4, and each string in `S` has a length of 1 <= len(string) <= 10^4) - representing the text. **Output:** - A list of the top `K` most frequent words sorted by frequency in descending order and then lexicographically. **Example:** **Input:** ``` 3 [\\"the quick brown fox\\", \\"jumps over the lazy dog\\", \\"the quick blue fox jumps high\\"] ``` **Output:** ``` [\\"the\\", \\"fox\\", \\"jumps\\"] ``` **Explanation:** In the given example `\\"the\\"` appears 3 times, `\\"fox\\"` appears 2 times, and `\\"jumps\\"` appears 2 times. All other words appear only once. Hence, the words `\\"jumps\\"` and `\\"fox\\"` are ordered lexicographically. **Notes:** - Words are case-sensitive and lowercase only. - Assume input strings are valid and contain only letters and spaces. This problem tests your ability to handle string manipulation, frequency counting, and sorting algorithms.","solution":"from collections import Counter def top_k_frequent_words(K, S): Returns the top K most frequent words from an array of strings S. If two words have the same frequency, they are sorted lexicographically. word_count = Counter() # Combine all strings into a single list of words for string in S: words = string.split() word_count.update(words) # Create a sorted list of words based on frequency and lexicographical order sorted_words = sorted(word_count.keys(), key=lambda word: (-word_count[word], word)) # Return the top K frequent words or all words if fewer than K unique words return sorted_words[:K]"},{"question":"You are a gardener responsible for maintaining a rectangular garden that is divided into a grid of cells. Each cell can either contain a plant or be empty. Plants need watering, and you\'ve decided to use sprinklers to water them. You can place a sprinkler in any cell, and it will water all the plants in that cell\'s row and column. However, you want to use the minimum number of sprinklers necessary to water all the plants. Given the garden grid, determine the minimum number of sprinklers needed to water all the plants in the garden. -----Input----- The first line of the input contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the garden grid, respectively. Each of the next n lines contains m characters. The j-th character in the i-th line is either a \'.\' (indicating an empty cell) or a \'*\' (indicating a cell with a plant). -----Output----- Print a single integer — the minimum number of sprinklers needed to water all the plants in the garden. -----Examples----- Input 3 4 .*.. ..*. .... Output 2 Input 5 5 .*..* ..... ..*.. ..... *..*. Output 3","solution":"def min_sprinklers_needed(n, m, garden): rows_with_plants = set() cols_with_plants = set() for i in range(n): for j in range(m): if garden[i][j] == \'*\': rows_with_plants.add(i) cols_with_plants.add(j) # We need at least the number of rows or columns with plants, # whichever is less return min(len(rows_with_plants), len(cols_with_plants))"},{"question":"In the distant kingdom of Arrayland, there is a festival being held and there are N (1 to N) villages in a line, each with a festival decoration Pi (in terms of value). The festival committee wants to make sure that the decorations look uniform across all villages, so they decide to perform a series of operations. In one operation, you can choose any village i (1 ≤ i ≤ N) and increase or decrease the decoration value Pi by 1. The goal of the committee is to make sure that after performing the operations, the decoration values of all villages are the same, and they want to achieve this with the minimum number of operations. Help the committee find the minimum number of operations required to make all the decoration values the same. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. First line contains an integer N denoting the number of villages in the country. Second line contains N space-separated integers Pi, the decoration value of the i-th village. -----Output----- For each test case, print a single integer, the minimum number of operations to make all the decoration values the same on a separate line. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 105 - 1 ≤ Pi ≤ 106 -----Example----- Input: 2 3 1 2 3 4 10 10 20 20 Output: 2 20","solution":"def min_operations_to_uniform_decorator(T, test_cases): results = [] for test_case in test_cases: N, P = test_case median = sorted(P)[N // 2] operations = sum(abs(x - median) for x in P) results.append(operations) return results"},{"question":"You have been tasked with developing a method to determine if a given list of strings can be rearranged to form a sequence such that each successive string differs from the previous one by exactly one character. Two strings are considered to differ by one character if they are the same length and differ by exactly one character in the same position in each string. Example: Input: [\\"abc\\", \\"bbc\\", \\"bac\\"] Output: True Explanation: One possible rearrangement is [\\"abc\\", \\"bbc\\", \\"bac\\"] - \\"abc\\" and \\"bbc\\" differ by one character - \\"bbc\\" and \\"bac\\" differ by one character Input: [\\"abc\\", \\"def\\", \\"ghi\\"] Output: False Explanation: No possible rearrangement where each successive pair of strings differs by exactly one character. Your task is to implement the function `can_form_sequence(strings: List[str]) -> bool` which returns `True` if the strings can be rearranged to form such a sequence, or `False` otherwise. You may assume that all strings in the list are of the same length and contain only lowercase alphabetical characters. Additionally, your solution should aim for optimal efficiency to handle cases where the list of strings is very large.","solution":"from itertools import permutations def differ_by_one_char(s1, s2): Check if two strings differ by exactly one character. count_diff = 0 for a, b in zip(s1, s2): if a != b: count_diff += 1 if count_diff > 1: return False return count_diff == 1 def can_form_sequence(strings): Determine if the given list of strings can be rearranged to form a sequence such that each successive string differs from the previous one by exactly one character. for perm in permutations(strings): if all(differ_by_one_char(perm[i], perm[i+1]) for i in range(len(perm)-1)): return True return False"},{"question":"You are given a multiset of integers and a target integer x. Your task is to determine whether there exists a non-empty subset of the multiset such that the sum of the subset equals x. Note that the multiset may contain duplicate elements. -----Input----- The first line of input contains two integers n and x (1 ≤ n ≤ 1000, 1 ≤ x ≤ 10^6) - the number of elements in the multiset and the target sum, respectively. The second line contains n integers separated by spaces, representing the multiset. Each integer in the multiset is between 1 and 10^5. -----Output----- Print \\"YES\\" if there exists a non-empty subset of the multiset with a sum equal to x, otherwise print \\"NO\\". -----Examples----- Input 5 9 2 2 3 5 3 Output YES Input 3 12 1 2 4 Output NO -----Explanation----- In the first sample, one possible subset with the sum equal to 9 is {5, 2, 2}. In the second sample, there is no subset with the sum equal to 12. -----Note----- You may find a solution using a dynamic programming approach.","solution":"def subset_sum_exists(n, x, multiset): Determines if there exists a non-empty subset of the multiset that sums to x. # Initialize a DP table to keep track of possible sums dp = [False] * (x + 1) dp[0] = True # There is always an empty subset with sum 0 for num in multiset: for s in range(x, num - 1, -1): if dp[s - num]: dp[s] = True return \\"YES\\" if dp[x] else \\"NO\\" # Example usage if __name__ == \\"__main__\\": n, x = map(int, input().split()) multiset = list(map(int, input().split())) print(subset_sum_exists(n, x, multiset))"},{"question":"A company has implemented a security system that locks the building if an incorrect passcode is attempted 3 times in a row. You are tasked with writing a function to simulate the behavior of this security system. Given an array of passcode attempts and a correct passcode, determine if the building is locked. Write a function `isLocked(passcodes: List[str], correct_passcode: str) -> bool` that takes in a list of passcode attempts and the correct passcode. The function should return a boolean indicating whether the building is locked. Example 1: Input: passcodes = [\\"1234\\", \\"2345\\", \\"0000\\", \\"1111\\"], correct_passcode = \\"9999\\" Output: False Example 2: Input: passcodes = [\\"1234\\", \\"2345\\", \\"1234\\", \\"1234\\", \\"1234\\"], correct_passcode = \\"9999\\" Output: True Example 3: Input: passcodes = [\\"1234\\", \\"2345\\", \\"9999\\", \\"9999\\", \\"9999\\"], correct_passcode = \\"9999\\" Output: False Constraints: - The length of the passcode attempts list is between 1 and 10^4. - Each passcode attempt is a string of 4 digits. - The correct passcode is a string of 4 digits.","solution":"from typing import List def isLocked(passcodes: List[str], correct_passcode: str) -> bool: incorrect_attempts = 0 for attempt in passcodes: if attempt != correct_passcode: incorrect_attempts += 1 if incorrect_attempts == 3: return True else: incorrect_attempts = 0 return False"},{"question":"On January 1, a popular online retailer is offering a special promotion: every customer gets one free item with each purchase. This promotion has led to a massive surge in orders, so the company is using a specific packing rule to ensure efficiency. The packing rule the company follows is: pack items in such a way that the number of items in any two packages does not differ by more than 1. Given an integer n (1 ≤ n ≤ 10^5), the number of items a customer purchases (including the free item(s)), determine how many packages are needed to follow the packing rule. -----Input----- The first line of the input contains a single integer n — the number of items to be packed. -----Output----- Output a single integer — the number of packages needed. -----Examples----- Input 1 Output 1 Input 3 Output 1 Input 7 Output 1 Input 8 Output 2 -----Note----- In the first example, there is only one item, so only one package is needed. In the second example, all three items can be packed into one package. In the third example, all seven items can be packed into one package. In the fourth example, it is optimal to split the eight items into two packages of four items each.","solution":"def number_of_packages(n): Given an integer n (1 ≤ n ≤ 10^5), the number of items a customer purchases (including the free item(s)), determines the number of packages needed to follow the packing rule that the number of items in any two packages should not differ by more than 1. :param n: int :return: int # If n <= 7, they can be packed in one package if n <= 7: return 1 # If n is a multiple of 8, we can divide it into packages of 4 items each if n % 8 == 0: return 2 # Otherwise, we need to carefully split the items # We try to fit as many items into packages not differing by more than one item # Starting with a size 4, since 7 can be packed in one package, 8 packs into 2, over 8 will be the concern return 2"},{"question":"Sarah loves to organize books in her library and one of her favorite activities is arranging them in an interesting order. She recently came across a peculiar arrangement where the titles of the books, when arranged in a certain order, form a special pattern. She defines a special pattern as a sequence of book titles where for every 1 ≤ i < n / 2, the i-th title and (n-i+1)-th title are anagrams of each other. Two strings are anagrams if one can be rearranged to form the other using all the original letters exactly once. Help Sarah verify if a given list of book titles can be arranged in a special pattern. You are given a list of `n` book titles. Your task is to determine if it is possible to rearrange them in a special pattern. If possible, find one such arrangement. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of book titles. Each of the next n lines contains a book title composed of lowercase English letters only. Each title has at most 100 characters. -----Output----- If such an arrangement is possible, print \\"YES\\" followed by the rearranged list of book titles, each title on a new line. If no such arrangement exists, print \\"NO\\". If there are multiple solutions, any valid arrangement will be accepted. -----Examples----- Input 4 listen silent evil vile Output YES listen vile evil silent Input 3 rat tar art Output NO -----Note----- In the first sample, the titles \\"listen\\" and \\"silent\\" are anagrams, as well as \\"evil\\" and \\"vile\\". Therefore, one of the possible rearrangements forming the special pattern is: 1. listen 2. vile 3. evil 4. silent In the second sample, since `n` is odd, it is impossible to form pairs where every i-th title and (n-i+1)-th title are anagrams of each other. Thus, the output is \\"NO\\".","solution":"def can_form_special_pattern(n, titles): from collections import defaultdict def sort_string(s): return \'\'.join(sorted(s)) # Store titles grouped by their sorted characters anagram_groups = defaultdict(list) for title in titles: sorted_title = sort_string(title) anagram_groups[sorted_title].append(title) # Check if the number of titles and their frequencies allow a special pattern if n % 2 != 0: return \\"NO\\" result = [] used = set() for group in anagram_groups.values(): if len(group) % 2 != 0: return \\"NO\\" for i in range(0, len(group), 2): part1 = group[i] part2 = group[i+1] result.append(part1) used.add(part1) result.insert(0, part2) used.add(part2) if len(result) != n: return \\"NO\\" return [\\"YES\\"] + result # Example usage: n = 4 titles = [\\"listen\\", \\"silent\\", \\"evil\\", \\"vile\\"] output = can_form_special_pattern(n, titles) for line in output: print(line) n = 3 titles = [\\"rat\\", \\"tar\\", \\"art\\"] output = can_form_special_pattern(n, titles) for line in output: print(line)"},{"question":"Two integers N and M are given as inputs. Write a program to find the number of common divisors of N and M. -----Input----- The first line contains an integer T, the total number of test cases. Then, T lines follow, each line containing two integers N and M. -----Output----- Display the number of common divisors for each pair N and M, each result on a new line. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N, M ≤ 1000000 -----Example----- Input 3 12 18 100 75 7 13 Output 4 3 1","solution":"def gcd(a, b): Helper function to compute the greatest common divisor of a and b using Euclid\'s algorithm. while b: a, b = b, a % b return a def common_divisors_count(n, m): Returns the number of common divisors between two numbers n and m. common_gcd = gcd(n, m) count = 0 for i in range(1, common_gcd + 1): if common_gcd % i == 0: count += 1 return count def solve(T, cases): Solves the problem for T test cases. Parameters: T (int): The number of test cases. cases (list of tuple): Each tuple contains two integers (N, M). Returns: list of int: The number of common divisors for each pair (N, M). results = [] for n, m in cases: results.append(common_divisors_count(n, m)) return results"},{"question":"In a small town, there are N houses and M shops arranged in a straight line. Each house has a unique number assigned to it (from 1 to N) and each shop has a unique number as well (from 1 to M). Residents prefer to visit the nearest shop available. Write a function that matches each house to the nearest shop. If there are two or more shops at the same distance to a particular house, match it to the shop with the smallest number. -----Constraints----- - All values in input are integers. - 1 ≤ N, M ≤ 10^5 - Positions of houses and shops are given as integer values on a number line. -----Input----- Input is given from Standard Input in the following format: N M house_1 house_2 ... house_N shop_1 shop_2 ... shop_M -----Output----- Output N lines, each containing a single integer representing the shop number that is nearest to the corresponding house. -----Sample Input----- 3 4 1 5 9 2 4 6 8 -----Sample Output----- 2 4 8 Explanation: - House 1 (position 1) is nearest to Shop 2 (position 2); - House 5 (position 5) is nearest to Shop 4 (position 4); - House 9 (position 9) is nearest to Shop 8 (position 8).","solution":"def nearest_shops(N, M, houses, shops): Matches each house to the nearest shop. Args: N : int Number of houses. M : int Number of shops. houses : list of int Positions of houses on the number line. shops : list of int Positions of shops on the number line. Returns: list of int List containing the shop number that is nearest to each house. sorted_shops = sorted(shops) results = [] for house in houses: low, high = 0, M - 1 while low < high: mid = (low + high) // 2 if sorted_shops[mid] < house: low = mid + 1 else: high = mid nearest_shop = low if low > 0 and abs(sorted_shops[low] - house) >= abs(sorted_shops[low - 1] - house): nearest_shop = low - 1 results.append(sorted_shops[nearest_shop]) return results"},{"question":"You are given a list of integers boldsymbol{text{nums}}, and your task is to find the largest product you can obtain by multiplying three distinct integers from the list. Write a program that prints the maximum product you can get. **Input Format** A single line containing integers separated by spaces represents the list of integers boldsymbol{text{nums}}. **Constraints** 3 leq |text{nums}| leq 10^5 -10^4 leq text{nums}[i] leq 10^4 **Output Format** Print a single integer, the maximum product of three distinct integers from the list. **Sample Input** ``` 1 2 3 4 ``` **Sample Output** ``` 24 ``` **Explanation** The maximum product of three numbers from the list is 4 times 3 times 2 = 24. Another Example: **Sample Input** ``` -10 -10 1 3 2 ``` **Sample Output** ``` 300 ``` **Explanation** The maximum product of three numbers from the list is -10 times -10 times 3 = 300.","solution":"def maximum_product_of_three(nums): Returns the maximum product of three distinct integers from the list nums. nums.sort() max1 = nums[-1] * nums[-2] * nums[-3] max2 = nums[0] * nums[1] * nums[-1] return max(max1, max2) if __name__ == \\"__main__\\": import sys input_data = sys.stdin.read().strip() nums = list(map(int, input_data.split())) print(maximum_product_of_three(nums))"},{"question":"You are given a rectangular garden of size N times M (1-based indexing). The garden is divided into cells, each of which can either be a flower denoted by ‘*’, a tree denoted by ‘#’, or empty denoted by ‘.’. You can move between adjacent cells (up, down, left, or right) if they are empty. You are initially located at the top-left cell (1, 1) and your aim is to collect all the flowers and return to the initial position. Note that you cannot pass through cells with trees ‘#’. The task is to find out the minimum number of steps required to collect all the flowers and return to the starting cell (1, 1), if it is possible. -----Input----- The first line contains two integers N and M (1 le N, M le 50) denoting the dimensions of the garden. Each of the next N lines contains a string denoting the i^{th} row. The length of these strings will be M. -----Output----- Print the minimum number of steps required to collect all the flowers and return to the initial position. If it is not possible to collect all the flowers or return to the starting cell, print ‘-1’ (without the quotes). -----Examples----- Sample Input: 3 3 *.# .#. ..* Sample Output: 8","solution":"from collections import deque def minimum_steps_to_collect_all(N, M, garden): def within_bounds(x, y): return 0 <= x < N and 0 <= y < M def neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if within_bounds(nx, ny) and garden[nx][ny] != \'#\': yield nx, ny flowers = sum(row.count(\'*\') for row in garden) if flowers == 0: return 0 start = (0, 0) if garden[0][0] == \'#\': return -1 def bfs(start): queue = deque([(start, 0)]) visited = set([start]) distances = {} while queue: (x, y), dist = queue.popleft() if garden[x][y] == \'*\': distances[(x, y)] = dist for nx, ny in neighbors(x, y): if (nx, ny) not in visited: visited.add((nx, ny)) queue.append(((nx, ny), dist + 1)) return distances distances_from_start = bfs(start) if len(distances_from_start) != flowers: return -1 total_steps = 0 for (fx, fy), dist in distances_from_start.items(): total_steps += 2 * dist return total_steps # Example usage N = 3 M = 3 garden = [\\"*.#\\", \\".#.\\", \\"..*\\"] print(minimum_steps_to_collect_all(N, M, garden)) # Output: 8"},{"question":"A software company develops a management system for libraries. One of the features they want to implement is an automatic check to see if all books present in the library system have their corresponding records in the library catalog. Each book in the system has a unique ID and a title. Write a program that takes a list of books in the library system and a list of book records from the catalog, and compares them to ensure that each book in the system has its record present in the catalog. Your program should output the ID and title of books that are missing their records from the catalog. Input: - The first line contains an integer n (1 ≤ n ≤ 100) which is the number of books in the library system. - The following n lines each contain a unique integer ID (1 ≤ ID ≤ 10000) and a title (a string of up to 50 characters) representing the books in the library system. - The next line contains an integer m (1 ≤ m ≤ 100) which is the number of book records in the library catalog. - The following m lines each contain a unique integer ID representing the records from the catalog. Output: - For each book missing its record in the catalog, output its ID and title each on a new line. Example: Input: 4 1001 \\"The Great Gatsby\\" 1002 \\"1984\\" 1003 \\"To Kill a Mockingbird\\" 1004 \\"The Catcher in the Rye\\" 3 1001 1002 1004 Output: 1003 \\"To Kill a Mockingbird\\"","solution":"def find_missing_books(n, library_books, m, catalog_books): Finds books that are in the library system but missing in the catalog. :param n: Number of books in the library system :param library_books: List of tuples (ID, title) for books in the library system :param m: Number of book records in the catalog :param catalog_books: List of IDs representing the catalog records :return: List of tuples (ID, title) for books missing in the catalog catalog_set = set(catalog_books) missing_books = [] for book_id, book_title in library_books: if book_id not in catalog_set: missing_books.append((book_id, book_title)) return missing_books"},{"question":"Given a matrix `A` of dimensions `n x m`, you need to find the sum of each row and each column, and then return these sums in a specified format. # Input - The first line contains two integers, `n` and `m` — the number of rows and columns in the matrix `A` (1 ≤ n, m ≤ 200). - The next `n` lines contain `m` integers each, representing the values of the matrix `A` (each integer 1 ≤ A[i][j] ≤ 1000). # Output - The first line should contain `n` integers — the sums of the elements of each row. - The second line should contain `m` integers — the sums of the elements of each column. # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 6 15 24 12 15 18 ``` # Explanation In the example, the sums of each row are calculated as follows: - Row 1: 1 + 2 + 3 = 6 - Row 2: 4 + 5 + 6 = 15 - Row 3: 7 + 8 + 9 = 24 Similarly, the sums of each column are calculated: - Column 1: 1 + 4 + 7 = 12 - Column 2: 2 + 5 + 8 = 15 - Column 3: 3 + 6 + 9 = 18","solution":"def row_and_column_sums(n, m, matrix): Calculates the sum of each row and column in a given n x m matrix. Parameters: n (int): number of rows m (int): number of columns matrix (list of list of int): 2D list representing the matrix Returns: tuple: (list of row sums, list of column sums) row_sums = [sum(row) for row in matrix] column_sums = [sum(matrix[i][j] for i in range(n)) for j in range(m)] return row_sums, column_sums"},{"question":"Design an algorithm to merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists. Example: Input: l1 = [1,2,4], l2 = [1,3,4] Output: [1,1,2,3,4,4] Explanation: - Merge the two sorted linked lists [1,2,4] and [1,3,4]. - Splice together the nodes of both lists, maintaining the sorted order. - Return the resulting linked list. Example 2: Input: l1 = [], l2 = [0] Output: [0] Explanation: - Merge the two sorted linked lists [] and [0]. - Since the first list is empty, the merged list will consist solely of the elements of the second list. - Return the resulting linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeTwoLists(l1, l2): Merge two sorted linked lists and return it as a new sorted list. The new list is made by splicing together the nodes of the first two lists. dummy = ListNode() current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 else: current.next = l2 return dummy.next def list_to_linked_list(elements): Creates a linked list from a list of elements and returns the head node. dummy = ListNode() current = dummy for element in elements: current.next = ListNode(element) current = current.next return dummy.next def linked_list_to_list(node): Creates a list from a linked list and returns the list. result = [] current = node while current: result.append(current.val) current = current.next return result"},{"question":"You are given a list of non-negative integers representing heights of blocks where the width of each block is 1. Compute the amount of water that can be trapped after a rain. # Example: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map (array) is represented as follows: | | | | █ █ █ | | █ █ █ █ | | █ ██ ████ | |██ ████████| In this case, 6 units of water (shown in blue) are trapped. # Notes: * The list of heights is non-negative. * The length of the list is in the range [1, 1000]. * Each height will be an integer in the range [0, 1000].","solution":"def trap(height): Calculate how much water can be trapped after rain, given the heights of the blocks. :param height: List[int] - list of non-negative integers representing the heights of blocks :return: int - the total amount of trapped water if not height or len(height) < 3: return 0 left, right = 0, len(height) - 1 left_max, right_max = height[left], height[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, height[left]) water_trapped += max(0, left_max - height[left]) else: right -= 1 right_max = max(right_max, height[right]) water_trapped += max(0, right_max - height[right]) return water_trapped"},{"question":"In a kingdom far away, there are n islands connected by m bidirectional bridges. Each bridge has a certain magical value associated with it. The wizard of the kingdom decided to organize a transportation network such that people can travel from one island to any other island. To accomplish this, he wants to choose a subset of the bridges to ensure that all islands are connected with the minimum possible total magical value. Your task is to determine the minimum possible total magical value of the bridges that can be chosen to ensure that all islands are connected. Input The first line contains two integers n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105) — the number of islands and the number of bridges, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 0 ≤ w ≤ 109) — the endpoints of the bridge and its magical value. It is guaranteed that there exists at least one way to connect all islands. Output Print a single integer — the minimum possible total magical value. Examples Input 4 5 1 2 1 1 3 4 1 4 3 2 3 2 3 4 5 Output 6 Input 3 3 1 2 2 2 3 2 1 3 3 Output 4 Note In the first example, the minimum spanning tree (MST) consists of bridges with magical values 1, 2, and 3, resulting in a total magical value of 6. In the second example, the MST consists of bridges with magical values 2 and 2, resulting in a total magical value of 4.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, bridges): result = [] i = 0 e = 0 bridges = sorted(bridges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: u, v, w = bridges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append(w) union(parent, rank, x, y) return sum(result) def minimum_possible_total_magical_value(n, m, bridges): return kruskal(n, bridges)"},{"question":"A robot can move in a 2-dimensional grid starting from the origin point (0,0). The robot can move up, down, left, or right, denoted by commands \'U\', \'D\', \'L\', and \'R\' respectively. Given a sequence of commands, find the robot\'s final position in the grid after executing all commands. For example, if the robot is given the commands \\"UUDDRL\\", it will move from (0,0) as follows: - \'U\' makes it move to (0,1) - \'U\' makes it move to (0,2) - \'D\' makes it move to (0,1) - \'D\' makes it move back to (0,0) - \'R\' makes it move to (1,0) - \'L\' makes it move back to (0,0) Function Description Complete the robotMove function in the editor below. robotMove has the following parameter(s): string commands: a string of commands consisting of \'U\', \'D\', \'L\', \'R\' Returns int[]: an array of two integers representing the final coordinates of the robot Input Format The first line contains the integer, n, the length of the commands string. The second line contains the commands string. Constraints 1 leq n leq 100 Each character in the commands string is either \'U\', \'D\', \'L\', or \'R\'. Sample Input 6 UUDDRL Sample Output [0, 0] Explanation Starting from (0,0), the sequence of moves produces the following transition of positions: (0,0) -> (0,1) -> (0,2) -> (0,1) -> (0,0) -> (1,0) -> (0,0)","solution":"def robotMove(commands): Returns the final coordinates of the robot after executing all commands. Parameters: commands (str): A string of commands consisting of \'U\', \'D\', \'L\', \'R\' Returns: list: A list of two integers representing the final coordinates of the robot x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return [x, y]"},{"question":"Task You are given a string containing an arithmetical expression in Reverse Polish Notation (RPN). The expression will only contain non-negative integers and the four basic arithmetic operations: addition, subtraction, multiplication, and division. Perform the calculation and return the result as an integer. Since RPN expressions are always valid, you do not need to handle errors or invalid inputs. # Example ```python rpn_eval(\\"3 4 +\\") # Should return 7 rpn_eval(\\"12 2 /\\") # Should return 6 rpn_eval(\\"5 1 2 + 4 * + 3 -\\") # Should return 14 ``` # Note - In RPN, operators follow their operands; for example, to add `3` and `4`, you would write `3 4 +` rather than `3 + 4`. - Division should truncate toward zero. # Constraints - The length of the input string will be between 1 and 100. - The input string will contain only valid characters (digits and operators separated by spaces).","solution":"def rpn_eval(expression): Evaluates the given reverse Polish notation (RPN) expression and returns the result as an integer. stack = [] tokens = expression.split() for token in tokens: if token.isdigit(): stack.append(int(token)) else: b = stack.pop() a = stack.pop() if token == \'+\': result = a + b elif token == \'-\': result = a - b elif token == \'*\': result = a * b elif token == \'/\': result = int(a / b) # Explicit integer division stack.append(result) return stack[0]"},{"question":"Given an array of integers, return a new array that contains only the two largest elements in descending order. If the array has fewer than two elements, return an empty array. For example: ```python two_largest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) # Returns [9, 6] two_largest([10]) # Returns [] two_largest([-1, -2, -3, -4]) # Returns [-1, -2] ```","solution":"def two_largest(arr): Returns a new array that contains the two largest elements in descending order. If the array has fewer than two elements, return an empty array. if len(arr) < 2: return [] sorted_arr = sorted(arr, reverse=True) return sorted_arr[:2]"},{"question":"A company wants to divide its employees into teams for a project. They want to ensure that each team has exactly the same number of members. Given the total number of employees and the desired number of teams, determine how many members each team will have. If it is not possible to divide the employees evenly among the teams, the company will be unable to proceed with the division. Write a program that takes two integers as input: the total number of employees `E` and the number of desired teams `T`. The program should check if it\'s possible to divide the employees evenly among the teams. If it is possible, print \\"YES\\" followed by the number of members each team will have. If it\'s not possible, print \\"NO\\". Input The input consists of a single line containing two integers `E` and `T` (1 ≤ E, T ≤ 10^9). Output Output \\"YES\\" followed by a single integer representing the number of members in each team if the division is possible. Otherwise, output \\"NO\\". Examples Input 10 2 Output YES 5 Input 10 3 Output NO Explanation In the first example, the total number of employees is 10 and the number of desired teams is 2. It is possible to divide the employees into 2 teams with 5 members each. In the second example, it is not possible to divide 10 employees into 3 teams evenly, as it would result in some teams having more members than others. Therefore, the output is \\"NO\\".","solution":"def divide_teams(employees, teams): Determines if employees can be divided into teams with equal members. Parameters: employees (int): Total number of employees. teams (int): Number of desired teams. Returns: str: \\"YES <members_per_team>\\" if division is possible; \\"NO\\" otherwise. if employees % teams == 0: return \\"YES \\" + str(employees // teams) else: return \\"NO\\""},{"question":"George loves going for runs on different terrains. He constructs his route using a sequence of segments, each with a specific height. George wants to know how much elevation he gains from start to finish of his run. The elevation gain is defined as the sum of all the positive differences between consecutive segments of the route. George has already planned the segments of his run route. Help George compute the total elevation gain of his run. -----Input----- The first line contains a single integer n (2 le n le 10^5) — the number of segments in George\'s run. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) — the height of each segment. -----Output----- Output one integer — the total elevation gain of the route. -----Examples----- Input 5 1 5 3 6 4 Output 7 Input 3 4 4 4 Output 0 Input 4 2 4 6 8 Output 6 -----Note----- In the first sample, George gains elevation from segment 1 to segment 2 (5 - 1 = 4) and from segment 3 to segment 4 (6 - 3 = 3). The total elevation gain is 4 + 3 = 7. In the second sample, there is no elevation gain as all segments are at the same height. In the third sample, George gains elevation step-by-step as he progresses through each segment: (4 - 2) + (6 - 4) + (8 - 6) = 6.","solution":"def total_elevation_gain(n, heights): Calculate the total elevation gain from a list of segment heights. Arguments: n -- integer, number of segments heights -- list of integers, heights of each segment Returns: integer, total elevation gain elevation_gain = 0 for i in range(1, n): if heights[i] > heights[i - 1]: elevation_gain += heights[i] - heights[i - 1] return elevation_gain"},{"question":"Given an integer N, determine if it can be expressed as the sum of two prime numbers. If it can, return any pair of such prime numbers. If not, return -1. -----Constraints----- - 4 ≦ N ≦ 10^6 -----Input----- The input is given from Standard Input in the following format: N -----Output----- If N can be expressed as the sum of two prime numbers, print two such prime numbers separated by a space. If N cannot be expressed as the sum of two prime numbers, print -1. -----Sample Input----- 34 -----Sample Output----- 3 31 Explanation: 34 can be expressed as the sum of 3 and 31, which are both prime numbers. Note that other valid outputs could be 5 29, or 17 17, among others.","solution":"def sieve_of_eratosthenes(n): is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 is_prime[0] = is_prime[1] = False return is_prime def find_sum_of_primes(N): if N < 4: return -1 is_prime = sieve_of_eratosthenes(N) for i in range(2, N): if is_prime[i] and is_prime[N - i]: return i, N - i return -1"},{"question":"You are given two strings, `s1` and `s2`. Your job is to determine if `s1` can be rearranged to form `s2` using only one swap of two characters within `s1`. A swap is defined as selecting two distinct indices `i` and `j` in `s1`, and swapping the characters at these indices. If `s1` can be rearranged to form `s2` with exactly one swap, print \\"Yes\\". Otherwise, print \\"No\\". Example s1 = \\"abcd\\", s2 = \\"acbd\\" -> \\"Yes\\" (Swap indices 1 and 2) s1 = \\"abcd\\", s2 = \\"abcd\\" -> \\"No\\" (No swap needed) s1 = \\"abcd\\", s2 = \\"abdc\\" -> \\"Yes\\" (Swap indices 2 and 3) s1 = \\"abcd\\", s2 = \\"abcc\\" -> \\"No\\" (Characters do not match) Input Format The first line contains the string `s1`. The second line contains the string `s2`. Constraints 1 leq text{len}(s1), text{len}(s2) leq 100 s1 and s2 will contain only lowercase English letters. Output Format Print \\"Yes\\" if `s1` can be rearranged to form `s2` with exactly one swap, otherwise print \\"No\\". Sample Input 0 abcd acbd Sample Output 0 Yes Explanation 0 By swapping the characters at indices 1 and 2 in `s1`, we get `s2` (\\"acbd\\"). So, the output is \\"Yes\\".","solution":"def can_form_with_one_swap(s1, s2): if len(s1) != len(s2): return \\"No\\" differences = [] for i in range(len(s1)): if s1[i] != s2[i]: differences.append(i) if len(differences) > 2: return \\"No\\" if len(differences) == 2: i, j = differences if s1[i] == s2[j] and s1[j] == s2[i]: return \\"Yes\\" return \\"No\\" # Example usage: # print(can_form_with_one_swap(\\"abcd\\", \\"acbd\\")) # Should print \'Yes\'"},{"question":"Alice wants to create a sequence of balanced parenthesis. A sequence of parentheses is considered balanced if every opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are properly nested. Given an integer N, which represents the number of pairs of parentheses, help Alice to generate all possible combinations of balanced sequences of parentheses. INPUT: The input contains a single integer N, where 1 ≤ N ≤ 10, which represents the number of pairs of parentheses. OUTPUT: Print all the combinations of balanced parentheses in alphabetical (dictionary) order. SAMPLE INPUT 3 SAMPLE OUTPUT ((())) (()()) (())() ()(()) ()()()","solution":"def generate_parentheses(N): Generate all combinations of N pairs of balanced parentheses. :param N: int - Number of pairs of parentheses :return: List[str] - All combinations of balanced parentheses in dictionary order def backtrack(S=\\"\\", left=0, right=0): if len(S) == 2 * N: result.append(S) return if left < N: backtrack(S + \\"(\\", left + 1, right) if right < left: backtrack(S + \\")\\", left, right + 1) result = [] backtrack() return sorted(result)"},{"question":"Given a positive integer `n`, Peter wants to know how many trailing zeros are in the factorial of that integer. The factorial of a positive integer `n` is the product of all positive integers less than or equal to `n`. For example, the factorial of `5` is `120`, which has one trailing zero, and the factorial of `10` is `3628800`, which has two trailing zeros. Peter is curious and wants you to write a program that computes the number of trailing zeros in the factorial of the given integer `n`. Input - The input consists of multiple test cases. - Each test case consists of a single positive integer `n` (1 <= n <= 10,000). - The input ends with a line containing `-1`, indicating the end of input. Do not process this line. Output - For each test case, output the number of trailing zeros in the factorial of the given integer `n`. Example Input 5 10 25 -1 Output 1 2 6 Explanation - The factorial of `5` is `120`, which has one trailing zero. - The factorial of `10` is `3628800`, which has two trailing zeros. - The factorial of `25` is `15511210043330985984000000`, which has six trailing zeros due to more multiples of `5` contributing additional zeros.","solution":"def count_trailing_zeros_in_factorial(n): This function takes a positive integer n and returns the number of trailing zeros in the factorial of n. count = 0 power_of_5 = 5 while n >= power_of_5: count += n // power_of_5 power_of_5 *= 5 return count def process_input(input_data): This function takes input data as a list of integers, processes each integer, and returns a list of results. results = [] for n in input_data: if n == -1: break results.append(count_trailing_zeros_in_factorial(n)) return results"},{"question":"Given a binary tree, your task is to find the nodes at distance K from a given target node. A node is considered at distance K if the shortest path from the target node to the node is of length K. The binary tree is provided with nodes containing unique integer values. The target node value and the distance K will also be provided. Write a function that returns a list of integers representing the values of nodes that are at distance K from the target node, in any order. If there are no nodes at distance K, return an empty list. # Example ``` Input: 3 / 5 1 / / 6 2 0 8 / 7 4 target = 5, K = 2 Output: [7, 4, 1] Explanation: Nodes 7, 4, and 1 are at distance 2 from the target node 5. ``` ``` Input: 1 / 2 3 / 4 5 target = 2, K = 1 Output: [1, 4, 5] Explanation: Nodes 1, 4, and 5 are at distance 1 from the target node 2. ``` # Your Task You don\'t need to read input or print anything. Complete the function `nodesAtDistanceK()` which takes the root of the tree, the target node value, and the integer K as input parameters and returns a list of integers representing the values of nodes at distance K from the target node. # Expected Time Complexity: - O(N), where N is the number of nodes in the tree. # Constraints: - The number of nodes in the tree is between 1 and 10^4. - Each node\'s value is unique and between 1 and 10^4. - 0 ≤ K ≤ N","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def nodesAtDistanceK(root, target, K): # Step 1: Create a map of parent pointers for each node parent_map = {} def fill_parent_map_and_find_target(node, parent): if not node: return None parent_map[node] = parent if node.val == target: return node left = fill_parent_map_and_find_target(node.left, node) if left: return left return fill_parent_map_and_find_target(node.right, node) # Step 2: Start BFS from the target node to find all nodes at distance K target_node = fill_parent_map_and_find_target(root, None) if not target_node: return [] queue = [(target_node, 0)] visited = set() visited.add(target_node) results = [] while queue: current, distance = queue.pop(0) if distance == K: results.append(current.val) if current.left and current.left not in visited: visited.add(current.left) queue.append((current.left, distance + 1)) if current.right and current.right not in visited: visited.add(current.right) queue.append((current.right, distance + 1)) parent = parent_map.get(current) if parent and parent not in visited: visited.add(parent) queue.append((parent, distance + 1)) return results"},{"question":"In a small village, there is a need to build a water supply network that connects all the houses. The village consists of N houses numbered from 1 to N, and M possible pipe connections between them. Each pipe connection i connects houses a_i and b_i and has a construction cost of c_i. The village chief wants to minimize the total cost of building the entire network, ensuring every house is connected either directly or indirectly. You are tasked with finding the minimum construction cost required to connect all the houses. Constraints * 1 leq N leq 100 * 0 leq M leq N(N-1)/2 * 1 leq a_i, b_i leq N * 1 leq c_i leq 10^{4} Input Input is given from Standard Input in the following format: ``` N M a_1 b_1 c_1 : a_M b_M c_M ``` Output Print the minimum cost to connect all the houses. If it\'s impossible to connect all the houses, print -1. Examples Input ``` 4 5 1 2 10 1 3 15 2 3 5 2 4 20 3 4 10 ``` Output ``` 25 ``` Input ``` 3 1 1 2 5 ``` Output ``` -1 ``` Input ``` 5 7 1 2 1 1 3 3 2 3 1 3 4 4 4 5 2 2 5 5 1 4 3 ``` Output ``` 7 ```","solution":"def find(parent, i): # This function finds the parent of a node i if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): # This function unions the sets containing x and y rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def min_cost_to_connect_houses(N, M, connections): if N == 1: return 0 # Initialize parent and rank arrays for union-find parent = [i for i in range(N)] rank = [0] * N # Sort connections based on cost connections.sort(key=lambda x: x[2]) total_cost = 0 edges_used = 0 for conn in connections: a, b, cost = conn if find(parent, a - 1) != find(parent, b - 1): union(parent, rank, a - 1, b - 1) total_cost += cost edges_used += 1 if edges_used == N - 1: return total_cost return -1 # To take input from standard input in competitive programming style def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) connections = [] for i in range(M): a = int(data[2 + 3*i]) b = int(data[3 + 3*i]) c = int(data[4 + 3*i]) connections.append((a, b, c)) print(min_cost_to_connect_houses(N, M, connections)) if __name__ == \\"__main__\\": main()"},{"question":"Alex is an avid traveler and loves exploring new cities. A particular city Alex is interested in has m intersections, labeled from 1 to m. Each intersection is connected to another intersection via a one-way street forming a directed graph. In this city, some intersections are scenic, indicated by an integer array `s` where `s[i] = 1` means intersection i is scenic and `s[i] = 0` means it is not. Alex starts his journey from any intersection and wants to visit as many distinct scenic intersections as possible before returning to the starting point. A valid travel plan is defined as a sequence of moves from intersection to intersection that forms a cycle, i.e., Alex must return to the starting intersection eventually. You need to determine the maximum number of distinct scenic intersections that Alex can visit in any valid travel plan. -----Input----- The first line contains two space-separated integers m and n (1 ≤ m, n ≤ 1000) — the number of intersections and the number of one-way streets. The next line contains m space-separated integers s_1, s_2, ..., s_m (0 ≤ s_i ≤ 1) — indicating if the intersection i is scenic or not. Each of the next n lines contains two integers x and y (1 ≤ x, y ≤ m) — indicating there is a one-way street from intersection x to intersection y. -----Output----- In a single line print a single integer — the maximum number of distinct scenic intersections that Alex can visit in any valid travel plan. -----Examples----- Input 5 5 1 0 1 0 1 1 2 2 3 3 4 4 5 5 1 Output 3 Input 4 4 1 1 0 1 1 2 2 3 3 4 4 2 Output 2","solution":"from collections import deque, defaultdict def max_scenic(m, n, scenic, streets): # Create adjacency list for the graph graph = defaultdict(list) for x, y in streets: graph[x].append(y) # Function to find the strongly connected components (SCC) def kosaraju_scc(m, graph): stack = [] visited = [False] * (m + 1) def fill_order(v): visited[v] = True for i in graph[v]: if not visited[i]: fill_order(i) stack.append(v) def dfs(v, transposed_graph): visited[v] = True scc[-1].append(v) for i in transposed_graph[v]: if not visited[i]: dfs(i, transposed_graph) # Fill vertices in stack according to their finishing times for i in range(1, m + 1): if not visited[i]: fill_order(i) # Create a reversed graph transposed_graph = defaultdict(list) for i in graph: for j in graph[i]: transposed_graph[j].append(i) # Process all vertices in order defined by stack visited = [False] * (m + 1) scc = [] while stack: i = stack.pop() if not visited[i]: scc.append([]) dfs(i, transposed_graph) return scc # Get all strongly connected components sccs = kosaraju_scc(m, graph) max_scenic_intersections = 0 for scc in sccs: unique_scenic_count = len(set(intersection for intersection in scc if scenic[intersection - 1] == 1)) max_scenic_intersections = max(max_scenic_intersections, unique_scenic_count) return max_scenic_intersections"},{"question":"# Task Your task is to find the longest substring of a given string `s` that does not contain any repeating characters. # Example For `s = \\"abcabcbb\\"`, the output should be `\\"abc\\"`. For `s = \\"bbbbb\\"`, the output should be `\\"b\\"`. For `s = \\"pwwkew\\"`, the output should be `\\"wke\\"`. For `s = \\"abcdefg\\"`, the output should be `\\"abcdefg\\"`. # Input/Output - `[input]` string `s` `1 ≤ s.length ≤ 10^5` - `[output]` a string","solution":"def longest_unique_substring(s): Finds the longest substring of s that does not contain any repeating characters. n = len(s) if n == 0: return \\"\\" start = max_length = 0 used_char = {} result = \\"\\" for end in range(n): if s[end] in used_char and start <= used_char[s[end]]: start = used_char[s[end]] + 1 else: if (end - start + 1) > max_length: max_length = end - start + 1 result = s[start:end+1] used_char[s[end]] = end return result"},{"question":"You are given an array A of N integers. The array is indexed starting from 1, and each element A[i] denotes the ith integer in the array. A subsequence B of A is defined as an increasing subsequence if for any two elements B[i] and B[j], where i < j, B[i] < B[j]. Let\'s define the \'score\' of an increasing subsequence B as the sum of the elements in B. Your task is to find the maximum possible \'score\' of any increasing subsequence in the array A. -----Input----- The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N, the size of the array. The second line of each test case contains N space-separated integers, the elements of the array A. -----Output----- For each test case, output a single line containing the maximum possible \'score\' of an increasing subsequence of A. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - -10^6 ≤ A[i] ≤ 10^6 -----Example----- Input: 2 5 3 -1 4 -2 5 4 7 7 7 7 Output: 12 7 -----Explanation----- In the first case, one of the maximum increasing subsequences is [3, 4, 5], with a sum of 12. In the second case, the array contains all identical elements, so the maximum increasing subsequence contains any one of the elements, resulting in a score of 7.","solution":"def max_increasing_subsequence_score(arr): n = len(arr) dp = [0] * n for i in range(n): dp[i] = arr[i] for j in range(i): if arr[j] < arr[i]: dp[i] = max(dp[i], dp[j] + arr[i]) return max(dp) def solution(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(max_increasing_subsequence_score(arr)) return results"},{"question":"You are given a matrix consisting of n rows and m columns. Each cell of the matrix contains a lowercase Latin letter. You need to find if there is any duplicate letter in the same row or in the same column of the matrix. If there is at least one duplicate letter present in any row or column, print \\"Yes\\". Otherwise, print \\"No\\". -----Input----- The first line of the input contains an integer q (1 le q le 100) — the number of test cases in the input. The descriptions of the test cases follow. The first line of description of each test case contains two integers n and m (1 le n, m le 50) — the number of rows and columns of the matrix. The next n lines contain the rows of the matrix. Each of these lines contain m lowercase Latin letters without space between them. -----Output----- For each test case, print \\"Yes\\" if there is at least one duplicate letter in any row or in any column. Otherwise, print \\"No\\". -----Examples----- Input 3 3 4 abcd efgh ijkl 3 4 aabb ccdd eeff 2 2 ab ba Output No Yes No -----Note----- In the first test case, there are no repeating letters in any row or column. In the second test case, all rows contain duplicate letters. In the third test case, neither of the two rows nor either of the two columns have any repeating letters.","solution":"def has_duplicates(matrix): Checks if there are duplicates in any row or column of the matrix. n = len(matrix) m = len(matrix[0]) # Check rows for duplicates for row in matrix: if len(set(row)) < len(row): return \\"Yes\\" # Check columns for duplicates for col in range(m): seen = set() for row in range(n): if matrix[row][col] in seen: return \\"Yes\\" seen.add(matrix[row][col]) return \\"No\\" def process_test_cases(test_cases): results = [] for case in test_cases: results.append(has_duplicates(case)) return results"},{"question":"Given a list of integers, you need to determine if the list is in strictly increasing order. A list is considered strictly increasing if each element is less than the element that follows it. Input The first line of input contains an integer T denoting the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the number of elements in the list. - The second line contains N space-separated integers, representing the elements of the list. Output For each test case, output \\"true\\" if the list is in strictly increasing order, otherwise output \\"false\\". Constraints 1 ≤ T ≤ 15 1 ≤ N ≤ 10^5 -10^9 ≤ Elements of the list ≤ 10^9 Example Input: 3 5 1 2 3 4 5 4 5 5 10 15 3 10 20 30 Output: true false true","solution":"def is_strictly_increasing(T, test_cases): This function takes the number of test cases and a list of tuples containing the length of the list and the list itself, and returns a list of strings \\"true\\" or \\"false\\" indicating whether each list is strictly increasing. Parameters: T (int): Number of test cases. test_cases (list): List of tuples where each tuple contains: - (int): Length of the list. - (list): The list of integers. Returns: list: A list of strings \\"true\\" or \\"false\\". results = [] for i in range(T): N, lst = test_cases[i] if all(lst[j] < lst[j + 1] for j in range(N - 1)): results.append(\\"true\\") else: results.append(\\"false\\") return results"},{"question":"You are given an array of n integers. Define the \\"balance\\" of a subarray as the difference between the maximum and minimum values in that subarray. Your task is to determine the length of the longest subarray such that the balance of the subarray does not exceed a given integer k. Input The first line contains a single integer t (1 ≤ t ≤ 10) — the number of tests in the input. Each of the next t lines contains two space-separated integers, n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9), followed by an array of n integers (−10^9 ≤ array[i] ≤ 10^9). Output For each of the t tests, print a single integer — the length of the longest subarray with balance not exceeding k. Example Input 2 5 3 1 3 6 6 7 3 0 8 8 8 Output 3 3","solution":"def longest_balanced_subarray(array, k): Find the length of the longest subarray where the balance (max - min) does not exceed k. n = len(array) if n == 0: return 0 left = 0 result = 0 min_list = [] max_list = [] for right in range(n): while min_list and array[min_list[-1]] >= array[right]: min_list.pop() while max_list and array[max_list[-1]] <= array[right]: max_list.pop() min_list.append(right) max_list.append(right) while array[max_list[0]] - array[min_list[0]] > k: left += 1 if min_list[0] < left: min_list.pop(0) if max_list[0] < left: max_list.pop(0) result = max(result, right - left + 1) return result def solve(t, test_cases): results = [] for case in test_cases: n, k, array = case results.append(longest_balanced_subarray(array, k)) return results"},{"question":"Given a binary string of length n, you are tasked with performing exactly k operations to transform the string into another binary string. In one operation, you can choose any two different positions in the string and swap their values. Your goal is to determine the lexicographically smallest binary string that can be obtained after exactly k operations. Input The first line of the input contains two integers n (1 ≤ n ≤ 1000) and k (0 ≤ k ≤ 10^5), representing the length of the binary string and the number of operations, respectively. The second line contains a binary string of length n. Output Print the lexicographically smallest binary string that can be obtained after exactly k operations. Example Input 5 2 11001 Output 00111 Explanation After one swap operation: 10101 After the second swap operation: 00111 The resulting string \\"00111\\" is the lexicographically smallest binary string that can be achieved with exactly two operations.","solution":"def lexicographically_smallest_binary_string(n, k, binary_string): binary_list = list(binary_string) for i in range(n): if k <= 0: break # Find the smallest binary digit in the remaining part of the string to swap with current position min_index = i for j in range(i + 1, n): if binary_list[j] < binary_list[min_index]: min_index = j # If we have found a smaller element, swap it with the current position if min_index != i: binary_list[i], binary_list[min_index] = binary_list[min_index], binary_list[i] k -= 1 return \'\'.join(binary_list)"},{"question":"In a two-dimensional grid of size `n x n`, you have to find the maximum sum of a subgrid with a given size `k x k`. You are given an integer `n` representing the size of the grid and a two-dimensional list `grid` containing `n x n` integers. You are also given an integer `k`, the size of the subgrid for which you need to find the maximum sum. Your task is to write a function that calculates the maximum sum of a `k x k` subgrid within the given `n x n` grid. # Input - An integer `n` (2 <= n <= 1000), representing the size of the grid. - A two-dimensional list `grid` of integers of size `n x n` where each element `grid[i][j]` (-10^4 <= grid[i][j] <= 10^4) is the value at cell `(i, j)` of the grid. - An integer `k` (1 <= k <= n), representing the size of the subgrid. # Output - Return an integer representing the maximum sum of a `k x k` subgrid. # Function Signature ```python def max_subgrid_sum(n: int, grid: List[List[int]], k: int) -> int: ``` # Example Example 1: ```python n = 4 grid = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] k = 2 print(max_subgrid_sum(n, grid, k)) ``` **Output:** ``` 34 ``` **Explanation:** The `2 x 2` subgrid with the maximum sum is: ``` 10 11 14 15 ``` The sum is `10 + 11 + 14 + 15 = 50`. Example 2: ```python n = 3 grid = [ [-1, -2, -3], [-4, -5, -6], [-7, -8, -9] ] k = 2 print(max_subgrid_sum(n, grid, k)) ``` **Output:** ``` -12 ``` **Explanation:** The `2 x 2` subgrid with the maximum sum is: ``` -1 -2 -4 -5 ``` The sum is `-1 + -2 + -4 + -5 = -12`. # Note: - The function needs to efficiently compute the maximum sum, as the grid size can be large. Ensure your implementation takes into account the constraints to avoid excessive computation time.","solution":"from typing import List def max_subgrid_sum(n: int, grid: List[List[int]], k: int) -> int: # Initialize a variable to keep track of the maximum sum max_sum = float(\'-inf\') # Create the prefix sum array prefix_sum = [[0] * (n + 1) for _ in range(n + 1)] # Fill the prefix sum array for i in range(n): for j in range(n): prefix_sum[i + 1][j + 1] = grid[i][j] + prefix_sum[i + 1][j] + prefix_sum[i][j + 1] - prefix_sum[i][j] # Slide over each possible k x k subgrid and calculate the sum for i in range(k, n + 1): for j in range(k, n + 1): current_sum = prefix_sum[i][j] - prefix_sum[i - k][j] - prefix_sum[i][j - k] + prefix_sum[i - k][j - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an array A of size N. Perform a series of operations to transform this array as follows: 1. Select any subarray (continuous segment) and reverse it. 2. Repeat the operation any number of times until the array is sorted in non-decreasing order. Your task is to determine the minimum number of operations required to sort the array in non-decreasing order. -----Input----- The first line of input contains a single integer T, the number of test cases. The first line of each test case contains an integer N, denoting the size of the array. The next line contains N space-separated integers denoting the elements of the array A. -----Output----- Output a single integer for each test case, representing the minimum number of operations required to sort the array. -----Constraints----- - 1 ≤ Ai ≤ 10^9 - 1 ≤ N ≤ 10^5 - 1 ≤ T ≤ 10 -----Subtasks----- Subtask #1 (30 points): - 1 ≤ N ≤ 100 Subtask #2 (70 points): - 1 ≤ N ≤ 10^5 -----Example----- Input: 2 4 4 3 2 1 5 1 2 5 4 3 Output: 1 1","solution":"def min_operations_to_sort(arr): Returns the minimum number of subarray reversals required to sort the array. n = len(arr) if sorted(arr) == arr: return 0 for i in range(n - 1): if arr[i] > arr[i + 1]: # If we detect a point where the trend breaks, we need 1 reversal return 1 return 0 def process_test_cases(T, test_cases): results = [] for i in range(T): N, A = test_cases[i] results.append(min_operations_to_sort(A)) return results"},{"question":"Write a function that finds the maximum length of a substring of a given string `s` that contains no more than two distinct characters. ----Input:---- - The input consists of multiple test cases. - The first line contains an integer `T`, the number of test cases. - Each of the next `T` lines contains a string `s`. ----Output:---- For each test case, print the length of the longest substring that contains no more than two distinct characters. ----Constraints:---- - 1 leq T leq 100 - 1 leq |s| leq 10^4 - The sum of the lengths of all strings in one input does not exceed 10^6. ----Sample Input:---- 3 eceba ccaabbb ababfffa ----Sample Output:---- 3 5 4 ----Explanation:---- In the first case for the string \\"eceba\\", the substring \\"ece\\" has length 3 with only two distinct characters \'e\' and \'c\'. In the second case for the string \\"ccaabbb\\", longest substring with two distinct characters is \\"aabbb\\" which has length 5. In the third case for the string \\"ababfffa\\", both \\"abab\\" and \\"afffa\\" are the longest substrings with length 4.","solution":"def max_length_of_substring(s): Finds the maximum length of a substring that contains no more than two distinct characters. n = len(s) if n < 3: return n left, right = 0, 0 hashmap = {} max_len = 2 while right < n: if len(hashmap) < 3: hashmap[s[right]] = right right += 1 if len(hashmap) == 3: del_idx = min(hashmap.values()) hashmap.pop(s[del_idx]) left = del_idx + 1 max_len = max(max_len, right - left) return max_len def process_test_cases(T, cases): results = [] for i in range(T): results.append(max_length_of_substring(cases[i])) return results"},{"question":"Sara loves to collect antique coins. She has an array `coins` of length `n` where `coins[i]` represents the value of the ith coin. Sara\'s goal is to determine the maximum number of coins she can collect such that no two coins she collects have values that differ by more than `d`. However, there\'s a constraint: once a coin is collected, all coins whose values differ by more than `d` from this coin must be removed from further consideration. In other words, for each collected coin `coins[i]`, all coins `coins[j]` where `|coins[j] - coins[i]| > d` are removed. Help Sara determine the maximum number of coins she can collect under these rules. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n (1 le n le 1000) and d (0 le d le 10^6) — the length of the array and the maximum allowed difference between the values of two collected coins. The second line of each test case contains n integers representing the values of the coins. -----Output----- For each test case, print a single integer — the maximum number of coins Sara can collect. -----Examples----- Input 3 5 2 1 5 1 6 1 4 3 1 4 7 10 6 0 1 2 3 4 5 6 Output 3 2 1 -----Note----- In the first test case, Sara can collect coins with values [1, 1, 1] (since after collecting the first 1, all 5 and 6 are more than 2 units away, so they are excluded). In the second test case, Sara can collect coins with values [1, 4] (since collecting 1 excludes 7 and 10, and collecting 4 excludes 1 and 7. Multiple sequences are possible, but only two maximum coins can be collected). In the third test case, Sara can collect only one coin as `d = 0` means no two coins can be kept together regardless of their values.","solution":"def max_coins_collected(t, test_cases): results = [] for case in test_cases: n, d, coins = case coins.sort() collected_coins = 0 while coins: selected_coin = coins.pop(0) collected_coins += 1 coins = [coin for coin in coins if abs(coin - selected_coin) <= d] results.append(collected_coins) return results"},{"question":"Write a function that takes a string of text as input and returns the longest palindrome within that text. A palindrome is a sequence of characters that reads the same backward as forward. For this problem, you need to ignore case and consider only alphanumeric characters (i.e., digits and letters) for the palindrome detection. Function signature: ```python def longest_palindrome(text: str) -> str: pass ``` # Example ```python print(longest_palindrome(\\"A man, a plan, a canal, Panama\\")) # Output: \\"A man, a plan, a canal, Panama\\" (ignoring case and special characters) ``` # Constraints - The length of the input string will not exceed 10^5 characters. - The function should run in O(n^2) time complexity or better.","solution":"def longest_palindrome(text: str) -> str: import re text = re.sub(r\'[^A-Za-z0-9]\', \'\', text).lower() def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left+1:right] longest = \\"\\" for i in range(len(text)): # Odd-length palindromes odd_palindrome = expand_around_center(text, i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Even-length palindromes even_palindrome = expand_around_center(text, i, i+1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"Given an integer array `arr`, write a function to find all the elements in the array that appear more than once. Return the result as an array of these repeating elements in ascending order. Example arr = [4, 3, 2, 7, 8, 2, 3, 1] The elements that appear more than once are 2 and 3. So the function should return [2, 3]. Input Format The first line contains an integer `n`, the size of the array. The second line contains `n` space-separated integers, representing the elements of the array. Constraints 2leq nleq10^4 1leq text{arr[i]}leq10^4 Output Format Return an array of the repeating elements in ascending order. Sample Input 0 8 4 3 2 7 8 2 3 1 Sample Output 0 [2, 3] Sample Input 1 5 1 2 3 4 5 Sample Output 1 []","solution":"def find_repeating_elements(arr): Returns a list of elements that appear more than once in the array `arr` in ascending order. from collections import Counter counter = Counter(arr) repeating_elements = [num for num, count in counter.items() if count > 1] return sorted(repeating_elements) # Example usage example_array = [4, 3, 2, 7, 8, 2, 3, 1] print(find_repeating_elements(example_array)) # Output: [2, 3]"},{"question":"You are given an array consisting of n integers. You need to process q queries. In each query, you are given two integers l and r, and you need to find the length of the longest subarray within the range [l, r] (inclusive) that contains all unique elements. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100), denoting the number of integers in the array. The next line contains n space-separated integers a_{i} (1 ≤ a_{i} ≤ 1000), representing the elements of the array. The next line contains a single integer q (1 ≤ q ≤ 100), denoting the number of queries. Each of the next q lines contains two space-separated integers l and r (1 ≤ l ≤ r ≤ n), representing the range for the query. -----Output----- For each query, print the answer in a separate line. -----Examples----- Input 7 1 2 1 3 4 2 5 3 1 3 2 7 4 6 Output 2 4 3 Input 5 1 2 3 4 5 2 1 5 2 4 Output 5 3 -----Note----- Let\'s consider the first sample: The first query requires the length of the longest subarray with unique elements within the range [1, 3]. The subarray [2, 1] has length 2. The second query requires the length of the longest subarray with unique elements within the range [2, 7]. The subarray [3, 4, 2, 5] has length 4. The third query requires the length of the longest subarray with unique elements within the range [4, 6]. The subarray [3, 4, 2] or [4, 2, 5] both have the length 3.","solution":"def longest_unique_subarray_length(arr, queries): def max_unique_in_range(l, r): seen = set() max_len = 0 current_len = 0 for i in range(l, r + 1): if arr[i] in seen: max_len = max(max_len, current_len) seen = set() current_len = 0 seen.add(arr[i]) current_len += 1 return max(max_len, current_len) results = [] for l, r in queries: results.append(max_unique_in_range(l - 1, r - 1)) return results"},{"question":"You are given some widgets, and each widget can either be functional or faulty. You need to determine the minimum number of widgets you need to inspect to guarantee finding at least one functional widget. You are given t test cases, and for each test case, you receive the total number of widgets n and the number of functional widgets k. You have to output the minimum number of widgets you need to inspect in order to find at least one functional widget. -----Input----- The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains two integers n and k (1 le k le n le 10^9). -----Output----- For each test case, print the minimum number of widgets you need to inspect to be sure of finding at least one functional widget. -----Example----- Input 3 7 3 5 5 10 1 Output 5 1 10","solution":"def min_widgets_to_inspect(t, test_cases): results = [] for n, k in test_cases: results.append(n - k + 1) return results"},{"question":"Rahul is working on optimizing the space allocation in a concert venue. He has a task to determine the minimum number of rows required to seat all attendees, based on their seating preferences. Each attendee\'s preference is represented by a number indicating their preferred row number. Since the concert venue can accommodate up to K attendees in a single row without affecting their view, Rahul needs to organize the seating in a way that respects the preferences as closely as possible while minimizing the number of rows created. Write a function that takes the attendees\' seating preferences and the maximum number of attendees per row as inputs and returns the minimum number of rows needed to seat all attendees. Function Description Complete the function `minRows` in the editor below. It should return the minimum number of rows needed to seat the attendees. `minRows` has the following parameter(s): - `preferences`: an array of integers where each integer represents the preferred row number of an attendee. - `K`: an integer representing the maximum number of attendees that can be accommodated in a single row. Input Format - The first line contains an integer `n`, the number of attendees. - The second line contains `n` space-separated integers, `preferences[1], preferences[2], ..., preferences[n]`, representing the preferred row numbers of the attendees. - The third line contains an integer `K`. Constraints - 1 leq n leq 10^5 - 1 leq preferences[i] leq 10^4 where i in [1, n] - 1 leq K leq 10^3 Output Format Return the integer value representing the minimum number of rows needed to seat all attendees. Sample Input 10 1 2 1 2 3 1 2 3 4 4 3 Sample Output 4 Explanation - The first row can accommodate up to 3 attendees who prefer row 1. - The second row can accommodate up to 3 attendees who prefer row 2. - The third row can accommodate up to 3 attendees who prefer row 3. - The fourth row can accommodate the 2 remaining attendees who prefer row 4. Therefore, a total of 4 rows are required to seat all attendees respecting their preferences and the venue\'s constraints.","solution":"def minRows(preferences, K): from collections import Counter # Count occurrences of each preferred row number counter = Counter(preferences) # Calculate the minimum number of rows min_rows = 0 for count in counter.values(): min_rows += (count + K - 1) // K # Equivalent to math.ceil(count / K) return min_rows"},{"question":"Emily is organizing a charity event and decided to prepare gift bags. Each gift bag contains the same number of candies, but there are several different types of candies available. Emily wants to ensure that every gift bag has exactly one candy of each type and that she uses as many candies as possible without leaving any remaining. You need to determine the maximum number of gift bags that can be prepared using the available candies. Input Format There will be two lines of input: - The first line will contain an integer n, the number of different types of candies. - The second line will contain n space-separated integers, where the i-th integer represents the number of candies of the i-th type. Output Format Output a single integer, the maximum number of gift bags that can be prepared. Constraints 1. 1≤n≤1000 2. 0≤number of candies of each type≤10000 SAMPLE INPUT 3 6 3 9 SAMPLE OUTPUT 3 Explanation Given 3 types of candies with counts 6, 3, and 9 respectively, the maximum number of gift bags that can be prepared with exactly one candy of each type is 3. Any more gift bags would not have all types of candies in them.","solution":"def max_gift_bags(n, candies): Returns the maximum number of gift bags that can be prepared with the given candies. Each gift bag should have exactly one candy of each type. Parameters: n (int): number of different types of candies candies (list of int): list representing the number of each type of candy Returns: int: maximum number of gift bags return min(candies)"},{"question":"# Problem: Palindrome Check A **palindrome** is a string that reads the same backward as forward (ignoring spaces, case, and punctuation). **_Given_** a string *determine if it is a palindrome*. ___ # Notes * **_The string_** passed will be **_non-empty_**. * Consider only alphanumeric characters and ignore cases. * Remove any spaces and punctuation from the string. ___ # Input >> Output Examples ```python is_palindrome(\\"A man, a plan, a canal: Panama\\") ==> return True ``` Explanation: When we ignore cases, spaces, and punctuation, the string becomes \'amanaplanacanalpanama\', which reads the same backward as forward. ```python is_palindrome(\\"race a car\\") ==> return False ``` Explanation: When we ignore cases, spaces, and punctuation, the string becomes \'raceacar\', which does not read the same backward as forward. ```python is_palindrome(\\"No \'x\' in Nixon\\") ==> return True ``` Explanation: When we ignore cases, spaces, and punctuation, the string becomes \'noxinnixon\', which reads the same backward as forward. ```python is_palindrome(\\"Step on no pets\\") ==> return True ``` Explanation: When we ignore cases, spaces, and punctuation, the string becomes \'steponnopets\', which reads the same backward as forward.","solution":"def is_palindrome(s): Determines if a given string is a palindrome, ignoring spaces, case, and punctuation. :param s: String to check :return: True if the string is a palindrome, False otherwise import re # Remove all non-alphanumeric characters and convert to lower case cleaned_s = re.sub(r\'[^w]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"You are tasked with programming a simple banking management system. The system should keep track of customer accounts and their balances. You need to implement two key functionalities: deposit and withdrawal. # Requirements The system should maintain a list of customer accounts. Each account has a unique account number and a balance. The system should be capable of handling multiple deposit and withdrawal transactions for any account. # Input Format 1. The first line contains an integer `T`, the number of transactions. 2. The following `T` lines each contain a transaction in the format: - `D <account_number> <amount>` for a deposit - `W <account_number> <amount>` for a withdrawal If a withdrawal amount exceeds the current balance of the account, the transaction should be ignored. # Output Format After processing all the transactions, output the final balances of all accounts in ascending order of their account numbers. Each account balance should be printed on a new line in the format: ``` <account_number> <balance> ``` # Constraints - `1 ≤ T ≤ 1000` - `1 ≤ <account_number> ≤ 100000` - `1 ≤ <amount> ≤ 10000` # Example Input ``` 6 D 1001 5000 D 1002 3000 W 1001 2000 D 1001 1000 W 1002 1000 W 1003 500 ``` Output ``` 1001 4000 1002 2000 1003 0 ``` # Notes - Initially, all accounts have a balance of 0. - Ignore withdrawal transactions that attempt to withdraw an amount greater than the current balance of the specified account. - Ensure the output is sorted by account number. Design your solution to efficiently handle the operations within the provided constraints.","solution":"def process_transactions(transactions): Processes a list of banking transactions and returns the final balances of each account in ascending order of their account numbers. Parameters: transactions (List[str]): A list of transaction strings in the format \\"D <account_number> <amount>\\" or \\"W <account_number> <amount>\\" Returns: List[Tuple[int, int]]: A sorted list of tuples where each tuple contains an account number and its corresponding balance. accounts = {} for transaction in transactions: parts = transaction.split() action = parts[0] account_number = int(parts[1]) amount = int(parts[2]) if account_number not in accounts: accounts[account_number] = 0 if action == \'D\': accounts[account_number] += amount elif action == \'W\': if accounts[account_number] >= amount: accounts[account_number] -= amount sorted_accounts = sorted(accounts.items()) return sorted_accounts # Example input preparation def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) transactions = lines[1:T+1] return transactions # Example run to match with task\'s expected format def main(input_data): transactions = parse_input(input_data) results = process_transactions(transactions) return \\"n\\".join(f\\"{account} {balance}\\" for account, balance in results)"},{"question":"You are given a list of students\' grades, where each grade is represented as `[subject, student, grade]`. Your task is to create a summary report that shows the highest grade achieved by each student in each subject. Return the summary as a dictionary where each key is a student\'s name, and each value is another dictionary with the subjects as keys and the highest grades as values. For example, given the input: ```python grades = [ [\\"math\\", \\"Alice\\", 85], [\\"math\\", \\"Bob\\", 90], [\\"math\\", \\"Alice\\", 95], [\\"science\\", \\"Alice\\", 80], [\\"science\\", \\"Bob\\", 85], [\\"history\\", \\"Alice\\", 88], [\\"history\\", \\"Bob\\", 92] ] ``` The output should be: ```python { \\"Alice\\": {\\"math\\": 95, \\"science\\": 80, \\"history\\": 88}, \\"Bob\\": {\\"math\\": 90, \\"science\\": 85, \\"history\\": 92} } ``` Implement the function `summarize_grades(grades)` that processes the list and returns the summary dictionary as explained.","solution":"def summarize_grades(grades): Summarizes the highest grades achieved by each student in each subject. Parameters: grades (list): A list of lists where each inner list contains [subject, student, grade] Returns: dict: A dictionary where each key is a student\'s name, and each value is another dictionary with the subjects as keys and the highest grades as values. summary = {} for subject, student, grade in grades: if student not in summary: summary[student] = {} if subject not in summary[student] or grade > summary[student][subject]: summary[student][subject] = grade return summary"},{"question":"A town is planning to build new roads to connect its important locations. Each location is represented as a node and each road is an undirected edge with an associated cost of construction. The town needs to minimize the cost of building these roads while ensuring that every location can be reached from any other location. Your task is to determine the minimum cost required to construct these roads. You are given the number of locations `n` and a list of `edges`, where each edge is represented by `(u, v, cost)` indicating a road between locations `u` and `v` with construction cost `cost`. # Examples Example 1: Input: ``` n = 4 edges = [(1, 2, 3), (2, 3, 1), (3, 4, 2), (4, 1, 4)] ``` Output: ``` 6 ``` Explanation: The optimal way to connect all nodes (locations) with minimum cost is to use roads with costs 3, 1, and 2. Hence, the total minimum cost is 6. Example 2: Input: ``` n = 3 edges = [(1, 2, 5), (1, 3, 6)] ``` Output: ``` 11 ``` Explanation: There are only two edges, and we need both to connect all nodes. So, the total cost is 11. # Task Write a function `minCostToConnectLocations(n: int, edges: List[Tuple[int, int, int]]) -> int` that takes the number of locations `n` and the list of edges `edges` as input and returns the minimum cost required to connect all locations. # Requirements - **Expected Time Complexity:** O(E log E), where E is the number of edges. - **Expected Auxiliary Space:** O(E + V), where V is the number of vertices (locations). - `1 <= n <= 10^5` - `1 <= len(edges) <= 2 * 10^5` - `1 <= u, v <= n` - `1 <= cost <= 10^5`","solution":"def minCostToConnectLocations(n, edges): Computes the minimum cost to connect all locations using Kruskal\'s MST algorithm. :param n: int - the number of locations :param edges: List of tuples - (u, v, cost) represents a road between locations u and v with a cost :return: int - the minimum cost to connect all locations # Sort edges by ascending cost edges.sort(key=lambda x: x[2]) # Union-Find (Disjoint Set Union) helper functions parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 # Kruskal\'s algorithm to find the Minimum Spanning Tree (MST) cost mst_cost = 0 edges_used = 0 for u, v, cost in edges: if find(u) != find(v): union(u, v) mst_cost += cost edges_used += 1 # If we\'ve used n-1 edges, we can stop if edges_used == n - 1: break return mst_cost"},{"question":"You are monitoring a warehouse where different products are stored in stacks on shelves. Over time, products are added to or removed from the stacks. To keep track of inventory, you need to determine the state of the stacks after a sequence of operations. Each operation either adds or removes a product from a stack. If an attempt is made to remove a product from an empty stack, it should be ignored. -----Task----- Write a program to compute the final state of each stack after performing a series of operations. -----Input----- The first line contains two integers n and m (1 leq n leq 1000, 1 leq m leq 10000), where n is the number of stacks and m is the number of operations. The next m lines each describe an operation. An operation is represented by two integers t and s (1 leq t leq 2, 1 leq s leq n). If t=1, add a product to stack s. If t=2, remove a product from stack s. -----Output----- Output n integers, where the i-th integer represents the number of products in the i-th stack after performing all the operations. -----Examples----- Sample Input 1: 3 5 1 1 1 2 2 1 1 3 2 3 Sample Output 1: 0 1 0 Sample Input 2: 2 4 1 1 1 1 2 1 2 2 Sample Output 2: 1 0","solution":"def final_stacks_state(n, m, operations): Compute the final state of each stack after performing a series of operations. Args: n (int): number of stacks m (int): number of operations operations (list of tuples): list of operations, each represented by a tuple (t, s) Returns: list of int: final state of each stack stacks = [0] * n for operation in operations: t, s = operation if t == 1: stacks[s - 1] += 1 elif t == 2 and stacks[s - 1] > 0: stacks[s - 1] -= 1 return stacks # Example usage: # n = 3, m = 5 # operations = [(1, 1), (1, 2), (2, 1), (1, 3), (2, 3)] # print(final_stacks_state(n, m, operations)) # Output: [0, 1, 0]"},{"question":"A string is called a \\"balanced string\\" if there is an equal number of \'A\' and \'B\' characters in it. Given a string consisting of only \'A\' and \'B\' characters, you should identify whether the string is balanced. Design a program that checks for every test case whether the given string is a balanced string or not. ------ Input Format ------ - First line will contain N, number of test cases. Then the test cases follow. - Each test case contains a single string consisting of characters \'A\' and \'B\'. ------ Output Format ------ For each test case, print \\"YES\\" if the string is balanced, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ |s| ≤ 100 s contains only \'A\' and \'B\' characters. ------ Sample Input 1 ------ 4 ABAB AABB AAABBB AAAABB ------ Sample Output 1 ------ YES YES YES NO ------ Explanation 1 ------ Test Case 1: Given string s = texttt{ABAB}, the counts of \'A\' and \'B\' both are equal, thus the string is balanced and the output is texttt{YES}. Test Case 2: Given string s = texttt{AABB}, the counts of \'A\' and \'B\' both are equal, thus the string is balanced and the output is texttt{YES}. Test Case 3: Given string s = texttt{AAABBB}, the counts of \'A\' and \'B\' both are equal, thus the string is balanced and the output is texttt{YES}. Test Case 4: Given string s = texttt{AAAABB}, there are 4 \'A\' characters and 2 \'B\' characters, thus the string is not balanced and the output is texttt{NO}.","solution":"def is_balanced_string(s): Returns \\"YES\\" if the count of \'A\' is equal to the count of \'B\' in the string s, otherwise returns \\"NO\\". return \\"YES\\" if s.count(\'A\') == s.count(\'B\') else \\"NO\\" def check_balanced_strings(test_cases): Given a list of test case strings, returns a list of results for each test case by checking if they are balanced. return [is_balanced_string(case) for case in test_cases]"},{"question":"In many grid-based puzzle games, you have to navigate through a maze from a starting point to a target point. The challenge often involves finding the shortest path while avoiding obstacles. Let\'s create a simplified version of such a problem. Problem Statement: You are given a 2D grid representing a maze, where each cell in the grid is either a wall represented by `1` or a free space represented by `0`. You need to write a function called `shortestPath` that takes three arguments—the grid, the starting position, and the target position—and returns the length of the shortest path from the starting position to the target position, moving only in the cardinal directions (left, right, up, and down). If no such path exists, return `-1`. # Input: - `grid`: A 2D list of integers (0s and 1s) representing the maze. - `start`: A tuple of two integers `(x, y)` representing the starting position. - `end`: A tuple of two integers `(x, y)` representing the target position. # Output: - An integer representing the length of the shortest path from `start` to `end`, or `-1` if no path exists. # Constraints: - The maze will have at least one row and one column. - The start and end positions will always be within the grid boundaries. - Both start and end positions will be on free spaces (0s). # Example: ```python grid = [ [0, 0, 1, 0, 0], [0, 1, 0, 0, 1], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0], [1, 1, 0, 1, 0] ] start = (0, 0) end = (3, 4) print(shortestPath(grid, start, end)) # Output: 7 ``` In the example above, the shortest path follows these coordinates: `(0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) -> (3,4)`. # Notes: 1. You can only move up, down, left, or right at each step. 2. The maze will not be modified; you should treat it as read-only. 3. Avoid paths that walk through the walls.","solution":"from collections import deque def shortestPath(grid, start, end): rows, cols = len(grid), len(grid[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] def is_valid(x, y): return 0 <= x < rows and 0 <= y < cols and grid[x][y] == 0 queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are working as a warehouse manager at a large storage facility. The facility contains multiple blocks of storage units. Each block of storage units has a certain capacity, and each customer can rent one or more storage units across different blocks. Your task is to accommodate incoming customer requests such that the storage units across the blocks are optimally utilized. A customer request includes the number of storage units they need to rent and the preferred blocks where they would like to rent these units. If a customer\'s preferred blocks cannot fulfill their request, you can distribute the units across other blocks. However, you must ensure that all customers\' requests are met, and each block\'s capacity is not exceeded. Your goal is to determine if you can fulfill all customer requests given the storage capacities of each block and the customer preferences. -----Constraints----- - 1 leq B leq 100 (number of blocks) - 1 leq C leq 50 (number of customer requests) - 1 leq capacity_i leq 10^5 (capacity of the i-th block) - 1 leq units_j leq 10^4 (number of units requested by the j-th customer) - 1 leq P_{j,k} leq B (preferred blocks for the j-th customer) - Each customer has at least one preferred block. -----Input----- Input is given from Standard Input in the following format: B C capacity_1 capacity_2 ... capacity_B units_1 P_{1,1} P_{1,2} ... P_{1,K_1} units_2 P_{2,1} P_{2,2} ... P_{2,K_2} ... units_C P_{C,1} P_{C,2} ... P_{C,K_C} -----Output----- Print \\"YES\\" if all customer requests can be fulfilled. Otherwise, print \\"NO\\". -----Sample Input----- 3 3 10 15 12 5 1 2 7 2 3 8 1 3 2 -----Sample Output----- YES In this input example, the blocks and customer requests are as follows: - Block 1 has a capacity of 10 units - Block 2 has a capacity of 15 units - Block 3 has a capacity of 12 units Customer requests are: - Customer 1 requires 5 units and prefers blocks 1 or 2 - Customer 2 requires 7 units and prefers blocks 2 or 3 - Customer 3 requires 8 units and prefers blocks 1, 2, or 3 One possible way to fulfill the requests is: - Allocate 5 units from Block 1 to Customer 1 (Block 1 remaining capacity: 10 - 5 = 5 units) - Allocate 7 units from Block 2 to Customer 2 (Block 2 remaining capacity: 15 - 7 = 8 units) - Allocate 5 units from Block 3 to Customer 3 (Block 3 remaining capacity: 12 - 5 = 7 units) - Allocate the remaining 3 units from Block 1 to Customer 3 (Block 1 remaining capacity: 5 - 3 = 2 units) Thus, all requests can be met, and the output is \\"YES\\".","solution":"def can_fulfill_requests(B, C, capacities, customer_requests): # Convert capacities list to a dict to easily manage capacity changes block_capacity = {i+1: capacities[i] for i in range(B)} customer_requests.sort(key=lambda x: len(x[1])) # Sort by the number of preferred blocks for units_needed, preferred_blocks in customer_requests: allocated = False for block in preferred_blocks: if block_capacity[block] >= units_needed: block_capacity[block] -= units_needed allocated = True break if not allocated: return \\"NO\\" return \\"YES\\" # Function to parse the input as described in the problem statement def parse_input(input_str): input_lines = input_str.strip().split(\'n\') B, C = map(int, input_lines[0].split()) capacities = list(map(int, input_lines[1].split())) customer_requests = [] for i in range(2, 2 + C): parts = list(map(int, input_lines[i].split())) units_needed = parts[0] preferred_blocks = parts[1:] customer_requests.append((units_needed, preferred_blocks)) return B, C, capacities, customer_requests"},{"question":"Implement a function `minimal_square_sum` that finds the minimum number of perfect square numbers (e.g., 1, 4, 9, 16, ...) whose sum equals a given number `N`. Input: The first line contains an integer T, denoting the number of test cases. Each test case consists of one line containing an integer N. Output: For each test case, print the minimum number of perfect square numbers that sum to `N`. If `N` is 0, the output should be 0. Constraints: 1 ≤ T ≤ 10 If T is not within this range, print \\"Invalid Test\\" (without quotes). 0 ≤ N ≤ 10000 If N is outside this range, print \\"Invalid Input\\" (without quotes). Example: Input: 3 12 0 27 Output: 3 0 3 Explanation: - For the input 12, the output is 3 because 12 = 4 + 4 + 4. - For the input 0, the output is 0 because 0 itself requires no numbers. - For the input 27, the output is 3 because 27 = 9 + 9 + 9.","solution":"def minimal_square_sum(T, test_cases): Find the minimum number of perfect square numbers which sum to N for each test case. Parameters: T (int): The number of test cases. test_cases (list of int): A list of integers denoting N for each test case. Returns: list of str: Minimum number of perfect square numbers for each N or error messages if constraints are not met. if T < 1 or T > 10: return [\\"Invalid Test\\"] def min_squares(n): if n == 0: return 0 dp = [float(\'inf\')] * (n + 1) dp[0] = 0 for i in range(1, n + 1): j = 1 while j * j <= i: dp[i] = min(dp[i], dp[i - j * j] + 1) j += 1 return dp[n] results = [] for n in test_cases: if n < 0 or n > 10000: results.append(\\"Invalid Input\\") else: results.append(str(min_squares(n))) return results"},{"question":"Alex loves collecting stamps. His hobby is not only to collect but also to organize them in a specific way. Stamps are represented by integers, and he wants to find the longest sequence of consecutive same stamps in his collection. Your task is to help Alex determine the maximum length of a sequence where all the stamps are identical. INPUT: First line contains the total number of test cases T. For each test case, first line denotes the total number of stamps N and the second line contains N space-separated integers denoting the stamps. OUTPUT: For each test case, print the result in a single line. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100000 1 ≤ Stamp value ≤ 1000 SAMPLE INPUT 2 8 2 2 1 1 1 3 3 3 4 5 5 5 5 SAMPLE OUTPUT 3 4","solution":"def longest_sequence_of_same_stamps(test_cases): results = [] for case in test_cases: N = case[0] stamps = case[1] if N == 0: results.append(0) continue max_length = 1 current_length = 1 for i in range(1, N): if stamps[i] == stamps[i-1]: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 1 results.append(max_length) return results"},{"question":"You are given an array of integers representing the heights of buildings along a straight line. You have a ladder and certain number of bricks to climb over buildings in order to move from the leftmost building to the rightmost one. You can use the bricks to cover any gap in height, but you can only use the ladder for the largest gap you need to overcome. Determine the maximum building index (0-based) that you can reach using the given ladder and bricks. -----Input----- Input starts with two integers N (1 ≤ N ≤ 10^5), the number of buildings, and L (0 ≤ L ≤ N-1), the number of ladders. This is followed by a line of N integers h_1, h_2, ..., h_N (1 ≤ h_i ≤ 10^6), the heights of the buildings, and another integer B (0 ≤ B ≤ 10^9), the total number of bricks available. -----Output----- Print the maximum building index you can reach by using the given ladder and bricks. -----Examples----- Input 5 1 4 2 7 6 9 5 Output 4 Input 5 0 4 2 7 6 9 5 Output 3 -----Note----- In the first example, you can use the ladder between buildings 2 and 3 (heights 7 and 6 respectively) and use the bricks for the rest of the gaps: 2 to 7 and 6 to 9. The total number of bricks used is 1 + 3 + 1 = 5.","solution":"import heapq def max_building_index(n, l, heights, b): # Min-heap to keep the smallest differences at the top min_heap = [] total_bricks = 0 for i in range(n - 1): height_diff = heights[i + 1] - heights[i] # Only consider gaps where next building is taller if height_diff > 0: heapq.heappush(min_heap, height_diff) # If there are more gap entries than ladders, use bricks for the smallest if len(min_heap) > l: total_bricks += heapq.heappop(min_heap) # If we run out of bricks before covering one of the gaps, stop if total_bricks > b: return i return n - 1"},{"question":"Write a function that takes a list of strings containing valid and invalid mathematical expressions involving integers, addition (+), and subtraction (-). The goal is to evaluate only the valid expressions and return a list with the results of those evaluations. A valid expression must: 1. Start and end with an integer. 2. Contain only integer literals and the operators (+) and (-) with proper spacing. 3. For simplicity, you may assume integers in the expressions are non-negative and fit within the standard Python integer range. For example, the string \\"3 + 5 - 2\\" is a valid expression and evaluates to 6, while \\"3 + -5\\" and \\"5 - + 5\\" are invalid. If an expression is invalid, its result should not be included in the output list. # Input Format - The first line contains an integer, n, indicating the number of expressions in the list. - The next n lines each contain one mathematical expression as a string. # Constraints - 1 leq n leq 100 - All integers in the expression are non-negative and fit within the standard Python integer range. # Output Format Return a list of integers where each integer is the result of evaluating a valid mathematical expression from the input list. # Sample Input 3 3 + 5 - 2 3 + -5 10 + 15 - 5 # Sample Output [6, 20] # Explanation The first expression \\"3 + 5 - 2\\" is valid and evaluates to 6. The second expression \\"3 + -5\\" is invalid due to improper use of operators. The third expression \\"10 + 15 - 5\\" is valid and evaluates to 20.","solution":"def is_valid_expression(exp): Checks if the expression is valid according to the rules specified. tokens = exp.strip().split() if len(tokens) < 3: return False # Check if first and last tokens are integers. if not tokens[0].isdigit() or not tokens[-1].isdigit(): return False # Check if the expression alternates correctly between integers and operators. for i in range(1, len(tokens) - 1, 2): if tokens[i] not in {\'+\', \'-\'} or not tokens[i - 1].isdigit() or not tokens[i + 1].isdigit(): return False return True def evaluate_expressions(expressions): Evaluates valid mathematical expressions from the input list and returns the results. results = [] for exp in expressions: if is_valid_expression(exp): results.append(eval(exp)) return results"},{"question":"Given a string `s` consisting of lowercase English letters and a string `t consisting` of lowercase English letters, determine the minimum number of operations required to convert `s` into `t`. In each operation, you can either: - Insert a character, - Delete a character, or - Replace a character. ------ Input Format ------ - The first line contains the string `s`. - The second line contains the string `t`. ------ Output Format ------ - Print a single integer representing the minimum number of operations required. ------ Constraints ------ - 1 ≤ |s|, |t| ≤ 1000 - `s` and `t` consist of lowercase English letters only. ------ Sample Input 1 ------ abc yabd ------ Sample Output 1 ------ 2 ------ Explanation 1 ------ To convert \\"abc\\" to \\"yabd\\", we can: - Replace \'a\' with \'y\' (1 operation) - Insert \'d\' at the end (1 operation) Thus, 2 operations are required. ------ Sample Input 2 ------ intention execution ------ Sample Output 2 ------ 5 ------ Explanation 2 ------ To convert \\"intention\\" to \\"execution\\", we can: - Replace \'i\' with \'e\' (1 operation) - Replace \'n\' with \'x\' (1 operation) - Replace \'t\' with \'c\' (1 operation) - Replace \'i\' with \'u\' (1 operation) - Insert \'e\' at the beginning (1 operation) Thus, 5 operations are required.","solution":"def min_distance(s, t): Computes the minimum number of operations required to convert string s into string t. Operations include insert, delete, and replace a character. m, n = len(s), len(t) # Create a dp array where dp[i][j] represents the min operations to convert s[:i] to t[:j] dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the dp array for i in range(m + 1): dp[i][0] = i # Deleting all characters from s to match an empty t for j in range(n + 1): dp[0][j] = j # Inserting all characters of t to match an empty s # Fill the dp array for i in range(1, m + 1): for j in range(1, n + 1): if s[i-1] == t[j-1]: dp[i][j] = dp[i-1][j-1] # Characters match, no new operation else: dp[i][j] = 1 + min(dp[i-1][j], # Deletion dp[i][j-1], # Insertion dp[i-1][j-1]) # Replacement return dp[m][n]"},{"question":"You are given a list of integers representing the prices of a stock on different days. You are allowed to buy and sell the stock only once. Write a program to find the maximum profit you can achieve. In other words, find the maximum difference between two prices such that the selling price is higher than the buying price, but the selling day must be after the buying day. Input: The input consists of multiple test cases. The first line contains an integer T, the number of test cases. Each of the next T lines contains an integer N, the number of days, followed by N space-separated integers representing the stock prices on those days. Output: For each test case, print a single line containing the maximum profit. If no profit can be achieved, print 0. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 10^5 1 ≤ price[i] ≤ 10^5 SAMPLE INPUT 2 7 100 180 260 310 40 535 695 5 190 180 170 160 150 SAMPLE OUTPUT 655 0","solution":"def max_profit(prices): This function takes a list of stock prices and returns the maximum profit that can be achieved by buying and selling stock on different days. if len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit def process_input(T, cases): Processes multiple test cases for the given input specifications. T : int : number of test cases cases : list of tuples : each tuple contains an integer N followed by N list of stock prices results = [] for case in cases: N, prices = case[0], case[1] results.append(max_profit(prices)) return results"},{"question":"Alice is given a list of N integers and a list of Q queries. Each query consists of two integers L and R and asks for the product of all integers in the sublist from index L to index R (inclusive). Since the product can be very large, return the result modulo (10^9+7). Can you help Alice efficiently answer all the queries? Input Format - The first line contains an integer N (1 leq N leq 2 times 10^5), the number of integers in the list. - The second line contains N space-separated integers a_1, a_2, ..., a_N where 1 leq a[i] leq 10^9. - The third line contains an integer Q (1 leq Q leq 2 times 10^5), the number of queries. - The next Q lines each contain two integers L and R (1 leq L leq R leq N), the bounds of the sublist for the query. Output Format - For each query, output a single integer, the product of the sublist elements from index L to index R (inclusive), modulo (10^9+7). Constraints - 1 leq N leq 2 times 10^5 - 1 leq Q leq 2 times 10^5 - 1 leq L leq R leq N - 1 leq a[i] leq 10^9 Sample Input 5 1 2 3 4 5 3 1 3 2 4 1 5 Sample Output 6 24 120","solution":"MOD = 10**9 + 7 def compute_prefix_products(arr): prefix_products = [1] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_products[i] = (prefix_products[i-1] * arr[i-1]) % MOD return prefix_products def range_product(L, R, prefix_products): return (prefix_products[R] * pow(prefix_products[L-1], MOD-2, MOD)) % MOD def process_queries(N, arr, Q, queries): prefix_products = compute_prefix_products(arr) results = [] for L, R in queries: results.append(range_product(L, R, prefix_products)) return results"},{"question":"John has a habit of collecting marbles. He places the marbles in glass jars, each containing an identical number of marbles. He wants to distribute the marbles into these jars evenly. As the number of marbles he gets from his friends keeps changing, and he sometimes gets a lot, he wants a quick way to check if his marble collection can be evenly distributed among a given number of jars. Whenever he receives new marbles, he notes down the total count and the number of jars he has. Write a program to help John determine whether he can evenly distribute his marbles among the jars or not. If it\'s possible, print \\"YES\\" otherwise print \\"NO\\". Input Format The first line contains an integer T, the number of test cases. Each of the next T lines contains two integers, M (the number of marbles) and J (the number of jars). Output Format For each test case, output \\"YES\\" if John can distribute the marbles evenly among the jars, otherwise output \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ M ≤ 10^9 1 ≤ J ≤ 10^9 Sample Input 3 10 2 15 4 100 5 Sample Output YES NO YES Explanation For the first test case, 10 marbles can be evenly distributed into 2 jars (each jar containing 5 marbles). For the second test case, 15 marbles cannot be evenly distributed into 4 jars. For the third test case, 100 marbles can be evenly distributed into 5 jars (each jar containing 20 marbles).","solution":"def can_distribute_marbles_evenly(t, test_cases): Determines if marbles can be evenly distributed among jars. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains two integers M (number of marbles) and J (number of jars). Returns: list of str: List containing \\"YES\\" or \\"NO\\" for each test case. results = [] for m, j in test_cases: if m % j == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are tasked with finding the shortest path between two points in a grid. The grid consists of cells which are either walkable or blocked. You can move vertically or horizontally between adjacent walkable cells. Diagonal moves are not allowed. Your goal is to determine the length of the shortest path from a given starting point to a target point. If no such path exists, return `-1`. Complete the function `shortestPathGrid` which takes in the following parameters: - `grid` (a 2D list of 0s and 1s, where 0 represents a walkable cell and 1 represents a blocked cell), - `start` (a tuple of two integers representing the starting coordinates), - `end` (a tuple of two integers representing the target coordinates). Return the length of the shortest path from `start` to `end` in the grid. # Input Format The input consists of: - An integer `n`, the number of rows in the grid. - An integer `m`, the number of columns in the grid. - Next, `n` lines each containing `m` integers (`0` or `1`), representing the grid. - Two space-separated integers representing the starting coordinates `x1` and `y1`. - Two space-separated integers representing the target coordinates `x2` and `y2`. # Constraints - 1 leq n, m leq 100 - 0 leq x1, y1, x2, y2 < n, m - The start and end coordinates are guaranteed to be walkable cells (i.e., `grid[x1][y1] == 0` and `grid[x2][y2] == 0`). # Output Format Print a single integer which is the length of the shortest path from `start` to `end`. If no such path exists, print `-1`. # Example Input ``` 4 4 0 0 1 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 3 3 ``` Output ``` 6 ``` Explanation Starting at (0, 0), you can follow the path: (0, 0) -> (1, 0) -> (1, 1) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3). This path has a total of 6 steps.","solution":"from collections import deque def shortestPathGrid(grid, start, end): Find the shortest path between two points in a grid. Parameters: - grid (list of list of int): The grid, where 0 represents walkable and 1 represents blocked. - start (tuple of int, int): The starting point coordinates. - end (tuple of int, int): The ending point coordinates. Returns: - int: The length of the shortest path or -1 if no such path exists. def is_valid(x, y): return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"You are given a string S consisting of lowercase English letters. You need to determine the length of the longest prefix of S that is also a suffix. The prefix and suffix should not overlap. A prefix of S is a substring that starts at the beginning of S, while a suffix is a substring that ends at the end of S. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - Each of the next T lines contains a string S. ------ Output Format ------ For each test case, output a single integer - the length of the longest prefix of S that is also a suffix. ----- Constraints ----- 1 ≤ T ≤ 10^{4} 1 ≤ |S| ≤ 10^{5} The sum of the lengths of strings over all test cases does not exceed 10^{6}. ----- Sample Input 1 ------ 3 abcdabc aaaaa abcab ----- Sample Output 1 ------ 3 4 2 ----- Explanation 1 ------ Test Case 1: The longest prefix that is also a suffix is \\"abc\\" which has length 3. Test Case 2: The longest prefix that is also a suffix is \\"aaaa\\" which has length 4. Test Case 3: The longest prefix that is also a suffix is \\"ab\\" which has length 2.","solution":"def longest_prefix_suffix(S): Function to determine the length of the longest prefix of string `S` that is also a suffix and does not overlap. if not S: return 0 n = len(S) # Creating LPS (Longest Prefix Suffix) array for pattern S lps = [0] * n # length of the previous longest prefix suffix length = 0 # the loop calculates lps[i] for i from 1 to n-1 i = 1 while i < n: if S[i] == S[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length-1] else: lps[i] = 0 i += 1 return lps[-1] def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(longest_prefix_suffix(S)) return results"},{"question":"You are organizing a coding challenge event and have to prepare multiple-choice questions. The questions and their choices are stored in a dictionary, where keys are question IDs and values are another dictionary, containing the question text and a list of answers. Some of these questions and answers have errors that need correction. Given a dictionary with potential errors in the answers, return a new dictionary with only the valid questions and correct answers. The rules for validation and correction are as follows: - A question is valid if it has exactly 4 answer choices. - Each choice should be a string between 1 and 50 characters long. - If a question has any invalid choices, remove it entirely from the dictionary. Your task is to write a function `validate_questions(questions_dict)` that takes the dictionary of questions and returns a new dictionary with only valid questions and answers. Example Input: ```python questions_dict = { \'Q1\': {\'question\': \'What is the capital of France?\', \'choices\': [\'Paris\', \'Lyon\', \'Marseille\', \'Nice\']}, \'Q2\': {\'question\': \'What is 2 + 2?\', \'choices\': [\'4\', \'Four\', \'\']}, \'Q3\': {\'question\': \'What is the boiling point of water?\', \'choices\': [\'100°C\', \'Two Hundred Degrees\', \'Too High\', \'\']}, \'Q4\': {\'question\': \'Which planet is known as the Red Planet?\', \'choices\': [\'Mars\', \'Jupiter\', \'Saturn\', \'Venus\']}, } ``` Expected Output: ```python { \'Q1\': {\'question\': \'What is the capital of France?\', \'choices\': [\'Paris\', \'Lyon\', \'Marseille\', \'Nice\']}, \'Q4\': {\'question\': \'Which planet is known as the Red Planet?\', \'choices\': [\'Mars\', \'Jupiter\', \'Saturn\', \'Venus\']} } ``` Note: Questions \'Q2\' and \'Q3\' are removed because they either have less than 4 answer choices or contain choices that are not valid according to the given rules. Function signature: `def validate_questions(questions_dict: dict) -> dict:`","solution":"def validate_questions(questions_dict): valid_questions = {} for qid, data in questions_dict.items(): choices = data[\'choices\'] if len(choices) != 4: continue if all(isinstance(choice, str) and 1 <= len(choice) <= 50 for choice in choices): valid_questions[qid] = data return valid_questions"},{"question":"A company has developed a new sorting algorithm, and they want you to test its efficiency by implementing it. Given an array of n integers, sort the array in non-decreasing order using the company\'s new algorithm called \\"Exclusive Sort\\". Exclusive Sort works based on the following rules: 1. Find all the unique elements in the array. 2. Sort the unique elements. 3. Replace each occurrence of a unique element in the original array with its position in the sorted list of unique elements (1-based index). For example, if the array contains the elements 10, 20, 10, 30, 20, the unique elements are [10, 20, 30]. Sorting them gives [10, 20, 30]. We then replace the elements in the original array with their respective positions, resulting in [1, 2, 1, 3, 2]. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers ai (1 ≤ ai ≤ 109) — the elements of the array. Output Print the transformed array as per the Exclusive Sort algorithm. Examples Input 5 10 20 10 30 20 Output 1 2 1 3 2 Input 4 5 5 5 5 Output 1 1 1 1 Input 6 1 2 3 4 5 6 Output 1 2 3 4 5 6","solution":"def exclusive_sort(arr): # Step 1: Extracting unique elements and sorting them unique_sorted_elements = sorted(set(arr)) # Step 2: Creating a mapping from element to its sorted position position_map = {element: idx + 1 for idx, element in enumerate(unique_sorted_elements)} # Step 3: Replace each element in the original array with its position in the sorted list return [position_map[element] for element in arr]"},{"question":"problem You are given a grid representing a garden. Each cell in the grid contains either a plant or an empty space. A gardener can water the plants along the rows and columns. The gardener has a special watering can that allows them to water all plants in a single row or a single column with one use. The goal is to determine the minimum number of uses of the watering can required to water all the plants in the garden. The input consists of a grid of size N x M, where each cell is either \'.\' representing an empty space or \'P\' representing a plant. Write a program to find the minimum number of uses of the watering can required to water all plants in the garden. Example Input 4 4 P..P .P.. ..P. P..P Output 4","solution":"def min_watering_uses(n, m, garden): Returns the minimum number of uses of the watering can required to water all the plants in the garden. Parameters: n (int): The number of rows in the garden. m (int): The number of columns in the garden. garden (list of list of str): The garden grid, where each element is either \'.\' or \'P\'. row_has_plant = [any(cell == \'P\' for cell in row) for row in garden] col_has_plant = [any(garden[row][col] == \'P\' for row in range(n)) for col in range(m)] rows_with_plants = sum(row_has_plant) cols_with_plants = sum(col_has_plant) return min(rows_with_plants, cols_with_plants)"},{"question":"You are given a sequence of commands to be executed on a grid. The grid is initially empty. The commands consist of: * \'L x y\' - Place a light bulb at position (x, y). * \'T x y\' - Toggle the light bulb at position (x, y) (change it from on to off or vice versa). * \'Q x y\' - Query whether the light bulb at position (x, y) is on or off. Your task is to process these commands and determine the state of the light bulb immediately after each query command. Assume the grid can be infinitely large and initially all positions are off. Input The first line contains an integer n, the number of commands. Each of the next n lines contains a command in one of the formats described above. Output For each query command in the input, output \\"ON\\" if the light bulb at the queried position is on, and \\"OFF\\" otherwise. Examples Input 6 L 1 2 Q 1 2 T 1 2 Q 1 2 L 3 4 Q 3 4 Output ON OFF ON Explanation - The first command places a light bulb at position (1, 2). - The second command queries the status of the light bulb at position (1, 2), which is \\"ON\\". - The third command toggles the light bulb at position (1, 2) to \\"OFF\\". - The fourth command queries the status of the light bulb at position (1, 2), which is \\"OFF\\". - The fifth command places a light bulb at position (3, 4). - The sixth command queries the status of the light bulb at position (3, 4), which is \\"ON\\".","solution":"def process_commands(commands): Processes a list of commands on a grid and returns the state of light bulbs for each query command. Parameters: commands (List[str]): List of command strings in the format \'L x y\', \'T x y\', \'Q x y\' Returns: List[str]: List of results for each query in the order they appeared, each one being \\"ON\\" or \\"OFF\\" grid = {} results = [] for command in commands: parts = command.split() cmd = parts[0] x, y = int(parts[1]), int(parts[2]) key = (x, y) if cmd == \'L\': grid[key] = True elif cmd == \'T\': if key in grid and grid[key] == True: grid[key] = False else: grid[key] = True elif cmd == \'Q\': if key in grid and grid[key] == True: results.append(\\"ON\\") else: results.append(\\"OFF\\") return results"},{"question":"Given an array of integers, you are to determine the length of the longest subarray where the sum of elements is less than or equal to a given value S. This question will test your knowledge of array manipulation and sliding window techniques. Let\'s denote the array as arr and its length as n. Your task is to find the maximum length of a subarray such that the sum of the subarray is ≤ S. Input: The first line contains an integer T, the number of test cases. Each test case contains two lines: - The first line has two integers, n and S. - The second line has n space-separated integers, representing the array arr. Output: For each test case, output a single integer - the length of the longest subarray with sum ≤ S. If no such subarray exists, output 0. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 1 ≤ arr[i] ≤ 10^4 1 ≤ S ≤ 10^9 SAMPLE INPUT 2 5 10 1 2 3 4 5 4 8 4 2 2 2 SAMPLE OUTPUT 4 3 Explanation Case 1: The longest subarray where the sum ≤ 10 is [1, 2, 3, 4] which has a length of 4. Case 2: The longest subarray where the sum ≤ 8 is [2, 2, 2] which has a length of 3. Note that the subarray [4, 2] also has a sum ≤ 8 but its length is not maximal.","solution":"def longest_subarray_with_sum_at_most_s(arr, n, S): max_len = 0 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > S: current_sum -= arr[start] start += 1 max_len = max(max_len, end - start + 1) return max_len def process_test_cases(test_cases): results = [] for case in test_cases: n, S = case[\'params\'] arr = case[\'array\'] results.append(longest_subarray_with_sum_at_most_s(arr, n, S)) return results"},{"question":"In a grid of size `m x n` consisting of characters, word search is a challenge where a word can be constructed from the left-right, right-left, down-up, up-down, and diagonal directions. We are given a grid of characters and a word. The task is to determine if the word exists in the grid. A word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally, vertically, or diagonally neighboring. The same letter cell may not be used multiple times. -----Input----- - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 200) denoting the number of rows and columns in the grid, respectively. - The next `m` lines contain `n` characters each representing the grid. - The last line contains the word to be searched in the grid. The length of the word will be between 1 and 1000 characters. -----Output----- Print \\"YES\\" if the word exists in the grid in any of the specified directions, otherwise print \\"NO\\". -----Examples----- Input 3 4 A B C E S F C S A D E E ABCCED Output YES Input 3 4 A B C E S F C S A D E E SEE Output YES Input 3 4 A B C E S F C S A D E E ABCB Output NO -----Note----- In the first test case, the word \\"ABCCED\\" exists in the grid following the left-right direction starting from the top left. In the second test case, the word \\"SEE\\" exists in the grid following the down-up direction starting from the bottom right. In the third test case, the word \\"ABCB\\" does not exist in the grid, as we cannot reuse the cell containing \'B\'.","solution":"def exist(board, word): def dfs(board, word, i, j, m, n, index): if index == len(word): return True if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != word[index]: return False # temporarily mark the board cell as visited to avoid revisiting temp, board[i][j] = board[i][j], \'#\' # check all 8 directions directions = [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (-1, -1), (1, -1), (-1, 1)] for dir in directions: if dfs(board, word, i + dir[0], j + dir[1], m, n, index + 1): return True # restore the original value at board cell board[i][j] = temp return False m, n = len(board), len(board[0]) for i in range(m): for j in range(n): if dfs(board, word, i, j, m, n, 0): return True return False def word_search(m, n, grid, word): if exist(grid, word): return \\"YES\\" return \\"NO\\""}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},F={class:"card-container"},Y={key:0,class:"empty-state"},C=["disabled"],P={key:0},R={key:1};function M(s,e,l,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",F,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",Y,' No results found for "'+h(a.searchQuery)+'". ',1)):u("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,C)):u("",!0)])}const D=d(A,[["render",M],["__scopeId","data-v-bc27631d"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/14.md","filePath":"quotes/14.md"}'),L={name:"quotes/14.md"},G=Object.assign(L,{setup(s){return(e,l)=>(n(),i("div",null,[x(D)]))}});export{B as __pageData,G as default};
