import{_ as h,o as n,c as r,a as t,m as c,t as d,C as g,M as _,U as y,f as u,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},E={class:"review-title"},I={class:"review-content"};function A(i,e,l,m,s,a){return n(),r("div",q,[t("div",T,[t("div",E,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",I,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(d(l.poem.solution),1)])])])}const C=h(k,[["render",A],["__scopeId","data-v-9402503b"]]),F=JSON.parse('[{"question":"Code: app/routers/trading.py ```python app/routers/trading.py from typing import List from fastapi import APIRouter, Depends, HTTPException from sqlalchemy.orm import Session from app.db.session import get_db from app.models.trading import TradeCreate, TradeRead, Trade from app.services.trading import TradingService router = APIRouter() @router.post(\\"/trades\\", response_model=TradeRead) def create_trade(trade: TradeCreate, db: Session = Depends(get_db)): Create a new trade using the provided trade details. trading_service = TradingService(db) created_trade = trading_service.create_trade(trade) if not created_trade: raise HTTPException(status_code=400, detail=\\"Trade could not be created\\") return created_trade @router.get(\\"/trades/{trade_id}\\", response_model=TradeRead) def get_trade(trade_id: int, db: Session = Depends(get_db)): Retrieve a trade by its ID. trading_service = TradingService(db) trade = trading_service.get_trade(trade_id) if not trade: raise HTTPException(status_code=404, detail=\\"Trade not found\\") return trade @router.get(\\"/trades\\", response_model=List[TradeRead]) def get_trades(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)): Retrieve a list of trades with pagination. trading_service = TradingService(db) trades = trading_service.get_trades(skip=skip, limit=limit) return trades ``` Code: app/models/trading.py ```python app/models/trading.py from typing import Optional from pydantic import BaseModel from datetime import datetime class TradeCreate(BaseModel): symbol: str price: float quantity: int strategy: str class TradeRead(TradeCreate): id: int timestamp: datetime class Config: orm_mode = True from sqlalchemy import Column, Integer, String, Float, DateTime, func from app.db.base import Base class Trade(Base): __tablename__ = \\"trades\\" id = Column(Integer, primary_key=True, index=True) symbol = Column(String, index=True) price = Column(Float, nullable=False) quantity = Column(Integer, nullable=False) strategy = Column(String, nullable=False) timestamp = Column(DateTime, server_default=func.now()) ``` Code: app/services/trading.py ```python app/services/trading.py from typing import List, Optional from sqlalchemy.orm import Session from app.models.trading import TradeCreate, TradeRead, Trade class TradingService: def __init__(self, db: Session): self.db = db def create_trade(self, trade_create: TradeCreate) -> Optional[TradeRead]: new_trade = Trade(**trade_create.dict()) self.db.add(new_trade) self.db.commit() self.db.refresh(new_trade) return TradeRead.from_orm(new_trade) def get_trade(self, trade_id: int) -> Optional[TradeRead]: trade = self.db.query(Trade).filter(Trade.id == trade_id).first() if trade: return TradeRead.from_orm(trade) return None def get_trades(self, skip: int = 0, limit: int = 10) -> List[TradeRead]: trades = self.db.query(Trade).offset(skip).limit(limit).all() return [TradeRead.from_orm(trade) for trade in trades] ``` Code: app/tests/test_trading.py ```python app/tests/test_trading.py from fastapi.testclient import TestClient from app.main import app from app.db.session import SessionLocal from app.models.trading import TradeCreate client = TestClient(app) def test_create_trade(): new_trade = { \\"symbol\\": \\"AAPL\\", \\"price\\": 150.0, \\"quantity\\": 10, \\"strategy\\": \\"order_imbalance\\" } response = client.post(\\"/trades\\", json=new_trade) assert response.status_code == 200 data = response.json() assert data[\\"symbol\\"] == new_trade[\\"symbol\\"] assert data[\\"price\\"] == new_trade[\\"price\\"] assert data[\\"quantity\\"] == new_trade[\\"quantity\\"] assert data[\\"strategy\\"] == new_trade[\\"strategy\\"] def test_get_trade(): response = client.get(\\"/trades/1\\") assert response.status_code == 200 data = response.json() assert data[\\"id\\"] == 1 def test_get_trades(): response = client.get(\\"/trades?skip=0&limit=10\\") assert response.status_code == 200 data = response.json() assert isinstance(data, list) assert len(data) <= 10 ```","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Write a Python function that takes a list of strings and returns a dictionary where the keys are the lengths of the strings, and the values are lists of strings of that length. Ensure the function handles various edge cases, such as an empty input list or strings of varying lengths. Additionally, develop unit tests to verify that your function handles typical scenarios as well as edge conditions.","solution":"def group_strings_by_length(strings): Groups strings by their lengths. :param strings: List of strings to be grouped :return: Dictionary with string lengths as keys and lists of strings as values result = {} for s in strings: length = len(s) if length not in result: result[length] = [] result[length].append(s) return result"},{"question":"Create a class named \'GraphTraversal\' that implements both Breadth-First Search (BFS) and Depth-First Search (DFS) for an undirected graph. Your class should have the following methods: 1. `addEdge(u, v)`: Adds an undirected edge between nodes `u` and `v`. 2. `bfs(start)`: Performs a BFS starting from the node `start` and returns the list of nodes in the order they were visited. 3. `dfs(start)`: Performs a DFS starting from the node `start` and returns the list of nodes in the order they were visited. Additionally, ensure your class handles the following scenarios: - The graph can have disconnected components. - If the `start` node provided is not present in the graph, raise an appropriate exception. - Implement internal error handling to deal with cases such as adding an edge between a node and itself or adding multiple identical edges. Finally, include a method `showGraph` to display the adjacency list of the graph. Implement unit tests using the \'unittest\' framework to verify the correctness of your BFS and DFS implementations, and test your graph creation for various edge cases.","solution":"from collections import deque, defaultdict class GraphTraversal: def __init__(self): self.graph = defaultdict(list) def addEdge(self, u, v): if u == v: raise ValueError(\\"Cannot add an edge between a node and itself\\") if v not in self.graph[u]: self.graph[u].append(v) self.graph[v].append(u) def bfs(self, start): if start not in self.graph: raise ValueError(f\\"Start node {start} is not present in the graph\\") visited = set() queue = deque([start]) result = [] while queue: node = queue.popleft() if node not in visited: visited.add(node) result.append(node) for neighbour in self.graph[node]: if neighbour not in visited: queue.append(neighbour) return result def dfs(self, start): if start not in self.graph: raise ValueError(f\\"Start node {start} is not present in the graph\\") visited = set() stack = [start] result = [] while stack: node = stack.pop() if node not in visited: visited.add(node) result.append(node) for neighbour in reversed(self.graph[node]): if neighbour not in visited: stack.append(neighbour) return result def showGraph(self): return dict(self.graph)"},{"question":"Develop a function that takes a binary tree and calculates the sum of all left leaves. A left leaf is defined as a node that is a leaf (it has no children) and is the left child of its parent. You need to design a BinaryTree class with an insert method to create the tree, and then a method to calculate the sum of left leaves. Consider edge cases such as a tree with only one node or no left leaves. ```python class Node: def __init__(self, value): self.value = value self.left = None self.right = None class BinaryTree: def __init__(self): self.root = None def insert(self, value): if self.root is None: self.root = Node(value) else: self._insert_recursive(self.root, value) def _insert_recursive(self, current, value): if value < current.value: if current.left is None: current.left = Node(value) else: self._insert_recursive(current.left, value) else: if current.right is None: current.right = Node(value) else: self._insert_recursive(current.right, value) def sum_of_left_leaves(self): def _sum_of_left_leaves(node, is_left): if node is None: return 0 if is_left and node.left is None and node.right is None: return node.value return _sum_of_left_leaves(node.left, True) + _sum_of_left_leaves(node.right, False) return _sum_of_left_leaves(self.root, False) # Example usage: # Construct the binary tree bt = BinaryTree() bt.insert(7) bt.insert(5) bt.insert(10) bt.insert(3) bt.insert(6) bt.insert(8) bt.insert(12) # Calculate the sum of left leaves print(bt.sum_of_left_leaves()) # Output should be the sum of values of left leaves nodes ```","solution":"class Node: def __init__(self, value): self.value = value self.left = None self.right = None class BinaryTree: def __init__(self): self.root = None def insert(self, value): if self.root is None: self.root = Node(value) else: self._insert_recursive(self.root, value) def _insert_recursive(self, current, value): if value < current.value: if current.left is None: current.left = Node(value) else: self._insert_recursive(current.left, value) else: if current.right is None: current.right = Node(value) else: self._insert_recursive(current.right, value) def sum_of_left_leaves(self): def _sum_of_left_leaves(node, is_left): if node is None: return 0 if is_left and node.left is None and node.right is None: return node.value return _sum_of_left_leaves(node.left, True) + _sum_of_left_leaves(node.right, False) return _sum_of_left_leaves(self.root, False)"},{"question":"Write a Python function `longest_common_subsequence(X, Y)` that takes two strings `X` and `Y` as input and returns the length of their longest common subsequence (LCS). The longest common subsequence is the longest sequence that can be derived from both strings by deleting some or no characters without changing the order of the remaining characters. # Function Signature ```python def longest_common_subsequence(X: str, Y: str) -> int: ``` # Input - `X`: A string of length `m` (1 ≤ m ≤ 1000). - `Y`: A string of length `n` (1 ≤ n ≤ 1000). # Output - An integer representing the length of the longest common subsequence. # Example ```python assert longest_common_subsequence(\\"AGGTAB\\", \\"GXTXAYB\\") == 4 assert longest_common_subsequence(\\"ABCDAF\\", \\"ACBCF\\") == 4 ``` # Notes - Use Dynamic Programming to solve the problem efficiently. - Strings `X` and `Y` will only contain uppercase English letters.","solution":"def longest_common_subsequence(X: str, Y: str) -> int: m, n = len(X), len(Y) # Create a 2D array to store the lengths of the longest common subsequence dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from the bottom up for i in range(1, m + 1): for j in range(1, n + 1): if X[i - 1] == Y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of the longest common subsequence will be in dp[m][n] return dp[m][n]"},{"question":"You are given a list of dictionaries, where each dictionary represents an item in an inventory. Each dictionary contains the following keys: \'name\' (string, the name of the item), \'category\' (string, indicating the category of the item), \'quantity\' (integer, the amount of the item in stock), and \'price\' (float, the price of a single item). Your task is to create a function that performs the following operations: 1. Filter out items that have a quantity of zero or less or a price of zero or less. 2. Sort the remaining items by their category in ascending order. Within each category, sort the items by quantity in descending order. If two items have the same quantity within the same category, sort them by price in ascending order. To increase the difficulty, you are also given a piece of erroneous code that tries to accomplish this task but fails. Your task is to identify the errors in the code, correct them, and then write a function that correctly performs the required operations. Erroneous Code: ```python def filter_and_sort_inventory(inventory): filtered_inventory = [] for item in inventory: if item[\'quantity\'] > 0 or item[\'price\'] > 0: filtered_inventory.append(item) filtered_inventory.sort(key=lambda x: (x[\'category\'], x[\'quantity\'], -x[\'price\'])) return filtered_inventory ``` Additionally, your function should handle cases where the input list is empty or contains invalid data (e.g., non-numeric values for quantity or price). In such cases, your function should raise an appropriate exception.","solution":"def filter_and_sort_inventory(inventory): # Validate input if not all(isinstance(item, dict) for item in inventory): raise ValueError(\\"All elements in the inventory must be dictionaries\\") for item in inventory: if not (\'name\' in item and \'category\' in item and \'quantity\' in item and \'price\' in item): raise ValueError(\\"Each dictionary must contain \'name\', \'category\', \'quantity\', and \'price\' keys\\") if not (isinstance(item[\'quantity\'], int) and isinstance(item[\'price\'], (int, float))): raise ValueError(\\"\'quantity\' must be an integer and \'price\' must be an integer or float\\") # Filter out items with quantity <= 0 or price <= 0 filtered_inventory = [item for item in inventory if item[\'quantity\'] > 0 and item[\'price\'] > 0] # Sort by category (ascending), then by quantity (descending), then by price (ascending) sorted_inventory = sorted( filtered_inventory, key=lambda x: (x[\'category\'], -x[\'quantity\'], x[\'price\']) ) return sorted_inventory"},{"question":"You are given an array of integers representing heights of buildings, and your task is to compute how many buildings have an unobstructed view of the sunset. A building has an unobstructed view if no other building to its right has a height greater than or equal to it. Write a function `sunsetViews(buildings: List[int]) -> int` to return the number of buildings with an unobstructed view of the sunset. For example: Example: Input: `[3, 7, 8, 3, 6, 1]` Output: `3` Explanation: The buildings with heights 8, 6, and 1 have unobstructed views.","solution":"from typing import List def sunsetViews(buildings: List[int]) -> int: Returns the number of buildings with an unobstructed view of the sunset. A building has an unobstructed view if no other building to its right has a height greater than or equal to it. n = len(buildings) if n == 0: return 0 count = 0 max_height = 0 for i in range(n-1, -1, -1): if buildings[i] > max_height: count += 1 max_height = buildings[i] return count"},{"question":"Write a function named `reverse_words` that takes a string as input and returns the string with the words in reverse order. The function should handle multiple spaces between words and strip any leading or trailing whitespace from the input. Example: Input: \\" Hello world this is an example \\" Output: \\"example an is this world Hello\\" Note: The words should be separated by a single space in the output.","solution":"def reverse_words(s): Returns the input string with words in reverse order. The function handles multiple spaces and strips leading/trailing whitespace. # Split the input string by whitespace and filter out empty strings words = [word for word in s.split() if word] # Join the words in reverse order with a single space return \' \'.join(words[::-1])"},{"question":"Write a Python function that takes in a string and returns the first non-repeating character from the input string. If there is no non-repeating character, the function should return `None`. Your solution should be efficient in terms of time complexity.","solution":"def first_non_repeating_char(input_string): Returns the first non-repeating character in the input string. If no such character exists, returns None. # Dictionary to store count of each character char_counts = {} # First pass: count characters for char in input_string: if char in char_counts: char_counts[char] += 1 else: char_counts[char] = 1 # Second pass: find first non-repeating character for char in input_string: if char_counts[char] == 1: return char # If no non-repeating character is found return None"},{"question":"Write a function that takes a nested dictionary as input and returns a flat dictionary where the keys are the paths to the original keys in the nested dictionary. Assume keys in the dictionary are strings and paths are represented with dot notation. For example, given the nested dictionary: ```python nested_dict = { \'a\': { \'b\': 1, \'c\': { \'d\': 2, \'e\': 3 } }, \'f\': 4 } ``` The function should return: ```python { \'a.b\': 1, \'a.c.d\': 2, \'a.c.e\': 3, \'f\': 4 } ``` Your implementation should handle arbitrarily nested dictionaries.","solution":"def flatten_dict(nested_dict, parent_key=\'\', sep=\'.\'): Flatten a nested dictionary. Arguments: nested_dict -- the nested dictionary to flatten. parent_key -- the base key which is used by recursive calls. Default is an empty string. sep -- the separator between keys. Default is dot (\'.\'). Returns: A flattened dictionary where keys are the path to the keys in the nested dictionary. items = [] for key, value in nested_dict.items(): new_key = f\\"{parent_key}{sep}{key}\\" if parent_key else key if isinstance(value, dict): items.extend(flatten_dict(value, new_key, sep=sep).items()) else: items.append((new_key, value)) return dict(items)"},{"question":"Design an algorithm in Python that accepts a list of integers and returns the indices of all the local maxima within the list. A local maximum is defined as an element that is strictly greater than its immediate neighbors. If the list contains less than three elements, your algorithm should return an empty list.","solution":"def find_local_maxima(nums): Accepts a list of integers and returns the indices of all the local maxima. A local maximum is defined as an element that is strictly greater than its immediate neighbors. if len(nums) < 3: return [] local_maxima_indices = [] for i in range(1, len(nums) - 1): if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]: local_maxima_indices.append(i) return local_maxima_indices"},{"question":"Design a program which amalgamates a list of intervals, discerning intricacies within these intervals thoroughly. Given intervals: ```python def merge_intervals(intervals: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Provided a list of intervals where each interval is denoted by a tuple (start, end), the necessity is to merge all the intervals that have an overlap into a single interval. The function must return the condensed list of intervals. Examples: >>> merge_intervals([(1, 3), (2, 6), (8, 10), (15, 18)]) [(1, 6), (8, 10), (15, 18)] >>> merge_intervals([(1, 4), (4, 5)]) [(1, 5)] # Implement the algorithm to merge the intervals # from typing import List, Tuple def merge_intervals(intervals: List[Tuple[int, int]]) -> List[Tuple[int, int]]: if not intervals: return [] # Sort intervals by starting time intervals.sort(key=lambda x: x[0]) merged_intervals = [intervals[0]] for current in intervals[1:]: last = merged_intervals[-1] if current[0] <= last[1]: # Overlapping intervals, merge them merged_intervals[-1] = (last[0], max(last[1], current[1])) else: merged_intervals.append(current) return merged_intervals","solution":"from typing import List, Tuple def merge_intervals(intervals: List[Tuple[int, int]]) -> List[Tuple[int, int]]: if not intervals: return [] # Sort intervals by starting time intervals.sort(key=lambda x: x[0]) merged_intervals = [intervals[0]] for current in intervals[1:]: last = merged_intervals[-1] if current[0] <= last[1]: # Overlapping intervals, merge them merged_intervals[-1] = (last[0], max(last[1], current[1])) else: merged_intervals.append(current) return merged_intervals"},{"question":"Write a Python function that accepts a string containing a mathematical expression (only integers and operators +, -, *, /) and returns the evaluated result. The function should handle the basic operator precedence and parentheses. Ensure the function validates the input string and handles any potential errors gracefully.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing integers and operators (+, -, *, /). Supports parentheses and operator precedence. try: # Use eval to evaluate the expression after validation. # Note: eval is generally unsafe if the input is not controlled. # Here we assume trusted input after validation. result = eval(expression) except ZeroDivisionError: return \\"Error: Division by zero\\" except Exception: return \\"Error: Invalid expression\\" return result"},{"question":"Write a Python program to manipulate a matrix and perform certain operations. The program should create two functions: The first function should take a 2D matrix and a target number as input. This function should check if the target number is present in the matrix and if found, return the indices (row, column) of its first occurrence. If the target number is not found in the matrix, it should return (-1, -1). The second function should take the same 2D matrix and an integer n as input and should rotate the matrix 90 degrees clockwise n times. The function should return the rotated matrix. You need to ensure that the function handles any value of n correctly, including negative values or values greater than 4. For example: Given the matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]] and target=5, the first function should return (1, 1). If given the same matrix and n=1, the second function should return [[7, 4, 1], [8, 5, 2], [9, 6, 3]]. If given matrix [[1, 2], [3, 4]] and n=5, the second function should return [[3, 1], [4, 2]].","solution":"def find_element(matrix, target): Returns the indices (row, column) of the first occurrence of the target in the matrix. If the target is not found, returns (-1, -1). for i, row in enumerate(matrix): for j, element in enumerate(row): if element == target: return (i, j) return (-1, -1) def rotate_matrix(matrix, n): Rotates the matrix 90 degrees clockwise n times. Returns the rotated matrix. def rotate_90_clockwise(mat): return [list(row) for row in zip(*mat[::-1])] # Normalize n to be within the range [0, 3] n = n % 4 rotated_matrix = matrix for _ in range(n): rotated_matrix = rotate_90_clockwise(rotated_matrix) return rotated_matrix"},{"question":"Determine whether a given string contains valid pairs of brackets. A pair of brackets is valid if every opening bracket \\"[\\" has a corresponding closing bracket \\"]\\", and they are correctly nested. Function Signature: `def is_valid_bracket_sequence(s: str) -> bool` Parameters: - `s` (string): The input string consisting only of characters \\"[\\" and \\"]\\". Return: - `bool`: Return `True` if the sequence of brackets is valid, `False` otherwise. Example: ```python assert is_valid_bracket_sequence(\\"[[]]\\") == True assert is_valid_bracket_sequence(\\"[]][[]\\") == False assert is_valid_bracket_sequence(\\"[[][]]\\") == True assert is_valid_bracket_sequence(\\"[[[]]]]\\") == False ```","solution":"def is_valid_bracket_sequence(s: str) -> bool: Determines if the given string of brackets is valid. A string of brackets is considered valid if: - Every opening bracket has a corresponding closing bracket. - Brackets are correctly nested. Parameters: s (str): The input string consisting only of \\"[\\" and \\"]\\". Returns: bool: True if the sequence of brackets is valid, False otherwise. stack = [] for char in s: if char == \\"[\\": stack.append(char) elif char == \\"]\\": if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Rewrite the following Python function to improve its performance and readability. The function takes a list of integers and returns a new list containing only the prime numbers from the original list. def get_primes(numbers): primes = [] for number in numbers: is_prime = True if number > 1: for i in range(2, number): if number % i == 0: is_prime = False break if is_prime: primes.append(number) return primes","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def get_primes(numbers): Returns a list of prime numbers from the input list. return [number for number in numbers if is_prime(number)]"},{"question":"Create a Python function that reads a .txt file containing paragraphs of text, processes the content, and outputs a list of unique words sorted by frequency of occurrence in descending order. The function should: 1. Open and read the .txt file line-by-line. 2. Normalize the text by converting all characters to lowercase. 3. Remove punctuation and special characters. 4. Split the text into individual words. 5. Count the frequency of each word. 6. Output a list of tuples, where each tuple contains a word and its frequency, sorted by frequency in descending order. 7. Handle potential errors or exceptions (such as file not found, read permissions, etc.). <filename> Note: Consider using regular expressions for text cleaning and handle common English contractions (e.g., converting \\"don\'t\\" to \\"do not\\").","solution":"import os import re from collections import Counter def read_and_process_file(filename): Reads a .txt file, processes the content, and outputs a list of unique words sorted by frequency of occurrence in descending order. try: with open(filename, \'r\') as file: text = file.read() # Normalize text: convert to lowercase text = text.lower() # Remove punctuation and special characters using regular expression text = re.sub(r\'[^a-z0-9s]\', \'\', text) # Split text into individual words words = text.split() # Count the frequency of each word word_counts = Counter(words) # Generate a list of tuples sorted by frequency in descending order sorted_word_counts = word_counts.most_common() return sorted_word_counts except FileNotFoundError: return \\"File not found.\\" except PermissionError: return \\"Permission denied.\\" except Exception as e: return str(e)"},{"question":"You are tasked with developing a data processing module in Python that reads a CSV file containing customer information, processes the data, and then writes the results to a new CSV file. The original CSV file includes columns \\"CustomerID\\", \\"Name\\", \\"Age\\", \\"Country\\", and \\"PurchaseAmount\\". For each customer, you need to apply a 10% discount to the \\"PurchaseAmount\\" if the customer is aged 60 or above. Provide a step-by-step implementation demonstrating how to achieve this using Python\'s built-in libraries, ensuring that the program handles potential errors gracefully, such as missing fields or incorrect data types in the CSV file.","solution":"import csv def process_customer_data(input_file, output_file): Reads customer information from input_file, processes it by applying a 10% discount for customers aged 60 or above, and writes the results to output_file. try: with open(input_file, mode=\'r\') as infile: reader = csv.DictReader(infile) fieldnames = reader.fieldnames if \\"CustomerID\\" not in fieldnames or \\"Name\\" not in fieldnames or \\"Age\\" not in fieldnames or \\"Country\\" not in fieldnames or \\"PurchaseAmount\\" not in fieldnames: raise ValueError(\\"Input CSV must contain CustomerID, Name, Age, Country, and PurchaseAmount fields\\") customers = [] for row in reader: try: row[\'Age\'] = int(row[\'Age\']) row[\'PurchaseAmount\'] = float(row[\'PurchaseAmount\']) except ValueError: raise ValueError(\\"Age must be an integer and PurchaseAmount must be a float\\") if row[\'Age\'] >= 60: row[\'PurchaseAmount\'] *= 0.9 # apply 10% discount customers.append(row) with open(output_file, mode=\'w\', newline=\'\') as outfile: writer = csv.DictWriter(outfile, fieldnames=fieldnames) writer.writeheader() writer.writerows(customers) except FileNotFoundError: print(f\\"Error: The file {input_file} could not be found.\\") except ValueError as ve: print(f\\"Error: {ve}\\") except Exception as e: print(f\\"An unexpected error occurred: {e}\\")"},{"question":"Create a function that processes a list of dictionaries representing students and their grades. The function should calculate the average grade for each student and return a new list of dictionaries with each student\'s name and their average grade. Additionally, handle the case where a student has no grades by assigning them an average grade of 0. Implement the function in Python. Example input: ```python students = [ {\\"name\\": \\"Alice\\", \\"grades\\": [90, 85, 92]}, {\\"name\\": \\"Bob\\", \\"grades\\": [75, 80]}, {\\"name\\": \\"Charlie\\", \\"grades\\": []} ] ``` Expected output: ```python [ {\\"name\\": \\"Alice\\", \\"average_grade\\": 89.0}, {\\"name\\": \\"Bob\\", \\"average_grade\\": 77.5}, {\\"name\\": \\"Charlie\\", \\"average_grade\\": 0.0} ] ``` Function signature: ```python def calculate_average_grades(students: List[Dict[str, Any]]) -> List[Dict[str, float]]: pass ```","solution":"from typing import List, Dict, Any def calculate_average_grades(students: List[Dict[str, Any]]) -> List[Dict[str, float]]: Calculate the average grade for each student. Parameters: students (List[Dict[str, Any]]): List of dictionaries each containing \'name\' and \'grades\' Returns: List[Dict[str, float]]: List of dictionaries each containing \'name\' and \'average_grade\' result = [] for student in students: name = student[\\"name\\"] grades = student[\\"grades\\"] average_grade = sum(grades) / len(grades) if grades else 0.0 result.append({\\"name\\": name, \\"average_grade\\": average_grade}) return result"},{"question":"Fix the issues in the given function so that it finds and returns the maximum value from the supplied list. Given list: [4, 8, 15, 16, 23, 42] ```python def find_max_val(lst): max_val = lst[0] for i in lst: if i < max_val: max_val = i return max_val lst = [4, 8, 15, 16, 23, 42] print(find_max_val(lst)) ``` Expected output: 42","solution":"def find_max_val(lst): Returns the maximum value from the list lst. max_val = lst[0] # Initialize max_val with the first element of the list for i in lst: if i > max_val: # Update max_val if current element i is greater max_val = i return max_val # Example usage lst = [4, 8, 15, 16, 23, 42] print(find_max_val(lst)) # Expected output: 42"},{"question":"Write a function that simulates a simple file storage system. The function receives a list of storage operations and a maximum storage size. Each operation adds, deletes, or reads a file. The function should keep track of the current storage usage, check for errors robustly, disallow invalid operations (such as deleting or reading a non-existent file, or exceeding the maximum storage size), and return an error message along with the operation\'s index if any error occurs. Additionally, the function should implement a rollback feature to undo the last successful operation. ```python from typing import List, Tuple, Union def file_storage_system(max_storage_size: int, operations: List[Tuple[str, str, Union[int, None]]]) -> Union[bool, str, List[int]]: This function simulates a simple file storage system and handles a list of operations. It returns True if all operations are successfully executed. If any operation is invalid, it returns an error message and the index(s) of the invalid operation(s). The function should also have the ability to rollback the last successful operation if required. The input list contains tuples in the format (Operation_type, File_name, File_size), where File_size is None for \'Delete\' and \'Read\' operations. The system should ensure that storage does not exceed max_storage_size and that operations do not reference files that don\'t exist. Examples: >>> file_storage_system(100, [(\'Add\', \'file1.txt\', 10), (\'Add\', \'file2.txt\', 20), (\'Delete\', \'file1.txt\', None)]) >>> file_storage_system(50, [(\'Add\', \'file1.txt\', 10), (\'Add\', \'file1.txt\', 60), (\'Add\', \'file2.txt\', 20)]) >>> file_storage_system(50, [(\'Add\', \'file1.txt\', 20), (\'Add\', \'file2.txt\', 20), (\'Read\', \'file3.txt\', None)]) # Your implementation here ```","solution":"from typing import List, Tuple, Union def file_storage_system(max_storage_size: int, operations: List[Tuple[str, str, Union[int, None]]]) -> Union[bool, str, List[int]]: A function to simulate a simple file storage system. It processes a list of operations: adding, deleting, and reading files. current_storage = {} total_storage = 0 successful_operations = [] for i, (op, filename, filesize) in enumerate(operations): if op == \'Add\': if filename in current_storage: return f\\"Error: File \'{filename}\' already exists\\", i if total_storage + filesize > max_storage_size: return f\\"Error: Exceeds maximum storage size\\", i current_storage[filename] = filesize total_storage += filesize successful_operations.append((op, filename, filesize)) elif op == \'Delete\': if filename not in current_storage: return f\\"Error: File \'{filename}\' does not exist\\", i total_storage -= current_storage.pop(filename) successful_operations.append((op, filename, filesize)) elif op == \'Read\': if filename not in current_storage: return f\\"Error: File \'{filename}\' does not exist\\", i successful_operations.append((op, filename, filesize)) else: return f\\"Error: Invalid operation \'{op}\'\\", i # Rollback functionality can be triggered on an error, but it\'s not mentioned how to trigger it in this task. # We assume latest successful operation should be considered as rollback checkpoint in case of external trigger return True"},{"question":"Develop a Python function that simulates a deck of cards and allows for typical card operations. The deck should be a standard 52-card deck of four suits (hearts, diamonds, clubs, spades) and 13 ranks (2-10, jack, queen, king, ace). The function should enable the following actions: 1. Shuffle the deck. 2. Deal a specific number of cards to a player. 3. Reset the deck to its original state (unshuffled and full 52 cards). 4. Check the number of cards remaining in the deck. 5. Convert a card representation into a human-readable string format (e.g., \\"2 of Hearts\\"). Design the code to handle multiple players, and include validation to prevent dealing more cards than are available in the deck.","solution":"import random class CardDeck: suits = [\'Hearts\', \'Diamonds\', \'Clubs\', \'Spades\'] ranks = [\'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'Jack\', \'Queen\', \'King\', \'Ace\'] def __init__(self): self.original_deck = [(rank, suit) for suit in CardDeck.suits for rank in CardDeck.ranks] self.deck = self.original_deck[:] random.shuffle(self.deck) def shuffle_deck(self): random.shuffle(self.deck) def deal_cards(self, num_cards): if num_cards > len(self.deck): raise ValueError(\\"Not enough cards in the deck to deal\\") dealt_cards = self.deck[:num_cards] self.deck = self.deck[num_cards:] return dealt_cards def reset_deck(self): self.deck = self.original_deck[:] random.shuffle(self.deck) def remaining_cards(self): return len(self.deck) @staticmethod def card_to_string(card): rank, suit = card return f\\"{rank} of {suit}\\""},{"question":"Design a function named `findPairsWithSum` that accepts an array of integers and a target sum as its parameters. This function should return an array of unique pairs of numbers from the input array that add up to the given target sum. Each pair must be represented as a tuple, and the pairs should be in the form `(smaller, larger)`, where smaller and larger are the two numbers from the array. Ensure that no duplicate pairs are included in the result. **Function Signature:** ```python def findPairsWithSum(arr: List[int], target: int) -> List[Tuple[int, int]]: pass ``` **Examples:** ```python # Example 1: # Input: arr = [1, 2, 3, 4, 5], target = 5 # Output: [(1, 4), (2, 3)] # Example 2: # Input: arr = [0, -1, 2, -3, 1], target = -2 # Output: [(0, -2), (-1, -1)] # Example 3: # Input: arr = [1, 1, 1, 1], target = 2 # Output: [(1, 1)] ``` **Constraints:** - All elements of the array should be integers. - The input array can be empty; in that case, return an empty array.","solution":"from typing import List, Tuple def findPairsWithSum(arr: List[int], target: int) -> List[Tuple[int, int]]: seen = set() pairs = set() for num in arr: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return list(pairs)"},{"question":"Create a function that determines the most frequently occurring word in a given string. If there are multiple words with the same highest frequency, return the one that appears first in the string. The function should handle case sensitivity, punctuation, and multiple spaces. It should also handle empty strings by returning an appropriate message. Example cases to test: 1. Input: \\"This is a test. This test is only a test.\\" – The function should return \\"test\\". 2. Input: \\"Hello, hello, hello!!! How low?\\" – The function should return \\"hello\\". 3. Input: \\"\\" – The function should return \\"The string is empty\\". 4. Input: \\"Unique words in this string.\\" – The function should return \\"Unique\\". Ensure to include error handling for inputs that are not strings by returning a message \\"Invalid input; please provide a string.\\"","solution":"import re from collections import Counter def most_frequent_word(s): Returns the most frequently occurring word in the string s. If there are multiple words with the same highest frequency, returns the one that appears first in the string. Handles case sensitivity, punctuation, and multiple spaces. In case of empty string, returns \\"The string is empty\\". In case of invalid input, returns \\"Invalid input; please provide a string.\\" if not isinstance(s, str): return \\"Invalid input; please provide a string.\\" if len(s.strip()) == 0: return \\"The string is empty\\" # Convert to lowercase to handle case sensitivity s = s.lower() # Remove punctuation using regex words = re.findall(r\'bw+b\', s) if not words: return \\"The string is empty\\" word_counts = Counter(words) most_common_word, max_count = None, 0 for word in words: if word_counts[word] > max_count: most_common_word = word max_count = word_counts[word] return most_common_word"},{"question":"Design an intermediate-level programming task. The task requires the creation of a function that finds and returns the shortest path in a grid from a start point to an end point using the Breadth-First Search (BFS) algorithm. The grid is represented as a 2D array consisting of 0s (walkable path) and 1s (obstacle). The function must account for all possible directions one can move from a given position (up, down, left, right). Provide the code format for the following function: def shortest_path_bfs(grid, start, end): \'\'\' Taking a 2D grid of 0s and 1s as input, along with the start and end points, this function returns the length of the shortest path from the start point to the end point using the Breadth-First Search (BFS) algorithm. The start and end points are given as tuples of coordinates (row, col). If the path does not exist, return -1. Examples: shortest_path_bfs([[0, 1, 0, 0], [0, 1, 0, 1], [0, 0, 0, 1]], (0, 0), (2, 2)) == 4 shortest_path_bfs([[0, 1], [1, 0]], (0, 0), (1, 1)) == -1 shortest_path_bfs([[0, 0], [0, 0]], (0, 0), (1, 1)) == 2 shortest_path_bfs([[0]], (0, 0), (0, 0)) == 0 \'\'\' # Insert your BFS-based shortest path finding logic here.","solution":"from collections import deque def shortest_path_bfs(grid, start, end): Taking a 2D grid of 0s and 1s as input, along with the start and end points, this function returns the length of the shortest path from the start point to the end point using the Breadth-First Search (BFS) algorithm. The start and end points are given as tuples of coordinates (row, col). If the path does not exist, return -1. Parameters: grid (list of list of int): 2D grid of 0s and 1s. start (tuple of int): Starting point coordinates (row, col). end (tuple of int): Ending point coordinates (row, col). Returns: int: Length of the shortest path from start to end, or -1 if no path exists. if not grid or not grid[0] or grid[start[0]][start[1]] == 1 or grid[end[0]][end[1]] == 1: return -1 rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add(start) while queue: row, col, distance = queue.popleft() if (row, col) == end: return distance for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols and (new_row, new_col) not in visited and grid[new_row][new_col] == 0: queue.append((new_row, new_col, distance + 1)) visited.add((new_row, new_col)) return -1"},{"question":"Implement a function in Python that takes a list of stock prices (each price is a float and represents the stock price at the end of a specific day) and returns a tuple containing the best days to buy and sell the stock for maximum profit. The function should be efficient and consider time complexities suitable for large inputs. If no profit can be made, the function should return a tuple (None, None). **Constraints:** - The input list can contain at least one price value. - All prices are positive float values. **Example:** ``` Input: [7.5, 1.2, 5.3, 3.8, 6.1, 4.0] Output: (1, 4) # Buy on day 1 (price 1.2), sell on day 4 (price 6.1) Input: [7.5, 6.4, 4.3, 3.2] Output: (None, None) # No profit can be made ``` **Function Signature:** ```python def max_profit_days(prices: list) -> tuple: pass ```","solution":"def max_profit_days(prices): Given a list of stock prices, return a tuple of the best days (indices) to buy and sell the stock for maximum profit. If no profit can be made, return (None, None). if len(prices) < 2: return (None, None) min_price_index = 0 max_profit = 0 buy_day = None sell_day = None for i in range(1, len(prices)): if prices[i] < prices[min_price_index]: min_price_index = i current_profit = prices[i] - prices[min_price_index] if current_profit > max_profit: max_profit = current_profit buy_day = min_price_index sell_day = i if max_profit == 0: return (None, None) return (buy_day, sell_day)"},{"question":"Given an array of integers, write a function that finds the length of the longest contiguous subarray with an equal number of 0s and 1s. You need to implement an efficient solution that can handle large inputs. Here is the function signature: ```python def findMaxLength(nums: List[int]) -> int: ``` # Explanation - You are provided with an input list `nums` consisting of only 0s and 1s. - Your task is to identify the maximum length of a subarray where the count of 0s is equal to the count of 1s. - Your solution should optimize the performance to handle larger datasets effectively. # Example ```python # Input: [0,1,0,0,1,1] # Output: 6 # Explanation: The longest subarray with equal numbers of 0s and 1s is the entire array [0,1,0,0,1,1]. # Input: [0,1,1,0,1,1,1,0] # Output: 4 # Explanation: The longest subarray with equal numbers of 0s and 1s is [0,1,1,0]. ``` # Constraints - The input list `nums` will have a length between 1 and 10^5. - Each element in `nums` will be either 0 or 1. # Hints - Consider using a hashmap (or dictionary) to track prefixes and corresponding indices. - Traverse the list while maintaining a running count of the difference between the number of 1s and 0s encountered so far. - If the same difference appears again, it implies a subarray with equal 0s and 1s exists between these indices. Implement your solution below:","solution":"def findMaxLength(nums): Finds the length of the longest contiguous subarray with an equal number of 0s and 1s. count = 0 max_length = 0 count_index_map = {0: -1} for i, num in enumerate(nums): count += 1 if num == 1 else -1 if count in count_index_map: max_length = max(max_length, i - count_index_map[count]) else: count_index_map[count] = i return max_length"},{"question":"Write a Python function that counts the number of distinct elements in a list that appear more than once. Your function should take a single list as input and return an integer. For example, given the list [1, 2, 2, 3, 4, 4, 4, 5], the function should return 2, as the elements 2 and 4 both appear more than once.","solution":"def count_distinct_elements_with_duplicates(lst): Counts the number of distinct elements in the list that appear more than once. Parameters: lst (list): A list of elements. Returns: int: The number of distinct elements that appear more than once. from collections import Counter element_counts = Counter(lst) return sum(1 for count in element_counts.values() if count > 1)"},{"question":"Write a Python function `find_duplicates` that takes a list of integers as input and returns a new list containing only the elements that appear more than once in the input list. The order of elements in the returned list should be the same as their first occurrence in the input list. Example: ```python def find_duplicates(nums): # Your code here # Sample Input nums = [1, 2, 3, 2, 3, 4, 1] # Expected Output # [1, 2, 3] ```","solution":"def find_duplicates(nums): Returns a list of elements that appear more than once in the input list. The order of elements in the returned list is the same as their first occurrence in the input list. seen = set() duplicates = set() result = [] for num in nums: if num in seen: duplicates.add(num) else: seen.add(num) for num in nums: if num in duplicates and num not in result: result.append(num) return result"},{"question":"Write a function that takes a list of integers and returns a new list that contains only the even numbers from the original list, each multiplied by 2. Make sure your code handles an empty list input appropriately. Example: ``` Input: [1, 2, 3, 4, 5] Output: [4, 8] Input: [] Output: [] ```","solution":"def filter_and_double_even_numbers(lst): Returns a new list containing only the even numbers from the original list, each multiplied by 2. :param lst: List of integers :return: A new list with only the even numbers, each multiplied by 2 return [x * 2 for x in lst if x % 2 == 0]"},{"question":"Write a Python function that takes a string containing a sentence and returns a dictionary where the keys are the words in the sentence and the values are the number of times each word appears. The function should ignore punctuation and be case-insensitive. For example, given the input string \\"Hello, hello! How are you? You look well.\\", the output should be: ``` { \\"hello\\": 2, \\"how\\": 1, \\"are\\": 1, \\"you\\": 2, \\"look\\": 1, \\"well\\": 1 } ```","solution":"import re from collections import defaultdict def word_count(sentence): Takes a string containing a sentence and returns a dictionary where the keys are the words in the sentence and the values are the number of times each word appears. Ignores punctuation and is case-insensitive. # Replace punctuation with spaces and convert to lowercase sentence_cleaned = re.sub(r\'[^ws]\', \' \', sentence).lower() words = sentence_cleaned.split() word_counts = defaultdict(int) for word in words: word_counts[word] += 1 return dict(word_counts)"},{"question":"Write a function `find_largest_island` that takes a 2D grid of 1s (land) and 0s (water) and returns the size of the largest island in the grid. An island is formed by connecting adjacent lands horizontally or vertically. Assume all four edges of the grid are surrounded by water. **Example:** ```python grid = [ [0, 0, 1, 0, 0], [0, 1, 1, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 0] ] print(find_largest_island(grid)) # Output: 5 ``` **Explanation:** In the given grid, there are three islands. The largest island has a size of 5. **Constraints:** - You may assume all four edges of the grid are surrounded by water. - The grid size is at most 50x50. # Function Signature ```python def find_largest_island(grid: List[List[int]]) -> int: ```","solution":"from typing import List def find_largest_island(grid: List[List[int]]) -> int: def dfs(x, y): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == 0: return 0 grid[x][y] = 0 # mark as visited size = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: # directions: up, down, left, right size += dfs(x + dx, y + dy) return size max_size = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: max_size = max(max_size, dfs(i, j)) return max_size"},{"question":"Can you implement a function in Python that takes a list of integers and returns a new list where each element at index `i` is the product of all the numbers in the original array except the one at `i`, without using division?","solution":"def product_except_self(nums): Returns a new list where each element at index `i` is the product of all the numbers in the original array except the one at `i`, without using division. length = len(nums) # Step 1: Create an output array and two temporary arrays for products of left and right sides output = [1] * length left_products = [1] * length right_products = [1] * length # Step 2: Fill in left_products where each element is product of all elements to the left for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Step 3: Fill in right_products where each element is product of all elements to the right for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Step 4: Fill in the output array with product of left_products and right_products for i in range(length): output[i] = left_products[i] * right_products[i] return output"},{"question":"You are given a Python function that aims to convert a given Roman numeral string into an integer value. However, the current implementation is incorrect. Here is the faulty Python code: ```python def roman_to_int(s): roman = {\'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000} res = 0 for i in range(len(s)): if i > 0 and roman[s[i]] > roman[s[i - 1]]: res += roman[s[i]] - roman[s[i - 1]] else: res += roman[s[i]] return res roman_str = \\"MCMXCIV\\" print(roman_to_int(roman_str)) ``` Your task is to identify and correct the logic errors in the code to ensure it accurately converts the Roman numeral string into its respective integer value. Additionally, enhance the function to handle invalid inputs gracefully by raising an appropriate error if the input string contains invalid Roman numeral characters or violates the standard rules of Roman numerals.","solution":"def roman_to_int(s): roman = {\'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000} res = 0 prev_value = 0 for char in s: if char not in roman: raise ValueError(f\\"Invalid character \'{char}\' in Roman numeral string\\") value = roman[char] if value > prev_value: res += value - 2 * prev_value else: res += value prev_value = value return res"},{"question":"Given a list of integers, write a Python function that classifies each number as \\"even\\" or \\"odd\\" and then groups them into separate lists. Your solution should handle large lists efficiently and should operate in O(n) time complexity. Additionally, write another function to find and return the intersection of two lists of integers (numbers that appear in both lists). Analyze the given erroneous code and point out the errors: ```python def classify_numbers(numbers): evens = [] odds = [] if number % 2 == 0: evens.append(number) else: odds.append(number) return evens, odds def find_intersection(list1, list2): intersection = [] for num in list1: if num in list2: intersection.append(num) returns intersection numbers = [1, 2, 3, 4, 5, 6] list1 = [7, 8, 9, 10] list2 = [5, 6, 7, 8] evens, odds = classify_numbers(numbers) print(\\"Evens:\\", evens) print(\\"Odds:\\", odds) intersection = find_intersection(list1, list2) print(\\"Intersection:\\", intersection) ``` The given lists should be treated as single examples. Assume the actual lists involved can contain thousands or millions of similar elements.","solution":"def classify_numbers(numbers): Classifies each number as \\"even\\" or \\"odd\\" and groups them into separate lists. Parameters: numbers (list): List of integers. Returns: tuple: A tuple of two lists, the first containing all even numbers and the second containing all odd numbers. evens = [] odds = [] for number in numbers: if number % 2 == 0: evens.append(number) else: odds.append(number) return evens, odds def find_intersection(list1, list2): Finds and returns the intersection of two lists of integers. Parameters: list1 (list): The first list of integers. list2 (list): The second list of integers. Returns: list: A list of integers that are found in both list1 and list2. set2 = set(list2) intersection = [num for num in list1 if num in set2] return intersection"},{"question":"Develop a program that processes a given string input and performs various transformations and analyses based on the string\'s properties, using conditional statements, loops, and in-built string functions. Input: \\"HelloWorld123\\" Considerations: 1. Evaluate if the string contains only alphabetic characters, only digits, or a mix of both. 2. Use conditional statements to: a. Reverse the string if it contains only alphabetic characters. b. Calculate and output the sum of the digits if the string contains only numeric characters. c. Perform both operations, reversing the alphabetic part and summing the numeric part, if the string contains a mix. 3. Transform alternating characters of the alphabetic part to uppercase and lowercase for strings with alphabetic content. 4. Use loops to identify and output the count of vowels and consonants for strings with alphabetic content. 5. If the string contains special characters, output: \\"Invalid Input\\". Example: For input \\"HelloWorld123\\": 1. Identify it contains both alphabetic characters and digits. 2. Reverse the alphabetic part to get \\"dlroWolleH\\". 3. Sum the numeric part to get 6. 4. Convert alternating characters to get \\"DlRoWoLlEh\\". 5. Count vowels and consonants: vowels 3 (e, o, o), consonants 7 (H, l, l, W, r, l, d). Final Output: - Reversed alphabetic part: \\"dlroWolleH\\" - Sum of digits: 6 - Alternating case: \\"DlRoWoLlEh\\" - Vowels count: 3 - Consonants count: 7 For input \\"Hi123\\": - Reversed alphabetic part: \\"iH\\" - Sum of digits: 6 - Alternating case: \\"IH\\" - Vowels count: 1 - Consonants count: 1","solution":"def process_string(input_string): Process the given string based on the specified rules: 1. Evaluate if the string contains only alphabetic characters, only digits, or a mix of both. 2. Reverse the string if it contains only alphabetic characters. 3. Calculate and output the sum of the digits if the string contains only numeric characters. 4. Perform both operations, reversing the alphabetic part and summing the numeric part, if the string contains a mix. 5. Transform alternating characters of the alphabetic part to uppercase and lowercase for strings with alphabetic content. 6. Identify and output the count of vowels and consonants for strings with alphabetic content. 7. If the string contains special characters, output: \\"Invalid Input\\". if not input_string.isalnum(): return \\"Invalid Input\\" has_alpha = any(c.isalpha() for c in input_string) has_digit = any(c.isdigit() for c in input_string) alphabetic_part = \'\'.join(c for c in input_string if c.isalpha()) numeric_part = \'\'.join(c for c in input_string if c.isdigit()) result = {} if has_alpha: reversed_alpha = alphabetic_part[::-1] alternating_case = \'\'.join( c.lower() if i % 2 else c.upper() for i, c in enumerate(alphabetic_part) ) vowels = sum(c in \'aeiouAEIOU\' for c in alphabetic_part) consonants = len(alphabetic_part) - vowels result[\'Reversed Alphabetic Part\'] = reversed_alpha result[\'Alternating Case\'] = alternating_case result[\'Vowels Count\'] = vowels result[\'Consonants Count\'] = consonants if has_digit: sum_of_digits = sum(int(c) for c in numeric_part) result[\'Sum of Digits\'] = sum_of_digits return result"},{"question":"Write a function that takes a list of strings as input and returns a dictionary where the keys are the strings, and the values are the lengths of those strings. Ensure that the function handles empty strings and raises an appropriate error if any item in the list is not a string. Input: [\\"apple\\", \\"banana\\", \\"cherry\\"] Output: {\\"apple\\": 5, \\"banana\\": 6, \\"cherry\\": 6}","solution":"def strings_length_dict(strings_list): Returns a dictionary where the keys are the strings from the input list, and the values are the lengths of those strings. Parameters: strings_list (list): A list of strings Returns: dict: A dictionary with strings as keys and their lengths as values. Raises: TypeError: If any item in the list is not a string. if not all(isinstance(item, str) for item in strings_list): raise TypeError(\\"All items in the list must be strings.\\") return {item: len(item) for item in strings_list}"},{"question":"You are given an integer array `nums` representing the cost of different stocks on given days, and you are allowed to accumulate stocks over several days. Each day, you can choose to either buy one stock of the current day’s price or not buy any stock at all. Write a function to find the maximum number of consecutive days you can purchase stocks such that the total cost does not exceed a given amount `limit`. Example 1: Input: nums = [1, 2, 3, 4, 5], limit = 9 Output: 3 Explanation: The maximum number of consecutive days you can buy stocks without exceeding the limit is 3 (buying on days with prices 1, 2, and 3). Example 2: Input: nums = [7, 3, 5, 6, 2], limit = 10 Output: 2 Explanation: The maximum number of consecutive days you can buy stocks without exceeding the limit is 2 (buying on days with prices 3 and 5 or 5 and 2). Example 3: Input: nums = [5, 5, 5, 5], limit = 5 Output: 1 Explanation: The maximum number of consecutive days you can buy stocks without exceeding the limit is 1 (buying on any day). Constraints: - `1 <= nums.length <= 5000` - `1 <= nums[i] <= 1000` - `1 <= limit <= 10000`","solution":"def max_consecutive_days(nums, limit): Returns the maximum number of consecutive days you can purchase stocks without exceeding the limit. Parameters: nums (list of int): The cost of different stocks on given days. limit (int): The maximum allowable cost. Returns: int: The maximum number of consecutive days of stock purchases within the limit. start = 0 total = 0 max_days = 0 for end in range(len(nums)): total += nums[end] while total > limit: total -= nums[start] start += 1 max_days = max(max_days, end - start + 1) return max_days"},{"question":"Write a function in Python that takes a string containing digits from \'0\' to \'9\' and returns all possible valid IP addresses that can be formed by inserting three dots into the string. Note that an IP address consists of four numbers (each between 0 and 255), separated by dots. The function should not return IP addresses with leading zeros, but \'0\' itself is a valid number. For example, given the string \\"25525511135\\", the function should return: [\\"255.255.11.135\\", \\"255.255.111.35\\"] If no valid IP addresses can be created from the input string, the function should return an empty list.","solution":"def restore_ip_addresses(s): def is_valid(segment): if len(segment) > 1 and segment[0] == \'0\': return False return 0 <= int(segment) <= 255 def backtrack(start=0, path=[]): if len(path) == 4 and start == len(s): result.append(\\".\\".join(path)) return if len(path) == 4 or start == len(s): return for length in range(1, 4): if start + length <= len(s): segment = s[start:start + length] if is_valid(segment): backtrack(start + length, path + [segment]) result = [] backtrack() return result"},{"question":"Create a Python function to simulate a basic stock trading algorithm. The function should analyze a list of daily stock prices and determine the maximum profit that could have been made by buying on one day and selling on another later day. The function should return both the maximum profit that can be achieved and the days on which to buy and sell to achieve this profit. The algorithm should be efficient, with a time complexity not exceeding O(n). Include comprehensive error handling to manage cases where no profit is possible and ensure the inputs are valid.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling on different days, along with the days to buy and sell. :param prices: List of daily stock prices. :return: Tuple containing the maximum profit, buy day, and sell day. if not prices or len(prices) < 2: return 0, -1, -1 min_price = prices[0] min_day = 0 max_profit = 0 buy_day = 0 sell_day = 0 for i in range(1, len(prices)): if prices[i] < min_price: min_price = prices[i] min_day = i current_profit = prices[i] - min_price if current_profit > max_profit: max_profit = current_profit buy_day = min_day sell_day = i if max_profit == 0: return 0, -1, -1 # No profit can be made return max_profit, buy_day, sell_day"},{"question":"Design a function that generates all possible unique combinations of k numbers from 1 to n inclusive, where k <= n. Each combination should be sorted in ascending order. The function should return a list of all these combinations, each represented as a sorted list. For example, if n = 4 and k = 2, the result should be [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]. Implement the solution efficiently using the backtracking technique. def combine(n, k):","solution":"def combine(n, k): Generates all possible unique combinations of k numbers from 1 to n inclusive. Parameters: n (int): The upper limit integer. k (int): The number of elements in each combination. Returns: List[List[int]]: A list of all unique combinations. result = [] def backtrack(start, path): if len(path) == k: result.append(path[:]) return for i in range(start, n + 1): path.append(i) backtrack(i + 1, path) path.pop() backtrack(1, []) return result"},{"question":"Write a Python function that accepts a string containing a mathematical expression and returns the result of the expression. The expression can contain integers, the operators +, -, *, and /, and can also contain parentheses to indicate the order of operations. Ensure that the function can handle spaces in the input string and includes appropriate error handling mechanisms. Here is an example function signature: ```python def evaluate_expression(expression: str) -> float: # Your code here ``` # Example: ```python print(evaluate_expression(\\" 3 + 5 / 2 \\")) # Output: 5.5 print(evaluate_expression(\\"(1 + 2) * (3 / 4)\\")) # Output: 2.25 print(evaluate_expression(\\"10 + (6 / 3) - 2\\")) # Output: 10.0 print(evaluate_expression(\\"(2*4) - (3+1) * 2\\")) # Output: 0.0 print(evaluate_expression(\\"15 / 5 * 2 + 3\\")) # Output: 9.0 ``` # Requirements: 1. Handle spaces in the input string. 2. Implement correct order of operations, respecting parentheses. 3. Provide error messages for invalid characters or malformed expressions. 4. Support basic arithmetic operations: addition (+), subtraction (-), multiplication (*), and division (/).","solution":"def evaluate_expression(expression: str) -> float: Evaluates a mathematical expression and returns the result. The expression can contain integers, +, -, *, / operators, and can have parentheses. try: # Replace all spaces in the expression expression = expression.replace(\\" \\", \\"\\") # Evaluate the expression using Python\'s eval function which processes the string expression # and computes its result. result = eval(expression) return result except (SyntaxError, ZeroDivisionError, NameError) as e: raise ValueError(f\\"Invalid expression: {expression}. Error: {str(e)}\\") # Example usage print(evaluate_expression(\\" 3 + 5 / 2 \\")) # Output: 5.5 print(evaluate_expression(\\"(1 + 2) * (3 / 4)\\")) # Output: 2.25 print(evaluate_expression(\\"10 + (6 / 3) - 2\\")) # Output: 10.0 print(evaluate_expression(\\"(2*4) - (3+1) * 2\\")) # Output: 0.0 print(evaluate_expression(\\"15 / 5 * 2 + 3\\")) # Output: 9.0"},{"question":"You are provided with a list of integers. Your task is to write a Python function that partitions this list into two sublists. The function should ensure one sublist contains all the even numbers from the original list and the other sublist contains all the odd numbers. Additionally, the even numbers should be in ascending order and the odd numbers should be in descending order. Return a tuple with the two sublists. Ensure your solution uses list comprehensions and built-in sorting methods efficiently.","solution":"def partition_even_odd(numbers): Partitions the given list of integers into two sublists: - one containing all the even numbers in ascending order, - the other containing all the odd numbers in descending order. Returns a tuple of the two sublists. evens = sorted([num for num in numbers if num % 2 == 0]) odds = sorted([num for num in numbers if num % 2 != 0], reverse=True) return (evens, odds)"},{"question":"Write a function that takes a list of integers and returns a new list containing only the unique elements, preserving their original order. Python","solution":"def unique_elements(lst): Returns a new list containing only the unique elements from the input list, preserving their original order. seen = set() unique_lst = [] for element in lst: if element not in seen: unique_lst.append(element) seen.add(element) return unique_lst"},{"question":"How would you implement a stack data structure in Python using a singly linked list? Provide the methods for push, pop, and peek.","solution":"class Node: def __init__(self, value): self.value = value self.next = None class Stack: def __init__(self): self.top = None def push(self, value): new_node = Node(value) new_node.next = self.top self.top = new_node def pop(self): if self.top is None: raise IndexError(\\"pop from empty stack\\") value = self.top.value self.top = self.top.next return value def peek(self): if self.top is None: raise IndexError(\\"peek from empty stack\\") return self.top.value"},{"question":"Write a function that takes a string s consisting of lowercase alphabets and returns another string that is a transformation of s by shifting each character forward in the alphabet by p positions. If a shift exceeds \'z\', it should wrap around to the beginning of the alphabet. Let p range from 1 to 25. Additionally, ensure that the transformation has a time complexity of O(n).","solution":"def shift_string(s, p): Shifts each character in the string s forward by p positions in the alphabet. Wraps around to the beginning of the alphabet if the shift exceeds \'z\'. shifted_str = [] for char in s: shifted_char = chr(((ord(char) - ord(\'a\') + p) % 26) + ord(\'a\')) shifted_str.append(shifted_char) return \'\'.join(shifted_str)"},{"question":"The task is now: Given a string `s`, determine if there is a substring of length 4 whose characters are all different. If such a substring exists, return `true`; otherwise, return `false`. For instance: Scenario 1: Input: s = \\"abcdefg\\" Output: true Justification: The substring \\"abcd\\" has all unique characters. Scenario 2: Input: s = \\"aaaaa\\" Output: false Justification: There is no substring of length 4 that consists of unique characters. Scenario 3: Input: s = \\"aabac\\" Output: false Justification: There is no substring of length 4 with all unique characters. Scenario 4: Input: s = \\"abcdabc\\" Output: true Justification: The substring \\"abcd\\" from the start of the string has all unique characters. The constraints are as follows: - `1 <= s.length <= 10^5` - `s` consists only of lowercase English letters. As a follow-up question, could you devise a solution that operates within `O(n)` time complexity and `O(1)` space complexity?","solution":"def has_unique_substring_of_length_4(s): Returns True if there is a substring of length 4 with all unique characters in the given string s, otherwise returns False. n = len(s) if n < 4: return False # Use a sliding window approach with a set to track characters in the current window char_set = set() for i in range(n - 3): # Extract substring of length 4 substring = s[i:i+4] char_set = set(substring) if len(char_set) == 4: return True return False"},{"question":"# Context Original Requirements [BOSS: We need a tool for restaurant owners to manage their menus online. The system must allow adding, removing, and updating menu items. Each menu item should have a name, description, price, and category. Also, there should be a feature to generate a downloadable PDF of the current menu.] Search Information # Search Results # Search Summary mermaid quadrantChart code syntax example. DONT USE QUOTO IN CODE DUE TO INVALID SYNTAX. Replace the <Competitor X> with REAL COMPETITOR NAME ```mermaid quadrantChart title Usability and Feature Set of Restaurant Management Tools x-axis Simple Interface --> Complex Interface y-axis Limited Features --> Extensive Features quadrant-1 Most Comprehensive quadrant-2 Needs Improvement quadrant-3 Difficult to Use quadrant-4 Simplistic Solutions \\"Competitor A\\": [0.2, 0.75] \\"Competitor B\\": [0.6, 0.9] \\"Competitor C\\": [0.1, 0.3] \\"Competitor D\\": [0.8, 0.4] \\"Competitor E\\": [0.3, 0.5] \\"Competitor F\\": [0.55, 0.6] \\"Our Proposed Tool\\": [0.5, 0.75] ``` Format example --- Original Requirements The boss ... Product Goals ```python [ \\"Implement a tool...\\", \\"Ensure...\\", \\"Allow...\\" ] ``` User Stories ```python [ \\"As a restaurant owner, I want...\\", \\"As a restaurant owner, I need...\\", \\"As a user, I want...\\" ] ``` Competitive Analysis ```python [ \\"Competitor One: ...\\", \\"Product Two: ...\\", \\"App Three: ...\\" ] ``` Competitive Quadrant Chart ```mermaid quadrantChart title Usability and Feature Set of Restaurant Management Tools ... \\"Our Proposed Tool\\": [0.5, 0.75] ``` Requirement Analysis The tool should be intuitive... Requirement Pool ```python [ (\\"Manage menu items\\", \\"P0\\"), (\\"Generate PDF\\", \\"P1\\") ] ``` UI Design draft Give a basic function description and a draft Anything UNCLEAR None. --- ----- Role: You are a professional product manager; the goal is to design a concise, usable, efficient product Requirements: According to the context, fill in the following missing information, note that each section is returned in Python code triple quote form separately. If the requirements are unclear, ensure minimum viability and avoid excessive design ATTENTION: Use \'\' to SPLIT SECTIONS, not \'#\'. AND \' <SECTION_NAME>\' SHOULD WRITE BEFORE the code and triple quote. Output carefully referenced \\"Format example\\" in format. Original Requirements: Provide as Plain text, place the polished complete original requirements here Product Goals: Provided as Python list[str], up to 3 clear, orthogonal product goals. If the requirement itself is simple, the goal should also be simple User Stories: Provided as Python list[str], up to 5 scenario-based user stories. If the requirement itself is simple, the user stories should also be fewer. Competitive Analysis: Provided as Python list[str], up to 7 competitive product analyses, consider as similar competitors as possible Competitive Quadrant Chart: Use mermaid quadrantChart code syntax. Up to 14 competitive products. Translation: Distribute these competitor scores evenly between 0 and 1, trying to conform to a normal distribution centered around 0.5 as much as possible. Requirement Analysis: Provide as Plain text. Be simple. LESS IS MORE. Make your requirements less dumb. Delete the unnessasery parts. Requirement Pool: Provided as Python list[str, str], the parameters are requirement description, priority(P0/P1/P2), respectively, comply with PEP standards; no more than 5 requirements and consider to make its difficulty lower. UI Design draft: Provide as Plain text. Be simple. Describe the elements and functions, also provide a simple style description and layout description. Anything UNCLEAR: Provide as Plain text. Make clear here.","solution":"class MenuItem: def __init__(self, name, description, price, category): self.name = name self.description = description self.price = price self.category = category class MenuManager: def __init__(self): self.menu = [] def add_item(self, item): self.menu.append(item) def remove_item(self, item_name): self.menu = [item for item in self.menu if item.name != item_name] def update_item(self, item_name, new_item): for i, item in enumerate(self.menu): if item.name == item_name: self.menu[i] = new_item def generate_pdf(self): # Simulate PDF generation pdf_content = \\"Menunn\\" for item in self.menu: pdf_content += f\\"{item.name} - {item.description} - {item.price} - {item.category}n\\" return pdf_content"},{"question":"Write a function that takes a string containing a Roman numeral and returns its integer value. The function should correctly interpret Roman numerals, which are represented by the following symbols and their corresponding values: - I: 1 - V: 5 - X: 10 - L: 50 - C: 100 - D: 500 - M: 1000 Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not \\"IIII\\". Instead, the number four is written as \\"IV\\". Similarly, nine is written as \\"IX\\". There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Implement the function `romanToInt(roman: str) -> int` that converts a Roman numeral to an integer. **Example:** ``` python romanToInt(\\"III\\") # Output: 3 romanToInt(\\"IV\\") # Output: 4 romanToInt(\\"IX\\") # Output: 9 romanToInt(\\"LVIII\\") # Output: 58 romanToInt(\\"MCMXCIV\\") # Output: 1994 ```","solution":"def romanToInt(roman): Convert a Roman numeral to an integer. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(roman): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"You are given an array of distinct integers and a positive integer k. Your task is to find the k-th smallest number in the array. Implement a function `kth_smallest` that takes an array of integers `arr` and an integer `k` as arguments and returns the k-th smallest element. For example, consider the following cases: Example 1: Input: arr = [7, 10, 4, 3, 20, 15], k = 3 Output: 7 Explanation: The 3rd smallest number in the array is 7. Example 2: Input: arr = [7, 10, 4, 3, 20, 15], k = 4 Output: 10 Explanation: The 4th smallest number in the array is 10. Example 3: Input: arr = [12, 3, 5, 7, 19], k = 2 Output: 5 Explanation: The 2nd smallest number in the array is 5. The constraints for this challenge are as follows: - The length of the array `arr` will be in the range `[1, 10^4]`. - The value of each element in `arr` will be in the range `[1, 10^5]`. - The value of `k` will be in the range `[1, length of the array]`. Implement the function as efficiently as possible to handle large datasets.","solution":"def kth_smallest(arr, k): Returns the k-th smallest number in the array. arr.sort() return arr[k - 1]"},{"question":"Create a function in Python that takes a list of integers as input and returns the product of all elements in the list except the element at the current position without using division. Ensure that the solution operates with a time complexity of O(n). For example, given the list [1, 2, 3, 4], the function should return [24, 12, 8, 6].","solution":"def product_except_self(nums): Return a list such that each element at index i is the product of all elements in the original list except the one at index i. Parameters: nums (list): List of integers Returns: List of integers representing the product except self length = len(nums) output = [1] * length left_product = 1 right_product = 1 for i in range(length): output[i] *= left_product left_product *= nums[i] for i in range(length - 1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"Write a Python function that receives a list of dictionaries, where each dictionary contains information about different students in the form of name, age, and grades (a list of integers). The function should return a new list of dictionaries where each dictionary contains the same information but includes an added key \'average_grade\' with the average of the grades. Sort the output list by \'average_grade\' in ascending order. Additionally, correct the following erroneous code snippet given as a reference: ```python def add_average_grade(students): for student in students: student[\'average_grade\'] = sum(student[\'grades\']) / len(student[\'grades\']) return sorted(students, key = lambda x: x[\'average_grade\']) students = [ {\'name\': \'John\', \'age\': 21, \'grades\': [88, 92, 76]}, {\'name\': \'Jane\', \'age\': 22, \'grades\': [100, 85, 90]}, {\'name\': \'Doe\', \'age\': 20, \'grades\': [65, 70, 78]} ] print(add_average_grade(students)) ```","solution":"def add_average_grade(students): Adds an \'average_grade\' key to each student\'s dictionary, representing the average of their grades, and returns a new list of dictionaries sorted by \'average_grade\' in ascending order. for student in students: if \'grades\' in student and student[\'grades\']: student[\'average_grade\'] = sum(student[\'grades\']) / len(student[\'grades\']) else: student[\'average_grade\'] = 0.0 return sorted(students, key=lambda x: x[\'average_grade\'])"},{"question":"Write a function in Python that simulates the process of shuffling a deck of cards. The deck should contain 52 unique cards, each represented by a string combining a rank (2-10, J, Q, K, A) and a suit (Hearts, Diamonds, Clubs, Spades). The function should return a list of shuffled cards. Additionally, ensure that the function appropriately handles the shuffling mechanism and does not repeat any cards in the output. **Function Signature:** ```python def shuffle_deck() -> list: pass ``` **Example:** ```python Output: [\'2 of Hearts\', \'J of Diamonds\', \'10 of Spades\', \'A of Clubs\', ..., \'3 of Diamonds\'] ``` You are also required to write a brief explanation of the shuffling algorithm used in your code.","solution":"import random def shuffle_deck() -> list: Returns a shuffled deck of 52 unique cards. Each card is represented as a string combining a rank and a suit. ranks = [\'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'J\', \'Q\', \'K\', \'A\'] suits = [\'Hearts\', \'Diamonds\', \'Clubs\', \'Spades\'] deck = [f\\"{rank} of {suit}\\" for suit in suits for rank in ranks] random.shuffle(deck) return deck"},{"question":"Develop a Python function that checks whether a given string is a palindrome. The function should ignore spaces, punctuation, and capitalization in determining whether the string is a palindrome.","solution":"import re def is_palindrome(s): Checks whether a given string is a palindrome. The function ignores spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lowercase cleaned_str = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"You are given an array of integers where each element represents the height of a vertical line on an X-Y plane. The width between each line is 1. Write a function in Python that takes this array as input and returns the maximum area of water that can be contained between two lines. The lines must be vertically aligned. # Constraints: - You cannot slant the container. - The height of the water container is determined by the shorter of the two lines. - The width of the water container is the horizontal distance between the two lines. # Function Signature: ```python def max_area(height: List[int]) -> int: pass ``` # Example: **Input:** ```python heights = [1,8,6,2,5,4,8,3,7] ``` **Output:** ```python 49 ``` # Explanation: The vertical lines are represented as follows: ``` | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ``` In this case, the maximum area of water (between the 2nd and 9th line) that can be contained is 49.","solution":"from typing import List def max_area(height: List[int]) -> int: Finds the maximum area of water that can be contained between two vertical lines. left = 0 right = len(height) - 1 max_area = 0 while left < right: current_height = min(height[left], height[right]) current_width = right - left current_area = current_height * current_width max_area = max(max_area, current_area) if height[left] < height[right]: left += 1 else: right -= 1 return max_area"},{"question":"Write a Python function that takes a string containing a mathematical expression with positive integers and the operators + and -, and returns the result of the expression. You are not allowed to use the `eval` function or any other built-in function that directly evaluates the expression. You may assume that the string will not contain any spaces and will always be a valid expression. Example: ```python calculate_expression(\\"3+5-2+7\\") => 13 calculate_expression(\\"10-3+8-2\\") => 13 ```","solution":"def calculate_expression(expression): Evaluates a mathematical expression containing only positive integers and the operators + and -, and returns the result of the expression. :param expression: str, the mathematical expression to evaluate :return: int, the result of the expression result = 0 current_number = 0 current_operator = \'+\' for char in expression: if char.isdigit(): current_number = current_number * 10 + int(char) else: if current_operator == \'+\': result += current_number elif current_operator == \'-\': result -= current_number current_operator = char current_number = 0 # Apply the last collected number if current_operator == \'+\': result += current_number elif current_operator == \'-\': result -= current_number return result"},{"question":"Write a Python function that accepts an array of integers and returns the highest product possible from any three of the integers. Ensure your code handles both positive and negative numbers effectively. For example, given the array `[-10, -10, 5, 2]`, the highest possible product would be `500` (from -10 * -10 * 5).","solution":"def highest_product_of_three(arr): Returns the highest product possible from any three of the integers in the array. if len(arr) < 3: raise ValueError(\\"Less than 3 integers in the input array\\") arr.sort() # The maximum product can be either from the three largest numbers or # from two smallest (most negative) numbers and the largest number. max_product = max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]) return max_product"},{"question":"Create a function to determine if a string has all unique characters. Implement a function `hasAllUniqueChars` in Python that takes a single string argument and returns a boolean indicating whether the string has all unique characters or not. You may assume the input string contains only ASCII characters. **Function Signature:** ```python def hasAllUniqueChars(s: str) -> bool: # Your code here ``` **Examples:** ```python assert hasAllUniqueChars(\\"abcdef\\") == True assert hasAllUniqueChars(\\"aabbcc\\") == False assert hasAllUniqueChars(\\"\\") == True assert hasAllUniqueChars(\\"12345!@#\\") == True ``` **Explanation:** - The function should return `True` if the string has no repeated characters and `False` otherwise. - The empty string should be considered to have all unique characters. - You are not allowed to use additional data structures (like sets or dictionaries) for solving this problem. - Aim for an optimal solution in terms of both time and space complexity. Consider providing comments in your code to explain your logic and thought process.","solution":"def hasAllUniqueChars(s: str) -> bool: Determine if the input string has all unique characters. Parameters: s (str): The input string to check. Returns: bool: True if all characters in the string are unique, False otherwise. # As we are assuming ASCII characters, there are only 128 unique characters. if len(s) > 128: return False # Create a list to keep track of ASCII character occurrences. char_set = [False] * 128 for char in s: val = ord(char) # Find the ASCII value of the character if char_set[val]: return False # Character has already been found in string char_set[val] = True # Mark this character as found return True"},{"question":"Write a function that takes a list of strings as input and returns a new list with the strings sorted by their lengths in ascending order. If two strings have the same length, they should appear in the result in the same order as they appear in the input list.","solution":"def sort_by_length(strings): Takes a list of strings and returns a new list with the strings sorted by their lengths in ascending order. If two strings have the same length, they should appear in the result in the same order as they appear in the input list. :param strings: List of strings :return: List of strings sorted by length return sorted(strings, key=len)"},{"question":"Write a Python program that takes a list of integers as input and returns a list of tuples, where each tuple contains an integer from the input list and its corresponding factorial. Ensure that your solution is capable of handling large integers, and optimize for performance to address computation-intensive factorial calculations. # Input A list of integers, e.g., `[4, 5, 6]`. # Output A list of tuples, where each tuple contains an integer and its factorial, e.g., `[(4, 24), (5, 120), (6, 720)]`. # Constraints - The input list will contain at most 20 integers. - Each integer in the input list will be between 0 and 20 inclusive. # Example ```python input_list = [3, 4, 5] # Expected output: [(3, 6), (4, 24), (5, 120)] ``` Develop the function `factorial_tuples(input_list)` that performs as described above. Make sure to handle edge cases, such as an empty list or containing zero.","solution":"from math import factorial def factorial_tuples(input_list): Takes a list of integers and returns a list of tuples where each tuple contains an integer and its corresponding factorial. Parameters: input_list (list): List of integers. Returns: list: List of tuples (integer, factorial). result = [(num, factorial(num)) for num in input_list] return result"},{"question":"Implement a function to determine if a given string is an anagram of a palindrome. An anagram of a palindrome means that the characters of the string can be rearranged to form a palindrome. If the string fulfills this condition, your function should return True; otherwise, it should return False. For example, the string \\"civic\\" is a palindrome, and its anagram \\"ivicc\\" is also a valid rearrangement that forms a palindrome. Your function should consider only alphabetic characters and ignore case sensitivity. Punctuation, spaces, and numerical digits should be disregarded. To accomplish this, follow these steps: 1. Normalize the input string by converting it to lowercase and removing non-alphabetic characters. 2. Check the frequency of each character in the normalized string. 3. Determine if it is possible for the characters to be rearranged into a palindrome. Provide an explanation of your approach and the function implementation in Python. Include the time complexity of your solution. # Sample Input and Output ```python print(is_anagram_of_palindrome(\\"Tact Coa\\")) # Output: True (\\"taco cat\\", \\"atco cta\\", etc.) print(is_anagram_of_palindrome(\\"Able was I ere I saw Elba!\\")) # Output: True print(is_anagram_of_palindrome(\\"Palindrome\\")) # Output: False ``` # Function Signature ```python def is_anagram_of_palindrome(s: str) -> bool: # Your code here ```","solution":"def is_anagram_of_palindrome(s: str) -> bool: Determines if the given string is an anagram of a palindrome. from collections import Counter import re # Normalize the input by converting to lowercase and removing non-alphabetic characters normalized_s = re.sub(r\'[^a-zA-Z]\', \'\', s).lower() # Count the frequencies of each character char_count = Counter(normalized_s) # Check the number of characters with odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be an anagram of a palindrome, there can be at most one character with an odd count return odd_count <= 1"},{"question":"Given a list of integers, write a Python function to find the maximum product that can be obtained from any two distinct elements in the list. Make sure to handle edge cases where the list may contain negative numbers or have fewer than two elements. If there are fewer than two elements, return None.","solution":"def max_product(lst): Returns the maximum product that can be obtained from any two distinct elements in the list. If the list has fewer than two elements, return None. if len(lst) < 2: return None # Sort the list in ascending order sorted_lst = sorted(lst) # The maximum product can either be from # 1) Two largest numbers # 2) Two smallest numbers (if both are negative) return max(sorted_lst[0] * sorted_lst[1], sorted_lst[-1] * sorted_lst[-2])"},{"question":"Write a function that takes in a list of integers and returns a new list where each element is the average of that element and its immediate neighbors. For the first and last elements, which do not have two neighbors, simply use the available elements for averaging. Ensure efficient handling and consider edge cases in your implementation. Additionally, the solution must account for lists with less than three elements, returning the list itself in such cases.","solution":"def average_neighbors(arr): Returns a new list where each element is the average of that element and its immediate neighbors. For the first and last elements, simply use the available elements for averaging. # Handle lists with less than 3 elements if len(arr) < 3: return arr result = [] for i in range(len(arr)): if i == 0: # First element (only next neighbor) avg = (arr[i] + arr[i + 1]) / 2 elif i == len(arr) - 1: # Last element (only previous neighbor) avg = (arr[i] + arr[i - 1]) / 2 else: # Middle elements (has both neighbors) avg = (arr[i - 1] + arr[i] + arr[i + 1]) / 3 result.append(avg) return result"},{"question":"A warehouse management system tracks the inventory levels of various products using nested dictionaries where keys represent product categories and values could either be the count of products or another nested dictionary of subcategories. Design a function in Python that takes such a dictionary and returns the total count of all products within it. For instance, given the input `{\\"Electronics\\": {\\"Phones\\": {\\"Smartphones\\": 30, \\"Feature Phones\\": 20}, \\"Laptops\\": 15}, \\"Furniture\\": {\\"Chairs\\": 10, \\"Tables\\": {\\"Dining Tables\\": 5, \\"Coffee Tables\\": 8}}}`, the output should be 88.","solution":"def total_product_count(inventory): Recursively counts the total number of products in the inventory dictionary. Args: inventory (dict): A nested dictionary representing product categories and counts. Returns: int: The total count of all products. total_count = 0 for value in inventory.values(): if isinstance(value, dict): total_count += total_product_count(value) else: total_count += value return total_count # Example usage example_inventory = { \\"Electronics\\": { \\"Phones\\": {\\"Smartphones\\": 30, \\"Feature Phones\\": 20}, \\"Laptops\\": 15 }, \\"Furniture\\": { \\"Chairs\\": 10, \\"Tables\\": {\\"Dining Tables\\": 5, \\"Coffee Tables\\": 8} } } print(total_product_count(example_inventory)) # Output should be 88"},{"question":"Given a string S, return the length of the longest substring of S that contains at most two distinct characters. # Input The input consists of a single string S of length n (1 ≤ n ≤ 10^5). The string S consists of lowercase English letters only. # Output A single integer representing the length of the longest substring that contains at most two distinct characters. # Example Example 1 Input: ``` eceba ``` Output: ``` 3 ``` Explanation: The substring is \\"ece\\" which its length is 3. Example 2 Input: ``` ccaabbb ``` Output: ``` 5 ``` Explanation: The substring is \\"aabbb\\" which its length is 5. # Note - Use sliding window technique to keep track of the number of distinct characters in the current window. - Maintain two pointers to represent the current window and a hashmap to count the frequency of characters in the window. - Adjust pointers to ensure the window contains at most two distinct characters.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. n = len(s) if n == 0: return 0 if n == 1: return 1 left, right = 0, 0 max_len = 2 # at least two distinct characters are possible char_map = {} while right < n: char_map[s[right]] = char_map.get(s[right], 0) + 1 right += 1 if len(char_map) > 2: while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left) return max_len"},{"question":"Develop a Python function that takes a list of tuples, each containing two integers, and an integer \\"k\\". The function should return a new list of tuples where the sum of each tuple\'s integers is either increased or decreased by \\"k\\" based on the following rule: if the first integer in the tuple is greater than the second integer, add \\"k\\" to their sum; if the first integer is less than or equal to the second integer, subtract \\"k\\" from their sum. For example, if we have a list [(2, 5), (7, 3), (4, 4)] and an integer \\"k\\" = 3, the function would return [(2, 2), (7, 7), (4, 1)] since for the first tuple 2 < 5 (subtract k), for the second tuple 7 > 3 (add k), and for the third tuple 4 == 4 (subtract k).","solution":"def adjust_tuple_sums(tuples_list, k): Adjusts the sum of elements in each tuple in the list based on the given rule. Parameters: tuples_list (list of tuples): Each tuple contains two integers. k (int): The integer to add or subtract from the sum of tuple elements. Returns: list of tuples: A new list of tuples with adjusted sums. adjusted_tuples = [] for a, b in tuples_list: if a > b: adjusted_sum = (a + b + k) else: adjusted_sum = (a + b - k) adjusted_tuples.append((a, b, adjusted_sum)) return adjusted_tuples"},{"question":"Context You are developing a weather monitoring and alert system for smart cities using a microservices architecture. The services will include weather data collection, analysis, and user notifications. The system needs to be scalable, reliable, and capable of real-time processing to promptly inform the residents about any weather anomalies such as storms, heatwaves, or heavy rainfall. Microservice Design - **Data Collection Service**: Collects real-time weather data from various sensors distributed throughout the city. - **Data Analysis Service**: Analyzes the collected data to detect any weather anomalies. - **Notification Service**: Sends notifications to users based on the detected anomalies. File list ```python [ \\"data_collection.py\\", \\"data_analysis.py\\", \\"notification.py\\", \\"sensor.py\\", \\"utils.py\\", \\"config.py\\", \\"tests/test_data_collection.py\\", \\"tests/test_data_analysis.py\\", \\"tests/test_notification.py\\" ] ``` Data structures and interface definitions ```mermaid classDiagram class WeatherData{ +int sensor_id +str timestamp +float temperature +float humidity +float rainfall +__init__(sensor_id: int, timestamp: str, temperature: float, humidity: float, rainfall: float) } class Sensor{ +int id +str location +__init__(id: int, location: str) +collect_data() WeatherData } class AnalyzedData{ +WeatherData data +str anomaly +__init__(data: WeatherData, anomaly: str) } WeatherData \\"1\\" -- \\"*\\" Sensor: obtained_by AnalyzedData \\"1\\" -- \\"*\\" WeatherData: contains ``` Program call flow ```mermaid sequenceDiagram participant S as Sensor participant DC as DataCollection participant DA as DataAnalysis participant N as Notification S->>DC: collect data DC-->>DA: send collected data DA->>N: send analyzed data with anomalies N-->>User: send notification ``` Anything UNCLEAR The requirement is clear to me. Required Python third-party packages ```python flask==1.1.2 pandas==1.1.5 numpy==1.19.5 ``` Required Other language third-party packages ```python No third-party packages required for other languages. ``` Full API spec ```python openapi: 3.0.0 paths: /collect: post: summary: Collect weather data from sensors requestBody: required: true content: application/json: schema: ref: \'#/components/schemas/WeatherData\' responses: \'200\': description: Data collected successfully /analyze: post: summary: Analyze collected weather data requestBody: required: true content: application/json: schema: ref: \'#/components/schemas/WeatherData\' responses: \'200\': description: Data analyzed successfully /notify: post: summary: Send notifications about weather anomalies requestBody: required: true content: application/json: schema: ref: \'#/components/schemas/AnalyzedData\' responses: \'200\': description: Notification sent successfully components: schemas: WeatherData: type: object properties: sensor_id: type: integer timestamp: type: string temperature: type: number format: float humidity: type: number format: float rainfall: type: number format: float AnalyzedData: type: object properties: data: ref: \'#/components/schemas/WeatherData\' anomaly: type: string ``` Logic Analysis ```python [ (\\"data_collection.py\\", \\"DataCollectionService: collect and send data to DataAnalysisService\\"), (\\"data_analysis.py\\", \\"DataAnalysisService: analyze data and detect anomalies\\"), (\\"notification.py\\", \\"NotificationService: send notifications based on analyzed data\\"), (\\"sensor.py\\", \\"Sensor: simulation of data collection from sensors\\"), (\\"utils.py\\", \\"Utility functions to support the services, such as data validation and formatting\\"), (\\"config.py\\", \\"Configuration parameters for the services including API endpoints, thresholds for anomalies, etc.\\"), (\\"tests/test_data_collection.py\\", \\"Unit tests for data collection service\\"), (\\"tests/test_data_analysis.py\\", \\"Unit tests for data analysis service\\"), (\\"tests/test_notification.py\\", \\"Unit tests for notification service\\") ] ``` Task list ```python [ \\"config.py\\", \\"utils.py\\", \\"sensor.py\\", \\"data_collection.py\\", \\"data_analysis.py\\", \\"notification.py\\", \\"tests/test_data_collection.py\\", \\"tests/test_data_analysis.py\\", \\"tests/test_notification.py\\" ] ``` Shared Knowledge ```python \'config.py\' contains API endpoints for the microservices and threshold values required to detect anomalies. \'utils.py\' consists of common utility functions like data validation and formatting which will be used across different services. \'sensor.py\' simulates the behavior of sensors and is used for generating test data. Ensure you initialize Flask and other necessary modules in \'data_collection.py\', \'data_analysis.py\', and \'notification.py\'. ``` Anything UNCLEAR The requirement is clear to me.","solution":"class WeatherData: def __init__(self, sensor_id: int, timestamp: str, temperature: float, humidity: float, rainfall: float): self.sensor_id = sensor_id self.timestamp = timestamp self.temperature = temperature self.humidity = humidity self.rainfall = rainfall def to_dict(self): return { \\"sensor_id\\": self.sensor_id, \\"timestamp\\": self.timestamp, \\"temperature\\": self.temperature, \\"humidity\\": self.humidity, \\"rainfall\\": self.rainfall, }"},{"question":"Develop a Python script that connects to an FTP server, retrieves a list of files in a specific directory, downloads a given file, and computes its SHA-256 hash. Your solution should use the `ftplib` library for FTP operations and ensure proper error handling throughout the process.","solution":"import ftplib import hashlib def connect_to_ftp(server, username, password): try: ftp = ftplib.FTP(server) ftp.login(user=username, passwd=password) return ftp except ftplib.all_errors as e: print(f\\"FTP error: {e}\\") return None def list_files(ftp, directory): try: ftp.cwd(directory) files = ftp.nlst() return files except ftplib.all_errors as e: print(f\\"FTP error: {e}\\") return [] def download_file(ftp, filename, local_path): try: with open(local_path, \'wb\') as f: ftp.retrbinary(f\\"RETR {filename}\\", f.write) return True except ftplib.all_errors as e: print(f\\"FTP error: {e}\\") return False def compute_sha256(file_path): try: sha256_hash = hashlib.sha256() with open(file_path, \'rb\') as f: for byte_block in iter(lambda: f.read(4096), b\\"\\"): sha256_hash.update(byte_block) return sha256_hash.hexdigest() except Exception as e: print(f\\"File error: {e}\\") return None # Example usage: # ftp = connect_to_ftp(\\"ftp.example.com\\", \\"username\\", \\"password\\") # if ftp: # files = list_files(ftp, \\"/directory\\") # if \\"example.txt\\" in files: # if download_file(ftp, \\"example.txt\\", \\"local_example.txt\\"): # digest = compute_sha256(\\"local_example.txt\\") # print(f\\"SHA-256: {digest}\\") # ftp.quit()"},{"question":"Implement a function in Python that performs a Breadth-First Search (BFS) on a given graph represented by an adjacency list. The function should return the order of nodes visited. Test your function with the following graph: graph = { \'A\' : [\'B\', \'C\'], \'B\' : [\'D\', \'E\'], \'C\' : [\'F\'], \'D\' : [], \'E\' : [\'F\'], \'F\' : [] } Starting node: \'A\'.","solution":"from collections import deque def bfs(graph, start): Perform BFS on the graph starting from the given start node and return the list of nodes in the order they are visited. visited = [] # List to keep track of visited nodes queue = deque([start]) # Initialize the queue with the start node while queue: node = queue.popleft() # Dequeue a node if node not in visited: visited.append(node) # Mark it as visited queue.extend(graph[node]) # Enqueue non-visited adjacent nodes return visited"},{"question":"Create a function that takes an integer array and an integer \'n\'. The function should find the \'n\' most frequent elements in the array. If there are multiple elements with the same frequency, return the elements in ascending order. Ensure your solution is efficient and uses appropriate data structures. You can assume that the input array contains only positive integers and \'n\' is a positive integer less than or equal to the number of unique elements in the array. array = [1, 1, 1, 2, 2, 3] n = 2","solution":"from collections import Counter def find_n_most_frequent_elements(array, n): Returns the \'n\' most frequent elements in the array. If there are multiple elements with the same frequency, the elements should be returned in ascending order. Parameters: - array: List[int] - n: int (number of most frequent elements to return) Returns: - List[int]: A list of the \'n\' most frequent elements. if n == 0 or not array: return [] freq_counter = Counter(array) most_common_elements = freq_counter.most_common() sorted_most_common_elements = sorted( most_common_elements, key=lambda x: (-x[1], x[0]) ) return [elem[0] for elem in sorted_most_common_elements[:n]]"},{"question":"You are given a list of integers representing the preorder traversal of a binary search tree (BST). Construct the BST and return its root. A Binary Search Tree is defined as follows: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. Example 1: Input: preorder = [8, 5, 1, 7, 10, 12] Output: [8, 5, 10, 1, 7, null, 12] Example 2: Input: preorder = [1, 2] Output: [1, null, 2] Example 3: Input: preorder = [3, 2, 1] Output: [3, 2, null, 1] Constraints: - `1 <= preorder.length <= 100` - `1 <= preorder[i] <= 1000` - All the values of `preorder` are unique.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def bstFromPreorder(preorder): if not preorder: return None root = TreeNode(preorder[0]) stack = [root] for value in preorder[1:]: node, parent = TreeNode(value), None while stack and stack[-1].val < value: parent = stack.pop() if parent: parent.right = node else: stack[-1].left = node stack.append(node) return root def bstToList(root): if not root: return [] result = [] queue = [root] while queue: node = queue.pop(0) if node: result.append(node.val) queue.append(node.left) queue.append(node.right) else: result.append(None) # Remove trailing None values while result and result[-1] is None: result.pop() return result"},{"question":"Write a Python function `list_to_dict(lst)` that takes in a list of unique tuples where each tuple contains a key-value pair, and returns a dictionary constructed from those tuples. If the input list is empty, the function should return an empty dictionary. Example: Input: lst = [(\'a\', 1), (\'b\', 2), (\'c\', 3)] Output: {\'a\': 1, \'b\': 2, \'c\': 3} Input: lst = [] Output: {}","solution":"def list_to_dict(lst): Converts a list of unique key-value pair tuples into a dictionary. Parameters: lst (list): A list of tuples where each tuple contains a key-value pair. Returns: dict: A dictionary constructed from the key-value pairs in the list. return dict(lst)"},{"question":"Write a function that takes two integers `a` and `b` and returns the greatest common divisor (GCD) of `a` and `b` using the Euclidean algorithm. Your function should handle both positive and negative values for `a` and `b`. Assume that both integers are non-zero. Additionally, optimize your implementation to handle large integers efficiently. For example, for `a = 48` and `b = 18`, the output should be `6`.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two integers a and b using the Euclidean algorithm. Handles both positive and negative values for a and b. # Ensure a and b are positive a, b = abs(a), abs(b) while b: a, b = b, a % b return a"},{"question":"Create a function that takes an input list of integers and returns a new list with all duplicate elements removed while maintaining the original order of their first occurrences. Ensure that your function runs efficiently with a large number of input elements and handles any potential edge cases.","solution":"def remove_duplicates(input_list): Removes duplicate elements from the input list while maintaining the original order of their first occurrences. Args: input_list (list): The list of integers from which duplicates are to be removed. Returns: list: A new list with duplicates removed and the original order preserved. seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function to compute the longest palindromic subsequence in a given string. For example, given the string \\"bananas\\", the function should return \\"anana\\".","solution":"def longest_palindromic_subsequence(s): Returns the longest palindromic subsequence in the given string. def is_palindrome(sub): return sub == sub[::-1] n = len(s) if n == 0: return \\"\\" if n == 1: return s longest = s[0] for i in range(n): for j in range(i + 1, n + 1): subsequence = s[i:j] if is_palindrome(subsequence) and len(subsequence) > len(longest): longest = subsequence return longest"},{"question":"You need to develop a function that takes a list of integers and returns a dictionary where the keys are the unique integers from the list, and the values are dictionaries themselves, with keys being \'frequency\' indicating the number of times the integer appears in the list, and \'indices\' which is a list of all the indices where the integer can be found in the original list. For example, given the list: ```python numbers = [1, 2, 2, 3, 1, 2, 4] ``` The output should be: ```python { 1: {\'frequency\': 2, \'indices\': [0, 4]}, 2: {\'frequency\': 3, \'indices\': [1, 2, 5]}, 3: {\'frequency\': 1, \'indices\': [3]}, 4: {\'frequency\': 1, \'indices\': [6]} } ``` Ensure your function handles lists with various integer compositions and sizes efficiently.","solution":"def analyze_numbers(numbers): Analyzes the input list of numbers and returns a dictionary with information about the frequency and indices of each unique number. Arguments: numbers -- list of integers Returns: dict -- a dictionary where keys are the unique integers from the list, and values are dictionaries with \'frequency\' and \'indices\'. result = {} for index, number in enumerate(numbers): if number not in result: result[number] = {\'frequency\': 0, \'indices\': []} result[number][\'frequency\'] += 1 result[number][\'indices\'].append(index) return result"},{"question":"Implement a function that finds and returns the longest substring in a given string that contains all unique characters. For example: - Input: \\"abcabcbb\\" - Output: \\"abc\\" - Input: \\"bbbbb\\" - Output: \\"b\\" - Input: \\"pwwkew\\" - Output: \\"wke\\" Your function should work efficiently for long strings and handle edge cases gracefully.","solution":"def longest_unique_substring(s): Finds and returns the longest substring in a given string that contains all unique characters. start = 0 max_length = 0 max_substring = \\"\\" seen = {} for end in range(len(s)): if s[end] in seen and seen[s[end]] >= start: start = seen[s[end]] + 1 seen[s[end]] = end current_length = end - start + 1 if current_length > max_length: max_length = current_length max_substring = s[start:end+1] return max_substring"},{"question":"Write a function that takes a list of integers and returns a new list containing only the even numbers from the original list. Without using built-in filtering functions or list comprehensions, implement an algorithm that manually iterates through each element and selects the even numbers. For example, given the input list `[1, 2, 3, 4, 5, 6]`, the output should be `[2, 4, 6]`. Ensure your solution maintains efficient performance for large lists of integers.","solution":"def filter_even_numbers(numbers): Returns a new list containing only the even numbers from the original list. :param numbers: List of integers. :return: List of even integers. even_numbers = [] for number in numbers: if number % 2 == 0: even_numbers.append(number) return even_numbers"},{"question":"Implement a function that rotates a given matrix 90 degrees clockwise without using extra space for a new matrix. The function should modify the input matrix in place. Your solution should handle square matrices of any size. Here’s the starter code: ```python def rotate_matrix_90_degrees(matrix: list) -> None: Rotate the given NxN matrix 90 degrees clockwise in place. Args: matrix (list): A list of lists, where each inner list represents a row of the matrix. Example: Before rotation: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] After rotation: matrix = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] >>> matrix = [ ... [1, 2, 3], ... [4, 5, 6], ... [7, 8, 9] ... ] >>> rotate_matrix_90_degrees(matrix) >>> matrix [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ```","solution":"def rotate_matrix_90_degrees(matrix: list) -> None: Rotate the given NxN matrix 90 degrees clockwise in place. Args: matrix (list): A list of lists, where each inner list represents a row of the matrix. n = len(matrix) for i in range(n // 2): for j in range(i, n - i - 1): # Save the top element top = matrix[i][j] # Move left element to top matrix[i][j] = matrix[n - 1 - j][i] # Move bottom element to left matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j] # Move right element to bottom matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i] # Assign top element to right matrix[j][n - 1 - i] = top return matrix"},{"question":"You are given a list of dictionaries representing employees in a company. Each dictionary contains the `name`, `department`, and `salary` of an employee. Write a function `average_salary` that takes two arguments, a list of employee dictionaries and a department name. The function should calculate and return the average salary of the employees in the specified department. If the department has no employees, return `None`. Include error-checking to handle cases where the input list or department name is not valid. ```python def average_salary(employees, department): Calculates the average salary of the employees in the specified department. Parameters: - employees: List of employee dictionaries, where each dictionary includes \'name\', \'department\', and \'salary\' keys. - department: The department name (string) for which to calculate the average salary. Returns: - The average salary (float) of the given department or None if the department has no employees or if the input is invalid. Examples: employees = [ {\'name\': \'Alice\', \'department\': \'Engineering\', \'salary\': 70000}, {\'name\': \'Bob\', \'department\': \'Marketing\', \'salary\': 50000}, {\'name\': \'Charlie\', \'department\': \'Engineering\', \'salary\': 80000}, {\'name\': \'David\', \'department\': \'Sales\', \'salary\': 45000} ] >>> average_salary(employees, \'Engineering\') == 75000.0 >>> average_salary(employees, \'Marketing\') == 50000.0 >>> average_salary(employees, \'HR\') is None >>> average_salary(employees, \'\') is None >>> average_salary([], \'Engineering\') is None pass # Include your code here ```","solution":"def average_salary(employees, department): Calculates the average salary of the employees in the specified department. Parameters: - employees: List of employee dictionaries, where each dictionary includes \'name\', \'department\', and \'salary\' keys. - department: The department name (string) for which to calculate the average salary. Returns: - The average salary (float) of the given department or None if the department has no employees or if the input is invalid. if not isinstance(employees, list) or not all(isinstance(emp, dict) for emp in employees): return None if not isinstance(department, str) or not department: return None filtered_salaries = [emp[\'salary\'] for emp in employees if emp.get(\'department\') == department] if not filtered_salaries: return None return sum(filtered_salaries) / len(filtered_salaries)"},{"question":"Given a string `expression` representing an arithmetic expression in Reverse Polish Notation (RPN), evaluate the expression. The valid operators are `+`, `-`, `*`, and `/`. Each operand may be an integer or another expression. Note that division between two integers should truncate towards zero. You need to implement a function that takes a string array `tokens` representing the RPN expression and returns its value as an integer. Valid RPN expressions can be evaluated using a stack; when encountering a number, push it onto the stack, and when encountering an operator, pop the necessary operands from the stack, apply the operator, and push the result back onto the stack. Additionally, your function should handle erroneous expressions (such as attempting to divide by zero or having too few/many operators or operands) and return an error message \\"Invalid expression\\" for such cases. Example 1: Input: tokens = [\\"2\\", \\"1\\", \\"+\\", \\"3\\", \\"*\\"] Output: 9 Explanation: ((2 + 1) * 3) = 9 Example 2: Input: tokens = [\\"4\\", \\"13\\", \\"5\\", \\"/\\", \\"+\\"] Output: 6 Explanation: (4 + (13 / 5)) = 6 Example 3: Input: tokens = [\\"10\\", \\"6\\", \\"9\\", \\"3\\", \\"+\\", \\"-11\\", \\"*\\", \\"/\\", \\"*\\", \\"17\\", \\"+\\", \\"5\\", \\"+\\"] Output: 22 Explanation: (10 * (6 / ((9 + 3) * -11))) + 17 + 5 = 22 Example 4: Input: tokens = [\\"4\\", \\"0\\", \\"/\\"] Output: \\"Invalid expression\\" Explanation: Division by zero is not allowed. Example 5: Input: tokens = [\\"1\\", \\"2\\", \\"+\\"] Output: 3 Constraints: 1. `1 <= tokens.length <= 10^4` 2. `tokens[i]` is either an operator: `{\\" + \\", \\" - \\", \\" * \\", \\" / \\"}`, or an integer representing operands. 3. The input string array `tokens` will always represent a valid arithmetic expression or an invalid expression that must be identified as described.","solution":"def eval_rpn(tokens): Evaluates an arithmetic expression in Reverse Polish Notation (RPN). Args: tokens (list of str): The RPN expression tokens. Returns: int or str: The result of the evaluated expression or \\"Invalid expression\\" in case of errors. stack = [] for token in tokens: if token in {\\"+\\" , \\"-\\", \\"*\\", \\"/\\"}: if len(stack) < 2: return \\"Invalid expression\\" b = stack.pop() a = stack.pop() try: if token == \'+\': result = a + b elif token == \'-\': result = a - b elif token == \'*\': result = a * b elif token == \'/\': result = int(a / b) # Truncate towards zero except ZeroDivisionError: return \\"Invalid expression\\" stack.append(result) else: try: stack.append(int(token)) except ValueError: return \\"Invalid expression\\" if len(stack) != 1: return \\"Invalid expression\\" return stack[0]"},{"question":"Write a Python function named `expand_intervals` that takes a list of tuples, where each tuple contains two integers representing a closed interval [start, end]. The function should return a list of all integers contained within these intervals, in ascending order. You can assume that the input intervals are non-overlapping and sorted by their start value. For example: ```python def expand_intervals(intervals): # Your code here # Test Cases print(expand_intervals([(1, 3), (5, 7), (9, 9)])) # [1, 2, 3, 5, 6, 7, 9] print(expand_intervals([(4, 6), (8, 10)])) # [4, 5, 6, 8, 9, 10] print(expand_intervals([(1, 2), (10, 12)])) # [1, 2, 10, 11, 12] ```","solution":"def expand_intervals(intervals): Takes a list of tuples representing closed intervals and returns a list of all integers contained within these intervals in ascending order. result = [] for start, end in intervals: result.extend(range(start, end + 1)) return result"},{"question":"Write a Python function `validate_password(password: str) -> bool` that checks if a given password meets the following criteria: 1. It should have at least 8 characters. 2. It should include both uppercase and lowercase characters. 3. It should contain at least one numerical digit. 4. It should have at least one of the following special characters: @, #, , %, &, *. Return `True` if the password is valid, otherwise return `False`. Here\'s an example usage of the function: ```python print(validate_password(\\"Aa1@bcde\\")) # True print(validate_password(\\"Aa1bcde\\")) # False (no special character) print(validate_password(\\"aaaaaaa1@\\")) # False (no uppercase character) print(validate_password(\\"AAAAAAA1@\\")) # False (no lowercase character) print(validate_password(\\"Aa@bcd\\")) # False (less than 8 characters) ```","solution":"def validate_password(password: str) -> bool: Validates that the password meets the following criteria: 1. At least 8 characters long. 2. Contains both uppercase and lowercase characters. 3. Contains at least one numerical digit. 4. Contains at least one special character from [@, #, , %, &, *]. Parameters: password (str): The password to validate. Returns: bool: True if the password is valid, False otherwise. if len(password) < 8: return False has_upper = any(char.isupper() for char in password) has_lower = any(char.islower() for char in password) has_digit = any(char.isdigit() for char in password) has_special = any(char in \\"@#%&*\\" for char in password) return has_upper and has_lower and has_digit and has_special"},{"question":"Create a Python function called `matrix_multiplication` that takes two matrices (2D lists) as inputs and returns their product. Ensure the function checks for compatibility of the matrices for multiplication (i.e., the number of columns in the first matrix must be equal to the number of rows in the second matrix). If the matrices are not compatible, raise an appropriate exception. Your function should: - Validate inputs and raise an exception for invalid matrices. - Perform the matrix multiplication and return the resulting matrix. - Handle edge cases such as multiply by an empty matrix. Additionally, write unit tests to ensure your implementation is correct, covering cases including: - Regular matrix multiplication. - Multiplying matrices with incompatible dimensions. - Multiplying by an empty matrix.","solution":"def matrix_multiplication(matrix_a, matrix_b): Multiplies two matrices (2D lists) and returns their product. :param matrix_a: First matrix (2D list) :param matrix_b: Second matrix (2D list) :return: Resultant matrix after multiplication (2D list) :raises ValueError: If the matrices are not compatible for multiplication # Verify that matrix_a and matrix_b are non-empty and properly formatted if not matrix_a or not matrix_a[0] or not matrix_b or not matrix_b[0]: raise ValueError(\\"Input matrices cannot be empty\\") # Get the dimensions of the matrices num_rows_a = len(matrix_a) num_cols_a = len(matrix_a[0]) num_rows_b = len(matrix_b) num_cols_b = len(matrix_b[0]) # Ensure the number of columns in matrix_a matches the number of rows in matrix_b if num_cols_a != num_rows_b: raise ValueError(\\"Matrices cannot be multiplied due to incompatible dimensions\\") # Initialize the resulting matrix with zeros result = [[0] * num_cols_b for _ in range(num_rows_a)] # Perform the matrix multiplication for i in range(num_rows_a): for j in range(num_cols_b): for k in range(num_cols_a): result[i][j] += matrix_a[i][k] * matrix_b[k][j] return result"},{"question":"Given a binary search tree (BST), the task is to convert it into a greater sum tree (GST) where every node\'s value is updated to the sum of all node values greater or equal to it in the original BST. The value of each node in the GST is calculated as follows: - Traverse the BST in reverse in-order (right -> node -> left). - Accumulate the sum of node values encountered so far. - Update the node\'s value with the accumulated sum. For example, consider the following examples: Example 1: Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8] Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8] Explanation: 4 30 / / 1 6 => 36 21 / / / / 0 2 5 7 36 35 26 15 3 8 33 8 - The node values are updated to: - 8 -> 8 (as it\'s the maximum value) - 7 -> 7 + 8 = 15 - 6 -> 6 + 15 + 8 = 29 - 5 -> 5 + 29 + 15 + 8 = 57 - 4 -> 4 + 57 = 61 - 3 -> 3 + 61 = 64 (already accounted since it\'s the left child\'s sibling) - 2 -> 2 + 64 + 61 = 127 - 1 -> 1 + 127 + 64 = 192 - 0 -> 0 + 192 = 192 Example 2: Input: root = [0,null,1] Output: [1,null,1] Explanation: - Only two nodes 0 and 1, where: - 1 -> 1 (as it\'s the maximum value) - 0 -> 0 + 1 = 1 Constraints: - The number of nodes in the BST is within the range `[1, 104]`. - `0 <= Node.val <= 104`","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def bst_to_gst(root): Convert a BST to a Greater Sum Tree (GST) where every node\'s value is updated to the sum of all node values greater or equal to it in the original BST. def reverse_inorder_traversal(node, accumulator): if not node: return accumulator accumulator = reverse_inorder_traversal(node.right, accumulator) node.val += accumulator accumulator = node.val accumulator = reverse_inorder_traversal(node.left, accumulator) return accumulator reverse_inorder_traversal(root, 0) return root"},{"question":"Reverse the order of words in a sentence while keeping the characters in each word unchanged. Ignore any punctuation and extra spaces. sentence = \\" Hello, world! This is an example. \\"","solution":"def reverse_words(sentence): Reverses the order of words in a sentence while keeping the characters in each word unchanged. Args: sentence (str): The input sentence. Returns: str: The sentence with reversed word order. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Complete the implementation of the function `merge_sorted_lists(list1, list2)`. This function takes in two lists of integers, `list1` and `list2`, both of which are already sorted in non-decreasing order. The function should return a single merged list that contains all the integers from both input lists but is also sorted in non-decreasing order. Please ensure your solution handles the edge cases where one or both input lists may be empty and still returns the correct merged and sorted list. **Example:** ```python def merge_sorted_lists(list1, list2): # Your code here # Testing the function print(merge_sorted_lists([1, 3, 5], [2, 4, 6])) # Output: [1, 2, 3, 4, 5, 6] print(merge_sorted_lists([1, 2, 3], [])) # Output: [1, 2, 3] print(merge_sorted_lists([], [4, 5, 6])) # Output: [4, 5, 6] print(merge_sorted_lists([], [])) # Output: [] print(merge_sorted_lists([1, 2], [1, 2])) # Output: [1, 1, 2, 2] ```","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Parameters: list1 (list): The first sorted list. list2 (list): The second sorted list. Returns: list: A single sorted list containing all elements from list1 and list2. merged_list = [] i, j = 0, 0 # Traverse both lists and append smaller element to the merged list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append any remaining elements from list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Append any remaining elements from list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Create a function in Python that takes in a list of integers and identifies the first integer that is repeated. If no integer is repeated, the function should return -1. The function should have an optimal time complexity of O(n). Additionally, write test cases to validate the correctness of your function. Make sure your solution can handle edge cases, such as an empty list or a list with only one element.","solution":"def first_repeated_integer(lst): This function takes a list of integers and returns the first integer that is repeated. If no integer is repeated, the function returns -1. seen = set() for num in lst: if num in seen: return num seen.add(num) return -1"},{"question":"Please implement a function in Python that takes a list of strings and returns a dictionary where the keys are individual words from the strings, and the values represent the count of how many times each word appeared across all input strings. Words should be treated case insensitively, and the output dictionary\'s keys should be lowercase. ```python def count_words(strings: list): Count the occurrences of each word in a list of strings, case insensitively. Args: strings: A list of strings. Returns: A dictionary with words as keys (in lowercase) and their counts as values. word_count = {} for string in strings: words = string.split() for word in words: # Process word to lowercase word_lower = word.lower() if word_lower in word_count: word_count[word_lower] += 1 else: word_count[word_lower] = 1 return word_count # Example usage: print(count_words([\\"Hello world\\", \\"HELLO\\", \\"world of Python\\", \\"Python programming\\"])) # Expected output: {\'hello\': 2, \'world\': 2, \'of\': 1, \'python\': 2, \'programming\': 1} ```","solution":"def count_words(strings: list): Count the occurrences of each word in a list of strings, case insensitively. Args: strings: A list of strings. Returns: A dictionary with words as keys (in lowercase) and their counts as values. word_count = {} for string in strings: words = string.split() for word in words: # Process word to lowercase word_lower = word.lower() if word_lower in word_count: word_count[word_lower] += 1 else: word_count[word_lower] = 1 return word_count"},{"question":"Write a function that takes a string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' and determines if the input string is valid. An input string is valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. 3. Every close bracket has a corresponding open bracket of the same type. Your solution should use a stack data structure to achieve this, ensuring that the time complexity is O(n). The function should return a boolean value indicating whether the input string is valid.","solution":"def is_valid_parentheses(s): Determines if the input string containing only \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is valid based on the specified conditions. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: return False return stack == []"},{"question":"Write a function \'calculate_factorial\' that takes a non-negative integer as input and returns its factorial. If the input is not a non-negative integer, the function should raise a ValueError with an appropriate error message. Use recursion to solve this problem.","solution":"def calculate_factorial(n): Returns the factorial of a non-negative integer n using recursion. Raises a ValueError if n is not a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 return n * calculate_factorial(n - 1)"},{"question":"You are given a string that contains a mix of alphabets, numbers, and special characters. The task is to extract all the numbers from the string and output them as a list of integers in the same order as they appear in the string. If a number contains multiple digits, it should be considered as a single number. For example: Input: \\"abc123def45gh-1\\" Output: [123, 45, -1]","solution":"import re def extract_numbers(input_string): Extract all numbers from the input string and return them as a list of integers. # Use regex to find all sequences of digits, considering possible negative sign numbers = re.findall(r\'-?d+\', input_string) # Convert the found sequences to integers return [int(num) for num in numbers]"},{"question":"Determine the String\'s Validity: Write a function that checks if a given string contains balanced parentheses. The string consists of characters such as `(`, `)`, `{`, `}`, `[` and `]`. The function should return `True` if the string contains a valid sequence of parentheses and `False` otherwise. For instance, the input string \\"([]){}\\" should return `True`, while the string \\"([)]{}\\" should return `False`.","solution":"def is_balanced(s): Returns True if the string s contains a valid sequence of parentheses. stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or matching_parentheses[char] != stack.pop(): return False else: # In case the string contains characters other than parentheses, ignore them continue return stack == []"},{"question":"Write a function that takes a list of integers and returns a new list with each integer incremented by the number of times it appears in the original list. Additionally, create a verification mechanism to check if the new list is correctly calculated based on the appearance count of each number. Use error handling to manage potential issues. The method should be designed to handle large lists efficiently, ensuring optimal performance even with extensive inputs.","solution":"from collections import Counter def increment_by_occurrences(lst): Takes a list of integers and returns a new list with each integer incremented by the number of times it appears in the original list. try: # Count the occurrences of each integer in the list occurrences = Counter(lst) # Create a new list with updated values based on their occurrences new_lst = [x + occurrences[x] for x in lst] return new_lst except Exception as e: # Error handling: return an error message for debugging return f\\"An error occurred: {str(e)}\\""},{"question":"Create a Python function that takes an input string and returns the longest substring without repeating characters. Your solution should utilize efficient data structures or algorithms for optimal performance. Provide the implementation and a brief explanation of the logic used.","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. Parameters: s (str): Input string Returns: str: Longest unique substring without repeating characters char_index_map = {} start = 0 max_length = 0 longest_substring = \\"\\" for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i if i - start + 1 > max_length: max_length = i - start + 1 longest_substring = s[start:i + 1] return longest_substring # Explanation: # We maintain a sliding window using two pointers: `start` and current index `i`. # We use a dictionary `char_index_map` to record the last seen index of characters in the string. # If we encounter a repeating character within the current window, we move the `start` pointer to the right of the last occurrence. # This ensures that the substring between `start` and `i` has all unique characters. # The variable `max_length` keeps track of the length of the longest unique substring found so far, # and `longest_substring` holds the actual substring."},{"question":"Write a function that takes a string representing a mathematical expression containing only non-negative integers and the operators +, -, *, and / (without parentheses) and evaluates the expression. The function should return the result as a floating-point number rounded to two decimal places. Ensure your implementation handles operator precedence correctly (i.e., multiplication and division before addition and subtraction). Example input: \\"3+5*2/2-4\\" Example output: 4.00 **Constraints:** 1. The input string will always be a valid expression. 2. The result should handle division by zero by returning `None`.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression from a string containing only non-negative integers and operators +, -, *, and /, considering operator precedence. Parameters: expression (str): mathematical expression to evaluate Returns: float: The result of the expression rounded to two decimal places, or None if there is a division by zero. def safe_divide(a, b): if b == 0: return None return a / b tokens = [] num = 0 prev_op = \'+\' for i, ch in enumerate(expression): if ch.isdigit(): num = num * 10 + int(ch) if ch in \'+-*/\' or i == len(expression) - 1: if i == len(expression) - 1 and ch.isdigit(): tokens.append((prev_op, num)) else: tokens.append((prev_op, num)) prev_op = ch num = 0 # Handling the multiplication and division first stack = [] while tokens: op, num = tokens.pop(0) if op == \'*\': stack.append(stack.pop() * num) elif op == \'/\': divided = safe_divide(stack.pop(), num) if divided is None: return None stack.append(divided) else: stack.append(num) if op != \'+\': stack[-1] *= -1 # Handling the addition and subtraction return round(sum(stack), 2)"},{"question":"Write a function that takes a list of integers and rearranges its elements so that all even numbers appear before all odd numbers, while maintaining the relative order of the even and odd numbers. Do not use any built-in sorting functions to achieve this. The function should have a linear time complexity.","solution":"def rearrange_even_odd(nums): Rearranges a list of integers so that all even numbers appear before all odd numbers, while maintaining the relative order of the even and odd numbers. :param nums: List of integers :return: List of integers with all even numbers first, followed by odd numbers even_nums = [] odd_nums = [] for num in nums: if num % 2 == 0: even_nums.append(num) else: odd_nums.append(num) return even_nums + odd_nums"},{"question":"Write a Python function that, given a list of integers, returns the sum of all elements that are greater than a given threshold. The function should take two arguments: the list of integers and the threshold value. Ensure to handle edge cases where the list might be empty or no elements surpass the threshold. Example: ``` Input: [4, 7, 1, 12, 3], 5 Output: 19 Input: [10, 20, 30], 25 Output: 30 Input: [1, 2, 3, 4], 10 Output: 0 ```","solution":"def sum_above_threshold(numbers, threshold): Returns the sum of all elements in the list that are greater than the given threshold. Args: numbers (list of int): The list of integers. threshold (int): The threshold value. Returns: int: The sum of all elements greater than the threshold. If no elements are found, returns 0. return sum(num for num in numbers if num > threshold)"},{"question":"Write a function called `sortedArraySquares` that takes a list of integers `nums` sorted in non-decreasing order, and returns a list of the squares of each number in sorted non-decreasing order. For example, if the input is `[-4, -1, 0, 3, 10]`, the function should return `[0, 1, 9, 16, 100]`. Ensure that your solution works with positive, negative, and zero values in the input list. Consider the efficiency of your solution.","solution":"def sortedArraySquares(nums): Given a list of integers sorted in non-decreasing order, returns a list of the squares of each number in sorted non-decreasing order. Args: nums (list): List of integers sorted in non-decreasing order. Returns: list: List of the squares of each number in sorted non-decreasing order. n = len(nums) result = [0] * n left, right = 0, n - 1 index = n - 1 while left <= right: left_square = nums[left] ** 2 right_square = nums[right] ** 2 if left_square > right_square: result[index] = left_square left += 1 else: result[index] = right_square right -= 1 index -= 1 return result"},{"question":"Write a Python function that takes a string as an input and returns the character that appears the most frequently in the string. Ignore case sensitivity and special characters. If there are multiple characters with the same highest frequency, return the one that appears first in the string. ```python def most_frequent_char(s): s = s.lower() frequency = {} for char in s: if char.isalpha(): if char in frequency: frequency[char] += 1 else: frequency[char] = 1 max_char = \'\' max_count = 0 for char in s: if char in frequency and frequency[char] > max_count: max_char = char max_count = frequency[char] return max_char # Sample input input_string = \\"A man a plan a canal Panama\\" # Sample output print(most_frequent_char(input_string)) # Output: \'a\' ```","solution":"def most_frequent_char(s): Returns the character that appears the most frequently in the string. Ignores case sensitivity and special characters. If multiple characters have the same highest frequency, returns the first one. s = s.lower() frequency = {} for char in s: if char.isalpha(): if char in frequency: frequency[char] += 1 else: frequency[char] = 1 max_char = \'\' max_count = 0 for char in s: if char in frequency and frequency[char] > max_count: max_char = char max_count = frequency[char] return max_char # Sample input input_string = \\"A man a plan a canal Panama\\" # Sample output print(most_frequent_char(input_string)) # Output: \'a\'"},{"question":"Create a function in Python that takes a string and returns the count of each vowel (a, e, i, o, u) present in the string. The function should be case-insensitive and must return a dictionary with vowels as keys and their counts as values. Additionally, the function should have a time complexity of O(n), where n is the length of the string. Furthermore, implement a helper function that can determine the most frequent vowel in the given string. If there is a tie, return the vowel that appears first in the alphabetical order.","solution":"def count_vowels(s): Count the number of each vowel in the string s (case-insensitive). Parameters: s (str): The input string. Returns: dict: A dictionary with vowels as keys and their counts as values. s = s.lower() vowels = \'aeiou\' counts = {vowel: 0 for vowel in vowels} for char in s: if char in vowels: counts[char] += 1 return counts def most_frequent_vowel(s): Determine the most frequent vowel in the string s (case-insensitive). Parameters: s (str): The input string. Returns: str: The most frequent vowel; if there\'s a tie, the vowel that appears first in alphabetical order is returned. counts = count_vowels(s) return max(counts, key=lambda vowel: (counts[vowel], -ord(vowel)))"},{"question":"Given a list of strings, write a function that groups the anagrams together. Anagrams are strings that can be formed by rearranging the letters of another string, using all the original letters exactly once. Your function should return a list of lists, where each list contains anagrams grouped together. For example, given the input `[\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]`, the output should be `[[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]]`. Ensure your solution is efficient both in terms of time and space complexity.","solution":"from collections import defaultdict def group_anagrams(strs): Groups anagrams together from the given list of strings. Parameters: strs (list): List of strings to be grouped. Returns: list: List of lists containing grouped anagrams. anagram_map = defaultdict(list) for s in strs: # Sort the string and use it as a key sorted_str = \'\'.join(sorted(s)) anagram_map[sorted_str].append(s) # Return the values of the map as a list of lists return list(anagram_map.values())"},{"question":"Develop a function that accepts an array of integers and returns a new array with elements rearranged in such a way that all positive numbers appear before all the negative ones while maintaining their relative order. Format the solution to have linear time complexity and constant space complexity, excluding the space required to hold the input and the output arrays.","solution":"def rearrange_array(arr): Rearranges the array so that all positive numbers appear before all the negative ones while maintaining their relative order. :param arr: List of integers :return: List with all positive numbers before all negative numbers if not arr: return [] # Initialize two lists to hold positive and negative numbers separately positive = [] negative = [] # Traverse the array and separate the positive and negative numbers for num in arr: if num >= 0: positive.append(num) else: negative.append(num) # Combine the positive and negative numbers return positive + negative"},{"question":"Implement a function that takes a list of strings and returns a dictionary where each key is a string from the input list and the corresponding value is a list of strings that are anagrams of the key found in the original list. **Function Signature:** ```python def group_anagrams(words: list) -> dict: Args: words (list): List of strings to be analyzed for anagrams. Returns: dict: A dictionary where each key is a string and the associated value is a list of anagrams of that string from the original list. pass ``` **Example:** ```python words = [\\"listen\\", \\"silent\\", \\"it\\", \\"enlist\\", \\"inlets\\", \\"man\\", \\"nam\\"] print(group_anagrams(words)) ``` **Expected Output:** ```python { \'listen\': [\'silent\', \'enlist\', \'inlets\'], \'silent\': [\'listen\', \'enlist\', \'inlets\'], \'enlist\': [\'listen\', \'silent\', \'inlets\'], \'inlets\': [\'listen\', \'silent\', \'enlist\'], \'man\': [\'nam\'], \'nam\': [\'man\'], \'it\': [] } ``` **Constraints:** - All strings in the input list will consist of only lowercase English letters. - The function should be case-insensitive but preserve the original case in the output.","solution":"def group_anagrams(words: list) -> dict: Args: words (list): List of strings to be analyzed for anagrams. Returns: dict: A dictionary where each key is a string and the associated value is a list of anagrams of that string from the original list. from collections import defaultdict # Helper function to sort a word def sort_word(word): return \'\'.join(sorted(word)) # A dictionary to hold sorted words as keys and original words as values sorted_dict = defaultdict(list) # Populate the dictionary with sorted words for word in words: sorted_dict[sort_word(word)].append(word) # Create the final dictionary of anagrams anagrams = {} for word in words: sorted_word = sort_word(word) anagram_list = [w for w in sorted_dict[sorted_word] if w != word] anagrams[word] = anagram_list return anagrams"},{"question":"Design a function that accepts an integer array and returns a new array with each element squared and sorted in non-decreasing order. The function should handle negative numbers, zeros, and positive integers correctly. The original array should remain unmutated. Handle cases where the input array is empty or contains duplicates.","solution":"def sorted_squared_array(arr): Returns a new array with each element squared and sorted in non-decreasing order from the given array. Args: arr (list of int): The input array containing integers. Returns: list of int: The new array with squared elements sorted in non-decreasing order. squared = [x ** 2 for x in arr] squared.sort() return squared"},{"question":"Develop a function that takes in two integers \'start\' and \'end\', and returns the count of prime numbers between them (inclusive). A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers, other than 1 and itself. The function should efficiently handle the range where \'end\' can be as large as 10^5.","solution":"def count_primes_in_range(start, end): Returns the count of prime numbers between start and end (inclusive). def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True count = 0 for num in range(start, end + 1): if is_prime(num): count += 1 return count"},{"question":"Write a function that accepts a string containing a mathematical expression involving positive integers and the four basic arithmetic operators (+, -, *, /). Your function should return the result of evaluating the expression. The expression may include parentheses, which change the precedence of operations. You must handle invalid input by returning an appropriate error message. Aim to implement the shunting-yard algorithm or a similar approach to ensure proper operator precedence and associativity. Avoid using Python\'s built-in `eval()` function.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing positive integers and the operators +, -, *, /, and parentheses for changing precedence. Returns the evaluation result or an error message for invalid input. def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_op(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a // b if b != 0 else \'Error: Division by zero\' def is_number(n): try: int(n) return True except ValueError: return False def shunting_yard(exp): values = [] ops = [] i = 0 while i < len(exp): if exp[i] == \' \': i += 1 continue elif exp[i] == \'(\': ops.append(exp[i]) elif is_number(exp[i]): val = 0 while i < len(exp) and is_number(exp[i]): val = val * 10 + int(exp[i]) i += 1 values.append(val) i -= 1 elif exp[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(exp[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.append(exp[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) return values[-1] try: result = shunting_yard(expression) if isinstance(result, str) and \'Error\' in result: return result return float(result) except Exception as e: return \\"Error: Invalid input\\""},{"question":"Create a function that determines if a given string can be permuted to form a palindrome. Specifically, the function should: - Accept a string input. - Check if any permutation of the string could be rearranged to create a palindrome. - Ignore spaces and consider the permutation case-insensitive. - Return True if a palindrome permutation is possible, and False otherwise. # Example ```python can_form_palindrome(\\"Tact Coa\\") -> True # \\"tacocat\\", \\"atcocta\\", etc. ``` # Constraints - Input string length will be between 1 and 100 characters. - The string will contain only alphabetic characters and spaces.","solution":"def can_form_palindrome(s): Determines if any permutation of the input string could be rearranged to form a palindrome. Ignores spaces and is case-insensitive. Args: s (str): The input string. Returns: bool: True if a palindrome permutation is possible, False otherwise. s = s.replace(\\" \\", \\"\\").lower() char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Develop a code that takes a string consisting of alphabetic characters and digits, and reorders the string such that all alphabetic characters appear at the beginning in uppercase followed by all digits in ascending order. The original order of the alphabetic characters should be preserved (case should be ignored for sorting purposes), but they should be converted to uppercase. For example: Input: \\"d3c2a4B1\\" Output: \\"CDAB1234\\" Your goal is to ensure the solution is optimized and handles different types of alphanumeric strings gracefully.","solution":"def reorder_string(s): Reorders the string such that all alphabetic characters appear at the beginning in uppercase followed by all digits in ascending order. The original order of the alphabetic characters is preserved, but they are converted to uppercase. Parameters: s (str): The input string containing alphabetic characters and digits. Returns: str: The reordered string. letters = [char.upper() for char in s if char.isalpha()] digits = sorted([char for char in s if char.isdigit()]) return \'\'.join(letters) + \'\'.join(digits)"},{"question":"Write a Python function that takes an input string and returns the character that appears the most frequently. If there is a tie, return the character that appears first in alphabetical order. The function should also return the number of times this character appears in the string. The function should return these two values as a tuple. ```python def most_frequent_char(s: str): Return the most frequent character in a string along with its frequency count. ```","solution":"def most_frequent_char(s: str): Return the most frequent character in a string along with its frequency count. If there is a tie, return the character that appears first in alphabetical order. if not s: return None, 0 from collections import Counter # Count the frequency of each character in the string counter = Counter(s) # Get the maximum frequency max_freq = max(counter.values()) # Collect all characters with the maximum frequency most_frequent_chars = [char for char, count in counter.items() if count == max_freq] # Return the lexicographically smallest character with its frequency return min(most_frequent_chars), max_freq"},{"question":"Design a function that takes a list of words and an integer `k` and returns the `k` most frequent words in the list. If two words have the same frequency, the function should prioritize the word that comes first alphabetically. Below is a piece of problematic code; identify and correct it to achieve the required functionality: ```python # Erroneous code from collections import Counter def topKFrequent(words, k): count = Counter(words) candidates = count.keys() candidates.sort(key=lambda w: (-count[w], w)) return candidates[:k] words = [\\"banana\\", \\"apple\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"banana\\", \\"pear\\"] k = 2 print(topKFrequent(words, k)) ``` Expected output: [\'banana\', \'apple\']","solution":"from collections import Counter def topKFrequent(words, k): Returns the k most frequent words from the given list. If two words have the same frequency, the word that comes first alphabetically is prioritized. count = Counter(words) candidates = list(count.keys()) candidates.sort(key=lambda w: (-count[w], w)) return candidates[:k]"},{"question":"Construct a Python function that takes in a list of integers and a target integer value and returns all unique quadruplets [a, b, c, d] from the list that add up to the target value. The solution should not include duplicate quadruplets, and it should handle edge cases such as when the list is empty or contains fewer than four elements. The function should be optimized for performance to handle large inputs efficiently. Example output for the input list `nums = [1, 0, -1, 0, -2, 2]` and target `0` should be `[[ -2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]`. Consider the following flawed Python code: ```python def four_sum(nums, target): nums.sort() result = [] for i in range(len(nums)-3): for j in range(i+1, len(nums)-2): left = j + 1 right = len(nums) - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: result.append([nums[i], nums[j], nums[left], nums[right]]) left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return result print(four_sum([1, 0, -1, 0, -2, 2], 0)) ``` Identify the mistakes in the provided code and correct them to ensure the function handles duplicates properly and optimizes performance. Implement additional edge case handling and any necessary improvements to accommodate large input sizes.","solution":"def four_sum(nums, target): nums.sort() result = [] n = len(nums) for i in range(n - 3): if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue left = j + 1 right = n - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: result.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return result"},{"question":"Develop an algorithm that takes a string containing only lowercase alphabetical characters and determines if the string can be rearranged into a palindrome. If it can, return one possible palindromic arrangement of the string. If it cannot, return an appropriate indication that forming a palindrome is not possible. For example, given the input string \'racecar\', the algorithm should return \'racecar\' or any valid palindromic permutation such as \'rcaeacr\'. For the input string \'hello\', the algorithm should return \'Not possible\' as no permutation of \'hello\' can form a palindrome. Moreover, test the algorithm across a variety of edge cases to ensure coverage of different scenarios that might be encountered.","solution":"from collections import Counter def can_form_palindrome(s): Determines if the string can be rearranged into a palindrome and returns one possible palindromic arrangement or \'Not possible\' if it cannot be done. # Count the frequency of each character char_count = Counter(s) # Check how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count > 1: return \'Not possible\' left_half = [] right_half = [] middle = \\"\\" for char, count in char_count.items(): if count % 2 == 1: middle = char left_half.append(char * (count // 2)) left_half = \'\'.join(left_half) right_half = left_half[::-1] return left_half + middle + right_half"},{"question":"Given a sorted array of unique integers `arr`, write a function to find the maximum gap between any two consecutive elements of the array. The function should return an array with two elements: the maximum gap and a pair of consecutive elements that have this maximum gap. # Example 1 Input: arr = [1, 3, 7, 9, 12] Output: [3, [7, 9]] Explanation: The consecutive pairs and their gaps are: (1, 3) with gap 2 (3, 7) with gap 4 (7, 9) with gap 2 (9, 12) with gap 3 The maximum gap is 4, between elements 3 and 7. # Example 2 Input: arr = [5, 8, 19, 25, 42] Output: [17, [25, 42]] Explanation: The consecutive pairs and their gaps are: (5, 8) with gap 3 (8, 19) with gap 11 (19, 25) with gap 6 (25, 42) with gap 17 The maximum gap is 17, between elements 25 and 42. # Example 3 Input: arr = [3, 5, 11, 17, 22] Output: [6, [5, 11]] Explanation: The consecutive pairs and their gaps are: (3, 5) with gap 2 (5, 11) with gap 6 (11, 17) with gap 6 (17, 22) with gap 5 The maximum gap is 6, between elements 5 and 11. Note here that there are multiple gaps with the same length. The function should return any one pair with the maximum gap. # Constraints - `2 <= arr.length <= 1000` - `-10^6 <= arr[i] <= 10^6` - `arr` is sorted in ascending order. - `arr` contains unique integers. You may assume that the input array meets the above constraints.","solution":"def maximum_gap(arr): Find the maximum gap between any two consecutive elements of the sorted array. Parameters: arr (list): A sorted list of unique integers. Returns: list: A list containing the maximum gap and the pair of consecutive elements that have this maximum gap. max_gap = 0 max_pair = [arr[0], arr[1]] for i in range(1, len(arr)): gap = arr[i] - arr[i - 1] if gap > max_gap: max_gap = gap max_pair = [arr[i - 1], arr[i]] return [max_gap, max_pair]"},{"question":"The problem is as follows: Group Words with Similar Characters Description: Given a list of lowercase words, group the words that are formed by the same set of characters. Each group should be represented as a list of words in any order. For example, the words \\"ab\\" and \\"ba\\" should be grouped together, but \\"ab\\" and \\"bc\\" should not be considered the same group. Return a list of lists containing grouped words. Example 1: Input: [\\"abc\\", \\"bca\\", \\"cab\\", \\"cba\\", \\"hello\\", \\"eholl\\"] Output: [[\\"abc\\", \\"bca\\", \\"cab\\", \\"cba\\"], [\\"hello\\", \\"eholl\\"]] Example 2: Input: [\\"abcd\\", \\"dcba\\", \\"abdc\\", \\"adbc\\", \\"xyz\\", \\"yxz\\"] Output: [[\\"abcd\\", \\"dcba\\", \\"abdc\\", \\"adbc\\"], [\\"xyz\\", \\"yxz\\"]] Example 3: Input: [\\"a\\", \\"b\\", \\"c\\"] Output: [[\\"a\\"], [\\"b\\"], [\\"c\\"]] Example 4: Input: [\\"ab\\", \\"ba\\", \\"ac\\", \\"ca\\", \\"bc\\", \\"cb\\"] Output: [[\\"ab\\", \\"ba\\"], [\\"ac\\", \\"ca\\"], [\\"bc\\", \\"cb\\"]] Example 5: Input: [] Output: [] Constraints: - All words in the input list will consist of only lowercase letters. - The length of the input list will not exceed 1000. - The length of each word will not exceed 100.","solution":"from collections import defaultdict def group_words_with_similar_characters(words): Groups words that are formed by the same set of characters. :param words: List of lowercase words. :return: List of lists containing grouped words. grouped_words = defaultdict(list) for word in words: key = \'\'.join(sorted(word)) grouped_words[key].append(word) return list(grouped_words.values())"},{"question":"Write a function that takes a string as input and returns the longest palindrome substring in that string. The function should handle inputs efficiently and ensure that substrings with length one are also considered valid palindromes. Implement the code to manage edge cases sensitively, such as empty strings, strings with only one character, and strings with no palindrome sequences.","solution":"def longest_palindrome(s): Returns the longest palindromic substring in the given string s. if not s: return \\"\\" n = len(s) start, max_length = 0, 1 # Function to expand around center def expand_around_center(left, right): nonlocal start, max_length while left >= 0 and right < n and s[left] == s[right]: current_length = right - left + 1 if current_length > max_length: start = left max_length = current_length left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return s[start:start + max_length] # Example usage # result = longest_palindrome(\\"babad\\") # print(result) # Outputs: \\"bab\\" (or \\"aba\\" as both are correct)"},{"question":"Write a Python function that accepts an integer representing an amount of money in cents and returns a dictionary with the minimum number of coins (quarters, dimes, nickels, and pennies) needed to make that amount. The function should try to use the largest denomination coins first. Ensure that the function properly handles edge cases, such as negative inputs or very small amounts of money. Example: ```python def make_change(amount): # Your code here # Test cases print(make_change(87)) # Output: {\'quarters\': 3, \'dimes\': 1, \'nickels\': 0, \'pennies\': 2} print(make_change(99)) # Output: {\'quarters\': 3, \'dimes\': 2, \'nickels\': 0, \'pennies\': 4} print(make_change(-5)) # Output: {\'quarters\': 0, \'dimes\': 0, \'nickels\': 0, \'pennies\': 0} print(make_change(0)) # Output: {\'quarters\': 0, \'dimes\': 0, \'nickels\': 0, \'pennies\': 0} ```","solution":"def make_change(amount): Given an amount of money in cents, returns a dictionary with the minimum number of coins (quarters, dimes, nickels, and pennies) needed to make that amount. if amount <= 0: return {\'quarters\': 0, \'dimes\': 0, \'nickels\': 0, \'pennies\': 0} change = {} change[\'quarters\'], remaining = divmod(amount, 25) change[\'dimes\'], remaining = divmod(remaining, 10) change[\'nickels\'], remaining = divmod(remaining, 5) change[\'pennies\'] = remaining return change"},{"question":"You are given a list of strings, where each string represents a sentence. Your task is to write a function that groups the sentences that are anagrams of each other. Two sentences are considered anagrams if you can rearrange the characters of one to get the other, ignoring spaces and case differences. Your function should return a list of groups, where each group contains sentences that are anagrams of each other. # Input - A list of sentences (strings). # Output - A list of lists, where each inner list contains sentences that are anagrams of each other. # Constraints - The input list will contain at most 1000 sentences. - Each sentence will contain at most 100 characters. # Example Input: ```python [ \\"Listen\\", \\"Silent\\", \\"The eyes\\", \\"They see\\", \\"Dormitory\\", \\"Dirty room\\", \\"School master\\", \\"The classroom\\", \\"Conversation\\", \\"Voices rant on\\" ] ``` Output: ```python [ [\\"Listen\\", \\"Silent\\"], [\\"The eyes\\", \\"They see\\"], [\\"Dormitory\\", \\"Dirty room\\"], [\\"School master\\", \\"The classroom\\"], [\\"Conversation\\", \\"Voices rant on\\"] ] ``` # Note - Sentences that are exact anagrams should be grouped together. - The order of the groups and the order of sentences within each group does not matter.","solution":"from collections import defaultdict def group_anagram_sentences(sentences): def normalize_sentence(sentence): return \'\'.join(sorted(sentence.replace(\\" \\", \\"\\").lower())) anagram_groups = defaultdict(list) for sentence in sentences: key = normalize_sentence(sentence) anagram_groups[key].append(sentence) return list(anagram_groups.values())"},{"question":"You have been given a list of expressions as strings. Each expression contains several variables (represented as lowercase English letters) and integers. Your task is to determine the integer value of the expression after evaluating the variables with the provided values. Write a function `evaluate_expression` that takes two parameters: 1. `expressions` - a list of strings, where each string represents a mathematical expression containing variables and integers. 2. `values` - a dictionary where the keys are variable names (strings) and the values are their corresponding integer values. You should return a list of evaluated integer results for each expression in the same order as the input list. Expressions are guaranteed not to contain any whitespace and are composed of only integers (both positive and negative), variables (single lowercase letters), and the basic arithmetic operators `+` and `-`. # Example: ```python expressions = [\\"a+1\\", \\"b-2+a\\", \\"3-c\\"] values = {\\"a\\": 2, \\"b\\": 5, \\"c\\": 1} print(evaluate_expression(expressions, values)) # Output: [3, 5, 2] ``` # Constraints: - Each expression is a non-empty string of length between 1 and 100. - There will be at most 26 distinct variables. - The dictionary `values` always contains all variables present in the expressions. - The final result of evaluating each expression will fit within a standard 32-bit signed integer range (-2^31 to 2^31 - 1). Write your solution in Python.","solution":"def evaluate_expression(expressions, values): Evaluates a list of expressions with the provided variable values. :param expressions: List of strings, each representing a mathematical expression :param values: Dictionary containing the values of variables :return: List of evaluated integer results for each expression results = [] for expression in expressions: for var, val in values.items(): expression = expression.replace(var, str(val)) results.append(eval(expression)) return results"},{"question":"Implement a function that flattens a nested list of integers. The nested list can be arbitrarily deep. Do not use any built-in library functions for flattening. Provide an example of how your function works. ```python def flatten_list(nested_list): # Your code here # Example usage: nested_list = [1, [2, [3, [4, 5], 6], 7], 8] flattened = flatten_list(nested_list) print(flattened) # Output should be: [1, 2, 3, 4, 5, 6, 7, 8] ```","solution":"def flatten_list(nested_list): Flattens a nested list of integers. flat_list = [] for item in nested_list: if isinstance(item, list): flat_list.extend(flatten_list(item)) else: flat_list.append(item) return flat_list # Example usage: nested_list = [1, [2, [3, [4, 5], 6], 7], 8] flattened = flatten_list(nested_list) print(flattened) # Output should be: [1, 2, 3, 4, 5, 6, 7, 8]"},{"question":"Develop a Python function that takes a dictionary as input where the keys are strings representing student names and the values are lists of integers representing their scores in multiple exams. The function should return the name of the student with the highest average score across all exams. If there are multiple students with the same highest average score, return the name of the student that comes first alphabetically. Additionally, provide a sample input and output for the function.","solution":"def student_with_highest_average(scores_dict): Returns the name of the student with the highest average score. If there are multiple students with the same highest average score, returns the lexicographically smallest name. highest_avg = float(\'-inf\') top_student = None for student, scores in scores_dict.items(): avg_score = sum(scores) / len(scores) if avg_score > highest_avg or (avg_score == highest_avg and student < top_student): highest_avg = avg_score top_student = student return top_student # Sample input sample_scores = { \\"Alice\\": [90, 80, 70], \\"Bob\\": [85, 90, 95], \\"Charlie\\": [100, 100, 100], \\"David\\": [90, 90, 90] } # Expected output: \\"Charlie\\" print(student_with_highest_average(sample_scores))"},{"question":"Write a function that takes in a list of integers and a target sum. The function should return a list of all pairs of integers in the list that add up to the target sum. Each pair should be returned as a tuple, and the list of pairs should be sorted in ascending order by the first value of each tuple. If no pairs are found, the function should return an empty list. For example, if the input list is [1, 2, 3, 4, 5, 6] and the target sum is 7, the function should return [(1, 6), (2, 5), (3, 4)]. If the input list is [1, 1, 2, 3, 4] and the target sum is 8, the function should return [].","solution":"def find_pairs_with_sum(int_list, target_sum): Returns a list of all pairs of integers in the list that add up to the target sum. Each pair is returned as a tuple, and the list of pairs is sorted in ascending order by the first value of each tuple. pairs = [] int_list = sorted(int_list) # sort the input list to handle pairs in the ascending order for i in range(len(int_list)): for j in range(i + 1, len(int_list)): if int_list[i] + int_list[j] == target_sum: pairs.append((int_list[i], int_list[j])) return pairs"},{"question":"Implement a function to flatten a nested dictionary. The keys in the nested dictionary are strings, and the values can be either strings or other dictionaries. The function should return a new dictionary where the keys are dot-separated paths to each value in the original dictionary. For example: ``` Input: { \\"a\\": { \\"b\\": \\"c\\", \\"d\\": { \\"e\\": \\"f\\" } }, \\"g\\": \\"h\\" } Output: { \\"a.b\\": \\"c\\", \\"a.d.e\\": \\"f\\", \\"g\\": \\"h\\" } ``` Write a function with the following signature: ```python def flatten_dict(d: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: # your code here ``` Your function should recursively process the dictionary to generate the flattened dictionary.","solution":"def flatten_dict(d: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: Flattens a nested dictionary. The keys in the new dictionary are dot-separated paths to each value in the original dictionary. Args: d (dict): The dictionary to flatten. parent_key (str): Key path for the current (nested) level. Default is an empty string. sep (str): Separator between keys. Default is \'.\'. Returns: dict: A new dictionary where each key is a dot-separated path to a value in the original dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Create a function that takes in a list of integers and returns a new list containing only the even numbers from the original list, sorted in descending order. [4, 15, 7, 22, 8, 13, 10]","solution":"def get_sorted_even_numbers(nums): Filters out the even numbers from the input list and returns them sorted in descending order. :param nums: List of integers :return: New list containing sorted even numbers in descending order even_numbers = [num for num in nums if num % 2 == 0] return sorted(even_numbers, reverse=True)"},{"question":"Given an `n x n` chessboard and a knight starting at any given cell (r, c), determine the minimum number of moves required to reach a target cell (a, b) on the board. Knights move in an L-shape: two cells in one direction and then one cell perpendicular to that, or vice versa. Write a function `minKnightMoves(n, start_r, start_c, end_r, end_c)` that calculates the minimum number of moves required for the knight to reach the target cell. If it\'s impossible to reach the target cell, return -1. Example 1: Input: `n = 8`, `start_r = 0`, `start_c = 0`, `end_r = 7`, `end_c = 7` Output: `6` Explanation: The knight can move from (0,0) to (7,7) in 6 moves. Example 2: Input: `n = 8`, `start_r = 0`, `start_c = 0`, `end_r = 0`, `end_c = 1` Output: `3` Explanation: The knight can move from (0,0) to (0,1) in 3 moves. Example 3: Input: `n = 8`, `start_r = 0`, `start_c = 0`, `end_r = 0`, `end_c = 0` Output: `0` Explanation: The knight is already at the target cell. Constraints: - `1 <= n <= 1000` - `0 <= start_r, start_c, end_r, end_c < n`","solution":"from collections import deque def minKnightMoves(n, start_r, start_c, end_r, end_c): if start_r == end_r and start_c == end_c: return 0 directions = [ (-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1) ] visited = [[False] * n for _ in range(n)] queue = deque([(start_r, start_c, 0)]) # (row, column, moves) visited[start_r][start_c] = True while queue: r, c, moves = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < n and not visited[nr][nc]: if nr == end_r and nc == end_c: return moves + 1 queue.append((nr, nc, moves + 1)) visited[nr][nc] = True return -1"},{"question":"You are given a task: Build a Linked List from Array The details are as follows: Given an array of integers `arr`, construct a singly linked list in the same order as the integers in the array. Each node in the linked list has two attributes: - `val`: an integer that represents the node\'s value. - `next`: a reference to the next node in the linked list or `null` if it is the last node. After constructing the linked list, also implement a method to convert the linked list back to an array. Return the head of the linked list after construction and the array after conversion. Example 1: Input: arr = [1, 2, 3, 4, 5] Output: (head of linked list representing [1 -> 2 -> 3 -> 4 -> 5], [1, 2, 3, 4, 5]) Example 2: Input: arr = [] Output: (head of linked list representing [], []) Constraints: - The length of `arr` is in the range `[0, 10000]`. - `-10000 <= arr[i] <= 10000` Definition for the singly-linked list node: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ```","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def array_to_linked_list(arr): Converts an array to a singly-linked list. :param arr: List[int] - array of integers :return: ListNode - head of the linked list if not arr: return None head = ListNode(arr[0]) current_node = head for val in arr[1:]: current_node.next = ListNode(val) current_node = current_node.next return head def linked_list_to_array(head): Converts a singly-linked list to an array. :param head: ListNode - head of the linked list :return: List[int] - array of integers arr = [] current_node = head while current_node: arr.append(current_node.val) current_node = current_node.next return arr"},{"question":"Design a function that determines whether a string is a valid password based on specific criteria. def is_valid_password(password): \'\'\' This function accepts a string representing a password and checks whether it meets the following criteria: 1. The password must be at least 8 characters long. 2. The password must contain at least one uppercase letter. 3. The password must contain at least one lowercase letter. 4. The password must contain at least one digit. 5. The password must contain at least one special character from the set: !@#%^&*()-_+= The function returns \'Valid\' if the password meets all the criteria and \'Invalid\' otherwise. Examples: is_valid_password(\'A1b@34cd\') == \'Valid\' is_valid_password(\'12345678\') == \'Invalid\' is_valid_password(\'abcdefgh\') == \'Invalid\' is_valid_password(\'A1b2c3\') == \'Invalid\' # Since it\'s less than 8 characters \'\'\'","solution":"import re def is_valid_password(password): This function accepts a string representing a password and checks whether it meets the following criteria: 1. The password must be at least 8 characters long. 2. The password must contain at least one uppercase letter. 3. The password must contain at least one lowercase letter. 4. The password must contain at least one digit. 5. The password must contain at least one special character from the set: !@#%^&*()-_+= The function returns \'Valid\' if the password meets all the criteria and \'Invalid\' otherwise. if len(password) < 8: return \'Invalid\' if not re.search(r\'[A-Z]\', password): return \'Invalid\' if not re.search(r\'[a-z]\', password): return \'Invalid\' if not re.search(r\'d\', password): return \'Invalid\' if not re.search(r\'[!@#%^&*()-_=+]\', password): return \'Invalid\' return \'Valid\'"},{"question":"Write a Python function that takes a list of integers and an optional integer threshold. The function should return a new list containing only the integers that are greater than or equal to the threshold. If no threshold is provided, use a default value of 10. Ensure the function handles cases where the input list is empty or contains non-integer elements by raising appropriate exceptions. For example: numbers = [20, 5, 12, 3, 14], threshold = 10 should return [20, 12, 14] numbers = [4, 8, 15, 16, 23, 42] should return [15, 16, 23, 42]","solution":"def filter_numbers(numbers, threshold=10): Filters and returns a list of integers from the input list that are greater than or equal to the threshold. Parameters: numbers (list): The list of integers to filter. threshold (int, optional): The threshold value. Default is 10. Returns: list: A new list with integers greater than or equal to the threshold. Raises: ValueError: If `numbers` contains non-integer elements. if not all(isinstance(num, int) for num in numbers): raise ValueError(\\"All elements in the input list must be integers.\\") return [num for num in numbers if num >= threshold]"},{"question":"Given an array of integers where each element appears twice except for one element which appears only once, write a Python function to find the element that appears only once. Function Signature: ```python def find_unique_element(arr: list[int]) -> int: ``` Input: - `arr` (list[int]): A list of integers where exactly one integer appears once and all other integers appear twice. Length of the list is at most 10^4. Output: - `int`: The integer that appears only once in the array. Constraints: - The function must run in linear time (O(n)) and use constant extra space (O(1)). Example: ```python find_unique_element([4, 1, 2, 1, 2]) -> 4 find_unique_element([2, 2, 1]) -> 1 find_unique_element([7, 7, 8, 10, 10, 1, 1]) -> 8 ```","solution":"def find_unique_element(arr: list[int]) -> int: Find the element that appears only once in the array. Args: arr (list[int]): A list of integers where each element appears twice except for one element which appears only once. Returns: int: The integer that appears only once in the array. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"Write a Python function `most_common_word` that takes in a string `paragraph` and a list of strings `banned`, and returns the most frequent word that is not in the banned list. The input paragraph will consist of lowercase letters and spaces only, and the words are separated by spaces. Your function should ignore case sensitivity and only consider alphabetic characters. If multiple words are equally common, return any one of them. ```python def most_common_word(paragraph: str, banned: list) -> str: # Your code here pass # Example usage: paragraph = \\"the quick brown fox jumps over the lazy dog the dog was quick\\" banned = [\\"the\\", \\"was\\"] assert most_common_word(paragraph, banned) == \\"quick\\" ```","solution":"def most_common_word(paragraph: str, banned: list) -> str: import collections import re # Convert the entire paragraph to lowercase and split into words removing non alphabetic characters words = re.findall(r\'w+\', paragraph.lower()) # Create a counter to count occurrences of each word count = collections.Counter(words) # Iterate through the counter and return the most common word that is not banned most_common = None most_common_count = 0 for word in count: if word not in banned: if count[word] > most_common_count: most_common = word most_common_count = count[word] return most_common"},{"question":"A company is organizing a programming contest that will have multiple problems to solve. Each problem has a fixed duration within which it should be solved. If a contestant solves a problem within the duration, they receive full points, otherwise, they receive no points. The company\'s IT team needs a function to calculate the total score for a contestant based on the problems they solved within the allowed durations. However, the scoring system has a catch: if a problem is solved exactly on the last second of the allowed duration, it does not count towards the score. Using Python, write a function to calculate the total score of a contestant. The function should take two parameters: a dictionary where the keys are problem IDs and the values are tuples containing the time taken to solve the problem and the full points for that problem, and a dictionary where the keys are the problem IDs and the values are the allowed durations for those problems. The function should return the total score of the contestant. Example of Input: solved_problems = { \\"problem_1\\": (45, 100), # 45 seconds taken, full points is 100 \\"problem_2\\": (30, 80), # 30 seconds taken, full points is 80 \\"problem_3\\": (60, 120) # 60 seconds taken, full points is 120 } allowed_durations = { \\"problem_1\\": 50, # 50 seconds allowed \\"problem_2\\": 30, # 30 seconds allowed \\"problem_3\\": 60 # 60 seconds allowed } Example of Output: 100 # Only the points for problem_1 should be counted, as problems 2 and 3 were solved exactly on the last second of the allowed duration.","solution":"def calculate_total_score(solved_problems, allowed_durations): Calculate the total score based on problems solved within the allowed durations. :param solved_problems: Dictionary where keys are problem IDs and values are tuples containing the time taken to solve the problem and the full points for that problem. :param allowed_durations: Dictionary where keys are problem IDs and values are the allowed durations for those problems. :return: Total score of the contestant. total_score = 0 for problem_id, (time_taken, full_points) in solved_problems.items(): if time_taken < allowed_durations.get(problem_id, 0): total_score += full_points return total_score"},{"question":"Design a program that simulates a simplified version of a stock trading diary. The program should keep track of daily transactions on three separate stocks: Stock A, Stock B, and Stock C. Each transaction is defined by the stock name, transaction type (buy/sell), and the number of shares. Your program should: 1. Store transactions in a suitable data structure. 2. Provide functionality to add a new transaction. 3. Calculate the total number of buy and sell transactions for each individual stock. 4. Calculate the overall profit/loss for each stock based on an initial purchase price and subsequent transactions. Assume: - Each stock has a fixed initial purchase price: Stock A at 100, Stock B at 150, and Stock C at 200. - For simplicity, the selling price is always at the fixed initial price. Example usage: ```python # Create an instance of the trading diary diary = TradingDiary() # Add some transactions diary.add_transaction(\\"Stock A\\", \\"buy\\", 10) diary.add_transaction(\\"Stock B\\", \\"buy\\", 5) diary.add_transaction(\\"Stock A\\", \\"sell\\", 4) diary.add_transaction(\\"Stock C\\", \\"buy\\", 3) diary.add_transaction(\\"Stock B\\", \\"sell\\", 2) # Display transaction counts per stock print(diary.get_transaction_counts()) # Output: {\'Stock A\': {\'buy\': 1, \'sell\': 1}, \'Stock B\': {\'buy\': 1, \'sell\': 1}, \'Stock C\': {\'buy\': 1, \'sell\': 0}} # Display overall profit/loss per stock print(diary.calculate_profit_loss()) # Output: {\'Stock A\': 600, \'Stock B\': 450, \'Stock C\': 200} ``` # Implementation Approach - Create a class `TradingDiary` with methods for adding transactions, counting transactions, and calculating profit/loss. - Use dictionaries or nested dictionaries to organize transaction types and counts per stock. - Implement a separate method to calculate profit/loss based on the transactions recorded. Note: The program should handle edge cases like attempting to sell more shares than bought and ensure appropriate data validation.","solution":"class TradingDiary: def __init__(self): self.transactions = { \\"Stock A\\": {\\"buy\\": 0, \\"sell\\": 0}, \\"Stock B\\": {\\"buy\\": 0, \\"sell\\": 0}, \\"Stock C\\": {\\"buy\\": 0, \\"sell\\": 0} } self.shares = { \\"Stock A\\": 0, \\"Stock B\\": 0, \\"Stock C\\": 0 } self.initial_prices = { \\"Stock A\\": 100, \\"Stock B\\": 150, \\"Stock C\\": 200 } def add_transaction(self, stock, transaction_type, shares): if stock not in self.transactions: raise ValueError(\\"Invalid stock name\\") if transaction_type not in [\\"buy\\", \\"sell\\"]: raise ValueError(\\"Invalid transaction type\\") if transaction_type == \\"sell\\" and self.shares[stock] < shares: raise ValueError(\\"Not enough shares to sell\\") self.transactions[stock][transaction_type] += 1 if transaction_type == \\"buy\\": self.shares[stock] += shares else: self.shares[stock] -= shares def get_transaction_counts(self): return self.transactions def calculate_profit_loss(self): profit_loss = {} for stock, counts in self.transactions.items(): bought_amount = self.shares[stock] * self.initial_prices[stock] sold_amount = (counts[\\"sell\\"] * self.shares[stock]) * self.initial_prices[stock] profit_loss[stock] = sold_amount - bought_amount return profit_loss # Example usage: # diary = TradingDiary() # diary.add_transaction(\\"Stock A\\", \\"buy\\", 10) # diary.add_transaction(\\"Stock B\\", \\"buy\\", 5) # diary.add_transaction(\\"Stock A\\", \\"sell\\", 4) # diary.add_transaction(\\"Stock C\\", \\"buy\\", 3) # diary.add_transaction(\\"Stock B\\", \\"sell\\", 2) # print(diary.get_transaction_counts()) # print(diary.calculate_profit_loss())"},{"question":"You are given a dataset containing the titles and ratings of numerous movies. The \'Title\' column includes the name of the movies, and the \'Rating\' column includes their corresponding ratings expressed as floating-point numbers. Your task is to write a function using Pandas that will filter out movies with a rating lower than 7.0 and then return a list of titles of the remaining movies sorted in descending order of their ratings. Also, append \'Top-Rated\' to each title in the final list. **Requirements:** - Use Pandas for data manipulation. - The function should be efficient and concise. - Ensure the returned list maintains the required sorted order and format. **Example Input:** ``` movies_data = { \'Title\': [\'Movie A\', \'Movie B\', \'Movie C\', \'Movie D\'], \'Rating\': [6.4, 7.2, 8.5, 5.7] } ``` **Expected Output:** ``` [\'Movie C - Top-Rated\', \'Movie B - Top-Rated\'] ```","solution":"import pandas as pd def top_rated_movies(movies_data): Filters out movies with a rating lower than 7.0 and returns a list of titles of the remaining movies sorted in descending order of their ratings, appending \'Top-Rated\' to each title. :param movies_data: Dictionary containing \'Title\' and \'Rating\' of movies. :return: List of titles of top-rated movies. df = pd.DataFrame(movies_data) filtered_df = df[df[\'Rating\'] >= 7.0] sorted_df = filtered_df.sort_values(by=\'Rating\', ascending=False) result = [f\\"{title} - Top-Rated\\" for title in sorted_df[\'Title\']] return result"},{"question":"Given a list of integers, write a function that returns a list of the squares of each number, sorted in non-decreasing order. The input list may contain both negative and positive integers. # Function Signature ```python def sorted_squares(numbers: List[int]) -> List[int]: ``` # Input - `numbers` (List[int]): A list of integers `n`, where `-10^4 <= n <= 10^4` and the length of the list is between `1` and `10^4`. # Output - A list of integers sorted in non-decreasing order containing the squares of each integer from the `numbers` list. # Examples ```python assert sorted_squares([-4, -1, 0, 3, 10]) == [0, 1, 9, 16, 100] assert sorted_squares([-7, -3, 2, 3, 11]) == [4, 9, 9, 49, 121] ``` # Constraints - The input list will have at least 1 and at most 10,000 elements. - Each element in the input list will have an absolute value not greater than 10,000.","solution":"from typing import List def sorted_squares(numbers: List[int]) -> List[int]: Returns a list of the squares of each number in the input list, sorted in non-decreasing order. :param numbers: List of integers. :return: List of squared integers sorted in non-decreasing order. return sorted(x * x for x in numbers)"},{"question":"In Python, develop a function that calculates the Fibonacci sequence up to the n-th element where n is a non-negative integer. The function should return a list containing the sequence. Aim to make your solution as efficient as possible.","solution":"def fibonacci(n): Calculates the Fibonacci sequence up to the n-th element. Parameters: n (int): Non-negative integer representing the number of elements in the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence up to the n-th element. if n == 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a function that takes a list of strings representing words in a document and returns the 10 most frequent words along with their frequencies. In case there are fewer than 10 unique words, return all of them. Your solution should be case-insensitive and exclude any non-alphanumeric characters, treating them as delimiters. Ensure your function handles large inputs efficiently. Input: A list of strings `words`. Output: A tuple containing a list of the 10 most frequent words and their corresponding frequencies. Example: ```python def most_frequent_words(words): # Your implementation here document = [ \\"The quick brown fox jumps over the lazy dog.\\", \\"The quick brown fox is quick and the fox is also brown.\\" ] print(most_frequent_words(document)) ``` Expected Output: ```python ([\\"the\\", \\"quick\\", \\"brown\\", \\"fox\\", \\"is\\", \\"jumps\\", \\"over\\", \\"lazy\\", \\"dog\\", \\"and\\"], [4, 3, 3, 3, 2, 1, 1, 1, 1, 1]) ```","solution":"import re from collections import Counter def most_frequent_words(words): Returns the 10 most frequent words along with their frequencies. # Join all strings in the list to form one entire text body text = \' \'.join(words) # Remove non-alphanumeric characters, treating them as delimiters text = re.sub(r\'[^a-zA-Z0-9s]\', \' \', text) # Convert the text to lower case text = text.lower() # Split the text into words word_list = text.split() # Create a Counter object to count the frequency of each word word_freq = Counter(word_list) # Get the 10 most common words most_common = word_freq.most_common(10) # Separate the words and their frequencies into two lists for the final output most_common_words = [item[0] for item in most_common] frequencies = [item[1] for item in most_common] return (most_common_words, frequencies)"},{"question":"Write a Python function named `find_square_submatrices` that takes a 2D list of integers (matrix) as input and returns the count of all square submatrices that have all 1s. A square submatrix is defined as a submatrix with equal number of rows and columns. For example, if the input is: ``` matrix = [ [1, 0, 1], [1, 1, 0], [1, 1, 0] ] ``` The output should be `4`, with the following submatrices composed entirely of 1s: ``` [1] at (0, 0) [1] at (0, 2) [1] at (1, 0) [1, 1] [1, 1] at (1, 1) ```","solution":"def find_square_submatrices(matrix): Returns the count of all square submatrices that have all 1s. if not matrix or not matrix[0]: return 0 rows = len(matrix) cols = len(matrix[0]) count = 0 # Create a DP matrix to store the size of the biggest square submatrix ending at (i, j) dp = [[0] * cols for _ in range(rows)] for i in range(rows): for j in range(cols): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 count += dp[i][j] return count"},{"question":"Implement a function that takes a positive integer `n` as input and returns all prime numbers up to `n` that are also palindromic. A palindromic number is a number that remains the same when its digits are reversed. The function should return a list of these palindromic primes in ascending order. Ensure your approach efficiently handles large values of `n` by considering the optimization of prime number determination and palindromic property checks.","solution":"def palindromic_primes(n): Returns a list of all prime numbers up to n that are also palindromic. def is_palindrome(num): return str(num) == str(num)[::-1] def sieve_of_eratosthenes(limit): primes = [] sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, limit + 1): if sieve[start]: primes.append(start) for multiple in range(start*start, limit + 1, start): sieve[multiple] = False return primes primes = sieve_of_eratosthenes(n) palindromic_primes = [p for p in primes if is_palindrome(p)] return palindromic_primes"},{"question":"Write a function that takes a string as input and returns the string reversed but with the words in their original order. For example, given the input \\"Hello world from Code\\", the function should return \\"olleH dlrow morf edoC\\". The function should preserve all original whitespace characters (spaces, tabs, etc.) and handle multiple delimiters correctly, ensuring that words remain separated by the same characters as in the input.","solution":"def reverse_words_in_string(s): This function takes a string as input and returns the string with each word reversed but in the original order. Whitespace characters (spaces, tabs, etc.) are preserved exactly as in the input. # Split the string by whitespace to get the words and retain the delimiters import re words_and_delimiters = re.split(r\'(s+)\', s) reversed_words = [word[::-1] for word in words_and_delimiters] return \'\'.join(reversed_words)"},{"question":"Compose a program in a language of your choosing that reads an integer input from the user and determines whether it is a prime number. Your code should define a function to check for primality that iterates only up to the square root of the given number for efficiency. The outcome must be displayed as a message indicating whether the number is prime or not. Additionally, handle edge cases where the input is less than 2 by directly specifying that these numbers are not prime.","solution":"import math def is_prime(n): Returns True if the given number n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Design a function `multiply_polynomials(p1, p2)` that takes two lists of integers, `p1` and `p2`, representing two polynomials. The function should return a new list of integers representing the coefficients of the product polynomial obtained by multiplying `p1` and `p2`. For instance, the polynomial 3x^2 + 2x + 1 can be represented as [1, 2, 3]. Given two such lists `p1` and `p2`, return the resulting list after performing polynomial multiplication. **Input:** - Two lists of integers `p1` and `p2`, each having at least one element and representing polynomials in ascending order of power. **Output:** - A list of integers representing the coefficients of the product polynomial, also in ascending order of power. **Example:** ```python multiply_polynomials([1, 2, 3], [4, 5]) ``` Output: ```python [4, 13, 22, 15] ``` Explanation: - (3x^2 + 2x + 1)*(5x + 4) = 15x^3 + 22x^2 + 13x + 4","solution":"def multiply_polynomials(p1, p2): Multiplies two polynomials represented as lists of coefficients. Args: p1: list of int - The coefficients of the first polynomial in ascending power order. p2: list of int - The coefficients of the second polynomial in ascending power order. Returns: list of int - The coefficients of the product polynomial in ascending power order. # Initialize the result array with zeros. The length is (len(p1) + len(p2) - 1) result = [0] * (len(p1) + len(p2) - 1) # Perform polynomial multiplication for i, coeff1 in enumerate(p1): for j, coeff2 in enumerate(p2): result[i + j] += coeff1 * coeff2 return result"},{"question":"Create a function that accepts a string representing a mathematical expression and returns its computed value. The expression can include the basic arithmetic operators (+, -, *, /) and parentheses. Assume the input is always a valid expression. Example: ``` Input: \\"3 + (2 * 2)\\" Output: 7 Input: \\"(1 + 2) * (3 / 3)\\" Output: 3 ```","solution":"def evaluate_expression(expression): Returns the computed value of the mathematical expression. Parameters: expression (str): A string representing the mathematical expression. Returns: float: The computed value of the expression. try: # Use eval to compute the result of the expression return eval(expression) except Exception as e: raise ValueError(f\\"Invalid expression: {expression}\\") from e"},{"question":"Design a class that represents a simplified airline reservation system. Each flight in the system should have the following properties: flight number, departure city, arrival city, departure time, and arrival time. The system should allow users to book a seat on a flight, cancel a seat reservation, and check the list of passengers for a particular flight. The system should also provide a search functionality to find flights based on departure city, arrival city, and departure date. Additionally, each passenger should have properties including name, passport number, and date of birth. Consider the following edge cases: - Attempting to book a seat on a flight that is fully booked, - Trying to cancel a reservation that does not exist, - Searching for flights on dates where no flights are available. Hint: The AirlineReservationSystem, Flight, and Passenger should be modeled as classes. Ensure to validate inputs and handle exceptions appropriately to mimic the constraints and functionality of a real-world airline reservation system. This might include handling invalid flight numbers, ensuring unique reservations using passport numbers, and checking valid date formats.","solution":"from datetime import datetime, timedelta class Passenger: def __init__(self, name, passport_number, date_of_birth): self.name = name self.passport_number = passport_number self.date_of_birth = date_of_birth class Flight: def __init__(self, flight_number, departure_city, arrival_city, departure_time, arrival_time, capacity): self.flight_number = flight_number self.departure_city = departure_city self.arrival_city = arrival_city self.departure_time = departure_time self.arrival_time = arrival_time self.capacity = capacity self.passengers = [] def book_seat(self, passenger): if len(self.passengers) < self.capacity: if passenger.passport_number not in [p.passport_number for p in self.passengers]: self.passengers.append(passenger) return True else: raise ValueError(\\"Passenger already booked on this flight.\\") else: raise ValueError(\\"Flight fully booked.\\") def cancel_seat(self, passport_number): for passenger in self.passengers: if passenger.passport_number == passport_number: self.passengers.remove(passenger) return True raise ValueError(\\"No reservation found for the provided passport number.\\") def get_passenger_list(self): return self.passengers class AirlineReservationSystem: def __init__(self): self.flights = [] def add_flight(self, flight): self.flights.append(flight) def search_flights(self, departure_city, arrival_city, departure_date): matching_flights = [] for flight in self.flights: if ( flight.departure_city == departure_city and flight.arrival_city == arrival_city and flight.departure_time.date() == departure_date ): matching_flights.append(flight) return matching_flights"},{"question":"Write a Python function that accepts a list of strings and returns a dictionary where the keys are the strings and the values are the lengths of those strings. def string_lengths(str_list): Given a list of strings, returns a dictionary with strings as keys and their lengths as values. Parameters: str_list (list): A list of strings. Returns: dict: A dictionary with strings as keys and their lengths as values. # Your code here # Example usage: input_list = [\\"apple\\", \\"banana\\", \\"kiwi\\"] # Expected output: {\'apple\': 5, \'banana\': 6, \'kiwi\': 4} print(string_lengths(input_list))","solution":"def string_lengths(str_list): Given a list of strings, returns a dictionary with strings as keys and their lengths as values. Parameters: str_list (list): A list of strings. Returns: dict: A dictionary with strings as keys and their lengths as values. return {s: len(s) for s in str_list}"},{"question":"You are given a collection of short messages obtained from various social media platforms. Implement a text classification pipeline using Python and the scikit-learn library to classify these messages into predefined categories such as spam, advertisement, personal, and news. Your task includes the following steps: - Preprocess the text data by handling missing values, text normalization (lowercasing, removing punctuation, etc.), and tokenization. - Use TF-IDF (Term Frequency-Inverse Document Frequency) to transform the text data into numerical features. - Train a Naive Bayes classifier, a Support Vector Machine (SVM), and a Random Forest classifier on the processed data. - Evaluate each model on a separate validation set, reporting accuracy, precision, recall, and F1-score. - Perform a comparative analysis of the classifiers\' performance metrics and suggest which model is the most suitable for this task. Provide a brief explanation for your choice.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.svm import SVC from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score import string # Preprocessing function def preprocess_text(text): text = text.lower() # Lowercase text text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Remove punctuation return text def text_classification_pipeline(data): data = data.dropna() # Handle missing values data[\'message\'] = data[\'message\'].apply(preprocess_text) # Preprocess text # Splitting the data into training and validation sets X_train, X_val, y_train, y_val = train_test_split(data[\'message\'], data[\'label\'], test_size=0.2, random_state=42) # Transforming text data into numerical features vectorizer = TfidfVectorizer() X_train_tfidf = vectorizer.fit_transform(X_train) X_val_tfidf = vectorizer.transform(X_val) # Training and evaluating Naive Bayes classifier nb = MultinomialNB() nb.fit(X_train_tfidf, y_train) nb_predictions = nb.predict(X_val_tfidf) nb_metrics = evaluate_model(y_val, nb_predictions, \'Naive Bayes\') # Training and evaluating SVM classifier svm = SVC() svm.fit(X_train_tfidf, y_train) svm_predictions = svm.predict(X_val_tfidf) svm_metrics = evaluate_model(y_val, svm_predictions, \'SVM\') # Training and evaluating Random Forest classifier rf = RandomForestClassifier() rf.fit(X_train_tfidf, y_train) rf_predictions = rf.predict(X_val_tfidf) rf_metrics = evaluate_model(y_val, rf_predictions, \'Random Forest\') # Comparative analysis of classifiers\' performance return nb_metrics, svm_metrics, rf_metrics def evaluate_model(y_true, y_pred, model_name): accuracy = accuracy_score(y_true, y_pred) precision = precision_score(y_true, y_pred, average=\'weighted\') recall = recall_score(y_true, y_pred, average=\'weighted\') f1 = f1_score(y_true, y_pred, average=\'weighted\') metrics = { \'Model\': model_name, \'Accuracy\': accuracy, \'Precision\': precision, \'Recall\': recall, \'F1 Score\': f1 } return metrics # Sample data data = pd.DataFrame({ \'message\': [\'This is a spam message\', \'This is an advertisement\', \'Hello, how are you?\', \'Breaking news today\'], \'label\': [\'spam\', \'advertisement\', \'personal\', \'news\'] }) # Running the pipeline metrics_nb, metrics_svm, metrics_rf = text_classification_pipeline(data) # Selecting the best model based on F1 score or some other metric best_model_metrics = max([metrics_nb, metrics_svm, metrics_rf], key=lambda x: x[\'F1 Score\']) best_model_metrics"},{"question":"Write a function `find_longest_length` that takes a list of strings and returns the length of the longest string in the list. If the list is empty, the function should return 0. Ensure your solution works efficiently even with large lists. Example: Input: ```python [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"] ``` Output: ```python 6 ``` Input: ```python [] ``` Output: ```python 0 ```","solution":"def find_longest_length(strings): Returns the length of the longest string in the list. If the list is empty, returns 0. if not strings: return 0 return max(len(s) for s in strings)"},{"question":"# Problem Statement You are tasked with helping an e-commerce company analyze their transactions data. Specifically, they want to identify customers who have placed the highest number of unique orders. Given a list of transaction records, each record contains a customer ID and an order ID. Order IDs are unique across all transactions. Your job is to return a list of customer IDs who have placed the highest number of unique orders in ascending order of customer IDs. # Requirements - Write a function `find_top_customers(transactions: List[Tuple[str, str]]) -> List[str]` that takes a list of tuples as an argument. Each tuple contains a string for `customer_id` and `order_id`. - Return a list of customer_ids who have placed the highest number of unique orders in ascending order. # Example ```python from typing import List, Tuple def find_top_customers(transactions: List[Tuple[str, str]]) -> List[str]: # Your implementation here # Example Transactions transactions = [ (\\"C001\\", \\"O123\\"), (\\"C002\\", \\"O124\\"), (\\"C001\\", \\"O125\\"), (\\"C003\\", \\"O126\\"), (\\"C002\\", \\"O127\\"), (\\"C001\\", \\"O128\\"), (\\"C004\\", \\"O129\\"), (\\"C002\\", \\"O130\\"), (\\"C003\\", \\"O131\\"), (\\"C002\\", \\"O132\\") ] print(find_top_customers(transactions)) ``` # Expected Output ``` [\'C002\', \'C001\'] ``` # Constraints 1. All transaction records are valid, and each order ID is unique. 2. The list of transactions will have at most 10^4 elements. 3. Customer IDs and Order IDs are strings consisting of alphanumeric characters. # Hints - You can use a dictionary to keep track of the number of unique orders each customer has placed. - Use sorting to return the list of customer IDs in ascending order.","solution":"from typing import List, Tuple from collections import defaultdict def find_top_customers(transactions: List[Tuple[str, str]]) -> List[str]: customer_orders = defaultdict(set) for customer_id, order_id in transactions: customer_orders[customer_id].add(order_id) max_orders = 0 top_customers = [] for customer_id, orders in customer_orders.items(): order_count = len(orders) if order_count > max_orders: max_orders = order_count top_customers = [customer_id] elif order_count == max_orders: top_customers.append(customer_id) top_customers.sort() return top_customers"},{"question":"Create a Python class named `MatrixManipulator` that performs various operations on 2D matrices. The class should include methods for matrix addition, matrix multiplication, matrix transposition, and matrix inversion. Each method should handle invalid inputs gracefully by raising appropriate exceptions. Additionally, the class must be capable of handling matrices of arbitrary size, as long as they are valid for the operation being performed (e.g., ensuring the matrices have the correct dimensions for addition or multiplication). Your implementation should also include a method to compute the determinant of a matrix, with necessary checks for non-square matrices. Provide unit tests for each method to demonstrate their correctness. Discuss any performance considerations and optimizations that could be applied, especially in the context of large matrices.","solution":"import numpy as np class MatrixManipulator: A class to perform various operations on 2D matrices. def __init__(self, matrix): self.matrix = np.array(matrix) def add(self, other): other_matrix = np.array(other) if self.matrix.shape != other_matrix.shape: raise ValueError(\\"Matrices must have the same dimensions for addition.\\") return self.matrix + other_matrix def multiply(self, other): other_matrix = np.array(other) if self.matrix.shape[1] != other_matrix.shape[0]: raise ValueError(\\"Number of columns in A must equal the number of rows in B for multiplication.\\") return self.matrix.dot(other_matrix) def transpose(self): return self.matrix.T def invert(self): if self.matrix.shape[0] != self.matrix.shape[1]: raise ValueError(\\"Matrix must be square to be inverted.\\") if np.linalg.det(self.matrix) == 0: raise ValueError(\\"Matrix is singular and cannot be inverted.\\") return np.linalg.inv(self.matrix) def determinant(self): if self.matrix.shape[0] != self.matrix.shape[1]: raise ValueError(\\"Matrix must be square to compute the determinant.\\") return np.linalg.det(self.matrix) # Example usage # mat = MatrixManipulator([[1, 2], [3, 4]]) # print(mat.add([[5, 6], [7, 8]])) # print(mat.multiply([[0, 1], [1, 0]])) # print(mat.transpose()) # print(mat.invert()) # print(mat.determinant())"},{"question":"Write a Python function that determines whether a string consists of only unique characters. The function should take a single string as input and return `True` if all characters in the string are unique (case-sensitive), and `False` otherwise. Implement the function without using additional data structures such as lists or dictionaries to achieve the desired result. The function signature should be as follows: ```python def has_unique_characters(input_string: str) -> bool: ``` Additionally, write a main block to test your function with different input strings, including edge cases such as: - An empty string - A single character string - Strings with repeated characters - Strings with all unique characters - Strings with mixed cases where the same letters appear in both uppercase and lowercase forms Examples of inputs and expected outputs: - `\\"\\"` -> `True` - `\\"a\\"` -> `True` - `\\"abcA\\"` -> `True` - `\\"hello\\"` -> `False` - `\\"AaBbCc\\"` -> `True`","solution":"def has_unique_characters(input_string: str) -> bool: Determines if the given string consists of only unique characters. Case-sensitive. Args: input_string (str): The string to evaluate. Returns: bool: True if all characters are unique, False otherwise. # Sort the string sorted_string = sorted(input_string) # Compare each character with the next one for i in range(len(sorted_string) - 1): if sorted_string[i] == sorted_string[i + 1]: return False return True"},{"question":"Craft a Python function that accepts a list of strings and returns another list where each string is substituted with its length, but only if the length is greater than 5. Any string with a length of 5 or less should remain unchanged.","solution":"def substitute_length(strings): Accepts a list of strings and returns another list where each string is substituted with its length if the length is greater than 5. Otherwise, the string remains unchanged. return [len(s) if len(s) > 5 else s for s in strings]"},{"question":"Create a Python function that processes an input list of integers in a special way. The function should iterate through the list and for each element, do the following: - If the element is a multiple of 3 but not 5, add \\"Fizz\\" to the result. - If the element is a multiple of 5 but not 3, add \\"Buzz\\" to the result. - If the element is a multiple of both 3 and 5, add \\"FizzBuzz\\" to the result. - If the element is none of the above, add the element itself to the result. Optimize the function for speed and ensure it can handle very large lists (in the magnitude of 10^6 or more) efficiently. Incorporate appropriate error handling for non-integer values in the input list. Here is the sample code skeleton: ```python def process_list(input_list): result = [] for item in input_list: # Add your logic here if isinstance(item, int): if item % 3 == 0 and item % 5 == 0: result.append(\\"FizzBuzz\\") elif item % 3 == 0: result.append(\\"Fizz\\") elif item % 5 == 0: result.append(\\"Buzz\\") else: result.append(item) else: # Handle non-integer values pass return result # Sample usage: # input_list = [3, 5, 15, 23, 9, 20] # output = process_list(input_list) # print(output) # Output should be [\'Fizz\', \'Buzz\', \'FizzBuzz\', 23, \'Fizz\', \'Buzz\'] ```","solution":"def process_list(input_list): Processes the input list of integers based on the following rules: - If the element is a multiple of 3 but not 5, add \\"Fizz\\" to the result. - If the element is a multiple of 5 but not 3, add \\"Buzz\\" to the result. - If the element is a multiple of both 3 and 5, add \\"FizzBuzz\\" to the result. - If the element is none of the above, add the element itself to the result. Parameters: input_list (list): List of integers to process Returns: list: Processed list with \\"Fizz\\", \\"Buzz\\", \\"FizzBuzz\\" or original integers. result = [] for item in input_list: if isinstance(item, int): if item % 3 == 0 and item % 5 == 0: result.append(\\"FizzBuzz\\") elif item % 3 == 0: result.append(\\"Fizz\\") elif item % 5 == 0: result.append(\\"Buzz\\") else: result.append(item) else: raise ValueError(\\"All elements of the input list must be integers.\\") return result"},{"question":"Implement a Python function that reads a list of integers from a file, sorts the list in ascending order, and writes the sorted list to a new file. Ensure that the file operations are handled efficiently and securely, and that the function gracefully handles any potential errors such as file not found or read/write permissions. Additionally, the function should be designed to handle large datasets without running into performance issues.","solution":"def sort_integers_from_file(input_file_path, output_file_path): Reads a list of integers from the input file, sorts the list in ascending order, and writes the sorted list to the output file. Parameters: - input_file_path: str, path to the input file containing the list of integers - output_file_path: str, path to the output file for writing the sorted list try: with open(input_file_path, \'r\') as input_file: integers = list(map(int, input_file.readlines())) integers.sort() with open(output_file_path, \'w\') as output_file: for integer in integers: output_file.write(f\\"{integer}n\\") except FileNotFoundError: raise FileNotFoundError(f\\"The file {input_file_path} does not exist.\\") except PermissionError: raise PermissionError(f\\"Permission denied for file {input_file_path} or {output_file_path}.\\") except ValueError: raise ValueError(\\"Input file contains non-integer values.\\")"},{"question":"Write a Python function `find_peak_element` that takes a list of integers as input and returns any peak element. A peak element is an element that is strictly greater than its neighbors. For elements at the boundaries of the list, only one neighbor needs to be considered. You can assume that the list contains at least one element. Optimize the function to run in O(log n) time complexity.","solution":"def find_peak_element(nums): Finds a peak element in the list nums. A peak element is an element that is strictly greater than its neighbors. def binary_search(low, high): if low == high: return low mid = (low + high) // 2 if nums[mid] > nums[mid + 1]: return binary_search(low, mid) return binary_search(mid + 1, high) return nums[binary_search(0, len(nums) - 1)]"},{"question":"Define a function `find_optimal_number(nums)` that takes a list of integers `nums` as an input and returns the number that forms the smallest absolute difference from the average of the numbers in the list. If there are multiple numbers with the same absolute difference from the average, the function should return the smallest one. Ensure the solution works efficiently even for larger lists. Example: ``` Input: nums = [1, 2, 3, 4, 5] Output: 3 Input: nums = [10, 20, 30, 40, 50] Output: 30 ``` You need to implement: ``` def find_optimal_number(nums): # Your code here ``` Hints: 1. Calculate the average of the list of numbers. 2. Iterate through the list and find the number with the smallest absolute difference from the average. 3. Ensure to handle the case where there are multiple candidates and return the smallest one. 4. Consider edge cases such as an empty list or a list with a single element.","solution":"def find_optimal_number(nums): Finds the number in `nums` that forms the smallest absolute difference from the average. If there are multiple numbers with the same absolute difference, returns the smallest one. if not nums: return None avg = sum(nums) / len(nums) closest_num = min(nums, key=lambda x: (abs(x - avg), x)) return closest_num"},{"question":"Create a program that simulates a simple banking system. Implement classes for `BankAccount` and `Customer`. The `BankAccount` class should have methods to deposit, withdraw, and check the balance. The `Customer` class should have attributes for the customer\'s name, a unique customer ID, and their bank account. Write methods to show the account details and transaction history for each customer. Add functionality to transfer money between two bank accounts.","solution":"class BankAccount: def __init__(self, account_number, initial_balance=0): self.account_number = account_number self.balance = initial_balance self.transaction_history = [] def deposit(self, amount): self.balance += amount self.transaction_history.append(f\\"Deposited {amount}\\") return self.balance def withdraw(self, amount): if amount > self.balance: raise ValueError(\\"Insufficient funds\\") self.balance -= amount self.transaction_history.append(f\\"Withdrew {amount}\\") return self.balance def check_balance(self): return self.balance def transfer(self, amount, other_account): self.withdraw(amount) other_account.deposit(amount) self.transaction_history.append(f\\"Transferred {amount} to account {other_account.account_number}\\") other_account.transaction_history.append(f\\"Received {amount} from account {self.account_number}\\") class Customer: def __init__(self, name, customer_id, bank_account): self.name = name self.customer_id = customer_id self.bank_account = bank_account def show_account_details(self): return { \'Name\': self.name, \'Customer ID\': self.customer_id, \'Account Number\': self.bank_account.account_number, \'Balance\': self.bank_account.check_balance() } def show_transaction_history(self): return self.bank_account.transaction_history"},{"question":"Write a function that takes a list of integers and returns a list containing only the prime numbers from the original list. The function should be optimized having a time complexity of O(n * sqrt(m)), where n is the number of integers in the list and m is the largest integer in the list. Also, include error handling to manage input arrays containing non-integer values. For example, if the input list is [10, 17, 23, 33, 42, -5, 3], your program should return [17, 23, 3].","solution":"import math def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Return a list containing only the prime numbers from the original list. if not all(isinstance(num, int) for num in numbers): raise ValueError(\\"All elements in the input list must be integers.\\") return [num for num in numbers if is_prime(num)]"},{"question":"Create a function in Python that simulates a simple vending machine. The function should take in the user\'s balance, selected item code, and quantity, then return the balance after the transaction, and a message indicating the item dispensed. The vending machine should have the following items: - \'A1\' for Soda, 1.50 each - \'B2\' for Chips, 1.00 each - \'C3\' for Candy, 0.75 each The function should handle cases where the balance is insufficient for the selected transaction, and where the provided item code is invalid. Ensure that all monetary values are handled as floats, and all inputs and outputs are appropriately formatted for currency.","solution":"def vending_machine(balance, item_code, quantity): Simulates a vending machine transaction. Args: balance (float): The user\'s current balance. item_code (str): The code of the selected item. quantity (int): The number of items selected. Returns: tuple: A tuple containing the final balance after the transaction (formatted as a float) and a message indicating the item dispensed. items = { \'A1\': (\'Soda\', 1.50), \'B2\': (\'Chips\', 1.00), \'C3\': (\'Candy\', 0.75) } if item_code not in items: return balance, \\"Invalid item code.\\" item_name, item_price = items[item_code] total_cost = item_price * quantity if balance < total_cost: return balance, \\"Insufficient balance.\\" balance -= total_cost return balance, f\\"Dispensed {quantity} {item_name}(s).\\""},{"question":"You are given an unsorted array of integers. Write a function `findLongestConsecutiveSequence` that finds the length of the longest consecutive elements sequence in the array. Your algorithm should run in O(n) time complexity. # Example ```python def findLongestConsecutiveSequence(nums): # Your code here # Example print(findLongestConsecutiveSequence([100, 4, 200, 1, 3, 2])) # Output: 4 (The sequence is [1, 2, 3, 4]) print(findLongestConsecutiveSequence([0, 0, -1])) # Output: 2 (The sequence is [-1, 0]) print(findLongestConsecutiveSequence([])) # Output: 0 ``` # Constraints - The array `nums` may contain duplicates. - The length of the array `nums` will not exceed 10^5. - Each element of the array `nums` will be in the range `-10^9` to `10^9`. # Functions Signature ```python def findLongestConsecutiveSequence(nums: List[int]) -> int: ```","solution":"def findLongestConsecutiveSequence(nums): if not nums: return 0 num_set = set(nums) longest_sequence_len = 0 for num in num_set: # Check if it\'s the start of a sequence if num - 1 not in num_set: current_num = num current_sequence_len = 1 while current_num + 1 in num_set: current_num += 1 current_sequence_len += 1 longest_sequence_len = max(longest_sequence_len, current_sequence_len) return longest_sequence_len"},{"question":"Implement a function `matrix_shift` that takes a 2D list (matrix) of integers and a string direction (\'left\', \'right\', \'up\', \'down\'). The function should return a new matrix with all elements shifted one position in the specified direction. Elements shifted out from one side should reappear on the opposite side. For example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Calling `matrix_shift(matrix, \'left\')` should return: ``` [ [2, 3, 1], [5, 6, 4], [8, 9, 7] ] ``` Calling `matrix_shift(matrix, \'down\')` should return: ``` [ [7, 8, 9], [1, 2, 3], [4, 5, 6] ] ``` Handle edge cases such as: - Matrices with only one row or one column. - Matrices with varying number of rows and columns. - Ensure the original matrix is not modified within the function.","solution":"from copy import deepcopy def matrix_shift(matrix, direction): Shifts the elements of the matrix one position in the specified direction. Args: - matrix: A 2D list of integers - direction: A string specifying the direction (\'left\', \'right\', \'up\', \'down\') Returns: A new 2D list with the elements shifted in the specified direction. if not matrix or not matrix[0]: return matrix rows, cols = len(matrix), len(matrix[0]) # Copy the matrix new_matrix = deepcopy(matrix) if direction == \'left\': for i in range(rows): new_matrix[i] = matrix[i][1:] + [matrix[i][0]] elif direction == \'right\': for i in range(rows): new_matrix[i] = [matrix[i][-1]] + matrix[i][:-1] elif direction == \'up\': for j in range(cols): for i in range(rows): new_matrix[i][j] = matrix[(i + 1) % rows][j] elif direction == \'down\': for j in range(cols): for i in range(rows): new_matrix[i][j] = matrix[(i - 1 + rows) % rows][j] return new_matrix"},{"question":"In Python, you have a list of dictionaries representing students and their respective grades in several subjects. Each dictionary has the following format: ```python { \'name\': \'Student Name\', \'grades\': { \'math\': 85, \'english\': 78, \'science\': 90, \'history\': 65 } } ``` Write a Python function `get_top_student(students)` that takes a list of such dictionaries and returns the name of the student with the highest average grade across all subjects. In case of a tie, return the name of any one of the top students. You may assume all students have grades in the same set of subjects.","solution":"def get_top_student(students): Returns the name of the student with the highest average grade across all subjects. In case of a tie, returns any one of the top students. :param students: List[Dict[str, Any]] - A list of dictionaries representing students and their grades. :return: str - The name of the student with the highest average grade. if not students: return None top_student = None highest_avg = -1 for student in students: grades = student[\'grades\'] avg_grade = sum(grades.values()) / len(grades) if avg_grade > highest_avg: highest_avg = avg_grade top_student = student[\'name\'] return top_student"},{"question":"A company wants to categorize its products based on their sales performance over the past year. The product data is stored in a dictionary where keys represent product IDs and values are lists of 12 integers, each representing the sales numbers for every month. For example: ```python product_sales = { \\"A001\\": [120, 130, 150, 170, 160, 140, 135, 145, 155, 165, 175, 185], \\"A002\\": [80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135], ... } ``` A product is categorized as \'High Performing\' if its average monthly sales exceed 150. Write a function that takes this dictionary as input and returns a new dictionary where the keys are product IDs and the values are their categories (\'High Performing\' or \'Low Performing\'). Initial implementation of the function is provided but is not efficient. Optimize the code for better performance. ```python def categorize_products(sales): categories = {} for product, monthly_sales in sales.items(): total = 0 for sale in monthly_sales: total += sale average = total / 12 if average > 150: categories[product] = \\"High Performing\\" else: categories[product] = \\"Low Performing\\" return categories ``` Further, a proposed optimized version is provided below. Correct any syntax errors and explain the corrections made. ```python def optimized_categorize_products(sales): return {product:\\"High Performing\\" if sum(sale)/12 > 150 else \\"Low Performing\\" for product, sale in sales.items()} ``` Summarize the errors found in the optimized version and explain the corrections made. Discuss how the optimized version improves performance in terms of time complexity compared to the initial implementation.","solution":"def optimized_categorize_products(sales): Categorizes products based on their average monthly sales. Parameters: sales (dict): A dictionary where the keys are product IDs and values are lists of integers representing monthly sales. Returns: dict: A new dictionary with product IDs as keys and their categories (\'High Performing\' or \'Low Performing\') as values. return { product: \\"High Performing\\" if sum(monthly_sales) / 12 > 150 else \\"Low Performing\\" for product, monthly_sales in sales.items() }"},{"question":"Write a program that takes a list of integers and returns a new list with all the prime numbers removed. If the input list is empty or contains no prime numbers, the output should be an empty list. [12, 25, 17, 9, 23, 44, 31, 68]","solution":"def is_prime(n): Checks if a number is a prime number. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # other even numbers are not primes for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def remove_primes(numbers): Takes a list of integers and returns a new list with all the prime numbers removed. return [num for num in numbers if not is_prime(num)] # Example usage: example_list = [12, 25, 17, 9, 23, 44, 31, 68] filtered_list = remove_primes(example_list) print(filtered_list) # Output: [12, 25, 9, 44, 68]"},{"question":"Design a function in Python that accepts a string containing a mathematical expression with integers and the four basic arithmetic operators (+, -, *, /). Your function should evaluate the expression and return the result. The function should adhere to the standard order of operations (PEMDAS/BODMAS). Function signature: `def evaluate_expression(expression: str) -> float:` # Examples - Input: `\\"3 + 5 * 2\\"` Output: `13.0` - Input: `\\"10 / 2 - 3\\"` Output: `2.0` - Input: `\\"(2 + 3) * 4\\"` Output: `20.0` # Constraints - The input string will be a valid mathematical expression. - The expression may include parentheses for grouping. - Division by zero is not expected in the input.","solution":"def evaluate_expression(expression: str) -> float: Evaluates a mathematical expression given as a string. Supports integers and the operators +, -, *, and /, and parentheses. Follows standard order of operations (PEMDAS/BODMAS). def parse_expression(expr): stack = [] num = 0 sign = \'+\' i = 0 while i < len(expr): char = expr[i] if char.isdigit(): num = num * 10 + int(char) if char == \'(\': j = i parentheses = 1 while parentheses > 0: i += 1 if expr[i] == \'(\': parentheses += 1 elif expr[i] == \')\': parentheses -= 1 num = parse_expression(expr[j + 1:i]) if char in \'+-*/\' or i == len(expr) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack.append(stack.pop() * num) elif sign == \'/\': stack.append(stack.pop() // num) num = 0 sign = char i += 1 return sum(stack) # Remove spaces from the expression cleaned_expression = expression.replace(\' \', \'\') return float(parse_expression(cleaned_expression))"},{"question":"You are building a graphic design application that allows users to create and manipulate shapes on a canvas. Each shape (e.g., Circle, Rectangle, Triangle) is an object with properties such as position, size, color, and rotation. The application supports actions like moving shapes, resizing them, changing their color, and rotating them. Currently, your application operates by directly modifying the properties of shape objects. Now, you need to implement a command pattern to facilitate undo and redo functionalities for user actions. Each command should know how to execute and undo itself, allowing you to maintain a history of actions and reverse them if needed. How would you design and implement the command pattern in this context? Specify the classes and interfaces you would create, and provide a brief explanation of how they interact to support undo and redo actions. If possible, include a short code example to illustrate your design.","solution":"class Command: def execute(self): raise NotImplementedError def undo(self): raise NotImplementedError class MoveCommand(Command): def __init__(self, shape, x, y): self.shape = shape self.x = x self.y = y self.previous_x = shape.x self.previous_y = shape.y def execute(self): self.shape.move(self.x, self.y) def undo(self): self.shape.move(self.previous_x, self.previous_y) class ResizeCommand(Command): def __init__(self, shape, width, height): self.shape = shape self.width = width self.height = height self.previous_width = shape.width self.previous_height = shape.height def execute(self): self.shape.resize(self.width, self.height) def undo(self): self.shape.resize(self.previous_width, self.previous_height) class ColorCommand(Command): def __init__(self, shape, color): self.shape = shape self.color = color self.previous_color = shape.color def execute(self): self.shape.change_color(self.color) def undo(self): self.shape.change_color(self.previous_color) class RotateCommand(Command): def __init__(self, shape, angle): self.shape = shape self.angle = angle self.previous_angle = shape.angle def execute(self): self.shape.rotate(self.angle) def undo(self): self.shape.rotate(self.previous_angle) class Shape: def __init__(self, x, y, width, height, color, angle): self.x = x self.y = y self.width = width self.height = height self.color = color self.angle = angle def move(self, x, y): self.x = x self.y = y def resize(self, width, height): self.width = width self.height = height def change_color(self, color): self.color = color def rotate(self, angle): self.angle = angle class CommandHistory: def __init__(self): self.history = [] self.redo_stack = [] def execute_command(self, command): command.execute() self.history.append(command) self.redo_stack.clear() def undo(self): if self.history: command = self.history.pop() command.undo() self.redo_stack.append(command) def redo(self): if self.redo_stack: command = self.redo_stack.pop() command.execute() self.history.append(command)"},{"question":"Implement a function that validates a given string for proper nesting of different types of brackets. The string can contain the following types of brackets: round `()`, square `[]`, and curly `{}`. Your function should return `True` if the brackets are properly nested, otherwise `False`. **Examples:** ```python >>> is_valid_bracket(\\"(){[()]}\\") True >>> is_valid_bracket(\\"{[}]\\") False >>> is_valid_bracket(\\"[({})]\\") True >>> is_valid_bracket(\\"[(])\\") False ``` **Function Signature:** ```python def is_valid_bracket(s: str) -> bool: Validate if the input string \'s\' contains properly nested round, square, and curly brackets. Args: s (str): A string containing brackets Returns: bool: True if the input string is properly nested, otherwise False ```","solution":"def is_valid_bracket(s: str) -> bool: Validate if the input string \'s\' contains properly nested round, square, and curly brackets. Args: s (str): A string containing brackets Returns: bool: True if the input string is properly nested, otherwise False stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map: if stack == [] or bracket_map[char] != stack.pop(): return False else: continue # Ignore non-bracket characters return stack == []"},{"question":"Given a list of integers, write a function that returns a list of tuples, where each tuple contains an integer from the input list and its frequency of occurrence. The returned list of tuples should be sorted primarily by the frequency of occurrence in descending order and secondarily by the integer value in ascending order. For example, given the input list `[4, 6, 2, 2, 6, 6, 4, 4, 4]`, the function should return `[(4, 4), (6, 3), (2, 2)]`. # Function Signature ```python def frequency_sort(integers: List[int]) -> List[Tuple[int, int]]: pass ``` # Input - `integers` (List[int]): A list of integers. # Output - List[Tuple[int, int]]: A list of tuples, where each tuple contains an integer and its frequency. The list should be sorted by frequency in descending order and by integer value in ascending order. # Example ```python assert frequency_sort([4, 6, 2, 2, 6, 6, 4, 4, 4]) == [(4, 4), (6, 3), (2, 2)] assert frequency_sort([1, 1, 2, 2, 3]) == [(1, 2), (2, 2), (3, 1)] assert frequency_sort([5, 5, 5, 7, 7, 8, 8, 8]) == [(5, 3), (8, 3), (7, 2)] ```","solution":"from typing import List, Tuple from collections import Counter def frequency_sort(integers: List[int]) -> List[Tuple[int, int]]: Returns a list of tuples, where each tuple contains an integer and its frequency of occurrence. The list is sorted by frequency in descending order, and by integer value in ascending order. counts = Counter(integers) sorted_counts = sorted(counts.items(), key=lambda x: (-x[1], x[0])) return sorted_counts"},{"question":"Write a Python program that reads a string and prints each character of the string on a new line, but only if the character has an even index in the string. The program should also print the total count of characters displayed. For example, if the input is \\"abcdef\\", the output should be \\"ancnen3\\".","solution":"def print_even_indexed_chars(s): Prints each character of the string s on a new line if the character has an even index. Also prints the total count of characters displayed. count = 0 for i in range(len(s)): if i % 2 == 0: print(s[i]) count += 1 print(count) # Example usage: # print_even_indexed_chars(\\"abcdef\\")"},{"question":"Design an algorithm to find the shortest path in a maze. The maze is represented by a 2D array where `0` indicates an open path and `1` indicates a blocked path. You can only move up, down, left, or right. Given the maze, the start position, and the end position, write a function to determine the shortest path from start to end, or return -1 if no such path exists. Explain your approach, including any used data structures and algorithms, and discuss any potential limitations of your solution.","solution":"from collections import deque def shortest_path(maze, start, end): Finds the shortest path in a maze from start to end. Parameters: maze (list of list of int): 2D list representing the maze (0: open, 1: blocked) start (tuple of int): (row, col) start position end (tuple of int): (row, col) end position Returns: int: length of the shortest path or -1 if no path exists if not maze or not maze[0]: return -1 rows, cols = len(maze), len(maze[0]) queue = deque([(start[0], start[1], 0)]) # (row, col, steps) visited = set() visited.add((start[0], start[1])) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right while queue: row, col, steps = queue.popleft() if (row, col) == end: return steps for dr, dc in directions: n_row, n_col = row + dr, col + dc if 0 <= n_row < rows and 0 <= n_col < cols and maze[n_row][n_col] == 0 and (n_row, n_col) not in visited: queue.append((n_row, n_col, steps + 1)) visited.add((n_row, n_col)) return -1"},{"question":"Create a Python function to determine if a given singly linked list has a cycle. Your function should return True if there is a cycle, and False otherwise. Additionally, implement a helper function to form a cycle in the linked list for testing purposes. Ensure your solution is efficient in terms of time and space complexity. Explain how your cycle detection algorithm works and its complexity.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def hasCycle(head): Determine if a singly linked list has a cycle. :param head: ListNode :return: bool slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False def create_cycle(head, pos): Create a cycle in the linked list at the given position. :param head: ListNode :param pos: int :return: ListNode (head of the modified list) if pos == -1: return head cycle_node = None current = head index = 0 while current.next: if index == pos: cycle_node = current current = current.next index += 1 current.next = cycle_node return head"},{"question":"Design and implement a class in Python that simulates an online shopping cart. The cart should allow adding items, removing items, and viewing the current cart contents along with the total price. Each item added to the cart should have a name, a price, and a quantity. Make sure your class handles edge cases such as attempting to remove an item not in the cart or adding an item with a negative quantity. Provide a sample usage demonstrating all functionalities of the cart.","solution":"class ShoppingCart: def __init__(self): self.cart = {} def add_item(self, name, price, quantity): if quantity <= 0: raise ValueError(\\"Quantity must be positive\\") if name in self.cart: self.cart[name][\'quantity\'] += quantity else: self.cart[name] = {\'price\': price, \'quantity\': quantity} def remove_item(self, name, quantity): if name not in self.cart: raise ValueError(f\\"Item {name} not found in the cart\\") if quantity <= 0: raise ValueError(\\"Quantity must be positive\\") if self.cart[name][\'quantity\'] < quantity: raise ValueError(\\"Cannot remove more items than are in the cart\\") self.cart[name][\'quantity\'] -= quantity if self.cart[name][\'quantity\'] == 0: del self.cart[name] def view_cart(self): return self.cart def total_price(self): return sum(item[\'price\'] * item[\'quantity\'] for item in self.cart.values()) # Sample usage cart = ShoppingCart() cart.add_item(\\"apple\\", 1.0, 3) cart.add_item(\\"banana\\", 0.5, 5) cart.remove_item(\\"apple\\", 1) current_cart = cart.view_cart() total = cart.total_price() print(f\\"Current cart contents: {current_cart}\\") print(f\\"Total price: {total}\\")"},{"question":"Develop a program that simulates a simple network latency and bandwidth tester for multiple servers. Your program should randomly generate latency (in milliseconds) and bandwidth (in Mbps) values for each server and then summarize the results. Additionally, the program should identify and handle exceptional cases where latency exceeds 1000ms or bandwidth drops below 1Mbps, flagging these as critical performance issues. The program must also compare the performance metrics among all servers to determine the best and worst-performing servers based on latency and bandwidth. Assume that each network test includes a minimum of 3 servers and a maximum of 10 servers. Example of server test results: server_1 = {\\"latency\\": 35, \\"bandwidth\\": 10} server_2 = {\\"latency\\": 450, \\"bandwidth\\": 7} server_3 = {\\"latency\\": 1200, \\"bandwidth\\": 0.8} server_4 = {\\"latency\\": 250, \\"bandwidth\\": 15}","solution":"import random def generate_server_data(num_servers): Generates random latency (ms) and bandwidth (Mbps) values for a number of servers. Parameters: num_servers (int): The number of servers to generate data for. Returns: list of dict: A list of dictionaries containing latency and bandwidth values. servers = [] for i in range(num_servers): latency = random.randint(1, 1500) # Random latency between 1 and 1500 ms bandwidth = round(random.uniform(0.5, 20.0), 2) # Random bandwidth between 0.5 and 20 Mbps servers.append({\\"server_id\\": f\\"server_{i+1}\\", \\"latency\\": latency, \\"bandwidth\\": bandwidth}) return servers def analyze_servers(servers): Analyzes server data to find critical issues and determine best and worst-performing servers. Parameters: servers (list of dict): A list of dictionaries containing latency and bandwidth values. Returns: dict: A summary of critical issues, best and worst-performing servers. critical_issues = [] best_latency_server = min(servers, key=lambda x: x[\\"latency\\"]) worst_latency_server = max(servers, key=lambda x: x[\\"latency\\"]) best_bandwidth_server = max(servers, key=lambda x: x[\\"bandwidth\\"]) worst_bandwidth_server = min(servers, key=lambda x: x[\\"bandwidth\\"]) for server in servers: if server[\\"latency\\"] > 1000 or server[\\"bandwidth\\"] < 1: critical_issues.append(server) return { \\"critical_issues\\": critical_issues, \\"best_latency_server\\": best_latency_server, \\"worst_latency_server\\": worst_latency_server, \\"best_bandwidth_server\\": best_bandwidth_server, \\"worst_bandwidth_server\\": worst_bandwidth_server } def simulate_network_test(num_servers): servers = generate_server_data(num_servers) return analyze_servers(servers)"},{"question":"Compare and contrast the Merge Sort and Quick Sort algorithms in terms of their efficiency, stability, and use-cases. Discuss their time and space complexities and provide scenarios where one might be preferred over the other. Additionally, write a Python implementation of each algorithm (Merge Sort and Quick Sort). Include well-documented code and analyze the performance of both implementations with various input sizes and characteristics. Illustrate your analysis with graphs or tables to highlight differences in their performance.","solution":"# Implementation of Merge Sort def merge_sort(array): if len(array) > 1: mid = len(array) // 2 left_half = array[:mid] right_half = array[mid:] merge_sort(left_half) merge_sort(right_half) i = j = k = 0 while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: array[k] = left_half[i] i += 1 else: array[k] = right_half[j] j += 1 k += 1 while i < len(left_half): array[k] = left_half[i] i += 1 k += 1 while j < len(right_half): array[k] = right_half[j] j += 1 k += 1 # Implementation of Quick Sort def quick_sort(array): if len(array) <= 1: return array else: pivot = array[len(array) // 2] left = [x for x in array if x < pivot] middle = [x for x in array if x == pivot] right = [x for x in array if x > pivot] return quick_sort(left) + middle + quick_sort(right) # Compare and contrast Merge Sort and Quick Sort Merge Sort: - Time Complexity: O(n log n) for all cases (best, average, worst) - Space Complexity: O(n) - Stability: Stable (maintains the relative order of equal elements) - Use-cases: Suitable for large datasets and linked lists, useful when stability is required Quick Sort: - Time Complexity: O(n log n) average, O(n^2) worst, O(n log n) best - Space Complexity: O(log n) for in-place, O(n) for naive - Stability: Not stable (the relative order of equal elements may change) - Use-cases: Suitable for arrays, generally faster in practice for average cases, useful for in-place sorting and cache optimization"},{"question":"You are tasked with finding the Longest Substring Without Repeating Characters. Given a string `s`, your goal is to find the length of the longest substring that does not contain any repeating characters. Your solution must be efficient, ideally operating in linear time complexity. For example: Input: \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with a length of 3. Input: \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with a length of 1. Input: \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with a length of 3. Note that the result must be a substring, \\"pwke\\" is a subsequence and not a substring. Constraints: - The length of `s` will be between 0 and 50000. - The string `s` consists of English letters, digits, symbols, and spaces.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. if not s: return 0 left, longest = 0, 0 seen = {} for right, char in enumerate(s): if char in seen and seen[char] >= left: left = seen[char] + 1 seen[char] = right longest = max(longest, right - left + 1) return longest"},{"question":"Create a Python function that takes a string containing a mathematical expression involving addition \\"+\\" and multiplication \\"*\\", and evaluates it while respecting the order of operations. The expression will not contain any spaces or other operators. Implement the function without using the `eval` function. Example Input: \\"2+3*4\\" Example Output: 14","solution":"def evaluate_expression(expression): Evaluates a mathematical expression involving addition and multiplication while respecting the order of operations (multiplication before addition). Parameters: expression (str): The mathematical expression as a string. Returns: int: The evaluated result of the expression. if not expression: return 0 # Split expression by addition addition_parts = expression.split(\'+\') total_sum = 0 for part in addition_parts: # Split each part by multiplication and multiply the numbers multiplication_parts = map(int, part.split(\'*\')) product = 1 for num in multiplication_parts: product *= num total_sum += product return total_sum"},{"question":"Write a function in Python that takes in a list of integers and returns a new list containing only the prime numbers from the original list. If the original list is empty or contains no prime numbers, the function should return an empty list. Consider the efficiency of your algorithm.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a list containing only the prime numbers from the original list. return [num for num in numbers if is_prime(num)]"},{"question":"Design a function to rotate a given NxN matrix 90 degrees clockwise in-place. The function should modify the input matrix directly without using any additional matrix to store the result. Ensure that your implementation does not use any built-in functions that directly perform this task. The utility signature is: `def rotate_matrix(matrix: list)` Examples: - For the matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` `rotate_matrix(matrix)` should modify `matrix` to: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` - For the matrix: ``` [ [5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ] ``` `rotate_matrix(matrix)` should modify `matrix` to: ``` [ [15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11] ] ```","solution":"def rotate_matrix(matrix): Rotate the given NxN matrix 90 degrees clockwise in-place. :param matrix: List of lists, where each inner list represents a row in the NxN matrix. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i + 1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Create a function that determines the largest prime factor of a given integer n. Write a function `largest_prime_factor` that takes an integer as input and returns the largest prime factor of that integer. def largest_prime_factor(n: int) -> int: Return the largest prime factor of the given integer n. >>> largest_prime_factor(15) 5 >>> largest_prime_factor(33) 11 >>> largest_prime_factor(44) 11 >>> largest_prime_factor(97) 97 # Explanation 1. **Inputs/Outputs:** The function takes an integer n and returns an integer that represents the largest prime factor of n. 2. **Examples:** - For n=15, the largest prime factor is 5 (since 15 = 3 * 5). - For n=33, the largest prime factor is 11 (since 33 = 3 * 11). 3. **Constraints:** - `n` will be greater than 1. - The function should efficiently find the largest prime factor, leveraging mathematical properties of prime numbers and factorization techniques.","solution":"def largest_prime_factor(n: int) -> int: Return the largest prime factor of the given integer n. # Deal with the smallest prime number which is 2. largest_factor = None while n % 2 == 0: largest_factor = 2 n = n // 2 # n must be odd at this point. # So a skip of 2 (even numbers) can be used. for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: largest_factor = i n = n // i # This condition is to handle the case when n is a prime number # greater than 2. if n > 2: largest_factor = n return largest_factor"},{"question":"A sales company has a list of sales transactions for the day. Each transaction is represented as a tuple containing the sale amount and the currency (either \\"USD\\" or \\"EUR\\"). The company wants to calculate the total sales amount for USD transactions only. Write a function `total_usd_sales` that takes a list of transactions and returns the total amount of USD sales. Sample Input and Output: ```python transactions = [(100, \\"USD\\"), (200, \\"EUR\\"), (50, \\"USD\\"), (25, \\"EUR\\"), (75, \\"USD\\")] print(total_usd_sales(transactions)) # Output: 225 transactions = [] print(total_usd_sales(transactions)) # Output: 0 transactions = [(150, \\"EUR\\"), (120, \\"USD\\"), (80, \\"EUR\\"), (30, \\"USD\\")] print(total_usd_sales(transactions)) # Output: 150 ``` Python Implementation Template: ```python from typing import List, Tuple def total_usd_sales(transactions: List[Tuple[int, str]]) -> int: Given a list of transactions where each transaction is a tuple containing the sale amount and the currency (either \\"USD\\" or \\"EUR\\"), this function calculates the total sales amount for USD transactions only. Examples: >>> total_usd_sales([(100, \\"USD\\"), (200, \\"EUR\\"), (50, \\"USD\\"), (25, \\"EUR\\"), (75, \\"USD\\")]) 225 >>> total_usd_sales([]) 0 >>> total_usd_sales([(150, \\"EUR\\"), (120, \\"USD\\"), (80, \\"EUR\\"), (30, \\"USD\\")]) 150 total = 0 for amount, currency in transactions: if currency == \\"USD\\": total += amount return total ```","solution":"from typing import List, Tuple def total_usd_sales(transactions: List[Tuple[int, str]]) -> int: Given a list of transactions where each transaction is a tuple containing the sale amount and the currency (either \\"USD\\" or \\"EUR\\"), this function calculates the total sales amount for USD transactions only. Example: >>> total_usd_sales([(100, \\"USD\\"), (200, \\"EUR\\"), (50, \\"USD\\"), (25, \\"EUR\\"), (75, \\"USD\\")]) 225 >>> total_usd_sales([]) 0 >>> total_usd_sales([(150, \\"EUR\\"), (120, \\"USD\\"), (80, \\"EUR\\"), (30, \\"USD\\")]) 150 total = 0 for amount, currency in transactions: if currency == \\"USD\\": total += amount return total"},{"question":"Write a function that, given a binary tree, returns its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. You are to use an iterative approach utilizing a queue for breadth-first traversal. The binary tree is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Example: Input: root = [3,9,20,null,null,15,7] ``` 3 / 9 20 / 15 7 ``` Output: 3 # Constraints: - The number of nodes in the tree is in the range [0, 10^4]. - -100 <= Node.val <= 100","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root): if not root: return 0 queue = deque([(root, 1)]) # Queue contains pairs of (TreeNode, depth) max_depth = 0 while queue: node, depth = queue.popleft() max_depth = max(max_depth, depth) if node.left: queue.append((node.left, depth + 1)) if node.right: queue.append((node.right, depth + 1)) return max_depth"},{"question":"Write a Python function that receives a string containing a mathematical expression and returns the result of the evaluation. The expression can contain addition, subtraction, multiplication, and division operations, as well as parentheses for altering the precedence of operations. You are not allowed to use the `eval()` function or any other built-in functions that directly perform the evaluation of an arithmetic expression. Ensure comprehensive handling of whitespace within the expression. Example: ```python def evaluate_expression(expression: str) -> float: # Your code here # Example usage: print(evaluate_expression(\\"3 + 5 * 2\\")) # Output: 13.0 print(evaluate_expression(\\"(2 + 3) * 4 - 5\\")) # Output: 15.0 print(evaluate_expression(\\"10 / (2 + 3)\\")) # Output: 2.0 print(evaluate_expression(\\"3 + (2 - 5) * 4\\")) # Output: -9.0 ```","solution":"def evaluate_expression(expression: str) -> float: def parse_expression(tokens): def get_next_token(): return tokens.pop(0) if tokens else None def parse_primary(): token = get_next_token() if token == \'(\': expr = parse_expression(tokens) get_next_token() # Discard the closing \')\' return expr else: return float(token) def parse_term(): term = parse_primary() while tokens and tokens[0] in (\'*\', \'/\'): op = get_next_token() next_term = parse_primary() if op == \'*\': term *= next_term elif op == \'/\': term /= next_term return term def parse_expression(tokens): expression_value = parse_term() while tokens and tokens[0] in (\'+\', \'-\'): op = get_next_token() next_term = parse_term() if op == \'+\': expression_value += next_term elif op == \'-\': expression_value -= next_term return expression_value return parse_expression(tokens) # Tokenize the expression, including handling of whitespace import re tokens = re.findall(r\'d+.d+|d+|[+-*/()]\', expression.replace(\' \', \'\')) return parse_expression(tokens)"},{"question":"Wendy has a rectangular garden that is 10 meters long and 5 meters wide. She wants to create a path that is 1 meter wide all around the inside edge of the garden, leaving the rest of the garden area for planting flowers. Calculate the area of the garden that will be used for planting flowers.","solution":"def planting_area(garden_length, garden_width, path_width): Returns the area of the garden used for planting flowers. Parameters: garden_length (float): The length of the garden. garden_width (float): The width of the garden. path_width (float): The width of the path around the garden inside edge. Returns: float: Planting area of the garden. inner_length = garden_length - 2 * path_width inner_width = garden_width - 2 * path_width planting_area = inner_length * inner_width return planting_area # Specific case for Wendy\'s garden garden_length = 10 garden_width = 5 path_width = 1 # Calculate the planting area wendy_planting_area = planting_area(garden_length, garden_width, path_width)"},{"question":"Develop a function named `distinct_characters` that accepts a list of strings and returns a list containing the count of distinct characters in each string. The function should be case-sensitive, treating \'a\' and \'A\' as different characters. ```python def distinct_characters(strings): result = [] for s in strings: result.append(len(set(s))) return result ``` Examples: - distinct_characters([\'hello\', \'world\']) should return [4, 5] - distinct_characters([\'abc\', \'aabbcc\', \'AaBbCc\']) should return [3, 3, 6]","solution":"def distinct_characters(strings): Returns a list containing the count of distinct characters in each string in the input list. Args: strings : list of str A list of strings to analyze. Returns: list of int A list containing the counts of distinct characters for each string. result = [] for s in strings: result.append(len(set(s))) return result"},{"question":"Implement a function that takes a list of nested lists where each nested list contains a course name followed by student names. Then, return a dictionary where the keys are department names derived from the course_name (first 3 letters in uppercase) and the values are lists of unique student names sorted alphabetically across all courses belonging to that department. Assume the course names and student names are case-insensitive and should be treated as such. Example input: course_list = [ [\\"CS101\\", \\"Alice\\", \\"Bob\\", \\"Charlie\\"], [\\"cs102\\", \\"David\\", \\"Eve\\", \\"Alice\\"], [\\"MATH101\\", \\"Frank\\", \\"Grace\\"], [\\"Math102\\", \\"Eve\\", \\"Bob\\", \\"Grace\\"], ] Example output: { \\"CS1\\": [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\", \\"Eve\\"], \\"MAT\\": [\\"Bob\\", \\"Eve\\", \\"Frank\\", \\"Grace\\"] }","solution":"def organize_students(course_list): Takes a list of nested lists where each nested list contains a course name followed by student names. Returns a dictionary where the keys are department names and the values are lists of unique student names sorted alphabetically across all courses belonging to that department. from collections import defaultdict department_dict = defaultdict(set) for course in course_list: course_name = course[0] students = course[1:] department_name = course_name[:3].upper() for student in students: department_dict[department_name].add(student.lower()) result_dict = {} for key, value in department_dict.items(): result_dict[key] = sorted(value) return result_dict"},{"question":"Implement a function that takes in a string consisting of alphabetic characters and spaces and returns a new string with each word reversed but the word order preserved. Ensure that multiple spaces between words are reduced to a single space in the resulting string. **Example:** input: \\" This is an example \\" output: \\"sihT si na elpmaxe\\"","solution":"def reverse_words_and_reduce_spaces(s): Reverses each word in the string while reducing multiple spaces to a single space. Args: s (str): The input string containing alphabetic characters and spaces. Returns: str: A new string with each word reversed and multiple spaces reduced to a single space. # Split the input string into words based on spaces words = s.split() # Reverse each word and join them with a single space reversed_words = \' \'.join(word[::-1] for word in words) return reversed_words"},{"question":"Implement a function `find_max_profit(prices: List[int]) -> int` that takes a list of integers representing stock prices on different days and returns the maximum profit that can be achieved by buying and selling the stock. The function should only allow one transaction (i.e., buy one and sell one share of stock), and it must ensure that the buy operation occurs before the sell operation. The array of prices may have up to 10^6 elements and the prices can range from 0 to 10^9. Handle edge cases such as empty lists or lists with a single price gracefully by returning 0 in such scenarios. Aim to optimize the function to run in O(n) time complexity. The function should perform efficiently even with the upper limits of input constraints.","solution":"from typing import List def find_max_profit(prices: List[int]) -> int: Returns the maximum profit that can be achieved by buying and selling one share of stock prices. Ensures that the buy operation occurs before the sell operation. If no transaction can be made, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Develop a function that takes a string representing an arithmetic expression and returns True if the parentheses within the expression are balanced, and False otherwise. The function should correctly handle nested parentheses. For example, the input string \\"((2 + 3) * 5)\\" should return True, while the input string \\"(2 + 3) * (5\\" should return False. Additionally, create test cases to validate the functionality of your algorithm with various edge cases, including complex nested expressions and cases with no parentheses at all.","solution":"def are_parentheses_balanced(expression): Returns True if the parentheses in the expression are balanced, False otherwise. stack = [] for char in expression: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a Python function called `reverse_string` that takes a string as input and returns the string in reverse order. Additionally, the function should ignore spaces and punctuation in the string. For example, if the input is \\"Hello, World!\\", the function should return \\"dlroWolleH\\". Assume that punctuation characters include commas, periods, exclamation marks, and question marks, but you may expand this list within your implementation. # function to reverse string def reverse_string(s): pass # testing the function print(reverse_string(\\"Hello, World!\\")) # Expected output: \\"dlroWolleH\\" print(reverse_string(\\"Python is fun!\\")) # Expected output: \\"nufsinohtyP\\"","solution":"def reverse_string(s): Returns the string in reverse order, ignoring spaces and punctuation. import string # Define the punctuation to ignore excluded_characters = string.punctuation + \\" \\" # Remove the excluded characters from the string cleaned_string = \'\'.join([char for char in s if char not in excluded_characters]) # Reverse the cleaned string reversed_string = cleaned_string[::-1] return reversed_string"},{"question":"Design a Python function that takes a single string of arbitrary length as an argument, consisting of a random sequence of characters, and returns the longest palindrome substring found within that string. The function should be optimized for both time and space efficiency, and should handle edge cases such as strings with no palindromes or all characters being the same.","solution":"def longest_palindrome_substring(s): Returns the longest palindrome substring found within the input string. if not s: return \\"\\" # Function to expand around center and find the longest palindrome def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest_palindrome = \\"\\" for i in range(len(s)): # Odd length palindromes palindrome1 = expand_around_center(i, i) if len(palindrome1) > len(longest_palindrome): longest_palindrome = palindrome1 # Even length palindromes palindrome2 = expand_around_center(i, i + 1) if len(palindrome2) > len(longest_palindrome): longest_palindrome = palindrome2 return longest_palindrome"},{"question":"Write a function `calculate_water_trapped(height)` that takes a list of non-negative integers representing the elevation map where the width of each bar is 1, and returns the amount of water it can trap after raining. For example, given `height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]`, your function should return `6`. # Function Signature ```python def calculate_water_trapped(height: List[int]) -> int: ``` # Input - `height` (List[int]): A list of non-negative integers representing the height of each bar. # Output - `int`: The total units of water trapped. # Example ```python assert calculate_water_trapped([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]) == 6 assert calculate_water_trapped([4, 2, 0, 3, 2, 5]) == 9 ``` # Constraints - The length of `height` can be up to `10^4`. - The height of each bar is a non-negative integer not greater than `10^5`. # Explanation Consider the heights of the bars as part of an elevation map, where rainwater can potentially be trapped in valleys formed by the bars. The goal is to determine the total volume of water trapped between the bars after a rainstorm.","solution":"from typing import List def calculate_water_trapped(height: List[int]) -> int: if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n # Initialize left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Initialize right_max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - height[i] return trapped_water"},{"question":"Write a function that takes a list of integers and returns a dictionary where the keys are the unique integers from the list and the values are the counts of their occurrences. Additionally, identify the integer with the highest frequency and the one with the lowest frequency. If there are ties, return the smallest integer in terms of value. Example: ```python input_list = [3, 1, 4, 1, 2, 2, 2, 4, 3, 3] ``` Output: ```python { \'frequency_dict\': {3: 3, 1: 2, 4: 2, 2: 3}, \'highest_frequency\': 2, \'lowest_frequency\': 1 } ```","solution":"def analyze_frequency(input_list): Analyzes the frequency of integers in the input list. Parameters: input_list (list): A list of integers. Returns: dict: A dictionary with frequency of each integer, highest frequency integer, and lowest frequency integer. frequency_dict = {} for number in input_list: if number in frequency_dict: frequency_dict[number] += 1 else: frequency_dict[number] = 1 highest_freq = max(frequency_dict.values()) lowest_freq = min(frequency_dict.values()) highest_frequency = min([k for k, v in frequency_dict.items() if v == highest_freq]) lowest_frequency = min([k for k, v in frequency_dict.items() if v == lowest_freq]) return { \'frequency_dict\': frequency_dict, \'highest_frequency\': highest_frequency, \'lowest_frequency\': lowest_frequency }"},{"question":"Design a function in Python that takes two parameters: a dictionary where each key is a student\'s name and each value is a list of their test scores, and a string representing a student\'s name. Your function should return the average test score for the specified student. If the student does not exist in the dictionary, return `None`.","solution":"def average_test_score(students_scores, student_name): Returns the average test score for the specified student. Parameters: students_scores (dict): dictionary where keys are student names and values are lists of test scores. student_name (str): the name of the student whose average test score is to be calculated. Returns: float: average test score of the specified student, or None if the student does not exist. if student_name not in students_scores: return None scores = students_scores[student_name] if not scores: return 0.0 average_score = sum(scores) / len(scores) return average_score"},{"question":"Write a function that accepts two numpy arrays as input and returns a new array that contains only the elements that are present in both arrays. Ensure that the elements in the resulting array are unique. Example: ```python import numpy as np array1 = np.array([1, 2, 3, 4, 5]) array2 = np.array([4, 5, 6, 7, 8]) result = intersection(array1, array2) print(result) # Output should be: [4, 5] ```","solution":"import numpy as np def intersection(array1, array2): Returns a numpy array containing unique elements that are present in both array1 and array2. # Find the intersection of the two arrays result = np.intersect1d(array1, array2) return result"},{"question":"You are given a collection of log entries from a system monitoring tool, each entry contains a timestamp, log level, and message content. Your task is to write a function that filters the log entries for a specific log level and extracts the unique error messages. The input is a list of log entries, represented as strings, and a string representing the log level to filter (e.g., \\"ERROR\\", \\"WARNING\\"). A log entry has the format: \\"YYYY-MM-DD HH:MM:SS [LOG_LEVEL] Message content\\" For example: ``` logs = [ \\"2023-08-01 14:52:23 [INFO] Application started\\", \\"2023-08-01 14:55:01 [ERROR] Failed to connect to database\\", \\"2023-08-01 15:01:07 [WARNING] Low disk space\\", \\"2023-08-01 15:03:45 [ERROR] Failed to connect to database\\", \\"2023-08-01 15:05:33 [INFO] User login successful\\" ] log_level = \\"ERROR\\" ``` Your function should return a list of unique error messages for the specified log level. In the example above, the result should be: ``` [\\"Failed to connect to database\\"] ``` Write a function `extract_unique_log_messages(logs: List[str], log_level: str) -> List[str]` that implements this logic. Use appropriate error handling to manage invalid log entries.","solution":"from typing import List def extract_unique_log_messages(logs: List[str], log_level: str) -> List[str]: Extracts unique messages of a specific log level from a list of log entries. :param logs: List of log entries as strings in the format \\"YYYY-MM-DD HH:MM:SS [LOG_LEVEL] Message content\\" :param log_level: The log level to filter log entries :return: List of unique log messages of the specified log level unique_messages = set() for log in logs: try: # Split the log entry into parts timestamp, level_message = log.split(\' [\', 1) level, message = level_message.split(\'] \', 1) # Check if the level matches if level == log_level: unique_messages.add(message) except ValueError: # Skip malformed log entries continue return list(unique_messages)"},{"question":"You are developing a game where the player must navigate a character through a grid with obstacles. The grid is an `n x n` matrix, where each cell can either be empty (represented by a `0`) or contain an obstacle (represented by a `1`). The character starts at the top-left corner of the grid `(0, 0)` and must reach the bottom-right corner `(n-1, n-1)`. The character can move up, down, left, or right. The player can also push obstacles out of the way, but only if there is an empty space immediately behind the obstacle in the direction of the push. Each movement (including pushing an obstacle) counts as one step. Write a function `min_steps_to_reach_end(grid: List[List[int]]) -> int` that takes as input a 2D list representing the grid and returns the minimum number of steps required to reach the bottom-right corner. If it is not possible to reach the bottom-right corner, return `-1`. Function signature: ```python def min_steps_to_reach_end(grid: List[List[int]]) -> int: ``` # Example ```python grid = [ [0, 0, 0, 0], [1, 1, 0, 1], [0, 0, 0, 0], [0, 1, 1, 0] ] print(min_steps_to_reach_end(grid)) # Output: 7 ``` # Constraints - `1 <= n <= 1000` - All entries of `grid` are either `0` or `1`. # Notes - If there are multiple paths to the destination, the function should return the one with the minimal number of steps. - The function should handle large grids efficiently within the given constraints.","solution":"from typing import List, Tuple from collections import deque def min_steps_to_reach_end(grid: List[List[int]]) -> int: n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() if row == n-1 and col == n-1: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < n and (new_row, new_col) not in visited: if grid[new_row][new_col] == 0: queue.append((new_row, new_col, steps + 1)) visited.add((new_row, new_col)) elif grid[new_row][new_col] == 1: pushing_row, pushing_col = new_row + dr, new_col + dc if 0 <= pushing_row < n and 0 <= pushing_col < n and (pushing_row, pushing_col) not in visited and grid[pushing_row][pushing_col] == 0: grid[new_row][new_col] = 0 # Push the obstacle queue.append((new_row, new_col, steps + 2)) # Pushing counts as 2 steps visited.add((new_row, new_col)) return -1"},{"question":"You are given a list of strings representing various filenames. Each filename consists of a name part and an extension part separated by a dot, and they can contain alphanumeric characters. Write a function `extract_names_from_files(file_list)` that takes in a list of such filenames and returns a list containing only the name parts of these filenames, sorted in alphabetical order. For example, given the input: `[\\"document.txt\\", \\"photo.jpeg\\", \\"index.html\\", \\"notes.txt\\"]`, the function should return `[\\"document\\", \\"index\\", \\"notes\\", \\"photo\\"]`. Provide a detailed explanation of your approach, including the time complexity of your solution. Use Python for your code implementation and include comments for clarity.","solution":"def extract_names_from_files(file_list): Extracts the name parts of filenames from the given list and returns them sorted in alphabetical order. :param file_list: List of strings representing filenames. :return: List of name parts sorted in alphabetical order. # Extract the name parts by splitting each filename at the dot and taking the first part. name_parts = [filename.split(\'.\')[0] for filename in file_list] # Sort the name parts alphabetically. name_parts.sort() return name_parts"},{"question":"Design a Python function that takes two lists as input and returns a list of elements that are common to both input lists, without duplicates. Additionally, handle edge cases such as empty lists or when one list is entirely contained within the other. Ensure your implementation is efficient for large lists (containing up to 1 million elements each) and works with lists of integers, strings, or a mix of both.","solution":"def common_elements(list1, list2): Returns a list of elements that are common to both input lists, without duplicates. set1 = set(list1) set2 = set(list2) common_set = set1.intersection(set2) return list(common_set)"},{"question":"Design a recursive algorithm to compute the nth Fibonacci number. The Fibonacci sequence is characterized by each number being the sum of the two preceding ones. Ensure the function handles large inputs efficiently by employing memoization to cache previously computed values.","solution":"def fib(n, mem={}): Returns the nth Fibonacci number using memoization. if n in mem: return mem[n] if n <= 1: return n mem[n] = fib(n-1, mem) + fib(n-2, mem) return mem[n]"},{"question":"Write a Python function that takes a list of integers and returns the largest difference between any two elements such that the larger element comes after the smaller element in the list. For example, given the list [2, 3, 10, 6, 4, 8, 1], the function should return 8 (10 - 2).","solution":"def max_difference(nums): Returns the largest difference between any two elements such that the larger element comes after the smaller element in the list. if not nums or len(nums) < 2: return 0 min_element = nums[0] max_diff = 0 for num in nums[1:]: if num - min_element > max_diff: max_diff = num - min_element if num < min_element: min_element = num return max_diff"},{"question":"Create a Python function that takes an integer `n` and returns a list of the first `n` numbers in the Fibonacci sequence. The function should be optimized for performance and handle edge cases such as negative input or non-integer values gracefully. Additionally, include a brief explanation of the approach used in your solution.","solution":"def fibonacci_sequence(n): Returns a list of the first n numbers in the Fibonacci sequence. if not isinstance(n, int) or n <= 0: return [] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence[:n]"},{"question":"Write a function that takes a list of integers and returns a dictionary. The dictionary should contain two keys: \\"even\\" and \\"odd\\". The value for each key should be a list of integers from the input list that are even or odd, respectively. If an input list is empty, the function should return a dictionary with each key\'s value as an empty list. Example: ```python def even_odd_dict(input_list): # Your code here print(even_odd_dict([1, 2, 3, 4, 5])) # Output: {\'even\': [2, 4], \'odd\': [1, 3, 5]} print(even_odd_dict([])) # Output: {\'even\': [], \'odd\': []} ```","solution":"def even_odd_dict(input_list): Returns a dictionary with two keys, \\"even\\" and \\"odd\\". The value for each key is a list of integers from the input list that are even or odd, respectively. If the input list is empty, returns a dictionary with empty lists for both keys. return { \\"even\\": [x for x in input_list if x % 2 == 0], \\"odd\\": [x for x in input_list if x % 2 != 0] }"},{"question":"Write a function that accepts a list of integers and returns a list of even numbers from the original list, but only up to the first occurrence of an odd number. For example, given the input list `[2, 4, 6, 5, 8, 10, 12]`, the function should return `[2, 4, 6]` because the first odd number encountered is `5`.","solution":"def even_numbers_until_first_odd(numbers): Returns a list of even numbers from the input list until the first occurrence of an odd number. Args: numbers (list of int): List of integers. Returns: list of int: List of even numbers up to the first odd number. evens = [] for number in numbers: if number % 2 != 0: break evens.append(number) return evens"},{"question":"Implement a custom breadth-first search (BFS) algorithm for a graph represented using adjacency lists. Given an input graph and a starting vertex, the function should return the order of nodes visited. Ensure the algorithm handles both directed and undirected graphs. Provide test cases using sample graphs, and include edge cases like graphs with isolated nodes or cycles. Additionally, demonstrate the use of the algorithm by visualizing the traversal as a sequence of visited nodes for a sample graph.","solution":"from collections import deque def bfs(graph, start): Perform a Breadth-First Search on the given graph starting from the \'start\' node. Args: graph (dict): A dictionary representing the adjacency list of the graph. start (any): The starting node for the BFS traversal. Returns: list: A list of nodes in the order they were visited during the BFS traversal. visited = set() queue = deque([start]) order_of_visit = [] while queue: current_node = queue.popleft() if current_node not in visited: visited.add(current_node) order_of_visit.append(current_node) for neighbor in graph.get(current_node, []): if neighbor not in visited: queue.append(neighbor) return order_of_visit"},{"question":"Write a function `product_of_list` that takes a list of integers `numbers` and returns the product of all the elements. If the list is empty, the function should return 1. Additionally, handle potential cases where the list contains zeros or negative numbers appropriately. Add error handling to check if the input is a list of integers and return an appropriate message if not. ```python def product_of_list(numbers): # Check if input is a list if not isinstance(numbers, list): return \'Input is not a list\' # Check if all elements in the list are integers for item in numbers: if not isinstance(item, int): return \'List contains non-integer values\' # Calculate the product of all integers in the list product = 1 for num in numbers: product *= num return product ```","solution":"def product_of_list(numbers): Returns the product of all the elements in the list. If the list is empty, it returns 1. If the input is not a list or contains non-integer values, it returns an appropriate message. # Check if input is a list if not isinstance(numbers, list): return \'Input is not a list\' # Check if all elements in the list are integers for item in numbers: if not isinstance(item, int): return \'List contains non-integer values\' # Calculate the product of all integers in the list product = 1 for num in numbers: product *= num return product"},{"question":"You are given a list of integers. Write a Python function that determines whether it is possible to partition the list into two sublists such that the sum of the elements in the two sublists are equal. You may assume that all elements in the list are positive integers. Implement the function `can_partition(nums: List[int]) -> bool` which takes a list of integers `nums` as its input and returns `True` if the list can be partitioned into two sublists with equal sum, otherwise returns `False`. Here is a skeleton to get you started: ```python from typing import List def can_partition(nums: List[int]) -> bool: total_sum = sum(nums) # If the total sum is odd, it cannot be partitioned into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 # Initialize a DP array dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target] # Example usage nums = [1, 5, 11, 5] print(can_partition(nums)) # Output: True, because the list can be partitioned into [1, 5, 5] and [11] ``` # Considerations: 1. Think about the base case(s) and how to handle lists with few elements. 2. Consider the computational complexity and how to optimize for large lists. 3. Utilize dynamic programming to keep track of possible subset sums efficiently. 4. Explain edge cases where partition is and isn’t possible. Test your function with various inputs to make sure it handles multiple scenarios, including single elements, lists with odd sums, and lists of increasing size.","solution":"from typing import List def can_partition(nums: List[int]) -> bool: total_sum = sum(nums) # If the total sum is odd, it cannot be partitioned into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 # Initialize a DP array dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target] # Example usage nums = [1, 5, 11, 5] print(can_partition(nums)) # Output: True, because the list can be partitioned into [1, 5, 5] and [11]"},{"question":"Devise a programming function that takes three arguments: a list of words to search within, a string representing the target word to find, and an integer representing the distance. The function should return an integer count of how many times the target word appears in the list where the next or previous word is within the specified distance in the list. To simplify the problem, assume the words in the list are unique and there are no duplicate words.","solution":"def word_count_within_distance(words, target, distance): Returns the count of occurrences of the target word in the list where the next or previous word is within the specified distance in the list. count = 0 for i, word in enumerate(words): if word == target: # Check distances within bounds of the list for j in range(1, distance + 1): if i - j >= 0 or i + j < len(words): count += 1 break return count"},{"question":"Write a function that takes a string as input and returns the string reversed. For example, if the input is \\"hello\\", the function should return \\"olleh\\".","solution":"def reverse_string(s): Returns the reversed version of the input string. return s[::-1]"},{"question":"In an array consisting of words, design a function that identifies the longest word composed of unique characters. If there is a tie, return the word which appears first in the array. Consider the input below: myWords = [\'apple\', \'banana\', \'cherry\', \'date\', \'elephant\']","solution":"def longest_unique_word(words): Given a list of words, returns the longest word with unique characters. If there\'s a tie, returns the word that appears first in the list. def is_unique(word): return len(word) == len(set(word)) longest = \\"\\" for word in words: if is_unique(word) and (len(word) > len(longest)): longest = word return longest"},{"question":"Write a function that checks if a given string is a palindrome, considering only alphanumeric characters and ignoring cases. The function should return `True` if the string is a palindrome and `False` otherwise. Write your solution implementing a two-pointer technique. def is_palindrome(s: str) -> bool: Return True if the string is a palindrome, ignoring case and non-alphanumeric characters. >>> is_palindrome(\'\') True >>> is_palindrome(\'A man, a plan, a canal: Panama\') True >>> is_palindrome(\'race a car\') False","solution":"def is_palindrome(s: str) -> bool: Return True if the string is a palindrome, ignoring case and non-alphanumeric characters. # Convert to lowercase and filter out non-alphanumeric characters. filtered_chars = [char.lower() for char in s if char.isalnum()] # Initialize two pointers. left, right = 0, len(filtered_chars) - 1 # Use the two-pointer technique to check for palindrome. while left < right: if filtered_chars[left] != filtered_chars[right]: return False left += 1 right -= 1 return True"},{"question":"Write a function that detects whether a given word is a palindrome. A word is considered a palindrome if it reads the same forward and backward, ignoring case and spaces. Additionally, the function should return the total number of characters in the word (ignoring spaces). word = \\"Was it a car or a cat I saw\\"","solution":"def is_palindrome(word): Detects whether a given word is a palindrome, ignoring case and spaces. Returns a tuple where the first element is a boolean indicating if the word is a palindrome, and the second element is the total number of characters in the word (ignoring spaces). cleaned_word = \'\'.join(char.lower() for char in word if char.isalnum()) is_palindrome = cleaned_word == cleaned_word[::-1] total_chars = len(cleaned_word) return is_palindrome, total_chars"},{"question":"Using the \\"breast cancer\\" dataset from the scikit-learn library, perform an exploratory data analysis (EDA) to uncover key patterns and relationships in the data. Following the EDA, build a Logistic Regression model to classify whether a tumor is malignant or benign. Evaluate the model\'s performance using appropriate metrics and discuss the significance of the chosen features in predicting the outcome.","solution":"import numpy as np import pandas as pd from sklearn.datasets import load_breast_cancer from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score, confusion_matrix, classification_report # Load the breast cancer dataset data = load_breast_cancer() df = pd.DataFrame(data.data, columns=data.feature_names) df[\'target\'] = data.target # Perform EDA def perform_eda(dataframe): # Display basic information and statistics eda_result = { \'head\': dataframe.head(), \'info\': dataframe.info(), \'describe\': dataframe.describe(), \'missing_values\': dataframe.isnull().sum(), \'class_distribution\': dataframe[\'target\'].value_counts() } return eda_result # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(df.drop(columns=\'target\'), df[\'target\'], test_size=0.3, random_state=42) # Build and train the Logistic Regression model model = LogisticRegression(max_iter=10000) model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) # Evaluate the model\'s performance def evaluate_model(y_true, y_pred): accuracy = accuracy_score(y_true, y_pred) conf_matrix = confusion_matrix(y_true, y_pred) class_report = classification_report(y_true, y_pred) return { \'accuracy\': accuracy, \'confusion_matrix\': conf_matrix, \'classification_report\': class_report } # Significance of the chosen features def feature_importance(model, feature_names): importance = model.coef_[0] features_importance = dict(zip(feature_names, importance)) return sorted(features_importance.items(), key=lambda item: item[1], reverse=True) # Performing EDA eda_result = perform_eda(df) # Evaluating the model evaluation_results = evaluate_model(y_test, y_pred) # Extracting feature importance features_importance = feature_importance(model, data.feature_names) # Function to encapsulate the complete process def breast_cancer_analysis(): return { \'EDA\': eda_result, \'Evaluation\': evaluation_results, \'Feature_Importance\': features_importance }"},{"question":"Write a Python function that takes a list of integers as input and returns a new list containing the cubes of the original integers. Ensure that your function preserves the order of elements from the original list. For example, given the input list [1, 2, 3, 4], the output should be [1, 8, 27, 64]. ```python def cube_numbers(numbers): # Your code here pass # Example usage: input_list = [1, 2, 3, 4] result = cube_numbers(input_list) print(\\"The list of cubes is:\\", result) ``` **Constraints:** - The input list will have at least one element. - Each element in the list will be a valid integer.","solution":"def cube_numbers(numbers): Returns a new list containing the cubes of the original integers in the input list. Parameters: numbers (list of int): A list of integers to be cubed. Returns: list of int: A list containing the cubes of the input integers. return [num ** 3 for num in numbers]"},{"question":"Develop a Python function that calculates and returns the highest product of two unique elements from a given list of integers. Your solution should handle lists from lengths of 2 up to 1000 elements. Consider edge cases such as lists with negative numbers or all positive numbers. The function should return None if the list has fewer than two elements. def max_product(nums): Example: max_product([1, 5, 3, 2, 4]) returns 20 max_product([10, -10, 2, 3]) returns 30 max_product([5]) returns None","solution":"def max_product(nums): Returns the highest product of two unique elements from the list of integers. Returns None if the list has fewer than two elements. if len(nums) < 2: return None nums = sorted(nums, reverse=True) # The highest product can be from the two largest positive or the two smallest (most negative) numbers. return max(nums[0] * nums[1], nums[-1] * nums[-2])"},{"question":"Design a function to determine if a given string \'s\' is a valid palindrome. A string is considered a valid palindrome if it reads the same backward as forward, disregarding spaces, punctuation marks, and letter casing. For example, the strings \\"A man, a plan, a canal, Panama\\" and \\"No \'x\' in Nixon\\" are valid palindromes.","solution":"import re def is_valid_palindrome(s): Determines if a given string \'s\' is a valid palindrome. # Remove non-alphanumeric characters and convert to lowercase filtered_string = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Compare the filtered string with its reverse return filtered_string == filtered_string[::-1]"},{"question":"Given a string s and a list of words, return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters. Example 1: Input: s = \\"barfoothefoobarman\\", words = [\\"foo\\",\\"bar\\"] Output: [0,9] Explanation: Substrings starting at index 0 and 9 are \\"barfoo\\" and \\"foobar\\", respectively. Both contain \\"foo\\" and \\"bar\\". Example 2: Input: s = \\"wordgoodgoodgoodbestword\\", words = [\\"word\\",\\"good\\",\\"best\\",\\"word\\"] Output: [] Explanation: There is no substring in s that can concatenate all words in words exactly once. Note: - The order of words does not matter. - You may assume no duplicated words in words. - Constraints: - 1 <= s.length <= 10^4 - 1 <= words.length <= 5000 - 1 <= words[i].length <= 30","solution":"def findSubstring(s, words): from collections import Counter if not s or not words: return [] word_length = len(words[0]) word_count = len(words) total_words_length = word_length * word_count words_counter = Counter(words) result = [] for i in range(word_length): left = i current_counter = Counter() count = 0 for j in range(i, len(s) - word_length + 1, word_length): word = s[j:j + word_length] if word in words_counter: current_counter[word] += 1 count += 1 while current_counter[word] > words_counter[word]: current_counter[s[left:left + word_length]] -= 1 left += word_length count -= 1 if count == word_count: result.append(left) else: current_counter = Counter() count = 0 left = j + word_length return result"},{"question":"Implement a function `longest_consecutive_subsequence` that accepts a list of integers and returns the length of the longest consecutive subsequence present in the list. A subsequence is a sequence derived from another sequence where elements appear in the same order but not necessarily consecutively. For example, for the list `[100, 4, 200, 1, 3, 2]`, the consecutive subsequence is `[1, 2, 3, 4]` and its length is 4. Function signature: `def longest_consecutive_subsequence(nums: List[int]) -> int:` **Constraints:** - The input list can have a maximum length of 10^5. - The elements in the list will be integers within the range of -10^6 to 10^6. - The function should have a time complexity less than O(n log n). **Examples:** ```python assert longest_consecutive_subsequence([100, 4, 200, 1, 3, 2]) == 4 assert longest_consecutive_subsequence([9, 1, 8, 2, 3, 5, 4, 6, 7]) == 9 assert longest_consecutive_subsequence([]) == 0 assert longest_consecutive_subsequence([1, 3, 5, 7, 9]) == 1 ```","solution":"def longest_consecutive_subsequence(nums): Returns the length of the longest consecutive subsequence. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Implement a Python function that checks whether a given string is a palindrome, ignoring spaces, punctuation, and capitalization. Additionally, write a short helper function that removes all non-alphanumeric characters from the string. Ensure your solution handles potential edge cases such as an empty string or a string with all non-alphanumeric characters. Sample Input: ```python \\"Was it a car or a cat I saw?\\" \\"Hello, World!\\" \\"\\" \\"!!!!\\" ``` Sample Output: ```python True False True True ```","solution":"import re def clean_string(s): Removes all non-alphanumeric characters from the string and converts it to lowercase. return re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() def is_palindrome(s): Checks whether a given string is a palindrome ignoring spaces, punctuation, and capitalization. cleaned = clean_string(s) return cleaned == cleaned[::-1]"},{"question":"You are given a large text file containing a collection of documents. Write Python code to read the file and perform the following tasks: 1. Tokenize the text into individual words. 2. Remove common stopwords. 3. Count the frequency of remaining words. 4. Identify the five most frequent words and plot their frequencies using a horizontal bar chart. Provide detailed explanations for each step and include comments in your code to explain key parts of your implementation.","solution":"import re from collections import Counter import matplotlib.pyplot as plt def read_file(file_path): Reads a file and returns its contents as a string. with open(file_path, \'r\', encoding=\'utf-8\') as file: text = file.read() return text def tokenize(text): Tokenizes the text into individual words. words = re.findall(r\'bw+b\', text.lower()) return words def remove_stopwords(words, stopwords): Removes common stopwords from the list of words. filtered_words = [word for word in words if word not in stopwords] return filtered_words def count_word_frequency(words): Counts the frequency of each word in the list. word_counts = Counter(words) return word_counts def plot_top_words(word_counts, num_words=5): Plots a horizontal bar chart of the most frequent words. most_common = word_counts.most_common(num_words) words = [word for word, count in most_common] counts = [count for word, count in most_common] plt.barh(words, counts, color=\'blue\') plt.xlabel(\'Frequency\') plt.title(f\'Top {num_words} Most Frequent Words\') plt.gca().invert_yaxis() plt.show() def main(file_path, stopwords, num_words=5): text = read_file(file_path) words = tokenize(text) filtered_words = remove_stopwords(words, stopwords) word_counts = count_word_frequency(filtered_words) plot_top_words(word_counts, num_words) # Define a sample set of stopwords default_stopwords = set([ \'the\', \'is\', \'in\', \'it\', \'of\', \'and\', \'a\', \'to\', \'he\', \'she\', \'they\', \'we\', \'you\', \'that\', \'for\', \'on\', \'with\', \'as\', \'I\', \'his\', \'her\', \'at\', \'by\', \'an\' ]) # Example usage (uncomment to use): # main(\'path_to_text_file.txt\', default_stopwords)"},{"question":"Develop a function that simulates a basic spell-checker. Given a list of valid words and a paragraph, your function should return a list of words from the paragraph that are not found in the list of valid words. Words should be compared in a case-insensitive manner, and punctuation marks should be ignored. The function should handle large inputs efficiently. Function signature: ```python def spell_checker(valid_words: List[str], paragraph: str) -> List[str]: This function returns a list of words from the given `paragraph` that are not found in the `valid_words` list. Parameters: - valid_words (List[str]): A list of valid words. - paragraph (str): A paragraph of text to be checked. Returns: - List[str]: A list of misspelled or invalid words in the paragraph. ```","solution":"import re from typing import List def spell_checker(valid_words: List[str], paragraph: str) -> List[str]: This function returns a list of words from the given `paragraph` that are not found in the `valid_words` list. Parameters: - valid_words (List[str]): A list of valid words. - paragraph (str): A paragraph of text to be checked. Returns: - List[str]: A list of misspelled or invalid words in the paragraph. # Convert the list of valid words to a set of lowercase words for fast lookup valid_words_set = set(word.lower() for word in valid_words) # Use regex to extract words from paragraph, ignoring punctuation words_in_paragraph = re.findall(r\'bw+b\', paragraph.lower()) # Collect words that are not in the valid_words_set invalid_words = [word for word in words_in_paragraph if word not in valid_words_set] return invalid_words"},{"question":"Design a function that takes a list of integers and a target integer, and returns all unique combinations of elements (of any length) from the list that sum up to the target value. Each number in the list may only be used once in each combination. The function should return a list of lists, where each inner list is a unique combination that sums up to the target. The combinations should be listed in lexicographic order (sorted order). Example: Input: candidates = [10,1,2,7,6,1,5], target = 8 Output: [ [1,1,6], [1,2,5], [1,7], [2,6] ] Example: Input: candidates = [2,5,2,1,2], target = 5 Output: [ [1,2,2], [5] ] Note: - The list of integers is called `candidates` and the target integer is called `target`. - Each number in `candidates` may only be used once. - All combinations should be unique. - The solution set must not contain duplicate combinations. - The order of combinations in the output list should be sorted lexicographically. Constraints: 0 ≤ len(candidates) ≤ 100 -100 ≤ candidates[i] ≤ 100 -100 ≤ target ≤ 100","solution":"def combination_sum2(candidates, target): candidates.sort() results = [] def backtrack(start, target, comb): if target == 0: results.append(list(comb)) return if target < 0: return prev = -1 for i in range(start, len(candidates)): if candidates[i] == prev: continue if candidates[i] > target: break comb.append(candidates[i]) backtrack(i + 1, target - candidates[i], comb) comb.pop() prev = candidates[i] backtrack(0, target, []) return results"},{"question":"Create a function that receives a list of strings and returns a list containing only the palindromes. A palindrome is a word that reads the same forwards and backwards. For example, \\"radar\\" and \\"level\\" are palindromes, whereas \\"hello\\" and \\"world\\" are not. The function should be case-insensitive, treating \\"Radar\\" and \\"rAdAr\\" as palindromes. If the input list is empty, the function should return an empty list. **Function Signature:** ```python def get_palindromes(words: List[str]) -> List[str]: pass ``` **Input:** - `words`: A list of strings with a length of `N` (0 <= N <= 1000). **Output:** - A list of strings containing only the palindromes from the input list. The order of the palindromes in the output should be the same as their order in the input list. **Examples:** ```python get_palindromes([\\"radar\\", \\"hello\\", \\"Level\\", \\"world\\", \\"Reviver\\"]) # Output: [\\"radar\\", \\"Level\\", \\"Reviver\\"] get_palindromes([\\"apple\\", \\"banana\\", \\"Cherry\\"]) # Output: [] get_palindromes([]) # Output: [] ```","solution":"from typing import List def get_palindromes(words: List[str]) -> List[str]: Returns a list of palindromes from the input list of words. Palindromes are case-insensitive. return [word for word in words if word.lower() == word.lower()[::-1]]"},{"question":"Write a Python function that takes a string representing a mathematical expression containing integers, addition (\'+\'), and multiplication (\'*\'), and returns the result of evaluating the expression following the standard order of operations (PEMDAS/BODMAS). The function should appropriately handle the precedence of operators, i.e., multiplication should be evaluated before addition. You may assume the input string is always a valid mathematical expression. For example: ```python def evaluate_expression(expression: str) -> int: pass ``` Example input and expected output: ```python evaluate_expression(\\"3+5*2\\") => 13 evaluate_expression(\\"10+2*6\\") => 22 evaluate_expression(\\"100*2+12\\") => 212 evaluate_expression(\\"100*(2+12)\\") => 1400 # Bonus: handling parentheses (for advanced solution) evaluate_expression(\\"(100+2)*12\\") => 1224 # Bonus: handling parentheses (for advanced solution) ```","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression containing integers, addition (\'+\'), and multiplication (\'*\'), following the standard order of operations (PEMDAS/BODMAS). def evaluate(tokens): stack = [] current_operator = \'+\' current_number = 0 for token in tokens: if token.isdigit(): current_number = int(token) elif token == \'+\' or token == \'*\': if current_operator == \'+\': stack.append(current_number) elif current_operator == \'*\': stack.append(stack.pop() * current_number) current_operator = token current_number = 0 if current_operator == \'+\': stack.append(current_number) elif current_operator == \'*\': stack.append(stack.pop() * current_number) return sum(stack) # tokenize the expression tokens = [] current_number = \'\' for char in expression: if char.isdigit(): current_number += char else: if current_number: tokens.append(current_number) current_number = \'\' tokens.append(char) if current_number: tokens.append(current_number) return evaluate(tokens)"},{"question":"Create a Python function that takes in a string and returns the first non-repeating character. If all characters are repeating, return `None`. Ensure that the function handles case sensitivity, meaning \'a\' and \'A\' are considered different characters. Provide the implementation details along with a few test cases to validate your function. ```python def first_non_repeating_char(s): Finds the first non-repeating character in a given string. Parameters: s (str): The input string Returns: str: The first non-repeating character, or None if all characters are repeating char_count = {} # Count the occurrence of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char return None # Test cases print(first_non_repeating_char(\\"swiss\\")) # Output: \'w\' print(first_non_repeating_char(\\"level\\")) # Output: \'v\' print(first_non_repeating_char(\\"elephant\\")) # Output: \'l\' print(first_non_repeating_char(\\"aA\\")) # Output: \'a\' print(first_non_repeating_char(\\"aabb\\")) # Output: None ```","solution":"def first_non_repeating_char(s): Finds the first non-repeating character in a given string. Parameters: s (str): The input string Returns: str: The first non-repeating character, or None if all characters are repeating char_count = {} # Count the occurrence of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char return None"},{"question":"Design a function \\"string_compression\\" that takes a string as input and returns a compressed version of that string using the counts of repeated characters. For example, the string \\"aabcccccaaa\\" should become \\"a2b1c5a3\\". If the compressed string is not smaller than the original string, your function should return the original string. Consider only uppercase and lowercase letters (a-z). Ensure the function is efficient and handles edge cases like empty strings appropriately.","solution":"def string_compression(input_str): Compress a string using the counts of repeated characters. if not input_str: return input_str compressed = [] count = 1 for i in range(1, len(input_str)): if input_str[i] == input_str[i-1]: count += 1 else: compressed.append(f\\"{input_str[i-1]}{count}\\") count = 1 compressed.append(f\\"{input_str[-1]}{count}\\") compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(input_str) else input_str"},{"question":"Design a function named `unique_combinations` that receives a list of integers and an integer `n`. The task is to return all distinct combinations of `n` elements from the list. The order of the combinations does not matter, and the function should not include duplicate combinations even if the input list contains duplicate elements. Provide a detailed explanation of how your function achieves this and ensure that it handles invalid inputs gracefully by returning an appropriate message. **Example:** ```python unique_combinations([1, 2, 3, 3, 4], 2) ``` **Output:** ``` [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]] ```","solution":"from itertools import combinations def unique_combinations(arr, n): Returns all distinct combinations of n elements from the list arr. Parameters: arr (list): A list of integers, which may contain duplicates. n (int): The number of elements in each combination. Returns: list: A list of lists, where each inner list is a unique combination of n elements. If the input is invalid, returns an appropriate error message. if not isinstance(arr, list) or not all(isinstance(i, int) for i in arr): return \\"Invalid input: arr should be a list of integers.\\" if not isinstance(n, int) or n <= 0: return \\"Invalid input: n should be a positive integer.\\" if n > len(arr): return \\"Invalid input: n should not be greater than the length of arr.\\" arr = list(set(arr)) # Remove duplicates from the list comb = list(combinations(arr, n)) # Generate combinations return [list(c) for c in comb] # Convert tuples to lists # Example use print(unique_combinations([1, 2, 3, 3, 4], 2))"},{"question":"Construct a function that receives an unsorted list of integers and returns a new list containing the integers in ascending order, but only those integers that are prime numbers. Implement this function using Python, and ensure it efficiently handles lists with a size of up to 10,000 elements. Consider edge cases such as lists with no prime numbers, all prime numbers, and repeated elements. Use a helper function to determine the primality of integers.","solution":"def is_prime(n): Determines if the given integer n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sort_primes(lst): Given an unsorted list of integers, returns a list of prime numbers sorted in ascending order. primes = [x for x in lst if is_prime(x)] return sorted(primes)"},{"question":"Write a program that takes a string as input and returns the longest substring that contains at most 2 distinct characters. Example: inputString: \'abcbbbbcccbdddadacb\' outputString: \'bcbbbbcccb\'","solution":"def length_of_longest_substring_two_distinct(s): Returns the longest substring that contains at most 2 distinct characters. if len(s) < 3: return s # Dictionary to keep track of the last occurrence index of each character. last_occurrence = {} left = 0 max_length = 2 max_substr = s[:2] for right in range(len(s)): # Update the last occurrence index of the current character. last_occurrence[s[right]] = right # If there are more than 2 distinct characters in the window, need to shrink the window. if len(last_occurrence) > 2: left_most_char_index = min(last_occurrence.values()) del last_occurrence[s[left_most_char_index]] left = left_most_char_index + 1 current_length = right - left + 1 if current_length > max_length: max_length = current_length max_substr = s[left:right+1] return max_substr"},{"question":"Design a Python function that parses a log file to extract and count the frequency of distinct IP addresses. The function should handle large files efficiently, avoid loading the entire file into memory at once, and store the results in a dictionary. Additionally, implement a feature to filter out invalid IP addresses and write the resulting frequency count of valid IP addresses to a new log file. The solution should emphasize robust error handling and scalability considerations.","solution":"import re from collections import defaultdict def is_valid_ip(ip): Validate if the given IP address is valid. pattern = re.compile(r\'^d{1,3}.d{1,3}.d{1,3}.d{1,3}\') if pattern.match(ip): parts = ip.split(\'.\') return all(0 <= int(part) <= 255 for part in parts) return False def count_ip_addresses(log_file_path, output_file_path): Parses the log file to extract and count the frequency of distinct valid IP addresses. The results are written to a new file. ip_counts = defaultdict(int) with open(log_file_path, \'r\') as file: for line in file: ip_match = re.search(r\'d{1,3}.d{1,3}.d{1,3}.d{1,3}\', line) if ip_match: ip = ip_match.group(0) if is_valid_ip(ip): ip_counts[ip] += 1 with open(output_file_path, \'w\') as output_file: for ip, count in ip_counts.items(): output_file.write(f\\"{ip}: {count}n\\")"},{"question":"Write a function that takes a list of integers and returns a dictionary with the following keys: - \'mean\': the arithmetic mean of the numbers - \'median\': the median of the numbers - \'mode\': the mode of the numbers - \'range\': the range of the numbers (difference between the maximum and minimum values) The function should handle the following edge cases: - The list is empty - The list contains only one number - There are multiple modes in the list Include error handling to ensure that the inputs are integers and provide appropriate messages for any invalid inputs.","solution":"from collections import Counter from statistics import mean, mode, median import math def calculate_statistics(numbers): Returns a dictionary with the mean, median, mode, and range of a list of numbers. If the list is empty, returns None. If the list has non-integer values, raises ValueError. if not numbers: return None for num in numbers: if not isinstance(num, int): raise ValueError(\\"All elements in the input list must be integers.\\") statistics = {} statistics[\'mean\'] = mean(numbers) statistics[\'median\'] = median(numbers) # Handling the mode, as statistics.mode() does not handle multiple modes well count = Counter(numbers) max_freq = max(count.values()) modes = [k for k, v in count.items() if v == max_freq] statistics[\'mode\'] = modes if len(modes) > 1 else modes[0] statistics[\'range\'] = max(numbers) - min(numbers) return statistics"},{"question":"Explain the differences between deep copy and shallow copy in programming. Provide an example in Python to illustrate how changes to a copied object affect the original object in both deep and shallow copy contexts.","solution":"import copy def shallow_copy_example(): Demonstrates the behavior of shallow copy. original_list = [1, 2, [3, 4]] shallow_copied_list = copy.copy(original_list) return original_list, shallow_copied_list def deep_copy_example(): Demonstrates the behavior of deep copy. original_list = [1, 2, [3, 4]] deep_copied_list = copy.deepcopy(original_list) return original_list, deep_copied_list"},{"question":"Write a function that simulates a simplified version of a banking system. Your function should allow for the creation of new accounts, balance inquiries, deposits, and withdrawals. Each account should be associated with a unique account number and should start with an initial balance of zero. Ensure that deposits and withdrawals respect the following criteria: 1. Deposits must be positive values. 2. Withdrawals must not exceed the current balance of the account. 3. Return appropriate error messages for invalid operations. The function should be able to handle multiple accounts and return a dictionary that contains account numbers as keys and their respective balances as values. Implement and test your solution thoroughly to ensure it handles various edge cases and maintains data integrity across multiple operations.","solution":"class SimplifiedBankingSystem: def __init__(self): self.accounts = {} self.next_account_number = 1 def create_account(self): account_number = self.next_account_number self.accounts[account_number] = 0 self.next_account_number += 1 return account_number def balance_inquiry(self, account_number): if account_number not in self.accounts: return \\"Error: Account not found\\" return self.accounts[account_number] def deposit(self, account_number, amount): if account_number not in self.accounts: return \\"Error: Account not found\\" if amount <= 0: return \\"Error: Deposit amount must be positive\\" self.accounts[account_number] += amount return self.accounts[account_number] def withdraw(self, account_number, amount): if account_number not in self.accounts: return \\"Error: Account not found\\" if amount <= 0: return \\"Error: Withdrawal amount must be positive\\" if self.accounts[account_number] < amount: return \\"Error: Insufficient balance\\" self.accounts[account_number] -= amount return self.accounts[account_number] def all_accounts(self): return self.accounts"},{"question":"Write a function that receives two strings and checks if the second string is an anagram of the first string. An anagram is a rearrangement of the letters in another string. Ignore spaces and capitalization when performing the comparison. Example: \\"Listen\\" and \\"Silent\\" should be identified as anagrams.","solution":"def are_anagrams(s1, s2): Checks if s2 is an anagram of s1. Parameters: - s1 (str): The first string. - s2 (str): The second string. Returns: - bool: True if s2 is an anagram of s1, False otherwise. # Remove spaces and convert to lowercase s1_cleaned = \'\'.join(s1.split()).lower() s2_cleaned = \'\'.join(s2.split()).lower() # Check if sorted characters of both cleaned strings are the same return sorted(s1_cleaned) == sorted(s2_cleaned)"},{"question":"Write a function to merge two non-empty sorted linked lists into a single sorted linked list. The function should create a new linked list that contains nodes from both the input lists, and the nodes should be sorted in ascending order. You should implement the linked list data structure from scratch (i.e., create the `Node` and `LinkedList` classes). Complete the code: class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def append(self, data): if not self.head: self.head = Node(data) else: current = self.head while current.next: current = current.next current.next = Node(data) def merge_sorted_lists(l1: LinkedList, l2: LinkedList) -> LinkedList: Merge two non-empty sorted linked lists into a single sorted linked list. merged_list = LinkedList() # Your implementation here # Examples: # List 1: 1 -> 3 -> 5 # List 2: 2 -> 4 -> 6 # merged_list = merge_sorted_lists(l1, l2) # The merged list should contain nodes in the order: 1 -> 2 -> 3 -> 4 -> 5 -> 6","solution":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def append(self, data): if not self.head: self.head = Node(data) else: current = self.head while current.next: current = current.next current.next = Node(data) def to_list(self): result = [] current = self.head while current: result.append(current.data) current = current.next return result def merge_sorted_lists(l1: LinkedList, l2: LinkedList) -> LinkedList: merged_list = LinkedList() current1 = l1.head current2 = l2.head while current1 and current2: if current1.data < current2.data: merged_list.append(current1.data) current1 = current1.next else: merged_list.append(current2.data) current2 = current2.next while current1: merged_list.append(current1.data) current1 = current1.next while current2: merged_list.append(current2.data) current2 = current2.next return merged_list"},{"question":"Write a function `analyze_tickets(logs: List[str]) -> Dict[str, int]` that analyzes a customer service ticket log and returns a dictionary where each key is a customer service agent\'s name and the value is the number of tickets resolved by that agent. Each log entry is a string in the format `\\"AgentName: TicketID\\"`. If an agent appears multiple times for the same ticket ID, count it only once. For example: ```python logs = [ \\"Alice: T1\\", \\"Bob: T2\\", \\"Alice: T1\\", \\"Alice: T2\\", \\"Charlie: T3\\", \\"Charlie: T4\\", \\"Charlie: T3\\" ] Expected output: { \\"Alice\\": 2, \\"Bob\\": 1, \\"Charlie\\": 2 } ``` Implement the `analyze_tickets` function to correctly tabulate the number of unique tickets resolved by each agent without counting duplicate ticket IDs. ```python def analyze_tickets(logs): \'\'\' Given a list of logs of customer service ticket resolution, return a dictionary with the count of unique tickets resolved by each agent. Parameters: logs (List[str]): A list of log entries each in the format of \\"AgentName: TicketID\\". Returns: Dict[str, int]: A dictionary where keys are agent names, and values are the count of unique tickets resolved by them. \'\'\' pass ```","solution":"def analyze_tickets(logs): Given a list of logs of customer service ticket resolution, return a dictionary with the count of unique tickets resolved by each agent. Parameters: logs (List[str]): A list of log entries each in the format of \\"AgentName: TicketID\\". Returns: Dict[str, int]: A dictionary where keys are agent names, and values are the count of unique tickets resolved by them. from collections import defaultdict, Counter agent_tickets = defaultdict(set) for log in logs: agent, ticket = log.split(\': \') agent_tickets[agent].add(ticket) result = {agent: len(tickets) for agent, tickets in agent_tickets.items()} return result"},{"question":"Given a directed graph with `n` nodes and `m` edges where each node represents a city and each edge represents a one-way road connecting two cities, your task is to find the number of strongly connected components (SCC) in the graph. A strongly connected component is a maximal subgraph where every pair of nodes is reachable from each other. # Input Your program should take the following input: 1. An integer `n` indicating the number of nodes (1 ≤ n ≤ 10^5). 2. An integer `m` indicating the number of edges (1 ≤ m ≤ 10^5). 3. `m` pairs of integers `u` and `v` (1 ≤ u, v ≤ n) each representing a directed edge from node `u` to node `v`. # Output Your program should output a single integer, which is the number of strongly connected components in the graph. # Example **Input:** ``` 5 5 1 2 2 3 3 1 4 5 5 4 ``` **Output:** ``` 2 ``` # Explanation In the example, there are 5 nodes and 5 edges. The graph has two strongly connected components: one consisting of the nodes {1, 2, 3} and another consisting of the nodes {4, 5}. Since every node in each of these sets is reachable from every other node within the same set, each forms a strongly connected component. Thus, the number of SCCs is 2.","solution":"from sys import setrecursionlimit, stdin, stdout # Adjust the recursion limit and input/output optimization for performance setrecursionlimit(200000) input = stdin.read def find_scc(n, m, edges): def dfs(v): # Depth-first search to order nodes visited[v] = True for to in g[v]: if not visited[to]: dfs(to) order.append(v) def reverse_dfs(v): # DFS on the reverse graph to mark SCCs components[component_id].append(v) visited[v] = True for to in rg[v]: if not visited[to]: reverse_dfs(to) # Step 1: Create the graph and reverse graph g = [[] for _ in range(n)] rg = [[] for _ in range(n)] for u, v in edges: g[u - 1].append(v - 1) rg[v - 1].append(u - 1) # Step 2: Perform the first DFS to get the finish order visited = [False] * n order = [] for i in range(n): if not visited[i]: dfs(i) # Step 3: Reverse the graph and find strongly connected components visited = [False] * n components = [] component_id = 0 while order: node = order.pop() if not visited[node]: components.append([]) reverse_dfs(node) component_id += 1 return component_id # Helper function to process input and invoke the SCC function def number_of_scc(n, m, edges_list): edges = [] for i in range(m): u, v = edges_list[i] edges.append((u, v)) return find_scc(n, m, edges)"},{"question":"Write a function that takes in a string and encodes it using Run-Length Encoding (RLE). RLE is a simple form of data compression where consecutive occurrences of the same character are replaced by a single character followed by the number of occurrences. For example, the string \\"aaabbbbcc\\" would be encoded as \\"a3b4c2\\". Your function should return the encoded string. If a character appears only once, it should still be followed by the number 1.","solution":"def run_length_encoding(s): Returns the Run-Length Encoded string of the input string s. if not s: return \\"\\" encoded_string = \\"\\" count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: encoded_string += s[i-1] + str(count) count = 1 # Add the last group encoded_string += s[-1] + str(count) return encoded_string"},{"question":"Design a function that takes a sentence as input and finds the longest subsequence of words that form an alphabetical progression. The subsequence words must appear in the same order as in the original sentence, but they do not have to be consecutive. The function should return the longest alphabetical subsequence as a list of words. In case of multiple subsequences of the same maximum length, return the one that appears first in the sentence. If the input sentence is empty or consists only of non-alphabetic characters, return an empty list. Function should handle invalid inputs gracefully and should return a corresponding error message in such cases. Input should be a single string, and the program should ignore any non-alphabet characters before processing.","solution":"import re def longest_alphabetical_subsequence(sentence): if not isinstance(sentence, str): return \\"Error: The input should be a string\\" words = re.findall(r\'b[a-zA-Z]+b\', sentence) if not words: return [] n = len(words) dp = [[] for _ in range(n)] dp[0].append(words[0]) max_subseq = dp[0] for i in range(1, n): for j in range(i): if words[j] < words[i] and len(dp[j]) + 1 > len(dp[i]): dp[i] = dp[j].copy() dp[i].append(words[i]) if len(dp[i]) > len(max_subseq): max_subseq = dp[i] return max_subseq"},{"question":"Write a function that accepts a list of integers and a target integer. The function should return a list of pairs of integers from the input list that add up to the target integer. Each pair should be a tuple, and the same integer from the input list can only be used once. The order of the output pairs does not matter. If no such pairs exist, return an empty list. Ensure your function handles edge cases, such as an empty list or no pairs summing to the target.","solution":"def find_pairs_with_sum(nums, target): Returns a list of pairs of integers from the input list that add up to the target integer. Each pair is a tuple, and the same integer from the input list can only be used once. nums.sort() pairs = [] visited = set() for i in range(len(nums)): for j in range(i + 1, len(nums)): if (nums[i], nums[j]) not in visited and nums[i] + nums[j] == target: pairs.append((nums[i], nums[j])) visited.add((nums[i], nums[j])) return pairs"},{"question":"Create a function that takes a string of parentheses and determines if the order of the parentheses is valid. The function should return `True` if the string is valid, and `False` otherwise. A string of parentheses is considered valid if the following conditions are met: 1. Open parentheses must be closed by the same type of parentheses. 2. Open parentheses must be closed in the correct order. 3. Every close parenthesis has a corresponding unmatched open parenthesis before it. Implement your solution using the `stack` data structure. # Example ```python def is_valid_parentheses(s: str) -> bool: pass # Example Usage assert is_valid_parentheses(\\"()\\") == True assert is_valid_parentheses(\\"()[]{}\\") == True assert is_valid_parentheses(\\"(]\\") == False ``` # Constraints - The input string `s` will have a maximum length of 10,000. # Function Signature ```python def is_valid_parentheses(s: str) -> bool: ```","solution":"def is_valid_parentheses(s: str) -> bool: This function takes a string of parentheses and determines if the order of the parentheses is valid. It returns True if the string is valid and False otherwise. stack = [] matching_parentheses = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or stack.pop() != matching_parentheses[char]: return False else: # Invalid character return False return stack == []"},{"question":"You are given a list of n integers where each integer can appear more than once. Write a function that groups the integers based on their frequency and returns a list of lists. Each inner list should contain integers that have the same frequency, and the inner lists should be ordered in decreasing order of frequencies. Within each inner list, integers should be ordered in ascending order. **Function Signature:** ```python def group_by_frequency(numbers: List[int]) -> List[List[int]]: pass ``` # Input - A list `numbers` of integers with length `n` (1 ≤ n ≤ 10^3). # Output - A list of lists where each inner list contains integers with the same frequency, ordered by decreasing frequency. Integers within each inner list should be ordered in ascending order. # Example ```python numbers = [4, 4, 2, 1, 2, 3, 4] print(group_by_frequency(numbers)) # Output: [[4], [2], [1, 3]] ```","solution":"from typing import List from collections import Counter def group_by_frequency(numbers: List[int]) -> List[List[int]]: # Count the frequency of each integer in the list frequency = Counter(numbers) # Group the numbers by their frequency frequency_dict = {} for num, freq in frequency.items(): if freq not in frequency_dict: frequency_dict[freq] = [] frequency_dict[freq].append(num) # Sort the inner lists and order them by decreasing frequency result = [] for freq in sorted(frequency_dict.keys(), reverse=True): result.append(sorted(frequency_dict[freq])) return result"},{"question":"Convert the following function written in Python to an efficient and optimized function using list comprehensions and other useful functions from the standard library. The function takes a list of temperatures in Celsius and converts them to Fahrenheit. Temperatures below 0°C should be filtered out. Additionally, ensure the new function maintains readability and proper commenting. Original Function: ```python def convert_and_filter_temperatures(temperatures): result = [] for temp in temperatures: if temp >= 0: fahrenheit = (temp * 9/5) + 32 result.append(fahrenheit) return result ``` New Function (to be completed): ```python def convert_and_filter_temperatures(temperatures): # Your optimized code here ```","solution":"def convert_and_filter_temperatures(temperatures): Converts a list of temperatures from Celsius to Fahrenheit, filtering out any temperatures below 0°C. Args: temperatures (list): A list of temperatures in Celsius. Returns: list: A list of temperatures in Fahrenheit, with all values below 0°C filtered out. return [(temp * 9/5) + 32 for temp in temperatures if temp >= 0]"},{"question":"A company database stores employee information as a list of dictionaries, each containing the `name`, `age`, `department`, and `salary` of an employee. You are tasked with writing a function `update_salaries(employees, percentage, department)` that updates the salary of all employees in a specified department by a given percentage. Additionally, write another function `find_top_salary_employees(employees, n)` that returns the `names` of top `n` employees with the highest salaries from the entire company. For example, consider the following sample input: ```python employees = [ {\'name\': \'Alice\', \'age\': 30, \'department\': \'HR\', \'salary\': 50000}, {\'name\': \'Bob\', \'age\': 25, \'department\': \'Engineering\', \'salary\': 70000}, {\'name\': \'Charlie\', \'age\': 35, \'department\': \'HR\', \'salary\': 60000}, {\'name\': \'David\', \'age\': 40, \'department\': \'Sales\', \'salary\': 80000}, {\'name\': \'Eve\', \'age\': 28, \'department\': \'Engineering\', \'salary\': 90000} ] ``` Example 1: ```python update_salaries(employees, 10, \'HR\') print(employees) ``` Output: ```python [ {\'name\': \'Alice\', \'age\': 30, \'department\': \'HR\', \'salary\': 55000}, {\'name\': \'Bob\', \'age\': 25, \'department\': \'Engineering\', \'salary\': 70000}, {\'name\': \'Charlie\', \'age\': 35, \'department\': \'HR\', \'salary\': 66000}, {\'name\': \'David\', \'age\': 40, \'department\': \'Sales\', \'salary\': 80000}, {\'name\': \'Eve\', \'age\': 28, \'department\': \'Engineering\', \'salary\': 90000} ] ``` Example 2: ```python top_employees = find_top_salary_employees(employees, 3) print(top_employees) ``` Output: ```python [\'Eve\', \'David\', \'Charlie\'] ``` Constraints: - `1 <= len(employees) <= 100` - `employees[i][\'name\']` is guaranteed to be unique in the list - `0 <= percentage <= 100` - `1 <= n <= len(employees)`","solution":"def update_salaries(employees, percentage, department): Updates the salary of all employees in a specified department by a given percentage. :param employees: List of dictionaries containing employee information. :param percentage: The percentage increase to apply to the salaries. :param department: The department whose employees\' salaries are to be updated. for employee in employees: if employee[\'department\'] == department: employee[\'salary\'] += employee[\'salary\'] * (percentage / 100) def find_top_salary_employees(employees, n): Returns the names of top n employees with the highest salaries. :param employees: List of dictionaries containing employee information. :param n: The number of top salary employees to return. :return: List of names of top n employees. sorted_employees = sorted(employees, key=lambda x: x[\'salary\'], reverse=True) return [employee[\'name\'] for employee in sorted_employees[:n]]"},{"question":"Write a function that takes a string as an input and returns the count of each vowel present in the string. The function must be case-insensitive and return the result as a dictionary where keys are the vowels and values are their counts. Do not use any inbuilt string count or collection libraries. Example: input_str = \\"Programming is awesome\\" #Expected Output#: {\'a\': 2, \'e\': 2, \'i\': 2, \'o\': 2, \'u\': 0}","solution":"def vowel_count(input_str): Returns a dictionary containing the count of each vowel in the input string. The function is case-insensitive. vowels = \'aeiou\' input_str = input_str.lower() count_dict = {vowel: 0 for vowel in vowels} for char in input_str: if char in vowels: count_dict[char] += 1 return count_dict"},{"question":"Implement a function `left_rotate(array, k)` that takes an array of integers and a non-negative integer `k`, and returns the array after rotating it to the left by `k` positions. For example, given the array [1, 2, 3, 4, 5] and k = 2, the function should return [3, 4, 5, 1, 2]. Note that the input array must remain unchanged; instead, your function should return a new array. **Function Signature:** ```python def left_rotate(array: List[int], k: int) -> List[int]: pass ``` **Input** - `array (List[int])`: An array of integers. - `k (int)`: A non-negative integer representing the number of positions to rotate the array. **Output** - The function should return a new array which is the result of rotating the input array to the left by `k` positions. **Examples** - `left_rotate([1, 2, 3, 4, 5], 2)` -> `[3, 4, 5, 1, 2]` - `left_rotate([10, 20, 30, 40, 50, 60], 3)` -> `[40, 50, 60, 10, 20, 30]` - `left_rotate([1, 2, 3, 4, 5], 0)` -> `[1, 2, 3, 4, 5]`","solution":"def left_rotate(array, k): Rotate the array to the left by k positions. :param array: List[int], input array of integers :param k: int, number of positions to rotate :return: List[int], new array after rotation if not array: return array # Return empty array if input is empty k = k % len(array) # Handle cases where k is greater than array length return array[k:] + array[:k]"},{"question":"Write a function in Python to determine if a given binary tree is a valid binary search tree (BST). A BST is defined as follows: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. Your function should accept the root of the tree and return `True` if it is a BST, and `False` otherwise. You may assume that the nodes contain integer values. Consider optimizing your solution for both time and space complexities. Provide the full implementation of the function along with a brief explanation of your approach.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root): Determines if a binary tree is a valid binary search tree (BST). Args: root (TreeNode): The root of the binary tree. Returns: bool: True if the binary tree is a valid BST, False otherwise. def validate(node, low=float(\'-inf\'), high=float(\'inf\')): if not node: return True if not (low < node.val < high): return False return validate(node.left, low, node.val) and validate(node.right, node.val, high) return validate(root)"},{"question":"Given a string containing only lowercase alphabetical characters, write a Python function to find the first non-repeating character in the string. If all characters are repeating or the string is empty, return an empty string (\\"\\"). String: \\"swiss\\" Example: - Input: \\"swiss\\" - Output: \\"w\\" Incorrect Implementation: ```python def first_unique_char(s): count = {char: s.count(char) for char in s} for char in s: if count[char] == 1: return char return \\"\\" ``` The test will evaluate your ability to identify and correct issues related to performance with large inputs, understanding of dictionary operations, and efficient string manipulation in Python.","solution":"def first_unique_char(s): Returns the first non-repeating character in the string s. If all characters are repeating or the string is empty, returns an empty string. from collections import OrderedDict, Counter if not s: return \\"\\" count = Counter(s) for char in s: if count[char] == 1: return char return \\"\\""},{"question":"Develop a function in Python that generates all possible anagrams of a given string. The function should be optimized to handle strings of varying lengths, ensuring efficiency and performance, particularly for longer strings. Additionally, the function should ensure that the anagrams produced are unique and returned in a sorted order. The program should also account for and handle any edge cases, such as an empty string or strings with repeated characters.","solution":"from itertools import permutations def generate_anagrams(s): Generate all unique anagrams of the given string and return in sorted order. if s == \\"\\": return [\\"\\"] unique_anagrams = set(permutations(s)) sorted_anagrams = sorted([\'\'.join(anagram) for anagram in unique_anagrams]) return sorted_anagrams"},{"question":"Given a list of integers, write a Python function to find the length of the longest contiguous subarray of non-zero integers. The function should take a list as an input and return the length of the longest contiguous subarray. Include test cases to validate your solution. ```python def longest_nonzero_subarray(arr): max_length = 0 current_length = 0 for num in arr: if num != 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length # Test Cases assert longest_nonzero_subarray([1, 2, 0, 3, 4, 5, 0, 6, 7]) == 3 assert longest_nonzero_subarray([1, 0, 2, 3, 0, 0, 4, 5, 6]) == 3 assert longest_nonzero_subarray([0, 0, 0, 0, 0]) == 0 assert longest_nonzero_subarray([3, 2, 1, 0, 1, 2, 3, 4]) == 4 assert longest_nonzero_subarray([1, 1, 1, 1, 1, 1]) == 6 ``` Explain how your solution works, and discuss the time complexity of your approach. Additionally, describe any edge cases you considered and how your function handles them.","solution":"def longest_nonzero_subarray(arr): Returns the length of the longest contiguous subarray of non-zero integers. Parameters: arr (list): A list of integers. Returns: int: Length of the longest contiguous subarray of non-zero integers. max_length = 0 current_length = 0 for num in arr: if num != 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Given an array of integers and a target sum, implement a function in Python that returns all unique pairs of numbers from the array that add up to the target sum. Note that a pair must consist of two distinct elements and the same pair must not be repeated (i.e., (a, b) and (b, a) are considered the same pair). Provide the function signature, a brief description of the approach, and the complete implementation. **Function Signature:** ```python def find_pairs_with_sum(arr: List[int], target: int) -> List[Tuple[int, int]]: ``` **Example:** ```python arr = [10, 1, 2, 7, 6, 1, 5] target = 8 find_pairs_with_sum(arr, target) # Output: [(2, 6), (1, 7)] ``` **Note:** - The output list should contain pairs in ascending order of the first element, and if the first elements are the same, then in ascending order of the second element. - Do not use the same element twice. - You may use extra space to store intermediate results if needed.","solution":"from typing import List, Tuple def find_pairs_with_sum(arr: List[int], target: int) -> List[Tuple[int, int]]: Returns all unique pairs of numbers from the array that add up to the target sum. Each pair (a, b) is unique and pairs (a, b) and (b, a) are considered the same. seen = set() pairs = set() for num in arr: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return sorted(list(pairs))"},{"question":"Write a Python program to simulate a text-based inventory management system for a small retail store. The program should be capable of adding new items, deleting items, updating item quantities, and displaying the current inventory. Store the inventory data in a CSV file so that it persists between executions of the program. Implement appropriate error handling to manage cases such as attempting to delete or update an item that does not exist, or reading from a corrupted CSV file. Additionally, ensure the program can handle large inventories efficiently.","solution":"import csv import os class Inventory: def __init__(self, filename): self.filename = filename if not os.path.isfile(self.filename): with open(self.filename, mode=\'w\', newline=\'\') as file: writer = csv.writer(file) writer.writerow([\'Item\', \'Quantity\']) def add_item(self, item, quantity): inventory = self.load_inventory() if item in inventory: print(f\\"Item \'{item}\' already exists. Use update_quantity to change the quantity.\\") return with open(self.filename, \'a\', newline=\'\') as file: writer = csv.writer(file) writer.writerow([item, quantity]) def delete_item(self, item): inventory = self.load_inventory() if item not in inventory: print(f\\"Item \'{item}\' not found in inventory.\\") return inventory.pop(item) self.save_inventory(inventory) def update_quantity(self, item, quantity): inventory = self.load_inventory() if item not in inventory: print(f\\"Item \'{item}\' not found in inventory.\\") return inventory[item] = quantity self.save_inventory(inventory) def display_inventory(self): inventory = self.load_inventory() for item, quantity in inventory.items(): print(f\\"Item: {item}, Quantity: {quantity}\\") def load_inventory(self): inventory = {} try: with open(self.filename, \'r\', newline=\'\') as file: reader = csv.DictReader(file) for row in reader: inventory[row[\'Item\']] = int(row[\'Quantity\']) except Exception as e: print(f\\"Error reading inventory file: {e}\\") return inventory def save_inventory(self, inventory): with open(self.filename, \'w\', newline=\'\') as file: writer = csv.writer(file) writer.writerow([\'Item\', \'Quantity\']) for item, quantity in inventory.items(): writer.writerow([item, quantity])"},{"question":"Convert the following Roman Numeral string into its equivalent integer value. For example, if the input is \\"XIV\\", the output should be 14. Ensure that your solution accounts for the subtractive combinations of Roman numerals and handles edge cases gracefully.","solution":"def roman_to_int(s): Convert a Roman numeral string to an integer. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Create a function that receives a list of integers and returns the most frequently occurring integer in the list. If there are multiple integers with the same highest frequency, return the smallest one. Provide a full implementation, including considerations for edge cases such as an empty list or a list where every element is unique.","solution":"def most_frequent_integer(nums): Returns the most frequently occurring integer in the list. If there are multiple integers with the same highest frequency, returns the smallest one. if not nums: return None from collections import Counter count = Counter(nums) max_freq = max(count.values()) most_frequent = [num for num, freq in count.items() if freq == max_freq] return min(most_frequent)"},{"question":"Design a function in Python that takes as input a list of integers and returns the length of the longest contiguous subarray whose sum is equal to a given number `k`. Explain your approach and provide both the implemented function and an example to demonstrate its usage.","solution":"def longest_subarray_with_sum_k(arr, k): Given a list of integers, returns the length of the longest contiguous subarray whose sum is equal to `k`. sum_map = {} curr_sum = 0 max_len = 0 for i, num in enumerate(arr): curr_sum += num if curr_sum == k: max_len = i + 1 if curr_sum - k in sum_map: max_len = max(max_len, i - sum_map[curr_sum - k]) if curr_sum not in sum_map: sum_map[curr_sum] = i return max_len # Example usage: arr = [1, -1, 5, -2, 3] k = 3 print(longest_subarray_with_sum_k(arr, k)) # Output should be 4"},{"question":"Task Write a Python function that determines the first N prime numbers in a given range and returns them as a list. Prime numbers in a given range are numbers that have no positive divisors other than 1 and themselves. Objective - Write a function that accepts three parameters: `start`, `end`, and `N`. - `start` and `end` define the range (inclusive) within which to find prime numbers. - `N` specifies how many prime numbers to return. - If there are fewer than N prime numbers in the given range, return all found prime numbers. - Optimize the function to handle large ranges efficiently. Constraints - `1 <= start <= end <= 10^6` - `1 <= N <= (end - start + 1)` Function Signature ```python def find_n_primes_in_range(start: int, end: int, N: int) -> list: ``` Example ```python # Example 1 # In the range 10 to 50, the prime numbers are: 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47 # The first 5 prime numbers are: 11, 13, 17, 19, 23 print(find_n_primes_in_range(10, 50, 5)) # Output: [11, 13, 17, 19, 23] # Example 2 # In the range 20 to 30, the prime numbers are: 23 and 29 # We need 4 prime numbers but the range only contains 2 prime numbers. print(find_n_primes_in_range(20, 30, 4)) # Output: [23, 29] ``` Notes - Consider edge cases such as when the range defined by `start` and `end` contains less than N primes. - Carefully handle the scenario when the input range is very large but still needs to be efficiently processed.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_n_primes_in_range(start: int, end: int, N: int) -> list: Finds the first N primes in the given range [start, end]. If there are fewer than N primes, return all found primes. primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) if len(primes) == N: break return primes"},{"question":"Design a function in Python that processes a dictionary containing student names as keys and their respective lists of grades as values. This function should calculate the average grade for each student and then determine the students who have an average grade above a certain threshold. The threshold should be passed as a parameter to the function. The function should return the names of the students who meet this criterion. Ensure that your code includes appropriate error handling, such as managing cases where the input dictionary contains empty lists or non-numeric values. Additionally, provide a comprehensive suite of tests to verify the accuracy and robustness of your solution.","solution":"def students_above_threshold(grades_dict, threshold): Returns the names of students with an average grade above the specified threshold. grades_dict: dict, where keys are student names and values are lists of grades (floats or ints) threshold: float, the threshold value for average grade Returns: list of student names who have average grade above the threshold above_threshold_students = [] for student, grades in grades_dict.items(): if not grades: # Skip students with empty grade lists continue try: # Calculate average if all items are numeric avg_grade = sum(grades) / len(grades) if avg_grade > threshold: above_threshold_students.append(student) except TypeError: # Handle non-numeric values in grades list continue return above_threshold_students"},{"question":"Create a Python script that reads a CSV file containing sales data, calculates the total sales for each product category, and writes the results to a new CSV file. The sales data CSV file has the following columns: \'ProductID\', \'Category\', \'ProductName\', \'QuantitySold\', and \'PricePerUnit\'. The output CSV file should have columns: \'Category\' and \'TotalSales\'. Ensure that the script handles potential errors gracefully, such as missing fields or incorrect data types.","solution":"import csv def calculate_total_sales(input_csv, output_csv): try: sales_data = {} # Read the input CSV file with open(input_csv, mode=\'r\') as infile: reader = csv.DictReader(infile) # Process each row for row in reader: try: category = row[\'Category\'] quantity_sold = int(row[\'QuantitySold\']) price_per_unit = float(row[\'PricePerUnit\']) total_sale = quantity_sold * price_per_unit if category in sales_data: sales_data[category] += total_sale else: sales_data[category] = total_sale except (KeyError, ValueError): continue # Skip row if there are missing fields or incorrect data types # Write the results to the output CSV file with open(output_csv, mode=\'w\', newline=\'\') as outfile: fieldnames = [\'Category\', \'TotalSales\'] writer = csv.DictWriter(outfile, fieldnames=fieldnames) writer.writeheader() for category, total_sales in sales_data.items(): writer.writerow({\'Category\': category, \'TotalSales\': total_sales}) except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"Create a script that simulates a basic producer-consumer pattern using Python\'s `queue` module. The producer should read a file containing JSON strings, enqueue each JSON string, and the consumer should dequeue the JSON strings one by one, processing them. Implement appropriate synchronization to ensure the consumer only processes when data is available and stops once all data has been processed. Provide the implementation and example usage. The script should include the following components: 1. A `producer` function that reads from a file and enqueues JSON strings into a shared queue. 2. A `consumer` function that dequeues JSON strings from the shared queue and processes them (e.g., by printing them). 3. Use Python\'s `threading` module to run the producer and consumer functions concurrently. 4. Ensure proper handling of synchronization using locks or other threading primitives available in Python.","solution":"import threading import queue import json # Define the producer function def producer(filename, q): with open(filename, \'r\') as file: for line in file: q.put(line.strip()) q.put(None) # Sentinel to indicate the end of production # Define the consumer function def consumer(q): while True: item = q.get() if item is None: break # Process the JSON string (in this case, just print it) print(json.loads(item)) # Example usage def main(): q = queue.Queue() # Replace \'data.json\' with your actual file name that contains JSON strings producer_thread = threading.Thread(target=producer, args=(\'data.json\', q)) consumer_thread = threading.Thread(target=consumer, args=(q,)) producer_thread.start() consumer_thread.start() producer_thread.join() consumer_thread.join() # Uncomment for running main() directly # if __name__ == \'__main__\': # main()"},{"question":"Write a function that accepts a string of words separated by spaces and returns a dictionary where the keys are the words and the values are the length of those words. Additionally, the function should ignore any words containing non-alphabetic characters and convert all words to lowercase before processing. Return the dictionary sorted by word lengths in ascending order. Assume that the input string contains only spaces and alphabetic characters. Example input: \\"Hello world this is a test string with mixed cases and numbers123\\" Example output: {\'a\': 1, \'is\': 2, \'this\': 4, \'test\': 4, \'with\': 4, \'cases\': 5, \'hello\': 5, \'world\': 5, \'string\': 6, \'mixed\': 5}","solution":"def words_length_dict(s): Returns a dictionary where the keys are words from the input string and the values are their respective lengths. Words are converted to lowercase and non-alphabetic words are ignored. The dictionary is sorted by word lengths in ascending order. words = s.split() result = {} for word in words: lower_word = word.lower() if lower_word.isalpha(): result[lower_word] = len(lower_word) sorted_result = dict(sorted(result.items(), key=lambda item: item[1])) return sorted_result"},{"question":"Insert an element \\"z\\" into the third position of the given array \\"numbers\\" and display the updated array. let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","solution":"def insert_z(numbers): Inserts the element \'z\' into the third position of the array \'numbers\' and returns the updated array. numbers.insert(2, \'z\') # Insert \'z\' at index 2 (third position) return numbers # Example usage: numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] print(insert_z(numbers)) # Output should be [1, 2, \'z\', 3, 4, 5, 6, 7, 8, 9, 10]"},{"question":"<p>Let Bbb Z_n be the set of integers modulo n. Consider the function h from Bbb Z_n times Bbb Z_n to Bbb Z_n times Bbb Z_n defined by h(x, y) = ((x + y) bmod n, (x + 2y) bmod n). Let h^{(k)}(x, y) = h(h(cdots h(x, y) cdots)) be the k-th iterated composition of h with itself.</p> <p>A point (x, y) in Bbb Z_n times Bbb Z_n is said to be fixed by h if h(x, y) = (x, y). Let F(n) denote the set of all fixed points of h in Bbb Z_n times Bbb Z_n. For instance, when n = 3, the function h has only the fixed point (0, 0), so F(3) = {(0, 0)}.</p> <p>Define S(n) as the sum of the x-coordinates of all fixed points in F(n). For example, for n = 3, since F(3) = {(0, 0)}, we have S(3) = 0.</p> <p>Find S(10^7).</p>","solution":"def S(n): Calculate the sum of the x-coordinates of all fixed points in F(n). # As derived, the only fixed point is (0, 0) for any positive integer n. return 0"},{"question":"Write a function that takes in a list of integers and returns a new list with each integer squared, but without using any built-in map or list comprehension techniques. Ensure your function handles edge cases such as an empty list or a list with negative integers. Example: ``` Input: [1, 2, 3, 4, 5] Output: [1, 4, 9, 16, 25] Input: [-1, -2, -3] Output: [1, 4, 9] Input: [] Output: [] ```","solution":"def square_list(numbers): Given a list of integers, returns a new list with each integer squared. result = [] for number in numbers: result.append(number * number) return result"},{"question":"Write a function that converts a Roman numeral string to an integer. Consider the fact that Roman numerals have special cases where subtraction is used, such as IV for 4 and IX for 9. The function should handle Roman numerals up to 3999. Write test cases to ensure the correctness of your function.","solution":"def roman_to_int(roman): Convert a Roman numeral string to an integer. :param roman: A string representing the Roman numeral. :return: An integer representation of the Roman numeral. roman_values = {\'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000} total = 0 prev_value = 0 for char in reversed(roman): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Write a function that takes in a string of text containing words and punctuations. The function should filter out any punctuation and only retain alphabetic characters and spaces. It should then count and return the number of each unique word in the text, case-insensitively. Words should be considered the same regardless of their case (e.g., \\"Apple\\" and \\"apple\\" should be counted as the same word). # Example Input ```plaintext \\"Hello, world! Hello... HELLO.\\" ``` # Example Output ```python { \\"hello\\": 3, \\"world\\": 1 } ``` # Constraints - Punctuations include: `!`, `.`, `,`, `?`, `:`, `;`, `-`, `()`, `[]`, `{}`, `\'`, `\\"` - The input string length will not exceed 1000 characters. # Function Signature ```python def count_words(text: str) -> dict: pass ```","solution":"import re from collections import Counter def count_words(text: str) -> dict: This function takes a string of text, removes punctuation, and returns a dictionary with the count of each unique word, case-insensitively. # Remove punctuation using regex text = re.sub(r\'[^ws]\', \'\', text) # Convert text to lowercase text = text.lower() # Split the text into words words = text.split() # Count the words word_count = Counter(words) return dict(word_count)"},{"question":"You are given a string containing a mix of words and digits. Write a function that separates and returns two lists: one containing all the words in the original order, and another containing all the digits, also in their original order. Assume that the input string consists of words and digits separated by spaces. string = \\"apple 123 banana 456 cherry 789\\" Example: Input: \\"pear 23 orange 45 grape 6\\" Output: ([\\"pear\\", \\"orange\\", \\"grape\\"], [\\"23\\", \\"45\\", \\"6\\"])","solution":"def separate_words_and_digits(s): Separates the input string into words and digits. Parameters: s (str): A string containing a mix of words and digits separated by spaces. Returns: tuple: Two lists, the first containing words and the second containing digits. words = [] digits = [] for item in s.split(): if item.isdigit(): digits.append(item) else: words.append(item) return words, digits"},{"question":"Write a function that takes an input of a list of integers and returns a dictionary with the count of each unique integer and the maximum integer value in the list. Your solution should also include a feature to handle possible negative numbers by converting them to positive before the count and the maximum value evaluation.","solution":"def count_and_max(nums): Takes a list of integers and returns a dictionary with the count of each unique integer (converted to positive) and the maximum integer value in the list (also converted to positive). positive_nums = [abs(num) for num in nums] num_count = {} for num in positive_nums: if num in num_count: num_count[num] += 1 else: num_count[num] = 1 max_value = max(positive_nums) if positive_nums else None return {\\"count\\": num_count, \\"max\\": max_value}"},{"question":"Write a program in Python that accepts a list of integers as input and returns a new list containing only the prime numbers from the original list. The program should include a helper function to determine if a number is prime. Additionally, ensure that your code can handle negative numbers and zero appropriately, by not including them in the output list as they are not considered prime.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def prime_numbers(lst): Accepts a list of integers and returns a new list containing only the prime numbers. return [num for num in lst if is_prime(num)]"},{"question":"Implement a function that takes a list of words and returns a dictionary where the keys are the lengths of the words and the values are lists containing words of that length. The words should be grouped in the list according to their lengths in ascending order. If the word list is empty, the function should return an empty dictionary. For example, given the input `[\\"apple\\", \\"bat\\", \\"cat\\", \\"elephant\\", \\"dog\\"]`, the expected output should be `{3: [\\"bat\\", \\"cat\\", \\"dog\\"], 5: [\\"apple\\"], 8: [\\"elephant\\"]}`.","solution":"def group_words_by_length(words): Groups words by their lengths and returns a dictionary where keys are word lengths and values are lists of words of that length. :param words: List of words :type words: List[str] :return: Dictionary with word lengths as keys and lists of words as values :rtype: Dict[int, List[str]] from collections import defaultdict length_dict = defaultdict(list) for word in words: length_dict[len(word)].append(word) return dict(length_dict)"},{"question":"Design a Python function that takes an integer and returns the sum of its digits raised to the consecutive powers from 1 up to the number of digits. The function should return true if this sum is equal to the original integer, and false otherwise. Example: Input: 89 Output: True Explanation: 8^1 + 9^2 = 89 Input: 123 Output: False Explanation: 1^1 + 2^2 + 3^3 = 32","solution":"def sum_of_digits_raised_to_powers(n): Returns True if the sum of the digits of `n` each raised to the power of their positions is equal to the original number `n`. str_n = str(n) sum_digits = sum(int(digit) ** (idx + 1) for idx, digit in enumerate(str_n)) return sum_digits == n"},{"question":"Design a function based on the specifications below: def balanced_brackets(expression): \'\'\' You are given a string expression containing only characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Write a function to determine if the string is a valid bracket expression. A valid bracket expression follows these rules: - Open brackets must be closed by the same type of brackets. - Open brackets must be closed in the correct order. The function should return True if the expression is valid and False otherwise. Examples: balanced_brackets(\\"()\\") == True balanced_brackets(\\"({[()]})\\") == True balanced_brackets(\\"({[)}\\") == False balanced_brackets(\\"(((\\") == False \'\'\'","solution":"def balanced_brackets(expression): Determines if the string expression containing only characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is a valid bracket expression. A valid bracket expression follows these rules: - Open brackets must be closed by the same type of brackets. - Open brackets must be closed in the correct order. Returns True if the expression is valid, otherwise False. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in expression: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Design a function that finds the longest common prefix among an array of strings. If no common prefix exists, the function should return an empty string. The function should handle varying input sizes efficiently, and should be robust enough to manage edge cases such as arrays containing empty strings, duplicate strings, or strings with different lengths. Below is a rudimentary, erroneous example of such a function: ```python def longest_common_prefix(strs): prefix = strs[0] for s in strs: while not s.startswith(prefix): prefix = prefix[:-1] if not prefix: break return prefix ``` This code contains logical flaws and can result in infinite loops for certain input cases. Additionally, it is not optimized for large arrays of strings. Your task is to identify and correct the issues in the provided code, ensuring that your implementation can handle all valid scenarios presented by the problem statement. Make sure your solution is optimized for performance, especially for large and diverse inputs. Furthermore, create a series of test cases that validate the correctness and efficiency of your function across various conditions. Consider edge cases such as: - The array containing only one string. - The array containing strings with no common prefix. - The array containing identical strings. - The array including an empty string. Your final implementation should not only be correct but should also demonstrate efficiency and robustness in all edge cases and typical usage scenarios.","solution":"def longest_common_prefix(strs): Function to find the longest common prefix string amongst an array of strings. If no common prefix exists, returns an empty string. if not strs: return \\"\\" # The longest common prefix cannot be longer than the shortest string min_length = min(len(s) for s in strs) low, high = 0, min_length while low <= high: mid = (low + high) // 2 if all(s.startswith(strs[0][:mid]) for s in strs): low = mid + 1 else: high = mid - 1 return strs[0][: (low + high) // 2]"},{"question":"Create a function named `find_longest_substring` that takes a string `s` as input and returns the length of the longest substring without repeating characters. Substrings are contiguous sequences of characters within the string. For example, given the string `s = \\"abcabcbb\\"`, the function should return `3`, as the longest substring without repeating characters is `\\"abc\\"`. Another example, given the string `s = \\"bbbbb\\"`, the function should return `1`, as the longest substring without repeating characters is `\\"b\\"`. The order of characters in the original string should be preserved in the result. Implement the `find_longest_substring` function to achieve the desired functionality.","solution":"def find_longest_substring(s): Returns the length of the longest substring without repeating characters. Parameters: s (str): input string Returns: int: length of the longest substring without repeating characters n = len(s) longest = 0 start = 0 char_index = {} for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end longest = max(longest, end - start + 1) return longest"},{"question":"Write a function that takes a string containing a mix of words and numbers, each separated by spaces, and returns a string where all the numbers are sorted in ascending order while the position of the words remain the same. # Examples ```python sort_numbers_in_string(\\"apple 64 banana 12 orange 23\\") # should return \\"apple 12 banana 23 orange 64\\" sort_numbers_in_string(\\"dog 3 cat 2 bird 1\\") # should return \\"dog 1 cat 2 bird 3\\" sort_numbers_in_string(\\"mix 7.5 and 3 with 5.5\\") # should return \\"mix 3 and 5.5 with 7.5\\" ``` # Specifications - The function should be named `sort_numbers_in_string`. - The input will be a string with words and numerical values (integers or floats) separated by spaces. - Ensure that numerical values are sorted and inserted back at their respective positions among the words.","solution":"def sort_numbers_in_string(s): import re # Extract words and numbers separately words = re.findall(r\'b[a-zA-Z]+b\', s) numbers = re.findall(r\'bd+.?d*b\', s) # Convert numbers from strings to floats for sorting numbers = sorted(numbers, key=float) # Initialize the result list result = [] word_index = 0 number_index = 0 # Iterate through the original string to reconstruct it for token in s.split(): if re.match(r\'d+.?d*\', token): result.append(numbers[number_index]) number_index += 1 else: result.append(words[word_index]) word_index += 1 return \' \'.join(result)"},{"question":"Implement a function that takes two integer inputs: a start value and an end value. The function should compute and return a list containing all the even numbers within this range, inclusive of the start and end values if they are even. If there are no even numbers in the range, the function should return an empty list. **Function Signature:** ```python def list_even_numbers(start: int, end: int) -> list: ``` **Input:** - `start`: an integer representing the start value of the range. - `end`: an integer representing the end value of the range. The value of `end` will always be greater than or equal to `start`. **Output:** - A list of integers containing all even numbers in the inclusive range from `start` to `end`. **Examples:** ```python list_even_numbers(3, 10) # should return [4, 6, 8, 10] list_even_numbers(4, 10) # should return [4, 6, 8, 10] list_even_numbers(5, 7) # should return [6] list_even_numbers(1, 1) # should return [] ```","solution":"def list_even_numbers(start: int, end: int) -> list: Returns a list of all even numbers in the inclusive range from start to end. return [n for n in range(start, end + 1) if n % 2 == 0]"},{"question":"Design a function that takes a list of integers and returns a new list that contains only the prime numbers from the input list. If the input list is empty, contains non-integer values, or no prime numbers are found, the function should handle these scenarios appropriately by returning specific error messages or an empty list. Implement your solution without using any external library functions for prime checking, except for basic mathematical operations. **Function Signature:** ```python def extract_primes(nums: list) -> list: Extracts all prime numbers from the given list of numbers. Args: nums (list): A list of integers. Returns: list: A list containing all prime numbers from the input list. Raises: ValueError: If the input list is empty. TypeError: If any element in the list is not an integer. Examples: >>> extract_primes([2, 3, 4, 5, 6, 7]) [2, 3, 5, 7] >>> extract_primes([8, 10, 12]) [] >>> extract_primes([]) ValueError: Input list cannot be empty >>> extract_primes([\'a\', 7, 5]) TypeError: All elements must be integers ``` Write your code inside the defined function to perform the task according to the description and examples provided.","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # other even numbers are not prime for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def extract_primes(nums): Extracts all prime numbers from the given list of numbers. Args: nums (list): A list of integers. Returns: list: A list containing all prime numbers from the input list. Raises: ValueError: If the input list is empty. TypeError: If any element in the list is not an integer. if not nums: raise ValueError(\\"Input list cannot be empty\\") prime_numbers = [] for num in nums: if not isinstance(num, int): raise TypeError(\\"All elements must be integers\\") if is_prime(num): prime_numbers.append(num) return prime_numbers"},{"question":"Implement a function that examines a list of integers and returns a list of tuples. Each tuple should contain three distinct elements from the list that sum up to zero. Ensure that the same three elements are not repeated in multiple combinations within the output list. ```python def find_triplets(nums): # Your implementation here # Sample list for testing sample_list = [-1, 0, 1, 2, -1, -4] # Expected output: [(-1, 0, 1), (-1, -1, 2)] ```","solution":"def find_triplets(nums): Returns a list of tuples, each containing three distinct elements from \'nums\' that sum up to zero. nums.sort() triplets = set() for i in range(len(nums) - 2): # Avoid duplicate \'i\' values if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: triplet_sum = nums[i] + nums[left] + nums[right] if triplet_sum == 0: triplets.add((nums[i], nums[left], nums[right])) left += 1 right -= 1 # Avoid duplicate \'left\' values while left < right and nums[left] == nums[left - 1]: left += 1 # Avoid duplicate \'right\' values while left < right and nums[right] == nums[right + 1]: right -= 1 elif triplet_sum < 0: left += 1 else: right -= 1 return list(triplets)"},{"question":"The following code snippet is a solution to find the k-th largest element in an array of integers. However, there are some syntax and logical errors. Can you identify and correct them? ```python from typing impor List import heap def find_kth_large(lst: List[int], k: int) -> int: if not lst o k <= 0 or k > len(lst): return None # Build a min-heap with the first k elements. min_heap = [] for num in lst: if len(min_heap) < k: heapq.heappush(min_heap, num) elif num > min_heap[0]: heapq.heapreplace(min_heap, num) return minheap(0) # Test cases print(find_kth_large([3, 2, 1, 5, 6, 4], 2)) # Expected: 5 print(find_kth_large([3, 2, 3, 1, 2, 4, 5, 5, 6], 4)) # Expected: 4 print(find_kth_large([], 1)) # Expected: None print(find_kth_large([1], 0)) # Expected: None print(find_kth_large([1], 1)) # Expected: 1 ``` Task: 1. Fix the syntax and import errors in the code. 2. Correct any logical errors to ensure the function works as intended. 3. Ensure the test cases produce the expected output. Hint: Use `heapq` for the heap implementation in the solution. Note: Although the solution uses a heap, it is possible to solve the problem using other methods, such as sorting. However, try to fix the provided heap-based implementation.","solution":"from typing import List import heapq def find_kth_large(lst: List[int], k: int) -> int: if not lst or k <= 0 or k > len(lst): return None # Build a min-heap with the first k elements. min_heap = [] for num in lst: if len(min_heap) < k: heapq.heappush(min_heap, num) elif num > min_heap[0]: heapq.heapreplace(min_heap, num) return min_heap[0] # Test cases print(find_kth_large([3, 2, 1, 5, 6, 4], 2)) # Expected: 5 print(find_kth_large([3, 2, 3, 1, 2, 4, 5, 5, 6], 4)) # Expected: 4 print(find_kth_large([], 1)) # Expected: None print(find_kth_large([1], 0)) # Expected: None print(find_kth_large([1], 1)) # Expected: 1"},{"question":"Design a robust Python function to evaluate and validate whether a string expression containing various mathematical operations and parentheses is syntactically correct. An expression is considered syntactically correct if it conforms to the proper use of parentheses (i.e., every opening parenthesis has a matching closing parenthesis, and they are properly nested). The function should be able to handle common operations including addition (`+`), subtraction (`-`), multiplication (`*`), division (`/`), and exponentiation (`**`). Besides handling typical numerical values, your solution should be adaptive to handle operations involving variables denoted by single alphabetic characters. Also, ensure that the function efficiently processes empty strings and other edge cases. For assistance, review this example of parenthesis matching in expressions: https://stackoverflow.com/questions/9098296/parentheses-in-mathematical-expressions Here is a faulty implementation of expression validation. Identify the mistakes and improve the function accordingly: ```python def validate_expression(expression): open_brackets = \'(\' close_brackets = \')\' stack = [] for char in expression: if char == open_brackets: stack.append(char) elif char == close_brackets: if not stack: return False stack.pop() return not stack expression = \\"(a + b) + (c * d)\\" print(validate_expression(expression)) ``` In your solution, extend the functionality to seamlessly handle any nested levels and diverse characters while improving the efficiency and accuracy. Finally, create a set of test cases to confirm the correctness of your solution across various scenarios.","solution":"def validate_expression(expression): Evaluates whether a string expression containing various mathematical operations and parentheses is syntactically correct. open_brackets = \'(\' close_brackets = \')\' stack = [] valid_chars = set(\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-*/^() \\") for char in expression: if char not in valid_chars: return False if char == open_brackets: stack.append(char) elif char == close_brackets: if not stack: return False stack.pop() return not stack"},{"question":"Write a function to determine whether the characters in a given string can be rearranged to form a palindrome. Return `True` if possible, otherwise return `False`.","solution":"def can_form_palindrome(s): Determines if the characters in the string can be rearranged to form a palindrome. Args: s (str): The input string. Returns: bool: True if the input string can be rearranged to form a palindrome, False otherwise. # Dictionary to store the frequency of each character in the string char_count = {} # Count the frequency of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # A string can be rearranged to form a palindrome if at most one character has an odd count odd_count = sum(count % 2 for count in char_count.values()) return odd_count <= 1"},{"question":"Write a function in Python that determines if a string is a palindrome without using the built-in reverse function or slicing techniques. A palindrome is a string that reads the same forward and backward. Consider only alphanumeric characters and ignore cases. Test your function with the strings: \\"A man, a plan, a canal, Panama\\" and \\"No \'x\' in Nixon\\".","solution":"import re def is_palindrome(s): Determines whether the given string is a palindrome, ignoring non-alphanumeric characters and case sensitivity. Args: s (str): The input string to check for palindrome properties. Returns: bool: True if the string is a palindrome, False otherwise. # Normalize: remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Initialize two pointers for comparison left, right = 0, len(cleaned) - 1 # Compare characters from both ends moving towards the center while left < right: if cleaned[left] != cleaned[right]: return False left += 1 right -= 1 return True"},{"question":"Write a function to process a list of transactions representing bank transactions of various users. Each transaction is a dictionary containing \'user_id\', \'amount\', and \'type\' (either \'deposit\' or \'withdraw\'). Calculate and return the final balance for each user. Assume all users start with a balance of zero. The input will be a list of transactions, and the output should be a dictionary where keys are \'user_id\'s and values are the respective final balances. Example: Input: ```python transactions = [ {\'user_id\': \'user_1\', \'amount\': 100, \'type\': \'deposit\'}, {\'user_id\': \'user_2\', \'amount\': 50, \'type\': \'deposit\'}, {\'user_id\': \'user_1\', \'amount\': 30, \'type\': \'withdraw\'}, {\'user_id\': \'user_3\', \'amount\': 70, \'type\': \'deposit\'}, {\'user_id\': \'user_2\', \'amount\': 20, \'type\': \'withdraw\'}, {\'user_id\': \'user_1\', \'amount\': 10, \'type\': \'deposit\'} ] ``` Output: ```python { \'user_1\': 80, \'user_2\': 30, \'user_3\': 70 } ```","solution":"def process_transactions(transactions): Process a list of bank transactions and return the final balance for each user. Args: transactions (list of dict): A list of transactions where each transaction is a dictionary with \'user_id\', \'amount\', and \'type\' keys. The \'type\' is either \'deposit\' or \'withdraw\'. Returns: dict: A dictionary where keys are user_ids and values are the respective final balances. balances = {} for trans in transactions: user_id = trans[\'user_id\'] amount = trans[\'amount\'] if user_id not in balances: balances[user_id] = 0 if trans[\'type\'] == \'deposit\': balances[user_id] += amount elif trans[\'type\'] == \'withdraw\': balances[user_id] -= amount return balances"},{"question":"You are given a list of integers representing a series of grades. Write a Python function named `curve_grades` that adjusts each grade based on a given curve factor. The curve factor is a percentage by which each grade will be increased. The final adjusted grade should not exceed 100. Implement the `curve_grades` function which takes two parameters: 1. `grades`: a list of integers where each integer is a grade. 2. `curve_factor`: an integer representing the percentage by which each grade will be increased. The function should return a new list of adjusted grades. **Function Signature:** ```python def curve_grades(grades: list[int], curve_factor: int) -> list[int]: ``` **Examples:** ```python # Example 1 grades = [45, 70, 80, 90] curve_factor = 15 print(curve_grades(grades, curve_factor)) # Output: [51, 80.5, 92, 100] # Example 2 grades = [78, 82, 75, 93] curve_factor = 5 print(curve_grades(grades, curve_factor)) # Output: [81.9, 86.1, 78.75, 97.65, 100] ``` **Constraints:** - Each grade in the `grades` list is an integer between 0 and 100. - The `curve_factor` is a non-negative integer. - The maximum value for any adjusted grade should be capped at 100.","solution":"def curve_grades(grades, curve_factor): Adjusts each grade based on a given curve factor. The final adjusted grade should not exceed 100. Args: grades (list): List of integers where each integer is a grade. curve_factor (int): Percentage by which each grade will be increased. Returns: list: A new list of adjusted grades. adjusted_grades = [] for grade in grades: adjusted_grade = grade + (grade * curve_factor / 100) adjusted_grades.append(min(adjusted_grade, 100)) return adjusted_grades"},{"question":"Create a function that takes a list of strings (which can include repeated strings) and a positive integer N, and returns the N most frequently occurring strings along with their frequencies. If two or more strings have the same frequency, they should be sorted in alphabetical order. The function should handle large lists efficiently. Additionally, write test cases to verify that the implementation correctly handles various scenarios, including ties in frequency and varying string lengths.","solution":"from collections import Counter from typing import List, Tuple def top_n_frequent_strings(strings: List[str], N: int) -> List[Tuple[str, int]]: Returns the N most frequently occurring strings along with their frequencies. If two or more strings have the same frequency, they are sorted in alphabetical order. Args: strings (List[str]): The list of strings (which can include repeated strings). N (int): The number of most frequently occurring strings to return. Returns: List[Tuple[str, int]]: A list of tuples containing the N most frequently occurring strings and their frequencies. if N <= 0: return [] # Count the frequencies of each string counted_strings = Counter(strings) # Get the N most common elements, with ties resolved alphabetically most_common_strings = counted_strings.most_common() most_common_strings.sort(key=lambda x: (-x[1], x[0])) return most_common_strings[:N]"},{"question":"Given an array of positive integers representing the heights of bars in a histogram where the width of each bar is 1, find the largest rectangular area that can be formed in the histogram. Your task is to implement a function that takes an array of integers as input and returns the maximum rectangular area in the histogram. Include any necessary explanations and edge case handling.","solution":"def largest_rectangle_area(heights): Returns the largest rectangular area in the histogram given by \'heights\'. \'heights\' is a list of positive integers representing the heights of bars. stack = [] max_area = 0 index = 0 # Iterate through the histogram while index < len(heights): # If stack is empty or current bar height is greater than or equal to the bar # at the index stored at the top of the stack, push current index to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top of the stack and calculate area with the popped height top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) # Now pop the remaining bars from the stack and calculate the area while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"In Python, create a function that checks whether a given string is a valid anagram of another string. The function should ignore spaces, punctuation marks, and capitalization, considering only the alphabetical characters. If the strings are anagrams, return `True`; otherwise, return `False`. Ensure your solution is optimized for efficiency.","solution":"import string def is_anagram(str1, str2): Check if str1 is a valid anagram of str2. # Removing spaces, punctuation marks and converting to lowercase translator = str.maketrans(\'\', \'\', string.punctuation + string.whitespace) clean_str1 = str1.translate(translator).lower() clean_str2 = str2.translate(translator).lower() # Check if the sorted characters of the cleaned strings are identical return sorted(clean_str1) == sorted(clean_str2)"},{"question":"Design and implement a function named \\"merge_sorted_arrays\\" that takes two sorted arrays of integers as input and returns a single array that merges the two input arrays while preserving the sorted order. Optimize your solution to run in linear time relative to the total number of elements in both input arrays. # Example ```python merge_sorted_arrays([1, 3, 5], [2, 4, 6]) ``` Output: ``` [1, 2, 3, 4, 5, 6] ```","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list of int): First sorted array. arr2 (list of int): Second sorted array. Returns: list of int: Merged sorted array. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append remaining elements from both arrays, if any while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a function in Python that accepts a nested dictionary and returns a new dictionary with all the keys at the first level, where the keys are the path (in dot notation) to the corresponding value in the original dictionary. If the dictionary contains nested dictionaries, the function should recursively traverse them to generate the correct paths. For example, given the following nested dictionary: ```python { \'a\': { \'b\': { \'c\': 1 }, \'d\': 2 }, \'e\': 3 } ``` The function should return: ```python { \'a.b.c\': 1, \'a.d\': 2, \'e\': 3 } ``` You may assume that the original dictionary does not contain any lists or other non-dictionary containers.","solution":"def flatten_nested_dict(nested_dict, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary and constructs paths with dot notation. Args: - nested_dict (dict): The nested dictionary to flatten. - parent_key (str): The base key for constructing paths in the flattened dictionary (used for recursion). - sep (str): Separator to use between keys in the path. Returns: - dict: A new dictionary with flattened paths as keys. flattened_dict = {} for k, v in nested_dict.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): flattened_dict.update(flatten_nested_dict(v, new_key, sep)) else: flattened_dict[new_key] = v return flattened_dict"},{"question":"Write a function that receives an integer array and an integer value k, and returns the maximum sum of any subarray of length k. A subarray is defined as a contiguous portion of the array. Implement your solution to handle edge cases such as k being larger than the length of the array or the array containing all negative numbers efficiently.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of any subarray of length k. Parameters: arr (list of int): The input array of integers. k (int): The length of the subarray. Returns: int: The maximum sum of any subarray of length k. n = len(arr) if n < k or k <= 0: return None # Edge case where k is larger than array length or k is non-positive # Compute the sum for the first subarray of length k max_sum = sum(arr[:k]) current_sum = max_sum # Slide the window over the array for i in range(k, n): current_sum = current_sum - arr[i - k] + arr[i] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Write a Python function `merge_sorted_lists(list1, list2)` that takes two input parameters, `list1` and `list2`, both of which are lists containing sorted integers. The function should merge these two lists into a single sorted list without using any built-in sort methods and return the result. Ensure your implementation handles edge cases such as empty lists and works efficiently for large inputs. Example: ```python def merge_sorted_lists(list1, list2): # Your implementation here # Test cases print(merge_sorted_lists([1, 3, 5], [2, 4, 6])) # Output: [1, 2, 3, 4, 5, 6] print(merge_sorted_lists([1, 3, 5], [])) # Output: [1, 3, 5] print(merge_sorted_lists([], [2, 4, 6])) # Output: [2, 4, 6] print(merge_sorted_lists([], [])) # Output: [] ```","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 # Traverse both lists and merge them in sorted order while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Include remaining elements from list1, if any while i < len(list1): merged_list.append(list1[i]) i += 1 # Include remaining elements from list2, if any while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are given a list of words. Write a program that groups these words into sets of anagrams. Each group of anagrams should be stored in a list, and the output should be a list of these lists. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ensure you account for all possible anagrams and that they are grouped together correctly. Implement your solution efficiently and provide unit tests to verify the correctness of your program.","solution":"from collections import defaultdict def group_anagrams(words): Groups a list of words into sets of anagrams. Args: words (list of str): List of words. Returns: list of list of str: List of lists where each sublist contains anagrams. anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"Write a function that checks if a given string is a palindrome after removing all non-alphanumeric characters and ignoring cases. Additionally, demonstrate this functionality by testing the provided sentence \\"A man, a plan, a canal, Panama!\\". The function should return a boolean indicating whether the cleaned string is a palindrome or not. Also, provide the cleaned version of the input string.","solution":"def is_palindrome(s): Checks if the given string is a palindrome after removing all non-alphanumeric characters and converting to lowercase. Args: s (str): The input string Returns: tuple: A boolean indicating if the string is a palindrome, and the cleaned version of the string # Remove non-alphanumeric characters and convert to lowercase cleaned = \'\'.join(c for c in s if c.isalnum()).lower() # Check if the cleaned string is a palindrome return cleaned == cleaned[::-1], cleaned"},{"question":"Develop a software system utilizing Python that simulates a real-time stock trading platform. Integrate live data streams using a third-party financial API and implement a feature to execute buy and sell orders based on user-defined thresholds. Your solution must incorporate multi-threading to handle simultaneous data fetching and transaction processing efficiently. Include robust error handling to manage potential data discrepancies and network failures. Finally, ensure the system provides a detailed log of transactions and account summaries, demonstrating an adept understanding of both the technical and analytical aspects required in financial software development.","solution":"import time import threading import random import logging # Setup logging logging.basicConfig(level=logging.INFO, format=\'%(asctime)s - %(levelname)s - %(message)s\') # Mock API to fetch stock prices def fetch_stock_price(stock_symbol): Mock function to fetch real-time stock price. # Simulate network delay and price fluctuation time.sleep(1) price = round(100 + random.random() * 10, 2) # Mock price between 100 and 110 return price class TradingPlatform: def __init__(self, initial_balance=10000): self.balance = initial_balance self.portfolio = {} self.transactions = [] self.lock = threading.Lock() self.running = True def buy_stock(self, stock_symbol, price, amount): with self.lock: cost = price * amount if self.balance >= cost: self.balance -= cost self.portfolio[stock_symbol] = self.portfolio.get(stock_symbol, 0) + amount self.transactions.append({ \'action\': \'buy\', \'stock\': stock_symbol, \'price\': price, \'amount\': amount }) logging.info(f\\"Bought {amount} shares of {stock_symbol} at {price:.2f}\\") else: logging.error(f\\"Insufficient balance to buy {amount} shares of {stock_symbol} at {price:.2f}\\") def sell_stock(self, stock_symbol, price, amount): with self.lock: if self.portfolio.get(stock_symbol, 0) >= amount: self.portfolio[stock_symbol] -= amount if self.portfolio[stock_symbol] == 0: del self.portfolio[stock_symbol] self.balance += price * amount self.transactions.append({ \'action\': \'sell\', \'stock\': stock_symbol, \'price\': price, \'amount\': amount }) logging.info(f\\"Sold {amount} shares of {stock_symbol} at {price:.2f}\\") else: logging.error(f\\"Insufficient shares to sell {amount} of {stock_symbol}\\") def monitor_stock(self, stock_symbol, buy_threshold, sell_threshold): while self.running: try: price = fetch_stock_price(stock_symbol) logging.info(f\\"Current price of {stock_symbol} is {price:.2f}\\") # Buy if the price is below the buy_threshold if price <= buy_threshold: self.buy_stock(stock_symbol, price, 1) # Sell if the price is above the sell_threshold elif price >= sell_threshold: self.sell_stock(stock_symbol, price, 1) except Exception as e: logging.error(f\\"Error fetching price for {stock_symbol}: {e}\\") def stop(self): self.running = False def account_summary(self): return { \'balance\': self.balance, \'portfolio\': self.portfolio, \'transactions\': self.transactions, } # Example usage: platform = TradingPlatform() # Start monitoring in a separate thread thread = threading.Thread(target=platform.monitor_stock, args=(\'AAPL\', 103, 107)) thread.start() # Run the monitoring for about 10 seconds for demonstration purposes time.sleep(10) platform.stop() thread.join() # Account summary summary = platform.account_summary() logging.info(f\\"Account Summary: {summary}\\")"},{"question":"Design a function that efficiently determines whether a given string is a permutation of another string. Two strings are permutations of each other if they contain the same characters in the same frequencies. The function should return a boolean value indicating the result. The function must handle both upper and lower case letters and disregard any spaces. For example: - For the input strings \\"Listen\\" and \\"Silent\\", the function should return `true`. - For the input strings \\"Hello\\" and \\"Olelh\\", the function should return `true`. - For the input strings \\"Apple\\" and \\"Plead\\", the function should return `false`. Clarifications: - The comparison should be case-insensitive, which means \\"A\\" and \\"a\\" should be treated as the same character. - Spaces should be ignored in the comparison.","solution":"def is_permutation(str1, str2): Determines if two strings are permutations of each other, ignoring case and spaces. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if str1 is a permutation of str2, otherwise False. # Remove spaces and convert to lower case str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # Return True if sorted characters of both strings match return sorted(str1) == sorted(str2)"},{"question":"Write a Python program to calculate the sum of the diagonal elements of a square matrix B. Additionally, validate if the input matrix is square (i.e. has the same number of rows and columns); if not, the program should return an error message. In case of a valid square matrix, your program should also determine if the matrix is an identity matrix (a square matrix with ones on the diagonal and zeros elsewhere). Here is a piece of code as a reference. The following code only creates a matrix and does not include any validation or sum calculation: ```python import numpy as np b = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) print(b) ``` Now, enhance this function to include the validation for a square matrix, sum up the diagonal elements, and check if the matrix is an identity matrix as per the prompt. Good luck!","solution":"import numpy as np def matrix_properties(matrix): Check if the matrix is square, calculate the sum of diagonal elements, and determine if it is an identity matrix. Parameters: matrix (list of lists): The input matrix. Returns: tuple: (sum of diagonal elements, is_identity_matrix) if square matrix, else error message. # Convert input to numpy array for easy manipulation matrix_np = np.array(matrix) # Check if the matrix is square if matrix_np.shape[0] != matrix_np.shape[1]: return \\"Error: The input matrix is not square.\\" # Calculate the sum of the diagonal elements diag_sum = np.trace(matrix_np) # Check if the matrix is an identity matrix identity_matrix = np.identity(matrix_np.shape[0]) is_identity = np.array_equal(matrix_np, identity_matrix) return (diag_sum, is_identity)"},{"question":"The problem is to write a function in Python that identifies and returns a list of all words in a given string that are repeated consecutively. For example: ```python def find_consecutive_repeats(text): # Your code goes here # Test the function text = \\"Python Python is a great great language which which allows allows rapid development.\\" print(find_consecutive_repeats(text)) # Output: [\'Python\', \'great\', \'which\', \'allows\'] ``` The function `find_consecutive_repeats` should take a string as an input and return a list of words that are repeated consecutively. Punctuation and case should be ignored, and the comparison should be case-insensitive.","solution":"import re def find_consecutive_repeats(text): Identifies and returns a list of all words in a given string that are repeated consecutively. Case and punctuation are ignored. # Normalize text by converting to lowercase and removing punctuation text = re.sub(r\'[^ws]\', \'\', text).lower() words = text.split() repeats = [] for i in range(1, len(words)): if words[i] == words[i - 1] and (not repeats or repeats[-1] != words[i]): repeats.append(words[i]) return repeats"},{"question":"Create a function that accepts a string and reverses every word in the string but maintains the positions of spaces and punctuation marks. For example, given the input string \\"Hello, World! This is CS.\\", the function should return \\"olleH, dlroW! sihT si SC.\\". Ensure the function preserves the case and punctuation as it appears in the original string without using library functions for reversing strings.","solution":"def reverse_words(s): Reverses every word in the string s, but maintains the positions of spaces and punctuation marks. def reverse_word(word): return \'\'.join([word[i] for i in range(len(word)-1, -1, -1)]) result = [] word = [] for char in s: if char.isalpha(): word.append(char) else: if word: result.append(reverse_word(word)) word = [] result.append(char) if word: result.append(reverse_word(word)) return \'\'.join(result)"},{"question":"Write a Python function to shift all zero values in an array to the end, while maintaining the order of non-zero elements. Implement this function without utilizing any additional arrays or collections. For example, if the input list is [0, 1, 0, 3, 12], the output should be [1, 3, 12, 0, 0].","solution":"def shift_zeros_to_end(arr): Shifts all zeros in the array to the end while maintaining the order of non-zero elements. Parameters: arr (list): The input list containing integers. Returns: list: The transformed list with all zeros moved to the end. n = len(arr) j = 0 # index for next non-zero element for i in range(n): if arr[i] != 0: arr[j] = arr[i] j += 1 for i in range(j, n): arr[i] = 0 return arr"},{"question":"Write a function that takes an array of integers and returns a new array which contains only the first occurrence of each integer, removing all subsequent duplicates. The order of the elements should be maintained as they appear in the original array. **Example:** ```python Input: [4, 5, 4, 2, 2, 8, 4, 9] Output: [4, 5, 2, 8, 9] ``` **Function Signature:** ```python def remove_duplicates(arr: list) -> list: # Your code here ``` **Constraints:** 1. All elements of the array are integers. 2. The length of the array will not exceed 10,000. 3. Each integer in the array is between -1,000,000 and 1,000,000 inclusive.","solution":"def remove_duplicates(arr: list) -> list: Takes an array of integers and returns a new array which contains only the first occurrence of each integer, removing all subsequent duplicates. seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Write a function that takes in a list of integers and returns the list sorted in ascending order. However, if the list contains any negative numbers, the function should raise a ValueError with the message \\"Negative numbers not allowed\\". You are required to use Python\'s type hinting for this task. Additionally, ensure that the function handles empty lists appropriately by returning an empty list. #Sample Input#: ```python sort_positive_numbers([3, 1, 4, 1, 5, 9]) ``` #Sample Output#: ```python [1, 1, 3, 4, 5, 9] ``` #Sample Input with Negative Number#: ```python sort_positive_numbers([3, -1, 4, 1, 5, 9]) ``` #Sample Output#: ```python ValueError: Negative numbers not allowed ``` #Sample Input for Empty List#: ```python sort_positive_numbers([]) ``` #Sample Output#: ```python [] ```","solution":"from typing import List def sort_positive_numbers(nums: List[int]) -> List[int]: Sorts a list of integers in ascending order. If any negative numbers are present, raises a ValueError. Args: nums (List[int]): A list of integers. Returns: List[int]: A sorted list of integers in ascending order. Raises: ValueError: If any negative numbers are found in the input list. # Check for negative numbers if any(num < 0 for num in nums): raise ValueError(\\"Negative numbers not allowed\\") # Sort and return the list return sorted(nums)"},{"question":"Write a function that takes a list of integers and returns the list sorted in ascending order using the bubble sort algorithm. Additionally, the function should count and return the number of swaps made during the sorting process.","solution":"def bubble_sort(arr): Sorts the list \'arr\' using bubble sort algorithm and returns the sorted list along with the number of swaps made. Parameters: arr (list): List of integers to be sorted. Returns: tuple: A tuple containing: - sorted list of integers in ascending order - number of swaps made during the sorting process n = len(arr) swap_count = 0 for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swap the elements arr[j], arr[j+1] = arr[j+1], arr[j] swap_count += 1 return arr, swap_count"},{"question":"Construct a function that verifies the legitimacy of an ISBN-10 identifier. ISBN-10 is an identifier for books, validated by a checksum. Validate the input string and verify if it constitutes a valid ISBN-10. The ISBN-10 format consists of 9 digits followed by either a digit or the letter \'X\'. The last character is a checksum character calculated as follows: - Multiply each of the first 9 digits by its position (1 through 9) and sum them up. - Compute the modulo 11 of the sum. - If the modulo 11 result is 10, the checksum character should be \'X\', otherwise it should correspond to the modulo 11 result. Create a function `validate_isbn_10(isbn)` that takes an ISBN-10 number as a string and returns `True` if it is a valid ISBN-10, `False` otherwise. Examples: ``` >>> validate_isbn_10(\\"156881111X\\") True >>> validate_isbn_10(\\"1568811111\\") False >>> validate_isbn_10(\\"123456789X\\") True >>> validate_isbn_10(\\"1234567890\\") False >>> validate_isbn_10(\\"invalid_isbn\\") False ``` Note: - Return `False` if the input string is not exactly 10 characters long or contains characters other than digits and \'X\'. - You should not use any library functions for the ISBN-10 verification beyond basic string and arithmetic operations.","solution":"def validate_isbn_10(isbn): Validates the given ISBN-10 number. if len(isbn) != 10: return False if not isbn[:9].isdigit() or (isbn[9] not in \'0123456789X\'): return False total_sum = 0 for i in range(9): total_sum += int(isbn[i]) * (i + 1) if isbn[9] == \'X\': total_sum += 10 * 10 else: total_sum += int(isbn[9]) * 10 return total_sum % 11 == 0"},{"question":"Calculate the longest common prefix (LCP) among an array of strings. The longest common prefix is defined as the largest string that is a prefix of all the strings in the given array. If there is no common prefix, return an empty string. Example input: [\\"flower\\", \\"flow\\", \\"flight\\"] Expected output: \\"fl\\"","solution":"def longest_common_prefix(strs): Find the longest common prefix among an array of strings. :param strs: List of strings :return: Longest common prefix string if not strs: return \\"\\" # Start with the first string as the prefix prefix = strs[0] for s in strs[1:]: # Compare with each string and shorten the prefix until it matches while not s.startswith(prefix): prefix = prefix[:-1] if not prefix: return \\"\\" return prefix"},{"question":"# Problem Statement Write a function named `reverse_words` that takes a string as input and returns a string with the words in reverse order. The function should preserve the line breaks from the original string and also maintain the punctuation marks attached to the words. Words are defined as sequences of characters that are not whitespace, including punctuation. Example ```python # Input s = \\"Hello, world!nThis is a test.\\" # Output \\"test. a isnThis world! Hello,\\" ``` Function Signature ```python def reverse_words(s: str) -> str: pass ``` Constraints - The input string can include any printable ASCII characters. - The total length of the input string will not exceed 1000 characters.","solution":"def reverse_words(s: str) -> str: This function takes a string as input and returns a string with the words in reverse order. It preserves the line breaks from the original string and maintains the punctuation marks attached to the words. lines = s.split(\'n\') reversed_lines = [\' \'.join(line.split()[::-1]) for line in lines] return \'n\'.join(reversed_lines)"},{"question":"Implement a function that takes a string consisting of lowercase alphabets and compresses it using the counts of repeated characters. For instance, the input string \\"aaabbcccaa\\" should be compressed to \\"a3b2c3a2\\". If the compressed string is not shorter than the original string, return the original string. Ensure your function handles edge cases, such as strings with no repeated characters. ```python def compress_string(s: str) -> str: Compress the string by using counts of repeated characters. If the compressed string is not shorter, return the original string. >>> compress_string(\\"aaabbcccaa\\") \'a3b2c3a2\' >>> compress_string(\\"abc\\") \'abc\' >>> compress_string(\\"a\\") \'a\' result = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: result.append(s[i-1] + str(count)) count = 1 result.append(s[-1] + str(count)) compressed = \'\'.join(result) return compressed if len(compressed) < len(s) else s ```","solution":"def compress_string(s: str) -> str: Compress the string by using counts of repeated characters. If the compressed string is not shorter, return the original string. >>> compress_string(\\"aaabbcccaa\\") \'a3b2c3a2\' >>> compress_string(\\"abc\\") \'abc\' >>> compress_string(\\"a\\") \'a\' if not s: return s result = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: result.append(s[i-1] + str(count)) count = 1 result.append(s[-1] + str(count)) compressed = \'\'.join(result) return compressed if len(compressed) < len(s) else s"},{"question":"Write a function that accepts a list of integers and returns a dictionary where the keys are the distinct integers from the list and the values are the counts of their occurrences. Additionally, the function should ensure that only positive integers are processed and any negative integers or zero should cause the function to raise a ValueError. The function should efficiently handle large datasets without significant performance degradation. Example: Input: [1, 2, 3, 2, 1, 5, 1, 2, 7, 3, 3, 5] Output: {1: 3, 2: 3, 3: 3, 5: 2, 7: 1}","solution":"def count_occurrences(lst): Returns a dictionary with the count of the occurrences of each distinct, positive integer in the list. Parameters: lst (list): A list of integers Returns: dict: A dictionary where the keys are distinct integers and the values are their occurrences Raises: ValueError: If the list contains any negative integers or zero occurrences = {} for value in lst: if value <= 0: raise ValueError(\\"List contains negative integers or zero, which is not allowed\\") if value in occurrences: occurrences[value] += 1 else: occurrences[value] = 1 return occurrences"},{"question":"Implement a function in Python that takes a string as input and returns a list of tuples with each unique word and its frequency count in descending order. Ignore case while counting the frequency and remove any punctuation marks from the words. **Example Input:** \\"Hello, world! Hello, Python. It\'s a beautiful world.\\" **Example Output:** [(\'hello\', 2), (\'world\', 2), (\'python\', 1), (\'its\', 1), (\'a\', 1), (\'beautiful\', 1)]","solution":"import re from collections import Counter def word_frequencies(text): Returns a list of tuples with each unique word and its frequency count in descending order. Ignore case and remove punctuation. # Normalize case and remove punctuation text = text.lower() text = re.sub(r\'[^ws]\', \'\', text) # Split text into words words = text.split() # Count frequencies word_count = Counter(words) # Sort by frequency in descending order sorted_word_count = sorted(word_count.items(), key=lambda item: item[1], reverse=True) return sorted_word_count"},{"question":"Write a Python function to compress a string using the counts of repeated characters. For example, the string \\"aabcccccaaa\\" would become \\"a2b1c5a3\\". If the compressed string is not smaller than the original string, return the original string. Ensure your solution runs in O(n) time complexity, where n is the length of the input string.","solution":"def compress_string(s): Compresses the input string using the counts of repeated characters. If the compressed string is not shorter than the original string, the function returns the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"Create a program that simulates the operations of a basic airline reservation system. The system should allow users to book a seat on a flight, cancel a booking, and check available seats. Each flight has a fixed number of seats, and the system should ensure that the same seat cannot be double-booked. Additionally, implement features to generate a detailed manifest of all passengers on a particular flight, and provide functions to retrieve bookings based on passenger information. Ensure proper error handling for situations like booking a seat that is already reserved or canceling a non-existent reservation. Use appropriate data structures to efficiently manage and query the reservations.","solution":"class Flight: def __init__(self, flight_number, total_seats): self.flight_number = flight_number self.total_seats = total_seats self.bookings = {} self.available_seats = set(range(1, total_seats + 1)) def book_seat(self, seat_number, passenger_name): if seat_number <= 0 or seat_number > self.total_seats: return \\"Invalid seat number.\\" if seat_number not in self.available_seats: return \\"Seat already booked.\\" self.bookings[seat_number] = passenger_name self.available_seats.remove(seat_number) return f\\"Seat {seat_number} booked successfully for {passenger_name}.\\" def cancel_booking(self, seat_number): if seat_number in self.bookings: passenger_name = self.bookings.pop(seat_number) self.available_seats.add(seat_number) return f\\"Booking for seat {seat_number} by {passenger_name} has been canceled.\\" else: return \\"No such booking exists.\\" def check_available_seats(self): return list(self.available_seats) def generate_manifest(self): return self.bookings def get_booking_by_passenger(self, passenger_name): return [seat for seat, name in self.bookings.items() if name == passenger_name]"},{"question":"Write a function in Python that takes a list of integers as an input and returns a list containing only the prime numbers found in the input list. # Constraints: 1. The input list will have at least one integer and no more than 1000 integers. 2. Each integer in the input list will be a positive number less than 10^6. # Example: ```python def extract_primes(nums): # Implement the function logic print(extract_primes([10, 15, 3, 7, 11, 20])) # Output should be: [3, 7, 11] print(extract_primes([4, 6, 8, 9, 10])) # Output should be: [] ```","solution":"def is_prime(num): Helper function that returns True if the number is prime, otherwise False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def extract_primes(nums): Function that takes a list of integers and returns a list of prime numbers found in the input list. return [num for num in nums if is_prime(num)]"},{"question":"You are given a matrix of integers and your task is to write a function that rotates the matrix by 90 degrees clockwise. For example, given the following 3x3 matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The rotated matrix should be: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Constraints - The input matrix will always have an equal number of rows and columns (i.e., it will be a square matrix). - The size of the matrix will be within the range of 1 to 10^3. - You may not use any extra space for another matrix; the rotation must be done in-place. # Function Signature ```python def rotate_matrix(matrix: List[List[int]]) -> None: pass ``` # Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) print(matrix) # Output should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ```","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> None: Rotates the input square matrix by 90 degrees clockwise in-place. n = len(matrix) # Step 1: Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Design a function in a programming language of your choice that takes a list of integers and returns a list of the same integers sorted in increasing order, but maintaining the relative order of negative integers. The function should not use any built-in sorting algorithms directly. **Constraints:** - The input list can be empty or contain up to 10^4 integers. - Each integer in the list ranges from -10^6 to 10^6. **Example:** ```python Input: [1, -3, 2, -2, -1, 5, 4] Output: [1, -3, 2, -2, -1, 4, 5] Input: [-5, -3, -1, 2, 1] Output: [-5, -3, -1, 1, 2] Input: [3, 2, 1, -1, -2] Output: [1, 2, 3, -1, -2] ``` **Explanation:** - The function should sort the positive numbers and zero, but not move the negative numbers. - For example, the input [1, -3, 2, -2, -1, 5, 4] should output [1, -3, 2, -2, -1, 4, 5], where the negative numbers (-3, -2, -1) remain in their initial positions.","solution":"def sort_integers_keeping_negatives(lst): Returns a list of the same integers sorted in increasing order, but maintaining the relative order of the negative integers. # Extract positive numbers and zero, then sort positives = sorted([x for x in lst if x >= 0]) result = [] pos_index = 0 # Rebuild the list maintaining the negatives in their original positions for num in lst: if num < 0: result.append(num) else: result.append(positives[pos_index]) pos_index += 1 return result"},{"question":"Write a Python function that takes a dictionary of student names as keys and respective lists of grades as values, and returns a dictionary where the student names are keys, and the values are the average grade of each student rounded to two decimal places. Ensure that the function handles cases where a student might have an empty list of grades by assigning an average grade of 0.0 in such scenarios. Optimize the function for performance, considering large datasets.","solution":"def calculate_average_grades(students_grades): Calculates the average grade for each student and returns a dictionary with the student names as keys and their respective average grades as values rounded to two decimal places. If a student has an empty list of grades, their average grade will be set to 0.0. Parameters: students_grades (dict): A dictionary where keys are student names and values are lists of grades. Returns: dict: A dictionary with student names as keys and their average grades as values. average_grades = {} for student, grades in students_grades.items(): if grades: average_grades[student] = round(sum(grades) / len(grades), 2) else: average_grades[student] = 0.0 return average_grades"},{"question":"<p>Given an integer array `arr` and an integer `k`, you need to split `arr` into exactly `k` subarrays such that the largest sum among these `k` subarrays is minimized. A subarray is a contiguous part of the array. For example, if `arr = [7, 2, 5, 10, 8]` and `k = 2`, you should split the array into `[7, 2, 5]` and `[10, 8]` with sums `14` and `18` respectively, and the result is `18` because that’s the largest of the sums. Your task is to write a function `splitArray(arr, k)` that returns the minimized largest sum among these k subarrays. # Input * `arr`: An integer array, `1 <= arr.length <= 1000` and `0 <= arr[i] <= 10^6`. * `k`: An integer, `1 <= k <= arr.length`. # Output * The minimized largest sum among the k subarrays. # Example ``` Input: arr = [7, 2, 5, 10, 8], k = 2 Output: 18 Input: arr = [1, 2, 3, 4, 5], k = 2 Output: 9 ``` # Note - You can assume that it\'s always possible to split the array into k subarrays. - The optimal solution has a time complexity better than O(n^2), with n being the length of the array.","solution":"def splitArray(arr, k): def can_split(max_sum): subarray_count, current_sum = 1, 0 for num in arr: if current_sum + num > max_sum: subarray_count += 1 current_sum = num if subarray_count > k: return False else: current_sum += num return True left, right = max(arr), sum(arr) while left < right: mid = (left + right) // 2 if can_split(mid): right = mid else: left = mid + 1 return left"},{"question":"將給定的字母清單轉換成一個所有可能的字母組合的列表。例如，對於輸入 [\'a\', \'b\', \'c\']，輸出 [\'a\', \'b\', \'c\', \'ab\', \'ac\', \'bc\', \'abc\']。","solution":"from itertools import combinations def letter_combinations(letters): Given a list of letters, return a list of all possible letter combinations. result = [] for i in range(1, len(letters) + 1): for combo in combinations(letters, i): result.append(\'\'.join(combo)) return result"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the elements from the original list that are prime numbers. Ensure your function is optimized for performance and handles cases where the input list can be very large. Include a helper function to check for prime numbers efficiently and test your solution with several test cases. ```python def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): return [num for num in numbers if is_prime(num)] # Test cases print(filter_primes([2, 3, 4, 5, 10, 13, 17, 20, 23])) print(filter_primes([29, 30, 31, 32, 33, 34, 35])) print(filter_primes([0, 1, -1, -10, 37, 97, 100, 101])) ```","solution":"def is_prime(n): Returns True if n is a prime number, otherwise returns False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a list of prime numbers filtered from the input list \'numbers\'. return [num for num in numbers if is_prime(num)]"},{"question":"You are given a list of integers in Python, and you need to find and return the k largest elements from the list in descending order. You can assume k is always less than or equal to the length of the list. How would you implement this?","solution":"import heapq def k_largest_elements(lst, k): Returns the k largest elements from the list in descending order. Parameters: lst (list of int): The list of integers. k (int): The number of largest elements to return. Returns: list of int: The k largest elements in descending order. # Use heapq.nlargest to find the k largest elements largest_elements = heapq.nlargest(k, lst) return largest_elements"},{"question":"Write a program in Python that solves the N-Queens problem for a given integer N. The N-Queens problem is the challenge of placing N chess queens on an N×N chessboard so that no two queens threaten each other. Your solution should return one of the possible configurations as an N×N list of integers, where a 1 represents a queen and a 0 represents an empty space. Along with your solution, provide an explanation of your algorithm and discuss its time complexity.","solution":"def solve_n_queens(N): Solves the N-Queens problem for a given integer N. :param N: The number of queens to place on an N x N chessboard. :return: A list of lists representing one of the possible configurations. def is_not_under_attack(row, col): return not (rows[col] or hills[row - col] or dales[row + col]) def place_queen(row, col): rows[col] = 1 hills[row - col] = 1 dales[row + col] = 1 queens[row] = col def remove_queen(row, col): rows[col] = 0 hills[row - col] = 0 dales[row + col] = 0 queens[row] = 0 def backtrack(row = 0): for col in range(N): if is_not_under_attack(row, col): place_queen(row, col) if row + 1 == N: result.append(queens[:]) else: backtrack(row + 1) remove_queen(row, col) result = [] rows = [0] * N hills = [0] * (2 * N - 1) # \\"hill\\" diagonals dales = [0] * (2 * N - 1) # \\"dale\\" diagonals queens = [0] * N backtrack() # Transform the result to format the output as a board configuration board = [[0]*N for _ in range(N)] if result: solution = result[0] for r in range(N): board[r][solution[r]] = 1 return board"},{"question":"Create a function in Python that takes a list of dictionaries representing employees, each with \'name\' and \'salary\' keys, and returns the name of the highest-paid employee. If there are multiple employees with the highest salary, return a list of their names in alphabetical order.","solution":"def highest_paid_employee(employees): Returns the name of the highest-paid employee. If there are multiple employees with the highest salary, returns a list of their names in alphabetical order. Args: employees (list): A list of dictionaries with \'name\' and \'salary\' keys. Returns: str or list: The name of the highest-paid employee or a list of names if there are multiple employees with the highest salary. if not employees: return None max_salary = max(employee[\'salary\'] for employee in employees) highest_paid = [employee[\'name\'] for employee in employees if employee[\'salary\'] == max_salary] if len(highest_paid) == 1: return highest_paid[0] return sorted(highest_paid)"},{"question":"You have been given a dataset containing information about various products sold at a store. The dataset includes product IDs, product names, and prices. Some of the prices are missing, and you need to clean the data. Your tasks are: 1. If \'price\' is NaN or None, replace it with the median price of all products whose price is specified. 2. Ensure the \'product_id\' column is unique. If there are any duplicates, append a suffix \'_dup\' to the duplicate product_id values. 3. Check the \'product_name\' column for cases where the product name has leading or trailing spaces, and remove those spaces. Use the pandas library for this task. ```python import pandas as pd import numpy as np data = [ [101, \'Shampoo\', 5.99], [102, \'Conditioner\', np.nan], [103, \'Toothpaste\', 3.49], [104, \' Mouthwash \', 4.99], [105, \'Toothbrush\', np.nan], [102, \'Conditioner\', 5.49], ] df = pd.DataFrame(data, columns=[\'product_id\', \'product_name\', \'price\']) ```","solution":"import pandas as pd import numpy as np def clean_data(df): # Step 1: Replace NaNs in \'price\' column with the median value median_price = df[\'price\'].median() df[\'price\'].fillna(median_price, inplace=True) # Step 2: Ensure \'product_id\' is unique # Create a counter dictionary to track occurrences of product_ids id_count = {} for i in range(len(df)): pid = df.loc[i, \'product_id\'] if pid in id_count: id_count[pid] += 1 df.loc[i, \'product_id\'] = f\\"{pid}_dup{id_count[pid]}\\" else: id_count[pid] = 0 # Step 3: Remove leading/trailing spaces in \'product_name\' df[\'product_name\'] = df[\'product_name\'].str.strip() return df # Here\'s the sample input data for the function data = [ [101, \'Shampoo\', 5.99], [102, \'Conditioner\', np.nan], [103, \'Toothpaste\', 3.49], [104, \' Mouthwash \', 4.99], [105, \'Toothbrush\', np.nan], [102, \'Conditioner\', 5.49], ] df = pd.DataFrame(data, columns=[\'product_id\', \'product_name\', \'price\']) # Clean data cleaned_df = clean_data(df) print(cleaned_df)"},{"question":"I am working with a binary search tree (BST) and need to implement a function that finds the lowest common ancestor (LCA) of two given nodes in the BST. The LCA of two nodes `p` and `q` in a BST is defined as the lowest node in the BST that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself). Here\'s the structure of a BST node: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` **Task**: Write a function `lowest_common_ancestor(root, p, q)` that takes the root of the BST and two nodes `p` and `q`, and returns the LCA of the nodes `p` and `q`. **Constraints**: - All node values are unique. - `p` and `q` are different and both values will exist in the BST. - The function should have a time complexity better than O(n). **Example**: Given the following BST: ``` 6 / 2 8 / / 0 4 7 9 / 3 5 ``` For `p = 2` and `q = 8`, the LCA is 6. For `p = 2` and `q = 4`, the LCA is 2. **Function signature**: ```python def lowest_common_ancestor(root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode: ```","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def lowest_common_ancestor(root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode: Finds the lowest common ancestor (LCA) of two given nodes in the BST. current = root while current: # If both nodes are in the right subtree if p.val > current.val and q.val > current.val: current = current.right # If both nodes are in the left subtree elif p.val < current.val and q.val < current.val: current = current.left else: # We have diverged, i.e., one node is on the left and the other is on the right, # or we have reached the point where one of the nodes is the LCA itself. return current"},{"question":"Write a function that takes in a string consisting of lowercase letters and returns the length of the longest substring with all unique characters. Implement this function without using built-in library functions for finding substrings or sets.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all unique characters. start = 0 max_length = 0 char_map = {} for end in range(len(s)): if s[end] in char_map: start = max(start, char_map[s[end]] + 1) char_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"What is a decorator in Python? Write a simple decorator to demonstrate its usage. ```python def my_decorator(func): def wrapper(): print(\\"Something is happening before the function is called.\\") func() print(\\"Something is happening after the function is called.\\") return wrapper @my_decorator def say_hello(): print(\\"Hello!\\") # Call the decorated function say_hello() ``` In the above example: 1. Explain what the `my_decorator` function does. 2. Describe the use of the `@` symbol before the `say_hello` function. 3. When the `say_hello` function is called, what will the output be?","solution":"def my_decorator(func): This decorator adds some behavior before and after the execution of the function it decorates. def wrapper(): print(\\"Something is happening before the function is called.\\") func() print(\\"Something is happening after the function is called.\\") return wrapper @my_decorator def say_hello(): Prints \'Hello!\'. print(\\"Hello!\\") # Call the decorated function say_hello() # Explanation: # 1. The `my_decorator` function takes a function `func` as an argument and returns a new function `wrapper` that adds some behavior before and after calling `func`. # 2. The `@` symbol before the `say_hello` function is used to apply the `my_decorator` function to `say_hello`, meaning that `say_hello` will be replaced by the wrapped version. # 3. When the `say_hello` function is called, the output will be: # Something is happening before the function is called. # Hello! # Something is happening after the function is called."},{"question":"Write a program that takes a string as an input and returns the first non-repeated character in the string. If all characters are repeated or the string is empty, return a message indicating such. For instance, given the string \\"swiss\\", the output should be \'w\', as it is the first character that does not repeat later in the string.","solution":"def first_non_repeated_char(s): Returns the first non-repeated character in the string `s`. If all characters are repeated or the string is empty, returns a message indicating such. char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeated character for char in s: if char_count[char] == 1: return char return \\"All characters are repeated or the string is empty.\\""},{"question":"You are given a list of integers representing the workload of different tasks at a factory. The factory has two machines, and each task must be assigned to one of the machines. The goal is to distribute the tasks between the two machines such that the difference in the total workload between the two machines is minimized. Write a function `distribute_tasks` that accepts a list of integers and returns two lists, each representing the tasks assigned to the respective machines. **Constraints:** 1. The input list will have at least one and at most 100 tasks. 2. Each task will have a positive integer workload not exceeding 1000. **Example:** ```python def distribute_tasks(tasks): # Your implementation here # Test case tasks = [10, 20, 15, 5, 25] machine1, machine2 = distribute_tasks(tasks) print(machine1) # Example output: [15, 10, 5] print(machine2) # Example output: [20, 25] ``` In this example, the total workload for machine1 is 30 and for machine2 is 45, resulting in a difference of 15, which may not be minimal but is acceptable given the constraints and problem complexities. The output does not need to be unique but should align closely with the given goal of minimizing the workload difference.","solution":"def distribute_tasks(tasks): Distributes tasks between two machines to minimize the total workload difference. total_workload = sum(tasks) target = total_workload // 2 dp = [[False] * (target + 1) for _ in range(len(tasks) + 1)] dp[0][0] = True for i in range(1, len(tasks) + 1): for j in range(target + 1): if j >= tasks[i - 1]: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - tasks[i - 1]] else: dp[i][j] = dp[i - 1][j] for i in range(target, -1, -1): if dp[len(tasks)][i]: closest_sum = i break machine1 = [] machine2 = [] w = closest_sum for i in range(len(tasks), 0, -1): if dp[i-1][w]: machine2.append(tasks[i-1]) else: machine1.append(tasks[i-1]) w -= tasks[i-1] return machine1, machine2"},{"question":"**Create a function that detects a cycle in a directed graph using Depth First Search (DFS)** Write a Python function `detect_cycle(graph)` that takes a directed graph represented as an adjacency list and returns `True` if there is a cycle in the graph and `False` otherwise. # Input: - `graph`: A dictionary where each key is a node and its corresponding value is a list of nodes to which it has a directed edge. # Output: - A boolean value, `True` if there is a cycle in the graph, and `False` otherwise. # Example: ```python graph1 = { \'A\': [\'B\'], \'B\': [\'C\'], \'C\': [\'A\'] # Cycle A -> B -> C -> A } print(detect_cycle(graph1)) # Output: True graph2 = { \'A\': [\'B\'], \'B\': [\'C\'], \'C\': [] # No cycle } print(detect_cycle(graph2)) # Output: False ``` # Constraints: - The graph will have at least one node and at most `10^4` nodes. - Each node can have zero or more directed edges. - The names of the nodes are unique and can be any string. # Function Signature: ```python def detect_cycle(graph: dict) -> bool: ``` # Hint: Use Depth First Search (DFS) recursively, maintaining the visited nodes and the stack of the current path. # Note: You might want to keep track of two sets or lists: - One for visited nodes to avoid redundant processing. - Another to keep track of the nodes in the current recursion stack to detect back edges that form cycles.","solution":"def detect_cycle(graph): def dfs(node, visited, rec_stack): visited.add(node) rec_stack.add(node) for neighbor in graph.get(node, []): if neighbor not in visited: if dfs(neighbor, visited, rec_stack): return True elif neighbor in rec_stack: return True rec_stack.remove(node) return False visited = set() rec_stack = set() for node in graph: if node not in visited: if dfs(node, visited, rec_stack): return True return False"},{"question":"Create a function that takes an array of strings and returns a new array containing only the anagrams groups. Each group should be sorted alphabetically and the groups should not contain duplicates. For example, given the array [\'eat\', \'tea\', \'tan\', \'ate\', \'nat\', \'bat\'], the function should return [[\'eat\', \'tea\', \'ate\'], [\'tan\', \'nat\'], [\'bat\']].","solution":"from collections import defaultdict def group_anagrams(words): Groups anagrams from the list of words. Args: words (List[str]): A list of strings containing words. Returns: List[List[str]]: A list of lists, where each sublist contains anagrams grouped together. anagrams = defaultdict(list) for word in words: sorted_word = tuple(sorted(word)) anagrams[sorted_word].append(word) # Sort each group alphabetically and make sure groups don\'t contain duplicates grouped_anagrams = [sorted(list(set(group))) for group in anagrams.values()] return grouped_anagrams"},{"question":"Implement a function that takes a list of integers and returns the product of all the elements in the list except the current index without using division. For example, given the list [1, 2, 3, 4], the output should be [24, 12, 8, 6]. If the input list is [0, 1, 2, 3], the output should be [6, 0, 0, 0].","solution":"def product_except_self(nums): Returns a list such that each element at index i of the output list is the product of all the numbers in the original array except the one at i. :param nums: List of integers :return: List of integers with the described property n = len(nums) if n == 0: return [] # Initialize the result array with ones result = [1] * n # Calculate left products left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Calculate right products and the final result right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Write a Python function that utilizes recursion to determine whether a given string is a palindrome. A palindrome is a string that reads the same backward as forward. The function should ignore non-alphanumeric characters and consider case insensitivity. def is_palindrome(s): # Your code here # Testing the function print(is_palindrome(\\"A man, a plan, a canal: Panama\\")) # Should return True print(is_palindrome(\\"race a car\\")) # Should return False","solution":"import re def is_palindrome(s): Determine whether a given string is a palindrome, ignoring non-alphanumeric characters and case insensitivity. # Remove non-alphanumeric characters and convert to lowercase s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() def helper(low, high): if low >= high: return True if s[low] != s[high]: return False return helper(low + 1, high - 1) return helper(0, len(s) - 1)"},{"question":"Given a string containing only lowercase alphabets, write a function to find the first non-repeating character in it and return its index. If there are no non-repeating characters, return -1. The function should have a time complexity better than O(n^2). Optimize the solution by considering a single pass approach to process the string. # Function Signature ```python def find_first_unique_char(s: str) -> int: # Your code here pass ``` # Example ```python # Example 1 input_str = \\"leetcode\\" # The first non-repeating character is \'l\' at index 0 assert find_first_unique_char(input_str) == 0 # Example 2 input_str = \\"loveleetcode\\" # The first non-repeating character is \'v\' at index 2 assert find_first_unique_char(input_str) == 2 # Example 3 input_str = \\"aabb\\" # There is no non-repeating character assert find_first_unique_char(input_str) == -1 ``` # Constraints - The input string `s` will be between 1 and 10^5 characters long. - Only lowercase English letters will be present in the string.","solution":"def find_first_unique_char(s: str) -> int: Returns the index of the first non-repeating character in a given string. If no such character exists, it returns -1. # Dictionary to store the frequency and the first index of each character char_frequency = {} # Fill the dictionary with frequency and first index for index, char in enumerate(s): if char in char_frequency: char_frequency[char][0] += 1 else: char_frequency[char] = [1, index] # Iterate through the dictionary to find the first non-repeating character for char in s: if char_frequency[char][0] == 1: return char_frequency[char][1] return -1"},{"question":"Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Demonstrate your solution with the array [2, 7, 11, 15] and the target 9.","solution":"def two_sum(nums, target): Returns indices of the two numbers in the array such that they add up to the target. :param nums: List[int], list of integers :param target: int, target sum :return: Tuple[int, int], tuple of indices num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i # Example array and target result = two_sum([2, 7, 11, 15], 9)"},{"question":"Create an advanced Python script capable of interfacing with a RESTful API to gather and process real-time data streams from multiple sources. The script should efficiently handle the streaming data by employing multithreading or asynchronous programming techniques to manage varying data arrival times and ensure minimal latency. Additionally, the script should include robust error handling mechanisms to manage potential issues such as network interruptions, API rate limits, and data format inconsistencies. Emphasize optimizing the data processing pipeline, which includes data cleaning, aggregation, and the generation of actionable insights from the real-time data stream.","solution":"import requests import asyncio import aiohttp import concurrent.futures from datetime import datetime import logging logging.basicConfig(level=logging.INFO) API_ENDPOINTS = [ \'https://api.example.com/data/source1\', \'https://api.example.com/data/source2\', # Add more API endpoints as needed ] def clean_data(data): Cleans received data. Implement specific data cleaning logic here. # Example data cleaning logic cleaned_data = {key: value for key, value in data.items() if value is not None} return cleaned_data def aggregate_data(data_list): Aggregates data from multiple sources. aggregated_data = {} for data in data_list: for key, value in data.items(): if key not in aggregated_data: aggregated_data[key] = [] aggregated_data[key].append(value) # Example aggregation: Compute average for each key for key in aggregated_data: aggregated_data[key] = sum(aggregated_data[key]) / len(aggregated_data[key]) return aggregated_data def generate_insights(aggregated_data): Generates actionable insights from aggregated data. insights = {} for key, value in aggregated_data.items(): if value > 100: # Example threshold for generating insights insights[key] = \'High\' else: insights[key] = \'Normal\' return insights async def fetch_data(session, url): Fetch data asynchronously. try: async with session.get(url) as response: if response.status == 200: data = await response.json() cleaned_data = clean_data(data) logging.info(f\\"Fetched and cleaned data from {url}\\") return cleaned_data else: logging.error(f\\"Failed to fetch data from {url}: {response.status}\\") return None except aiohttp.ClientError as e: logging.error(f\\"Client error while fetching data from {url}: {e}\\") return None async def gather_data(): tasks = [] async with aiohttp.ClientSession() as session: for url in API_ENDPOINTS: tasks.append(fetch_data(session, url)) results = await asyncio.gather(*tasks) return [res for res in results if res is not None] def process_data(): loop = asyncio.get_event_loop() data_list = loop.run_until_complete(gather_data()) aggregated_data = aggregate_data(data_list) insights = generate_insights(aggregated_data) return insights if __name__ == \\"__main__\\": insights = process_data() logging.info(f\\"Generated insights: {insights}\\")"},{"question":"Create a function that accepts a list of strings and returns a dictionary with the frequency count of each character across all the strings in the list. ```python def character_frequency(strings): pass # Example usage strings = [\\"apple\\", \\"banana\\", \\"cherry\\"] print(character_frequency(strings)) # Expected output: {\'a\': 4, \'p\': 2, \'l\': 1, \'e\': 2, \'b\': 1, \'n\': 2, \'c\': 1, \'h\': 1, \'r\': 2, \'y\': 1} ```","solution":"def character_frequency(strings): Returns a dictionary with the frequency count of each character across all the strings in the list. frequency = {} for string in strings: for char in string: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"You are given a dataset that contains information about different house prices in various regions. Your task is to build a regression model using either a Random Forest Regressor or a Gradient Boosting Regressor from the scikit-learn library. Before fitting the model, perform essential data preprocessing steps such as handling missing values, encoding categorical variables, and splitting the dataset into training and testing sets. Further, employ feature selection techniques like Recursive Feature Elimination (RFE) or SelectFromModel to identify the most significant features that influence house prices. After building the model, evaluate its performance using metrics like R-squared, Mean Absolute Error (MAE), and Root Mean Squared Error (RMSE). Finally, create a visualization using matplotlib to compare the actual vs predicted house prices and provide a brief analysis of the model\'s performance and the chosen feature selection technique. Your solution should be implemented in a single python function that takes the dataset and a flag indicating the choice of regressor (Random Forest or Gradient Boosting) as inputs, and outputs the evaluation metrics and the comparison plot.","solution":"import numpy as np import pandas as pd from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor from sklearn.model_selection import train_test_split from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error from sklearn.impute import SimpleImputer from sklearn.preprocessing import OneHotEncoder from sklearn.compose import ColumnTransformer from sklearn.pipeline import Pipeline from sklearn.feature_selection import SelectFromModel import matplotlib.pyplot as plt def build_and_evaluate_model(dataset, use_random_forest=True): Build and evaluate a regression model (Random Forest or Gradient Boosting) on the given dataset. Parameters: dataset (pd.DataFrame): The dataset containing house prices and associated features. use_random_forest (bool): Flag to choose the regressor (True for Random Forest, False for Gradient Boosting). Returns: dict: A dictionary containing R-squared, MAE, RMSE values. # Separate features and target X = dataset.drop(\'price\', axis=1) y = dataset[\'price\'] # Identify categorical and numerical columns categorical_cols = X.select_dtypes(include=[\'object\']).columns numerical_cols = X.select_dtypes(exclude=[\'object\']).columns # Preprocessing for numerical data numerical_transformer = SimpleImputer(strategy=\'mean\') # Preprocessing for categorical data categorical_transformer = Pipeline(steps=[ (\'imputer\', SimpleImputer(strategy=\'most_frequent\')), (\'onehot\', OneHotEncoder(handle_unknown=\'ignore\')) ]) # Bundle preprocessing for numerical and categorical data preprocessor = ColumnTransformer( transformers=[ (\'num\', numerical_transformer, numerical_cols), (\'cat\', categorical_transformer, categorical_cols) ]) # Choose the model if use_random_forest: model = RandomForestRegressor(random_state=42) else: model = GradientBoostingRegressor(random_state=42) # Create and evaluate the pipeline clf = Pipeline(steps=[ (\'preprocessor\', preprocessor), (\'feature_selection\', SelectFromModel(RandomForestRegressor(random_state=42))), (\'regressor\', model) ]) # Split the dataset X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Fit the model clf.fit(X_train, y_train) # Make predictions y_pred = clf.predict(X_test) # Calculate evaluation metrics r2 = r2_score(y_test, y_pred) mae = mean_absolute_error(y_test, y_pred) rmse = np.sqrt(mean_squared_error(y_test, y_pred)) # Plot actual vs predicted values plt.figure(figsize=(10, 6)) plt.scatter(y_test, y_pred, alpha=0.5) plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], \'k--\', lw=2) plt.xlabel(\'Actual\') plt.ylabel(\'Predicted\') plt.title(\'Actual vs Predicted House Prices\') plt.show() # Return performance metrics return {\'R-squared\': r2, \'MAE\': mae, \'RMSE\': rmse}"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine if it is possible to make the string a palindrome by rearranging its letters. Write a function `can_form_palindrome(s)` that returns `True` if it is possible to rearrange the characters of the string `s` to form a palindrome, and `False` otherwise. # Function Signature ```python def can_form_palindrome(s: str) -> bool: pass ``` # Input - A single string `s` where `1 <= len(s) <= 1000`. # Output - Return `True` if it is possible to rearrange the string to form a palindrome, otherwise return `False`. # Example ```python print(can_form_palindrome(\\"aabb\\")) # Output: True ``` Explanation: The string \\"aabb\\" can be rearranged to form the palindrome \\"abba\\". ```python print(can_form_palindrome(\\"abc\\")) # Output: False ``` Explanation: The string \\"abc\\" cannot be rearranged to form a palindrome as no permutation of this string is a palindrome. # Note - A string can form a palindrome if, after permutation, each character except at most one character can pair with another character.","solution":"def can_form_palindrome(s: str) -> bool: from collections import Counter # Count the frequency of each character char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 == 1) # A string can form a palindrome if it has at most one character with an odd frequency return odd_count <= 1"},{"question":"Create a function in Python that takes a list of integers and returns a new list where each element in the original list has been squared, but maintaining the order. For example, given the input list `[1, 2, 3, 4]`, the function should return `[1, 4, 9, 16]`. Consider edge cases where the list might be empty or contain negative numbers.","solution":"def square_elements(lst): Returns a new list where each element in the original list has been squared, maintaining the order. Args: lst: List of integers Returns: List of squared integers return [x**2 for x in lst]"},{"question":"Write a program that accepts an integer array as input and returns an array containing only the prime numbers from the input array. Additionally, the program should remove any duplicate prime numbers in the output array and return them in ascending order. For example, if the input array is [3, 5, 8, 3, 10, 13, 5, 2, 9, 2], the output array should be [2, 3, 5, 13].","solution":"def is_prime(n): Check if the number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def extract_primes(arr): Accepts an integer array as input and returns an array containing only the prime numbers, without duplicates and in ascending order. primes_set = {x for x in arr if is_prime(x)} return sorted(primes_set)"},{"question":"Write a Python function called `count_vowels` that takes a string as input and returns the number of vowels (a, e, i, o, u) present in that string. The function should be case-insensitive, meaning it should count both uppercase and lowercase vowels. Ensure the function handles edge cases such as an empty string or a string with no vowels. Additionally, provide an erroneous code to be debugged. In the erroneous code, the function does not account for uppercase vowels and produces incorrect results. How can you correct this code to properly count the vowels in a case-insensitive manner? ```python def count_vowels(s): vowels = \\"aeiou\\" count = 0 for char in s: if char in vowels: count += 1 return count print(count_vowels(\\"Hello World\\")) ```","solution":"def count_vowels(s): Returns the number of vowels (a, e, i, o, u) in the input string s. The function is case-insensitive. vowels = \\"aeiou\\" count = 0 for char in s.lower(): # Convert string to lowercase to handle case-insensitivity if char in vowels: count += 1 return count # Corrected the erroneous code with the inclusion of s.lower() to make the function case-insensitive"},{"question":"Design a function in Python that takes a list of tuples containing student names and their corresponding scores. The function should sort the list in descending order based on scores and return the sorted list. Additionally, provide an optional parameter to return the top N students. If N is not provided, return the entire sorted list.","solution":"def sort_students_by_scores(students, top_n=None): Sorts the list of tuples (students, scores) in descending order based on scores. Parameters: students (list): A list of tuples with each tuple containing a student\'s name and their score. top_n (int, optional): The number of top students to return. If None, returns the entire sorted list. Returns: list: A sorted list of tuples based on scores in descending order. # Sort the list of students by scores in descending order sorted_students = sorted(students, key=lambda x: x[1], reverse=True) # If top_n is provided, return only the top N students if top_n is not None: return sorted_students[:top_n] # Otherwise, return the entire sorted list return sorted_students"},{"question":"Write a Python function that takes a string representing a mathematical expression (consisting of non-negative integers, \'+\', \'-\', \'*\', and \'/\' operators, and parentheses) and returns the evaluated result as an integer. Implement the function without using the built-in `eval` function. The function should correctly handle operator precedence and parentheses. For example: ```python def evaluate_expression(expression: str) -> int: # Your code here # Example usage: print(evaluate_expression(\\"3+5 / 2\\")) # Output: 5 print(evaluate_expression(\\"(2+6* 3+5- (3*14/7+2)*5)+3\\")) # Output: -12 ``` **Constraints:** - The input string will be a valid mathematical expression. - The expression will not contain any spaces other than those needed for separation of operators and operands (e.g., \\"3+5 / 2\\" is valid). - The result will be an integer. - Division should be integer division.","solution":"def evaluate_expression(expression: str) -> int: def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_op(op, a, b): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a // b def evaluate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue if tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while i < len(tokens) and tokens[i].isdigit(): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': op = ops.pop() val2 = values.pop() val1 = values.pop() values.append(apply_op(op, val1, val2)) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): op = ops.pop() val2 = values.pop() val1 = values.pop() values.append(apply_op(op, val1, val2)) ops.append(tokens[i]) i += 1 while len(ops) != 0: op = ops.pop() val2 = values.pop() val1 = values.pop() values.append(apply_op(op, val1, val2)) return values[-1] return evaluate(expression)"},{"question":"Design a function that accepts a string and returns the number of unique vowels that appear in the string. Additionally, implement an error handling mechanism to ensure the input provided is a string. If the input is not a string, return an appropriate error message. Ensure your function is case-insensitive and considers \'a\', \'e\', \'i\', \'o\', \'u\' as vowels.","solution":"def count_unique_vowels(s): Returns the number of unique vowels in the given string. Handles cases where input is not a string. if not isinstance(s, str): return \\"Input must be a string\\" vowels = set(\'aeiou\') s = s.lower() unique_vowels = {char for char in s if char in vowels} return len(unique_vowels)"},{"question":"Write a function that converts a given Roman numeral string to its integer equivalent. Roman numerals are represented by seven symbols: I, V, X, L, C, D, and M, which correspond to the integers 1, 5, 10, 50, 100, 500, and 1000 respectively. Given a string representing a Roman numeral, convert it to the corresponding integer. Rules for Roman numerals: 1. Repeating a numeral up to three times represents addition: III = 3. 2. Placing a smaller numeral before a larger numeral represents subtraction: IV = 4. 3. Placing a smaller numeral after a larger numeral represents addition: VI = 6. # Example: ```python def roman_to_int(s): # Your implementation here # Example usage: print(roman_to_int(\\"III\\")) # Output: 3 print(roman_to_int(\\"IV\\")) # Output: 4 print(roman_to_int(\\"IX\\")) # Output: 9 print(roman_to_int(\\"LVIII\\")) # Output: 58 print(roman_to_int(\\"MCMXCIV\\")) # Output: 1994 ``` # Constraints: 1. The input string is guaranteed to be a valid Roman numeral. 2. The length of the input string is at most 15 characters. Implement the function `roman_to_int` to solve this problem.","solution":"def roman_to_int(s): Convert a Roman numeral string to its integer equivalent. roman_to_int_map = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in s[::-1]: # Reverse iterate through the string value = roman_to_int_map[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Create a function in Python that accepts a list of integers and returns a new list with all duplicate numbers removed, while preserving the original order of numbers.","solution":"def remove_duplicates(nums): Accepts a list of integers and returns a new list with all duplicate numbers removed while preserving the original order. seen = set() result = [] for num in nums: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Write a program to determine if a given string is a palindrome and the length of the longest palindromic substring within the given string. For the given input string \\"babad\\", the program should return: Is Palindrome: False Longest Palindromic Substring: \\"bab\\" Length: 3","solution":"def is_palindrome(s: str) -> bool: Returns True if the string s is a palindrome, False otherwise. return s == s[::-1] def longest_palindromic_substring(s: str) -> str: Returns the longest palindromic substring in s. n = len(s) if n == 0: return \\"\\" longest = s[0] dp = [[False] * n for _ in range(n)] for end in range(n): for start in range(end + 1): if s[start] == s[end] and (end - start <= 2 or dp[start + 1][end - 1]): dp[start][end] = True if end - start + 1 > len(longest): longest = s[start:end + 1] return longest def get_palindrome_info(s: str): Returns whether the string s is a palindrome, the longest palindromic substring, and its length. is_palindrome_res = is_palindrome(s) longest_palindrome = longest_palindromic_substring(s) longest_length = len(longest_palindrome) return is_palindrome_res, longest_palindrome, longest_length"},{"question":"Given a large text corpus, write a function to identify the longest palindromic substring within the document. The function should be efficient to handle texts with lengths up to a few million characters. Additionally, the algorithm should ignore spaces, punctuation, and case variations when determining palindromes. Provide an analysis of the function\'s time complexity, space complexity, and potential optimizations for real-time applications.","solution":"def preprocess_string(s): Converts the string to lower case and removes all non-alphanumeric characters. return \'\'.join(c.lower() for c in s if c.isalnum()) def longest_palindromic_substring(s): Returns the longest palindromic substring in the given document. Ignoring spaces, punctuation, and case variations. s = preprocess_string(s) n = len(s) if n == 0: return \\"\\" # Initialize a list to store the details of the longest palindrome found. start = 0 max_length = 1 # Create a table to store results of sub-problems table = [[0] * n for _ in range(n)] # All substrings of length 1 are palindromes for i in range(n): table[i][i] = True # Check for sub-string of length 2 for i in range(n - 1): if s[i] == s[i + 1]: table[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2. k is length of substring for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 # Ending index of substring from starting index i and length k # Checking for sub-string from ith index to jth index # iff s[i+1] to s[j-1] is a palindrome if table[i + 1][j - 1] and s[i] == s[j]: table[i][j] = True if k > max_length: start = i max_length = k longest_palindrome = s[start:start + max_length] return longest_palindrome"},{"question":"Write a Python function that takes a list of integers and returns a new list with even numbers squared and odd numbers cubed. Additionally, your function should handle edge cases such as an empty list or containing non-integer elements gracefully. The output list should maintain the same order as the input list. Sample input: [1, 2, 3, 4, 5] Expected output: [1, 4, 27, 16, 125]","solution":"def transform_numbers(input_list): Transforms the input list of integers by squaring the even numbers and cubing the odd numbers. Handles edge cases such as empty list or list containing non-integer elements gracefully. Parameters: input_list (list): A list of integers. Returns: list: A new list where even numbers are squared and odd numbers are cubed. If a non-integer element is encountered, it is ignored. if not isinstance(input_list, list): return [] result = [] for item in input_list: if isinstance(item, int): if item % 2 == 0: result.append(item ** 2) else: result.append(item ** 3) return result"},{"question":"Create a function in Python that takes a list of strings representing a series of file paths and returns a dictionary where the keys are the distinct file extensions in the list (excluding duplicates) and the values are lists containing all the full paths that have that file extension. If a file path does not have an extension, it should be counted under the key \\"no_extension\\". Your function should handle edge cases such as if the file path ends with a dot but no extension, or if there are files with multiple dots in their names. The function should aim to be efficient in terms of both time and space complexity, especially for large lists of file paths. Example input: ```python file_paths = [ \'/usr/local/file1.txt\', \'/usr/local/file2\', \'/usr/local/file3.tmp\', \'/usr/local/file4.\', \'/usr/local/file5.a.b.c\', \'/home/user/document.pdf\', \'/home/user/script\', \'/home/user/image.jpeg\' ] ``` Expected output: ```python { \'txt\': [\'/usr/local/file1.txt\'], \'no_extension\': [\'/usr/local/file2\', \'/usr/local/file4.\', \'/home/user/script\'], \'tmp\': [\'/usr/local/file3.tmp\'], \'c\': [\'/usr/local/file5.a.b.c\'], \'pdf\': [\'/home/user/document.pdf\'], \'jpeg\': [\'/home/user/image.jpeg\'] } ```","solution":"def categorize_files(file_paths): Categorizes the file paths based on their extensions. Parameters: file_paths (list of str): List of file paths to be categorized. Returns: dict: Dictionary where keys are file extensions or \'no_extension\' and values are lists of file paths. from collections import defaultdict categorized_files = defaultdict(list) for path in file_paths: if \'.\' in path.split(\'/\')[-1] and path.split(\'/\')[-1].rfind(\'.\') != len(path.split(\'/\')[-1]) - 1: ext = path.split(\'/\')[-1].split(\'.\')[-1] categorized_files[ext].append(path) else: categorized_files[\'no_extension\'].append(path) return dict(categorized_files)"},{"question":"Write a Python function that takes a list of positive integers as input and returns a tuple containing two elements: the largest even number and the smallest odd number from the list. If no even number is found, return None for the largest even number. Similarly, if no odd number is found, return None for the smallest odd number. Example: ``` Input: [3, 7, 2, 9, 12, 15] Output: (12, 3) ```","solution":"def find_largest_even_smallest_odd(numbers): Takes a list of positive integers and returns a tuple containing the largest even number and the smallest odd number. If no even number exists, returns None for the largest even number. If no odd number exists, returns None for the smallest odd number. largest_even = None smallest_odd = None for num in numbers: if num % 2 == 0: # Even number if largest_even is None or num > largest_even: largest_even = num else: # Odd number if smallest_odd is None or num < smallest_odd: smallest_odd = num return (largest_even, smallest_odd)"},{"question":"You are working on a program that takes a list of strings as input and outputs a list of the longest common prefix for each pair of strings in the list. # Question Write a Python function named `longest_common_prefix` that takes a list of strings and returns a list containing the longest common prefix for each pair of strings in the original list. The pairs should be formed by taking the first string with the second, the first string with the third, the second string with the third, and so on. The function signature should be: ```python def longest_common_prefix(strings: List[str]) -> List[str]: ``` # Example ```python strings = [\\"flower\\", \\"flow\\", \\"flight\\"] longest_common_prefix(strings) ``` Output: ```python [\\"flo\\", \\"fl\\", \\"fl\\"] ``` The pairs of strings and their longest common prefixes are: 1. `\\"flower\\"` and `\\"flow\\"` -> `\\"flo\\"` 2. `\\"flower\\"` and `\\"flight\\"` -> `\\"fl\\"` 3. `\\"flow\\"` and `\\"flight\\"` -> `\\"fl\\"` # Constraints - The input list will have at least 2 strings and at most 100 strings. - Each string in the input list will have at least 1 character and at most 100 characters. - The function should handle the case where there is no common prefix by returning an empty string for that pair. # Notes 1. You may define and use additional helper functions if required. 2. Pay attention to the time complexity to ensure the solution is efficient for the given constraints. 3. Make sure to handle edge cases, such as strings that do not share any prefix.","solution":"from typing import List def longest_common_prefix(strings: List[str]) -> List[str]: def common_prefix(str1: str, str2: str) -> str: min_length = min(len(str1), len(str2)) i = 0 while i < min_length and str1[i] == str2[i]: i += 1 return str1[:i] result = [] n = len(strings) for i in range(n): for j in range(i + 1, n): result.append(common_prefix(strings[i], strings[j])) return result"},{"question":"Write a Python function `find_substring(s, k)` that takes a string `s` and an integer `k` as input, and returns the longest substring that contains exactly `k` distinct characters. In case of multiple substrings of the same maximum length, return the one that appears first. If there are no substrings with `k` distinct characters, return an empty string. ```python def find_substring(s, k): # Implement your solution here pass # Example usage: s = \\"abcba\\" k = 2 print(find_substring(s, k)) # Output: \\"bcb\\" ```","solution":"def find_substring(s, k): if k == 0 or not s: return \\"\\" n = len(s) max_length = 0 max_substring = \\"\\" left = 0 char_dict = {} for right in range(n): char_dict[s[right]] = char_dict.get(s[right], 0) + 1 while len(char_dict) > k: char_dict[s[left]] -= 1 if char_dict[s[left]] == 0: del char_dict[s[left]] left += 1 if len(char_dict) == k: if right - left + 1 > max_length: max_length = right - left + 1 max_substring = s[left:right + 1] return max_substring"},{"question":"Develop a function in Python to calculate the total number of unique paths in a grid. The grid dimensions are provided as input parameters (rows, columns). You can move either down or right from a cell in the grid. The function should return the total number of unique paths from the top-left corner to the bottom-right corner without visiting any cell more than once.","solution":"def unique_paths(rows, cols): Returns the number of unique paths from the top-left corner to the bottom-right corner of a grid with the given number of rows and columns. if rows == 0 or cols == 0: return 0 # Initialize a 2D list with 1s for the first row and first column dp = [[1] * cols for _ in range(rows)] # Fill the rest of the dp array for i in range(1, rows): for j in range(1, cols): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[rows-1][cols-1]"},{"question":"Given an array of integers, write a function that returns the sum of the unique elements only. For this question, consider \\"unique elements\\" to mean numbers that appear exactly once in the array. Your function should have the following signature: `def sum_of_unique_elements(arr: List[int]) -> int`. Example: ``` Input: [1, 2, 2, 3, 4, 5, 5] Output: 8 Explanation: The unique elements are 1, 3, and 4. ```","solution":"from typing import List def sum_of_unique_elements(arr: List[int]) -> int: Returns the sum of the unique elements in the array. Unique elements are those that appear exactly once in the array. element_count = {} for num in arr: if num in element_count: element_count[num] += 1 else: element_count[num] = 1 unique_sum = sum(num for num, count in element_count.items() if count == 1) return unique_sum"},{"question":"Design a function that takes in a list of integers and returns the largest product that can be obtained from any three of those integers. Ensure your function handles edge cases, such as lists with fewer than three elements or lists that contain negative numbers. You should also consider the efficiency of your algorithm to handle large input sizes. **Examples:** 1. largest_product([1, 10, 2, 6, 5, 3]) should return 300 (10 * 6 * 5) 2. largest_product([-10, -10, 5, 2]) should return 500 (-10 * -10 * 5) 3. largest_product([1, 2]) should return \\"Not enough elements\\"","solution":"def largest_product(arr): Returns the largest product that can be obtained from any three integers in the given list. if len(arr) < 3: return \\"Not enough elements\\" arr.sort() # Maximum product can be from two cases: # 1. Product of the three largest numbers max1 = arr[-1] * arr[-2] * arr[-3] # 2. Product of two smallest (potentially negative) and the largest number max2 = arr[0] * arr[1] * arr[-1] return max(max1, max2)"},{"question":"Write a Python function that finds the longest substring without repeating characters in a given string. Your function should return both the length of this substring and the substring itself. Provide a solution with a time complexity better than O(n^2). Function signature: ```python def longest_unique_substring(s: str) -> Tuple[int, str]: pass ``` # Examples Example 1 ```plaintext Input: \\"abcabcbb\\" Output: (3, \\"abc\\") Explanation: The answer is \\"abc\\", with the length of 3. ``` Example 2 ```plaintext Input: \\"bbbbb\\" Output: (1, \\"b\\") Explanation: The answer is \\"b\\", with the length of 1. ``` Example 3 ```plaintext Input: \\"pwwkew\\" Output: (3, \\"wke\\") Explanation: The answer is \\"wke\\", with the length of 3. Note that \\"pwke\\" is a subsequence and not a substring. ```","solution":"from typing import Tuple def longest_unique_substring(s: str) -> Tuple[int, str]: Finds the longest substring without repeating characters in a given string. Returns both the length of this substring and the substring itself. last_seen = {} start = 0 max_length = 0 max_substr = \\"\\" for i, char in enumerate(s): if char in last_seen and last_seen[char] >= start: start = last_seen[char] + 1 last_seen[char] = i current_length = i - start + 1 if current_length > max_length: max_length = current_length max_substr = s[start:i+1] return max_length, max_substr"},{"question":"Create a function that simulates an inventory management system for a retail store. The function should allow you to add, update, and remove items, as well as check the stock levels of a specific item. Each item should be represented by a dictionary containing the item\'s name, quantity, and price. Ensure that the function handles potential errors gracefully, such as trying to remove an item that does not exist or updating an item with invalid data.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, name, quantity, price): if name in self.items: return f\\"Error: Item \'{name}\' already exists.\\" if quantity < 0 or price < 0: return \\"Error: Quantity and price must be non-negative.\\" self.items[name] = {\'name\': name, \'quantity\': quantity, \'price\': price} return f\\"Item \'{name}\' added successfully.\\" def remove_item(self, name): if name not in self.items: return f\\"Error: Item \'{name}\' not found.\\" del self.items[name] return f\\"Item \'{name}\' removed successfully.\\" def update_item(self, name, quantity=None, price=None): if name not in self.items: return f\\"Error: Item \'{name}\' not found.\\" if quantity is not None: if quantity < 0: return \\"Error: Quantity must be non-negative.\\" self.items[name][\'quantity\'] = quantity if price is not None: if price < 0: return \\"Error: Price must be non-negative.\\" self.items[name][\'price\'] = price return f\\"Item \'{name}\' updated successfully.\\" def check_stock(self, name): if name not in self.items: return f\\"Error: Item \'{name}\' not found.\\" return self.items[name]"},{"question":"You have a grid with `n` rows and `m` columns. Each cell in the grid has a non-negative integer indicating the cost of accessing that cell. You are allowed to start at any cell in the topmost row and move downwards to any other cell. From a given cell `(i, j)`, you can go to the cell directly below it `(i+1, j)`, or the cell diagonally below and to the left `(i+1, j-1)`, or the cell diagonally below and to the right `(i+1, j+1)`, provided these cells are within the bounds of the grid. Write a function that calculates the minimum cost to traverse from the top row to any cell in the bottom row. # Function Signature ```python def min_cost_traverse(grid: List[List[int]]) -> int: pass ``` # Input - `grid` (List[List[int]]): A 2D list representing the grid where `grid[i][j]` is the cost of accessing cell `(i, j)`. The grid will have at least one row and one column and a maximum of `50` rows and `50` columns. Each cell will have a value between `0` and `100`. # Output - Return an integer representing the minimum cost to traverse from any cell in the top row to any cell in the bottom row. # Examples Example 1 ``` Input: grid = [ [10, 5, 20], [30, 15, 10], [25, 10, 5] ] Output: 20 Explanation: One optimal path is starting from cell (0, 1) with cost 5, then move to cell (1, 1) with cost 15, and then move to cell (2, 2) with cost 5. The total cost is 5 + 15 + 5 = 25, which is the minimum possible. Example 2 ``` Input: grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: 12 Explanation: One optimal path is starting from cell (0, 0) with cost 1, then move to cell (1, 1) with cost 5, and then move to cell (2, 2) with cost 9. The total cost is 1 + 5 + 6 = 12, which is the minimum possible. # Constraints - `1 <= grid.length <= 50` - `1 <= grid[0].length <= 50` - `0 <= grid[i][j] <= 100`","solution":"from typing import List def min_cost_traverse(grid: List[List[int]]) -> int: Returns the minimum cost to traverse from any cell in the top row to any cell in the bottom row. n = len(grid) m = len(grid[0]) # Initialize a DP table with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Fill the first row of the dp table with the values of the first row of the grid for j in range(m): dp[0][j] = grid[0][j] # Fill the rest of the dp table for i in range(1, n): for j in range(m): # Initialize the minimum cost to a very large number min_cost = float(\'inf\') # Check the cell directly above min_cost = min(min_cost, dp[i-1][j]) # Check the cell diagonally left above if j > 0: min_cost = min(min_cost, dp[i-1][j-1]) # Check the cell diagonally right above if j < m - 1: min_cost = min(min_cost, dp[i-1][j+1]) dp[i][j] = grid[i][j] + min_cost # The result is the minimum value in the last row of the dp table return min(dp[n-1])"},{"question":"The focus of this task is on string manipulation and regular expressions in Python. You need to write a function that extracts all email addresses from a given text string. For the purposes of this exercise, an email address is defined as follows: - It starts with a sequence of alphanumeric characters (including dots, underscores, and hyphens). - This is followed by the `@` symbol. - Then a domain name that consists of alphanumeric characters and/or the hyphen symbol. - Finally, a dot (`.`) followed by a valid domain suffix (e.g., `.com`, `.org`, `.net`). Your function should take one argument, a text string, and return a list of all valid email addresses found within that string. If no email addresses are found, the function should return an empty list. Here is some sample code to guide you but it contains errors and does not meet the requirements fully. You must debug and modify it to fit the task requirements: ```python import re # erroneous code def extract_emails(text): email_pattern = r\'b[A-Za-z0-9._%+-]+@(?<=@)[a-zA-Z0-9.-]+.(?<=.)[A-Za-z]{2,}b\' emails = re.findall(email_pattern, text) return emails # Sample Input text = \\"Contact us at support@example.com for assistance, or sales@example.org for sales inquiries.\\" # Function usage print(extract_emails(text)) ``` Correct the code above to accurately extract all valid email addresses as per the defined criteria.","solution":"import re def extract_emails(text): Extracts a list of valid email addresses from the given text. Args: text (str): A string potentially containing email addresses. Returns: list: A list of found email addresses or an empty list if none are found. email_pattern = r\'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Za-z]{2,}b\' emails = re.findall(email_pattern, text) return emails"},{"question":"Given a list of integers, write a Python function that returns a list of the squares of the even numbers from the input list in descending order. For testing purposes, use the following list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Your function should handle edge cases such as an empty list or a list with no even numbers. The output should be an empty list in both cases. #Example input# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] #Example output# [100, 64, 36, 16, 4] def even_squares_descending(lst): # your code here print(even_squares_descending([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))","solution":"def even_squares_descending(lst): Returns a list of the squares of the even numbers from the input list in descending order. Parameters: lst (list): A list of integers Returns: list: A list of squared even numbers in descending order even_squares = [x ** 2 for x in lst if x % 2 == 0] even_squares.sort(reverse=True) return even_squares # Example usage: # print(even_squares_descending([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output should be: [100, 64, 36, 16, 4]"},{"question":"Create a Python function that takes a list of integers and a target integer and returns a list containing all pairs in the original list that sum up to the target integer. Assume that each input would have exactly one such pair. The function should have the following signature: ```python def find_sum_pairs(numbers: List[int], target: int) -> List[Tuple[int, int]]: # Your code here ``` In addition, write a test case that checks if the function is functioning correctly with the input list: `[10, 15, 3, 7]` and the target `17`. Example: ```python numbers = [10, 15, 3, 7] target = 17 print(find_sum_pairs(numbers, target)) # Output should be [(10, 7)] ```","solution":"from typing import List, Tuple def find_sum_pairs(numbers: List[int], target: int) -> List[Tuple[int, int]]: Returns a list containing the pair of integers in the original list that sum up to the target integer. seen = set() for number in numbers: complement = target - number if complement in seen: return [(complement, number)] seen.add(number) return []"},{"question":"Design a class named `InventoryManager` that helps manage an inventory of products for a store. The `InventoryManager` class should: - Allow adding new products with a unique identifier, name, quantity, and price. - Enable updating the quantity and price of existing products. - Provide functionality to remove products based on their unique identifier. - Include a method to retrieve the current inventory list, sorted by product name. - Offer a method to search for a product based on either its name or unique identifier. Products should be stored in an organized and efficient manner, suitable for quick searches and updates. Implement suitable error handling to manage cases such as adding a product with a duplicate identifier, updating a product that does not exist, or removing a product not found in the inventory. # Specifications 1. `class Product`: Represents a product in the inventory. - `__init__(self, identifier: str, name: str, quantity: int, price: float)`: Initializes a new product with the given details. - `__str__(self)`: Returns the product details as a string. 2. `class InventoryManager`: Manages the inventory of products. - `__init__(self)`: Initializes an empty inventory. - `add_product(self, identifier: str, name: str, quantity: int, price: float)`: Adds a new product to the inventory. - `update_product(self, identifier: str, quantity: int = None, price: float = None)`: Updates the quantity and/or price of an existing product. - `remove_product(self, identifier: str)`: Removes a product from the inventory based on its identifier. - `get_inventory(self) -> List[str]`: Returns a list of current inventory, sorted by product name. - `search_product(self, identifier: str = None, name: str = None) -> str`: Searches for a product by identifier or name and returns its details. # Constraints - The `identifier` is guaranteed to be unique for each product. - The `quantity` and `price` should be non-negative values. - The name and identifier are case-sensitive but should be stored in a consistent case (e.g., lowercase). # Example Usage ``` inventory = InventoryManager() inventory.add_product(\\"001\\", \\"Apple\\", 50, 0.50) inventory.add_product(\\"002\\", \\"Banana\\", 100, 0.20) print(inventory.get_inventory()) inventory.update_product(\\"001\\", quantity=75, price=0.55) print(inventory.search_product(name=\\"Apple\\")) inventory.remove_product(\\"002\\") print(inventory.get_inventory()) inventory.add_product(\\"003\\", \\"Orange\\", 150, 0.30) inventory.add_product(\\"004\\", \\"Grapes\\", 200, 2.50) print(inventory.get_inventory()) ```","solution":"class Product: def __init__(self, identifier: str, name: str, quantity: int, price: float): self.identifier = identifier.lower() self.name = name.lower() self.quantity = quantity self.price = price def __str__(self): return f\\"ID: {self.identifier}, Name: {self.name.capitalize()}, Quantity: {self.quantity}, Price: {self.price:.2f}\\" class InventoryManager: def __init__(self): self.inventory = {} def add_product(self, identifier: str, name: str, quantity: int, price: float): if identifier.lower() in self.inventory: raise ValueError(\\"Product with this identifier already exists.\\") self.inventory[identifier.lower()] = Product(identifier, name, quantity, price) def update_product(self, identifier: str, quantity: int = None, price: float = None): identifier = identifier.lower() if identifier not in self.inventory: raise KeyError(\\"Product with this identifier does not exist.\\") if quantity is not None: self.inventory[identifier].quantity = quantity if price is not None: self.inventory[identifier].price = price def remove_product(self, identifier: str): identifier = identifier.lower() if identifier not in self.inventory: raise KeyError(\\"Product with this identifier does not exist.\\") del self.inventory[identifier] def get_inventory(self): return sorted([str(product) for product in self.inventory.values()], key=lambda x: x.split(\\",\\")[1]) def search_product(self, identifier: str = None, name: str = None): if identifier: identifier = identifier.lower() if identifier in self.inventory: return str(self.inventory[identifier]) if name: name = name.lower() for product in self.inventory.values(): if product.name == name: return str(product) raise KeyError(\\"Product not found.\\")"},{"question":"Implement a function that takes a list of integers and returns the longest increasing subsequence. For instance, given the input [10, 9, 2, 5, 3, 7, 101, 18], the function should return [2, 3, 7, 101] as the longest increasing subsequence. Your solution should have a time complexity of O(n^2) or better.","solution":"def longest_increasing_subsequence(nums): Returns the longest increasing subsequence of the provided list of integers. if not nums: return [] # Length of the input list n = len(nums) # List to store the longest subsequence ending at each index lis = [[] for _ in range(n)] # The longest subsequence for the first element is the element itself lis[0].append(nums[0]) for i in range(1, n): for j in range(i): # If nums[i] is greater than nums[j] and the subsequence ending at j is longer, update the subsequence at i if nums[i] > nums[j] and len(lis[i]) < len(lis[j]) + 1: lis[i] = lis[j][:] lis[i].append(nums[i]) # Find the subsequence with the maximum length max_lis = [] for l in lis: if len(l) > len(max_lis): max_lis = l return max_lis"},{"question":"Given a string s and a list of words, determine if s can be segmented into a space-separated sequence of one or more dictionary words from the list. s = \\"leetcode\\" wordDict = [\\"leet\\", \\"code\\"]","solution":"def word_break(s, wordDict): Determine if s can be segmented into a space-separated sequence of one or more dictionary words from the list wordDict. word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[-1]"},{"question":"Develop a function in Python that simulates the workings of a simplified job scheduler system. Given a list of jobs, each with a unique identifier and a specific duration, and a maximum number of \'workers\' that can run jobs simultaneously, your function should return an order of job execution that minimizes the overall completion time. Note that the job scheduler should start with the earliest available job and prioritize jobs based on their identifier in case of a tie in availability. The function should output a list of job identifiers representing the optimized order of execution. **Function Signature** ```python def job_scheduler(jobs: List[Tuple[int, int]], max_workers: int) -> List[int]: pass ``` **Input** - `jobs` - A list of tuples, where each tuple contains two integers: - `job_id` (1 ≤ job_id ≤ 10^5) - a unique identifier for the job. - `duration` (1 ≤ duration ≤ 10^4) - the time units required to complete the job. - `max_workers` (1 ≤ max_workers ≤ 10^3) - the maximum number of jobs that can run simultaneously. **Output** - A list of integers - The order of job identifiers representing the optimized execution plan. **Example** ```python jobs = [(1, 3), (2, 5), (3, 2), (4, 1)] max_workers = 2 print(job_scheduler(jobs, max_workers)) # Output: [4, 3, 1, 2] ``` **Explanation** In the example, the job with ID `4` takes the least amount of time, so it starts first. Then, the job with ID `3`, followed by job `1`, and finally job `2`. The function ensures minimal overall completion time while adhering to the constraint on the number of concurrent jobs.","solution":"from typing import List, Tuple import heapq def job_scheduler(jobs: List[Tuple[int, int]], max_workers: int) -> List[int]: Returns the order of job execution to minimize overall completion time. jobs: List of tuples each containing (job_id, duration) max_workers: Maximum number of workers that can run jobs simultaneously # Sort jobs by duration first, then by job_id secondarily jobs.sort(key=lambda x: (x[1], x[0])) result = [] workers = [] # Initialize time and index current_time = 0 index = 0 while index < len(jobs) or workers: while index < len(jobs) and len(workers) < max_workers: heapq.heappush(workers, (current_time + jobs[index][1], jobs[index][0])) index += 1 # Run the next job to completion next_completion_time, job_id = heapq.heappop(workers) result.append(job_id) # Update current_time to the time that job completes current_time = next_completion_time return result"},{"question":"Develop a program in Python that utilizes Scikit-Learn to perform K-means clustering on a dataset. Instead of using a predefined dataset, generate a synthetic one with clear separable clusters using Scikit-Learn’s make_blobs utility. Your generated dataset should contain three clusters with different standard deviations. Once your clusters are formed, visualize them using a scatter plot and plot the centroids of each cluster. Evaluate the performance of the clustering using the inertia and silhouette scores. Provide an analysis of these clustering evaluation metrics. Below is an example of how to structure the initialization of your K-means model: ```python from sklearn.cluster import KMeans X, _ = make_blobs(n_samples=300, centers=3, cluster_std=[1.0, 2.5, 0.5], random_state=42) kmeans = KMeans(n_clusters=3, random_state=42) y_kmeans = kmeans.fit_predict(X) ```","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.datasets import make_blobs from sklearn.cluster import KMeans from sklearn.metrics import silhouette_score # Generate synthetic dataset with 3 clusters and different standard deviations X, y = make_blobs(n_samples=300, centers=3, cluster_std=[1.0, 2.5, 0.5], random_state=42) # Create and fit the KMeans model kmeans = KMeans(n_clusters=3, random_state=42) y_kmeans = kmeans.fit_predict(X) # Compute the inertia and silhouette score inertia = kmeans.inertia_ silhouette = silhouette_score(X, y_kmeans) # Plot the clusters and centroids plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, s=50, cmap=\'viridis\') centroids = kmeans.cluster_centers_ plt.scatter(centroids[:, 0], centroids[:, 1], c=\'red\', s=200, alpha=0.75, marker=\'X\') plt.title(\'K-Means Clustering\') plt.xlabel(\'Feature 1\') plt.ylabel(\'Feature 2\') plt.show() def get_clustering_evaluation(X, n_clusters=3): Performs K-Means clustering and returns the inertia and silhouette score. kmeans = KMeans(n_clusters=n_clusters, random_state=42) y_kmeans = kmeans.fit_predict(X) inertia = kmeans.inertia_ silhouette = silhouette_score(X, y_kmeans) return inertia, silhouette"},{"question":"Given a list of integers, write a Python function `find_greatest_subarray_sum(arr)` that computes the sum of the greatest contiguous subarray using a modified version of Kadane\'s algorithm. Ensure your function handles edge cases such as all negative numbers and empty lists effectively. Refrain from utilizing libraries beyond basic Python standard libraries to solve this problem: ```python def find_greatest_subarray_sum(arr): Returns the maximum sum of contiguous subarray. :param arr: List of integers :return: An integer representing the maximum sum of contiguous subarray :raises ValueError: If the input list is empty >>> find_greatest_subarray_sum([3, -2, 5, -1, 4]) 9 >>> find_greatest_subarray_sum([-3, -2, -1, -4]) -1 >>> find_greatest_subarray_sum([1, 2, 3, 4]) 10 >>> find_greatest_subarray_sum([]) ValueError: The input list cannot be empty. ``` The function should raise a `ValueError` if the input list is empty.","solution":"def find_greatest_subarray_sum(arr): Returns the maximum sum of contiguous subarray. :param arr: List of integers :return: An integer representing the maximum sum of contiguous subarray :raises ValueError: If the input list is empty if not arr: raise ValueError(\\"The input list cannot be empty.\\") max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function that takes a list of integers and returns the second largest integer. If the list contains less than two distinct integers, return None. For example: ```python def second_largest(nums): # Your code here # Example usage: print(second_largest([6, 2, 9, 6, 1])) # Should return 6 print(second_largest([3, 3, 3])) # Should return None print(second_largest([4])) # Should return None print(second_largest([7, 7, 7, 5, 5])) # Should return 5 ```","solution":"def second_largest(nums): Returns the second largest unique integer in the list. If the list contains less than two distinct integers, returns None. unique_nums = set(nums) if len(unique_nums) < 2: return None sorted_nums = sorted(unique_nums, reverse=True) return sorted_nums[1] # Example usage: # print(second_largest([6, 2, 9, 6, 1])) # Should return 6 # print(second_largest([3, 3, 3])) # Should return None # print(second_largest([4])) # Should return None # print(second_largest([7, 7, 7, 5, 5])) # Should return 5"},{"question":"A company needs to keep track of all the unique IP addresses that access its server each day. You have a list of IP addresses from one day, where some addresses may appear multiple times. Write a function that takes this list and returns the count of unique IP addresses. Example Input: [\'192.168.1.1\', \'192.168.1.2\', \'192.168.1.1\', \'192.168.1.3\', \'192.168.1.2\'] Example Output: 3","solution":"def count_unique_ips(ip_list): Returns the count of unique IP addresses in the list. return len(set(ip_list))"},{"question":"Write a function in Python that accepts a string and returns the first non-repeated character in the string. In case all characters are repeated, the function should return `None`. **Constraints:** - The input string will only contain alphabetic characters (both uppercase and lowercase). - The function should be case-sensitive, meaning \'a\' and \'A\' are considered different characters. **Example:** ```python first_non_repeated(\\"stress\\") -> \'t\' first_non_repeated(\\"sTreSs\\") -> \'T\' first_non_repeated(\\"aabbcc\\") -> None ``` **Function Signature:** ```python def first_non_repeated(string: str) -> str: # Your code here ```","solution":"def first_non_repeated(string: str) -> str: from collections import Counter # Create a counter object to count occurrences of each character char_count = Counter(string) # Find the first character that appears only once in the string for char in string: if char_count[char] == 1: return char return None"},{"question":"Write a function in Python that takes a string as input and returns a new string with the characters reversed. For example, if the input string is \\"hello\\", the function should return \\"olleh\\".","solution":"def reverse_string(s): Returns the input string with its characters reversed. Parameters: s (str): The input string. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a function in Python to perform matrix multiplication. Your function should take two matrices (represented as 2D lists) as input and return their product. If the matrices cannot be multiplied (i.e., if the number of columns in the first matrix is not equal to the number of rows in the second matrix), your function should raise a `ValueError`. # Input - Two 2D lists `A` and `B` representing the matrices. # Output - A 2D list representing the product of the matrices. # Example ```python A = [ [1, 2, 3], [4, 5, 6] ] B = [ [7, 8], [9, 10], [11, 12] ] matrix_multiplication(A, B) ``` Expected Output ```python [ [58, 64], [139, 154] ] ``` # Constraints - You can assume that elements within the matrices are integers. - The dimensions of the matrices will be within a reasonable range, such as 1x1 to 100x100. # Function Signature ```python def matrix_multiplication(A: List[List[int]], B: List[List[int]]) -> List[List[int]]: pass ```","solution":"from typing import List def matrix_multiplication(A: List[List[int]], B: List[List[int]]) -> List[List[int]]: Multiplies two matrices A and B and returns the result matrix. Args: A (List[List[int]]): First matrix. B (List[List[int]]): Second matrix. Returns: List[List[int]]: The resulting matrix after multiplication. Raises: ValueError: If the number of columns in A is not equal to the number of rows in B. # Number of rows in A rows_A = len(A) # Number of columns in A cols_A = len(A[0]) # Number of rows in B rows_B = len(B) # Number of columns in B cols_B = len(B[0]) # Ensure the matrices can be multiplied if cols_A != rows_B: raise ValueError(\\"The number of columns in the first matrix must be equal to the number of rows in the second matrix.\\") # Initialize the result matrix with zeros result = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform the matrix multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): # or equivalently range(rows_B) result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Design a Python class called `InventoryManager` that manages an inventory of products for a small business. The class should allow the user to: 1. Add a new product to the inventory. Each product should have the following attributes: ID (unique), name, quantity, and price. 2. Update the quantity and price of an existing product. 3. Retrieve information about a specific product given its ID. 4. Remove a product from the inventory. 5. Generate a summary of the inventory, listing all products with their details. Ensure proper error handling is in place to manage cases where a product ID does not exist during retrieval, updating, or removal. Include relevant comments in the code to make it easy to understand. Use appropriate data structures to store and manage the inventory.","solution":"class InventoryManager: def __init__(self): self.inventory = {} def add_product(self, product_id, name, quantity, price): if product_id in self.inventory: raise ValueError(\\"Product ID already exists\\") self.inventory[product_id] = {\\"name\\": name, \\"quantity\\": quantity, \\"price\\": price} def update_product(self, product_id, quantity=None, price=None): if product_id not in self.inventory: raise ValueError(\\"Product ID does not exist\\") if quantity is not None: self.inventory[product_id][\\"quantity\\"] = quantity if price is not None: self.inventory[product_id][\\"price\\"] = price def get_product(self, product_id): if product_id not in self.inventory: raise ValueError(\\"Product ID does not exist\\") return self.inventory[product_id] def remove_product(self, product_id): if product_id not in self.inventory: raise ValueError(\\"Product ID does not exist\\") del self.inventory[product_id] def generate_summary(self): return self.inventory"},{"question":"Given an array of integers, write a function MoveZeroes() that moves all the zeros to the end of the array while maintaining the relative order of the non-zero elements. Example 1: Input: [0, 1, 0, 3, 12] Output: [1, 3, 12, 0, 0] Example 2: Input: [1, 0, 2, 0, 4] Output: [1, 2, 4, 0, 0] Example 3: Input: [0, 0, 0, 0, 1] Output: [1, 0, 0, 0, 0] Example 4: Input: [4, 2, 4, 0, 0] Output: [4, 2, 4, 0, 0] Note: 1. You must do this in-place without making a copy of the array. 2. Minimize the total number of operations.","solution":"def move_zeroes(nums): Moves all zeros in the list `nums` to the end while maintaining the order of non-zero elements. Parameters: nums (list): The list of integers. Returns: None: The function modifies the input list in-place. # Index to place the next non-zero element place_index = 0 # Traverse the list and move the non-zero elements to the front for num in nums: if num != 0: nums[place_index] = num place_index += 1 # Fill the remaining positions with zeros for i in range(place_index, len(nums)): nums[i] = 0"},{"question":"Design a function that takes a list of mixed data types and returns a new list where only the numeric values (integers and floats) are retained. The function should maintain the original order of appearance of the numeric values from the input list. If there are no numeric values, it should return an empty list. Examples: - Input: [1, \\"apple\\", 2.5, \\"orange\\", 3, \\"banana\\"] Output: [1, 2.5, 3] - Input: [\\"a\\", \\"b\\", \\"c\\"] Output: []","solution":"def filter_numbers(input_list): Filters out non-numeric values from the input list and returns a list containing only the numeric values (integers and floats), preserving their original order. return [item for item in input_list if isinstance(item, (int, float))]"},{"question":"You are tasked with building a simple inventory management system for a small store. The inventory system should keep track of items, their quantities, and prices. Write a program that allows users to add new items, remove items, update item quantities, and calculate the total value of the inventory. The program should handle edge cases such as attempting to remove or update items that do not exist, or adding items with invalid data (e.g., negative quantity or price). Additionally, provide a piece of code that contains an intentional logical error. Ask the candidate to identify and correct this error. This code segment could be related to inventory updates or calculations. For example, the erroneous code snippet could be: ```python inventory = {} def add_item(name, quantity, price): inventory[name] = {\\"quantity\\": quantity, \\"price\\": price} def update_quantity(name, quantity): if name in inventory: inventory[name][\\"quantity\\"] = quantity def total_inventory_value(): total_value = 0 for item in inventory: total_value += item[\\"quantity\\"] * item[\\"price\\"] return total_value add_item(\\"Apple\\", 10, 0.5) update_quantity(\\"Apple\\", 15) print(total_inventory_value()) ``` In this code snippet, the error is in the `total_inventory_value` function where the iteration over `inventory` is incorrectly using `item` as if it were the value dictionary instead of the key.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, name, quantity, price): if quantity < 0 or price < 0: raise ValueError(\\"Quantity and price must be non-negative\\") if name in self.items: self.items[name][\'quantity\'] += quantity self.items[name][\'price\'] = price else: self.items[name] = {\\"quantity\\": quantity, \\"price\\": price} def remove_item(self, name): if name not in self.items: raise KeyError(f\\"Item \'{name}\' not found in inventory\\") del self.items[name] def update_quantity(self, name, quantity): if name not in self.items: raise KeyError(f\\"Item \'{name}\' not found in inventory\\") if quantity < 0: raise ValueError(\\"Quantity must be non-negative\\") self.items[name][\'quantity\'] = quantity def total_inventory_value(self): return sum(item[\'quantity\'] * item[\'price\'] for item in self.items.values())"},{"question":"Write a function that takes a string as input and returns a new string where each character from the original string is followed by its corresponding ASCII value, separated by a hyphen. If the input string is empty, the function should return \\"Empty String\\". Example Input: my_string = \\"abc\\" Example Output: \\"a-97b-98c-99\\" Function Signature: def ascii_hyphen_string(input_str):","solution":"def ascii_hyphen_string(input_str): Returns a new string where each character from the original string is followed by its corresponding ASCII value, separated by a hyphen. If the input string is empty, returns \\"Empty String\\". if not input_str: return \\"Empty String\\" result = \'\'.join([f\\"{char}-{ord(char)}\\" for char in input_str]) return result"},{"question":"Devise a dynamic web application using the Angular framework, and enhance its functionality by integrating Google Cloud\'s machine learning capabilities. This task involves building a user-friendly interface that interacts seamlessly with a backend service to process and analyze data, subsequently displaying real-time results to the user. This end-to-end solution should exemplify a robust understanding of front-end development principles, cloud services integration, and the implementation of AI-driven analytics.","solution":"def dynamic_web_application(frontend_technology, cloud_service, ai_capability): Simulates the integration of a dynamic web application using specified frontend technology, cloud service, and AI capability. Args: frontend_technology (str): The frontend technology used (e.g., Angular). cloud_service (str): The cloud service for backend integration (e.g., Google Cloud). ai_capability (str): The AI capability for processing and analyzing data (e.g., Machine Learning). Returns: str: A string describing the successful integration. if frontend_technology.lower() == \\"angular\\" and cloud_service.lower() == \\"google cloud\\" and ai_capability.lower() == \\"machine learning\\": return \\"Successfully built a dynamic web application using Angular with Google Cloud\'s ML capabilities.\\" else: return \\"Failed to integrate the specified technologies.\\""},{"question":"Write a Python program that includes a function which takes a list of integers as an input. This function should determine the second smallest unique number in the list and return it. If the list has fewer than two unique numbers, the function should return None. The input list for this test is: [4, 3, 2, 3, 4, 1, 2].","solution":"def second_smallest_unique(nums): Returns the second smallest unique number in the list. If the list has fewer than two unique numbers, return None. unique_nums = sorted(set(nums)) if len(unique_nums) < 2: return None return unique_nums[1] # Example input nums = [4, 3, 2, 3, 4, 1, 2] second_smallest_unique(nums)"},{"question":"Write a function to determine the shortest path in a grid that allows movement in all four directions (up, down, left, right). The grid consists of 0s (walkable cells) and 1s (obstacles), and the function should return the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, the function should return -1. Here\'s an example grid: [ [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0] ] For the grid above, the function should output 5, because the shortest path is: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (3,2) -> (3,3).","solution":"from collections import deque def shortest_path(grid): rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(r, c): return 0 <= r < rows and 0 <= c < cols and grid[r][c] == 0 queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == rows - 1 and c == cols - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if is_valid(nr, nc) and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"Context Imagine you work on a project that involves building a basic social media platform. The core functionality includes the ability to create user profiles, follow other users, and post statuses. The company wants to have a robust Python backend with fast, efficient, and scalable operations. Layered Requirements The platform needs to support the following features: ```python [ \\"User registration and login using usernames and passwords\\", \\"Creating user profiles with information such as bio and profile picture\\", \\"Following and unfollowing other users\\", \\"Posting text-based status updates\\", \\"Displaying a feed of status updates from followed users\\" ] ``` User Stories ```python [ \\"As a user, I want to register and log in so that I can use my account\\", \\"As a user, I want to create and update my profile so that others can know about me\\", \\"As a user, I want to follow other users so that I can see their updates\\", \\"As a user, I want to post status updates so that I can share my thoughts\\", \\"As a user, I want to see status updates from users I follow in my feed\\" ] ``` Product Goals The primary objectives include: ```python [ \\"Implementing a secure and scalable backend using Django\\", \\"Designing an efficient database schema to manage user data and relationships\\", \\"Ensuring high performance for critical operations like following users and displaying feeds\\" ] ``` requirement Analysis The key requirement is to provide a user-friendly social media experience through the backend with robust logic to manage user data, connections, and updates efficiently. UI Design Draft The interface should be straightforward with sections for: 1. User Profile Management 2. Following/Unfollowing Users 3. Posting and viewing status updates Python package name ```python \\"social_media_platform\\" ``` File list ```python [ \\"manage.py\\", \\"settings.py\\", \\"urls.py\\", \\"wsgi.py\\", \\"models.py\\", \\"views.py\\", \\"serializers.py\\", \\"forms.py\\", \\"Profile.js\\", \\"Follow.js\\", \\"StatusUpdate.js\\" ] ``` Data structures and interface definitions ```mermaid classDiagram class User { +str username +str password +str email +__init__(username: str, password: str, email: str) } class Profile { +int id +User user +str bio +str profile_picture +__init__(id: int, user: User, bio: str, profile_picture: str) } class Follow { +int id +User follower +User following +__init__(id: int, follower: User, following: User) } class StatusUpdate { +int id +User author +str content +datetime timestamp +__init__(id: int, author: User, content: str, timestamp: datetime) } Profile \\"1\\" -- \\"1\\" User: belongs to Follow \\"1\\" -- \\"1\\" User: follower Follow \\"1\\" -- \\"1\\" User: following StatusUpdate \\"1\\" -- \\"1\\" User: author ``` Implementation approach To implement this platform, we\'ll use Django in the backend for rapid development and clean design. The frontend would be built with React.js for a responsive web application. # Necessary Functionality 1. `User Registration and Authentication` - Implements basic user authentication and session management. 2. `User Profile Management` - Allows users to create and update their profiles. 3. `Follow/Unfollow Mechanism` - Handles user follow and unfollow actions. 4. `Status Posting` - Users can create status updates, and save them in the database. 5. `Feed Display` - Fetches status updates from followed users efficiently. Program Call Flow ```mermaid sequenceDiagram participant U as User participant P as Profile participant F as Follow participant S as StatusUpdate U->>P: create_profile() P->>U: set_profile_info() U->>F: follow_user() F->>U: following_action() U->>S: post_status() S->>F: get_feed_data() F->>S: display_feed() ``` Shared Knowledge ```python The \'models.py\' file defines the essential data models for users, profiles, follows, and statuses. The \'views.py\' file encapsulates the business logic and routes for handling HTTP requests for the core functionalities. The \'serializers.py\' file includes serializers to convert model instances to JSON format and vice versa. The \'Profile.js\', \'Follow.js\', and \'StatusUpdate.js\' files comprise the frontend components for creating user profiles, following others, and posting statuses, respectively. ``` Task list ```python [ \\"models.py\\", \\"views.py\\", \\"serializers.py\\", \\"forms.py\\", \\"Profile.js\\", \\"Follow.js\\", \\"StatusUpdate.js\\" ] ``` ----- Carefully check that you don\'t miss any necessary class/function Code: models.py ```python from django.db import models from django.contrib.auth.models import User class Profile(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE) bio = models.TextField(blank=True) profile_picture = models.ImageField(upload_to=\'profile_pictures/\', blank=True) def __str__(self): return self.user.username class Follow(models.Model): follower = models.ForeignKey(User, related_name=\'following\', on_delete=models.CASCADE) following = models.ForeignKey(User, related_name=\'followers\', on_delete=models.CASCADE) def __str__(self): return f\\"{self.follower} follows {self.following}\\" class StatusUpdate(models.Model): author = models.ForeignKey(User, on_delete=models.CASCADE) content = models.TextField() timestamp = models.DateTimeField(auto_now_add=True) def __str__(self): return f\\"Status by {self.author} at {self.timestamp}\\" ```","solution":"from datetime import datetime # Define user class structure class User: def __init__(self, username, password, email): self.username = username self.password = password self.email = email # Define profile class structure class Profile: def __init__(self, id, user, bio, profile_picture): self.id = id self.user = user self.bio = bio self.profile_picture = profile_picture # Define follow class structure class Follow: def __init__(self, id, follower, following): self.id = id self.follower = follower self.following = following # Define status update class structure class StatusUpdate: def __init__(self, id, author, content, timestamp): self.id = id self.author = author self.content = content self.timestamp = timestamp"},{"question":"You are given an `n x n` grid where each cell has a certain amount of gold. You can start collecting gold from any cell in the first row and keep collecting gold by moving to the right, down-right, or down-left. Write a function that, given an `n x n` grid of integers where each integer represents the amount of gold in that cell, computes the maximum amount of gold you can collect starting from any cell in the first row and ending in any cell in the last row. Function Signature: ```python def max_gold(grid: List[List[int]]) -> int: pass ``` Input: - `grid`: A list of lists of integers of size `n x n` where `1 <= n <= 100`, and each value in the grid is between `0` and `100`. Output: - An integer representing the maximum amount of gold collected. Example: ```python grid = [ [0, 1, 4, 2], [4, 3, 6, 5], [1, 2, 5, 3], [2, 8, 7, 6] ] max_gold(grid) # Output: 23 ```","solution":"from typing import List def max_gold(grid: List[List[int]]) -> int: n = len(grid) # Create a dp array to store the maximum gold collected from each cell to the bottom dp = [[0] * n for _ in range(n)] # Initialize the dp array with the values of the gold in the last row for j in range(n): dp[n-1][j] = grid[n-1][j] # Fill the dp array bottom-up for i in range(n-2, -1, -1): for j in range(n): if j > 0 and j < n-1: dp[i][j] = grid[i][j] + max(dp[i+1][j-1], dp[i+1][j], dp[i+1][j+1]) elif j == 0: dp[i][j] = grid[i][j] + max(dp[i+1][j], dp[i+1][j+1]) else: dp[i][j] = grid[i][j] + max(dp[i+1][j-1], dp[i+1][j]) # The answer is the maximum value in the first row of dp array return max(dp[0])"},{"question":"Write a Python function `longest_common_subsequence` that takes two strings as input and returns their longest common subsequence (LCS). A subsequence is defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Your solution should utilize dynamic programming for an optimal solution. Additionally, provide an analysis of the time and space complexity of your solution. As a bonus, provide an example of inefficient code to solve this problem and explain why it is suboptimal. Then, provide an optimized version and explain the improvements.","solution":"def longest_common_subsequence(s1, s2): Returns the longest common subsequence of s1 and s2 using dynamic programming. # Create a 2D array to store lengths of longest common subsequence dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)] # Fill dp array following the rules of LCS for i in range(1, len(s1) + 1): for j in range(1, len(s2) + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct LCS from dp table i, j = len(s1), len(s2) lcs = [] while i > 0 and j > 0: if s1[i - 1] == s2[j - 1]: lcs.append(s1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return \'\'.join(reversed(lcs)) # Analysis of the time and space complexity: # Time Complexity: O(n * m), where n and m are the lengths of s1 and s2 respectively. # Space Complexity: O(n * m), due to the 2D dp array used for storing LCS lengths."},{"question":"Write a function that takes an integer array and returns the length of the longest contiguous subarray with an equal number of even and odd numbers. The function should be optimized for efficiency and handle arrays of varying lengths, including an edge case where the input array might be empty. The implementation should consider: - Using a data structure to keep track of the count differences efficiently. - Handling varying lengths of subarrays. Here\'s a sample implementation for you to debug and optimize: ```python def longest_subarray(nums): count = 0 max_length = 0 count_map = {0: -1} for i in range(len(nums)): if nums[i] % 2 == 0: count += 1 else: count -= 1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length ``` Create test cases that: - Verify the function with an empty array and arrays of various lengths. - Include arrays where no such subarray can be found. - Ensure edge cases are covered, such as all even or all odd numbers in the array. Example test cases: 1. For an input array [1, 2, 3, 4], the function should return 4. 2. For an input array [1, 1, 1, 2, 2, 2], the function should return 6. 3. For an input array [2, 4, 6, 8], the function should return 0. 4. For an empty array [], the function should return 0.","solution":"def longest_subarray(nums): count = 0 max_length = 0 count_map = {0: -1} for i in range(len(nums)): if nums[i] % 2 == 0: count += 1 else: count -= 1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"Design a Python function that takes a list of integers and returns the list sorted in ascending order but retaining the relative order of negative numbers. For example, given the input list `[8, -6, 7, -5, 2, -9, 1]`, the function should return `[1, -6, 2, -5, 7, -9, 8]`. The negative numbers should appear in their original position, but positive numbers should be sorted. **Function Signature:** ```python def custom_sort(arr: list) -> list: pass ``` **Example:** ```python print(custom_sort([8, -6, 7, -5, 2, -9, 1])) # Output: [1, -6, 2, -5, 7, -9, 8] ```","solution":"def custom_sort(arr: list) -> list: Returns the input list sorted in ascending order but retaining the relative order of negative numbers. # Extract positive numbers and sort them positive_numbers = sorted([x for x in arr if x >= 0]) # Create an iterator for the sorted positive numbers positive_iter = iter(positive_numbers) # Construct the sorted array while retaining the position of negative numbers sorted_arr = [next(positive_iter) if x >= 0 else x for x in arr] return sorted_arr"},{"question":"Write a function that takes a string of lowercase alphabets and returns a new string where each character is replaced by the character occurring `n` positions after it in the alphabet. If a shift moves past \'z\', it should wrap around to \'a\'. For instance, shifting \'z\' by 1 would result in \'a\'. Implement a helper function to handle the shifting logic, ensuring that the function can handle arbitrary positive and negative shifts. input_string = \\"xyz\\" shift_amount = 2","solution":"def shift_character(char, n): Shifts a character by n positions in the alphabet, wrapping around if necessary. :param char: Single lowercase character to be shifted :param n: Number of positions to shift :return: Shifted character new_position = (ord(char) - ord(\'a\') + n) % 26 return chr(ord(\'a\') + new_position) def shift_string(input_string, shift_amount): Shifts each character in the input_string by shift_amount positions in the alphabet. :param input_string: String to be shifted :param shift_amount: Number of positions to shift :return: New shifted string return \'\'.join(shift_character(char, shift_amount) for char in input_string)"},{"question":"Write a function that takes as input a list of integers and returns a dictionary with the mode(s) of the list as keys and their frequencies as values. If there are multiple modes, include all of them in the dictionary. Ensure your function handles negative numbers, zeros, and large inputs efficiently. Additionally, write a few test cases to demonstrate the correctness of your function.","solution":"from collections import Counter def find_modes(numbers): Returns a dictionary with the mode(s) of the list as keys and their frequencies as values. Args: numbers (list of int): List of integers to find the mode(s) from. Returns: dict: A dictionary where keys are the mode(s) and values are their frequencies. if not numbers: return {} # Count the frequency of each number in the list count = Counter(numbers) # Determine the highest frequency max_frequency = max(count.values()) # Create a dictionary with modes and their frequencies modes = {num: freq for num, freq in count.items() if freq == max_frequency} return modes"},{"question":"Given an unsorted list of integers, write a function to find the length of the longest consecutive elements sequence. Your algorithm should run in O(n) complexity. For example, ``` Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. ``` Note: Your solution should account for the scenario where the input list might be empty.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence in the list nums. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Implement a function that simulates a simple online store system. The function should handle adding items to a cart, removing items from the cart, and checking out. Each item is represented as a dictionary with keys \'name\' (str), \'price\' (float), and \'quantity\' (int). The cart itself is a list containing these item dictionaries. When checking out, the function should return the total price of items in the cart, including a 5% sales tax. Write unit tests to validate the functionality of your implementation, ensuring various scenarios such as adding multiple items, removing items, and calculating the checkout total, are thoroughly tested.","solution":"def add_item_to_cart(cart, item): Adds an item to the cart. If the item already exists, update the quantity. for cart_item in cart: if cart_item[\'name\'] == item[\'name\']: cart_item[\'quantity\'] += item[\'quantity\'] return cart.append(item) def remove_item_from_cart(cart, item_name): Removes an item from the cart by name. If the item does not exist, do nothing. for cart_item in cart: if cart_item[\'name\'] == item_name: cart.remove(cart_item) return def checkout(cart): Calculates the total price of items in the cart, including a 5% sales tax. total_before_tax = sum(item[\'price\'] * item[\'quantity\'] for item in cart) total_with_tax = total_before_tax * 1.05 return total_with_tax"},{"question":"Write a function that takes a string consisting of words and numbers separated by spaces, and returns the sum of all the numbers in the string. Each number can be a positive integer, while words will contain only alphabetic characters and do not carry any numerical value. If there are no numbers in the string, return 0. For example, given the input string: `\\"I have 2 apples and 3 bananas\\"` Your function should return 5. Similarly, if the input string is: `\\"There are no numbers here\\"` Your function should return 0. Here is a piece of incorrect code to help you understand the task: ```python def sum_from_string(input_string): total = 0 for element in input_string.split(): if element.isdigit(): total += element return total ``` The above function would give a TypeError. Correct this code to ensure that the function processes the string correctly and sums up the numbers.","solution":"def sum_from_string(input_string): Returns the sum of all numbers in the input string. total = 0 for element in input_string.split(): if element.isdigit(): total += int(element) return total"},{"question":"Given a list of tuples where each tuple represents a flight with the following information: (departure_city, destination_city, departure_time, arrival_time, cost, airline), write a function to find the cheapest flight route from a given departure city to a destination city that consists of one or more connecting flights. The function should return a list of tuples representing the flight route. If two routes have the same cost, return the one with the earliest arrival time. If no route is found, return an empty list. The input to the function should include the list of flights, the departure city, and the destination city. Constraints: 1. Departure and arrival times are given as strings in \'YYYY-MM-DD HH:MM\' format. 2. The cost is a positive float. 3. The function should handle erroneous data entries such as incorrect time formats, negative costs, or missing information. It should raise a ValueError with a descriptive message. 4. The function should efficiently handle cases with multiple flights and cities. Additionally, provide an example of incorrect code that aims to solve the problem but fails due to a common mistake. Analyze the incorrect code, identify the issue, and explain how to correct it. Finally, write unit tests to validate the functionality of your function, ensuring that it handles different scenarios including edge cases and large datasets correctly.","solution":"from datetime import datetime import heapq def parse_time(time_str): Parses a string to a datetime object. return datetime.strptime(time_str, \'%Y-%m-%d %H:%M\') def find_cheapest_route(flights, departure_city, destination_city): Finds the cheapest flight route from departure_city to destination_city. # Validate and preprocess flights information graph = {} for flight in flights: if len(flight) != 6: raise ValueError(\\"Each flight must contain exactly 6 elements.\\") dep_city, dest_city, dep_time, arr_time, cost, airline = flight if cost < 0: raise ValueError(\\"Flight cost cannot be negative.\\") try: dep_time_parsed = parse_time(dep_time) arr_time_parsed = parse_time(arr_time) except ValueError: raise ValueError(\\"Time format must be \'YYYY-MM-DD HH:MM\'.\\") if dep_city not in graph: graph[dep_city] = [] graph[dep_city].append((dest_city, dep_time_parsed, arr_time_parsed, cost, airline)) # Dijkstra\'s algorithm to find the shortest path by cost pq = [(0, departure_city, [], datetime.min)] # (total_cost, current_city, path, arrival_time) visited = set() while pq: total_cost, current_city, path, last_arrival = heapq.heappop(pq) if current_city in visited: continue visited.add(current_city) path = path + [(current_city, total_cost)] if current_city == destination_city: return path[1:] # exclude the start point for neighbor in graph.get(current_city, []): dest_city, dep_time, arr_time, cost, airline = neighbor if dep_time >= last_arrival: # Ensure valid connection heapq.heappush(pq, (total_cost + cost, dest_city, path, arr_time)) return [] def incorrect_find_cheapest_route(flights, departure_city, destination_city): # This code fails because it doesn\'t handle checking connection times properly routes = [] for flight in flights: if flight[0] == departure_city: current_route = [flight] current_city = flight[1] current_cost = flight[4] for next_flight in flights: if next_flight[0] == current_city and next_flight[2] > flight[3]: current_route.append(next_flight) current_city = next_flight[1] current_cost += next_flight[4] if current_city == destination_city: routes.append((current_route, current_cost)) if routes: # Choose the cheapest one or the one that arrives earliest if cost is the same routes.sort(key=lambda x: (x[1], x[0][-1][3])) return [f for f in routes[0][0]] return []"},{"question":"Given an array of integers and a target sum, write a function to determine if there exist three elements in the array such that their sum is equal to the target sum. If such a triplet exists, return `True`; otherwise, return `False`. Consider the array: [12, 3, 4, 1, 6, 9] and the target sum of 24. Input: array = [12, 3, 4, 1, 6, 9], target sum = 24 Output: True Explanation: There is a triplet (12, 3, 9) in the array whose sum is 24. Constraints: - The array length `n` will be between 3 and 10^3 inclusive. - Each element in the array will be an integer between -10^5 and 10^5 inclusive.","solution":"def find_triplet_with_sum(arr, target_sum): Determines if there exist three elements in the array such that their sum is equal to the target sum. Returns True if such a triplet exists, otherwise False. arr.sort() n = len(arr) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target_sum: return True elif current_sum < target_sum: left += 1 else: right -= 1 return False"},{"question":"Write a Python function that takes a list of integers and returns the product of all the elements in the list except the element at the current position. For example, given the list `[1, 2, 3, 4]`, the function should return `[24, 12, 8, 6]`. You should not use division in your solution.","solution":"def product_except_self(nums): Returns a list of the product of all elements except the one at the current position. length = len(nums) if length == 0: return [] left_products = [1] * length right_products = [1] * length output = [1] * length # Calculate left products for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Calculate right products for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Calculate output array for i in range(length): output[i] = left_products[i] * right_products[i] return output"},{"question":"Create a function that reorganizes a given string such that no two adjacent characters are the same. If such an arrangement is not possible, return an empty string. def reorganize_string(s): Rearrange the characters of a given string s so that no two adjacent characters are the same. If it is not possible to rearrange the string in such a way, return an empty string. The function should be efficient and handle edge cases. Example: >>> reorganize_string(\\"aab\\") == \\"aba\\" >>> reorganize_string(\\"aaab\\") == \\"\\" >>> reorganize_string(\\"a\\") == \\"a\\" >>> reorganize_string(\\"aabb\\") == \\"abab\\" # your code here","solution":"from collections import Counter import heapq def reorganize_string(s): Rearrange the characters of a given string s so that no two adjacent characters are the same. If it is not possible to rearrange the string in such a way, return an empty string. The function should be efficient and handle edge cases. Example: >>> reorganize_string(\\"aab\\") == \\"aba\\" >>> reorganize_string(\\"aaab\\") == \\"\\" >>> reorganize_string(\\"a\\") == \\"a\\" >>> reorganize_string(\\"aabb\\") == \\"abab\\" # Count the frequency of each character in the string counter = Counter(s) # Create a max heap based on the frequency of each character max_heap = [(-count, char) for char, count in counter.items()] heapq.heapify(max_heap) prev_char, prev_count = \'\', 0 result = [] while max_heap or prev_count < 0: if max_heap: count, char = heapq.heappop(max_heap) else: return \\"\\" result.append(char) # After using one occurrence of char count += 1 if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char, prev_count = char, count return \'\'.join(result)"},{"question":"Write a function that accepts a string containing a mix of letters and numbers, and returns a new string where the letters are sorted in ascending order, and the numbers are sorted in descending order, while maintaining their relative positions in the input string. For example: ```python def sort_string(s: str) -> str: # your code here # Example usage: print(sort_string(\\"d2c3b1a4\\")) # Output: \\"a4b3c2d1\\" print(sort_string(\\"g9h8e5f1\\")) # Output: \\"e9f8g5h1\\" ```","solution":"def sort_string(s: str) -> str: # Splitting characters into letters and digits letters = sorted([ch for ch in s if ch.isalpha()]) digits = sorted([ch for ch in s if ch.isdigit()], reverse=True) letters_index = 0 digits_index = 0 sorted_string = \\"\\" for ch in s: if ch.isalpha(): sorted_string += letters[letters_index] letters_index += 1 elif ch.isdigit(): sorted_string += digits[digits_index] digits_index += 1 return sorted_string"},{"question":"Write a function that takes a list of integers and an integer `n`, and returns the `n` largest unique elements from the list in descending order. If the list contains fewer than `n` unique elements, return all the unique elements in descending order. The function should handle cases where the list is empty or `n` is zero by returning an empty list.","solution":"def n_largest_unique_elements(lst, n): Returns the n largest unique elements from the list in descending order. If the list contains fewer than n unique elements, return all unique elements in descending order. If the list is empty or n is zero, return an empty list. if n == 0 or not lst: return [] # Get the unique elements unique_elements = list(set(lst)) # Sort in descending order unique_elements.sort(reverse=True) # Return the first n elements return unique_elements[:n]"},{"question":"Given an array of integers, find and return the length of the longest subarray which contains at most two distinct elements. The solution should be optimized to handle large datasets efficiently, with constraints such as an array size of N up to 10^6. Consider edge cases such as arrays with all identical elements or where the array length is less than 2. arr = [1, 2, 1, 2, 3, 4, 3, 2, 2, 3]","solution":"def length_of_longest_subarray(arr): Returns the length of the longest subarray with at most two distinct elements. :param arr: List[int] - List of integers. :return: int - Length of the longest subarray with at most two distinct elements. if len(arr) < 2: return len(arr) max_length = 0 start = 0 freq_map = {} for end in range(len(arr)): freq_map[arr[end]] = freq_map.get(arr[end], 0) + 1 while len(freq_map) > 2: freq_map[arr[start]] -= 1 if freq_map[arr[start]] == 0: del freq_map[arr[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Imagine you\'re working on a Python project that involves scheduling meetings. Write a function `schedule_meeting(start_time, duration, meetings)` that takes in three parameters: 1. `start_time` (str) – A string representing the starting time of the meeting in \'HH:MM\' 24-hour format. 2. `duration` (int) – The duration of the meeting in minutes. 3. `meetings` (list) – A list of tuples where each tuple contains two strings representing the starting and ending times of already scheduled meetings. The function should return a boolean indicating whether the proposed meeting can be scheduled without overlapping any existing meetings. Example: ```python meetings = [(\\"09:00\\", \\"09:30\\"), (\\"11:00\\", \\"11:30\\"), (\\"13:00\\", \\"13:45\\")] print(schedule_meeting(\\"10:30\\", 30, meetings)) # should return True print(schedule_meeting(\\"11:15\\", 45, meetings)) # should return False ``` # Constraints: - The starting time and ending time of each existing meeting, as well as the proposed meeting time, are all within the same day. - You can assume the input times are all valid and properly formatted. - The `duration` of the meeting to be scheduled will always be a positive integer less than 1440 (the number of minutes in a day). Clarify assumptions if any and provide well-documented code to facilitate understanding.","solution":"from datetime import datetime, timedelta def schedule_meeting(start_time, duration, meetings): Determines if a proposed meeting can be scheduled without overlapping any existing meetings. Args: start_time (str): Starting time of the meeting in \'HH:MM\' 24-hour format. duration (int): Duration of the meeting in minutes. meetings (list): A list of tuples with each tuple containing start and end times of already scheduled meetings. Returns: bool: True if the meeting can be scheduled without overlapping, otherwise False. # Convert the start_time to a datetime object new_meeting_start = datetime.strptime(start_time, \'%H:%M\') new_meeting_end = new_meeting_start + timedelta(minutes=duration) # Iterate through each existing meeting to check for overlaps for meeting_start, meeting_end in meetings: existing_meeting_start = datetime.strptime(meeting_start, \'%H:%M\') existing_meeting_end = datetime.strptime(meeting_end, \'%H:%M\') # Check if there is any overlap if new_meeting_start < existing_meeting_end and existing_meeting_start < new_meeting_end: return False # If no overlaps, return True return True"},{"question":"Given a string containing only lowercase alphabetical characters, write a function to determine the length of the longest substring that can be rearranged to form a palindrome. If there are multiple longest substrings of equal length, any one of them may be returned. Example: Input: \\"abccccdd\\" Output: 7 Explanation: One possible longest substring is \\"dccaccd\\", which can be rearranged to \\"dccaccd\\", a palindrome. Note: The function should handle edge cases such as an empty string, or a string with all identical characters.","solution":"from collections import Counter def longest_palindromic_substring_length(s): Returns the length of the longest substring that can be rearranged to form a palindrome. if not s: return 0 char_count = Counter(s) length = 0 has_odd = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 has_odd = True if has_odd: length += 1 return length"},{"question":"Assess if the given numerical array contains at least one subset of integers summing up to zero. The function should return \'true\' if such a subset exists in the array. For example, given array is `[4, 3, -1, -2, 2]`.","solution":"def has_zero_sum_subset(arr): Checks if there is at least one subset of integers in the given array that sums up to zero. seen_sums = set() current_sum = 0 for num in arr: current_sum += num if current_sum == 0 or current_sum in seen_sums: return True seen_sums.add(current_sum) return False"},{"question":"Write a function that takes a list of integers and returns a new list where each element is the sum of the original element and its immediate neighbors. For elements that do not have both neighbors, treat the missing neighbor as a 0. For example, given the list `[1, 2, 3, 4]`, the function should return `[3, 6, 9, 7]`. The first element (3) is the sum of 1 and its neighbor 2, the second element (6) is the sum of 1, 2, and 3, and so forth.","solution":"def sum_with_neighbors(lst): Returns a new list where each element is the sum of the original element and its immediate neighbors. For elements that do not have both neighbors, treat the missing neighbor as a 0. Parameters: lst (list): A list of integers. Returns: list: A new list with transformed elements. if not lst: return [] n = len(lst) result = [] for i in range(n): left = lst[i-1] if i > 0 else 0 center = lst[i] right = lst[i+1] if i < n-1 else 0 result.append(left + center + right) return result"},{"question":"Write a function that takes a list of integers as input and returns a list of the square of each integer sorted in non-decreasing order. The implementation must have a time complexity of O(n). For example, given the list `[-4, -1, 0, 3, 10]`, the function should return `[0, 1, 9, 16, 100]`.","solution":"def sorted_squares(nums): Returns a list of the squares of each integer in the input list, sorted in non-decreasing order. The function works in O(n) time complexity. n = len(nums) left, right = 0, n - 1 result = [0] * n position = n - 1 while left <= right: left_square = nums[left] ** 2 right_square = nums[right] ** 2 if left_square > right_square: result[position] = left_square left += 1 else: result[position] = right_square right -= 1 position -= 1 return result"},{"question":"Write a Python function that takes a list of tuples where each tuple contains two elements: a string and an integer. The function should return a new list of tuples sorted primarily by the integer in descending order and secondarily by the string in ascending alphabetical order. For example, given the list: list1 = [(\\"pear\\", 3), (\\"apple\\", 4), (\\"banana\\", 2), (\\"apple\\", 2)], the output would be [(\\"apple\\", 4), (\\"pear\\", 3), (\\"apple\\", 2), (\\"banana\\", 2)].","solution":"def sort_tuples(tuples_list): Sorts a list of tuples primarily by the integer in descending order and secondarily by the string in ascending alphabetical order. :param tuples_list: List of tuples where each tuple contains a string and an integer. :return: New sorted list of tuples. return sorted(tuples_list, key=lambda x: (-x[1], x[0]))"},{"question":"Create a function that accepts a list of strings and returns a new list containing only the strings that are palindromes. A palindrome is a string that reads the same forwards and backwards, ignoring case and non-alphanumeric characters. # Sample Function Signature ```python def filter_palindromes(strings: list) -> list: # Your code here ``` # Requirements 1. The function should ignore non-alphanumeric characters when checking if a string is a palindrome. 2. The function should treat uppercase and lowercase letters as equivalent. 3. The function should return the filtered list of palindromes in the same order they appeared in the input list. # Examples ```python input_list = [\\"madam\\", \\"racecar\\", \\"apple\\", \\"Step on no pets\\", \\"Was it a car or a cat I saw\\", \\"No \'x\' in Nixon\\"] output_list = filter_palindromes(input_list) print(output_list) # Output should be [\\"madam\\", \\"racecar\\", \\"Step on no pets\\", \\"Was it a car or a cat I saw\\", \\"No \'x\' in Nixon\\"] ```","solution":"import re def is_palindrome(s: str) -> bool: # Remove non-alphanumeric characters and convert to lowercase clean_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Compare the cleaned string with its reverse return clean_s == clean_s[::-1] def filter_palindromes(strings: list) -> list: return [s for s in strings if is_palindrome(s)]"},{"question":"Design a function that accepts a string containing a mathematical expression and returns the evaluated result. The expression can contain integers, the plus (+) and minus (-) operators, and nested parentheses. Ensure your function handles whitespace and parenthesis correctly. **Example:** ```python evaluate_expression(\\"3 + 5 - ( 2 - ( 3 + 1 ) )\\") ``` **Output:** ```python 10 ``` **Constraints:** 1. The input string will only contain valid characters and well-formed expressions. 2. The expression may include any number of nested parentheses. 3. Do not use Python\'s `eval` function to solve this problem. Instead, parse and evaluate the expression manually.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing integers, \'+\', \'-\', and nested parentheses. def helper(s, index): stack = [] num = 0 sign = 1 while index < len(s): char = s[index] if char.isdigit(): num = num * 10 + int(char) elif char in \\"+-\\": stack.append(sign * num) num = 0 sign = 1 if char == \'+\' else -1 elif char == \'(\': num, index = helper(s, index + 1) elif char == \')\': stack.append(sign * num) return sum(stack), index index += 1 stack.append(sign * num) return sum(stack), index expression = expression.replace(\\" \\", \\"\\") result, _ = helper(expression, 0) return result"},{"question":"Create an algorithm that evaluates the overall integrity of a labyrinthine network graph representing a digital infrastructure\'s communication pathways. Each node in the graph represents a server, while the edges denote active communication links between these servers. The graph may contain cycles and multiple pathways. Your task is to identify and classify servers that are \\"critical nodes\\" – nodes that, if disconnected, would compromise the connectivity of the network, splitting it into multiple disjoint sub-networks. Develop a program that outputs these critical nodes and provides an analysis of the extent to which network connectivity is impacted by their removal. Additionally, ensure your solution can handle varying levels of graph density and size efficiently, incorporating fault-tolerant mechanisms to address potential anomalies in the network data without hampering the core assessment.","solution":"def find_critical_nodes(n, edges): Finds the critical nodes in a network graph. A critical node (or articulation point) is a node which, when removed, splits the graph into multiple disjoint sub-networks. Parameters: n (int): Number of nodes in the graph. edges (List[Tuple[int, int]]): List of edges in the graph where each edge is represented by a tuple of two integers. Returns: List[int]: List of critical nodes. def dfs(node, parent, discovery_time, low_time, visited, time, graph, articulation_points): visited[node] = True discovery_time[node] = low_time[node] = time[0] time[0] += 1 child_count = 0 is_articulation = False for neighbor in graph[node]: if neighbor == parent: continue if not visited[neighbor]: dfs(neighbor, node, discovery_time, low_time, visited, time, graph, articulation_points) child_count += 1 # Check if the subtree rooted at neighbor has a connection back to one of ancestors of node if low_time[neighbor] >= discovery_time[node]: is_articulation = True low_time[node] = min(low_time[node], low_time[neighbor]) else: low_time[node] = min(low_time[node], discovery_time[neighbor]) if (parent == -1 and child_count > 1) or (parent != -1 and is_articulation): articulation_points.add(node) from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) discovery_time = [-1] * n low_time = [-1] * n visited = [False] * n articulation_points = set() time = [0] for i in range(n): if not visited[i]: dfs(i, -1, discovery_time, low_time, visited, time, graph, articulation_points) return sorted(list(articulation_points))"},{"question":"Create a function that accepts a list of dictionaries, each representing an employee with keys \'name\', \'age\', and \'salary\'. The function should return a new list of dictionaries, filtering out employees who are younger than 30 and sorting the remaining ones by their salaries in descending order. If the salary is the same, sort those employees by name in ascending order. Ensure the function handles edge cases gracefully, such as an empty list or dictionaries missing any of the keys. Provide code examples to illustrate the usage of your function.","solution":"def filter_and_sort_employees(employees): This function filters out employees who are younger than 30, and sorts the remaining employees by their salaries in descending order. If salaries are equal, it will sort by employee names in ascending order. Args: - employees: List[Dict[str, Union[str, int]]], a list of dictionaries with keys \'name\', \'age\', and \'salary\'. Returns: - List[Dict[str, Union[str, int]]]: A new list of dictionaries that has been filtered and sorted. if not all(isinstance(emp, dict) and \'name\' in emp and \'age\' in emp and \'salary\' in emp for emp in employees): raise ValueError(\\"All elements must be dictionaries containing \'name\', \'age\', and \'salary\' keys\\") filtered_employees = [emp for emp in employees if emp[\'age\'] >= 30] sorted_employees = sorted(filtered_employees, key=lambda x: (-x[\'salary\'], x[\'name\'])) return sorted_employees"},{"question":"Design a function that iteratively constructs a multipurpose data organization unit, better known as a dictionary. This data structure should map string keys to floating-point values. Populate this dictionary with an assortment of key-value pairs representing the names of fruits (as keys) and their corresponding average weights in grams (as values). Validate the function\'s design by including at least five distinct fruits and their average weights in the final dictionary. Additionally, implement a way to retrieve the average weight when provided with the name of a fruit.","solution":"def create_fruit_weight_dict(): Creates a dictionary mapping fruit names to their average weights in grams. fruit_weights = { \\"apple\\": 182.0, \\"banana\\": 118.0, \\"cherry\\": 8.2, \\"grape\\": 2.4, \\"orange\\": 130.0 } return fruit_weights def get_fruit_weight(fruit_weights, fruit_name): Retrieves the average weight of the given fruit. Parameters: fruit_weights (dict): A dictionary mapping fruit names to their average weights. fruit_name (str): The name of the fruit to get the average weight for. Returns: float: The average weight of the fruit, or None if the fruit is not found. return fruit_weights.get(fruit_name)"},{"question":"Design a system of classes to handle vehicle registration records. Create the following classes: \\"Vehicle\\", \\"Car\\", and \\"Truck\\". The \\"Vehicle\\" class should be the parent class with \\"Car\\" and \\"Truck\\" as subclasses that inherit from it. 1. In the \\"Vehicle\\" class, include attributes for the vehicle\'s make, model, year, and registration number. Also, include methods to display this information and a method to update the registration number. 2. In the \\"Car\\" class, add an attribute for the number of doors. Create methods to get and set the number of doors and to display the car\'s full information (including the inherited attributes). 3. In the \\"Truck\\" class, add an attribute for the cargo capacity. Implement methods to get and set the cargo capacity and to display the truck\'s full information (including the inherited attributes). 4. Demonstrate method overriding by providing a custom implementation of the update registration method in the Car and Truck classes. Ensure to validate that the registration number follows a specific pattern (e.g., a combination of letters and numbers) before updating. 5. Include a polymorphic method in the Vehicle class that can be overridden in the Car and Truck classes to calculate and display the vehicle\'s license fee based on its type and other specific attributes. For example, cars may have a different fee calculation based on the number of doors, while trucks may have a different calculation based on the cargo capacity. 6. Finally, create a test suite with at least three different vehicles, demonstrating adding, updating, and displaying the attributes of each vehicle type. Also, include tests for the overridden methods and any validation checks. Ensure proper encapsulation, error handling, and the use of inheritance and polymorphism principles in your design.","solution":"import re class Vehicle: def __init__(self, make, model, year, registration_number): self.make = make self.model = model self.year = year self.registration_number = registration_number def display_info(self): return f\\"Make: {self.make}, Model: {self.model}, Year: {self.year}, Registration Number: {self.registration_number}\\" def update_registration_number(self, new_registration): if re.match(\\"^[A-Za-z0-9]+\\", new_registration): self.registration_number = new_registration else: raise ValueError(\\"Invalid registration number. It should be a combination of letters and numbers.\\") def calculate_license_fee(self): return \\"Base license fee calculation for generic vehicle.\\" class Car(Vehicle): def __init__(self, make, model, year, registration_number, number_of_doors): super().__init__(make, model, year, registration_number) self.number_of_doors = number_of_doors def get_number_of_doors(self): return self.number_of_doors def set_number_of_doors(self, number_of_doors): self.number_of_doors = number_of_doors def display_info(self): info = super().display_info() return f\\"{info}, Number of doors: {self.number_of_doors}\\" def update_registration_number(self, new_registration): if len(new_registration) < 8: raise ValueError(\\"Car registration number must be at least 8 characters long.\\") super().update_registration_number(new_registration) def calculate_license_fee(self): return f\\"License fee for car: {50 + (self.number_of_doors * 10)}\\" class Truck(Vehicle): def __init__(self, make, model, year, registration_number, cargo_capacity): super().__init__(make, model, year, registration_number) self.cargo_capacity = cargo_capacity def get_cargo_capacity(self): return self.cargo_capacity def set_cargo_capacity(self, cargo_capacity): self.cargo_capacity = cargo_capacity def display_info(self): info = super().display_info() return f\\"{info}, Cargo capacity: {self.cargo_capacity}kg\\" def update_registration_number(self, new_registration): if not new_registration.startswith(\\"TRK\\"): raise ValueError(\\"Truck registration number must start with \'TRK\'.\\") super().update_registration_number(new_registration) def calculate_license_fee(self): return f\\"License fee for truck: {100 + (self.cargo_capacity * 0.1)}\\""},{"question":"Design a function that receives a list of positive integers as input and returns the sum of all prime numbers contained in the list. If the list is empty or contains no prime numbers, the function should return 0. Additionally, the function should handle invalid inputs, such as lists containing non-integer elements, by raising an appropriate error message. To optimize for efficiency, ensure the implementation has a time complexity no worse than O(n * sqrt(m)), where n is the number of elements in the list and m is the maximum number in the list.","solution":"import math def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(math.sqrt(num)) + 1, 2): if num % i == 0: return False return True def sum_of_primes(numbers): Returns the sum of all prime numbers in the provided list of positive integers. If the list is empty or contains no prime numbers, returns 0. Raises a ValueError if the input list contains non-integer elements. if not isinstance(numbers, list): raise ValueError(\\"Input should be a list.\\") for num in numbers: if not isinstance(num, int) or num < 0: raise ValueError(\\"Input list should only contain positive integers.\\") return sum(num for num in numbers if is_prime(num))"},{"question":"**Write a function in Python that takes a list of integers and returns a new list containing only the prime numbers from the original list.** Function Signature: ```python def filter_primes(numbers: list[int]) -> list[int]: pass ``` Example ```python numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11] assert filter_primes(numbers) == [2, 3, 5, 7, 11] ``` Instructions - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. - Implement a helper function `is_prime(number: int) -> bool` to check if a number is prime. - Use this helper function within the `filter_primes` function to filter out non-prime numbers from the input list. - The input list will always contain at least one integer and will not exceed 10**5 in length. - Ensure the solution is optimized for large input sizes (O(sqrt(n)) complexity for prime checking).","solution":"def is_prime(number: int) -> bool: Returns True if the number is a prime, else False. if number <= 1: return False if number == 2: return True if number % 2 == 0: return False for i in range(3, int(number**0.5) + 1, 2): if number % i == 0: return False return True def filter_primes(numbers: list[int]) -> list[int]: Filters the list of integers, returning only the prime numbers. return [num for num in numbers if is_prime(num)]"},{"question":"Write a Python function that takes a list of integers and an integer threshold as input, then returns a new list with the integers from the original list that are greater than the given threshold. If no integers in the original list exceed the threshold, return an empty list. Use list comprehension for this implementation.","solution":"def filter_greater_than_threshold(numbers, threshold): Returns a new list with the integers from the original list that are greater than the given threshold. Args: numbers (list of int): List of integers. threshold (int): The threshold value. Returns: list of int: List of integers greater than the threshold. return [num for num in numbers if num > threshold]"},{"question":"Write a function in Python that takes a list of integers as input and returns two lists. The first list includes only the even integers from the input list, and the second list includes only the odd integers. For example, if the input list is [1, 2, 3, 4, 5], the output should be ([2, 4], [1, 3, 5]).","solution":"def separate_even_and_odd(numbers): Takes a list of integers and returns two lists: one containing even integers and the other containing odd integers. evens = [num for num in numbers if num % 2 == 0] odds = [num for num in numbers if num % 2 != 0] return evens, odds"},{"question":"You\'ve been given a string consisting of lowercase alphabets only. Your task is to determine the length of the longest substring without repeating characters. For example, in the string \\"abcabcbb\\", the longest substring without repeating characters is \\"abc\\", which has a length of 3.","solution":"def longest_unique_substtr(string): Returns the length of the longest substring without repeating characters. n = len(string) st = 0 maxlen = 0 start = 0 pos = {} for i in range(n): if string[i] in pos: st = max(st, pos[string[i]] + 1) pos[string[i]] = i maxlen = max(maxlen, i - st + 1) return maxlen"},{"question":"Write a Python function that takes a list of integers and returns a list of all the perfect squares from the input list in ascending order. A perfect square is a number that is the square of an integer. # Constraints - The input list can contain both positive and negative integers. - The input list can have duplicate values. - The input list can be empty. # Example ```python def extract_perfect_squares(lst: list) -> list: // Your code here # Test Cases print(extract_perfect_squares([4, -1, 16, 5, 9, 7, 1])) # Output: [1, 4, 9, 16] print(extract_perfect_squares([-4, 15, 10])) # Output: [] print(extract_perfect_squares([])) # Output: [] print(extract_perfect_squares([100, 36, 25, 49])) # Output: [25, 36, 49, 100] print(extract_perfect_squares([36, 25, 0, 36])) # Output: [0, 25, 36, 36] ```","solution":"import math def extract_perfect_squares(lst): Takes a list of integers and returns a list of all the perfect squares from the input list in ascending order. perfect_squares = [x for x in lst if x >= 0 and math.isqrt(x) ** 2 == x] return sorted(perfect_squares)"},{"question":"A large book repository system needs to manage a collection of books organized by their genres, with each genre having its own shelf. They want to know if they can create a new shelf that can contain a specific subset of books from two or more existing genre shelves ensuring that the following conditions are met: - The new shelf must contain only a complete set of books (each book is assumed to weigh a certain integer grams). - The combined weight of the books on the new shelf should be as close as possible to, but not exceed, 5000 grams. - The books on the new shelf should primarily come from two specified genres with an allowed weight distribution ratio of 3:2. Write a program that determines how many books from each of the two specified genres should be included on the new shelf, ensuring that the combined weight is maximized but does not exceed 5000 grams, while respecting the weight distribution ratio. Your program should take into account the individual weights of each book and the given weight distribution ratio.","solution":"from itertools import combinations def find_optimal_books(genre1, genre2, ratio=(3, 2), max_weight=5000): Determines the optimal subset of books from two genres that maximizes the weight without exceeding a given weight limit, while respecting a given weight distribution ratio. Parameters: genre1 (list): List of integer weights of books in genre 1. genre2 (list): List of integer weights of books in genre 2. ratio (tuple): The allowed weight distribution ratio between genre1 and genre2. max_weight (int): The maximum allowed weight of the new shelf. Returns: tuple: A tuple of two lists containing the weights of the selected books from genre1 and genre2 respectively. def calculate_ratio_subset(genre, ratio_num, subset): return [combo for r in range(len(genre) + 1) for combo in combinations(genre, r) if sum(combo) == subset] target_ratio = max_weight * ratio[0] / sum(ratio) genre1_combos = calculate_ratio_subset(genre1, ratio[0], target_ratio) genre2_combos = calculate_ratio_subset(genre2, ratio[1], max_weight - target_ratio) best_books = ([], []) best_weight = 0 for combo1 in genre1_combos: for combo2 in genre2_combos: current_weight = sum(combo1) + sum(combo2) if current_weight <= max_weight and current_weight > best_weight: best_weight = current_weight best_books = (list(combo1), list(combo2)) return best_books"},{"question":"Write a Python function that takes two linked lists representing two non-negative integers where the digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return the sum as a linked list, also in reverse order. Handle cases where linked lists differ in length and where the sum of the digits results in a carry over.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_two_numbers(l1, l2): Add two numbers represented by linked lists l1 and l2. dummy_head = ListNode(0) current = dummy_head carry = 0 while l1 is not None or l2 is not None: x = l1.val if l1 is not None else 0 y = l2.val if l2 is not None else 0 total = carry + x + y carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1 is not None: l1 = l1.next if l2 is not None: l2 = l2.next if carry > 0: current.next = ListNode(carry) return dummy_head.next"},{"question":"Write the following Python functions to manage and analyze lists of numbers: 1. A function `generate_random_list(size, lower_bound, upper_bound)` that generates a list of `size` random integers between `lower_bound` and `upper_bound`. 2. A function `filter_odd_numbers(input_list)` that filters out and returns only the odd numbers from the provided list `input_list`. 3. A function `find_max_number(input_list)` that finds and returns the maximum number in the provided list `input_list`. 4. A function `sort_descending(input_list)` that sorts and returns the provided list `input_list` in descending order. The first function is given. The rest of the tasks need to be completed using that as a foundation. Optimize the implementation for performance and ensure edge cases are handled. ```python import random def generate_random_list(size, lower_bound, upper_bound): Generate a list of `size` random integers between `lower_bound` and `upper_bound`. return [random.randint(lower_bound, upper_bound) for _ in range(size)] ```","solution":"import random def generate_random_list(size, lower_bound, upper_bound): Generate a list of `size` random integers between `lower_bound` and `upper_bound`. return [random.randint(lower_bound, upper_bound) for _ in range(size)] def filter_odd_numbers(input_list): Filter out and return only the odd numbers from the provided list `input_list`. return [x for x in input_list if x % 2 != 0] def find_max_number(input_list): Find and return the maximum number in the provided list `input_list`. if not input_list: # handle empty list case return None return max(input_list) def sort_descending(input_list): Sort and return the provided list `input_list` in descending order. return sorted(input_list, reverse=True)"},{"question":"Write a function to find the longest word in a given string. If there are multiple words of the same maximum length, return the first one encountered in the string. input_str = \\"The quick brown fox jumped over the lazy dog\\"","solution":"def longest_word(input_str): Returns the longest word in the given input_str. If multiple words have the same maximum length, the first one encountered is returned. words = input_str.split() max_length = 0 longest = \\"\\" for word in words: if len(word) > max_length: max_length = len(word) longest = word return longest"},{"question":"Write a function that accepts an array of integers and returns the largest product that can be achieved by multiplying three distinct integers from the array. Ensure the function handles both positive and negative numbers effectively. The array will contain at least three integers. The program should also include error handling and validate the input array to meet the minimum requirement. After computing the largest product, extend the function to display all unique triplets that yield this maximum product.","solution":"from typing import List, Tuple def max_product_of_three(nums: List[int]) -> Tuple[int, List[Tuple[int, int, int]]]: Returns the largest product of three distinct integers from the array and all unique triplets that yield this maximum product. if not isinstance(nums, list) or len(nums) < 3: raise ValueError(\\"Input must be a list with at least three integers\\") nums.sort() # Consider two cases: # 1. The largest product is from the three largest values # 2. The largest product is from the two smallest values and the largest value (to handle negative numbers) max1 = nums[-1] * nums[-2] * nums[-3] max2 = nums[0] * nums[1] * nums[-1] max_product = max(max1, max2) # Collecting all unique triplets that yield the maximum product triplets = [] if max_product == max1: triplets.append((nums[-1], nums[-2], nums[-3])) if max_product == max2: triplets.append((nums[0], nums[1], nums[-1])) return max_product, triplets"},{"question":"Sarah is organizing a charity event that includes different games and activities. She plans to have a combination of trivia questions and physical challenges. For every 3 trivia questions, there are 5 physical challenges. If Sarah wants to have a total of 40 activities, how many trivia questions will there be? A) 16 trivia questions B) 18 trivia questions C) 20 trivia questions D) 22 trivia questions","solution":"def calculate_trivia_questions(total_activities): Returns the number of trivia questions based on the given ratio and total activities. # Ratio of trivia questions to physical challenges trivia_ratio = 3 physical_ratio = 5 # Total ratio parts total_ratio_parts = trivia_ratio + physical_ratio # Total number of physical challenges physical_challenges = (total_activities / total_ratio_parts) * physical_ratio # Total number of trivia questions trivia_questions = (total_activities / total_ratio_parts) * trivia_ratio return int(trivia_questions)"},{"question":"Design a Python class named `LibraryBook` with four private attributes: `title`, `author`, `year_published`, and `isbn`. The class should include appropriate default and special constructors, as well as getter and setter methods for all attributes. Furthermore, provide a flawed code snippet that makes use of this class, showcasing at least three significant errors that an evaluator would need to identify and correct. These errors might include incorrect instantiation of the object, improper assignment of attribute values, issues related to encapsulation, or inappropriate method calls. Additionally, the class should override the `__str__` method to provide a string representation of the book, including all its details.","solution":"class LibraryBook: def __init__(self, title=\'\', author=\'\', year_published=0, isbn=\'\'): self.__title = title self.__author = author self.__year_published = year_published self.__isbn = isbn def get_title(self): return self.__title def set_title(self, title): self.__title = title def get_author(self): return self.__author def set_author(self, author): self.__author = author def get_year_published(self): return self.__year_published def set_year_published(self, year_published): self.__year_published = year_published def get_isbn(self): return self.__isbn def set_isbn(self, isbn): self.__isbn = isbn def __str__(self): return f\\"Title: {self.__title}, Author: {self.__author}, Year Published: {self.__year_published}, ISBN: {self.__isbn}\\""},{"question":"Design a Python function that, given a large text file, reads the file line-by-line and calculates the frequency of each word. The function should then output the top 10 most frequent words along with their counts. Ensure the function is optimized for both memory and speed, and handles file reading efficiently.","solution":"def calculate_word_frequency(filepath): Reads a file and calculates the frequency of each word. Returns the top 10 most frequent words with their counts. Arguments: filepath -- string, path to the file to be read Returns: list of tuples -- top 10 most frequent words and their counts from collections import Counter import re word_counter = Counter() # Use \'with\' statement to efficiently handle file opening/closing with open(filepath, \'r\', encoding=\'utf-8\') as file: for line in file: # Use regular expression to extract words and convert them to lower case words = re.findall(r\'bw+b\', line.lower()) word_counter.update(words) # Return the top 10 most common words return word_counter.most_common(10)"},{"question":"Design a Python class to represent a basic text editor with functionalities to type characters, delete characters, move the cursor within the text, and undo the latest operation. The class should support the following methods: - `type(char: str)`: Adds a character at the current cursor position. - `delete()`: Deletes the character at the current cursor position. - `move_cursor(position: int)`: Moves the cursor to the specified position. - `undo()`: Undoes the most recent operation (either insertion, deletion, or cursor movement). The operations for typing, deleting, and moving the cursor should be efficient, and the methods should update the internal state accordingly. Additionally, the text editor should be able to handle a large number of operations and restore its state correctly after multiple undo actions. Implement another method to display the current text and the cursor position.","solution":"class TextEditor: def __init__(self): self.text = [] self.cursor = 0 self.history = [] def type(self, char: str): if len(char) != 1: raise ValueError(\\"Only single characters can be typed.\\") self.history.append((\'type\', char, self.cursor)) self.text.insert(self.cursor, char) self.cursor += 1 def delete(self): if self.cursor > 0: deleted_char = self.text[self.cursor - 1] del self.text[self.cursor - 1] self.history.append((\'delete\', deleted_char, self.cursor)) self.cursor -= 1 def move_cursor(self, position: int): if not (0 <= position <= len(self.text)): raise ValueError(\\"Cursor position out of bounds.\\") self.history.append((\'move\', self.cursor)) self.cursor = position def undo(self): if not self.history: raise RuntimeError(\\"No operations to undo.\\") last_op = self.history.pop() if last_op[0] == \'type\': self.cursor -= 1 del self.text[self.cursor] elif last_op[0] == \'delete\': char, pos = last_op[1], last_op[2] self.text.insert(self.cursor, char) self.cursor += 1 elif last_op[0] == \'move\': self.cursor = last_op[1] def get_text_and_cursor(self): return \'\'.join(self.text), self.cursor"},{"question":"Simulate a basic inventory management system by implementing the \'InventoryManager\' class as outlined below: Create an \'InventoryManager\' class with the following methods to handle a list of products, each represented by a dictionary with \'id\', \'name\', and \'quantity\': 1. `add_product(product)`: Adds a new product to the inventory. If a product with the same \'id\' already exists, update its \'quantity\'. 2. `sell_product(product_id, amount)`: Decreases the \'quantity\' of the product by \'amount\'. If \'amount\' exceeds current quantity, raise an Exception with the message \'Insufficient stock\'. 3. `restock_product(product_id, amount)`: Increases the \'quantity\' of the product by \'amount\'. 4. `inventory_status()`: Returns a list of dictionaries, sorted by \'id\', showing the \'id\', \'name\', and \'quantity\' of each product. Example: ```python inventory = InventoryManager() inventory.add_product({\'id\': 1, \'name\': \'Apples\', \'quantity\': 10}) inventory.add_product({\'id\': 2, \'name\': \'Bananas\', \'quantity\': 5}) inventory.add_product({\'id\': 1, \'name\': \'Apples\', \'quantity\': 5}) # Updates quantity of Apples print(inventory.inventory_status()) # Should output [{\'id\': 1, \'name\': \'Apples\', \'quantity\': 15}, {\'id\': 2, \'name\': \'Bananas\', \'quantity\': 5}] inventory.sell_product(1, 7) print(inventory.inventory_status()) # Should output [{\'id\': 1, \'name\': \'Apples\', \'quantity\': 8}, {\'id\': 2, \'name\': \'Bananas\', \'quantity\': 5}] try: inventory.sell_product(2, 6) except Exception as e: print(e) # Should output \'Insufficient stock\' inventory.restock_product(2, 3) print(inventory.inventory_status()) # Should output [{\'id\': 1, \'name\': \'Apples\', \'quantity\': 8}, {\'id\': 2, \'name\': \'Bananas\', \'quantity\': 8}] ``` Complete the \'InventoryManager\' class with all the necessary method definitions and handling for ensuring the requirements specified are met.","solution":"class InventoryManager: def __init__(self): self.products = {} def add_product(self, product): product_id = product[\'id\'] if product_id in self.products: self.products[product_id][\'quantity\'] += product[\'quantity\'] else: self.products[product_id] = product def sell_product(self, product_id, amount): if product_id not in self.products: raise Exception(\'Product not found\') if self.products[product_id][\'quantity\'] < amount: raise Exception(\'Insufficient stock\') self.products[product_id][\'quantity\'] -= amount def restock_product(self, product_id, amount): if product_id not in self.products: raise Exception(\'Product not found\') self.products[product_id][\'quantity\'] += amount def inventory_status(self): return sorted(self.products.values(), key=lambda x: x[\'id\'])"},{"question":"Write a Python program that reads a text file containing a list of names (one name per line), sorts the names in alphabetical order, and writes the sorted list to a new text file. The program should handle potential errors gracefully, such as the input file not existing or being empty, and provide appropriate messages to the user.","solution":"def sort_names(input_file, output_file): Reads a text file containing names, sorts the names alphabetically, and writes the sorted list to a new text file. Parameters: input_file (str): Path to the input text file containing names. output_file (str): Path to the output text file to write the sorted names. try: with open(input_file, \'r\') as infile: names = infile.read().splitlines() if not names: print(f\\"The file {input_file} is empty.\\") return names.sort() with open(output_file, \'w\') as outfile: for name in names: outfile.write(name + \'n\') print(f\\"Names were successfully sorted and written to {output_file}\\") except FileNotFoundError: print(f\\"The file {input_file} does not exist.\\") except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"Create a Python function that accepts a list of dictionaries, each representing a student\'s record with keys \'name\', \'grades\', and \'attendance\'. The \'grades\' value is a list of integers representing the student\'s grades, and \'attendance\' is an integer representing the percentage of classes attended. Calculate and return a list of students who have an average grade above 75 and attendance above 90%. If no students meet the criteria, return an empty list. The output should be sorted in descending order by the students\' average grades. Each element in the returned list should be a dictionary containing only the \'name\' and the calculated average grade of the qualifying students. Example Input: ```python students = [ {\\"name\\": \\"John\\", \\"grades\\": [85, 90, 92], \\"attendance\\": 95}, {\\"name\\": \\"Jane\\", \\"grades\\": [70, 65, 72], \\"attendance\\": 88}, {\\"name\\": \\"Dave\\", \\"grades\\": [88, 91, 85], \\"attendance\\": 93}, ] ``` Example Output: ```python [{\\"name\\": \\"John\\", \\"average_grade\\": 89.0}, {\\"name\\": \\"Dave\\", \\"average_grade\\": 88.0}] ``` Note: Ensure that the input list is not modified.","solution":"def filter_students(students): Filters students with an average grade above 75 and attendance above 90%, and returns a list of dictionaries with students\' names and their average grades, sorted by average grades in descending order. Parameters: students (list): List of dictionaries representing students\' records. Returns: list: List of dictionaries with keys \'name\' and \'average_grade\' of qualifying students. filtered_students = [] for student in students: avg_grade = sum(student[\'grades\']) / len(student[\'grades\']) if avg_grade > 75 and student[\'attendance\'] > 90: filtered_students.append({ \\"name\\": student[\'name\'], \\"average_grade\\": avg_grade }) # Sort the result list by average grade in descending order filtered_students.sort(key=lambda x: x[\'average_grade\'], reverse=True) return filtered_students"},{"question":"Write a Python function that takes an integer input and generates a list of the Fibonacci sequence with that many elements. Ensure that your function validates the input to be a non-negative integer and gracefully handles erroneous inputs.","solution":"def generate_fibonacci(n): Generates a list of the first n elements in the Fibonacci sequence. Parameters: n (int): The number of elements to generate in the Fibonacci sequence. Returns: list: A list containing the first n elements of the Fibonacci sequence. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input should be a non-negative integer\\") if n == 0: return [] elif n == 1: return [0] fibonacci_sequence = [0, 1] for i in range(2, n): fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2]) return fibonacci_sequence"},{"question":"Design a function that given a list of integers, finds and returns the largest sum of any contiguous subarray. If the list is empty, the function should return 0. Consider the edge cases where the list contains negative numbers and when all elements are negative. Write the function signature, and provide an efficient algorithm to solve the problem.","solution":"def max_subarray_sum(arr): Finds the largest sum of any contiguous subarray. Parameters: arr (list): List of integers Returns: int: The largest sum of any contiguous subarray. Returns 0 if the list is empty. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Design a Python function that takes a string containing a valid mathematical expression (consisting of digits, \'+\', \'-\', \'*\', and \'/\') and returns the evaluated result as a floating-point number. The expression will not contain any whitespace. Handle division by zero by returning a custom error message \\"Division by zero is not allowed.\\" Additionally, provide a method to check for balanced parentheses within the expression, and if the expression is invalid due to unbalanced parentheses, return a custom error message \\"Invalid expression: unbalanced parentheses.\\" Ensure to handle invalid inputs and edge cases appropriately. ```python def evaluate_expression(expression): def is_balanced(expression): stack = [] for char in expression: if char == \'(\': stack.append(char) elif char == \')\': if not stack or stack[-1] != \'(\': return False stack.pop() return not stack if not is_balanced(expression): return \\"Invalid expression: unbalanced parentheses\\" try: result = eval(expression) if isinstance(result, (int, float)): return float(result) except ZeroDivisionError: return \\"Division by zero is not allowed\\" except: return \\"Invalid expression\\" return \\"Invalid expression\\" # Examples: # evaluate_expression(\\"3+5*2\\") should return 13.0 # evaluate_expression(\\"10/(2+3)\\") should return 2.0 # evaluate_expression(\\"10/0\\") should return \\"Division by zero is not allowed\\" # evaluate_expression(\\"(3+5\\") should return \\"Invalid expression: unbalanced parentheses\\" ```","solution":"def evaluate_expression(expression): def is_balanced(expression): stack = [] for char in expression: if char == \'(\': stack.append(char) elif char == \')\': if not stack or stack[-1] != \'(\': return False stack.pop() return not stack if not is_balanced(expression): return \\"Invalid expression: unbalanced parentheses\\" try: result = eval(expression) if isinstance(result, (int, float)): return float(result) except ZeroDivisionError: return \\"Division by zero is not allowed\\" except: return \\"Invalid expression\\" return \\"Invalid expression\\""},{"question":"Suppose we have a sequence of integers called a \\"magic sequence\\" which is defined with the following properties: 1. A \\"magic sequence\\" of length ( n ) consists of integers ( a_1, a_2, ldots, a_n ). 2. Each element ( a_i ) in the sequence must satisfy ( 1 leq a_i leq n ). 3. For every integer ( k ) such that ( 1 leq k leq n ), there exist exactly ( k ) occurrences of some integer in the subsequence ( a_1, a_2, ldots, a_k ). For example, the sequences of length 3 that are \\"magic sequences\\" are: - [1, 2, 3] - [1, 3, 2] - [2, 1, 3] - [2, 3, 1] - [3, 1, 2] - [3, 2, 1] Notice that each sequence of different lengths has a different set of \\"magic sequences\\". Write a function to compute the number of different \\"magic sequences\\" of length ( n ). **Function Signature:** `def count_magic_sequences(n: int) -> int:` **Input:** - ( n ) (a single integer, ( 1 leq n leq 10^5 )) **Output:** - The function should return the number of different \\"magic sequences\\" of length ( n ). **Example:** - `count_magic_sequences(3)` should return 6. Develop the function to compute this value efficiently considering the constraints.","solution":"def count_magic_sequences(n: int) -> int: Returns the number of different \\"magic sequences\\" of length n. Explanation: The number of \\"magic sequences\\" of length n corresponds to the number of permutations of a sequence of length n, which is n!. from math import factorial return factorial(n)"},{"question":"Design a function in Python that reads a text file and returns the top N most frequent words in the file. The function should ignore case, punctuation, and handle ties by returning all words that have the same frequency as the Nth word. Use appropriate data structures and libraries to ensure efficiency. Provide an example demonstrating how the function works with a sample text file.","solution":"import re from collections import Counter from typing import List def get_top_n_words(filename: str, N: int) -> List[str]: Reads a text file and returns the top N most frequent words, ignoring case and punctuation. Handles ties by returning all words that have the same frequency as the Nth word. :param filename: Path to the text file :param N: Number of top frequent words to return :return: List of top N frequent words with open(filename, \'r\') as file: text = file.read().lower() words = re.findall(r\'bw+b\', text) word_counts = Counter(words) most_common = word_counts.most_common() if N == 0: return [] # Get the frequency of the Nth word Nth_frequency = most_common[N-1][1] if N <= len(most_common) else 0 # Collect words that have at least the frequency of the Nth word result = [word for word, count in most_common if count >= Nth_frequency] return result"},{"question":"Write a Python function that takes a list of strings and returns a new list with duplicates removed, preserving the original order of elements. For example, given the input list [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"pear\\"], the function should return [\\"apple\\", \\"banana\\", \\"orange\\", \\"pear\\"].","solution":"def remove_duplicates(input_list): Returns a new list with duplicates removed, preserving the original order of elements. seen = set() output_list = [] for item in input_list: if item not in seen: seen.add(item) output_list.append(item) return output_list"},{"question":"The following code finds the first missing positive integer in an unsorted array. There are logical and syntax errors in the given implementation. Identify and correct the errors. ```python def findMissingPositive(nums): n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for j in range(n): if nums[j] =! j + 1: return j + 1 return n + 1 # Example usage arr = [3, 4, -1, 1] print(finMissingPositive(arr)) # Expected output: 2 ``` --- # Instructions: Correct the code and provide a revised version that works as intended. The code should find the smallest positive integer missing from the array. Ensure your solution handles edge cases such as empty arrays and arrays with all negative numbers or zeros.","solution":"def findMissingPositive(nums): n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for j in range(n): if nums[j] != j + 1: return j + 1 return n + 1 # Example usage arr = [3, 4, -1, 1] print(findMissingPositive(arr)) # Expected output: 2"},{"question":"Design a sorting algorithm Given a list of tuples containing the name and scores of students, write a function that sorts the list based on the scores in descending order. If two students have the same score, they should be sorted alphabetically by their name. Implement the following function: ```python def sort_students(student_scores): pass ``` # Input - A list of tuples, where each tuple contains a string (the student\'s name) and an integer (the student\'s score). # Output - A list of tuples sorted first by the score in descending order and then by the name alphabetically. # Constraints - The list will contain at least one student. - Student names are unique. - Example input list: [(\'Alice\', 88), (\'Bob\', 95), (\'Charlie\', 88), (\'David\', 95)] # Example ```python input_list = [(\'Alice\', 88), (\'Bob\', 95), (\'Charlie\', 88), (\'David\', 95)] output_list = sort_students(input_list) # Output should be: [(\'Bob\', 95), (\'David\', 95), (\'Alice\', 88), (\'Charlie\', 88)] ``` Write the function `sort_students` which sorts the given list of tuples as described.","solution":"def sort_students(student_scores): Sorts the list of student scores first by score in descending order and then by name alphabetically if scores are the same. Args: student_scores (list of tuple): A list where each tuple contains a student\'s name (str) and score (int). Returns: list of tuple: The sorted list of student scores. # Sort primarily by score in descending order and secondarily by name in ascending order return sorted(student_scores, key=lambda student: (-student[1], student[0]))"},{"question":"寫一個函數，計算並返回給定字串中每個字符出現的次數。 例子： 輸入: \\"hello world\\" 輸出: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \' \': 1, \'w\': 1, \'r\': 1, \'d\': 1}","solution":"def character_count(s): Returns a dictionary with the count of each character in the input string s. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Given a sorted array of distinct integers, write a function `findClosestElements(arr, k, x)` which returns the `k` closest integers to `x` in the array. The result should also be sorted in ascending order. If there is a tie between elements, prioritize the smaller element. Function Signature: `def findClosestElements(arr: List[int], k: int, x: int) -> List[int]:` # Input: - `arr`: List of distinct integers sorted in ascending order. - `k`: An integer representing the number of closest elements to find. - `x`: An integer to compare the closeness of elements from the array. # Output: - A list of `k` integers representing the `k` closest elements to `x` from the array sorted in ascending order. # Example: ```python findClosestElements([1, 2, 3, 4, 5], 4, 3) # returns [1, 2, 3, 4] findClosestElements([1, 2, 3, 4, 5], 4, -1) # returns [1, 2, 3, 4] ```","solution":"from typing import List def findClosestElements(arr: List[int], k: int, x: int) -> List[int]: Returns the k closest integers to x in the array arr. The resulting list is sorted in ascending order. left, right = 0, len(arr) - k while left < right: mid = (left + right) // 2 if x - arr[mid] > arr[mid + k] - x: left = mid + 1 else: right = mid return arr[left:left + k]"},{"question":"Given a list of strings where each string may represent a sentence or a single word, design a program that finds the frequency of each unique word across all strings, disregarding letter casing and punctuation. Words in a string are separated by spaces, and punctuation includes characters such as commas, periods, exclamation marks, and question marks which should be removed. The result should be a dictionary where the keys are words and the values are their frequencies. Example: [\\"Hello world!\\", \\"This is a test.\\", \\"Hello, test world?\\", \\"world, hello...\\"] Output: {\'hello\': 3, \'world\': 3, \'this\': 1, \'is\': 1, \'a\': 1, \'test\': 2}","solution":"import re from collections import Counter def word_frequencies(strings): Takes a list of strings and returns a dictionary with the frequency of each word, disregarding letter casing and punctuation. combined_string = \' \'.join(strings) # Remove punctuation and lower the case of all words cleaned_string = re.sub(r\'[^ws]\', \'\', combined_string).lower() words = cleaned_string.split() # Count the frequencies of each word frequency = Counter(words) return dict(frequency)"},{"question":"Write a function `is_palindrome` that checks whether a given word is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). The function should return `True` if the word is a palindrome, and `False` otherwise. Add a set of test cases to ensure the function works for different inputs, such as \\"racecar\\", \\"level\\", and \\"hello\\".","solution":"def is_palindrome(word): Checks whether a given word is a palindrome. :param word: A string to check. :return: True if the word is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_word = \'\'.join(char.lower() for char in word if char.isalnum()) # Check if cleaned_word reads the same forward and backward return cleaned_word == cleaned_word[::-1]"},{"question":"Develop a Python program that reads a list of integers from the user input and then employs a custom function to determine the mean (average) of these numbers. The program should then output the calculated mean. Ensure that the function handles cases where the list might be empty by returning a suitable message.","solution":"def calculate_mean(numbers): Returns the mean (average) of a list of numbers. If the list is empty, returns a message stating that the list is empty. if not numbers: return \\"The list is empty, cannot calculate the mean.\\" return sum(numbers) / len(numbers) def read_numbers_from_input(input_string): Converts a string of space-separated numbers into a list of integers. return [int(num) for num in input_string.split()] def main(input_string): numbers = read_numbers_from_input(input_string) mean = calculate_mean(numbers) return mean if __name__ == \\"__main__\\": input_string = input(\\"Enter a list of integers separated by spaces: \\") result = main(input_string) print(result)"},{"question":"Given an integer array `arr` representing the positions of students in a line, where each element is the height of a student, write a function that rearranges the students into a \\"wave\\" pattern. In the wave pattern, the heights should alternate between a local maximum, local minimum, local maximum, etc. Specifically, for any even index `i`, `arr[i]` should be greater than or equal to both its neighboring elements (if they exist), and for any odd index `i`, `arr[i]` should be less than or equal to both its neighboring elements (if they exist). Here\'s the function signature: ```python def wave_pattern(arr): # your implementation here ``` # Input - An integer array `arr` of length `n` (1 ≤ n ≤ 10^5), where each element is an integer representing the height of a student. # Output - Modify the input array `arr` in-place to represent the \\"wave\\" pattern. # Example ```python arr = [3, 6, 5, 10, 7, 20] wave_pattern(arr) print(arr) # Output could be [3, 6, 5, 10, 7, 20] or [5, 3, 10, 7, 20, 6] or any valid wave pattern ``` # Notes - Multiple valid outputs are possible as long as they satisfy the wave pattern conditions. - You can solve this problem with a time complexity of O(n). - You do not need to return anything since the input array should be modified in place. # Explanation 1. Iterate through the elements of the array, checking every pair of consecutive elements. 2. Adjust the pair elements to ensure the wave pattern is maintained. This requires comparison and swapping if the pattern condition is not satisfied for each pair. 3. Use a single pass with a linear scan to maintain the wave pattern efficiently. # Constraints - Do not use any extra space; modify the input array in place. - The algorithm should complete in linear time, O(n). Write appropriate test cases to validate your solution.","solution":"def wave_pattern(arr): Rearranges the elements of the input array into a wave pattern. For any even index i, arr[i] should be greater than or equal to both its neighboring elements (if they exist), and for any odd index i, arr[i] should be less than or equal to both its neighboring elements (if they exist). Args: arr (list): A list of integers representing the heights of students. Returns: None: Modifies the input array in-place. n = len(arr) for i in range(0, n, 2): if i > 0 and arr[i] < arr[i - 1]: arr[i], arr[i - 1] = arr[i - 1], arr[i] if i < n - 1 and arr[i] < arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i]"},{"question":"Write a function that receives a list of strings and returns a new list containing only the strings that are palindromes. A palindrome is a string that reads the same forward and backward. The order of strings in the returned list should be the same as in the original list. Example: input_list = [\\"radar\\", \\"hello\\", \\"level\\", \\"world\\", \\"madam\\", \\"python\\"] Expected output: [\\"radar\\", \\"level\\", \\"madam\\"]","solution":"def filter_palindromes(strings): Returns a list of strings that are palindromes. Arguments: strings -- a list of strings Returns: A list containing only the strings that are palindromes return [s for s in strings if s == s[::-1]]"},{"question":"Write a function that takes a list of stock prices for a single stock, in chronological order, and returns the maximum profit possible from buying on one day and selling on another. If no profit is possible, return 0. Ensure your function runs in O(n) time complexity. Then, write a set of tests using the unittest framework to verify the correctness of your function. ```python def max_profit(prices): min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit import unittest class TestMaxProfit(unittest.TestCase): def test_no_prices(self): self.assertEqual(max_profit([]), 0) def test_one_price(self): self.assertEqual(max_profit([10]), 0) def test_only_loss(self): self.assertEqual(max_profit([10, 9, 8]), 0) def test_gain(self): self.assertEqual(max_profit([10, 8, 9, 20]), 12) def test_early_buy_late_sell(self): self.assertEqual(max_profit([1, 2, 3, 4, 5]), 4) def test_interleaved(self): self.assertEqual(max_profit([7, 1, 5, 3, 6, 4]), 5) if __name__ == \\"__main__\\": unittest.main() ```","solution":"def max_profit(prices): min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function that analyzes a given dataset of temperatures recorded over a month and determines the longest sequence of consecutive days where the temperature was above a specified threshold. The function should return the starting day and length of this sequence. Dataset: [72, 75, 79, 79, 81, 82, 85, 86, 87, 85, 84, 83, 82, 79, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62] Threshold: 80 Hint: Ensure the counting of the longest sequence of days starts from the correct day index.","solution":"def longest_sequence_above_threshold(temperatures, threshold): Analyzes the dataset of temperatures and determines the longest sequence of consecutive days where the temperature was above the specified threshold. Args: temperatures: List of daily temperatures. threshold: The temperature threshold. Returns: A tuple with the starting day index (0-based) and the length of the longest sequence of consecutive days above the threshold. max_len = 0 current_len = 0 start_index = -1 for i, temp in enumerate(temperatures): if temp > threshold: if current_len == 0: # start of a new sequence start_temp_index = i current_len += 1 else: if current_len > max_len: max_len = current_len start_index = start_temp_index current_len = 0 # Final check in case the longest sequence ends at the last element of the array if current_len > max_len: max_len = current_len start_index = start_temp_index return start_index, max_len # Example usage temperatures = [72, 75, 79, 79, 81, 82, 85, 86, 87, 85, 84, 83, 82, 79, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62] threshold = 80 print(longest_sequence_above_threshold(temperatures, threshold)) # (4, 9)"},{"question":"Create a function in Python that accepts a list of integers and returns a new list where each integer is replaced with the product of all other integers in the original list, excluding the integer at that position. Example: Input: [1, 2, 3, 4] Output: [24, 12, 8, 6]","solution":"def product_excluding_self(nums): Returns a new list where each integer is replaced with the product of all other integers in the original list, excluding the integer at that position. Args: nums (list): List of integers. Returns: list: List of integers after transformation. if not nums: return [] # Step 1: Create prefix and suffix products n = len(nums) prefix_products = [1] * n suffix_products = [1] * n # Calculate prefix products for i in range(1, n): prefix_products[i] = prefix_products[i-1] * nums[i-1] # Calculate suffix products for i in range(n-2, -1, -1): suffix_products[i] = suffix_products[i+1] * nums[i+1] # Step 2: Build the result array result = [1] * n for i in range(n): result[i] = prefix_products[i] * suffix_products[i] return result"},{"question":"Write a Python function to calculate the greatest common divisor (GCD) of two integers using the Euclidean algorithm. Your function should handle any pair of non-negative integers, including zero. Explain how the Euclidean algorithm works and provide test cases that showcase the edge cases (e.g., when either or both integers are zero). ```python def gcd(a: int, b: int) -> int: while b: a, b = b, a % b return a # Explanation: # The Euclidean algorithm works by repeatedly replacing the larger number by the remainder of the division of the two numbers. # Specifically, for two numbers \'a\' and \'b\', we replace \'a\' with \'b\' and \'b\' with \'a % b\' until \'b\' becomes zero. # The non-zero remainder that remains when \'b\' is zero is the GCD of \'a\' and \'b\'. # Test cases print(gcd(48, 18)) # Expected output: 6 print(gcd(101, 10)) # Expected output: 1 print(gcd(0, 5)) # Expected output: 5 print(gcd(8, 0)) # Expected output: 8 print(gcd(0, 0)) # Expected output: 0 ```","solution":"def gcd(a: int, b: int) -> int: Calculate the greatest common divisor of a and b using the Euclidean algorithm. Args: a (int): A non-negative integer. b (int): A non-negative integer. Returns: int: The greatest common divisor of a and b. while b: a, b = b, a % b return a # Explanation: # The Euclidean algorithm works by repeatedly replacing the larger number by the remainder of the division of the two numbers. # Specifically, for two numbers \'a\' and \'b\', we replace \'a\' with \'b\' and \'b\' with \'a % b\' until \'b\' becomes zero. # The non-zero remainder that remains when \'b\' is zero is the GCD of \'a\' and \'b\'."},{"question":"Create a function in Python that accepts a list of integers as its parameter. The function should determine and return the second smallest integer in the list. If the list has fewer than two distinct integers, return None. Avoid using Python\'s built-in sort function for this task. Instead, iterate through the list to find the smallest and second smallest integers.","solution":"def second_smallest(nums): Returns the second smallest integer in the list. If the list has fewer than two distinct integers, return None. if len(nums) < 2: return None first_smallest = second_smallest = float(\'inf\') # Iterate through the list to find the smallest and second smallest integers for num in nums: if num < first_smallest: second_smallest = first_smallest first_smallest = num elif first_smallest < num < second_smallest: second_smallest = num # Check if second_smallest was updated if second_smallest == float(\'inf\'): return None return second_smallest"},{"question":"Given a string consisting of lowercase letters, uppercase letters, and digits, write a Python function to sort the characters in the following order: lowercase letters, uppercase letters, and digits. Each category should also be sorted within itself. For instance, the string \\"d3Cba1A2Bc\\" should be transformed into \\"abcdABCC123\\". The function should return the sorted string. Function Signature: ``` def custom_sort(s: str) -> str: pass ```","solution":"def custom_sort(s: str) -> str: Sorts the given string such that lowercase letters come first, followed by uppercase letters and then digits. Each category is sorted within itself. lower = sorted([char for char in s if char.islower()]) upper = sorted([char for char in s if char.isupper()]) digit = sorted([char for char in s if char.isdigit()]) return \'\'.join(lower + upper + digit)"},{"question":"Write a program to generate the Fibonacci sequence up to a given number `n` and then determine if a specific integer `x` is a part of this sequence. The Fibonacci sequence is characterized by the fact that every number after the first two is the sum of the two preceding ones. The sequence commonly starts with 0 and 1. Your task is to: 1. Generate the Fibonacci sequence up to `n` (inclusive). 2. Check if `x` is an element of the generated Fibonacci sequence. 3. Print \\"Yes\\" if `x` is a part of the sequence, otherwise print \\"No\\". **Function Signature:** ```python def fibonacci_check(n: int, x: int) -> str: # Your code here ``` **Input:** - An integer `n` representing the upper limit of the Fibonacci sequence (0 ≤ n ≤ 10000). - An integer `x` representing the number to be checked within the Fibonacci sequence. **Output:** - A string \\"Yes\\" or \\"No\\" indicating whether `x` is a part of the Fibonacci sequence generated up to `n`. **Example:** ```python # Example 1 n = 21 x = 13 fibonacci_check(n, x) # Output: \\"Yes\\" # Example 2 n = 21 x = 22 fibonacci_check(n, x) # Output: \\"No\\" ```","solution":"def fibonacci_check(n: int, x: int) -> str: Returns \\"Yes\\" if x is an element of the Fibonacci sequence up to n, otherwise returns \\"No\\". # Initialize the first two Fibonacci numbers a, b = 0, 1 # Edge case where x is 0 or 1 if x == 0 or x == 1: return \\"Yes\\" if x <= n else \\"No\\" # Generate Fibonacci sequence up to n while a <= n: if a == x: return \\"Yes\\" a, b = b, a + b return \\"No\\""},{"question":"Write a function that takes a string as an input and checks if it is a valid IPv4 address. An IPv4 address consists of four groups of numbers separated by periods. Each group contains 1 to 3 digits, and the value of each group can range from 0 to 255. The function should return `True` if the input string is a valid IPv4 address, and `False` otherwise. Additionally, create a suite of unit tests to ensure the robust validation of your function.","solution":"def is_valid_ipv4_address(address): Checks if the input string is a valid IPv4 address. An IPv4 address consists of four groups of numbers separated by periods. Each group contains 1 to 3 digits, and the value of each group can range from 0 to 255. Args: address (str): The input string to check. Returns: bool: True if the input string is a valid IPv4 address, False otherwise. parts = address.split(\'.\') if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False num = int(part) if not (0 <= num <= 255): return False if len(part) > 1 and part[0] == \'0\': return False return True"},{"question":"Can you implement a function in Python that reads a large text file and counts the frequency of each word in the file? The function should handle punctuation properly and consider words in a case-insensitive manner. Use an efficient algorithm to ensure the function performs well even for very large text files. **Requirements:** 1. Read the content of the file. 2. Remove punctuation and convert all words to lowercase. 3. Count the frequency of each word. 4. Return the counts as a dictionary where keys are words and values are their frequencies.","solution":"import string from collections import defaultdict def count_word_frequencies(file_path): Counts the frequency of each word in a text file, ignoring punctuation and case. Args: file_path (str): Path to the text file. Returns: dict: A dictionary where keys are words and values are their frequencies. word_freq = defaultdict(int) # Open and read the file with open(file_path, \'r\', encoding=\'utf-8\') as file: for line in file: # Remove punctuation and convert to lowercase line = line.translate(str.maketrans(\'\', \'\', string.punctuation)).lower() words = line.split() # Count each word for word in words: word_freq[word] += 1 return dict(word_freq)"},{"question":"Write a function to find all unique combinations of numbers that sum up to a given target from a list of positive integers. Each number in the list can be used multiple times in the combinations. The combination should be unique and should maintain a non-decreasing order. Ensure your function handles duplicated numbers in the list efficiently.","solution":"def combination_sum(candidates, target): Finds all unique combinations of numbers that sum up to a given target. Each number in the candidates list can be used multiple times in the combinations. The combination should be unique and should maintain a non-decreasing order. :param candidates: List of positive integers :param target: Integer target to sum to :return: List of lists, each containing a unique combination of numbers summing to the target def dfs(start, path, target): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(sorted_candidates)): if i > start and sorted_candidates[i] == sorted_candidates[i - 1]: continue # skip duplicates dfs(i, path + [sorted_candidates[i]], target - sorted_candidates[i]) sorted_candidates = sorted(candidates) result = [] dfs(0, [], target) return result"},{"question":"Write a function in Python that simulates a basic bank account. The function should support the following operations: deposit, withdraw, and check balance. Ensure that the withdraw operation does not allow the account balance to go negative. Include appropriate error handling for invalid operations and inputs. Describe how you would approach writing unit tests for this function to ensure its reliability and correctness.","solution":"class BankAccount: def __init__(self): self.balance = 0.0 def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive\\") self.balance += amount def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdraw amount must be positive\\") if amount > self.balance: raise ValueError(\\"Insufficient funds\\") self.balance -= amount def check_balance(self): return self.balance"},{"question":"Implement a function in the programming language of your choice that takes a list of integers and returns a list where each integer is replaced with the next largest integer in the list. If an integer is the largest in the list, it should be replaced with -1. Do not use built-in sorting functions. Explain your approach and justify your algorithm\'s time complexity.","solution":"def replace_with_next_largest(nums): Given a list of integers, replace each element with the next largest integer in the list. If an integer is the largest in the list, replace it with -1. result = [-1] * len(nums) for i in range(len(nums)): next_largest = float(\'inf\') for j in range(len(nums)): if nums[j] > nums[i] and nums[j] < next_largest: next_largest = nums[j] if next_largest != float(\'inf\'): result[i] = next_largest return result"},{"question":"Given an N x N matrix of integers, rotate the matrix 90 degrees clockwise in place. # Constraints - The input matrix will always be non-empty and have equal number of rows and columns (square matrix). - Do not use any additional matrices in your implementation. - The function should modify the matrix in place. # Input - A 2D list representing the N x N matrix. # Output - The matrix modified in place to its 90 degrees rotated version. # Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix_90_degree_clockwise(matrix) # The matrix should be modified to: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ```","solution":"def rotate_matrix_90_degree_clockwise(matrix): Rotates the given N x N matrix 90 degrees clockwise in place. N = len(matrix) # Transpose the matrix for i in range(N): for j in range(i, N): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(N): matrix[i].reverse()"},{"question":"Describe the underlying principles of recursion and provide an example where recursive approach is more suitable than an iterative one. Design and implement a simple recursive function to determine whether a string is a palindrome. Explain your choice of base case and how you ensure termination. Analyze the time and space complexity of your implementation and compare it with a non-recursive approach in terms of efficiency.","solution":"def is_palindrome_recursive(s): Checks if a given string is a palindrome using a recursive approach. Args: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Define the base case: An empty string or a single character string is a palindrome if len(s) <= 1: return True # Check the characters at the beginning and end of the string if s[0] == s[-1]: # Call the function recursively with the substring excluding the checked characters return is_palindrome_recursive(s[1:-1]) # If the characters do not match, it\'s not a palindrome return False"},{"question":"Write a Python function to determine whether a given list of integers can be rearranged to form an arithmetic progression. An arithmetic progression is a sequence of numbers in which the difference between consecutive terms is constant. You should not use any built-in sorting function to solve this problem. Example input: nums = [3, 5, 1] Example output: True # The list can be rearranged as [1, 3, 5], which forms an arithmetic progression with a common difference of 2.","solution":"def can_form_arithmetic_progression(nums): Determine whether a list of integers can be rearranged to form an arithmetic progression. if len(nums) < 2: return True # Manual selection sort for i in range(len(nums)): min_index = i for j in range(i + 1, len(nums)): if nums[j] < nums[min_index]: min_index = j if min_index != i: nums[i], nums[min_index] = nums[min_index], nums[i] common_difference = nums[1] - nums[0] for k in range(2, len(nums)): if nums[k] - nums[k - 1] != common_difference: return False return True"},{"question":"Create a function that takes as input a string representing a student\'s full name in \\"Last, First\\" format and returns it in \\"First Last\\" format. The function should also ensure that the name is properly capitalized, regardless of the input\'s capitalization. For example: - Input: \\"doe, john\\" - Output: \\"John Doe\\" Your task can be further complicated by requiring the candidate to handle erroneous inputs gracefully as follows: - Return an error message if the input does not contain exactly one comma. - Trim any leading or trailing spaces around the names. Here is a piece of erroneous code to debug: ```python def reformat_name(name): parts = name.split(\',\') if len(parts) != 2: return \\"Invalid input\\" first_name = parts[1].strip().lower().capitalize() last_name = parts[0].strip().lower().capitalize() return first_name + \' \' + last_name ``` Identify the errors in the above code and fix them to ensure accurate functionality and proper formatting.","solution":"def reformat_name(name): Reformats a name from \\"Last, First\\" to \\"First Last\\" format and ensures proper capitalization. Returns an error message for invalid input. parts = name.split(\',\') if len(parts) != 2: return \\"Invalid input\\" first_name = parts[1].strip().capitalize() last_name = parts[0].strip().capitalize() return f\\"{first_name} {last_name}\\""},{"question":"Create a function that simulates a simple File System. The file system should support the following operations: - `create(path: str, value: int)` - Creates a new file at the specified path with the given value. If the file already exists, return \\"File already exists.\\" - `get(path: str)` - Retrieves the value of the file at the specified path. If the file does not exist, return \\"File does not exist.\\" - `set(path: str, value: int)` - Updates the value of the file at the specified path. If the file does not exist, return \\"File does not exist.\\" - `delete(path: str)` - Deletes the file at the specified path. If the file does not exist, return \\"File does not exist.\\" Assume paths are always valid strings starting with a forward slash (\'/\'), and no special characters like \'.\' or \'..\' will be used. Each path is unique and does not have hierarchical dependencies (e.g., paths like \'/a/b\' are considered invalid, it should be flat like \'/a\', \'/b\'). The goal is to implement the `FileSystem` class with the above operations. ```python class FileSystem: def __init__(self): self.fs = {} def create(self, path: str, value: int) -> str: Create a new file at the specified path with the given value. If the file already exists, return \\"File already exists.\\" # Your implementation here def get(self, path: str) -> Union[int, str]: Get the value of the file at the specified path. If the file does not exist, return \\"File does not exist.\\" # Your implementation here def set(self, path: str, value: int) -> str: Set the value of the file at the specified path. If the file does not exist, return \\"File does not exist.\\" # Your implementation here def delete(self, path: str) -> str: Delete the file at the specified path. If the file does not exist, return \\"File does not exist.\\" # Your implementation here # Example usage: # fs = FileSystem() # print(fs.create(\'/a\', 1)) # None # print(fs.get(\'/a\')) # 1 # print(fs.set(\'/a\', 2)) # None # print(fs.get(\'/a\')) # 2 # print(fs.create(\'/a\', 3)) # \\"File already exists.\\" # print(fs.delete(\'/a\')) # None # print(fs.get(\'/a\')) # \\"File does not exist.\\" # print(fs.delete(\'/a\')) # \\"File does not exist.\\" ```","solution":"class FileSystem: def __init__(self): self.fs = {} def create(self, path: str, value: int) -> str: Create a new file at the specified path with the given value. If the file already exists, return \\"File already exists.\\" if path in self.fs: return \\"File already exists.\\" self.fs[path] = value def get(self, path: str): Get the value of the file at the specified path. If the file does not exist, return \\"File does not exist.\\" if path not in self.fs: return \\"File does not exist.\\" return self.fs[path] def set(self, path: str, value: int) -> str: Set the value of the file at the specified path. If the file does not exist, return \\"File does not exist.\\" if path not in self.fs: return \\"File does not exist.\\" self.fs[path] = value def delete(self, path: str) -> str: Delete the file at the specified path. If the file does not exist, return \\"File does not exist.\\" if path not in self.fs: return \\"File does not exist.\\" del self.fs[path]"},{"question":"Given a list of integers, write a function to rearrange the elements of the list such that all even numbers are moved to the beginning while maintaining their original order, followed by all the odd numbers also maintaining their original order. For example, given the list: `[3, 1, 2, 4, 7, 6, 9]` The function should return: `[2, 4, 6, 3, 1, 7, 9]` ```python def rearrange_list(lst): # Your code here # Example usage input_list = [3, 1, 2, 4, 7, 6, 9] print(rearrange_list(input_list)) # Output should be [2, 4, 6, 3, 1, 7, 9] ```","solution":"def rearrange_list(lst): Rearrange the elements of the list such that all even numbers are moved to the beginning while maintaining their original order, followed by all the odd numbers also maintaining their original order. evens = [x for x in lst if x % 2 == 0] odds = [x for x in lst if x % 2 != 0] return evens + odds"},{"question":"Write a Python function that takes a list of integers and returns a new list that contains only the prime numbers from the input list. Additionally, your function should return the smallest prime number found in the list. If the input list contains no prime numbers, the function should return an empty list and `None` for the smallest prime number. Ensure that your solution handles edge cases, such as an empty input list or a list that contains no prime numbers. The solution should demonstrate good performance for large input sizes. Also, provide a brief explanation of the time complexity of your solution.","solution":"def is_prime(num): Helper function to determine if a number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def find_primes_and_smallest(nums): Returns a list of prime numbers from the input list and the smallest prime number. :param nums: List of integers. :return: Tuple containing a list of prime numbers and the smallest prime number. If no prime numbers are found, returns an empty list and None. primes = [num for num in nums if is_prime(num)] if primes: return primes, min(primes) else: return [], None # Time Complexity Explanation: # The time complexity of the `is_prime` function is O(sqrt(n)) where n is the number being checked. # The overall time complexity of the `find_primes_and_smallest` function is O(m * sqrt(n)), # where m is the number of elements in the input list and n is the average size of the numbers."},{"question":"Implement a Python function that takes a list of strings and returns a new list that contains only the strings with all unique characters. The strings should be returned in the same order as they appear in the input list. If there are no such strings, return an empty list. Hints: 1. Consider using a set to check for unique characters in a string. 2. The function should be case-sensitive, meaning \'A\' and \'a\' are considered different characters. Examples: ```python def unique_characters_strings(strings): Given a list of strings, return a list of all strings that consist of unique characters. E.g.: >>> unique_characters_strings([\\"hello\\", \\"world\\", \\"python\\", \\"abc\\"]) [\\"world\\", \\"python\\", \\"abc\\"] >>> unique_characters_strings([\\"aaa\\", \\"bbb\\", \\"ccc\\"]) [] >>> unique_characters_strings([\\"\\", \\"xyz\\", \\"test\\", \\"unit\\"]) [\\"\\", \\"xyz\\", \\"unit\\"] # Your code starts here ``` The function should handle edge cases where the input list is empty or contains strings of varying lengths and characters.","solution":"def unique_characters_strings(strings): Given a list of strings, return a list of all strings that consist of unique characters. E.g.: >>> unique_characters_strings([\\"hello\\", \\"world\\", \\"python\\", \\"abc\\"]) [\\"world\\", \\"python\\", \\"abc\\"] >>> unique_characters_strings([\\"aaa\\", \\"bbb\\", \\"ccc\\"]) [] >>> unique_characters_strings([\\"\\", \\"xyz\\", \\"test\\", \\"unit\\"]) [\\"\\", \\"xyz\\", \\"unit\\"] result = [] for s in strings: if len(s) == len(set(s)): result.append(s) return result"},{"question":"Implement a function that checks if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Write a function `is_palindrome(s: str) -> bool` that takes a string `s` as input and returns `True` if `s` is a palindrome and `False` otherwise. Consider only alphanumeric characters and ignore cases. # Example ``` Input: \\"A man, a plan, a canal: Panama\\" Output: True Input: \\"race a car\\" Output: False ```","solution":"import re def is_palindrome(s: str) -> bool: Checks if a given string is a palindrome, ignoring spaces, punctuation, and capitalization. :param s: Input string to be checked. :return: True if the input string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lower case filtered_chars = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the filtered string is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Write a function that, given a string, returns the character that appears the highest number of times. If multiple characters have the highest frequency, return the first one. Ignore case and non-alphabetic characters. Example input: \\"Hello World!\\" Example output: \\"l\\"","solution":"def most_frequent_char(s): Returns the character that appears the highest number of times in the string. If multiple characters have the highest frequency, returns the first one. Ignores case and non-alphabetic characters. from collections import Counter import string # Normalize the string: make it lowercase and filter only alphabetic characters s = \'\'.join(filter(str.isalpha, s.lower())) # Count the frequency of each character counter = Counter(s) # Find the maximum frequency max_freq = max(counter.values(), default=0) # Return the first character with the maximum frequency for char in s: if counter[char] == max_freq: return char return \\"\\""},{"question":"You are given a class representing a binary search tree (BST). Implement three methods: `insert`, `find`, and `find_kth_smallest`: 1. `insert(value: int) -> None`: Insert a value into the BST. 2. `find(value: int) -> bool`: Check if a value exists in the BST. 3. `find_kth_smallest(k: int) -> int`: Return the k-th smallest value in the BST. Assume all input values for `insert` will be unique. For the `find_kth_smallest` method, it is guaranteed that `k` is valid (i.e., `0 < k <= N`, where `N` is the number of elements in the BST). ```python class TreeNode: def __init__(self, value: int): self.value = value self.left = None self.right = None self.count = 1 class BST: def __init__(self): self.root = None def insert(self, value: int) -> None: # Your code here def find(self, value: int) -> bool: # Your code here def find_kth_smallest(self, k: int) -> int: # Your code here ``` Your task is to complete the implementation of these methods based on the descriptions provided.","solution":"class TreeNode: def __init__(self, value: int): self.value = value self.left = None self.right = None self.count = 1 # To keep track of the size of the subtree including this node class BST: def __init__(self): self.root = None def insert(self, value: int) -> None: if not self.root: self.root = TreeNode(value) else: self._insert_recursive(self.root, value) def _insert_recursive(self, node: TreeNode, value: int) -> None: if value < node.value: if not node.left: node.left = TreeNode(value) else: self._insert_recursive(node.left, value) else: if not node.right: node.right = TreeNode(value) else: self._insert_recursive(node.right, value) node.count += 1 def find(self, value: int) -> bool: return self._find_recursive(self.root, value) def _find_recursive(self, node: TreeNode, value: int) -> bool: if not node: return False if node.value == value: return True elif value < node.value: return self._find_recursive(node.left, value) else: return self._find_recursive(node.right, value) def find_kth_smallest(self, k: int) -> int: return self._find_kth_smallest_recursive(self.root, k) def _find_kth_smallest_recursive(self, node: TreeNode, k: int) -> int: left_count = node.left.count if node.left else 0 if k == left_count + 1: return node.value elif k <= left_count: return self._find_kth_smallest_recursive(node.left, k) else: return self._find_kth_smallest_recursive(node.right, k - left_count - 1)"},{"question":"You are given a matrix that contains only `0`s and `1`s. You need to write a function `largest_square(matrix)` that finds the size of the largest square containing only `1`s and returns the area of that square. Input - `matrix`: A two-dimensional list of integers containing only `0`s and `1`s. Output - Return an integer representing the area of the largest square containing only `1`s. Example ```python matrix = [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] print(largest_square(matrix)) # Output: 4 ``` In this example, the largest square containing only `1`s has a size of 2x2, and its area is 4. Note - The function should be efficient enough to handle large matrices. - Consider edge cases such as an empty matrix or a matrix with no `1`s.","solution":"def largest_square(matrix): Returns the area of the largest square containing only 1\'s. if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) dp = [[0] * cols for _ in range(rows)] max_side = 0 for i in range(rows): for j in range(cols): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side ** 2"},{"question":"Design a program that can evaluate arithmetic expressions given as strings and return the result of the expression. The program must support the four basic arithmetic operations: addition (+), subtraction (-), multiplication (*), and division (/), based on their standard order of operations (precedence and associativity). The expressions may also contain parentheses ( ) to define explicit precedence. The input expressions can contain integer and floating point numbers. Your program should handle invalid input expressions gracefully by returning error messages or raising exceptions. Additionally, it must handle edge cases such as division by zero and leading/trailing whitespaces. For instance: ```python def evaluate_expression(expression): # Function to evaluate arithmetic expressions pass # Example test cases: print(evaluate_expression(\\"3+5*2\\")) # Output: 13 print(evaluate_expression(\\"10 + (2 * 5)\\")) # Output: 20 print(evaluate_expression(\\"10 / 2 - 3*2\\")) # Output: -1 print(evaluate_expression(\\"10 + 1.5 * 4 / 2\\")) # Output: 13.0 print(evaluate_expression(\\" 3 + (4 - 1) * 5 \\")) # Output: 18 print(evaluate_expression(\\"(1+(4+5+2)-3)+(6+8)\\"))# Output: 23 print(evaluate_expression(\\"3 / 0\\")) # Output: \\"Error: Division by zero\\" print(evaluate_expression(\\"20 +\\")) # Output: \\"Error: Invalid expression\\" ``` Your task is to implement the `evaluate_expression` function which will correctly parse the input strings and compute the results while managing errors appropriately. Consider enhancing your implementation to use well-defined programming techniques to maintain clarity and robustness.","solution":"def evaluate_expression(expression): def evaluate(tokens): def compute(operators, values): right = values.pop() left = values.pop() operator = operators.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': if right == 0: raise ZeroDivisionError(\\"division by zero\\") values.append(left / right) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue if tokens[i] == \'(\': operators.append(tokens[i]) elif tokens[i].isdigit() or tokens[i] == \'.\': j = i while j < len(tokens) and (tokens[j].isdigit() or tokens[j] == \'.\'): j += 1 values.append(float(tokens[i:j]) if \'.\' in tokens[i:j] else int(tokens[i:j])) i = j - 1 elif tokens[i] == \')\': while operators and operators[-1] != \'(\': compute(operators, values) operators.pop() elif tokens[i] in (\'+\', \'-\', \'*\', \'/\'): while (operators and precedence(operators[-1]) >= precedence(tokens[i])): compute(operators, values) operators.append(tokens[i]) else: return \\"Error: Invalid character in expression\\" i += 1 while operators: compute(operators, values) return values[0] try: return evaluate(expression.strip()) except ZeroDivisionError: return \\"Error: Division by zero\\" except Exception as e: return \\"Error: Invalid expression\\" # Example test cases: print(evaluate_expression(\\"3+5*2\\")) # Output: 13 print(evaluate_expression(\\"10 + (2 * 5)\\")) # Output: 20 print(evaluate_expression(\\"10 / 2 - 3*2\\")) # Output: -1 print(evaluate_expression(\\"10 + 1.5 * 4 / 2\\")) # Output: 13.0 print(evaluate_expression(\\" 3 + (4 - 1) * 5 \\")) # Output: 18 print(evaluate_expression(\\"(1+(4+5+2)-3)+(6+8)\\")) # Output: 23 print(evaluate_expression(\\"3 / 0\\")) # Output: \\"Error: Division by zero\\" print(evaluate_expression(\\"20 +\\")) # Output: \\"Error: Invalid expression\\""},{"question":"Write a function that takes in a string and an integer `n`, and returns a new string where every character in the original string is repeated `n` times. The function should handle both uppercase and lowercase letters, as well as any non-alphabetic characters in the string. Do not use any in-built or library functions for the repetition, rather construct the new string manually. Example: input_string = \\"abc123!\\" n = 3 Output: \\"aaabbbccc111222333!!!\\"","solution":"def repeat_characters(input_string, n): Takes a string and an integer n, and returns a new string where every character in the original string is repeated n times. result = \\"\\" for char in input_string: for _ in range(n): result += char return result"},{"question":"Write a function that takes a list of strings and returns a list of integers representing the lengths of those strings. Use Python\'s built-in functionalities for this task. **Example:** ```python input_list = [\\"apple\\", \\"banana\\", \\"cherry\\"] output = string_lengths(input_list) print(output) # Output should be [5, 6, 6] ```","solution":"def string_lengths(input_list): Takes a list of strings and returns a list of integers representing the lengths of those strings. Parameters: input_list (list): List of strings to measure. Returns: list: List of integers representing lengths of the strings. return [len(s) for s in input_list]"},{"question":"Write a Python function called `find_duplicates` that takes a list of integers as input and returns a list of integers that are duplicates in the input list, maintaining their order of first occurrence. For example, if the input list is `[1, 2, 3, 2, 4, 5, 3]`, the function should return `[2, 3]`. Your solution should not use any built-in functions such as `collections.Counter`. Ensure that your function handles cases where there are no duplicates gracefully by returning an empty list in such scenarios.","solution":"def find_duplicates(nums): Returns a list of integers that are duplicates in the input list, maintaining their order of first occurrence. seen = {} duplicates = [] for num in nums: if num in seen: if seen[num] == 1: duplicates.append(num) seen[num] += 1 else: seen[num] = 1 return duplicates"},{"question":"Write a function that takes a string containing only parentheses characters `(` and `)` and determines if the string is balanced. A string is considered balanced if every opening parenthesis `(` has a corresponding closing parenthesis `)` and they are correctly nested. Implement your solution without using any additional data structures like arrays or stacks. Consider the string `\\"(()())\\"` as an example input, which should return `True` since it is balanced.","solution":"def is_balanced_parentheses(s): Returns True if the parentheses string is balanced, False otherwise. balance = 0 for char in s: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 # At any point, balance should not be negative if balance < 0: return False # The balance should be zero if the string is balanced return balance == 0"},{"question":"What is the purpose of the `@staticmethod` decorator in a Python class? Provide an example of how it is used.","solution":"The `@staticmethod` decorator in a Python class is used to define a method that does not operate on an instance of the class, nor does it have access to the instance or class itself. It essentially defines a function within the class\'s namespace. class MathOperations: @staticmethod def add(a, b): Returns the sum of a and b. return a + b # Example usage: result = MathOperations.add(5, 3) # result will be 8"},{"question":"Write a function in a programming language of your choice that takes a list of integers and returns a list of tuples. Each tuple should contain a number from the input list and its corresponding factorial. Optimize your solution to handle large inputs efficiently.","solution":"import math from typing import List, Tuple def factorial_tuple(lst: List[int]) -> List[Tuple[int, int]]: Returns a list of tuples containing each number in the input list and its factorial. Parameters: lst (List[int]): List of integers. Returns: List[Tuple[int, int]]: List of tuples where each tuple is (number, factorial of that number). return [(num, math.factorial(num)) for num in lst]"},{"question":"Implement a function to calculate the sum of all unique prime factors of a given integer. Unlike typical prime factorization, your task focuses on summing only the unique prime factors without considering their multiplicity. For example: Input: 18 Output: 5 (Explanation: The prime factors of 18 are 2 and 3. The sum of these unique prime factors is 2 + 3 = 5.) Input: 28 Output: 9 (Explanation: The prime factors of 28 are 2 and 7. The sum of these unique prime factors is 2 + 7 = 9.) Your function should handle large integers efficiently and include checks for edge cases, such as when the input integer is less than 2. ```python def sum_of_unique_prime_factors(n: int) -> int: # Your code here pass # Example usage print(sum_of_unique_prime_factors(18)) # Output: 5 print(sum_of_unique_prime_factors(28)) # Output: 9 ```","solution":"def sum_of_unique_prime_factors(n: int) -> int: if n < 2: return 0 def prime_factors(num): i = 2 factors = set() while i * i <= num: if num % i: i += 1 else: num //= i factors.add(i) if num > 1: factors.add(num) return factors unique_factors = prime_factors(n) return sum(unique_factors) # Example usage print(sum_of_unique_prime_factors(18)) # Output: 5 print(sum_of_unique_prime_factors(28)) # Output: 9"},{"question":"Create a function in Python that takes a list of integers and moves all the even numbers to the front, keeping the relative order of the components unchanged, throughout the modification. For instance, given `input_list = [3, 1, 2, 4, 7, 6]`, the output should be `[2, 4, 6, 3, 1, 7]`. Additionally, provide comprehensive test cases that demonstrate the correct functionality of your function.","solution":"def move_evens_to_front(input_list): Moves all the even numbers to the front of the list, keeping the relative order of the components unchanged. Parameters: input_list (list): The list of integers to rearrange. Returns: list: A new list with all the even numbers at the front. evens = [x for x in input_list if x % 2 == 0] odds = [x for x in input_list if x % 2 != 0] return evens + odds"},{"question":"Write a function that takes an array of integers and a target sum as input and returns all unique combinations of numbers from the array that add up to the target sum. Each number from the array can be used zero or more times to form the combinations. The solution set must not contain duplicate combinations. You may return the combinations in any order. Include a main program that demonstrates your function with at least one test case.","solution":"from typing import List def combination_sum(candidates: List[int], target: int) -> List[List[int]]: Returns all unique combinations of numbers from the candidates array that add up to the target. Each number from the array can be used zero or more times. result = [] def backtrack(remain, combo, start): if remain == 0: result.append(list(combo)) return elif remain < 0: return for i in range(start, len(candidates)): combo.append(candidates[i]) backtrack(remain - candidates[i], combo, i) combo.pop() candidates.sort() backtrack(target, [], 0) return result # Example usage if __name__ == \\"__main__\\": candidates = [2, 3, 6, 7] target = 7 print(combination_sum(candidates, target)) # Output: [[2, 2, 3], [7]]"},{"question":"Write a Python function that reads a CSV file containing transaction data and identifies the top 5 customers by total spending. The CSV file will have the following columns: \\"CustomerID\\", \\"TransactionID\\", \\"Amount\\". Your function should return a list of the top 5 customers\' IDs sorted by highest to lowest total spending. Ensure your implementation handles large datasets efficiently and provides error handling for common issues such as missing values or incorrect data types. You may assume that the CSV file is properly formatted and each transaction amount is a positive number. Provide a sample CSV file content and demonstrate the function with this sample data.","solution":"import csv from collections import defaultdict import heapq def top_5_customers_by_spending(file_path): Reads a CSV file and identifies the top 5 customers by total spending. :param file_path: path to the CSV file :return: List of top 5 customer IDs sorted by highest to lowest total spending customer_spending = defaultdict(float) try: with open(file_path, \'r\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: customer_id = row[\'CustomerID\'] amount = float(row[\'Amount\']) customer_spending[customer_id] += amount except FileNotFoundError: print(f\\"File {file_path} not found.\\") return [] except KeyError as e: print(f\\"Missing column in CSV: {e}\\") return [] except ValueError as e: print(f\\"Error in data format: {e}\\") return [] # Find top 5 customers by total spending using heapq top_5_customers = heapq.nlargest(5, customer_spending, key=customer_spending.get) return top_5_customers"},{"question":"Write a Python function that takes a list of integers as input and returns a new list where each element is the product of all the elements in the original list except the element at the same position. Ensure that the provided list has at least two elements, and handle the case where one or more elements in the input list are zero.","solution":"def product_except_self(nums): Returns a list where each element is the product of all the elements in the original list except the element at the same position. :param nums: List of integers :return: List of integers length = len(nums) if length < 2: raise ValueError(\\"Input list must have at least two elements.\\") left_products = [1] * length right_products = [1] * length result = [0] * length for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"You are given a string `s` and a dictionary of words `wordDict`. Your task is to determine if `s` can be segmented into a space-separated sequence of one or more dictionary words. Write a function that returns `True` if `s` can be segmented into a sequence of one or more dictionary words, and `False` otherwise. The function signature is: ```python def word_break(s: str, wordDict: List[str]) -> bool: ``` # Example 1: ```python Input: s = \\"applepenapple\\", wordDict = [\\"apple\\", \\"pen\\"] Output: True Explanation: The string can be segmented as \\"apple pen apple\\". ``` # Example 2: ```python Input: s = \\"catsandog\\", wordDict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output: False Explanation: The string cannot be fully segmented into dictionary words. ``` # Example 3: ```python Input: s = \\"leetcode\\", wordDict = [\\"leet\\", \\"code\\"] Output: True Explanation: The string can be segmented as \\"leet code\\". ``` # Constraints: - The length of `s` is between 1 and 300, inclusive. - The dictionary `wordDict` contains between 1 and 1000 words, inclusive. - The length of each word in `wordDict` is between 1 and 20, inclusive. - `s` and `wordDict[i]` consist of only lowercase English letters.","solution":"from typing import List def word_break(s: str, wordDict: List[str]) -> bool: word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True # base case: an empty string can always be segmented for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[-1]"},{"question":"Write a Python function to validate if a given string is a correctly formatted International Standard Book Number (ISBN-10). The function should return `True` if the string is a valid ISBN-10 and `False` otherwise. An ISBN-10 is valid if: 1. It contains exactly 10 characters. 2. The first nine characters should be digits (0-9). 3. The last character can be a digit (0-9) or \'X\' (which represents the value 10). 4. The sum of the first nine digits and the value of the tenth character, each multiplied by its position (from 1 to 10), should be divisible by 11. Function Signature: ```python def is_valid_isbn10(isbn: str) -> bool: pass ``` Example: ```python print(is_valid_isbn10(\\"0471958697\\")) # Output: True print(is_valid_isbn10(\\"123456789X\\")) # Output: True print(is_valid_isbn10(\\"1234567890\\")) # Output: False print(is_valid_isbn10(\\"X123456789\\")) # Output: False ```","solution":"def is_valid_isbn10(isbn: str) -> bool: if len(isbn) != 10: return False if not isbn[:9].isdigit(): return False if isbn[-1] not in \\"0123456789X\\": return False total = 0 for i in range(9): total += int(isbn[i]) * (i + 1) if isbn[-1] == \'X\': total += 10 * 10 else: total += int(isbn[-1]) * 10 return total % 11 == 0"},{"question":"Create a Python function that checks if a given string is a valid palindrome, ignoring case and non-alphanumeric characters.","solution":"def is_palindrome(s): Checks if a given string is a valid palindrome, ignoring case and non-alphanumeric characters. filtered_chars = [char.lower() for char in s if char.isalnum()] return filtered_chars == filtered_chars[::-1]"},{"question":"Write a function that reverses the order of words in a given sentence without altering the individual words. The input will be a string containing multiple words separated by spaces, and the output should be a string with the words in reversed order. Punctuation and capitalization must remain unchanged, and excess whitespace should be removed. For example, given the input \\"The quick brown fox jumps over the lazy dog\\", the output should be \\"dog lazy the over jumps fox brown quick The\\".","solution":"def reverse_words_in_sentence(sentence): Reverses the order of words in a given sentence without altering the individual words. Args: sentence (str): The sentence to be reversed. Returns: str: The sentence with words in reversed order. words = sentence.strip().split() reversed_words = \' \'.join(reversed(words)) return reversed_words"},{"question":"Write a program that utilizes object-oriented programming principles to model a simple library system. The program should define three classes: `Book`, `Member`, and `Library`. 1. **Book Class**: - Attributes: `title` (string), `author` (string), `isbn` (string), `checked_out` (boolean, initially `False`). - Method: `checkout` should set the `checked_out` attribute to `True`. 2. **Member Class**: - Attributes: `name` (string), `member_id` (string), `books_checked_out` (collection of Books). - Methods: - `checkout_book` should take a Book object and check it out, adding it to the `books_checked_out` collection. - `return_book` should take a Book object, return it to the library, and remove it from the `books_checked_out` collection. 3. **Library Class**: - Attributes: `books` (collection of Book objects), `members` (collection of Member objects). - Methods: - `add_book` should take a Book object and add it to the library\'s collection. - `register_member` should take a Member object and add it to the list of members. - `checkout_to_member` should take a `member_id` and `isbn`, find the corresponding Member and Book, and perform the checkout if possible. Design the classes with appropriate attributes and methods, and ensure the library system handles book checkouts and returns correctly.","solution":"class Book: def __init__(self, title, author, isbn): self.title = title self.author = author self.isbn = isbn self.checked_out = False def checkout(self): self.checked_out = True def return_book(self): self.checked_out = False class Member: def __init__(self, name, member_id): self.name = name self.member_id = member_id self.books_checked_out = [] def checkout_book(self, book): if not book.checked_out: book.checkout() self.books_checked_out.append(book) return True return False def return_book(self, book): if book in self.books_checked_out: book.return_book() self.books_checked_out.remove(book) return True return False class Library: def __init__(self): self.books = [] self.members = [] def add_book(self, book): self.books.append(book) def register_member(self, member): self.members.append(member) def checkout_to_member(self, member_id, isbn): member = next((m for m in self.members if m.member_id == member_id), None) book = next((b for b in self.books if b.isbn == isbn), None) if member and book and not book.checked_out: return member.checkout_book(book) return False"},{"question":"Given a string, write a function to determine if it is a valid palindrome, considering only alphanumeric characters and ignoring cases. Your function should return a boolean value `True` if the input string is a palindrome and `False` otherwise. # Function Signature ```python def is_palindrome(s: str) -> bool: # Your code here ``` # Example ```python assert is_palindrome(\\"A man, a plan, a canal: Panama\\") == True assert is_palindrome(\\"race a car\\") == False assert is_palindrome(\\"\\") == True assert is_palindrome(\\"0P\\") == False ``` # Input - A single string `s` containing alphanumeric characters and/or spaces, and punctuation marks. # Output - A boolean value indicating whether the input string is a palindrome or not. # Constraints - The length of the input string `s` is at most `100,000`. - The input string will contain only printable ASCII characters. # Process 1. Normalize the string by removing all non-alphanumeric characters and converting it to the same case. 2. Check if the normalized string is equal to its reverse. 3. Return the result as a boolean value.","solution":"def is_palindrome(s: str) -> bool: Determine if the input string is a valid palindrome, considering only alphanumeric characters and ignoring cases. # Normalize the string: remove non-alphanumeric characters and convert to lowercase normalized_str = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string is equal to its reverse return normalized_str == normalized_str[::-1]"},{"question":"Design a recommendation system using collaborative filtering to suggest books to users based on their historical ratings. The dataset includes user ratings for various books, with features such as book title, author, genre, and user id, amongst others. Implement a solution that can predict the rating a user would give to a book he/she hasn\'t rated yet based on similar users\' ratings and similar books\' ratings. Describe how you would handle sparsity in the dataset and improve recommendation accuracy.","solution":"import numpy as np import pandas as pd from sklearn.metrics.pairwise import cosine_similarity from scipy.sparse import csr_matrix class CollaborativeFilteringRecommender: def __init__(self, ratings_df, user_col, item_col, rating_col): self.ratings_df = ratings_df self.user_col = user_col self.item_col = item_col self.rating_col = rating_col self.user_item_matrix = self._create_user_item_matrix() self.user_sim_matrix = self._compute_user_similarity() self.item_sim_matrix = self._compute_item_similarity() def _create_user_item_matrix(self): user_item_matrix = self.ratings_df.pivot( index=self.user_col, columns=self.item_col, values=self.rating_col ).fillna(0) return user_item_matrix def _compute_user_similarity(self): user_sim_matrix = cosine_similarity(self.user_item_matrix) np.fill_diagonal(user_sim_matrix, 0) # To avoid self-similarity return user_sim_matrix def _compute_item_similarity(self): item_sim_matrix = cosine_similarity(self.user_item_matrix.T) np.fill_diagonal(item_sim_matrix, 0) # To avoid self-similarity return item_sim_matrix def predict_user_based(self, user_id, item_id, k=5): try: user_index = self.user_item_matrix.index.get_loc(user_id) item_index = self.user_item_matrix.columns.get_loc(item_id) except KeyError: return None # User or item not found sim_users = self.user_sim_matrix[user_index] sim_users_indices = np.argsort(sim_users)[-k:] user_ratings = self.user_item_matrix.iloc[sim_users_indices, item_index] sim_scores = sim_users[sim_users_indices] weighted_avg_rating = np.dot(user_ratings, sim_scores) / np.sum(sim_scores) return weighted_avg_rating def predict_item_based(self, user_id, item_id, k=5): try: user_index = self.user_item_matrix.index.get_loc(user_id) item_index = self.user_item_matrix.columns.get_loc(item_id) except KeyError: return None # User or item not found sim_items = self.item_sim_matrix[item_index] sim_items_indices = np.argsort(sim_items)[-k:] item_ratings = self.user_item_matrix.iloc[user_index, sim_items_indices] sim_scores = sim_items[sim_items_indices] weighted_avg_rating = np.dot(item_ratings, sim_scores) / np.sum(sim_scores) return weighted_avg_rating"},{"question":"寫一個函數，計算一個字符串中每個字符出現的次數。函數輸入是一個字符串，輸出是一個字典，其中鍵為字符，值為該字符在字符串中出現的次數。","solution":"def count_characters(s): Returns a dictionary with the characters in the string as keys and the number of times they appear as values. character_count = {} for character in s: if character in character_count: character_count[character] += 1 else: character_count[character] = 1 return character_count"},{"question":"Write a function to determine whether a string contains only unique characters. The function should take a single string argument and return a boolean value indicating whether all characters in the string are unique or not.","solution":"def has_unique_characters(s): Determines if the provided string contains only unique characters. Args: s (str): The input string to be checked. Returns: bool: True if all characters in the string are unique, False otherwise. return len(set(s)) == len(s)"},{"question":"Write a Python function that takes a list of integers and returns a list of tuples. Each tuple should contain two elements: an integer from the original list and the sum of its digits. Ensure the function maintains the original order of the integers in the returned list.","solution":"def sum_of_digits(n): Returns the sum of the digits of an integer n. return sum(int(digit) for digit in str(abs(n))) def list_with_sum_of_digits(lst): Returns a list of tuples with each integer and the sum of its digits. return [(num, sum_of_digits(num)) for num in lst]"},{"question":"Write a function `find_second_largest(arr)` that takes a list of integers as input and returns the second largest number in the list. If the input list has fewer than two distinct elements, the function should return None. Example: ``` Input: [4, 1, 7, 3, 6] Output: 6 Input: [7, 7, 7] Output: None ```","solution":"def find_second_largest(arr): Returns the second largest number in the list. If the input list has fewer than two distinct elements, returns None. if len(arr) < 2: return None unique_numbers = list(set(arr)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[-2]"},{"question":"You are given an array consisting of non-negative integers. Your task is to determine if there is a subarray (contiguous sequence of elements) whose length is greater than 1 and whose sum of elements is greater than or equal to the sum of the elements of any other subarray with the same length in the array. Write a function `find_max_sum_subarray(arr)` that takes an array `arr` as input and returns a boolean value `True` if such a subarray exists and `False` otherwise. Additionally, provide a piece of erroneous code that attempts to solve this problem but fails due to a specific error. Analyze the given code, identify the error, and correct it to provide a working solution. Example 1: Input: arr = [1, 2, 3, 4] Output: True Explanation: The subarray [3, 4] has the maximum sum for length 2 and satisfies the condition. Example 2: Input: arr = [4, 1, 1, 1, 4, 2, 2] Output: True Explanation: The subarray [4, 4] has the maximum sum for length 2 and satisfies the condition. Example 3: Input: arr = [1,1,1,1] Output: True Explanation: Any subarray has the same sum, and the condition is satisfied. Constraints: - `1 <= arr.length <= 105` - `0 <= arr[i] <= 106` Erroneous code example: ```python def find_max_sum_subarray(arr): max_sum = 0 for i in range(len(arr)): for j in range(i + 1, len(arr)): subarray_sum = sum(arr[i:j]) if subarray_sum > max_sum: max_sum = subarray_sum return max_sum > 0 ``` Identify and correct the error in the code to provide a working solution.","solution":"def find_max_sum_subarray(arr): Determines if there is a subarray whose length is greater than 1 and whose sum is greater than or equal to the sum of the elements of any other subarray with the same length in the array. n = len(arr) if n < 2: return False for length in range(2, n+1): max_subarray_sum = float(\'-inf\') for i in range(n - length + 1): subarray_sum = sum(arr[i:i+length]) if subarray_sum >= max_subarray_sum: max_subarray_sum = subarray_sum if max_subarray_sum > 0: return True return False"},{"question":"Write a Python function that takes a list of integers and returns the number of \\"inversion pairs\\" in the list. An inversion pair is a pair of elements in the list where the first element is greater than the second element and the first element appears before the second element in the list. For example, in the list [2, 4, 1, 3, 5], the inversion pairs are (2, 1), (4, 1), and (4, 3). The function should use a modified merge sort algorithm to achieve O(nlogn) time complexity.","solution":"def count_inversions(arr): Counts the number of inversion pairs in the given list using a modified merge sort algorithm. def merge_and_count(arr, temp_arr, left, mid, right): Helper function to merge two halves and count inversions i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because all elements left to i in the left subarray # are greater than arr[j] temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into Original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): Helper function to divide the array and count inversions inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count n = len(arr) temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n-1)"},{"question":"Write a function to determine if an array of integers could represent the preorder traversal of a Binary Search Tree (BST). The function should return True if the given integers can form a valid preorder traversal of a BST, otherwise it should return False. Implement your solution in Python or any other language of your choice. The function signature should be: `def is_valid_preorder(preorder: List[int]) -> bool:` # Example: **Input:** ```python preorder = [5, 2, 1, 3, 6] ``` **Output:** ```python True ``` **Input:** ```python preorder = [5, 2, 6, 1, 3] ``` **Output:** ```python False ``` # Constraints: - The length of the array `preorder` will be between 1 and 1000. - The elements of `preorder` are distinct integers.","solution":"from typing import List def is_valid_preorder(preorder: List[int]) -> bool: Determine if the given preorder traversal can form a valid BST. stack = [] lower_bound = float(\'-inf\') for value in preorder: if value < lower_bound: return False while stack and stack[-1] < value: lower_bound = stack.pop() stack.append(value) return True"},{"question":"Given an array of integers, write a function to find the second largest element in the array. If the array has fewer than two distinct elements, return None. Note that the function should handle both negative and positive numbers, and the array may contain duplicates. **Function Signature:** ```python def find_second_largest(arr: List[int]) -> Optional[int]: pass ``` **Input:** - `arr`: A list of integers. The length of the list is not constrained, but the list could potentially contain millions of elements. **Output:** - The function should return an integer representing the second largest element in the list, or `None` if such an element does not exist. **Example:** ```python assert find_second_largest([2, 3, 5, 6, 6, 5, 4]) == 5 assert find_second_largest([10, 10, 10]) == None assert find_second_largest([1]) == None assert find_second_largest([-2, -3, -1, -4]) == -2 ```","solution":"from typing import List, Optional def find_second_largest(arr: List[int]) -> Optional[int]: Finds the second largest element in the given array. Returns None if fewer than two distinct elements exist. if len(arr) < 2: return None first, second = float(\'-inf\'), float(\'-inf\') for num in arr: if num > first: first, second = num, first elif first > num > second: second = num if second == float(\'-inf\'): return None return second"},{"question":"Develop a function that simulates the behavior of an automated teller machine (ATM). This ATM must perform three basic operations: checking account balance, withdrawing funds, and depositing funds. The function should accept commands as strings and output the corresponding result. The initial balance should be set to 0. Provide examples of how the function handles different operations such as checking balance, depositing an amount, and withdrawing an amount. Additionally, include error handling for cases like withdrawing more than the current balance and invalid commands.","solution":"class ATM: def __init__(self): self.balance = 0 def perform_operation(self, command): parts = command.split() operation = parts[0].lower() if operation == \\"balance\\": return self.balance elif operation == \\"deposit\\": if len(parts) != 2 or not parts[1].isdigit(): return \\"Invalid command format\\" amount = int(parts[1]) self.balance += amount return self.balance elif operation == \\"withdraw\\": if len(parts) != 2 or not parts[1].isdigit(): return \\"Invalid command format\\" amount = int(parts[1]) if self.balance >= amount: self.balance -= amount return self.balance else: return \\"Insufficient funds\\" else: return \\"Invalid command\\" # Example usage: # atm = ATM() # print(atm.perform_operation(\\"balance\\")) # Output: 0 # print(atm.perform_operation(\\"deposit 100\\")) # Output: 100 # print(atm.perform_operation(\\"withdraw 50\\")) # Output: 50 # print(atm.perform_operation(\\"withdraw 60\\")) # Output: \\"Insufficient funds\\" # print(atm.perform_operation(\\"deposit xyz\\")) # Output: \\"Invalid command format\\" # print(atm.perform_operation(\\"check 20\\")) # Output: \\"Invalid command\\""},{"question":"Create a Python program that reads a list of integers from the user, removes any duplicates, and sorts the remaining integers in ascending order. The program should then calculate and display the median of the sorted list. Additionally, the program should allow the user to query whether a specific integer exists in the list and provide the position of that integer if it does exist. Ensure you handle both even and odd lengths of the integer list when calculating the median. Include appropriate error handling for invalid inputs and provide unit tests to validate your solution.","solution":"def remove_duplicates_and_sort(int_list): Removes duplicates from the list, sorts it in ascending order, and returns the sorted list. return sorted(set(int_list)) def calculate_median(sorted_list): Calculates and returns the median of a sorted list. n = len(sorted_list) if n == 0: raise ValueError(\\"The list is empty, median cannot be calculated.\\") mid = n // 2 if n % 2 == 0: # Even number of elements median = (sorted_list[mid - 1] + sorted_list[mid]) / 2.0 else: # Odd number of elements median = sorted_list[mid] return median def check_integer_existence(sorted_list, query): Checks if the integer exists in the sorted list and returns its position if it exists. If does not exist, returns -1. try: index = sorted_list.index(query) return index except ValueError: return -1"},{"question":"Write a Python function to detect if a given year is a leap year. A year is a leap year if it is divisible by 4, except for years that are divisible by 100, but these centurial years are leap years if they are divisible by 400. For instance, the year 2020 is a leap year, but the year 1900 is not. Your function should take an integer input representing the year and return a boolean indicating whether it is a leap year.","solution":"def is_leap_year(year): Returns True if the given year is a leap year, False otherwise. A year is a leap year if it is divisible by 4, except for years that are divisible by 100, but these centurial years are leap years if they are divisible by 400. if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True else: return False else: return True else: return False"},{"question":"Write a function that takes a list of points in a 2D plane and returns the largest possible area of a rectangle that can be formed using these points, such that the sides of the rectangle are parallel to the coordinate axes. The points are given as a list of tuples, where each tuple represents the x and y coordinates of a point (e.g., [(1,1), (1,3), (3,1), (3,3)]). The function should return the area of the largest possible rectangle that can be formed by selecting four points from this list. The function should have a time complexity of O(n^2), where n is the number of points in the list. To handle edge cases, the function should return 0 if no rectangle can be formed (e.g., if there are fewer than 4 points or all points are collinear). Here\'s an example: ```python points = [(1,1), (1,3), (3,1), (3,3), (2,2), (4,4)] # The points (1,1), (1,3), (3,1), and (3,3) form a rectangle with an area of 4 (2x2) # The points (1,1), (1,4), (4,1), and (4,4) form a rectangle with an area of 9 (3x3) # The function should return 9 print(largest_rectangle_area(points)) # Output should be 9 ``` The function should be able to handle up to 10^5 points efficiently without exceeding the time limit. Additionally, provide a piece of erroneous code that attempts to solve the problem but fails due to incorrect handling of point alignment and calculating the area. Analyze the erroneous code and identify the mistakes.","solution":"def largest_rectangle_area(points): Returns the largest possible area of a rectangle that can be formed using the given points, with sides parallel to the coordinate axes. point_set = set(points) max_area = 0 n = len(points) for i in range(n): for j in range(i + 1, n): x1, y1 = points[i] x2, y2 = points[j] if x1 != x2 and y1 != y2: # ensure points are diagonally opposite if (x1, y2) in point_set and (x2, y1) in point_set: area = abs(x1 - x2) * abs(y1 - y2) max_area = max(max_area, area) return max_area"},{"question":"Create a function that simulates a bank account management system. This function should handle several types of operations: depositing money, withdrawing money (with overdraft protection), and checking the current balance. The function should support an initial starting balance and ensure that withdrawals do not result in a negative balance (overdraft protection). Additionally, include error handling for invalid transactions (e.g., withdrawing more than available balance, depositing a negative amount, etc.). Optionally, incorporate a transaction history feature that keeps track of all operations performed on the account and can generate a statement when requested. Provide appropriate responses or messages for each operation type and error condition.","solution":"class BankAccount: def __init__(self, initial_balance=0): self.balance = initial_balance self.transaction_history = [] def deposit(self, amount): if amount <= 0: return \\"Deposit amount must be positive\\" self.balance += amount self.transaction_history.append(f\\"Deposited {amount}\\") return f\\"Deposited {amount}, new balance is {self.balance}\\" def withdraw(self, amount): if amount <= 0: return \\"Withdrawal amount must be positive\\" if amount > self.balance: return f\\"Insufficient funds, available balance is {self.balance}\\" self.balance -= amount self.transaction_history.append(f\\"Withdrew {amount}\\") return f\\"Withdrew {amount}, new balance is {self.balance}\\" def check_balance(self): return f\\"Current balance is {self.balance}\\" def get_transaction_history(self): return \\"n\\".join(self.transaction_history)"},{"question":"Design an algorithm in Python that simulates the functioning of a limited-capacity LRU (Least Recently Used) Cache. The algorithm should support the following operations: 1. `get(key)`: Returns the value of the key if the key exists in the cache, otherwise returns -1. 2. `put(key, value)`: Insert or sets the value for the key. If the cache reaches its capacity, it should invalidate the least recently used item before inserting the new item. Implement the `LRUCache` class with the specified operations and ensure it efficiently manages the cache using suitable data structures.","solution":"class Node: def __init__(self, key, value): self.key = key self.value = value self.prev = None self.next = None class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = {} self.head = Node(0, 0) self.tail = Node(0, 0) self.head.next = self.tail self.tail.prev = self.head def _remove(self, node): prev_node = node.prev next_node = node.next prev_node.next = next_node next_node.prev = prev_node def _add(self, node): node.prev = self.head node.next = self.head.next self.head.next.prev = node self.head.next = node def get(self, key: int) -> int: if key in self.cache: node = self.cache[key] self._remove(node) self._add(node) return node.value return -1 def put(self, key: int, value: int) -> None: if key in self.cache: self._remove(self.cache[key]) new_node = Node(key, value) self._add(new_node) self.cache[key] = new_node if len(self.cache) > self.capacity: lru = self.tail.prev self._remove(lru) del self.cache[lru.key]"},{"question":"A company has a list of employee records, where each record is a dictionary containing the employee\'s name, age, and salary. Write a function `filter_employees` that takes this list and two optional parameters: `min_age` and `min_salary`. The function should return a list of dictionaries representing employees who match the criteria of having an age greater than or equal to `min_age` and a salary greater than or equal to `min_salary`. If `min_age` or `min_salary` are not provided, the function should not filter by that criterion. Ensure the function is robust against missing age or salary fields in the employee records. Example: ```python employees = [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"salary\\": 70000}, {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"salary\\": 65000}, {\\"name\\": \\"Charlie\\", \\"age\\": 35, \\"salary\\": 50000}, {\\"name\\": \\"David\\", \\"age\\": 40}, {\\"name\\": \\"Eve\\", \\"salary\\": 80000} ] filter_employees(employees, min_age=30, min_salary=60000) ``` Output: ``` [{\\"name\\": \\"Alice\\", \\"age\\": 30, \\"salary\\": 70000}] ```","solution":"def filter_employees(employees, min_age=None, min_salary=None): Takes a list of employee records and filters them based on the provided criteria: min_age and min_salary. Parameters: employees (list): List of dictionaries with each dictionary having keys \'name\', \'age\', and \'salary\'. min_age (int, optional): Minimum age to filter employees. Defaults to None. min_salary (int, optional): Minimum salary to filter employees. Defaults to None. Returns: list: Filtered list of employees matching the criteria. filtered_employees = [] for employee in employees: if \'age\' in employee and \'salary\' in employee: age_criteria = (min_age is None or employee[\'age\'] >= min_age) salary_criteria = (min_salary is None or employee[\'salary\'] >= min_salary) if age_criteria and salary_criteria: filtered_employees.append(employee) return filtered_employees"},{"question":"Write a function that takes a list of integers as input and returns the second smallest unique number in the list. If there are fewer than two unique numbers, the function should return None. The function should handle cases gracefully where the list may contain repeated numbers or might be empty. Example Input: [4, 1, 2, 2, 3, 4, 1, 5] Example Output: 2 Example Input: [7, 7, 7] Example Output: None Example Input: [] Example Output: None Example Input: [1, 1, 1, 2, 2, 2, 3, 3, 3] Example Output: 2","solution":"def second_smallest_unique(numbers): Returns the second smallest unique number in the list. If there are fewer than two unique numbers, returns None. # Create a set to get unique numbers unique_numbers = set(numbers) # Convert the set back to a sorted list sorted_unique_numbers = sorted(unique_numbers) # Check if there are at least two unique numbers if len(sorted_unique_numbers) < 2: return None # Return the second smallest unique number return sorted_unique_numbers[1]"},{"question":"Write a function to determine if a given string is a valid palindrome after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters. Consider empty strings as valid palindromes. Example: Input: \\"A man, a plan, a canal: Panama\\" Output: True Input: \\"race a car\\" Output: False","solution":"def is_palindrome(s): Determines if a given string is a valid palindrome after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters. Args: s (str): The input string. Returns: bool: True if the string is a valid palindrome, False otherwise. # Removing non-alphanumeric characters and converting to lowercase cleaned_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Checking if the cleaned string is a palindrome return cleaned_s == cleaned_s[::-1]"},{"question":"For a given string, write a function to determine if it contains all 26 letters of the alphabet at least once (case insensitive). If it does, return \\"Pangram\\", otherwise return \\"Not Pangram\\". >>> isPangram(\\"The quick brown fox jumps over the lazy dog\\") \\"Pangram\\" >>> isPangram(\\"Hello World\\") \\"Not Pangram\\"","solution":"def isPangram(s): Determines if the given string contains all 26 letters of the alphabet at least once. Case insensitive. :param s: The input string to be checked :return: \\"Pangram\\" if the string contains all letters, otherwise \\"Not Pangram\\" s = s.lower() alphabet = set(\\"abcdefghijklmnopqrstuvwxyz\\") return \\"Pangram\\" if alphabet <= set(s) else \\"Not Pangram\\""},{"question":"Design a comprehensive blockchain-based voting system ensuring high security, transparency, scalability, and user anonymity. The system should be adaptable to both small and large scale elections, while being resilient to potential threats. You are required to address the following core components: 1. Develop a distributed ledger using blockchain technology to securely store votes. Ensure the ledger is immutable and provide mechanisms for public verification while preserving voter anonymity. 2. Implement a robust cryptographic protocol to enable secure voter authentication and authorization. Incorporate multi-factor authentication to prevent unauthorized access and strengthen security. 3. Engineer a user-friendly voting interface that can support multiple device types (e.g., smartphones, tablets, PCs). Ensure the interface is intuitive, accessible, and designed with user experience (UX) principles in mind to encourage voter participation. 4. Design and implement a transparent vote tallying system that automatically counts votes from the blockchain ledger while allowing for independent audits to verify the accuracy of the results. 5. Embed advanced mechanisms for detecting and preventing fraudulent activities, such as double voting attempts or tampering with the ledger. Utilize smart contracts to automate fraud detection and response procedures. 6. Ensure the system is highly scalable to accommodate various sizes of electorates, from small community groups to national elections. Optimize for performance to handle high volumes of transactions efficiently. 7. Develop detailed logging and monitoring tools to provide real-time insights into the system’s performance and identify potential security threats. Implement an alerting system to notify administrators of any suspicious activities or anomalies. 8. Draft a comprehensive set of user and administrator manuals, detailing system functionalities, configuration procedures, and troubleshooting guides. Include training materials to educate users and administrators on the secure and effective use of the system. 9. Articulate thorough design documentation covering the architectural decisions, testing methodologies, and security protocols employed. Conduct a comparative analysis of your solution against existing voting systems and highlight the improvements and unique features of your design. 10. Address ethical considerations, focusing on voter privacy and data protection. Ensure compliance with relevant laws and regulations concerning digital voting and data security. 11. As a bonus challenge, propose ways to integrate advanced technologies such as AI and machine learning to enhance the system’s security, usability, and the overall voting experience. Include a strategy for continuous system updates and maintenance. Your solution must strictly comply with international standards for election integrity and cyber security. It should also align with local legal requirements regarding electronic voting and data privacy.","solution":"import hashlib import json from time import time from uuid import uuid4 class Blockchain: def __init__(self): self.chain = [] self.current_transactions = [] self.new_block(previous_hash=\'1\', proof=100) # Genesis block def new_block(self, proof, previous_hash=None): Create a new Block in the Blockchain. block = { \'index\': len(self.chain) + 1, \'timestamp\': time(), \'transactions\': self.current_transactions, \'proof\': proof, \'previous_hash\': previous_hash or self.hash(self.chain[-1]), } self.current_transactions = [] self.chain.append(block) return block def new_transaction(self, voter, candidate): Creates a new transaction to go into the next mined Block. self.current_transactions.append({ \'voter\': voter, \'candidate\': candidate, }) return self.last_block[\'index\'] + 1 @staticmethod def hash(block): Creates a SHA-256 hash of a Block. block_string = json.dumps(block, sort_keys=True).encode() return hashlib.sha256(block_string).hexdigest() @property def last_block(self): return self.chain[-1] def proof_of_work(self, last_proof): Simple Proof of Work Algorithm: - Find a number p\' such that hash(pp\') contains leading 4 zeroes. - p is the previous proof, and p\' is the new proof. proof = 0 while self.valid_proof(last_proof, proof) is False: proof += 1 return proof @staticmethod def valid_proof(last_proof, proof): Validates the Proof: Does hash(last_proof, proof) contain 4 leading zeroes? guess = f\'{last_proof}{proof}\'.encode() guess_hash = hashlib.sha256(guess).hexdigest() return guess_hash[:4] == \\"0000\\""},{"question":"Design a function that takes two strings and returns a Boolean indicating whether one string is an anagram of the other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once. For example, \\"listen\\" and \\"silent\\" are anagrams. The function should be case-insensitive and ignore spaces and punctuation. Ensure your solution handles edge cases, such as empty strings or strings with non-alphabetic characters.","solution":"import re def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams of each other, else returns False. This function is case-insensitive and ignores spaces and punctuation. # Remove any non-alphabetic characters and convert to lower case cleaned_str1 = re.sub(r\'[^a-zA-Z]\', \'\', str1).lower() cleaned_str2 = re.sub(r\'[^a-zA-Z]\', \'\', str2).lower() # Sort the characters of both strings and compare return sorted(cleaned_str1) == sorted(cleaned_str2)"},{"question":"Create a class \'Student\' that has the following properties: \'name\' (with a default value of an empty string), \'grade\' (with a default value of an empty string), and \'gpa\' (with a default value of 0.0). Additionally, implement the following methods: 1. `update_grade(new_grade)`: Set the student\'s grade to the specified `new_grade`. 2. `update_gpa(new_gpa)`: Set the student\'s GPA to the specified `new_gpa`, ensuring that the GPA value is between 0.0 and 4.0. 3. `is_honors()`: Return a boolean value indicating whether the student is an honors student (GPA of 3.5 or higher). 4. `change_name(new_name)`: Change the student\'s name to the specified `new_name`.","solution":"class Student: def __init__(self, name=\'\', grade=\'\', gpa=0.0): self.name = name self.grade = grade self.gpa = gpa def update_grade(self, new_grade): self.grade = new_grade def update_gpa(self, new_gpa): if 0.0 <= new_gpa <= 4.0: self.gpa = new_gpa else: raise ValueError(\\"GPA must be between 0.0 and 4.0\\") def is_honors(self): return self.gpa >= 3.5 def change_name(self, new_name): self.name = new_name"},{"question":"Write a program that efficiently finds the median of a data stream. The program should be designed to handle real-time data input, meaning new numbers can be added at any time, and the median must be updated accordingly. The solution should aim to maintain an optimal balance between insertions and median retrieval, ideally using advanced data structures such as heaps or balanced binary search trees. The program must handle an extensive sequence of numbers, with a focus on minimizing latency for both insertion and median calculation operations. The approach should also consider edge cases, such as handling an even number of elements, where the median is the average of the two central elements.","solution":"import heapq class MedianFinder: A data structure that maintains a list of numbers and can efficiently provide the median of the list after each insertion. def __init__(self): self.min_heap = [] # holds the larger half of the numbers self.max_heap = [] # holds the smaller half of the numbers def addNum(self, num: int) -> None: if not self.max_heap or num < -self.max_heap[0]: heapq.heappush(self.max_heap, -num) else: heapq.heappush(self.min_heap, num) # Rebalance the heaps if their sizes differ by more than one if len(self.max_heap) > len(self.min_heap) + 1: heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) elif len(self.min_heap) > len(self.max_heap): heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap)) def findMedian(self) -> float: if len(self.max_heap) > len(self.min_heap): return -self.max_heap[0] return (-self.max_heap[0] + self.min_heap[0]) / 2.0"},{"question":"Write a function that takes a string as input and returns a new string where: - All uppercase letters are converted to lowercase. - All lowercase letters are converted to uppercase. - All non-alphabetic characters remain unchanged. The function should handle edge cases such as empty strings, strings with no alphabetic characters, and strings with a mix of alphabetic and non-alphabetic characters.","solution":"def swap_case(s): Returns a new string where all uppercase letters are converted to lowercase, all lowercase letters are converted to uppercase, and all non-alphabetic characters remain unchanged. return s.swapcase()"},{"question":"Write a Python function that takes a list of integers and an integer target value, and returns two distinct elements from the list that add up to the target value. Ensure the function handles the following constraints: 1. The function should return a tuple of the two distinct integers if a pair is found. If multiple pairs exist that satisfy the requirement, return any one of them. 2. If no such pair exists, return an empty tuple. 3. The input list may contain negative numbers and duplicates, but you cannot use the same element twice. 4. The function should have a time complexity of O(n). Include test cases to show that the function meets the requirements above.","solution":"def find_pair_with_sum(nums, target): Returns a tuple of two distinct elements from the list that add up to the target value. If no such pair exists, returns an empty tuple. seen = {} for num in nums: complement = target - num if complement in seen and seen[complement] > 0: return (complement, num) seen[num] = seen.get(num, 0) + 1 return ()"},{"question":"Write a function that checks whether a given binary tree is symmetric. A binary tree is symmetric if a line through the root divides it into two mirror-image subtrees. Function Signature: `def is_symmetric(root: Optional[TreeNode]) -> bool:` # Input - `root`: A reference to the root node of the binary tree (where the `TreeNode` structure is defined). # Output - Return `True` if the tree is symmetric; otherwise, return `False`. # Example ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right # Example Case # Input: # 1 # / # 2 2 # / / # 3 4 4 3 # Output: True # Input: # 1 # / # 2 2 # # 3 3 # Output: False ```","solution":"from typing import Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_symmetric(root: Optional[TreeNode]) -> bool: Returns True if the binary tree is symmetric, False otherwise. def is_mirror(t1: Optional[TreeNode], t2: Optional[TreeNode]) -> bool: if not t1 and not t2: return True if not t1 or not t2: return False return (t1.val == t2.val) and is_mirror(t1.left, t2.right) and is_mirror(t1.right, t2.left) return is_mirror(root, root)"},{"question":"Create a Python function named `is_anagram_of_palindrome` that takes a string as input and determines if the string can be rearranged to form a palindrome. A palindrome is a word that reads the same forwards and backwards. The function should return `True` if the string can be rearranged into a palindrome and `False` otherwise. The function should handle input strings consisting of lowercase alphabetic characters and ignore any non-alphabetic characters.","solution":"def is_anagram_of_palindrome(s): Determines if the input string can be rearranged to form a palindrome. :param s: The input string :return: True if the string can be rearranged to form a palindrome, False otherwise from collections import Counter # Filter out non-alphabetic characters and convert to lowercase filtered_s = \'\'.join(filter(str.isalpha, s)).lower() # Count the frequency of each character char_counts = Counter(filtered_s) # Count the number of characters with odd frequencies odd_count = sum(1 for count in char_counts.values() if count % 2 == 1) # A string can be rearranged into a palindrome if it has at most one odd character count return odd_count <= 1"},{"question":"Write a Python function to simulate a simple banking system. The function should support the following operations: - Deposit: This operation should increase the balance of a given account by the specified amount. - Withdraw: This operation should decrease the balance of a given account by the specified amount. An attempt to withdraw more than the current balance should result in an \\"Insufficient funds\\" message and the balance should remain unchanged. - Transfer: This operation should allow transferring a specified amount from one account to another. If the transferring account does not have sufficient balance, display an \\"Insufficient funds\\" message and do not perform the transfer. - Get Balance: This operation should return the current balance of the account. Assume the accounts are stored in a dictionary where the keys are account IDs and the values are the current balance of each account. Here\'s the function signature: ```python def simulate_banking_system(operations: list) -> list: Simulates a banking system with a series of operations. Parameters: operations (list): List of operations to be performed. Each operation is a dictionary with the following structure: - {\'operation\': \'create_account\', \'account_id\': int, \'initial_balance\': float} - {\'operation\': \'deposit\', \'account_id\': int, \'amount\': float} - {\'operation\': \'withdraw\', \'account_id\': int, \'amount\': float} - {\'operation\': \'transfer\', \'from_account_id\': int, \'to_account_id\': int, \'amount\': float} - {\'operation\': \'get_balance\', \'account_id\': int} Returns: list: List of results for \'get_balance\' operations with the balance of the respective account. # Example Usage: # operations = [ # {\'operation\': \'create_account\', \'account_id\': 1, \'initial_balance\': 100.0}, # {\'operation\': \'create_account\', \'account_id\': 2, \'initial_balance\': 150.0}, # {\'operation\': \'deposit\', \'account_id\': 1, \'amount\': 50.0}, # {\'operation\': \'withdraw\', \'account_id\': 1, \'amount\': 20.0}, # {\'operation\': \'transfer\', \'from_account_id\': 1, \'to_account_id\': 2, \'amount\': 30.0}, # {\'operation\': \'get_balance\', \'account_id\': 1}, # {\'operation\': \'get_balance\', \'account_id\': 2} # ] # Expected Output: [100.0, 180.0] ```","solution":"def simulate_banking_system(operations: list) -> list: accounts = {} results = [] for op in operations: if op[\'operation\'] == \'create_account\': accounts[op[\'account_id\']] = op[\'initial_balance\'] elif op[\'operation\'] == \'deposit\': if op[\'account_id\'] in accounts: accounts[op[\'account_id\']] += op[\'amount\'] elif op[\'operation\'] == \'withdraw\': if op[\'account_id\'] in accounts: if accounts[op[\'account_id\']] >= op[\'amount\']: accounts[op[\'account_id\']] -= op[\'amount\'] else: print(\\"Insufficient funds\\") elif op[\'operation\'] == \'transfer\': if (op[\'from_account_id\'] in accounts and op[\'to_account_id\'] in accounts): if accounts[op[\'from_account_id\']] >= op[\'amount\']: accounts[op[\'from_account_id\']] -= op[\'amount\'] accounts[op[\'to_account_id\']] += op[\'amount\'] else: print(\\"Insufficient funds\\") elif op[\'operation\'] == \'get_balance\': if op[\'account_id\'] in accounts: results.append(accounts[op[\'account_id\']]) return results"},{"question":"Develop a Python function that determines if a given year is a leap year or not. A year is considered leap if it is divisible by 4, but not divisible by 100, unless it is also divisible by 400. The function should return True if the year is a leap year, and False otherwise. Example: - Input: 2000 - Output: True - Input: 1900 - Output: False - Input: 2012 - Output: True Function signature: ```python def is_leap_year(year: int) -> bool: ``` Constraints: - The input will be a positive integer within the range [1, 9999]. To implement the function: 1. Check if the year is divisible by 400, if so, return True. 2. Otherwise, check if the year is divisible by 100, if so, return False. 3. Otherwise, check if the year is divisible by 4, if so, return True. 4. If none of the above conditions hold, return False.","solution":"def is_leap_year(year: int) -> bool: Determines if a given year is a leap year. Args: year (int): The year to be checked. Returns: bool: True if the year is a leap year, False otherwise. if year % 400 == 0: return True if year % 100 == 0: return False if year % 4 == 0: return True return False"},{"question":"Write a Python function that implements a simple user registration system, verifying that usernames are unique and passwords meet specified security criteria (minimum 8 characters, at least one uppercase letter, one lowercase letter, and one number).","solution":"class UserRegistrationSystem: def __init__(self): self.registered_users = {} def is_valid_password(self, password): if len(password) < 8: return False if not any(char.isdigit() for char in password): return False if not any(char.islower() for char in password): return False if not any(char.isupper() for char in password): return False return True def register_user(self, username, password): if username in self.registered_users: return \\"Username already exists.\\" if not self.is_valid_password(password): return \\"Password does not meet security criteria.\\" self.registered_users[username] = password return \\"Registration successful!\\""},{"question":"Given a dataset containing records of house features such as: number of bedrooms, square footage, and a boolean indicating if the house has a pool, construct a Linear Regression model using sklearn to predict house prices. Once the model is trained, evaluate its performance by calculating the Mean Absolute Error (MAE) on a separate test set.","solution":"from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_absolute_error from sklearn.model_selection import train_test_split import pandas as pd def train_and_evaluate(data): Trains a Linear Regression model on the given dataset and evaluates its performance. Parameters: data (pd.DataFrame): The dataset containing house features and prices. Returns: float: The Mean Absolute Error on the test set. # Features and target X = data[[\'bedrooms\', \'square_footage\', \'has_pool\']] y = data[\'price\'] # Train-test split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Model training model = LinearRegression() model.fit(X_train, y_train) # Predicting y_pred = model.predict(X_test) # Calculate MAE mae = mean_absolute_error(y_test, y_pred) return mae"},{"question":"Write a function that determines whether a given string can be rearranged to form a palindrome. A string is a palindrome if it reads the same forward and backward. For the purposes of this problem, only consider alphanumeric characters and ignore case differences. To solve this problem, implement the following function: ```python def can_form_palindrome(s: str) -> bool: ``` # Input - `s` (1 ≤ `len(s)` ≤ 10^5): A string containing alphanumeric characters. # Output - Returns `True` if the string can be rearranged to form a palindrome, and `False` otherwise. # Example Input ```python s = \\"A man, a plan, a canal: Panama\\" ``` Output ```python True ``` Explanation Ignoring case and non-alphanumeric characters, the input can be rearranged to form \\"amanaplanacanalpanama\\", which is a palindrome. # Example Input ```python s = \\"race a car\\" ``` Output ```python False ``` Explanation Ignoring case and non-alphanumeric characters, the input is \\"raceacar\\", which cannot be rearranged to form a palindrome.","solution":"from collections import Counter def can_form_palindrome(s: str) -> bool: Determines whether a given string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character occurs odd number of times. # Normalize the string: remove non-alphanumeric characters and convert to lowercase normalized_str = \'\'.join(char.lower() for char in s if char.isalnum()) # Count occurrence of each character char_count = Counter(normalized_str) # Check the number of characters with odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if there is at most one odd-count character return odd_count <= 1"},{"question":"Implement a function `find_most_frequent_word(sentences, min_length)` that returns the most frequent word from a list of sentences, with a minimum word length filter. If there is a tie, return the lexicographically smallest word. Your function should adhere to the following requirements: # Requirements: 1. **Function Signature**: ```python def find_most_frequent_word(sentences: List[str], min_length: int) -> str: ``` 2. **Input**: - `sentences` a list of strings, where each string represents a sentence containing words separated by spaces. - `min_length` an integer representing the minimum length of words to be considered. 3. **Output**: - Return the most frequent word that has at least `min_length` characters. If multiple words have the highest frequency, return the lexicographically smallest one. # Example: ```python sentences = [ \\"the quick brown fox jumps over the lazy dog\\", \\"the quick brown fox is quick\\" ] min_length = 4 # Words with at least 4 characters: [quick, brown, jumps, over, lazy] # \\"quick\\" appears 3 times, \\"brown\\" appears once, \\"jumps\\" appears once, \\"over\\" appears once, \\"lazy\\" appears once # The most frequent word is \\"quick\\" find_most_frequent_word(sentences, min_length) # Output: \\"quick\\" ``` # Notes: - You may assume that the input sentences only contain alphabetic characters and spaces. - Consider words to be case-sensitive. - An empty list of sentences or sentences without any word meeting the minimum length should return an empty string. # Constraints: - The length of the `sentences` list can be up to 10^3. - Each sentence can have a length of up to 10^3 characters.","solution":"from typing import List from collections import Counter def find_most_frequent_word(sentences: List[str], min_length: int) -> str: word_count = Counter() for sentence in sentences: words = sentence.split() for word in words: if len(word) >= min_length: word_count[word] += 1 if not word_count: return \\"\\" max_frequency = max(word_count.values()) most_frequent_words = [word for word, count in word_count.items() if count == max_frequency] return min(most_frequent_words)"},{"question":"Analyze a text document composed of multiple lines, each containing a string of alphanumeric characters and potentially some special characters. Develop a program to identify and count the frequency of each unique word across the entire document. Additionally, implement functionality to ignore case differences (e.g., \\"Word\\" and \\"word\\" should be considered the same) and exclude any word that contains a digit or special character. Finally, output the top 5 most frequent words in descending order of frequency. If less than 5 unique words exist, list all of them. Include exception handling for empty documents.","solution":"import re from collections import Counter def count_unique_words(document): Analyzes a text document to identify and count the frequency of each unique word, ignoring case differences and excluding words with digits or special characters. Returns the top 5 most frequent words in descending order of frequency. if not document: raise ValueError(\\"The document is empty\\") # Split document into words and normalize to lower case words = re.findall(r\'b[a-zA-Z]+b\', document.lower()) # Count the frequency of each word word_count = Counter(words) # Get the top 5 most frequent words most_common_words = word_count.most_common(5) return most_common_words"},{"question":"Write a function that takes a list of integers and returns the index of the first occurrence of the largest integer in the list. nums = [1, 3, 7, 7, 2, 5]","solution":"def index_of_largest(nums): Returns the index of the first occurrence of the largest integer in the list. Parameters: nums (list): List of integers Returns: int: Index of the first occurrence of the largest integer if not nums: return -1 max_val = max(nums) return nums.index(max_val)"},{"question":"You are given a list of products with their prices and the tax rates applicable to them. Each item in the list is structured as shown below: Products List: [ {\\"product\\": \\"Laptop\\", \\"price\\": 1000, \\"tax_rate\\": 0.18}, {\\"product\\": \\"Smartphone\\", \\"price\\": 700, \\"tax_rate\\": 0.12}, {\\"product\\": \\"Tablet\\", \\"price\\": 300, \\"tax_rate\\": 0.15}, {\\"product\\": \\"Headphones\\", \\"price\\": 100, \\"tax_rate\\": 0.08} ] Write a function named `calculate_final_price` that takes the above list as an input, processes each product to calculate the final price after applying the tax, and returns a new list with the final prices tagged to each product. The output list should have the same structure as the input list with an additional key `\\"final_price\\"` for each product. The final price for each product should be calculated as: final_price = price + (price * tax_rate) Example Input: [ {\\"product\\": \\"Laptop\\", \\"price\\": 1000, \\"tax_rate\\": 0.18}, {\\"product\\": \\"Smartphone\\", \\"price\\": 700, \\"tax_rate\\": 0.12}, {\\"product\\": \\"Tablet\\", \\"price\\": 300, \\"tax_rate\\": 0.15}, {\\"product\\": \\"Headphones\\", \\"price\\": 100, \\"tax_rate\\": 0.08} ] Expected Output: [ {\\"product\\": \\"Laptop\\", \\"price\\": 1000, \\"tax_rate\\": 0.18, \\"final_price\\": 1180.0}, {\\"product\\": \\"Smartphone\\", \\"price\\": 700, \\"tax_rate\\": 0.12, \\"final_price\\": 784.0}, {\\"product\\": \\"Tablet\\", \\"price\\": 300, \\"tax_rate\\": 0.15, \\"final_price\\": 345.0}, {\\"product\\": \\"Headphones\\", \\"price\\": 100, \\"tax_rate\\": 0.08, \\"final_price\\": 108.0} ] Ensure your function handles any number of products in the input list and calculates the final prices accurately.","solution":"def calculate_final_price(products): Calculate the final price for each product after applying the tax. Parameters: products (list): List of dictionaries where each dictionary contains product information. Returns: list: New list with each dictionary containing an additional key \\"final_price\\" with calculated final price. for product in products: price = product[\'price\'] tax_rate = product[\'tax_rate\'] final_price = price + (price * tax_rate) product[\'final_price\'] = round(final_price, 2) # rounding to 2 decimal places return products"},{"question":"A company has an e-commerce website where users can review products. One star is the lowest rating and five stars is the highest. They have a large dataset of product reviews. Each review consists of a rating, the product\'s id, and the review date. Your task is to determine the percentage of products that have an average rating above 4.0. Write a function that takes the dataset as input and returns this percentage. The dataset is provided as a list of dictionaries, where each dictionary contains \'rating\' (int), \'product_id\' (string), and \'review_date\' (string). Would the figure be closer to 20%, 35%, 50%, or 65%?","solution":"def percentage_of_high_rated_products(reviews): Determines the percentage of products with an average rating above 4.0. Parameters: reviews (list of dict): A list of review data, where each review is a dictionary containing \'rating\', \'product_id\', and \'review_date\'. Returns: float: The percentage of products with an average rating above 4.0. from collections import defaultdict product_ratings = defaultdict(list) for review in reviews: product_id = review[\'product_id\'] rating = review[\'rating\'] product_ratings[product_id].append(rating) high_rated_count = 0 for ratings in product_ratings.values(): avg_rating = sum(ratings) / len(ratings) if avg_rating > 4.0: high_rated_count += 1 total_products = len(product_ratings) if total_products == 0: return 0.0 return (high_rated_count / total_products) * 100"},{"question":"Implement a function `max_water_container(heights)` in Python that takes a list of non-negative integers representing vertical lines drawn on the x-axis where the i-th element represents the height of a line at position i. The function should return the maximum amount of water that can be contained between any two lines. # Function Signature ```python def max_water_container(heights: list) -> int: ``` # Input - A list of non-negative integers, `heights`, where the length of the list is between 2 and 10^5. # Output - An integer representing the maximum amount of water that can be contained. # Constraints - The width of the container is the distance between two lines. - The height of the container is limited by the shorter line. # Example ```python assert(max_water_container([1,8,6,2,5,4,8,3,7]) == 49) assert(max_water_container([1,1]) == 1) assert(max_water_container([4,3,2,1,4]) == 16) ``` # Notes - You need to find the two lines that, together with the x-axis, form a container that can hold the most water. - You may not slant the container and must keep it within the vertical lines\' positions. - Utilize an efficient O(n) algorithm to ensure the solution scales with large input sizes. # Explanation To solve this problem, you can use a two-pointer approach: 1. Initialize two pointers, one at the beginning (left) and one at the end (right) of the list. 2. Use a while loop to move these pointers toward each other. 3. At each step, calculate the area between the lines at the two pointers and keep track of the maximum area found. 4. Move the pointer pointing to the shorter line inward to try for a potentially taller line that could contain more water.","solution":"def max_water_container(heights: list) -> int: Returns the maximum amount of water that can be contained between any two lines. left, right = 0, len(heights) - 1 max_area = 0 while left < right: height = min(heights[left], heights[right]) width = right - left current_area = height * width max_area = max(max_area, current_area) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"Design a function that takes a list of strings and an integer `k`, and returns a list of the `k` most frequently occurring strings in the list. If there are multiple strings with the same frequency, the strings should be returned in lexicographical order. Your function should be efficient, with a time complexity of O(n log k). For example, given the list `[\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"grape\\"]` and `k = 2`, your function should return `[\\"apple\\", \\"banana\\"]`. If `k = 3`, the function should return `[\\"apple\\", \\"banana\\", \\"orange\\"]`.","solution":"from collections import Counter import heapq def top_k_frequent_strings(strings, k): Returns a list of the k most frequently occurring strings in the list. If multiple strings have the same frequency, returns them in lexicographical order. if not strings or k <= 0: return [] # Count the frequency of each string freq_counter = Counter(strings) # Use a min heap to keep track of top k frequent strings min_heap = [] for word, freq in freq_counter.items(): heapq.heappush(min_heap, (-freq, word)) # Get the most frequent k elements top_k_strings = [heapq.heappop(min_heap)[1] for _ in range(min(k, len(min_heap)))] # Sort result lexicographically top_k_strings.sort() return top_k_strings"},{"question":"You are given a JSON file that holds information about products in a store. Each product has attributes such as \\"id\\", \\"name\\", \\"price\\", \\"category\\", and \\"stock\\". Your task is to write a program to parse this JSON file and create a list of Product objects (which you will define) from the parsed information. Furthermore, write a function to filter and display all the products that are in the \\"Electronics\\" category and have a stock quantity greater than 10. The JSON data follows the format shown below: ```json [ { \\"id\\": 1, \\"name\\": \\"Laptop\\", \\"price\\": 999.99, \\"category\\": \\"Electronics\\", \\"stock\\": 15 }, { \\"id\\": 2, \\"name\\": \\"Coffee Maker\\", \\"price\\": 49.99, \\"category\\": \\"Home Appliances\\", \\"stock\\": 7 }, { \\"id\\": 3, \\"name\\": \\"Smartphone\\", \\"price\\": 699.99, \\"category\\": \\"Electronics\\", \\"stock\\": 25 } ] ``` Your output should list the products in the format: \\"[Name] (ID: [id]) - [price]\\", only for the products that match the specified criteria (category: Electronics, stock > 10).","solution":"import json class Product: def __init__(self, id, name, price, category, stock): self.id = id self.name = name self.price = price self.category = category self.stock = stock @staticmethod def from_dict(product_dict): return Product( id=product_dict[\\"id\\"], name=product_dict[\\"name\\"], price=product_dict[\\"price\\"], category=product_dict[\\"category\\"], stock=product_dict[\\"stock\\"], ) def parse_products(json_data): products_data = json.loads(json_data) return [Product.from_dict(product) for product in products_data] def filter_electronics_with_stock(products): filtered_products = [product for product in products if product.category == \\"Electronics\\" and product.stock > 10] for product in filtered_products: print(f\\"{product.name} (ID: {product.id}) - {product.price}\\") # Example usage json_data = \'\'\' [ { \\"id\\": 1, \\"name\\": \\"Laptop\\", \\"price\\": 999.99, \\"category\\": \\"Electronics\\", \\"stock\\": 15 }, { \\"id\\": 2, \\"name\\": \\"Coffee Maker\\", \\"price\\": 49.99, \\"category\\": \\"Home Appliances\\", \\"stock\\": 7 }, { \\"id\\": 3, \\"name\\": \\"Smartphone\\", \\"price\\": 699.99, \\"category\\": \\"Electronics\\", \\"stock\\": 25 } ] \'\'\' products = parse_products(json_data) filter_electronics_with_stock(products)"},{"question":"Write a function that takes a list of strings and an integer `n`. The function should return the list of strings grouped into sublists, each containing `n` strings. If the number of strings in the list is not evenly divisible by `n`, the final sublist should contain the remaining elements. For example, given the input `[\'a\', \'b\', \'c\', \'d\', \'e\']` with `n = 2`, the function should return `[[\'a\', \'b\'], [\'c\', \'d\'], [\'e\']]`. Implement error handling to manage cases where `n` is zero or negative by raising an appropriate exception.","solution":"def group_strings(strings, n): Groups a list of strings into sublists each containing n strings. Args: strings (list of str): The list of strings to group. n (int): The number of strings per group. Returns: list of list of str: The list of grouped strings. Raises: ValueError: If n is zero or negative. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") grouped_strings = [strings[i:i + n] for i in range(0, len(strings), n)] return grouped_strings"},{"question":"Implement a function in Python that takes a list of integers and returns the second smallest number. If the list contains less than two unique numbers, raise a ValueError with the message \\"List must contain at least two unique numbers\\".","solution":"def second_smallest(numbers): Returns the second smallest unique number in the given list. Raises a ValueError if the list contains less than two unique numbers. unique_numbers = set(numbers) if len(unique_numbers) < 2: raise ValueError(\\"List must contain at least two unique numbers\\") sorted_unique_numbers = sorted(unique_numbers) return sorted_unique_numbers[1]"},{"question":"Write a function that accepts an array of integers and a target sum as inputs and returns an array of all unique pairs of integers that sum up to the target. The input array may contain duplicates, and each pair should be sorted in non-decreasing order. The output array should contain these pairs sorted lexicographically. The function signature is as follows: ```python def find_pairs(arr: List[int], target: int) -> List[List[int]]: # Your code here ``` # Example: ```python arr = [1, 2, -1, 0, 2, -1, 3] target = 2 ``` # Output: ```python [[-1, 3], [0, 2]] ```","solution":"from typing import List def find_pairs(arr: List[int], target: int) -> List[List[int]]: Returns a list of all unique pairs of integers from the array that sum up to the target value. arr.sort() seen = set() pairs = set() for number in arr: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen.add(number) return [list(pair) for pair in sorted(pairs)]"},{"question":"You are tasked with developing a function that transposes a given 2D matrix. The transpose of a matrix is obtained by swapping the rows and columns of the matrix. An input matrix is represented as a list of lists, where each inner list represents a row in the matrix. For example: Instance 1: Input: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: [[1, 4, 7], [2, 5, 8], [3, 6, 9]] Instance 2: Input: matrix = [[1, 2], [3, 4], [5, 6]] Output: [[1, 3, 5], [2, 4, 6]] Instance 3: Input: matrix = [[1]] Output: [[1]] Excpect the function to meet the following restrictions: Limitations: * `1 <= matrix.length, matrix[i].length <= 1000` * Each element in the ```matrix``` is an integer within the range `[-10^6, 10^6]`. Your solution should handle any rectangular shape of matrix. The transposed matrix should also be rectangular, with the new dimensions reflecting the swapped rows and columns of the original.","solution":"def transpose(matrix): Returns the transpose of the given 2D matrix. if not matrix or not matrix[0]: return [] rows, cols = len(matrix), len(matrix[0]) transposed_matrix = [] for col in range(cols): new_row = [] for row in range(rows): new_row.append(matrix[row][col]) transposed_matrix.append(new_row) return transposed_matrix"},{"question":"Create a function that takes a string containing an arithmetic expression with positive integers and the operators \'+\', \'-\', \'*\', \'/\', and parentheses \'()\'. The function should evaluate the expression and return the correct result as an integer. Division should use integer division where the fractional part is discarded. Example expressions: expression1 = \\"3+2*2\\" should output 7 expression2 = \\"3/2\\" should output 1 expression3 = \\"3+5 / 2\\" should output 5","solution":"def evaluate_expression(expression): Evaluates a string containing an arithmetic expression with +, -, *, /, and parentheses, and returns the result as an integer. Division uses integer division. def calc(it): num = 0 stack = [] sign = \'+\' while it < len(expression): ch = expression[it] if ch.isdigit(): num = num * 10 + int(ch) if ch == \'(\': num, it = calc(it + 1) if it == len(expression) - 1 or ch in \'+-*/)\': if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack[-1] = stack[-1] * num elif sign == \'/\': stack[-1] = int(stack[-1] / num) num = 0 sign = ch if ch == \')\': return sum(stack), it it += 1 return sum(stack) return int(calc(0)) print(evaluate_expression(\\"3+2*2\\")) # Should print 7 print(evaluate_expression(\\"3/2\\")) # Should print 1 print(evaluate_expression(\\"3+5 / 2\\")) # Should print 5"},{"question":"Write a function that receives a list of integers and returns a new list containing the square of each number, but only if the original number was positive. If the list is empty or contains no positive numbers, your function should return an empty list. Ensure your function handles any incorrect data gracefully by ignoring non-integer values in the input list. ```python def square_positives(nums): result = [] for num in nums: if isinstance(num, int) and num > 0: result.append(num ** 2) return result ``` Your task is to refine this function so that it meets the following updated requirements: 1. Return \\"Invalid input\\" if the input is not a list. 2. Return \\"All inputs were non-positive or invalid integers\\" if no valid integers meet the required conditions. 3. Ensure that numbers are squared in the order they appear in the input list.","solution":"def square_positives(nums): if not isinstance(nums, list): return \\"Invalid input\\" result = [] for num in nums: if isinstance(num, int) and num > 0: result.append(num ** 2) if not result: return \\"All inputs were non-positive or invalid integers\\" return result"},{"question":"Develop a function that takes a list of integers and an integer `k`, and returns the `k` largest elements in the list, sorted in descending order. For example, given the list `[3, 2, 6, 8, 1, 4]` and `k = 3`, the function should return `[8, 6, 4]`.","solution":"def k_largest_elements(lst, k): Returns the k largest elements from the list sorted in descending order. Args: lst: List of integers. k: An integer representing the number of largest elements to return. Returns: A list of k largest integers from lst sorted in descending order. if not lst or k <= 0: return [] return sorted(lst, reverse=True)[:k]"},{"question":"Using the pandas library, read a CSV file named \\"data.csv\\" that contains columns \'Name\', \'Score1\', and \'Score2\'. Compute a new column \'Average\' which represents the average of \'Score1\' and \'Score2\' for each row. Finally, filter the DataFrame to include only the rows where \'Average\' is greater than 75, and then save this resulting DataFrame to a new CSV file named \\"filtered_data.csv\\". Make sure that the index is not saved in the resulting file.","solution":"import pandas as pd def filter_and_save_csv(input_file, output_file): Reads a CSV file, computes the average of \'Score1\' and \'Score2\', filters the rows where \'Average\' is greater than 75, and saves the resulting DataFrame to a new CSV file. # Read the CSV file df = pd.read_csv(input_file) # Compute the \'Average\' column df[\'Average\'] = df[[\'Score1\', \'Score2\']].mean(axis=1) # Filter the DataFrame based on \'Average\' > 75 filtered_df = df[df[\'Average\'] > 75] # Save the resulting DataFrame to a new CSV file without the index filtered_df.to_csv(output_file, index=False) # Example usage: # filter_and_save_csv(\'data.csv\', \'filtered_data.csv\')"},{"question":"Design a Python program that processes a list of users\' information and categorizes them based on the domain of their email addresses. Your program should parse each email address to extract the domain and then group the users accordingly. The input will be a list of dictionaries where each dictionary contains information about a user in the following format: ```python [ {\\"name\\": \\"John Doe\\", \\"email\\": \\"john.doe@example.com\\"}, {\\"name\\": \\"Jane Smith\\", \\"email\\": \\"jane.smith@another.com\\"}, {\\"name\\": \\"Tom Brown\\", \\"email\\": \\"tom.brown@example.com\\"}, ... ] ``` Your program should output a dictionary where the keys are the domains, and the values are lists of names of the users corresponding to each domain. For example: ```python { \\"example.com\\": [\\"John Doe\\", \\"Tom Brown\\"], \\"another.com\\": [\\"Jane Smith\\"] } ``` Implement this in Python, ensuring your program handles any potential errors that may arise from invalid email formats and including appropriate comments for clarity.","solution":"import re from collections import defaultdict def categorize_users_by_email_domain(users): Categorizes users by the domain of their email addresses. Args: users (list of dict): List containing user information with \'name\' and \'email\' keys. Returns: dict: Dictionary where keys are email domains and values are lists of user names. # Regular expression to match the domain part of an email. email_re = re.compile(r\'^[^@]+@([^@]+.[^@]+)\') domain_dict = defaultdict(list) for user in users: try: email = user[\'email\'] name = user[\'name\'] match = email_re.match(email) if match: domain = match.group(1) domain_dict[domain].append(name) else: raise ValueError(f\\"Invalid email format: {email}\\") except KeyError as ke: print(f\\"Missing key: {ke} in user information: {user}\\") except ValueError as ve: print(ve) return dict(domain_dict)"},{"question":"Given an unsorted array of integers, write a function in Python that returns the length of the longest consecutive elements sequence. Your algorithm should run in O(n) complexity. Example: ```python input_array = [100, 4, 200, 1, 3, 2] result = longest_consecutive_sequence(input_array) print(result) # Output: 4, the sequence is [1, 2, 3, 4] ``` Function Signature: ```python def longest_consecutive_sequence(nums: List[int]) -> int: pass ``` # Constraints - The array can contain negative numbers and duplicates. - The length of the array will be between 0 and 10^5. # Requirements - The solution should ensure the algorithm runs in O(n) time complexity. - Describe any assumptions you\'ve made in your approach. - Outline the steps you\'ve taken to reach your solution.","solution":"from typing import List def longest_consecutive_sequence(nums: List[int]) -> int: Given an unsorted array of integers, returns the length of the longest consecutive elements sequence. The algorithm runs in O(n) complexity. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # Only start counting if it\'s the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Create a function that takes a string as an input and returns the most frequently occurring character in that string. In case of a tie, return the character that appears first in the string. Include considerations for both uppercase and lowercase characters by treating them as distinct (i.e., \'A\' is different from \'a\'). Function Signature: ```python def most_frequent_character(s: str) -> str: ``` Example: ```python assert most_frequent_character(\\"character\\") == \\"c\\" assert most_frequent_character(\\"Programming\\") == \\"r\\" assert most_frequent_character(\\"aabbbcc\\") == \\"b\\" ``` Constraints: - The input string will have at least one character. - The string will only contain alphabetic characters, both uppercase and lowercase.","solution":"def most_frequent_character(s: str) -> str: from collections import Counter # Count occurrences of all characters in the string count = Counter(s) # Initialize variables to track the most frequent character most_frequent = None max_count = 0 # Iterate through the string to find the most frequent character for char in s: if count[char] > max_count: most_frequent = char max_count = count[char] return most_frequent"},{"question":"Create a function that takes a list of integers and returns a new list where each integer is multiplied by its 1-based index (i.e., the first element is multiplied by 1, the second element by 2, and so on). Additionally, if the resulting number is even, append the string \\"even\\" to it as a string, and if it is odd, append the string \\"odd\\". For example, given the input list [5, 3, 7], the function should return [\\"5odd\\", \\"6even\\", \\"21odd\\"].","solution":"def indexed_multiplier(nums): Multiplies each element in the list by its 1-based index and appends \'even\' or \'odd\' to the result. Parameters: nums (list): The list of integers. Returns: list: A new list where each integer is multiplied by its 1-based index and appended with \'even\' or \'odd\'. result = [] for index, num in enumerate(nums, 1): product = index * num result.append(f\\"{product}{\'even\' if product % 2 == 0 else \'odd\'}\\") return result"},{"question":"You are given a collection of dominoes, where each domino consists of two integers representing the value on each of its two halves. Your task is to determine the maximum number of pairs of dominoes (i.e., (a, b) and (c, d)) you can find such that both dominoes in each pair can be rotated to make their values identical. Dominoes (a, b) and (c, d) are said to be identical if and only if (a == c and b == d) or (a == d and b == c). For example: Example 1: Input: dominoes = [[1,2],[2,1],[3,4],[5,6]] Output: 1 Explanation: The pair (1,2) and (2,1) are identical, and no other pairs match. Example 2: Input: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]] Output: 3 Explanation: The pairs (1,2) and (1,2), (1,2) and (1,2) are identical. There are three pairs in total. Example 3: Input: dominoes = [[1,1],[2,2],[1,1],[3,3],[1,1],[2,2]] Output: 4 Explanation: The pairs (1,1) and (1,1), (1,1) and (1,1), (1,1) and (1,1) are identical. There are four pairs in total. Constraints: `1 <= dominoes.length <= 40000` `1 <= dominoes[i][0], dominoes[i][1] <= 9`","solution":"from collections import defaultdict def max_pairs(dominoes): Returns the maximum number of domino pairs that are identical. count = defaultdict(int) for a, b in dominoes: if a > b: a, b = b, a count[(a, b)] += 1 pairs = 0 for val in count.values(): pairs += val * (val - 1) // 2 return pairs"},{"question":"Write a function to find the longest substring with all distinct characters in a given string. The function should return both the longest substring and its length. For example, consider the following string: let str = \\"abrkaabcdefghijjxxx\\"; The output would be: (\\"abcdefghij\\", 10) Note: Your solution should have a time complexity of O(n).","solution":"def longest_distinct_substring(s): Finds the longest substring with all distinct characters in a given string. :param s: Input string :type s: str :return: A tuple containing the longest substring with all distinct characters and its length :rtype: tuple (str, int) if not s: return (\\"\\", 0) start = 0 max_len = 0 max_substr = \\"\\" seen = {} for end, char in enumerate(s): if char in seen and seen[char] >= start: start = seen[char] + 1 seen[char] = end if end - start + 1 > max_len: max_len = end - start + 1 max_substr = s[start:end + 1] return (max_substr, max_len)"},{"question":"Given a 2D grid map of \'1\'s (land) and \'0\'s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Write a function `numIslands(grid: List[List[str]]) -> int` that takes the grid as input and returns the number of islands. # Example ``` Input: grid = [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] Output: 3 ``` # Constraints: 1. The size of the grid is no larger than 50x50. 2. The input grid is represented as a list of list of strings, where each string is either \'1\' or \'0\'. # Guidelines: 1. Develop an algorithm that performs a depth-first search (DFS) or breadth-first search (BFS) to explore and mark the visited parts of the grid. 2. Ensure your code is efficient and can handle the maximum constraints. 3. Provide appropriate comments in your code to explain the logic and flow.","solution":"def numIslands(grid): Returns the number of islands in the given grid. if not grid: return 0 def dfs(grid, r, c): Depth-first search to mark the connected components of an island. nr = len(grid) nc = len(grid[0]) if r < 0 or c < 0 or r >= nr or c >= nc or grid[r][c] == \'0\': return grid[r][c] = \'0\' # mark visited # Explore all 4 directions dfs(grid, r+1, c) dfs(grid, r-1, c) dfs(grid, r, c+1) dfs(grid, r, c-1) nr = len(grid) nc = len(grid[0]) num_islands = 0 for r in range(nr): for c in range(nc): if grid[r][c] == \'1\': num_islands += 1 dfs(grid, r, c) return num_islands"},{"question":"Write a function that takes a list of strings as input and returns a dictionary. Each key in the dictionary should be a distinct string from the list that appears more than once, and the corresponding value should be the count of its appearances. If the input list contains any non-string items, raise a ValueError with the message \\"List must contain only strings\\". The function should be case-insensitive, meaning \\"Cat\\" and \\"cat\\" should be treated as the same string.","solution":"def count_duplicates(lst): Returns a dictionary with counts of distinct strings in the list that appear more than once. Raises ValueError if the input list contains non-string items. if not all(isinstance(item, str) for item in lst): raise ValueError(\\"List must contain only strings\\") # Count occurrences of each string in a case-insensitive manner counts = {} for item in lst: item_lower = item.lower() if item_lower in counts: counts[item_lower] += 1 else: counts[item_lower] = 1 # Select only those items that appear more than once duplicates = {item: count for item, count in counts.items() if count > 1} return duplicates"},{"question":"Create a function called `remove_duplicates` that takes a list of integers and returns a new list with all duplicate elements removed, but maintains the original order of the first occurrence of each element. Your implementation should have a time complexity of O(n). **Function Signature:** ```python def remove_duplicates(nums: List[int]) -> List[int]: pass ``` **Example:** ```python # Example 1 nums = [1, 2, 2, 3, 4, 4, 5] print(remove_duplicates(nums)) # Output: [1, 2, 3, 4, 5] # Example 2 nums = [4, 5, 4, 4, 5, 6, 7, 8] print(remove_duplicates(nums)) # Output: [4, 5, 6, 7, 8] # Example 3 nums = [] print(remove_duplicates(nums)) # Output: [] # Example 4 nums = [1, 1, 1, 1, 1] print(remove_duplicates(nums)) # Output: [1] ```","solution":"from typing import List def remove_duplicates(nums: List[int]) -> List[int]: Returns a new list with all duplicate elements removed while maintaining the original order of the first occurrence of each element. seen = set() result = [] for num in nums: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Design a function that takes a list of tuples as input, where each tuple contains two integers representing the dimensions of a rectangle (length and width). The function should return a list of areas, where each area corresponds to the area of a rectangle from the input list. Ensure that your function handles empty input and validates that all values in the tuples are integers greater than zero. # Example ```python def calculate_areas(dimensions): # TODO: Implement this function ``` Sample Input ```python calculate_areas([(3, 4), (5, 6), (7, 2)]) ``` Sample Output ```python [12, 30, 14] ``` In the example, `(3, 4)` has an area of `12`, `(5, 6)` has an area of `30`, and `(7, 2)` has an area of `14`. Constraints 1. Each tuple will contain exactly two integers. 2. Integers in the tuples will be greater than zero.","solution":"def calculate_areas(dimensions): Calculate the areas of rectangles given their dimensions. Parameters: dimensions (list of tuples): A list of tuples where each tuple contains two integers (length and width). Returns: list: A list of areas corresponding to each rectangle. # Validate the input to ensure it\'s a list of tuples containing two integers greater than zero if not isinstance(dimensions, list): raise ValueError(\\"Input should be a list of tuples\\") for dim in dimensions: if not (isinstance(dim, tuple) and len(dim) == 2): raise ValueError(\\"Each item in the list should be a tuple of two integers\\") if not (isinstance(dim[0], int) and dim[0] > 0 and isinstance(dim[1], int) and dim[1] > 0): raise ValueError(\\"Tuple values must be integers greater than zero\\") # Calculate the areas return [length * width for length, width in dimensions]"},{"question":"Create a function to explore possible numerical patterns within a defined range: def explore_numerical_patterns(start, end, criteria): Implement a function that takes in a starting integer `start`, an ending integer `end`, and a string `criteria`. The function should return a list of all integers within the given range [start, end] (inclusive) that meet the defined criteria. The `criteria` string can take the following values: - \\"even\\": select all even numbers. - \\"odd\\": select all odd numbers. - \\"prime\\": select all prime numbers. - \\"palindrome\\": select all numbers that are palindromic. Each selected number must appear only once in the returned list. Examples: assert explore_numerical_patterns(10, 20, \\"even\\") => [10, 12, 14, 16, 18, 20] assert explore_numerical_patterns(10, 20, \\"odd\\") => [11, 13, 15, 17, 19] assert explore_numerical_patterns(10, 20, \\"prime\\") => [11, 13, 17, 19] assert explore_numerical_patterns(10, 20, \\"palindrome\\") => [11] Note: If the `criteria` is not valid, return an empty list.","solution":"def explore_numerical_patterns(start, end, criteria): def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def is_palindrome(n): return str(n) == str(n)[::-1] result = [] for num in range(start, end + 1): if criteria == \\"even\\" and num % 2 == 0: result.append(num) elif criteria == \\"odd\\" and num % 2 != 0: result.append(num) elif criteria == \\"prime\\" and is_prime(num): result.append(num) elif criteria == \\"palindrome\\" and is_palindrome(num): result.append(num) return result"},{"question":"Write a Python function that takes a list of integers and returns a new list where each integer is replaced by the product of all the other integers in the list, without using division. For example, given the list [1, 2, 3, 4], the function should return [24, 12, 8, 6].","solution":"def product_except_self(nums): Given a list of integers, returns a new list where each integer is replaced by the product of all the other integers in the list, without using division. n = len(nums) result = [1] * n left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Write a Python function that accepts a list of integers and returns a dictionary where the keys are the unique integers from the list and the values are the counts of each integer. For example, given the list [3, 5, 3, 2, 5, 3], the function should return {3: 3, 5: 2, 2: 1}.","solution":"def count_integers(int_list): Returns a dictionary where the keys are the unique integers from the list and the values are the counts of each integer. counts = {} for num in int_list: if num in counts: counts[num] += 1 else: counts[num] = 1 return counts"},{"question":"Write a function in Python to determine if a given string is a palindrome, considering only alphanumeric characters and ignoring case sensitivity. Additionally, provide the computational complexity of your solution. Furthermore, identify any potential issues with whitespace handling or punctuation marks within the string. Also, debug the following erroneous code used to determine palindrome status: ```python def is_palindrome(s): s = s.lower() s = \'\'.join(e for e in s if e.isalnum()) return s == s[::-1] # Test cases print(is_palindrome(\\"A man, a plan, a canal: Panama\\")) # Should return True print(is_palindrome(\\"race a car\\")) # Should return False print(is_palindrome(\\" \\")) # Should return True ```","solution":"def is_palindrome(s): Returns True if the provided string is a palindrome, considering only alphanumeric characters and ignoring case sensitivity. s = s.lower() s = \'\'.join(e for e in s if e.isalnum()) return s == s[::-1] # Computational complexity: O(n) where n is the length of the string as we traverse the string multiple times."},{"question":"Implement a function that computes the maximum sum of a subarray of at most `k` non-negative contiguous integers in a given array. The function should accept two arguments, an array of non-negative integers and an integer `k`, and return the maximum sum possible with the described constraints. Function Signature: `def max_subarray_sum(arr: List[int], k: int) -> int:` Example: ``` arr = [1, 2, 3, 4, 5] k = 2 max_subarray_sum(arr, k) => 9 # Explanation: The subarray [4, 5] has the maximum sum 9. ``` Constraints: - The size of the array `n` will be in the range [1, 10^5]. - The value of each array element will be in the range [0, 10^4]. - The value of `k` will be between 1 and 10^5.","solution":"from typing import List def max_subarray_sum(arr: List[int], k: int) -> int: Computes the maximum sum of a subarray with at most `k` non-negative contiguous integers. Parameters: arr (List[int]): A list of non-negative integers. k (int): The maximum length of the subarray to consider. Returns: int: The maximum sum possible with the given constraints. if not arr or k <= 0: return 0 max_sum = 0 current_sum = 0 window_start = 0 for window_end in range(len(arr)): current_sum += arr[window_end] if window_end - window_start + 1 > k: current_sum -= arr[window_start] window_start += 1 max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a Python function to count the frequency of each word in a given text. The function should take a string input, extract words, and return a dictionary where the keys are unique words and the values are their respective counts. Words are defined as sequences of alphanumeric characters and are case-insensitive. Punctuation should be ignored during the extraction process. **Example:** ```python def word_count(text): pass # Sample input text = \\"Hello, world! Hello Python. python programming.\\" # Expected output { \'hello\': 2, \'world\': 1, \'python\': 2, \'programming\': 1 } ```","solution":"import re from collections import defaultdict def word_count(text): Returns a dictionary of each word\'s frequency in the given text. Words are case-insensitive and punctuation is ignored. # Using regex to find alphanumeric words words = re.findall(r\'bw+b\', text.lower()) frequency = defaultdict(int) for word in words: frequency[word] += 1 return dict(frequency)"},{"question":"Create a Python function that, given a string containing digits and lowercase English alphabetic characters, returns a list where each element is a string describing the characters at each position and their types. If the input string contains any uppercase letters, return an error message. The description format in the output list for each character should indicate its position (starting from 1), its type (either \\"digit\\" or \\"letter\\"), and the character itself. ```python def describe_characters(s): Analyzes the character composition of the input string. For an input string composed of digits and lowercase letters, returns a list where each element describes the character at the corresponding position in the format: \\"Position X: Character (type)\\" If the input string contains any uppercase letters, return an error message. >>> describe_characters(\\"a1b2c3\\") [\\"Position 1: a (letter)\\", \\"Position 2: 1 (digit)\\", \\"Position 3: b (letter)\\", \\"Position 4: 2 (digit)\\", \\"Position 5: c (letter)\\", \\"Position 6: 3 (digit)\\"] >>> describe_characters(\\"z9y8x7\\") [\\"Position 1: z (letter)\\", \\"Position 2: 9 (digit)\\", \\"Position 3: y (letter)\\", \\"Position 4: 8 (digit)\\", \\"Position 5: x (letter)\\", \\"Position 6: 7 (digit)\\"] >>> describe_characters(\\"A1b2\\") ERROR result = [] for i, char in enumerate(s): if char.isupper(): return \\"ERROR\\" if char.isdigit(): char_type = \\"digit\\" else: char_type = \\"letter\\" result.append(f\\"Position {i+1}: {char} ({char_type})\\") return result ```","solution":"def describe_characters(s): Analyzes the character composition of the input string. For an input string composed of digits and lowercase letters, returns a list where each element describes the character at the corresponding position in the format: \\"Position X: Character (type)\\" If the input string contains any uppercase letters, return an error message. result = [] for i, char in enumerate(s): if char.isupper(): return \\"ERROR\\" if char.isdigit(): char_type = \\"digit\\" else: char_type = \\"letter\\" result.append(f\\"Position {i+1}: {char} ({char_type})\\") return result"},{"question":"Write a function that takes a sorted array of integers and a target integer. The function should return the index of the target integer if it is present in the array. If the target is not found, return the index where it would be if it were inserted in order. You must use an algorithm with O(log n) runtime complexity.","solution":"def search_insert_position(nums, target): Returns the index of the target integer if present in the sorted array nums, or the index where it would be inserted in order if not found. Achieves O(log n) runtime complexity using binary search. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return left"},{"question":"Implement a function that takes a list of integers and returns a list of the integers that are greater than all integers to their right in the original list. The order of elements in the returned list should be the same as their order in the input list. def find_greater_elements(lst: List[int]) -> List[int]: This function returns a list of integers that are greater than all integers to their right in the original list. >>> find_greater_elements([10, 4, 6, 3, 5]) [10, 6, 5] >>> find_greater_elements([1, 2, 3, 4, 0]) [4, 0] >>> find_greater_elements([5, 3, 2, 1]) [5, 3, 2, 1]","solution":"def find_greater_elements(lst): This function returns a list of integers that are greater than all integers to their right in the original list. Parameters: lst (List[int]): List of integers Returns: List[int]: List of integers that are greater than all integers to their right in the original list. if not lst: return [] result = [] max_from_right = lst[-1] result.append(max_from_right) for i in range(len(lst) - 2, -1, -1): if lst[i] > max_from_right: max_from_right = lst[i] result.append(max_from_right) return result[::-1]"},{"question":"Design a Python script to analyze an extensive dataset stored in a CSV file. The script should compute and display the following statistics for any given numerical column: mean, median, standard deviation, and a histogram representing the distribution of the values. The script must be robust enough to handle missing or malformed data gracefully and should allow the user to specify the CSV file path and the column name via command line arguments.","solution":"import pandas as pd import numpy as np import matplotlib.pyplot as plt import argparse def load_data(file_path): Load the dataset from the given CSV file. try: data = pd.read_csv(file_path) return data except Exception as e: raise ValueError(f\\"Could not load data from {file_path}: {e}\\") def analyze_column(data, column_name): Compute and display statistics for a given numerical column, and plot a histogram. if column_name not in data.columns: raise ValueError(f\\"Column \'{column_name}\' does not exist in the dataset\\") # Handle missing data column_data = data[column_name].dropna() if not np.issubdtype(column_data.dtype, np.number): raise ValueError(f\\"Column \'{column_name}\' is not numerical\\") mean_value = column_data.mean() median_value = column_data.median() std_dev_value = column_data.std() print(f\\"Statistics for column \'{column_name}\':\\") print(f\\"Mean: {mean_value}\\") print(f\\"Median: {median_value}\\") print(f\\"Standard Deviation: {std_dev_value}\\") plt.hist(column_data, bins=30, edgecolor=\'k\') plt.title(f\'Histogram of {column_name}\') plt.xlabel(column_name) plt.ylabel(\'Frequency\') plt.show() def main(): parser = argparse.ArgumentParser(description=\\"Analyze numerical column in a CSV file\\") parser.add_argument(\\"file_path\\", help=\\"Path to the CSV file\\") parser.add_argument(\\"column_name\\", help=\\"Name of the column to analyze\\") args = parser.parse_args() data = load_data(args.file_path) analyze_column(data, args.column_name) if __name__ == \\"__main__\\": main()"},{"question":"Create a Python function that takes a list of integers as input and returns a new list where each integer is shifted to its next multiple of 5. For example, the number 12 would become 15, and the number 48 would become 50. Handle negative numbers appropriately (e.g., -8 becomes -5).","solution":"def shift_to_next_multiple_of_5(numbers): Takes a list of integers and returns a new list where each integer is shifted to its next multiple of 5. :param numbers: List of integers :return: New list of integers, shifted to the next multiple of 5 return [(n + 5) // 5 * 5 if n % 5 != 0 else n for n in numbers]"},{"question":"Create a Python function that simulates a simplified version of a social networking service. The function should accept user inputs to perform various tasks like creating user profiles, establishing friendships, and displaying a list of friends for a given user. You must implement the following operations: 1. **Create a User Profile**: Takes a unique user ID and name, and adds them to the network. 2. **Add Friend**: Establish a friendship between two existing users. 3. **List Friends**: List all friends of a specific user. 4. **Remove Friend**: Remove an existing friendship between two users. 5. **Delete User Profile**: Removes a user and all associated friendships from the network. The function should offer an interactive console-based menu to perform these tasks, updating the network\'s state accordingly. Use Python\'s dictionaries and sets to manage the network data structure. Demonstrate the functionality with a series of example operations.","solution":"class SocialNetwork: def __init__(self): self.users = {} self.friendships = {} def create_user_profile(self, user_id, name): if user_id in self.users: return \\"User ID already exists.\\" self.users[user_id] = name self.friendships[user_id] = set() return \\"User profile created.\\" def add_friend(self, user_id1, user_id2): if user_id1 not in self.users or user_id2 not in self.users: return \\"One or both users do not exist.\\" if user_id1 == user_id2: return \\"A user cannot be friends with themselves.\\" self.friendships[user_id1].add(user_id2) self.friendships[user_id2].add(user_id1) return \\"Friendship added.\\" def list_friends(self, user_id): if user_id not in self.users: return \\"User does not exist.\\" friends = list(self.friendships[user_id]) friend_names = [self.users[friend_id] for friend_id in friends] return friend_names if friends else \\"This user has no friends.\\" def remove_friend(self, user_id1, user_id2): if user_id1 not in self.users or user_id2 not in self.users: return \\"One or both users do not exist.\\" if user_id2 in self.friendships[user_id1]: self.friendships[user_id1].remove(user_id2) self.friendships[user_id2].remove(user_id1) return \\"Friendship removed.\\" return \\"Users are not friends.\\" def delete_user_profile(self, user_id): if user_id not in self.users: return \\"User does not exist.\\" for friend_id in self.friendships[user_id]: self.friendships[friend_id].remove(user_id) del self.friendships[user_id] del self.users[user_id] return \\"User profile deleted.\\""},{"question":"Create a function that implements the Binary Search algorithm in Python and use it to search for an element in a sorted list. Additionally, use the `time` module to measure the performance (execution time) of your function for different input sizes. Discuss how the input size affects the performance, and print the execution time for list sizes of 10, 100, 1000, and 10,000 elements. Ensure your function handles cases where the element is not present in the list gracefully, and test it with both positive and negative cases.","solution":"import time def binary_search(arr, target): Performs binary search on a sorted list to find the index of the target element. Returns the index of the target if found, otherwise returns -1. :param arr: List of sorted elements :param target: Element to search for :return: Index of target if found, -1 otherwise left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1 def measure_performance(): Measures and prints the performance of the binary_search function for different input sizes. sizes = [10, 100, 1000, 10000] target = -1 # Element not in list for maximum search depth for size in sizes: arr = list(range(size)) start_time = time.time() binary_search(arr, target) end_time = time.time() print(f\\"List Size: {size} - Execution Time: {end_time - start_time:.10f} seconds\\") measure_performance()"},{"question":"A company wants to organize a sports event in which employees can register in teams. Each team must consist of an equal number of members. The company has a list of employees with a variable number of employees in each department. The task is to form the largest possible teams such that each department\'s members are evenly distributed among these teams. For example, if the departments have the following number of employees: - Department A: 18 employees - Department B: 30 employees - Department C: 42 employees The largest team size that allows all departments\' employees to be evenly distributed among the teams is 6 (since 6 is the greatest common divisor (GCD) of 18, 30, and 42). This means that each team will consist of 6 members and each department will be able to evenly split its employees among these teams. **Task:** Write a function `largest_team_size` that takes a list of integers representing the number of employees in each department and returns the largest possible team size. **Function Signature:** ```python def largest_team_size(department_sizes: List[int]) -> int: # Your code here ``` **Input:** - A list of integers, `department_sizes`, where each integer represents the number of employees in a department. - The length of the list will be between 1 and 100. - The number of employees in a department will be between 1 and 1000. **Output:** - An integer representing the largest team size possible. **Example:** ```python print(largest_team_size([18, 30, 42])) # Output: 6 print(largest_team_size([12, 15, 21])) # Output: 3 print(largest_team_size([7, 14, 28])) # Output: 7 print(largest_team_size([50, 75, 100])) # Output: 25 ``` **Note:** - You may find the `math.gcd` function useful for computing the greatest common divisor of two numbers. - Consider using the `reduce` function from the `functools` module to iteratively apply the GCD function across the entire list.","solution":"from typing import List from math import gcd from functools import reduce def largest_team_size(department_sizes: List[int]) -> int: Returns the largest possible team size that allows all departments\' employees to be evenly distributed among the teams. return reduce(gcd, department_sizes)"},{"question":"Write a function that takes an array of integers as input and returns an array of integers that are missing from the range defined by the minimum and maximum values in the input array. For example, if the input array is [4, 7, 9, 4, 8], the resultant array should include [5, 6]. Function Signature: def find_missing_numbers(arr: List[int]) -> List[int]: pass","solution":"from typing import List def find_missing_numbers(arr: List[int]) -> List[int]: Returns an array of integers that are missing from the range defined by the minimum and maximum values in the input array. if not arr: return [] min_val = min(arr) max_val = max(arr) full_range = set(range(min_val, max_val + 1)) arr_set = set(arr) missing_numbers = sorted(full_range - arr_set) return missing_numbers"},{"question":"Write a Python function that reads a JSON file containing user information, validates the data against a given schema using the `jsonschema` library, and handles validation errors appropriately. The function should also include a feature to log invalid entries to a separate file for further analysis.","solution":"import json import jsonschema from jsonschema import validate import logging # Initialize logger logger = logging.getLogger(\'invalid_entries_logger\') logger.setLevel(logging.ERROR) fh = logging.FileHandler(\'invalid_entries.log\') formatter = logging.Formatter(\'%(asctime)s - %(message)s\') fh.setFormatter(formatter) logger.addHandler(fh) def read_and_validate_json(file_path, schema): Reads a JSON file, validates its content against a given schema, and logs invalid entries. :param file_path: Path to the JSON file containing user information :param schema: JSON schema to validate the data against :return: Parsed JSON data if valid, None otherwise try: with open(file_path, \'r\') as file: data = json.load(file) validate(instance=data, schema=schema) return data except jsonschema.exceptions.ValidationError as ve: logger.error(f\\"Validation error: {ve.message}\\") except json.JSONDecodeError as jde: logger.error(f\\"JSON decode error: {jde.msg}\\") except Exception as e: logger.error(f\\"Unexpected error: {str(e)}\\") return None"},{"question":"You are provided with a dataset containing historical stock prices for multiple companies. The dataset is available at http://example.com/stock_prices.csv and includes the following columns: \'Date\', \'Company\', \'Open\', \'High\', \'Low\', \'Close\', \'Volume\'. Your task is to analyze this dataset to determine the following: 1. Calculate the average closing price for each company. 2. Identify the day with the highest trading volume for each company. 3. Create a line plot representing the daily closing prices of a specified company over time using matplotlib. In addition to the above tasks, implement data cleaning methods to handle any inconsistencies or errors in the dataset without using any built-in libraries. The dataset may consist of erroneous or missing data under any column. Develop your own functions to identify and handle these errors while pre-processing the data for analysis and plotting. You are also provided with a piece of erroneous code that is intended to plot the closing prices without any data cleaning. Examine this code, identify the issues, and write a comprehensive solution that meets the requirements mentioned above. Erroneous code: import pandas as pd import matplotlib.pyplot as plt # Load the data data = pd.read_csv(\\"http://example.com/stock_prices.csv\\") # Filter data for the specified company company_data = data[data[\'Company\'] == \'Company_Name\'] # Plot the closing prices plt.figure(figsize=(10,6)) plt.plot(company_data[\'Date\'], company_data[\'Close\']) plt.xlabel(\'Date\') plt.ylabel(\'Closing Price\') plt.title(\'Daily Closing Prices for Company_Name\') plt.show()","solution":"import pandas as pd import matplotlib.pyplot as plt def load_data(url): Loads data from the specified CSV URL. return pd.read_csv(url) def clean_data(data): Cleans the dataset by handling missing values and erroneous data. # Remove rows where any of the critical columns contain missing values data = data.dropna(subset=[\'Date\', \'Company\', \'Open\', \'High\', \'Low\', \'Close\', \'Volume\']) # Convert the data types to appropriate types data[\'Date\'] = pd.to_datetime(data[\'Date\'], errors=\'coerce\') data[\'Open\'] = pd.to_numeric(data[\'Open\'], errors=\'coerce\') data[\'High\'] = pd.to_numeric(data[\'High\'], errors=\'coerce\') data[\'Low\'] = pd.to_numeric(data[\'Low\'], errors=\'coerce\') data[\'Close\'] = pd.to_numeric(data[\'Close\'], errors=\'coerce\') data[\'Volume\'] = pd.to_numeric(data[\'Volume\'], errors=\'coerce\') # Drop rows with any conversions that failed (contain NaN) data = data.dropna() return data def calculate_average_closing_price(data): Calculates the average closing price for each company. return data.groupby(\'Company\')[\'Close\'].mean().reset_index() def highest_trading_volume_day(data): Identifies the day with the highest trading volume for each company. idx = data.groupby(\'Company\')[\'Volume\'].idxmax() return data.loc[idx, [\'Company\', \'Date\', \'Volume\']] def plot_closing_prices(data, company): Creates a line plot representing the daily closing prices of the specified company over time. company_data = data[data[\'Company\'] == company] plt.figure(figsize=(10,6)) plt.plot(company_data[\'Date\'], company_data[\'Close\']) plt.xlabel(\'Date\') plt.ylabel(\'Closing Price\') plt.title(f\'Daily Closing Prices for {company}\') plt.xticks(rotation=45) plt.tight_layout() plt.show() # Example usage (assuming the presence of required URL): # url = \\"http://example.com/stock_prices.csv\\" # data = load_data(url) # clean_data = clean_data(data) # average_closing_prices = calculate_average_closing_price(clean_data) # highest_volume_days = highest_trading_volume_day(clean_data) # plot_closing_prices(clean_data, \'Company_Name\')"},{"question":"Write a function to perform matrix multiplication of two given 2D lists (matrices). The function should take two matrices as input and return their product matrix. You may assume that the matrices are well-formed and their dimensions are compatible for multiplication. Please provide the following Python code with your solutions: ```python from typing import List def matrix_multiply(matrix1: List[List[int]], matrix2: List[List[int]]) -> List[List[int]]: Multiplies two matrices and returns the resultant matrix. >>> matrix1 = [ ... [1, 2], ... [3, 4] ... ] >>> matrix2 = [ ... [5, 6], ... [7, 8] ... ] >>> matrix_multiply(matrix1, matrix2) [[19, 22], [43, 50]] >>> matrix1 = [ ... [2, 0], ... [1, 3] ... ] >>> matrix2 = [ ... [4, 5], ... [6, 7] ... ] >>> matrix_multiply(matrix1, matrix2) [[8, 10], [22, 26]] rows_m1 = len(matrix1) cols_m1 = len(matrix1[0]) cols_m2 = len(matrix2[0]) product = [[0] * cols_m2 for _ in range(rows_m1)] for i in range(rows_m1): for j in range(cols_m2): for k in range(cols_m1): product[i][j] += matrix1[i][k] * matrix2[k][j] return product ```","solution":"from typing import List def matrix_multiply(matrix1: List[List[int]], matrix2: List[List[int]]) -> List[List[int]]: Multiplies two matrices and returns the resultant matrix. >>> matrix1 = [ ... [1, 2], ... [3, 4] ... ] >>> matrix2 = [ ... [5, 6], ... [7, 8] ... ] >>> matrix_multiply(matrix1, matrix2) [[19, 22], [43, 50]] >>> matrix1 = [ ... [2, 0], ... [1, 3] ... ] >>> matrix2 = [ ... [4, 5], ... [6, 7] ... ] >>> matrix_multiply(matrix1, matrix2) [[8, 10], [22, 26]] rows_m1 = len(matrix1) cols_m1 = len(matrix1[0]) cols_m2 = len(matrix2[0]) product = [[0] * cols_m2 for _ in range(rows_m1)] for i in range(rows_m1): for j in range(cols_m2): for k in range(cols_m1): product[i][j] += matrix1[i][k] * matrix2[k][j] return product"},{"question":"Design a function that takes a binary tree and returns the maximum path sum from one leaf to another within the tree. The path must pass through at least two nodes in the tree (i.e., it can\'t be from a single leaf to itself). Each node in the binary tree contains an integer value, which can be positive or negative. For example, consider the below tree: ``` 1 / 2 3 / 4 5 ``` The maximum path sum from one leaf to another is 11 (4 -> 2 -> 1 -> 3). Implement the function as follows: def maxPathLeafToLeaf(root):","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPathLeafToLeaf(root): def maxPathSum(node): nonlocal max_sum if not node: return float(\'-inf\') # to represent the notion of path sum through non-existent node if not node.left and not node.right: return node.val left_sum = maxPathSum(node.left) right_sum = maxPathSum(node.right) if node.left and node.right: max_sum = max(max_sum, left_sum + right_sum + node.val) return max(left_sum, right_sum) + node.val elif node.left: return left_sum + node.val else: return right_sum + node.val if not root: return 0 max_sum = float(\'-inf\') maxPathSum(root) return max_sum"},{"question":"Develop a function that simulates a simple text editor with the ability to perform a limited set of operations: insert a string at the end of the current text, delete the last `k` characters, and undo the last operation. Your implementation should maintain efficient performance and manage the history of operations with a mechanism that supports multiple undo operations in a row. Specifically, the text editor should support the following operations: 1. **Insert string**: Adds the provided string to the end of the current content. 2. **Delete k**: Removes the last `k` characters from the current content. 3. **Undo**: Reverts the most recent modification operation (either an insert or delete). Create this functionality using at least one data structure that effectively manages the history of operations for undo capabilities. Implement this mechanism in a way that ensures the complexity regarding both time and space is manageable and optimized. Provide test cases to verify the correctness and performance of your text editor implementation.","solution":"class SimpleTextEditor: def __init__(self): self.text = \\"\\" self.history = [] def insert(self, string): Insert string at the end of the current text. self.history.append(self.text) self.text += string def delete(self, k): Delete the last k characters from the current text. self.history.append(self.text) self.text = self.text[:-k] def undo(self): Undo the last operation. if self.history: self.text = self.history.pop() def get_text(self): Returns the current text. return self.text"},{"question":"Write a function that takes an unsorted list of integers and returns a new list that contains only the even numbers from the original list, sorted in ascending order.","solution":"def filter_and_sort_even_numbers(numbers): Returns a list of even numbers, sorted in ascending order from the given unsorted list of integers. even_numbers = [num for num in numbers if num % 2 == 0] return sorted(even_numbers)"},{"question":"Given two strings s1 and s2, write a program to check if s1 and s2 are anagrams of each other. Two strings are considered anagrams if they can be written using the exact same characters (whitespace and punctuation included), just with a different arrangement. The solution should not use any libraries or helper functions for sorting or counting. Example: - s1 = \\"listen\\", s2 = \\"silent\\" should return True - s1 = \\"hello\\", s2 = \\"billion\\" should return False Additionally, provide test cases that cover different scenarios including: - Strings with different lengths - Strings containing whitespace - Strings with punctuation - Upper and lower case characters.","solution":"def are_anagrams(s1, s2): Check if two strings are anagrams of each other. Two strings are anagrams if they can be written using the exact same characters (whitespace and punctuation included), just with a different arrangement. The solution does not use any libraries or helper functions for sorting or counting. if len(s1) != len(s2): return False # Initialize a dictionary to count characters char_count = {} # Count characters in s1 for char in s1: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Subtract the count of characters in s2 for char in s2: if char in char_count: char_count[char] -= 1 else: return False # Check if all counts are zero for count in char_count.values(): if count != 0: return False return True"},{"question":"Create a Python function that takes two arguments: a string and a character. The function should return a list of indices representing the positions in the string where the character is found in lowercase, ignoring any instances where the character is uppercase. If the character is not found in the string, return an empty list. The function should be case-sensitive for the character to be searched. For example, `find_indices(\\"Hello World\\", \\"o\\")` should return `[4, 7]`, and `find_indices(\\"Hello World\\", \\"O\\")` should return `[]`.","solution":"def find_indices(s, char): Returns a list of indices representing the positions in the string `s` where the character `char` is found in lowercase. Args: s (str): The input string. char (str): The character to be searched for. Returns: list: A list of indices where the character is found in the string. return [index for index, c in enumerate(s) if c == char]"},{"question":"Write a program to simulate a simple reservation system for a restaurant having a fixed number of tables. The system should allow clients to book tables and get reservations for a specific time. Each table can only be booked once per time slot. Create a class `ReservationSystem` with the following methods: 1. `__init__(self, table_count: int)`: Initializes the system with a specified number of tables. 2. `reserve(self, client_id: int, time_slot: str) -> bool`: Books a table for the client for the specified time slot. If all tables are booked for that time slot, the reservation request is denied. Returns `True` if reservation is successful, `False` otherwise. 3. `cancel(self, client_id: int, time_slot: str) -> bool`: Cancels the reservation for the client for the specified time slot. Returns `True` if cancellation is successful, `False` if there was no reservation to cancel. 4. `get_reservations(self, time_slot: str) -> List[int]`: Returns a list of client IDs who have reserved tables for the specified time slot. 5. `available_tables(self, time_slot: str) -> int`: Returns the number of available tables for the specified time slot. Ensure the reservations are managed correctly, and clients cannot double book the same time slot. Here is your starter code: ```python class ReservationSystem: def __init__(self, table_count: int): pass def reserve(self, client_id: int, time_slot: str) -> bool: pass def cancel(self, client_id: int, time_slot: str) -> bool: pass def get_reservations(self, time_slot: str) -> list: pass def available_tables(self, time_slot: str) -> int: pass ``` Examples: ```python # Initialize with 2 tables system = ReservationSystem(2) # Client 1 reserves a table for \\"18:00\\" assert system.reserve(1, \\"18:00\\") == True # Reservation successful # Client 2 reserves a table for \\"18:00\\" assert system.reserve(2, \\"18:00\\") == True # Reservation successful # Client 3 tries to reserve a table for \\"18:00\\" but all tables are booked assert system.reserve(3, \\"18:00\\") == False # Reservation denied # Get reservations for \\"18:00\\" assert system.get_reservations(\\"18:00\\") == [1, 2] # Check available tables for \\"18:00\\" assert system.available_tables(\\"18:00\\") == 0 # Client 1 cancels the reservation for \\"18:00\\" assert system.cancel(1, \\"18:00\\") == True # Cancellation successful # Client 3 reserves a table for \\"18:00\\" assert system.reserve(3, \\"18:00\\") == True # Reservation successful # Get reservations for \\"18:00\\" assert system.get_reservations(\\"18:00\\") == [2, 3] # Check available tables for \\"18:00\\" assert system.available_tables(\\"18:00\\") == 0 ```","solution":"class ReservationSystem: def __init__(self, table_count: int): self.table_count = table_count self.reservations = {} def reserve(self, client_id: int, time_slot: str) -> bool: if time_slot not in self.reservations: self.reservations[time_slot] = [] if len(self.reservations[time_slot]) < self.table_count and client_id not in self.reservations[time_slot]: self.reservations[time_slot].append(client_id) return True return False def cancel(self, client_id: int, time_slot: str) -> bool: if time_slot in self.reservations and client_id in self.reservations[time_slot]: self.reservations[time_slot].remove(client_id) return True return False def get_reservations(self, time_slot: str) -> list: return self.reservations.get(time_slot, []) def available_tables(self, time_slot: str) -> int: if time_slot in self.reservations: used_tables = len(self.reservations[time_slot]) else: used_tables = 0 return self.table_count - used_tables"},{"question":"Design a function that accepts an array of integers and a target value. The function should determine if there are two distinct elements in the array whose sum equals the target value. If such a pair exists, return their indices in the form of a two-element list. If no such pair exists, return an empty list. Ensure the function operates with a time complexity that is appropriate for large input sizes.","solution":"def two_sum(nums, target): Determines if there are two distinct elements in the array whose sum equals the target value. Returns their indices if such elements are found, otherwise returns an empty list. :param nums: List[int] :param target: int :return: List[int] num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: return [num_dict[complement], i] num_dict[num] = i return []"},{"question":"Create a function that accepts an array of integers and an integer value \'n\'. The function should return a new array containing only the elements from the original array that are greater than \'n\'. Ensure the new array maintains the order of elements as they appeared in the original array. If no such elements exist, return an empty array.","solution":"def filter_greater_than(arr, n): Returns a new array containing only the elements from the original array that are greater than n. Args: arr (list): The original array of integers. n (int): The integer threshold. Returns: list: A new array with elements greater than n. return [x for x in arr if x > n]"},{"question":"Develop a Python function that checks whether an input string has balanced parentheses. The function should consider the following parentheses types: round `()`, square `[]`, and curly `{}` braces. It should process nested and concatenated parentheses efficiently and return `True` if all are balanced, or `False` otherwise. Write a full function definition, including its parameters and any necessary helper functions. Additionally, write unit tests to validate your implementation against a variety of cases, such as strings with balanced parentheses, unbalanced parentheses, mixed types, and no parentheses. Here are some example cases: - balanced_parentheses(\\"(){}[]\\") should return `True` - balanced_parentheses(\\"{[()]}\\") should return `True` - balanced_parentheses(\\"{[(])}\\") should return `False` - balanced_parentheses(\\"{{[[(())]]}}\\") should return `True` - balanced_parentheses(\\"}{\\") should return `False` - balanced_parentheses(\\"\\") should return `True`","solution":"def balanced_parentheses(s): Check if the input string has balanced parentheses. Parameters: s (str): The input string containing parentheses. Returns: bool: True if the parentheses are balanced, False otherwise. stack = [] matching_parentheses = { \')\': \'(\', \']\': \'[\', \'}\': \'{\' } for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or matching_parentheses[char] != stack.pop(): return False return len(stack) == 0"},{"question":"**Construct a function that accepts a string and returns the most frequently occurring character. In the event of a tie, the character that appears first in order should be returned. Ignore case sensitivity.**","solution":"def most_frequent_char(s): Returns the most frequently occurring character in the string `s`. In case of a tie, the character that appears first is returned. Ignores case sensitivity. s = s.lower() freq = {} for char in s: if char.isalpha(): if char in freq: freq[char] += 1 else: freq[char] = 1 max_freq = 0 most_freq_char = \'\' for char in s: if char.isalpha() and freq[char] > max_freq: max_freq = freq[char] most_freq_char = char return most_freq_char"},{"question":"Write a Python function to convert a binary tree into its mirror image. Your function should take the root node of a binary tree as input and return the root node of the mirrored tree. The definition for a binary tree node is given. Your implementation should adjust the tree in place without creating new nodes. ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def mirror_tree(root: TreeNode) -> TreeNode: # Implement your function here pass ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def mirror_tree(root: TreeNode) -> TreeNode: if root is None: return None # Swap the left and right children root.left, root.right = root.right, root.left # Recursively mirror the left and right subtrees if root.left: mirror_tree(root.left) if root.right: mirror_tree(root.right) return root"},{"question":"Create a function in Python that takes a list of integers and returns another list containing only the prime numbers from the input list. Additionally, the function should also sort the prime numbers in ascending order before returning the list. Ensure the function handles edge cases, such as empty lists or lists with no prime numbers, appropriately. Include detailed comments and error handling in your code implementation.","solution":"def is_prime(n): Helper function to check if a number n is a prime number. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def filter_and_sort_primes(numbers): This function takes a list of integers and returns a list with only the prime numbers sorted in ascending order. :param numbers: List of integers. :return: List of sorted prime numbers. if not isinstance(numbers, list): raise ValueError(\\"Input must be a list of integers.\\") for num in numbers: if not isinstance(num, int): raise ValueError(\\"All elements in the input list must be integers.\\") prime_numbers = [num for num in numbers if is_prime(num)] return sorted(prime_numbers)"},{"question":"You are given two strings, `s` and `t`, consisting of lowercase letters. Your task is to determine if you can obtain string `t` by deleting some characters from string `s` without changing the order of the remaining characters. If possible, return `True`; otherwise, return `False`. Write a function `isSubsequence(s: str, t: str) -> bool` that implements this logic. # Example ```python isSubsequence(\\"abcde\\", \\"ace\\") # True isSubsequence(\\"abcde\\", \\"aec\\") # False ``` # Constraints - The length of both `s` and `t` will not exceed 1000. - Both `s` and `t` consist of only lowercase letters (`a`-`z`).","solution":"def isSubsequence(s: str, t: str) -> bool: Determine if string t can be obtained by deleting some characters from string s without changing the order of the remaining characters. :param s: The original string from which characters can be deleted. :param t: The target string to obtain. :return: True if t can be obtained from s, otherwise False. t_index = 0 t_length = len(t) for char in s: if t_index < t_length and char == t[t_index]: t_index += 1 return t_index == t_length"},{"question":"Write a function that performs a binary search on a sorted array of integers. The function should take three arguments: the sorted array, the target integer to search for, and a boolean flag to determine whether to search in increasing (True) or decreasing (False) order. If the target integer is found, return its index; otherwise, return -1. Ensure your function handles both scenarios (increasing and decreasing order) efficiently.","solution":"def binary_search(arr, target, increasing=True): Performs a binary search on a sorted array of integers. :param arr: List of sorted integers :param target: Integer to search for :param increasing: Boolean flag, True if the array is sorted in increasing order, False if in decreasing order :return: The index of the target if found, otherwise -1 left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid if increasing: # Array sorted in increasing order if target < arr[mid]: right = mid - 1 else: left = mid + 1 else: # Array sorted in decreasing order if target < arr[mid]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function that takes a list of integers and an integer `k`, and returns the k-th largest unique element in the list. If there are fewer than k unique elements, return None. For example, given the list [3, 1, 5, 1, 3, 7, 9, 7] and k = 3, the function should return 5.","solution":"def kth_largest_unique(nums, k): Returns the k-th largest unique element in the list of integers nums. If there are fewer than k unique elements, returns None. unique_nums = list(set(nums)) # Remove duplicates unique_nums.sort(reverse=True) # Sort in descending order if len(unique_nums) < k: return None return unique_nums[k-1]"},{"question":"Implement a function that takes a list of integers and returns a list with the first repeated number removed from the original list. If there are no repeated numbers, return the original list. Your function should efficiently handle lists with up to 10^6 elements. Ensure to maintain the order of the elements in the output list.","solution":"def remove_first_repeated(lst): Remove the first repeated number from the list. If no repeated numbers exist, return the original list. seen = set() # Track the first repeated number\'s index repeated_index = -1 for i, num in enumerate(lst): if num in seen: repeated_index = i break seen.add(num) if repeated_index == -1: # No repeated number found, return original list return lst # Remove the first repeated number return lst[:repeated_index] + lst[repeated_index+1:]"},{"question":"You are given a string containing digits from \'1\' to \'9\' and only one character between \'a\' and \'f\'. Your task is to find the position of the character that appears earliest lexicographically in the string. If the string does not contain any characters from \'a\' to \'f\', return -1. # Examples: Example 1: Input: \\"1234a56789\\" Output: 4 Example 2: Input: \\"111b3999f555\\" Output: 3 Example 3: Input: \\"987654321\\" Output: -1 # Constraints: - The input string is non-empty and has at most length 1000. # Function Signature: ```python def find_earliest_letter_position(s: str) -> int: pass ``` # Notes: - The function should be case insensitive. - `find_earliest_letter_position` should return the zero-based index of the earliest appearing character between \'a\' and \'f\'. If no such character is found, the function should return -1.","solution":"def find_earliest_letter_position(s: str) -> int: Returns the zero-based index of the earliest appearing character between \'a\' and \'f\' in the string. If no such character is found, returns -1. for i, char in enumerate(s): if char in \'abcdef\': return i return -1"},{"question":"In a given string, identify and count the number of distinct characters that appear more than once. For example, given the string \\"programming\\": - \'r\', \'g\', and \'m\' appear more than once. - The number of distinct characters that appear more than once is 3. Your function should return 3 when the input is \\"programming\\".","solution":"def count_repeated_characters(s): Returns the number of distinct characters that appear more than once in the string s. from collections import Counter # Count frequency of each character char_count = Counter(s) # Identify and count characters appearing more than once repeated_characters_count = sum(1 for count in char_count.values() if count > 1) return repeated_characters_count"},{"question":"**Problem: String Compression** Description: Implement a function `compress_string(s)` that compresses a given string `s` by replacing consecutive repeated characters with the character followed by the number of consecutive repetitions. If the compressed string is longer than the original string, the function should return the original string. For example, the string `\\"aabcccccaaa\\"` would be compressed to `\\"a2b1c5a3\\"`. If the compressed string is not shorter than the original string, the function should return the original string, in this case, `\\"a2b1c5a3\\"` which is longer than `\\"aabcccccaaa\\"`, so the function should return the original string. **Constraints:** - The input string will only contain lowercase English letters. - The length of the input string is between 1 and 1000. **Function Signature:** ```python def compress_string(s: str) -> str: pass ``` **Example 1:** ```python Input: s = \\"aabcccccaaa\\" Output: \\"a2b1c5a3\\" ``` **Example 2:** ```python Input: s = \\"abcdef\\" Output: \\"abcdef\\" ``` **Example 3:** ```python Input: s = \\"aabbcc\\" Output: \\"aabbcc\\" ``` **Example 4:** ```python Input: s = \\"aaaaa\\" Output: \\"a5\\" ``` **Example 5:** ```python Input: s = \\"a\\" Output: \\"a\\" ``` **Explanation:** - Example 1: Compressing produces \\"a2b1c5a3\\", which is shorter. - Example 2: Compression would produce \\"a1b1c1d1e1f1\\", which is longer. - Example 3: Compression would produce \\"a2b2c2\\", which is not shorter. - Example 4: Compression produces \\"a5\\", which is shorter. - Example 5: The input string has only one character, so the compressed version would not be shorter. Write a function that follows the provided specification and demonstrates accuracy and efficiency in solving the described problem.","solution":"def compress_string(s): Compresses the string by replacing consecutive repeated characters with the character followed by the number of repetitions. If the compressed string is not shorter, returns the original string. if len(s) == 0: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(s[i-1] + str(count)) count = 1 # add the last set of characters compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) if len(compressed_string) >= len(s): return s return compressed_string"},{"question":"Write a function that restructures a nested list into a flattened dictionary with keys representing the original nested structure. The keys should be strings that represent the path to reach each value in the original nested list. Assume the elements in the nested lists can be integers, strings, or further nested lists. For instance, given the nested list: ``` [ [1, 2, [3, 4]], [5, [6, 7], 8], [9, [10, [11, 12]]] ] ``` The output should be a dictionary with keys such as \\"0_0\\", \\"0_1\\", \\"0_2_0\\", etc., representing the paths to each value. An expected output for the provided nested list would be: ``` { \\"0_0\\": 1, \\"0_1\\": 2, \\"0_2_0\\": 3, \\"0_2_1\\": 4, \\"1_0\\": 5, \\"1_1_0\\": 6, \\"1_1_1\\": 7, \\"1_2\\": 8, \\"2_0\\": 9, \\"2_1_0\\": 10, \\"2_1_1_0\\": 11, \\"2_1_1_1\\": 12 } ``` Design a function to perform this transformation. Ensure it handles any depth of nesting within the list.","solution":"def flatten_nested_list(nested_list): Flattens a nested list into a dictionary with keys representing paths to the values. Args: nested_list (list): The nested list to be flattened. Returns: dict: A flattened dictionary with keys as paths. flat_dict = {} def recurse(curr_list, path): for i, item in enumerate(curr_list): new_path = path + [i] if isinstance(item, list): recurse(item, new_path) else: key = \\"_\\".join(map(str, new_path)) flat_dict[key] = item recurse(nested_list, []) return flat_dict"},{"question":"Design a function that analyzes a string to identify the most frequently occurring character. In the case where multiple characters have the highest frequency, return the character that appears first in the string. Ignore spaces and punctuation, and ensure the function is case-insensitive. # Input - A string `s` containing alphabetic characters, spaces, and punctuation. # Output - A single character, the most frequently occurring one based on the criteria mentioned. # Example ```python >>> most_frequent_character(\\"Hello World!\\") \'l\' >>> most_frequent_character(\\"A quick brown fox jumps over the lazy dog.\\") \'o\' >>> most_frequent_character(\\"To be or not to be, that is the question.\\") \'t\' ``` # Constraints - The string length does not exceed 1000 characters. - The function should have a linear time complexity concerning the length of the string. # Hints - Consider using a dictionary to count character occurrences. - Ensure to handle the case-insensitivity by converting the string to a single case before processing.","solution":"def most_frequent_character(s): Analyzes a string to identify the most frequently occurring character. Ignores spaces and punctuation, and is case-insensitive. Returns the most frequently occurring character based on the criteria mentioned. # Convert string to lower case and initialize a frequency dictionary s = s.lower() frequency = {} for char in s: if char.isalpha(): # Ignore non-alphabetic characters if char in frequency: frequency[char] += 1 else: frequency[char] = 1 # Initialize a variable to track the most frequent character and its count most_frequent = None max_count = 0 for char in s: if char.isalpha() and frequency[char] > max_count: most_frequent = char max_count = frequency[char] return most_frequent"},{"question":"You are given a string representing a mathematical expression containing digits, \'+\', \'-\', \'*\', and \'/\' operators, and possibly spaces. Your task is to parse and evaluate the expression following the standard order of operations (PEMDAS/BODMAS rules). First, handle any multiplicative and divisional operations from left to right, and then handle additive and subtractive operations from left to right. Implement a function that takes this string as input and returns the evaluated result as a float rounded to two decimal places. For example, given the expression \\"3 + 5 * 2 / 10 - 1\\": 1. The multiplicative and divisional operations (`5 * 2 / 10`) should be evaluated first, resulting in `1`. 2. Then, the additive and subtractive operations (`3 + 1 - 1`) should be evaluated, resulting in `3`. 3. The final result should be `3.00`. Consider all possible edge cases including division by zero, improperly formatted expressions (e.g., consecutive operators like `3 ++ 2`), and ensure to ignore any extra spaces while parsing the expression. If the expression is invalid, return \'Invalid expression\'.","solution":"import re def evaluate_expression(expression): try: # Remove spaces from the expression expression = expression.replace(\' \', \'\') # Validate the expression using regex if not re.match(r\'^[0-9+-*/()]+\', expression): return \'Invalid expression\' # Helper functions to evaluate subexpressions def parse_term(s): terms = re.split(r\'([+-])\', s) result = parse_factor(terms[0]) for i in range(1, len(terms), 2): operator = terms[i] operand = parse_factor(terms[i+1]) if operator == \'+\': result += operand elif operator == \'-\': result -= operand return result def parse_factor(s): factors = re.split(r\'([*/])\', s) result = float(factors[0]) for i in range(1, len(factors), 2): operator = factors[i] operand = float(factors[i+1]) if operator == \'*\': result *= operand elif operator == \'/\': if operand == 0: return \'Invalid expression\' result /= operand return result # Evaluate the expression result = parse_term(expression) if result == \'Invalid expression\': return result return round(result, 2) except: return \'Invalid expression\'"},{"question":"You have been given a list of integers. Implement a function `find_peak(nums: List[int]) -> int:` that takes a list of integers as input and returns the peak element. A peak element is an element that is greater than its neighbors. For corner elements, we need to consider only one neighbor. If there are multiple peaks, return the first encountered. Given: - `nums` is a list of integers with at least two elements. Function Signature: ```python def find_peak(nums: List[int]) -> int: pass ``` # Example: ```python find_peak([1, 2, 3, 1]) # Output: 3 find_peak([1, 3, 20, 4, 1, 0]) # Output: 20 find_peak([10, 20, 15, 2, 23, 90, 67]) # Output: 20 ``` # Constraints: - You can assume that `nums` is not sorted. - The input list can contain duplicate elements. - Try to implement this with O(log n) complexity if possible.","solution":"from typing import List def find_peak(nums: List[int]) -> int: Returns a peak element from the given list of integers. A peak element is greater than its neighbors. For corner elements, we need to consider only one neighbor. # If the list has only one element, return it if len(nums) == 1: return nums[0] # Helper function to find peak recursively using binary search approach def find_peak_util(nums, low, high): # Find the mid index mid = low + (high - low) // 2 # Compare middle element with its neighbours (if neighbours exist) if (mid == 0 or nums[mid - 1] <= nums[mid]) and (mid == len(nums) - 1 or nums[mid + 1] <= nums[mid]): return nums[mid] # If the left neighbor of mid is greater than mid, then there is a peak element on the left half elif mid > 0 and nums[mid - 1] > nums[mid]: return find_peak_util(nums, low, mid - 1) # If the right neighbor of mid is greater than mid, then there is a peak element on the right half else: return find_peak_util(nums, mid + 1, high) return find_peak_util(nums, 0, len(nums) - 1)"},{"question":"Implement a function that takes a dictionary where the keys are student names and the values are lists of their respective grades. The function should calculate the average grade for each student and return a new dictionary where the keys are student names and the values are their average grades. def calculate_averages(grades_dict): Given a dictionary with student names as keys and lists of grades as values, return a new dictionary with student names and their average grades. Example: calculate_averages({\\"Alice\\": [90, 80, 70], \\"Bob\\": [100, 75, 80]}) ==> {\\"Alice\\": 80.0, \\"Bob\\": 85.0} calculate_averages({\\"Jane\\": [100, 100, 100], \\"Doe\\": [60, 70, 80]}) ==> {\\"Jane\\": 100.0, \\"Doe\\": 70.0} calculate_averages({\\"John\\": [], \\"Paul\\": [88]}) ==> {\\"John\\": 0.0, \\"Paul\\": 88.0}","solution":"def calculate_averages(grades_dict): Given a dictionary with student names as keys and lists of grades as values, return a new dictionary with student names and their average grades. Example: calculate_averages({\\"Alice\\": [90, 80, 70], \\"Bob\\": [100, 75, 80]}) ==> {\\"Alice\\": 80.0, \\"Bob\\": 85.0} calculate_averages({\\"Jane\\": [100, 100, 100], \\"Doe\\": [60, 70, 80]}) ==> {\\"Jane\\": 100.0, \\"Doe\\": 70.0} calculate_averages({\\"John\\": [], \\"Paul\\": [88]}) ==> {\\"John\\": 0.0, \\"Paul\\": 88.0} averages_dict = {} for student, grades in grades_dict.items(): if len(grades) == 0: average_grade = 0.0 else: average_grade = sum(grades) / len(grades) averages_dict[student] = round(average_grade, 1) return averages_dict"},{"question":"Write a function to identify whether a given string can be rearranged to form a palindrome. Your function should handle a variety of input cases, ensuring you analyze the character frequencies accurately. Implement the function in Python. # Input A single string `inputStr` which may contain any combination of alphanumeric characters and spaces. # Output Return `True` if the string can be rearranged to form a palindrome, and `False` otherwise. # Example ```python # Example 1 inputStr = \\"civic\\" # Returns True, because \\"civic\\" is already a palindrome # Example 2 inputStr = \\"ivicc\\" # Returns True, because it can be rearranged to form \\"civic\\" # Example 3 inputStr = \\"hello\\" # Returns False, because it cannot be rearranged to form a palindrome ``` # Constraints - The input string will only contain lowercase alphabetic characters. - The length of the input string will be at least 1 and not exceed 1000 characters. # Function Signature ```python def can_form_palindrome(inputStr: str) -> bool: pass ```","solution":"def can_form_palindrome(inputStr: str) -> bool: Determine if the given string can be rearranged to form a palindrome. Args: inputStr (str): The input string consisting of lowercase alphabetic characters. Returns: bool: True if the string can be rearranged to form a palindrome, otherwise False. from collections import Counter # Count the frequency of each character in the string char_count = Counter(inputStr) # Count how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if it has at most one odd frequency character count return odd_count <= 1"},{"question":"A company requires a system to organize and verify all its employees\' email addresses. Create an algorithm that takes a list of email addresses as input and verifies if each email address is valid according to the following conditions: 1. It should contain exactly one \\"@\\" symbol. 2. The domain part (after \\"@\\") should contain at least one \\".\\" symbol. 3. Both the local part (before \\"@\\") and the domain part should only contain alphanumeric characters and the allowed special characters: \\".\\", \\"-\\", and \\"_\\". 4. The email address should not start or end with a special character. The algorithm should return a list of boolean values corresponding to whether each email address in the input list is valid or not. Input list: [\\"john.doe@example.com\\", \\"jane_doe@company.co\\", \\"invalid-email@domain@domain.com\\", \\"@missinglocalpart.com\\", \\"another.invalid@domain,.com\\"]","solution":"import re def is_valid_email(email): Checks if the provided email address is valid based on specified conditions. email_regex = r\'^[a-zA-Z0-9](?:[a-zA-Z0-9._-]{0,63}[a-zA-Z0-9])?@[a-zA-Z0-9](?:[a-zA-Z0-9.-]{0,253}[a-zA-Z0-9])?.[a-zA-Z]{2,}\' return bool(re.match(email_regex, email)) def validate_emails(email_list): Validates a list of email addresses. Args: email_list (list): List of email addresses to validate. Returns: list: A list of boolean values corresponding to whether each email address is valid or not. return [is_valid_email(email) for email in email_list]"},{"question":"In Python, write a function that takes a list of dictionaries, where each dictionary represents a student with \'name\' and \'score\' keys. The function should return a list of names of students whose score is above the average score of all the students in the list. Sort the returned list of names in ascending order. Be sure to handle edge cases, such as an empty list or a list with only one student. Your solution should be efficient in terms of both time and space complexity.","solution":"def above_average_students(students): Returns a list of names of students whose score is above the average score of all the students in the list. The returned list is sorted in ascending order. :param students: List of dictionaries with \'name\' and \'score\' keys :return: List of names of students with above average scores, sorted alphabetically if not students: return [] total_score = sum(student[\'score\'] for student in students) average_score = total_score / len(students) above_avg_students = [student[\'name\'] for student in students if student[\'score\'] > average_score] return sorted(above_avg_students)"},{"question":"Write a function to check if a given string is a palindrome, ignoring spaces, punctuation, and case sensitivity. For example, \\"A man, a plan, a canal, Panama\\" should return True since it is a palindrome when these characters are ignored. Your function should return False for non-palindromic strings.","solution":"import re def is_palindrome(s): Returns True if the given string is a palindrome, ignoring spaces, punctuation, and case sensitivity. cleaned_string = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return cleaned_string == cleaned_string[::-1]"},{"question":"Write a Python function that takes an integer n and returns a list of all prime numbers up to n (inclusive). ```python def find_primes(n): # Your code here pass # Example Usage print(find_primes(10)) # Should return [2, 3, 5, 7] ```","solution":"def find_primes(n): Returns a list of all prime numbers up to n (inclusive). if n < 2: return [] primes = [] for num in range(2, n+1): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a Python function that takes a list of dictionaries and a key as parameters. The function should return a new list of dictionaries where each dictionary has an additional key-value pair. The key will be the same for all dictionaries, and the value will be the length of the dictionary before the additional key is added. If a dictionary already contains the given key, the function should replace the existing value with the new value. For example, the input could be a list ` [{\'a\': 1, \'b\': 2}, {\'c\': 3}, {}]` and key `\'length\'`. The output should be ` [{\'a\': 1, \'b\': 2, \'length\': 2}, {\'c\': 3, \'length\': 1}, {\'length\': 0}]`.","solution":"def add_key_with_length(dicts, key): This function takes a list of dictionaries and a key, and returns a new list of dictionaries where each dictionary has an additional key-value pair. The key is always the same for all dictionaries, and the value is the length of the dictionary before the new key is added. Parameters: dicts (list): List of dictionaries key (str): The key to add to each dictionary Returns: list: A new list of dictionaries with the additional key-value pair result = [] for d in dicts: new_dict = d.copy() new_dict[key] = len(d) result.append(new_dict) return result"},{"question":"Write a function that simulates a basic calculator with memory functionality. The calculator should support the operations: addition (+), subtraction (-), multiplication (*), and division (/). Additionally, the calculator should be able to store a value in memory, recall the stored value, and reset the memory. Implement the following methods in the calculator class: - `add(value)`: Adds the provided value to the current value. - `subtract(value)`: Subtracts the provided value from the current value. - `multiply(value)`: Multiplies the current value by the provided value. - `divide(value)`: Divides the current value by the provided value. If the provided value is zero, raise a ZeroDivisionError. - `store()`: Stores the current value in memory. - `recall()`: Recalls the value stored in memory. - `reset_memory()`: Resets the memory to None. The calculator starts with a current value of 0 and no value stored in memory. You may assume all inputs are valid numbers for supported operations.","solution":"class Calculator: def __init__(self): self.current_value = 0 self.memory = None def add(self, value): self.current_value += value return self.current_value def subtract(self, value): self.current_value -= value return self.current_value def multiply(self, value): self.current_value *= value return self.current_value def divide(self, value): if value == 0: raise ZeroDivisionError(\\"Cannot divide by zero.\\") self.current_value /= value return self.current_value def store(self): self.memory = self.current_value def recall(self): return self.memory def reset_memory(self): self.memory = None"},{"question":"Create a program that reads temperature data recorded every hour from a file called \\"temperature_data.txt\\". The file contains two columns: the first column is the timestamp (formatted as \'YYYY-MM-DD HH:MM:SS\'), and the second column is the temperature reading (in degrees Celsius). Your task is to: 1. Read the data from the file and parse it appropriately. 2. Calculate the average, maximum, and minimum temperatures for each day. 3. Identify and flag any temperature reading that is an outlier. A temperature reading is considered an outlier if it is more than 1.5 times the interquartile range (IQR) above the third quartile (Q3) or below the first quartile (Q1) for that day. 4. Generate a summary report in CSV format that includes the daily averages, maximums, minimums, and any identified outliers along with their timestamps. Assume the following sample format for the input file \\"temperature_data.txt\\": ``` 2021-08-01 00:00:00,22.5 2021-08-01 01:00:00,21.9 2021-08-01 02:00:00,21.5 ... 2021-08-02 00:00:00,23.0 2021-08-02 01:00:00,22.4 ... ``` Output CSV format: ``` Date,Average Temp,Max Temp,Min Temp,Outliers 2021-08-01,23.1,25.8,21.0,\\"2021-08-01 03:00:00: 27.6; 2021-08-01 08:00:00: 18.9\\" 2021-08-02,22.7,24.1,20.3,\\"2021-08-02 04:00:00: 18.7\\" ... ```","solution":"import csv from datetime import datetime from collections import defaultdict import numpy as np def read_temperature_data(file_path): data = defaultdict(list) with open(file_path, \'r\') as f: reader = csv.reader(f) for row in reader: timestamp = datetime.strptime(row[0], \'%Y-%m-%d %H:%M:%S\') temp = float(row[1]) data[timestamp.date()].append((timestamp, temp)) return data def calculate_daily_statistics(data): summary = [] for date, readings in data.items(): temperatures = [temp for _, temp in readings] avg_temp = np.mean(temperatures) max_temp = np.max(temperatures) min_temp = np.min(temperatures) q1, q3 = np.percentile(temperatures, [25, 75]) iqr = q3 - q1 lower_bound = q1 - 1.5 * iqr upper_bound = q3 + 1.5 * iqr outliers = [(timestamp, temp) for timestamp, temp in readings if temp < lower_bound or temp > upper_bound] outliers_str = \\"; \\".join([f\\"{timestamp}: {temp}\\" for timestamp, temp in outliers]) if not outliers_str: outliers_str = \\"None\\" summary.append((date, avg_temp, max_temp, min_temp, outliers_str)) return summary def write_summary_to_csv(summary, output_file): with open(output_file, \'w\', newline=\'\') as f: writer = csv.writer(f) writer.writerow([\\"Date\\", \\"Average Temp\\", \\"Max Temp\\", \\"Min Temp\\", \\"Outliers\\"]) for date, avg_temp, max_temp, min_temp, outliers in summary: writer.writerow([date, avg_temp, max_temp, min_temp, outliers]) def generate_temperature_report(file_path, output_file): data = read_temperature_data(file_path) summary = calculate_daily_statistics(data) write_summary_to_csv(summary, output_file)"},{"question":"Given a list of integers, write a function that finds and returns the longest consecutive subsequence. The consecutive numbers can appear in any order in the list and the elements themselves must not be rearranged. Your solution should handle lists with up to 100,000 elements efficiently. For example, given the list: numbers = [100, 4, 200, 1, 3, 2] The function should return: [1, 2, 3, 4]","solution":"def longest_consecutive_subsequence(nums): Finds the longest consecutive subsequence in the list \'nums\'. if not nums: return [] num_set = set(nums) longest_streak = [] for num in nums: # Only start a new sequence if num-1 is not in set (indicating num is the start of a sequence) if num - 1 not in num_set: current_streak = [] current_num = num while current_num in num_set: current_streak.append(current_num) current_num += 1 if len(current_streak) > len(longest_streak): longest_streak = current_streak return longest_streak"},{"question":"Python includes a built-in module called `datetime` which provides a variety of classes to manipulate dates and times. Write a function `days_between_dates(date1, date2)` that takes two date strings in the format \'YYYY-MM-DD\' as input and returns the absolute number of days between the two dates. The function should handle leap years, different month lengths, and ensure the result is always non-negative regardless of the order of input dates. Additionally, include error handling to manage cases where the input does not match the required format or represents an invalid date. Include a few test cases to demonstrate that your function works correctly.","solution":"from datetime import datetime def days_between_dates(date1, date2): Returns the absolute number of days between two dates given in \'YYYY-MM-DD\' format. try: date_format = \\"%Y-%m-%d\\" d1 = datetime.strptime(date1, date_format) d2 = datetime.strptime(date2, date_format) return abs((d2 - d1).days) except ValueError: raise ValueError(\\"Invalid date format or invalid date provided.\\")"},{"question":"Suppose you are working on a website where users can post reviews for various products. Each review consists of a username, product ID, rating (integer value between 1 and 5), and an optional comment. The website allows users to update their reviews, but it does not permit more than one review per product per user. You have been tasked with writing a Python function that will check if a given review should be added or updated in the existing dataset. The dataset is represented as a list of dictionaries, where each dictionary holds information for one review. The function should take in the current dataset and a new review dictionary and perform the following actions: 1. If a review by the same user for the same product already exists, update the rating and comment of that existing review. 2. If no such review exists, add the new review to the dataset. 3. Return the updated dataset. Here is an example of the dataset and the new review: ```python # Current dataset reviews = [ {\\"username\\": \\"user1\\", \\"product_id\\": 101, \\"rating\\": 4, \\"comment\\": \\"Good quality\\"}, {\\"username\\": \\"user2\\", \\"product_id\\": 101, \\"rating\\": 3, \\"comment\\": \\"Satisfactory\\"}, {\\"username\\": \\"user1\\", \\"product_id\\": 102, \\"rating\\": 5, \\"comment\\": \\"Excellent!\\"} ] # New review to be added or updated new_review = {\\"username\\": \\"user1\\", \\"product_id\\": 101, \\"rating\\": 5, \\"comment\\": \\"Great product\\"} ``` Based on the dataset and the new review, the function should update the appropriate record. The updated dataset should be: ```python updated_reviews = [ {\\"username\\": \\"user1\\", \\"product_id\\": 101, \\"rating\\": 5, \\"comment\\": \\"Great product\\"}, {\\"username\\": \\"user2\\", \\"product_id\\": 101, \\"rating\\": 3, \\"comment\\": \\"Satisfactory\\"}, {\\"username\\": \\"user1\\", \\"product_id\\": 102, \\"rating\\": 5, \\"comment\\": \\"Excellent!\\"} ] ``` Write the function `update_reviews` that accomplishes the above task: ```python def update_reviews(reviews, new_review): # Your code here return reviews # Example usage reviews = [ {\\"username\\": \\"user1\\", \\"product_id\\": 101, \\"rating\\": 4, \\"comment\\": \\"Good quality\\"}, {\\"username\\": \\"user2\\", \\"product_id\\": 101, \\"rating\\": 3, \\"comment\\": \\"Satisfactory\\"}, {\\"username\\": \\"user1\\", \\"product_id\\": 102, \\"rating\\": 5, \\"comment\\": \\"Excellent!\\"} ] new_review = {\\"username\\": \\"user1\\", \\"product_id\\": 101, \\"rating\\": 5, \\"comment\\": \\"Great product\\"} print(update_reviews(reviews, new_review)) ``` Your task is to implement the `update_reviews` function.","solution":"def update_reviews(reviews, new_review): Updates the reviews dataset with the new review. :param reviews: List of dictionaries, each representing an existing review. :param new_review: Dictionary representing the new review to be added or updated. :return: The updated reviews list. for review in reviews: if review[\'username\'] == new_review[\'username\'] and review[\'product_id\'] == new_review[\'product_id\']: review[\'rating\'] = new_review[\'rating\'] if \'comment\' in new_review: review[\'comment\'] = new_review[\'comment\'] return reviews # If no existing review found for the same user and product, append the new review reviews.append(new_review) return reviews"},{"question":"Implement a function in Python that works with a Dictionary of Strings to Lists. Each key in the dictionary is a string, and its associated value is a list of integers. The function should return a new dictionary where each key maps to the sum of the squares of its respective integers. For example, if the given dictionary is: { \\"a\\": [1, 2, 3], \\"b\\": [4, 5], \\"c\\": [6] } The output should be: { \\"a\\": 14, # 1^2 + 2^2 + 3^2 \\"b\\": 41, # 4^2 + 5^2 \\"c\\": 36 # 6^2 } def sum_of_squares(dict_of_lists): # your code here pass","solution":"def sum_of_squares(dict_of_lists): Given a dictionary where keys are strings and values are lists of integers, return a new dictionary with the same keys and the value being the sum of the squares of the integers in the list. Parameters: dict_of_lists (dict): Dictionary with string keys and list of integers as values. Returns: dict: Dictionary with string keys and integer values representing the sum of squares of the respective lists. result = {} for key, value_list in dict_of_lists.items(): result[key] = sum(x ** 2 for x in value_list) return result"},{"question":"Write a program that simulates a simple e-commerce cart system. You need to create a class called `ShoppingCart` which includes methods to add items, remove items, view the cart, and compute the total cost. Each item in the cart should be represented as a dictionary with keys: `name` (string), `price` (float), and `quantity` (int). The cart should be initialized as an empty list of items. Provide the following methods for the class: 1. `add_item(name, price, quantity)`: Adds an item to the cart. If the item already exists in the cart, it should update the quantity and price. 2. `remove_item(name)`: Removes an item from the cart by its name. 3. `view_cart()`: Returns the list of items currently in the cart. 4. `total_cost()`: Returns the total cost of all items in the cart. Example: ```python cart = ShoppingCart() cart.add_item(\\"apple\\", 0.5, 10) cart.add_item(\\"banana\\", 0.3, 5) cart.view_cart() # [{\'name\': \'apple\', \'price\': 0.5, \'quantity\': 10}, {\'name\': \'banana\', \'price\': 0.3, \'quantity\': 5}] cart.total_cost() # 6.5 cart.remove_item(\\"apple\\") cart.view_cart() # [{\'name\': \'banana\', \'price\': 0.3, \'quantity\': 5}] cart.total_cost() # 1.5 ```","solution":"class ShoppingCart: def __init__(self): self.cart = [] def add_item(self, name, price, quantity): # Check if the item already exists in the cart for item in self.cart: if item[\'name\'] == name: item[\'price\'] = price item[\'quantity\'] += quantity return # If not, add new item self.cart.append({\'name\': name, \'price\': price, \'quantity\': quantity}) def remove_item(self, name): # Remove the item from the cart if it exists self.cart = [item for item in self.cart if item[\'name\'] != name] def view_cart(self): return self.cart def total_cost(self): # Calculate the total cost by summing the cost of each item return sum(item[\'price\'] * item[\'quantity\'] for item in self.cart)"},{"question":"Create a Python program that simulates a multi-round bidding auction. The program should allow several players to place bids on an item within a stipulated time frame for each round. Each player starts with a fixed amount of virtual currency and can place a bid provided they have sufficient funds. At the end of each round, the highest bid wins the item, and the corresponding amount is deducted from the winning player\'s balance. The program should manage multiple auction rounds, maintaining a log of winners and their winning amounts after each round. Ensure that the program handles edge cases like ties in bids and players trying to bid more than their available funds. Provide a user-friendly command-line interface for the players to register, place bids, and check their remaining balance and bidding history.","solution":"import time class Player: def __init__(self, name, initial_funds): self.name = name self.funds = initial_funds self.bidding_history = [] def place_bid(self, amount): if amount > self.funds: raise ValueError(\\"Insufficient funds\\") return amount def deduct_funds(self, amount): self.funds -= amount self.bidding_history.append(amount) class Auction: def __init__(self, initial_funds): self.players = {} self.initial_funds = initial_funds self.winners = [] def register_player(self, name): if name in self.players: raise ValueError(\\"Player already registered\\") self.players[name] = Player(name, self.initial_funds) def start_round(self, duration_seconds): bids = {} start_time = time.time() while time.time() - start_time < duration_seconds: time.sleep(1) # Simulating waiting period for bids # Collect bids # For simplicity, this is random and immediate # In real situation, you would accept them from input for player_name in self.players: player = self.players[player_name] try: bid = player.place_bid(10) # For testing, each places a bid of 10 units bids[player_name] = bid except ValueError: continue self.process_bids(bids) def process_bids(self, bids): if not bids: return max_bid = max(bids.values()) winners = [name for name, bid in bids.items() if bid == max_bid] if len(winners) == 1: winner = winners[0] self.players[winner].deduct_funds(max_bid) self.winners.append((winner, max_bid)) else: self.winners.append((\\"Tie\\", max_bid)) def get_player_balance(self, name): if name not in self.players: raise ValueError(\\"Player not found\\") return self.players[name].funds def get_winning_log(self): return self.winners # Example usage: # auction = Auction(100) # auction.register_player(\\"Alice\\") # auction.register_player(\\"Bob\\") # auction.start_round(10) # winner_log = auction.get_winning_log() # print(winner_log) # balance = auction.get_player_balance(\\"Alice\\") # print(balance)"},{"question":"A binary search algorithm is a search algorithm that finds the position of a target value within a sorted array. The algorithm compares the target value to the middle element of the array. If the target value is equal to the middle element, the position is returned. If the target value is less than the middle element, the algorithm repeats its process on the left part of the middle element; if it is greater, it repeats on the right part. This process is repeated until the target value is found or the subarray size becomes zero. The algorithm can be outlined as follows: 1. Let `left` be 0 and `right` be the length of the array minus one. 2. While `left` is less than or equal to `right`: a. Calculate the middle index as `(left + right) // 2`. b. If the element at the middle index is the target value, return the middle index. c. If the target value is less than the element at the middle index, update `right` to be `middle - 1`. d. If the target value is greater, update `left` to be `middle + 1`. 3. If the target value is not found, return -1. Implement the binary search algorithm in your preferred programming language. Your implementation should take a sorted list of integers and a target integer as inputs and return the index of the target integer in the list. If the target does not exist in the list, return -1. Additionally, extend your implementation to work with lists of any data type and any size, as long as the comparator for the elements is well-defined. Sample input: sorted list = [1, 2, 3, 4, 5, 6], target = 4 Expected output: 3 Sample input: sorted list = [\'apple\', \'banana\', \'cherry\', \'date\'], target = \'cherry\' Expected output: 2 Ensure your solution handles edge cases such as empty lists or lists with a single element. Create unit tests to demonstrate the correctness of your solution.","solution":"def binary_search(sorted_list, target): Implements the binary search algorithm to find the index of the target value within a sorted list. If the target does not exist in the list, returns -1. left, right = 0, len(sorted_list) - 1 while left <= right: middle = (left + right) // 2 if sorted_list[middle] == target: return middle elif sorted_list[middle] < target: left = middle + 1 else: right = middle - 1 return -1"},{"question":"Write a function that takes a string as input and returns the string reversed. However, all non-alphabetic characters should remain in their original positions. For example, the input string \\"a,bc\\" should be transformed to \\"c,ba\\" because only the alphabetic characters \'a\', \'b\', and \'c\' are reversed, while the positions of \',\' and \'\' remain the same. **Constraints:** - The input string will contain only printable ASCII characters. - The length of the input string will be between 1 and 1000. **Sample Input:** ``` a,bc ``` **Sample Output:** ``` c,ba ``` **Explanation:** In the input string \\"a,bc\\", the alphabetic characters are \\"abc\\". When reversed, they become \\"cba\\". The non-alphabetic characters \',’ and \'\' stay in the same positions. Hence, the output string is \\"c,ba\\". **Function Signature:** ```python def reverse_string(string: str) -> str: # Your code here ``` Write and test your function to ensure it works as expected.","solution":"def reverse_string(string: str) -> str: Takes a string as input and returns the string reversed, with all non-alphabetic characters remaining in their original positions. # Extracting only alphabetic characters and reversing them. alphabets = [char for char in string if char.isalpha()] alphabets.reverse() # Using a list to construct the output string. result = [] alpha_index = 0 for char in string: if char.isalpha(): result.append(alphabets[alpha_index]) alpha_index += 1 else: result.append(char) return \'\'.join(result)"},{"question":"Write a function that takes a string as input and returns a dictionary with the counts of each unique character in the string. Ignore whitespace and make the counting case-sensitive (e.g., \'A\' and \'a\' should be counted separately). The function should handle any printable ASCII characters.","solution":"def count_characters(s): Returns a dictionary with the counts of each unique character in the string, ignoring whitespace. The counting is case-sensitive. result = {} for char in s: if not char.isspace(): if char in result: result[char] += 1 else: result[char] = 1 return result"},{"question":"Modify the given script to accurately count the occurrence of each unique word in the provided text and return a dictionary with words as keys and their counts as values. Ignore punctuation and case sensitivity, and assume words are separated by spaces. The provided text is: \\"To be or not to be, that is the question.\\" Error code: ```python def word_count(text) text = text.lower() words = text.split(\\" \\") word_dict = {} for word in words word = word.strip(\\",.\\") if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 return word_dict print(word_count(\\"To be or not to be, that is the question.\\")) ``` The code provided above has syntax errors. Correct them and ensure that it returns the correct word count as a dictionary.","solution":"def word_count(text): Returns a dictionary with words as keys and their counts as values. Ignores punctuation and is case insensitive. import string # Convert text to lowercase text = text.lower() # Remove punctuation text = text.translate(str.maketrans(\\"\\", \\"\\", string.punctuation)) # Split text into words words = text.split() # Count occurrences of each word word_dict = {} for word in words: if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 return word_dict print(word_count(\\"To be or not to be, that is the question.\\"))"},{"question":"Write a function that takes a list of integers and returns a new list with the integers sorted in descending order. However, if an integer is negative, it should be left in its original position in the list. Example: Input: [3, -1, 4, 1, -2, 5] Output: [5, -1, 4, 3, -2, 1]","solution":"def sort_excluding_negatives(lst): Sort the integers in the list in descending order, excluding negative integers which remain in their original positions. # Extract only the non-negative integers and sort them in descending order sorted_pos = sorted((x for x in lst if x >= 0), reverse=True) # Create an iterator of the sorted non-negative integers sorted_iter = iter(sorted_pos) # Rebuild the list with sorted non-negatives and original negatives result = [next(sorted_iter) if x >= 0 else x for x in lst] return result"},{"question":"Write a Python program to implement a simple caching system. Caching is a mechanism to store computed results of expensive function calls and reuse them when the same inputs occur again. 1. Define a decorator `memoize` that will store the results of function calls in a dictionary, using the function inputs as keys. 2. Apply this decorator to a function `fib(n)` that calculates the nth Fibonacci number. Your program should be able to: - Compute and cache results so that repetitive calls with the same input do not recompute the result. - Handle cases where different arguments are provided in subsequent calls, caching each appropriately. - Provide output to demonstrate that the caching mechanism improves efficiency by printing the time taken for calls with and without using the cache. # Example Input: ```python print(fib(10)) print(fib(15)) print(fib(10)) print(fib(20)) ``` Output: ``` 55 # first call, result computed 610 # first call again, result computed 55 # second call with same input, result fetched from cache 6765 # first call again, result computed ```","solution":"def memoize(func): cache = {} def memoized_func(*args): if args in cache: return cache[args] result = func(*args) cache[args] = result return result return memoized_func @memoize def fib(n): if n <= 1: return n return fib(n - 1) + fib(n - 2)"},{"question":"Write a function in Python that, given a number `n`, computes the nth number in the Fibonacci sequence non-recursively. The Fibonacci sequence is defined as: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n >= 2 Your function should be able to handle large values of `n` up to at least `10,000`. Implement the function efficiently to avoid performance issues for large values. You are not allowed to use any built-in libraries to compute Fibonacci numbers directly. Function Signature: ```python def iterative_fibonacci(n: int) -> int: pass ``` **Examples:** ```python iterative_fibonacci(0) -> 0 iterative_fibonacci(1) -> 1 iterative_fibonacci(10) -> 55 iterative_fibonacci(100) -> 354224848179261915075 iterative_fibonacci(1000) -> Output is a very large number, ensure your function handles it correctly. ```","solution":"def iterative_fibonacci(n: int) -> int: Computes the nth Fibonacci number non-recursively. Parameters: n (int): The index of the Fibonacci sequence to return Returns: int: The nth Fibonacci number if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"You are given a list of integer arrays (lists of lists) where each subarray contains three integers representing x, y, and z coordinates of points in a 3D space. Write a Python function `closest_points(points, k)` that accepts this list and an integer `k`, and returns the `k` points that are closest to the origin (0, 0, 0). If two or more points are equidistant from the origin, prefer the points appearing earlier in the input list. ```python def closest_points(points: list[list[int]], k: int) -> list[list[int]]: # Your code here pass # Example usage: points = [[1, 2, 3], [3, 3, 3], [1, 1, 1], [5, 1, 2]] k = 2 print(closest_points(points, k)) # Expected output: [[1, 1, 1], [1, 2, 3]] ``` # Constraints: - Input will be a list of n subarrays, where 1 ≤ n ≤ 10^3. - Each subarray will contain exactly three integers representing coordinates, with absolute values not exceeding 10^3. - The integer k will abide by the constraint 1 ≤ k ≤ n.","solution":"def closest_points(points: list[list[int]], k: int) -> list[list[int]]: def distance_from_origin(point): x, y, z = point return x**2 + y**2 + z**2 points.sort(key=distance_from_origin) return points[:k]"},{"question":"Write a function in Python that takes a list of integers and returns the list sorted in ascending order, without using any built-in sort function. Implement the sorting using the quicksort algorithm.","solution":"def quicksort(arr): Sorts a list of integers in ascending order using the quicksort algorithm. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a program to simulate a simple text editor that can perform operations on a text buffer. The code must include three main functions with the following specifications: 1) `add_text(text)`: This function should take a string as an argument and append it to the current text buffer. 2) `delete_text(n)`: This function should take an integer n as an argument and delete the last n characters from the text buffer. If n is greater than the length of the current text buffer, it should clear the buffer completely. 3) `undo()`: This function should undo the last operation performed (‘add_text’ or ‘delete_text’), restoring the text buffer to its previous state before that operation was executed. Your program should handle a sequence of operations provided as input and output the final state of the text buffer. Add comments to your code to explain the logic behind handling different operations and undoing them. For simplicity, assume all inputs are valid and operations are in correct sequence. Use a stack to keep track of the operations for the undo functionality.","solution":"class SimpleTextEditor: def __init__(self): self.text_buffer = \\"\\" self.history = [] def add_text(self, text): Appends the given text to the current text buffer and records the operation in the history stack. self.history.append((self.text_buffer,)) self.text_buffer += text def delete_text(self, n): Deletes the last \'n\' characters from the current text buffer and records the operation in the history stack. If \'n\' is greater than the length of the current text buffer, it clears the entire buffer. self.history.append((self.text_buffer,)) self.text_buffer = self.text_buffer[:-n] def undo(self): Reverts the text buffer to the state before the last operation. if self.history: self.text_buffer = self.history.pop()[0] def get_text(self): Returns the current state of the text buffer. return self.text_buffer"},{"question":"I am currently working on a Python project where I need to sort a list of dictionaries by one of their keys. The dictionaries in the list represent employees, and each dictionary includes the employee\'s name, age, and salary. Here\'s an example of what my list looks like: ```python employees = [ {\'name\': \'John\', \'age\': 45, \'salary\': 100000}, {\'name\': \'Jane\', \'age\': 35, \'salary\': 120000}, {\'name\': \'Dave\', \'age\': 25, \'salary\': 90000}, {\'name\': \'Paula\', \'age\': 29, \'salary\': 95000} ] ``` I need to sort this list in ascending order by the employee\'s age. I also need the ability to sort it in descending order by the employee\'s salary. Could someone help me with the code to achieve this?","solution":"def sort_employees_by_key(employees, key, reverse=False): Sorts a list of dictionaries by a specified key. Parameters: - employees: List[Dict[str, Any]], a list of dictionaries representing employees - key: str, the key to sort by - reverse: bool, whether to sort in ascending (False) or descending (True) order Returns: - List[Dict[str, Any]], the sorted list of dictionaries return sorted(employees, key=lambda x: x[key], reverse=reverse) # Example usage employees = [ {\'name\': \'John\', \'age\': 45, \'salary\': 100000}, {\'name\': \'Jane\', \'age\': 35, \'salary\': 120000}, {\'name\': \'Dave\', \'age\': 25, \'salary\': 90000}, {\'name\': \'Paula\', \'age\': 29, \'salary\': 95000} ] # Sorting by age in ascending order sorted_by_age = sort_employees_by_key(employees, \'age\') # Sorting by salary in descending order sorted_by_salary_desc = sort_employees_by_key(employees, \'salary\', reverse=True)"},{"question":"Given a string containing alphanumeric characters, write a function that returns a new string with the characters sorted in the following order: 1. All capital letters in alphabetical order. 2. All lowercase letters in alphabetical order. 3. All digits in ascending order. Example: Input: str = \\"a1A2bB3cC\\" Output: \\"ABCabc123\\"","solution":"def sort_string(s): Sorts a string in the order of all capital letters, all lowercase letters, and then all digits. capital_letters = sorted([char for char in s if char.isupper()]) lowercase_letters = sorted([char for char in s if char.islower()]) digits = sorted([char for char in s if char.isdigit()]) return \'\'.join(capital_letters + lowercase_letters + digits)"},{"question":"Implement a Python function to reverse the words in a given sentence without altering the word order. The function should handle cases with multiple spaces between words by reducing them to a single space in the output. Example: Input: \\" The sky is blue \\" Output: \\"The sky is blue\\" Constraints: 1. You may not use Python\'s built-in `split()` and `join()` methods. 2. Handle leading and trailing spaces by trimming them in the output.","solution":"def reverse_words(sentence): Reverses the words in the given sentence without altering the word order. Reduces multiple spaces to a single space in the output. result = [] word = [] i = 0 length = len(sentence) while i < length: if sentence[i] != \' \': word.append(sentence[i]) elif word: result.append(\'\'.join(word)) word = [] i += 1 if word: result.append(\'\'.join(word)) return \' \'.join(result)"},{"question":"Consider a scenario where you are given a list of integers. Write a function in Python to find the first missing positive integer from the list. The positive integer should be greater than 0. If there are no missing positive integers, return the next positive integer that would follow the highest integer in the list. # Requirements: 1. Your solution should have an optimal time complexity. 2. You should handle different possible edge cases such as an empty list or a list with all negative numbers. # Example: ```python Input: [3, 4, -1, 1] Output: 2 Input: [1, 2, 0] Output: 3 Input: [] Output: 1 Input: [-1, -2, -3] Output: 1 ``` # Note: Explain your thought process and the approach used to solve the problem. Additionally, discuss any alternative methods and their time complexity.","solution":"def first_missing_positive(nums): Returns the first missing positive integer in the list of integers. n = len(nums) # Step 1: Replace negative numbers, zeros, and large numbers with n + 1 for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Step 2: Use index as a hash key to record the presence of numbers for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Step 3: Find the first missing positive for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"Write a Python function called `find_second_largest(arr)` that takes a list of integers as input and returns the second largest number. Your function should handle edge cases such as lists with duplicate values and lists with fewer than two distinct numbers appropriately. If the input list doesn\'t contain at least two distinct numbers, the function should return `None`. Example: ```python print(find_second_largest([10, 20, 4, 45, 99])) # Output: 45 print(find_second_largest([4, 4, 4])) # Output: None print(find_second_largest([4])) # Output: None ```","solution":"def find_second_largest(arr): Returns the second largest number in a list, or None if there are fewer than two distinct numbers. if len(arr) < 2: return None first_max = second_max = None for num in arr: if first_max is None or num > first_max: second_max = first_max first_max = num elif num != first_max and (second_max is None or num > second_max): second_max = num return second_max"},{"question":"Given a list of students with their respective scores in a format of a list of dictionaries, write a function that returns a list of the top N students based on their scores. The function should handle edge cases such as multiple students having the same score and N being larger than the number of students in the list. You should do the following: 1. Implement the function `top_n_students(students, N)`. 2. The function should take a list of dictionaries where each dictionary represents a student with their name and score (e.g., `{\'name\': \'Alice\', \'score\': 90}`), and an integer N. 3. The function should return a list of dictionaries of the top N students based on their scores, sorted in descending order by score. 4. Handle edge cases where multiple students have the same score by including all students that fall within the top N scores, even if it means returning more than N students. Here\'s a starter code snippet for your reference: ```python def top_n_students(students, N): # Sort the list of students based on their scores in descending order sorted_students = sorted(students, key=lambda k: k[\'score\'], reverse=True) # Initialize the list to store the top N students top_students = [] for student in sorted_students: if len(top_students) < N or student[\'score\'] == top_students[-1][\'score\']: top_students.append(student) else: break return top_students ``` **Test your function with the following list of students:** ```python students = [ {\'name\': \'Alice\', \'score\': 90}, {\'name\': \'Bob\', \'score\': 85}, {\'name\': \'Charlie\', \'score\': 95}, {\'name\': \'David\', \'score\': 85}, {\'name\': \'Eva\', \'score\': 100} ] # Example function call print(top_n_students(students, 3)) # Expected Output: # [{\'name\': \'Eva\', \'score\': 100}, {\'name\': \'Charlie\', \'score\': 95}, {\'name\': \'Alice\', \'score\': 90}] ```","solution":"def top_n_students(students, N): Returns the top N students based on their scores. Parameters: students (list): List of dictionaries with \'name\' and \'score\'. N (int): Number of top students to return. Returns: list: List of dictionaries of top N students sorted by score in descending order. # Sort the list of students based on their scores in descending order sorted_students = sorted(students, key=lambda k: k[\'score\'], reverse=True) # Initialize the list to store the top N students top_students = [] for student in sorted_students: if len(top_students) < N or student[\'score\'] == top_students[-1][\'score\']: top_students.append(student) else: break return top_students"},{"question":"Write a function that takes a dictionary as input and returns a sorted list of tuples. Each tuple should contain a key and its corresponding value from the dictionary, sorted by the values in descending order. If multiple keys have the same value, they should be sorted by the keys in ascending alphabetical order. Ensure your solution efficiently handles dictionaries with varying sizes and value types. Demonstrate error handling for invalid dictionary inputs. For example, given the following dictionary: data = {\'apple\': 10, \'banana\': 5, \'cherry\': 10, \'date\': 7} The function should return: [(\'apple\', 10), (\'cherry\', 10), (\'date\', 7), (\'banana\', 5)]","solution":"def sort_dict_by_value_then_key(data): Sorts a dictionary by its values in descending order, and by the keys in ascending alphabetical order if there are duplicate values. Returns a list of tuples. Parameters: data (dict): The dictionary to be sorted. Returns: List[Tuple]: A sorted list of tuples (key, value). Raises: ValueError: If the input is not a dictionary. if not isinstance(data, dict): raise ValueError(\'Input must be a dictionary\') sorted_items = sorted(data.items(), key=lambda item: (-item[1], item[0])) return sorted_items"},{"question":"Design a data structure that represents a scheduling system for events with priority levels. Each event has a unique identifier, a priority level, and a timestamp indicating when the event was created. The data structure should support adding events and removing the highest priority event. If multiple events have the same priority, the event with the earliest timestamp should be removed first. Implement the `EventScheduler` class: - `EventScheduler()` constructs an empty event scheduler. - `void addEvent(int eventId, int priority, int timestamp)` adds an event with the specified `eventId`, `priority`, and `timestamp` to the scheduler. - `int removeEvent()` removes and returns the `eventId` of the highest priority event. If multiple events have the same priority, return the event with the earliest timestamp. Example 1: Input [\\"EventScheduler\\", \\"addEvent\\", \\"addEvent\\", \\"addEvent\\", \\"removeEvent\\", \\"removeEvent\\", \\"removeEvent\\"] [[], [1, 10, 1], [2, 20, 2], [3, 10, 3], [], [], []] Output [null, null, null, null, 2, 1, 3] Explanation EventScheduler scheduler = new EventScheduler(); scheduler.addEvent(1, 10, 1); // Adds event 1 with priority 10 and timestamp 1. scheduler.addEvent(2, 20, 2); // Adds event 2 with priority 20 and timestamp 2. scheduler.addEvent(3, 10, 3); // Adds event 3 with priority 10 and timestamp 3. scheduler.removeEvent(); // Returns 2, the highest priority event. scheduler.removeEvent(); // Returns 1, the earliest event with priority 10. scheduler.removeEvent(); // Returns 3, the remaining event with priority 10. Constraints: - `0 <= eventId <= 109` - `0 <= priority <= 109` - `0 <= timestamp <= 109` - At most `2 * 104` calls will be made to `addEvent` and `removeEvent`. - It is guaranteed that there will be at least one event in the scheduler before calling `removeEvent`.","solution":"import heapq class EventScheduler: def __init__(self): self.heap = [] self.entry_finder = {} self.counter = 0 def addEvent(self, eventId, priority, timestamp): entry = (priority, timestamp, eventId) self.entry_finder[eventId] = entry heapq.heappush(self.heap, (-priority, timestamp, eventId)) def removeEvent(self): while self.heap: _, _, eventId = heapq.heappop(self.heap) entry = self.entry_finder.pop(eventId, None) if entry: return eventId # Examples to understand how it works scheduler = EventScheduler() scheduler.addEvent(1, 10, 1) scheduler.addEvent(2, 20, 2) scheduler.addEvent(3, 10, 3) print(scheduler.removeEvent()) # Returns 2 print(scheduler.removeEvent()) # Returns 1 print(scheduler.removeEvent()) # Returns 3"},{"question":"Given a list of student records where each record contains a student\'s name, age, and marks in three subjects, write a function to generate a report that includes: 1. The student with the highest total marks. 2. The student with the lowest total marks. 3. The average marks for each subject across all students. 4. The number of students between the age of 10 and 15 (inclusive). Each student record will be in a dictionary format: ```python {\\"name\\": \\"student_name\\", \\"age\\": age, \\"marks\\": {\\"subject1\\": marks1, \\"subject2\\": marks2, \\"subject3\\": marks3}} ``` The list of records will be provided as an input to the function. You can assume the input list to be non-empty. Example input: ```python students = [ {\\"name\\": \\"Alice\\", \\"age\\": 12, \\"marks\\": {\\"math\\": 89, \\"science\\": 93, \\"english\\": 85}}, {\\"name\\": \\"Bob\\", \\"age\\": 14, \\"marks\\": {\\"math\\": 75, \\"science\\": 81, \\"english\\": 79}}, {\\"name\\": \\"Charlie\\", \\"age\\": 10, \\"marks\\": {\\"math\\": 95, \\"science\\": 94, \\"english\\": 92}}, {\\"name\\": \\"David\\", \\"age\\": 16, \\"marks\\": {\\"math\\": 60, \\"science\\": 56, \\"english\\": 58}}, ] ``` Your function should output: ```python { \\"highest_total\\": \\"Charlie\\", \\"lowest_total\\": \\"David\\", \\"average_marks\\": {\\"math\\": 79.75, \\"science\\": 81, \\"english\\": 78.5}, \\"students_in_age_range\\": 3 } ```","solution":"def generate_report(students): highest_total_student = None lowest_total_student = None highest_total_marks = -float(\'inf\') lowest_total_marks = float(\'inf\') total_marks = {\\"math\\": 0, \\"science\\": 0, \\"english\\": 0} age_count = 0 for student in students: total = sum(student[\\"marks\\"].values()) if total > highest_total_marks: highest_total_marks = total highest_total_student = student[\\"name\\"] if total < lowest_total_marks: lowest_total_marks = total lowest_total_student = student[\\"name\\"] for subject in student[\\"marks\\"]: total_marks[subject] += student[\\"marks\\"][subject] if 10 <= student[\\"age\\"] <= 15: age_count += 1 average_marks = {subject: total_marks[subject] / len(students) for subject in total_marks} return { \\"highest_total\\": highest_total_student, \\"lowest_total\\": lowest_total_student, \\"average_marks\\": average_marks, \\"students_in_age_range\\": age_count }"},{"question":"Create a program that takes a list of integers and returns a new list containing only the prime numbers from the original list, in the same order they appeared. Ensure that your implementation efficiently checks for prime numbers and handles edge cases such as negative numbers and non-integer inputs.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a new list containing only the prime numbers from the original list. return [num for num in numbers if isinstance(num, int) and is_prime(num)]"},{"question":"Implement a genetic algorithm to solve the traveling salesman problem. Your solution should include mechanisms for selection, crossover, and mutation operations. Ensure that your algorithm maintains diversity in the population and converges efficiently to a near-optimal solution.","solution":"import random import numpy as np def create_route(city_list): return random.sample(city_list, len(city_list)) def initial_population(pop_size, city_list): population = [] for i in range(pop_size): population.append(create_route(city_list)) return population def rank_routes(population): fitness_results = {} for i in range(len(population)): fitness_results[i] = route_fitness(population[i]) return sorted(fitness_results.items(), key=lambda x: x[1], reverse=True) def route_fitness(route): return 1 / float(route_distance(route)) def route_distance(route): distance = 0 for i in range(0, len(route)): from_city = route[i] to_city = None if i + 1 < len(route): to_city = route[i + 1] else: to_city = route[0] distance += np.linalg.norm(np.array(from_city) - np.array(to_city)) return distance def selection(pop_ranked, elite_size): selection_results = [] df = sum([item[1] for item in pop_ranked]) cum_sum = np.cumsum([item[1]/df for item in pop_ranked]) for i in range(elite_size): selection_results.append(pop_ranked[i][0]) for i in range(len(pop_ranked) - elite_size): pick = random.random() for i in range(0, len(pop_ranked)): if pick <= cum_sum[i]: selection_results.append(pop_ranked[i][0]) break return selection_results def mating_pool(population, selection_results): matingpool = [] for i in range(len(selection_results)): index = selection_results[i] matingpool.append(population[index]) return matingpool def breed(parent1, parent2): child = [] childP1, childP2 = [], [] geneA = int(random.random() * len(parent1)) geneB = int(random.random() * len(parent1)) startGene = min(geneA, geneB) endGene = max(geneA, geneB) for i in range(startGene, endGene): childP1.append(parent1[i]) childP2 = [item for item in parent2 if item not in childP1] child = childP1 + childP2 return child def breed_population(matingpool, elite_size): children = [] length = len(matingpool) - elite_size pool = random.sample(matingpool, len(matingpool)) for i in range(0, elite_size): children.append(matingpool[i]) for i in range(0, length): child = breed(pool[i], pool[len(matingpool)-i-1]) children.append(child) return children def mutate(individual, mutation_rate): for swapped in range(len(individual)): if(random.random() < mutation_rate): swapWith = int(random.random() * len(individual)) city1 = individual[swapped] city2 = individual[swapWith] individual[swapped] = city2 individual[swapWith] = city1 return individual def mutate_population(population, mutation_rate): mutated_pop = [] for individual in range(0, len(population)): mutated_ind = mutate(population[individual], mutation_rate) mutated_pop.append(mutated_ind) return mutated_pop def next_generation(current_gen, elite_size, mutation_rate): pop_ranked = rank_routes(current_gen) selection_results = selection(pop_ranked, elite_size) matingpool = mating_pool(current_gen, selection_results) children = breed_population(matingpool, elite_size) next_generation = mutate_population(children, mutation_rate) return next_generation def genetic_algorithm(city_list, pop_size, elite_size, mutation_rate, generations): pop = initial_population(pop_size, city_list) print(\\"Initial distance: \\" + str(1 / rank_routes(pop)[0][1])) for i in range(0, generations): pop = next_generation(pop, elite_size, mutation_rate) print(\\"Final distance: \\" + str(1 / rank_routes(pop)[0][1])) best_route_index = rank_routes(pop)[0][0] best_route = pop[best_route_index] return best_route"},{"question":"Given a list of strings representing mathematical expressions in infix notation, write a function that converts each expression into its equivalent postfix notation and evaluates the result. The input list can contain any valid arithmetic expressions involving the operators +, -, *, /, and parentheses. For simplicity, you can assume all the operands are single-digit non-negative integers. Your function should: 1. Convert the infix expressions to postfix notation. 2. Evaluate each postfix expression. 3. Return a dictionary where the keys are the original infix expressions and the values are the evaluated results. For instance, given the list of expressions `[\\"3+4\\", \\"2*(5+1)\\", \\"(1+2)*(3+4)\\"]`, your function should return: ``` { \\"3+4\\": 7, \\"2*(5+1)\\": 12, \\"(1+2)*(3+4)\\": 21 } ``` Ensure your solution handles edge cases such as: - Division by zero. - Invalid expressions (e.g., unbalanced parentheses). If an invalid expression is encountered, include an appropriate error message as the value in the resulting dictionary.","solution":"def infix_to_postfix(expression): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} stack = [] postfix = [] for char in expression: if char.isdigit(): postfix.append(char) elif char == \'(\': stack.append(char) elif char == \')\': while stack and stack[-1] != \'(\': postfix.append(stack.pop()) stack.pop() else: while stack and stack[-1] != \'(\' and precedence[stack[-1]] >= precedence[char]: postfix.append(stack.pop()) stack.append(char) while stack: postfix.append(stack.pop()) return \'\'.join(postfix) def evaluate_postfix(postfix_expr): stack = [] for char in postfix_expr: if char.isdigit(): stack.append(int(char)) else: b = stack.pop() a = stack.pop() if char == \'+\': stack.append(a + b) elif char == \'-\': stack.append(a - b) elif char == \'*\': stack.append(a * b) elif char == \'/\': if b == 0: return \\"Error: Division by zero\\" stack.append(a / b) return stack.pop() def process_expressions(expressions): results = {} for expr in expressions: try: postfix_expr = infix_to_postfix(expr) result = evaluate_postfix(postfix_expr) results[expr] = result except Exception as e: results[expr] = f\\"Error: {str(e)}\\" return results"},{"question":"Write a function that validates a list of license plate numbers based on the following rules: 1. The license plate must be exactly 7 characters long. 2. The first three characters must be uppercase letters. 3. The next four characters must be digits. 4. No other characters are allowed. The function should take a list of strings and return a list of booleans, where each boolean indicates whether the corresponding license plate in the input list is valid according to the rules.","solution":"import re def validate_license_plates(license_plates): Validates a list of license plate numbers based on specified rules. Parameters: license_plates (list): List of license plate numbers as strings. Returns: list: List of booleans indicating the validity of each license plate. pattern = re.compile(r\'^[A-Z]{3}d{4}\') return [bool(pattern.match(plate)) for plate in license_plates]"},{"question":"Create a function that accepts a list of integers and returns a dictionary with the frequency count of each unique integer in the list. The function should also identify the integer with the highest frequency in the list and return it along with its frequency count. If there are multiple integers with the same highest frequency, return any one of them.","solution":"from collections import Counter def frequency_count_and_max(input_list): Returns a dictionary with the frequency count of each unique integer in the list and the integer with the highest frequency and its count. if not input_list: return {}, None frequency_dict = Counter(input_list) most_common = frequency_dict.most_common(1)[0] # Get the most common element return frequency_dict, most_common"},{"question":"Write a Python function that computes the factorial of a positive integer n (n!), which is defined as the product of all positive integers less than or equal to n. The function should handle edge cases such as 0! which is defined as 1. Additionally, optimize the solution using memoization to store previously computed factorial values for faster future calculations. Your task is to: 1. Implement the function factorial(n) which returns n!. 2. Use a dictionary to store the results of previously computed factorials to minimize redundant calculations. 3. Ensure the function handles edge cases properly, such as when n is 0 or a negative value. Example: ```python def factorial(n): memo = {} def fact_inner(x): if x in memo: return memo[x] if x <= 1: return 1 memo[x] = x * fact_inner(x - 1) return memo[x] if n < 0: return \\"Undefined for negative values\\" return fact_inner(n) # Test cases print(factorial(5)) # Output: 120 print(factorial(0)) # Output: 1 print(factorial(-3)) # Output: Undefined for negative values ```","solution":"def factorial(n): Returns the factorial of a positive integer n using memoization. For n < 0, returns a message indicating factorial is undefined. memo = {} def fact_inner(x): if x in memo: return memo[x] if x <= 1: return 1 memo[x] = x * fact_inner(x - 1) return memo[x] if n < 0: return \\"Undefined for negative values\\" return fact_inner(n)"},{"question":"Write a program that reads a text file containing pairs of names and their corresponding ages. Sort these pairs based on age in ascending order. If two people have the same age, sort them alphabetically by their names. After sorting, save the output to a new text file in the same format. Additionally, the program should handle any errors that occur if the input file format is incorrect (such as missing ages, names, or invalid data types) and log these errors to a separate file without terminating the program abruptly. The error log should include a timestamp and a descriptive message of the issue encountered. Example input file format: ``` Alice 30 Bob 25 Charlie 25 Eve 22 ``` Expected output file format: ``` Eve 22 Bob 25 Charlie 25 Alice 30 ``` Example error log entry: ``` [2023-10-10 12:34:56] Error: Missing age for Alice ``` You may assume the input file contains one name-age pair per line, separated by a space. Provide the full code implementation along with comments explaining each step.","solution":"import datetime def read_pairs(file_path): Reads pairs of names and ages from the given file. Returns a list of tuples (name, age). Logs any errors encountered to \'error_log.txt\'. pairs = [] with open(file_path, \'r\') as file: for line in file: try: name, age = line.strip().split() age = int(age) pairs.append((name, age)) except ValueError as e: log_error(f\\"Invalid line \'{line.strip()}\': {e}\\") return pairs def sort_pairs(pairs): Sorts the pairs based on age in ascending order. If two people have the same age, they are sorted alphabetically by name. return sorted(pairs, key=lambda x: (x[1], x[0])) def write_pairs(file_path, pairs): Writes the sorted pairs to the given file. with open(file_path, \'w\') as file: for name, age in pairs: file.write(f\\"{name} {age}n\\") def log_error(message): Logs errors with a timestamp to \'error_log.txt\'. with open(\'error_log.txt\', \'a\') as log_file: timestamp = datetime.datetime.now().strftime(\'%Y-%m-%d %H:%M:%S\') log_file.write(f\\"[{timestamp}] Error: {message}n\\") def sort_names_by_age(input_file, output_file): Main function to read input file, sort pairs, and write to output file. pairs = read_pairs(input_file) sorted_pairs = sort_pairs(pairs) write_pairs(output_file, sorted_pairs)"},{"question":"Write a Python function that analyzes customer purchase data to identify patterns and trends. The function should take a list of tuples, where each tuple contains (customer_id, product_id, quantity, price, purchase_date). The function should output: 1. The top 3 customers who have spent the most money in the past month. 2. The top 3 most frequently purchased products in the past month. 3. The total revenue generated in the past month. Additionally, the function should predict the total revenue for the next month based on a basic linear regression model using the provided data.","solution":"from collections import defaultdict from datetime import datetime, timedelta import numpy as np from sklearn.linear_model import LinearRegression def analyze_purchase_data(purchases): Analyzes customer purchase data to identify patterns and trends. Takes a list of tuples (customer_id, product_id, quantity, price, purchase_date). Returns: 1. Top 3 customers who have spent the most money in the past month. 2. Top 3 most frequently purchased products in the past month. 3. Total revenue generated in the past month. 4. Predicted total revenue for the next month based on linear regression model. past_month_date = datetime.now() - timedelta(days=30) # Step 1: Filter purchases in the past month recent_purchases = [p for p in purchases if datetime.strptime(p[4], \\"%Y-%m-%d\\") >= past_month_date] # Dictionaries to collect total spent per customer and product counts customer_spent = defaultdict(float) product_count = defaultdict(int) total_revenue = 0.0 for purchase in recent_purchases: customer_id, product_id, quantity, price, purchase_date = purchase amount_spent = quantity * price customer_spent[customer_id] += amount_spent product_count[product_id] += quantity total_revenue += amount_spent # Step 2: Identify the top 3 customers who have spent the most money top_customers = sorted(customer_spent.items(), key=lambda x: x[1], reverse=True)[:3] # Step 3: Identify the top 3 most frequently purchased products top_products = sorted(product_count.items(), key=lambda x: x[1], reverse=True)[:3] # Step 4: Predict total revenue for the next month based on linear regression dates = [datetime.strptime(p[4], \\"%Y-%m-%d\\") for p in purchases] unique_dates = sorted(set(dates)) date_to_int = {date: i for i, date in enumerate(unique_dates)} data = [(date_to_int[datetime.strptime(p[4], \\"%Y-%m-%d\\")], p[2] * p[3]) for p in purchases] X = np.array([d[0] for d in data]).reshape(-1, 1) y = np.array([d[1] for d in data]) if len(X) < 2: predicted_revenue = 0.0 # Not enough data for prediction, return 0.0 else: model = LinearRegression() model.fit(X, y) next_month_date_int = len(unique_dates) predicted_revenue = model.predict([[next_month_date_int]])[0] return top_customers, top_products, total_revenue, predicted_revenue"},{"question":"Design an efficient algorithm to traverse a bidimensional matrix that represents elevations on a terrain. Your objective is to identify all points where water would flow into the ocean if it only flows from higher to lower elevations or same elevations. Water can flow in four directions: north, south, east, and west. An elevation at the edge of the matrix naturally flows into the ocean. Implement a function `findOceanFlowPoints(matrix)` that takes this matrix as input and returns a list of coordinates where water can flow to the ocean. The matrix can be of size `m x n` where `m` and `n` are between 1 and 1000.","solution":"def findOceanFlowPoints(matrix): if not matrix: return [] m, n = len(matrix), len(matrix[0]) pacific = [[False] * n for _ in range(m)] atlantic = [[False] * n for _ in range(m)] def dfs(x, y, ocean_matrix): stack = [(x, y)] directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while stack: cx, cy = stack.pop() ocean_matrix[cx][cy] = True for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < m and 0 <= ny < n and not ocean_matrix[nx][ny] and matrix[nx][ny] >= matrix[cx][cy]: stack.append((nx, ny)) for i in range(m): dfs(i, 0, pacific) dfs(i, n-1, atlantic) for j in range(n): dfs(0, j, pacific) dfs(m-1, j, atlantic) result = [] for i in range(m): for j in range(n): if pacific[i][j] and atlantic[i][j]: result.append((i, j)) return result"},{"question":"Write a function that takes a string as input and returns the most frequent character in the string. In case of a tie, return the character that appears first in the string. input_string = \\"programming\\" output = \\"g\\"","solution":"def most_frequent_character(s): Returns the most frequent character in the string s. In case of a tie, returns the character that appears first in the string. from collections import defaultdict char_count = defaultdict(int) first_appearance = {} for index, char in enumerate(s): char_count[char] += 1 if char not in first_appearance: first_appearance[char] = index # Find the character with the highest frequency max_count = -1 most_frequent_char = \'\' for char in char_count: if (char_count[char] > max_count or (char_count[char] == max_count and first_appearance[char] < first_appearance[most_frequent_char])): max_count = char_count[char] most_frequent_char = char return most_frequent_char"},{"question":"Design and implement a Python function that takes a positive integer n as input and returns an nxn matrix (2D list) representing a spiral of numbers starting from 1 at the top left and moving towards the center in a clockwise direction. Use nested loops and conditionals to construct the spiral. For example, if the input is 3, the function should return: ``` [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] ```","solution":"def generate_spiral(n): Creates an nxn spiral matrix. Args: n (int): The size of the matrix to be generated. Returns: List[List[int]]: An nxn spiral matrix. if n <= 0: return [] # Initialize an nxn matrix filled with zeros matrix = [[0] * n for _ in range(n)] # Define the boundaries for the spiral top, bottom = 0, n - 1 left, right = 0, n - 1 num = 1 # Start the number from 1 while top <= bottom and left <= right: # Traverse from left to right along the top boundary for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 # Move the top boundary downwards # Traverse from top to bottom along the right boundary for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 # Move the right boundary to the left # Traverse from right to left along the bottom boundary for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 # Move the bottom boundary upwards # Traverse from bottom to top along the left boundary for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 # Move the left boundary to the right return matrix"},{"question":"You are given a string consisting of lowercase English letters and need to determine the minimum number of characters required to make all the characters of the string unique. In other words, you need to ensure that no two characters are the same by changing the minimum number of characters possible. Write a function `minChangesToUnique` that takes a string `s` as input and returns an integer representing the minimum number of changes needed. Example 1: Input: `s = \\"aab\\"` Output: `1` Explanation: We can change one of the \'a\' to any other character, for example, \'c\', to get \\"cab\\". Example 2: Input: `s = \\"abc\\"` Output: `0` Explanation: All the characters are already unique. Example 3: Input: `s = \\"aaa\\"` Output: `2` Explanation: We need to change two \'a\'s to other characters, for example, \\"abc\\". Note: - The input string `s` will have a length from 1 to 100. - The input string `s` will contain only lowercase English letters from \'a\' to \'z\'.","solution":"def minChangesToUnique(s): Determine the minimum number of changes needed to make all characters unique. from collections import Counter # Count the frequency of each character char_count = Counter(s) # Calculate the number of repeats for each character repeats = [count - 1 for count in char_count.values() if count > 1] # Total number of changes needed is the sum of repeats return sum(repeats)"},{"question":"<p>Consider a matrix M of size n times n composed of non-negative integers. Define the function F(M) as follows: F(M) = sum_{i=1}^{n} sum_{j=1}^{n} f(M,i,j), where f(M,i,j) is the product of all elements in the submatrix of M formed by taking the elements from the i-th row and the j-th column to the bottom right corner of the matrix.</p> <p>For example, if M is a 3 times 3 matrix:</p> <pre> M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] </pre> <p>Then:</p> <ul> <li>For i=1, j=1, the submatrix is the entire matrix, so f(M,1,1) = 1 cdot 2 cdot 3 cdot 4 cdot 5 cdot 6 cdot 7 cdot 8 cdot 9</li> <li>For i=1, j=2, the submatrix is [[2, 3], [5, 6], [8, 9]], so f(M,1,2) = 2 cdot 3 cdot 5 cdot 6 cdot 8 cdot 9</li> <li>For i=1, j=3, the submatrix is [[3], [6], [9]], so f(M,1,3) = 3 cdot 6 cdot 9</li> <li>And so on...</li> </ul> <p>Given an n times n matrix M, determine the value of F(M) for any 2 leq n leq 100 where each element M_{i,j} of M is a non-negative integer not exceeding 10^9. Optimize for performance, as a brute-force solution may be inadequate for larger values of n.</p>","solution":"from functools import reduce def F(M): Given an n x n matrix M, returns the value of function F(M) as defined in the problem. n = len(M) total_sum = 0 for i in range(n): for j in range(n): submatrix_product = 1 for x in range(i, n): for y in range(j, n): submatrix_product *= M[x][y] total_sum += submatrix_product return total_sum"},{"question":"Write a function that takes a list of integers and returns a new list where each element is the sum of itself and all previous elements in the list. As an additional challenge, ensure that the function has a linear runtime complexity, i.e., O(n). For example, if the input list is [1, 2, 3, 4], the output should be [1, 3, 6, 10] since: - 1 = 1 - 3 = 1 + 2 - 6 = 1 + 2 + 3 - 10 = 1 + 2 + 3 + 4 Your solution should handle edge cases such as an empty list or a list with only negative numbers. Write a function `cumulative_sum(arr)` to implement this logic. ```python def cumulative_sum(arr): if not arr: return [] result = [] current_sum = 0 for num in arr: current_sum += num result.append(current_sum) return result print(cumulative_sum([1, 2, 3, 4])) # Expected output: [1, 3, 6, 10] print(cumulative_sum([-1, -2, -3, -4])) # Expected output: [-1, -3, -6, -10] print(cumulative_sum([])) # Expected output: [] ```","solution":"def cumulative_sum(arr): Takes a list of integers and returns a new list where each element is the sum of itself and all previous elements in the list. Args: arr (list): List of integers. Returns: list: List of cumulative sums. if not arr: return [] result = [] current_sum = 0 for num in arr: current_sum += num result.append(current_sum) return result"},{"question":"Design a Python application for a smart home system that manages multiple devices such as lights, thermostats, and security cameras. Each device type should have its own class with methods to turn on/off, adjust settings (like brightness for lights, temperature for thermostats, and resolution for cameras), and retrieve the current status (on/off and current settings values). Additionally, implement a central controller class that can add devices, remove devices, and perform batch operations on all devices of a specified type (e.g., turn off all lights). The system should also include a logging mechanism to track changes made to any device, including timestamps and the action performed. Ensure your design allows for future expansion with new types of devices. Provide comprehensive testing to verify the functionality of the system and handle potential errors gracefully. Do not use any third-party APIs, libraries, or frameworks other than the standard Python libraries.","solution":"import datetime class Device: def __init__(self, name): self.name = name self.is_on = False self.status = {} def turn_on(self): self.is_on = True self.log_action(\\"turned on\\") def turn_off(self): self.is_on = False self.log_action(\\"turned off\\") def get_status(self): return {\\"is_on\\": self.is_on, **self.status} def log_action(self, action): timestamp = datetime.datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\") print(f\\"[{timestamp}] {self.name}: {action}\\") class Light(Device): def __init__(self, name, brightness=100): super().__init__(name) self.status[\\"brightness\\"] = brightness def adjust_brightness(self, brightness): self.status[\\"brightness\\"] = brightness self.log_action(f\\"brightness adjusted to {brightness}\\") class Thermostat(Device): def __init__(self, name, temperature=70): super().__init__(name) self.status[\\"temperature\\"] = temperature def adjust_temperature(self, temperature): self.status[\\"temperature\\"] = temperature self.log_action(f\\"temperature adjusted to {temperature}\\") class Camera(Device): def __init__(self, name, resolution=\\"1080p\\"): super().__init__(name) self.status[\\"resolution\\"] = resolution def adjust_resolution(self, resolution): self.status[\\"resolution\\"] = resolution self.log_action(f\\"resolution adjusted to {resolution}\\") class SmartHomeController: def __init__(self): self.devices = [] def add_device(self, device): self.devices.append(device) print(f\\"Device {device.name} added to the system\\") def remove_device(self, device_name): self.devices = [device for device in self.devices if device.name != device_name] print(f\\"Device {device_name} removed from the system\\") def batch_operation(self, device_type, action, *args, **kwargs): for device in self.devices: if isinstance(device, device_type): getattr(device, action)(*args, **kwargs) def get_all_status(self): return {device.name: device.get_status() for device in self.devices}"},{"question":"Design an efficient function to reverse the words within a given sentence. Ensure that the words are delimited by a single space, and the input string does not contain any leading or trailing spaces. Additionally, words should be in their original order within the reversed sentence. For example, if the input is \\"Hello World from OpenAI\\", the output should be \\"OpenAI from World Hello\\". Provide a solution that takes into consideration optimal time and space complexity.","solution":"def reverse_words(sentence): Reverse the words within a given sentence. Args: sentence (str): The input sentence with words delimited by a single space. Returns: str: The sentence with words reversed but in their original order. # Split the sentence into words words = sentence.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words into a sentence reversed_sentence = \' \'.join(reversed_words) return reversed_sentence"},{"question":"Implement a K-means clustering algorithm from scratch to cluster a given dataset into a specified number of clusters (K). The algorithm should initialize the cluster centroids randomly, assign data points to the nearest centroids, update the centroids based on the mean of the assigned points, and repeat these steps until the centroids no longer change. Finally, evaluate the clustering performance using the Sum of Squared Errors (SSE). Use the following dataset for implementation: ```python import numpy as np X = np.array([[1.1, 2.2], [1.5, 1.8], [5.4, 6.3], [1.0, 1.7], [0.9, 1.2], [4.5, 5.8], [5.2, 5.9], [3.9, 4.5], [9.1, 8.7], [8.1, 9.0]]) ``` Make sure your implementation includes functions for initializing centroids, assigning clusters, updating centroids, and computing SSE.","solution":"import numpy as np def initialize_centroids(X, K): Randomly initialize K centroids from the dataset X. np.random.seed(42) # For reproducible results random_indices = np.random.permutation(X.shape[0]) centroids = X[random_indices[:K]] return centroids def assign_clusters(X, centroids): Assign each data point in X to the closest centroid. distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2) return np.argmin(distances, axis=1) def update_centroids(X, labels, K): Update the centroids to the mean of the assigned points. new_centroids = np.array([X[labels == k].mean(axis=0) for k in range(K)]) return new_centroids def compute_sse(X, centroids, labels): Compute the Sum of Squared Errors (SSE) for the clustering. sse = 0.0 for k in range(centroids.shape[0]): sse += np.sum((X[labels == k] - centroids[k]) ** 2) return sse def k_means(X, K, max_iters=100, tol=1e-4): Perform K-means clustering. centroids = initialize_centroids(X, K) for _ in range(max_iters): labels = assign_clusters(X, centroids) new_centroids = update_centroids(X, labels, K) # Convergence check if np.all(np.abs(new_centroids - centroids) < tol): break centroids = new_centroids sse = compute_sse(X, centroids, labels) return labels, centroids, sse"},{"question":"Reorder the following list of fruits in alphabetical order and then identify the position of the fruit \\"mango\\" in the newly ordered list: [\\"banana\\", \\"apple\\", \\"cherry\\", \\"mango\\", \\"pear\\", \\"peach\\"]","solution":"def reorder_and_find_position(fruits, fruit_name): Reorders the fruits list in alphabetical order and finds the position of the specified fruit. Parameters: fruits (list): A list of fruit names as strings. fruit_name (str): The name of the fruit to find the position of after sorting. Returns: int: The position of the specified fruit in the sorted list. fruits.sort() # Sort the list in alphabetical order return fruits.index(fruit_name) # Return the position (index) of the specified fruit"},{"question":"Given a list of integers, write a function `calculate_statistics()` that takes the list as an input and returns a dictionary containing the following statistics: - `mean`: the average value of the list - `median`: the middle value in the sorted list (or the average of the two middle values if the list has an even number of elements) - `mode`: the most frequent value(s) in the list. If there are multiple modes, return them as a list. If all values are unique, the mode field should be the list itself. Additionally, handle possible exceptions gracefully, such as when the input is not a list or contains non-integer values, and return an appropriate error message in such cases. For example, for the input list `[4, 1, 2, 2, 3, 3, 3]`, the output should be: ``` { \\"mean\\": 2.57, \\"median\\": 3, \\"mode\\": [3] } ``` If the input list is `[1, 2, 3, 4]`, the mode should equal the list itself: ``` { \\"mean\\": 2.5, \\"median\\": 2.5, \\"mode\\": [1, 2, 3, 4] } ```","solution":"from statistics import mean, median, mode, StatisticsError from collections import Counter def calculate_statistics(numbers): if not isinstance(numbers, list): return \\"Error: Input must be a list.\\" if not all(isinstance(x, int) for x in numbers): return \\"Error: All elements in the list must be integers.\\" statistics = {} try: statistics[\'mean\'] = round(mean(numbers), 2) statistics[\'median\'] = median(numbers) count = Counter(numbers) max_frequency = max(count.values()) modes = [num for num, freq in count.items() if freq == max_frequency] if len(modes) == len(numbers): statistics[\'mode\'] = numbers else: statistics[\'mode\'] = modes except (StatisticsError, ValueError): return \\"Error: Cannot calculate statistics for the given input.\\" return statistics"},{"question":"Write a function that checks if a given integer is a prime number and if it is, returns the nearest prime number that is smaller than the given integer. If the number is not prime, return the given integer itself. Example: ```python def nearest_smaller_prime(n): # Your code here # Test Cases print(nearest_smaller_prime(10)) # Should return 10 (10 is not prime) print(nearest_smaller_prime(11)) # Should return 7 (11 is prime, nearest smaller prime is 7) print(nearest_smaller_prime(17)) # Should return 13 (17 is prime, nearest smaller prime is 13) ```","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False i = 3 while i * i <= n: if n % i == 0: return False i += 2 return True def nearest_smaller_prime(n): If n is prime, returns the nearest prime number that is smaller than n. If n is not prime, returns n itself. if not is_prime(n): return n candidate = n - 1 while candidate > 1: if is_prime(candidate): return candidate candidate -= 1 return -1 # Return -1 if no smaller prime is found, which should not happen for n > 2"},{"question":"Implement a function named `second_smallest_element` that takes a list of integers and returns the second smallest element in the list. Avoid using built-in sorting or minimum functions. If the list contains fewer than two distinct elements, the function should return `None`. # Examples: - `second_smallest_element([4, 2, 6, 1, 3])` -> 2 - `second_smallest_element([7, 7, 7, 7])` -> None - `second_smallest_element([1])` -> None - `second_smallest_element([4, -2, 0, 4, 3])` -> 0","solution":"def second_smallest_element(arr): Returns the second smallest element in the list or None if fewer than two distinct elements are present. if len(arr) < 2: return None first, second = float(\'inf\'), float(\'inf\') for num in arr: if num < first: second = first first = num elif first < num < second: second = num return second if second != float(\'inf\') else None"},{"question":"Write a function in Python that takes a string consisting of words separated by spaces and capitalizes the first letter of each word in the string. However, if a word is originally fully capitalized, it should remain unchanged. Your function should return the modified string. Example: ```python def capitalize_words(input_string): # Write your code here # Example usage: print(capitalize_words(\\"hello WORLD this is a TEST\\")) # Output: \\"Hello WORLD This Is A TEST\\" ``` Requirements: - Do not use any built-in Python string methods that explicitly perform capitalization (e.g., str.title()). - Handle edge cases such as empty strings or strings with multiple spaces between words.","solution":"def capitalize_words(input_string): Takes a string consisting of words separated by spaces and capitalizes the first letter of each word in the string. Fully capitalized words remain unchanged. def capitalize_word(word): if word.isupper(): return word else: return word[0].upper() + word[1:].lower() if word else \\"\\" words = input_string.split() capitalized_words = [capitalize_word(word) for word in words] return \' \'.join(capitalized_words)"},{"question":"Write a Python program that will take a CSV file containing product sales data and analyze the data to identify sales patterns. The program should be able to perform the following tasks: 1. Parse the CSV file and store the data in an appropriate data structure. 2. Calculate and display the total sales for each product. 3. Identify the product with the highest sales. 4. Plot the monthly sales trend for each product using a tool like matplotlib. The program should also include appropriate error handling for issues such as missing or malformed data in the CSV file, and ensure that the output is presented in a clear and user-friendly manner. Example of the CSV file format: ``` Product, Date, Quantity, Price ProductA, 2023-01-15, 10, 20 ProductB, 2023-01-17, 5, 30 ProductA, 2023-02-03, 8, 20 ProductC, 2023-02-10, 12, 10 ```","solution":"import csv from collections import defaultdict import matplotlib.pyplot as plt from datetime import datetime def parse_csv(file_path): sales_data = defaultdict(lambda: defaultdict(int)) try: with open(file_path, newline=\'\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: product = row[\'Product\'] date = datetime.strptime(row[\'Date\'], \'%Y-%m-%d\') quantity = int(row[\'Quantity\']) price = float(row[\'Price\']) sales_amount = quantity * price month = date.strftime(\'%Y-%m\') sales_data[product][month] += sales_amount except FileNotFoundError: print(f\\"Error: The file \'{file_path}\' was not found.\\") except csv.Error as e: print(f\\"Error: An error occurred while reading the CSV file: {e}\\") except Exception as e: print(f\\"Error: {e}\\") return sales_data def calculate_total_sales(sales_data): total_sales = {product: sum(monthly_sales.values()) for product, monthly_sales in sales_data.items()} return total_sales def product_with_highest_sales(total_sales): return max(total_sales.items(), key=lambda x: x[1]) def plot_monthly_sales_trend(sales_data): for product, monthly_sales in sales_data.items(): sorted_months = sorted(monthly_sales.keys()) sales_amounts = [monthly_sales[month] for month in sorted_months] plt.plot(sorted_months, sales_amounts, label=product) plt.xlabel(\'Month\') plt.ylabel(\'Sales Amount\') plt.title(\'Monthly Sales Trend per Product\') plt.legend() plt.show() def analyze_sales(file_path): sales_data = parse_csv(file_path) total_sales = calculate_total_sales(sales_data) highest_sales_product, highest_sales_amount = product_with_highest_sales(total_sales) print(\\"Total Sales for Each Product:\\") for product, sales in total_sales.items(): print(f\\"{product}: {sales:.2f}\\") print(f\\"nProduct with the Highest Sales: {highest_sales_product} ( {highest_sales_amount:.2f})\\") plot_monthly_sales_trend(sales_data)"},{"question":"Write a function that takes an array of integers and a target integer. The function should return the indices of the two numbers in the array that add up to the target. If no such pair exists, return None. The same element cannot be used twice, and all inputs have only one unique solution. Use a time complexity of O(n). **Example:** ```python def find_indices(nums, target): # Your code here # Example Usage: # nums = [2, 7, 11, 15] # target = 9 # find_indices(nums, target) should return [0, 1] because nums[0] + nums[1] == 2 + 7 == 9. ```","solution":"def find_indices(nums, target): Returns the indices of the two numbers in the array that add up to the target. Uses a hash map to achieve O(n) time complexity. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return None"},{"question":"Write a function that takes a string of text as input and performs the following tasks: 1. Counts the number of words in the text. 2. Reverses the order of words in the text. 3. Converts all characters in the text to lowercase. 4. Returns a tuple containing the count of words, the reversed text, and the lowercase text. Assume that words are separated by spaces and the input string contains no punctuation marks. Write your solution in Python.","solution":"def process_text(text): Processes the input text by: 1. Counting the number of words. 2. Reversing the order of words. 3. Converting all characters to lowercase. Returns a tuple with the word count, the reversed text, and the lowercase text. words = text.split() word_count = len(words) reversed_text = \' \'.join(reversed(words)) lowercase_text = text.lower() return (word_count, reversed_text, lowercase_text)"},{"question":"Create a function that takes a string representing a mathematical expression involving addition and multiplication of non-negative integers (e.g., \\"3+5*2\\") and evaluates the expression following the usual precedence rules (multiplication before addition). The function should return the result as an integer. You cannot use any built-in eval functions or libraries that automatically parse and evaluate the expressions. Implement code to handle the operations manually, respecting the order of operations.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression given as a string with addition and multiplication. Parameters: expression (str): The string representing the expression to evaluate. Returns: int: The result of the evaluated expression. def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'*\': values.append(left * right) def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue elif expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while (i < len(expression) and expression[i].isdigit()): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while len(operators) > 0 and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while len(operators) > 0: apply_operator(operators, values) return values[-1]"},{"question":"You are given an array of integers representing the heights of a row of buildings. Write a function that returns the number of buildings with an unobstructed view of the sunset. A building has an unobstructed view of the sunset if it is strictly taller than all the buildings to its right. Assume that you are standing to the left of the row of buildings and looking towards the right. Implement this task under the following constraints and requirements: - The function should be efficient to handle an array with a length of up to 10^5 elements. - Think about the edge cases, such as when the array is empty or has only one building. - The input array will always contain non-negative integers. Example: ```python def count_sunset_views(building_heights): # Your code here # Test Cases print(count_sunset_views([3, 7, 8, 3, 6, 1])) # Output: 3 (buildings with heights 8, 6, and 1) print(count_sunset_views([])) # Output: 0 (no buildings) print(count_sunset_views([5, 4, 3, 2, 1])) # Output: 5 (each building has an unobstructed view) print(count_sunset_views([1, 2, 3, 4, 5])) # Output: 1 (only the last building has an unobstructed view) print(count_sunset_views([5, 5, 5, 5, 5])) # Output: 1 (only the last building has an unobstructed view) ```","solution":"def count_sunset_views(building_heights): Returns the number of buildings with an unobstructed view of the sunset. count = 0 max_height = -1 for height in reversed(building_heights): if height > max_height: count += 1 max_height = height return count"},{"question":"編寫一個函數，該函數接收一個字符串，計算並返回該字符串中每個字母出現頻率，忽略大小寫。非字母字符應被忽略。 function count_letter_frequency(input_string) { // 函数实现 } [Example Input] input_string = \\"Hello World!\\" [Example Output] { h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1 }","solution":"def count_letter_frequency(input_string): This function takes a string and returns a dictionary with the frequency of each letter in the string, ignoring case and non-letter characters. frequency = {} for char in input_string: if char.isalpha(): char = char.lower() if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Develop a function that generates all possible palindromic substrings from a given string `s`. A palindromic substring is a sequence of characters in a string that reads the same forward and backward. The function should return a list of these substrings in lexicographical order. For example, given the input `s = \\"aabb\\"`, the function should output `[\'a\', \'a\', \'aa\', \'b\', \'b\', \'bb\']`. Complete the code snippet below: ```python def generatePalindromicSubstrings(s): ```","solution":"def generatePalindromicSubstrings(s): Generates all possible palindromic substrings from a given string `s` in lexicographical order. def is_palindrome(sub): return sub == sub[::-1] palindromes = set() # Generate all substrings and check if they are palindromes for start in range(len(s)): for end in range(start, len(s)): substring = s[start:end + 1] if is_palindrome(substring): palindromes.add(substring) return sorted(palindromes) # Example usage # print(generatePalindromicSubstrings(\\"aabb\\")) # Output: [\'a\', \'a\', \'aa\', \'b\', \'b\', \'bb\']"},{"question":"Write a function that takes a string consisting of lowercase alphabets and returns all possible words that can be formed by the contiguous characters of that string which are valid words from a given dictionary. The function should take the following into consideration: 1. The dictionary is provided as a list of valid words. 2. Each word in the dictionary can only appear once in the list of results. 3. The order of the results does not matter. Example: string = \\"applepie\\" dictionary = [\\"apple\\", \\"pie\\", \\"app\\", \\"le\\", \\"pie\\", \\"e\\"] Possible Output: [\\"apple\\", \\"pie\\", \\"app\\", \\"le\\"] Additionally, the function should return the total number of unique valid words formed.","solution":"def find_valid_words(string, dictionary): Returns a list of all possible words that can be formed by the contiguous characters of the input string which are valid words from the dictionary and the count of such words. valid_words = set() dict_set = set(dictionary) for i in range(len(string)): for j in range(i + 1, len(string) + 1): word = string[i:j] if word in dict_set: valid_words.add(word) return list(valid_words), len(valid_words)"},{"question":"Design and implement a function that detects and removes cycles in a directed graph. Your algorithm should be efficient in handling large graphs, ensuring it can process graphs with a high number of nodes and edges without excessive computational overhead. The solution must provide a mechanism to identify cycles and eliminate them while preserving the maximum possible number of edges in the graph\'s structure. Additionally, the algorithm should be optimized for both time and space complexity. Explain the approach and thought process behind your implemented function, and discuss any trade-offs made to balance between detection efficiency and removal accuracy.","solution":"def detect_and_remove_cycles(graph): Detects and removes cycles in a directed graph. :param graph: A dictionary representing a directed graph where keys are nodes and values are lists of adjacent nodes. :return: A directed graph with cycles removed. from collections import defaultdict, deque # Helper function to perform DFS and detect cycles def dfs(node, visited, rec_stack, graph, edges_to_remove): visited[node] = True rec_stack[node] = True for neighbor in graph[node]: if not visited[neighbor]: if dfs(neighbor, visited, rec_stack, graph, edges_to_remove): edges_to_remove.append((node, neighbor)) elif rec_stack[neighbor]: edges_to_remove.append((node, neighbor)) rec_stack[node] = False return False nodes = list(graph.keys()) visited = {node: False for node in nodes} rec_stack = {node: False for node in nodes} edges_to_remove = [] # Detect cycles and record edges to remove for node in nodes: if not visited[node]: dfs(node, visited, rec_stack, graph, edges_to_remove) # Remove the recorded edges from the graph for u, v in edges_to_remove: graph[u].remove(v) return graph # Example usage: graph = { \'A\': [\'B\'], \'B\': [\'C\', \'D\'], \'C\': [\'A\', \'E\'], \'D\': [\'E\'], \'E\': [\'B\'] } # This will modify the input graph by removing cycles print(detect_and_remove_cycles(graph))"},{"question":"Create a function that flattens a nested list of integers into a single list of integers. The function should handle lists with varying depths of nesting, and should not use any built-in flattening utilities. Additionally, provide an erroneous section of the code as a reference. def flatten_nested_list(nested_list): Flattens a nested list of integers into a single list of integers. >>> flatten_nested_list([1, [2, [3, 4], 5], 6]) [1, 2, 3, 4, 5, 6] >>> flatten_nested_list([1, [2, 3], 4]) [1, 2, 3, 4] >>> flatten_nested_list([[[1], 2], [3, 4], 5]) [1, 2, 3, 4, 5] #Incorrect code reference: def flawed_flatten_nested_list(nested_list): result = [] for element in nested_list: if isinstance(element, list): result.append(element) # Incorrectly appending list instead of flattening it else: result.append(element) return result","solution":"def flatten_nested_list(nested_list): Flattens a nested list of integers into a single list of integers. result = [] for element in nested_list: if isinstance(element, list): result.extend(flatten_nested_list(element)) else: result.append(element) return result"},{"question":"You are given a list of integers `arr` and an integer `k`. Write a Python function called `count_pairs` that finds and returns the number of unique pairs (i, j) in the list such that `arr[i] + arr[j] = k` and `i < j`. Optimize the function to have a time complexity better than O(n^2) and ensure that your solution is both efficient and readable. ```python def count_pairs(arr, k): # Your code here # Example usage print(count_pairs([1, 2, 3, 4, 3], 6)) # Should output 2, since (1, 5) and (2, 4) form pairs. ``` You should ensure that the solution: 1. Correctly counts unique pairs. 2. Is optimized to run faster than O(n^2). 3. Is written in a clean and readable manner.","solution":"def count_pairs(arr, k): This function counts the number of unique pairs (i, j) in the list such that arr[i] + arr[j] = k and i < j. Parameters: arr (list of int): The list of integers. k (int): The target sum. Returns: int: The count of unique pairs whose sum is equal to k. seen = {} pairs = set() for i, num in enumerate(arr): complement = k - num if complement in seen: pairs.add((min(complement, num), max(complement, num))) seen[num] = i return len(pairs)"},{"question":"Write a Python function that uses the pandas library to analyze sales data. The function should be capable of performing the following tasks: 1. Load sales data from a CSV file into a DataFrame. 2. Calculate the total sales for each product category. 3. Identify and return the top 3 best-selling products for each category. 4. Implement error handling to manage missing values and ensure there are no negative sales figures in the dataset. 5. Allow the function to take optional arguments to filter the analysis by date range and specific sales regions. The CSV file will have columns: `product_id`, `category`, `product_name`, `sales_amount`, `sales_date`, and `sales_region`.","solution":"import pandas as pd def analyze_sales_data(file_path, start_date=None, end_date=None, region=None): Analyzes sales data from a CSV file. :param file_path: Path to the CSV file containing sales data. :param start_date: Optional start date to filter the sales data (inclusive). :param end_date: Optional end date to filter the sales data (inclusive). :param region: Optional sales region to filter the sales data. :return: A dictionary with total sales for each category and top 3 best-selling products for each category. try: # Load data from CSV df = pd.read_csv(file_path) # Handle missing values by dropping rows with NaNs in crucial columns df.dropna(subset=[\'category\', \'product_name\', \'sales_amount\', \'sales_date\', \'sales_region\'], inplace=True) # Ensure no negative sales figures df = df[df[\'sales_amount\'] >= 0] # Filter by date range if provided if start_date: df = df[df[\'sales_date\'] >= start_date] if end_date: df = df[df[\'sales_date\'] <= end_date] # Filter by region if provided if region: df = df[df[\'sales_region\'] == region] # Calculate total sales for each product category total_sales_by_category = df.groupby(\'category\')[\'sales_amount\'].sum() # Identify top 3 best-selling products for each category top_products = df.groupby([\'category\', \'product_name\'])[\'sales_amount\'].sum().reset_index() top_products = top_products.sort_values([\'category\', \'sales_amount\'], ascending=[True, False]) top_3_products_by_category = top_products.groupby(\'category\').head(3) # Convert the results to dictionary format result = { \\"total_sales_by_category\\": total_sales_by_category.to_dict(), \\"top_3_products_by_category\\": top_3_products_by_category.groupby(\'category\').apply( lambda x: x[[\'product_name\', \'sales_amount\']].to_dict(\'records\')).to_dict() } return result except FileNotFoundError as e: print(f\\"File not found: {e}\\") return {} except pd.errors.EmptyDataError as e: print(f\\"Empty CSV file: {e}\\") return {}"},{"question":"Design a function that takes a nested dictionary and flattens it into a single-level dictionary with keys as the paths to each value in the original nested structure. The paths should be represented as a string with keys separated by dots. The function should handle dictionaries of arbitrary depth and avoid hardcoding specific depth levels. Also, include functionality to handle keys with leading or trailing spaces. Empty keys should be replaced with a placeholder string \\"<empty>\\". Validate your function\'s correctness by incorporating a range of test cases with varying levels of nesting. def flatten_dict(nested_dict: dict) -> dict: Function implementation should go here.","solution":"def flatten_dict(nested_dict, parent_key=\'\', separator=\'.\', empty_key_placeholder=\'<empty>\'): Flattens a nested dictionary into a single-level dictionary with dot-separated keypaths. Handles leading/trailing spaces in keys and replaces empty keys with placeholder. Parameters: nested_dict (dict): The input nested dictionary to flatten. parent_key (str): The base string for key construction (used during recursion). separator (str): The separator used between levels of key parts. empty_key_placeholder (str): Placeholder string for empty keys. Returns: dict: The flattened dictionary. items = {} for k, v in nested_dict.items(): new_key = (parent_key + separator if parent_key else \'\') + (k.strip() if k else empty_key_placeholder) if isinstance(v, dict): items.update(flatten_dict(v, new_key, separator, empty_key_placeholder)) else: items[new_key] = v return items"},{"question":"Write a function that simulates a bank system. The bank system should be able to handle multiple types of accounts: checking and savings. Each account should allow deposits and withdrawals, while savings accounts should additionally support interest accumulation. Implement the following functionality: 1. Create a `BankAccount` class with attributes for account balance and methods for deposit and withdrawal. 2. Create subclasses `CheckingAccount` and `SavingsAccount` that inherit from `BankAccount`. 3. The `CheckingAccount` should have an overdraft limit and should raise an error if a withdrawal exceeds the account balance plus the overdraft limit. 4. The `SavingsAccount` should have an interest rate attribute and a method to apply interest to the account balance. 5. Write a main function to demonstrate the use of these classes, showing deposits, withdrawals, and interest application. Here is a sample usage: ```python c_acc = CheckingAccount(100, overdraft_limit=50) c_acc.deposit(50) c_acc.withdraw(120) # Should not raise an error as overdraft limit is 50 s_acc = SavingsAccount(200, interest_rate=0.05) s_acc.apply_interest() # Balance should be updated with interest applied print(c_acc.balance) # Should print the current balance of checking account print(s_acc.balance) # Should print the current balance of savings account ```","solution":"class BankAccount: def __init__(self, balance=0): self.balance = balance def deposit(self, amount): if amount > 0: self.balance += amount def withdraw(self, amount): if amount > 0 and amount <= self.balance: self.balance -= amount else: raise ValueError(\\"Insufficient funds\\") class CheckingAccount(BankAccount): def __init__(self, balance=0, overdraft_limit=0): super().__init__(balance) self.overdraft_limit = overdraft_limit def withdraw(self, amount): if amount > 0 and amount <= self.balance + self.overdraft_limit: self.balance -= amount else: raise ValueError(\\"Exceeded overdraft limit\\") class SavingsAccount(BankAccount): def __init__(self, balance=0, interest_rate=0.0): super().__init__(balance) self.interest_rate = interest_rate def apply_interest(self): if self.interest_rate > 0: self.balance += self.balance * self.interest_rate # Example usage def main(): c_acc = CheckingAccount(100, overdraft_limit=50) c_acc.deposit(50) print(f\\"Checking account balance after deposit: {c_acc.balance}\\") c_acc.withdraw(120) print(f\\"Checking account balance after withdrawal: {c_acc.balance}\\") s_acc = SavingsAccount(200, interest_rate=0.05) s_acc.apply_interest() print(f\\"Savings account balance after applying interest: {s_acc.balance}\\") main()"},{"question":"Implement a function that takes a string as input and checks if it can be converted to a valid palindrome by removing at most one character. A palindrome is a word that reads the same backward as forwards. The function should return `true` if the input string can be converted to a palindrome by removing at most one character; otherwise, it should return `false`. The input string will consist only of lowercase letters and will have a maximum length of 1000 characters.","solution":"def valid_palindrome(s): Check if the input string can be converted to a valid palindrome by removing at most one character. def is_palindrome_range(i, j): return all(s[k] == s[j - k + i] for k in range(i, j)) for i in range(len(s) // 2): if s[i] != s[~i]: j = len(s) - 1 - i return is_palindrome_range(i + 1, j) or is_palindrome_range(i, j - 1) return True"},{"question":"Design a function that, given a list of integer values, identifies and returns the maximum and minimum values from the list as a tuple. Ensure your solution efficiently processes the data, aiming for linear time complexity. For example, given the list [7, 2, 9, 4, 1, 5], the function should return (1, 9).","solution":"def find_min_max(values): Returns the minimum and maximum values from a list of integers as a tuple. if not values: raise ValueError(\\"The list is empty\\") min_val = max_val = values[0] for value in values[1:]: if value < min_val: min_val = value if value > max_val: max_val = value return (min_val, max_val)"},{"question":"Write a function that takes an integer as input and returns a string representation of that integer in binary form. Ensure that the binary string output does not contain any leading zeros. Example Input: 13 Example Output: \\"1101\\"","solution":"def int_to_binary(n): Converts an integer to its binary representation without leading zeros. Parameters: n (int): The integer to convert. Returns: str: The binary representation of the integer. if n == 0: return \\"0\\" return bin(n)[2:]"},{"question":"A company\'s employee records include both even and odd employee IDs, represented by the variable emp_id. The IDs illustrate a specific format where even IDs represent part-time employees and odd IDs represent full-time employees. Design a function named `employee_bonus` that accepts a positive integer emp_id. The function should calculate the bonus as follows: - For part-time employees (even IDs), multiply the ID by the sum of all even digits within the ID. - For full-time employees (odd IDs), multiply the ID by the sum of all odd digits within the ID. The function also needs to handle edge cases and ensure robust error handling. Examples to clarify: employee_bonus(246) == 246 * (2 + 4 + 6) = 246 * 12 = 2952 employee_bonus(135) == 135 * (1 + 3 + 5) = 135 * 9 = 1215 Your task is to complete the function: ```python def employee_bonus(emp_id): Function description here. ```","solution":"def employee_bonus(emp_id): Calculate the employee bonus for part-time and full-time employees. Parameters: emp_id (int): positive employee ID Returns: int: calculated bonus based on the rules defined Raises: ValueError: if emp_id is not a positive integer if not isinstance(emp_id, int) or emp_id <= 0: raise ValueError(\\"Employee ID must be a positive integer\\") emp_id_str = str(emp_id) if emp_id % 2 == 0: # Part-time employee sum_even_digits = sum(int(digit) for digit in emp_id_str if int(digit) % 2 == 0) bonus = emp_id * sum_even_digits else: # Full-time employee sum_odd_digits = sum(int(digit) for digit in emp_id_str if int(digit) % 2 != 0) bonus = emp_id * sum_odd_digits return bonus"},{"question":"Write a function called `find_unique_words` that takes a list of sentences and returns a set of unique words found across all the sentences. Your function should ignore case and punctuation. You can assume sentences only contain alphabetic characters and spaces. For example, given the list: sentences = [\\"Hello world\\", \\"The world is beautiful\\", \\"hello Universe\\"] The function should return: {\'hello\', \'world\', \'the\', \'is\', \'beautiful\', \'universe\'}","solution":"import re def find_unique_words(sentences): Returns a set of unique words from the list of sentences, ignoring case and punctuation. words = set() for sentence in sentences: # Convert to lowercase and split into words lower_sentence = sentence.lower() words_in_sentence = re.findall(r\'bw+b\', lower_sentence) words.update(words_in_sentence) return words"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the elements that appear exactly twice in the original list. Do not use any built-in functions or libraries to count the occurrences of elements. Example input: [1, 2, 3, 2, 4, 1, 5, 5] Example output: [1, 2, 5]","solution":"def elements_appear_twice(lst): Returns a list of elements that appear exactly twice in the input list. Parameters: lst (List[int]): A list of integers. Returns: List[int]: A list containing elements that appear exactly twice in lst. element_counter = {} # Count the occurrences of each element in lst for num in lst: if num in element_counter: element_counter[num] += 1 else: element_counter[num] = 1 # Collect and return elements that appear exactly twice result = [num for num, count in element_counter.items() if count == 2] return result"},{"question":"Write a function in a programming language of your choice that takes a list of integers and returns another list containing only the even numbers from the input list sorted in descending order. Ensure that the function handles edge cases, such as an empty list or a list with no even numbers, appropriately.","solution":"def filter_and_sort_even_numbers(input_list): This function takes a list of integers and returns another list containing only the even numbers from the input list sorted in descending order. Parameters: input_list (list): A list of integers Returns: list: A list of even integers sorted in descending order # Filter even numbers even_numbers = [num for num in input_list if num % 2 == 0] # Sort the even numbers in descending order even_numbers.sort(reverse=True) return even_numbers"},{"question":"Create a Python function `count_islands(matrix)` that takes a 2D grid consisting of \'1\'s (land) and \'0\'s (water) and returns the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. Assume all four edges of the grid are surrounded by water. Your implementation should use Depth-First Search (DFS) to traverse the grid and count the islands. Example: ```python matrix = [ [\'1\', \'1\', \'0\', \'0\', \'0\'], [\'1\', \'1\', \'0\', \'0\', \'0\'], [\'0\', \'0\', \'1\', \'0\', \'0\'], [\'0\', \'0\', \'0\', \'1\', \'1\'] ] print(count_islands(matrix)) # Output: 3 ``` Constraints: - The input grid has dimensions m x n, where 1 ≤ m, n ≤ 300. - The grid values are either \'1\' (land) or \'0\' (water).","solution":"def count_islands(matrix): if not matrix: return 0 rows, cols = len(matrix), len(matrix[0]) def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or matrix[r][c] == \'0\': return matrix[r][c] = \'0\' # Mark as visited # Visit all adjacent cells (up, down, left, right) dfs(r - 1, c) dfs(r + 1, c) dfs(r, c - 1) dfs(r, c + 1) islands_count = 0 for r in range(rows): for c in range(cols): if matrix[r][c] == \'1\': islands_count += 1 dfs(r, c) return islands_count"},{"question":"In Python, write a function that takes a list of integers as input and returns a new list containing only the even numbers from the original list, each multiplied by 3. The original list should remain unchanged.","solution":"def process_even_numbers(input_list): Returns a new list containing only the even numbers from the original list, each multiplied by 3. The original list remains unchanged. Parameters: input_list (list of int): The input list of integers. Returns: list of int: A new list with even numbers multiplied by 3. return [x * 3 for x in input_list if x % 2 == 0]"},{"question":"In a Python list, an element can either be an integer or a nested list containing integers. Write a function `flatten_list` that takes such a list as an argument and returns a new list where all nested lists are flattened. In other words, all integers should be present in a single, one-dimensional list. Below is the function signature: ```python def flatten_list(nested_list): # Your code here ``` For example, given the input: ```python nested_list = [1, [2, 3], [4, [5, 6]], 7] ``` The function should return: ```python [1, 2, 3, 4, 5, 6, 7] ``` Ensure that your function works with lists of arbitrary nesting levels.","solution":"def flatten_list(nested_list): This function takes a nested list as an argument and returns a new list with all nested lists flattened. flat_list = [] for element in nested_list: if isinstance(element, list): flat_list.extend(flatten_list(element)) else: flat_list.append(element) return flat_list"},{"question":"Implement a Python function `valid_brackets(s: str) -> bool`, which checks whether a given string `s` contains a valid combination of brackets. The string `s` will contain only the characters `()`, `{}`, `[]`, and `<>`. A combination of brackets is considered valid if every opening bracket has a corresponding closing bracket in the correct order. For example: - `valid_brackets(\\"(){}[]<>\\")` should return `True` - `valid_brackets(\\"([{}])\\")` should return `True` - `valid_brackets(\\"(<>[{}])\\")` should return `True` - `valid_brackets(\\"([{<>])\\")` should return `False` Write the function `valid_brackets(s: str) -> bool` to solve this problem.","solution":"def valid_brackets(s: str) -> bool: Checks whether a given string contains a valid combination of brackets. stack = [] bracket_map = { \')\': \'(\', \'}\': \'{\', \']\': \'[\', \'>\': \'<\' } for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map: if stack == [] or stack.pop() != bracket_map[char]: return False else: return False # invalid character return stack == []"},{"question":"Implement a Python function that takes a list of dictionaries, each representing a student\'s record with the keys \'name\' and \'scores\', where \'scores\' is a list of integers. Your function should return a dictionary where each key is a student\'s name and the corresponding value is the average of their scores, rounded to two decimal places. For example, given: [ {\\"name\\": \\"Alice\\", \\"scores\\": [88, 76, 92]}, {\\"name\\": \\"Bob\\", \\"scores\\": [78, 81, 85]}, {\\"name\\": \\"Charlie\\", \\"scores\\": [95, 93, 90]} ] the output should be: { \\"Alice\\": 85.33, \\"Bob\\": 81.33, \\"Charlie\\": 92.67 }","solution":"def calculate_averages(students): Given a list of students with their scores, return a dictionary with student names as keys and their average scores as values, rounded to two decimal places. Args: students (list): A list of dictionaries where each dictionary contains a student\'s \'name\' and \'scores\'. Returns: dict: A dictionary with student names as keys and their average scores as values. averages = {} for student in students: name = student[\'name\'] scores = student[\'scores\'] average_score = round(sum(scores) / len(scores), 2) averages[name] = average_score return averages"},{"question":"Design a Python function that takes a list of strings and returns a dictionary that maps each unique string to the number of occurrences of that string in the list, while excluding any strings that appear more than twice. If no string meets the criteria, return an empty dictionary. ```python # Sample Input [\\"apple\\", \\"banana\\", \\"apple\\", \\"apple\\", \\"banana\\", \\"cherry\\", \\"cherry\\"] # Sample Output {\\"banana\\": 2, \\"cherry\\": 2} ```","solution":"def string_occurrences(strings): Returns a dictionary that maps each unique string to the number of occurrences of that string in the list, excluding any strings that appear more than twice. from collections import Counter count = Counter(strings) result = {key: value for key, value in count.items() if 1 <= value <= 2} return result"},{"question":"Write a Python function that takes a list of integers as input and returns a list of tuples, each containing a pair of integers from the input list whose product is odd. Each pair (a, b) in the output list should satisfy the condition a < b to ensure uniqueness and avoid duplication. If no such pairs exist, return an empty list. ```python def find_odd_product_pairs(int_list): # Your code here # Example usage: # int_list = [1, 3, 5, 2, 8, 7] # Output: [(1, 3), (1, 5), (1, 7), (3, 5), (3, 7), (5, 7)] ```","solution":"def find_odd_product_pairs(int_list): Returns a list of tuples, each containing a pair of integers from the input list whose product is odd. Each pair (a, b) in the output list will satisfy the condition a < b to ensure uniqueness and avoid duplication. result = [] n = len(int_list) for i in range(n): for j in range(i + 1, n): if int_list[i] % 2 != 0 and int_list[j] % 2 != 0: result.append((int_list[i], int_list[j])) return result"},{"question":"Design a function `reverse_words` which takes a sentence as input and outputs the sentence with the order of words reversed, but characters within each word remain in the same order. ```python def reverse_words(sentence): Return a sentence with the order of words reversed. >>> reverse_words(\'hello world\') \'world hello\' >>> reverse_words(\'a b c\') \'c b a\' >>> reverse_words(\'\') \'\' ```","solution":"def reverse_words(sentence): Return a sentence with the order of words reversed. :param sentence: string, input sentence :return: string, sentence with the order of words reversed # Split the sentence into words words = sentence.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words into a new sentence return \' \'.join(reversed_words)"},{"question":"Write a function `detect_cycle` that takes a list of integers as input and returns `True` if the list contains a cycle, and `False` otherwise. A cycle is defined as a sequence of elements in which the same set of integers appears more than once consecutively in the same order. Here\'s an example: ```python def detect_cycle(arr): # Your code here # Examples print(detect_cycle([1, 2, 3, 1, 2, 3])) # Output: True print(detect_cycle([4, 1, 2, 3, 4, 1, 2, 3])) # Output: True print(detect_cycle([1, 2, 3, 4, 5, 6])) # Output: False print(detect_cycle([1, 1, 1, 1, 1])) # Output: True ``` Include any necessary helper functions within your main function. Avoid using any external libraries.","solution":"def detect_cycle(arr): Detects if there is a repeating cycle of integers in the list entered. n = len(arr) if n == 0: return False # Check all possible cycle lengths for cycle_length in range(1, n // 2 + 1): # Assume there is a cycle initially cycle_detected = True for i in range(n - cycle_length): if arr[i] != arr[i + cycle_length]: cycle_detected = False break if cycle_detected: return True return False"},{"question":"Write a Python script that uses the \\"requests\\" library to hit an API endpoint and parse its JSON response. The script should retrieve and print the \\"temperature\\" and \\"humidity\\" values for the provided city. API Endpoint: http://api.weatherstack.com/current API Parameters: - access_key: Your API access key - query: City name (e.g., \'New York\') Note: Ensure to handle potential errors gracefully, such as invalid city names or issues with the API response.","solution":"import requests def get_weather_data(city, access_key): Fetches and returns the temperature and humidity for a given city using the Weatherstack API. Parameters: city (str): The name of the city to query. access_key (str): The API access key. Returns: dict: A dictionary containing temperature and humidity. url = \\"http://api.weatherstack.com/current\\" params = { \'access_key\': access_key, \'query\': city } try: response = requests.get(url, params=params) response.raise_for_status() # Will raise HTTPError for bad responses data = response.json() if \'current\' in data: temperature = data[\'current\'][\'temperature\'] humidity = data[\'current\'][\'humidity\'] return { \'temperature\': temperature, \'humidity\': humidity } else: raise ValueError(\\"Invalid response, \'current\' key not found\\") except requests.exceptions.RequestException as e: raise ValueError(f\\"Error fetching data from API: {e}\\") except ValueError as e: raise ValueError(f\\"Error parsing response: {e}\\")"},{"question":"Create a function in Python that takes a list of integers and an integer k, and returns a list of k integers that appear most frequently in the input list. If there are multiple candidates with the same frequency, the function should return the smaller numbers first. Use appropriate data structures from the collections module to solve this problem efficiently. Provide test cases to validate your implementation.","solution":"from collections import Counter def top_k_frequent(nums, k): Returns a list of k integers that appear most frequently in the input list. If there are multiple candidates with the same frequency, returns the smaller numbers first. count = Counter(nums) # Sort by frequency first (descending) and then by number (ascending) sorted_items = sorted(count.items(), key=lambda x: (-x[1], x[0])) # Extract the top k elements result = [item[0] for item in sorted_items[:k]] return result"},{"question":"Implement a Python function to solve the problem of finding the diameter of a binary tree. The diameter of a binary tree is the length of the longest path between any two nodes in the tree, which may or may not pass through the root. The length of the path between two nodes is represented by the number of edges between them. Your function should be efficient and handle edge cases such as an empty tree or a tree with a single node. The input will be given as a TreeNode class where TreeNode is defined as: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Write your function as follows: ```python def diameter_of_binary_tree(root: TreeNode) -> int: # Your implementation here ``` Example: ``` Input: [1,2,3,4,5] Output: 3 Explanation: The longest path is 4 -> 2 -> 1 -> 3 or 5 -> 2 -> 1 -> 3. Input: [1,2, Null, 3, 4] Output: 3 Explanation: The longest path is 3 -> 2 -> 4. ``` Note: You should ensure the function handles all edge cases and performs efficiently. Consider using helper functions to modularize your code if necessary.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def diameter_of_binary_tree(root: TreeNode) -> int: Returns the diameter of the binary tree. def depth(node: TreeNode) -> int: nonlocal max_diameter if not node: return 0 left_depth = depth(node.left) right_depth = depth(node.right) max_diameter = max(max_diameter, left_depth + right_depth) return max(left_depth, right_depth) + 1 max_diameter = 0 depth(root) return max_diameter"},{"question":"Write a function that takes an integer array as input and returns a new array containing the product of all elements except the one at the current index for each corresponding element in the input array. You must not use the division operation. For example, given the input array `[1, 2, 3, 4]`, the output should be `[24, 12, 8, 6]` because: - `24` is the product of `2 * 3 * 4` - `12` is the product of `1 * 3 * 4` - `8` is the product of `1 * 2 * 4` - `6` is the product of `1 * 2 * 3` Ensure your solution runs in O(n) time complexity.","solution":"def product_except_self(nums): Returns a new list where each element at index i is the product of all numbers in the input list except the one at index i. length = len(nums) result = [1] * length # Calculate left products left = 1 for i in range(length): result[i] = left left *= nums[i] # Calculate right products and final result right = 1 for i in reversed(range(length)): result[i] *= right right *= nums[i] return result"},{"question":"Design a program that takes an arbitrary integer list and outputs the longest contiguous subarray with a maximum sum. The program should also handle edge cases where the list is empty or contains non-integer elements, in which case it should return an error message. For example, given the list: [ -2, 1, -3, 4, -1, 2, 1, -5, 4 ] The program should return: [4, -1, 2, 1] with the sum: 6 For an empty list or a list containing non-integer values, the program should return an error message indicating the invalid input.","solution":"def max_subarray(nums): This function takes a list of integers and returns the longest contiguous subarray with a maximum sum along with the sum. If the input list is empty or contains non-integer elements, it returns an error message. if not nums: return \\"Invalid input: Empty list\\" if any(not isinstance(x, int) for x in nums): return \\"Invalid input: List contains non-integer elements\\" max_sum = float(\'-inf\') current_sum = 0 start = end = temp_start = 0 for i in range(len(nums)): if current_sum <= 0: temp_start = i current_sum = nums[i] else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return nums[start:end+1], max_sum"},{"question":"Write a function in Python that takes a list of non-negative integers and returns a new list where each element is the sum of itself and all previous elements in the list. For example, given the list [1, 2, 3, 4], the function should return [1, 3, 6, 10]. If the input list is empty, the function should return an empty list.","solution":"def cumulative_sum(numbers): Takes a list of non-negative integers and returns a new list where each element is the sum of itself and all previous elements in the list. If the input list is empty, the function returns an empty list. if not numbers: return [] cumulative_list = [] current_sum = 0 for number in numbers: current_sum += number cumulative_list.append(current_sum) return cumulative_list"},{"question":"Write a function in Python that accepts a dictionary of word-frequency pairs and returns a dictionary with the words sorted alphabetically and their frequencies. The function should take care of case-insensitivity, considering \'Apple\' and \'apple\' as the same word. Additionally, the function should be able to handle punctuation, treating \'hello\' and \'hello!\' as the same word. For simplicity, assume that the input dictionary does not contain any empty strings. Provide an example demonstrating the function with a sample input and output.","solution":"import re from collections import defaultdict def normalize_word(word): Normalize the word by converting it to lowercase and removing any punctuation. return re.sub(r\'[^ws]\', \'\', word).lower() def sorted_word_frequencies(word_freq_dict): Accepts a dictionary of word-frequency pairs and returns a new dictionary with words sorted alphabetically and their frequencies. This function is case-insensitive and handles punctuation. normalized_dict = defaultdict(int) for word, freq in word_freq_dict.items(): normalized_word = normalize_word(word) normalized_dict[normalized_word] += freq sorted_dict = dict(sorted(normalized_dict.items())) return sorted_dict def example(): word_freq_dict = { \'Apple\': 3, \'banana\': 2, \'Banana!\': 1, \'apple!\': 2, \'grape\': 1, \'Grape\': 1, \'Cherry\': 4 } result = sorted_word_frequencies(word_freq_dict) print(result) # Call the example function to demonstrate the function with sample input and output example()"},{"question":"Write a function that takes a list of integers and returns the list sorted in ascending order, using the bubble sort algorithm. The program should also output the number of swaps needed to sort the list. If the list contains elements that are not integers or is empty, your program should return a specific error message. Bubble sort is defined as follows: 1. Iterate over the list multiple times. 2. In each iteration, compare each pair of adjacent elements. 3. Swap the elements if they are in the wrong order. 4. Repeat steps 1-3 until no more swaps are needed. For example: - Input: [4, 2, 3, 1] - Output: [1, 2, 3, 4] - Swaps: 5 - Input: [] - Output: \\"The list is empty!\\" - Input: [1, 2, \'a\', 4] - Output: \\"Invalid input: list contains non-integer elements!\\"","solution":"def bubble_sort(arr): Sorts a list of integers using the bubble sort algorithm. Returns the sorted list and the number of swaps needed to sort the list. If the list is empty, returns \\"The list is empty!\\". If the list contains non-integer elements, returns \\"Invalid input: list contains non-integer elements!\\". if not arr: return \\"The list is empty!\\" if not all(isinstance(x, int) for x in arr): return \\"Invalid input: list contains non-integer elements!\\" n = len(arr) swaps = 0 for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swaps += 1 return arr, swaps"},{"question":"Write a function `most_common_word(file_path)` that takes the path of a text file as input and returns the most common word in the file. The function should ignore punctuation and be case-insensitive. Additionally, the function should return `None` if the file is empty or if no words are present in the file. You are provided with the path to the file. **Input:** A file path containing string. **Output:** The most common word in the file. **Example:** If the content of the file is: ``` Hello world! The world is full of amazing things. Hello again, world. ``` Calling `most_common_word(file_path)` should return: ``` \'world\' ``` Ensure your solution handles punctuation and case insensitivity before determining the most common word.","solution":"import re from collections import Counter def most_common_word(file_path): This function reads the content of a file at file_path and returns the most common word in the file. The function ignores punctuation and is case-insensitive. Returns None if the file is empty or contains no words. with open(file_path, \'r\') as file: text = file.read() # Remove punctuation and convert to lower case words = re.findall(r\'bw+b\', text.lower()) if not words: return None # Use Counter to find the most common word word_counts = Counter(words) most_common = word_counts.most_common(1) return most_common[0][0] if most_common else None"},{"question":"Write a Python program to evaluate postfix expressions using a stack. Postfix notation (also known as Reverse Polish notation) is a mathematical notation in which every operator follows all of its operands. The program should: - Accept a string input representing the postfix expression. The operands in the expression will be single-digit non-negative integers, and the operators will be `+`, `-`, `*`, and `/`. - Implement a stack to manipulate operands and intermediate results while processing the expression. - Support operations for addition, subtraction, multiplication, and division (integer division). - Check for errors in the expression, such as an incorrect number of operators/operands. - Print each step of the stack as it processes each symbol in the expression. The program should return: - The final evaluated result after the entire postfix expression is processed. - A message indicating an error if the provided postfix expression is invalid.","solution":"def evaluate_postfix(expression): Evaluates a postfix expression using a stack. Args: - expression (str): The postfix expression to evaluate. Returns: - int: The result of the evaluation. - str: An error message if the expression is invalid. stack = [] operators = set([\'+\', \'-\', \'*\', \'/\']) for token in expression.split(): if token.isdigit(): stack.append(int(token)) print(f\\"Pushed {token} -> Stack: {stack}\\") elif token in operators: if len(stack) < 2: return \\"Error: Invalid postfix expression\\" b = stack.pop() a = stack.pop() print(f\\"Popped {a} and {b} for operator {token}\\") if token == \'+\': result = a + b elif token == \'-\': result = a - b elif token == \'*\': result = a * b elif token == \'/\': if b == 0: return \\"Error: Division by zero\\" result = a // b stack.append(result) print(f\\"Applied {token} -> Stack: {stack}\\") else: return \\"Error: Invalid character in postfix expression\\" if len(stack) != 1: return \\"Error: Invalid postfix expression\\" return stack.pop()"},{"question":"Create a function `find_longest_palindrome` in Python that takes a string `s` as input and returns the longest palindromic substring within `s`. If there are multiple palindromic substrings with the same maximum length, return the one that appears first. You may assume that the input string consists of lowercase letters only and has at least one character. Also, provide a brief explanation of the approach you used to solve the problem. Example: Input: \\"babad\\" Output: \\"bab\\" Note: \\"aba\\" is also a valid answer, but \\"bab\\" appears first. Write the function and test it with the example input to verify that it works correctly.","solution":"def find_longest_palindrome(s: str) -> str: Returns the longest palindromic substring within the input string s. if not s: return \\"\\" n = len(s) start, max_length = 0, 1 for i in range(n): if i - max_length >= 1 and s[i-max_length-1:i+1] == s[i-max_length-1:i+1][::-1]: start = i - max_length - 1 max_length += 2 elif i - max_length >= 0 and s[i-max_length:i+1] == s[i-max_length:i+1][::-1]: start = i - max_length max_length += 1 return s[start:start + max_length]"},{"question":"Using the following URL: https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data, download and preprocess the dataset to classify wines into one of three categories according to their origin. Utilize the scikit-learn library to build and evaluate a classification model. Ensure your code handles missing data, normalizes the feature set, and demonstrates the accuracy, precision, recall, and F1 score of the chosen model.","solution":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.impute import SimpleImputer from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score def download_and_preprocess_data(url: str): # Load the data column_names = [ \'Class\', \'Alcohol\', \'Malic acid\', \'Ash\', \'Alcalinity of ash\', \'Magnesium\', \'Total phenols\', \'Flavanoids\', \'Nonflavanoid phenols\', \'Proanthocyanins\', \'Color intensity\', \'Hue\', \'OD280/OD315 of diluted wines\', \'Proline\' ] data = pd.read_csv(url, header=None, names=column_names) # Handle missing values imputer = SimpleImputer(strategy=\'mean\') data_imputed = imputer.fit_transform(data) # Separate the features and labels X = data_imputed[:, 1:] y = data_imputed[:, 0] # Normalize the feature set scaler = StandardScaler() X_normalized = scaler.fit_transform(X) return train_test_split(X_normalized, y, test_size=0.3, random_state=42) def train_and_evaluate_model(): # Download and preprocess the data url = \'https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data\' X_train, X_test, y_train, y_test = download_and_preprocess_data(url) # Train a RandomForestClassifier model = RandomForestClassifier(random_state=42) model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) # Calculate evaluation metrics metrics = { \'accuracy\': accuracy_score(y_test, y_pred), \'precision\': precision_score(y_test, y_pred, average=\'macro\'), \'recall\': recall_score(y_test, y_pred, average=\'macro\'), \'f1_score\': f1_score(y_test, y_pred, average=\'macro\') } return metrics # Generate the metrics dictionary metrics_dict = train_and_evaluate_model() metrics_dict"},{"question":"Write a Python function that simulates a simple memory allocation system in a continuous block of memory represented by a list. Implement the following functions within your memory allocation system: 1. `allocate(size)`: This function should allocate a block of memory of the given size. If enough contiguous memory is not available, it should return an error message. If allocation is successful, return an identifier for the allocated block. 2. `deallocate(identifier)`: This function should deallocate the memory block associated with the given identifier, making the space available for future allocations. If the identifier does not exist, return an error message. 3. `status()`: This function should return the current status of the memory, showing which blocks are allocated and which are free. The memory block is initialized with a fixed size, and all allocated blocks should be represented with a unique identifier for tracking. Simulate this process and demonstrate the usage of these functions with example calls, including edge cases such as trying to allocate more memory than available or deallocate a non-existing block.","solution":"class MemoryAllocationSystem: def __init__(self, size): Initializes the memory allocation system with given size. The memory is represented by a list of size `size` with all elements set to None. self.size = size self.memory = [None] * size self.next_id = 1 self.allocated_blocks = {} # to store information about allocated blocks def allocate(self, size): Allocates a block of memory of the given size. Returns an identifier if the allocation is successful. Returns an error message if enough contiguous memory is not available. for i in range(self.size - size + 1): if all(self.memory[j] is None for j in range(i, i + size)): block_id = self.next_id for j in range(i, i + size): self.memory[j] = block_id self.allocated_blocks[block_id] = (i, i + size - 1) self.next_id += 1 return block_id return \\"Error: Not enough contiguous memory available\\" def deallocate(self, identifier): Deallocates the memory block associated with the given identifier. Returns success message if deallocation is successful. Returns error message if identifier does not exist. if identifier in self.allocated_blocks: start, end = self.allocated_blocks.pop(identifier) for i in range(start, end + 1): self.memory[i] = None return \\"Deallocated successfully\\" return \\"Error: Identifier does not exist\\" def status(self): Returns the current status of the memory, showing which blocks are allocated and which are free. return self.memory"},{"question":"Create a Python function that takes a sentence as input and returns a dictionary where the keys are the words, and the values are the counts of their occurrences, sorted by the counts in descending order. Ignore punctuation and consider letter case insensitive.","solution":"import re from collections import Counter def count_words(sentence): Returns a dictionary where the keys are the words, and the values are the counts of their occurrences, sorted by the counts in descending order. Ignores punctuation and is case insensitive. # Removing punctuation and converting to lowercase clean_sentence = re.sub(r\'[^ws]\', \'\', sentence).lower() # Splitting the sentence into words words = clean_sentence.split() # Counting the words word_counts = Counter(words) # Sorting the counts in descending order sorted_word_counts = dict(sorted(word_counts.items(), key=lambda item: item[1], reverse=True)) return sorted_word_counts"},{"question":"Please implement a Python function that accepts a list of integers and returns a new list where each integer is replaced by the sum of its digits. Use list comprehensions for the transformation. The function should handle cases where the list can be empty, or the integers can be negative. In the case of negative integers, the sum of digits should consider the sign. For example: ```python def sum_of_digits(int_list): # Your implementation here # Examples: sum_of_digits([123, 456, -789]) # Output should be [6, 15, -24] sum_of_digits([0, 34, -12]) # Output should be [0, 7, -3] ``` Constraints: - The function should only use list comprehensions for any transformations applied on the list. - Negative integers must retain their sign in the output. - Aim for concise, readable, and efficient code. Pro-tip: Consider using helper functions within the main function to handle specific tasks if needed for better code structuring.","solution":"def sum_of_digits(int_list): def digit_sum(n): return sum(int(d) for d in str(abs(n))) * (1 if n >= 0 else -1) return [digit_sum(x) for x in int_list]"},{"question":"Design a function that takes a list of integers as input and returns a new list where each element in the original list is replaced by the product of every other element in the list. For example, given the input list [1, 2, 3, 4], the function should return [24, 12, 8, 6] since 24 is the product of 2*3*4, 12 is the product of 1*3*4, 8 is the product of 1*2*4, and 6 is the product of 1*2*3. Ensure your solution is efficient and doesn\'t use division.","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: Returns a list where each element is the product of all other elements in the input list. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] result = [left_products[i] * right_products[i] for i in range(n)] return result"},{"question":"Write a function that takes a list of integers and moves all the zeroes to the end while maintaining the relative order of the non-zero elements. The function should do this in-place and aim for optimal time and space complexity. Create the function: def move_zeroes(nums: list): Moves all zeroes in the list \'nums\' to the end while maintaining the order of non-zero elements. The operation should be performed in-place with optimal time and space complexity. #Scenarios: # move_zeroes([0, 1, 0, 3, 12]) => [1, 3, 12, 0, 0] # move_zeroes([0, 0, 1]) => [1, 0, 0] # move_zeroes([4, 2, 4, 0, 0, 3, 0, 5, 1, 0]) => [4, 2, 4, 3, 5, 1, 0, 0, 0, 0]","solution":"def move_zeroes(nums: list): Moves all zeroes in the list \'nums\' to the end while maintaining the order of non-zero elements. The operation should be performed in-place with optimal time and space complexity. zero_index = 0 # position to put the next non-zero element for i in range(len(nums)): if nums[i] != 0: nums[zero_index], nums[i] = nums[i], nums[zero_index] zero_index += 1"},{"question":"Write a code to find the maximum sum of a contiguous subarray within a given array using Kadane\'s Algorithm. array = [−2, 1, −3, 4, −1, 2, 1, −5, 4]","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray using Kadane\'s Algorithm. max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function in Python that takes a string containing lowercase alphabetic characters, whitespace, and punctuation, and returns a new string where each character\'s frequency is shown right after the character itself. If a character appears consecutively, it should be grouped, but its count should still reflect the total frequency of that character in the entire string, not merely its frequency in that particular consecutive group. For example, given the input \\"hello world\\", the output should be \\"h1e1l3l3o2 1w1o2r1l3d1\\". Another example, given \\"aaabbb\\", should yield \\"a3a3a3b3b3b3\\". Note: The frequency count should be case-sensitive, and the function should handle non-alphabetic characters, whitespace, and punctuations correctly. You can assume that the input will always be a non-empty string containing valid characters as described. The function should be optimized to handle strings efficiently while maintaining the correct counting for each character.","solution":"def char_with_frequencies(s): Takes a string containing lowercase alphabetic characters, whitespace, and punctuation, and returns a new string where each character\'s frequency is shown right after the character itself. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Build the result string with character and its frequency in original order result = \'\'.join(c + str(char_count[c]) for c in s) return result"},{"question":"Given a string of lowercase alphabets, write a function to generate all possible permutations of the string without using any built-in permutation functions. The function should return a list of all unique permutations sorted in lexicographic order. For example, if the input string is \\"abc\\", the output should be [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"].","solution":"def permute_string(s): Generate all possible permutations of the string without using any built-in permutation functions. Returns a list of all unique permutations sorted in lexicographic order. def helper(s, path, used, res): if len(path) == len(s): res.append(\\"\\".join(path)) return for i in range(len(s)): if used[i]: continue # Skip duplicates if i > 0 and s[i] == s[i-1] and not used[i-1]: continue used[i] = True path.append(s[i]) helper(s, path, used, res) path.pop() used[i] = False s = sorted(s) res = [] used = [False] * len(s) helper(s, [], used, res) return res"},{"question":"Write a function that takes a list of integers and returns the length of the longest subsequence that is strictly increasing. Your function should have a time complexity of O(n log n) where n is the number of elements in the list.","solution":"import bisect def length_of_LIS(nums): Returns the length of the longest strictly increasing subsequence in nums. Uses a time complexity of O(n log n) where n is the number of elements in the list. Args: nums (list): A list of integers Returns: int: The length of the longest strictly increasing subsequence if not nums: return 0 sub = [] for x in nums: if len(sub) == 0 or x > sub[-1]: sub.append(x) else: idx = bisect.bisect_left(sub, x) sub[idx] = x return len(sub)"},{"question":"Implement a Huffman coding algorithm for text data compression. The algorithm should first compute the frequency of each character in the input text. Then, build a binary tree where each leaf node corresponds to a character from the input text, and the path from the root to the leaf node represents the binary code for that character. The binary tree is constructed in such a way that the most frequent characters have the shortest codes. Once the tree is constructed, the algorithm should generate the binary codes for each character and use these codes to encode the input text into a compressed bit string. Additionally, write a decoding function that can take the bit string and the binary tree to reconstruct the original text. Provide an evaluation of the compression efficiency by comparing the sizes of the original and compressed text.","solution":"import heapq from collections import defaultdict from typing import Dict, Tuple, Any class HuffmanNode: def __init__(self, char: str, freq: int): self.char = char self.freq = freq self.left = None self.right = None # Define comparison methods for priority queue def __lt__(self, other): return self.freq < other.freq def compute_frequencies(text: str) -> Dict[str, int]: frequencies = defaultdict(int) for char in text: frequencies[char] += 1 return frequencies def build_huffman_tree(frequencies: Dict[str, int]) -> HuffmanNode: priority_queue = [HuffmanNode(char, freq) for char, freq in frequencies.items()] heapq.heapify(priority_queue) while len(priority_queue) > 1: left = heapq.heappop(priority_queue) right = heapq.heappop(priority_queue) merged = HuffmanNode(None, left.freq + right.freq) merged.left = left merged.right = right heapq.heappush(priority_queue, merged) return priority_queue[0] def generate_codes(root: HuffmanNode, prefix: str = \\"\\", codebook: Dict[str, str] = None) -> Dict[str, str]: if codebook is None: codebook = {} if root is not None: if root.char is not None: codebook[root.char] = prefix generate_codes(root.left, prefix + \\"0\\", codebook) generate_codes(root.right, prefix + \\"1\\", codebook) return codebook def encode(text: str, codebook: Dict[str, str]) -> str: return \'\'.join(codebook[char] for char in text) def decode(encoded_text: str, root: HuffmanNode) -> str: current = root decoded_chars = [] for bit in encoded_text: if bit == \'0\': current = current.left else: current = current.right if current.char is not None: decoded_chars.append(current.char) current = root return \'\'.join(decoded_chars) def compression_efficiency(original_text: str, encoded_text: str) -> Tuple[int, int, float]: original_size = len(original_text) * 8 # size in bits compressed_size = len(encoded_text) # size in bits efficiency = (original_size - compressed_size) / original_size * 100 # compression efficiency in percentage return original_size, compressed_size, efficiency"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Write a function `is_palindrome` that takes a string as input and returns `True` if the string is a palindrome and `False` otherwise. Additionally, write a function `longest_palindrome` that takes a string as input and returns the longest substring of that string which is a palindrome. If there are multiple substrings of the same length, return the first one. # Example: ```python print(is_palindrome(\\"A man a plan a canal Panama\\")) # should return True print(is_palindrome(\\"hello\\")) # should return False print(longest_palindrome(\\"babad\\")) # should return \\"bab\\" or \\"aba\\" print(longest_palindrome(\\"cbbd\\")) # should return \\"bb\\" ``` # Constraints: - You may assume the input string will have a length between 1 and 1000. - Your solution should have a time complexity of O(n^2) or better.","solution":"def is_palindrome(s: str) -> bool: Determines whether the given string is a palindrome. Ignores spaces, punctuation, and capitalization. # Normalize the string by removing non-alphanumeric characters and converting to lowercase cleaned_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string reads the same forward and backward return cleaned_s == cleaned_s[::-1] def longest_palindrome(s: str) -> str: Returns the longest palindromic substring in the given string. If there are multiple substrings of the same length, returns the first one. n = len(s) if n == 0: return \\"\\" # Initialize the DP table to store palindromic substrings information dp = [[False] * n for _ in range(n)] start = 0 max_length = 1 # Single character substrings are palindromes for i in range(n): dp[i][i] = True # Check for 2-character substrings for i in range(n-1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for substrings longer than 2 characters for length in range(3, n + 1): # length of substring for i in range(n - length + 1): j = i + length - 1 # ending index of substring if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if length > max_length: start = i max_length = length return s[start:start + max_length]"},{"question":"Implement a function that returns the nth Fibonacci number, where n is provided as input. The function should be efficient and handle cases where n can be very large. Consider optimizations such as memoization or an iterative approach rather than a simple recursive solution to ensure the function runs in a reasonable time for large values of n. Provide both the function and a brief explanation of your optimization choice.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach. This approach is efficient and handles large values of n. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function that takes a list of integers and returns the greatest difference between any two elements in the list. For example, given the list [5, 3, 1, 9, 7], the function should return 8, which is the difference between 9 and 1. Ensure the function handles lists with both positive and negative integers appropriately and returns 0 if the list contains fewer than two elements.","solution":"def greatest_difference(lst): Returns the greatest difference between any two elements in the list. If the list contains fewer than two elements, returns 0. :param lst: List of integers. :return: Integer value representing the greatest difference. if len(lst) < 2: return 0 max_element = max(lst) min_element = min(lst) return max_element - min_element"},{"question":"Create a Python function named `find_substrings` that takes two arguments: a string and a list of words. The function should find all starting indices in the string where a concatenation of each word within the list exactly once in any order is found. Return these indices as a list of integers. Each word in the list is of the same length, and the concatenated words in the string must not overlap. Ensure the function handles edge cases, such as empty string or list, and include appropriate error handling and validation. Example Input: `find_substrings(\\"barfoothefoobarman\\", [\\"foo\\", \\"bar\\"])` Example Output: `[0, 9]` Explanation: The output `[0, 9]` corresponds to the starting indices of the substrings \\"barfoo\\" and \\"foobar\\" in the given string.","solution":"def find_substrings(s, words): Finds all starting indices in the string s where concatenation of each word in words exactly once in any order is found. Parameters: s (str): The string to search within. words (list of str): The list of words to concatenate and find within the string. Returns: list of int: Starting indices of substrings in string s. if not s or not words or not words[0]: return [] word_len = len(words[0]) words_count = len(words) substring_len = word_len * words_count words_map = {word: words.count(word) for word in words} result_indices = [] for i in range(len(s) - substring_len + 1): seen_words = {} for j in range(words_count): word_start = i + j * word_len word = s[word_start:word_start + word_len] if word in words_map: seen_words[word] = seen_words.get(word, 0) + 1 if seen_words[word] > words_map[word]: break else: break if seen_words == words_map: result_indices.append(i) return result_indices"},{"question":"Implement a Python function to determine if a given string is an anagram of another string. For instance, the strings \\"listen\\" and \\"silent\\" are anagrams of each other.","solution":"def are_anagrams(str1, str2): Determines if the given strings str1 and str2 are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another, typically using all the original letters exactly once. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if str1 and str2 are anagrams, False otherwise. return sorted(str1) == sorted(str2)"},{"question":"Define a function called `merge_sorted_lists` that takes two arguments: `list1` and `list2`, both of which are lists of integers sorted in ascending order. The function should return a single merged list that contains all the integers from `list1` and `list2` sorted in ascending order. The resulting list should not contain any duplicate integers, meaning each integer should appear only once in the final output. Take into account efficient merging and de-duplication to ensure optimal performance.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists (list1 and list2) and returns a single list which is sorted and contains no duplicate integers. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: if not merged_list or merged_list[-1] != list1[i]: merged_list.append(list1[i]) i += 1 elif list1[i] > list2[j]: if not merged_list or merged_list[-1] != list2[j]: merged_list.append(list2[j]) j += 1 else: # list1[i] == list2[j] if not merged_list or merged_list[-1] != list1[i]: merged_list.append(list1[i]) i += 1 j += 1 while i < len(list1): if not merged_list or merged_list[-1] != list1[i]: merged_list.append(list1[i]) i += 1 while j < len(list2): if not merged_list or merged_list[-1] != list2[j]: merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are given a list of strings representing items and their quantities in different inventories. Each string is formatted as \\"item:quantity\\". Your task is to write a function `consolidate_inventory` that consolidates these inventories into a single inventory, summing up the quantities for each item. If any item\'s quantity exceeds 100, it should be capped at 100. Function Signature ```python def consolidate_inventory(inventories: List[str]) -> Dict[str, int]: pass ``` Input - `inventories`: A list of strings, each formatted as \\"item:quantity\\". Output - A dictionary with items as keys and their total quantities as values, where no quantity exceeds 100. Example ```python inventories = [ \\"apple:40\\", \\"banana:60\\", \\"orange:25\\", \\"apple:70\\", \\"banana:50\\", \\"orange:80\\" ] print(consolidate_inventory(inventories)) ``` Expected Output ``` { \'apple\': 100, \'banana\': 100, \'orange\': 100 } ``` Constraints 1. The input list will contain at least one string. 2. Each item name will be a non-empty string consisting of alphabetic characters. 3. Each quantity will be a non-negative integer and will not exceed 100 on a single entry. 4. Assume the quantity of an item will fit within an integer range when summed. Explanation of Example - The quantities for `apple` are 40 and 70, summing up to 110. Since this exceeds 100, it is capped at 100. - The quantities for `banana` are 60 and 50, summing up to 110. Capped at 100. - The quantities for `orange` are 25 and 80, summing up to 105. Capped at 100.","solution":"from typing import List, Dict def consolidate_inventory(inventories: List[str]) -> Dict[str, int]: inventory_dict = {} for entry in inventories: item, quantity = entry.split(\':\') quantity = int(quantity) if item in inventory_dict: inventory_dict[item] += quantity if inventory_dict[item] > 100: inventory_dict[item] = 100 else: inventory_dict[item] = min(quantity, 100) return inventory_dict"},{"question":"Implement a Python function that takes in a list of integers and returns a new list comprising the squares of the even numbers, but only if their square is greater than 50. The function should maintain the order of the original list. For example: Input: [3, 4, 7, 8, 12, 15, 2] Output: [64, 144]","solution":"def squares_of_even_numbers_greater_than_50(lst): Returns a list of squares of the even numbers in `lst`, but only if their square is greater than 50. return [x**2 for x in lst if x % 2 == 0 and x**2 > 50]"},{"question":"Given a list of integers, write a Python function that groups the integers into sublists where each sublist contains only consecutive numbers. For instance, given the list `[1, 2, 2, 3, 7, 8, 9, 11, 13, 14, 15]`, the output should be `[[1, 2, 2, 3], [7, 8, 9], [11], [13, 14, 15]]`. Your solution must handle duplicate numbers and should maintain the order of appearance in the original list. If the input list is empty, your function should return an empty list. Further challenge: Ensure your solution has a time complexity of O(n), where n is the number of elements in the input list.","solution":"def group_consecutive(nums): Groups a list of integers into sublists where each sublist contains only consecutive numbers. Duplicates are allowed, and the order of appearance is maintained. Args: nums (list): A list of integers. Returns: list: A list of sublists containing consecutive integers. if not nums: return [] result = [] current_group = [nums[0]] for i in range(1, len(nums)): if nums[i] == nums[i-1] + 1 or nums[i] == nums[i-1]: current_group.append(nums[i]) else: result.append(current_group) current_group = [nums[i]] result.append(current_group) return result"},{"question":"Create a Python class `CircularQueue` that implements a circular queue of fixed size. The class should support the following operations: - `enqueue(value)`: Adds `value` to the end of the queue. If the queue is full, the operation should remove the oldest element and add the new value. - `dequeue()`: Removes and returns the oldest element from the queue. If the queue is empty, it should return `None`. - `peek()`: Returns the oldest element without removing it. If the queue is empty, it should return `None`. - `is_empty()`: Returns `True` if the queue is empty, otherwise `False`. - `is_full()`: Returns `True` if the queue is full, otherwise `False`. Ensure that you provide tests for each of these methods to verify their correctness. For additional difficulty, implement the tests using `unittest` ensuring edge cases are also covered. Example usage: ```python queue = CircularQueue(3) queue.enqueue(10) queue.enqueue(20) queue.enqueue(30) queue.enqueue(40) # This should remove 10 and add 40 print(queue.dequeue()) # Expected to print 20 print(queue.peek()) # Expected to print 30 print(queue.is_empty()) # Expected to print False print(queue.is_full()) # Expected to print True ```","solution":"class CircularQueue: def __init__(self, size): Initializes the queue with a fixed size. self.size = size self.queue = [None] * size self.head = self.tail = -1 def enqueue(self, value): Adds value to the end of the queue. If the queue is full, it removes the oldest element to make space. if (self.tail + 1) % self.size == self.head: self.head = (self.head + 1) % self.size # Move head to remove the oldest element if self.head == -1: # First inserted element self.head = 0 self.tail = (self.tail + 1) % self.size self.queue[self.tail] = value def dequeue(self): Removes the oldest element from the queue and returns it. If the queue is empty, returns None. if self.head == -1: return None # Queue is empty value = self.queue[self.head] if self.head == self.tail: self.head = self.tail = -1 # Queue is now empty else: self.head = (self.head + 1) % self.size return value def peek(self): Returns the oldest element without removing it. If the queue is empty, returns None. if self.head == -1: return None # Queue is empty return self.queue[self.head] def is_empty(self): Returns True if the queue is empty, otherwise False. return self.head == -1 def is_full(self): Returns True if the queue is full, otherwise False. return (self.tail + 1) % self.size == self.head"},{"question":"Using the `matplotlib` and `numpy` libraries, generate a sequence of random numbers to simulate daily temperatures for a month. The temperatures should follow a normal distribution with a mean of 20 degrees Celsius and a standard deviation of 5 degrees Celsius. Plot these temperatures as a time series with appropriate labels and titles. Furthermore, add a rolling average curve to the same plot to smooth the temperature fluctuations and make trends more noticeable. Finally, analyze the plot and discuss the trends you observe, including any patterns or anomalies that stand out. Provide well-documented code explaining each step in your analysis.","solution":"import numpy as np import matplotlib.pyplot as plt # Generate random daily temperatures for a month mean_temperature = 20 std_deviation_temperature = 5 num_days = 30 temperatures = np.random.normal(mean_temperature, std_deviation_temperature, num_days) # Plot the temperatures as a time series plt.figure(figsize=(10, 5)) plt.plot(temperatures, label=\'Daily Temperatures\') # Calculate and plot the rolling average (7-day window) rolling_avg = np.convolve(temperatures, np.ones(7)/7, mode=\'valid\') plt.plot(range(6, num_days), rolling_avg, color=\'orange\', label=\'7-Day Rolling Average\') # Labels and title plt.xlabel(\'Day of the Month\') plt.ylabel(\'Temperature (°C)\') plt.title(\'Daily Temperatures and Rolling Average in a Month\') plt.legend() plt.grid(True) # Display the plot plt.show() # Discussion on trends and patterns summary = The plot shows daily temperatures over a 30-day period that follow a normal distribution around 20°C with a 5°C standard deviation. There are noticeable fluctuations from day to day, as expected with random variations. The 7-day rolling average curve provides a smoother trend line, which helps in identifying the overall temperature trend. It appears that there are periods where the temperature tends to stay below or above the mean temperature of 20°C. No significant anomalies are observed, and the variations look naturally distributed. print(summary)"},{"question":"Develop a coding function that takes a list of integers as input and returns the largest product that can be obtained from any three numbers in the list. Ensure that your implementation handles both positive and negative numbers, and consider edge cases where the list might contain fewer than three elements.","solution":"def largest_product_of_three(nums): Returns the largest product obtainable from any three numbers in the list. If the list has fewer than three numbers, returns None. if len(nums) < 3: return None nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"How do I write a Python script that reads a JSON file containing information about various books (title, author, and price) and filters out the books that have a price greater than a given value? The script should take two inputs: the path to the JSON file and the maximum price threshold. It should output a new JSON file with the filtered data.","solution":"import json def filter_books_by_price(input_file_path, max_price, output_file_path): Filters books with a price greater than the specified max_price from a JSON file and writes the filtered data to a new JSON file. Parameters: input_file_path (str): Path to the input JSON file containing book data. max_price (float): Maximum price threshold. output_file_path (str): Path to the output JSON file to write the filtered data. # Read the input JSON file with open(input_file_path, \'r\') as input_file: books = json.load(input_file) # Filter the books based on the max_price filtered_books = [book for book in books if book[\'price\'] <= max_price] # Write the filtered data to the output JSON file with open(output_file_path, \'w\') as output_file: json.dump(filtered_books, output_file, indent=4)"},{"question":"Write a function in Python that takes a list of integers as input and returns a new list containing only the prime numbers from the original list. A prime number is defined as a number greater than 1 that has no divisors other than 1 and itself. Your function should handle lists with values ranging from 0 to 1000 competently. Include a main block that demonstrates the functionality of your function with at least two different test cases. Example input and output: ``` Input: [10, 15, 3, 7, 8, 23] Output: [3, 7, 23] ```","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a new list containing only the prime numbers from the input list. return [num for num in numbers if is_prime(num)] if __name__ == \\"__main__\\": print(filter_primes([10, 15, 3, 7, 8, 23])) print(filter_primes([1, 2, 4, 6, 9, 11, 29, 37]))"},{"question":"Consider the following problem that involves a binary search tree (BST): Define a function to determine if a given binary tree is a valid binary search tree (BST). A BST is defined as follows: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. Your function should take the root node of the binary tree as its input and return `True` if the tree is a valid BST and `False` otherwise. The binary tree nodes are represented by the following class: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Write the function `is_valid_bst` that takes a `TreeNode` object as its input and returns a boolean indicating whether the binary tree is a valid BST. Example: ```python root = TreeNode(2) root.left = TreeNode(1) root.right = TreeNode(3) assert is_valid_bst(root) == True root = TreeNode(5) root.left = TreeNode(1) root.right = TreeNode(4) root.right.left = TreeNode(3) root.right.right = TreeNode(6) assert is_valid_bst(root) == False ``` Constraints: - The number of nodes in the tree is in the range `[1, 10^4]`. - The values of the nodes are in the range `[-10^4, 10^4]`. Please provide a complete and correct implementation that thoroughly checks the BST properties.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root: TreeNode) -> bool: def validate(node, low=-float(\'inf\'), high=float(\'inf\')): if not node: return True if not (low < node.val < high): return False return validate(node.left, low, node.val) and validate(node.right, node.val, high) return validate(root)"},{"question":"You are given a list of cities, each with an associated list of distances to other cities. Write a Python function that, given the names of two cities, finds the shortest path between them using Dijkstra\'s algorithm. Your function should handle cases where no path exists between the cities. Use appropriate data structures to represent the cities and their distances. Provide meaningful output for the path and its total distance. You are required to demonstrate the code with a sample dataset of at least five cities.","solution":"import heapq def dijkstra(city_map, start_city, end_city): Finds the shortest path between two cities using Dijkstra\'s algorithm. Args: city_map (dict): A dictionary where keys are city names and values are dictionaries of neighboring cities and their respective distances. start_city (str): The starting city name. end_city (str): The destination city name. Returns: tuple: A tuple containing the shortest path (list of city names) and the total distance (int). Returns ([], float(\'inf\')) if no path exists. # Priority queue to hold cities to explore queue = [(0, start_city, [])] # Dictionary to keep track of visited cities visited = set() while queue: (cost, city, path) = heapq.heappop(queue) if city in visited: continue # Add current city to the path path = path + [city] visited.add(city) # If we reached the end city, return the result if city == end_city: return (path, cost) # Explore neighboring cities for neighbor, distance in city_map.get(city, {}).items(): if neighbor not in visited: heapq.heappush(queue, (cost + distance, neighbor, path)) # If path doesn\'t exist return ([], float(\'inf\')) # Sample data city_map = { \\"A\\": {\\"B\\": 1, \\"C\\": 4}, \\"B\\": {\\"A\\": 1, \\"C\\": 2, \\"D\\": 5}, \\"C\\": {\\"A\\": 4, \\"B\\": 2, \\"D\\": 1}, \\"D\\": {\\"B\\": 5, \\"C\\": 1, \\"E\\": 3}, \\"E\\": {\\"D\\": 3} }"},{"question":"Code: bank_account.py Write the code to implement a simple banking system. Use the following class definitions and context to guide your implementation. Context [Alice: I need a basic banking system that allows me to manage accounts and transactions.] Original Requirements Alice wants a system where she can create and manage multiple bank accounts, deposit and withdraw money, and transfer funds between accounts. Product Goals ```python [ \\"Create a system to manage multiple bank accounts\\", \\"Allow deposits and withdrawals to the accounts\\", \\"Provide functionality to transfer funds between accounts\\", \\"Ensure proper error handling for transactions\\" ] ``` User Stories ```python [ \\"As a user, I want to create a new bank account with a unique account number.\\", \\"As a user, I want to be able to deposit money into a bank account.\\", \\"As a user, I want to be able to withdraw money from a bank account.\\", \\"As a user, I want to transfer money between two bank accounts.\\", \\"As a user, I want to view the balance of my bank accounts.\\" ] ``` Competitive Analysis ```python [ \\"Simple Bank: Provides basic banking functionalities but lacks advanced features.\\", \\"MyBank: Offers user-friendly interface but is limited in terms of transaction types.\\", \\"FinanceApp: Includes comprehensive banking features but can be too complex for new users.\\" ] ``` Requirement Analysis The banking system should allow users to create and manage multiple bank accounts, perform deposits, withdrawals, and transfers. The system should also display account balances and handle transaction errors appropriately. Requirement Pool ```python [ (\\"Creating a new bank account\\", \\"P0\\"), (\\"Depositing money into an account\\", \\"P0\\"), (\\"Withdrawing money from an account\\", \\"P0\\"), (\\"Transferring money between accounts\\", \\"P0\\"), (\\"Viewing account balances\\", \\"P1\\") ] ``` Implementation Approach We will implement a `BankAccount` class to represent a single bank account and a `Bank` class to manage multiple accounts. The `BankAccount` class will include methods for depositing, withdrawing, and transferring money, as well as viewing the account balance. File list ```python [ \\"bank_account.py\\" ] ``` Data structures and interface definitions ```mermaid classDiagram class BankAccount{ +int account_number +str owner +float balance +deposit(amount: float) +withdraw(amount: float) +transfer(to_account: BankAccount, amount: float) +get_balance() float } class Bank{ +list~BankAccount~ accounts +create_account(owner: str) +get_account(account_number: int) BankAccount } Bank \\"1\\" -- \\"*\\" BankAccount: manages ``` Program call flow ```mermaid sequenceDiagram participant B as Bank participant A as BankAccount B->>A: create_account(owner) B->>A: get_account(account_number) A->>A: deposit(amount) A->>A: withdraw(amount) A->>A: transfer(to_account, amount) A->>A: get_balance() ``` Logic Analysis ```python [ (\\"bank_account.py\\", \\"Contains the BankAccount class with methods for handling deposits, withdrawals, transfers, and viewing balance. It should be implemented first.\\"), (\\"bank.py\\", \\"Contains the Bank class, which manages multiple BankAccount objects. It should be implemented second, once the BankAccount class is complete.\\") ] ``` Task list ```python [ \\"Implement the BankAccount class with methods for depositing, withdrawing, transferring, and getting balance.\\", \\"Implement the Bank class to manage multiple accounts, create new accounts, and retrieve accounts by account number.\\" ] ``` Shared Knowledge ```python \'bank_account.py\' contains the BankAccount class with methods for handling deposits, withdrawals, transfers, and viewing balance. \'bank.py\' contains the Bank class, which manages multiple BankAccount objects. ``` Anything UNCLEAR The requirement is clear to me. We need to ensure proper error handling for transactions, such as insufficient funds for withdrawals and transfers. Code: bank_account.py ```python class BankAccount: def __init__(self, account_number: int, owner: str, initial_balance: float = 0.0): self.account_number = account_number self.owner = owner self.balance = initial_balance def deposit(self, amount: float): if amount > 0: self.balance += amount else: raise ValueError(\\"Deposit amount must be positive\\") def withdraw(self, amount: float): if amount > self.balance: raise ValueError(\\"Insufficient funds\\") elif amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") else: self.balance -= amount def transfer(self, to_account: \'BankAccount\', amount: float): self.withdraw(amount) to_account.deposit(amount) def get_balance(self) -> float: return self.balance class Bank: def __init__(self): self.accounts = [] def create_account(self, owner: str) -> BankAccount: account_number = len(self.accounts) + 1 new_account = BankAccount(account_number, owner) self.accounts.append(new_account) return new_account def get_account(self, account_number: int) -> BankAccount: for account in self.accounts: if account.account_number == account_number: return account raise ValueError(\\"Account not found\\") ```","solution":"class BankAccount: def __init__(self, account_number: int, owner: str, initial_balance: float = 0.0): self.account_number = account_number self.owner = owner self.balance = initial_balance def deposit(self, amount: float): if amount > 0: self.balance += amount else: raise ValueError(\\"Deposit amount must be positive\\") def withdraw(self, amount: float): if amount > self.balance: raise ValueError(\\"Insufficient funds\\") elif amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") else: self.balance -= amount def transfer(self, to_account: \'BankAccount\', amount: float): self.withdraw(amount) to_account.deposit(amount) def get_balance(self) -> float: return self.balance class Bank: def __init__(self): self.accounts = [] def create_account(self, owner: str) -> BankAccount: account_number = len(self.accounts) + 1 new_account = BankAccount(account_number, owner) self.accounts.append(new_account) return new_account def get_account(self, account_number: int) -> BankAccount: for account in self.accounts: if account.account_number == account_number: return account raise ValueError(\\"Account not found\\")"},{"question":"Create a function `find_closest_pair` that receives a list of distinct integers and a target integer. The function should find and return the pair of integers from the list whose sum is closest to the target. If there are multiple pairs with the same closest sum, return the pair with the smallest integer first. If the list has fewer than two integers, return an empty tuple. ```python def find_closest_pair(nums: List[int], target: int) -> Tuple[int, int]: This function receives a list of distinct integers and a target integer. It returns the pair of integers from the list whose sum is closest to the target. If there are multiple pairs, it returns the pair sorted in ascending order with the smallest integer first. If the list has fewer than two integers, it returns an empty tuple. >>> find_closest_pair([1, 3, 4, 7, 10], 15) (4, 10) >>> find_closest_pair([1, -3, 4, 8, 10], 1) (-3, 4) >>> find_closest_pair([5], 10) () # Your code here import random ``` **Examples:** - Given an input list `nums = [1, 3, 4, 7, 10]` and target `15`, the function should return `(4, 10)`. - Given an input list `nums = [1, -3, 4, 8, 10]` and target `1`, the function should return `(-3, 4)`. - Given an input list `nums = [5]` and target `10`, the function should return `()`.","solution":"from typing import List, Tuple def find_closest_pair(nums: List[int], target: int) -> Tuple[int, int]: This function receives a list of distinct integers and a target integer. It returns the pair of integers from the list whose sum is closest to the target. If there are multiple pairs, it returns the pair sorted in ascending order with the smallest integer first. If the list has fewer than two integers, it returns an empty tuple. if len(nums) < 2: return () # Initialize variables to keep track of the closest pair and the smallest difference. closest_pair = () smallest_diff = float(\'inf\') # Sort the list to make it easier to maintain the smallest pair invariant nums.sort() # Two-pointer approach left, right = 0, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] current_diff = abs(current_sum - target) if current_diff < smallest_diff: smallest_diff = current_diff closest_pair = (nums[left], nums[right]) if current_sum < target: left += 1 elif current_sum > target: right -= 1 else: break # Found exact match return closest_pair"},{"question":"Design a program in Python that reads a large text file (e.g., a book) and identifies the frequency of each word. The program should output the ten most common words along with their frequencies. Your solution should efficiently handle memory usage and consider the removal of punctuation and common stop words (e.g., \\"the\\", \\"and\\", \\"in\\"). Also, create a function to allow users to query the frequency of any specific word in the text. Ensure that your code is optimized for performance and includes error handling for file input operations.","solution":"import re from collections import Counter import string # Define the set of common stop words STOP_WORDS = set([ \\"the\\", \\"and\\", \\"in\\", \\"of\\", \\"to\\", \\"a\\", \\"is\\", \\"it\\", \\"that\\", \\"for\\", \\"on\\", \\"with\\", \\"as\\", \\"at\\", \\"this\\", \\"by\\", \\"an\\", \\"are\\", \\"be\\", \\"from\\", \\"which\\", \\"or\\", \\"we\\", \\"can\\", \\"not\\", \\"all\\", \\"one\\", \\"have\\", \\"has\\", \\"you\\", \\"but\\", \\"they\\", \\"i\\", \\"he\\", \\"she\\", \\"will\\", \\"was\\", \\"were\\", \\"do\\", \\"does\\", \\"did\\" ]) def clean_text(text): Remove punctuation and convert text to lowercase. text = text.lower() text = re.sub(f\\"[{string.punctuation}]\\", \\" \\", text) return text def count_word_frequencies(file_path): Count the frequency of each word in the given text file. Returns the ten most common words along with their frequencies. word_counter = Counter() try: with open(file_path, \'r\', encoding=\\"utf-8\\") as file: for line in file: clean_line = clean_text(line) words = clean_line.split() filtered_words = [word for word in words if word not in STOP_WORDS] word_counter.update(filtered_words) except FileNotFoundError: print(\\"File not found. Please check the file path.\\") return [] except Exception as e: print(f\\"An error occurred: {e}\\") return [] return word_counter.most_common(10) def query_word_frequency(file_path, query_word): Query the frequency of a specific word in the given text file. word_counter = Counter() try: with open(file_path, \'r\', encoding=\\"utf-8\\") as file: for line in file: clean_line = clean_text(line) words = clean_line.split() filtered_words = [word for word in words if word not in STOP_WORDS] word_counter.update(filtered_words) except FileNotFoundError: print(\\"File not found. Please check the file path.\\") return 0 except Exception as e: print(f\\"An error occurred: {e}\\") return 0 return word_counter[query_word.lower()]"},{"question":"Write a function that takes a list of words and organizes them into a dictionary where the key is the word length and the value is a list of words of that length. Implement this using a functional programming approach rather than imperative. Ensure the function can handle an empty list and words of varying lengths including single-letter words. words = [\\"apple\\", \\"banana\\", \\"cat\\", \\"dog\\", \\"elephant\\", \\"fish\\", \\"goat\\", \\"hat\\", \\"igloo\\", \\"jog\\", \\"kite\\"]","solution":"from collections import defaultdict from itertools import groupby def group_words_by_length(words): Groups words by their length. Parameters: words (list): A list of words. Returns: dict: A dictionary where the keys are word lengths and the values are lists of words of that length. sorted_words = sorted(words, key=len) grouped = groupby(sorted_words, key=len) return {key: list(group) for key, group in grouped}"},{"question":"Create a function that takes a string representing a mathematical expression in infix notation and converts it to its corresponding postfix notation (Reverse Polish Notation - RPN). The expression will only contain single-digit positive integers and the operators +, -, *, /, and parentheses (). Your function should correctly handle operator precedence and parentheses. Implement the Shunting Yard algorithm to perform this conversion. For example, given the input \\"3+(4*5)-7/(1+1)\\", the function should output \\"345*+71+/-\\".","solution":"def infix_to_postfix(expression): Converts an infix mathematical expression to its postfix notation. precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] operators = [] def has_higher_precedence(op1, op2): return precedence[op1] >= precedence[op2] for char in expression: if char.isdigit(): output.append(char) elif char in precedence: while operators and operators[-1] != \'(\' and has_higher_precedence(operators[-1], char): output.append(operators.pop()) operators.append(char) elif char == \'(\': operators.append(char) elif char == \')\': while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() # Pop the \'(\' while operators: output.append(operators.pop()) return \'\'.join(output)"},{"question":"Create a function that takes a string consisting of lowercase letters and removes duplicate characters such that each character appears only once and the output string remains in the order of the first occurrence of each character. Input Example: \\"programming\\" Output Example: \\"progamin\\"","solution":"def remove_duplicates(s): Removes duplicate characters from the string such that each character appears only once and the output string remains in the order of the first occurrence of each character. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"Write a Python function to find all unique substrings of a given string that have no repeating characters. For each unique substring found, the function should also return the starting index of that substring in the original string. The function should output a list of tuples, where each tuple contains a substring and its starting index. For example, given the string \\"abcabcbb\\", the unique substrings with no repeating characters are [\'abc\', \'bca\', \'cab\', \'abc\', \'b\', \'c\', \'a\', \'b\'], and their corresponding starting indices are [0, 1, 2, 3, 4, 5, 6, 7]. In addition, discuss the time complexity of your implemented solution and identify any possible optimizations. For testing, use the following string: String: \'abcabcbb\'","solution":"def unique_substrings_no_repeats(s): Returns a list of tuples containing all unique substrings without repeating characters and their starting indices. n = len(s) substrings = [] for i in range(n): seen = set() substring = \\"\\" for j in range(i, n): if s[j] in seen: break seen.add(s[j]) substring += s[j] substrings.append((substring, i)) return substrings # Time Complexity: O(n^2) # The two nested loops make the time complexity O(n^2) but this is somewhat optimal given that # all possible substrings must be checked once."},{"question":"Devise a Python function that receives a dictionary where keys are strings denoting product names and values are the corresponding prices (floats). The function should return the name of the most expensive product. Consider the following example: ```python products = {\\"laptop\\": 1500.00, \\"smartphone\\": 800.50, \\"tablet\\": 450.75} ```","solution":"def most_expensive_product(products): Returns the name of the most expensive product. Params: - products (dict): A dictionary where keys are product names and values are their prices. Returns: - (str): The name of the most expensive product. if not products: return None return max(products, key=products.get)"},{"question":"Write a function that takes a string as input and returns True if the string is a palindrome, ignoring spaces, punctuation, and capitalization, and False otherwise. Ensure that the function handles a variety of character types, including letters, numbers, and symbols, and performs efficiently even with long strings. Additionally, provide a brief explanation of your approach and its time complexity.","solution":"import re def is_palindrome(s): Returns True if the string s is a palindrome, ignoring spaces, punctuation, and capitalization. Returns False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_string == cleaned_string[::-1]"},{"question":"Write a function that receives a list of integers and a target sum. The function should identify if there exists a pair of numbers in the list that adds up to the target sum. Return `True` if such a pair exists, and `False` otherwise. Ensure your solution has a time complexity better than O(n^2), where n is the number of integers in the list.","solution":"def has_pair_with_sum(nums, target): Returns True if there are two numbers in the list that add up to the target sum, otherwise False. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"Create a class to represent a vehicle, which includes properties such as make, model, year, and VIN. The class should contain methods to start the engine, stop the engine, and determine if the vehicle is an antique (i.e., older than 25 years from the current year). Provide mechanisms to validate the inputs (e.g., year should be a positive integer and within a realistic range, VIN should be a string of 17 characters). Additionally, create an overloaded \\"==\\" operator to compare two vehicles based on their VINs.","solution":"import datetime class Vehicle: def __init__(self, make, model, year, vin): Initialize a new Vehicle instance. Parameters: make (str): The make of the vehicle. model (str): The model of the vehicle. year (int): The year the vehicle was made. vin (str): The Vehicle Identification Number (VIN) of the vehicle. if not isinstance(make, str) or not make: raise ValueError(\\"Make must be a non-empty string\\") if not isinstance(model, str) or not model: raise ValueError(\\"Model must be a non-empty string\\") if not isinstance(year, int) or year <= 0 or year > datetime.datetime.now().year: raise ValueError(\\"Year must be a positive integer and within the realistic range\\") if not isinstance(vin, str) or len(vin) != 17: raise ValueError(\\"VIN must be a string of 17 characters\\") self.make = make self.model = model self.year = year self.vin = vin self.engine_running = False def start_engine(self): Starts the vehicle\'s engine. self.engine_running = True return \\"Engine started\\" def stop_engine(self): Stops the vehicle\'s engine. self.engine_running = False return \\"Engine stopped\\" def is_antique(self): Determines if the vehicle is an antique (older than 25 years). Returns: bool: True if the vehicle is an antique, False otherwise. current_year = datetime.datetime.now().year return current_year - self.year > 25 def __eq__(self, other): Compare two vehicles based on their VINs. Parameters: other (Vehicle): The other Vehicle instance to compare against. Returns: bool: True if both vehicles have the same VIN, False otherwise. if not isinstance(other, Vehicle): return False return self.vin == other.vin"},{"question":"Write a Python function that takes a list of integers and returns the product of all the elements. If the list is empty, the function should return 1. def product_of_list(lst): # Your code here Example: assert product_of_list([1, 2, 3, 4]) == 24 assert product_of_list([5, 0, 2]) == 0 assert product_of_list([]) == 1","solution":"def product_of_list(lst): Returns the product of all elements in the list. If the list is empty, returns 1. product = 1 for num in lst: product *= num return product"},{"question":"Write a Python function that takes a list of dictionaries as input, where each dictionary represents an employee\'s data with keys \\"name\\" (string) and \\"age\\" (integer). The function should return a new list of dictionaries, sorting the employees by their age in ascending order. In case of a tie in age, sort those employees alphabetically by their name. Ensure your solution handles edge cases such as an empty list or dictionaries with missing keys gracefully.","solution":"from typing import List, Dict def sort_employees(employees: List[Dict[str, any]]) -> List[Dict[str, any]]: Sort a list of dictionaries representing employees by age and then by name. :param employees: List of dictionaries with \'name\' and \'age\' keys :return: Sorted list of dictionaries # Filter out dictionaries that don\'t have both \'name\' and \'age\' keys filtered_employees = [employee for employee in employees if \'name\' in employee and \'age\' in employee] # Sort first by age, then by name in case of ties sorted_employees = sorted(filtered_employees, key=lambda x: (x[\'age\'], x[\'name\'])) return sorted_employees"},{"question":"Given an integer array `nums`, return the length of the longest increasing subsequence. An increasing subsequence is a subsequence in which the elements are arranged in ascending order. A subsequence is derived from an array by deleting some or no elements without changing the order of the remaining elements. Example 1: Input: nums = [10,9,2,5,3,7,101,18] Output: 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Example 2: Input: nums = [0,1,0,3,2,3] Output: 4 Explanation: The longest increasing subsequence is [0, 1, 2, 3], therefore the length is 4. Example 3: Input: nums = [7,7,7,7,7,7,7] Output: 1 Explanation: The longest increasing subsequence is [7], therefore the length is 1. Constraints: * `1 <= nums.length <= 2500` * `-10^4 <= nums[i] <= 10^4`","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the array nums. if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a function `find_largest_palindrome` that takes a list of strings as input and returns the longest palindrome in the list. If there are multiple palindromes of the same maximum length, return the first one encountered in the list. If no palindromes are found, return an empty string. # Example ```python input_list = [\\"racecar\\", \\"level\\", \\"world\\", \\"civic\\", \\"deified\\"] print(find_largest_palindrome(input_list)) # Output: \\"racecar\\" ``` # Constraints - The input list can have a maximum length of 1000 strings. - Each string in the list will have a maximum length of 100 characters. - Strings will only contain lower case English letters.","solution":"def find_largest_palindrome(input_list): Finds the longest palindrome in a list of strings. If multiple palindromes of the same length are found, the first one encountered in the list is returned. If no palindromes are found, returns an empty string. def is_palindrome(s): return s == s[::-1] max_length = 0 largest_palindrome = \\"\\" for s in input_list: if is_palindrome(s) and len(s) > max_length: max_length = len(s) largest_palindrome = s return largest_palindrome"},{"question":"Write a function that takes a string as an input and returns a new string with all the vowels removed. For example, the input \\"beautiful day\\" should return \\"btfl dy\\". Make sure to handle both uppercase and lowercase vowels. ```python def remove_vowels(input_string): # Your code here pass # Example usage print(remove_vowels(\\"beautiful day\\")) # Output should be \\"btfl dy\\" print(remove_vowels(\\"Eloquent Python\\")) # Output should be \\"lqnt Pythn\\" ```","solution":"def remove_vowels(input_string): Removes all vowels (both uppercase and lowercase) from the input string. Parameters: input_string (str): The string from which to remove vowels. Returns: str: The input string with all vowels removed. vowels = \\"aeiouAEIOU\\" return \'\'.join([char for char in input_string if char not in vowels]) # Example usage print(remove_vowels(\\"beautiful day\\")) # Output should be \\"btfl dy\\" print(remove_vowels(\\"Eloquent Python\\")) # Output should be \\"lqnt Pythn\\""},{"question":"Binary Tree Right Side View Description: Given the root of a binary tree, imagine yourself standing on the right side of it and return the values of the nodes you can see ordered from top to bottom. Example 1: Input: `[1,2,3,null,5,null,4]` Output: `[1,3,4]` Example 2: Input: `[1,null,3]` Output: `[1,3]` Example 3: Input: `[]` Output: `[]` Constraints: - The number of nodes in the tree is in the range `[0, 100]`. - `-100 <= Node.val <= 100` - You are given the `root` of the binary tree. A `TreeNode` class is used to represent a node in the binary tree, which contains an integer value and left, right children. Additionally, the provided code tries to create a list of the values but it’s incomplete. Identify and correct its logic to meet the requirements of the question. ```python def rightSideView(root): view = [] def dfs(node, level): if not node: return if level == len(view): view.append(node.val) dfs(node.right, level + 1) dfs(node.left, level + 1) dfs(root, 0) return view ```","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def rightSideView(root): view = [] def dfs(node, level): if not node: return if level == len(view): view.append(node.val) dfs(node.right, level + 1) dfs(node.left, level + 1) dfs(root, 0) return view"},{"question":"Write a Python function that takes a string as input and returns a list of all unique words in that string, sorted by their frequency in descending order. If two words have the same frequency, they should appear in ascending alphabetical order. The function should be case insensitive and should ignore punctuation. For example, given the input string: \\"The rain in Spain falls mainly on the plain. In the plain, rain is mainly steady.\\" The output should be: ```python [\\"the\\", \\"in\\", \\"mainly\\", \\"plain\\", \\"rain\\", \\"falls\\", \\"is\\", \\"on\\", \\"spain\\", \\"steady\\"] ``` Below is an incomplete Python code starter for your reference: ```python def word_frequency(input_string): words = input_string.split() word_count = {} for word in words: word = word.lower().strip(\'.,!?\\"\'\') if word in word_count: word_count[word] += 1 else: word_count[word] = 1 sorted_words = sorted(word_count.items(), key=lambda x: (-x[1], x[0])) return [word[0] for word in sorted_words] ``` Complete and test the function with the provided example to ensure correctness.","solution":"import re from collections import Counter def word_frequency(input_string): # Convert the string to lowercase and remove punctuation input_string = re.sub(r\'[^ws]\', \'\', input_string.lower()) # Split the string into words words = input_string.split() # Count the frequency of each word word_count = Counter(words) # Sort words by frequency (descending order), then by alphabetical order sorted_words = sorted(word_count.items(), key=lambda x: (-x[1], x[0])) return [word[0] for word in sorted_words]"},{"question":"Create a function that takes a list of integers and returns the longest contiguous subarray with the maximum sum. Make sure to handle lists with both positive and negative integers efficiently. If there are multiple subarrays with the same maximum sum, return the one that appears first in the list. from typing import List def max_sum_subarray(nums: List[int]) -> List[int]: The input to this function is a list of integers, which may contain both positive and negative values. Task is to find the longest contiguous subarray with the maximum sum and return it. If multiple subarrays have the same maximum sum, return the one that appears first. >>> max_sum_subarray([1, -3, 2, 1, -1]) [2, 1] >>> max_sum_subarray([-2, -3, 4, -1, -2, 1, 5, -3]) [4, -1, -2, 1, 5] >>> max_sum_subarray([-1, -2, -3, -4]) [-1] # please write the solution here","solution":"from typing import List def max_sum_subarray(nums: List[int]) -> List[int]: The input to this function is a list of integers, which may contain both positive and negative values. Task is to find the longest contiguous subarray with the maximum sum and return it. If multiple subarrays have the same maximum sum, return the one that appears first. >>> max_sum_subarray([1, -3, 2, 1, -1]) [2, 1] >>> max_sum_subarray([-2, -3, 4, -1, -2, 1, 5, -3]) [4, -1, -2, 1, 5] >>> max_sum_subarray([-1, -2, -3, -4]) [-1] if not nums: return [] max_sum = current_sum = nums[0] start = end = temp_start = 0 for i in range(1, len(nums)): if current_sum + nums[i] < nums[i]: current_sum = nums[i] temp_start = i else: current_sum += nums[i] if current_sum > max_sum or (current_sum == max_sum and (i - temp_start) > (end - start)): max_sum = current_sum start = temp_start end = i return nums[start:end+1]"},{"question":"Write a function that takes an integer array as input and returns the length of the longest subarray where the difference between the maximum and minimum elements is at most 1. Implement the solution in Python. Your function should be efficient with a time complexity of O(n).","solution":"def longest_subarray(nums): Returns the length of the longest subarray where the difference between the maximum and minimum element is at most 1. if not nums: return 0 # Initiate pointers and a dictionary to keep track of the frequency of numbers left = 0 max_len = 0 count = {} for right in range(len(nums)): count[nums[right]] = count.get(nums[right], 0) + 1 # If the window\'s max difference exceeds 1, shrink the window from the left while max(count.keys()) - min(count.keys()) > 1: count[nums[left]] -= 1 if count[nums[left]] == 0: del count[nums[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Write a Python program that iterates through all numbers from 1 to 50, and prints the numbers that are both divisible by 3 and are prime numbers. Use a while loop for iteration and ensure that the program only prints numbers meeting both criteria. Avoid using any built-in Python functions like `filter`, `map`, or any modules such as `itertools` for this task.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def divisible_by_3_and_prime(): Iterates through numbers from 1 to 50 and prints numbers that are both divisible by 3 and primes. n = 1 result = [] while n <= 50: if n % 3 == 0 and is_prime(n): print(n) result.append(n) n += 1 return result"},{"question":"A company wants to implement a system that categorizes customer feedback into positive and negative remarks. You have been provided with a simple list of keywords that are typically associated with positive and negative comments. Based on these, write a function that will analyze feedback and determine if it is positive, negative, or neutral. **Keywords** - Positive: [\\"good\\", \\"happy\\", \\"enjoy\\", \\"excellent\\", \\"great\\"] - Negative: [\\"bad\\", \\"sad\\", \\"horrible\\", \\"terrible\\", \\"poor\\"] **Function Specification** - The function should be named `categorize_feedback`. - Input: A string representing customer feedback. - Output: A string - \\"Positive\\" if the feedback has more positive keywords, \\"Negative\\" if it has more negative keywords, and \\"Neutral\\" if it has an equal number of positive and negative keywords or none of the keywords. **Example** ```python def categorize_feedback(feedback): positive_keywords = [\\"good\\", \\"happy\\", \\"enjoy\\", \\"excellent\\", \\"great\\"] negative_keywords = [\\"bad\\", \\"sad\\", \\"horrible\\", \\"terrible\\", \\"poor\\"] feedback = feedback.lower() positive_count = sum(feedback.count(word) for word in positive_keywords) negative_count = sum(feedback.count(word) for word in negative_keywords) if positive_count > negative_count: return \\"Positive\\" elif negative_count > positive_count: return \\"Negative\\" else: return \\"Neutral\\" # Sample usage print(categorize_feedback(\\"I had a great day, everything was excellent!\\")) # Output: Positive print(categorize_feedback(\\"The experience was horrible, very bad.\\")) # Output: Negative print(categorize_feedback(\\"The service was good but the food was bad.\\")) # Output: Neutral ``` **Constraints** 1. The feedback string can be of any length. 2. The comparison is case-insensitive. 3. The keywords must be considered as whole words and not substrings within other words. 4. The function should handle punctuation and special characters appropriately.","solution":"def categorize_feedback(feedback): import re positive_keywords = [\\"good\\", \\"happy\\", \\"enjoy\\", \\"excellent\\", \\"great\\"] negative_keywords = [\\"bad\\", \\"sad\\", \\"horrible\\", \\"terrible\\", \\"poor\\"] feedback = feedback.lower() words = re.findall(r\'bw+b\', feedback) positive_count = sum(words.count(word) for word in positive_keywords) negative_count = sum(words.count(word) for word in negative_keywords) if positive_count > negative_count: return \\"Positive\\" elif negative_count > positive_count: return \\"Negative\\" else: return \\"Neutral\\""},{"question":"You are given an array of integers representing the daily temperatures in a week. Implement a function `count_increasing_temperatures` that returns the number of days where the temperature was higher than the previous day\'s temperature. For example, given the array `[71, 73, 75, 74, 72, 76, 77]`, the function should return `4`, since there are four days where the temperature increased from the previous day (i.e., 73, 75, 76, and 77). Demonstrate the function with at least two different sets of input data.","solution":"def count_increasing_temperatures(temperatures): Returns the number of days where the temperature was higher than the previous day\'s temperature. :param temperatures: List of integers representing daily temperatures. :return: Integer count of days with increasing temperatures compared to the previous day. count = 0 for i in range(1, len(temperatures)): if temperatures[i] > temperatures[i-1]: count += 1 return count # Demonstration: print(count_increasing_temperatures([71, 73, 75, 74, 72, 76, 77])) # Output: 4 print(count_increasing_temperatures([70, 71, 70, 71, 70, 71, 70])) # Output: 3"},{"question":"Create a Python script to simulate a basic online food delivery system. The system should have three main components: customer orders, restaurant menu, and order processing. The menu should list at least five different items with their prices. Your script should allow a customer to place an order for one or more items, calculate the total cost, and provide a receipt. Ensure that the system can handle invalid input gracefully, such as ordering an item that doesn\'t exist or entering a negative quantity. Use appropriate data structures and functions to modularize your code.","solution":"class FoodDeliverySystem: def __init__(self): self.menu = { \\"Pizza\\": 10.00, \\"Burger\\": 6.50, \\"Pasta\\": 8.00, \\"Salad\\": 5.00, \\"Soup\\": 4.50 } self.orders = [] def place_order(self, item, quantity): if item not in self.menu: return f\\"Error: {item} is not available in the menu.\\" if quantity <= 0: return \\"Error: Quantity must be greater than 0.\\" self.orders.append((item, quantity)) return f\\"Added {quantity} x {item} to your order.\\" def calculate_total(self): return sum(quantity * self.menu[item] for item, quantity in self.orders) def get_receipt(self): if not self.orders: return \\"No items ordered.\\" receipt = \\"Receipt:n\\" for item, quantity in self.orders: receipt += f\\"{quantity} x {item} = {quantity * self.menu[item]:.2f}n\\" receipt += f\\"Total: {self.calculate_total():.2f}\\" return receipt"},{"question":"Write a function named `inverse_dictionary` that takes a dictionary as input and returns a new dictionary with the keys and values swapped. Each value in the input dictionary will be unique. If the input dictionary is `{\'a\': 1, \'b\': 2, \'c\': 3}`, the output should be `{1: \'a\', 2: \'b\', 3: \'c\'}`. **Function Signature:** ```python def inverse_dictionary(input_dict: dict) -> dict: pass ``` **Example:** ```python # Input input_dict = {\'one\': 1, \'two\': 2, \'three\': 3} # Output # {1: \'one\', 2: \'two\', 3: \'three\'} print(inverse_dictionary(input_dict)) ```","solution":"def inverse_dictionary(input_dict: dict) -> dict: Returns a new dictionary with keys and values swapped from the input dictionary. Args: input_dict (dict): Dictionary to be inverted. The values are unique. Returns: dict: A dictionary with keys and values swapped. return {value: key for key, value in input_dict.items()}"},{"question":"Create a Python function called `flatten_and_sort` that takes a list of lists of integers as input and returns a single sorted list of integers. Each nested list can vary in size and may contain positive or negative integers including duplicates. Ensure your function handles edge cases like empty lists or lists containing only negative numbers efficiently. Furthermore, optimize for both time and space complexity where feasible.","solution":"def flatten_and_sort(array_of_arrays): Returns a sorted list of integers flattened from the given list of lists. if not array_of_arrays: # handle if the input is an empty list return [] # Initialize an empty list to flatten the arrays flattened_list = [] # Flattening the list of lists for sublist in array_of_arrays: flattened_list.extend(sublist) # Sorting the flattened list return sorted(flattened_list)"},{"question":"Develop a program in Python to detect and count the number of prime numbers within a given range [a, b]. The program should take two integers, a and b, as input and return the count of prime numbers between them, inclusive. Make sure to implement an efficient algorithm to handle large ranges and optimize for performance.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def count_primes_in_range(a, b): Counts the number of prime numbers between a and b, inclusive. count = 0 for num in range(a, b + 1): if is_prime(num): count += 1 return count"},{"question":"Develop a function that takes two strings as input and returns a boolean indicating whether one string is an anagram of the other. An anagram is a word formed by rearranging the letters of another, such as \\"listen\\" being an anagram of \\"silent\\". ```python def is_anagram(str1, str2): # Implement the function to check if both strings are anagrams return sorted(str1) == sorted(str2) # Example usage: str1 = \\"listen\\" str2 = \\"silent\\" print(is_anagram(str1, str2)) # Should return True str1 = \\"hello\\" str2 = \\"world\\" print(is_anagram(str1, str2)) # Should return False ```","solution":"def is_anagram(str1, str2): Determines if two strings are anagrams of each other. Parameters: str1 (str): The first string to compare. str2 (str): The second string to compare. Returns: bool: True if str1 and str2 are anagrams, False otherwise. # Remove whitespace and convert to lower case to handle case-insensitivity str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() return sorted(str1) == sorted(str2) # Example usage: str1 = \\"listen\\" str2 = \\"silent\\" print(is_anagram(str1, str2)) # Should return True str1 = \\"hello\\" str2 = \\"world\\" print(is_anagram(str1, str2)) # Should return False"},{"question":"撰寫一個函數，該函數接收一個整數列表，並回傳其中所有的偶數元素。 範例： 輸入: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 輸出: [2, 4, 6, 8, 10]","solution":"def extract_even_numbers(numbers): Returns a list of even numbers from the given list of integers. :param numbers: List of integers :return: List of even integers return [number for number in numbers if number % 2 == 0]"},{"question":"Develop a Python function named `compress_string` that takes a single argument, \'text\', which is a string containing only alphabetic characters. The function should compress the string using the following run-length encoding (RLE) technique: For each character and its consecutive repeats, represent the character and the count of its occurrences consecutively. If a character appears only once, it should not be followed by a number. The function should return the compressed string. Note: Ensure that the function correctly handles both uppercase and lowercase characters. Example: text = \\"aaAAaaBBBccCCCaaa\\" Output: \\"a2A2a2B3c2C3a3\\"","solution":"def compress_string(text): Compresses the string using run-length encoding (RLE). If a character appears only once, it should not be followed by a number. :param text: A string containing only alphabetic characters. :return: The compressed string. if not text: return \\"\\" compressed = [] count = 1 prev_char = text[0] for char in text[1:]: if char == prev_char: count += 1 else: compressed.append(prev_char) if count > 1: compressed.append(str(count)) prev_char = char count = 1 # Append the last character and its count compressed.append(prev_char) if count > 1: compressed.append(str(count)) return \'\'.join(compressed)"},{"question":"Given a list of integers, devise a function that finds and returns the largest sum of any contiguous subarray using Kadane\'s algorithm.","solution":"def max_subarray_sum(arr): Finds the largest sum of any contiguous subarray using Kadane’s algorithm. Parameters: arr (list): A list of integers. Returns: int: The largest sum of any contiguous subarray. if not arr: return 0 max_so_far = arr[0] max_ending_here = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a function in Python that takes in a list of strings and returns a new list containing only those strings that are palindromes. A palindrome is a string that reads the same backward as forward. Your solution should consider case sensitivity (i.e., \\"Level\\" is different from \\"level\\"). Optimize your function to handle lists with a large number of strings efficiently. Use appropriate data structures and algorithms to ensure optimal performance.","solution":"def filter_palindromes(strings): This function takes a list of strings and returns a new list containing only those strings that are palindromes. The comparison is case-sensitive. return [s for s in strings if s == s[::-1]]"},{"question":"Write a function that takes a string as input and returns the longest word in the string. If there are multiple words with the maximum length, return the first one that appears in the string. Assume the input string contains only letters and spaces, and words are separated by a single space. Example: ```python def longest_word(s: str) -> str: # Your code here # Input s = \\"Write a function to find the longest word\\" # Output \\"function\\" ```","solution":"def longest_word(s: str) -> str: Returns the longest word in the input string. In case of multiple words with the same maximum length, returns the first one that appears. words = s.split() longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"Write a Python function that takes a list of integers as input and returns a new list containing only the prime numbers from the input list. Additionally, the function should sort these prime numbers in descending order. Provide a piece of erroneous code as a reference and ask for its correction along with an explanation of the error. Ensure the function handles edge cases such as empty lists and non-integer inputs gracefully, informing the user appropriately about such issues.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def filter_and_sort_primes(input_list): Filters the prime numbers from the input list and returns them sorted in descending order. Parameters: input_list (list): A list of integers Returns: list: A list of prime numbers sorted in descending order if not all(isinstance(i, int) for i in input_list): return \\"Error: Input list contains non-integer values.\\" prime_list = [num for num in input_list if is_prime(num)] return sorted(prime_list, reverse=True)"},{"question":"Write a Python function that takes a list of integers as input and returns a new list containing only the prime numbers from the original list. Use an efficient algorithm to check for prime numbers. Avoid using built-in functions that directly identify prime numbers. Additionally, write a test case to verify the correctness of your function.","solution":"def is_prime(n): Checks if n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a new list containing only the prime numbers from the original list. return [num for num in numbers if is_prime(num)]"},{"question":"Refactor the following segment of Python code to ensure it functions correctly and achieves the intended task. Additionally, alter the function to allow for passing a custom delimiter, and return the concatenated string in reverse order of concatenation. def concatenateStrings(strings): result = \\"\\" for string in strings result = string + result return result","solution":"def concatenateStrings(strings, delimiter=\\"\\"): Concatenates a list of strings in reverse order with a custom delimiter. :param strings: List of strings to be concatenated. :param delimiter: Custom delimiter to be used between strings. :return: Concatenated string in reverse order. if not strings: return \\"\\" strings_reversed = strings[::-1] result = delimiter.join(strings_reversed) return result"},{"question":"Write a function `merge_alternately` that takes two strings `a` and `b` as input and returns a new string that alternates characters from each string. The resulting string should start with the first character from `a`, followed by the first character from `b`, then the second character from `a`, and so on. If one string is longer than the other, append the remaining characters of the longer string to the end of the result. Example: ```python def merge_alternately(a: str, b: str) -> str: Merges two strings alternately, starting with the first character of the first string. Parameters: a (str): The first input string. b (str): The second input string. Returns: str: The alternately merged string. # Your code goes here. # Example usage: print(merge_alternately(\\"abc\\", \\"123\\")) # Output: \\"a1b2c3\\" print(merge_alternately(\\"abcd\\", \\"123\\")) # Output: \\"a1b2c3d\\" print(merge_alternately(\\"ab\\", \\"12345\\")) # Output: \\"a1b2345\\" ```","solution":"def merge_alternately(a: str, b: str) -> str: Merges two strings alternately, starting with the first character of the first string. Parameters: a (str): The first input string. b (str): The second input string. Returns: str: The alternately merged string. merged_string = [] len_a, len_b = len(a), len(b) min_len = min(len_a, len_b) for i in range(min_len): merged_string.append(a[i]) merged_string.append(b[i]) if len_a > len_b: merged_string.append(a[min_len:]) elif len_b > len_a: merged_string.append(b[min_len:]) return \'\'.join(merged_string)"},{"question":"Create a function \\"find_median\\" that takes a list of integers as input and returns the median value of the list. If the list is empty, return a meaningful error message. Do not use any in-built functions to find the median. Handle possible exceptions such as incorrect data types and empty list. ```python def find_median(lst): try: if not isinstance(lst, list): return \\"Error: Input must be a list\\" if len(lst) == 0: return \\"Error: The list is empty\\" for item in lst: if not isinstance(item, int): return \\"Error: All elements of the list must be integers\\" # Sort the list manually for i in range(len(lst)): for j in range(i + 1, len(lst)): if lst[i] > lst[j]: lst[i], lst[j] = lst[j], lst[i] mid = len(lst) // 2 if len(lst) % 2 == 0: median = (lst[mid - 1] + lst[mid]) / 2 else: median = lst[mid] return median except Exception as e: return f\\"An unexpected error occurred: {e}\\" ```","solution":"def find_median(lst): Returns the median of a list of integers. try: if not isinstance(lst, list): return \\"Error: Input must be a list\\" if len(lst) == 0: return \\"Error: The list is empty\\" for item in lst: if not isinstance(item, int): return \\"Error: All elements of the list must be integers\\" # Sort the list manually for i in range(len(lst)): for j in range(i + 1, len(lst)): if lst[i] > lst[j]: lst[i], lst[j] = lst[j], lst[i] mid = len(lst) // 2 if len(lst) % 2 == 0: median = (lst[mid - 1] + lst[mid]) / 2 else: median = lst[mid] return median except Exception as e: return f\\"An unexpected error occurred: {e}\\""},{"question":"Given a list of integers, write a function `find_unique_numbers(nums)` that returns a list containing only the elements that appear exactly once in the input list. The order of the returned elements should be the same as their order of appearance in the input list. # Input - A list of integers `nums` with length `n` (1 ≤ n ≤ 10^4). # Output - A list of integers containing only the unique elements from `nums`. # Example ```python # Example 1 input: [4, 5, 7, 4, 8, 5] output: [7, 8] # Example 2 input: [10, 20, 30, 20, 40, 50] output: [10, 30, 40, 50] # Example 3 input: [1, 2, 2, 3, 4, 4, 5] output: [1, 3, 5] ``` # Constraints - The input list may contain any integer by definition. - You may assume that the input list is always non-empty.","solution":"def find_unique_numbers(nums): Returns a list containing only the elements that appear exactly once in the input list. count = {} for num in nums: if num in count: count[num] += 1 else: count[num] = 1 unique_nums = [num for num in nums if count[num] == 1] return unique_nums"},{"question":"You are tasked with developing a function called `parse_log_file` that processes server log data. The log file consists of lines, each representing an event with a timestamp, a log level (INFO, WARNING, ERROR), and a message. Example log file content: ``` 2023-10-01T12:00:00 INFO Server started 2023-10-01T12:05:23 WARNING High memory usage 2023-10-01T12:10:45 ERROR Disk full 2023-10-01T13:00:00 INFO Server stopped ``` Your function should: 1. Parse the log file content. 2. Calculate the total number of log entries for each log level. 3. Return a dictionary with the log levels as keys and the corresponding counts as values. Constraints: - The log file content is provided as a list of strings, with each string representing a line in the log file. - Assume that each line of the log file is correctly formatted. Example: ```python def parse_log_file(log_file: list) -> dict: pass # Sample input log_file_content = [ \\"2023-10-01T12:00:00 INFO Server started\\", \\"2023-10-01T12:05:23 WARNING High memory usage\\", \\"2023-10-01T12:10:45 ERROR Disk full\\", \\"2023-10-01T13:00:00 INFO Server stopped\\" ] # Expected output # { # \\"INFO\\": 2, # \\"WARNING\\": 1, # \\"ERROR\\": 1 # } # Test the function with the sample input parse_log_file(log_file_content) ``` Develop the `parse_log_file` function to fulfill the requirements above.","solution":"def parse_log_file(log_file): Parses the log file content and calculates the total number of log entries for each log level. Parameters: log_file (list): List of strings, each representing a line in the log file. Returns: dict: Dictionary with log levels as keys and their corresponding counts as values. log_counts = { \\"INFO\\": 0, \\"WARNING\\": 0, \\"ERROR\\": 0 } for line in log_file: parts = line.split() log_level = parts[1] if log_level in log_counts: log_counts[log_level] += 1 return log_counts # Sample input log_file_content = [ \\"2023-10-01T12:00:00 INFO Server started\\", \\"2023-10-01T12:05:23 WARNING High memory usage\\", \\"2023-10-01T12:10:45 ERROR Disk full\\", \\"2023-10-01T13:00:00 INFO Server stopped\\" ] # Run the function with sample input print(parse_log_file(log_file_content))"},{"question":"Write a function that takes two arguments: a string and a character. The function should return the longest substring that starts and ends with the given character. If the character does not appear in the string, return an empty string. If there are multiple substrings of the same maximum length, return the first one. Ensure the function handles edge cases gracefully.","solution":"def longest_substring(s, char): Returns the longest substring that starts and ends with the given character. If the character does not appear in the string, returns an empty string. if char not in s: return \\"\\" start_index = s.find(char) end_index = s.rfind(char) if start_index == end_index: return s[start_index] return s[start_index:end_index + 1]"},{"question":"Write a Python function that takes a list of strings and returns a new list containing only the strings that have more than 3 characters. If there are no such strings, return an empty list. For example, given the input `[\\"cat\\", \\"dog\\", \\"elephant\\", \\"rat\\"]`, the output should be `[\\"elephant\\"]`.","solution":"def filter_strings_by_length(strings): Returns a new list containing only the strings that have more than 3 characters. return [s for s in strings if len(s) > 3]"},{"question":"Create a function that takes a string as input and returns a dictionary where the keys are the unique characters in the string and the values are the number of times each character appears. \\"examplestring\\"","solution":"def count_characters(s): Takes a string as input and returns a dictionary where the keys are the unique characters and the values are the number of times each character appears. character_count = {} for char in s: if char in character_count: character_count[char] += 1 else: character_count[char] = 1 return character_count"},{"question":"Design a function that takes two strings representing binary numbers and returns their sum as a string. Ensure that the function handles binary numbers of different lengths and performs the addition without converting the binary numbers directly into integers. Implement the addition using basic binary arithmetic principles. Example: Input: str1 = \\"1010\\", str2 = \\"1101\\" Output: \\"10111\\"","solution":"def add_binary(str1, str2): Returns the sum of two binary numbers as a string. max_len = max(len(str1), len(str2)) # Padding the shorter string with zeros str1 = str1.zfill(max_len) str2 = str2.zfill(max_len) result = [] carry = 0 # Traverse both strings from the last character for i in range(max_len - 1, -1, -1): bit_sum = carry bit_sum += 1 if str1[i] == \'1\' else 0 bit_sum += 1 if str2[i] == \'1\' else 0 # bit_sum can be 0, 1, 2, or 3 result.append(\'1\' if bit_sum % 2 == 1 else \'0\') carry = 0 if bit_sum < 2 else 1 # If there\'s a carry left, append it if carry != 0: result.append(\'1\') # The final result should be reversed result.reverse() return \'\'.join(result)"},{"question":"Write a Python function named \'merge_dictionaries\' that takes in two dictionaries as input and merges them into a single dictionary. If a key exists in both dictionaries, the function should add their values. If the input is not a dictionary, the function should raise a TypeError. The function should return the resulting merged dictionary.","solution":"def merge_dictionaries(dict1, dict2): Merges two dictionaries. If a key exists in both dictionaries, their values are added. If input is not a dictionary, a TypeError is raised. Parameters: - dict1: The first dictionary. - dict2: The second dictionary. Returns: A dictionary that is a result of merging dict1 and dict2. if not isinstance(dict1, dict) or not isinstance(dict2, dict): raise TypeError(\\"Both inputs must be dictionaries\\") merged_dict = dict1.copy() for key, value in dict2.items(): if key in merged_dict and isinstance(value, (int, float)) and isinstance(merged_dict[key], (int, float)): merged_dict[key] += value else: merged_dict[key] = value return merged_dict"},{"question":"Develop a Python program that determines if a given string is a palindrome. A palindrome is a sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For instance, the strings \\"A man, a plan, a canal, Panama!\\" and \\"Was it a car or a cat I saw?\\" are palindromes. Your program should include a function that removes any non-alphanumeric characters and converts the input string to lowercase. Another function should then check whether the processed string is a palindrome. Additionally, include a function that lists all palindromic substrings within a given string. For example, given the input \\"racecar\\", the function should identify and return [\\"racecar\\", \\"aceca\\", \\"cec\\"]. To increase the challenge, analyze the following Python code meant to find palindromic substrings and identify any inefficiencies. Improve this code as part of your solution. ```python def is_palindrome_substrings(s): palindromes = [] for i in range(len(s)): for j in range(i, len(s)): substring = s[i:j+1] if substring == substring[::-1]: palindromes.append(substring) return palindromes ```","solution":"import re def clean_string(s): Removes non-alphanumeric characters and converts the string to lowercase. cleaned = re.sub(r\'[^a-zA-Z0-9]\', \'\', s) return cleaned.lower() def is_palindrome(s): Returns True if the processed string is a palindrome, False otherwise. cleaned = clean_string(s) return cleaned == cleaned[::-1] def is_palindrome_substrings(s): Returns a list of all palindromic substrings within the given string. def expand_around_center(s, left, right): palindromes = [] while left >= 0 and right < len(s) and s[left] == s[right]: palindromes.append(s[left:right+1]) left -= 1 right += 1 return palindromes result = [] for i in range(len(s)): result.extend(expand_around_center(s, i, i)) # Odd length palindromes result.extend(expand_around_center(s, i, i+1)) # Even length palindromes return list(set(result)) # Removing duplicates"},{"question":"Write a function in Python that takes a list of integers and returns a new list with each element squared. Make sure to handle the case where the input list is empty by returning an empty list. Example: ```python square_list([1, 2, 3, 4]) # Output: [1, 4, 9, 16] square_list([]) # Output: [] ```","solution":"def square_list(numbers): Takes a list of integers and returns a new list with each element squared. If the input list is empty, returns an empty list. return [x**2 for x in numbers]"},{"question":"Write a Python function `reverse_words` that takes a string `s` as input and returns the string with the words in reverse order. Ensure that the function can handle multiple spaces between words and does not include leading or trailing spaces in the result. For example: ```python def reverse_words(s: str) -> str: # Your code here # Sample input and output input_string = \\" hello world \\" output_string = reverse_words(input_string) print(output_string) # Output: \\"world hello\\" ``` Note: - You are not allowed to use the built-in `split` function for this task. - You may assume the input string only contains alphabets and spaces.","solution":"def reverse_words(s: str) -> str: Reverses the order of words in the input string s. Handles multiple spaces between words and removes leading and trailing spaces. def split_string(s): words = [] word = \\"\\" length = len(s) i = 0 while i < length: if s[i] != \' \': word += s[i] elif word: words.append(word) word = \\"\\" i += 1 if word: words.append(word) return words words = split_string(s) reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"You are working with a structured DataFrame that contains a hierarchical index (MultiIndex) with levels representing regions and categories. The DataFrame looks like this: ``` value region category Region1 A 10 B 20 Region2 A 30 B 40 Region3 A 50 B 60 ``` Write a function that accepts this DataFrame and a list of regions (e.g., [\\"Region1\\", \\"Region3\\"]) and returns a new DataFrame with the same structure but only containing the data for the specified regions. If the regions list is empty, return the original DataFrame. # Example Input ```python data = { (\'Region1\', \'A\'): 10, (\'Region1\', \'B\'): 20, (\'Region2\', \'A\'): 30, (\'Region2\', \'B\'): 40, (\'Region3\', \'A\'): 50, (\'Region3\', \'B\'): 60, } index = pd.MultiIndex.from_tuples(data.keys(), names=[\'region\', \'category\']) df = pd.DataFrame(list(data.values()), index=index, columns=[\'value\']) regions = [\'Region1\', \'Region3\'] ``` Output ```python value region category Region1 A 10 B 20 Region3 A 50 B 60 ```","solution":"import pandas as pd def filter_regions(df, regions): Filter the given DataFrame to only include the specified regions. Parameters: df (pd.DataFrame): The input DataFrame with MultiIndex indices. regions (list): The list of regions to filter by. Returns: pd.DataFrame: Filtered DataFrame only containing the specified regions. if not regions: return df return df.loc[regions]"},{"question":"Create a function to simulate a simplified inventory management system for a small business. The function should take a list of transactions as input, where each transaction is a tuple containing an item name, quantity, and transaction type (\\"purchase\\" or \\"sale\\"). The function should output the remaining inventory for each item after processing all transactions. Consider edge cases like selling more items than available or handling transactions for items that are not initially in the inventory.","solution":"def manage_inventory(transactions): Takes a list of transactions and outputs the remaining inventory for each item. transactions: list of tuples (item_name, quantity, transaction_type) transaction_type: \\"purchase\\" or \\"sale\\" inventory = {} for item_name, quantity, transaction_type in transactions: if item_name not in inventory: inventory[item_name] = 0 if transaction_type == \\"purchase\\": inventory[item_name] += quantity elif transaction_type == \\"sale\\": if inventory[item_name] < quantity: raise ValueError(f\\"Cannot sell more {item_name} than available in inventory\\") inventory[item_name] -= quantity else: raise ValueError(\\"Invalid transaction type. Expected \'purchase\' or \'sale\'\\") return inventory"},{"question":"Below is a sample question designed to match the style, complexity, and scope of the provided sample questions. The following Python code simulates a simple text box that limits user input to a certain length and converts all input to uppercase. There are several syntax and logical errors in the code. Can you identify and correct them? ```python cla55 TextB0x: def __innit__(self, m4x_length): s€lf.m4x_len = max_length self.text = \\"\\" def adD_t3xt(self, inpUt): if le9(inpUt) + 1en(self.txt) <= |elf.max_l€n: se|f.tx1 += inPut.upper() else: pr1nt(\'Err0r: Input exceeds m4ximum length\') d3f clear(self): s€lf_txt = \\"\\" d3f g€t_t3xt(self): print(self.text) def main(): tb = TestBox(10) tb.add_txet(\\"hello\\") tb.get_txte() tb.add_tex(\\"world!\\") tb.g€t_txet() tb.a|d_text(\\"python\\") tb.g€x_t@xt() tb.lear() tb.g&t_text() main() ``` Correct the syntax and logic errors in the above code to ensure it performs the intended tasks correctly.","solution":"class TextBox: def __init__(self, max_length): self.max_length = max_length self.text = \\"\\" def add_text(self, input_text): if len(input_text) + len(self.text) <= self.max_length: self.text += input_text.upper() else: print(\'Error: Input exceeds maximum length\') def clear(self): self.text = \\"\\" def get_text(self): print(self.text) def main(): tb = TextBox(10) tb.add_text(\\"hello\\") tb.get_text() tb.add_text(\\"world!\\") tb.get_text() tb.add_text(\\"python\\") tb.get_text() tb.clear() tb.get_text() main()"},{"question":"Write a Python function `rotate_matrix` that takes a square matrix (2D list) as input and returns a new matrix which is the original matrix rotated 90 degrees clockwise. The function should handle matrices of any size, and you should not use any external libraries to perform the rotation. Provide test cases to demonstrate that your function works as expected. # Function Signature ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: pass ``` # Input - `matrix` (List[List[int]]): A 2D list of integers representing the matrix to be rotated. All rows and columns are of equal length (n x n). # Output - A new 2D list of integers representing the rotated matrix. # Example ```python assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]] assert rotate_matrix([[1]]) == [[1]] ``` # Constraints - The matrix dimensions (n x n) will be between 1 and 100 inclusive. - You may assume that the contents of the matrix are all integers.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates the given n x n matrix 90 degrees clockwise. Args: matrix (List[List[int]]): A 2D list representing the n x n matrix. Returns: List[List[int]]: A new 2D list representing the rotated matrix. n = len(matrix) # Create a new matrix for the result with the same size rotated_matrix = [[0]*n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n-i-1] = matrix[i][j] return rotated_matrix"},{"question":"<p>The Fibonacci sequence is defined as follows:</p> <ul> <li>F(0) = 0</li> <li>F(1) = 1</li> <li>F(n) = F(n-1) + F(n-2) for n &gt; 1</li> </ul> <p>Consider a variation of the Fibonacci sequence where each term is computed using the sum of its three preceding terms instead of two. Thus, the sequence is defined as:</p> <ul> <li>T(0) = 0</li> <li>T(1) = 1</li> <li>T(2) = 1</li> <li>T(n) = T(n-1) + T(n-2) + T(n-3) for n &gt; 2</li> </ul> <p>Write a function to compute the nth term of this sequence. Your solution should efficiently handle large values of n (up to 10^6). Provide the definition of the function and the approach you used to ensure the solution can handle large values of n efficiently.</p>","solution":"def tribonacci(n): Calculate the nth term of the Tribonacci sequence, where each term is the sum of the three preceding terms. Parameters: n (int): The index of the term in the Tribonacci sequence. Returns: int: The nth term of the Tribonacci sequence. if n == 0: return 0 elif n == 1 or n == 2: return 1 # Initialize the first three terms t0, t1, t2 = 0, 1, 1 # Iterate to calculate the nth term for i in range(3, n + 1): tn = t0 + t1 + t2 t0, t1, t2 = t1, t2, tn return t2"},{"question":"Design a program that simulates a simplified text-based game involving robots on a grid. Each robot can move around the grid and change its orientation. Your solution should allow creation, movement, and orientation change of multiple robots, keeping track of their positions and orientations. The grid is defined by its width and height. Robots can face four possible directions: North (N), East (E), South (S), and West (W). The movement commands include turning left, turning right, and moving forward. The input commands are provided as a string containing a series of individual commands. Here are the commands: - `L`: turn left 90 degrees - `R`: turn right 90 degrees - `F`: move forward one unit in the direction it is currently facing Your program should initialize robots at specified positions and orientations on the grid, process a sequence of movement commands, and output each robot\'s final position and orientation. The input will consist of: 1. Grid dimensions (width and height) 2. Initial positions and orientations of the robots 3. Command strings for each robot For example, if the grid dimensions are 5x5, a robot starts at position (1, 2) facing North, and the commands are \\"LFLFLFLFF\\", the program should process these commands and move the robot accordingly. If the robot receives boundaries it can\'t pass, it should stop at the edge of the grid without changing its position. # Create Functionality 1. **initialize_grid(width: int, height: int)**: Initializes the grid with the given dimensions. 2. **add_robot(x: int, y: int, orientation: str)**: Adds a new robot at the specified position and orientation. 3. **execute_commands(robot_index: int, commands: str)**: Executes a command string for the specified robot. 4. **get_robot_position(robot_index: int)**: Returns the current position and orientation of the specified robot. # Program Constraints 1. The grid is rectangular. 2. No two robots can occupy the same position at the same time. 3. Robots always start with valid initial positions and orientations. # Example Scenario Grid dimensions: 5x5 Robot 1: - Initial position: (1, 2) - Initial orientation: North - Commands: \\"LFLFLFLFF\\" Robot 2: - Initial position: (3, 3) - Initial orientation: East - Commands: \\"FFRFFRFRRF\\" Expected Output For Robot 1: position (1, 3), facing North For Robot 2: position (5, 1), facing East Ensure your program handles edge cases, such as invalid commands, robots trying to move outside the grid, and overlapping initial positions. Your solution should include exception handling for invalid inputs and provide meaningful error messages. Additionally, write tests for various scenarios to validate that the robots move correctly based on the commands provided.","solution":"class Robot: DIRECTIONS = [\'N\', \'E\', \'S\', \'W\'] def __init__(self, x, y, orientation, grid_width, grid_height): self.x = x self.y = y self.orientation = orientation self.grid_width = grid_width self.grid_height = grid_height def turn_left(self): current_index = self.DIRECTIONS.index(self.orientation) self.orientation = self.DIRECTIONS[(current_index - 1) % 4] def turn_right(self): current_index = self.DIRECTIONS.index(self.orientation) self.orientation = self.DIRECTIONS[(current_index + 1) % 4] def move_forward(self): if self.orientation == \'N\' and self.y < self.grid_height: self.y += 1 elif self.orientation == \'E\' and self.x < self.grid_width: self.x += 1 elif self.orientation == \'S\' and self.y > 0: self.y -= 1 elif self.orientation == \'W\' and self.x > 0: self.x -= 1 def initialize_grid(width, height): return {\'width\': width, \'height\': height, \'robots\': []} def add_robot(grid, x, y, orientation): if x > grid[\'width\'] or y > grid[\'height\'] or x < 0 or y < 0: raise ValueError(\\"Robot position out of grid bounds\\") for robot in grid[\'robots\']: if robot.x == x and robot.y == y: raise ValueError(\\"Another robot already at this position\\") grid[\'robots\'].append(Robot(x, y, orientation, grid[\'width\'], grid[\'height\'])) def execute_commands(grid, robot_index, commands): robot = grid[\'robots\'][robot_index] for command in commands: if command == \'L\': robot.turn_left() elif command == \'R\': robot.turn_right() elif command == \'F\': robot.move_forward() else: raise ValueError(\\"Invalid command\\") def get_robot_position(grid, robot_index): robot = grid[\'robots\'][robot_index] return (robot.x, robot.y, robot.orientation)"},{"question":"Write a function `highest_average_grade` that takes a list of dictionaries containing student names and their respective grades across multiple subjects, and returns the name of the student with the highest average grade. Each dictionary in the list represents a single student and contains the following key-value pairs: - `\\"name\\"`: a string representing the student\'s name - `\\"grades\\"`: a list of integers representing the student\'s grades in various subjects Your task is to calculate the average grade for each student and return the name of the student with the highest average. If there is a tie (i.e., multiple students with the same highest average), return the names of all such students in the form of a list, sorted alphabetically. # Example ```python students = [ {\\"name\\": \\"Alice\\", \\"grades\\": [85, 92, 78]}, {\\"name\\": \\"Bob\\", \\"grades\\": [90, 88, 83]}, {\\"name\\": \\"Charlie\\", \\"grades\\": [95, 90, 92]} ] highest_average_grade(students) ``` Should return: ``` \\"Charlie\\" ``` If there is a tie: ```python students = [ {\\"name\\": \\"Alice\\", \\"grades\\": [85, 92, 78]}, {\\"name\\": \\"Bob\\", \\"grades\\": [90, 88, 92]}, {\\"name\\": \\"Charlie\\", \\"grades\\": [90, 88, 92]} ] highest_average_grade(students) ``` Should return: ``` [\\"Bob\\", \\"Charlie\\"] ``` # Constraints 1. Assume each student has at least one grade. 2. Grades are represented as non-negative integers. 3. The input list contains at least one student. # Function Signature ```python def highest_average_grade(students: List[Dict[str, Any]]) -> Union[str, List[str]]: pass ```","solution":"from typing import List, Dict, Any, Union def highest_average_grade(students: List[Dict[str, Any]]) -> Union[str, List[str]]: Returns the name of the student with the highest average grade. If there is a tie, returns a list of names sorted alphabetically. highest_avg = -1 res = [] for student in students: avg_grade = sum(student[\\"grades\\"]) / len(student[\\"grades\\"]) if avg_grade > highest_avg: highest_avg = avg_grade res = [student[\\"name\\"]] elif avg_grade == highest_avg: res.append(student[\\"name\\"]) if len(res) == 1: return res[0] else: return sorted(res)"},{"question":"Write a Python function to analyze and find the top \\"N\\" most frequent words in a given text file. The function should read the file, process the content to remove punctuation and normalize the text to lower-case, then count the occurrences of each word. Finally, return a list of tuples with the most frequent words and their counts, sorted by frequency in descending order. Assume the text file is relatively small and can fit in memory. ```python def most_frequent_words(file_path, top_n): # Function implementation goes here pass # Example usage: # result = most_frequent_words(\\"sample_text.txt\\", 5) # Expected output format: # [(\'the\', 20), (\'and\', 18), (\'to\', 15), (\'of\', 12), (\'a\', 10)] ```","solution":"import string from collections import Counter def most_frequent_words(file_path, top_n): Analyzes and finds the top N most frequent words in a given text file. Args: - file_path (str): The path to the text file. - top_n (int): The number of top frequent words to return. Returns: - List[Tuple[str, int]]: A list of tuples containing the most frequent words and their counts. # Initialize a counter to keep track of word frequencies word_count = Counter() # Define translation table to remove punctuation translation_table = str.maketrans(\'\', \'\', string.punctuation) with open(file_path, \'r\', encoding=\'utf-8\') as file: for line in file: # Remove punctuation and normalize to lower-case cleaned_line = line.translate(translation_table).lower() # Split line into words and update word count words = cleaned_line.split() word_count.update(words) # Return the top N most common words return word_count.most_common(top_n)"},{"question":"Create a function to simulate a simple banking system that supports users to create an account, deposit money, withdraw money, and check the balance. The solution should include exception handling to manage cases such as insufficient funds, accounts not found, and invalid operations. Ensure that the system maintains a record of all transactions and provides summary reporting for each account, including total deposits, withdrawals, and current balance. The program should be modular and use a class-based approach, with each account represented as an instance of an Account class.","solution":"class InsufficientFundsException(Exception): pass class AccountNotFoundException(Exception): pass class InvalidOperationException(Exception): pass class Account: def __init__(self, account_id): self.account_id = account_id self.balance = 0 self.transactions = [] def deposit(self, amount): if amount <= 0: raise InvalidOperationException(\\"Deposit amount must be positive\\") self.balance += amount self.transactions.append((\'Deposit\', amount)) return self.balance def withdraw(self, amount): if amount <= 0: raise InvalidOperationException(\\"Withdrawal amount must be positive\\") if amount > self.balance: raise InsufficientFundsException(\\"Insufficient funds for this withdrawal\\") self.balance -= amount self.transactions.append((\'Withdrawal\', amount)) return self.balance def get_balance(self): return self.balance def get_summary(self): deposits = sum(amount for action, amount in self.transactions if action == \'Deposit\') withdrawals = sum(amount for action, amount in self.transactions if action == \'Withdrawal\') return { \'total_deposits\': deposits, \'total_withdrawals\': withdrawals, \'current_balance\': self.balance } class Bank: def __init__(self): self.accounts = {} def create_account(self, account_id): if account_id in self.accounts: raise InvalidOperationException(\\"Account already exists\\") self.accounts[account_id] = Account(account_id) return self.accounts[account_id] def get_account(self, account_id): if account_id not in self.accounts: raise AccountNotFoundException(\\"Account not found\\") return self.accounts[account_id]"},{"question":"Design a Python program to manage a library system. The library offers the following services: 1. **Book Information**: Each book in the library has a unique ISBN, a title, an author, and a genre. The program should be able to store and manage these details using a suitable data structure. 2. **Adding New Books**: Implement a method to add new books to the library. Ensure there are no duplicate ISBNs and validate that all fields are properly filled in. 3. **Borrow / Return Books**: Design functionalities for borrowing and returning books. Ensure that a book cannot be borrowed if it\'s already loaned out and mark it as available once returned. 4. **Search & Recommendation**: - **Search**: Provide a method to search for books by title, author, or genre. - **Recommendation**: When a book is borrowed, recommend another book from the same genre that is available. 5. **Exception Handling**: Add exception handling to cover cases like invalid book data (e.g., missing fields), attempting to borrow already borrowed books, or trying to return a book that was not borrowed. Consider writing efficient and scalable code while developing these methods, keeping in mind the functionality and usability of the library system.","solution":"class LibrarySystem: def __init__(self): self.books = {} # {ISBN: {\\"title\\": ..., \\"author\\": ..., \\"genre\\": ..., \\"is_borrowed\\": ...}} self.borrowed_books = set() # Set of borrowed ISBNs def add_book(self, isbn, title, author, genre): if isbn in self.books: raise ValueError(\\"Duplicate ISBN not allowed.\\") if not all([isbn, title, author, genre]): raise ValueError(\\"All book details must be provided.\\") self.books[isbn] = { \\"title\\": title, \\"author\\": author, \\"genre\\": genre, \\"is_borrowed\\": False } def borrow_book(self, isbn): if isbn not in self.books: raise ValueError(\\"Book does not exist in the library.\\") if self.books[isbn][\\"is_borrowed\\"]: raise ValueError(\\"Book is already borrowed.\\") self.books[isbn][\\"is_borrowed\\"] = True self.borrowed_books.add(isbn) def return_book(self, isbn): if isbn not in self.books: raise ValueError(\\"Book does not exist in the library.\\") if not self.books[isbn][\\"is_borrowed\\"]: raise ValueError(\\"Book was not borrowed.\\") self.books[isbn][\\"is_borrowed\\"] = False self.borrowed_books.remove(isbn) def search_books(self, title=None, author=None, genre=None): results = [] for isbn, details in self.books.items(): if ( (title is None or details[\\"title\\"] == title) and (author is None or details[\\"author\\"] == author) and (genre is None or details[\\"genre\\"] == genre) ): results.append({**details, \\"isbn\\": isbn}) return results def recommend_book(self, genre): for isbn, details in self.books.items(): if details[\\"genre\\"] == genre and not details[\\"is_borrowed\\"]: return {**details, \\"isbn\\": isbn} return \\"No books available for recommendation in this genre.\\""},{"question":"Write a function that calculates the factorial of a given integer using both iterative and recursive methods. The function should accept an additional parameter that specifies which method to use: \'iterative\' or \'recursive\'. If the input is not a non-negative integer or if the specified method is not recognized, the function should return a suitable error message. ```python def factorial(number: int, method: str) -> int: This function calculates the factorial of a given non-negative integer. It provides both iterative and recursive implementations based on the specified method. If the input number is not a non-negative integer or the method is not recognized, it should return a suitable error message. >>> factorial(5, \'iterative\') 120 >>> factorial(5, \'recursive\') 120 >>> factorial(-5, \'iterative\') \'Error: Invalid input. Provide a non-negative integer.\' >>> factorial(5, \'unknown\') \'Error: Unknown method specified.\' >>> factorial(10.5, \'iterative\') \'Error: Invalid input. Provide a non-negative integer.\' def iterative_fact(n: int) -> int: result = 1 for i in range(2, n + 1): result *= i return result def recursive_fact(n: int) -> int: if n == 0 or n == 1: return 1 else: return n * recursive_fact(n - 1) if not isinstance(number, int) or number < 0: return \'Error: Invalid input. Provide a non-negative integer.\' if method == \'iterative\': return iterative_fact(number) elif method == \'recursive\': return recursive_fact(number) else: return \'Error: Unknown method specified.\' ```","solution":"def factorial(number: int, method: str) -> int: This function calculates the factorial of a given non-negative integer. It provides both iterative and recursive implementations based on the specified method. If the input number is not a non-negative integer or the method is not recognized, it should return a suitable error message. def iterative_fact(n: int) -> int: result = 1 for i in range(2, n + 1): result *= i return result def recursive_fact(n: int) -> int: if n == 0 or n == 1: return 1 else: return n * recursive_fact(n - 1) if not isinstance(number, int) or number < 0: return \'Error: Invalid input. Provide a non-negative integer.\' if method == \'iterative\': return iterative_fact(number) elif method == \'recursive\': return recursive_fact(number) else: return \'Error: Unknown method specified.\'"},{"question":"Create a function `find_maximal_rectangle` that accepts a 2D binary matrix filled with 0’s and 1’s and finds the largest rectangle containing only 1’s. Return its area. Implement the code using arrays and basic control structures without utilizing Python libraries like NumPy. Make sure to handle edge cases such as an empty matrix or matrix with no 1\'s.","solution":"def find_maximal_rectangle(matrix): Finds the largest rectangle containing only 1\'s in a binary matrix and returns its area. Arguments: matrix -- 2D list of integers (0 or 1) Returns: int -- area of the largest rectangle containing only 1\'s if not matrix or not matrix[0]: return 0 def largest_histogram_area(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area n, m = len(matrix), len(matrix[0]) max_area = 0 heights = [0] * m for i in range(n): for j in range(m): if matrix[i][j] == 1: heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, largest_histogram_area(heights)) return max_area"},{"question":"Create a function called `most_frequent_word` that takes a string as input and returns the word that appears most frequently. If there are multiple words with the same highest frequency, return the one that appears first in the string. Assume the input string contains only letters and spaces. ```python def most_frequent_word(s): words = s.split() frequency = {} max_count = 0 frequent_word = \\"\\" for word in words: if word not in frequency: frequency[word] = 1 else: frequency[word] += 1 if frequency[word] > max_count: max_count = frequency[word] frequent_word = word elif frequency[word] == max_count: if words.index(frequent_word) > words.index(word): frequent_word = word return frequent_word # Test the function input_str = \\"cat bat cat rat bat bat cat\\" print(most_frequent_word(input_str)) # Output should be \\"cat\\" ``` Make sure your code handles case sensitivity and retains the first word with the highest frequency when there is a tie.","solution":"def most_frequent_word(s): Returns the most frequent word in the string. If there is a tie, the word that appears first is returned. words = s.split() frequency = {} max_count = 0 frequent_word = \\"\\" for word in words: if word not in frequency: frequency[word] = 1 else: frequency[word] += 1 if frequency[word] > max_count: max_count = frequency[word] frequent_word = word elif frequency[word] == max_count: if words.index(frequent_word) > words.index(word): frequent_word = word return frequent_word"},{"question":"Write a Python function that accepts a string containing a mix of alphabetical characters and digits, and returns a new string where the digits are multiplied by 2 and the alphabetical characters remain unchanged. For example, given the input \\"a1b2c3\\", the output should be \\"a2b4c6\\". Ensure your function handles edge cases like an empty string or a string without any digits.","solution":"def multiply_digits(input_string): Returns a new string where the digits in the input string are multiplied by 2, and alphabetical characters remain unchanged. Parameters: input_string (str): The input string containing a mix of alphabetical characters and digits. Returns: str: The transformed string with digits multiplied by 2. result = [] for char in input_string: if char.isdigit(): result.append(str(int(char) * 2)) else: result.append(char) return \'\'.join(result)"},{"question":"Write a function that takes an integer array `nums` and returns the majority element. The majority element is the element that appears more than `n/2` times where `n` is the length of the array. Assume that the array is non-empty and the majority element always exists in the array. **Example:** ```python def majorityElement(nums): # Your code here # Example usage print(majorityElement([3,2,3])) # Output: 3 print(majorityElement([2,2,1,1,1,2,2])) # Output: 2 ``` **Explanation:** - In the first example, 3 is the majority element as it appears more than `3/2` times. - In the second example, 2 is the majority element as it appears more than `7/2` times.","solution":"def majorityElement(nums): Returns the majority element from the list nums. The majority element is the element that appears more than n/2 times where n is the length of the array. count = 0 candidate = None for num in nums: if count == 0: candidate = num count += 1 if num == candidate else -1 return candidate"},{"question":"Given a list of integers, write a function to find the second largest number in the list. You cannot use built-in Python functions like max() or sort(). Additionally, implement a function to handle the edge cases where the list has less than two distinct elements and return an appropriate message. After completing the function, analyze and explain the time and space complexity of your solution. myList = [10, 34, 67, 89, 90, 56, 78, 89]","solution":"def find_second_largest(lst): Finds the second largest number in a list of integers. Parameters: - lst (list of int): The input list of integers. Returns: - int: The second largest number if it exists, otherwise returns a message. if len(lst) < 2: return \\"List does not have enough elements.\\" first_largest = second_largest = float(\'-inf\') # Find the largest and the second largest numbers for num in lst: if num > first_largest: second_largest = first_largest first_largest = num elif first_largest > num > second_largest: second_largest = num if second_largest == float(\'-inf\'): return \\"List does not have two distinct elements.\\" else: return second_largest # Time Complexity: O(n), where n is the number of elements in the list. # Space Complexity: O(1), only a few variables are used regardless of the input list size."},{"question":"Create a function in Python named \\"find_most_common\\" that takes a list of strings as input and returns the string that appears most frequently in the list. If there is a tie for the most frequent string, return the one that appeared first in the list. Make sure to handle edge cases such as an empty list.","solution":"def find_most_common(lst): Returns the most common string in the list. If there is a tie, returns the string that appeared first. if not lst: return None from collections import defaultdict frequency = defaultdict(int) for item in lst: frequency[item] += 1 most_common = lst[0] max_count = frequency[most_common] for item in lst: if frequency[item] > max_count: most_common = item max_count = frequency[item] return most_common"},{"question":"Write a Python function that takes in two sorted lists of integers and returns a new list that contains only the elements that are common to both lists, without duplicates and in ascending order. Implement the following constraints: 1. The function should be efficient, having an overall time complexity of O(n + m), where n and m are the lengths of the input lists. 2. The lists may contain negative integers and zeros, and both will already be sorted in non-decreasing order. 3. You should not use any extra space beyond what is necessary for the output list. Include test cases to demonstrate that the function works correctly under various scenarios, including edge cases where one or both of the lists are empty.","solution":"def common_elements(list1, list2): Returns a sorted list that contains only the elements that are common to both input lists, without duplicates. result = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] == list2[j]: if not result or list1[i] != result[-1]: # Avoid duplicates in the result result.append(list1[i]) i += 1 j += 1 elif list1[i] < list2[j]: i += 1 else: j += 1 return result"},{"question":"Create a program that takes in a target sum \'S\' and finds all unique combinations of positive integers that add up to the target sum, \'S\'. Your program should output these combinations as lists of integers, with each combination sorted in ascending order. Ensure that combinations containing the same set of integers in a different order are not considered unique and should only appear once in your output.","solution":"def combination_sum(S): Returns all unique combinations of positive integers that sum up to S. Each combination is sorted in ascending order. Parameters: S (int): The target sum. Returns: List[List[int]]: A list of unique combinations. def backtrack(target, start, path, res): if target == 0: res.append(list(path)) return for i in range(start, target + 1): path.append(i) backtrack(target - i, i, path, res) path.pop() result = [] backtrack(S, 1, [], result) return result"},{"question":"Write a function `find_common_elements(list1, list2, list3)` that takes three lists of integers and returns a sorted list containing only those integers which are present in all three lists. The function should have a time complexity of O(n) where n is the length of each list. Also, provide an explanation of how your algorithm achieves this time complexity.","solution":"def find_common_elements(list1, list2, list3): Returns a sorted list containing elements that are present in all three lists. set1, set2, set3 = set(list1), set(list2), set(list3) common_elements = set1 & set2 & set3 return sorted(list(common_elements))"},{"question":"写一段代码计算给定字符串中的元音字母的数量，并返回该数量。元音字母包括\'a\', \'e\', \'i\', \'o\', \'u\'（大小写均算）。例如，对于字符串 \\"Coding Is Fun\\"，函数应返回4。","solution":"def count_vowels(s): Returns the number of vowels in the given string. Vowels considered are: \'a\', \'e\', \'i\', \'o\', \'u\' in both upper and lower cases. vowels = set(\'aeiouAEIOU\') return sum(1 for char in s if char in vowels)"},{"question":"Write a function that detects whether a given string contains a valid set of parentheses. The function should return `True` if the parentheses are correctly balanced and closed, and `False` otherwise. Note that besides the typical parentheses (), this question also includes square brackets [] and curly braces {}. Consider handling different edge cases, such as strings with only one type of parentheses, empty strings, and mixed types of mismatched braces. Here\'s an incomplete implementation using a stack. Complete this implementation and ensure all edge cases are covered: ```python def is_valid_parentheses(s): stack = [] mapping = {\\")\\": \\"(\\", \\"]\\": \\"[\\", \\"}\\": \\"{\\"} for char in s: if char in mapping.values(): stack.append(char) elif char in mapping.keys(): if stack == [] or mapping[char] != stack.pop(): return False else: continue return stack == [] # Test cases print(is_valid_parentheses(\\"()[]{}\\")) # Expected output: True print(is_valid_parentheses(\\"(]\\")) # Expected output: False print(is_valid_parentheses(\\"([)]\\")) # Expected output: False print(is_valid_parentheses(\\"{[]}\\")) # Expected output: True ```","solution":"def is_valid_parentheses(s): stack = [] mapping = {\\")\\": \\"(\\", \\"]\\": \\"[\\", \\"}\\": \\"{\\"} for char in s: if char in mapping.values(): stack.append(char) elif char in mapping.keys(): if stack == [] or mapping[char] != stack.pop(): return False else: continue return stack == []"},{"question":"Write a function to calculate the sum of squares of all elements in a given list of integers. The function should also return the count of negative numbers in the list. Additionally, ensure that the list contains only integer values, and handle any erroneous inputs gracefully.","solution":"def sum_of_squares_with_negative_count(lst): Returns the sum of squares of all elements in a given list of integers and the count of negative numbers in the list. Parameters: lst (list): List of integers Returns: tuple: (sum_of_squares, negative_count) # Verify the input contains only integers if not all(isinstance(i, int) for i in lst): raise ValueError(\\"List must contain only integer values\\") sum_of_squares = 0 negative_count = 0 for num in lst: sum_of_squares += num ** 2 if num < 0: negative_count += 1 return sum_of_squares, negative_count"},{"question":"Write a function to find the second largest number in a given list of integers. Your function should handle both positive and negative numbers and return appropriate output if there isn\'t a second largest number (e.g., if the list has fewer than two unique numbers). Examples: - Input: [10, 20, 4, 45, 99] Output: 45 - Input: [6, 6, 6] Output: No second largest number - Input: [3] Output: No second largest number","solution":"def second_largest(numbers): Finds the second largest number in a list of integers. unique_numbers = list(set(numbers)) # Remove duplicates if len(unique_numbers) < 2: return \\"No second largest number\\" unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Write a function to evaluate a mathematical expression given in Reverse Polish Notation (RPN). The input will be a list of strings, each representing an operand or an operator. The allowed operators are +, -, *, and /. The operands are non-negative integers. The division should truncate towards zero. Ensure your solution efficiently handles typical edge cases and document the space and time complexity in Big O Notation.","solution":"def eval_rpn(tokens): Evaluates a mathematical expression in Reverse Polish Notation. Args: tokens (List[str]): The RPN expression where each token is either an integer or an operator (+, -, *, /). Returns: int: The result of evaluating the RPN expression. stack = [] for token in tokens: if token in {\\"+\\", \\"-\\", \\"*\\", \\"/\\"}: b = stack.pop() a = stack.pop() if token == \\"+\\": result = a + b elif token == \\"-\\": result = a - b elif token == \\"*\\": result = a * b elif token == \\"/\\": result = int(a / b) # Truncate towards zero stack.append(result) else: stack.append(int(token)) return stack[0] # Time complexity: O(n) where n is the number of tokens # Space complexity: O(n) for the stack storing operands"},{"question":"Write a Python function that calculates the longest increasing subsequence (LIS) from a given list of integers. The function should handle edge cases where the list is empty or contains negative numbers. Additionally, debug the following erroneous code that attempts to find the LIS but has some logical errors. ```python def erroneous_lis(sequence): if not sequence: return 0 lis = [1] * len(sequence) for i in range(len(sequence)): for j in range(i): if sequence[i] > sequence[j]: lis[i] = lis[j] + 1 return max(lis) ``` Note: The function should return the length of the longest increasing subsequence for the given list. Moreover, if the list is empty, the function should return 0. Your function should also return a meaningful error message if the input is not a list of integers.","solution":"def longest_increasing_subsequence(sequence): if not isinstance(sequence, list) or not all(isinstance(i, int) for i in sequence): return \\"Input should be a list of integers\\" if not sequence: return 0 lis = [1] * len(sequence) for i in range(1, len(sequence)): for j in range(i): if sequence[i] > sequence[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"Design and implement a function that takes a string input and returns the longest substring that contains at most two distinct characters. Ensure your solution balances efficiency and clarity, providing a commentary on your choice of algorithm and its suitability for large input sizes. Discuss any potential edge cases and how your method addresses them.","solution":"def longest_substring_two_distinct(s): Returns the longest substring that contains at most two distinct characters. :param s: The input string. :return: The longest substring with at most two distinct characters. from collections import defaultdict n = len(s) if n == 0: return \\"\\" left = 0 max_len = 0 max_substr = \\"\\" char_map = defaultdict(int) for right in range(n): char_map[s[right]] += 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 if right - left + 1 > max_len: max_len = right - left + 1 max_substr = s[left:right+1] return max_substr"},{"question":"Convert the specified JSON structure into an equivalent Python dictionary. The current JSON object contains nested lists and dictionaries with various data types including strings, numbers, and boolean values. Ensure that the resulting Python dictionary accurately mirrors the original JSON data, preserving all hierarchical relationships and data types.","solution":"import json def json_to_dict(json_str): Converts a JSON string into a Python dictionary. :param json_str: JSON string to convert :return: Python dictionary equivalent of the JSON string return json.loads(json_str)"},{"question":"Modify the code below which includes a function to compress a string using Run-Length Encoding (RLE) and a function to decompress it back to its original form. In RLE, consecutive occurrences of the same character are replaced with the character followed by the number of occurrences. If a character occurs only once, it should not be followed by a number. Implement both the compression and decompression functions with optional static typing and provide test cases to validate your solution. from typing import List def compress_string(input_string: str) -> str: Your compression function will be described here... pass def decompress_string(encoded_string: str) -> str: Your decompression function will be described here... pass # Test cases for compress_string and decompress_string functions # Test Case 1 for compress_string input_string = \'aaabbccccd\' expected_output = \'a3b2c4d\' assert compress_string(input_string) == expected_output # Test Case 2 for compress_string input_string = \'abcd\' expected_output = \'abcd\' assert compress_string(input_string) == expected_output # Test Case 1 for decompress_string encoded_string = \'a3b2c4d\' expected_output = \'aaabbccccd\' assert decompress_string(encoded_string) == expected_output # Test Case 2 for decompress_string encoded_string = \'abcd\' expected_output = \'abcd\' assert decompress_string(encoded_string) == expected_output","solution":"def compress_string(input_string: str) -> str: Compresses the input_string using Run-Length Encoding (RLE). if not input_string: return \\"\\" compressed = [] current_char = input_string[0] count = 1 for char in input_string[1:]: if char == current_char: count += 1 else: if count > 1: compressed.append(f\\"{current_char}{count}\\") else: compressed.append(current_char) current_char = char count = 1 if count > 1: compressed.append(f\\"{current_char}{count}\\") else: compressed.append(current_char) return \'\'.join(compressed) def decompress_string(encoded_string: str) -> str: Decompresses the encoded_string using Run-Length Encoding (RLE). if not encoded_string: return \\"\\" decompressed = [] i = 0 while i < len(encoded_string): char = encoded_string[i] i += 1 count = 1 # If no digit follows, the count is implicitly 1 if i < len(encoded_string) and encoded_string[i].isdigit(): count_str = [] while i < len(encoded_string) and encoded_string[i].isdigit(): count_str.append(encoded_string[i]) i += 1 count = int(\'\'.join(count_str)) decompressed.append(char * count) return \'\'.join(decompressed)"},{"question":"Given an integer n, write a function that generates a spiral matrix of size n x n. The spiral matrix starts with the number 1 and increases sequentially as it fills the matrix in a spiral order, starting in the top-left corner and moving to the right initially. For example, if n is 3, the output should be: [[1, 2, 3], [8, 9, 4], [7, 6, 5]] Function signature: def generate_spiral_matrix(n: int) -> List[List[int]]","solution":"from typing import List def generate_spiral_matrix(n: int) -> List[List[int]]: Generates a spiral matrix of size n x n. matrix = [[0] * n for _ in range(n)] num = 1 left, right, top, bottom = 0, n - 1, 0, n - 1 while left <= right and top <= bottom: # Traverse from left to right for j in range(left, right + 1): matrix[top][j] = num num += 1 top += 1 # Traverse from top to bottom for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 # Traverse from right to left for j in range(right, left - 1, -1): matrix[bottom][j] = num num += 1 bottom -= 1 # Traverse from bottom to top for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Utilize the pandas library to load user data from this CSV file: https://people.sc.fsu.edu/~jburkardt/data/csv/airtravel.csv. Create a line plot using matplotlib to visualize the change in the number of air passengers over the months from January to December. Ensure that the x-axis represents the months, the y-axis represents the number of air passengers, and the plot includes proper titles and labels for clarity.","solution":"import pandas as pd import matplotlib.pyplot as plt def load_and_plot_airtravel_data(url): Loads air travel data from a CSV file and plots the number of air passengers over the months. :param url: URL of the CSV file containing air travel data. # Load the data airtravel_data = pd.read_csv(url) # Plot the data plt.figure(figsize=(10, 5)) for year in airtravel_data.columns[1:]: plt.plot(airtravel_data[\'Month\'], airtravel_data[year], label=year) # Add titles and labels plt.title(\'Monthly Air Travel Data\') plt.xlabel(\'Month\') plt.ylabel(\'Number of Air Passengers\') plt.legend(title=\\"Year\\", loc=\'upper left\') plt.grid(True) plt.show() # URL of CSV file url = \\"https://people.sc.fsu.edu/~jburkardt/data/csv/airtravel.csv\\" # Run the function load_and_plot_airtravel_data(url)"},{"question":"Write a function that determines if a given positive integer is an Armstrong number. An Armstrong number (also known as a narcissistic number) is a number that is equal to the sum of its own digits each raised to the power of the number of digits. For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153. The function should return `True` if the number is an Armstrong number, otherwise `False`. Additionally, provide a test mechanism that checks the function against a range of numbers from 1 to 9999.","solution":"def is_armstrong_number(num): Determines if a given positive integer is an Armstrong number. digits = list(map(int, str(num))) num_digits = len(digits) return num == sum(digit ** num_digits for digit in digits)"},{"question":"Write a function in your preferred programming language that takes an array of integers and a target integer. The function should return a list of unique pairs of integers from the array that sum up to the target integer. Ensure that the function is optimized for performance by considering the time complexity of your solution. Additionally, handle possible edge cases where the array is empty, contains fewer than two elements, or where no pairs sum up to the target integer. Provide a brief explanation of your approach and the rationale behind your choice of algorithm.","solution":"def find_pairs_with_sum(arr, target): Returns a list of unique pairs of integers from the array that sum up to the target integer. Parameters: arr (list): A list of integers. target (int): The target sum. Returns: list: A list of tuples, where each tuple contains a pair of integers that sum up to the target. seen = set() output = set() for num in arr: complement = target - num if complement in seen: output.add((min(num, complement), max(num, complement))) seen.add(num) return list(output)"},{"question":"Create a Python script that simulates a simple banking system. The system should support creating accounts, depositing money, withdrawing money, and checking balances. Each account has a unique account number and a password for secure transactions. The script should handle exceptions such as insufficient funds, invalid account numbers, and incorrect passwords. Additionally, implement session management to keep users logged in securely until they decide to log out.","solution":"class Account: def __init__(self, account_number, password): self.account_number = account_number self.password = password self.balance = 0 def deposit(self, amount): if amount > 0: self.balance += amount return self.balance else: raise ValueError(\\"Deposit amount must be positive\\") def withdraw(self, amount): if amount > self.balance: raise ValueError(\\"Insufficient funds\\") if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") self.balance -= amount return self.balance def get_balance(self): return self.balance class BankingSystem: def __init__(self): self.accounts = {} self.logged_in_account = None def create_account(self, account_number, password): if account_number in self.accounts: raise ValueError(\\"Account number already exists\\") self.accounts[account_number] = Account(account_number, password) return \\"Account created successfully\\" def login(self, account_number, password): if account_number not in self.accounts: raise ValueError(\\"Invalid account number\\") if self.accounts[account_number].password != password: raise ValueError(\\"Incorrect password\\") self.logged_in_account = self.accounts[account_number] return \\"Logged in successfully\\" def logout(self): self.logged_in_account = None return \\"Logged out successfully\\" def deposit(self, amount): if self.logged_in_account is None: raise PermissionError(\\"Please log in first\\") return self.logged_in_account.deposit(amount) def withdraw(self, amount): if self.logged_in_account is None: raise PermissionError(\\"Please log in first\\") return self.logged_in_account.withdraw(amount) def check_balance(self): if self.logged_in_account is None: raise PermissionError(\\"Please log in first\\") return self.logged_in_account.get_balance()"},{"question":"Write a Python function that receives a list of integers and a key integer K (1 ≤ K ≤ 100) as input, and returns a new list that contains only those integers from the original list that are divisible by K. Your function should also create an input validation function that checks if the provided list contains valid integers and that K is within the specified range. Note: Ensure your solution includes proper error handling and input validation.","solution":"def is_valid_input(numbers, K): Validates the input to check if `numbers` is a list of integers and `K` is an integer within the range 1 to 100. if not isinstance(numbers, list): return False if not all(isinstance(num, int) for num in numbers): return False if not isinstance(K, int) or not (1 <= K <= 100): return False return True def filter_divisible(numbers, K): Returns a new list containing only the integers from the provided list that are divisible by K. Raises ValueError if inputs are invalid. if not is_valid_input(numbers, K): raise ValueError(\\"Invalid input! Ensure that `numbers` is a list of integers and `K` is an integer within the range 1 to 100.\\") return [num for num in numbers if num % K == 0]"},{"question":"Write a program that takes a string as input and returns the string with all non-alphabetic characters removed and letters converted to lowercase. The program should maintain the order of the remaining characters. For example, if the input string is \\"Hello, World! 123\\", the program should output \\"helloworld\\".","solution":"def clean_string(input_string): Takes a string as input and returns the string with all non-alphabetic characters removed and letters converted to lowercase. The order of the remaining characters is maintained. return \'\'.join(char.lower() for char in input_string if char.isalpha())"},{"question":"Implement a Python function that, given a list of integers, determines the length of the longest contiguous subarray where the absolute difference between any two elements is at most 1. This requires a thorough understanding of array manipulation and sliding window techniques for an optimized solution.","solution":"def longest_subarray_with_abs_diff_at_most_one(arr): Determines the length of the longest contiguous subarray where the absolute difference between any two elements is at most 1. Parameters: arr (list): List of integers Returns: int: Length of the longest contiguous subarray if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i-1]) <= 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Given a string consisting of only lowercase alphabets, write a function that counts the frequency of each character and returns a dictionary with the characters as keys and their corresponding frequencies as values. For instance, if the input string is \\"mississippi\\", the output should be `{\'m\': 1, \'i\': 4, \'s\': 4, \'p\': 2}`.","solution":"def count_character_frequencies(s): Returns a dictionary with the frequency of each character in the string s. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Implement a function `flatten_dict` that takes a nested dictionary and returns a flat dictionary where the keys are the paths to each value in the original dictionary, separated by dots. Example: ``` Input: { \'a\': { \'b\': 1, \'c\': { \'d\': 2, \'e\': 3 } }, \'f\': 4 } Output: { \'a.b\': 1, \'a.c.d\': 2, \'a.c.e\': 3, \'f\': 4 } ``` Assume input dictionaries will not have keys containing dots.","solution":"def flatten_dict(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. Args: d (dict): The dictionary to flatten. parent_key (str): The base key string. Default is \'\'. sep (str): The separator between keys. Default is \'.\'. Returns: dict: The flattened dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Write a function that takes an array of integers as an input and returns an array where each element is the product of all integers in the input array except the one at the current position. Ensure your algorithm does not use the division operation and maintains an optimal time complexity.","solution":"def product_except_self(nums): Takes an array of integers and returns an array where each element is the product of all integers in the input array except the one at the current position. n = len(nums) if n == 0: return [] # Initialize the arrays for left and right products left_products = [1] * n right_products = [1] * n # Fill the left products array for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill the right products array for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Generate the result array by multiplying left and right products result = [1] * n for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Write a Python function that accepts a dictionary where the keys are strings and the values are integers or lists of integers (which can also contain nested lists up to two levels). The function should return a new dictionary where each key maps to the sum of all integers (including nested ones) associated with that key. For example, given the dictionary `{\'a\': 5, \'b\': [3, 4, [1, 2]], \'c\': [2, [3, 4]], \'d\': 7}`, the function should return `{\'a\': 5, \'b\': 10, \'c\': 9, \'d\': 7}`.","solution":"def sum_nested_elements(nested_list): Helper function to sum all integers in a nested list structure. It can contain nested lists up to two levels. total_sum = 0 for element in nested_list: if isinstance(element, int): total_sum += element elif isinstance(element, list): for sub_element in element: if isinstance(sub_element, int): total_sum += sub_element return total_sum def sum_dictionary_values(input_dict): Returns a new dictionary where each key maps to the sum of all integers (including nested ones up to two levels) associated with that key. result = {} for key, value in input_dict.items(): if isinstance(value, int): result[key] = value elif isinstance(value, list): result[key] = sum_nested_elements(value) return result"},{"question":"<p> John works at a warehouse and needs to manage inventory with N different types of items. Each item type is represented by an integer pair (a<sub>i</sub>, b<sub>i</sub>), where a<sub>i</sub> is the price of the item and b<sub>i</sub> is the number of those items in stock. John receives a list of M orders, each order is represented by an integer k<sub>i</sub> indicating the item type requested, and an integer q<sub>i</sub>, which is the quantity requested. John needs to process the orders one by one in the given sequence and update the stock accordingly. </p> <p> Write a function <code>process_orders(N, items, M, orders)</code> that takes in the number of item types N, a list of tuples representing items with their prices and stock levels, the number of orders M, and a list of tuples representing the orders with item types and quantities requested. The function should return a list of tuples representing the updated stock levels for each item type after processing all the orders. </p> <p> <strong>Input:</strong> - <code>N</code>: an integer (1 &le; N &le; 10<sup>3</sup>) - <code>items</code>: a list of N tuples (a<sub>i</sub>, b<sub>i</sub>) representing the items with their prices and stock levels (1 &le; a<sub>i</sub> &le; 10<sup>4</sup> and 0 &le; b<sub>i</sub> &le; 10<sup>6</sup>) - <code>M</code>: an integer (1 &le; M &le; 10<sup>3</sup>) - <code>orders</code>: a list of M tuples (k<sub>i</sub>, q<sub>i</sub>) representing the orders with item type (1 &le; k<sub>i</sub> &le; N) and quantity requested (1 &le; q<sub>i</sub> &le; 10<sup>4</sup>) </p> <p> <strong>Output:</strong> - A list of N tuples representing the updated stock levels for each item type. </p> <p> <strong>Example:</strong><br> <code>Input:</code><br> N = 3<br> items = [(10, 100), (20, 200), (30, 300)]<br> M = 2<br> orders = [(1, 50), (3, 100)]<br> <code>Output:</code><br> [(10, 50), (20, 200), (30, 200)] </p>","solution":"def process_orders(N, items, M, orders): updated_items = items[:] for k, q in orders: item_index = k - 1 item_price, item_stock = updated_items[item_index] if item_stock >= q: updated_items[item_index] = (item_price, item_stock - q) else: updated_items[item_index] = (item_price, 0) return updated_items"},{"question":"Write a function in Python that takes a list of numbers as input and returns a list of the same numbers but sorted in ascending order without using the built-in `sorted` method or `sort` function. Ensure that your implementation uses an algorithm with a time complexity of O(n^2) or better.","solution":"def bubble_sort(lst): Returns a list of numbers sorted in ascending order using bubble sort algorithm. n = len(lst) for i in range(n): swapped = False for j in range(0, n-i-1): if lst[j] > lst[j+1]: lst[j], lst[j+1] = lst[j+1], lst[j] swapped = True if not swapped: break return lst"},{"question":"Explain what a binary search tree (BST) is, and write a function in Python to find the Lowest Common Ancestor (LCA) of two given nodes in a BST. Include example input and output for the function.","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None def find_lca(root, n1, n2): Function to find the Lowest Common Ancestor (LCA) of two given nodes in a BST. while root: # If both n1 and n2 are smaller than root, then LCA lies in left subtree if root.key > n1 and root.key > n2: root = root.left # If both n1 and n2 are greater than root, then LCA lies in right subtree elif root.key < n1 and root.key < n2: root = root.right else: break return root # Example # Construct the following BST # 20 # / # 10 30 # / / # 5 15 25 35 root = TreeNode(20) root.left = TreeNode(10) root.right = TreeNode(30) root.left.left = TreeNode(5) root.left.right = TreeNode(15) root.right.left = TreeNode(25) root.right.right = TreeNode(35) # LCA of nodes 5 and 15 = 10 print(find_lca(root, 5, 15).key) # Output: 10 # LCA of nodes 5 and 30 = 20 print(find_lca(root, 5, 30).key) # Output: 20 # LCA of nodes 25 and 35 = 30 print(find_lca(root, 25, 35).key) # Output: 30"},{"question":"A gym trainer can perform bench presses in sets, where each set consists of a specific number of repetitions. If the trainer completes 3 sets with 12 repetitions each, and then decides to reduce the number of repetitions by 2 for the next 2 sets, how many total repetitions does the trainer complete?","solution":"def total_repetitions(sets_repetitions): Calculate the total number of repetitions given a list of tuples where each tuple contains (number of sets, number of repetitions per set). Args: sets_repetitions (list of tuples): List containing pairs of (sets, repetitions per set). Returns: int: Total number of repetitions. total_reps = 0 for sets, reps in sets_repetitions: total_reps += sets * reps return total_reps # For the given problem # The trainer completes: # - 3 sets of 12 repetitions: 3 * 12 # - 2 sets of 10 repetitions: 2 * 10 sets_repetitions_list = [(3, 12), (2, 10)] total_reps_completed = total_repetitions(sets_repetitions_list)"},{"question":"I am working with a list of dictionaries where each dictionary contains \'name\' and \'score\' for an individual, and I need to extract the top N highest scoring individuals. Let\'s say my list of dictionaries is as follows and N is 3: ``` individuals = [ {\'name\': \'Alice\', \'score\': 85}, {\'name\': \'Bob\', \'score\': 95}, {\'name\': \'Charlie\', \'score\': 70}, {\'name\': \'David\', \'score\': 90}, {\'name\': \'Eva\', \'score\': 85} ] N = 3 ``` The expected output for the top N highest scoring individuals should be a list of dictionaries in descending order based on their scores. In the event of a tie in scores, the individuals should appear in the original order they appeared in the list. The expected outcome: ``` [ {\'name\': \'Bob\', \'score\': 95}, {\'name\': \'David\', \'score\': 90}, {\'name\': \'Alice\', \'score\': 85} ] ``` Your task is to write a Python function to achieve this. The function should be called `top_n_individuals` and should take the list of dictionaries and the integer N as arguments: ``` def top_n_individuals(individuals, N): # return the solution in this function # result = top_n_individuals(individuals, N) # BEGIN SOLUTION","solution":"def top_n_individuals(individuals, N): Returns the top N highest scoring individuals from the list of dictionaries. # Sorting by score in descending order while maintaining stability of original order for ties sorted_individuals = sorted(individuals, key=lambda x: x[\'score\'], reverse=True) # Return the top N individuals return sorted_individuals[:N]"},{"question":"You are given a list of integers. Write a function to find the contiguous subarray (containing at least one number) which has the largest sum and return this sum. As an additional task, also return the start and end indices of this subarray. Follow the example and constraints provided below. Example: ```python def max_subarray_sum(nums): # Your code here # Example print(max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4])) # Output should be (6, 3, 6) # Explanation: The sum of contiguous subarray [4,-1,2,1] has the largest sum = 6, # and the starting and ending indices of this subarray are 3 and 6, respectively. ``` Constraints: 1. The function should handle both positive and negative numbers. 2. The input list will contain at least one integer. 3. The solution should be efficient to handle large arrays (e.g., 10,000 elements). Write a function that complies with these requirements and returns both the maximum sum and the indices of the starting and ending elements of the subarray.","solution":"def max_subarray_sum(nums): Find the contiguous subarray with the largest sum and return this sum along with the start and end indices. max_sum = current_sum = nums[0] start = end = temp_start = 0 for i in range(1, len(nums)): if current_sum < 0: current_sum = nums[i] temp_start = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return max_sum, start, end"},{"question":"Implement a function that simulates an online bidding system for an auction. It should accept bids from multiple users, ensuring that each bid is higher than the previous one. If a user attempts to place a bid lower than or equal to the current highest bid, the function should reject it and notify the user. The function should return the highest bid at the end of the auction, as well as the name of the highest bidder. Consider edge cases such as two users placing the same highest bid simultaneously and ensure the function handles these appropriately. Additionally, provide a mechanism to end the auction either after a certain number of bids or after a specified time duration.","solution":"import time class OnlineAuction: def __init__(self, max_bids=None, duration=None): Initialize the auction with optional maximum number of bids and duration in seconds. self.bids = [] self.max_bids = max_bids self.end_time = time.time() + duration if duration is not None else None def place_bid(self, user, amount): Place a bid with the user\'s name and the bid amount. Ensure the bid is higher than the current highest bid. if self.end_time is not None and time.time() > self.end_time: return \\"The auction has ended.\\" if self.max_bids is not None and len(self.bids) >= self.max_bids: return \\"The auction has reached the maximum number of bids.\\" if not self.bids or amount > self.bids[-1][1]: self.bids.append((user, amount)) return \\"Bid placed successfully.\\" else: return \\"Bid should be higher than the current highest bid.\\" def end_auction(self): End the auction and return the highest bid and the highest bidder. if not self.bids: return \\"No bids placed\\" highest_bidder, highest_bid = self.bids[-1] return highest_bidder, highest_bid"},{"question":"Implement a function to determine if a given string is a valid palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and case). Use regular expressions to remove any non-alphanumeric characters. Provide a solution in Python and explain its time and space complexity. **Function Signature:** ```python def is_palindrome(s: str) -> bool: pass ``` **Example:** ``` Input: \\"A man, a plan, a canal: Panama\\" Output: True ``` **Explanation:** Ignoring spaces, punctuation, and case, the input string \\"A man, a plan, a canal: Panama\\" is equivalent to \\"amanaplanacanalpanama\\", which is a palindrome. **Constraints:** - The input consists of ASCII characters only. - The maximum length of the input string is 2 * 10^5 characters.","solution":"import re def is_palindrome(s: str) -> bool: Determines if the given string is a valid palindrome. A palindrome reads the same forward and backward, ignoring spaces, punctuation, and case. Args: s: The input string to be checked. Returns: True if the string is a palindrome, False otherwise. # Removing non-alphanumeric characters and converting to lowercase cleaned_string = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Comparing the cleaned string to its reverse return cleaned_string == cleaned_string[::-1]"},{"question":"Design a function in Python that accepts a list of strings which contain a combination of letters and digits in any order (e.g., [\\"a1b2\\", \\"c3d4\\"]). The function should extract all the digits from each string, concatenate them, and then return a list of these concatenated digits as integers. # Example: ```python def extract_digits(strings): # Your code here # Test cases print(extract_digits([\\"a1b2\\", \\"c3d4\\"])) # Output: [12, 34] print(extract_digits([\\"a1\\", \\"b2\\", \\"c3\\"])) # Output: [1, 2, 3] print(extract_digits([\\"a12b\\", \\"34cd\\"])) # Output: [12, 34] ``` # Constraints: - The input list will contain at least one element and at most 100 elements. - Each string in the input list will have a maximum length of 100 characters. - The strings will always contain at least one digit.","solution":"def extract_digits(strings): Function to extract all digits from each string in a list, concatenate them, and return a list of these concatenated digits as integers. :param strings: List of strings containing a combination of letters and digits. :return: List of integers where each integer is formed by concatenating the digits from corresponding string in input list. result = [] for s in strings: digits = \'\'.join(filter(str.isdigit, s)) result.append(int(digits)) return result"},{"question":"The current Python script utilizes nested loops to traverse a predefined 2D matrix `matrix`. The task is to refactor the code so that instead of printing the row and column indices along with the matrix value, the script computes and prints the sum of each row and appends it to a new array called `row_sums`. Here is the provided Python script: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] for i in range(len(matrix)): for j in range(len(matrix[i])): print(f\\"Value at [{i}][{j}] is {matrix[i][j]}\\") ``` Refactor the above code such that it calculates the sum of each row and then stores these sums in a list called `row_sums`, which should be printed at the end. Ensure your solution is both correct and efficient. Also, provide a brief explanation of what changes you made and why they are necessary. You are free to use Python\'s built-in functions to achieve the task.","solution":"def calculate_row_sums(matrix): Calculates the sum of each row in the 2D matrix and stores the sums in a list called row_sums. Args: matrix (list of list of int): The 2D matrix to process Returns: list of int: List containing sums of each row row_sums = [sum(row) for row in matrix] return row_sums # Example usage matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] row_sums = calculate_row_sums(matrix) print(row_sums) # Output should be [6, 15, 24]"},{"question":"Write a Python function called `sorted_squares` that takes a list of integers sorted in non-decreasing order and returns a list of the squares of each number, also sorted in non-decreasing order. For instance, given `[-4, -1, 0, 3, 10]`, the function should return `[0, 1, 9, 16, 100]`. Try to achieve a solution with a time complexity better than O(n^2).","solution":"def sorted_squares(nums): Given an array of integers sorted in non-decreasing order, returns an array of the squares of each number, also sorted in non-decreasing order. n = len(nums) result = [0] * n left, right = 0, n - 1 index = n - 1 while left <= right: if abs(nums[left]) > abs(nums[right]): result[index] = nums[left] ** 2 left += 1 else: result[index] = nums[right] ** 2 right -= 1 index -= 1 return result"},{"question":"Write a function that takes in a list of integers and returns the length of the longest contiguous subarray where all elements have the same value. The function should be efficient in both time and space complexity. Input: A list of integers `nums`. Output: An integer representing the length of the longest contiguous subarray with identical elements. Constraints: - The time complexity should be O(n), where n is the number of elements in the input list. - The space complexity should be O(1). - You may assume that the input list contains at least one element. Example: ```python def longest_contiguous_subarray(nums): # Your code here # Examples print(longest_contiguous_subarray([1, 1, 2, 2, 2, 3, 3])) # Output should be 3 print(longest_contiguous_subarray([4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6])) # Output should be 5 print(longest_contiguous_subarray([1])) # Output should be 1 print(longest_contiguous_subarray([2, 2, 3, 3, 3, 1, 1])) # Output should be 3 ```","solution":"def longest_contiguous_subarray(nums): Returns the length of the longest contiguous subarray with identical elements. if not nums: return 0 max_length = 1 current_length = 1 for i in range(1, len(nums)): if nums[i] == nums[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Create a function that validates a given string to determine if it is a valid identifier in Python. A Python identifier must start with a letter (a-z, A-Z) or an underscore (_), and it can be followed by any number of letters, digits (0-9), or underscores. The function should return `True` if the string is a valid identifier and `False` otherwise. The function should handle edge cases such as an empty string, strings with only numbers, or strings containing invalid characters like spaces or special symbols.","solution":"import re def is_valid_identifier(identifier): Returns True if the given string is a valid Python identifier, False otherwise. A valid identifier must start with a letter (a-z, A-Z) or an underscore (_), and can be followed by letters, digits (0-9), or underscores. if not identifier: return False if re.match(r\'^[a-zA-Z_][a-zA-Z0-9_]*\', identifier): return True return False"},{"question":"Design a Python function that takes a list of integers and returns the ten most frequent elements in descending order of their frequency. If there are ties in frequency, sort the tied elements in ascending order. Your function should have an optimized time complexity and work efficiently for large lists. # Guidelines: 1. Implement a function `top_ten_frequent` that takes in a list of integers. 2. The function should return a list of the ten most frequent elements in descending order of their frequency. 3. If multiple elements have the same frequency, they should be ordered in ascending order. 4. Ensure your code handles large lists efficiently. # Example: ```python def top_ten_frequent(nums): # Your code here # Sample Input print(top_ten_frequent([1, 3, 3, 2, 1, 4, 4, 4, 5, 6, 6, 6, 6, 3, 3, 3, 3, 5, 5, 1])) # Sample Output [3, 6, 1, 4, 5, 2] ```","solution":"from collections import Counter def top_ten_frequent(nums): Returns a list of the ten most frequent elements in descending order of their frequency. Tied elements are ordered in ascending order. if not nums: return [] # Calculate the frequency of each element using Counter frequency = Counter(nums) # Sort items based on frequency (high to low) and then by value (low to high) sorted_freq = sorted(frequency.items(), key=lambda x: (-x[1], x[0])) # Extract the top 10 elements return [item[0] for item in sorted_freq[:10]]"},{"question":"Write a function that takes a list of integers and returns a new list where each integer is replaced with the sum of its own value and the values of its adjacent elements. If an integer is at the start or end of the list, consider the missing adjacent element as zero. Your implementation should handle lists with both positive and negative integers, and preserve the original length of the list. Here\'s a piece of erroneous code for your reference: def sum_adjacent(elements): new_elements = [] for i in range(len(elements)): if i == 0: new_elements.append(elements[i] + elements[i+1]) elif i == len(elements) - 1: new_elements.append(elements[i-1] + elements[i]) else: new_elements.append(elements[i-1] + elements[i] + elements[i+1]) return new_elements Your task is to identify the issues in the given code and modify it so that it correctly implements the required functionality. elements = [1, 2, 3, 4, 5] Expected output: [3, 6, 9, 12, 9]","solution":"def sum_adjacent(elements): Takes a list of integers and returns a new list where each integer is replaced with the sum of its own value and the values of its adjacent elements. if not elements: return [] new_elements = [] for i in range(len(elements)): left = elements[i-1] if i > 0 else 0 right = elements[i+1] if i < len(elements)-1 else 0 new_elements.append(left + elements[i] + right) return new_elements"},{"question":"You are given a list of integers representing the heights of adjacent buildings. The challenge is to compute the maximum difference in heights between any two adjacent buildings in the list. Write a function `max_adjacent_diff` that takes a list of integers `heights` and returns the maximum difference in heights between any two adjacent buildings. For example, if the input list is `[3, 7, 2, 8, 10, 4]`, the function should return `6`, which is the difference between the heights of buildings at positions 2 and 3 (i.e., the difference between `2` and `8`). ```python def max_adjacent_diff(heights): # Your code here # Example heights = [3, 7, 2, 8, 10, 4] print(max_adjacent_diff(heights)) # Output should be 6 ``` # Constraints - The input list will contain at least two buildings. - Heights of the buildings are non-negative integers.","solution":"def max_adjacent_diff(heights): Returns the maximum difference in heights between any two adjacent buildings. return max(abs(heights[i] - heights[i+1]) for i in range(len(heights) - 1))"},{"question":"Given a binary search tree (BST), write a function to find the lowest common ancestor (LCA) of two given nodes in the BST. Assume the BST contains unique values. The lowest common ancestor is defined between two nodes p and q as the lowest node in the BST that has both p and q as descendants (where we allow a node to be a descendant of itself). Your function should efficiently find the LCA, leveraging the properties of BST. Consider edge cases such as when one or both of the nodes do not exist in the tree. Implement your function with a time complexity of O(h), where h is the height of the tree.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def lowest_common_cestor(root, p, q): Function to find the lowest common ancestor (LCA) of two given nodes in a BST. Assumes that both nodes are present in the BST and that their values are unique. :param root: TreeNode, the root of the BST. :param p: int, value of the first node. :param q: int, value of the second node. :return: TreeNode, the LCA of the two nodes. current = root while current: # if both p and q are smaller than current node, LCA is in the left subtree if p < current.val and q < current.val: current = current.left # if both p and q are greater than current node, LCA is in the right subtree elif p > current.val and q > current.val: current = current.right else: # we found the split point, i.e., the LCA node return current return None"},{"question":"Write a function that takes a list of integers and returns a new list with the squares of the even numbers and the cubes of the odd numbers from the original list. The input list may contain positive and negative integers. The order of the elements in the output list should match the order in the input list.","solution":"def transform_numbers(nums): Returns a new list with the squares of the even numbers and the cubes of the odd numbers from the input list. Args: nums (list): A list of integers. Returns: list: A list where even numbers are squared and odd numbers are cubed. return [x**2 if x % 2 == 0 else x**3 for x in nums]"},{"question":"Write a function that takes an integer array and an integer k as input and returns an array of the k most frequent elements. The returned elements must be in ascending order. If there are multiple numbers with the same frequency, the smaller numbers should appear first. For instance, given the array `[1,1,1,2,2,3]` and `k = 2`, the function should return `[1, 2]`. For another example, given the array `[4,4,4,1,1,2,2]` and `k = 1`, the function should return `[4]`. You are required to handle potential exceptions, such as when the input array is empty, or when k is greater than the length of the array.","solution":"from collections import Counter def top_k_frequent_elements(arr, k): Returns an array of the k most frequent elements from the given array. The returned elements must be in ascending order. if not arr: raise ValueError(\\"Input array is empty\\") if k > len(arr): raise ValueError(\\"k cannot be greater than the length of the array\\") frequency = Counter(arr) sorted_elements = sorted(frequency.items(), key=lambda x: (-x[1], x[0])) return [element for element, freq in sorted_elements[:k]]"},{"question":"Write a function to determine the longest substring that contains at most 2 distinct characters. The function should take a single string argument and return the longest such substring. For example: ```python Input: \\"eceba\\" Output: \\"ece\\" Input: \\"ccaabbb\\" Output: \\"aabbb\\" ```","solution":"def longest_substring_with_2_distinct_chars(s): Returns the longest substring that contains at most 2 distinct characters. Args: s (str): Input string Returns: str: The longest substring with at most 2 distinct characters start, max_length, max_substr = 0, 0, \\"\\" char_map = {} for end in range(len(s)): char_map[s[end]] = char_map.get(s[end], 0) + 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 current_length = end - start + 1 if current_length > max_length: max_length = current_length max_substr = s[start:end + 1] return max_substr"},{"question":"Write a Python function named `unique_positive_product` that takes a list of integers as input and returns the product of all the unique positive integers in the list. If there are no positive integers, the function should return 1. To test your understanding, first implement the solution using a standard loop and conditional logic. Then, further validate your grasp by solving the problem using Python\'s built-in functions like `filter`, `map`, and `functools.reduce`.","solution":"from functools import reduce def unique_positive_product(lst): Returns the product of all unique positive integers in the list. If there are no positive integers, returns 1. Parameters: lst (list of int): The input list of integers. Returns: int: The product of unique positive integers. # Using a set to store unique positive integers unique_positives = set(x for x in lst if x > 0) # If there are no positive integers, return 1 if not unique_positives: return 1 # Calculate the product of unique positive integers return reduce(lambda x, y: x * y, unique_positives)"},{"question":"Develop a Python function that determines whether all strings in a given list are palindromes and whether the overall length of the list exceeds a specified value. A palindrome is a word that reads the same backward as forward. ```python def all_palindromes_and_length(lst: list, min_length: int): Returns True if all strings in the list lst are palindromes and the length of the list exceeds min_length. >>> all_palindromes_and_length([\\"madam\\", \\"racecar\\", \\"level\\"], 2) True >>> all_palindromes_and_length([\\"hello\\", \\"world\\"], 1) False >>> all_palindromes_and_length([\\"deified\\", \\"civic\\", \\"radar\\"], 3) False ```","solution":"def all_palindromes_and_length(lst: list, min_length: int) -> bool: Returns True if all strings in the list lst are palindromes and the length of the list exceeds min_length. return all(s == s[::-1] for s in lst) and len(lst) > min_length"},{"question":"<p>Given an array of integers, identify the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p> <p>For example, given the array ([-2,1,-3,4,-1,2,1,-5,4]), the contiguous subarray with the largest sum is ([4,-1,2,1]) because the sum is (6).</p> <p>Write a function that takes an integer array as an input and returns the largest sum among all possible contiguous subarrays.</p> <p><b>NOTE:</b> You may assume the array contains at least one element and the sum can be computed within the range of a 32-bit integer.</p>","solution":"def max_subarray_sum(nums): Returns the largest sum of a contiguous subarray. The function uses Kadane\'s algorithm to find the maximum sum. if not nums: raise ValueError(\\"The input array must contain at least one element.\\") max_end_here = max_so_far = nums[0] for num in nums[1:]: max_end_here = max(num, max_end_here + num) max_so_far = max(max_so_far, max_end_here) return max_so_far"},{"question":"Design a function that takes in a list of integers and returns a dictionary with two keys: \\"even\\" and \\"odd\\". The values corresponding to these keys should be lists containing the even and odd numbers from the input list, respectively. The original order of the numbers should be maintained in the output lists. If there are no even or odd numbers, return an empty list for the respective key. Write a function named `classify_numbers` that implements this functionality.","solution":"def classify_numbers(numbers): Returns a dictionary with two keys: \\"even\\" and \\"odd\\" containing lists of even and odd numbers from the input list, respectively. The original order of the numbers is maintained in the output lists. :param numbers: List of integers :return: Dictionary with keys \\"even\\" and \\"odd\\" result = {\\"even\\": [], \\"odd\\": []} for number in numbers: if number % 2 == 0: result[\\"even\\"].append(number) else: result[\\"odd\\"].append(number) return result"},{"question":"Create a Python function that calculates and returns the sum of all prime numbers below a given integer N. Your function should aim to be efficient even for large values of N, such as N = 10^6. Your function should meet the following requirements: - Use an efficient algorithm to generate prime numbers up to N, such as the Sieve of Eratosthenes. - The function should handle the input validation gracefully, returning an appropriate error message for invalid inputs (e.g., negative numbers or non-integer values). Additionally, provide an example of less optimal code for this problem, and explain why it is less efficient. Describe the potential performance issues and how they could manifest with large inputs.","solution":"def sum_of_primes_below(N): Returns the sum of all prime numbers below a given integer N. :param N: int, the upper limit (exclusive) for the sum of prime numbers. :return: The sum of all prime numbers below N if N is a positive integer, else an error message. if not isinstance(N, int): return \\"Error: Input must be an integer.\\" if N < 2: return \\"Error: Input must be greater than or equal to 2.\\" sieve = [True] * N sieve[0], sieve[1] = False, False # 0 and 1 are not prime numbers for start in range(2, int(N**0.5) + 1): if sieve[start]: for multiple in range(start*start, N, start): sieve[multiple] = False prime_sum = sum(idx for idx, is_prime in enumerate(sieve) if is_prime) return prime_sum"},{"question":"Given an integer n, write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: the first two Fibonacci numbers are 0 and 1, and each subsequent number is the sum of the previous two. For example, the first 10 Fibonacci numbers are: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34. Implement the function in such a way that it performs efficiently for larger values of n. Example input: 10 Example output: 55 Function signature: ```python def nth_fibonacci(n: int) -> int: pass ```","solution":"def nth_fibonacci(n: int) -> int: Returns the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function that takes an array of integers and a target integer as inputs. The function should return all unique pairs of integers from the array that add up to the target. Ensure that each pair is represented as a tuple and that the pairs are sorted in ascending order based on the first element of the tuple. If multiple pairs have the same first element, sort them by the second element. Additionally, the function should not return duplicate pairs where the order of elements within the pair does not matter. # Input - An array of integers `arr`. - An integer `target`. # Output - A list of tuples, where each tuple consists of two integers from the array that add up to the target. # Example ```python def find_pairs(arr, target): # implementation here # Sample input 1 arr = [1, 2, 3, 4, 3] target = 6 # Sample output 1 # [(2, 4), (3, 3)] # Sample input 2 arr = [1, 1, 2, 45, 46, 46] target = 47 # Sample output 2 # [(1, 46), (2, 45)] ``` # Constraints - The function should handle arrays with up to 10^5 elements efficiently. - The input array might contain negative numbers and duplicates. - The returned list should not contain duplicate pairs, considering the order of elements within the pair as irrelevant (i.e., (2, 4) and (4, 2) should be considered the same pair).","solution":"def find_pairs(arr, target): Returns all unique pairs of integers from the array that add up to the target. Each pair is represented as a tuple, and the pairs are sorted in ascending order based on the first element of the tuple. If multiple pairs have the same first element, sort them by the second element. Duplicate pairs are not returned. pairs = set() seen = set() for number in arr: complement = target - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) # Convert set to list and sort tuples return sorted(pairs)"},{"question":"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent on a traditional phone keypad. Return the answer in any order. A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters. ``` 2: \\"abc\\", 3: \\"def\\", 4: \\"ghi\\", 5: \\"jkl\\", 6: \\"mno\\", 7: \\"pqrs\\", 8: \\"tuv\\", 9: \\"wxyz\\" ``` **Example:** ``` Input: digits = \\"23\\" Output: [\\"ad\\",\\"ae\\",\\"af\\",\\"bd\\",\\"be\\",\\"bf\\",\\"cd\\",\\"ce\\",\\"cf\\"] Input: digits = \\"\\" Output: [] Input: digits = \\"2\\" Output: [\\"a\\",\\"b\\",\\"c\\"] ``` **Note:** The length of `digits` is <= 4.","solution":"def letter_combinations(digits): Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent on a traditional phone keypad. if not digits: return [] phone_mapping = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } def backtrack(index, path): if index == len(digits): combinations.append(\\"\\".join(path)) return possible_letters = phone_mapping[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"Write a function that takes a dictionary where the keys are strings representing item names and the values are tuples containing the price and quantity of that item. The function should return the total cost of all items, considering the price and quantity. Ignore any items where the price or quantity is not a valid number.","solution":"def calculate_total_cost(items): Calculate the total cost of all items in the dictionary, multiplying price and quantity. Args: items (dict): A dictionary where keys are item names and values are tuples (price, quantity). Returns: float: Total cost of all items. total_cost = 0.0 for name, (price, quantity) in items.items(): if isinstance(price, (int, float)) and isinstance(quantity, (int, float)): total_cost += price * quantity return total_cost"},{"question":"Write a Python function called `unique_numbers` that takes a list of integers as an argument and returns another list containing only the unique integers from the input list, but in the reverse order of their first appearance. You must achieve this in O(n) time complexity, where n is the length of the input list. Additionally, write a brief explanation of how your algorithm accomplishes this within the time complexity constraint.","solution":"def unique_numbers(nums): Returns a list of unique integers in the reverse order of their first appearance. Args: nums (list): List of integers. Returns: list: List of unique integers. seen = set() unique_list = [] # Traverse the list in reverse order for num in reversed(nums): if num not in seen: seen.add(num) unique_list.append(num) return unique_list"},{"question":"Create a Python function that rotates an NxN matrix 90 degrees clockwise. Your function should take as input a square matrix in the form of a list of lists and output a new matrix that has been rotated. For instance: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] The expected output of rotating this matrix 90 degrees clockwise would be: rotated_matrix = [[7, 4, 1], [8, 5, 2], [9, 6, 3]] Handle the transformation programmatically without using in-built functions for matrix manipulation.","solution":"def rotate_matrix_90_degrees_clockwise(matrix): Rotates an NxN matrix 90 degrees clockwise. Args: matrix (list of lists): The NxN matrix to rotate. Returns: list of lists: The rotated NxN matrix. n = len(matrix) # Create a new matrix with the same dimensions rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n-1-i] = matrix[i][j] return rotated_matrix"},{"question":"Write a Python function that takes two lists of integers as input and returns a list containing the elements that are common to both input lists (i.e., an intersection of the lists). Ensure the elements in the output list are unique and sorted in ascending order. Provide an example usage of the function.","solution":"def intersection(list1, list2): Returns a list containing the unique elements that are common to both input lists sorted in ascending order. common_elements = set(list1).intersection(set(list2)) return sorted(common_elements) # Example usage: # list1 = [1, 2, 3, 4] # list2 = [3, 4, 5, 6] # intersection(list1, list2) -> [3, 4]"},{"question":"Design a Python function that calculates the shortest path in a maze represented by a 2D grid. The function should take as input the maze matrix, the starting coordinates, and the destination coordinates. The cells in the maze can either be walkable (represented by 0) or blocked (represented by 1). The function should return the minimum number of steps required to reach the destination, or -1 if the destination is unreachable. The implementation should employ a breadth-first search (BFS) algorithm to explore the maze.","solution":"from collections import deque def shortest_path_in_maze(maze, start, destination): Returns the minimum number of steps required to reach the destination in the maze, or -1 if the destination is unreachable. :param maze: List[List[int]], 2D list representing the maze (0: walkable, 1: blocked) :param start: Tuple[int, int], starting coordinates (row, col) :param destination: Tuple[int, int], destination coordinates (row, col) :return: int, minimum number of steps or -1 if unreachable if not maze or not maze[0]: # If the maze is empty return -1 rows, cols = len(maze), len(maze[0]) sr, sc = start dr, dc = destination # Check if start or destination is out of bounds or blocked if maze[sr][sc] == 1 or maze[dr][dc] == 1: return -1 # Possible movements: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(sr, sc, 0)]) # stores (current_row, current_col, current_distance) visited = set((sr, sc)) # add starting point to visited while queue: r, c, dist = queue.popleft() # If reached the destination if (r, c) == destination: return dist # Explore neighbors for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and maze[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1 # Return -1 if the destination is unreachable"},{"question":"Design a Python function that takes a list of integers and returns a new list with the cumulative sum of the elements. Each element in the new list should be the sum of the elements up to that index in the original list. nums = [1, 2, 3, 4] Output = [1, 3, 6, 10]","solution":"def cumulative_sum(nums): Returns a new list with the cumulative sum of the elements. Args: nums (list): A list of integers. Returns: list: A list where each element is the cumulative sum of the elements up to that index in the original list. cum_sum = [] current_sum = 0 for num in nums: current_sum += num cum_sum.append(current_sum) return cum_sum"},{"question":"Write a function `find_longest_substring` in Python that takes a string as input and returns the longest substring without repeating characters. If there are multiple substrings with the same maximum length, return the one which appears first. # Example ```python find_longest_substring(\\"abrkaabcdefghijjxxx\\") ``` **Output** ``` \\"abcdefghij\\" ``` # Constraints - The input string will have a length of at most 1000 characters. - The input string will consist of lower and upper case English letters.","solution":"def find_longest_substring(s): Returns the longest substring without repeating characters. If multiple substrings have the same maximum length, returns the one which appears first. start = 0 max_length = 0 max_start = 0 seen = {} for i, char in enumerate(s): if char in seen and seen[char] >= start: start = seen[char] + 1 seen[char] = i if i - start + 1 > max_length: max_length = i - start + 1 max_start = start return s[max_start:max_start + max_length]"},{"question":"Given a list of integers, your task is to find the median of the list. Note that the median is the middle number in a sorted, ascending list of numbers and can be more easily found by sorting the list first. If the list has an odd number of elements, the median is the element in the middle of the list. If the list has an even number of elements, the median is calculated by taking the average of the two middle numbers. Write a Python function that: 1. Takes a list of integers as an input. 2. Returns the median of the list. 3. Handles edge cases such as an empty list. Starting Code: ```python def find_median(numbers): if not numbers: return None numbers.sort() n = len(numbers) if n % 2 == 1: return numbers[n // 2] else: mid1, mid2 = numbers[(n // 2) - 1], numbers[n // 2] return (mid1 + mid2) / 2 # Example usage: numbers = [3, 1, 4, 1, 5, 9, 2] print(find_median(numbers)) # Output should be 3 ``` Ensure the function behaves correctly with various edge cases such as: - An empty list (should return None). - A list with one element. - A list with repeated elements. - Both even and odd number of elements in the list.","solution":"def find_median(numbers): if not numbers: return None numbers.sort() n = len(numbers) if n % 2 == 1: return numbers[n // 2] else: mid1, mid2 = numbers[(n // 2) - 1], numbers[n // 2] return (mid1 + mid2) / 2"},{"question":"Describe how hash functions are used in a hash table data structure and discuss the role of collision resolution strategies in maintaining the efficiency of hash table operations.","solution":"class HashTable: def __init__(self, size=1024): self.size = size self.table = [[] for _ in range(size)] def _hash(self, key): return hash(key) % self.size def set(self, key, value): index = self._hash(key) for item in self.table[index]: if item[0] == key: item[1] = value return self.table[index].append([key, value]) def get(self, key): index = self._hash(key) for item in self.table[index]: if item[0] == key: return item[1] return None def delete(self, key): index = self._hash(key) for i, item in enumerate(self.table[index]): if item[0] == key: del self.table[index][i] return True return False"},{"question":"Write a function that takes a string containing alphabets and numbers, and returns the string with the characters sorted such that all alphabets appear in descending order followed by all numbers in ascending order. Special characters should be ignored.","solution":"def sort_string(s): Sorts a given string such that all alphabets appear in descending order followed by all numbers in ascending order. Special characters are ignored. alphabets = sorted([char for char in s if char.isalpha()], reverse=True) numbers = sorted([char for char in s if char.isdigit()]) return \'\'.join(alphabets + numbers)"},{"question":"Create a function that, given a list of integers, returns a new list containing only the elements that are prime numbers and removes any duplicate prime numbers that might exist in the original list. Example input: [11, 4, 5, 17, 11, 18, 5, 23] Example output: [11, 5, 17, 23]","solution":"def is_prime(n): Checks if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def filter_unique_primes(nums): Returns a list of unique prime numbers from the given list of integers. primes = set() for num in nums: if is_prime(num): primes.add(num) return sorted(primes)"},{"question":"**Most Frequent Even Element in Array** Description: Given an integer array, your task is to find the most frequent even number in the array. If there are multiple even numbers with the same highest frequency, return the smallest one among them. If there are no even numbers in the array, return -1. Write a function that takes the array as input and returns the most frequent even number along with its frequency. Example 1: Input: arr = [1, 2, 2, 3, 3, 4, 4, 4, 6] Output: 4, Frequency: 3 Example 2: Input: arr = [1, 3, 5, 7] Output: -1, Frequency: 0 Example 3: Input: arr = [8, 8, 8, 6, 6, 6, 4] Output: 6, Frequency: 3 Constraints: `1 <= arr.length <= 10^5` `-10^6 <= arr[i] <= 10^6`","solution":"def most_frequent_even(arr): Returns the most frequent even number in the array along with its frequency. If there are no even numbers, returns (-1, 0). from collections import Counter even_count = Counter(num for num in arr if num % 2 == 0) if not even_count: return -1, 0 # Find the even number with the highest frequency most_frequent = max(even_count.items(), key=lambda x: (x[1], -x[0])) return most_frequent[0], most_frequent[1]"},{"question":"Write a function that, given an integer `n`, returns the nth Fibonacci number. The function should be efficient for large values of `n` (up to 10^4) and should use dynamic programming or matrix exponentiation to ensure optimal performance. Avoid using simple recursion due to its exponential time complexity. The Fibonacci sequence is defined as follows: `F(0) = 0`, `F(1) = 1`, and `F(n) = F(n-1) + F(n-2)` for `n >= 2`.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 # Using dynamic programming to store previous Fibonacci numbers fib = [0] * (n + 1) fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Implement a program to determine if a given binary tree is balanced. A balanced binary tree is defined as a tree where the depth of all leaf nodes or all nodes with one child differs by no more than one. The program should return a boolean value indicating whether the tree is balanced or not. Additionally, the function should handle edge cases such as an empty tree or trees with a single node. Functions you should implement: 1. `is_balanced(node)` - Returns `True` if the tree rooted at `node` is balanced, `False` otherwise. 2. Helper functions as needed to calculate the depths and perform necessary tree manipulations.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_balanced(root): Determine if a binary tree is balanced. A balanced binary tree is defined as a tree where the depth of all leaf nodes or all nodes with one child differs by no more than one. def check_balance(node): if not node: return 0, True left_depth, left_balanced = check_balance(node.left) right_depth, right_balanced = check_balance(node.right) if not left_balanced or not right_balanced: return max(left_depth, right_depth) + 1, False if abs(left_depth - right_depth) > 1: return max(left_depth, right_depth) + 1, False return max(left_depth, right_depth) + 1, True _, is_bal = check_balance(root) return is_bal"},{"question":"Write a function that takes a list of integers and checks whether the list contains any triplets (three numbers) that sum to zero. The function should return a list of all unique triplets in ascending order. Your solution must avoid using extra space for storing seen triplets.","solution":"def find_triplets(nums): Returns a list of all unique triplets in the list that sum to zero. nums.sort() triplets = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: sum_triplet = nums[i] + nums[left] + nums[right] if sum_triplet == 0: triplets.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif sum_triplet < 0: left += 1 else: right -= 1 return triplets"},{"question":"Write a function `reverse_words` that takes a string `s` as input and returns a string in which the words of `s` are reversed but their relative order remains the same. For example, given the input string \\"hello world\\", the output should be \\"world hello\\". You can assume that `s` contains only letters and spaces, and there is exactly one space between each pair of consecutive words. Do not use built-in reverse functions directly. ```python def reverse_words(s): # Your code here # Example Usage s = \\"the sky is blue\\" print(reverse_words(s)) # Output: \\"blue is sky the\\" ```","solution":"def reverse_words(s): Reverses the words in the input string s. Parameters: s (str): Input string containing words separated by a single space. Returns: str: A string with the words of s reversed in their order. words = s.split() reversed_words = [] for word in words: reversed_words.insert(0, word) return \' \'.join(reversed_words)"},{"question":"Write a function `balance_parentheses(s)` that accepts a string `s` consisting of only parentheses characters (\'(\' and \')\'). The function should return `True` if the parentheses in `s` are balanced and nested correctly according to the following conditions: 1. Every opening parenthesis \'(\' must have a corresponding closing parenthesis \')\'. 2. A closing parenthesis \')\' cannot appear before its matching opening parenthesis \'(\'. 3. Parentheses must be correctly nested (e.g., \'(()())\' is valid while \'())(\' is not). You need to ensure the function handles edge cases efficiently and can process long strings with numerous parentheses. Example: ```python balance_parentheses(\\"()\\") ➞ True balance_parentheses(\\"(())\\") ➞ True balance_parentheses(\\")\\") ➞ False balance_parentheses(\\"(()\\") ➞ False balance_parentheses(\\"((())())\\") ➞ True balance_parentheses(\\"(()))(\\") ➞ False ```","solution":"def balance_parentheses(s): Returns True if the parentheses in the string s are balanced and correctly nested. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if stack: stack.pop() else: return False return len(stack) == 0"},{"question":"Design a function that identifies and returns the longest word in a given string. If there are multiple words of the same length, return the first one. Consider the input string: \\"The quick brown fox jumped over the lazy dog\\".","solution":"def longest_word(sentence): Identifies and returns the longest word in a given string. If there are multiple words of the same length, returns the first one. Parameters: - sentence: str : input string Returns: - str : the longest word in the input string words = sentence.split() longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"Write a function to find the longest subsequence of consecutive integers in an unsorted array of integers. The subsequence does not need to be contiguous in the original array. Example: Input: [4, 2, 1, 6, 5] Output: [4, 5, 6]","solution":"def longest_consecutive_subsequence(arr): Finds the longest subsequence of consecutive integers in an unsorted array. Args: arr: List[int] - The input array of integers Returns: List[int] - The longest subsequence of consecutive integers if not arr: return [] arr = list(set(arr)) arr.sort() longest = [] current = [arr[0]] for i in range(1, len(arr)): if arr[i] == arr[i-1] + 1: current.append(arr[i]) else: if len(current) > len(longest): longest = current current = [arr[i]] if len(current) > len(longest): longest = current return longest"},{"question":"Write a Python function that takes a list of integers as input and returns a new list with the integers rearranged so that all the odd numbers appear before all the even numbers. The order of the odd and even numbers within their respective groups should be preserved from the original list.","solution":"def rearrange_odds_first(nums): Rearranges the list so that all odd numbers come before all even numbers, preserving the relative order within odd and even numbers. odds = [num for num in nums if num % 2 != 0] evens = [num for num in nums if num % 2 == 0] return odds + evens"},{"question":"Given a string s and a list of words words, write a function that returns all starting indices of substring(s) in s that is a concatenation of each word in words exactly once without any intervening characters. Implement the function according to the following signature: ```python def find_substring(s, words): This function identifies the starting indices of substrings in \'s\' that are concatenations of all the words in the list \'words\' without any intervening characters. Words are concatenated in any order and each word from the list \'words\' appears exactly once in a concatenated substring. Parameters: s (str): The input string. words (list of str): List of words to form the concatenated substring. Returns: list of int: A list of starting indices of all concatenated substrings. Examples: find_substring(\'barfoothefoobarman\', [\'foo\', \'bar\']) = [0, 9] find_substring(\'wordgoodgoodgoodbestword\', [\'word\', \'good\', \'best\', \'word\']) = [] ```","solution":"def find_substring(s, words): from collections import Counter if not s or not words: return [] word_len = len(words[0]) # All words are assumed to be of the same length num_words = len(words) substring_len = word_len * num_words word_count = Counter(words) result = [] for i in range(len(s) - substring_len + 1): seen = Counter() for j in range(num_words): word_index = i + j * word_len word = s[word_index:word_index + word_len] if word in word_count: seen[word] += 1 if seen[word] > word_count[word]: break else: break if seen == word_count: result.append(i) return result"},{"question":"Write a function that, given a linked list and a value, removes all the instances of that value in the list. Represent the linked list with the following structure: class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def removeElements(head, val): Removes all instances of val from the linked list. :param head: ListNode, the head of the linked list :param val: int, the value to remove :return: ListNode, the head of the modified linked list dummy = ListNode(next=head) current = dummy while current.next: if current.next.val == val: current.next = current.next.next else: current = current.next return dummy.next"},{"question":"Import the numpy and pandas libraries in Python. Create a pandas dataframe with two columns: \'date\' and \'count\', where \'date\' contains the dates from January 1st, 2023 to January 31st, 2023, and \'count\' contains random integer values between 50 and 150. Generate a line plot using matplotlib.pyplot, with \'date\' as the x-axis and \'count\' as the y-axis. Set the title of the plot to \'Daily Counts for January 2023\' and ensure the dates on the x-axis are formatted as \'YYYY-MM-DD\'.","solution":"import numpy as np import pandas as pd import matplotlib.pyplot as plt def generate_dataframe_and_plot(): # Generate a date range from January 1st, 2023 to January 31st, 2023 date_range = pd.date_range(start=\'2023-01-01\', end=\'2023-01-31\') # Generate random integer values between 50 and 150 np.random.seed(0) # For reproducibility count_values = np.random.randint(50, 151, size=len(date_range)) # Create the dataframe df = pd.DataFrame({\'date\': date_range, \'count\': count_values}) # Create the plot plt.figure(figsize=(10, 5)) plt.plot(df[\'date\'], df[\'count\'], marker=\'o\') # Set the title and labels plt.title(\'Daily Counts for January 2023\') plt.xlabel(\'Date\') plt.ylabel(\'Count\') # Format the x-axis dates plt.gca().xaxis.set_major_formatter(plt.FixedFormatter(date_range.strftime(\'%Y-%m-%d\'))) plt.xticks(rotation=45, ha=\'right\') # Display the plot plt.tight_layout() plt.show() return df"},{"question":"Write a function that identifies and returns all possible anagrams of a given string from a predefined list of candidate strings. An anagram is a word formed by rearranging the letters of another word using all the original letters exactly once. Ensure that the function is efficient and can handle large lists of candidate strings. Additionally, provide an explanation of the algorithm\'s time and space complexity. # Example ```python def find_anagrams(word, candidates): # implementation here # Example usage: candidates = [\\"enlist\\", \\"google\\", \\"inlets\\", \\"banana\\"] word = \\"listen\\" print(find_anagrams(word, candidates)) # Output: [\\"enlist\\", \\"inlets\\"] ``` # Constraints - The input word and each candidate string will have a length between 1 and 100. - The list of candidate strings will have a length between 1 and 10,000. # Time and Space Complexity Discuss the expected time and space complexity of your solution.","solution":"def find_anagrams(word, candidates): Identifies and returns all possible anagrams of the given word from a list of candidates. :param word: The word to find anagrams for. :param candidates: A list of candidate strings. :return: A list of anagrams of the word. word_sorted = sorted(word) anagrams = [candidate for candidate in candidates if sorted(candidate) == word_sorted] return anagrams # Example usage: candidates = [\\"enlist\\", \\"google\\", \\"inlets\\", \\"banana\\"] word = \\"listen\\" print(find_anagrams(word, candidates)) # Output: [\\"enlist\\", \\"inlets\\"]"},{"question":"Implement a function in Python that takes a list of integers and returns a new list containing only the prime numbers from the original list. Do not use any built-in functions that directly check for prime numbers. Instead, write your own logic to determine if a number is prime. # Example Input: ``` [2, 3, 4, 5, 6, 7, 8, 9, 10] ``` Output: ``` [2, 3, 5, 7] ``` # Explanation - 2, 3, 5, and 7 are prime numbers. - 4, 6, 8, 9, and 10 are not prime numbers. # Constraints - The input list will contain at least one integer. - The input list will contain only positive integers.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False i = 3 while i * i <= n: if n % i == 0: return False i += 2 return True def filter_primes(numbers): Returns a list of prime numbers from the given list `numbers`. return [num for num in numbers if is_prime(num)]"},{"question":"You are tasked with developing a function to check if two strings are anagrams of each other. An anagram is defined as a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once. The function should take two strings as input and return a boolean value indicating whether the strings are anagrams. Your implementation should be case insensitive and ignore spaces and punctuation. Consider the following example inputs and outputs for clarification: Input: \\"Listen\\", \\"Silent\\" Output: True Input: \\"The Eyes\\", \\"They see!\\" Output: True Input: \\"Hello\\", \\"Olelh!\\" Output: True Input: \\"Hello\\", \\"World\\" Output: False","solution":"import string def is_anagram(str1, str2): Checks if two strings are anagrams of each other, ignoring case, spaces, and punctuation. # Function to clean and normalize the strings def clean_string(s): # Remove spaces and punctuation, and convert to lower case return \'\'.join(filter(str.isalnum, s)).lower() # Clean and sort both strings cleaned_str1 = clean_string(str1) cleaned_str2 = clean_string(str2) return sorted(cleaned_str1) == sorted(cleaned_str2)"},{"question":"Design a Python function that takes in a list of strings representing full names (first and last name) and returns a dictionary with the first names as keys and lists of corresponding last names as values. Example input: [\\"John Smith\\", \\"Jane Doe\\", \\"John Doe\\", \\"Anna Smith\\"] Example output: { \\"John\\": [\\"Smith\\", \\"Doe\\"], \\"Jane\\": [\\"Doe\\"], \\"Anna\\": [\\"Smith\\"] } Ensure that the function handles cases where: - There are duplicate first or last names. - The input list is empty. - Names are provided in various formats (all lowercase, all uppercase, mixed case).","solution":"def names_to_dict(names): Converts a list of full names into a dictionary with first names as keys and lists of last names as values. Args: names (list of str): List of full names (first and last name). Returns: dict: Dictionary with first names as keys and lists of corresponding last names as values. name_dict = {} for full_name in names: parts = full_name.split() if len(parts) == 2: first, last = parts # Capitalize the first letter of each name part and make other letters lowercase first = first.capitalize() last = last.capitalize() if first in name_dict: name_dict[first].append(last) else: name_dict[first] = [last] return name_dict"},{"question":"Design a function that evaluates arithmetic expressions given in Reverse Polish Notation (RPN). The function should take a list where each element is either an operand (integer) or an operator (+, -, *, /), and return the result of the expression. In Reverse Polish Notation: - Operands (numbers) are pushed onto a stack. - Operators (+, -, *, /) pop the last two operands from the stack, apply the operator, and push the result back onto the stack. The function signature should be: ```python def evaluate_rpn(expression: List[Union[int, str]]) -> int: pass ``` **Constraints:** 1. The input list will always be a valid RPN expression. 2. Division should truncate towards zero (use integer division). **Example:** 1. evaluate_rpn([2, 1, \'+\', 3, \'*\']) returns 9 because (2 + 1) * 3 = 9 2. evaluate_rpn([4, 13, 5, \'/\', \'+\']) returns 6 because 4 + (13 // 5) = 6 3. evaluate_rpn([10, 6, 9, 3, \'+\', -11, \'*\', \'/\', \'*\', 17, \'+\', 5, \'+\']) returns 22 because (((10 * (6 / ((9 + 3) * -11))) + 17) + 5) = 22","solution":"from typing import List, Union def evaluate_rpn(expression: List[Union[int, str]]) -> int: stack = [] for token in expression: if isinstance(token, int): stack.append(token) else: b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(int(a / b)) # int to truncate towards zero return stack[0]"},{"question":"Create a function that takes a string representing a mathematical expression and evaluates it. The expression will include positive integers, operators `+`, `-`, `*`, `/`, and parentheses `()`. Ensure the function handles operator precedence and parentheses correctly. ```python def evaluate_expression(expression: str) -> int: Given a string representing a mathematical expression, evaluate and return the result as an integer. The expression will include positive integers and may contain the following operators: - Addition: + - Subtraction: - - Multiplication: * - Division: / - Parentheses: () The function should handle operator precedence and parentheses correctly. >>> evaluate_expression(\\"3 + 2 * 2\\") 7 >>> evaluate_expression(\\" 3/2 \\") 1 >>> evaluate_expression(\\" (1+(4+5+2)-3)+(6+8) \\") 23 ```","solution":"def evaluate_expression(expression: str) -> int: Given a string representing a mathematical expression, evaluate and return the result as an integer. The expression will include positive integers and may contain the following operators: - Addition: + - Subtraction: - - Multiplication: * - Division: / - Parentheses: () The function should handle operator precedence and parentheses correctly. >>> evaluate_expression(\\"3 + 2 * 2\\") 7 >>> evaluate_expression(\\"3/2\\") 1 >>> evaluate_expression(\\"(1+(4+5+2)-3)+(6+8)\\") 23 def operation(op: str, second: int, first: int) -> int: if op == \'+\': return first + second elif op == \'-\': return first - second elif op == \'*\': return first * second elif op == \'/\': return int(first / second) # Using int() for floor division def precedence(op: str) -> int: if op in (\'+\', \'-\'): return 1 elif op in (\'*\', \'/\'): return 2 return 0 def apply_operations(operators, values): operator = operators.pop() second = values.pop() first = values.pop() values.append(operation(operator, second, first)) operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while operators and operators[-1] != \'(\': apply_operations(operators, values) operators.pop() else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operations(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operations(operators, values) return values[-1]"},{"question":"In a given list of integers, employ a function to determine the largest product that can be obtained from any three contiguous elements. Write a function `max_contiguous_product(arr)` that takes a list `arr` of integers as input and returns the maximum product of any three consecutive integers. Handle edge cases where the length of the array is less than three, by returning `None`.","solution":"def max_contiguous_product(arr): Returns the maximum product of any three consecutive integers in the list. If the list has fewer than three elements, returns None. if len(arr) < 3: return None max_product = float(\'-inf\') for i in range(len(arr) - 2): product = arr[i] * arr[i + 1] * arr[i + 2] if product > max_product: max_product = product return max_product"},{"question":"Define a function `most_frequent(List[int]) -> int` that takes a list of integers and returns the most frequent element in the list. If there are multiple elements with the same highest frequency, return the smallest element among them. # Example: **Input:** ```python most_frequent([1, 3, 1, 3, 2, 1]) ``` **Output:** ```python 1 ``` **Input:** ```python most_frequent([3, 3, 1, 3, 2, 1]) ``` **Output:** ```python 3 ``` **Input:** ```python most_frequent([1, 1, 2, 2]) ``` **Output:** ```python 1 ```","solution":"from typing import List from collections import Counter def most_frequent(lst: List[int]) -> int: Returns the most frequent element in the list. If there are multiple elements with the same highest frequency, returns the smallest element among them. if not lst: raise ValueError(\\"The list must not be empty\\") frequency = Counter(lst) max_freq = max(frequency.values()) most_frequent_elements = [key for key, val in frequency.items() if val == max_freq] return min(most_frequent_elements)"},{"question":"Create a Python function called `group_anagrams` that takes a list of strings and groups anagrams together, case-insensitively. The function should return a list of lists, where each sublist contains anagrams. The groups can be in any order. ```python # Input example: input_list = [\\"Listen\\", \\"Silent\\", \\"enlist\\", \\"rat\\", \\"tar\\", \\"god\\", \\"Dog\\"] # Expected output: # [ # [\\"Listen\\", \\"Silent\\", \\"enlist\\"], # [\\"rat\\", \\"tar\\"], # [\\"god\\", \\"Dog\\"] # ] ``` Your function should use efficient data structures to achieve the grouping and be case-insensitive when considering whether words are anagrams of each other. The output format (the order of the groups and the order of words in each group) does not matter.","solution":"def group_anagrams(words): Groups anagrams together from the provided list of strings, case-insensitively. :param words: List of strings to be grouped as anagrams. :return: List of lists containing grouped anagrams. from collections import defaultdict anagram_map = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word.lower())) anagram_map[sorted_word].append(word) return list(anagram_map.values())"},{"question":"Devise a function that finds the longest common substring shared by two given strings. The function should return both the substring and its starting index in each original string. If there are multiple longest common substrings of the same length, return any one of them. input_string1 = \'abcdef\' input_string2 = \'zabcy\'","solution":"def longest_common_substring(s1, s2): Finds the longest common substring shared by two given strings. Parameters: s1 (str): The first input string. s2 (str): The second input string. Returns: tuple: A tuple containing the longest common substring and its starting indices in the original strings. (substring, start_index_in_s1, start_index_in_s2) len_s1, len_s2 = len(s1), len(s2) max_len = 0 ending_index_s1 = 0 dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)] for i in range(1, len_s1 + 1): for j in range(1, len_s2 + 1): if s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 if dp[i][j] > max_len: max_len = dp[i][j] ending_index_s1 = i if max_len == 0: return \\"\\", -1, -1 start_index_s1 = ending_index_s1 - max_len common_substring = s1[start_index_s1:ending_index_s1] start_index_s2 = s2.index(common_substring) return common_substring, start_index_s1, start_index_s2"},{"question":"Write a Python function `find_max_unique_substring` that accepts a single string as an input and returns the longest substring without repeating characters. Your function should be efficient enough to handle long strings and consider all edge cases such as an empty string or all characters being unique. Additionally, implement a function `min_window_substring` that takes two strings, `s` and `t`, and returns the minimum window in `s` which contains all the characters of `t`. If there is no such window in `s` that covers all characters in `t`, return an empty string. Your solution should optimize the time complexity, possibly using sliding window and hashing techniques. ```python def find_max_unique_substring(s: str) -> str: Returns the longest substring without repeating characters. def min_window_substring(s: str, t: str) -> str: Returns the minimum window in `s` which contains all characters in `t`. If no such window exists, returns empty string. ``` Your solutions should be efficient and handle large input sizes gracefully. Consider edge cases and ensure your implementations are robust and fault-tolerant.","solution":"def find_max_unique_substring(s: str) -> str: Returns the longest substring without repeating characters. start = 0 max_length = 0 max_substring = \\"\\" char_index_map = {} for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end if end - start + 1 > max_length: max_length = end - start + 1 max_substring = s[start:end+1] return max_substring def min_window_substring(s: str, t: str) -> str: Returns the minimum window in `s` which contains all characters in `t`. If no such window exists, returns empty string. if not t or not s: return \\"\\" dict_t = {} for char in t: dict_t[char] = dict_t.get(char, 0) + 1 required = len(dict_t) formed = 0 l, r = 0, 0 window_counts = {} ans = float(\\"inf\\"), None, None while r < len(s): char = s[r] window_counts[char] = window_counts.get(char, 0) + 1 if char in dict_t and window_counts[char] == dict_t[char]: formed += 1 while l <= r and formed == required: char = s[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[char] -= 1 if char in dict_t and window_counts[char] < dict_t[char]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else s[ans[1]: ans[2] + 1]"},{"question":"Write a function in Python that receives a list of strings and returns a new list with the strings reversed and in uppercase if the original string length is greater than 4. If the string length is 4 or less, return the string unchanged. Implement error handling to manage non-string inputs in the list gracefully.","solution":"def process_strings(strings): This function receives a list of strings and returns a new list with the strings reversed and in uppercase if the original string length is greater than 4. If the string length is 4 or less, the string is returned unchanged. Non-string inputs are ignored. :param strings: List of strings :return: New list with processed strings result = [] for s in strings: if isinstance(s, str): if len(s) > 4: result.append(s[::-1].upper()) else: result.append(s) else: result.append(s) return result"},{"question":"Write a function that simulates the path of a robot given a sequence of movements. The robot can move forward, backward, left, or right within a 2D grid starting from the origin (0,0). However, every move it makes also decrements a battery level, starting from a specified amount. If the battery runs out, the robot stops moving. Implement the function to return the final position of the robot after executing its moves and the remaining battery level. The moves are represented by a string consisting of the characters \'F\' (forward), \'B\' (backward), \'L\' (left), and \'R\' (right). Each character in the string corresponds to one move, and each move decrements the battery by 1. The robot\'s speed is constant and each move changes its position by 1 unit in the respective direction. Example: - \\"F\\" moves the robot from (x, y) to (x, y+1) - \\"B\\" moves the robot from (x, y) to (x, y-1) - \\"L\\" moves the robot from (x, y) to (x-1, y) - \\"R\\" moves the robot from (x, y) to (x+1, y) Implement the function `robot_path` which takes the sequence of moves and the initial battery level as input and returns the final position of the robot and the remaining battery level. ```python def robot_path(moves: str, battery: int) -> (int, int, int): ```","solution":"def robot_path(moves: str, battery: int) -> (int, int, int): Simulates the path of a robot given a sequence of movements and an initial battery level. Parameters: moves (str): A string of characters in \'F\', \'B\', \'L\', \'R\' representing the movements. battery (int): The initial battery level of the robot. Returns: (int, int, int): A tuple containing the final x and y coordinates and the remaining battery level. x, y = 0, 0 # Starting position is (0,0) for move in moves: if battery <= 0: break if move == \'F\': y += 1 elif move == \'B\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 battery -= 1 return x, y, battery"},{"question":"Write a function that takes a list of integers as input and returns a list containing only the prime numbers from the input list. The function should handle both positive and negative numbers, and zero. For example, for the input [-3, 2, 4, 5, 8, -11, 13, 0], the output should be [2, 5, 13].","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def filter_primes(numbers): Returns a list of prime numbers from the given list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"You are developing a library management system and are tasked with creating a feature that sorts a list of books. Each book is an instance of the `Book` class, which has the following attributes: \'title\', \'author\', \'publication_year\', and \'copies_sold\'. Your task is to sort this list of books. Firstly, sort the entire list according to the \'publication_year\' in ascending order. If two or more books share the same publication year, further sort them by \'author\' name in alphabetical order. If there are still ties, sort them by the \'copies_sold\' in descending order. Additionally, for more complexity, you are provided with the following erroneous piece of code which does not return the required output. Use this as a reference point and debug/modify the program to get the correct output. ```python class Book: def __init__(self, title, author, publication_year, copies_sold): self.title = title self.author = author self.publication_year = publication_year self.copies_sold = copies_sold books = [ Book(\'The Road\', \'Cormac McCarthy\', 2006, 3000), Book(\'No Country for Old Men\', \'Cormac McCarthy\', 2005, 2500), Book(\'The Road\', \'Cormac McCarthy\', 2006, 1500), Book(\'1984\', \'George Orwell\', 1949, 5000), Book(\'Brave New World\', \'Aldous Huxley\', 1932, 3700), ] def sort_books(books): return sorted(books, key=lambda x: (x.publication_year, x.author, x.copies_sold)) print(sort_books(books)) ``` Ensure you print the sorted list in the required format to validate your solution.","solution":"class Book: def __init__(self, title, author, publication_year, copies_sold): self.title = title self.author = author self.publication_year = publication_year self.copies_sold = copies_sold def __repr__(self): return f\\"Book({self.title}, {self.author}, {self.publication_year}, {self.copies_sold})\\" def sort_books(books): return sorted(books, key=lambda x: (x.publication_year, x.author, -x.copies_sold)) # Sample books list provided in the problematic code books = [ Book(\'The Road\', \'Cormac McCarthy\', 2006, 3000), Book(\'No Country for Old Men\', \'Cormac McCarthy\', 2005, 2500), Book(\'The Road\', \'Cormac McCarthy\', 2006, 1500), Book(\'1984\', \'George Orwell\', 1949, 5000), Book(\'Brave New World\', \'Aldous Huxley\', 1932, 3700), ] # Printing the sorted list of books to validate sorted_books = sort_books(books) for book in sorted_books: print(book)"},{"question":"Create a function that takes a list of strings representing dates in \\"DD-MM-YYYY\\" format and returns a list of strings representing these dates in \\"YYYYMMDD\\" format. You should validate the input data to ensure the dates are in the correct format. Ignore any dates that do not fit the correct format, and proceed with converting the valid ones. ```python def reformat_dates(date_list): pass # Example input: [\\"23-04-2021\\", \\"15-08-1947\\", \\"01-01-2020\\", \\"10-12-202\\"] # Example output: [\\"20210423\\", \\"19470815\\", \\"20200101\\"] ```","solution":"import re def reformat_dates(date_list): Given a list of dates in \\"DD-MM-YYYY\\" format, returns a list of dates in \\"YYYYMMDD\\" format, ignoring invalid dates. valid_dates = [] date_pattern = re.compile(r\\"^d{2}-d{2}-d{4}\\") for date in date_list: if date_pattern.match(date): day, month, year = date.split(\'-\') valid_dates.append(f\\"{year}{month}{day}\\") return valid_dates"},{"question":"Create a function that takes in a string representing a mathematical expression and returns the evaluated result as a floating-point number. The input expression will contain integers, decimal numbers, and the basic arithmetic operators (+, -, *, /). Ensure the function handles operator precedence and supports parentheses for grouping operations. If the input string is empty or invalid, return None.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression passed as a string and returns the result as a float. The function handles operator precedence and parentheses for grouping operations. Returns None for empty or invalid expressions. if not expression: return None try: result = eval(expression) return float(result) except (SyntaxError, NameError, TypeError, ZeroDivisionError): return None"},{"question":"Implement a function called `remove_kth_last` that removes the k-th last element from a singly linked list in a single pass. The linked list is defined by a given Node class. The function should have the following signature: ```python class Node: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_kth_last(head: Node, k: int) -> Node: Removes the k-th last element from a singly linked list. ``` # Constraints 1. The length of the list is `n`, where `n >= k`. 2. `1 <= k <= n` # Example Given the linked list `1 -> 2 -> 3 -> 4 -> 5`: ```python head = Node(1, Node(2, Node(3, Node(4, Node(5))))) k = 2 # After calling remove_kth_last(head, k), the linked list should be: # 1 -> 2 -> 3 -> 5 ``` The 2nd last element `4` is removed from the list. # Additional Requirement Your solution should only traverse the list once.","solution":"class Node: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_kth_last(head: Node, k: int) -> Node: Removes the k-th last element from a singly linked list. dummy = Node(0) dummy.next = head first, second = dummy, dummy # Move the first pointer so that there is a gap of k between first and second for _ in range(k + 1): first = first.next # Move both pointers until first reaches the end of the list while first: first = first.next second = second.next # Now second points to the (k+1)-th last node, i.e., the node before the node to be removed second.next = second.next.next if second.next else None return dummy.next"},{"question":"Given a string containing alphabetic characters, design a function to determine the length of the longest substring that can be rearranged to form a palindrome. A palindrome is a sequence that reads the same backward as forward. Characters in a substring can be rearranged in any order, and each character in the input string should be considered case-insensitively. def longest_palindromic_substring_length(s): \'\'\' Examples: longest_palindromic_substring_length(\'abccccdd\') == 7 longest_palindromic_substring_length(\'aabb\') == 4 longest_palindromic_substring_length(\'racecar\') == 7 longest_palindromic_substring_length(\'abcdef\') == 1 \'\'\'","solution":"def longest_palindromic_substring_length(s): from collections import Counter # Convert string to lowercase to handle case insensitivity s = s.lower() # Count the frequency of each character char_count = Counter(s) length = 0 odd_found = False # Calculate the length of the longest palindromic substring for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True # If we found at least one character with an odd count, we can put one # of those in the center of the palindrome to maximize the length if odd_found: length += 1 return length"},{"question":"Write a function to calculate the median of a list of numbers. The median is the middle number in a sorted list of numbers. If the list has an odd number of elements, the median is the middle one. If it has an even number of elements, the median is the average of the two middle numbers. Your function should handle lists with integer and floating-point numbers. If the input list is empty, the function should return an appropriate error message. def median(numbers: List[Union[int, float]]) -> Union[float, str]: This function calculates the median of a list of numbers. - The median is the middle number in a sorted list. If the list has an odd number of elements, the median is the middle one. If it has an even number of elements, the median is the average of the two middle numbers. - The function should handle lists with both integers and floating-point numbers. - If the input list is empty, the function should return \'Error: List is empty.\' >>> median([3, 1, 4, 2, 5]) 3 >>> median([1, 2, 3, 4, 5, 6]) 3.5 >>> median([7.5, 3.2, 5.6, 2.1]) 4.4 >>> median([]) \'Error: List is empty.\' # Write your implementation here.","solution":"def median(numbers): This function calculates the median of a list of numbers. - The median is the middle number in a sorted list. If the list has an odd number of elements, the median is the middle one. If it has an even number of elements, the median is the average of the two middle numbers. - The function should handle lists with both integers and floating-point numbers. - If the input list is empty, the function should return \'Error: List is empty.\' Parameters: numbers (list of int/float): The list of numbers to find the median of. Returns: float or str: The median of the list of numbers, or an error message if the list is empty. if not numbers: return \'Error: List is empty.\' sorted_numbers = sorted(numbers) n = len(sorted_numbers) mid = n // 2 if n % 2 == 1: return sorted_numbers[mid] else: return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2"},{"question":"Write a function that takes a list of mixed integers and strings, filters out all string elements that do not represent integers, and then returns the product of the remaining integers. If the list consists entirely of non-integer strings, the function should return 1 as the default product value. For example, given the list `[2, \\"3\\", \\"apple\\", 5, \\"10b\\", \\"7\\"]`, your function should filter out `\\"apple\\"` and `\\"10b\\"`, and then compute the product as `2 * 3 * 5 * 7`, which equals `210`. A naive approach without proper error handling would resemble: ```python def faulty_filter_and_multiply(mixed_list: list): product = 1 for item in mixed_list: product *= int(item) # This line will throw an error if item cannot be converted to integer return product ``` Observe the lack of checks and exception handling that would cause this function to fail with input containing non-numeric strings. Your function should gracefully handle errors and continue processing valid integer entries.","solution":"def filter_and_multiply(mixed_list): Filters out non-integer strings from the list and returns the product of the remaining integers. If the list has no valid integers, returns 1. Args: mixed_list (list): List containing both integers and strings Returns: int: Product of all valid integers in the list product = 1 has_valid_integer = False for item in mixed_list: try: number = int(item) product *= number has_valid_integer = True except (ValueError, TypeError): pass return product if has_valid_integer else 1"},{"question":"Design a database schema for a library management system. The system should handle book inventory, user accounts, and loan transactions. Consider the following requirements: 1. **Books**: Each book has an ISBN, title, author, genre, and publication year. The system should track the number of copies available. 2. **Users**: Users have a unique user ID, name, email, phone number, and address. 3. **Loans**: Each loan transaction should record the user who borrowed the book, the book borrowed, the date borrowed, and the due date for return. It should also track whether the book has been returned on time or is overdue. Design appropriate tables with primary and foreign keys, and specify necessary constraints to ensure data integrity. Write SQL statements to: 1. Create the schema with tables and constraints. 2. Insert sample data into each table. 3. Query overdue books for a given user, displaying book details and due date. Provide the SQL code in your answer.","solution":"def create_schema(): schema = CREATE TABLE Users ( user_id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100) UNIQUE, phone VARCHAR(15), address TEXT ); CREATE TABLE Books ( isbn VARCHAR(13) PRIMARY KEY, title VARCHAR(255), author VARCHAR(100), genre VARCHAR(50), publication_year INT, copies_available INT ); CREATE TABLE Loans ( loan_id INT PRIMARY KEY, user_id INT, isbn VARCHAR(13), date_borrowed DATE, due_date DATE, returned_date DATE, FOREIGN KEY (user_id) REFERENCES Users(user_id), FOREIGN KEY (isbn) REFERENCES Books(isbn) ); return schema def insert_sample_data(): sample_data = INSERT INTO Users (user_id, name, email, phone, address) VALUES (1, \'Alice Johnson\', \'alice@example.com\', \'1234567890\', \'123 Maple St\'), (2, \'Bob Smith\', \'bob@example.com\', \'0987654321\', \'456 Oak St\'); INSERT INTO Books (isbn, title, author, genre, publication_year, copies_available) VALUES (\'978-3-16-148410-0\', \'The Great Gatsby\', \'F. Scott Fitzgerald\', \'Fiction\', 1925, 3), (\'978-0-14-044926-6\', \'War and Peace\', \'Leo Tolstoy\', \'Historical Fiction\', 1869, 2); INSERT INTO Loans (loan_id, user_id, isbn, date_borrowed, due_date, returned_date) VALUES (1, 1, \'978-3-16-148410-0\', \'2023-01-01\', \'2023-01-15\', NULL), (2, 2, \'978-0-14-044926-6\', \'2023-01-10\', \'2023-01-24\', \'2023-01-22\'); return sample_data def query_overdue_books(user_id): query = f SELECT Books.isbn, Books.title, Books.author, Loans.due_date FROM Loans JOIN Books ON Loans.isbn = Books.isbn WHERE Loans.user_id = {user_id} AND Loans.returned_date IS NULL AND Loans.due_date < CURRENT_DATE; return query"},{"question":"Define a function that fulfills the below requirements: def find_k_missing_numbers(arr, k): \'\'\' You are provided with a list of unique integers where each integer is between 1 and n (inclusive), where n is the length of the list plus k. The list contains numbers from this range with k numbers missing. Your task is to return a sorted list of the k missing numbers. Examples: find_k_missing_numbers([1, 3, 4, 5], 1) == [2] find_k_missing_numbers([2, 3, 7, 4, 8, 9], 4) == [1, 5, 6, 10] find_k_missing_numbers([1, 2, 3, 6, 8], 3) == [4, 5, 7] \'\'\'","solution":"def find_k_missing_numbers(arr, k): Returns a sorted list of the k missing numbers from the provided list. Parameters: arr (list): A list of unique integers. k (int): The number of missing numbers to find. Returns: list: A sorted list of the k missing numbers. n = len(arr) + k full_set = set(range(1, n + 1)) missing_nums = sorted(full_set - set(arr)) return missing_nums"},{"question":"Given a set of employee records containing their years of experience, their education level (Bachelor, Master, or PhD), the number of projects worked on, and their current salary, develop a regression model to predict an employee\'s potential salary. Ensure you preprocess the data appropriately, train your model, and evaluate its performance using mean squared error (MSE) and R-squared (R2) metrics. years_experience = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] education_level = [\\"Bachelor\\", \\"Bachelor\\", \\"Master\\", \\"Master\\", \\"PhD\\", \\"PhD\\", \\"PhD\\", \\"Master\\", \\"Bachelor\\", \\"Master\\"] num_projects = [1, 2, 2, 3, 4, 5, 6, 3, 2, 4] current_salary = [50000, 55000, 60000, 65000, 70000, 75000, 80000, 70000, 55000, 65000]","solution":"import pandas as pd from sklearn.linear_model import LinearRegression from sklearn.preprocessing import OneHotEncoder from sklearn.metrics import mean_squared_error, r2_score from sklearn.model_selection import train_test_split # Define the data years_experience = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] education_level = [\\"Bachelor\\", \\"Bachelor\\", \\"Master\\", \\"Master\\", \\"PhD\\", \\"PhD\\", \\"PhD\\", \\"Master\\", \\"Bachelor\\", \\"Master\\"] num_projects = [1, 2, 2, 3, 4, 5, 6, 3, 2, 4] current_salary = [50000, 55000, 60000, 65000, 70000, 75000, 80000, 70000, 55000, 65000] # Create a DataFrame data = pd.DataFrame({ \'years_experience\': years_experience, \'education_level\': education_level, \'num_projects\': num_projects, \'current_salary\': current_salary }) # One-hot encode the education_level column encoder = OneHotEncoder() encoded_education = encoder.fit_transform(data[[\'education_level\']]) encoded_education_df = pd.DataFrame(encoded_education.toarray(), columns=encoder.get_feature_names_out()) # Combine the encoded columns with the original data data = pd.concat([data.drop(\'education_level\', axis=1), encoded_education_df], axis=1) # Define features and target variable X = data.drop(\'current_salary\', axis=1) y = data[\'current_salary\'] # Split the dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the regression model model = LinearRegression() model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) # Evaluate the model mse = mean_squared_error(y_test, y_pred) r2 = r2_score(y_test, y_pred) def build_and_evaluate_model(): Builds a linear regression model to predict salaries and evaluates its performance. Returns: mse: Mean Squared Error of the model r2: R-squared value of the model return mse, r2"},{"question":"Create a function that takes an array of integers and an integer `n` as input. The function should return a new array containing only the elements from the input array that are greater than `n`. Ensure the resulting array maintains the order of elements as they appeared in the original array. **Example:** ```python def filter_greater_than(arr, n): # Your code here # Sample Input/Output print(filter_greater_than([1, 3, 5, 7, 9], 4)) # Output: [5, 7, 9] print(filter_greater_than([10, 20, 30, 40], 25)) # Output: [30, 40] print(filter_greater_than([2, 4, 6, 8], 6)) # Output: [8] print(filter_greater_than([], 3)) # Output: [] ```","solution":"def filter_greater_than(arr, n): Filters elements from the input array that are greater than n. Args: arr (list): List of integers. n (int): The integer threshold. Returns: list: A new list containing elements from arr that are greater than n. return [x for x in arr if x > n]"},{"question":"A tech company wants to analyze user behavior on their website to predict user conversion. Using a dataset with user interaction features (e.g., time on site, number of pages visited, bounce rate), build a random forest classifier to predict user conversion (binary classification: 0 for no, 1 for yes). Evaluate your model using cross-validation and provide a confusion matrix to understand the performance better. Additionally, perform feature importance analysis to identify the top three features influencing conversion, and discuss their potential impact on user experience strategy.","solution":"from sklearn.ensemble import RandomForestClassifier from sklearn.model_selection import cross_val_score, train_test_split from sklearn.metrics import confusion_matrix, classification_report import pandas as pd import numpy as np def user_conversion_analysis(data_path): # Load the data data = pd.read_csv(data_path) # Assume the last column is the target X = data.iloc[:, :-1] y = data.iloc[:, -1] # Create train and test splits X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Initialize and train the model clf = RandomForestClassifier(random_state=42) clf.fit(X_train, y_train) # Evaluate the model using cross-validation cv_scores = cross_val_score(clf, X, y, cv=5) # Generate predictions y_pred = clf.predict(X_test) # Confusion matrix cm = confusion_matrix(y_test, y_pred) # Classification report report = classification_report(y_test, y_pred) # Feature importance feature_importances = clf.feature_importances_ sorted_indices = np.argsort(feature_importances)[::-1] top_three_features = [X.columns[i] for i in sorted_indices[:3]] return { \\"cross_val_scores\\": cv_scores, \\"confusion_matrix\\": cm, \\"classification_report\\": report, \\"feature_importances\\": feature_importances, \\"top_three_features\\": top_three_features }"},{"question":"Given a string, write a function that calculates the frequency of each character in the string and returns a dictionary containing these frequencies. The function should ignore spaces and be case-insensitive. For example, given the string \\"Hello World\\", the function should return the dictionary `{ \'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1 }`. As a reference, consider the following erroneous code: ```python def char_frequency(s): freq_dict = {} for char in s.lower(): if char != \' \': if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict ``` This code almost calculates the character frequencies correctly, but there is room for improvement. Explain any issues you find and provide an improved implementation.","solution":"def char_frequency(s): Return a dictionary containing the frequency of each character in the string, ignoring spaces and case-insensitive. freq_dict = {} for char in s.lower(): if char.isalpha(): if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Write a function that takes a list of integers as input and returns a new list containing only the prime numbers from the input list. If the input list is empty or contains no prime numbers, the function should return an empty list. Example: ```python input_list = [2, 3, 4, 5, 6, 7, 8, 9, 10] output_list = extract_primes(input_list) print(output_list) # Output: [2, 3, 5, 7] ``` Constraints: - The input list may contain negative numbers and zero. - Use helper functions as needed to improve code readability and reusability. Function Signature: ```python def extract_primes(numbers: list) -> list: # Your code here ```","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def extract_primes(numbers): Returns a list of prime numbers from the given list. return [num for num in numbers if is_prime(num)]"},{"question":"Design and implement a Python program that prompts the user for a starting number and an ending number. The program should print all the prime numbers within that specified range. For each prime number, the program should also print the number of prime factors of that prime number (which will always be 2: 1 and the number itself). Implement this using a function `is_prime(n)` to check whether a number `n` is prime, and use exception handling to handle invalid user inputs (e.g., non-integer values). Example output: ``` Enter the starting number: 10 Enter the ending number: 20 11 is a prime number and has 2 prime factors. 13 is a prime number and has 2 prime factors. 17 is a prime number and has 2 prime factors. 19 is a prime number and has 2 prime factors. ``` The base structure for the `is_prime` function might look like this: ```python def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True ```","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def find_primes_in_range(start, end): Finds and prints all prime numbers in the range [start, end]. For each prime number found, also prints the number of prime factors (which is 2). try: start = int(start) end = int(end) except ValueError: print(\\"Invalid input: Please enter integer values for the range.\\") return if start > end: print(\\"Invalid range: Starting number should be less than or equal to the ending number.\\") return for num in range(start, end + 1): if is_prime(num): print(f\\"{num} is a prime number and has 2 prime factors.\\")"},{"question":"Design a function to compute the square root of a given non-negative integer x to within a specified tolerance level. The algorithm should use a method such as binary search or the Newton-Raphson method to achieve the desired precision. You are required to implement a function that takes two parameters: `x` (the number for which to compute the square root) and `tolerance` (a small positive number that defines the acceptable error range for the result). Your function should return the computed square root value of `x` within the given tolerance. Additionally, handle the case where `x` is zero or one explicitly since their square roots are zero and one respectively. Make sure your implementation is efficient and consider edge cases. Example: - If x is 9 and tolerance is 0.001, the output should be close to 3. - If x is 2 and tolerance is 0.0001, the output should be approximately 1.4142. def sqrt(x, tolerance):","solution":"def sqrt(x, tolerance): Compute the square root of a given non-negative integer x to within a specified tolerance. Parameters: x (int): The number to compute the square root for. tolerance (float): The acceptable error range for the result. Returns: float: The computed square root of x within the given tolerance. if x == 0 or x == 1: return x # Implementing the Newton-Raphson method estimate = x while True: previous_estimate = estimate estimate = (estimate + x / estimate) / 2 if abs(estimate - previous_estimate) < tolerance: break return estimate"},{"question":"Write a function that takes a list of integers and groups the integers by whether they are even or odd. Return a dictionary with the keys \\"even\\" and \\"odd\\", where the values are lists of the corresponding integers.","solution":"def group_even_odd(numbers): Groups integers by whether they are even or odd. Parameters: numbers (list): A list of integers. Returns: dict: A dictionary with keys \\"even\\" and \\"odd\\", where the values are lists of the corresponding integers. result = { \\"even\\": [num for num in numbers if num % 2 == 0], \\"odd\\": [num for num in numbers if num % 2 != 0] } return result"},{"question":"Design a software function that takes an array of integers and an integer k as its inputs and returns the maximum sum of k consecutive elements in the array. If the length of the array is less than k, the function should return 0. For example, given the array [1, 4, 2, 10, 23, 3, 1, 0, 20] and k = 4, the function should return 39, as the subarray [4, 2, 10, 23] has the maximum sum of 39. Ensure your solution is efficient, optimizing for both time and space complexity.","solution":"def max_sum_of_k_consecutive_elements(arr, k): Returns the maximum sum of k consecutive elements in the array. If the length of the array is less than k, it returns 0. n = len(arr) if n < k: return 0 max_sum = sum(arr[:k]) current_sum = max_sum for i in range(k, n): current_sum += arr[i] - arr[i-k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a program that reads a sequence of integers and determines the most frequently occurring integer in the sequence. If there are ties (multiple numbers with the same highest frequency), the program should return the smallest integer among them. Optimize your solution for large sequences and ensure that the program can handle negative numbers and zero. Also, implement additional functionality to return the second most frequently occurring integer for the same input. Provide tests for sequences with varying lengths including edge cases such as all elements being the same or all elements being unique.","solution":"from collections import Counter def most_frequent_and_second_most_frequent(numbers): Returns the most frequently occurring integer in the sequence and even there are ties (multiple numbers with the same highest frequency), it returns the smallest integer among them. It also returns the second most frequently occurring integer. if not numbers: return None, None count = Counter(numbers) most_common = count.most_common() # Find the most frequent max_count = most_common[0][1] candidates = [num for num, freq in most_common if freq == max_count] most_frequent = min(candidates) # Find the second most frequent if len(most_common) > 1: second_max_count = most_common[1][1] second_candidates = [num for num, freq in most_common if freq == second_max_count] if second_max_count != max_count: second_most_frequent = min(second_candidates) else: second_most_frequent = min([num for num in second_candidates if num != most_frequent]) else: second_most_frequent = None return most_frequent, second_most_frequent"},{"question":"Design a program to find the intersection point of two singly linked lists. If the two linked lists intersect, return the node at which they intersect, otherwise return `None`. Implement the linked list structure from scratch, along with necessary methods to support the functionality. The program must include the following functions: 1. `addNode(data)`: Add a node with the given data to the end of the list. 2. `getIntersectionNode(list1, list2)`: Determine and return the intersection point of `list1` and `list2`. The linked lists must be created as follows: For the first list, add the following values: `4`, `1`, `8`, `4`, `5`. For the second list, add the values: `5`, `0`, `1`. Assume that the node with value `8` is the intersection point. The two linked lists should be linked accordingly. Print the intersection point if it exists, otherwise print `None`. Optional: for increased complexity, aim to solve this in O(m + n) time complexity, where `m` and `n` are the lengths of the two lists respectively, and O(1) space complexity. This is your starting point: ``` class Node: def __init__(self, data=None): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None # TODO: complete the rest of the code ```","solution":"class Node: def __init__(self, data=None): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def addNode(self, data): Add a node with the given data to the end of the list. new_node = Node(data) if self.head is None: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node def getIntersectionNode(list1, list2): Determine and return the intersection point of list1 and list2. if list1.head is None or list2.head is None: return None # Get the lengths of both lists list1_len = list1.head list2_len = list2.head len1, len2 = 0, 0 while list1_len: len1 += 1 list1_len = list1_len.next while list2_len: len2 += 1 list2_len = list2_len.next # Reset heads list1_len = list1.head list2_len = list2.head # Adjust starting point for the longer list if len1 > len2: for _ in range(len1 - len2): list1_len = list1_len.next else: for _ in range(len2 - len1): list2_len = list2_len.next # Find intersection point while list1_len and list2_len: if list1_len == list2_len: return list1_len.data # Intersection found list1_len = list1_len.next list2_len = list2_len.next return None # No intersection"},{"question":"Write a Python function named `find_substring_indices` that takes two string arguments `text` and `pattern`, and returns a list of starting indices where the `pattern` is found within the `text`. If the pattern is not found, return an empty list. Your implementation should be case-sensitive. # Example: ```python find_substring_indices(\\"abracadabra\\", \\"abr\\") ``` # Output: ``` [0, 7] ``` # Example: ```python find_substring_indices(\\"hello world\\", \\"o\\") ``` # Output: ``` [4, 7] ``` # Example: ```python find_substring_indices(\\"abcdefgh\\", \\"xyz\\") ``` # Output: ``` [] ```","solution":"def find_substring_indices(text, pattern): Returns a list of starting indices where the pattern is found within the text. Parameters: text (str): The string to search within. pattern (str): The substring to search for. Returns: list: A list of starting indices where the pattern is found in the text. indices = [] pattern_length = len(pattern) for i in range(len(text) - pattern_length + 1): if text[i:i+pattern_length] == pattern: indices.append(i) return indices"},{"question":"Design a function that accepts a two-dimensional square matrix and returns true if the matrix is a Magic Square and false otherwise. A Magic Square is a matrix in which the sum of every row, column, and both main diagonals is the same. Input: ``` matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]] ``` Output: ``` true ```","solution":"def is_magic_square(matrix): Check if a given two-dimensional square matrix is a Magic Square. A Magic Square is one where the sum of every row, column, and both main diagonals are the same. n = len(matrix) if n == 0: # Empty matrix is not considered a magic square return False sum_diag1 = sum(matrix[i][i] for i in range(n)) sum_diag2 = sum(matrix[i][n - 1 - i] for i in range(n)) # If diagonals do not match, it\'s not a magic square if sum_diag1 != sum_diag2: return False # Set the target sum to be the diagonal sum target_sum = sum_diag1 for i in range(n): # Check sum of each row if sum(matrix[i]) != target_sum: return False # Check sum of each column if sum(matrix[j][i] for j in range(n)) != target_sum: return False return True"},{"question":"Write a Python function that takes a list of dictionaries, where each dictionary represents an employee with keys \'name\', \'department\', and \'salary\', and returns a new dictionary that groups employees by their departments. The values should be lists of dictionaries containing employees\' names and salaries only, sorted by salary in descending order. For example, given the input: ```python employees = [ {\\"name\\": \\"Alice\\", \\"department\\": \\"HR\\", \\"salary\\": 70000}, {\\"name\\": \\"Bob\\", \\"department\\": \\"Engineering\\", \\"salary\\": 90000}, {\\"name\\": \\"Charlie\\", \\"department\\": \\"HR\\", \\"salary\\": 75000}, {\\"name\\": \\"David\\", \\"department\\": \\"Engineering\\", \\"salary\\": 100000} ] ``` The returned output should be: ```python { \\"HR\\": [{\\"name\\": \\"Charlie\\", \\"salary\\": 75000}, {\\"name\\": \\"Alice\\", \\"salary\\": 70000}], \\"Engineering\\": [{\\"name\\": \\"David\\", \\"salary\\": 100000}, {\\"name\\": \\"Bob\\", \\"salary\\": 90000}] } ```","solution":"def group_employees_by_department(employees): Groups employees by their departments and sorts by salary in descending order. Args: employees (list): A list of dictionaries, each representing an employee with keys \'name\', \'department\', and \'salary\'. Returns: dict: A dictionary where keys are department names and values are lists of dictionaries, each containing \'name\' and \'salary\' of employees, sorted by salary in descending order. from collections import defaultdict department_dict = defaultdict(list) for employee in employees: department = employee[\\"department\\"] department_dict[department].append({\\"name\\": employee[\\"name\\"], \\"salary\\": employee[\\"salary\\"]}) # Sort by salary in descending order for department in department_dict: department_dict[department] = sorted(department_dict[department], key=lambda x: x[\'salary\'], reverse=True) return dict(department_dict)"},{"question":"Write a function `calculate_overlap` that takes two lists of intervals as input and returns a list of intervals where the intervals in the two lists overlap. Each interval is represented as a tuple of two integers, where the first integer is the start of the interval and the second integer is the end of the interval. The input intervals may not be sorted, and they may overlap within the same list. **Function Signature:** ```python def calculate_overlap(intervals1: List[Tuple[int, int]], intervals2: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ``` **Input:** - `intervals1` and `intervals2`: Two lists of tuples of integers. Each tuple represents an interval `(start, end)`. **Output:** - Returns a list of tuples representing the overlapping intervals. **Example:** ```python assert calculate_overlap([(1, 5), (8, 10)], [(2, 6), (8, 9)]) == [(2, 5), (8, 9)] assert calculate_overlap([(1, 3), (5, 7)], [(2, 4), (6, 8)]) == [(2, 3), (6, 7)] assert calculate_overlap([(1, 10)], [(2, 5), (6, 8)]) == [(2, 5), (6, 8)] ```","solution":"from typing import List, Tuple def calculate_overlap(intervals1: List[Tuple[int, int]], intervals2: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Returns a list of intervals where the intervals in the two lists overlap. overlap_intervals = [] for start1, end1 in intervals1: for start2, end2 in intervals2: start_overlap = max(start1, start2) end_overlap = min(end1, end2) if start_overlap < end_overlap: overlap_intervals.append((start_overlap, end_overlap)) return overlap_intervals"},{"question":"Create a function in Python that takes a list of integers and returns a dictionary where the keys are the integers and the values are the squares of the corresponding integers.","solution":"def square_integers(int_list): Returns a dictionary where the keys are the integers from the input list and the values are the squares of the corresponding integers. return {x: x**2 for x in int_list}"},{"question":"Write a function that takes a list of integers and returns the difference between the largest and smallest numbers in the list. If the list is empty, return zero. ```python def find_difference(lst): # Your code here # Example Usage: # Input: [10, 2, 5, 78, 34] # Output: 76 # Input: [] # Output: 0 # Input: [5] # Output: 0 ```","solution":"def find_difference(lst): Returns the difference between the largest and smallest numbers in the list. If the list is empty, returns zero. if not lst: return 0 return max(lst) - min(lst)"},{"question":"You are given a list of products represented by their names and a list of user reviews. The task is to determine which product has the highest average rating based on the reviews. If two products have the same average rating, the product that comes first alphabetically should be chosen. The reviews contain the product name and the rating given by the user. Your task is to write a function that calculates the average rating for each product and returns the name of the product with the highest average rating. The function should have the following signature: ```python def highest_rated_product(products: List[str], reviews: List[Tuple[str, int]]) -> str: ``` # Constraints: - The number of products (`n`) will be between 1 and 1000. - The number of reviews (`m`) will be between 1 and 10000. - Each product name consists of at most 100 characters. - Ratings will be integers between 1 and 5 inclusive. # Input: - `products`: A list of strings representing the names of the products. - `reviews`: A list of tuples where each tuple contains a string (product name) and an integer (rating). # Output: - Return the name of the product with the highest average rating. # Example: ```python products = [\\"ProductA\\", \\"ProductB\\", \\"ProductC\\"] reviews = [(\\"ProductA\\", 5), (\\"ProductB\\", 4), (\\"ProductA\\", 3), (\\"ProductC\\", 4), (\\"ProductB\\", 5)] highest_rated_product(products, reviews) # Output: \\"ProductB\\" ```","solution":"from typing import List, Tuple from collections import defaultdict def highest_rated_product(products: List[str], reviews: List[Tuple[str, int]]) -> str: product_ratings = defaultdict(list) # Collect ratings for each product for product, rating in reviews: product_ratings[product].append(rating) # Calculate average rating for each product average_ratings = {} for product in products: if product in product_ratings: average_ratings[product] = sum(product_ratings[product]) / len(product_ratings[product]) else: average_ratings[product] = 0 # Determine the product with the highest average rating highest_rated = max(average_ratings.items(), key=lambda x: (x[1], -ord(x[0][0]))) return highest_rated[0]"},{"question":"Implement a function in Python that receives a list of words and returns the longest word that can be constructed by concatenating other words from the list. If no such word can be formed, return an empty string. You are permitted to use each word from the list multiple times if necessary. For example, given the list `[\\"cat\\", \\"banana\\", \\"dog\\", \\"nana\\", \\"walk\\", \\"walker\\", \\"dogwalker\\"]`, the function should return `\\"dogwalker\\"` because it\'s formed by concatenating \\"dog\\" and \\"walker\\".","solution":"def can_construct(word, word_set): if word in word_set: return True for i in range(1, len(word)): prefix = word[:i] suffix = word[i:] if prefix in word_set and can_construct(suffix, word_set): return True return False def longest_concatenated_word(words): word_set = set(words) max_word = \\"\\" for word in words: word_set.remove(word) # Temporarily remove the current word from the set if can_construct(word, word_set): if len(word) > len(max_word): max_word = word word_set.add(word) # Add the word back to the set return max_word"},{"question":"Write a function that takes a list of integers and returns a list of tuples. Each tuple contains an integer from the original list and its count of how many times it appears in the list. The output should be sorted by the integers in ascending order. Example: ```python def count_occurrences(lst): pass # Sample Input: lst = [4, 2, 2, 8, 3, 3, 3, 1] # Expected Output: # [(1, 1), (2, 2), (3, 3), (4, 1), (8, 1)] ``` Constraints: - The function should handle an empty list and return an empty list. - The function should be efficient with respect to time complexity.","solution":"def count_occurrences(lst): Returns a list of tuples, each containing an integer from the input list and its count of occurrences in the list. The output list is sorted by the integers in ascending order. :param lst: List of integers :return: List of tuples (integer, count) from collections import Counter counts = Counter(lst) return sorted(counts.items())"},{"question":"In a unidimensional array comprising \'n\' integers ranging within 0 through n-1, determine an algorithm to uncover duplicate elements within linear temporal complexity and in constant spatial complexity. The array may contain multiple duplicate integers, and some integers may not appear at all. For instance, given the array input: [4, 5, 6, 3, 2, 5, 1, 3, 0], the anticipated duplicates were [5, 3]. Develop a function conforming to the subsequent signature: def findDuplicates(nums):","solution":"def findDuplicates(nums): Finds all duplicate elements in the array `nums` where the elements range from 0 to n-1. :param nums: List[int] - List of integers where integers are in range 0 to n-1 :return: List[int] - List of duplicate integers duplicates = [] for i in range(len(nums)): index = abs(nums[i]) if nums[index] >= 0: nums[index] = -nums[index] else: duplicates.append(index) return duplicates"},{"question":"Write a Python function that takes a string as input and removes all consecutive duplicate characters from it. The function should maintain the order of characters as in the original string. For instance, if the input string is \\"aabbccddeeff\\", the function should return \\"abcdef\\". Ensure the function handles both uppercase and lowercase letters correctly and is optimized for performance.","solution":"def remove_consecutive_duplicates(s): Removes consecutive duplicate characters from a string s. :param s: str, input string :return: str, with consecutive duplicates removed if not s: return \\"\\" result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return \'\'.join(result)"},{"question":"Create a function that accepts a list of integers and returns a new list containing only the elements that are prime numbers. For this purpose, a prime number is defined as an integer greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(n): Check if a number is prime if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(lst): Returns a list containing only the prime numbers from the input list. :param lst: List of integers :return: List of prime integers return [x for x in lst if is_prime(x)]"},{"question":"Explain how you would implement a simple URL shortening service. Your implementation should cover the design of an algorithm that converts a long URL into a shortened version, and vice versa. Be sure to discuss the data structures involved, potential database schema, and how you would handle collisions (i.e., two different URLs generating the same shortened version). Include any considerations for scalability and performance.","solution":"import string class URLShortener: def __init__(self): self.url_dict = {} self.counter = 0 self.characters = string.ascii_letters + string.digits def encode(self, long_url): Encodes a long URL into a short URL. short_url = self._base62_encode(self.counter) self.url_dict[short_url] = long_url self.counter += 1 return short_url def decode(self, short_url): Decodes a short URL back into the original long URL. return self.url_dict.get(short_url, \\"\\") def _base62_encode(self, num): Encodes a number into a base62 string. if num == 0: return self.characters[0] base62 = [] while num: num, rem = divmod(num, 62) base62.append(self.characters[rem]) return \'\'.join(reversed(base62))"},{"question":"Write a Python function that accepts an integer n and checks if it is a Disarium number. A Disarium number is a number defined by the sum of its digits powered with their respective positions being equal to the number itself. The function should return True if n is a Disarium number, and False otherwise. For example: - 135 is a Disarium number because 1¹ + 3² + 5³ = 135 - 89 is a Disarium number because 8¹ + 9² = 89 ```python def is_disarium(n): # Your code here # Example usage: # print(is_disarium(135)) # Output: True # print(is_disarium(89)) # Output: True # print(is_disarium(102)) # Output: False ```","solution":"def is_disarium(n): Check if a number is a Disarium number. A Disarium number is a number where the sum of its digits powered to their respective positions is equal to the number itself. :param n: An integer to check :return: True if n is a Disarium number, False otherwise digits = list(map(int, str(n))) disarium_sum = sum(digit ** (index + 1) for index, digit in enumerate(digits)) return disarium_sum == n"},{"question":"Write a function `find_unique_elements` that takes a list of integers as input and returns a new list with only the unique elements from the original list in the same order they first appeared. Ensure your solution maintains the original order and does not use extra memory except for the result list. Additionally, handle possible exceptions that may arise if the input is not a list of integers. def find_unique_elements(input_list): # Your implementation here pass","solution":"def find_unique_elements(input_list): Returns a list containing unique elements from the input list, preserving the original order. if not isinstance(input_list, list): raise ValueError(\\"Input must be a list\\") for element in input_list: if not isinstance(element, int): raise ValueError(\\"All elements in the list must be integers\\") seen = set() unique_list = [] for item in input_list: if item not in seen: seen.add(item) unique_list.append(item) return unique_list"},{"question":"Write a function that takes a list of strings as input, where each string can be either a positive or a negative integer (e.g., \\"5\\", \\"-3\\", \\"12\\", \\"-1\\"). The function should return a dictionary with two keys: \\"positive\\" and \\"negative\\". The value associated with each key should be a list of integers (not strings) that are either positive or negative, respectively, sorted in ascending order. If a string in the input list cannot be converted to an integer, the function should ignore it.","solution":"def separate_positive_negative(numbers): Takes a list of strings where each string can be either a positive or a negative integer, and returns a dictionary with two keys: \\"positive\\" and \\"negative\\". The value associated with each key is a list of integers that are either positive or negative, sorted in ascending order. Args: numbers (list of str): List of strings representing integers. Returns: dict: A dictionary with two keys: \\"positive\\" and \\"negative\\". positive = [] negative = [] for num in numbers: try: num_int = int(num) if num_int >= 0: positive.append(num_int) else: negative.append(num_int) except ValueError: continue return { \\"positive\\": sorted(positive), \\"negative\\": sorted(negative) }"},{"question":"Develop a Python function that checks if a given string is a valid palindrome, considering only alphanumeric characters and ignoring case sensitivity. Your function should also handle edge cases such as empty strings, strings with only special characters, and strings with mixed case letters. Furthermore, identify and correct the issues in the following code snippet that attempts to perform this task: ```python def is_palindrome(s): s = \'\'.join(c for c in s if c.isalnum()) return s == s[::-1].lower() ``` Clarify any assumptions made and elaborate on the considerations for differing input formats in your solution process.","solution":"def is_palindrome(s): Checks if a given string is a valid palindrome, considering only alphanumeric characters and ignoring case sensitivity. # Remove non-alphanumeric characters and convert to lowercase filtered_s = \'\'.join(c.lower() for c in s if c.isalnum()) # Check if the filtered string is equal to its reverse return filtered_s == filtered_s[::-1]"},{"question":"Design a software module that implements a caching mechanism for the factorial of large numbers. The module should be capable of computing and storing factorized results of numbers up to 100,000! to prevent redundant calculations. Ensure your implementation is optimized for both time and space complexity, using memoization to store intermediate results. Additionally, develop a function that manages a series of queries to ascertain the factorial values efficiently. The system should support persistence across program runs and clean up cached data after a specified period of inactivity. ```python def factorial_with_caching(n: int): # Implement the factorial computation with caching and memoization ```python ```python def factorial_multiple_queries(query: List[int]): # Handle multiple factorial queries efficiently, using cached results to improve performance ``` #Extended Specifications#: Include error checking to validate input parameters and handle edge cases, such as very large numbers or negative inputs. Ensure the module is thread-safe for concurrent query handling.","solution":"import functools import math import pickle from typing import List import threading import os import time CACHE_FILE = \'factorial_cache.pkl\' CACHE_EXPIRATION = 3600 # 1 hour in seconds # Create a lock for thread-safe operations lock = threading.Lock() # Load cache from file if it exists and not expired def load_cache(): if not os.path.exists(CACHE_FILE): return {} with open(CACHE_FILE, \'rb\') as f: cache_data = pickle.load(f) # Check if cache data is still valid if time.time() - cache_data[\'timestamp\'] > CACHE_EXPIRATION: return {} return cache_data[\'data\'] # Save cache to file def save_cache(cache): with open(CACHE_FILE, \'wb\') as f: pickle.dump({ \'timestamp\': time.time(), \'data\': cache }, f) # Initialize cache factorial_cache = load_cache() def factorial_with_caching(n: int) -> int: if n < 0: raise ValueError(\\"Negative values are not allowed.\\") if n > 100000: raise ValueError(\\"Value exceeds maximum limit for caching.\\") with lock: if n in factorial_cache: return factorial_cache[n] result = math.factorial(n) factorial_cache[n] = result save_cache(factorial_cache) return result def factorial_multiple_queries(query: List[int]) -> List[int]: results = [] for n in query: results.append(factorial_with_caching(n)) return results"},{"question":"Develop a Python function that takes a string as input and returns the string with the order of the characters reversed, but preserves the position of all non-alphabetic characters. For example, the input \\"a,bc\\" would return \\"c,ba\\". ```python def reverse_string_preserve_non_alpha(s: str) -> str: # Implementation here pass # Example usage: # Input: \\"a,bc\\" # Output: \\"c,ba\\" # Input: \\"ab-cd\\" # Output: \\"dc-ba\\" ```","solution":"def reverse_string_preserve_non_alpha(s: str) -> str: Reverses the order of the alphanumeric characters in the string, while preserving the position of all non-alphabetic characters. # Extract only alphabetic characters alpha_chars = [c for c in s if c.isalpha()] # Reversed list of alphabetic characters reversed_alpha_chars = alpha_chars[::-1] result = [] alpha_index = 0 # Reconstruct the string for char in s: if char.isalpha(): result.append(reversed_alpha_chars[alpha_index]) alpha_index += 1 else: result.append(char) return \'\'.join(result)"},{"question":"Write a function \'product_of_odds\' to calculate the product of all odd integers in a given list \'lst\'. The function should be able to handle large lists efficiently with complexity of O(n). Here\'s the structure of the function to reference and complete: ``` def product_of_odds(lst): # Initialize the product product = 1 # Loop to calculate the product of odd numbers for num in lst: if num % 2 != 0: product *= num # Return 0 if the product is still 1 (no odds found) if product == 1: return 0 return product ``` Sample: product_of_odds([1, 2, 3, 4, 5]) ➞ 15 product_of_odds([2, 4, 6, 8]) ➞ 0 product_of_odds([7, 3, 1]) ➞ 21 product_of_odds([]) ➞ 0","solution":"def product_of_odds(lst): Returns the product of all odd integers in the given list `lst`. If no odd integers are found, returns 0. product = 1 has_odd = False for num in lst: if num % 2 != 0: product *= num has_odd = True if not has_odd: return 0 return product"},{"question":"Write a function that takes a string as input and returns a boolean indicating whether the string is a valid palindrome, considering only alphanumeric characters and ignoring spaces. Do not use any library functions to manipulate the string, and ensure the function is case-insensitive.","solution":"def is_valid_palindrome(s): Returns True if the input string is a valid palindrome, considering only alphanumeric characters and ignoring spaces. The comparison is case-insensitive. # Clean the string by removing non-alphanumeric characters and converting to lower case cleaned_s = \'\'.join(c.lower() for c in s if c.isalnum()) # Check if cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Write a function that takes a string as input and returns the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one that appears. You may not use any built-in substring functions to solve this problem. Example: Input: \\"abcabcbb\\" Output: \\"abc\\" Input: \\"bbbbb\\" Output: \\"b\\" Input: \\"pwwkew\\" Output: \\"wke\\"","solution":"def longest_substring_without_repeating_characters(s): Finds the longest substring without repeating characters in the input string `s`. Parameters: s (str): The input string. Returns: str: The longest substring without repeating characters. start = 0 max_length = 0 max_substr = \\"\\" char_index_map = {} for end in range(len(s)): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end if end - start + 1 > max_length: max_length = end - start + 1 max_substr = s[start:end+1] return max_substr"},{"question":"Write a Python function that simulates transactions in a bank account. Implement methods for depositing, withdrawing, and checking the balance. Ensure proper error handling by raising appropriate exceptions for invalid operations such as withdrawing more money than is available, or depositing a negative amount. Additionally, add a method to return the transaction history chronologically. Use the provided structure as guidance, but introduce a purposeful error to challenge debugging skills. Initial structure: ```python class BankAccount: def __init__(self, initial_balance=0): self.balance = initial_balance self.history = [] def deposit(self, amount): Deposits amount to the account. Raises ValueError if the amount is negative. pass def withdraw(self, amount): Withdraws amount from the account. Raises ValueError if the amount is greater than the balance or negative. pass def get_balance(self): Returns current balance. pass def get_history(self): Returns transaction history as a list of strings in chronological order. pass ``` Faulty code piece: ```python class BankAccount: def __init__(self, initial_balance=0): self.balance = initial_balance self.history = [] def deposit(self, amount): if amount <= 0: # This line should raise an error if the amount is negative raise ValueError(\\"Deposit amount must be positive\\") self.balance += amount self.history.append(f\\"Deposited {amount}\\") def withdraw(self, amount): if amount > self.balance: # This condition handles only one scenario raise ValueError(\\"Insufficient funds\\") self.balance -= amount self.history.append(f\\"Withdrew {amount}\\") def get_balance(self): return self.balance def get_history(self): return self.history ```","solution":"class BankAccount: def __init__(self, initial_balance=0): self.balance = initial_balance self.history = [] def deposit(self, amount): if amount <= 0: # Error: should raise an error if the amount is negative, not zero. raise ValueError(\\"Deposit amount must be positive\\") self.balance += amount self.history.append(f\\"Deposited {amount}\\") def withdraw(self, amount): if amount <= 0: # Error handling should be added for negative amounts raise ValueError(\\"Withdraw amount must be positive\\") if amount > self.balance: raise ValueError(\\"Insufficient funds\\") self.balance -= amount self.history.append(f\\"Withdrew {amount}\\") def get_balance(self): return self.balance def get_history(self): return self.history"},{"question":"Write a function in your preferred programming language that takes in a list of integers and returns a new list containing only the prime numbers from the original list. Ensure your function efficiently checks for primality, and consider edge cases such as empty lists or lists with no prime numbers. Include both the function implementation and a few example test cases to demonstrate its correctness.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a list containing only the prime numbers from the original list. return [num for num in numbers if is_prime(num)]"},{"question":"Craft a function that takes a 2-dimensional list of integers (representing a matrix) and returns `True` if the matrix is a Toeplitz matrix, and `False` otherwise. A Toeplitz matrix is one in which each descending diagonal from left to right is constant, that is, all elements in such diagonals are the same.","solution":"def is_toeplitz_matrix(matrix): Checks if the given 2-dimensional list (matrix) is a Toeplitz matrix. A Toeplitz matrix is one where each descending diagonal from left to right is constant. Parameters: matrix (list of list of int): The 2-dimensional list representing the matrix. Returns: bool: True if the matrix is a Toeplitz matrix, False otherwise. if not matrix or not matrix[0]: return False rows, cols = len(matrix), len(matrix[0]) for row in range(1, rows): for col in range(1, cols): if matrix[row][col] != matrix[row - 1][col - 1]: return False return True"},{"question":"Create a Python function that processes a list of integers and returns a dictionary containing the number of occurrences of each integer. Additionally, the function should identify the mode (the integer that appears the most frequently) and include it in the return dictionary under the key \\"mode\\". The input list may contain negative integers and should handle empty lists appropriately. For example: input_list = [4, 4, 1, 2, 2, 3, 3, 3, -1, -1, -1, -1] output = { -1: 4, 1: 1, 2: 2, 3: 3, 4: 2, \\"mode\\": -1 } Function signature: ```python def count_occurrences_with_mode(input_list: List[int]) -> Dict: ```","solution":"from typing import List, Dict def count_occurrences_with_mode(input_list: List[int]) -> Dict: Processes a list of integers and returns a dictionary containing the number of occurrences of each integer and the mode (the integer that appears the most frequently). if not input_list: return {\\"mode\\": None} # handle empty list case occurrence_dict = {} for number in input_list: if number in occurrence_dict: occurrence_dict[number] += 1 else: occurrence_dict[number] = 1 # find the mode mode = max(occurrence_dict, key=occurrence_dict.get) occurrence_dict[\\"mode\\"] = mode return occurrence_dict"},{"question":"Write a function to determine the nth node from the end of a singly linked list. If the list has fewer than n elements, return `None`. ```python class ListNode: def __init__(self, x): self.val = x self.next = None def nth_from_end(head: ListNode, n: int) -> int: # Function logic here # Example Usage: # head = [1, 2, 3, 4, 5] # n = 2 # The list is 1->2->3->4->5, and the 2nd node from the end is 4. # Output: 4 ``` Write your implementation for the function `nth_from_end` and ensure it correctly finds and returns the nth node from the end. Consider edge cases such as when the list is empty or when `n` is greater than the length of the list.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def nth_from_end(head: ListNode, n: int) -> int: Returns the nth node\'s value from the end of a singly linked list. If the list has fewer than n elements, returns None. # Initialize two pointers first = head second = head # Move first pointer n steps ahead for _ in range(n): if first is None: return None # If n is greater than the length of list first = first.next # Move both pointers until first reaches the end while first: first = first.next second = second.next # second should now be pointing at the nth node from the end return second.val if second else None"},{"question":"Given a list of integers, write a function that reorders the list by moving all the even numbers to the beginning followed by all the odd numbers, while preserving the relative order of the even numbers and the relative order of the odd numbers. Your function should return the reordered list. Function signature: ```python def reorder_even_first(nums: List[int]) -> List[int]: pass ``` Example: ```python >>> reorder_even_first([5, 2, 8, 1, 4, 7, 6]) [2, 8, 4, 6, 5, 1, 7] >>> reorder_even_first([1, 3, 5, 7, 9]) [1, 3, 5, 7, 9] >>> reorder_even_first([2, 4, 6, 8, 10]) [2, 4, 6, 8, 10] ``` Notes: - The input list will contain at least one integer. - The function should preserve the relative order of the even numbers and the relative order of the odd numbers.","solution":"from typing import List def reorder_even_first(nums: List[int]) -> List[int]: Reorders a list by moving all the even numbers to the beginning followed by all the odd numbers, while preserving the relative order of the even numbers and the relative order of the odd numbers. Parameters: nums (List[int]): The input list of integers. Returns: List[int]: The reordered list. evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] return evens + odds"},{"question":"Create a function that accepts a list of strings and returns a new list where each string is reversed. Ensure that the function does not use inherent string reversal functions or methods but instead manually iterates over the characters. Test your function with edge cases such as empty strings and strings with special characters. ```python def reverse_strings(strings): reversed_list = [] for s in strings: reversed_string = \'\' for char in s: reversed_string = char + reversed_string reversed_list.append(reversed_string) return reversed_list # Example usage: strings = [\\"hello\\", \\"world\\", \\"!\\"] print(reverse_strings(strings)) # Output should be [\'olleh\', \'dlrow\', \'!\'] ```","solution":"def reverse_strings(strings): Accepts a list of strings and returns a new list where each string is reversed. reversed_list = [] for s in strings: reversed_string = \'\' for char in s: reversed_string = char + reversed_string reversed_list.append(reversed_string) return reversed_list"},{"question":"Context # Project Overview Create a library management system that allows librarians to manage the library\'s book inventory and helps members find and borrow books. Your task is to implement a portion of this system. Original Requirements ```python [ \\"Enable the librarian to add, update, and delete books from the library\'s inventory.\\", \\"Allow members to search for books based on title, author, or genre.\\", \\"Implement a borrowing system where members can check out and return books.\\", \\"Track the due dates of borrowed books and notify members when books are overdue.\\" ] ``` User Stories ```python [ \\"As a librarian, I want to add books to the library\'s inventory so that members can borrow them.\\", \\"As a librarian, I want to update the information of books in the inventory so that it is accurate.\\", \\"As a librarian, I want to remove books from the inventory when they are no longer available.\\", \\"As a member, I want to search for books by title, author, or genre so that I can find books that interest me.\\", \\"As a member, I want to borrow books so that I can read them at my convenience.\\", \\"As a member, I want to return borrowed books so that I can borrow more books.\\", \\"As a member, I want to be notified when my borrowed books are overdue so that I can return them on time.\\" ] ``` Data Structures and Interfaces # Book Class ```python class Book: def __init__(self, title: str, author: str, genre: str, isbn: str, copies: int): self.title = title self.author = author self.genre = genre self.isbn = isbn self.copies = copies ``` # Member Class ```python class Member: def __init__(self, name: str, email: str): self.name = name self.email = email self.borrowed_books = [] def borrow_book(self, book: Book) -> bool: # logic to borrow a book def return_book(self, book: Book) -> bool: # logic to return a book ``` # Library Class ```python class Library: def __init__(self): self.books = {} self.members = {} def add_book(self, book: Book) -> None: # logic to add a book to the library def update_book(self, isbn: str, title: str = None, author: str = None, genre: str = None, copies: int = None) -> bool: # logic to update a book\'s information def delete_book(self, isbn: str) -> bool: # logic to delete a book from the library def search_books(self, title: str = None, author: str = None, genre: str = None) -> list: # logic to search for books by title, author, or genre def notify_overdue_books(self): # logic to notify members of overdue books ``` Task You are required to implement the `Library` class, along with the methods to add, update, delete, and search for books. Additionally, implement the `borrow_book` and `return_book` methods for the `Member` class. Use appropriate data structures and ensure your code is PEP8 compliant. ----- Format example ----- Code: library.py ```python library.py from typing import Optional, List class Book: def __init__(self, title: str, author: str, genre: str, isbn: str, copies: int): self.title = title self.author = author self.genre = genre self.isbn = isbn self.copies = copies class Member: def __init__(self, name: str, email: str): self.name = name self.email = email self.borrowed_books = [] def borrow_book(self, book: Book) -> bool: if book.copies > 0: book.copies -= 1 self.borrowed_books.append(book) return True return False def return_book(self, book: Book) -> bool: if book in self.borrowed_books: book.copies += 1 self.borrowed_books.remove(book) return True return False class Library: def __init__(self): self.books = {} self.members = {} def add_book(self, book: Book) -> None: self.books[book.isbn] = book def update_book(self, isbn: str, title: Optional[str] = None, author: Optional[str] = None, genre: Optional[str] = None, copies: Optional[int] = None) -> bool: if isbn in self.books: if title: self.books[isbn].title = title if author: self.books[isbn].author = author if genre: self.books[isbn].genre = genre if copies is not None: self.books[isbn].copies = copies return True return False def delete_book(self, isbn: str) -> bool: if isbn in self.books: del self.books[isbn] return True return False def search_books(self, title: Optional[str] = None, author: Optional[str] = None, genre: Optional[str] = None) -> List[Book]: results = [] for book in self.books.values(): if title and title.lower() not in book.title.lower(): continue if author and author.lower() not in book.author.lower(): continue if genre and genre.lower() not in book.genre.lower(): continue results.append(book) return results def notify_overdue_books(self): # Placeholder for notification logic pass ```","solution":"from typing import Optional, List class Book: def __init__(self, title: str, author: str, genre: str, isbn: str, copies: int): self.title = title self.author = author self.genre = genre self.isbn = isbn self.copies = copies class Member: def __init__(self, name: str, email: str): self.name = name self.email = email self.borrowed_books = [] def borrow_book(self, book: Book) -> bool: if book.copies > 0: book.copies -= 1 self.borrowed_books.append(book) return True return False def return_book(self, book: Book) -> bool: if book in self.borrowed_books: book.copies += 1 self.borrowed_books.remove(book) return True return False class Library: def __init__(self): self.books = {} self.members = {} def add_book(self, book: Book) -> None: self.books[book.isbn] = book def update_book(self, isbn: str, title: Optional[str] = None, author: Optional[str] = None, genre: Optional[str] = None, copies: Optional[int] = None) -> bool: if isbn in self.books: if title: self.books[isbn].title = title if author: self.books[isbn].author = author if genre: self.books[isbn].genre = genre if copies is not None: self.books[isbn].copies = copies return True return False def delete_book(self, isbn: str) -> bool: if isbn in self.books: del self.books[isbn] return True return False def search_books(self, title: Optional[str] = None, author: Optional[str] = None, genre: Optional[str] = None) -> List[Book]: results = [] for book in self.books.values(): if title and title.lower() not in book.title.lower(): continue if author and author.lower() not in book.author.lower(): continue if genre and genre.lower() not in book.genre.lower(): continue results.append(book) return results def notify_overdue_books(self): # Placeholder for notification logic pass"},{"question":"You are given a dataset of historical weather data with various attributes such as temperature, humidity, wind speed, and date taken for different cities. Your task is to write a Python script that achieves the following objectives: 1. Parse the dataset and load it into an appropriate data structure. 2. Calculate the monthly average, maximum, and minimum temperature for each city. 3. Identify the city with the highest average temperature and the city with the lowest average temperature for the entire dataset. 4. Plot a graph comparing the average monthly temperatures of the top 5 hottest and coldest cities. 5. Ensure your script accounts for missing or incomplete data and handles it appropriately. Provide comments and documentation within your code to explain your approach and logic used.","solution":"import pandas as pd import matplotlib.pyplot as plt def load_weather_data(file_path): Load weather data from a CSV file. return pd.read_csv(file_path) def preprocess_data(data): Preprocess data by parsing dates and handling missing/incomplete data. data[\'date\'] = pd.to_datetime(data[\'date\'], errors=\'coerce\') data.dropna(subset=[\'date\', \'temperature\', \'city\'], inplace=True) return data def calculate_monthly_statistics(data): Calculate monthly average, maximum, and minimum temperature for each city. data[\'month\'] = data[\'date\'].dt.to_period(\'M\') monthly_stats = data.groupby([\'city\', \'month\'])[\'temperature\'].agg([\'mean\', \'max\', \'min\']).reset_index() monthly_stats.rename(columns={\'mean\': \'average_temperature\', \'max\': \'max_temperature\', \'min\': \'min_temperature\'}, inplace=True) return monthly_stats def identify_extreme_cities(data): Identify the city with the highest and lowest average temperature for the entire dataset. city_avg_temps = data.groupby(\'city\')[\'average_temperature\'].mean().reset_index() hottest_city = city_avg_temps.loc[city_avg_temps[\'average_temperature\'].idxmax()][\'city\'] coldest_city = city_avg_temps.loc[city_avg_temps[\'average_temperature\'].idxmin()][\'city\'] return hottest_city, coldest_city def plot_temperature_comparison(data, hottest_cities, coldest_cities): Plot a graph comparing the average monthly temperatures of the top 5 hottest and coldest cities. comparison_cities = hottest_cities + coldest_cities comparison_data = data[data[\'city\'].isin(comparison_cities)] for city in comparison_cities: city_data = comparison_data[comparison_data[\'city\'] == city] plt.plot(city_data[\'month\'].astype(str), city_data[\'average_temperature\'], label=city) plt.xlabel(\'Month\') plt.ylabel(\'Average Temperature\') plt.title(\'Average Monthly Temperatures Comparison\') plt.legend() plt.show() # Entry function to handle the processing and plotting def analyze_weather_data(file_path): weather_data = load_weather_data(file_path) weather_data = preprocess_data(weather_data) monthly_stats = calculate_monthly_statistics(weather_data) hottest_city, coldest_city = identify_extreme_cities(monthly_stats) hottest_cities = monthly_stats.groupby(\'city\')[\'average_temperature\'].mean().nlargest(5).index.tolist() coldest_cities = monthly_stats.groupby(\'city\')[\'average_temperature\'].mean().nsmallest(5).index.tolist() plot_temperature_comparison(monthly_stats, hottest_cities, coldest_cities) return hottest_city, coldest_city"},{"question":"Implement a function called `minPathSum` that takes a 2D list `grid` representing an m x n grid filled with non-negative numbers. Your task is to find the minimum path sum from the top-left corner to the bottom-right corner, only moving down or right at any point in time. Return this minimum path sum. Below is an example grid: ``` grid = [ [1,3,1], [1,5,1], [4,2,1] ] ``` For the above grid, the minimum path sum is 7 (1 → 3 → 1 → 1 → 1).","solution":"def minPathSum(grid): Compute the minimum path sum for a given m x n grid. :param grid: List of Lists containing non-negative numbers :return: Minimum path sum from top-left to bottom-right corner if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Initialize the first row for j in range(1, n): grid[0][j] += grid[0][j - 1] # Initialize the first column for i in range(1, m): grid[i][0] += grid[i - 1][0] # Compute the path sums for the rest of the grid for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i - 1][j], grid[i][j - 1]) return grid[-1][-1]"},{"question":"Create a Python function that, given an unsorted integer array and an integer k, returns the k-th smallest element in the array without changing the original array\'s order. Your function should handle edge cases where k is out of bounds (e.g., less than 1 or greater than the array\'s length). If k is out of bounds, return None. Use an efficient algorithm suitable for handling large arrays.","solution":"def kth_smallest(array, k): Returns the k-th smallest element in the array without changing the original array\'s order. If k is out of bounds, return None. if k < 1 or k > len(array): return None def quickselect(start, end, rank): pivot = array[end] low = start for i in range(start, end): if array[i] < pivot: array[i], array[low] = array[low], array[i] low += 1 array[low], array[end] = array[end], array[low] if low == rank: return array[low] elif low < rank: return quickselect(low + 1, end, rank) else: return quickselect(start, low - 1, rank) # Make a copy of the array to not disturb the original order array_copy = array[:] return quickselect(0, len(array_copy) - 1, k - 1)"},{"question":"# Problem Statement You are working on a text processing application, and you have a string consisting of multiple words. Your objective is to find the longest word in the string and the number of its occurrences if it appears more than once. To accomplish this, write a function that takes a single string input and returns a tuple containing the longest word and the number of times that word appears in the string. **Function Signature:** ```python def longest_word_occurrences(text: str) -> Tuple[str, int]: # Your code here ``` **Input:** - `text` (str): A string consisting of multiple words separated by spaces. **Output:** - A tuple containing the longest word (str) and the number of its occurrences (int). # Example ```python longest_word_occurrences(\\"apple banana apple orange banana orange banana\\") ``` This should return: ```python (\'banana\', 3) ``` # Constraints - The input string will contain only lowercase alphabetical characters and spaces. - There will be at least one word in the input string. - If there are multiple words with the same maximum length, consider only the first occurrence, but count all of its appearances.","solution":"from typing import Tuple def longest_word_occurrences(text: str) -> Tuple[str, int]: words = text.split() longest_word = max(words, key=len) occurrences = words.count(longest_word) return (longest_word, occurrences)"},{"question":"Design a function named `remove_duplicates` that takes a list of integers and returns a new list containing only the unique elements in the order they first appeared. Your function should not use any additional libraries or imports. The original list should remain unmodified. **Function Signature:** ```python def remove_duplicates(nums: List[int]) -> List[int]: ``` **Input:** - A list of integers (nums) with potential duplicate values (1 ≤ len(nums) ≤ 10^4, -10^6 ≤ nums[i] ≤ 10^6). **Output:** - A list of integers containing only unique values from the input list in their original order. **Example:** ```python assert remove_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5] assert remove_duplicates([5, 5, 5, 6]) == [5, 6] assert remove_duplicates([1, 2, 1, 2, 3, 1, 2]) == [1, 2, 3] ```","solution":"from typing import List def remove_duplicates(nums: List[int]) -> List[int]: unique_nums = [] seen = set() for num in nums: if num not in seen: unique_nums.append(num) seen.add(num) return unique_nums"},{"question":"Write a function that accepts an array of integers and returns the maximum sum of any non-empty subarray within the list. A subarray is a contiguous portion of the array. If the array contains all negative numbers, return the highest single negative number. Your function should have an efficient time complexity, ideally O(n). Example: - Input: [1, -2, 3, 5, -3, 2] - Output: 8 - Explanation: The subarray [3, 5] has the highest sum (3 + 5 = 8). - Input: [-2, -3, -1, -4] - Output: -1 - Explanation: The subarray [-1] has the highest sum (-1).","solution":"def max_subarray_sum(arr): Returns the maximum sum of any non-empty subarray within the list. if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You\'re given an array of integers and a target sum. Write a function that checks if there are two distinct elements in the array that add up to the target sum. If such a pair exists, return the pair as an array of the two integers. If multiple pairs exist, you can return any one of them. If no such pair exists, return null. # Function Signature ```python def find_pair_with_sum(arr: List[int], target: int) -> Optional[List[int]]: ``` # Input - `arr`: List of integers (1 <= len(arr) <= 10^4, -10^4 <= arr[i] <= 10^4). - `target`: Integer (-10^4 <= target <= 10^4). # Output - A list containing two integers from the input array that sum up to the target sum or `null` if no such pair exists. # Example ```python assert find_pair_with_sum([1, 2, 3, 4, 5], 9) == [4, 5] assert find_pair_with_sum([1, 2, 3, 4, 5], 10) == null ```","solution":"from typing import List, Optional def find_pair_with_sum(arr: List[int], target: int) -> Optional[List[int]]: Checks if there are two distinct elements in the array that add up to the target sum. Returns the pair as an array of the two integers if such a pair exists. Returns null if no such pair exists. seen = set() for num in arr: complement = target - num if complement in seen: return [complement, num] seen.add(num) return None"},{"question":"Write a Python function that takes a string representing a mathematical expression (e.g., \\"3+5*2-(4/2)\\") and evaluates it to return the numeric result. The function must handle addition, subtraction, multiplication, and division with proper operator precedence and parenthesis. Note that the input string will only contain non-negative integers and the four basic arithmetic operations.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression given as a string. The expression can include non-negative integers, +, -, *, / operators, and parentheses. # Use Python\'s eval function to safely evaluate the expression try: return eval(expression) except Exception as e: return str(e)"},{"question":"Develop a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Implement the function in Python and ensure it is optimized for performance. Test your function with a variety of inputs, including edge cases such as empty lists, lists with no prime numbers, and lists with negative numbers or zeroes. Additionally, provide an analysis of the time complexity of your solution and discuss any trade-offs made in your implementation.","solution":"def is_prime(num): if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def filter_primes(numbers): return [num for num in numbers if is_prime(num)]"},{"question":"Create a function that takes a list of strings, where each string represents a word, and returns a dictionary where the keys are the letters of the alphabet and the values are the lists of words from the input list that start with the corresponding letter. Ensure that the letters in the dictionary are in lower case, and the words in each list maintain their original order from the input list. Example: Input: [\\"apple\\", \\"banana\\", \\"apricot\\", \\"cherry\\", \\"avocado\\", \\"blueberry\\", \\"carrot\\"] Output: { \\"a\\": [\\"apple\\", \\"apricot\\", \\"avocado\\"], \\"b\\": [\\"banana\\", \\"blueberry\\"], \\"c\\": [\\"cherry\\", \\"carrot\\"] }","solution":"def categorize_words(word_list): Categorize words from the input list based on their starting letter. Parameters: word_list (list): List of words (strings). Returns: dict: Dictionary where keys are the alphabet letters (in lower case) and values are the lists of words starting with that letter. from collections import defaultdict categorized_dict = defaultdict(list) for word in word_list: first_letter = word[0].lower() categorized_dict[first_letter].append(word) return dict(categorized_dict)"},{"question":"Write a Python function that takes a list of integers and a target value. The function should return a list of unique pairs of integers from the input list that add up to the target value. Each pair should be a tuple, and the output list should be a list of tuples. Ensure that each pair is output in lexicographical order, and the entire output list should be sorted in lexicographical order as well. For example, if the input list is [1, 2, 3, 4, 3, 2] and the target is 5, the output should be [(1, 4), (2, 3)].","solution":"def find_pairs(nums, target): Finds unique pairs of integers from the input list that add up to the target value. Args: nums: List of integers. target: Integer target value. Returns: List of unique pairs (as tuples) that add up to the target value, sorted lexicographically. nums.sort() pairs = set() seen = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return sorted(list(pairs))"},{"question":"Develop a Python program that simulates a simple traffic light system for a single lane at an intersection. The traffic light should cycle through the colors Red, Green, and Yellow, in that order. Each color should remain active for a specified amount of time: Red for 7 seconds, Green for 5 seconds, and Yellow for 2 seconds. Implement this system using object-oriented programming principles. Additionally, provide a mechanism to simulate and display the status of the traffic light every second for one full cycle through the colors. Include appropriate methods to start and stop the simulation and demonstrate the output through a series of print statements showing the current light color and the remaining time for that color.","solution":"import time class TrafficLight: def __init__(self): # Initialize the traffic light with the durations for each color self.colors = [\\"Red\\", \\"Green\\", \\"Yellow\\"] self.durations = {\\"Red\\": 7, \\"Green\\": 5, \\"Yellow\\": 2} def simulate(self): # Simulate the traffic light by cycling through the colors for color in self.colors: duration = self.durations[color] for remaining_time in range(duration, 0, -1): print(f\\"Light: {color}, Time remaining: {remaining_time} seconds\\") time.sleep(1) def start(self): print(\\"Traffic Light Simulation Started\\") self.simulate() print(\\"Traffic Light Simulation Ended\\")"},{"question":"<p> Consider a rectangular grid with dimensions N by M (N rows and M columns). Each cell in the grid can either be free (.) or blocked (#). </p> <p> A robot starts at the top-left corner of the grid (1,1) and aims to reach the bottom-right corner (N,M). The robot can move exactly one cell to the right or one cell down at each step, but it cannot enter a blocked cell. </p> <p> Your task is to determine the number of distinct paths the robot can take to reach its destination. If there is no valid path, return 0. </p> <p> Write a function `count_paths(N: int, M: int, grid: List[str]) -> int` that takes as input the dimensions of the grid and the grid itself and returns the number of distinct paths from the top-left to the bottom-right. </p> <p> <b>Example:</b></p> <p> Input:</p> <pre> N = 3 M = 3 grid = [ \\"...\\", \\".#.\\", \\"...\\" ] </pre> <p> Output:</p> <pre> 2 </pre> <p> <b>Note:</b></p> <p> In the example above, the grid is: </p> <pre> ... .#. ... </pre> <p> There are 2 distinct paths from the top-left to the bottom-right: <ul> <li>Right -> Right -> Down -> Down</li> <li>Down -> Down -> Right -> Right</li> </ul> </p>","solution":"from typing import List def count_paths(N: int, M: int, grid: List[str]) -> int: if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1]"},{"question":"Write a function that takes a list of integers and returns a new list with each element being the cumulative sum of the elements up to that index. For example, if the input list is [1, 2, 3, 4], the output should be [1, 3, 6, 10]. The input list may contain negative numbers and zeros. Ensure your code handles edge cases such as an empty list appropriately.","solution":"def cumulative_sum(lst): Returns a new list with each element being the cumulative sum of the elements up to that index. Parameters: lst (list): A list of integers. Returns: list: A list where each element is the cumulative sum up to that index. if not lst: return [] cum_sum = [lst[0]] for i in range(1, len(lst)): cum_sum.append(cum_sum[-1] + lst[i]) return cum_sum"},{"question":"Design and implement a recommendation system that suggests new music tracks to listeners based on their listening history and personal preferences. The system should utilize collaborative filtering and content-based filtering techniques to generate accurate and personalized recommendations. Ensure the algorithm can handle a large dataset with diverse music genres and account for factors such as user feedback, temporal listening patterns, and emerging trends in music. Provide the algorithm\'s design architecture and an example of how it processes input data and outputs recommendations.","solution":"from collections import defaultdict import numpy as np class MusicRecommender: def __init__(self): self.user_listening_history = defaultdict(list) self.track_features = defaultdict(dict) self.user_feedback = defaultdict(dict) def add_listening_history(self, user_id, track_id): self.user_listening_history[user_id].append(track_id) def add_track_features(self, track_id, features): self.track_features[track_id] = features def add_user_feedback(self, user_id, track_id, rating): self.user_feedback[user_id][track_id] = rating def _get_genre_similarity(self, track_id1, track_id2): genres1 = self.track_features[track_id1].get(\'genres\', []) genres2 = self.track_features[track_id2].get(\'genres\', []) return len(set(genres1) & set(genres2)) / len(set(genres1) | set(genres2)) def _get_user_similarity(self, user_id1, user_id2): set1 = set(self.user_listening_history[user_id1]) set2 = set(self.user_listening_history[user_id2]) return len(set1 & set2) / len(set1 | set2) def recommend(self, user_id, top_n=10): user_history = self.user_listening_history[user_id] track_scores = defaultdict(float) for hist_track in user_history: for track, features in self.track_features.items(): if track not in user_history: genre_similarity = self._get_genre_similarity(hist_track, track) track_scores[track] += genre_similarity user_similarity_scores = defaultdict(float) for other_user in self.user_listening_history: if other_user != user_id: similarity = self._get_user_similarity(user_id, other_user) user_similarity_scores[other_user] = similarity for other_user, similarity in user_similarity_scores.items(): for track in self.user_listening_history[other_user]: if track not in user_history: track_scores[track] += similarity sorted_tracks = sorted(track_scores.items(), key=lambda item: item[1], reverse=True) recommended_tracks = [track for track, score in sorted_tracks[:top_n]] return recommended_tracks"},{"question":"Write a function that takes a list of integers as input and returns a subset of the list consisting of elements that are prime numbers. Additionally, the subset should be in descending order. For example, given the input list [10, 3, 7, 4, 11, 20], the output should be [11, 7, 3].","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def get_prime_subset(nums): Returns a subset of the input list consisting of prime elements in descending order. primes = [num for num in nums if is_prime(num)] return sorted(primes, reverse=True)"},{"question":"Create a Python function that reads a CSV file containing details about various products and their prices. The function should perform the following tasks: 1. Parse the CSV file and store the products with their prices in a suitable data structure. 2. Identify and return the top 5 most expensive products. 3. Identify and return the average price of the products. 4. Identify and return the names of products that are priced above the average price. Hint: You may use libraries like `csv` and `pandas` for handling the CSV file. Handle exceptions where the file might not exist or data might be missing. Consider edge cases like products with zero or negative prices and products with identical names.","solution":"import csv import pandas as pd from statistics import mean def parse_csv(file_path): Reads a CSV file, processes the products and their prices, and returns a dictionary of products with prices, the top 5 expensive products, the average price, and the products with price above the average price. products = {} try: # Using pandas to read the CSV file df = pd.read_csv(file_path) # Check if needed columns are present if \'product\' not in df.columns or \'price\' not in df.columns: raise ValueError(\\"CSV file must contain \'product\' and \'price\' columns\\") # Storing products and their prices in a dictionary for _, row in df.iterrows(): product = row[\'product\'] price = row[\'price\'] if pd.isna(price) or price < 0: continue # Skip invalid prices products[product] = price # Calculate the top 5 most expensive products top_5_expensive = sorted(products.items(), key=lambda item: item[1], reverse=True)[:5] # Calculate the average price average_price = mean(products.values()) # Identify products priced above the average above_average_price = [product for product, price in products.items() if price > average_price] except FileNotFoundError: return \\"CSV file not found.\\" return { \'products\': products, \'top_5_expensive\': top_5_expensive, \'average_price\': average_price, \'above_average_price\': above_average_price }"},{"question":"Write a program that finds the second largest number in a given list of integers. Your solution should handle edge cases such as lists with fewer than two elements or lists where all elements are the same. The function should be named `find_second_largest` and take a single parameter, a list of integers. The function should return the second largest number if it exists, otherwise return `None`. Example: ```python print(find_second_largest([3, 10, 5, 6])) # Output: 6 print(find_second_largest([3])) # Output: None print(find_second_largest([3, 3, 3])) # Output: None print(find_second_largest([])) # Output: None ```","solution":"def find_second_largest(nums): Returns the second largest number in the given list of integers. If the list has fewer than two distinct elements, returns None. if len(nums) < 2: return None first, second = None, None for num in nums: if first is None or num > first: first, second = num, first elif num != first and (second is None or num > second): second = num return second"},{"question":"Design a Python class named \\"BankAccount\\" with attributes such as `account_number`, `account_holder`, and `balance`. For additional functionality, implement methods for that class which include but are not limited to: - A method to deposit an amount to the account. - A method to withdraw an amount from the account and ensure that withdrawal does not exceed the current balance. - A method to display the current balance. - A method to validate the inputs for the attributes (`account_number` should be a string, `account_holder` should be a string, and `balance` should be a non-negative float). Furthermore, here is a sample erroneous code for the BankAccount class, and you need to correct the following code: ``` class BankAccount: def __init__(account_number, account_holder, balance) -> None: self.account_number = AccNumber self.account_holder = account_holder self.balance = bal def withdraw(amount): if amount > balance: print(\\"Insufficient balance\\") else: self.balance = balance - amount ```","solution":"class BankAccount: def __init__(self, account_number, account_holder, balance) -> None: self.validate_account_number(account_number) self.validate_account_holder(account_holder) self.validate_balance(balance) self.account_number = account_number self.account_holder = account_holder self.balance = balance def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive\\") self.balance += amount def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive\\") if amount > self.balance: raise ValueError(\\"Insufficient balance\\") self.balance -= amount def display_balance(self): return self.balance @staticmethod def validate_account_number(account_number): if not isinstance(account_number, str): raise ValueError(\\"Account number must be a string\\") @staticmethod def validate_account_holder(account_holder): if not isinstance(account_holder, str): raise ValueError(\\"Account holder must be a string\\") @staticmethod def validate_balance(balance): if not isinstance(balance, (int, float)) or balance < 0: raise ValueError(\\"Balance must be a non-negative number\\")"},{"question":"You\'re managing a library\'s digital system and need to keep track of book checkouts. Each book in the library is identified by a unique ISBN number, title, and author name. Patrons can check out multiple books, and each checkout entry records the patron\'s ID, ISBN number of the checked-out book, and the checkout and return dates. Your objectives are: 1. Allow patrons to check out books ensuring that no book can be checked out more than once at the same time. 2. Generate a report listing all books that are currently checked out, along with the patron\'s ID and checkout date. 3. Allow for a search functionality that can filter checkouts based on patron ID, book title, or author name. Write a program that provides the following functionalities: - Check out a book, accepting parameters such as patron ID, ISBN number, and checkout date. - Return a book, accepting parameters such as ISBN number and return date. - Generate a report of all currently checked-out books. - Search and filter checkouts based on patron ID, book title, or author name. Considerations: - Use a suitable data structure to manage the checkout entries efficiently. - Ensure concurrency issues are handled, assuming multiple patrons may request checkouts at the same time. - Provide clear and meaningful error messages for invalid operations, such as attempting to check out a book that\'s already checked out.","solution":"from datetime import date class Library: def __init__(self): self.books = {} self.checkouts = [] def checkout_book(self, patron_id, isbn, title, author, checkout_date): if isbn in self.books and \'return_date\' not in self.books[isbn]: raise ValueError(\\"Book is already checked out.\\") self.books[isbn] = { \'title\': title, \'author\': author, \'patron_id\': patron_id, \'checkout_date\': checkout_date } self.checkouts.append({ \'isbn\': isbn, \'patron_id\': patron_id, \'checkout_date\': checkout_date }) def return_book(self, isbn, return_date): if isbn not in self.books or \'return_date\' in self.books[isbn]: raise ValueError(\\"Invalid return. Either the book is not checked out or already returned.\\") self.books[isbn][\'return_date\'] = return_date def generate_report(self): report = [] for isbn, details in self.books.items(): if \'return_date\' not in details: report.append({ \'isbn\': isbn, \'title\': details[\'title\'], \'author\': details[\'author\'], \'patron_id\': details[\'patron_id\'], \'checkout_date\': details[\'checkout_date\'] }) return report def search_checkouts(self, search_term): results = [] for checkout in self.checkouts: book_details = self.books[checkout[\'isbn\']] if search_term in book_details[\'title\'] or search_term in book_details[\'author\'] or search_term == checkout[\'patron_id\']: results.append(checkout) return results"},{"question":"Design an algorithm for a stock trading strategy analysis using the Moving Average Convergence Divergence (MACD) indicator. Your solution should include functions for reading historical stock price data from a CSV file, calculating both the MACD line and the signal line, and finally, generating buy or sell signals based on the crossover points between these lines. Ensure that your code is well-organized and comments clearly explain each step of your algorithm. Use Python and any standard libraries you deem necessary (e.g., pandas, numpy, matplotlib).","solution":"import pandas as pd def read_stock_data(file_path): Reads historical stock price data from a CSV file. return pd.read_csv(file_path) def calculate_macd(data, short_window=12, long_window=26, signal_window=9): Calculates the MACD line and the signal line. data[\'EMA12\'] = data[\'Close\'].ewm(span=short_window, adjust=False).mean() data[\'EMA26\'] = data[\'Close\'].ewm(span=long_window, adjust=False).mean() data[\'MACD\'] = data[\'EMA12\'] - data[\'EMA26\'] data[\'Signal\'] = data[\'MACD\'].ewm(span=signal_window, adjust=False).mean() return data def generate_signals(data): Generates buy or sell signals based on the crossover points between the MACD and signal lines. data[\'Signal_Type\'] = \'Hold\' data.loc[(data[\'MACD\'] > data[\'Signal\']) & (data[\'MACD\'].shift(1) <= data[\'Signal\'].shift(1)), \'Signal_Type\'] = \'Buy\' data.loc[(data[\'MACD\'] < data[\'Signal\']) & (data[\'MACD\'].shift(1) >= data[\'Signal\'].shift(1)), \'Signal_Type\'] = \'Sell\' return data def analyze_stock(file_path): Complete analysis function to read data, compute MACD, and generate buy/sell signals. data = read_stock_data(file_path) data = calculate_macd(data) data = generate_signals(data) return data # Example usage # data = analyze_stock(\'historical_stock_prices.csv\') # print(data[[\'Date\', \'Close\', \'MACD\', \'Signal\', \'Signal_Type\']])"},{"question":"A social media platform wants to implement a new feature that displays the top N hashtags and the number of times they have been used in posts for a given time frame. Users can post content with hashtags, and the system needs to keep track of them. Your task is to write a function that processes the given list of posts and extracts the top N hashtags along with their counts. # Input - A list of dictionaries, where each dictionary represents a post. Each post has a `content` key with the text of the post. - An integer N, representing the number of top hashtags to return. # Output - A list of tuples, where each tuple contains a hashtag (as a string) and its count (as an integer). # Requirements - Hashtags are words that start with the `#` character. - Hashtags are case insensitive (e.g., `#Love` and `#love` should be considered the same hashtag). - Do not include the `#` symbol in the result. # Example The following list of posts: ```python posts = [ {\\"content\\": \\"Loving the sun! #sun #SunnyDay #Fun\\"}, {\\"content\\": \\"What a fun day with friends. #Fun #sun\\"}, {\\"content\\": \\"Today is a sunny day #SunnyDay #fun #BeHappy\\"}, ] ``` Given N=2, the function should return: ```python [(\\"fun\\", 3), (\\"sun\\", 2)] ``` # Constraints - Handle edge cases, such as no hashtags in the posts or fewer than N unique hashtags. - You may assume that the input posts list and the value of N will be reasonably sized for typical usage. # Function Signature ```python def get_top_hashtags(posts: List[Dict[str, str]], N: int) -> List[Tuple[str, int]]: pass ```","solution":"from collections import Counter from operator import itemgetter def get_top_hashtags(posts, N): hashtag_counter = Counter() for post in posts: content = post.get(\'content\', \'\') words = content.split() for word in words: if word.startswith(\'#\'): hashtag = word[1:].lower() # remove \'#\' and convert to lowercase hashtag_counter[hashtag] += 1 # Get the top N hashtags from the counter top_hashtags = hashtag_counter.most_common(N) return top_hashtags"},{"question":"Write a Python function that takes a string and returns whether it is a valid identifier. A valid identifier should meet the following criteria: 1. It must start with a letter (a-z, A-Z) or an underscore (_). 2. It must be followed by letters, digits (0-9), or underscores. 3. It must not be a reserved keyword in Python. Your implementation should leverage Python\'s built-in `keyword` module to check for reserved keywords. Test your function with the following examples: ```python test_cases = [\\"variable\\", \\"_Variable1\\", \\"2variable\\", \\"for\\", \\"while_\\", \\"__init__\\", \\"class\\"] ``` The function should return a dictionary where each key is the test case, and each value is a boolean indicating whether the input string is a valid identifier. For example: ```python { \\"variable\\": True, \\"_Variable1\\": True, \\"2variable\\": False, \\"for\\": False, \\"while_\\": True, \\"__init__\\": True, \\"class\\": False } ```","solution":"import keyword def is_valid_identifier(identifier): Returns whether a string is a valid identifier in Python. if not identifier.isidentifier() or keyword.iskeyword(identifier): return False return True def check_identifiers(test_cases): Takes a list of strings and returns a dictionary with the string as the key and a boolean indicating if it is a valid identifier as the value. return {case: is_valid_identifier(case) for case in test_cases}"},{"question":"Write a function `split_list(lst, N)` that takes a list `lst` of integers and an integer `N`, and splits the list into two sublists: one containing all integers less than or equal to `N`, and the other containing all integers greater than `N`. The function should return a tuple containing the two sublists in that order. For example: ```python def split_list(lst, N): # Your implementation here # Example usage: print(split_list([1, 4, 5, 8, 2, 12, 7, 3], 5)) # Output: ([1, 4, 5, 2, 3], [8, 12, 7]) print(split_list([10, 20, 5, 1, 4, 7, 3, 8], 10)) # Output: ([10, 5, 1, 4, 7, 3, 8], [20]) print(split_list([], 5)) # Output: ([], []) ```","solution":"def split_list(lst, N): Splits the list \'lst\' into two sublists: one containing all integers less than or equal to \'N\', and the other containing all integers greater than \'N\'. Returns a tuple containing the two sublists. less_equal_N = [x for x in lst if x <= N] greater_than_N = [x for x in lst if x > N] return (less_equal_N, greater_than_N)"},{"question":"Create a function called `most_frequent_word` that takes a string as input and returns the word that appears most frequently in the string. In case of a tie, return the word that appears first in the input string. Words are case-insensitive and punctuation should be ignored. Write the function in Python and include a brief explanation of your approach.","solution":"import re from collections import Counter def most_frequent_word(s): Returns the word that appears most frequently in the input string. If there is a tie, return the word that appears first in the input string. Words are case-insensitive and punctuation is ignored. # Convert to lower case to make it case insensitive s = s.lower() # Remove punctuation using regex words = re.findall(r\'bw+b\', s) # Count frequency of each word word_count = Counter(words) # Find the most common word most_common_word, most_common_count = None, 0 for word in words: if word_count[word] > most_common_count: most_common_word = word most_common_count = word_count[word] return most_common_word"},{"question":"Write a function that takes a string as input and returns a new string where any instances of the words \\"Python\\" or \\"coding\\" are replaced by the string \\"[REDACTED]\\". The function should be case-insensitive and maintain the original case of the other parts of the string. For example: ``` Input: \\"I love Python!\\" Output: \\"I love [REDACTED]!\\" Input: \\"Coding is fun.\\" Output: \\"[REDACTED] is fun.\\" Input: \\"python and CODING are essential skills.\\" Output: \\"[REDACTED] and [REDACTED] are essential skills.\\" ```","solution":"import re def redact_python_coding(s): Replaces any instances of the words \\"Python\\" or \\"coding\\" with \\"[REDACTED]\\" in a case-insensitive manner. Args: s (str): The input string. Returns: str: The modified string with \\"Python\\" and \\"coding\\" replaced by \\"[REDACTED]\\". return re.sub(r\'b(python|coding)b\', \'[REDACTED]\', s, flags=re.IGNORECASE)"},{"question":"Prompt the user to input a phrase or sentence and then output a modified version where every vowel (a, e, i, o, u) is replaced with the next vowel in the sequence (with \'u\' replaced by \'a\'). Display the modified sentence. User Input: This is a test sentence.","solution":"def replace_vowels(phrase): Replaces every vowel in the phrase with the next vowel in the sequence. \'a\' -> \'e\', \'e\' -> \'i\', \'i\' -> \'o\', \'o\' -> \'u\', \'u\' -> \'a\' vowel_map = {\'a\': \'e\', \'e\': \'i\', \'i\': \'o\', \'o\': \'u\', \'u\': \'a\', \'A\': \'E\', \'E\': \'I\', \'I\': \'O\', \'O\': \'U\', \'U\': \'A\'} return \'\'.join(vowel_map.get(char, char) for char in phrase) # Example Usage: # user_input = input(\\"Enter a phrase or sentence: \\") # print(replace_vowels(user_input))"},{"question":"Implement a function `compress_string` that performs basic string compression using the counts of repeated characters. For example, the string `aabcccccaaa` would become `a2b1c5a3`. If the \\"compressed\\" string would not become smaller than the original string, your function should return the original string. You can assume the string has only uppercase and lowercase letters (a-z). **Function Signature:** `def compress_string(s: str) -> str:` **Examples:** ``` compress_string(\\"aabcccccaaa\\") -> \\"a2b1c5a3\\" compress_string(\\"abcdef\\") -> \\"abcdef\\" compress_string(\\"aaaabbbbccccddddeeee\\") -> \\"a4b4c4d4e4\\" compress_string(\\"aabbcc\\") -> \\"aabbcc\\" ```","solution":"def compress_string(s: str) -> str: Compresses the given string using counts of repeated characters. Parameters: - s (str): The string to be compressed. Returns: - str: The compressed string or the original string if compressed version is not shorter. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(f\\"{s[i - 1]}{count}\\") count = 1 # Add the last seen character count compressed.append(f\\"{s[-1]}{count}\\") # Generate the compressed string compressed_string = \\"\\".join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Write a code to find the longest palindromic substring in a given string. Do not use any built-in string functions for substring manipulation. Example: string = \\"babad\\" Output: \\"bab\\" (or \\"aba\\" - both are correct) string = \\"cbbd\\" Output: \\"bb\\"","solution":"def longest_palindromic_substring(s): if not s: return \\"\\" n = len(s) start = 0 end = 0 def expand_around_center(s, left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(n): left1, right1 = expand_around_center(s, i, i) left2, right2 = expand_around_center(s, i, i + 1) if right1 - left1 > end - start: start, end = left1, right1 if right2 - left2 > end - start: start, end = left2, right2 return s[start:end + 1]"},{"question":"Problem Statement You are asked to build a **Bookshop Management System** using Python. The system should allow users to add, update, view, and delete book records. Additionally, it should support filtering of books based on various criteria such as genre and author. The system should include proper data validation to ensure that required fields are present and that data follows expected formats. The project should follow these requirements: Requirements # 1. Book Class Write a Python class `Book` that represents a book with the following attributes: - `book_id` (type: int) - Unique identifier for the book. - `title` (type: str) - Title of the book. - `author` (type: str) - Author of the book. - `genre` (type: str) - Genre of the book. - `price` (type: float) - Price of the book. The `Book` class should have the following methods: - `__init__` method to initialize the book attributes. - `__str__` method to return a string representation of the book. # 2. Bookshop Class Write a Python class `Bookshop` that represents the bookshop with the following functionalities: - Ability to add a book to the shop using the method `add_book(book: Book) -> None`. - List all books in the shop using the method `list_books() -> List[Book]`. - Find books by genre using the method `find_by_genre(genre: str) -> List[Book]`. - Find books by author using the method `find_by_author(author: str) -> List[Book]`. - Update the details of a book using the method `update_book(book_id: int, title: Optional[str], author: Optional[str], genre: Optional[str], price: Optional[float]) -> None`. - Remove a book from the shop using the method `remove_book(book_id: int) -> None`. # 3. Sample Interaction Write a sample interaction of the classes that: - Adds several books to the bookshop. - Lists all books. - Searches books by genre and author. - Updates a book\'s details. - Deletes a book from the shop. Example Output Your submission should include the implementation of the `Book` and `Bookshop` classes and a demonstration of their usage. Constraints 1. Each method should handle invalid input appropriately by raising appropriate exceptions. 2. **Book**: Price should always be positive. 3. **Bookshop**: No two books should have the same `book_id`. # Sample Code Implement the following data structures and interface definitions: ```python class Book: def __init__(self, book_id: int, title: str, author: str, genre: str, price: float): # implement the constructor here def __str__(self) -> str: # implement the string representation here class Bookshop: def __init__(self): # implement the constructor here def add_book(self, book: Book) -> None: # implement add_book here def list_books(self) -> List[Book]: # implement list_books here def find_by_genre(self, genre: str) -> List[Book]: # implement find_by_genre here def find_by_author(self, author: str) -> List[Book]: # implement find_by_author here def update_book(self, book_id: int, title: Optional[str] = None, author: Optional[str] = None, genre: Optional[str] = None, price: Optional[float] = None) -> None: # implement update_book here def remove_book(self, book_id: int) -> None: # implement remove_book here # Demonstration code # Add your sample interaction code here ``` Complete the implementation carefully, paying attention to requirements and constraints.","solution":"class Book: def __init__(self, book_id: int, title: str, author: str, genre: str, price: float): if price <= 0: raise ValueError(\\"Price must be positive\\") self.book_id = book_id self.title = title self.author = author self.genre = genre self.price = price def __str__(self) -> str: return f\\"Book ID: {self.book_id}, Title: {self.title}, Author: {self.author}, Genre: {self.genre}, Price: {self.price:.2f}\\" class Bookshop: def __init__(self): self.books = [] def add_book(self, book: Book) -> None: if any(existing_book.book_id == book.book_id for existing_book in self.books): raise ValueError(\\"Book with this ID already exists\\") self.books.append(book) def list_books(self) -> list: return self.books def find_by_genre(self, genre: str) -> list: return [book for book in self.books if book.genre.lower() == genre.lower()] def find_by_author(self, author: str) -> list: return [book for book in self.books if book.author.lower() == author.lower()] def update_book(self, book_id: int, title: str = None, author: str = None, genre: str = None, price: float = None) -> None: book = next((book for book in self.books if book.book_id == book_id), None) if book is None: raise ValueError(\\"Book not found\\") if title is not None: book.title = title if author is not None: book.author = author if genre is not None: book.genre = genre if price is not None: if price <= 0: raise ValueError(\\"Price must be positive\\") book.price = price def remove_book(self, book_id: int) -> None: book = next((book for book in self.books if book.book_id == book_id), None) if book is None: raise ValueError(\\"Book not found\\") self.books.remove(book) # Sample Code # Create bookshop instance bookshop = Bookshop() # Add books book1 = Book(book_id=1, title=\\"Book One\\", author=\\"Author A\\", genre=\\"Fiction\\", price=19.99) book2 = Book(book_id=2, title=\\"Book Two\\", author=\\"Author B\\", genre=\\"Non-Fiction\\", price=25.50) book3 = Book(book_id=3, title=\\"Book Three\\", author=\\"Author A\\", genre=\\"Fiction\\", price=18.00) bookshop.add_book(book1) bookshop.add_book(book2) bookshop.add_book(book3) # List all books print(\\"All books in the bookshop:\\") for book in bookshop.list_books(): print(book) # Find books by genre print(\\"nBooks in genre \'Fiction\':\\") for book in bookshop.find_by_genre(\\"Fiction\\"): print(book) # Find books by author print(\\"nBooks by \'Author A\':\\") for book in bookshop.find_by_author(\\"Author A\\"): print(book) # Update a book\'s details bookshop.update_book(book_id=1, title=\\"Updated Book One\\", price=21.99) print(\\"nUpdated book details:\\") book = next(book for book in bookshop.list_books() if book.book_id == 1) print(book) # Remove a book from the shop bookshop.remove_book(book_id=2) print(\\"nBooks after removing book with ID 2:\\") for book in bookshop.list_books(): print(book)"},{"question":"Write a Python program to implement a simple version of the snake game. The game should be played in a console window and the player should control the snake using keyboard arrow keys. The snake should be represented by a series of \'O\' characters on the screen. The program should detect when the snake eats the food (represented by a \'*\') and increase the length of the snake. If the snake runs into itself or the walls of the game area, the game should end. The dimensions of the game area should be adjustable, and the food should appear at random locations within this area. The game should also have a scoring system that increases with each piece of food consumed. Ensure the code follows PEP8 style guide and includes appropriate comments and docstrings.","solution":"import curses from random import randint def create_window(height, width): Creates a new window for the game with the given height and width, initializes the curses settings and sets up the window border. curses.initscr() window = curses.newwin(height, width, 0, 0) window.keypad(True) curses.curs_set(0) window.border(0) return window def place_food(snake, height, width): Places food at a random location that is not occupied by the snake. food = None while food is None: food = (randint(1, height-2), randint(1, width-2)) if food in snake: food = None return food def main(): Main function to run the snake game. height, width = 20, 60 # Adjustable dimensions window = create_window(height, width) snake = [(height//2, width//4), (height//2, width//4 - 1), (height//2, width//4 - 2)] food = place_food(snake, height, width) window.addch(food[0], food[1], \'*\') ESC = 27 key = curses.KEY_RIGHT score = 0 while key != ESC: window.addstr(0, 2, \'Score: \' + str(score) + \' \') window.timeout(150) next_key = window.getch() key = key if next_key == -1 else next_key if key not in [curses.KEY_RIGHT, curses.KEY_LEFT, curses.KEY_UP, curses.KEY_DOWN, ESC]: continue head = snake[0] if key == curses.KEY_RIGHT: new_head = (head[0], head[1] + 1) elif key == curses.KEY_LEFT: new_head = (head[0], head[1] - 1) elif key == curses.KEY_UP: new_head = (head[0] - 1, head[1]) elif key == curses.KEY_DOWN: new_head = (head[0] + 1, head[1]) if (new_head[0] in [0, height-1] or new_head[1] in [0, width-1] or new_head in snake): break snake.insert(0, new_head) if new_head == food: score += 1 food = place_food(snake, height, width) window.addch(food[0], food[1], \'*\') else: tail = snake.pop() window.addch(tail[0], tail[1], \' \') window.addch(new_head[0], new_head[1], \'O\') curses.endwin() print(f\\"Game Over! Your final score is {score}.\\") if __name__ == \\"__main__\\": main()"},{"question":"Given an erroneous and correct code samples, fix the erroneous one to accurately find and output the first unique (non-repeating) character in a given string, if it exists. If no unique character is found, output \'None\'. For instance, consider the string: s = \'swiss\'. #Erroneous code sample: ```python def first_unique_char(s): counts = {} for char in s: if char in counts: counts[char] += 1 else: counts[char] = 1 for char in counts: if counts[char] == 1: return char return None print(first_unique_char(\'swiss\')) # Incorrect output ``` #Correct code sample: ```python def first_unique_char(s): counts = {} for char in s: if char in counts: counts[char] += 1 else: counts[char] = 1 for char in s: # Iterate through the string to maintain order if counts[char] == 1: return char return \'None\' print(first_unique_char(\'swiss\')) # Correct output ``` Note: The correct solution iterates through the string order rather than the counts dictionary to ensure the first unique character in the original string order is returned.","solution":"def first_unique_char(s): counts = {} for char in s: if char in counts: counts[char] += 1 else: counts[char] = 1 for char in s: # Iterate through the string to maintain order if counts[char] == 1: return char return \'None\'"},{"question":"Write a Python function `find_substring_indices(s: str, sub: str) -> List[int]` that finds all the starting indices of the substring `sub` in the string `s`. The function should return a list of integers representing these starting indices. If the substring `sub` is not found within the string `s`, the function should return an empty list. # Examples ```python print(find_substring_indices(\\"hellohello\\", \\"lo\\")) # Output: [3, 8] print(find_substring_indices(\\"aaaaa\\", \\"aa\\")) # Output: [0, 1, 2, 3] print(find_substring_indices(\\"abc\\", \\"d\\")) # Output: [] ``` # Constraints - The length of string `s` and `sub` will be at most `10^6`. - The substring `sub` will have a length of at least `1`.","solution":"from typing import List def find_substring_indices(s: str, sub: str) -> List[int]: Finds all starting indices of the substring `sub` in the string `s`. Parameters: s (str): The string to search within. sub (str): The substring to search for. Returns: List[int]: A list of starting indices of `sub` in `s`. indices = [] start = 0 while True: start = s.find(sub, start) if start == -1: break indices.append(start) start += 1 # Increment start to search for next non-overlapping occurrence return indices"},{"question":"Utilize the numpy and pandas libraries in Python. Create a DataFrame with columns \\"Name\\", \\"Age\\", \\"Salary\\", and \\"Department\\". The \\"Name\\" column should include 5 different names, the \\"Age\\" column should include ages ranging between 25 to 45, the \\"Salary\\" column should contain salaries between 50,000 to 100,000, and the \\"Department\\" column should have categorical values: \\"HR\\", \\"Development\\", \\"Marketing\\", \\"Sales\\", and \\"Support\\". After constructing the DataFrame, calculate the average salary for each department.","solution":"import pandas as pd import numpy as np def create_dataframe(): data = { \\"Name\\": [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\", \\"Eve\\"], \\"Age\\": [28, 35, 30, 40, 45], \\"Salary\\": [70000, 90000, 56000, 80000, 100000], \\"Department\\": [\\"HR\\", \\"Development\\", \\"Marketing\\", \\"Sales\\", \\"Support\\"] } df = pd.DataFrame(data) return df def calculate_average_salary_by_department(df): return df.groupby(\\"Department\\")[\\"Salary\\"].mean()"},{"question":"Write a function in Python that takes a list of integers and returns the list sorted in ascending order. Your solution should not use any built-in sorting utilities. Instead, implement the merge sort algorithm to accomplish the task. Ensure that the function is efficient and handle edge cases such as an empty list or a list with a single element.","solution":"def merge_sort(arr): Sorts a list of integers in ascending order using the merge sort algorithm. Parameters: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers. if len(arr) <= 1: return arr def merge(left, right): sorted_list = [] while left and right: if left[0] < right[0]: sorted_list.append(left.pop(0)) else: sorted_list.append(right.pop(0)) sorted_list.extend(left if left else right) return sorted_list mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half)"},{"question":"Write a function that takes a list of integers and an integer `k`, and returns the number of pairs of integers in the list that sum up to `k`. Each pair should be counted only once, regardless of the order of the integers. **Input:** - A list of integers `nums` (0 <= len(nums) <= 10^5) where each integer is in the range of [-10^9, 10^9]. - An integer `k` (-10^9 <= k <= 10^9). **Output:** - An integer representing the number of unique pairs that sum up to `k`. **Example:** ```python def count_pairs(nums, k): # Implement the function here print(count_pairs([1, 2, 3, 4, 3], 6)) # Output: 2 print(count_pairs([1, 1, 1, 1], 2)) # Output: 1 print(count_pairs([1, 5, 7, -1], 6)) # Output: 2 ```","solution":"def count_pairs(nums, k): Returns the number of unique pairs of integers in the list that sum up to k. if not nums: return 0 count = 0 num_set = set() visited = set() for num in nums: target = k - num if target in num_set and (target, num) not in visited and (num, target) not in visited: count += 1 visited.add((num, target)) num_set.add(num) return count"},{"question":"Implement a function in Python that takes a list of integers and returns a new list containing only the prime numbers from the original list. Your function should efficiently check for primes and should preserve the order of the numbers from the initial list. Example: ```python Input: [3, 4, 7, 10, 17] Output: [3, 7, 17] ```","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Filter and return a list of prime numbers from the given list. return [num for num in numbers if is_prime(num)]"},{"question":"The task is to implement a simple text-based adventure game in Python. The game will involve moving through different rooms in a building, with each room having its own description and a list of possible actions. # Problem Statement **Simple Text-Based Adventure Game** Create a simple text-based adventure game in Python. The game will consist of multiple rooms, each with its own description and actions a player can perform. The player will navigate through these rooms based on their choices. Requirements: 1. Define a `Room` class that should have the following attributes: - `name`: A string representing the room\'s name. - `description`: A string with a brief description of the room. - `actions`: A dictionary with keys as action descriptions and values as names of the rooms that the actions lead to. 2. Create at least three rooms with meaningful descriptions and actions. For example: - **Living Room**: \\"You are in the living room. There is a door to the north.\\" - **Kitchen**: \\"You are in the kitchen. There is a door to the south.\\" - **Bedroom**: \\"You are in the bedroom. There is a door to the east and one to the west.\\" 3. Implement a function `play_game(start_room)` that starts the game from the `start_room`. The function should: - Print the description of the current room. - List the possible actions the player can take. - Take the player\'s input for the action they want to perform and move to the corresponding room. If an invalid action is given, prompt the player again. - Continue this process until the player decides to quit the game (you can define an action \\"quit\\" that ends the game). 4. Add a main block to your script to initialize the rooms and start the game in one of the rooms, e.g., the living room. Example Interaction: ```plaintext You are in the living room. There is a door to the north. Possible actions: go north, quit > go north You are in the kitchen. There is a door to the south. Possible actions: go south, quit > quit ``` Constraints: - The game should be case insensitive for the actions, i.e., both \\"GO NORTH\\" and \\"go north\\" should be accepted. - You can assume the user will always enter a valid command demarcated by pressing Enter. You are free to design the interaction and room layout as you prefer, but ensure it is logical and offers at least three distinct rooms for the player to move through.","solution":"class Room: def __init__(self, name, description, actions): self.name = name self.description = description self.actions = actions def play_game(start_room): current_room = start_room while True: print(current_room.description) possible_actions = \', \'.join(current_room.actions.keys()) print(f\\"Possible actions: {possible_actions}\\") action = input(\\"> \\").strip().lower() if action == \\"quit\\": print(\\"Thanks for playing!\\") break elif action in current_room.actions: next_room_name = current_room.actions[action] current_room = Room.rooms[next_room_name] else: print(\\"Invalid action, please try again.\\") # Define rooms living_room = Room( name=\\"Living Room\\", description=\\"You are in the living room. There is a door to the north.\\", actions={\\"go north\\": \\"Kitchen\\", \\"quit\\": \\"Quit\\"} ) kitchen = Room( name=\\"Kitchen\\", description=\\"You are in the kitchen. There is a door to the south.\\", actions={\\"go south\\": \\"Living Room\\", \\"quit\\": \\"Quit\\"} ) bedroom = Room( name=\\"Bedroom\\", description=\\"You are in the bedroom. There is a door to the east and one to the west.\\", actions={\\"go east\\": \\"Living Room\\", \\"go west\\": \\"Kitchen\\", \\"quit\\": \\"Quit\\"} ) # Create a central repository of all rooms Room.rooms = { \\"Living Room\\": living_room, \\"Kitchen\\": kitchen, \\"Bedroom\\": bedroom, } # Main block to start the game if __name__ == \\"__main__\\": play_game(living_room)"},{"question":"Create a function that takes a string s and returns the length of the longest substring with at most 2 distinct characters. The function should be efficient enough to handle strings of significant length. Consider a string s = \\"eceba\\". The function should find \\"ece\\" as the longest substring with at most 2 distinct characters with length 3. Another example is s = \\"abcbbbbcccbdddadacb\\", where the longest substring with at most 2 distinct characters is \\"bcbbbbcccb\\" with length 10. You need to implement the following function: - int longestSubstringWithTwoDistinctChars(String s): Takes a string s as input and returns an integer representing the length of the longest substring with at most 2 distinct characters. Ensure that your solution is optimized and has a time complexity of O(n).","solution":"def longestSubstringWithTwoDistinctChars(s): Returns the length of the longest substring with at most 2 distinct characters. if len(s) == 0: return 0 left, right = 0, 0 char_map = {} max_len = 0 while right < len(s): if len(char_map) <= 2: char_map[s[right]] = right right += 1 if len(char_map) > 2: left_most_index = min(char_map.values()) del char_map[s[left_most_index]] left = left_most_index + 1 max_len = max(max_len, right - left) return max_len"},{"question":"Write a function that takes a string as input and returns the sum of numbers within the string. The input string contains both letters and digits, where the numbers can be either single-digit or multi-digit (i.e., consecutive digits should be considered as a whole number). Ignore any letter or non-digit characters. For example, the string \\"abc123xy7ab89\\" should be processed to return 219 (123 + 7 + 89). Input: abc123xy7ab89","solution":"import re def sum_of_numbers_in_string(s): Returns the sum of numbers within the input string. Parameters: s (str): Input string containing both letters and digits. Returns: int: Sum of all numbers found in the string. numbers = re.findall(r\'d+\', s) return sum(int(num) for num in numbers)"},{"question":"Develop a Python function that takes an integer as input and returns the largest prime factor of that number. The function should handle edge cases like negative numbers, zero, and one gracefully by returning None or an appropriate message. Example: ```python largest_prime_factor(13195) => 29 largest_prime_factor(17) => 17 largest_prime_factor(0) => None largest_prime_factor(-5) => None ```","solution":"def largest_prime_factor(n): Returns the largest prime factor of a given integer n. For non-positive integers, the function returns None. if n <= 1: return None def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True prime_factor = 1 candidate = 2 while n > 1 and candidate * candidate <= n: if n % candidate == 0: if is_prime(candidate): prime_factor = candidate while n % candidate == 0: n //= candidate candidate += 1 if n > 1: prime_factor = n return prime_factor"},{"question":"Develop a Python function that receives a list of integers, and two integers `x` and `y`, then returns a new list containing only the integers from the original list that fall inclusively between `x` and `y`. The list should be returned in ascending order regardless of the order in the original list. If no integers satisfy the condition, the function should return the string \'No values found\'. If the list is empty, the function should return \'Invalid input\'. Please correct the following Python code to achieve the described functionality: ```python def filter_and_sort(int_list, x, y): result = [] for num in int_list: if num < x and num > y: result.append(num) return sorted(result) int_list = [13, 5, 22, 9, 3, 7] x = 4 y = 10 ``` Consider the following: - Handle the case when either `x` is greater than `y` or `y` is greater than `x` grammatically. - Ensure the original list is not altered. - Properly handle edge cases such as an empty list or if the resulting list is empty. - If no integers in the original list meet the criteria, the function should return \'No values found.\'","solution":"def filter_and_sort(int_list, x, y): Filters the list to include only numbers between x and y (inclusive), and returns the sorted list. If no such numbers are present, returns \'No values found\'. If the input list is empty, returns \'Invalid input\'. if not int_list: return \'Invalid input\' if x > y: x, y = y, x result = [num for num in int_list if x <= num <= y] if not result: return \'No values found\' return sorted(result)"},{"question":"Given a list of integers, find the maximum product of any three numbers. Write a function named `maximum_product_of_three` to achieve this. You cannot use any built-in functions that directly solve the problem. ```python def maximum_product_of_three(nums): # Your code here # Sample input: nums = [1, 10, 2, 6, 5, 3] # Expected output: 300 print(maximum_product_of_three(nums)) # Output: 300 ```","solution":"def maximum_product_of_three(nums): Returns the maximum product that can be obtained from any three numbers in the list. if len(nums) < 3: raise ValueError(\\"The input list must have at least three numbers.\\") # Initialize variables to store the three largest and two smallest numbers max1 = max2 = max3 = float(\'-inf\') min1 = min2 = float(\'inf\') for num in nums: # Update the maximum values if num > max1: max3 = max2 max2 = max1 max1 = num elif num > max2: max3 = max2 max2 = num elif num > max3: max3 = num # Update the minimum values if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num # Calculate the maximum product of three numbers return max(max1 * max2 * max3, max1 * min1 * min2)"},{"question":"Write a Python function named `transpose_matrix` that takes a two-dimensional list (matrix) as input and returns its transpose. The function should handle matrices of any size. For example, given the matrix `[[1, 2, 3], [4, 5, 6]]`, the function should return `[[1, 4], [2, 5], [3, 6]]`.","solution":"def transpose_matrix(matrix): Returns the transpose of the given matrix. Args: matrix (list of list of int): The input matrix to be transposed. Returns: list of list of int: The transposed matrix. if not matrix or not matrix[0]: return [] return [list(row) for row in zip(*matrix)]"},{"question":"Implement a function to determine if a given string is a valid hexadecimal number. A valid hexadecimal number can contain digits (0-9) and letters (A-F) or (a-f), and may optionally start with \\"0x\\" or \\"0X\\". The function should return a boolean indicating whether the input string meets these criteria. ``` def is_valid_hex(s: str) -> bool: pass # Examples print(is_valid_hex(\\"0x1A3F\\")) # Expected output: True print(is_valid_hex(\\"1A3F\\")) # Expected output: True print(is_valid_hex(\\"123G\\")) # Expected output: False print(is_valid_hex(\\"0XABC\\")) # Expected output: True print(is_valid_hex(\\"GHI\\")) # Expected output: False ```","solution":"def is_valid_hex(s: str) -> bool: Determines if a given string is a valid hexadecimal number. A valid hexadecimal number can contain digits (0-9) and letters (A-F) or (a-f), and may optionally start with \\"0x\\" or \\"0X\\". Parameters: s (str): The string to be checked. Returns: bool: True if the string is a valid hexadecimal number, False otherwise. if s.startswith(\\"0x\\") or s.startswith(\\"0X\\"): s = s[2:] if len(s) == 0: return False for char in s: if not (char.isdigit() or (\'a\' <= char <= \'f\') or (\'A\' <= char <= \'F\')): return False return True"},{"question":"**Reverse Words in a Sentence** Write a function that takes a sentence as input and reverses the order of the words while preserving the original order of characters within each word. Additionally, ensure that multiple spaces between words are reduced to a single space, and leading or trailing spaces are removed. **Function Signature:** ```python def reverse_words_in_sentence(sentence: str) -> str: ``` **Input:** - sentence: A string containing a sentence with words and possibly multiple spaces (1 <= len(sentence) <= 1000). **Output:** - Return a single string with the words reversed and extra spaces removed. **Example:** ```python # Input: sentence = \\" Hello world this is an example \\" # Output: \\"example an is this world Hello\\" ``` **Explanation:** 1. The original sentence contains multiple spaces and words. 2. The words are reversed while maintaining the character order within each word. 3. Extra spaces are reduced to a single space. 4. Leading and trailing spaces are removed.","solution":"def reverse_words_in_sentence(sentence: str) -> str: Reverses the order of words in the sentence while preserving the order of characters within each word. Extra spaces between words are reduced to a single space, and leading or trailing spaces are removed. Parameters: sentence (str): The input sentence. Returns: str: The sentence with words reversed and extra spaces removed. # Split the sentence by spaces and filter out any empty strings words = [word for word in sentence.split(\' \') if word] # Reverse the order of the words and join them with a single space reversed_sentence = \' \'.join(reversed(words)) return reversed_sentence"},{"question":"Write an efficient Python function that takes a string consisting of a series of words separated by spaces and returns a dictionary with each unique word as a key and its frequency of occurrence as the value. The function should ignore case differences (consider \'Word\' and \'word\' as the same word) and handle punctuation marks appropriately (e.g., \\"hello,\\" and \\"hello\\" should be treated as the same word). Implement unit tests to validate your solution, ensuring correctness for edge cases like empty strings and strings with only punctuation.","solution":"import re from collections import defaultdict def word_frequency(text): Returns a dictionary where the keys are unique words (case-insensitive) and the values are their frequencies of occurrence in the text. Punctuation marks are ignored. text = text.lower() # Convert text to lowercase to ignore case differences words = re.findall(r\'bw+b\', text) # Extract words using regex ignoring punctuation freq_dict = defaultdict(int) for word in words: freq_dict[word] += 1 return dict(freq_dict)"},{"question":"In Python, design a function that takes an integer as an input and returns a list of all prime numbers less than or equal to the given integer. Ensure that the function is efficient and uses appropriate algorithms to determine the prime numbers.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] # Initialize a boolean array with True values prime = [True] * (n + 1) prime[0], prime[1] = False, False # 0 and 1 are not prime numbers for p in range(2, int(n**0.5) + 1): if prime[p]: for multiple in range(p * p, n + 1, p): prime[multiple] = False # Collecting all prime numbers primes = [num for num, is_prime in enumerate(prime) if is_prime] return primes"},{"question":"Write a function that takes a string as input and returns the length of the longest substring with all distinct characters. The function should efficiently handle large inputs and consider edge cases such as an empty string or a string with one character. **Example:** Input: \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Input: \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. Input: \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. Input: \\"\\" Output: 0 Explanation: The answer is an empty string, with the length of 0.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. char_index_map = {} start = 0 max_length = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index max_length = max(max_length, index - start + 1) return max_length"},{"question":"Write a function that takes a string containing a mathematical expression with addition and multiplication operations (e.g., \\"2+3*4\\") and evaluates it to return the correct result. The function should respect the mathematical order of operations, where multiplication is evaluated before addition. If the input is invalid, return an appropriate error message. You are not allowed to use the `eval()` function. For example: - evaluate_expression(\\"2+3*4\\") should return 14. - evaluate_expression(\\"10+5*2+6\\") should return 26. - evaluate_expression(\\"3+2*\\") should return \\"Invalid expression\\".","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string with addition and multiplication, respecting the order of operations. Returns the evaluated result or an error message if the expression is invalid. import re # Check if the expression is valid (only contains digits, \'+\', and \'*\') if not re.fullmatch(r\'[0-9+*]+\', expression) or re.search(r\'[+*]{2,}\', expression) or expression[-1] in \'+*\': return \\"Invalid expression\\" # Split the expression into parts by \'+\' addition_parts = expression.split(\'+\') # Function to handle multiplication within a part def evaluate_multiplication(part): components = part.split(\'*\') result = 1 for component in components: result *= int(component) return result # Evaluate each part and sum them up result = 0 for part in addition_parts: result += evaluate_multiplication(part) return result"},{"question":"Implement a function that checks whether a given string is a palindrome, ignoring spaces, punctuation, and case. A palindrome is a string that reads the same forward and backward. Test the function with various inputs, including strings with mixed cases, spaces, and punctuation. Evaluate its time complexity. Example: Input: \\"A man, a plan, a canal, Panama!\\" Output: True (Palindrome)","solution":"import re def is_palindrome(s): Checks whether a given string is a palindrome, ignoring spaces, punctuation, and case. cleaned_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return cleaned_s == cleaned_s[::-1]"},{"question":"Design and implement a Python class named `CircularQueue` which represents a fixed-size circular queue data structure. The class should have methods to enqueue an element, dequeue an element, and get the current size of the queue. Additionally, implement a method to check if the queue is empty and another method to check if the queue is full. - The `enqueue` method should add an element to the end of the queue. If the queue is full, it should raise an OverflowError. - The `dequeue` method should remove and return the front element of the queue. If the queue is empty, it should raise an IndexError. - The `size` method should return the number of elements currently in the queue. - The `is_empty` method should return `True` if the queue is empty and `False` otherwise. - The `is_full` method should return `True` if the queue is full and `False` otherwise. Additionally, write unit tests to confirm that all methods perform correctly, especially focusing on edge cases such as enqueuing and dequeuing from full and empty queues, respectively. Consider the proper handling of the circular nature of the queue in your implementation.","solution":"class CircularQueue: def __init__(self, capacity): Initialize the circular queue with a fixed capacity. self.capacity = capacity self.queue = [None] * capacity self.head = 0 self.tail = 0 self.size = 0 def enqueue(self, element): Add an element to the end of the queue. Raise an OverflowError if the queue is full. if self.is_full(): raise OverflowError(\\"Queue is full\\") self.queue[self.tail] = element self.tail = (self.tail + 1) % self.capacity self.size += 1 def dequeue(self): Remove and return the front element of the queue. Raise an IndexError if the queue is empty. if self.is_empty(): raise IndexError(\\"Queue is empty\\") element = self.queue[self.head] self.queue[self.head] = None # Clear the slot self.head = (self.head + 1) % self.capacity self.size -= 1 return element def get_size(self): Return the number of elements currently in the queue. return self.size def is_empty(self): Return True if the queue is empty, False otherwise. return self.size == 0 def is_full(self): Return True if the queue is full, False otherwise. return self.size == self.capacity"},{"question":"In a large-scale software system, we have a task to handle a log file that records system events in a specific format. Each line in the log file represents an event, consisting of a timestamp (in chronological order), an event type (INFO, WARN, ERROR), and a message. For instance: ``` 2023-01-01 12:00:00 INFO User logged in 2023-01-01 12:05:00 WARN Disk space running low 2023-01-01 12:10:00 ERROR Failed to save user data 2023-01-01 12:15:00 INFO User logged out ``` Write a function `summarize_log_events(log_file: str) -> dict` that takes the filename of a log file as input, reads the contents of the file, and returns a summary dictionary. The summary should indicate the count of each event type (INFO, WARN, ERROR). For example, given the log file content shown above, the function should return: ```python { \'INFO\': 2, \'WARN\': 1, \'ERROR\': 1 } ``` # Guidelines - Ensure the function reads the log file efficiently. - Consider edge cases such as an empty log file. - Maintain the original order of the event types in the output dictionary, even if the count for certain types is zero.","solution":"def summarize_log_events(log_file: str) -> dict: Reads the log file and returns a summary dictionary with the count of each event type. :param log_file: str - The filename of the log file. :return: dict - Summary dictionary with counts of INFO, WARN, and ERROR events. event_types = [\'INFO\', \'WARN\', \'ERROR\'] summary = {event_type: 0 for event_type in event_types} try: with open(log_file, \'r\') as file: for line in file: parts = line.split() if len(parts) >= 3: event_type = parts[2] if event_type in summary: summary[event_type] += 1 except FileNotFoundError: print(f\\"The file {log_file} does not exist.\\") return summary"},{"question":"Write a Python function that takes an integer `n` and returns a list of all prime numbers less than `n`. Your function should be efficient and handle values of `n` up to 10,000. Ensure your code is optimized for performance by using an efficient algorithm such as the Sieve of Eratosthenes. **Function Signature:** ```python def primes_less_than(n: int) -> List[int]: pass ``` **Example:** ```python primes_less_than(10) -> [2, 3, 5, 7] primes_less_than(20) -> [2, 3, 5, 7, 11, 13, 17, 19] ``` **Constraints:** - The input integer `n` is a non-negative integer (`0 <= n <= 10,000`). - You are required to use a method that runs in O(n log log n) time.","solution":"from typing import List def primes_less_than(n: int) -> List[int]: Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] # Initialize a list to track the primality of numbers sieve = [True] * n sieve[0] = sieve[1] = False p = 2 while (p * p <= n): if sieve[p]: # Updating all multiples of p to False for i in range(p * p, n, p): sieve[i] = False p += 1 return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Given a string representing an algebraic expression involving integers and the operators \'+\', \'-\', \'*\', and \'/\', evaluate the expression and return the result as an integer. Handle the operations according to the standard order of operations (PEMDAS/BODMAS). You can assume that the expression is always valid and does not contain any parentheses. For example, for the input \\"3+2*2\\", the output should be 7.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string and returns the result as an integer. Handles \'+\', \'-\', \'*\', and \'/\' operations according to the standard order of operations. :param expression: str, a mathematical expression :return: int, the result of the expression def helper(ops, nums): while ops and (ops[-1] in \'*/\'): op = ops.pop() right = nums.pop() left = nums.pop() if op == \'*\': nums.append(left * right) elif op == \'/\': nums.append(int(left / right)) # use int() to ensure integer division nums = [] ops = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 nums.append(num) i -= 1 elif expression[i] in \'+-*/\': helper(ops, nums) if expression[i] in \'+-*/\': ops.append(expression[i]) i += 1 helper(ops, nums) while ops: op = ops.pop(0) left = nums.pop(0) right = nums.pop(0) if op == \'+\': nums.insert(0, left + right) elif op == \'-\': nums.insert(0, left - right) return nums[0]"},{"question":"Given a list of integers `nums` representing the prices of a stock on different days, you are allowed to complete at most `k` transactions to maximize your profit. A transaction consists of buying and then selling one share of the stock. Write a Python function `maxProfit(k: int, prices: List[int]) -> int` to find the maximum profit you can achieve. # Constraints: - `0 <= len(prices) <= 1000` - `0 <= k <= 100` - `0 <= prices[i] <= 1000` # Example: Example 1: ``` Input: k = 2, prices = [3,2,6,5,0,3] Output: 7 Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. ``` Example 2: ``` Input: k = 1, prices = [2,4,1] Output: 2 Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2. ``` You may assume that you cannot engage in multiple transactions at the same time, i.e., you must sell the stock before you buy again.","solution":"def maxProfit(k, prices): if not prices or k == 0: return 0 n = len(prices) # If k is larger than n/2, we can conduct unlimited transactions if k >= n // 2: max_profit = 0 for i in range(1, n): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit # Initialize dp array dp = [[0 for _ in range(n)] for _ in range(k + 1)] for i in range(1, k + 1): max_diff = -prices[0] for j in range(1, n): dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff) max_diff = max(max_diff, dp[i - 1][j] - prices[j]) return dp[k][n - 1]"},{"question":"The question you provided seems to be aligned with the objective. Here is a new question meeting the specified criteria: ```python def reverse_words(input_string): This function reverses the order of characters within each word in the input string, while maintaining the original word order. Parameters: input_string (str): The input string with words separated by spaces. Returns: str: The string with characters reversed within each word. words = input_string.split(\' \') reversed_words = [] for word in words: reversed_words.append(word[::-1]) return \' \'.join(reversed_words) # Example usage: # input_string = \\"hello world\\" # Expected output: \\"olleh dlrow\\" ``` Detect the mistake in the provided code and correct it in your solution. Furthermore, ensure that your function can handle punctuation appropriately, without altering the order of punctuation within the words.","solution":"def reverse_words(input_string): This function reverses the order of characters within each word in the input string, while maintaining the original word order. Parameters: input_string (str): The input string with words separated by spaces. Returns: str: The string with characters reversed within each word. words = input_string.split(\' \') reversed_words = [] for word in words: reversed_words.append(word[::-1]) return \' \'.join(reversed_words)"},{"question":"Write a function that takes a string as input and returns True if it contains a valid sequence of brackets, and False otherwise. The string may contain the following types of brackets: (), {}, []. A valid sequence of brackets requires that each opening bracket has a corresponding closing bracket and that they close in the correct order. For example, the string \\"(){}[]\\" is valid, but the string \\"([)]\\" is not. Consider using a stack to manage the bracket matching and ensure optimal time complexity.","solution":"def is_valid_bracket_sequence(s: str) -> bool: Returns True if the input string contains a valid sequence of brackets, and False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: continue return stack == []"},{"question":"Write a Python function that takes a list of integers and returns a new list where each element is the sum of its neighboring elements from the original list. The first and last elements should be handled separately as they only have one neighbor each. For instance, if the input list is [2, 4, 6, 8], the function should return [4, 8, 12, 6]. Examples: Input: [3, 5, 6, 2, 7] Output: [5, 9, 7, 13, 2] Input: [1, 2, 3, 4, 5] Output: [2, 4, 6, 8, 4] Note: - If the list contains only one element, return an empty list. - Input numbers can be negative as well.","solution":"def sum_of_neighbors(arr): Returns a new list where each element is the sum of its neighboring elements from the original list. The first and last elements are handled separately. Parameters: arr (list): List of integers Returns: list: List of integers where each element is the sum of its neighbors if len(arr) < 2: return [] result = [] result.append(arr[1]) # First element for i in range(1, len(arr) - 1): result.append(arr[i - 1] + arr[i + 1]) result.append(arr[-2]) # Last element return result"},{"question":"Design a Python class to implement a system that manages a backlog of tasks. The class should support the following functionalities: 1. **Add Task**: Add a new task with a priority level (1 being the highest). The task should be represented by a dictionary with at least a \'description\' and \'priority\' keys. 2. **Remove Task**: Remove a task from the list based on its description. 3. **Retrieve Highest Priority Task**: Get the task with the highest priority without removing it from the list. 4. **List Tasks**: Return all tasks sorted by their priority. Design the class with methods to handle each functionality, and ensure that the tasks are always stored in such a way that retrieving the highest priority task is efficient. Implement the class with the following starting code: ```python class TaskManager: def __init__(self): self.tasks = [] def add_task(self, description, priority): pass def remove_task(self, description): pass def get_highest_priority_task(self): pass def list_tasks(self): pass # Example usage task_manager = TaskManager() task_manager.add_task(\\"Fix bug in code\\", 2) task_manager.add_task(\\"Write documentation\\", 1) task_manager.add_task(\\"Update user guide\\", 3) ``` Complete the code to ensure it handles all the specified functionalities correctly and efficiently.","solution":"class TaskManager: def __init__(self): self.tasks = [] def add_task(self, description, priority): Adds a new task with the given description and priority. task = {\'description\': description, \'priority\': priority} self.tasks.append(task) self.tasks.sort(key=lambda x: x[\'priority\']) def remove_task(self, description): Removes the task with the specified description. self.tasks = [task for task in self.tasks if task[\'description\'] != description] def get_highest_priority_task(self): Returns the highest priority task without removing it from the list. return self.tasks[0] if self.tasks else None def list_tasks(self): Returns all tasks sorted by their priority. return self.tasks"},{"question":"Write a function that takes a string containing a mathematical expression and a dictionary mapping variables to their values, and evaluates the expression using the provided variable values. The function should support the following operations: addition (+), subtraction (-), multiplication (*), and division (/). It should also handle nested parentheses to ensure proper order of operations. Example: ```python expression = \\"3 + x * (2 - y) / z\\" variables = {\'x\': 4, \'y\': 3, \'z\': 2} result = evaluate_expression(expression, variables) ``` For the above example, the function should evaluate the expression with the given variable values and return the result, which is computed as: ``` 3 + 4 * (2 - 3) / 2 = 3 + 4 * (-1) / 2 = 3 - 2 = 1 ``` You may assume that: 1. The input string `expression` is always a valid mathematical expression. 2. The dictionary `variables` provides appropriate values for all variables used in the expression. 3. Division by zero will not occur in the supplied inputs.","solution":"import operator import re def evaluate_expression(expression, variables): Evaluates a mathematical expression with variables using provided values. Args: expression (str): The mathematical expression as a string. variables (dict): A dictionary of variables and their values. Returns: float: The result of the expression evaluation. # Replace variables in the expression with their values for var, value in variables.items(): expression = expression.replace(var, str(value)) # The eval method can be used to evaluate the mathematical expression # after replacing variables with their corresponding values. However, # in a production setting, using eval is not recommended due to security # concerns. For this example, we\'ll assume the input is safe. return eval(expression)"},{"question":"Write a Python function that takes a single integer input `n` and returns a list of the first `n` prime numbers. Prime numbers are integers greater than 1 that have no positive divisors other than 1 and themselves. Make sure the function handles edge cases appropriately, such as when `n` is less than or equal to 0.","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def first_n_primes(n): Returns a list of the first n prime numbers. Parameters: n (int): The number of prime numbers to generate. Returns: list of int: A list containing the first n prime numbers. if n <= 0: return [] primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return primes"},{"question":"Write a function called `merge_sorted_lists` that takes two lists of integers, both sorted in ascending order, and returns a single list that merges the two inputs into one sorted list in ascending order. Ensure that the function handles cases where the lists have different lengths and include negative numbers. For example: ```python list1 = [1, 3, 5] list2 = [2, 4, 6] merge_sorted_lists(list1, list2) # Output: [1, 2, 3, 4, 5, 6] list1 = [-5, 0, 3] list2 = [-2, 1, 2] merge_sorted_lists(list1, list2) # Output: [-5, -2, 0, 1, 2, 3] ```","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list in ascending order. :param list1: List of integers sorted in ascending order. :param list2: List of integers sorted in ascending order. :return: A single list that merges the two inputs into one sorted list in ascending order. merged_list = [] i = j = 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Create a Python function to simulate a simplified inventory management system. The function should receive a list of tuples, where each tuple represents an item with its name (str), quantity (int), and price per unit (float). The function needs to update the quantity of items based on sales transactions detailed in another list of tuples. Each tuple in the sales list contains an item\'s name and the quantity sold. The function should adjust the inventory accordingly and also calculate and print the total revenue from sold items. If an item in the sales list is not present in the inventory, it should record an error and continue processing the next item. ```python def update_inventory(inventory, sales): total_revenue = 0 errors = [] for item_name, quantity_sold in sales: for i in range(len(inventory)): if inventory[i][0] == item_name: if inventory[i][1] >= quantity_sold: inventory[i] = (inventory[i][0], inventory[i][1] - quantity_sold, inventory[i][2]) total_revenue += quantity_sold * inventory[i][2] else: errors.append(f\\"Not enough stock for {item_name}\\") break else: errors.append(f\\"Item {item_name} not found in inventory\\") for error in errors: print(error) print(f\\"Total Revenue: {total_revenue:.2f}\\") return inventory # Example usage inventory = [(\\"apple\\", 10, 0.50), (\\"banana\\", 5, 0.30), (\\"orange\\", 8, 0.70)] sales = [(\\"apple\\", 3), (\\"banana\\", 2), (\\"grape\\", 1), (\\"orange\\", 5), (\\"banana\\", 5), (\\"orange\\", 4)] update_inventory(inventory, sales) ```","solution":"def update_inventory(inventory, sales): total_revenue = 0 errors = [] for item_name, quantity_sold in sales: for i in range(len(inventory)): if inventory[i][0] == item_name: if inventory[i][1] >= quantity_sold: inventory[i] = (inventory[i][0], inventory[i][1] - quantity_sold, inventory[i][2]) total_revenue += quantity_sold * inventory[i][2] else: errors.append(f\\"Not enough stock for {item_name}\\") break else: errors.append(f\\"Item {item_name} not found in inventory\\") for error in errors: print(error) print(f\\"Total Revenue: {total_revenue:.2f}\\") return inventory"},{"question":"Write a program that simulates the operation of a vending machine. The vending machine should accept a list of products, each product having a unique identifier, name, price, and quantity available. Your program should have the following functionalities: 1. Display available products to the customer. 2. Allow the customer to select a product by its unique identifier. 3. Accept payment from the customer, ensuring the amount is sufficient to cover the product\'s price. 4. Dispense the product if the payment is correct and adjust the quantity available. 5. Return change if overpayment is made. 6. Indicate when a product is out of stock and prevent selection of out-of-stock products. 7. Maintain a transaction log that records each sale, including product identifier, name, quantity sold, total amount received, and change returned. Additionally, implement a feature to restock products when quantities run low. Ensure the program handles exceptions gracefully, such as invalid product selection or insufficient payment. Write and test this program in a language of your choice.","solution":"class VendingMachine: def __init__(self): self.products = {} self.transactions = [] def add_product(self, identifier, name, price, quantity): self.products[identifier] = {\\"name\\": name, \\"price\\": price, \\"quantity\\": quantity} def display_products(self): available_products = {key: value for key, value in self.products.items() if value[\\"quantity\\"] > 0} return available_products def select_product(self, identifier): if identifier in self.products: product = self.products[identifier] if product[\\"quantity\\"] > 0: return product else: raise Exception(\\"Out of stock\\") else: raise Exception(\\"Invalid product selection\\") def accept_payment(self, identifier, amount): product = self.select_product(identifier) if amount >= product[\\"price\\"]: self.products[identifier][\\"quantity\\"] -= 1 change = amount - product[\\"price\\"] self.transactions.append({ \\"product_id\\": identifier, \\"product_name\\": product[\\"name\\"], \\"quantity_sold\\": 1, \\"amount_received\\": amount, \\"change_returned\\": change }) return change else: raise Exception(\\"Insufficient payment\\") def restock_product(self, identifier, quantity): if identifier in self.products: self.products[identifier][\\"quantity\\"] += quantity else: raise Exception(\\"Invalid product identifier\\") def get_transaction_log(self): return self.transactions"},{"question":"In a software simulation of a wildlife habitat, you need to model the movement of various animals. Implement a system that tracks and updates animals\' positions within a two-dimensional space. Each animal has a type, an initial position, and a movement pattern. Your task is to implement the function `track_animal_movements` to update and return the final positions of all animals after a given number of moves. **Here\'s the code snippet with partial implementation which you need to complete:** ```python class Animal: def __init__(self, type: str, position: tuple, movement: tuple): self.type = type self.position = position self.movement = movement def move_animal(animal: Animal): Helper function to update the animal\'s position based on its movement pattern. new_x = animal.position[0] + animal.movement[0] new_y = animal.position[1] + animal.movement[1] return (new_x, new_y) def track_animal_movements(animals: list, moves: int): Update the positions of all animals after a given number of moves. :param animals: List of Animal instances. :param moves: Number of moves to simulate. :return: A list of final positions of all animals. >>> animals = [Animal(type=\\"deer\\", position=(0, 0), movement=(1, 0)), Animal(type=\\"rabbit\\", position=(2, 1), movement=(0, 1))] >>> track_animal_movements(animals, 3) [(3, 0), (2, 4)] final_positions = [] for animal in animals: for _ in range(moves): animal.position = move_animal(animal) final_positions.append(animal.position) return final_positions animals = [Animal(type=\\"deer\\", position=(0, 0), movement=(1, 0)), Animal(type=\\"rabbit\\", position=(2, 1), movement=(0, 1))] print(track_animal_movements(animals, 3)) # Expects [(3, 0), (2, 4)] ``` **Instructions:** 1. Complete the implementation of the `move_animal` helper function which updates the position of an animal by its respective movement pattern. 2. Implement the `track_animal_movements` function to update and return the final positions of all animals after the specified number of moves. 3. The final output should be a list of tuples indicating the final positions of the animals.","solution":"class Animal: def __init__(self, type: str, position: tuple, movement: tuple): self.type = type self.position = position self.movement = movement def move_animal(animal: Animal): Helper function to update the animal\'s position based on its movement pattern. new_x = animal.position[0] + animal.movement[0] new_y = animal.position[1] + animal.movement[1] return (new_x, new_y) def track_animal_movements(animals: list, moves: int): Update the positions of all animals after a given number of moves. :param animals: List of Animal instances. :param moves: Number of moves to simulate. :return: A list of final positions of all animals. >>> animals = [Animal(type=\\"deer\\", position=(0, 0), movement=(1, 0)), Animal(type=\\"rabbit\\", position=(2, 1), movement=(0, 1))] >>> track_animal_movements(animals, 3) [(3, 0), (2, 4)] final_positions = [] for animal in animals: for _ in range(moves): animal.position = move_animal(animal) final_positions.append(animal.position) return final_positions"},{"question":"Develop a K-means clustering model using Scikit-Learn to segment customers based on their annual income and spending scores. Ensure to preprocess the data by removing any missing values and normalizing the features before applying the clustering algorithm. Determine the optimal number of clusters using the elbow method. Once the clustering is done, visualize the clusters and analyze how customers are grouped. Provide a concise interpretation of the results. For reference, here is a piece of erroneous code as an example: ```python from sklearn.cluster import KMeans kmeans = KMeans(n_clusters=3, random_state=0) kmeans.fit(X) labels = kmeans.labels_ ``` Keep in mind that this code snippet does not include necessary preprocessing, normalization, or optimal cluster determination steps.","solution":"import pandas as pd from sklearn.cluster import KMeans from sklearn.preprocessing import StandardScaler import matplotlib.pyplot as plt import numpy as np def preprocess_data(data): Preprocess the data by removing missing values and normalizing the features. # Remove missing values data_clean = data.dropna() # Extract relevant features features = data_clean[[\'Annual Income (k)\', \'Spending Score (1-100)\']] # Normalize the features scaler = StandardScaler() features_scaled = scaler.fit_transform(features) return features_scaled def determine_optimal_clusters(data): Determine the optimal number of clusters using the elbow method. inertia = [] K = range(1, 11) for k in K: kmeans = KMeans(n_clusters=k, random_state=42) kmeans.fit(data) inertia.append(kmeans.inertia_) # Plot the elbow curve plt.figure(figsize=(8, 4)) plt.plot(K, inertia, \'bx-\') plt.xlabel(\'Number of clusters\') plt.ylabel(\'Inertia\') plt.title(\'The Elbow Method showing the optimal k\') plt.show() def apply_kmeans(data, n_clusters): Apply KMeans clustering algorithm and return the labeled data. kmeans = KMeans(n_clusters=n_clusters, random_state=42) kmeans.fit(data) return kmeans.labels_ def visualize_clusters(data, labels): Visualize the clusters and analyze the grouping of customers. plt.figure(figsize=(8, 4)) plt.scatter(data[:, 0], data[:, 1], c=labels, cmap=\'viridis\') plt.xlabel(\'Annual Income (k)\') plt.ylabel(\'Spending Score (1-100)\') plt.title(\'Customer Segments\') plt.show() def kmeans_customer_segmentation(data): Perform the full customer segmentation process using KMeans. processed_data = preprocess_data(data) determine_optimal_clusters(processed_data) # Choosing 5 clusters based on elbow method observation n_clusters = 5 labels = apply_kmeans(processed_data, n_clusters) visualize_clusters(processed_data, labels) return labels"},{"question":"Implement a function in Python that takes a list of integers as input and returns the count of distinct pairs (i, j) such that the sum of the pair (i, j) is equal to a given target value. Ensure the function handles edge cases where the list might be empty or contain negative integers. # Constraints - The input list and the target are guaranteed to be integers. - The solution’s time complexity should not exceed O(n log n) to handle larger datasets efficiently. # Input - A list of integers `arr`. - An integer `target`. # Output - An integer representing the count of distinct pairs (i, j) where `i < j` and `arr[i] + arr[j] = target`. # Example ```python def count_pairs(arr, target): # Implementation of the function here. pass print(count_pairs([1, 2, 3, 4], 5)) # Output: 2 (Pairs: (1, 4), (2, 3)) print(count_pairs([0, -1, 2, -3, 1], -2)) # Output: 1 (Pair: (-3, 1)) print(count_pairs([], 5)) # Output: 0 ```","solution":"def count_pairs(arr, target): Returns the count of distinct pairs (i, j) such that the sum of the pair (i, j) is equal to the target value. if not arr: return 0 arr.sort() left, right = 0, len(arr) - 1 count = 0 while left < right: current_sum = arr[left] + arr[right] if current_sum == target: count += 1 left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return count"},{"question":"John is working on a string manipulation problem. He has to ensure that a password meets specific criteria in order to be considered valid. The criteria are as follows: 1. The password must be at least 8 characters long. 2. It must contain at least one lowercase letter. 3. It must contain at least one uppercase letter. 4. It must contain at least one digit. 5. It must contain at least one special character from the set: {!@#%^&*()-+} John has written some code to validate passwords but is not confident it is correct. The following is a collection of passwords he wants to validate: passwords = [\\"Passw0rd!\\", \\"password\\", \\"PASSWORD1@\\", \\"Pass@123\\", \\"Pass1234\\", \\"1234!abcd\\"] The expected result should be a list of booleans where each element corresponds to whether a password is valid (True) or not (False) from the input list. John\'s initial code attempt is as follows: ```python import re def check_password_strength(passwords): result = [] for password in passwords: if len(password) < 8: result.append(False) continue if not re.search(r\\"[a-z]\\", password): result.append(False) continue if not re.search(r\\"[A-Z]\\", password): result.append(False) continue if not re.search(r\\"d\\", password): result.append(False) continue if not re.search(r\\"[!@#%^&*()-+]\\", password): result.append(False) continue result.append(True) return result passwords = [\\"Passw0rd!\\", \\"password\\", \\"PASSWORD1@\\", \\"Pass@123\\", \\"Pass1234\\", \\"1234!abcd\\"] result = check_password_strength(passwords) print(result) ``` Somehow, John\'s code is not passing all test cases correctly. Help John fix his function to ensure it validates passwords according to the given criteria. The solution should be stored in the variable \'result\'.","solution":"import re def check_password_strength(passwords): Check if given passwords meet the specified criteria for a valid password. Parameters: passwords (list of str): List of passwords to validate Returns: list of bool: A list where each element is True if the corresponding password is valid, otherwise False. result = [] for password in passwords: if (len(password) >= 8 and re.search(r\\"[a-z]\\", password) and re.search(r\\"[A-Z]\\", password) and re.search(r\\"d\\", password) and re.search(r\\"[!@#%^&*()-+]\\", password)): result.append(True) else: result.append(False) return result passwords = [\\"Passw0rd!\\", \\"password\\", \\"PASSWORD1@\\", \\"Pass@123\\", \\"Pass1234\\", \\"1234!abcd\\"] result = check_password_strength(passwords) print(result)"},{"question":"Write a function in Python that takes a list of integers and an integer threshold as inputs and returns a new list containing only the elements from the original list that are greater than the given threshold. Your function should handle edge cases such as an empty list or a threshold that none of the elements meet. Additionally, write a helper function that validates if the provided list contains only integers and the threshold is also an integer.","solution":"def filter_greater_than_threshold(lst, threshold): Returns a list containing only the elements from lst that are greater than threshold. Parameters: lst (list): List of integers threshold (int): The threshold integer Returns: list: New list with elements greater than threshold if not validate_inputs(lst, threshold): raise ValueError(\\"Invalid inputs: List must contain only integers and threshold must be an integer.\\") return [item for item in lst if item > threshold] def validate_inputs(lst, threshold): Validates that lst is a list of integers and threshold is an integer. Parameters: lst (list): List of integers threshold (int): The threshold integer Returns: bool: True if both inputs are valid, False otherwise if not isinstance(lst, list) or not all(isinstance(i, int) for i in lst) or not isinstance(threshold, int): return False return True"},{"question":"Create a function that takes a string as input and returns a new string where every vowel (a, e, i, o, u) in the original string is replaced with its uppercase form. Consonants and other characters should remain unchanged.","solution":"def capitalize_vowels(s): Returns a new string where every vowel (a, e, i, o, u) in the input string is replaced with its uppercase form. Consonants and other characters remain unchanged. vowels = \\"aeiou\\" result = [] for char in s: if char in vowels: result.append(char.upper()) else: result.append(char) return \'\'.join(result)"},{"question":"Develop a Python function that takes a list of strings as an input. The function should iterate through the list and for each string, check if it starts with the letter \'a\' (case insensitive). The function should return a new list containing only the strings that start with \'a\'. Ensure the implementation utilizes a for loop and appropriate string methods to achieve the desired result.","solution":"def filter_strings_starting_with_a(strings): Returns a list of strings from the input list that start with the letter \'a\' (case insensitive). Args: strings (list of str): A list of strings. Returns: list of str: A list containing only the strings that start with the letter \'a\'. result = [] for string in strings: if string.lower().startswith(\'a\'): result.append(string) return result"},{"question":"Write a function `order_deck_of_cards(cards)` that takes a list of strings representing a deck of cards and returns the ordered deck according to the following rules: - Each card is represented by a two-character string. The first character is the rank and the second character is the suit. - Ranks are \'2-9\', \'T\', \'J\', \'Q\', \'K\', \'A\'. - Suits are \'C\', \'D\', \'H\', \'S\' representing Clubs, Diamonds, Hearts, and Spades respectively. - Cards should be ordered first by suit in the order \'C\', \'D\', \'H\', \'S\' and then by rank in the order \'2-9\', \'T\', \'J\', \'Q\', \'K\', \'A\'. # Example Input: ``` cards = [\\"2H\\", \\"3D\\", \\"AS\\", \\"TC\\", \\"KH\\", \\"7D\\", \\"9S\\", \\"5C\\"] ``` Output: ``` [\\"5C\\", \\"TC\\", \\"3D\\", \\"7D\\", \\"2H\\", \\"KH\\", \\"9S\\", \\"AS\\"] ``` # Constraints - The input list contains between 1 and 52 elements. - Each element in the input list is a valid card from a standard deck of 52 cards. - The order in which the cards should be returned must strictly follow the rules mentioned above. # Notes: - You may assume that input list will not have duplicate cards. - You do not need to handle invalid cards.","solution":"def order_deck_of_cards(cards): Orders a deck of cards based on suit and rank. # Custom sort key suit_order = {\'C\': 0, \'D\': 1, \'H\': 2, \'S\': 3} rank_order = {\'2\': 0, \'3\': 1, \'4\': 2, \'5\': 3, \'6\': 4, \'7\': 5, \'8\': 6, \'9\': 7, \'T\': 8, \'J\': 9, \'Q\': 10, \'K\': 11, \'A\': 12} def card_key(card): rank = card[0] suit = card[1] return (suit_order[suit], rank_order[rank]) return sorted(cards, key=card_key)"},{"question":"Develop a Python function that takes a string of lowercase alphabetic characters and returns a dictionary with each character as a key and the count of occurrences of that character as the value. For instance, if the input string is \\"programming\\", the function should output {\'p\': 1, \'r\': 2, \'o\': 1, \'g\': 2, \'a\': 1, \'m\': 2, \'i\': 1, \'n\': 1}.","solution":"def character_count(s): Takes a string of lowercase alphabetic characters and returns a dictionary with each character as a key and the count of occurrences of that character as the value. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"You are given a list of people objects, each containing a name and a list of friends\' names. Write a function that takes this list as input and returns a dictionary mapping each person\'s name to the total number of friends they have. Additionally, if a name appears in the friends\' list but not as an independent person object, your function should not count them. Ensure your function handles edge cases such as no people or people with no friends. Example input: ```json [ {\\"name\\": \\"Alice\\", \\"friends\\": [\\"Bob\\", \\"Charlie\\"]}, {\\"name\\": \\"Bob\\", \\"friends\\": [\\"Alice\\"]}, {\\"name\\": \\"Charlie\\", \\"friends\\": []} ] ``` Example output: ```json { \\"Alice\\": 2, \\"Bob\\": 1, \\"Charlie\\": 0 } ```","solution":"def count_friends(people): Takes a list of people objects and returns a dictionary mapping each person\'s name to the number of friends they have. # Create a set of valid person names valid_names = {person[\'name\'] for person in people} # Create the result dictionary friends_count = {} for person in people: # Only count friends that are also in the valid names set valid_friends = [friend for friend in person[\'friends\'] if friend in valid_names] friends_count[person[\'name\']] = len(valid_friends) return friends_count"},{"question":"Create a function that takes a list of integers and returns a tuple of two lists. The first list contains the even-indexed elements, while the second list contains the odd-indexed elements. If the input list is empty, return two empty lists. Example: Input: [10, 15, 20, 25, 30, 35] Output: ([10, 20, 30], [15, 25, 35]) Explanation: The elements at even indices are 10, 20, and 30. The elements at odd indices are 15, 25, and 35.","solution":"def split_even_odd_indices(lst): Splits a list into two lists: one containing the elements at even indices, and the other containing the elements at odd indices. Args: lst: A list of integers. Returns: A tuple of two lists. The first list contains the elements at even indices, while the second list contains the elements at odd indices. even_indexed = [lst[i] for i in range(len(lst)) if i % 2 == 0] odd_indexed = [lst[i] for i in range(len(lst)) if i % 2 == 1] return (even_indexed, odd_indexed)"},{"question":"A spaceship is navigated in a 2D Cartesian coordinate system, starting from the origin (0, 0). The spaceship receives a sequence of commands consisting of three possible instructions: 1. \\"F n\\": Move forward in the current direction by n units. 2. \\"L\\": Turn 90 degrees to the left. 3. \\"R\\": Turn 90 degrees to the right. Initially, the spaceship faces the positive X-axis direction. Write a function `navigate(commands: List[str]) -> Tuple[int, int]` that takes a list of such commands as input and returns the final coordinates of the spaceship. # Examples: ```python navigate([\\"F 10\\", \\"L\\", \\"F 5\\", \\"R\\", \\"F 2\\"]) ``` - Initially at (0, 0), facing the positive X-axis. - Move forward 10 units to (10, 0). - Turn left, now facing the positive Y-axis. - Move forward 5 units to (10, 5). - Turn right, now facing the positive X-axis. - Move forward 2 units to (12, 5). So, the function should return `(12, 5)`. ```python navigate([\\"F 3\\", \\"R\\", \\"F 2\\", \\"R\\", \\"F 1\\", \\"L\\", \\"F 2\\"]) ``` - Initially at (0, 0), facing the positive X-axis. - Move forward 3 units to (3, 0). - Turn right, now facing the negative Y-axis. - Move forward 2 units to (3, -2). - Turn right, now facing the negative X-axis. - Move forward 1 unit to (2, -2). - Turn left, now facing the negative Y-axis. - Move forward 2 units to (2, -4). So, the function should return `(2, -4)`. # Constraints: - The length of the commands list won\'t exceed 1000 elements. - The units n in command \\"F n\\" are integers such that 1 leq n leq 1000.","solution":"from typing import List, Tuple def navigate(commands: List[str]) -> Tuple[int, int]: # Define the direction vectors for (x, y) starting from positive X direction. # Directions are in clockwise: 0 - (1,0), 1 - (0,-1), 2 - (-1,0), 3 - (0,1) directions = [(1, 0), (0, -1), (-1, 0), (0, 1)] x, y = 0, 0 # Starting coordinates direction_index = 0 # Start facing positive X-axis for command in commands: if command.startswith(\\"F\\"): # Forward N units parts = command.split() n = int(parts[1]) dx, dy = directions[direction_index] x += dx * n y += dy * n elif command == \\"L\\": # Turn left 90 degrees (counter-clockwise) direction_index = (direction_index - 1) % 4 elif command == \\"R\\": # Turn right 90 degrees (clockwise) direction_index = (direction_index + 1) % 4 return (x, y)"},{"question":"Write a function that processes a list of strings and returns a dictionary where the keys are the lengths of the strings and the values are lists of strings of that length. For instance, given the list `[\\"apple\\", \\"bat\\", \\"car\\", \\"elephant\\"]`, the output should be `{5: [\\"apple\\"], 3: [\\"bat\\", \\"car\\"], 8: [\\"elephant\\"]}`. Ensure your solution handles edge cases such as empty strings and lists with strings of the same length. Additionally, write unit tests to validate your function.","solution":"def group_strings_by_length(strings): Processes a list of strings and returns a dictionary where the keys are the lengths of the strings, and the values are lists of strings of that length. Parameters: strings (list): A list of strings. Returns: dict: A dictionary grouping strings by their length. length_dict = {} for string in strings: length = len(string) if length not in length_dict: length_dict[length] = [] length_dict[length].append(string) return length_dict"},{"question":"Create a Python function that takes a list of integers and returns a list of tuples, where each tuple contains two elements: the original integer and its factorial. You are not allowed to use any Python built-in functions or libraries for the factorial calculation. Additionally, add appropriate comments to explain your code and handle any potential edge cases (e.g., negative integers and zero). Ensure your solution is efficient and the code is clear.","solution":"def calculate_factorial(n): Manually computes the factorial of a given integer n. If n is negative, returns None as the factorial of a negative number is undefined. if n < 0: return None factorial = 1 for i in range(2, n + 1): factorial *= i return factorial def list_integers_with_factorial(integers): Takes a list of integers and returns a list of tuples. Each tuple contains the original integer and its factorial. result = [] for num in integers: factorial = calculate_factorial(num) result.append((num, factorial)) return result"},{"question":"Given an array of integers, write a function that rearranges the array\'s elements so that every \'k\'th element is the largest among the remaining elements. The rearrangement should be done in-place and should maintain as much as possible the relative ordering of the other elements. The function should be efficient in terms of time complexity. Write code to solve this problem in any programming language you prefer. # Input - An array of integers `arr` (size n where 1 ≤ n ≤ 10^5). - An integer `k` (1 ≤ k ≤ n). # Output - The rearranged array. # Example Input ``` arr = [3, 5, 1, 4, 2] k = 2 ``` Output ``` [3, 5, 1, 4, 2] ``` In the example, the 2nd element (0-based index 1 which is `5`) is already the largest. Input ``` arr = [3, 1, 4, 1, 5, 9, 2] k = 3 ``` Output ``` [3, 1, 9, 1, 5, 4, 2] ``` In this example, the 3rd element (0-based index 2 which becomes `9`) is the largest among the remaining elements `[3, 1, 4, 1, 5, 2]`.","solution":"def rearrange_kth_element(arr, k): Rearranges the array\'s elements so that every \'k\'th element is the largest among the remaining elements. n = len(arr) for i in range(k-1, n, k): largest_index = i for j in range(i+1, n): if arr[j] > arr[largest_index]: largest_index = j # Swap the largest element found with the k\'th position arr[i], arr[largest_index] = arr[largest_index], arr[i] return arr"},{"question":"Develop a function in Python that receives a list of integers and a target value as input. The function should determine if there exist two distinct numbers in the list that sum up to the target value. If such a pair is found, the function should return their indices as a tuple (index1, index2) with `index1` being less than `index2`. If no such pair exists, the function should return `None`. The indices should be zero-based. Consider both possible scenarios: when the list might contain duplicate integers and when all integers are unique.","solution":"def find_two_sum(nums, target): Determines if there exist two distinct numbers in the list that sum up to the target value. Returns their indices as a tuple (index1, index2) with index1 < index2. If no such pair exists, returns None. Parameters: nums (list): List of integers target (int): Target sum Returns: tuple or None: Indices of the two numbers that sum up to the target, or None if no such pair exists num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return None"},{"question":"Write a function that accepts a list of integers and an integer `k`, and returns a new list containing all unique elements from the original list that appear exactly `k` times. The returned list should be sorted in the order the elements first appeared in the original list. If no elements meet the criteria, return an empty list.","solution":"def elements_appearing_k_times(lst, k): Returns a list of unique elements that appear exactly k times in the original list. The returned list is sorted in the order the elements first appeared in the original list. from collections import Counter counter = Counter(lst) result = [] seen = set() for element in lst: if counter[element] == k and element not in seen: result.append(element) seen.add(element) return result"},{"question":"Write a Python function named `pair_sum_to_target` that takes a list of integers and a target integer as inputs and returns a list of all unique pairs of numbers from the input list that add up to the target. Each pair should be a tuple of two integers, and the pairs should be listed in ascending order. Input: - A list of integers `numbers` - An integer `target` Output: - A list of tuples, each containing a pair of integers Example: ```python result = pair_sum_to_target([2, 4, 3, 5, 7, 8, 9], 10) print(result) # Expected output: [(2, 8), (3, 7)] ``` Note: - Assume the input list does not contain duplicates. - The order of elements in the pairs should be ascending (e.g., (2, 8) instead of (8, 2)). - The pairs should be unique and listed in ascending order of their first elements.","solution":"def pair_sum_to_target(numbers, target): Returns a list of unique pairs of numbers from the input list that add up to the target. Each pair is a tuple of two integers, and the pairs are listed in ascending order. pairs = set() numbers.sort() # Sort the input numbers to ensure pairs are in ascending order num_set = set(numbers) for num in numbers: complement = target - num if complement in num_set: pair = tuple(sorted((num, complement))) if pair[0] != pair[1]: # to ensure pairs are unique and no duplicates pairs.add(pair) num_set.remove(num) # Remove the current number to avoid reuse return sorted(pairs)"}]'),R={name:"App",components:{PoemCard:C},data(){return{searchQuery:"",visibleCount:4,poemsData:F,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},N={class:"search-container"},P={class:"card-container"},S={key:0,class:"empty-state"},D=["disabled"],O={key:0},z={key:1};function L(i,e,l,m,s,a){const p=g("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",N,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):u("",!0)]),t("div",P,[(n(!0),r(b,null,w(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",S,' No results found for "'+d(s.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),r("span",z,"Loading...")):(n(),r("span",O,"See more"))],8,D)):u("",!0)])}const j=h(R,[["render",L],["__scopeId","data-v-61c5fee5"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"drive/6.md","filePath":"drive/6.md"}'),W={name:"drive/6.md"},M=Object.assign(W,{setup(i){return(e,l)=>(n(),r("div",null,[x(j)]))}});export{B as __pageData,M as default};
