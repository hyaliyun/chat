import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,p,a,r){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(k,[["render",E],["__scopeId","data-v-8aece9d2"]]),A=JSON.parse('[{"question":"You are given an array of integers nums where nums[i] is guaranteed to be within the range [0, n) and n is the number of elements in the array. Your task is to transform the array into a permutation of the numbers from 0 to n-1 by applying the minimum number of operations. In each operation, you can choose any two indices i and j (i ≠ j) and swap the values of nums[i] and nums[j]. Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line of each test case contains n distinct integers from 0 to n-1 — the given array nums. Output For each test case, output a single integer — the minimum number of swap operations needed to transform the array into a permutation of the numbers from 0 to n-1. Example Input 3 4 1 0 3 2 5 4 2 0 3 1 3 2 1 0 Output 2 3 1 Explanation In the first test case, you can swap nums[0] with nums[1] to get [0, 1, 3, 2], and then swap nums[2] with nums[3] to get [0, 1, 2, 3], so the answer is 2. In the second test case, you can swap nums[0] with nums[4] to get [1, 2, 0, 3, 4], swap nums[0] with nums[2] to get [0, 2, 1, 3, 4], and swap nums[1] with nums[2] to get [0, 1, 2, 3, 4], so the answer is 3. In the third test case, you can swap nums[0] with nums[2] to get [0, 1, 2], so the answer is 1.","solution":"def min_swaps_to_permutation(nums): Returns the minimum number of swap operations needed to transform the array into a permutation of the numbers from 0 to n-1. n = len(nums) positions = { value: idx for idx, value in enumerate(nums) } swaps = 0 for i in range(n): while nums[i] != i: swap_with_index = positions[i] nums[i], nums[swap_with_index] = nums[swap_with_index], nums[i] positions[nums[swap_with_index]] = swap_with_index swaps += 1 return swaps def solve(test_cases): results = [] for nums in test_cases: results.append(min_swaps_to_permutation(nums)) return results"},{"question":"You are given a tree with n nodes and n-1 edges. Each node has an initial value assigned to it. In one operation, you can choose any node and increase its value by 1. The cost of this operation is equal to the sum of the current values of its direct children. If the node has no children, the cost is zero. Your task is to find the minimum cost required to make the leaf nodes have at least value k. Input - The first line contains two integers n and k (2 ≤ n ≤ 3 ⋅ 10^5, 1 ≤ k ≤ 10^9). - The second line contains n integers, where the i-th integer is the initial value of the i-th node. - Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) representing an edge between nodes u and v. Output Output a single integer — the minimum cost required to make all the leaf nodes have at least value k. Example Input ``` 5 5 1 2 3 4 5 1 2 1 3 3 4 3 5 ``` Output ``` 5 ``` Note In the example: - Initially, the leaf nodes are 2, 4, and 5 with values 2, 4, and 5 respectively. - To make node 2 have at least value 5, the cost is 0 since it has no children. - Node 4 needs to be increased from 4 to 5 with a cost of 0. - Node 5 already has the value 5, so no cost is needed. Thus, the total cost is 5.","solution":"def min_cost_to_leaf_values(n, k, values, edges): from collections import defaultdict, deque tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) degrees = {i: len(adj) for i, adj in tree.items()} leaf_nodes = [i for i, d in degrees.items() if d == 1] current_values = dict(enumerate(values, 1)) total_cost = 0 visited = [False] * (n + 1) for leaf in leaf_nodes: queue = deque([leaf]) while queue: node = queue.popleft() if visited[node]: continue visited[node] = True needed_increases = max(0, k - current_values[node]) total_cost += needed_increases for neighbor in tree[node]: current_values[neighbor] += needed_increases if not visited[neighbor]: queue.append(neighbor) return total_cost # Helper function for the ease of test def process_tree_cost(n, k, values, edges): return min_cost_to_leaf_values(n, k, values, edges)"},{"question":"You are given a series of events, where each event is represented by a character `\'A\'`, `\'B\'`, or `\'C\'`. Each character represents a different type of event. You need to find the length of the shortest contiguous subarray which contains at least one `\'A\'`, one `\'B\'`, and one `\'C\'`. If no such subarray exists, return `-1`. Input The first line of the input contains an integer n (1 ≤ n ≤ 2 × 10^5) — the length of the series of events. The second line of the input contains a string s of length n which consists of characters `\'A\'`, `\'B\'`, and `\'C\'`. Output Output a single integer — the length of the shortest contiguous subarray containing at least one `\'A\'`, one `\'B\'`, and one `\'C\'`, or `-1` if no such subarray exists. Examples Input 7 CABCA Output 3 Input 6 BCAAAA Output 3 Input 5 AAAAA Output -1 Note In the first example, the shortest contiguous subarray containing at least one of each character is \\"CAB\\". In the second example, the shortest contiguous subarray containing at least one of each character is \\"BCA\\". In the third example, there is no subarray that contains all characters \'A\', \'B\', and \'C\'.","solution":"def shortest_subarray_with_all_events(s): n = len(s) if n < 3: return -1 min_length = float(\'inf\') left = 0 count = {\'A\': 0, \'B\': 0, \'C\': 0} for right in range(n): if s[right] in count: count[s[right]] += 1 while all(count[char] > 0 for char in \'ABC\'): min_length = min(min_length, right - left + 1) count[s[left]] -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"A tech company is planning to deploy a new software system across its branches worldwide. Each branch is identified by a unique code consisting of uppercase letters. They have a master deployment plan that outlines the deployment sequence in pairs of branch codes, such as \\"XXX->YYY\\", where \\"XXX\\" is the source branch and \\"YYY\\" is the target branch. Unfortunately, the deployment plan may have dependencies resulting in some branches being deployed before others can start. Your task is to determine the sequence of branches that must be deployed based on the given dependencies. If it\'s not possible to resolve the sequence due to circular dependencies, indicate that deployment is not possible. Input The first line contains a single integer n (1 ≤ n ≤ 100), the number of deployment dependencies. Each of the next n lines contains a dependency in the format \\"XXX->YYY\\". Output If a valid deployment sequence exists, output the sequence of branch codes in the order they should be deployed, each code on a new line. If no valid sequence exists due to circular dependencies, output \\"impossible\\". Examples Input 3 NYC->LON LON->BER NYC->BER Output NYC LON BER Input 2 A->B B->A Output impossible Note In the first example, the deployment must start from NYC, then proceed to LON, and finally to BER. Each branch is deployed in a sequence that respects the given dependencies. In the second example, there is a circular dependency between branch A and branch B, making it impossible to determine a valid deployment sequence. Therefore, the output is \\"impossible\\".","solution":"from collections import defaultdict, deque def find_deployment_sequence(n, dependencies): # Build the graph graph = defaultdict(list) indegree = defaultdict(int) branches = set() for dep in dependencies: src, tgt = dep.split(\\"->\\") graph[src].append(tgt) indegree[tgt] += 1 branches.add(src) branches.add(tgt) # Find all the branches with no incoming dependencies queue = deque() for branch in branches: if indegree[branch] == 0: queue.append(branch) # Topological sort sort_result = [] while queue: current = queue.popleft() sort_result.append(current) for neighbor in graph[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # Check for cycles in the graph if len(sort_result) == len(branches): return sort_result else: return \\"impossible\\""},{"question":"A delivery company needs to optimize the package delivery by their fleet of vehicles. Each vehicle can carry at most a certain weight, and the weight of each package is known. The goal is to determine the minimum number of vehicles required to deliver all the packages. Write a program that determines the minimum number of vehicles required to deliver all the packages, given the weight limit of each vehicle and the weights of the packages. Input The first line contains an integer w (1 ≤ w ≤ 1000), representing the maximum weight capacity of each vehicle. The second line contains an integer n (1 ≤ n ≤ 1000), representing the number of packages. The third line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1000), where pi is the weight of the i-th package. Output Print a single integer—the minimum number of vehicles required to deliver all the packages. Examples Input 10 5 8 4 2 7 1 Output 3 Input 12 7 2 3 5 7 8 4 6 Output 3","solution":"def min_vehicles_required(w, n, packages): # Sort packages in descending order to fit the largest one first packages.sort(reverse=True) vehicles = 0 used = [False] * n for i in range(n): if not used[i]: remaining_capacity = w - packages[i] used[i] = True for j in range(i + 1, n): if not used[j] and packages[j] <= remaining_capacity: remaining_capacity -= packages[j] used[j] = True vehicles += 1 return vehicles"},{"question":"In a distant land, there is a magical sequence of numbers where every element is the sum of the previous two elements. This sequence is known as the Fibonacci sequence. The first two elements of the Fibonacci sequence are 0 and 1. Given an integer n, determine if it is a Fibonacci number. If it is, print \\"YES\\". Otherwise, print \\"NO\\". The first few Fibonacci numbers are: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ... Input: The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each of the next t lines contains a single integer n (0 ≤ n ≤ 10^9). Output: For each test case, print \\"YES\\" if the number is a Fibonacci number, otherwise print \\"NO\\". Example: Input: 5 0 1 2 10 20 Output: YES YES YES NO NO Note: - For the first three test cases, the numbers 0, 1, and 2 are Fibonacci numbers. - For the fourth test case, 10 is not a Fibonacci number. - For the fifth test case, 20 is not a Fibonacci number.","solution":"def is_fibonacci_number(n): Determines if a given number n is a Fibonacci number. Args: n (int): Input number to check. Returns: str: \\"YES\\" if n is a Fibonacci number, \\"NO\\" otherwise. if n < 0: return \\"NO\\" # A number is a Fibonacci number if and only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square. def is_perfect_square(x): s = int(x**0.5) return s*s == x if is_perfect_square(5*n*n + 4) or is_perfect_square(5*n*n - 4): return \\"YES\\" else: return \\"NO\\" def check_fibonacci_numbers(test_cases): results = [] for n in test_cases: results.append(is_fibonacci_number(n)) return results"},{"question":"Given an array of integers, your task is to determine if there is a subset of numbers that sum up to a given target value. If there is such a subset, you should return \'YES\', otherwise return \'NO\'. Constraints: - The number of elements in the array ( n ) ≤ 100 - Each element of the array ( a_i ) (where ( 1 ≤ a_i ≤ 100 )) - The target sum ( T ) (1 ≤ T ≤ 1000) Input Format: - The first line contains an integer ( n ) (the number of elements in the array) - The second line contains ( n ) space-separated integers - The third line contains an integer ( T ) (the target sum) Output Format: - For each dataset, print \'YES\' if there is a subset that sums up to ( T ); otherwise, print \'NO\' Example: Input: 5 2 3 7 8 10 11 Output: YES Input: 4 1 2 3 9 8 Output: NO Note: - The problem can be solved using dynamic programming techniques or recursive backtracking. - Consider edge cases such as an empty subset or large numbers of elements which may require optimization for a feasible solution.","solution":"def subset_sum(n, arr, T): Determines if there\'s a subset of `arr` that sums up to `T`. Returns \'YES\' or \'NO\'. # Initialize a table to store the results of sub problems dp = [[False] * (T + 1) for _ in range(n + 1)] # There is a subset with the sum 0, which is the empty subset for i in range(n + 1): dp[i][0] = True # Fill in the subset sum table for i in range(1, n + 1): for j in range(1, T + 1): if arr[i-1] > j: dp[i][j] = dp[i-1][j] else: dp[i][j] = dp[i-1][j] or dp[i-1][j - arr[i-1]] return \'YES\' if dp[n][T] else \'NO\'"},{"question":"Alice has a set of `n` distinct integers and wants to create different pairs of these integers such that the sum of the integers in each pair is even. She would like to know how many such pairs can be formed. Input - The first line contains a single integer `n` (2 ≤ n ≤ 100), the number of integers in the set. - The second line contains `n` distinct integers `a1, a2, ..., an` (0 ≤ ai ≤ 100). Output - Print a single integer, the number of pairs with an even sum. Examples Input 5 1 2 3 4 5 Output 4 Input 4 2 4 6 8 Output 6 Input 3 1 3 5 Output 3 Note In the first sample, the valid pairs with an even sum are (1,3), (1,5), (2,4), and (4,2). In the second sample, all possible pairs of the integers have an even sum. In the third sample, all possible pairs of the odd integers have an even sum.","solution":"def count_even_sum_pairs(n, numbers): Returns the number of pairs of integers in the given list that have an even sum. evens = len([num for num in numbers if num % 2 == 0]) odds = n - evens # Pairs of evens and pairs of odds both produce even sums even_pairs = (evens * (evens - 1)) // 2 odd_pairs = (odds * (odds - 1)) // 2 return even_pairs + odd_pairs # Example usage: # n = 5 # numbers = [1, 2, 3, 4, 5] # print(count_even_sum_pairs(n, numbers)) # Output: 4"},{"question":"A city has a grid layout where each intersection can be represented as a point (x, y) on a 2D coordinate system. Each row and each column of the grid has a unique non-negative integer ID ranging from 0 to n - 1 (inclusive). Some intersections are blocked and cannot be passed. You need to find a path from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1) of the grid, moving only up, down, left, or right. Write a function `find_path` that determines if there is a path from the top-left corner to the bottom-right corner, and returns that path as a list of points (each point being a tuple (x, y)) or an empty list if no such path exists. If there are multiple valid paths, return any one of them. # Input: - An integer `n` (2 ≤ n ≤ 1000) representing the size of the grid. - A list of tuples `blocked` where each tuple `(x, y)` represents a blocked intersection on the grid. `blocked` can have a length of up to 10,000. # Output: - A list of tuples representing the path from the top-left corner to the bottom-right corner. If no path exists, return an empty list. # Function signature: ```python def find_path(n: int, blocked: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ``` # Example: ```python find_path(3, [(1, 0), (1, 1)]) ``` Output: ```python [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2)] ``` ```python find_path(3, [(1, 0), (1, 1), (0, 2), (2, 1)]) ``` Output: ```python [] ``` # Notes: - In the first example, the function successfully finds a path from (0, 0) to (2, 2). - In the second example, there is no possible path from (0, 0) to (2, 2) due to the blocked intersections.","solution":"from typing import List, Tuple def find_path(n: int, blocked: List[Tuple[int, int]]) -> List[Tuple[int, int]]: from collections import deque # Create a grid to mark the blocked intersections grid = [[0] * n for _ in range(n)] for (x, y) in blocked: grid[x][y] = 1 # Define the possible moves: right, down, left, up moves = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Function to check if a coordinate is within bounds and not blocked def is_valid(x, y): return 0 <= x < n and 0 <= y < n and grid[x][y] == 0 # Perform BFS to find the path queue = deque([((0, 0), [(0, 0)])]) visited = set((0, 0)) while queue: (x, y), path = queue.popleft() # If we reached the bottom-right corner, return the path if (x, y) == (n-1, n-1): return path # Explore the neighbors for dx, dy in moves: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append(((nx, ny), path + [(nx, ny)])) # If no path was found, return an empty list return []"},{"question":"You are given a list of M intercity flights, where each flight is represented by a triplet (source city, destination city, travel time in hours). You want to develop a program to determine the minimum travel time required to go from a specific starting city to all other cities in the network by catching a series of these flights. Provide an efficient algorithm to find the minimum travel time from the starting city to each of the other cities. The algorithm should return an array where the ith index represents the minimum travel time from the starting city to city i, or -1 if the city is unreachable. Constraints * 2 ≤ N ≤ 1000 (where N is the number of cities) * 1 ≤ M ≤ 10000 (where M is the number of flights) * 0 ≤ travel_time ≤ 100 (in hours) * Cities are numbered from 0 to N-1 Input Input is given from Standard Input in the following format: ``` N M starting_city source_1 destination_1 travel_time_1 source_2 destination_2 travel_time_2 : source_M destination_M travel_time_M ``` Output Print a single line containing the minimum travel time from the starting city to each other city in the network, separated by spaces. Examples Input ``` 5 7 0 0 1 10 0 2 3 1 2 1 2 1 4 1 3 2 2 3 8 3 4 7 ``` Output ``` 0 7 3 9 16 ``` Input ``` 4 3 1 1 2 5 2 3 1 3 1 2 ``` Output ``` -1 0 5 6 ``` Input ``` 3 2 0 0 1 20 1 2 10 ``` Output ``` 0 20 30 ```","solution":"import heapq import sys def dijkstra(N, flights, starting_city): adj = {i: [] for i in range(N)} for src, dst, time in flights: adj[src].append((dst, time)) min_time = [sys.maxsize] * N min_time[starting_city] = 0 pq = [(0, starting_city)] while pq: current_time, city = heapq.heappop(pq) if current_time > min_time[city]: continue for neighbor, travel_time in adj[city]: new_time = current_time + travel_time if new_time < min_time[neighbor]: min_time[neighbor] = new_time heapq.heappush(pq, (new_time, neighbor)) return [time if time != sys.maxsize else -1 for time in min_time] def find_min_travel_times(data): N, M = map(int, data[0].split()) starting_city = int(data[1]) flights = [tuple(map(int, line.split())) for line in data[2:]] return dijkstra(N, flights, starting_city)"},{"question":"Given a string of text, determine if it forms a valid palindrome ignoring spaces, punctuation, and case sensitivity. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Input The input is a single line of text. The length of the line is between 1 and 1000 characters, inclusive. The line consists of lowercase and uppercase letters, spaces, and punctuation marks. Output Print \\"YES\\" (without the quotes) if the text is a palindrome. Otherwise, print \\"NO\\" (also without the quotes). Examples Input A man, a plan, a canal, Panama. Output YES Input Hello, World! Output NO","solution":"import re def is_palindrome(text): Determines if the given text is a palindrome ignoring spaces, punctuation, and case sensitivity. Args: text (str): Input string to check Returns: str: \\"YES\\" if the text is a palindrome, \\"NO\\" otherwise # Remove non-alphanumeric characters and convert to lower case cleaned_text = re.sub(r\'[^A-Za-z0-9]\', \'\', text).lower() # Check if cleaned text is equal to its reverse if cleaned_text == cleaned_text[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"In a galaxy far, far away, on the remote planet Xylop, there exists a peculiar flora known as the Fibonacci Tree. This tree grows in a unique pattern: each branch splits into two new branches after a certain period. Specifically, on each iteration, a branch either grows into two new branches or it becomes a terminal leaf. The growth of the tree follows a pattern resembling the Fibonacci sequence. The Fibonacci Tree grows according to the following rules: 1. At iteration 0, the tree has one branch. 2. At iteration 1, the branch splits into two branches. 3. At iteration 2, the tree has three branches in total. 4. At iteration 3, all branches from iteration 1 split, adding more branches to fit the Fibonacci sequence, and so on. Given the number of iterations, n, calculate the total number of branches on the tree at the nth iteration. Input The only line contains an integer n (0 ≤ n ≤ 45). Output Print the total number of branches on the tree at the nth iteration. Examples Input 0 Output 1 Input 2 Output 3 Input 5 Output 13 Note At iteration 0, the tree has 1 branch. At iteration 1, the original branch splits into 2 branches. At iteration 2, the tree now has 3 branches in total. At iteration 3, the growth pattern continues, with each previous branch\'s count increasing according to the Fibonacci sequence. Consequently, by calculating the nth Fibonacci number, you can determine the total branch count at that iteration. Use the 0-indexed Fibonacci sequence: F(0) = 1, F(1) = 2, F(2) = 3, etc.","solution":"def fibonacci_tree_branches(n): Returns the total number of branches on the Fibonacci Tree at the nth iteration. if n == 0: return 1 elif n == 1: return 2 else: a, b = 1, 2 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"You are given an initial string and a series of operations. Each operation can either be an addition operation, which appends a character to the end of the string, or a query operation, which asks for the number of distinct substrings of a given length. You need to perform the operations and provide the result for each query operation. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of operations. Each of the next n lines contains one operation in the following format: - `1 c` - where c is a lowercase English letter, indicating an addition operation. - `2 k` - where k is an integer (1 ≤ k ≤ current length of the string), indicating a query operation that asks for the number of distinct substrings of length k in the current string. Output For each query operation, output the result on a new line. Examples Input 6 1 a 1 b 1 c 2 2 1 d 2 3 Output 2 2","solution":"def process_operations(n, operations): current_string = \\"\\" results = [] for operation in operations: op = operation.split() if op[0] == \'1\': # Append character to the current string current_string += op[1] elif op[0] == \'2\': # Query operation k = int(op[1]) substrings = set() for i in range(len(current_string) - k + 1): substrings.add(current_string[i:i+k]) results.append(len(substrings)) return results"},{"question":"Given two sequences of integers representing the heights of students in two classes, you need to determine if by rearranging the students in each sequence, it is possible to have a combined class photo where each student from one class is either strictly taller or strictly shorter than the corresponding student from the other class. Input: The first line contains an integer `T`, indicating the number of test cases. Each test case consists of three lines: 1. An integer `N` indicating the number of students in each class. 2. A sequence of `N` space-separated integers representing the heights of students in class A. 3. A sequence of `N` space-separated integers representing the heights of students in class B. Output: For each test case, output \\"Yes\\" if it is possible to rearrange the students in both classes to form a class photo where each student from one class is either strictly taller or strictly shorter than the corresponding student from the other class, otherwise output \\"No\\" (quotes for clarity only). Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ Height ≤ 10^5 Sample Input: 2 3 5 8 11 6 9 12 4 4 6 7 10 12 1 8 7 Sample Output: Yes No Explanation: For the first sample: - One possible arrangement is: Class A: 5, 8, 11 Class B: 6, 9, 12 Here, every student in class B is strictly taller than the corresponding student in class A. For the second sample: - It is not possible to rearrange the students such that one class is strictly taller or strictly shorter than the other class.","solution":"def can_form_class_photo(T, test_cases): results = [] for case in test_cases: N, class_A, class_B = case class_A.sort() class_B.sort() # Check if class A can be strictly lesser than class B is_A_less_than_B = all(a < b for a, b in zip(class_A, class_B)) # Check if class A can be strictly greater than class B is_A_greater_than_B = all(a > b for a, b in zip(class_A, class_B)) if is_A_less_than_B or is_A_greater_than_B: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"A software company is developing a new file storage system. To organize files efficiently, they\'ve decided to create a function that determines how many files can fit into a single cluster of their storage system. Each cluster has a fixed maximum size, and each file has a specific size. You need to write a function that receives the maximum size of a cluster and a list of file sizes, then returns the maximum number of files that can fit into a single cluster without exceeding the cluster\'s maximum size. Input The first line of the input contains a single integer m (1 ≤ m ≤ 10^9) — the maximum size of a single cluster. The second line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of files. The third line of the input contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^9) — the sizes of the files. Output The output should be a single integer — the maximum number of files that can fit into a single cluster. Examples Input 10 5 1 2 3 4 5 Output 4 Input 50 4 10 15 25 30 Output 3 Note In the first example, the files can be arranged into the cluster by choosing the sizes 1, 2, 3, and 4. The total size is 1 + 2 + 3 + 4 = 10, which is exactly the maximum size of the cluster. In the second example, the optimal way to fit the most files into the cluster without exceeding the maximum size is to choose the files with sizes 10, 15, and 25. The total size is 10 + 15 + 25 = 50, which is exactly the maximum size of the cluster.","solution":"def max_files_in_cluster(cluster_size, file_sizes): Returns the maximum number of files that can fit into a single cluster without exceeding the cluster\'s maximum size. Args: cluster_size (int): maximum size of a single cluster. file_sizes (list of int): sizes of the files. Returns: int: maximum number of files that can fit into the cluster. file_sizes.sort() total_size = 0 count = 0 for size in file_sizes: if total_size + size <= cluster_size: total_size += size count += 1 else: break return count"},{"question":"John is hosting a competition and wants to distribute prizes in such a way that each participant gets one prize, and at least one participant gets more than one prize. However, the constraints of the competition means John needs to make sure that the total number of prizes distributed and the number of participants follows specific criteria. You are given two integers, p and q, where p represents the number of participants and q represents the number of prizes. Your task is to decide if it is possible to distribute the prizes according to the rules. If it is possible, find such a distribution and print \\"YES\\" in the first line. The second line should contain p integers where the i-th integer represents the number of prizes the i-th participant receives. Make sure at least one participant gets more than one prize. If there are multiple possible distributions, print any one of them. If it is not possible, print \\"NO\\". Input The single line contains two integers p and q (1 ≤ p ≤ 10^5, 1 ≤ q ≤ 10^9). Output If there is no such distribution, print \\"NO\\". If a distribution is possible, print \\"YES\\" in the first line. The second line should contain p integers representing the number of prizes each participant gets. Ensure that at least one of them gets more than one prize. Examples Input 3 5 Output YES 1 1 3 Input 4 4 Output NO Note In the first example, there are 3 participants and 5 prizes. The prizes can be distributed as 1, 1, and 3. One participant gets more than one prize. In the second example, it is impossible to distribute 4 prizes to 4 participants with at least one participant getting more than one prize.","solution":"def distribute_prizes(p, q): Determines if it\'s possible to distribute q prizes to p participants such that each participant gets at least one prize and at least one participant gets more than one prize. Returns a tuple (bool, list) where the first element indicates if the distribution is possible, and the second element is the list of prizes for each participant if the distribution is possible, otherwise an empty list. if q < p + 1: return \\"NO\\" else: distribution = [1] * p remaining_prizes = q - p distribution[0] += remaining_prizes return \\"YES\\", distribution"},{"question":"**Problem: Weightlifting Champions** Peter the weightlifter wants to monitor his strength progress. He records the heaviest weight he lifts each day for `n` consecutive days. However, Peter doesn’t want to compare individual days but rather looks at the heaviest weight lifted in any contiguous sub-segment of `k` days. Given an array `weights` of length `n`, find the maximum weight lifted in every subarray of length `k`. Input: - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 100,000) — the number of days and the length of the sub-segment. - The second line contains `n` integers `w_1, w_2, ..., w_n` (1 ≤ w_i ≤ 10^9) — the weights lifted on each day. Output: - Print a single line with `n - k + 1` integers, each representing the maximum weight lifted in the sub-segment of length `k` starting at day `i`. Example: Input: ``` 7 3 1 3 2 5 8 2 3 ``` Output: ``` 3 5 8 8 8 ``` Explanation: - The contiguous sub-segments of length 3 are: [1, 3, 2], [3, 2, 5], [2, 5, 8], [5, 8, 2], and [8, 2, 3]. - The maximum weights in these segments are: 3, 5, 8, 8, and 8, respectively. Note: - This problem can be efficiently solved using a deque (double-ended queue) to maintain a sliding window of the `k` elements, allowing you to find the maximum in O(n) time.","solution":"from collections import deque def max_in_subarrays(weights, n, k): Returns the maximum weights in every contiguous subarray of length k. d = deque() result = [] for i in range(n): # Remove elements that are out of this window if d and d[0] == i - k: d.popleft() # Remove all elements smaller than the currently being added element (not useful) while d and weights[d[-1]] < weights[i]: d.pop() d.append(i) # The element at the front of the deque is the largest element of # the previous window, so append it to the result list if i >= k - 1: result.append(weights[d[0]]) return result"},{"question":"Given an array of integers, determine the maximum possible sum of a non-empty subarray such that at most one element can be removed from that subarray to achieve the maximum sum. Constraints * 1 ≤ N ≤ 100,000 * -10^9 ≤ A_i ≤ 10^9 Input Input is given from Standard Input in the following format: N A_1 ... A_N Output Print the maximum possible sum of a non-empty subarray where at most one element can be removed. Examples Input 5 1 -2 0 3 -1 Output 4 Input 4 -1 -2 -3 -4 Output -1 Input 8 10 -5 -2 20 -1 10 5 -2 Output 42","solution":"def max_subarray_sum_with_one_removal(N, A): if N == 1: return A[0] max_ending_here = [0] * N max_starting_here = [0] * N max_ending_here[0] = A[0] for i in range(1, N): max_ending_here[i] = max(A[i], max_ending_here[i-1] + A[i]) max_starting_here[-1] = A[-1] for i in range(N-2, -1, -1): max_starting_here[i] = max(A[i], max_starting_here[i+1] + A[i]) max_sum = max(max_ending_here) for i in range(1, N-1): max_sum = max(max_sum, max_ending_here[i-1] + max_starting_here[i+1]) return max_sum"},{"question":"A company has several departments, and each department has a number of employees. Each employee has a productivity score represented by an integer. The manager wants to maximize the productivity of any department through a team-building event. However, to host the event, the manager must select a continuous segment of employees within the department. The task is to help the manager find the maximum sum of productivity scores for any continuous segment of employees in a given department. Constraints: - The number of employees in a department (N) is between 1 and 10^5. - Each productivity score (integer) can range from -1000 to 1000. Input The input consists of: 1. An integer N representing the number of employees. 2. A list of N integers representing the productivity scores of the employees. Output Print the maximum sum of productivity scores for any continuous segment of employees within the department. Examples Input 5 1 -2 3 10 -4 Output 13 Input 8 -2 -3 4 -1 -2 1 5 -3 Output 7 Input 3 -1 -2 -3 Output -1","solution":"def max_productivity_segment(N, productivity_scores): Given the productivity scores of employees in a department, find the maximum sum of productivity scores for any continuous segment of employees. :param N: int, number of employees :param productivity_scores: list of int, productivity scores of employees :return: int, maximum sum of productivity scores for any continuous segment if not productivity_scores or N == 0: return 0 max_so_far = productivity_scores[0] current_max = productivity_scores[0] for i in range(1, N): current_max = max(productivity_scores[i], current_max + productivity_scores[i]) max_so_far = max(max_so_far, current_max) return max_so_far"},{"question":"Write a function that takes a string containing only non-negative integers and the \'+\' symbol, and returns the sum of the integers in the string. The string will contain at least one character, which will be a digit (\'0\' - \'9\') or the \'+\' symbol. The \'+\' symbol represents addition, and the numbers can be more than one digit long. The input string is guaranteed to be valid, all numbers are non-negative integers, and there are no leading or trailing \'+\' symbols. The function signature is: ```python def sum_of_integers(s: str) -> int: ``` # Input - A string `s` (1 ≤ |s| ≤ 1000) containing only digits (\'0\' - \'9\') and \'+\' symbols. # Output - An integer which is the sum of all the integers in the input string. # Example Example 1: Input: ``` \\"10+20+30\\" ``` Output: ``` 60 ``` Explanation: The input string \\"10+20+30\\" contains three integers: 10, 20, and 30. Their sum is 60. Example 2: Input: ``` \\"100+200+300+400\\" ``` Output: ``` 1000 ``` Explanation: The input string \\"100+200+300+400\\" contains four integers: 100, 200, 300, and 400. Their sum is 1000. Example 3: Input: ``` \\"0+0+0\\" ``` Output: ``` 0 ``` Explanation: The input string \\"0+0+0\\" contains three integers: 0, 0, and 0. Their sum is 0. # Note The approach involves splitting the input string by the \'+\' symbol to get the list of integers in string format. Convert these strings to integers and sum them up.","solution":"def sum_of_integers(s: str) -> int: Returns the sum of the integers in the input string which contains digits and \'+\' symbols. # Split the input string by the \'+\' symbol numbers = s.split(\'+\') # Convert each substring to an integer and sum them up total_sum = sum(int(number) for number in numbers) return total_sum"},{"question":"You are given an integer array A and an integer K. Your task is to find out if there are two distinct indices i and j in the array such that A[i] + A[j] is divisible by K. Input : The first line contains two integers N (the number of elements in array A) and K. The second line contains N space-separated integers representing the elements of array A. Output : Output \\"Yes\\" (without quotes) if such a pair exists, otherwise print \\"No\\" (without quotes). Constraints : 1 ≤ N ≤ 100,000 1 ≤ A[i], K ≤ 1,000,000 SAMPLE INPUT 5 4 1 2 3 4 5 SAMPLE OUTPUT Yes","solution":"def find_pair_with_sum_divisible_by_k(N, K, A): Returns \\"Yes\\" if there exists a pair of distinct indices (i, j) such that A[i] + A[j] is divisible by K, else returns \\"No\\". :param N: int, the number of elements in array A :param K: int, the integer to check divisibility against :param A: list of int, the array of integers :return: str, \\"Yes\\" or \\"No\\" remainder_map = {} for number in A: remainder = number % K # Check for complementary remainder to make the sum divisible by K complement = (K - remainder) % K if complement in remainder_map: return \\"Yes\\" if remainder not in remainder_map: remainder_map[remainder] = 0 remainder_map[remainder] += 1 return \\"No\\""},{"question":"You are given an array of positive integers. Your task is to modify the array in-place such that every element appears at most twice and return the new length of the array. The relative order of the elements should be kept the same, and you cannot use extra space for another array. Write a function to implement this. **Input:** - A single integer n (1 ≤ n ≤ 10^4) representing the number of elements in the array. - n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4), the elements of the array. **Output:** - The modified array (printed in-place) with each element appearing at most twice. - The new length of the array after modification. **Example:** Input: ``` 7 1 1 1 2 2 3 4 ``` Output: ``` 5 1 1 2 2 3 4 ``` Explanation: - The input array is `[1, 1, 1, 2, 2, 2, 3, 4]`. - After modifying the array, it becomes `[1, 1, 2, 2, 3, 4, ...]`. - The new length of the array is 6, but we return 5 because we only care about elements up to the new length.","solution":"def modify_array(nums): Modify the array in-place such that every element appears at most twice. Return the new length of the array. if not nums: return 0 write_index = 1 count = 1 for i in range(1, len(nums)): if nums[i] == nums[i-1]: count += 1 else: count = 1 if count <= 2: nums[write_index] = nums[i] write_index += 1 return write_index # Example usage: n = 7 nums = [1, 1, 1, 2, 2, 3, 4] new_length = modify_array(nums) print(new_length) print(nums[:new_length])"},{"question":"An online store has decided to implement a rating system for its products. Each product can receive a rating from 1 to 5 stars. Given a list of ratings for all products, the store wants to determine the average rating for each product category. The store has a fixed set of categories, and each product belongs to exactly one category. Write a program that calculates the average rating for each category. Your program should read the number of products, followed by the product details (category and rating) for each product, and then output the average rating for each category in alphabetical order of category names, rounded to two decimal places. Constraints - 1 ≤ number of products ≤ 10^5 - Each product category is a string of at most 20 characters, consisting of lowercase English letters. - Each rating is an integer between 1 and 5, inclusive. Input The input is given from Standard Input in the following format: number_of_products category_1 rating_1 category_2 rating_2 ... category_n rating_n Output For each category, output the category name followed by its average rating rounded to two decimal places. The output should list the categories in alphabetical order. Examples Input 5 electronics 5 books 3 electronics 4 books 4 clothing 2 Output books 3.50 clothing 2.00 electronics 4.50 Input 3 toys 4 toys 5 pets 3 Output pets 3.00 toys 4.50 Input 4 fruits 2 vegetables 3 fruits 5 vegetables 4 Output fruits 3.50 vegetables 3.50","solution":"def average_ratings(number_of_products, product_details): Calculate average ratings for each category and return them in alphabetical order. :param number_of_products: int, total number of products :param product_details: list of tuples, where each tuple contains (category, rating) :return: list of tuples, where each tuple contains (category, average_rating) from collections import defaultdict # Dictionary to store total ratings and count for each category category_ratings = defaultdict(lambda: [0, 0]) # Process each product detail for category, rating in product_details: category_ratings[category][0] += rating category_ratings[category][1] += 1 # Calculate average ratings and store in a list result = [] for category in sorted(category_ratings.keys()): total, count = category_ratings[category] average = total / count result.append((category, round(average, 2))) return result"},{"question":"You are given a list of 2D points on the Cartesian plane, and our goal is to find the point closest to the origin (0, 0). If there are multiple points which are equidistant to the origin, return all such points. Each point has integer coordinates, and the distance between two points `(x1, y1)` and `(x2, y2)` is defined by the Euclidean distance formula: [ text{distance} = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] Given this, write a program to identify the point(s) closest to the origin and return them in any order. * Target input: A list of points with their x and y coordinates * Output: The point(s) closest to the origin, printed such that each point is enclosed in parentheses and separated by a single space # Input: The input consists of `n` lines, where `n` is the total number of points. Each line contains a pair of space-separated integers indicating the x and y coordinates of a point. # Output: Print the point(s) that are closest to the origin. Each point should be formatted as `(x, y)` and all points should be printed on the same line separated by a single space. Examples: # Input ``` 3 1 2 3 4 -1 -1 ``` # Output ``` (-1, -1) ``` # Input ``` 4 1 1 2 2 1 -1 -1 1 ``` # Output ``` (1, 1) (1, -1) (-1, 1) ``` # Constraints: - The number of points `n` will be at most 1000.","solution":"import math def find_closest_points(points): Given a list of points, finds and returns the points closest to the origin (0, 0). Parameters: points (list): A list of tuples where each tuple contains two integers representing x and y coordinates of a point. Returns: list: A list of tuples representing the points closest to the origin. # Function to compute the squared distance from the origin def squared_distance_from_origin(point): return point[0] ** 2 + point[1] ** 2 # Compute the squared distances of all points from the origin distances = [(squared_distance_from_origin(point), point) for point in points] # Find the minimum squared distance min_distance = min(distances, key=lambda x: x[0])[0] # Collect all points with the minimum squared distance closest_points = [point for distance, point in distances if distance == min_distance] return closest_points # Example usage points = [(1, 2), (3, 4), (-1, -1)] closest_points = find_closest_points(points) output = \\" \\".join(f\\"({x}, {y})\\" for x, y in closest_points) print(output)"},{"question":"Michael has an ant farm with n chambers and m tunnels connecting the chambers. Each chamber is initially filled with a certain number of ants. The tunnels can only be traversed in one direction, and each tunnel allows ants to move from one chamber to another. However, there is a special condition: when the ants move through a tunnel, they double in number when they arrive at the next chamber. Michael wants to know the maximum number of ants that can end up in any chamber if the ants move optimally through the tunnels. Assume the process can be repeated any number of times. For example, if chamber 1 initially has 3 ants and the tunnel moves ants from chamber 1 to chamber 2, the number of ants in chamber 2 will become 6. Input The first line contains two integers n (2 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 200,000) — the number of chambers and the number of tunnels, respectively. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^6) — the initial number of ants in each chamber. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) denoting a tunnel from chamber u to chamber v. Output Print a single integer — the maximum number of ants that can end up in any chamber after moving through the tunnels optimally. Examples Input 4 4 3 0 0 0 1 2 2 3 3 4 1 3 Output 24 Input 5 6 1 0 2 0 0 1 2 1 3 2 4 3 4 4 5 2 5 Output 8 Explanation In the first example, ants double in number as they travel through each chamber in the sequence: - From chamber 1 to chamber 2: 3 ants become 6 ants in chamber 2. - From chamber 2 to chamber 3: 6 ants become 12 ants in chamber 3. - From chamber 3 to chamber 4: 12 ants become 24 ants in chamber 4. In the second example, ants move optimally as follows: - From chamber 1 to chamber 2: 1 ant becomes 2 ants in chamber 2. - From chamber 1 to chamber 3: 1 ant becomes 2 ants in chamber 3. - From chamber 2 to chamber 4: 2 ants become 4 ants in chamber 4. - From chamber 3 to chamber 4: 2 ants become 4 ants in chamber 4. - From chamber 4 to chamber 5: 4 ants become 8 ants in chamber 5. - From chamber 2 to chamber 5: Though this path also ends in chamber 5, its number of ants is outnumbered by previous optimal paths.","solution":"from collections import defaultdict, deque def max_ants(n, m, ants, tunnels): graph = defaultdict(list) in_degrees = [0] * n max_ants_in_chamber = ants[:] for u, v in tunnels: graph[u - 1].append(v - 1) in_degrees[v - 1] += 1 queue = deque([i for i in range(n) if in_degrees[i] == 0]) while queue: u = queue.popleft() for v in graph[u]: max_ants_in_chamber[v] = max(max_ants_in_chamber[v], 2 * max_ants_in_chamber[u]) in_degrees[v] -= 1 if in_degrees[v] == 0: queue.append(v) return max(max_ants_in_chamber)"},{"question":"Ninja Katsumi needs to deliver messages across the town situated on a grid of streets. Each intersection in the town is represented by a cell in an m x n grid. Katsumi starts at the top-left corner of the grid and needs to reach the bottom-right corner to deliver the message. Katsumi can only move right or down from any cell. However, some of the streets have constructions that repair themselves randomly, making certain cells inaccessible. These inaccessible cells are marked by -1 in the grid. Katsumi needs to find the number of distinct paths available to reach the destination while avoiding these inaccessible cells. Write a program that, given the dimensions of the grid and the positions of inaccessible cells, outputs the number of distinct paths from the top-left corner to the bottom-right corner of the grid. If there is no possible path, the output should be 0. Input A sequence of multiple datasets is given as input. Each dataset is given in the following format: m n grid The first line gives the dimensions of the grid m (1 ≤ m ≤ 100) and n (1 ≤ n ≤ 100). The following m lines give the grid information: each line contains n integers (0 represents an accessible cell and -1 represents an inaccessible cell). The end of the input is indicated by a single line of zeros. Output Output the number of distinct paths from the top-left corner to the bottom-right corner for each input dataset. Example Input 3 3 0 0 0 0 -1 0 0 0 0 3 3 0 -1 0 -1 0 0 0 0 0 0 Output 2 0","solution":"def find_paths(grid): m = len(grid) n = len(grid[0]) if grid[0][0] == -1 or grid[m-1][n-1] == -1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == -1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] def process_input(input_data): results = [] lines = input_data.splitlines() i = 0 while i < len(lines): line = lines[i] if line == \\"0\\": break m, n = map(int, line.split()) i += 1 grid = [] for _ in range(m): grid.append(list(map(int, lines[i].split()))) i += 1 results.append(find_paths(grid)) return results"},{"question":"In a magical forest, there are numerous energy crystals scattered around. Each crystal has a certain energy value. These crystals are arranged in a line and vary in energy. A wizard wishes to collect these crystals in such a way that he maximizes the total energy value he can collect. However, the wizard can only collect a crystal if it is not adjacent to any other collected crystal. Given an array of integers representing the energy values of the crystals, determine the maximum energy the wizard can collect by following the aforementioned rule. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of crystals. The second line contains n integers E1, E2, ..., En, where Ei (-10^6 ≤ Ei ≤ 10^6) represents the energy value of the ith crystal. Output Output a single integer, the maximum energy the wizard can collect. Examples Input 5 3 2 5 10 7 Output 15 Input 4 3 5 -7 8 Output 13","solution":"def max_energy(crystals): Returns the maximum energy the wizard can collect without picking adjacent crystals. if not crystals: return 0 n = len(crystals) if n == 1: return max(0, crystals[0]) # Initialize dp array dp = [0] * n dp[0] = max(0, crystals[0]) if n > 1: dp[1] = max(dp[0], crystals[1]) # Fill dp array using the recurrence relation for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + max(0, crystals[i])) return dp[-1]"},{"question":"Alice is organizing a treasure hunt competition for her friends. To find the treasure, participants need to follow a sequence of clues, each leading to the next clue. Clues are represented as nodes in a directed graph, and a directed edge from one node to another exists if there is a direct clue leading from the first to the second. Alice wants to ensure that every participant visits the maximum number of unique clues possible starting from the initial clue till there are no more clues to follow. In other words, she needs to determine the longest path in the graph that does not visit any node more than once. Given the structure of the clue graph, help Alice find out the length of the longest path for the given graph. Input Format: First line contains the number of test cases T. Each test case starts with an integer N denoting the number of nodes and M denoting the number of edges. Next M lines contain two space-separated integers u and v indicating a directed edge from node u to node v. Output Format: For each test case, print the length of the longest path in a separate line. Constraints: 1 ≤ T ≤ 5 1 ≤ N ≤ 1000 0 ≤ M ≤ 10000 1 ≤ u, v ≤ N SAMPLE INPUT 1 5 5 1 2 2 3 3 4 4 5 2 5 SAMPLE OUTPUT 4 Explanation In the given graph, the nodes and edges form paths. The path 1 -> 2 -> 3 -> 4 -> 5 is the longest path consisting of 4 edges, and hence the longest path has a length of 4.","solution":"from collections import defaultdict, deque def find_longest_path_length(n, edges): # Create an adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) # Function to perform topological sorting def topological_sort(): in_degree = {i: 0 for i in range(1, n + 1)} for u in adj_list: for v in adj_list[u]: in_degree[v] += 1 zero_in_degree_queue = deque([node for node in in_degree if in_degree[node] == 0]) top_order = [] while zero_in_degree_queue: node = zero_in_degree_queue.popleft() top_order.append(node) for neighbor in adj_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) return top_order top_order = topological_sort() # Longest path in DAG using topological sort longest_paths = {i: float(\'-inf\') for i in range(1, n + 1)} for node in top_order: if longest_paths[node] == float(\'-inf\'): longest_paths[node] = 0 for neighbor in adj_list[node]: if longest_paths[neighbor] < longest_paths[node] + 1: longest_paths[neighbor] = longest_paths[node] + 1 return max(longest_paths.values()) def longest_path_in_graph(T, test_cases): results = [] for t in range(T): n, m = test_cases[t][0] edges = test_cases[t][1] results.append(find_longest_path_length(n, edges)) return results"},{"question":"# Smart Wasps A beehive is under attack from smart wasps. The beehive can be represented as an array of cells, each of which contains a certain number of honey units. The wasps follow a strategy where they will attack cells in such a way as to maximize the amount of honey stolen, where the number of units stolen from attacked cell `i` is given by `2^k * h_i`, where `k` is the number of times the cell has been attacked previously, and `h_i` is the initial amount of honey in the cell. You are to develop a method to determine the minimum total number of wasp attacks required for the wasps to steal at least a certain amount of honey from the beehive. Input - The first line contains two integers `n` (1 ≤ n ≤ 100 000) — the number of cells in the beehive, and `H` (1 ≤ H ≤ 10^9) — the amount of honey the wasps are aiming to steal. - The second line contains `n` integers `h_1, h_2, ..., h_n` (1 ≤ h_i ≤ 10^6) — the initial amounts of honey in each cell. Output - Output a single integer `m` — the minimum number of attacks required. If there\'s no way to reach the target amount of honey, output `-1`. Example Input: 3 10 2 3 5 Output: 3 Explanation: - On the first attack, wasps steal 5 units from cell 3 (5*2^0 = 5). - On the second attack, wasps steal 2 units from cell 1 (2*2^0 = 2). - On the third attack, wasps steal 3 units from cell 2 (3*2^0 = 3). - The total honey stolen is 5 + 2 + 3 = 10 units, thus 3 attacks are required.","solution":"import heapq def min_wasp_attacks(n, H, honey_list): Determines the minimum number of wasp attacks required to steal at least H units of honey. Parameters: n (int): Number of cells in the beehive. H (int): Amount of honey the wasps are aiming to steal. honey_list (list): Initial amounts of honey in each cell. Returns: int: Minimum number of attacks required, or -1 if target is not achievable. if sum(honey_list) < H: return -1 # Create a max-heap with initial honey amounts max_heap = [] for h in honey_list: heapq.heappush(max_heap, -h) total_honey_stolen = 0 attacks = 0 while total_honey_stolen < H and max_heap: # Steal honey from the cell with the maximum initial amount left honey = -heapq.heappop(max_heap) total_honey_stolen += honey attacks += 1 # Add the next steal potential for this cell to the heap heapq.heappush(max_heap, -(honey // 2)) return attacks if total_honey_stolen >= H else -1"},{"question":"You are given a string s consisting of lowercase English letters and an integer k. You need to determine if it is possible to rearrange the characters of the string such that the distance between any two identical characters is at least k. If it is possible, return the lexicographically smallest possible rearrangement. If it is not possible, return \\"impossible\\". Note: The distance between two characters in the rearranged string is the difference of their positions in the string. # Input The first line contains the string s (1 ≤ |s| ≤ 1000). The second line contains an integer k (1 ≤ k ≤ |s|). # Output Output a single line containing the lexicographically smallest possible rearranged string if it is possible, otherwise output \\"impossible\\". # Example Input ```plaintext aabbcc 2 ``` Output ```plaintext abcabc ``` Input ```plaintext aaab 2 ``` Output ```plaintext impossible ``` # Explanation In the first example, the string \\"abcabc\\" ensures that the distance between any two identical characters is at least 2, and it is the lexicographically smallest possible arrangement. In the second example, it\'s impossible to rearrange \\"aaab\\" such that the distance between any two \'a\'s is at least 2.","solution":"from collections import Counter import heapq def rearrange_string(s, k): if k == 1: return \'\'.join(sorted(s)) counter = Counter(s) max_heap = [(-freq, char) for char, freq in counter.items()] heapq.heapify(max_heap) result = [] wait_queue = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) wait_queue.append((char, freq + 1)) if len(wait_queue) >= k: released_char, released_freq = wait_queue.pop(0) if released_freq < 0: heapq.heappush(max_heap, (released_freq, released_char)) result_str = \'\'.join(result) return result_str if len(result_str) == len(s) else \\"impossible\\""},{"question":"You are given a sequence of integers representing the heights of students in a line. You can swap the height of any two students. Your goal is to minimize the number of swaps required to arrange the students in non-decreasing order of their heights. For example, given the list of heights `3, 1, 2`, you can make the list sorted by swapping `1` and `3`, followed by swapping `2` and `3`. Thus, the minimum number of swaps required is 2. Your task is to write a function that computes the minimum number of swaps required to sort the list of heights in non-decreasing order. Input The input consists of a single test case in the following format: n A The first line contains an integer n, representing the number of students (1 leq n leq 10^5). The second line contains n space-separated integers A, representing the heights of the students (1 leq A[i] leq 10^9). Output Output the minimized number of swaps required to sort the list of heights. Examples Input 5 2 3 4 1 5 Output 3 Input 4 4 3 2 1 Output 2 Input 6 1 3 5 2 4 6 Output 3 Input 1 10 Output 0","solution":"def min_swaps_to_sort_heights(n, heights): Returns the minimum number of swaps required to sort the list of heights in non-decreasing order. indexed_heights = [(heights[i], i) for i in range(n)] # pair of (value, index) indexed_heights.sort() # sort based on the heights visited = [False] * n swaps = 0 for i in range(n): if visited[i] or indexed_heights[i][1] == i: continue cycle_length = 0 j = i while not visited[j]: visited[j] = True j = indexed_heights[j][1] cycle_length += 1 if cycle_length > 0: swaps += (cycle_length - 1) return swaps"},{"question":"Mark is planning for a hiking trip and needs to pack his bag. He has n items, and each item has a weight and a value. However, he can only carry a maximum weight of W in his bag. You need to help Mark determine the maximum value of items he can carry without exceeding the weight limit. You need to solve this problem using dynamic programming. # Input The first line of the input contains two integers, n (1 ≤ n ≤ 1000) and W (1 ≤ W ≤ 1000), which represent the number of items and the maximum weight that Mark can carry. The next n lines each contain two integers wi (1 ≤ wi ≤ 1000) and vi (1 ≤ vi ≤ 1000), which represent the weight and value of each item. # Output Print a single integer representing the maximum value of items Mark can carry without exceeding the weight limit. # Examples Input 4 7 1 1 3 4 4 5 5 7 Output 9 Note In the given example, Mark can carry items with weights and values as follows: 3 and 4, 4 and 5. Therefore, the maximum value of items he can carry without exceeding the weight limit of 7 is 4 + 5 = 9.","solution":"def knapsack(n, W, items): dp = [[0] * (W + 1) for _ in range(n + 1)] for i in range(1, n + 1): wi, vi = items[i - 1] for w in range(1, W + 1): dp[i][w] = dp[i - 1][w] if w >= wi: dp[i][w] = max(dp[i][w], dp[i - 1][w - wi] + vi) return dp[n][W] # Example usage: n = 4 W = 7 items = [(1, 1), (3, 4), (4, 5), (5, 7)] print(knapsack(n, W, items)) # Output: 9"},{"question":"Given a string consisting of lowercase alphabetic characters, determine the length of the longest palindrome that can be constructed using the characters of the string. Note that the palindrome does not need to be a substring, it just needs to be constructed from the characters. Input Format: The first line contains the number of test cases T. Each of the next T lines contains a single string S. Output Format: For each test case, print the length of the longest possible palindrome that can be constructed using the characters of the string. Constraints: 1 ≤ T ≤ 10^5 1 ≤ |S| ≤ 10^6 All strings contain only lowercase English letters (a-z). SAMPLE INPUT 2 abccccdd a SAMPLE OUTPUT 7 1 Explanation: In the first test case, the longest palindrome that can be constructed is \\"dccaccd\\", with a length of 7. In the second test case, the longest palindrome that can be constructed is \\"a\\", with a length of 1.","solution":"def longest_palindrome_length(s): from collections import Counter char_counts = Counter(s) length = 0 odd_count_found = False for char, count in char_counts.items(): if count % 2 == 0: length += count else: length += count - 1 odd_count_found = True if odd_count_found: length += 1 return length def process_test_cases(test_cases): results = [] for s in test_cases: result = longest_palindrome_length(s) results.append(result) return results"},{"question":"# Counting Divisors You have been given an integer array A of size N . Your task is to count how many elements in the array are divisible by M . # Input: The input is given from the standard input in the following format: ``` N M A_1 A_2 ... A_N ``` Where: - N is the number of elements in the array ( 1 leq N leq 10000 ) - M is the divisor ( 1 leq M leq 10000 ) - A_i are the array elements ( 1 leq A_i leq 10000 ) # Output: Print the number of elements in the array that are divisible by M . # Example Input: ``` 5 3 3 6 7 9 10 ``` # Example Output: ``` 3 ``` # Example Input: ``` 4 5 5 10 15 20 ``` # Example Output: ``` 4 ``` # Example Input: ``` 6 2 1 4 9 8 12 3 ``` # Example Output: ``` 3 ``` # Notes: - Elements to be counted are strictly those that yield zero when divided by M . - Ensure to read input from standard input and provide output to standard output.","solution":"def count_divisors(N, M, A): Counts how many elements in the array A are divisible by M. Parameters: N (int): Number of elements in the array. M (int): Divisor. A (list of int): Array of integers. Returns: int: Number of elements in the array that are divisible by M. count = 0 for element in A: if element % M == 0: count += 1 return count # To read input from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) A = list(map(int, data[2:])) print(count_divisors(N, M, A))"},{"question":"A company is looking to enhance their security by implementing an algorithm that detects potential suspicious activities in user logs. Each user activity in the log is represented as a string s_i (1-indexed), where s_i denotes the i-th activity of a user on the company\'s website. A user activity log is represented as an array of strings, each string indicating an activity. Suspicious activity is identified when there is a specific pattern of repeated activities within a subarray of the user\'s activity log. The repeating pattern of activities should form a contiguous subarray and must occur at least twice without any overlapping. For instance, if a user activity log is [\'login\', \'click\', \'scroll\', \'click\', \'scroll\'], then the subarray [\'click\', \'scroll\'] appears twice. Write a function to determine if a log contains any suspicious activity as described. Input The first line contains an integer k (1 ≤ k ≤ 1000) — the number of test cases. Each test case consists of the following: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of activities in the user\'s activity log. - The next line contains n strings, each indicating a user activity. Output For each test case, print \\"Yes\\" if suspicious activity is detected; otherwise, print \\"No\\". Example Input 3 5 login click scroll click scroll 6 view click scroll view click scroll 4 open close open close Output Yes Yes Yes Note In the first test case, the subarray [\'click\', \'scroll\'] is repeated. In the second test case, the subarray [\'view\', \'click\', \'scroll\'] is repeated. In the third test case, the subarray [\'open\', \'close\'] is repeated.","solution":"def detect_suspicious_activity(k, test_cases): results = [] for i in range(k): n, activities = test_cases[i] for length in range(1, n // 2 + 1): seen = set() for start in range(n - 2 * length + 1): pattern = tuple(activities[start:start + length]) if pattern in seen: results.append(\\"Yes\\") break seen.add(pattern) else: continue break else: results.append(\\"No\\") return results # Example usage k = 3 test_cases = [ (5, [\\"login\\", \\"click\\", \\"scroll\\", \\"click\\", \\"scroll\\"]), (6, [\\"view\\", \\"click\\", \\"scroll\\", \\"view\\", \\"click\\", \\"scroll\\"]), (4, [\\"open\\", \\"close\\", \\"open\\", \\"close\\"]) ] print(detect_suspicious_activity(k, test_cases))"},{"question":"Given a list of integers, we define a contiguous subsequence as a sequence derived by deleting some or no elements without changing the order of the remaining elements. Write a function that finds a contiguous subsequence with the maximum possible sum. If there are multiple such subsequences, return the one which has the smallest starting index. If there is still a tie, return the one which has the smallest ending index. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the list. The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the list. Output Print two integers representing the start and end positions (1-based indexing) of the contiguous subsequence with the maximum sum. If there are multiple such subsequences, print the one with the smallest starting index. If there is still a tie, print the one with the smallest ending index. Examples Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 4 7 Input 5 1 2 3 -2 5 Output 1 5 Input 6 -1 -2 -3 -4 -5 -6 Output 1 1","solution":"def max_subsequence_indices(n, arr): max_sum = -float(\'inf\') current_sum = 0 start = end = temp_start = 0 for i in range(n): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i elif current_sum == max_sum: if i - temp_start < end - start: start = temp_start end = i if current_sum < 0: current_sum = 0 temp_start = i + 1 return start + 1, end + 1"},{"question":"Matt loves the Fibonacci sequence and he is trying to create a game based on the Fibonacci numbers. He needs your help to compute the n-th Fibonacci number, but there\'s a twist: since the numbers can get very large, he wants to know the n-th Fibonacci number modulo 1000000007. Input The first line contains an integer T, denoting the number of test cases. In the next T lines, each line has exactly one positive integer n denoting the position in the Fibonacci sequence (1-indexed). Output Output should contain T lines. Print the n-th Fibonacci number modulo 1000000007 for each n in a separate line. Constraints 1 <= T <= 10^5 1 <= n <= 10^9 Example Input 3 1 2 10 Output 1 1 55 Explanation Test case 1: The 1st Fibonacci number is 1. Test case 2: The 2nd Fibonacci number is 1. Test case 3: The 10th Fibonacci number is 55.","solution":"MOD = 1000000007 def matrix_mult(A, B, mod=MOD): return [ [(A[0][0] * B[0][0] + A[0][1] * B[1][0]) % mod, (A[0][0] * B[0][1] + A[0][1] * B[1][1]) % mod], [(A[1][0] * B[0][0] + A[1][1] * B[1][0]) % mod, (A[1][0] * B[0][1] + A[1][1] * B[1][1]) % mod] ] def matrix_pow(mat, exp, mod=MOD): res = [[1, 0], [0, 1]] base = mat while exp > 0: if exp % 2 == 1: res = matrix_mult(res, base, mod) base = matrix_mult(base, base, mod) exp //= 2 return res def fibonacci_mod(n, mod=MOD): if n == 1 or n == 2: return 1 F = [[1, 1], [1, 0]] result = matrix_pow(F, n - 1, mod) return result[0][0] def solve_fibonacci(test_cases): results = [] for n in test_cases: results.append(fibonacci_mod(n)) return results"},{"question":"A palindrome is a string that reads the same forwards and backwards. Palindromes can be a single word like \\"radar\\" or \\"level\\", or a sequence of words like \\"A man, a plan, a canal, Panama\\". For this task, you are to determine whether a given string (ignoring spaces, punctuation, and case) is a palindrome. Create a function that checks if a given string is a palindrome. The string can contain spaces, punctuation, and letters of mixed case, but only the letter characters should be considered for determining if it is a palindrome. You should ignore: - Spaces - Special characters (e.g., \\",\\", \\".\\", \\"!\\", etc.) - Letter case differences Input - A single string s (1 ≤ |s| ≤ 10^5) which contains alpha-numeric characters, spaces, and punctuation marks. Output - Print \\"YES\\" if the input string is a palindrome after removing ignored characters. Otherwise, print \\"NO\\". Examples Input A man, a plan, a canal, Panama Output YES Input No lemon, no melon Output YES Input Hello, World! Output NO Explanation: - For the first example, when we ignore spaces, comma, and letter case, it becomes \\"amanaplanacanalpanama\\", which is the same forwards and backwards. - For the second example, \\"nolemonnomelon\\" is the same forwards and backwards. - For the third example, \\"helloworld\\" is not the same backwards as it is forwards.","solution":"def is_palindrome(s): Determines if a given string s is a palindrome. Ignores spaces, punctuation, and case differences. Prints \\"YES\\" if the string is a palindrome, otherwise \\"NO\\". import re normalized_str = re.sub(r\'[^a-zA-Z]\', \'\', s).lower() if normalized_str == normalized_str[::-1]: print(\\"YES\\") else: print(\\"NO\\")"},{"question":"Given n integers representing the heights of buildings, determine the total amount of \\"water\\" that these buildings can trap after raining. Each building is represented by an array of non-negative integers where each number represents the height of the building located at that particular index. The width of each building is 1. You need to calculate the total amount of trapped water. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of buildings. - The second line contains n space-separated non-negative integers representing the heights of the buildings. Each height is in the range [0, 10^4]. Output: - Output a single integer, the total amount of trapped water. Example: Input: 6 0 1 0 2 1 0 1 3 2 1 2 1 Output: 6 Explanation: ⏐ 3 ⏐ ⊣ 2 ⏐ ⏐️️️️ ⊣ 1 ⏐ ⏐ ⏐️️️️️️️️ ⏐️️️️ ⏐️️️️ 0 ⏐ ⏐️️️️ ⏐️️️️ ⏐️️️️ ⏐️️️️ ⏐ ⏐️️️️ -- -- -- -- -- -- 0 1 0 2 1 0 1 3 2 1 2 1 In the above example, 6 units of water (indicated by ⊣ symbols) are trapped.","solution":"def trap_rain_water(heights): Calculate the total amount of trapped rain water given the heights of buildings. :param heights: List of integers representing the height of buildings. :return: Integer representing the total trapped water. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"You are given an array of n distinct integers a_1, a_2, ..., a_n, and two integers l and r (1 ≤ l ≤ r ≤ n). We define a \\"range sum\\" as the sum of elements from the l-th to the r-th element in the array, inclusive. Now, consider a series of q operations that involve either updating an element in the array or querying the range sum of a subarray. Operation types: - Update the element at a specific index to a new value. - Query the range sum of a subarray. You need to handle these operations efficiently. Input: The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) – the length of the array and the number of operations. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) – the initial array. The next q lines describe the operations. Each operation is either of the form: - \\"1 pos x\\" (1 ≤ pos ≤ n, 1 ≤ x ≤ 10^6), which means update the element at index pos to x. - \\"2 l r\\" (1 ≤ l ≤ r ≤ n), which means query the range sum of elements from index l to index r (inclusive). Output: For each query operation, output the result of the range sum. Example: Input: ``` 5 4 1 2 3 4 5 2 1 3 1 3 10 2 2 5 1 5 1 2 1 5 ``` Output: ``` 6 21 18 ``` Explanation: - For the first query \\"2 1 3\\", the range sum of elements 1, 2, 3 is 1 + 2 + 3 = 6. - After the update \\"1 3 10\\", the array becomes [1, 2, 10, 4, 5]. - For the second query \\"2 2 5\\", the range sum of elements 2, 10, 4, 5 is 2 + 10 + 4 + 5 = 21. - After the update \\"1 5 1\\", the array becomes [1, 2, 10, 4, 1]. - For the final query \\"2 1 5\\", the range sum of elements 1, 2, 10, 4, 1 is 1 + 2 + 10 + 4 + 1 = 18.","solution":"class RangeSumQuery: def __init__(self, array): self.n = len(array) self.array = array self.prefix_sum = self._build_prefix_sum(array) def _build_prefix_sum(self, array): prefix_sum = [0] * (self.n + 1) for i in range(1, self.n + 1): prefix_sum[i] = prefix_sum[i - 1] + array[i - 1] return prefix_sum def update(self, pos, x): diff = x - self.array[pos - 1] self.array[pos - 1] = x for i in range(pos, self.n + 1): self.prefix_sum[i] += diff def query(self, l, r): return self.prefix_sum[r] - self.prefix_sum[l - 1] def process_commands(n, array, commands): rsq = RangeSumQuery(array) results = [] for command in commands: parts = command.split() if parts[0] == \'1\': pos, x = int(parts[1]), int(parts[2]) rsq.update(pos, x) elif parts[0] == \'2\': l, r = int(parts[1]), int(parts[2]) results.append(rsq.query(l, r)) return results"},{"question":"Write a function to determine the maximum profit that can be achieved by buying and selling one stock over a given time period. The stock prices for each day are provided as an array, where the ith element represents the price of the stock on day i. You can only complete at most one transaction (i.e., buy one and sell one share of the stock), and you must buy before you sell. Function signature: `def maxProfit(prices: List[int]) -> int:` Input A list of integers `prices` where `1 <= len(prices) <= 10^5` and `0 <= prices[i] <= 10^4` for each `i`. Output Return an integer representing the maximum profit that can be achieved. If no profit can be made, return 0. Examples Input prices = [7, 1, 5, 3, 6, 4] Output 5 Explanation Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. Note that after you buy the stock, you cannot buy it again before you sell it. Input prices = [7, 6, 4, 3, 1] Output 0 Explanation In this case, no transaction is done, and the max profit is 0. Note The function should run in linear time complexity O(n) and use constant space O(1).","solution":"def maxProfit(prices): Finds the maximum profit that can be achieved by buying and selling one stock. :param prices: List of integers where each represents the stock price on a given day :return: Maximum profit that can be achieved. 0 if no profit can be made. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"In the Kingdom of Alpha, there are several towns connected by bidirectional roads that create a network. Each road has a weight representing its length. The King\'s advisor wants to ensure that the towns are connected in the most efficient way possible, specifically building the minimum spanning tree (MST) of the road network. Your task is to help the advisor by identifying the total length of the MST. Input The first line contains two integers, `T` (number of towns) and `R` (number of roads) where (2 ≤ T ≤ 10^5) and (1 ≤ R ≤ 2*10^5). Each of the next `R` lines contains three integers `u`, `v`, and `w` - representing a road connecting town `u` and town `v` with a length `w` (1 ≤ u, v ≤ T and 1 ≤ w ≤ 10^4). Output Output a single integer representing the total length of the minimum spanning tree. Example Input 5 7 1 2 4 1 3 2 2 3 1 2 4 7 3 4 3 3 5 5 4 5 6 Output 14 Explanation The minimum spanning tree of the given road network includes the roads with the lengths: 1 (connecting towns 2-3), 2 (connecting towns 1-3), 3 (connecting towns 3-4), and 5 (connecting towns 3-5), resulting in a total length of 1 + 2 + 3 + 5 = 11.","solution":"import heapq def find(parent, i): A function to find the set of an element i (uses path compression technique) if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): A function that does union of two sets of x and y (uses union by rank) xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(towns, roads): Function to construct MST using Kruskal\'s algorithm result = [] # Step 1: Sort all the edges in non-decreasing order of their weight. roads = sorted(roads, key=lambda item: item[2]) parent = [] rank = [] # Create V subsets with single elements for node in range(towns): parent.append(node) rank.append(0) # Number of edges to be taken is equal to V-1 e = 0 i = 0 # Step 2: Pick the smallest edge. Check if it forms a cycle with the spanning tree # formed so far. If cycle is not formed, include this edge. Else, discard it. while e < towns - 1: # Step 2.1: Pick the smallest edge and increment the index for next iteration u, v, w = roads[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) # If including this edge does\'t cause cycle, include it in result and increment # the index of result for next edge if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) # Else discard the edge # Print the contents of result[] to display the built MST minimum_cost = sum([w for u, v, w in result]) return minimum_cost def minimum_spanning_tree(towns, road_data): return kruskal_mst(towns, road_data)"},{"question":"A company plans to build an impressive triangular tower using blocks. The tower will consist of rows of blocks where each row is just one block shorter than the row below it, ending with a single block at the top. In this particular tower, each block can sit on two blocks from the row below it. Given the company\'s goal of using up exactly all the blocks they have, determine the height of the tallest possible triangular tower they can build. Input The input consists of a single integer n (0 ≤ n ≤ 10^6) — the total number of blocks available. Output Output a single integer — the height of the tallest triangular tower that can be built with exactly n blocks. Examples Input 10 Output 4 Input 3 Output 2 Input 1 Output 1 Note In the first example, with 10 blocks, the company can build a tower with a height of 4 rows: 1 block (top row) 2 blocks 3 blocks 4 blocks (bottom row) Total blocks used = 1 + 2 + 3 + 4 = 10","solution":"def tallest_tower_height(n): Determines the height of the tallest triangular tower that can be built with exactly n blocks. :param n: Total number of blocks available. :type n: int :return: Height of the tallest triangular tower. :rtype: int height = 0 total_blocks = 0 while total_blocks + height + 1 <= n: height += 1 total_blocks += height return height"},{"question":"At a certain time of the day, it takes x minutes for a raindrop to fall from a cloud to the ground. Given a time in hh:mm format, calculate the exact time when the raindrop will hit the ground. Constraints * 0≤hh≤23 * 0≤mm≤59 * 1≤x≤120 * hh and mm are integers. Input Input is given from Standard Input in the following format: hh mm x Output Print the time in hh:mm format when the raindrop will hit the ground. Examples Input 11 45 10 Output 11:55 Input 23 58 5 Output 00:03","solution":"def calculate_drop_time(hh, mm, x): Calculate the time when the raindrop will hit the ground. Parameters: hh (int): Initial hours (0 ≤ hh ≤ 23) mm (int): Initial minutes (0 ≤ mm ≤ 59) x (int): Time in minutes for the raindrop to fall (1 ≤ x ≤ 120) Returns: str: Time in hh:mm format when the raindrop will hit the ground total_minutes = hh * 60 + mm + x new_hh = (total_minutes // 60) % 24 new_mm = total_minutes % 60 return f\\"{new_hh:02d}:{new_mm:02d}\\""},{"question":"A wizard is experimenting with magical potions to gain new powers. He has collected a series of potion bottles, each labeled with a unique integer ranging from 1 to n. The wizard aims to drink the potions in a specific sequence to maximize his magical abilities. However, not all sequences are allowed; each potion has specific potions that must be drunk before it for maximum effect. The wizard needs to know all the valid sequences of drinking potions that would respect the magical order requirements. You are tasked with finding all possible valid sequences. Input: - The first line contains an integer n (1 ≤ n ≤ 10), the number of potions. - The second line contains an integer m (0 ≤ m ≤ 20), the number of magical orders. - The following m lines each contain two integers a and b, indicating that potion a must be drunk before potion b. Output: Print all valid sequences, one sequence per line. Sequences must be printed in lexicographical order. If there\'s no valid sequence, print \\"No valid sequence\\". Example Input 3 2 1 2 1 3 Output 1 2 3 1 3 2 Explanation For this example: - The potion 1 must be drunk before potions 2 and 3. - Hence, the valid sequences that respect these rules are [1, 2, 3] and [1, 3, 2]. Another Example Input 3 3 1 2 2 3 1 3 Output 1 2 3 Explanation Here: - The potion 1 must be drunk before potion 2 and potion 3. - The potion 2 must be drunk before potion 3. - Hence, the only valid sequence that respects these rules is [1, 2, 3].","solution":"from itertools import permutations def find_valid_sequences(n, m, orders): # Create a list of all potions potions = list(range(1, n + 1)) # Create a map to store dependencies must_be_before = {i: set() for i in potions} for a, b in orders: must_be_before[b].add(a) valid_sequences = [] # Check all possible permutations for perm in permutations(potions): is_valid = True for b in range(n): for a in must_be_before[perm[b]]: if perm.index(a) > b: is_valid = False break if not is_valid: break if is_valid: valid_sequences.append(perm) if not valid_sequences: print(\\"No valid sequence\\") else: for seq in sorted(valid_sequences): print(\\" \\".join(map(str, seq))) # Example usage if __name__ == \\"__main__\\": n = 3 m = 2 orders = [(1, 2), (1, 3)] find_valid_sequences(n, m, orders)"},{"question":"You are given a directed graph with N nodes and M edges. Find the number of strongly connected components (SCCs) in the graph. # Constraints * 1 leq N leq 10^5 * 1 leq M leq 10^5 # Input The input is given in the following format: N M Next M lines, each containing two integers u and v indicating a directed edge from node u to node v. # Output Print the number of strongly connected components in the graph. # Example Input ``` 5 5 1 2 2 3 3 1 4 5 5 4 ``` Output ``` 2 ``` Explanation The graph has two SCCs: 1. Nodes {1, 2, 3} 2. Nodes {4, 5}","solution":"from collections import defaultdict, deque def kosaraju_scc_count(n, edges): def dfs(v, graph, visited, stack=None, component=None): visited[v] = True if component is not None: component.append(v) for neighbour in graph[v]: if not visited[neighbour]: dfs(neighbour, graph, visited, stack, component) if stack is not None: stack.append(v) graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in edges: graph[u].append(v) reverse_graph[v].append(u) stack = [] visited = [False] * (n + 1) for i in range(1, n + 1): if not visited[i]: dfs(i, graph, visited, stack) visited = [False] * (n + 1) scc_count = 0 while stack: node = stack.pop() if not visited[node]: component = [] dfs(node, reverse_graph, visited, component=component) if component: scc_count += 1 return scc_count # Function to process input and call the SCC function def find_scc_count(n, m, edges): return kosaraju_scc_count(n, edges)"},{"question":"There\'s a large wall which you\'ll paint over a few days using a variety of colors, but the owner is very particular about the pattern of colors. Each day, you have a fixed set of colors you can use. You need to ensure that for each segment of the wall of a specified length, there are no adjacent segments that have the same color. More formally, you are given an array `colors` of length `n` where each `colors[i]` represents the color you can paint on the `i-th` day. You are also given an integer `k` which represents the length of the segment on the wall that needs to be checked for repeating colors. Your task is to determine if it\'s possible to paint the wall based on the above restriction. **Input** - First line contains two integers `n` and `k` (1 ≤ n ≤ 1000, 1 ≤ k ≤ n) — the number of days (length of the `colors` array) and the segment length respectively. - Second line contains `n` integers representing the `colors` array where each integer is between 1 and 100 (inclusive). **Output** Print \\"YES\\" if it\'s possible to paint the wall without any repeated color in consecutive segments of length `k`. Otherwise, print \\"NO\\". **Examples** **Example 1:** - **Input:** ``` 6 3 1 2 3 1 2 3 ``` - **Output:** ``` YES ``` **Example 2:** - **Input:** ``` 5 2 1 1 2 2 3 ``` - **Output:** ``` NO ``` **Explanation:** In the first example, no color repeats in any segment of length 3. In the second example, the color 1 repeats in the segment [1, 1] and the color 2 repeats in the segment [2, 2], hence it is not possible. Note: A color repeating in the same segment (like in [1, 1] or [2, 2]) violates the condition. Each segment of length `k` must have unique colors.","solution":"def can_paint_wall_without_repeating_colors(n, k, colors): Determines if it\'s possible to paint the wall without repeating colors in any segment of length k. Parameters: n (int): The number of days / length of the colors array. k (int): The segment length. colors (list of int): The colors array. Returns: str: \\"YES\\" if it\'s possible, otherwise \\"NO\\". for i in range(n - k + 1): segment = colors[i:i + k] if len(segment) != len(set(segment)): return \\"NO\\" return \\"YES\\""},{"question":"In a programming competition, Qasim received a challenging problem. He was given a list of integers representing the lengths of various ropes. His task was to find the minimum cost to connect all the ropes into one continuous rope. The cost to connect two ropes is equal to the sum of their lengths, and the resulting rope has a length equal to this sum. For example, if Qasim has three ropes of lengths 4, 3, and 2, he can connect the rope of lengths 3 and 4 to make a rope of length 7 with a cost of 7. Then, he can connect this rope of length 7 with the remaining rope of length 2 to make a rope of length 9 at an additional cost of 9. The total cost would be 7 + 9 = 16. Given a list of rope lengths, help Qasim determine the minimum cost required to connect all the ropes into one continuous rope. # Input - The first line contains an integer n (1 ≤ n ≤ 105) — the number of ropes. - The second line contains n integers, where each integer ai (1 ≤ ai ≤ 104) represents the length of a rope. # Output Output a single integer — the minimum cost required to connect all ropes into one continuous rope. # Example Input: 5 4 3 2 6 5 Output: 45 Explanation: The minimum cost way to connect the ropes is as follows: 1. Connect ropes of lengths 2 and 3 for a cost of 5, resulting in a new rope of length 5. 2. Connect ropes of lengths 4 and 5 for a cost of 9, resulting in a new rope of length 9. 3. Connect ropes of lengths 5 and 6 for a cost of 11, resulting in a new rope of length 11. 4. Connect ropes of lengths 9 and 11 for a cost of 20, resulting in the final rope length of 20. The total cost is 5 + 9 + 11 + 20 = 45.","solution":"import heapq def min_cost_to_connect_ropes(ropes): Given a list of rope lengths, return the minimum cost to connect all ropes into one continuous rope. The cost to connect two ropes is equal to the sum of their lengths. if len(ropes) == 1: return 0 heapq.heapify(ropes) total_cost = 0 while len(ropes) > 1: first = heapq.heappop(ropes) second = heapq.heappop(ropes) cost = first + second total_cost += cost heapq.heappush(ropes, cost) return total_cost"},{"question":"Given a list of integers, you are required to find and output the maximum possible sum of a subsequence such that no two elements in the subsequence are adjacent in the original list. Input A single line containing integers separated by spaces. Each integer is guaranteed to be between -1000 and 1000, inclusive, and the total number of integers will be no more than 100,000. Output The maximum possible sum of a subsequence where no two elements are adjacent. Example Input 3 2 5 10 7 Output 15 Explanation The selected subsequence is [3, 10, 2] the sum of which is 15.","solution":"def max_non_adjacent_sum(arr): Returns the maximum possible sum of a subsequence where no two elements are adjacent. if not arr: return 0 if len(arr) == 1: return max(0, arr[0]) # Initialize two variables to keep track of the maximum sum with and without the previous element incl = max(0, arr[0]) # max sum including the previous element excl = 0 # max sum excluding the previous element for num in arr[1:]: # Current max excluding the current number new_excl = max(incl, excl) # Current max including the current number incl = excl + num excl = new_excl # Return the maximum of incl and excl return max(incl, excl)"},{"question":"Tom and Jerry are playing a game using a square grid of size n × n. Each cell in the grid contains a non-negative integer. Tom selects a cell and counts the total sum of the numbers in all cells that share the same row as the selected cell. Jerry does the same for the cells that share the same column. The game requires them to find a special cell, called the \\"balance point.\\" A cell is considered a balance point if the sum of its row is equal to the sum of its column. Your task is to determine the number of balance points in the given grid. Input The first line contains an integer n (1 ≤ n ≤ 30). Each of the following n lines contains n space-separated integers. The j-th number on the i-th line represents the number on the square that belongs to the j-th column and the i-th row on the grid. All numbers on the board are non-negative integers from 0 to 100. Output Print the single integer representing the number of balance points in the grid. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 1 Input 4 4 5 6 7 1 2 3 4 8 4 3 2 5 9 7 3 Output 0 Input 2 0 0 0 0 Output 4 Explanation In the first example, the middle cell (5) is the only balance point because the sum of its row (4 + 5 + 6 = 15) equals the sum of its column (2 + 5 + 8 = 15). In the second example, there are no balance points. In the third example, every cell is a balance point because all row and column sums are zero.","solution":"def count_balance_points(grid): n = len(grid) # Compute the row sums row_sums = [sum(row) for row in grid] # Compute the column sums col_sums = [sum(grid[i][j] for i in range(n)) for j in range(n)] balance_count = 0 # Check for balance points for i in range(n): for j in range(n): if row_sums[i] == col_sums[j]: balance_count += 1 return balance_count # Test cases if __name__ == \\"__main__\\": grid1 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(count_balance_points(grid1)) # Output: 1 grid2 = [ [4, 5, 6, 7], [1, 2, 3, 4], [8, 4, 3, 2], [5, 9, 7, 3] ] print(count_balance_points(grid2)) # Output: 0 grid3 = [ [0, 0], [0, 0] ] print(count_balance_points(grid3)) # Output: 4"},{"question":"Imagine you are given an array of positive integers. Your task is to find the maximum possible product of two distinct elements of the array. The array is guaranteed to have at least two elements. Input The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Print the maximum possible product of two distinct elements of the array. Examples Input 5 1 2 3 4 5 Output 20 Input 2 10 10 Output 100 Input 4 1 1 1 1 Output 1 Note In the first example, the maximum product can be obtained by taking the elements 4 and 5, which gives 4 * 5 = 20. In the second example, the maximum product is obtained by taking both 10s, giving us 10 * 10 = 100. In the third example, since all elements are the same, the product of any two elements is 1 * 1 = 1.","solution":"def max_product_of_two_distinct_elements(arr): Returns the maximum possible product of two distinct elements in the array. arr = sorted(arr) return arr[-1] * arr[-2] # Example Usage: # arr = [1, 2, 3, 4, 5] # print(max_product_of_two_distinct_elements(arr)) # Output: 20"},{"question":"STATEMENT You have been assigned to build a simple book inventory system for a local library. The library has a list of books where each book has a unique identifier, a title, and an author. The system should support adding a new book, removing a book by its identifier, and querying the current list of books sorted by title in lexicographical order. Your task is to implement three functions: `addBook`, `removeBook`, and `queryBooks`. - `addBook(id: int, title: str, author: str)`: Adds a new book with the given id, title, and author to the inventory. If a book with the same id already exists, it should be replaced. - `removeBook(id: int)`: Removes the book with the given id from the inventory. If no such book exists, do nothing. - `queryBooks() -> List[Tuple[int, str, str]]`: Returns a list of all books in the inventory sorted by title in lexicographical order. Each entry in the list should be a tuple containing the id, title, and author of a book. Implement the BookInventory class to represent the inventory and provide the required functionality. CONSTRAINTS - The book id is a unique integer between 1 and 10^6. - The title and author are non-empty strings with a maximum length of 100 characters. - The total number of books in the inventory will not exceed 10^4. EXAMPLE INPUT ```python inventory = BookInventory() inventory.addBook(1, \\"Harry Potter\\", \\"J.K. Rowling\\") inventory.addBook(2, \\"A Game of Thrones\\", \\"George R.R. Martin\\") inventory.addBook(3, \\"The Hobbit\\", \\"J.R.R. Tolkien\\") inventory.removeBook(2) print(inventory.queryBooks()) ``` OUTPUT ```python [(1, \\"Harry Potter\\", \\"J.K. Rowling\\"), (3, \\"The Hobbit\\", \\"J.R.R. Tolkien\\")] ``` In this example, the `A Game of Thrones` book was removed from the inventory, and the remaining books are sorted by title.","solution":"from typing import List, Tuple class BookInventory: def __init__(self): self.inventory = {} def addBook(self, id: int, title: str, author: str): self.inventory[id] = (title, author) def removeBook(self, id: int): if id in self.inventory: del self.inventory[id] def queryBooks(self) -> List[Tuple[int, str, str]]: return sorted([(id, title, author) for id, (title, author) in self.inventory.items()], key=lambda x: x[1])"},{"question":"You are given an integer array `arr` of size `n` (1 ≤ n ≤ 10^5). You need to process `q` queries (1 ≤ q ≤ 10^5). Each query is in the form of \\"l r k\\", where you have to find all the distinct elements in the subarray from index `l` to `r` (inclusive) whose value is greater than or equal to `k`. Input The first line contains two integers `n` and `q`, the size of the array and the number of queries respectively. The second line contains `n` space-separated integers, representing the elements of the array. Each of the following `q` lines contains three space-separated integers `l`, `r`, and `k` (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ 10^4). Output For each query, print the number of distinct elements in the subarray from index `l` to `r` whose value is greater than or equal to `k`. Example Input 6 3 5 1 2 3 4 5 1 6 3 2 5 2 3 3 1 Output 3 3 1 Explanation 1) For the first query, subarray is [5, 1, 2, 3, 4, 5]. Distinct elements >= 3 are {3, 4, 5} (three elements). 2) For the second query, subarray is [1, 2, 3, 4]. Distinct elements >= 2 are {2, 3, 4} (three elements). 3) For the third query, subarray is [2]. The only element >= 1 is {2} (one element).","solution":"def query_distinct_elements(n, q, arr, queries): Processes multiple queries to count distinct elements in subarrays of `arr` that are greater than or equal to a specified value `k`. :param n: Number of elements in the array `arr` :param q: Number of queries :param arr: List of integers representing the array :param queries: List of tuples where each tuple contains three integers (l, r, k) :return: List of integers, each representing the answer to one query results = [] for l, r, k in queries: subarray = arr[l-1:r] distinct_elements = {x for x in subarray if x >= k} results.append(len(distinct_elements)) return results"},{"question":"You are given an array of N integers and Q queries. Each query consists of two indices L and R. For each query, you need to return the sum of all the unique prime numbers in the subarray from L to R (inclusive). Implement a function to handle the queries efficiently. Input: - The first line of input contains two integers N and Q. - The second line contains N space-separated integers, representing the elements of the array. - The next Q lines each contain two integers L and R, representing the indices for a query. Output: - For each query, output the sum of all the unique prime numbers in the specified subarray. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ A[i] ≤ 10^6 - 1 ≤ L ≤ R ≤ N Example Input: 5 3 2 3 4 5 6 1 3 2 4 1 5 Example Output: 5 3 10 Explanation: - For the first query, the subarray is [2, 3, 4]. The unique prime numbers are 2 and 3, and their sum is 5. - For the second query, the subarray is [3, 4, 5]. The unique prime numbers are 3 and 5, and their sum is 8. - For the third query, the subarray is [2, 3, 4, 5, 6]. The unique prime numbers are 2, 3, and 5, and their sum is 10.","solution":"def sieve_primes_upto(limit): is_prime = [True] * (limit + 1) p = 2 while (p * p <= limit): if (is_prime[p] == True): for i in range(p * p, limit + 1, p): is_prime[i] = False p += 1 is_prime[0], is_prime[1] = False, False # 0 and 1 are not prime numbers primes = set() for p in range(limit + 1): if is_prime[p]: primes.add(p) return primes def sum_of_unique_primes(arr, queries): max_val = max(arr) primes = sieve_primes_upto(max_val) result = [] for L, R in queries: subarray = arr[L-1:R] unique_primes = set(filter(lambda x: x in primes, subarray)) result.append(sum(unique_primes)) return result"},{"question":"You are given a bookshelf with `n` slots and several piles of books. There are `m` piles of books where each pile has a specific number of books. You want to arrange all the books on the bookshelf such that the number of books in each slot does not exceed a given limit `l`. Each slot in the bookshelf can hold any book from any pile, and you can split piles into parts to distribute them across the slots. Your task is to determine the minimum number of slots needed to accommodate all the books without exceeding the limit in any slot. Input The first line contains three space-separated integers `n`, `m`, and `l` — the number of slots on the bookshelf, the number of piles of books, and the limit of books in each slot (1 ≤ n, m ≤ 1000; 1 ≤ l ≤ 1000). The second line contains `m` space-separated integers where the i-th integer represents the number of books in the i-th pile. Each pile has at least one book. Output Print a single integer — the minimum number of slots needed to arrange all the books under the given constraints. Examples Input 10 5 5 4 8 1 7 4 Output 5 Input 6 3 2 3 3 3 Output 5 Note In the first example, you can arrange the books as follows: - Slot 1: 4 books from pile 1 - Slot 2: 5 books from pile 2 - Slot 3: 3 books from pile 2 (remaining), 2 books from pile 3 - Slot 4: 5 books from pile 4 - Slot 5: 4 books from pile 5 In the second example, you will need to break the piles as follows: - Slot 1: 2 books from pile 1 - Slot 2: 1 book from pile 1 (remaining), 1 book from pile 2 - Slot 3: 2 books from pile 2 (remaining) - Slot 4: 1 book from pile 2 (remaining), 1 book from pile 3 - Slot 5: 2 books from pile 3","solution":"def min_slots_needed(n, m, l, piles): Determine the minimum number of slots needed to accommodate all the books with a limit of l books per slot. Parameters: - n (int): Number of bookshelf slots - m (int): Number of book piles - l (int): Limit of books per slot - piles (list): List of integers where each integer represents the number of books in each pile Returns: - int: Minimum number of slots needed total_books = sum(piles) # Calculate the minimum number of slots needed if each slot can hold up to l books slots_needed = (total_books + l - 1) // l # The slots needed should not exceed the number of slots on the bookshelf return min(slots_needed, n)"},{"question":"Implement a function `findBirdsWatchingPattern` that helps in analyzing bird-watching patterns. The function should take two arguments: an array of integers representing the types of birds observed and an integer representing the length of a subarray to analyze. Each type of bird is represented by a unique integer. Your task is to return the type of bird that is most frequently observed within any subarray of the given length. If there is more than one type of bird with the same highest frequency, return the bird type with the smallest integer value. Input: - The first line contains two integers `n` and `k`, where `n` (1 ≤ n ≤ 10^5) is the number of birds observed and `k` (1 ≤ k ≤ n) is the length of the subarray. - The second line contains `n` space-separated integers representing the types of birds observed. Output: - An integer representing the type of bird that is most frequently observed within any subarray of length `k`. Example: Input: 7 3 1 2 2 3 2 2 3 Output: 2 Explanation: The function should analyze subarrays of length 3 within the sequence [1, 2, 2, 3, 2, 2, 3]. - For subarray [1, 2, 2]: bird type 2 appears twice. - For subarray [2, 2, 3]: bird types 2 and 3 each appear once. - For subarray [2, 3, 2]: bird type 2 appears twice. - For subarray [3, 2, 2]: bird type 2 appears twice. Given that bird type 2 appears the most frequently in these subarrays and has the highest frequency among all other bird types, the function should return 2.","solution":"def findBirdsWatchingPattern(birds, k): Finds the type of bird that is most frequently observed within any subarray of length k. Args: birds (list of int): List of integers representing bird types observed. k (int): The length of the subarray to analyze. Returns: int: The type of bird that is most frequently observed within any subarray of length k. from collections import defaultdict, deque if not birds or k == 0: return -1 bird_counter = defaultdict(int) max_frequency = 0 max_bird = float(\'inf\') current_window = deque() n = len(birds) for i in range(n): current_bird = birds[i] current_window.append(current_bird) bird_counter[current_bird] += 1 # Maintain the window size as k if len(current_window) > k: out_bird = current_window.popleft() bird_counter[out_bird] -= 1 if bird_counter[out_bird] == 0: del bird_counter[out_bird] # Calculate most frequent bird in current window if len(current_window) == k: # Get the bird with max frequency, and in case of tie, the smallest integer value for bird, count in bird_counter.items(): if count > max_frequency or (count == max_frequency and bird < max_bird): max_frequency = count max_bird = bird return max_bird"},{"question":"You are given an array of integers nums containing both positive and negative numbers. Your task is to find a contiguous subarray which has the largest sum. In case of multiple subarrays with the same maximum sum, return the subarray which has the smallest length. If still multiple, return the subarray which appears first in the array. Input The first line contains an integer n, the number of elements in the array (1 ≤ n ≤ 10^5). The second line contains n integers, representing the elements of the array (`-10^4 ≤ nums[i] ≤ 10^4`). Output Output a single integer, the sum of the subarray. Examples Input 5 -2 1 -3 4 -1 Output 4 Input 8 -2 -3 4 -1 -2 1 5 -3 Output 7","solution":"def max_subarray_sum(nums): Find the contiguous subarray with the maximum sum. In case of multiple subarrays with the same maximum sum, return the subarray which has the smallest length and if still multiple, return the subarray that appears first. Args: nums (list of int): An array of integers containing both positive and negative numbers. Returns: int: The sum of the subarray. max_sum = curr_sum = nums[0] max_start = max_end = start = 0 for i in range(1, len(nums)): if curr_sum < 0: curr_sum = nums[i] start = i else: curr_sum += nums[i] if (curr_sum > max_sum) or (curr_sum == max_sum and (i - start) < (max_end - max_start)): max_sum = curr_sum max_start, max_end = start, i return max_sum"},{"question":"You are given a 2D grid representing a maze, where each cell can either be open or blocked. The objective is to modify the maze to make it solvable if it\'s not already. Specifically, you can transform some blocked cells into open cells. Your task is to find the minimum number of blocked cells that need to be made open to ensure there is a path from the top-left corner of the grid (0, 0) to the bottom-right corner (n-1, m-1). A cell in the maze is denoted by either 0 or 1: - 0 represents an open cell you can move through. - 1 represents a blocked cell you cannot move through. You can move to a cell adjacent to the current cell, either horizontally or vertically. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 200), denoting the dimensions of the grid. - The next n lines each contain m integers (0 or 1), describing the grid. Output: - Output a single integer representing the minimum number of blocked cells that need to be made open to make the maze solvable. If the maze is already solvable without any modifications, output 0. Example: Input: 3 3 0 1 0 1 1 0 0 0 0 Output: 1 Explanation: In the given example, converting the cell (0, 1) from 1 to 0 creates a path from (0, 0) to (2, 2). Therefore, the minimum number of modifications required is 1.","solution":"from collections import deque import heapq def minCellsToOpenForPath(grid): n = len(grid) m = len(grid[0]) if n == 0 or m == 0: return -1 def is_valid(x, y): return 0 <= x < n and 0 <= y < m directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] # Early exit if initial or final cell is blocked if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 def dijkstra(): pq = [(0, 0, 0)] dist = [[float(\\"inf\\")] * m for _ in range(n)] dist[0][0] = 0 while pq: d, x, y = heapq.heappop(pq) if (x, y) == (n-1, m-1): return d for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): new_dist = d + (1 if grid[nx][ny] == 1 else 0) if new_dist < dist[nx][ny]: dist[nx][ny] = new_dist heapq.heappush(pq, (new_dist, nx, ny)) return dist[n-1][m-1] result = dijkstra() return result if result != float(\\"inf\\") else -1 def minimum_modifications(n, m, grid): return minCellsToOpenForPath(grid)"},{"question":"You are tasked with building a robotic cleaner to tidy up a room composed of a grid of n rows and m columns. Each cell of the grid can either be free (.), an obstacle (#), or the target point (T). The robotic cleaner starts at the top-left corner of the grid (1, 1) and aims to reach the target point while avoiding obstacles. The robot can move up, down, left, or right in the grid. Your job is to write a function that determines the minimum steps required for the robot to reach the target point (T). If the target point is not reachable, return -1. Input The first line contains two integers n and m (2 ≤ n, m ≤ 1000), the number of rows and columns in the grid. Each of the next n lines contains a string of length m consisting of the characters \'.\', \'#\', and \'T\'. The character \'.\' denotes a free cell, \'#\' denotes an obstacle, and \'T\' denotes the target point. It is guaranteed that there is exactly one target point \'T\' in the grid. Output Output the minimum number of steps required for the robot to reach the target point. If the target point is not reachable, output -1. Examples Input 4 4 .#.. ..#. #... ...T Output 6 Input 3 3 # #.T . Output -1 Note In the first example, the robot can move as follows: 1. Start at (1, 1) -> Move right to (1, 2) 2. Move down to (2, 2) 3. Move down to (3, 2) 4. Move down to (4, 2) 5. Move right to (4, 3) 6. Move right to (4, 4) Total steps = 6 In the second example, the robot cannot reach the target point because it is surrounded by obstacles.","solution":"from collections import deque def min_steps_to_target(n, m, grid): # Directions for up, down, left, right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the queue with starting point queue = deque([(0, 0, 0)]) # (row, col, steps) # Visited set to keep track of visited cells visited = set((0, 0)) # Find the target position \'T\' target = None for i in range(n): for j in range(m): if grid[i][j] == \'T\': target = (i, j) break if not target: return -1 # BFS for the shortest path while queue: x, y, steps = queue.popleft() if (x, y) == target: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"Write a function that will reverse the digits of an integer and determine if the result is a prime number or not. The function should take as input the integer and return True if the reversed integer is a prime, and False otherwise. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. # Input An integer N (1 ≤ N ≤ 10^6). # Output Boolean value indicating if the reversed number is prime. # Example Input 1: 13 Output 1: False Input 2: 37 Output 2: True # Note For the first example, reversing 13 gives 31, which is a prime number, so the output is True. For the second example, reversing 123 gives 321, which is not a prime number, so the output is False.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for i in range(3, max_divisor, 2): if n % i == 0: return False return True def reverse_and_check_prime(n): Reverses the digits of an integer and checks if the result is a prime number. reversed_n = int(str(n)[::-1]) return is_prime(reversed_n)"},{"question":"You are given an array of integers representing heights of buildings along a street. Each building has a width of 1. Two workers are painting the buildings, and they will divide the buildings between them to paint. The total difference in heights of buildings painted by the first worker and the second worker should be minimized. For example, if the array of buildings is [1, 2, 3, 4, 5], one way to divide the buildings could be [1, 2, 3] for the first worker and [4, 5] for the second worker. The first worker\'s total height is 6 and the second worker\'s total height is 9. The difference is 3. Write a program that, given the heights of the buildings, outputs the minimum possible difference between the total heights of buildings painted by the two workers. Input The first line of input contains an integer n (1 ≤ n ≤ 100), the number of buildings. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 1000), representing the heights of the buildings. Output Print a single integer — the minimum possible difference between the total heights of buildings painted by the two workers. Examples Input 5 1 2 3 4 5 Output 1 Input 4 4 2 3 1 Output 0","solution":"def min_difference(heights): Returns the minimum possible difference between the total heights of buildings painted by the two workers. total_height = sum(heights) n = len(heights) # Initialize a DP array where dp[i] indicates whether sum i is reachable using any subset of the buildings dp = [False] * (total_height + 1) dp[0] = True for height in heights: for j in range(total_height, height - 1, -1): if dp[j - height]: dp[j] = True min_diff = float(\'inf\') for i in range(total_height // 2 + 1): if dp[i]: min_diff = min(min_diff, abs(total_height - 2 * i)) return min_diff # Example usage n = 5 heights = [1, 2, 3, 4, 5] print(min_difference(heights)) # Output: 1"},{"question":"You are given a list of n integers. Your task is to determine the number of unique pairs (i, j) such that their sum is equal to a target value k. The pairs (i, j) and (j, i) are considered the same and should only be counted once. Input The first line contains two integers n (2 ≤ n ≤ 2000) and k ( -10^6 ≤ k ≤ 10^6) — the number of integers and the target sum, respectively. The second line contains n integers a_1, a_2, ..., a_n ( -10^6 ≤ a_i ≤ 10^6), representing the list of integers. Output Print the single number — the number of unique pairs (i, j) whose sum is equal to k. Examples Input 4 5 1 2 3 4 Output 2 Input 5 0 -1 1 -2 2 0 Output 2","solution":"def count_unique_pairs(n, k, arr): Returns the number of unique pairs (i, j) such that their sum equals k. seen = set() pairs = set() for num in arr: complement = k - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"The empire of Alvania has recently adopted a new numeral system. The system uses the following symbols to represent numerical values: Symbol : Value A : 1 B : 5 C : 10 D : 50 E : 100 F : 500 G : 1000 Despite the new system being adopted, Alvanians still write numbers by combining these symbols in a hierarchical manner from highest to lowest values, and they never use the same symbol more than three times consecutively. Your task is to write a function that converts a given numeral string from the Alvanian system to its decimal (base-10) equivalent. # Input: - A single line containing a valid numeral string in the Alvanian system. The length of the string will be between 1 and 1000 characters. # Output: - A single integer, representing the decimal (base-10) value of the numeral string. # Examples: # Example 1 Input: ``` AG ``` Output: ``` 1001 ``` # Example 2 Input: ``` AE ``` Output: ``` 101 ``` # Example 3 Input: ``` CDF ``` Output: ``` 560 ``` # Example 4 Input: ``` DCBA ``` Output: ``` 66 ``` # Explanation: 1. The numeral \\"AG\\" is computed as `1000 + 1 = 1001`. 2. The numeral \\"AE\\" is computed as `100 + 1 = 101`. 3. The numeral \\"CDF\\" is computed as `10 + 50 + 500 = 560`. 4. The numeral \\"DCBA\\" is computed as `50 + 10 + 5 + 1 = 66`.","solution":"def alvanian_to_decimal(numeral_string): Converts a numeral string from the Alvanian system to its decimal equivalent. Parameters: numeral_string (str): A string representing the numeral in Alvanian system. Returns: int: The decimal equivalent of the Alvanian numeral. numeral_map = { \'A\': 1, \'B\': 5, \'C\': 10, \'D\': 50, \'E\': 100, \'F\': 500, \'G\': 1000 } total = 0 for char in numeral_string: total += numeral_map[char] return total"},{"question":"Tonny is trying to decipher a scrambled message. The message is formed by repeating a key pattern and then appending extra characters at the end. The task is to determine the smallest repeating unit of the message and recreate its structure. The key breaks the message into t parts. For example, the key pattern \\"ab\\" repeats to form \\"abab\\", \\"ab\\" but the message might have extra characters such as \\"abab\\" + \\"cd\\" = \\"ababcd\\". Input: - The first line contains the length of message `n` and the length of the key pattern `k` such that `1 ≤ k ≤ n ≤ 2 * 10^5`. - The second line contains the scrambled message consisting of lowercase letters. Output: - Output the key pattern that forms the repeating unit of the message. Examples: Input: 6 2 ababab Output: ab Input: 7 3 abcabcd Output: abc Input: 8 2 abcdabcd Output: ab In the first example, the message \\"ababab\\" can be broken down into \\"ab\\" + \\"ab\\" + \\"ab\\". In the second example, the message \\"abcabcd\\" can be broken down into \\"abc\\" + \\"abc\\" + \\"d\\". In the third example, the message \\"abcdabcd\\" can be broken down into \\"ab\\" + \\"cd\\" + \\"ab\\" + \\"cd\\".","solution":"def find_key_pattern(n, k, scrambled_message): Determines the smallest repeating unit of the given message with the specified pattern length. Args: n (int): Length of the message. k (int): Length of the key pattern. scrambled_message (str): The scrambled message. Returns: str: The key pattern that forms the repeating unit of the message. return scrambled_message[:k]"},{"question":"You are given an array of integers nums where each element appears exactly twice, except for one element which appears exactly once. Find and return the single element that appears only once. Input Each test case consists of two lines: The first line contains an integer n (1 ≤ n ≤ 100), representing the number of elements in the array nums. The second line contains n integers separated by spaces, where n is always odd, and each element in nums appears twice except for one element which appears only once. The integers in the array are between 1 and 10^5. There will be multiple test cases, and the sum of the lengths of all the arrays in a single test shouldn\'t exceed 1000. Output For each test case, output the single element in the array that appears only once. Example Input 3 7 2 3 4 2 3 4 1 5 10 10 20 20 30 3 5 6 5 Output 1 30 6","solution":"def find_single_number(nums): Given a list of integers where every element appears exactly twice except for one element which appears exactly once, returns the single element that appears only once. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"Tom has a set of T test tubes, each test tube i has a liquid level h_i where 0 ≤ h_i ≤ 10^5. He wants to pour some liquid between the test tubes in such a way that all test tubes end up with the same liquid level. The liquid can be transferred from one test tube to another any number of times. However, Tom does not wish to spill any liquid, which means the total volume of liquid in all test tubes remains constant. Given the initial liquid levels of the test tubes, determine the minimum number of operations required for Tom to achieve his goal. In each operation, Tom can only pour liquid from one test tube to another. If it is impossible to equalize the levels, output -1. Constraints * 1 ≤ T ≤ 10^5 * 0 ≤ h_i ≤ 10^5 Input The input is given from Standard Input in the following format: T h_1 h_2 ... h_T Output Print a single integer representing the minimum number of operations required to equalize the liquid levels, or -1 if it is impossible. Examples Input 4 2 4 4 2 Output 2 Input 3 2 5 9 Output -1 Input 5 1 1 1 1 1 Output 0 Input 2 0 0 Output 0 Explanation In the first example, Tom can transfer 2 units of liquid from one of the test tubes with level 4 to each of the test tubes with level 2, thus making all levels 3. It takes 2 operations.","solution":"def min_operations_to_equalize_levels(T, levels): Determines the minimum number of operations required to equalize the liquid levels in all test tubes or returns -1 if it is impossible. Args: T : int : Number of test tubes levels : list of int : List containing liquid levels in each test tube Returns: int : Minimum number of operations or -1 if it\'s impossible to equalize the levels. total_liquid = sum(levels) if total_liquid % T != 0: return -1 target_level = total_liquid // T operations = 0 for level in levels: if level > target_level: operations += (level - target_level) return operations"},{"question":"Sophia is hosting a virtual cooking competition and wants each participant to use a different sequence of ingredients for their dishes. She has a list of unique ingredients, and each sequence will be a permutation of the list. Given the length of the list, Sophia wants to know how many possible unique sequences of ingredients there could be. However, because the number of sequences can be very large, Sophia doesn\'t need the exact total, but rather the number modulo 1,000,000,007. Write a program to help Sophia calculate the number of unique permutations of the ingredients list. Input The input consists of a single integer n (1 ≤ n ≤ 100,000) — the number of unique ingredients. Output Output a single integer — the number of unique permutations of the ingredients list modulo 1,000,000,007. Examples Input 3 Output 6 Input 5 Output 120 Input 20 Output 146326063","solution":"def count_permutations(n): MOD = 1_000_000_007 perm = 1 for i in range(1, n + 1): perm = (perm * i) % MOD return perm"},{"question":"A company wants to analyze the time employees spend at their desks. Each employee logs in and logs out at specific times throughout the day. Given a list of login and logout timestamps, your task is to determine the maximum number of employees that were logged in at the same time. Input - The first line contains an integer `n`, the number of login-logout pairs. - The next `n` lines each contain two integers `login` and `logout`, representing the login and logout times of an employee. Output - Output a single integer, the maximum number of employees logged in simultaneously. Examples Input 5 1 5 2 6 4 8 7 10 9 12 Output 3 Input 4 1 3 2 5 4 6 7 9 Output 2","solution":"def max_employees_logged_in(n, intervals): Determine the maximum number of employees logged in simultaneously. Args: - n (int): Number of login-logout pairs. - intervals (list of tuples): List of (login, logout) times. Returns: - int: Maximum number of employees logged in simultaneously. # Events will store tuples of (time, type) # Type is +1 for login, -1 for logout events = [] for login, logout in intervals: events.append((login, +1)) events.append((logout, -1)) # Sort events by time # If two events have the same time, -1 (logout) should come before +1 (login) events.sort(key=lambda x: (x[0], x[1])) max_logged_in = 0 current_logged_in = 0 for time, event_type in events: current_logged_in += event_type if current_logged_in > max_logged_in: max_logged_in = current_logged_in return max_logged_in"},{"question":"You are tasked with developing software for an autonomous delivery robot. The robot must navigate a warehouse laid out as a grid of cells, where some cells contain obstacles and some are free space. The robot can move up, down, left, or right, but cannot move through obstacles. Given a starting position and a target position, your goal is to determine whether it\'s possible for the robot to reach the target position from the starting position. Input The input will consist of multiple lines: - The first line contains two integers m and n (1 ≤ m, n ≤ 100), the number of rows and columns in the grid, respectively. - The next m lines each contain n characters, representing the grid. Each character is either \'.\' representing free space, or \'#\' representing an obstacle. - The last line contains four integers, x1, y1, x2, y2 (0 ≤ x1, x2 < m, 0 ≤ y1, y2 < n), the starting row and column, and the target row and column, respectively. Output Print \\"YES\\" if the robot can reach the target position from the starting position, and \\"NO\\" if it cannot. Examples Input 5 5 ..... ..#.. ..#.. ..... ..... 0 0 4 4 Output YES Input 3 4 .... .. .... 0 0 2 3 Output YES Input 3 4 ..#. .. ..#. 0 0 2 3 Output NO Note In the first example, the grid is 5x5 with no obstacles, so the robot can easily navigate from (0, 0) to (4, 4). In the second example, the grid is 3x4 with one obstacle configuration, allowing passage from (0, 0) to (2, 3). In the third example, the obstacles are placed such that there is no possible path from (0, 0) to (2, 3).","solution":"def can_reach_target(m, n, grid, start, target): from collections import deque def is_valid(x, y): return 0 <= x < m and 0 <= y < n and grid[x][y] == \'.\' def bfs(start, target): queue = deque([start]) visited = [[False for _ in range(n)] for _ in range(m)] visited[start[0]][start[1]] = True directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y = queue.popleft() if (x, y) == target: return True for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: queue.append((nx, ny)) visited[nx][ny] = True return False return \\"YES\\" if bfs(start, target) else \\"NO\\" def process_input(input_str): lines = input_str.strip().split(\\"n\\") m, n = map(int, lines[0].split()) grid = [list(lines[i + 1].strip()) for i in range(m)] x1, y1, x2, y2 = map(int, lines[m + 1].split()) start = (x1, y1) target = (x2, y2) return can_reach_target(m, n, grid, start, target)"},{"question":"Problem Statement David loves to play with matrices in his free time. One day, he came up with an interesting challenge. He wants to rotate a given N x N matrix 90 degrees clockwise without using any additional matrix space. Your task is to help David achieve this. Input - The first line contains an integer T denoting the number of test cases. - Each test case starts with an integer N, representing the size of the NxN matrix. - The next N lines contain N integers each, representing the elements of the matrix. Output For each test case, print the rotated matrix in the same NxN format. Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ matrix elements ≤ 1000 Example Input: 2 3 1 2 3 4 5 6 7 8 9 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output: 7 4 1 8 5 2 9 6 3 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 Explanation For the first test case matrix: 1 2 3 7 4 1 4 5 6 -> 8 5 2 7 8 9 9 6 3 For the second test case matrix: 1 2 3 4 13 9 5 1 5 6 7 8 -> 14 10 6 2 9 10 11 12 15 11 7 3 13 14 15 16 16 12 8 4","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given N x N matrix 90 degrees clockwise in-place. N = len(matrix) for i in range(N // 2): for j in range(i, N - i - 1): temp = matrix[i][j] matrix[i][j] = matrix[N - j - 1][i] matrix[N - j - 1][i] = matrix[N - i - 1][N - j - 1] matrix[N - i - 1][N - j - 1] = matrix[j][N - i - 1] matrix[j][N - i - 1] = temp return matrix def process_test_cases(T, test_cases): results = [] for test_case in test_cases: N, matrix = test_case rotated_matrix = rotate_matrix_90_clockwise(matrix) results.append(rotated_matrix) return results"},{"question":"You are given a list of integers and a target integer. Your task is to determine if there is a pair of distinct indices in the list such that the integers at those indices add up to the target integer. If such a pair exists, return the indices of the two numbers in ascending order. If no such pair exists, return -1. Input The first input line contains an integer n (2 ≤ n ≤ 10^5) — the number of integers in the list. The second input line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9). The third input line contains an integer target (-10^9 ≤ target ≤ 10^9). Output If there are two indices i and j (i < j) such that ai + aj = target, print the indices i and j. Otherwise, print -1. Examples Input 5 1 2 3 4 5 8 Output 2 4 Input 3 3 1 4 10 Output -1 Note In the first example, a2 (2) + a4 (5) = 8, so the indices are 2 and 4. In the second example, there are no two distinct indices such that their corresponding values add up to the target. Thus, the output is -1.","solution":"def find_pair_indices(nums, target): Returns the indices of the two numbers that add up to the target. If no such pair exists, returns -1. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index return -1"},{"question":"You\'re given an array of `n` integers, where the `i`-th element represents the number of coins in the `i`-th pile. You need to divide all the coins into two subsets such that the absolute difference between the sums of the coins in the two subsets is minimized. Your task is to determine the minimum absolute difference possible. Input The first line of the input contains a single integer `n` (1 ≤ n ≤ 100) — the number of piles. The second line of the input contains `n` integers `a_i` (1 ≤ a_i ≤ 1000) — the number of coins in the `i`-th pile. Output Print the minimum absolute difference between the sums of the coins in the two subsets. Examples Input 4 1 6 11 5 Output 1 Input 3 3 1 4 Output 0 Note In the first sample, you can divide the piles into the subsets `{1, 5, 6}` and `{11}`, both summing to `12` and `11` respectively, resulting in an absolute difference of `|12 - 11| = 1`. In the second sample, you can divide the piles into the subsets `{3, 1}` and `{4}`, both summing to `4` and `4` respectively, resulting in an absolute difference of `|4 - 4| = 0`.","solution":"def min_diff(n, piles): total = sum(piles) dp = [0] * (total // 2 + 1) for coin in piles: for capacity in range(total // 2, coin - 1, -1): dp[capacity] = max(dp[capacity], dp[capacity - coin] + coin) sum1 = dp[-1] sum2 = total - sum1 return abs(sum1 - sum2)"},{"question":"Given an old mobile keypad which had letters associated with each number key. The association was as follows: - 1: [no letters] - 2: a, b, c - 3: d, e, f - 4: g, h, i - 5: j, k, l - 6: m, n, o - 7: p, q, r, s - 8: t, u, v - 9: w, x, y, z - 0: [space character] You need to decode a given sequence of such number inputs into all possible strings. Input The input consists of a single string made up of digits from 0 to 9 (inclusive). The length of the string does not exceed 100. Output Print all possible decoded strings. Examples Input 23 Output ad ae af bd be bf cd ce cf Input 78 Output pt pu pv qt qu qv rt ru rv st su sv Input 0 Output [space character] Input 201 Output [a space character] b [space character] c [space character]","solution":"from itertools import product def decode_sequence(sequence): Decodes a given sequence of number inputs into all possible strings based on the old mobile keypad mapping. digit_to_letters = { \'1\': [\'\'], \'2\': [\'a\', \'b\', \'c\'], \'3\': [\'d\', \'e\', \'f\'], \'4\': [\'g\', \'h\', \'i\'], \'5\': [\'j\', \'k\', \'l\'], \'6\': [\'m\', \'n\', \'o\'], \'7\': [\'p\', \'q\', \'r\', \'s\'], \'8\': [\'t\', \'u\', \'v\'], \'9\': [\'w\', \'x\', \'y\', \'z\'], \'0\': [\' \'] } if not sequence: return [] groups = [digit_to_letters[digit] for digit in sequence] possible_combinations = [\'\'.join(combination) for combination in product(*groups)] return possible_combinations"},{"question":"Definition: Given an array of integers, your task is to find the number of unique pairs of integers in the array that have a difference equal to a given value K. A pair of integers (a, b) is considered unique if there are no other pairs (c, d) such that a == c and b == d or a == d and b == c. Input: The first line contains an integer T - the number of test cases. Each of the next T test cases contain two lines: - The first line contains two integers N and K - the length of the array and the difference value. - The second line contains N integers - the elements of the array. Output: For each test case, print the number of unique pairs that have a difference of K. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 10^5 -10^9 ≤ array elements, K ≤ 10^9 SAMPLE INPUT 3 5 2 1 5 3 4 2 4 1 1 2 3 4 3 0 1 1 1 SAMPLE OUTPUT 3 3 3 Explanation: For the first test case, the pairs with difference 2 are (1, 3), (3, 5), and (2, 4). For the second test case, the pairs with difference 1 are (1, 2), (2, 3), and (3, 4). For the third test case, since K is 0, any pair of identical elements counts as a valid pair. There are three such pairs: (1, 1), (1, 1), and (1, 1).","solution":"def count_unique_pairs_with_difference_k(arr, k): Count the number of unique pairs (a, b) in the array such that |a - b| = k. if k == 0: return sum(arr.count(x) * (arr.count(x) - 1) // 2 for x in set(arr)) elements = set(arr) unique_pairs = set() for elem in elements: if elem + k in elements: unique_pairs.add((min(elem, elem + k), max(elem, elem + k))) if elem - k in elements: unique_pairs.add((min(elem, elem - k), max(elem, elem - k))) return len(unique_pairs) def process_test_cases(test_cases): results = [] for n, k, arr in test_cases: results.append(count_unique_pairs_with_difference_k(arr, k)) return results"},{"question":"There is a virtual machine with a linear tape of length N, indexed from 0 to N-1, where each cell contains a single non-negative integer. You are given Q operations that either update a range of cells with a new value or query the sum of values in a range of cells. There are two types of operations: 1. `update x y v`: Set each cell in the range from x to y (inclusive) to value v. 2. `query x y`: Compute the sum of values in the range from x to y (inclusive). Implement a function that processes all operations and returns the results of the sum queries. Input - An integer T, the number of test cases. - For each test case: - An integer, N, the length of the tape. - An integer, Q, the number of operations. - Q lines, each defining an operation in one of the two formats described above. Output - For each test case, output the results of the sum queries in the order they appear. Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ Q ≤ 1000 - 0 ≤ x ≤ y < N - 0 ≤ v ≤ 10000 Example SAMPLE INPUT 2 5 3 update 1 3 5 query 0 4 query 1 2 4 4 update 0 2 3 query 0 1 update 1 3 2 query 1 3 SAMPLE OUTPUT 10 10 6 6 Notes: - For the first test case, the tape starts as [0, 0, 0, 0, 0]. - After the first operation, it becomes [0, 5, 5, 5, 0]. - The second operation queries the sum from index 0 to 4, which is 0 + 5 + 5 + 5 + 0 = 15. - The third operation queries the sum from index 1 to 2, which is 5 + 5 = 10. - For the second test case, the tape starts as [0, 0, 0, 0]. - After the first operation, it becomes [3, 3, 3, 0]. - The second operation queries the sum from index 0 to 1, which is 3 + 3 = 6. - The third operation updates the tape to [3, 2, 2, 2]. - The fourth operation queries the sum from index 1 to 3, which is 2 + 2 + 2 = 6.","solution":"def process_operations(T, test_cases): results = [] for case in test_cases: N, Q, operations = case tape = [0] * N for operation in operations: op_parts = operation.split() if op_parts[0] == \\"update\\": x, y, v = int(op_parts[1]), int(op_parts[2]), int(op_parts[3]) for i in range(x, y + 1): tape[i] = v elif op_parts[0] == \\"query\\": x, y = int(op_parts[1]), int(op_parts[2]) results.append(sum(tape[x:y + 1])) return results"},{"question":"Alice has recently learned about binary search trees (BST) and is fascinated by their properties. She decides to test her knowledge by solving a problem where she needs to transform one BST into another by performing rotations. A single rotation in a BST involves changing the parent-child relationship between two nodes, while maintaining the binary search tree property. There are two types of rotations: right rotation and left rotation. 1. Right Rotation: ``` y x / Right Rotation / x T3 – – – – – – – > T1 y / < – – – – – – – / T1 T2 (y rotates clockwise) T2 T3 ``` 2. Left Rotation: ``` x y / Left Rotation / T1 y – – – – – – – > x T3 / < – – – – – – – / T2 T3 (x rotates counterclockwise) T1 T2 ``` You are given two arrays, `A` and `B`, where each represents the in-order traversal of the initial and target BSTs respectively. Your task is to find the sequence of rotations (if possible) required to transform the initial BST into the target BST. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of nodes in the BST. - The second line contains `n` integers, representing the in-order traversal of the initial BST `A`. - The third line contains `n` integers, representing the in-order traversal of the target BST `B`. Output: - In the first line, print a single integer `k`, the number of rotations performed. - In the next `k` lines, print the rotation operations in order. Each rotation operation should be one of the following strings: \\"Right x\\" or \\"Left x\\", where `x` is the value of the node around which the rotation was performed. If it\'s not possible to transform the initial BST into the target BST using rotations, print `-1`. Example: Input: ``` 3 1 2 3 3 1 2 ``` Output: ``` 2 Left 1 Left 2 ``` Input: ``` 3 1 2 3 3 2 1 ``` Output: ``` -1 ```","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def build_tree_from_inorder(inorder): if not inorder: return None def build_tree(in_index_map, start, end): if start > end: return None root_val = next(iter(in_index_map.keys())) root = TreeNode(root_val) del in_index_map[root_val] idx = inorder.index(root_val) root.left = build_tree(in_index_map, start, idx - 1) root.right = build_tree(in_index_map, idx + 1, end) return root in_index_map = {val: idx for idx, val in enumerate(inorder)} return build_tree(in_index_map, 0, len(inorder) - 1) def convert_tree_to_inorder(root): if not root: return [] return convert_tree_to_inorder(root.left) + [root.val] + convert_tree_to_inorder(root.right) def find_rotation_sequence(n, inorder_A, inorder_B): tree_A = build_tree_from_inorder(inorder_A) tree_B = build_tree_from_inorder(inorder_B) inorder_A_built = convert_tree_to_inorder(tree_A) inorder_B_built = convert_tree_to_inorder(tree_B) if inorder_A_built != inorder_A or inorder_B_built != inorder_B: return -1 # We assume the inputs A and B are valid in-order traversals, and thus represent a BST. # The rotations to transform one BST to another are undetermined by in-order traversal alone. # Any BST with these specifics can\'t be determined unless structure is known. return -1 def rotations_from_inorder(n, A, B): return find_rotation_sequence(n, A, B) # Test function to simulate the original function call def calculate_rotations(n, A, B): result = rotations_from_inorder(n, A, B) if result == -1: print(result) else: k, operations = result print(k) for op in operations: print(op)"},{"question":"You are given a string containing only characters \'a\' and \'b\'. You need to transform this string into a palindrome by performing a series of operations, where in each operation you can replace a single character in the string with any other character. Your goal is to minimize the number of operations required to achieve this. Input - The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. - Each of the next t lines contains a single string. The length of the string is always even, and does not exceed 10^5. Output For each test case, print a single integer - the minimum number of operations needed to make the given string a palindrome. Examples Input 3 abba abca bbbb Output 0 1 0 Explanation In the first test case, the string \\"abba\\" is already a palindrome, so no operations are needed. The output is 0. In the second test case, we can change the character \'c\' to \'b\' to get \\"abba\\", which is a palindrome. Therefore, the output is 1. In the third test case, the string \\"bbbb\\" is already a palindrome. Therefore, the output is 0.","solution":"def min_operations_to_palindrome(t, strings): results = [] for s in strings: n = len(s) ops = 0 for i in range(n // 2): if s[i] != s[n - 1 - i]: ops += 1 results.append(ops) return results"},{"question":"John is arranging a photo-shoot with various accessories. To create visually appealing photographs, he decided to follow a specific rule for the arrangement of accessories. He wants to ensure that the total value of any combination of exactly four accessory values does not exceed a specified budget X. You are given: - The number of accessories N and their values. - The budget limit X. Your task is to determine if it\'s possible to select exactly four accessories such that their combined value does not exceed the budget X. If there is at least one such combination, print True; otherwise, print False. Input Format - The first line contains the number of accessories denoted by N. - The second line contains the values of each accessory in string format. - The third line contains the budget limit denoted by X. Output Format - True, if such a combination is possible. - False, if no such combination is possible. Constraints - 4 ≤ N ≤ 200 - 0 ≤ X ≤ 100000 - 1 ≤ value of each accessory ≤ 10000 SAMPLE INPUT: 7 5 20 10 30 50 60 70 100 SAMPLE OUTPUT: True Explanation: The sum of values of the 1st, 2nd, 3rd, and 4th accessories is 5 + 20 + 10 + 30 = 65, which is within the budget limit of 100. Thus, the output is True.","solution":"from itertools import combinations def can_select_four_accessories(N, values, X): Determines if there is a combination of exactly four accessory values such that their combined value does not exceed the budget X. Parameters: N (int): Number of accessories values (list of int): Values of the accessories X (int): Budget limit Returns: bool: True if such a combination exists, otherwise False for combo in combinations(values, 4): if sum(combo) <= X: return True return False"},{"question":"Emma has a new collection of stamps from different countries. She wants to organize them into pages in such a way that each page contains stamps from exactly one country, and no two pages have stamps from the same country. However, Emma is concerned that her friends might accidentally mix up the stamps if they are not sorted alphabetically by country name. Write a function that sorts the stamps by country name and groups them accordingly. Input A list of strings, where each string is a country name representing the origin of a stamp. Output A list of lists. Each inner list contains stamps from the same country, sorted alphabetically by the country name. Example ```python Input: [\\"Canada\\", \\"Brazil\\", \\"India\\", \\"Canada\\", \\"Brazil\\", \\"China\\", \\"India\\"] Output: [[\'Brazil\', \'Brazil\'], [\'Canada\', \'Canada\'], [\'China\'], [\'India\', \'India\']] ``` Explanation The stamps should be sorted and grouped by their country names. This ensures that all stamps from the same country are together in a sorted manner. The output is a list of lists, where each inner list contains stamps from one specific country, sorted alphabetically by their names.","solution":"def organize_stamps(stamps): Organize stamps into pages with each page containing stamps from one country, sorted alphabetically by country name. from collections import defaultdict stamp_dict = defaultdict(list) for stamp in stamps: stamp_dict[stamp].append(stamp) sorted_countries = sorted(stamp_dict.keys()) result = [stamp_dict[country] for country in sorted_countries] return result"},{"question":"Matrix Diagonal Difference In this problem, you are required to calculate the absolute difference between the sums of the matrix\'s two diagonals. The matrix is a square matrix of size n x n. For example, given the following 3x3 matrix: ``` 1 2 3 4 5 6 7 8 9 ``` The left-to-right diagonal sums to 1 + 5 + 9 = 15. The right-to-left diagonal sums to 3 + 5 + 7 = 15. Their absolute difference is |15 - 15| = 0. Task: Write a function `diagonalDifference(matrix: List[List[int]]) -> int` that takes a square matrix as an argument and returns the absolute difference between the sums of its diagonals. Input Format: - The first line contains a single integer n (1 ≤ n ≤ 100), the size of the square matrix. - Each of the next n lines contains n integers separated by spaces representing the elements of the matrix. Output Format: - Return the absolute difference between the sums of the matrix\'s two diagonals. Examples: Input: ``` 3 11 2 4 4 5 6 10 8 -12 ``` Output: ``` 15 ``` Explanation: The sum of the primary diagonal is 11+5+(-12) = 4. The sum of the secondary diagonal is 4+5+10 = 19. The absolute difference is |4-19| = 15. Input: ``` 2 3 2 4 6 ``` Output: ``` 3 ``` Explanation: The sum of the primary diagonal is 3+6 = 9. The sum of the secondary diagonal is 2+4 = 6. The absolute difference is |9-6| = 3. Your task is to complete the `diagonalDifference` function to meet the expectations described above.","solution":"from typing import List def diagonalDifference(matrix: List[List[int]]) -> int: Given a square matrix, this function returns the absolute difference between the sums of its two diagonals. n = len(matrix) # size of the matrix primary_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): primary_diagonal_sum += matrix[i][i] secondary_diagonal_sum += matrix[i][n - 1 - i] return abs(primary_diagonal_sum - secondary_diagonal_sum)"},{"question":"Petya is preparing for a competitions and received a gift of a string s with length up to 105 characters from his friend on his birthday. He also has another empty string t and decided to engage in a game. This game has one possible move: - Rotate the first character of s and append it to t. If t becomes a palindrome after any move, Petya will get extra points. Petya wants the string t to be lexicographically smallest, while ensuring it can be a palindrome if possible. Write a program that will help Petya get the string t as lexicographically smallest and optimize the chance of forming a palindrome. Input First line contains non-empty string s (1 ≤ |s| ≤ 105), consisting of lowercase English letters. Output Print the resulting string t which is lexicographically smallest and, if possible, allows forming a palindrome. Examples Input bca Output abc Input racecar Output aeccrarr","solution":"def min_lex_palindrome(s): Rotates characters of the string s to create the lexicographically smallest string t, which, if possible, can form a palindrome. # Sort s to create the lexicographically smallest string t = \'\'.join(sorted(s)) # Attempt to make a palindrome left, right = 0, len(t) - 1 while left < right: if t[left] != t[right]: return t # If at any point it can\'t be a palindrome just return sorted t left += 1 right -= 1 return t"},{"question":"A software company is organizing its annual hackathon event, where programmers will compete to solve coding problems. They want to keep track of the fastest programmer in each round. During the event, participants submit their solutions, and the submission times for each participant are recorded. The times are given in seconds. For each round, participants submit their solutions and the timestamp of each submission is recorded. After each round, the company needs to query the fastest submission time among the participants for one or more specific rounds. Write a program to help the company manage these queries efficiently. Input: The first line contains two integers n and r (1 ≤ n ≤ 3·10^5, 1 ≤ r ≤ 10^5) — the number of participants and the number of rounds respectively. The next r lines describe the submissions. Each line contains n integers ti1, ti2, ..., tin (1 ≤ tij ≤ 10^9) — the submission times of the participants in round i. The following line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries. The next q lines contain one integer each k (1 ≤ k ≤ r) — representing a query to find the fastest submission time in round k. Output: Print q lines. In the i-th line, print the fastest submission time among the participants for the i-th query. Example: Input: 3 4 5 3 8 7 2 4 6 9 1 3 5 7 3 1 2 4 Output: 3 2 3 Explanation: - For the first query, the fastest submission time in round 1 is 3. - For the second query, the fastest submission time in round 2 is 2. - For the third query, the fastest submission time in round 4 is 3.","solution":"def find_fastest_times(n, r, submissions, queries): Given the number of participants (n), the number of rounds (r), the list of submission times for each round, and a list of query rounds, returns the fastest submission time for each query round. # Precompute the fastest submission time for each round min_times = [min(round_times) for round_times in submissions] # Respond to each query with the precomputed fastest times results = [min_times[q - 1] for q in queries] return results"},{"question":"A company has planned a reward system for its employees. Every employee has some tasks to complete, and each task has a certain reward associated with it. If an employee completes a task on a given day, the reward for that task will be added to their total reward. However, the company has a rule that no employee can complete two tasks on the same day. Given the reward associated with each task and the number of days an employee has to complete the tasks, your task is to determine the maximum total reward an employee can earn. Input The first line of the input consists of two integers n and d where n is the number of tasks (1 ≤ n ≤ 1000) and d is the number of days (1 ≤ d ≤ 1000). The second line contains n integers, each representing the reward of a respective task. Output In the only line of the output, print the maximum total reward an employee can earn. Examples Input 3 2 2 4 5 Output 9 Input 4 3 5 7 8 10 Output 25 Input 5 5 1 2 3 4 5 Output 15","solution":"def max_total_reward(n, d, rewards): Given the number of tasks \'n\', number of days \'d\', and list of rewards for each task, returns the maximum total reward. # Sort the rewards in descending order rewards.sort(reverse=True) # The maximum total reward will be the sum of the top \'d\' rewards. return sum(rewards[:d]) # Examples # print(max_total_reward(3, 2, [2, 4, 5])) # Output: 9 # print(max_total_reward(4, 3, [5, 7, 8, 10])) # Output: 25 # print(max_total_reward(5, 5, [1, 2, 3, 4, 5])) # Output: 15"},{"question":"Problem Suppose you have a sequence of N positive integers. You need to find the maximum product of any two distinct elements from the sequence. Constraints The input satisfies the following conditions: * 2 le N le 100000 * 1 le a_i le 10^9 Input All inputs are given as integers in the following format: N a_1 a_2 a_3 dots a_N The 1st line contains an integer N which is the number of elements in the sequence. The second line contains N positive integers separated by spaces. Output Output the maximum product of any two distinct elements from the sequence. Examples Input 5 1 10 2 6 5 Output 60 Input 4 3 7 1 9 Output 63","solution":"def max_product_of_two(N, sequence): Returns the maximum product of any two distinct elements from the sequence. Parameters: N (int): The number of elements in the sequence sequence (list): List of N positive integers Returns: int: Maximum product of any two distinct elements if N < 2: return None # Sort the sequence in descending order sorted_sequence = sorted(sequence, reverse=True) # The maximum product of two distinct elements will be the product of the first two elements in sorted array return sorted_sequence[0] * sorted_sequence[1]"},{"question":"Given an array of integers, find a contiguous subarray that has the maximum sum, and return the sum. If multiple such subarrays exist, return the sum of the one with the smallest length. If there still exist multiple such subarrays, return the sum of the one that starts earliest. Consider that the array has at least one element and contains both positive and negative integers. Input The first line contains an integer n (1 ≤ n ≤ 2 * 10^5) – the number of elements in the array. The second line contains n integers separated by a single space, representing the elements of the array (−10^4 ≤ elements ≤ 10^4). Output Print a single integer – the maximum sum of the contiguous subarray that fulfills the conditions mentioned. Examples Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 3 1 2 3 Output 6 Note In the first example, the optimal subarray is [4, -1, 2, 1] with the sum of 6. In the second example, the subarray is the entire array [1, 2, 3] with the sum of 6. This is the only subarray with the maximum sum.","solution":"def max_subarray_sum(n, arr): Finds the sum of the contiguous subarray with the maximum sum. If multiple subarrays have the same sum, the one with the smallest length and earliest start is chosen. max_sum = current_sum = arr[0] start = end = 0 temp_start = 0 for i in range(1, n): if current_sum < 0: current_sum = arr[i] temp_start = i else: current_sum += arr[i] if (current_sum > max_sum or (current_sum == max_sum and (i - temp_start < end - start))): max_sum = current_sum start = temp_start end = i return max_sum"},{"question":"Problem You are tasked with building a system to evaluate and manage tasks performed by a group of robots in a factory. Each task has a specific time window during which it must be completed, and each robot can perform a different number of tasks within a given time frame. Your goal is to determine the maximum number of tasks that can be completed by the robots without exceeding their capacities and respecting the time windows of the tasks. Constraints The input satisfies the following conditions: * All inputs are integers. * 1 le R le 1000 (number of robots) * 1 le T le 10000 (number of tasks) * 1 le t_i le 1000000 (completion time for task i) * 1 le c_i le 100 (capacity of robot i, i.e., the number of tasks it can perform) * 1 le t_i^{start} < t_i^{end} le 1000000 (start and end time window for task i) Input The input is given in the following format: R T c_1 space c_2 space cdots space c_R t_1^{start} space t_1^{end} t_2^{start} space t_2^{end} vdots t_T^{start} space t_T^{end} First, R (number of robots) and T (number of tasks) are given on the first line. The second line contains the capacities of the R robots as space-separated integers. The following T lines contain the time windows for each task, with task i having a start time t_i^{start} and an end time t_i^{end} . Output Output the maximum number of tasks that can be completed by the robots within their respective capacities and respecting the tasks\' time windows. Examples Input 3 5 2 3 1 1 4 2 6 1 3 5 8 6 9 Output 5 Input 4 6 1 1 1 1 2 5 1 3 3 4 6 8 7 10 3 9 Output 4","solution":"def max_tasks_completed(R, T, capacities, task_intervals): # Sort tasks by their end times to maximize the number of tasks task_intervals.sort(key=lambda x: x[1]) # Dictionary to keep track of the tasks completed by each robot; initialized with capacity robots = {i: capacities[i] for i in range(R)} max_tasks = 0 for (start, end) in task_intervals: # Try to assign task to any available robot for robot in robots: if robots[robot] > 0: robots[robot] -= 1 max_tasks += 1 break return max_tasks # Inputs for the examples provided R1, T1 = 3, 5 capacities1 = [2, 3, 1] task_intervals1 = [(1, 4), (2, 6), (1, 3), (5, 8), (6, 9)] R2, T2 = 4, 6 capacities2 = [1, 1, 1, 1] task_intervals2 = [(2, 5), (1, 3), (3, 4), (6, 8), (7, 10), (3, 9)] print(max_tasks_completed(R1, T1, capacities1, task_intervals1)) # Output: 5 print(max_tasks_completed(R2, T2, capacities2, task_intervals2)) # Output: 4"},{"question":"Write a function to generate all possible unique IP addresses from a given string containing only digits. # Problem Description Given a string `s` containing only digits, restore all possible valid IP address combinations that can be formed. Return these IP addresses in a list. A valid IP address consists of exactly four integers (each integer can have 1 to 3 digits), separated by single dots (`.`), and each integer must be between `0` and `255`. However, no integer in the IP address should contain leading zeros, except for the number `0` itself. # Inputs - An integer `T` denoting the number of test cases. - For each test case, a single string `s` of digits. # Outputs - For each test case, return a list of all unique valid IP addresses that can be formed from the given string. # Constraints - `1 ≤ T ≤ 50` - `1 ≤ |s| ≤ 12` # Example Input 2 25525511135 1234 Output [ [\\"255.255.11.135\\", \\"255.255.111.35\\"], [\\"1.2.3.4\\"] ] # Additional Notes 1. For the IP address \\"255.255.11.135\\": - The four integers are (255, 255, 11, and 135). 2. For the IP address \\"255.255.111.35\\": - The four integers are (255, 255, 111, and 35). 3. For the IP address \\"1.2.3.4\\": - The four integers are (1, 2, 3, and 4). # Explanation Example 1: - From the string `25525511135`, only two valid IP addresses can be formed, which are `255.255.11.135` and `255.255.111.35`. Example 2: - From the string `1234`, only one valid IP address can be formed, which is `1.2.3.4`. Your task is to write the function to handle this logic.","solution":"def restore_ip_addresses(s): def is_valid(segment): return len(segment) == 1 or (segment[0] != \'0\' and int(segment) <= 255) def backtrack(start, path): if start == len(s) and len(path) == 4: result.append(\\".\\".join(path)) return if len(path) > 4: return for i in range(1, 4): if start + i > len(s): break segment = s[start:start + i] if is_valid(segment): path.append(segment) backtrack(start + i, path) path.pop() result = [] backtrack(0, []) return result def generate_all_ip_addresses(test_cases): results = [] for s in test_cases: results.append(restore_ip_addresses(s)) return results"},{"question":"Problem Statement You are given a grid with `R` rows and `C` columns. Each cell in the grid contains a number. Your task is to find the number of unique paths from the top-left corner (first row, first column) to the bottom-right corner (last row, last column), where you can only move right or down, and the sum of the values of the cells on the path should not exceed a given value `S`. Input The first line contains three integers `R` (1 ≤ R ≤ 100), `C` (1 ≤ C ≤ 100), and `S` (0 ≤ S ≤ 10^9). The next `R` lines each contain `C` integers representing the grid cells, where each value is between 0 and 100 inclusive. Output Output the number of unique paths where the sum of the cell values on the path does not exceed `S`. Sample Input 3 3 10 1 2 3 4 5 6 7 8 9 Sample Output 2 Explanation: There are two paths from the top-left corner to the bottom-right corner where the sums of the cell values do not exceed 10: - Path 1: 1 → 2 → 3 → 6 → 9 (sum = 21) - Path 2: 1 → 2 → 5 → 6 → 9 (sum = 23) - Path 3: 1 → 4 → 5 → 6 → 9 (sum = 25) - Path 4: 1 → 4 → 7 → 8 → 9 (sum = 29) Paths 1 and 2 have a valid sum ≤ 10, thus making the output 2.","solution":"def count_paths(R, C, S, grid): memo = {} def unique_paths(r, c, current_sum): if current_sum > S: return 0 if r == R - 1 and c == C - 1: return 1 if (r, c, current_sum) in memo: return memo[(r, c, current_sum)] right_paths = 0 down_paths = 0 if c + 1 < C: right_paths = unique_paths(r, c + 1, current_sum + grid[r][c+1]) if r + 1 < R: down_paths = unique_paths(r + 1, c, current_sum + grid[r+1][c]) memo[(r, c, current_sum)] = right_paths + down_paths return memo[(r, c, current_sum)] return unique_paths(0, 0, grid[0][0]) # Example usage: R, C, S = 3, 3, 10 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(count_paths(R, C, S, grid)) # Output: 0, since none of the paths have a sum <= 10"},{"question":"Joe is a big fan of prime numbers and for his birthday, he wants to play a small game involving them. He will give you a number `n`, and your task is to construct the smallest number greater than `n` that consists only of prime digits (2, 3, 5, and 7). Note that you should treat the number as a string, meaning leading zeros are allowed. Input The input consists of a single integer `n` (1 ≤ n ≤ 999999). Output Output the smallest number greater than `n` that consists only of prime digits. Examples Input 23 Output 25 Input 58 Output 72 Input 99 Output 222","solution":"def next_prime_digit_number(n): Returns the smallest number greater than n that consists only of prime digits (2, 3, 5, 7). prime_digits = [\'2\', \'3\', \'5\', \'7\'] def is_prime_digit_number(num): return all(ch in prime_digits for ch in num) n = str(n) length = len(n) # function to increment the number and check for prime digit number num = int(n) + 1 while True: if is_prime_digit_number(str(num)): return str(num) num += 1"},{"question":"Mall Navigation Mall Navigation A new shopping mall has opened in town with a fascinating navigation system. The mall is designed with several interconnected rooms on different floors, and shoppers can move from one room to another through corridors, escalators, or elevators. Each corridor connects two rooms on the same floor and is uni-directional. Each escalator connects two rooms, but they may belong to different floors and are uni-directional. Elevators connect every floor, but they are bidirectional. You are given the room layouts and connection details, and you need to determine whether it is possible to travel from a designated start room to a goal room. Input The input consists of several datasets. Each dataset is given in the following format: > x y s g > p1 q1 type1 > ... > py qy typey The first line of the dataset consists of four integers x, y, s, and g separated by a single whitespace character. x (1 <= x <= 100) is the number of rooms, each uniquely numbered from 1 to x. y (1 <= y <= 1000) is the number of connections. s is the starting room number, and g is the goal room number. Each of the following y lines consists of two integers p and q, and a string type. pi and qi denote a connection from room pi to room qi, and typei can be \\"corridor\\", \\"escalator\\", or \\"elevator\\" to specify the type of connection. The end of the input is indicated by a single line of four zeros. Output For each dataset, output \\"Reachable\\" if it is possible to travel from room s to room g, and \\"Unreachable\\" if it is not possible. Sample Input 5 7 1 5 1 2 corridor 2 3 escalator 3 4 corridor 4 5 corridor 2 5 corridor 3 5 elevator 1 3 escalator 4 5 1 4 1 2 corridor 2 3 escalator 3 4 escalator 4 1 elevator 4 4 1 3 1 2 elevator 2 3 corridor 3 4 corridor 1 3 escalator 0 0 0 0 Output for Sample Input Reachable Reachable Reachable Explanation In the first case, multiple routes allow navigation from the starting room (1) to the goal room (5), including a shortcut using an escalator directly and elevators. Thus, it is reachable. In the second case, you can navigate using the corridor, then escalator to reach the goal. In the third case, the direct escalation from the start room can be utilized to navigate, making the goal reachable.","solution":"def mall_navigation(datasets): from collections import defaultdict, deque results = [] for data in datasets: x, y, s, g = data[0] connections = data[1] adjacency_list = defaultdict(list) for p, q, type_ in connections: adjacency_list[p].append(q) if type_ == \\"elevator\\": adjacency_list[q].append(p) def bfs(start, goal): queue = deque([start]) visited = set() while queue: current = queue.popleft() if current == goal: return True visited.add(current) for neighbor in adjacency_list[current]: if neighbor not in visited: queue.append(neighbor) return False if bfs(s, g): results.append(\\"Reachable\\") else: results.append(\\"Unreachable\\") return results def parse_input(input_str): datasets = [] lines = input_str.strip().split(\'n\') i = 0 while i < len(lines): x, y, s, g = map(int, lines[i].split()) if x == 0 and y == 0 and s == 0 and g == 0: break i += 1 connections = [] for _ in range(y): p, q, type_ = lines[i].split() connections.append((int(p), int(q), type_)) i += 1 datasets.append(((x, y, s, g), connections)) return datasets"},{"question":"A company has m employees and they are working on n projects. Each employee has a specific set of skills, and each project requires a specific set of skills to be completed. You are given the skills each employee possesses and the skill requirement for each project. Your task is to assign employees to projects such that each project has all the required skills covered by the assigned employees. Given an employee, they can be assigned to multiple projects. You need to determine if it is possible to assign employees to all projects such that each project has the necessary skills covered. If it is possible, return \\"YES\\"; otherwise, return \\"NO\\". Input The first line contains two integers m and n (1 ≤ m, n ≤ 50) — the number of employees and the number of projects. The next m lines describe the skills of each employee. Each line starts with an integer ki (1 ≤ ki ≤ 50), the number of skills the i-th employee has, followed by ki space-separated integers representing the skills possessed by the i-th employee. The following n lines describe the skills required for each project. Each line starts with an integer li (1 ≤ li ≤ 50), the number of skills required for the j-th project, followed by li space-separated integers representing the skills required for the j-th project. Output Output \\"YES\\" if it is possible to assign employees to all projects such that each project has the required skills covered, otherwise, output \\"NO\\". Examples Input 3 2 3 1 2 3 2 1 4 1 2 2 1 2 1 3 Output YES Input 2 2 2 1 2 1 3 1 1 1 4 Output NO Note In the first example, one optimal assignment is: - Employee 1 assigned to Project 1 (covers skills 1 and 2) - Employee 2 assigned to Project 1 (covers skill 4) - Employee 3 assigned to Project 2 (covers skill 2) - Additionally, Employee 1 assigned to Project 2 (covers skill 3) In the second example, it is not possible to assign employees to Projects 1 and 2 to cover the required skills 1 and 4.","solution":"def can_assign_employees(m, n, employees, projects): # Function to aggregate all skills possessed by employees employee_skills = set() for emp in employees: employee_skills.update(emp) # Check each project skills against the aggregated employee skills for proj in projects: if not set(proj).issubset(employee_skills): return \\"NO\\" return \\"YES\\""},{"question":"A city is represented as a grid of size N x M. Some cells are blocked and cannot be walked on. The city has exactly one fire station and some number of hospitals and residential houses. A person can move up, down, left, or right, but cannot move into or through a blocked cell. The mayor wants to ensure that in case of an emergency, all hospitals can quickly access the fire station and that each residential house is within a certain maximum distance from a hospital. The maximum allowed distance is given as a parameter. Your task is to determine if the current layout of the city meets the mayor\'s requirements. Input Format: - First line contains three integers N, M, and D: the number of rows, number of columns, and the maximum allowed distance from a house to a hospital respectively. - Next N lines each contain M characters where: * \'F\' denotes the fire station, * \'H\' denotes a hospital, * \'R\' denotes a residential house, * \'#\' denotes a blocked cell, * \'.\' denotes an empty cell. Output Format: - Print \\"YES\\" if both conditions are met: 1. All hospitals can access the fire station. 2. Each residential house is within D distance from at least one hospital. - Print \\"NO\\" otherwise. Constraints: - 1 ≤ N, M ≤ 500 - 1 ≤ D ≤ 100 SAMPLE INPUT 4 5 2 F.... .#H#. H..R. R.... SAMPLE OUTPUT YES Explanation: - All hospitals can reach the fire station via the following paths: * Hospital at (2, 2) -> (2, 3) -> (1, 3) -> (1, 2) -> Fire station * Hospital at (3, 0) -> (3, 1) -> (2, 1) -> (1, 1) -> (0, 1) -> Fire station - Each residential house is within distance 2 from a hospital: * House at (3, 3) is 2 steps away from the hospital at (2, 2): (3, 3) -> (3, 2) -> (2, 2) * House at (4, 0) is 2 steps away from the hospital at (3, 0): (4, 0) -> (3, 0)","solution":"from collections import deque def bfs(grid, start, N, M): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False for _ in range(M)] for _ in range(N)] queue = deque([start]) visited[start[0]][start[1]] = True distances = [[float(\'inf\') for _ in range(M)] for _ in range(N)] distances[start[0]][start[1]] = 0 while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] != \'#\': visited[nx][ny] = True queue.append((nx, ny)) distances[nx][ny] = distances[x][y] + 1 return distances def is_layout_valid(N, M, D, grid): fire_station = None hospitals = [] houses = [] for i in range(N): for j in range(M): if grid[i][j] == \'F\': fire_station = (i, j) elif grid[i][j] == \'H\': hospitals.append((i, j)) elif grid[i][j] == \'R\': houses.append((i, j)) if not fire_station: return \\"NO\\" distances_from_fire_station = bfs(grid, fire_station, N, M) for h in hospitals: if distances_from_fire_station[h[0]][h[1]] == float(\'inf\'): return \\"NO\\" for r in houses: min_distance = float(\'inf\') for h in hospitals: distance = abs(r[0] - h[0]) + abs(r[1] - h[1]) min_distance = min(min_distance, distance) if min_distance > D: return \\"NO\\" return \\"YES\\""},{"question":"There is a complex system of waterways and dams called the Vethian River Network (VRN) on planet Vetha. VRN is represented as a directed graph where nodes represent dams, and edges represent waterways with given capacities. The water flows along these waterways from one dam to another. The VRN has one special dam known as the source from which all the water flows out, and one special dam known as the sink which collects all the water. The Vethians are interested in understanding the maximum possible water flow from the source dam to the sink dam using the capacities of these waterways. Your task is to determine this maximum water flow in the VRN. Input The first line contains an integer, n, representing the number of dams (2 ≤ n ≤ 50). The second line contains an integer, m, representing the number of waterways (1 ≤ m ≤ 200). The next m lines each contain three integers u, v, and c (1 ≤ u,v ≤ n; 1 ≤ c ≤ 1000), representing a waterway from dam u to dam v with capacity c. The source dam is always numbered as 1, and the sink dam is always numbered as n. Output Output a single integer representing the maximum water flow from the source dam to the sink dam. Example Input 4 5 1 2 100 1 3 100 2 4 50 3 4 50 2 3 50 Output 100 Explanation In the example, the maximum water flow from dam 1 to dam 4 is 100. This flow can be achieved as follows: - 50 units of water flow from dam 1 to dam 2 and then to dam 4. - 50 units of water flow from dam 1 to dam 3 and then to dam 4.","solution":"from collections import deque def bfs_capacity(graph, source, sink, parent): A BFS for finding the augmenting path in the residual graph. visited = [False] * len(graph) queue = deque([source]) visited[source] = True while queue: u = queue.popleft() for v, capacity in enumerate(graph[u]): if not visited[v] and capacity > 0: queue.append(v) visited[v] = True parent[v] = u if v == sink: return True return False def max_flow(n, m, waterways): Calculates the maximum flow from source to sink using the Ford-Fulkerson algorithm. source = 0 sink = n - 1 graph = [[0] * n for _ in range(n)] for u, v, c in waterways: graph[u - 1][v - 1] += c parent = [-1] * n max_flow = 0 while bfs_capacity(graph, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, graph[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] graph[u][v] -= path_flow graph[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow"},{"question":"Cat Snuke is practicing arithmetic operations. Today, he focuses on reversing subarrays of a given list to calculate its special sum. You are given a list of integers `a` of length `n` and an integer `k`. For each subarray of length `k` in `a`, reverse the subarray and calculate the sum of the modified list after all possible subarray reversals. Constraints * 2 leq n leq 100 * 1 leq k leq n * 1 leq a[i] leq 1000, where 1 leq i leq n Input Input is given from Standard Input in the following format: n k a_1 a_2 ... a_n Output Print the sum of the list obtained by reversing all possible subarrays of length `k` in `a`. Examples Input 5 3 1 2 3 4 5 Output 24 Input 4 2 1 3 5 7 Output 32","solution":"def reverse_subarrays_and_sum(n, k, a): Reverses all possible subarrays of length k and calculates the sum of the resulting list. :param n: int, the length of the list a. :param k: int, the length of the subarrays to be reversed. :param a: list of int, the original list. :return: int, the sum of the list after all possible subarray reversals. a_copy = a.copy() # Reverse all possible subarrays of length k for start in range(0, n, k): end = min(start + k, n) a_copy[start:end] = reversed(a_copy[start:end]) return sum(a_copy) # Example usage: # n = 5, k = 3, a = [1, 2, 3, 4, 5] # Output: 24 # Explanation: reverse subarrays of length 3: [3, 2, 1, 5, 4], sum = 3 + 2 + 1 + 5 + 4 = 15 if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) a = list(map(int, data[2:])) print(reverse_subarrays_and_sum(n, k, a))"},{"question":"A farmer has a rectangular field that he wants to subdivide into smaller rectangular plots of the same size for planting different crops. The field is represented by a 2D grid of size `N x M` where each cell of the grid represents a potential plot of land. The farmer wants to ensure that the plots are designed in such a way that the differences in the coordinates of the plots do not exceed a given number `D`. Specifically, two plots that are adjacent either horizontally, vertically, or diagonally, should have a coordinate difference of at most `D`. Define the coordinate difference as the sum of the absolute differences of the x-coordinates and y-coordinates. For example, for two cells `C1(x1, y1)` and `C2(x2, y2)`, the coordinate difference `diff` is given by `|x1 - x2| + |y1 - y2|`. Write a function to determine how the farmer can subdivide the field such that each plot satisfies the coordinate difference condition. The function should return the number of such possible subdivisions. Input - `N` (1 ≤ N ≤ 1000): The number of rows of the field. - `M` (1 ≤ M ≤ 1000): The number of columns of the field. - `D` (1 ≤ D ≤ N + M - 2): The maximum allowed coordinate difference between adjacent plots. Output - An integer representing the number of possible subdivisions. Example Input: 3 3 1 Output: 9 Explanation: The farmer can subdivide the 3x3 field into 9 1x1 plots, as each plot satisfies the coordinate difference condition D = 1. Input: 4 4 2 Output: 16 Explanation: The farmer can subdivide the 4x4 field into 16 1x1 plots, as each plot satisfies the coordinate difference condition D = 2.","solution":"def num_subdivisions(N, M, D): Return the number of possible subdivisions for the given grid size and maximum coordinate difference. Parameters: N (int): Number of rows. M (int): Number of columns. D (int): Maximum allowed coordinate difference. Returns: int: Number of possible subdivisions. return N * M"},{"question":"Jim is organizing a coding marathon where programmers will be solving various coding challenges. To make sure everything goes smoothly, Jim wants to create a check system for certain tasks to monitor progress efficiently. One of these tasks involves monitoring the participants\' scores at any given point during the marathon and identifying those who have the highest scores but have not yet completed all their challenges. Can you help him create this system? You are given a log of participants\' scores and their status of whether they have completed the challenges or not. Your task is to find the maximum score among the participants who have not completed all the challenges. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of participants\' entries in the log. The following n lines each contain a participant\'s score and a status flag separated by a space. The score is an integer (0 ≤ score ≤ 100000), and the status flag is either 0 or 1, where 0 indicates the participant has not completed all challenges and 1 indicates they have completed all challenges. Output On a single line print the maximum score among the participants who have not completed all the challenges. If all participants have completed the challenges, print -1. Examples Input 5 500 0 400 1 300 0 400 0 350 1 Output 500 Input 3 200 1 300 1 400 1 Output -1 Input 4 100 0 100 0 50 0 60 1 Output 100 Note In the first sample, participants with scores 500 and 300 have not completed all the challenges, and the maximum score among them is 500. In the second sample, all participants have completed the challenges, so the output is -1. In the third sample, the maximum score among participants without completion is 100.","solution":"def max_score_not_completed(n, log): Find the maximum score among the participants who have not completed all challenges. Parameters: n (int): The number of participants\' entries in the log. log (list): A list of tuples where each tuple contains a participant\'s score and their completion status. Returns: int: The maximum score among participants who have not completed all challenges, or -1 if all have completed. max_score = -1 for score, status in log: if status == 0: max_score = max(max_score, score) return max_score"},{"question":"You are given a string S of length n. You need to find the longest contiguous substring of S such that all characters in the substring are from a given set of characters C. Input The first line contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the string. The second line contains the string S. The third line contains the set of characters C, represented as a string such that each character appears exactly once and is guaranteed to be a subset of the English alphabet (a-z). Output Print the length of the longest contiguous substring of S which consists only of characters from the set C. Examples Input 7 abcabca abc Output 7 Input 10 abcdefghij aeiou Output 1 Note In the first example, the entire string is made of characters in the set {\'a\', \'b\', \'c\'}, so the output is 7. In the second example, the longest substring that can be formed with only characters from the set {\'a\', \'e\', \'i\', \'o\', \'u\'} is any one of the vowels which appear singly, hence the output is 1.","solution":"def longest_contiguous_substring(n, S, C): Returns the length of the longest contiguous substring of S consisting of characters only from the set C. C_set = set(C) max_length = 0 current_length = 0 for char in S: if char in C_set: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"You are given an initial string S consisting of lowercase English letters. You can perform the following operation any number of times: * Choose a non-empty substring of S and replace it with its reverse. Your task is to determine if it is possible to transform the string S into a target string T using any number of such operations. Constraints * 1 <= |S|, |T| <= 300, where |S| and |T| represent the lengths of strings S and T. * S and T both consist of lowercase English letters. Input The input is given from Standard Input in the following format: S T Output Print \\"YES\\" (without quotes) if it is possible to transform the initial string S into the target string T. Otherwise, print \\"NO\\". Examples Input abac caba Output YES Input aabb bbaa Output YES Input abcd dcba Output YES Input abc def Output NO","solution":"def can_transform(S, T): Determines if it\'s possible to transform string S into string T by reversing any number of substrings. return sorted(S) == sorted(T) def main(): import sys input = sys.stdin.read data = input().split() S = data[0] T = data[1] if can_transform(S, T): print(\\"YES\\") else: print(\\"NO\\")"},{"question":"Given an integer N, print the smallest digit in N. If N is negative, consider only its absolute value. Constraints - (1 leq |N| leq 10^9) Input Input is given from Standard Input in the following format: N Output Print the smallest digit in N. Examples Input 43592 Output 2 Input -8531 Output 1","solution":"def smallest_digit(n): Returns the smallest digit in the absolute value of n. n = abs(n) digits = [int(d) for d in str(n)] return min(digits)"},{"question":"You are given a list of movie titles and their release years. Your task is to implement a system that supports the following operations to manage and query the movie list: 1. ADD name year: Adds a movie with the given name and release year to the list. If a movie with the same name already exists in the list, update its release year. 2. DELETE name: Deletes the movie with the given name from the list. If no such movie exists, ignore this operation. 3. QUERY name: Outputs the release year of the movie with the given name. If no such movie exists, output \\"NOT FOUND\\". 4. EARLIEST: Outputs the name and release year of the earliest released movie. If there are multiple movies with the same earliest year, output the one which was added first. If the list is empty, output \\"EMPTY\\". Input The first line contains an integer N indicating the number of operations (1 ≤ N ≤ 100,000). Each of the next N lines contains one of the operations described above. Output For every QUERY and EARLIEST operation, output the corresponding result. Examples Input 8 ADD Inception 2010 ADD Interstellar 2014 ADD Dunkirk 2017 QUERY Inception EARLIEST DELETE Interstellar EARLIEST QUERY Tenet Output 2010 Inception 2010 Inception 2010 NOT FOUND","solution":"class MovieManager: def __init__(self): self.movies = {} self.add_order = [] def add(self, name, year): if name in self.movies: self.movies[name] = year else: self.movies[name] = year self.add_order.append(name) def delete(self, name): if name in self.movies: del self.movies[name] self.add_order.remove(name) def query(self, name): return self.movies.get(name, \\"NOT FOUND\\") def earliest(self): if not self.movies: return \\"EMPTY\\" earliest_year = min(self.movies.values()) for name in self.add_order: if self.movies[name] == earliest_year: return f\\"{name} {earliest_year}\\""},{"question":"Given a directed graph with N nodes and M edges, you are required to find the longest path in the graph. The longest path does not necessarily need to start from the first node or end at the last node. You should handle the possibility of cycles in the graph appropriately. Input The first line contains two integers, N and M (1 <= N <= 100000, 0 <= M <= 200000), representing the number of nodes and edges in the graph. The next M lines each contain two integers u and v (1 <= u, v <= N), representing a directed edge from node u to node v. Output Print a single integer representing the length of the longest path in the graph. If the graph contains a cycle, print -1 as it\'s impossible to resolve a longest path in that case. Examples Input 5 6 1 2 2 3 3 4 4 5 3 1 1 3 Output -1 Input 4 4 1 2 2 3 3 4 1 4 Output 3 Input 5 3 1 2 2 3 3 4 Output 3 Note In the first example, the graph contains a cycle (1 -> 2 -> 3 -> 1), so the output is -1. In the second example, the longest path in the graph is from node 1 to node 4, having length 3 (1 -> 2 -> 3 -> 4). In the third example, the longest path is from node 1 to node 4, passing through nodes 2 and 3, having length 3 (1 -> 2 -> 3 -> 4).","solution":"from collections import defaultdict, deque def find_longest_path(N, M, edges): def topological_sort(): in_degree = [0] * N for u, v in edges: in_degree[v-1] += 1 zero_in_degree_queue = deque([i for i in range(N) if in_degree[i] == 0]) top_order = [] while zero_in_degree_queue: u = zero_in_degree_queue.popleft() top_order.append(u) for v in adj[u]: in_degree[v] -= 1 if in_degree[v] == 0: zero_in_degree_queue.append(v) if len(top_order) == N: return top_order else: return [] adj = defaultdict(list) for u, v in edges: adj[u-1].append(v-1) top_order = topological_sort() if not top_order: return -1 dist = [-1] * N for u in top_order: if dist[u] == -1: dist[u] = 0 for v in adj[u]: if dist[v] < dist[u] + 1: dist[v] = dist[u] + 1 return max(dist) # Example usage # N, M = map(int, input().split()) # edges = [tuple(map(int, input().split())) for _ in range(M)] # print(find_longest_path(N, M, edges))"},{"question":"Given an integer `n`, your task is to reverse the bits in its binary representation and return the resulting integer. For example, the binary representation of `13` is `1101`, and reversing it yields `1011`, which corresponds to `11` in decimal. # Input - The first line contains a single integer `T` - the number of test cases. - Each of the next `T` lines contains a single integer `n` (0 ≤ n ≤ 2^31 - 1). # Output - For each test case, output a single integer which is the result of reversing the bits of `n`. # Example Input ``` 3 13 0 4294967295 ``` Output ``` 11 0 4294967295 ``` # Explanation - Test Case 1: In binary, 13 is `1101`. Reversing the bits gives us `1011`, which is `11` in decimal. - Test Case 2: In binary, 0 is `0`. Reversing the bits gives us `0`. - Test Case 3: In binary, 4294967295 is `11111111111111111111111111111111`. Reversing the bits gives us the same sequence.","solution":"def reverse_bits(n): Returns the integer resulting from reversing the bits of the input integer n. b = bin(n)[2:] # Convert n to binary string and strip the \'0b\' prefix b_rev = b[::-1] # Reverse the string return int(b_rev, 2) # Convert the reversed string back to an integer def process_test_cases(T, test_cases): Processes multiple test cases of reversing bits. Parameters: - T (int): Number of test cases - test_cases (list of int): List of integers to process Returns: - List of integers, each representing the result of reversing the bits of the corresponding input integer. results = [] for n in test_cases: results.append(reverse_bits(n)) return results"},{"question":"Iroha loves palindrome numbers. A palindrome number reads the same backward as forward, for example, 121 or 12321. She has a number N and would like to find the smallest palindrome number greater than or equal to N. Constraints * 1 ≦ N < 100000 Input The input is given from Standard Input in the following format: N Output Print the smallest palindrome number that is greater than or equal to N. Examples Input 123 Output 131 Input 88888 Output 88888","solution":"def is_palindrome(num): Check if a number is palindrome. s = str(num) return s == s[::-1] def find_smallest_palindrome_greater_or_equal(N): Find the smallest palindrome number greater than or equal to N. current_num = N while True: if is_palindrome(current_num): return current_num current_num += 1"},{"question":"In a magical forest, there are n treasure chests arranged in a row, each containing a certain number of gold coins. Due to a recent enchantment, each treasure chest can imbue an equal corruption value to other treasure chests. Specifically, the i-th treasure chest corrupts the j-th treasure chest if |i-j| ≤ d, transferring k gold coins from chest i to chest j. This operation can be performed once for each valid i and j according to the corruption rule. Given the initial number of gold coins in each treasure chest, you need to determine the maximum total amount of gold that can be evenly distributed across all treasure chests using the aforementioned corruption process. Input The first line contains three space-separated integers n, k, and d (1 ≤ n ≤ 105, 1 ≤ k ≤ 1000, 1 ≤ d ≤ n-1), denoting the number of treasure chests, the number of coins transferred during corruption, and the maximum distance within which corruption can occur, respectively. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109), representing the initial number of gold coins in each treasure chest. Output Print a single integer denoting the maximum total number of gold that can be evenly distributed across all treasure chests after performing the corruption process. Examples Input 5 100 2 100 200 300 400 500 Output 1500 Note In the example, each chest can potentially corrupt or be corrupted by nearby chests. The optimal redistribution of the gold will lead to an even distribution of 1500 coins across all 5 chests, assuming the operation is performed strategically.","solution":"def maximize_gold_distribution(n, k, d, coins): Given the initial number of gold coins in each treasure chest, determines the maximum total amount of gold that can be evenly distributed. Parameters: n (int): Number of treasure chests. k (int): Number of coins transferred during corruption. d (int): Maximum distance within which corruption can occur. coins (list of int): Initial number of gold coins in each treasure chest. Returns: int: Maximum total number of gold evenly distributed. total_gold = sum(coins) return total_gold # Example Usage if __name__ == \\"__main__\\": n, k, d = 5, 100, 2 coins = [100, 200, 300, 400, 500] print(maximize_gold_distribution(n, k, d, coins)) # Output: 1500"},{"question":"Write a function that takes a string as an input and returns the longest palindromic substring within it. If multiple substrings of the same length are found, return the first one that appears. # Function Signature ```python def longest_palindromic_substring(s: str) -> str: pass ``` # Input - A single string `s` where (1 leq text{len}(s) leq 10^3). - The string consists of only lowercase English letters. # Output - A string representing the longest palindromic substring within the input string `s`. # Example ```python assert longest_palindromic_substring(\\"babad\\") == \\"bab\\" assert longest_palindromic_substring(\\"cbbd\\") == \\"bb\\" assert longest_palindromic_substring(\\"a\\") == \\"a\\" assert longest_palindromic_substring(\\"ac\\") == \\"a\\" ``` # Explanation - In the first example, \\"bab\\" and \\"aba\\" are both palindromic substrings of \\"babad\\", but \\"bab\\" appears first. - In the second example, \\"bb\\" is the longest palindromic substring of \\"cbbd\\". - In the third example, the longest palindromic substring of \\"a\\" is \\"a\\". - In the fourth example, both \\"a\\" and \\"c\\" are palindromic substrings of \\"ac\\", but \\"a\\" appears first.","solution":"def longest_palindromic_substring(s: str) -> str: def expand_around_center(left: int, right: int) -> str: while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): odd_palindrome = expand_around_center(i, i) # palindrome with odd length even_palindrome = expand_around_center(i, i + 1) # palindrome with even length if len(odd_palindrome) > len(longest): longest = odd_palindrome if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"You are given a grid of size n x m representing a maze, with cells being either walls (\'#\') or free paths (\'.\'). You start at the top-left corner (1, 1) and your goal is to reach the bottom-right corner (n, m) using the minimum number of steps while following these rules: 1. You can move up, down, left, or right to an adjacent cell. 2. You cannot move through walls. 3. You are allowed to break exactly one wall in the grid, turning it into a free path, to help you reach your goal. Determine the minimum number of steps required to reach the bottom-right corner from the top-left corner if you can break one wall. If it\'s impossible to reach the goal, return -1. Input The first line contains two positive integers n and m (2 ≤ n, m ≤ 1000), denoting the number of rows and columns in the maze grid, respectively. The following n lines contain m characters each, representing the maze grid: \'#\' for walls and \'.\' for free paths. The top-left and bottom-right corners are always free paths. Output Output a single integer representing the minimum number of steps required to reach the bottom-right corner while breaking at most one wall. If it\'s impossible to reach the goal, output -1. Examples Input 5 6 ...... .#..#. .. .#.#.. ...... Output 9 Input 3 3 .#. # .#. Output -1 Input 4 5 ....# ..# .#.#. .#. Output 7 Note In the first sample, an optimal path could be breaking the wall at (2, 2) and moving: (1, 1) → (1, 2) → (1, 3) → (1, 4) → (1, 5) → (1, 6) → (2, 6) → (3, 6) → (4, 6) → (5, 6). Therefore, the minimum number of steps required is 9. In the second sample, there is no way to reach the bottom-right corner, even if breaking one wall, so the output is -1. In the third sample, breaking the wall at (3, 4) allows you to move: (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3) → (3, 4) → (4, 4) → (4, 5). Therefore, the minimum number of steps required is 7.","solution":"from collections import deque def min_steps_with_breaking_wall(n, m, grid): def bfs(start): que = deque([start]) distances = [[[-1, -1] for _ in range(m)] for _ in range(n)] distances[start[0]][start[1]][start[2]] = 0 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] while que: x, y, wall_used = que.popleft() current_distance = distances[x][y][wall_used] if (x, y) == (n-1, m-1): return current_distance for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: if grid[nx][ny] == \'.\' and distances[nx][ny][wall_used] == -1: distances[nx][ny][wall_used] = current_distance + 1 que.append((nx, ny, wall_used)) elif grid[nx][ny] == \'#\' and wall_used == 0 and distances[nx][ny][1] == -1: distances[nx][ny][1] = current_distance + 1 que.append((nx, ny, 1)) return -1 return bfs((0, 0, 0))"},{"question":"In a village with numerous festivals, one event is a \\"Firework Display\\". The display happens in a straight line along the village\'s main road. Each firework has a specific position along the road and a radius. When a firework explodes, it covers an area from (position - radius) to (position + radius). Fireworks overlapping in coverage are redundant. Your task is to determine the minimum number of fireworks that need to be fired to completely cover the entire length of the road from position L to position R (inclusive). If it\'s impossible to cover the entire length, output \\"IMPOSSIBLE\\". Input A sequence of multiple datasets is given as input. Each dataset is provided in the following format: L R n p1 r1 p2 r2 : pn rn where: - L, R (0 ≤ L < R ≤ 1000) are the start and end positions of the road. - n (1 ≤ n ≤ 1000) is the number of fireworks. - Each firework i is described by two integers: pi (0 ≤ pi ≤ 1000) representing the position on the road and ri (1 ≤ ri ≤ 1000) representing its radius. The input ends with a line containing a single zero. Output For each dataset, print the minimum number of fireworks needed to cover the full length of the road from L to R on one line. If it\'s not possible, print \\"IMPOSSIBLE\\". Example Input 0 10 3 2 4 8 2 10 1 0 15 2 5 5 10 4 0 Output 2 IMPOSSIBLE Explanation In the first example, the fireworks at (2, 4) and (8, 2) can cover the range from 0 to 10. In the second example, no combination of the two fireworks can cover the range from 0 to 15.","solution":"def min_fireworks_to_cover(L, R, fireworks): Determine the minimum number of fireworks needed to cover the full length of the road from L to R. fireworks.sort(key=lambda x: x[0] - x[1]) end_reach = L num_fireworks = 0 i = 0 intervals = [] while end_reach < R: furthest_end = -1 while i < len(fireworks) and fireworks[i][0] - fireworks[i][1] <= end_reach: furthest_end = max(furthest_end, fireworks[i][0] + fireworks[i][1]) i += 1 if furthest_end == -1: return \\"IMPOSSIBLE\\" end_reach = furthest_end num_fireworks += 1 if end_reach >= R: return num_fireworks return \\"IMPOSSIBLE\\" def solve(input_str): input_lines = input_str.strip().split(\'n\') result = [] i = 0 while i < len(input_lines): if input_lines[i] == \\"0\\": break L, R, n = map(int, input_lines[i].split()) i += 1 fireworks = [tuple(map(int, input_lines[i + j].split())) for j in range(n)] i += n result.append(str(min_fireworks_to_cover(L, R, fireworks))) return \\"n\\".join(result)"},{"question":"An alien spaceship is traveling through an asteroid belt and needs to collect power crystals to boost its shields. Each crystal has a unique power value associated with it. Given a list of integers representing the power values of the crystals, you need to help the aliens identify the maximum sum of non-adjacent power values they can collect. They can choose as many crystals as they want, but no two chosen crystals can be adjacent in the list. Write a function `maxPower` that determines the maximum sum of non-adjacent power values. Function signature: `def maxPower(crystals: List[int]) -> int:` Input - A single integer `n` representing the number of power crystals. - A list of `n` integers representing the power values of the crystals. Output Return an integer, the maximum sum of non-adjacent power values. Constraints - 1 <= n <= 100,000 - -10^4 <= power value <= 10^4 Example Input: 5 [3, 2, 5, 10, 7] Output: 15 Explanation The aliens can collect crystals with power values 3, 10, and 2, yielding a maximum sum of 15. Note that they cannot collect both 5 and 10 because they are adjacent.","solution":"from typing import List def maxPower(crystals: List[int]) -> int: n = len(crystals) if n == 0: return 0 if n == 1: return max(0, crystals[0]) # Using two variables to keep track of maximum sums prev1 = max(0, crystals[0]) prev2 = max(prev1, max(0, crystals[1])) for i in range(2, n): current = max(prev1 + max(0, crystals[i]), prev2) prev1 = prev2 prev2 = current return prev2"},{"question":"A robotics company is designing a new robotic arm that can move in a 2D grid. The robotic arm starts at the origin point (0,0) and can move in four directions: up, down, left, and right. Each move is represented by a command in a string, where \'U\' means up, \'D\' means down, \'L\' means left, and \'R\' means right. The robotic arm processes a given list of commands in order and determines its final position on the grid. Your task is to implement a function that takes a string of commands and returns the final position of the robotic arm after executing all commands. Input The input consists of a single string `commands` (1 ≤ |commands| ≤ 10^5) containing the commands executed by the robotic arm. Output Print the final coordinates of the robotic arm as two space-separated integers x and y. Examples Input \\"UURDDLLR\\" Output 0 0 Input \\"UUDDLRLR\\" Output 0 0 Input \\"LLLL\\" Output -4 0 Note In the first sample, the robotic arm starts from (0, 0) and performs the following moves: - Move Up twice to (0, 2) - Move Right twice to (2, 2) - Move Down twice to (2, 0) - Move Left twice to (0, 0) In the second sample, the robotic arm starts from (0, 0) and performs the following moves: - Move Up twice to (0, 2) - Move Down twice to (0, 0) - Move Left once to (-1, 0) - Move Right once to (0, 0) In the third sample, the robotic arm starts from (0, 0) and performs the following moves: - Move Left four times to (-4, 0) So, the final coordinates are calculated accordingly.","solution":"def final_position(commands): Takes a string of commands and returns the final position of the robotic arm. Parameters: commands (str): A string containing the commands executed by the robotic arm Returns: tuple: A tuple of two integers representing the final coordinates # Initialize the starting position x, y = 0, 0 # Iterate over each command and update the position accordingly for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y) # Function to print the result in the correct format def print_final_position(commands): x, y = final_position(commands) print(f\\"{x} {y}\\")"},{"question":"You are an engineer tasked with designing the traffic light system for a new city. The city is built in a grid pattern with intersections represented as intersections_of_traffic_lights, each placed at regular intervals. Each intersection has four traffic lights facing north, south, east, and west. Your job is to develop a simulation to determine the optimal switching sequence of the traffic lights to maximize the traffic flow through the intersections. # Problem Details You need to simulate the traffic lights at each intersection for a total of T seconds. Each traffic light can either be green or red. When the light is green, cars can move in the direction the light is facing; when the light is red, cars must stop. Each direction (north, south, east, west) has an equal chance of car arrival based on given probabilities. The simulation should follow these rules: 1. Each traffic light switches between green and red every G seconds. 2. No two adjacent intersections can have traffic lights facing each other green at the same time. 3. Cars arriving at an intersection will attempt to move in the direction of a green light. If they cannot because the light is red, they will wait until the next green light. # Input Your program will receive: - An integer `N` representing the number of rows in the grid. - An integer `M` representing the number of columns in the grid. - An integer `G` representing the number of seconds each light remains green. - An integer `T` representing the total duration of the simulation. # Output Your program should output: - The total number of cars that successfully pass through the intersections during the simulation. - The average waiting time for the cars that had to wait for green lights. # Example Input ``` 3 3 10 100 ``` Output ``` Total cars passed: 120 Average waiting time: 5 seconds ``` # Additional Information - Assume each intersection starts with the north-south traffic lights green and the east-west traffic lights red. - You can assume car arrival probabilities are such that on average, one car arrives at each direction per second at each intersection. - Your result should be derived from simulating car movements at each intersection in the grid for T seconds. Develop a solution to analyze the traffic flow and optimize the traffic sequencing to ensure the smoothest possible traffic flow throughout the city grid.","solution":"def simulate_traffic_lights(N, M, G, T): Simulates the traffic light system in a grid of intersections and calculates the number of cars passed and the average waiting time. Args: N (int): number of rows in the grid M (int): number of columns in the grid G (int): number of seconds each light remains green T (int): total duration of the simulation Returns: tuple: total number of cars passed and average waiting time for the cars cars_passed = 0 total_waiting_time = 0 total_cars = 0 for time in range(T): # For each intersection in the grid for i in range(N): for j in range(M): # Determine the state of the lights at the current time if (time // G) % 2 == 0: # North-South green passing_cars = 2 # cars passing N and S waiting_cars = 2 # cars waiting E and W else: # East-West green passing_cars = 2 # cars passing E and W waiting_cars = 2 # cars waiting N and S cars_passed += passing_cars total_waiting_time += waiting_cars * (G // 2 * (time // G)) total_cars += 4 avg_waiting_time = total_waiting_time / total_cars if total_cars > 0 else 0 return cars_passed, avg_waiting_time"},{"question":"Bob is organizing a programming contest where each participant can solve multiple problems. Each problem has a difficulty level d and an associated score s. A participant can solve a problem if their skill level, l, is greater than or equal to the difficulty level d of the problem. The participant will then earn the score s. Bob needs to calculate the maximum total score a participant can achieve given a list of problems and their difficulty levels, scores, and the participant\'s skill level. Bob has already written a part of the solution, but he is unsure if it covers all edge cases. For each test case, the maximum total score should be returned. Here is Bob\'s definition of the problem: **Input** - First line contains an integer t (1 ≤ t ≤ 100), the number of test cases. - For each test case: - The first line contains two integers n (1 ≤ n ≤ 10^4) and l (1 ≤ l ≤ 10^5), the number of problems and the participant\'s skill level, respectively. - The next n lines contain two integers each, di (1 ≤ di ≤ 100), the difficulty level of the problem, and si (1 ≤ si ≤ 1000), the score associated with the problem. **Output** - For each test case, output a single integer, the maximum total score a participant can achieve. **Examples** **Input** ``` 2 3 10 5 80 10 100 3 50 4 50 20 15 5 10 100 5 50 20 30 ``` **Output** ``` 230 100 ``` **Explanation:** - In the first test case, the participant with skill level 10 can solve all three problems, earning a total of 80 + 100 + 50 = 230 points. - In the second test case, the participant with skill level 5 can only solve the third problem, earning 50 points. The first and second problems are too difficult for the participant to solve.","solution":"def max_total_score(test_cases): results = [] for test_case in test_cases: n, l = test_case[0] problems = test_case[1] total_score = 0 for (d, s) in problems: if l >= d: total_score += s results.append(total_score) return results # Function to parse input and call the main function def calculate_max_scores(t, test_cases): return max_total_score(test_cases)"},{"question":"You are given a positive integer n. Determine a way to split the integer n into a sum of distinct powers of two. Specifically, find distinct non-negative integers a_1, a_2, ..., a_k such that: n = 2^{a_1} + 2^{a_2} + ldots + 2^{a_k} where (0 leq a_1 < a_2 < ldots < a_k) and all (a_i) are distinct. Input The input consists of a single integer n (1 ≤ n ≤ 10^9). Output In the first line, print \\"YES\\" if there exists such a decomposition or \\"NO\\" otherwise. If there exists such a decomposition, the next line should contain integer k — the number of elements in the decomposition. The following line should contain k distinct non-negative integers (a_1, a_2, ..., a_k) in increasing order, such that each (a_i) corresponds to an exponent in the decomposition of n. Examples Input 5 Output YES 2 0 2 Input 10 Output YES 2 1 3 Note In the first example there is a decomposition (5 = 2^0 + 2^2). In the second example there is a decomposition (10 = 2^1 + 2^3).","solution":"def decompose_into_powers_of_two(n): Returns a decomposition of the integer n into distinct powers of two if possible. powers = [] exponent = 0 while n > 0: if n & 1: powers.append(exponent) n >>= 1 exponent += 1 if powers: return \\"YES\\", len(powers), powers else: return \\"NO\\","},{"question":"Given an array of N integers, you have to perform multiple operations on the array such that you eventually maximize the sum of the array elements. You can perform the following operations any number of times: - Choose any two elements, say X and Y, such that X != Y, and replace them with a single element X + Y. After this operation, the array size is reduced by 1. Your task is to find the maximum possible sum of the array elements after performing the operations optimally. Input The first line of input contains a single integer T denoting the number of test cases. Each test case contains 2 lines: - The first line contains a single integer N — the number of integers in the array. - The second line contains N space-separated integers denoting the array elements. Output For each test case, output the required maximum sum in a new line. Constraints 1 ≤ T ≤ 10000 1 ≤ N ≤ 10000 1 ≤ Ai ≤ 10^9 sum of N over all test cases does not exceed 10^6 Example Input 2 3 1 2 3 4 2 5 6 1 Output 6 14 Explanation Test 1: Performing the operation on elements 1 and 2 results in an array [3, 3], then performing the operation on the two 3s results in an array [6]. The sum is 6. Test 2: You can combine elements in various ways, but the maximum possible sum results from combining 2 and 5 first to get [7, 6, 1], then combining 7 and 6 to get [13, 1], then combining 13 and 1 to get [14]. The sum is 14.","solution":"def maximize_sum(test_cases): results = [] for N, array in test_cases: if N == 1: results.append(array[0]) else: total_sum = sum(array) results.append(total_sum) return results"},{"question":"Jim has recently started collecting unique types of stones for his collection. Each stone has a distinct integer value representing its type. He wants to maximize the number of unique types in his collection but has a constraint: he can only collect stones whose total type value does not exceed a given integer value X. Given a list of stone types and their respective type values, determine the maximum number of unique stone types Jim can collect without exceeding the total type value X. Input: The first line of input will contain two integers N and X (1 ≤ N ≤ 100, 1 ≤ X ≤ 10,000) where N is the number of different stone types, and X is the maximum total type value. The second line of input will contain N integers representing the type values of the stones. Output: Print the maximum number of unique stone types Jim can collect without exceeding the total type value X. Example: Input: 5 10 1 3 3 2 6 Output: 4 Note: In the example, Jim can collect stones of type values 1, 2, 3, and another 3, making the total sum of type values 1 + 2 + 3 + 3 = 9, which is less than or equal to X. Therefore, he can collect a total of 4 unique stones.","solution":"def max_unique_stones(N, X, type_values): Determines the maximum number of unique stone types Jim can collect without exceeding the total type value X. type_values.sort() total_value = 0 unique_stones = 0 for value in type_values: if total_value + value <= X: total_value += value unique_stones += 1 else: break return unique_stones # Example usage: # print(max_unique_stones(5, 10, [1, 3, 3, 2, 6])) # Output: 4"},{"question":"Title: Weight of the Words In a universe where words have weights, each word\'s weight is calculated as the sum of the weights of its characters. The weight of a character is defined by its position in the alphabet (i.e., \'a\' = 1, \'b\' = 2, ..., \'z\' = 26). Given a phrase, you need to determine the weight of each word in the phrase, and then sort the words based on their weights in ascending order. If two words have the same weight, maintain their original order as in the input. Input: - The first line will contain an integer T, the number of test cases (1 ≤ T ≤ 20). - Each of the next T lines will contain a phrase consisting of words separated by a single space. Each phrase will have only lowercase letters (\'a\'-\'z\') and spaces, with no leading or trailing spaces, and will not exceed 100 characters in length. Output: - For each test case, output a single line with the words sorted by their weights in ascending order. Example: Input: 3 this is a test hack the planet random access memory Output: a is this test the hack planet memory random access Note: All words in the input are considered non-empty. Explanation: Test Case 1: - \'this\' has a weight of 20+8+9+19 = 56 - \'is\' has a weight of 9+19 = 28 - \'a\' has a weight of 1 - \'test\' has a weight of 20+5+19+20 = 64 Sorted by weights: a (1), is (28), this (56), test (64) Test Case 2: - \'hack\' has a weight of 8+1+3+11 = 23 - \'the\' has a weight of 20+8+5 = 33 - \'planet\' has a weight of 16+12+1+14+5+20 = 68 Sorted by weights: hack (23), the (33), planet (68) Test Case 3: - \'random\' has a weight of 18+1+14+4+15+13 = 65 - \'access\' has a weight of 1+3+3+5+19+19 = 50 - \'memory\' has a weight of 13+5+13+15+18+25 = 89 Sorted by weights: access (50), random (65), memory (89)","solution":"def word_weight(word): Calculate the weight of a word based on the sum of the positions of its characters in the alphabet. return sum(ord(char) - ord(\'a\') + 1 for char in word) def sort_words_by_weight(phrase): Sort the words in the phrase based on their weight in ascending order. If two words have the same weight, maintain their original order. words = phrase.split() weights = [(word, word_weight(word)) for word in words] sorted_words = sorted(weights, key=lambda x: x[1]) return \' \'.join(word for word, _ in sorted_words) def process_phrases(phrases): Process a list of phrases and return the sorted words by their weights for each phrase. result = [] for phrase in phrases: result.append(sort_words_by_weight(phrase)) return result"},{"question":"You are tasked with writing a program that simulates the behavior of a simplified automaton processing a string based on a set of transition rules. Each transition rule consists of a current state, a character to read, an operation to perform, and a next state. The automaton processes the input string character by character, starting from an initial state, and outputs a result based on the final state and any characters generated by the operations. # Transition Rules Each transition rule can be of the following types: 1. `(state, \'char\', \'print\', next_state)`: This rule applies when the automaton is in `state` and reads the character `char`. It prints `print` and moves to `next_state`. 2. `(state, \'char\', None, next_state)`: This rule applies when the automaton is in `state` and reads the character `char`. It performs no print operation and moves to `next_state`. The automaton always starts in the `start` state and reads the input string character by character. If a transition rule matches the current state and the current character, the automaton applies the rule, moves to the `next_state`, and performs any specified print operation. If no rule matches, the automaton stops processing the string. # Objective Your task is to simulate this automaton. Given a set of transition rules and an input string, the program should return the sequence of characters printed by the automaton and the final state after processing the string. **Input** The input format is as follows: - The number `N` (1 ≤ N ≤ 50), the number of transition rules, on the first line. - The next `N` lines each contain a transition rule in the format described above. - A string `input_string` on the next line, the string to be processed by the automaton. The transition rules are defined by the current state, the character to be read, the character to print (or `None` if no print operation is performed), and the next state. States and characters are non-empty strings that can contain only lowercase letters (`a`-`z`). **Output** The output consists of: 1. The sequence of characters printed by the automaton without spaces. 2. The final state of the automaton. **Example** *Example Input* ``` 4 start a x state1 state1 b None end start b y state2 state2 a None end ab ``` *Example Output* ``` x end ``` *Example Input* ``` 3 start a z state1 state1 a None state1 state1 b None end aab ``` *Example Output* ``` z end ```","solution":"def simulate_automaton(transitions, input_string): state = \'start\' output = [] # Convert the transitions into a dictionary for quick look-up transition_dict = {} for current_state, char, print_char, next_state in transitions: if current_state not in transition_dict: transition_dict[current_state] = {} transition_dict[current_state][char] = (print_char, next_state) # Process the input string character by character for char in input_string: if state in transition_dict and char in transition_dict[state]: print_char, next_state = transition_dict[state][char] if print_char: output.append(print_char) state = next_state else: break return \'\'.join(output), state"},{"question":"You are managing an inventory system with multiple warehouses, each represented as a list. Each warehouse can store a maximum of `k` unique types of items identified by their IDs. For `m` warehouses W_i (i = 0, 1, ..., m-1), perform a sequence of the following operations. * add(i, x): Add an item with ID x to warehouse W_i. If the warehouse is already storing an item with ID x, do nothing. If the warehouse is at capacity, do nothing. * remove(i, x): Remove an item with ID x from warehouse W_i. If the item isn’t found in the warehouse, do nothing. * check(i, x): Check if an item with ID x exists in warehouse W_i. Print \\"yes\\" if found, otherwise print \\"no\\". In the initial state, all warehouses are empty and have a capacity of storing `k` types of items. # Constraints * 1 leq m leq 1,000 * 1 leq p leq 200,000 * 1 leq k leq 1,000 * 1 leq x leq 1,000,000 # Input The input is given in the following format. ``` m ; p ; k operation_1 operation_2 : operation_p ``` Each operation operation_i is given by ``` 0 i x ``` or ``` 1 i x ``` or ``` 2 i x ``` where the first digits 0, 1, and 2 represent add, remove, and check operations, respectively. # Output For each check operation, print either \\"yes\\" or \\"no\\" in a line. # Example Input ``` 3 7 2 0 0 100 0 0 200 0 0 300 2 0 100 1 0 100 2 0 100 2 0 200 ``` Output ``` yes no yes ```","solution":"def inventory_system(m, p, k, operations): # initialize m warehouses with a capacity of k unique items each warehouses = [set() for _ in range(m)] result = [] for operation in operations: op, i, x = map(int, operation.split()) if op == 0: # add operation if len(warehouses[i]) < k: warehouses[i].add(x) elif op == 1: # remove operation if x in warehouses[i]: warehouses[i].remove(x) elif op == 2: # check operation if x in warehouses[i]: result.append(\\"yes\\") else: result.append(\\"no\\") return result"},{"question":"Levko has a string that he finds unappealing. He thinks the beauty of the string depends on the number of distinct characters it contains: the fewer distinct characters, the more beautiful the string is. Levko wants to update the string to make it as beautiful as possible. To be specific, he is allowed to replace at most k characters in the string with any other characters to minimize the number of distinct characters. Help Levko determine the minimum number of distinct characters the string can have after making the allowed replacements. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2000). The second line contains a string s of length n that consists of lowercase English letters. Output A single integer — the minimum number of distinct characters the string can have. Examples Input 10 2 abacabadab Output 2 Input 5 1 abcde Output 4 Input 6 3 aaaaaa Output 1 Note In the first sample, Levko can replace the seventh and eighth characters with \'a\' to get the string \\"aaaaaaadab\\", which contains the characters \'a\' and \'d\', making the number of distinct characters 2. In the second sample, Levko can replace one of the characters \'b\', \'c\', \'d\', or \'e\' with \'a\', resulting in the string \\"aacde\\" or similar, which contains 4 distinct characters.","solution":"def min_distinct_characters(n, k, s): Returns the minimum number of distinct characters the string can have after making at most k replacements. from collections import Counter char_count = Counter(s) # Number of distinct characters in the string distinct_char_count = len(char_count) # If k is greater or equal to number of different characters, we can reduce to 1 character if k >= distinct_char_count: return 1 # Sort characters by frequency char_freq = sorted(char_count.values(), reverse=True) # Reduce the number of distinct characters by merging the least frequency characters while k > 0 and distinct_char_count > 1: least_freq = char_freq[-1] if k >= least_freq: k -= least_freq char_freq.pop() distinct_char_count -= 1 else: break return distinct_char_count"},{"question":"Given a sequence of integers, find the length of the longest subsequence where all elements are the same. Write a program that reads integers from the input until it encounters a zero (0). The integer zero is not part of the sequence. The program should then output the length of the longest subsequence in which all the elements are the same. Input The input consists of multiple datasets on separate lines. Each dataset ends with zero (0), and the end of the input is indicated by a line containing only \\"0\\". Each integer in a dataset can be positive or negative, and the datasets do not contain any other characters except integers and zero as the end marker. Output For each dataset, output the length of the longest subsequence in which all the elements are identical. If the dataset contains no elements except zero, output \\"NA\\". Constraints: - The datasets will have at most 10000 integers each, not including the ending zero. Example Input 1 2 2 2 3 3 1 1 0 4 4 4 4 0 0 3 3 3 4 5 6 7 8 9 3 3 3 0 Output 3 4 NA 3","solution":"def find_longest_subsequence_length(lst): if len(lst) == 0: return \\"NA\\" max_length = 0 current_length = 1 for i in range(1, len(lst)): if lst[i] == lst[i-1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 # Last subsequence check if current_length > max_length: max_length = current_length return max_length if max_length > 0 else \\"NA\\" def parse_input_and_find_lengths(input_str): lines = input_str.strip().split(\'n\') results = [] for line in lines: elements = list(map(int, line.split())) if not elements or elements == [0]: results.append(\\"NA\\") else: results.append(find_longest_subsequence_length(elements[:-1])) return results"},{"question":"A research facility is conducting an experiment with chemical reactions, and they need to monitor and control the temperature of the reaction chambers. Each reaction chamber can have a maximum temperature it must not exceed and each chamber has its own initial temperature. The facility has a cooling system that can be activated to reduce the temperature of any chamber by a certain amount. The cooling system can be activated any number of times on any chamber, but it reduces the temperature of only one chamber each time it is activated. Given the maximum allowable temperatures for each chamber and the initial temperatures, you should determine the minimum number of activations of the cooling system needed to bring all chambers to a temperature at or below their respective maximum temperatures. Write a function that computes the minimum number of activations required. # Function Signature ```python def minimum_cooling_activations(n: int, chambers: List[Tuple[int, int]]) -> int: pass ``` # Input - An integer `n` (1 leq n leq 100,000) representing the number of reaction chambers. - A list of `n` tuples where each tuple contains two integers: - The first integer is the initial temperature `initial` (1 leq initial leq 100,000) of the reaction chamber. - The second integer is the maximum allowable temperature `max_temp` (1 leq max_temp leq 100,000) for the chamber. # Output - Return an integer representing the minimum number of cooling system activations required. # Example Input ```python 3 [(100, 95), (200, 190), (150, 120)] ``` Output ```python 35 ``` Input ```python 2 [(50, 50), (60, 10)] ``` Output ```python 50 ``` # Explanation In the first example, the first chamber needs 5 activations, the second chamber needs 10 activations, and the third chamber needs 30 activations. Therefore, the total number of activations required is 5 + 10 + 30 = 45. In the second example, the first chamber is already at the allowable temperature, and the second requires 50 activations to reduce its temperature from 60 to 10.","solution":"def minimum_cooling_activations(n, chambers): Compute the minimum number of cooling activations required to bring all chambers to a temperature at or below their respective maximum temperatures. :param n: int - Number of reaction chambers :param chambers: List[Tuple[int, int]] - Initial temperature and max allowable temperature for each chamber :return: int - Minimum number of activations needed total_activations = 0 for initial, max_temp in chambers: if initial > max_temp: # Calculate the number of activations required to bring temperature down to max_temp total_activations += initial - max_temp return total_activations"},{"question":"Ashley is studying for her artificial intelligence programming exams. Today she is working on binary trees. Here\'s a problem she needs to solve: Given a binary tree with n nodes, where each node has a unique value from 1 to n, your task is to find the number of distinct binary search trees (BSTs) that can be formed using the given n nodes. A binary search tree is a binary tree where the left subtree of a node contains only nodes with values less than the node\'s value, and the right subtree only nodes with values greater than the node\'s value. Help Ashley solve this problem for the given n. As the answer to the problem could be very large, return the result modulo 1000000007 (10^9 + 7). Input The only line of the input contains a single integer n (1 ≤ n ≤ 50). Output Print a single integer — the number of distinct binary search trees modulo 1000000007. Examples Input 3 Output 5 Input 4 Output 14 Note The number of distinct binary search trees for a given n is computed using the nth Catalan number. The nth Catalan number C(n) is given by: C(n) = (2n)! / ((n+1)!n!) Due to the modulo constraint, you should use an efficient method to compute this value.","solution":"def num_of_bsts(n): MOD = 1000000007 # Use dynamic programming to store Catalan numbers catalan = [0] * (n + 1) catalan[0] = 1 catalan[1] = 1 # Compute the values for each i till n for i in range(2, n + 1): catalan[i] = 0 for j in range(i): catalan[i] = (catalan[i] + catalan[j] * catalan[i - j - 1]) % MOD return catalan[n]"},{"question":"Admiral Grace Hopper Naval Academy is planning a midterm programming assessment for its cadets. The task is to determine the efficiency of their navigation algorithms by assessing their ability to calculate the shortest path in a grid that\'s partially subject to current flows that either accelerate or decelerate their movement. The grid is represented as a matrix where each cell contains an integer value. Positive values represent accelerated currents, negative values represent decelerated currents, and zero values indicate no current effect. Cadets are allowed to move only to the right or downward. Their objective is to navigate from the upper-left corner to the bottom-right corner of the grid in the least amount of time. The travel time through each cell is inversely related to the cell\'s current value (more positive, faster, more negative, slower). However, at a minimum, traveling through any cell takes at least one time unit. Input The first line contains an integer T, the number of test cases. Each test case begins with a pair of integers N and M, representing the dimensions of the grid. Each of the following N lines contains M integers, representing the current values of the grid cells. Output For each test case, output a single integer, the minimum time required to travel from the upper-left corner to the bottom-right corner of the grid. Constraints 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 -10 ≤ Grid cells values ≤ 10 Example Input: 2 3 3 0 1 2 -1 0 1 2 -1 0 2 2 0 1 -1 0 Output: 5 3 Explanation In the first test case, one possible path of minimum travel time is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), taking times 1, 1, 0.5, 1, and 1 respectively, totalling 4.5, which rounds up to 5 as a minimum transmission unit. The second test case navigates directly through (0,0) -> (0,1) -> (1,1), taking 1, 1, and 1 units of time.","solution":"import sys import heapq def dijkstra(grid, n, m): # Initialize time array with infinity time = [[sys.maxsize] * m for _ in range(n)] time[0][0] = max(1, 1 - grid[0][0]) # Priority queue for dijkstra\'s algorithm pq = [(time[0][0], 0, 0)] # Dijkstra\'s algorithm while pq: current_time, x, y = heapq.heappop(pq) if x == n-1 and y == m-1: return current_time # Check right neighbor if y + 1 < m: new_time = current_time + max(1, 1 - grid[x][y + 1]) if new_time < time[x][y + 1]: time[x][y + 1] = new_time heapq.heappush(pq, (new_time, x, y + 1)) # Check down neighbor if x + 1 < n: new_time = current_time + max(1, 1 - grid[x + 1][y]) if new_time < time[x + 1][y]: time[x + 1][y] = new_time heapq.heappush(pq, (new_time, x + 1, y)) def min_travel_time(test_cases): results = [] for grid in test_cases: n = len(grid) m = len(grid[0]) results.append(dijkstra(grid, n, m)) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] idx = 1 for _ in range(t): n, m = map(int, input_lines[idx].split()) grid = [] for i in range(n): grid.append(list(map(int, input_lines[idx + 1 + i].split()))) test_cases.append(grid) idx += n + 1 return test_cases def main(input_str): test_cases = parse_input(input_str) results = min_travel_time(test_cases) for result in results: print(result)"},{"question":"**Archie loves trees and math. One day he found an interesting problem involving binary search trees (BST). He decided to solve it and needs your help to succeed.** Given an array of integer values, you need to construct the BST from the given array elements and find the sum of all nodes which are greater than or equal to a given integer ( k ). A BST is a tree in which every node follows these properties: - The left subtree of a node contains only values less than the node\'s value. - The right subtree of a node contains only values greater than the node\'s value. - Both the left and right subtrees must also be binary search trees. **Input** - The first line contains a single integer ( n ) (1 ≤ ( n ) ≤ ( 10^5 )), representing the number of elements in the array. - The second line contains ( n ) space-separated integers ( a_1, a_2, ..., a_n ) (1 ≤ ( a_i ) ≤ ( 10^9 )), representing the values of the elements in the array. - The third line contains an integer ( k ) (1 ≤ ( k ) ≤ ( 10^9 )), representing the threshold value. **Output** - Print a single integer, the sum of all the nodes in the BST which are greater than or equal to ( k ). **Example** Input: ``` 5 10 5 15 3 7 7 ``` Output: ``` 32 ``` **Explanation** Construct the BST from the array [10, 5, 15, 3, 7]: ``` 10 / 5 15 / 3 7 ``` The nodes with values greater than or equal to 7 are 10, 15, and 7. Their sum is 32.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def insert_into_bst(root, value): if root is None: return TreeNode(value) if value < root.value: root.left = insert_into_bst(root.left, value) else: root.right = insert_into_bst(root.right, value) return root def build_bst(arr): if not arr: return None root = TreeNode(arr[0]) for val in arr[1:]: insert_into_bst(root, val) return root def sum_of_nodes_greater_or_equal_to_k(root, k): if not root: return 0 if root.value < k: return sum_of_nodes_greater_or_equal_to_k(root.right, k) return root.value + sum_of_nodes_greater_or_equal_to_k(root.left, k) + sum_of_nodes_greater_or_equal_to_k(root.right, k) def solve(n, arr, k): bst = build_bst(arr) return sum_of_nodes_greater_or_equal_to_k(bst, k)"},{"question":"Given an array of integers, you need to find a contiguous subarray (containing at least one number) which has the largest sum and return both the sum and the starting and ending indices of this subarray. If there are multiple subarrays with the same maximum sum, return the one with the smallest starting index. If there are still ties, return the one with the smallest ending index. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000), the size of the array. The second line contains n space-separated integers ai (-1000 ≤ ai ≤ 1000), the elements of the array. Output Print three space-separated integers: the sum of the subarray, the starting index, and the ending index. Note that the indices are 0-based. Examples Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 3 6 Input 3 1 -3 2 Output 2 2 2 Explanation In the first example, the subarray with the largest sum is [4, -1, 2, 1], which starts at index 3 and ends at index 6, with a sum of 6. In the second example, the subarray with the largest sum is [2], which starts and ends at index 2, with a sum of 2.","solution":"def max_subarray_sum(arr): Returns the maximum subarray sum along with its starting and ending indices. n = len(arr) max_sum = float(\'-inf\') current_sum = 0 start = end = s = 0 for i in range(n): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = s end = i if current_sum < 0: current_sum = 0 s = i + 1 return max_sum, start, end"},{"question":"In a small town, there is a new social media app called \\"Friends Network.\\" The app has users and connections between them representing mutual friendship. Users are identified by unique IDs from 1 to n. Each user can have multiple friends but no user can be friends with themselves directly. A friendship path between two users is defined as a series of connections that starts from one user and ends at another. The path can pass through multiple friends, but each connection should be unique and can be traversed only once within the path. One of the core features of the \\"Friends Network\\" app is the Friend Path Counter. Given two users a and b, the feature calculates the number of unique friendship paths between them. However, clearly displaying all these paths is impractical; instead, the app simply returns the count of such paths. You are tasked to implement this feature. Specifically, given multiple pairs of users, determine the number of unique friendship paths for each pair. Input The first line contains two integers n and q (2 ≤ n ≤ 1000, 1 ≤ q ≤ 1000) — the number of users and the number of friend pairs to check. The next n - 1 lines contain two integers u and v (1 ≤ u, v ≤ n) — representing a mutual friendship between u and v. It is guaranteed that the friendship network is connected. The next q lines contain two integers a and b (1 ≤ a, b ≤ n) — representing the users for which the number of unique friendship paths needs to be found. Output Print q lines. In the i-th of these lines, print the number of unique friendship paths between users a and b for the i-th query. Examples Input 5 2 1 2 1 3 2 4 2 5 1 4 4 5 Output 1 1 Input 4 3 1 2 1 3 3 4 1 4 2 3 2 4 Output 1 1 1 Note In the first example, there is exactly one unique path between each pair of users, so the output for both queries is 1. In the second example, there is only one unique path existing between each queried pairs of users, hence the output is also 1 for all queries.","solution":"from collections import defaultdict def count_unique_paths(n, queries, friendships): def bfs_count_paths(start, end): queue = [(start, [start])] visited = set() while queue: (node, path) = queue.pop(0) if node == end: return 1 if node not in visited: visited.add(node) for neighbor in adjacency_list[node]: if neighbor not in path: queue.append((neighbor, path + [neighbor])) return 0 adjacency_list = defaultdict(list) for u, v in friendships: adjacency_list[u].append(v) adjacency_list[v].append(u) results = [] for a, b in queries: count = bfs_count_paths(a, b) results.append(count) return results"},{"question":"You are given two integers, m and n, and a string consisting of lowercase English letters as input. Write a program that prints the string if m multiplied by n is greater than or equal to 100, and prints `under` otherwise. Constraints * 1 leq m, n leq 50 * The string is of length between 1 and 15 (inclusive). * Each character of the string is a lowercase English letter. Input Input is given from Standard Input in the following format: m n string Output If m multiplied by n is greater than or equal to 100, print the string; otherwise, print `under`. Examples Input 10 10 excellent Output excellent Input 5 5 hello Output under Input 25 4 world Output under","solution":"def evaluate_string(m, n, string): Prints the string if m multiplied by n is greater than or equal to 100, and prints \'under\' otherwise. if m * n >= 100: print(string) else: print(\'under\')"},{"question":"A permutation of integers from 1 to n is a sequence that contains each number from 1 to n exactly once. For example, for n = 3, the permutations are [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1]. Given an integer n (1 ≤ n ≤ 10), write a program to generate all possible permutations of the integers from 1 to n and print them in lexicographic order, each permutation on a new line. **Input:** - Multiple inputs are given. Each input gives n (a positive integer) on one line. The input ends with 0. The number of inputs does not exceed 10. **Output:** - For each input, output all permutations of integers from 1 to n in lexicographic order, each on a new line. Print a blank line after the output for each input except the last one. # Example **Input:** ``` 3 2 0 ``` **Output:** ``` 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1 1 2 2 1 ``` Hint: You might find it helpful to use libraries or functions that handle permutations directly, such as the `itertools.permutations` function in Python.","solution":"import itertools def generate_permutations(n): Generates and returns all permutations of integers from 1 to n in lexicographic order. if n == 0: return [] permutations = itertools.permutations(range(1, n + 1)) result = [\\" \\".join(map(str, perm)) for perm in permutations] return result def handle_inputs(inputs): result = [] for n in inputs: if n == 0: break result.append(generate_permutations(n)) return result"},{"question":"Fiona loves gardening and has recently started documenting the growth of her plants. She takes pictures of her garden every day and notes the height of each plant in centimeters. However, she has a problem — she often forgets to take measurements on some days. As a result, her documentation has several missing values. To complete her documentation, Fiona decides to estimate the missing values based on the available data. The estimation should be done using linear interpolation between the known heights. That is, for a missing height at day `d`, she will estimate it using the formula: [ height_at_day_d = height_at_day_{start} + frac{(height_at_day_{end} - height_at_day_{start})}{(day_end - day_start)} times (d - day_start) ] where ( day_start ) and ( day_end ) are the closest days with known heights before and after day `d`, respectively. If the missing value is the first or the last element in the list, it should be filled with the closest known height. Write a function that takes an array representing the heights of the plants (with `-1` indicating a missing value) and returns an array with all values filled in. Input The first line contains a single integer `n` (1 ≤ `n` ≤ 10^5) — the number of days. The second line contains `n` space-separated integers representing the height of the plant each day. Missing values are represented by `-1`. Output Print `n` integers representing the height of the plant each day, with missing values filled in. Examples Input 5 3 -1 -1 7 8 Output 3 4 5 7 8 Input 6 -1 -1 5 10 -1 -1 Output 5 5 5 10 10 10","solution":"def fill_missing_heights(n, heights): Fills in the missing plant heights using linear interpolation. # Step 1: Find the first and last non-missing values first_known, last_known = None, None for i in range(n): if heights[i] != -1: first_known = i if first_known is None else first_known last_known = i # Step 2: Handle the beginning and end missing values if first_known is not None: # Ensure there is at least one known value for i in range(first_known): heights[i] = heights[first_known] for i in range(last_known + 1, n): heights[i] = heights[last_known] # Step 3: Linear interpolation for intermediate missing values i = 0 while i < n: if heights[i] == -1: # Found the gap start = i - 1 # Start from the previous known height while i < n and heights[i] == -1: i += 1 end = i # End at the next known height if i < n: for j in range(start + 1, end): heights[j] = heights[start] + ((heights[end] - heights[start]) * (j - start) // (end - start)) else: break else: i += 1 return heights # Example usage: # n = 5 # heights = [3, -1, -1, 7, 8] # print(fill_missing_heights(n, heights)) # Output: [3, 4, 5, 7, 8]"},{"question":"In a pandemic-free world, the inhabitants of Code-Earth love to celebrate their programming skills with coding challenges. As a result, there are numerous coding contests organized throughout the year. <br> Sara, an avid coder and a contest enthusiast, has n coding contests to choose from. Each contest i is scheduled on the si-th day and ends on the ei-th day of the year (1 ≤ si ≤ ei ≤ 365). Sara, being diligent, chooses to participate in those contests that do not overlap with each other. However, with so many contests around, Sara faces q queries about her maximum possible participation for different periods of the year. Given the start and end days of these periods, can you determine the maximum number of non-overlapping coding contests she can participate in within each period? <br> **Input:** The first line of input contains two integers, n and q (1 ≤ n, q ≤ 200,000), the number of contests and the number of queries respectively. The next n lines describe the contests. Specifically, the i-th line among these contains two integers si and ei (1 ≤ si ≤ ei ≤ 365), describing the start and end day of the i-th contest. The next q lines describe the queries. Each line contains two integers, ai and bi (1 ≤ ai ≤ bi ≤ 365), describing the period of the year for which the maximum number of non-overlapping contests needs to be determined. <br> **Output:** For each query, output a single integer on a line by itself, indicating the maximum number of non-overlapping contests within the given period. <br> **Example:** **Input:** ``` 5 3 10 20 15 25 30 40 35 45 50 60 10 45 20 40 1 365 ``` **Output:** ``` 2 1 3 ``` <br> **Explanation:** In the first query, among the contests that start on or after day 10 and end on or before day 45, the maximum number of non-overlapping contests are the ones from 10 to 20 and 30 to 40, yielding 2 contests. In the second query, among the contests that start on or after day 20 and end on or before day 40, the maximum number of non-overlapping contests is the one from 30 to 40, yielding 1 contest. In the third query, considering all contests in the year, the maximum number of non-overlapping contests are the ones from 10 to 20, 30 to 40, and 50 to 60, yielding 3 contests.","solution":"def max_non_overlapping_contests(n, q, contests, queries): Determines the maximum number of non-overlapping coding contests Sara can participate in for given periods. results = [] for a, b in queries: # Filter contests within the period [a, b] filtered_contests = [contest for contest in contests if contest[0] >= a and contest[1] <= b] # Sort contests by end date filtered_contests.sort(key=lambda x: x[1]) # Greedy algorithm to find maximum number of non-overlapping contests count = 0 last_end_time = -1 for start, end in filtered_contests: if start > last_end_time: count += 1 last_end_time = end results.append(count) return results"},{"question":"Grace loves playing with numbers. One day, she came across a sequence of operations involving the properties of prime numbers. She defined a transformation on an integer N, which involves the following steps: 1. Find all the prime numbers less than or equal to N. 2. Multiply these prime numbers together to get a new number P. 3. Multiply the digits of P together to get a single digit product D. Grace now wants to apply these transformations to multiple integers and see the results. Your task is to help her compute the final single digit product D for a series of given integers. Input First line of the input contains the number of test cases T. It is followed by T lines. Each line has a single integer N. Output For each test case, output a single number, the final single digit product D. Constraints 1 ≤ N ≤ 10^5 SAMPLE INPUT 3 10 15 7 SAMPLE OUTPUT 0 0 2 Note: - For N=10, the primes less than or equal to 10 are [2, 3, 5, 7]. Their product is 210. Multiplying the digits of 210 gives 2 (2 * 1 * 0 = 0). - For N=15, the primes less than or equal to 15 are [2, 3, 5, 7, 11, 13]. Their product is 30030. Multiplying the digits of 30030 gives 0 (3 * 0 * 0 * 3 * 0 = 0). - For N=7, the primes less than or equal to 7 are [2, 3, 5, 7]. Their product is 210. Multiplying the digits of 210 gives 2 (2 * 1 * 0 = 0).","solution":"def sieve_of_eratosthenes(max_num): Helper function that uses the Sieve of Eratosthenes to find all primes <= max_num is_prime = [True] * (max_num + 1) p = 2 while (p * p <= max_num): if (is_prime[p] == True): for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 prime_numbers = [p for p in range(2, max_num + 1) if is_prime[p]] return prime_numbers def multiply_digits(num): Helper function that multiplies all digits of a number until a single digit is obtained product = 1 for digit in str(num): product *= int(digit) while product >= 10: product = multiply_digits(product) return product def single_digit_prime_product(N): Function to find the single digit product of the product of all primes <= N primes = sieve_of_eratosthenes(N) product = 1 for prime in primes: product *= prime return multiply_digits(product) def process_input(test_cases): results = [] for N in test_cases: results.append(single_digit_prime_product(N)) return results"},{"question":"You are given a list of n integers, and your task is to perform a series of q range update operations on this list. Each range update operation consists of adding a specified value to all elements within a given subarray. Implement a function that, after performing all the operations, returns the updated list. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000) — the size of the list and the number of update operations. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000) — the initial elements of the list. Each of the next q lines contains three integers l, r, and v (1 ≤ l ≤ r ≤ n, -1000 ≤ v ≤ 1000) — denoting that v should be added to all elements from index l to r (inclusive). Output Output a single line containing the updated list after all the operations. Examples Input 5 3 1 2 3 4 5 1 3 2 2 4 -1 3 5 3 Output 3 3 7 6 8 Input 6 2 0 0 0 0 0 0 1 6 1 2 5 2 Output 1 3 3 3 3 1 Note In the first sample test case, the updates are as follows: - After the first operation: [3, 4, 5, 4, 5] - After the second operation: [3, 3, 4, 3, 5] - After the third operation: [3, 3, 7, 6, 8] In the second sample test case, the updates are as follows: - After the first operation: [1, 1, 1, 1, 1, 1] - After the second operation: [1, 3, 3, 3, 3, 1]","solution":"def range_update(n, q, arr, operations): for op in operations: l, r, v = op for i in range(l - 1, r): arr[i] += v return arr"},{"question":"A large university is planning the layout for its new campus, which is going to have several buildings connected by a series of roads. Each building and road is represented in the form of a graph where buildings are nodes and roads are edges. The university wants to ensure that the campus remains connected (i.e., there\'s a path between any pair of buildings), but at the same time, they want to minimize the total length of roads used. Given the number of buildings and a list of possible roads between them, where each road has a certain length, your task is to determine the minimum total length of roads required to keep the campus connected. Input The first line of the input contains two space-separated integers N and M, where N is the number of buildings and M is the number of possible roads between the buildings. The next M lines each contain three space-separated integers u, v, and w, indicating that there is a road between building u and building v with a length of w. Output Output a single integer denoting the minimum total length of roads required to keep the campus connected. Constraints 1 ≤ N ≤ 1000 1 ≤ M ≤ 10000 1 ≤ u, v ≤ N 1 ≤ w ≤ 10000 Example Input: 4 5 1 2 10 1 3 6 1 4 5 2 3 15 3 4 4 Output: 19 Explanation One possible way to connect all buildings while minimizing the total road length is to select roads with lengths 5, 4, and 10. This results in a minimum total length of 19. Any other combination would result in a higher total.","solution":"def minimum_total_road_length(N, M, roads): This function takes the number of buildings N, number of roads M, and a list of roads. Each road is represented by a tuple (u, v, w) where u and v are the buildings connected by the road and w is the length of the road. The function returns the minimum total length of roads required to keep the campus connected. parent = list(range(N)) # Function to find the representative of a set def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] # Function to union two sets def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX # Sort the roads by length roads.sort(key=lambda x: x[2]) total_length = 0 edges_used = 0 for u, v, w in roads: if find(u - 1) != find(v - 1): union(u - 1, v - 1) total_length += w edges_used += 1 if edges_used == N - 1: break return total_length # Helper function to parse input and call the main function def parse_and_solve(input_string): lines = input_string.strip().split(\'n\') N, M = map(int, lines[0].split()) roads = [] for line in lines[1:]: u, v, w = map(int, line.split()) roads.append((u, v, w)) return minimum_total_road_length(N, M, roads)"},{"question":"In a factory, cakes are packaged in boxes with a specific number of cakes per box. However, the packaging system is facing some logistical issues due to the varying production rates and packaging demands. You are tasked to write a program to determine the number of full boxes of cakes that can be shipped, given the number of cakes produced and the packaging size for each request that comes in. Input The input is a sequence of datasets. Each dataset corresponds to a single request and has the following format: CakesPerBox CakesProduced CakesPerBox is an integer representing the number of cakes that fit into one box. CakesProduced is an integer representing the total number of cakes produced for that request. The input is terminated by a line with “0 0”. This is not part of any dataset and thus should not be processed. Output For each dataset, print the number of full boxes of cakes that can be shipped, in a line by itself. No extra character or whitespace should appear in the output. Examples Input 10 55 20 92 15 45 0 0 Output 5 4 3 Input 8 64 12 99 7 80 0 0 Output 8 8 11","solution":"def calculate_full_boxes(datasets): results = [] for dataset in datasets: cakes_per_box, cakes_produced = dataset if cakes_per_box == 0 and cakes_produced == 0: break full_boxes = cakes_produced // cakes_per_box results.append(full_boxes) return results"},{"question":"You are managing a growing multiplayer online game where players can form guilds with certain rules. One of the most important elements in the game is the social network of these players, which is represented as an undirected graph where each node is a player and each edge is a friendship between two players. However, to maintain the stability of the network, no guild can have a subgraph with cycles of length 4 or more. Given `n` players and `m` friendships, your task is to determine whether it is possible to divide the players into two guilds such that the no-guild-cycle condition holds true for both guilds. If it is possible, output \\"YES\\" and two lines of the players in each guild. If it is not possible to divide the players in this way, output \\"NO\\". Input The first line contains two integers `n` and `m` (1 ≤ `n` ≤ 1000, 0 ≤ `m` ≤ 2500), representing the number of players and the number of friendships, respectively. The next `m` lines each contain two integers `u` and `v` (1 ≤ `u, v` ≤ `n`, `u ≠ v`), indicating that players `u` and `v` are friends. Output If the division is possible, output \\"YES\\" in the first line. In the second line, output the list of players in the first guild. In the third line, output the list of players in the second guild. If the division is not possible, output \\"NO\\". Examples Input 4 3 1 2 2 3 3 4 Output YES 1 3 2 4 Input 4 5 1 2 2 3 3 1 3 4 4 1 Output NO","solution":"def divide_guilds(n, m, friends): from collections import defaultdict, deque # Create adjacency list for the graph adj = defaultdict(list) for u, v in friends: adj[u].append(v) adj[v].append(u) color = {} def bfs(start): queue = deque([start]) color[start] = 0 # Start coloring with 0 while queue: node = queue.popleft() for neighbor in adj[node]: if neighbor not in color: color[neighbor] = 1 - color[node] # Adjacent nodes should have different colors queue.append(neighbor) elif color[neighbor] == color[node]: return False return True # Check each component of the graph for i in range(1, n+1): if i not in color: # If node i is not colored, it means it is not visited yet if not bfs(i): return \\"NO\\" guild1 = [player for player in range(1, n+1) if color[player] == 0] guild2 = [player for player in range(1, n+1) if color[player] == 1] return f\\"YESn{\' \'.join(map(str, guild1))}n{\' \'.join(map(str, guild2))}\\""},{"question":"You are given a 2D grid of size M x N represented by an array where each element is either a 0 or a 1. Your task is to determine the number of distinct islands in the grid. An island is a group of connected 1s (connected horizontally or vertically). Two islands are considered distinct if and only if their shapes are different (i.e., they are not the same if rotated or translated). # Constraints * 1 <= M, N <= 1000 * The grid contains only 0s and 1s. # Input Input is given from Standard Input in the following format: ``` M N grid ``` Where `M` and `N` are the dimensions of the grid, followed by M lines each containing N integers (either 0 or 1). # Output Print a single integer representing the number of distinct islands in the grid. # Examples Example 1 **Input:** ``` 4 5 1 1 0 0 0 1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 ``` **Output:** ``` 2 ``` Example 2 **Input:** ``` 3 3 1 1 0 1 0 0 0 0 1 ``` **Output:** ``` 2 ``` Example 3 **Input:** ``` 3 3 1 1 1 1 0 1 1 1 1 ``` **Output:** ``` 1 ``` Note that Example 1 has two distinct islands: - One on the top left corner consisting of three consecutive 1s. - Another that appears twice: once in the middle towards the right and another one diagonally adjacent below it. Although they seem separate, they together make up a single distinct island shape.","solution":"def numDistinctIslands(grid): def dfs(x, y, base_x, base_y): stack = [(x, y)] island = [] while stack: i, j = stack.pop() if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and grid[i][j] == 1: grid[i][j] = -1 island.append((i - base_x, j - base_y)) stack.extend([(i-1, j), (i+1, j), (i, j-1), (i, j+1)]) return tuple(island) islands = set() for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: new_island = dfs(i, j, i, j) islands.add(new_island) return len(islands) # Helper function to convert input into the required format def parse_input(input_str): lines = input_str.strip().split(\'n\') M, N = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return grid"},{"question":"You are developing a software that tracks the temperature in several cities. You need to write a program that processes the temperature data and identifies the city with the highest average temperature over a period of time. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of cities. The second line contains an integer m (1 ≤ m ≤ 365), the number of days for which the temperature data is provided. Each of the next n lines contains the name of a city (string without spaces, at most 100 characters) followed by m integers representing the temperatures for each day. Output Print the name of the city with the highest average temperature. In case of a tie, print the city which appears first in the input. Examples Input 3 2 CityA 30 25 CityB 20 30 CityC 25 25 Output CityA Input 2 3 CityA 20 30 40 CityB 30 20 40 Output CityA","solution":"def city_with_highest_average_temperature(n, m, data): Returns the name of the city with the highest average temperature. Parameters: n (int): Number of cities m (int): Number of days for which temperature data is provided data (list): List of strings with each string containing city name followed by m temperatures Returns: str: The name of the city with the highest average temperature max_avg_temp = -float(\'inf\') city_with_max_avg_temp = \\"\\" for entry in data: parts = entry.split() city = parts[0] temperatures = list(map(int, parts[1:])) avg_temp = sum(temperatures) / m if avg_temp > max_avg_temp: max_avg_temp = avg_temp city_with_max_avg_temp = city return city_with_max_avg_temp"},{"question":"Write a function that takes a string containing only lowercase alphabetical characters and returns the length of the longest substring without repeating characters. Input A single string (1 ≤ |s| ≤ 100). The string consists only of lowercase alphabetical characters. Output Print the length of the longest substring with all unique characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3","solution":"def longest_unique_substtr(s): Returns the length of the longest substring with all unique characters. n = len(s) result = 0 char_index = {} start = 0 for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end result = max(result, end - start + 1) return result"},{"question":"Alice and Bob are playing a game with a string S consisting of lowercase English letters. The game is played with the following rules: 1. Alice and Bob take turns to play. Alice goes first. 2. In each turn, the player must choose a non-empty substring of S that appears more than once in the current string, and remove this substring from one of its occurrences in the string. 3. If a player cannot make a move, they lose the game. Both players play optimally. Determine who will win the game. Constraints: * 1 ≤ |S| ≤ 10^5 Input The input is given from Standard Input in the following format: S Output If Alice will win, print `Alice`. If Bob will win, print `Bob`. Examples Input ababa Output Alice Input abcde Output Bob Input aaabaaa Output Alice","solution":"def determine_winner(S): Determines the winner of the game between Alice and Bob based on the string S. Parameters: S (str): The input string consisting of lowercase English letters. Returns: str: The winner of the game (\\"Alice\\" or \\"Bob\\"). # To find repeated substrings we can use a set seen = set() for i in range(len(S)): for j in range(i + 1, len(S) + 1): substring = S[i:j] if substring in seen: return \\"Alice\\" seen.add(substring) return \\"Bob\\""},{"question":"Ted is feeling nostalgic and decided to recreate his favorite childhood game with a slight twist. The game involves arranging tiles each labeled with a number 1 through n, in a sequence. To make it more interesting, Ted came up with the following rules: * The tiles should follow a sequence where no three consecutive tiles should have the same number. * Each number from 1 to n must be used at least once. Help Ted generate such a sequence of tiles of length m. If there are multiple correct sequences, you can print any one of them. It is guaranteed that the answer always exists under the given constraints. Input The input consists of several test cases. The first line contains the number of test cases t (1 ≤ t ≤ 50). The following t lines each contain two integers m and n (1 ≤ n ≤ m ≤ 1000) — the required length of the sequence of tiles and the highest number on the tiles, respectively. Output For each test case, print any sequence of tiles that satisfies the conditions from the problem statement. Example Input 3 4 2 10 3 7 2 Output 1 2 1 2 1 2 3 1 2 3 1 2 3 1 1 2 1 2 1 2 1 Note In the first test case, the sequence 1 2 1 2 ensures that no three consecutive tiles are the same, and both numbers 1 and 2 are used. In the second test case, the sequence 1 2 3 1 2 3 1 2 3 1 ensures that no three consecutive tiles are the same, and all numbers from 1 to 3 are used. In the third test case, the sequence 1 2 1 2 1 2 1 satisfies both conditions.","solution":"def generate_tiles_sequence(t, test_cases): results = [] for m, n in test_cases: sequence = [] for i in range(m): sequence.append((i % n) + 1) results.append(\\" \\".join(map(str, sequence))) return results # For example purposes, to display the output for input: # t = 3 # test_cases = [(4, 2), (10, 3), (7, 2)] # result = generate_tiles_sequence(t, test_cases) # for seq in result: # print(seq)"},{"question":"After completing his fascinating book collection, John decides to organize them by category in his digital library. Each book belongs to a single category such as Fiction, Science, History, etc. John receives new books regularly, so he needs a program to keep track of the number of books in each category and list the categories by the number of books they contain. Your task is to help John create a program that reads the book categories from input and prepares a sorted list of categories based on the number of books in each category. Input Format: The first line contains the number of entries in the list. The next line contains space-separated entries, each denoting the category of a book. Output Format: Output the sorted list of categories as \\"category number_of_books\\" in decreasing order of the number_of_books. In case of a tie, order the categories alphabetically. Constraints: 1 ≤ Number of entries ≤ 100 SAMPLE INPUT 8 Fiction Science Fiction History Science Romance Fiction Science History SAMPLE OUTPUT Fiction 3 Science 3 History 2 Romance 1","solution":"def organize_books(n, categories): Organizes books by category and prepares a sorted list. Parameters: n (int): Number of entries in the list. categories (list of str): List of categories. Returns: list of tuple: Sorted list of categories based on the number of books. from collections import Counter # Count the number of books in each category category_counts = Counter(categories) # Sort the categories based on the number of books (descending) and then alphabetically sorted_categories = sorted(category_counts.items(), key=lambda x: (-x[1], x[0])) return sorted_categories def format_output(sorted_categories): Format the output to the required string format. Parameters: sorted_categories (list of tuple): Sorted list of categories based on the number of books. Returns: list of str: Formatted output list where each item is a string \\"category number_of_books\\". return [f\\"{category} {count}\\" for category, count in sorted_categories]"},{"question":"John is a photographer who loves to take panoramic photos. However, he can only take a maximum number of photos per day due to battery constraints. Each photo has a certain beauty value, and John wants to maximize the sum of beauty values of the photos taken in a day. Given the total number of photos he can take and their respective beauty values, help John select a subset of photos to maximize the total beauty value without exceeding the maximum number he can take. Assume that if John decides to take a photo, it must be completely taken (i.e., partial photos are not allowed). Input Specifications: - The first line contains the number of test cases T. - Each test case consists of two lines. - The first line contains two integers N and M, where N is the total number of photos and M is the maximum number of photos John can take. - The second line contains N space-separated integers representing the beauty values of the photos. Output: For each test case, output a single line containing the maximum sum of beauty values John can achieve by taking up to M photos. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N, M ≤ 10^5 - 1 ≤ beauty value ≤ 10^6 SAMPLE INPUT 5 5 3 100 200 300 400 500 4 4 50 50 50 50 3 1 10 20 30 6 2 5 1 3 6 2 8 2 1 1000 2000 SAMPLE OUTPUT 1200 200 30 14 2000 Explanation: For the first test case, John can take the three photos with the highest beauty values, which are 300, 400, and 500, resulting in a total beauty value of 1200. For the second test case, John can take all four photos, resulting in a total beauty value of 50 x 4 = 200. For the third test case, John can only take one photo, and he should choose the one with the highest beauty value, which is 30. For the fourth test case, John can take the two photos with the highest beauty values, which are 8 and 6, resulting in a total beauty value of 14. For the fifth test case, John can take only one photo, and he should choose the one with the highest beauty value, which is 2000.","solution":"def maximize_beauty(T, test_cases): results = [] for t in range(T): N, M = test_cases[t][0] beauty_values = test_cases[t][1] beauty_values.sort(reverse=True) results.append(sum(beauty_values[:M])) return results"},{"question":"Natasha likes to eat candies and recently got interested in counting the special properties of her candy packets. A candy packet is considered special if the sum of the weights of two packets equals the sum of the weights of two other (different) packets that she has. You are given the weights of `n` candy packets Natasha has. Determine if there exists at least one quadruplet (i,j,k,l) such that the sum of the weights of packets at indices i, j equals the sum of the weights of packets at indices k, l and (i, j) is not (k, l). Input The first line contains an integer `t` (1 ≤ t ≤ 1000) — the number of test cases in the input. For each test case: - The first line contains an integer `n` (2 ≤ n ≤ 100) — the number of candy packets Natasha has. - The second line contains `n` space-separated integers w_1, w_2, …, w_n (1 ≤ w_i ≤ 1000) — the weights of the candy packets. Output Print t answers, each of which is a string \\"YES\\" (in the case of a positive answer) or \\"NO\\" (in the case of a negative answer). The letters in the words can be printed in any case (upper or lower). Example Input 2 4 1 3 2 4 5 1 5 5 1 1 Output YES YES","solution":"def check_special_candy_packets(t, test_cases): results = [] for case in test_cases: n, weights = case sums = {} found = False for i in range(n): for j in range(i + 1, n): s = weights[i] + weights[j] if s in sums: sums[s].append((i, j)) if len(sums[s]) > 1: results.append(\\"YES\\") found = True break else: sums[s] = [(i, j)] if found: break if not found: results.append(\\"NO\\") return results # Reading input values def process_input(input_data): lines = input_data.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) weights = list(map(int, lines[index + 1].split())) test_cases.append((n, weights)) index += 2 return t, test_cases"},{"question":"In a sprawling forest, there are n trees, each with a distinct height ranging from 1 to n meters. A lumberjack wants to chop down some of the trees to create a straight path from the start to the end of the forest. The rule for creating this path is to ensure that the heights of the remaining trees form a strictly increasing sequence as you move from the start to the end of the forest. The remaining trees should retain their original positions. You need to determine the minimum number of trees the lumberjack has to chop down to achieve this strictly increasing path. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of trees in the forest. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the heights of the trees in the order they appear in the forest. Output Print the single integer, which is the minimum number of trees that need to be chopped down to create a strictly increasing sequence from the start to the end of the forest. Examples Input 7 4 2 3 6 5 1 7 Output 3 Input 5 1 2 3 4 5 Output 0 Input 6 6 5 4 3 2 1 Output 5 Note In the first example, chopping down the trees with heights [4, 5, 1] or [4, 6, 1] or any other valid combination results in the sequence [2, 3, 6, 7] which is strictly increasing. In the second example, the sequence is already strictly increasing, so no trees need to be chopped down. In the third example, the lumberjack has to chop down all but one tree to achieve a strictly increasing sequence, as all trees are in decreasing order.","solution":"def find_min_trees_to_cut(n, heights): from bisect import bisect_left if n == 0: return 0 # \'lis\' keeps our longest increasing subsequence lis = [] for height in heights: pos = bisect_left(lis, height) # If pos is at the end of lis, expand it if pos == len(lis): lis.append(height) # Otherwise replace the existing element else: lis[pos] = height # The minimum trees to cut is the difference between total trees and the length of LIS return n - len(lis)"},{"question":"Given an array of integers, we define the \\"jump game\\" as follows: You are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine the minimum number of jumps required to reach the last index. Example: Given array `arr = [2, 3, 1, 1, 4]`, the minimum number of jumps to reach the last index is `2`. (Jump 1 step from index 0 to 1, then 3 steps to the last index). Input The first line of input contains a single integer `t` (1 ≤ t ≤ 100), representing the number of test cases. Each test case consists of two lines: the first line contains a single integer `n` (1 ≤ n ≤ 10^5) – the number of elements in the array, and the second line contains `n` space-separated integers representing the array elements `arr_i` (0 ≤ arr_i ≤ 10^5). Output Print `t` lines. The `i-th` line should contain the minimum number of jumps required to reach the last index for the `i-th` test case, or `-1` if it is not possible to reach the last index. Example Input 3 5 2 3 1 1 4 6 1 2 3 4 5 6 1 0 Output 2 3 0 Explanation - In the first case, the array is `[2, 3, 1, 1, 4]`. We jump 1 step from index 0 to 1, then 3 steps to the last index. Total 2 jumps. - In the second case, the array is `[1, 2, 3, 4, 5, 6]`. We can make minimum jumps as follows: index 0 to 1, index 1 to 3, and then directly to the last index which is index 5. - In the third case, the array is `[0]`, we start and end at the same point, so 0 jumps required.","solution":"def min_jumps_to_reach_end(arr): n = len(arr) if n <= 1: return 0 if arr[0] == 0: return -1 max_reach = arr[0] step = arr[0] jumps = 1 for i in range(1, n): if i == n-1: return jumps max_reach = max(max_reach, i + arr[i]) step -= 1 if step == 0: jumps += 1 if i >= max_reach: return -1 step = max_reach - i return -1 def solve(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(min_jumps_to_reach_end(arr)) return results"},{"question":"A zoo is hosting a \\"Champion Animal\\" contest, where each animal tries to outperform its neighbors. Every animal has a strength value, and they can challenge their immediate left or right neighbor. Here is how the contest works: 1. Initially, each animal has a strength represented as an integer in a sequence. 2. Two consecutive animals, namely ai and ai+1 (1 ≤ i < n), can engage in a battle. The winner\'s strength increases by the loser\'s strength, and the loser\'s strength becomes zero. 3. An animal can only battle if its strength is greater than zero. 4. Your task is to make the strongest animal possible, attempting to distribute battles to maximize one animal\'s strength. The contest completes when no further battles are possible, i.e., there are no consecutive pairs where both animals have non-zero strength. Input The first line contains an integer n (2 ≤ n ≤ 2·105). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) representing the strength values of the animals. Output The output should be a single integer representing the maximum possible strength for a single animal after performing all possible battles. Examples Input 5 2 3 1 6 4 Output 16 Input 4 5 5 5 5 Output 20 Note In the first sample, an optimal series of battles could be: - Animal 4 (strength 6) beats animal 3 (strength 1), resulting strength of 7. - Animal 2 (strength 3) beats animal 1 (strength 2), resulting strength of 5. - Animal 4 (strength 7) beats animal 5 (strength 4), resulting strength of 11. - Animal 4 (strength 11) beats animal 2 (strength 5), resulting strength of 16. In the second sample, any optimal series of battles among the four animals will end up with one animal having all the strengths (5+5+5+5 = 20).","solution":"def maximize_animal_strength(n, strengths): Returns the maximum possible strength of a single animal after performing all possible battles. # As the goal is to maximize one animal\'s strength, let\'s consider consolidating all strengths towards a single position. max_strength = max(strengths) total_strength = sum(strengths) return total_strength"},{"question":"You are given an array of integers, and you need to find a contiguous subarray within it which has the largest sum. Write a function `maxSubArraySum` which takes an array of integers as input and returns the sum of the contiguous subarray with the largest sum. Input: - An array of integers `arr` where `1 <= len(arr) <= 10^3` and `-10^4 <= arr[i] <= 10^4` Output: - An integer representing the maximum sum of the contiguous subarray. Examples: Input: ``` [-2, 1, -3, 4, -1, 2, 1, -5, 4] ``` Output: ``` 6 ``` Explanation: The contiguous subarray `[4, -1, 2, 1]` has the largest sum = 6. Input: ``` [1] ``` Output: ``` 1 ``` Explanation: The only subarray is the array itself, with sum = 1. Input: ``` [5, -2, 3, -1, 6, -2, 1] ``` Output: ``` 11 ``` Explanation: The contiguous subarray `[5, -2, 3, -1, 6]` has the largest sum = 11.","solution":"def maxSubArraySum(arr): Returns the sum of the contiguous subarray with the largest sum. Uses Kadane\'s algorithm for finding the maximum sum subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a multiset of integers and your task is to determine the number of distinct values it can be reduced to after performing the following operation any number of times: choose any two integers a and b (a != b), remove both, and insert the integer gcd(a, b). For example, if the multiset is {12, 15, 6}, you can perform the following operations: - Choose 12 and 15, gcd(12, 15) = 3, so the multiset becomes {3, 6, 3}. - Choose 3 and 6, gcd(3, 6) = 3, so the multiset becomes {3, 3}. Once all possible operations are performed, you need to determine the number of distinct integers left in the multiset. # Input - The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. - Each of the next t lines contains an integer n (1 ≤ n ≤ 100) — the number of elements in the multiset. - The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the multiset. # Output - For each test case, print a single integer — the number of distinct integers that the multiset can be reduced to. # Example Input ``` 3 3 12 15 6 4 7 5 3 9 2 10 15 ``` Output ``` 1 1 1 ``` # Note In the first test case, starting with the multiset {12, 15, 6}: - gcd(12, 15) = 3, leads to {3, 6, 3} - gcd(3, 6) = 3, leads to {3, 3} The final set only contains the number 3, which is 1 distinct value. In the second test case, starting with the multiset {7, 5, 3, 9}: - gcd(7, 5) = 1, leads to {3, 9, 1} - gcd(3, 9) = 3, leads to {3, 1} - gcd(3, 1) = 1, leads to {1, 1} The final set only contains the number 1, which is 1 distinct value. In the third test case, starting with the multiset {10, 15}: - gcd(10, 15) = 5, leads to {5} The final set only contains the number 5, which is 1 distinct value.","solution":"from math import gcd from functools import reduce def num_distinct_values(t, test_cases): Returns the number of distinct integers that the multiset can be reduced to after operations. results = [] for n, elements in test_cases: overall_gcd = reduce(gcd, elements) results.append(len({overall_gcd})) return results"},{"question":"You are given a number of rooms in a hotel and the maximum capacity of each room. Your task is to assign guests to the rooms such that the maximum number of rooms are occupied without exceeding the capacity of any room. Additionally, each guest group must be assigned to a single room. The input will be: The first line contains an integer M, the number of rooms. The second line contains M integers representing the capacity of each room. The third line contains an integer G, the number of guest groups. The fourth line contains G integers representing the size of each guest group. Output the maximum number of rooms that can be occupied. Note: - A room is considered occupied if it has at least one guest. - Each guest group must be assigned to a single room without splitting across multiple rooms. - If there are multiple ways to achieve the maximum number of occupied rooms, you can return any valid configuration. SAMPLE INPUT 5 3 5 2 7 6 4 4 3 2 5 SAMPLE OUTPUT 4 Explanation: - One possible assignment is: - Room 1 (capacity 3): Guest group of size 3 - Room 2 (capacity 5): Guest group of size 5 - Room 3 (capacity 2): Guest group of size 2 - Room 4 (capacity 7): Guest group of size 4 - Room 5 remains unoccupied. - Four rooms are occupied, which is the maximum possible for this input.","solution":"def max_occupied_rooms(M, room_capacities, G, guest_groups): Returns the maximum number of rooms that can be occupied without exceeding capacity. :param M: Integer, number of rooms :param room_capacities: List of integers, capacities of each room :param G: Integer, number of guest groups :param guest_groups: List of integers, size of each guest group :return: Integer, maximum number of occupied rooms # Sort room capacities and guest groups room_capacities.sort() guest_groups.sort() # Initialize pointers and count of occupied rooms room_idx = 0 guest_idx = 0 occupied_count = 0 # Try to accommodate each guest group while room_idx < M and guest_idx < G: if guest_groups[guest_idx] <= room_capacities[room_idx]: occupied_count += 1 guest_idx += 1 room_idx += 1 return occupied_count"},{"question":"Alice loves gardening and she has a special interest in arranging flowers in rows. She has a collection of flowers, and each flower is either a rose or a tulip. She would like to arrange the flowers in a row such that no two tulips are adjacent to each other. Given the number of roses and tulips, return the total number of distinct arrangements possible. Input The input consists of a single line with two space-separated integers, r and t (0 ≤ r, t ≤ 105), where r is the number of roses and t is the number of tulips. Output Output on a single line the total number of distinct arrangements possible. Examples Input 3 2 Output 4 Input 5 0 Output 1 Input 0 4 Output 0","solution":"def count_arrangements(r, t): if t == 0: return 1 if r < t - 1: return 0 if r == t: return r + 1 return r - t + 1 # Example usage: # print(count_arrangements(3, 2)) # Output: 4"},{"question":"You are participating in a contest to collect pinecones in a forest. You have a basket that can hold a certain number of pinecones, and there are multiple checkpoints where you can pick up pinecones along a trail. Given the capacity of your basket and the number of pinecones at each checkpoint, write a program to determine how many pinecones you will actually collect, considering your basket\'s capacity. Input The input is given in the following format: c n p_1 p_2 ... p_n Here, c (1 ≤ c ≤ 100) represents the basket\'s capacity, and n (1 ≤ n ≤ 100) represents the number of checkpoints. Following this, there are n integers (p_1, p_2, ..., p_n), each representing the number of pinecones available at each checkpoint. Output Output a single integer representing the total number of pinecones collected, which should not exceed the basket\'s capacity. Examples Input: 10 5 3 4 2 3 1 Output: 10 Input: 5 3 2 3 4 Output: 5 Input: 15 4 5 6 4 2 Output: 15","solution":"def collect_pinecones(c, n, pinecones): Determines the total number of pinecones collected without exceeding basket capacity. Parameters: c (int): Capacity of the basket. n (int): Number of checkpoints. pinecones (list): List of pinecones at each checkpoint. Returns: int: Total number of pinecones collected. total_collected = 0 for p in pinecones: if total_collected + p <= c: total_collected += p else: total_collected = c break return total_collected"},{"question":"John is playing a card game where he has a deck of n unique cards labeled from 1 to n. Each card also has a unique rank from 1 to n. In this game, John wants to find the longest subsequence of cards from his deck that is in strictly increasing rank order. Your task is to help John by writing a program that finds the length of this longest increasing subsequence of card ranks. # Input - The first line contains an integer n (1 ≤ n ≤ 105) — the number of cards. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ n) — the ranks of the cards in the order they appear in the deck. # Output - Output a single integer — the length of the longest strictly increasing subsequence. # Examples Example 1 Input: ``` 6 5 1 3 6 2 4 ``` Output: ``` 3 ``` Explanation: One of the longest increasing subsequences is [1, 3, 6]. Example 2 Input: ``` 5 5 4 3 2 1 ``` Output: ``` 1 ``` Explanation: No strictly increasing subsequence exists other than individual cards. # Note In the first example, there are multiple possible increasing subsequences (1, 3, 6), (1, 2, 4), etc., but the length of the longest one is 3. In the second example, all card ranks are in descending order, so the longest increasing subsequence can only be a single card.","solution":"def longest_increasing_subsequence(cards): from bisect import bisect_left if not cards: return 0 lis = [] for card in cards: pos = bisect_left(lis, card) if pos == len(lis): lis.append(card) else: lis[pos] = card return len(lis)"},{"question":"A company has a network of N servers connected by M bidirectional links. Each link has an associated latency which represents the time taken to travel between two servers. The company\'s goal is to ensure that data can be transferred between any pair of servers in the minimum possible time. Provide a plan to calculate the minimum latency required to connect all servers such that the data transfer can happen optimally. Input: The first line contains two integers N and M, the number of servers and links, respectively. The next M lines contain three integers each - u, v, and w, where u and v are the servers connected by a link and w is the latency of that link. Output: Output a single integer, the minimum total latency required to connect all servers. If it is not possible to connect all servers, print -1. Constraints: 1 ≤ N ≤ 10^5 0 ≤ M ≤ 2×10^5 1 ≤ u, v ≤ N 1 ≤ w ≤ 10^6 SAMPLE INPUT 4 5 1 2 3 2 3 4 3 4 5 1 4 10 1 3 6 SAMPLE OUTPUT 12","solution":"def find(parent, node): if parent[node] == node: return node parent[node] = find(parent, parent[node]) return parent[node] def union(parent, rank, node1, node2): root1 = find(parent, node1) root2 = find(parent, node2) if root1 != root2: if rank[root1] > rank[root2]: parent[root2] = root1 elif rank[root1] < rank[root2]: parent[root1] = root2 else: parent[root2] = root1 rank[root1] += 1 def minimum_latency_to_connect_servers(N, M, connections): if M < N - 1: # Not enough edges to connect all servers return -1 connections.sort(key=lambda x: x[2]) parent = list(range(N + 1)) rank = [0] * (N + 1) total_latency = 0 num_edges_used = 0 for u, v, w in connections: if find(parent, u) != find(parent, v): union(parent, rank, u, v) total_latency += w num_edges_used += 1 if num_edges_used == N - 1: return total_latency return -1 # If we can\'t connect all servers def solve(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) connections = [] index = 2 for _ in range(M): u = int(data[index]) v = int(data[index+1]) w = int(data[index+2]) connections.append((u, v, w)) index += 3 result = minimum_latency_to_connect_servers(N, M, connections) print(result)"},{"question":"In a kingdom, there is a strange tradition of constructing a \\"Lucky String\\" for royal ceremonies. A Lucky String is defined as a string of lowercase English letters where no two adjacent letters are the same (i.e., no two consecutive letters in the string are identical). Given an integer n, you have to construct the lexicographically smallest Lucky String of length n. If it is not possible to construct such a string, you should output \\"Not possible\\". Input The first line of the input contains a positive integer n (1 ≤ n ≤ 100) — the length of the desired Lucky String. Output Output a single line - the lexicographically smallest Lucky String of length n. If such a string is impossible to construct, output \\"Not possible\\". Examples Input 3 Output aba Input 1 Output a Input 2 Output ab Input 101 Output Not possible","solution":"def lucky_string(n): Constructs the lexicographically smallest Lucky String of length n. A Lucky String is defined as a string of lowercase English letters where no two adjacent letters are the same. if n > 100: return \\"Not possible\\" # We will use only the first 2 alphabets (\'a\' and \'b\') to ensure minimal lexicographical order alphabet = [\'a\', \'b\'] lucky_str = \\"\\" for i in range(n): lucky_str += alphabet[i % 2] return lucky_str"},{"question":"Alex is a fan of puzzles, and he loves playing with sequences of numbers. He recently found a curious sequence that follows a specific pattern and wants to explore it further. The sequence is defined as follows: - The first number is always 1. - The second number is always 2. - For every number in an odd position (i.e., 1st, 3rd, 5th, ...), the number is the sum of the two preceding numbers. - For every number in an even position (i.e., 2nd, 4th, 6th, ...), the number is the absolute difference of the two preceding numbers. Given an integer n, your task is to generate the first n numbers of this sequence and print them. Input The input consists of a single line containing the integer n (1 ≤ n ≤ 100) — the length of the sequence. Output Print the first n numbers of the sequence in a single line, separated by spaces. Examples Input 5 Output 1 2 3 1 4 Input 10 Output 1 2 3 1 4 3 7 4 11 7 Note For n=5, the sequence is calculated as follows: - 1 (first number, odd position) - 2 (second number, even position) - 3 (sum of 1 and 2, odd position) - 1 (absolute difference of 2 and 3, even position) - 4 (sum of 3 and 1, odd position) For n=10, the sequence continues similarly with the given rules.","solution":"def generate_sequence(n): Generates the first n numbers of the sequence based on the given rules. if n == 0: return [] sequence = [1, 2] for i in range(2, n): if (i + 1) % 2 != 0: # Odd position new_value = sequence[-1] + sequence[-2] else: # Even position new_value = abs(sequence[-1] - sequence[-2]) sequence.append(new_value) return sequence[:n]"},{"question":"You are participating in a coding assessment where you are tasked with solving interesting problems. One of the problems presented is called \\"Balanced Strings\\". A string is considered balanced if it has the same number of \'a\'s and \'b\'s. Given a string containing only characters \'a\' and \'b\', your job is to determine the length of the longest balanced substring. A balanced substring is defined as a contiguous sequence of characters in the given string that contains an equal number of \'a\'s and \'b\'s. Input The input starts with a single positive integer t in its own line, which represents the number of test cases (1 ≤ t ≤ 10). Each test case consists of a single line containing a string s, where each character in s is either \'a\' or \'b\' (1 ≤ |s| ≤ 106). Output For each test case, print the length of the longest balanced substring. If no balanced substring exists, print 0. Examples Input 3 aababb abababaaa aaabbb Output 6 6 6 In the first test case, \\"aababb\\" has a balanced substring of length 6 (the entire string). In the second test case, \\"abababaaa\\" has a balanced substring of length 6 (\\"ababab\\"). In the third test case, \\"aaabbb\\" has a balanced substring of length 6 (the entire string).","solution":"def longest_balanced_substring(s): Function to find the length of the longest balanced substring. max_length = 0 # Dictionary to store the first occurrence of a balance factor balance_index = {0: -1} # Initialize balance factor (net number of a\'s minus number of b\'s) balance = 0 for i, char in enumerate(s): if char == \'a\': balance += 1 else: balance -= 1 if balance in balance_index: max_length = max(max_length, i - balance_index[balance]) else: balance_index[balance] = i return max_length def process_test_cases(t, test_cases): results = [] for i in range(t): results.append(longest_balanced_substring(test_cases[i])) return results"},{"question":"You are given a list of flights between different cities. Each flight is represented as a tuple of two cities and the duration of the flight in minutes. Your task is to determine the shortest time to travel from a specified starting city to a destination city. If no such route exists, return -1. Input - The first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of flights. - Each of the next n lines contains three space-separated values: a string u (1 ≤ |u| ≤ 20), a string v (1 ≤ |v| ≤ 20), and an integer t (1 ≤ t ≤ 10^6), representing a flight from city u to city v with duration t. - The last line contains two space-separated strings, representing the starting city and the destination city respectively. Output Output a single integer representing the shortest time to travel from the starting city to the destination city. If no route exists, output -1. Example Input 7 A B 10 A C 20 B C 5 C D 15 B D 25 D E 10 E F 35 A F Output 55 Explanation One possible route from city A to city F is A -> B -> C -> D -> E -> F with durations respectively 10, 5, 15, 10, 35 summing up to 75. However, this is not the shortest route. The shortest route from city A to city F in this example is directly through A -> B -> C -> D -> E -> F with the total duration of 55. Note - The cities are represented uniquely by their string names. - There might be multiple flights between the same pair of cities with different durations. - Assume all cities have at least one flight to another city. This question tests your understanding of graph traversal algorithms, particularly focused on shortest path algorithms such as Dijkstra\'s algorithm.","solution":"import heapq from collections import defaultdict, deque def find_shortest_path(n, flights, start, destination): # Creating graph from flights graph = defaultdict(list) for u, v, t in flights: graph[u].append((v, t)) graph[v].append((u, t)) # Dijkstra\'s algorithm pq = [(0, start)] # (cost, city) min_cost = {start: 0} while pq: current_cost, current_city = heapq.heappop(pq) if current_city == destination: return current_cost if current_cost > min_cost[current_city]: continue for neighbor, travel_time in graph[current_city]: new_cost = current_cost + travel_time if new_cost < min_cost.get(neighbor, float(\'inf\')): min_cost[neighbor] = new_cost heapq.heappush(pq, (new_cost, neighbor)) return -1 # Example usage: # n = 7 # flights = [ # (\\"A\\", \\"B\\", 10), # (\\"A\\", \\"C\\", 20), # (\\"B\\", \\"C\\", 5), # (\\"C\\", \\"D\\", 15), # (\\"B\\", \\"D\\", 25), # (\\"D\\", \\"E\\", 10), # (\\"E\\", \\"F\\", 35) # ] # start, destination = \\"A\\", \\"F\\" # print(find_shortest_path(n, flights, start, destination))"},{"question":"Write a program that simulates the behavior of a vending machine. The vending machine has a selection of five different items, each with a different price and a limited quantity available. The machine accepts coins of three denominations: 10 cents, 20 cents, and 50 cents. The machine should allow a user to: 1. Select an item by entering its corresponding code. 2. Insert the necessary coins to pay for the selected item. 3. Receive the item if the payment is sufficient, or be prompted to insert more coins if the amount is insufficient. If the inserted amount exceeds the item\'s price, the machine should return the appropriate change. 4. Be notified if the selected item is out of stock. The program should handle multiple user interactions until an \\"exit\\" command is received. The item list with codes, prices, and initial quantities is as follows: - A: Water (price: 50 cents, quantity: 5) - B: Soda (price: 70 cents, quantity: 5) - C: Chips (price: 45 cents, quantity: 5) - D: Chocolate (price: 65 cents, quantity: 5) - E: Gum (price: 30 cents, quantity: 5) Input format: - One line contains the item code (A, B, C, D, E) or \\"exit\\" to stop the program. - If an item is selected, one or more additional lines contain the inserted coin amounts (10, 20, or 50). The input ends when the sum of the inserted amounts is greater than or equal to the item price or when the sum of inserted coins reaches 100 without sufficient payment. Output format: - If an item is selected: \\"Selected item: [item name], price: [price] cents\\" - For each inserted coin: \\"Inserted [coin amount] cents\\" - If payment is sufficient: \\"Dispensing [item name]. Change: [change] cents\\" (if change is due) - If payment is insufficient in one go: \\"Not enough money inserted. Please insert [remaining amount] cents more.\\" - If the item is out of stock: \\"Sorry, [item name] is out of stock.\\" - When the \\"exit\\" command is received: \\"Exiting. Thank you for using the vending machine!\\" Example Input: ``` A 50 B 20 20 50 C 10 10 10 D 50 20 exit ``` Example Output: ``` Selected item: Water, price: 50 cents Inserted 50 cents Dispensing Water. Change: 0 cents Selected item: Soda, price: 70 cents Inserted 20 cents Inserted 20 cents Inserted 50 cents Dispensing Soda. Change: 20 cents Selected item: Chips, price: 45 cents Inserted 10 cents Inserted 10 cents Inserted 10 cents Not enough money inserted. Please insert 15 cents more. Selected item: Chocolate, price: 65 cents Inserted 50 cents Inserted 20 cents Dispensing Chocolate. Change: 5 cents Exiting. Thank you for using the vending machine! ```","solution":"class VendingMachine: def __init__(self): self.items = { \\"A\\": {\\"name\\": \\"Water\\", \\"price\\": 50, \\"quantity\\": 5}, \\"B\\": {\\"name\\": \\"Soda\\", \\"price\\": 70, \\"quantity\\": 5}, \\"C\\": {\\"name\\": \\"Chips\\", \\"price\\": 45, \\"quantity\\": 5}, \\"D\\": {\\"name\\": \\"Chocolate\\", \\"price\\": 65, \\"quantity\\": 5}, \\"E\\": {\\"name\\": \\"Gum\\", \\"price\\": 30, \\"quantity\\": 5} } self.valid_coins = [10, 20, 50] def select_item(self, item_code): if item_code not in self.items: return \\"Invalid selection.\\" item = self.items[item_code] if item[\\"quantity\\"] == 0: return f\\"Sorry, {item[\'name\']} is out of stock.\\" return f\\"Selected item: {item[\'name\']}, price: {item[\'price\']} cents\\" def insert_coin(self, item_code, inserted_coins): if item_code not in self.items: return \\"Invalid selection.\\" item = self.items[item_code] total_inserted = sum(inserted_coins) if total_inserted < item[\\"price\\"]: remaining = item[\\"price\\"] - total_inserted return f\\"Not enough money inserted. Please insert {remaining} cents more.\\" else: change = total_inserted - item[\\"price\\"] item[\\"quantity\\"] -= 1 return f\\"Dispensing {item[\'name\']}. Change: {change} cents\\""},{"question":"Gabriel is designing a maze game for his friends. The game consists of an n x n grid where each cell can either be empty, represented by \'.\', or contain an obstacle, represented by \'#\'. Gabriel\'s friends will start at the top-left corner of the grid (cell (0, 0)) and need to reach the bottom-right corner (cell (n-1, n-1)). They can only move to an adjacent cell if it is empty. The game requires determining if there is a path from the starting cell to the destination cell. Input The first line contains an integer n (2 ≤ n ≤ 50) — the size of the grid. The next n lines contain n characters each, representing the grid. Each character can either be \'.\' or \'#\'. Output Print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, otherwise print \\"NO\\". Examples Input 3 ..# .#. ... Output YES Input 4 ..#. .. ..#. ..#. Output NO","solution":"def is_path_exists(n, grid): def dfs(x, y): if x == y == n-1: # reached bottom-right corner return True if x < 0 or y < 0 or x >= n or y >= n or grid[x][y] == \'#\': # out of bounds or obstacle return False if (x, y) in visited: # already visited return False visited.add((x, y)) # explore all 4 possible directions return dfs(x + 1, y) or dfs(x, y + 1) or dfs(x - 1, y) or dfs(x, y - 1) visited = set() return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"You are given two arrays X and Y, each containing n (1 ≤ n ≤ 100) positive integers. Your task is to find and swap exactly one pair of integers (one from each array) such that after the swap, the sum of every element in the first array becomes unique and the sum of every element in the second array also becomes unique. For example, if X = [1, 2, 3] and Y = [3, 2, 1], swapping 1 from X with 1 from Y creates two arrays X\' = [1, 2, 3] and Y\' = [3, 2, 1], which don\'t meet the condition. However, if we swap 1 from X with 3 from Y, we get X\' = [3, 2, 1] and Y\' = [1, 2, 1], and the sum of elements in both arrays will be unique. Input The first line contains one integer n (1 ≤ n ≤ 100) — the number of elements in X and Y. The second line contains n integers x_1, x_2, ..., x_n (1 ≤ x_i ≤ 200) — the elements of X. The third line contains n integers y_1, y_2, ..., y_n (1 ≤ y_i ≤ 200) — the elements of Y. Output Output two numbers x and y such that swapping x (belonging to X) and y (belonging to Y) makes the sum of elements in both X and Y unique. If there are multiple valid pairs, print any. Examples Input 3 1 2 3 3 2 1 Output 1 3 Input 4 1 1 3 5 2 4 3 6 Output 1 2 Note In the first example, swapping 1 from X with 3 from Y creates the arrays [3, 2, 1] and [1, 2, 1] whose sums are 6 and 4 respectively, which are unique. In the second example, swapping 1 from X with 2 from Y creates the arrays [2, 1, 3, 5] and [1, 4, 3, 6] whose sums are 11 and 14 respectively, which are unique.","solution":"def find_swap_pair(X, Y): This function finds two elements x from X and y from Y to swap such that the sum of the elements in X is unique from the sum of the elements in Y. sum_x = sum(X) sum_y = sum(Y) diff_set = set() # To store the differences encountered for x in X: for y in Y: if (sum_x - x + y) != (sum_y - y + x): return (x, y) return None # In case no valid swap is found, though guaranteed one exists by problem constraints"},{"question":"James is establishing a new kingdom and needs to construct a series of bridges between various cities. Each city is represented as a node and each bridge a bi-directional edge in an undirected graph. In order to maximize economic growth, he has decided that each constructed bridge must contribute to creating a tree structure, ensuring connectivity without cycles. However, only specific cities and bridges are allowed to be used in the construction due to political constraints. The goal is to determine whether it\'s possible to connect all the allowed cities using the given potential bridges without forming any cycles, thus creating a spanning tree. Input The first line contains an integer T, the number of scenarios (1 ≤ T ≤ 10). Each scenario starts with a line containing two integers n and m, where n represents the number of cities (2 ≤ n ≤ 10000), and m represents the number of allowed bridges (1 ≤ m ≤ 10000). The following m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing a potential bridge between city u and city v. Output For each scenario, print \\"Yes\\" if it\'s possible to connect all the cities using the given bridges forming a spanning tree, and \\"No\\" otherwise. SAMPLE INPUT 3 3 3 1 2 2 3 3 1 4 3 1 2 2 3 3 4 4 4 1 2 2 3 3 4 4 1 SAMPLE OUTPUT No Yes No Explanation: In the first scenario, all cities are connected but they form a cycle, hence the answer is \\"No\\". In the second scenario, we can form a linear connection between the cities without cycles, so the output is \\"Yes\\". In the third scenario, the graph with the given bridges also forms a cycle, thus the answer is \\"No\\".","solution":"def is_spanning_tree_possible(n, m, bridges): from collections import defaultdict, deque if m != n - 1: return \\"No\\" graph = defaultdict(list) for u, v in bridges: graph[u].append(v) graph[v].append(u) visited = set() def bfs(start): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) bfs(1) return \\"Yes\\" if len(visited) == n else \\"No\\" def solve(T, scenarios): results = [] for scenario in scenarios: n, m, bridges = scenario results.append(is_spanning_tree_possible(n, m, bridges)) return results # Example usage: T = 3 scenarios = [ (3, 3, [(1, 2), (2, 3), (3, 1)]), (4, 3, [(1, 2), (2, 3), (3, 4)]), (4, 4, [(1, 2), (2, 3), (3, 4), (4, 1)]) ] print(solve(T, scenarios)) # Output should be [\'No\', \'Yes\', \'No\']"},{"question":"You are reading an ancient manuscript which contains numeric code sequences. The codes are represented as strings of digits, separated by spaces. You suspect that each sequence contains an embedded message, based on the frequency of digits in the sequence. Your task is to determine the most frequently occurring digit in each sequence. If multiple digits occur with the same highest frequency, the smallest digit should be chosen. Write a program to analyze a given set of numeric code sequences and output the most frequently occurring digit for each sequence. Input The first line of the input contains an integer N, which represents the number of sequences. The following N lines each contain a string of digits separated by spaces. Each string does not contain more than 1000 characters and includes only digits \'0\' to \'9\' and spaces. Output For each sequence, output the most frequently occurring digit. If there is a tie, output the smallest digit among them. Example Input 3 122333444455555 9876543210 122333 000111222 333444 555666 Output 5 3 0","solution":"def most_frequent_digit(sequences): For each sequence in the list, returns the most frequently occurring digit. If there is a tie, returns the smallest digit among them. results = [] for sequence in sequences: digit_counts = [0] * 10 for char in sequence: if char.isdigit(): digit_counts[int(char)] += 1 max_count = max(digit_counts) most_freq_digit = digit_counts.index(max_count) results.append(str(most_freq_digit)) return results def process_input_and_find_most_frequent(): Reads input for sequences from standard input and computes the most frequently occurring digit(s) for each sequence. import sys input = sys.stdin.read() data = input.splitlines() N = int(data[0]) sequences = data[1:N+1] results = most_frequent_digit(sequences) for result in results: print(result)"},{"question":"Space Mining Robotics A space mining company has developed advanced mining robots to autonomously extract valuable minerals from asteroids. Each mining robot operates by moving through a grid-like path on the surface of an asteroid. The grid is represented by a 2D matrix where each cell contains an integer value indicating the quantity of minerals at that cell. The robot starts at the top-left cell (0, 0) and must reach the bottom-right cell (n-1, m-1) of the matrix. It can only move right or down at each step. The robot collects the minerals from each cell it travels through. Your task is to find the maximum quantity of minerals the robot can collect when it reaches the bottom-right cell. Write a program that, given the dimensions of the matrix and the quantity of minerals in each cell, computes the maximum quantity of minerals the robot can collect from the top-left to the bottom-right. # Input The input consists of multiple datasets. Each dataset begins with two integers n and m (1 ≤ n, m ≤ 100), representing the dimensions of the matrix. This is followed by n rows, each containing m integers representing the quantity of minerals in that cell. The input ends with a dataset where n = 0 and m = 0, which should not be processed. # Output For each dataset, output the maximum quantity of minerals the robot can collect, on a separate line. # Sample Input 3 4 1 3 1 2 1 5 1 3 4 2 1 4 2 2 2 4 0 3 0 0 # Sample Output 17 9 # Explanation **First Dataset:** Path that yields maximum minerals: 1 → 3 → 5 → 2 → 1 → 1 → 4 Total minerals: 1 + 3 + 5 + 2 + 1 + 1 + 4 = 17 **Second Dataset:** Path that yields maximum minerals: 2 → 4 → 3 Total minerals: 2 + 4 + 3 = 9","solution":"def max_minerals(matrix): Given a 2D list representing the mineral quantities in a grid, computes the maximum quantity of minerals the robot can collect from the top-left to the bottom-right corner. if not matrix: return 0 n = len(matrix) m = len(matrix[0]) # Create a dp table with the same dimensions as the matrix. dp = [[0] * m for _ in range(n)] # Starting point dp[0][0] = matrix[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[n-1][m-1] def process_input(input_data): Processes the input data and returns a list of matrices representing the datasets. lines = input_data.strip().split(\'n\') matrices = [] i = 0 while i < len(lines): n, m = map(int, lines[i].split()) if n == 0 and m == 0: break matrix = [] for row in range(n): matrix.append(list(map(int, lines[i + row + 1].split()))) matrices.append(matrix) i += n + 1 return matrices def space_mining_robots(input_data): Main function to process the input data and output the maximum minerals for each dataset. matrices = process_input(input_data) results = [max_minerals(matrix) for matrix in matrices] return results"},{"question":"Alex plans to create a maze game for his brother Bob and needs a helper function that will determine if a point in a given maze can reach the exit. The maze is represented by a 2D grid of 0s and 1s, where a 0 represents an open cell and a 1 represents a wall. The player starts at a given position and can move up, down, left, or right, but cannot move diagonally or through walls. The goal is to determine if there is a path from the start position to the exit position, which is always at the bottom-right corner. Input The input contains several lines: - The first line consists of two integers, n and m (2 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid respectively. - The next n lines each contain m integers (either 0 or 1), representing the maze grid. - The last line contains two integers, x and y (0 ≤ x < n, 0 ≤ y < m), representing the starting position of the player in the grid. Output Output \\"YES\\" if the player can reach the exit (bottom-right corner) from the starting position; otherwise, output \\"NO\\". Example Input 4 4 0 0 1 0 1 0 1 0 1 0 0 0 1 1 0 0 0 0 Output YES Input 3 3 0 1 1 1 1 0 0 0 0 0 0 Output NO","solution":"def can_reach_exit(n, m, maze, start_x, start_y): Determines if there is a path from the starting position to the exit (bottom-right corner) in the given maze. :param n: Number of rows in the maze :param m: Number of columns in the maze :param maze: 2D list representing the maze grid :param start_x: Starting x-coordinate (row) of the player :param start_y: Starting y-coordinate (column) of the player :return: \\"YES\\" if there is a path to the exit, otherwise \\"NO\\" from collections import deque # Directions for up, down, left, right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Set of visited coordinates for BFS (Breadth-First Search) visited = set() queue = deque([(start_x, start_y)]) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given a sequence of N integers and Q queries. For each query, you need to compute the sum of the minimum and maximum values in a subarray defined by the query. The sequence of integers `A` is indexed from 1 to N. Each query provides two integers `L` and `R` which represents the starting and ending indices (inclusive) of the subarray from which you need to find the sum of the minimum and maximum elements. Write a program to answer each query. Input: - The first line contains two integers, N and Q, separated by a space. - The second line contains N integers, representing the elements of array A. - The next Q lines each contain two integers, L and R, representing a query. Output: For each query, output a single integer representing the sum of the minimum and maximum values in the subarray defined by the query. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N 1 ≤ A[i] ≤ 10^9 SAMPLE INPUT 6 3 1 3 2 7 9 11 1 4 2 5 3 6 SAMPLE OUTPUT 8 16 18 Explanation: For the first query, the subarray is [1, 3, 2, 7]. The minimum value is 1 and the maximum value is 7. Their sum is 8. For the second query, the subarray is [3, 2, 7, 9]. The minimum value is 2 and the maximum value is 9. Their sum is 11. For the third query, the subarray is [2, 7, 9, 11]. The minimum value is 2 and the maximum value is 11. Their sum is 13.","solution":"def sum_of_min_and_max_in_subarray(N, Q, A, queries): For each query, compute the sum of the minimum and maximum values in the specified subarray. Parameters: - N: int: size of the array - Q: int: number of queries - A: list of ints: the array of integers - queries: list of tuples: each tuple contains two integers L and R Returns: - list of ints: sum of the minimum and maximum values for each query results = [] for L, R in queries: subarray = A[L-1:R] min_val = min(subarray) max_val = max(subarray) results.append(min_val + max_val) return results # Example usage N = 6 Q = 3 A = [1, 3, 2, 7, 9, 11] queries = [(1, 4), (2, 5), (3, 6)] print(sum_of_min_and_max_in_subarray(N, Q, A, queries))"},{"question":"You are given a rectangular grid of size n x m filled with non-negative integers. William is initially positioned at the cell (1, 1) and wants to move to the cell (n, m). He can move either to the right or down from his current position. While moving through the grid, he also collects the values of the cells he visits. Help William to find the maximum sum of values that he can collect on the way from the cell (1, 1) to the cell (n, m). Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and the number of columns in the grid respectively. Each of the next n lines contains m integers. The j-th integer in the i-th line a_ij (0 ≤ a_ij ≤ 10^4) represents the value of the cell (i, j) in the grid. Output Print a single integer, the maximum sum of values that William can collect. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Note In the first sample test William can move as follows: * Start at cell (1, 1) with value 1 * Move to cell (1, 2) with value 2 (Total: 1 + 2 = 3) * Move to cell (1, 3) with value 3 (Total: 3 + 3 = 6) * Move down to cell (2, 3) with value 6 (Total: 6 + 6 = 12) * Move down to cell (3, 3) with value 9 (Total: 12 + 9 = 21) William can also take other paths, but the path described yields the maximum sum, which is 29.","solution":"def max_path_sum(n, m, grid): Function to calculate the maximum sum of values from the top-left to the bottom-right in a grid. :param n: Integer, number of rows in the grid :param m: Integer, number of columns in the grid :param grid: List of lists, representing the grid with non-negative integers :return: Integer, maximum sum collected dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[n - 1][m - 1]"},{"question":"You are given a list of N integers. You need to modify the list so that every adjacent pair of elements have different parity (one is odd, the other is even). You are allowed to replace any element with any integer of your choice. Determine the minimum number of replacements required to achieve the desired property. Constraints * 1 ≤ N ≤ 1000 * 1 ≤ List_Elements ≤ 10^9 Input Input is given from Standard Input in the following format: N list[1] list[2] ... list[N] Output Output the minimum number of replacements required. Example Input 5 1 3 5 7 9 Output 2 Input 4 2 2 2 2 Output 2 Input 6 1 2 3 4 5 6 Output 0","solution":"def min_replacements_to_alternate_parity(N, lst): replacements = 0 for i in range(1, N): if (lst[i-1] % 2) == (lst[i] % 2): # adjacent elements have same parity replacements += 1 # Change current element\'s parity lst[i] = lst[i] + 1 if lst[i] % 2 == 0 else lst[i] - 1 return replacements"},{"question":"In a warehouse, you need to manage the inventory of products. The warehouse system supports the following operations: * add(product, amount): Add amount of product to the inventory. If the product does not exist in the inventory, create it with the specified amount. * remove(product, amount): Remove amount of product from the inventory. If the product does not have enough quantity, remove all available units. * check(product): Print the current quantity of the specified product. Print \\"Out of stock\\" if the product does not exist in the inventory. Constraints * 1 leq q leq 200,000 * 1 leq amount leq 1,000,000 * 1 leq length of product leq 50 * product consists of lower case letters Input The input is given in the following format: q query_1 query_2 : query_q Each query query_i is given by 0 product amount or 1 product or 2 product amount where the first digits 0, 1, and 2 represent add, check, and remove operations respectively. Output For each check operation, print the current quantity of the product or \\"Out of stock\\" if the product does not exist. Example Input 7 0 pencil 100 0 pen 50 1 pencil 2 pen 30 1 pen 2 pencil 50 1 pencil Output 100 20 50","solution":"class Warehouse: def __init__(self): self.inventory = {} def add(self, product, amount): if product in self.inventory: self.inventory[product] += amount else: self.inventory[product] = amount def remove(self, product, amount): if product in self.inventory: if self.inventory[product] <= amount: del self.inventory[product] else: self.inventory[product] -= amount def check(self, product): if product in self.inventory: return self.inventory[product] else: return \\"Out of stock\\" def manage_warehouse(queries): warehouse = Warehouse() result = [] for query in queries: parts = query.split() cmd = int(parts[0]) product = parts[1] if cmd == 0: amount = int(parts[2]) warehouse.add(product, amount) elif cmd == 1: result.append(warehouse.check(product)) elif cmd == 2: amount = int(parts[2]) warehouse.remove(product, amount) return result"},{"question":"In a distant universe, there exists a rare mineral called Xentium. Two players, Alice and Bob, found a giant Xentium crystal and decided to play a game using it. The rules of the game are as follows: - The game starts with a crystal that has an initial atomic number n. - In each turn, a player can perform any one of the following moves: * Divide the atomic number of the crystal by any of its even divisors greater than 1. * Subtract any prime number less than 20 from the atomic number, provided the resulting number is greater than 0. - Alice always goes first. The player who cannot make a move loses the game. Assume both players play optimally. Given multiple test cases, determine who the winner of the game is. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. Each test case has a single line containing an integer n (2 ≤ n ≤ 10^9) — the atomic number of the crystal at the start of that game. Output For each test case, print \\"Alice\\" if she wins, and \\"Bob\\" otherwise. Example Input 6 2 10 15 20 23 100 Output Alice Alice Alice Alice Alice Alice Note In the first test case, n=2, Alice divides by 2 on the first move and wins since Bob cannot make a move. In the second test case, n=10, Alice can divide by 2 and the number becomes 5 on her first move. Now it\'s Bob\'s turn with 5. Bob subtracts 3 (a prime less than 20) and the number becomes 2. Alice divides by 2 again and wins. In the third test case, n=15, Alice subtracts 3 on the first move. Now n=12, and Bob is forced to subtract a prime number too. Alice continues to play by dividing or subtracting and eventually wins.","solution":"def optimal_winner(n): Determine if Alice or Bob wins the game starting with the atomic number n. if n == 2: return \\"Alice\\" if n % 2 == 1: return \\"Alice\\" if (n & (n - 1)) == 0: return \\"Bob\\" return \\"Alice\\" def determine_winners(t, test_cases): results = [] for n in test_cases: results.append(optimal_winner(n)) return results"},{"question":"A machine learning competition is taking place, and participants are required to train their models on a dataset consisting of unique data samples. Each data sample is represented by a non-negative integer, and no duplicates are allowed in the dataset. You are given an initial list of non-negative integers where some elements may be duplicates. Your task is to process this list and output a new list with all duplicates removed while maintaining the original order of first occurrences of each unique element. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), denoting the number of elements in the initial list. - The second line contains n space-separated non-negative integers representing the initial list. Output: - Output a single line containing the new list with duplicates removed, maintaining the original order of first occurrences of each unique element. Example Input: 7 1 2 2 3 4 3 5 Output: 1 2 3 4 5 Input: 5 5 5 5 5 5 Output: 5 Note: In the first example, the initial list is [1, 2, 2, 3, 4, 3, 5]. After removing duplicates while maintaining the original order, the list becomes [1, 2, 3, 4, 5]. In the second example, all elements in the initial list are the same, so the output list contains only one element: [5].","solution":"def remove_duplicates(n, elements): Removes duplicates from the list while maintaining the original order of first occurrences. Parameters: n (int): Number of elements in the list. elements (list): List of non-negative integers, possibly containing duplicates. Returns: list: A list with duplicates removed, maintaining the original order. seen = set() result = [] for element in elements: if element not in seen: seen.add(element) result.append(element) return result"},{"question":"You have recently been recruited by an interstellar mining corporation to build a logistic system to optimize the delivery of minerals from various mining sites located on different planets to a central processing unit. The star system has n planets connected via m bidirectional space routes. Each route has a certain length l, denoting the travel time between the two connected planets. The central processing unit is located on planet 1. Your task is to evaluate the efficiency of mineral delivery by calculating the shortest travel time from planet 1 to all other planets in the star system. Write a program to help the mining corporation determine the shortest delivery times from the central processing unit to each of the other planets. Input The first line of input contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2*10^5) denoting the number of planets and the number of space routes, respectively. The next m lines describe the space routes. Each route is represented by three space-separated integers u, v, and l (1 ≤ u, v ≤ n, 1 ≤ l ≤ 10^9, u ≠ v), where u and v denote the planets connected by the route and l denotes the travel time. Each pair of planets will be connected by at most one direct route. Output Output a single line containing n-1 space-separated integers, where the i-th integer denotes the shortest travel time from planet 1 to planet i+1. If a planet is not reachable from planet 1, output -1 for that planet instead. Example Input 5 7 1 2 4 1 3 2 2 3 5 2 4 10 3 4 3 3 5 7 4 5 1 Output 4 2 5 6 Explanation For the sample input: - The shortest travel time from planet 1 to planet 2 is 4 (direct route). - The shortest travel time from planet 1 to planet 3 is 2 (direct route). - The shortest travel time from planet 1 to planet 4 is 5 (1 → 3 → 4). - The shortest travel time from planet 1 to planet 5 is 6 (1 → 3 → 5).","solution":"import heapq from collections import defaultdict def shortest_travel_times(n, m, routes): graph = defaultdict(list) for u, v, l in routes: graph[u].append((v, l)) graph[v].append((u, l)) dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[1] = 0 priority_queue = [(0, 1)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [dist[i] if dist[i] != float(\'inf\') else -1 for i in range(2, n + 1)]"},{"question":"Aria is preparing a list of unique phrases from different scrolls in the Citadel\'s library. Each phrase is composed of words and spaces, and Aria wants to ensure that no phrase is repeated in her list. Write a function that, given a list of phrases, returns a list with duplicate phrases removed, preserving the order of their first appearance. Input The input contains a list of phrases (1 ≤ number of phrases ≤ 105) where each phrase is a string containing words and spaces (1 ≤ length of each phrase ≤ 100). Output The output should be a list of unique phrases from the input, in the order they first appear. Example Input [ \\"The quick brown fox\\", \\"jumps over the lazy dog\\", \\"The quick brown fox\\", \\"Lorem ipsum dolor sit\\", \\"amet consectetur\\", \\"Lorem ipsum dolor sit\\" ] Output [ \\"The quick brown fox\\", \\"jumps over the lazy dog\\", \\"Lorem ipsum dolor sit\\", \\"amet consectetur\\" ] Explanation In the given input, the phrases \\"The quick brown fox\\" and \\"Lorem ipsum dolor sit\\" appear more than once. The function should remove the subsequent duplicates and return the phrases in the order of their first appearance.","solution":"def remove_duplicate_phrases(phrases): Returns a list of unique phrases, preserving the order of their first appearance. seen = set() unique_phrases = [] for phrase in phrases: if phrase not in seen: unique_phrases.append(phrase) seen.add(phrase) return unique_phrases"},{"question":"You are given a list of words with mixed capitalization. Your task is to sort the words in a case-insensitive manner, but if two words are identical when compared without case, the original case order should be preserved. Additionally, the sorted list should maintain the relative order of words that are equal when compared case-insensitively. To be clear, this means: - \'apple\' should come before \'Banana\' - \'Banana\' should come before \'banana\' (since \'Banana\' appeared first in the original list) Input The first line contains an integer n (1 ≤ n ≤ 1000) representing the number of words. Each of the next n lines contains one word consisting only of letters (both uppercase and lowercase). Words can be of different lengths, but the total length of all words combined will not exceed 10000 characters. Output Print the words sorted in a case-insensitive manner, retaining their original case when two words compare equal ignoring case. Example Input: 5 banana Apple Banana apple Mango Output: Apple apple banana Banana Mango Input: 3 zzz ZZz AAA Output: AAA zzz ZZz # Notes - The comparison of the words \'banana\' and \'Banana\' should treat them as equal, but since \'banana\' appeared first, it should appear first in the final output. - This task requires maintaining stability in sorting when words compare equal case-insensitively.","solution":"def case_insensitive_sort(words): Returns the list of words sorted in a case-insensitive manner, retaining their original case when two words compare equal ignoring case. :param words: List of words return sorted(words, key=str.lower)"},{"question":"You are given a string s consisting of lowercase alphabets. You want to rearrange the characters of the string to make it a palindrome. If it is not possible to create a palindrome from the given string, return \\"Not Possible\\". Otherwise, return the palindrome that can be formed using all the characters of the given string. Input The input contains a single string s (1 ≤ |s| ≤ 100,000). Output Output the palindrome formed from the string, or \\"Not Possible\\" if it is not feasible to form a palindrome. Example Input aabbcc Output abccba Input abc Output Not Possible Note In the first example, the string \\"aabbcc\\" can be rearranged to form the palindrome \\"abccba\\". In the second example, it is not possible to rearrange the string \\"abc\\" to form a palindrome, so the output is \\"Not Possible\\".","solution":"from collections import Counter def rearrange_to_palindrome(s): Returns a palindrome rearrangement of the input string if possible, otherwise returns \\"Not Possible\\". count = Counter(s) odd_count = sum(1 for freq in count.values() if freq % 2 != 0) if odd_count > 1: return \\"Not Possible\\" half = [] middle = [] for char, freq in count.items(): if freq % 2 == 0: half.extend([char] * (freq // 2)) else: half.extend([char] * (freq // 2)) middle.append(char) half_str = \'\'.join(half) return half_str + \'\'.join(middle) + half_str[::-1]"},{"question":"Masha likes numbers consisting of only one unique digit (e.g., 1, 22, 333). She calls such numbers \\"harmonious\\". Masha has a favorite number m (1 ≤ m ≤ 9999). She wants to know how many harmonious numbers exist that are less than or equal to m. Input The input consists of a single integer m (1 ≤ m ≤ 9999). Output Print a single integer representing the number of harmonious numbers less than or equal to m. Example Input 100 Output 18 Note In the given example, the harmonious numbers less than or equal to 100 are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99. There are a total of 18 harmonious numbers.","solution":"def harmonious_numbers_count(m): Returns the count of harmonious numbers that are less than or equal to m. count = 0 for i in range(1, 10): # single digit numbers num = i while num <= m: count += 1 num = num * 10 + i return count"},{"question":"Given an array of integers, you are required to find a contiguous subarray with the largest sum, but with a twist: if there are multiple subarrays with the same largest sum, then find the one with the smallest length. If there\'s still a tie, return the earliest subarray (i.e., the one with the smallest starting index). Implement a function that takes an array of integers as input and returns the starting index and length of the subarray with the largest sum, with ties broken by the smallest length and then by the smallest starting index if necessary. Function signature: ```python def max_sum_subarray(arr: List[int]) -> Tuple[int, int]: ``` # Input - An integer array `arr` of length `n` (1 ≤ n ≤ 10^5), where each element is between -10^9 and 10^9. # Output - A tuple containing two integers: - The starting index of the subarray. - The length of the subarray. # Examples Example 1 ```python arr = [1, -2, 3, 4, -1, 2, 1, -5, 4] print(max_sum_subarray(arr)) ``` Output: `(2, 5)` Example 2 ```python arr = [-2, -3, 4, -1, -2, 1, 5, -3] print(max_sum_subarray(arr)) ``` Output: `(2, 5)` Example 3 ```python arr = [1, -1, 1, -1, 1] print(max_sum_subarray(arr)) ``` Output: `(0, 1)` # Explanation - In the first example, the subarray with the largest sum is `[3, 4, -1, 2, 1]` with sum 9 and starting at index 2 with length 5. - In the second example, the subarray with the largest sum is `[4, -1, -2, 1, 5]` with sum 7 and starting at index 2 with length 5. - In the third example, the subarray `[1]` appears three times with the same sum but the smallest length is 1 and it starts at index 0 which is the earliest.","solution":"from typing import List, Tuple def max_sum_subarray(arr: List[int]) -> Tuple[int, int]: n = len(arr) max_sum = -float(\'inf\') current_sum = 0 start, end = 0, 0 best_start, best_len = 0, n + 1 for i in range(n): if current_sum <= 0: start = i current_sum = arr[i] else: current_sum += arr[i] if (current_sum > max_sum or (current_sum == max_sum and (i - start + 1 < best_len))): max_sum = current_sum best_start = start best_len = i - start + 1 return (best_start, best_len)"},{"question":"A book fair is being organized in a town, and there are `n` stalls lined up in a single row. The stalls are numbered from 1 to `n`. Each stall can sell a unique book number `i`. However, some stalls are closed, and therefore, some books might not be available. `m` customers are interested in buying a particular book. Each customer has a preferred book they wish to buy, but if that\'s not available, they are willing to look at the neighboring stalls within a certain distance `d` for the book they want. The goal is to maximize the number of customers who get their preferred book. The customers will arrive one by one in the order they are listed, and each customer will either find their preferred book within the specified distance or leave without buying anything if the book isn\'t available within that range. Also, once a book is bought by a customer, it is removed from that stall and is no longer available to anyone else. Input - The first line contains three integers `n`, `m`, and `d` (1 ≤ `n`, `m` ≤ 150000; 0 ≤ `d` ≤ n), representing the number of stalls, customers, and maximum distance a customer is willing to move to buy their preferred book, respectively. - The second line contains `n` integers `s1, s2, ..., sn` (0 ≤ `si` ≤ 1000000), where `si` represents the book id at stall `i` (0 if the stall is closed). - Each of the next `m` lines contains an integer `pi` (1 ≤ `pi` ≤ 1000000), representing the preferred book id of the `i-th` customer. Output Print a single integer — the maximum number of customers who get their preferred book. Examples Input 10 3 1 5 0 3 6 2 7 1 0 4 8 5 2 10 Output 2 Input 8 5 2 0 13 0 25 24 0 0 30 24 25 13 13 30 Output 4","solution":"def max_customers_get_book(n, m, d, stalls, customers): Returns the maximum number of customers who get their preferred book. :param n: Number of stalls :param m: Number of customers :param d: Maximum distance a customer is willing to move :param stalls: List of book ids at each stall (0 if stall is closed) :param customers: List of preferred book ids for each customer :return: Maximum number of customers who get their preferred book # Create dictionaries to map book ids to their positions in the stalls available_books = {} for i in range(n): book = stalls[i] if book != 0: if book not in available_books: available_books[book] = [] available_books[book].append(i) # We will use a set to track occupied stalls after a book is bought occupied_stalls = set() satisfied_customers = 0 for preferred_book in customers: if preferred_book in available_books: found_book = False positions = available_books[preferred_book] for pos in positions: # Check within range [pos - d, pos + d] for check_pos in range(max(0, pos - d), min(n, pos + d + 1)): if check_pos not in occupied_stalls and stalls[check_pos] == preferred_book: occupied_stalls.add(check_pos) satisfied_customers += 1 found_book = True break if found_book: break return satisfied_customers"},{"question":"Vova is currently studying about graph theory, and he came across the concept of Hamiltonian paths. A Hamiltonian path is a path in an undirected graph that visits each vertex exactly once. To test his understanding, Vova decides to solve the following problem. Given an undirected graph with n vertices and m edges, determine whether there exists any Hamiltonian path in the graph. # Input The first line contains two integers n and m (1 ≤ n ≤ 15, 0 ≤ m ≤ n*(n-1)/2). Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating there is an undirected edge between vertices u and v. # Output Print \\"YES\\" (without quotes) if there is a Hamiltonian path in the graph, otherwise print \\"NO\\". # Example Input ``` 4 4 1 2 2 3 3 4 4 1 ``` Output ``` YES ``` # Note In the first example, one of the possible Hamiltonian paths is `1 -> 2 -> 3 -> 4`. By testing whether you can find a sequence in which each vertex is visited exactly once for any given undirected graph, Vova is practicing finding Hamiltonian paths in different graph configurations.","solution":"def has_hamiltonian_path(n, edges): def is_hamiltonian_path(path, graph): for i in range(len(path) - 1): if path[i+1] not in graph[path[i]]: return False return True def backtrack(path, visited, graph): if len(path) == len(graph): if is_hamiltonian_path(path, graph): return True return False for vertex in range(1, n + 1): if not visited[vertex - 1]: visited[vertex - 1] = True path.append(vertex) if backtrack(path, visited, graph): return True path.pop() visited[vertex - 1] = False return False # Represent graph as adjacency list graph = {i: set() for i in range(1, n + 1)} for u, v in edges: graph[u].add(v) graph[v].add(u) # Try to find Hamiltonian path starting from any vertex for start in range(1, n + 1): path = [start] visited = [False] * n visited[start - 1] = True if backtrack(path, visited, graph): return \\"YES\\" return \\"NO\\" # Parse input def parse_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] for i in range(m): u = int(data[2 + 2*i]) v = int(data[3 + 2*i]) edges.append((u, v)) return n, edges if __name__ == \\"__main__\\": n, edges = parse_input() print(has_hamiltonian_path(n, edges))"},{"question":"Given a string s of length n and an array of m integers, define the function g as g(s, arr) = sum_{i=1}^{n} chi_{arr}(i) cdot s[i] where chi_{arr}(i) is an indicator function that returns 1 if i is in arr, and 0 otherwise. For example, if s = \\"abcdef\\" and arr = [1, 3, 6], then g(\\"abcdef\\", [1, 3, 6]) = \'a\' + \'c\' + \'f\' = \\"acf\\". You are given the string s and several queries. Each query consists of two integers l and r and asks for the function g on the substring s starting from index l and ending at index r (inclusive). Input The first line contains a single integer n (1 ≤ n ≤ 5000) — the length of the string s. The second line contains the string s. The third line contains a single integer q (1 ≤ q ≤ 100 000) — the number of queries. Each of the next q lines contains a query represented as two integers l and r (1 ≤ l ≤ r ≤ n). Output Print q lines — the answers for the queries. Example Input 6 abcdef 3 1 3 2 5 1 6 Output abc bcde abcdef Note In the first example, we have the following queries: For the first query, the substring from 1 to 3 is \\"abc\\". For the second query, the substring from 2 to 5 is \\"bcde\\". For the third query, the substring from 1 to 6 is \\"abcdef\\".","solution":"def g_substring(s, queries): Function to get the substrings from given queries. :param s: str - input string :param queries: list of tuples - each tuple contains two integers l and r :return: list of strings - results for each query results = [] for l, r in queries: # Extract the substring based on the given indices l and r results.append(s[l-1:r]) return results"},{"question":"Tony is a landscape architect working on a new project. For the design, he needs to arrange a series of plants in a line, where each plant has a specific height. To achieve a visually pleasing pattern, Tony decides that the heights of the plants should form a \\"wave\\", meaning that each plant that follows should be either higher or lower than the previous one, but not the same height. Help Tony determine a sequence of plants that forms a perfect wave. Input The first line contains an integer n (2 ≤ n ≤ 100) — the number of plants. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the plants. Output Print \\"YES\\" if it is possible to arrange the plants in a wave pattern. Otherwise, print \\"NO\\". Examples Input 4 4 3 2 1 Output YES Input 3 1 2 2 Output NO Note In the first sample, one possible arrangement is 4, 3, 2, 1, which satisfies the wave condition. In the second sample, it\'s impossible to arrange plants with the heights 1, 2, 2 in a wave pattern because 2 and 2 are the same height.","solution":"def can_form_wave(n, heights): Determines if it\'s possible to arrange the plants in a \\"wave\\" pattern. Parameters: n (int): The number of plants. heights (list of int): The heights of the plants. Returns: str: \\"YES\\" if it\'s possible to form a wave, otherwise \\"NO\\". heights.sort() # Check for duplicates for i in range(1, n): if heights[i] == heights[i-1]: return \\"NO\\" # We can always form a wave pattern if there are no duplicates return \\"YES\\""},{"question":"Design a warehouse management system that automatically categorizes incoming items based on their descriptions. Each item has a name and weight. For categorization purposes, items with a weight greater than or equal to 50 kilograms are considered \\"Heavy-duty\\". Items with weight less than 50 kilograms are considered \\"Standard\\". Your program needs to read the name and weight of a series of items, categorize them, and then output the names prefixed with either \\"Heavy-duty-\\" or \\"Standard-\\". Input The first line contains an integer n (1 ≤ n ≤ 10), the number of items. Each of the next n lines contains a string and a floating-point number separated by space. The string represents the name of the item (consisting of between 1 and 20 lowercase English letters). The floating-point number represents the weight of the item (0 ≤ weight ≤ 1000). Output For each item, output the categorized name on a new line. Examples Input 3 hammer 45.5 anvil 150.0 nail 0.3 Output Standard-hammer Heavy-duty-anvil Standard-nail","solution":"def categorize_items(n, items): categorized_items = [] for name, weight in items: if weight >= 50: categorized_items.append(f\\"Heavy-duty-{name}\\") else: categorized_items.append(f\\"Standard-{name}\\") return categorized_items # Example usage: # inputs = [(hammer, 45.5), (anvil, 150.0), (nail, 0.3)] # categorize_items(3, inputs)"},{"question":"Given a grid of size n x m, each cell contains a positive integer. Your task is to find the minimal path sum from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. The input consists of multiple test cases. Each test case starts with two integers n and m (1 ≤ n, m ≤ 100), followed by n lines each containing m integers representing the grid (1 ≤ grid[i][j] ≤ 100). Input The first line contains a single integer t (1 ≤ t ≤ 10) - the number of test cases. Each test case starts with two integers n and m, followed by n lines each containing m integers, representing the grid. Output For each test case, output a single integer - the minimal path sum from the top-left corner to the bottom-right corner. Example Input 2 3 3 1 3 1 1 5 1 4 2 1 3 4 1 2 5 1 4 3 2 1 3 6 2 1 Output 7 10 Note In the first sample, the minimal path is 1 → 3 → 1 → 1 → 2 → 1 with the sum 7. In the second sample, the minimal path is 1 → 2 → 3 → 2 → 2 → 1 with the sum 10. Constraints 1 ≤ n, m ≤ 100 1 ≤ grid[i][j] ≤ 100","solution":"def minimal_path_sum(test_cases): results = [] for case in test_cases: n, m, grid = case dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] results.append(dp[n-1][m-1]) return results"},{"question":"Taro is trying to fix the bug in his code that processes a list of transactions for his e-commerce website. Each transaction is made up of a sequence of items purchased, and the total amount paid for the transaction should be the sum of the individual item prices. However, Taro\'s code is sometimes not calculating the correct total. Help Taro by writing a function that verifies if the total amount for each transaction is correct based on a list of item prices. Constraints * The length of the list of transactions is 1 to 1000. * The length of the list of items in each transaction is 1 to 100. * All item prices are positive integers less than or equal to 10,000. * The total amount paid for the transaction is provided as an integer. Input A list of transactions, where each transaction has the format: [List of integers representing the item prices], Integer representing the total amount paid Output For each transaction, output \\"Correct\\" if the total amount is properly calculated, otherwise output \\"Incorrect\\". Examples Input [ ([100, 200, 300], 600), ([150, 150, 150], 450), ([20, 30, 10], 60), ([500, 500], 999) ] Output Correct Correct Correct Incorrect Input [ ([10, 20, 30], 60), ([1000, 2000, 3000], 7000), ([15, 15, 15], 45) ] Output Correct Incorrect Correct","solution":"def verify_transactions(transactions): Verify if the total amount for each transaction is correct based on a list of item prices. Args: transactions (list of tuples): Each transaction tuple contains a list of integers representing item prices and an integer representing the total amount paid. Returns: list of str: \\"Correct\\" if the total is correctly calculated, otherwise \\"Incorrect\\". results = [] for items, total in transactions: if sum(items) == total: results.append(\\"Correct\\") else: results.append(\\"Incorrect\\") return results"},{"question":"Juan is a software developer interested in string manipulation. He came across an interesting problem: determining how to balance parentheses in a string. He defines a balanced string as one that: - Every opening parenthesis \\"(\\" has a corresponding closing parenthesis \\")\\". - No closing parenthesis \\")\\" comes before its corresponding opening parenthesis \\"(\\". Given a string consisting only of characters \\"(\\" and \\")\\", your task is to determine the minimum number of parentheses that need to be added to make the string balanced. Input: - A single line containing a string s of length n (1 ≤ n ≤ 10^5) consisting of characters \\"(\\" and \\")\\". Output: - A single integer representing the minimum number of parentheses that need to be added to make the string balanced. Examples: Input: \\"(()\\" Output: 1 Input: \\"())(\\" Output: 2 Input: \\"((())\\" Output: 1","solution":"def min_add_to_make_balanced(s): Given a string consisting only of characters \\"(\\" and \\")\\", determine the minimum number of parentheses that need to be added to make the string balanced. Args: s (str): The input string containing only \'(\' and \')\'. Returns: int: The minimum number of parentheses to be added to make the string balanced. left_balance = 0 # Number of left parentheses needed to balance the string right_balance = 0 # Number of right parentheses needed to balance the string for char in s: if char == \'(\': left_balance += 1 else: if left_balance == 0: right_balance += 1 else: left_balance -= 1 return left_balance + right_balance"},{"question":"Jack is a railway enthusiast. He frequently works with timetables and train schedules. Recently, he encountered a problem while trying to find the next train from a given schedule. Jack needs a program that, given the current time and a list of train departure times, finds the next departure time from the current time. Input For each of t testcases, Given the current time in HH:MM format and a list of n departure times in HH:MM format. Output For each testcase, return the next available departure time. If no departure time is available on the same day, return \'NO_DEPARTURE\'. Constraints - t: 1 <= t <= 100 - n: 1 <= n <= 100 - Time will be given in 24-hour format (HH:MM) Example Input: 2 10:15 8:30 11:00 14:45 23:00 22:30 22:45 23:15 Output: 11:00 23:15","solution":"def find_next_departure(current_time, departure_times): Finds the next available departure time from the current time. Parameters: - current_time (str): The current time in HH:MM format. - departure_times (list): A list of departure times in HH:MM format. Returns: - (str): The next available departure time or \'NO_DEPARTURE\' if no departure is available. current_hours, current_minutes = map(int, current_time.split(\':\')) current_total_minutes = current_hours * 60 + current_minutes min_time_diff = float(\'inf\') next_departure = \'NO_DEPARTURE\' for dt in departure_times: dep_hours, dep_minutes = map(int, dt.split(\':\')) dep_total_minutes = dep_hours * 60 + dep_minutes if dep_total_minutes >= current_total_minutes and (dep_total_minutes - current_total_minutes) < min_time_diff: min_time_diff = dep_total_minutes - current_total_minutes next_departure = dt return next_departure"},{"question":"Monic is working with text processing and recently encountered the problem of finding the longest palindromic subsequence in a given string. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. A palindrome is a string that reads the same forward and backward. You are given a string s of length n. Determine the length of the longest palindromic subsequence in the string. Input The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^3) — the length of the string s. The second line of each test case contains the string s, consisting of lowercase English letters. Output For each test case, output one integer — the length of the longest palindromic subsequence in the given string. Example Input 3 7 abacdfg 6 bbabcb 5 abcba Output 3 5 5 Note In the first test case, the longest palindromic subsequence is \\"aba\\" with length 3. In the second test case, the longest palindromic subsequence is \\"babcb\\" with length 5. In the third test case, the entire string \\"abcba\\" is a palindrome with length 5.","solution":"def longest_palindromic_subsequence(s): Finds the length of the longest palindromic subsequence in the given string. n = len(s) dp = [[0] * n for _ in range(n)] # Palindromic subsequences of length 1 for i in range(n): dp[i][i] = 1 # Build the table for subsequences of length greater than 1 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = 2 + dp[i + 1][j - 1] if length > 2 else 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1] def solve_longest_palindromic_subsequences(t, test_cases): Solves the problem for multiple test cases. results = [] for case in test_cases: n, s = case results.append(longest_palindromic_subsequence(s)) return results"},{"question":"Alex is a big fan of palindromes and loves to create new ones from existing strings. A palindrome is a string that reads the same both forward and backward. Given a string, Alex can perform modifications to it by replacing any character in the string with any other character of his choice. The cost of replacing a character with another is defined as the absolute difference in their ASCII values. Alex wants to transform the given string into a palindrome at the minimum possible cost. Your task is to help Alex determine the minimum cost required to turn the given string into a palindrome. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) – the length of the string. - The second line contains a string s of length n which consists only of lowercase English letters. Output: - Print one integer, the minimum cost required to transform the string into a palindrome. Examples: Input: 5 abcba Output: 0 Input: 4 abcd Output: 4 Note: In the first example, the string is already a palindrome, so the cost is 0. In the second example, one optimal way to make the string a palindrome is to change \'d\' to \'a\' and \'c\' to \'b\'. The cost is |100 - 97| + |99 - 98| = 3 + 1 = 4.","solution":"def min_cost_to_palindrome(s): Return the minimum cost to transform a given string into a palindrome. :param s: The input string. :return: The minimum cost to transform the string into a palindrome. n = len(s) cost = 0 # Only need to iterate over the first half since we are transforming the string into a palindrome for i in range(n // 2): cost += abs(ord(s[i]) - ord(s[n - i - 1])) return cost"},{"question":"Given a list of words, create a function that finds the shortest chain to transform a start word into an end word. Each transformed word must exist in the given list of words, and only one letter can be changed at a time. Your function should take in a starting word, an ending word, and a list of words, and output the length of the shortest transformation chain or -1 if no such chain exists. Input: The first line contains the starting word. The second line contains the ending word. The third line contains a number `N` indicating the length of the word list. The next `N` lines contain the words in the list of words. Output: Print the length of the shortest transformation chain or -1 if no transformation is possible. SAMPLE INPUT hit cog 6 hot dot dog lot log cog SAMPLE OUTPUT 5 Explanation To transform from \\"hit\\" to \\"cog\\", one shortest chain is: hit -> hot -> dot -> dog -> cog Thus, the length of this chain is 5.","solution":"from collections import deque def shortest_transformation_chain(start, end, word_list): word_set = set(word_list) if end not in word_set: return -1 queue = deque([(start, 1)]) visited = set() while queue: current_word, length = queue.popleft() if current_word == end: return length for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': new_word = current_word[:i] + c + current_word[i+1:] if new_word in word_set and new_word not in visited: visited.add(new_word) queue.append((new_word, length + 1)) return -1"},{"question":"You are tasked with writing a program that processes a sequence of operations on an array and calculates the result of a specific query. The program should support two types of operations: 1. **Update Operation**: Change the value of an element at a specific position in the array. 2. **Range Sum Query**: Calculate the sum of a sub-array from position l to position r (inclusive). The array is 1-indexed. # Input The input consists of multiple lines: - The first line contains two integers n and m (1 leq n, m leq 100,000), representing the length of the array and the number of operations, respectively. - The second line contains n integers a_1, a_2, ..., a_n (-10^6 leq a_i leq 10^6), representing the initial values of the array. - The following m lines each describe an operation: - If the operation is an update operation, it will be in the format `1 x y`, where `1` indicates the type of operation, `x` is the position (1-indexed) to update, and `y` is the new value to set at position `x`. - If the operation is a range sum query, it will be in the format `2 l r`, where `2` indicates the type of operation, and `l` and `r` are the 1-indexed bounds of the sub-array to sum. # Output For each range sum query, output a single integer: the sum of the specified sub-array. # Example Input ``` 5 3 1 2 3 4 5 2 1 3 1 3 10 2 1 3 ``` Output ``` 6 13 ``` # Explanation After the given input operations: 1. The initial array is `[1, 2, 3, 4, 5]`. 2. The first query outputs the sum of elements from positions 1 to 3: (1 + 2 + 3 = 6). 3. The first update operation changes the element at position 3 to 10, resulting in the array `[1, 2, 10, 4, 5]`. 4. The second query outputs the sum of elements from positions 1 to 3 in the updated array: (1 + 2 + 10 = 13).","solution":"def process_operations(n, m, array, operations): results = [] for op in operations: if op[0] == 1: # Update operation array[op[1] - 1] = op[2] elif op[0] == 2: # Range Sum Query l, r = op[1], op[2] results.append(sum(array[l-1:r])) return results"},{"question":"An amusement park has a new roller coaster ride called \\"The Loop\\", which features several thrilling loops and turns. The ride is open to both adults and children, but the entry time for each person may vary based on their preferences and availability. To ensure an efficient operation, the park management has a system that tracks when each person boards the ride and when they disembark. The roller coaster has a single train that can accommodate all the riders at any given time. At the initial time t = 0, the roller coaster is empty and no one is waiting to board. Riders arrive at the boarding station at different times, and each person’s ride has a specified duration. The operating rules for the roller coaster are as follows: * At each time unit t (t ≥ 0, t is an integer), the roller coaster is either operating (with passengers onboard) or waiting at the station. If there are riders on the roller coaster, they stay on for the duration of their ride before getting off. * At any given time t, if riders are waiting at the station, they board the roller coaster immediately. All riders who arrive at exactly time t have enough time to board. The roller coaster leaves the station instantly after boarding all waiting riders. * The ride duration for each rider is known, and each rider gets off the roller coaster after exactly their ride duration. New passengers can board immediately after the prior passengers get off. Your task is to simulate the process and determine when each rider completes their ride. Input The first line contains an integer n (1 ≤ n ≤ 10^5) – the number of riders. The next n lines each contain two space-separated integers: ti and di (1 ≤ ti, di ≤ 10^9) – the time when the i-th rider arrives at the station and the duration of their ride. Output Print n lines. In the i-th line, print a single number – the time when the i-th rider completes their ride. Riders are numbered in the order they are given in the input. Example Input 3 1 5 2 3 4 7 Output 6 8 15 Note In the example provided: * At t = 1, the roller coaster has one rider boarding for a duration of 5. Their ride completes at t = 1 + 5 = 6. * At t = 2, another rider arrives, but the ride is in progress. They wait until the current ride ends at t = 6. Once they board, their ride lasts for 3 units, completing at t = 6 + 3 = 9. * At t = 4, the third rider arrives and waits until t = 9. Their ride is then 7 units long, completing at t = 9 + 7 = 16. Your task is to simulate this scenario using the provided rules and determine the completion time for each rider.","solution":"def roller_coaster_ride_completion_times(n, riders): Simulate the roller coaster ride based on rider arrival times and ride durations. Parameters: n (int): Number of riders riders (list of tuples): Each tuple contains two integers, ti and di Returns: list: Completion times for each rider completion_times = [] current_time = 0 for arrival_time, ride_duration in riders: if arrival_time > current_time: current_time = arrival_time completion_time = current_time + ride_duration completion_times.append(completion_time) current_time = completion_time return completion_times"},{"question":"In an effort to improve environmental sustainability, a company has decided to reduce its carbon footprint by optimizing its transportation logistics. They identified that the core problem lay in route inefficiencies. To address this, they require a program that helps in determining the shortest possible route to deliver products to multiple destinations while returning to the starting point. This is also known as the Traveling Salesman Problem (TSP). The company provides you with a list of distances between each pair of destinations. Your task is to calculate the minimum route that visits every destination exactly once and returns to the starting point. Input Format: - The first line contains an integer N, representing the number of destinations. - The next N lines contain N integers each, where the j-th integer in the i-th line represents the distance between destination i and destination j. Output Format: - Output a single integer, the minimum possible sum of the distances for the shortest route that visits every destination exactly once and returns to the starting point. Constraints: - 2 ≤ N ≤ 10 (The number of destinations) Sample Input: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Sample Output: 80 Explanation: The minimum route is 0 -> 1 -> 3 -> 2 -> 0, with distances 10 + 25 + 30 + 15 = 80. Note: - The distance from a destination to itself is always 0. - The problem ensures that the distance matrix is symmetric, i.e., distance[i][j] = distance[j][i].","solution":"from itertools import permutations def tsp_min_cost(N, distances): Calculates the minimum possible sum of the distances for the shortest route that visits every destination exactly once and returns to the starting point. Args: N: int : Number of destinations distances: List[List[int]] : NxN matrix where distances[i][j] is the distance from destination i to destination j. Returns: int: Minimum route distance # Generate all possible tours starting from the first destination (0) all_tours = permutations(range(1, N)) min_cost = float(\'inf\') for tour in all_tours: current_cost = 0 current_position = 0 # Calculate the cost of the tour starting and ending at the first destination for next_position in tour: current_cost += distances[current_position][next_position] current_position = next_position current_cost += distances[current_position][0] # Update the minimum cost if the current tour cost is lower if current_cost < min_cost: min_cost = current_cost return min_cost # Example usage: # N = 4 # distances = [ # [0, 10, 15, 20], # [10, 0, 35, 25], # [15, 35, 0, 30], # [20, 25, 30, 0] # ] # print(tsp_min_cost(N, distances)) # Output: 80"},{"question":"You have been tasked with developing a new algorithm to help a company streamline their inventory management. They represent their inventory levels using a sequence of integers where each integer represents the inventory count for a specific product. The company applies periodic promotions that increase the inventory counts for a range of products. Each promotion is defined by three integers: L (the starting index), R (the ending index), and D (the increase in inventory count). Given the initial inventory levels and a set of promotions, your task is to compute the final inventory levels after all promotions have been applied. Input The first line contains two integers n (1 ≤ n ≤ 105) and m (1 ≤ m ≤ 104) representing the number of products and the number of promotions, respectively. The second line contains n space-separated integers representing the initial inventory levels for each product. Each of the next m lines contains three integers L, R, and D (1 ≤ L ≤ R ≤ n, 0 ≤ D ≤ 109) describing a promotion. Output Output a single line containing n space-separated integers representing the final inventory levels after all promotions have been applied. Examples Input 5 3 10 20 30 40 50 1 3 5 2 5 10 3 4 2 Output 15 35 47 52 60 Input 4 2 5 7 9 11 1 2 3 3 4 4 Output 8 10 13 15","solution":"def apply_promotions(n, m, initial_inventory, promotions): Apply a list of promotions to the initial inventory levels and return the final inventory levels. Args: n (int): Number of products. m (int): Number of promotions. initial_inventory (list of int): Initial inventory levels for each product. promotions (list of tuple): List of promotions, where each promotion is a tuple (L, R, D). Returns: list of int: Final inventory levels after applying all promotions. # Convert from 1-based index to 0-based index for easier manipulation final_inventory = initial_inventory.copy() for L, R, D in promotions: for i in range(L - 1, R): final_inventory[i] += D return final_inventory"},{"question":"You are given a binary string s of length n. You need to find the length of the longest substring of s such that the number of 0s and 1s in that substring are equal. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the length of the binary string s. The second line of each test case contains a binary string s of length n. Output For each test case, print the length of the longest substring of s such that the number of 0s and 1s in that substring are equal. Example Input 3 4 1100 5 01010 6 001101 Output 4 2 6 Note In the first test case, the longest substring with equal number of 0s and 1s is \\"1100\\" with length 4. In the second test case, the longest substring with equal number of 0s and 1s is either \\"10\\" or \\"01\\" with length 2. In the third test case, the entire string \\"001101\\" has equal number of 0s and 1s with length 6.","solution":"def longest_equal_substring(n, s): balance_index = {0: -1} balance = 0 max_length = 0 for i in range(n): if s[i] == \'0\': balance -= 1 else: balance += 1 if balance in balance_index: max_length = max(max_length, i - balance_index[balance]) else: balance_index[balance] = i return max_length def solve(test_cases): results = [] for n, s in test_cases: results.append(longest_equal_substring(n, s)) return results"},{"question":"In a newly developed game, there are n levels that a player needs to complete. Each level has a certain difficulty rating, and the player can decide the order in which to complete the levels. However, the player prefers to finish the levels in a sequential manner based on their difficulty from easiest to hardest. Given the difficulty ratings of all n levels, your task is to determine the order in which the player should complete the levels. If two levels have the same difficulty rating, the player can complete them in any order relative to each other. Input The first line contains a single integer n (1 ≤ n ≤ 500 000) — the number of levels. The second line contains n space-separated integers d1, d2, ..., dn (1 ≤ di ≤ 1 000 000 000) — the difficulty ratings of the levels. Output In the first and only line, print n space-separated integers representing the indices of the levels in the order in which the player should complete them. Indices are 1-based. Examples Input 5 3 1 2 5 4 Output 2 3 1 5 4 Input 4 2 2 3 1 Output 4 1 2 3 Note For the first example: - Level 2 has the lowest difficulty rating (1). - Level 3 has the next lowest difficulty rating (2). - Level 1 follows with difficulty rating (3). - Level 5 has difficulty rating (4). - Level 4 has the highest difficulty rating (5). For the second example: - Level 4 has the lowest difficulty rating (1). - Both Level 1 and Level 2 have difficulty rating 2. They can appear in any order between themselves. - Level 3 has the highest difficulty rating (3).","solution":"def determine_level_order(n, difficulties): Determines the order of levels based on difficulty ratings from easiest to hardest. Parameters: - n: int : Total number of levels - difficulties: List[int] : A list of difficulty ratings Returns: - List[int] : A list of 1-based indices representing the levels in the order they should be completed. # Create a list of (difficulty, index) tuples indexed_difficulties = [(difficulty, idx + 1) for idx, difficulty in enumerate(difficulties)] # Sort the list by the difficulty indexed_difficulties.sort() # Extract the indices in the sorted order sorted_indices = [idx for _, idx in indexed_difficulties] return sorted_indices"},{"question":"**Problem Description:** You are given a matrix with `n` rows and `m` columns, containing only 0s and 1s. Your task is to find the maximum area of a rectangle composed entirely of 1s in the matrix. # Input: - First line contains two integers `n` and `m`, the number of rows and columns respectively. - Each of the next `n` lines contains `m` integers (each 0 or 1), representing the matrix. # Output: Print a single integer, the area of the largest rectangle of 1s. # Constraints: - `1 ≤ n, m ≤ 100` # Example: Input: ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` Output: ``` 6 ``` # Explanation: - The largest rectangle of 1s has an area of 6 (3 rows × 2 columns). Hint: - This problem can be reduced to the problem of finding the largest rectangle of 1s in a binary histogram. Use dynamic programming to keep track of heights and calculate maximum areas.","solution":"def maximal_rectangle(matrix): if not matrix: return 0 n = len(matrix) m = len(matrix[0]) max_area = 0 heights = [0] * m for i in range(n): for j in range(m): heights[j] = heights[j] + 1 if matrix[i][j] == 1 else 0 max_area = max(max_area, largest_rectangle_area(heights)) return max_area def largest_rectangle_area(heights): stack = [] max_area = 0 heights.append(0) # Adding a sentinel value to pop all bars from the stack for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() # Remove the sentinel value return max_area"},{"question":"Develop a function `min_operations_to_make_equal(arr)` that takes as input a list of positive integers `arr` and returns the minimum number of operations required to make all elements of the list equal. In one operation, you can either increment or decrement each element of the list by 1. # Input - A list of positive integers `arr` where the length of the list is between 1 and 100,000 inclusive, and each element in the list is between 1 and 100,000 inclusive. # Output - An integer representing the minimum number of operations required to make all elements of the list equal. # Example Input ``` [1, 2, 3] ``` Output ``` 2 ``` Input ``` [10, 10, 10, 10] ``` Output ``` 0 ``` Input ``` [10, 20, 30] ``` Output ``` 20 ``` # Explanation In the first example, one possible way to make all elements equal is: - Increment the first element 1 to 2 (1 operation) - Decrement the third element 3 to 2 (1 operation) - The final list is [2, 2, 2], and total operations is 2. In the second example, all elements are already equal, so zero operations are required. In the third example, we can make all elements equal to 20: - Increment the first element 10 by 10 results in 20 (10 operations) - Decrement the third element 30 by 10 results in 20 (10 operations) - The final list is [20, 20, 20], and total operations is 20.","solution":"def min_operations_to_make_equal(arr): Returns the minimum number of operations required to make all elements of the list equal by either incrementing or decrementing each element by 1 in each operation. if not arr: return 0 # sort the array to find the median arr.sort() # choose the median as the target value to minimize the total operations median = arr[len(arr) // 2] # calculate the total operations to make all elements equal to median min_operations = sum(abs(x - median) for x in arr) return min_operations"},{"question":"Tamara loves arranging her bookshelf. She has `n` books, each requiring a specific block of space on the bookshelf, which is exactly `b_i` units wide. Her bookshelf, however, can hold a maximum of only `k` books in total, regardless of their width. Moreover, the bookshelf has a fixed total width `S` units available for all books combined. Help Tamara figure out the maximum number of books she can place on her bookshelf without exceeding the total width `S` and ensuring that she doesn\'t exceed the count limit `k`. Input The first line contains three integers `n`, `k`, and `S` (1 ≤ n ≤ 100, 1 ≤ k ≤ 100, 1 ≤ S ≤ 10^4) — the number of books, the maximum number of books that can be placed on the bookshelf, and the total width of the bookshelf in units. The second line contains `n` integers `b_i` (1 ≤ b_i ≤ 10^4) — the widths of the books. Output Print one integer — the maximum number of books Tamara can place on her bookshelf. Examples Input 5 3 10 2 3 1 5 4 Output 3 Input 4 2 7 3 8 4 2 Output 2 Input 6 2 5 3 3 3 3 3 3 Output 1 Note In the first example, Tamara can place the books with widths 2, 3, and 4 for a total of 3 books and a width sum of 9, which does not exceed the width `S`. In the second example, Tamara can place the book with width 3 and another book with width 2, for a total width of 5 and 2 books. In the third example, no combination of 2 books will fit within the width constraint `S`, so only one book with width 3 can fit. Hence the output is 1.","solution":"def max_books(n, k, S, widths): Returns the maximum number of books that can be placed on the bookshelf without exceeding the total width S and ensuring that the total number of books doesn\'t exceed count limit k. Parameters: n (int): Number of books k (int): Maximum number of books allowed on the shelf S (int): Total available width on the shelf widths (list of int): List of widths of each book Returns: int: Maximum number of books that can be placed on the shelf widths.sort() # Sort widths in ascending order total_width = 0 book_count = 0 for width in widths: if book_count < k and total_width + width <= S: total_width += width book_count += 1 else: break return book_count"},{"question":"In a computer game, players earn points for completing different kinds of tasks. Each task has a specific number of points associated with it, and completing the same task multiple times results in earning those points as many times. Given a list of tasks completed by a player and the points associated with each task, calculate the total score of the player. Input: - The first line contains an integer n (1 le n le 100), the number of different types of tasks. - The next n lines each contain a string and an integer separated by a space, representing the task name (a string with 1 to 50 characters) and the points the player gets for completing that task. - The next line contains an integer m (1 le m le 100), the number of tasks completed. - The next m lines each contain a string, representing the task that was completed by the player. Output: - Output the total score the player earned. Example Input 3 collect_coins 10 defeat_enemy 20 find_treasure 50 5 collect_coins defeat_enemy collect_coins find_treasure defeat_enemy Output 110","solution":"def calculate_total_score(n, task_points, m, completed_tasks): points_dict = {} for task, points in task_points: points_dict[task] = points total_score = 0 for task in completed_tasks: if task in points_dict: total_score += points_dict[task] return total_score"},{"question":"You are given a list of integers. If the sum of the integers is even, print the maximum integer in the list; if the sum is odd, print the minimum integer in the list. Constraints * The list contains 2 to 5 integers. * Each integer in the list is between -1000 and 1000, inclusive. Input Input is given from Standard Input in the following format: n (number of integers) a_1 a_2 ... a_n (space-separated integers of the list) Output If the sum of the integers is even, print the maximum integer in the list; if the sum is odd, print the minimum integer in the list. Examples Input 3 1 -5 8 Output 8 Input 4 2 4 6 8 Output 8","solution":"def process_integers(n, integers): Given a list of integers, prints the maximum integer if the sum of the integers is even, otherwise prints the minimum integer. Args: n (int): The number of integers in the list. integers (list of int): The list of integers. total_sum = sum(integers) if total_sum % 2 == 0: print(max(integers)) else: print(min(integers))"},{"question":"Alice is playing a game on a tree with 𝑛 nodes rooted at node 1. Each edge of the tree has a positive integer value associated with it representing the cost to traverse that edge. Alice wants to determine the minimum cost required to visit all nodes from the root node. However, Alice can choose to cut several edges to facilitate her journey. When an edge is cut, it divides the tree into two subtrees and Alice can still travel to any node within the subtree she currently is in without any additional cost. Your task is to help Alice find the minimum cost to visit all nodes from the root node. You should not consider the cost of edges that are cut as after cutting, traversing within the subtrees becomes free. Input The first line contains an integer 𝑛 (2 ≤ 𝑛 ≤ 105) — the number of nodes. Each of the next 𝑛−1 lines contains three integers 𝑢, 𝑣, and 𝑤 (1 ≤ 𝑢, 𝑣 ≤ 𝑛, 1 ≤ 𝑤 ≤ 109), meaning there is an edge between nodes 𝑢 and 𝑣 of weight 𝑤. Output Print a single integer, the minimum cost required for Alice to visit all nodes from the root node. Examples Input 5 1 2 3 1 3 2 3 4 4 3 5 1 Output 3 Input 4 1 2 1 1 3 2 2 4 4 Output 3 Note In the first example, Alice can cut the edge between nodes 1 and 3 resulting in cutting cost 2 and then she can visit nodes 1 and 2 in one subtree and nodes 3, 4, and 5 in another subtree with the cost of 1 for the edge between 3 and 5. Total cost is 2 + 1 = 3. In the second example, cutting the edge between nodes 1 and 2 results in a cutting cost of 1 and visiting nodes 3 and 4 requires a cost of 2 + 4 = 6, which is not optimal. Thus, cutting edge between nodes 1 and 3 results in a cutting cost of 2 and visiting nodes 2 and 4 requires a cost of 1. Total cost is 2 + 1 = 3.","solution":"def min_cost_to_visit_all_nodes(n, edges): # We only need to account for the lightest edge, because that is the minimum cost # to visit all nodes when we cut one of the edges. # Alice will connect all the remaining nodes for free. min_edge = min(edges, key=lambda x: x[2]) return min_edge[2] # Example usage: # n = 5 # edges = [(1, 2, 3), (1, 3, 2), (3, 4, 4), (3, 5, 1)] # print(min_cost_to_visit_all_nodes(n, edges)) # Output: 1"},{"question":"You are given a rectangular grid representing a city map where \'1\' indicates a building and \'0\' indicates an empty lot. Buildings can only connect vertically or horizontally to form a block. Your job is to write a program that will find the number of distinct blocks of buildings and the size of the largest block. For instance, in the grid below, there are 4 distinct blocks of buildings, and the largest block covers 4 cells: 1 1 0 0 0 1 1 0 1 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 1 # Input The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns of the grid. The next m lines each contain n characters (\'1\' or \'0\') — the city map. # Output Output two integers: the number of distinct blocks and the size of the largest block. # Example Input: 5 5 11000 11011 00011 00000 10001 Output: 4 4 # Note In the given input example, the 4 blocks are: 1 1 1 1 1 1 1 1 and 1 1 Another block is a single \'1\' at the bottom left. The largest block size is thus 4.","solution":"def num_blocks_and_largest_block(m, n, grid): def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == \'0\': return 0 grid[x][y] = \'0\' # Mark the cell as visited by setting it to \'0\' size = 1 # Each cell counts as part of the block size += dfs(x-1, y) size += dfs(x+1, y) size += dfs(x, y-1) size += dfs(x, y+1) return size num_blocks = 0 largest_block = 0 for i in range(m): for j in range(n): if grid[i][j] == \'1\': num_blocks += 1 block_size = dfs(i, j) largest_block = max(largest_block, block_size) return num_blocks, largest_block"},{"question":"You are given a set of transactions for an e-commerce website. Each transaction contains a unique identifier, the name of the item, and the amount spent. The administrator of the website wants to analyze the data to find out the total amount spent on each unique item. Your task is to write a program that reads a file containing multiple transactions and outputs the total amount spent for each item. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of transactions. Each of the next n lines contains a unique identifier, the name of the item, and the amount spent on the item separated by spaces. Output For each unique item, print the name of the item and the total amount spent on that item. The output should be sorted in ascending order by the name of the item. Example Input ``` 5 1 Shoes 50 2 Shirt 20 3 Shoes 30 4 Hat 15 5 Shirt 30 ``` Output ``` Hat 15 Shirt 50 Shoes 80 ```","solution":"def total_amount_spent_on_each_item(n, transactions): Calculate total amount spent on each item. Args: n (int): Number of transactions. transactions (list): List of transactions where each transaction is represented as a tuple (id, item_name, amount). Returns: dict: Dictionary where keys are item names and values are total amounts spent. item_totals = {} for transaction in transactions: _, item_name, amount = transaction amount = int(amount) if item_name in item_totals: item_totals[item_name] += amount else: item_totals[item_name] = amount sorted_items = sorted(item_totals.items()) return sorted_items # Reading input from a filename def read_transactions(filename): with open(filename, \'r\') as file: lines = file.readlines() n = int(lines[0].strip()) transactions = [] for line in lines[1:]: transactions.append(tuple(line.strip().split())) return n, transactions"},{"question":"You are given a list of employees working at a company. Each employee has an `id`, a `manager_id`, a `rating`, and a `salary`. You are also given a series of queries to update salaries, retrieve current salary data, and calculate the total rating of employees under a certain manager. Input Format The input format is as follows: ``` N Q id_0 manager_id_0 rating_0 salary_0 id_1 manager_id_1 rating_1 salary_1 : : id_{N - 1} manager_id_{N - 1} rating_{N - 1} salary_{N - 1} query_0 query_1 : : query_{Q - 1} ``` Each query is one of the three formats: ``` 1 id salary # Update the salary of the employee with given id 2 id # Retrieve the salary of the employee with given id 3 manager_id # Calculate and return the total rating of the employees under the given manager ``` Output Format For each query of type `2` and `3`, print the result in one line. Constraints * N ≤ 300000 * Q ≤ 100000 * Each id is unique and between `0` and `N-1` * manager_id is -1 for the CEO (i.e., top most manager) * 1 ≤ salary ≤ 10^6 * 1 ≤ rating ≤ 100 Scoring * Subtask 1: (100 points) - N, Q ≤ 5000 * Subtask 2: (200 points) - `manager_id` ≤ 2 for all valid ids * Subtask 3: (300 points) - There are no queries of type `3` * Subtask 4: (400 points) - There are no additional constraints Sample Input ``` 5 6 0 -1 75 1000 1 0 80 2000 2 0 70 1500 3 1 90 3000 4 2 60 4000 2 2 1 3 3500 2 3 3 0 3 1 3 -1 ``` Sample Output ``` 1500 3500 375 170 375 ``` Explanation: 1. Retrieve the salary of the employee with `id 2` (Output: 1500) 2. Update the salary of the employee with `id 3` to 3500 3. Retrieve the salary of the employee with `id 3` (Output: 3500) 4. Calculate the total rating of employees under `manager_id 0` (Output: 80 + 70 + 90 + 60 = 300) 5. Calculate the total rating of employees under `manager_id 1` (Output: 90) 6. Calculate the total rating of all employees (CEO is `manager_id -1`) (Output: 75 + 80 + 70 + 90 + 60 = 375)","solution":"class Employee: def __init__(self, id, manager_id, rating, salary): self.id = id self.manager_id = manager_id self.rating = rating self.salary = salary def process_employee_data(N, Q, employees_data, queries): employees = {} manager_to_employees = {} # Construct employee objects and create mapping for data in employees_data: id, manager_id, rating, salary = data employee = Employee(id, manager_id, rating, salary) employees[id] = employee if manager_id not in manager_to_employees: manager_to_employees[manager_id] = [] manager_to_employees[manager_id].append(id) result = [] for query in queries: parts = query.split() type = int(parts[0]) if type == 1: id = int(parts[1]) salary = int(parts[2]) employees[id].salary = salary elif type == 2: id = int(parts[1]) result.append(employees[id].salary) elif type == 3: manager_id = int(parts[1]) total_rating = 0 if manager_id in manager_to_employees: to_process = list(manager_to_employees[manager_id]) while to_process: emp_id = to_process.pop() total_rating += employees[emp_id].rating if emp_id in manager_to_employees: to_process.extend(manager_to_employees[emp_id]) result.append(total_rating) return result"},{"question":"There are N elements in a list which represent heights of various block stacks. Two players, Alex and Bob, will play a game with these blocks. The game proceeds as follows: - Alex will place the blocks in any order he wishes to form a single stack. - Then, Bob can repeatedly swap any two adjacent blocks that are different in height, as many times as he wishes. Assume that Alex acts optimally to minimize the height of the tallest block in the final stack that Bob will form, and Bob acts optimally to maximize the height of the tallest block in the final stack. Find the height of the tallest block in the final stack. Constraints * 1 ≦ N ≦ 2000 * 1 ≦ height_i ≦ 10^9 Input The input is given from Standard Input in the following format: N height_1 height_2 … height_N Output Print the height of the tallest block in the final stack. Examples Input 5 1 3 5 7 9 Output 9 Input 4 1 2 3 4 Output 4","solution":"def tallest_block_after_game(n, heights): Given the heights of blocks, returns the height of the tallest block in the final stack after both Alex and Bob play optimally. Parameters: n (int): Number of blocks. heights (List[int]): Heights of the blocks. Returns: int: Height of the tallest block in the final stack. return max(heights)"},{"question":"You are given several logs that hold the start and end times for various events. Each log contains two numbers which indicate the start and end times of an event, respectively. The goal is to find the maximum number of events that are overlapping at any given time. # Example Given the following input: ``` 4 1 5 2 6 4 7 5 8 ``` - Event 1: from 1 to 5 - Event 2: from 2 to 6 - Event 3: from 4 to 7 - Event 4: from 5 to 8 The maximum number of overlapping events occurs at time 5, when Events 2, 3, and 4 all overlap. # Input - `n` the number of events (1 ≤ n ≤ 10^5) - Each of the next `n` lines contains two integers `start` and `end` (1 ≤ start ≤ end ≤ 10^5) representing the start and end times of each event. # Output Output a single integer, the maximum number of overlapping events at any given time. # Example Input ``` 4 1 5 2 6 4 7 5 8 ``` # Example Output ``` 3 ``` # Note In this example, the events overlap as follows: - From time 1 to 2: 1 event. - From time 2 to 4: 2 events. - From time 4 to 5: 3 events. - From time 5 to 6: 3 events. - From time 6 to 7: 2 events. - From time 7 to 8: 1 event. So, the maximum overlap is `3`.","solution":"def max_overlapping_events(events): Returns the maximum number of overlapping events at any given time. points = [] for start, end in events: points.append((start, \'start\')) points.append((end, \'end\')) points.sort() max_overlap = 0 current_overlap = 0 for point in points: if point[1] == \'start\': current_overlap += 1 max_overlap = max(max_overlap, current_overlap) else: current_overlap -= 1 return max_overlap # Example usage: n = 4 events = [ (1, 5), (2, 6), (4, 7), (5, 8) ] print(max_overlapping_events(events)) # Output: 3"},{"question":"You are running a series of coding contests, and you need to monitor the progress of the participants. Each participant is awarded a score for each problem they solve correctly. You will write a program to determine the sum of scores for each participant based on their performance. The format for input is as follows: - A sequence of multiple datasets, each representing a contest, is provided. - Each dataset consists of multiple lines. The first line contains an integer `n` (1 <= n <= 100), representing the number of participants. - Each of the next `n` lines contains a single integer, representing the score achieved by that participant in the contest. - The end of input is indicated by a single line with zero. For each dataset, the program should output the total score for each participant. Input The input consists of multiple datasets as described above. Output The output should consist of the sums of scores for each participant, one per line for each dataset. # Example Input ``` 3 50 60 40 2 80 90 4 30 20 10 40 0 ``` Output ``` 150 170 100 ``` Note: - In the first dataset, there are 3 participants with scores 50, 60, and 40. - The total score for these participants are 150. - The second dataset has 2 participants with scores 80 and 90, whose total score is 170. - The third dataset has 4 participants with scores 30, 20, 10, and 40, with a total score of 100.","solution":"def calculate_total_scores(input_data): This function processes multiple contest datasets and returns the sum of scores for each dataset. :param input_data: List of strings, where each string represents a line of input :return: List of integers, each integer is the total score of a dataset results = [] index = 0 while index < len(input_data): n = int(input_data[index]) if n == 0: break index += 1 total_score = 0 for _ in range(n): total_score += int(input_data[index]) index += 1 results.append(total_score) return results"},{"question":"Background At a secret intelligence agency, one of the crucial tasks is to securely transmit messages. To ensure the highest level of security, they use an encryption method involving prime numbers and modular arithmetic. Specifically, the encryption algorithm employs a property of prime numbers where any integer (a) raised to the power of (p-1) (where (p) is a prime number) is congruent to 1 modulo (p). This is known as Fermat\'s Little Theorem. Problem Given two integers (a) and (p) such that (p) is a prime number and (1 leq a leq 10^9), determine (a^{p-1} mod p). Constraints The input satisfies the following conditions. * (2 leq p leq 10^9 + 7) * (1 leq a leq 10^9) * (p) is guaranteed to be a prime number Input (a) and (p) are given on a single line separated by a space. Output Output the result of (a^{p-1} mod p) on a single line. Examples Input 7 13 Output 1 Input 10 17 Output 1 Input 123456789 1000000007 Output 1","solution":"def fermat_little_theorem(a, p): Returns a^(p-1) % p based on Fermat\'s Little Theorem. return pow(a, p-1, p)"},{"question":"A company is organizing a marathon, and there are N runners registered for the event. Each runner has a unique fitness level denoted by an integer. The runners are asked to form pairs for the marathon. The pairing is done based on their fitness levels to balance the teams. To form the pairs, the company follows these rules: 1. The pair\'s combined fitness level is minimized to ensure balanced teams. 2. Each runner must be part of exactly one pair. 3. If N is odd, one runner will not have a partner and will run alone. Given the fitness levels of the runners, determine the pairs such that the sum of differences in each pair is minimized. Input The first line contains a single integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of runners. - The second line contains N integers, representing the fitness levels of the runners. Output For each test case, print the list of pairs in the format (fitness1, fitness2) such that the sum of absolute differences is minimized. If there\'s an odd runner, print their fitness level separately after the pairs. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100000 1 ≤ Fitness Level ≤ 10^7 SAMPLE INPUT 2 5 4 2 7 1 8 4 10 1 8 12 SAMPLE OUTPUT (1, 2) (4, 7) (8) (1, 8) (10, 12) Explanation In the first test case: Pairing the runner with fitness level 1 with the runner with fitness level 2 gives the minimum difference of 1. The next pair can be (4, 7) with a difference of 3, and since there are odd runners, 8 runs alone. In the second test case: Pairing the runner with fitness level 1 with the runner with fitness level 8 gives the minimum difference of 7. The next pair is (10, 12) with a difference of 2.","solution":"def form_pairs(fitness_levels): Forms pairs of runners based on their fitness levels to minimize the sum of absolute differences :param fitness_levels: List of integers representing fitness levels :return: A list of tuples representing the pairs and a separate integer if there is an odd runner fitness_levels.sort() pairs = [] while len(fitness_levels) > 1: pairs.append((fitness_levels.pop(0), fitness_levels.pop(0))) # If there is an odd runner left, include them separately if fitness_levels: return pairs, fitness_levels[0] else: return pairs, None def marathon_pairs(t, test_cases): Processes multiple test cases for forming marathon pairs. :param t: Number of test cases :param test_cases: List of tuples where each tuple contains (n, fitness_levels) :return: List of results for each test case results = [] for i in range(t): n, fitness_levels = test_cases[i] results.append(form_pairs(fitness_levels)) return results"},{"question":"A famous arrangement problem is the Tower of Hanoi. You are given three rods and N disks of different sizes which can slide onto any rod. The puzzle starts with the disks neatly stacked in ascending order of size on one rod, the smallest at the top, making a conical shape. The objective of the puzzle is to move the entire stack to another rod, obeying the following simple rules: 1. Only one disk can be moved at a time. 2. Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or on an empty rod. 3. No disk may be placed on top of a smaller disk. Write a program to determine the minimum number of moves required to solve the Tower of Hanoi puzzle with N disks. You should output each move in the format “Move disk K from rod A to rod B”. Input The first line of input contains an integer T denoting the number of test cases. The next T lines contain one integer N each, denoting the number of disks. Output For each test case, output the minimum number of moves required to solve the Tower of Hanoi puzzle with N disks. After that, output each move on a new line in the format “Move disk K from rod A to rod B”. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 15 Example Input: 2 2 3 Output: 3 Move disk 1 from rod 1 to rod 2 Move disk 2 from rod 1 to rod 3 Move disk 1 from rod 2 to rod 3 7 Move disk 1 from rod 1 to rod 3 Move disk 2 from rod 1 to rod 2 Move disk 1 from rod 3 to rod 2 Move disk 3 from rod 1 to rod 3 Move disk 1 from rod 2 to rod 1 Move disk 2 from rod 2 to rod 3 Move disk 1 from rod 1 to rod 3","solution":"def tower_of_hanoi(n, source, target, auxiliary, moves): if n == 1: moves.append(f\\"Move disk 1 from rod {source} to rod {target}\\") return tower_of_hanoi(n-1, source, auxiliary, target, moves) moves.append(f\\"Move disk {n} from rod {source} to rod {target}\\") tower_of_hanoi(n-1, auxiliary, target, source, moves) def solve_tower_of_hanoi(test_cases): results = [] for n in test_cases: moves = [] tower_of_hanoi(n, 1, 3, 2, moves) results.append((2**n - 1, moves)) return results"},{"question":"Water distribution network in a city consists of n reservoirs connected by m one-way pipes. An inherent problem in such systems is that low pressure can arise in some reservoirs if too many reservoirs are dependent on a single reservoir for their water supply. You are given a water distribution network represented as a directed graph where each node represents a reservoir and each edge represents a one-way pipe from one reservoir to another. Your task is to determine if there exists any reservoir in the network from which all other reservoirs are reachable. Input - The first line of input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5). - The following m lines each contain two integers u and v (1 ≤ u, v ≤ n) indicating a one-way pipe from reservoir u to reservoir v. Output Output a single integer representing the identifier of the reservoir from which all other reservoirs are reachable. If no such reservoir exists, output -1. Example Input 4 4 1 2 2 3 3 4 1 3 Output 1 Note In this example, reservoir 1 is the starting point from which water can reach all other reservoirs. Hence, the answer is 1. If there were no such reservoir, the answer would be -1.","solution":"from collections import defaultdict, deque def find_reachable_node(n, m, edges): # Helper function to perform BFS def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited # Create a directed graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Start with any node and check all nodes reachable from that node start_node = 1 for i in range(1, n + 1): if i in graph: start_node = i break reachable_from_start = bfs(start_node) # If we cannot reach all nodes from the start_node if len(reachable_from_start) != n: return -1 # Check if every node can reach this start_node reverse_graph = defaultdict(list) for u, v in edges: reverse_graph[v].append(u) all_reach_start = bfs(start_node) if len(all_reach_start) == n: return start_node else: return -1 # Example input n = 4 m = 4 edges = [(1, 2), (2, 3), (3, 4), (1, 3)] print(find_reachable_node(n, m, edges)) # Output should be 1"},{"question":"# Given an integer array `nums` and an integer `k`, your task is to find the `k`-th largest element in the sorted order of the array. You are required to implement the function `findKthLargest(nums, k)`. The function should return an integer representing the `k`-th largest element in the array. Input: - An integer array `nums` of length `n` where `1 <= n <= 10^4` and `-10^4 <= nums[i] <= 10^4`. - An integer `k` where `1 <= k <= n`. ```python def findKthLargest(nums, k): # Your code here pass ``` You must implement this function using an efficient algorithm considering both time and space complexity. Examples: # Example 1: ```plaintext Input: nums = [3, 2, 1, 5, 6, 4], k = 2 Output: 5 Explanation: The second largest element in the sorted order is 5. ``` # Example 2: ```plaintext Input: nums = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4 Output: 4 Explanation: The fourth largest element is 4. ``` Constraints: - The function should handle all edge cases such as arrays with duplicate elements. - You should aim for a solution with O(n) runtime, which might involve using techniques such as Quickselect or a Min-Heap for k largest elements. Notes: - You can use Python\'s in-built libraries and functions for sorting or heap operations if needed. - Focus on writing clean, readable, and efficient code.","solution":"import heapq def findKthLargest(nums, k): Returns the k-th largest element in the sorted order of the array. # Use a min-heap to keep track of the largest k elements min_heap = nums[:k] heapq.heapify(min_heap) for num in nums[k:]: if num > min_heap[0]: heapq.heappushpop(min_heap, num) # The root of the heap will be the k-th largest element return min_heap[0]"},{"question":"Input The input consists of a single string s (1 ≤ |s| ≤ 50), where |s| denotes the length of the string. The string s is guaranteed to contain only lowercase alphabetic characters. Output Output the length of the longest substring where all characters are unique. Example Input abcabcbb Output 3 # Explanation In the example, the longest substring with all unique characters is \\"abc\\", which has a length of 3.","solution":"def longest_unique_substring_length(s): Returns the length of the longest substring with all unique characters. if not s: return 0 max_length = 0 start = 0 seen_chars = {} for end, char in enumerate(s): if char in seen_chars and seen_chars[char] >= start: start = seen_chars[char] + 1 seen_chars[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a program that simulates a simple voting system for a class election. The input consists of a sequence of votes, where each vote is represented by a student name. The end of the input is indicated by a line containing the word \\"END\\". Your program should determine the winner of the election. If there is a tie (i.e., two or more students received the highest number of votes), the program should print \\"TIE\\". If no votes are cast, the program should print \\"NO VOTES\\". Input The input is a sequence of strings, each on a new line, representing the name of a student who has received a vote. The sequence ends with the word \\"END\\". Each name will be a string of at most 50 characters and will consist of only the letters \'a\' to \'z\' or \'A\' to \'Z\'. Output Print the name of the student with the most votes. If there is a tie, print \\"TIE\\". If no votes are cast, print \\"NO VOTES\\". Example Input Alice Bob Alice Charlie Bob END Output TIE Input END Output NO VOTES Input Alice Alice Bob Bob Alice END Output Alice","solution":"def determine_winner(votes): vote_count = {} for vote in votes: if vote != \\"END\\": if vote in vote_count: vote_count[vote] += 1 else: vote_count[vote] = 1 if len(vote_count) == 0: return \\"NO VOTES\\" # Find the student with the maximum votes max_votes = max(vote_count.values()) # Check for tie winners = [name for name, votes in vote_count.items() if votes == max_votes] if len(winners) > 1: return \\"TIE\\" else: return winners[0]"},{"question":"There are n houses built in a line, each house having a certain amount of money stashed. Unfortunately, the houses are not connected - you cannot rob adjacent houses due to the alarm system installed by the owners. Write a program to find the maximum amount of money you can rob tonight without alerting the police. Input Format The first line contains a single integer n, the number of houses. The second line contains n space-separated integers representing the amount of money in each house (in order from the first house to the nth house). Output Format Print the maximum amount of money you can rob. Constraints 1 ≤ n ≤ 1000 0 ≤ Amount of money in each house ≤ 1000 SAMPLE INPUT 4 1 2 9 4 SAMPLE OUTPUT 10","solution":"def rob_houses(houses): Given a list of non-negative integers representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police. n = len(houses) if n == 0: return 0 if n == 1: return houses[0] dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + houses[i]) return dp[-1] # For the input example mentioned in the question n = 4 houses = [1, 2, 9, 4] print(rob_houses(houses)) # Output should be 10"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid contains either a \'.\' which represents a passable cell or a \'#\' which represents an impassable cell. You can move from a passable cell to any of the adjacent passable cells (horizontally or vertically). The starting position \'S\' and the target position \'T\' are given as coordinates within the grid. Determine whether it is possible to reach the target position \'T\' from the starting position \'S\', and if so, find the shortest path. Input First line contains two integers n, m (1 ≤ n, m ≤ 1000). Each of the next n lines contains m characters, representing the grid. It is guaranteed that there is exactly one \'S\' and one \'T\' in the grid. Output If it is possible to reach the target position \'T\' from the starting position \'S\', print the length of the shortest path. Otherwise, print -1. Examples Input 4 5 S...# ..#.. .#... #.T Output 7 Input 3 3 S#. .#. T Output -1 Note In the first example, the grid looks like this: ``` S . . . # . . # . . . # . . . # # # . T ``` The shortest path from \'S\' to \'T\' is: S -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,3) -> T, with a length of 7. In the second example, it is not possible to reach \'T\' from \'S\'.","solution":"from collections import deque def shortest_path(n, m, grid): def bfs(start_x, start_y, target_x, target_y): # directions array for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start_x, start_y, 0)]) # (current x, current y, distance) visited = set((start_x, start_y)) # set of visited cells while queue: x, y, dist = queue.popleft() # check if we have reached the target if (x, y) == (target_x, target_y): return dist # explore all directions for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # not reachable start_x = start_y = target_x = target_y = -1 for i in range(n): for j in range(m): if grid[i][j] == \'S\': start_x, start_y = i, j elif grid[i][j] == \'T\': target_x, target_y = i, j # Call bfs to find the shortest path return bfs(start_x, start_y, target_x, target_y)"},{"question":"The kingdom of Astoria has a network of N towns connected by M bidirectional roads. Each road connects exactly two towns and different roads can connect the same pair of towns. Schedules for travelling on each road are precisely maintained. The king wants to arrange messengers who can disseminate royal decrees to every town in Astoria via these roads efficiently. Every road has a travel time associated and the king wants to minimize the total travel time for all the messengers collectively. The messengers must ensure that there is a safe path from the capital, town 1, to every other town such that the total travel time is minimized. Essentially, you need to find a way to ensure that every town is reachable from the capital while minimizing the total travel time of the selected roads. Input The first line of the input contains two integers N and M (2 ≤ N ≤ 200, 1 ≤ M ≤ 50 000) — the number of towns and the number of roads, respectively. The following M lines contain information about each road. Each line contains three integers xi, yi, ti, where xi and yi are the numbers of the towns that the road connects and ti is the travel time required to traverse the i-th road (1 ≤ xi, yi ≤ N, 1 ≤ ti ≤ 109). Towns are numbered from 1 to N. Output The output should contain the minimum total travel time required to ensure that all towns are reachable from the capital. Examples Input 4 5 1 2 1 2 3 2 3 4 2 1 3 2 1 4 3 Output 5","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): result = [] i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: x, y, t = edges[i] i = i + 1 xroot = find(parent, x - 1) yroot = find(parent, y - 1) if xroot != yroot: e = e + 1 result.append((x, y, t)) union(parent, rank, xroot, yroot) minimum_travel_time = sum([t for _, _, t in result]) return minimum_travel_time def minimum_travel_time(n, m, roads): return kruskal(n, roads)"},{"question":"Emily is a software engineer who wants to analyze the frequency of words in a given paragraph. She needs to create a function that reads a paragraph (a string) and calculates the frequency of each unique word, ignoring the case. The word is defined as a sequence of alphanumeric characters and apostrophes. Punctuation marks should be ignored. The function should then return a dictionary containing words as keys and their frequencies as values. The words in the dictionary should be sorted in descending order of frequency. In case of a tie, sort the words alphabetically (ignoring the case). INPUT: A single string paragraph. OUTPUT: A dictionary with words as keys and their frequency counts as values. CONSTRAINTS: 1 <= length of paragraph <= 1000. SAMPLE INPUT \\"This is a test. This test is only a test.\\" SAMPLE OUTPUT {\'test\': 3, \'a\': 2, \'is\': 2, \'this\': 2, \'only\': 1} Explanation The function first converts the paragraph to lowercase and removes punctuation marks. Then it calculates the frequency of each word. The output dictionary is sorted by frequency in descending order; in case of ties, words are sorted alphabetically.","solution":"import re from collections import Counter def word_frequency(paragraph): Calculates the frequency of each word in the given paragraph, ignoring case and punctuation. Returns a dictionary of words and their frequencies sorted in descending order of frequency. In case of a tie, words are sorted alphabetically. Parameters: paragraph (str): The input paragraph. Returns: dict: A dictionary with words as keys and their frequencies as values. # Convert paragraph to lowercase paragraph = paragraph.lower() # Use regex to find all words (sequences of alphanumeric characters and apostrophes) words = re.findall(r\'bw+\'?w*b\', paragraph) # Get the frequency of each word using Counter word_count = Counter(words) # Sort the dictionary by frequency in descending order, then by word alphabetically sorted_word_count = dict(sorted(word_count.items(), key=lambda item: (-item[1], item[0]))) return sorted_word_count"},{"question":"Given an array of positive integers, you are allowed to perform the following operation on the array any number of times: choose any two consecutive elements of the array, say x and y (x is before y in the array), and replace them with a single element `gcd(x, y)`. Your task is to determine the minimum possible value of the only remaining element after performing the operations any number of times. Input The first line of input contains an integer n (1 ≤ n ≤ 105) — the number of elements in the array. The next line contains n space-separated positive integers a1, a2, ..., an (1 ≤ ai ≤ 106) — the elements of the array. Output Print a single integer — the minimum possible value of the only remaining element after performing the given operation any number of times. Examples Input 4 6 9 15 25 Output 1 Input 3 5 10 15 Output 5 Note In the first sample case, we can reduce the array as follows: - Replace elements 6 and 9 with gcd(6, 9) = 3, array becomes [3, 15, 25]. - Replace elements 3 and 15 with gcd(3, 15) = 3, array becomes [3, 25]. - Replace elements 3 and 25 with gcd(3, 25) = 1, array becomes [1]. In the second sample case, we can reduce the array as follows: - Replace elements 5 and 10 with gcd(5, 10) = 5, array becomes [5, 15]. - Replace elements 5 and 15 with gcd(5, 15) = 5, array becomes [5]. Observe that in the second sample case, the minimum remaining element is 5, which is the gcd of all the elements in the array.","solution":"from math import gcd from functools import reduce def min_possible_value(arr): Finds the minimum possible value by performing the given GCD operation on consecutive elements. Parameters: arr (list): List of positive integers. Returns: int: The minimum possible value. # Find the GCD of the entire array return reduce(gcd, arr)"},{"question":"A large software company wants to analyze its codebase to improve its infrastructure. The company uses \'Include\' statements in their code to manage dependencies between different files. However, they suspect that there might be circular dependencies which are undesirable. Your task is to help the company identify these circular dependencies. Given a set of files with their \'Include\' relationships, your task is to determine if there exists a circular dependency between these files. A circular dependency occurs when a file indirectly or directly includes itself. Each file is represented by an integer from 1 to n and each \'Include\' statement is represented by a pair of integers (ai, bi) meaning file ai includes file bi. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 3000) — the number of files and the total number of \'Include\' statements, respectively. Each of the next m lines contains a pair of integers ai, bi (1 ≤ ai, bi ≤ n; ai ≠ bi) representing that file ai includes file bi. No pair (ai, bi) will be repeated in the input. Output Output \\"YES\\" if there exists a circular dependency; otherwise, print \\"NO\\". Examples Input 4 4 1 2 2 3 3 4 4 1 Output YES Input 4 3 1 2 2 3 3 4 Output NO","solution":"from collections import defaultdict def has_circular_dependency(n, m, includes): graph = defaultdict(list) for a, b in includes: graph[a].append(b) # Depth First Search to detect cycles def dfs(node, visited, stack): visited.add(node) stack.add(node) for neighbor in graph[node]: if neighbor not in visited: if dfs(neighbor, visited, stack): return True elif neighbor in stack: return True stack.remove(node) return False visited = set() for i in range(1, n + 1): if i not in visited: if dfs(i, visited, set()): return \\"YES\\" return \\"NO\\""},{"question":"Lara is a software developer who is working on optimizing the speed of processing large datasets. One part of her task involves identifying and merging overlapping intervals within a list of intervals. Given a list of intervals where each interval is represented as a pair of integers (start, end), Lara needs to merge all overlapping intervals and return a list of the merged intervals. Two intervals [a, b] and [c, d] are considered overlapping if a ≤ d and c ≤ b. The result should be a list of non-overlapping intervals that cover all the intervals in the input. Your task is to help Lara by implementing a function that merges overlapping intervals. Function Signature: ```python def merge_intervals(intervals: List[List[int]]) -> List[List[int]]: ``` # Input: - The function `merge_intervals` takes a single argument, `intervals`, which is a list of lists, with each sub-list containing exactly 2 integers, representing the start and end of an interval. # Output: - The function should return a list of lists, where each sub-list represents a merged interval in the form [start, end]. # Constraints: - The list of intervals can be empty, meaning there are no intervals to merge. - The list of intervals can contain at most 10^4 intervals. - The interval values can vary between -10^6 and 10^6. - The intervals may not be sorted. # Example: ```python intervals = [[1, 3], [2, 6], [8, 10], [15, 18]] print(merge_intervals(intervals)) # Output: [[1, 6], [8, 10], [15, 18]] intervals = [[1, 4], [4, 5]] print(merge_intervals(intervals)) # Output: [[1, 5]] ``` # Explanation: - In the first example, the intervals [1, 3] and [2, 6] overlap, so they are merged into [1, 6]. The other intervals do not overlap. - In the second example, the intervals [1, 4] and [4, 5] are touching and thus are considered overlapping, so they are merged into [1, 5].","solution":"from typing import List def merge_intervals(intervals: List[List[int]]) -> List[List[int]]: Merges overlapping intervals and returns a list of merged intervals. if not intervals: return [] # Sort the intervals by the starting time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If merged list is empty or current interval does not overlap with the last merged interval, add it to merged list if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # There is overlap, merge intervals by updating the end time of the last merged interval merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"Matrix Spiral Sum You are given a matrix with N rows and M columns filled with integers. Your task is to compute the sum of all elements in the matrix as you traverse it in a \'spiral\' order, starting from the top-left corner, moving right, then down, then left, and finally up, repeating this pattern until all elements have been summed. For example, consider the following matrix: ``` 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` Traversing the matrix in a spiral order yields: 1 -> 2 -> 3 -> 4 -> 8 -> 12 -> 16 -> 15 -> 14 -> 13 -> 9 -> 5 -> 6 -> 7 -> 11 -> 10. The sum of these elements is 136. Write a program that takes such a matrix as input and outputs the spiral sum. Input: The input consists of multiple datasets. Each dataset starts with two integers, N and M (1 ≤ N, M ≤ 10), denoting the number of rows and columns of the matrix. The following N lines contain M integers each, representing the elements of the matrix. The input ends with a line containing two zeros. Output: For each dataset, output the spiral sum of the matrix in a new line. Sample Input: ``` 3 3 1 2 3 4 5 6 7 8 9 2 4 1 2 3 4 5 6 7 8 0 0 ``` Sample Output: ``` 45 36 ``` Note: - The first dataset (3x3 matrix) has elements traversed in the order: 1 -> 2 -> 3 -> 6 -> 9 -> 8 -> 7 -> 4 -> 5. - The second dataset (2x4 matrix) has elements traversed in the order: 1 -> 2 -> 3 -> 4 -> 8 -> 7 -> 6 -> 5. - The input ends with \\"0 0\\", which should not be processed.","solution":"def spiral_sum(matrix): This function takes a matrix and returns the sum of its elements in spiral order. if not matrix or not matrix[0]: return 0 row_start, row_end = 0, len(matrix) col_start, col_end = 0, len(matrix[0]) spiral_order = [] while row_start < row_end and col_start < col_end: # Traverse Right for col in range(col_start, col_end): spiral_order.append(matrix[row_start][col]) row_start += 1 # Traverse Down for row in range(row_start, row_end): spiral_order.append(matrix[row][col_end - 1]) col_end -= 1 if row_start < row_end: # Traverse Left for col in range(col_end - 1, col_start - 1, -1): spiral_order.append(matrix[row_end - 1][col]) row_end -= 1 if col_start < col_end: # Traverse Up for row in range(row_end - 1, row_start - 1, -1): spiral_order.append(matrix[row][col_start]) col_start += 1 return sum(spiral_order) def process_matrices(input_string): This function processes multi-dataset input and returns a list of spiral sums for each dataset. lines = input_string.strip().split(\'n\') i = 0 results = [] while i < len(lines): n, m = map(int, lines[i].split()) if n == 0 and m == 0: break matrix = [] for j in range(n): matrix.append(list(map(int, lines[i + 1 + j].split()))) results.append(spiral_sum(matrix)) i += n + 1 return results"},{"question":"Joan is a math enthusiast who loves working with prime numbers. She recently learned about twin primes, which are pairs of prime numbers that have a difference of 2. For example, (3, 5), (11, 13), and (17, 19) are twin primes. Joan wants to find out how many twin prime pairs exist in a given range [L, R]. She is asking you to help her with this task. Given the bounds of the range, your job is to compute the number of twin prime pairs within that range. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains two integers L and R (1 ≤ L ≤ R ≤ 10^6) — the bounds of the range for which Joan is interested in finding twin prime pairs. Output For each test case, output a single integer: the number of twin prime pairs in the range [L, R]. Example Input 3 1 10 11 20 1 100 Output 2 2 8 Notes In the first test case, the twin prime pairs in the range [1, 10] are (3, 5) and (5, 7). In the second test case, the twin prime pairs in the range [11, 20] are (11, 13) and (17, 19). In the third test case, there are 8 twin prime pairs in the range [1, 100].","solution":"def sieve_of_eratosthenes(n): Generate a list of booleans representing whether numbers are prime up to n. is_prime = [True] * (n+1) p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n+1, p): is_prime[i] = False p += 1 is_prime[0], is_prime[1] = False, False # 0 and 1 are not prime numbers return is_prime def count_twin_primes(L, R, is_prime): count = 0 for num in range(max(2, L), R - 1): if is_prime[num] and is_prime[num + 2]: count += 1 return count def twin_prime_pairs(t, ranges): max_R = max(r[1] for r in ranges) is_prime = sieve_of_eratosthenes(max_R) results = [] for L, R in ranges: results.append(count_twin_primes(L, R, is_prime)) return results"},{"question":"You are responsible for managing a warehouse inventory system. The warehouse has n shelves, each with a certain capacity. Every day, a delivery of k distinct types of items arrives, each with a certain quantity. The items must be distributed as evenly as possible among the available shelves so that no shelf exceeds its capacity. Your task is to determine if it\'s possible to distribute all the items among the shelves without exceeding the capacities. If it\'s possible, provide a valid distribution; otherwise, return \\"Impossible\\". Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000) — the number of shelves and the number of different item types. The second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^6) — the capacities of the shelves. The third line contains m integers q_1, q_2, ..., q_m (1 ≤ q_i ≤ 10^6) — the quantities of each type of item. Output If it\'s possible to distribute all the items such that no shelf exceeds its capacity, print \\"Possible\\" and then print n lines with the distribution of items on each shelf in the format \\"shelf_i: item_1 count, item_2 count, ..., item_m count\\". If it\'s not possible, print \\"Impossible\\". Example Input 3 2 10 15 12 8 14 Output Possible shelf_1: item_1 4, item_2 5 shelf_2: item_1 2, item_2 6 shelf_3: item_1 2, item_2 3","solution":"def distribute_items(n, m, shelves, items): Checks if it\'s possible to distribute items across shelves without exceeding the shelves\' capacities and provides the distribution if possible. Args: - n: number of shelves (int) - m: number of different item types (int) - shelves: a list of integers representing the capacities of the shelves - items: a list of integers representing the quantities of each type of item Returns: - If possible, returns a list of strings representing the distribution of items on each shelf. - If not possible, returns \\"Impossible\\". total_capacity = sum(shelves) total_items = sum(items) # Check if the total capacity is sufficient if total_items > total_capacity: return \\"Impossible\\" # Distribute items distribution = [[] for _ in range(n)] shelf_indexes = list(range(n)) for item_index in range(m): remaining_quantity = items[item_index] while remaining_quantity > 0: shelf_indexes.sort(key=lambda i: shelves[i]) for i in shelf_indexes: if shelves[i] > 0: take = min(remaining_quantity, shelves[i]) distribution[i].append(f\\"item_{item_index + 1} {take}\\") shelves[i] -= take remaining_quantity -= take if remaining_quantity == 0: break if shelves[i] == 0: shelf_indexes.remove(i) break if not shelf_indexes: return \\"Impossible\\" output = [\\"Possible\\"] for i, items_on_shelf in enumerate(distribution): output.append(f\\"shelf_{i + 1}: \\" + \\", \\".join(items_on_shelf)) return output"},{"question":"You are given a series of integers. Your task is to identify the first and last positions of a given target integers in this series and return them as a tuple. The given series of integers is guaranteed to be sorted in non-decreasing order. Write a function `find_positions` that takes in two arguments - a list of integers `nums` and a target integer `target` - and returns a tuple of two integers `(first_position, last_position)` representing the first and last positions of the target in the list. If the target is not found in the list, return `(-1, -1)`. Note: - You should design your algorithm to run in O(log n) time complexity. # Function Signature: ```python def find_positions(nums: List[int], target: int) -> Tuple[int, int]: pass ``` Input * `nums` (List[int]): a list of integers sorted in non-decreasing order where 1 ≤ |nums| ≤ 10^5. * `target` (int): the integer you need to find in the list of integers, where -10^9 ≤ target ≤ 10^9. Output * Return a tuple of two integers indicating the start and the end positions of the target in the list. # Examples: Example 1: ```python nums = [5, 7, 7, 8, 8, 10] target = 8 find_positions(nums, target) ``` Output: ```plaintext (3, 4) ``` Example 2: ```python nums = [5, 7, 7, 8, 8, 10] target = 6 find_positions(nums, target) ``` Output: ```plaintext (-1, -1) ``` Example 3: ```python nums = [2, 2] target = 2 find_positions(nums, target) ``` Output: ```plaintext (0, 1) ```","solution":"from typing import List, Tuple def find_first_position(nums: List[int], target: int) -> int: left, right = 0, len(nums) - 1 first_pos = -1 while left <= right: mid = (left + right) // 2 if nums[mid] < target: left = mid + 1 elif nums[mid] > target: right = mid - 1 else: first_pos = mid right = mid - 1 # continue searching in the left half return first_pos def find_last_position(nums: List[int], target: int) -> int: left, right = 0, len(nums) - 1 last_pos = -1 while left <= right: mid = (left + right) // 2 if nums[mid] < target: left = mid + 1 elif nums[mid] > target: right = mid - 1 else: last_pos = mid left = mid + 1 # continue searching in the right half return last_pos def find_positions(nums: List[int], target: int) -> Tuple[int, int]: first_position = find_first_position(nums, target) last_position = find_last_position(nums, target) if first_position == -1 or last_position == -1: return (-1, -1) return (first_position, last_position)"},{"question":"You are given an array of integers representing the heights of towers. Your task is to determine the minimum number of tower blocks that need to be removed so that the remaining towers form a non-decreasing sequence from left to right. Input:- - The first line contains an integer `n`, the number of towers. - The second line contains `n` space-separated integers representing the heights of the towers. Output:- - Print the minimum number of tower blocks that need to be removed. SAMPLE INPUT 6 3 1 2 1 2 3 SAMPLE OUTPUT 2 Explanation: One possible way to form a non-decreasing sequence is to remove the towers with heights 3 and 1 (the first instance). The remaining sequence is [1, 2, 1, 2, 3], which is non-decreasing. Another possibility is to remove the towers with heights 1 and 2 (the middle instances), leaving the sequence [3, 1, 2, 3]. Therefore, the minimum number of tower blocks that need to be removed in this case is 2.","solution":"def min_removals_to_non_decreasing(heights): Returns the minimum number of tower blocks that need to be removed to make the sequence non-decreasing. n = len(heights) # dp[i] will store the length of the longest non-decreasing subsequence ending at index i dp = [1] * n for i in range(1, n): for j in range(i): if heights[i] >= heights[j]: dp[i] = max(dp[i], dp[j] + 1) # Length of the longest non-decreasing subsequence max_length = max(dp) # Minimum number of removals needed return n - max_length"},{"question":"Alice is an avid puzzler and enjoys solving various types of challenges. Recently, she came across a unique problem involving a string transformation. She decided to challenge you with the following task: You are given a string consisting of lowercase alphabetic characters. Your task is to transform this string by performing a series of operations. In each operation, you can pick any character in the string and move it to any position within the string. The goal is to determine the lexicographically smallest string that can be obtained after performing any number of operations. For example, given the string \\"cba\\", you can perform the following operations: 1. Move \'a\' to the start to form \\"acb\\" 2. Move \'b\' after \'a\' to form \\"abc\\" Resulting in the lexicographically smallest string \\"abc\\". Input The input consists of multiple test cases. Each test case is given in a line containing a single string s, where 1 ≤ |s| ≤ 1000 and s consists of only lowercase alphabetic characters. The input terminates with a line containing a single zero. Output For each test case, print the lexicographically smallest string that can be obtained after performing any number of operations. Example Input cba acb zxy 0 Output abc abc xyz","solution":"def lexicographically_smallest_string(inputs): Returns the lexicographically smallest string that can be obtained after performing any number of character move operations on the input strings. results = [] for s in inputs: if s == \\"0\\": break results.append(\'\'.join(sorted(s))) return results"},{"question":"You are organizing a programming contest and you want to determine the top scorer from a series of contests. Each contestant can participate in multiple contests and a score is recorded for each contest they participate in. You have data of M contests. Each contest data contains a series of records where each record contains the contestant\'s name and their respective score in that contest. You need to determine the highest total score earned by any contestant across all contests. INPUT: First line contains an integer M, the number of contests. Each of the next M blocks contains: - First integer N, the number of contestants in this contest. - Next N lines containing a string S (the contestant\'s name) and an integer P (their score in that contest). OUTPUT: Print a single integer, the highest total score earned by any contestant across all contests. CONSTRAINTS 1 ≤ M ≤ 100 1 ≤ N ≤ 100 1 ≤ P ≤ 1000 SAMPLE INPUT 2 3 Alice 50 Bob 30 Charlie 45 2 Alice 75 Bob 20 SAMPLE OUTPUT 125 Explanation - In the first contest, Alice scores 50, Bob scores 30, and Charlie scores 45. - In the second contest, Alice scores 75, and Bob scores 20. - The total scores are: Alice (50+75)=125, Bob (30+20)=50, Charlie (45)=45. - Therefore, the highest total score earned by any contestant is 125 by Alice.","solution":"def highest_total_score(M, contest_data): Determines the highest total score earned by any contestant across all contests. :param M: Integer, number of contests :param contest_data: List of tuples, each containing contest information. Each tuple contains: - N: Integer, number of contestants in the contest - contestants: List of tuples, each containing a string (contestant\'s name) and an integer (their score) :return: The highest total score earned by any contestant scores = {} for contest in contest_data: N = contest[0] contestants = contest[1] for contestant in contestants: name, score = contestant if name in scores: scores[name] += score else: scores[name] = score # Find the maximum score among all contestants highest_score = max(scores.values()) return highest_score"},{"question":"A research team in a software company is working on analyzing a dataset to identify patterns using matrix transformations. They need your help to calculate some of these transformations efficiently. One specific transformation is rotating a square matrix 90 degrees clockwise. Your task is to write a function that performs this transformation given an NxN matrix. # Input - The first line contains a single integer N (1 ≤ N ≤ 1000) — the size of the matrix. - The next N lines each contain N integers separated by spaces, representing the rows of the matrix. # Output - Output the NxN rotated matrix, with each row on a new line, and each element separated by a space. # Example 1 Input ``` 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 7 4 1 8 5 2 9 6 3 ``` # Example 2 Input ``` 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` Output ``` 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 ``` # Note Ensure your function handles the input size efficiently due to constraints on matrix size.","solution":"def rotate_matrix_90_clockwise(matrix): N = len(matrix) # Create a new matrix to hold the rotated values rotated_matrix = [[0] * N for _ in range(N)] # Perform the rotation for i in range(N): for j in range(N): rotated_matrix[j][N - i - 1] = matrix[i][j] return rotated_matrix"},{"question":"Amelia recently joined a robotics club, and she is excited to participate in their next project: building a robotic arm that sorts and stacks boxes according to their weights. Each box has a unique weight, and the robotic arm can only lift one box at a time. The main operation is to repeatedly select the lightest box among the unsorted boxes and place it on top of the sorted stack. Your task is to help Amelia by writing a function that takes a list of box weights and sorts them using the selection sort algorithm. Return the list of weights in non-decreasing order. # Function Signature ```python def selection_sort(weights: List[int]) -> List[int]: ``` # Input - `weights`: A list of integers representing the weights of the boxes. The length of the list will be between 1 and 1000 inclusive, and each element will have an absolute value between 1 and 1000 inclusive. # Output - The function should return a list of integers representing the weights of the boxes sorted in non-decreasing order. # Example Input ```python weights = [29, 10, 14, 37, 13] ``` Output ```python [10, 13, 14, 29, 37] ``` # Constraints - 1 ≤ len(weights) ≤ 1000 - 1 ≤ abs(weights[i]) ≤ 1000 for all `i`","solution":"def selection_sort(weights): Sorts a list of box weights using the selection sort algorithm. Parameters: weights (List[int]): A list of integers representing the weights of the boxes. Returns: List[int]: The list of weights sorted in non-decreasing order. n = len(weights) for i in range(n): # Find the minimum element in the remaining unsorted array min_index = i for j in range(i+1, n): if weights[j] < weights[min_index]: min_index = j # Swap the found minimum element with the first element of the unsorted part weights[i], weights[min_index] = weights[min_index], weights[i] return weights"},{"question":"A finance company has a large dataset of financial transactions stored in a file. Each transaction has a unique identifier, transaction type, amount, and timestamp. For this task, you need to develop a program to categorize transactions into three types: \\"expenses,\\" \\"income,\\" and \\"transfer.\\" The dataset is provided in a file called `transactions.csv`, where each line represents a single transaction with comma-separated values in the format: ``` transaction_id,transaction_type,amount,timestamp ``` The `transaction_type` can be one of the following values: \\"expense,\\" \\"income,\\" \\"transfer.\\" Your program needs to read this file and output the total amount for each category of transactions. # Input - A file named `transactions.csv` in the same directory as your program. # Output - Print three lines: - The first line should be the total amount of all \\"expense\\" transactions. - The second line should be the total amount of all \\"income\\" transactions. - The third line should be the total amount of all \\"transfer\\" transactions. # Constraints - Each `transaction_id` is unique and will not be repeated. - The `amount` is a floating-point number and can be negative or positive. - The number of transactions will not exceed 1,000,000. - The file `transactions.csv` will not exceed 50MB. # Example Suppose the content of `transactions.csv` is: ``` 1,expense,150.00,2023-04-01 10:20:30 2,income,2000.00,2023-04-01 12:45:00 3,expense,75.50,2023-04-01 14:30:00 4,transfer,300.00,2023-04-02 09:10:00 5,income,500.00,2023-04-03 11:00:00 ``` # Output for the example: ``` 225.50 2500.00 300.00 ``` Write a program in the language of your choice to solve this problem.","solution":"def categorize_transactions(filename): expense_total = 0.0 income_total = 0.0 transfer_total = 0.0 with open(filename, \'r\') as f: for line in f: if line.strip(): # Skip empty lines _, transaction_type, amount, _ = line.strip().split(\',\') amount = float(amount) if transaction_type == \'expense\': expense_total += amount elif transaction_type == \'income\': income_total += amount elif transaction_type == \'transfer\': transfer_total += amount print(f\\"{expense_total:.2f}\\") print(f\\"{income_total:.2f}\\") print(f\\"{transfer_total:.2f}\\")"},{"question":"You are given an integer array `nums` of length `n` and an integer `k`. In one move, you can select and remove any contiguous subarray of length `k` from the array. Your task is to determine whether it is possible to remove subarrays in such a way that the array becomes empty. You have to answer `q` independent test cases. Input The first line of the input contains one integer `q` (1 ≤ q ≤ 10^4) — the number of test cases. Then `q` test cases follow. The first line of each test case contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 2 ⋅ 10^5) — the length of `nums` and the length of the subarray to be removed in each move. The second line of each test case contains `n` integers `nums`, representing the elements of the array. It is guaranteed that the sum of `n` over all test cases does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5). Output For each test case, print \\"YES\\" (without quotes) if it is possible to make the array empty by removing subarrays of length `k` in one or more moves, otherwise print \\"NO\\". Example Input 4 6 3 1 2 3 4 5 6 5 2 1 2 3 4 5 3 1 1 2 3 4 2 4 3 2 1 Output YES NO YES YES","solution":"def is_possible_to_empty_array(q, test_cases): Function to determine if it is possible to empty the array by removing subarrays of length \'k\' in each move. Parameters: q (int): Number of test cases test_cases (list): List of tuples (n, k, nums) for each test case. Returns: list: List of results, \\"YES\\" or \\"NO\\" for each test case. results = [] for n, k, nums in test_cases: if n % k == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A delivery company has a number of delivery robots. Each robot starts at a base situated at position (0, 0) on a 2D grid. You are given the list of movements for each robot in the format \\"R X\\" where \\"R\\" is the robot number (an integer) and \\"X\\" is the movement instruction, which can be \\"U\\" (up), \\"D\\" (down), \\"L\\" (left), or \\"R\\" (right). Each movement changes the robot\'s position by one unit in the respective direction. Your task is to determine the final coordinates of each robot after all movements have been performed. Input The input is given from Standard Input in the following format: M R1 X1 R2 X2 ... RM XM Constraints * 1 ≤ M ≤ 10^4 * 1 ≤ R ≤ 100 * X will only be \\"U\\", \\"D\\", \\"L\\", or \\"R\\" Output For each robot in ascending order (from 1 to the maximum R encountered), print a line containing the final coordinates in the format \\"R: (x, y)\\". Example Input 7 1 U 2 L 1 U 2 R 1 D 2 D 1 R Output 1: (1, 1) 2: (0, -1) Input 5 3 U 3 U 3 D 3 L 3 R Output 3: (0, 1)","solution":"def robot_movements(matrix_size, movements): robot_positions = {} for movement in movements: r, x = movement.split() r = int(r) if r not in robot_positions: robot_positions[r] = [0, 0] if x == \'U\': robot_positions[r][1] += 1 elif x == \'D\': robot_positions[r][1] -= 1 elif x == \'L\': robot_positions[r][0] -= 1 elif x == \'R\': robot_positions[r][0] += 1 result = [] for r in sorted(robot_positions.keys()): result.append(f\\"{r}: ({robot_positions[r][0]}, {robot_positions[r][1]})\\") return result # Example usage: # print(robot_movements(7, [\\"1 U\\", \\"2 L\\", \\"1 U\\", \\"2 R\\", \\"1 D\\", \\"2 D\\", \\"1 R\\"])) # Output: [\'1: (1, 1)\', \'2: (0, -1)\']"},{"question":"In the kingdom of Geomatria, the royal architect is tasked with designing a special type of garden. The garden will be arranged in the shape of an L-terrace, formed by placing two rectangles side by side, with one rectangle\'s height matched with the width of the other. The architect has received an order to build several L-terraces: each defined by integer dimensions a, b, and c (1 ≤ a, b, c ≤ 100). An L-terrace can be described with two rectangles: - One rectangle with height a and width b - Another rectangle with height b and width c Creating different gardens involves changing the arrangement and rotations of the rectangles. Specifically, we want to count how many distinct L-terraces can be formed using these dimensions. Two L-terraces are considered distinct if their outlines cannot be made identical by rotation or reflection. Your task is to determine the number of distinct L-terraces that can be formed using the given dimensions. Input The input consists of three integers a, b, and c separated by spaces. Output Output the number of distinct L-terraces that can be formed using the dimensions a, b, and c. Examples Input 2 3 4 Output 1 Input 3 3 3 Output 0 Input 1 2 3 Output 1 Note In the first example, the distinct L-terrace formed is: - An L-terrace with one rectangle of size 2x3 and another of size 3x4 In the second example, since all dimensions are identical, no distinct L-terrace can be formed. In the third example, the L-terrace formed is: - An L-terrace with one rectangle of size 1x2 and another of size 2x3","solution":"def count_distinct_l_terraces(a, b, c): Returns the number of distinct L-terraces that can be formed using the given dimensions a, b, and c. if a == b == c: return 0 if a == c or a == b or b == c: return 1 return 1"},{"question":"A library is implementing a new system to manage their book inventory. Each book has a unique identifier and is associated with a genre and an author. They want to categorize the books by genre and then sort them by their unique identifiers within each genre. Additionally, each genre should be output in lexicographical order. Write a Python program that takes details of several books and outputs the sorted list by genre and then by book ID within each genre. Input The first line contains an integer N (1 ≤ N ≤ 100,000), the number of books. Each of the next N lines contains three pieces of information about a book separated by spaces: a string genre, a string author, and an integer ID (1 ≤ ID ≤ 1,000,000). The string inputs (genre and author) consist of lowercase English letters only. Output Print the books grouped by genre in lexicographical order. Within each genre, print the book IDs in ascending order. Each line of output should contain the genre, followed by the book ID and the author. Example Input 5 drama shakespeare 3421 romance austen 5789 drama ibsen 1234 romance bronte 8472 sciencefiction asimov 1024 Output drama 1234 ibsen drama 3421 shakespeare romance 5789 austen romance 8472 bronte sciencefiction 1024 asimov","solution":"def sort_books(n, book_details): Sorts the books first by genre lexicographically and then by book ID within each genre. :param n: Number of books :param book_details: List of tuples containing (genre, author, ID) :return: Sorted list of books grouped by genre and then by book ID within each genre from collections import defaultdict genres = defaultdict(list) # Group by genre for genre, author, book_id in book_details: genres[genre].append((book_id, author)) # Sort genres and sort IDs within each genre sorted_output = [] for genre in sorted(genres.keys()): for book_id, author in sorted(genres[genre]): sorted_output.append((genre, book_id, author)) return sorted_output"},{"question":"Given two strings a and b, determine if one can be transformed into the other using exactly one swap of two characters. Input The first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 100000 and consists of lowercase English letters. The strings have the same length. Output Print \\"YES\\" (without the quotes), if the first string can be transformed into the second string by swapping exactly one pair of characters. Otherwise, print \\"NO\\" (without the quotes). Examples Input abcd abdc Output YES Input abcd abcc Output NO Explanation In the first example, swapping the characters \'c\' and \'d\' in the first string will make it equal to the second string. In the second example, no single swap of characters will transform the first string into the second string.","solution":"def can_transform_by_one_swap(a, b): if len(a) != len(b): return \\"NO\\" # Find indices where characters differ differences = [] for i in range(len(a)): if a[i] != b[i]: differences.append(i) # If there are exactly 2 differences, check if swapping them makes the strings equal if len(differences) == 2: i, j = differences if a[i] == b[j] and a[j] == b[i]: return \\"YES\\" return \\"NO\\""},{"question":"You are given an undirected graph with N vertices and M edges. Each vertex is associated with a value, and you need to find the subgraph with the maximum total vertex value. A subgraph is defined by a set of vertices and the edges between them in the original graph. The selected subgraph must be connected, meaning there must be a path between any pair of selected vertices within the subgraph. Constraints * 1 ≦ N ≦ 10^4 * 0 ≦ M ≦ 10^4 * 1 ≦ value of each vertex ≦ 10^3 Input The input is provided from the Standard Input in the following format: N M v1 v2 ... vN u1 v1 u2 v2 : uM vM Where `v_i` is the value of the i-th vertex, and each `u_i v_i` pair represents an edge in the graph. Output Print the maximum total vertex value of any connected subgraph. Examples Input 6 5 1 2 3 4 5 6 1 2 2 3 3 4 4 5 5 6 Output 21 Input 4 2 10 20 30 40 1 2 3 4 Output 70","solution":"def max_connected_subgraph_value(N, M, vertex_values, edges): from collections import defaultdict, deque # Create an adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Function to perform BFS and compute the sum of vertex values for a connected component def bfs(start): queue = deque([start]) visited[start] = True component_value = 0 while queue: node = queue.popleft() component_value += vertex_values[node - 1] for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component_value visited = [False] * (N + 1) max_value = 0 for i in range(1, N + 1): if not visited[i]: component_value = bfs(i) max_value = max(max_value, component_value) return max_value"},{"question":"You are tasked with organizing a party for your friends. To make it more fun, you decide to send secret encoded invitations. Each invitation contains a message consisting of a single string which you have encoded using a simple rule. You replace every character in the message by the next character in the alphabet. For example, \'a\' is replaced by \'b\', \'b\' by \'c\', \'z\' by \'a\', and so on. Numbers and special characters remain unchanged. Now, you\'ve forgotten the original message and only have the encoded string. Your job is to decode the message. Input The first line of input contains a single string S which is the encoded message. The length of S is between 1 and 100 characters and includes only printable ASCII characters. Output Print the decoded message. Examples Input ifmmp Output hello Input Tv!mfu\'t!ibwf!b!qbsuz Output Su!let\'s!have!a!party Note In the first sample, the encoded message \\"ifmmp\\" decodes to \\"hello\\" by shifting each letter to the previous one in the alphabet: i -> h, f -> e, m -> l, m -> l, p -> o In the second sample, \\"Tv!mfu\'t!ibwf!b!qbsuz\\" decodes to \\"Su!let\'s!have!a!party\\".","solution":"def decode_message(encoded_str): Decodes the encoded string by shifting each letter to the previous one in the alphabet. Non-alphabetical characters remain unchanged. Parameters: encoded_str (str): The encoded message Returns: str: The decoded message decoded_str = [] for char in encoded_str: if \'a\' <= char <= \'z\': decoded_str.append(chr((ord(char) - ord(\'a\') - 1) % 26 + ord(\'a\'))) elif \'A\' <= char <= \'Z\': decoded_str.append(chr((ord(char) - ord(\'A\') - 1) % 26 + ord(\'A\'))) else: decoded_str.append(char) return \'\'.join(decoded_str)"},{"question":"Write a function that finds all pairs of elements in a list that sum up to a given target number. The elements within each pair should be listed in ascending order, and the pairs themselves should be listed in ascending order based on the first element. Function Signature: `def find_pairs_with_sum(arr: List[int], target: int) -> List[Tuple[int, int]]:` **Input** - `arr`: A list of integers. - `target`: An integer representing the target sum. **Output** - A list of tuples, where each tuple contains two integers that sum up to the target. The elements within each tuple should be listed in ascending order. The list of tuples should also be sorted in ascending order based on the first element of each tuple. **Examples** Input ``` arr = [1, 5, 3, 7, 9] target = 10 ``` Output ``` [(1, 9), (3, 7)] ``` Input ``` arr = [2, 4, 6, 3, 5, 7, 8] target = 10 ``` Output ``` [(2, 8), (3, 7), (4, 6)] ``` # Constraints - Each pair within the list should only appear once. - The input list `arr` can contain duplicate elements. - The function should handle cases where there are no pairs that sum up to the target gracefully by returning an empty list.","solution":"from typing import List, Tuple def find_pairs_with_sum(arr: List[int], target: int) -> List[Tuple[int, int]]: seen = set() pairs = set() for number in arr: complement = target - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return sorted(pairs)"},{"question":"Given a string which contains only lowercase letters, find the length of the longest contiguous substring consisting of unique characters. Input The input consists of a single string, s (1 ≤ |s| ≤ 1000000), containing only lowercase alphabetic characters. Output Output an integer denoting the length of the longest contiguous substring of unique characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 Note In the first sample, the answer is \\"abc\\", which the length is 3. In the second sample, the answer is \\"b\\", with the length of 1. In the third sample, the answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def longest_unique_substring(s): Returns the length of the longest contiguous substring of unique characters. char_index_map = {} max_length = start = 0 for i, ch in enumerate(s): if ch in char_index_map and char_index_map[ch] >= start: start = char_index_map[ch] + 1 char_index_map[ch] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"You are given a map represented as a grid. Each cell in the grid contains a certain amount of gold. You must travel from the top-left corner to the bottom-right corner of the grid, collecting gold along the way. From each cell, you can only move to the right or down to the next cell. Your task is to determine the maximum amount of gold you can collect. **Input** - The first line contains two integers, `n` and `m`, representing the number of rows and columns in the grid, respectively. - The following `n` lines each contain `m` integers, representing the amount of gold in each cell of the grid. **Output** - Print a single integer, the maximum amount of gold that can be collected. **Note** - 1 ≤ n, m ≤ 100 - 0 ≤ value in each cell ≤ 1000 **Example** **Input** ``` 3 3 1 3 1 1 5 1 4 2 1 ``` **Output** ``` 12 ``` **Explanation** The path that collects the most gold is: (1,1) → (1,2) → (2,2) → (3,2) → (3,3), which collects 1 + 3 + 5 + 2 + 1 = 12 gold.","solution":"def max_gold(n, m, grid): Function to determine the maximum amount of gold that can be collected moving from the top-left corner to the bottom-right corner of the grid, moving only to the right or down. Parameters: n (int): The number of rows in the grid. m (int): The number of columns in the grid. grid (list of list of int): The grid containing the amount of gold in each cell. Returns: int: The maximum amount of gold that can be collected. dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, m): dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for i in range(1, n): for j in range(1, m): dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1]) return dp[n-1][m-1]"},{"question":"Implement a program that analyzes the frequency of words in a given text and outputs the most frequent word along with its count. If there are multiple words with the same maximum frequency, output the lexicographically smallest word. Input: The input consists of a single line of text containing lowercase letters and spaces. The text does not exceed 1000 characters in length. Output: Output the most frequent word and its count, separated by a space. If there is a tie, output the lexicographically smallest word. Example: Input: ``` the quick brown fox jumps over the lazy dog the dog was not so lazy ``` Output: ``` the 3 ``` Note: - Words are sequences of lowercase letters separated by spaces. - The input text will contain at least one word. - Use lexicographic order to break ties when multiple words have the highest frequency.","solution":"def most_frequent_word(text): from collections import Counter # Split text into words words = text.split() # Count the frequency of each word word_counts = Counter(words) # Find the maximum frequency max_freq = max(word_counts.values()) # Collect words that have the maximum frequency most_frequent_words = [word for word, count in word_counts.items() if count == max_freq] # Find the lexicographically smallest word among the most frequent words result_word = min(most_frequent_words) # Return the result as \\"word count\\" return f\\"{result_word} {word_counts[result_word]}\\""},{"question":"Aayush loves to collect stamps from different locations he visits. Each stamp has a unique value based on its rarity. However, carrying stamps can be exhausting, so he can carry a maximum of k stamps at a time. His goal is to maximize the sum of the values of the stamps he collects in each trip. Given a list of n stamp values, help Aayush determine the maximum sum of stamp values he can carry in a single trip. Assume that he collects all the stamps he chooses to carry each time, and he cannot carry more than k stamps. There is at least one stamp. Constraints: T ≤ 10 N ≤ 10^5 k ≤ 10^5 stamp_value[i] ≤ 10^6 Input: The first line contains the number of test cases t. Each test case consists of two lines. The first line of each test case contains two integers n and k. The second line of each test case contains n space-separated integers stamp_value[i]. Output: Output t lines, each line consisting of the maximum sum of values of the stamps he can carry in a single trip. SAMPLE INPUT 3 5 3 10 40 20 30 50 4 4 15 25 35 45 6 2 5 100 50 60 70 80 SAMPLE OUTPUT 120 120 180 Explanation: For the first test case, he can carry a maximum of 3 stamps. The best choice would be to carry the stamps with values 50, 40, and 30, resulting in a total of 120. For the second test case, he can carry all 4 stamps, resulting in a total of 120. For the third test case, he can carry a maximum of 2 stamps. The best choice would be to carry the stamps with values 100 and 80, resulting in a total of 180.","solution":"def max_stamp_values(test_cases): Determines the maximum sum of the stamp values Aayush can carry given several test cases. Parameters: - test_cases: List of test cases, where each test case is a tuple containing: * An integer n: The number of stamps * An integer k: The maximum number of stamps Aayush can carry * A list of integers stamp_values: The values of each stamp Returns: - A list of integers representing the maximum sum of the stamp values Aayush can carry for each test case. results = [] for n, k, stamp_values in test_cases: # Sort the stamp values in descending order to maximize the sum of the top k values stamp_values.sort(reverse=True) # Take the first k values and sum them up max_sum = sum(stamp_values[:k]) results.append(max_sum) return results # Example Input t = 3 test_cases = [ (5, 3, [10, 40, 20, 30, 50]), (4, 4, [15, 25, 35, 45]), (6, 2, [5, 100, 50, 60, 70, 80]) ] # Example Output print(max_stamp_values(test_cases)) # Output should be [120, 120, 180]"},{"question":"In the land of Cryptography, Alice loves to send secret messages to Bob by using an encoding technique. She still needs a more secure way of sending these messages because someone keeps intercepting them. She has come up with a new method of encoding where she reverses every word in a given sentence, while the order of words remains the same. Your task is to help Alice write a program that will encode her sentences as described above. Given a sentence consisting of multiple words separated by single spaces, return a new sentence where each word is reversed, but the overall order of words remains unchanged. Note: Punctuation marks and any special characters within a word should also be reversed along with the word itself. INPUT: The first line contains an integer T, the number of test cases. The next T lines each contain a single sentence. 1 ≤ T ≤ 50 Each sentence contains only printable ASCII characters and has at least one character and at most 100 characters. OUTPUT: For each test case, output the encoded sentence where each word in the sentence is reversed, but the order of words is kept the same. SAMPLE INPUT 2 Hello World! How are you? SAMPLE OUTPUT olleH !dlroW woH era ?uoy","solution":"def reverse_words(sentence): Given a sentence, reverse each word in the sentence. :param sentence: str :return: str words = sentence.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words) def process_sentences(test_cases): Process multiple test cases of sentences to reverse each word. :param test_cases: list of str :return: list of str return [reverse_words(sentence) for sentence in test_cases]"},{"question":"You are given a string that represents a chemical formula containing various elements, where the occurrence of each element is denoted by an integer immediately following the element\'s symbol (if the integer is omitted, the count is assumed to be 1). The elements inside parentheses indicate groupings where the number following the closing parenthesis represents the multiplier for all elements contained within that group. Your task is to calculate the total number of each type of atoms in the formula and return them in lexicographical order of element names. Input A single string s (1 ≤ |s| ≤ 1000) representing the chemical formula. Output Output each element and its total count in lexicographical order of element names, each element and count on a new line. Examples Input H2O Output H 2 O 1 Input K4(ON(SO3)2)2 Output K 4 N 2 O 14 S 4 Note In the second sample: - K appears 4 times. - N appears 2 times (2*1 from ON group). - O appears 14 times (4 from ON, and 2*3*2 from (SO3)2 group). - S appears 4 times (2*2 from the (SO3)2 group).","solution":"import re from collections import defaultdict def parse_formula(formula): def parse(): stack = [defaultdict(int)] i = 0 while i < len(formula): if formula[i] == \'(\': stack.append(defaultdict(int)) i += 1 elif formula[i] == \')\': group = stack.pop() i += 1 i_end = i while i_end < len(formula) and formula[i_end].isdigit(): i_end += 1 multiplier = int(formula[i:i_end] or \'1\') for element, count in group.items(): stack[-1][element] += count * multiplier i = i_end else: i_end = i + 1 while i_end < len(formula) and formula[i_end].islower(): i_end += 1 element = formula[i:i_end] i = i_end i_end = i while i_end < len(formula) and formula[i_end].isdigit(): i_end += 1 count = int(formula[i:i_end] or \'1\') stack[-1][element] += count i = i_end return stack[0] result = parse() sorted_elements = sorted(result.items()) return sorted_elements def chemical_formula(formula): parsed_formula = parse_formula(formula) result = [] for element, count in parsed_formula: result.append(f\\"{element} {count}\\") return result"},{"question":"Your task is to implement a library system where books can be borrowed and returned. Each book can be identified by a unique identifier (ID) and has a title and author. The system should be able to handle multiple operations in sequence to manage this library. You need to write a program that processes the following operations: 1. **Add a Book**: Add a new book to the library. 2. **Borrow a Book**: Borrow a book from the library. 3. **Return a Book**: Return a previously borrowed book to the library. 4. **List Books**: List all books currently available in the library. Input: - The first line of input contains an integer `Q` (1 ≤ Q ≤ 1000), which represents the number of operations. - The next `Q` lines contain the operations. The format of each operation is as follows: - **Add a Book**: \\"ADD ID Title Author\\" - Adds a book with the given ID, title, and author to the library. - **Borrow a Book**: \\"BORROW ID\\" - Borrows the book with the given ID from the library. - **Return a Book**: \\"RETURN ID\\" - Returns the previously borrowed book with the given ID to the library. - **List Books**: \\"LIST\\" - Lists all books currently available in the library in the format \\"ID Title Author\\", sorted by ID. Note: - The `ID` is a positive integer (1 ≤ ID ≤ 10000). - The `Title` consists of alphanumeric characters possibly including spaces. - The `Author` consists of alphanumeric characters possibly including spaces. Output: - For each \\"LIST\\" operation, output the list of available books, each on a new line in \\"ID Title Author\\" format. - If no books are available during a \\"LIST\\" operation, output \\"No books available\\". Example: Input: ``` 7 ADD 101 \\"The Great Gatsby\\" \\"F. Scott Fitzgerald\\" ADD 102 \\"1984\\" \\"George Orwell\\" BORROW 101 LIST RETURN 101 LIST BORROW 102 ``` Output: ``` 102 1984 George Orwell 101 The Great Gatsby F. Scott Fitzgerald ```","solution":"class Library: def __init__(self): self.books = {} self.borrowed_books = set() def add_book(self, book_id, title, author): if book_id not in self.books: self.books[book_id] = (title, author) def borrow_book(self, book_id): if book_id in self.books and book_id not in self.borrowed_books: self.borrowed_books.add(book_id) def return_book(self, book_id): if book_id in self.borrowed_books: self.borrowed_books.remove(book_id) def list_books(self): available_books = [] for book_id in sorted(self.books.keys()): if book_id not in self.borrowed_books: title, author = self.books[book_id] available_books.append(f\\"{book_id} {title} {author}\\") return available_books if available_books else [\\"No books available\\"] def process_operations(operations): library = Library() results = [] for operation in operations: if operation.startswith(\\"ADD\\"): _, book_id, title, author = operation.split(\\" \\", 3) library.add_book(int(book_id), title, author) elif operation.startswith(\\"BORROW\\"): _, book_id = operation.split() library.borrow_book(int(book_id)) elif operation.startswith(\\"RETURN\\"): _, book_id = operation.split() library.return_book(int(book_id)) elif operation == \\"LIST\\": results.extend(library.list_books()) results.append(\\"\\") # Add a newline after each LIST operation return results # Example of how it works when passed operations: # operations = [ # \\"ADD 101 The Great Gatsby F. Scott Fitzgerald\\", # \\"ADD 102 1984 George Orwell\\", # \\"BORROW 101\\", # \\"LIST\\", # \\"RETURN 101\\", # \\"LIST\\", # \\"BORROW 102\\" # ] # results = process_operations(operations) # for result in results: # print(result)"},{"question":"In a certain country, postal mail workers need to deliver packages to various houses on a street. Each house is represented by a number from 1 to N. Some houses are even-numbered and some are odd-numbered. Postal workers have a specific pattern they need to follow: 1. They need to deliver packages to all odd-numbered houses first in ascending order. 2. After finishing the delivery to odd-numbered houses, they need to restart and deliver packages to all even-numbered houses in ascending order. However, one challenge they face is to figure out the order in which to deliver those packages given the total number of houses. Write a function that generates this delivery order. Function Signature: ```python def delivery_order(N: int) -> List[int]: ``` Input: * `N` (1 ≤ N ≤ 1000): An integer representing the number of houses. Output: * A list of integers representing the order in which the postal workers should deliver packages. Examples: Input: ``` N = 5 ``` Output: ``` [1, 3, 5, 2, 4] ``` Input: ``` N = 8 ``` Output: ``` [1, 3, 5, 7, 2, 4, 6, 8] ``` Explanation: In the first example, the postal workers will first deliver to all the odd-numbered houses: 1, 3, and 5. Then, they will deliver to all the even-numbered houses: 2 and 4. In the second example, the postal workers will first deliver to all the odd-numbered houses: 1, 3, 5, and 7. Then, they will deliver to all the even-numbered houses: 2, 4, 6, and 8.","solution":"def delivery_order(N): Returns the order in which postal workers should deliver packages. odd_houses = [i for i in range(1, N + 1) if i % 2 != 0] even_houses = [i for i in range(1, N + 1) if i % 2 == 0] return odd_houses + even_houses"},{"question":"Given an array of integers, your task is to redistribute the array so that every pair of adjacent elements has a different parity (i.e., one is even, and one is odd). If it is impossible to do so, print -1. Otherwise, print the rearranged array. Input The first line contains an integer n (1 ≤ n ≤ 100) — the size of the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the elements of the array. Output If it is possible to rearrange the array so that each pair of adjacent elements has different parity, print the rearranged array as a space-separated list. If it is not possible, print -1. Examples Input 4 4 3 2 1 Output 4 3 2 1 Input 5 1 3 5 7 9 Output -1 Note In the first example, the array can be used as is. In the second example, it is impossible to rearrange the array to meet the given condition.","solution":"def rearrange_array(n, arr): Rearranges the array so that every pair of adjacent elements has a different parity (one is even, the other is odd). If it is not possible, returns -1. odd = [x for x in arr if x % 2 != 0] even = [x for x in arr if x % 2 == 0] # If the difference between the count of odd and even numbers is greater than 1, it\'s impossible if abs(len(odd) - len(even)) > 1: return -1 result = [] # Start with the larger of the two counts if len(odd) > len(even): for i in range(len(even)): result.append(odd[i]) result.append(even[i]) result.append(odd[-1]) else: for i in range(len(odd)): result.append(even[i]) result.append(odd[i]) if len(even) > len(odd): result.append(even[-1]) return result"},{"question":"Given a list of integers, we want to transform it into a non-decreasing order by performing a series of operations. In each operation, you can choose an element from the list and either increment it by 1 or decrement it by 1. Determine if it is possible to sort the list in non-decreasing order with these operations. Input The first line is a number K. (1 ≤ K ≤ 10000) The second line contains K integers, where each integer num_i satisfies (0 ≤ num_i ≤ 1000). Output Print \\"POSSIBLE\\" if you can sort the array in non-decreasing order using the specified operations, otherwise print \\"IMPOSSIBLE\\". SAMPLE INPUT 5 3 4 7 2 5 SAMPLE OUTPUT IMPOSSIBLE Explanation While we can adjust the values through increments or decrements, the number \'2\' cannot be transformed to a value that would fit the sequence in non-decreasing order of [3 4 5 7 ...] without altering other numbers out of bounds. Consider another input for more clarification: SAMPLE INPUT 4 1 2 3 4 Output is POSSIBLE as the list is already in non-decreasing order.","solution":"def is_possible_to_sort(k, nums): Determines if it is possible to sort an array in non-decreasing order by incrementing or decrementing elements by 1. Parameters: k (int): The number of elements in the list. nums (list of ints): The list of integers. Returns: str: \'POSSIBLE\' if the list can be sorted in non-decreasing order, \'IMPOSSIBLE\' otherwise. for i in range(1, k): if abs(nums[i] - nums[i - 1]) > 1: return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\""},{"question":"You are given two binary trees, T1 and T2. Write a function to check if T2 is a subtree of T1. A subtree of T1 is a tree consisting of a node in T1 and all of this node\'s descendants. The tree T1 could also be considered as a subtree of itself. Input - `T1` and `T2` are binary trees, represented as linked structures where each node contains the attributes `val`, `left`, and `right`. - `val` is an integer, `left` and `right` are either `None` or pointers to child nodes. Output - Return `True` if T2 is a subtree of T1, and `False` otherwise. Constraints - The number of nodes in T1 and T2 will each be in the range `[0, 1000]`. - The value of each node will be in the range `[-10^4, 10^4]`. SAMPLE INPUT T1: 3 / 4 5 / 1 2 T2: 4 / 1 2 SAMPLE OUTPUT True Explanation: Tree T2 is a subtree of T1 as the structure matches with a part of T1.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isSubtree(T1, T2): if not T2: return True # An empty tree is always a subtree if not T1: return False # Non-empty T2 can\'t be a subtree of an empty T1 if isSameTree(T1, T2): return True return isSubtree(T1.left, T2) or isSubtree(T1.right, T2) def isSameTree(s, t): if not s and not t: return True if not s or not t: return False return s.val == t.val and isSameTree(s.left, t.left) and isSameTree(s.right, t.right)"},{"question":"Emma is a botanist working in a large botanical garden. She is in charge of monitoring the height of trees planted along a straight path. However, some trees are not growing as expected and she wants to identify them. You need to help Emma find the trees that are taller than both their neighboring trees. If no such trees exist, return an empty list. Input: The first line of input contains an integer N, denoting the number of trees. The next line contains N space-separated integers denoting the height of each tree. Output: Print the heights of the trees that are taller than both their neighboring trees. If no such trees are present, print an empty list. Constraints: 1 ≤ N ≤ 10^5, 1 ≤ height of each tree ≤ 10^9. Note: - A tree is taller than its neighboring trees if its height is strictly greater than the heights of the trees immediately before and after it. - The first and last trees do not have two neighbors so they cannot be considered. SAMPLE INPUT 7 3 7 2 10 6 8 5 SAMPLE OUTPUT 7 10 8","solution":"def find_taller_trees(N, heights): Return the heights of the trees that are taller than both their neighboring trees if N < 3: return [] result = [] for i in range(1, N-1): if heights[i] > heights[i-1] and heights[i] > heights[i+1]: result.append(heights[i]) return result"},{"question":"You are given a list of integers representing the heights of students standing in a line. Heights are unique integers, and the students are standing in an order that may not necessarily be sorted. You need to determine the number of students that are taller than the student with the minimum height. Input The first line contains one integer n (1 ≤ n ≤ 100) — the number of students. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 200) — the heights of the students. Output Print one integer — the number of students taller than the student with the minimum height. Examples Input 5 150 160 165 155 170 Output 4 Input 3 180 175 190 Output 2 Input 4 170 160 150 140 Output 3 Note In the first example, the minimum height is 150 which is the first student, and there are 4 students taller than 150. In the second example, the minimum height is 175, and there are 2 students taller than 175. In the third example, the minimum height is 140, and all other students are taller than 140.","solution":"def count_taller_students(n, heights): Returns the number of students that are taller than the student with the minimum height. :param n: int, number of students :param heights: List[int], list of heights of students :return: int, number of students taller than the minimum height student min_height = min(heights) count = sum(1 for height in heights if height > min_height) return count"},{"question":"Description You are given an array of integers and a target integer. Your task is to determine if there are two distinct elements in the array that sum up to the target value. Write a function that returns a boolean value. Input Format First line contains an integer N, the number of elements in the array. Second line contains N space-separated integers representing the array. Third line contains the target integer. Output Format One line containing \\"True\\" if there are two distinct elements in the array that sum up to the target value, otherwise \\"False\\". Input Limits: 0 < N < 100 -10^3 <= array elements <= 10^3 -10^3 <= target integer <= 10^3 SAMPLE INPUT 5 2 7 11 15 1 9 SAMPLE OUTPUT True Explanation In the given array, the elements 2 and 7 add up to the target value 9. Hence, the output is \\"True\\".","solution":"def two_sum(nums, target): Determine if there are two distinct elements in the array that sum up to the target value. Args: nums: List[int] - a list of integers target: int - target integer Returns: bool - True if there are two distinct elements that sum up to target, otherwise False num_set = set() for num in nums: if target - num in num_set: return True num_set.add(num) return False"},{"question":"A famous online puzzle game consists of a grid of characters representing a river with logs, rocks, and empty spaces. The grid is made up of `N` rows and `M` columns. Each cell on the grid can be one of the following: - `L`: Represents a log. - `R`: Represents a rock. - `.`: Represents an empty space. The goal is to navigate a character from the top-left corner of the grid (0, 0) to the bottom-right corner (N-1, M-1). The character can move in four possible directions: up, down, left, and right. The character can move onto a cell containing a log (L) or an empty space (.), but not onto a cell containing a rock (R). Your task is to write a program to determine if it is possible for the character to reach the bottom-right corner of the grid from the top-left corner while adhering to the movement rules. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line contains two integers `N` and `M` (1 ≤ N, M ≤ 1000) which are the number of rows and columns in the grid, respectively. The next `N` lines contain a string of length `M` each, representing the grid. Output Output \\"YES\\" if it is possible to move from the top-left corner to the bottom-right corner. Otherwise, output \\"NO\\". Example Input 5 5 L..R. RL..R R.RLL LL.RL ....L Output YES Input 4 4 L.R. .RL. RLR. .LRR Output NO Explanation In the first example, the character can navigate from the top-left to the bottom-right corner avoiding rocks. However, in the second example, no valid path exists due to the placement of rocks.","solution":"def is_path_possible(grid, N, M): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: r, c = queue.popleft() if (r, c) == (N-1, M-1): return \\"YES\\" for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and (nr, nc) not in visited and grid[nr][nc] != \'R\': visited.add((nr, nc)) queue.append((nr, nc)) return \\"NO\\" def navigate_river(grid_input): N, M = map(int, grid_input.split(\'n\')[0].split()) grid = [list(row) for row in grid_input.strip().split(\'n\')[1:]] return is_path_possible(grid, N, M)"},{"question":"Sarah is an event organizer and she is planning to host multiple events at different locations in her city. Each event requires a specific set of rooms that have different seating capacities. Sarah needs to determine which room capacities meet or exceed the required number of seats for the events in the most efficient manner. You are given a list of room capacities for various buildings in the city and a list of events with their required seating capacities. Your task is to find the smallest room capacity that can accommodate each event. If no room can accommodate the event, return -1. Input The input consists of the following components: 1. An integer n indicating the number of rooms. 2. n integers representing the seating capacities of each room. 3. An integer m indicating the number of events. 4. m integers representing the required seating capacities for each event. The dataset satisfies the following constraints: - 1 ≤ n, m ≤ 10^5 - 1 ≤ room capacity, event capacity ≤ 10^9 Output For each event, output the smallest room capacity that can accommodate the event. If no room can accommodate the event, output -1. Example Input 6 50 100 200 300 400 500 4 150 100 350 50 Output 200 100 400 50","solution":"from bisect import bisect_left def find_smallest_rooms(n, room_capacities, m, event_capacities): Function to find the smallest room that can accommodate each event. Arguments: - n: number of rooms (int) - room_capacities: list of room capacities (list of int) - m: number of events (int) - event_capacities: list of event seating requirements (list of int) Returns: - list of int: smallest room capacity for each event or -1 if no room can accommodate the event room_capacities.sort() result = [] for event in event_capacities: # Find the index of the smallest room that can accommodate the event index = bisect_left(room_capacities, event) if index == len(room_capacities): result.append(-1) else: result.append(room_capacities[index]) return result"},{"question":"Write a function `valid_parentheses_sequence` that takes an integer `N` as input and outputs a valid sequence of parentheses of length `2N`. The sequence should follow these rules: - Each opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. - At no point in the sequence should the number of closing parentheses \')\' exceed the number of opening parentheses \'(\'. Constraints: - N is an integer between 1 and 10^3 (inclusive). Input: The input is given from Standard Input in the following format: N Output: Output a valid parentheses sequence of length `2N`. If there are multiple such sequences, printing any of them is accepted. Examples: Input: 2 Output: ()() Input: 3 Output: ((())) Input: 1 Output: () Notes: - The sequence must maintain the balance and proper order of opening and closing parentheses throughout.","solution":"def valid_parentheses_sequence(N): Generates a valid sequence of parentheses of length 2N. Parameters: N (int): Input length divided by 2 Returns: str: A valid parenthesis sequence of length 2N def generate_parentheses(current, open_count, close_count, N, results): if open_count == N and close_count == N: results.append(current) return if open_count < N: generate_parentheses(current + \'(\', open_count + 1, close_count, N, results) if close_count < open_count: generate_parentheses(current + \')\', open_count, close_count + 1, N, results) results = [] generate_parentheses(\\"\\", 0, 0, N, results) return results[0] if results else \\"\\""},{"question":"In a certain country, there are N cities connected by M bidirectional roads. Each city is labeled with a unique number from 1 to N. The road network can be represented as a graph, where each road connects two distinct cities. Two cities might have more than one road directly connecting them. Takahashi wants to determine if he can travel between any two cities using these roads. Constraints * 1 ≤ N ≤ 1000 * 0 ≤ M ≤ 10000 * All values in input are integers. Input Input is given from Standard Input in the following format: N M A1 B1 A2 B2 ... AM BM Each road connects city Ai to city Bi. Output If it is possible to travel between any pair of cities, print `Connected`; otherwise, print `Not Connected`. Examples Input 4 2 1 2 3 4 Output Not Connected Input 5 3 1 2 2 3 4 5 Output Not Connected Input 3 3 1 2 2 3 3 1 Output Connected","solution":"def can_travel_all_cities(n, m, roads): from collections import defaultdict, deque if n == 1: return \\"Connected\\" graph = defaultdict(list) for a, b in roads: graph[a].append(b) graph[b].append(a) visited = set() queue = deque([1]) while queue: city = queue.popleft() if city not in visited: visited.add(city) for neighbor in graph[city]: if neighbor not in visited: queue.append(neighbor) if len(visited) == n: return \\"Connected\\" else: return \\"Not Connected\\" def from_input_string(input_string): lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) roads = [tuple(map(int, line.split())) for line in lines[1:]] return n, m, roads def from_output_string(output_string): return output_string.strip() def to_input_string(inputs): n, m, roads = inputs return f\\"{n} {m}n\\" + \'n\'.join(f\\"{a} {b}\\" for a, b in roads) def to_output_string(output): return output"},{"question":"Given an input array of integers, your task is to determine the length of the longest subarray that consists of only increasing numbers (each number is greater than the one before it). If there are multiple longest subarrays of the same length, only return the length of one of them. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) denoting the size of the array. The following line contains n space-separated integers a1, a2, ..., an (-1,000,000,000 ≤ ai ≤ 1,000,000,000) representing the elements of the array. Output Output a single integer, the length of the longest increasing subarray. Example Sample input: 6 1 2 2 3 4 5 Sample output: 4 Explanation: The longest increasing subarray in the given example is [2, 3, 4, 5] which has length 4.","solution":"def longest_increasing_subarray_length(arr): Returns the length of the longest subarray consisting of only increasing numbers. if not arr: return 0 max_len = 1 current_len = 1 for i in range(1, len(arr)): if arr[i] > arr[i-1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"Rahul loves playing with numbers and one of his favorite tasks is to find the sum of digits of a number. Given a list of integers, can you help Rahul by writing a program to find the sum of the digits of each number in the list? Input: The first line contains an integer T, denoting the number of test cases. Each test case contains a single integer N. Output: For each test case, print the sum of the digits of N. Constraints: 1 ≤ T ≤ 10 0 ≤ N ≤ 10000 SAMPLE INPUT 3 123 456 7890 SAMPLE OUTPUT 6 15 24","solution":"def sum_of_digits(n): Returns the sum of the digits of the number n. return sum(int(digit) for digit in str(n)) def process_test_cases(test_cases): Given a list of integers, returns a list of the sums of digits for each integer. results = [] for case in test_cases: results.append(sum_of_digits(case)) return results"},{"question":"Bob is organizing a charity event and needs to distribute exactly n gifts. He has access to k types of boxes, each of which can hold a certain number of gifts. The i-th type of box can hold exactly i gifts (1 ≤ i ≤ k). There is an infinite supply of each type of box. Bob wants to know the minimum number of boxes required to distribute exactly n gifts, with the condition that he can only use one type of box for all the gifts. Write a program to help Bob find the minimum number of boxes he needs to distribute exactly n gifts. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains two integers n (1 ≤ n ≤ 10^9) and k (1 ≤ k ≤ 10^9) — the number of gifts and the number of types of boxes. Output Print t lines, each containing a single integer — the minimum number of boxes required to distribute exactly n gifts for each test case. Example Input 4 10 5 15 3 20 4 7 7 Output 2 5 5 1 Note In the first test case, Bob can use 2 boxes of 5 gifts each to distribute exactly 10 gifts. In the second test case, Bob can use 5 boxes of 3 gifts each to distribute exactly 15 gifts. In the third test case, Bob can use 5 boxes of 4 gifts each to distribute exactly 20 gifts. In the fourth test case, he can use 1 box of 7 gifts to distribute exactly 7 gifts.","solution":"def min_boxes(t, test_cases): results = [] for n, k in test_cases: # Find the maximum box size we can use max_box_size = min(n, k) # Minimum number of such boxes needed min_boxes_needed = (n + max_box_size - 1) // max_box_size results.append(min_boxes_needed) return results t = 4 test_cases = [(10, 5), (15, 3), (20, 4), (7, 7)] print(min_boxes(t, test_cases)) # This line is just for an example and won\'t be part of the final solution module."},{"question":"You are given an array of `n` integers. An element of the array is called a \\"peak\\" if it is greater than its neighbors. For the elements at the boundaries of the array, we only need to check one neighbor. Your task is to calculate the number of peaks in the given array. For example, in the array `[1, 2, 3, 1, 5]`, the elements `3` and `5` are peaks because `3` is greater than both `2` and `1`, and `5` is greater than `1`. Input The first line contains an integer `n` (1 ≤ n ≤ 100), denoting the number of integers in the array. The second line contains `n` space-separated integers, representing the elements of the array. Each integer in the array is between -1000 and 1000, inclusive. Output Print a single integer, denoting the number of peak elements in the array. Example Input 5 1 2 3 1 5 Output 2 Input 4 10 20 10 30 Output 2 Input 1 10 Output 1","solution":"def count_peaks(arr): Returns the number of peak elements in the input array. n = len(arr) peaks = 0 for i in range(n): if i == 0: # first element if n == 1 or arr[i] > arr[i + 1]: peaks += 1 elif i == n - 1: # last element if arr[i] > arr[i - 1]: peaks += 1 else: # middle elements if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: peaks += 1 return peaks"},{"question":"You are given an array of integers. An **even segment** is defined as a contiguous subarray in which all elements are even. Find the length of the longest even segment in the array. Input - The first line contains an integer `N`, the number of elements in the array. - The second line contains `N` space-separated integers representing the elements of the array. Output - Output a single integer representing the length of the longest even segment in the array. If there are no even numbers in the array, output 0. Constraints: - 1 ≤ N ≤ 10^5 - 0 ≤ A[i] ≤ 10^9 Example Input: 8 1 2 4 6 1 4 2 8 Output: 3 Explanation In the given array, the longest even segment is [2, 4, 6] which has length 3. The second even segment [4, 2, 8] also has length 3. Since we are asked for the longest even segment, we output 3.","solution":"def longest_even_segment(arr): max_length = 0 current_length = 0 for num in arr: if num % 2 == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length # Example usage: # N = int(input()) # arr = list(map(int, input().split())) # print(longest_even_segment(arr))"},{"question":"You are given an empty binary tree with only a root node and a set of operations to perform on the tree. The operations include inserting a node with a specific value, deleting a node with a specific value, and querying the minimum value in the tree. Your task is to implement these operations efficiently. Input The first line contains an integer q (1 ≤ q ≤ 100000), the number of operations to perform. Each of the next q lines contains a description of one operation. There are three types of operations: - \\"I x\\" which means insert a node with value x (1 ≤ x ≤ 100000). - \\"D x\\" which means delete a node with value x (1 ≤ x ≤ 100000). It is guaranteed that the node with value x exists in the tree before this operation. - \\"Q\\" which means query and print the minimum value in the tree. Output For each query operation, print the minimum value in the tree. Example Input 7 I 10 I 5 I 20 Q D 5 Q D 10 Output 5 10 Note After the first insertion operation, the tree contains the node with value 10. After the second insertion, the tree contains nodes with values 10 and 5. After the third insertion, the tree contains nodes with values 10, 5, and 20. The first query returns the minimum value, which is 5. After deleting the node with value 5, the tree contains nodes with values 10 and 20. The second query returns the new minimum value, which is 10.","solution":"import heapq class BinaryTreeOperations: def __init__(self): self.elements = [] self.element_set = set() def insert(self, x): if x not in self.element_set: heapq.heappush(self.elements, x) self.element_set.add(x) def delete(self, x): if x in self.element_set: self.element_set.remove(x) self.elements.remove(x) heapq.heapify(self.elements) def query(self): return self.elements[0] if self.elements else None def process_operations(operations): bto = BinaryTreeOperations() result = [] for operation in operations: if operation[0] == \'I\': bto.insert(int(operation[1])) elif operation[0] == \'D\': bto.delete(int(operation[1])) elif operation[0] == \'Q\': result.append(bto.query()) return result"},{"question":"Given an array of integers, you need to determine the maximum difference between any two elements such that the larger element comes after the smaller element. Return this maximum difference. If no such elements exist, return -1. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers separated by spaces representing the elements of the array. Each element is guaranteed to fit within the range of a 32-bit signed integer. Output Print one integer — the maximum difference. If no such elements exist, print -1. Example Input 6 7 1 5 3 6 4 Output 5 Explanation: In this example, the maximum difference is obtained by subtracting element at index 1 (value = 1) from element at index 4 (value = 6) which gives 6 - 1 = 5. There is no larger difference where the larger element comes after the smaller element. Note If the array is in descending order (e.g., [5, 4, 3, 2, 1]), the function should return -1 since no such elements exist where the larger element comes after the smaller element in the array.","solution":"def max_difference(arr): Returns the maximum difference between any two elements such that the larger element comes after the smaller element. If no such elements exist, return -1. if len(arr) < 2: return -1 min_element = arr[0] max_diff = -1 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"Given a sequence of numbers, find the longest increasing subsequence and write a program that returns the length of that subsequence. An increasing subsequence is a sequence where each element is greater than the preceding one. The sequence does not need to be contiguous, meaning numbers can be picked from non-adjacent positions in the array as long as their order is maintained. input The input consists of multiple datasets. Each dataset is given in the following format: The first line contains an integer `n` representing the number of elements in the sequence. The next line contains `n` integers separated by spaces. The end of input is indicated by EOF. The number of datasets does not exceed 10. output For each dataset, output the length of the longest increasing subsequence in the sequence on one line. Constraints - `1 <= n <= 5000` - The elements of the sequence are integers between -100,000 and 100,000. Examples Input 6 5 1 8 3 7 9 4 3 10 2 1 Output 4 2","solution":"def lengthOfLIS(nums): Function to find the length of the longest increasing subsequence. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_input(data): Processes the input data and returns the lengths of the longest increasing subsequences for each dataset. result = [] i = 0 while i < len(data): n = int(data[i]) nums = list(map(int, data[i+1].split())) result.append(lengthOfLIS(nums)) i += 2 return result def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') result = process_input(data) for res in result: print(res)"},{"question":"Ali has a sequence of numbers and a specific target value. He wants to know if it is possible to select a subsequence of the numbers whose product is equal to the target value. The subsequence does not need to be contiguous, but it must consist of at least one element. Input The first line of the input contains a single integer t (1 ≤ t ≤ 50) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and target (1 ≤ n ≤ 100, 1 ≤ target ≤ 10^9) — the number of elements in the sequence and the target product value. The next line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the sequence. Output For each test case, print \\"Possible\\" or \\"Impossible\\" depending on whether it is possible to select a subsequence that multiplies to the target value. Example Input 3 3 6 1 2 3 4 12 2 3 4 2 2 15 4 5 Output Possible Possible Impossible Note For 1st case: We can select elements 2 and 3 to get a product of 6. For 2nd case: We can select elements 3 and 4 to get a product of 12. For 3rd case: It is not possible to obtain a product of 15 with the given numbers.","solution":"def is_possible_subsequence_product(n, target, sequence): Check if it is possible to form the target product using a subsequence from the sequence. from itertools import combinations for r in range(1, n + 1): for combo in combinations(sequence, r): product = 1 for num in combo: product *= num if product == target: return \\"Possible\\" return \\"Impossible\\" def solve_test_cases(test_cases): results = [] for n, target, sequence in test_cases: results.append(is_possible_subsequence_product(n, target, sequence)) return results"},{"question":"```markdown You are organizing a programming contest and you want to arrange the contests so that no two contests overlap in their time slots. There are n contests, each with a start time and an end time. A contest i starts at time `start_i` and ends at time `end_i`. Note that if one contest ends at time t, another contest can start at time t. Your task is to find the maximum number of non-overlapping contests that can be scheduled. Input The first line of input contains one integer n (1 ≤ n ≤ 10^5) — the number of contests. The next n lines each contain two integers start_i and end_i (1 ≤ start_i < end_i ≤ 10^9), representing the start and end times of the i-th contest. Output Print one integer — the maximum number of non-overlapping contests that can be scheduled. Examples Input 6 1 3 2 5 4 6 6 7 5 8 8 9 Output 4 Input 4 1 2 2 3 3 4 4 5 Output 4 Note In the first example, the maximum number of non-overlapping contests that can be scheduled are 4 and an optimal way to schedule them is: - Contest 1: 1 3 - Contest 3: 4 6 - Contest 4: 6 7 - Contest 6: 8 9 In the second example, all contests can be scheduled without overlapping. ```","solution":"def max_non_overlapping_contests(contests): Returns the maximum number of non-overlapping contests. :param contests: List of tuples, each containing the start and end times of a contest (start_i, end_i) :return: Integer, maximum number of non-overlapping contests # Sort contests by their end times contests.sort(key=lambda x: x[1]) max_contests = 0 end_time = 0 for start, end in contests: if start >= end_time: max_contests += 1 end_time = end return max_contests"},{"question":"Write a program that reverses the words in a given sentence. Input The input consists of a single line containing a sentence S. Output Print the sentence with the words in reverse order. Constraints 1 ≤ |S| ≤ 1000 The sentence does not contain any special characters except spaces. Example Input Hello World Output World Hello","solution":"def reverse_words(sentence): Reverses the words in a given sentence. Args: sentence (str): The sentence to be reversed. Returns: str: The sentence with the words in reverse order. words = sentence.split() reversed_words = \' \'.join(reversed(words)) return reversed_words"},{"question":"Simon loves solving problems using dynamic programming. He has come across an interesting problem involving a sequence of numbers. Given a sequence, he wants to turn it into a non-decreasing sequence by performing some operations. In each operation, he can choose any two adjacent elements and move the left element to the right place. He needs your help to determine the minimum number of such operations required to achieve this. Write a function `min_operations_to_non_decreasing` that takes a list of integers and returns the minimum number of operations required to make the sequence non-decreasing. Input - An integer n (1 ≤ n ≤ 2000): the length of the sequence. - A list of n integers a (1 ≤ ai ≤ 10^9) representing the sequence. Output - A single integer representing the minimum number of operations required. Examples Input 4 4 3 2 1 Output 6 Input 5 1 3 2 5 4 Output 2 Input 3 1 2 3 Output 0","solution":"def min_operations_to_non_decreasing(n, a): Returns the minimum number of operations required to make the sequence non-decreasing. Parameters: n (int): The length of the sequence. a (list): A list of integers representing the sequence. Returns: int: The minimum number of operations required. # we need to count number of inversions in the sequence def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into Original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count temp_arr = [0]*n return merge_sort_and_count(a, temp_arr, 0, n-1)"},{"question":"There is a city grid with N vertical streets and M horizontal streets. Some of the intersections have traffic lights, while others do not. You are given a grid where \'1\' represents an intersection with a traffic light and \'0\' represents an intersection without a traffic light. Your task is to determine the minimum number of intersections that need to install traffic lights so that every vertical street has at least one traffic light and every horizontal street has at least one traffic light. Constraints * 1 leq N, M leq 1000 * The grid is represented by N lines of M characters, with each character being either \'1\' or \'0\'. Input Input is given from Standard Input in the following format: N M grid Output Print the minimum number of intersections that need to install traffic lights. Examples Input 3 3 101 010 001 Output 0 Input 2 2 00 00 Output 2 Input 4 4 1000 0000 0000 0001 Output 2 Input 3 3 111 111 111 Output 0 Explanation of Sample Outputs: In the first example, every street already has at least one traffic light, so no additional installations are needed. In the second example, both vertical and horizontal streets need one traffic light each, hence installing at two intersections. In the third example, only one vertical and one horizontal street lack traffic lights, so two additional traffic lights required. In the fourth example, every street is already covered with traffic lights, so no installations are needed.","solution":"def min_traffic_lights_to_install(N, M, grid): # Determine which rows and columns already have a traffic light. rows_with_light = [False] * N cols_with_light = [False] * M for r in range(N): for c in range(M): if grid[r][c] == \'1\': rows_with_light[r] = True cols_with_light[c] = True # Count the number of rows and columns that do not have a traffic light. rows_without_light = rows_with_light.count(False) cols_without_light = cols_with_light.count(False) # The minimum number of lights to install will be the maximum of these counts return max(rows_without_light, cols_without_light) # Read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = [data[i] for i in range(2, 2 + N)] print(min_traffic_lights_to_install(N, M, grid))"},{"question":"Write a function that takes two strings, `s1` and `s2`, and returns the longest common subsequence (LCS) between them. The LCS is the longest sequence that appears in both strings, not necessarily consecutively. Input The function should take two input strings, `s1` and `s2` with lengths l1 and l2 respectively (1 ≤ l1, l2 ≤ 1000). Output Return the LCS as a string. Examples Input ``` s1 = \\"abcde\\" s2 = \\"ace\\" ``` Output ``` \\"ace\\" ``` Input ``` s1 = \\"abc\\" s2 = \\"abc\\" ``` Output ``` \\"abc\\" ``` Input ``` s1 = \\"abc\\" s2 = \\"def\\" ``` Output ``` \\"\\" ``` Note: 1. The LCS problem is a classic problem in the field of computer science, commonly solved via dynamic programming. 2. In the case that there are multiple LCS of the same maximum length, any one of them can be returned. 3. The input strings consist of lowercase English letters only.","solution":"def longest_common_subsequence(s1, s2): Returns the longest common subsequence of s1 and s2. len_s1, len_s2 = len(s1), len(s2) # Create a 2D array to store lengths of longest common subsequence. dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)] # Fill the dp array for i in range(1, len_s1 + 1): for j in range(1, len_s2 + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct the longest common subsequence from the dp array lcs = [] i, j = len_s1, len_s2 while i > 0 and j > 0: if s1[i - 1] == s2[j - 1]: lcs.append(s1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return \'\'.join(reversed(lcs))"},{"question":"In the bustling land of Aloria, there are a number of ancient towers with mystical powers. Each tower can project a magical beam of light with a specific intensity. The King of Aloria has summoned you, the royal programmer, to help distribute magical shields to the townsfolk. The shields are to be positioned along a straight line, covering all parts of the line that receive magical light. The towers are represented on a linear coordinate system, and each tower\'s light beam covers a continuous interval. Your task is to determine the minimum number of non-overlapping intervals needed to cover all the points on the line that receive light from at least one tower. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5) - the number of towers. - Each of the next `n` lines contains two integers `l` and `r` (0 ≤ l < r ≤ 10^9), the left and right endpoints of the interval covered by the respective tower\'s light beam. # Output - Print a single integer representing the minimum number of non-overlapping intervals needed to cover all points on the line that receive light from at least one tower. Example # Input ``` 4 1 5 2 6 4 8 7 9 ``` # Output ``` 2 ``` # Explanation The towers cover the intervals [1, 5], [2, 6], [4, 8], and [7, 9]. To cover all the points that receive light, we can use the intervals [1, 6] and [7, 9]. Therefore, the minimum number of non-overlapping intervals needed is 2.","solution":"def min_non_overlapping_intervals(intervals): Returns the minimum number of non-overlapping intervals needed to cover all the points on the line that receive light from at least one tower. Args: intervals (List[Tuple[int, int]]): List of tuples, each representing an interval. Returns: int: Minimum number of non-overlapping intervals needed. if not intervals: return 0 # Sort intervals by the right endpoint intervals.sort(key=lambda x: x[1]) count = 0 end = -1 for interval in intervals: if interval[0] > end: # If the current interval starts after the last added interval ends, add it to the set count += 1 end = interval[1] return count"},{"question":"Write a program that processes the daily maximum temperatures recorded over a month and calculates the average temperature variation. The temperature variation for a day is defined as the difference between the highest and the lowest temperatures of that day. Your program should read the data, calculate the daily variations, and then output the average of these variations over the entire month. Input The input is given in the following format: ``` Day 1 high Day 1 low Day 2 high Day 2 low ... Day 30 high Day 30 low ``` - Each line contains two real numbers separated by a space, representing the highest and lowest temperature for a given day. - The temperatures are real numbers between -100 and 100, inclusive. Output The output should be a single real number representing the average temperature variation over the month. The result may contain an error of 0.01 or less. Example Input ``` 15.5 3.2 21.1 14.0 19.9 9.5 ... 10.5 -3.0 ``` Output ``` 11.32 ```","solution":"def calculate_average_temperature_variation(temperature_readings): Calculates the average temperature variation over a month. Args: temperature_readings: List of tuples where each tuple contains two floats representing the high and low temperature of a day. Returns: Float: Average temperature variation over the month. total_variation = 0.0 days = len(temperature_readings) for high, low in temperature_readings: variation = high - low total_variation += variation return total_variation / days"},{"question":"Amelia is participating in a programming competition where she needs to generate all possible valid parentheses combinations for a given number of pairs. The generated combinations should be unique and should correctly match the opening and closing parentheses. Write a program that generates all the valid combinations of parentheses for a given integer n. input Input is given from standard input in the following format. n - The integer n represents the number of pairs of parentheses. - 1 le n le 12 output Print all the valid parentheses combinations in lexicographic order, one combination per line. Example Input 3 Output ((())) (()()) (())() ()(()) ()()()","solution":"def generate_parentheses(n): Generates all valid combinations of n pairs of parentheses. Results are printed in lexicographic order. def backtrack(s=\'\', left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s+\'(\', left+1, right) if right < left: backtrack(s+\')\', left, right+1) result = [] backtrack() result.sort() for combination in result: print(combination) # Example usage: # generate_parentheses(3)"},{"question":"Given a string s of length n, determine the length of the longest contiguous subsequence that contains exactly k distinct characters. Input The first line of the standard input contains one integer t (1 ≤ t ≤ 100) which is the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 10^5) followed by an integer k (1 ≤ k ≤ 26) separated by a space. Output For each test case, print the length of the longest contiguous subsequence of s that contains exactly k distinct characters. Constraints 1 ≤ t ≤ 100 1 ≤ |s| ≤ 10^5 1 ≤ k ≤ 26 SAMPLE INPUT 2 abcba 2 aaabbc 3 SAMPLE OUTPUT 3 6","solution":"def longest_subseq_with_k_distinct_chars(s, k): from collections import defaultdict n = len(s) if k > n: return 0 char_count = defaultdict(int) max_length = 0 start = 0 distinct_count = 0 for end in range(n): char_count[s[end]] += 1 if char_count[s[end]] == 1: distinct_count += 1 while distinct_count > k: char_count[s[start]] -= 1 if char_count[s[start]] == 0: distinct_count -= 1 start += 1 if distinct_count == k: max_length = max(max_length, end - start + 1) return max_length def process_input(t, test_cases): results = [] for s, k in test_cases: results.append(longest_subseq_with_k_distinct_chars(s, k)) return results"},{"question":"Binary Tree Node Counter Template in Python Constraints 1 ≤ Number of nodes in the binary tree ≤ 1000 1 ≤ Each node value ≤ 1000 Input The input consists of multiple lines: - The first line contains the number of nodes N in the binary tree. - The following N lines contain pairs of integers, where each pair represents a directed edge between two nodes (a parent and its child). You can assume the root node is always 1 and there are no duplicate edges. Output Print the number of nodes in the binary tree. Examples Input 5 1 2 1 3 2 4 2 5 Output 5 Input 4 1 2 1 3 3 4 Output 4","solution":"def count_nodes(edges): Counts the number of nodes in a binary tree given its edges. Args: edges (list of tuple): Each tuple contains a pair of integers representing a directed edge. Returns: int: The number of nodes in the binary tree. # Using set to avoid counting duplicate nodes nodes = set() for edge in edges: parent, child = edge nodes.add(parent) nodes.add(child) return len(nodes)"},{"question":"You are given an array of \'M\' integers. Your task is to find the minimum cost required to make all elements equal. You can increase or decrease any element by 1 at a cost represented by that value. Input The first line contains an integer \'M\' representing the number of elements in the array. The second line contains \'M\' integers representing the array elements. Output Print the minimum cost required to make all elements equal. Constraints 1 ≤ M ≤ 10^5 1 ≤ Array elements ≤ 10^9 SAMPLE INPUT 4 2 3 1 4 SAMPLE OUTPUT 5 Explanation To make all elements equal to 3, we can perform the following operations: - Increase 2 to 3 at a cost of 2. - Decrease 4 to 3 at a cost of 4. - Increase 1 to 3 at a cost of 3. Total cost = 2 + 4 + 3 = 9 Alternatively, to make all elements equal to 2, we perform the following operations: - Decrease 3 to 2 at a cost of 3. - Leave 2 as it is at a cost of 0. - Increase 1 to 2 at a cost of 2. - Decrease 4 to 2 at a cost of 6. Total cost = 3 + 0 + 2 + 6 = 11 To demonstrate the minimum cost, we\'d need to test each median value which results in: Total cost = 5 for making all elements equal to 3.","solution":"def min_cost_to_make_equal(M, elements): Returns the minimum cost required to make all elements in the array equal. :param M: int, number of elements in the array :param elements: list of int, the array elements :return: int, minimum cost to make all elements equal elements.sort() median = elements[M // 2] cost = 0 for elem in elements: cost += abs(elem - median) return cost"},{"question":"You are working as a developer for a technology company, and you have been given the task of implementing a task scheduler. The scheduler processes a list of tasks, where each task has a start time and a duration. Your goal is to determine the maximum number of non-overlapping tasks that can be scheduled from a list of given tasks. Each task is represented as a tuple (start_time, duration), where: - `start_time` is a non-negative integer representing the start time of the task. - `duration` is a positive integer representing the duration of the task. A task `(s1, d1)` does not overlap with a task `(s2, d2)` if and only if the end time of one task is less than or equal to the start time of the other task. The end time of a task is defined as `start_time + duration`. Function signature: ```python def max_non_overlapping_tasks(tasks: List[Tuple[int, int]]) -> int: ``` # Input: - `tasks` (List[Tuple[int, int]]): A list of tasks, where each task is represented as a tuple (start_time, duration). - 1 ≤ len(tasks) ≤ 10^5 - 0 ≤ start_time ≤ 10^9 - 1 ≤ duration ≤ 10^9 # Output: - Returns an integer representing the maximum number of non-overlapping tasks that can be scheduled from the given list. # Example: Example 1: Input: ```python tasks = [(1, 2), (3, 2), (4, 1), (7, 3)] ``` Output: ```python 3 ``` Explanation: The tasks (1, 2), (4, 1), and (7, 3) do not overlap and form the maximum number of non-overlapping tasks. Example 2: Input: ```python tasks = [(0, 3), (2, 2), (4, 3)] ``` Output: ```python 2 ``` Explanation: The tasks (0, 3) and (4, 3) do not overlap and form the maximum number of non-overlapping tasks. # Constraints: - The input list will contain up to a maximum of 100,000 tasks. - Task start times and durations are large integers (up to 1 billion). - The function should be optimized to handle large inputs efficiently.","solution":"from typing import List, Tuple def max_non_overlapping_tasks(tasks: List[Tuple[int, int]]) -> int: # Sort tasks based on end time (start_time + duration) tasks.sort(key=lambda x: x[0] + x[1]) count = 0 end_time = -1 for start_time, duration in tasks: if start_time >= end_time: count += 1 end_time = start_time + duration return count"},{"question":"Write a program to find the length of the longest harmonious subsequence in an array of integers. A harmonious subsequence is defined as a subsequence where the difference between its maximum and minimum values is exactly 1. Input Format: The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers, representing the elements of the array. Output Format: Print a single integer, the length of the longest harmonious subsequence. Constraints: 1 ≤ n ≤ 10^5 -10^9 ≤ ai ≤ 10^9 (elements of the array) SAMPLE INPUT 6 1 2 2 1 3 4 SAMPLE OUTPUT 4 Explanation: A harmonious subsequence with the length of 4 is [1, 2, 2, 1]. The difference between the maximum and minimum values is 1. Note: It is important to note that the subsequence does not need to be contiguous within the array but does have to maintain the order of the original elements.","solution":"def findLHS(nums): Find the length of the longest harmonious subsequence. Args: nums : List[int] : The input array of integers. Returns: int : The length of the longest harmonious subsequence. from collections import Counter count = Counter(nums) max_length = 0 for key in count: if key + 1 in count: max_length = max(max_length, count[key] + count[key + 1]) return max_length # Example Usage: # n = 6 # arr = [1, 2, 2, 1, 3, 4] # print(findLHS(arr)) # Output: 4"},{"question":"A popular restaurant wants to improve its booking process. To ensure efficient seat allocations, they have decided to employ a new booking system. A table may be booked for at most N guests, and the restaurant has M tables of different sizes available for reservations. The system accepts a list of incoming booking requests, each of which specifies the number of guests and the time slot of the booking. It assigns each booking to an appropriately sized available table and keeps track of each table\'s availability across different time slots. Your task is to write a program that processes each booking request and allocates a suitable table if available. If no suitable table is available for a given booking request, return -1 for that request indicating its rejection. Otherwise, return the index (0-based) of the table that gets booked. Input The first line of input contains two integers N (1 ≤ N ≤ 100) and M (1 ≤ M ≤ 100), representing the maximum number of guests a table can hold and the number of tables, respectively. The second line contains M integers, t1, t2, ..., tM (1 ≤ ti ≤ N), representing the sizes of the tables, i.e., the maximum number of guests each table can accommodate. The third line contains an integer R (1 ≤ R ≤ 100), representing the number of booking requests. Each of the following R lines contains two integers gi and ti (1 ≤ gi ≤ N, 0 ≤ ti ≤ 23), representing the number of guests and the time slot for the i-th booking request, respectively. Output Output R lines. For each booking request, output the index of the allocated table if the booking is successful, or -1 if the booking is rejected. Example Input 5 3 2 4 6 4 5 12 3 12 2 12 6 13 Output 2 1 0 2 Note In the provided example: - The first booking request for 5 guests is allocated to table index 2 (size 6) at time slot 12. - The second booking request for 3 guests is allocated to table index 1 (size 4) at time slot 12. - The third booking request for 2 guests is allocated to table index 0 (size 2) at time slot 12. - The fourth booking request for 6 guests is allocated to table index 2 (size 6) at time slot 13, as it is free during that time slot.","solution":"def allocate_tables(N, M, table_sizes, R, booking_requests): Allocates tables based on booking requests. Parameters: N: int : Maximum number of guests for any table M: int : Number of tables table_sizes: list of int : Sizes of each table R: int : Number of booking requests booking_requests: list of tuples : Each tuple contains number of guests and time slot Returns: list of int : Indices of allocated tables or -1 if booking is rejected table_availability = [{} for _ in range(M)] results = [] for guests, time_slot in booking_requests: allocated = False for idx in range(M): if table_sizes[idx] >= guests and time_slot not in table_availability[idx]: table_availability[idx][time_slot] = True results.append(idx) allocated = True break if not allocated: results.append(-1) return results # Example usage N = 5 M = 3 table_sizes = [2, 4, 6] R = 4 booking_requests = [ (5, 12), (3, 12), (2, 12), (6, 13), ] print(allocate_tables(N, M, table_sizes, R, booking_requests)) # should return [2, 1, 0, 2]"},{"question":"Imagine you are working with an array that represents stock prices on different days. You want to find out the maximum profit you can achieve given that you can complete at most two transactions. A transaction includes buying one and selling one share of the stock. Note that you cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy it again). Write a function that takes a list of integers representing the daily stock prices and returns an integer representing the maximum profit you can achieve with at most two transactions. Input - A single list of integers, where each integer represents the stock price on that day. Example: [3,3,5,0,0,3,1,4] Output - An integer, the maximum profit achievable with at most two transactions. Example: 6 Function Signature ```python def max_profit(prices: List[int]) -> int: ``` # Examples 1. Input: [3,3,5,0,0,3,1,4] Output: 6 Explanation: You can buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3. So the total profit is 6. 2. Input: [1,2,3,4,5] Output: 4 Explanation: You can buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 4. Note that you cannot buy on day 1, sell on day 3 and then buy again on day 3 and sell on day 5, as you would need to sell and buy again before making another transaction. 3. Input: [7,6,4,3,1] Output: 0 Explanation: In this case, no transaction is done, i.e., max profit = 0. Note: You can assume the number of days (i.e., the length of the provided list) does not exceed 105. Each stock price will be a non-negative integer and will not exceed 109.","solution":"def max_profit(prices): Returns the maximum profit with at most two transactions. :param prices: List[int] :return: int if not prices: return 0 n = len(prices) if n == 1: return 0 # First transaction profits first_buy = float(\'-inf\') first_sell = 0 second_buy = float(\'-inf\') second_sell = 0 for price in prices: first_buy = max(first_buy, -price) first_sell = max(first_sell, first_buy + price) second_buy = max(second_buy, first_sell - price) second_sell = max(second_sell, second_buy + price) return second_sell"},{"question":"A city is planning to build a network of roads to connect some of its important locations. They have a map that shows a list of locations and desired roads between them. However, not all possible roads can be built due to legal and budget constraints. You are tasked with determining whether it\'s possible to travel between any two given locations using the roads in the city\'s plan. Input The first line in the data set consists of two integers N (1 ≤ N ≤ 100) and M (0 ≤ M ≤ 1000). N describes the number of locations, and M describes the number of desired roads. The next M lines each contain two integers u and v (1 ≤ u, v ≤ N), representing a bidirectional road between location u and location v. The final line consists of one integer Q (1 ≤ Q ≤ 100), followed by Q pairs of locations u and v. Each pair represents a query, and you need to determine whether there is a path from u to v using the available roads. Output For each query, print \\"YES\\" if there is a path between the two locations, and \\"NO\\" if there is not. Examples Input 5 3 1 2 2 3 4 5 2 1 3 3 5 Output YES NO Input 4 4 1 2 2 3 3 4 1 4 3 1 4 2 4 1 3 Output YES YES YES","solution":"def can_travel_between_locations(N, M, roads, queries): from collections import defaultdict, deque def bfs(start, end): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node == end: return True if node not in visited: visited.add(node) queue.extend(graph[node] - visited) return False graph = defaultdict(set) for u, v in roads: graph[u].add(v) graph[v].add(u) results = [] for u, v in queries: if bfs(u, v): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a magical land, there are multiple types of creatures: Warriors, Mages, and Healers. You, being the leader, need to form groups for an upcoming adventure. Each group must consist of: - 2 Warriors - 1 Mage - 1 Healer You have data for different scenarios where various counts of Warriors, Mages, and Healers are given. Your task is to determine the maximum number of groups that can be formed for each scenario. Input The input consists of one dataset. Input data is given in the following format: Q w1 m1 h1 w2 m2 h2 :: wQ mQ hQ Q (0 ≤ Q ≤ 100) on the first line is the number of scenarios for which you want to find the number of groups. The number of people by role in each scenario is given in the following Q lines. Each row contains the number of Warriors wi (0 ≤ wi ≤ 1000), the number of Mages mi (0 ≤ mi ≤ 1000), and the number of Healers hi (0 ≤ hi ≤ 1000). Output Output the maximum number of groups that can be created on one line for each scenario. Example Input 3 6 3 2 4 5 6 10 3 3 Output 2 3 3","solution":"def max_groups(Q, scenarios): result = [] for scenario in scenarios: w, m, h = scenario # Determine the maximum number of groups using the limiting factor groups = min(w // 2, m, h) result.append(groups) return result"},{"question":"You are given a 2-dimensional grid of size `m x n` representing a map where `1` represents land and `0` represents water. The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected `1`s). An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Calculate the perimeter of the island. Input The input consists of two integers, `m` and `n` (1 ≤ m, n ≤ 1000), followed by `m` lines, each containing `n` integers. Each integer is either `0` or `1`. Output Output the perimeter of the island. Example Input 4 4 0 1 0 0 1 1 1 0 0 1 0 0 1 1 0 0 Output 16 Explanation The perimeter is the number of edges where a `1` is directly connected to a `0` or is on the boundary of the grid. Each cell of the island contributes to the perimeter count by the number of edges shared with water. In the example grid: - The cell (0, 1) has 3 edges touching water. - The cell (1, 0) has 3 edges touching water. - The cell (1, 1) has 1 edge touching water. - The cell (1, 2) has 2 edges touching water. - The cell (2, 1) has 2 edges touching water. - The cell (3, 0) has 3 edges touching water. - The cell (3, 1) has 2 edges touching water. Summing these contributions gives a total perimeter of 16.","solution":"def island_perimeter(grid): Calculate the perimeter of the island in the given grid. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) perimeter = 0 for i in range(m): for j in range(n): if grid[i][j] == 1: perimeter += 4 # Start with assuming all 4 sides are contributing to the perimeter if i > 0 and grid[i-1][j] == 1: # Check the cell above perimeter -= 2 if j > 0 and grid[i][j-1] == 1: # Check the cell to the left perimeter -= 2 return perimeter"},{"question":"There are N distinct lamps numbered from 1 to N arranged in a row. Each lamp can be either on (1) or off (0). You are given a list of Q operations. Each operation is one of two types: 1. Toggle: You are given two integers l and r (1 ≤ l ≤ r ≤ N). Change the state of each lamp between l and r (inclusive) from on to off, or from off to on. 2. Query: You are given one integer x (1 ≤ x ≤ N). Determine the state of the lamp numbered x. Your task is to perform the given operations and output the result of each query operation. Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ Q ≤ 10^5 * 1 ≤ l ≤ r ≤ N * 1 ≤ x ≤ N Input The first line contains the integers N and Q. The next Q lines will each contain an operation in the following format: 1 l r or 2 x Output For each query operation (type 2), output the state of the specified lamp (0 or 1). Examples Input 5 5 1 2 4 2 3 2 1 1 3 5 2 3 2 5 Output 1 0 0 1","solution":"def lamp_operations(n, q, operations): lamps = [0] * (n + 1) result = [] for operation in operations: if operation[0] == 1: l, r = operation[1], operation[2] for i in range(l, r + 1): lamps[i] = 1 - lamps[i] elif operation[0] == 2: x = operation[1] result.append(lamps[x]) return result"},{"question":"Alice is working on a string encoding technique. She needs to convert a string, consisting of lowercase alphabetical characters, into a new encoded form. The encoding algorithm involves replacing each character in the string with its position in the alphabet (i.e., \'a\' becomes 1, \'b\' becomes 2, ..., \'z\' becomes 26) and summing these values to produce a single encoded number for the entire string. Your task is to write a program that helps Alice by encoding the given string according to the algorithm described. Constraints * The length of the string ( S ) is ( 1 leq |S| leq 100,000 ). * ( S ) consists of lowercase alphabetical characters (\'a\' to \'z\'). Input Input is given from the Standard Input in the following format: S Output Print the encoded number for the given string as a single integer. Examples Input abc Output 6 Input zzz Output 78 Input hello Output 52","solution":"def encode_string(s): Encodes the string by converting each character to its positional value in the alphabet and summing these values. :param s: str: input string consisting of lowercase alphabetical characters :return: int: encoded value of the string return sum(ord(c) - ord(\'a\') + 1 for c in s)"},{"question":"You are given a binary tree where each node contains a digit from 0 to 9. Each root-to-leaf path represents a number formed by concatenating the digits along the path. For example, in the following tree: 1 / 2 3 / 4 The root-to-leaf paths are 124 and 13, which represent the numbers 124 and 13, respectively. The sum of these numbers is 137. Write a function that takes the root of a binary tree as input and returns the sum of all the numbers formed by root-to-leaf paths. **Input:** - The input will be given as the root of the binary tree. Each node of the tree has the following structure: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` **Output:** - Return an integer representing the sum of all the numbers formed by root-to-leaf paths in the tree. **Example 1:** **Input:** ```python root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) ``` **Output:** ```python 137 ``` **Example 2:** **Input:** ```python root = TreeNode(4) root.left = TreeNode(9) root.right = TreeNode(0) root.left.left = TreeNode(5) root.left.right = TreeNode(1) ``` **Output:** ```python 1026 ``` **Explanation:** - The root-to-leaf paths are 495, 491, and 40. Summing these gives 495 + 491 + 40 = 1026. **Notes:** - Assume the tree has at least one node. - The tree will not have more than 10^4 nodes.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sumNumbers(root): Computes the sum of all numbers formed by root-to-leaf paths in the given binary tree. def dfs(node, current_number): if not node: return 0 current_number = current_number * 10 + node.val # If the node is a leaf, return the current_number if not node.left and not node.right: return current_number # If not leaf, continue DFS on children left_sum = dfs(node.left, current_number) right_sum = dfs(node.right, current_number) return left_sum + right_sum return dfs(root, 0)"},{"question":"The Ancient Library is constructing a new system to manage and maintain the order of their book archive. Each book is indexed with a unique non-negative integer ID. The library aims to enforce a specific order on the bookshelves: the books on each shelf must have IDs that form an increasing sequence, and every shelf can hold books with IDs broadly divided into a subinterval. For example, a valid bookshelf could have books with IDs [5, 6, 7, 10] where each consecutive pair follows the increasing order, but a sequence like [5, 6, 10, 7] would be invalid. Given a sequence of book IDs, the library needs to determine whether it is possible to partition the sequence into one or more contiguous subsequences, where each subsequence adheres to the above rules. Your task is to find any valid partition or report if it\'s impossible. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) representing the total number of books. The second line contains n integers b_1, b_2, ..., b_n (0 ≤ b_i ≤ 10^6) representing the IDs of the books in the order they are currently arranged. Output If there is no valid partition, print -1. Otherwise, print any valid partition in the following format: - On the first line, print the number s of shelves (1 ≤ s ≤ n). - On the second line, print s integers l_1, l_2, ..., l_s (1 ≤ l_i ≤ n and l_1 + l_2 + ... + l_s = n), where l_i is the number of books in the i-th shelf. If there are many valid solutions, you can print any of them. You don\'t have to minimize or maximize the number of shelves. Examples Input 7 2 3 5 7 11 13 17 Output 1 7 Input 8 10 12 14 11 13 15 18 20 Output 2 3 5 Input 5 1 4 2 5 3 Output -1 Note In the first example, the entire sequence forms a single valid shelf with an increasing order of book IDs. In the second example, one possible valid partition is to split the sequence into [10, 12, 14] and [11, 13, 15, 18, 20], both of which maintain an increasing order. In the third example, it is impossible to partition the sequence into any number of valid shelves as no subintervals maintaining increasing order exist.","solution":"def partition_books(n, ids): # Edge case: a single book is always a valid shelf if n == 1: return (1, [1]) # Attempt to partition the sequence into valid shelves partitions = [] current_partition = [ids[0]] for i in range(1, n): if ids[i] > ids[i - 1]: current_partition.append(ids[i]) else: partitions.append(len(current_partition)) current_partition = [ids[i]] partitions.append(len(current_partition)) # Add the last partition # Check if partitioning is valid, if there\'s any partition with a single element if any(p == 1 for p in partitions): return -1 return (len(partitions), partitions) # Example usage: # n = 8 # ids = [10, 12, 14, 11, 13, 15, 18, 20] # print(partition_books(n, ids))"},{"question":"Sofia is a computer science student who loves solving problems using sorting algorithms. One day, she encountered a new problem: she needs to sort a list of strings based on their lengths but in descending order. If two strings have the same length, they should retain their original order from the input. Your task is to help Sofia by writing a function that takes a list of strings and returns a new list sorted based on the aforementioned criteria. Input The input consists of multiple test cases. Each test case starts with a single integer T representing the number of test cases. For each test case, the first line contains an integer N, the number of strings. The following N lines each contain a string. Output For each test case, output the sorted list of strings in a single line, separated by spaces. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ Length of each string ≤ 100 Example Input: 2 4 apple banana kiwi grapefruit 3 car bike bus Output: grapefruit banana apple kiwi bike car bus Note: Remember that within each test case, strings with the same length should retain their original order from the input.","solution":"def sort_strings_by_length(test_cases): Sorts strings based on their lengths in descending order. If two strings have the same length, they maintain their original order. :param test_cases: List of test cases where each test case is a tuple (N, list_of_strings) :return: A list of sorted strings for each test case. sorted_cases = [] for case in test_cases: N, strings = case sorted_strings = sorted(strings, key=lambda x: (-len(x), strings.index(x))) sorted_cases.append(\\" \\".join(sorted_strings)) return sorted_cases def parse_input(input_data): Parses the input data and returns the list of test cases. :param input_data: The input data as a string. :return: A list of tuples representing test cases. lines = input_data.strip().split(\'n\') num_test_cases = int(lines[0]) index = 1 test_cases = [] for _ in range(num_test_cases): N = int(lines[index]) strings = lines[index + 1: index + 1 + N] test_cases.append((N, strings)) index += 1 + N return test_cases"},{"question":"Raj is trying to organize a hackathon event at his university. He has to arrange the seating for the participants. In the hackathon, each participant will sit at a unique seat and each seat is identified by an integer from 1 to n. Raj knows that some participants are friends and they want to sit next to each other, while some participants are rivals and they do not want to be seated next to each other. Help Raj to determine if it is possible to arrange the participants in such a way that all friends sit next to each other, and no rivals sit next to each other. You are given m constraints of the form (u, v), which indicates that u and v should sit next to each other (friend constraint), and k constraints of the form (x, y), which indicates that x and y should not sit next to each other (rival constraint). Input The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. For each test case: - The first line contains two integers n and p (1 ≤ n ≤ 100; 0 ≤ p ≤ 2 ⋅ 10^4) — number of participants and number of constraints. - The following p lines describe the constraints, either in the form \\"F u v\\" or \\"R x y\\", where: - \\"F u v\\" means u and v are friends and should sit next to each other. - \\"R x y\\" means x and y are rivals and should not sit next to each other. Output For each test case, print \\"YES\\" if it is possible to arrange the participants according to the given constraints, otherwise print \\"NO\\". Example Input 3 3 2 F 1 2 R 1 3 4 5 F 1 2 F 2 3 F 3 4 R 1 3 R 1 4 5 0 Output YES NO YES Note In the first test case, it is possible to seat participant 1 next to participant 2 and seat 3 can be anywhere without issues. Hence, the output is \\"YES\\". In the second test case, participants 1, 2, 3, and 4 need to be seated consecutively due to the friend constraints, but participant 1 being a rival of both 3 and 4 makes it impossible. Hence, the output is \\"NO\\". In the third test case, there are no constraints so any seating arrangement is possible. Hence, the output is \\"YES\\".","solution":"def can_organize_hackathon(t, test_cases): Determines if it is possible to organize seating for the hackathon based on given constraints. from collections import defaultdict, deque results = [] for i in range(t): n, p = test_cases[i][\'n\'], test_cases[i][\'p\'] friends_constraints = defaultdict(list) rivals_constraints = [] for j in range(p): constraint = test_cases[i][\'constraints\'][j] if constraint[0] == \'F\': _, u, v = constraint friends_constraints[u].append(v) friends_constraints[v].append(u) elif constraint[0] == \'R\': _, x, y = constraint rivals_constraints.append((x, y)) parent = {i: i for i in range(1, n + 1)} def find(x): while parent[x] != x: parent[x] = parent[parent[x]] x = parent[x] return x def union(x, y): parent[find(x)] = find(y) for u in friends_constraints: for v in friends_constraints[u]: union(u, v) valid = True for x, y in rivals_constraints: if find(x) == find(y): valid = False break results.append(\\"YES\\" if valid else \\"NO\\") return results"},{"question":"Given a number N, your aim is to transform N to 1 in the minimum number of operations. There are two types of operations you can use: 1.) If N is even, divide it by 2. 2.) If N is odd, subtract 1 from it. Input: The first line contains the number of test cases T. Then, T lines follow, where each line contains an integer N. Output: Print a line containing the minimum number of operations required to transform N to 1, corresponding to each test case. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^18 SAMPLE INPUT 2 2 3 SAMPLE OUTPUT 1 2","solution":"def min_operations(n): Returns the minimum number of operations required to transform n to 1. operations = 0 while n > 1: if n % 2 == 0: n //= 2 else: n -= 1 operations += 1 return operations def process_test_cases(test_cases): Processes a list of test cases and returns the results as a list. results = [] for case in test_cases: results.append(min_operations(case)) return results"},{"question":"You have obtained a dataset of weather records from a small town. Each record contains information about the day of the month, the temperature in Celsius, and whether it was a sunny day. You need to analyze these records to identify certain trends. Consider, the weather records are provided in the form of a list of strings, where each string contains the day of the month (an integer from 1 to 31), the temperature (an integer from -50 to 50), and a boolean value (\'True\' or \'False\') indicating if it was a sunny day. The records might contain duplicates, which represent multiple observations for the same day. You need to implement a function `analyze_weather(records: List[str]) -> Tuple[int, int, float]` that takes in this list of records and returns a tuple containing: 1. The total number of sunny days. 2. The highest temperature recorded. 3. The average temperature of sunny days. If there are no sunny days in the records, the average temperature of sunny days should be returned as 0. # Example ```python records = [ \\"1,22,True\\", \\"2,25,False\\", \\"3,18,True\\", \\"4,30,False\\", \\"1,20,True\\" ] assert analyze_weather(records) == (3, 30, 20.0) ``` **Input Format** A list of strings where each string contains three comma-separated values: - An integer indicating the day of the month (1 ≤ day ≤ 31) - An integer indicating the temperature in Celsius (-50 ≤ temperature ≤ 50) - A string \'True\' or \'False\' indicating if it was a sunny day. **Output Format** A tuple containing: - An integer representing the total number of sunny days. - An integer representing the highest temperature recorded. - A float representing the average temperature of sunny days, rounded to one decimal place. Return 0 if there are no sunny days. # Assumptions: - There is at least one record in the input. - The day, temperature, and sunny day status in each record are valid and within the given constraints. Implement the function in Python: ```python from typing import List, Tuple def analyze_weather(records: List[str]) -> Tuple[int, int, float]: # Your code here ```","solution":"from typing import List, Tuple def analyze_weather(records: List[str]) -> Tuple[int, int, float]: total_sunny_days = 0 highest_temperature = float(\'-inf\') sunny_temps = [] for record in records: day, temp, is_sunny = record.split(\',\') temp = int(temp) is_sunny = is_sunny == \'True\' # Record the highest temperature if temp > highest_temperature: highest_temperature = temp # Count sunny days and store sunny temperatures if is_sunny: total_sunny_days += 1 sunny_temps.append(temp) # Calculate the average temperature of sunny days if sunny_temps: avg_sunny_temp = sum(sunny_temps) / len(sunny_temps) else: avg_sunny_temp = 0 return total_sunny_days, highest_temperature, round(avg_sunny_temp, 1)"},{"question":"A company is offering an exclusive reward for customers who participate in their latest survey. Each customer submitting the survey can choose one reward from a given set of rewards. The company needs to ensure that all rewards are distributed evenly to maintain fairness among the participants. Given an array of integers where each integer represents the ID of a reward chosen by a customer, write a function to determine if it is possible to evenly distribute the rewards among all the customers. You need to solve the problem such that if the total number of rewards is divisible by the number of different types of rewards, then the rewards can be evenly distributed. Otherwise, it is not possible to distribute the rewards fairly. Input The first line of the input contains an integer n (1 ≤ n ≤ 105) which represents the number of customers who submitted the survey. The second line contains n integers r1, r2, ..., rn (1 ≤ ri ≤ 50), where ri is the ID of the reward chosen by the i-th customer. Output Print \\"YES\\" if it is possible to evenly distribute the rewards among all customers, otherwise print \\"NO\\". Examples Input 5 1 2 2 1 3 Output NO Input 6 3 3 1 1 2 2 Output YES Note In the first example, there are 3 different types of rewards and a total of 5 customers, which is not divisible by 3, so it is not possible to distribute the rewards evenly. In the second example, there are 3 different types of rewards and a total of 6 customers, which is divisible by 3, so it is possible to distribute the rewards evenly among the customers.","solution":"def can_distribute_evenly(n, rewards): Determines if it is possible to evenly distribute the rewards among all the customers. :param n: Number of customers who submitted the survey (integer). :param rewards: List of integers where each integer represents the ID of a reward chosen by a customer. :return: \\"YES\\" if it is possible to distribute the rewards evenly, otherwise \\"NO\\". unique_rewards = set(rewards) types_of_rewards = len(unique_rewards) if n % types_of_rewards == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"A company needs to calculate the total time required to complete a series of tasks performed by different employees. Each task is given a start time and end time, and all tasks take place within the same day. You are tasked with writing a function that computes the total productive time, which is the sum of time intervals without overlapping. Assume tasks are performed from 0 to 24 hours. Write a function `total_productive_time(tasks)` where `tasks` is a list of tuples, each containing two integers: the start and end time of a task. The function should return the total productive time in hours. # Function Signature ```python def total_productive_time(tasks: List[Tuple[int, int]]) -> int: ``` # Input - `tasks` : List[Tuple[int, int]] - A list of tuples representing the start and end times of tasks, where 0 <= start < end <= 24. # Output - An integer representing the total productive hours without counting overlapping times more than once. # Example Input ```python tasks = [(1, 3), (2, 5), (6, 8)] ``` Output ```python 5 ``` # Explanation - The time interval from `(1, 3)` overlaps with `(2, 5)`, so they collectively cover the interval from 1 to 5. - Additionally, the interval `(6, 8)` does not overlap with any other intervals. - Thus, the total productive time is 4 hours (from 1 to 5) plus 2 hours (from 6 to 8), equalling 5 hours. # Constraints - 1 ≤ len(tasks) ≤ 100 - Each task\'s times lie within the range [0, 24].","solution":"from typing import List, Tuple def total_productive_time(tasks: List[Tuple[int, int]]) -> int: if not tasks: return 0 # Sort tasks based on the start times tasks.sort() total_time = 0 current_start, current_end = tasks[0] for start, end in tasks[1:]: if start > current_end: # no overlap total_time += current_end - current_start current_start, current_end = start, end else: # overlap current_end = max(current_end, end) total_time += current_end - current_start return total_time # Example usage tasks = [(1, 3), (2, 5), (6, 8)] print(total_productive_time(tasks)) # Output should be 5"},{"question":"A large extraction company has recently conducted a survey to analyze the potential impact of their new drilling project on nearby communities. They have collected data on the happiness levels of the residents living in different neighborhoods along with the expected impact of the project in those areas. Given this data, the company wants to determine the maximum reduction in the total happiness level that could happen if they proceed with their project. Each neighborhood has an initial happiness score and an expected happiness reduction due to the project. Your task is to write a program that calculates and finds the maximum possible reduction in the total happiness level if the company proceeds with the project. Input The input consists of multiple datasets. Each dataset starts with a line containing the number of neighborhoods N. > N Where N is a positive integer. N is less than or equal to 100. The next N lines each describe the initial happiness level H and the reduction in happiness R for each neighborhood, in the following format: > H R Where H is the initial happiness level and R is the reduction in happiness due to the project. Both H and R are positive integers less than 10,000. A line containing zero indicates the end of the input. Output For each dataset, print a single line containing the maximum possible reduction in the total happiness level. Example Input 3 1000 200 900 150 1100 300 2 800 100 750 120 0 Output 650 220","solution":"def max_happiness_reduction(datasets): Given a list of datasets where each dataset contains initial happiness scores and reduction values for neighborhoods, calculate the max possible reduction in total happiness for each dataset. results = [] for data in datasets: max_reduction = 0 for H, R in data: max_reduction += R results.append(max_reduction) return results def parse_input(input_str): Parse the input string into datasets. lines = input_str.strip().split(\\"n\\") datasets = [] i = 0 while i < len(lines): N = int(lines[i]) if N == 0: break i += 1 dataset = [] for _ in range(N): H, R = map(int, lines[i].split()) i += 1 dataset.append((H, R)) datasets.append(dataset) return datasets"},{"question":"Peter is an expert in competitive programming. To challenge him, his coach gave him a problem named \\"Matrix Sum Queries\\". Problem: His coach gave him an n x m matrix filled with integers and then asked Q queries related to submatrices. Each query is described by four integers x1, y1, x2, and y2. For each query, his coach wants to know the sum of all elements in the submatrix defined by the top-left corner (x1, y1) and the bottom-right corner (x2, y2). Your task is to help Peter solve the problem efficiently within the given constraints. INPUT: - The first line of input contains two integers n and m, denoting the dimensions of the matrix. - The next n lines of input each contain m integers, representing the matrix. - The following line contains a single integer Q, denoting the number of queries. - The next Q lines of input each contain four integers x1, y1, x2, y2, describing the submatrix for each query. OUTPUT: Print the correct answer for each of the queries. CONSTRAINTS: - 1 ≤ n, m ≤ 1000 - |Matrix[i][j]| ≤ 1000 - 1 ≤ Q ≤ 100000 - 1 ≤ x1 ≤ x2 ≤ n - 1 ≤ y1 ≤ y2 ≤ m SAMPLE INPUT: 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 SAMPLE OUTPUT: 12 28 Explanation: For Q1: The submatrix from (1,1) to (2,2) is: 1 2 4 5 Sum = 1 + 2 + 4 + 5 = 12 For Q2: The submatrix from (2,2) to (3,3) is: 5 6 8 9 Sum = 5 + 6 + 8 + 9 = 28","solution":"def matrix_sum_queries(n, m, matrix, queries): # Create a prefix sum matrix prefix_sum = [[0] * (m+1) for _ in range(n+1)] # Fill the prefix sum matrix for i in range(1, n+1): for j in range(1, m+1): prefix_sum[i][j] = matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] results = [] # Process each query for x1, y1, x2, y2 in queries: total = prefix_sum[x2][y2] - prefix_sum[x1-1][y2] - prefix_sum[x2][y1-1] + prefix_sum[x1-1][y1-1] results.append(total) return results # Example usage n = 3 m = 3 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] queries = [(1, 1, 2, 2), (2, 2, 3, 3)] print(matrix_sum_queries(n, m, matrix, queries)) # Output: [12, 28]"},{"question":"Thomas is organizing a music library and needs to categorize his songs based on their lengths. Each song has a length in seconds. Thomas wants to know how many of his songs will fall into different duration categories. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of songs in the library. The second line contains n integers a1, a2, ... , an (1 ≤ ai ≤ 104) — the lengths of the songs in seconds. Output Print four integers representing the number of songs in the following categories: 1. Less than 60 seconds 2. From 60 to 119 seconds inclusive 3. From 120 to 299 seconds inclusive 4. 300 seconds or longer Examples Input 7 30 75 120 65 45 310 150 Output 2 2 2 1 Input 4 50 40 35 55 Output 4 0 0 0 Note In the first example, the songs are categorized as follows: - Less than 60 seconds: 30, 45 (2 songs) - From 60 to 119 seconds: 75, 65 (2 songs) - From 120 to 299 seconds: 120, 150 (2 songs) - 300 seconds or longer: 310 (1 song) In the second example, all songs are less than 60 seconds in duration.","solution":"def categorize_song_lengths(n, song_lengths): Function to categorize song lengths. Parameters: n (int): Number of songs in the library. song_lengths (List[int]): List of song lengths in seconds. Returns: Tuple[int, int, int, int]: A tuple containing counts of songs in four categories: 1. Less than 60 seconds 2. From 60 to 119 seconds inclusive 3. From 120 to 299 seconds inclusive 4. 300 seconds or longer count_less_60 = 0 count_60_119 = 0 count_120_299 = 0 count_300_or_more = 0 for length in song_lengths: if length < 60: count_less_60 += 1 elif 60 <= length <= 119: count_60_119 += 1 elif 120 <= length <= 299: count_120_299 += 1 else: count_300_or_more += 1 return (count_less_60, count_60_119, count_120_299, count_300_or_more)"},{"question":"A security company monitors several rooms in a building. Each room has a security camera that continuously records the number of people in the room at any given moment. At the end of the day, for each room, the company generates a report with a series of snapshots taken at various times during the day. They are faced with the task of finding out if there was any moment during the day when at least one room had more than a certain number of people. You are given a series of snapshots for each room and a specified number. Your task is to determine if there\'s a moment when any room had at least that specified number of people. Input: The first line contains an integer n (1 ≤ n ≤ 100) — the number of rooms. Next n lines describe the snapshots for each room. Each line contains an integer m (1 ≤ m ≤ 100), followed by m integers — the number of people in the room in each snapshot. The last line contains an integer k (1 ≤ k ≤ 1000) — the specified number of people. Output: Print \\"yes\\" (without the quotes), if there was a moment when at least one room had more than or equal to the specified number of people. Otherwise, print \\"no\\" (without the quotes). Examples Input 3 5 12 8 15 6 10 4 9 7 5 2 6 1 3 11 0 4 7 8 Output yes Input 2 3 4 3 2 5 1 1 5 2 1 6 Output no Note In the first example, the first room had 12, 8, 15, 6, and 10 people at various times, which includes more than 8 people at some point. Hence the output is \\"yes\\". In the second example, none of the rooms had 6 or more people at any time. Hence, the output is \\"no\\".","solution":"def check_people_count(rooms_snapshots, k): Returns \'yes\' if any room had at least k number of people at any moment, otherwise \'no\'. rooms_snapshots: list of list of int, each sublist represents the snapshots for one room k: int, the specified number of people to check against for room in rooms_snapshots: if any(people_count >= k for people_count in room): return \\"yes\\" return \\"no\\""},{"question":"Graph Shortest Path Delivery In a city, there are N buildings connected by M one-way roads. The roads potentially have different lengths, and they form a directed graph. One of these buildings, labeled as the \\"Start Building,\\" is where delivery starts. The goal is to deliver a package to the \\"Target Building\\" as quickly as possible. You are tasked with finding the shortest path from the Start Building to the Target Building and calculating the travel time. To prepare for this task, you need to write a program that determines the shortest travel time from the Start Building to the Target Building in the given city graph. # Input The input consists of multiple test cases. Each test case begins with a line containing three integers, N, M, and Q (1 ≤ N ≤ 500, 1 ≤ M ≤ 10000, and 1 ≤ Q ≤ 100). N denotes the number of buildings (labeled 1 to N), M denotes the number of roads, and Q denotes the number of queries. For the next M lines, each line contains three integers U, V, and W (1 ≤ U, V ≤ N, 1 ≤ W ≤ 100000), representing a one-way road from building U to building V with a travel time of W minutes. Each of the next Q lines contains two integers, S and T (1 ≤ S, T ≤ N), representing a pair of operations where you need to find the shortest travel time from building S to building T. A line with three zeros (0 0 0) ends the input. # Output For each query, output the shortest travel time from the Start Building to the Target Building. If there is no valid path between the Start Building and Target Building, output \\"NO PATH\\". # Sample Input ``` 4 4 3 1 2 4 1 3 2 2 3 5 3 4 1 1 4 2 3 3 2 0 0 0 ``` # Sample Output ``` 3 5 NO PATH ``` # Explanation In the given example: - The shortest path from building 1 to building 4 can be 1 -> 3 -> 4 with a total travel time of 3 minutes. - The shortest path from building 2 to building 3 is direct with a travel time of 5 minutes. - There is no valid path from building 3 to building 2, so the output is \\"NO PATH\\".","solution":"import heapq def dijkstra(graph, start, end, n): Dijkstra\'s algorithm to find the shortest path from start to end. INF = float(\'inf\') dist = [INF] * (n + 1) dist[start] = 0 priority_queue = [(0, start)] while priority_queue: current_dist, current_node = heapq.heappop(priority_queue) if current_dist > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return dist[end] if dist[end] != INF else \\"NO PATH\\" def find_shortest_paths(num_buildings, roads, queries): Returns shortest paths for each query. graph = [[] for _ in range(num_buildings + 1)] for u, v, w in roads: graph[u].append((v, w)) results = [] for s, t in queries: result = dijkstra(graph, s, t, num_buildings) results.append(result) return results def process_input_and_find_paths(input_data): output = [] lines = input_data.strip().split(\\"n\\") i = 0 while i < len(lines): n, m, q = map(int, lines[i].strip().split()) if n == 0 and m == 0 and q == 0: break i += 1 roads = [] for _ in range(m): u, v, w = map(int, lines[i].strip().split()) roads.append((u, v, w)) i += 1 queries = [] for _ in range(q): s, t = map(int, lines[i].strip().split()) queries.append((s, t)) i += 1 results = find_shortest_paths(n, roads, queries) output.extend(results) return output"},{"question":"Petya and Gena are playing a survival game on a grid. The grid is an n x m matrix, where each cell either contains an obstacle or is empty. Petya starts at the top-left cell of the grid and needs to reach the bottom-right cell. Petya can only move right or down. If Petya moves onto an obstacle cell, she loses the game. Petya and Gena keeps a record of their movements. They wonder how many unique paths Petya can take from the top-left to the bottom-right without hitting an obstacle. Consider that the grid allows movement through a cell only if it is free (represented by \'0\') and blocks movement through obstruction cells (represented by \'1\'). Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The next n lines contain m characters each, either \'0\' or \'1\', representing the grid. The top-left and bottom-right cells are always \'0\'. Output Print the number of unique paths Petya can take from the top-left cell to the bottom-right cell. If there are no such paths, print 0. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 2 2 0 1 0 0 Output 1 Input 3 3 0 1 0 1 0 0 0 0 0 Output 1 Input 3 3 0 1 1 1 1 0 0 0 0 Output 0","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left to the bottom-right corner of the grid, avoiding obstacles. n = len(grid) m = len(grid[0]) # Special case for a 1x1 grid with no obstacle. if n == 1 and m == 1: return 1 if grid[0][0] == \'0\' else 0 # Create a 2D dp array to store the number of ways to reach each cell. dp = [[0] * m for _ in range(n)] # Initialize the starting point. dp[0][0] = 1 if grid[0][0] == \'0\' else 0 # Fill the dp array. for i in range(n): for j in range(m): if grid[i][j] == \'1\': dp[i][j] = 0 # No path through an obstacle else: if i > 0: dp[i][j] += dp[i - 1][j] # Paths from the top if j > 0: dp[i][j] += dp[i][j - 1] # Paths from the left # The result is the value at the bottom-right corner of the grid. return dp[-1][-1] # Helper function to parse input and call the main function def count_paths(n, m, lines): grid = [list(line.strip()) for line in lines] return unique_paths_with_obstacles(grid)"},{"question":"Given an undirected graph G = (V, E) representing a network of computers and connections between them, find the largest Bipartite Subgraph. A Bipartite Graph is a graph whose vertices can be divided into two disjoint sets U and V such that no two vertices within the same set are adjacent. Constraints * 1 ≤ |V| ≤ 100 * 0 ≤ |E| ≤ 1,000 Input |V| |E| u0 v0 u1 v1 : u|E|-1 v|E|-1 , where |V| is the number of vertices and |E| is the number of edges in the graph. The graph vertices are named with the numbers 0, 1,..., |V|-1 respectively. Output Print the size (number of edges) of the largest Bipartite Subgraph. Examples Input 4 6 0 1 0 2 1 2 1 3 2 3 3 0 Output 5 Input 5 7 0 1 0 2 0 3 1 2 1 3 2 4 3 4 Output 6","solution":"from collections import defaultdict, deque def is_bipartite(graph, src, color): Helper function to check if the graph is bipartite starting from the source vertex. q = deque([src]) color[src] = 1 # Start coloring with 1 while q: node = q.popleft() for neighbor in graph[node]: if color[neighbor] == -1: # If this vertex is not colored color[neighbor] = 1 - color[node] q.append(neighbor) elif color[neighbor] == color[node]: # If the adjacent vertex has the same color, it\'s not bipartite return False return True def bipartite_subgraph(V, edges): Function to find the largest bipartite subgraph. graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = [-1] * V # Check each component of the graph for vertex in range(V): if color[vertex] == -1: if not is_bipartite(graph, vertex, color): return len(edges) - 1 # Return the number of edges - 1 if not bipartite return len(edges) # Example usage vertices = 4 edges_list = [ (0, 1), (0, 2), (1, 2), (1, 3), (2, 3), (3, 0) ] print(bipartite_subgraph(vertices, edges_list))"},{"question":"Thomas is organizing a series of online gaming tournaments. Each tournament has a specific number of participants playing in pairs, and the winners from those pairs progress to the next round. The tournaments continue until there is only one participant left, who is crowned the champion. Thomas needs your help to simulate the process and determine how many rounds each participant has to play before a champion is decided. Given the number of participants in the tournament, your task is to simulate the rounds and determine the total number of rounds required until the champion is decided. Input The first line of input contains an integer T (1 ≤ T ≤ 10^3), representing the number of tournaments. Each of the next T lines contains an integer P (2 ≤ P ≤ 10^6), representing the number of participants in a particular tournament. Assume P is always a power of 2. Output For each tournament, output a single line containing the number of rounds required to determine the champion. Example Input 3 4 8 16 Output 2 3 4 Explanation For the first tournament with 4 participants: - After the first round, there are 2 participants left. - After the second round, there is 1 participant left (the champion). For the second tournament with 8 participants: - After the first round, there are 4 participants left. - After the second round, there are 2 participants left. - After the third round, there is 1 participant left (the champion). For the third tournament with 16 participants: - After the first round, there are 8 participants left. - After the second round, there are 4 participants left. - After the third round, there are 2 participants left. - After the fourth round, there is 1 participant left (the champion).","solution":"def calculate_rounds(tournaments): results = [] for participants in tournaments: rounds = 0 while participants > 1: participants //= 2 rounds += 1 results.append(rounds) return results"},{"question":"You are given a grid of size n × m representing a field. Each cell in the grid can contain one of the following characters: - \'.\' indicating an empty cell, - \'#\' indicating a cell with an obstacle, - \'S\' indicating the starting point, - \'E\' indicating the endpoint. The task is to determine if there is a path from the starting point \'S\' to the endpoint \'E\' such that the path does not go through any obstacles. You can move in four possible directions from a cell: up, down, left, or right. # Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) representing the number of rows and columns in the grid. Each of the next n lines contains m characters describing the field. The grid will always have exactly one \'S\' and one \'E\'. # Output Print \\"YES\\" if there is a path from \'S\' to \'E\', otherwise print \\"NO\\". # Examples Input ``` 5 5 S...# ..# .#..# .#E.# # ``` Output ``` YES ``` Input ``` 5 5 S...# .#. .#..# .#..# #E# ``` Output ``` NO ``` # Explanation In the first example, a possible path from \'S\' to \'E\' could be (S, 1, 2), (1, 3), (2, 3), (3, 3), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (3, 7), (2, 7), (2, 8), (2, 9), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (5, 12), (5, 13), (5, 14), (6, 14). In the second example, there is no way to reach the \'E\' from \'S\' because the obstacles block all possible paths.","solution":"from collections import deque def is_path_exist(n, m, grid): def find_start_end(): start, end = None, None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) return start, end start, end = find_start_end() if not start or not end: return \\"NO\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = set() queue = deque([start]) visited.add(start) while queue: current = queue.popleft() if current == end: return \\"YES\\" for direction in directions: new_x, new_y = current[0] + direction[0], current[1] + direction[1] if 0 <= new_x < n and 0 <= new_y < m and grid[new_x][new_y] != \'#\' and (new_x, new_y) not in visited: queue.append((new_x, new_y)) visited.add((new_x, new_y)) return \\"NO\\""},{"question":"There is a factory that produces widgets in a sequence. Each widget has a unique serial number that is incremented by 1 from the previous one, starting at some integer k. For example, if k=3 and 5 widgets were produced, their serial numbers would be 3, 4, 5, 6, and 7. Due to a production error, some widgets\' serial numbers were skipped and were not registered in the database. You are given a list of registered widget serial numbers, and you need to determine the minimum number of widgets that could be missing due to the error. Input The first line contains a single integer n (1 ≤ n ≤ 1 000) — the number of registered widgets\' serial numbers. The second line contains n distinct integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^{9}) — the serial numbers of the registered widgets. The integers s_i are given in arbitrary order and are pairwise distinct. Output Print the minimum possible number of widgets that could be missing due to the production error. Examples Input 4 16 18 19 15 Output 1 Input 6 20 21 23 24 25 22 Output 0 Note In the first example, if k=15, then a widget with serial number 17 is missing, so the minimum number of missing widgets is 1. In the second example, if k=20, then no widgets are missing, so the minimum number of missing widgets is 0.","solution":"def min_missing_widgets(n, serial_numbers): Determines the minimum number of missing widgets. Args: n : int - number of registered widgets\' serial numbers. serial_numbers: list of int - the serial numbers of the registered widgets. Returns: int - the minimum number of missing widgets. max_serial = max(serial_numbers) min_serial = min(serial_numbers) total_serial_count = max_serial - min_serial + 1 missing_count = total_serial_count - n return missing_count"},{"question":"Carly loves playing with sequences, and she has recently discovered a new type of sequence which she calls an \\"Alternating Power Sequence\\" (APS). An APS is a sequence where each element is the power of its index (starting from 1) but alternates between raising the base to the positive and negative values of the index. Specifically, the ith element in the sequence is calculated as (i^(i if i is odd else -i)). Your task is to write a program that, given an integer n, generates the first n elements of the APS. # Input The input consists of a single integer n (1 ≤ n ≤ 50) which indicates the number of terms in the APS. # Output Output the first n elements of the APS, separated by spaces. # Sample Input 1 ``` 4 ``` # Sample Output 1 ``` 1 -4 27 -256 ``` # Sample Input 2 ``` 6 ``` # Sample Output 2 ``` 1 -4 27 -256 3125 -46656 ``` # Explanation For the first sample: - 1^1 = 1 - 2^-2 = 1/4 but since we want alternating powers the result is -4 - 3^3 = 27 - 4^-4 = 1/256 but 4 raised to the power of -4 is -256 For the second sample: - Extends the sequence as described above up to 6 elements. Write a complete program to solve the problem for the given input and provide the sequence for the specified length.","solution":"def generate_aps(n): Generates the first n elements of the Alternating Power Sequence (APS). Parameters: n (int): The number of elements to generate in the APS. Returns: List[int]: A list containing the first n elements of the APS. aps = [] for i in range(1, n + 1): if i % 2 == 1: aps.append(i ** i) else: aps.append(-(i ** i)) return aps # Example usage: # n = 4 # print(generate_aps(n)) # Output: [1, -4, 27, -256]"},{"question":"Given a binary tree, return the level order traversal of its nodes\' values. (i.e., from left to right, level by level). Input: You will be given the root of the binary tree. Each node of the binary tree contains an integer value. A Node is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Output: A list of lists where each sublist contains the values of nodes at each level. Example: ```python # Example 1 Input: root = [3, 9, 20, None, None, 15, 7] Output: [[3], [9, 20], [15, 7]] Explanation: 3 / 9 20 / 15 7 # Example 2 Input: root = [1] Output: [[1]] Explanation: 1 # Example 3 Input: root = [] Output: [] ``` Note: - The value of a node can be any integer. - The number of nodes in the tree is in the range [0, 2000]. - The tree might be empty, in which case the output should be an empty list.","solution":"from collections import deque from typing import Optional, List class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def levelOrder(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) current_level = [] for _ in range(level_size): node = queue.popleft() current_level.append(node.val) if node.left is not None: queue.append(node.left) if node.right is not None: queue.append(node.right) result.append(current_level) return result"},{"question":"Sort Words by Length Given a list of words, your task is to sort these words by their length in ascending order. If two words have the same length, they should appear in the order they were provided in the input. Input Input will be provided as a single string containing words separated by spaces. Output Output the words sorted by their length, each word on a new line. Constraints: The input string will not be longer than 1000 characters. Each word will contain only lowercase letters and will not be longer than 100 characters. The number of words will be between 1 and 100. Example: Input: apple banana cherry date Output: date apple banana cherry","solution":"def sort_words_by_length(words_str): Sort words by their length. If two words have the same length, they appear in the order they were provided in the input. Parameters: words_str (str): A string containing words separated by spaces. Returns: list: A list of words sorted by their length. words = words_str.split() sorted_words = sorted(words, key=len) return sorted_words def format_sorted_words(sorted_words): Formats the sorted words list into a string with each word on a new line. Parameters: sorted_words (list): A list of words sorted by their length. Returns: str: A formatted string with each word on a new line. return \\"n\\".join(sorted_words) # Example usage: # words = \\"apple banana cherry date\\" # sorted_words = sort_words_by_length(words) # result = format_sorted_words(sorted_words) # print(result)"},{"question":"You are given a list of n elements that can either be positive or negative integers and a target number k. Determine if there are three elements in the list whose sum is equal to the target number k. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 100, -1000 ≤ k ≤ 1000) — the number of elements in the list and the target number. The second line contains n integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000) — the elements of the list. Output Print \\"YES\\" if there are three elements in the list whose sum is k, otherwise print \\"NO\\". Examples Input 5 6 1 2 3 4 5 Output YES Input 4 10 1 2 3 8 Output NO Note In the first sample, the elements 1, 2, and 3 add up to 6, so the result is \\"YES\\". In the second sample, there are no three elements that sum up to 10, so the result is \\"NO\\".","solution":"def can_sum_to_k_with_three_elements(n, k, arr): Determine if there are three elements in the list whose sum is equal to the target number k. :param n: int - the number of elements in the list :param k: int - the target sum :param arr: list[int] - the list of integers :return: str - \\"YES\\" if there are three elements whose sum is k, otherwise \\"NO\\" arr.sort() for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == k: return \\"YES\\" elif current_sum < k: left += 1 else: right -= 1 return \\"NO\\""},{"question":"You are given an array of positive integers representing weights of different items. You need to pack these items into a minimum number of bins, each with a maximum capacity of `C`. You can not exceed the bin capacity but can distribute weights in any order to minimize the number of bins used. Create an efficient algorithm to determine the minimum number of bins required. Constraints * All input values are integers. * 1≤Number of items≤2*10^5 * 1≤Weight of each item≤C≤10^9 Input The input is given from Standard Input in the following format: C Number_of_items Weight_1 Weight_2 ... Weight_Number_of_items Output Print a single integer representing the minimum number of bins required. Examples Input 10 6 2 5 4 7 1 3 Output 3 Input 5 4 3 3 3 3 Output 4 Input 15 7 1 15 8 3 3 8 5 Output 3 Input 20 3 10 10 20 Output 2","solution":"def min_bins(capacity, weights): Calculate the minimum number of bins required to pack all items such that no bin exceeds the given capacity. :param capacity: Maximum capacity of each bin. :param weights: List of weights of items. :return: Minimum number of bins required. weights.sort(reverse=True) bins = [] for weight in weights: placed = False for b in bins: if sum(b) + weight <= capacity: b.append(weight) placed = True break if not placed: bins.append([weight]) return len(bins) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() capacity = int(data[0]) num_items = int(data[1]) weights = list(map(int, data[2:])) print(min_bins(capacity, weights))"},{"question":"In a game development project, you are tasked to implement a system to manage active players in a multiplayer game. Each player has a unique username and a certain number of lives. When a player loses all their lives, they must be removed from the active player list. Your task is to implement a function that processes a series of events related to players joining the game, losing lives, and being removed if they have no lives left. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of events. The next t lines describe the events, each in one of the following formats: - \\"JOIN <username> <lives>\\" — A player with username <username> joins the game with <lives> lives. It\'s guaranteed that a player with the same username is not already in the game. - \\"HIT <username>\\" — The player with username <username> loses one life. If a player loses their last life due to this event, they should be removed from the list. - \\"EXIT <username>\\" — The player with username <username> leaves the game voluntarily and must be removed from the list. All usernames consist of lowercase and uppercase English letters and digits. The usernames can\'t start with a digit. The length of a username is positive and doesn\'t exceed 10 characters. Lives are a positive integer up to 100. Output Print the list of active players in the order they were added to the game. For each active player, print their username and the number of lives they have remaining. If there are no active players, print \\"No active players\\". Examples Input 6 JOIN player1 3 JOIN player2 5 HIT player1 HIT player2 HIT player1 EXIT player2 Output player1 1 Input 5 JOIN alpha 4 JOIN beta 2 HIT beta HIT beta HIT alpha Output alpha 3 Input 3 JOIN admin 3 HIT admin EXIT admin Output No active players","solution":"def process_events(t, events): players = {} for event in events: parts = event.split() command = parts[0] username = parts[1] if command == \\"JOIN\\": lives = int(parts[2]) players[username] = lives elif command == \\"HIT\\": if username in players: players[username] -= 1 if players[username] == 0: del players[username] elif command == \\"EXIT\\": if username in players: del players[username] if not players: print(\\"No active players\\") else: for username in events: if username.startswith(\\"JOIN\\") or username.startswith(\\"EXIT\\"): username = username.split()[1] if username in players: print(f\\"{username} {players[username]}\\")"},{"question":"The coding company ByteCorp organizes a competition every year and provides prizes in the form of bus passes. Each bus pass has a monetary value, but not all bus passes are the same. ByteCorp management wants to optimize the distribution of these bus passes among their top employees by ensuring the total value of distributed bus passes is maximized without distributing two consecutive bus passes. You are given a list of integers representing the value of each bus pass. Write a program to compute the maximum possible total value of distributed bus passes under the constraint that no two consecutive bus passes can be distributed. Input: The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of bus passes. The second line contains n integers v_1, v_2, ..., v_n (0 ≤ v_i ≤ 10^9) — the values of each bus pass. Output: Output a single integer — the maximum possible total value of distributed bus passes without taking two consecutive passes. Examples Input: 5 3 2 7 10 12 Output: 22 Input: 4 8 15 3 7 Output: 22 Note: In the first example, you should skip bus pass with value 2 to maximize the total (3 + 7 + 12 = 22). In the second example, you should skip bus pass with value 3 to maximize the total (8 + 15 + 7 = 22).","solution":"def max_bus_pass_value(n, values): if n == 0: return 0 elif n == 1: return values[0] # Initialize the max value array dp = [0] * n # Base cases dp[0] = values[0] dp[1] = max(values[0], values[1]) # Fill the dp array for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + values[i]) return dp[-1]"},{"question":"The city\'s administration is planning to launch a new bike-sharing program. To manage the bike distribution, they have divided the city into zones. Each zone is assigned some bikes initially. Throughout the day, the city administration receives requests for bikes from these zones. A request can either add new bikes to the zone or remove bikes from the zone. Write a program that will help in tracking the number of bikes in each zone at any given time. Each request should be fulfilled if possible (i.e., bikes can only be removed if there are enough bikes in that zone). If a removal request cannot be fulfilled, the program should print «NO» (without quotes) for that particular request. Input The first line contains an integer `z` (1 ≤ z ≤ 10⁵) — the number of zones in the city. The second line contains `z` integers, where the i-th integer represents the initial number of bikes in the i-th zone. The third line contains an integer `m` (1 ≤ m ≤ 10⁵) — the number of requests. The following `m` lines describe the requests: Each request is of one of the two types: 1. `add i k` — add `k` (1 ≤ k ≤ 10⁴) bikes to the i-th zone (1 ≤ i ≤ z). 2. `remove i k` — remove `k` (1 ≤ k ≤ 10⁴) bikes from the i-th zone (1 ≤ i ≤ z). Output For each request of type `remove i k`, if it is not possible to remove the given number of bikes (i.e., there are fewer bikes in zone `i` than `k`), print «NO» (without quotes). Otherwise, print nothing for that request. Finally, after all requests have been processed, print the number of bikes in each zone. Example Input 3 5 10 15 5 add 1 5 remove 2 3 remove 3 20 add 2 7 remove 1 2 Output NO 13 14 15 Explanation Initially, the zones have the following bikes: `5 10 15`. - `add 1 5`: Add 5 bikes to zone 1 -> `10 10 15`. - `remove 2 3`: Remove 3 bikes from zone 2 -> `10 7 15`. - `remove 3 20`: Try to remove 20 bikes from zone 3, but only 15 available -> `NO`. - `add 2 7`: Add 7 bikes to zone 2 -> `10 14 15`. - `remove 1 2`: Remove 2 bikes from zone 1 -> `8 14 15`. Final bike count in zones: `8 14 15`.","solution":"def manage_bikes(z, initial_bikes, m, requests): Manage the bike inventory for each zone based on requests. :param z: Number of zones :type z: int :param initial_bikes: List with initial number of bikes in each zone :type initial_bikes: list :param m: Number of requests :type m: int :param requests: List of requests as tuples (action, zone, count) :type requests: list :return: The final number of bikes in each zone after processing requests :rtype: list bike_counts = initial_bikes for request in requests: action, i, k = request if action == \\"add\\": bike_counts[i - 1] += k elif action == \\"remove\\": if bike_counts[i - 1] >= k: bike_counts[i - 1] -= k else: print(\\"NO\\") return bike_counts"},{"question":"A group of archaeologists has discovered an ancient stone tablet with mysterious codes written on it. Each code is a string of lowercase alphabetic characters. After thorough analysis, they discovered that the civilization had a unique way of encoding their messages. The encoding rules were as follows: 1. Convert each character to its corresponding position in the alphabet (a = 1, b = 2, ..., z = 26). 2. Replace each number with its square. 3. Convert the squared numbers back to characters with specific rules: - If the squared number is between 1 and 26 (inclusive), replace it with the corresponding letter. - If the squared number is between 27 and 675 (inclusive), replace it with the sum of its digits converted to a character. For example, 49 (which is 7^2) becomes \'G\' (4 + 9 = 13, and 13th letter is \'m\'). Your task is to decode the given encoded message back to its original form. Input The input format is as follows: n The encoded messages Where the first line is a positive integer n, denoting the number of encoded messages. Each of the following n lines contains a single encoded message, which is a string of lowercase alphabetic characters with a length between 1 and 100 inclusive. Output Output the decoded messages, each on a separate line. Example Input 3 bcdef z abc Output aaa y aaa Explanation For the first input \\"bcdef\\": - \'b\' -> 2, 2^2 = 4 -> \'d\' - \'c\' -> 3, 3^2 = 9 -> \'i\' - \'d\' -> 4, 4^2 = 16 -> \'p\' - \'e\' -> 5, 5^2 = 25 -> \'y\' - \'f\' -> 6, 6^2 = 36 -> 3 + 6 = 9 -> \'i\' So, the output should be \\"dipyi\\". For the second input \\"z\\": - \'z\' -> 26, 26^2 = 676, (6 + 7 + 6 = 19) -> \'s\' So, the output should be \\"y\\". For the third input \\"abc\\": - \'a\' -> 1, 1^2 = 1 -> \'a\' - \'b\' -> 2, 2^2 = 4 -> \'d\' - \'c\' -> 3, 3^2 = 9 -> \'i\' So, the output should be \\"adi\\".","solution":"def decode_messages(encoded_messages): Decodes a list of encoded messages according to the unique civilization rules. Args: encoded_messages (list of str): List of encoded messages. Returns: list of str: Decoded messages. def char_to_pos(char): Converts a character to its position in the alphabet. return ord(char) - ord(\'a\') + 1 def pos_to_char(pos): Converts a position back to a character. return chr(pos + ord(\'a\') - 1) def decode_character(char): Decodes a single character according to the rules. pos = char_to_pos(char) squared = pos * pos if 1 <= squared <= 26: return pos_to_char(squared) else: digit_sum = sum(int(d) for d in str(squared)) return pos_to_char(digit_sum) decoded_messages = [] for message in encoded_messages: decoded_message = \'\'.join(decode_character(char) for char in message) decoded_messages.append(decoded_message) return decoded_messages def process_input(n, messages): return decode_messages(messages)"},{"question":"Jessica is planning a hiking trip along a scenic trail that is divided into n segments. Each segment has a difficulty rating indicating the effort required to hike that segment. In order to fully enjoy her trip and make it more interesting, Jessica decides to hike such that she covers exactly k contiguous segments where she encounters the highest possible total difficulty over any k contiguous segments on the trail. Write a program to help Jessica find the maximum total difficulty of k contiguous segments for her trail. # Input The first line of the input contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ n), representing the number of segments in the trail and the number of contiguous segments Jessica wants to cover, respectively. The second line contains n integers where the i-th integer d_i (1 ≤ d_i ≤ 10^4) represents the difficulty of the i-th segment of the trail. # Output Output a single integer, the maximum total difficulty of k contiguous segments. # Examples Input ``` 5 2 1 3 2 5 1 ``` Output ``` 7 ``` Input ``` 8 3 4 2 1 6 5 3 8 2 ``` Output ``` 16 ``` # Explanation **Example 1:** Out of all possible contiguous segments of length 2, the one with the highest total difficulty is the segment that includes difficulties \\"3\\" and \\"2\\" following which the maximum total difficulty is \\"7\\" (3+2). **Example 2:** Out of all possible contiguous segments of length 3, the one with the highest total difficulty includes \\"6\\", \\"5\\", and \\"3\\" resulting in a total difficulty of \\"14\\" (6+5+3).","solution":"def max_total_difficulty(n, k, difficulties): Find the maximum total difficulty of k contiguous segments. Parameters: n (int): Number of segments in the trail. k (int): Number of contiguous segments Jessica wants to cover. difficulties (list of int): Difficulty ratings of the segments. Returns: int: Maximum total difficulty of k contiguous segments. # Calculate the initial window sum of the first `k` elements current_sum = sum(difficulties[:k]) max_sum = current_sum # Slide the window across the array for i in range(k, n): # Subtract the element that is leaving the window and add the new element current_sum += difficulties[i] - difficulties[i - k] # Update max_sum if we get a higher sum if current_sum > max_sum: max_sum = current_sum return max_sum # Example usage: n, k = 5, 2 difficulties = [1, 3, 2, 5, 1] print(max_total_difficulty(n, k, difficulties)) # Output should be 7"},{"question":"Imagine you are organizing a circular concert event and need to place the speakers equally at the perimeter of a circular stage with a fixed radius. You know the radius of the circle and the number of speakers you need to place. Your task is to calculate and print the coordinates of each speaker. Input The input contains two integers n and r (3 ≤ n ≤ 100, 1 ≤ r ≤ 1000) — the number of speakers and the radius of the stage. Output Print n lines, containing the coordinates of the speakers \\"xi yi\\" in the counter-clockwise order starting from the point (r, 0). The coordinates should be accurate to three decimal places. Examples Input 6 10 Output 10.000 0.000 5.000 8.660 -5.000 8.660 -10.000 0.000 -5.000 -8.660 5.000 -8.660 Input 4 5 Output 5.000 0.000 0.000 5.000 -5.000 0.000 0.000 -5.000","solution":"import math def calculate_speaker_positions(n, r): Returns a list of tuples representing the coordinates of each speaker. Arguments: n -- Number of speakers r -- Radius of the circle Each coordinate is accurate to three decimal places. positions = [] for i in range(n): angle = i * 2 * math.pi / n # Calculate the angle for each speaker x = r * math.cos(angle) y = r * math.sin(angle) positions.append((round(x, 3), round(y, 3))) return positions"},{"question":"Tom is a treasure hunter on a quest to find hidden ancient artifacts. He has come across a mystical forest where ancient tribes used to hide their treasures. The forest can be visualized as a 1D path with distinct positions, each containing a different integer. The ancient clans believed in patterns, and Tom has discovered that treasures are often hidden around positions where the numbers form arithmetic sequences of a given length. Tom needs your help to count how many such positions exist on the path where an arithmetic sequence of a specified length can be found. An arithmetic sequence is a sequence of numbers with a common difference between consecutive terms. Input Format: - The first line contains an integer N denoting the number of positions in the forest. - The second line contains N space-separated integers representing the integers at each position in the forest. - The third line contains an integer L denoting the desired length of the arithmetic sequence. Output Format: - Output a single integer, the count of starting positions where an arithmetic sequence of length L can be found. Constraints: - 2 ≤ N ≤ 1000 - 2 ≤ L ≤ N - -1000 ≤ integer at each position ≤ 1000 SAMPLE INPUT 8 1 5 9 13 17 21 2 4 3 SAMPLE OUTPUT 4","solution":"def count_arithmetic_sequences(N, positions, L): Count the number of starting positions in \'positions\' where an arithmetic sequence of length \'L\' can be found. :param N: int, number of positions in the forest. :param positions: list of ints, integers at each position in the forest. :param L: int, desired length of the arithmetic sequence. :return: int, count of starting positions with the desired arithmetic sequence. count = 0 for i in range(N - L + 1): is_arithmetic = True common_difference = positions[i + 1] - positions[i] for j in range(1, L - 1): if positions[i + j + 1] - positions[i + j] != common_difference: is_arithmetic = False break if is_arithmetic: count += 1 return count"},{"question":"You are given a string s, consisting only of characters \'a\' and \'b\'. You can perform the following operation any number of times: * Choose a pair of neighboring characters \'ab\' or \'ba\'. * Remove them from the string. After each such operation, the length of the string decreases by two. What is the minimum possible length of the string s you can get after performing the operation described above any number of times? Input The first line contains the single integer n (1 ≤ n ≤ 1000) — the initial length of the string s. The second line contains the string s of length n. Output Print the only integer — the minimum possible length you can get after performing the operation described above any number of times. Examples Input 8 abbaabab Output 0 Input 4 aaaa Output 4 Input 5 ababa Output 1 Input 6 ababab Output 0 Note In the first test, this is one of the optimal sequences of operations: abbaabab → aab → (removed step by step) → empty. In the second test, no \'ab\' or \'ba\' pairs can be selected. In the third test, this is one of the optimal sequences of operations: ababa → aaa → aa → a. In the fourth test, this is one of the optimal sequences of operations: ababab → (removed in pairs step by step) → empty.","solution":"def min_length_after_operations(n, s): Returns the minimum possible length of the string s you can get after removing \'ab\' or \'ba\' pairs. stack = [] for char in s: if stack and ((stack[-1] == \'a\' and char == \'b\') or (stack[-1] == \'b\' and char == \'a\')): stack.pop() else: stack.append(char) return len(stack)"},{"question":"In a bi-weekly contest, participants need to complete a series of tasks. Each task completion provides some points, which are given in a list. However, points are awarded in a specific patterned manner: a participant\'s score jumps up whenever the current score is equal to the score at exactly one position before (immediate previous score). For example, given a sequence of points {4, 2, 6, 6, 8}, the score increases normally till the third position. At the fourth position, the score jumps up to 8 from 6 as it is equal to the immediate previous score - 6. The score continues from this pattern onward. Participants can lose points for unanswered tasks. Once the total score becomes zero, they can choose to continue with a negative score. Write a function that calculates the final score after processing all tasks based on the rules provided. If a score right after a zero is the same as the score before zero, it jumps too. Input: - An integer n (1 ≤ n ≤ 100000) – the number of tasks in the contest. - A list of n integers p_1, p_2, …, p_n (-10^9 ≤ p_i ≤ 10^9). Output: - An integer representing the final score after processing all tasks. Examples: Input: 5 4 2 6 6 8 Output: 8 Input: 6 1 2 2 0 0 1 Output: 3 Input: 3 -5 -5 -5 Output: -5 Input: 4 10 10 -1 -2 Output: -2 Note: - In the first example, the score is {4, 6, 12, 18, 26} respectively after each task. - In the second example, the final score is 3 after following the pattern of jumps. - In the third example, since negative scores are allowed and it does not jump after being sub-zero, the score remains at -5 throughout. - In the fourth example, the score jumps once when it hits equality.","solution":"def calculate_final_score(n, points): Calculate the final score after processing all tasks based on the given rules. Parameters: n (int): Number of tasks. points (list): A list of integers representing the points for each task. Returns: int: The final score. if n == 0: return 0 final_score = points[0] for i in range(1, n): if points[i] == points[i - 1]: final_score += points[i] else: final_score += points[i] return final_score"},{"question":"Write a program that calculates the area of an irregular polygon given its vertices. Input The input consists of multiple datasets. Each dataset is given in the following format: The first line contains a single integer `n` (3 <= n <= 100), the number of vertices of the polygon. The following `n` lines each contain two integers `x` and `y` (-1000 <= x, y <= 1000) representing the coordinates of a vertex of the polygon. The vertices are given in clockwise or counter-clockwise order. The input is terminated by a line containing a single `0`. Output For each dataset, output a single line containing the area of the polygon (real number) accurate to 6 decimal places. Example Input 4 0 0 4 0 4 3 0 3 3 0 0 4 0 2 3 0 Output 12.000000 6.000000","solution":"def calculate_polygon_area(vertices): Calculate the area of a polygon given its vertices using the Shoelace formula. n = len(vertices) area = 0.0 for i in range(n): x1, y1 = vertices[i] x2, y2 = vertices[(i + 1) % n] area += x1 * y2 - y1 * x2 return abs(area) / 2.0 def process_input(input_string): Process multi-dataset input string and return a list of results for each polygon dataset. lines = input_string.strip().splitlines() results = [] index = 0 while index < len(lines): n = int(lines[index]) if n == 0: break vertices = [] for i in range(1, n + 1): x, y = map(int, lines[index + i].split()) vertices.append((x, y)) area = calculate_polygon_area(vertices) results.append(f\\"{area:.6f}\\") index += n + 1 return results"},{"question":"You are given a set of n items, each with a weight and a value, and you want to determine the maximum value of items that you can fit into a knapsack of capacity W. The problem can be described mathematically as follows: Given weights and values of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. In other words, given two integer arrays `weights` and `values` which represent the weights and values of `n` items respectively, and an integer W, return the maximum value of items which can fit into the knapsack. You cannot break an item, either you take the whole item or don’t take it at all (0-1 property). Input: The first line of input contains two integers n (1 ≤ n ≤ 1000), and W (1 ≤ W ≤ 1000), where n is the number of items, and W is the capacity of the knapsack. The next line contains n space-separated integers representing the array `weights` where `weights[i]` is the weight of the i-th item. The next line contains n space-separated integers representing the array `values` where `values[i]` is the value of the i-th item. Output: Output a single integer, which is the maximum value of items that can fit into the knapsack. Example: Input: 4 7 1 3 4 5 1 4 5 7 Output: 9 Explanation: We can take the items with weight 3 and 4 yielding a total value of 4 + 5 = 9. Another possibility is the items with weight 1 and 5 yielding a total value of 1 + 7 = 8 but it\'s less optimal than the previous option. Note: In the first sample, the optimal solution makes use of items with weights 3 and 4 to maximize the total value to 9. Total weight is 3 + 4 = 7 which is within the knapsack\'s capacity.","solution":"def knapsack(n, W, weights, values): Determine the maximum value of items that can fit into a knapsack of given capacity. :param n: Number of items :param W: Capacity of the knapsack :param weights: List of weights of the items :param values: List of values of the items :return: Maximum value that fits into the knapsack # Create a 2D DP array where dp[i][w] will hold the maximum value of the knapsack dp = [[0] * (W + 1) for _ in range(n + 1)] # Build the table dp[][] in bottom-up manner for i in range(1, n + 1): for w in range(1, W + 1): if weights[i - 1] <= w: # If including the item won\'t exceed the capacity dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]) else: dp[i][w] = dp[i - 1][w] # Else, don\'t include the item # The maximum value is found in dp[n][W] return dp[n][W]"},{"question":"David loves working with sequences. He often tries to find the maximum contiguously increasing subsequence within a sequence of integers. Your task is to help David by writing a program that finds the length of the longest contiguously increasing subsequence in a given sequence of integers. Constraints * 1 ≦ N ≦ 10^5 * -10^9 ≦ Ai ≦ 10^9 Input The input is given from Standard Input in the following format: N A1 A2 A3 ... AN Where N is the number of elements in the sequence and A1, A2, ..., AN are the integers in the sequence. Output Print the length of the longest contiguously increasing subsequence. Examples Input 6 1 2 2 3 5 7 Output 4 Input 5 3 1 2 3 2 Output 3","solution":"def longest_contiguous_increasing_subsequence(sequence): Returns the length of the longest contiguously increasing subsequence in the given sequence. if not sequence: return 0 max_len = 1 current_len = 1 for i in range(1, len(sequence)): if sequence[i] > sequence[i - 1]: current_len += 1 else: current_len = 1 max_len = max(max_len, current_len) return max_len"},{"question":"You are given a sequence of integers, and your task is to determine if there exists a contiguous subarray such that its sum is equal to a given number `k`. Input - The first line contains an integer n, the length of the sequence (1 ≤ n ≤ 1000). - The second line contains n integers separated by spaces, representing the sequence (each integer is between -10^6 and 10^6). - The third line contains an integer k (-10^9 ≤ k ≤ 10^9), the target sum. Output - Print \\"YES\\" if there exists such a subarray, otherwise print \\"NO\\". Examples Input 5 1 2 3 7 5 12 Output YES Input 4 1 2 3 4 10 Output YES Input 3 1 2 3 7 Output NO Explanation: In the first example, the subarray [2, 3, 7] sums up to 12. In the second example, the whole array [1, 2, 3, 4] sums up to 10. In the third example, no subarray sums up to 7.","solution":"def has_subarray_with_sum(arr, k): Determines if there exists a contiguous subarray with a sum equal to k. n = len(arr) current_sum = 0 sum_dict = {} for i in range(n): current_sum += arr[i] if current_sum == k: return \\"YES\\" if (current_sum - k) in sum_dict: return \\"YES\\" sum_dict[current_sum] = i return \\"NO\\""},{"question":"A digital clock displays time in a 24-hour format (from 00:00 to 23:59). Given the current time displayed by the clock as a string in the format \\"HH:MM\\", you are to determine the next time the clock will display using only the digits present in the current time. For example, if the current time is \\"12:34\\", the digits available are 1, 2, 3, and 4. The next possible time using these digits should be calculated. Your task is to write a function that finds the immediate next valid time that can be formed using the digits from the current time. # Input - A single string `time` representing the current time in the format \\"HH:MM\\". # Output - A single string representing the next valid time. # Constraints - The given time will be a valid time in 24-hour format. # Example ``` Input: 19:34 Output: 19:39 Input: 23:59 Output: 22:22 ```","solution":"from itertools import product def next_closest_time(time): hours, minutes = time.split(\\":\\") current_minutes = int(hours) * 60 + int(minutes) digits = sorted(set(hours + minutes)) # Get unique digits and sort them all_possible_times = [] for h1, h2, m1, m2 in product(digits, repeat=4): hours_part = int(h1 + h2) minutes_part = int(m1 + m2) if hours_part < 24 and minutes_part < 60: all_possible_times.append((hours_part * 60 + minutes_part, f\\"{h1}{h2}:{m1}{m2}\\")) # Sort the times by total minutes and filter out the valid times only greater than the current one all_possible_times.sort() for minutes, time_str in all_possible_times: if minutes > current_minutes: return time_str # If no time was found that\'s greater than the current one, return the earliest valid time return all_possible_times[0][1]"},{"question":"Alice is participating in a coding competition. The competition lasts for d days, and on each day, she must solve at least minTasksi and at most maxTasksi tasks. The total number of tasks she needs to solve over all d days is given by totalTasks. Alice wants to find out if it\'s possible to create a schedule that satisfies both her daily task constraints and the total number of tasks she needs to solve. Input The first input line contains two integer numbers d, totalTasks (1 ≤ d ≤ 30, 0 ≤ totalTasks ≤ 240) — the number of days and the total number of tasks Alice needs to solve. Each of the following d lines contains two integer numbers minTasksi, maxTasksi (0 ≤ minTasksi ≤ maxTasksi ≤ 15), separated by a space — min and max number of tasks Alice can solve each day. Output Print \\"POSSIBLE\\" on the first line if a valid schedule can be created, otherwise print \\"IMPOSSIBLE\\". If it\'s possible, print d numbers (separated by a space) on the second line, each number representing the tasks solved by Alice on each corresponding day. If there are multiple valid schedules, print any of them. Examples Input 3 10 2 5 1 4 1 3 Output POSSIBLE 3 4 3 Input 2 20 5 8 5 7 Output IMPOSSIBLE Input 4 19 3 6 2 5 1 4 2 6 Output POSSIBLE 4 4 4 7","solution":"def find_schedule(d, totalTasks, min_max_tasks): Function to determine if it\'s possible to create a valid schedule for Alice. min_tasks_sum = sum(min_tasks for min_tasks, _ in min_max_tasks) max_tasks_sum = sum(max_tasks for _, max_tasks in min_max_tasks) if totalTasks < min_tasks_sum or totalTasks > max_tasks_sum: return \\"IMPOSSIBLE\\" schedule = [min_tasks for min_tasks, _ in min_max_tasks] surplus = totalTasks - min_tasks_sum for i in range(d): max_increase = min(surplus, min_max_tasks[i][1] - min_max_tasks[i][0]) schedule[i] += max_increase surplus -= max_increase return \\"POSSIBLE\\", schedule # This block is only for testing/showcasing the function if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() d = int(data[0]) totalTasks = int(data[1]) min_max_tasks = [(int(data[i*2 + 2]), int(data[i*2 + 3])) for i in range(d)] result = find_schedule(d, totalTasks, min_max_tasks) if result == \\"IMPOSSIBLE\\": print(\\"IMPOSSIBLE\\") else: print(result[0]) print(\\" \\".join(map(str, result[1])))"},{"question":"In a certain game, Takashi is required to collect distinct items from a list. The goal is to have exactly N distinct items in his collection. However, there are duplicates in the list, and Takashi can only pick one of each type. He has a list of M integers, where each integer represents an item. Takashi needs to know the minimum number of items he has to collect from the list to have exactly N distinct items. If it is impossible to get N distinct items, print -1. Constraints * 1 ≤ N ≤ 100 * 1 ≤ M ≤ 100 * 1 ≤ List[i] ≤ 100 Input Input is given from Standard Input in the following format: N M List[1] List[2] ... List[M] Output Print the minimum number of items Takashi needs to collect to have exactly N distinct items, or -1 if it is not possible. Examples Input 3 5 1 2 3 3 4 Output 3 Input 4 5 1 1 2 2 3 Output -1 Input 2 3 5 5 6 Output 2","solution":"def min_items_to_collect(N, M, items): Returns the minimum number of items Takashi needs to collect to have exactly N distinct items. If it is not possible, returns -1. distinct_items = set(items) # Get all distinct items if len(distinct_items) < N: return -1 return N"},{"question":"Your friend is reformatting his photo library, which is organized in directories and subdirectories. The files within the directories are named with integers and we want to sort and retrieve them in a specific order to create a new organized listing. Your task is to write a function that will read a directory structure and return all the file names in a single, sorted list. Each directory can contain files and other directories, and you should use a depth-first approach to retrieve and sort the file names. Files are represented by integers. The input format for directories is a nested list where directories are represented by sub-lists and files are represented by integers. For example, `[1, [4, [6]], 3]` represents a directory containing `1` and `3`, and another subdirectory with files `4` and `6`. Input The first line contains one integer `t` (1 ≤ t ≤ 50) — the number of queries. Each query consists of a single line containing the representation of the directory. Each directory representation is a valid nested list in string format. The total number of integers in any directory structure does not exceed `10^4`. Output For each query print a sorted list of integers representing all files found in the directory structure. Example Input 3 [1, [4, [6]], 3] [9, [3, [2, [5, [8, [7, 4]]]]], 6] [[[1, 2], 3], 4] Output [1, 3, 4, 6] [2, 3, 4, 5, 6, 7, 8, 9] [1, 2, 3, 4] Note In the first query, the directory contains files `1` and `3` and a subdirectory with the files `4` and `6`, making the sorted file list `[1, 3, 4, 6]`.","solution":"def get_sorted_files(directory): This function takes a nested directory structure as input and returns a sorted list of all files. :param directory: nested list representing the directory structure :return: sorted list of file names (integers) def retrieve_files(dir_structure, file_list): for item in dir_structure: if isinstance(item, list): retrieve_files(item, file_list) else: file_list.append(item) return file_list files = retrieve_files(directory, []) return sorted(files) def process_queries(t, queries): This function processes multiple queries to extract and sort files from nested directories. :param t: int, number of queries :param queries: list of nested list structures as strings representing directories :return: list of sorted file lists for each query results = [] for query in queries: directory_structure = eval(query) sorted_files = get_sorted_files(directory_structure) results.append(sorted_files) return results"},{"question":"Write a function called smallest_absolute_difference that receives an integer array and returns the smallest absolute difference between any two elements in the array. Input: - The first line of the input contains a single integer n, the size of the array (2 ≤ n ≤ 100000). - The second line contains n space-separated integers, representing the elements of the array (-1000000 ≤ element ≤ 1000000). Output: - A single integer, the smallest absolute difference between any two elements in the array. Example: Input: 5 1 5 3 19 18 Output: 1 Explanation: The smallest absolute difference is between 18 and 19, which is 1.","solution":"def smallest_absolute_difference(arr): Returns the smallest absolute difference between any two elements in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements.\\") arr.sort() min_diff = float(\'inf\') for i in range(1, len(arr)): min_diff = min(min_diff, abs(arr[i] - arr[i-1])) return min_diff"},{"question":"You are given a sequence of integers s_0, s_1, …, s_{k-1} and an integer p. Your task is to find the length of the longest contiguous subsequence of s for which the product of its elements is exactly equal to p. Input First line contains two integers k and p (1 ≤ k ≤ 100 000, 1 ≤ p ≤ 10^9). Next line contains exactly k integers s_i that form the sequence s (1 ≤ s_i ≤ 1000). Output Print one integer — the length of the longest contiguous subsequence with product exactly equal to p. If no such subsequence exists, print 0. Examples Input 5 6 1 2 2 3 3 Output 2 Input 4 1 1 1 1 1 Output 4 Input 3 24 2 3 4 Output 3 Note In the first example, the subsequence {2, 3} forms a product of 6, and its length is 2. In the second example, any subsequence of {1, 1, 1, 1} can form product 1, and the longest one has length 4. In the third example, the entire sequence {2, 3, 4} forms a product of 24, and its length is 3.","solution":"def longest_subsequence_with_product_k(k, p, s): This function finds the length of the longest contiguous subsequence with a product exactly equal to p. :param k: Length of sequence :param p: Target product :param s: The sequence of integers :return: Length of the longest contiguous subsequence with product equal to p max_len = 0 left = 0 current_product = 1 for right in range(k): current_product *= s[right] while current_product > p and left <= right: current_product //= s[left] left += 1 if current_product == p: max_len = max(max_len, right - left + 1) return max_len"},{"question":"Task Description The ancient treasure hunters of Atlantis have developed a cipher technique to encode their messages. Each character in the message is substituted with a corresponding number to form the encoded message. The encoded message consists of three numbers, M-N-O, which need to be decoded to reveal the original message. The encoding scheme is as follows: - \'M\' can be encoded as either 3 or 7 - \'N\' can be encoded as either 2 or 8 - \'O\' can be encoded as either 4 or 9 Help the treasure hunters decode their encoded messages to find the original characters. Input The first line consists of the number of test cases, T, followed by T lines, each containing three space-separated integers M, N, and O. Output For each test case, print the decoded message in the format C-C-C. Constraints: - 1 ≤ T ≤ 50,000 - 1 ≤ M, N, O ≤ 1,000,000,000 Sample Input ``` 2 3 2 4 7 8 9 ``` Sample Output ``` M-N-O M-N-O ``` Explanation For test case 1, the encoded message \'3 2 4\' translates to \'M-N-O\'. For test case 2, the encoded message \'7 8 9\' also translates to \'M-N-O\' based on the given encoding scheme.","solution":"def decode_message(m, n, o): Decodes a single message based on the encoding scheme. encoding_map = { 3: \'M\', 7: \'M\', 2: \'N\', 8: \'N\', 4: \'O\', 9: \'O\' } return f\\"{encoding_map[m]}-{encoding_map[n]}-{encoding_map[o]}\\" def main(input_data): Processes the input data and returns the decoded messages. lines = input_data.strip().split(\'n\') T = int(lines[0]) results = [] for i in range(1, T + 1): m, n, o = map(int, lines[i].split()) results.append(decode_message(m, n, o)) return results # You can run this code by passing input data to main function like this: # input_data = \'2n3 2 4n7 8 9\' # result = main(input_data) # print(\'n\'.join(result))"},{"question":"You\'re organizing a competition where participants earn points for their achievements. Each achievement unlocks new badges, and the goal is to maximize the total points over a series of achievements. Points for each achievement are given by different badges and are represented in an array. Participants must follow specific rules for earning badges, where earning a badge from a certain achievement requires having previously earned badges from all previous achievements. Given an array of integers representing the points for each achievement, find the maximum possible points a participant can earn if they are allowed to skip one achievement from the series. Input Format: The first line of input contains an integer N, the number of achievements. The second line contains N space-separated integers representing the points for each achievement. Output Format: Print the maximum points a participant can earn by achieving all but one of the achievements. Constraints: 1 ≤ N ≤ 100 1 ≤ points[i] ≤ 10^6 SAMPLE INPUT 5 1 2 5 8 10 SAMPLE OUTPUT 25 Explanation One way to achieve this is by skipping the achievement with 1 point and completing the achievements with 2, 5, 8, and 10 points, which gives the total maximum points of 25. Though there could be multiple optimal solutions, the maximum possible points remain the same.","solution":"def max_points_with_one_skip(points): Returns the maximum possible points by achieving all but one of the achievements. :param points: List of integers representing the points for each achievement. :return: Maximum points after skipping one achievement. if len(points) <= 1: return 0 total_points = sum(points) min_points = min(points) return total_points - min_points"},{"question":"Sakura is developing a unique encryption algorithm for her secret messages. She defines a transformation function f that shifts characters in a string by a fixed integer k. The shift should wrap around within the alphabet if it goes past \'z\'. Additionally, she only wants to apply this transformation to the alphabetic characters, ignoring spaces and other non-alphabetic symbols. Given a string and an integer k, write a program that applies this transformation and returns the encrypted string. Input - The first line of input contains a single string s (1 ≤ length of s ≤ 100 000), which can include spaces and other non-alphabetic characters. - The second line contains a single integer k (0 ≤ k ≤ 25), which represents the fixed shift for the transformation. Output - Print the resulting encrypted string after applying the transformation. Examples Input Hello, World! 3 Output Khoor, Zruog! Input abc xyz 1 Output bcd yza Note In the first example, each alphabetic character in \\"Hello, World!\\" is shifted by 3 positions. Thus \'H\' becomes \'K\', \'e\' becomes \'h\', etc. Non-alphabetic characters like \',\' and \'!\' remain unchanged. In the second example, each alphabetic character in \\"abc xyz\\" is shifted by 1 position. Hence, \'a\' becomes \'b\', \'b\' becomes \'c\', and so on. The space between \\"abc\\" and \\"xyz\\" remains unchanged.","solution":"def encrypt_message(s, k): Encrypts the string s by shifting its alphabetic characters by k positions. :param s: The input string to be encrypted. :param k: The shift value. :return: The encrypted string. result = [] for char in s: if \'a\' <= char <= \'z\': # Shift and wrap within lowercase letters result.append(chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\'))) elif \'A\' <= char <= \'Z\': # Shift and wrap within uppercase letters result.append(chr((ord(char) - ord(\'A\') + k) % 26 + ord(\'A\'))) else: # Non-alphabetic characters remain unchanged result.append(char) return \'\'.join(result)"},{"question":"You are given a list of words. Your task is to implement a program that finds the first word in the list, which has all unique characters. If no such word exists, return \\"NONE\\". For example, given the list `[\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"]`, the first word with all unique characters is \\"date\\". Input The input consists of a single line containing a list of space-separated words. Each word in the list contains only lowercase alphabetic characters. Output Output the first word from the input list that contains all unique characters. If no such word exists, output \\"NONE\\". Examples Input apple banana cherry date Output date","solution":"def first_unique_characters_word(word_list): Returns the first word in the word_list with all unique characters, or \\"NONE\\" if no such word exists. for word in word_list: if len(word) == len(set(word)): # Checking for unique characters return word return \\"NONE\\""},{"question":"The city of Codetown is represented as an undirected graph with `n` intersections and `m` bidirectional streets. Each intersection has a unique identifier from `1` to `n`. The streets are each characterized by two intersections they connect and a \\"busy-ness\\" index `b_i`. The Codetown Department of Transportation wants to close one street in order to make traffic less busy. To achieve this, they intend to remove the street with the highest \\"busy-ness\\" index. However, they must ensure that after removing this street, there is still a path between any two intersections in the city. This ensures that the city remains connected. You are provided with the details of all the streets in Codetown. Determine the highest \\"busy-ness\\" index that can be removed such that the city remains connected. If there are multiple streets with the same \\"busy-ness\\" index, remove the one that appears first in the input list. If it\'s impossible to remove any street while keeping the city connected, return `-1`. Input The first line contains two integers `n` and `m` (2 ≤ n ≤ 10^5, n-1 ≤ m ≤ 2*10^5) — the number of intersections and streets respectively. The following `m` lines each contain three integers `u`, `v`, and `b_i` (1 ≤ u, v ≤ n, 1 ≤ b_i ≤ 10^6) — denoting a street between intersections `u` and `v` with busy-ness index `b_i`. Output Print the highest \\"busy-ness\\" index of a street that can be removed while maintaining the connectivity of the city, or `-1` if no such street exists. Examples Input 4 4 1 2 5 2 3 3 3 4 2 1 4 1 Output 5 Input 4 5 1 2 3 1 3 4 1 4 2 2 4 1 3 4 5 Output 5 Input 3 3 1 2 1 2 3 1 1 3 1 Output 1","solution":"def find_max_busy_index(n, m, streets): Determines the highest \\"busy-ness\\" index that can be removed while maintaining the connectivity of the city. from collections import defaultdict from itertools import chain import heapq def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 streets.sort(key=lambda x: x[2], reverse=True) for index, street in enumerate(streets): parent = list(range(n)) rank = [0] * n temp_streets = streets[:index] + streets[index+1:] for u, v, _ in temp_streets: union(parent, rank, u-1, v-1) connected = True root = find(parent, 0) for i in range(1, n): if find(parent, i) != root: connected = False break if connected: return street[2] return -1 # Example usage: n = 4 m = 4 streets = [ (1, 2, 5), (2, 3, 3), (3, 4, 2), (1, 4, 1) ] print(find_max_busy_index(n, m, streets)) # Output: 5"},{"question":"DZY loves working with matrices, especially when it involves some level of complexity. He recently came across a problem involving matrix rotation and now needs your help to solve it. Given a 2D square matrix of integers with side length n, rotate the matrix 90 degrees clockwise. Your task is to perform the rotation and return the new matrix. The rotation can be visualized as follows: ``` Before Rotation: 1 2 3 4 5 6 7 8 9 After Rotation: 7 4 1 8 5 2 9 6 3 ``` Input - The first line contains an integer n (1 ≤ n ≤ 1000) representing the side length of the matrix. - The next n lines each contain n space-separated integers, representing the matrix elements. Output - Print the rotated matrix, each line containing n space-separated integers. Example Input ``` 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 7 4 1 8 5 2 9 6 3 ``` Another Example Input ``` 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` Output ``` 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 ``` Note: To achieve the rotation efficiently, avoid using extra space and manipulate the matrix in place if possible.","solution":"def rotate_matrix(matrix): Rotates the given n x n 2D matrix by 90 degrees clockwise. :param matrix: A list of list of integers representing the matrix. :return: The rotated matrix. n = len(matrix) for i in range(n // 2): for j in range(i, n - i - 1): # Save the top element top = matrix[i][j] # Move left to top matrix[i][j] = matrix[n - 1 - j][i] # Move bottom to left matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j] # Move right to bottom matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i] # Assign top to right matrix[j][n - 1 - i] = top return matrix"},{"question":"Given a rectangular grid of characters and a target word, write a program that checks if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Input * The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 200), the number of rows and columns of the grid, respectively. * The next `n` lines contain `m` characters each, representing the grid. * The last line contains a single string `word`, the target word to search for in the grid. The length of `word` will not exceed 200. Output * Output \\"YES\\" if the word exists in the grid, otherwise output \\"NO\\". Example Input 3 4 A B C E S F C S A D E E ABCCED Output YES Explanation: The word \\"ABCCED\\" can be formed from the grid by starting from grid[0][0] and moving to grid[0][1], grid[0][2], grid[1][2], grid[2][2], and finally grid[2][1].","solution":"def exist(board, word): if not board: return False rows = len(board) cols = len(board[0]) def dfs(r, c, index): if index == len(word): return True if r < 0 or c < 0 or r >= rows or c >= cols or board[r][c] != word[index]: return False temp = board[r][c] board[r][c] = \'#\' found = (dfs(r + 1, c, index + 1) or dfs(r - 1, c, index + 1) or dfs(r, c + 1, index + 1) or dfs(r, c - 1, index + 1)) board[r][c] = temp return found for i in range(rows): for j in range(cols): if dfs(i, j, 0): return True return False"},{"question":"Alice is playing a game where she has a sequence of N integers. She can perform the following operation any number of times: choose any two adjacent integers in the sequence and replace both of them with their sum. The goal of the game is to reduce the sequence to a single integer. Alice wants to know the minimum number of operations required to achieve this goal. Input The first line of the input contains an integer T, the number of test cases. Each test case consists of a single integer N on a separate line, the length of the sequence. Output For each test case, output the minimum number of operations required. Constraints 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 Example Input 2 1 3 Output 0 2 Explanation For testcase #2 with N=3, the sequence could be reduced in 2 steps: Initially, you have the sequence [a, b, c]. You can perform the operations as follows: 1. Replace a and b with (a+b), resulting in [a+b, c] 2. Replace (a+b) and c with (a+b+c) Thus, you need 2 operations to reduce the sequence to a single integer.","solution":"def min_operations_to_reduce(N): Returns the minimum number of operations required to reduce a sequence of N integers to a single integer. Args: N (int): the length of the sequence Returns: int: the minimum number of operations if N <= 1: return 0 else: return N - 1"},{"question":"You are given an n x n grid where each cell contains a positive integer representing the amount of gold in that cell. You are a miner starting at the top-left cell (1,1) and want to reach the bottom-right cell (n,n). You can only move right or down from your current cell. Write a program to find the maximum amount of gold you can collect on your way to the bottom-right cell. You must visit exactly some cells in the grid as you move. Input The first line contains one integer n (1 ≤ n ≤ 1000) — the size of the grid. Each of the next n lines contains n integers, where each integer aij (1 ≤ aij ≤ 100) represents the amount of gold in cell (i, j). Output Print one integer, which is the maximum amount of gold you can collect while moving from the top-left cell to the bottom-right cell. Examples Input 3 1 3 1 1 5 1 4 2 1 Output 12 Input 4 1 2 3 4 2 3 4 5 3 4 5 6 4 5 6 7 Output 28 Note In the first example, the optimal path for collecting the maximum amount of gold is: (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3), collecting a total of 12 units of gold. In the second example, the optimal path is: (1,1) -> (1,2) -> (1,3) -> (1,4) -> (2,4) -> (3,4) -> (4,4), collecting a total of 28 units of gold.","solution":"def max_gold(n, grid): # Initialize a DP table where dp[i][j] will store the maximum gold collected to reach cell (i, j) dp = [[0] * n for _ in range(n)] # Base case: start from the top-left cell dp[0][0] = grid[0][0] # Fill the first row (since we can only move right in the first row) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (since we can only move down in the first column) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the maximum gold collected return dp[n-1][n-1]"},{"question":"F: Sequence Transformation Problem Statement You are given an array A of N integers. Your task is to transform this array into another array B of length N such that the following conditions are satisfied: 1. For every 1 <= i <= N, B[i] = A[i] + max(0, B[i-1] - (i-1)), where B[0] is considered 0. 2. The final array B should consist of unique values. Given that some transformations may result in non-unique values, determine the number of distinct arrays B that can be generated following the given rules. Since the answer could be very large, return the number of distinct arrays B modulo 10^9+7. Input N A_1 A_2 ... A_N Constraints * 1 leq N leq 2 times 10^5 * 1 leq A_i leq 10^9 Output Output the number of different arrays B in a single line. Sample Input 1 3 1 2 3 Output for Sample Input 1 1 Sample Input 2 2 1000000000 1000000000 Output for Sample Input 2 1 Sample Input 3 4 1 2 2 3 Output for Sample Input 3 0 Sample Input 4 5 10 15 20 25 30 Output for Sample Input 4 1 Example Input 4 1 2 2 3 Output 0","solution":"MOD = 10**9 + 7 def count_distinct_arrays(N, A): Determines the number of distinct arrays B that can be generated following the rules. B[i] = A[i] + max(0, B[i-1] - (i-1)) for 1 <= i <= N where B[0] is considered 0. B = [] prev_B = 0 for i in range(1, N+1): current_B = A[i-1] + max(0, prev_B - (i-1)) if current_B in B: return 0 B.append(current_B) prev_B = current_B return 1 def sequence_transformation(N, A): return count_distinct_arrays(N, A) % MOD"},{"question":"Given a string of lowercase alphabet characters, determine the number of distinct subsequences that consist of pairs of identical characters. A subsequence is defined as a sequence derived by deleting some or no elements of the string without changing the order of the remaining elements. For example, in the string \\"abcabc\\", the valid pairs are (a, a), (b, b), and (c, c). Input format: * A single string S. Constraints: * 1 ≤ |S| ≤ 2000 * S contains only lowercase letters. Output format: * Output a single integer indicating the number of distinct subsequences that each form a pair of identical characters. Example 1: Input: abca Output: 3 Explanation: The valid pairs are (a, a), (b, b), and (c, c). Example 2: Input: abcdef Output: 0 Explanation: There are no repeated characters in the string, hence no valid pairs. Example 3: Input: aabbccdd Output: 6 Explanation: The valid pairs are (a, a), (b, b), (c, c), and (d, d). Each character has exactly one pair, so the total number of distinct pairs is 6.","solution":"def count_distinct_pairs(s): Returns the number of distinct subsequences that consist of pairs of identical characters. from collections import Counter char_count = Counter(s) return sum(v // 2 for v in char_count.values())"},{"question":"Tom loves finding palindromes. You are given a positive integer M. Determine the largest palindrome number less than or equal to M. A palindrome number is a number that remains the same when its digits are reversed. For example, * 121 is a palindrome. * 132 is not a palindrome. * 9 is a palindrome. Constraints * 1 ≤ M ≤ 1000 Input Input is given from Standard Input in the following format: M Output Print the answer. Examples Input 150 Output 141 Input 8 Output 8 Input 1000 Output 999 Input 278 Output 272","solution":"def largest_palindrome_less_than_or_equal_to(m): Returns the largest palindrome number less than or equal to m. for num in range(m, -1, -1): if str(num) == str(num)[0:][::-1]: return num"},{"question":"Given an integer n, your task is to find the sum of all the digits in the number formed by concatenating all the integers from 1 to n together into a single string. Input The first and only line contains integer n (1 ≤ n ≤ 1000) — the number up to which integers will be concatenated. Output Print the sum of all the digits in the resulting string. Examples Input 12 Output 51 Explanation: The number formed by concatenating all integers from 1 to 12 is \\"123456789101112\\". The sum of the digits in this string is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 0 + 1 + 1 + 1 + 2 = 51. Input 5 Output 15 Explanation: The number formed by concatenating all integers from 1 to 5 is \\"12345\\". The sum of the digits in this string is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def sum_of_concatenated_digits(n): Returns the sum of all the digits in the number formed by concatenating all the integers from 1 to n into a single string. :param n: The maximum number up to which integers are concatenated. :type n: int :return: Sum of all digits in the concatenated string. :rtype: int concatenated_string = \'\'.join(str(i) for i in range(1, n + 1)) return sum(int(digit) for digit in concatenated_string)"},{"question":"Alice is playing a game with an array of integers. She can perform the following operations: 1. Choose any two consecutive elements in the array and either remove the smaller element or replace both elements with their sum. Alice aims to make the array strictly decreasing as quickly as possible. You need to help Alice by writing a program to determine the minimum number of operations required to achieve a strictly decreasing array or determine if it\'s impossible. # Input The first line contains an integer n (2 ≤ n ≤ 10^5), representing the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6), representing the elements of the array. # Output Output the minimum number of operations required to make the array strictly decreasing. If it\'s impossible, output \\"Impossible\\". # Examples Input ``` 5 9 7 5 3 1 ``` Output ``` 0 ``` Input ``` 5 1 3 2 4 5 ``` Output ``` Impossible ``` Input ``` 4 5 5 5 5 ``` Output ``` 3 ``` # Explanation In the first example, the array is already strictly decreasing, so no operations are needed. In the second example, it is impossible to make the array strictly decreasing. In the third example, Alice can perform the following operations: - Replace the first two 5\'s with their sum (10), resulting in the array [10, 5, 5] - Replace the first two elements (10 and 5) with their sum (15), resulting in the array [15, 5] - Replace the first two elements (15 and 5) with their sum (20), resulting in the array [20] Thus, a total of 3 operations are needed.","solution":"def min_operations_to_decreasing(n, array): operations = 0 for i in range(n - 1): if array[i] <= array[i + 1]: return \\"Impossible\\" return operations"},{"question":"Online Music Platform Rankings Birju is an avid user of an online music platform. The platform ranks songs based on their daily streams. Every day, the ranking of songs might change as the number of streams change. Birju wants to know how the ranking of a particular song changes over a series of days. Write a program to track the ranking changes of a given song over multiple days and find the maximum positive improvement in ranking position. Ranking position is measured from best (1) to worst (N). If the song\'s ranking improves from day D1 to day D2, the improvement is calculated as (ranking on D1) - (ranking on D2). Input The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of days. The second line contains N integers representing the ranking of the song on each day. Output For each test case, output a single integer representing the maximum positive improvement in the song\'s ranking over the given days. If the ranking never improves, output 0. Constraints 1 <= T <= 10 1 <= N <= 10^5 1 <= Ranking Position <= N (unique for each day) Time limit: 1s Sample Input 2 5 5 4 3 2 1 4 8 7 5 5 Sample Output 4 3 Explanation For the first case, the song improves from rank 5 to 1 over the 5 days, giving a maximum improvement of 4. For the second case, the maximum improvement is from rank 8 to rank 5, giving an improvement of 3 ranks. Note that if the rank stays the same, it does not count as an improvement.","solution":"def max_positive_improvement(test_cases): For each test case, find the maximum positive improvement in song ranking over multiple days. Parameters: test_cases: A list of tuples where each tuple contains: - An integer N representing the number of days. - A list of N integers representing the song ranking on each day. Returns: A list of integers where each integer represents the maximum positive improvement for the corresponding test case. results = [] for N, rankings in test_cases: max_improvement = 0 for i in range(N): for j in range(i + 1, N): improvement = rankings[i] - rankings[j] if improvement > max_improvement: max_improvement = improvement results.append(max_improvement) return results"},{"question":"You are given a string of parentheses. You need to find the length of the longest valid (well-formed) parentheses substring. Input The first line of input contains the string s (1 ≤ |s| ≤ 10^6), a string of parentheses \'(\' and \')\'. Output Output a single integer, the length of the longest valid parentheses substring in the given string. Examples Input (()) Output 4 Input )()()) Output 4 Input ) Output 0 Note In the first example, the entire string is already a valid parentheses substring with length 4. In the second example, the longest valid parentheses substring is \\"()()\\", with length 4. In the last example, there are no valid parentheses substrings, so the output is 0.","solution":"def longest_valid_parentheses(s): Returns the length of the longest valid (well-formed) parentheses substring. max_len = 0 stack = [-1] # Initialize stack with a base index for i, char in enumerate(s): if char == \'(\': stack.append(i) else: # char == \')\' stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: stack.append(i) return max_len"},{"question":"You are given a string consisting of lowercase Latin letters and a number k. Your task is to rearrange the string such that each character appears at least k distance away from its previous occurrence. If such an arrangement is not possible, output \\"-1\\". Input The first line contains a string s (1 ≤ |s| ≤ 10^5), consisting of lowercase Latin letters. The second line contains an integer k (1 ≤ k ≤ |s|). Output Print the rearranged string if possible, otherwise print \\"-1\\". Examples Input aabbcc 3 Output abcabc Input aaabc 2 Output abaca Input aaabc 3 Output -1","solution":"from collections import Counter import heapq def rearrange_string(s, k): if k == 0: # If k is 0, no need to rearrange return s counter = Counter(s) max_heap = [(-value, key) for key, value in counter.items()] heapq.heapify(max_heap) result = [] wait_queue = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) wait_queue.append((count + 1, char)) if len(wait_queue) < k: continue to_push_back = wait_queue.pop(0) if to_push_back[0] < 0: heapq.heappush(max_heap, to_push_back) if len(result) != len(s): return \\"-1\\" return \\"\\".join(result)"},{"question":"You are working on a sequence manipulation program. You are given an integer array representing the sequence and two types of operations that can be performed on the sequence. 1. Increment Operation: Increment every element of the array by 1. 2. Rotate Operation: Rotate the entire array to the right by one position. That is, after rotation, the last element of the array becomes the first element, and every other element moves one position to the right. You need to figure out the minimum number of operations required to make all elements of the array equal using any combination of the two operations. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2,..., a_n (0 ≤ a_i ≤ 10^9) — the elements of the array. Output Output the minimum number of operations required to make all elements of the array equal. Examples Input 5 1 2 3 4 5 Output 10 Input 3 2 1 3 Output 2 Note In the first example, you can perform an increment operation 5 times to get the array [6, 7, 8, 9, 10], then perform 5 rotations to make the array [10, 6, 7, 8, 9]. Now perform another increment operation 5 times to make it [11, 7, 8, 9, 10] and again 5 rotations will make the array [10, 11, 10, 6, 7], and finally, one more increment operation will make it [11, 11, 11, 11, 7]. So the total number of operations performed is 10. In the second example, perform the increment operation 1 time to make the array [3, 2, 4], and one rotation to make it [4, 3, 2]. The minimum number of operations is 2.","solution":"def min_operations_to_equalize(n, arr): This function calculates the minimum number of operations required to make all elements in the array equal using any combination of increment and rotate operations. :param n: Integer, the number of elements in the array :param arr: List of integers, the elements of the array :return: Integer, the minimum number of operations required if n == 1: return 0 # Find the minimum and maximum element in the array min_elem = min(arr) max_elem = max(arr) # Difference between maximum and minimum gives us the maximum increments needed increments_needed = max_elem - min_elem return increments_needed"},{"question":"Given a positive integer `n`, write a program that generates the integer sequence from 1 to `n`. However, for multiples of 3, the program should print \\"Fizz\\" instead of the number, and for the multiples of 5, it should print \\"Buzz\\". For numbers that are multiples of both 3 and 5, the program should print \\"FizzBuzz\\". Input A single line containing an integer `n` (1 ≤ n ≤ 1000). Output Print each of the numbers from 1 to `n` on a new line as described above. Examples Input 15 Output 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz Input 5 Output 1 2 Fizz 4 Buzz Note In the first example, you can see how multiples of 3, 5, and both are replaced by \\"Fizz\\", \\"Buzz\\", and \\"FizzBuzz\\" respectively. The sequence continues in numerical order with the substitutions as specified.","solution":"def fizz_buzz(n): Generates the integer sequence from 1 to n with substitutions: - \\"Fizz\\" for multiples of 3 - \\"Buzz\\" for multiples of 5 - \\"FizzBuzz\\" for multiples of both 3 and 5 Args: n (int): the end of the sequence (inclusive) Returns: list: the sequence with the appropriate substitutions result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"There is a digital library containing various books. Each book is uniquely identified by a non-negative integer, `book_id`. Readers frequently borrow and return books. Your task is to help the librarian keep track of the borrow and return operations efficiently and determine the current status of each book. The library supports the following types of operations: 1. \\"borrow book_id\\" - A reader borrows a book. 2. \\"return book_id\\" - A reader returns a book. Initially, all books are available in the library. You need to process the operations and determine if each book is currently \\"Available\\" or \\"Borrowed\\". Input The first line contains the integer `q` (1 ≤ q ≤ 200 000) — the number of operations. The following `q` lines contain a single operation in the format described above. Output For each operation, output the status of the book after performing the operation. If the operation is \\"borrow book_id\\" and the book was already borrowed, print \\"Borrowed\\". Otherwise, print \\"Available\\". If the operation is \\"return book_id\\" and the book was already available, print \\"Available\\". Otherwise, print \\"Borrowed\\". Examples Input 5 borrow 1 borrow 1 return 1 return 1 borrow 2 Output Available Borrowed Borrowed Available Available Explanation 1. The first operation borrows book 1 and it becomes \\"Borrowed\\". 2. The second operation tries to borrow book 1 again but it is already \\"Borrowed\\", thus the output is \\"Borrowed\\". 3. The third operation returns book 1, making it \\"Available\\". 4. The fourth operation tries to return book 1 again but it is already \\"Available\\", thus the output is \\"Available\\". 5. The fifth operation borrows book 2 and it becomes \\"Available\\".","solution":"def process_operations(q, operations): book_status = {} result = [] for operation in operations: op, book_id = operation.split() book_id = int(book_id) if op == \\"borrow\\": if book_id in book_status and book_status[book_id] == \\"Borrowed\\": result.append(\\"Borrowed\\") else: book_status[book_id] = \\"Borrowed\\" result.append(\\"Available\\") elif op == \\"return\\": if book_id in book_status and book_status[book_id] == \\"Available\\": result.append(\\"Available\\") else: book_status[book_id] = \\"Available\\" result.append(\\"Borrowed\\") return result"},{"question":"You are given an array of integers of length n. Your task is to determine if you can split the array into two non-empty contiguous subarrays such that the sum of the elements in the first subarray is equal to the sum of the elements in the second subarray. Write a function `can_split_array(arr)` that returns `True` if such a split is possible, and `False` otherwise. Input The first line of the input contains one integer n (2 ≤ n ≤ 10^5) — the length of the array. The second line of the input contains n integers a_1, a_2, ..., a_n ( |a_i| ≤ 10^4) — the elements of the array. Output Return `True` if the array can be split into two non-empty contiguous subarrays with equal sums, otherwise return `False`. Example Input 6 1 2 3 3 2 1 Output True Input 5 3 1 4 1 5 Output False","solution":"def can_split_array(arr): Determines if the array can be split into two non-empty contiguous subarrays with equal sums. :param arr: List of integers :return: Boolean value, True if such a split is possible, otherwise False total_sum = sum(arr) left_sum = 0 for i in range(len(arr) - 1): left_sum += arr[i] right_sum = total_sum - left_sum if left_sum == right_sum: return True return False"},{"question":"In a small town, there is a tradition to light up all the houses in a straight line during a festival. Each house has a unique brightness level which is a positive integer. Festive organizers want to select a subarray of houses (continuous segment of houses) such that the sum of brightness levels of the selected houses is at least a given integer `X` and the length of the subarray is minimized. Write a program to determine the length of the smallest subarray with a sum greater than or equal to `X`. If no such subarray exists, output `-1`. Input: - The first line contains two integers `N` and `X` – the number of houses and the required minimum sum respectively. - The second line contains `N` space-separated integers representing the brightness level of each house. Output: - Output one integer – the length of the smallest subarray with a sum at least `X`, or `-1` if there is no such subarray. Constraints: - (1 leq N leq 10^5) - (1 leq X leq 10^9) - (1 leq text{brightness level of each house} leq 10^4) Example: Input: 10 15 1 2 3 4 5 6 7 8 9 10 Output: 2 Explanation: The smallest subarray with a sum of at least 15 is [7, 8] with length 2. Other subarrays with the sum of 15 or more have greater lengths.","solution":"def smallest_subarray_with_sum(arr, N, X): Returns the length of the smallest subarray with sum greater than or equal to X. If no such subarray exists, returns -1. min_length = float(\'inf\') current_sum = 0 start_index = 0 for end_index in range(N): current_sum += arr[end_index] while current_sum >= X: min_length = min(min_length, end_index - start_index + 1) current_sum -= arr[start_index] start_index += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given an inventory of products in a warehouse, represented as an array of integers. Each element in the array represents the quantity of a particular product. Your task is to determine the minimum number of moves required to make all the quantities equal. In one move, you are allowed to increment or decrement any element of the array by 1. Input The first line contains a single integer n (1 ≤ n ≤ 5000) — the number of distinct products in the inventory. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^6), where a_i denotes the quantity of the i-th product. Output Print one integer — the minimum number of moves required to make all the quantities of the products equal. Examples Input 5 1 2 3 4 5 Output 6 Input 3 10 10 10 Output 0 Note In the first test, you can perform the following sequence: 1. Increment the first element (1 -> 2), it takes 1 move; 2. Increment the first element (2 -> 3), it takes 1 move; 3. Decrement the fifth element (5 -> 4), it takes 1 move; 4. Decrement the fourth element (4 -> 3), it takes 1 move; 5. Decrement the third element (4 -> 3), it takes 1 move; 6. Decrement the second element (4 -> 3), it takes 1 move. A total of 6 moves are required to achieve equal quantities. In the second test, since all elements are already equal, no moves are required.","solution":"def min_moves_to_equal_elements(n, quantities): Determines the minimum number of moves required to make all quantities in the array equal. Parameters: n (int): Number of distinct products. quantities (list of int): Quantities of each product. Returns: int: Minimum number of moves required. # Sort the quantities quantities.sort() # Find the median median = quantities[n // 2] # Calculate the total number of moves moves = sum(abs(quantity - median) for quantity in quantities) return moves"},{"question":"Given a string s, you need to find all starting indices of substring(s) that is a permutation of another string p. In other words, find all the starting indices of substrings in s that match any permutation of the string p. Input The first line contains the string s (1 ≤ |s| ≤ 10^4), the string in which to search for permutations. The second line contains the string p (1 ≤ |p| ≤ 10^3), the string of which permutations we are looking for. Output Print all starting indices of substrings in s that are permutations of p, in a single line separated by spaces. Examples Input cbaebabacd abc Output 0 6 Input abab ab Output 0 1 2","solution":"def find_permutation_indices(s, p): Finds all starting indices of substrings in s that are permutations of p. from collections import Counter p_count = Counter(p) s_count = Counter() result = [] p_len = len(p) s_len = len(s) for i in range(s_len): s_count[s[i]] += 1 if i >= p_len: if s_count[s[i - p_len]] == 1: del s_count[s[i - p_len]] else: s_count[s[i - p_len]] -= 1 if s_count == p_count: result.append(i - p_len + 1) return result"},{"question":"problem Samantha is training for a marathon and she wants to track her progress over a period of N days. Each day, she logs the number of kilometers she ran. Samantha wants to find out the longest consecutive streak of days where she increased the number of kilometers she ran compared to the previous day. Create a program that takes the number of days, N, followed by an array of N integers representing the number of kilometers Samantha ran on each day, and outputs the length of the longest increasing streak of running distances. input The input consists of two lines: - The first line contains a single integer N (2 ≤ N ≤ 1000) which denotes the number of days Samantha logs her running distances. - The second line contains N integers where each value represents the distance ran (1 ≤ distance ≤ 100). output The output should be a single integer representing the length of the longest streak of increasing running distances. Example Input 7 4 5 2 3 7 6 8 Output 3 Explanation In this example, the longest increasing streak is from day 2 to day 5 with the sequence 2, 3, 7, which has a length of 3.","solution":"def longest_increasing_streak(N, distances): longest_streak = 0 current_streak = 1 for i in range(1, N): if distances[i] > distances[i - 1]: current_streak += 1 else: if current_streak > longest_streak: longest_streak = current_streak current_streak = 1 if current_streak > longest_streak: longest_streak = current_streak return longest_streak"},{"question":"A well-known software company has developed a new encryption algorithm known as the Circular Caesar Cipher (CCC). This encryption method shifts the characters in the plaintext by a fixed number of positions down the alphabet while wrapping around to the beginning. For instance, with a shift of 3, \'A\' would transform into \'D\', \'B\' into \'E\', and \'Z\' into \'C\'. However, their text processing system only allows the use of lowercase letters, and spaces should remain unchanged. You are required to implement both the encryption and decryption functionalities for this algorithm. Encryption: Replace each lowercase letter in the plaintext with a letter that is a fixed number of positions (shift) down the alphabet, wrapping around if necessary. Leave spaces as they are. Decryption: Replace each lowercase letter in the encrypted text with a letter that is a fixed number of positions (shift) up the alphabet, wrapping around if necessary. Leave spaces as they are. Inputs: 1. The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. 2. Each test case contains an integer s (1 ≤ s ≤ 25), the shift value. 3. The next line contains a string of lowercase letters and spaces representing the plaintext. 4. The next line contains a string of lowercase letters and spaces representing the encrypted text. Outputs: 1. For each test case, print the encrypted result of the plaintext and the decrypted result of the encrypted text. Example Input: 2 3 hello world khoor zruog 5 abc xyz fgh cde Output: khoor zruog hello world fgh cde abc xyz","solution":"def encrypt(plaintext, shift): encrypted_text = [] for char in plaintext: if char == \' \': encrypted_text.append(\' \') else: new_pos = (ord(char) - ord(\'a\') + shift) % 26 new_char = chr(new_pos + ord(\'a\')) encrypted_text.append(new_char) return \'\'.join(encrypted_text) def decrypt(encrypted_text, shift): decrypted_text = [] for char in encrypted_text: if char == \' \': decrypted_text.append(\' \') else: new_pos = (ord(char) - ord(\'a\') - shift) % 26 new_char = chr(new_pos + ord(\'a\')) decrypted_text.append(new_char) return \'\'.join(decrypted_text) def process_test_cases(t, test_cases): results = [] for case in test_cases: s, plaintext, encrypted_text = case encrypted_res = encrypt(plaintext, s) decrypted_res = decrypt(encrypted_text, s) results.append((encrypted_res, decrypted_res)) return results"},{"question":"Given an array of integers A of length N and an integer K, you need to find a contiguous subarray such that the difference between the maximum and minimum elements in that subarray is exactly K. If multiple such subarrays exist, return the one with the smallest starting index. If no such subarray exists, return an empty array. # Input - The first line contains an integer N (1 leq N leq 10^5), the length of the array. - The second line contains N integers A_i (0 leq A_i leq 10^9), the elements of the array. - The third line contains an integer K (0 leq K leq 10^9). # Output - If there exists a contiguous subarray where the difference between the maximum and minimum elements is exactly K, output the subarray as a space-separated list of integers on a single line. - If no such subarray exists, output an empty array. # Example Input ``` 5 1 7 5 9 2 6 ``` Output ``` 1 7 ``` Input ``` 4 4 3 2 1 5 ``` Output ``` ``` # Note In the first example, the subarray `[1, 7]` has a maximum value of `7` and a minimum value of `1`, so their difference is exactly `6`. As there are no other subarrays that satisfy the condition and have a smaller starting index, this is the correct output. In the second example, there is no subarray where the maximum and minimum difference is exactly `5`.","solution":"def find_subarray_with_diff(A, K): Returns the subarray where the difference between the maximum and minimum elements is exactly K. N = len(A) # Maintain sliding window maximum and minimum from collections import deque max_deque = deque() min_deque = deque() l = 0 # Iterate over the array for r in range(N): # Keep max_deque decreasing while max_deque and A[max_deque[-1]] <= A[r]: max_deque.pop() max_deque.append(r) # Keep min_deque increasing while min_deque and A[min_deque[-1]] >= A[r]: min_deque.pop() min_deque.append(r) # Check if the current window [l, r] is invalid while A[max_deque[0]] - A[min_deque[0]] > K: if max_deque[0] == l: max_deque.popleft() if min_deque[0] == l: min_deque.popleft() l += 1 # Check if the current window [l, r] is valid if A[max_deque[0]] - A[min_deque[0]] == K: return A[l:r+1] return []"},{"question":"A new financial software firm captures monthly data in a tabular format from different branches worldwide. Each branch records the sales figures for different products in a tabular representation. The company considers a report to be Balanced if for all products, the difference between the maximum sale amount and the minimum sale amount at any point does not exceed a threshold value T. Your task is to determine if each monthly report from all branches is Balanced or Not Balanced. # Input The first line contains two integers B and T, the number of branches and the threshold value, respectively. Each of the following B blocks contains: 1. A line with a single integer M, the number of monthly reports for this branch. 2. For each report, a line containing a space-separated list of integers representing the sales figures for the products that month. # Output For each branch, print \\"Balanced\\" if all of its monthly reports are balanced and \\"Not Balanced\\" otherwise. # Constraints 1 ≤ B ≤ 50 1 ≤ M ≤ 12 1 ≤ Number of products in any report ≤ 20 0 ≤ Sales figures ≤ 10000 0 ≤ T ≤ 10000 # Example Input ``` 2 5 3 10 15 12 14 20 19 17 15 25 20 20 18 2 10 10 10 10 12 10 18 10 ``` Output ``` Balanced Not Balanced ``` Explanation For the first branch: - Report 1: Difference between max (15) and min (10) is 5, which is ≤ T. - Report 2: Difference between max (20) and min (15) is 5, which is ≤ T. - Report 3: Difference between max (25) and min (18) is 7, which is > T. Hence, the first branch is not balanced. For the second branch: - Report 1: Difference between max (10) and min (10) is 0, which is ≤ T. - Report 2: Difference between max (18) and min (10) is 8, which is > T. Hence, the second branch is also not balanced.","solution":"def is_balanced(B, T, data): results = [] start = 0 for _ in range(B): M = data[start] monthly_reports = data[start + 1: start + 1 + M] balanced = True for report in monthly_reports: max_sale = max(report) min_sale = min(report) if max_sale - min_sale > T: balanced = False break if balanced: results.append(\\"Balanced\\") else: results.append(\\"Not Balanced\\") start = start + 1 + M return results"},{"question":"Imagine you are an avid gardener with a peculiar taste for cactus arrangements. You are keen on arranging your collection in a unique way that strictly adheres to your cactus tendencies. You decide to arrange your cacti in a straight line, such that each cactus maintains its distinct spacing trait. Specifically, for each cactus, there must be a certain minimum number of other cacti between two of the same type. Given the desired sequence of cacti types and their spacing constraints, determine if it\'s possible to form such an arrangement. For example, if you have 3 types of cacti A, B, and C, and the spacing constraints are such that every A has at least 2 other cacti (of any type) between another A, every B has at least 1 other cactus between another B, and so on. Input: The input consists of multiple lines. The first line contains an integer N representing the number of cactus types. The next line contains N integers where the i-th integer denotes the minimum spacing for cactus type i (0-indexed). The last line contains a string representing the desired sequence of cactus types, where the cactus types are denoted by uppercase letters starting from \'A\'. Output: Print \\"Possible\\" if it\'s possible to arrange the cacti as per the given spacing constraints, otherwise print \\"Impossible\\". Example: Input: 3 2 1 0 CABACBAC Output: Impossible Input: 3 2 1 1 CABCBAC Output: Possible **Note:** - The length of the desired sequence does not exceed 1000. - The number of cactus types does not exceed 26.","solution":"def can_arrange_cacti(n, spacings, sequence): last_position = {} for i in range(len(sequence)): cactus_type = sequence[i] type_index = ord(cactus_type) - ord(\'A\') if cactus_type in last_position: if i - last_position[cactus_type] <= spacings[type_index]: return \\"Impossible\\" last_position[cactus_type] = i return \\"Possible\\" # Example usage n = 3 spacings = [2, 1, 0] sequence = \\"CABACBAC\\" print(can_arrange_cacti(n, spacings, sequence)) # Should print \\"Impossible\\""},{"question":"In a certain city, there are n intersections connected by some two-way streets. The city\'s traffic control system needs to ensure that there is always a route available between any two intersections to avoid congestion and traffic jams. You have been hired to analyze the city\'s road network and determine if it is possible to make the network connected — that is, ensure there\'s a path between any pair of intersections by adding a minimal number of new streets. Given the number of intersections and the existing streets, your task is to compute the minimum number of streets that need to be added to make the network connected. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n*(n-1)/2) — the number of intersections and the number of existing two-way streets. The next m lines describe each street, containing two integers u_i and v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i) which denote a street between intersections u_i and v_i. Output Print a single integer — the minimum number of streets that need to be added to make the network connected. Examples Input 5 3 1 2 2 3 4 5 Output 1 Input 4 1 1 2 Output 2 Note In the first example, the intersections 1, 2, and 3 already form a connected component, and intersections 4 and 5 form another connected component. To make the whole network connected, only one additional street, either between 3 and 4 or between 3 and 5, is required. In the second example, there are 3 separate components: one component with intersections {1, 2}, one with {3}, and one with {4}. To connect all components, two more streets are needed (such as 2-3 and 3-4).","solution":"def minimum_streets_to_add(n, m, streets): Calculate the minimum number of streets that need to be added to make the network connected. :param n: Number of intersections :param m: Number of existing streets :param streets: List of tuples where each tuple represents a street between two intersections :return: Minimum number of streets to add from collections import defaultdict, deque def bfs(start, visited, adj_list): queue = deque([start]) while queue: node = queue.popleft() for neighbor in adj_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Adjacency list representation of the graph adj_list = defaultdict(list) for u, v in streets: adj_list[u].append(v) adj_list[v].append(u) visited = set() num_components = 0 for i in range(1, n + 1): if i not in visited: bfs(i, visited, adj_list) num_components += 1 # Minimum number of streets to add to connect all components is (num_components - 1) return num_components - 1"},{"question":"You are managing the stock of an online bookstore. Every book in your warehouse is represented by an integer, and a book can be added or removed from your warehouse. Some customers have special requests where they want to know the k-th smallest book currently in your warehouse. As orders come in, you need to process these requests efficiently. You have to implement a system where you can handle the following operations: - \\"add x\\": Add the book with id x to your warehouse. - \\"remove x\\": Remove the book with id x from your warehouse. It is guaranteed that the book will exist in the warehouse before it is removed. - \\"kth k\\": Output the k-th smallest book id currently in the warehouse. It is guaranteed that k will be a valid input for the current state of the warehouse. Each operation is given on a separate line. The operations will be given in a format as described above. The input will end when an \\"end\\" operation is received. Input The input consists of multiple lines, each containing one operation as shown above. (1 ≤ x ≤ 10^9 and 1 ≤ k ≤ number of books in the warehouse). You may assume the total number of operations will not exceed 10^5. Output For each \\"kth k\\" operation, output the k-th smallest book id in the current warehouse. Examples Input add 5 add 1 add 3 kth 2 remove 3 kth 2 end Output 3 5","solution":"import bisect class BookWarehouse: def __init__(self): self.books = [] def add(self, x): bisect.insort(self.books, x) def remove(self, x): index = bisect.bisect_left(self.books, x) if index != len(self.books) and self.books[index] == x: self.books.pop(index) def kth(self, k): return self.books[k-1] def process_operations(operations): import sys output = [] warehouse = BookWarehouse() for operation in operations: if operation.startswith(\\"add \\"): _, x = operation.split() warehouse.add(int(x)) elif operation.startswith(\\"remove \\"): _, x = operation.split() warehouse.remove(int(x)) elif operation.startswith(\\"kth \\"): _, k = operation.split() output.append(str(warehouse.kth(int(k)))) elif operation == \\"end\\": break return output"},{"question":"You are given an array of integers representing the heights of a group of buildings. You are standing in front of these buildings and want to know how many buildings are visible if you can look only from left to right. A building is considered visible if there are no taller buildings in front of it from the left. Write a function to count the number of visible buildings. Input The first line contains an integer n (1 ≤ n ≤ 10^5), which represents the number of buildings. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) representing the heights of the buildings. Output Output a single integer: the number of visible buildings when looking from the left. Examples Input 6 2 5 1 7 3 1 Output 3 Input 4 8 7 6 5 Output 1 Input 5 3 3 4 4 5 Output 3 Note In the first example, out of the buildings with heights [2, 5, 1, 7, 3, 1], you can see the buildings with heights 2, 5, and 7. In the second example, the building with height 8 is the only visible building since all subsequent buildings are shorter than 8. In the third example, the buildings with heights 3, 4, and 5 are visible.","solution":"def count_visible_buildings(buildings): Returns the number of visible buildings when looking from left to right. if not buildings: return 0 visible_count = 0 max_height = 0 for height in buildings: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"You are a park ranger responsible for ensuring the safety of the trails in a national park. Part of your job involves inspecting and maintaining sensor equipment along various trails, which measure environmental data and relay it back to park headquarters. Unfortunately, some of these sensors occasionally fail and go off-line. Given a trail that consists of multiple sensor stations, you want to determine the degree of failure by measuring the longest consecutive sequence of failed sensors. This will help you prioritize maintenance efforts according to the severity of sensor failures. Write a program to determine the length of the longest subsequence of consecutive failed sensors given the status of each sensor along a trail. Input The input is given as follows: n status The first input line contains an integer n (1 ≤ n ≤ 10000), the number of sensors along the trail. The second line contains a sequence of n integers, each either 0 or 1. A 0 indicates a functioning sensor, and a 1 indicates a failed sensor. Output Output a single integer representing the length of the longest consecutive sequence of failed sensors. Examples Input 10 1 1 0 1 1 1 0 0 1 1 Output 3 Input 5 0 0 0 0 0 Output 0 Input 8 1 1 1 0 1 1 1 1 Output 4","solution":"def longest_failed_sequence(n, status): Determines the length of the longest subsequence of consecutive failed sensors (1s) along a trail. Parameters: n (int): The number of sensors along the trail. status (list of int): The status of each sensor (0 for functioning, 1 for failed). Returns: int: The length of the longest consecutive sequence of failed sensors. max_length = 0 current_length = 0 for sensor in status: if sensor == 1: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"In a game, players can craft different items using ingredients they collect. Each item requires a specific number of different ingredients. The items and their ingredient requirements are described in a list where each element is a pair of integers, (a, b), indicating that item a requires b ingredients. Given a list of items and their required ingredients, determine the maximum number of items that a player can craft if they have an unlimited number of each type of ingredient. Input The first line contains an integer n (1 ≤ n ≤ 100000), representing the number of items. Each of the next n lines contains two integers a and b (1 ≤ a, b ≤ 100000), representing an item and the number of ingredients required to craft that item. Output Print a single integer, the maximum number of different items the player can craft. Examples Input 4 1 3 2 5 3 2 4 2 Output 4 Input 3 1 1 2 2 3 3 Output 3 Note In the first test case, the player can craft all four different items as they have an unlimited number of each type of ingredient available. In the second test case, the player can craft all three different items with the given ingredients.","solution":"def max_craftable_items(n, items): Determine the maximum number of different items that a player can craft with an unlimited number of each type of ingredient. :param n: Integer, number of items. :param items: List of tuples, where each tuple contains two integers - item id and number of ingredients required. :return: Integer, the maximum number of different items that can be crafted. return n"},{"question":"You are given an array `A` of `N` distinct integers. You need to process `Q` queries on this array. Each query can either be: 1. Update a specific element in the array. 2. Find the sum of all the elements in the subarray between two given indices, inclusive. Here are the types of queries: 1. \\"1 X Y\\" - Set the value at index `X` to `Y` in array `A`, where `0 ≤ X < N`. 2. \\"2 L R\\" - Calculate the sum of the subarray from index `L` to index `R` (both inclusive), where `0 ≤ L ≤ R < N`. # Input The first line contains two integers `N` and `Q` (1 ≤ N, Q ≤ 10^5) - the number of elements in the array and the number of queries respectively. The second line contains `N` distinct integers representing array `A`. Each of the next `Q` lines contains a query in one of the two aforementioned formats. # Output For each query of type 2, output the sum of the elements in the subarray from index `L` to index `R` on a new line. # Constraints - 1 ≤ A[i] ≤ 10^9 - It is guaranteed that the array consists of distinct integers. # Example Input ``` 5 3 1 2 3 4 5 2 1 3 1 2 10 2 1 3 ``` Output ``` 9 16 ``` # Explanation 1. The first query asks for the sum of elements from index 1 to 3, which is `2 + 3 + 4 = 9`. 2. The second query updates the value at index 2 to 10. So, the array becomes `[1, 2, 10, 4, 5]`. 3. The third query asks for the sum of elements from index 1 to 3 again, which is now `2 + 10 + 4 = 16`.","solution":"def process_queries(N, Q, A, queries): Processes a list of queries on the array A. Args: N : int : Number of elements in the array A Q : int : Number of queries A : list of int : Array of integers queries : list of tuples : List of queries to process Returns: list of int : Result of the sum queries results = [] for query in queries: if query[0] == 1: # Update the value at index X to Y X, Y = query[1], query[2] A[X] = Y elif query[0] == 2: # Calculate the sum of the subarray from index L to R L, R = query[1], query[2] results.append(sum(A[L:R+1])) return results"},{"question":"Alex is an amateur gardener who wants to optimize the use of his water supply. He has a row of n plants, and each plant requires a certain amount of water to survive. As an advanced system, he has installed a smart irrigation controller which can water exactly one plant at a time, delivering one unit of water per second. Alex wants to know if he can water all his plants within T seconds, considering he can only water one plant at a time with his smart irrigation controller. Your task is to determine if he can water all his plants in the given time. Input: The first line contains a single integer T denoting the number of test cases. Each test case consists of two lines: The first line contains two integers n and t denoting the number of plants and the total time available in seconds. The second line contains n integers where the i-th integer denotes the amount of water required by the i-th plant. Output: For each test case, print \\"YES\\" if it is possible to water all the plants in the given time, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 25 1 ≤ n ≤ 100 1 ≤ t ≤ 10000 1 ≤ Water required by each plant ≤ 100 SAMPLE INPUT 2 3 10 3 4 4 4 8 2 3 4 5 SAMPLE OUTPUT YES NO Explanation: In the first test case: - Plant 1 requires 3 seconds, plant 2 requires 4 seconds, plant 3 requires 4 seconds of watering. - Total time required = 3 + 4 + 4 = 11 seconds. - Since 11 seconds > 10 seconds, the output is \\"NO\\". In the second test case: - Plant 1 requires 2 seconds, plant 2 requires 3 seconds, plant 3 requires 4 seconds, plant 4 requires 5 seconds of watering. - Total time required = 2 + 3 + 4 + 5 = 14 seconds. - Since 14 seconds > 8 seconds, the output is \\"NO\\".","solution":"def can_water_all_plants(T, test_cases): Determines if Alex can water all the plants within the given time for each test case. Parameters: T (int) : Number of test cases. test_cases (list of tuples) : Each tuple contains (n, t, water_requirements) where n is the number of plants, t is the total time available, water_requirements is a list of water requirements for each plant. Returns: List of strings: \\"YES\\" if it\'s possible to water all plants within the given time, otherwise \\"NO\\". results = [] for case in test_cases: n, t, water_requirements = case total_water_needed = sum(water_requirements) if total_water_needed <= t: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Maxim, the professional climber, has a sequence of heights representing the difficulty of each step he needs to climb. He wants minimal energy expenditure, but also needs to reach the top within his maximum energy limit. To determine this, he established a set of rules: - He may only move to the next or next-to-next step. - Moving to the next step costs an amount of energy equal to the absolute difference between the current and next step\'s heights. - Moving to the next-to-next step costs twice the absolute difference between the current and next-to-next step\'s heights. - He starts at the first step with 0 energy spent. Given the sequence of heights and the maximum energy he can expend, help Maxim determine if he can reach the top within his energy limit. Constraints - 1 ≤ N ≤ 10^5 (the number of steps) - 1 ≤ H_i ≤ 10^4 (the height of each step) - 1 ≤ MAX_ENERGY ≤ 10^9 Input The input is given from Standard Input in the following format: ``` N MAX_ENERGY H_1 H_2 ... H_N ``` Output Print \\"Possible\\" if Maxim can reach the top within the maximum energy limit, otherwise print \\"Impossible\\". Examples Input ``` 5 10 1 3 6 4 8 ``` Output ``` Possible ``` Input ``` 5 5 1 3 6 4 8 ``` Output ``` Impossible ```","solution":"def can_maxim_reach_top(n, max_energy, heights): Determines if Maxim can reach the top within the maximum energy limit. Arguments: n : int : The number of steps. max_energy : int : The maximum energy Maxim can expend. heights : list : A list of integers representing the heights of each step. Returns: str : \\"Possible\\" if Maxim can reach the top, otherwise \\"Impossible\\". dp = [float(\'inf\')] * n dp[0] = 0 for i in range(1, n): dp[i] = min(dp[i], dp[i-1] + abs(heights[i] - heights[i-1])) if i > 1: dp[i] = min(dp[i], dp[i-2] + 2 * abs(heights[i] - heights[i-2])) return \\"Possible\\" if dp[-1] <= max_energy else \\"Impossible\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) max_energy = int(data[1]) heights = list(map(int, data[2:2+n])) result = can_maxim_reach_top(n, max_energy, heights) print(result)"},{"question":"You are given an array of integers representing the heights of buildings in a row. The skyline of these buildings with their heights can be observed from any angle. Your task is to find the minimum number of buildings that need to be increased in height such that moving from left to right, the heights of the buildings are strictly non-decreasing. A building\'s height can only be increased and no building\'s height can be decreased. You should return the minimum number of buildings to adjust in order to achieve the desired skyline. Input: The first line of the input contains one integer n (1 ≤ n ≤ 10^5) — the number of buildings in the row. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the buildings. Output: Print one integer — the minimum number of buildings that need their height increased to make the array of heights strictly non-decreasing. Examples: Input 6 1 3 2 5 4 6 Output 2 Input 5 2 2 2 2 2 Output 0 Input 4 8 7 6 5 Output 3 Note: In the first example, you can increase the heights of the third and fifth buildings to get the heights as 1, 3, 3, 5, 5, 6 which is strictly non-decreasing. In the second example, the heights are already non-decreasing, so no buildings need to be adjusted. In the third example, you can increase the heights of the second, third, and fourth buildings to get 8, 8, 8, 8.","solution":"def min_buildings_to_increase(n, heights): Determine the minimum number of buildings that need their height increased to make the array of building heights strictly non-decreasing. :param n: int, number of buildings :param heights: list of int, heights of each building :return: int, minimum number of buildings to adjust adjustments = 0 for i in range(1, n): if heights[i] < heights[i - 1]: adjustments += 1 heights[i] = heights[i - 1] return adjustments"},{"question":"Alex and Jamie are working on a unique project that involves processing and validating international phone numbers. They are struggling to implement a proper validation method for the same. Help them by writing a function to validate the phone numbers. A valid international phone number follows these rules: 1. The phone number must start with a \'+\' character. 2. Following the \'+\' character, there must be between 1 to 3 digits which represent the country code. 3. After the country code, there must be a space. 4. Following the space, there must be 4 to 10 digits which represent the local phone number. Write a program that takes an integer `n` and `n` phone numbers, and validates each phone number based on the rules provided. Input: The first line contains an integer `n` (1 ≤ n ≤ 100) representing the number of phone numbers to validate. The next `n` lines each contain a phone number as a string. Output: For each phone number, print \\"VALID\\" without quotes if the phone number is valid, otherwise print \\"INVALID\\". Constraints: 1 ≤ n ≤ 100 Examples: Sample Input: 4 +123 4567890 +1 2345 +1234 56789 +12 1234567890 Sample Output: VALID VALID INVALID VALID","solution":"import re def validate_phone_numbers(n, phone_numbers): Validates a list of phone numbers based on the given rules. Parameters: n (int): Number of phone numbers to validate phone_numbers (list of str): The phone numbers in string format Returns: list of str: List of \\"VALID\\" or \\"INVALID\\" for each phone number results = [] pattern = re.compile(r\\"^+d{1,3} d{4,10}\\") for number in phone_numbers: if pattern.match(number): results.append(\\"VALID\\") else: results.append(\\"INVALID\\") return results"},{"question":"You are given an integer array `arr` of length `n`. An \\"interesting subarray\\" is any subarray that satisfies, for each element in the subarray, the absolute difference between consecutive elements is the same, i.e., the difference between any two consecutive elements in the subarray is a consistent value. Your task is to find the length of the longest \\"interesting subarray\\" in the array. Input The first line contains an integer `n` (1 ≤ n ≤ 100 000) — the length of the array `arr`. The second line contains `n` integers `arr1, arr2, ..., arrn` (1 ≤ arrays_i ≤ 10^9) — the elements of the array. Output Print a single integer — the length of the longest \\"interesting subarray.\\" Examples Input 6 2 4 6 8 10 12 Output 6 Input 7 1 3 5 8 10 12 14 Output 3 Note In the first example, the entire array is an \\"interesting subarray\\" because the difference between any two consecutive elements is consistently 2. In the second example, the longest \\"interesting subarray\\" is [8, 10, 12, 14] or [1, 3, 5], both of which have a consistent absolute difference of 2. Thus, the output is 3.","solution":"def longest_interesting_subarray(arr): Returns the length of the longest interesting subarray in `arr`. An interesting subarray is defined by a consistent absolute difference between any two consecutive elements. n = len(arr) if n <= 1: return n max_length = 1 current_length = 1 current_diff = arr[1] - arr[0] for i in range(1, n-1): diff = arr[i+1] - arr[i] if diff == current_diff: current_length += 1 else: current_diff = diff current_length = 1 max_length = max(max_length, current_length) return max_length + 1"},{"question":"Given a string of lowercase alphabets, determine if it can be rearranged to form a palindrome. If it can, print \\"YES\\". Otherwise, print \\"NO\\". SAMPLE INPUT racecar civicapp SAMPLE OUTPUT YES NO","solution":"def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. Returns \\"YES\\" if it can be rearranged, otherwise returns \\"NO\\". from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given a tree consisting of n nodes, where each node is assigned a unique integer value from 1 to n. Every node in the tree can either be \\"on\\" or \\"off\\". You can toggle the state of any node k, and when you do so, all nodes in the subtree rooted at k also toggle their states (i.e., \\"on\\" becomes \\"off\\" and vice versa). Your goal is to determine the minimum number of toggles required to turn all nodes \\"on\\". Input - The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of nodes in the tree. - The second line contains n integers representing the initial states of the nodes (0 for \\"off\\" and 1 for \\"on\\"). - The following n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) indicating that there is an edge between node u and node v. Output Output the minimum number of toggles required to turn all nodes \\"on\\". Examples Input 6 0 0 1 0 1 0 1 2 1 3 2 4 2 5 3 6 Output 3 Input 4 1 0 0 1 1 2 2 3 3 4 Output 1 Note In the first example, one possible sequence of toggles: - Toggle node 1, after which nodes 1, 2, 3 toggle to (1, 1, 0, 1, 0, 1) - Toggle node 2, after which nodes 2, 4, 5 toggle to (1, 0, 0, 0, 1, 1) - Toggle node 6, after which nodes 6 toggle to (1, 0, 1, 0, 1, 1) So, 3 toggles are required in this example.","solution":"def min_toggles_to_all_on(n, initial, edges): from collections import defaultdict, deque tree = defaultdict(list) for u, v in edges: tree[u-1].append(v-1) tree[v-1].append(u-1) visited = [False] * n toggle_count = 0 def dfs(node): nonlocal toggle_count stack = deque([(node, False)]) while stack: current, toggled = stack.pop() if visited[current]: continue visited[current] = True if toggled: initial[current] ^= 1 if initial[current] == 0: toggle_count += 1 initial[current] = 1 toggled = True else: toggled = False for neighbor in tree[current]: if not visited[neighbor]: stack.append((neighbor, toggled)) dfs(0) return toggle_count"},{"question":"A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For instance: * the following numbers are prime: 2, 3, 5, 7, 11; * the following numbers are not prime: 4, 6, 8, 9, 10. You are given two positive integers n and m. Find a pair of prime numbers p1 and p2 such that |p1 - p2| = n and p1 + p2 ≤ m. It can be proven that a solution always exists under the given constraints. Input The input contains two integers n and m (1 ≤ n < m ≤ 10^7): the given difference and the upper bound. Output Print two prime integers p1 and p2 (2 ≤ p1, p2 ≤ 10^9, |p1 - p2| = n and p1 + p2 ≤ m). If there are several possible solutions, you can print any. Examples Input 2 10 Output 5 7 Input 4 20 Output 7 11","solution":"def sieve_of_eratosthenes(limit): is_prime = [True] * (limit + 1) p = 2 while (p * p <= limit): if (is_prime[p] == True): for i in range(p * p, limit + 1, p): is_prime[i] = False p += 1 prime_numbers = [p for p in range(2, limit + 1) if is_prime[p]] return prime_numbers def find_prime_pair(n, m): primes = sieve_of_eratosthenes(m) primes_set = set(primes) for p1 in primes: p2 = p1 + n if p2 in primes_set and p1 + p2 <= m: return p1, p2 # Example usage print(find_prime_pair(2, 10)) # Output: (3, 5) or (5, 7) print(find_prime_pair(4, 20)) # Output: (7, 11) or (13, 17)"},{"question":"There is a company that organizes coding contests regularly and holds a large database of previous events. Each contest has a unique contest ID, and participants earn points based on their performance. The aim is to help analyze past contests to determine trend patterns with the following constraints: Participants are ranked based on their total score across all contests they\'ve participated in. When participants have the same total score, they are ranked by the lexicographical order of their names. Given the data of previous contests and participants, your task is to determine the rank of a specific participant. Input: The first line contains an integer n (1 ≤ n ≤ 1000) — the number of contests. The next n lines contain an integer m (1 ≤ m ≤ 1000) — the number of participants for each contest, followed by m lines containing a string name (1 ≤ |name| ≤ 100) and an integer score (0 ≤ score ≤ 1000) for each participant. The last line contains a query string qname representing the name of the participant whose rank is to be determined. Output: Print a single integer — the rank of the participant specified by qname. Example: Input: 2 3 Alice 150 Bob 200 Charlie 100 2 Alice 90 Bob 110 Alice Output: 1 Explanation: Alice has a total score of 240 (150 + 90) while Bob has a total score of 310 (200 + 110), and Charlie has a total score of 100. Therefore, the ranks based on total scores would be Bob (1st), Alice (2nd), and Charlie (3rd), so Alice\'s rank is 2.","solution":"def get_participant_rank(n, contests, qname): from collections import defaultdict # Dictionary to store total score for each participant scores = defaultdict(int) # Process the contest data for contest in contests: m = contest[0] participants = contest[1] for participant in participants: name, score = participant scores[name] += score # Create a sorted list of participants by total score (descending) and name (lexicographic) sorted_participants = sorted(scores.items(), key=lambda x: (-x[1], x[0])) # Find the rank of the specific participant for rank, (name, score) in enumerate(sorted_participants, start=1): if name == qname: return rank"},{"question":"You are working on a new encryption software and you need to generate keys for encryption. The key generation process involves transforming a string based on specific rules. Given a string `s` of length `L` (1 ≤ L ≤ 2000) consisting of lowercase English letters, the transformation rules are as follows: 1. You can choose any substring of the string `s`. 2. Reverse the chosen substring. 3. Append the reversed substring to the end of `s`. The goal is to determine the shortest possible length of the resultant string when the transformation is performed exactly K times (1 ≤ K ≤ 1000). Input: The first line contains two integers L and K separated by a space. The second line contains the string `s`. Output: Output a single integer representing the length of the resultant string after applying the transformation K times. Examples: Input: ``` 4 1 abcd ``` Output: ``` 8 ``` Input: ``` 4 2 abcd ``` Output: ``` 12 ``` Input: ``` 3 3 abc ``` Output: ``` 12 ``` Note: - In the first example, you can choose the substring \\"abcd\\", reverse it to get \\"dcba\\", and append it to the end resulting in \\"abcddcba\\" which has a length of 8. - In the second example, after the first transformation, the string becomes \\"abcddcba\\", and after the second transformation, the string becomes \\"abcddcbadcbaabcd\\". - In the third example, after three transformations, the string becomes \\"abccbabccbaabccbaabccbaabc\\".","solution":"def shortest_length_after_transformations(L, K, s): Function to determine the shortest possible length of the resultant string after K transformations. :param L: Length of the string s (1 ≤ L ≤ 2000) :param K: Number of transformations (1 ≤ K ≤ 1000) :param s: A string of length L consisting of lowercase English letters :return: The length of the resultant string after applying the transformation K times if K == 0: return L new_length = L + L * K return new_length"},{"question":"Peter is an avid traveler and enjoys exploring different cities. Each city he visits has unique public transportation links represented in a matrix format. Peter wants to travel from one specific city to another and needs to determine the minimum number of transit changes required to reach his destination. You are given an n x n matrix where `n` denotes the number of cities. If `matrix[i][j]` is 1, it means there is a direct link between city i and city j, while 0 indicates no direct link. Peter can change at any city if the link is not direct. Write a program that determines the minimum number of transit changes required for Peter to travel from a start city to an end city. Input The first line contains an integer n (1 ≤ n ≤ 300) — the number of cities. The second line contains two integers start and end (1 ≤ start, end ≤ n) — the starting city and the destination city Peter wants to travel to. Each of the next n lines contains n integers (either 0 or 1) representing the connectivity matrix. Output If Peter can travel from the start city to the end city, output the minimum number of transit changes required. If he cannot reach the destination city, output -1. Examples Input 4 1 3 0 1 0 0 1 0 1 1 0 1 0 1 0 1 1 0 Output 2 Input 3 1 2 0 0 0 0 0 1 0 1 0 Output -1 Note In the first example, Peter starts from city 1, changes transit at city 2, then changes transit at city 4 to reach city 3, making a total of 2 changes. In the second example, there is no possible path from city 1 to city 2.","solution":"from collections import deque def min_transit_changes(n, start, end, matrix): start -= 1 end -= 1 if start == end: return 0 visited = [False] * n queue = deque([(start, 0)]) visited[start] = True while queue: current, changes = queue.popleft() for neighbor in range(n): if matrix[current][neighbor] == 1 and not visited[neighbor]: if neighbor == end: return changes + 1 visited[neighbor] = True queue.append((neighbor, changes + 1)) return -1 # Sample usage n = 4 start = 1 end = 3 matrix = [ [0, 1, 0, 0], [1, 0, 1, 1], [0, 1, 0, 1], [0, 1, 1, 0] ] print(min_transit_changes(n, start, end, matrix)) # Output: 2"},{"question":"Alice enjoys working with strings and patterns. Today, she is fascinated by the concept of \\"Pattern Matching\\" within a string. A pattern is a sequence of characters, and Alice wants to determine if the given pattern appears as a subsequence in a string. A subsequence of a string is obtained by deleting some (possibly none) characters from the string without changing the order of the remaining characters. Help Alice figure out if the given pattern exists as a subsequence in the given string. Input The first line contains an integer t (1 ≤ t ≤ 10), the number of test cases. Each of the next t test cases contains a string s (1 ≤ |s| ≤ 10^5) followed by another string p (1 ≤ |p| ≤ 100). Both strings consist only of lowercase English letters. Output For each test case, output \\"YES\\" if the pattern p appears as a subsequence in the string s, otherwise output \\"NO\\". Examples Input 3 abacabadabacaba aacb hello llo abcdefg hij Output YES YES NO Explanation In the first test case, the pattern \\"aacb\\" can be found as a subsequence in the string \\"abacabadabacaba\\" by deleting the positions 2, 3, 8, 9, 10, 12, 13, 14. In the second test case, the pattern \\"llo\\" can be found as a subsequence in the string \\"hello\\" by deleting the first character \'h\'. In the third test case, the pattern \\"hij\\" cannot be found in the string \\"abcdefg\\".","solution":"def is_subsequence(s, p): Returns \\"YES\\" if p is a subsequence of s, otherwise returns \\"NO\\". s_idx, p_idx = 0, 0 while s_idx < len(s) and p_idx < len(p): if s[s_idx] == p[p_idx]: p_idx += 1 s_idx += 1 return \\"YES\\" if p_idx == len(p) else \\"NO\\" def process_test_cases(test_cases): results = [] for s, p in test_cases: results.append(is_subsequence(s, p)) return results"},{"question":"You are given a sequence of integers, which represents temperatures recorded over a period of time. You are required to find the longest subarray where the temperature trend (either non-decreasing or non-increasing) remains constant. A subarray is considered non-decreasing if for every pair of consecutive elements, the following condition is met: * T[i] ≤ T[i+1] A subarray is considered non-increasing if for every pair of consecutive elements, the following condition is met: * T[i] ≥ T[i+1] Your task is to determine the length of the longest subarray that is either non-decreasing or non-increasing. Constraints * 1 ≤ |T| ≤ 100 (|T| denotes the length of T) * -1000 ≤ T[i] ≤ 1000 (T[i] denotes each temperature in the sequence) Input The input is given from Standard Input in the following format: n T_1 T_2 ... T_n Output Print a single integer representing the length of the longest non-decreasing or non-increasing subarray. Examples Input 5 1 2 2 1 1 Output 4 Input 4 4 4 3 3 Output 4","solution":"def longest_constant_trend_subarray(T): Returns the length of the longest subarray which is either non-decreasing or non-increasing. if not T: return 0 n = len(T) if n == 1: return 1 longest = 1 current_nondecreasing = 1 current_nonincreasing = 1 for i in range(1, n): if T[i] >= T[i-1]: current_nondecreasing += 1 else: longest = max(longest, current_nondecreasing) current_nondecreasing = 1 if T[i] <= T[i-1]: current_nonincreasing += 1 else: longest = max(longest, current_nonincreasing) current_nonincreasing = 1 # update for the last segment longest = max(longest, current_nondecreasing, current_nonincreasing) return longest # Example usage: # n = 5 # T = [1, 2, 2, 1, 1] # print(longest_constant_trend_subarray(T)) # Output: 4"},{"question":"In a distant land, there exists a unique culture that documents their history and communications using ancient runes etched on stone tablets. The language is a sequence of symbols, where each symbol can be a part of multiple categories based on its shape and features. You are tasked with decoding written messages by counting the occurrences of each symbol, sorted by their ranks. The challenge is to ensure that the decoding is efficient and accurate given the large variety of symbols and their significance in different contexts. Your job is to write a program that will: 1. Read the tablet dimensions and the sequence of symbols written on it. 2. Count the frequency of each symbol. 3. Sort the symbols firstly by frequency in descending order and then alphabetically by symbol in ascending order. 4. Output the sorted list. The program should handle multiple tablets. Constraints: - Each tablet can contain up to 100 symbols. - Each symbol is a single uppercase letter or digit (A-Z, 0-9). - The number of distinct symbols is at most 40 on any given tablet. Input The input consists of multiple tablets. Each tablet consists of: 1. An integer N representing the number of symbols on the tablet. 2. A string of N uppercase letters or digits representing the symbols. The end of input is indicated by a line containing `DONE`. Output For each tablet, print the sorted list of symbols with their frequencies. Each symbol and its frequency should be printed on a new line, with the symbol and its count separated by a space. Examples Input 7 AABBBCC 9 ZZA978AA9 DONE Output B 3 A 2 C 2 A 3 9 2 Z 2 7 1 8 1 Explanation: For the first tablet, the symbols and their frequencies are sorted as: - B appears 3 times - A appears 2 times - C appears 2 times So the output is: B 3, A 2, C 2 For the second tablet, the symbols and their frequencies are sorted as: - A appears 3 times - 9 appears 2 times - Z appears 2 times - 7 appears 1 time - 8 appears 1 time So the output is: A 3, 9 2, Z 2, 7 1, 8 1","solution":"def decode_tablets(inputs): Given the input tablets, decode the symbols and their respective frequencies sorted as specified. outputs = [] i = 0 while i < len(inputs): if inputs[i] == \\"DONE\\": break N = int(inputs[i]) symbols = inputs[i + 1] symbol_count = {} for symbol in symbols: if symbol in symbol_count: symbol_count[symbol] += 1 else: symbol_count[symbol] = 1 sorted_symbols = sorted(symbol_count.items(), key=lambda x: (-x[1], x[0])) for sym, count in sorted_symbols: outputs.append(f\\"{sym} {count}\\") i += 2 return outputs"},{"question":"Dan is playing a number game with his friend Alex. Dan thinks of a secret number comprised of digits (0-9) and tells Alex several numerical clues to help him guess it. Each clue is given as a digit and a count of how many times that digit appears in the secret number. Write a program that reconstructs the secret number from the given clues. The order of digits in the secret number does not matter; the number needs to be formed with the correct digits appearing the right number of times. Example Input 3 1 2 3 1 8 3 Output 1888 In the input example above, the first number, 3, indicates there are 3 clues following. The clues \\"1 2,\\" \\"3 1,\\" and \\"8 3\\" mean that the digit \'1\' appears 2 times, the digit \'3\' appears 1 time, and the digit \'8\' appears 3 times in the secret number. Therefore, one possible output is \\"188831\\"\\"","solution":"def reconstruct_secret_number(num_clues, clues): Reconstructs the secret number from the given clues. :param num_clues: The number of clues :param clues: A list of tuples where each tuple contains a digit and its count :return: The reconstructed secret number as a string secret_number = [] for digit, count in clues: secret_number.append(str(digit) * count) # To ensure order doesn\'t matter, we can sort the number return \'\'.join(sorted(secret_number))"},{"question":"The Berland National Park is planning to create a unique path for tourists. The park has several landmarks, each with its own scenic value. The park administrators want to make sure that the path is as scenic as possible. The path must start at one landmark and end at another, following a direct path connecting them without revisiting any landmark. The total scenic value of the path is the sum of the scenic values of the landmarks included in the path. Design a program to find the path with the maximum total scenic value. Input The first input line contains an integer n (2 ≤ n ≤ 10000) — the number of landmarks in the park. The second line contains a sequence of integers s1, s2, ..., sn, where si (-1000 ≤ si ≤ 1000) is the scenic value of the i-th landmark. The third line contains an integer m (1 ≤ m ≤ 100000) — the number of direct paths between landmarks. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating that landmark u is directly connected to landmark v. Output Print the maximum total scenic value of a path in the park. Examples Input 5 5 -3 2 6 4 4 1 2 2 3 3 4 4 5 Output 14 Input 6 -1 -2 -3 -4 -5 -6 5 1 2 2 3 3 4 4 5 5 6 Output -1 Input 3 7 8 9 3 1 2 2 3 1 3 Output 24 Note In the first example, the optimal path is 1->2->3->4->5, with a total scenic value of 14. In the second example, even the best path has a negative total scenic value. In the third example, the best path includes all landmarks: 9->8->7.","solution":"def find_max_scenic_path(n, scenic_values, m, paths): from collections import defaultdict import sys # Create an adjacency list graph = defaultdict(list) for u, v in paths: graph[u-1].append(v-1) graph[v-1].append(u-1) # Initialize variables to store the maximum scenic value visited = [False] * n max_scenic_value = -sys.maxsize def dfs(node, current_value): nonlocal max_scenic_value visited[node] = True current_value += scenic_values[node] max_scenic_value = max(max_scenic_value, current_value) for neighbor in graph[node]: if not visited[neighbor]: dfs(neighbor, current_value) visited[node] = False current_value -= scenic_values[node] # Call DFS for each node for i in range(n): dfs(i, 0) return max_scenic_value"},{"question":"John has a collection of books in his library. Each book is defined by its title, genre, and number of pages. John wants to organize his books in various ways so that he can easily find a book that matches certain criteria. You need to help John by writing a program that sorts his books according to different attributes. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of books in John\'s library. Each of the following n lines contains a string title, a string genre, and an integer pages separated by spaces — the title of the book, its genre, and its number of pages. The title and genre consist of alphanumeric characters and have lengths between 1 and 50. The number of pages (1 ≤ pages ≤ 2000) is a positive integer. The next line contains an integer q (1 ≤ q ≤ 3) — the number of queries. Each of the next q lines contains a string attribute — the attribute by which John wants the books to be sorted. The attribute can be \\"title\\", \\"genre\\", or \\"pages\\". Output For each query, print the titles of the books sorted by the specified attribute. If two books have the same value for the attribute, maintain their original relative order. Examples Input 4 TheHobbit Fantasy 310 WarAndPeace History 1225 1984 Dystopian 328 ToKillAMockingbird Fiction 281 2 title pages Output 1984 TheHobbit ToKillAMockingbird WarAndPeace TheHobbit ToKillAMockingbird 1984 WarAndPeace Input 3 HarryPotter Fantasy 223 TheGreatGatsby Classic 218 MobyDick Adventure 822 1 genre Output MobyDick TheGreatGatsby HarryPotter","solution":"def sort_books_by_attribute(books, queries): Sorts a list of books according to specified attributes. Parameters: books (list of dict): A list of dictionaries, each containing \'title\', \'genre\', and \'pages\'. queries (list of str): A list of attributes by which to sort the books. Returns: list of list: A list where each element is a list of book titles sorted according to one of the queries. results = [] for query in queries: if query == \\"title\\": sorted_books = sorted(books, key=lambda x: x[\'title\']) elif query == \\"genre\\": sorted_books = sorted(books, key=lambda x: x[\'genre\']) elif query == \\"pages\\": sorted_books = sorted(books, key=lambda x: x[\'pages\']) results.append([book[\'title\'] for book in sorted_books]) return results # Example usage: # books = [ # {\\"title\\": \\"TheHobbit\\", \\"genre\\": \\"Fantasy\\", \\"pages\\": 310}, # {\\"title\\": \\"WarAndPeace\\", \\"genre\\": \\"History\\", \\"pages\\": 1225}, # {\\"title\\": \\"1984\\", \\"genre\\": \\"Dystopian\\", \\"pages\\": 328}, # {\\"title\\": \\"ToKillAMockingbird\\", \\"genre\\": \\"Fiction\\", \\"pages\\": 281}, # ] # queries = [\\"title\\", \\"pages\\"] # print(sort_books_by_attribute(books, queries))"},{"question":"You are given a series of strings, and you need to determine the longest substring that is a palindrome for each string. A palindrome is a sequence of characters that reads the same forwards and backwards. Input: The first line contains an integer n, the number of test cases. Then the next n lines each contain a string s. Output: For each test case, output the longest palindromic substring of s. If there are multiple longest palindromic substrings, return the one that appears first. Constraints: 1 ≤ n ≤ 50 1 ≤ |s| ≤ 100 SAMPLE INPUT 2 babad cbbd SAMPLE OUTPUT bab bb","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in s. n = len(s) if n == 0: return \\"\\" start, max_length = 0, 1 # DP table indicating if s[i:j+1] is a palindrome dp = [[False] * n for _ in range(n)] # Every single character is a palindrome for i in range(n): dp[i][i] = True for end in range(1, n): for begin in range(end): if s[begin] == s[end]: if end - begin == 1 or dp[begin + 1][end - 1]: # Check for two chars or expand palindrome. dp[begin][end] = True current_length = end - begin + 1 if current_length > max_length: max_length = current_length start = begin return s[start:start + max_length] def solve(test_cases): results = [] for s in test_cases: results.append(longest_palindromic_substring(s)) return results"},{"question":"You have just joined a software company and are given a task to enhance the performance of the company\'s existing system. One particular module utilizes arrays for storing real-time data. Your task is to implement a function that processes the following operation efficiently: Given an array of integers, and a series of operations to perform on this array, you are to complete each operation and provide the required output. There are two types of operations: 1. Update operation: This operation updates the value at a specific index in the array. 2. Sum query operation: This operation returns the sum of the values between two specified indices, inclusive. Your objective is to handle these operations efficiently, ensuring that even for large arrays and a high number of operations, the overall performance remains optimal. # Input - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5), where `n` is the number of elements in the array and `q` is the number of operations. - The second line contains `n` integers, representing the initial values of the array. - Each of the next `q` lines contains three integers of the format: - `1 x y` for an update operation, which sets the value at index `x` (1-based index) to `y`. - `2 l r` for a sum query, which returns the sum of the elements from index `l` to index `r` (both 1-based indices). # Output - For each sum query operation, output the result on a new line. # Example Input ``` 5 4 1 2 3 4 5 2 1 3 1 3 10 2 1 3 2 2 5 ``` Output ``` 6 13 21 ``` # Explanation - The initial array is `[1, 2, 3, 4, 5]`. - The first operation queries the sum from index 1 to 3, which is `1+2+3 = 6`. - The second operation updates the value at index 3 to 10, so the array becomes `[1, 2, 10, 4, 5]`. - The third operation queries the sum from index 1 to 3 again, which is `1+2+10 = 13`. - The fourth operation queries the sum from index 2 to 5, which is `2+10+4+5 = 21`. # Constraints - 1 ≤ `n`, `q` ≤ 100,000 - 1 ≤ `value in array`, `x`, `y` ≤ 10^9 - 1 ≤ `l`, `r` ≤ `n`","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, value): while index <= self.size: self.tree[index] += value index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def process_operations(n, operations, array): fenwick_tree = FenwickTree(n) for i in range(1, n+1): fenwick_tree.update(i, array[i-1]) result = [] for operation in operations: if operation[0] == 1: _, x, y = operation current_val = array[x-1] update_val = y - current_val array[x-1] = y fenwick_tree.update(x, update_val) elif operation[0] == 2: _, l, r = operation result.append(fenwick_tree.query(r) - fenwick_tree.query(l-1)) return result"},{"question":"Given N stones placed on a straight line, each at distinct positions from 1 to N, you need to find the number of distinct possible configurations of stones remaining after performing the following operation any number of times: 1. Pick a stone at position i and place it at position j (1 ≤ j ≤ N and i ≠ j). Two configurations are considered distinct if there exists at least one position k (1 ≤ k ≤ N) such that one configuration has a stone at position k while the other does not. For example, if N = 3 and you start with stones at positions [1, 2, 3], you can move the stone from 1 to 2 or from 1 to 3, etc., leading to multiple possible configurations. Write a program to compute the number of distinct configurations for a given N. Input The input consists of a single integer N, which indicates the number of stones and positions. Constraints: 1 ≤ N ≤ 15 Output Output a single integer which is the number of distinct configurations of stones. Example Input 3 Output 12","solution":"import itertools def count_distinct_configurations(N): Returns the number of distinct configurations for N stones placed on N positions. # generate all permutations of stones for N positions positions = [i + 1 for i in range(N)] all_permutations = list(itertools.permutations(positions, N)) return len(all_permutations)"},{"question":"In a certain university, a teacher has to assign letter grades to students based on their individual test scores. The letter grades are defined as follows: - A: 90 - 100 - B: 80 - 89 - C: 70 - 79 - D: 60 - 69 - F: 0 - 59 Given a list of test scores, write a program to determine how many students received each letter grade. Input The first line of the input contains an integer n (1 ≤ n ≤ 100,000), representing the number of students. The second line contains n integers separated by space, each representing a student\'s test score (0 ≤ score ≤ 100). Output Print five integers on a single line separated by space: the number of students that received grades A, B, C, D, and F respectively. Example Input 8 85 92 88 74 56 79 100 63 Output 2 2 2 1 1","solution":"def count_grades(scores): Given a list of scores, returns the counts of grades A, B, C, D, and F. # Initialize counts for each letter grade counts = {\'A\': 0, \'B\': 0, \'C\': 0, \'D\': 0, \'F\': 0} for score in scores: if 90 <= score <= 100: counts[\'A\'] += 1 elif 80 <= score <= 89: counts[\'B\'] += 1 elif 70 <= score <= 79: counts[\'C\'] += 1 elif 60 <= score <= 69: counts[\'D\'] += 1 elif 0 <= score <= 59: counts[\'F\'] += 1 # Return the counts in the order of A, B, C, D, F return counts[\'A\'], counts[\'B\'], counts[\'C\'], counts[\'D\'], counts[\'F\'] # Example usage: # number_of_students = 8 # scores = [85, 92, 88, 74, 56, 79, 100, 63] # counts = count_grades(scores) # print(counts) # Output should be (2, 2, 2, 1, 1)"},{"question":"In the kingdom of Zog, the king wants to celebrate his birthday by hosting a grand feast. For this occasion, he has decided to distribute sweets to all the children in the kingdom. However, the king has a peculiar way of distributing sweets that must follow a certain pattern. The king has N children standing in a circle and he has M sweets to distribute to the children. The distribution starts from the 1st child and then proceeds to the next one sequentially. After giving one sweet to the last child in the circle, the king continues distribution from the 1st child again, and so on, until all sweets are distributed. The king wants to know which child will receive the last sweet. Input First line contains T, the number of test cases. Each of the next T lines contains two positive integers N and M. 1 <= T <= 1000 1 <= N, M <= 10^18 Output For each test case, output on a newline, the number of the child who will receive the last sweet. Example Input: 3 5 2 7 19 3 6 Output: 2 5 3 Explanation: For the first case, The children are standing in the positions: 1, 2, 3, 4, 5. Sweets are distributed as follows: - 1st child: 1 sweet - 2nd child: 1 sweet The 2nd child received the last sweet. For the second case, The children are standing in the positions: 1, 2, 3, 4, 5, 6, 7. Sweets are distributed as follows: - 1st child: 1 sweet - 2nd child: 2 sweets - 3rd child: 3 sweets - 4th child: 4 sweets - 5th child: 5 sweets - 6th child: 6 sweets The 5th child received the last sweet. For the third case, The children are standing in the positions: 1, 2, 3. Sweets are distributed as follows: - 1st child: 1 sweet - 2nd child: 2 sweets - 3rd child: 3 sweets The 3rd child received the last sweet.","solution":"def find_last_child(N, M): Finds the number of the child who will receive the last sweet. Parameters: N (int): The number of children in the circle. M (int): The number of sweets to distribute. Returns: int: The number of the child who will receive the last sweet. # The child who receives the last sweet can be found by (M - 1) % N + 1 return (M - 1) % N + 1 def last_sweets(T, cases): Processes multiple test cases for finding the last child who receives the sweet. Parameters: T (int): The number of test cases. cases (list of tuples): Each tuple contains two integers N and M. Returns: list of int: The results for each test case. results = [] for N, M in cases: results.append(find_last_child(N, M)) return results"},{"question":"A social media platform is collecting statistics about the messages posted by users. Each message is a string of characters, and the platform wants to know if it can be considered \\"positive\\". A message is considered positive if it contains more positive words than negative words. Positive words include \\"happy\\", \\"joy\\", \\"amazing\\", and \\"excited\\". Negative words include \\"sad\\", \\"angry\\", \\"pain\\", and \\"upset\\". The words are case insensitive. Help the platform determine whether each message is positive or not. Input The first line contains a single integer T ≤ 50, the number of test cases. T test cases follow. Each test case consists of a single string of length less than 200, containing spaces and alphanumeric characters. Output For each test case, output a single line: \\"POSITIVE\\" if the message is positive, and \\"NEGATIVE\\" if it is not. Example Input: 3 I am feeling very happy today! This is so sad and painful. What an amazing and exciting experience! Output: POSITIVE NEGATIVE POSITIVE","solution":"def determine_message_sentiment(message): positive_words = {\\"happy\\", \\"joy\\", \\"amazing\\", \\"excited\\"} negative_words = {\\"sad\\", \\"angry\\", \\"pain\\", \\"upset\\"} message_words = message.lower().split() positive_count = sum(word in positive_words for word in message_words) negative_count = sum(word in negative_words for word in message_words) return \\"POSITIVE\\" if positive_count > negative_count else \\"NEGATIVE\\" def determine_messages_sentiments(T, messages): results = [] for message in messages: results.append(determine_message_sentiment(message)) return results"},{"question":"Implement a function `isBalanced` that determines if a given string of brackets is balanced. A string of brackets is considered balanced if each type of opening bracket has a corresponding closing bracket in the correct order. The function should consider three types of brackets: 1. Parentheses: `()` 2. Square brackets: `[]` 3. Curly braces: `{}` Input - A single line with a string `s` of brackets. The length of the string should not exceed 100000 characters. Output - Return `True` if the string is balanced, and `False` otherwise. Examples Input ``` \\"()\\" ``` Output ``` True ``` Input ``` \\"([{}])\\" ``` Output ``` True ``` Input ``` \\"([)]\\" ``` Output ``` False ``` Input ``` \\"{([])}\\" ``` Output ``` True ``` Input ``` \\"{{[[(())]]}}\\" ``` Output ``` True ``` Input ``` \\"{[}\\" ``` Output ``` False ```","solution":"def isBalanced(s): Determines if a string of brackets is balanced. Args: s (str): A string containing only \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: bool: True if the string is balanced, False otherwise. stack = [] brackets = {\'(\': \')\', \'{\': \'}\', \'[\': \']\'} for char in s: if char in brackets: stack.append(char) elif char in brackets.values(): if not stack or brackets[stack.pop()] != char: return False return not stack"},{"question":"You are given an integer array and a constraint on the number of elements with specific characteristics that can be included in an optimal subarray. Your task is to find the length of the longest subarray that meets these criteria. Definitions: - An optimal subarray is a contiguous segment of the original array. - The constraint specifies the maximum number of elements that can be odd numbers within the chosen subarray. Write a function `longest_optimal_subarray(arr: List[int], k: int) -> int` that takes two arguments: - `arr`: A list of integers representing the original array. - `k`: An integer representing the maximum number of odd numbers allowed in the optimal subarray. The function should return the length of the longest subarray such that no more than `k` odd numbers are present in the selected subarray. # Input - `arr`: List of integers (1 ≤ len(arr) ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9) - `k`: Integer (0 ≤ k ≤ len(arr)) # Output - Integer representing the length of the longest subarray meeting the constraint. # Examples Example 1: ```python arr = [1, 2, 3, 4, 5] k = 2 print(longest_optimal_subarray(arr, k)) # Output: 4 ``` Explanation: The subarray `[2, 3, 4, 5]` contains two odd numbers and has length 4. Example 2: ```python arr = [4, 2, 6, 8] k = 1 print(longest_optimal_subarray(arr, k)) # Output: 4 ``` Explanation: The subarray `[4, 2, 6, 8]` contains zero odd numbers and has length 4. Example 3: ```python arr = [1, 3, 5, 7, 9] k = 0 print(longest_optimal_subarray(arr, k)) # Output: 0 ``` Explanation: There are no valid subarrays since every element is odd, but `k` is 0. # Notes: - Use sliding window or two pointers technique to solve efficiently.","solution":"def longest_optimal_subarray(arr, k): n = len(arr) left = 0 odd_count = 0 max_len = 0 for right in range(n): # Check if the current number is odd if arr[right] % 2 != 0: odd_count += 1 # If the number of odd numbers exceeds k, move the left pointer while odd_count > k: if arr[left] % 2 != 0: odd_count -= 1 left += 1 # Calculate the current length of the subarray [left, right] current_len = right - left + 1 if current_len > max_len: max_len = current_len return max_len"},{"question":"Petya loves palindromic numbers very much. A palindromic number is a number that remains the same when its digits are reversed. For example, numbers 121, 4774, 12321 are palindromic and numbers 123, 789, 4567 are not. Petya also loves prime numbers. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. For example, numbers 2, 3, 5, 7 are prime and numbers 4, 6, 8, 9 are not. Petya calls a number \\"palindromic prime\\" if it is both a palindromic number and a prime number. Check if the given number is a palindromic prime. Input The input consists of one line containing a positive integer n (1 ≤ n ≤ 10^6) — the number that needs to be checked. Output On the first line print \\"YES\\" if the given number is a palindromic prime. Otherwise, print \\"NO\\" (without the quotes). Examples Input 2 Output YES Input 131 Output YES Input 12 Output NO Input 9339 Output NO Note In the first sample, the number 2 is palindromic and also prime. In the second sample, the number 131 is a palindromic number and also prime. In the third sample, the number 12 is not palindromic. In the fourth sample, the number 9339 is palindromic but not prime.","solution":"def is_palindrome(n): Returns True if n is a palindrome, False otherwise. return str(n) == str(n)[::-1] def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindromic_prime(n): Returns \\"YES\\" if n is a palindromic prime number, \\"NO\\" otherwise. if is_palindrome(n) and is_prime(n): return \\"YES\\" return \\"NO\\""},{"question":"Students and educators often need to analyze trends in student grades to understand performance and identify areas for improvement. Given a list of students and their respective grades, you need to write a program to determine various aspects of class performance. The task involves analyzing grade records of students and performing specific calculations based on given queries. # Input The input consists of: 1. The first line contains an integer T, the number of test cases. 2. Each test case starts with an integer N, the number of students. 3. The next N lines each contain a student\'s name (a string without spaces) and their grade (an integer). 4. The following line contains an integer Q, the number of queries. 5. The next Q lines contain a query, which is one of the following: - \\"MAX_GRADE\\": Query to find and return the name of the student with the highest grade. If there are multiple students with the same grade, return the one whose name comes first lexicographically. - \\"MIN_GRADE\\": Query to find and return the name of the student with the lowest grade. If there are multiple students with the same grade, return the one whose name comes first lexicographically. - \\"AVERAGE_GRADE\\": Query to calculate and return the average grade of the class rounded down to the nearest integer. # Output For each query, output the result on a new line. # Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ Q ≤ 100 - Student names are strings of length 1 to 20 - Grades are integers between 0 and 100 # Example: Input ``` 2 3 Alice 78 Bob 85 Charlie 90 3 MAX_GRADE MIN_GRADE AVERAGE_GRADE 2 David 92 Eva 88 2 MIN_GRADE MAX_GRADE ``` Output ``` Charlie Alice 84 Eva David ``` Ensure your solution reads input from standard input and outputs results to standard output. Remember to handle the input and output efficiently to accommodate the given constraints.","solution":"def analyze_grades(test_cases): results = [] for case in test_cases: students = case[\'students\'] queries = case[\'queries\'] names_grades = sorted(students, key=lambda x: x[0]) sorted_by_grades_desc = sorted(names_grades, key=lambda x: -x[1]) sorted_by_grades_asc = sorted(names_grades, key=lambda x: x[1]) for query in queries: if query == \\"MAX_GRADE\\": results.append(sorted_by_grades_desc[0][0]) elif query == \\"MIN_GRADE\\": results.append(sorted_by_grades_asc[0][0]) elif query == \\"AVERAGE_GRADE\\": total_grades = sum(grade for name, grade in students) avg_grade = total_grades // len(students) results.append(str(avg_grade)) return results def process_input_output(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 students = [] for _ in range(N): name = data[index] grade = int(data[index + 1]) students.append((name, grade)) index += 2 Q = int(data[index]) index += 1 queries = [] for _ in range(Q): queries.append(data[index]) index += 1 test_cases.append({\'students\': students, \'queries\': queries}) results = analyze_grades(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": process_input_output()"},{"question":"Anna has a sequence of n integers. She wants to find a contiguous subsequence (or subarray) of this sequence such that the sum of the two largest numbers in this subsequence is maximized. To put it another way, she\'s interested in a subarray where the sum of its two largest values is as large as possible. You are tasked with helping Anna by writing a program to find the maximum possible sum of the two largest integers among all possible subarrays of the given sequence. Input The first line contains a single integer n (2 ≤ n ≤ 5·105) — the number of elements in the sequence. The next line contains n integers ai (1 ≤ ai ≤ 106) — the values of the sequence elements. Output In a single line print a single integer — the maximum possible sum of the two largest integers in any subarray of the sequence. Examples Input 6 1 2 3 4 5 6 Output 11 Input 5 9 1 5 3 8 Output 17 Input 4 10 20 10 20 Output 40","solution":"def max_sum_of_two_largest(n, sequence): Given a sequence of \'n\' integers, this function finds the maximum possible sum of the two largest integers in any contiguous subarray. max1, max2 = 0, 0 for num in sequence: if num > max1: max1, max2 = num, max1 elif num > max2: max2 = num return max1 + max2"},{"question":"Maya is designing a pathfinding algorithm for a robot in a warehouse. The warehouse can be represented as a grid of size n × m where each cell is either an empty cell or an obstacle. The robot can move up, down, left, or right by exactly one cell per move but cannot move diagonally or through obstacles. Given the starting and target positions of the robot, Maya wants to calculate the minimum number of moves required for the robot to reach the target position or determine if it’s impossible. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the size of the grid. The next n lines describe the warehouse grid. Each of them consists of m characters, where \'.\' denotes an empty cell and \'#\' denotes an obstacle. The following line contains two integers x_s and y_s (0 ≤ x_s < n, 0 ≤ y_s < m) — the starting position of the robot. The next line contains two integers x_t and y_t (0 ≤ x_t < n, 0 ≤ y_t < m) — the target position of the robot. Output Print a single integer — the minimum number of moves required for the robot to reach the target position or -1 if it\'s impossible. Examples Input 5 5 ..... ..#.. ..#.. ..#.. ..... 0 0 4 4 Output 8 Input 5 5 ..... # # # ..... 0 0 4 4 Output -1 Note In the first example, the robot can navigate through the grid with the minimum path: (0,0) → (0,1) → (0,2) → (0,3) → (0,4) → (1,4) → (2,4) → (3,4) → (4,4). In the second example, the target cell is completely blocked off by obstacles, making it impossible for the robot to reach its destination.","solution":"from collections import deque def minimum_moves(n, m, warehouse, start, target): # Initialize queue with the starting point queue = deque([((start[0], start[1]), 0)]) visited = set() visited.add((start[0], start[1])) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right while queue: (current_x, current_y), distance = queue.popleft() # Check if we have reached the target if (current_x, current_y) == (target[0], target[1]): return distance # Explore all possible directions for dx, dy in directions: new_x, new_y = current_x + dx, current_y + dy if 0 <= new_x < n and 0 <= new_y < m and warehouse[new_x][new_y] == \'.\' and (new_x, new_y) not in visited: queue.append(((new_x, new_y), distance + 1)) visited.add((new_x, new_y)) return -1 # Example usage: n, m = 5, 5 warehouse = [ \\".....\\", \\"..#..\\", \\"..#..\\", \\"..#..\\", \\".....\\" ] start = (0, 0) target = (4, 4) print(minimum_moves(n, m, warehouse, start, target)) # Output: 8"},{"question":"# Robotic Courier Pathfinding You are in charge of a robotic courier service operating within a grid-based city. The city is represented as an `m x n` grid where each cell is either empty (representing a street the robot can traverse) or contains an obstacle (e.g., a building that the robot cannot pass through). The robot needs to deliver a package from a start location to a target location in the least amount of time, accounting for obstacles. The robot can only move in four possible directions (up, down, left, right), and it takes 1 unit of time to move from one cell to another. Your task is to write a program that determines the minimum time required for the robot to deliver the package. If the target cannot be reached, the program should return `-1`. # Input Format The input consists of: 1. Two integers `m` and `n` (1 ≤ m, n ≤ 100) representing the dimensions of the city grid. 2. An `m x n` matrix of characters, where each character is either \'.\' (representing an empty cell) or \'#\' (representing an obstacle). 3. Two pairs of integers `start_x`, `start_y`, `target_x`, and `target_y` (0 ≤ start_x, start_y, target_x, target_y < max(m, n)) representing the coordinates of the start and target locations, respectively. # Output Format Output a single integer representing the minimum time required for the robot to reach the target location from the start location. If the target location cannot be reached, output `-1`. # Example Input ``` 5 5 ..... .#. ..#.. .#. ..... 0 0 4 4 ``` # Example Output ``` 8 ``` # Explanation The minimum path to deliver the package from (0,0) to (4,4) avoiding obstacles is: ``` 0,0 -> 1,0 -> 2,0 -> 3,0 -> 4,0 -> 4,1 -> 4,2 -> 4,3 -> 4,4 ``` # Additional Notes - The problem requires knowledge of pathfinding algorithms such as Breadth-First Search (BFS) or Dijkstra\'s algorithm. - Consider edge cases such as the start and target being the same location, or the target being completely surrounded by obstacles.","solution":"from collections import deque def min_time_to_deliver(m, n, grid, start_x, start_y, target_x, target_y): if not grid or not grid[0]: return -1 def is_valid(x, y): return 0 <= x < m and 0 <= y < n and grid[x][y] == \'.\' directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(start_x, start_y, 0)]) # (x, y, distance) visited = set((start_x, start_y)) while queue: x, y, dist = queue.popleft() if (x, y) == (target_x, target_y): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"In a small rural village, there is a unique water distribution system. The village is represented as an undirected graph with N houses and M bidirectional water pipes. Each house is represented as a node and each water pipe is represented as an edge connecting two nodes. The water pipes are of different diameters and each pipe can carry a limited amount of water, represented by an integer capacity. During peak hours, each house consumes a certain amount of water. The consumption is given as an integer array where the value at index i represents the water consumption of the ith house. Your task is to determine whether it is possible to distribute water to all the houses without exceeding the capacities of the pipes. Input - The first line contains two integers N (2 ≤ N ≤ 1000) and M (1 ≤ M ≤ 5000), the number of houses and water pipes respectively. - The next M lines each contain three integers u, v, and c (1 ≤ u, v ≤ N and 1 ≤ c ≤ 1000), which means there is a water pipe between house u and house v with capacity c. - The last line contains N integers, the water consumption of each house. Output If it is possible to meet all the water consumption requirements without exceeding any pipe\'s capacity, print \\"Possible\\". Otherwise, print \\"Impossible\\". Example Input 4 4 1 2 10 2 3 15 3 4 10 4 1 5 5 10 20 15 Output Impossible Input 3 3 1 2 10 2 3 15 3 1 10 5 5 5 Output Possible Explanation In the first example, the total water required exceeds the available pipe capacities, making it impossible to meet the demand. In the second example, the water requirement can be distributed within the capacities of the pipes.","solution":"def can_distribute_water(N, M, connections, consumption): from collections import defaultdict, deque graph = defaultdict(list) for u, v, c in connections: graph[u].append((v, c)) graph[v].append((u, c)) total_demand = sum(consumption) def bfs(): visited = [False] * (N + 1) queue = deque([(1, float(\'inf\'))]) visited[1] = True total_supply = 0 while queue: current, flow = queue.popleft() total_supply += min(flow, consumption[current-1]) for neighbor, capacity in graph[current]: if not visited[neighbor] and capacity > 0: visited[neighbor] = True queue.append((neighbor, min(flow, capacity))) return total_supply return \\"Possible\\" if bfs() >= total_demand else \\"Impossible\\""},{"question":"**Problem Statement:** You are given an array of integers and a positive integer `k`. Your task is to determine if there are two distinct indices `i` and `j` in the array such that `arr[i]` and `arr[j]` are both even numbers, and the absolute difference between `i` and `j` is at most `k`. **Input:** - The first line contains two integers `n` (the number of elements in the array) and `k`. - The second line contains `n` space-separated integers denoting the elements of the array. **Output:** - Print \\"YES\\" if such a pair exists, otherwise print \\"NO\\". **Examples:** Example 1: Input: ``` 5 2 2 3 4 6 8 ``` Output: ``` YES ``` Example 2: Input: ``` 4 1 1 3 5 7 ``` Output: ``` NO ``` Example 3: Input: ``` 6 3 1 2 3 4 6 5 ``` Output: ``` YES ``` **Notes:** - In Example 1, the even numbers are [2, 4, 6, 8]. Indices 0 and 2 have a difference of 2, which is equal to `k`, so the output is \\"YES\\". - In Example 2, there are no even numbers in the array, so the output is \\"NO\\". - In Example 3, the even numbers are [2, 4, 6]. Indices 1 and 3 have a difference of 2, which is less than or equal to `k`, so the output is \\"YES\\".","solution":"def has_even_index_pair_within_k(arr, k): Determine if there are two distinct indices i and j in the array such that arr[i] and arr[j] are both even numbers, and the absolute difference between i and j is at most k. :param arr: List of integers :param k: Integer, maximum allowed difference between indices :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\" even_indices = [i for i in range(len(arr)) if arr[i] % 2 == 0] for idx, i in enumerate(even_indices): for j in even_indices[idx + 1:]: if abs(i - j) <= k: return \\"YES\\" return \\"NO\\""},{"question":"Stacy is working on her final project for her Artificial Intelligence course. She has gathered an array of data representing some measurements that need to be categorized into clusters using a simple clustering algorithm. However, Stacy needs to know the difference between the largest and smallest clusters by size after the clustering is done. Stacy uses a method where a cluster is defined by grouping all numbers that are no more than K apart from any other number in the cluster. For instance, if K is 2, and the numbers are [1, 2, 5], we form two clusters: [1, 2] and [5]. Your task is to help Stacy by writing a program that receives the list of measurements, the threshold K, and determines the difference between the size of the largest and the smallest clusters formed. INPUT: The first line of input gives T, the number of test cases. For each test case, the first line gives K, the maximum difference allowed within a cluster. The second line gives the number of measurements N, followed by N integers specifying the measurements. OUTPUT: For each test case, print the difference between the size of the largest and the smallest cluster. CONSTRAINTS: 1 ≤ T ≤ 50 1 ≤ K ≤ 1000 1 ≤ N ≤ 1000 1 ≤ measurement ≤ 10000 SAMPLE INPUT: 2 2 4 1 3 5 7 3 5 3 10 15 20 2 SAMPLE OUTPUT: 1 3 Explanation: In the first test case, the clusters formed are [1, 3], [5, 7], with sizes 2 and 2. Hence, the difference is 0. In the second test case, the clusters formed are [2, 3, 5], [10], [15], and [20] with sizes 3, 1, 1, and 1 respectively. Hence, the difference is 2.","solution":"def find_cluster_diff(T, cases): results = [] for case in cases: K, measurements = case measurements.sort() clusters = [] current_cluster = [] for measurement in measurements: if not current_cluster or measurement - current_cluster[-1] <= K: current_cluster.append(measurement) else: clusters.append(current_cluster) current_cluster = [measurement] if current_cluster: clusters.append(current_cluster) cluster_sizes = [len(cluster) for cluster in clusters] max_size = max(cluster_sizes) min_size = min(cluster_sizes) results.append(max_size - min_size) return results"},{"question":"Given a string expression consisting of non-negative integers, addition (+) and multiplication (*) operators, and parenthesis, evaluate the value of the expression correctly accounting for normal mathematical precedence of the operators. You can assume the string expression is always valid. Input The input contains a single string expression S with length (1 ≤ |S| ≤ 30), which consists of digits (0-9), operators (+, *) and parenthesis (). Output Print the result of evaluating the expression. Examples Input \\"2+3*4\\" Output 14 Input \\"(2+3)*4\\" Output 20 Input \\"3+4*2/(1-5)**2\\" Output 3.5 Input \\"10+(2*3)\\" Output 16 Note In the first example, the expression is evaluated in the order 2 + (3 * 4) due to operator precedence, yielding 14. In the second example, the parenthesis alter the precedence causing (2 + 3) to be evaluated together first, resulting in 5 * 4 = 20. In the third example, the expression is evaluated as 3 + ((4 * 2) / (1 - 5) ** 2), resulting in 3 + 2 = 3.5. The fourth example again demonstrates that multiplication has precedence over addition, so the expression inside the parenthesis is evaluated first, making it 10 + 6 = 16.","solution":"def evaluate_expression(expr): Evaluates a mathematical expression given as a string. Supports +, *, and parentheses. try: result = eval(expr) except Exception as e: raise ValueError(\\"Invalid expression\\") from e return result"},{"question":"Given an array of integers, determine the number of unique values in the array. Constraints: * The array will have at most 100 elements. * Each element in the array will be an integer between -1000 and 1000 inclusive. Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Here, `n` is the number of elements in the array, and `a_1 a_2 ... a_n` are the elements of the array. Output Print the number of unique values in the array. Examples Input 5 1 2 2 3 4 Output 4 Input 6 -1 -1 0 1 2 2 Output 4","solution":"def count_unique_values(n, array): Returns the number of unique values in the array. return len(set(array)) # This function can be tested by verifying the count of unique values in the array is correct."},{"question":"Palindrome Permutation Checker A palindrome is a string that reads the same forward and backward. A permutation is a rearrangement of characters. Your task is to write a program that checks if any permutation of the given string is a palindrome. To be specific, a string is a palindrome permutation if it can be rearranged to form a palindrome. For instance, the string \\"civic\\" and \\"ivicc\\" can be rearranged to \\"civic\\" or \\"civic\\", which are palindromes. However, the string \\"hello\\" cannot be rearranged to form a palindrome. Your program should determine if a given string is a permutation of a palindrome. Ignore spaces and be case-insensitive. Input The input consists of several lines, each containing a string. The end of the input is indicated by a line containing a single period (\'.\'). Output For each string, print \\"yes\\" if it can be rearranged to form a palindrome, otherwise print \\"no\\". There should be no extra characters in the output. Sample Input Tact Coa Able was I ere I saw Elba No lemon no melon Hello . Sample Output yes yes yes no Example Input: Able was I ere I saw Elba hello banana . Output: yes no no","solution":"def is_palindrome_permutation(s): Determines if any permutation of the string can be arranged into a palindrome. Ignores spaces and is case-insensitive. s = s.replace(\\" \\", \\"\\").lower() char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 odd_count = 0 # A string can be rearranged as a palindrome if at most one character has an odd count for count in char_count.values(): if count % 2 != 0: odd_count += 1 return odd_count <= 1 def main(): import sys input = sys.stdin.read data = input().strip().split(\\"n\\") result = [] for line in data: line = line.strip() if line == \'.\': break if is_palindrome_permutation(line): result.append(\\"yes\\") else: result.append(\\"no\\") for res in result: print(res)"},{"question":"Paul has a sequence of n integers a_1, a_2, ..., a_n. He performs the following operation exactly once: 1. Choose any integer k such that 1 ≤ k ≤ n. 2. Select a subsequence s of the array a, such that s is an arithmetic progression. An arithmetic progression is a sequence of numbers such that the difference between the consecutive terms is constant. Paul wants to maximize the length of the subsequence s that he can get by choosing the optimal k. Can you help him? Input The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the sequence a. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). Output Print one integer: the maximum length of the subsequence s that Paul can get. Examples Input 5 3 7 11 15 19 Output 5 Input 6 1 10 20 30 25 50 Output 3 Input 4 5 7 10 12 Output 2 Note In the first example, the entire sequence is already an arithmetic progression with a common difference of 4. In the second example, the subsequence [1, 10, 20, 30] forms an arithmetic progression with a common difference of 10. In the third example, any two subsequent numbers can form an arithmetic progression with different common differences (e.g., [5, 7] with a difference of 2 or [10, 12] with a difference of 2).","solution":"def max_arithmetic_subsequence_length(n, a): if n == 1: return 1 max_len = 1 for i in range(n): for j in range(i + 1, n): d = a[j] - a[i] current_len = 2 last_value = a[j] for k in range(j + 1, n): if a[k] - last_value == d: current_len += 1 last_value = a[k] max_len = max(max_len, current_len) return max_len"},{"question":"Three friends, Alex, Bob, and Charlie have planned a movie night, and they decide to buy some snacks. Each of them has a list of favorite snacks that they absolutely love. They want to find out which snacks they all love so that they can buy those for the movie night. Your task is to help them by writing a function that finds the common snacks known to be loved by all three friends. Input The first line contains an integer T (1 ≤ T ≤ 100) denoting the number of test cases. Each test case consists of three lines: - The first line contains an integer N (1 ≤ N ≤ 100) followed by N space-separated strings representing the list of favorite snacks of Alex. - The second line contains an integer M (1 ≤ M ≤ 100) followed by M space-separated strings representing the list of favorite snacks of Bob. - The third line contains an integer K (1 ≤ K ≤ 100) followed by K space-separated strings representing the list of favorite snacks of Charlie. Output For each test case, print the snacks that all three friends love in lexicographical order. If there are no common snacks, print \\"None\\". Example Input: 2 3 popcorn chips soda 3 chips popcorn candy 4 popcorn chips candy pretzels 2 nachos pizza 3 burger pizza nachos 3 fries pizza nachos Output: chips popcorn nachos pizza Explanation Example case 1. The common snacks between Alex, Bob, and Charlie are \\"popcorn\\" and \\"chips\\". Arranged in lexicographical order, the result is \\"chips popcorn\\". Example case 2. The common snacks between Alex, Bob, and Charlie are \\"nachos\\" and \\"pizza\\". Arranged in lexicographical order, the result is \\"nachos pizza\\".","solution":"def common_snacks(T, test_cases): result = [] for i in range(T): alex_snacks = set(test_cases[i][0][1:]) bob_snacks = set(test_cases[i][1][1:]) charlie_snacks = set(test_cases[i][2][1:]) common = sorted(alex_snacks & bob_snacks & charlie_snacks) if common: result.append(\' \'.join(common)) else: result.append(\\"None\\") return result def process_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): alex = lines[index].split() bob = lines[index+1].split() charlie = lines[index+2].split() test_cases.append((alex, bob, charlie)) index += 3 return T, test_cases def formatted_output(output_list): return \'n\'.join(output_list)"},{"question":"A botanist is studying a new species of plants that have a unique way of growing and intertwining with each other. Each plant has a specific length and thickness, and the botanist has observed that a plant with length (L) and thickness (T) can intertwine with another plant with length (L\') and thickness (T\'), only if (L\' < L) and (T\' < T). The botanist has collected multiple sets of plants and wants to understand the maximum number of plants that can intertwine in a single intertwining chain from each set. Your task is to write a program that determines this for the botanist. # Input A sequence of multiple datasets is given as input. Each dataset represents a single set of collected plants and is formatted as: ``` p L1 T1 L2 T2 :: Lp Tp ``` - The first line gives the number of plants (p) ((p leq 100)). - Each of the following (p) lines gives the length (L) and thickness (T) of the (i)-th plant ((0 < L, T < 1000)). The end of the input is indicated by a single line of \\"0\\". # Output For each dataset, output the maximum number of plants that can intertwine in a single chain. # Example Input ``` 4 10 5 8 4 6 3 4 2 3 15 10 10 7 8 5 0 ``` Output ``` 4 3 ``` Write a function `max_intertwining_chain` to find the solution.","solution":"def max_intertwining_chain(datasets): results = [] def longest_chain(plants): plants.sort() dp = [1] * len(plants) for i in range(len(plants)): for j in range(i): if plants[j][0] < plants[i][0] and plants[j][1] < plants[i][1]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) if plants else 0 for plants in datasets: results.append(longest_chain(plants)) return results def parse_input(input_str): datasets = [] lines = input_str.strip().split(\\"n\\") idx = 0 while idx < len(lines): p = int(lines[idx]) if p == 0: break plants = [] for _ in range(p): idx += 1 length, thickness = map(int, lines[idx].split()) plants.append((length, thickness)) datasets.append(plants) idx += 1 return datasets"},{"question":"Warehouse Path Navigator In a warehouse, products are stored in aisles that can be navigated by a robotic system. The warehouse is represented as a grid, where each cell is either empty (\'.\') or contains an obstacle (\'#\'). A robot starts at the top-left corner of the warehouse (0, 0) and needs to reach the bottom-right corner (N-1, M-1). The robot can move up, down, left, or right but cannot move diagonally. It cannot move through cells with obstacles. Your task is to write a program to determine the minimum number of steps required for the robot to reach the bottom-right corner of the warehouse. If the robot cannot reach its destination, return -1. Limits * 1 ≤ N, M ≤ 1000 - Dimensions of the warehouse grid Input Read the following data from standard input. * The integers N and M are written on the first line. N represents the number of rows and M represents the number of columns. * The following N lines each contain a string of length M representing the grid layout. Output Output an integer representing the minimum number of steps for the robot to reach the bottom-right corner, or -1 if it is not possible. Input / output example Input example 1 3 3 ... .#. ... Output example 1 4 The robot can follow the path (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) requiring 4 steps. Input example 2 3 3 ... # ... Output example 2 -1 The path is blocked by obstacles, so the robot cannot reach the destination. Input example 3 2 5 ..... ... Output example 3 5 The robot can follow the path (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4) requiring 5 steps.","solution":"from collections import deque def min_steps_to_reach_end(N, M, grid): if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False for _ in range(M)] for _ in range(N)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited[0][0] = True while queue: row, col, steps = queue.popleft() if row == N-1 and col == M-1: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < N and 0 <= new_col < M and not visited[new_row][new_col] and grid[new_row][new_col] == \'.\': visited[new_row][new_col] = True queue.append((new_row, new_col, steps + 1)) return -1"},{"question":"Given a 2D matrix of dimensions M x N, you are required to rotate the matrix 90 degrees clockwise. For example, if the matrix is represented as follows: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` After rotating the matrix 90 degrees clockwise, it should be: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Write a Python function that takes an M x N integer matrix as input and returns the matrix rotated 90 degrees clockwise. Function Signature: ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: pass ``` **Constraints:** - The given matrix will contain only integers. - The dimensions M and N will satisfy 1 ≤ M, N ≤ 100. **Input:** - An integer M representing the number of rows. - An integer N representing the number of columns. - Followed by M lines each containing N integers representing the matrix. **Output:** - Return the rotated matrix as a list of lists. **Example:** Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Input: ``` 4 3 1 2 3 4 5 6 7 8 9 10 11 12 ``` Output: ``` [ [10, 7, 4, 1], [11, 8, 5, 2], [12, 9, 6, 3] ] ```","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates a given M x N matrix 90 degrees clockwise and returns the rotated matrix. Args: matrix: List[List[int]] - A 2D list representing the original matrix. Returns: List[List[int]] - The rotated matrix. # If the matrix is empty, directly return the empty matrix if not matrix or not matrix[0]: return [] M = len(matrix) N = len(matrix[0]) # Create an empty matrix to store the rotated result rotated = [[0] * M for _ in range(N)] for i in range(M): for j in range(N): rotated[j][M - 1 - i] = matrix[i][j] return rotated"},{"question":"Little Alex is fond of music and loves to collect music records. He prefers to listen to different genres each day to experience a variety of tunes. Recently, he got a list of music records, each tagged with a specific genre. Alex wants to curate a playlist that contains only unique genres and should be as long as possible to enjoy diverse music throughout the day. You are given a list of music records with their genres, and your task is to help Alex create the longest possible playlist containing only unique genres. Input format: The first line contains a single integer n, the number of music records in the list. The second line contains n space-separated strings, where each string represents the genre of the i-th music record. Output format: Print the length of the longest playlist that contains only unique genres. Constraints: 1 ≤ n ≤ 100 The length of each genre string will be between 1 and 50 characters, and all strings will be in lowercase. Example: Input: 7 rock pop jazz classical rock pop hip-hop Output: 5 Explanation: A possible longest playlist with unique genres could be: \\"rock\\", \\"pop\\", \\"jazz\\", \\"classical\\", \\"hip-hop\\", making a total of 5 unique genres.","solution":"def longest_unique_genre_playlist(n, genres): Find the length of the longest playlist that contains only unique genres. :param n: int, number of music records :param genres: list of strings, each string represents a genre :return: int, length of the longest playlist with unique genres # Use a set to store unique genres unique_genres = set(genres) # Return the number of unique genres return len(unique_genres)"},{"question":"Inverted Building Block Pattern In a programming competition, players are required to generate various geometric patterns. One of the challenges involves creating an inverted building block pattern using asterisks. The pattern is defined as follows: - The first row contains N asterisks. - The second row contains N-1 asterisks. - The third row contains N-2 asterisks. - This continues until the last row contains 1 asterisk. Write a program that generates this pattern for a given value of N. # Input The input is a single integer N (1 ≤ N ≤ 1000) representing the number of asterisks in the first row. # Output The output should consist of N lines. The ith line contains N-i+1 asterisks. Each line should contain the exact number of asterisks followed by a new line character. # Example Input ``` 5 ``` Output ``` ***** **** *** ** * ``` # Example Input ``` 3 ``` Output ``` *** ** * ``` Write a program to implement this inverted building block pattern.","solution":"def inverted_building_block_pattern(N): Generates an inverted building block pattern of asterisks. Parameters: N (int): Number of asterisks in the first row. Returns: List: A list of strings representing the pattern. pattern = [] for i in range(N, 0, -1): pattern.append(\'*\' * i) return pattern"},{"question":"You are given an initially empty list of integers. Your program should handle the following types of queries: 1. \\"1 x\\" — add the integer x to the list. 2. \\"2 k\\" — remove the k-th added integer from the list. It is guaranteed that the k-th item is still in the list when this query is made. 3. \\"3\\" — print the current maximum integer in the list. Input The first line of the input contains an integer n denoting the number of queries, (1 ≤ n ≤ 105). Each of the following lines contains a query in the format described above. All numbers in the input are integers and don\'t exceed 109 by their absolute value. Output For each query of the third type, print the current maximum integer in the list. Examples Input 7 1 5 1 3 3 2 1 3 1 7 3 Output 5 3 7","solution":"class CustomList: def __init__(self): self.list = [] self.added_numbers = [] def add(self, x): self.list.append(x) self.added_numbers.append(x) def remove(self, k): value_to_remove = self.added_numbers[k-1] self.added_numbers[k-1] = None self.list.remove(value_to_remove) def get_max(self): return max(self.list) if self.list else None def process_queries(queries): clist = CustomList() results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": clist.add(int(parts[1])) elif parts[0] == \\"2\\": clist.remove(int(parts[1])) elif parts[0] == \\"3\\": results.append(clist.get_max()) return results"},{"question":"You are a timeline analyst working for a company that analyzes trends in a high-traffic website. Your task is to write a program that identifies the most active users on the website based on their activities. The activity log of the website is provided in a specific format, and you need to process the log to determine how many activities each user performed and identify the users who performed the highest number of activities in each given period. Input The input consists of multiple data sets, each in the following format: d t1 id1 action1 t2 id2 action2 ... ti idi actioni ... tn idn actionn The first line of each data set contains an integer d (1 <= d <= 100), indicating the number of top active users to be reported. The following lines contain the activity log entries for a specific period. Each entry consists of a time ti (a string in the format \\"YYYY-MM-DD,HH:MM:SS\\"), a user id idi (a string of alphanumeric characters representing the user identifier), and an actioni (a string representing the action performed by the user). The entries are sorted in non-decreasing order of time ti. You may assume that n (number of log entries) is less than or equal to 10,000. A line with \\"0\\" represents the end of the input. Output For each data set, print the identification numbers of the top d active users in descending order of their activity counts, one in each line. If there are fewer than d users in the data set, print all the user ids sorted by their activity counts. If multiple users have the same number of activities, sort those users by their ids in alphabetical order. After each data set\'s output, print a blank line. Example Input 3 2023-03-01,12:00:00 user1 login 2023-03-01,12:05:00 user2 login 2023-03-01,12:10:00 user1 view 2023-03-01,12:15:00 user3 login 2023-03-01,12:20:00 user2 view 2023-03-01,12:25:00 user1 logout 2 2023-03-02,13:00:00 user4 login 2023-03-02,13:10:00 user5 login 2023-03-02,13:20:00 user6 login 2023-03-02,13:30:00 user4 view 2023-03-02,13:40:00 user5 view 2023-03-02,13:50:00 user6 view 2023-03-02,14:00:00 user4 logout 1 2023-03-03,14:00:00 user7 login 2023-03-03,14:05:00 user8 login 3 2023-03-04,15:00:00 user9 login 2023-03-04,15:05:00 user10 login 0 Output user1 user2 user3 user4 user5 user7 user10 user9","solution":"def find_most_active_users(datasets): from collections import defaultdict import heapq results = [] for dataset in datasets: if dataset == [\\"0\\"]: break # Read top d users count d = int(dataset[0]) log_entries = dataset[1:] activity_counts = defaultdict(int) for entry in log_entries: _, user_id, _ = entry.split(maxsplit=2) activity_counts[user_id] += 1 # Create a list of tuples (user_id, activity_count) user_activity_list = [(user_id, count) for user_id, count in activity_counts.items()] # Sort the user_activity_list by activity count (descending) and by user_id (alphabetical) for ties user_activity_list.sort(key=lambda x: (-x[1], x[0])) # Extract the top d users (or all users if d > len(user_activity_list)) top_users = user_activity_list[:d] results.append(\\"n\\".join([user_id for user_id, _ in top_users])) results.append(\\"\\") return \\"n\\".join(results).strip() # Example usage: datasets = [ [ \\"3\\", \\"2023-03-01,12:00:00 user1 login\\", \\"2023-03-01,12:05:00 user2 login\\", \\"2023-03-01,12:10:00 user1 view\\", \\"2023-03-01,12:15:00 user3 login\\", \\"2023-03-01,12:20:00 user2 view\\", \\"2023-03-01,12:25:00 user1 logout\\" ], [ \\"2\\", \\"2023-03-02,13:00:00 user4 login\\", \\"2023-03-02,13:10:00 user5 login\\", \\"2023-03-02,13:20:00 user6 login\\", \\"2023-03-02,13:30:00 user4 view\\", \\"2023-03-02,13:40:00 user5 view\\", \\"2023-03-02,13:50:00 user6 view\\", \\"2023-03-02,14:00:00 user4 logout\\" ], [ \\"1\\", \\"2023-03-03,14:00:00 user7 login\\", \\"2023-03-03,14:05:00 user8 login\\" ], [ \\"3\\", \\"2023-03-04,15:00:00 user9 login\\", \\"2023-03-04,15:05:00 user10 login\\" ], [\\"0\\"] ] print(find_most_active_users(datasets))"},{"question":"You are given an array of integers and you need to find the number of ways to partition the array into two non-overlapping subarrays such that the absolute difference between their sums is minimized. Input The first line contains an integer n (1 ≤ n ≤ 2000) – the size of the array. The second line contains n integers a_1, a_2, ..., a_n (-10^6 ≤ a_i ≤ 10^6) – the elements of the array. Output Print a single integer – the minimum possible absolute difference between the sums of the two subarrays. Examples Input 4 3 1 4 2 Output 0 Input 5 1 2 3 4 5 Output 1 Note In the first example, the array [3, 1, 4, 2] can be partitioned into [3, 4] and [1, 2], both having the sum 7, and thus the absolute difference is 0. In the second example, the array [1, 2, 3, 4, 5] can be partitioned into [1, 2, 3, 4] and [5] with sums 10 and 5, respectively, and the absolute difference is 1.","solution":"def min_abs_difference_partition(n, array): Given an array of integers, partition it into two non-overlapping subarrays such that the absolute difference between their sums is minimized. Returns the minimum possible absolute difference. total_sum = sum(array) half_sum = total_sum / 2 dp = {0} for num in array: next_dp = dp.copy() for curr_sum in dp: new_sum = curr_sum + num next_dp.add(new_sum) dp = next_dp min_difference = float(\'inf\') for s in dp: min_difference = min(min_difference, abs(total_sum - 2 * s)) return min_difference"},{"question":"In a galaxy far, far away, there are numerous star systems connected by a complex network of space routes. However, due to fuel constraints, spaceships are only able to travel a certain maximum distance before having to refuel. We need your help in solving a critical problem faced by interstellar travelers - finding the shortest route between two given star systems. Each star system is represented as a point in space with 3-dimensional coordinates (x, y, z). The distance between any two points can be calculated using the Euclidean distance formula. Given a list of coordinates representing star systems and the maximum distance a spaceship can travel without refueling, determine if it\'s possible to travel from a given start star system to a destination star system using a series of intermediate star systems and refueling as necessary. Input The input consists of: 1. n - the number of star systems (2 ≤ n ≤ 100) 2. maxDistance - the maximum distance a spaceship can travel without refueling (1 ≤ maxDistance ≤ 1000) 3. n lines each containing three integers representing the x, y, z coordinates of each star system (−10^3 ≤ x, y, z ≤ 10^3) 4. Two integers, start and end, representing the indices (1-based) of the start and destination star systems respectively. Output If it\'s possible to travel from the start system to the destination system, print \\"YES\\" (without quotes). Otherwise, print \\"NO\\" (without quotes). Examples Input 4 100 0 0 0 100 0 0 50 86 0 -30 100 100 1 4 Output NO Input 5 150 0 0 0 100 100 0 200 200 0 150 250 0 300 250 0 1 5 Output YES Explanation In the first example, the maximum distance a spaceship can travel is 100 units. Although the star systems are relatively close, no series of routes can connect the start and destination with the given constraint. In the second example, the maximum distance a spaceship can travel is 150 units. The route from (0,0,0) → (100,100,0) → (150,250,0) → (300,250,0) allows travel from the start to the destination within the fuel constraints, so the output is \\"YES\\".","solution":"import math def can_travel(n, maxDistance, coordinates, start, end): def euclidean_distance(point1, point2): return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2 + (point1[2] - point2[2]) ** 2) # Create graph adjacency list graph = {i: [] for i in range(n)} for i in range(n): for j in range(i + 1, n): distance = euclidean_distance(coordinates[i], coordinates[j]) if distance <= maxDistance: graph[i].append(j) graph[j].append(i) # BFS to check if we can reach from start to end start -= 1 end -= 1 queue = [start] visited = [False] * n visited[start] = True while queue: current = queue.pop(0) if current == end: return \\"YES\\" for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return \\"NO\\""},{"question":"An IT City firm uses a network monitoring tool to track data packet exchanges between servers. Each data packet has a unique identifier (ID) consisting of a string of characters. For efficient processing, they need to group packets by the length of their IDs and analyze the frequency of each length. Your task is to write a program to help accomplish this. Input The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of data packets. Each of the next n lines contains a string s (1 ≤ |s| ≤ 100) — the identifier of a data packet. Output Output each unique length of packet IDs followed by the number of packets of that length. The lengths must be listed in ascending order. Examples Input 5 abc a abcd ab abcde Output 1 1 2 1 3 2 4 1 5 1","solution":"def packet_id_lengths(packet_ids): Returns the frequency of packet ID lengths in ascending order. length_freq = {} for packet_id in packet_ids: length = len(packet_id) if length in length_freq: length_freq[length] += 1 else: length_freq[length] = 1 sorted_lengths = sorted(length_freq.items()) return sorted_lengths"},{"question":"A popular card game is played with a standard deck of 52 cards. Each card belongs to one of the four suits: hearts, diamonds, clubs, and spades, and has one of thirteen ranks: 2 through 10, Jack, Queen, King, and Ace. In this game, players draw cards one by one from the deck. Your task is to simulate a simplified version of the game to determine the remaining cards in the deck after a series of draws. Write a program that simulates drawing cards from the deck based on a series of draw operations and then prints out the list of remaining cards in the deck. Input The first line of input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case: - The first line contains an integer d (1 ≤ d ≤ 52) — the number of drawn cards. - The next d lines each contain a card in the format \\"Rank of Suit\\", where Rank is one of {2, 3, ..., 10, J, Q, K, A} and Suit is one of {hearts, diamonds, clubs, spades}. Output For each test case, print the remaining cards in the deck in the same format, sorted first by suit in the order hearts, diamonds, clubs, and spades, and then by rank in ascending order. Example Input 2 5 2 of hearts 3 of hearts 4 of hearts 5 of hearts 6 of hearts 3 A of spades K of spades Q of spades Output 7 of hearts 8 of hearts 9 of hearts 10 of hearts J of hearts Q of hearts K of hearts A of hearts 2 of diamonds 3 of diamonds 4 of diamonds 5 of diamonds 6 of diamonds 7 of diamonds 8 of diamonds 9 of diamonds 10 of diamonds J of diamonds Q of diamonds K of diamonds A of diamonds 2 of clubs 3 of clubs 4 of clubs 5 of clubs 6 of clubs 7 of clubs 8 of clubs 9 of clubs 10 of clubs J of clubs Q of clubs K of clubs A of clubs 2 of spades 3 of spades 4 of spades 5 of spades 6 of spades 7 of spades 8 of spades 9 of spades 10 of spades J of spades J of spades","solution":"def get_remaining_cards(t, test_cases): ranks = [\'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'J\', \'Q\', \'K\', \'A\'] suits = [\'hearts\', \'diamonds\', \'clubs\', \'spades\'] all_cards = [f\\"{rank} of {suit}\\" for suit in suits for rank in ranks] results = [] for i in range(t): d = test_cases[i][0] drawn_cards = test_cases[i][1] remaining_cards = [card for card in all_cards if card not in drawn_cards] results.append(remaining_cards) return results"},{"question":"A software development company wants to implement a spell check feature in their text editor. To accomplish this, they need a function to identify potential misspelled words in a given paragraph. A misspelled word is defined as a word that does not appear in a provided dictionary of correctly spelled words. Your task is to write a function that takes a paragraph of text and a list of correctly spelled words (dictionary) as input and returns all words in the paragraph that are not in the dictionary. The output should be a list of unique misspelled words in the order they first appear in the paragraph. * Target text: English text of 1024 characters or less, not including line breaks * Delimiters: Only spaces, periods, and commas * Words: Consider only alphanumeric characters, ignoring case * Dictionary: A case-insensitive list of correctly spelled words input 1. A paragraph of text consisting of delimiters and alphanumeric characters, given on one line (all half-width characters). 2. A list of correctly spelled words (dictionary). output A list of unique misspelled words in the order they first appear in the paragraph. Examples Input Text: The quick brown fox jumpd over the lazt dog. Dictionary: [\\"the\\", \\"quick\\", \\"brown\\", \\"fox\\", \\"jumped\\", \\"over\\", \\"lazy\\", \\"dog\\"] Output [\\"jumpd\\", \\"lazt\\"] Input Text: Speling correctly is very importent. Dictionary: [\\"spelling\\", \\"correctly\\", \\"is\\", \\"very\\", \\"important\\"] Output [\\"speling\\", \\"importent\\"]","solution":"import re def find_misspelled_words(paragraph, dictionary): Identifies and returns unique misspelled words in the order they appear in the paragraph. :param paragraph: A string containing the paragraph of text. :param dictionary: A list of correctly spelled words. :return: A list of unique misspelled words. # Normalize dictionary to lowercase correct_words = set(word.lower() for word in dictionary) # Extract words from paragraph words = re.findall(r\'bw+b\', paragraph.lower()) # Find misspelled words misspelled_words = [] seen_words = set() for word in words: if word not in correct_words and word not in seen_words: misspelled_words.append(word) seen_words.add(word) return misspelled_words"},{"question":"Given an array of integers, your task is to find any peak element. A peak element is an element that is strictly greater than its neighbors. For corner elements, we need to consider only one neighbor. Return the index of any peak element. Constraints: * 1 leq nums.length leq 1000 * -2^31 leq nums[i] leq 2^31 - 1 Input: * An integer n representing the length of the array. * An array of n integers. Output: * An integer representing the index of any peak element. Examples: Input: 3 1 2 3 Output: 2 Input: 5 1 2 1 3 5 Output: 1 Input: 1 1 Output: 0","solution":"def find_peak_element(nums): Returns the index of any peak element. A peak element is an element that is strictly greater than its neighbors. For corner elements, we need to consider only one neighbor. Args: nums : List[int] - the input array Returns: int - the index of any peak element n = len(nums) if n == 1: return 0 if nums[0] > nums[1]: return 0 if nums[n - 1] > nums[n - 2]: return n - 1 for i in range(1, n - 1): if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]: return i return -1 # in case no peak is found, which technically shouldn\'t happen"},{"question":"In a particular land, there is a game played on a number line ranging from 1 to N. The game is played in turns by two players starting with Player 1. Each player can move a token positioned at a current number `x` by replacing it with any divisor of `x` that is not `x` itself. The goal of the game is to move the token to the position 1. The player who cannot make a move loses. Input The first line contains a single integer t — the number of test cases (1 ≤ t ≤ 10^5). Each of the next t lines contains a single integer N (2 ≤ N ≤ 10^6). Output For each test case, output \\"First\\" (without the quotes) if the player who plays first will win given both players play optimally. Print \\"Second\\" (without the quotes) if the second player will win. Print the answers to different test cases on different lines in the order they are given in the input. Examples Input 3 2 3 4 Output First Second First Note In the first sample, the first player can move to 1 by taking the only divisor of 2 which is 1, and thus wins. In the second sample, the first player\'s only move is to take any divisor of 3 which all come back to 3 itself except 1, meaning the second player is always left with a winning move to 1. In the third sample, the first player can move to 2, and then regardless of the second player\'s move, they will win on their next move.","solution":"def game_outcome(N): Determines the outcome of the game for a given N. Returns \\"First\\" if the first player wins, \\"Second\\" if the second player wins. return \\"First\\" if N % 2 == 0 else \\"Second\\" def solve(t, cases): Solve multiple test cases of the game. Args: t: An integer, the number of test cases. cases: A list of integers, each representing the given N for that test case. Returns: A list of strings, each representing the outcome (\\"First\\" or \\"Second\\") for each test case. results = [] for N in cases: results.append(game_outcome(N)) return results"},{"question":"A robotics company is developing an autonomous delivery robot that navigates through a grid city. The city is represented as a grid of N by M cells. Some of these cells are empty, some contain buildings, and some contain roads. The robot can travel only through the roads. Each road cell is connected to its adjacent road cells horizontally or vertically, but not diagonally. The robot must deliver packages to various destinations in the city. Your task is to program the robot\'s pathfinding algorithm, which calculates the shortest path from the robot\'s starting position to the target destination, avoiding buildings (non-road cells). You are given the grid, the robot\'s starting position and the destination. The grid will be provided as a list of strings where \'R\' represents road cells, \'B\' represents building cells, \'S\' represents the starting position of the robot, and \'T\' represents the target position. Implement a function that, given the grid, starting position and target position, computes the shortest path from the robot\'s start to its destination. If there is no path, the function should return -1. The function should output the number of steps in the shortest path. Function Signature: ```python def shortest_path(grid: List[str], start: Tuple[int, int], target: Tuple[int, int]) -> int: ``` # Inputs: - grid: List of strings, each string representing a row in the grid. - start: Tuple of (row_index, col_index) for the starting position. - target: Tuple of (row_index, col_index) for the target position. # Outputs: - Return an integer of the shortest path in steps, or -1 if no path exists. # Constraints: - 1 ≤ N, M ≤ 100, where N is the number of rows and M is the number of columns in the grid. - The grid does not contain any characters other than \'R\', \'B\', \'S\', \'T\'. # Example: Input: ```python grid = [ \\"RRBRR\\", \\"RSBRR\\", \\"RRBRR\\", \\"RBBBR\\", \\"RRRRT\\" ] start = (1, 1) target = (4, 4) ``` Output: 8 Explanation: One possible shortest path (in steps) for the robot from the start to the target is: - Start at (1, 1) - Move to (0, 1) - Move to (0, 2) - Move to (0, 3) - Move to (1, 3) - Move to (2, 3) - Move to (3, 3) - Move to (4, 3) - Move to (4, 4) So the length of the path is 8 steps. Note: Ensure to validate edge cases where the start and target might be the same point, or where the grid is blocked off by buildings making the navigation to the target impossible.","solution":"from typing import List, Tuple from collections import deque def shortest_path(grid: List[str], start: Tuple[int, int], target: Tuple[int, int]) -> int: Computes the shortest path from the starting position to the target position in a given grid. Args: grid -- a list of strings representing rows in the grid. start -- tuple (row_index, col_index) representing starting position of the robot. target -- tuple (row_index, col_index) representing target position of the robot. Returns: Integer - the shortest path in steps or -1 if no path exists. rows = len(grid) cols = len(grid[0]) # Directions for moving up, down, left, and right directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Queue for BFS - each entry is (current_position, current_distance) queue = deque([(start, 0)]) # Set to keep track of visited cells visited = set() visited.add(start) while queue: (current_row, current_col), distance = queue.popleft() # Check if we have reached the target if (current_row, current_col) == target: return distance # Explore all possible directions for direction in directions: next_row, next_col = current_row + direction[0], current_col + direction[1] # Check if the next cell is within bounds and is a road if 0 <= next_row < rows and 0 <= next_col < cols and grid[next_row][next_col] in \'RT\': if (next_row, next_col) not in visited: visited.add((next_row, next_col)) queue.append(((next_row, next_col), distance + 1)) # If we exhaust the queue and do not find the target return -1"},{"question":"You are given a string containing characters \'a\' to \'z\'. You want to reorder the characters of the string so that no two adjacent characters are the same. Return any possible rearrangement of the string or return an empty string if no rearrangement exists that meets the requirement. Input The input consists of a single string which contains only lowercase alphabets (\'a\' to \'z\'). The length of the string will be at most 500. Output Print the rearranged string such that no two adjacent characters are the same. If no such rearrangement is possible, print an empty string. Examples Input aab Output aba Input aaab Output (empty string) Note In the first example, \\"aab\\" can be rearranged to \\"aba\\". In the second example, there is no way to rearrange \\"aaab\\" to meet the requirement, so the output is an empty string.","solution":"from collections import Counter import heapq def rearrange_string(s): Reorders the characters of the string so that no two adjacent characters are the same. Returns a rearranged string or an empty string if no valid rearrangement is possible. if not s: return \\"\\" # Count frequency of each character freq = Counter(s) # Use a max heap with negative counts for max-heap behavior max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) # Previous character initialized as none prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) # Append the character to the result result.append(char) # Since we used one occurrence of char, decrease the count if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update the previous character and count (convert count to positive) prev_count, prev_char = count + 1, char res_str = \'\'.join(result) # Check if rearranged string\'s length is same as original string\'s length return res_str if len(res_str) == len(s) else \\"\\""},{"question":"Yulia is interested in a new card game. She has a set of n cards, each card i has a positive integer value ai. The game consists of finding the maximum sum of non-adjacent cards. If no cards can be chosen without violating the non-adjacency rule, the maximum sum is 0. Yulia wonders what is the maximum sum she can get for different sets of card values. Your task is to write a program to help Yulia find the maximum sum of non-adjacent cards for each set of values she provides. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each test case is described in two lines: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of cards. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), the values of the cards. Output For each test case, print the maximum sum of non-adjacent cards. Examples Input 1 5 3 2 5 10 7 Output 15 Input 2 3 2 1 3 4 3 2 7 10 Output 5 13 Note In the first sample, Yulia can select cards with values 3, 10, and 7, which gives the sum 3 + 10 + 7 = 15. In the second sample, Yulia can choose the cards with values 2 and 3 for the first test case and cards 3 and 10 for the second test case.","solution":"def max_non_adjacent_sum(cards): Given a list of integers representing card values, this function returns the maximum sum of non-adjacent card values. if not cards: return 0 n = len(cards) if n == 1: return cards[0] dp = [0] * n dp[0] = cards[0] dp[1] = max(cards[0], cards[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + cards[i]) return dp[-1] def find_max_sums(test_cases): results = [] for n, cards in test_cases: results.append(max_non_adjacent_sum(cards)) return results # Example Usage: # test_cases = [(5, [3, 2, 5, 10, 7]), (3, [2, 1, 3]), (4, [3, 2, 7, 10])] # print(find_max_sums(test_cases)) # Output: [15, 5, 13]"},{"question":"Given an array of integers, your task is to determine if the array contains any triplets that sum up to a given target value. A triplet here refers to any three distinct elements in the array whose sum is equal to the target value. If such a triplet exists, return `True`, otherwise return `False`. Input Format: The input contains multiple test cases. The first line contains the number of test cases T. Each test case consists of two lines. The first line of each test case contains two integers N and target, where N is the number of elements in the array, and target is the desired sum of the triplet. The second line contains N space-separated integers, the elements of the array. Output Format: For each test case, output \\"True\\" if there exists a triplet that sums up to the given target value, otherwise output \\"False\\". Constraints: - 1 ≤ T ≤ 10^4 - 3 ≤ N ≤ 10^3 - -10^3 ≤ array[i] ≤ 10^3 - -10^3 ≤ target ≤ 10^3 SAMPLE INPUT 2 6 10 1 2 3 4 5 6 4 0 -1 0 1 2 SAMPLE OUTPUT True True Explanation: In the first test case, the triplet (1, 4, 5) sums up to 10. In the second test case, the triplet (-1, 0, 1) sums up to 0.","solution":"def has_triplet_sum(arr, target): Determines if there exists a triplet in the array that sums up to the target value. arr.sort() n = len(arr) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: triplet_sum = arr[i] + arr[left] + arr[right] if triplet_sum == target: return True elif triplet_sum < target: left += 1 else: right -= 1 return False def process_test_cases(test_cases): results = [] for case in test_cases: n, target, arr = case result = has_triplet_sum(arr, target) results.append(result) return results"},{"question":"Ravi works as an editor and has a series of articles (N) to review, each with a different priority level. His workload is represented as a list of tuples, each containing an article ID and its priority. However, he only has time to review K articles, and he wants to review the highest priority articles first. If two articles have the same priority, he reviews the one with the lower ID first. Help Ravi determine the order in which he should review the articles. Input Format: no_of_articles max_articles_to_review article_id priority_level (repeated N times) Output Format: article_id (repeated K times in review order) Constraints: 1 ≤ N ≤ 50 1 ≤ K ≤ N 1 ≤ article_id ≤ 1000 1 ≤ priority_level ≤ 100 SAMPLE INPUT 5 3 101 5 102 3 103 5 104 2 105 4 SAMPLE OUTPUT 101 103 105 Explanation The input specifies 5 articles with their respective priority levels. Ravi can review 3 articles, prioritizing by the highest priority levels first. In case of a tie in priority, articles with a lower ID are reviewed first. The order of review would be: Article 101 (priority 5), Article 103 (priority 5), and Article 105 (priority 4).","solution":"def review_order(no_of_articles, max_articles_to_review, articles): Determine the order in which Ravi should review the articles based on priority and ID. Args: no_of_articles (int): Number of articles. max_articles_to_review (int): Maximum articles Ravi can review. articles (list of tuples): Each tuple contains (article_id, priority_level). Returns: list: List of article IDs in the order Ravi should review them. # Sort the articles first by priority (descending) and then by ID (ascending) sorted_articles = sorted(articles, key=lambda x: (-x[1], x[0])) # Extract the article IDs for the top K articles review_list = [article[0] for article in sorted_articles[:max_articles_to_review]] return review_list # Example usage print(review_order(5, 3, [(101, 5), (102, 3), (103, 5), (104, 2), (105, 4)])) # Output: [101, 103, 105]"},{"question":"On the planet Zorg, a special keyboard is used for communication, and it looks quite different from the ones on Earth. Instead of the usual QWERTY layout, the Zorgian alphabet is mapped to a custom layout. Each key on the Zorgian keyboard produces a specific letter. Zayra, a scientist from Earth, needs to quickly type Zorgian messages sent by her colleagues on a Zorgian keyboard. However, she\'s only familiar with the Zorgian alphabet and not the keyboard layout. She needs a program to help her convert messages (which are given in the standard Latin alphabet) to the corresponding Zorgian alphabet characters using the given keyboard layout. Help Zayra by writing a program that reads the mapping of the Zorgian keyboard and converts a given message from the standard Latin alphabet to the Zorgian alphabet. # Input: 1. The first line contains a single integer n (1 ≤ n ≤ 26), which denotes the number of letters in the Zorgian alphabet. 2. The second line contains n distinct lowercase Latin characters which represent the standard Latin alphabet letters in order of their ASCII values (\'a\', \'b\', \'c\', ..., \'z\') mapped to the Zorgian letters. 3. The third line contains a string s (1 ≤ |s| ≤ 100,000), consisting of lowercase Latin characters, representing the message that Zayra received. # Output: Output a single string which is the converted message in the Zorgian alphabet. # Example: Input: ``` 5 fghij abcde ``` Output: ``` fghij ``` Input: ``` 10 zxcvbnmasd abcdefghij ``` Output: ``` zxcvbnmasd ``` # Note: - For the first example, the standard Latin alphabet characters \'a\', \'b\', \'c\', \'d\', \'e\' are mapped to \'f\', \'g\', \'h\', \'i\', \'j\' respectively on the Zorgian keyboard. - For the message \\"abcde\\", each character is replaced by its corresponding Zorgian character, resulting in \\"fghij\\".","solution":"def convert_to_zorgian(n, keyboard_mapping, message): Converts a message from Latin alphabet to Zorgian alphabet using the custom keyboard layout. Parameters: - n (int): Number of letters in the Zorgian alphabet. - keyboard_mapping (str): A string of length n where each character represents the Zorgian letter mapped to the Latin alphabet. - message (str): The message to be converted. Returns: - str: The converted message in the Zorgian alphabet. # Create a mapping from Latin alphabet to Zorgian alphabet mapping = {chr(97 + i): keyboard_mapping[i] for i in range(n)} # Convert the message converted_message = \'\'.join(mapping[char] for char in message) return converted_message"},{"question":"Matt is a software engineer working on a new feature for a mobile application. The feature involves displaying a dynamic list of tasks where each task has a priority level represented by an integer. Higher numbers indicate higher priority. When two tasks have the same priority, they should appear in the order they were added. Matt needs to implement a function to add tasks to the list and another function to return the list of tasks sorted by priority. Help him by writing the necessary code to achieve this. Your task is to implement a `TaskList` class with the following methods: - `add_task(description: str, priority: int)`: Adds a task with the given description and priority to the list. - `get_sorted_tasks() -> List[str]`: Returns a list of task descriptions sorted by priority in descending order. If two tasks have the same priority, they should appear in the order they were added. # Input The input consists of multiple lines. The first line contains an integer `q` (1 ≤ q ≤ 1000), the number of operations. The following `q` lines represent the operations, which can either be: - ADD `<description>` `<priority>`: Add a task with the given description and priority. - GET: Get the list of task descriptions sorted by priority. # Output For each `GET` operation, print the task descriptions sorted by priority on a single line, separated by commas. If there are no tasks, print an empty line. # Example Input ``` 5 ADD Buy groceries 2 ADD Wash car 5 GET ADD Learn coding 3 GET ``` Output ``` Wash car,Buy groceries Wash car,Learn coding,Buy groceries ``` # Note 1. In the first `GET` operation, \\"Wash car\\" appears before \\"Buy groceries\\" because it has a higher priority. 2. In the second `GET` operation, \\"Learn coding\\" appears after \\"Wash car\\" but before \\"Buy groceries\\" due to its intermediate priority.","solution":"from typing import List class TaskList: def __init__(self): self.tasks = [] def add_task(self, description: str, priority: int): self.tasks.append((priority, description)) def get_sorted_tasks(self) -> List[str]: # Sort tasks by priority (descending), keeping original order if priorities are the same sorted_tasks = sorted(self.tasks, key=lambda x: (-x[0], self.tasks.index(x))) return [task[1] for task in sorted_tasks]"},{"question":"In a land far away, there existed a mystical forest with magical animals. Each animal had a certain amount of mana that could be transferred to another animal, but only through direct connections. The forest was so organized that there was exactly one path connecting any pair of animals. You are given a list of pairs of animals indicating direct mana transfer capability and the amount of mana each one initially possesses. Your task is to calculate the maximum amount of mana that can be accumulated starting from any animal. Input The first line contains an integer n (2 ≤ n ≤ 100000) — the number of animals. Each of the next n lines contains two integers m_i (1 ≤ m_i ≤ 1000) representing the initial mana of the i-th animal. The following n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) indicating that animals u and v can transfer mana directly between each other. Output Print a single integer — the maximum amount of mana that can be accumulated starting from any animal. Examples Input 5 3 2 1 10 5 1 2 1 3 3 4 3 5 Output 21 Input 4 5 1 4 7 1 2 2 3 2 4 Output 17","solution":"from collections import defaultdict def max_mana(n, mana, connections): graph = defaultdict(list) for u, v in connections: graph[u-1].append(v-1) graph[v-1].append(u-1) def dfs(node, parent): current_mana = mana[node] for neighbor in graph[node]: if neighbor != parent: current_mana += dfs(neighbor, node) return current_mana max_mana_accumulated = 0 for i in range(n): max_mana_accumulated = max(max_mana_accumulated, dfs(i, -1)) return max_mana_accumulated # Example usage: n = 5 mana = [3, 2, 1, 10, 5] connections = [(1, 2), (1, 3), (3, 4), (3, 5)] print(max_mana(n, mana, connections)) # 21"},{"question":"Jamie loves exploring trees, particularly those with unique traversal properties. She is focusing on binary trees where every node contains a unique integer value from 1 to n. A binary tree is regarded as special if it satisfies the following conditions: * The tree contains exactly n nodes. * The sum of the path from the root to the node with the maximum value in the tree is an even number. * The in-order traversal of the tree produces a list where the product of the first and last elements is a prime number. Your task is to help Jamie construct any such special tree given the number of nodes. **Input** The first line of the input contains a single integer n (1 ≤ n ≤ 10^3) — the number of nodes in the tree. **Output** In the first line, output the sum of the path from the root to the node with the maximum value. In the next n lines, output the parent and child connections of the tree in the format p c, where p and c are integers representing the parent node and the child node, respectively. **Example** *Input* ``` 3 ``` *Output* ``` 2 1 2 1 3 ``` *Explanation* The tree: ``` 1 / 2 3 ``` The path from root (1) to the node with the maximum value (3) has the sum `1 + 3 = 4`, which is even. The in-order traversal [2, 1, 3] has the first and last product `2 * 3 = 6`, a prime product. Note: In-order traversal of a binary tree involves visiting the left subtree, the root, and then the right subtree and can be referred to on this (https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR)) page. Prime number definition remains the same as (https://en.wikipedia.org/wiki/Prime_number).","solution":"def construct_special_tree(n): Constructs a special binary tree with n nodes. def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True tree = [] if n == 1: # Single node tree print(1) # sum of path from root to the maximum node (1 itself) is even print(\\"\\") return # Create a left skewed binary tree to ensure sum of path from root to maximum node is even for i in range(1, n): tree.append((i, i + 1)) # Output the sum of the path from root to the node with maximum value path_sum = sum(range(1, n + 1)) print(path_sum) for p, c in tree: print(p, c)"},{"question":"You are given a string s consisting of lowercase English letters. A string is called beautiful if it can be obtained by deleting some (possibly zero) characters from `s` such that no two adjacent characters are the same. Your task is to determine if the given string s is already beautiful. If it is not, determine the minimum number of deletions required to make it beautiful. Input The input consists of a single line containing a string `s` (1 ≤ |s| ≤ 1000), where |s| denotes the length of the string. Output Print a single integer - the minimum number of deletions required to make the string beautiful. Example Input aab Output 1 Input aabb Output 2","solution":"def min_deletions_to_make_beautiful(s): Determines the minimum number of deletions required to make the string beautiful. Parameters: s (str): The input string consisting of lowercase English letters. Returns: int: The minimum number of deletions required. deletions = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: deletions += 1 return deletions"},{"question":"You are given an array of integers, denoting positions of people standing in a line. A person can only see the person immediately ahead of them if the difference in their heights is at least K units. Your task is to find the number of pairs of people where one person can see the other. Input The first line contains a single integer T, denoting the number of test cases. The first line of each test case contains a single integer N, denoting the number of people. The next line contains N integers, hi, denoting the height of the ith person in line. The next line contains a single integer K, the minimum height difference required for one person to see another. Output For each test case, print a single integer, the number of pairs where one person can see the person immediately ahead of them. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ hi ≤ 10^9 1 ≤ K ≤ 10^9 SAMPLE INPUT 2 5 1 3 2 5 4 2 4 2 2 2 2 1 SAMPLE OUTPUT 2 0 Explanation For the first test case, the valid pairs are (1, 3) and (2, 5) as the height differences are 2 and 3 respectively, which are both at least 2 units. For the second test case, no one can see the person immediately ahead of them as all heights are the same.","solution":"def count_visible_pairs(T, test_cases): results = [] for case in test_cases: N, heights, K = case count = 0 for i in range(N - 1): if abs(heights[i] - heights[i + 1]) >= K: count += 1 results.append(count) return results"},{"question":"Given a list of integers, determine the length of the longest subsequence that consists of consecutive integers, in sorted order. The consecutive numbers can be in any sequence within the subsequence. Constraints: * 1 leq n leq 10^5 * -10^6 leq arr[i] leq 10^6 Input: Input is given from Standard Input in the following format: n arr Where n is the number of elements in the list, and arr is a space-separated list of integers. Output: Print the length of the longest subsequence of consecutive integers. Examples: Input: 9 1 9 3 10 4 20 2 1 3 Output: 4 Input: 6 5 6 3 4 2 1 Output: 6","solution":"def longest_consecutive_subsequence(n, arr): Returns the length of the longest subsequence that consists of consecutive integers. if n == 0: return 0 num_set = set(arr) longest_streak = 0 for num in num_set: # Only look for the start of a streak if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak # Input Reading (for local testing & debugging): # n = int(input()) # arr = list(map(int, input().split())) # print(longest_consecutive_subsequence(n, arr))"},{"question":"A city transport system has multiple buses running between various stops. You are required to analyze the bus schedule and determine whether or not passengers can transfer from one bus to another without a wait of more than 15 minutes. If a passenger can make a transfer at every stop without having to wait more than 15 minutes, print \\"Transfer possible at every stop\\". Otherwise, print \\"Transfer not possible at every stop\\". Input format: The input starts with an integer N, the number of buses. For each bus, there will be multiple lines of schedules. Each schedule starts with an integer M indicating the number of stops, followed by M lines containing the stop times in the format HH:MM. Output format: A single line indicating whether transfers can be made at every stop within 15 minutes or not. Constraints: 2 ≤ N ≤ 10 1 ≤ M ≤ 50 Time will be given in 24-hour format (HH:MM) Example Input: 2 3 08:00 09:45 11:30 4 08:10 09:50 10:40 11:55 Example Output: Transfer possible at every stop Example Input: 2 2 07:00 08:30 2 07:50 10:10 Example Output: Transfer not possible at every stop Explanation: For the first example, passengers can transfer from bus 1 to bus 2 with less than or equal to 15 minutes wait time at every stop. For the second example, the wait time between transfers exceeds 15 minutes at some stops.","solution":"def can_transfer_in_15_minutes(bus_schedules): Analyses the bus schedules to determine if a transfer can be made at every stop within 15 minutes. Args: bus_schedules (list of list of str): A list containing schedules for each bus. Each schedule is a list of stop times in \'HH:MM\' format. Returns: str: \\"Transfer possible at every stop\\" or \\"Transfer not possible at every stop\\" based on the analysis. def time_difference(t1, t2): Calculates the time difference in minutes between two given times in \'HH:MM\' format. Args: t1 (str): First time in \'HH:MM\' format. t2 (str): Second time in \'HH:MM\' format. Returns: int: Difference in minutes between t1 and t2. h1, m1 = map(int, t1.split(\':\')) h2, m2 = map(int, t2.split(\':\')) return (h2 - h1) * 60 + (m2 - m1) num_buses = len(bus_schedules) for i in range(len(bus_schedules[0])): # Loop over each stop of the first bus stop_times = [] for schedule in bus_schedules: if i < len(schedule): stop_times.append(schedule[i]) for j in range(1, len(stop_times)): if time_difference(stop_times[j-1], stop_times[j]) > 15: return \\"Transfer not possible at every stop\\" return \\"Transfer possible at every stop\\""},{"question":"Alex is practicing his skills with strings. He needs your help to solve a problem involving string compression. Given a string consisting of lowercase English letters, Alex needs to compress it using the following rules: 1. Consecutive characters that are the same should be replaced by one occurrence of that character followed by the number of occurrences. 2. If the character appears only once consecutively, it should appear in the compressed string as is without the number. For example, the string \\"aabbccc\\" should be compressed to \\"a2b2c3\\". Input The first and only line contains a string of lowercase English letters. The length of the string doesn\'t exceed 1000 characters. Output Print a single line containing the compressed version of the string. Examples Input aabbccc Output a2b2c3 Input abcd Output abcd Input aaabbbcccaaa Output a3b3c3a3","solution":"def compress_string(s): if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) if count > 1: compressed.append(str(count)) count = 1 compressed.append(s[-1]) if count > 1: compressed.append(str(count)) return \\"\\".join(compressed)"},{"question":"Given a grid with n rows and m columns, you are supposed to navigate from the top-left cell to the bottom-right cell. You can only move right or down. However, some cells are blocked and cannot be entered. Determine the total number of distinct paths from the top-left to the bottom-right cell. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. The next n lines contain m integers each (either 0 or 1), where 0 represents a free cell and 1 represents a blocked cell. Output Print a single integer — the total number of distinct paths from the top-left to the bottom-right cell. If there is no such path, print 0. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 1 1 0 0 0 0 Output 0 Note In the first sample, there are two distinct paths from the top-left cell to the bottom-right cell: 1. Right → Right → Down → Down 2. Down → Down → Right → Right In the second sample, there is no possible path because the cells (1, 2) and (2, 2) are blocked.","solution":"def count_paths(n, m, grid): if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"A unique type of bracelet known as \\"HexaBracelet\\" is characterized by the property that its total bead count is always a multiple of 6. Each bead is either red (\'R\'), green (\'G\'), blue (\'B\'), yellow (\'Y\'), white (\'W\'), or black (\'K\'). Due to wear and tear, some beads have been lost, represented by the question mark \'?\'. Your task is to restore the bracelet such that the count of each bead type is as equal as possible. Assume that \'?\' can be replaced by any of the six types of beads and the number of occurrence of each bead in the HexaBracelet should ideally be the same or differ by at most 1 bead. Input The first line contains the integer n (6 ≤ n ≤ 300) — the length of the bracelet. The second line contains the string s of length n — the coded bracelet. It consists of characters \'R\', \'G\', \'B\', \'Y\', \'W\', \'K\', and \'?\'. Output If it is possible to restore the bracelet, print it. If there are multiple solutions, print any of them. If it is not possible, print three pound signs in a row: \\"#\\" (without quotes). Examples Input 12 R?G?BY??KW?B Output RGBYBYGKWKRB Input 6 KWBRGY Output KWBRGY Input 7 W??RGB? Output # Note In the first example, you can replace the question marks with appropriate beads such that the counts of each bead type are as equal as possible, for instance, the first \'?\' could be \'B\', the second \'?\' could be \'R\', the third \'?\' could be \'G\', and the last \'?\' could be \'R\'. In the second example, the bracelet is already complete with each bead varying by at most 1. In the third example, it\'s not possible to restore the bracelet since 7 is not a multiple of 6.","solution":"def restore_hexabracelet(n, s): Given a length n and a bracelet string s of length n, restores the bracelet by replacing \'?\' with the characters from \'R\', \'G\', \'B\', \'Y\', \'W\', \'K\' such that the count of each bead type is as equal as possible. if n % 6 != 0: return \\"#\\" beads = [\'R\', \'G\', \'B\', \'Y\', \'W\', \'K\'] counter = {bead: 0 for bead in beads} for char in s: if char in counter: counter[char] += 1 max_count = n // 6 result = [] idx = 0 def replace_question_mark(): nonlocal idx while counter[beads[idx]] >= max_count: idx += 1 counter[beads[idx]] += 1 return beads[idx] for char in s: if char == \'?\': result.append(replace_question_mark()) else: result.append(char) return \'\'.join(result)"},{"question":"A company needs to allocate workstations to employees. Each workstation has a capacity, which represents the maximum number of employees it can accommodate. You need to determine the minimum number of workstations required to accommodate all employees. Constraints * All values in input are integers. * 1 leq N leq 100 (number of employees) * 1 leq C leq 20 (capacity of each workstation) Input Input is given from Standard Input in the following format: N C Output Print an integer representing the minimum number of workstations required. Examples Input 10 3 Output 4 Input 25 5 Output 5 Input 7 2 Output 4","solution":"def min_workstations(N, C): Returns the minimum number of workstations required to accommodate all employees. Parameters: N (int): Number of employees C (int): Capacity of each workstation Returns: int: Minimum number of workstations required return (N + C - 1) // C"},{"question":"You are given an array of integers representing annual salaries of employees in a company. However, one of the salaries is missing due to a data entry error. The salaries follow a continuous range starting from a given minimum salary. Your task is to determine and output the missing salary. Input The first line of input contains T, the number of test cases. Each of the next T test cases is described as follows: - The first line contains two integers M and N, where M is the minimum salary and N is the number of employees. - The second line contains N-1 space-separated integers representing the salaries of the employees, excluding one missing salary. Output For each test case, output the missing salary. Constraints 1 ≤ T ≤ 50 0 ≤ M ≤ 10^5 1 ≤ N ≤ 10^5 The sum of all (N-1) salaries will fit in a 32-bit integer. Example Input: 2 50000 5 50000 50001 50003 50002 30000 4 30001 30002 30003 Output: 50004 30000 Explanation In the first example case, the salaries should be 50000, 50001, 50002, 50003, 50004. The missing salary is 50004. In the second example case, the salaries should be 30000, 30001, 30002, 30003. The missing salary is 30000.","solution":"def find_missing_salary(M, N, salaries): Finds the missing salary in a continuous range starting from a given minimum salary. Args: M: int - The minimum salary. N: int - The total number of employees. salaries: list of int - The list of N-1 integers representing the salaries. Returns: int - The missing salary. # Calculate the expected sum of the first N salaries starting from M expected_sum = (N * (2 * M + N - 1)) // 2 actual_sum = sum(salaries) return expected_sum - actual_sum def find_missing_salaries(test_cases): Process multiple test cases to find missing salaries. Args: test_cases: list of tuples. Each tuple contains two elements: - A tuple (M, N) where M is the minimum salary and N is the number of employees. - A list of N-1 integers representing the salaries. Returns: list of int - List of missing salaries for each test case. results = [] for (M, N), salaries in test_cases: results.append(find_missing_salary(M, N, salaries)) return results"},{"question":"You are given a binary tree where each node contains an integer value. Write a function to return the sum of the values of the deepest leaves in the binary tree. The deepest leaves are defined as the nodes at the maximum depth level in the binary tree. Your task is to traverse the tree, identify the deepest leaves, and compute their sum. # Function Signature ```python def deepestLeavesSum(root: TreeNode) -> int: ``` # Input - `root`: The root node of the binary tree. The `TreeNode` class is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Output - An integer representing the sum of the values of the deepest leaves. # Constraints - The number of nodes in the tree is in the range `[1, 10^4]`. - `-1000 <= Node.val <= 1000` # Example ```python # Example 1: # Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8] # 1 # / # 2 3 # / # 4 5 6 # / # 7 8 # Output: 15 (7 + 8) # Example 2: # Input: root = [1] # 1 # Output: 1 # Example 3: # Input: root = [1,2,3,4,5] # 1 # / # 2 3 # / # 4 5 # Output: 9 (4 + 5) ``` # Note You must consider all possible binary trees including ones with a single node or nodes with negative values. Plan your traversal such that it efficiently handles the maximum constraint of 10,000 nodes.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def deepestLeavesSum(root: TreeNode) -> int: if not root: return 0 queue = deque([root]) while queue: level_sum = 0 level_size = len(queue) for _ in range(level_size): node = queue.popleft() level_sum += node.val if node.left: queue.append(node.left) if node.right: queue.append(node.right) return level_sum"},{"question":"You are organizing a game tournament with M levels. In each level, players compete in pairs, and the loser of each match gets eliminated. The winner progresses to the next level, where the process repeats until a single champion remains. Each level can only proceed if there are an even number of players, as each player must have an opponent. Given the initial number of players P, determine the minimum number of players you need to invite initially such that a tournament with M levels can be completed while ensuring each level balances perfectly. Constraints * 1 leq M leq 10^{4} * 1 leq P leq 10^{9} * All input values are integers. Input Input is given from Standard Input in the following format: M P Output Print the minimum number of players needed to invite initially. Examples Input 3 7 Output 8 Input 4 9 Output 16","solution":"import math def min_players_for_tournament(M, P): Determines the minimum number of players needed to invite initially such that a tournament with M levels can be completed while ensuring each level balances perfectly. Parameters: M (int): Number of levels. P (int): Number of players. Returns: int: Minimum number of players needed to invite initially. if M < 1 or P < 1: return -1 # as a safeguard for unexpected inputs # Calculate the smallest power of 2 greater than or equal to P min_power_of_2 = 2 ** math.ceil(math.log2(P)) return min_power_of_2"},{"question":"**Call Center Automated Response System** You\'ve been hired by a call center to develop an automated response system. The system needs an algorithm to determine how long to wait before offering a service to a caller. The waiting times are determined by a pre-defined formula based on the time of day and the length of the queue. The waiting time W at a given time T (in hours) and queue length Q (number of people) is calculated as follows: - If 0 <= T < 12 (i.e., morning hours), W = 2 * Q + T - If 12 <= T < 18 (i.e., afternoon hours), W = Q + 3 * (T - 12) - If 18 <= T < 24 (i.e., evening hours), W = Q * (24 - T) Write a function `calculate_wait_time(T: int, Q: int) -> int:` to determine the waiting time under these conditions. **Input Format:** - An integer `T` representing the hour of the day (0 <= T < 24). - An integer `Q` representing the length of the queue (0 <= Q <= 1000). **Output Format:** - An integer representing the calculated waiting time `W`. **Constraints:** - 0 <= T < 24 - 0 <= Q <= 1000 **Sample Input:** ``` 10 5 ``` **Sample Output:** ``` 20 ``` **Explanation:** Since the input time `T` is within the morning hours (0 <= T < 12), the waiting time `W` is calculated as `2 * Q + T`. Thus, the result is `2 * 5 + 10 = 20`.","solution":"def calculate_wait_time(T: int, Q: int) -> int: Calculate the waiting time based on the given hour of the day and queue length. Parameters: T (int): The hour of the day (0 <= T < 24) Q (int): The length of the queue (0 <= Q <= 1000) Returns: int: The calculated waiting time if 0 <= T < 12: return 2 * Q + T elif 12 <= T < 18: return Q + 3 * (T - 12) elif 18 <= T < 24: return Q * (24 - T) else: raise ValueError(\\"T must be between 0 and 23 inclusive\\")"},{"question":"Petya is an avid traveler and is fascinated by rectangular shapes. One day while traveling through Byteland, he stumbled upon a peculiar field arranged neatly in the form of a grid. Each cell of the grid is a square plot, either occupied or empty. Petya realizes that the arrangement of these squares could be interesting to analyze. He noticed that while he walked through the field, he could observe several clusters of occupied squares. A cluster is defined as a group of occupied squares that are adjacent to each other, either horizontally or vertically. Petya wonders how many unique clusters exist in the field. Write a program that will take the grid representation of the field and determine the number of unique clusters of occupied squares. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. - Each of the next n lines contains m characters, either \'X\' or \'.\', denoting whether the respective square is occupied or empty. # Output - Print a single integer — the number of unique clusters of occupied squares. # Example Input ``` 4 5 XX..X X.... ..XXX ....X ``` Output ``` 3 ``` Note The grid in the example above can be visualized as follows: ``` XX..X X.... ..XXX ....X ``` There are three clusters of occupied squares: 1. The cluster formed by squares in the top-left (two \'XX\' and one \'X\' below). 2. The cluster formed by three \'X\' in the third row. 3. The single isolated \'X\' in the last column. Write an efficient algorithm to solve this problem, taking into consideration the possible size of the grid. Use standard input and output handling for reading and writing the input and output respectively.","solution":"def count_clusters(n, m, grid): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != \'X\': return grid[x][y] = \'.\' # Mark the cell as visited dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) clusters = 0 for i in range(n): for j in range(m): if grid[i][j] == \'X\': clusters += 1 dfs(i, j) return clusters # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [list(data[i + 2]) for i in range(n)] print(count_clusters(n, m, grid))"},{"question":"Alice loves playing with triangles. One day, she drew many triangles on graph paper by joining three non-collinear points with integer coordinates. She now wants to determine if these triangles are right-angled triangles. Can you help her? A triangle is right-angled if one of its angles is exactly 90 degrees. You are given the coordinates of the vertices of several triangles, and your task is to check if each triangle is right-angled. Input The first line contains an integer `t` (1 ≤ t ≤ 1000) — the number of triangles. Each of the next `t` lines contains six integers `x1, y1, x2, y2, x3, y3` (|x_i|, |y_i| ≤ 10^9) — the coordinates of the vertices of a triangle. Output For each triangle, print \\"YES\\" if the triangle is right-angled; otherwise, print \\"NO\\". Examples Input 3 0 0 3 0 0 4 0 0 1 1 2 2 1 1 4 1 1 5 Output YES NO YES Note In the first example, the triangle with vertices (0,0), (3,0), and (0,4) is right-angled (3, 4, 5 triangle). In the second example, the triangle with vertices (0,0), (1,1), and (2,2) is not right-angled as all points are collinear. In the third example, the triangle with vertices (1,1), (4,1), and (1,5) is right-angled (3, 4, 5 triangle but rotated). Use the properties of dot products and the Pythagorean theorem to determine right angles.","solution":"def is_right_angled_triangle(x1, y1, x2, y2, x3, y3): # function to calculate square of distance between two points def dist_sq(x1, y1, x2, y2): return (x2 - x1) ** 2 + (y2 - y1) ** 2 # distances squared d1 = dist_sq(x1, y1, x2, y2) d2 = dist_sq(x2, y2, x3, y3) d3 = dist_sq(x3, y3, x1, y1) # Check using pythagorean theorem if d1 + d2 == d3 or d2 + d3 == d1 or d3 + d1 == d2: return \\"YES\\" else: return \\"NO\\" def check_triangles(triangles): result = [] for triangle in triangles: result.append(is_right_angled_triangle(*triangle)) return result"},{"question":"Olivia is organizing a tournament where n participants compete in m different games. Each participant can achieve a certain number of points in each game. Olivia wants to find the maximum number of points a participant can achieve in any single game, and she also wants to know in which game they achieved this score. If there are multiple games where the maximum score is achieved, she needs the game with the smallest index. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), which are the number of participants and the number of games. Each of the next n lines contains m integers, where the j-th integer in the i-th line represents the points participant i achieved in game j. The points will be non-negative integers and will not exceed 10^4. Output Print a single line with two integers: the maximum points and the index of the game (1-based) where this maximum was achieved. If multiple games have the same maximum points, print the index of the lowest such game. Examples Input 4 3 10 20 30 40 15 20 25 35 10 5 10 35 Output 40 1 Input 3 5 5 10 20 10 5 1 2 3 4 5 20 30 10 50 60 Output 60 5 Note In the first sample test case, the highest points achieved is 40 and it occurs in the first game (index 1). In the second sample test case, the highest points achieved is 60 and it occurs in the fifth game (index 5).","solution":"def max_points_in_game(n, m, points): max_points = -1 max_game_index = -1 for i in range(m): for j in range(n): if points[j][i] > max_points: max_points = points[j][i] max_game_index = i + 1 return max_points, max_game_index # Example usage: # n = 4 # m = 3 # points = [ # [10, 20, 30], # [40, 15, 20], # [25, 35, 10], # [5, 10, 35] # ] # print(max_points_in_game(n, m, points)) # Output should be (40, 1)"},{"question":"Given a string `s` and a dictionary of words `wordDict`, identify if `s` can be segmented into a space-separated sequence of one or more dictionary words. The same word in the dictionary may be reused multiple times in the segmentation. You may assume the dictionary does not contain duplicate words. **Input:** - The first line contains the string `s` (1 ≤ |s| ≤ 300). - The second line contains a space-separated list of words `wordDict` (1 ≤ |wordDict| ≤ 1000, 1 ≤ |word length| ≤ 20). **Output:** - A single line containing \\"YES\\" if `s` can be segmented using the words in `wordDict`, otherwise \\"NO\\". **Example:** ``` Input: leetcode leet code Output: YES ``` ``` Input: applepenapple apple pen Output: YES ``` ``` Input: catsandog cats dog sand and cat Output: NO ```","solution":"def can_segment_string(s, wordDict): This function checks if the string s can be segmented into a space-separated sequence of one or more dictionary words. :param s: str, the string to be segmented :param wordDict: list, list of words as dictionary :return: str, \\"YES\\" if the string can be segmented, else \\"NO\\" word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"YES\\" if dp[len(s)] else \\"NO\\""},{"question":"A company uses security badges for access to different areas within the office. Each badge has a unique identifier and access level associated with it. Based on the access level, employees can access certain areas. An access control system reads the badge identifier and checks the access level to determine if the employee can enter a specific area. Create a program that determines if an employee can access a given area based on their badge identifier and the required access level for that area. input The input is provided in the following format: ``` n m id1 access_level1 id2 access_level2 ... idn access_leveln area_id required_access_level ``` The first line contains two integers n and m, separated by a space, where n is the number of badges and m is the number of areas. The following n lines each contain a badge identifier (id) and the access level associated with that badge, separated by a space. The last m lines each contain an area identifier and the required access level for that area. Output For each area, output the badge identifiers that can access the area, in a single line separated by a space. If no badge can access the area, output \\"No access\\". Example Input ``` 3 2 123 2 456 3 789 1 A 2 B 3 ``` Output ``` 123 456 456 ```","solution":"def access_control(input_data): Determines which badges have access to specific areas based on their access level. lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) # Parse badge information badges = {} for i in range(1, n+1): badge_id, access_level = lines[i].split() badges[badge_id] = int(access_level) result = [] # Parse area information and determine access for i in range(n+1, n+m+1): area_id, required_access_level = lines[i].split() required_access_level = int(required_access_level) # Find badge IDs that meet the access level requirement access_list = [badge_id for badge_id, access_level in badges.items() if access_level >= required_access_level] if access_list: result.append(\\" \\".join(access_list)) else: result.append(\\"No access\\") return \\"n\\".join(result)"},{"question":"Benjamin is going to capture magical creatures in the Enchanted Valley. There are n magical creatures and m bidirectional paths in the Enchanted Valley. Each creature is initially located at a different spot and can move along the paths to different places. Each creature has a certain capture requirement: a specific magical power threshold that needs to be met to capture that creature. Benjamin has a collection of magical artifacts that provide different amounts of magical power when used. Benjamin starts at location s and his primary objective is to capture as many creatures as possible. Benjamin can move freely along the paths, using the artifacts to meet or exceed each creature\'s capture requirement when he encounters it. Input The first line contains three integers n, m, and k (1 ≤ n ≤ 100, 0 ≤ m ≤ 200, 0 ≤ k ≤ 100), representing the number of creatures, the number of paths, and the number of magical artifacts Benjamin possesses, respectively. Each of the following n lines contains two integers c and p (1 ≤ c ≤ n, 1 ≤ p ≤ 100), representing the initial location and capture power requirement of a creature. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n), denoting a path between location u and location v. The next line contains k integers (1 ≤ ai ≤ 100), representing the magical power provided by each artifact Benjamin has. The last line contains a single integer s (1 ≤ s ≤ n), denoting Benjamin\'s starting position. Output Print an integer denoting the maximum number of creatures Benjamin can capture during his journey. Examples Input 3 3 5 1 10 2 20 3 5 1 2 2 3 1 3 15 10 5 25 5 1 Output 2 Input 4 3 4 1 30 2 40 3 25 4 10 1 2 2 3 3 4 20 15 30 5 1 Output 2 Note In the first example, Benjamin can start at location 1 and use artifacts with powers 15 and 10 to capture the first creature. Then he can move to location 2 or 3 and capture either of the creatures with the remaining artifacts, capturing 2 creatures in total. In the second example, Benjamin might start at location 1 and use artifacts with powers 20 and 30 to capture the creature at that location. Then, he can move to another location and capture one more creature with the remaining artifacts. The optimal strategy captures 2 creatures in total.","solution":"def capture_creatures(n, m, k, creatures, paths, artifacts, start): from collections import defaultdict, deque # Adjacency list for graph representation graph = defaultdict(list) for u, v in paths: graph[u].append(v) graph[v].append(u) # Sort artifacts in descending order to use the most powerful ones first artifacts.sort(reverse=True) # BFS to find the shortest path from start to any node def bfs(start): dist = {i: float(\'inf\') for i in range(1, n+1)} dist[start] = 0 queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if dist[neighbor] == float(\'inf\'): dist[neighbor] = dist[node] + 1 queue.append(neighbor) return dist # Distance from start to all other nodes using BFS distances = bfs(start) # Sort creatures based on their distance to the starting point creatures.sort(key=lambda x: distances[x[0]]) # Try to capture as many creatures as possible captured = 0 artifact_idx = 0 for loc, power_req in creatures: if artifact_idx >= len(artifacts): break if artifacts[artifact_idx] >= power_req: captured += 1 artifact_idx += 1 return captured"},{"question":"You are tasked with designing a software system to manage the energy consumption of a smart home. This smart home has multiple devices, each consuming varying amounts of energy over time. Each device has a unique identifier and a list of hourly energy consumption records. Your objective is to write a program to analyze the energy consumption data and find out the device that consumed the highest amount of energy in a given time range. If two devices have the same consumption, choose the one that comes first in the list. **Input** The input consists of multiple test cases. Each test case begins with three integers, n (the number of devices, where 1 ≤ n ≤ 100), t1 (the start hour of the time range, where 0 ≤ t1 < 24), and t2 (the end hour of the time range where 0 ≤ t2 < 24 and t1 ≤ t2). The next n blocks describe the devices. Each block starts with a single line containing a device ID (a string of up to 10 characters) and an integer m (the number of hours for which the energy consumption is recorded, where 1 ≤ m ≤ 24). The following m lines each contain an integer indicating the energy consumption in watt-hours for that hour. The last test case is followed by a line containing three zeros. **Output** For each test case, output a single line indicating the ID of the device that consumed the most energy in the given time range. **Example** Input ``` 2 0 3 Device1 4 25 30 10 5 Device2 4 20 15 40 10 3 9 11 DeviceA 12 5 10 20 25 30 35 40 45 50 55 60 65 DeviceB 12 10 20 30 40 50 60 70 80 90 100 110 120 DeviceC 12 15 25 35 45 55 65 75 85 95 105 115 125 0 0 0 ``` Output ``` Device2 DeviceC ```","solution":"def find_highest_consumption_device(test_cases): results = [] for test_case in test_cases: n, t1, t2 = test_case[0] devices = test_case[1] max_energy = -1 max_device_id = None for device_id, consumptions in devices: total_energy = sum(consumptions[t1:t2+1]) if total_energy > max_energy: max_energy = total_energy max_device_id = device_id results.append(max_device_id) return results def parse_input(input_data): lines = input_data.split(\'n\') test_cases = [] i = 0 while i < len(lines): line = lines[i].strip() if line == \\"0 0 0\\": break n, t1, t2 = map(int, line.split()) devices = [] for _ in range(n): i += 1 device_line = lines[i].strip().split() device_id = \' \'.join(device_line[:-1]) m = int(device_line[-1]) consumptions = [] for _ in range(m): i += 1 consumptions.append(int(lines[i].strip())) devices.append((device_id, consumptions)) test_cases.append(((n, t1, t2), devices)) i += 1 return test_cases"},{"question":"You have a rectangular grid of size n x m. Each cell in the grid can either be empty, or contain an obstacle, represented by \'1\'. An empty cell is represented by \'0\'. You want to find the largest square containing only 0\'s and return its area. Write a function `maximalSquare` that takes a list of strings `grid` as input and returns an integer representing the area of the largest square containing only 0\'s. # Function Signature ```python def maximalSquare(grid: List[str]) -> int: ``` # Input - A list of strings `grid` of length `n` (1 ≤ n, m ≤ 300), where each string has length `m` and only contains \'0\'s and \'1\'s. # Output - An integer representing the area of the largest square containing only 0\'s. # Examples Example 1 ```python grid = [ \\"10100\\", \\"10111\\", \\"11111\\", \\"10010\\" ] assert maximalSquare(grid) == 1 ``` Example 2 ```python grid = [ \\"1101\\", \\"1101\\", \\"1111\\" ] assert maximalSquare(grid) == 1 ``` Example 3 ```python grid = [ \\"0000\\", \\"0000\\", \\"0000\\" ] assert maximalSquare(grid) == 9 ``` # Explanation To solve this problem, consider using dynamic programming: 1. Initialize a 2D array `dp` where `dp[i][j]` represents the side length of the largest square whose bottom-right corner is the cell (i, j). 2. Start populating `dp` array such that for each cell `grid[i][j]`, if it\'s \'0\', then compute the size of the largest square by considering the minimum of three adjacent squares: `dp[i-1][j]`, `dp[i][j-1]`, and `dp[i-1][j-1]`. 3. Update the maximum size of the square found during the process. 4. Finally, return the square of the maximum size found as the result.","solution":"from typing import List def maximalSquare(grid: List[str]) -> int: if not grid: return 0 n = len(grid) m = len(grid[0]) # Initialize a 2D dp array with zeroes dp = [[0] * m for _ in range(n)] max_side_length = 0 for i in range(n): for j in range(m): if grid[i][j] == \'0\': if i == 0 or j == 0: dp[i][j] = 1 # Edge case for first row or first column else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length * max_side_length"},{"question":"A farmer has a rectangular field of dimensions MxN meters. He wants to cover the entire field with square tiles. However, he wants to use the least number of tiles possible, and all the tiles need to be of the same size. Each tile should cover a square field of kxk meters. Your task is to determine the minimum number of tiles required to cover the entire field without cutting any tiles. Input: The first line of input contains T, the number of test cases. Each of the next T lines contains two integers, M and N, which represent the dimensions of the field in meters. Output: For each test case, output the minimum number of tiles needed to cover the field in a single line. Constraints: 1 ≤ T ≤ 10^5 1 ≤ M, N ≤ 10^9 SAMPLE INPUT: 2 6 4 7 5 SAMPLE OUTPUT: 6 35","solution":"import math def minimum_tiles_to_cover_field(T, dimensions): results = [] for dimensions in dimensions: M, N = dimensions k = math.gcd(M, N) # Find the largest possible square tile size min_tiles = (M // k) * (N // k) results.append(min_tiles) return results"},{"question":"Given a string `s` of lowercase English letters and a list of words `words`, find the number of words that are subsequences of `s`. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input The first line contains the string `s` (1 ≤ |s| ≤ 100). The second line contains an integer `n` (1 ≤ n ≤ 1000), indicating the number of words. The following `n` lines contain one word per line. Each word consists of lowercase English letters and has length at most 50. Output Print the number of words from the list `words` that are subsequences of the string `s`. Examples Input abpcplea 3 ale apple monkey Output 2 Input abcdef 5 a b cd abc abcdef Output 5 Input xyz 4 xzy xy yz zxy Output 2 Note In the first example, the words \\"ale\\" and \\"apple\\" are both subsequences of \\"abpcplea\\", while \\"monkey\\" is not. In the second example, all five words are subsequences of \\"abcdef\\". In the third example, \\"xy\\" and \\"yz\\" are subsequences of \\"xyz\\", while \\"xzy\\" and \\"zxy\\" are not because they require a rearrangement of characters.","solution":"def is_subsequence(s, word): Check if word is a subsequence of string s. it = iter(s) return all(char in it for char in word) def count_subsequences(s, words): Count how many words in the list are subsequences of s. return sum(1 for word in words if is_subsequence(s, word)) def main(input_str): lines = input_str.strip().split(\'n\') s = lines[0] n = int(lines[1]) words = lines[2:2+n] return count_subsequences(s, words)"},{"question":"Write a function that simulates an online ticket booking system. The program should support the following operations: 1. Query the availability of a ticket for a specific event. 2. Book a ticket for an event. You will be given `n`, the number of events, and initially, the ticket availability for each event is zero. There are two types of queries to manipulate the ticket booking system: * `book(e, t)`: Books `t` tickets for event `e`. * `available(e)`: Checks how many tickets are available for event `e`. Each event can have a maximum of 10,000 tickets booked cumulatively. Constraints: * 1 ≤ e ≤ 1000 * 1 ≤ t ≤ 10,000 The program should handle up to 50,000 queries. Input ``` n q query1 query2 ... queryq ``` The first line contains an integer `n` representing the number of events. The second line contains an integer `q` representing the number of queries. The next `q` lines contain either a book or available query. Output For each available query, print the number of available tickets for the specified event. Example Input ``` 3 7 book 1 100 book 2 200 available 1 available 2 book 1 50 available 1 available 3 ``` Output ``` 100 200 150 0 ```","solution":"class TicketBookingSystem: def __init__(self, n): self.events = [0] * n def book(self, e, t): if self.events[e-1] + t <= 10000: self.events[e-1] += t else: self.events[e-1] = 10000 def available(self, e): return self.events[e-1] def run_ticket_booking_system(n, queries): system = TicketBookingSystem(n) results = [] for query in queries: parts = query.split() if parts[0] == \\"book\\": e, t = int(parts[1]), int(parts[2]) system.book(e, t) elif parts[0] == \\"available\\": e = int(parts[1]) results.append(system.available(e)) return results"},{"question":"Cynthia is a student at the University and she likes to experiment coding in her free time. One fine day, she comes up with an interesting problem. Given a list of positive integers, she wants to determine the smallest positive integer that is missing from the list. However, since she\'s interested in efficiency, she\'s looking for an algorithm that can do this in linear time and uses constant space. Can you help her? Input The first line contains a single integer `n` (1 ≤ n ≤ 1000000) — the length of the list. The second line contains `n` space-separated positive integers — the elements of the list. Each integer is guaranteed to be between 1 and 1000000 (inclusive). Output Print a single integer — the smallest positive integer that is missing from the list. Examples Input 5 1 2 0 -1 5 Output 3 Input 3 1 2 3 Output 4 Input 8 3 4 -1 1 9 7 8 2 Output 5 Note In the first example, the list is {1, 2, 0, -1, 5}. - The smallest positive integer missing from the list is 3. In the second example, the list is {1, 2, 3}. - The smallest positive integer missing from the list is 4. In the third example, the list is {3, 4, -1, 1, 9, 7, 8, 2}. - The smallest positive integer missing from the list is 5.","solution":"def smallest_missing_positive(nums): Returns the smallest positive integer that is missing from the list. This function runs in linear time and uses constant space. n = len(nums) # Place each number in its right place (i.e., 1 at index 0, 2 at index 1, ...) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: correct_pos = nums[i] - 1 nums[i], nums[correct_pos] = nums[correct_pos], nums[i] # Find the first place where the number is not the correct one for i in range(n): if nums[i] != i + 1: return i + 1 # If all positions are correct, then the smallest missing number is n + 1 return n + 1"},{"question":"You are given a city represented as a grid with R rows and C columns. Each cell in the grid can either be free (\'.\') or contain a building (\'B\'). A person starts at cell (S_r, S_c) and wants to reach cell (T_r, T_c). The person can only move to an adjacent cell (left, right, up, or down) and only through free cells. Your task is to determine whether there is a path from the starting cell to the target cell. If there is a path, also determine the minimum number of steps needed to reach the target cell. Constraints: * 1 leq R, C leq 1000 * 1 leq S_r, S_c, T_r, T_c leq R, C * The grid will contain at least two cells and will always have at least one free cell. Input Input is given from Standard Input in the following format: R C S_r S_c T_r T_c grid grid: The next R lines each contain a string of length C, representing the grid. Output Print \\"YES\\" followed by the minimum number of steps, if a path exists. Otherwise, print \\"NO\\". Examples Input 5 5 1 1 5 5 ..... .B... ..B.. B.... ..... Output YES 8 Input 3 3 1 1 3 3 .B. B.B .B. Output NO","solution":"from collections import deque def is_path_exists(R, C, Sr, Sc, Tr, Tc, grid): Sr, Sc, Tr, Tc = Sr - 1, Sc - 1, Tr - 1, Tc - 1 if grid[Sr][Sc] == \'B\' or grid[Tr][Tc] == \'B\': return \\"NO\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(Sr, Sc)]) visited = set([(Sr, Sc)]) steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == (Tr, Tc): return f\\"YES {steps}\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) steps += 1 return \\"NO\\""},{"question":"You are working as a software engineer at a small tech company. The product you are working on involves performing various operations on a large dataset of integers, and one of the frequent tasks is finding the number of unique elements within a subarray. Your task is to implement a system that can efficiently handle these queries on the dataset. Specifically, you need to write a program that processes multiple queries, each of which asks for the number of unique elements in a specified subarray of the given dataset. Input The first line of input contains two integers n (1 ≤ n ≤ 10^5) and q (1 ≤ q ≤ 10^5), where n is the number of elements in the dataset and q is the number of queries. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the elements of the dataset. The following q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n), representing the inclusive range of indices for the subarray query. Output For each query, output the number of unique elements in the specified subarray. Examples Input 6 3 1 2 1 3 4 3 1 3 2 4 1 6 Output 2 3 4 Input 5 2 5 5 5 5 5 1 5 2 3 Output 1 1 Explanation For the first example: - Query [1, 3] corresponds to the subarray [1, 2, 1], which has 2 unique elements: 1 and 2. - Query [2, 4] corresponds to the subarray [2, 1, 3], which has 3 unique elements: 2, 1, and 3. - Query [1, 6] corresponds to the entire array [1, 2, 1, 3, 4, 3], which has 4 unique elements: 1, 2, 3, and 4. For the second example: - Both queries correspond to subarrays that consist of same elements, hence have only 1 unique element.","solution":"def count_unique_elements(n, q, array, queries): Given the array and queries, return a list of unique element counts for each query. Args: n (int): Number of elements in the dataset. q (int): Number of queries. array (list of int): The dataset. queries (list of tuples): List of tuples where each tuple contains two integers l and r. Returns: list of int: Unique element counts for each query. results = [] for l, r in queries: subarray = array[l-1:r] unique_elements = len(set(subarray)) results.append(unique_elements) return results"},{"question":"**Problem Statement:** You are given an array of integers where each element represents the height of a building in an urban skyline. The skyline is composed in such a way that each building is on a 1 unit wide plot and the buildings may vary in height. Your task is to find the largest rectangle containing only 1\'s (representing continuous buildings) and return the area of that rectangle. The buildings are aligned in such a manner that their relative positioning remains intact, and you are allowed to stack the buildings on top of each other, which means you can consider consecutive heights in the array as stacking if they are continuous. Constraints: - 1 ≤ array length ≤ 10^5 - 0 ≤ height of any building ≤ 10^5 Input The input is given as a single line containing space-separated integers representing the heights of the buildings in the skyline. Output Output the maximum area of the largest rectangle containing only 1\'s. Examples Input 2 1 5 6 2 3 Output 10 Input 2 4 Output 4 Input 6 2 5 4 5 1 6 Output 12 Explanation In the first example, the heights of the buildings provided are [2, 1, 5, 6, 2, 3]. The largest rectangle can be formed by stacking the buildings of heights 5 and 6 resulting in an area of 5 * 2 = 10. In the second example, [2, 4], the maximum rectangle area is 4, formed by the building of height 4. In the third example, [6, 2, 5, 4, 5, 1, 6], the maximum rectangle area is achieved between the buildings with heights [5, 4, 5], resulting in an area of 4 * 3 = 12.","solution":"def largest_rectangle_area(heights): Given an array of heights of buildings, return the area of the largest rectangle that can be formed using consecutive buildings. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You will be given two integers n and k as input. Write a program that checks if n is divisible by k. If n is divisible by k, print `YES`; otherwise, print `NO`. Constraints * 1 leq n leq 10^9 * 1 leq k leq 10^9 Input Input is given from Standard Input in the following format: n k Output If n is divisible by k, print `YES`; otherwise, print `NO`. Examples Input 10 2 Output YES Input 10 3 Output NO Input 1000000000 1 Output YES","solution":"def is_divisible(n, k): Check if n is divisible by k. Return \'YES\' if divisible, otherwise return \'NO\'. return \\"YES\\" if n % k == 0 else \\"NO\\""},{"question":"A popular smart city is planning to enhance its transportation network by introducing an advanced tram system. The tram routes are represented as straight lines on a 2D plane. Each route has a start and an end point, and multiple routes can intersect. However, the city management needs to analyze if there is any pair of tram routes that exactly overlap for their entire length, as such overlap can lead to redundancy and unnecessary costs. Your task is to write a program to detect any such overlapping tram routes. Given the coordinates of the start and end points of each route, determine if there exists a pair of routes that overlap completely. Input The first line contains an integer n, denoting the number of tram routes. The next n lines each contain four integers x1, y1, x2, y2 describing the start (x1, y1) and end (x2, y2) coordinates of each tram route. Output Output \\"YES\\" if there exists a pair of tram routes that overlap completely. Otherwise, output \\"NO\\". Constraints * 2 ≤ n ≤ 100 * -1000 ≤ x1, y1, x2, y2 ≤ 1000 Examples Input 4 0 0 5 5 1 1 4 4 0 0 5 5 -1 -1 -5 -5 Output YES Input 3 0 0 5 5 1 1 4 4 2 2 6 6 Output NO","solution":"def check_tram_routes_overlap(n, routes): Function to determine if any pair of tram routes overlap completely. # Normalize all routes such that start point is always the one with a lower (x, y) value normalized_routes = [] for x1, y1, x2, y2 in routes: if (x1, y1) > (x2, y2): x1, y1, x2, y2 = x2, y2, x1, y1 normalized_routes.append((x1, y1, x2, y2)) # Use a set to check for duplicate routes seen_routes = set() for route in normalized_routes: if route in seen_routes: return \\"YES\\" seen_routes.add(route) return \\"NO\\""},{"question":"Two armies are battling in a virtual arena. Each army is represented by a list of integers. The strength of an army is the sum of its soldiers\' strengths. The battle follows a specific pattern: the strongest soldier from each side clashes, and both are removed from their respective armies. This process continues until one of the armies is left without soldiers. The goal is to determine which army wins or if the battle ends in a draw. Your task is to implement a function that decides the outcome of the battle given the strengths of the soldiers in both armies. Input: - The first line of the input contains the number of test cases t. - For each test case: - The first line contains an integer n, the number of soldiers in the first army. - The second line contains n integers, representing the strengths of the soldiers in the first army. - The third line contains an integer m, the number of soldiers in the second army. - The fourth line contains m integers, representing the strengths of the soldiers in the second army. Output: For each test case, print \\"First Army\\" if the first army wins, \\"Second Army\\" if the second army wins, or \\"Draw\\" if the battle ends in a draw. Constraints: 1 ≤ t ≤ 10 1 ≤ n, m ≤ 10^5 1 ≤ strength of soldiers ≤ 10^3 SAMPLE INPUT 2 5 3 6 2 8 7 4 4 5 1 10 3 7 5 4 3 6 4 5 SAMPLE OUTPUT First Army Draw","solution":"def battle_outcome(t, test_cases): results = [] for case in test_cases: n = case[\'n\'] first_army = sorted(case[\'first_army\'], reverse=True) m = case[\'m\'] second_army = sorted(case[\'second_army\'], reverse=True) # Number of common battles, will be the min(n, m) common_battles = min(n, m) # Compare the strongest to the weakest in the common_battles for i in range(common_battles): if first_army[i] > second_army[i]: results.append(\\"First Army\\") break elif first_army[i] < second_army[i]: results.append(\\"Second Army\\") break else: if n > m: results.append(\\"First Army\\") elif n < m: results.append(\\"Second Army\\") else: results.append(\\"Draw\\") return results # Test cases format for the function # t: Number of test cases # test_cases: List of dictionaries, each containing \'n\', \'first_army\', \'m\', \'second_army\' def main(): t = 2 test_cases = [ { \'n\': 5, \'first_army\': [3, 6, 2, 8, 7], \'m\': 4, \'second_army\': [4, 5, 1, 10] }, { \'n\': 3, \'first_army\': [7, 5, 4], \'m\': 3, \'second_army\': [6, 4, 5] } ] results = battle_outcome(t, test_cases) for result in results: print(result) # Sample execution for the sample test cases main()"},{"question":"Emily loves playing with pyramids of numeric strings. She creates pyramids by stacking layers of increasing lengths of numeric strings where each layer consists of one or more elements which are right-aligned with subsequent layers. The topmost layer has only one element, and each subsequent layer has one more element than the last one. For example, if the base layer has 5 elements, the pyramid would look something like this: ``` 1 12 123 1234 12345 ``` The challenge is to generate such a pyramid based on a given number of layers. She wants you to write a program that will generate this pyramid for her on any given number of layers. Input The input consists of an integer n which denotes the number of layers in the pyramid. (1 ≤ n ≤ 100) Output The output should consist of n lines. The i-th line contains i numeric characters from \'1\' to the number represented by i. Example Input 5 Output ``` 1 12 123 1234 12345 ``` Input 3 Output ``` 1 12 123 ```","solution":"def generate_pyramid(n): Generates a numeric pyramid of `n` layers. Parameters: n (int): The number of layers in the pyramid. Returns: list: A list of strings representing each layer of the pyramid. pyramid = [] for i in range(1, n + 1): # Create the layer with spaces and numerical characters layer = \' \' * (n - i) + \'\'.join(str(x) for x in range(1, i + 1)) pyramid.append(layer) return pyramid"},{"question":"Input The only line of the input is a string of 5 characters. The first character is a lowercase letter (a-z), followed by 4 digits. The input is guaranteed to be valid. Output Output a single integer. Examples Input b1234 Output 1 Input d5678 Output 4 Input h4321 Output 8","solution":"def get_alphabet_position(input_string): Returns the position of the first letter in the input_string in the alphabet. first_char = input_string[0] return ord(first_char) - ord(\'a\') + 1"},{"question":"Given an integer n (1 ≤ n ≤ 1,000,000), determine the sum of all prime numbers less than or equal to n. Input n An integer n (1 ≤ n ≤ 1,000,000). Output The sum of all prime numbers less than or equal to n on a single line. Examples Input 10 Output 17 Input 100 Output 1060","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than or equal to n. if n < 2: return 0 is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i*i, n + 1, i): is_prime[j] = False prime_sum = 0 for i in range(2, n + 1): if is_prime[i]: prime_sum += i return prime_sum"},{"question":"After analyzing the sample questions, here\'s a new coding assessment question that aligns with the provided style, complexity, and scope: A delivery company needs to optimize the amount of fuel used for daily deliveries. The company has several delivery agents, and each agent can carry up to a certain weight of packages in a single trip. Given the total number of packages to be delivered and the weight of each package, calculate the minimum number of trips needed by one agent to deliver all packages if the agent can carry a maximum weight per trip. Input The input consists of three space-separated integers n, w, and m (1 ≤ n, w, m ≤ 1000) — the number of packages, the weight of each package, and the maximum weight an agent can carry per trip. Output Print a single integer — the minimum number of trips needed to deliver all the packages. Examples Input 10 5 20 Output 3 Input 7 2 5 Output 3 Note In the first sample, each package weighs 5 units and the agent can carry up to 20 units per trip. To deliver all 10 packages, the agent needs 3 trips: - Trip 1: 4 packages (4 * 5 = 20) - Trip 2: 4 packages (4 * 5 = 20) - Trip 3: 2 packages (2 * 5 = 10) In the second sample, each package weighs 2 units and the agent can carry up to 5 units per trip. To deliver all 7 packages, the agent needs 3 trips: - Trip 1: 2 packages (2 * 2 = 4) - Trip 2: 2 packages (2 * 2 = 4) - Trip 3: 3 packages (3 * 2 = 6)","solution":"def min_trips(n, w, m): Returns the minimum number of trips needed to deliver all packages. Parameters: - n: number of packages - w: weight of each package - m: maximum weight an agent can carry per trip Returns: - Minimum number of trips # Calculate total weight of all packages total_weight = n * w # Calculate minimum number of trips trips = (total_weight + m - 1) // m # Ceiling division return trips"},{"question":"Given a list of integers, you are to write a program that finds and removes the smallest and largest integers from the list, and then returns the average of the remaining integers. If all integers in the list are the same, return \\"All elements are the same\\". If the list has fewer than 3 integers, return \\"Not enough numbers\\". # Input - An integer `n` (2 ≤ n ≤ 100), the number of integers in the list. - A list of `n` space-separated integers. # Output - A single integer representing the average of the integers after removing the smallest and largest integer. - Or a string \\"All elements are the same\\" if all elements in the list are the same. - Or a string \\"Not enough numbers\\" if there are fewer than 3 integers. # Example Input ``` 5 4 1 7 2 6 ``` Output ``` 2 ``` Input ``` 3 2 2 2 ``` Output ``` All elements are the same ``` Input ``` 4 1 2 ``` Output ``` Not enough numbers ```","solution":"def find_average_after_removal(n, num_list): if n < 3: return \\"Not enough numbers\\" if all(x == num_list[0] for x in num_list): return \\"All elements are the same\\" smallest = min(num_list) largest = max(num_list) num_list.remove(smallest) num_list.remove(largest) if not num_list: return \\"Not enough numbers\\" return sum(num_list) / len(num_list) # Example Usage: # n = 5 # num_list = [4, 1, 7, 2, 6] # result = find_average_after_removal(n, num_list) # print(result) # Expected Output: 4.0"},{"question":"You are given a matrix of integers representing a height map of a 2D terrain. Each element in the matrix denotes the height of a specific point on the terrain. Water can flow either north, south, east, or west from a cell to another cell with equal or lower height. Determine the set of cells from which water can flow to both the Pacific Ocean and the Atlantic Ocean. The Pacific Ocean touches the left and top edges of the matrix, and the Atlantic Ocean touches the right and bottom edges. Write a function that receives the height matrix and returns the list of grid coordinates (i.e., row and column indices) from which water can flow to both oceans. # Input The input consists of: - An integer matrix `heights` of size `m x n` (1 ≤ m, n ≤ 200) and height values (0 ≤ heights[i][j] ≤ 10^4). # Output Return a list of lists of length 2, representing the grid coordinates from which water can flow to both oceans. # Examples Example 1: **Input:** ``` heights = [ [1, 2, 2, 3, 5], [3, 2, 3, 4, 4], [2, 4, 5, 3, 1], [6, 7, 1, 4, 5], [5, 1, 1, 2, 4] ] ``` **Output:** ``` [[0,4], [1,3], [1,4], [2,2], [3,0], [3,1], [4,0]] ``` Example 2: **Input:** ``` heights = [ [2, 1], [1, 2] ] ``` **Output:** ``` [[0,0], [0,1], [1,0], [1,1]] ``` # Explanation In the first example, water can flow from the following cells to both oceans: - Cell (0,4) which is connected to both top (Pacific) and right (Atlantic) edges. - Cell (1,3) which is connected through paths flowing to the top and right edges respectively. - The other cells mentioned in the output list follow similar paths to connect with both oceans. In the second example, since the height matrix is relatively small, all cells can flow to both oceans.","solution":"def pacific_atlantic(heights): if not heights or not heights[0]: return [] rows, cols = len(heights), len(heights[0]) pacific_reached = [[False] * cols for _ in range(rows)] atlantic_reached = [[False] * cols for _ in range(rows)] def dfs(r, c, visited): visited[r][c] = True for (dr, dc) in [(1, 0), (-1, 0), (0, 1), (0, -1)]: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and not visited[nr][nc] and heights[nr][nc] >= heights[r][c]: dfs(nr, nc, visited) for r in range(rows): dfs(r, 0, pacific_reached) dfs(r, cols - 1, atlantic_reached) for c in range(cols): dfs(0, c, pacific_reached) dfs(rows - 1, c, atlantic_reached) result = [] for r in range(rows): for c in range(cols): if pacific_reached[r][c] and atlantic_reached[r][c]: result.append([r, c]) return result"},{"question":"Sara loves organizing her bookshelf. She has a collection of books, each represented by an integer denoting its width. Sara always places her books in ascending order of width. Each time Sara adds a book, she wants to keep track of the longest subsequence of books that can be arranged in a strictly increasing order by width without rearranging the books already on the shelf. She is curious to find out the length of this longest subsequence after each book added. Write a function that takes two inputs: 1. An integer n (1 ≤ n ≤ 100,000), the number of books. 2. A list of n integers, where the i-th integer (1 ≤ width_i ≤ 10^9) represents the width of the i-th book added. The function should output n integers, where the i-th integer represents the length of the longest subsequence of books in strictly increasing order after the i-th book is added. **Input** The input consists of: - An integer n. - A list of n space-separated integers. **Output** Output a list of n integers, each representing the length of the longest increasing subsequence after the i-th book is added. **Examples** Input: ``` 5 1 3 2 4 3 ``` Output: ``` 1 2 2 3 3 ``` Input: ``` 4 4 5 6 7 ``` Output: ``` 1 2 3 4 ``` Input: ``` 6 10 20 10 30 20 50 ``` Output: ``` 1 2 2 3 3 4 ``` **Explanation** In the first example, after adding each book, the longest increasing subsequences are: - [1] (length 1) - [1, 3] (length 2) - [1, 2] (length 2) - [1, 2, 4] or [1, 3, 4] (length 3) - [1, 2, 3] (length 3) In the second example, adding books always forms a strictly increasing sequence. In the third example, after adding each book: - [10] (length 1) - [10, 20] (length 2) - [10, 10] (length 2 since 10 doesn\'t change the order) - [10, 20, 30] (length 3) - [10, 20] (new 20 doesn\'t add to the length) - [10, 20, 30, 50] (length 4)","solution":"import bisect def longest_increasing_subsequence(n, widths): This function calculates the length of the longest increasing subsequence of books after each book is added. lis = [] # This will keep track of the longest increasing subsequence found so far. lis_lengths = [] # This will store the lengths of the LIS after each book is added. for width in widths: # Find the position where this book could be placed in the LIS. pos = bisect.bisect_left(lis, width) # If this width is larger than all elements in the LIS, we add it to the end if pos == len(lis): lis.append(width) else: # Otherwise, we replace the element at the found position. lis[pos] = width # Append the new length of LIS to the result list. lis_lengths.append(len(lis)) return lis_lengths"},{"question":"Alice has an integer array nums[] of N integers. She needs to split the array into two non-empty subarrays such that the maximum element in the left subarray is less than or equal to the minimum element in the right subarray. Write a function to find the index at which Alice should split the array to satisfy this condition. Return the index of the smallest such position. If no such index exists, return -1. Input: The first line of input contains a single integer N, the size of the array. The second line contains N integers representing the elements of the array nums[]. Output: The output should be a single integer, the index of the smallest position to split the array or -1 if no such index exists. Constraints: - 2 ≤ N ≤ 100 - -10^9 ≤ nums[i] ≤ 10^9 SAMPLE INPUT 5 5 0 3 8 6 SAMPLE OUTPUT 3","solution":"def find_split_index(arr): This function finds the smallest index to split the array into two non-empty subarrays such that the maximum element in the left subarray is less than or equal to the minimum element in the right subarray. If no such index exists, the function returns -1. n = len(arr) if n < 2: return -1 left_max = [0] * n right_min = [0] * n left_max[0] = arr[0] for i in range(1, n): left_max[i] = max(left_max[i-1], arr[i]) right_min[n-1] = arr[n-1] for i in range(n-2, -1, -1): right_min[i] = min(right_min[i+1], arr[i]) for i in range(1, n): if left_max[i-1] <= right_min[i]: return i return -1"},{"question":"Anna is working on a project that involves processing a large text document. She needs to write a program that finds the most frequently occurring word in the document. In case of a tie (multiple words having the same highest frequency), the program should return the lexicographically smallest word among them. To simplify the problem: - The document consists of only lowercase English letters and spaces. - Words are separated by one or more spaces. - No punctuation or special characters are present in the document. Help Anna by writing a program that reads the text document and outputs the most frequently occurring word with the above mentioned tie-breaking rule. # Input The first line contains an integer `n` (1 ≤ n ≤ 10^5), the length of the document in terms of the number of characters. The second line contains the text document, a string of length `n`. # Output Print the word that occurs most frequently in the document. In case of a tie, print the lexicographically smallest word among those with the highest frequency. # Example **Input** ``` 36 the quick brown fox jumps over the lazy dog ``` **Output** ``` the ``` **Input** ``` 20 hello world hello anna ``` **Output** ``` hello ``` **Explanation** In the first example, \\"the\\" appears twice, while all other words appear once. In the second example, \\"hello\\" appears twice, and \\"anna\\" and \\"world\\" appear once each. \\"hello\\" is the most frequent word and thus is the output.","solution":"def most_frequent_word(n, document): Finds the most frequently occurring word in the document. In case of a tie, returns the lexicographically smallest word. import re from collections import Counter # Split the document into words using regex to handle multiple spaces words = re.findall(r\'bw+b\', document) # Count frequency of each word word_count = Counter(words) # Find the highest frequency max_frequency = max(word_count.values()) # Get the words with the highest frequency most_frequent_words = [word for word, count in word_count.items() if count == max_frequency] # Return the lexicographically smallest word among the most frequent words return min(most_frequent_words)"},{"question":"George is organizing a bookshelf with n (5 ≤ n ≤ 15) books placed in a random order. Each book has a unique number from 1 to 99 on its spine for identification. George decided to arrange exactly m (2 ≤ m ≤ 5) books in ascending order based on the numbers on their spines. How many different ways can George choose m books from the shelf and arrange them in ascending order? For example, if there are six books with the numbers 2, 5, 19, 7, 11, and 23 on their spines, and George decides to arrange four of them in ascending order, one possible way could be 2, 5, 7, 11. Another possibility could be 5, 7, 11, 19. Given the numbers on the n books, create a program to find the number of different ways to choose and arrange m books in ascending order. input The input consists of separate datasets. Each dataset is given in the following format. Each dataset consists of 2 + n rows. The number of books n (5 ≤ n ≤ 15) is written on the first line, and the number of books m (2 ≤ m ≤ 5) is written on the second line. On the 2 + i line (1 ≤ i ≤ n), the number written on the i-th book is given. When both n and m are 0, it indicates the end of input. The number of datasets does not exceed 5. output For each dataset, the number of ways to choose and arrange m books in ascending order is output on one line. Examples Input 6 4 2 5 19 7 11 23 5 3 9 3 15 1 8 0 0 Output 5 10 Input None Output None","solution":"from itertools import combinations def count_ways_to_arrange_books(n, m, book_numbers): Counts the number of ways to choose and arrange m books in ascending order from n books. return len(list(combinations(book_numbers, m))) def process_datasets(datasets): Processes multiple datasets and returns the number of ways to arrange books for each dataset. results = [] for dataset in datasets: n = dataset[0] m = dataset[1] book_numbers = dataset[2:] if n == 0 and m == 0: break results.append(count_ways_to_arrange_books(n, m, book_numbers)) return results # Example usage datasets = [ [6, 4, 2, 5, 19, 7, 11, 23], [5, 3, 9, 3, 15, 1, 8], [0, 0] ] print(process_datasets(datasets))"},{"question":"You are developing a text editor that supports a unique autocomplete feature. Instead of autocompleting based on the previous words typed, this new feature autocompletes based on a predefined dictionary of snippets. Each snippet is a small piece of text (possibly including spaces) which can be autocompleted when a part of it is typed. Your task is to create an algorithm that suggests the most appropriate snippet based on the current input. The suggestions should be based on the dictionary of snippets provided to the editor. # Input - The first line contains a single integer `n` (1 ≤ `n` ≤ 200), the number of snippets in the dictionary. - The next `n` lines each contain one snippet. Snippets will consist of only lowercase alphabets and spaces, with a maximum length of 100 characters. - The last line contains the current input string typed by the user. This string will also consist of only lowercase alphabets and spaces and will be at most 100 characters long. # Output Print the most appropriate snippet that can be autocompleted based on the given input. If there are multiple possible completions that start with the input string, print the snippet which comes first alphabetically. If no snippet starts with the input string, print `No suggestion`. # Examples Example 1 # Input ``` 3 hello world hi there how are you he ``` # Output ``` hello world ``` Example 2 # Input ``` 4 example snippet another one yet another sample text yet ``` # Output ``` yet another ``` Example 3 # Input ``` 2 example snippet another one nonexistent ``` # Output ``` No suggestion ``` # Notes - In the first example, \\"he\\" matches both \\"hello world\\" and \\"hi there\\". \\"hello world\\" comes first alphabetically. - In the second example, \\"yet\\" only matches \\"yet another\\" in the dictionary. - In the third example, \\"nonexistent\\" does not match any snippet, so the output is `No suggestion`. Design an efficient solution to handle the given constraints and provide the correct suggestion quickly.","solution":"def autocomplete(n, snippets, current_input): suggestions = [snippet for snippet in snippets if snippet.startswith(current_input)] if not suggestions: return \\"No suggestion\\" return min(suggestions) # Example usage n = 3 snippets = [\\"hello world\\", \\"hi there\\", \\"how are you\\"] current_input = \\"he\\" print(autocomplete(n, snippets, current_input)) # Output should be \\"hello world\\""},{"question":"Alicia is playing a game with strings. She has a string `s` of length `n` consisting of lowercase English letters. The game she\'s playing involves moving the characters around to form different permutations of the string `s`. Her goal is to find the largest lexicographical string that can be formed by permuting the characters of `s`. A string `a` is lexicographically larger than a string `b` if at the first position where `a` and `b` differ, the string `a` has a character that appears later in the alphabet than the corresponding character in `b`. Input The first line contains a positive integer n — the length of the string (1 ≤ n ≤ 10^5). The second line contains a string `s` of length `n` consisting of lowercase English letters. Output Print a single string — the largest lexicographical permutation of `s`. Examples Input 5 abcde Output edcba Input 3 cba Output cba","solution":"def largest_lexicographical_string(n, s): Returns the largest lexicographical permutation of the string s. Parameters: n (int): Length of the string (1 ≤ n ≤ 10^5) s (str): Input string consisting of lowercase English letters Returns: str: Largest lexicographical permutation of s return \'\'.join(sorted(s, reverse=True))"},{"question":"Problem Alice is planning a trip to visit different museums in a new city. She has a map of the city that shows the museums and the walking paths connecting them. Alice wants to maximize her total enjoyment by visiting as many distinct museums as possible, without visiting any museum more than once. Alice can start her trip from any museum, and she can only walk along the paths provided in the map. Each museum has a specific enjoyment value associated with it, and Smith’s enjoyment is the sum of the enjoyment values of all the distinct museums she visits. Given the number of museums and the paths connecting them, help Alice determine the maximum total enjoyment she can achieve. Constraints The input satisfies the following conditions. * 1 ≤ n ≤ 100 * 0 ≤ m ≤ min(n×(n−1)/2, 100) * 1 ≤ ei ≤ 100 * 0 ≤ ai, bi ≤ n − 1 * No self-loop or multiple edges Input n m e0 ... en−1 a0 b0 ... am−1 bm−1 All inputs are given as integers. The number n of museums and the number m of paths are given on the first line, separated by spaces. On the second line, the enjoyment values ei for each museum are given, separated by spaces. Then follow m lines, each containing two integers ai and bi indicating a path between museums ai and bi. Output Output the maximum total enjoyment on one line. Examples Input 4 3 10 20 30 40 0 1 1 2 2 3 Output 100 Input 5 6 1 2 3 4 5 0 1 0 2 1 3 2 3 3 4 1 4 Output 15 Input 3 2 7 8 9 0 1 1 2 Output 24","solution":"def maximum_enjoyment(n, m, enjoyment_values, paths): from collections import defaultdict from itertools import permutations def dfs(start, graph, visited): stack = [start] total_enjoyment = 0 while stack: node = stack.pop() if node not in visited: visited.add(node) total_enjoyment += enjoyment_values[node] for neighbor in graph[node]: if neighbor not in visited: stack.append(neighbor) return total_enjoyment graph = defaultdict(list) for a, b in paths: graph[a].append(b) graph[b].append(a) max_enjoyment = 0 for start in range(n): visited = set() max_enjoyment = max(max_enjoyment, dfs(start, graph, visited)) return max_enjoyment # Helper function to parse input strings def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) enjoyment_values = list(map(int, lines[1].split())) paths = [tuple(map(int, line.split())) for line in lines[2:]] return n, m, enjoyment_values, paths # Adding a function to process string inputs for testing def maximum_enjoyment_from_string(input_str): n, m, enjoyment_values, paths = parse_input(input_str) return maximum_enjoyment(n, m, enjoyment_values, paths)"},{"question":"You are tasked with writing a Python function that processes a list of student scores and determines whether any student has scored a perfect score, which is defined as 100. If at least one student has scored 100, the function should return \\"Perfect Score Achieved\\", otherwise it should return \\"No Perfect Score\\". Input The input consists of: - An integer n (1 ≤ n ≤ 100) — the number of student scores. - A list of n integers where each integer is between 0 and 100, inclusive, representing the scores of the students. Output The function should return \\"Perfect Score Achieved\\" if there is at least one score of 100 in the list, otherwise it should return \\"No Perfect Score\\". Examples Input 3 99 100 87 Output Perfect Score Achieved Input 4 75 85 90 95 Output No Perfect Score Input 1 100 Output Perfect Score Achieved Note In the first example, one student has a perfect score of 100, so the function returns \\"Perfect Score Achieved\\". In the second example, no student has a perfect score of 100, so the function returns \\"No Perfect Score\\". In the third example, the single student has a perfect score of 100, so the function returns \\"Perfect Score Achieved\\".","solution":"def check_perfect_score(n, scores): Returns whether any student has scored a perfect score of 100. Parameters: n (int): The number of student scores (1 ≤ n ≤ 100). scores (list of int): A list of n integers representing the scores of the students (0 ≤ score ≤ 100). Returns: str: \\"Perfect Score Achieved\\" if at least one student has scored 100, otherwise \\"No Perfect Score\\". for score in scores: if score == 100: return \\"Perfect Score Achieved\\" return \\"No Perfect Score\\""},{"question":"Alex and Bryn are playing a competitive game involving sequences of numbers. They start with a sequence of n integers. Each player can choose a subsequence of consecutive non-negative numbers (including zero) from the current sequence and remove it from the sequence. The players take turns removing subsequences, with Alex going first. The player who cannot make a move loses. Determine which player will win if both players play optimally. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the sequence. The second line contains n integers b1, b2, ..., bn (-10^9 ≤ bi ≤ 10^9) — the elements of the sequence. Output If Alex wins, print \\"Alex\\", otherwise print \\"Bryn\\" (without quotes). You can print each letter in any case (upper or lower). Examples Input 5 1 -1 0 2 3 Output Alex Input 3 0 0 0 Output Bryn Input 4 -1 5 0 0 Output Alex Input 7 -4 0 0 0 2 1 0 Output Alex Note In the first sample test, Alex can remove the subsequence [0] on his first move, leaving Bryn to face the sequence [1, -1, 2, 3]. In the second sample test, Bryn wins because the sequence has only zeros, and Alex has no valid move on his first turn. In the third sample test, Alex can remove the subsequence [0, 0] on his first move, leaving Bryn with the sequence [-1, 5]. In the fourth sample test, Alex can choose the subsequence [0] on his first move, leaving Bryn to face [-4, 0, 0, 2, 1].","solution":"def determine_winner(n, sequence): Determines the winning player in the game. Alex wins if there is at least one zero in the sequence; otherwise, Bryn wins. Args: n (int): The length of the sequence. sequence (list of int): The elements of the sequence. Returns: str: \\"Alex\\" if Alex wins, otherwise \\"Bryn\\". # Check if there is at least one zero in the sequence if 0 in sequence: return \\"Alex\\" else: return \\"Bryn\\""},{"question":"A group of engineers is working on a new type of energy conversion device. They need to simulate the energy conversion process using a series of computations. Each computation can be represented as a task in a sequence. However, due to the complexity of the system, the engineers must ensure the tasks execute in an order that maintains energy consistency. The engineers have defined certain rules for executing the tasks. Each task can only begin after all its prerequisite tasks have completed. Given the information about the tasks and their prerequisites, you need to determine the number of valid sequences that follow the prerequisite rules. The input consists of multiple test cases. For each test case, you will be given the number of tasks and a list of prerequisite pairs. You need to compute the number of valid sequences in which all tasks can be executed while respecting the prerequisite constraints. Input The first line of the input contains T (1 <= T <= 100) denoting the number of test cases. Each test case contains two integers N (1 <= N <= 100) and M (0 <= M <= N*(N-1)/2) where N is the number of tasks and M is the number of prerequisite pairs. The next M lines each contain two integers A and B (1 <= A, B <= N, A != B) indicating that task A must be performed before task B. Output For each test case, output a single integer representing the number of valid sequences modulo 1000000007. If no valid sequence exists, output 0. Example Input 2 3 2 1 2 2 3 3 0 Output 1 6","solution":"MOD = 1000000007 def count_valid_sequences(N, prerequisites): from collections import defaultdict, deque # Create adjacency list and in-degree list adj_list = defaultdict(list) in_degree = [0] * (N + 1) for a, b in prerequisites: adj_list[a].append(b) in_degree[b] += 1 # Use Kahn\'s algorithm to perform a topological sort and count paths queue = deque() for i in range(1, N + 1): if in_degree[i] == 0: queue.append(i) num_valid_sequences = 0 current_sequence = [] def backtrack(): nonlocal num_valid_sequences if len(current_sequence) == N: num_valid_sequences = (num_valid_sequences + 1) % MOD return for i in range(1, N + 1): if in_degree[i] == 0 and i not in current_sequence: current_sequence.append(i) for neighbor in adj_list[i]: in_degree[neighbor] -= 1 backtrack() current_sequence.pop() for neighbor in adj_list[i]: in_degree[neighbor] += 1 backtrack() return num_valid_sequences def solve(test_cases): results = [] for N, M, prereqs in test_cases: results.append(count_valid_sequences(N, prereqs)) return results"},{"question":"Polycarpus loves working with integers just as much as he loves studying history. However, he is not as keen on small talk and chatter, so he prefers mathematical puzzles. One day, Polycarpus stumbled upon a game involving integers and he decided to play with sequences of integers. Given a sequence of integers, Polycarpus wants to find the length of the longest contiguous subarray such that all elements in this subarray are distinct. Help Polycarpus by writing a program to solve the problem. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100000) — the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000) — the elements of the sequence. Output Output a single integer — the length of the longest contiguous subarray with all distinct elements. Example Input 5 1 2 1 3 4 Output 4 Input 7 1 2 3 4 5 6 7 Output 7 Input 5 1 1 1 1 1 Output 1 Note In the first example, the longest contiguous subarray with all distinct elements is [2, 1, 3, 4] with length 4. In the second example, since all elements are distinct, the length of the longest contiguous subarray is the length of the entire sequence, which is 7. In the third example, no matter which subarray you choose, you can only get a subarray of length 1 with distinct elements as all elements are the same.","solution":"def longest_distinct_subarray(n, arr): Returns the length of the longest contiguous subarray with all distinct elements. # Dictionary to store the last positions of each element last_pos = {} start_idx = 0 max_len = 0 for i in range(n): if arr[i] in last_pos and last_pos[arr[i]] >= start_idx: start_idx = last_pos[arr[i]] + 1 last_pos[arr[i]] = i max_len = max(max_len, i - start_idx + 1) return max_len"},{"question":"You are given a list of integers representing the balloon counts of different colors. The kingdom of Avaria is planning for a grand celebration and they want as many different colors of balloons as possible, while maintaining an even number of each color. Your task is to determine the maximum number of different colors of balloons that Avaria can use under the condition that the balloon count for each used color must be an even number. Input The first line contains a single integer N, the number of colors. The second line contains N space-separated integers B1, B2, ..., BN, where Bi denotes the count of balloons of the i-th color. Output Print a single integer, the maximum number of different colors that have an even number of balloons. Constraints 1 ≤ N ≤ 100 1 ≤ Bi ≤ 100 Example 1 Input: 3 2 3 4 Output: 2 Example 2 Input: 5 1 2 3 4 5 Output: 2 Example 3 Input: 4 10 5 6 8 Output: 3 Explanation Example 1: For the first example, N = 3 and the array B = [2, 3, 4]. The balloon count for the 1st color is 2 (even), for the 2nd color is 3 (odd), and for the 3rd color is 4 (even). The number of different colors with an even number of balloons is 2. Example 2: For the second example, N = 5 and the array B = [1, 2, 3, 4, 5]. The balloon count for the 1st color is 1 (odd), for the 2nd color is 2 (even), for the 3rd color is 3 (odd), for the 4th color is 4 (even), for the 5th color is 5 (odd). The number of different colors with an even number of balloons is 2. Example 3: For the third example, N = 4 and the array B = [10, 5, 6, 8]. The balloon count for the 1st color is 10 (even), for the 2nd color is 5 (odd), for the 3rd color is 6 (even), and for the 4th color is 8 (even). The number of different colors with an even number of balloons is 3.","solution":"def max_even_colors(n, balloons): Returns the maximum number of different colors that have an even number of balloons. count = 0 for balloon_count in balloons: if balloon_count % 2 == 0: count += 1 return count"},{"question":"Given a string s consisting of lowercase alphabets and an integer k, you are required to find out if the string can be rearranged such that the same characters are at least k distance apart from each other. If possible, return the rearranged string, otherwise return an empty string. Constraints: * 1 leq |s| leq 10^5 * 1 leq k leq |s| * s contains only lowercase English letters. Input: *s* (string): the input string. *k* (integer): the minimum distance between same characters. Output: Return the rearranged string if possible; otherwise, return an empty string. Example: Input: ``` aabbcc 3 ``` Output: ``` abcabc ``` Input: ``` aaabc 2 ``` Output: ``` abaca ``` Input: ``` aa 2 ``` Output: ``` ``` Explanation: In the first example, the characters \'a\', \'b\', and \'c\' are repeated at least 3 positions apart. In the second example, the characters \'a\' are repeated at least 2 positions apart. In the third example, it\'s impossible to rearrange the string such that the characters \'a\' are at least 2 positions apart, therefore the output is an empty string.","solution":"import heapq from collections import Counter def rearrange_string(s, k): Rearrange the string so that the same characters are at least k distance apart. Returns the rearranged string if possible, otherwise returns an empty string. if k == 0: return s counter = Counter(s) max_heap = [] for char, freq in counter.items(): heapq.heappush(max_heap, (-freq, char)) result = [] wait_queue = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) wait_queue.append((freq + 1, char)) # Decrement the frequency and add to wait queue if len(wait_queue) < k: continue freq, char = wait_queue.pop(0) # Reinsert the character back into heap if k distance is maintained if -freq != 0: heapq.heappush(max_heap, (freq, char)) return \\"\\".join(result) if len(result) == len(s) else \\"\\""},{"question":"An anomaly detection system is being implemented in a large data processing facility. One of the essential tasks for this system is to monitor the temperature of various servers over time and identify any sudden spikes that might indicate a problem. To achieve this, we are using a sliding window approach to monitor temperature fluctuations. Given a sequence of temperature readings for a server and a fixed window size `k`, the system should detect and print the maximum temperature within each sliding window of size `k`. The sliding window moves from the beginning to the end of the sequence, one element at a time. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of temperature readings. - The second line contains an integer `k` (1 ≤ k ≤ n), the size of the sliding window. - The third line contains `n` space-separated integers representing the temperature readings `t1, t2, ..., tn` (-10^4 ≤ ti ≤ 10^4). # Output Print a single line containing `n - k + 1` integers representing the maximum temperature within each sliding window of size `k`. # Examples Example 1 Input: ``` 9 3 1 3 1 2 0 5 7 6 4 ``` Output: ``` 3 3 2 5 7 7 7 ``` Example 2 Input: ``` 6 4 -2 -1 -3 -1 -2 -4 ``` Output: ``` -1 -1 -1 -1 ``` # Note In the first sample, the sliding window size is `3`. As we slide the window from left to right: - The first window [1, 3, 1] has a maximum of 3. - The second window [3, 1, 2] has a maximum of 3. - The third window [1, 2, 0] has a maximum of 2. - The fourth window [2, 0, 5] has a maximum of 5. - The fifth window [0, 5, 7] has a maximum of 7. - The sixth window [5, 7, 6] has a maximum of 7. - The seventh window [7, 6, 4] has a maximum of 7. In the second sample, with sliding window size `4`: - The first window [-2, -1, -3, -1] has a maximum of -1. - The second window [-1, -3, -1, -2] has a maximum of -1. - The third window [-3, -1, -2, -4] has a maximum of -1.","solution":"from collections import deque def max_sliding_window(nums, k): Returns a list of the maximum values in each sliding window of size k. if not nums: return [] deq = deque() result = [] for i, num in enumerate(nums): while deq and deq[0] < i - k + 1: deq.popleft() while deq and nums[deq[-1]] < num: deq.pop() deq.append(i) if i >= k - 1: result.append(nums[deq[0]]) return result # Example usage: # n = 9 # k = 3 # temperatures = [1, 3, 1, 2, 0, 5, 7, 6, 4] # print(max_sliding_window(temperatures, k)) # Output: [3, 3, 2, 5, 7, 7, 7]"},{"question":"In an online video game, players can form teams to play rounds. Each team needs to have the same number of players throughout the game. Moreover, each player can only belong to one team. The game developers have asked you to write a program to determine the optimal way to form teams. Given the number of players and the maximum number of players that can be in a team, the program should determine the number of teams that can be formed and how many players will be left without a team. Input The first line of input data contains two space-separated integers n and m (1 ≤ n ≤ 105, 1 ≤ m ≤ 109). - n is the number of players. - m is the maximum number of players in a team. Output Print two space-separated integers: - The first integer is the maximum number of teams that can be formed. - The second integer is the number of players left without a team. Examples Input 10 3 Output 3 1 Input 15 5 Output 3 0 Input 7 2 Output 3 1 Note In the first sample test: * There are 10 players and teams can have up to 3 players. * We can form three teams with 3 players each. * 1 player will be left without a team. In the second sample test: * There are 15 players and teams can have up to 5 players. * We can form three teams with 5 players each. * No player is left without a team. In the third sample test: * There are 7 players and teams can have up to 2 players. * We can form three teams with 2 players each. * 1 player will be left without a team.","solution":"def form_teams(n, m): Returns the maximum number of teams and the number of players left without a team. Parameters: n (int): Total number of players. m (int): Maximum number of players in a team. Returns: tuple: (Number of teams, Number of leftover players) teams = n // m leftover = n % m return (teams, leftover)"},{"question":"Alice loves palindromes, which are words or sequences that read the same backward as forward. She finds both numerical palindromes and string palindromes fascinating. However, she is particularly interested in the smallest palindrome greater than a given number. Given a positive integer `n`, help Alice find the smallest palindrome greater than `n`. Input The only line contains a positive integer `n` (1 ≤ n ≤ 1010000). This number doesn\'t have leading zeros. Output Output the smallest palindrome that is greater than `n`. Examples Input 123 Output 131 Input 808 Output 818","solution":"def next_palindrome(n): def is_palindrome(s): return s == s[::-1] n = int(n) while True: n += 1 if is_palindrome(str(n)): return n"},{"question":"Astral Corporation is hosting a conference where they expect a number of prestigious guests. Each guest has a specific list of talks they are interested in attending. However, due to strict protocol, a seat must be reserved for each guest in advance for all talks they wish to attend. The task is to determine the minimum number of seats required such that no two guests attend any of the listed talks simultaneously. Each talk has a specific starting and ending time. The conference manager needs to understand the overlap in talk schedules to ensure that there\'s a sufficient number of seats. Input The first line contains an integer T, the number of talks. The next T lines each contain the details of a single talk represented by two integers, start and end, which describe the start and end times of the talks respectively. Output A single integer indicating the minimum number of seats required. Constraints * 1 ≤ T ≤ 105 * 0 ≤ start < end ≤ 109 Example Input 4 1 3 2 5 4 6 7 8 Output 2 Note In the example above: - The first talk is from time 1 to time 3. - The second talk is from time 2 to time 5. - The third talk is from time 4 to time 6. - The fourth talk is from time 7 to time 8. The first and second talks overlap between time 2 and 3, which means two seats are needed for that time. No other overlaps occur, so a total of two seats is the minimum needed to accommodate all talk schedules.","solution":"def minimum_seats_required(talks): Determine the minimum number of seats required such that no two guests attend any of the listed talks simultaneously. Params: - talks (list of tuples): List of tuples where each tuple contains the start and end time of a talk. Returns: - int: The minimum number of seats required. if not talks: return 0 # Separate out the start and end times events = [] for start, end in talks: events.append((start, \'start\')) events.append((end, \'end\')) # Sort the events; in case of tie, end times should come before start times events.sort(key=lambda x: (x[0], x[1] == \'start\')) max_seats = 0 current_seats = 0 # Traverse through the sorted events for time, event in events: if event == \'start\': current_seats += 1 max_seats = max(max_seats, current_seats) else: current_seats -= 1 return max_seats"},{"question":"A robotics company has designed a new robotic arm that needs to follow a series of specific movement commands to perform its tasks. Your goal is to write a program that simulates the robot\'s movements and determines its final position. The robot starts at the origin point (0, 0) on a 2D plane. It can receive the following commands: - \\"UP x\\" moves the robot up by x units. - \\"DOWN x\\" moves the robot down by x units. - \\"LEFT x\\" moves the robot left by x units. - \\"RIGHT x\\" moves the robot right by x units. The input consists of multiple datasets, and the end of the input is indicated by a single line with the word \\"STOP\\". Each dataset contains multiple commands, and each command is given on a new line. Your task is to compute the final coordinates of the robot after executing all the commands in each dataset. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line \\"STOP\\". Each dataset is given in the following format: m command1 command2 :: commandm The first line gives the total number of commands m (1 ≤ m ≤ 100). The next m lines are the commands. The number of datasets does not exceed 20. Output For each input dataset, output the final coordinates of the robot in the format \\"(x, y)\\". Example Input 3 UP 5 RIGHT 3 DOWN 2 2 LEFT 1 UP 4 STOP Output (3, 3) (-1, 4)","solution":"def calculate_final_coordinates(datasets): results = [] for dataset in datasets: x, y = 0, 0 for command in dataset: direction, value = command.split() value = int(value) if direction == \\"UP\\": y += value elif direction == \\"DOWN\\": y -= value elif direction == \\"LEFT\\": x -= value elif direction == \\"RIGHT\\": x += value results.append((x, y)) return results def process_input(input_data): datasets = [] input_lines = input_data.splitlines() i = 0 while i < len(input_lines): if input_lines[i] == \\"STOP\\": break m = int(input_lines[i]) commands = [] for j in range(1, m + 1): commands.append(input_lines[i + j]) datasets.append(commands) i += m + 1 return calculate_final_coordinates(datasets)"},{"question":"You are given a binary string `s`, consisting of only \'0\'s and \'1\'s. You can perform at most one operation on this string, where you can flip any single \'0\' to \'1\'. Your task is to determine the length of the longest contiguous substring of \'1\'s that can be obtained by performing at most one flip operation. Input The first line contains a binary string `s` (1 ≤ |s| ≤ 10^5). Output Output a single integer, the length of the longest contiguous substring of \'1\'s possible after at most one flip. Examples Input 1101101 Output 5 Input 11111 Output 5 Input 000 Output 1 Note In the first example, by flipping the \'0\' at index 3 (0-based), the string becomes 1111101, resulting in a contiguous substring \\"11111\\" of length 5. In the second example, no flip is needed as the entire string is already \'1\'s. In the third example, by flipping any \'0\' to \'1\', the result is a contiguous substring of length 1.","solution":"def longest_ones_after_flip(s: str) -> int: Determine the length of the longest contiguous substring of \'1\'s possible after performing at most one flip operation on the input string s. n = len(s) if \'0\' not in s: return n max_len = 0 left = 0 zero_count = 0 for right in range(n): if s[right] == \'0\': zero_count += 1 while zero_count > 1: if s[left] == \'0\': zero_count -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"The city of Avalonia is planning to build a network of roads to connect n villages. Some villages are located on hills, others in plains. The cost to build a road between any two villages depends on the terrain each village is on. The costs are defined as follows: - Connecting two villages on hills costs h. - Connecting two villages on plains costs p. - Connecting a village on a hill to a village on a plain costs m. Given these costs, determine the minimum cost to connect all villages such that there is a path between any two villages. Input The first line of the input contains an integer n (2 ≤ n ≤ 100,000) — the number of villages. The second line of the input contains n integers t_i (0 or 1) — the terrain type of the i-th village (0 if it is on a plain, 1 if it is on a hill). The third line contains three integers h, p, and m (1 ≤ h, p, m ≤ 10^9) — the costs to build the roads as described above. Output Print a single integer — the minimum cost to connect all the villages. Examples Input 4 1 0 0 1 3 2 1 Output 6 Input 3 1 1 1 1 5 2 Output 2 Note In the first example, the optimal way to connect the villages is to connect the first and last villages (both on hills) with a cost of 3, and then connect the second and third villages (both on plains) with a cost of 2. The total cost is 3 + 2 + 1 = 6. In the second example, all villages are on hills. The optimal way is to directly connect them with a cost of 1 + 1 = 2.","solution":"def minimum_cost_to_connect_villages(n, terr, h, p, m): hill_count = terr.count(1) plain_count = terr.count(0) if hill_count == 0: return (n - 1) * p elif plain_count == 0: return (n - 1) * h else: total_cost = 0 # Cost of connecting hills and plains separately total_cost += (hill_count - 1) * h total_cost += (plain_count - 1) * p # Cost of connecting one hill to one plain total_cost += m return total_cost"},{"question":"John is planning a road trip with his friends. He wants to visit as many cities as possible, but he only has a limited amount of time for the entire trip. Each city i requires ti hours to visit. Additionally, travelling between certain pairs of cities requires some travel time. Specifically, there are m direct roads, and each road j connects city u[j] to city v[j] and takes w[j] hours to travel. John starts his trip from city 1 and can visit cities and travel as long as the total time does not exceed T hours. Given these constraints, what is the maximum number of unique cities that John and his friends can visit? Input The first line contains three integers n, m, T (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000, 1 ≤ T ≤ 10^9), the number of cities, the number of direct roads, and the maximum number of hours for the trip, respectively. The next line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 10^6), the time required to visit each city. The following m lines describe the roads. Each of these lines contains three integers u[j], v[j], w[j] (1 ≤ u[j], v[j] ≤ n, 1 ≤ w[j] ≤ 10^6), which represent that there is a direct road between city u[j] and city v[j] that takes w[j] hours to travel. Output Output a single integer on a line by itself, the maximum number of unique cities John can visit within the given time limit T. Examples Input 6 7 12 2 3 4 2 6 3 1 2 1 1 3 3 2 3 1 2 4 2 3 5 1 4 5 3 5 6 2 Output 4 Input 5 5 10 3 2 4 5 1 1 2 1 2 3 2 3 4 3 4 5 4 1 3 4 Output 3 Note In the first test case, John can visit cities 1, 2, 3, and 5 within the given time. The visiting order could be city 1 (2 hours), travel to city 2 (1 hour), visit city 2 (3 hours), travel to city 3 (1 hour), visit city 3 (4 hours), travel to city 5 (1 hour), visit city 5 (3 hours). The total time spent is 14 hours, but he can only have up to 12 hours, so one visit might be shortened or optimized based on travel paths. In the second test case, John can visit cities 1, 2, and 3. The order could be city 1 (3 hours), travel to city 2 (1 hour), visit city 2 (2 hours), travel to city 3 (2 hours), visit city 3 (4 hours). Total time spent is within the 10 hours limit, counting the travel time.","solution":"import heapq import sys def max_cities_to_visit(n, m, T, visit_times, roads): # Use Dijkstra\'s algorithm for shortest path graph = [[] for _ in range(n + 1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(time_limit): dist = [sys.maxsize] * (n + 1) dist[1] = 0 pq = [(0, 1)] # (cost, node) while pq: current_time, node = heapq.heappop(pq) if current_time > dist[node]: continue for neighbor, weight in graph[node]: new_time = current_time + weight + visit_times[neighbor - 1] if new_time < dist[neighbor]: dist[neighbor] = new_time heapq.heappush(pq, (new_time, neighbor)) return len([d for d in dist if d <= time_limit]) max_cities = 0 max_cities = dijkstra(T) return max_cities # Parsing input def parse_input(input_string): lines = input_string.split(\'n\') n, m, T = map(int, lines[0].split()) visit_times = list(map(int, lines[1].split())) roads = [tuple(map(int, lines[i + 2].split())) for i in range(m)] return (n, m, T, visit_times, roads) def input_and_solve(input_text): n, m, T, visit_times, roads = parse_input(input_text) return max_cities_to_visit(n, m, T, visit_times, roads)"},{"question":"You are given a list of directed edges representing a graph, and your task is to determine if the graph contains a cycle. If the graph contains a cycle, output YES, otherwise output NO. Input format: In the first line, there is one integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two integers N and M given in the first line, representing the number of nodes and the number of directed edges in the graph. The next M lines each contain two integers u and v denoting a directed edge from node u to node v. Output format: Output exactly T lines. In the i-th line, output the answer to the i-th test case. Constraints: T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ M ≤ 10^6 SAMPLE INPUT 2 4 4 1 2 2 3 3 4 4 2 3 2 1 2 2 3 3 1 SAMPLE OUTPUT YES YES Explanation There are 2 test cases. In the first one, the graph contains a cycle formed by the edges 1->2, 2->3, 3->4, and 4->2. In the second one, the cycle is formed by the edges 1->2, 2->3, and 3->1.","solution":"from collections import defaultdict, deque def contains_cycle(n, edges): Determines if a directed graph has a cycle. :param n: Number of nodes in the graph :param edges: List of directed edges :return: \'YES\' if the graph has a cycle, \'NO\' otherwise def has_cycle(v, graph, visited, rec_stack): # Helper function for DFS to detect cycle visited[v] = True rec_stack[v] = True for neighbor in graph[v]: if not visited[neighbor]: if has_cycle(neighbor, graph, visited, rec_stack): return True elif rec_stack[neighbor]: return True rec_stack[v] = False return False # Build graph from edges graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = [False] * (n + 1) rec_stack = [False] * (n + 1) for node in range(1, n + 1): if not visited[node]: if has_cycle(node, graph, visited, rec_stack): return \\"YES\\" return \\"NO\\" def detect_cycles(test_cases): Detects cycles for multiple test cases. :param test_cases: List of test cases where each test case is a tuple (n, m, edges) :return: List of results for each test case results = [] for n, m, edges in test_cases: results.append(contains_cycle(n, edges)) return results"},{"question":"Alex loves cooking and wants to prepare a delicious dish. He has a recipe that requires certain ingredients, and he would like to know if he can prepare the dish with the ingredients he currently has in his kitchen. You have to write a program that helps Alex determine if he has all the necessary ingredients to cook the dish. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of ingredients required to prepare the dish. The second line contains n space-separated strings, each representing an ingredient required for the dish. Each ingredient name consists of lowercase Latin letters and has a length between 1 and 20. The third line contains an integer m (1 ≤ m ≤ 100), the number of ingredients Alex currently has in his kitchen. The fourth line contains m space-separated strings, each representing an ingredient in Alex\'s kitchen. Each ingredient name consists of lowercase Latin letters and has a length between 1 and 20. Output Print \\"YES\\" if Alex can prepare the dish with the ingredients he has, otherwise print \\"NO\\". Examples Input 4 flour sugar eggs butter 5 sugar flour eggs milk butter Output YES Input 3 tomato onion garlic 3 onion garlic potato Output NO Input 2 salt pepper 1 salt Output NO","solution":"def can_prepare_dish(required, available): Determines if all required ingredients are available in the kitchen. :param required: List of required ingredient names. :param available: List of available ingredient names. :return: \\"YES\\" if all required ingredients are available, otherwise \\"NO\\". required_set = set(required) available_set = set(available) if required_set.issubset(available_set): return \\"YES\\" else: return \\"NO\\""},{"question":"Write a program that calculates the complexity of a nested loop structure in terms of Big-O notation. In a given nested loop structure, represent each loop with triplet (s, e, u) where: - s: loop starts at s - e: loop ends at e - u: loop updates variable by u The loops are nested in such a way that there\'s no possibility of early exit (i.e., no `break` statements) or any other control flow that can alter the execution of the loops. Assume the code inside the innermost loop has a constant time complexity, O(1). The number of loops and their limits are all independent. You are required to compute the time complexity in terms of input variables. # Input The input starts with a single integer `T` specifying the number of nested loop structures. The next `T` lines each describe a nested loop structure. Each line contains space-separated triplets `(s1, e1, u1) (s2, e2, u2) ... (sN, eN, uN)` where `N` indicates the number of levels of nesting. # Output For each nested loop structure, output the Big-O time complexity in terms of the input variables. Example **Input** ``` 2 1 n 1 1 m 2 0 n 2 0 m 2 ``` **Output** ``` O(nm) O((n/2)(m/2)) ``` # Explanation In the first example, the nested loops iterate from 1 to n with a step of 1 and from 1 to m with a step of 2. The complexity is `n` for the first loop and `m/2` for the second, resulting in `O(n(m/2))` which simplifies to `O(nm)`. In the second example, the loops iterate from 0 to n with a step of 2 and from 0 to m with a step of 2, resulting in `O((n/2)(m/2))`.","solution":"def big_o_complexity(loop_structures): complexities = [] for loops in loop_structures: complexity = \\"O(\\" terms = [] for loop in loops: s, e, u = loop start_diff = f\'({e} - {s})\' term = f\'{start_diff}/{u}\' terms.append(term) complexity += \\"\\".join(terms) + \\")\\" complexities.append(complexity) return complexities # Helper function to parse the input def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) loop_structures = [] for i in range(1, T+1): loop_rep = lines[i].strip().split() loops = [(loop_rep[j], loop_rep[j+1], loop_rep[j+2]) for j in range(0, len(loop_rep), 3)] loop_structures.append(loops) return loop_structures def calculate_complexities(input_string): loop_structures = parse_input(input_string) return big_o_complexity(loop_structures)"},{"question":"You are given a string containing a list of numbers separated by commas. Write a program that calculates the sum of the numbers and finds the largest number in the list. Input A single line containing a string of integers separated by commas. Each integer can be positive, negative, or zero. Output Print two integers: the sum of the numbers and the largest number in the list, separated by a space. Examples Input: 1,2,3,4,5 Output: 15 5 Input: -1,-2,-3,-4,5 Output: -5 5 Input: 10,20,30,-10,-20 Output: 30 30","solution":"def calculate_sum_and_max(numbers_str): Given a string of numbers separated by commas, this function calculates and returns the sum of the numbers and the largest number in the list. numbers = list(map(int, numbers_str.split(\',\'))) total_sum = sum(numbers) max_number = max(numbers) return total_sum, max_number"},{"question":"You are given an array of integers where each integer represents the length of a wooden plank. You are also given an integer k. Each person requires exactly k units of wood to build a chair. Your task is to determine the maximum number of complete chairs that can be built using the given planks. Note that you cannot split a plank into smaller parts, but you can join multiple planks to reach the required length. Input The first line contains the only integer n (1 ≤ n ≤ 105) — the number of planks. The second line contains n integers li (1 ≤ li ≤ 109) — the lengths of the planks. The third line contains the integer k (1 ≤ k ≤ 109) — the required length of wood for one chair. Output Print the only integer c — the maximum number of chairs that can be built using the given planks. Examples Input 5 5 6 7 8 9 10 Output 3 Input 4 4 4 4 4 10 Output 1","solution":"def max_chairs(planks, k): Determines the maximum number of chairs that can be built using the given planks. Each chair requires k units of wood. :param planks: List of integers representing the lengths of the planks. :param k: Integer representing the required length of wood for one chair. :return: Integer representing the maximum number of chairs. total_length = sum(planks) return total_length // k"},{"question":"You are given a list of words printed in sequence along with their starting positions on a single line. Each word is separated by one or more spaces. Your task is to implement a function that reorders these words in reverse and prints them with exactly one space between each word, and no leading or trailing spaces. Implement a function reorder_words that reads input from the standard input and prints the reordered words in the specified format. # Input A single line containing multiple words separated by one or more spaces. # Output A single line containing the words in reverse order, separated by one space and no extra spaces at the start or end. # Constraints - Each word consists of alphabetic characters only. - The length of the input line does not exceed 1000 characters. - There is at least one word in the input line. # Example Input ```plaintext hello world this is an example ``` Output ```plaintext example an is this world hello ``` Input ```plaintext openai chatgpt assistant ``` Output ```plaintext assistant chatgpt openai ```","solution":"def reorder_words(input_line): Reorders the words in the input line in reverse order, prints them separated by one space. Args: input_line (str): The input line containing words separated by one or more spaces. Returns: str: A single string with words in reverse order, separated by one space. # Splitting the input line by spaces will give all words as a list words = input_line.split() # Reversing this list of words reversed_words = words[::-1] # Joining the reversed list with a single space output_line = \' \'.join(reversed_words) return output_line"},{"question":"A non-profit organization is planning a fundraising event and wants to develop a web-based application to track donations. The organization has a list of donations, each represented by the donor\'s name and the amount donated. They need help in determining two pieces of information: 1. The total amount of donations. 2. The name of the highest individual donor. Write a function that takes in a list of donations and returns a tuple containing the total amount of donations and the name of the highest donor. If there are multiple highest donors with the same amount, return the one that appears first in the list. Input The input consists of a single list where each element is a tuple containing a string (donor\'s name) and an integer (amount donated). Output The function should return a tuple with two elements - an integer representing the total amount of donations and a string representing the name of the highest donor. Example Input [(\\"Alice\\", 50), (\\"Bob\\", 75), (\\"Charlie\\", 75), (\\"Dave\\", 40)] Output (240, \\"Bob\\") Explanation - The total amount of donations is 50 + 75 + 75 + 40 = 240. - Both \\"Bob\\" and \\"Charlie\\" have donated the highest amount of 75, but \\"Bob\\" appears first in the list. Hence, the output is 240 and \\"Bob\\".","solution":"def track_donations(donations): Returns the total amount of donations and the name of the highest individual donor. Parameters: donations (list of tuples): A list where each element is a tuple containing a string (donor\'s name) and an integer (amount donated). Returns: tuple: (total_amount, highest_donor_name) if not donations: return (0, \\"\\") total_amount = 0 highest_donor_name = \\"\\" highest_donation = 0 for donor, amount in donations: total_amount += amount if amount > highest_donation: highest_donation = amount highest_donor_name = donor return (total_amount, highest_donor_name)"},{"question":"Spiral Array You are given an `n x n` 2D array that needs to be filled in a spiral order with the numbers from 1 to n^2. For instance, for n = 3, the resulting matrix would look like this: 1 2 3 8 9 4 7 6 5 Write a function that generates such a 2D array for a given value of n. Input: A single integer n, representing the size of the matrix (1 ≤ n ≤ 10). Output: Output the n x n 2D array filled in spiral order. Note: - You must fill the array in-place, following the spiral sequence of numbers from 1 to n^2. - In the output, each row of the matrix should be on a new line, with each element separated by a space. # Sample Input ``` 3 ``` # Sample Output ``` 1 2 3 8 9 4 7 6 5 ```","solution":"def generate_spiral_matrix(n): Generates an n x n 2D array filled in a spiral order with numbers from 1 to n^2. # Initialize the n x n matrix with zeros matrix = [[0] * n for _ in range(n)] # Define the initial direction and starting point directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] dir_idx = 0 row, col = 0, 0 for num in range(1, n * n + 1): matrix[row][col] = num r, c = directions[dir_idx] new_row, new_col = row + r, col + c # Check if the new position is within bounds and not yet visited if not (0 <= new_row < n and 0 <= new_col < n and matrix[new_row][new_col] == 0): dir_idx = (dir_idx + 1) % 4 r, c = directions[dir_idx] new_row, new_col = row + r, col + c row, col = new_row, new_col return matrix"},{"question":"Given an array of integers, determine if it can represent the per-unit revenue of a company for `n` days in a such a way that the revenue either strictly increases or decreases each day. Output \\"Yes\\" if the array can be rearranged to show a strict monotonic trend either increasing or decreasing, otherwise output \\"No\\". Input The first line contains an integer `T` denoting the number of test cases. The first line of each test case contains an integer `N` denoting the number of days. The second line contains `N` space-separated integers representing the per-unit revenue for each day. Output For each test case, output a single line containing \\"Yes\\" or \\"No\\" based on whether the array of integers can be rearranged to be in a strictly increasing or decreasing order. Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - -10^3 ≤ A_i ≤ 10^3 Example Input: 3 5 2 3 1 5 4 4 1 2 3 4 3 5 5 5 Output: Yes Yes No Explanation Example 1: The array [2, 3, 1, 5, 4] can be rearranged as [1, 2, 3, 4, 5] which is strictly increasing, so the output is \\"Yes\\". Example 2: The array [1, 2, 3, 4] is already strictly increasing, so the output is \\"Yes\\". Example 3: The array [5, 5, 5] cannot be rearranged to strictly increase or decrease since all elements are the same, so the output is \\"No\\".","solution":"def can_rearrange_strictly_monotonic(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] array = test_cases[i][1] # Check for strictly increasing rearrangement sorted_array = sorted(array) if all(sorted_array[j] < sorted_array[j + 1] for j in range(n - 1)): results.append(\\"Yes\\") else: # Check for strictly decreasing rearrangement sorted_array = sorted(array, reverse=True) if all(sorted_array[j] > sorted_array[j + 1] for j in range(n - 1)): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"John is very interested in number theory and particularly enjoys working with prime numbers. Recently he came across a special type of sequence problem and decided to explore it further. The problem requires him to find the number of distinct sequences of integers from 1 to n such that the GCD (Greatest Common Divisor) of every consecutive pair of elements in the sequence is a prime number. Given an integer n, can you help John determine the number of such distinct sequences modulo 10^9 + 7? Input The input is a single integer n (1 ≤ n ≤ 10^6) - the length of the sequences. Output Output the number of distinct sequences of length n such that the GCD of every consecutive pair in the sequence is a prime number, modulo 10^9 + 7. Examples Input 3 Output 12 Input 5 Output 20 Input 2 Output 4 Note For the first input example, the sequences of length 3 where the GCD of every consecutive pair is a prime number can be: [2, 3, 2], [2, 3, 3], [2, 5, 2], [2, 5, 5], [3, 2, 3], [3, 2, 2], [3, 5, 3], [3, 5, 5], [5, 2, 5], [5, 2, 2], [5, 3, 5], [5, 3, 3], hence the output is 12.","solution":"MOD = 10**9 + 7 def count_sequences(n): Returns the number of distinct sequences of length n such that the GCD of every consecutive pair is a prime number. if n == 1: return 3 primes = [2, 3, 5] base_count = len(primes) # number of primes to use total_sequences = 1 for _ in range(n): total_sequences = (total_sequences * base_count) % MOD return total_sequences"},{"question":"Micro is planning to attend a concert tomorrow and wants to ensure he has sufficient battery on his phone to last through the evening. He is a meticulous planner and has a list of N apps on his phone along with their respective battery usage per hour. Given his phone\'s current battery percentage, he wants to determine the maximum number of continuous hours he can use it before the battery runs out completely. Each app has the following characteristics: - Battery usage rate: the percentage of battery consumed by using the app for one hour. You need to write a program that calculates the maximum continuous hours Micro\'s phone can last, given his battery percentage and the list of apps along with their battery usage rates. Input: - The first line consists of an integer N, the number of apps. - The second line consists of N integers separated by space, indicating the battery usage rate for each app per hour. - The third line consists of a single integer, the current battery percentage (a value between 1 and 100 inclusive). Output: - Output the maximum number of continuous hours Micro\'s phone can last. Constraints: 1 ≤ N ≤ 100 1 ≤ Battery usage rate of each app ≤ 100 1 ≤ Current battery percentage ≤ 100 SAMPLE INPUT 3 20 5 10 50 SAMPLE OUTPUT 10 Explanation In the sample input, Micro has 3 apps with battery usage rates of 20%, 5%, and 10% per hour. The phone\'s current battery percentage is 50%. Micro can select the app that uses 5% battery per hour and continuously use his phone for 10 hours (5% * 10 = 50%). Therefore, the maximum number of continuous hours he can use his phone is 10 hours.","solution":"def max_continuous_hours(N, battery_usage_rates, current_battery_percentage): Determines the maximum number of continuous hours the phone can last. Parameters: N (int): Number of apps. battery_usage_rates (List[int]): List of battery usage rates for each app. current_battery_percentage (int): Current battery percentage of the phone. Returns: int: Maximum continuous hours the phone can last. min_battery_usage_rate = min(battery_usage_rates) return current_battery_percentage // min_battery_usage_rate"},{"question":"A group of friends are playing a game with a magical maze. The maze is represented by a grid of size m x n, where each cell either contains a wall (\'#\') or is empty (\'.\'). The friends start from a given starting cell (sx, sy) and want to reach a defined exit cell (ex, ey). In each move, the friends can move to any of the 8 adjacent cells (horizontally, vertically, or diagonally), but they cannot move through walls. Moreover, the magical maze has teleportation portals that connect specific pairs of cells bidirectionally. This means if a friend enters one cell of the portal pair, they instantly appear at the other cell. The objective of the task is to determine if the friends can reach the exit cell from the starting cell using the allowed moves and teleportation portals. Print \\"YES\\" if they can reach the exit and \\"NO\\" otherwise. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the maze. The next m lines contain n characters each, representing the maze layout. Each character is either \'.\' (an empty cell) or \'#\' (a wall). The next line contains two integers, sx and sy (1 ≤ sx, sy ≤ m, n) — the starting cell coordinates (1-based). The next line contains two integers, ex and ey (1 ≤ ex, ey ≤ m, n) — the exit cell coordinates (1-based). The next line contains one integer p (0 ≤ p ≤ 100) — the number of teleportation portals. The next p lines each contain four integers a1, b1, a2, b2 (1 ≤ a1, b1, a2, b2 ≤ m,n) — the coordinates (1-based) of each pair of teleportation portals\' connected cells. Output Print \\"YES\\" if friends can reach the exit cell, otherwise print \\"NO\\". Examples Input 5 5 ..... .#.#. . ..... ..... 1 1 5 5 2 2 2 4 4 5 5 3 3 Output YES Input 3 4 #. #. 1 2 3 4 0 Output NO Note In the first sample, the friends can move from (1, 1) to (2, 1), (2, 2), and then teleport to (4, 4). From there, they can move down to (5, 4) and move left to the exit at (5, 5). In the second sample, there is no way for the friends to reach the exit because of the walls blocking the way.","solution":"from collections import deque def can_reach_exit(m, n, maze, sx, sy, ex, ey, portals): # Adjust coordinates from 1-based to 0-based sx -= 1 sy -= 1 ex -= 1 ey -= 1 portals = [(a1-1, b1-1, a2-1, b2-1) for a1, b1, a2, b2 in portals] # Directions for 8 possible moves (horizontally, vertically, and diagonally) directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] # Portal dictionary for quick lookup portal_dict = {} for a1, b1, a2, b2 in portals: if (a1, b1) not in portal_dict: portal_dict[(a1, b1)] = [] if (a2, b2) not in portal_dict: portal_dict[(a2, b2)] = [] portal_dict[(a1, b1)].append((a2, b2)) portal_dict[(a2, b2)].append((a1, b1)) # BFS Initialization queue = deque([(sx, sy)]) visited = set() visited.add((sx, sy)) # BFS Loop while queue: x, y = queue.popleft() # If we reached the exit if (x, y) == (ex, ey): return \\"YES\\" # Check all 8 possible moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and maze[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) # Check teleportation portals if (x, y) in portal_dict: for tx, ty in portal_dict[(x, y)]: if (tx, ty) not in visited: visited.add((tx, ty)) queue.append((tx, ty)) return \\"NO\\""},{"question":"You are given a binary tree with `N` nodes. Each node has a unique integer identifier from 1 to N, and a positive integer weight. Write a function to find the path from the root to any leaf that has the maximum sum of weights. If there are multiple paths with the same maximum sum, return the one which lexicographically smallest when viewed as sequences of node identifiers. Constraints * 1 ≤ N ≤ 10^5 * The weight of each node is a positive integer not exceeding 10^9. Input The input is given from Standard Input in the following format: N id_1 weight_1 parent_1 id_2 weight_2 parent_2 ... id_N weight_N parent_N * `N` is the number of nodes. * `id_i` is the identifier of the `i`-th node. * `weight_i` is the weight of the `i`-th node. * `parent_i` is the identifier of the parent node of the `i`-th node. The root node has a parent identifier of 0. Output Print a sequence of node identifiers that denotes the path from the root to any leaf with the maximum sum of weights. If there are multiple paths with the same sum, print the lexicographically smallest sequence. Examples Input 5 1 10 0 2 5 1 3 20 1 4 2 3 5 1 3 Output 1 3 4 Input 4 1 100 0 2 50 1 3 50 1 4 1 2 Output 1 100 2 4","solution":"from collections import defaultdict import heapq def find_max_sum_path(N, nodes): # Create adjacency list and weight dictionary tree = defaultdict(list) weight = {} root = None for node in nodes: id_i, weight_i, parent_i = node weight[id_i] = weight_i if parent_i == 0: root = id_i else: tree[parent_i].append(id_i) # Use a max heap to find the path with the maximum weight sum max_heap = [(-weight[root], [root])] max_sum_path = [] while max_heap: curr_sum, path = heapq.heappop(max_heap) curr_sum = -curr_sum current_node = path[-1] if not tree[current_node]: # If it\'s a leaf node if not max_sum_path or curr_sum > weight_sum_path(max_sum_path, weight) or (curr_sum == weight_sum_path(max_sum_path, weight) and path < max_sum_path): max_sum_path = path else: for child in sorted(tree[current_node]): new_path = path + [child] heapq.heappush(max_heap, (-(curr_sum + weight[child]), new_path)) return max_sum_path def weight_sum_path(path, weight): return sum(weight[node] for node in path) def parse_input(input_str): lines = input_str.strip().split(\\"n\\") N = int(lines[0]) nodes = [tuple(map(int, line.split())) for line in lines[1:]] return N, nodes def main(input_str): N, nodes = parse_input(input_str) max_sum_path = find_max_sum_path(N, nodes) print(\\" \\".join(map(str, max_sum_path)))"},{"question":"You are given an array of integers representing the heights of a group of people standing in a line. The positions of the people are fixed, but you want to select a contiguous segment of people (subarray) such that the heights of the selected people are increasing when looked at from left to right. What is the length of the longest increasing contiguous subarray you can select? Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of people in the line. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the heights of the people in the order they are standing. Output Print one integer — the length of the longest increasing contiguous subarray. Examples Input 7 1 2 2 5 6 3 7 Output 3 Input 5 3 3 3 3 3 Output 1 Note In the first example, the longest increasing contiguous subarray is [2, 5, 6], thus the answer is 3. In the second example, there is no increasing contiguous subarray longer than 1 element, thus the answer is 1.","solution":"def longest_increasing_subarray(arr): Returns the length of the longest increasing contiguous subarray. n = len(arr) if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if arr[i] > arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length # Example usage: # arr = [1, 2, 2, 5, 6, 3, 7] # print(longest_increasing_subarray(arr)) # Output: 3"},{"question":"You are given a cube of side length N. You need to paint the entire surface of the cube. To do this efficiently, you want to know the minimum number of distinct square patches with integer side lengths that can cover the entire surface of the cube without overlapping. You can use any number and size of square patches, as long as their total area covers the entire surface area of the cube. Input The input consists of a single integer N (1 ≤ N ≤ 100), the side length of the cube. Output Print the minimum number of distinct square patches needed to cover the entire surface area of the cube. Examples Input 1 Output 6 Input 2 Output 6 Input 3 Output 6 Note Explanation: - For N = 1: The cube surface can be covered by 6 patches of 1x1 each. - For N = 2: Each face of the cube can be divided into 1 distinct 2x2 patches, hence 6 patches are needed. - For N = 3: Each face of the cube can be divided into 1 distinct 3x3 patches, hence 6 patches are needed. In general, for a cube with side length N, 6 patches of NxN size will always be the minimum number of patches required to cover the entire surface area.","solution":"def min_patches_to_cover_cube(N): This function calculates the minimum number of distinct square patches needed to cover the entire surface area of a cube with side length N. Parameters: - N (int): The side length of the cube (1 ≤ N ≤ 100) Returns: - int: The minimum number of distinct square patches needed # Each face of the cube of side N can be covered by one square patch of side N # There are 6 faces in a cube return 6"},{"question":"Determine the number of ways to partition a set of \'n\' integers into \'k\' non-empty subsets such that each subset has a non-decreasing order. Input The first line of input contains two integers, \'n\' and \'k\' (1 ≤ k ≤ n ≤ 1000). The second line contains \'n\' space-separated integers, a0, a1, ..., an-1 (1 ≤ ai ≤ 1000 for each 0 ≤ i < n). Output Print the number of possible partitions modulo 1,000,000,007. Examples Input 4 2 1 2 3 4 Output 7 Input 5 3 3 1 4 2 5 Output 25 Note In the first sample case, there are 7 ways to partition the set {1, 2, 3, 4} into 2 non-empty subsets in non-decreasing order: 1. {1, 2} and {3, 4} 2. {1, 3} and {2, 4} 3. {1, 4} and {2, 3} 4. {1} and {2, 3, 4} 5. {2} and {1, 3, 4} 6. {3} and {1, 2, 4} 7. {4} and {1, 2, 3} In the second sample case, the partitions should be constructed similarly but keeping the non-decreasing order of elements within each subset.","solution":"def count_partitions(n, k, arr): MOD = 1000000007 # Initialize a dp table with dimensions (n + 1) x (k + 1) dp = [[0] * (k + 1) for _ in range(n + 1)] dp[0][0] = 1 # Sort the array as the partition needs to be in non-decreasing order arr.sort() # Calculate the Stirling numbers of the second kind for i in range(1, n + 1): for j in range(1, k + 1): dp[i][j] = (dp[i - 1][j - 1] + (j * dp[i - 1][j]) % MOD) % MOD return dp[n][k]"},{"question":"Given a list of integers, find the maximum sum possible of any non-empty subarray. A subarray is a contiguous segment of an array. Input A list of n integers (-10^4 ≤ ai ≤ 10^4, 1 ≤ n ≤ 10^6). Output The maximum sum of any subarray in a line. Examples Input [-2,1,-3,4,-1,2,1,-5,4] Output 6 Input [1] Output 1","solution":"def max_subarray_sum(nums): Returns the maximum sum of any non-empty subarray in nums. Args: nums: A list of integers. Returns: An integer representing the maximum sum of any subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) max_global = max(max_global, max_current) return max_global"},{"question":"A company is scheduling meetings in their conference room. Each meeting has a start time and an end time, and no two meetings can be held at the same time in the conference room. You are given a list of meetings with their start and end times, and you need to determine the maximum number of meetings that can be held in the conference room without conflicts. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of meetings. The next n lines each contain two integers s and e (0 ≤ s < e ≤ 10000) — the start and end times of the meetings. Output Print a single integer — the maximum number of non-conflicting meetings that can be held in the conference room. Examples Input 3 1 4 2 5 6 8 Output 2 Input 4 1 2 3 4 0 6 5 7 Output 3 Note In the first example, the optimal schedule is to hold meetings at times (1, 4) and (6, 8). In the second example, the optimal schedule is to hold meetings at times (1, 2), (3, 4), and (5, 7), which totals three meetings.","solution":"def max_meetings(n, meetings): # Sort meetings by their end times meetings.sort(key=lambda x: x[1]) # Initialize variables max_count = 0 last_end_time = 0 # Iterate through the meetings for start, end in meetings: if start >= last_end_time: max_count += 1 last_end_time = end return max_count"},{"question":"Write a function that takes an input string containing a list of integers separated by spaces, and returns the second largest unique integer in the list. If the list contains fewer than two unique integers, return `None`. You can assume the following conditions: * The integers will be in the range from -10^6 to 10^6. * The length of the input string will be less than or equal to 1000 characters. Input A string with a list of integers separated by spaces. Output The second largest unique integer, or `None` if there are fewer than two unique integers. Example Input \\"4 2 3 1 2 3 5\\" Output 4 Input \\"7 7 7 7 7\\" Output None","solution":"def second_largest_unique_integer(s): Returns the second largest unique integer in the list of integers from the input string. If there are fewer than two unique integers, return None. integers = list(map(int, s.split())) unique_integers = set(integers) if len(unique_integers) < 2: return None sorted_uniques = sorted(unique_integers, reverse=True) return sorted_uniques[1]"},{"question":"Jessie loves playing games that involve strings and patterns. One day, she decided to play a game where she manipulates strings based on certain rules. Given a string S, and an integer K, she needs to create a new string T by repeating a substring of length K from S. However, the substring must start from the beginning of S and should be repeated until the resulting string T is of length N. If the substring does not fit perfectly into the length N, truncate the remaining characters. Your task is to help Jessie compute the string T. Example: For S = \\"abcde\\" and K = 2, the substring is \\"ab\\". Say N = 7, thus T is created by repeating \\"ab\\" as many times as possible within length 7 which results in \\"abababa\\". Input The first line of input contains an integer T, denoting the number of test cases. Each test case consists of a single line containing two integers N and K, followed by a string S. Output For each test case, output the string T. Constraints 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^6 1 ≤ K ≤ |S| ≤ 10^6 Example Input: 2 7 2 abcde 8 3 hello Output: abababa helhelhe Explanation Example case 1: Substring of length 2 from the start is \\"ab\\". Repeating \\"ab\\" until we get length 7 results in \\"abababa\\". Example case 2: Substring of length 3 from the start is \\"hel\\". Repeating \\"hel\\" until we get length 8 results in \\"helhelhe\\".","solution":"def create_string_repeated_substring(T, test_cases): Creates a new string T by repeating a substring of length K from S for each test case. Parameters: T (int): number of test cases test_cases (list of tuples): each tuple contains (N, K, S) for a test case Returns: list of str: the resulting strings for each test case results = [] for (N, K, S) in test_cases: substring = S[:K] repeated_str = (substring * ((N // K) + 1))[:N] results.append(repeated_str) return results"},{"question":"In a given list of integers, you need to find the element that appears more than half the times. For example, in the list [3, 3, 4, 2, 3, 3, 5, 3], the element 3 appears 5 times, which is more than half of the length of the list. Write a function that returns the majority element in the list. Input Format The first line contains an integer T, which is the number of test cases. Next T lines each contain a list of integers separated by space. Output Format Print the majority element for each test case. If there is no majority element, print \\"No majority element\\". Constraints 1 ≤ T ≤ 100 1 ≤ length of each list ≤ 1000 -10^9 ≤ each element in the list ≤ 10^9 SAMPLE INPUT 2 3 3 4 2 3 3 5 3 1 2 3 4 SAMPLE OUTPUT 3 No majority element","solution":"def find_majority_element(lst): Returns the majority element of the list if it exists, otherwise returns \\"No majority element\\". candidate, count = None, 0 for num in lst: if count == 0: candidate, count = num, 1 elif num == candidate: count += 1 else: count -= 1 # Verify if candidate is a majority element if lst.count(candidate) > len(lst) // 2: return candidate else: return \\"No majority element\\" def process_test_cases(test_cases): Processes multiple test cases. results = [] for test in test_cases: lst = list(map(int, test.split())) results.append(find_majority_element(lst)) return results"},{"question":"Write a program that implements a simple text editor with undo functionality. The editor supports the following commands: * `append string: Append `string` to the end of the current text. * `delete k: Delete the last k characters from the current text. * `print k: Print the k-th character of the current text (1-indexed). * `undo`: Undo the last `append` or `delete` operation. An `undo` operation only undoes the most recent operation that has not already been undone. Constraints * The number of operations leq 100,000. * The length of the text leq 1,000,000 at any time. * The length of `string` and `k will be valid based on the current text length. Input In the first line, the number of operations n is given. In the following n lines, each line is one of the operations mentioned above: `append string`, `delete k`, `print k`, or `undo`. Output For each `print k` operation, print the corresponding character on a new line. Example Input 8 append abc append def print 6 delete 3 print 3 undo print 6 undo Output f c f","solution":"class SimpleTextEditor: def __init__(self): self.text = \\"\\" self.history = [] def append(self, string): self.history.append(self.text) self.text += string def delete(self, k): self.history.append(self.text) self.text = self.text[:-k] def print_char(self, k): print(self.text[k-1]) def undo(self): if self.history: self.text = self.history.pop() def process_operations(operations): editor = SimpleTextEditor() output = [] for op in operations: if op.startswith(\\"append\\"): _, string = op.split(maxsplit=1) editor.append(string) elif op.startswith(\\"delete\\"): _, k = op.split() editor.delete(int(k)) elif op.startswith(\\"print\\"): _, k = op.split() output.append(editor.text[int(k) - 1]) elif op == \\"undo\\": editor.undo() return output # Sample use including debug prints if __name__ == \\"__main__\\": n = 8 operations = [ \\"append abc\\", \\"append def\\", \\"print 6\\", \\"delete 3\\", \\"print 3\\", \\"undo\\", \\"print 6\\", \\"undo\\" ] results = process_operations(operations) for res in results: print(res)"},{"question":"You are given a 2D matrix of integers where each row and each column is sorted in ascending order. Your task is to find if a given target number exists in this matrix. Write a function `bool searchMatrix(vector<vector<int>>& matrix, int target)` to solve the problem. Input - The first line contains two integers m and n (1 ≤ m, n ≤ 300), the dimensions of the matrix. - The next m lines each contain n integers, representing the elements of the matrix, with each row sorted in ascending order. - The final line contains an integer target, the number you need to check for. Output - Return true if the target number exists in the matrix, otherwise return false. Example Input 3 4 1 4 7 11 2 5 8 12 3 6 9 16 5 Output true Input 3 4 1 4 7 11 2 5 8 12 3 6 9 16 20 Output false Note In the first example, the matrix is: 1 4 7 11 2 5 8 12 3 6 9 16 The target number 5 is present in the matrix, so the function should return true. In the second example, the matrix is: 1 4 7 11 2 5 8 12 3 6 9 16 The target number 20 is not present in the matrix, so the function should return false.","solution":"def searchMatrix(matrix, target): Returns true if target exists in the sorted matrix, false otherwise. if not matrix: return False m, n = len(matrix), len(matrix[0]) row, col = 0, n - 1 while row < m and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] < target: row += 1 else: col -= 1 return False"},{"question":"Alice is writing a book that consists of exactly n chapters. She wants to create a print-ready version of her book, and she needs to determine the order in which the chapters should appear. However, each chapter might refer to some other chapters, implying that one chapter must appear before another. For example, if chapter 1 refers to chapter 2, then chapter 2 should appear before chapter 1 in the final version. Alice can write each chapter once and can write multiple chapters in parallel. She needs to ensure that the final version respects these dependencies and wants your help to determine a valid order for printing her chapters. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 105) — number of chapters and number of dependencies respectively. The next m lines each contain two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), indicating that chapter bi should appear before chapter ai. Output Output a single line with n integers representing a valid order of chapters. If there are multiple valid orders, any of them will be accepted. If there is no valid order that satisfies the given dependencies, print \\"IMPOSSIBLE\\". Examples Input 3 2 1 2 2 3 Output 3 2 1 Input 3 3 1 2 2 3 3 1 Output IMPOSSIBLE Note In the first sample, chapters 3, 2, and 1 should appear in sequence because chapter 2 should appear before chapter 1 and chapter 3 should appear before chapter 2. In the second sample, it is impossible to satisfy all dependencies because they form a cycle.","solution":"from collections import deque, defaultdict def find_chapter_order(n, m, dependencies): # Create a graph and a list to count the in-degrees of nodes graph = defaultdict(list) in_degree = [0] * (n + 1) # Populate the graph and in-degree list for a, b in dependencies: graph[b].append(a) in_degree[a] += 1 # Queue to store characters with 0 in-degree (i.e., no prerequisites) queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) order = [] while queue: current = queue.popleft() order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Check if we have been able to include all chapters in the order if len(order) == n: return order else: return \\"IMPOSSIBLE\\""},{"question":"A city is represented as a grid of n rows and m columns, where each cell (x, y) represents a building block located at the x-th row and y-th column. The city officials are planning to deploy security cameras in such a way that every building block in the grid is under surveillance. In terms of the grid, every camera placed at (x, y) can monitor all cells that share the same row x or the same column y with the cell (x, y). Your task is to determine the minimum number of cameras needed to ensure that every block in the city is monitored. Input: The first line contains two positive integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid respectively. Output: Print a single integer — the minimum number of cameras needed to monitor the entire city. Examples: Input: 2 3 Output: 2 Input: 4 4 Output: 4 Explanation: In the first example, placing cameras at (1,1) and (2,1) is sufficient to monitor all blocks as one camera monitors all cells in its row and column. In the second example, placing one camera in each row (or each column) ensures all cells are monitored. Placing in cells (1,1), (2,1), (3,1), and (4,1) for instance guarantees coverage of the entire grid.","solution":"def min_cameras(n, m): Returns the minimum number of cameras needed to monitor an n x m grid. # The minimum number of cameras needed is determined by the smaller of the two dimensions return min(n, m)"},{"question":"Byteforces University offers a unique opportunity for its students to participate in the BFC - Byteforces Financial Challenge. This challenge aims to test students\' ability to identify profitable investment opportunities by analyzing the daily stock prices of a given company. The challenge consists of a single task: given the daily closing prices of a company\'s stock over a period of n days, determine the maximum possible profit that can be achieved by buying and selling the stock exactly once. The student must buy the stock on one day and sell it on a later day. Please note that the student must buy the stock before they sell it, and they must complete exactly one transaction (i.e., one buy and one sell). If no profit can be achieved, the output should be zero. Input The input consists of two lines: - The first line contains an integer n (2 ≤ n ≤ 200000), the number of days. - The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 109), where pi is the closing price of the stock on the i-th day. Output Print the maximum possible profit that can be achieved from a single transaction. If no profit can be made, print 0. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Note In the first sample, the highest possible profit is achieved by buying the stock on day 2 (price = 1) and selling on day 5 (price = 6), yielding a profit of 5. In the second sample, the prices are continuously decreasing, so no profit can be made by buying and selling the stock. Therefore, the output is 0.","solution":"def max_profit(n, prices): if n < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given a list of positive integers and you need to form the largest possible integer by concatenating the numbers together. Input - The first line contains an integer n (1 ≤ n ≤ 100), the number of integers in the list. - The second line contains n positive integers each less than 10^9. Output Output the largest possible integer formed by concatenating the given numbers. Examples Input 3 10 2 9 Output 9102 Input 4 54 546 548 60 Output 6054854654","solution":"from functools import cmp_to_key def compare(x, y): if x + y > y + x: return -1 else: return 1 def largest_number(n, numbers): numbers = [str(number) for number in numbers] numbers.sort(key=cmp_to_key(compare)) return \'\'.join(numbers) def process_input(n, numbers): return largest_number(n, numbers) if __name__ == \\"__main__\\": import sys input = sys.stdin.read().split() n = int(input[0]) numbers = list(map(int, input[1:])) print(process_input(n, numbers))"},{"question":"Akiho is working on creating a secure communication system for her latest research project! She wants to encode messages by replacing each letter with the next letter in the alphabet, with \'z\' wrapping around to \'a\'. She needs your help to implement this encoding system. For example, the string \\"hello\\" would be encoded as \\"ifmmp\\" and the string \\"xyz\\" would be encoded as \\"yza\\". Write a program that takes an input string of lowercase letters and outputs the encoded string. Input The first line of input contains the string s (1 ≤ |s| ≤ 100), where s is a string of lowercase English letters. Output Print the encoded string, where each letter in the input string is replaced by the next letter in the alphabet. Examples Input hello Output ifmmp Input xyz Output yza Note In the first sample test, \'h\' is replaced with \'i\', \'e\' with \'f\', \'l\' with \'m\', \'l\' with \'m\', and \'o\' with \'p\', resulting in \\"ifmmp\\". In the second sample test, \'x\' is replaced with \'y\', \'y\' with \'z\', and \'z\' wraps around to \'a\', resulting in \\"yza\\".","solution":"def encode_message(s): Encodes the given string by replacing each letter with the next letter in the alphabet. \'z\' wraps around to \'a\'. encoded_chars = [] for char in s: if char == \'z\': encoded_chars.append(\'a\') else: encoded_chars.append(chr(ord(char) + 1)) return \'\'.join(encoded_chars)"},{"question":"A software application needs to manage a dynamic list of integers through a series of operations. You will implement a function to simulate this process and return the final state of the list after all operations have been performed. The operations are as follows: - \\"insert x\\" - insert the integer x at the end of the list. - \\"delete x\\" - delete the first occurrence of the integer x from the list (if it exists). - \\"double\\" - double the value of every integer in the list. - \\"decrement\\" - decrement the value of every integer in the list by 1. Given a sequence of such operations, you need to determine the final state of the list. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of operations. The next n lines each describe an operation in one of the formats shown above. Output Print the final list of integers, separated by spaces. If the list is empty, print the word \\"empty\\". Example Input 5 insert 3 insert 4 double delete 8 decrement Output 5 7 Explanation 1. Initially, the list is empty. 2. \\"insert 3\\" → [3] 3. \\"insert 4\\" → [3, 4] 4. \\"double\\" → [6, 8] 5. \\"delete 8\\" → [6] 6. \\"decrement\\" → [5] Hence, the final list is [5].","solution":"def process_operations(n, operations): Processes a list of operations on an initially empty list of integers and returns the final state of the list. Parameters: n (int): Number of operations to perform. operations (list of str): List of operations as strings. Returns: list: Final state of the list of integers, or \\"empty\\" if the list is empty. result = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"insert\\": result.append(int(parts[1])) elif command == \\"delete\\": x = int(parts[1]) if x in result: result.remove(x) elif command == \\"double\\": result = [x * 2 for x in result] elif command == \\"decrement\\": result = [x - 1 for x in result] return result if result else \\"empty\\""},{"question":"In a mythical land, there are magical flowers blossoming in a garden. These flowers grant special powers when picked. You, the Garden Keeper, are tasked with maintaining and harnessing this garden. The garden is represented as a 1-dimensional array of integers where each integer represents the number of flowers at that particular position. Throughout the day, queries are issued to either modify the number of flowers on some segment of the garden or to determine the maximum number of flowers in a given segment. You are given q queries which are of two types: * 1 a b k — add k flowers to each position from index a to index b (0 ≤ a ≤ b < n) * 2 a b — compute the maximum number of flowers in positions from index a to index b (0 ≤ a ≤ b < n) Input The first line contains a single integer n (1 ≤ n ≤ 200 000), the length of the array representing the garden. The second line contains n integers f1, f2, ..., fn (0 ≤ fi ≤ 5 000), the initial number of flowers at each position. The third line contains a single integer q (1 ≤ q ≤ 300 000), the number of queries. The following q lines contain one query each. Each query is provided by integers a, b and, possibly, k (0 ≤ a ≤ b < n, 0 ≤ k ≤ 5 000). Output For each second type of query output the maximum number of flowers in the specified segment. Example Input 4 2 3 4 1 3 2 1 3 1 0 2 2 2 0 3 Output 4 6 Note For the first query, the maximum number of flowers in the segment from index 1 to 3 is 4. For the second query, after adding 2 flowers to each of the positions from index 0 to 2, the garden array becomes [4, 5, 6, 1]. Then the maximum number of flowers in the segment from index 0 to 3 is 6.","solution":"class GardenKeeper: def __init__(self, flowers): self.flowers = flowers def add_flowers(self, a, b, k): for i in range(a, b+1): self.flowers[i] += k def max_flowers(self, a, b): return max(self.flowers[a:b+1]) def garden_queries(n, flowers, queries): keeper = GardenKeeper(flowers) results = [] for query in queries: if query[0] == 1: _, a, b, k = query keeper.add_flowers(a, b, k) elif query[0] == 2: _, a, b = query results.append(keeper.max_flowers(a, b)) return results"},{"question":"Karen is organizing a bake sale and has baked a variety of cupcakes. She wants to give each visitor a bag of cupcakes containing at least one of each type she has. Karen can only place one specific type of cupcake in each slot of a bag. Given the total number of cupcakes of each type she baked, determine how many unique ways Karen can pack the cupcakes into bags such that each bag contains at least one of each type of cupcake. Constraints: * 1 ≤ T ≤ 10, where T is the number of different types of cupcakes. * 1 ≤ C_i ≤ 20, where C_i is the number of cupcakes of type i that Karen baked. Input: The input consists of: * An integer T, the number of different types of cupcakes. * A list of T integers, where the i-th integer represents C_i, the number of cupcakes of the i-th type. Output: Print the number of unique ways to distribute the cupcakes into bags such that each bag contains at least one of each type of cupcake. Examples: Input: 3 2 2 2 Output: 7 Input: 2 1 2 Output: 1 Input: 4 1 1 1 1 Output: 1","solution":"def count_ways_to_pack(T, cupcake_counts): Returns the number of unique ways to pack the cupcakes into bags such that each bag contains at least one of each type of cupcake. unique_ways = 1 for count in cupcake_counts: unique_ways *= count return unique_ways def main(): T = int(input().strip()) cupcake_counts = list(map(int, input().strip().split())) print(count_ways_to_pack(T, cupcake_counts))"},{"question":"Write a function that determines if a sequence of parentheses is valid. A valid sequence obeys the following rules: 1. Open parentheses `(` must be closed by matching closing parentheses `)`. 2. Open parentheses must be closed in the correct order. Given multiple sequences of parentheses, you need to determine if each sequence is valid. Input The first line contains the integer T (1 ≤ T ≤ 100) — the number of sequences. Each of the following T lines contains a sequence of parentheses, where the length of each sequence is between 1 and 100, inclusive. Output For each sequence, print \\"YES\\" if the sequence is valid, and \\"NO\\" otherwise. Example Input 3 () ()() (()) Output YES YES YES","solution":"def is_valid_parentheses_sequence(sequence): Returns \\"YES\\" if the sequence of parentheses is valid, otherwise \\"NO\\". stack = [] for char in sequence: if char == \'(\': stack.append(char) elif char == \')\': if stack: stack.pop() else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\" def check_sequences(sequences): Given a list of sequences, returns a list of results indicating if each sequence is valid. return [is_valid_parentheses_sequence(seq) for seq in sequences]"},{"question":"A city grid is represented as a grid of size n x n, where some cells are marked as obstacles. You are given the position of a starting cell (sx, sy) and a destination cell (dx, dy). You need to determine the minimum number of steps required to move from the start cell to the destination cell, moving only up, down, left, or right, without passing through any obstacles. Given that the city grid is represented with the following: - \'.\' represents an empty cell - \'#\' represents an obstacle If it\'s impossible to reach the destination, return -1. Input - The first line contains an integer n (1 ≤ n ≤ 100). - The next n lines each contain n characters indicating the city grid. - The next line contains two space-separated integers, sx and sy (0 ≤ sx, sy < n) indicating the starting cell. - The last line contains two space-separated integers, dx and dy (0 ≤ dx, dy < n) indicating the destination cell. Output Print a single integer — the minimum number of steps required to travel from the start cell to the destination cell. If it is impossible to reach the destination, print -1. Examples Input 5 ..... .#... ..... ...#. ..... 0 0 4 4 Output 8 Input 5 ..... .#... ..... ...#. ..... 0 0 3 3 Output -1","solution":"from collections import deque def min_steps_to_dest(n, grid, sx, sy, dx, dy): Returns the minimum number of steps to go from (sx, sy) to (dx, dy) in a grid. If the destination is unreachable, returns -1. if grid[sx][sy] == \'#\' or grid[dx][dy] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * n for _ in range(n)] queue = deque([(sx, sy, 0)]) visited[sx][sy] = True while queue: x, y, steps = queue.popleft() if x == dx and y == dy: return steps for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == \'.\' and not visited[nx][ny]: queue.append((nx, ny, steps + 1)) visited[nx][ny] = True return -1"},{"question":"You are given a list of strings, each containing only lowercase letters. Your goal is to sort this list, but with a twist: the sorting must base on a custom-defined order of the alphabet. You will be provided with this custom order in the form of a string containing all 26 letters of the alphabet in the desired order. Write a program to perform this custom-alphabet sorting. # Input - The first line contains a single string of length 26 representing the custom alphabet order. - The second line contains an integer n (1 ≤ n ≤ 100), representing the number of strings in the list. - The following n lines each contain one string, representing the list of strings to sort. # Output - Print the n strings sorted according to the custom alphabet order. # Examples Example 1 # Input ``` zyxwvutsrqponmlkjihgfedcba 5 apple banana cherry date elderberry ``` # Output ``` elderberry date cherry banana apple ``` Example 2 # Input ``` abcdefghijklmnopqrstuvwxyz 3 cat bat rat ``` # Output ``` bat cat rat ``` # Note - You can assume the input is always valid. - The custom order implies how you should prioritize letters when comparing the strings.","solution":"def custom_sort(custom_order, n, strings): Sorts the list of strings based on the custom alphabet order. Parameters: - custom_order (str): A string containing all 26 letters in the desired order. - n (int): Number of strings in the list. - strings (list of str): The list of strings to be sorted. Returns: - list of str: The sorted list of strings. # Create a dictionary for custom order ranking rank = {char: i for i, char in enumerate(custom_order)} # Sort the list of strings based on custom order sorted_strings = sorted(strings, key=lambda word: [rank[char] for char in word]) return sorted_strings"},{"question":"Given an integer array A and an integer target sum T, determine if there are two distinct elements in A that sum up to T. If such a pair exists, print \\"YES\\". Otherwise, print \\"NO\\". Constraints * A is an array of integers. * Each element of A is between -1000 and 1000 (inclusive). * The length of A is between 2 and 100 (inclusive). * T is an integer between -2000 and 2000 (inclusive). Input Input is given from Standard Input in the following format: ``` N A T ``` where: - N is the length of the array - A is a space-separated list of integers - T is the target sum Output Output is a single line consisting of either \\"YES\\" or \\"NO\\". Examples Input ``` 5 1 2 3 9 14 11 ``` Output ``` YES ``` Input ``` 4 -1 -2 -3 -4 -8 ``` Output ``` NO ``` Input ``` 6 10 15 3 7 5 1 17 ``` Output ``` YES ```","solution":"def two_elements_sum_to_target(N, A, T): Determines if any two distinct elements in array A sum up to target T. seen_elements = set() for number in A: if (T - number) in seen_elements: return \\"YES\\" seen_elements.add(number) return \\"NO\\" # Input parsing function def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:N+1])) T = int(data[N+1]) print(two_elements_sum_to_target(N, A, T))"},{"question":"You are managing a movie screening system, and you need to calculate the maximum number of non-overlapping screenings that can be scheduled. Each movie has a start and end time, and no two movies can overlap. The goal is to find the optimal subset of movies that can be shown without any time conflicts. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of movies. The following n lines contain two integers each, start_i and end_i (1 ≤ start_i < end_i ≤ 1000000) — the start and end times of each movie. Output Print the maximum number of non-overlapping screenings. Examples Input 3 1 3 2 5 4 7 Output 2 Input 4 1 2 2 3 3 4 4 5 Output 4","solution":"def schedule_movies(n, screenings): Given the number of movies and their start and end times, this function calculates the maximum number of non-overlapping screenings that can be scheduled. # Sort the movies by their end times screenings.sort(key=lambda x: x[1]) max_screenings = 0 last_end_time = 0 for start, end in screenings: if start >= last_end_time: max_screenings += 1 last_end_time = end return max_screenings"},{"question":"Alex is organizing a grand event to celebrate the opening of his new museum. The event will feature a sequence of performances that need to be scheduled in a specific order. Each performance requires a certain amount of time to set up, perform, and then to dismantle. However, due to some constraints, certain performances cannot appear consecutively. Your task is to determine a valid sequence of performances such that no prohibited pairs are adjacent and the total setup and teardown time is minimized. Input The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of performances. The second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 100,000) — the time required for each performance. The third line contains an integer k (0 ≤ k ≤ 1,000) — the number of prohibited consecutive performance pairs. Each of the next k lines contains two integers a, b (1 ≤ a, b ≤ n, a ≠ b) — indicating that performance a and performance b cannot be scheduled consecutively. Output Print a single line containing n integers — the sequence of performance indices that satisfies the constraints and minimizes the total setup and teardown time. If there are multiple solutions, print any one of them. If no solution exists, print -1. Examples Input 4 2 3 5 1 2 1 3 2 4 Output 2 1 4 3 Input 3 10 20 30 1 2 3 Output 1 2 3 Input 3 10 20 30 3 1 2 2 3 1 3 Output -1 Note In the first example, performances 1 and 3 cannot be scheduled consecutively, and performances 2 and 4 cannot be scheduled consecutively. One possible valid sequence is 2 1 4 3, which adheres to these constraints. In the second example, the only constraint is that performances 2 and 3 cannot be scheduled consecutively. The sequence 1 2 3 satisfies this constraint. In the third example, it is impossible to schedule the performances without violating at least one prohibition, so the output is -1.","solution":"import itertools def find_valid_sequence(n, times, k, prohibited_pairs): def is_valid_sequence(seq, prohibited_pairs_set): for i in range(1, len(seq)): if (seq[i-1], seq[i]) in prohibited_pairs_set or (seq[i], seq[i-1]) in prohibited_pairs_set: return False return True indices = list(range(1, n+1)) prohibited_pairs_set = set(tuple(pair) for pair in prohibited_pairs) for perm in itertools.permutations(indices): if is_valid_sequence(perm, prohibited_pairs_set): return \\" \\".join(map(str, perm)) return \\"-1\\" # Example for reference if __name__ == \\"__main__\\": n = 4 times = [2, 3, 5, 1] k = 2 prohibited_pairs = [(1, 3), (2, 4)] print(find_valid_sequence(n, times, k, prohibited_pairs)) # One possible output: \\"2 1 4 3\\""},{"question":"A research lab is conducting an experiment in a large rectangular field represented as a grid of size M x N. The grid contains some special plants, each marked by \'P\', and some ordinary cells marked by \'O\'. The lab wants to automate the process of measuring distances between two plants. It\'s important to note that you can only move horizontally or vertically between adjacent cells. You need to write a program to find the shortest distance between any two plants on the grid. Given the grid, find the shortest distance between any two special plants. If no such plants exist or there\'s only one plant in the field, return -1. INPUT: The first line of input contains two integers M and N, the number of rows and columns of the grid respectively. The next M lines each contain N characters, either \'P\' for a plant or \'O\' for an ordinary cell. OUTPUT: Print one integer being the shortest distance between any two plants. If no such plants exist or there\'s only one plant in the field, return -1. CONSTRAINTS: 1 ≤ M, N ≤ 1000 Each character in the grid will be either \'P\' or \'O\'. SAMPLE INPUT 5 5 O O O O O O P O O O O O P O O O O O P O P O O O O SAMPLE OUTPUT 2 Explanation: In the given grid, the shortest possible distance between any two plants is between the plant at position (2, 2) and the plant at position (3, 3). The distance is calculated as |2-3| + |2-3| = 1 + 1 = 2.","solution":"from collections import deque def shortest_distance(M, N, grid): def bfs(start): queue = deque([start]) distances = [[float(\'inf\')] * N for _ in range(M)] distances[start[0]][start[1]] = 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while queue: x, y = queue.popleft() current_distance = distances[x][y] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and distances[nx][ny] == float(\'inf\'): distances[nx][ny] = current_distance + 1 if grid[nx][ny] == \'P\': return distances[nx][ny] queue.append((nx, ny)) return float(\'inf\') plants = [(i, j) for i in range(M) for j in range(N) if grid[i][j] == \'P\'] if len(plants) < 2: return -1 shortest = float(\'inf\') for plant in plants: distance = bfs(plant) if distance < shortest: shortest = distance return shortest if shortest != float(\'inf\') else -1"},{"question":"You are given an array of integers representing the score of different players in a game. Your task is to find the player with the highest score difference with respect to the player with the minimum score who is not the overall minimum. Specifically, you need to find the player who has the highest score and subtract from it the score of the player who is the second lowest (i.e., the lowest score that is greater than the overall minimum score). If there is no such player (e.g., when all players have the same score or there is only one unique score in the list), return -1. Write a function to determine the maximum score difference. Input: - The first line of the input contains a single integer T (1 <= T <= 100), the number of test cases. - The following T lines each contain an integer n (2 <= n <= 100), the number of players, followed by an array of n integers representing the scores of the players. Output: - For each test case, print the maximum score difference, or -1 if the conditions described are not met. Example Input: 3 5 10 20 20 30 40 4 25 25 25 25 6 10 10 20 20 30 40 Example Output: 30 -1 30 Explanation: - In the first test case, the minimum score is 10 and the second lowest score is 20. The maximum score is 40. The difference is 40 - 10 = 30. - In the second test case, there is no second lowest score since all scores are the same. Thus, the output is -1. - In the third test case, the minimum score is 10 and the second lowest score is also 10. The maximum score is 40. The difference is 40 - 10 = 30.","solution":"def max_score_difference(T, test_cases): results = [] for i in range(T): n, scores = test_cases[i] unique_scores = sorted(set(scores)) if len(unique_scores) < 2: results.append(-1) else: min_score = unique_scores[0] second_min_score = unique_scores[1] max_score = unique_scores[-1] results.append(max_score - min_score) return results"},{"question":"You are given a string consisting of lowercase letters and you must perform some operations to transform it into a special string. A special string is defined as a string where no two adjacent characters are the same. In each operation, you can replace a character at any position of the string with any lowercase letter (\'a\' to \'z\'). You need to find the minimum number of operations required to transform the given string into a special string. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a string s with length between 1 and 100. Output For each test case, print the minimum number of operations required to transform the given string into a special string. Examples Input 3 ab aa abcabc Output 0 1 0 Explanation: In the first test case, the string \\"ab\\" is already a special string. In the second test case, the string \\"aa\\" can be transformed into \\"ab\\" with 1 operation. In the third test case, the string \\"abcabc\\" is already a special string.","solution":"def min_operations_to_special_string(s): Determines the minimum number of operations required to transform the given string s into a special string, where no two adjacent characters are the same. n = len(s) operations = 0 for i in range(1, n): if s[i] == s[i - 1]: operations += 1 # directly assuming the next valid char will be different from the current and previous one. # replacing s[i] with another character is assumed implicitly. return operations def process_cases(t, cases): Processes multiple test cases and outputs the minimum number of operations required for each case to transform the string into a special string. results = [] for case in cases: results.append(min_operations_to_special_string(case)) return results"},{"question":"Given a list of non-negative integers, write a function `pair_with_target_sum(nums, target)` that finds two numbers such that they add up to a specific target number and returns their indices as a tuple `(index1, index2)`. If no such pair exists, return `(-1, -1)`. The returned indices must be in ascending order. # Input - A list of non-negative integers `nums` (0 ≤ len(nums) ≤ 10^5, 0 ≤ nums[i] ≤ 10^9). - An integer `target` (0 ≤ target ≤ 2*10^9). # Output - A tuple of two integers `(index1, index2)`. # Examples Example 1: Input: ```python nums = [2, 7, 11, 15] target = 9 ``` Output: ```python (0, 1) ``` Explanation: - `nums[0] + nums[1] = 2 + 7 = 9` Example 2: Input: ```python nums = [1, 2, 3, 4, 5, 6] target = 10 ``` Output: ```python (3, 5) ``` Explanation: - `nums[3] + nums[5] = 4 + 6 = 10` Example 3: Input: ```python nums = [1, 2, 3] target = 7 ``` Output: ```python (-1, -1) ``` Explanation: - No two numbers add up to 7.","solution":"def pair_with_target_sum(nums, target): Finds two numbers in the list such that they add up to the target and returns their indices as a tuple. If no such pair exists, returns (-1, -1). num_to_index = {} for index, num in enumerate(nums): diff = target - num if diff in num_to_index: return (num_to_index[diff], index) num_to_index[num] = index return (-1, -1)"},{"question":"Background Given a piece of software used to manage a bookstore\'s inventory, one core functionality is to report on book categories, their total counts, and average prices for each category. The bookstore inventory can have multiple books within different categories. Problem You need to write a program that reads information about books and calculates the total count and average price of books in each category. The resulting information should be output in alphabetical order of book categories. Constraints Input meets the following conditions: * 1 ≤ number of books ≤ 100 * 1 ≤ price of each book ≤ 1000 * Book category names contain only alphanumeric characters and have length between 1 and 50 Input The input is provided in the following format: n category1 price1 category2 price2 ... categoryN priceN The first line contains an integer n, representing the number of books in the inventory. Each of the following n lines contains a string category_i and an integer price_i, separated by a space, representing the category and price of a book. Output For each category, output the category name, the total count of books in that category, and the average price of the books in that category with two decimal precision. Results should be output in alphabetical order of category names. Examples Input 5 fiction 300 science 450 fiction 500 history 200 science 300 Output fiction 2 400.00 history 1 200.00 science 2 375.00 Input 3 philosophy 600 thriller 750 philosophy 150 Output philosophy 2 375.00 thriller 1 750.00","solution":"def calculate_category_statistics(book_data): from collections import defaultdict book_counts = defaultdict(int) book_prices = defaultdict(list) for category, price in book_data: book_counts[category] += 1 book_prices[category].append(price) result = [] for category in sorted(book_counts.keys()): total_count = book_counts[category] average_price = sum(book_prices[category]) / total_count result.append((category, total_count, average_price)) return result def parse_input(input_data): lines = input_data.strip().split(\\"n\\") n = int(lines[0]) book_data = [] for line in lines[1:n+1]: category, price = line.split() book_data.append((category, int(price))) return book_data def format_output(statistics): lines = [] for category, count, avg_price in statistics: lines.append(f\\"{category} {count} {avg_price:.2f}\\") return \\"n\\".join(lines) def main(input_data): book_data = parse_input(input_data) statistics = calculate_category_statistics(book_data) return format_output(statistics)"},{"question":"In a kingdom far far away, there is a peculiar knight tournament. The tournament is held in a giant circular arena that accommodates exactly n knights. The knights are arranged in a circle and each holds a unique number from 1 to n. During the tournament, the knights perform a series of attacks in a specific pattern. The attack pattern is as follows: beginning with the knight numbered 1, he attacks the k-th knight clockwise and eliminates him from the circle. The next knight in line (clockwise to the eliminated one) continues the attack in the same manner until only one knight remains. The problem is to determine the number of the knight who will be the last one remaining. Input: The input consists of two integers n and k. Output: Print the number of the knight who will remain at the end. Constraints: 1 ≤ n ≤ 10^5 1 ≤ k ≤ 10^5 Example 1: Input: 7 3 Output: 4 Example 2: Input: 5 2 Output: 3 Explanation: - In the first example, knights are initially arranged as [1, 2, 3, 4, 5, 6, 7]. The sequence of eliminations is as follows: 1 attacks 3, leaving [1, 2, 4, 5, 6, 7]; 2 attacks 6, leaving [1, 2, 4, 5, 7]; 4 attacks 1, leaving [2, 4, 5, 7]; 2 attacks 5, leaving [2, 4, 7]; 4 attacks 2, leaving [4, 7]; 4 attacks 7, leaving [4]. - In the second example, knights are initially arranged as [1, 2, 3, 4, 5]. The sequence of eliminations is as follows: 1 attacks 3, leaving [1, 2, 4, 5]; 2 attacks 5, leaving [1, 2, 4]; 4 attacks 1, leaving [2, 4]; 2 attacks 4, leaving [2]. The last knight remaining in each of these examples is 4 and 3, respectively.","solution":"def last_knight_remaining(n, k): Returns the number of the last remaining knight in the tournament. Parameters: n (int): The total number of knights. k (int): The step count for each attack. Returns: int: The number of the last remaining knight. knights = list(range(1, n + 1)) index = 0 while len(knights) > 1: index = (index + k - 1) % len(knights) knights.pop(index) return knights[0]"},{"question":"A group of friends are planning a treasure hunt event. They decide to encode the treasure map using numeric codes for confidentiality. Each location on the map is represented by an integer. The treasure hunt follows a specific rule wherein each subsequent location can be found by transforming the current location\'s numeric code in the following way: 1. If the number is even, halve it. 2. If the number is odd, triple it and add one. The event starting point is given as a single integer and you need to find the number of steps required to reach the number 1 by repeatedly applying the above transformation rules. Input: First line of input contains an integer T, the number of test cases. Each test case contains a single integer N, the starting point of the treasure hunt. Output: For each test case, print the number of steps required to transform the starting integer N to 1. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^6 SAMPLE INPUT 3 4 7 15 SAMPLE OUTPUT 2 16 17","solution":"def steps_to_one(N): Returns the number of steps required to transform N to 1 following the specified transformation rules: - If N is even, halve it. - If N is odd, triple it and add one. steps = 0 while N != 1: if N % 2 == 0: N //= 2 else: N = 3 * N + 1 steps += 1 return steps def treasure_hunt(T, cases): For each case in cases, returns the number of steps required to transform the starting integer N to 1. results = [] for case in cases: results.append(steps_to_one(case)) return results"},{"question":"You are given two square matrices of the same size. Your task is to determine if the second matrix can be obtained by performing a rotation (0°, 90°, 180°, or 270°) on the first matrix. A square matrix of size n is represented by n lines, each containing n integers. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000), the size of the matrices. The next n lines contain n integers each, representing the first matrix. The following n lines contain n integers each, representing the second matrix. Output Print \\"YES\\" if the second matrix can be obtained by rotating the first matrix, otherwise print \\"NO\\". Examples Input 3 1 2 3 4 5 6 7 8 9 7 4 1 8 5 2 9 6 3 Output YES Input 2 1 2 3 4 4 3 2 1 Output NO","solution":"def can_obtain_by_rotation(n, matrix1, matrix2): Determines if matrix2 can be obtained by rotating matrix1 by 0°, 90°, 180°, or 270°. # Function to rotate matrix by 90 degrees clockwise def rotate_90(matrix): return list(zip(*matrix[::-1])) # Convert tuples to lists after rotation for comparison def convert_tuple_list(matrix): return [list(row) for row in matrix] # Rotate matrix1 by 0°, 90°, 180°, 270° and check for equality with matrix2 if matrix1 == matrix2: return \\"YES\\" rotated = rotate_90(matrix1) if convert_tuple_list(rotated) == matrix2: return \\"YES\\" rotated = rotate_90(rotated) if convert_tuple_list(rotated) == matrix2: return \\"YES\\" rotated = rotate_90(rotated) if convert_tuple_list(rotated) == matrix2: return \\"YES\\" return \\"NO\\""},{"question":"You are given a matrix consisting of N rows and M columns. Each cell contains a value representing the height of a terrain. You need to determine the number of local peaks in this matrix. A cell is considered a local peak if it is greater than all of its 4 neighboring cells (up, down, left, and right). Cells on the border of the matrix have fewer neighbors but can still be local peaks. Constraints * 1 leq N, M leq 1000 * 0 leq matrix[i][j] leq 10^6 * All values in Input are integers. Input The input is given from Standard Input in the following format: ``` N M matrix[0][0] matrix[0][1] ... matrix[0][M-1] matrix[1][0] matrix[1][1] ... matrix[1][M-1] . . . matrix[N-1][0] matrix[N-1][1] ... matrix[N-1][M-1] ``` Output Print the number of local peaks in the matrix. Example Input ``` 3 3 1 2 1 2 1 2 1 2 1 ``` Output ``` 4 ``` Input ``` 2 2 3 3 3 3 ``` Output ``` 0 ```","solution":"def count_local_peaks(matrix): Counts the number of local peaks in the given matrix. A cell is considered a local peak if it is greater than all of its 4 neighboring cells (up, down, left, and right). :param matrix: List of lists representing the matrix of terrain heights. :return: Number of local peaks in the matrix. if not matrix: return 0 N = len(matrix) M = len(matrix[0]) local_peaks = 0 for i in range(N): for j in range(M): current = matrix[i][j] is_peak = True # Check all four neighboring cells (up, down, left, right) for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]: ni, nj = i + di, j + dj if 0 <= ni < N and 0 <= nj < M: if matrix[ni][nj] >= current: is_peak = False break if is_peak: local_peaks += 1 return local_peaks # Reading input from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) matrix = [] for i in range(N): row = list(map(int, data[2 + i * M: 2 + (i + 1) * M])) matrix.append(row) print(count_local_peaks(matrix))"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to find the largest palindrome that can be formed by rearranging the characters of the string s. If there are multiple palindromes of the same length, return the lexicographically smallest one. If no palindrome can be formed, return the string \\"not possible\\". Input The first line of the input contains a single string s (1 ≤ |s| ≤ 10^5), consisting of lowercase English letters. Output Print one string — the largest possible palindrome that can be formed by rearranging the characters of the string s. If no palindrome can be formed, print \\"not possible\\". Examples Input aabbcc Output abccba Input abc Output not possible Input aaab Output not possible","solution":"from collections import Counter def largest_palindrome(s): Returns the largest palindrome that can be formed by rearranging the characters of the string s. If multiple palindromes of same length exist, returns the lexicographically smallest one. If no palindrome can be formed, returns \\"not possible\\". char_count = Counter(s) # Separate characters with odd and even counts odd_count_chars = [char for char, count in char_count.items() if count % 2 != 0] # If there are more than one character with odd count, palindrome is not possible if len(odd_count_chars) > 1: return \\"not possible\\" # Form the first half of the palindrome and then mirror it to form the full palindrome first_half = [] middle = \'\' for char in sorted(char_count.keys()): count = char_count[char] if count % 2 != 0: middle = char first_half.append(char * (count // 2)) first_half = \'\'.join(first_half) return first_half + middle + first_half[::-1]"},{"question":"Craft a function that takes as input a positive integer n and returns the digital root of n. The digital root is obtained by repeatedly summing the digits of n until a single-digit value is obtained. Input A single positive integer n (1 ≤ n ≤ 10^18). Output A single integer representing the digital root of n. Example Input 9875 Output 2 Example Explanation 1. Sum the digits of 9875: 9 + 8 + 7 + 5 = 29 2. Sum the digits of 29: 2 + 9 = 11 3. Sum the digits of 11: 1 + 1 = 2 4. The digital root of 9875 is 2.","solution":"def digital_root(n): Returns the digital root of n. Digital root is obtained by repeatedly summing the digits of n until a single-digit value is obtained. Args: n (int): A positive integer Returns: int: The digital root of n while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"Create a program that computes the length of the longest strictly increasing subsequence in a given sequence of numbers. You must output the length of the longest increasing subsequence (LIS) and also print one of such subsequences if there are multiple. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, given the sequence [10, 22, 9, 33, 21, 50, 41, 60, 80], one possible LIS is [10, 22, 33, 50, 60, 80], which has a length of 6. Input The input starts with a single integer n (1 ≤ n ≤ 100), representing the number of elements in the sequence. Next, a line containing n integers, representing the sequence of the numbers. Output Output the length of the longest increasing subsequence on the first line. Output one possible longest increasing subsequence on the second line. Example Input 9 10 22 9 33 21 50 41 60 80 Output 6 10 22 33 50 60 80","solution":"def longest_increasing_subsequence(sequence): Returns the length and one longest increasing subsequence from the given sequence of numbers. if not sequence: return 0, [] n = len(sequence) lis = [1] * n prev_index = [-1] * n for i in range(1, n): for j in range(0, i): if sequence[i] > sequence[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 prev_index[i] = j max_length = max(lis) max_index = lis.index(max_length) lis_sequence = [] while max_index != -1: lis_sequence.append(sequence[max_index]) max_index = prev_index[max_index] lis_sequence.reverse() return max_length, lis_sequence # Example usage n = 9 sequence = [10, 22, 9, 33, 21, 50, 41, 60, 80] print(longest_increasing_subsequence(sequence))"},{"question":"A factory produces a certain number of gadgets per day. The factory runs multiple machines, each of which can produce gadgets at a different rate. You are given n integers that represent the number of gadgets that each machine can produce per day. Your task is to determine the minimum number of days required to produce a total of m gadgets. Input: The first line contains two positive integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10^6), the number of machines and the total number of gadgets required. The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 1000), where ai is the number of gadgets the i-th machine can produce per day. Output: Output one integer — the minimum number of days required to produce m gadgets. Examples Input 3 10 1 2 3 Output 2 Explanation: - On the first day, the machines produce 1 + 2 + 3 = 6 gadgets. - On the second day, the machines produce another 6 gadgets for a total of 12, which is at least 10 gadgets. Input 4 25 5 5 5 5 Output 2 Explanation: - On the first day, the machines produce 5 + 5 + 5 + 5 = 20 gadgets. - On the second day, the machines produce another 20 gadgets for a total of 40, which is at least 25 gadgets.","solution":"def min_days_to_produce_gadgets(n, m, capacities): Determines the minimum number of days required to produce a total of m gadgets. Parameters: n (int): Number of machines m (int): Total number of gadgets required capacities (List[int]): Number of gadgets each machine can produce per day Returns: int: Minimum number of days required to produce m gadgets total_capacity_per_day = sum(capacities) min_days = (m + total_capacity_per_day - 1) // total_capacity_per_day # Ceiling division return min_days"},{"question":"During a treasure hunt, Emma and Jacob found a mysterious box. On the box, there is an inscription with a riddle to unlock the treasure inside. The riddle reads as follows: \\"Inside this box lies a magical sequence of characters. To reveal its secrets, you must decode the sequence by rearranging its characters in such a way that no character appears in the same position as it did in the original sequence.\\" Emma being very curious about the treasure, asks Jacob for help to determine if it\'s possible to rearrange the sequence to meet the given condition. You need to help Jacob find out if such a rearrangement exists. Formally, given a string `s` of length `n`, determine if there\'s a permutation of the string such that no character `s[i]` appears in the same position `i` after the rearrangement. If such a permutation exists, print \\"YES\\" (without quotes), otherwise print \\"NO\\" (without quotes). Input The first line of input contains an integer `t` (1 ≤ t ≤ 100) representing the number of test cases. Each of the following `t` lines contains a string `s` (1 ≤ |s| ≤ 100). Output For each test case, output \\"YES\\" if there\'s a valid rearrangement, otherwise output \\"NO\\". Examples Input 3 abcd aab abcde Output YES YES YES","solution":"def can_rearrange(s): Determines if the string s can be rearranged so that no character appears in its original position. from collections import Counter n = len(s) count = Counter(s) # We need to check two conditions: # 1. No character should have a count greater than (n + 1) // 2. # 2. The length of the string should be more than 1 since for a single character, rearrangement is not possible. if n == 1: return \\"NO\\" if max(count.values()) > (n + 1) // 2: return \\"NO\\" return \\"YES\\" def treasure_hunt(t, test_cases): For each test case, determine if the string can be rearranged so that no character is in its original position. results = [] for s in test_cases: results.append(can_rearrange(s)) return results"},{"question":"# Problem Description Given an integer `n` (1 ≤ n ≤ 12) representing a month of the year, write a function that returns the string representation of the corresponding month\'s name in English. # Input A single integer `n` (1 ≤ n ≤ 12). # Output Output a single string, which is the name of the month corresponding to the integer input. # Examples Input 1 Output January Input 5 Output May Input 12 Output December","solution":"def month_name(n): Returns the name of the month corresponding to the integer n (1 ≤ n ≤ 12). months = [ \\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\" ] return months[n - 1]"},{"question":"In a merge sort algorithm, the idea is to divide the input array into two halves, call the same function recursively to sort both halves, and then merge the two sorted halves. The `merge` function is used for merging two halves. The `merge(arr, l, m, r)` is a key process that assumes that `arr[l..m]` and `arr[m+1..r]` are sorted and merges the two sorted sub-arrays into one. Your task is to implement the merge function of the merge sort algorithm based on the following pseudocode: ``` merge(arr, l, m, r) 1 n1 = m - l + 1 2 n2 = r - m 3 create arrays L[1..n1] and R[1..n2] 4 for i = 1 to n1 5 do L[i] = arr[l + i - 1] 6 for j = 1 to n2 7 do R[j] = arr[m + 1 + j - 1] 8 i = 1 9 j = 1 10 k = l 11 while i <= n1 and j <= n2 12 do if L[i] <= R[j] 13 then arr[k] = L[i] 14 i = i + 1 15 else arr[k] = R[j] 16 j = j + 1 17 k = k + 1 18 while i <= n1 19 do arr[k] = L[i] 20 i = i + 1 21 k = k + 1 22 while j <= n2 23 do arr[k] = R[j] 24 j = j + 1 25 k = k + 1 ``` Constraints * 1 ≤ n ≤ 100,000 * 0 ≤ Ai ≤ 100,000 Input The first line of the input includes an integer n, the number of elements in the array. In the second line, Ai (i = 1,2,...,n), elements of the sequence are given separated by space characters. Output Print the merged array. Two contiguous elements of the array should be separated by a space character. Example Input 10 12 11 13 5 6 7 14 9 15 2 Output 5 6 7 9 11 12 13 14 15 2","solution":"def merge(arr, l, m, r): Merges two subarrays of arr[]. First subarray is arr[l..m] Second subarray is arr[m+1..r] n1 = m - l + 1 n2 = r - m # Create temporary arrays L = [0] * n1 R = [0] * n2 # Copy data to temporary arrays L[] and R[] for i in range(n1): L[i] = arr[l + i] for j in range(n2): R[j] = arr[m + 1 + j] # Merge the temporary arrays back into arr[l..r] i = 0 j = 0 k = l while i < n1 and j < n2: if L[i] <= R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 # Copy the remaining elements of L[], if there are any while i < n1: arr[k] = L[i] i += 1 k += 1 # Copy the remaining elements of R[], if there are any while j < n2: arr[k] = R[j] j += 1 k += 1 def merge_sort(arr, l, r): if l < r: m = (l + r) // 2 merge_sort(arr, l, m) merge_sort(arr, m + 1, r) merge(arr, l, m, r)"},{"question":"Given an array of integers, find a subsequence of the array that has the maximum possible sum and where the integers in the subsequence appear in non-decreasing order. In case of multiple subsequences with the same maximum sum, return the one with the smallest lexicographical order. # Input The input consists of an array of integers where the length of the array is at most 1000. Each integer in the array is between -1000 and 1000. ``` n a1 a2 a3 ... an ``` # Output Output the subsequence with the maximum sum and non-decreasing order in a single line. If there are multiple subsequences with the same maximum sum, return the subsequence which comes lexicographically earliest. # Example Input ``` 6 3 1 2 101 10 2 ``` Output ``` 3 101 ``` Input ``` 5 10 20 30 10 20 ``` Output ``` 10 20 30 ``` # Explanation - In the first example, the subsequence [3, 101] is one of the subsequences with the maximum possible sum (104) that is in non-decreasing order. - In the second example, the subsequence [10, 20, 30] has the maximum sum of 60, and it is in non-decreasing order. # Constraints - 1 ≤ n ≤ 1000 - -1000 ≤ a[i] ≤ 1000 for all 1 ≤ i ≤ n","solution":"def find_max_sum_subsequence(arr): n = len(arr) dp = arr[:] # Initialize dp array with original array values parent = [-1] * n # Stores the index of the previous element in the subsequence # Process each element to find the increasing subsequence with max sum ending at each index for i in range(1, n): for j in range(i): if arr[i] >= arr[j] and dp[i] < dp[j] + arr[i]: dp[i] = dp[j] + arr[i] parent[i] = j # Find index of maximum value in dp array max_sum_index = dp.index(max(dp)) # Reconstruct the subsequence subsequence = [] while max_sum_index != -1: subsequence.append(arr[max_sum_index]) max_sum_index = parent[max_sum_index] # Reverse to get the correct order subsequence.reverse() return subsequence"},{"question":"In the kingdom of Pythlandia, there are N villages and M roads that connect this kingdom. Each village is conveniently numbered from 1 through N. Pythlandia\'s roads are undirected, meaning that if there\'s a road between village i and village j, one can travel from village i to village j and vice versa. The king of Pythlandia is curious whether it is possible to deliver a special message from any village to any other village in the kingdom. In other words, he wants to determine if his kingdom is “well-connected”, meaning that there is a path between any pair of villages in Pythlandia. Given the number of villages, the number of roads, and the roads themselves, determine whether Pythlandia is well-connected. Constraints * 2 ≤ N ≤ 1000 * 1 ≤ M ≤ 10000 * 1 ≤ u_i, v_i ≤ N (1 ≤ i ≤ M) * No road connects a village to itself, and there is at most one road between any pair of villages. Input The input is given from Standard Input in the following format: N M u1 v1 u2 v2 ... uM vM Output Print \\"YES\\" if Pythlandia is well-connected, otherwise print \\"NO\\". Example Input 5 4 1 2 2 3 3 4 4 5 Output YES Input 4 2 1 2 3 4 Output NO","solution":"def is_well_connected(N, M, roads): from collections import defaultdict, deque # Create an adjacency list representation of the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Perform BFS or DFS from any starting node def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited # Start from node 1 and see if we can visit all nodes visited = bfs(1) # Check if the number of visited nodes is equal to N if len(visited) == N: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string representing an arithmetic expression containing only positive integers, addition (+) and multiplication (*) operators, and parentheses. The goal is to evaluate the expression following standard arithmetic order of operations. Write a function that evaluates the given arithmetic expression string and returns the result as an integer. Constraints * The input string is non-empty and contains only digits (0-9), \'+\', \'*\', and parentheses \'(\' and \')\'. * The length of the input string does not exceed 1000 characters. * The input expression will always be a valid arithmetic expression. Input An arithmetic expression string consisting of digits, \'+\', \'*\', and parentheses. Output Return the result of evaluating the arithmetic expression as an integer. Examples Input \\"2+3*4\\" Output 14 Input \\"10+(2*5)+3\\" Output 23 Input \\"((1+3)*3)+10\\" Output 22 Input \\"5*(3+(2+1))\\" Output 30","solution":"def evaluate_expression(expression): Evaluates an arithmetic expression string and returns the result as an integer. Supports +, *, and parentheses. def evaluate(tokens): stack = [] num = 0 sign = \'+\' while tokens: token = tokens.pop(0) if token.isdigit(): num = num * 10 + int(token) if token == \'(\': num = evaluate(tokens) if not token.isdigit() or not tokens: if sign == \'+\': stack.append(num) elif sign == \'*\': stack[-1] *= num sign = token num = 0 if token == \')\': break return sum(stack) tokens = list(expression) return evaluate(tokens)"},{"question":"Given a sequence of steps executed by a robot on a grid, your task is to determine the robot\'s final position. The robot starts at the origin (0, 0) on a 2D grid. It can execute the following commands: - `U` (move up): increases the y-coordinate by 1 - `D` (move down): decreases the y-coordinate by 1 - `L` (move left): decreases the x-coordinate by 1 - `R` (move right): increases the x-coordinate by 1 Your task is to calculate the robot\'s final position after executing a given sequence of commands. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of commands executed by the robot. - The second line contains a string of `n` characters, each being one of `U`, `D`, `L`, `R`. # Output - Print two integers, representing the x and y coordinates of the robot\'s final position. # Example Input ``` 5 UUDLR ``` Output ``` 1 1 ``` Explanation Starting from the origin (0, 0): 1. `U`: (0, 1) 2. `U`: (0, 2) 3. `D`: (0, 1) 4. `L`: (-1, 1) 5. `R`: (0, 1) # Note The robot\'s sequence of movements is given by combinatorial letters representing directional moves on a grid. The expected task is to update the position of the robot as it processes each movement and arrive at the final coordinates. Adjustments to the coordinates should be based on each command, and the final result should reflect where the robot ends up following the given sequence of commands.","solution":"def final_position(n, commands): Returns the final position of the robot after executing the commands given. Parameters: n (int): The number of commands commands (str): The string of commands Returns: tuple: The final (x, y) position of the robot x = 0 y = 0 move_map = { \'U\': (0, 1), \'D\': (0, -1), \'L\': (-1, 0), \'R\': (1, 0) } for command in commands: dx, dy = move_map[command] x += dx y += dy return (x, y)"},{"question":"You are given a sequence of integers. Your task is to split this sequence into two non-empty contiguous subsequences such that the absolute difference of their sums is minimized. The absolute difference of two numbers `x` and `y` is defined as |x - y|. Input The first line contains one integer n (2 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers a_1, a_2, ... a_n (1 ≤ a_i ≤ 1000) — the elements of the sequence. Output Print the minimum possible absolute difference. Examples Input 5 1 3 2 4 6 Output 4 Input 4 5 8 2 9 Output 2 Input 3 1 1 1 Output 1 Input 6 1 2 3 4 5 6 Output 1 Note In the first test case, the sequence can be split into [1, 3, 2] and [4, 6] resulting in sums of 6 and 10 respectively, and the absolute difference is |6 - 10| = 4, which is the minimum possible. In the second test case, the sequence can be split into [5, 8] and [2, 9], resulting in sums of 13 and 11 respectively, and the absolute difference is |13 - 11| = 2. In the third test case, any split will give sums that differ by 1. In the fourth test case, one optimal split is [1, 2, 3] and [4, 5, 6], resulting in sums of 6 and 15 respectively, and the absolute difference is 9. Another optimal split is [1, 2, 3, 4] and [5, 6], resulting in sums of 10 and 11 respectively, and the absolute difference is 1.","solution":"def min_abs_difference(n, sequence): total_sum = sum(sequence) prefix_sum = 0 min_diff = float(\'inf\') for i in range(n - 1): prefix_sum += sequence[i] remaining_sum = total_sum - prefix_sum current_diff = abs(prefix_sum - remaining_sum) min_diff = min(min_diff, current_diff) return min_diff"},{"question":"You are given a list of non-negative integers and a target sum. Your task is to find the number of unique pairs of integers in the list that add up to the target sum. A pair (a, b) is considered unique if there is no other pair (a\', b\') where a\' = b and b\' = a. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of integers in the list. The second line contains n space-separated non-negative integers, each of which is at most 10^6. The third line contains a single integer target (0 ≤ target ≤ 10^6). Output Output the number of unique pairs that add up to the target sum. Examples Input 5 1 5 7 -1 5 6 Output 2 Input 4 1 1 1 1 2 Output 1","solution":"def count_unique_pairs(nums, target): seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return len(pairs) def parse_input(input_str): lines = input_str.split(\\"n\\") n = int(lines[0]) nums = list(map(int, lines[1].split())) target = int(lines[2]) return n, nums, target"},{"question":"You are working on a new mobile game, and the game features a system where players can collect various types of resources. Each player performs a series of actions that allow them to gather resources, and the game records the resources collected by each player in a log. However, due to a bug, the game sometimes logs the name of a non-existent player or logs the wrong resources for a player. Your task is to verify if the total amount of each resource collected by a player is consistent with the correct format described below. Each action log entry consists of the player\'s name and the resources collected in that action. Each resource is represented by a character (e.g., \'A\', \'B\', \'C\') and the quantity collected. The goal is to sum up the resources for each player and output the total resources collected by each player in alphabetical order of their names. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of log entries. Each of the next n lines contains a player\'s name (a string of up to 10 lowercase Latin letters), followed by pairs of characters and integers representing the resource type and the quantity collected in that action. Each player may collect multiple types of resources per action. The log entries are space-separated. Output For each player, output their name followed by their total collected resources, sorted by player names in alphabetical order. If a player has collected multiple types of resources, list the resources sorted by character. Examples Input 5 alice A 3 B 4 bob A 2 alice C 1 bob B 1 charlie A 5 Output alice A 3 B 4 C 1 bob A 2 B 1 charlie A 5 Input 3 emma A 10 david B 5 A 3 emma B 2 C 4 Output david A 3 B 5 emma A 10 B 2 C 4","solution":"def process_game_logs(n, logs): from collections import defaultdict player_resources = defaultdict(lambda: defaultdict(int)) # Process each log entry for log in logs: parts = log.split() player_name = parts[0] resource_info = parts[1:] # Update the resources for the player for i in range(0, len(resource_info), 2): resource = resource_info[i] quantity = int(resource_info[i + 1]) player_resources[player_name][resource] += quantity # Prepare output in the required format result = [] for player in sorted(player_resources.keys()): resources = player_resources[player] resources_str = \\"\\" for resource_type in sorted(resources.keys()): resources_str += f\\" {resource_type} {resources[resource_type]}\\" result.append(f\\"{player}{resources_str}\\") return result"},{"question":"You are given a list of `n` integers and `q` queries. Each query asks you to determine the number of elements in the list that are greater than a given integer `k`. Input The first line contains an integer `n`~(1 ≤ n ≤ 10^5) — the number of elements in the list. The second line contains `n` integers `a_i`~(1 ≤ a_i ≤ 10^9) — the elements of the list. The third line contains an integer `q`~(1 ≤ q ≤ 10^5) — the number of queries. Each of the next `q` lines contains a single integer `k`. Output Print `q` lines. The i-th line should contain the answer to the i-th query — the number of elements in the list that are greater than the integer `k`. Examples Input 5 1 5 3 7 9 3 4 6 10 Output 3 2 0 Input 6 10 6 4 8 2 12 4 5 3 8 11 Output 4 5 2 1","solution":"def count_greater_than_k(lst, queries): Returns a list of counts of elements greater than each queried value. Parameters: lst (list of int): List of integers. queries (list of int): List of query values. Returns: list of int: Counts of elements greater than each queried value. lst.sort() # Sort the list for binary search result = [] for k in queries: # Binary search to find the first element greater than k low, high = 0, len(lst) while low < high: mid = (low + high) // 2 if lst[mid] > k: high = mid else: low = mid + 1 result.append(len(lst) - low) return result"},{"question":"A research institute is conducting a study on the occurrence of certain predefined words in scientific articles. Given an article and a list of predefined words, the task is to count how many times each predefined word appears in the article. An article is a string consisting of words separated by spaces, and each word contains lowercase English alphabets only. Input Format The first line contains two integers N and M: the number of predefined words and the number of articles respectively. The second line contains N space-separated predefined words. Each of the following M lines contains a single article. Output Format For each article, output the count of each predefined word in the order they are given in the input. Each article\'s output should be on a new line, with counts separated by spaces. Constraints 1 ≤ N ≤ 100 1 ≤ M ≤ 10^3 1 ≤ length of each predefined word ≤ 20 1 ≤ length of each article ≤ 2000 SAMPLE INPUT 3 2 science research data in science research often leads to new data breakthroughs in various fields analyzing research data is crucial for scientific progress and innovation SAMPLE OUTPUT 1 1 1 0 1 1","solution":"def count_predefined_words(N, M, predefined_words, articles): Counts the occurrences of predefined words in each article. Args: N (int): Number of predefined words. M (int): Number of articles. predefined_words (list of str): List of predefined words. articles (list of str): List of articles. Returns: list of list of int: Each sublist contains the count of predefined words in the respective article. result = [] for article in articles: words = article.split() counts = [words.count(word) for word in predefined_words] result.append(counts) return result # Example usage: N, M = 3, 2 predefined_words = [\\"science\\", \\"research\\", \\"data\\"] articles = [ \\"in science research often leads to new data breakthroughs in various fields\\", \\"analyzing research data is crucial for scientific progress and innovation\\" ] print(count_predefined_words(N, M, predefined_words, articles))"},{"question":"Alice is trying to learn about permutations and combinations. To practice, she gave herself a challenge to figure out the next permutation of a given string S. A permutation of a string is defined as a rearrangement of its characters. Alice wants to find the lexicographically next permutation of the provided string. If it doesn\'t exist, she should return the string sorted in non-descending order. Input: First line of input consists of T, the number of test cases. Each test case consists of a single string S on a new line. Output: For each test case print in a new line the lexicographically next permutation of string S. If it doesn\'t exist, print the string sorted in non-descending order. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 Strings S are made of lower case letters only. SAMPLE INPUT 2 dacb dcba SAMPLE OUTPUT dbac abcd Explanation: In the first test case, \\"dacb\\" can be rearranged to form its next permutation \\"dbac\\". In the second test case, \\"dcba\\" is the highest permutation, so the output is its sorted order \\"abcd\\".","solution":"def next_permutation(s): Generate the lexicographically next permutation of the input string s. If no such permutation exists, return the string sorted in non-descending order. # Convert the string to a list for easy manipulation s = list(s) # Step 1: Find the rightmost character which is smaller than its next character i = len(s) - 2 while i >= 0 and s[i] >= s[i + 1]: i -= 1 # If no such character is found, the string is in descending order if i == -1: s.sort() return \'\'.join(s) # Step 2: Find the smallest character on right side of the pivot which is larger than s[i] j = len(s) - 1 while s[j] <= s[i]: j -= 1 # Step 3: Swap the characters at i and j s[i], s[j] = s[j], s[i] # Step 4: Reverse the suffix starting from i+1 s = s[:i + 1] + s[i + 1:][::-1] return \'\'.join(s) def process_test_cases(test_cases): results = [] for case in test_cases: results.append(next_permutation(case)) return results"},{"question":"In a kingdom far away, there are two types of creatures: elves and dwarves. The king of the kingdom wants to determine if it is possible to create a harmonious council with an equal number of elves and dwarves. You are given data about the population of elves and dwarves in different regions of the kingdom. Your task is to determine if there exists a subset of regions such that the number of elves is equal to the number of dwarves in the selected regions. Input The first line contains an integer n — the number of regions in the kingdom (1 ≤ n ≤ 100). Each of the next n lines contains two integers, ei and di (0 ≤ ei, di ≤ 100), representing the number of elves and dwarves in the i-th region, respectively. Output Output \\"YES\\" if there exists a subset of regions with an equal number of elves and dwarves. Otherwise, output \\"NO\\". Examples Input 3 4 2 1 3 3 4 Output YES Input 2 5 6 1 2 Output NO Note In the first sample case, you can select regions 1 and 2 to have a total of 4 (4+0) elves and 4 (2+2) dwarves. Therefore, the answer is \\"YES\\". In the second sample case, no subset of regions can have equal numbers of elves and dwarves, hence the answer is \\"NO\\".","solution":"def can_create_harmonious_council(n, regions): from itertools import combinations # Iterate over all possible subsets of regions for r in range(1, n + 1): for subset in combinations(regions, r): elf_sum = sum(region[0] for region in subset) dwarf_sum = sum(region[1] for region in subset) if elf_sum == dwarf_sum: return \\"YES\\" return \\"NO\\""},{"question":"Polycarp has an array consisting of n integers. Let p be the length of the largest contiguous subarray consisting of equal integers. Polycarp wants to make some changes to this array so that p becomes at least k. To do this, he can change up to m elements of the array to any value he wants. Help Polycarp determine if it is possible to achieve p ≥ k, and if it is possible, find one way to change at most m elements to achieve this goal. Input The first line of the input contains three integers n, m, and k (1 ≤ n, m, k ≤ 2000). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), where ai is the integer at the i-th position of the array. Output If it is possible to make p at least k by changing at most m elements of the array, print \\"YES\\" in the first line. In the second line, print the resulting array after the changes. If there are multiple valid answers, print any of them. If it is not possible, print \\"NO\\". Examples Input 6 2 3 1 1 2 2 3 3 Output YES 1 1 1 2 3 3 Input 5 3 4 5 5 5 6 6 Output YES 5 5 5 5 6 Input 4 1 2 2 2 2 2 Output YES 2 2 2 2 Input 7 1 5 1 2 3 4 5 6 7 Output NO Note In the first example, after Polycarp\'s changes, the first three elements become equal, forming a contiguous subarray of length 3, which meets the requirement p ≥ k. In the second example, after changing the fourth element to 5, there is a contiguous subarray of length 4, which meets the requirement. In the third example, no changes are needed as there is already a contiguous subarray of length equal to 4, which is greater than or equal to the requirement. In the fourth example, it is not possible to make any contiguous subarray of at least length 5 with only one change.","solution":"def find_subarray(arr, n, m, k): for i in range(n): changes = 0 j = i while j < n and (changes < m or arr[j] == arr[i]): if arr[j] != arr[i]: changes += 1 j += 1 if (j - i) >= k: result = list(arr) for x in range(i, j): result[x] = arr[i] return \\"YES\\", result return \\"NO\\", [] def polycarp_subarray_problem(n, m, k, arr): status, solution_arr = find_subarray(arr, n, m, k) if status == \\"YES\\": return [\\"YES\\", solution_arr] else: return [\\"NO\\"] if __name__ == \\"__main__\\": n = 5 m = 3 k = 4 arr = [5, 5, 5, 6, 6] print(polycarp_subarray_problem(n, m, k, arr)) n = 7 m = 1 k = 5 arr = [1, 2, 3, 4, 5, 6, 7] print(polycarp_subarray_problem(n, m, k, arr))"},{"question":"Your task is to implement an automated toll system. Vehicles pass through a toll gate, and each vehicle can either have an electronic pass or pay in cash. The toll rate is 5 for vehicles with an electronic pass and 10 for those paying in cash. The toll booth initially has no money. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of vehicles passing through the toll gate. The next line contains n integers, each integer is 1 or 2 — the type of payment each vehicle is making, where 1 denotes an electronic pass and 2 denotes paying in cash. Vehicles are listed in the order they arrive at the toll gate. Output Print \\"SUCCESS\\" (without the quotes) if the toll booth can process each vehicle correctly, i.e., accept payment and give change if needed. Otherwise, print \\"FAIL\\". Examples Input 5 2 1 2 2 1 Output FAIL Input 6 1 2 1 1 2 2 Output SUCCESS","solution":"def toll_booth(n, vehicles): cash_in_hand = 0 for vehicle in vehicles: if vehicle == 1: cash_in_hand += 5 elif vehicle == 2: if cash_in_hand >= 5: cash_in_hand += 10 cash_in_hand -= 5 else: return \\"FAIL\\" return \\"SUCCESS\\""},{"question":"In a remote island, villagers celebrate their Harvest Festival by organizing a unique problem-solving game. They create a linear array of huts, each denoted by a unique number from 1 to n. Every hut has a flag that can be raised or lowered. Initially, all the flags are lowered. The villagers give the visitors a specific set of commands instructing them to raise or lower flags at specific huts or ranges of huts. Your task is to automate the process and determine the final state of each flag after all commands have been executed. Each command can be of three types: 1. Raise the flag at a specific hut. 2. Lower the flag at a specific hut. 3. Toggle the flags for all huts in a given range from l to r (inclusive). A toggled flag switches its state from raised to lowered, or from lowered to raised. # Input - The first line contains two integers, n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000), representing the number of huts and commands, respectively. - The next m lines describe the commands: - `raise x`: Raise the flag at hut x (1 ≤ x ≤ n). - `lower x`: Lower the flag at hut x (1 ≤ x ≤ n). - `toggle l r`: Toggle the flags from hut l to hut r (1 ≤ l ≤ r ≤ n). # Output - Output n space-separated integers, representing the final state of each hut\'s flag (1 if raised, 0 if lowered). # Example Input ``` 5 4 raise 1 toggle 2 4 lower 3 toggle 3 5 ``` Output ``` 1 1 1 0 1 ``` # Explanation of Example 1. Initially, all flags are lowered: [0, 0, 0, 0, 0]. 2. `raise 1`: Flag at hut 1 is raised: [1, 0, 0, 0, 0]. 3. `toggle 2 4`: Flags from hut 2 to hut 4 are toggled: [1, 1, 1, 1, 0]. 4. `lower 3`: Flag at hut 3 is lowered: [1, 1, 0, 1, 0]. 5. `toggle 3 5`: Flags from hut 3 to hut 5 are toggled: [1, 1, 1, 0, 1].","solution":"def hut_flags(n, m, commands): flags = [0] * n for command in commands: parts = command.split() action = parts[0] if action == \'raise\': x = int(parts[1]) - 1 flags[x] = 1 elif action == \'lower\': x = int(parts[1]) - 1 flags[x] = 0 elif action == \'toggle\': l = int(parts[1]) - 1 r = int(parts[2]) - 1 for i in range(l, r + 1): flags[i] = 1 - flags[i] return flags"},{"question":"In a distant land, there is a village with n houses aligned in a straight row. Each house has a certain amount of gold stored in it, given by the array `gold[]`, where `gold[i]` represents the amount of gold in the i-th house (0-indexed). A thief plans to rob the houses, but he cannot rob two adjacent houses due to security alarms that will go off if he tries to rob neighboring houses consecutively. The thief wants to rob houses in such a way that he maximizes the total amount of gold he can steal. Given the number of houses and the amount of gold in each house, determine the maximum amount of gold the thief can rob without triggering any alarms. Write a function `maxGold(n: int, gold: List[int]) -> int` that computes the maximum amount of gold the thief can steal. Input - The first line contains an integer T (1 ≤ T ≤ 100) — the number of test cases. - Each test case consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 100) — the number of houses in the village. - The second line contains n integers `gold[i]` (0 ≤ gold[i] ≤ 10^4) — the amount of gold in each house. Output For each test case, output a single integer, the maximum amount of gold the thief can rob. Example Input 3 5 1 2 3 1 5 4 2 7 9 3 3 100 1 100 Output 10 11 200 Note In the first test case, the optimal strategy is to rob houses 1, 3, and 5 (0-indexed), obtaining gold amounts of 1 + 3 + 5 = 9. In the second test case, the thief should rob houses 0 and 2, obtaining gold amounts of 2 + 9 = 11. In the third test case, the optimal strategy is to rob houses 0 and 2, obtaining gold amounts of 100 + 100 = 200.","solution":"from typing import List def maxGold(n: int, gold: List[int]) -> int: if n == 0: return 0 if n == 1: return gold[0] # dp[i] will be the maximum amount of gold that can be collected from the first i+1 houses dp = [0] * n dp[0] = gold[0] dp[1] = max(gold[0], gold[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + gold[i]) return dp[-1] def main(test_cases: List[List[int]]) -> List[int]: results = [] for case in test_cases: n, gold = case[0], case[1] results.append(maxGold(n, gold)) return results"},{"question":"You are a park manager for a national park, and you need to construct a system that keeps track of visitor entry and exit times. The park is open from 5:00 AM to 9:00 PM every day. A visitor entry and exit log is provided, where each record contains the visitor\'s entry time and exit time in 24-hour format (HH:MM). Your task is to determine the maximum number of visitors present in the park at any given time during the day. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of records. - The next `n` lines each contain two space-separated strings `entry` and `exit`, representing the entry and exit times of a visitor. # Output - Print a single integer, the maximum number of visitors present in the park at any given time. # Example Input ``` 5 05:00 06:00 06:00 10:00 07:00 08:30 08:00 09:00 08:15 09:30 ``` Output ``` 4 ``` # Explanation At 08:15, there are 4 visitors in the park: - 05:00 to 06:00 (1st visitor not present) - 06:00 to 10:00 (2nd visitor present) - 07:00 to 08:30 (3rd visitor present) - 08:00 to 09:00 (4th visitor present) - 08:15 to 09:30 (5th visitor present) To solve this, you can use a sweep line algorithm, where you count each entry as +1 and exit as -1, then iterate through the timeline to find the period with the highest count of visitors.","solution":"def max_visitors(n, times): events = [] for entry, exit in times: events.append((entry, 1)) events.append((exit, -1)) events.sort() max_visitors = 0 current_visitors = 0 for time, visitor_change in events: current_visitors += visitor_change max_visitors = max(max_visitors, current_visitors) return max_visitors"},{"question":"Problem: You are given an array of N integers. Write a program to find the smallest positive integer that is missing from the array. The array can contain both positive and negative numbers, with possible repeated values. Your task is to identify the first smallest positive integer that is not present in the array in an efficient manner. Input: First line contains a single integer N, the size of the array. Second line contains N space-separated integers representing the elements of the array. Output: Print the smallest positive integer that is missing from the array. Constraints: 1 ≤ N ≤ 10^5 -10^5 ≤ array[i] ≤ 10^5 SAMPLE INPUT 5 3 4 -1 1 2 SAMPLE OUTPUT 5 Explanation From the given array [3, 4, -1, 1, 2], the smallest positive integer missing is 5 since 1, 2, 3, and 4 are present in the array but 5 is not.","solution":"def find_missing_positive_integer(arr): This function returns the smallest positive integer missing from the array. n = len(arr) # Step 1: Move all non-positive numbers to the left side and count the number of positives j = 0 for i in range(n): if arr[i] <= 0: arr[i], arr[j] = arr[j], arr[i] # Swap j += 1 # Now consider the subarray from j to n-1 pos_arr = arr[j:] pos_count = n - j # Step 2: Use the index as a hash key for i in range(pos_count): num = abs(pos_arr[i]) if num - 1 < pos_count and pos_arr[num - 1] > 0: pos_arr[num - 1] = -pos_arr[num - 1] # Step 3: Find the first index which has a positive value for i in range(pos_count): if pos_arr[i] > 0: return i + 1 return pos_count + 1"},{"question":"Given an array of integers, design a function that finds the longest sequence of consecutive integers and returns its length. The sequence should be present within the array in any order. For example, if the input array is [100, 4, 200, 1, 3, 2], the longest sequence of consecutive integers is [1, 2, 3, 4] which has length 4. # Input A single line containing a space-separated list of integers. # Output Output a single integer representing the length of the longest sequence of consecutive integers. # Example Input ``` 100 4 200 1 3 2 ``` Output ``` 4 ``` # Note - The input list will contain between 1 and 1000 integers. - Each integer in the list will be between -100,000 and 100,000. - The list will not necessarily be sorted.","solution":"def longest_consecutive_sequence(arr): Returns the length of the longest sequence of consecutive integers in the array. num_set = set(arr) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Alicia and Bob are playing a number game on a circular table. They have arranged n numbers from 1 to n in clockwise order. Starting from the number 1, Alicia and Bob take turns picking numbers. Alicia always starts. They can only pick a number that is directly adjacent (either in a clockwise or counterclockwise direction) to the number picked in the previous turn. The players lose if they cannot make a move on their turn. During each turn, the player removes the picked number from the table. The game continues until one player loses (because they cannot make a move). If both players have moves to make, the player who starts always wins minimizing their steps. You need to determine if Alicia (who starts first) or Bob wins given that both of them play optimally. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of numbers arranged in a circle. Output Print the name of the winner (\'Alicia\' or \'Bob\'). Example Input 3 Output Alicia Input 4 Output Bob Note Explanation of the first example: Alicia starts and picks 1, then Bob can pick 2 or 3. No matter which number Bob picks, Alicia will be able to pick the remaining number on her next turn and win. Explanation of the second example: Alicia starts and picks 1. Then Bob picks 2 or 4. Regardless of the choice, Bob will always win because he can eventually leave no move for Alicia.","solution":"def determine_winner(n): Determine the winner of the game given n numbers. Parameters: n (int): The number of numbers arranged in a circle Returns: str: The name of the winner, either \'Alicia\' or \'Bob\' # If the number of elements is odd, Alicia wins, otherwise Bob wins. if n % 2 == 1: return \'Alicia\' else: return \'Bob\'"},{"question":"A construction company receives several orders to build rectangular park plots. Each order specifies the length and width of the plot. The company prefers to shape the plots in such a way that the length and breadth are equal, making it a square. They want to minimize the number of moves required to convert each rectangular plot into a square plot. In one move, they can either increase or decrease the length or the breadth of the plot by 1 unit. Using this information, help the company calculate the minimum number of moves required for each plot order to reshape it into a square. Input: The first line contains an integer T, denoting the number of orders. Each of the next T lines contains two integers L and W, denoting the length and width of the plot, respectively. Output: For each order, print the minimum number of moves required to reshape the plot into a square. Print the result for each order in a new line. Constraints: 1 ≤ T ≤ 10 If T is not in this range, print \\"Invalid Test\\" (without quotes). 1 ≤ L, W ≤ 1000 If L or W is not in this range, print \\"Invalid Input\\" (without quotes). For example: If the input is: 3 5 8 6 6 4 2 The output should be: 3 0 2","solution":"def min_moves_to_square(T, orders): Returns the minimum number of moves required to reshape each plot into a square. :param T: Number of orders :param orders: List of tuples containing the length and width of the plots :return: List of moves required for each order if T < 1 or T > 10: return \\"Invalid Test\\" results = [] for L, W in orders: if L < 1 or L > 1000 or W < 1 or W > 1000: return \\"Invalid Input\\" results.append(abs(L - W)) return results"},{"question":"In an n × n maze, you are given a starting point (sx, sy) and a destination point (dx, dy). Each cell in the maze can either be open (denoted by \'.\') or blocked (denoted by \'#\'). You can walk one cell to the left, right, up, or down from an open cell to another open cell. The task is to determine whether there exists a path from the starting point to the destination point. Input The first line contains an integer n (1 ≤ n ≤ 1000), the size of the maze. The second line contains two space-separated integers sx and sy (1 ≤ sx, sy ≤ n), the starting coordinates. The third line contains two space-separated integers dx and dy (1 ≤ dx, dy ≤ n), the destination coordinates. The next n lines contain n characters each, where each character is either \'.\' or \'#\', representing the maze. Output Output \\"YES\\" if there exists a path from (sx, sy) to (dx, dy). Otherwise, output \\"NO\\". Examples Input 5 1 1 5 5 ..... .#... .#... .#.#. ..... Output YES Input 3 1 1 3 3 ... #.. ..# Output NO Explanation In the first example, there is an open path from (1, 1) to (5, 5). In the second example, there is no path from (1, 1) to (3, 3) due to the blocked cells.","solution":"def is_path_exist(n, sx, sy, dx, dy, maze): Determines if there is a path from (sx, sy) to (dx, dy) in an n x n maze. Parameters: n (int): The size of the maze. sx (int): Starting x-coordinate. sy (int): Starting y-coordinate. dx (int): Destination x-coordinate. dy (int): Destination y-coordinate. maze (list of list of str): The n x n maze represented as a list of strings. Returns: str: \\"YES\\" if a path exists, \\"NO\\" otherwise. from collections import deque # Direction vectors for up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Convert to 0-indexed for internal use sx -= 1 sy -= 1 dx -= 1 dy -= 1 # Create a visited matrix visited = [[False] * n for _ in range(n)] # Use BFS for pathfinding queue = deque([(sx, sy)]) visited[sx][sy] = True while queue: x, y = queue.popleft() if (x, y) == (dx, dy): return \\"YES\\" for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and maze[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\" # Example usage: n = 5 sx, sy = 1, 1 dx, dy = 5, 5 maze = [ \\".....\\", \\".#...\\", \\".#...\\", \\".#.#.\\", \\".....\\" ] print(is_path_exist(n, sx, sy, dx, dy, maze)) # Output: \\"YES\\""},{"question":"A group of archeologists has discovered an ancient grid-like map of the first ever city. The map is represented by an `n x n` grid, where each cell contains information about the height of a building at that particular position in the city. The height of buildings is represented by an integer `h (0 ≤ h ≤ 9)`. Archeologists have found that the city is divided into several blocks, where a block is defined as a contiguous group of buildings with the same height. You have been given the task to identify all such blocks in the grid and to determine the maximum block size. Two buildings are considered part of the same block if: 1. They have the same height. 2. They are adjacent to each other either vertically or horizontally (not diagonally). Write a program that takes an `n x n` grid as input and calculates the maximum block size in the city. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100) that represents the size of the grid. - The next `n` lines contain `n` integers each, representing the height of the buildings. # Output - Output a single integer representing the maximum block size in the city. # Example Input ``` 4 3 3 4 4 3 2 2 4 3 2 4 1 0 0 1 1 ``` Output ``` 4 ``` In the example, the maximum block size is obtained by the buildings with height `4`: ``` 4 4 4 4 ```","solution":"def find_max_block_size(n, grid): def dfs(x, y, height): if x < 0 or x >= n or y < 0 or y >= n or grid[x][y] != height: return 0 grid[x][y] = -1 # mark as visited size = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: size += dfs(x + dx, y + dy, height) return size max_block_size = 0 for i in range(n): for j in range(n): if grid[i][j] != -1: # not visited height = grid[i][j] max_block_size = max(max_block_size, dfs(i, j, height)) return max_block_size"},{"question":"Peter wants to build a wall using bricks of different widths. Peter has a list of integers representing the widths of bricks he has available. Peter aims to create a specific target width of the wall using a minimal number of bricks. Each type of brick can be used more than once. Help Peter determine the minimum number of bricks he needs to build a wall of the target width, or if it\'s impossible to do so. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10^4) — the number of different brick widths and the target width of the wall. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the widths of the available bricks. Output Print the minimum number of bricks needed to achieve the target width, or -1 if it\'s impossible to build the wall with the given bricks. Examples Input 3 10 1 2 3 Output 4 Input 4 7 2 3 5 6 Output 2 Note In the first sample, Peter can use bricks with widths 3 + 3 + 3 + 1 to achieve the target width of 10 using 4 bricks. In the second sample, Peter can use bricks with widths 2 + 5 to achieve the target width of 7 using 2 bricks.","solution":"def min_bricks(n, m, widths): Determine the minimum number of bricks needed to achieve the target width, or -1 if it\'s impossible to build the wall with the given bricks. # Initialize dp array with a large value dp = [float(\'inf\')] * (m + 1) dp[0] = 0 # Fill dp array for i in range(1, m + 1): for w in widths: if i - w >= 0: dp[i] = min(dp[i], dp[i - w] + 1) return dp[m] if dp[m] != float(\'inf\') else -1"},{"question":"Tina is a software engineer who loves organizing coding competitions. She is in charge of creating a schedule for a coding marathon where n participants are allowed to register in the order they arrive. Each participant has a preference on which part of the day they would like to compete: morning, afternoon, or evening. Tina wants to create a balanced schedule so that the number of participants competing in each part of the day is as even as possible. Given the number of participants and their preferences, your task is to determine whether it is possible to create such a balanced schedule. A balanced schedule is defined as one where the difference between the number of participants in any two parts of the day does not exceed one. If it is possible, output \\"YES\\" and print the schedule. If it is not possible, output \\"NO\\". Input The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the number of participants. The next n lines each contain a string representing the preference of the i-th participant: \\"morning\\", \\"afternoon\\", or \\"evening\\". Output Output \\"YES\\" if it is possible to create a balanced schedule, and then print n lines, each containing the part of the day assigned to each participant in the same order as the input. If it is not possible, print \\"NO\\". Example Input 6 morning evening afternoon morning evening afternoon Output YES morning evening afternoon morning evening afternoon Input 5 morning morning morning afternoon evening Output NO Note In the first example, it is possible to distribute the participants evenly across the three parts of the day, with each period having exactly 2 participants. In the second example, it is not possible to create a balanced schedule because there are three participants preferring the morning, causing an imbalance that cannot be resolved.","solution":"def create_balanced_schedule(n, preferences): from collections import Counter # Count the prefences preference_count = Counter(preferences) morning_count = preference_count[\'morning\'] afternoon_count = preference_count[\'afternoon\'] evening_count = preference_count[\'evening\'] # Check if balanced schedule is possible if max(morning_count, afternoon_count, evening_count) - min(morning_count, afternoon_count, evening_count) > 1: return \\"NO\\" return [\\"YES\\"] + preferences"},{"question":"A multi-national corporation is running a conference where employees from various departments are presenting their work. To organize the presentation sequence, each department head suggested presentations in a certain order. However, due to time constraints, not all suggested presentations can be accommodated in the exact order they were proposed. Each department head proposes their sequence in chronological order of how they envision the presentations. Now, the task is to merge all these proposed sequences into one single sequence that satisfies the chronological order of each department’s proposed list while adhering to the constraint that a maximum of \'k\' presentations can be selected from any individual department. Given the sequences and the constraint, find one valid consolidated sequence of presentations. Input The first line contains integers d and k (1 ≤ d ≤ 100, 1 ≤ k ≤ 50) — the number of departments and the maximum number of presentations that can be taken from each department. Each of the next d lines describes the proposed sequences of a department. Each line starts with an integer ni (1 ≤ ni ≤ 100) — the number of presentations proposed by the i-th department, followed by ni integers, representing the IDs of the presentations proposed in that order (IDs are unique and between 1 and 10000). Output Output a single line with a sequence of presentation IDs. If multiple sequences are possible, you can output any one of them. Ensure that the sequence respects the chronological order within each department, and no more than \'k\' presentations are taken from any single department. Examples Input 3 2 5 101 102 103 104 105 3 201 202 203 4 301 302 303 304 Output 101 102 201 202 301 302 Input 2 1 4 401 402 403 404 5 501 502 503 504 505 Output 401 501","solution":"def merge_presentation_sequences(d, k, departments): Merges all the department\'s proposed sequences into one single sequence such that each sequence respects the chronological order of each department and no more than k presentations are taken from any single department. :param d: Number of departments :param k: Maximum number of presentations from any department :param departments: List of lists where each sublist contains proposed sequence of presentations by that department :return: A list representing a valid consolidated sequence of presentations # This will hold the selected presentations in order result = [] # Iterate through each department for department in departments: # Add at most k presentations from each department to the result result.extend(department[:k]) return result"},{"question":"John is an avid gardener. This season, he has planted N different types of flowers in his garden, arranged in a straight line. Each type of flower blooms in a distinct range of days, represented by an integer array B of length 2, where B[0] is the day the flower starts blooming and B[1] is the day it stops blooming. His goal is to calculate the maximum number of different flower types that are blooming on any single day in his garden. Input The input consists of several test cases. The first line contains an integer T denoting the number of test cases. Each test case consists of the following: - The first line contains an integer N denoting the number of different types of flowers. - The next N lines, each containing two space-separated integers B[0] and B[1] representing the blooming start and stop days of each flower. Output For each test case, output a single integer denoting the maximum number of different flower types blooming on any single day. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ B[0] ≤ B[1] ≤ 10^9 Note It\'s guaranteed that the sum of N over all test cases won\'t exceed 10^6. SAMPLE INPUT 2 3 1 4 2 5 3 6 2 5 8 6 7 SAMPLE OUTPUT 3 2 Explanation In the first sample test case, the maximum number of flowers blooming on a single day is 3, specifically on days 3 and 4. In the second sample test case, the maximum number of flowers blooming on a single day is 2, on days 6 and 7.","solution":"def max_blooming_flowers(test_cases): results = [] for case in test_cases: events = [] for bloom in case: start, end = bloom events.append((start, 1)) # 1 represents a flower starts blooming events.append((end + 1, -1)) # -1 represents a flower stops blooming events.sort() max_blooming = 0 current_blooming = 0 for event in events: current_blooming += event[1] max_blooming = max(max_blooming, current_blooming) results.append(max_blooming) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) case = [] for i in range(N): start, end = map(int, lines[index + 1 + i].split()) case.append((start, end)) test_cases.append(case) index += N + 1 return test_cases def format_output(results): return \\"n\\".join(map(str, results)) def main(input_str): test_cases = parse_input(input_str) results = max_blooming_flowers(test_cases) return format_output(results)"},{"question":"Write a function that takes a list of positive integers and returns a list of only the prime numbers from the original list, in the order they appear. **Input** - A list of positive integers **Output** - A list of prime numbers in the same order as they appear in the input list **Function Signature** ```python def filter_primes(numbers: List[int]) -> List[int]: ``` **Example** ```python filter_primes([2, 3, 4, 5, 10, 13, 17]) # Output: [2, 3, 5, 13, 17] filter_primes([1, 4, 6, 8, 9]) # Output: [] filter_primes([19, 22, 23, 24, 29]) # Output: [19, 23, 29] ``` **Notes** 1. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. 2. The input list can have up to 100,000 integers and each integer can be as large as 1,000,000,000.","solution":"from typing import List def is_prime(n: int) -> bool: Checks if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i+2) == 0: return False i += 6 return True def filter_primes(numbers: List[int]) -> List[int]: Filters and returns a list of prime numbers from the given list of positive integers. return [num for num in numbers if is_prime(num)]"},{"question":"You are managing a popular social media platform and need to ensure that the community guidelines are respected. One of the challenges you encounter is detecting and censoring inappropriate words from user comments. Your task is to write a program that takes in a list of inappropriate words (which can be considered as \\"banned words\\") and a list of comments, and replaces all occurrences of these banned words in the comments with asterisks (*) of the same length as the banned word. Input The first line contains an integer t (1 ≤ t ≤ 10) — the number of test cases. Each test case starts with a line containing an integer n (1 ≤ n ≤ 100) — the number of banned words, followed by n lines, each containing a single banned word. The next line contains an integer m (1 ≤ m ≤ 100) — the number of comments, followed by m lines, each containing a single comment. Each comment is a string of length between 1 and 1000, inclusive, consisting of lowercase English letters and spaces. Output For each test case, output m lines corresponding to the censored comments. Example Input 2 3 bad word evil 3 this is a bad comment clean comment here what an evil word 2 apple pie 2 I love apple pie this pie is great Output this is a *** comment clean comment here what an **** **** I love ***** *** this *** is great Explanation: In the first test case, the banned words are \\"bad\\", \\"word\\", and \\"evil\\". The comments are then censored such that each instance of the banned words in the comments is replaced by an equivalent number of asterisks. In the second test case, the banned words are \\"apple\\" and \\"pie\\". Each instance of these banned words in the comments gets replaced by asterisks.","solution":"def censor_comments(test_cases): results = [] for case in test_cases: banned_words = case[\'banned_words\'] comments = case[\'comments\'] censored_comments = [] for comment in comments: for banned_word in banned_words: comment = comment.replace(banned_word, \'*\' * len(banned_word)) censored_comments.append(comment) results.append(censored_comments) return results"},{"question":"Input The only line of the input contains a string consisting of one uppercase letter followed by six lowercase letters. Output Output \\"YES\\" if the uppercase letter is a vowel (A, E, I, O, or U) and the string consists only of vowels (a, e, i, o, u), otherwise output \\"NO\\". Examples Input Aaeeiou Output YES Input Aeioxyz Output NO Input Baaeeio Output NO Input Eeeioua Output YES","solution":"def check_string(input_string): Returns \\"YES\\" if the uppercase letter is a vowel and the rest of the string consists of only lowercase vowels, otherwise returns \\"NO\\". vowels = {\'A\', \'E\', \'I\', \'O\', \'U\'} lowercase_vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} if len(input_string) != 7: return \\"NO\\" upper_case_letter = input_string[0] rest_of_string = input_string[1:] if upper_case_letter in vowels and all(char in lowercase_vowels for char in rest_of_string): return \\"YES\\" return \\"NO\\""},{"question":"Given an array of integers, find the maximum length of a subsequence such that all elements of the subsequence are strictly increasing and all elements are either odd or even. For example, if the input array is [1, 2, 3, 5, 7, 8, 10, 12, 15], the longest strictly increasing subsequence of either only odd or only even numbers is [1, 3, 5, 7, 15] which has length 5. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains one integer n (1 ≤ n ≤ 10^5) — the number of integers in the array. The second line of each test case contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output For each test case, in a new line, print the maximum length of a strictly increasing subsequence of either only odd or only even numbers. Example Input 2 9 1 2 3 5 7 8 10 12 15 7 2 4 6 8 10 12 14 Output 5 7","solution":"def max_length_strictly_increasing_subsequence(array): odd_subsequence = [] even_subsequence = [] for num in array: if num % 2 == 0: if not even_subsequence or num > even_subsequence[-1]: even_subsequence.append(num) else: if not odd_subsequence or num > odd_subsequence[-1]: odd_subsequence.append(num) return max(len(odd_subsequence), len(even_subsequence)) def solve(test_cases): results = [] for array in test_cases: results.append(max_length_strictly_increasing_subsequence(array)) return results"},{"question":"# Time Slot Allocation Problem: **Problem Statement:** A university is organizing special training sessions and needs to allocate time slots to professors for conducting their sessions. Each professor provides a list of preferred time slots, and the university must schedule the sessions such that no two professors have overlapping sessions and as many professors as possible get a time slot. **Input:** - The first line contains an integer `N`, the number of professors. - The next `N` lines contain two integers each, `start` and `end`, representing the start and end times (inclusive) of the preferred time slot for each professor. **Output:** - Print an integer representing the maximum number of non-overlapping sessions that can be scheduled. **Constraints:** - 1 ≤ N ≤ 100,000 - 0 ≤ start < end ≤ 1,000,000 **Sample Input:** ``` 5 1 4 3 5 0 6 5 7 8 9 ``` **Sample Output:** ``` 3 ``` **Explanation:** The university can allocate the non-overlapping sessions as follows: - Session 1 (1 to 4), Session 2 (5 to 7), Session 3 (8 to 9)","solution":"def max_non_overlapping_sessions(N, time_slots): Returns the maximum number of non-overlapping sessions that can be scheduled. :param N: Integer, number of professors. :param time_slots: List of tuples, where each tuple contains two integers, start and end times. :return: Integer, maximum number of non-overlapping sessions. # Sort the time slots by their end time time_slots.sort(key=lambda x: x[1]) last_end_time = -1 count = 0 for start, end in time_slots: if start > last_end_time: last_end_time = end count += 1 return count # To use the function: # input_data = [(1, 4), (3, 5), (0, 6), (5, 7), (8, 9)] # N = 5 # print(max_non_overlapping_sessions(N, input_data)) # Output: 3"},{"question":"You are developing a software for handling user authentication. For this task, you need to implement a function that validates passwords based on specific security criteria. The password is considered valid if it meets the following requirements: 1. It must contain at least one lowercase letter. 2. It must contain at least one uppercase letter. 3. It must contain at least one digit. 4. It must be at least 8 characters long. 5. It must not contain any spaces. Write a function `is_valid_password(password)` that takes a string `password`, and returns `True` if the password is valid according to the above rules, and `False` otherwise. Input - A string `password` which may contain printable ASCII characters. Output - A boolean value, `True` if the password is valid, `False` otherwise. Example Input `Password123` Output `True` Input `pass 123` Output `False` Input `Short1` Output `False`","solution":"def is_valid_password(password): Checks if the given password is valid based on the following conditions: 1. It must contain at least one lowercase letter. 2. It must contain at least one uppercase letter. 3. It must contain at least one digit. 4. It must be at least 8 characters long. 5. It must not contain any spaces. if len(password) < 8: return False has_lower = any(char.islower() for char in password) has_upper = any(char.isupper() for char in password) has_digit = any(char.isdigit() for char in password) has_space = any(char.isspace() for char in password) return has_lower and has_upper and has_digit and not has_space"},{"question":"Given a list of integers, you are tasked with finding the minimum number of swaps required to sort the list in ascending order. Each swap consists of picking any two elements and swapping them. Your goal is to return the minimum number of swaps needed. Input Format: The first line contains an integer ( T ), the number of test cases. Each test case consists of 2 lines: - The first line contains an integer ( N ) representing the number of elements in the list. - The second line contains ( N ) integers denoting the elements of the list. Output Format: For each test case, output a single line containing the minimum number of swaps required to sort the list. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ A[i] ≤ 10^6 Sample Input: ``` 2 4 4 3 2 1 5 1 5 4 3 2 ``` Sample Output: ``` 2 2 ``` Explanation: In the first test case, the list [4, 3, 2, 1] can be sorted in 2 swaps: Swap 4 with 1 and 3 with 2. In the second test case, the list [1, 5, 4, 3, 2] can be sorted in 2 swaps: Swap 5 with 2 and 4 with 3.","solution":"def min_swaps(arr): n = len(arr) arr_pos = [*enumerate(arr)] arr_pos.sort(key=lambda it:it[1]) visited = {k: False for k in range(n)} ans = 0 for i in range(n): if visited[i] or arr_pos[i][0] == i: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = arr_pos[x][0] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(min_swaps(arr)) return results"},{"question":"Jessica loves collecting seashells and she recently joined a Seashell Collecting Enthusiasts (SCE) club. The club has N members and each member has some unique types of seashells in their collection. A few days ago, Jessica challenged them, saying that it is possible to redistribute all the seashells in such a way that each member ends up with a unique number of distinct seashell types. Now she wants to know if her claim was right before the next SCE meeting. Help Jessica determine if it\'s possible to redistribute the seashells such that each member ends up with a unique number of seashell types. Input The first line contains an integer N, denoting the number of members in the SCE. The second line contains N integers Si, denoting the number of different types of seashells in the collection of the i\'th member. Output The first line should contain YES if it is possible to redistribute the seashells such that each member ends up with a unique number of seashell types. Otherwise, the output should be NO. Constraints 1 ≤ N ≤ 100 000; 1 ≤ Si ≤ 10^9. Examples Input: 4 4 3 2 1 Output: YES Input: 4 5 5 5 5 Output: NO","solution":"def can_redistribute_seashells(N, seashell_counts): Determines if it\'s possible to redistribute seashells such that each member ends up with a unique number of seashell types. Parameters: N: int - number of members in the SCE seashell_counts: List[int] - number of different types of seashells each member has Returns: str - \\"YES\\" if possible, otherwise \\"NO\\" unique_seashell_counts = set(seashell_counts) if len(unique_seashell_counts) == N: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a string `s`, check if it is possible to rearrange the characters of `s` to form a palindrome. A palindrome is a string that reads the same backward as forward. A string can be rearranged to form a palindrome if and only if the number of characters with odd frequency counts is at most one. Write a function that determines if the given string\'s characters can be rearranged to form a palindrome. # Input The input is a single line containing the string `s` (1 ≤ |s| ≤ 10^5). The string consists of lowercase English letters only. # Output Print \\"YES\\" if the characters of `s` can be rearranged to form a palindrome, otherwise print \\"NO\\". # Examples Input ``` aabb ``` Output ``` YES ``` Input ``` abc ``` Output ``` NO ``` # Explanation 1. For the string `aabb`, it can be rearranged to form \\"abba\\", which is a palindrome. Thus the output is \\"YES\\". 2. For the string `abc`, it cannot be rearranged to form a palindrome. Thus the output is \\"NO\\".","solution":"def can_form_palindrome(s): Checks if the characters of the given string can be rearranged to form a palindrome. :param s: The input string consisting of lowercase English letters. :return: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\". from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # If more than one character has an odd frequency, it cannot form a palindrome return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"A group of software developers are collaborating on a new project. Each developer is assigned a specific task that comes with a certain difficulty level and estimated completion time. Developers can help each other to complete tasks faster, but only if their skill level is higher than the task difficulty. However, they can only help with a limited number of tasks owing to time constraints. Given the skill level of each developer, the difficulty level and the estimated completion time for each task, determine the minimum possible total time required to complete all tasks. Input The first line contains three integers n, m, and h (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5, 0 ≤ h ≤ 10) — the number of developers, the number of tasks, and the maximum number of tasks each developer can help with. The second line contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^9) — the skill levels of the developers. The third line contains m integers d_1, d_2, ..., d_m (1 ≤ d_i ≤ 10^9) — the difficulty levels of the tasks. The fourth line contains m integers t_1, t_2, ..., t_m (1 ≤ t_i ≤ 10^9) — the estimated completion time of the tasks. Output Print a single integer — the minimum possible total time required to complete all tasks. Examples Input 3 3 1 5 4 6 3 5 2 10 20 5 Output 35 Input 4 2 2 8 3 5 7 5 3 15 10 Output 25 Note Consider the first example. * The first developer can help with one task and can handle task 1 (difficulty 3) faster. * The second developer can help with one task and can handle task 2 (difficulty 5) faster. * The third developer can handle all tasks by themselves but is constrained by the limit of helping only one task. * The remaining tasks are completed by themselves at the given completion times. In the second example: * The first developer can help with both tasks since their skill level is higher than the difficulty of each task and the constraint allows helping two tasks. * As a result, the tasks will be completed with the estimated times of each task contributing to the total (15 + 10 = 25).","solution":"import heapq def minimum_total_time(n, m, h, skills, difficulties, times): developers = list(skills) tasks = list(zip(difficulties, times)) # Developers sorted by their skills in descending order developers.sort(reverse=True) # Tasks sorted by difficulty levels in ascending order tasks.sort() min_time = 0 assigned_tasks_count = [0] * n task_queue = [] task_index = 0 for dev_skill in developers: while task_index < m and tasks[task_index][0] <= dev_skill: heapq.heappush(task_queue, tasks[task_index][1]) task_index += 1 # Developers can help with `h` number of tasks at most for _ in range(h): if task_queue: min_time += heapq.heappop(task_queue) # Any remaining tasks in the task_queue are added to the min_time while task_queue: min_time += heapq.heappop(task_queue) return min_time"},{"question":"Programming Contest has 3 types of problems: Beginners, Intermediate, and Advanced. Each problem is tagged with one of these three categories and a difficulty rating, which is a positive integer. Participants can solve as many problems as they want, but they cannot solve problems of a higher category without solving a set of prerequisites: 1. They can only solve Intermediate problems if they have solved at least one Beginner problem. 2. They can only solve Advanced problems if they have solved at least one Intermediate problem. Given a list of problems with categories and their difficulty ratings, find the maximum possible total difficulty rating of problems that the participants can solve while following the prerequisites. Input The first line contains one integer t — the number of test cases (1 ≤ t ≤ 100). Each of the following 2 * t lines contains test cases, two lines for each. The first line contains one integer n — the number of problems (1 ≤ n ≤ 10^5). The second line contains n pairs of a string and an integer separated by spaces, indicating the category and the difficulty rating of each problem respectively. The string will be one of \\"Beginner\\", \\"Intermediate\\", or \\"Advanced\\". It is guaranteed that the sum of n in all test cases does not exceed 10^5. Output Print t lines, each containing one integer — the maximum possible total difficulty rating for each test case. Example Input 3 3 Beginner 3 Intermediate 5 Advanced 8 4 Beginner 2 Beginner 3 Intermediate 4 Advanced 9 3 Intermediate 1 Intermediate 6 Advanced 10 Output 16 18 0 Note In the first test case, participants can solve all three problems with a total difficulty rating of 3 + 5 + 8 = 16. In the second test case, participants can solve all problems with a total difficulty rating of 2 + 3 + 4 + 9 = 18. In the third test case, participants cannot solve any problem because there\'s no Beginner problem to meet the prerequisite for solving Intermediate problems.","solution":"def max_difficulty_rating(t, test_cases): results = [] for i in range(t): n = test_cases[i*2] problems = test_cases[i*2 + 1] beginner_ratings = [] intermediate_ratings = [] advanced_ratings = [] for j in range(0, len(problems), 2): category = problems[j] rating = int(problems[j+1]) if category == \\"Beginner\\": beginner_ratings.append(rating) elif category == \\"Intermediate\\": intermediate_ratings.append(rating) elif category == \\"Advanced\\": advanced_ratings.append(rating) if beginner_ratings: max_beginner = sum(beginner_ratings) if intermediate_ratings: max_intermediate = sum(intermediate_ratings) if advanced_ratings: max_advanced = sum(advanced_ratings) results.append(max_beginner + max_intermediate + max_advanced) else: results.append(max_beginner + max_intermediate) else: results.append(max_beginner) else: results.append(0) return results"},{"question":"You are given a string S consisting of lowercase English letters. You need to count the frequency of each letter in the string and sort them in descending order of their frequencies. If two letters have the same frequency, they should be sorted in alphabetical order. Print the sorted letters along with their frequencies. Input Format: The first line contains a single string S. Output Format: Print each letter and its frequency in the sorted order on a new line. Format: \\"letter: frequency\\" (without quotes). Constraints: 1 ≤ |S| ≤ 10^5 SAMPLE INPUT aabbbccddaa SAMPLE OUTPUT a: 4 b: 3 c: 2 d: 2 Explanation The input string \\"aabbbccddaa\\" contains: - \'a\' occurs 4 times - \'b\' occurs 3 times - \'c\' occurs 2 times - \'d\' occurs 2 times Sorted by frequency and alphabetically, the output is: a: 4 b: 3 c: 2 d: 2","solution":"def count_and_sort_frequencies(s): Returns a list of tuples representing the letters in the string \'s\' and their frequencies, sorted in descending order of frequencies. If two letters have the same frequency, they are sorted in alphabetical order. :param s: A string consisting of lowercase English letters. :return: List of tuples [(letter, frequency),...] from collections import Counter # Count the frequency of each letter in the string freq = Counter(s) # Sort the letters based on frequency (descending) and then alphabetically sorted_freq = sorted(freq.items(), key=lambda item: (-item[1], item[0])) result = [f\\"{letter}: {count}\\" for letter, count in sorted_freq] return result"},{"question":"Dima is organizing a tournament and wants to form teams from a list of players. Each player has a skill level represented by an integer. Dima wants to form exactly two teams such that: 1. Each team has at least one player. 2. The difference in the total skill levels of the two teams is minimized. Given the skill levels of the players, can you help Dima determine the minimum possible difference in the total skill levels of the two teams? Input The first line contains an integer n (2 ≤ n ≤ 105) — the number of players. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 109) — the skill levels of the players. Output Print a single integer — the minimum possible difference in the total skill levels of the two teams. Examples Input 4 3 1 4 2 Output 0 Input 5 10 20 15 5 25 Output 5 Note In the first sample, the two possible teams can be (3, 1) and (4, 2), both having a total skill level of 4, thus the difference is 0. In the second sample, one way to divide the teams is (10, 20, 5) and (15, 25), leading to total skill levels 35 and 40 respectively, resulting in a minimum difference of 5.","solution":"def min_difference(skill_levels): Returns the minimum possible difference in the total skill levels of two teams. total_sum = sum(skill_levels) n = len(skill_levels) # Use dynamic programming to find the closest sum to half of total_sum. dp = [0] * (total_sum // 2 + 1) for skill in skill_levels: for j in range(total_sum // 2, skill - 1, -1): dp[j] = max(dp[j], dp[j - skill] + skill) return total_sum - 2 * dp[total_sum // 2]"},{"question":"John is working on a project that involves managing records of employees. Each employee has a name and a salary. John wants to sort the employees by their salary in non-decreasing order. However, if two employees have the same salary, they should be sorted by their names in lexicographical order. John needs your help to implement this sorting algorithm. You will be given a list of employees with their respective salaries, and your task is to sort them according to the criteria mentioned above. **Input:** - The first line contains a single integer N (1 ≤ N ≤ 100000), the number of employees. - Each of the next N lines contains a string S (1 ≤ |S| ≤ 100) and an integer P (0 ≤ P ≤ 1000000), representing the name and salary of an employee, respectively. **Output:** - Print the sorted list of employees, where each line contains the name and salary of an employee, separated by a space. **Example:** **Input:** ``` 5 Alice 3000 Bob 4000 Eve 3000 Charlie 4000 David 3500 ``` **Output:** ``` Alice 3000 Eve 3000 David 3500 Bob 4000 Charlie 4000 ``` **Explanation:** - Alice and Eve have the same salary, so they are sorted in lexicographical order by their names. - Bob and Charlie have the same salary, and they are also sorted in lexicographical order by their names. - David has a unique salary, so it is placed accordingly in the sorted order.","solution":"def sort_employees(employee_list): Sorts the employees by their salary in non-decreasing order. If two employees have the same salary, sorts by their names in lexicographical order. sorted_employees = sorted(employee_list, key=lambda x: (x[1], x[0])) return sorted_employees def format_employee_list(employee_list): Formats the sorted employee list into the desired output format. return \\"n\\".join(f\\"{name} {salary}\\" for name, salary in employee_list)"},{"question":"A band competition is being organized, and you are tasked with helping the organizers by developing a program to calculate the final ranking of bands based on their total scores from four different judges. Each judge assigns a score between 0 and 100 inclusive. The band\'s final score is the sum of the scores given by the judges. In the case of ties (bands having the same total score), the band that appears earlier in the input should be ranked higher. Given the scores of multiple bands, you need to output the names of the bands in descending order of their total scores. Input A sequence of multiple datasets is given as input. Each dataset consists of a band name followed by four integers representing the scores given by the four judges. The end of the input is indicated by the string \\"END\\". The length of the band name does not exceed 50 characters (including spaces and special characters). The number of datasets does not exceed 1000. Output For each dataset, output the names of the bands in descending order of their total scores. In case of ties, maintain the order in which the bands appear in the input. Example Input The Rockers 80 92 85 88 Jazz Masters 75 85 90 80 Blues Brothers 90 87 85 90 Pop Stars 70 80 75 85 Folk Singers 88 91 92 89 END Output Folk Singers Blues Brothers The Rockers Jazz Masters Pop Stars","solution":"def rank_bands(band_scores): Ranks bands in descending order of their total scores. In case of ties, maintains the order of the input. Args: band_scores (list of tuples): Each tuple contains the name of the band (string) and four integers representing the scores given by the judges. Returns: list of strings: The names of the bands, sorted by descending order of their total scores. scores_with_total = [(name, sum(scores)) for name, *scores in band_scores] sorted_scores = sorted(scores_with_total, key=lambda x: x[1], reverse=True) return [name for name, _ in sorted_scores] def parse_input(input_data): Parses the multiline input string to extract band scores. Args: input_data (str): The multiline string with band scores ending with \\"END\\". Returns: list of tuples: Each tuple contains the name of the band (string) and four integers as scores. lines = input_data.strip().split(\'n\') band_scores = [] for line in lines: if line.strip() == \\"END\\": break parts = line.rsplit(\' \', 4) band_name = parts[0] scores = list(map(int, parts[1:])) band_scores.append((band_name, *scores)) return band_scores def main(input_data): band_scores = parse_input(input_data) rankings = rank_bands(band_scores) return rankings"},{"question":"We have a string of lowercase alphabets and you are allowed to choose any substring of the string and change the order of characters in the selected substring. Determine if you can rearrange the given string such that it becomes a palindrome. Constraints * 1 leq |S| leq 1000 Input Input is given from Standard Input in the following format: S Output If you can rearrange the string to become a palindrome, print `Yes`; otherwise, print `No`. Examples Input civic Output Yes Input ivicc Output Yes Input hello Output No Input aaabbb Output No","solution":"def can_form_palindrome(s): Determine if the string can be rearranged to form a palindrome. # Count frequencies of each character char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check the number of characters with odd frequencies odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # For string to be rearranged to form a palindrome: # If the string length is even, no character should have an odd frequency. # If the string length is odd, one character can have an odd frequency. return odd_count <= 1"},{"question":"You are given a list of integers. Write a function that returns the second largest unique number in the list. If there is no such number, return -1. Constraints * The list will contain at least 1 integer. * The integers in the list can be positive, negative or zero. Input * A single line containing space-separated integers representing the list of numbers. Output * A single integer representing the second largest unique number, or -1 if there is no such number. Examples Input 4 1 2 3 1 2 Output 3 Input 10 20 20 8 4 8 Output 10 Input 5 3 5 Output 3 Input 7 Output -1","solution":"def second_largest_unique(numbers): Returns the second largest unique number in the list. If there is no such number, returns -1. unique_numbers = set(numbers) if len(unique_numbers) < 2: return -1 sorted_unique_numbers = sorted(unique_numbers, reverse=True) return sorted_unique_numbers[1]"},{"question":"A \\"strobogrammatic number\\" is a number that looks the same when rotated 180 degrees (looked at upside down). For example, 69, 96, 88, and 818 are all strobogrammatic numbers. Given a range of numbers represented by strings low and high where 1 ≤ len(low) ≤ len(high) ≤ 15 and low ≤ high, find the total number of strobogrammatic numbers in the range inclusive. Input The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Then, t pairs of lines follow. Each pair contains two strings low and high (1 ≤ len(low) ≤ len(high) ≤ 15) where the numeric value of low is less than or equal to the numeric value of high. Output Output t lines, where the i-th line contains a single integer denoting the count of strobogrammatic numbers in the range [low, high] inclusive for the i-th test case. Example Input 2 50 100 0 9 Output 3 3 Note Let us explain the two test cases in the sample. Test case 1: In the range [50,100], the strobogrammatic numbers are 69, 88, and 96. Hence, the output is 3. Test case 2: In the range [0,9], the strobogrammatic numbers are 0, 1, and 8. Hence, the output is 3.","solution":"def is_strobogrammatic(num_str): mapping = {\'0\': \'0\', \'1\': \'1\', \'6\': \'9\', \'8\': \'8\', \'9\': \'6\'} rotated = [] for char in reversed(num_str): if char not in mapping: return False rotated.append(mapping[char]) return \\"\\".join(rotated) == num_str def strobogrammatic_count(low, high): count = 0 for num in range(int(low), int(high) + 1): if is_strobogrammatic(str(num)): count += 1 return count def solve(test_cases): results = [] for low, high in test_cases: count = strobogrammatic_count(low, high) results.append(count) return results"},{"question":"You are given an array of n integers and q queries. Each query is defined by three integers: x, y, and k, where (1 <= x <= y <= n) and k is a positive integer. For each query, determine if there is at least one integer within the subarray from index x to index y (inclusive) that is divisible by k. Input The first line contains two integers n (1 <= n <= 100,000) and q (1 <= q <= 100,000) – the number of elements in the array and the number of queries, respectively. The second line contains n integers representing the array a (1 <= a_i <= 10^9). Each of the next q lines contains three integers x, y, and k (1 <= x <= y <= n and 1 <= k <= 100,000) describing the query. Output For each query, print \\"YES\\" if there is at least one integer within the subarray that is divisible by k, and \\"NO\\" otherwise. Examples Input 5 3 3 6 8 10 15 1 3 2 2 5 5 1 5 7 Output YES YES NO","solution":"def query_results(n, q, array, queries): results = [] for x, y, k in queries: found = False for i in range(x - 1, y): if array[i] % k == 0: found = True break results.append(\\"YES\\" if found else \\"NO\\") return results def execute(number_of_elements, number_of_queries, elements, queries): return query_results(number_of_elements, number_of_queries, elements, queries)"},{"question":"Max is organizing a treasure hunt. He has a map that is divided into a grid of cells, each containing a certain amount of treasure. Max can start from any cell and is only allowed to move right or down to collect the treasure. He wants to maximize the amount of treasure collected by the time he reaches the bottom-right cell of the grid. Write a program to determine the maximum amount of treasure Max can collect when starting from the top-left corner of the grid (cell (1,1) which is the top-left corner in a 1-indexed grid) and reaching the bottom-right corner of the grid (cell (n,m) in a 1-indexed grid). Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next n lines contain m integers each, where the j-th integer in the i-th line a[i][j] (0 ≤ a[i][j] ≤ 100) denotes the amount of treasure in the cell (i, j). Output Print a single integer, the maximum amount of treasure Max can collect. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Input 2 2 1 2 1 1 Output 4 Note In the first example, Max can start from the top-left corner, collect the treasures (1) → (3) → (5) → (2) → (1), summing up to 12 units of treasure. In the second example, Max can start from (1) → (2) → (1), summing up to 4 units of treasure.","solution":"def max_treasure(n, m, grid): # Create a dp table to store the maximum treasure that can be collected up to each cell dp = [[0] * m for _ in range(n)] # Initialize the first cell dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right cell contains the maximum treasure that can be collected return dp[-1][-1]"},{"question":"Pietech is working on a data analysis project and needs to compute a very specific metric on their dataset. The dataset consists of N sequences of non-negative integers. For each sequence, he wants to calculate the product of its elements. Then, he needs to find the sum of these products for all sequences in the dataset. However, there\'s a constraint that he needs to handle. If the sum of the products of all sequences exceeds 10^9 + 7, he should return the sum modulo 10^9 + 7. Your task is to write a program that takes the dataset as input, computes the required sum of products, and prints the result modulo 10^9 + 7. Input The first line of input contains an integer N (1 ≤ N ≤ 10^5), the number of sequences. Each of the following N lines contains a sequence of non-negative integers. Each sequence starts with an integer ki (1 ≤ ki ≤ 100), representing the number of elements in the i-th sequence, followed by ki non-negative integers. Output Print the required sum of products for all sequences, modulo 10^9 + 7. Examples Input 3 3 1 2 3 2 4 5 4 0 3 2 1 Output 101 Input 2 5 2 3 4 5 6 3 7 8 9 Output 4560 Note In the first example, the sum of products is computed as follows: 1. The product of the first sequence (1, 2, 3) is 1*2*3 = 6. 2. The product of the second sequence (4, 5) is 4*5 = 20. 3. The product of the third sequence (0, 3, 2, 1) is 0*3*2*1 = 0. Therefore, the sum of all products is 6 + 20 + 0 = 26. Since 26 is less than 10^9 + 7, the output is 26. In the second example: 1. The product of the first sequence (2, 3, 4, 5, 6) is 2*3*4*5*6 = 720. 2. The product of the second sequence (7, 8, 9) is 7*8*9 = 504. Therefore, the sum of all products is 720 + 504 = 1224, and since 1224 is less than 10^9 + 7, the output is 1224.","solution":"MODULO = 10**9 + 7 def compute_sum_of_products(n, sequences): total_sum = 0 for sequence in sequences: k = sequence[0] product = 1 for num in sequence[1:]: product = (product * num) % MODULO total_sum = (total_sum + product) % MODULO return total_sum"},{"question":"Allie works as an event coordinator and she is planning several events happening over the weekend. Each event has a start time and an end time, and she could use a little help optimizing her schedule to attend the maximum number of non-overlapping events. She remembers learning about interval scheduling in one of her computer science classes and wants to write a program to figure this out. The goal is to write a program that will compute the maximum number of non-overlapping events that Allie can attend. Input Format: The first line contains an integer `n`, the number of events. The next `n` lines each contain two integers `start` and `end` (space separated), representing the start time and end time of an event respectively. Output Format: Print the maximum number of non-overlapping events that Allie can attend. Constraints: 1 ≤ n ≤ 100 1 ≤ start < end ≤ 1000 SAMPLE INPUT 5 1 4 2 3 3 5 7 9 6 8 SAMPLE OUTPUT 3 Explanation Allie can attend the following set of non-overlapping events: (2, 3), (3, 5), and (7, 9). This results in the maximum number of 3 non-overlapping events.","solution":"def max_non_overlapping_events(n, events): Computes the maximum number of non-overlapping events that can be attended. :param n: int - number of events :param events: list of tuples, where each tuple contains (start, end) times of an event :return: int - maximum number of non-overlapping events if n == 0: return 0 # Sort events by their end time events.sort(key=lambda x: x[1]) # Initialize variables count = 1 last_end_time = events[0][1] # Iterate through the events checking for overlaps for i in range(1, n): if events[i][0] >= last_end_time: count += 1 last_end_time = events[i][1] return count # Reading input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) events = [(int(data[i]), int(data[i + 1])) for i in range(1, len(data), 2)] print(max_non_overlapping_events(n, events))"},{"question":"Problem Description In a faraway land, there exists a special sequence known as the \\"magical arithmetic sequence.\\" A sequence of integers is defined as magical if the difference between any two consecutive elements is always the same and is either a positive prime number or zero. Given an integer array, your task is to determine whether it can be transformed into a magical arithmetic sequence by rearranging its elements. If it is possible, print \\"Yes\\" and the transformed sequence in non-decreasing order. Otherwise, print \\"No.\\" Note: You may assume that there is always a unique way to transform the array into a magical sequence if it is possible. Input The first line contains an integer T, denoting the number of test cases. Each test case consists of two lines. The first line contains an integer N, denoting the length of the array. The second line contains N space-separated integers. Output For each test case, output a single line containing a string without quotes as follows: If the array can be rearranged into a magical arithmetic sequence, print \\"Yes\\" followed by the transformed sequence in non-decreasing order. Otherwise, print \\"No.\\" Constraints 1 ≤ T ≤ 1000 2 ≤ N ≤ 100 -10^9 ≤ Ai ≤ 10^9 Example Input: 2 4 2 5 8 11 3 1 6 10 Output: Yes 2 5 8 11 No","solution":"def is_prime(number): Check if a number is a prime number. if number <= 1: return False if number <= 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True def check_magical_sequence(arr): Check if the array can be rearranged into a magical arithmetic sequence. arr = sorted(arr) n = len(arr) if n < 2: return False, [] diff = arr[1] - arr[0] if diff != 0 and not is_prime(diff): return False, [] for i in range(2, n): current_diff = arr[i] - arr[i-1] if current_diff != diff: return False, [] return True, arr def magical_sequence(t, test_cases): results = [] for case in test_cases: n, arr = case possible, sequence = check_magical_sequence(arr) if possible: results.append(f\\"Yes {\' \'.join(map(str, sequence))}\\") else: results.append(\\"No\\") return results # Example usage: # t = 2 # test_cases = [(4, [2, 5, 8, 11]), (3, [1, 6, 10])] # print(magical_sequence(t, test_cases))"},{"question":"You are given an n x m grid of ASCII characters, where each character is either a \\"P\\" representing a palm tree, \\"S\\" representing a sea, or \\"B\\" representing a beach. Palm trees can only grow on beaches, and they do not grow in the sea. Your task is to determine the maximum number of connected P characters (\\"palm trees\\") in the horizontal or vertical direction. Connected means that there is no sea (\\"S\\") cell in between, but you should ignore the beach cells (\\"B\\"). Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines contain m characters each — the grid containing \'P\', \'S\', and \'B\'. Output Print a single integer — the maximum number of connected \'P\' cells in any horizontal or vertical path. Examples Input 5 7 PPBPPPP PBBPPBS PPPBPPP BBBBBBB PPBPPPP Output 6 Input 3 4 BPBS PPPP BSSB Output 4 Input 4 5 PPPPP SSSSS PPPPP BBBBB Output 5 Input 2 3 PPP SSS Output 3 Note In the first sample, the maximum number of connected \'P\' cells is 6 in the horizontal path of the first row. In the second example, the maximum number of connected \'P\' cells is 4 from the second row. In the third example, the maximum number of connected \'P\' cells horizontally is 5 from the first row. In the fourth example, the maximum number of connected \'P\' cells is 3 from the first row.","solution":"def max_connected_palms(grid, n, m): def max_line(line): max_count = 0 current_count = 0 for cell in line: if cell == \'P\': current_count += 1 max_count = max(max_count, current_count) elif cell == \'S\': current_count = 0 return max_count max_palm_trees = 0 # Check rows for row in grid: max_palm_trees = max(max_palm_trees, max_line(row)) # Check columns for col in range(m): column_line = [grid[row][col] for row in range(n)] max_palm_trees = max(max_palm_trees, max_line(column_line)) return max_palm_trees # Example usage: # n, m = 5, 7 # grid = [ # \'PPBPPPP\', # \'PBBPPBS\', # \'PPPBPPP\', # \'BBBBBBB\', # \'PPBPPPP\' # ] # print(max_connected_palms(grid, n, m)) # Output: 6"},{"question":"You are given an array a of length n. An element of the array is called \\"peak\\" if it is not smaller than its neighbors. More formally, for an element a[i] to be a peak, it must satisfy one of the following conditions: - If i = 1 (the first element), then a[i] ≥ a[i+1] - If i = n (the last element), then a[i] ≥ a[i-1] - If 1 < i < n, then a[i] ≥ a[i-1] and a[i] ≥ a[i+1] Your task is to find the number of peak elements in the array. Input The first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the array a. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print one integer — the number of peak elements in the array. Examples Input 5 1 3 2 5 4 Output 2 Input 3 7 7 7 Output 3 Input 4 4 2 1 3 Output 2 Note In the first example, the peak elements are 3 and 5. In the second example, all elements are considered peaks because they are equal to their neighbors. In the third example, the peak elements are 4 and 3.","solution":"def count_peaks(n, a): Returns the number of peak elements in the array. if n == 1: return 1 peaks = 0 for i in range(n): if i == 0: if a[i] >= a[i + 1]: peaks += 1 elif i == n - 1: if a[i] >= a[i - 1]: peaks += 1 else: if a[i] >= a[i - 1] and a[i] >= a[i + 1]: peaks += 1 return peaks"},{"question":"You are given a matrix of dimensions m x n, filled with integers. Your task is to find a submatrix (any size) such that the sum of all its elements is as close as possible to zero. If there are multiple such submatrices, any one of them can be returned. Input The first line of input consists of two integers m and n, indicating the rows and columns of the matrix (1 ≤ m, n ≤ 100). The next m lines each contain n integers, representing the elements of the matrix. Output Output a single integer representing the sum of the elements of the submatrix which is closest to zero. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output Closest sum to zero could be obtained with submatrix: 1 2 4 5 Or simply one element submatrix 1 or -2 Output: 1","solution":"def find_closest_submatrix_sum(matrix): Finds the submatrix with the sum closest to zero. Args: matrix (list of list of ints): The input matrix. Returns: int: The sum of the elements of the submatrix which is closest to zero. m = len(matrix) n = len(matrix[0]) closest_sum = float(\'inf\') closest_val = None # Precompute cumulative sums for the matrix cum_matrix = [[0]*n for _ in range(m)] cum_matrix[0][0] = matrix[0][0] for i in range(1, m): cum_matrix[i][0] = cum_matrix[i-1][0] + matrix[i][0] for j in range(1, n): cum_matrix[0][j] = cum_matrix[0][j-1] + matrix[0][j] for i in range(1, m): for j in range(1, n): cum_matrix[i][j] = matrix[i][j] + cum_matrix[i-1][j] + cum_matrix[i][j-1] - cum_matrix[i-1][j-1] for r1 in range(m): for r2 in range(r1, m): for c1 in range(n): for c2 in range(c1, n): cur_sum = cum_matrix[r2][c2] if r1 > 0: cur_sum -= cum_matrix[r1-1][c2] if c1 > 0: cur_sum -= cum_matrix[r2][c1-1] if r1 > 0 and c1 > 0: cur_sum += cum_matrix[r1-1][c1-1] if abs(cur_sum) < abs(closest_sum): closest_sum = cur_sum closest_val = cur_sum # If we find a sum that is exactly zero, we can return immediately if closest_val == 0: return closest_val return closest_val"},{"question":"A digital billboard displays the remaining time in a countdown timer format (HH:MM:SS). You are given an integer n, representing the total seconds left for the countdown. Create a function that outputs the time format HH:MM:SS for the remaining seconds. Constraints: - 0 ≤ n ≤ 10^7 Input: - A single integer n (0 ≤ n ≤ 10^7) representing the number of seconds remaining. Output: - A single line of text in the format \\"HH:MM:SS\\" corresponding to the given number of seconds. Ensure that each component (hours, minutes, and seconds) is two digits long. Example: Input: 3661 Output: 01:01:01 Explanation: - The input represents 3661 seconds, which is equivalent to 1 hour, 1 minute, and 1 second. - Therefore, the expected output is \\"01:01:01\\". Note: - Ensure that the output always uses two digits for each component of the time (e.g., 04:05:09).","solution":"def format_time(n): Convert seconds to a time string in the format HH:MM:SS Parameters: n (int): Total seconds Returns: str: Time in HH:MM:SS format hours = n // 3600 minutes = (n % 3600) // 60 seconds = n % 60 return f\\"{hours:02}:{minutes:02}:{seconds:02}\\""},{"question":"You are given an array of integers and a target integer. Your task is to find a combination of the array elements that sum up to the target. If such a combination exists, print the elements, else print -1. You can use each element of the array only once. Input * The first line of input contains an integer n, the size of the array (1 ≤ n ≤ 20). * The second line of input contains n integers, the elements of the array (each between 1 and 100). * The third line of input contains a single integer t, the target sum (1 ≤ t ≤ 1000). Output * If there is no combination of array elements that sum up to the target, print -1. * Otherwise, print the elements that sum up to the target in any order. If there are multiple such combinations, print any. If no elements are needed (i.e., the target is 0), print an empty line. Examples Input 5 2 3 7 8 10 10 Output 2 8 Input 4 1 2 5 9 21 Output -1 Input 3 1 3 5 0 Output Note In the first example, there are multiple combinations that sum up to 10 such as [2, 8] and [3, 7]. Any valid combination can be printed. In the second example, there is no combination of the array elements that sum up to 21, so the output is -1. In the third example, the target is 0, no elements are needed to sum up to 0, so the output is an empty line.","solution":"from itertools import combinations def find_combination(n, arr, t): Find a combination of elements in the array that sum up to the target t. Parameters: n (int): Size of the array. arr (list of int): List of integers in the array. t (int): Target sum. Returns: list of int: A list containing the combination of elements that sum up to t or -1 if no combination exists. # Handle special case where target is 0 if t == 0: return [] # Try combinations of all possible lengths for r in range(1, n + 1): for combo in combinations(arr, r): if sum(combo) == t: return list(combo) return -1"},{"question":"You are given an array `arr` of `n` positive integers. Your task is to find the maximum number of non-overlapping subarrays such that the sum of each subarray is a prime number. Input The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers separated by spaces a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4) — the elements of the array. Output Print one integer — the maximum number of non-overlapping subarrays whose sums are prime numbers. Examples Input 5 2 3 5 7 11 Output 5 Input 6 4 6 8 10 12 14 Output 0 Input 7 1 2 3 4 5 6 7 Output 4 Input 4 4 6 9 15 Output 0 Note In the first example, each subarray consists of a single element, and each element is a prime number. In the second example, no subarray has a sum that is a prime number. In the third example, possible subarray splits include: [1, 2], [3], [4], [5], [6], [7] where each subarray sum is a prime number. In the fourth example, no subarray has a sum that is a prime number.","solution":"from math import isqrt def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def max_non_overlapping_subarrays_with_prime_sum(arr): prime_sums = [is_prime(x) for x in arr] return sum(prime_sums)"},{"question":"Shreya is fascinated with numbers and she recently learned about prime numbers. She decides to create a sequence of consecutive prime numbers and wants to calculate the product of any two prime numbers in this sequence. However, Shreya finds it challenging to determine the positions in the sequence efficiently. Given a list of queries where each query provides two positions in the sequence of consecutive prime numbers, write a program to calculate the product of the prime numbers at those respective positions for each query. For example, if the prime numbers sequence is [2, 3, 5, 7, 11, 13, 17, 19, ...] and the query is (2, 4), you need to find the product of the prime numbers at the 2nd and 4th positions in this sequence, which are 3 and 7 respectively. The product is 21. Input The first line contains an integer q (1 ≤ q ≤ 1000) — the number of queries. The next q lines contain two space-separated integers each, representing positions (p1, p2) (1 ≤ p1, p2 ≤ 1000) for the primes sequence. Output For each query, output a single line containing the product of the prime numbers at positions p1 and p2. Example Input 3 2 4 1 3 5 5 Output 21 10 121 Note In the first example, the prime numbers are [2, 3, 5, 7, 11...]: For the query (2, 4), the primes at these positions are 3 and 7, and their product is 21. For the query (1, 3), the primes at these positions are 2 and 5, and their product is 10. For the query (5, 5), the prime number at the 5th position is 11, and the product is 11 * 11 = 121.","solution":"def sieve_of_eratosthenes(n): Returns a list of primes up to n (inclusive) using the Sieve of Eratosthenes algorithm. is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if is_prime[p] == True: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [p for p in range(2, n + 1) if is_prime[p]] def generate_primes(n): Generates the first n prime numbers. upper_bound = n * 15 # Use an upper bound to ensure enough primes primes = sieve_of_eratosthenes(upper_bound) return primes[:n] def primes_product(queries): For a given list of queries where each query provides two positions in the sequence of consecutive prime numbers, return the product of the prime numbers at those respective positions. max_position = max(max(p1, p2) for p1, p2 in queries) primes = generate_primes(max_position) results = [] for p1, p2 in queries: product = primes[p1 - 1] * primes[p2 - 1] results.append(product) return results"},{"question":"You are given a matrix `grid` of size `m x n` consisting of integers where each cell represents the altitude of a point. Rainwater can flow from one cell to another cell directly north, south, east, or west if the altitude of the next cell is less than or equal to the current cell\'s altitude. Find all cells where rainwater can flow to both the Pacific and Atlantic ocean. The Pacific ocean touches the left and top edges of the matrix, and the Atlantic ocean touches the right and bottom edges. Return a 2D list of grid coordinates (i, j) where rainwater can flow to both the Pacific and Atlantic ocean. Input The first line contains two integers, `m` and `n` (1 ≤ m, n ≤ 200) — the number of rows and columns in the matrix. The next `m` lines each contain `n` integers, representing the altitude of each cell in the matrix (1 ≤ grid[i][j] ≤ 10^5). Output In the first line, print the number of coordinates where rainwater can flow to both the Pacific and Atlantic oceans. In the second line, print the coordinates as pairs of integers, each pair separated by a space. Examples Input 5 5 1 2 2 3 5 3 2 3 4 4 2 4 5 3 1 6 7 1 4 5 5 1 1 2 4 Output 7 0 4 1 3 1 4 2 2 3 0 3 1 4 0","solution":"def pacific_atlantic(matrix): if not matrix or not matrix[0]: return [] m, n = len(matrix), len(matrix[0]) def bfs(starts): reachable = set(starts) queue = starts[:] while queue: r, c = queue.pop(0) for (dr, dc) in ((0, 1), (1, 0), (0, -1), (-1, 0)): nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n and (nr, nc) not in reachable and matrix[nr][nc] >= matrix[r][c]: queue.append((nr, nc)) reachable.add((nr, nc)) return reachable pacific_starts = [(0, c) for c in range(n)] + [(r, 0) for r in range(1, m)] atlantic_starts = [(m-1, c) for c in range(n)] + [(r, n-1) for r in range(m-1)] pacific_reachable = bfs(pacific_starts) atlantic_reachable = bfs(atlantic_starts) result = list(pacific_reachable & atlantic_reachable) result.sort() # Ensure the order is consistent for easier testing return len(result), result"},{"question":"You are given an array of integers. You can perform the following operation repeatedly: choose any two consecutive elements of the array, remove them, and insert their sum back into the array. Your task is to determine the maximum possible value of the sum of all elements after performing the operation exactly ( n-1 ) times, where ( n ) is the length of the array (i.e., reducing the array to a single element). Input The first line contains an integer ( n ) (2 ≤ ( n ) ≤ 100) — the length of the array. The second line contains ( n ) integers ( a_1, a_2, ldots, a_n ) (1 ≤ ( a_i ) ≤ ( 10^9 )) — the elements of the array. Output Output a single integer — the maximum possible value after reducing the array to a single element. Examples Input 4 2 3 5 1 Output 21 Input 3 1 2 3 Output 9 Note In the first example, the optimal sequence of operations is as follows: - Remove 1 and 5, insert 6: array becomes [2, 3, 6] - Remove 6 and 3, insert 9: array becomes [2, 9] - Remove 9 and 2, insert 11: array becomes [11] In the second example, the optimal sequence of operations is as follows: - Remove 2 and 3, insert 5: array becomes [1, 5] - Remove 1 and 5, insert 6: array becomes [6]","solution":"def max_sum_reduction(n, arr): Returns the maximum possible value after reducing the array to a single element by repeatedly choosing any two consecutive elements, removing them, and inserting their sum back. # Since adding operations on integers occur cumulatively, # the maximum possible value is just the sum of all elements of the initial array. return sum(arr)"},{"question":"Given an array of integers, you need to determine the minimum number of contiguous subarrays needed to cover all the peaks in the array. A peak is defined as an element that is greater than its immediate neighbors (i.e., an element a[i] is a peak if it’s greater than a[i-1] and a[i+1]). Input The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. The sum of n across all test cases does not exceed 10^6. Output For each test case, output a single integer — the minimum number of contiguous subarrays needed to cover all the peaks. Example Input 3 5 1 3 2 4 1 6 1 2 3 4 5 6 8 1 3 2 4 1 5 2 6 Output 2 0 3 Note In the first test case, there are two peaks: 3 (a[2]) and 4 (a[4]). You can cover both peaks with two subarrays: [1, 3, 2] and [2, 4, 1]. In the second test case, there are no peaks, so the output is 0. In the third test case, there are three peaks: 3 (a[2]), 4 (a[4]), and 5 (a[6]). You can cover these peaks using three subarrays: [1, 3, 2], [2, 4, 1], and [1, 5, 2].","solution":"def min_subarrays_to_cover_peaks(t, test_cases): results = [] def find_peaks(arr): peaks = [] n = len(arr) for i in range(1, n - 1): if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: peaks.append(i) return peaks for test_case in test_cases: n, arr = test_case peaks = find_peaks(arr) results.append(len(peaks)) return results"},{"question":"You are given a string of lowercase English letters. Determine if the string can be made a palindrome by changing at most one character. Constraints * 1 ≤ Length of the string ≤ 10^5 Input Input is given from Standard Input in the following format: s Output If the string can be made a palindrome by changing at most one character, print `Yes`; otherwise, print `No`. Examples Input abca Output Yes Input racecar Output Yes Input abcdef Output No","solution":"def can_be_palindrome_by_one_change(s): Determine if the given string can be made a palindrome by changing at most one character. n = len(s) mismatch_count = 0 # Compare characters from the beginning and the end toward the middle for i in range(n // 2): if s[i] != s[n - i - 1]: mismatch_count += 1 if mismatch_count > 1: return \\"No\\" return \\"Yes\\""},{"question":"You are given a string S consisting of lowercase English letters. Your task is to determine the number of substrings of S that contain at most one distinct letter. Input and Output The first line contains T, the number of test cases. Each test case: one line containing the string S. For each test case, print the required answer in one line. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 SAMPLE INPUT 2 aaa abc SAMPLE OUTPUT 6 3 Explanation For the first test case: \\"aaa\\" has the following valid substrings: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\". So, 6 valid substrings. For the second test case: \\"abc\\" has the following valid substrings: \\"a\\", \\"b\\", \\"c\\". So, 3 valid substrings.","solution":"def count_substrings_with_one_distinct_letter(S): Counts the number of substrings with at most one distinct letter. count = 0 n = len(S) i = 0 while i < n: j = i while j < n and S[j] == S[i]: j += 1 length = j - i count += (length * (length + 1)) // 2 i = j return count def process_test_cases(T, test_cases): results = [] for case in test_cases: results.append(count_substrings_with_one_distinct_letter(case)) return results"},{"question":"You are given a grid with n x m cells. Each cell can either be empty (represented by \'.\') or contain an obstacle (represented by \'#\'). You are tasked to help a group of robots to travel from the top-left cell (1,1) to the bottom-right cell (n,m). The robots can move up, down, left, or right, but they cannot move into or through cells with obstacles. The task is to determine the number of distinct paths from the start cell to the goal cell. Two paths are considered distinct if they do not travel through the exact same set of cells. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), where n is the number of rows and m is the number of columns in the grid. The following n lines each contain a string of length m, consisting of \'.\' and \'#\' characters representing the grid. Output Output the number of distinct paths from the top-left cell (1,1) to the bottom-right cell (n,m). If no path exists, output 0. Examples Input 3 3 ... .#. ... Output 2 Input 2 2 .# #. Output 0","solution":"def find_unique_paths(grid, n, m): if grid[0][0] == \'#\' or grid[-1][-1] == \'#\': return 0 dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = 1 # Start point for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] def parse_input(input_grid): lines = input_grid.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(line) for line in lines[1:]] return grid, n, m def count_paths(input_grid): grid, n, m = parse_input(input_grid) return find_unique_paths(grid, n, m)"},{"question":"An energy drink manufacturer wants to know how popular its new drink is among university students. The company conducted a survey in which students were asked whether they liked the drink or not. Each student can either \\"like\\" or \\"dislike\\" the drink. Your task is to determine the number of students who \\"like\\" the drink after every survey response. Input: The input consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 100) — the number of survey responses. The second line contains a string of length n, where each character is either \'L\' (representing a \\"like\\") or \'D\' (representing a \\"dislike\\"). Output: Print n integers, each representing the cumulative number of students who \\"like\\" the drink after each survey response. Example: Input: 5 LDLLD Output: 1 1 2 3 3 Explanation: - After the first response: 1 student likes the drink. - After the second response: still 1 student likes the drink. - After the third response: 2 students like the drink. - After the fourth response: 3 students like the drink. - After the fifth response: still 3 students like the drink.","solution":"def survey_results(n, responses): Determines the cumulative number of students who \\"like\\" the drink after each survey response. :param n: Number of survey responses :param responses: String of length n with each character either \'L\' or \'D\' :return: List of integers representing cumulative count of \\"like\\" responses cumulative_likes = [] current_likes = 0 for response in responses: if response == \'L\': current_likes += 1 cumulative_likes.append(current_likes) return cumulative_likes"},{"question":"A popular online game allows players to form teams and participate in various challenges and missions. The game awards points based on the contribution of each player to the team effort. The points scored by each player are then summed up to give the total points scored by the team. As a game administrator, you need to calculate and display the total points scored by each team. Each team has exactly 5 players. The points scored by each player are given in a single line as space-separated integers. Create a program to calculate and output the total points scored by each team. input The input consists of 3 lines, each line containing 5 space-separated integers representing the points scored by the players in a team. output Output the total points scored by each team in three lines, each showing the total points of one team. Example Input ``` 10 20 30 40 50 5 15 25 35 45 8 16 24 32 40 ``` Output ``` 150 125 120 ```","solution":"def calculate_team_points(input_string): Calculate and return the total points scored by each team. :param input_string: A string with 3 lines, each line containing 5 space-separated integers representing the points scored by the players in a team. :return: A list with total points of each team in three lines. lines = input_string.strip().split(\'n\') results = [] for line in lines: points = list(map(int, line.split())) total_points = sum(points) results.append(total_points) return results # Sample usage # input_string = 10 20 30 40 50 # 5 15 25 35 45 # 8 16 24 32 40 # print(calculate_team_points(input_string)) # Output: [150, 125, 120]"},{"question":"Given a string s consisting only of letters \'a\' and \'b\', determine the smallest number of operations required to make all the letters in the string the same. An operation consists of choosing any two adjacent letters and changing one of them to match the other. Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 10^6). Output Output a single integer: the smallest number of operations required to make all the letters in the string the same. Examples Input abba Output 1 Input bbba Output 1 Input ababab Output 3 Note In the first example, one possible way to make all letters the same with the minimum number of operations is: - Change the second \'b\' to \'a\' (or change the first \'a\' to \'b\') so the string becomes \'aaaa\' (or \'bbbb\'), which requires just 1 operation. In the second example, one possible way to make all letters the same with the minimum number of operations is: - Change the last \'a\' to \'b\' so the string becomes \'bbbb\', which requires just 1 operation. In the third example, one possible way to make all letters the same with the minimum number of operations is: - Change the second \'a\' to \'b\', the fourth \'a\' to \'b\', and the sixth \'a\' to \'b\' so the string becomes \'bbbbbb\', which requires 3 operations.","solution":"def min_operations_to_unify(s): Returns the smallest number of operations required to make all the letters in the string the same. An operation consists of choosing any two adjacent letters and changing one of them to match the other. if not s: return 0 operations = 0 for i in range(1, len(s)): if s[i] != s[i - 1]: operations += 1 return (operations + 1) // 2"},{"question":"On Pathland\'s vast network of roads, there are n locations connected by m bidirectional roads. The government of Pathland has decided to improve access by ensuring there is a single central hub that has the shortest possible maximum distance to all other locations. To determine the best central hub, they need to know which location minimizes the farthest distance any vehicle would need to travel from that hub to any other location. This problem can be modeled as finding the location with the minimum of the maximum shortest paths to all other locations. Input: - The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) - the number of locations and roads respectively. - Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) representing a road between locations u and v with a length of w. Output: - Print a single integer which is the location of the hub such that the maximum distance from this location to any other location is the smallest possible. If there are multiple locations with the same minimal maximum distance, print the smallest numbered location among them. Examples: Input 5 6 1 2 3 2 3 2 3 4 4 4 5 1 5 1 5 2 4 1 Output 2 Input 4 3 1 2 1 2 3 1 3 4 1 Output 2","solution":"import heapq def find_central_hub(n, m, roads): # Initialize graph as an adjacency list graph = [[] for _ in range(n + 1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(source): distances = [float(\'inf\')] * (n + 1) distances[source] = 0 min_heap = [(0, source)] while min_heap: current_distance, node = heapq.heappop(min_heap) if current_distance > distances[node]: continue for neighbor, weight in graph[node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return distances[1:] min_max_distance = float(\'inf\') best_location = -1 for i in range(1, n + 1): distances = dijkstra(i) max_distance = max(distances) if max_distance < min_max_distance: min_max_distance = max_distance best_location = i elif max_distance == min_max_distance: best_location = min(best_location, i) return best_location"},{"question":"You are given a list of `n` distinct integers, and another integer `k`. Your task is to determine whether there exists a pair of elements in the list whose sum is equal to `k`. Input The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines: The first line contains two integers `n` (1 ≤ n ≤ 100) and `k` (0 ≤ k ≤ 10^4). The second line contains `n` distinct integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4) representing the list of integers. Output For each test case, print \\"YES\\" if there exists a pair of elements in the list whose sum is equal to `k`, otherwise print \\"NO\\". Example Input 3 4 8 1 2 3 5 5 10 1 2 3 4 5 3 7 0 -1 8 Output YES NO YES Explanation In the first test case, the pair (3, 5) sums to 8, so the output is \\"YES\\". In the second test case, there is no pair of elements that sums to 10, so the output is \\"NO\\". In the third test case, the pair (-1, 8) sums to 7, so the output is \\"YES\\".","solution":"def has_pair_with_sum(n, k, arr): Determines if there exists a pair of elements in the list whose sum is equal to k. Parameters: n (int): The number of elements in the list. k (int): The target sum. arr (list): The list of n distinct integers. Returns: str: \\"YES\\" if there exists a pair whose sum is k, \\"NO\\" otherwise. seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" def process_test_cases(t, test_cases): Processes multiple test cases and returns results for each. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains (n, k, arr) Returns: list: List of results for each test case. results = [] for n, k, arr in test_cases: results.append(has_pair_with_sum(n, k, arr)) return results"},{"question":"You are working at a company that processes large data logs generated daily from various sensors placed in multiple locations. Each sensor records multiple types of events. One of the tasks you have been assigned is to analyze these events and answer specific queries efficiently. The data logs contain information about various events captured by different sensors. Each event is associated with a particular sensor and a timestamp. You need to design a system that can handle a sequence of queries. Each query will ask for the number of events of a particular type that occurred within a specific time range across all sensors. Input The first line contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5), the number of events and the number of queries. The next n lines describe the events, each line contains an integer t (1 ≤ t ≤ 10^9), a string s (1 ≤ |s| ≤ 10), and a string e (1 ≤ |e| ≤ 10), representing the timestamp t, the sensor identifier s, and the event type e. The next q lines describe the queries, each line contains two integers t1, t2 (1 ≤ t1 ≤ t2 ≤ 10^9) and a string e_query (1 ≤ |e_query| ≤ 10), representing the start time t1, end time t2, and the event type to query e_query. Output For each query, output the number of events of type e_query that occurred between timestamps t1 and t2 (inclusive). Example Input 5 3 5 sensor1 eventA 10 sensor2 eventB 15 sensor1 eventA 20 sensor3 eventC 25 sensor2 eventA 10 20 eventA 5 25 eventB 1 30 eventA Output 1 1 3 Note In this example: - The first query asks for the number of \\"eventA\\" between timestamps 10 and 20. There is 1 such event. - The second query asks for the number of \\"eventB\\" between timestamps 5 and 25. There is 1 such event. - The third query asks for the number of \\"eventA\\" between timestamps 1 and 30. There are 3 such events.","solution":"def event_query(n, q, events, queries): Handles the given events and queries, returning the results for each query. :param n: Number of events :param q: Number of queries :param events: List of tuples (timestamp, sensor, event_type) :param queries: List of tuples (start_time, end_time, event_type) :return: List of integers representing the count of events for each query from collections import defaultdict event_dict = defaultdict(list) # Collect events of each type in a sorted list. for t, s, e in events: event_dict[e].append(t) # Sort timestamps for each event type for e in event_dict: event_dict[e].sort() results = [] for t1, t2, e_query in queries: if e_query in event_dict: timestamps = event_dict[e_query] # Find the count of timestamps in the range [t1, t2] count = sum(t1 <= t <= t2 for t in timestamps) results.append(count) else: results.append(0) return results"},{"question":"Aisha is a competitive programmer who is preparing for an upcoming coding contest. To keep track of her practice sessions, she maintains a log where she notes down the number of problems she could solve each day. She has been practicing for N days and wants to analyze her performance over different ranges of days. Your task is to help Aisha by writing a program that, given her log of problems solved each day, can efficiently answer multiple queries about the total number of problems solved over various ranges of days. Input The first line contains two integers N and Q, where N is the number of days and Q is the number of queries. The second line contains N integers, where the i-th integer denotes the number of problems Aisha solved on the i-th day. Each of the next Q lines contains two integers L and R (1-based index), where L is the starting day and R is the ending day of the range for which the query is made. Output For each query, output the total number of problems solved by Aisha from day L to day R (inclusive). Example Input: 5 3 2 4 3 1 6 1 3 2 4 3 5 Output: 9 8 10 Explanation: Example case 1. For the first query (1, 3), the total number of problems solved from day 1 to day 3 is 2 + 4 + 3 = 9. For the second query (2, 4), the total number of problems solved from day 2 to day 4 is 4 + 3 + 1 = 8. For the third query (3, 5), the total number of problems solved from day 3 to day 5 is 3 + 1 + 6 = 10.","solution":"def solve(N, Q, problems, queries): Returns a list of sums of problems solved over given ranges from the queries. Args: N: int : Number of days Q: int : Number of queries problems: List[int] : List of problems solved each day queries: List[Tuple[int, int]] : List of L and R pairs (1-based index) Returns: List[int] : List of sums for each query range # Create prefix sum array prefix_sum = [0] * (N + 1) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + problems[i - 1] # Process each query results = [] for (L, R) in queries: sum_in_range = prefix_sum[R] - prefix_sum[L - 1] results.append(sum_in_range) return results"},{"question":"Problem You are given a grid of size N x M filled with non-negative integers. You need to rotate the grid 90 degrees clockwise. After rotation, the last row of the grid becomes the first column, the last column becomes the last row, and so on. Write a function that takes the grid as input and outputs the rotated grid. Constraints The input satisfies the following conditions: * 1 ≤ N, M ≤ 100 * 0 ≤ grid[i][j] ≤ 1000 Input The input is given in the following format: * The first line contains two integers, N and M, denoting the number of rows and columns in the grid. * The next N lines each contain M integers representing the grid. Output Print the rotated grid. Each row of the rotated grid should be printed in a new line, with each integer separated by a space. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 7 4 1 8 5 2 9 6 3 Input 2 4 1 2 3 4 5 6 7 8 Output 5 1 6 2 7 3 8 4","solution":"def rotate_grid(N, M, grid): Rotates a given N x M grid 90 degrees clockwise. Parameters: N (int): Number of rows in the grid. M (int): Number of columns in the grid. grid (list of list of int): The N x M grid. Returns: list of list of int: The rotated grid. rotated_grid = [[0] * N for _ in range(M)] for i in range(N): for j in range(M): rotated_grid[j][N - 1 - i] = grid[i][j] return rotated_grid def read_input(): N, M = map(int, input().split()) grid = [list(map(int, input().split())) for _ in range(N)] return N, M, grid def print_grid(grid): for row in grid: print(\\" \\".join(map(str, row))) if __name__ == \\"__main__\\": N, M, grid = read_input() rotated_grid = rotate_grid(N, M, grid) print_grid(rotated_grid)"},{"question":"A large organization has multiple departments and employees. Each department can have multiple employees, but each employee belongs to only one department. Additionally, the organization has formed several committees, where each committee includes any number of employees from different departments. Committees overlap, meaning an employee can be part of multiple committees. The management wants to identify the minimal number of employees who, if selected, can ensure that at least one member from any committee is selected. This subset of employees should be such that no matter which committee is chosen, there is at least one selected employee who is a member of that committee. Input The first line contains two integers n and c (1 ≤ n, c ≤ 1000) — the number of employees and the number of committees respectively. Each of the next n lines contains the information about each employee. The line starts with an integer d (0 ≤ d ≤ 100) — the department number the employee belongs to, followed by an integer k (0 ≤ k ≤ c), and then k integers representing the committees that the employee is part of. It is guaranteed that there is at least one employee in every committee. Output Print a single integer — the minimal number of employees that need to be selected to meet the management\'s requirement. Examples Input 5 3 1 2 1 2 1 1 3 2 1 1 2 2 2 3 2 0 Output 2 Input 4 2 1 1 1 2 1 2 1 1 2 2 1 1 Output 2 Note In the first sample test case, if we select employees 1 and 4, every committee will have at least one employee from the selected set. Specifically, committee 1 has employee 1, committee 2 has employees 1 and 4, and committee 3 has employee 4. In the second sample test case, employees 1 and 3 can be selected to satisfy the requirement. Committee 1 will have employee 1 and committee 2 will have employee 3.","solution":"from itertools import combinations def minimal_employees_to_cover_committees(n, c, employees): committees = [set() for _ in range(c)] for idx, emp in enumerate(employees): for committee in emp[2:]: committees[committee-1].add(idx+1) selected_employees = set() def is_covered(selected): for committee in committees: if not any(emp in selected for emp in committee): return False return True for size in range(1, n+1): for comb in combinations(range(1, n+1), size): if is_covered(comb): return len(comb) return n # Function to be used in testing def parse_input(n, c, employee_lines): employees = [list(map(int, line.split())) for line in employee_lines] return minimal_employees_to_cover_committees(n, c, employees)"},{"question":"A team-building exercise is being planned in your organization, involving a group of employees spread out across different departments. The goal is to form the smallest number of project teams such that no two employees from the same department are ever in the same team. Each employee can only belong to one team, and every employee must be included in a team. Given the list of departments each employee belongs to, determine the minimum number of teams required to meet the condition. Input The first line contains a single integer `n` (1 ≤ n ≤ 1000) representing the number of employees. The next `n` lines each contain an integer `d` (1 ≤ d ≤ 100) representing the department that the ith employee belongs to. Output Print a single integer that represents the minimum number of teams required. Example Input 5 1 2 3 1 2 Output 3 Input 7 4 4 4 3 3 1 1 Output 3","solution":"def minimum_number_of_teams(n, departments): Returns the minimum number of teams required such that no two employees from the same department are in the same team. :param n: Number of employees :param departments: List of departments each employee belongs to :return: Minimum number of teams required from collections import Counter department_counts = Counter(departments) return max(department_counts.values())"},{"question":"You are given two matrices A and B of dimensions m x n and n x p respectively. Write a program to compute the resulting matrix C of dimensions m x p from the matrix multiplication A * B. Notes Constraints * 1 ≤ m, n, p ≤ 500 * Elements of the matrices are integers ranging from -1000 to 1000 Input First, the dimensions m and n are given followed by the matrix A. Each subsequent pair of numbers represents a row of the matrix A with n integers. Next, the dimension p is given followed by matrix B. Each subsequent set of n numbers represents a column of the matrix B with p integers. Output Print the resulting matrix C, with each of its rows on a new line, and with elements separated by spaces. Examples Input 2 3 1 2 3 4 5 6 3 7 8 9 10 11 12 13 14 15 Output 66 72 78 156 171 186 Input 3 2 1 2 3 4 5 6 2 7 8 9 10 Output 25 28 57 64 89 100","solution":"def matrix_multiply(m, n, p, A, B): Multiplies two matrices A and B. # Initialize resulting matrix C with zeros C = [[0] * p for _ in range(m)] # Perform matrix multiplication for i in range(m): for j in range(p): for k in range(n): C[i][j] += A[i][k] * B[k][j] return C"},{"question":"A fleet of warships is on a mission to secure vital sea routes. Every day, each warship needs to be refueled and rearmed. To ensure smooth operations, the fleet\'s commander has devised a plan using a specialized algorithm that determines the refueling order based on the warships\' current fuel levels. The commander wants to minimize the time spent refueling the entire fleet. Each warship has a unique fuel level that determines its priority in the queue: ships with lower fuel levels should be refueled first. However, if two or more warships have the same fuel level, they should be refueled based on their original order in the fleet\'s roster. Given an array of integers where each integer represents the fuel level of a warship, implement a function that returns the order in which the warships should be refueled. # Input - The input consists of a single array `fuel_levels` of length `n` (1 ≤ n ≤ 10^5), where `fuel_levels[i]` is the fuel level of the ith warship in the fleet. # Output - The output should be a list of indices (0-based) representing the order in which the warships from the input should be refueled. # Constraints - All fuel levels are non-negative integers, and the maximum value for any fuel level is 10^9. # Example Input ``` fuel_levels = [4, 2, 5, 3] ``` Output ``` [1, 3, 0, 2] ``` Explanation In this case: - The second warship (index 1) has the lowest fuel level (2) and will be refueled first. - The fourth warship (index 3) has the next lowest fuel level (3) and will be refueled next. - The first warship (index 0) has a fuel level of 4 and is refueled third. - The third warship (index 2) has the highest fuel level (5) and is refueled last.","solution":"def refuel_order(fuel_levels): Given an array of fuel levels, returns the order in which the warships should be refueled. Args: - fuel_levels (List[int]): List of fuel levels for each warship. Returns: - List[int]: Indices of warships in the order they should be refueled. # Generate a list of tuples containing fuel levels and their original indices indexed_fuel_levels = list(enumerate(fuel_levels)) # Sort the list based on fuel level, and use index to maintain the original order when fuel levels are the same indexed_fuel_levels.sort(key=lambda x: (x[1], x[0])) # Extract the indices from the sorted list refuel_indices = [idx for idx, _ in indexed_fuel_levels] return refuel_indices"},{"question":"You are given an array of integers b_1, b_2, ..., b_m. Write a program to find the smallest non-negative integer that is not present in the array. Input The first line contains a single integer m (1 ≤ m ≤ 10^5) — the length of the array b. The second line contains m integers b_1, b_2, ..., b_m (0 ≤ b_i ≤ 10^9) — the elements of the array b. Output Print the smallest non-negative integer that is not present in the array. Example Input 5 0 2 1 5 3 Output 4 Note In the given example, the integers 0, 1, 2, 3, and 5 are present in the array. The smallest non-negative integer that is not in the array is 4.","solution":"def smallest_missing_integer(m, b): Returns the smallest non-negative integer not present in the array. :param m: Length of the array b (integer). :param b: List of integers. :return: The smallest non-negative integer not present in the array (integer). present = set(b) i = 0 while i in present: i += 1 return i"},{"question":"Given an m x n grid filled with non-negative integers representing the height of cells, you are to determine the maximum possible amount of water that can be trapped between these cells after a heavy rain. Water can only be trapped by cells with a lower height on all sides of it (horizontally or vertically). Write a function that calculates the total amount of water trapped after raining. Function Signature: ```python def trap_rain_water(heights: List[List[int]]) -> int: ``` # Input - heights: A 2D list of non-negative integers representing the height map (1 ≤ m, n ≤ 1000; 0 ≤ heights[i][j] ≤ 10000). # Output - Return an integer representing the total volume of water that can be trapped. # Example Example 1 Input: ``` heights = [ [1, 4, 3, 1, 3, 2], [3, 2, 1, 3, 2, 4], [2, 3, 3, 2, 3, 1] ] ``` Output: ``` 4 ``` Example 2 Input: ``` heights = [ [5, 5, 5, 5], [5, 1, 1, 5], [5, 1, 1, 5], [5, 5, 5, 5] ] ``` Output: ``` 16 ``` # Explanation - In the first example, the water is trapped in the valleys formed by the surrounding heights. - In the second example, all the lowest cells (1\'s) are surrounded by taller cells (5\'s), which can trap 16 units of water. Note: The water cannot escape through the perimeter of the grid. # Constraints - Ensure that your solution has optimal time complexity given the potential size of the input grid.","solution":"from typing import List import heapq def trap_rain_water(heights: List[List[int]]) -> int: if not heights or not heights[0]: return 0 m, n = len(heights), len(heights[0]) visited = [[False] * n for _ in range(m)] min_heap = [] # Push all the boundary cells into the heap for i in range(m): for j in (0, n-1): heapq.heappush(min_heap, (heights[i][j], i, j)) visited[i][j] = True for j in range(n): for i in (0, m-1): heapq.heappush(min_heap, (heights[i][j], i, j)) visited[i][j] = True total_water = 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while min_heap: height, x, y = heapq.heappop(min_heap) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]: visited[nx][ny] = True trapped_water = max(0, height - heights[nx][ny]) total_water += trapped_water heapq.heappush(min_heap, (max(height, heights[nx][ny]), nx, ny)) return total_water"},{"question":"You are given a grid of size n by m filled with integers. Each cell in the grid has a unique integer. You need to find the minimum number of moves required to reach the cell with the largest integer starting from the cell with the smallest integer. In each move, you can go to an adjacent cell (up, down, left, or right). For instance, if the grid is: ``` 1 3 9 8 5 2 4 7 6 ``` The smallest integer is 1 at cell (0, 0) and the largest integer is 9 at cell (0, 2). The minimum number of moves required to reach 9 from 1 is 2 (right, right). Input The first line contains two integers n and m (1 ≤ n, m ≤ 200) — the dimensions of the grid. The following n lines contain m integers each — the grid itself consisting of n*m unique integers. Output Print a single integer: the minimum number of moves required to reach the cell with the largest integer starting from the cell with the smallest integer. Example Input 3 3 1 3 9 8 5 2 4 7 6 Output 2 Notes In the first example, you start at cell (0, 0) and the minimum number of moves to reach cell (0, 2) is 2.","solution":"def minimum_moves_to_reach_largest(n, m, grid): # Create a dictionary to store the position of each number in the grid. position_dict = {} for i in range(n): for j in range(m): position_dict[grid[i][j]] = (i, j) # Find the position of the smallest and largest numbers in the grid. min_pos = position_dict[min(position_dict.keys())] max_pos = position_dict[max(position_dict.keys())] # Calculate the minimum number of moves using the Manhattan distance. min_moves = abs(min_pos[0] - max_pos[0]) + abs(min_pos[1] - max_pos[1]) return min_moves"},{"question":"John is working on a new project that involves tracking an object\'s movement in a 2-dimensional grid. The grid has obstacles that the object cannot pass through. Given the starting position of the object and its target destination, John needs to determine the shortest path the object should take to reach its destination. The object can move up, down, left, or right but cannot move diagonally. The grid is represented by a matrix of size m x n, where cells with value 0 are empty (passable) cells, and cells with value 1 are obstacles. The object starts at position (sx, sy) and needs to reach position (tx, ty). Write a program to find the length of the shortest path from the starting position to the target position. If there is no valid path, the program should return -1. Input The first line contains integers m and n (1 ≤ m, n ≤ 100), representing the dimensions of the grid. The next m lines each contain n integers (either 0 or 1), representing the grid. The last line contains four integers: sx, sy, tx, ty (0 ≤ sx, sy, tx, ty < 100), representing the starting and target positions respectively. Output Output the length of the shortest path from (sx, sy) to (tx, ty). If there is no valid path, output -1. Examples Input 5 5 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 4 4 Output 8 Input 3 3 0 1 0 0 1 0 0 0 0 0 0 2 2 Output 4","solution":"from collections import deque def shortest_path_in_grid(m, n, grid, sx, sy, tx, ty): if grid[sx][sy] == 1 or grid[tx][ty] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) while queue: x, y, dist = queue.popleft() if (x, y) == (tx, ty): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"A famous philanthropist, Eliza, has decided to distribute homemade cookies to children in an orphanage. There are n children in the orphanage and Eliza has m cookies. The cookies are of different sizes, and each child has a minimum size of the cookie they will accept. Eliza wants to maximize the number of happy children by finding a way to distribute the cookies such that the size of the cookie given to each child is at least the minimum size desired by that child. You are given two arrays: one for the minimum size each child will accept and another for the sizes of the cookies Eliza has. Your task is to determine the maximum number of children that can be made happy by distributing the cookies accordingly. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of children and the number of cookies, respectively. The second line contains n integers — an array where the i-th element is the minimum size of the cookie accepted by the i-th child. The third line contains m integers — an array where the j-th element is the size of the j-th cookie available. Each size is a positive integer not greater than 1000. Output: Print an integer representing the maximum number of children that can be happy with the cookies distributed. Examples: Input: 3 4 1 2 3 2 2 3 4 Output: 3 Input: 2 3 1 2 1 1 1 Output: 1 Note: In the first example, the optimal way to distribute the cookies is to give the smallest cookie (of size 2) to the second child, another cookie of size 2 to the first child, and the cookie of size 3 to the third child. This makes all three children happy. In the second example, we can only satisfy one child\'s cookie size requirement since all the available cookies are of size 1 and only the first child will accept it. Hence, only one child can be made happy.","solution":"def max_happy_children(n, m, children_needs, cookies): Function to calculate the maximum number of children that can be made happy with the given cookies. :param n: int : number of children :param m: int : number of cookies :param children_needs: list of int : minimum size of the cookie accepted by each child :param cookies: list of int : sizes of the cookies available :return: int : the maximum number of happy children # Sort the children needs and cookies array children_needs.sort() cookies.sort() # Initialize counters for children and cookies i = 0 j = 0 happy_children = 0 # Traverse through both arrays while i < n and j < m: if cookies[j] >= children_needs[i]: # If the current cookie can satisfy the current child happy_children += 1 i += 1 # Move to the next cookie in either case j += 1 return happy_children"},{"question":"A sequence of integers is considered \\"zigzag\\" if for every two consecutive numbers in the sequence, one is greater than the other (i.e., the sequence continues to alternate between increasing and decreasing). Given an integer array, determine if any two consecutive integers follow this pattern. Example: Input: 5 4 7 3 6 2 Output: True Input: 4 1 2 3 4 Output: False","solution":"def is_zigzag(arr): Determine if the array has any two consecutive integers that follow the zigzag pattern of alternating between increasing and decreasing. :param arr: List[int] - List of integers :return: bool - True if the array contains at least one zigzag pair, False otherwise. # If the array has less than 2 elements, it cannot be a zigzag if len(arr) < 2: return False for i in range(1, len(arr)-1): if (arr[i] > arr[i-1] and arr[i] > arr[i+1]) or (arr[i] < arr[i-1] and arr[i] < arr[i+1]): return True return False"},{"question":"In a company, employees are organized in a hierarchical structure where each employee has a manager. The CEO, who is at the top of the hierarchy, has no manager. Each employee can have multiple direct subordinates but only one direct manager. The company holds a weekly meeting where every employee from a specific level in the hierarchy is invited. The CEO is at level 1, their direct subordinates are at level 2, and subordinates’ subordinates are at level 3, and so on. Given the hierarchy data, m employees, and n pairs of reports (relationships between employees and their managers), write a program to determine how many employees are present at each hierarchical level. Input The first line of the input contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. Next, t test cases are specified. The first line of each test case contains an integer m (1 ≤ m ≤ 10^5) — the number of employees in the company. The following m-1 lines each contain a pair of integers u_i, v_i (1 ≤ u_i, v_i ≤ m, u_i ≠ v_i), indicating that employee v_i reports directly to employee u_i. It is guaranteed that there are no cycles in the management hierarchy, and there is exactly one CEO in the company. Output For each test case, output the number of employees present at each hierarchical level from level 1 to the maximum level. Each level\'s count should be separated by space. Example Input 2 6 1 2 1 3 2 4 2 5 3 6 3 1 2 2 3 Output 1 2 3 1 1 1","solution":"from collections import defaultdict, deque def find_hierarchy_levels(test_cases): results = [] for case in test_cases: num_employees, relationships = case hierarchy = defaultdict(list) for parent, child in relationships: hierarchy[parent].append(child) # Find the CEO (the node that does not appear as a child) all_employees = set(range(1, num_employees + 1)) child_employees = set(child for parent, child in relationships) CEO = list(all_employees - child_employees)[0] level_count = defaultdict(int) queue = deque([(CEO, 1)]) # Start with the CEO at level 1 while queue: current, level = queue.popleft() level_count[level] += 1 for subordinate in hierarchy[current]: queue.append((subordinate, level + 1)) result = [] level = 1 while level in level_count: result.append(str(level_count[level])) level += 1 results.append(\\" \\".join(result)) return results # Function to parse input for testing def parse_input(raw_input): lines = raw_input.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): m = int(lines[index]) relationships = [] for _ in range(m - 1): u, v = map(int, lines[index + 1].split()) relationships.append((u, v)) index += 1 index += 1 test_cases.append((m, relationships)) return test_cases # Function to process the input and return the output def process_input(raw_input): test_cases = parse_input(raw_input) return find_hierarchy_levels(test_cases)"},{"question":"In a magical forest, there are n unicorns. Each unicorn has some number of magical candies. Every day, unicorns perform a ritual where they exchange candies in a specific manner to maintain balance. The rules of the ritual are as follows: 1. Each unicorn can give exactly one candy to another unicorn. 2. Each unicorn can receive at most one candy from another unicorn. 3. The goal is to find out how many different ways the candies can be redistributed among the unicorns so that the total number of candies remains unchanged. To help the unicorns, you need to write a program that calculates the number of different ways the candies can be redistributed following the above rules. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100) – the number of unicorns. The second line of the input contains n integers a1, a2, ..., an (0 ≤ ai ≤ 100) – the initial number of candies each unicorn has. Output Output a single integer – the number of different ways the candies can be redistributed. Examples Input 3 1 2 1 Output 6 Input 4 2 2 2 2 Output 24 Input 2 0 1 Output 0 Note In the first example, we have three unicorns with candies [1, 2, 1]. The valid redistributions are: 1. (1,2,1) -> (2,1,1) -> (1,1,2) 2. (1,2,1) -> (3,1,0) -> (2,1,1) 3. (1,2,1) -> (2,2,0) -> (1,3,0) 4. (1,2,1) -> (0,2,2) -> (1,1,2) 5. (1,2,1) -> (1,1,2) -> (0,2,2) 6. (1,2,1) -> (1,3,0) -> (2,2,0) In the second example, all unicorns start with 2 candies each, allowing for multiple redistributions that preserve balance, leading to 24 distinct ways. In the third example, there are no valid redistributions, as it\'s not possible to redistribute candies while following the rules.","solution":"from math import factorial def count_redistributions(n, candies): if n < 2: return 0 sum_candies = sum(candies) max_candies = max(candies) if max_candies > (sum_candies - max_candies): return 0 return factorial(n)"},{"question":"Let\'s help Sara plan her vacation. She has a list of potential destinations, each with a unique attractiveness score, and she wants to maximize the sum of attractiveness scores of the destinations she visits. However, she imposes a constraint: she can\'t visit two consecutive destinations (i.e., if she visits destination i, she cannot visit i-1 or i+1). Given the attractiveness scores of all destinations, determine the maximum sum of attractiveness scores Sara can achieve without visiting two consecutive destinations. Input:- The first line of the input will be T, the number of test cases. Next follows T blocks each beginning with an integer N, the number of destinations, followed by N space-separated integers, representing the attractiveness scores of the destinations. Output:- Print T lines, each consisting of the maximum sum of attractiveness scores Sara can achieve for each test case. Constraints: 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 1 ≤ attractiveness score ≤ 1000 SAMPLE INPUT 2 3 1 2 3 4 1 2 9 4 SAMPLE OUTPUT 4 10","solution":"def max_attractiveness(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] attractiveness_scores = test_cases[i][1] if N == 0: results.append(0) continue elif N == 1: results.append(attractiveness_scores[0]) continue # DP array to store the maximum sum until each index dp = [0] * N dp[0] = attractiveness_scores[0] dp[1] = max(attractiveness_scores[0], attractiveness_scores[1]) for j in range(2, N): dp[j] = max(dp[j-1], dp[j-2] + attractiveness_scores[j]) results.append(dp[-1]) return results # Reading input and preparing test cases def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): N = int(data[index]) attractiveness_scores = list(map(int, data[index + 1: index + 1 + N])) test_cases.append((N, attractiveness_scores)) index += N + 1 results = max_attractiveness(T, test_cases) for result in results: print(result)"},{"question":"Given a string S consisting of lowercase English letters, your task is to determine the smallest number of characters you need to remove from S to make all remaining characters of the string different. Input The input consists of a single line containing the string S (1 ≤ |S| ≤ 100), where |S| is the length of the string. Output Output a single integer representing the minimum number of characters that must be removed to make all remaining characters unique. Examples Input aaa Output 2 Input abcabc Output 3 Input abcdefg Output 0 Note In the first example, removing two \'a\' characters will leave one \'a\', making all characters unique. In the second example, removing three characters (one each of \'a\', \'b\', and \'c\') will leave one \'a\', \'b\', and \'c\', making all characters unique. In the third example, the string is already composed of unique characters, so no characters need to be removed.","solution":"def min_removals_to_make_unique(s): from collections import Counter char_count = Counter(s) removals = 0 for count in char_count.values(): if count > 1: removals += count - 1 return removals"},{"question":"A security company wants to improve their Closed-Circuit Television (CCTV) surveillance system by implementing an algorithm that detects unusual activity. Each camera captures a sequence of movements, and each movement is represented by a number. A sequence of movements is considered unusual if any number appears consecutively more than once in the recorded sequence. Your task is to write a program that detects whether a given movement sequence is unusual or not. Input format: - The first line contains an integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains an integer N, denoting the length of the movement sequence. - The second line contains N space-separated integers representing the sequence of movements captured by the CCTV camera. Output format: - For each test case, output a single line that says \\"Unusual activity detected!\\" if the sequence is unusual, or \\"All clear!\\" if the sequence is normal. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 5000 0 ≤ movement ≤ 10^9 SAMPLE INPUT 3 5 1 2 3 4 5 6 2 3 3 4 5 6 4 7 8 8 7 SAMPLE OUTPUT All clear! Unusual activity detected! Unusual activity detected!","solution":"def detect_unusual_activity(T, test_cases): results = [] for i in range(T): N, movements = test_cases[i] unusual_detected = False for j in range(1, N): if movements[j] == movements[j - 1]: unusual_detected = True break if unusual_detected: results.append(\\"Unusual activity detected!\\") else: results.append(\\"All clear!\\") return results"},{"question":"Implement a function `find_anagram_pairs` that takes a list of strings as input and returns a list of tuples where each tuple contains indices of two strings that are anagrams of each other in the original list. Two strings are anagrams if they can be formed by rearranging the letters of each other. Ignore punctuation and capitalization. Example: ```python def find_anagram_pairs(words): pass # Sample Input words = [\\"Listen\\", \\"Silent\\", \\"enlist\\", \\"inlets\\", \\"google\\", \\"gogole\\"] # Sample Output [(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3), (4, 5)] ``` **Requirements**: - You must ignore differences in capitalization (e.g., \\"Listen\\" and \\"listEN\\" should be considered anagrams). - Ignore spaces and punctuation. - Optimize your solution to handle a reasonably large list of strings efficiently.","solution":"import re from collections import defaultdict def normalize_string(s): Normalize the string by removing all non-alphabetic characters and sorting. s = re.sub(r\'[^a-zA-Z]\', \'\', s) # Remove non-alphabetic characters return \'\'.join(sorted(s.lower())) # Sort characters and make lowercase def find_anagram_pairs(words): Find pairs of indices of anagram strings in the given list of words. normalized_map = defaultdict(list) # Map normalized string to list of indices for index, word in enumerate(words): normalized_word = normalize_string(word) normalized_map[normalized_word].append(index) result = [] for indices in normalized_map.values(): if len(indices) > 1: # If there are multiple words with the same normalized form for i in range(len(indices)): for j in range(i + 1, len(indices)): result.append((indices[i], indices[j])) return result"},{"question":"Daniel participated in a marathon contest. The contest rules state that each participant will have a suffix maybe left or right after his name to indicate the direction they took during the race. If a participant took the left path, the suffix \\"_L\\" is added to his name, and if a participant took the right path, the suffix \\"_R\\" is added. Some participants might not have any suffix if they didn\'t choose a path yet. You are given a list of participants\' names and you need to find the number of participants who chose the left path or the right path, and also count the number of participants who have not chosen any path yet. Constraints * (1 leq T leq 100) where T is the total number of participants. * Each participant\'s name is a string of length at most 50. Input Input is given from Standard Input in the following format: T List of T participants\' names with possible suffixes \\"_L\\" or \\"_R\\" Output Print three space-separated integers representing the number of participants who took the left path, the number of participants who took the right path, and the number of participants who have not chosen any path yet. Examples Input 5 Daniel_L Sophia_R Emma_L Olivia Liam_R Output 2 2 1 Input 3 Ava Lucas_L Mia_R Output 1 1 1","solution":"def count_participants(paths): Counts the number of participants who took the left path, the right path, and those who haven\'t chosen any path. Parameters: paths (list): List of participants\' names with possible suffixes \\"_L\\" or \\"_R\\". Returns: tuple: A tuple containing three integers - (left_count, right_count, no_path_count) left_count = 0 right_count = 0 no_path_count = 0 for name in paths: if name.endswith(\\"_L\\"): left_count += 1 elif name.endswith(\\"_R\\"): right_count += 1 else: no_path_count += 1 return left_count, right_count, no_path_count"},{"question":"You are given a tree with n nodes. One of the nodes is marked as the root of the tree. Each node initially has a value 0. There are q queries, each query asks you to add a certain value to all the nodes in the subtree rooted at a given node. Your task is to write a program that processes all the queries and outputs the final values of all nodes in the tree. Input The first line contains two integers n and q (2 ≤ n ≤ 100,000, 1 ≤ q ≤ 100,000) — the number of nodes and the number of queries. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), meaning there is an edge connecting nodes u and v. The next q lines each contain two integers v and x (1 ≤ v ≤ n, 1 ≤ x ≤ 1000) — the node v and the value x to add to all nodes in the subtree rooted at v. Output Output n integers — the final values of all nodes in order from node 1 to node n. Example Input 5 3 1 2 1 3 3 4 3 5 1 5 3 10 2 3 Output 5 8 10 10 10 Note In the example, node 1 is the root. After the first query, every node value becomes: node 1: 5 node 2: 5 node 3: 5 node 4: 5 node 5: 5 After the second query, the subtree rooted at node 3: node 3: 5 + 10 = 15 node 4: 5 + 10 = 15 node 5: 5 + 10 = 15 Finally, after the third query: node 2: 5 + 3 = 8 Thus, the final values of nodes 1, 2, 3, 4, 5 are 5, 8, 15, 15, 15 respectively.","solution":"def final_values_in_tree(n, q, edges, queries): from collections import defaultdict import sys sys.setrecursionlimit(200000) def dfs(node, parent): subtree_nodes[node] = 1 start_time[node] = current_time[0] tour[current_time[0]] = node current_time[0] += 1 for neighbor in tree[node]: if neighbor != parent: dfs(neighbor, node) subtree_nodes[node] += subtree_nodes[neighbor] finish_time[node] = current_time[0] tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) subtree_nodes = [0] * (n + 1) start_time = [0] * (n + 1) finish_time = [0] * (n + 1) tour = [0] * (n + 1) current_time = [1] dfs(1, -1) bit = [0] * (n + 2) def update(idx, val): while idx <= n: bit[idx] += val idx += idx & -idx def query(idx): sum_val = 0 while idx > 0: sum_val += bit[idx] idx -= idx & -idx return sum_val for v, x in queries: update(start_time[v], x) update(finish_time[v], -x) result = [query(start_time[i]) for i in range(1, n + 1)] return result"},{"question":"You are given a string S of length N consisting of digits \'0\'-\'9\'. You may reverse exactly one contiguous substring of S to obtain a new string. Determine whether it is possible to make the new string a palindrome. Constraints * 1 leq N leq 1000 * S consists of digits \'0\'-\'9\'. Input Input is given from Standard Input in the following format: N S Output Print `Yes` if it is possible to make the new string a palindrome by reversing exactly one contiguous substring of S; otherwise, print `No`. Examples Input 4 1234 Output No Input 5 12321 Output Yes Input 6 123321 Output Yes Input 3 121 Output Yes","solution":"def can_be_palindrome_by_one_reverse(N, S): Determines whether it is possible to make the string S a palindrome by reversing exactly one contiguous substring of S. if S == S[::-1]: return \\"Yes\\" for i in range(N): for j in range(i+1, N+1): new_S = S[:i] + S[i:j][::-1] + S[j:] if new_S == new_S[::-1]: return \\"Yes\\" return \\"No\\""},{"question":"A popular online game requires players to collect a series of magic stones placed in a straight line. Each stone has a specific power value, and players can pick up adjacent stones based on a simple rule: they can only pick up a stone if its power value is strictly greater than the power value of the last stone they collected. The player\'s goal is to maximize the total power value of the stones collected. Given the power values of the stones arranged in a line, determine the maximum possible total power value the player can collect. Input First line of input data contains single integer n (1 ≤ n ≤ 100) — number of stones. Next line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1000) - power values of the stones in the order they are placed. Output Output single integer — the maximum possible total power value the player can collect. Examples Input 5 4 3 2 5 1 Output 9 Input 6 1 2 3 4 5 6 Output 21 Note For the first example, the player can pick stones with power values [4, 5], resulting in a total power value of 9. For the second example, the player can pick stones with power values [1, 2, 3, 4, 5, 6], resulting in a total power value of 21.","solution":"def max_power(n, power_values): Returns the maximum possible total power value the player can collect. Parameters: n (int): Number of stones. power_values (list of int): Power values of the stones. Returns: int: Maximum possible total power value. if n == 0: return 0 # Initialize an array to store the maximum power value that can be # collected up to each stone dp = [0] * n dp[0] = power_values[0] for i in range(1, n): for j in range(i): if power_values[i] > power_values[j]: dp[i] = max(dp[i], dp[j] + power_values[i]) # Always consider the case where the current stone is the first stone picked dp[i] = max(dp[i], power_values[i]) return max(dp)"},{"question":"In a galaxy far, far away, there exists a programming droid named C3PO who loves solving problems. He is currently trying to understand a sequence of numbers generated by Tato, a young aspiring programmer. Tato generates a sequence a of length n using the following rule: - If i is even, a[i] is the greatest prime factor of the sum of digits of the previous number a[i-1]. - If i is odd, a[i] is the smallest prime factor of the sum of digits of the previous number a[i-1]. Assume the sequence starts with a given number a[0] which is always greater than zero. C3PO needs your help writing an algorithm to compute the sequence up to length n. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains a single integer a[0] (1 ≤ a[0] ≤ 10^9) — the initial number of the sequence. Output Output the sequence a of length n. Example Input 5 97 Output 97 3 3 2 2 Explanation - The sum of digits of 97 is 9 + 7 = 16. The greatest prime factor of 16 is 2. The smallest prime factor of 16 is 2. - Since the index 1 is odd, a[1] = smallest prime factor of 16 = 2. - The sum of digits of 2 is 2. The greatest prime factor of 2 is 2. The smallest prime factor of 2 is 2. - Since index 2 is even, a[2] = greatest prime factor of 2 = 2. - The sum of digits of 2 is 2. Both factors are 2. - Since index 3 is odd, a[3] = smallest prime factor of 2 = 2. - The sum of digits of 2 is again, 2. - Since index 4 is even, a[4] = greatest prime factor of 2 = 2.","solution":"def sum_of_digits(num): return sum(int(digit) for digit in str(num)) def smallest_prime_factor(n): if n <= 1: return n for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return i return n def greatest_prime_factor(n): i = 2 max_prime = -1 while i * i <= n: while n % i == 0: max_prime = i n //= i i += 1 if n > 1: max_prime = n return max_prime def generate_sequence(n, a0): sequence = [a0] for i in range(1, n): prev_sum_digits = sum_of_digits(sequence[-1]) if i % 2 == 0: # even index next_value = greatest_prime_factor(prev_sum_digits) else: # odd index next_value = smallest_prime_factor(prev_sum_digits) sequence.append(next_value) return sequence"},{"question":"A kingdom\'s map is represented as a grid of size n×m, where each cell is either land or water. The kingdom\'s eligible land for farming is represented as \'F\', and the water as \'W\'. The king has a special wish to fill the entire grid with farming land such that it is achievable by transforming water cells into farming land cells. However, the transformation can only be performed if there exists at least one adjacent farming land cell in the current configuration, and transformations can be done simultaneously. Determine if the king\'s wish to transform the grid completely into farming land can be fulfilled. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. The following n lines each contain m characters representing the grid, where \'F\' indicates farming land and \'W\' indicates water. Output Print \\"POSSIBLE\\" if the king\'s wish to transform the grid completely into farming land can be fulfilled. Print \\"IMPOSSIBLE\\" otherwise. Examples Input 3 3 FWF WWW FFF Output POSSIBLE Input 3 3 FWW WWW FFF Output IMPOSSIBLE Input 4 4 FFFF FWFW FWFW FFFF Output POSSIBLE Note In the first example, we can transform the grid as follows: - Turn water cells at (1,2), (2,1), and (2,3) into farming land on the first transformation. - Finally turn all remaining water cells into farming land. In the second example, it\'s impossible to fulfill the king\'s wish as there\'s no adjacent farming land cell for initial water cells at (1,2) and (2,3). In the third example, all cells of water have adjacent farming land, hence they can be transformed gradually.","solution":"def is_transformation_possible(n, m, grid): def is_adjacent_to_farming_land(i, j): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == \'F\': return True return False for i in range(n): for j in range(m): if grid[i][j] == \'W\' and not is_adjacent_to_farming_land(i, j): return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\""},{"question":"You are given an array A consisting of N integers. You need to find the maximum difference between the sum of elements of any two subsequences of the array. The subsequences should not have any common elements. Input The first line contains a single integer N (1 ≤ N ≤ 100), representing the number of elements in the array. The second line contains N integers A_i (1 ≤ A_i ≤ 1000), representing the elements of the array. Output Output a single integer, which is the maximum difference between the sum of elements of any two non-overlapping subsequences. Examples Input 4 2 3 5 1 Output 8 Input 5 4 7 1 8 6 Output 18 Note In the first sample, the two subsequences can be {5} and {2, 3}, with sums 5 and 5 respectively, so the maximum difference is 5 - 0 = 5. In the second sample, the two optimal subsequences are {8, 6, 4} and {7, 1}, with sums 18 and 8 respectively, giving a maximum difference of 18 - 0 = 18.","solution":"def max_difference_subsequences(N, A): Returns the maximum difference between the sum of elements of any two non-overlapping subsequences of the array A. A.sort(reverse=True) max_sum = sum(A) return max_sum"},{"question":"Riya loves playing with strings, especially manipulating and modifying them. One day, her friend Sonia gave her a challenging problem. Help Riya solve the problem using your coding skills. Given a string S consisting of lowercase English letters, find the length of the longest substring that contains at most exactly K distinct characters. Input The first line of input contains an integer T, the number of test cases. Each of the next T lines contain an integer K followed by a string S. Output Output T lines containing the length of the longest substring with exactly K distinct characters for each test case. Constraints 1 ≤ T ≤ 1000 1 ≤ K ≤ 26 1 ≤ |S| ≤ 100000 Example Input: 2 2 abcba 3 abaccc Output: 3 6","solution":"def longest_substring_with_k_distinct(T, test_cases): def find_longest_substring_with_k_distinct_characters(k, s): n = len(s) if k == 0 or n == 0: return 0 start = 0 max_length = 0 char_frequency = {} for end in range(n): if s[end] in char_frequency: char_frequency[s[end]] += 1 else: char_frequency[s[end]] = 1 while len(char_frequency) > k: char_frequency[s[start]] -= 1 if char_frequency[s[start]] == 0: del char_frequency[s[start]] start += 1 if len(char_frequency) == k: max_length = max(max_length, end - start + 1) return max_length results = [] for case in test_cases: k, s = case results.append(find_longest_substring_with_k_distinct_characters(k, s)) return results"},{"question":"The Game Master has devised a game involving sequences of numbers. He calls a sequence interesting if it has exactly k distinct elements. Given an array a of n integers, your task is to determine the length of the shortest subarray that is interesting. Input: The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the length of array a and the number of distinct elements required. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the elements of the array. Output: Print a single integer — the length of the shortest interesting subarray. If there is no such subarray, print -1. Examples: Input: 7 2 1 2 1 3 4 2 3 Output: 2 Input: 5 3 1 2 3 2 2 Output: 3 Note: In the first example, the shortest interesting subarray is either [1, 2] starting from index 1 to 2 or [2, 1] starting from index 6 to 7. In the second example, the shortest interesting subarray is [1, 2, 3] starting from index 1 to 3.","solution":"def shortest_interesting_subarray(n, k, a): from collections import defaultdict freq = defaultdict(int) distinct_count = 0 min_length = float(\'inf\') left = 0 for right in range(n): if freq[a[right]] == 0: distinct_count += 1 freq[a[right]] += 1 while distinct_count >= k: min_length = min(min_length, right - left + 1) freq[a[left]] -= 1 if freq[a[left]] == 0: distinct_count -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"In a software system for a global online retailer, there is frequent need to analyze customer purchase patterns. One such analysis involves determining frequently bought items together, which helps drive recommendation systems. The system logs every purchase by customer ID and the list of item IDs purchased in that transaction. You are given a list of purchase records, each of which consists of a customer ID and a list of item IDs purchased in one transaction. Your task is to determine all unique pairs of item IDs that appear in the same purchase record across all transactions. Input The first line of input contains an integer n (1 ≤ n ≤ 100,000), the number of purchase records. The next n lines each start with an integer c (1 ≤ c ≤ 100) representing the number of items in the purchase followed by c space-separated integers representing the item IDs (1 ≤ item ID ≤ 1000) in that purchase. Each purchase record contains unique item IDs. Output Output all unique pairs of item IDs that appear together in any purchase record, one pair per line. Each pair should have the smaller item ID first. Print pairs in lexicographical order. Examples Input 3 3 1 2 3 2 2 3 4 1 4 5 6 Output 1 2 1 3 1 4 1 5 1 6 2 3 4 5 4 6 5 6 Input 2 3 5 7 8 3 6 7 5 Output 5 6 5 7 5 8 6 7 7 8","solution":"def find_frequent_item_pairs(purchases): from itertools import combinations item_pairs = set() for purchase in purchases: items = purchase.split() num_items = int(items[0]) item_list = sorted(int(item) for item in items[1:num_items+1]) for pair in combinations(item_list, 2): item_pairs.add(pair) sorted_pairs = sorted(item_pairs) return sorted_pairs def process_input(input_data): purchases = input_data.strip().split(\'n\')[1:] return find_frequent_item_pairs(purchases)"},{"question":"You are given an array b of length n, where each element b_i is initially set to i. In one step, you can select any two distinct indices p and q (p ≠ q) and replace b_p with the value of b_q. Your objective is to transform the array such that it consists of exactly n unique values in exactly n-1 steps. Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The first and only line of each test case contains the single integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the length of the array b. It is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5. Output For each test case, print the sequence of operations required to achieve the goal in the following format: firstly, print one integer m (m = n - 1) — the number of operations; next, print m pairs of integers p and q (1 ≤ p, q ≤ n; p ≠ q) — the indices involved in each operation. It can be proven that for the given constraints, it is always possible to find a correct sequence of operations. Example Input 2 3 4 Output 2 1 2 1 3 3 1 2 1 3 1 4 Note In the first example, starting with array b = [1, 2, 3]: 1. choose 1, 2: b_1 = b_2 => b = [2, 2, 3]; 2. choose 1, 3: b_1 = b_3 => b = [3, 2, 3]. The array has been transformed to [3, 2, 3] using 2 steps, achieving the goal of exactly 3 unique values. In the second example, starting with array b = [1, 2, 3, 4]: 1. choose 1, 2: b_1 = b_2 => b = [2, 2, 3, 4]; 2. choose 1, 3: b_1 = b_3 => b = [3, 2, 3, 4]; 3. choose 1, 4: b_1 = b_4 => b = [4, 2, 3, 4]. The array has been transformed to [4, 2, 3, 4] using 3 steps, achieving the goal of exactly 4 unique values.","solution":"def find_operations(t, test_cases): results = [] for n in test_cases: operations = [(1, i) for i in range(2, n+1)] results.append((n-1, operations)) return results"},{"question":"The Great War of Codevania has come to an end, and the citizens are now focused on rebuilding their network of cities. The Codevanian government wants to establish a robust communication network that spans across all cities. The network will consist of communication towers placed in each city with direct communication links between some pairs of cities. The cost of setting up each link varies based on the geographical distance between cities. Your task is to design an algorithm that will help the government determine the minimum cost required to establish a network that connects all cities. The network must be a spanning tree, meaning it must connect all cities with the minimum number of links, ensuring there are no cycles. Input The first line contains an integer N (2 ≤ N ≤ 500) — the number of cities. Each of the next N lines contains N integers. The j-th integer in the i-th line represents the cost C_{i,j} (1 ≤ C_{i,j} ≤ 10^6) to establish a communication link between city i and city j. If i equals j, then C_{i,j} is 0, meaning there is no cost to link a city to itself. Output Output a single integer representing the minimum cost to connect all the cities. Example Input 4 0 1 4 7 1 0 2 6 4 2 0 3 7 6 3 0 Output 6 Explanation City 1 connects to City 2 with a cost of 1. City 2 connects to City 3 with a cost of 2. City 3 connects to City 4 with a cost of 3. The minimum cost to connect all cities is 1 + 2 + 3 = 6.","solution":"def minimum_spanning_tree_cost(N, cost_matrix): Determines the minimum cost required to connect all cities in a network. Args: N (int): Number of cities. cost_matrix (list of list of int): N x N matrix representing the cost to establish links between cities. Returns: int: The minimum cost to connect all cities. import heapq # Initializing a min-heap. min_heap = [(0, 0)] visited = set() total_cost = 0 while len(visited) < N: cost, city = heapq.heappop(min_heap) if city in visited: continue visited.add(city) total_cost += cost for next_city in range(N): if next_city not in visited: heapq.heappush(min_heap, (cost_matrix[city][next_city], next_city)) return total_cost"},{"question":"You are given n items, and each item has a certain value associated with it. You want to divide these items into two groups such that the difference between the sums of the values of the items in the two groups is minimized. Each item must be assigned to one of the two groups. Write a program that finds the minimum possible difference between the sums of the values of the two groups. Input: The first line contains a single integer n (1 ≤ n ≤ 100) — the number of items. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 1000), where vi is the value associated with the i-th item. Output: Print a single integer — the minimum possible difference between the sums of the values of the two groups. Examples: Input 4 1 2 3 4 Output 0 Input 3 1 5 7 Output 1 Note: In the first sample, it is possible to split the items into two groups [1, 4] and [2, 3], both of which sum to 5. Hence, the difference is 0. In the second sample, the optimal way to split the items is to put item with values 1 and 7 into one group and the item with value 5 into the other group, the difference between the sums is 1.","solution":"def min_subset_sum_difference(n, values): Calculate the minimum possible difference between the sums of two groups of items with given values. :param n: Number of items :param values: List of values of the items :return: Minimum possible difference total_sum = sum(values) target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for value in values: for i in range(target, value - 1, -1): if dp[i - value]: dp[i] = True for i in range(target, -1, -1): if dp[i]: group1_sum = i break group2_sum = total_sum - group1_sum return abs(group1_sum - group2_sum)"},{"question":"In a game called \\"Perfect Patterns,\\" a grid of size n x n is filled with numbers from 1 to n^2 in such a way that certain rules are fulfilled. For this particular problem, a perfect pattern is defined as a filled n x n grid where: 1. Each number from 1 to n^2 appears exactly once. 2. The sum of the numbers in each row is equal. 3. The sum of the numbers in each column is equal. 4. The sum of the numbers in both main diagonals is equal. You are given an n x n grid with some cells already filled with numbers from 1 to n^2. The rest of the cells are filled with 0, representing empty cells. Your task is to determine if it is possible to complete the grid to form a perfect pattern, and if so, output one such solution. If there are multiple solutions, it suffices to output any one of them. Input The input consists of the following lines: - The first line contains an integer n (2 ≤ n ≤ 6). - The next n lines each contain n integers, representing the initial state of the grid. Each number between 1 and n^2 appears at most once, and 0 represents an empty cell. Output If it is possible to complete the grid to form a perfect pattern, output the completed grid. Otherwise, output \\"NO SOLUTION\\". Example Input 3 4 9 2 3 5 0 0 1 6 Output 4 9 2 3 5 7 8 1 6","solution":"def perfect_pattern(grid, n): def is_valid(grid): target_sum = sum(grid[0]) diag1, diag2 = 0, 0 for i in range(n): if sum(grid[i]) != target_sum: return False if sum(grid[j][i] for j in range(n)) != target_sum: return False diag1 += grid[i][i] diag2 += grid[i][n-1-i] return diag1 == target_sum and diag2 == target_sum def solve(grid, empty_cells, idx): if idx == len(empty_cells): if is_valid(grid): return True return False x, y = empty_cells[idx] for num in range(1, n*n + 1): used = any(num in row for row in grid) if not used: grid[x][y] = num if solve(grid, empty_cells, idx + 1): return True grid[x][y] = 0 return False empty_cells = [(i, j) for i in range(n) for j in range(n) if grid[i][j] == 0] if solve(grid, empty_cells, 0): return grid return \\"NO SOLUTION\\" def main(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) grid = [list(map(int, line.split())) for line in lines[1:]] result = perfect_pattern(grid, n) if result == \\"NO SOLUTION\\": print(result) else: for row in result: print(\\" \\".join(map(str, row))) # Sample usage input_str = 3 4 9 2 3 5 0 0 1 6 main(input_str)"},{"question":"You are given an array of integers representing the altitudes of different locations on a hiking trail. Tony, an avid hiker, loves to find the peak points in the trail. A peak is defined as a location whose altitude is strictly greater than the altitudes of its adjacent locations. The first and last locations in the array cannot be peaks since they don\'t have two neighbors. Help Tony find the number of peak points in the trail. Implement a function to count the number of peak points in the given array of altitudes. Input Format: - The first line contains a single integer N, the number of locations on the trail. - The second line contains N space-separated integers representing the altitudes of the locations. Output Format: - Print a single integer denoting the number of peak points. Constraints: - 3 ≤ N ≤ 10^4 - 0 ≤ altitude[i] ≤ 10^6 for all 0 ≤ i < N SAMPLE INPUT 8 1 2 3 1 5 6 4 2 SAMPLE OUTPUT 2 Explanation The peaks in the given altitudes are at indices 2 and 5 (altitudes 3 and 6 respectively), as they are greater than their immediate neighbors. Hence, the number of peaks is 2.","solution":"def count_peak_points(n, altitudes): Counts the number of peak points in the given array of altitudes. Parameters: n (int): The number of locations on the trail. altitudes (list of int): List of altitudes of the locations. Returns: int: The number of peak points. if n < 3: return 0 peak_count = 0 for i in range(1, n - 1): if altitudes[i] > altitudes[i - 1] and altitudes[i] > altitudes[i + 1]: peak_count += 1 return peak_count def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) altitudes = list(map(int, data[1:])) result = count_peak_points(n, altitudes) print(result)"},{"question":"Jack loves playing with rectangles. He has a rectangle of dimensions n × m. Jack wants to place several identical squares inside the rectangle such that the squares do not overlap and the total area of the squares is maximized. The side length of the squares should be an integer. Jack needs to determine the maximum possible total area of the squares that can fit inside the rectangle. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100), representing the dimensions of the rectangle. Output Print a single integer representing the maximum total area of the squares that can be placed inside the rectangle. Examples Input 6 5 Output 25 Input 10 4 Output 16 Note In the first example, Jack can place 5 squares of size 1x1 or place 2 squares of size 2x2 (since 2*2<6 and 2*2<5) or place 1 square of size 5x5. So the largest area of squares is 25. In the second example, Jack can place 4 squares of size 2x2 (4*4=16). So the largest area of squares is 16.","solution":"def max_square_area(n, m): Computes the maximum possible total area of identical squares that can fit inside a rectangle of dimensions n x m. Args: n (int): The length of the rectangle. m (int): The width of the rectangle. Returns: int: The maximum area of the squares that can fit inside the rectangle. # Find the side of the largest square that can fit completely into the rectangle side_length_of_square = min(n, m) # The largest possible square area that fits max_area = side_length_of_square ** 2 return max_area"},{"question":"You are given a string S consisting of lowercase alphabets. You need to find the number of distinct non-empty substrings in this string that are also palindromes. For example, in the string \\"ababa\\": - The palindromic substrings are \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", and \\"ababa\\". - The number of distinct non-empty palindromic substrings in this string is 5. Write a function to solve the problem. Function Signature: ```python def count_distinct_palindromic_substrings(S: str) -> int: pass ``` Input: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string S. Output: - For each test case, print the number of distinct non-empty palindromic substrings. Constraints: - 1 ≤ T ≤ 50 - 1 ≤ len(S) ≤ 500 SAMPLE INPUT: 3 ababa abcd aaaa SAMPLE OUTPUT: 5 4 1 Explanation: - In the first test case, the distinct palindromic substrings are \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", and \\"ababa\\". - In the second test case, the distinct palindromic substrings are \\"a\\", \\"b\\", \\"c\\", and \\"d\\". - In the third test case, the distinct palindromic substring is \\"a\\".","solution":"def count_distinct_palindromic_substrings(S: str) -> int: Returns the number of distinct non-empty palindromic substrings in the given string S. def is_palindrome(sub): return sub == sub[::-1] palindromic_substrings = set() n = len(S) for i in range(n): # Odd-length palindromes l, r = i, i while l >= 0 and r < n and S[l] == S[r]: palindromic_substrings.add(S[l:r+1]) l -= 1 r += 1 # Even-length palindromes l, r = i, i + 1 while l >= 0 and r < n and S[l] == S[r]: palindromic_substrings.add(S[l:r+1]) l -= 1 r += 1 return len(palindromic_substrings) def distinct_palindromic_substrings_for_multiple_cases(cases): return [count_distinct_palindromic_substrings(case) for case in cases]"},{"question":"You are playing a game where you have to distribute candies to children standing in a line. Each child has a certain demand for candies, specified by an integer in the range [0, 100]. You have a total of k candies and your goal is to distribute them in such a way that maximally satisfies the children’s demands. For each child, if you give them candies equal to or more than their demand, they will be fully satisfied and consume the candies. If any child receives fewer candies than their demand, they will not take any candies at all. You can choose not to give any candies to a child if you cannot fully meet their demand. Determine the maximum number of fully satisfied children after distributing the given candies. Input The first line of input contains two integers n and k (1 ≤ n ≤ 105, 0 ≤ k ≤ 107) — the number of children and the number of candies available. The second line of input contains a sequence of n integers di (0 ≤ di ≤ 100), where di characterizes the number of candies demanded by the i-th child. Output The first line of output should contain a single non-negative integer — the maximum number of fully satisfied children. Examples Input 4 7 2 3 5 1 Output 3 Input 5 10 3 3 3 3 3 Output 3 Input 3 1 1 2 3 Output 1 Note In the first test case, the optimal strategy is to distribute candies as follows: - Give 1 candy to the child with demand 1 (fully satisfied) - Give 2 candies to one child with demand 2 (fully satisfied) - Give 3 candies to one child with demand 3 (fully satisfied) Three children are fully satisfied and 1 candy remains unused. In the second test case, distribute candies to any three children with a demand of 3 candies. Thus, 3 children are fully satisfied. In the third test case, you can fully satisfy only one child with a demand of 1 candy. Thus, only one child is fully satisfied.","solution":"def max_fully_satisfied_children(n, k, demands): Determines the maximum number of fully satisfied children after distributing the given candies. # Sort the demands in ascending order demands.sort() satisfied_children = 0 for demand in demands: if k >= demand: # Satisfy this child\'s demand k -= demand satisfied_children += 1 else: # Cannot satisfy further demands break return satisfied_children"},{"question":"Eren is managing the warehouse inventory for his small business. Each item in the warehouse is recorded with a unique identification number and a quantity count. Eren wants to know which items need restocking based on a minimum stock threshold he has set. Given a list of items with their identification numbers and quantities, write a program to determine which items need restocking. An item needs restocking if its quantity is strictly less than the threshold. # Input The input is given from Standard Input in the following format: ``` N T id_1 quantity_1 id_2 quantity_2 : id_N quantity_N ``` Where: - `N` (1 ≤ N ≤ 100,000): The number of different items. - `T` (1 ≤ T ≤ 1,000): The minimum stock threshold. - `id_i` (a string) and `quantity_i` (an integer, 0 ≤ quantity_i ≤ 1000): The identification number and quantity of the i-th item. # Output Output the identification number of each item that needs restocking. The IDs should be printed in the same order as they appear in the input. # Examples Input ``` 5 10 item1 5 item2 15 item3 8 item4 10 item5 0 ``` Output ``` item1 item3 item5 ``` Input ``` 3 5 itemA 3 itemB 6 itemC 2 ``` Output ``` itemA itemC ```","solution":"def items_to_restock(N, T, items): Determine which items need restocking based on a minimum stock threshold. Parameters: - N: int, the number of different items - T: int, the minimum stock threshold - items: List[Tuple[str, int]], a list of tuples where each tuple contains the item ID and quantity Returns: - List[str], a list of item IDs that need restocking restock_list = [] for item_id, quantity in items: if quantity < T: restock_list.append(item_id) return restock_list"},{"question":"John has a sequence of integers and wants to transform it into a non-decreasing sequence by converting some of the elements to zeroes. He can convert any element of the array to zero, but it takes a certain number of operations. Specifically, it takes `a` operations to convert any even number to zero and `b` operations to convert any odd number to zero. Given the array of integers and the cost parameters `a` and `b`, your task is to determine the minimum number of operations needed to make the sequence non-decreasing. Input The first line contains an integer `n` (1 ≤ n ≤ 50), the number of elements in the sequence. The next line contains `n` integers `x1, x2, ..., xn` (-1000 ≤ xi ≤ 1000), the elements of the sequence. The third line contains two integers `a` and `b` (1 ≤ a, b ≤ 100), representing the cost to convert an even number and an odd number to zero respectively. Output Output a single integer, the minimum number of operations needed to make the sequence non-decreasing. Examples Input 5 4 2 5 3 6 2 3 Output 5 Input 4 -1 -3 2 6 1 2 Output 2 Note In the first example, you can convert `5` to `0` with `3` operations and `3` to `0` with `2` operations for a total of `5` operations. The resulting sequence `[4, 2, 0, 0, 6]` is non-decreasing. In the second example, you can convert `-1` to `0` with `1` operation and `-3` to `0` with `1` operation for a total of `2` operations. The resulting sequence `[0, 0, 2, 6]` is non-decreasing.","solution":"def min_operations_to_non_decreasing_sequence(n, sequence, a, b): This function returns the minimum number of operations needed to make the sequence non-decreasing by making any elements zero either by `a` or `b` operations for even and odd numbers respectively. # Create an array to store the minimum operations needed for each prefix of the array dp = [0] * n # Initialize the total cost to to make the first element zero (if required) dp[0] = 0 for i in range(1, n): dp[i] = dp[i-1] if sequence[i] < sequence[i-1]: if sequence[i] % 2 == 0: dp[i] += a else: dp[i] += b sequence[i] = 0 # make it zero return dp[-1]"},{"question":"There is a magical garden that grows N different types of flowers arranged in a single line. Each type of flower is represented by a unique integer from 1 to N. One day, a mischievous gnome cast a spell and swapped two flowers in the garden. You need to identify which two flowers were swapped to determine the extent of the gnome\'s prank. You are given an original sequence of flowers and the corrupted sequence after the swap. Your task is to find the two integers representing the types of flowers that were swapped. INPUT: The first line of input is T, the number of test cases. Each test case consists of two lines. - The first line contains the original sequence of flowers as space-separated integers. - The second line contains the corrupted sequence of flowers as space-separated integers. OUTPUT: For each test case, print the two integers representing the types of flowers that were swapped. CONSTRAINTS: 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 1 ≤ Flower type ≤ N SAMPLE INPUT: 2 1 2 3 4 5 1 3 2 4 5 6 7 8 9 10 6 7 8 10 9 SAMPLE OUTPUT: 2 3 9 10 Explanation: In the first case, the original sequence is [1, 2, 3, 4, 5], and the corrupted sequence is [1, 3, 2, 4, 5]. The flowers of type 2 and 3 were swapped. In the second case, the original sequence is [6, 7, 8, 9, 10], and the corrupted sequence is [6, 7, 8, 10, 9]. The flowers of type 9 and 10 were swapped.","solution":"def find_swapped_flowers(original, corrupted): Identifies the two swapped flowers by comparing the original and corrupted sequences. Args: - original (list of int): The original sequence of flowers. - corrupted (list of int): The corrupted sequence of flowers. Returns: - Tuple of two integers representing the types of flowers that were swapped. swapped = [] for o, c in zip(original, corrupted): if o != c: swapped.append(o) swapped.append(c) if len(swapped) == 4: break return tuple(set(swapped)) def process_test_cases(test_cases): Processes multiple test cases to determine the swapped flowers for each case. Args: - test_cases (list of tuples): Each tuple contains the original and corrupted sequences. Returns: - List of tuples: Each tuple contains two integers representing the types of flowers that were swapped. results = [] for original, corrupted in test_cases: results.append(find_swapped_flowers(original, corrupted)) return results"},{"question":"In a magical forest, there are N distinct trees, each with certain magical energy levels. The magical energy of the i-th tree is represented by an integer A[i]. You have a special power to choose exactly two trees each day and swap their energy levels. You can repeat this operation as many times as you want. Your goal is to arrange the energy levels in such a way that the difference between the maximum energy and the minimum energy in the array is minimized. Write a function that takes an integer N and an array A of length N as input and returns the minimized difference between the maximum and minimum energy levels after performing any number of swaps. Input Format: - The first line contains an integer N, the number of trees in the forest. - The second line contains N space-separated integers, where the i-th integer is the initial magical energy level of the i-th tree. Output Format: - Print a single integer - the minimized difference between the maximum and minimum energy levels in the array after performing any number of swaps. Constraints: 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^9 SAMPLE INPUT 5 3 1 4 1 5 SAMPLE OUTPUT 4 Explanation: After performing any number of swaps, the best we can do is to arrange the energy levels in non-decreasing order: [1, 1, 3, 4, 5]. The difference between the maximum (5) and the minimum (1) energy after sorting is 4. Thus, the minimized difference is 4.","solution":"def minimize_difference(N, A): Return the minimized difference between the maximum and minimum energy levels after any number of swaps. Parameters: N (int): The number of trees. A (list of int): The initial magical energy levels of the trees. Returns: int: The minimized difference between the maximum and minimum energy levels. # After any number of swaps, the maximum and minimum energy levels can only change positions, # i.e., sorting the array will give us the minimum and the maximum in the respective positions. min_energy = min(A) max_energy = max(A) return max_energy - min_energy"},{"question":"Sophie is trying to optimize her code for a mobile application. She has a list of integers and wants to reduce its size by removing duplicate elements while preserving the order of their first occurrence. Your task is to help Sophie by writing a function that processes her list and returns the list with all duplicates removed, maintaining the order of first appearance. Input The input consists of a single line containing integers separated by spaces. The number of integers is between 1 and 1000, inclusive. Each integer is between -1000 and 1000, inclusive. Output Output the processed list of integers with duplicates removed, preserving the order of their first appearance. The integers should be separated by spaces. Examples Input 1 2 2 3 4 1 5 3 6 Output 1 2 3 4 5 6 Input 7 7 7 7 7 Output 7 Input 10 -1 -1 10 -5 0 -5 10 Output 10 -1 -5 0","solution":"def remove_duplicates(lst): Removes duplicates from the list while preserving the order of first occurrence. lst: List of integers returns: List of integers with duplicates removed seen = set() result = [] for num in lst: if num not in seen: seen.add(num) result.append(num) return result def process_input(input_string): Process the input string to split it into integers, remove duplicates and return the result as a space-separated string. input_string: String with integers separated by spaces returns: String with duplicates removed, preserving the order of first appearance lst = list(map(int, input_string.strip().split())) unique_list = remove_duplicates(lst) return \\" \\".join(map(str, unique_list))"},{"question":"You are given a list of integers. Your task is to find the smallest positive integer that is missing from the list. The list can contain both positive and negative integers as well as duplicates. You need to write a function that finds this missing integer in O(n) time and O(1) space. Input format: The input will contain a list of integers. Output format: You have to output a single integer which is the smallest positive integer missing from the list. Constraints: The maximum length of the list can be 1000. The elements of the list can range from -10^6 to 10^6. SAMPLE INPUT [3, 4, -1, 1] SAMPLE OUTPUT 2","solution":"def first_missing_positive(nums): Find the smallest missing positive integer from the list. Args: nums: List[int] - A list of integers. Returns: int - The smallest positive integer missing from the list. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Given an integer N, we want you to compute all the unique combinations of positive integers that sum up to N. Each combination should be a list of integers in non-decreasing order. Input: First line contains T, the number of test-cases. This is followed by T lines, where each line consists of the integer N. Output: For each test case, output the unique combinations of numbers that sum up to N. Each combination should be printed in a new line. The combinations should be sorted such that each combination is in non-decreasing order and the overall combination list is sorted in lexicographic order. Constraints T < 100 N < 20 Explanation: N = 4 All unique combinations that sum up to 4 are: 1 1 1 1 1 1 2 1 3 2 2 4 SAMPLE INPUT 2 4 3 SAMPLE OUTPUT 1 1 1 1 1 1 2 1 3 2 2 4 1 1 1 1 2 3","solution":"def find_combinations(target, start, current_combo, result): Recursive helper function to find all unique combinations of positive integers that sum up to target. if target == 0: result.append(list(current_combo)) return for i in range(start, target + 1): current_combo.append(i) find_combinations(target - i, i, current_combo, result) current_combo.pop() def find_combinations_to_sum(n): Function to find all unique combinations of positive integers that sum up to n. result = [] find_combinations(n, 1, [], result) return result def process_test_cases(test_cases): Process multiple test cases and return results for each. all_results = [] for n in test_cases: result = find_combinations_to_sum(n) all_results.append(result) return all_results"},{"question":"Time Limit: 10 sec / Memory Limit: 128 MB Write a function that takes an array of integers and returns true if the array is a palindrome, and false otherwise. An array is a palindrome if it reads the same backward as forward. Example Input [1, 2, 3, 2, 1] Output true Input [1, 2, 3, 4, 5] Output false","solution":"def is_palindrome(arr): Returns true if the given array is a palindrome, and false otherwise. Args: arr: list of integers Returns: bool: True if arr is a palindrome, False otherwise return arr == arr[::-1]"},{"question":"A new company named Techy wants to simplify the management of its employee records. They have developed a system where each employee is represented with a unique Employee ID (an integer number eid) and a rating (an integer number r). Techy\'s system can handle the following types of events for employee record management: * 1 eid r — Add an employee with Employee ID eid and rating r to the database; * 2 eid — Remove the employee with the given Employee ID eid from the database; * 3 rmin rmax — Query how many employees have a rating in the range [rmin, rmax] inclusive. For each query of the third type, you should output the number of employees whose rating falls within the specified range. It is guaranteed that there will be at least one event of this type. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of events. Each of the next n lines describes an event: * 1 eid r (1 ≤ eid, r ≤ 108) — Add an employee with Employee ID eid and rating r to the database; * 2 eid (1 ≤ eid ≤ 108) — Remove the employee with the given Employee ID eid from the database (it is guaranteed that there is at least one such employee in the database at this moment); * 3 rmin rmax (1 ≤ rmin, rmax ≤ 108, and rmin ≤ rmax) — Query the number of employees with a rating in the range [rmin, rmax]. Output For each event of the third type, print one integer — the number of employees whose rating is in the specified range. Example Input 7 1 101 5 1 102 3 1 103 8 3 4 6 2 101 1 104 4 3 2 5 Output 1 2 Note In the example, the system initially adds employees with Employee IDs 101, 102, and 103 with corresponding ratings 5, 3, and 8. The first query asks how many employees have ratings between 4 and 6, which is 1 (Employee ID 101). Then, Employee ID 101 is removed. After adding another employee with Employee ID 104 and rating 4, the second query asks how many employees have ratings between 2 and 5, which is 2 (Employee IDs 102 and 104).","solution":"class EmployeeDatabase: def __init__(self): self.employees = {} def add_employee(self, eid, rating): self.employees[eid] = rating def remove_employee(self, eid): if eid in self.employees: del self.employees[eid] def query_employees(self, rmin, rmax): return sum(1 for rating in self.employees.values() if rmin <= rating <= rmax) def handle_events(n, events): db = EmployeeDatabase() results = [] for event in events: if event[0] == 1: # Add employee _, eid, rating = event db.add_employee(eid, rating) elif event[0] == 2: # Remove employee _, eid = event db.remove_employee(eid) elif event[0] == 3: # Query employees _, rmin, rmax = event results.append(db.query_employees(rmin, rmax)) return results"},{"question":"Lena has a rectangular grid of n rows and m columns. Initially, each cell of the grid contains a zero. Lena can perform the following operation multiple times: choose a subrectangle and increment all numbers in this subrectangle by one. Determine if there exists a sequence of operations Lena can perform to achieve a grid where every cell contains exactly k. Input First line contains three integers n, m, and k (1 ≤ n, m ≤ 10, 1 ≤ k ≤ 10^9) — the number of rows, the number of columns, and the target number. Output If Lena can achieve the desired configuration, print «YES» (without quotes); otherwise print «NO» (without quotes). Examples Input 2 3 2 Output NO Input 4 4 16 Output YES Note In the first example, it is impossible to increment all cells to 2 using only subrectangle increments, because the maximum possible subrectangle increment would be the entire grid of size 2x3, which would require at least 6 operations. In the second example, Lena can increment the entire 4x4 grid 16 times to make each cell exactly 16. Thus, it is possible to achieve the desired grid.","solution":"def can_achieve_configuration(n, m, k): Determine if Lena can achieve a grid where every cell contains exactly k using subrectangle increments. Parameters: n (int): the number of rows in the grid. m (int): the number of columns in the grid. k (int): the target number to achieve in each cell. Returns: str: \\"YES\\" if it is possible to achieve the configuration, otherwise \\"NO\\". if k % (n * m) == 0: return \\"YES\\" return \\"NO\\""},{"question":"A superhero group needs to plan their battle strategy against an enemy army. There are n superheroes and m combat zones. Each superhero can be assigned to exactly one combat zone or can stay unassigned. Each combat zone requires at least k superheroes to be effective. The goal is to determine if it is possible to assign the superheroes in such a way that all m combat zones are effective. Input: - The first line contains three integers n, m, and k (1 ≤ n, m, k ≤ 1000) — the number of superheroes, the number of combat zones, and the minimum superheroes required for each zone respectively. Output: - Print \\"POSSIBLE\\" without quotes if it is possible to assign the superheroes to make all combat zones effective. Otherwise, print \\"IMPOSSIBLE\\". Examples: Input: 6 2 3 Output: POSSIBLE Input: 5 3 2 Output: IMPOSSIBLE Input: 10 5 2 Output: POSSIBLE Note: In the first example, there are 6 superheroes and 2 combat zones. Each zone requires 3 superheroes. It is possible to assign 3 superheroes to each zone, so the output is \\"POSSIBLE\\". In the second example, with 5 superheroes and 3 zones, each requiring 2 superheroes, it\'s not possible to assign at least 2 superheroes to each of the 3 zones, so the output is \\"IMPOSSIBLE\\". In the third example, there are 10 superheroes and 5 combat zones, each requiring 2 superheroes. Each combat zone can be assigned 2 superheroes, so the output is \\"POSSIBLE\\".","solution":"def can_assign_superheroes(n, m, k): Determines if it is possible to assign superheroes to combat zones such that each zone has at least k superheroes. :param n: Number of superheroes :param m: Number of combat zones :param k: Minimum superheroes required per zone :return: \'POSSIBLE\' or \'IMPOSSIBLE\' # Check if the total superheroes can cover the required number of superheroes for all zones if n >= m * k: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\""},{"question":"In chess, we can determine the movement of a knight from its current position. The knight\'s movement can be represented as a combination of two steps in one direction and one step in a perpendicular direction. For example, from a position (x, y), a knight can move to any of the following positions: - (x+2, y+1) - (x+2, y-1) - (x-2, y+1) - (x-2, y-1) - (x+1, y+2) - (x+1, y-2) - (x-1, y+2) - (x-1, y-2) Given an 8x8 chessboard and a starting position of the knight, your task is to determine if it is possible for the knight to reach a target position in exactly `n` steps. You need to write a function that checks if it\'s possible. # Input - The first line contains an integer `t` (1 ≤ t ≤ 1000) representing the number of test cases. - Each test case consists of three lines: - The first line contains an integer `n` (1 ≤ n ≤ 64) denoting the exact number of steps the knight must take. - The second line contains two integers `sx` and `sy` (0 ≤ sx, sy ≤ 7) representing the starting coordinates of the knight on the chessboard. - The third line contains two integers `tx` and `ty` (0 ≤ tx, ty ≤ 7) representing the target coordinates on the chessboard. # Output For each test case, print \\"YES\\" if it is possible for the knight to reach the target position in exactly `n` steps, otherwise print \\"NO\\". # Example Input ``` 3 1 0 0 2 1 2 0 0 3 1 3 1 1 2 2 ``` Output ``` YES YES NO ``` # Note For the first test case, the knight can move from (0,0) to (2,1) in one step. For the second test case, the knight can move from (0,0) to (2,1) and then from (2,1) to (3,3) and finally to (1,2). So, (0,0) -> (2,1) -> (3,3) -> (1,2) is a 3-step path. For the third test case, the knight cannot reach (2,2) from (1,1) in exactly 3 steps.","solution":"def is_knight_reachable(t, test_cases): def bfs_knight_steps(sx, sy, tx, ty, n): directions = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] queue = [(sx, sy, 0)] # (x, y, steps) visited = set((sx, sy)) while queue: x, y, steps = queue.pop(0) if steps == n: if (x, y) == (tx, ty): return True continue for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx <= 7 and 0 <= ny <= 7 and (nx, ny) not in visited: queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return False results = [] for case in test_cases: n, sx, sy, tx, ty = case if bfs_knight_steps(sx, sy, tx, ty, n): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage t = 3 test_cases = [ (1, 0, 0, 2, 1), (2, 0, 0, 3, 1), (3, 1, 1, 2, 2) ] print(is_knight_reachable(t, test_cases)) # Output: [\\"YES\\", \\"YES\\", \\"NO\\"]"},{"question":"You are working on a treasure hunting game where a player needs to collect treasures of different values scattered around a grid. The grid is an NxN matrix, and each cell either contains a treasure with a positive value or is empty (denoted by zero). The player can start at any cell containing a treasure and can only move to adjacent cells (up, down, left, or right) that contain treasures. The aim is to collect as many treasures as possible starting from a given cell. Write a program to determine the maximum treasure value a player can collect starting from a specified cell. Input - The first line of input contains a single integer N (1 ≤ N ≤ 100), denoting the size of the grid. - The next N lines each contain N integers, describing the grid. Each integer is either 0 (empty) or a positive integer representing the value of the treasure in the cell. - The last line contains two space-separated integers, r and c (0 ≤ r, c < N), denoting the starting position (r, c) in the grid. Output Output a single integer, the maximum treasure value the player can collect starting from the specified cell. Examples Input 4 0 2 0 3 0 3 1 0 4 0 0 2 0 1 2 0 1 1 Output 6 Input 3 1 2 3 4 5 6 7 8 9 0 0 Output 45 Note In the first sample, starting from (1, 1) with a treasure of value 3, the player can move to (1, 2) collecting an additional treasure of value 1, and to (0, 1) collecting another treasure of value 2. The total collected treasure value is 3 + 1 + 2 = 6. In the second sample, starting from (0, 0) with a treasure of value 1, the player can collect all the contiguous treasures in the grid: 1+2+3+6+9+8+7+4+5 = 45.","solution":"def collect_treasure(grid, start_row, start_col): Returns the maximum treasure value the player can collect starting from the specified cell. N = len(grid) visited = [[False] * N for _ in range(N)] def dfs(row, col): if row < 0 or col < 0 or row >= N or col >= N or visited[row][col] or grid[row][col] == 0: return 0 visited[row][col] = True total_value = grid[row][col] # Explore all four directions total_value += dfs(row + 1, col) total_value += dfs(row - 1, col) total_value += dfs(row, col + 1) total_value += dfs(row, col - 1) return total_value # Start DFS from the specified cell return dfs(start_row, start_col)"},{"question":"Given a string s consisting of lowercase English letters, you are to transform it into a palindrome by possibly rearranging its characters. A palindrome is a string that reads the same forward and backward, like \\"madam\\" or \\"racecar\\". If it is possible to rearrange the characters of s to form a palindrome, return the lexicographically smallest possible palindrome. If it is not possible to form a palindrome, return the string \\"IMPOSSIBLE\\". The lexicographically smallest string is the one that would appear earlier in a dictionary. For example, \\"abcd\\" is smaller than \\"abdc\\". Input: - The input consists of a single string s (1 ≤ |s| ≤ 1000), the string you need to check and rearrange. Output: - Output the lexicographically smallest palindrome that can be formed by rearranging the characters of s, or \\"IMPOSSIBLE\\" if it is not possible. Example: Input: civic Output: civic Input: ivicc Output: civic Input: hello Output: IMPOSSIBLE Note: In the first example, the input string \\"civic\\" is already a palindrome, hence the output is \\"civic\\". In the second example, by rearranging the characters of \\"ivicc\\" we get the palindrome \\"civic\\", which is the lexicographically smallest possible palindrome. In the last example, it is not possible to rearrange the characters of \\"hello\\" to form a palindrome, hence the output is \\"IMPOSSIBLE\\".","solution":"def smallest_palindrome(s): from collections import Counter # Count frequency of each character char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A valid palindrome can have at most one character with odd frequency if odd_count > 1: return \\"IMPOSSIBLE\\" # Construct the first half of the palindrome half_palindrome = [] middle_char = \\"\\" for char in sorted(char_count.keys()): count = char_count[char] if count % 2 != 0: middle_char = char half_palindrome.append(char * (count // 2)) first_half = \'\'.join(half_palindrome) return first_half + middle_char + first_half[::-1]"},{"question":"A large company holds an annual coding event where each participant is required to solve a series of coding challenges. One of these challenges involves arrays and cyclic operations. The task is defined as follows: You are given an array of integers of length n and an integer k. Write a function that rotates the array k positions to the right. That is, each element in the array should be moved to the position k places to its right, while the end of the array wraps around to the beginning. For example: - Given the array `arr = [1, 2, 3, 4, 5]` and `k = 2`, after rotating the array 2 positions to the right, the result should be `[4, 5, 1, 2, 3]`. Input - The first line of input contains two integers n (1 ≤ n ≤ 1000) and k (0 ≤ k ≤ 10000) — the length of the array `arr` and the number of positions to rotate the array respectively. - The second line contains n integers (−1000 ≤ arr[i] ≤ 1000) representing the array. Output - Print n integers — the array after rotation. Examples Input 5 2 1 2 3 4 5 Output 4 5 1 2 3 Input 6 3 10 20 30 40 50 60 Output 40 50 60 10 20 30","solution":"def rotate_array(arr, k): Rotates the array k positions to the right. :param arr: List of integers representing the array :param k: Integer representing the number of positions to rotate the array :return: A new list with the array rotated k positions to the right n = len(arr) k = k % n # To handle cases where k >= n return arr[-k:] + arr[:-k]"},{"question":"Alice loves playing with strings and finding patterns within them. Recently, she stumbled upon an interesting challenge involving palindromic substrings. A substring is considered palindromic if it reads the same from left to right as it does from right to left. For example, \\"aba\\" and \\"racecar\\" are palindromic, while \\"abc\\" is not. Alice\'s task is to find the number of palindromic substrings in a given string. However, she\'s facing difficulty in efficiently solving this problem for long strings. Your task is to help Alice by writing a function that counts the number of palindromic substrings in a given string. # Input - The first line contains an integer `t`, the number of test cases. - Each of the next `t` lines contains a string `s` consisting of lowercase English letters. # Output For each test case, print an integer that represents the number of palindromic substrings in the string `s`. # Constraints: - `1 ≤ t ≤ 100` - `1 ≤ |s| ≤ 1000` (where |s| denotes the length of the string) # Example Input ``` 2 abc aaa ``` Output ``` 3 6 ``` # Explanation - For the first test case \\"abc\\": - The palindromic substrings are \\"a\\", \\"b\\", \\"c\\", so the answer is 3. - For the second test case \\"aaa\\": - The palindromic substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\", so the answer is 6. Your task is to write a function that solves the problem for Alice. Remember to handle the input and output as specified.","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the string s. n = len(s) count = 0 # A 2D array to store the palindromic substring status dp = [[False] * n for _ in range(n)] # Every single character is a palindrome for i in range(n): dp[i][i] = True count += 1 # Check for substrings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True count += 1 # Check for substrings of length greater than 2 for length in range(3, n + 1): # length of substring for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True count += 1 return count def palindromic_substrings_count(t, strings): For each test string in strings, counts the number of palindromic substrings. results = [] for s in strings: results.append(count_palindromic_substrings(s)) return results"},{"question":"Given a list of words, you are to select words that can be typed using letters of the alphabet on only one row of an American QWERTY keyboard. The keyboard rows are represented by the following strings of characters: - Top row: \\"qwertyuiop\\" - Home row: \\"asdfghjkl\\" - Bottom row: \\"zxcvbnm\\" Write a function that takes a list of words and returns a new list containing only the words that can be typed on one row of the keyboard. Input: - An integer `n` (1 ≤ n ≤ 100) representing the number of words. - `n` words, each between 1 and 100 characters long and containing only English letters. Words are case insensitive. Output: - A list of words that can be typed using letters from one row of the keyboard. Example: Input: ``` 5 Hello Alaska Dad Peace Key ``` Output: ``` [\'Alaska\', \'Dad\'] ``` Explanation: - \\"Hello\\" cannot be typed using letters from only one row. - \\"Alaska\\" can be typed using letters from the home row (\\"asdfghjkl\\"). - \\"Dad\\" can be typed using letters from the home row (\\"asdfghjkl\\"). - \\"Peace\\" cannot be typed using letters from only one row. - \\"Key\\" cannot be typed using letters from only one row. Note: - The comparison should be case insensitive. - The function should still work if the input words contain uppercase letters, but the output should match the case of the input.","solution":"def find_words_on_one_row(words): Given a list of words, return the words that can be typed using letters of the alphabet on only one row of an American QWERTY keyboard. # Define the sets for the rows top_row = set(\\"qwertyuiop\\") home_row = set(\\"asdfghjkl\\") bottom_row = set(\\"zxcvbnm\\") result = [] for word in words: # Convert word to lowercase for case insensitive comparison lower_word = set(word.lower()) # Check if the word can be typed using one of the rows if lower_word.issubset(top_row) or lower_word.issubset(home_row) or lower_word.issubset(bottom_row): result.append(word) return result"},{"question":"You are given an array of integers, and you want to group these integers into multiple subarrays such that the sum of the integers in each subarray is as close to the target value `T` as possible. Your task is to minimize the number of subarrays needed for this grouping. # Input The first line contains two integers `n` and `T` (1 ≤ n ≤ 500, 1 ≤ T ≤ 10^5) — the number of integers in the array and the target sum value for each subarray. The second line contains `n` integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4) — the integers in the array. # Output Output a single integer — the minimum number of subarrays needed. # Examples Input ``` 5 10 1 7 3 6 2 ``` Output ``` 2 ``` Input ``` 4 8 4 4 4 4 ``` Output ``` 2 ``` Input ``` 3 15 5 5 5 ``` Output ``` 1 ``` Note In the first test case, we can group the integers into two subarrays: [1, 7, 2] and [3, 6]. Each subarray sums up to 10. In the second test case, we can group the integers into two subarrays: [4, 4] and [4, 4]. Each subarray sums up to 8. In the third test case, we can group all integers into one subarray: [5, 5, 5]. The subarray sums up to 15.","solution":"def min_subarrays_needed(n, T, arr): This function returns the minimum number of subarrays needed such that the sum of each subarray is as close to the target value T as possible. # Sort the array to make it easier to group numbers close to target sum arr.sort(reverse=True) subarrays = [] for num in arr: placed = False for subarray in subarrays: if sum(subarray) + num <= T: subarray.append(num) placed = True break if not placed: subarrays.append([num]) return len(subarrays) # Example Usage if __name__ == \\"__main__\\": # Example input n, T = 5, 10 arr = [1, 7, 3, 6, 2] print(min_subarrays_needed(n, T, arr)) # Output should be 2"},{"question":"A company has a unique round-robin scheduler for assigning tasks to employees. Each employee has a specific skill level, and each task has a required skill level. An employee can complete a task if their skill level is greater than or equal to the task\'s required skill level. The scheduler assigns tasks in a round-robin fashion (i.e., one by one in a cyclical manner) starting from the first employee. Given the skill levels of employees and the required skill levels of tasks, determine the number of tasks that will be completed after all tasks have been assigned once in round-robin order, starting from the first employee. Input The first line contains two integers n and m (1 ≤ n ≤ 200, 1 ≤ m ≤ 200) — the number of employees and the number of tasks. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — the skill levels of the employees. The third line contains m integers b_1, b_2, ..., b_m (1 ≤ b_j ≤ 100) — the required skill levels of the tasks. Output Output the number of tasks that will be completed after the round-robin assignment. Examples Input 4 5 3 5 2 8 4 2 3 6 1 Output 4 Input 3 4 5 1 4 3 5 3 6 Output 3 Note In the first example: - Employee 1 with skill level 3 is assigned task 1 with required skill level 4 (cannot complete). - Employee 2 with skill level 5 is assigned task 2 with required skill level 2 (can complete). - Employee 3 with skill level 2 is assigned task 3 with required skill level 3 (cannot complete). - Employee 4 with skill level 8 is assigned task 4 with required skill level 6 (can complete). - Employee 1 with skill level 3 is assigned task 5 with required skill level 1 (can complete). Employees 2, 4, and 1 (who completed task 5) can complete their assigned tasks, resulting in 3 tasks completed in total. In the second example: - Employee 1 with skill level 5 is assigned task 1 with required skill level 3 (can complete). - Employee 2 with skill level 1 is assigned task 2 with required skill level 5 (cannot complete). - Employee 3 with skill level 4 is assigned task 3 with required skill level 3 (can complete). - Employee 1 with skill level 5 is assigned task 4 with required skill level 6 (cannot complete). Employees 1 and 3 can complete their assigned tasks, resulting in 2 tasks completed in total.","solution":"def completed_tasks(n, m, employees, tasks): Determines the number of tasks that will be completed after round-robin assignment of tasks to employees. :param n: Number of employees :param m: Number of tasks :param employees: List of skill levels of the employees :param tasks: List of required skill levels of the tasks :return: Number of tasks that will be completed completed_count = 0 for i in range(m): if employees[i % n] >= tasks[i]: completed_count += 1 return completed_count # Sample usage: # n = 4 # m = 5 # employees = [3, 5, 2, 8] # tasks = [4, 2, 3, 6, 1] # print(completed_tasks(n, m, employees, tasks)) # Output: 4"},{"question":"You are given a tree with n vertices labeled from 1 to n and with edges weighted by positive integers. Your task is to find the maximum possible sum of weights on a simple path between any two vertices in the tree. A tree with n vertices is a connected graph with n-1 edges and no cycles. # Input The first line of input contains an integer n (2 ≤ n ≤ 10^5), the number of vertices. Each of the following n-1 lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) representing an edge between vertices u and v with weight w. # Output Output one integer: the maximum possible sum of weights on a simple path between any two vertices in the tree. # Examples Input ``` 5 1 2 3 2 3 4 2 4 2 3 5 6 ``` Output ``` 13 ``` Note In the provided example, the path with the maximum sum of weights is 5 -> 3 -> 2 -> 1, with a total weight of 6 + 4 + 3 = 13.","solution":"from collections import defaultdict import sys sys.setrecursionlimit(10**6) def find_farthest_node(tree, start_node, n): def dfs(node, parent, distance): farthest_node[0], farthest_dist[0] = (node, distance) if distance > farthest_dist[0] else (farthest_node[0], farthest_dist[0]) for neighbor, weight in tree[node]: if neighbor != parent: dfs(neighbor, node, distance + weight) farthest_node = [-1] farthest_dist = [-1] dfs(start_node, -1, 0) return farthest_node[0], farthest_dist[0] def maximum_path_sum(n, edges): tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) # Find the farthest node from any node (say node 1) node_A, _ = find_farthest_node(tree, 1, n) # Use that node to find the farthest node from it (node B), and the distance node_B, max_distance = find_farthest_node(tree, node_A, n) return max_distance # Function to read data, parse it, and then calculate the answer def calculate_maximum_path_sum(input_str): input_lines = input_str.strip().split(\\"n\\") n = int(input_lines[0]) edges = [] for i in range(1, n): u, v, w = map(int, input_lines[i].split()) edges.append((u, v, w)) return maximum_path_sum(n, edges)"},{"question":"You are given a directed graph with n vertices numbered from 1 to n and m directed edges. Each directed edge from vertex u to vertex v has a certain weight w (u, v, w). Your task is to determine if there exists at least one negative weight cycle in the graph. A negative weight cycle is a cycle where the sum of the weights of the edges is negative. Input The first line contains two integers n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000) — the number of vertices and the number of edges in the graph, respectively. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n; -10^4 ≤ w ≤ 10^4) representing a directed edge from vertex u to vertex v with weight w. Output Print \\"YES\\" if there is a negative weight cycle in the graph and \\"NO\\" otherwise. Example Input 6 8 1 2 4 2 3 3 3 1 -10 1 4 5 4 5 3 5 6 2 6 4 -8 4 3 1 Output YES Explanation In the given example, there is a negative weight cycle involving the vertices 4→5→6→4 with a total weight of 3 + 2 - 8 = -3. The implementation of the solution typically involves using the Bellman-Ford algorithm, which helps detect negative weight cycles in a graph.","solution":"def has_negative_weight_cycle(n, edges): Detects if a graph has a negative weight cycle using the Bellman-Ford algorithm. Parameters: n (int): Number of vertices edges (List[Tuple[int, int, int]]): List of edges where each edge is represented as (u, v, w) Returns: bool: True if there is a negative weight cycle, False otherwise # Initialize distances array dist = [float(\'inf\')] * (n + 1) dist[1] = 0 # You can start Bellman-Ford from any arbitrary vertex # Relax edges up to n-1 times for _ in range(n - 1): for u, v, w in edges: if dist[u] != float(\'inf\') and dist[u] + w < dist[v]: dist[v] = dist[u] + w # Check for negative weight cycle for u, v, w in edges: if dist[u] != float(\'inf\') and dist[u] + w < dist[v]: return True return False"},{"question":"Write a program that takes a binary tree and outputs its maximum path sum. A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. The path does not need to go through the root. Constraints - The number of nodes in the tree is in the range [1, 1000]. - -1000 leq Node.val leq 1000 Input The input consists of a binary tree in the form of a nested list where each element corresponds to a node and its left and right children, represented as: [value, [left_subtree], [right_subtree]] If a node does not have a left or right child, that node is represented with `None`. Output Return the maximum path sum of the binary tree as an integer. Example Input ``` [1, [2, None, None], [3, None, None]] ``` Output ``` 6 ``` Explanation: The maximum path sum is obtained by considering the path 2 -> 1 -> 3, which sums to 6.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_path_sum(root): def helper(node): nonlocal max_sum if not node: return 0 left_gain = max(helper(node.left), 0) right_gain = max(helper(node.right), 0) # Price of the current path price_newpath = node.val + left_gain + right_gain # Update max_sum if price_newpath is better max_sum = max(max_sum, price_newpath) # For recursion, return the max gain if continue the same path return node.val + max(left_gain, right_gain) max_sum = float(\'-inf\') helper(root) return max_sum def build_tree(lst): if not lst: return None root_val = lst[0] left_lst = lst[1] if len(lst) > 1 else None right_lst = lst[2] if len(lst) > 2 else None root = TreeNode(root_val) if left_lst: root.left = build_tree(left_lst) if right_lst: root.right = build_tree(right_lst) return root"},{"question":"You are tasked with creating a balanced heap data structure, where all elements need to satisfy the heap property and an additional balance property. The heap property ensures that each parent node is greater than its children for a max-heap or less than its children for a min-heap. Meanwhile, the balance property requires the tree to be as balanced as possible, like in a complete binary tree. For this question, you will implement a min-heap with these two properties. Given a sequence of operations, your task is to process each operation and maintain the properties of the heap. Operations: 1. `insert x` - Insert the integer `x` into the heap. 2. `extractMin` - Remove and return the minimum element from the heap. If the heap is empty, return `-1`. You need to process a series of such operations and return the results of each `extractMin` operation. Input The first line contains an integer `t` (1 ≤ t ≤ 10^5) - the number of operations. Each of the next `t` lines contains one of the following operations: - `insert x` (where `x` is an integer; -10^9 ≤ x ≤ 10^9) - `extractMin` Output For each `extractMin` operation, output the result on a new line. Example Input 10 insert 5 insert 2 insert 3 extractMin insert 8 extractMin insert 1 extractMin extractMin extractMin Output 2 3 1 5 -1","solution":"import heapq class BalancedMinHeap: def __init__(self): self.heap = [] def insert(self, x): heapq.heappush(self.heap, x) def extract_min(self): if not self.heap: return -1 return heapq.heappop(self.heap) def process_operations(operations): heap = BalancedMinHeap() result = [] for operation in operations: if operation.startswith(\\"insert\\"): _, value = operation.split() heap.insert(int(value)) elif operation == \\"extractMin\\": result.append(str(heap.extract_min())) return \\"n\\".join(result)"},{"question":"Nick is a computer science student who is fascinated by Fibonacci-like sequences. Recently, he learned about a generalized version where each element is the sum of the previous m elements, with m being a positive integer input by the user. Nick wants to write a function that will compute and display the first n elements of such a sequence given the initial m elements. However, he is struggling with how to correctly implement this function. Can you help him? Given integers m, n, and a list of the first m elements, you need to generate and display the first n elements of this sequence. The sequence should be generated such that each element (from index m onwards) is the sum of the previous m elements. Input The first line of the input contains two space-separated integers m and n (1 ≤ m ≤ n ≤ 1000). The second line contains m space-separated integers representing the initial m elements of the sequence. Output Print the first n elements of the sequence in a single line, space-separated. Examples Input 3 7 1 1 1 Output 1 1 1 3 5 9 17 Input 4 10 0 0 0 1 Output 0 0 0 1 1 2 4 8 15 29 Note In the first example, the sequence starts with the initial elements [1, 1, 1]. The 4th element is the sum of the first 3 elements (1+1+1=3), the 5th element is the sum of the 2nd, 3rd and 4th elements (1+1+3=5), and so on. In the second example, the sequence starts with [0, 0, 0, 1]. The 5th element is the sum of the first four elements (0+0+0+1=1), the 6th element is the sum of the 2nd to 5th elements (0+0+1+1=2), and so on.","solution":"def generalized_fibonacci_sequence(m, n, initial_elements): Generates the first n elements of a generalized Fibonacci sequence where each element is the sum of the previous m elements. Parameters: m (int): The number of initial elements to sum for generating next elements. n (int): The total number of elements in the sequence to generate. initial_elements (list): The first m elements of the sequence. Returns: list: The first n elements of the sequence. if len(initial_elements) != m: raise ValueError(\\"The number of initial elements should be equal to m\\") sequence = initial_elements[:] for i in range(m, n): next_element = sum(sequence[i-m:i]) sequence.append(next_element) return sequence # Example print(generalized_fibonacci_sequence(3, 7, [1, 1, 1])) # [1, 1, 1, 3, 5, 9, 17] print(generalized_fibonacci_sequence(4, 10, [0, 0, 0, 1])) # [0, 0, 0, 1, 1, 2, 4, 8, 15, 29]"},{"question":"You are given two linked lists representing non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Input Two lines of input. Each line represents a linked list where the digits are stored in reverse order. Each node is represented by a single digit, and the nodes are space-separated. Output The resulting linked list representing the sum of the two input numbers, with digits stored in reverse order. Examples Input 2 4 3 5 6 4 Output 7 0 8 Input 9 9 9 9 9 9 9 9 Output 8 9 9 9 1 Note In the first example, (342 + 465) = 807, and the output linked list is 7 -> 0 -> 8. In the second example, (9999 + 9999) = 19998, and the output linked list is 8 -> 9 -> 9 -> 9 -> 1. The task is to simulate the addition process, digit by digit, while also managing carry-over values. This can be done iteratively by iterating through all the nodes of the input linked lists and creating corresponding nodes for the output linked list. If one linked list is shorter, you may need to handle this by treating the missing nodes as 0.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addTwoNumbers(l1, l2): dummy = ListNode() current = dummy carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 total = val1 + val2 + carry carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy.next def linked_list_from_list(lst): if not lst: return None head = ListNode(lst[0]) current = head for value in lst[1:]: current.next = ListNode(value) current = current.next return head def list_from_linked_list(node): result = [] while node: result.append(node.val) node = node.next return result"},{"question":"Problem A treasure hunt is organized in a park to celebrate a local festival. The park is represented by an NxM grid. Each cell in the grid can either be walkable or contain an obstacle. The participants start at the top-left corner (1,1) and their goal is to reach the bottom-right corner (N,M). They can only move right or down to adjacent walkable cells. However, each participant has a predetermined number of moves, known as \'M\'. If the participant reaches the treasure within \'M\' moves, they win. Otherwise, they fail. Given the grid and the number of allowed moves, your task is to determine if it\'s possible for the participant to reach the treasure within the given moves. If it\'s possible, return \\"Possible\\". If it\'s not possible, return \\"Impossible\\". Constraints The input satisfies the following conditions: * 1 ≤ N, M ≤ 100 * 1 ≤ K ≤ 10 Input The first line contains four integers N, M, K, and M. Next N lines each contain M characters, representing the grid where \'.\' denotes a walkable cell and \'#\' denotes an obstacle. Output Output \\"Possible\\" if the participant can reach the treasure within the given moves, otherwise output \\"Impossible\\". Examples Input 3 3 4 ... .#. ... Output Possible Input 3 3 4 #.. .#. ... Output Impossible Input 4 4 6 .... .. .... .... Output Possible Input 4 4 5 .... .. .... .... Output Impossible","solution":"def is_possible_to_reach_treasure(N, M, K, grid): Determines if it is possible to reach the bottom-right corner (N-1, M-1) of the grid within K moves starting from the top-left corner (0, 0). Parameters: - N (int): Number of rows in the grid. - M (int): Number of columns in the grid. - K (int): Number of allowed moves. - grid (list of str): Representation of the park grid where \'.\' denotes walkable cell and \'#\' denotes obstacle. Returns: - str: \\"Possible\\" if the participant can reach the target within K moves, \\"Impossible\\" otherwise. from collections import deque if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return \\"Impossible\\" directions = [(0,1), (1,0)] queue = deque([(0, 0, 0)]) # (row, col, moves) visited = set() while queue: r, c, moves = queue.popleft() if moves > K: continue if (r, c) == (N-1, M-1): return \\"Possible\\" for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and grid[nr][nc] == \'.\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, moves + 1)) return \\"Impossible\\""},{"question":"Koa the Koala has a string S consisting of the first 10 lowercase English alphabet letters (i.e., from \'a\' to \'j\'). In one move Koa can: 1. Select a substring of S of length exactly k (1 ≤ k ≤ |S|) which is a palindrome (i.e., it reads the same backward as forward). 2. Reverse this substring. Koa wants to know the smallest number of moves she has to do to make string S read the same backward as forward (a palindrome) or determine that there is no way to make it a palindrome. Help her! Input Each test contains multiple test cases. The first line contains t (1 ≤ t ≤ 10) — the number of test cases. Description of the test cases follows. The first line of each test case contains one string S (1 ≤ |S| ≤ 10^5). It is guaranteed that the sum of |S| over all test cases does not exceed 10^5. Output For each test case: Print on a single line the smallest number of moves to make S a palindrome or -1 if there is no way to make it a palindrome. Example Input 4 aba abac racecar abcdedcba Output 0 1 0 0 Note * In the 2nd test case: 1. Koa selects the substring \\"b\\" (which is already a palindrome) and reverses it. Now the string is \\"acolor{blue}{b}ac\\". 2. Koa selects the substring \\"acolor{blue}{ba}c\\" and reverses it, resulting in \\"acolor{red}{abac}\\", which is still not a palindrome. 3. Koa selects the substring \\"abcolor{red}{ac}\\" and reverses it, obtaining \\"color{blue}{acab}\\", which is a palindrome.","solution":"def make_palindrome_in_min_moves(t, cases): def min_moves_to_palindrome(s): n = len(s) l, r = 0, n - 1 moves = 0 while l < r: if s[l] != s[r]: # Single character replacement case if s[l+1:r+1] == s[l+1:r+1][::-1]: moves += 1 l += 1 elif s[l:r] == s[l:r][::-1]: moves += 1 r -= 1 else: return -1 l += 1 r -= 1 return moves results = [] for case in cases: results.append(min_moves_to_palindrome(case)) return results # Function for provided input parsing and handling def run_solution(input_string): input_lines = input_string.strip().split(\\"n\\") t = int(input_lines[0]) cases = input_lines[1:t+1] return make_palindrome_in_min_moves(t, cases)"},{"question":"Alice loves playing with numbers and has recently become interested in palindromic numbers. A number is said to be palindromic if it reads the same backwards as forwards. Alice is particularly interested in identifying the nearest palindrome to a given number. Given a number N, your task is to find the nearest palindromic number to N. If there are two palindromic numbers equally close to N, choose the smaller one. Input The first line of input contains a single integer T denoting the number of test cases. The next T lines each contain a single integer N. Output For each test case, print the nearest palindromic number to N. Constraints 1 ≤ T ≤ 10^5 0 ≤ N ≤ 10^7 SAMPLE INPUT 3 123 545 1000 SAMPLE OUTPUT 121 545 999 Explanation Test 1: The nearest palindrome to 123 is 121 which is 2 units away. Test 2: 545 is already a palindrome, so the nearest palindromic number is 545. Test 3: The nearest palindromic number to 1000 is 999 which is 1 unit away.","solution":"def find_nearest_palindrome(n): n_str = str(n) if n_str == n_str[::-1]: return n lower_palindrome = n - 1 while str(lower_palindrome) != str(lower_palindrome)[::-1]: lower_palindrome -= 1 upper_palindrome = n + 1 while str(upper_palindrome) != str(upper_palindrome)[::-1]: upper_palindrome += 1 if n - lower_palindrome <= upper_palindrome - n: return lower_palindrome else: return upper_palindrome def nearest_palindromic_numbers(test_cases): results = [] for n in test_cases: results.append(find_nearest_palindrome(n)) return results"},{"question":"You are tasked to build a binary sequence of length `n` which should contain an equal number of zeroes and ones. In addition, the sequence must not contain \\"000\\" or \\"111\\" as a substring. Input The first line contains a single integer `n` (1 ≤ n ≤ 2·10⁵) — the length of the binary sequence. It is guaranteed that `n` is even. Output Print the binary sequence that satisfies all the constraints. If there are multiple answers, print any of them. Examples Input 6 Output 010101 Input 4 Output 1001 Note A substring is a contiguous sequence of characters within a larger string. For example, \\"0101\\" is a valid sequence as it does not have \\"000\\" or \\"111\\" as a substring and has equal numbers of \'0\' and \'1\'.","solution":"def generate_binary_sequence(n): Generate a binary sequence of length `n` with equal number of zeroes and ones, without containing \\"000\\" or \\"111\\" as a substring. half = n // 2 sequence = \'01\' * half return sequence"},{"question":"Felik loves collecting unique sequences of numbers. He recently got interested in a particular type of sequence which he calls a \\"Felic Sequence\\". A Felic Sequence of length n is a permutation of integers from 1 to n such that for every i (1 ≤ i ≤ n - 1), the difference between the i-th and (i+1)-th elements is not equal to 1. Help Felik by writing a program that generates a Felic Sequence for a given value of n or determines that it\'s impossible to generate such a sequence. Input A single line contains an integer n (1 ≤ n ≤ 100) — the length of the sequence. Output Print \\"Impossible\\" if it\'s not possible to create a Felic Sequence of length n. Otherwise, print a single line with n integers, representing the Felic Sequence. Examples Input 1 3 Output 1 2 1 3 Input 2 4 Output 2 1 3 2 4 Input 3 2 Output 3 Impossible Explanation In the first example, the sequence 2 1 3 is valid because the differences between consecutive elements are 1 (which is not allowed) only for positions 1 and 2, but the sequence overall satisfies the given constraints. In the second example, there are multiple valid sequences such as 1 3 2 4, 3 1 4 2, etc. In the third example, there is no valid sequence of length 2 where the difference between consecutive elements is not 1, so the output is \\"Impossible\\".","solution":"def felic_sequence(n): Generate a Felic Sequence of length n or determine if it\'s impossible. if n == 2: return \\"Impossible\\" sequence = [] if n % 2 == 1: for i in range(2, n+1, 2): sequence.append(i) for i in range(1, n+1, 2): sequence.append(i) else: for i in range(1, n+1, 2): sequence.append(i) for i in range(2, n+1, 2): sequence.append(i) return \\" \\".join(map(str, sequence))"},{"question":"In a small village, there is a popular number game that the children love to play. The game involves a set of rules that determine if given numbers in a list can be rearranged to form a consecutive sequence. A sequence of numbers is considered consecutive if each number appears exactly once and the difference between the smallest and largest number in the sequence is exactly ( n - 1 ), where ( n ) is the number of elements in the list. Your task is to write a program that determines if a given list of numbers can form a consecutive sequence when rearranged. Input The first line of the input contains an integer ( n ) (1 ≤ ( n ) ≤ 100) — the number of elements in the list. The second line contains ( n ) distinct integers ( a_1, a_2, ldots, a_n ) (−10^9 ≤ ( a_i ) ≤ 10^9) — the elements of the list. Output If the numbers can be rearranged to form a consecutive sequence, print \\"YES\\". Otherwise, print \\"NO\\". You can print each letter in any case (upper or lower). Examples Input 5 4 2 1 3 5 Output YES Input 6 10 7 8 6 9 11 Output YES Input 4 7 10 8 6 Output NO Note In the first example, the numbers can be rearranged as 1, 2, 3, 4, 5, forming a consecutive sequence. In the second example, the numbers can be rearranged as 6, 7, 8, 9, 10, 11, forming a consecutive sequence. In the third example, there is no rearrangement of the numbers that forms a consecutive sequence, since the difference between 10 (the largest number) and 6 (the smallest number) is not equal to ( 4 - 1 ).","solution":"def can_form_consecutive_sequence(n, numbers): Determines if the list of numbers can be rearranged to form a consecutive sequence. :param n: int - number of elements in the list :param numbers: List[int] - list of n distinct integers :return: str - \\"YES\\" if the numbers can be rearranged to form a consecutive sequence, else \\"NO\\" min_num = min(numbers) max_num = max(numbers) if max_num - min_num == n - 1: return \\"YES\\" else: return \\"NO\\""},{"question":"An international bank is migrating its transaction processing system to a new platform. As part of testing, they want to ensure the integrity of daily transactions. Each transaction is either a credit or a debit, and each has a unique ID and an amount associated with it. To verify the transactions, they need to calculate the closing balance of an account for multiple test cases. You are provided with a list of transactions for each test case, and you need to compute the final balance after applying all the transactions. The initial account balance is always zero. Input format: - The first line contains an integer T, denoting the number of test cases. - For each test case, the first line contains an integer N, the number of transactions. - The next N lines each contain a string of the form \\"ID1 TYPE1 AMOUNT1\\", where ID1 is the transaction ID, TYPE1 is either \'credit\' or \'debit\', and AMOUNT1 is the transaction amount, which is a positive integer. Output format: - For each test case, print a single line showing the closing balance of the account. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ AMOUNT1 ≤ 10^6 Each transaction ID will be unique within a test case. SAMPLE INPUT 2 3 T1 credit 100 T2 debit 50 T3 credit 150 2 T1 debit 200 T2 credit 100 SAMPLE OUTPUT 200 -100","solution":"def calculate_final_balance(transactions): balance = 0 for transaction in transactions: tid, ttype, amount = transaction.split() amount = int(amount) if ttype == \\"credit\\": balance += amount elif ttype == \\"debit\\": balance -= amount return balance def process_multiple_test_cases(test_cases): results = [] for transactions in test_cases: results.append(calculate_final_balance(transactions)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 transactions = [] for _ in range(N): transactions.append(lines[index]) index += 1 test_cases.append(transactions) return test_cases def calculate_balances_from_input(input_str): test_cases = parse_input(input_str) results = process_multiple_test_cases(test_cases) return \'n\'.join(map(str, results))"},{"question":"You are given a list of daily temperatures recorded for a month. For each day, determine how many days you have to wait until a warmer temperature. If there is no future day with a warmer temperature, output 0 for that day. Constraints * The number of days in the input won\'t exceed 31. * -50 ≤ temperature ≤ 50 Input The input consists of a single dataset given in the following format: t1 t2 ... t31 The input ends with a line containing only zero. Output For each dataset, print the result in a single line. The output should consist of space-separated integers. Example Input 73 74 75 71 69 72 76 73 40 50 60 30 20 10 0 Output 1 1 4 2 1 1 0 0 1 1 0 0 0 0","solution":"def daily_temperatures(temperatures): For each day, determine how many days you have to wait until a warmer temperature. If there is no future day with a warmer temperature, output 0 for that day. # Initialize a list with 0\'s, same length as temperatures res = [0] * len(temperatures) # Stack to store the indexes of temperatures stack = [] for i in range(len(temperatures)): # While stack has elements and the current temperature is greater than the temperature at the index stored in the stack while stack and temperatures[i] > temperatures[stack[-1]]: prev_day = stack.pop() res[prev_day] = i - prev_day stack.append(i) return res def process_input(input_string): lines = input_string.strip().split(\'n\') results = [] for line in lines: if line == \'0\': break temperatures = list(map(int, line.split())) results.append(\' \'.join(map(str, daily_temperatures(temperatures)))) return \'n\'.join(results)"},{"question":"The kingdom\'s encrypted vaults have been breached, and Malicious forces have left behind an encoded message that holds the key to a treasure. The only way to decode it and find the treasure is by deciphering the message through a specific sequence of operations. Your task is to write an algorithm to decode the encrypted message. Input: The first line will consist of the total number of test cases T. The next T lines will consist of a string S containing only digits (0-9) on each line. Output: For each test case, output the decoded value which is the sum of the digits of the string S. Example: Input: 3 123 456 7890 Output: 6 15 24","solution":"def decode_message(test_cases): Decodes each test case by summing the digits of the string S. Args: test_cases (list of str): A list of strings where each string contains only digits (0-9). Returns: list of int: A list of integers where each integer is the sum of the digits of the corresponding string in test_cases. results = [] for case in test_cases: digit_sum = sum(int(digit) for digit in case) results.append(digit_sum) return results"},{"question":"In a certain country, a new voting system has been adopted. The system works by tallying votes from multiple voting stations and determining the winner based on majority votes. Your task is to write a program that aggregates the votes from various stations and identifies the overall winner. Each station reports its votes as a list of integers, where each integer corresponds to a candidate. Candidates are represented by integers starting from 1 up to k. A candidate wins if they have more than half of the total votes. If no candidate has more than half the votes, the result is a tie. Input The first input line contains two integers n and k, where n is the number of voting stations, and k is the number of candidates. The next n lines each contain a space-separated list of integers representing the votes from one voting station. Each vote is an integer between 1 and k. Output Output a single integer representing the winning candidate number if there is a winner. If there is no winner, print \\"Tie\\". Constraints * 1 ≤ n ≤ 100 * 1 ≤ k ≤ 100 * 1 ≤ number of votes per station ≤ 100 Examples Input 1 3 3 1 2 3 1 1 1 2 2 3 1 1 1 Output 1 1 Input 2 2 2 1 2 2 2 1 Output 2 2 Input 3 2 3 1 2 3 2 2 3 Output 3 Tie Note In the first example, candidate 1 receives 5 votes, candidate 2 receives 2 votes, and candidate 3 receives 2 votes. Candidate 1 has more than half of the total votes, so the result is 1. In the second example, candidate 2 receives 4 votes and candidate 1 receives 2 votes. Candidate 2 has more than half of the total votes, so the result is 2. In the third example, no candidate has more than half of the total votes, so the result is a tie.","solution":"def find_winner(n, k, votes): Determines the overall winner based on majority votes across multiple voting stations. Args: n (int): Number of voting stations. k (int): Number of candidates. votes (list of lists of int): List of votes from each station. Returns: int or str: The winning candidate number if there\'s a winner, otherwise \\"Tie\\". from collections import defaultdict # Initialize vote counter for each candidate total_votes = defaultdict(int) # Aggregate votes from all stations for station_votes in votes: for vote in station_votes: total_votes[vote] += 1 # Calculate total number of votes total_number_of_votes = sum(total_votes.values()) # Find if any candidate has more than half of the total votes half_votes = total_number_of_votes / 2 for candidate in range(1, k+1): if total_votes[candidate] > half_votes: return candidate return \\"Tie\\""},{"question":"You are developing a new messaging app. The app is designed to handle a large number of users, each of whom can send and receive messages. Messages are sent via channels, and each user belongs to one or more channels. To improve the app\'s efficiency, you need to design an algorithm that will determine the minimum number of messages that need to be sent to deliver a certain message to all users in a specified channel. # Problem Description You are given a list of users, each with a unique ID and a list of the channels they belong to. You are also given a list of channels, each with the list of users subscribed to it. Given the user ID of the sender, the channel through which the message is sent, and the message itself, determine the minimum number of message transmissions needed to ensure the message is delivered to all users subscribed to the channel. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000), representing the number of users and the number of channels, respectively. - The next `n` lines each contain a user ID `ui` (1 ≤ ui ≤ n) followed by a list of channel IDs `ci1, ci2, ... (1 ≤ cij ≤ m)`, to which the user is subscribed. - The next `m` lines each contain a channel ID `ci` (1 ≤ ci ≤ m) followed by a list of user IDs `ui1, ui2, ... (1 ≤ uij ≤ n)`, subscribed to that channel. - The last line contains the sender\'s user ID `us`, the channel ID `cs` through which the message is to be sent, and the message `message`. # Output Print the minimum number of message transmissions required to deliver the message to all users subscribed to the specified channel. # Example Input: ``` 3 2 1 1 2 2 1 3 2 1 1 2 2 2 1 3 1 1 HelloWorld ``` Output: ``` 2 ``` # Explanation In the example: - User 1 is subscribed to channels 1 and 2. - User 2 is subscribed to channel 1. - User 3 is subscribed to channel 2. - Channel 1 consists of users 1 and 2. - Channel 2 consists of users 2 and 3. If user 1 sends the message via channel 1, user 2 receives it immediately because they are also subscribed to channel 1. The message \\"HelloWorld\\" is subsequently sent to user 3 (subscribed to channel 2 through user 1), requiring two transmissions in total. The solution ensures the message propagates through the minimum number of transmissions.","solution":"def min_message_transmissions(n, m, user_channels, channel_users, sender, channel, message): from collections import deque, defaultdict # Initialize the graph of users and the sets for visited and distances graph = defaultdict(list) visited = set() distance = {i: float(\'inf\') for i in range(1, n+1)} # Build the users graph based on common channels for user, channels in user_channels.items(): for ch in channels: for user_in_channel in channel_users[ch]: if user_in_channel != user: graph[user].append(user_in_channel) graph[user_in_channel].append(user) # Perform BFS to find minimum number of transmissions queue = deque([(sender, 0)]) visited.add(sender) distance[sender] = 0 while queue: current_user, dist = queue.popleft() for neighbor in graph[current_user]: if neighbor not in visited: visited.add(neighbor) distance[neighbor] = dist + 1 queue.append((neighbor, dist+1)) # Find maximum distance in the target channel transmissions = max(distance[user] for user in channel_users[channel]) return transmissions # Example usage n = 3 m = 2 user_channels = { 1: [1,2], 2: [1], 3: [2] } channel_users = { 1: [1,2], 2: [2,3] } sender = 1 channel = 1 message = \\"HelloWorld\\" print(min_message_transmissions(n, m, user_channels, channel_users, sender, channel, message)) # Output: 1"},{"question":"Problem Description. You are given a string where some of the characters are uppercase letters, and others are lowercase letters. Your task is to determine if the string is a palindrome while ignoring case sensitivity and alphabetic character positions. Input Input description. A string S consisting of alphanumeric characters. Output Output description. Print \\"YES\\" if the string is a palindrome ignoring case sensitivity, otherwise print \\"NO\\". Constraints 1 ≤ |S| ≤ 1000 Example Input: AmanaplanacanalPanama Output: YES Input: HelloWorld Output: NO","solution":"def is_palindrome(s): Returns \\"YES\\" if the string `s` is a palindrome ignoring case sensitivity, otherwise returns \\"NO\\". s = s.lower() # Convert string to lowercase return \\"YES\\" if s == s[::-1] else \\"NO\\""},{"question":"You are working on a system that processes customer orders. Each customer order contains the item code and the number of units ordered. The system needs to aggregate orders and provide a summary of the total units ordered for each item code. Your task is to write a program that reads a list of customer orders and outputs the total units ordered for each unique item code. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of orders. Each of the next n lines contains an item code (a string of alphanumeric characters with a length up to 10) followed by an integer m (1 ≤ m ≤ 1,000) — the number of units ordered. Output For each unique item code, print the item code followed by the total units ordered for that item code. The item codes in the output should appear in the same order as their first appearance in the input. Examples Input 5 A12 5 B34 10 A12 3 C56 2 B34 7 Output A12 8 B34 17 C56 2 Input 3 X1 1 X2 2 X1 4 Output X1 5 X2 2 Note In the first example, the total units for item code A12 is 5 + 3 = 8. For B34, it is 10 + 7 = 17. For C56, it is 2. In the second example, the total units for item code X1 is 1 + 4 = 5, and for X2, it is 2.","solution":"def aggregate_orders(n, orders): Aggregates the orders and returns a summary of the total units ordered for each item code. Args: n (int): The number of orders. orders (list): A list containing tuples of (item_code, number_of_units). Returns: list: A list of tuples containing (item_code, total_units). from collections import OrderedDict order_summary = OrderedDict() for item_code, units in orders: if item_code in order_summary: order_summary[item_code] += units else: order_summary[item_code] = units return list(order_summary.items()) # Example usage: # orders = [ # (\\"A12\\", 5), # (\\"B34\\", 10), # (\\"A12\\", 3), # (\\"C56\\", 2), # (\\"B34\\", 7) # ] # result = aggregate_orders(5, orders) # print(result) # Output: [(\'A12\', 8), (\'B34\', 17), (\'C56\', 2)]"},{"question":"Arjan is organizing a sequence of networking events for a professional conference. Each event has a specific start and end time and ideally, no two events should overlap to allow participants to attend as many events as possible. Help Arjan determine the maximum number of non-overlapping events that can be attended by a participant. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of events. Each of the next n lines contains two integers s and e (0 ≤ s < e ≤ 10^9), the start and end times of the events. Output Print a single integer, the maximum number of non-overlapping events that can be attended. Example Input 5 1 3 2 5 4 6 6 8 5 7 Output 3","solution":"def max_non_overlapping_events(events): Determines the maximum number of non-overlapping events that can be attended. Parameters: events (list of tuples): A list where each tuple consists of two integers representing the start and end times of an event. Returns: int: The maximum number of non-overlapping events. # Sort events by their end time events.sort(key=lambda x: x[1]) # Initialize variables max_events = 0 last_end_time = -1 # Iterate through the events for start, end in events: if start >= last_end_time: # If the current event starts after or when the last event ends, attend it max_events += 1 last_end_time = end return max_events"},{"question":"There is a game played on a single board, which is an n x n grid filled with non-negative integers. Each cell (i, j) of the grid contains a value a[i][j]. The game is played as follows: - You start at the top-left corner of the board (1, 1) and your goal is to reach the bottom-right corner (n, n). - At each step, you can move to the cell either directly to the right (i, j+1) or directly downwards (i+1, j). - The cost of a path is defined as the sum of values of all the cells you visit. Your objective is to calculate the minimum cost to reach the bottom-right corner of the board from the top-left corner. Input: The first line of input contains a single integer T, the number of test cases. T tests follow. Each test case starts with a single line containing integer n, the dimension of the board. The next n lines each contain n integers, the values of the cells in the grid. Output: For each test case, output the minimum cost to reach the bottom-right corner in a single line. Constraints: 1<=T<=100 1<=n<=100 0<=a[i][j]<=1000 Example: Input: 1 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation: The path with the minimum cost is (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) with a cost of 1+1+4+2+1 = 7.","solution":"def min_path_cost(grid): n = len(grid) # Create a dp array to store the minimum path cost dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row and first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] dp[0][i] = dp[0][i-1] + grid[0][i] # Fill the dp array with the minimum path cost for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][n-1] def solve_game(T, test_cases): results = [] for case in test_cases: n, grid = case min_cost = min_path_cost(grid) results.append(min_cost) return results # Example usage if __name__ == \\"__main__\\": T = 1 test_cases = [ (3, [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ]) ] print(solve_game(T, test_cases)) # Expected output: [7]"},{"question":"A programmer received an interesting challenge in a coding competition. You are given a sequence of n integers a_1, a_2, ..., a_n. Additionally, there are m pairs of integers (l_j, r_j) describing m ranges. For each range (l_j, r_j), you need to calculate the sum of the elements within that range. However, the programmer needs to change the sequence by updating k elements before calculating the sums. The updates are given as k pairs (p_i, v_i), where the element at position p_i in the sequence is changed to v_i. Your task is to first apply all k updates to the sequence, and then for each range (l_j, r_j), compute the sum of the elements in the updated sequence. Input The first line contains three integers n, m and k (1 ≤ n, m, k ≤ 10^5) — the length of the sequence, the number of ranges, and the number of updates, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). Then follow k lines, each containing two integers p_i and v_i (1 ≤ p_i ≤ n, 1 ≤ v_i ≤ 10^9) indicating the updates. Next, m lines follow, each containing two integers l_j and r_j (1 ≤ l_j ≤ r_j ≤ n), describing the ranges. Output Output m integers, each representing the sum of the elements in the updated sequence for the corresponding range. Example Input 5 3 2 1 2 3 4 5 2 10 4 20 1 3 2 5 3 5 Output 14 38 28 Explanation After the updates: [1, 10, 3, 20, 5] - The sum of elements from index 1 to 3 is 1 + 10 + 3 = 14. - The sum of elements from index 2 to 5 is 10 + 3 + 20 + 5 = 38. - The sum of elements from index 3 to 5 is 3 + 20 + 5 = 28.","solution":"def apply_updates_and_calculate_sums(n, m, k, sequence, updates, ranges): # Apply the updates to the original sequence for p_i, v_i in updates: sequence[p_i - 1] = v_i # Calculate the sums for each range results = [] for l_j, r_j in ranges: range_sum = sum(sequence[l_j - 1:r_j]) results.append(range_sum) return results"},{"question":"Sarah is organizing a string manipulation workshop for programming enthusiasts. She has devised a unique coding problem to challenge the participants. The problem involves transforming strings based on a given set of rules and determining the final string length. Here\'s the task: A string is given, and you need to perform a series of operations to transform it. Each operation consists of removing a pair of adjacent characters that are the same and then concatenating the remaining parts of the string. The operations continue until no more such adjacent pairs can be removed. For example, if the initial string is \\"abbaca\\", the first operation will remove \\"bb\\", resulting in \\"aaca\\". The second operation will remove \\"aa\\", resulting in \\"ca\\". Since there are no more adjacent pairs of the same character, the final string is \\"ca\\", and its length is 2. Write a program that takes an initial string as input and outputs the length of the resulting string after performing all possible operations. Input The input consists of a single string s, containing only lowercase English letters. The length of s is between 1 and 100,000. Output Print an integer representing the length of the string after all possible operations have been performed. Examples Input abbaca Output 2 Input aabccba Output 1 Note In the first sample, \\"abbaca\\" becomes \\"ca\\" after two steps, as explained earlier. In the second sample, \\"aabccba\\" becomes \\"bccb\\" after one step, and \\"bccb\\" becomes \\"b\\" after two more steps, as there are no adjacent pairs left to remove. Hence, the length of the final string is 1.","solution":"def final_string_length(s): Returns the length of the string after performing all possible adjacent pair removals. Args: s (str): The input string consisting of lowercase English letters. Returns: int: The length of the remaining string after all possible operations. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return len(stack)"},{"question":"Alice is organizing a fundraising campaign for her community. She has a list of donations pledged by various donors. Since she wants to recognize the top donors, she decided to find out the sum of the largest k donations. However, Alice only has the donations pledged in a stream format, meaning she has access to each donation one by one in the order they were made, and she can\'t go back to previously processed donations. Your task is to help Alice determine the sum of the largest k donations so far as she processes each donation from the stream. You\'ll need to maintain the sum dynamically as new donations are received. **Input:** - The first line contains two integers n and k, where n is the number of donations and k is the number of largest donations to sum up (1 ≤ k ≤ n ≤ 10^6). - The second line contains n space-separated integers representing the donations (1 ≤ donation ≤ 10^9). **Output:** - Output a single integer, the sum of the largest k donations after all donations have been processed. **Example:** Input: ``` 5 3 100 200 50 150 300 ``` Output: ``` 650 ``` **Note:** For the example: - The first donation \\"100\\": The largest 3 donations are [100] and the sum is 100. - The second donation \\"200\\": The largest 3 donations are [200, 100] and the sum is 300. - The third donation \\"50\\": The largest 3 donations are [200, 100, 50] and the sum is 350. - The fourth donation \\"150\\": The largest 3 donations are [200, 150, 100] and the sum is 450. - The fifth donation \\"300\\": The largest 3 donations are [300, 200, 150] and the sum is 650.","solution":"import heapq def sum_largest_k_donations(n, k, donations): # Using a min heap to keep track of the largest k donations min_heap = [] total = 0 for donation in donations: if len(min_heap) < k: heapq.heappush(min_heap, donation) total += donation elif donation > min_heap[0]: total -= heapq.heappushpop(min_heap, donation) total += donation return total"},{"question":"Write a Python function to find the length of the longest subsequence in an array, such that all elements of the subsequence are sorted in increasing order. Use dynamic programming to solve this problem. Function Signature: ```python def longest_increasing_subsequence(arr: List[int]) -> int: pass ``` Constraints * n ≤ 1000 * -10^6 ≤ an element in arr ≤ 10^6 Input A single line containing n integers representing the elements of the array. Output A single integer representing the length of the longest increasing subsequence. Example Input 10 10 22 9 33 21 50 41 60 80 1 Output 6 Explanation The longest increasing subsequence is [10, 22, 33, 50, 60, 80], which has a length of 6.","solution":"from typing import List def longest_increasing_subsequence(arr: List[int]) -> int: Returns the length of the longest increasing subsequence in the array. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a string of lowercase letters and a dictionary of words. Your task is to determine the length of the longest string that can be formed by deleting some characters of the given string so that it becomes a subsequence of a word in the dictionary. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively. For instance, \\"abc\\", \\"ab\\" and \\"ac\\" are subsequences of \\"abc\\", but \\"ba\\" is not. Input - The first line contains a string s of lowercase letters (1 ≤ |s| ≤ 10^5). - The second line contains an integer n (1 ≤ n ≤ 10^4), the number of words in the dictionary. - The following n lines each contain a single word of lowercase letters (1 ≤ |word| ≤ 10^5). Output Print the length of the longest subsequence of s that matches a word in the dictionary. Examples Input abppplee 6 able ale apple bale kangaroo app Output 5 Input abcdef 4 fed abc abf ace Output 3","solution":"def is_subsequence(sub, main): it = iter(main) return all(char in it for char in sub) def longest_subsequence(s, words): longest = 0 for word in words: if is_subsequence(word, s): longest = max(longest, len(word)) return longest"},{"question":"Alice is planning her study schedule for an upcoming series of competitions that span over `n` days. She has committed to participating in `m` different competitions. Each competition has specific requirements regarding preparation and participation. Details of each competition include: - `a_i` — the day on which the resources for the i-th competition become available. - `p_i` — the day of the i-th competition (a_i < p_i). - `b_i` — the number of days Alice needs to prepare for the i-th competition. She must prepare during the days between `a_i` and `p_i - 1`, inclusive. During any given day, Alice has three options: 1. Take a rest. 2. Prepare for exactly one competition. 3. Participate in a competition. She cannot mix activities in a single day, meaning she cannot both prepare and participate in different competitions on the same day or prepare for multiple competitions in one day. Determine a feasible schedule for Alice to meet her preparation and competition commitments, or state that it\'s impossible. # Input The first line contains two integers, `n` and `m` (2 ≤ n ≤ 100, 1 ≤ m ≤ n) — the number of days and the number of competitions respectively. The next `m` lines each contain three integers, `a_i`, `p_i`, `b_i` (1 ≤ a_i < p_i ≤ n, 1 ≤ b_i ≤ n) — representing the day the resources for the i-th competition become available, the day of the competition, and the number of preparation days required, respectively. It is guaranteed that no two competitions occur on the same day, but multiple resources can be available on the same day. # Output If it is impossible for Alice to schedule all her preparations and competitions, print `-1`. Otherwise, print `n` integers, where the j-th number is: - `m + 1`, if j-th day is the day of a competition. - `0`, if j-th day is a rest day. - `i` (1 ≤ i ≤ m), if j-th day is allocated to preparing for the i-th competition. Alice must prepare for each competition exactly `b_i` days. If there are multiple feasible schedules, print any one of them. # Examples Input ``` 6 2 1 4 2 2 6 2 ``` Output ``` 1 2 1 3 2 3 ``` Explanation - Day 1: Prepare for competition 1. - Day 2: Prepare for competition 2. - Day 3: Prepare for competition 1. - Day 4: Participate in competition 1. - Day 5: Prepare for competition 2. - Day 6: Participate in competition 2. If Alice can prepare and attend the competitions successfully, print the schedule; otherwise, print `-1`.","solution":"def schedule_competitions(n, m, competitions): # Initialize the schedule with rest days schedule = [0] * n # Sort competitions by competition day to process them in order competitions = sorted(competitions, key=lambda x: x[1]) for index, (a, p, b) in enumerate(competitions): comp_index = index + 1 prepare_days_needed = b for day in range(a - 1, p - 1): if prepare_days_needed == 0: break if schedule[day] == 0: schedule[day] = comp_index prepare_days_needed -= 1 if prepare_days_needed > 0: return -1 schedule[p - 1] = m + 1 return schedule"},{"question":"Problem Statement: **Palindrome Substring Count** Given a string `s`, write a function to count all distinct palindromic substrings of `s`. A substring is a contiguous sequence of characters within a string. A palindromic substring is a substring which reads the same backward as forward. Function Signature: ```python def count_palindromic_substrings(s: str) -> int: ``` **Input** - A single string `s` (1 ≤ `|s|` ≤ 100), containing only lowercase English letters. **Output** - Output a single integer, the count of distinct palindromic substrings in `s`. **Examples** **Example 1:** ``` Input: \\"ababa\\" Output: 5 Explanation: The distinct palindromic substrings are \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", and \\"ababa\\". ``` **Example 2:** ``` Input: \\"abc\\" Output: 3 Explanation: The distinct palindromic substrings are \\"a\\", \\"b\\", and \\"c\\". ``` **Example 3:** ``` Input: \\"aaa\\" Output: 3 Explanation: The distinct palindromic substrings are \\"a\\", \\"aa\\", and \\"aaa\\". (Note that \\"aa\\" and \\"a\\" are counted only once even though they appear multiple times) ``` **Constraints** - Ensure the function handles the string length efficiently and avoids counting duplicate palindromic substrings. Write the function `count_palindromic_substrings(s: str) -> int` to solve the problem.","solution":"def count_palindromic_substrings(s: str) -> int: Count all distinct palindromic substrings of a given string. def is_palindrome(sub): return sub == sub[::-1] palindromic_substrings = set() for i in range(len(s)): for j in range(i, len(s)): substring = s[i:j+1] if is_palindrome(substring): palindromic_substrings.add(substring) return len(palindromic_substrings)"},{"question":"For a given string consisting of lowercase alphabets, you have to perform the following operations: 1. Rotate the string to the left by one position exactly k times. A left rotation operation on a string shifts each character one position to the left and moves the first character to the end of the string. For example, the result of left rotating the string \\"abcde\\" by one position is \\"bcdea\\". 2. Calculate the frequency of each character in the resulting string after the k rotations. You are required to write a program that performs these operations and outputs the frequency of each character contained in the final string. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the length of the string and the number of rotations, respectively. The second line contains a single string of length n, consisting of lowercase English letters. Output Output 26 space-separated integers, where the i-th integer represents the frequency of the (i+97)-th ASCII character (i.e., \'a\' + i) in the resulting string. Examples Input 5 2 abcde Output 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 Input 6 4 aabbcc Output 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0","solution":"def rotate_and_count_freq(n, k, s): Rotates the string to the left by one position exactly k times and returns the frequency of each character in the resulting string. Parameters: n (int): The length of the string. k (int): The number of rotations. s (str): The string to be rotated. Returns: List[int]: List of 26 integers representing the frequencies of each alphabet in the rotated string. k = k % n # Reduce the number of rotations rotated_string = s[k:] + s[:k] # Perform the rotations # Calculate the frequency of each character freq = [0] * 26 for char in rotated_string: freq[ord(char) - ord(\'a\')] += 1 return freq"},{"question":"A coding challenge platform includes a variable-length leaderboard where users compete by solving problems. Each problem has a unique identifier and a set point value. Users\' rankings depend on the total points they have accumulated from the problems they have solved. Your task is to implement a function `rankings` that takes in two inputs: 1. A list of problem identifiers and their corresponding point values. 2. A list of users and the problems they have solved. Return the rankings of users sorted by their accumulated points, with ties broken alphabetically by usernames. Constraints: - The total number of problems and users combined does not exceed 1000. - Problem identifiers, usernames, and point values only contain alphanumeric characters or underscores. - The point value will be a positive integer not exceeding 1000. Input: - An integer N followed by N lines of problem information. Each line contains a string (the problem identifier) and an integer (point value). - An integer M followed by M lines of user information. Each line contains a string (the username) followed by problem identifiers of the problems the user has solved. Output: - Rankings of users by their accumulated points, with ties broken alphabetically by username. Example: Input: ``` 3 problem1 100 problem2 200 problem3 150 2 userA problem1 problem2 userB problem1 problem3 ``` Output: ``` userA 300 userB 250 ``` Input: ``` 2 challenge1 250 challenge2 100 3 user1 challenge1 user2 challenge1 challenge2 user3 ``` Output: ``` user2 350 user1 250 user3 0 ``` Input: ``` 4 task1 50 task2 75 task3 100 task4 25 2 alice task1 task2 task3 bob task2 task4 ``` Output: ``` alice 225 bob 100 ```","solution":"def rankings(problem_data, user_data): # dictionary to store problem point values problem_points = {} for problem in problem_data: identifier, point = problem.split() problem_points[identifier] = int(point) # dictionary to store user scores user_scores = {} for user in user_data: details = user.split() username = details[0] solved_problems = details[1:] score = sum(problem_points[problem] for problem in solved_problems) user_scores[username] = score # sort users first by score descending then by name ascending sorted_users = sorted(user_scores.items(), key=lambda x: (-x[1], x[0])) # format the output result = [] for username, score in sorted_users: result.append(f\\"{username} {score}\\") return result"},{"question":"You are given a string representing a mathematical expression containing integer numbers, the operators + and -, and parentheses. Your task is to evaluate the expression and return the result. Note that the expression provided will always be valid. For example: Input: \\"(-1+(2-3)+(4-5))\\" Output: -3 Input: \\"1 + (2 + 3) - (4 - (5 + 6))\\" Output: 13 Input: \\"- (3 + (2 - 1))\\" Output: -4 Constraints: - The input expression will be at most 1000 characters long. - The expression only contains digits, \'+\', \'-\', parentheses \'(\', \')\' and spaces. - There will be no multiplication \'*\' or division \'/\' operators. Function Signature: `def evaluate_expression(expression: str) -> int:` Input: - A single string expression representing the mathematical formula. Output: - An integer representing the result of the evaluated expression.","solution":"def evaluate_expression(expression: str) -> int: def evaluate(tokens): stack = [] current_number = 0 sign = 1 result = 0 while tokens: token = tokens.pop(0) if token.isdigit(): current_number = (current_number * 10) + int(token) elif token in \\"+-\\": result += sign * current_number current_number = 0 sign = 1 if token == \'+\' else -1 elif token == \'(\': result += sign * evaluate(tokens) current_number = 0 elif token == \')\': result += sign * current_number return result result += sign * current_number return result tokens = list(expression.replace(\' \', \'\')) return evaluate(tokens)"},{"question":"In a video game, a character moves on an 8x8 grid represented by a chessboard. The character can start at any given position and move in any of the eight possible directions: up, down, left, right, and the four diagonals. However, the character can only move exactly one square at a time. Your task is to determine the minimal number of moves required for the character to move from the starting position to the destination position on the grid. Input The input contains two lines. Each line contains the row and column of the character\'s position on the grid. The first line represents the starting position, and the second line represents the destination position. The row and column values are integers between 1 and 8 inclusive. Output Output the minimum number of moves required for the character to reach the destination from the starting position. Examples Input 1 1 8 8 Output 7 Input 2 3 5 5 Output 3 Note The first example shows the character starting at the top-left corner of the grid (1, 1) and moving to the bottom-right corner (8, 8). It will take 7 moves to reach the destination: one move to (2, 2), then (3, 3), and so on, until it reaches (8, 8). The second example shows the character starting at (2, 3) and moving to (5, 5). The minimal path might be (2, 3) → (3, 4) → (4, 5) → (5, 5), requiring only 3 moves.","solution":"def min_moves(start, end): Returns the minimum number of moves required for a character to move from the starting position to the destination position on an 8x8 grid. Parameters: start (tuple): A tuple (r1, c1) representing the starting position. end (tuple): A tuple (r2, c2) representing the destination position. Returns: int: The minimum number of moves required to reach the destination. # Extract row and column for start and end positions r1, c1 = start r2, c2 = end # Calculate the difference in rows and columns row_diff = abs(r2 - r1) col_diff = abs(c2 - c1) # Return the maximum of row_diff and col_diff as the minimum number of moves return max(row_diff, col_diff)"},{"question":"Polycarp has a toy car which he wants to drive from one side of a grid to the other. The grid is represented as an m x n matrix where each cell contains either a 0 or a 1. If a cell contains a 1, it means the cell is blocked, and the car cannot drive through it. If a cell contains a 0, it means the cell is free, and the car can drive through it. The car can only move to the right or down from its current position, and it starts at the top-left corner (1,1) of the grid. It wants to reach the bottom-right corner (m,n) of the grid. Calculate the number of distinct paths from the top-left corner to the bottom-right corner of the grid, such that the car does not drive through any blocked cells. Input The first line of input contains an integer t (1 ≤ t ≤ 50) — the number of test cases. The first line of each test case contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. Each of the next m lines contains n integers (either 0 or 1) separated by spaces, representing the grid. Output For each test case, output a single integer — the number of distinct paths from the top-left corner to the bottom-right corner of the grid. If there is no such path, output 0. Examples Input 3 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 0 1 0 0 0 0 3 3 1 0 0 0 1 0 0 0 0 Output 2 1 0 Explanation In the first test case, there are 2 distinct paths to reach the bottom-right corner: - Right -> Right -> Down -> Down - Down -> Down -> Right -> Right In the second test case, there is only 1 distinct path to reach the bottom-right corner: - Down -> Down -> Right -> Right In the third test case, there is no path due to the initial cell being blocked.","solution":"def num_of_paths(m, n, grid): if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1] def solve(test_cases): results = [] for m, n, grid in test_cases: results.append(num_of_paths(m, n, grid)) return results"},{"question":"Given an array of integers, find the minimum length of a contiguous subarray that sums to a target value X. If no such subarray exists, return 0. A contiguous subarray with a sum equal to X is defined as a subarray that contains one or more adjacent elements whose sum is exactly equal to X. Input: - The first line contains an integer T, the number of test cases. - For each test case, the first line contains two integers: N (the number of elements in the array) and X (the target sum). - The second line contains N space-separated integers, the elements of the array. Output: - For each test case, print a single integer - the minimum length of a contiguous subarray that sums to the target value X. If no such subarray exists, print 0. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - -10^9 ≤ Array elements ≤ 10^9 - -10^9 ≤ X ≤ 10^9 Example: Input: 3 5 11 1 2 3 4 5 7 10 1 2 3 4 5 6 7 4 5 0 -1 2 1 Output: 3 2 2","solution":"def min_subarray_length_with_sum(arr, X): Given an array of integers, find the minimum length of a contiguous subarray that sums to a target value X. If no such subarray exists, return 0. n = len(arr) min_len = float(\'inf\') curr_sum = 0 start = 0 for end in range(n): curr_sum += arr[end] while curr_sum >= X: min_len = min(min_len, end - start + 1) curr_sum -= arr[start] start += 1 return min_len if min_len != float(\'inf\') else 0 def get_min_lengths_for_test_cases(test_cases): Processes multiple test cases and returns a list of minimum lengths for contiguous subarrays that sum to the target value. results = [] for case in test_cases: N, X, array = case result = min_subarray_length_with_sum(array, X) results.append(result) return results"},{"question":"Write a program that takes an integer n and returns the first n numbers in the Fibonacci sequence that are prime. The Fibonacci sequence is defined as: F(1) = 1 F(2) = 1 F(n) = F(n-1) + F(n-2) for n > 2 A prime number is a natural number greater than 1 that has no divisors other than 1 and itself. Input An integer n (1 ≤ n ≤ 1,000). Output The first n prime numbers in the Fibonacci sequence, each on a separate line. If n Fibonacci prime numbers do not exist within the first 10,000 Fibonacci numbers, you should stop and output whatever prime numbers you have found. Sample Input 5 Sample Output 2 3 5 13 89 Explanation The input is 5, meaning that the program should return the first 5 Fibonacci numbers that are prime. Starting from F(1)=1, the program checks each Fibonacci number for primality and outputs it if it is prime.","solution":"def is_prime(number): Returns True if the given number is prime, otherwise False. if number <= 1: return False if number == 2: return True if number % 2 == 0: return False for i in range(3, int(number**0.5) + 1, 2): if number % i == 0: return False return True def fibonacci_primes(n): Returns the first n prime numbers in the Fibonacci sequence. fib_sequence = [1, 1] primes = [] i = 2 max_fib_index = 10000 while len(primes) < n and i < max_fib_index: next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) if is_prime(next_fib): primes.append(next_fib) i += 1 return primes"},{"question":"A company has several projects, each with a specific benefit and completion time. You are tasked with selecting a subset of these projects to maximize the total benefit while ensuring that the total time required does not exceed a given limit. The company provides you with `n` projects. For each project `i`, it takes `t_i` units of time to complete and brings a benefit of `b_i`. You are given the following input: - The first line contains two integers `n` and `T` (1 ≤ n ≤ 100, 1 ≤ T ≤ 10^5), where `n` is the number of projects and `T` is the maximum total time available. - The next `n` lines each contain two integers `t_i` and `b_i` (1 ≤ t_i, b_i ≤ 10^9), representing the time required and the benefit of the `i`-th project. Your task is to compute the maximum total benefit that can be achieved without exceeding the total available time `T`. # Input ``` n T t1 b1 t2 b2 ... tn bn ``` # Output Print one integer: the maximum total benefit that can be achieved. # Example Input ``` 3 50 10 60 20 100 30 120 ``` Output ``` 220 ``` Note: In this example, you can choose the first and third projects to get a maximum total benefit of 220 within the time limit. Input ``` 4 10 5 10 4 40 6 30 3 50 ``` Output ``` 90 ``` Note: In this example, you can choose the second and fourth projects to get a maximum total benefit of 90 within the time limit.","solution":"def maximize_benefit(n, T, projects): dp = [0] * (T + 1) for t, b in projects: for time in range(T, t - 1, -1): dp[time] = max(dp[time], dp[time - t] + b) return dp[T] # Reading input function for the purpose of testing the solution in one go. def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) T = int(data[1]) projects = [] for i in range(n): t = int(data[2 + 2*i]) b = int(data[2 + 2*i + 1]) projects.append((t, b)) return n, T, projects if __name__ == \\"__main__\\": n, T, projects = read_input() print(maximize_benefit(n, T, projects))"},{"question":"Maria loves palindromes and tries to convert every string she gets into a palindrome. A palindrome is a string that reads the same forward and backward. Maria can modify the string by performing the operation: - Select exactly one character in the string and replace it with any other character. Maria would like to know the minimum number of operations required to convert a given string into a palindrome. Input The first line contains an integer n (1 ≤ n ≤ 105) — the length of the string. The second line contains a string s of length n consisting of lowercase Latin letters. Output Print a single integer — the minimum number of operations required to convert the string into a palindrome. Examples Input 3 aba Output 0 Input 5 abcba Output 0 Input 4 abca Output 1 Note In the first and second example, the strings \\"aba\\" and \\"abcba\\" are already palindromes, so no operations are needed. In the third example, you can change \'b\' to \'c\' or \'c\' to \'b\' to make \\"abca\\" a palindrome. Thus, only one operation is required.","solution":"def min_operations_to_palindrome(n, s): Returns the minimum number of operations required to convert a given string into a palindrome. :param n: Length of the string. :param s: The string itself. :return: The minimum number of operations. operations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"You are tasked with managing a carousel on a webpage. The carousel displays several images in a loop, transitioning from one image to the next at regular intervals. You need to determine the starting position of the carousel so that a specific image is displayed first. The carousel is an array of images and it starts at position 0, meaning the first image in the array is displayed initially. Each time, the carousel advances to the next image in the array. When it reaches the end of the array, it loops back to the beginning. Given the total number of images in the carousel and the target image\'s position, write a program to find the initial position of the carousel that will display the target image first. Input - An integer `n` (1 ≤ n ≤ 10^5), representing the total number of images. - An integer `k` (1 ≤ k ≤ n), representing the position of the target image (1-based index). Output - An integer representing the initial position of the carousel (0-based index) that will display the target image first. Examples Input 5 3 Output 2 Input 8 1 Output 0 Note For the first sample, the carousel contains 5 images and the target image is at position 3 (1-based index). To display this image first, the carousel should start at position 2 (0-based index). For the second sample, the carousel contains 8 images and the target image is at position 1 (1-based index). The carousel already starts at this position, so the initial position is 0 (0-based index).","solution":"def find_initial_position(n, k): Determines the initial position of the carousel that will display the target image first. Parameters: n (int): Total number of images. k (int): Position of the target image (1-based index). Returns: int: Initial position of the carousel (0-based index) that will display the target image first. # converting 1-based index to 0-based index return k - 1"},{"question":"Farmer Joe has n cows in a row, each cow facing either left or right. One day, the cows decide that they want to line up so that they are all facing the same direction. Farmer Joe can choose to turn any cow around to face the opposite direction. Each turn has a cost associated with it, given in an array of integers where the i-th integer represents the cost of turning the i-th cow from left to right or vice versa. The goal is to determine the minimum total cost required to make all the cows face the same direction. Input The first line contains the number of cows n (1 ≤ n ≤ 100 000). The second line contains a string of length n consisting of characters \'L\' and \'R\', where \'L\' indicates a cow facing left and \'R\' indicates a cow facing right. The third line contains n integers separated by spaces, where the i-th integer is the cost associated with turning the i-th cow. Output Output a single integer, the minimum total cost required for all the cows to face the same direction. Examples Input 5 LRRRL 1 2 3 4 5 Output 6 Input 3 LLL 3 2 1 Output 0 Note In the first sample, Farmer Joe can turn the first and last cows around to make all cows face right at a cost of 1 + 5 = 6. In the second sample, all cows are already facing the same direction, so the cost is 0.","solution":"def min_cost_to_align_cows(n, directions, costs): Determines the minimum total cost required to make all the cows face the same direction. Parameters: n (int): The number of cows. directions (str): A string where \'L\' indicates a cow facing left and \'R\' indicates a cow facing right. costs (list): A list of integers where the i-th integer is the cost associated with turning the i-th cow. Returns: int: The minimum total cost required for all the cows to face the same direction. cost_to_L = sum(cost for direction, cost in zip(directions, costs) if direction == \'R\') cost_to_R = sum(cost for direction, cost in zip(directions, costs) if direction == \'L\') return min(cost_to_L, cost_to_R)"},{"question":"Aria has been learning about strings and recently encountered the concept of palindromes. Fascinated by the idea, she decided to write a program that checks if a given string is a palindrome or not. However, she also learned about case sensitivity and spaces in strings, which made the task slightly more challenging. Aria wants you to help her by writing a program that: 1. Converts all letters of the input string to lowercase. 2. Ignores all non-alphanumeric characters (including spaces). 3. Checks if the cleaned-up string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Input: The first line contains T, the number of test cases. Followed by T lines, each containing a single string. Output: For every test case, print \\"YES\\" (without quotes) if the string is a palindrome and \\"NO\\" (without quotes) otherwise. Constraints: 1 ≤ T ≤ 1000 1 ≤ length of string ≤ 1000 Author: Aria Baker SAMPLE INPUT 3 A man, a plan, a canal, Panama Hello, World! Madam In Eden, I\'m Adam SAMPLE OUTPUT YES NO YES","solution":"import re def is_palindrome(s): Checks if a given string is a palindrome. # Convert to lowercase s = s.lower() # Remove non-alphanumeric characters s = re.sub(r\'[^a-z0-9]\', \'\', s) # Check if the string is a palindrome return s == s[::-1] def check_palindromes(num_cases, cases): results = [] for i in range(num_cases): results.append(\\"YES\\" if is_palindrome(cases[i]) else \\"NO\\") return results"},{"question":"Explorers Whitfield and Martin have stumbled upon another mystical puzzle, this time involving a magical grid. They discovered a rectangular grid with n rows and m columns, each cell containing a single lowercase Latin letter. The grid has a magical property: the rows or columns can be cyclically rotated, which means that the entire row or column can be shifted one position to the left or right (for rows) or up or down (for columns). Whitfield and Martin need to transform the initial grid to a target grid, using the minimum number of row and column rotations. Your task is to help them achieve this transformation. Input The first line contains two integers n and m, the number of rows and columns in the grid (1 ≤ n, m ≤ 50). The next n lines contain m characters each, representing the initial grid configuration. The following n lines contain m characters each, representing the target grid configuration. Output If it is impossible to transform the initial grid to the target grid using any number of rotations, output a single integer -1. Otherwise, output the minimum number of rotations required to transform the initial grid to the target grid. Examples Input 3 4 abcd efgh ijkl hgfe abdc lkji Output 5 Input 2 2 ab cd ba dc Output 1","solution":"def min_rotations_to_transform(initial_grid, target_grid): def rotate_row_left(grid, row_idx): return grid[:row_idx] + [grid[row_idx][1:] + grid[row_idx][:1]] + grid[row_idx + 1:] def rotate_row_right(grid, row_idx): return grid[:row_idx] + [grid[row_idx][-1:] + grid[row_idx][:-1]] + grid[row_idx + 1:] def rotate_col_up(grid, col_idx): return [grid[(i+1)%n][:col_idx] + [grid[i][col_idx]] + grid[(i+1)%n][col_idx+1:] for i in range(n)] def rotate_col_down(grid, col_idx): return [grid[(i-1)%n][:col_idx] + [grid[i][col_idx]] + grid[(i-1)%n][col_idx+1:] for i in range(n)] n = len(initial_grid) m = len(initial_grid[0]) # To store the minimum number of rotations required to match each cell with target grid min_rotations = dict() for i in range(n): for j in range(m): matched = False for dr in range(n): for dc in range(m): if initial_grid[(i + dr) % n][(j + dc) % m] == target_grid[i][j]: min_rotations[(i, j)] = dr + dc matched = True break if matched: break if not matched: return -1 # If we can\'t match even one cell, return -1 # Since the minimum number of rotations of each cell is stored, we just take the maximum of those total_min_rotations = max(min_rotations.values()) return total_min_rotations"},{"question":"Arjun is playing a game on a 2D grid of size m × n. In this game, there are c special cells scattered across the grid. Arjun starts at the top-left corner of the grid (1, 1) and wants to reach the bottom-right corner of the grid (m, n). However, Arjun can only move right or down at any point in time. He cannot step on any special cell, which are marked on the grid. Your task is to help Arjun find the number of distinct paths from the top-left corner to the bottom-right corner while avoiding the special cells. Input The first line contains three integers m, n, and c (1 ≤ m, n ≤ 100, 0 ≤ c ≤ m * n) — the number of rows, the number of columns, and the number of special cells, respectively. The next c lines contain two integers each, representing the coordinates of special cells (xi, yi) (1 ≤ xi ≤ m, 1 ≤ yi ≤ n). It is guaranteed that the start and end points are not special cells. Output Print a single integer — the total number of distinct paths from the top-left to the bottom-right corner, avoiding the special cells. Examples Input 3 3 1 2 2 Output 2 Input 4 4 3 2 2 3 3 4 2 Output 2 Note In the first example, there are two distinct paths from (1, 1) to (3, 3): - (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) - (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) In the second example, the paths from (1, 1) to (4, 4) avoiding special cells are: - (1, 1) -> (1, 2) -> (1, 3) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4) - (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) -> (3, 4) -> (4, 4)","solution":"def count_paths(m, n, special_cells): Calculates the number of distinct paths from the top-left to the bottom-right corner of an m x n grid without stepping on any special cells. # Initialize grid grid = [[0] * n for _ in range(m)] # Mark special cells for x, y in special_cells: grid[x - 1][y - 1] = -1 # Starting point grid[0][0] = 1 # Dynamic programming to fill the grid for i in range(m): for j in range(n): # Ignore the cell if it is a special cell if grid[i][j] == -1: continue # Add paths from the top cell if we are not on the first row if i > 0 and grid[i - 1][j] != -1: grid[i][j] += grid[i - 1][j] # Add paths from the left cell if we are not on the first column if j > 0 and grid[i][j - 1] != -1: grid[i][j] += grid[i][j - 1] # Result is the bottom-right corner of the grid return grid[m - 1][n - 1] if grid[m - 1][n - 1] != -1 else 0"},{"question":"A valid word is defined as a string that contains no more than `K` different characters. Raju is given a string `S` and an integer `K`. He needs to find the longest substring of `S` that is a valid word. If there are multiple substrings of the same maximum length, return the one that appears first. Input Format The first line contains a string S consisting of lowercase English letters. The second line contains an integer K. Output Format Output the longest valid substring. Constraints 1 ≤ |S| ≤ 10^5 1 ≤ K ≤ 26 Instructions Write modular code. Comment your code properly. SAMPLE INPUT abcba 2 SAMPLE OUTPUT bcb","solution":"def longest_valid_substring(S, K): This function returns the longest substring of S that contains no more than K different characters. If there are multiple substrings of the same maximum length, return the one that appears first. Parameters: S (str): The input string. K (int): The maximum number of different characters allowed in the substring. Returns: str: The longest valid substring. n = len(S) if K == 0: return \\"\\" start = 0 max_len = 0 max_substr = \\"\\" char_count = {} for end in range(n): char_count[S[end]] = char_count.get(S[end], 0) + 1 while len(char_count) > K: char_count[S[start]] -= 1 if char_count[S[start]] == 0: del char_count[S[start]] start += 1 current_len = end - start + 1 if current_len > max_len: max_len = current_len max_substr = S[start:end + 1] return max_substr"},{"question":"Write a function that takes a list of n natural numbers and returns the smallest multiple that is evenly divisible by all of the numbers in the list. Clue: You may need to use the relationship between the Least Common Multiple (LCM) and Greatest Common Divisor (GCD). Input The input consists of a single line containing n space-separated natural numbers. All numbers are between 1 and 100. Output Your program should output the smallest multiple that is evenly divisible by all of the numbers in the input list. Example Input 3 5 7 Output 105","solution":"import math from functools import reduce def lcm(a, b): Function to return the least common multiple of two numbers return a * b // math.gcd(a, b) def smallest_multiple(numbers): Returns the smallest multiple that is evenly divisible by all numbers in the list. return reduce(lcm, numbers)"},{"question":"You are given a string of characters, and your task is to determine the number of distinct substrings it contains. Input The input consists of one single line containing a string s (1 ≤ |s| ≤ 1000). The string s consists of lowercase Latin letters only. Output Output a single integer, the number of distinct substrings in the given string. Example Input abc Output 6 Note The distinct substrings of \\"abc\\" are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". Hence, the number of distinct substrings is 6. Hints Consider using data structures that facilitate efficient substring manipulation, such as suffix arrays or suffix trees.","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings in the given string `s`. n = len(s) substrings = set() # Generate all possible substrings and store in a set to ensure uniqueness for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"In the future society of Grolandia, a new sport named HyperBall has emerged. Each player has a list of unique skill levels, and the objective is to form two equal-sized teams such that the difference in the overall skill levels between the teams is minimized. You are given an array of integers, where each integer represents the skill level of a player. The task is to divide the array into two subsets A and B of equal size such that the absolute difference between the sum of elements in A and the sum of elements in B is minimized. # Input: - An integer n (2 ≤ n ≤ 100), representing the number of players (n is always even). - An array of n integers, skill levels of the players. # Output: - A single integer, the minimum possible absolute difference between the sum of skill levels in the two teams. # Example: Input: ``` 4 1 3 2 4 ``` Output: ``` 0 ``` Explanation: One possible division is [1, 4] and [2, 3]. The sums of these subsets are 5 and 5, respectively. The absolute difference is |5-5| = 0. # Constraints: - The array length n is always even. - Each skill level is a positive integer, and no two skill levels are the same. - Skill levels range from 1 to 1000. # Note: - You may use dynamic programming to find the solution efficiently. - Assume all standard input/output operations as needed. Ensure to handle reading from standard input properly. Implement your solution in Python: ```python def minimum_team_difference(n, skill_levels): # Your solution here pass # Example usage n = int(input()) skill_levels = list(map(int, input().split())) print(minimum_team_difference(n, skill_levels)) ```","solution":"def minimum_team_difference(n, skill_levels): # Calculate the total skill level total_sum = sum(skill_levels) half_sum = total_sum // 2 # Initialize a DP array dp = [0] * (half_sum + 1) for skill in skill_levels: for j in range(half_sum, skill - 1, -1): dp[j] = max(dp[j], dp[j - skill] + skill) # The minimum difference between the two team sums closest_sum = dp[half_sum] team_difference = abs(total_sum - 2 * closest_sum) return team_difference"},{"question":"You are given a string containing only letters \'A\' and \'B\'. You need to remove the minimum number of characters from the string so that no two consecutive characters are the same. Return the minimum number of deletions needed. Input The input contains a single string s (1 ≤ |s| ≤ 10^5) consisting only of characters \'A\' and \'B\'. Output Output a single integer denoting the minimum number of deletions required. Examples Input AABB Output 2 Input ABABAB Output 0 Input AAA Output 2 Input BBBB Output 3 Note In the first example, removing one \'A\' and one \'B\' from \\"AABB\\" results in the string \\"AB\\" or \\"BA\\", both of which have no two consecutive identical characters. So, 2 deletions are required. In the second example, the string \\"ABABAB\\" already doesn\'t have any two consecutive identical characters, so no deletion is required. In the third example, removing two \'A\'s from \\"AAA\\" results in \\"A\\", which has no consecutive identical characters. So, 2 deletions are needed. In the fourth example, removing three \'B\'s from \\"BBBB\\" results in \\"B\\", which has no consecutive identical characters. So, 3 deletions are needed.","solution":"def min_deletions(s): Returns the minimum number of deletions needed so that no two consecutive characters are the same. deletions = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: deletions += 1 return deletions"},{"question":"A unique string is a string in which no character occurs more than once. Given a list of strings, find the string that can be made by concatenating any number of strings from the list (including possibly none), such that the resulting concatenated string is a unique string and has the maximum possible length. Write a function that takes as input a list of strings and returns the length of the longest unique string that can be constructed by concatenating strings from the input list. Function signature: `def maxLength(arr: List[str]) -> int:` # Example: **Input:** arr = [\\"un\\", \\"iq\\", \\"ue\\"] **Output:** 4 **Explanation:** We can concatenate \\"un\\" and \\"iq\\" to get \\"uniq\\", which is a unique string with length 4. **Input:** arr = [\\"cha\\",\\"r\\",\\"act\\",\\"ers\\"] **Output:** 6 **Explanation:** Possible unique strings are \\"chaers\\" and \\"acters\\". The first has length 6. **Input:** arr = [\\"abcdefghijklmnopqrstuvwxyz\\"] **Output:** 26 **Constraints:** - `1 <= arr.length <= 16` - `1 <= arr[i].length <= 26` - All characters in `arr[i]` are lowercase English letters. Your function should work efficiently even for the upper limits of the constraints.","solution":"from typing import List def maxLength(arr: List[str]) -> int: def dfs(start, current): if len(current) != len(set(current)): return 0 max_length = len(current) for i in range(start, len(arr)): max_length = max(max_length, dfs(i + 1, current + arr[i])) return max_length return dfs(0, \\"\\")"},{"question":"You are given a series of words, and you need to organize them in a special manner for Turing\'s English assignment. Each word consists of lowercase English letters only. Your task is to sort the words first by their length in ascending order. If two words have the same length, they should be ordered lexicographically. Constraints: 1 ≤ T ≤ 1000 1 ≤ length of any word ≤ 100 Input: The first line contains an integer T which denotes the number of strings. The next T lines contain one word per line. Output: Print the T words in the required order. Example Input: 5 watson turing is the greatest Example Output: is the turing watson greatest","solution":"def sort_words(words): Sorts a list of words first by their length in ascending order, and then lexicographically if they have the same length. Parameters: words (list): A list of strings, each word containing lowercase English letters only. Returns: list: The sorted list of words. return sorted(words, key=lambda x: (len(x), x))"},{"question":"Tom loves playing with his toy road-building set, where he builds a city with various roads connecting intersections. Each intersection has unique coordinates in a 2D plane. Tom wonders about the shortest distance required to connect all the intersections with roads while ensuring there\'s a direct or indirect route between any pair of intersections. You need to help Tom determine the total length of the shortest possible network of roads that can connect all intersections, considering that each road can only be a straight line between two intersections. # Input The first line contains one integer `n` (1 ≤ n ≤ 1000) — the number of intersections. Each of the next `n` lines contains two integers `x` and `y` (`-10000 ≤ x, y ≤ 10000`) — the coordinates of an intersection. # Output Print one number: the total length of the shortest possible network of roads required to connect all intersections. Your answer should be accurate to at least two decimal places. # Example Input ``` 4 0 0 0 1 1 0 1 1 ``` Output ``` 3.00 ``` # Note In this problem, you should use algorithms related to the Minimum Spanning Tree (MST), specifically, Prim\'s or Kruskal\'s algorithm. The distance between any two intersections (x1, y1) and (x2, y2) is calculated using the Euclidean distance formula. This task requires you to compute the minimum total length of roads required to connect all intersections using the principles of the MST.","solution":"import math from heapq import heappop, heappush def euclidean_distance(x1, y1, x2, y2): return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) def min_road_length(n, intersections): if n <= 1: return 0 adj = {i: [] for i in range(n)} # adjacency list for i in range(n): for j in range(i + 1, n): dist = euclidean_distance(intersections[i][0], intersections[i][1], intersections[j][0], intersections[j][1]) adj[i].append((dist, j)) adj[j].append((dist, i)) visited = [False] * n min_heap = [(0, 0)] # (cost, node) total_length = 0 edges_used = 0 while edges_used < n: cost, node = heappop(min_heap) if visited[node]: continue visited[node] = True total_length += cost edges_used += 1 for next_cost, neighbor in adj[node]: if not visited[neighbor]: heappush(min_heap, (next_cost, neighbor)) return round(total_length, 2) # Example function calls n = 4 intersections = [(0, 0), (0, 1), (1, 0), (1, 1)] print(min_road_length(n, intersections)) # Output: 3.00"},{"question":"A company has a list of projects and employees, where each employee has a unique skill level. The company wants to allocate projects to employees such that each project is assigned to exactly one employee, and all employees have different projects. Each project requires a certain skill level, and an employee can only be assigned to a project if their skill level is at least as high as the project requires. Given the skill levels of employees and the skill requirements of projects, write a function to determine the maximum number of projects that can be successfully assigned to employees. # Input - An integer `n` representing the number of projects and employees (1 ≤ n ≤ 1000). - A list of `n` integers representing the skill levels of employees. - A list of `n` integers representing the skill requirements of projects. # Output - An integer representing the maximum number of projects that can be successfully assigned. # Example Input ``` 5 4 2 3 1 5 3 2 1 5 4 ``` Output ``` 5 ``` Input ``` 4 3 1 4 1 2 3 1 2 ``` Output ``` 3 ```","solution":"def max_projects_assigned(n, employee_skills, project_requirements): Determines the maximum number of projects that can be successfully assigned based on employee skill levels and project skill requirements. Parameters: n (int): The number of projects and employees. employee_skills (list of int): Skill levels of employees. project_requirements (list of int): Skill requirements of projects. Returns: int: The maximum number of projects that can be successfully assigned. # Sort employee skills and project requirements in ascending order employee_skills.sort() project_requirements.sort() # Initialize counters for project assignment i = 0 j = 0 count = 0 # Iterate through employees and projects while i < n and j < n: if employee_skills[i] >= project_requirements[j]: # If the employee\'s skill level meets or exceeds the project requirement, assign the project count += 1 j += 1 # Move to the next project # Move to the next employee i += 1 return count"},{"question":"Given an array A of N integers, write a function to answer Q queries. Each query can be of the following two types: 1. X L R - Replace each element in the segment from index L to R (inclusive) with the integer X. 2. S L R - Return the sum of all elements in the segment from index L to R (inclusive). Your task is to handle these queries efficiently. INPUT: - The first line of input consists of two integers N and Q denoting the number of elements in the array and the number of queries, respectively. - The second line consists of N integers representing the elements of the array A. - The next Q lines represent the queries. Each query will be of the format mentioned above. OUTPUT: - For each query of the second type, output the sum of the specified segment of the array. CONSTRAINTS: 1 ≤ N, Q ≤ 10^5 1 ≤ Ai, X ≤ 10^4 1 ≤ L, R ≤ N SAMPLE INPUT: 5 3 1 2 3 4 5 S 1 3 X 2 4 100 S 1 5 SAMPLE OUTPUT: 6 207 Explanation: - For the first query, the sum of elements from index 1 to 3 is 1+2+3 = 6. - For the second query, elements from index 2 to 4 in the array are replaced with 100. The array becomes [1, 100, 100, 100, 5]. - For the third query, the sum of elements from index 1 to 5 is 1+100+100+100+5 = 306.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.data = data self.tree = [0] * (4 * self.n) self.lazy = [None] * (4 * self.n) self.__build(0, 0, self.n - 1) def __build(self, node, start, end): if start == end: self.tree[node] = self.data[start] else: mid = (start + end) // 2 self.__build(2 * node + 1, start, mid) self.__build(2 * node + 2, mid + 1, end) self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2] def __update_range(self, node, start, end, L, R, val): if self.lazy[node] is not None: self.tree[node] = (end - start + 1) * self.lazy[node] if start != end: self.lazy[2 * node + 1] = self.lazy[node] self.lazy[2 * node + 2] = self.lazy[node] self.lazy[node] = None if start > end or start > R or end < L: return if start >= L and end <= R: self.tree[node] = (end - start + 1) * val if start != end: self.lazy[2 * node + 1] = val self.lazy[2 * node + 2] = val return mid = (start + end) // 2 self.__update_range(2 * node + 1, start, mid, L, R, val) self.__update_range(2 * node + 2, mid + 1, end, L, R, val) self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2] def __query_range(self, node, start, end, L, R): if self.lazy[node] is not None: self.tree[node] = (end - start + 1) * self.lazy[node] if start != end: self.lazy[2 * node + 1] = self.lazy[node] self.lazy[2 * node + 2] = self.lazy[node] self.lazy[node] = None if start > end or start > R or end < L: return 0 if start >= L and end <= R: return self.tree[node] mid = (start + end) // 2 leftSum = self.__query_range(2 * node + 1, start, mid, L, R) rightSum = self.__query_range(2 * node + 2, mid + 1, end, L, R) return leftSum + rightSum def update(self, L, R, val): self.__update_range(0, 0, self.n - 1, L - 1, R - 1, val) def query(self, L, R): return self.__query_range(0, 0, self.n - 1, L - 1, R - 1) def process_queries(N, A, queries): segment_tree = SegmentTree(A) result = [] for query in queries: if query[0] == \'S\': _, L, R = query result.append(segment_tree.query(L, R)) elif query[0] == \'X\': _, L, R, X = query segment_tree.update(L, R, X) return result"},{"question":"Anna has a grid of size MxN consisting of zeros and ones. She wants to determine the longest sequence of consecutive ones in the grid, either horizontally, vertically, or diagonally. Write a program that reads the grid from input and returns the length of the longest sequence of consecutive ones. Constraints: * 1 ≦ M, N ≦ 200 * Each element of the grid is either 0 or 1. Input The input is given from Standard Input in the following format: M N grid[0][0] grid[0][1] ... grid[0][N-1] grid[1][0] grid[1][1] ... grid[1][N-1] : grid[M-1][0] grid[M-1][1] ... grid[M-1][N-1] Output Print the length of the longest sequence of consecutive ones. Example Input 3 4 1 1 0 1 0 1 1 0 1 1 0 1 Output 3","solution":"def longest_consecutive_ones(M, N, grid): def check_direction(x, y, dx, dy): length, max_length = 0, 0 while 0 <= x < M and 0 <= y < N: if grid[x][y] == 1: length += 1 max_length = max(max_length, length) else: length = 0 x += dx y += dy return max_length max_sequence = 0 # Check horizontally and vertically for i in range(M): max_sequence = max(max_sequence, check_direction(i, 0, 0, 1)) # Horizontal for j in range(N): max_sequence = max(max_sequence, check_direction(0, j, 1, 0)) # Vertical # Check both diagonals for i in range(M): max_sequence = max(max_sequence, check_direction(i, 0, 1, 1)) # Main diagonal from left edge max_sequence = max(max_sequence, check_direction(i, 0, 1, -1)) # Anti-diagonal from left edge for j in range(N): max_sequence = max(max_sequence, check_direction(0, j, 1, 1)) # Main diagonal from top edge max_sequence = max(max_sequence, check_direction(0, j, 1, -1)) # Anti-diagonal from top edge return max_sequence # Function to read input, execute the above function, and output result if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() M = int(data[0]) N = int(data[1]) grid = [] index = 2 for i in range(M): grid.append([int(data[index + j]) for j in range(N)]) index += N print(longest_consecutive_ones(M, N, grid))"},{"question":"In a far-off kingdom named Graphland, there is a peculiar forest represented as an undirected graph. The forest consists of `n` nodes (1 through `n`), connected by `m` bidirectional edges. Each edge has an associated magical cost. One day, a grand magician decides to perform a ritual which requires lighting up certain nodes. The nodes to be lit up are called \\"important nodes\\" and their positions within the graph are known. The ritual takes place in such a way that the time it takes to initiate the fire at an important node and propagate the fire to other nodes depends on the magical cost of the edges. The ritual master needs to find out the minimum time required to light up one specific important node from a chosen starting node. Given the initial start node and the important nodes, compute the minimum magical cost to light up the specific important node. Input: The first line contains three integers `n`, `m`, and `k` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000, 1 ≤ k ≤ 50) — the number of nodes, the number of edges, and the number of important nodes respectively. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — representing an edge between nodes `u` and `v` with magical cost `w`. The next k lines contain integers `xi` (1 ≤ xi ≤ n) — the nodes that are considered important. The last line contains two integers `s` and `t` (1 ≤ s, t ≤ n) — the starting node and the target important node, respectively. Output: Print the minimum magical cost to light up node `t` starting from node `s`. Examples: Input: 7 7 3 1 2 4 2 3 3 3 4 2 4 5 6 5 6 5 6 7 1 7 1 8 2 4 7 1 4 Output: 9 Input: 5 4 2 1 2 5 2 3 6 3 4 1 4 5 2 3 5 1 5 Output: 14 Note: In the first example, starting at node 1, the minimum path to light node 4 (which is important) goes through: 1 -> 2 -> 3 -> 4 with a total magical cost of 4 + 3 + 2 = 9. In the second example, starting at node 1, the minimum path to light node 5 (which is important) goes through: 1 -> 2 -> 3 -> 4 -> 5 with a total magical cost of 5 + 6 + 1 + 2 = 14.","solution":"import heapq def minimum_cost_to_light(n, m, k, edges, important_nodes, s, t): Function to find the minimum magical cost to light up node t starting from node s. :param n: Number of nodes :param m: Number of edges :param k: Number of important nodes :param edges: List of edges [u, v, w] :param important_nodes: List of important nodes :param s: Starting node :param t: Target important node :return: Minimum cost to light up t from s # Graph representation graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find the shortest path from s to all nodes def dijkstra(start): min_heap = [(0, start)] # (distance, node) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 while min_heap: current_dist, u = heapq.heappop(min_heap) if current_dist > distances[u]: continue for v, weight in graph[u]: dist = current_dist + weight if dist < distances[v]: distances[v] = dist heapq.heappush(min_heap, (dist, v)) return distances distances_from_s = dijkstra(s) # The minimum cost to reach target important node t from starting node s min_cost = distances_from_s[t] return min_cost"},{"question":"You are given a sorted array of positive integers and a target sum. Determine if there are three distinct elements in the array that add up to the target sum. If such a combination exists, return the elements as a tuple. If no such combination exists, return `None`. Input A sorted array of positive integers and an integer target sum. Output A tuple of three distinct elements from the array that add up to the target sum, or `None` if no such combination exists. Examples Input [1, 2, 3, 4, 5, 6], 10 Output (1, 3, 6) Input [1, 2, 4, 5, 6, 8], 15 Output (1, 6, 8) Input [1, 2, 3, 4, 5, 6], 20 Output None Input [1, 3, 5, 7, 9], 14 Output (1, 5, 8)","solution":"def find_three_numbers(arr, target): Determines if there are three distinct elements in the sorted array that add up to the target sum. Parameters: arr (list): sorted array of positive integers target (int): target sum Returns: tuple: a tuple of three distinct elements that add up to the target, or `None` if no such combination exists. n = len(arr) for i in range(n-2): left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return (arr[i], arr[left], arr[right]) elif current_sum < target: left += 1 else: right -= 1 return None"},{"question":"You have been assigned the task of tracking inventory in a library system. Each transaction of a book being borrowed or returned is recorded with a timestamp. Your goal is to determine the largest number of books checked out at any one time. Specifically, you will be given an array of events, where each event is a tuple of the form `(timestamp, action, book_id)`. The `timestamp` is a positive integer, `action` is either \'borrow\' or \'return\', and `book_id` is a unique identifier for the book. Note that the `timestamp` values are given in non-decreasing order. Write a function `max_books_checked_out(events)` that takes an array of events and returns the maximum number of books that were checked out at the same time. Function Signature: ```python def max_books_checked_out(events: List[Tuple[int, str, int]]) -> int: ``` Input: - `events`: A list of tuples representing the events. Each tuple consists of a timestamp (1 ≤ timestamp ≤ 10^9), an action (\'borrow\' or \'return\'), and a book_id (1 ≤ book_id ≤ 10^6). The events are sorted by timestamp. Output: - Return an integer representing the maximum number of books that were checked out at the same time. Example: Input: ```python events = [ (1, \'borrow\', 101), (2, \'borrow\', 102), (3, \'return\', 101), (4, \'borrow\', 103), (5, \'borrow\', 104), (6, \'return\', 104), (7, \'borrow\', 105) ] ``` Output: ```python 3 ``` Explanation: At timestamp 2, books 101 and 102 are both checked out. At timestamp 4, books 102, 103, and 104 are all checked out. At timestamp 7, books 102, 103, and 105 are all checked out. The maximum number of books checked out at the same time is 3.","solution":"def max_books_checked_out(events): Determines the maximum number of books checked out at the same time. Parameters: events (List[Tuple[int, str, int]]): A list of events where each event is a tuple of (timestamp, action, book_id). Returns: int: The maximum number of books that were checked out at the same time. checked_out_books = set() max_books = 0 for timestamp, action, book_id in events: if action == \'borrow\': checked_out_books.add(book_id) elif action == \'return\': checked_out_books.remove(book_id) max_books = max(max_books, len(checked_out_books)) return max_books"},{"question":"A factory produces widgets, and each widget goes through several processing stages represented by a sequence of operations. You must determine the minimum number of operations required to process a given widget, following certain rules for each stage. Each operation can modify the widget in a specific way, and you can only use predefined operations. Given an integer `n` representing the initial state of the widget and a set of allowed operations, return the minimum number of operations needed to transform `n` into the final desired state of `1`. Allowed operations are: 1. Subtract 1 (i.e., `n = n - 1`) 2. Divide by 2 if the number is even (i.e., `n = n / 2`) 3. Divide by 3 if the number is divisible by 3 (i.e., `n = n / 3`) Input The input consists of several test cases (not more than 10). Each test case is represented by a single line containing a number `n`, where `1 ≤ n ≤ 1,000,000`. Output For each test case, output a single line with the minimum number of operations required to reduce the number to 1. Example Input: 10 15 Output: 3 5 Explanation For the input `10`, the operations sequence can be: 10 → 5 (divide by 2) → 4 (subtract 1) → 2 (divide by 2) → 1 (subtract 1). The total number of operations is 3. For the input `15`, the operations sequence can be: 15 → 5 (divide by 3) → 4 (subtract 1) → 3 (subtract 1) → 1 (divide by 3). The total number of operations is 5.","solution":"from collections import deque def min_operations(n): Returns the minimum number of operations required to transform n into 1. if n == 1: return 0 # Use a dictionary to keep track of the minimum number of operations for each number operations = {n: 0} queue = deque([n]) while queue: current = queue.popleft() # For operations Subtract 1 if current - 1 not in operations: operations[current - 1] = operations[current] + 1 queue.append(current - 1) if current - 1 == 1: return operations[1] # For operations Divide by 2 if current % 2 == 0 and current // 2 not in operations: operations[current // 2] = operations[current] + 1 queue.append(current // 2) if current // 2 == 1: return operations[1] # For operations Divide by 3 if current % 3 == 0 and current // 3 not in operations: operations[current // 3] = operations[current] + 1 queue.append(current // 3) if current // 3 == 1: return operations[1] return operations[1]"},{"question":"There is a grid with N rows and M columns, initially filled with 0. You have to perform Q operations. Each operation is defined by four integers x1, y1, x2, y2. For each operation, you will increment the value of each cell in the subgrid from (x1, y1) to (x2, y2) (inclusive) by 1. After all the operations are performed, print the final state of the grid. Constraints * 1 leq N leq 1000 * 1 leq M leq 1000 * 1 leq Q leq 100000 * 1 leq x1 leq x2 leq N * 1 leq y1 leq y2 leq M Input Input is given from Standard Input in the following format: N M Q x1_1 y1_1 x2_1 y2_1 x1_2 y1_2 x2_2 y2_2 ... x1_Q y1_Q x2_Q y2_Q Output Print the final state of the grid, where each cell in a row is separated by a space and each row is printed on a new line. Example Input 3 3 2 1 1 2 2 2 2 3 3 Output 1 1 0 1 2 1 0 1 1","solution":"def update_grid(N, M, operations): # Initialize the grid with 0s grid = [[0] * M for _ in range(N)] # Iterate through each operation and update the grid for op in operations: x1, y1, x2, y2 = op for i in range(x1-1, x2): for j in range(y1-1, y2): grid[i][j] += 1 # Return the updated grid return grid def print_grid(grid): for row in grid: print(\\" \\".join(map(str, row))) # Function to process the input and call the above functions def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) Q = int(data[2]) operations = [] idx = 3 for _ in range(Q): x1 = int(data[idx]) y1 = int(data[idx+1]) x2 = int(data[idx+2]) y2 = int(data[idx+3]) operations.append((x1, y1, x2, y2)) idx += 4 grid = update_grid(N, M, operations) print_grid(grid)"},{"question":"A parking lot has n parking slots arranged in a line. Each slot is either occupied or empty and cars can only park in empty slots. Given the current state of the parking lot, can you determine the maximum number of cars that can be parked in the empty slots so no two cars are parked next to each other? Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of parking slots. The second line contains a string of length n consisting of characters \'0\' or \'1\'. \'0\' represents an empty slot and \'1\' represents an occupied slot. Output Print the maximum number of cars that can be parked in the empty slots. Examples Input 5 10001 Output 1 Input 10 0000000000 Output 5 Input 8 10101010 Output 0","solution":"def max_cars_parked(n, slots): Returns the maximum number of cars that can be parked in the empty slots so no two cars are parked next to each other. count = 0 i = 0 while i < n: if slots[i] == \'0\': # Check if this slot can be parked if (i == 0 or slots[i-1] == \'0\') and (i == n-1 or slots[i+1] == \'0\'): count += 1 i += 1 # Skip the next slot to avoid parking two cars next to each other i += 1 return count"},{"question":"The city of Altron has recently implemented an advanced recycling initiative and needs your help in developing a software solution. The city plans to build multiple recycling centers, each capable of processing a specific type of recyclable material. The aim is to minimize the total travel distance for workers transporting the recyclables to these centers. The city can be represented as a 2D grid of size n x n. Some cells on this grid contain recycling bins that need to be transported to the centers. Your task is to determine the optimal position for each recycling center such that the total travel distance from the bins to the nearest center is minimized. The travel distance between any two cells (i1, j1) and (i2, j2) is calculated as |i1 - i2| + |j1 - j2|. The input consists of: - An integer n (1 ≤ n ≤ 50) representing the size of the grid. - An integer m (1 ≤ m ≤ 50) representing the number of bins. - A list of m pairs of integers, where each pair (x, y) represents the coordinates (1-based) of a bin on the grid. The output should be a single integer representing the minimum possible total travel distance for the optimal placement of the recycling centers. Input The first line contains two integers n and m. Each of the next m lines contains two integers x and y (1 ≤ x, y ≤ n) representing the coordinates of a recycling bin. Output A single integer representing the minimal total travel distance. Example Input 5 3 1 2 2 4 3 3 Output 4 Explanation In this example, placing recycling centers at (2, 3) and (3, 3) ensures that the total travel distance is minimized to 4: - For the bin at (1, 2), the nearest center is at (2, 3), with a distance of |1-2| + |2-3| = 2. - For the bin at (2, 4), the nearest center is also at (3, 3), with a distance of |2-3| + |4-3| = 2. - For the bin at (3, 3), the nearest center is at (3, 3), with a distance of |3-3| + |3-3| = 0. Total minimal travel distance is 2 + 2 + 0 = 4.","solution":"def minimal_total_travel_distance(n, m, bins): Determines the minimal total travel distance for optimal placement of recycling centers. Parameters: n (int): The size of the grid. m (int): The number of bins. bins (list of tuple): A list of tuples representing the coordinates of the bins. Returns: int: The minimal total travel distance. if m == 1: return 0 x_coords = sorted([x for x, y in bins]) y_coords = sorted([y for x, y in bins]) median_x = x_coords[m // 2] median_y = y_coords[m // 2] total_distance = sum(abs(x - median_x) + abs(y - median_y) for x, y in bins) return total_distance"},{"question":"You are overseeing a warehouse inventory system which tracks the inventory counts of different products. There are n products in the warehouse, and their initial quantities are known. You are required to handle a sequence of q operations, which can either be a query to check the quantity of a product or an operation to update the quantity of some products in bulk. * `1 x` — query the quantity of product x. * `2 c p1 q1 p2 q2 ... pc qc` — restock c different products where pi is the product index and qi is the quantity to be added to product pi. Input The first line of input contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of products and the number of operations, respectively. The next line contains n integers, where the i-th integer is the initial quantity of product i (0 ≤ initial quantity ≤ 1000). Next q lines each describe an operation. Each operation is in one of the two formats described above. It is guaranteed that all indices for products in the operations are valid and that each product index appears at most once in any restock operation. Output For each query of type 1, print the current quantity of the product in a separate line. Examples Input 5 6 10 20 30 40 50 1 3 2 2 1 10 3 5 1 1 2 1 4 20 1 4 1 2 Output 30 20 60 20 Explanation Initially, the quantities are: 1 → 10, 2 → 20, 3 → 30, 4 → 40, 5 → 50 Query quantities of product 3: 30 Restock products 1 and 3: New quantities: 1 → 20, 2 → 20, 3 → 35, 4 → 40, 5 → 50 Query quantities of product 1: 20 Restock product 4: New quantities: 1 → 20, 2 → 20, 3 → 35, 4 → 60, 5 → 50 Query quantities of product 4: 60 Query quantities of product 2: 20","solution":"def warehouse_inventory(n, q, quantities, operations): results = [] # Process each operation for op in operations: parts = list(map(int, op.split())) if parts[0] == 1: # query operation results.append(quantities[parts[1] - 1]) elif parts[0] == 2: # restock operation c = parts[1] for i in range(c): p = parts[2 + 2 * i] - 1 q = parts[3 + 2 * i] quantities[p] += q return results"},{"question":"You are the host for a popular TV quiz show. Each contestant has a set of specialized knowledge categories they know well, and they can choose which questions to answer based on those categories. Your job is to design a program that helps you determine the highest possible score each contestant can achieve based on their selected categories and the corresponding difficulty of the questions. Input The input consists of multiple test cases. Each test case begins with an integer N (1 ≤ N ≤ 10), indicating the number of categories available. The following N lines contain information about the categories in the format: category_name difficulty_score Each difficulty score is a positive integer between 1 and 100, representing the score for answering a question from that category correctly. The next line contains an integer M (1 ≤ M ≤ N), representing the number of categories the contestant is knowledgeable about. The following M lines contain the names of the categories the contestant is knowledgeable about. The last test case is followed by a line containing a zero. Output For each test case, print a line containing the test case number (beginning with 1) followed by the highest possible score the contestant can achieve by answering the questions from their selected categories correctly. Example Input 3 history 50 science 70 geography 60 2 history science 4 math 80 literature 40 art 50 music 30 3 math art music 2 sports 90 politics 60 2 sports politics 0 Output Case 1: 120 Case 2: 160 Case 3: 150","solution":"def calculate_highest_score(test_cases): results = [] for i, (categories, knowledgeable) in enumerate(test_cases): score = sum(categories[category] for category in knowledgeable) results.append(f\\"Case {i + 1}: {score}\\") return results def main(input_data): input_lines = input_data.strip().split(\'n\') index = 0 test_cases = [] while index < len(input_lines): N = int(input_lines[index]) if N == 0: break index += 1 categories = {} for _ in range(N): category_name, difficulty_score = input_lines[index].split() categories[category_name] = int(difficulty_score) index += 1 M = int(input_lines[index]) index += 1 knowledgeable = [] for _ in range(M): knowledgeable.append(input_lines[index]) index += 1 test_cases.append((categories, knowledgeable)) return calculate_highest_score(test_cases)"},{"question":"You are given an array of integers representing the heights of buildings in a straight line. The goal is to calculate the maximum amount of water that can be trapped between the buildings after a rain. Write a program that takes an array of integers as input and outputs the maximum amount of trapped water. # Input Input consists of multiple datasets. Each dataset is a single line of space-separated integers representing the heights of buildings. Each height is a non-negative integer and the length of the array does not exceed 1000. # Output For each dataset, output a single integer representing the maximum amount of trapped water. # Example **Input:** `0 1 0 2 1 0 1 3 2 1 2 1` `4 2 0 3 2 5` **Output:** `6` `9` # Explanation: For the first dataset `[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]`: - At index `1`, no water can be trapped. - At index `2`, `1` unit of water can be trapped between buildings of height `1` and `2`. - At index `4`, `1` unit of water can be trapped. - At index `5`, `2` units of water can be trapped between buildings of height `2` and `1`, with a lower building of height `0` between them. - At index `6`, `1` unit of water can be trapped. - At index `8`, `1` unit of water can be trapped. Total trapped water is `6` units. For the second dataset `[4, 2, 0, 3, 2, 5]`: - Between heights `4` and `3`, `1` unit of water can be trapped. - Between heights `3` and `5`, `2` units of water can be trapped. Total trapped water is `9` units.","solution":"def max_trapped_water(heights): Given a list of integers representing the heights of buildings, calculates the maximum amount of water that can be trapped between them after a rain. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"A perfect binary tree is a type of binary tree in which every internal node has exactly two children and all the leaf nodes are at the same level. Given a perfect binary tree with n levels (1 ≤ n ≤ 15), label each node with a unique integer starting from 1 to the total number of nodes (2^n - 1) such that the labels in the resulting tree represent an in-order traversal of the binary tree. (An in-order traversal is a type of depth-first traversal that visits nodes in the order: left child, root, right child) Your task is to generate the labels for such a tree given the number of levels, n. Input The input consists of a single integer n, the number of levels of the binary tree. Output Print the labels of the nodes in the resulting binary tree in level-order traversal format (nodes at each level, from top to bottom, left to right). Examples Input 3 Output 4 2 6 1 3 5 7 Input 2 Output 2 1 3","solution":"def generate_perfect_binary_tree_labels(n): Generate labels for a perfect binary tree with n levels such that the labels represent an in-order traversal. Params: - n (int): Number of levels in the binary tree. Returns: - List of integers representing node labels in level-order traversal. def inorder_labels(root_index, nodes): Generate in-order labels recursively. Params: - root_index (int): The root index of the current subtree in a perfect binary tree. - nodes (list of int): A list where in-order indices will be stored. if root_index <= len(nodes): left_index = 2 * root_index right_index = 2 * root_index + 1 inorder_labels(left_index, nodes) # Traverse left subtree nodes[root_index - 1] = inorder_labels.current_label # Assign current label to the current root inorder_labels.current_label += 1 # Increment label for the subtree inorder_labels(right_index, nodes) # Traverse right subtree total_nodes = 2**n - 1 nodes = [0] * total_nodes inorder_labels.current_label = 1 # Start labeling from 1 inorder_labels(1, nodes) return nodes"},{"question":"The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. In mathematical terms, the sequence Fn of Fibonacci numbers is defined by the recurrence relation: F(n) = F(n-1) + F(n-2) with seed values F(0) = 0, F(1) = 1. Given a number N, your task is to compute the N-th Fibonacci number. Input The input is given in the following format: N The input consists of one integer N (0 ≤ N ≤ 30). Output Outputs the N-th Fibonacci number on one line. Examples Input 5 Output 5 Input 10 Output 55","solution":"def fibonacci(n): Returns the n-th Fibonacci number. if n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a program that takes as input a string containing comma-separated words and checks if the sequence of words forms a valid sentence. A valid sentence should start with an uppercase letter, have a space after each comma (except no comma or space at the end), and end with a period. Input A single line containing a string with words separated by commas. Each word consists of only letters and has a length between 1 and 20, inclusive. The entire sentence (including commas and spaces) has a length of at most 200 characters. Output Print \\"VALID\\" if the sentence meets all the criteria, otherwise print \\"INVALID\\". Examples Input Hello, world, this, is, an, example. Output VALID Input goodbye,world,see,you,later Output INVALID Input Another,Bad Example, Output INVALID","solution":"def check_valid_sentence(sentence): Checks if the input string forms a valid sentence. # Ensure the first letter is uppercase and ends with a period if not sentence[0].isupper() or not sentence.endswith(\'.\'): return \\"INVALID\\" # Check specific comma and space pattern words = sentence[:-1].split(\', \') # If split doesn\'t match the original length, it means the commas are not followed by spaces properly if len(\', \'.join(words) + \'.\') != len(sentence): return \\"INVALID\\" # Ensure all words are alphabetical and within length constraints for word in words: if not word.isalpha() or not (1 <= len(word) <= 20): return \\"INVALID\\" # Check for overall length if len(sentence) > 200: return \\"INVALID\\" return \\"VALID\\""},{"question":"You are given an integer array `arr` and an integer `k`. Your task is to determine if there are two distinct indices `i` and `j` in the array such that `arr[i] + arr[j] == k`. Constraints * 2 ≤ |arr| ≤ 10^5 * -10^5 ≤ arr[i] ≤ 10^5 * -10^5 ≤ k ≤ 10^5 Input The input is given from Standard Input in the following format: n k arr_1 arr_2 ... arr_n Output If such indices exist, print `YES`. Otherwise, print `NO`. Examples Input 5 9 1 2 3 4 5 Output YES Input 6 10 1 4 45 6 10 8 Output YES Input 6 3 1 1 1 1 1 1 Output NO","solution":"def has_two_sum(arr, k): Determines if there are two distinct indices i and j in the array such that arr[i] + arr[j] == k. :param arr: List of integers :param k: Target integer :return: \\"YES\\" if such indices exist, \\"NO\\" otherwise seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"In a large logistics company, they use a software system to track the delivery of packages. Each package has to pass through several nodes (checkpoints) from its origin to destination. The company wants to ensure the shortest possible delivery time using the Dijkstra\'s algorithm. The company needs your help to implement a simplified version of this system. You are given a list of nodes and the time it takes to travel between each pair of directly connected nodes. Your task is to calculate the minimum travel time from a given starting node to a target node using the Dijkstra\'s algorithm. Input: - The first line contains two integers n and m, representing the number of nodes and the number of edges, respectively (1 ≤ n ≤ 10^4, 1 ≤ m ≤ 50,000). - The next m lines each contain three integers u, v, and w, representing an edge from node u to node v with a travel time of w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000). - The last line contains two integers, s and t (1 ≤ s, t ≤ n) — the starting node and the target node. Output: - Output a single integer, the minimum travel time from node s to node t. If there is no path from s to t, output -1. Example: Input: 5 6 1 2 2 1 3 4 2 3 1 3 4 7 2 5 3 5 4 2 1 4 Output: 7 Note: In the example, the shortest path from node 1 to node 4 can be traced as follows: 1 -> 2 -> 5 -> 4, with a total travel time of 2 + 3 + 2 = 7.","solution":"import heapq from collections import defaultdict def dijkstra(n, edges, start, target): # Create the adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Priority queue to keep track of minimum distances pq = [(0, start)] distances = {node: float(\'inf\') for node in range(1, n + 1)} distances[start] = 0 visited = set() while pq: current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[target] if distances[target] != float(\'inf\') else -1 # Example usage assert dijkstra(5, [(1, 2, 2), (1, 3, 4), (2, 3, 1), (3, 4, 7), (2, 5, 3), (5, 4, 2)], 1, 4) == 7"},{"question":"In a rectangular garden, each plot is planted with different kinds of flowers. The garden is represented as a matrix, where each cell contains an integer that represents the type of flower planted in that plot. Each type of flower is represented by a unique integer. Two plots are considered part of the same region if they contain the same type of flower and they are adjacent either vertically or horizontally. Write a function that takes the matrix representation of the garden and returns the number of distinct flower regions in the garden. Constraints * 1 leq m, n leq 100 * 1 leq flower_type leq 1000 Input * The first line contains two integers, m and n, the dimensions of the garden. * The next m lines each contain n integers, representing the flowers planted in each plot. Output * Print a single integer - the number of distinct flower regions. Examples Input 4 5 1 1 2 2 3 1 2 2 3 3 4 4 4 3 1 4 1 1 5 5 Output 7 Input 2 2 1 1 1 1 Output 1","solution":"def count_flower_regions(garden): This function takes a 2D list representing a garden and returns the number of distinct flower regions. if not garden: return 0 m, n = len(garden), len(garden[0]) visited = [[False] * n for _ in range(m)] def dfs(x, y, flower_type): if x < 0 or y < 0 or x >= m or y >= n: return if garden[x][y] != flower_type or visited[x][y]: return visited[x][y] = True dfs(x + 1, y, flower_type) dfs(x - 1, y, flower_type) dfs(x, y + 1, flower_type) dfs(x, y - 1, flower_type) regions = 0 for i in range(m): for j in range(n): if not visited[i][j]: regions += 1 dfs(i, j, garden[i][j]) return regions # Example usage m, n = 4, 5 garden = [ [1, 1, 2, 2, 3], [1, 2, 2, 3, 3], [4, 4, 4, 3, 1], [4, 1, 1, 5, 5] ] print(count_flower_regions(garden)) # Output: 7"},{"question":"You are given a positive integer n, and you need to find the sum of the diameters of all rooted binary trees with exactly n nodes. A rooted binary tree is a tree where each node has at most two children and there is a designated root node. The diameter of a binary tree is the length of the longest path between any two nodes in the tree. The length of a path is represented by the number of edges in the path. Input A single integer n (1 ≤ n ≤ 100). Output Print a single integer, the sum of the diameters of all possible rooted binary trees with exactly n nodes. Example Input 3 Output 4 Note With 3 nodes, there are 5 possible rooted binary trees: 1. Root(1) → Left(2) → Left(3) (Diameter is 2) 2. Root(1) → Left(2) → Right(3) (Diameter is 2) 3. Root(1) → Right(2) → Left(3) (Diameter is 2) 4. Root(1) → Right(2) → Right(3) (Diameter is 2) 5. Root(2) → Left(1), Right(3) (Diameter is 2) Thus, the sum of the diameters of all these trees is 4.","solution":"def sum_of_diameters(n): Returns the sum of the diameters of all possible rooted binary trees with exactly n nodes. if n < 3: return 0 return (n * (n - 2))"},{"question":"Nina is playing with her dog Rex in a garden where there are several trees. She wants to know for each tree, which is the nearest tree to the right that immediately exceeds it in height. You are given an array of integers representing the heights of trees in the line. For each tree in the array, determine the height of the nearest tree that is taller and on the right side of the given tree. Input The first line contains an integer \'t\' which denotes the number of test cases. 1 ≤ t ≤ 100. Each test case consists of two lines: - The first line contains an integer \'n\' which represents the number of trees. 1 ≤ n ≤ 10^5. - The second line contains \'n\' space-separated integers representing the heights of the trees. 1 ≤ height ≤ 10^9. Output For each test case, output \'n\' space-separated integers representing the height of the nearest taller tree to the right for each tree in the input. If there is no such tree, output -1 for that position. SAMPLE INPUT 2 6 3 1 4 2 5 2 5 6 5 4 3 2 SAMPLE OUTPUT 4 4 5 5 -1 -1 -1 -1 -1 -1 -1 Explanation For the first test case: - The nearest taller tree to the right of the first tree (3) is 4. - The nearest taller tree to the right of the second tree (1) is 4. - The nearest taller tree to the right of the third tree (4) is 5. - The nearest taller tree to the right of the fourth tree (2) is 5. - There are no taller trees to the right of the fifth tree (5). - There are no taller trees to the right of the sixth tree (2). For the second test case: - There are no taller trees to the right of any tree.","solution":"def nearest_taller_tree_to_right(t, test_cases): results = [] for case in test_cases: n, heights = case result = [-1] * n stack = [] for i in range(n - 1, -1, -1): while stack and heights[stack[-1]] <= heights[i]: stack.pop() if stack: result[i] = heights[stack[-1]] stack.append(i) results.append(result) return results"},{"question":"A well-known research lab has installed a new security system to protect their sensitive data. The security system is activated by a unique code which has specific requirements that need to be adhered to. The system accepts a string of alphanumeric characters and then checks if the string is valid according to the following rules: 1. The string must contain at least one uppercase letter. 2. The string must contain at least one lowercase letter. 3. The string must contain at least one digit. 4. The string must not contain any special characters. 5. The string must have a minimum length of 8 characters and a maximum length of 15 characters. Write a function that takes a string and returns \\"Valid\\" if the string meets all the requirements; otherwise, return \\"Invalid\\". Input: A single line containing the string S (1 leq text{length}(S) leq 100) which represents the code security string. Output: Output \\"Valid\\" if the security string meets all the requirements, otherwise output \\"Invalid\\". Examples: Input: Aa1xyz89 Output: Valid Input: aa1xyz89 Output: Invalid Input: A1xyz89 Output: Invalid Input: Aaa1xyz Output: Invalid","solution":"def check_security_code(s): Returns \\"Valid\\" if the string s meets all the requirements: 1. The string must contain at least one uppercase letter. 2. The string must contain at least one lowercase letter. 3. The string must contain at least one digit. 4. The string must not contain any special characters. 5. The string must have a minimum length of 8 characters and a maximum length of 15 characters. Otherwise, it returns \\"Invalid\\". if not (8 <= len(s) <= 15): return \\"Invalid\\" has_upper = any(c.isupper() for c in s) has_lower = any(c.islower() for c in s) has_digit = any(c.isdigit() for c in s) has_special = any(not c.isalnum() for c in s) if has_upper and has_lower and has_digit and not has_special: return \\"Valid\\" return \\"Invalid\\""},{"question":"Given a string S consisting of only lowercase alphabet characters, you need to determine the number of unique characters in the string. Write a function that takes the string as input and outputs the count of unique characters. Constraints: 1 ≤ |S| ≤ 10^6 Input A single line containing the string S. Output A single line containing an integer denoting the number of unique characters in the string. Example Input: hello Output: 4 Explanation The unique characters in \'hello\' are \'h\', \'e\', \'l\', \'o\'. Although \'l\' appears twice, it is counted as one unique character. Therefore, the output is 4.","solution":"def count_unique_characters(s: str) -> int: Returns the number of unique characters in the input string s. Args: s (str): The input string containing only lowercase alphabet characters. Returns: int: The count of unique characters in the input string. return len(set(s))"},{"question":"Problem Jane is an avid hiker and loves exploring the mountains. She has planned a hiking trip where she will walk through various hiking trails. Each trail varies in difficulty, represented by a positive integer. After some thought, she decided she wants to hike in a way that the sum of the difficulties of the trails she chooses is minimized, but at least S, a given threshold difficulty. She can only choose contiguous trails (i.e., a subarray of the available trails). Can you help Jane find the minimum sum of difficulites of such a contiguous subarray that is at least S? # Input The first line contains two integers, N and S, where N is the number of hiking trails and S is the threshold difficulty. The second line contains N integers, representing the difficulty of each trail. Constraints: - 1 ≤ N ≤ 100000 - 1 ≤ difficulty[i] ≤ 10000 - 1 ≤ S ≤ 1000000000 # Output Output a single integer, the minimum sum of difficulties of the contiguous subarray that is at least S. If no such subarray exists, output -1. # Example Input ``` 5 15 1 2 3 4 5 ``` Output ``` 15 ``` Input ``` 7 20 2 1 5 2 8 1 5 ``` Output ``` 21 ``` Input ``` 5 100 1 2 3 4 5 ``` Output ``` -1 ``` # Explanation In the first example, the contiguous subarray [3, 4, 5] has a sum exactly 15, which is the smallest sum fulfilling the condition. In the second example, the subarray [5, 2, 8, 1, 5] has a sum of 21, which is the smallest sum fulfilling the condition. In the third example, no subarray has a sum greater than or equal to 100, so the output is -1.","solution":"def min_difficulty_subarray(N, S, difficulties): Returns the minimum sum of difficulties of a contiguous subarray that is at least S. min_length = float(\'inf\') current_sum = 0 left = 0 for right in range(N): current_sum += difficulties[right] while current_sum >= S: min_length = min(min_length, current_sum) current_sum -= difficulties[left] left += 1 return min_length if min_length != float(\'inf\') else -1 # Example usage: # N, S = map(int, input().split()) # difficulties = list(map(int, input().split())) # print(min_difficulty_subarray(N, S, difficulties))"},{"question":"In an island kingdom, there are n villages connected by a network of roads. Each road directly connects exactly two different villages and has an associated positive length. The kingdom\'s administration wants to ensure that every village is reachable from every other village and that the total length of the roads used is minimized. In other words, they want to determine the minimum possible sum of the lengths of the roads such that there is still a way to travel between any pair of villages using only those roads. You are a developer tasked with solving this problem by determining the total minimum road length needed to connect all villages directly or indirectly. Input The input begins with a single positive integer n (2 ≤ n ≤ 1000), the number of villages. The second line contains a single positive integer m (1 ≤ m ≤ 200000), the number of roads. The following m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n and 1 ≤ w ≤ 10000), indicating that there is a road between villages u and v of length w. Output Print a single integer, the minimum possible total length of the roads required to ensure all villages are reachable from one another. Example Input: 4 5 1 2 4 1 3 3 2 3 2 2 4 3 3 4 5 Output: 9 Explanation: The minimum road network includes the following roads with lengths: (1, 3) of length 3, (2, 3) of length 2, and (2, 4) of length 3. This results in a total length of 3 + 2 + 3 = 8.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) # Path compression return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def minimum_road_length(n, m, roads): uf = UnionFind(n) mst_weight = 0 edges = sorted(roads, key=lambda x: x[2]) for u, v, w in edges: if uf.find(u - 1) != uf.find(v - 1): uf.union(u - 1, v - 1) mst_weight += w return mst_weight"},{"question":"Write a function that takes a list of integers and returns the length of the longest contiguous subarray such that all its elements are distinct. Input A single line containing a list of n (1 ≤ n ≤ 10000) integers (each integer in the list is between -1000000 and 1000000). The list can contain duplicates and negative numbers. Output A single integer representing the length of the longest contiguous subarray with all distinct elements. Examples Input [5, 1, 3, 5, 2, 3, 4, 1] Output 5 Input [-1, -2, -3, -1, -2, -3, -4, -5] Output 5","solution":"def longest_distinct_subarray(arr): Returns the length of the longest contiguous subarray with all distinct elements. n = len(arr) if n == 0: return 0 max_length = 0 start_idx = 0 seen_elements = {} for end_idx in range(n): if arr[end_idx] in seen_elements: start_idx = max(start_idx, seen_elements[arr[end_idx]] + 1) seen_elements[arr[end_idx]] = end_idx max_length = max(max_length, end_idx - start_idx + 1) return max_length"},{"question":"Mercury loves playing card games with her friends. She just came up with a new game where she gives each of her friends a deck of cards, each card labeled with a unique number. The game requires her friends to find out if it is possible to reorder the cards such that the absolute difference between any two adjacent cards is exactly 1. Mercury gives you this challenge in the form of a list of integers representing the cards in the deck. Could you help her find if it\'s possible to reorder the cards as required? # Input The first line contains an integer `t` (1 ≤ `t` ≤ 100) — the number of test cases. Each of the next `t` lines contains: - An integer `n` (2 ≤ `n` ≤ 100) — the number of cards in the current deck, followed by - `n` integers which are the numbers on the cards. # Output For each test case, output \\"YES\\" if it is possible to reorder the cards such that the absolute difference between any two adjacent cards is exactly 1, otherwise output \\"NO\\". # Examples Input ``` 2 3 2 3 4 4 1 3 5 6 ``` Output ``` YES NO ``` Explanation In the first test case, the possible order is [2, 3, 4], as the absolute difference between adjacent cards is 1. In the second test case, it is not possible to reorder the cards to meet the condition since there are gaps that don\'t allow adjacent cards to have an absolute difference of 1.","solution":"def can_reorder_cards(t, test_cases): Determines if each deck of cards can be reordered such that the absolute difference between any two adjacent cards is exactly 1. Parameters: t (int): Number of test cases. test_cases (list): List of tuples, each containing the number of cards and the list of cards. Returns: list: List of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for case in test_cases: n, cards = case cards.sort() is_possible = all(cards[i + 1] - cards[i] == 1 for i in range(n - 1)) results.append(\\"YES\\" if is_possible else \\"NO\\") return results"},{"question":"Given a string of parentheses consisting of characters \'(\', \')\', \'[\', \']\', \'{\', and \'}\', determine if the string consists of a sequence of valid parenthesis pairs. For the sequence to be valid: - Every opening parenthesis must have a corresponding closing parenthesis of the same type. - Parentheses must be closed in the correct order (i.e., open parentheses must be closed in the correct LIFO sequence). Write a function that takes a string as input and returns `True` if the sequence is valid, and `False` otherwise. Function Signature: ```python def is_valid_parenthesis_sequence(s: str) -> bool: pass ``` **Input:** - A single string `s` of length `n` (1 ≤ n ≤ 10^6) consisting of the characters \'(\', \')\', \'[\', \']\', \'{\', and \'}\'. **Output:** - Return `True` if the provided string `s` is a valid parentheses sequence, otherwise return `False`. **Examples:** ```python is_valid_parenthesis_sequence(\\"()\\") ``` Output: ```python True ``` ```python is_valid_parenthesis_sequence(\\"([{}])\\") ``` Output: ```python True ``` ```python is_valid_parenthesis_sequence(\\"({[)]\\") ``` Output: ```python False ``` ```python is_valid_parenthesis_sequence(\\"(()[{}\\") ``` Output: ```python False ``` **Note:** In the first example, the parentheses are properly closed in the correct order. In the second example, the nested parentheses are also properly closed in the correct order. In the third example, the sequence is invalid because the type of one closing parenthesis does not match the opening type. In the fourth example, the sequence is invalid because not all opening parentheses are closed.","solution":"def is_valid_parenthesis_sequence(s: str) -> bool: Returns True if the provided string s is a valid parenthesis sequence, otherwise returns False. stack = [] # Mapping of closing to opening parenthesis parenthesis_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in parenthesis_map.values(): # It\'s an opening parenthesis, push to stack stack.append(char) elif char in parenthesis_map: # It\'s a closing parenthesis if not stack or stack[-1] != parenthesis_map[char]: # No matching opening parenthesis or not the expected one return False stack.pop() # Pop the matching opening parenthesis # If stack is empty, all opening parentheses were matched return len(stack) == 0"},{"question":"In a programming course, Chris is learning about trees and their applications. His instructor has given him a task to generate a tree from a given sequence and then answer some customized queries. The sequence he is provided is based on the parent-child relationships, and queries involve counting the descendants of a particular node. A tree in this context consists of `N` nodes, identified by unique integers from 1 to N. The parent-child relationships define the structure, where each node except the root has exactly one parent. Chris needs help writing a program that performs the following tasks given the sequence of parent-child pairs: 1. Construct the tree. 2. Process a set of queries to count the number of descendants of specified nodes. A descendant of a node is defined as any node that is a child, grandchild, great-grandchild, etc., of that node. Input The input consists of multiple datasets. Each dataset has the following format: N Q u1 v1 u2 v2 ... u(N-1) v(N-1) q1 q2 ... qQ N is the number of nodes in the tree; Q is the number of queries. Each of the next (N-1) lines contains two integers `ui` and `vi`, indicating that `vi` is a child of `ui`. Each of the next Q lines contains an integer `qi`, a node for which the number of descendants needs to be determined. The input meets the following constraints: 1 ≤ N ≤ 10^4, 1 ≤ Q ≤ 10^4, 1 ≤ ui, vi, qi ≤ N; and it is guaranteed that the input will always form a valid tree. The last dataset is followed by a line containing two zeros. This line is not a part of any dataset and should not be processed. Output For each dataset, print Q lines, each containing the number of descendants for the corresponding node in the queries. Example Input 5 3 1 2 1 3 2 4 2 5 1 2 3 4 2 1 2 2 3 2 4 1 2 0 0 Output 4 2 0 3 2","solution":"from collections import defaultdict, deque def calculate_descendants(tree, n): # Function to calculate number of descendants for each node descendants_count = [0] * (n + 1) # DFS to count descendants def dfs(node, parent): count = 0 for child in tree[node]: if child != parent: count += dfs(child, node) + 1 descendants_count[node] = count return count # Consider node 1 as the root node for given problem constraints dfs(1, -1) return descendants_count def process_input(input_data): input_lines = input_data.strip().split(\'n\') index = 0 results = [] while index < len(input_lines): n, q = map(int, input_lines[index].split()) if n == 0 and q == 0: break index += 1 tree = defaultdict(list) for _ in range(n - 1): u, v = map(int, input_lines[index].split()) tree[u].append(v) tree[v].append(u) index += 1 descendants = calculate_descendants(tree, n) for _ in range(q): query = int(input_lines[index]) results.append(str(descendants[query])) index += 1 return \'n\'.join(results) # Example usage, the input needs to be structured as a single string: input_data = 5 3 1 2 1 3 2 4 2 5 1 2 3 4 2 1 2 2 3 2 4 1 2 0 0 print(process_input(input_data))"},{"question":"You are given a tree with n nodes and n-1 edges. Each node has a positive integer id from 1 to n and edges denote the two-way roads between the nodes. The task is to determine the number of nodes at each level, assuming node 1 is at level 0. The level of a node is defined as the number of edges on the shortest path from node 1 to that node. Constraints * 1 ≦ n ≦ 10^5 Input The input is given from Standard Input in the following format: ``` n u1 v1 u2 v2 ... un-1 vn-1 ``` Output Output should consist of multiple lines, where the i-th line contains two integers Li and Ni. Li represents the level number, and Ni represents the number of nodes at that level. The levels should start from 0 and only those levels which have at least one node should be printed. Examples Input ``` 5 1 2 1 3 2 4 3 5 ``` Output ``` 0 1 1 2 2 2 ``` Input ``` 7 1 2 1 3 2 4 3 5 3 6 6 7 ``` Output ``` 0 1 1 2 2 3 3 1 ```","solution":"from collections import deque, defaultdict def compute_levels(n, edges): Computes the number of nodes at each level. Parameters: n (int): Number of nodes. edges (list of tuples): Each tuple represents an edge between two nodes (u, v). Returns: List of tuples: Each tuple contains (level, number of nodes at that level). # Create adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # BFS to determine levels levels = [-1] * (n + 1) # -1 means unvisited levels[1] = 0 # Level of node 1 queue = deque([1]) while queue: node = queue.popleft() current_level = levels[node] for neighbor in adj_list[node]: if levels[neighbor] == -1: levels[neighbor] = current_level + 1 queue.append(neighbor) # Count nodes at each level level_count = defaultdict(int) for level in levels: if level != -1: level_count[level] += 1 # Get sorted levels and counts result = sorted(level_count.items()) return result"},{"question":"Given a string s, return the length of the longest contiguous substring that contains at most two distinct characters. Input: The first line contains the number of test cases T. Each of the next T lines contains a string s. Output: For each test case, output the length of the longest contiguous substring of `s` that contains at most two distinct characters. Constraints: 1 ≤ T ≤ 1000 1 ≤ length of s ≤ 10^5 SAMPLE INPUT 3 eceba ccaabbb aaaaa SAMPLE OUTPUT 3 5 5 Explanation In the first test case, the longest substring with at most two distinct characters is \\"ece\\" which has a length of 3. In the second test case, the longest substring with at most two distinct characters is \\"aabbb\\" which has a length of 5. In the third test case, the whole string \\"aaaaa\\" is the longest substring with at most two distinct characters and its length is 5.","solution":"def length_of_longest_substring_two_distinct(s): Given a string s, return the length of the longest contiguous substring that contains at most two distinct characters. if not s: return 0 n = len(s) left = 0 right = 0 max_len = 0 char_count = {} while right < n: char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(length_of_longest_substring_two_distinct(s)) return results"},{"question":"You are given a string s and an integer k. Print the string s after removing all characters that occur exactly k times. Input The first line of input contains a string s (1 ≤ |s| ≤ 100). The second line contains the integer k (1 ≤ k ≤ 100). Output Output the resulting string after removing all characters that occur exactly k times. Examples Input abcabc 2 Output Input aaabbbccc 1 Output aaabbbccc","solution":"def remove_chars_with_k_occurrences(s, k): Returns the string s after removing all characters that occur exactly k times. :param s: input string :param k: integer :return: modified string from collections import Counter # Count occurrences of each character char_count = Counter(s) # Build the resulting string result = \'\'.join([char for char in s if char_count[char] != k]) return result"},{"question":"You are working on a robot control system for a warehouse. The warehouse is structured as a grid of cells, each with an integer coordinate (x, y). There are several robots in the warehouse, each starting at a specific location on the grid. The robots can receive commands to move in one of four directions: North, South, East, and West. You need to implement a function that processes a list of commands and determines the final position of a robot on the grid. The commands are given as a list of strings, with each string being one of \\"N\\", \\"S\\", \\"E\\", or \\"W\\" representing North, South, East, and West respectively. Each command moves the robot one unit in the corresponding direction. Complete the function `final_position` that takes the starting coordinates of the robot and a list of commands, and returns the final coordinates of the robot. Function signature: ```python def final_position(x: int, y: int, commands: List[str]) -> Tuple[int, int]: ``` # Input The function receives two arguments: 1. `x` (integer): the starting x-coordinate of the robot. 2. `y` (integer): the starting y-coordinate of the robot. And a list of strings `commands` where each element is one of \\"N\\", \\"S\\", \\"E\\", or \\"W\\". # Output The function should return a tuple `(final_x, final_y)` where `final_x` and `final_y` are the final coordinates of the robot after executing all the commands. # Constraints - The length of the `commands` list will be between 0 and 10,000 inclusive. - The initial coordinates (x, y) as well as the final coordinates will be within the range of a 32-bit signed integer. # Example Input ```python x = 0 y = 0 commands = [\\"N\\", \\"E\\", \\"E\\", \\"S\\", \\"W\\"] ``` Output ```python (1, 0) ``` Input ```python x = 5 y = 5 commands = [\\"S\\", \\"S\\", \\"S\\"] ``` Output ```python (5, 2) ``` # Explanation In the first example: - Start at (0, 0) - Move North to (0, 1) - Move East to (1, 1) - Move East to (2, 1) - Move South to (2, 0) - Move West to (1, 0) In the second example: - Start at (5, 5) - Move South to (5, 4) - Move South to (5, 3) - Move South to (5, 2)","solution":"from typing import List, Tuple def final_position(x: int, y: int, commands: List[str]) -> Tuple[int, int]: Returns the final coordinates of the robot after executing given commands. Parameters: x (int): The starting x-coordinate of the robot. y (int): The starting y-coordinate of the robot. commands (List[str]): A list of commands where each command is one of \\"N\\", \\"S\\", \\"E\\", or \\"W\\". Returns: Tuple[int, int]: The final coordinates of the robot. for command in commands: if command == \\"N\\": y += 1 elif command == \\"S\\": y -= 1 elif command == \\"E\\": x += 1 elif command == \\"W\\": x -= 1 return (x, y)"},{"question":"You are tasked with creating a new data processing software that relies heavily on string manipulation. One of the features involves transforming a string based on specific rules. The rule is to find substrings within the string that consist of identical characters and transform them by collapsing them into that single character followed by the count of its occurrences. For example, \\"aaabb\\" would become \\"a3b2\\" and \\"ccccaaa\\" would become \\"c4a3\\". Your task is to implement a function that takes a string (s) as input and outputs the transformed string. Input: - The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. - Each of the next t lines contains a single string s (1 ≤ |s| ≤ 1000) consisting of only lowercase English letters. Output: - For each test case, output the transformed string on a separate line. Examples Input: 3 aaabb ccccaaa xyz Output: a3b2 c4a3 x1y1z1 Explanation: 1. The first input string \\"aaabb\\" is transformed into \\"a3b2\\". 2. The second input string \\"ccccaaa\\" is transformed into \\"c4a3\\". 3. The third input string \\"xyz\\" is transformed into \\"x1y1z1\\".","solution":"def transform_string(s): Transforms a string by collapsing identical consecutive characters into the character followed by the count of its occurrences. Parameters: s (str): The input string to be transformed. Returns: str: The transformed string. if not s: return \\"\\" result = [] current_char = s[0] count = 1 for i in range(1, len(s)): if s[i] == current_char: count += 1 else: result.append(f\\"{current_char}{count}\\") current_char = s[i] count = 1 # Append the last segment result.append(f\\"{current_char}{count}\\") return \'\'.join(result) def process_test_cases(t, test_cases): Processes multiple test cases, applying the transform_string function to each string input. Parameters: t (int): The number of test cases. test_cases (list of str): List of strings to be transformed. Returns: list of str: List of transformed strings for each test case. results = [] for case in test_cases: results.append(transform_string(case)) return results"}]'),S={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},P={class:"search-container"},j={class:"card-container"},F={key:0,class:"empty-state"},Y=["disabled"],z={key:0},C={key:1};function R(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",P,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",j,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+h(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",C,"Loading...")):(n(),i("span",z,"See more"))],8,Y)):l("",!0)])}const L=d(S,[["render",R],["__scopeId","data-v-c276bbc2"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/47.md","filePath":"deepseek/47.md"}'),M={name:"deepseek/47.md"},G=Object.assign(M,{setup(s){return(e,u)=>(n(),i("div",null,[x(L)]))}});export{B as __pageData,G as default};
