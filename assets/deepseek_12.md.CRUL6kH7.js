import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as x,q as v}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,p,a,r){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(k,[["render",E],["__scopeId","data-v-52398a0f"]]),S=JSON.parse('[{"question":"Nikhil is a math enthusiast and loves playing with numbers. One day, he encounters a problem where he has to find the sum of all even numbers up to a certain number \'k\' (inclusive). He needs your help to compute the sums quickly for multiple values of \'k\'. Input The first line consists of a number \'m\' which specifies the number of test cases. 1 ≤ m ≤ 100. \'m\' lines follow with a number \'k\' on each line. \'k\' can have values up to 10^18. 1 ≤ k ≤ 10^18. Output For each test case, output the sum of all even numbers up to \'k\'. SAMPLE INPUT 2 4 10 SAMPLE OUTPUT 6 30 Explanation Sum of all even numbers up to 4 = 2+4 = 6 Sum of all even numbers up to 10 = 2+4+6+8+10 = 30","solution":"def sum_of_evens_up_to_k(k): Computes the sum of all even numbers up to and including k. # Find the largest even number less than or equal to k if k % 2 != 0: k = k - 1 # The largest even number is k, so finding sum of first k/2 even numbers # Sum of first n even numbers is n * (n + 1) n = k // 2 return n * (n + 1) def process_test_cases(m, test_cases): results = [] for k in test_cases: results.append(sum_of_evens_up_to_k(k)) return results"},{"question":"Graphs are data structures that consist of a set of vertices and edges connecting pairs of vertices. They can be used to represent a variety of real-world systems such as social networks, computer networks, biological networks, and more. One fundamental problem in the context of graphs is determining the shortest path between vertices. Given a weighted graph where edges have associated weights, Dijkstra\'s algorithm can be used to find the shortest path from a starting vertex to all other vertices in the graph. The graph is represented by adjacency lists for each vertex, containing pairs of adjacent vertex and edge weight. For a vertex u with adjacent vertex v and edge weight w, the adjacency list will contain the pair (v, w). The pseudocode for Dijkstra\'s algorithm is as follows: 1 Dijkstra(graph, start) 2 for each vertex v in graph.vertices 3 dist[v] = infinity 4 prev[v] = undefined 5 dist[start] = 0 6 Q = graph.vertices 7 8 while Q is not empty 9 u = vertex in Q with min dist[u] 10 remove u from Q 11 12 for each neighbor (v, w) of u 13 alt = dist[u] + w 14 if alt < dist[v] 15 dist[v] = alt 16 prev[v] = u 17 18 return dist, prev Given a weighted undirected graph and a starting vertex, your task is to implement Dijkstra\'s algorithm to find the shortest paths from the starting vertex to all other vertices. Input: - The first line contains two integers n and e, representing the number of vertices and edges in the graph, respectively. (1 leq n leq 1000, 0 leq e leq 10000) - The next e lines each contain three integers u, v, and w indicating an edge between vertices u and v with weight w. (1 leq u, v leq n, 1 leq w leq 1000) - The last line contains an integer s, the starting vertex. (1 leq s leq n) Output: - One line for each vertex v (in ascending order of vertex index) except the starting vertex s, showing the length of the shortest path from s to v. If there is no path from s to v, output \\"INF\\". Example: Input: 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 Output: 2 3 INF 6","solution":"import heapq def dijkstra(n, edges, start): # Create adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Undirected graph # Distance and previous vertex arrays dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[start] = 0 prev = {i: None for i in range(1, n + 1)} # Priority queue to hold the vertices to explore pq = [(0, start)] # (distance, vertex) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: alt = current_dist + weight if alt < dist[v]: dist[v] = alt prev[v] = u heapq.heappush(pq, (alt, v)) result = [] for i in range(1, n + 1): if i != start: result.append(str(dist[i]) if dist[i] != float(\'inf\') else \\"INF\\") return result"},{"question":"Given a string representing a sentence, rearrange the letters of the words in the sentence in alphabetical order. Input Format A single line of input containing a sentence, text{S}. Constraints 0 < text{len(S)} < 1000 The string consists of alphabetic characters and spaces only. Output Format Print the rearranged sentence with each word\'s letters sorted in alphabetical order. Sample Input hello world Sample Output ehllo dlorw","solution":"def rearrange_sentence(sentence): Returns the sentence with each word\'s letters sorted in alphabetical order. words = sentence.split() sorted_words = [\'\'.join(sorted(word)) for word in words] return \' \'.join(sorted_words)"},{"question":"A software company is developing a system to manage their inventory of software packages. Each package has a unique ID, a price, and a list of dependencies. A dependency indicates that a package cannot be installed unless another specific package is also installed. Each package is listed in a JSON-like format with the following keys: - \\"id\\": a unique string identifying the package. - \\"price\\": an integer representing the cost of the package in dollars. - \\"dependencies\\": a list of package IDs that this package depends on. Your task is to determine the total cost of installing a specific package, considering the cost of any packages it depends on directly or indirectly. If a package has multiple dependencies, all must be installed. Input: The first line of the input contains an integer T, denoting the number of test cases. Each test case contains the following: - A single line containing a package ID, identifying the package for which the total installation cost needs to be calculated. - A list of package descriptions. Each description is a JSON-like object as described above. Output: For each test case, print the total cost of installing the specified package and all its dependencies. Constraints: - The number of packages (unique IDs) will be between 1 and 1,000 elements, inclusive. - Packages will not have circular dependencies. - Each \\"price\\" value will be between 1 and 10,000, inclusive. Assume valid input, where all dependencies listed are also present in the given list of packages. SAMPLE INPUT: 2 B [ {\\"id\\": \\"A\\", \\"price\\": 50, \\"dependencies\\": []}, {\\"id\\": \\"B\\", \\"price\\": 30, \\"dependencies\\": [\\"A\\"]}, {\\"id\\": \\"C\\", \\"price\\": 40, \\"dependencies\\": [\\"B\\"]} ] A [ {\\"id\\": \\"A\\", \\"price\\": 50, \\"dependencies\\": []}, {\\"id\\": \\"B\\", \\"price\\": 30, \\"dependencies\\": [\\"A\\"]}, {\\"id\\": \\"C\\", \\"price\\": 40, \\"dependencies\\": [\\"B\\"]} ] SAMPLE OUTPUT: 80 50 Explanation: Test Case #1: To install package \\"B\\", we must first install its dependency \\"A\\". The cost of package \\"A\\" is 50, and the cost of \\"B\\" is 30, making the total installation cost 50+30=80. Test Case #2: To install package \\"A\\" itself, there are no dependencies, so the total installation cost is simply the cost of \\"A\\", which is 50.","solution":"def total_installation_cost(target_id, packages): Calculate the total cost of installing a package including its dependencies. :param target_id: The id of the package to install. :param packages: A list of package descriptions in JSON-like format. :return: The total installation cost. package_map = {pkg[\'id\']: pkg for pkg in packages} def get_cost(pkg_id): pkg = package_map[pkg_id] cost = pkg[\'price\'] for dep_id in pkg[\'dependencies\']: cost += get_cost(dep_id) return cost return get_cost(target_id)"},{"question":"In an enchanted forest, you came across a group of mystical creatures called Elvans who exchange rare magical potions. Each potion has a corresponding magical index represented by an integer. You wish to collect a variety of these potions to increase your magical abilities, but there\'s a catch: you can only collect potions with distinct indices, and you want to collect the maximum possible number of such potions. Input::: The first line of input contains an integer N, denoting the number of potions. The following line contains N space-separated integers representing the magical indices of each potion. Output::: Print the maximum number of potions with distinct magical indices you can collect. Constraints::: 1 ≤ N ≤ 10^6, 1 ≤ Magical Index ≤ 10^9. SAMPLE INPUT 6 4 3 2 4 5 3 SAMPLE OUTPUT 4","solution":"def max_distinct_potions(N, indices): Returns the maximum number of distinct magical indices. Parameters: N : int : number of potions indices : List[int] : list of integers representing magical indices of each potion Returns: int : the maximum number of distinct magical indices distinct_indices = set(indices) return len(distinct_indices)"},{"question":"A company wants to host a meeting where employees are seated around a circular table. Each employee shakes hands with exactly one other employee to form a pair. Determine the maximum number of handshakes that can happen such that no two handshakes cross each other. For example, if there are 4 employees (N=4), there are two possible arrangements for handshakes: (1-2, 3-4) or (1-4, 2-3). If there are 6 employees (N=6), there are 5 possible arrangements for non-crossing handshakes, such as (1-6, 2-5, 3-4). ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the number of employees around the table. ------ Output Format ------ For each test case, print a single integer representing the maximum number of non-crossing handshakes possible. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 100 (N will always be even) ----- Sample Input 1 ------ 3 4 6 8 ----- Sample Output 1 ------ 2 5 14 ----- Explanation 1 ------ Test Case 1: With 4 employees, there are two ways to form pairs like (1-2, 3-4) or (1-4, 2-3), resulting in 2 non-crossing handshakes. Test Case 2: With 6 employees, you can form multiple pairs such as (1-6, 2-5, 3-4), resulting in 5 non-crossing handshakes. Test Case 3: With 8 employees, there are 14 ways to form pairs without crossings. Note: The problem of counting the number of ways to draw non-crossing handshakes for even numbered employees is analogous to finding the nth Catalan number.","solution":"def catalan_number(n): Return the nth Catalan number. This function uses a dynamic programming approach. if n == 0: return 1 dp = [0] * (n + 1) dp[0], dp[1] = 1, 1 for i in range(2, n + 1): for j in range(i): dp[i] += dp[j] * dp[i - j - 1] return dp[n] def max_non_crossing_handshakes(N): Return the maximum number of non-crossing handshakes for N employees. This is the (N/2)th Catalan number. if N % 2 != 0: raise ValueError(\\"N must be even\\") return catalan_number(N // 2) def solve(T, test_cases): results = [] for N in test_cases: results.append(max_non_crossing_handshakes(N)) return results"},{"question":"-----Problem----- You are given an array of integers which represents the heights of buildings in a row. The goal is to determine how much water will be trapped between these buildings after a rain. Each building\'s width is 1 unit. -----Input----- - The first line contains an integer `N`, the number of buildings. - The second line contains N non-negative integers, representing the heights of the buildings in that order. -----Output----- - An integer representing the total amount of water trapped between the buildings. -----Constraints----- - 1 ≤ N ≤ 105 - 0 ≤ Height of buildings ≤ 104 -----Sample Input----- 6 0 1 2 1 0 1 -----Sample Output----- 1 -----Explanation----- The first building height is 0, second is 1, and so on. Water can be trapped between the third and fifth buildings (2 and 0 heights respectively), in a way that the total trapped water is 1 unit.","solution":"def water_trapped(buildings): Returns the total amount of water trapped between the buildings. if not buildings: return 0 left, right = 0, len(buildings) - 1 left_max, right_max = buildings[left], buildings[right] total_water = 0 while left < right: if buildings[left] < buildings[right]: left_max = max(left_max, buildings[left]) total_water += left_max - buildings[left] left += 1 else: right_max = max(right_max, buildings[right]) total_water += right_max - buildings[right] right -= 1 return total_water"},{"question":"You are given an array of `n` integers, where each integer represents the number of apples in a particular basket. An operation consists of choosing a non-empty subset of these baskets and removing exactly `1` apple from each of the chosen baskets. Find the minimum number of operations required to make all baskets empty. Each test case will require calculating the minimum number of operations for a different configuration of baskets. -----Input----- The first line contains a single integer `t` (1 le t le 10^4) — the number of testcases. Then the descriptions of `t` testcases follow. The first line of each testcase contains one integer `n` (1 le n le 1000) — the number of baskets. The second line of each testcase contains `n` integers a_i (1 le a_i le 100), where each a_i is the number of apples in the i-th basket. The total number of baskets over all testcases doesn\'t exceed 10^5. -----Output----- For each testcase, print a single integer — the minimum number of operations required to make all baskets empty. -----Examples----- Input 3 5 1 2 1 3 2 2 5 5 4 7 8 9 10 Output 3 5 10 -----Note----- In the first testcase, you can perform the following operations: 1. Remove 1 apple from baskets 1, 2, 3, 4 and 5. Baskets array becomes [0, 1, 0, 2, 1]. 2. Remove 1 apple from baskets 2, 4 and 5. Baskets array becomes [0, 0, 0, 1, 0]. 3. Remove 1 apple from basket 4. Baskets array becomes [0, 0, 0, 0, 0]. This shows that a minimum of 3 operations is required. In the second testcase, each apple can be removed individually for a total of 5 operations. In the third testcase, each basket contains more apples, so we will require multiple operations summing up to the number of apples in the basket with the most apples, which is 10.","solution":"def min_operations_to_empty_baskets(test_cases): results = [] for baskets in test_cases: max_apples = max(baskets) results.append(max_apples) return results # Function to parse the input and provide output as expected in the problem statement def parse_and_compute(input_data): input_lines = input_data.split(\'n\') t = int(input_lines[0]) index = 1 cases = [] for _ in range(t): n = int(input_lines[index]) baskets = list(map(int, input_lines[index + 1].split())) cases.append(baskets) index += 2 results = min_operations_to_empty_baskets(cases) return \'n\'.join(map(str, results))"},{"question":"Alice is a security manager in a big software company. She is responsible for ensuring that the passwords generated for internal use are secure. According to the guidelines provided, each password must adhere to the following conditions: 1. The password must be at least 8 characters long and at most 20 characters long. 2. It must contain at least one lowercase letter. 3. It must contain at least one uppercase letter. 4. It must contain at least one digit. 5. It must contain at least one special character from the set: {!@#%^&*()_+}. Alice has written a password generator but wants to add a function that validates passwords according to these rules. Help Alice by writing this validation function. Input The input will be a single string s (1 ≤ |s| ≤ 100), representing the password to be validated. Output Print \\"Valid\\" if the password meets all the conditions, otherwise print \\"Invalid\\". Examples Input P@ssw0rd Output Valid Input Password123 Output Invalid Input Short1! Output Invalid Input A1@securePassword Output Valid","solution":"import re def validate_password(s): Validates the password according to the given rules. 1. The password must be at least 8 characters long and at most 20 characters long. 2. It must contain at least one lowercase letter. 3. It must contain at least one uppercase letter. 4. It must contain at least one digit. 5. It must contain at least one special character from the set: {!@#%^&*()_+}. if len(s) < 8 or len(s) > 20: return \\"Invalid\\" if not re.search(r\'[a-z]\', s): return \\"Invalid\\" if not re.search(r\'[A-Z]\', s): return \\"Invalid\\" if not re.search(r\'[0-9]\', s): return \\"Invalid\\" if not re.search(r\'[!@#%^&*()_+]\', s): return \\"Invalid\\" return \\"Valid\\""},{"question":"A small town has a peculiar tradition of building bonfires every weekend. The townsfolk arrange the wood pieces in a particular pattern: they form a number of rectangular blocks where each block can be described by its width, height, and number of wood pieces. At the end of the arrangement, they closely monitor the surroundings of each block because they want to prevent any wood from falling over by ensuring each block has sufficient support. The support mechanism is defined such that: - For each block, its width represents how many wood pieces it spans horizontally. - Each block can sustain itself as long as its height is equal to or less than the minimum number of pieces it has support from directly below it. Given the arrangement of the blocks, determine if all blocks have sufficient support to prevent any wood piece from falling. -----Task----- Given the description of how the wood blocks are arranged, determine if the arrangement is stable without any pieces falling. -----Input----- The first line of the input contains an integer N, the number of blocks. Each of the next N lines contains three integers each: width_i (the width of the i-th block, in wood pieces), height_i (the height of the i-th block, in wood pieces), and number_i (the number of wood pieces that the i-th block contains). -----Constraints----- 1 leq N leq 100 Number of blocks arranged. 1 leq width_i leq 100 Width of each block. 1 leq height_i leq 100 Height of each block. 1 leq number_i leq 10000 Number of wood pieces in each block. -----Output----- A single string \\"Stable\\" if all blocks are sufficiently supported, or \\"Unstable\\" if there is a risk of any block falling. -----Explanation----- Each block is stable if its height does not exceed its minimum support width number of pieces. For example, if you have a block of width 3, height 2, and total of 9 wood pieces, then it needs support from at least 2 x 3 = 6 pieces directly beneath it. -----Examples----- Sample Input 1: 3 3 2 9 2 1 4 5 4 25 Sample Output 1: Stable Sample Input 2: 2 3 3 9 4 2 5 Sample Output 2: Unstable","solution":"def is_stable(arrangement): Determine if the arrangement of blocks is stable. Parameters: arrangement (list of tuples): Each tuple represents (width_i, height_i, number_i). Returns: str: \\"Stable\\" if all blocks are sufficiently supported, \\"Unstable\\" otherwise. for width, height, number in arrangement: if height > number / width: return \\"Unstable\\" return \\"Stable\\" # Wrapper function to handle input and output def check_arrangement(N, blocks): return is_stable(blocks)"},{"question":"We are given a string containing a list of words separated by spaces. We need to group these words based on their sorted character strings. Two words should be in the same group if you can rearrange the characters in one word to get the other word (i.e., they are anagrams). Your task is to return a list of groups where each group is a list of anagrams. Each group should be sorted alphabetically, and the groups should be sorted by the first word in the group in alphabetical order. Example 1: Input: \\"bat tab rat art tar\\" Output: [[\\"bat\\", \\"tab\\"], [\\"art\\", \\"rat\\", \\"tar\\"]] Explanation: We have two groups of anagrams: - \\"bat\\" and \\"tab\\" - \\"art\\", \\"rat\\" and \\"tar\\" Each group is sorted alphabetically and groups are sorted by the first word in the group. Example 2: Input: \\"cider cried apple elppa\\" Output: [[\\"apple\\", \\"elppa\\"], [\\"cider\\", \\"cried\\"]] Explanation: We have two groups of anagrams: - \\"apple\\" and \\"elppa\\" - \\"cider\\" and \\"cried\\" Each group is sorted alphabetically and groups are sorted by the first word in the group. Notes: - The input string may contain up to 1000 words. - Each word may consist of lowercase letters only and have length at most 20. - The output list should not contain any duplicates.","solution":"def group_anagrams(s): Groups words based on their anagrams and sorts the groups and words within each group. Args: s (str): A string containing words separated by spaces Returns: List[List[str]]: A list of lists where each sublist contains anagrams from collections import defaultdict # Split the input string into words words = s.split() # Dictionary to hold our groups based on sorted character strings anagram_groups = defaultdict(list) # Group words by their sorted character strings for word in words: sorted_word = \'\'.join(sorted(word)) anagram_groups[sorted_word].append(word) # List to hold our final groups result = [] # For each group of anagrams, sort the group and add to result for group in anagram_groups.values(): result.append(sorted(group)) # Sort the list of groups by the first word in each group result.sort(key=lambda x: x[0]) return result"},{"question":"You are given an integer array `arr` of length `n` and an integer `k`. Your task is to find and return the length of the shortest contiguous subarray whose sum is greater than or equal to `k`. If no such subarray exists, return `-1`. Write a function `shortest_subarray(arr, k)` that solves this problem. Input - The first line of input contains two space-separated integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9), the length of the array and the value of `k`. - The second line of input contains `n` space-separated integers arr[i] (1 ≤ arr[i] ≤ 10^4), the elements of the array. Output - Print a single integer representing the length of the shortest contiguous subarray whose sum is greater than or equal to `k`. If no such subarray exists, print `-1`. Example Input 10 15 1 2 3 4 5 6 7 8 9 10 Output 2 Note In the example, the subarray `[7, 8]` has a sum of 15. It is the shortest subarray with a sum greater than or equal to 15. Another example could be the subarray `[4,5,6]` having a sum of 15, but it is not the shortest one. Constraints - Consider using a sliding window or two-pointer approach to solve this problem efficiently.","solution":"def shortest_subarray(arr, k): Returns the length of the shortest contiguous subarray whose sum is greater than or equal to k. from collections import deque n = len(arr) prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + arr[i] dq = deque() min_length = float(\'inf\') for i in range(n + 1): while dq and prefix_sums[i] - prefix_sums[dq[0]] >= k: min_length = min(min_length, i - dq.popleft()) while dq and prefix_sums[i] <= prefix_sums[dq[-1]]: dq.pop() dq.append(i) return min_length if min_length != float(\'inf\') else -1"},{"question":"# Task Write a function that accepts a string `s` representing a binary number and an integer `k`. The task is to find and return the maximum binary number you can obtain by performing at most `k` bit flips from \'0\' to \'1\'. If flipping `k` bits is not possible due to the number of \'0\'s being less than `k`, return the binary number after flipping all \'0\'s to \'1\'s. # Example ```python max_binary(\\"010101\\", 2) -> \\"111101\\" max_binary(\\"010101\\", 10) -> \\"111111\\" max_binary(\\"000\\", 1) -> \\"100\\" max_binary(\\"1010101\\", 0) -> \\"1010101\\" ``` # Function Signature ```python def max_binary(s: str, k: int) -> str: pass ``` # Parameters: - `s` (str): A string representing a binary number (1 ≤ len(s) ≤ 10^5). - `k` (int): A non-negative integer representing the maximum number of bit flips (0 ≤ k ≤ 10^5). # Constraints: - The input string `s` will only contain the characters \'0\' and \'1\'. - Ensure the function runs efficiently for the given constraints. # Notes: - Consider the edge case where `k` is `0`, which means no bits can be flipped. - Focus on creating an optimal solution that minimizes time complexity.","solution":"def max_binary(s: str, k: int) -> str: s_list = list(s) flips = 0 for i in range(len(s_list)): if flips >= k: break if s_list[i] == \'0\': s_list[i] = \'1\' flips += 1 return \\"\\".join(s_list)"},{"question":"A social media platform is analyzing the activity patterns of its users. For a particular user, it wants to find the lengths of the consecutive segments of activity or inactivity throughout a day. The data for each user is given as a binary string of length n where each character is either \'A\' (active) or \'I\' (inactive). The goal is to identify the lengths of consecutive \\"A\\" or \\"I\\" segments in the string, in the order they appear. For example, for the string \\"AAAIIIIA\\", the consecutive segments are \\"AAA\\", \\"IIII\\", and \\"A\\", with lengths 3, 4, and 1, respectively. Write a function to process the activity data for multiple users and output the lengths of each consecutive segment for each user. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of users. Each of the next t lines contains a binary string s of length n (1 le n le 100), where each character is either \'A\' or \'I\', representing activity or inactivity, respectively. -----Output----- For each user, print a single line containing the lengths of the consecutive segments in the order they appear in the binary string, separated by spaces. -----Examples----- Input 3 AAAIIIIA AIAIAI AAAAA Output 3 4 1 1 1 1 1 1 1 5 -----Note----- The first test case corresponds to a user with activity pattern \\"AAAIIIIA\\", which has consecutive segments of \\"AAA\\" (3), \\"IIII\\" (4), and \\"A\\" (1), thus the output is \\"3 4 1\\". The second test case corresponds to a user with alternating activity and inactivity \\"AIAIAI\\", thus the output is \\"1 1 1 1 1 1\\". The third test case corresponds to a user with continuous activity \\"AAAAA\\", thus the output is \\"5\\".","solution":"def activity_segments(t, users): For each user, calculate the lengths of the consecutive segments of activity or inactivity. :param t: Number of users :param users: List of binary strings representing activity and inactivity for each user :return: List of strings where each string contains lengths of consecutive segments for each user results = [] for s in users: segments = [] current_segment_length = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_segment_length += 1 else: segments.append(str(current_segment_length)) current_segment_length = 1 segments.append(str(current_segment_length)) results.append(\\" \\".join(segments)) return results # Example usage: # t = 3 # users = [\\"AAAIIIIA\\", \\"AIAIAI\\", \\"AAAAA\\"] # print(activity_segments(t, users)) # Output: [\'3 4 1\', \'1 1 1 1 1 1\', \'5\']"},{"question":"The coding world is filled with various challenges, and one of them is string manipulation. In this problem, you are given a string \'s\' consisting of only lowercase letters and need to perform a special operation on it. Your task is to transform the given string into a new string where each character in the new string is the next character in the English alphabet. If the character is \'z\', it should wrap around to \'a\'. Input The first line contains an integer \'t\' which specifies the number of test cases. 1 ≤ t ≤ 100. Each of the next \'t\' lines contains a string \'s\'. Each string \'s\' has a length of at least 1 and up to 100 characters. Output For each test case, output the transformed string. Example Input: 2 abc xyz Output: bcd yza Explanation In the first test case, \'a\' becomes \'b\', \'b\' becomes \'c\', and \'c\' becomes \'d\'. In the second test case, \'x\' becomes \'y\', \'y\' becomes \'z\', and \'z\' wraps around to \'a\'.","solution":"def transform_string(s): Transforms the input string such that each character is replaced with the next character in the English alphabet. \'z\' wraps around to \'a\'. transformed_chars = [] for char in s: if char == \'z\': transformed_chars.append(\'a\') else: transformed_chars.append(chr(ord(char) + 1)) return \'\'.join(transformed_chars) def process_test_cases(t, cases): results = [] for i in range(t): results.append(transform_string(cases[i])) return results"},{"question":"Given a list of words, you are required to determine the longest word that can be constructed using letters of another word. A word can be constructed when each letter in the word appears in the source word at least as many times as it appears in the original word. Constraints: 1 ≤ source_word length ≤ 100 1 ≤ n ≤ 20 1 ≤ length of any word in list ≤ 100 Input: The first line contains the source word. The second line contains an integer n, the number of words in the list. Each of the next n lines contains a word from the list. Output: Print the longest word that can be constructed using letters of the source word. If there are multiple words with the same longest length, print the one that appears first in the list. SAMPLE INPUT abppplee 5 able ale apple kangaroo bale SAMPLE OUTPUT apple Explanation: The word \'apple\' is the longest word that can be constructed using the source word \'abppplee\'. The letters from the source word can be used to form the word \'apple\', which has the maximum length among the possible words.","solution":"def can_construct(word, source_word): Check if \'word\' can be constructed from \'source_word\' by ensuring each character in \'word\' is present in \'source_word\' with at least the same frequency. from collections import Counter word_count = Counter(word) source_count = Counter(source_word) for char in word_count: if word_count[char] > source_count.get(char, 0): return False return True def find_longest_constructible_word(source_word, words): Return the longest word that can be constructed using letters of \'source_word\'. If there are multiple longest words, return the one that appears first in the list. longest_word = \\"\\" for word in words: if can_construct(word, source_word): if len(word) > len(longest_word): longest_word = word elif len(word) == len(longest_word): longest_word = word # In case of a tie, the first appearing word in the list will naturally be kept return longest_word # Taking input if __name__ == \\"__main__\\": source_word = input().strip() n = int(input().strip()) words = [input().strip() for _ in range(n)] result = find_longest_constructible_word(source_word, words) print(result)"},{"question":"Alice has a sequence of N integers. She wants to partition the sequence into exactly K non-empty contiguous subarrays such that the sum of the maximum and minimum element in each subarray is the same. Can you help Alice to determine if it is possible to do so? ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and K - the length of the sequence and the number of subarrays in which the sequence has to be divided. - The second line of each test case contains N integers - the elements of the sequence. ------ Output Format ------ For each test case, output YES if the sequence can be divided into K subarrays such that the sum of the maximum and minimum element in each subarray is the same. Otherwise, output NO. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ K ≤ N ≤ 10^{5} 1 ≤ a_{i} ≤ 10^{9} (1 ≤ i ≤ N) - Sum of N over all test cases does not exceed 2 cdot 10^{5} ------ Sample Input 1 ------ 3 5 2 1 3 6 3 1 4 2 4 1 1 4 3 3 5 5 5 ------ Sample Output 1 ------ NO YES YES ------ Explanation 1 ------ Test case 1: It can be proven that there is no way to divide the given sequence into 2 subarrays such that the sum of the maximum and minimum element in each subarray is the same. Test case 2: One possible way of dividing the sequence is: [4, 1], [1, 4]. Here the sum of the maximum and minimum element in each subarray is 5. Test case 3: The sequence can be divided into [5], [5], [5]. Here the sum of the maximum and minimum element in each subarray is 10.","solution":"def can_partition_sequence(T, test_cases): Determine if it\'s possible to partition each sequence according to the problem statement. results = [] for t in range(T): N, K = test_cases[t][0] sequence = test_cases[t][1] if K == N: results.append(\\"YES\\") else: # For each possible partition, we need to check the sums of max and min in subarrays unique_sums = set() for i in range(N): subarray_sum = sequence[i] * 2 unique_sums.add(subarray_sum) if len(unique_sums) <= K: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of integers. You need to determine the length of the longest contiguous subarray that has a sum less than or equal to a given integer k. A contiguous subarray is a subset of the array where the elements are consecutive. -----Input----- - The first line contains a single integer n, the number of test cases. n test cases follow. - Each test case consists of two lines: - The first line contains two integers m (the size of the array) and k (the maximum allowable sum of the subarray). - The second line contains m integers, representing the elements of the array. -----Output----- - For each test case, print a single line containing the length of the longest contiguous subarray with a sum less than or equal to k. -----Constraints----- - 1 leq n leq 10^3 - 1 leq m leq 10^5 - 1 leq a_i leq 10^4, where a_i is the i-th element of the array. - 1 leq k leq 10^9 -----Sample Input----- 2 6 15 1 2 3 4 5 6 4 5 4 1 1 1 -----Sample Output----- 5 3 -----Explanation----- - Case 1: The longest subarray with sum <= 15 is [1, 2, 3, 4, 5], which has a length of 5. - Case 2: The longest subarray with sum <= 5 is [1, 1, 1], which has a length of 3.","solution":"def longest_subarray_with_sum_at_most_k(test_cases): results = [] for case in test_cases: m, k = case[0] array = case[1] max_length = 0 current_sum = 0 start = 0 for end in range(m): current_sum += array[end] while current_sum > k: current_sum -= array[start] start += 1 max_length = max(max_length, end - start + 1) results.append(max_length) return results def process_input(input_data): lines = input_data.strip().split(\'n\') n = int(lines[0]) test_cases = [] index = 1 for _ in range(n): m, k = map(int, lines[index].split()) array = list(map(int, lines[index + 1].split())) test_cases.append(((m, k), array)) index += 2 return test_cases"},{"question":"Michael needs to balance his work schedule for an upcoming project. He has a list of tasks with varying durations, and he wants to allocate these tasks into two separate workdays such that the difference in total duration between the two days is minimized. Input The input consists of a single integer N, the number of tasks, followed by N lines, each containing an integer representing the duration of a task. Output Output the minimal difference in the total duration between the two workdays after optimal allocation of the tasks. Constraints: 1 ≤ N ≤ 20 1 ≤ Duration of each task ≤ 500 SAMPLE INPUT 5 2 3 7 4 1 SAMPLE OUTPUT 1 Explanation The optimal allocation of tasks would yield two workdays with durations 7 (1+3+4) and 8 (2+7). The minimal difference is 1.","solution":"def minimize_workday_difference(tasks): Given a list of task durations, allocate them into two workdays such that the difference in total duration between the two days is minimized. Parameters: tasks (list): List of integers where each integer represents the duration of a task. Returns: int: The minimal difference in the total duration between the two workdays after optimal allocation of the tasks. N = len(tasks) total_duration = sum(tasks) # Initialize a DP array to store possible workday totals up to half of total_duration dp = [False] * (total_duration + 1) dp[0] = True for task in tasks: for i in range(total_duration, task - 1, -1): dp[i] = dp[i] or dp[i - task] # Find the most balanced partition by checking from half of the total sum down to zero min_difference = float(\'inf\') for i in range(total_duration // 2 + 1): if dp[i]: min_difference = min(min_difference, abs(total_duration - 2 * i)) return min_difference"},{"question":"A popular music streaming service stores users\' playlists in a database. Each playlist consists of a list of songs represented by unique integer IDs. Your task is to develop a function that simulates the merging of two playlists to create the ultimate playlist while maintaining the order of songs as close to the original playlists as possible. Given two lists of integers `playlist1` and `playlist2`, you need to merge them into one playlist in such a way that the resulting playlist maintains the relative order of songs from both playlists. However, if a song appears in both playlists, it should appear only once in the resulting playlist, where it first appears in `playlist1`. Write a function `merge_playlists(playlist1: List[int], playlist2: List[int]) -> List[int]` to perform this task. Input: - Two lines, each containing a list of unique integers where the first line represents `playlist1` and the second line represents `playlist2`. - The lengths of `playlist1` and `playlist2` are between 1 and 100000, inclusive. - All song IDs in both lists are unique integers between 1 and 1000000, inclusive. Output: - A single line containing the merged playlist. Example: Input: ``` [1, 2, 3, 4] [3, 5, 6] ``` Output: ``` [1, 2, 3, 4, 5, 6] ``` Input: ``` [7, 8, 9] [10, 7, 11] ``` Output: ``` [7, 8, 9, 10, 11] ``` Input: ``` [1, 2, 3] [4, 5, 6] ``` Output: ``` [1, 2, 3, 4, 5, 6] ```","solution":"def merge_playlists(playlist1, playlist2): Merges two playlists maintaining the order of songs while ensuring no duplicates. If a song appears in both playlists, it will be taken from the first occurrence in playlist1. Args: playlist1 (List[int]): The first playlist. playlist2 (List[int]): The second playlist. Returns: List[int]: The merged playlist. # Set to keep track of already added songs seen = set() # Result list to store the merged playlist merged_playlist = [] # Add songs from the first playlist for song in playlist1: if song not in seen: seen.add(song) merged_playlist.append(song) # Add songs from the second playlist for song in playlist2: if song not in seen: seen.add(song) merged_playlist.append(song) return merged_playlist"},{"question":"Given an array of n integers, you need to answer q queries. Each query consists of two integers l and r, and you are required to find the sum of the elements between the l-th and r-th index in the array (both inclusive). The array is 1-indexed. ------ Input Format ------ - The first line contains two integers n and q (1 ≤ n, q ≤ 2*10^5) - the number of elements in the array and the number of queries. - The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9), the elements of the array. - The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) - the indices for each query. ------ Output Format ------ For each query, output the sum of the elements between the indices l and r (both inclusive). ------ Constraints ------ 1 ≤ n, q ≤ 2*10^{5} |a_i| ≤ 10^{9} 1 ≤ l ≤ r ≤ n ------ Sample Input 1 ------ 5 3 1 2 3 4 5 1 3 2 4 1 5 ------ Sample Output 1 ------ 6 9 15 ------ Explanation 1 ------ TestCase 1: The sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. TestCase 2: The sum of elements from index 2 to 4 is 2 + 3 + 4 = 9. TestCase 3: The sum of elements from index 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def preprocess_prefix_sum(arr): Given a list of integers, returns a list where each index i contains the sum of elements from the beginning up to index i of the input list. n = len(arr) prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] return prefix_sum def range_sum_query(prefix_sum, l, r): Given a prefix sum list and indices l and r, returns the sum of elements between the l-th and r-th index (inclusive). return prefix_sum[r] - prefix_sum[l - 1] def process_queries(arr, queries): Given an array and list of queries, returns the results of the sum queries. prefix_sum = preprocess_prefix_sum(arr) return [range_sum_query(prefix_sum, l, r) for l, r in queries]"},{"question":"A new startup company wants to analyze the task completion time of their employees. They track the tasks assigned to each employee by logging the start and end time of task completion. Unfortunately, some tasks overlap in terms of their duration, meaning an employee might be working on multiple tasks at the same time. The company needs to know the total amount of time each employee spends actively working, where overlapping time periods should be counted only once. -----Input----- The first line contains an integer N denoting the number of tasks. Each of the next N lines contains a pair of integers denoting the start and end time of each task, represented as start_i and end_i. -----Output----- Output the total active working time of the employee. -----Constraints----- - 1 ≤ N ≤ 1000 - 0 ≤ start_i < end_i ≤ 10^6 -----Subtasks----- - Subtask #1 (50 points): N ≤ 100 - Subtask #2 (50 points): no additional constraints -----Example----- Input: 3 1 3 2 5 4 6 Output: 5 -----Explanation----- The intervals (1, 3), (2, 5), and (4, 6) overlap, resulting in a total active time from 1 to 6, which is 5 units of time.","solution":"def total_active_time(intervals): Calculate the total active working time of the employee, considering overlapping periods only once. :param intervals: List of tuples where each tuple contains start and end time of a task. :return: Total active working time. if not intervals: return 0 # Sort intervals by start times intervals.sort() merged_intervals = [] current_start, current_end = intervals[0] for start, end in intervals[1:]: if start <= current_end: # Overlapping intervals, merge them current_end = max(current_end, end) else: # Non-overlapping interval, add the previous interval to list and move to the next merged_intervals.append((current_start, current_end)) current_start, current_end = start, end # Add the last interval merged_intervals.append((current_start, current_end)) # Calculate the total duration of the merged intervals total_duration = sum(end - start for start, end in merged_intervals) return total_duration"},{"question":"Meteor showers are shimmering brightly in the night sky, and each of them corresponds to a sequence of integers. You are given two integer sequences `a` and `b` of length `n`. These sequences form the \\"strands\\" of the meteor showers. However, one of the sequences represents the true meteor strand, while the other one has exactly one \\"observational error.\\" Your task is to determine the smallest possible integer position `k` (1-indexed) such that by replacing the k-th element of sequence `a` with the k-th element of sequence `b`, the sequences would become identical. -----Input----- The first line of input contains a positive integer `n` (1 ≤ n ≤ 1000) — the length of each meteor sequence. The second line contains n space-separated integers `a_1, a_2, ..., a_{n}` (1 ≤ a_{i} ≤ 1000) — the sequence `a`. The third line contains n space-separated integers `b_1, b_2, ..., b_{n}` (1 ≤ b_{i} ≤ 1000) — the sequence `b`. -----Output----- Output a single integer `k` (1 ≤ k ≤ n) — the smallest position where the elements in sequences `a` and `b` differ. -----Examples----- Input 5 10 20 30 40 50 10 25 30 40 50 Output 2 Input 4 1 2 3 4 1 2 3 5 Output 4 Input 3 7 8 9 7 8 9 Output 0 -----Note----- In the first example, the second element of sequences `a` and `b` are different (20 in `a` and 25 in `b`). Hence, replacing the second element in `a` with that of `b` would make the sequences identical. In the third example, the sequences `a` and `b` are already identical, so the output is 0 (indicating no replacement needed).","solution":"def find_error_position(n, a, b): Finds the smallest position k where elements in sequences a and b differ. Returns 0 if there are no differences. for k in range(n): if a[k] != b[k]: return k + 1 return 0"},{"question":"You are given a list of integers. You have to determine the maximum product of two different elements in the list. Write a function that takes the list of integers as input and returns the maximum product of any two different elements from that list. Input: The first line of the input contains an integer N, denoting the number of elements in the list. The second line contains N space-separated integers representing the elements of the list. Output: Output contains one line with one integer, representing the maximum product of two different elements in the list. Constraints: 2 ≤ N ≤ 1000 -10^4 ≤ element ≤ 10^4 SAMPLE INPUT 5 1 2 3 4 5 SAMPLE OUTPUT 20 Explanation The maximum product is obtained by multiplying the two largest elements in the list, which are 4 and 5, resulting in 20.","solution":"def max_product_of_two(nums): Returns the maximum product of two different elements in the list nums. if len(nums) < 2: raise ValueError(\\"List must contain at least two elements\\") nums = sorted(nums) # Product of two largest numbers product1 = nums[-1] * nums[-2] # Product of two smallest numbers (in case of large negatives leading to positive product) product2 = nums[0] * nums[1] return max(product1, product2)"},{"question":"You are given a 2D matrix filled with non-negative integers, representing the number of candies in each cell. Starting from the top-left corner, you can only move either right or down at each step until you reach the bottom-right corner. Your task is to determine the maximum number of candies you can collect along the way. You need to write a function that takes as input the matrix `grid`, which is composed of `n` rows and `m` columns, and returns the maximum number of candies that can be collected starting from the top-left corner to the bottom-right corner. Input - The input consists of two integers `n` and `m` (1 le n, m le 500), the dimensions of the matrix. - The next `n` lines contains `m` integers each, representing the number of candies in each cell (0 le text{candies} le 1000). Output - Output a single integer, the maximum number of candies that can be collected. Example **Input** ``` 3 3 1 3 1 1 5 1 4 2 1 ``` **Output** ``` 12 ``` **Explanation** In this example, you can follow the path 1 → 3 → 5 → 2 → 1 to collect a total of 12 candies. Note To solve the problem, consider using dynamic programming techniques where you keep track of the maximum number of candies collected up to each cell. Prioritize cells that can be reached from the top or from the left and compute the optimal path in a bottom-up manner.","solution":"def max_candies(grid): Returns the maximum number of candies that can be collected from the top-left corner to the bottom-right corner of the grid. n = len(grid) m = len(grid[0]) # Create a dp table of the same dimensions as grid to store the maximum candies upto each cell dp = [[0] * m for _ in range(n)] # Initialize the top-left cell dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Calculate the maximum candies for the rest of the cells for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right cell contains the maximum candies collected return dp[n - 1][m - 1]"},{"question":"You are a software engineer working on a project that involves analyzing large amounts of data. One of your tasks is to write a function that aggregates and finds patterns in the data. Given a list of products sold each day and their corresponding sale amounts, you need to find the maximum sale amount of any product during a specified time period. You will be provided with the number of days n for which data is available, followed by n lines, each containing the sale amount for that day. After the sales data, you will get q queries where each query specifies a time period in terms of start and end days. Your task is to determine the maximum sale amount within each specified time period. For example, consider the first sample. If we have sales data for 5 days as [3, 8, 5, 9, 7], the maximum sale amount between day 2 and day 5 is 9. -----Input----- - The first line contains the number of days 1 leq n leq 10^5 of sales data. - Then, n lines follow. Each line i contains a single integer 0 leq text{sale}_i leq 10^9, which represents the sale amount on day i. - The next line contains the number of queries 1 leq q leq 10^5. - Finally, q lines follow. Each line contains two integers 1 leq text{start} leq text{end} leq n representing the start day and end day of the query period (both inclusive). -----Output----- For each query, print the maximum sale amount within the specified time period. -----Examples----- Sample Input 1: 5 3 8 5 9 7 2 1 3 2 5 Sample Output 1: 8 9 Sample Input 2: 6 4 1 6 2 8 3 3 1 4 3 5 1 6 Sample Output 2: 6 8 8","solution":"def find_max_sales(n, sales, queries): Returns a list of maximum sale amounts for each given query period. Parameters: n (int): Number of days of sales data. sales ([int]): List of integers representing the sale amounts per day. queries ([(int, int)]): List of tuples where each tuple represents a query with a start and end day. Returns: [int]: List of maximum sale amounts for each query. results = [] for start, end in queries: max_sale = max(sales[start-1:end]) results.append(max_sale) return results"},{"question":"Given n non-negative integers representing the histogram\'s bar height where the width of each bar is 1, find the area of the largest rectangle in the histogram. Your function should return this maximum area. Example 1: ``` Input: heights = [2,1,5,6,2,3] Output: 10 Explanation: The largest rectangle with area 10 (5×2) is formed by the heights 5 and 6, starting from index 2 to index 3. ``` Example 2: ``` Input: heights = [2,4] Output: 4 Explanation: The largest rectangle with area 4 is formed by the height 4, starting from index 1 to index 1. ``` Constraints: - 1 ≤ heights.length ≤ 10^5 - 0 ≤ heights[i] ≤ 10^4","solution":"def largestRectangleArea(heights): Given n non-negative integers representing the histogram\'s bar height where the width of each bar is 1, find the area of the largest rectangle in the histogram. stack = [] # To maintain indices of the histogram bars max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a program that reverses the words in a given sentence. SAMPLE INPUT \\"The quick brown fox jumps over the lazy dog\\" SAMPLE OUTPUT \\"dog lazy the over jumps fox brown quick The\\"","solution":"def reverse_words(sentence): Reverses the words in a given sentence. sentence: str - A string containing the sentence to be reversed. Returns a new string with the words in reverse order. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Alice and Bob are playing a game on a 2D grid. The grid is defined by n rows and m columns, and it starts with all cells having a value of 0. Each player alternates between Alice and Bob, and they can choose any cell in the grid to place their marker. Alice\'s marker is represented by \'1\' and Bob\'s marker is represented by \'2\'. Once a cell is marked, it cannot be marked again. A scoring condition is met if any 3x3 subgrid within the larger grid contains all markers of either Alice or Bob. Alice wants to maximize her score by completing as many 3x3 subgrids with her markers as possible, while Bob tries to do the same for his markers. The game ends when all cells in the grid are marked. You need to calculate the final score for both Alice and Bob. Input The first line contains two integers, n and m, denoting the number of rows and columns respectively. The next n lines each contain m integers, representing the initial state of the grid (0, 1 for Alice\'s marker, and 2 for Bob\'s marker). All cells initially contain 0. Output Print two integers separated by a space: the final score of Alice and the final score of Bob. Input Constraints 3 ≤ n, m ≤ 100 0 ≤ value in grid ≤ 2 SAMPLE INPUT 4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 SAMPLE OUTPUT 8 0","solution":"def calculate_scores(n, m, grid): alice_score = 0 bob_score = 0 # Define a function to check a 3x3 grid def check_subgrid(x, y): nonlocal alice_score, bob_score alice_count = 0 bob_count = 0 for i in range(x, x+3): for j in range(y, y+3): if grid[i][j] == 1: alice_count += 1 elif grid[i][j] == 2: bob_count += 1 if alice_count == 9: alice_score += 1 elif bob_count == 9: bob_score += 1 # Iterate through each possible 3x3 subgrid for i in range(n-2): for j in range(m-2): check_subgrid(i, j) return alice_score, bob_score"},{"question":"A famous artist wants to encrypt their artwork using a simple cipher system. The cipher works by rotating each character in the artwork\'s title by a fixed number of positions in the alphabet, wrapping around if necessary. The positions to rotate are determined by a given number `k`. For example, with k=3, the letter \'a\' becomes \'d\', \'b\' becomes \'e\', and so on. The rotation is case-sensitive, so \'A\' becomes \'D\', \'B\' becomes \'E\', etc. Non-alphabetic characters should remain unchanged. **Input:** - A single string representing the artwork\'s title (can contain spaces). - An integer `k` (0 <= k <= 25), the number of positions to rotate the characters. **Output:** - The encrypted string after applying the cipher. **Examples:** Input: Hello Artwork 3 Output: Khoor Duwzrun Input: Art is Fun 1 Output: Bsu jt Gvo **Note:** - The input string can contain spaces and punctuation, but only alphabetic characters should be rotated. - No decryption function is required.","solution":"def encrypt_title(title, k): Encrypts the artwork title using a Caesar cipher with a fixed rotation k. Parameters: - title (str): The artwork\'s title to be encrypted. - k (int): The number of positions to rotate characters. Returns: - str: The encrypted title. encrypted_title = [] for char in title: if char.isalpha(): if char.islower(): encrypted_title.append(chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\'))) elif char.isupper(): encrypted_title.append(chr((ord(char) - ord(\'A\') + k) % 26 + ord(\'A\'))) else: encrypted_title.append(char) return \'\'.join(encrypted_title)"},{"question":"Given an array of integers and an integer ( k ), rotate the array to the right by ( k ) steps, where ( k ) is non-negative. Function Description: Complete the function rotateArray in the editor below. rotateArray has the following parameters: - int arr[n]: an array of integers - int k: the number of steps to rotate the array Returns: - int[n]: the rotated array Input Format: The first line contains an integer ( n ), the number of elements in the array. The second line contains ( n ) space-separated integers representing the elements of the array. The third line contains the integer ( k ). Constraints: ( 1 leq n leq 100 ) ( -10^3 leq arr[i] leq 10^3 ) ( 0 leq k leq 100 ) Sample Input 0: 5 1 2 3 4 5 2 Sample Output 0: 4 5 1 2 3 Explanation 0: The array is rotated 2 steps to the right, resulting in the array ([4, 5, 1, 2, 3]). Sample Input 1: 3 7 9 2 1 Sample Output 1: 2 7 9 Explanation 1: The array is rotated 1 step to the right, resulting in the array ([2, 7, 9]).","solution":"def rotateArray(arr, k): Rotates array arr to the right by k steps. :param arr: List of integers to be rotated. :param k: Number of steps to rotate the array. :return: Rotated list of integers. n = len(arr) k = k % n # Ensure k is within the bounds of the array length return arr[-k:] + arr[:-k]"},{"question":"You have been given an array of `n` integers, where the elements are in the range 1 to `n` inclusive except that one of the elements is repeated and one of the elements is missing. Your task is to identify the missing element and the repeated element. Input The first line of input contains a single integer `n` (2 ≤ `n` ≤ 100,000), representing the length of the array. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ n). It is guaranteed that the array contains exactly one repeating element and exactly one missing element. Output Output two integers on a single line: the repeating element and the missing element. Example Input 5 4 3 6 2 2 Output 2 5 Input 4 1 2 2 4 Output 2 3 Note In the first sample, the array should contain the numbers `1, 2, 3, 4, 5`. The number `2` is repeated, and the number `5` is missing. In the second sample, the array should contain the numbers `1, 2, 3, 4`. The number `2` is repeated, and the number `3` is missing.","solution":"def find_missing_and_repeated(numbers): Finds the missing and repeated number in an array of numbers from 1 to n with one missing and one repeated number. Parameters: numbers (list): The list of numbers containing n elements with one number missing and one repeated. Returns: tuple: A tuple containing the repeated number and the missing number. n = len(numbers) # Create a frequency dictionary to count occurrences of each number frequency = {} for number in numbers: if number in frequency: frequency[number] += 1 else: frequency[number] = 1 repeated = missing = None for i in range(1, n+1): if i not in frequency: missing = i elif frequency[i] == 2: repeated = i return repeated, missing"},{"question":"Given a list of strings, your task is to group anagrams together and return the result as a list of lists. Example 1: Input: [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] Example 2: Input: [\\"\\"] Output: [[\\"\\"]] Example 3: Input: [\\"a\\"] Output: [[\\"a\\"]] Your Task: You don\'t need to read or print anything. Your task is to complete the function groupAnagrams() which takes a list of strings as input and returns a list of lists where each sublist contains anagrams. Expected Time Complexity: O(N*K*log(K)), where N is the number of strings and K is the maximum length of any string. Expected Space Complexity: O(N*K), where N is the number of strings and K is the maximum length of any string. Constraints: 1 <= strs.length <= 10^4 0 <= strs[i].length <= 100","solution":"from collections import defaultdict def groupAnagrams(strs): Groups anagrams together from the given list of strings. Args: strs (List[str]): A list of strings. Returns: List[List[str]]: A list of lists where each sublist contains anagrams. anagrams = defaultdict(list) for s in strs: # Sort the string to obtain the key key = \'\'.join(sorted(s)) anagrams[key].append(s) return list(anagrams.values())"},{"question":"Given a sequence of integers, you are to determine the maximum length of any subsequence that can be arranged such that the absolute difference between any two consecutive elements is at most 1. # Input - The first line contains an integer, ( n ) (1 ( leq ) ( n ) ( leq ) ( 10^5 )), the number of elements in the sequence. - The second line contains ( n ) integers ( a_1, a_2, ldots, a_n ) (1 ( leq ) ( a_i ) ( leq ) ( 10^5 )) representing the elements of the sequence. # Output - Print a single integer, the length of the longest subsequence that can be arranged according to the given condition. # Examples **Input** ``` 6 1 2 2 3 1 2 ``` **Output** ``` 5 ``` **Input** ``` 9 4 6 5 3 3 1 5 6 2 ``` **Output** ``` 4 ``` # Note In the first example, the subsequence (1, 2, 2, 2, 1) has a maximum length of 5, where the absolute difference between any consecutive elements is at most 1. In the second example, the subsequence (4, 5, 5, 6) has a maximum length of 4, where the absolute difference between any consecutive elements is at most 1.","solution":"def max_length_subsequence(arr): Finds the maximum length of a subsequence where the absolute difference between any two consecutive elements is at most 1. from collections import Counter counter = Counter(arr) max_length = 0 for num in counter: current_length = counter[num] + counter.get(num + 1, 0) max_length = max(max_length, current_length) return max_length"},{"question":"You have a string s containing lowercase alphabetical characters and at most 10^5 characters long. You are given two integers, m and n. Your task is to determine if you can form a substring of s that can be rearranged to become a palindrome after removing at most m characters and adding at most n characters. A palindrome is a string that reads the same backward as forward. -----Input----- The input consists of a single line containing the string s followed by two space-separated integers m and n (0 leq m, n leq 10^5). -----Output----- Output \\"YES\\" if you can form a substring of s that can be rearranged to become a palindrome after the specified modifications. Otherwise, output \\"NO\\". -----Examples----- Sample Input: abac 1 1 Sample Output: YES Sample Input: abcde 1 1 Sample Output: NO","solution":"from collections import Counter def can_form_palindrome(s, m, n): Determines if a substring of s can be rearranged to become a palindrome after removing at most m characters and adding at most n characters. freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 == 1) # A string can be rearranged into a palindrome if at most # one character has an odd count (for odd length palindrome) or all even (for even length palindrome). if odd_count <= m + 2 * n + 1: return \\"YES\\" else: return \\"NO\\" def solve(input_string): parts = input_string.split() s = parts[0] m = int(parts[1]) n = int(parts[2]) return can_form_palindrome(s, m, n)"},{"question":"Given a string `s` consisting of lowercase English alphabets, find the minimum number of operations needed to make all characters of the string the same. In one operation, you can select any character in the string and change it to any other lowercase English character. **Example 1:** Input: ``` s = \\"aab\\" ``` Output: ``` 1 ``` Explanation: - You can change one \'b\' to \'a\' to make the string \\"aaa\\" which needs 1 operation. **Example 2:** Input: ``` s = \\"abc\\" ``` Output: ``` 2 ``` Explanation: - You can change \'b\' and \'c\' both to \'a\' making the string \\"aaa\\" which needs 2 operations. **Your Task:** - You don\'t need to read input or print anything. Your task is to complete the function `minOperations()` which takes a string `s` as input and returns the minimum number of operations needed to make all characters same. **Expected Time Complexity:** `O(n)`, where `n` is the length of the string. **Expected Auxiliary Space:** `O(1)` **Constraints:** - `1 <= len(s) <= 10^5`","solution":"def minOperations(s): Returns the minimum number of operations needed to make all characters of the string the same. In one operation, you can select any character in the string and change it to any other lowercase English character. Parameters: s (str): string consisting of lowercase English alphabets Returns: int: minimum number of operations # Get the maximum frequency of any character in the string max_freq = max(s.count(char) for char in set(s)) # The minimum operations needed to make all characters the same return len(s) - max_freq"},{"question":"A binary string of length n is a string consisting only of the characters \'0\' and \'1\'. You are given a binary string s of length n. The distance between two characters in a string is defined as the absolute difference of their positions. A group of consecutive \'1\'s in the string is referred to as a cluster. The leftmost \'1\' in a cluster is called the leader of that cluster. You are to assign each cluster its leader\'s position as its identifier, and then create a new string by replacing each \'1\' with the position of its cluster leader. Finally, you need to calculate the sum of distances between every \'1\' and the leader of its cluster across the entire string. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the length of the binary string. The second line contains a binary string s of length n. -----Output----- Print a single integer — the sum of distances between each \'1\' and its cluster leader. -----Examples----- Input 10 1100011000 Output 4 Input 5 10101 Output 0 Input 6 111111 Output 15 -----Note----- In the first example, the binary string has 3 clusters: [1, 2] (leader at 1), [5] (leader at 5), [7, 8] (leader at 7). For the first cluster, the distance sum is 0 + 1 = 1. For the second cluster, the distance sum is 0. For the third cluster, the distance sum is 0 + 1 = 1. Therefore, the total sum is 2. In the second example, there are no clusters with more than one \'1\', so the output is 0. In the third example, there is one cluster with all \'1\'s from 1 to 6. The sum of distances between each position and the leader at 1 is 0 + 1 + 2 + 3 + 4 + 5 = 15.","solution":"def sum_of_distances(n, s): sum_distances = 0 cluster_start = None for i in range(n): if s[i] == \'1\': if cluster_start is None: cluster_start = i sum_distances += i - cluster_start else: cluster_start = None return sum_distances"},{"question":"Given a list of integers, write a function `find_missing_number(lst)` that finds the missing number in a sequence. The sequence contains all integers from 1 to n with one integer missing. The input list `lst` has a length of n-1 and the sum of the missing number should be returned. The function should return the missing integer while considering performance efficiency for larger sequences. The function signature is: ```python def find_missing_number(lst: List[int]) -> int: ``` Here\'s what your function should handle: ```python find_missing_number([1, 2, 3, 5]) ------> 4 find_missing_number([1, 2, 4, 5, 6]) ------> 3 find_missing_number([3, 7, 1, 2, 8, 5, 6]) ------> 4 ``` The sequence will always have at least one number and the maximum number will be limited to fit within a typical integer range. The sequence is guaranteed to be of length at least 1 and will be missing exactly one number from 1 to n.","solution":"from typing import List def find_missing_number(lst: List[int]) -> int: Given a list of integers from 1 to n with one integer missing, finds the missing integer. n = len(lst) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(lst) missing_number = total_sum - actual_sum return missing_number"},{"question":"Implement a function that takes two strings str1 and str2 and returns the length of their longest common subsequence. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively. For example, \\"abc\\", \\"abg\\", \\"bdf\\", \\"aeg\\", \\"acefg\\", .. etc are subsequences of \\"abcdefg\\". So a string of length n has 2^n different possible subsequences. The problem has two strings, let\'s call them str1 and str2, and you need to find the length of their longest common subsequence (LCS). For example, if str1 = \\"abcdef\\" and str2 = \\"abdf\\", the LCS will be \\"abdf\\", and the length of the LCS will be 4. The function signature should look like: ``` int longestCommonSubsequence(String str1, String str2) ``` # Input - Two strings str1 and str2. Their lengths do not exceed 1000. # Output - Return an integer representing the length of the longest common subsequence between the given strings. # Example ``` Input: str1 = \\"abcde\\" str2 = \\"ace\\" Output: 3 (The longest common subsequence is \\"ace\\" which has length 3) Input: str1 = \\"abc\\" str2 = \\"abc\\" Output: 3 (The longest common subsequence is \\"abc\\" which has length 3) Input: str1 = \\"abc\\" str2 = \\"def\\" Output: 0 (There is no common subsequence, so the length is 0) ```","solution":"def longestCommonSubsequence(str1, str2): Returns the length of the longest common subsequence of str1 and str2. n = len(str1) m = len(str2) # Create a 2D array to store lengths of longest common subsequence dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill the dp array for i in range(1, n + 1): for j in range(1, m + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"Given an array of integers, arr[], write a function to find the length of the longest contiguous subsequence such that every element in the subsequence is unique. Example 1: Input: arr = [1, 2, 2, 3, 4, 4] Output: 3 Explanation: The longest contiguous subsequence with unique elements is [2, 3, 4] with length 3. Example 2: Input: arr = [1, 2, 3, 4, 5] Output: 5 Explanation: The entire array consists of unique elements, so the longest contiguous subsequence is the whole array itself. Example 3: Input: arr = [5, 5, 5, 5, 5] Output: 1 Explanation: Each element is repeated, so the longest contiguous subsequence with unique elements is any single element with length 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestUniqueSubst() which takes the array arr as input and returns the length of the longest contiguous subsequence with unique elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(K) where K is the number of distinct elements in arr. Constraints: 1 <= N <= 10^5 1 <= arr[i] <= 10^5","solution":"def longestUniqueSubst(arr): Returns the length of the longest contiguous subsequence with unique elements. last_index = {} max_length = 0 start = 0 for i in range(len(arr)): if arr[i] in last_index: start = max(start, last_index[arr[i]] + 1) last_index[arr[i]] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"Anna is an enthusiastic software developer and enjoys creating puzzles for her friends. She recently came up with a challenge involving lists and numerical patterns and needs your help to validate the solutions provided by her friends. Task Create a function that takes a list of integers and determines whether it represents a \\"mountain array\\". According to Anna\'s definition, a list is a \\"mountain array\\" if: 1. It has at least three elements. 2. There exists some index `i` (0 < i < len(list) - 1) such that: - list[0] < list[1] < ... < list[i] - list[i] > list[i+1] > ... > list[len(list) - 1] Return `true` if the array is a \\"mountain array\\" and `false` otherwise. Examples ```python is_mountain_array([2, 1]) # false, because the array has less than three elements is_mountain_array([3, 5, 5]) # false, because the array does not strictly increase then decrease is_mountain_array([0, 3, 2, 1]) # true, the array increases then decreases is_mountain_array([0, 2, 3, 4, 5, 2, 1, 0]) # true, the array increases then decreases ``` Make sure your function handles edge cases such as small arrays or arrays with repeated values correctly.","solution":"def is_mountain_array(arr): Determine if the given list of integers is a mountain array. Parameters: arr (List[int]): The list of integers to check. Returns: bool: True if the list is a mountain array, False otherwise. n = len(arr) if n < 3: return False i = 0 # walk up while i + 1 < n and arr[i] < arr[i + 1]: i += 1 # peak can\'t be first or last if i == 0 or i == n - 1: return False # walk down while i + 1 < n and arr[i] > arr[i + 1]: i += 1 return i == n - 1"},{"question":"You are helping a librarian in a small town to catalog books. Each book in the library has a classification code represented as a string. The librarian wants to find an optimal way to merge two sequences of book classifications. Your task is to determine the length of the shortest sequence that contains both sequences as subsequences. A subsequence of a sequence is a sequence that can be derived by deleting some or no elements of the sequence without changing the order of the remaining elements. For example, \\"abc\\", \\"abg\\", \\"bdf\\" are subsequences of \\"abcdefg\\", but \\"gba\\", \\"acb\\" are not. -----Input----- Each task is described on a single line that contains two strings s1 and s2 separated by a space. The strings contain only lowercase letters. The length of each string is at most 2000. -----Output----- Output one line with the length of the shortest sequence that contains both s1 and s2 as subsequences. -----Note----- In the first sample input, the shortest sequence that contains both \'abc\' and \'bcd\' as subsequences is \'abcd\'. Its length is 4. In the second sample input, the shortest sequence that contains both \'abc\' and \'def\' is \'abcdef\'. Its length is 6. -----Examples----- Sample Input: abc bcd Sample Output: 4 Sample Input: abc def Sample Output: 6","solution":"def shortest_common_supersequence_length(s1, s2): Determine the length of the shortest sequence that contains both sequences as subsequences. m = len(s1) n = len(s2) # Initialize the table for dynamic programming dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i - 1] == s2[j - 1]: dp[i][j] = 1 + dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You are given a labyrinth represented as a grid of size `n x m` where some cells are traversable and others are blocked. Your task is to determine the number of different paths from the top-left corner to the bottom-right corner without visiting any cell more than once. You can move in four possible directions: left, right, up, or down. Initially, each cell in the labyrinth is unvisited, but some of the cells are blocked, meaning you cannot step on them. You need to determine how many different paths exist that allow you to reach the destination cell. Input The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 10), which represent the dimensions of the labyrinth. The following `n` lines contain `m` characters each, representing the grid. The cell can be either a \'.\' indicating an empty cell or a \'#\' indicating a blocked cell. The top-left corner is always represented by the cell (0, 0) and the bottom-right corner by the cell (n-1, m-1), these two cells are always empty. Output Output a single integer, representing the number of unique paths from the top-left corner to the bottom-right corner in the labyrinth. Example Input 3 3 ... .#. ... Output 2 Input 3 3 ..# #.# ... Output 1 Note In the first example, the two possible paths are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, the only possible path is: Right -> Down -> Down -> Right","solution":"def count_paths(grid): Counts the number of unique paths in a labyrinth from the top-left corner to the bottom-right corner without visiting any cell more than once. n, m = len(grid), len(grid[0]) visited = [[False]*m for _ in range(n)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' and not visited[x][y] def dfs(x, y): if x == n-1 and y == m-1: return 1 visited[x][y] = True total_paths = 0 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid(nx, ny): total_paths += dfs(nx, ny) visited[x][y] = False return total_paths return dfs(0, 0)"},{"question":"A warehouse needs to manage the allocation of storage containers for arriving shipments. Each shipment consists of crates, and each crate has a weight. There are two storage zones in the warehouse. The task is to determine whether the crates can be split into two sets such that the sum of the weights in each set is as balanced as possible (the difference between the sums of the two sets is minimized). Write a program to determine if the incoming shipment crates can be divided into two sets such that the absolute difference between the sum of the weights of the two sets is less than or equal to a given integer D. Input The first line contains a single integer T (1 ≤ T ≤ 10), the number of test cases. Each test case consists of two lines: - The first line contains two integers N (1 ≤ N ≤ 20) and D (0 ≤ D ≤ 1,000). N is the number of crates in the shipment, and D is the maximum allowable difference between the sums of the weights of the two sets. - The second line contains N integers w_1, w_2, ..., w_N (1 ≤ w_i ≤ 1,000), which represent the weights of the crates. Output For each test case, output \\"YES\\" if the crates can be divided into two sets such that the absolute difference between the sums of the weights of the two sets is less than or equal to D, otherwise output \\"NO\\". Example Input 2 4 3 1 2 3 4 5 0 1 5 2 2 1 Output YES NO","solution":"def can_be_divided(N, D, weights): total_sum = sum(weights) target_diff = total_sum // 2 dp = [0] * (target_diff + 1) for weight in weights: for j in range(target_diff, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) closest_sum_to_half = dp[target_diff] difference = abs((total_sum - closest_sum_to_half) - closest_sum_to_half) return \\"YES\\" if difference <= D else \\"NO\\" def main(test_cases): results = [] for case in test_cases: N, D = case[0] weights = case[1] results.append(can_be_divided(N, D, weights)) return results # Example usage: # test_cases = [ # ((4, 3), [1, 2, 3, 4]), # ((5, 0), [1, 5, 2, 2, 1]) # ] # print(main(test_cases)) # Output: [\'YES\', \'NO\']"},{"question":"You are given an array of integers. In one move, you can increment or decrement any element of the array by 1. You want to make all the elements of the array equal. Find the minimum number of moves required to achieve that. -----Input----- The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. Each test case consists of two lines. The first line contains a single integer n (1 leq n leq 100) — the number of elements in the array. The second line contains n integers a_i (1 leq a_i leq 10^9) — the elements of the array. It\'s guaranteed that the sum of all n across test cases does not exceed 10^4. -----Output----- For each test case, output the minimum number of moves required to make all the elements of the array equal. -----Examples----- Input 3 3 1 2 3 4 1 1 1 1 2 1000000000 1000000000 Output 2 0 0 -----Note----- In the first test case, you can make the sequence equal to [2, 2, 2] by incrementing the first element once and decrementing the third element once, which takes 2 moves. In the second test case, the array is already uniform, so no moves are needed. In the third test case, the array is already uniform, so no moves are needed.","solution":"def min_moves_to_make_equal(t, test_cases): Returns the minimum number of moves required to make all elements of the array equal for each test case. Parameters: t (int): Number of test cases test_cases (list of tuple): List of tuples where each tuple contains n(int) and an array of n integers Returns: list of int: Minimum number of moves for each test case results = [] for n, arr in test_cases: median = sorted(arr)[n // 2] moves = sum(abs(x - median) for x in arr) results.append(moves) return results"},{"question":"You are given a string consisting of lowercase letters and an integer N. The task is to shift each character in the string forward by N positions in the alphabet (wrapping around if necessary), but keeping any non-alphabet characters in their original place. -----Input----- The first line contains a string S consisting of lowercase letters and possibly other characters such as spaces or punctuation (at most 100 characters). The second line contains a positive integer N (1 ≤ N ≤ 25). -----Output----- Output the transformed string after shifting each alphabet character by N positions to the right. -----Examples----- Sample Input: hello, world! 3 Sample Output: khoor, zruog!","solution":"def shift_characters(s, n): Shifts each alphabetical character in the string `s` forward by `n` positions in the alphabet (wrapping around if necessary), keeping any non-alphabet characters in their original place. shifted_string = [] for char in s: if char.isalpha(): new_position = (ord(char) - ord(\'a\') + n) % 26 shifted_char = chr(ord(\'a\') + new_position) shifted_string.append(shifted_char) else: shifted_string.append(char) return \'\'.join(shifted_string)"},{"question":"Task Implement a function that takes a 2D-matrix of integers and returns the matrix rotated 90 degrees clockwise. # Example: ``` Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` Good luck!","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a 2D matrix 90 degrees clockwise. Parameters: matrix (list of list of int): 2D matrix to be rotated Returns: list of list of int: Rotated 2D matrix return [list(row) for row in zip(*matrix[::-1])]"},{"question":"In software development, managing files and understanding their structure is crucial. One common operation is to normalize paths by removing unnecessary parts such as redundant slashes or \'.\' representing the current directory. Write a function that normalizes a given Unix-style file path, removing redundant slashes and \'.\' characters. The normalized path should not end with a \'/\' unless it\'s the root (\\"/\\"). -----Input----- A single string path representing the Unix-style file path. path consists of lowercase letters, digits, periods (\'.\'), and forward slashes (\'/\'). The length of path is at most 1000 characters. -----Output----- Return the normalized Unix-style file path as a string. -----Examples----- Sample Input 1: \\"/home//foo/\\" Sample Output 1: \\"/home/foo\\" Sample Input 2: \\"/../\\" Sample Output 2: \\"/\\" Sample Input 3: \\"/home/./bar/\\" Sample Output 3: \\"/home/bar\\"","solution":"def normalize_path(path): Normalize a given Unix-style file path by removing redundant slashes and \'.\' characters. Args: path (str): The Unix-style file path. Returns: str: The normalized path. parts = [] for part in path.split(\\"/\\"): if part == \\"\\" or part == \\".\\": continue elif part == \\"..\\": if parts: parts.pop() else: parts.append(part) return \\"/\\" + \\"/\\".join(parts)"},{"question":"There are N goblins standing in a line, each holding a certain number of candies. Two players take turns to play with these goblins. On a player\'s turn, they choose a goblin i (1 ≤ i ≤ N) and take all the candies from that goblin, then add half (rounding down) of that number of candies to the goblins directly to the left and right of i (if they exist). The game continues until all goblins have no more candies, at which point the player who made the last move wins. If a player cannot make a move during their turn (i.e., all goblins have zero candies), they lose the game. Given the initial configuration of candies each goblin holds, determine which player will win if both players play optimally. Output 1 if the first player wins, or 2 if the second player wins. Input N c1 c2 ... cN The integer N (2 ≤ N ≤ 1,000) on the first line denotes the number of goblins. The following line contains N integers c1, c2, ..., cN (0 ≤ ci ≤ 10,000), representing the number of candies each goblin initially holds. Output Output 1 if the first player wins, or 2 if the second player wins. Examples Input: 5 1 3 5 7 9 Output: 1 Input: 4 2 4 1 3 Output: 2","solution":"def who_wins_goblins_candies(N, candies): Determine which player will win if both play optimally. Args: N : int : Number of goblins candies : list : A list of integers representing the number of candies each goblin initially holds Returns: int : 1 if the first player wins, 2 if the second player wins total_candies = sum(candies) if total_candies % 2 == 1: return 1 else: return 2"},{"question":"Watson has a collection of M strings and he intends to teach Sherlock about character sequences. He wants Sherlock to find the longest common prefix among a given set of strings. The prefix is not necessarily a word but just an arbitrary sequence of characters starting from the beginning of each string. ------ Input ------ The first line contains an integer M, the number of strings. Each of the next M lines contains a string S_{i}. ------ Output ------ Output the longest common prefix for the given set of strings. If there is no common prefix, output an empty string. ------ Constraints ------ 1 ≤ M ≤ 2000 1 ≤ length(S_{i}) ≤ 2000 S_{i} consists of lowercase English letters only. ----- Sample Input 1 ------ 3 flower flow flight ----- Sample Output 1 ------ fl ----- Explanation 1 ------ The longest common prefix for the given strings is \\"fl\\". ----- Sample Input 2 ------ 4 dog racecar car cart ----- Sample Output 2 ------ \\"\\" ----- Explanation 2 ------ There is no common prefix among the given strings.","solution":"def longest_common_prefix(strs): Finds the longest common prefix of the given list of strings. Args: strs: List of strings Returns: A string that is the longest common prefix if not strs: return \\"\\" # Sort the list to easily find the bounds of common prefix strs.sort() # Compare characters between the first and the last string in the sorted list first = strs[0] last = strs[-1] i = 0 while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 return first[:i]"},{"question":"Given an array of integers, you are asked to determine if there exists a subset of the array whose sum equals a given target integer. You should return True if such a subset exists, otherwise return False. Note: Each number in the array can only be used once in the subset. Example 1: Input: nums = [3, 34, 4, 12, 5, 2], target = 9 Output: true Explanation: There is a subset [4, 5] with sum 9. Example 2: Input: nums = [1, 2, 3, 4, 5], target = 11 Output: true Explanation: There is a subset [1, 4, 5] with sum 11. Example 3: Input: nums = [1, 2, 3, 7, 8], target = 14 Output: true Explanation: There is a subset [1, 3, 7, 3] with sum 7. Example 4: Input: nums = [1, 2, 5], target = 4 Output: false Explanation: There is no subset with sum 4. Constraints: 1 <= nums.length <= 200 1 <= nums[i] <= 100 1 <= target <= 1000","solution":"def subset_sum(nums, target): Determines if there is a subset of the nums array whose sum equals the target. :param nums: List of integers :param target: The target sum :return: True if such a subset exists, otherwise False n = len(nums) dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): if dp[j - num]: dp[j] = True return dp[target]"},{"question":"During archaeological excavations, researchers have discovered an ancient inscription consisting of lowercase English letters. Each letter is carved on a separate stone, and the stones are laid out in a single line. However, over time some stones have been displaced, and the current arrangement forms a sequence of letters that is not easily decipherable. Your task is to find out whether it is possible to rearrange the sequence such that no two adjacent stones (letters) are the same. If such a rearrangement is possible, return one valid sequence. If it is not possible, state that as well. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of stones. The second line contains a sequence of n lowercase English letters. Output If it is possible to rearrange the sequence such that no two adjacent stones have the same letter, print \\"YES\\" (without quotes) in the first line followed by the rearranged sequence in the second line. If it is not possible, print \\"NO\\" (without quotes) in the first line. Examples Input 6 aabbcc Output YES abcabc Input 3 aaab Output NO Note In the second example, it is impossible to rearrange the sequence because there are too many occurrences of \'a\' to ensure that no two adjacent letters are the same.","solution":"from collections import Counter def can_rearrange_stones(n, sequence): Determines if it\'s possible to rearrange the sequence of stones so that no two adjacent stones have the same letter. if n == 1: return \\"YES\\", sequence counter = Counter(sequence) max_freq = max(counter.values()) # If the most frequent character occurs more than (n/2 + n%2) times, it is impossible. if max_freq > (n + 1) // 2: return \\"NO\\", None # Create a list of characters ordered by frequency chars = sorted(counter, key=counter.get, reverse=True) result = [None] * n # Position the most frequent characters in alternating positions idx = 0 for char in chars: count = counter[char] for _ in range(count): result[idx] = char idx += 2 if idx >= n: idx = 1 return \\"YES\\", \'\'.join(result)"},{"question":"You are given an integer n. Your task is to find the smallest positive integer x such that the sum of digits of x is equal to n. If such a number does not exist, output -1. Input The only line of input contains an integer n (1 ≤ n ≤ 100). Output Output the smallest positive integer x such that the sum of digits of x is equal to n, or -1 if no such x exists. Examples Input 15 Output 69 Input 4 Output 4 Input 1 Output 1","solution":"def smallest_positive_integer_with_digit_sum(n): Returns the smallest positive integer x such that the sum of digits of x is equal to n, or -1 if no such x exists. if n < 1 or n > 100: return -1 # Start constructing the smallest number that meets the condition digits = [] while n > 0: digit = min(n, 9) digits.append(digit) n -= digit # The smallest number would be created by sorting digits in ascending order digits.sort() return int(\'\'.join(map(str, digits))) # Example usage # print(smallest_positive_integer_with_digit_sum(15)) # Output: 69 # print(smallest_positive_integer_with_digit_sum(4)) # Output: 4 # print(smallest_positive_integer_with_digit_sum(1)) # Output: 1"},{"question":"Consider a scenario where you are given the task of determining the maximum score in a special gaming event. In this game, each player is given a chance to perform a series of moves, each of which yields a certain number of points. However, there are certain rules that govern the possible moves. You are given an array of integers where each integer represents the points obtained by performing a corresponding move. You must calculate the maximum score that can be achieved if no two consecutive moves are allowed. -----Input----- The first line contains an integer N (1 leq N leq 1000), representing the number of moves available. The second line contains N integers a_1, a_2, ldots, a_N (1 leq a_i leq 1000), where a_i represents the points obtained from the i^{th} move. -----Output----- Print the maximum score that can be achieved without performing two consecutive moves. -----Examples----- Sample Input 1: 3 4 5 1 Sample Output 1: 5 Sample Input 2: 4 2 1 2 7 Sample Output 2: 9 Sample Input 3: 5 3 2 5 10 7 Sample Output 3: 15","solution":"def max_score_no_consecutive(moves): N = len(moves) if N == 0: return 0 if N == 1: return moves[0] # Initialize an array to store the maximum score up to index i dp = [0] * N # Base cases dp[0] = moves[0] if N > 1: dp[1] = max(moves[0], moves[1]) # Fill the dp array for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + moves[i]) # The last element of dp array contains the answer return dp[-1]"},{"question":"Write a function `word_ladder(start, end, word_list)` that takes in three arguments: `start` (a string representing the starting word), `end` (a string representing the ending word), and `word_list` (a list of strings representing the available words in the word ladder). The function should attempt to transform `start` into `end` by changing exactly one letter at a time, with each intermediate word existing within `word_list`. Each transformed word must be a valid word in the given word list. Return the minimum number of transformations needed to transform `start` into `end`. If no transformation sequence is possible, return 0. **Examples:** ```python word_ladder(\\"hit\\", \\"cog\\", [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"]) == 5 # Explanation: \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\" word_ladder(\\"hit\\", \\"cog\\", [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\"]) == 0 # Explanation: \\"cog\\" is not in word_list, so no valid transformation sequence. ``` Note: - All words are of the same length and contain only lowercase alphabetic characters. - The `word_list` does not contain duplicates.","solution":"from collections import deque def word_ladder(start, end, word_list): if end not in word_list: return 0 word_list = set(word_list) queue = deque([(start, 1)]) while queue: current_word, steps = queue.popleft() if current_word == end: return steps for i in range(len(current_word)): for char in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + char + current_word[i+1:] if next_word in word_list: queue.append((next_word, steps + 1)) word_list.remove(next_word) return 0"},{"question":"A treasure hunt game involves n adventurers and n treasures distributed across a grid. The grid can be described as a set of n times n cells. Each adventurer is located in a unique cell, and each treasure is hidden in a unique cell. The goal is for every adventurer to collect exactly one treasure, minimizing the total distance travelled by all the adventurers. An adventurer at cell (a, b) has to move to cell (c, d) to collect the treasure, which will cost him exactly (|a - c| + |b - d|) units of energy—the Manhattan distance between these cells. Your task is to determine the minimum total energy required for all adventurers to collect all the treasures. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1le tle 10) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 1000) — the size of the grid and the number of adventurers and treasures. Each of the next n lines contains two space-separated integers x and y (1 le x, y le n), which represent the initial positions of the adventurers. Each of the next n lines also contains two space-separated integers x and y (1 le x, y le n), which represent the positions of the treasures. It is guaranteed that all positions of adventurers and treasures are unique. -----Output----- For each test case, print a single integer — the minimum total energy required for all adventurers to collect all the treasures. -----Examples----- Input 2 2 1 1 2 2 1 2 2 1 3 1 2 2 1 3 3 1 1 2 2 3 1 Output 2 4 -----Note----- In the first test case, the adventurers are at (1,1) and (2,2) while the treasures are at (1,2) and (2,1). If the adventurers swap their targets, the total minimum distance is 1 + 1 = 2. In the second test case, the adventurers are at (1,2), (2,1), and (3,3). The treasures are at (1,1), (2,2), and (3,1). The optimal assignments minimize the total distance to 4.","solution":"from itertools import permutations def calculate_min_distance(adventurers, treasures): n = len(adventurers) min_distance = float(\'inf\') for perm in permutations(treasures): distance = sum(abs(adventurers[i][0] - perm[i][0]) + abs(adventurers[i][1] - perm[i][1]) for i in range(n)) min_distance = min(min_distance, distance) return min_distance def min_total_distance(test_cases): results = [] for adventurers, treasures in test_cases: results.append(calculate_min_distance(adventurers, treasures)) return results def parse_input(input_str): input_lines = input_str.split(\'n\') t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) adventurers = [] treasures = [] index += 1 for _ in range(n): x, y = map(int, input_lines[index].split()) adventurers.append((x, y)) index += 1 for _ in range(n): x, y = map(int, input_lines[index].split()) treasures.append((x, y)) index += 1 test_cases.append((adventurers, treasures)) return test_cases"},{"question":"You are given a list of n integers a_1, a_2, dots, a_n. You can perform the following operation on the list zero or more times: Select any integer from the list and increment or decrement it by 1. Your task is to make all elements of the list equal with the minimum number of operations. -----Input----- The first line contains a single integer n (1 le n le 10^5). The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9). -----Output----- Print a single integer, the minimum number of operations needed to make all elements of the list equal. -----Examples----- Input 5 1 2 3 4 5 Output 6 Input 3 5 10 15 Output 10 Input 4 4 4 4 4 Output 0 -----Note----- In the first test case, you can make all elements equal to 3 with a total of 6 operations: |1-3| + |2-3| + |3-3| + |4-3| + |5-3| = 2 + 1 + 0 + 1 + 2 = 6. In the second test case, you can make all elements equal to 10 with a total of 10 operations: |5-10| + |10-10| + |15-10| = 5 + 0 + 5 = 10.","solution":"def min_operations_to_equal_elements(n, arr): Returns the minimum number of operations needed to make all elements of the list equal by incrementing or decrementing by 1. # The optimal value to make all elements equal is the median. # Sort the list and find the median. arr.sort() median = arr[n // 2] # Calculate total number of operations as the sum of absolute differences from the median. operations = sum(abs(x - median) for x in arr) return operations"},{"question":"Given a matrix of size N x M filled with positive integers, write a function to determine the number of distinct elements in the matrix. Consider elements to be distinct if they do not have the same value. Constraints - 1 ≤ N, M ≤ 1000 - 1 ≤ matrix[i][j] ≤ 10^6 (1 ≤ i ≤ N, 1 ≤ j ≤ M) - All input values are integers. Input The function should read from the standard input the matrix dimensions N and M followed by the elements of the matrix: ``` N M matrix[1][1] matrix[1][2] ... matrix[1][M] matrix[2][1] matrix[2][2] ... matrix[2][M] ... matrix[N][1] matrix[N][2] ... matrix[N][M] ``` Output The function should print the number of distinct elements in the matrix. Examples Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 9 ``` Input ``` 2 2 1 2 2 1 ``` Output ``` 2 ``` Input ``` 4 4 1 2 3 4 4 3 2 1 1 2 3 4 4 3 2 1 ``` Output ``` 4 ```","solution":"def count_distinct_elements(N, M, matrix): Returns the number of distinct elements in the matrix. :param N: Number of rows in the matrix :param M: Number of columns in the matrix :param matrix: List of lists representing the matrix :return: Number of distinct elements in the matrix distinct_elements = set() for row in matrix: distinct_elements.update(row) return len(distinct_elements) # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) matrix = [] index = 2 for i in range(N): row = list(map(int, data[index:index + M])) matrix.append(row) index += M print(count_distinct_elements(N, M, matrix))"},{"question":"Khaleed is making a list of his favorite integers. You\'ve been tasked with helping him to determine if a number is special. A number is considered special if it is a sum of two or more unique elements from a given list such that each element in the sum is only used once. For each number in your list, determine if it can be expressed as the sum of two or more distinct integers from Khaleed\'s list. -----Input----- The first line contains one integer n (1 leq n leq 10^4), the number of integers in Khaleed\'s list. The second line contains n integers b_1, b_2, dots, b_n (1 leq b_i leq 10^9), the integers in Khaleed\'s list. The third line contains one integer m (1 leq m leq 10^4), the number of integers to be checked. The fourth line contains m integers c_1, c_2, dots, c_m (1 leq c_i leq 10^{18}), the integers to be checked. -----Output----- Output m lines. For each integer in the m list, print \\"YES\\" if it can be expressed as the sum of two or more distinct integers from Khaleed\'s list, otherwise print \\"NO\\". -----Examples----- Input 5 1 2 3 5 8 3 8 15 7 Output YES NO YES Input 4 4 7 2 9 2 11 5 Output YES NO -----Note----- In the first example, 8 can be expressed as 3+5; 7 can be expressed as 2+5. In the second example, 11 can be expressed as 2+9. 5 cannot be expressed as the sum of two or more distinct integers from the list.","solution":"def is_special_number(k_list, query_list): Determine if each number in the query list can be expressed as the sum of two or more distinct integers from k_list. :param k_list: List of integers from Khaleed\'s list. :param query_list: List of integers to check. :return: List of \\"YES\\" or \\"NO\\" for each query in query_list. # Convert k_list to a set for O(1) membership checks k_set = set(k_list) result = [] # Check each query number for query in query_list: found = False # Check all pairs of distinct numbers in k_list for i in range(len(k_list)): for j in range(i + 1, len(k_list)): # Check if the sum of the pair is equal to query if k_list[i] + k_list[j] == query: found = True break if found: break # Append the result for the current query result.append(\\"YES\\" if found else \\"NO\\") return result"},{"question":"You are given a set of n houses located on a straight line, represented by their coordinates. Each house has a certain number of lamps placed in front of it. The lamps have enough power to cover a range on the line, and you need to determine the minimum power required for coverage so that all the lamps together can cover the entire range between the leftmost and rightmost houses. Each house i (0 ≤ i < n) is located at a coordinate x[i] with a lamp that can illuminate a segment of length 2 * p[i] (from x[i] - p[i] to x[i] + p[i]). Your task is to find the minimum value of the power p such that if all lamps have at least this power, the entire segment from the leftmost house\'s coordinate to the rightmost house\'s coordinate is covered. The coordinates of the houses are given in an array x, and their current powers are given in an array p. You should implement a function `minimum_required_power(x, p)` to find the answer. # Input Your function will receive two arrays: - `x` (1 ≤ len(x) ≤ 10^5), an array of integers representing the coordinates of the houses. - `p` (1 ≤ len(p) ≤ 10^5), an array of integers representing the current power of the lamps. # Output Return a single integer, the minimum power required so that all lamps together cover the entire segment from the leftmost to the rightmost house. # Example Example 1: Input: ```python x = [1, 2, 3] p = [1, 1, 1] ``` Output: ```python 1 ``` Explanation: All houses are already covered with the segment lengths provided by the current powers. Example 2: Input: ```python x = [1, 4, 6] p = [1, 1, 1] ``` Output: ```python 2 ``` Explanation: The lamp at house 4 requires a power of at least 2 to ensure full coverage to the house at coordinate 6. Example 3: Input: ```python x = [1, 2, 8] p = [2, 2, 2] ``` Output: ```python 3 ``` Explanation: The lamp at house 2 requires a power of at least 3 to ensure full coverage from 1 to 8.","solution":"def minimum_required_power(x, p): Find the minimum value of the power required such that all lamps cover the entire segment from the leftmost house\'s coordinate to the rightmost house\'s coordinate. if not x or not p: return 0 x.sort() max_gap = 0 # Calculate the maximum gap between consecutive houses for i in range(1, len(x)): max_gap = max(max_gap, x[i] - x[i-1]) # Minimum required power is half the largest gap min_power = max_gap // 2 if max_gap % 2 == 0 else (max_gap // 2) + 1 return min_power"},{"question":"Anna has been given a string consisting of lowercase English letters and the task to rearrange or shuffle the characters of the string in such a way that no two adjacent characters are the same. If such an arrangement is not possible, Anna should return an empty string. For example, given the input \\"aab\\", the result could be \\"aba\\". For the input \\"aaab\\", it is not possible to rearrange such that no two adjacent characters are the same, so the result should be an empty string. Help Anna by writing a function that implements the solution to her problem. -----Input----- The input contains one string s (1 leq |s| leq 10^5) — the string Anna needs to rearrange. -----Output----- Output a rearranged string where no two adjacent characters are the same, or an empty string if such an arrangement is not possible. -----Examples----- Input aab aba Input aaab (empty string) -----Note----- In the first example, rearranging \\"aab\\" to \\"aba\\" meets the condition that no two adjacent characters are the same. In the second example, there is no way to rearrange \\"aaab\\" so that no two adjacent characters are the same, hence the output is an empty string.","solution":"import heapq from collections import Counter def rearrange_string(s): Rearrange the characters of the string in such a way that no two adjacent characters are the same. If such an arrangement is not possible, return an empty string. # Count frequency of each character counter = Counter(s) max_heap = [(-freq, char) for char, freq in counter.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char rearranged_string = \'\'.join(result) if len(rearranged_string) != len(s): return \'\' return rearranged_string"},{"question":"You have been given a string s consisting of lowercase English letters and you need to determine if it is possible to rearrange the characters in s to form a palindrome. A string is considered a palindrome if it reads the same forwards and backwards. -----Input----- The first line of input contains a single integer q (1 le q le 100) — the number of queries. Following are q lines, each containing a string s (1 le |s| le 1000). -----Output----- For each query, print \\"YES\\" if it is possible to rearrange the characters of the string to form a palindrome, otherwise print \\"NO\\". -----Examples----- Input 2 aabb abc Output YES NO Input 3 civic ivicc hello Output YES YES NO -----Note----- For the first test case, the string \\"aabb\\" can be rearranged to form the palindrome \\"abba\\". For the second test case, it is not possible to rearrange the string \\"abc\\" to form a palindrome. For the third test case, the string \\"civic\\" is already a palindrome, so the answer is \\"YES\\". For the fourth test case, the string \\"ivicc\\" can be rearranged to form the palindrome \\"civic\\". For the fifth test case, it is not possible to rearrange the string \\"hello\\" to form a palindrome.","solution":"def can_form_palindrome(s): Determines if the characters of the string \'s\' can be rearranged to form a palindrome. Returns \\"YES\\" if possible, otherwise \\"NO\\". from collections import Counter count = Counter(s) odd_count = sum(1 for c in count.values() if c % 2 != 0) if odd_count > 1: return \\"NO\\" else: return \\"YES\\" def process_queries(queries): Processes a list of string queries and determines if each query can be rearranged to form a palindrome. Returns a list of results with \\"YES\\" or \\"NO\\" for each query. results = [] for s in queries: results.append(can_form_palindrome(s)) return results"},{"question":"You are given an array of n integers, each representing the height of a tree in a forest. You are allowed to cut down some trees, but you want to ensure that after cutting down some trees, the remaining forest still appears as a non-decreasing sequence of tree heights. Determine the maximum number of trees you can leave that form a non-decreasing sequence. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of trees in the forest. The second line contains n space-separated integers: h1, h2, ..., hn (1 ≤ hi ≤ 1000), representing the heights of the trees. -----Output----- Print a single integer — the maximum number of trees you can leave that still form a non-decreasing sequence. --Examples-- Input 5 3 4 2 6 1 Output 3 Input 7 1 2 2 3 1 5 6 Output 6 Input 6 10 20 10 20 10 20 Output 4 Input 4 4 4 4 4 Output 4 -----Note----- In the first example, one possible non-decreasing sequence could be [3, 4, 6]. In the second example, one possible non-decreasing sequence is [1, 2, 2, 3, 5, 6].","solution":"def max_non_decreasing_sequence(n, heights): Returns the maximum number of trees that can be left to form a non-decreasing sequence. :param n: Number of trees :param heights: List of tree heights :return: Maximum number of trees forming a non-decreasing sequence # Implementing using the Longest Non-decreasing Subsequence approach if n == 0: return 0 dp = [1] * n for i in range(1, n): for j in range(i): if heights[i] >= heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given two strings S and T of length n. String S can be converted to string T by performing a series of operations where each operation consists of incrementing the character at any position in S (with wrap-around so \'z\' becomes \'a\'). Your goal is to determine the minimum number of operations required to convert S to T. Note Both strings S and T only consist of lowercase English letters. Input - The first line contains the integer n (1 ≤ n ≤ 10^5), the length of the strings. - The second line contains the string S. - The third line contains the string T. Output Print the minimum number of operations required to convert S to T. Example Input 5 abcde cdefg Output 10 Explanation To convert \\"abcde\\" to \\"cdefg\\": - \'a\' to \'c\' takes 2 operations. - \'b\' to \'d\' takes 2 operations. - \'c\' to \'e\' takes 2 operations. - \'d\' to \'f\' takes 2 operations. - \'e\' to \'g\' takes 2 operations. Total operations = 2 + 2 + 2 + 2 + 2 = 10.","solution":"def min_operations_to_convert(n, S, T): total_operations = 0 for i in range(n): # Calculate the distance between the current characters distance = (ord(T[i]) - ord(S[i])) % 26 total_operations += distance return total_operations"},{"question":"A famous Olympic event, the marathon, features multiple checkpoints. Each checkpoint provides three types of refreshments: water, energy drinks, and snacks. Each refreshment has a unique degree of necessity at each checkpoint, defined by a mathematician as happiness scores. You are to assist the marathon organizers in determining the total happiness score a runner can achieve if they can consume only one type of refreshment at each checkpoint. Constraints: - The number of checkpoints is `n`. - For each checkpoint, three integers are provided indicating the happiness scores for water, energy drinks, and snacks respectively. Your task is to compute the maximum possible happiness score a runner can achieve if they choose to consume only one type of refreshment at each checkpoint in such a way that they maximize their overall happiness by the end of the marathon. Function Signature: - def max_happiness_score(n: int, checkpoints: List[Tuple[int, int, int]]) -> int Input: - An integer `n` (1 ≤ n ≤ 1000) - Number of checkpoints. - A list `checkpoints` consisting of `n` tuples `(w, e, s)` where: - `w` (0 ≤ w ≤ 100) represents the happiness score for water. - `e` (0 ≤ e ≤ 100) represents the happiness score for energy drinks. - `s` (0 ≤ s ≤ 100) represents the happiness score for snacks. Output: - An integer, the maximum happiness score possible. Example: Input: 2 [(10, 20, 30), (5, 50, 5)] Output: 70 Explanation: - At the first checkpoint, the best choice is snacks with a score of 30. - At the second checkpoint, the best choice is energy drinks with a score of 50. - Therefore, the total happiness score is 30 + 50 = 80. Note that in each checkpoint, the runner must consume only one type of refreshment to maximize the overall happiness score.","solution":"from typing import List, Tuple def max_happiness_score(n: int, checkpoints: List[Tuple[int, int, int]]) -> int: Computes the maximum possible happiness score a runner can achieve by consuming only one type of refreshment at each checkpoint. total_happiness = 0 for w, e, s in checkpoints: total_happiness += max(w, e, s) return total_happiness"},{"question":"Given a non-negative integer array nums, you can choose at most one index, and replace the element at that index with the value stored at either its immediate predecessor or its immediate successor position (if they exist). After the replacement, you need to ensure the entire array is non-decreasing in order. Return True if it\'s possible to make the array non-decreasing with at most one replacement, otherwise, return False. Note: 1. The length of the array nums is less than 10002. 2. Each element in nums is between -10^4 and 10^4. Example 1: Input: nums = [4, 2, 3] Output: True Explanation: You can replace 4 with 2 to make the array [2, 2, 3], which is non-decreasing. Example 2: Input: nums = [4, 2, 1] Output: False Explanation: You can\'t make the array non-decreasing with just one replacement. Example 3: Input: nums = [3, 4, 2, 3] Output: False Explanation: You can\'t make the array non-decreasing with just one replacement.","solution":"def can_be_non_decreasing(nums): Determines if the array can be made non-decreasing with at most one replacement. def can_modify(index, new_value): tmp = nums[:index] + [new_value] + nums[index+1:] return all(tmp[i] <= tmp[i+1] for i in range(len(tmp) - 1)) n = len(nums) for i in range(n - 1): if nums[i] > nums[i + 1]: # Attempt to fix the problem by modifying nums[i] or nums[i+1] return can_modify(i, nums[i + 1]) or can_modify(i + 1, nums[i]) return True"},{"question":"Write ```python def digit_sum(n) ``` that takes in an integer `n` and returns the sum of its digits. If the resultant sum has more than one digit, the function should return the sum of the digits of the resultant sum, and so on until a single-digit sum is obtained. ```python digit_sum(1234) == 1 # 1 + 2 + 3 + 4 = 10 -> 1 + 0 = 1 digit_sum(99) == 9 # 9 + 9 = 18 -> 1 + 8 = 9 digit_sum(56789) == 8 # 5 + 6 + 7 + 8 + 9 = 35 -> 3 + 5 = 8 ```","solution":"def digit_sum(n): Returns the sum of the digits of an integer n. If the resultant sum has more than one digit, the function continues to sum the digits until a single-digit sum is obtained. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive. There is only one repeated number in nums, return this repeated number. You must solve the problem without modifying the array nums and using only constant extra space. Example 1: Input: nums = [1,3,4,2,2] Output: 2 Explanation: The 2 is repeated because it appears twice in the array. Example 2: Input: nums = [3,1,3,4,2] Output: 3 Explanation: The 3 is repeated because it appears twice in the array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findDuplicate() which takes an array nums as an input parameter and returns the repeated number. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^5 nums.length == n + 1 1 ≤ nums[i] ≤ n","solution":"def findDuplicate(nums): Returns the only one repeated number in the array nums. Args: nums (list of int): Array of integers containing n + 1 integers where each integer is in the range [1, n] inclusive. Returns: int: The repeated number. # Use Floyd\'s Tortoise and Hare (Cycle Detection) algorithm slow = nums[0] fast = nums[0] # Phase 1: Finding the intersection point of the two runners. while True: slow = nums[slow] fast = nums[nums[fast]] if slow == fast: break # Phase 2: Finding the entrance to the cycle. slow = nums[0] while slow != fast: slow = nums[slow] fast = nums[fast] return slow"},{"question":"Alex is a programming enthusiast who loves solving problems. He participates in multiple coding competitions every week. He plans his day meticulously to include time slots for practicing different types of problems – algorithms, data structures, and coding challenges. Each type of problem requires a different approach and time. Alex has a schedule where `n` events are planned for a day, each with a designated start time and type. Each event has a starting hour and minute (`0 <= hour < 24`, `0 <= minute < 60`). The time is in the 24-hour format. He wants to know if he can attend all planned events without any overlap. If two events share the same start time, he cannot attend both. You need to help Alex by determining if he can attend all events as planned. -----Input----- The first line of input data contains an integer `t` (`1 <= t <= 100`) — the number of test cases. For each test case: - The first line contains an integer `n` (`1 <= n <= 10`) — the number of events. - The following `n` lines contain two integers each `hour` and `minute` (`0 <= hour < 24`, `0 <= minute < 60`) — the start time of each event. Numbers describing time do not contain leading zeros. -----Output----- For each test case, output `YES` if Alex can attend all events without any overlap, otherwise output `NO`. -----Examples----- Input 3 3 10 30 12 45 17 15 2 8 00 8 00 4 23 50 23 55 0 5 0 10 Output YES NO YES -----Note----- In the first test case, Alex has three events with different start times, so he can attend all of them. In the second test case, two events start at the same time (8:00), so it is impossible to attend both. In the third test case, all events have distinct start times, so Alex can attend all of them.","solution":"def can_attend_all_events(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] events = test_cases[i][1] # Convert all events to minutes since start of the day for easy comparison event_times = set() can_attend = True for hour, minute in events: time_in_minutes = hour * 60 + minute if time_in_minutes in event_times: can_attend = False break event_times.add(time_in_minutes) if can_attend: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers where each element appears twice except for one element which appears only once. Write a function that finds the element that appears only once. -----Constraints----- - The array length is between 1 and 10000. - Each element in the array is an integer within the range [-10000, 10000]. -----Input----- Input is an array of integers, given as: [arr] -----Output----- Print the integer that appears only once in the array. -----Sample Input----- [2, 3, 4, 2, 3] -----Sample Output----- 4 Explanation: In the array, the numbers \\"2\\" and \\"3\\" each appear twice, while \\"4\\" appears once. Hence, the output is 4.","solution":"def find_single_number(arr): Returns the element that appears only once in the array. Parameters: arr (list): A list of integers where each element appears twice except for one element which appears only once. Returns: int: The element that appears only once. unique_number = 0 for num in arr: unique_number ^= num return unique_number"},{"question":"# Prime Sum Pairs Write function `prime_sum_pairs` (or `primeSumPairs`/`PrimeSumPairs` depending on language rules) that, given integer number `M` (in range `2..50`), returns an array of integers `1..M` arranged in a way, so the sum of each pair of adjacent numbers is a prime number. A valid solution must satisfy the following criteria: 1. Each number in the range `1..M` is used exactly once. 2. The sum of each pair of consecutive numbers is a prime number. 3. The sum of the first and last number in the array should be a prime. This is because the structure can be visualized as a circular array. # Example For M=10, a solution can be: `[ 2, 1, 4, 3, 8, 5, 6, 7, 10, 9 ]` # Verification 1. All numbers are used exactly once. Sorted in ascending order, the array looks like this: `[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]` 2. The sum of each pair of consecutive numbers is a prime: - 2 + 1 = 3 - 1 + 4 = 5 - 4 + 3 = 7 - 3 + 8 = 11 - 8 + 5 = 13 - 5 + 6 = 11 - 6 + 7 = 13 - 7 + 10 = 17 - 10 + 9 = 19 - 9 + 2 = 11 If there is no solution, return `false` (or, `None` in Scala). For example, if `M=3`, the numbers `1, 2, 3` cannot be arranged to meet the criteria above. # Challenge and Enjoy!","solution":"from itertools import permutations def is_prime(n): Check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i != 0: continue else: return False return True def prime_sum_pairs(M): Return an arrangement of numbers 1..M such that the sum of each pair of adjacent numbers is prime. if M < 2: return False def valid_permutation(perm): for i in range(M): if not is_prime(perm[i] + perm[(i + 1) % M]): return False return True for perm in permutations(range(1, M + 1)): if valid_permutation(perm): return list(perm) return False"},{"question":"Rina loves exploring sequences. She is particularly fascinated by the Fibonacci sequence, where each number is the sum of the two preceding ones, usually starting with 0 and 1. However, Rina prefers the version that starts with 1 and 1. She now wants to find the sum of even-valued terms in the Fibonacci sequence that do not exceed a given number N. Being passionate about programming, she decides to write a program for this task, but she needs your help. Note: Please use Python language. Input Format The first line consists of the number of test cases T. Each of the following T lines thereafter comprises one number N. Output Format For each of the T lines, print a single integer that represents the sum of all even-valued Fibonacci sequence terms that do not exceed N. Constraints 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^18 SAMPLE INPUT 2 10 34 SAMPLE OUTPUT 10 44 Explanation For the first test case, N=10. The even-valued terms in the Fibonacci sequence up to 10 are 2 and 8. Their sum is 10. For the second test case, N=34. The even-valued terms in the Fibonacci sequence up to 34 are 2, 8 and 34. Their sum is 44.","solution":"def sum_even_fibonacci(max_n): Return the sum of even Fibonacci numbers not exceeding max_n. a, b = 1, 1 total_sum = 0 while b <= max_n: if b % 2 == 0: total_sum += b a, b = b, a + b return total_sum def solve_fibonacci_problems(test_cases): Return a list containing solutions for given test cases. results = [] for n in test_cases: results.append(sum_even_fibonacci(n)) return results"},{"question":"In an amusement park, there is a set of n attractions connected by paths. Each path between two attractions has a length l_i. You are given m tickets, each of which allows you to walk exactly one path for free. Your goal is to find the minimum distance you need to walk to visit all attractions starting from the first attraction. Input Format The first line contains two space-separated integers describing the respective values of n and m. Each of the next n - 1 lines contains three space-separated integers u, v, and l_i denoting a bidirectional path between attractions u and v with length l_i. Constraints 2leq nleq 500 1leq mleq n-1 1leq l_ileq 10^6 1leq u, vleq n uneq v Output Format Print a single integer representing the minimum distance you need to walk to visit all attractions starting from the first attraction. Sample Input 0 4 1 1 2 3 1 3 2 3 4 4 Sample Output 0 5 Explanation 0 One optimal path can be: - Use one ticket for the path between attractions 1 and 3 (length 2). - Walk from attraction 1 to attraction 2 (length 3). Remaining optimal path, if any, can be walked as per the distance required. Sample Input 1 5 2 1 2 1 1 3 4 2 4 2 3 5 1 Sample Output 1 2 Explanation 1 One optimal path can be: - Use one ticket for the path between attractions 1 and 3 (length 4). - Use another ticket for the path between attractions 3 and 5 (length 1). - Walk from attraction 1 to attraction 2 (length 1). Remaining optimal path, if any, can be walked as per the distance required.","solution":"import heapq def min_distance_with_tickets(n, m, paths): Calculate the minimum distance to walk to visit all attractions. Args: n : int : number of attractions m : int : number of tickets paths : List of tuples : each tuple contains (u, v, l_i) representing a path Returns: int : minimum distance to walk # Create adjacency list adj = {i: [] for i in range(1, n+1)} for u, v, l in paths: adj[u].append((v, l)) adj[v].append((u, l)) # Prim\'s algorithm to find MST def prim(): min_heap = [(0, 1)] # (cost, node) visited = [False] * (n + 1) total_cost = 0 count = 0 while min_heap and count < n: cost, node = heapq.heappop(min_heap) if visited[node]: continue visited[node] = True total_cost += cost count += 1 for neighbor, path_cost in adj[node]: if not visited[neighbor]: heapq.heappush(min_heap, (path_cost, neighbor)) return total_cost total_cost = prim() # If we have tickets, we avoid the m most expensive edges mst_edges = [] min_heap = [(0, 1)] # (cost, node) visited = [False] * (n + 1) while min_heap and len(mst_edges) < n: cost, node = heapq.heappop(min_heap) if visited[node]: continue visited[node] = True for neighbor, path_cost in adj[node]: if not visited[neighbor]: mst_edges.append(path_cost) heapq.heappush(min_heap, (path_cost, neighbor)) mst_edges.sort(reverse=True) # Subtract the largest m edges from the MST total cost for i in range(m): total_cost -= mst_edges[i] return total_cost"},{"question":"Determine the number of unique paths in a grid. You are given an m x n grid and you need to find the number of unique paths from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. Constraints: * 1 ≤ m, n ≤ 100 Input Two integers m and n. Output Print the number of unique paths from the top-left corner to the bottom-right corner. Examples Input 3 2 Output 3 Input 7 3 Output 28","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of a mxn grid. # Create a 2D array with m rows and n columns filled with 1s dp = [[1] * n for _ in range(m)] # Iterate through the grid starting from 1,1 since the first row and # first column has only one way to reach each cell. for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # Return the value in the bottom-right corner of the grid return dp[m-1][n-1]"},{"question":"Alicia loves puzzle games, and right now she is particularly fond of a game called \\"Light Up\\". In this game, there is a grid of size `m x n`, and some of the cells in the grid are already illuminated. Each illuminated cell is represented by a \'1\' and an empty cell is represented by a \'0\'. Alicia can place additional lights to illuminate the grid further. Each light placed in an empty cell illuminates all cells in its row and column unless blocked by another illuminated cell. Your task is to help Alicia determine the minimum number of lights required to fully illuminate the grid such that every empty cell can reach the light. An optional way is to print the coordinates of these additional lights. Write a function that receives the grid and returns the minimum number of lights needed and the list of coordinates (if any) to place the lights. Input The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 100) representing the size of the grid. The next `m` lines contain `n` characters each (either \'0\' for empty cells or \'1\' for illuminated cells) representing the grid. Output Print the minimum number of lights required to fully illuminate the grid. Optionally, also return the list of coordinates where the lights need to be placed. If the entire grid is already illuminated, print 0. Example Input 4 4 1000 0000 0000 0001 Output 2 [(1,1), (2, 2)] Note In the example, placing one light at cell `(1,1)` illuminates the first row and first column, and placing another at `(2,2)` will illuminate the remaining empty cells. Therefore the minimum number of lights needed is 2 and the coordinates of the additional lights are `(1,1)` and `(2,2)`.","solution":"def min_lights_to_illuminate(grid, m, n): Returns the minimum number of lights required to fully illuminate the grid and the list of coordinates where the lights need to be placed. rows = [False] * m cols = [False] * n for i in range(m): for j in range(n): if grid[i][j] == \'1\': rows[i] = True cols[j] = True lights = [] for i in range(m): if not rows[i]: for j in range(n): if not cols[j]: lights.append((i, j)) rows[i] = True cols[j] = True break return len(lights), lights"},{"question":"The city is organizing a marathon race with N participants. Each participant has a unique identifier between 1 and N. The race officials want to record the time taken by each participant as they cross various checkpoints set up along the race route. However, sometimes participants can re-check-in at a checkpoint, and the latest check-in time overwrites the previous one for the same checkpoint. After the race, officials need to efficiently analyze the recorded data to find the maximum or minimum check-in time for a participant within a specified range of checkpoints. The system should handle two types of queries: 1. Type 1 - Update Checkpoint Time: It is of the form `1 p c t`, where `p` is the participant ID, `c` is the checkpoint number, and `t` is the check-in time. 2. Type 2 - Query Participant Times: It is of the form `2 p c1 c2 q`, where `p` is the participant ID, `c1` and `c2` represent the inclusive range of checkpoints, and `q` is a character that can be either \'max\' or \'min\'. Based on the value of `q`, return either the maximum or minimum check-in time for participant `p` between checkpoints `c1` and `c2`. Input: - The first line contains an integer `M`, the number of queries. - Each of the following `M` lines contains a query of one of the two types described above. Output: - For each query of Type 2, output the required maximum or minimum check-in time. Constraints: - 1 <= M <= 10^5 - 1 <= N <= 10^5 - 1 <= c1 <= c2 <= 10^5 - 1 <= t <= 10^9 Subtask 1: (30 points) - 1 <= M <= 10^3 - 1 <= N <= 10^3 - 1 <= c1 <= c2 <= 10^3 Subtask 2: (70 points) - Original Constraints Sample Input: ``` 6 1 1 2 10 1 1 3 15 1 2 3 20 2 1 2 3 max 1 1 2 5 2 1 2 3 min ``` Sample Output: ``` 15 5 ``` In the first case, the maximum check-in time for participant 1 between checkpoints 2 and 3 is 15. In the second case, the minimum check-in time for participant 1 between checkpoints 2 and 3 is 5 (after overwriting the time at checkpoint 2).","solution":"def marathon_queries(m, queries): import sys from collections import defaultdict checkpoints = defaultdict(lambda: defaultdict(lambda: -sys.maxsize)) results = [] for query in queries: parts = query.split() if parts[0] == \'1\': p = int(parts[1]) c = int(parts[2]) t = int(parts[3]) checkpoints[p][c] = t # overwrite the time at the checkpoint elif parts[0] == \'2\': p = int(parts[1]) c1 = int(parts[2]) c2 = int(parts[3]) q = parts[4] times = [checkpoints[p][c] for c in range(c1, c2 + 1) if checkpoints[p][c] != -sys.maxsize] if q == \'max\': results.append(max(times) if times else -sys.maxsize) elif q == \'min\': results.append(min(times) if times else sys.maxsize) return results"},{"question":"Haritha is organizing a marathon event where participants are running on a circular track. At the beginning of the event, she records the starting positions of all participants. By the end of the event, she notes down their finishing positions. The circular track is represented as a line of n distinct positions labeled from 1 to n. Your task is to determine the number of participants who crossed the starting point at least once during the marathon. Let the start position of a participant be denoted by a_i and the end position be denoted by b_i. A participant is considered to have crossed the starting point if they go from any a_i to b_i in a manner such that they decrement position-labels, pass through position 1, and continue from position n back to a_i. If b_i is numerically greater than a_i, this implies they did not cross the start position. -----Input----- Each test contains multiple test cases. The first line contains an integer t (1 leq t leq 10000) — the number of test cases. The descriptions of the t test cases follow. The first line of each test case contains an integer n (1 leq n leq 10^5) — the number of positions on the track and participants in the marathon. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le n) — the initial positions of the participants. The third line contains n integers b_1, b_2, dots, b_n (1 le b_i le n) — the final positions of the participants. For all 1le i < jle n, it is guaranteed that a_i ne a_j and b_i ne b_j. The sum of the values of n over all test cases does not exceed 10^5. -----Output----- For each test case, print the number of participants who crossed the starting position at least one time during the marathon. -----Examples----- Input 3 5 1 3 2 5 4 4 1 5 3 2 4 1 2 3 4 1 2 3 4 6 6 1 3 2 5 4 3 5 1 6 4 2 Output 3 0 4 -----Note----- In the first test case, participants starting at positions 1, 2, and 5 ended up crossing the start position. In the second test case, no participants crossed the start position as all final positions are numerically greater than or equal to their initial positions. In the third test case, all participants crossed the start position.","solution":"def count_crossing_participants(n, a, b): Returns the number of participants who crossed the starting position. Parameters: n: int : the number of positions on the track and participants a: list of int : the initial positions of the participants b: list of int : the final positions of the participants Returns: int : the number of participants who crossed the starting position count = 0 for start, end in zip(a, b): if start > end: count += 1 return count def process_test_cases(t, test_cases): Processes multiple test cases and returns the results for each of them. Parameters: t: int : number of test cases test_cases: list of tuples : each tuple contains (n, a, b) for a single test case Returns: list of int : results for each test case results = [] for case in test_cases: n, a, b = case results.append(count_crossing_participants(n, a, b)) return results"},{"question":"You are given an array of integers and a target integer. Your task is to find a pair of integers in the array whose sum is equal to the target integer. If such a pair exists, return the indices of the two numbers. If there are multiple pairs with the same sum, return any one of them. If no such pair exists, return -1. -----Constraints----- - The input array contains between 2 and 100,000 elements. - Each element in the array is a non-negative integer less than 10^9. - The target integer is a non-negative integer less than 10^9. -----Input----- Input is given from Standard Input in the following format: - First line contains two integers n and target where n is the size of the array. - Second line contains n space-separated integers representing the array. -----Output----- Output the indices of the two numbers that add up to the target integer, separated by a space. If no such pair exists, return -1. -----Sample Input----- 5 9 2 7 11 15 1 -----Sample Output----- 0 1 Explanation: The two numbers at index 0 and 1 (2 and 7) add up to 9.","solution":"def find_pair_with_sum(nums, target): Finds two indices of numbers in \'nums\' that add up to \'target\'. Args: nums (list of int): The list of numbers. target (int): The target sum. Returns: tuple of int: A tuple containing the indices of the two numbers that add up to \'target\', or -1 if no such pair exists. seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return (seen[complement], i) seen[num] = i return -1 def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) target = int(data[1]) nums = list(map(int, data[2:2 + n])) result = find_pair_with_sum(nums, target) if result == -1: print(result) else: print(result[0], result[1])"},{"question":"Implement a function that takes a binary tree and returns the zigzag level order traversal of its nodes\' values. (i.e., from left to right, then right to left for the next level and alternate between). For example: Given binary tree [3, 9, 20, null, null, 15, 7], ``` 3 / 9 20 / 15 7 ``` The output should be: [[3], [20, 9], [15, 7]] Your task: You don\'t need to read input or print anything. Complete the function `zigzagLevelOrder` which takes the root of the binary tree as input and returns a list of its zigzag level order traversal. ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzagLevelOrder(root: TreeNode) -> List[List[int]]: # Implement your solution here ``` **Constraints:** - The number of nodes in the tree is in the range [0, 2000]. - -100 ≤ Node.val ≤ 100","solution":"from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzagLevelOrder(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] results = [] current_level = [root] left_to_right = True while current_level: level_values = [] next_level = [] for node in current_level: level_values.append(node.val) if node.left: next_level.append(node.left) if node.right: next_level.append(node.right) if not left_to_right: level_values.reverse() results.append(level_values) current_level = next_level left_to_right = not left_to_right return results"},{"question":"# Task **_Given_** two **_positive integers a and b_**, find the smallest integer N, such that: - **_N_** is *divisible by both a and b* - **_N_** is *greater than or equal to the least common multiple (LCM) of a and b*. ___ # Notes * The **_parameters (a, b)_** passed to the function are *only positive values*. * It\'s guaranteed that an LCM exists for any pair of positive integers. ___ # Input >> Output Examples ``` minMultiple(6, 8) ==> return (24) ``` Explanation: **_(24)_** is the least common multiple of **_(6)_** and **_(8)_**, and it is greater than or equal to the LCM. ___ ``` minMultiple(5, 15) ==> return (15) ``` Explanation: **_(15)_** is the least common multiple of **_(5)_** and **_(15)_**, and it is greater than or equal to the LCM. ___ ``` minMultiple(7, 3) ==> return (21) ``` Explanation: **_(21)_** is the least common multiple of **_(7)_** and **_(3)_**, and it is greater than or equal to the LCM. ___ ___ ALL translations are welcomed Enjoy Learning !!","solution":"from math import gcd def lcm(a, b): Returns the least common multiple (LCM) of a and b. return a * b // gcd(a, b) def minMultiple(a, b): Returns the smallest integer N such that: - N is divisible by both a and b - N is greater than or equal to the least common multiple (LCM) of a and b return lcm(a, b)"},{"question":"Given an array A of length N, find the number of unique elements in the array after performing the following operation exactly K times: For each operation: 1. Choose any element in the array. 2. Replace it with the bitwise XOR of the element with another chosen element from the array. ------ Input Format ------ - The first line contains two integers N and K - the length of the array and the number of operations, respectively. - The second line contains N space-separated integers A_{1}, A_{2}, ..., A_{N} representing the array A. ------ Output Format ------ Output a single integer, the number of unique elements in the array after performing K operations. ------ Constraints ------ 1 ≤ N ≤ 2cdot10^{5} 0 ≤ A_{i} < 2^{20} 0 ≤ K ≤ 10^{9} ------ Sample Input 1 ------ 3 2 2 4 3 ------ Sample Output 1 ------ 2 ------ Explanation 1 ------ The array starts as [2, 4, 3]. - First operation: Choose elements 4 and 3. Replace 4 with 4 XOR 3 = 7. The array becomes [2, 7, 3]. - Second operation: Choose elements 2 and 7. Replace 2 with 2 XOR 7 = 5. The array becomes [5, 7, 3]. The unique elements are {3, 5, 7}, so the answer is 3. The number of unique elements remains 3 before and after K=2 operations. However, for any K >= 2, the unique set has been reached. Hence, considering K operations, in this specific example, the set cannot change further, and we can predict the number of unique elements after performing arbitrary K operations. ------ Sample Input 2 ------ 4 1 1 2 3 1 ------ Sample Output 2 ------ 4 ------ Explanation 2 ------ The array starts as [1, 2, 3, 1]. - One possible operation: Choose elements 2 and 3. Replace 2 with 2 XOR 3 = 1. The array becomes [1, 1, 3, 1]. Unique set achieved with one operation in this example is {1, 3}. Considering unique final sets per maximum operations K, unique reduced set stays as {1, 3}, thereby answer remains constant to 2 uniquely formed elements from input set.","solution":"def num_unique_elements_after_k_operations(n, k, arr): Given an array arr of length n, this function returns the number of unique elements after performing the XOR operation k times. # Number of unique elements before any operation unique_elements = set(arr) # The maximum number of unique elements can\'t change after any k operations return len(unique_elements)"},{"question":"Given an array of positive integers, find the number of \\"special triplets\\". A \\"special triplet\\" is defined as three numbers (a, b, c) from the array such that a + b > c, b + c > a, and c + a > b (i.e., they can form a triangle). Return the count of all such triplets. Example 1: Input: arr[] = {4, 6, 3, 7} Output: 3 Explanation: The special triplets are (4, 6, 3), (4, 6, 7) and (6, 3, 7). Example 2: Input: arr[] = {10, 21, 22, 100, 101, 200, 300} Output: 6 Explanation: The special triplets are (10, 21, 22), (21, 22, 100), (21, 100, 101), (22, 100, 101), (100, 101, 200), and (101, 200, 300). Your Task: You don\'t need to read input or print anything. Your task is to complete the function findSpecialTriplets() which takes arr[] as input and returns the number of special triplets. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 5000 1 ≤ arr[i] ≤ 10^6","solution":"def findSpecialTriplets(arr): Returns the count of special triplets in the array where a + b > c, b + c > a, and c + a > b. n = len(arr) count = 0 arr.sort() for i in range(n - 2): k = i + 2 for j in range(i + 1, n - 1): while k < n and arr[i] + arr[j] > arr[k]: k += 1 count += k - j - 1 return count"},{"question":"You are helping to develop a pathfinding algorithm for a robot in a grid-based warehouse. The warehouse is represented as a grid of cells, where each cell is either an empty space (\'.\') or an obstacle (\'#\'). The robot can move one cell at a time, and in one move it can go up, down, left, or right, but it cannot move into a cell with an obstacle. The robot starts in the top-left corner of the grid (0, 0) and needs to reach the bottom-right corner of the grid (n-1, m-1). Your task is to write a program that determines the minimum number of moves required for the robot to reach the bottom-right corner of the grid. If it is not possible for the robot to reach the bottom-right corner, the program should return -1. Input The first line of input consists of two integers, n and m, which represent the number of rows and columns in the grid, respectively (1 ≤ n, m ≤ 100). The next n lines contain m characters each, representing the grid. Each character is either a \'.\' (empty space) or a \'#\' (obstacle). Output Output a single integer representing the minimum number of moves required for the robot to reach the bottom-right corner of the grid, or -1 if it is not possible. Sample Input 4 4 .... .. .... .... 3 3 ..# .#. .#. Sample Output 6 -1 Example Input 4 4 .... .. .... .... 3 3 ..# .#. .#. Output 6 -1","solution":"from collections import deque def min_moves_to_reach_end(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up visited = [[False] * m for _ in range(n)] visited[0][0] = True queue = deque([(0, 0, 0)]) # (x, y, distance) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"Two coding campers are creating a list of coding problems for a hackathon. They have a large list of possible problems, some of which are duplicates. They need to merge their two lists into a single list of unique problems, removing any duplicates. The coding campers want to preserve the order of first occurrences of the problems from both lists as they merge them. Write a program that takes in two lists of coding problems and outputs a single list of merged unique problems while preserving the order. Input The first line of input contains an integer T (1 ≤ T ≤ 100) indicating the number of test cases. Each test case consists of two lists of strings. The first list starts with an integer N1 (1 ≤ N1 ≤ 1000) indicating the number of problems in the first list, followed by N1 strings representing the problems. The second list starts with an integer N2 (1 ≤ N2 ≤ 1000) indicating the number of problems in the second list, followed by N2 strings representing the problems. Output For each test case, output a single list of unique problems merged from both lists in the order of their first occurrence. SAMPLE INPUT 2 3 hackathon1 problem2 challenge3 4 problem2 challenge3 hackathon1 problem4 5 code1 code2 code3 code4 code5 3 code5 code6 code7 SAMPLE OUTPUT hackathon1 problem2 challenge3 problem4 code1 code2 code3 code4 code5 code6 code7 Explanation For the first test case: - The first list contains: [\\"hackathon1\\", \\"problem2\\", \\"challenge3\\"] - The second list contains: [\\"problem2\\", \\"challenge3\\", \\"hackathon1\\", \\"problem4\\"] - Merging both lists and removing duplicates while preserving order results in [\\"hackathon1\\", \\"problem2\\", \\"challenge3\\", \\"problem4\\"] For the second test case: - The first list contains: [\\"code1\\", \\"code2\\", \\"code3\\", \\"code4\\", \\"code5\\"] - The second list contains: [\\"code5\\", \\"code6\\", \\"code7\\"] - Merging both lists and removing duplicates while preserving order results in [\\"code1\\", \\"code2\\", \\"code3\\", \\"code4\\", \\"code5\\", \\"code6\\", \\"code7\\"]","solution":"def merge_unique_problems(test_cases): results = [] for case in test_cases: first_list = case[0] second_list = case[1] unique_problems = [] seen = set() for problem in first_list + second_list: if problem not in seen: unique_problems.append(problem) seen.add(problem) results.append(unique_problems) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N1, *first_list = lines[index].split() N1 = int(N1) index += 1 N2, *second_list = lines[index].split() N2 = int(N2) index += 1 test_cases.append((first_list, second_list)) return test_cases"},{"question":"You are given a grid with n rows and m columns, containing positive integers in each cell. The task is to perform the following queries on the grid: Type 1. Given four integers boldsymbol{x_1}, boldsymbol{y_1}, boldsymbol{x_2}, and boldsymbol{y_2} (1 leq x_1 leq x_2 leq n, 1 leq y_1 leq y_2 leq m), find the maximum value in the sub-grid defined by the corners (x_1, y_1) and (x_2, y_2). Type 2. Given four integers boldsymbol{x_1}, boldsymbol{y_1}, boldsymbol{x_2}, and boldsymbol{y_2}, increment the value of every element in the sub-grid defined by the corners (x_1, y_1) and (x_2, y_2) by 1. Input Format The first line contains two integers n and m. The next n lines contain m integers each, representing the initial grid. The next line contains an integer q, the number of queries. Each of the next q lines contains five integers t p_i, x_1, y_1, x_2, and y_2, where t p_i denotes the type of the query, and (x_1, y_1, x_2, y_2) are the parameters of the query. Constraints 1 leq n, m leq 1000 1 leq q leq 1000 1 leq textit{grid element} leq 10^6 1 leq t p_i leq 2 1 leq x_1 leq x_2 leq n 1 leq y_1 leq y_2 leq m Output Format For each query of the first type, print the required maximum value. Sample Input 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 3 1 1 1 3 3 2 2 2 4 4 1 1 1 4 4 Example Output 11 17 Explanation - After the first query, the maximum value in the sub-grid defined by (1, 1) and (3, 3) is 11. - After the second query, the grid is updated to: 1 2 3 4 5 7 8 9 9 11 12 13 13 15 16 17 - After the third query, the maximum value in the entire grid is 17.","solution":"def perform_queries(n, m, grid, queries): Performs the given queries on the grid. Args: n : int : number of rows in the grid m : int : number of columns in the grid grid : list of list of int : the grid with its initial values queries : list of tuple : the queries to be performed Returns: list of int : results for each type 1 query results = [] for query in queries: tp, x1, y1, x2, y2 = query if tp == 1: max_value = find_max(x1, y1, x2, y2, grid) results.append(max_value) elif tp == 2: increment_values(x1, y1, x2, y2, grid) return results def find_max(x1, y1, x2, y2, grid): Finds the maximum value in the sub-grid defined by (x1, y1) and (x2, y2). Args: x1 : int : starting row index (1-based) y1 : int : starting column index (1-based) x2 : int : ending row index (1-based) y2 : int : ending column index (1-based) grid : list of list of int : the grid Returns: int : the maximum value in the sub-grid max_value = grid[x1-1][y1-1] for i in range(x1-1, x2): for j in range(y1-1, y2): if grid[i][j] > max_value: max_value = grid[i][j] return max_value def increment_values(x1, y1, x2, y2, grid): Increments the value of every element in the sub-grid defined by (x1, y1) and (x2, y2) by 1. Args: x1 : int : starting row index (1-based) y1 : int : starting column index (1-based) x2 : int : ending row index (1-based) y2 : int : ending column index (1-based) grid : list of list of int : the grid for i in range(x1-1, x2): for j in range(y1-1, y2): grid[i][j] += 1"},{"question":"Given a string `dateStr`, your task is to determine if it represents a valid date in the format `MM-DD-YYYY` where `MM` is a two-digit month, `DD` is a two-digit day, and `YYYY` is a four-digit year. The months, days, and year must be valid according to the Gregorian calendar. For example, `02-30-2020` is not valid because February does not have 30 days and `13-01-2020` is not valid because there is no 13th month. Your function should return `True` if the date is valid, and `False` if it is not. Function Signature ```python def is_valid_date(dateStr: str) -> bool: pass ``` Input - `dateStr` (string): A string that represents a date in the format `MM-DD-YYYY`. Output - A boolean value (`True` or `False`). Examples ```python assert is_valid_date(\'12-31-2020\') == True assert is_valid_date(\'02-30-2020\') == False assert is_valid_date(\'04-31-2021\') == False assert is_valid_date(\'06-15-1990\') == True assert is_valid_date(\'13-01-2020\') == False assert is_valid_date(\'02-29-2020\') == True # 2020 is a leap year assert is_valid_date(\'02-29-2021\') == False # 2021 is not a leap year ``` Constraints - The input string `dateStr` will always be 10 characters long and in the format `MM-DD-YYYY`. - The year represented by `YYYY` will be between `1900` and `2100` inclusive. - You are not allowed to use any date/parsing modules for this task. Note Consider leap years when checking for valid dates: - A year is a leap year if it is divisible by 4, except for end-of-century years, which must be divisible by 400. This means that the year 2000 is a leap year, while 1900 is not. Good luck!","solution":"def is_valid_date(dateStr: str) -> bool: Checks if the given date string in the MM-DD-YYYY format is valid. # Extracting month, day, and year month = int(dateStr[0:2]) day = int(dateStr[3:5]) year = int(dateStr[6:10]) # Checking for valid month if month < 1 or month > 12: return False # Days in each month days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Check for leap year if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): days_in_month[1] = 29 # February has 29 days in leap years # Checking for valid day if day < 1 or day > days_in_month[month - 1]: return False return True"},{"question":"You are given a list of integers. You need to determine if there exists a non-empty subsequence of these integers whose sum is zero. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Implement a function that returns \\"Yes\\" if such a subsequence exists, and \\"No\\" otherwise. -----Constraints----- - The length of the list (1 ≤ len(list) ≤ 1000) - Each integer in the list (-10^4 ≤ integer ≤ 10^4) -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 a_3 ... a_n Where: - n denotes the number of integers in the list. - a_1, a_2, ..., a_n are the integers in the list. -----Output----- Output \\"Yes\\" if there exists a non-empty subsequence with sum zero, otherwise output \\"No\\". -----Sample Input----- 5 3 -2 1 -1 2 -----Sample Output----- Yes In this case, the subsequence [3, -2, -1] sums to 0.","solution":"def zero_sum_subsequence_exists(lst): Determines if there exists a non-empty subsequence in lst whose sum is zero. Returns \\"Yes\\" if such a subsequence exists, otherwise \\"No\\". prefix_sum = 0 prefix_sums = set() for num in lst: prefix_sum += num if prefix_sum == 0 or prefix_sum in prefix_sums: return \\"Yes\\" prefix_sums.add(prefix_sum) return \\"No\\""},{"question":"Given an array of integers, return an array of the same length where each element at index `i` contains the product of all the numbers in the original array except the one at `i`. You must implement a solution that runs in O(n) time and without using division. Examples ```python Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Input: [0, 1, 2, 3] Output: [6, 0, 0, 0] Input: [-1, 1, 0, -3, 3] Output: [0, 0, 9, 0, 0] ``` # Constraints: - The length of the array will be at least 1 and will not exceed 10^5. - Each element in the array will be a valid integer within the range of [-100, 100].","solution":"def product_except_self(nums): Given an array of integers, returns an array of the same length where each element at index `i` contains the product of all the numbers in the original array except the one at `i`. Args: nums (List[int]): List of integers. Returns: List[int]: A list where each element is the product of all other elements in the original list. n = len(nums) # Initialize the result array with 1s result = [1] * n # Calculate the product of elements to the left of each index left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Calculate the product of elements to the right of each index and multiply with the left product right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Andrew loves candies and he is up to some fun strategy to distribute them among his friends. He keeps several stacks of candies, where each stack contains a different number of candies. Each stack can be identified by its unique positive integer representing the number of candies in it. He wants to distribute candies to his friends from one of the stacks in such a way that no friend gets candies in consecutive turns from the same stack. Define a \\"turn\\" as picking all the candies from a stack and the next turn cannot involve the same stack that was used previously. Andrew plans to continue this process until he has distributed candies from all the stacks exactly once. Andrew needs to know in how many ways he can distribute the candies satisfying the rule of no consecutive turns involving the same stack. Write a program to find the number of ways Andrew can achieve this. -----Input----- The first line contains an integer N (1 le N le 10), the number of stacks. The second line contains N distinct positive integers, where the i-th integer represents the number of candies in the i-th stack. Each integer will be less than 20. -----Output----- Output an integer, the number of ways Andrew can distribute the candies. -----Examples----- Sample Input 1: 2 1 3 Sample Output 1: 2 Sample Input 2: 3 1 2 3 Sample Output 2: 6","solution":"import itertools def count_ways_to_distribute_candies(N, stacks): Function to count the number of ways to distribute candies ensuring no consecutive turns using the same stack. if N <= 1: return 1 # Generate all possible permutations of distributing candies from the stack permutations = list(itertools.permutations(stacks)) valid_count = 0 for perm in permutations: if all(perm[i] != perm[i + 1] for i in range(len(perm) - 1)): valid_count += 1 return valid_count"},{"question":"Farmer John is planning to build a new rectangular sheep pen on his farm, using exactly F units of fencing material. He wants to maximize the area of this pen while using all of the fencing material. The pen must have integer dimensions. Can you help Farmer John determine the maximum possible area of the pen? -----Constraints----- - 4 ≦ F ≦ 10^6 - F is always even. -----Input----- The input is given from Standard Input in the following format: F -----Output----- Print the maximum possible area of the rectangular pen that Farmer John can build using exactly F units of fencing material. -----Sample Input----- 20 -----Sample Output----- 25 When the fence length is 20, considering possible dimensions of the rectangular pen: - 1 x 9 (Perimeter = 2(1 + 9) = 20, Area = 1 * 9 = 9) - 2 x 8 (Perimeter = 2(2 + 8) = 20, Area = 2 * 8 = 16) - 3 x 7 (Perimeter = 2(3 + 7) = 20, Area = 3 * 7 = 21) - 4 x 6 (Perimeter = 2(4 + 6) = 20, Area = 4 * 6 = 24) - 5 x 5 (Perimeter = 2(5 + 5) = 20, Area = 5 * 5 = 25) The maximum area possible is 25.","solution":"def max_area(F): Returns the maximum area of the rectangular pen that can be built with exactly F units of fencing material. max_area = 0 for width in range(1, F // 2): # width ranges from 1 to less than F/2 length = (F // 2) - width area = width * length if area > max_area: max_area = area return max_area # Example Usage: # if __name__ == \\"__main__\\": # F = int(input()) # print(max_area(F))"},{"question":"The Galvanic candy factory needs to ensure that each type of candy in their delivery trucks is distributed evenly to several store locations throughout the city. Each store should receive one type of candy, and every store must receive a different type of candy. However, the factory wants to minimize the travel distance of the trucks by utilizing the existing road network. The roads connect various locations in the city and can be traveled in either direction. Formulate an algorithm to determine the minimum total travel distance required to distribute the candies to all the stores, ensuring each store receives exactly one type of candy. The road network is represented as a graph with locations as nodes and roads as edges. The cost of each road (distance) is given. -----Input----- The first line contains two integers 1 leq N leq 5000 – the number of locations (nodes) – and N-1 leq M leq 10000 – the number of roads (edges). The next M lines each contain three integers u, v and d, where u and v are the endpoints of a road (0-indexed), and d is the travel distance of this road. -----Output----- The minimum total travel distance required to distribute the candies. -----Examples----- Sample Input: 4 4 0 1 1 0 2 2 0 3 3 1 3 4 Sample Output: 3","solution":"class DisjointSet: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) # Path compression return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def min_travel_distance(n, edges): edges.sort(key=lambda x: x[2]) dsu = DisjointSet(n) mst_cost = 0 edges_used = 0 for u, v, d in edges: if dsu.find(u) != dsu.find(v): dsu.union(u, v) mst_cost += d edges_used += 1 if edges_used == n - 1: break return mst_cost"},{"question":"Alex loves playing with dominoes. One day, he decided to place a row of n dominoes, each with two numbers on it, on the floor. Alex wants to check if he can arrange the dominoes so that they form a continuous chain where the numbers on touching ends match. Specifically, Alex wants to know if there is a permutation of the dominoes such that the second number of one domino matches the first number of the next domino in the row. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^4) — the number of dominoes. Each of the next n lines contains two space-separated integers a_i and b_i (1 ≤ a_i, b_i ≤ 10^4) — the numbers on the two ends of the i-th domino. -----Output----- Output \\"Yes\\" if Alex can arrange the dominoes to form a continuous chain, otherwise output \\"No\\". -----Examples----- Input 3 1 2 2 3 3 1 Output Yes Input 3 1 2 2 3 4 5 Output No -----Note----- Explanation of first test case: The dominoes can be arranged as (1-2), (2-3), (3-1). The numbers on the touching ends match, so the answer is \\"Yes\\". Explanation of second test case: There is no way to arrange the dominoes so that all touching ends match, so the answer is \\"No\\".","solution":"def can_form_chain(n, dominoes): from collections import defaultdict, deque # Build the graph graph = defaultdict(list) indegree = defaultdict(int) outdegree = defaultdict(int) for a, b in dominoes: graph[a].append(b) graph[b].append(a) outdegree[a] += 1 indegree[b] += 1 # Check for Eulerian path or cycle start_nodes = 0 end_nodes = 0 for node in set(a for a, b in dominoes) | set(b for a, b in dominoes): if abs(indegree[node] - outdegree[node]) > 1: return \\"No\\" elif outdegree[node] - indegree[node] == 1: start_nodes += 1 elif indegree[node] - outdegree[node] == 1: end_nodes += 1 # For Eulerian Path if not (start_nodes == end_nodes == 0 or start_nodes == end_nodes == 1): return \\"No\\" # Check connectivity def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited # Find the starting point start = dominoes[0][0] visited = bfs(start) for a, b in dominoes: if a not in visited or b not in visited: return \\"No\\" return \\"Yes\\""},{"question":"Given a list of integers, you need to determine if there exists a subset of the list which sums to a given target value. If such a subset exists, output \\"YES\\", otherwise output \\"NO\\". -----Input----- The first line of the input contains an integer t (1 leq t leq 10^2) — the number of test cases. The first line of each test case contains two integers n (1 leq n leq 20) — the number of integers in the list and k (1 leq k leq 10^9) — the target sum. The second line of each test case contains n space-separated integers representing the list, a_i (1 leq a_i leq 10^5). -----Output----- For each test case, output \\"YES\\" if there exists a subset of the list that sums to the target value, and \\"NO\\" otherwise. -----Examples----- Input 3 3 5 2 1 3 4 10 1 2 3 4 5 0 1 2 3 4 5 Output YES YES NO -----Note----- In the first test case, one possible subset of the list {2, 1, 3} that sums to 5 is {2, 3}. In the second test case, one possible subset of the list {1, 2, 3, 4} that sums to 10 is {1, 2, 3, 4}. In the third test case, since the list {1, 2, 3, 4, 5} doesn\'t have a subset that sums to 0, the output is \\"NO\\".","solution":"def subset_sum_exists(t, test_cases): from itertools import combinations results = [] for i in range(t): n, k = test_cases[i][0] array = test_cases[i][1] found = False # Check all possible subsets for subset_size in range(1, n + 1): for subset in combinations(array, subset_size): if sum(subset) == k: found = True break if found: break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of positive integers. You can remove exactly one element from the array. After removing one element, you need to find the sum of the remaining elements in the array. Determine the maximum possible sum of the remaining elements after removing exactly one element. -----Input----- The first line contains a single integer n (2 ≤ n ≤ 10^5) — the size of the array. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the elements of the array. -----Output----- Print a single integer — the maximum possible sum of the remaining elements after removing exactly one element. -----Examples----- Input 5 1 2 3 4 5 Output 14 Input 4 10 10 10 10 Output 30 Input 3 7 3 5 Output 12 -----Note----- In the first sample test, you can remove the element 1 and obtain the sum 2 + 3 + 4 + 5 = 14, which is the maximum possible sum after removing exactly one element. In the second sample test, since all elements are the same, removing any one of them will result in the sum 10 + 10 + 10 = 30. In the third sample test, you can remove the element 3 and obtain the sum 7 + 5 = 12, which is the maximum possible sum after removing exactly one element.","solution":"def max_possible_sum_after_removal(n, arr): Returns the maximum possible sum of the array after removing one element. Parameters: n (int): The size of the array arr (list of int): The elements of the array Returns: int: The maximum possible sum of the remaining elements total_sum = sum(arr) return total_sum - min(arr)"},{"question":"Read problems statements in Mandarin Chinese and Russian. You are given a list of N points in a 2D Cartesian plane. Find the number of unique right-angled triangles that can be formed using any three of these points such that the right angle is at the origin (0, 0). ------ Input ------ The first line of input contains a single integer N - the number of points. The next N lines contain two space-separated integers xi and yi - the coordinates of the ith point. ------ Output ------ Output the number of unique right-angled triangles that can be formed with the right angle at the origin. ------ Constraints ------ 1 ≤ N ≤ 100 : 22 points. 1 ≤ N ≤ 1000 : 23 points. 1 ≤ N ≤ 10^{5} : 55 points. -10^6 ≤ x_i, y_i ≤ 10^6 ------ Example ------ Input: 5 1 0 0 1 2 0 0 2 1 1 Output: 4 ------ Explanation ------ The valid triangles with the right angle at the origin are formed by points (1, 0), (0, 1); (2, 0), (0, 1); (1, 0), (0, 2); and (2, 0), (0, 2).","solution":"def count_right_angled_triangles(points): # Dictionary to count points on the x-axis and y-axis x_count = {} y_count = {} for x, y in points: if x == 0 and y == 0: continue # Skip the origin if x == 0: y_count[y] = y_count.get(y, 0) + 1 elif y == 0: x_count[x] = x_count.get(x, 0) + 1 # Calculate the number of right-angled triangles triangles = 0 for x_key in x_count.values(): for y_key in y_count.values(): triangles += x_key * y_key return triangles # Function to parse input and return the number of right-angled triangles def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) points = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(N)] print(count_right_angled_triangles(points))"},{"question":"Alex is given an array of positive integers a1, a2, ..., an and he wants to split this array into exactly k non-empty contiguous subarrays such that the maximum possible sum of the subarrays is minimized. Help Alex find the minimized maximum sum of the subarrays. -----Input----- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000). The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4). -----Output----- Print a single integer, the minimized maximum sum of the k subarrays. -----Examples----- Input 5 2 1 2 3 4 5 Output 9 Input 7 3 1 2 3 4 5 6 7 Output 11","solution":"def splitArray(nums, k): This function determines the minimized maximum sum of the subarrays. def can_split(nums, max_sum, k): current_sum = 0 subarrays = 1 for num in nums: if current_sum + num > max_sum: subarrays += 1 current_sum = num if subarrays > k: return False else: current_sum += num return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if can_split(nums, mid, k): right = mid else: left = mid + 1 return left def minimizedMaximumSum(n, k, array): return splitArray(array, k)"},{"question":"Discount Shopping You are on a shopping spree and have a list of items you want to buy. Each item comes with a specific price and some items offer a discount if purchased together. Your task is to calculate the minimum total cost required to purchase all the items on your list, taking advantage of any available discounts. You are given a list of items, each with its price, and a separate list of discount packages. Each discount package specifies a subset of items and a total discounted price for that subset. Write a program that computes the minimum total cost to buy all the items. Input The input consists of multiple lines: 1. The first line contains an integer n, the number of items (1 ≤ n ≤ 100). 2. The second line contains n space-separated integers, where the i-th integer is the price of the i-th item (1 ≤ price ≤ 10000). 3. The third line contains an integer m, the number of discount packages (0 ≤ m ≤ 50). 4. The next m lines each describe a discount package in the following format: - The first integer k is the number of items in this discount package. - The next k integers specify the 1-based indices of the items included in this package. - The last integer is the discounted price of the package (1 ≤ discounted price ≤ 100000). Output Output a single integer, the minimum total cost to purchase all the items. Sample Input 1: ``` 3 100 200 300 2 2 1 2 270 3 1 2 3 500 ``` Sample Output 1: ``` 500 ``` Sample Input 2: ``` 4 100 400 300 200 3 2 1 2 450 2 3 4 400 4 1 2 3 4 850 ``` Sample Output 2: ``` 850 ``` Explanation In Sample Input 1, the second discount package covers all three items at a total price of 500, which is cheaper than buying the items separately or using the first package.","solution":"def min_total_cost(n, prices, m, discount_packages): from itertools import combinations # Initialize the minimum cost to be the sum of individual item prices min_cost = sum(prices) # Generate all possible subsets of items all_sets = [] for i in range(1, n+1): for combo in combinations(range(n), i): all_sets.append(set(combo)) # Dictionary to store the minimum cost required to buy specific subsets of items. min_cost_dict = {} min_cost_dict[frozenset()] = 0 for items_set in all_sets: items_set = frozenset(items_set) current_min_cost = sum(prices[item] for item in items_set) for k, package_items, discounted_price in discount_packages: package_set = frozenset(idx-1 for idx in package_items) if package_set.issubset(items_set): residual_set = items_set - package_set min_cost_with_package = min_cost_dict[residual_set] + discounted_price if min_cost_with_package < current_min_cost: current_min_cost = min_cost_with_package min_cost_dict[items_set] = current_min_cost if items_set == frozenset(range(n)): min_cost = min(min_cost, current_min_cost) return min_cost"},{"question":"A company wants to optimize the process of delivering packages to customers. They want to know the minimal time needed to deliver all packages while adhering to the delivery personnel\'s working hours. Each delivery person is assigned to a specific route represented as a series of checkpoints, and they can only start and end their journey at specified times. You are provided with: - The length of the route, n, represented as checkpoints labeled from 1 to n. - The number of delivery personnel, m. - For each delivery person, their start time s_i, end time e_i, and the checkpoints they must visit are provided as a sequence of p_i integers, representing the checkpoints in order. The objective is to determine the minimal total delivery time needed for each delivery person to deliver all their packages, adhering to their starting and ending times. Each checkpoint visit takes 1 unit of time, and time is only counted for actual deliveries and not for waiting. Consider that each delivery person must start at the first specified checkpoint in their route and end at the last specified checkpoint. -----Input----- The first line contains two integers n and m (1 leq n leq 100, 1 leq m leq 100) — the number of checkpoints and the number of delivery personnel. For each of the next m lines, there are three integers s_i and e_i (0 leq s_i < e_i leq 1000) and an integer q_i (1 leq q_i leq n), followed by q_i integers representing the checkpoints in order. -----Output----- Print a single integer, the minimal total delivery time required for all personnel. -----Examples----- Input 5 2 0 10 3 1 3 5 5 15 4 2 1 4 5 Output 12 Input 6 3 1 8 2 1 6 0 9 3 1 3 6 3 12 4 2 3 5 6 Output 18 -----Note----- In the first example, the first delivery person visits checkpoints 1, 3, and 5 in 3 units of time. The second delivery person visits checkpoints 2, 1, 4, and 5 in 4 units of time. The total minimal delivery time needed is 12 units. In the second example, the combined deliveries of all personnel amount to a minimal total delivery time of 18 units considering the given start and end times and the specific order of checkpoints to visit.","solution":"def minimal_total_delivery_time(n, m, personnel): Returns the minimal total delivery time required for all personnel to deliver all packages. :param n: integer, the number of checkpoints :param m: integer, the number of delivery personnel :param personnel: list of tuples, each containing the start time, end time, and the checkpoints to be visited in order by the personnel :return: integer, the minimal total delivery time needed for all personnel total_delivery_time = 0 for s_i, e_i, checkpoints in personnel: total_delivery_time += len(checkpoints) return total_delivery_time # Example usage: n, m = 5, 2 personnel = [(0, 10, [1, 3, 5]), (5, 15, [2, 1, 4, 5])] print(minimal_total_delivery_time(n, m, personnel)) # Output: 7"},{"question":"During a clear night, Alex was laying on the grass looking at the starry sky, enjoying the view. His sister Mia approached and brought a puzzle with her. \\"Alex, I have a fun yet challenging riddle for you!\\" she said enthusiastically. \\"Go on, Mia. What\'s the riddle about?\\" Alex responded curiously. \\"Imagine you have a sequence of N integers. I want you to find the longest subsequence that has no more than K distinct integers. Sounds interesting, right?\\" Mia explained. \\"That does sound intriguing. Let me think about it,\\" said Alex as he started pondering. You are given the sequence of integers and the integer K. Write a program to find the length of the longest subsequence containing no more than K distinct integers. -----Input----- The first line of input contains two integers N and K (1 le N le 10^5, 1 le K le N), where N is the length of the sequence and K is the maximum number of distinct integers allowed in the subsequence. The second line contains N integers representing the sequence. -----Output----- Output the length of the longest subsequence containing no more than K distinct integers. -----Examples----- Sample Input: 7 2 1 2 1 2 3 3 4 Sample Output: 4 Explanation: The longest subsequence with no more than 2 distinct integers is [1, 2, 1, 2]. Sample Input: 5 3 1 2 3 4 5 Sample Output: 3 Explanation: The longest subsequence with no more than 3 distinct integers is [1, 2, 3].","solution":"def longest_subsequence_with_k_distinct(n, k, sequence): from collections import defaultdict start = 0 max_length = 0 count = defaultdict(int) for end in range(n): count[sequence[end]] += 1 while len(count) > k: count[sequence[start]] -= 1 if count[sequence[start]] == 0: del count[sequence[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a function to determine the length of the shortest contiguous subarray whose sum is greater than or equal to a given integer k. If no such subarray exists, return 0 instead. # Example **Input:** `nums = [2,3,1,2,4,3]` `k = 7` **Output:** `2` **Explanation:** The subarray `[4,3]` has the minimal length under the problem constraint. # Function Description Complete the min_subarray_len function in the editor below. `min_subarray_len` has the following parameter(s): Parameters: - `nums: List[int]` - an array of integers - `k: int` - the target sum Returns: - `int`: the length of the shortest subarray with the sum greater than or equal to `k`. # Constraints: - 1 leq len(nums) leq 10^5 - 1 leq nums[i] leq 10^4 - 1 leq k leq 10^9 # Example Input/Output: **Example 1:** **Input:** ``` nums = [1,1,1,1,1,1,1,1] k = 11 ``` **Output:** ``` 0 ``` **Explanation:** There is no subarray with sum greater than or equal to 11. **Example 2:** **Input:** ``` nums = [1,2,3,4,5] k = 11 ``` **Output:** ``` 3 ``` **Explanation:** The subarray `[3,4,5]` has the minimal length under the problem constraint.","solution":"def min_subarray_len(nums, k): Returns the length of the shortest contiguous subarray whose sum is greater than or equal to k. If no such subarray exists, return 0. n = len(nums) left = 0 cur_sum = 0 min_length = float(\'inf\') for right in range(n): cur_sum += nums[right] while cur_sum >= k: min_length = min(min_length, right - left + 1) cur_sum -= nums[left] left += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"# Background Sorting algorithms are fundamental in computer science. One such popular algorithm is the **insertion sort**. # Kata Your task is to write an implementation of the insertion sort algorithm. Given an array of numbers, you need to sort them in ascending order. Insertion sort works as follows: 1. Iterate through each element in the array (starting from the second element). 2. For each element, compare it to the previous elements and insert it into the correct position. 3. Repeat until the entire array is sorted. # Example ```python # Given the following list numbers = [9, 5, 1, 4, 3] # Applying insertion sort should yield insertion_sort(numbers) # => [1, 3, 4, 5, 9] ``` # Function Signature ```python def insertion_sort(arr: list[int]) -> list[int]: # Your code goes here ``` # Example Usage ```python numbers = [3, 7, 4, 9, 5, 2, 6, 1] print(insertion_sort(numbers)) # Output: [1, 2, 3, 4, 5, 6, 7, 9] ``` # Constraints - Your implementation should sort the array in-place, i.e., without creating a new array. - You should not use any built-in sorting functions.","solution":"def insertion_sort(arr: list[int]) -> list[int]: Sorts a list of integers in ascending order using the insertion sort algorithm. Args: arr: List of integers to be sorted. Returns: The same list, sorted in ascending order. # Traverse through 1 to len(arr) for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0..i-1], that are greater than key, to one position ahead # of their current position while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"A shipment company needs to efficiently load a fleet of trucks with packages. Each truck has a weight limit, and each package has a certain weight. The goal is to load the maximum number of packages onto a given truck without exceeding its weight limit. If two packages have the same weight, they can still both be loaded onto the truck as long as the weight limit is not exceeded. Given the weight limit of a truck and weights of available packages, determine the maximum number of packages that can be loaded onto the truck. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input contains an integer W (1 le W le 100000) denoting the weight limit of the truck. The second line contains an integer n (1 le n le 1000) representing the number of packages. The third line contains n space-separated integers w_i (1 le w_i le 10000) representing the weights of the packages. -----Output----- Output a single integer, denoting the maximum number of packages that can be loaded onto the truck without exceeding the weight limit W. -----Examples----- Sample Input: 50 5 10 20 30 40 50 Sample Output: 2 Sample Input: 100 7 15 25 35 45 55 65 75 Sample Output: 3","solution":"def max_packages(W, n, weights): Determine the maximum number of packages that can be loaded onto the truck without exceeding the weight limit W. Args: W (int): Weight limit of the truck. n (int): Number of packages. weights (list of int): Weights of the packages. Returns: int: Maximum number of packages that can be loaded onto the truck. weights.sort() count = 0 current_weight = 0 for weight in weights: if current_weight + weight <= W: current_weight += weight count += 1 else: break return count"},{"question":"You are given an undirected graph with N vertices labeled from 1 to N and M edges, where each edge forms a direct connection between two distinct vertices A and B. Each vertex represents a city, and each edge represents a road. Your task is to determine the minimum number of roads that need to be added to make the graph connected. A graph is considered connected if there is a path between any two vertices. Input Format First line contains 2 space-separated positive integers, N and M, denoting the number of vertices and edges, respectively. M lines follow. Each line contains 2 space-separated integers, A and B, indicating there\'s a road between city A and city B. Output Format Output a single integer representing the minimum number of roads required to make the entire graph connected. Constraints 1 ≤ N ≤ 100,000 0 ≤ M ≤ 200,000 1 ≤ A, B ≤ N SAMPLE INPUT 6 4 1 2 2 3 4 5 5 6 SAMPLE OUTPUT 1 Explanation In the provided sample input, we have 6 cities and 4 roads, forming two connected components: {1, 2, 3} and {4, 5, 6}. To make the graph connected, we need at least 1 road, which can connect any city in the first component to any city in the second component. For instance, adding a road between cities 3 and 4 will connect the entire graph.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def minimum_roads_to_connect(N, M, edges): parent = [i for i in range(N+1)] rank = [0] * (N+1) for edge in edges: union(parent, rank, edge[0], edge[1]) components = set() for i in range(1, N+1): components.add(find(parent, i)) return len(components) - 1 # Sample usage # print(minimum_roads_to_connect(6, 4, [(1, 2), (2, 3), (4, 5), (5, 6)])) # Output: 1"},{"question":"Jamie owns a small business selling handcrafted jewelry. One of the unique aspects of Jamie\'s business is that all the jewelry pieces are made using a combination of three different types of beads: Gold, Silver, and Bronze. Each day, Jamie receives orders for various jewelry pieces, each described by a desired ratio of these beads. Jamie wants to prepare the beads in advance to fulfill the orders, but there is a constraint: Jamie can only prepare a certain number of beads each day due to limited production capacity. Given the production capacity and the orders for the next n days, determine if it is possible for Jamie to fulfill all the orders without exceeding the production capacity on any given day. If it is possible, return \\"YES\\", otherwise return \\"NO\\". -----Input----- The first line contains a single integer n (1 le n le 100), the number of days. The second line contains a single integer p (1 le p le 10^4), the production capacity per day. Each of the next n lines contains three space-separated integers g, s, and b (1 le g, s, b le 100), representing the number of Gold, Silver, and Bronze beads required for the order on that day. -----Output----- Output a single word: \\"YES\\" if it is possible to fulfill all the orders without exceeding the production capacity on any day, otherwise output \\"NO\\". -----Examples----- Sample Input 1: 3 100 30 20 40 50 30 10 40 35 20 Sample Output 1: YES Sample Input 2: 2 90 50 30 20 30 40 30 Sample Output 2: NO","solution":"def can_fulfill_orders(n, p, orders): for order in orders: g, s, b = order if g + s + b > p: return \\"NO\\" return \\"YES\\" # Example usage: # n = 3 # p = 100 # orders = [(30, 20, 40), (50, 30, 10), (40, 35, 20)] # print(can_fulfill_orders(n, p, orders)) # Output: YES"},{"question":"You are a strategic planner for a city with the task of designing its electrical grid. The city has `N` power plants and `M` cities that need electricity. Each power plant can supply electricity to certain cities, and we want to ensure that every city gets electricity from exactly one power plant to minimize dependencies. The power plants and cities are connected by `M` power lines, each described by three integers `u, v, w`. Here, `u` is the index of the power plant, `v` is the index of the city, and `w` is the cost of transmitting electricity along that line. You need to determine the minimum total cost to supply electricity to all cities, with each city connected to exactly one power plant. If it\'s not possible to supply electricity to each city, return `-1`. -----Input----- The first line contains two positive integers `N` and `M` (1 ≤ N, M ≤ 2000), the number of power plants and cities respectively. The next `M` lines contain three integers each: `u`, `v`, and `w` (1 ≤ u ≤ N, 1 ≤ v ≤ M, 1 ≤ w ≤ 10^9), representing a connection with cost `w` from power plant `u` to city `v`. -----Output----- Print a single integer, the minimum total cost to supply electricity to all cities, or `-1` if it is not possible. -----Examples----- Sample Input: 2 3 1 1 10 1 2 15 2 2 20 2 3 30 Sample Output: 40 In this example, connecting power plant 1 to city 1 with cost 10, power plant 1 to city 2 with cost 15, and power plant 2 to city 3 with cost 15 : 10 + 15 + 15 = 40 is the minimum cost.","solution":"import heapq def min_cost_to_supply_electricity(N, M, connections): Determine the minimum total cost to supply electricity to all cities (or -1 if not possible). :param N: int - number of power plants :param M: int - number of cities :param connections: list of tuples (u, v, w) - each tuple represents a connection with cost `w` from power plant `u` to city `v` :return: int - minimum total cost, or -1 if it is not possible to supply electricity to all cities # Create a list to store the min cost to connect each city to a power plant min_cost = [float(\'inf\')] * M # Fill the min_cost list with the minimum cost from the input connections for u, v, w in connections: v -= 1 # change city index to 0-based for convenience min_cost[v] = min(min_cost[v], w) # find the minimum cost for each city # Check if all cities can be connected if any(cost == float(\'inf\') for cost in min_cost): return -1 # Sum the minimum costs to connect all cities return sum(min_cost)"},{"question":"A group of friends is playing a game in a rectangular grid with dimensions n × m, which consists of n rows and m columns (1 ≤ n, m ≤ 10^3). Each cell in the grid represents a field, and some fields are special fields containing treasures. The aim is to collect as many treasures as possible. The friends, starting from cell (1, 1), can move to the right or downward to adjacent cells in one step. Upon visiting a cell containing a treasure, they collect it and cannot collect it again even if they visit the cell multiple times. You are given the coordinates of the treasure cells and need to find the maximum number of treasures that can be collected if the friends were to move optimally from the starting cell to the final cell (n, m). Input The first line contains three integers n, m, and q (1 ≤ q ≤ 10^5), representing the dimensions of the grid and the number of cells containing treasures. Each of the next q lines contains two integers xi and yi (1 ≤ xi ≤ n, 1 ≤ yi ≤ m), identifying the row and column of the cells containing treasures. Output Print one integer, the maximum number of treasures that can be collected when the friends move optimally from cell (1, 1) to cell (n, m). Examples Input 3 3 3 1 2 2 2 3 3 Output 3 Input 4 4 2 2 3 3 4 Output 2 Input 5 5 5 1 5 2 4 3 3 4 2 5 1 Output 1 Note In the first sample, a possible optimal path to collect all treasures is: (1, 1) → (1, 2) → (2, 2) → (3, 2) → (3, 3). In the second sample, a possible optimal path to collect all treasures is: (1, 1) → (2, 1) → (2, 2) → (2, 3) → (3, 3) → (3, 4) → (4, 4). In the third sample, the path can be: (1, 1) → (1, 2) → (1, 3) → (1, 4) → (1, 5), collecting one treasure.","solution":"def max_treasures(n, m, q, treasures): grid = [[0] * m for _ in range(n)] # Place treasures in the grid for x, y in treasures: grid[x-1][y-1] = 1 # DP table to store the maximum number of treasures that can be collected dp = [[0] * m for _ in range(n)] # Initialize the dp table dp[0][0] = grid[0][0] # Fill the dp table for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"The game of sudoku is played on a 9 × 9 grid that is divided into nine 3 × 3 subgrids. Each subgrid must contain the digits 1 to 9 without repetition. Additionally, each digit from 1 to 9 must appear exactly once in each row and each column of the entire 9 × 9 grid. In this problem, you will be given a partially filled sudoku grid, where empty cells are denoted by the number 0. Your task is to complete the grid in such a way that it satisfies the sudoku rules mentioned above. Input The input consists of nine lines, each containing nine integers separated by spaces. Each integer will be in the range from 0 to 9, inclusive, where 0 denotes an empty cell. Output Print the completed sudoku grid in the same format, with nine lines each containing nine integers separated by spaces. Example Input 5 3 0 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 Output 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9","solution":"def solve_sudoku(board): def is_valid(board, row, col, num): for i in range(9): if board[row][i] == num or board[i][col] == num: return False if board[3 * (row // 3) + i // 3][3 * (col // 3) + i % 3] == num: return False return True def solve(board): for i in range(9): for j in range(9): if board[i][j] == 0: for num in range(1, 10): if is_valid(board, i, j, num): board[i][j] = num if solve(board): return True board[i][j] = 0 return False return True solve(board) return board def format_sudoku_output(board): return \'n\'.join([\' \'.join(map(str, row)) for row in board]) def read_sudoku_input(): input_board = [] for _ in range(9): input_board.append(list(map(int, input().split()))) return input_board if __name__ == \\"__main__\\": board = read_sudoku_input() solved_board = solve_sudoku(board) print(format_sudoku_output(solved_board))"},{"question":"An online bookstore keeps track of its book inventory and sales data using a database. Each book in the inventory has a unique ID, title, author, genre, price, and the number of copies currently in stock. When a customer places an order, the bookstore records the book ID, the number of copies purchased, and the total sales amount for that order. You are tasked with designing a simplified inventory management system that helps the bookstore maintain its inventory, process sales, and generate sales reports. Implement a class `Bookstore` with the following functionalities: 1. **Add a Book to the Inventory**: This feature allows the bookstore to add a new book to its inventory. If the book with the same ID already exists, the details of the book should be updated. 2. **Process a Sale**: This feature records a sale by decreasing the stock of the sold book and recording the sales data. If sufficient stock is not available, the sale should not be processed. 3. **Generate Sales Report**: This feature generates a sales report showing the total sales for each genre and the total sales amount for the bookstore. Your class should have the following methods: - `add_book(book_id: int, title: str, author: str, genre: str, price: float, stock: int) -> None`: Adds a new book or updates an existing book in the inventory. - `process_sale(book_id: int, copies: int) -> bool`: Processes a sale by decreasing the stock and recording the sales data. Returns `True` if the sale was successful, or `False` if there was insufficient stock. - `generate_sales_report() -> Dict[str, Dict[str, float]]`: Generates a sales report showing the total sales for each genre and the total sales amount for the bookstore. The report should be in the following format: ``` { \\"genre1\\": { \\"total_copies_sold\\": total_copies_for_genre1, \\"total_sales_amount\\": total_sales_amount_for_genre1 }, \\"genre2\\": { \\"total_copies_sold\\": total_copies_for_genre2, \\"total_sales_amount\\": total_sales_amount_for_genre2 }, ... \\"total_sales\\": total_sales_amount_for_all_genres } ``` **Constraints:** - Each book ID is unique. - Prices and sales amounts are positive floating-point numbers. - Stock and copies sold are non-negative integers. - There will be no transactions with floating-point inaccuracies. **Example Usage:** ```python bookstore = Bookstore() bookstore.add_book(1, \\"Book One\\", \\"Author One\\", \\"Fiction\\", 10.99, 50) bookstore.add_book(2, \\"Book Two\\", \\"Author Two\\", \\"Science\\", 15.99, 30) bookstore.process_sale(1, 5) # True, 5 copies sold bookstore.process_sale(2, 3) # True, 3 copies sold bookstore.generate_sales_report() # Expected output { \\"Fiction\\": { \\"total_copies_sold\\": 5, \\"total_sales_amount\\": 54.95 }, \\"Science\\": { \\"total_copies_sold\\": 3, \\"total_sales_amount\\": 47.97 }, \\"total_sales\\": 102.92 } ```","solution":"from typing import Dict class Bookstore: def __init__(self): self.inventory = {} self.sales = {} def add_book(self, book_id: int, title: str, author: str, genre: str, price: float, stock: int) -> None: self.inventory[book_id] = { \\"title\\": title, \\"author\\": author, \\"genre\\": genre, \\"price\\": price, \\"stock\\": stock } self.sales[book_id] = { \\"total_copies_sold\\": 0, \\"total_sales_amount\\": 0.0 } def process_sale(self, book_id: int, copies: int) -> bool: if book_id in self.inventory and self.inventory[book_id][\\"stock\\"] >= copies: self.inventory[book_id][\\"stock\\"] -= copies self.sales[book_id][\\"total_copies_sold\\"] += copies self.sales[book_id][\\"total_sales_amount\\"] += self.inventory[book_id][\\"price\\"] * copies return True return False def generate_sales_report(self) -> Dict[str, Dict[str, float]]: sales_report = {} total_sales_amount = 0.0 for book_id, sales_data in self.sales.items(): genre = self.inventory[book_id][\\"genre\\"] if genre not in sales_report: sales_report[genre] = { \\"total_copies_sold\\": 0, \\"total_sales_amount\\": 0.0 } sales_report[genre][\\"total_copies_sold\\"] += sales_data[\\"total_copies_sold\\"] sales_report[genre][\\"total_sales_amount\\"] += sales_data[\\"total_sales_amount\\"] total_sales_amount += sales_data[\\"total_sales_amount\\"] sales_report[\\"total_sales\\"] = total_sales_amount return sales_report"},{"question":"You are given an array of integers where each integer represents the height of a person standing in a queue. A person can see the front if all the people in front of them are shorter. Determine the number of people who can see the front of the queue. -----Input----- - The first line of input contains a single integer N denoting the number of people in the queue. - The second line contains N space-separated integers h_1, h_2, ldots, h_N denoting the heights of the people in the queue. -----Output----- Print a single integer representing the number of people who can see the front of the queue. -----Constraints----- - 1 le N le 10^3 - 1 le h_i le 10^5 for each valid i -----Example Input----- 5 140 150 130 160 140 -----Example Output----- 3 -----Explanation----- People at positions 1, 2, and 4 can see the front: - Person at position 1 can see the front because there is no one in front of them. - Person at position 2 can see the front because the height 140 (person at position 1) is less than 150. - Person at position 3 cannot see the front because the height 150 (person at position 2) is taller than 130. - Person at position 4 can see the front because the heights 140, 150, and 130 (persons at positions 1, 2, and 3) are all shorter than 160. - Person at position 5 cannot see the front because the height 160 (person at position 4) is taller than 140.","solution":"def count_people_seeing_front(N, heights): Returns the number of people who can see the front of the queue. Parameters: N (int): Number of people in the queue. heights (list of int): Heights of the people in the queue. Returns: int: Number of people who can see the front. max_height = 0 count = 0 for height in heights: if height > max_height: max_height = height count += 1 return count"},{"question":"You are organizing a concert and have sold n tickets, each for a specific seat. Seats are arranged in a single row and are numbered consecutively from 1 to n. Each seat can either be occupied by a guest who has already arrived or be empty, waiting for a guest to arrive. As the organizer, you want to maximize comfort for the guests who arrive later by ensuring that they can sit as far as possible from the nearest occupied seat. Create an algorithm that determines the optimal seating position for a new guest such that the distance to the nearest occupied seat is maximized. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the total number of seats. The second line contains n integers where the i-th integer is 0 if the seat is empty and 1 if the seat is occupied. -----Output----- Output a single integer — the position number of the seat that the next guest should take to maximize their distance from the nearest occupied seat. If there are multiple optimal seats, output the smallest position number among them. -----Examples----- Input 10 1 0 0 0 0 0 1 0 0 0 Output 4 Input 5 0 1 0 0 0 Output 5 Input 7 1 0 0 0 0 0 0 Output 7 Input 6 0 0 0 0 0 1 Output 1 -----Note----- In the first example, placing the guest in seat 4 ensures they are maximally far from both occupied seats (1 and 6). In the second example, placing the guest in seat 5 ensures the maximum distance from the occupied seat (2). In the third example, placing the guest in seat 7 maximizes the distance from the occupied seat (1). In the fourth example, placing the guest in seat 1 maximizes the distance from the occupied seat (6).","solution":"def find_optimal_seat(n, seats): max_distance = -1 optimal_seat = -1 for i in range(n): if seats[i] == 0: left_distance = right_distance = float(\'inf\') # Find distance to the nearest occupied seat on the left for j in range(i, -1, -1): if seats[j] == 1: left_distance = i - j break # Find distance to the nearest occupied seat on the right for j in range(i, n): if seats[j] == 1: right_distance = j - i break # Calculate the distance to the nearest occupied seat distance = min(left_distance, right_distance) if distance > max_distance: max_distance = distance optimal_seat = i + 1 # Convert to 1-based index return optimal_seat"},{"question":"# Task: You have to write a function `rotate_matrix` that takes a 2D list (matrix) of integers and returns a new matrix which is the original matrix rotated 90 degrees clockwise. * If the input is empty, the function should return an empty list. # Examples: rotate_matrix([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]): [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] rotate_matrix([ [1, 2], [3, 4], [5, 6] ]): [ [5, 3, 1], [6, 4, 2] ] ```Note: The input matrix will always be a valid 2D list of integers.```","solution":"def rotate_matrix(matrix): Rotates a given 2D list (matrix) 90 degrees clockwise. Parameters: matrix (list of list of int): A 2D list representing the matrix to rotate. Returns: list of list of int: The rotated matrix. if not matrix: return [] return [list(row) for row in zip(*matrix[::-1])]"},{"question":"You are given a string containing a sequence of characters. Your task is to write a program that generates all possible permutations of the string and filters the permutations to provide only those that are valid palindromes. A palindrome is a sequence that reads the same backward as forward, such as \\"level\\" or \\"radar\\". Constraints: * The input string consists of lowercase English letters. * 1 ≤ length of string ≤ 10 Input: The input is a single line containing a string of lowercase English letters. Output: Print each valid palindrome permutation in a separate line. If there are no valid palindromes, print \\"No palindromes found\\". Example: Input: aabb Output: abba baab Input: abc Output: No palindromes found Notes: - You may print the permutations in any order. - Characters may repeat in the input string.","solution":"from itertools import permutations def is_palindrome(s): Check if the string s is a palindrome. return s == s[::-1] def generate_palindrome_permutations(s): Generate all unique palindrome permutations of the string s. unique_permutations = set(permutations(s)) palindrome_permutations = [\\"\\".join(p) for p in unique_permutations if is_palindrome(\\"\\".join(p))] if palindrome_permutations: for pal in palindrome_permutations: print(pal) else: print(\\"No palindromes found\\")"},{"question":"You are given Q queries, where each query consists of an integer X. For each query, determine the number of distinct pairs [a, b] (a ≤ b) such that a and b satisfy the following conditions: * a and b are both prime numbers. * a + b is equal to X. Input format: The input is given in the following format: Q X_1 X_2 : X_Q * The first line contains a single integer Q, the number of queries. * The next Q lines each contain one integer X_i, representing the sum to be considered for each query. Constraints: * 1 ≤ Q ≤ 10^5 * 2 ≤ X ≤ 10^5 Output format: For each query, output the number of distinct pairs [a, b] that satisfy the given conditions, in separate lines. Example input: 3 10 6 8 Example output: 2 1 1 Explanation: For the first query with X=10, the pairs [3, 7] and [5, 5] satisfy the conditions, so the output is 2. For the second query with X=6, the pair [3, 3] satisfies the conditions, so the output is 1. For the third query with X=8, the pair [3, 5] satisfies the conditions, so the output is 1.","solution":"def sieve(limit): Generate a list of boolean values indicating whether numbers from `0` to `limit` are prime. is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False for num in range(2, int(limit**0.5) + 1): if is_prime[num]: for multiple in range(num*num, limit + 1, num): is_prime[multiple] = False return is_prime def prime_pairs_count(x, primes_set): Count the number of distinct pairs of prime numbers (a, b) such that a + b = x. count = 0 for a in range(2, x//2 + 1): b = x - a if a in primes_set and b in primes_set and a <= b: count += 1 return count def solution(queries): Given a list of integers queries, return a list of counts of distinct prime pairs for each query. max_x = max(queries) is_prime = sieve(max_x) primes_set = {i for i, prime in enumerate(is_prime) if prime} results = [] for x in queries: results.append(prime_pairs_count(x, primes_set)) return results if __name__ == \\"__main__\\": Q = int(input().strip()) queries = [int(input().strip()) for _ in range(Q)] results = solution(queries) for result in results: print(result)"},{"question":"Given a sequence of n integers, you need to determine the maximum sum of any contiguous subarray of at most length l. The sum of the elements in a subarray is simply the sum of all its individual elements. The length of a subarray is the total number of elements it contains. Your task is to find the highest possible sum of any subarray that does not exceed the length l. Input The first line contains two integers n and l (1 ≤ n ≤ 2 * 10^4, 1 ≤ l ≤ n) — the length of the array and the maximum allowable subarray length. The second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4) — the elements of the array. Output Print a single integer — the maximum sum of any contiguous subarray of length at most l. Examples Input 5 3 1 2 3 0 -1 Output 6 Input 4 2 -1 2 -3 4 Output 4 Explanation In the first example, the optimal subarray is [1, 2, 3] with sum 6. Other subarrays with length at most 3 have smaller sums. In the second example, the optimal subarray could be [2] or [4], each with a sum of 2 and 4 respectively. The maximum of these sums is 4.","solution":"def max_contiguous_subarray_sum(n, l, array): Returns the maximum sum of any contiguous subarray of length at most l. :param n: Length of the array :param l: Maximum allowable subarray length :param array: List of integers representing the array :return: Maximum sum of any contiguous subarray of length at most l max_sum = -float(\'inf\') current_sum = 0 # Iterate over each possible subarray length from 1 to l for length in range(1, l + 1): # Reset the current_sum for the new length and calculate the sum of the first subarray current_sum = sum(array[:length]) max_sum = max(max_sum, current_sum) # Now, use sliding window to calculate sums of subsequent subarrays of this length for i in range(length, n): current_sum += array[i] - array[i - length] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Alice and Bob love playing games. Today, Bob gives Alice a challenge to test her ability with string manipulations. Bob provides a string, s, consisting only of lowercase alphabets. He says Alice needs to perform the following operations: - Find the total number of distinct substrings of length k in the string s. Note: A substring is a contiguous sequence of characters within a string. Your task is to help Alice by writing a function that takes the string s and an integer k as input and outputs the total number of distinct substrings of length k. Input: The first line contains an integer k. The second line contains the string, s. Output: Output the total number of distinct substrings of length k. Constraints: 1 ≤ k ≤ length of string s ≤ 100 SAMPLE INPUT 3 ababc SAMPLE OUTPUT 3 Explanation: The distinct substrings of length 3 in \\"ababc\\" are \\"aba\\", \\"bab\\", and \\"abc\\". There are 3 distinct substrings, so the output is 3.","solution":"def count_distinct_substrings(k, s): Returns the number of distinct substrings of length k in the string s. if k > len(s): return 0 substrings = set() for i in range(len(s) - k + 1): substrings.add(s[i:i+k]) return len(substrings)"},{"question":"Write a function `sum_of_subsets` that takes an array of unique integers `arr` and a target integer `target`. The function should return all unique subsets of `arr` that sum up to the target. The function should return the subsets in a list of lists, with each individual subset being a sorted list. The order of the subsets in the result does not matter. For example: ```python sum_of_subsets([2, 4, 6, 10], 16) # [[6, 10], [2, 4, 10]] sum_of_subsets([2, 3, 7, 8], 10) # [[2, 8], [3, 7]] sum_of_subsets([1, 2, 3, 4, 5], 5) # [[1, 4], [2, 3], [5]] ``` *If there are no subsets that add up to the target, return an empty list.* *The function should handle inputs with array length up to 20 and target values up to 100.*","solution":"def sum_of_subsets(arr, target): def find_subsets(i, current_subset, current_sum): if current_sum == target: result.append(sorted(current_subset)) return if current_sum > target or i >= len(arr): return # Include the current element find_subsets(i + 1, current_subset + [arr[i]], current_sum + arr[i]) # Exclude the current element find_subsets(i + 1, current_subset, current_sum) result = [] find_subsets(0, [], 0) return result"},{"question":"Given an integer N, write an efficient function to compute the sum of squares of the first N natural numbers. The sum of squares of first N natural numbers is given by the formula: S(N) = 1^2 + 2^2 + 3^2 + ... + N^2 You need to implement the function sumOfSquares() that takes an integer N as input and returns the sum of squares of the first N natural numbers. Example 1: Input: N = 3 Output: 14 Explanation: 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 Example 2: Input: N = 5 Output: 55 Explanation: 1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 1 + 4 + 9 + 16 + 25 = 55 Your Task: You do not need to read input or print anything. Your task is to complete the function sumOfSquares() which takes the integer N as input and returns the sum of squares of the first N natural numbers. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5","solution":"def sumOfSquares(N): Function to compute the sum of squares of the first N natural numbers. Args: N (int): The number of first natural numbers to compute the sum of squares. Returns: int: The sum of squares of the first N natural numbers. return N * (N + 1) * (2 * N + 1) // 6"},{"question":"A string is called balanced if it contains an equal number of opening and closing parentheses in the correct order. For example, the strings \\"()()\\", \\"(())\\", and \\"()(()())\\" are balanced. Given a string consisting of only the characters \'(\' and \')\', determine the minimum number of parentheses to be added to make the string balanced. -----Input----- The first line contains the number of test cases t (1 leq t leq 10^3). Each of the next t lines contains a string s with length 1 leq |s| leq 100. -----Output----- For each of the t test cases, print a single integer representing the minimum number of parentheses to be added to make the string balanced. -----Examples----- Input 3 () )( (()) Output 0 2 1 -----Note----- Explanation of some test cases: In the first test case, the string \\"()\\" is already balanced, so no additional parentheses are needed. In the second test case, the string \\")(\\" needs one opening parenthesis at the beginning and one closing parenthesis at the end to become balanced. In the third test case, the string \\"(()\\" needs one closing parenthesis at the end to become balanced.","solution":"def min_parentheses_to_balance(t, test_cases): def balance_count(s): open_count = close_needed = 0 for char in s: if char == \'(\': open_count += 1 else: # char == \')\' if open_count > 0: open_count -= 1 else: close_needed += 1 return open_count + close_needed results = [] for s in test_cases: results.append(balance_count(s)) return results"},{"question":"You are given a binary tree where each node has an integer value. Your task is to write a function to find the maximum path sum. A path in a binary tree is a series of connected nodes where each node can only be visited once, and it does not need to pass through the root. The path sum is the sum of the values of the nodes in the path. The maximum path sum is the highest sum obtained from any path in the binary tree. Input will consist of the binary tree represented as a nested list, where each sublist represents a node and its children. For example: ``` [1, [2, [4], [5]], [3, [6], [7]] ] ``` represents the following binary tree: ``` 1 / 2 3 / / 4 5 6 7 ``` Output should be a single integer representing the maximum path sum. Example 1: Input: tree = [1, [2, [4], [5]], [3, [6], [7]]] Output: 18 # The maximum path sum is 6 -> 3 -> 1 -> 2 -> 5 Example 2: Input: tree = [-10, [9], [20, [15], [7]]] Output: 42 # The maximum path sum is 15 -> 20 -> 7 Note: You may assume the binary tree has at least one node, and the node values are within the range of a 32-bit signed integer.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nested_list): if not nested_list: return None node = TreeNode(nested_list[0]) if len(nested_list) > 1 and nested_list[1]: node.left = build_tree(nested_list[1]) if len(nested_list) > 2 and nested_list[2]: node.right = build_tree(nested_list[2]) return node def max_path_sum(root): def helper(node): if not node: return 0, float(\'-inf\') left_single, left_max = helper(node.left) right_single, right_max = helper(node.right) max_single = max(left_single + node.val, right_single + node.val, node.val) max_top = max(max_single, left_single + node.val + right_single) max_path = max(left_max, right_max, max_top) return max_single, max_path return helper(root)[1] def find_max_path_sum(tree_nested_list): root = build_tree(tree_nested_list) return max_path_sum(root)"},{"question":"Given a string consisting of alphabets and digits, check if it is a valid Password. A string is considered a valid password if it has: - At least 6 characters and at most 12 characters. - At least one uppercase letter [A-Z]. - At least one lowercase letter [a-z]. - At least one digit [0-9]. - No spaces. Write a function `isValidPassword()` that takes the string `password` as input and returns `True` if the string is a valid password, else returns `False`. Example 1: Input: password = \\"Abc123\\" Output: True Explanation: The given password meets all the criteria: it is 6 characters long, contains at least one uppercase letter, one lowercase letter, and one digit, and has no spaces. Example 2: Input: password = \\"abc123\\" Output: False Explanation: The given password does not contain an uppercase letter. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `isValidPassword()` which takes a string `password` as input parameter and returns a boolean value based on the validity of the password. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - The input string length is between 1 and 100 inclusive.","solution":"def isValidPassword(password): Returns True if the password is valid, otherwise returns False. if not (6 <= len(password) <= 12): return False has_upper = has_lower = has_digit = False for char in password: if char.isdigit(): has_digit = True elif char.isupper(): has_upper = True elif char.islower(): has_lower = True elif char.isspace(): return False return has_upper and has_lower and has_digit"},{"question":"You are given a list of integers and a target integer. Your task is to count the number of distinct pairs (i, j) in the array such that `nums[i] + nums[j]` equals the target. Ensure that the solution has O(n) time complexity. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with an integer n denoting the size of the array. The next line contains n integers representing the elements of the array. The last line contains the target integer. ------ Output ------ For each test case, output a single line containing the number of distinct pairs that add up to the target integer. ------ Constraints: ------ 1 ≤ T ≤ 50 1 ≤ n ≤ 10^5 -10^9 ≤ nums[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9 ----- Sample Input 1 ------ 2 4 1 5 7 -1 6 4 1 5 7 -1 10 ----- Sample Output 1 ------ 2 1 ----- Explanation 1 ------ For the first test case: The pairs that add up to 6 are (1, 5) and (7, -1). For the second test case: The only pair that adds up to 10 is (1, 9) (which doesn\'t exist in our case). Hence the output is 1.","solution":"def count_pairs(nums, target): Returns the number of distinct pairs (i, j) such that nums[i] + nums[j] = target. num_counts = {} count = 0 for num in nums: complement = target - num if complement in num_counts: count += num_counts[complement] if num in num_counts: num_counts[num] += 1 else: num_counts[num] = 1 return count def solve(test_cases): Handle multiple test cases and return the results as a list. results = [] for nums, target in test_cases: results.append(count_pairs(nums, target)) return results"},{"question":"In language X, words are classified as \\"happy\\" or \\"sad\\" based on a specific pattern. A word is considered \\"happy\\" if it contains consecutive identical letters (that is, at least one set of two or more identical letters appearing consecutively), otherwise, it is considered \\"sad\\". Write a program that determines whether a given word is \\"happy\\" or \\"sad\\". -----Constraints----- - The input is a string of length between 1 and 1000, inclusive. - The string contains only lowercase English letters. -----Input----- Input is given from Standard Input in the following format: word -----Output----- Print \\"happy\\" if the word is happy, otherwise print \\"sad\\". -----Sample Input----- bookkeeper -----Sample Output----- happy Explanation: \\"bookkeeper\\" is happy because it contains consecutive identical letters \\"oo\\", \\"kk\\", and \\"ee\\". -----Sample Input----- unique -----Sample Output----- sad Explanation: \\"unique\\" is sad because it contains no consecutive identical letters.","solution":"def classify_word(word): Determines if a word is \\"happy\\" or \\"sad\\" based on the presence of consecutive identical letters. Args: word (str): The word to classify. Returns: str: \\"happy\\" if the word has consecutive identical letters, otherwise \\"sad\\". for i in range(1, len(word)): if word[i] == word[i - 1]: return \\"happy\\" return \\"sad\\""},{"question":"Alice and Bob are playing a game with a sequence of non-negative integers. They take turns where each player can remove either the entire sequence or one integer from the sequence at each turn. Alice always starts first. The player who removes the last integer or sequence from the list wins the game. Given the initial sequence of integers, determine who will win the game if both players play optimally. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the length of the sequence. The second line contains n non-negative integers, representing the sequence (0 ≤ each integer ≤ 1000). -----Output----- Output on a single line: \\"Alice\\" (without the quotes), if Alice will win the game optimally. \\"Bob\\" (without the quotes), if Bob will win the game optimally. -----Examples----- Input 3 1 2 3 Output Alice Input 4 1 1 1 1 Output Alice Input 2 0 0 Output Bob","solution":"def find_winner(n, sequence): Determines the winner of the game based on the sequence of integers. Parameters: n (int): The length of the sequence. sequence (list of int): The sequence of non-negative integers. Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins. if n == 1: return \\"Alice\\" if all(x == 0 for x in sequence): return \\"Bob\\" return \\"Alice\\""},{"question":"You have been tasked with developing a new inventory management system. One of the key features is to track the usage of certain items over a given period to ensure stock levels are accurately maintained. For this purpose, you need to create a function `inventory_usage()`. This function will calculate the total usage of items and determine if the maximum daily usage of any item exceeds a certain threshold. The function will receive the following arguments: - `usage_data`: a dictionary where each key is an item name (string) and the associated value is a list of integers representing the daily usage of that item. - `threshold`: an integer representing the maximum daily usage allowed for any single item. The function should return a tuple containing: 1. The total usage of all items over the given period. 2. A boolean value indicating whether the maximum daily usage of any item exceeds the `threshold`. For example, given the `usage_data` and `threshold`: ```python usage_data = { \'widgets\': [5, 3, 7, 10], \'gadgets\': [4, 8, 2, 1], \'thingamajigs\': [9, 1, 5, 7] } threshold = 8 ``` The function `inventory_usage(usage_data, threshold)` should return: ```python (62, True) ``` Explanation: 1. The total usage is calculated by summing up the daily usage of all items: - widgets: 5 + 3 + 7 + 10 = 25 - gadgets: 4 + 8 + 2 + 1 = 15 - thingamajigs: 9 + 1 + 5 + 7 = 22 - Total usage = 25 + 15 + 22 = 62 2. The maximum daily usage of any item is 10 (widgets), which exceeds the threshold of 8, hence the boolean value is `True`. Additional examples: ```python usage_data = { \'itemsA\': [2, 3, 5], \'itemsB\': [1, 0, 4] } threshold = 6 inventory_usage(usage_data, threshold) ----> (15, False) usage_data = { \'productX\': [12, 5, 9], \'productY\': [3, 7, 10] } threshold = 10 inventory_usage(usage_data, threshold) ----> (46, True) ```","solution":"def inventory_usage(usage_data, threshold): Calculate the total usage of items and determine if any single usage exceeds the threshold. :param usage_data: Dictionary where keys are item names and values are lists of daily usage. :param threshold: Integer representing the maximum allowed daily usage for any item. :return: Tuple containing total usage of all items and boolean indicating if threshold is exceeded. total_usage = 0 max_daily_usage = 0 for item, daily_usages in usage_data.items(): total_usage += sum(daily_usages) max_daily_usage = max(max_daily_usage, max(daily_usages)) exceeds_threshold = max_daily_usage > threshold return total_usage, exceeds_threshold"},{"question":"Input Format M b_1 b_2 b_3 ... b_M Output Format Print the length of the longest increasing subsequence in one line. In the end put a line break. Constraints * 1 ≤ M ≤ 50 * 1 ≤ b_i ≤ 10^5 Scoring Subtask 1 [100 points] * M ≤ 5 * b_i ≤ 10 Subtask 2 [100 points] * There are no additional constraints. Example Input 6 10 9 2 5 3 7 Output 3","solution":"def longest_increasing_subsequence_length(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"Given a positive integer n, generate a square matrix of size n x n such that each element in the matrix is equal to the product of its row and column indices (1-based). Example 1: Input: n = 2 Output: [ [1, 2], [2, 4] ] Explanation: Matrix layout based on (row_index, column_index) product: [ [(1*1), (1*2)], [(2*1), (2*2)] ] Hence, the matrix is [[1, 2], [2, 4]]. Example 2: Input: n = 3 Output: [ [1, 2, 3], [2, 4, 6], [3, 6, 9] ] Explanation: Matrix layout based on (row_index, column_index) product: [ [(1*1), (1*2), (1*3)], [(2*1), (2*2), (2*3)], [(3*1), (3*2), (3*3)] ] Hence, the matrix is [[1, 2, 3], [2, 4, 6], [3, 6, 9]]. Your Task: You do not need to read input or print anything. Complete the function generateMatrix() which takes n as input parameter and returns the n x n matrix as described. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(n^2) Constraints: 1 <= n <= 100","solution":"def generateMatrix(n): Generates a square matrix of size n x n where each element is the product of its row and column indices (1-based). Parameters: n (int): The size of the matrix (number of rows and columns) Returns: list: A 2D list (matrix) where each element is the product of its row and column indices return [[(i+1)*(j+1) for j in range(n)] for i in range(n)]"},{"question":"A tree is a special type of graph that is connected and acyclic (contains no cycles). A star tree is a tree in which there is one central node connected directly to all other nodes, and no other edges exist. Given an integer n, you want to build an n-node star tree and add additional k edges to turn it into a general graph while ensuring the new graph still has a single connected component. Determine the minimum number of direct node connections (edges) needed to do this. For example, consider a star tree with n=4 nodes. This tree initially has 3 edges. If you need to add 2 additional edges to create a general graph but preserve its connectedness, it can be connected in multiple ways but requires at least 2 more edges. Input Format The first line contains an integer boldsymbol{t}, the number of test cases. Each of the next boldsymbol{t} lines contains two space-separated integers n and k. Constraints 1 leq t leq 100000 2 leq n leq 10000 0 leq k leq frac{n times (n-1)}{2} - (n-1) Output Format For each test case, print the minimum number of edges needed to form a connected graph with n nodes initially forming a star-tree and then adding k additional edges. Sample Input 3 4 2 5 1 3 0 Sample Output 5 5 2 Explanation For the first case, the initial star-tree with 4 nodes has 3 edges. Adding 2 more edges results in a connected graph needing a total of 5 edges. For the second case, the initial star-tree with 5 nodes has 4 edges. Adding 1 more edge results in a connected graph needing a total of 5 edges. For the third case, the initial star-tree with 3 nodes has 2 edges. No additional edges are added, hence the minimum number of edges needed remains 2. Hints Understanding the initial structure and properties of a star-tree will help in determining the number of edges necessary. Apply the concept that maintaining a single connected component in a star-tree with additional edges simply involves expanding the connectivity without disconnecting the graph.","solution":"def min_edges_for_general_graph(n, k): Calculate the minimum number of edges needed to form a connected graph with `n` nodes initially forming a star-tree and then adding `k` additional edges. Args: n (int): Number of nodes in the star tree. k (int): Number of additional edges to be added. Returns: int: The minimum number of edges needed. initial_edges = n - 1 # A star tree with n nodes has n-1 edges. return initial_edges + k def solve(test_cases): results = [] for n, k in test_cases: results.append(min_edges_for_general_graph(n, k)) return results"},{"question":"You are given an array of n integers. You need to find the maximum length of a subarray that consists of unique (distinct) elements. A subarray is defined as a contiguous segment of an array. For example, if the array is [1, 2, 3, 1, 2, 3], some subarrays are: [1, 2], [2, 3, 1], and [3, 1, 2]. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100,000) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100,000) — elements of the array. The elements in the line are separated by single spaces. -----Output----- Print a single integer — maximum length of a subarray with unique elements. -----Example----- Input 6 1 2 3 1 2 3 Output 3 Input 5 1 2 3 4 5 Output 5 Input 7 1 2 1 3 4 2 3 Output 4 -----Note----- In the first sample, the subarray [1, 2, 3] is the longest subarray with unique elements. In the second sample, the entire array [1, 2, 3, 4, 5] consists of unique elements, so its maximum length is 5. In the third sample, the subarray [1, 3, 4, 2] is the longest subarray with unique elements.","solution":"def max_length_of_unique_subarray(arr): Returns the maximum length of a subarray consisting of unique elements. :param arr: List[int] - The input array of integers :return: int - The length of the longest subarray with all unique elements n = len(arr) if n == 0: return 0 last_occurrence = {} start = 0 max_len = 0 for end in range(n): if arr[end] in last_occurrence: start = max(start, last_occurrence[arr[end]] + 1) last_occurrence[arr[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"You are designing a game that takes place on a rectangular grid m by n. Each cell in the grid can either be empty or contain an obstacle. A player starts at the top-left corner and must reach the bottom-right corner of the grid. The player can only move either right or down at any point in time to reach the destination. However, some cells contain obstacles that block the player from passing through. Write a function that computes the number of unique paths that the player can take to reach the destination from the start, avoiding the obstacles. Input The first line of input contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns of the grid, respectively. The next m lines contain n integers each (either 0 or 1). 0 signifies an empty cell, and 1 signifies a cell with an obstacle. It is guaranteed that the start cell (top-left) and the destination cell (bottom-right) do not contain obstacles. Output Print a single integer — the number of unique paths from the top-left corner to the bottom-right corner, avoiding the obstacles. If there is no possible path, print 0. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 0 1 0 0 0 0 Output 1 Input 2 2 0 1 1 0 Output 0 Note In the first sample, the grid looks like this: 0 0 0 0 1 0 0 0 0 There are two unique paths to reach the destination: right -> right -> down -> down or down -> down -> right -> right. In the second sample, the grid looks like this: 0 1 0 0 1 0 0 0 0 There is only one unique path to reach the destination: down -> down -> right -> right. In the third sample, the grid looks like this: 0 1 1 0 There is no path that leads to the destination as the obstacles block any potential path.","solution":"def unique_paths_with_obstacles(obstacle_grid): Given a 2D grid where \'1\' represents obstacles and \'0\' represents free space, computes the number of unique paths from top-left to bottom-right avoiding obstacles. :param obstacle_grid: List[List[int]], 2D grid of m rows and n columns :return: int, number of unique paths if not obstacle_grid or obstacle_grid[0][0] == 1: return 0 m, n = len(obstacle_grid), len(obstacle_grid[0]) dp = [[0] * n for _ in range(m)] # Start point dp[0][0] = 1 # Fill in the values row-wise for i in range(m): for j in range(n): if obstacle_grid[i][j] == 1: dp[i][j] = 0 elif i == 0 and j == 0: continue else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Develop a program that takes a series of strings as input and calculates the number of vowels (a, e, i, o, u) in each string. The output should display each input string followed by the corresponding vowel count. # Input The input is given in the following format: ``` n s1 s2 :: sn ``` Where `n` (1 ≤ n ≤ 50) is an integer representing the number of strings. Each of the following `n` lines contains a string `si` (1 ≤ |si| ≤ 100). # Output Display each string followed by the count of vowels in that string, in the format: ``` string1: count1 string2: count2 :: stringn: countn ``` # Example Input ``` 3 hello world programming ``` Output ``` hello: 2 world: 1 programming: 3 ``` Input ``` 2 apples oranges ``` Output ``` apples: 2 oranges: 3 ```","solution":"def count_vowels(strings): Counts the number of vowels in each string. Args: strings (list): List of input strings. Returns: list: List of strings with their corresponding vowel count. vowels = set(\\"aeiou\\") results = [] for s in strings: count = sum(1 for char in s if char in vowels) results.append(f\\"{s}: {count}\\") return results def process_input(input_lines): Process input lines to return result in desired format. Args: input_lines (list): List of input lines. Returns: list: Formatted result as list of strings. n = int(input_lines[0]) strings = input_lines[1:n+1] return count_vowels(strings)"},{"question":"You are given an array `arr` of `n` integers where each integer represents a different weight. Your task is to find the maximum sum of weights that can be achieved by selecting a subset of these weights in such a way that no two weights selected are adjacent to each other in the original array. Example 1: Input: n = 4 arr = [3, 2, 5, 10] Output: 13 Explanation: We can select weights 3 and 10, resulting in the maximum sum 13 since selecting 10 excludes its adjacent weight 5. Example 2: Input: n = 5 arr = [3, 2, 7, 10, 12] Output: 22 Explanation: We can select weights 3, 10, and 12 resulting in the maximum sum 22 since we omit weights 2 and 7. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxSumNonAdj() which takes the array `arr[]` and its size `n` as inputs and returns the maximum sum of non-adjacent weights. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^6 1 <= arr[i] <= 10^4","solution":"def maxSumNonAdj(arr, n): if n == 0: return 0 elif n == 1: return arr[0] # Initialize two variables to store the maximum sum including the previous element and including the element before the previous element prev1 = 0 prev2 = 0 for i in range(n): current = max(prev1, prev2 + arr[i]) prev2 = prev1 prev1 = current return prev1"},{"question":"A railway company wants to optimize its train scheduling system. They have information on N trains, including the departure and arrival times for each train. The company aims to find the maximum number of trains that can be scheduled such that no two trains face a conflict in their schedules, i.e., no two trains are on the track at the same time. Input Format: The first line contains an integer T, the number of test cases. Each test case consists of two lines: The first line contains an integer N, the number of trains. The second line contains 2*N space-separated integers. The alternate integers represent the starting time and the ending time of each train respectively. Output Format: For each test case, print the maximum number of trains that can be scheduled without any overlap in their schedules. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ start time, end time ≤ 10^6 SAMPLE INPUT: 2 3 1 2 3 4 5 6 4 1 3 2 4 3 5 6 8 SAMPLE OUTPUT: 3 3 Explanation: In the first test case, all the trains have non-overlapping schedules. So, all 3 trains can be scheduled. In the second test case, the optimal way to schedule the trains is to choose the trains with schedules (1, 3), (3, 5), and (6, 8).","solution":"def max_non_overlapping_trains(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] times = test_cases[i][1] trains = [(times[j], times[j+1]) for j in range(0, 2*N, 2)] # Sort the trains based on the ending times trains.sort(key=lambda x: x[1]) max_trains = 0 current_end_time = -1 for start, end in trains: if start >= current_end_time: max_trains += 1 current_end_time = end results.append(max_trains) return results"},{"question":"Given an array of integers of size N, you need to complete a function `shuffleArray(arr)` that reorders the array in such a way that the elements at even indices are greater than their preceding odd indices while maintaining the relative order of elements otherwise. Input: The function takes a single argument as input: an array of integers `arr`. Multiple test cases will be provided. Each test case will call the function separately. Output: The function should return the reordered array meeting the above condition. User Task: Your task is to complete the function `shuffleArray(arr)` that reorders the array as required. Constraints: 1 <= N <= 1000 -10^5 <= arr[i] <= 10^5 Example: Input: 2 6 9 4 17 3 19 5 5 2 1 3 4 5 Output: [4, 9, 3, 17, 5, 19] [1, 2, 3, 4, 5] Explanation: Testcase 1: Elements at even indices (4, 3, 5) are less than the elements at their preceding odd indices (9, 17, 19) while maintaining the relative order. Testcase 2: Elements are already in the required order.","solution":"def shuffleArray(arr): Shuffle the array such that elements at even indices are greater than their preceding odd indices while maintaining the relative order of elements otherwise. if not arr or len(arr) < 2: return arr # Create two lists to separate even index and odd index elements evens = [arr[i] for i in range(1, len(arr), 2)] odds = [arr[i] for i in range(0, len(arr), 2)] # Merge two lists to meet the condition result = [] even_idx = 0 odd_idx = 0 for i in range(len(arr)): if i % 2 == 0: result.append(odds[odd_idx]) odd_idx += 1 else: result.append(evens[even_idx]) even_idx += 1 return result"},{"question":"# Task In a game, points are scored by collecting items. You are given a list of item values collected in a game in the order they were collected. There is a rule that if two items with the same value are collected consecutively, they form a pair and the player scores points for this pair. The points scored for a pair are equal to the value of one item in the pair. After scoring, both items in the pair are removed from the list. Write a function that will receive the initial list of item values and return the total points scored and the remaining items in the order they were collected. # Example: ``` For `items = [1, 2, 2, 3, 3, 3, 4]` The result should be `(5, [1, 3, 4])` Explanation: First, the pair 2, 2 is found and removed, scoring 2 points. Then, the pair 3, 3 is found and removed, scoring 3 points. There is one 3 left without a pair. The total score is 2 + 3 = 5. The remaining items are [1, 3, 4]. For `items = [5, 5, 5, 5, 5]` The result should be `(10, [5])` Explanation: The first pair of 5, 5 is found and removed, scoring 5 points. The next pair of 5, 5 is found and removed, scoring 5 points. There is one 5 left without a pair. The total score is 5 + 5 = 10. The remaining items are [5]. For `items = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]` The result should be `(5, [])` Explanation: Every two 1\'s form a pair and are removed. The total score is 1 * 5 pairs = 5. No items are remaining. ``` # Input/Output - `[input]` list of integers `items` List of item values collected in the order they were collected. - `[output]` tuple: an integer and a list The total points scored and the remaining items in the order they were collected.","solution":"def score_and_remaining_items(items): total_points = 0 stack = [] for item in items: if stack and stack[-1] == item: total_points += item stack.pop() else: stack.append(item) return total_points, stack"},{"question":"Matthew is developing a new video game, and he wants to include a feature where characters have unique attributes based on their role. Each character can have one of three roles: Warrior, Mage, or Archer. Each role has different rules for calculating its basic attack damage and special damage. The basic attack damage is determined by the character\'s role and level, following these rules: - Warrior: `basic_damage = level * 5` - Mage: `basic_damage = level * 4` - Archer: `basic_damage = level * 3` In addition to the basic attack, each character has a special damage that is unique to their role: - Warrior: `special_damage = 30 + strength` - Mage: `special_damage = 25 + intelligence` - Archer: `special_damage = 20 + dexterity` Your task is to write a program that calculates the basic damage and special damage for each character in a list of characters. # Input The first line of the input contains a single integer `N`, representing the number of characters. Each of the next `N` lines contains information about a character in the following format: ``` role level strength intelligence dexterity ``` All attributes are integers, and the role is a string that takes one of the following values: \\"Warrior\\", \\"Mage\\", or \\"Archer\\". # Output For each character, print two lines: 1. The role and basic damage of the character in the following format: ``` role basic_damage ``` 2. The special damage of the character as an integer. # Example Input ``` 3 Warrior 5 10 0 0 Mage 3 0 15 0 Archer 4 0 0 8 ``` Output ``` Warrior 25 40 Mage 12 40 Archer 12 28 ``` # Guidelines Ensure that your solution maintains consistency in formatting and correct implementation of role-based calculations. Consider edge cases where a character attribute may not influence a role\'s damage calculation.","solution":"def calculate_damage(characters): Calculates and returns the basic damage and special damage for each character. Params: characters (list of tuples): Each tuple contains information about a character in the following format: (role, level, strength, intelligence, dexterity) Returns: list of tuples: Each tuple contains the role, basic damage and special damage in the format: (role, basic_damage, special_damage) result = [] for char in characters: role, level, strength, intelligence, dexterity = char if role == \\"Warrior\\": basic_damage = level * 5 special_damage = 30 + strength elif role == \\"Mage\\": basic_damage = level * 4 special_damage = 25 + intelligence elif role == \\"Archer\\": basic_damage = level * 3 special_damage = 20 + dexterity result.append((role, basic_damage, special_damage)) return result"},{"question":"Write a function `find_largest_integer` that takes a string containing a list of space-separated integers and returns the largest integer in the list. Your task is to identify the largest number among the provided integers. **Constraints:** - The string will contain at least one integer. - Integers can be both positive and negative. - The length of the string is limited to the range 1 <= |s| <= 200. **Input:** - A single line containing a space-separated string of integers. **Output:** - A single integer which is the largest in the input list. **Example:** **Input:** ``` 2 3 -1 15 7 ``` **Output:** ``` 15 ``` **Explanation:** Among the integers `2, 3, -1, 15, and 7`, the largest is `15`. **Notes:** - Ensure that the function handles both negative and positive integers correctly. - Usage of built-in functions for finding the maximum without explicit loops and comparisons would be beneficial but not mandatory.","solution":"def find_largest_integer(s): Returns the largest integer from a space-separated string of integers. # Split the string by spaces to get individual integer strings integers = s.split() # Convert the strings to integers integers = [int(num) for num in integers] # Find the largest integer using the max() function largest_integer = max(integers) return largest_integer"},{"question":"Write a function that takes a list of integers (`arr`), and returns `True` if the sum of any two distinct elements is an even number, and `False` otherwise. Your function should handle both positive and negative integers. For example, `is_even_sum_possible([1, 3, 5, 7]) = False` because all elements are odd and the sum of any two odd numbers is even. However, `is_even_sum_possible([1, 2, 3, 4, 5]) = True` because the sum of 2 (even) and any other number is always even. Note: The input list will contain at least two integers. Good luck! If you enjoy this problem, please try: [Even-odd sum pairs](https://www.codewars.com/kata/5a831df5e626c054d9000140) [Find sum pairs](https://www.codewars.com/kata/59df2f8f08c6cec835000012)","solution":"def is_even_sum_possible(arr): Returns True if the sum of any two distinct elements is an even number, otherwise False. has_even = any(x % 2 == 0 for x in arr) has_odd = any(x % 2 != 0 for x in arr) return has_even and has_odd"},{"question":"You are given a string S of length N consisting of lowercase English letters. You are allowed to perform the following operation any number of times (including zero): Choose two distinct indices i and j (1 leq i, j leq N) such that S[i] neq S[j] and swap the characters at these positions. Determine the lexicographically smallest string that can be obtained by performing the allowed operation any number of times. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing the string S. ------ Output ------ For each test case, print a single line containing the lexicographically smallest string that can be obtained. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} (sum of N for all test cases does not exceed 10^{6}) S consists of lowercase English letters. ------ Sample Input 1 ------ 2 cbad dcba ------ Sample Output 1 ------ abcd abcd","solution":"def lexicographically_smallest_string(S): Returns the lexicographically smallest string that can be obtained by performing any number of allowed operations. return \'\'.join(sorted(S)) def process_test_cases(T, test_cases): Processes multiple test cases and returns the results. results = [] for S in test_cases: results.append(lexicographically_smallest_string(S)) return results"},{"question":"Consider an array of integers, `A`, of size `n`. You are given `q` queries, each asking whether there exists a contiguous subarray within the array that has an exact sum equal to a specified value. Input Format The first line contains two space-separated integers describing the respective values of `n` and `q`. The second line contains `n` space-separated integers denoting the elements of array `A`. Each of the `q` subsequent lines contains a single integer `k` which is the sum we need to check for each query. Constraints 1 leq n, q leq 10^5 -10^9 leq A[i] leq 10^9 -10^9 leq k leq 10^9 Output Format For each query, print \\"YES\\" if there exists a contiguous subarray whose elements sum to `k`. Otherwise, print \\"NO\\". Sample Input 0 5 3 1 2 3 4 5 9 15 20 Sample Output 0 YES YES NO Explanation 0 Given `A` = [1, 2, 3, 4, 5], we perform the following `q = 3` queries: For the first query, we need to check if there is a contiguous subarray that sums to 9. The subarray [2, 3, 4] has a sum of 9, so we print \\"YES\\". For the second query, we need to check if there is a contiguous subarray that sums to 15. The entire array [1, 2, 3, 4, 5] sums to 15, so we print \\"YES\\". For the third query, we need to check if there is a contiguous subarray that sums to 20. There is no such subarray, so we print \\"NO\\".","solution":"def does_subarray_with_sum_exist(n, q, A, queries): results = [] # Using a set to track the cumulative sums we\'ve seen so far. for k in queries: cumulative_sum = 0 seen_sums = set([0]) found = False for number in A: cumulative_sum += number if (cumulative_sum - k) in seen_sums: results.append(\\"YES\\") found = True break seen_sums.add(cumulative_sum) if not found: results.append(\\"NO\\") return results"},{"question":"Emily is organizing a treasure hunt game on a grid. The grid is represented by a matrix of integers where each cell contains a certain number of coins. Emily can start collecting coins from any cell and move to any of the 8 possible neighboring cells (left, right, up, down, and the 4 diagonals). Emily will be happy if she collects the maximum number of coins possible in a single connected path starting from any cell. You need to find the maximum number of coins Emily can collect. ------ Input ------ The input consists of an integer t - the number of test cases. The first line for each test case contains two integers n and m, representing the number of rows and columns of the grid. The next n lines each contain m integers representing the grid itself, where each integer is the number of coins in that cell. ------ Output ------ For each test case, print the maximum number of coins that can be collected in any single connected path starting from any cell. ------ Constraints ------ 1 ≤ t ≤ 5 1 ≤ n, m ≤ 50 0 ≤ grid[i][j] ≤ 100 ----- Sample Input 1 ------ 2 3 3 1 2 3 4 5 6 7 8 9 2 2 1 2 0 3 ----- Sample Output 1 ------ 45 6","solution":"from typing import List, Tuple def max_coins(t: int, test_cases: List[Tuple[int, int, List[List[int]]]]) -> List[int]: def dfs(grid, visited, x, y, n, m): if x < 0 or y < 0 or x >= n or y >= m or visited[x][y]: return 0 visited[x][y] = True total_coins = grid[x][y] max_coins = 0 for i, j in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]: max_coins = max(max_coins, dfs(grid, visited, x + i, y + j, n, m)) visited[x][y] = False return total_coins + max_coins results = [] for case in test_cases: n, m, grid = case max_coins_collected = 0 visited = [[False] * m for _ in range(n)] for i in range(n): for j in range(m): max_coins_collected = max(max_coins_collected, dfs(grid, visited, i, j, n, m)) results.append(max_coins_collected) return results"},{"question":"A company runs a ride-sharing service and needs to match passengers as optimally as possible for rides. Each passenger specifies a desired route characterized by start and end points on a linear road. The aim is to maximize the profit by minimizing the total distance traveled by the cars. The company has m cars available, and each car can take a maximum of n passengers. Every passenger once assigned to a car can\'t be transferred. Each car can follow a specific route that covers all the start and end points specified by the passengers to minimize the total distance traveled. You are asked to help the company distribute the passengers among the cars to minimize the total distance traveled. Note that every car must be used and must take at least one passenger. Input The first input line contains two integers m and n (1 ≤ m ≤ 100, 1 ≤ n ≤ 1000) — the number of cars and the maximum number of passengers each car can take respectively. The second line contains an integer p (1 ≤ p ≤ m*n) — the number of passengers and next p lines describe the passengers as \\"start_i end_i\\" (without the quotes), where start_i and end_i (1 ≤ start_i, end_i ≤ 10^9) are integers denoting the starting and ending points of the i-th passenger\'s route. The numbers in the lines are separated by single spaces. Output In the first line print a single real number with exactly one decimal place — the minimum total distance traveled to cover all passenger routes. In the following m lines print the descriptions of the passengers in the cars. In the i-th line print the description of the i-th car as \\"t b1 b2 ... bt\\" (without the quotes), where t is the number of passengers in the i-th car, and the sequence b1, b2, ..., bt (1 ≤ bj ≤ p) gives the indices of passengers assigned to this car in the optimal distribution. All indices of passengers in all cars should be pairwise different, each passenger must belong to exactly one car. You can print the passengers in cars and the cars themselves in any order. The passengers are numbered from 1 to p in the order in which they are specified in the input. If there are multiple optimal distributions, you are allowed to print any of them. Examples Input 3 2 6 1 5 2 6 3 8 4 7 5 9 6 10 Output 15.0 2 1 2 2 3 4 2 5 6 Input 2 3 5 10 20 25 30 35 40 5 15 45 50 Output 35.0 3 1 2 4 2 3 5 Note In the first sample case, the first car takes passengers 1 and 2, covering the distance from the minimum start point 1 to the maximum end point 6. The second car takes passengers 3 and 4, covering the distance from 3 to 8, and the third car takes passengers 5 and 6, covering the distance from 5 to 10, making the total distance 5 + 5 + 5 = 15.0. In the second sample case, the first car takes passengers 1, 2, and 4, covering the distance from 5 to 30 (25 distance units). The second car takes passengers 3 and 5, covering the distance from 35 to 50 (15 distance units), making the total distance 25 + 15 = 40.0.","solution":"def optimal_ride_sharing(m, n, p, passenger_routes): from itertools import permutations import math # Function to calculate distance for a car covering certain passengers def calculate_car_distance(passenger_indices): if not passenger_indices: return 0 min_start = min(passenger_routes[i][0] for i in passenger_indices) max_end = max(passenger_routes[i][1] for i in passenger_indices) return max_end - min_start # Function to distribute passengers among cars def distribute_passengers(): passenger_indices = list(range(p)) min_total_distance = math.inf best_distribution = None for perm in permutations(passenger_indices): current_distribution = [list() for _ in range(m)] index = 0 for i in range(m): for _ in range(n): if index < p: current_distribution[i].append(perm[index]) index += 1 total_distance = sum(calculate_car_distance(car) for car in current_distribution) if total_distance < min_total_distance: min_total_distance = total_distance best_distribution = current_distribution return min_total_distance, best_distribution min_total_distance, best_distribution = distribute_passengers() # Prepare output output = [] output.append(f\\"{min_total_distance:.1f}\\") for car in best_distribution: output.append(f\\"{len(car)} \\" + \\" \\".join(str(i + 1) for i in car)) return \'n\'.join(output)"},{"question":"You are given an array of n integers which can have both positive and negative values. You need to find the largest value of the difference between any two elements such that the larger element appears after the smaller element in the array. Write a program that finds this maximum difference. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_{i} ≤ 10^9) — the elements of the array. -----Output----- Print a single integer — the maximum difference between any two elements such that the larger element appears after the smaller element. -----Examples----- Input 6 2 3 1 7 4 6 Output 6 Input 5 5 4 3 2 1 Output -1 -----Note----- In the first sample, the largest difference is achieved by taking the element 1 (at index 3) and the element 7 (at index 4). The difference is 7 - 1 = 6. In the second sample, the elements are in non-increasing order, so the maximum difference is -1 since no larger element appears after a smaller one.","solution":"def max_difference(arr): Finds the maximum difference between any two elements in the array such that the larger element appears after the smaller element. if len(arr) < 2: return -1 min_element = arr[0] max_diff = -1 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"Given a list of integers, create a function to reorder the list so that all even integers appear before all odd integers, while maintaining the relative order of the even integers and the relative order of the odd integers. Example 1: Input: arr = [1, 2, 3, 4, 5, 6] Output: [2, 4, 6, 1, 3, 5] Explanation: The even integers [2, 4, 6] come before all the odd integers [1, 3, 5], and the relative order among evens and odds is maintained. Example 2: Input: arr = [3, 1, 2, 4] Output: [2, 4, 3, 1] Explanation: The even integers [2, 4] come before all the odd integers [3, 1], and the relative order among evens and odds is maintained. Your Task: You don\'t need to read input or print anything. Your task is to complete the function reorderEvenOdd() which takes the list arr as input parameter and returns the reordered list. Expected Time Complexity: O(n) where n is the number of elements in the list. Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^5 -10^6 <= arr[i] <= 10^6","solution":"def reorderEvenOdd(arr): Reorders a list so that all even integers appear before all odd integers, while maintaining the relative order of the even integers and the odd integers. Parameters: arr (list): List of integers. Returns: list: Reordered list with all even integers before odd integers. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"In a particular game, you are provided with an array of integers. Your task is to find a subarray with the maximum possible length such that the difference between the maximum and minimum values in this subarray is less than or equal to a given integer k. -----Input----- The first line of input contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9) — the size of the array and the allowed difference respectively. The second line of input contains n integers separated by spaces, representing the values in the array. -----Output----- Print a single number, the length of the longest subarray that satisfies the condition mentioned. -----Examples----- Input 10 3 1 2 3 4 6 7 8 9 10 11 Output 4 Input 5 0 4 4 4 4 4 Output 5 -----Note----- In the first example: The longest subarray where the difference between the maximum and minimum values is at most 3 is [6, 7, 8, 9], which has length 4. In the second example: The entire array [4, 4, 4, 4, 4] has a difference of 0 between the maximum and minimum values and length 5, which satisfies the condition.","solution":"def longest_subarray_with_diff_leq_k(n, k, array): Returns the length of the longest subarray such that the difference between the maximum and minimum values is less than or equal to k. if n == 0: return 0 from collections import deque min_deque, max_deque = deque(), deque() left = 0 max_length = 0 for right in range(n): while min_deque and array[min_deque[-1]] >= array[right]: min_deque.pop() while max_deque and array[max_deque[-1]] <= array[right]: max_deque.pop() min_deque.append(right) max_deque.append(right) while array[max_deque[0]] - array[min_deque[0]] > k: left += 1 if min_deque[0] < left: min_deque.popleft() if max_deque[0] < left: max_deque.popleft() max_length = max(max_length, right - left + 1) return max_length"},{"question":"Felicia is a robotics enthusiast who has a collection of n robots arranged in a line. Each robot has a certain battery level, and Felicia wants to ensure that all robots are charged uniformly to some extent. She can perform two types of operations on the robots: 1. Add a specific amount of charge to a range of robots. 2. Query the current battery level of a specified robot. Your task is to simulate these operations and provide the results for each query accurately. -----Input----- The first line contains two integers n and q (1 leq n leq 100,000, 1 leq q leq 200,000) — the number of robots and the number of queries. The next line contains n integers a_i (0 le a_i le 1,000,000) — the initial battery levels of the robots. The next q lines describe the queries, one per line. Each query is in one of the following two formats: - `1 l r x`: Add x units of charge to each robot from position l to r (1-based index, inclusive). - `2 i`: Query the battery level of the i-th robot (1-based index). -----Output----- For each query of the second type, output the battery level of the specified robot. -----Examples----- Input 5 5 10 20 30 40 50 1 2 4 10 2 3 1 1 5 5 2 5 2 1 Output 40 55 15 -----Note----- In the first example: - After the first operation, the battery levels become: `[10, 30, 40, 50, 50]`. - The first query asks for the battery level of the 3rd robot, which is `40`. - After the second operation, the battery levels become: `[15, 35, 45, 55, 55]`. - The second query asks for the battery level of the 5th robot, which is `55`. - The third query asks for the battery level of the 1st robot, which is `15`. This problem requires efficient handling of range updates and point queries. Use appropriate data structures to manage the operations within the given constraints.","solution":"def process_queries(n, q, battery_levels, queries): result = [] # Initialize the battery level array batteries = battery_levels[:] # Process each query for query in queries: if query[0] == 1: # Add charge to a range l, r, x = query[1] - 1, query[2] - 1, query[3] for i in range(l, r + 1): batteries[i] += x elif query[0] == 2: # Query the battery level of a specific robot i = query[1] - 1 result.append(batteries[i]) return result"},{"question":"You are given a list of n integers and an integer k. You need to split the list into k non-empty sublists such that the sum of the maximum integer in each sublist is minimized. If there are multiple ways to split the list, return any one such split. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000), representing the number of integers in the list and the number of sublists to be formed, respectively. The second line contains n integers (1 ≤ a_i ≤ 1000), representing the elements of the list. Output Print k lines where each line contains the elements of one sublist. The sum of the maximum integers in each sublist should be minimized. Example Input: 6 3 4 2 1 3 6 5 Output: 2 1 4 3 6 5 Input: 5 2 1 2 3 4 5 Output: 1 2 3 4 5","solution":"def split_list_minimize_max_sum(n, k, lst): Splits the list into k non-empty sublists such that the sum of the maximum integers in each sublist is minimized. If there are multiple ways to split the list, returns any one such split. lst.sort(reverse=True) sublists = [[] for _ in range(k)] for i in range(n): sublists[i % k].append(lst[i]) return sublists"},{"question":"# Task You are given a string `s` and an array of queries `queries` where each query consists of two integers `[l, r]`. For each query, find the number of distinct characters in the substring `s[l:r+1]`. # Example For `s = \\"abacaba\\"` and `queries = [[0, 3], [1, 2], [2, 5], [0, 6]]`, the output should be `[3, 2, 3, 3]`. Here’s a detailed explanation: ``` s = \\"abacaba\\" queries = [[0, 3], [1, 2], [2, 5], [0, 6]] query 1: s[0:4] --> \\"abac\\" --> distinct characters are \'a\', \'b\', \'c\' --> output is 3 query 2: s[1:3] --> \\"ba\\" --> distinct characters are \'b\', \'a\' --> output is 2 query 3: s[2:6] --> \\"acab\\" --> distinct characters are \'a\', \'c\', \'b\' --> output is 3 query 4: s[0:7] --> \\"abacaba\\" --> distinct characters are \'a\', \'b\', \'c\' --> output is 3 ``` # Input/Output - `[input]` string `s` The input string. Constraints: `1 <= s.length <= 100000` `s` consists of lowercase English letters only - `[input]` 2D integer array `queries` Array of queries where each query is a list of two integers `[l, r]`. Constraints: `1 <= queries.length <= 100000` `0 <= l <= r < s.length` - `[output]` an integer array The output array where the ith element is the number of distinct characters in the substring `s[l:r+1]` for the ith query.","solution":"def distinct_characters_in_substrings(s, queries): result = [] for l, r in queries: substring = s[l:r+1] distinct_chars = set(substring) result.append(len(distinct_chars)) return result"},{"question":"POINTS - 30 Given an integer N, return the sum of all prime numbers less than or equal to N. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. Output For each test case, output a single line containing the sum of all prime numbers less than or equal to N. Constraints 1<=T<=100 1<=N<=1000 Example Input: 3 10 5 30 Output: 17 10 129","solution":"def sum_of_primes(N): Returns the sum of all prime numbers less than or equal to N. if N < 2: return 0 sieve = [True] * (N + 1) sieve[0], sieve[1] = False, False for start in range(2, int(N**0.5) + 1): if sieve[start]: for multiple in range(start*start, N+1, start): sieve[multiple] = False return sum(num for num, is_prime in enumerate(sieve) if is_prime) def sum_of_primes_for_all_test_cases(T, test_cases): Returns the sum of primes for all test cases. T: Number of test cases test_cases: List of integers results = [] for N in test_cases: results.append(sum_of_primes(N)) return results"},{"question":"Agents at the International Spy Agency are working on developing a new encryption mechanism to securely send messages. The mechanism utilizes a special key that can shift the positions of characters in a specific pattern. Your task is to implement the algorithm that performs this encryption. The agency provides you with a string `message` and an integer `key`. The `key` determines the number of positions each character in the string should be shifted to the right. If the end of the string is reached, it wraps around to the beginning. For example, given the `message` \\"SECRET\\" and the `key` of 2, the result would be \\"ETSECR\\". Notice that: - \'S\' is shifted by 2 positions to the right, so \'S\' becomes \'E\' - \'E\' is shifted by 2 positions to the right, so \'E\' becomes \'T\' - \'C\' is shifted by 2 positions to the right, wrapping around, so \'C\' becomes \'S\', and so on. Your task is to implement this encryption function. INPUT: The first line contains an integer `key` (0 ≤ key ≤ 1000). The second line contains a string `message` consisting of uppercase English letters only. (1 ≤ length(message) ≤ 1000) OUTPUT: Print the encrypted message. SAMPLE INPUT: 2 SECRET SAMPLE OUTPUT: ETSECR","solution":"def encrypt_message(key, message): Encrypts the message by shifting each character to the right by the given key. Args: key (int): The number of positions each character in the message is shifted to the right. message (str): The message to be encrypted. Returns: str: The encrypted message. n = len(message) key = key % n # if key is greater than length of message, wrap it around # get the last `key` characters + the rest at the beginning encrypted_message = message[-key:] + message[:-key] return encrypted_message"},{"question":"You are developing a software solution for tracking grocery shopping lists. Your system should allow people to create a list of items with quantities and prices, and then calculate the total cost of the items in the list. At any given time, a user can add items to the list, remove items from the list, or update the quantity and price of an existing item in the list. Finally, the user can request the total cost of all items in the list. You need to write a program that performs the following operations: 1. Add a new item to the list with its quantity and price. 2. Remove an existing item from the list. 3. Update the quantity and/or price of an existing item. 4. Calculate and return the total cost of all items in the list. # Input Format - The first line contains an integer Q, the number of queries. - Each of the next Q lines contains a query in one of the following formats: 1. Add an item: `\\"ADD item quantity price\\"`. This adds `item` to the list with the specified `quantity` and `price`. If the `item` already exists, update its `quantity` and `price` with the new values. 2. Remove an item: `\\"REMOVE item\\"`. This removes the specified `item` from the list. If the `item` does not exist, do nothing. 3. Update the quantity and/or price of an existing item: `\\"UPDATE item quantity price\\"`. This updates the `quantity` and `price` of the specified `item`. If the `item` does not exist, add it to the list with the provided `quantity` and `price`. 4. Calculate the total cost: `\\"TOTAL_COST\\"`. This calculates and returns the total cost of all items in the list by multiplying each item\'s quantity by its price and summing all the results. # Output Format For each `\\"TOTAL_COST\\"` query, output the total cost of all items in the list on a new line. # Constraints - 1 leq Q leq 10^5 - 1 leq quantity leq 10^3 - 0 leq price leq 10^4 - The `item` is a string containing only alphanumeric characters with a length of 1 to 20. # Sample Input ``` 7 ADD apple 2 3 ADD banana 1 1 TOTAL_COST ADD apple 1 4 UPDATE banana 2 2 REMOVE apple TOTAL_COST ``` # Sample Output ``` 7 4 ``` # Explanation - After the first two queries, the list is `{\'apple\': (2, 3), \'banana\': (1, 1)}`. - The total cost is 2*3 + 1*1 = 6 + 1 = 7. - After the third query, the list is `{\'apple\': (1, 4), \'banana\': (1, 1)}`. - After the fourth query, the list is updated to `{\'banana\': (2, 2)}`. - The total cost is 2*2 = 4.","solution":"class GroceryList: def __init__(self): self.items = {} def add_item(self, item, quantity, price): self.items[item] = (quantity, price) def remove_item(self, item): if item in self.items: del self.items[item] def update_item(self, item, quantity, price): self.items[item] = (quantity, price) def total_cost(self): return sum(quantity * price for quantity, price in self.items.values()) def process_queries(queries): grocery_list = GroceryList() results = [] for query in queries: parts = query.split() action = parts[0] if action == \\"ADD\\": item, quantity, price = parts[1], int(parts[2]), int(parts[3]) grocery_list.add_item(item, quantity, price) elif action == \\"REMOVE\\": item = parts[1] grocery_list.remove_item(item) elif action == \\"UPDATE\\": item, quantity, price = parts[1], int(parts[2]), int(parts[3]) grocery_list.update_item(item, quantity, price) elif action == \\"TOTAL_COST\\": results.append(grocery_list.total_cost()) return results"},{"question":"Alice enjoys creating symmetric strings. A string is considered symmetric if it reads the same forwards and backwards. She wishes to generate a symmetric string of length N using only lowercase English letters. Write a program to determine the number of possible symmetric strings that can be formed for given values of N. Since the number of such strings can be very large, output the result modulo 10^9+7. Input: The first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contains a single integer N representing the length of the symmetric string. Output: For each test case, output the number of symmetric strings of length N. Constraints: 1 ≤ N ≤ 10^5 Sample Input: 2 3 4 Sample Output: 26 26 Explanation: Test case 1: For N = 3, consider a symmetric string \\"aba\\". The first and third positions are the same giving us \'a\', \'b\', ..., \'z\' choices for the first position and the middle character also has \'a\', \'b\', ..., \'z\' choices. So there are 26 possible symmetric strings of length 3. Test case 2: For N = 4, a symmetric string like \\"abba\\" can be formed similarly. The first and fourth positions, as well as the second and third, have \'a\', \'b\', ..., \'z\' choices respectively, resulting in 26 possible symmetric strings of length 4.","solution":"MOD = 10**9 + 7 def count_symmetric_strings(N): if N % 2 == 0: half_length = N // 2 else: half_length = N // 2 + 1 return pow(26, half_length, MOD) def solve(T, cases): return [count_symmetric_strings(N) for N in cases]"},{"question":"In a distant land, there is a unique and magical tree with n nodes and n-1 edges, forming a tree structure. Each node represents a village, and each edge represents a direct path between two villages. The tree is rooted at node 1, and each node has a unique identifier from 1 to n. The villagers want to determine the depth of each node in the tree. The depth of a node is the number of edges in the path from the root node (node 1) to that node. Your task is to find the depth of all nodes in the tree. ----- Input ----- The first line contains an integer n (1 ≤ n ≤ 2·10^5) representing the number of nodes in the tree. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) representing an edge between nodes u and v. ----- Output ----- Print n integers, the i-th integer should be the depth of node i in the tree. ----- Examples ----- **Input** 5 1 2 1 3 3 4 3 5 **Output** 0 1 1 2 2 **Note** In the provided example: - Node 1 is the root, so its depth is 0. - Node 2 and Node 3 are directly connected to the root, so their depth is 1. - Node 4 and Node 5 are connected to Node 3, so their depth is 2. Hence, the output is \\"0 1 1 2 2\\".","solution":"def calculate_depths(n, edges): from collections import deque, defaultdict # Create an adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # BFS to calculate depths depths = [-1] * (n + 1) queue = deque([(1, 0)]) depths[1] = 0 while queue: node, depth = queue.popleft() for neighbor in tree[node]: if depths[neighbor] == -1: depths[neighbor] = depth + 1 queue.append((neighbor, depth + 1)) return depths[1:] # we return depths starting from index 1 # Function to transform edge input for easy testing def tree_depths(n, edges_input): edges = [tuple(map(int, edge.strip().split())) for edge in edges_input] return calculate_depths(n, edges)"},{"question":"You are given a string `s` and an integer `k`. You need to form a new string by repeating `s` as many times as necessary to reach a length of `k` or more. Once the string reaches or exceeds the length `k`, you can truncate the resulting string to make it exactly of length `k`. Write a function that returns this new string. Example: Input: s = \\"abc\\", k = 10 Output: \\"abcabcabca\\" Explanation: Repeating the string \\"abc\\" until length k: \\"abc\\" + \\"abc\\" + \\"abc\\" + \\"abc\\" = \\"abcabcabcabc\\" Truncate to 10 characters: \\"abcabcabca\\"","solution":"def repeat_and_truncate_string(s, k): Repeats the string `s` until the length is at least `k`, then truncates it to length `k`. Parameters: s (str): The string to repeat. k (int): The desired length of the resulting string. Returns: str: The resulting string of length `k`. repeated_string = (s * ((k // len(s)) + 1))[:k] return repeated_string"},{"question":"James loves to play with strings. One day, he came across a new task which involves splitting a string into multiple substrings according to specific rules. Given a string `s`, James wants to split it into the minimum number of one or more substrings such that each substring only contains unique characters. Write a function to determine the minimum number of substrings required to satisfy this condition. The number of characters in the string `s` is between 1 and 10^5, inclusive. -----Input----- The input consists of a single string `s` (1 ≤ |s| ≤ 10^5), which contains only lowercase English letters. -----Output----- Output a single integer — the minimum number of substrings with unique characters. -----Examples----- Input abac Output 2 Explanation: One possible way to split the string is \\"ab\\" and \\"ac\\". Input aaaaa Output 5 Explanation: Each character has to be in its own substring since they are all the same. Input abcd Output 1 Explanation: The entire string itself is unique. Note that the solution should not just find any solution, it should find the minimum number of substrings required.","solution":"def min_unique_substrings(s): Returns the minimum number of substrings needed such that each substring contains unique characters. if not s: return 0 substr_count = 0 seen_chars = set() for char in s: if char in seen_chars: substr_count += 1 seen_chars = set() seen_chars.add(char) # Account for the last substring return substr_count + 1"},{"question":"Create a function that takes a string as input, where the string represents a mathematical expression involving multiplication and division. The function should return the result of the expression as a string. **Note:** The input string will always be a valid expression and will not be empty. Examples ``` \\"3times4times2\\" --> \\"24\\" \\"12divided2times3\\" --> \\"18\\" ```","solution":"def calculate_expression(expression): Evaluates a mathematical expression given as a string with \'times\' and \'divided\' representing multiplication and division respectively. Returns the result as a string. # Replace \'times\' with \'*\' and \'divided\' with \'/\' expression = expression.replace(\'times\', \'*\').replace(\'divided\', \'/\') # Use eval to calculate the result result = eval(expression) # Return the result as a string return str(result)"},{"question":"Alex and Blake are playing a game where they need to collect pairs of specific items to score points. Each pair of items gives them a point. The game allows them to pick items from a collection, and they need to determine the maximum number of pairs they can make from their choice of items. Given the number of items they have of two types, A and B, calculate the maximum number of pairs they can form. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case contains two space-separated integers A and B — the number of items of type A and B respectively. ------ Output Format ------ For each test case, output on a new line, the maximum number of pairs they can form. ------ Constraints ------ 1 ≤ T ≤ 100 0 ≤ A, B ≤ 100 ----- Sample Input 1 ------ 3 2 3 5 5 0 10 ----- Sample Output 1 ------ 2 5 0 ----- Explanation 1 ------ Test case 1: They have 2 items of type A and 3 items of type B. The maximum number of pairs they can form is min(2, 3) = 2. Test case 2: They have 5 items of type A and 5 items of type B. The maximum number of pairs they can form is min(5, 5) = 5. Test case 3: They have 0 items of type A and 10 items of type B. The maximum number of pairs they can form is min(0, 10) = 0.","solution":"def max_pairs(T, cases): Returns a list with the maximum number of pairs that can be formed for each test case. Parameters: - T: int, number of test cases - cases: list of tuples, where each tuple contains the number of items of type A and B respectively Returns: - list of integers, each integer representing the maximum number of pairs for the corresponding test case. result = [] for A, B in cases: result.append(min(A, B)) return result"},{"question":"Alice is tasked with painting a series of wooden blocks placed in a straight line. Each block must be painted either red or blue, but no two adjacent blocks can be painted the same color. Given the total number of blocks, Alice wants to know how many valid sequences of paint colors she can create. -----Input----- The input consists of a single integer n (1 leq n leq 10^9), representing the number of wooden blocks. -----Output----- Print a single integer representing the number of valid sequences of paint colors Alice can create. Since the number can be large, return the answer modulo 10^9 + 7. -----Examples----- Input 1 Output 2 Input 2 Output 2 Input 3 Output 4 -----Note----- In the first example, with one block, there are 2 valid sequences: [Red], [Blue]. In the second example, with two blocks, there are 2 valid sequences: [Red, Blue], [Blue, Red]. In the third example, with three blocks, there are 4 valid sequences: [Red, Blue, Red], [Red, Blue, Blue], [Blue, Red, Blue], [Blue, Red, Red].","solution":"def count_valid_sequences(n): Given the total number of blocks, returns the number of valid sequences of paint colors where no two adjacent blocks are painted the same color. The result is modulo 10^9 + 7. MOD = 10**9 + 7 if n == 1: return 2 elif n == 2: return 2 else: return pow(2, n - 1, MOD)"},{"question":"You are tasked with managing the delivery of packages to various cities. Each city receives a certain number of packages, and each package delivery has its own cost. ---- Problem ---- You are given T test cases. Each test case consists of: 1. An integer N, the number of cities. 2. An array P of length N, where P[i] denotes the number of packages to be delivered to the i-th city. 3. An array C of length N, where C[i] denotes the cost of delivering one package to the i-th city. Your job is to calculate the total minimum cost of delivering all the packages for each test case. ---- Input Format ---- - The first line contains a single integer T, the number of test cases. - Each test case consists of exactly 3 lines: - The first line contains the integer N. - The second line contains N space-separated integers representing array P. - The third line contains N space-separated integers representing array C. ---- Output Format ---- The output must consist of T lines. The i-th line should consist of a single integer, the minimum cost to deliver all the packages for the i-th test case. ---- Constraints ---- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ P[i], C[i] ≤ 1000 ---- Sample Input 1 ---- 2 3 10 20 30 6 2 4 2 5 8 3 5 ---- Sample Output 1 ---- 200 49 ---- Explanation 1 ---- Test case 1: - The cost of delivering packages to the first city is 10 * 6 = 60. - The cost of delivering packages to the second city is 20 * 2 = 40. - The cost of delivering packages to the third city is 30 * 4 = 120. - The total cost for the first test case is 60 + 40 + 120 = 220. Test case 2: - The cost of delivering packages to the first city is 5 * 3 = 15. - The cost of delivering packages to the second city is 8 * 5 = 40. - The total cost for the second test case is 15 + 40 = 55.","solution":"def minimum_delivery_cost(T, test_cases): result = [] for i in range(T): N = test_cases[i][0] P = test_cases[i][1] C = test_cases[i][2] total_cost = sum([P[j] * C[j] for j in range(N)]) result.append(total_cost) return result"},{"question":"Write a function that takes a list of dictionaries representing movies. Each dictionary contains the keys: \\"title\\", \\"genre\\", and \\"rating\\". The function should return a new dictionary where the keys are genres and the values are lists of titles of movies that belong to that genre, sorted by their rating in descending order. Examples ```python [ {\'title\': \'Movie A\', \'genre\': \'Action\', \'rating\': 8.5}, {\'title\': \'Movie B\', \'genre\': \'Horror\', \'rating\': 7.2}, {\'title\': \'Movie C\', \'genre\': \'Action\', \'rating\': 9.1}, {\'title\': \'Movie D\', \'genre\': \'Horror\', \'rating\': 8.0} ] ``` Should return: ```python { \'Action\': [\'Movie C\', \'Movie A\'], \'Horror\': [\'Movie D\', \'Movie B\'] } ```","solution":"def categorize_movies_by_genre(movies): Takes a list of movie dictionaries and returns a dictionary categorizing movies by genre, with the titles sorted by their rating in descending order. genre_dict = {} for movie in movies: title = movie[\'title\'] genre = movie[\'genre\'] rating = movie[\'rating\'] if genre not in genre_dict: genre_dict[genre] = [] genre_dict[genre].append((rating, title)) for genre in genre_dict: genre_dict[genre].sort(reverse=True, key=lambda x: x[0]) genre_dict[genre] = [title for rating, title in genre_dict[genre]] return genre_dict"},{"question":"In a forest, there are n trees arranged in a straight line. Each tree has a specific height. A lumberjack wants to cut down a contiguous segment of trees such that the total height of the trees in this segment is maximized. However, to prevent environmental damage, the total height of the trees that are cut down cannot exceed a given value k. Your task is to help the lumberjack determine the maximum total height of trees he can cut down without exceeding the given height value k. -----Constraints----- - 1 ≦ n ≦ 100,000 - 1 ≦ height of each tree ≦ 10,000 - 1 ≦ k ≦ 10^9 -----Input----- The input is given from Standard Input in the following format: ``` n k h1 h2 h3 ... hn ``` - The first line contains two integers, n and k. - The second line contains n integers separated by spaces, where the ith integer represents the height of the ith tree. -----Output----- Print a single integer: the maximum possible total height of the trees that can be cut down without exceeding the total height k. -----Sample Input----- 5 10 3 1 4 2 5 -----Sample Output----- 10 In the example provided, the lumberjack can cut down the first tree (height 3), the second tree (height 1), the fourth tree (height 2), and the fifth tree (height 5) together to get the total height of 3 + 1 + 2 + 5 = 11, but it exceeds 10. Alternatively, cutting down the first, second, third, and fourth trees results in 3 + 1 + 4 + 2 = 10, which is the maximum total height that does not exceed k.","solution":"def max_total_height(n, k, heights): Calculates the maximum total height of a contiguous segment of trees that can be cut down without exceeding the given height value k. :param n: int, the number of trees :param k: int, the maximum allowed height to be cut down :param heights: list of int, representing the height of each tree :return: int, the maximum possible total height of those trees max_sum = 0 current_sum = 0 left = 0 for right in range(n): current_sum += heights[right] while current_sum > k: current_sum -= heights[left] left += 1 max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Valera is fond of arrays, especially when they are sorted. He has an array `a` consisting of `n` integers in non-decreasing order, and he wants to convert it to another array `b` which should also be in non-decreasing order. Valera can perform the following operation any number of times: For an element `ai` in `a` and any integer `c`, Valera can set `ai` to `c` if `c` is not less than the previous element (`ai-1` if `i > 0`). Valera wants to find the minimum number of operations required to convert `a` into `b`, such that every element of `b` is in non-decreasing order. Note that Valera has special cards that contain unlimited values of `c` to choose from per each position. Help Valera in finding the minimal number of such operations. # Input The first line contains an integer `n` (1 ≤ n ≤ 1000) — the length of the array `a`. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 1000) in non-decreasing order — the elements of the array `a`. The third line contains `n` integers `b1, b2, ..., bn` (1 ≤ bi ≤ 1000) in non-decreasing order — the elements of the array `b`. # Output Print a single integer — the minimum number of operations required to convert `a` into `b`. # Examples Input ``` 5 1 2 3 4 5 1 2 5 4 5 ``` Output ``` 1 ``` Input ``` 3 1 1 1 3 3 3 ``` Output ``` 3 ``` Input ``` 4 2 3 5 7 2 3 5 7 ``` Output ``` 0","solution":"def min_operations_to_convert(n, a, b): Function to compute the minimum number of operations needed to convert array `a` to array `b`. :param n: Length of the array `a` and `b` :param a: List of integers in non-decreasing order :param b: List of integers in non-decreasing order :return: Minimum number of operations required operations = 0 for i in range(n): if a[i] != b[i]: operations += 1 return operations # Example usage: # n = 5 # a = [1, 2, 3, 4, 5] # b = [1, 2, 5, 4, 5] # print(min_operations_to_convert(n, a, b)) # Output should be 1"},{"question":"Given a string S, check if it is a palindrome. A string is considered a palindrome if it reads the same backward as forward. ------ Input Format ------ The first and only line of input contains a string S consisting of lowercase English letters. ------ Output Format ------ Print texttt{YES} if the string is a palindrome. Otherwise, print texttt{NO}. You may print each character of the string in uppercase or lowercase (for example, the strings texttt{YeS}, texttt{yEs}, texttt{yes} and texttt{YES} will all be treated as identical). ------ Constraints ------ 1 ≤ text{length of } S ≤ 1000 ------ subtasks ------ Subtask 1 (100 points): Original constraints. ----- Sample Input 1 ------ radar ----- Sample Output 1 ------ YES ----- explanation 1 ------ The string \\"radar\\" reads the same backward as forward. ----- Sample Input 2 ------ hello ----- Sample Output 2 ------ NO ----- explanation 2 ------ The string \\"hello\\" does not read the same backward as forward.","solution":"def is_palindrome(s): Returns YES if the string is a palindrome, NO otherwise. # Remove whitespace and convert to lowercase for standardizing input cleaned_string = s.replace(\\" \\", \\"\\").lower() # Check if the string equals its reverse return \\"YES\\" if cleaned_string == cleaned_string[::-1] else \\"NO\\""},{"question":"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example, the word \'listen\' is an anagram of \'silent\'. Your task is to find the maximum number of anagrams that can be formed from the given list of strings. To determine the number of anagram groups from a set of strings, two steps can be followed: 1. For each string, generate a sorted tuple of characters. 2. Group identical tuples together. The size of the largest such group will be the answer. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), which is the number of strings. The following n lines each contain a single string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. -----Output----- Print a single integer which is the maximum number of anagrams that can be formed from the given list of strings. -----Examples----- Input 6 listen silent enlist google elgoog notanagram Output 3 -----Note----- In the first sample, the anagrams are \'listen\', \'silent\', and \'enlist\', and another set of anagrams are \'google\' and \'elgoog\'. The largest group has 3 anagrams.","solution":"from collections import defaultdict def max_anagram_group(n, strings): anagram_map = defaultdict(int) for s in strings: sorted_tuple = tuple(sorted(s)) anagram_map[sorted_tuple] += 1 # Finding the maximum size among all groups of anagrams max_group_size = max(anagram_map.values()) return max_group_size"},{"question":"The game of Spelling Bee is very popular in a small town. The town organizes it every year for all the students. This year, the rules are a bit different. Each student is given a word and they are asked to perform the following operations: * Replace every vowel (\'a\', \'e\', \'i\', \'o\', \'u\') in the word with a next consonant. * Replace every consonant with the previous consonant in the English alphabet. * Special characters and digits remain unchanged. If the resulting word is a palindrome, the student wins, otherwise they lose. Write a program that determines whether the student wins or loses. Input The input consists of a single line containing a word (1 ≤ |word| ≤ 10^5). Output Print \\"Win\\" if the student wins, otherwise print \\"Lose\\". Examples Input student14 Output Lose Input m@d@m Output Win Note In the first example: - \'u\' is replaced with \'v\' - \'d\' is replaced with \'c\' - \'e\' is replaced with \'f\' - \'n\' is replaced with \'m\' On performing these replacements, the word \\"student14\\" becomes \\"stvcfm14m\\". The word is not a palindrome; hence the output is \\"Lose\\". In the second example: - Special characters \'@\' and digits remain unchanged - The resulting word \\"m@d@m\\" is a palindrome Hence, the output is \\"Win\\".","solution":"def is_palindrome(word): return word == word[::-1] def modify_word(word): next_consonant = { \'a\': \'b\', \'e\': \'f\', \'i\': \'j\', \'o\': \'p\', \'u\': \'v\' } prev_consonant = { \'b\': \'a\', \'c\': \'b\', \'d\': \'c\', \'f\': \'e\', \'g\': \'f\', \'h\': \'g\', \'j\': \'i\', \'k\': \'j\', \'l\': \'k\', \'m\': \'l\', \'n\': \'m\', \'p\': \'o\', \'q\': \'p\', \'r\': \'q\', \'s\': \'r\', \'t\': \'s\', \'v\': \'u\', \'w\': \'v\', \'x\': \'w\', \'y\': \'x\', \'z\': \'y\' } modified_word = [] for char in word: if char in next_consonant: modified_word.append(next_consonant[char]) elif char in prev_consonant: modified_word.append(prev_consonant[char]) else: modified_word.append(char) return \'\'.join(modified_word) def spelling_bee(word): modified_word = modify_word(word) if is_palindrome(modified_word): return \\"Win\\" else: return \\"Lose\\""},{"question":"Given a list of non-negative integers representing the amount of rainwater each bar can trap at a certain point, compute how much water it can trap after raining. The width of each bar is 1 unit. # Example: Input: height = [4,2,0,3,2,5] Output: 9 Explanation: The structure can trap 1 unit of water between the first and second bars, 2 units between the second and third bars, 1 unit between the third and fourth bars, and 5 units between the fifth and sixth bars for a total of 9 units. # Example: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The structure can trap 1 unit of water between the first and second bars, 1 unit between the third and fourth bars, 3 units between the fourth and seventh bars, and 1 unit between the tenth and eleventh bars for a total of 6 units. # Constraints: - The length of the input list is in the range [0, 2 * 10^4]. - The heights of the bars are within the range [0, 10^5].","solution":"def trap(height): Computes the total amount of trapped rainwater given the height of the bars. Parameters: height (list of int): A list of non-negative integers representing the height of the bars. Returns: int: The total amount of trapped rainwater. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate the trapped water for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"A company wants to implement an automated system for managing their employees\' schedules. An important feature of this system is to determine if there is any overlap between two given schedules. Each schedule is represented as a list of intervals, where each interval specifies a time period during which an employee is unavailable. Write a program to check if there is any overlap between the unavailability intervals of two employees. Input - The first line contains an integer n, the number of intervals for the first employee (1 ≤ n ≤ 100). - The next n lines each contain two integers, start and end, which represent the start time and end time of an unavailability interval (0 ≤ start < end ≤ 10000). - The following line contains an integer m, the number of intervals for the second employee (1 ≤ m ≤ 100). - The next m lines each contain two integers, start and end, which represent the start time and end time of an unavailability interval (0 ≤ start < end ≤ 10000). Output - Print \\"YES\\" if there is any overlap between the intervals of the two employees, otherwise print \\"NO\\". Example Input 3 1 5 10 15 20 25 2 5 10 15 20 Output NO Input 2 1 5 8 12 3 4 9 10 15 18 22 Output YES","solution":"def check_overlap(n, intervals1, m, intervals2): Determines if there is any overlap between the intervals of two employees. :param n: Number of intervals for the first employee :param intervals1: List of intervals for the first employee :param m: Number of intervals for the second employee :param intervals2: List of intervals for the second employee :return: \\"YES\\" if there is any overlap, otherwise \\"NO\\" for start1, end1 in intervals1: for start2, end2 in intervals2: if start1 < end2 and start2 < end1: return \\"YES\\" return \\"NO\\" # Example usage with direct input if __name__ == \\"__main__\\": n = int(input()) intervals1 = [tuple(map(int, input().split())) for _ in range(n)] m = int(input()) intervals2 = [tuple(map(int, input().split())) for _ in range(m)] print(check_overlap(n, intervals1, m, intervals2))"},{"question":"Write a function to determine if a given string is a valid arithmetic expression. The expression should only contain non-negative integers, binary operators (+, -, *, /), and must not have any additional spaces or characters. A valid arithmetic expression should adhere to the following rules: 1. It must not start with an operator. 2. It must not end with an operator. 3. It must not contain two consecutive operators. 4. Operands should not have leading zeros unless the operand is \'0\' itself. 5. Division by zero is not allowed. The function should return `True` if the string is a valid arithmetic expression and `False` otherwise. Input format: - A single string `expr` representing the arithmetic expression. Output format: - A single boolean value indicating whether the given string is a valid arithmetic expression. Constraints: - 1 ≤ |expr| ≤ 10^5 - Each character in `expr` should be either a digit (0-9) or one of the binary operators (+, -, *, /). Example Input 1: ``` \\"12+34*5-6/2\\" ``` Example Output 1: ``` True ``` Example Input 2: ``` \\"12++34\\" ``` Example Output 2: ``` False ``` Example Input 3: ``` \\"0+05/1\\" ``` Example Output 3: ``` False ``` Example Input 4: ``` \\"100/0+1\\" ``` Example Output 4: ``` False ```","solution":"import re def is_valid_expression(expr): Determines if the given string expr is a valid arithmetic expression based on the given rules. # Checking for empty expression if not expr: return False # Validating the expression with a regular expression pattern # This regex ensures: # 1. Starts with a digit # 2. Ends with a digit # 3. Doesn\'t contain consecutive operators # 4. Does not have leading zeros in the operands # 5. Between digits and operators is allowed pattern = re.compile(r\'^(?:(?:[1-9]d*)|0)([+-*/](?:(?:[1-9]d*)|0))*\') # If the regex match is None, the expression is invalid if not pattern.fullmatch(expr): return False # Split by operators and check for division by zero expr_parts = re.split(r\'([+-*/])\', expr) for i in range(len(expr_parts) - 1): if expr_parts[i] == \'/\' and expr_parts[i + 1] == \'0\': return False return True"},{"question":"You are working with a library management system where books have multiple attributes, including their unique `ISBN` number, title, author, and year of publication. You need to create a function that helps in managing the information about books based on their `ISBN` number. Create a function `manage_books` that takes two arguments: 1. `books` - a list of dictionaries where each dictionary represents a book and has four keys (`ISBN`, `title`, `author`, `year`). 2. `operations` - a list of tuples where each tuple represents an operation to be performed. Each tuple will contain the operation type (\'add\', \'update\', \'delete\') and a dictionary representing the book details. The function should perform the operations in the order they appear in the list. For \'add\' operation, add the new book to the list of books. For \'update\' operation, update the details of the book with the corresponding `ISBN`. For \'delete\' operation, remove the book with the given `ISBN` from the list. The function should return the updated list of book dictionaries after performing all the operations. Example: ```python books = [ {\'ISBN\': \'12345\', \'title\': \'Book A\', \'author\': \'Author 1\', \'year\': 2001}, {\'ISBN\': \'67890\', \'title\': \'Book B\', \'author\': \'Author 2\', \'year\': 2002}, {\'ISBN\': \'11223\', \'title\': \'Book C\', \'author\': \'Author 3\', \'year\': 2003} ] operations = [ (\'add\', {\'ISBN\': \'44556\', \'title\': \'Book D\', \'author\': \'Author 4\', \'year\': 2004}), (\'update\', {\'ISBN\': \'12345\', \'title\': \'Updated Book A\', \'author\': \'Updated Author 1\', \'year\': 2005}), (\'delete\', {\'ISBN\': \'67890\'}) ] manage_books(books, operations) ``` Expected output: ```python [ {\'ISBN\': \'12345\', \'title\': \'Updated Book A\', \'author\': \'Updated Author 1\', \'year\': 2005}, {\'ISBN\': \'11223\', \'title\': \'Book C\', \'author\': \'Author 3\', \'year\': 2003}, {\'ISBN\': \'44556\', \'title\': \'Book D\', \'author\': \'Author 4\', \'year\': 2004} ] ```","solution":"def manage_books(books, operations): Manages the operations on the list of books based on the provided operations. books: list of dictionaries where each dictionary represents a book with keys: ISBN, title, author, year operations: list of tuples where each tuple represents an operation (\'add\', \'update\', \'delete\') and a dictionary of book details for operation, book_info in operations: if operation == \'add\': books.append(book_info) elif operation == \'update\': for book in books: if book[\'ISBN\'] == book_info[\'ISBN\']: book.update(book_info) break elif operation == \'delete\': books = [book for book in books if book[\'ISBN\'] != book_info[\'ISBN\']] return books"},{"question":"You are given a list of N integers. Your task is to find and print the smallest and the largest integers in the list. Additionally, compute and print the sum of the integers between the smallest and the largest integers (inclusive) in the sorted order of the list. -----Constraints----- - 1 leq N leq 100000 - -10^9 leq A_i leq 10^9 -----Input----- Input is given from Standard Input in the following format: - The first line contains an integer N. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. -----Output----- Print three integers separated by spaces: the smallest integer, the largest integer, and the sum of the integers between the smallest and largest integers (inclusive) in the sorted order. -----Sample Input----- 5 4 1 3 2 5 -----Sample Output----- 1 5 15 In this example, the smallest integer is 1, the largest integer is 5, and the sum of integers in the sorted list {1, 2, 3, 4, 5} is 15.","solution":"def find_min_max_sum(nums): Given a list of integers, finds the smallest integer, the largest integer, and the sum of integers between the smallest and the largest integers (inclusive) in the sorted order of the list. Args: nums (list): List of integers. Returns: tuple: A tuple containing the smallest integer, the largest integer, and the sum of integers between the smallest and largest integers. if not nums: return (None, None, 0) sorted_nums = sorted(nums) min_val = sorted_nums[0] max_val = sorted_nums[-1] sum_between = sum(sorted_nums) return (min_val, max_val, sum_between) # Sample input N = 5 A = [4, 1, 3, 2, 5] result = find_min_max_sum(A) print(result)"},{"question":"There is an undirected graph with N nodes and M edges. Each edge has a weight associated with it. You are initially at node 1 and want to reach node N, but at each step, you can only move to an adjacent node if the weight of the edge connecting to that node is a prime number. Determine the minimum number of edges you need to traverse to reach node N from node 1. If it\'s not possible to reach node N, return -1. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two parts: * The first line contains two integers N and M, the number of nodes and edges. * The next M lines each contain three integers u, v, and w denoting an edge between nodes u and v with weight w. ------ Output Format ------ For each test case, output the minimum number of edges required to reach node N from node 1, or -1 if it is not possible. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^5 1 ≤ M ≤ 2 cdot 10^5 1 ≤ u, v ≤ N 1 ≤ w ≤ 10^5 - The sum of N over all test cases won\'t exceed 6 cdot 10^5. - The sum of M over all test cases won\'t exceed 10^6. ------ Sample Input 1 ------ 2 5 5 1 2 3 1 3 4 2 4 5 3 5 7 4 5 11 3 3 1 2 6 2 3 17 1 3 20 ------ Sample Output 1 ------ 3 -1 ------ Explanation 1 ------ Test case 1: The prime weights on the edges allow the following path: - Step 1: Move from node 1 to node 2 via edge weight 3 (prime). - Step 2: Move from node 2 to node 4 via edge weight 5 (prime). - Step 3: Move from node 4 to node 5 via edge weight 11 (prime). Test case 2: There are no paths consisting of prime weights that connect node 1 to node 3. Hence, it is not possible to reach node 3 from node 1. Therefore, the output is -1.","solution":"import math import collections def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False limit = int(math.sqrt(num)) + 1 for i in range(3, limit, 2): if num % i == 0: return False return True def find_min_edges(N, M, edges): adjacency_list = collections.defaultdict(list) for u, v, w in edges: if is_prime(w): adjacency_list[u].append(v) adjacency_list[v].append(u) queue = collections.deque([(1, 0)]) # start from node 1 with 0 edges visited = set() visited.add(1) while queue: current_node, current_depth = queue.popleft() if current_node == N: return current_depth for neighbor in adjacency_list[current_node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, current_depth + 1)) return -1 def process_test_cases(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] edges = test_cases[i][1:] result = find_min_edges(N, M, edges) results.append(result) return results"},{"question":"You are given a string `S` of length `N` containing only digits (\'0\'-\'9\'). Your task is to find the length of the longest contiguous subarray in which the sum of the digits is at most `K`. Input The first line contains two integers `N` (1 ≤ N ≤ 10^5) - the length of string `S` and `K` (0 ≤ K ≤ 10^9). The second line contains a string `S` of length `N` consisting only of digits. Output Print a single integer, the length of the longest contiguous subarray where the sum of its digits is at most `K`. Example Input 5 10 12345 Output 4 Explanation In the example above, the longest contiguous subarray where the sum is at most 10 is \\"1234\\", which has a length of 4 since 1 + 2 + 3 + 4 = 10 and adding the next digit 5 would exceed the sum of 10.","solution":"def longest_subarray_with_sum_at_most_k(N, K, S): Returns the length of the longest contiguous subarray where the sum of its digits is at most K. max_length = 0 current_sum = 0 start = 0 for end in range(N): current_sum += int(S[end]) while current_sum > K: current_sum -= int(S[start]) start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"# Problem Statement A **_Unique Element Array_** is an array where each element appears exactly once in the entire array. **_Given_** an array of integers, determine whether it qualifies as a Unique Element Array. # Notes * The array will contain only positive integers. * The size of the array is at least 1. # Input >> Output Examples ``` uniqueElementArray([1, 2, 3, 4, 5]) ==> return \\"Unique!!\\" ``` Explanation: All elements in the array appear exactly once. ``` uniqueElementArray([1, 2, 2, 4, 5]) ==> return \\"NOT!!\\" ``` Explanation: The number **2** appears more than once in the array. ``` uniqueElementArray([10, 11, 12, 13, 14, 15]) ==> return \\"Unique!!\\" ``` Explanation: All elements in the array appear exactly once. ``` uniqueElementArray([99, 99, 98, 97]) ==> return \\"NOT!!\\" ``` Explanation: The number **99** appears more than once in the array. ``` uniqueElementArray([100]) ==> return \\"Unique!!\\" ``` Explanation: The array contains only one element, which qualifies as unique.","solution":"def uniqueElementArray(arr): Determines whether the given array qualifies as a Unique Element Array. An array is considered a Unique Element Array if each element appears exactly once. Args: arr (list of int): An array of integers. Returns: str: \\"Unique!!\\" if the array is a Unique Element Array, \\"NOT!!\\" otherwise. return \\"Unique!!\\" if len(arr) == len(set(arr)) else \\"NOT!!\\""},{"question":"Write a function that takes an integer n as input and generates the following pattern. Each line i (where 1 <= i <= n), should contain i instances of the character \'*\'. Example 1: Input: 4 Output: * * * * * * * * * * Example 2: Input: 3 Output: * * * * * * Your Task: You don\'t need to input anything. Complete the function printStarPattern() which takes an integer n as the input parameter and prints the pattern. Constraints: 1 <= n <= 20","solution":"def printStarPattern(n): Prints a pattern of \'*\' where each line i (1 <= i <= n) contains i instances of \'*\'. for i in range(1, n + 1): print(\'* \' * i)"},{"question":"Given a matrix of integers with dimensions n x m, write a function to find the largest square submatrix where all the elements are the same. You need to return the size of that square submatrix (i.e., if the square has side length k, return k). -----Input----- - The first line contains two integers, n and m, which are the dimensions of the matrix. - The next n lines contain m integers each, representing the elements of the matrix. -----Output----- Output a single integer, the side length of the largest square submatrix where all the elements are the same. -----Constraints----- - 1 ≤ n, m ≤ 1000 - 1 ≤ matrix element ≤ 1000 -----Example----- Input: 4 5 1 1 1 0 0 1 1 1 0 0 1 1 1 1 1 0 0 1 1 1 Output: 3 -----Explanation----- In the given matrix, the largest square submatrix where all elements are the same is: 1 1 1 1 1 1 1 1 1 Hence, the side length of this square is 3.","solution":"def largest_square_submatrix(matrix): Returns the side length of the largest square submatrix where all elements are the same. n = len(matrix) m = len(matrix[0]) # Create a dp table to store the side length of largest sub-square ending at (i, j) dp = [[0] * m for _ in range(n)] max_side_length = 0 for i in range(n): for j in range(m): if i == 0 or j == 0: dp[i][j] = 1 else: if matrix[i][j] == matrix[i-1][j] == matrix[i][j-1] == matrix[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length"},{"question":"In a bustling city, there is a unique traffic monitoring system installed at a specific intersection. The system records the number of cars passing through the intersection per minute. Every minute, a certain number of cars enter the intersection from four different directions (north, south, east, and west) and it\'s always the same number of cars entering from each direction every minute. You are tasked with determining the total number of cars that have passed through the intersection at the end of a given number of minutes. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single line containing two space-separated integers C and M — the number of cars entering the intersection from each direction per minute and the number of minutes, respectively. ------ Output Format ------ - For each test case, print one line containing a single integer — the total number of cars that have passed through the intersection at the end of M minutes. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ C ≤ 500 1 ≤ M ≤ 10^6 ------ Sample Input 1 ------ 3 2 3 5 10 7 100 ------ Sample Output 1 ------ 24 200 2800 ------ Explanation 1 ------ - In the first test case, 2 cars enter from each of the 4 directions every minute for 3 minutes, resulting in 2 times 4 times 3 = 24 cars. - In the second test case, 5 cars enter from each of the 4 directions every minute for 10 minutes, resulting in 5 times 4 times 10 = 200 cars. - In the third test case, 7 cars enter from each of the 4 directions every minute for 100 minutes, resulting in 7 times 4 times 100 = 2800 cars.","solution":"def total_number_of_cars(T, test_cases): Given a number of test cases and a list of tuples containing the number of cars (C) entering the intersection from each direction per minute and the number of minutes (M), return a list of total number of cars that have passed through the intersection after M minutes for each test case. results = [] for C, M in test_cases: total_cars = 4 * C * M results.append(total_cars) return results"},{"question":"You are given a list of words, and you need to find the longest word chain that can be formed. A word chain is defined as a sequence of words where each word is formed by adding exactly one letter to the previous word and possibly rearranging the resulting letters. For example, the word \\"abc\\" can become \\"abcd\\", \\"abdc\\", \\"acbd\\", etc. You need to determine the length of the longest possible chain that can be formed from the given words. Input: - The first line contains an integer T, representing the number of test cases. - For each test case: - The first line contains an integer n, representing the number of words. - The following n lines each contain a word. Output: For each test case, output the length of the longest word chain that can be formed. Constraints: 1 ≤ T ≤ 10 1 ≤ n ≤ 1000 1 ≤ length of each word ≤ 100 SAMPLE INPUT 1 5 a ba bca bdca abc SAMPLE OUTPUT 4 Explanation In this example, the longest chain can be formed as follows: \\"a\\" -> \\"ba\\" -> \\"bca\\" -> \\"bdca\\", thus the length of the longest word chain is 4. The word \\"abc\\" can also be part of a chain, but it will not contribute to the longest chain possible.","solution":"def longest_word_chain(words): word_set = set(words) memo = {} def dfs(word): if word in memo: return memo[word] max_length = 1 for i in range(len(word)): next_word = word[:i] + word[i+1:] if next_word in word_set: candidate_length = 1 + dfs(next_word) max_length = max(max_length, candidate_length) memo[word] = max_length return max_length max_chain_length = 0 for word in words: max_chain_length = max(max_chain_length, dfs(word)) return max_chain_length def solve_longest_word_chain(T, test_cases): results = [] for i in range(T): n, words = test_cases[i] results.append(longest_word_chain(words)) return results # Sample Input T = 1 test_cases = [ (5, [\\"a\\", \\"ba\\", \\"bca\\", \\"bdca\\", \\"abc\\"]), ] # Solving the sample input result = solve_longest_word_chain(T, test_cases) print(result) # Output: [4]"},{"question":"You are given data about the heights of a group of students in a class. Based on the collected data, you need to classify the students into three different height categories: Short, Average, and Tall. Create a program that will correctly classify each student based on their height and output the counts of students in each category. The height categories are defined as follows: - Short: less than 150 cm - Average: between 150 cm and 170 cm (inclusive) - Tall: greater than 170 cm Your task is to write a program that reads the heights of the students, classifies each one, and then outputs the number of students in each height category. Input The input consists of several datasets. Each dataset starts with a single number, n (1 ≤ n ≤ 1000), representing the number of students in that dataset. Each of the next n lines contains a single integer representing the height (in cm) of one student. The end of the input is indicated by a single line containing zero. Output For each dataset, output three integers separated by spaces on a single line: the count of Short, Average, and Tall students, respectively. Each dataset\'s result should be on a new line. Example Input 3 145 160 175 4 135 150 165 180 0 Output 1 1 1 1 1 1 1","solution":"def classify_students(heights): short_count = 0 average_count = 0 tall_count = 0 for height in heights: if height < 150: short_count += 1 elif height <= 170: average_count += 1 else: tall_count += 1 return short_count, average_count, tall_count def process_datasets(datasets): results = [] for heights in datasets: results.append(classify_students(heights)) return results"},{"question":"A large company has multiple offices spread across different cities. Each office has a set of employees working there. The company wants to improve its communication network between the offices by establishing a minimum number of direct communication lines (connections) such that any employee in the company can communicate with any other employee either directly or indirectly through other employees. The communication network should be efficient, and the total number of connections along with the distance between the connected cities should be minimized. Each city has a specific distance between every other city where the company has offices. You are given the number of cities, the number of possible connections, and the distance between each pair of cities. Your task is to determine the minimum total distance required to establish the direct lines of communication such that all offices are efficiently connected. -----Input----- The first line contains two integers n and m (1 le n le 1000, 0 le m le n(n-1)/2) — the number of cities and the number of possible connections between the cities, respectively. The next m lines contain three integers u, v, and w (1 le u, v le n, u neq v, 1 le w le 10^4) — indicating there is a possible direct connection between city u and city v with a distance w. Each possible connection is listed at most once. -----Output----- Output one integer — the minimum total distance required to establish the communication network. If it is impossible to connect all offices, output -1. -----Example----- Input 4 5 1 2 3 1 3 1 1 4 4 2 4 2 3 4 5 Output 6 Input 3 1 1 2 2 Output -1","solution":"def kruskal_minimum_spanning_tree(n, connections): parent = list(range(n)) rank = [0] * n def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 connections.sort(key=lambda x: x[2]) mst_weight = 0 edges_used = 0 for u, v, w in connections: if find(u - 1) != find(v - 1): union(u - 1, v - 1) mst_weight += w edges_used += 1 if edges_used == n - 1: return mst_weight return -1 # Below function reads input and calls the main function. def find_minimum_total_distance(n, m, connections): return kruskal_minimum_spanning_tree(n, connections)"},{"question":"Gunnar loves symmetry and patterns. He has a collection of various rectangular patterns drawn on a 2-dimensional grid where each cell is either filled with a pattern symbol or left empty. He wants to study the symmetry of these patterns. Specifically, he is interested in finding out how many patterns are symmetric around the horizontal central axis. A pattern is said to be symmetric around the horizontal central axis if it looks the same when reflected horizontally along the central axis. For simplicity, we assume that the height of each pattern is always even, so there is a well-defined central axis. -----Input----- The first line contains two integers h and w, 2 leq h leq 500, 1 leq w leq 500, denoting the height and width of the grid. h is guaranteed to be even. Then follow h lines, each containing w characters which are either `.` (representing an empty cell) or `#` (representing a filled cell). Each line represents a row of the pattern starting from the top. -----Output----- Output \\"YES\\" if the pattern is symmetric around the horizontal central axis, otherwise output \\"NO\\". -----Examples----- Sample Input 1: 4 3 .#. # # .#. Sample Output 1: YES Sample Input 2: 4 4 .#.. .# #..# .#.. Sample Output 2: NO","solution":"def is_symmetric(n, m, grid): Checks if the pattern is symmetric around the horizontal central axis. :param n: int, height of the grid (pattern) :param m: int, width of the grid (pattern) :param grid: list of strings, each string represents a row of the grid :return: str, \\"YES\\" if the pattern is symmetric around the horizontal central axis, otherwise \\"NO\\" for i in range(n // 2): if grid[i] != grid[n - 1 - i]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a string textbf{S}. Your task is to print all possible textbf{k} length permutations of the string textbf{S} in lexicographic sorted order. # Input Format A single line containing the string textbf{S} and an integer value textbf{k} separated by a space. # Constraints 0 < k leq |S| The string contains only UPPERCASE characters. # Output Format Print the permutations of the string textbf{S} of length textbf{k} in separate lines, in lexicographic sorted order. # Sample Input ``` HACK 2 ``` # Sample Output ``` AC AH AK CA CH CK HA HC HK KA KC KH ```","solution":"from itertools import permutations def print_permutations(S, k): Prints all k length permutations of the string S in lexicographic order. sorted_permutations = sorted([\'\'.join(p) for p in permutations(S, k)]) for p in sorted_permutations: print(p) # Example usage if __name__ == \\"__main__\\": input_string = \\"HACK 2\\" S, k = input_string.split() k = int(k) print_permutations(S, k)"},{"question":"# Task **_Given_** a *2D matrix of integers, determine* **_the sum of the elements_** *in a specified submatrix*. ___ # Notes: * The matrix will be of size `m x n`, where `1 ≤ m, n ≤ 1000`. * The submatrix is defined by two pairs of coordinates `(x1, y1)` (top-left) and `(x2, y2)` (bottom-right). * Coordinates are zero-indexed and represent valid positions in the matrix. * `0 ≤ matrix[i][j] ≤ 10^6` for all valid values of `i` and `j`. ___ # Input - A 2D array `matrix` of integers. - Four integers `x1, y1, x2, y2` representing the coordinates of the top-left and bottom-right corners of the submatrix. # Output - Return a single integer that is the sum of the elements contained within the specified submatrix. ___ # Examples ``` submatrixSum([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ], 1, 1, 2, 2) ==> return (28) ``` Explanation: * The submatrix is: ``` 5 6 8 9 ``` * The sum is `5 + 6 + 8 + 9 = 28`. ___ ``` submatrixSum([ [10, 20, 30, 40], [50, 60, 70, 80], [90, 100, 110, 120] ], 0, 1, 2, 2) ==> return (390) ``` Explanation: * The submatrix is: ``` 20 30 60 70 100 110 ``` * The sum is `20 + 30 + 60 + 70 + 100 + 110 = 390`. ___ # Constraints & Complexity * Expected Time Complexity: `O(m * n)` or better.","solution":"def submatrixSum(matrix, x1, y1, x2, y2): Calculate the sum of elements in the submatrix defined by the coordinates (x1, y1) and (x2, y2). Args: matrix (list of list of int): 2D matrix of integers. x1 (int): Row index of the top-left corner of the submatrix. y1 (int): Column index of the top-left corner of the submatrix. x2 (int): Row index of the bottom-right corner of the submatrix. y2 (int): Column index of the bottom-right corner of the submatrix. Returns: int: The sum of elements in the specified submatrix. total_sum = 0 for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): total_sum += matrix[i][j] return total_sum"},{"question":"Alan loves playing with strings, and he recently learned about palindromes. A palindrome is a string that reads the same forward as backward. Alan is curious if he can rearrange the characters of a given string to form a palindrome. Your task is to write a function that determines whether a given string can be rearranged to form a palindrome. If the string can be rearranged into a palindrome, print \\"YES\\". Otherwise, print \\"NO\\". # Input Format - A single line containing a string consisting of lowercase English letters only. # Output Format - Print \\"YES\\" if the string can be rearranged to form a palindrome. Otherwise, print \\"NO\\". # Constraints - The length of the string will not exceed 1000. # Sample Input 1 ``` aaabbbb ``` # Sample Output 1 ``` YES ``` # Sample Input 2 ``` cdefghmnopqrstuvw ``` # Sample Output 2 ``` NO ``` # Explanation In the first example, the string \\"aaabbbb\\" can be rearranged to form the palindrome \\"ababbba\\" or \\"bbaaabb\\". In the second example, there is no way to rearrange \\"cdefghmnopqrstuvw\\" to form a palindrome. # Note For a string to be rearrangeable into a palindrome, at most one character can have an odd frequency.","solution":"def can_form_palindrome(s): Determines whether a given string can be rearranged to form a palindrome. Parameters: s (str): A string consisting of lowercase English letters. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, \\"NO\\" otherwise. from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can be rearranged into a palindrome if it has at most one character with an odd frequency if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers, return the highest product possible by multiplying three numbers. Example: Input: [1, 10, 2, 6, 5, 3] Output: 300 (10 * 6 * 5) Input: [-10, -10, 5, 2] Output: 500 (-10 * -10 * 5)","solution":"def highest_product_of_three(nums): Returns the highest product possible by multiplying three numbers in the array. :param nums: List[int] - an array of integers :return: int - the highest product of three numbers in the array if len(nums) < 3: raise ValueError(\\"Array must contain at least three numbers\\") nums.sort() # The maximum product can be the product of the three largest numbers max_product = nums[-1] * nums[-2] * nums[-3] # Or it can be the product of the two smallest numbers and the largest number (for dealing with negatives) max_product = max(max_product, nums[0] * nums[1] * nums[-1]) return max_product"},{"question":"A group of friends decided to go on a hiking trip. Each friend has a certain amount of water to carry, and they want to distribute the weight equally among themselves. The total number of friends is n, and each friend i has wi liters of water to carry. Friends can transfer water between each other freely, but the goal is to minimize the maximum amount of water any single friend has to carry after redistribution. Write a function to determine the maximum amount of water any single friend has to carry after the optimal redistribution. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the number of friends. The second line contains n space-separated integers w1, w2, ..., wn (1 ≤ wi ≤ 100) — the amount of water each friend has to carry initially. -----Output----- Print the minimum possible value of the maximum amount of water any single friend has to carry after redistribution. -----Examples----- Input 3 5 8 7 Output 7 Input 4 10 10 10 10 Output 10 Input 2 1 100 Output 51 -----Note----- In the first sample, the friends can redistribute the water so that each carries an equal or nearly equal amount. By redistributing, the maximum anyone has to carry is minimized to 7 liters. In the second sample, each friend already carries an equal amount, so the result remains 10 liters. In the third sample, redistributing will result in each friend carrying approximately 50.5 liters, but since they cannot carry fractional amounts, one friend will carry 51 liters and the other 50 liters.","solution":"def minimize_max_water(n, water_list): Calculates the minimum possible value of the maximum amount of water any single friend has to carry after redistribution. Parameters: n (int): number of friends water_list (list): the amount of water each friend has to carry initially Returns: int: the minimum possible maximum amount of water any single friend has to carry total_water = sum(water_list) # We need to find the smallest integer x such that x >= ceil(total_water / n) max_carry_after_redistribution = (total_water + n - 1) // n return max_carry_after_redistribution"},{"question":"A company sells products with IDs ranging from 0 to N-1. They maintain an inventory log in an array format, where each index represents the product ID, and the value at each index represents the quantity available for that product. Every day, the company performs a series of operations on this inventory log based on sales data. The operations are of two types: 1. Update operation (U(i, v)): Update the quantity of the product with ID (i) to (v). 2. Query operation (Q(l, r)): Return the total quantity of products with IDs between (l) and (r). Write a function that, given an initial inventory log and a series of operations, processes the operations and returns the results for all query operations. Input Format The first line contains two integers (N) and (M), the number of products and the number of operations respectively. The second line contains (N) integers, representing the initial quantities of the products. The next (M) lines each contain an operation in the format (U(i, v)) or (Q(l, r)). Output Format For each query operation, print the total quantity of products in the specified range. Constraints - (1 leq N leq 10^5) - (1 leq M leq 10^5) - (0 leq i < N) - (0 leq l leq r < N) - (0 leq v leq 10^6) Sample Input 5 6 10 20 30 40 50 Q(1, 3) U(2, 25) Q(2, 4) U(4, 10) Q(0, 4) Q(3, 4) Sample Output 90 85 105 50 Explanation The initial inventory log is: [10, 20, 30, 40, 50] 1. Query from index 1 to 3: 20 + 30 + 40 = 90 2. Update index 2 to 25: [10, 20, 25, 40, 50] 3. Query from index 2 to 4: 25 + 40 + 50 = 115 4. Update index 4 to 10: [10, 20, 25, 40, 10] 5. Query from index 0 to 4: 10 + 20 + 25 + 40 + 10 = 105 6. Query from index 3 to 4: 40 + 10 = 50","solution":"def process_operations(N, M, inventory, operations): results = [] for operation in operations: if operation[0] == \'U\': i, v = operation[1], operation[2] inventory[i] = v elif operation[0] == \'Q\': l, r = operation[1], operation[2] results.append(sum(inventory[l:r+1])) return results"},{"question":"You are a software engineer given a task to create a file versioning system. The system should handle two operations: increment and rollback. The file versions are represented as a sequence of integers starting from 1 (initial version) and incrementing by 1 each time a new version is created (1, 2, 3, ...). Creating a new version corresponds to incrementing the current version number. Rolling back involves going back to a previous version number. Note that you cannot roll back below version 1. Your task is to implement a system that processes a sequence of operations and returns the resulting current version of the file. Input The first line contains a single integer n — the number of operations (1 ≤ n ≤ 10^6). The second line contains n space-separated strings, each representing an operation. Each operation is either the string \\"increment\\" or \\"rollback\\". Output Print a single number — the final version number of the file after all operations have been performed. Example Input 5 increment increment rollback increment rollback Output 2 Note In the given example: 1. Start with version 1. 2. \\"increment\\" to version 2. 3. \\"increment\\" to version 3. 4. \\"rollback\\" to version 2. 5. \\"increment\\" to version 3. 6. \\"rollback\\" to version 2. Final version is 2.","solution":"def file_versioning_system(n, operations): current_version = 1 for operation in operations: if operation == \\"increment\\": current_version += 1 elif operation == \\"rollback\\": if current_version > 1: current_version -= 1 return current_version"},{"question":"Given a matrix of size m times n, where all elements are positive integers, you need to find the smallest element which is larger than or equal to a given integer k. If no such element exists, return -1. The matrix is sorted in ascending order both row-wise and column-wise. This implies that every row and every column is strictly increasing from left to right and top to bottom respectively. Function Description Complete the smallestElement function in the editor below. It should return an integer that denotes the smallest element in the matrix which is larger than or equal to k. smallestElement has the following parameter(s): - matrix: a 2D list of positive integers representing the matrix - k: an integer to compare the elements against Input Format The first line of input contains two integers, m and n, representing the number of rows and columns in the matrix, respectively. The next m lines each contain n space-separated integers representing the elements of the matrix. The last line contains a single integer k. Constraints 1 leq m, n leq 10^3 1 leq text{matrix}[i][j] leq 10^5 1 leq k leq 10^5 Output Format Print a single integer that denotes the smallest element in the matrix which is larger than or equal to k. If no such element exists, print -1. Sample Input 0 3 3 1 3 5 2 4 7 3 6 9 6 Sample Output 0 6 Explanation 0 In the matrix: `1 3 5` `2 4 7` `3 6 9` The smallest element that is greater than or equal to 6 is 6 itself. Sample Input 1 3 3 1 3 5 2 4 7 3 6 9 8 Sample Output 1 9 Explanation 1 In the matrix: `1 3 5` `2 4 7` `3 6 9` The smallest element that is greater than or equal to 8 is 9. Sample Input 2 3 3 1 3 5 2 4 7 3 6 9 10 Sample Output 2 -1 Explanation 2 In the matrix: `1 3 5` `2 4 7` `3 6 9` There is no element that is greater than or equal to 10, hence the output is -1.","solution":"def smallestElement(matrix, k): Returns the smallest element in the matrix which is larger than or equal to k. If no such element exists, returns -1. :param matrix: List[List[int]], sorted matrix :param k: int, the threshold value :return: int m = len(matrix) n = len(matrix[0]) smallest = float(\'inf\') found = False for row in matrix: for item in row: if item >= k: if item < smallest: smallest = item found = True if not found: return -1 return smallest"},{"question":"You are given a list of n integers which represents the daily temperatures for a certain period. For each day, you need to find out how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, store 0 for that day. The key is to solve this problem with a time complexity of O(n). Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of days. The second line contains n integers t_1, t_2, ..., t_n (-100 ≤ t_i ≤ 100), the temperatures recorded on each day. Output Print a list of n integers, each representing the number of days you have to wait until a warmer temperature. If there are no warmer days ahead, print 0 for that day. Examples Input 8 73 74 75 71 69 72 76 73 Output 1 1 4 2 1 1 0 0 Input 5 30 40 50 60 70 Output 1 1 1 1 0 Input 4 30 20 10 0 Output 0 0 0 0 Note In the first example, the temperature on the first day is 73. The next day, the temperature rises to 74, which is warmer. So the answer for the first day is 1. For the second day, the temperature rises to 75 two days later, so the answer is 1. For the third day, the temperature doesn\'t rise until four days later, so the answer is 4, and so on. In the second example, each day\'s temperature is higher than the previous day\'s. Therefore, the wait time for a warmer temperature is always 1 until the last day, which has no warmer day following it. So the answer for the last day is 0. In the third example, the temperatures are consistently dropping, so there are no warmer days in the future for any given day. Therefore, the answer for all days is 0.","solution":"def daily_temperatures(n, temperatures): result = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: previous_day = stack.pop() result[previous_day] = i - previous_day stack.append(i) return result"},{"question":"You are given an m x n grid of characters. You need to write a function that determines if a given word is present in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally, vertically, or diagonally neighboring. The same cell may not be used more than once in constructing the word. Input The function should take the following arguments: - grid: List[List[str]] - a 2D list containing m rows of n characters. - word: str - the word you need to search in the grid. Output Return True if the word exists in the grid; otherwise, return False. Examples Input [[\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\']] \\"ABCCED\\" Output True Input [[\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\']] \\"SEE\\" Output True Input [[\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\']] \\"ABCB\\" Output False Note: - The length of the word will be at most 100. - The dimension of the grid will not exceed 100x100. - Letters are case-sensitive.","solution":"def is_word_in_grid(grid, word): def dfs(x, y, index): if index == len(word): return True if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or visited[x][y] or grid[x][y] != word[index]: return False visited[x][y] = True found = (dfs(x + 1, y, index + 1) or dfs(x - 1, y, index + 1) or dfs(x, y + 1, index + 1) or dfs(x, y - 1, index + 1) or dfs(x + 1, y + 1, index + 1) or dfs(x - 1, y - 1, index + 1) or dfs(x - 1, y + 1, index + 1) or dfs(x + 1, y - 1, index + 1)) visited[x][y] = False return found if not grid or not grid[0]: return False m, n = len(grid), len(grid[0]) visited = [[False] * n for _ in range(m)] for i in range(m): for j in range(n): if dfs(i, j, 0): return True return False"},{"question":"In a hypothetical digital art platform, users can purchase and collect unique pixel art pieces known as \\"ArtBlocks.\\" Each ArtBlock is created by an artist with a unique identifier and consists of a grid of pixels. The platform allows users to repaint these pixels, but with the restriction that repainting a pixel can only be done in \\"black\\" (represented by the integer 1) or \\"white\\" (represented by the integer 0). Once a pixel is repainted black, it cannot be repainted white again, but a white pixel can be repainted black multiple times. The task is to determine the final grid representation of an ArtBlock after a series of repaint operations. Given the initial state of the grid and a list of repaint operations, compute the final state of the grid. -----Input----- - The first line contains three integers N, M, and K denoting the number of rows in the grid, the number of columns in the grid, and the number of repaint operations respectively. - The next N lines each contain M integers representing the initial grid state. - The next K lines each contain three integers r, c, and v representing a repaint operation where the pixel at row r and column c is repainted to value v. -----Output----- - Output N lines, each containing M integers, representing the final state of the grid after all repaint operations have been applied. -----Constraints----- - 1 le N, M le 100 - 0 le K le 10^4 - 0 le r < N - 0 le c < M - v is either 0 or 1 -----Example Input----- 3 3 4 0 0 0 0 0 0 0 0 0 0 1 1 2 2 1 0 1 0 1 1 1 -----Example Output----- 0 1 0 0 1 0 0 0 1 -----Explanation----- Example case: Initially, the grid is: 0 0 0 0 0 0 0 0 0 After the series of repaint operations, the final state of the grid is: - Repainting pixel (0, 1) to 1: 0 1 0 0 0 0 0 0 0 - Repainting pixel (2, 2) to 1: 0 1 0 0 0 0 0 0 1 - Repainting pixel (0, 1) to 0 (no change as it remains 1 due to restriction): 0 1 0 0 0 0 0 0 1 - Repainting pixel (1, 1) to 1: 0 1 0 0 1 0 0 0 1 Thus, the final grid is: 0 1 0 0 1 0 0 0 1","solution":"def final_grid_state(N, M, K, initial_grid, repaint_operations): for r, c, v in repaint_operations: if v == 1: initial_grid[r][c] = 1 # If v is 0, we don\'t need to do anything as per the rules. return initial_grid # Example Input N = 3 M = 3 K = 4 initial_grid = [ [0, 0, 0], [0, 0, 0], [0, 0, 0] ] repaint_operations = [ (0, 1, 1), (2, 2, 1), (0, 1, 0), (1, 1, 1) ] # Example Output final_state = final_grid_state(N, M, K, initial_grid, repaint_operations) for row in final_state: print(\' \'.join(map(str, row)))"},{"question":"Gopal is arranging a series of coding tutorials for his friends. Each tutorial can be scheduled any time during the day, but Gopal wants to ensure that there are no overlapping sessions to maximize the number of tutorials conducted. You are given a list of N tutorials, each with a start time and an end time. Your task is to help Gopal find the maximum number of non-overlapping tutorials that can be scheduled. Input: The first line of input contains an integer T denoting the number of test cases. Each test case starts with an integer N, the number of tutorials. The next N lines each contain two integers, the start time and the end time of each tutorial. Output: For each test case, output a single integer denoting the maximum number of non-overlapping tutorials that can be scheduled. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100000 0 ≤ start time < end time ≤ 1000000 SAMPLE INPUT 2 3 1 3 2 4 3 5 4 1 2 2 3 3 4 4 5 SAMPLE OUTPUT 2 4 Explanation In the first test case, the maximum number of non-overlapping tutorials are (1,3) and (3,5). In the second test case, all tutorials can be scheduled without overlapping, so the answer is 4.","solution":"def max_non_overlapping_tutorials(test_cases): results = [] for tutorials in test_cases: # Sort the tutorials by their end times tutorials.sort(key=lambda x: x[1]) count = 0 last_end_time = -1 for start, end in tutorials: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results def parse_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) index += 1 tutorials = [] for _ in range(N): start, end = map(int, input_lines[index].split()) index += 1 tutorials.append((start, end)) test_cases.append(tutorials) return test_cases def generate_output(results): return \'n\'.join(map(str, results)) # Example usage with sample data input_data = 2 3 1 3 2 4 3 5 4 1 2 2 3 3 4 4 5 test_cases = parse_input(input_data) results = max_non_overlapping_tutorials(test_cases) output = generate_output(results) print(output)"},{"question":"You are given a string S consisting of lowercase English letters. Determine the length of the longest subsequence in S where no two adjacent characters are the same. -----Constraints----- - The string S consists of lowercase English letters. - 1 leq |S| leq 10^5 -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the length of the longest subsequence where no two adjacent characters are the same. -----Sample Input----- aabbc -----Sample Output----- 3 One longest subsequence where no two adjacent characters are the same is \\"abc\\".","solution":"def longest_non_adjacent_subsequence_length(S): Finds the length of the longest subsequence where no two adjacent characters are the same. Parameters: S (str): input string consisting of lowercase English letters. Returns: int: length of the longest subsequence where no two adjacent characters are the same. if not S: return 0 # Start with the first character length = 1 current_char = S[0] for i in range(1, len(S)): if S[i] != current_char: length += 1 current_char = S[i] return length"},{"question":"Given an integer N which represents a positive number. Find a combination of three pairs of integers (a, b), (c, and d) and (e, f) that satisfies all of the following conditions: * 1 ≤ a, b, c, d, e, f ≤ 10^6 * a + b^2 + c + d^2 + e + f^2 = N We can prove that there always exist six integers that satisfy the conditions under the constraints of this problem. Constraints * 7 ≤ N ≤ 3 * 10^6 * All values in input are integers. Input Input is given from Standard Input in the following format: N Output Print six integers a, b, c, d, e, and f that satisfy the conditions, in this order, with spaces in between. If multiple solutions exist, any of them will be accepted. Examples Input 53 Output 1 2 2 3 3 4 Input 220 Output 1 4 2 6 3 7","solution":"def find_combination(N): for a in range(1, 10**6 + 1): for b in range(1, int((N - a)**0.5) + 1): for c in range(1, 10**6 + 1): for d in range(1, int((N - a - b**2 - c)**0.5) + 1): for e in range(1, 10**6 + 1): for f in range(1, int((N - a - b**2 - c - d**2 - e)**0.5) + 1): if a + b**2 + c + d**2 + e + f**2 == N: return a, b, c, d, e, f return None"},{"question":"You are given a set of N non-negative integers, where N is an odd number. Your task is to find the exact median of the array. If the array is sorted, the median is the middle element. -----Input----- The first line contains an integer N (1 leq N leq 10^5) which is guaranteed to be odd. The second line contains N non-negative integers a_i (0 leq a_i leq 10^9). -----Output----- Output a single integer, the median of the array. -----Examples----- Sample Input 1: 5 1 3 3 6 7 Sample Output 1: 3 Sample Input 2: 7 10 1 5 2 9 5 3 Sample Output 2: 5","solution":"def find_median(N, array): Find the median of an array with odd length N. Parameters: N (int): Number of elements in the array, always odd array (list[int]): A list of N non-negative integers Returns: int: The median of the array array.sort() return array[N // 2]"},{"question":"You are given two strings, `str1` and `str2`. Your task is to write a function `min_operations` that determines the minimum number of operations required to convert `str1` into `str2`. The allowed operations are: 1. Insert a character 2. Delete a character 3. Replace a character This problem is a variation of the classic \\"edit distance problem\\" in computer science. For example, the minimum operations required to convert \\"kitten\\" to \\"sitting\\" is 3 (replace \'k\' with \'s\', replace \'e\' with \'i\', insert \'g\'). Write your function `min_operations(str1: str, str2: str) -> int` that takes two strings and returns an integer representing the minimum number of operations needed to transform `str1` into `str2`. # Examples ```python min_operations(\\"kitten\\", \\"sitting\\") -> 3 min_operations(\\"flaw\\", \\"lawn\\") -> 2 min_operations(\\"intention\\", \\"execution\\") -> 5 min_operations(\\"\\", \\"abc\\") -> 3 ```","solution":"def min_operations(str1: str, str2: str) -> int: Returns the minimum number of operations required to convert str1 into str2. The allowed operations are insert, delete, and replace a character. m, n = len(str1), len(str2) # Create a 2D array to store results of subproblems dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)] # Fill dp array bottom up for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If str1 is empty, insert all characters of str2 elif j == 0: dp[i][j] = i # If str2 is empty, remove all characters of str1 elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], # Delete dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"Ashoka works as a city planner and is currently tasked with a special project. His city has an intricate network of roads that connect various important junctions, forming a tree structure (a connected graph with no cycles). Ashoka needs to designate one of the junctions as the central hub to minimize the maximum distance from this hub to any other junction in the city. In the context of a tree, the \\"central hub\\" is known as the tree\'s centroid. The centroid of a tree is defined as a node which, when removed, splits the tree into subtrees, none of which contains more than half of the tree\'s nodes. Your task is to help Ashoka find the centroid of the tree. Input: The input consists of multiple test cases. Each test case is given in the following format: > N > u1 v1 > u2 v2 > ... > u(N-1) v(N-1) Where N is the number of junctions (nodes) in the tree, and each of the next (N-1) lines contains two integers, u and v, indicating that there is a road (edge) between junction u and junction v. You can assume that 1 <= N <= 1000. The end of the input is indicated by a line that solely contains a zero. Output: For each test case, print one line containing the number of the junction that should be designated as the central hub. Example: Input: 6 1 2 1 3 2 4 2 5 3 6 0 Output: 1","solution":"from collections import defaultdict, deque def find_centroid(tree, N): size = [0] * (N + 1) def dfs(node, parent): size[node] = 1 for neighbor in tree[node]: if neighbor != parent: size[node] += dfs(neighbor, node) return size[node] total_nodes = N def get_centroid(node, parent): for neighbor in tree[node]: if neighbor != parent and size[neighbor] > total_nodes // 2: return get_centroid(neighbor, node) return node dfs(1, -1) return get_centroid(1, -1) def parse_input(input_lines): trees = [] current_tree = [] for line in input_lines: if line == \'0\': if current_tree: trees.append(current_tree) break parts = line.split() if len(parts) == 1: if current_tree: trees.append(current_tree) current_tree = [int(parts[0])] else: current_tree.append((int(parts[0]), int(parts[1]))) return trees def main(input_lines): trees = parse_input(input_lines) results = [] for tree_data in trees: N = tree_data[0] if N == 1: results.append(1) continue tree = defaultdict(list) for u, v in tree_data[1:]: tree[u].append(v) tree[v].append(u) results.append(find_centroid(tree, N)) return results # Example usage input_lines = [ \'6\', \'1 2\', \'1 3\', \'2 4\', \'2 5\', \'3 6\', \'0\' ] print(main(input_lines))"},{"question":"Kevin has been given a set of five distinct positive integers. He needs to identify the highest possible sum that can be obtained by summing three out of these five integers. Write a program that, given these five integers, finds the highest possible sum of any three of them. -----Input----- The input contains 5 distinct positive integers on a single line, separated by single spaces. Note: The input data will ensure the sum will always result in a consistent result. -----Output----- Output the highest possible sum of any three integers from the five given. -----Examples----- Sample Input: 1 2 3 4 5 Sample Output: 12","solution":"def highest_sum_of_three(nums): Returns the highest possible sum of any three distinct integers from the given list of five integers. nums.sort() return sum(nums[-3:])"},{"question":"You are given a string s, consisting of lower-case English letters and question marks (\'?\'). The task is to replace every question mark in the string with a lowercase English letter such that the final string does not contain any two consecutive characters that are the same. There may be multiple valid outputs for a given string. Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 100). Output Output a string where each \'?\' is replaced by a lowercase English letter such that there are no two consecutive characters that are the same. If there are multiple valid outputs, you can print any of them. Examples Input a?c? Output abcx Input ????? Output abcde Input ab??ba Output abacba Note In the first sample, replacing \'?\' with \'b\' and \'x\' ensures there are no two consecutive characters that are the same. In the second sample, any string of 5 different characters works.","solution":"def replace_question_marks(s): Replace every question mark in the string with a lowercase English letter such that the final string does not contain any two consecutive characters that are the same. s = list(s) for i in range(len(s)): if s[i] == \'?\': for char in \'abc\': # Ensure characters won\'t match with the previous or the next characters if (i > 0 and s[i-1] == char) or (i < len(s)-1 and s[i+1] == char): continue s[i] = char break return \'\'.join(s)"},{"question":"A certain institution keeps a log of its visitors. Every log entry consists of a name (a string) of the visitor and an event type (either \\"enter\\" or \\"exit\\"). Initially, the log is empty, and each visitor can only enter and exit once. The log can be queried for multiple conditions. You are given a list of events and queries. Each event is of the form \\"name event_type\\" where `name` is a string (1 ≤ |name| ≤ 50) and `event_type` is either \\"enter\\" or \\"exit\\". Each query is of the form \\"status name\\" or \\"total\\". For a query \\"status name\\", output \\"inside\\" if the person with that name is inside the institution at the time of the query, otherwise output \\"outside\\". For a query \\"total\\", output the total number of people currently inside the institution. Input The first line contains an integer n (1 ≤ n ≤ 200 000), the number of lines containing either an event or a query. Each of the next n lines contains either an event or a query as described above. Output For each query, print the result according to the type of the query. Example Input 8 Alice enter Bob enter status Alice status Bob Alice exit total status Alice status Bob Output inside inside 1 outside inside","solution":"def manage_institution_log(n, events): log = {} result = [] current_inside_count = 0 for event in events: parts = event.split() if parts[0] == \\"status\\": name = parts[1] if log.get(name, False): result.append(\\"inside\\") else: result.append(\\"outside\\") elif parts[0] == \\"total\\": result.append(current_inside_count) else: name = parts[0] event_type = parts[1] if event_type == \\"enter\\": if name not in log or not log[name]: log[name] = True current_inside_count += 1 elif event_type == \\"exit\\": if name in log and log[name]: log[name] = False current_inside_count -= 1 return result"},{"question":"You have a row of N houses, where each house can be painted with one of the K colors. The cost of painting each house with a certain color is provided in a cost matrix where `cost[i][j]` represents the cost of painting house i with color j. You want to paint all the houses such that no two adjacent houses have the same color, and you want to minimize the total cost. ----Input---- The first line of the input contains two integers N and K representing the number of houses and the number of colors respectively. The next N lines each contain K integers where the j^{th} integer in the i^{th} line represents the cost `cost[i][j]` of painting house i with color j. ----Output---- Output a single integer, the minimum cost to paint all houses under the given conditions. ----Limits---- - 1 leq N leq 1000 - 1 leq K leq 20 - 1 leq cost[i][j] leq 1000 ----Examples---- Sample Input: ``` 3 3 1 5 3 2 9 4 3 6 7 ``` Sample Output: ``` 8 ```","solution":"def min_cost_to_paint_houses(N, K, cost): if N == 0 or K == 0: return 0 # Initialize the dp array dp = [[0] * K for _ in range(N)] # Base case for the first house for j in range(K): dp[0][j] = cost[0][j] # Fill dp array for i in range(1, N): for j in range(K): dp[i][j] = min(dp[i-1][m] for m in range(K) if m != j) + cost[i][j] # Find the minimum cost in the last row min_cost = min(dp[N-1]) return min_cost"},{"question":"Library Overhaul The town\'s library system has decided to overhaul its cataloging system. Books are currently stored in a multitude of ways, making it challenging to locate a specific book promptly. To simplify this, the library has decided to introduce a robust sorting mechanism where books will be sorted by a unique identifier. The unique identifier for a book is a combination of letters and numbers. The identifier has a specific structure where the first part consists of letters (which may include both uppercase and lowercase) followed by numbers. Your task is to write a program that will reorganize the list of books based on their unique identifiers. The books should be sorted primarily by the alphabetical part of the identifier. If two identifiers have the same alphabetical part, the numerical part should be used for comparison and should be sorted in ascending order. The numerical part of the identifier will always be non-negative integers and should be treated as such (e.g., \\"002\\" should be considered as 2). Input The input consists of a single test case. The first line contains an integer n (1 ≤ n ≤ 10,000), the number of books. The next n lines each contain a unique identifier of a book. Output Output the sorted list of book identifiers, one per line. Sample Input 5 Book34 book12 Book2 book02 Book21 Sample Output Book2 Book21 Book34 book02 book12 Explanation of Sample In the given sample, books are first sorted by the alphabetical part regardless of case (\'Book\' and \'book\' are considered different alphabetical parts). When the alphabetical parts are the same, the numerical parts are considered for sorting. Hence, \\"Book2\\" comes before \\"Book21\\", and \\"book02\\" comes before \\"book12\\".","solution":"def sort_books(n, books): def book_key(book): # Split into letters and numbers alpha_part = \'\'.join([char for char in book if char.isalpha()]) numeric_part = \'\'.join([char for char in book if char.isdigit()]) # Convert numerical part to an integer numeric_part = int(numeric_part) if numeric_part else 0 return (alpha_part, numeric_part) # Sort the list using the specified key sorted_books = sorted(books, key=book_key) return sorted_books"},{"question":"Alice is intrigued by unique paths in a grid. She wants to find the number of distinct paths from the top-left corner to the bottom-right corner of an `m x n` grid. However, she has discovered some obstacles on certain cells, which she needs to avoid while traversing. You are given a 2D array `grid` where `grid[i][j]` is: - `0` if the cell at position `(i, j)` is empty, and - `1` if the cell at position `(i, j)` contains an obstacle. Alice can only move either right or down at any step. Help Alice determine the number of unique paths from the top-left corner to the bottom-right corner of the grid. -----Input----- - The first line contains two integers `m` and `n` (1 le m, n le 100), the dimensions of the grid. - The next `m` lines each contain `n` integers (either `0` or `1`), representing the grid. -----Output----- Print a single integer — the number of unique paths from the top-left to the bottom-right corner of the grid. -----Examples----- Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 2 0 1 0 0 0 0 Output 1 -----Explanation----- In the first example, the two unique paths from (0,0) to (2,2) avoiding the obstacle at (1,1) are: 1. Right, Right, Down, Down 2. Down, Down, Right, Right In the second example, the only unique path from (0,0) to (2,1) avoiding the obstacle at (0,1) is: Down, Down, Right.","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left to the bottom-right corner of the grid. Account for obstacles in the grid. if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] # Starting point dp[0][0] = 1 # Fill the first column for i in range(1, m): dp[i][0] = 0 if grid[i][0] == 1 else dp[i-1][0] # Fill the first row for j in range(1, n): dp[0][j] = 0 if grid[0][j] == 1 else dp[0][j-1] # Fill the rest of dp table for i in range(1, m): for j in range(1, n): if grid[i][j] == 1: dp[i][j] = 0 else: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Given an array A of N integers, write a program to find the smallest positive integer that is missing from the array. Your solution should have a time complexity of O(n) and utilize constant space. Example 1: Input: Arr[] = {3, 4, -1, 1} Output: 2 Explanation: The smallest positive integer missing from the array is 2. Example 2: Input: Arr[] = {1, 2, 0} Output: 3 Explanation: The smallest positive integer missing from the array is 3. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function findMissing() that takes an array (arr), size of array (n), and returns the smallest positive integer missing from the array. The driver code takes care of the printing. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^6 -10^6 ≤ A[i] ≤ 10^6","solution":"def findMissing(arr, n): Returns the smallest positive integer missing from the array. Args: arr: list of integers. n: size of the array. Returns: Smallest positive integer missing. # Move all the non-positive numbers to the left side of the array # and the positive numbers to the right side shift = partition(arr, n) # Use the index for marking numbers present in the positive part return findMissingPositive(arr[shift:], n - shift) def partition(arr, n): This function segregates positive and non-positive numbers in the array. Args: arr: list of integers. n: size of the array. Returns: Index of the first positive number. j = 0 for i in range(n): if arr[i] <= 0: arr[i], arr[j] = arr[j], arr[i] j += 1 return j def findMissingPositive(arr, n): This function finds the smallest positive missing number from the array that contains all positive integers. Args: arr: list of positive integers. n: size of the array. Returns: Smallest positive integer missing. for i in range(n): val = abs(arr[i]) if val - 1 < n and arr[val - 1] > 0: arr[val - 1] = -arr[val - 1] for i in range(n): if arr[i] > 0: return i + 1 return n + 1"},{"question":"Given an array of integers of size n, you need to perform a series of range updates and queries. Each range update specifies a start index and an end index (inclusive) along with a value, and you need to add the value to each element in the specified range. After all the updates are performed, you need to answer a number of queries each of which asks for the value of the element at a specific index. # INPUT: - The first line contains two integers, n and m, which represent the number of elements in the array and the number of updates, respectively. - The second line contains n integers, the initial values of the array. - The following m lines each contain three integers, start, end, and value, representing a range update where value should be added to each element from index start to index end (1-based). - The next line contains an integer q, the number of queries. - The following q lines each contain a single integer, the index (1-based) for which the value of the array element is to be reported. # OUTPUT: - For each query, output the value of the array element at the specified index after all the updates have been applied. # CONSTRAINTS: - 1 ≤ n, m ≤ 100000 - 1 ≤ q ≤ 100000 - 1 ≤ start, end ≤ n - -1000 ≤ value ≤ 1000 - -100000 ≤ initial array values ≤ 100000 # SAMPLE INPUT: ``` 5 3 1 2 3 4 5 1 3 2 2 4 1 1 5 -1 2 1 5 ``` # SAMPLE OUTPUT: ``` 2 5 ``` # EXPLANATION: Initial array: [1, 2, 3, 4, 5] After first update: [3, 4, 5, 4, 5] After second update: [3, 5, 6, 5, 5] After third update: [2, 4, 5, 4, 4] Queries: - Element at index 1: 2 - Element at index 5: 4","solution":"def range_update_and_queries(n, m, initial_array, updates, q, queries): Perform a series of range updates and then answer queries about the array. Parameters: - n: number of elements in the array - m: number of updates - initial_array: the initial values of the array - updates: a list of updates, each a tuple (start, end, value) - q: number of queries - queries: a list of queries, each a single integer Returns: - A list of results for each query after applying all the range updates # Convert initial_array indexes from 1-based to 0-based array = initial_array[:] # Apply the updates for update in updates: start, end, value = update for i in range(start - 1, end): array[i] += value # Answer the queries result = [] for query in queries: result.append(array[query - 1]) return result"},{"question":"Write a function named `generateSequenceSum` that produces an array where each value is the cumulative sum of the values from 1 up to that index position (inclusive). The input to the function should be a single integer `N` indicating how many elements the output array should contain. For example, the following code will result in an array containing the cumulative sums for the first 5 integers: ``` generateSequenceSum(5) // => [1, 3, 6, 10, 15] ```","solution":"def generateSequenceSum(N): if N <= 0: return [] sequence_sum = [] current_sum = 0 for i in range(1, N+1): current_sum += i sequence_sum.append(current_sum) return sequence_sum"},{"question":"Alex is working on a project where he needs to process a series of documents. Each document is represented as a string, and he wants to determine the longest common prefix (LCP) amongst a given set of document strings. The longest common prefix of a set of strings is the longest initial portion of all the strings that they share. For example, the longest common prefix of [\\"flower\\", \\"flow\\", \\"flight\\"] is \\"fl\\". Help Alex by writing a function that takes an array of strings and returns the longest common prefix shared amongst all of them. If there is no common prefix, return an empty string \\"\\". Input - The first line contains an integer n (1 ≤ n ≤ 200). - The following n lines each contain a non-empty string consisting of lowercase Latin letters. The length of each string will be between 1 and 200 characters. Output Print the longest common prefix shared amongst the input strings. If there is no common prefix, print an empty string. Examples Input 3 flower flow flight Output fl Input 2 dog racecar Output (Empty string) Input 4 interspecies interstellar interstate interest Output inters Note In the first example, the longest common prefix among the strings \\"flower\\", \\"flow\\", and \\"flight\\" is \\"fl\\". In the second example, there is no common prefix among \\"dog\\" and \\"racecar\\", hence the output should be an empty string. In the third example, the longest common prefix among the strings \\"interspecies\\", \\"interstellar\\", \\"interstate\\", and \\"interest\\" is \\"inters\\".","solution":"def longest_common_prefix(strings): Returns the longest common prefix of the given list of strings. if not strings: return \\"\\" # Find the minimum length string in the input list min_length = min(len(s) for s in strings) # Initialize the common prefix common_prefix = \\"\\" # Compare characters one by one until the minimum string length for i in range(min_length): # Take the character at position i from the first string current_char = strings[0][i] # Check if this character is the same in all the other strings if all(s[i] == current_char for s in strings): common_prefix += current_char else: break # As soon as we find a mismatch we stop return common_prefix"},{"question":"Given a list of integers, rearrange the list such that for every integer x, all integers less than x come before all integers greater than x. The relative order of the integers with respect to each other should remain the same. -----Constraints----- - 1 ≤ length of the list ≤ 10^5 - -10^9 ≤ integer in the list ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: - An integer x (the pivot) - A list of integers -----Output----- Print the rearranged list where all integers less than x come before all integers greater than x. Preserve the relative order of the integers in the original list. -----Sample Input----- 5 1 8 3 7 5 6 4 9 2 -----Sample Output----- 1 3 4 2 8 7 5 6 9","solution":"def rearrange_list(pivot, array): Given a list of integers and a pivot, rearrange the list such that for every integer x, all integers less than x come before all integers greater than x. Params: - pivot (int): The pivot integer - array (list of int): The list of integers Returns: - (list of int): The rearranged list less_than_pivot = [i for i in array if i < pivot] equal_or_greater_than_pivot = [i for i in array if i >= pivot] return less_than_pivot + equal_or_greater_than_pivot"},{"question":"Write a function to calculate the product of all elements in a given list except the element at the current index, without using division. The function should return a new list containing the products. Input - A single integer n (1 ≤ n ≤ 1000) - the number of integers in the list. - A list of n integers a1, a2, ..., an (−1000 ≤ ai ≤ 1000). Output - A list of n integers where each integer at index i of the list is the product of all elements in the input list except the one at index i. Examples Input 4 1 2 3 4 Output 24 12 8 6 Input 3 -1 1 0 Output 0 0 -1","solution":"def product_except_self(nums): Returns an array where each element at index i is the product of all the elements in the input list except the one at index i. length = len(nums) if length <= 1: return [] result = [1] * length left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"You are given an array of n integers a_1, a_2, ldots, a_n. You need to determine if you can rearrange the elements of the array such that every element in the rearranged array is less than the sum of the two elements immediately preceding it. Specifically, can you reorder the array such that for every index i (3 leq i leq n), a_i < a_{i-1} + a_{i-2}? -----Input----- The first line of input contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 100), the size of the array a. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^6). -----Output----- For each test case, output \\"YES\\" if the array can be rearranged to meet the condition, and \\"NO\\" otherwise. -----Examples----- Input 3 4 4 1 3 2 3 10 20 30 5 1 3 5 7 9 Output YES NO YES -----Note----- In the first sample, one way to rearrange the array to meet the condition is [1, 2, 4, 3]. In the second sample, there\'s no way to reorder the array to meet the condition because the largest element 30 will always be greater than the sum of any two other elements in the array. In the third sample, one way to rearrange the array to meet the condition is [1, 3, 5, 9, 7].","solution":"def can_rearrange(n, array): Determines if it\'s possible to rearrange the array such that every element in the rearranged array is less than the sum of the two elements immediately preceding it. array.sort() if n < 3: return \\"YES\\" # Check for the condition in the sorted array if array[-1] < array[-2] + array[-3]: return \\"YES\\" else: return \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n, array = test_cases[i] result = can_rearrange(n, array) results.append(result) return results"},{"question":"Implement a class `QueueWithStacks` that simulates the functionality of a queue using two stacks. The class should have the following methods: - `__init__()`: Initializes the class with two empty stacks. - `enqueue(x)`: Adds element `x` to the end of the queue. - `dequeue()`: Removes the element from the front of the queue and returns it. - `peek()`: Returns the element at the front of the queue without removing it. - `empty()`: Returns `True` if the queue is empty, `False` otherwise. Example 1: Input: ``` q = QueueWithStacks() q.enqueue(1) q.enqueue(2) print(q.peek()) # returns 1 print(q.dequeue()) # returns 1 print(q.empty()) # returns False print(q.dequeue()) # returns 2 print(q.empty()) # returns True ``` Note: 1. You may assume that all operations are valid (e.g., `dequeue` operations will not be called on an empty queue). 2. The `QueueWithStacks` class should only use standard stack operations—push to top, pop from top, size, and is empty.","solution":"class QueueWithStacks: def __init__(self): Initialize your data structure here. self.stack1 = [] self.stack2 = [] def enqueue(self, x): Push element x to the end of queue. self.stack1.append(x) def dequeue(self): Removes the element from the front of the queue and returns it. if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) return self.stack2.pop() def peek(self): Get the front element. if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) return self.stack2[-1] def empty(self): Returns whether the queue is empty. return not self.stack1 and not self.stack2"},{"question":"A delivery company uses drones to transport packages between locations. Each drone has a limited battery capacity, and its battery drainage is affected by the weight of the package it carries. The drone has a specific flight range in distance that it can cover on a full charge without any payload. This range decreases proportionally with the weight of the package. The company wants to maximize the distance their drones can cover before needing to recharge or swap batteries. To achieve this, they need to calculate how far a drone can fly given the weight of its payload and the drone\'s specifications. Your task is to write a program that calculates the maximum distance each drone can fly while carrying a specific package. Input The input consists of one or more data sets. Each data set represents the scenario for a single drone and consists of the following values: - The first line contains a positive integer indicating the number of drones. - For each drone, the input contains: - Two positive integers: the flight range of the drone on a full charge (in kilometers) and the battery capacity (in milliampere-hours). - A series of lines for each package: - A single positive integer representing the weight of the package (in grams). - The word \\"End\\" to mark the last package for the drone. The input is terminated with a line containing a single integer zero. Output For each data set, the program should output a single line with the maximum distance each drone can fly for each corresponding package\'s weight. Example Input 1 100 5000 50 100 250 End 1 150 7500 100 200 400 End 0 Output 80 50 0 100 0 0","solution":"def calculate_flight_distance(range_without_payload, battery_capacity, weights): Calculate the maximum flight distance a drone can cover given weights of the packages :param range_without_payload: the flight range of the drone on a full charge (in kilometers) :param battery_capacity: the battery capacity (in milliampere-hours) :param weights: list of weights of the packages (in grams) :return: list of maximum distances the drone can fly for each weight max_distances = [] for weight in weights: # Assuming that each gram of weight reduces the range by a fixed ratio to the weight of the package # For simplicity, assuming 1 gram weight reduces the range by 1 km (which might be different based on real data) reduced_range = range_without_payload - weight # The drone cannot have a negative range; minimum is 0 max_distance = max(0, reduced_range) max_distances.append(max_distance) return max_distances def parse_input(input_data): Parse the input data and returns the relevant values for processing :param input_data: input data as per format :return: list of tuples (range_without_payload, battery_capacity, weights) lines = input_data.strip().split(\\"n\\") idx = 0 drone_data = [] while idx < len(lines): num_drones = int(lines[idx]) idx += 1 if num_drones == 0: break for _ in range(num_drones): range_without_payload, battery_capacity = map(int, lines[idx].split()) idx += 1 weights = [] while lines[idx] != \\"End\\": weight = int(lines[idx]) weights.append(weight) idx += 1 idx += 1 # To skip the \\"End\\" line drone_data.append((range_without_payload, battery_capacity, weights)) return drone_data def main(input_data): drone_data = parse_input(input_data) results = [] for range_without_payload, battery_capacity, weights in drone_data: results.append(calculate_flight_distance(range_without_payload, battery_capacity, weights)) for result in results: print(\\" \\".join(map(str, result))) # Example input input_data = 1 100 5000 50 100 250 End 1 150 7500 100 200 400 End 0 main(input_data)"},{"question":"In a village, there are several houses arranged in a row, and each house can either be painted red, green, or blue. The cost of painting each house with a certain color is different. Golu is tasked with painting every house in the village such that no two adjacent houses have the same color and the total painting cost is minimized. Your task is to help Golu find the minimum cost needed to paint all the houses following the given conditions. **Input:** - The first line contains an integer T, the number of test cases. - Each test case starts with an integer N, the number of houses. - The next N lines contain three integers each: r, g, and b, where r is the cost to paint the current house red, g is the cost to paint the current house green, and b is the cost to paint the current house blue. **Output:** For each test case, print the minimum cost required to paint all the houses such that no two adjacent houses have the same color. **Constraints:** - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ r, g, b ≤ 1000 **Sample Input:** ``` 2 3 1 2 3 1 2 3 3 3 1 2 2 1 3 2 1 3 ``` **Sample Output:** ``` 4 3 ``` **Explanation:** - In the first test case, one of the optimal ways to paint the houses is [Red, Green, Blue], which gives a total cost of 1 + 2 + 1 = 4. - In the second test case, one of the optimal ways to paint the houses is [Green, Red], which gives a total cost of 1 + 2 = 3.","solution":"def min_cost_to_paint_houses(T, test_cases): results = [] for case in test_cases: N = case[0] costs = case[1:] dp = [[0] * 3 for _ in range(N)] dp[0][0], dp[0][1], dp[0][2] = costs[0] for i in range(1, N): dp[i][0] = costs[i][0] + min(dp[i-1][1], dp[i-1][2]) dp[i][1] = costs[i][1] + min(dp[i-1][0], dp[i-1][2]) dp[i][2] = costs[i][2] + min(dp[i-1][0], dp[i-1][1]) results.append(min(dp[N-1])) return results"},{"question":"Kevin is fascinated by string manipulation and wants to practice more complex operations involving substrings. He is given a string s of length n and an array of queries where each query has two integers l and r (1-based index), indicating a substring s[l-1] to s[r-1]. For each query, Kevin needs to determine if the substring is composed of only unique characters, and if so, return the substring, otherwise return an empty string. For example, let\'s say the string is \\"abcabcabc\\" and the queries are: 1 3 (substring = \\"abc\\") 2 4 (substring = \\"bca\\") 1 5 (substring = \\"abca\\") For the above queries, the resulting substrings would be: \\"abc\\" (since all characters are unique), \\"bca\\" (since all characters are unique), \\"\\" (since \'a\' repeats in \\"abca\\"). Given the string s and multiple queries, determine the result for each query. Input Format - The first line contains an integer q, denoting the number of queries. - The second line contains the string s of length n. - Each of the q subsequent lines contains two space-separated integers, l and r. Constraints - 1 leq q leq 10^5 - 1 leq n leq 10^5 - 1 leq l leq r leq n Output Format For each query, print the determined substring, or an empty string if not all characters within the substring are unique. Sample Input 3 abcabcabc 1 3 2 4 1 5 Sample Output abc bca Explanation 1. For the first query, 1 3, the substring is \\"abc\\", and all characters are unique. 2. For the second query, 2 4, the substring is \\"bca\\", and all characters are unique. 3. For the third query, 1 5, the substring is \\"abca\\", but \'a\' repeats, so the result is an empty string.","solution":"def unique_substrings(s, queries): results = [] for l, r in queries: substring = s[l-1:r] if len(set(substring)) == len(substring): results.append(substring) else: results.append(\\"\\") return results"},{"question":"You are given an array of integers nums, and a target integer target. You need to find a pair of distinct indices i and j in the array such that nums[i] + nums[j] equals target. Return the indices of these two numbers as an array [i, j], where i and j are in ascending order. If there are multiple solutions, you may return any of them. If no such pair exists, return an empty array. Constraints * The returned array must have exactly two integers (i.e., [i, j]). * The indices in the array should be in ascending order. * All values in input are integers. * 2 leq nums.length leq 10^5 * -10^9 leq nums[i] leq 10^9 * -10^9 leq target leq 10^9 Input The input consists of two lines. The first line contains the array of integers nums separated by spaces. The second line contains the target integer target. Output Output the array with indices [i, j] in ascending order if a pair exists, otherwise output an empty array. Examples Input 2 7 11 15 9 Output [0, 1] Input 1 2 3 4 5 10 Output [] Input 3 2 4 6 Output [1, 2]","solution":"def find_pair(nums, target): Finds two indices in the list nums such that their values sum up to the target. :param nums: List of integers :param target: Target integer sum :return: A list [i, j] of indices where nums[i] + nums[j] == target num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return sorted([num_to_index[complement], i]) num_to_index[num] = i return []"},{"question":"**Task** Given an array of integers and an integer `k`, your task is to determine whether there are two distinct indices `i` and `j` in the array such that the absolute difference between `nums[i]` and `nums[j]` is at most `k`. **Example** For `nums = [1, 2, 3, 1]` and `k = 3`, the result should be `True`. `nums[0]` and `nums[3]` both are 1, and `|0 - 3| = 3` which is at most `k`. For `nums = [1, 0, 1, 1]` and `k = 1`, the result should be `True`. `nums[2]` and `nums[3]` are both 1, and `|2 - 3| = 1` which is at most `k`. **Input/Output** - `[input]` array of integers `nums` An array of integers. `1 <= nums.length <= 10^5`, `-10^9 <= nums[i] <= 10^9` - `[input]` integer `k` The maximum index difference. `0 <= k <= 10^5` - `[output]` a boolean Returns `True` if there are two distinct indices `i` and `j` such that the absolute difference between `nums[i]` and `nums[j]` is at most `k`. Otherwise, returns `False`.","solution":"def contains_nearby_duplicate(nums, k): Determine whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most k. Args: nums: List[int] - list of integers k: int - the maximum index difference Returns: bool - True if there exists such indices, False otherwise indices = {} for i, num in enumerate(nums): if num in indices and i - indices[num] <= k: return True indices[num] = i return False"},{"question":"You are given a list of integers representing the prices of a stock over time. You want to maximize your profit by choosing exactly two non-overlapping subarrays. Each subarray must contain at least one element. The profit is calculated as the sum of the elements in the two chosen subarrays. Find the maximum possible profit. -----Constraints----- - 2 leq n leq 2 times 10^5 - |prices_i| leq 10^9 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: n prices_1 ... prices_n -----Output----- Print the maximum possible profit you can achieve by choosing exactly two non-overlapping subarrays. -----Sample Input----- 6 3 2 5 1 6 4 -----Sample Output----- 21 Choosing subarrays [3, 2, 5] and [6, 4] makes the sum 21, which is the maximum possible value.","solution":"def max_profit_two_subarrays(prices): n = len(prices) # Step 1: prefix sums of the prices array prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + prices[i - 1] # Step 2: Calculate maximum subarray sums ending before each index i (from left to right) max_ending_here = float(\'-inf\') max_subarray_sum_left = [0] * n for i in range(n): max_ending_here = max(max_ending_here + prices[i], prices[i]) max_subarray_sum_left[i] = max(max_subarray_sum_left[i-1] if i > 0 else float(\'-inf\'), max_ending_here) # Step 3: Calculate maximum subarray sums starting after each index i (from right to left) max_ending_here = float(\'-inf\') max_subarray_sum_right = [0] * n for i in range(n-1, -1, -1): max_ending_here = max(max_ending_here + prices[i], prices[i]) max_subarray_sum_right[i] = max(max_subarray_sum_right[i+1] if i < n-1 else float(\'-inf\'), max_ending_here) # Step 4: Find two non-overlapping subarrays that maximize the sum max_profit = float(\'-inf\') for i in range(n-1): max_profit = max(max_profit, max_subarray_sum_left[i] + max_subarray_sum_right[i+1]) return max_profit"},{"question":"Given an undirected graph with N nodes and M edges, your task is to determine the number of connected components in the graph. Each edge is given as a pair of nodes (u, v), indicating an undirected edge connecting u and v. -----Constraints----- - 1 leq N leq 10^4 - 0 leq M leq 5 times 10^4 - 1 leq u, v leq N - No multiple edges exist between any pair of nodes. - No self-loops present in the graph. -----Input----- Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 ... u_M v_M -----Output----- Output an integer representing the number of connected components in the graph. -----Sample Input----- 5 3 1 2 2 3 4 5 -----Sample Output----- 2 Explanation: There are 2 connected components in the graph: {1, 2, 3} and {4, 5}. The nodes 1, 2, and 3 form one component since they are all connected either directly or indirectly. The nodes 4 and 5 form another component.","solution":"def count_connected_components(N, edges): Determines the number of connected components in an undirected graph. Parameters: N (int): Number of nodes. edges (list of tuples): List of edges, where each edge is represented as a tuple (u, v). Returns: int: Number of connected components. from collections import defaultdict def dfs(node, visited, graph): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() connected_components = 0 for node in range(1, N+1): if node not in visited: visited.add(node) dfs(node, visited, graph) connected_components += 1 return connected_components"},{"question":"A chef is designing a new dish and needs to perfectly balance the taste by mixing exactly a certain amount of two ingredients, A and B. The ingredients are available in packets of different weights. The chef needs to know if it is possible to measure out exactly the desired amount of both ingredients using any combination of the packets available. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of three parts: 1. An integer n (1 ≤ n ≤ 50) — the number of packet weights for ingredient A. 2. A list of n integers (1 ≤ weightsAi ≤ 1000) — the weights of the packets of ingredient A. 3. An integer m (1 ≤ m ≤ 50) — the number of packet weights for ingredient B. 4. A list of m integers (1 ≤ weightsBi ≤ 1000) — the weights of the packets of ingredient B. 5. Two integers x and y (1 ≤ x, y ≤ 1000) — the exact weights needed for ingredients A and B, respectively. Output For each test case, print \\"YES\\" if it is possible to measure out exactly x grams of ingredient A and y grams of ingredient B using any combination of packets. Otherwise, print \\"NO\\". Examples Input 2 3 1 3 5 2 2 4 6 6 4 2 5 8 10 3 1 4 6 7 9 Output YES NO","solution":"def can_measure_out(ingredient_weights, target_weight): Determine if the target weight can be achieved using any combination of given weights. This is a variation of the subset sum problem. dp = [False] * (target_weight + 1) dp[0] = True for weight in ingredient_weights: for i in range(target_weight, weight - 1, -1): if dp[i - weight]: dp[i] = True return dp[target_weight] def can_balance_taste(t, test_cases): results = [] for case in test_cases: n, weightsA, m, weightsB, x, y = case can_measure_A = can_measure_out(weightsA, x) can_measure_B = can_measure_out(weightsB, y) if can_measure_A and can_measure_B: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) weightsA = list(map(int, lines[index + 1].split())) m = int(lines[index + 2]) weightsB = list(map(int, lines[index + 3].split())) x, y = map(int, lines[index + 4].split()) test_cases.append((n, weightsA, m, weightsB, x, y)) index += 5 return t, test_cases def main(input_str): t, test_cases = parse_input(input_str) results = can_balance_taste(t, test_cases) return \\"n\\".join(results)"},{"question":"You are tasked with designing a data structure for an online store that keeps track of products and their prices. Implement the StoreCatalog class which supports the following operations: - `StoreCatalog()`: Initializes the object. - `void addProduct(string productName, int price)`: Adds a product with the given name and price to the catalog. If the product already exists, it updates its price. - `void removeProduct(string productName)`: Removes the product with the given name from the catalog. If the product does not exist, do nothing. - `int findPrice(string productName)`: Returns the price of the product with the given name. If the product does not exist, return -1. - `string findCheapest()`: Returns the name of the cheapest product in the catalog. If there are multiple products with the same lowest price, return the one that was added first. If the store catalog is empty, return \\"No products\\". Example: Input: [\\"StoreCatalog\\",\\"addProduct\\",\\"addProduct\\",\\"addProduct\\",\\"findPrice\\",\\"findCheapest\\",\\"removeProduct\\",\\"removeProduct\\",\\"findCheapest\\"] [[],[\\"Apple\\",100],[\\"Banana\\",50],[\\"Cherry\\",75],[\\"Apple\\"],[\\"\\"],[\\"Banana\\"],[\\"Orange\\"],[\\"\\"]] Output: [null,null,null,null,100,\\"Banana\\",null,null,\\"Cherry\\"] Explanation: StoreCatalog storeCatalog = new StoreCatalog(); storeCatalog.addProduct(\\"Apple\\", 100); // Adds \\"Apple\\" with price 100 to the catalog. storeCatalog.addProduct(\\"Banana\\", 50); // Adds \\"Banana\\" with price 50 to the catalog. storeCatalog.addProduct(\\"Cherry\\", 75); // Adds \\"Cherry\\" with price 75 to the catalog. storeCatalog.findPrice(\\"Apple\\"); // Finds price of \\"Apple\\", which is 100. storeCatalog.findCheapest(); // Finds the cheapest product, which is \\"Banana\\". storeCatalog.removeProduct(\\"Banana\\"); // Removes \\"Banana\\" from the catalog. storeCatalog.removeProduct(\\"Orange\\"); // Tries to remove \\"Orange\\", but it doesn\'t exist. storeCatalog.findCheapest(); // Now the cheapest product is \\"Cherry\\". Constraints: - 1 <= productName.length <= 50 - 0 <= price <= 10^6 - At most 5000 calls will be made to addProduct, removeProduct, findPrice, and findCheapest.","solution":"class StoreCatalog: def __init__(self): self.products = {} self.product_order = [] def addProduct(self, productName, price): if productName not in self.products: self.product_order.append(productName) self.products[productName] = price def removeProduct(self, productName): if productName in self.products: del self.products[productName] self.product_order = [p for p in self.product_order if p != productName] def findPrice(self, productName): if productName in self.products: return self.products[productName] return -1 def findCheapest(self): if not self.products: return \\"No products\\" cheapest_price = min(self.products.values()) for product in self.product_order: if self.products[product] == cheapest_price: return product"},{"question":"Alyssa loves buying and trading collectibles from her favorite TV show. Recently, she amassed a vast collection of unique items, each identified by a unique serial number and a specific trade value. Alyssa’s collection has grown so immense that she sometimes finds it hard to keep track of which items to trade for the best value returns. She has decided to develop a system to help her manage and decide on trades more efficiently. Alyssa wants to know the maximum possible trade value she can achieve by selecting a group of items with no duplicate serial numbers and whose total trading value does not exceed a specified budget. She can only trade each item once, and she needs a program to determine the best combination of items. Write a program to help Alyssa find the maximum trade value possible given her collection\'s details and a budget constraint. -----Input----- The input consists of a single test case. The first line contains an integer n, the number of items in Alyssa\'s collection (1 leq n leq 100), and an integer B, the budget constraint (1 leq B leq 1000). Each of the following n lines contains two integers: the serial number of the item s (which is guaranteed to be unique) and the associated trade value v (1 leq v leq 1000). -----Output----- Display an integer representing the maximum total trade value that Alyssa can achieve without exceeding the budget. -----Examples----- Sample Input: 5 10 1 5 2 3 3 9 4 8 5 2 Sample Output: 10 Sample Input: 4 7 1 4 2 5 3 3 4 2 Sample Output: 7","solution":"def max_trade_value(n, B, items): # Implementing a dynamic programming approach to solve the knapsack problem dp = [0] * (B + 1) for i in range(n): s, v = items[i] for b in range(B, v - 1, -1): dp[b] = max(dp[b], dp[b - v] + v) return dp[B]"},{"question":"A company XYZ wants to improve its customer service by providing quick responses to support emails. As part of this initiative, they want to implement a categorization system that automatically classifies incoming emails based on specific keywords and phrases within the email content. This will help route the emails to the appropriate department for faster processing. The rules for categorization are as follows: - If an email contains the phrase \\"billing issue\\" or \\"payment problem\\", classify it as \\"Billing Department\\". - If an email contains the phrase \\"technical support\\" or \\"software issue\\", classify it as \\"Technical Support\\". - If an email contains the phrase \\"product inquiry\\" or \\"information request\\", classify it as \\"Sales Department\\". - If an email contains the phrase \\"job application\\" or \\"applying for\\", classify it as \\"HR Department\\". - If an email contains the phrase \\"partnership opportunity\\" or \\"collaboration request\\", classify it as \\"Business Development\\". - If none of the above phrases are found, classify it as \\"General Inquiry\\". Write a function `categorize_email` that takes a string `email_content` as input and returns the appropriate classification based on the rules outlined above. The function should be case-insensitive when matching phrases. # Example: ```python def categorize_email(email_content: str) -> str: # Implement the function here # Example Usage: email_content = \\"I am writing to report a technical support issue with the software I purchased.\\" print(categorize_email(email_content)) # Output: \\"Technical Support\\" ``` - If the input email_content is \\"I have a question about billing issue on my last statement.\\", the function should return \\"Billing Department\\". - If the input email_content is \\"I am applying for the software engineer position.\\", the function should return \\"HR Department\\". - If the input email_content is \\"Can you provide more information about your new product?\\", the function should return \\"Sales Department\\". - If the input email_content is \\"We would like to discuss a potential partnership opportunity.\\", the function should return \\"Business Development\\". - If the input email_content is \\"I would like to know about your company policies.\\", the function should return \\"General Inquiry\\". Ensure that sentences containing multiple categories will be classified based on the first relevant match found in the sequence defined above (e.g., \\"billing issue\\" will take precedence over \\"technical support\\").","solution":"def categorize_email(email_content: str) -> str: Categorizes email content into specific categories based on predefined rules. email_content = email_content.lower() if \\"billing issue\\" in email_content or \\"payment problem\\" in email_content: return \\"Billing Department\\" if \\"technical support\\" in email_content or \\"software issue\\" in email_content: return \\"Technical Support\\" if \\"product inquiry\\" in email_content or \\"information request\\" in email_content: return \\"Sales Department\\" if \\"job application\\" in email_content or \\"applying for\\" in email_content: return \\"HR Department\\" if \\"partnership opportunity\\" in email_content or \\"collaboration request\\" in email_content: return \\"Business Development\\" return \\"General Inquiry\\""},{"question":"In a certain land, houses line up on one side of a straight road. The houses are numbered sequentially from left to right starting from 1. During a certain festive season, some houses have lights on. You are given an integer `n` representing the total number of houses and a list of integers `lights` which consists of the house numbers that have their lights on. You need to determine the maximum distance between any two consecutive houses that both have their lights on. Write a function to return the maximum distance between any two consecutive houses with their lights on. If there are fewer than two houses with lights on, return 0. # Input - An integer `n` where `1 ≤ n ≤ 100000` - A list `lights` of integers, where each integer is between 1 and `n` inclusive and all integers are unique. # Output - A single integer representing the maximum distance. # Example ```python max_light_distance(10, [3, 5, 8, 9]) ``` Output: `3` Explanation: The houses with lights are 3, 5, 8, and 9. The distances are the differences between consecutive numbers in the list: - Distance between house 3 and 5 is 2 - Distance between house 5 and 8 is 3 - Distance between house 8 and 9 is 1 The maximum distance is 3. Note that if the list `lights` contains fewer than two elements, the function should return 0 as there are no consecutive houses with lights to measure the distance between. Write a function `max_light_distance(n, lights)` that achieves this.","solution":"def max_light_distance(n, lights): Returns the maximum distance between any two consecutive houses with lights on. Parameters: n (int): The total number of houses lights (list): A list of house numbers that have lights on Returns: int: The maximum distance between consecutive houses with lights on if len(lights) < 2: return 0 # Sort the list of lights lights.sort() # Calculate the distances between consecutive houses max_distance = 0 for i in range(1, len(lights)): distance = lights[i] - lights[i - 1] if distance > max_distance: max_distance = distance return max_distance"},{"question":"You are given a string `s` consisting of lowercase Latin letters and a list of strings `words`. Let\'s call a string in `words` a subsequence of `s` if it can be derived by deleting some (possibly zero) characters from `s` without changing the order of the remaining characters. Find the length of the longest string in `words` that is a subsequence of `s`. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains the string s (1 le |s| le 1000). The second line of each test case contains an integer k (1 le k le 100) — the number of strings in `words`. The next k lines contain a string each, representing the strings in `words`. Each string is non-empty and has length at most |s|. It is guaranteed that the sum of lengths of all strings in `words` across all test cases does not exceed 100,000. -----Output----- For each test case, output a single integer — the length of the longest string in `words` that is a subsequence of `s`. -----Examples----- Input 2 abpcplea 3 ale apple monkey abcd 2 ab abc Output 5 3 -----Note----- In the first example, \\"apple\\" is the longest string that can be derived from \\"abpcplea\\" by deleting some characters without changing the order. In the second example, \\"abc\\" is the longest string that can be derived from \\"abcd\\".","solution":"def is_subsequence(s, word): Check if \'word\' is a subsequence of \'s\'. it = iter(s) return all(char in it for char in word) def longest_subseq_length(s, words): Returns the length of the longest string in \'words\' that is a subsequence of \'s\'. max_length = 0 for word in words: if is_subsequence(s, word): max_length = max(max_length, len(word)) return max_length def solve(test_cases): results = [] for s, words in test_cases: results.append(longest_subseq_length(s, words)) return results"},{"question":"Given an array of integers, you need to determine the length of the longest contiguous subsequence of the array such that the difference between any two adjacent elements is less than or equal to 1. -----Input----- The first line contains an integer n (1 le n le 10^5) — the length of the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^6) — the elements of the array. -----Output----- Print one integer — the length of the longest contiguous subsequence where the difference between any two adjacent elements is less than or equal to 1. -----Examples----- Input 6 2 2 3 4 5 5 Output 6 Input 3 1 3 5 Output 1 Input 5 4 4 5 7 7 Output 3","solution":"def longest_contiguous_subsequence_length(arr): if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i-1]) <= 1: current_length += 1 else: current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given a tree with `n` nodes, rooted at node 1. The weights of the edges between nodes are given. You need to process `q` queries, each containing two integers `u` and `v`, and for each query, determine the weight of the heaviest edge on the path from node `u` to node `v`. Input The first line of input contains two integers `n` and `q` (1 ≤ n, q ≤ 2 * 10^5) — the number of nodes in the tree and the number of queries. The next `n-1` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9), representing an edge between node `u` and node `v` with weight `w`. Each of the next `q` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) — the nodes for which the query is to be processed. Output For each query, output a single integer — the weight of the heaviest edge on the path from node `u` to node `v`. Examples Input 5 3 1 2 4 1 3 2 3 4 3 3 5 1 2 4 1 5 4 5 Output 4 2 3 Note In the example above, we have a tree with 5 nodes and 3 queries. The tree looks like this: ``` 1 / 2 3 / 4 5 ``` - The edge weights are: (1 - 2: 4), (1 - 3: 2), (3 - 4: 3), (3 - 5: 1) - For the query (2, 4), the path is 2 -> 1 -> 3 -> 4, and the maximum weight is 4. - For the query (1, 5), the path is 1 -> 3 -> 5, and the maximum weight is 2. - For the query (4, 5), the path is 4 -> 3 -> 5, and the maximum weight is 3.","solution":"import sys from collections import defaultdict import heapq sys.setrecursionlimit(500000) input = sys.stdin.read def prepare_lca(n, edges): # adjacency list for the graph graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # log base 2 of the number of nodes LOG = 20 # Initializing required structures up = [[-1] * LOG for _ in range(n + 1)] max_edge = [[0] * LOG for _ in range(n + 1)] depth = [-1] * (n + 1) # Depth-first search to populate up, max_edge and depth structures def dfs(v, parent, weight): up[v][0] = parent max_edge[v][0] = weight for i in range(1, LOG): if up[v][i - 1] != -1: up[v][i] = up[up[v][i - 1]][i - 1] max_edge[v][i] = max(max_edge[v][i - 1], max_edge[up[v][i - 1]][i - 1]) for to, to_weight in graph[v]: if to != parent: depth[to] = depth[v] + 1 dfs(to, v, to_weight) depth[1] = 0 dfs(1, -1, 0) return up, max_edge, depth def lca(u, v, up, max_edge, depth): LOG = 20 if depth[u] < depth[v]: u, v = v, u max_on_path = 0 # Bring u and v to the same depth for i in range(LOG - 1, -1, -1): if depth[u] - (1 << i) >= depth[v]: max_on_path = max(max_on_path, max_edge[u][i]) u = up[u][i] if u == v: return max_on_path # Move both up until we find the LCA for i in range(LOG - 1, -1, -1): if up[u][i] != up[v][i]: max_on_path = max(max_on_path, max_edge[u][i], max_edge[v][i]) u = up[u][i] v = up[v][i] return max(max_on_path, max_edge[u][0], max_edge[v][0]) def process_queries(n, edges, queries): up, max_edge, depth = prepare_lca(n, edges) results = [] for u, v in queries: results.append(str(lca(u, v, up, max_edge, depth))) return results def main(): data = input().split() index = 0 n = int(data[index]) index += 1 q = int(data[index]) index += 1 edges = [] for _ in range(n - 1): u = int(data[index]) index += 1 v = int(data[index]) index += 1 w = int(data[index]) index += 1 edges.append((u, v, w)) queries = [] for _ in range(q): u = int(data[index]) index += 1 v = int(data[index]) index += 1 queries.append((u, v)) results = process_queries(n, edges, queries) for result in results: print(result)"},{"question":"Given a list of n positive integers, you are to find the minimum possible value of the absolute difference between any two consecutive elements in a non-decreasing reordered version of this list. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. The first line of each test case contains an integer n (2 le n le 2 cdot 10^5) — the number of elements in the list. The second line of each test case contains n positive integers a_1, a_2, ldots, a_n (1 le a_i le 10^9). The sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print a single integer — the minimum possible value of the absolute difference between any two consecutive elements in a non-decreasing reordered version of the list. -----Examples----- Input: 3 4 4 2 1 3 3 10 20 30 5 5 3 1 4 2 Output: 1 10 1 -----Note----- In the first test case, by ordering the list as [1, 2, 3, 4], the consecutive differences are 1 between (1,2), 1 between (2,3), and 1 between (3,4). Thus, the minimum possible value of the absolute difference is 1. In the second test case, the list can be ordered as [10, 20, 30], with consecutive differences 10 between (10,20) and 10 between (20,30). Thus, the minimum possible value is 10. In the third test case, by ordering the list as [1, 2, 3, 4, 5], all consecutive differences are 1, so the minimum possible value of the absolute difference is 1.","solution":"def min_absolute_difference(t, cases): results = [] for case in cases: n, elements = case elements.sort() min_diff = float(\'inf\') for i in range(1, n): diff = elements[i] - elements[i - 1] if diff < min_diff: min_diff = diff results.append(min_diff) return results"},{"question":"Max Company is trying to efficiently distribute products to its retail stores. The company has retail stores located across different cities and maintains a distribution center (DC) in each city. Each DC receives a shipment containing multiple types of products, and each type of product is stocked in specific quantities. Given the product types and their quantities in an unordered list, you need to determine the optimal way to distribute each type of product to the retail stores. Each retail store can take a fixed number of a specific type of product. If the quantity of a type of product can\'t be equally distributed among the stores, the distribution should be such that the remaining products are minimized. Write a method that, given the number of retail stores and the list of product types and their quantities for a particular city, determines the distribution of each product type such that the remaining products are as few as possible. Input The first line contains N, the number of retail stores. The second line contains M, the number of product types. The next M lines each contain a string P representing the product type and an integer Q representing the quantity of that product type separated by a space. Output For each product type, print the product type followed by the number of items each of the N retail stores will receive and the number of remaining items. Each result should be on a new line in the format \\"P: quantity_per_store remaining\\". Constraints 1 ≤ N ≤ 50 1 ≤ M ≤ 100 1 ≤ Q ≤ 1000 1 ≤ length(P) ≤ 20 SAMPLE INPUT 3 4 Apples 14 Bananas 15 Cherries 9 Dates 27 SAMPLE OUTPUT Apples: 4 2 Bananas: 5 0 Cherries: 3 0 Dates: 9 0","solution":"def distribute_products(num_stores, product_list): Distributes products to retail stores ensuring minimal leftover products. Args: num_stores (int): Number of retail stores. product_list (list of tuples): List of product types and their quantities. Returns: list of str: Distribution details for each product type. distribution_results = [] for product, quantity in product_list: quantity_per_store = quantity // num_stores remaining_quantity = quantity % num_stores distribution_results.append(f\\"{product}: {quantity_per_store} {remaining_quantity}\\") return distribution_results def parse_input(input_string): Parses the input string into the required parameters. Args: input_string (str): Multiline string of the input parameters. Returns: tuple: Number of stores and list of products with their quantities. lines = input_string.strip().split(\'n\') num_stores = int(lines[0]) num_products = int(lines[1]) product_list = [] for i in range(2, 2 + num_products): product, quantity = lines[i].rsplit(\' \', 1) product_list.append((product, int(quantity))) return num_stores, product_list"},{"question":"Mobile App Registration You are working on a registration feature for a mobile app. The app requires users to create a unique username. To ensure a pleasant user experience, the username must adhere to certain rules: - The username must contain only lowercase English letters. - The username must be between 6 and 15 characters long. - The username must not contain three consecutive identical characters (e.g., \\"aaa\\" or \\"bbb\\" are not allowed). - The username must not have more than 3 characters in increasing or decreasing consecutive order (e.g., \\"abcd\\" or \\"zyxw\\" are not allowed). Your task is to write a function that verifies if a given username is valid according to the above rules. If the username is valid, return \\"Valid\\". Otherwise, return \\"Invalid\\". Input: - A single string representing the username. Output: - A single string \\"Valid\\" or \\"Invalid\\". Examples: Input: ``` johnsmith ``` Output: ``` Valid ``` Input: ``` aab_cdefg ``` Output: ``` Invalid ``` Input: ``` abcdefgh ``` Output: ``` Invalid ``` Input: ``` aacccbb ``` Output: ``` Invalid ``` Input: ``` user123 ``` Output: ``` Invalid ``` Note: - The function should strictly enforce the username to only contain lowercase English letters. - Be sure to handle edge cases where the username might exactly meet the boundary conditions (e.g., exactly 6 characters long or 15 characters long).","solution":"def validate_username(username): import re # Check for lowercase only if not re.match(r\'^[a-z]+\', username): return \\"Invalid\\" # Check length if not (6 <= len(username) <= 15): return \\"Invalid\\" # Check for three consecutive identical characters if re.search(r\'(.)11\', username): return \\"Invalid\\" # Check for more than 3 characters in increasing order for i in range(len(username) - 3): if ord(username[i+1]) == ord(username[i]) + 1 and ord(username[i+2]) == ord(username[i+1]) + 1 and ord(username[i+3]) == ord(username[i+2]) + 1: return \\"Invalid\\" # Check for more than 3 characters in decreasing order for i in range(len(username) - 3): if ord(username[i+1]) == ord(username[i]) - 1 and ord(username[i+2]) == ord(username[i+1]) - 1 and ord(username[i+3]) == ord(username[i+2]) - 1: return \\"Invalid\\" return \\"Valid\\""},{"question":"Ivan is organizing a robotics competition in which robots navigate through a grid. Each robot receives a list of movement commands to follow. The grid is defined with its upper left corner as the origin (0, 0) and is unbounded, meaning robots can move infinitely in any direction. Each movement command consists of an integer and a direction (\'U\', \'D\', \'L\', \'R\') indicating the number of steps and the direction (\'U\' for up, \'D\' for down, \'L\' for left, \'R\' for right). Ivan wants to know the final coordinates of the robot after executing all movement commands. -----Input----- The first line of input contains a positive integer m specifying the number of movement commands. The following m lines each contain a movement command consisting of an integer and a direction. Each command indicates the number of steps (1 <= steps <= 10^6) and the direction (\'U\', \'D\', \'L\', \'R\'). -----Output----- The output contains two integers representing the final coordinates of the robot after executing all movement commands. -----Examples----- Sample Input: 4 10 U 15 R 5 D 20 L Sample Output: -5 5","solution":"def final_robot_position(m, commands): Args: m (int): Number of movement commands. commands (list): List of tuples where each tuple contains two elements: an integer (steps) and a char (direction). Returns: tuple: Final coordinates of the robot (x, y). x, y = 0, 0 for steps, direction in commands: if direction == \'U\': y += steps elif direction == \'D\': y -= steps elif direction == \'L\': x -= steps elif direction == \'R\': x += steps return x, y"},{"question":"Implement a function `capitalize_even_words(sentence)` that takes a string sentence as input and returns a new string where all the words at even positions are capitalized. Words are separated by a single space, and the function should preserve the whitespace between the words. For example, the input `sentence` is `\\"hello world this is a test\\"`, you should return `\\"hello WORLD this IS a TEST\\"`. Another example, if the input `sentence` is `\\"only one word\\"`, the output should be `\\"only ONE word\\"`. Function Signature: ```python def capitalize_even_words(sentence: str) -> str: pass ``` Examples: ```python assert capitalize_even_words(\\"hello world this is a test\\") == \\"hello WORLD this IS a TEST\\" assert capitalize_even_words(\\"only one word\\") == \\"only ONE word\\" assert capitalize_even_words(\\"python coding exercises\\") == \\"python CODING exercises\\" assert capitalize_even_words(\\"capitalize even words correctly\\") == \\"capitalize EVEN words CORRECTLY\\" ```","solution":"def capitalize_even_words(sentence: str) -> str: Capitalizes the words at even positions in the given sentence. Words are separated by a single space, and the function preserves the whitespace between the words. :param sentence: The input string containing the sentence. :return: A new string with words at even positions capitalized. words = sentence.split() for i in range(1, len(words), 2): words[i] = words[i].upper() return \' \'.join(words)"},{"question":"You are the operator of a string transformation machine which can perform the following operations: 1. Swap any two characters in the string. 2. Change any character to any other character. Given an initial string and a target string of the same length, your task is to determine the minimum number of operations required to transform the initial string into the target string. Input The first input line contains an integer n (1 ≤ n ≤ 10^5) which is the length of the strings. The second input line contains the initial string s (length n) consisting of lowercase English letters. The third input line contains the target string t (length n) consisting of lowercase English letters. Output Output a single integer — the minimum number of operations required to transform the initial string into the target string. Examples Input 5 abcde bcdea Output 3 Input 4 aaaa bbbb Output 4 Explanation of Examples In the first example, you can swap \'a\' and \'b\', then \'b\' and \'c\', and \'c\' and \'d\'. This requires 3 swaps, which is the minimum number of operations. In the second example, you must change each \'a\' to \'b\', requiring 4 operations.","solution":"def min_operations_to_transform(n, s, t): Returns the minimum number of operations required to transform string s to string t. :param n: Integer, length of the strings s and t. :param s: String, the initial string. :param t: String, the target string. :return: Integer, minimum number of operations. # Counting the total number of different characters between s and t diff_count = sum(1 for x, y in zip(s, t) if x != y) return diff_count"},{"question":"You are given a list of N non-negative integers representing the heights of buildings along a street. A building with height H is considered beautiful if there are no taller buildings to its left. Determine the number of beautiful buildings for each test case. ------ Input Format ------ - The first line of input contains an integer T, the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, the number of buildings. - The second line of each test case contains N space-separated integers representing the heights of the buildings. ------ Output Format ------ For each test case, print a single line containing the number of beautiful buildings. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 0 ≤ H ≤ 10^9 ------ Sample Input 1 ------ 2 4 3 7 8 3 3 1 5 3 ------ Sample Output 1 ------ 3 2 ------ Explanation 1 ------ Test case 1: The beautiful buildings are 3, 7, and 8 because there are no taller buildings to their left. The building with height 3 on the extreme right is not beautiful because there is an 8 (which is taller) to its left. Test case 2: The beautiful buildings are 1 and 5. The building with height 3 is not beautiful because there is a 5 (which is taller) to its left.","solution":"def count_beautiful_buildings(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] heights = test_cases[i][1] beautiful_count = 0 current_max = -1 for height in heights: if height > current_max: beautiful_count += 1 current_max = height results.append(beautiful_count) return results"},{"question":"In a kingdom, there are n cities connected by m bidirectional roads. The kingdom\'s king wants to ensure that every city is accessible from every other city, meaning the road network needs to be connected. Each road between city u and city v has a cost c. To achieve the minimum total cost, the king wants to know the minimum spanning tree (MST) of this network. You are tasked with calculating the total cost of this MST using Kruskal\'s algorithm. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of cities and the number of roads. - The next m lines each contain three integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 10^9), describing a road between cities u and v with cost c. Output: - Print a single integer — the total cost of the MST. If the road network is not connected initially, print -1 instead. Examples Input: 4 5 1 2 1 2 3 2 3 4 1 4 1 3 1 3 2 Output: 4 Input: 4 2 1 2 4 3 4 5 Output: -1 Note: In the first example, the MST connects all 4 cities with roads of total cost 4, specifically using the roads (1-2, 3-4, 2-3). In the second example, cities 1 and 2 are not connected to cities 3 and 4, so it is impossible to connect all cities. Thus, the output is -1.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def kruskal(n, edges): # Sorting the edges based on their weight edges.sort(key=lambda edge: edge[2]) parent = [i for i in range(n)] rank = [0] * n mst_cost = 0 mst_edges = 0 for edge in edges: u, v, c = edge rootU = find(parent, u-1) rootV = find(parent, v-1) if rootU != rootV: mst_cost += c mst_edges += 1 union(parent, rank, rootU, rootV) # Check if we used n-1 edges, which means the graph is connected if mst_edges == n - 1: return mst_cost else: return -1 def minimum_spanning_tree(n, m, roads): return kruskal(n, roads)"},{"question":"You have been tasked with writing a function that identifies if there is a cycle within a given directed graph. A cycle in a directed graph is a path that starts and ends at the same vertex, with all edges following the direction of the graph. Your function should return `True` if there is at least one cycle, and `False` if there is no cycle. Function Description Complete the `hasCycle` function in the editor below. It should return a boolean value: `True` if the graph contains a cycle, and `False` otherwise. `hasCycle` has the following parameters: - `n`: an integer, the number of nodes in the graph (nodes are numbered from 0 to n-1). - `edges`: a 2D list of integers, where `edges[i] = [a, b]` represents a directed edge from node `a` to node `b`. Input Format The first line contains a single integer n, the number of nodes in the graph. The second line contains a single integer m, the number of directed edges in the graph. Each of the next m lines contains two space-separated integers a and b, representing a directed edge from node a to node b. Constraints 1 leq n leq 10^3 0 leq m leq 10^4 0 leq a, b < n a neq b (no self-loops in the edges) Output Format Return `True` if the graph contains at least one cycle, otherwise return `False`. Sample Input 0 4 4 0 1 1 2 2 3 3 1 Sample Output 0 True Explanation 0 There is a cycle in the graph: 1 rightarrow 2 rightarrow 3 rightarrow 1. Sample Input 1 5 4 0 1 0 2 1 3 3 4 Sample Output 1 False Explanation 1 There are no cycles in the given graph. Note: To solve this problem, you can use Depth-First Search (DFS) to detect back edges, which indicate cycles. Another approach could be using the Topological Sorting algorithm and checking if all nodes are included in the topological order. If any node is not included, it means there is a cycle.","solution":"def hasCycle(n, edges): Returns True if the graph contains at least one cycle, otherwise returns False. from collections import defaultdict def dfs(node): if node in visiting: return True if node in visited: return False visiting.add(node) for neighbor in graph[node]: if dfs(neighbor): return True visiting.remove(node) visited.add(node) return False graph = defaultdict(list) for a, b in edges: graph[a].append(b) visited = set() visiting = set() for node in range(n): if node not in visited: if dfs(node): return True return False"},{"question":"You\'re organizing a Tug of War competition for your local community event, with participants split into two teams. Given the strength of each participant, the goal is to divide them into two teams such that the difference in the total strengths of the two teams is minimized. The strength of each participant is represented by an integer. You must determine the smallest possible difference in the total strengths of the two teams. -----Constraints----- - All values in input are integers. - 2 ≤ N ≤ 20 - 1 ≤ strength_i ≤ 100 -----Input----- Input is given from Standard Input in the following format: N strength_1 strength_2 ... strength_N -----Output----- Print the minimum possible difference in total strength between the two teams. -----Sample Input----- 4 3 1 4 2 -----Sample Output----- 0 The optimal division is: - Team 1: 3, 2 (Total Strength: 5) - Team 2: 1, 4 (Total Strength: 5) The difference in total strengths is |5 - 5| = 0.","solution":"def tug_of_war(participants): Find the smallest possible difference in the total strengths of two teams. Parameters: participants (list): List of participant strengths represented as integers. Returns: int: The minimum possible difference in total strength between the two teams. N = len(participants) total_strength = sum(participants) half_sum = total_strength // 2 dp = [[False] * (half_sum + 1) for _ in range(N + 1)] dp[0][0] = True for i in range(1, N + 1): for j in range(half_sum + 1): if dp[i-1][j]: dp[i][j] = True if j + participants[i-1] <= half_sum: dp[i][j + participants[i-1]] = True for j in range(half_sum, -1, -1): if dp[N][j]: subset_sum = j break other_subset_sum = total_strength - subset_sum return abs(other_subset_sum - subset_sum) # Example usage (Uncomment to test manually) # print(tug_of_war([3, 1, 4, 2])) # Output should be 0"},{"question":"You are given an array of positive integers representing the heights of buildings in a skyline. Each building spans one unit width. Suppose you are standing to the left of the skyline, you would like to know the amount of water that could be trapped between the buildings after rainfall. Write a function `trapWater` that takes an array `height` as input and returns the total amount of trapped water. Example 1: Input: height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 Explanation: The amount of trapped water at each index is [0, 0, 1, 0, 1, 2, 1, 0, 0, 1, 0, 0], so the total trapped water is 1 + 1 + 2 + 1 + 1 = 6. Example 2: Input: height = [4, 2, 0, 3, 2, 5] Output: 9 Explanation: The amount of trapped water at each index is [0, 2, 4, 1, 2, 0], so the total trapped water is 2 + 4 + 1 + 2 = 9. Your Task: You do not need to read input or print anything. Your task is to complete the function `trapWater()` which takes the list of heights as input parameter and returns the total amount of water trapped. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1. 1 <= height.length <= 1000 2. 0 <= height[i] <= 1000","solution":"def trapWater(height): Returns the total amount of water that can be trapped between buildings after rainfall. if len(height) <= 2: return 0 n = len(height) left, right = 0, n - 1 left_max, right_max = height[left], height[right] total_water = 0 while left < right: # Decide which pointer to move if height[left] < height[right]: left += 1 left_max = max(left_max, height[left]) total_water += max(0, left_max - height[left]) else: right -= 1 right_max = max(right_max, height[right]) total_water += max(0, right_max - height[right]) return total_water"},{"question":"You are given n integers ai. Your task is to construct the maximum possible number from these integers by concatenating them in some order. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of integers. The second line contains n positive integers ai (1 ≤ ai ≤ 10^9). Output Print a single integer — the maximum possible number that can be obtained by concatenating the given integers. Examples Input 3 50 2 1 Output 5021 Input 4 9 34 5 3 Output 95343","solution":"from functools import cmp_to_key def compare(n1, n2): if n1 + n2 > n2 + n1: return -1 else: return 1 def max_number(numbers): numbers = list(map(str, numbers)) numbers.sort(key=cmp_to_key(compare)) return \'\'.join(numbers) def solve_max_number(n, integers): return max_number(integers)"},{"question":"Alex is organizing a sports tournament with n teams. Each team will play against every other team exactly once. The scores for each match are recorded such that: - If team i wins against team j, the tuple (i, j, score_i, score_j) is added to the list. - If team j wins against team i, the tuple (j, i, score_j, score_i) is added to the list. Alex wants to analyze the results by computing the cumulative score for each team. Your task is to write a program that, given the match results, computes the total score for each team and prints the team with the highest cumulative score. If there are multiple teams with the highest cumulative score, print the team with the smallest numerical identifier. -----Constraints----- - 2 leq n leq 10^3 - 0 leq score_i, score_j leq 100 - The number of matches is n*(n-1)/2 - Team identifiers are integers ranging from 1 to n -----Input----- The input is given from Standard Input in the following format: n m i_1 j_1 score_i_1 score_j_1 i_2 j_2 score_i_2 score_j_2 ... i_m j_m score_i_m score_j_m where m is the number of matches. -----Output----- Print the identifier of the team with the highest cumulative score. -----Sample Input----- 3 3 1 2 10 8 1 3 12 5 2 3 9 11 -----Sample Output----- 1 Explanation: - Team 1 has scores: 10 and 12 for a total of 22. - Team 2 has scores: 8 and 9 for a total of 17. - Team 3 has scores: 5 and 11 for a total of 16. Team 1 has the highest cumulative score of 22, hence the output is 1.","solution":"def find_team_with_highest_score(n, matches): scores = [0] * (n + 1) for match in matches: i, j, score_i, score_j = match scores[i] += score_i scores[j] += score_j max_score = max(scores) return scores.index(max_score) # Reading from standard input for testing if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) matches = [] index = 2 for _ in range(m): i, j, score_i, score_j = map(int, data[index:index+4]) matches.append((i, j, score_i, score_j)) index += 4 print(find_team_with_highest_score(n, matches))"},{"question":"You are given an undirected graph with `n` vertices and `m` edges. Your task is to determine if the graph contains any cycle, and if so, find the length of the shortest cycle. A cycle is a path that starts from a vertex and returns to the same vertex, without repeating any edge. The length of a cycle is the number of edges in it. Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000) — the number of vertices and edges in the graph, respectively. The next `m` lines contain two integers `u` and `v` (1 ≤ u, v ≤ n) — representing an edge between the vertices `u` and `v`. There can be multiple edges between the same pair of vertices, as well as self-loops. Output If the graph contains no cycle, print \\"NO\\". Otherwise, print the length of the shortest cycle. Examples Input 4 4 1 2 2 3 3 4 4 2 Output 3 Input 4 3 1 2 2 3 3 4 Output NO Input 3 3 1 1 2 2 3 3 Output 1 Note In the first sample, the graph contains two cycles: one cycle with vertices (2-3-4-2) and length 3, and one cycle with vertices (1-2-3-4-2) and length 4. The shortest cycle has length 3. In the second sample, the graph does not contain any cycle. In the third sample, the graph contains three cycles, each with a self-loop of length 1.","solution":"def find_shortest_cycle(n, m, edges): from collections import deque, defaultdict # Create a graph adjacency list graph = defaultdict(list) for (u, v) in edges: graph[u].append(v) graph[v].append(u) def bfs(start): # This keeps track of the shortest cycle found during this BFS shortest_cycle_length = float(\'inf\') visited = [-1] * (n + 1) queue = deque([(start, -1, 0)]) # node, parent, distance while queue: current, parent, distance = queue.popleft() if visited[current] != -1: continue visited[current] = distance for neighbor in graph[current]: if visited[neighbor] == -1: # not visited queue.append((neighbor, current, distance + 1)) elif neighbor != parent: # a valid cycle detected shortest_cycle_length = min(shortest_cycle_length, distance + visited[neighbor] + 1) return shortest_cycle_length shortest_cycle = float(\'inf\') for node in range(1, n + 1): if graph[node]: # only perform BFS if the node has neighbors shortest_cycle = min(shortest_cycle, bfs(node)) if shortest_cycle == float(\'inf\'): return \\"NO\\" else: return shortest_cycle"},{"question":"You are given a list of non-negative integers `nums` and an integer `threshold`. Your task is to find the smallest divisor `d` such that the result of summing all elements in the list `nums` divided by `d` is less than or equal to the `threshold`. The result of the division operation should be the ceiling of the division between two integers. For example, the result of `7/3 is 3` as `7` divided by `3` is `2.333...`, which is rounded up to `3`. Write a function to return the smallest divisor. Example 1: Input: nums = [1, 2, 5, 9], threshold = 6 Output: 5 Explanation: Sum of `nums` divided by `5` is `1/5 + 2/5 + 5/5 + 9/5 = 1 + 1 + 1 + 2 = 5`. This is less than or equal to the `threshold` of 6. Example 2: Input: nums = [2, 3, 5, 7, 11], threshold = 11 Output: 3 Explanation: Sum of `nums` divided by `3` is `2/3 + 3/3 + 5/3 + 7/3 + 11/3 = 1 + 1 + 2 + 3 + 4 = 11`. This is equal to the `threshold` of 11. Example 3: Input: nums = [19], threshold = 5 Output: 4 Explanation: Sum of `nums` divided by `4` is `19/4 = ceiling(4.75) = 5`. This is equal to the threshold of 5. Constraints: - 1 <= nums.length <= 10^5 - 1 <= nums[i] <= 10^6 - 1 <= threshold <= 10^6","solution":"import math def smallest_divisor(nums, threshold): Finds the smallest divisor such that the sum of nums divided by the divisor is less than or equal to the threshold. def compute_sum(divisor): return sum(math.ceil(num / divisor) for num in nums) left, right = 1, max(nums) while left < right: mid = (left + right) // 2 if compute_sum(mid) > threshold: left = mid + 1 else: right = mid return left"},{"question":"You are given a string S containing only lowercase alphabets. You need to determine whether it is possible to rearrange the characters in the string such that no two adjacent characters are the same. If it is possible, print any one of the possible strings. If it is not possible, print \\"Not possible\\". Constraints: * 1 leq |S| leq 10^5 Input: The input consists of a single line containing the string S. Output: If it is possible to rearrange S such that no two adjacent characters are the same, print one of the possible strings. Otherwise, print \\"Not possible\\". Example: Input: aaabbc Output: ababac Input: aaab Output: Not possible","solution":"from collections import Counter from heapq import heappop, heappush def rearrangeString(S): char_count = Counter(S) max_heap = [] for char, freq in char_count.items(): heappush(max_heap, (-freq, char)) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heappop(max_heap) result.append(char) if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char rearranged_string = \'\'.join(result) if len(rearranged_string) == len(S): return rearranged_string else: return \\"Not possible\\""},{"question":"A bakery is experimenting with new recipes and wants to adjust the ingredients used for baking cakes. They have N different types of ingredients, where the quantity of the i-th ingredient is given by an array Q of size N. They also have a list of recipes, where each recipe requires specific amounts of some of the ingredients. The bakery wants to know how many of the recipes can be baked using the available quantities of ingredients. You are required to find out how many of the recipes can be baked using the given quantities of ingredients. ------ Input Format ------ - First line will contain T, the number of test cases. Each test case follows the format below. - First line of each test case contains an integer N. - Second line contains N integers representing the array Q, where Q[i] represents the quantity of the i-th ingredient. - Third line contains an integer M, the number of recipes. - The next M lines each contain N integers representing the recipe requirements for each ingredient. The j-th line represents the j-th recipe, where each integer is the required quantity of the corresponding ingredient for that recipe. ------ Output Format ------ For each test case, output the number of recipes that can be baked using the given quantities of ingredients. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 50 1 ≤ M ≤ 1000 0 ≤ Q[i] ≤ 10^{9} 0 ≤ recipe[i][j] ≤ 10^{9} ----- Sample Input 1 ------ 2 3 10 5 8 2 5 2 3 6 3 5 4 7 3 10 2 3 1 1 6 1 2 2 4 0 3 1 7 1 ----- Sample Output 1 ------ 2 3 ----- Explanation 1 ------ Test Case 1: Both recipes [5, 2, 3] and [6, 3, 5] can be baked using the ingredient quantities [10, 5, 8] Test Case 2: All three recipes [1, 1, 6, 1], [2, 2, 4, 0], and [3, 1, 7, 1] can be baked using the ingredient quantities [7, 3, 10, 2]","solution":"def can_bake(Q, recipes): Determines how many recipes can be baked given the quantities of ingredients. Args: - Q (list of int): Array representing the available quantities of each ingredient. - recipes (list of list of int): A list where each element is a list representing a recipe\'s ingredient requirements. Returns: - int: The number of recipes that can be baked. count = 0 for recipe in recipes: if all(Q[i] >= recipe[i] for i in range(len(Q))): count += 1 return count def process_test_cases(test_cases): Processes multiple test cases. Args: - test_cases (list of tuple): Each tuple represents a test case and includes: - N (int): Number of ingredients. - Q (list of int): Quantities of each ingredient. - M (int): Number of recipes. - recipes (list of list of int): List of recipes, each represented as a list of ingredient requirements. Returns: - list of int: Number of recipes that can be baked for each test case. results = [] for case in test_cases: N, Q, M, recipes = case results.append(can_bake(Q, recipes)) return results"},{"question":"In a given string, there are exactly two characters \'a\' and \'b\'. You need to determine whether the string can be divided into two non-empty parts such that one part contains only \'a\'s and the other part contains only \'b\'s. If such a division is possible, return the two parts in the order they appear in the string. Otherwise, return \\"NO\\". -----Constraints----- - The input string contains exactly two characters \'a\' and \'b\'. - The length of the string is between 2 and 100 (inclusive). -----Input----- Input is given from Standard Input in the following format: s -----Output----- If a valid division is possible, output the two parts separated by a space. If no valid division is possible, print \\"NO\\". -----Sample Input----- aaabbb -----Sample Output----- aaa bbb In the sample input \'aaabbb\', we can split it into \\"aaa\\" (containing only \'a\'s) and \\"bbb\\" (containing only \'b\'s), so the output should be \\"aaa bbb\\". -----Sample Input----- ab -----Sample Output----- a b In the sample input \'ab\', we can split it into \\"a\\" and \\"b\\", so the output should be \\"a b\\". -----Sample Input----- aabbab -----Sample Output----- NO In the sample input \'aabbab\', it\'s not possible to split the string into two parts where one part contains only \'a\'s and the other part contains only \'b\'s. Hence, the output should be \\"NO\\".","solution":"def divide_string(s): Determines whether the string can be divided into two non-empty parts where one part contains only \'a\'s and the other part contains only \'b\'s. If possible, return the two parts. Otherwise, return \\"NO\\". Args: s (str): The input string containing only \'a\' and \'b\'. Returns: str: The two parts separated by a space if a valid division is possible, otherwise \\"NO\\". # Look for the first occurrence of \'b\' index = s.find(\'b\') # If there is no \'b\' or \'a\' then split is not possible as it will be empty part if index == -1 or index == 0 or index == len(s): return \\"NO\\" # Split the string at the first \'b\' part1 = s[:index] part2 = s[index:] # Check if part1 contains only \'a\'s and part2 contains only \'b\'s if part1.count(\'a\') == len(part1) and part2.count(\'b\') == len(part2): return part1 + \\" \\" + part2 else: return \\"NO\\""},{"question":"You are given an array of integers representing the stock prices of a company over several days. A positive integer, K, is also provided, which represents the number of transactions you are allowed to make. Each transaction consists of buying one stock and selling one stock on a different day. You need to find the maximum profit you can achieve by making at most K transactions. Given this scenario, you need to write a program that efficiently computes the maximum profit. Here are the input and output formats: INPUT FORMAT: The first line contains an integer, N (2 ≤ N ≤ 1000), which represents the number of days. The second line contains N integers, representing the stock prices of the company on each day. The third line contains an integer, K (1 ≤ K ≤ 100), which represents the number of transactions allowed. OUTPUT FORMAT: An integer representing the maximum profit that can be achieved by making at most K transactions. SAMPLE INPUT: 7 3 2 6 5 0 3 2 2 SAMPLE OUTPUT: 7 EXPLANATION: With at most 2 transactions, the maximum profit can be achieved by buying on day 2 (price 2) and selling on day 3 (price 6), then buying on day 5 (price 0) and selling on day 6 (price 3). This gives a total profit of 4 + 3 = 7.","solution":"def maxProfit(prices, K): N = len(prices) if not prices or K == 0: return 0 if K >= N // 2: return sum(max(prices[i + 1] - prices[i], 0) for i in range(N - 1)) dp = [[0]*N for _ in range(K + 1)] for k in range(1, K + 1): max_diff = -prices[0] for i in range(1, N): dp[k][i] = max(dp[k][i - 1], prices[i] + max_diff) max_diff = max(max_diff, dp[k - 1][i] - prices[i]) return dp[K][N-1] # Input parsing function def parse_input(input_str): lines = input_str.strip().split(\'n\') N = int(lines[0]) prices = list(map(int, lines[1].split())) K = int(lines[2]) return prices, K"},{"question":"You are given a sequence of integers. A contiguous subsequence of a sequence is defined as a segment of the sequence that is contiguous (i.e., the numbers appear consecutively in the original sequence). You need to find the maximum sum of a contiguous subsequence in the sequence. If the sequence is entirely composed of negative numbers, return 0, as an empty subsequence would yield the maximum sum. # Input Format - The first line contains an integer n (1 leq n leq 10^5), the number of integers in the sequence. - The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) - the elements of the sequence. # Output Format - Print a single integer, the maximum sum of a contiguous subsequence in the sequence. If the sequence contains only negative numbers, print 0. # Examples Input ``` 8 -2 1 -3 4 -1 2 1 -5 4 ``` Output ``` 6 ``` Input ``` 5 -3 -2 -4 -1 -8 ``` Output ``` 0 ``` # Note In the first example, the contiguous subsequence with the maximum sum is `[4, -1, 2, 1]` which sums to 6. In the second example, since all numbers are negative, the result is 0 because choosing an empty subsequence is more favorable.","solution":"def max_subarray_sum(n, sequence): Returns the maximum sum of a contiguous subsequence in the sequence. If all numbers are negative, return 0. Params: n: int - the number of integers in the sequence sequence: list of int - the elements of the sequence Returns: int - the maximum sum of a contiguous subsequence if all(x < 0 for x in sequence): return 0 max_ending_here = 0 max_so_far = 0 for x in sequence: max_ending_here = max_ending_here + x if max_ending_here < 0: max_ending_here = 0 if max_ending_here > max_so_far: max_so_far = max_ending_here return max_so_far"},{"question":"Implement a method that takes a list of integers and an integer target value as inputs. The method should return a list of unique pairs of numbers from the input list that add up to the target value. Each pair should be represented as a list of two elements, and the order of pairs and the order of numbers in each pair does not matter. For example: ```python find_pairs([1, 2, 3, 4, 5], 5) ``` should return: ```python [[1, 4], [2, 3]] ``` Note: - Each pair should contain two distinct elements from the input list. - If there are multiple pairs that add up to the target value, all should be returned in the result without any duplicates.","solution":"def find_pairs(nums, target): Return a list of unique pairs from the nums list that add up to the target. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return [list(pair) for pair in pairs]"},{"question":"Given a string s consisting of lowercase English letters, find the first non-repeating character in it and return its index. If it does not have any non-repeating characters, return -1. You are required to implement the solution with a time complexity of O(n), where n is the length of the string. -----Constraints----- - The length of s is between 1 and 100,000. -----Input----- The input is given from Standard Input in the following format: s -----Output----- Print the index of the first non-repeating character in the string, or -1 if there is no such character. -----Sample Input----- loveleetcode -----Sample Output----- 2 The first non-repeating character is \'v\', and its index is 2.","solution":"def first_unique_char(s): Returns the index of the first non-repeating character in the string s. If there is no such character, returns -1. # Create a frequency dictionary to count occurrences of each character. char_count = {} # First pass: Compute the frequency of each character. for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass: Find the index of the first non-repeating character. for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"Given a sequence of numbers, you are to perform certain operations to transform the sequence. An operation consists of selecting a subarray and reversing it. Your task is to determine the minimum number of such operations to transform the given sequence into a non-decreasing sequence. ------ Input ------ The first line contains an integer T (1 ≤ T ≤ 10), denoting the number of test cases. For each test case, the first line contains an integer n (1 ≤ n ≤ 1000), denoting the size of the sequence. The second line contains n space-separated integers A_1, A_2, ..., A_n (1 ≤ A_i ≤ 1000), denoting the sequence. ------ Output ------ For each test case, output the minimum number of operations to transform the given sequence into a non-decreasing sequence. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ n ≤ 1000 1 ≤ A_i ≤ 1000 ------ Example ------ Input: 2 5 2 4 1 3 5 4 3 1 2 4 Output: 1 2 ------ Explanation ------ For the first test case, one possible sequence of operations is: - Select the subarray [4, 1] and reverse it. The sequence becomes [2, 1, 4, 3, 5]. - Select the subarray [1, 4, 3] and reverse it. The sequence becomes [2, 3, 4, 1, 5]. - Select the subarray [1, 5] and reverse it. The sequence becomes [2, 3, 4, 5, 1]. - Select the subarray [2, 3, 4, 5, 1] and reverse it. The sequence becomes [1, 5, 4, 3, 2]. - Select the subarray [5, 4, 3, 2] and reverse it. The sequence becomes [1, 2, 3, 4, 5]. Thus, the minimum number of operations required is 1. For the second test case, one possible sequence of operations is: - Select the subarray [3, 1] and reverse it. The sequence becomes [1, 3, 2, 4]. - Select the subarray [3, 2] and reverse it. The sequence becomes [1, 2, 3, 4]. Thus, the minimum number of operations required is 2.","solution":"def min_operations_to_sort(sequence): # This function counts the number of out-of-order elements # For the given problem, the minimum number of operations to sort the sequence # into non-decreasing order can be determined by counting these inversions. n = len(sequence) inversions = 0 for i in range(1, n): if sequence[i] < sequence[i - 1]: inversions += 1 # If there are no inversions, the array is already sorted if inversions == 0: return 0 # If there are any out of order elements, at most it takes 2 operations to sort it # 1. Reverse the section which causes the out of order pair # 2. Reverse the array if necessary else: return 1 def sort_sequences(test_cases): results = [] for sequence in test_cases: results.append(min_operations_to_sort(sequence)) return results"},{"question":"Little Alex has a number of uniquely labeled rectangular wooden planks placed in a straight line, such that each plank is either placed upright or flat on the ground. Each plank can only stand upright if the planks to its left are either upright or missing. If any plank to its left is flat on the ground, the plank will also fall flat on the ground. Alex wants to know how many planks will be upright in the line, if the line of planks is determined correctly. Your task is to help Alex determine the number of upright planks. Input - The first line contains an integer n (1 ≤ n ≤ 100,000) representing the number of planks. - The second line contains n integers a_1, a_2, ..., a_n (where each value is either 0 or 1), where 1 indicates that the plank is placed upright, and 0 indicates the plank is placed flat on the ground. Output - Output a single integer representing the number of planks that will remain upright after following the rules. Example Input 5 1 1 0 1 1 Output 2 Explanation - The first two planks are upright. - The third plank is flat, which causes all subsequent planks to be flat as well doing nothing to alter the first two planks in their upright position. In this example, the first two planks remain upright, so the output is 2.","solution":"def count_upright_planks(n, a): Returns the number of upright planks in the line. Parameters: n (int): number of planks a (list of int): list of plank states (1 for upright, 0 for flat) Returns: int: the number of upright planks count = 0 for i in range(n): if a[i] == 1: count += 1 else: break return count"},{"question":"During a scientific research project, a team is conducting experiments with a liquid that transforms based on specified actions. The liquid is initially at temperature T_0 degrees and concentration C_0% in a container. The experiments involve a series of actions that alter these properties. You are given an initial temperature T_0, an initial concentration C_0%, and a sequence of actions in the form of a string. Each character in the string represents an action: - \'W\': increases the temperature by 1 degree (warming) - \'C\': decreases the temperature by 1 degree (cooling) - \'A\': increases the concentration by 1% - \'D\': decreases the concentration by 1% Your task is to determine the final temperature and concentration of the liquid after applying all the actions in the sequence. ------ Input ------ The first line of the input contains two space-separated integers T_0 and C_0. The second line contains a string describing the sequence of actions. The length of the string does not exceed 10^4 characters. ------ Output ------ Print two space-separated integers: the final temperature and concentration of the liquid. ------ Constraints ------ -100 ≤ T_0 ≤ 100 0 ≤ C_0 ≤ 100 ------ Subtasks ------ Subtask #1 (50 points): The length of the action string is at most 10^3. Subtask #2 (50 points): The original constraints. ------ Example Input ------ ``` 20 50 WCAADDC ``` ------ Example Output ------ ``` 21 51 ``` ------ Explanation ------ Starting from temperature 20 and concentration 50%: 1. \'W\' increases the temperature to 21. 2. \'C\' decreases the temperature to 20. 3. \'A\' increases the concentration to 51%. 4. \'A\' increases the concentration to 52%. 5. \'D\' decreases the concentration to 51%. 6. \'D\' decreases the concentration to 50%. 7. \'C\' decreases the temperature to 19. Final temperature is 19 and final concentration is 50%.","solution":"def final_temperature_and_concentration(T0, C0, actions): Computes the final temperature and concentration after a sequence of actions. Parameters: T0 (int): Initial temperature C0 (int): Initial concentration percentage actions (str): Sequence of actions Returns: tuple: Final temperature and concentration percentage temperature = T0 concentration = C0 for action in actions: if action == \'W\': temperature += 1 elif action == \'C\': temperature -= 1 elif action == \'A\': concentration += 1 elif action == \'D\': concentration -= 1 return temperature, concentration"},{"question":"# Task You are given a list of integers which represents the test scores of students in a class. Your task is to process this list and determine the rank of each student according to their test scores. Multiple students having the same score should be assigned the same rank. For example, if the scores are `[50, 80, 80, 70]`, the ranks should be `[4, 1, 1, 3]` because: - The highest score is 80, so both students with 80 get rank 1. - The next highest score is 70, so the student with 70 gets rank 3. - The lowest score is 50, so the student with 50 gets rank 4. Write a function `calculate_ranks(arr)` that takes a list of integers `arr` and returns a list of integers representing the ranks of each student. Input - `arr`: a list of integers representing the test scores of students. Output Returns a list of integers representing the rank of each student. Examples ```python calculate_ranks([50, 80, 80, 70]) # Output: [4, 1, 1, 3] calculate_ranks([90, 80, 80, 60, 70]) # Output: [1, 2, 2, 5, 4] calculate_ranks([100, 100, 100]) # Output: [1, 1, 1] calculate_ranks([70, 70, 70, 70]) # Output: [1, 1, 1, 1] ``` Note - The number of students will be at least 1. - All scores are non-negative integers.","solution":"def calculate_ranks(arr): This function takes a list of integers which represent the test scores of students in a class and returns a list of integers representing the ranks of each student. # Sort the scores in descending order while keeping track of the original indices sorted_scores = sorted(((score, idx) for idx, score in enumerate(arr)), reverse=True) # Create a list to store ranks ranks = [0] * len(arr) current_rank = 1 for i, (score, idx) in enumerate(sorted_scores): if i > 0 and score == sorted_scores[i - 1][0]: # If this score is same as previous, it gets the same rank ranks[idx] = ranks[sorted_scores[i - 1][1]] else: ranks[idx] = current_rank current_rank += 1 return ranks"},{"question":"You are given a series of events in a city\'s public transport system. Each event corresponds to either a rider boarding or alighting from a bus. Riders are represented by their ID numbers and events are recorded chronologically. Your task is to verify whether the sequence of events could possibly be valid given the following constraints: 1. A rider cannot alight from the bus if they haven’t boarded it previously. 2. A rider cannot board the bus more than once without alighting first. Given these rules, determine if the series of events is valid. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of events. The following n lines each contain two values: - A string which is either \\"board\\" or \\"alight\\". - An integer id (1 le id le 10^4) — the ID of the rider. -----Output----- Print \\"VALID\\" if the events sequence is possible, otherwise print \\"INVALID\\". -----Examples----- Input 6 board 1 board 2 alight 1 board 1 alight 2 alight 1 Output VALID Input 5 board 1 alight 2 board 2 board 1 alight 1 Output INVALID","solution":"def is_valid_transport_sequence(events): This function checks whether a given sequence of board and alight events is valid. on_board = set() for action, rider_id in events: if action == \\"board\\": if rider_id in on_board: return \\"INVALID\\" on_board.add(rider_id) elif action == \\"alight\\": if rider_id not in on_board: return \\"INVALID\\" on_board.remove(rider_id) return \\"VALID\\""},{"question":"Task Write a function named `findPeakElement` that takes an array of integers as input and returns the index of a peak element. A peak element is an element that is strictly greater than its neighbors. If the array contains multiple peaks, return the index of any of the peaks. Input The function takes in a single parameter: a list or array of integers. Output The function should return an integer, which is the index of a peak element. Constraints - The array will contain at least one element. - The array may contain negative numbers. - If the array contains just one element, that element is considered a peak. Examples ```python findPeakElement([1, 2, 3, 1]) => 2 # Element at index 2 (which is 3) is a peak findPeakElement([1, 2, 1]) => 1 # Element at index 1 (which is 2) is a peak findPeakElement([1, 3, 4, 5, 2]) => 3 # Element at index 3 (which is 5) is a peak ```","solution":"def findPeakElement(nums): Finds the index of a peak element in the array. A peak element is an element that is strictly greater than its neighbors. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[mid + 1]: right = mid else: left = mid + 1 return left"},{"question":"The kingdom of Monotonia has a unique social structure where every citizen must always choose actions in a monotonically non-decreasing order of benefit. The king of Monotonia has a list of n activities, each with a benefit value. The king wants to organize a festival by selecting activities such that every chosen activity has a benefit value greater than or equal to the benefit value of the activity before it in his selection. However, he also wants there to be no two adjacent activities with the same benefit. Given the list of activities, determine the maximum number of activities that can be selected for the festival under these constraints. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of activities. The second line contains n space-separated integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^5) — the benefit values of the activities. -----Output----- On a single line, print a single integer — the maximum number of activities that the king can select for the festival. -----Examples----- Input 7 4 5 2 4 3 3 6 Output 5 Input 5 1 1 2 2 3 Output 3 Input 6 6 4 4 4 5 6 Output 3 -----Note----- In the first example, the king can select the activities with benefits [2, 3, 4, 5, 6]. In the second example, the maximum set of activities could be [1, 2, 3]. In the third example, a possible maximum set of activities is [4, 5, 6].","solution":"def max_activities(n, benefits): Given a list of benefits of activities, return the maximum number of activities that can be selected such that the benefit values are in strictly increasing order. benefits = sorted(set(benefits)) # Remove duplicates and sort the list return len(benefits)"},{"question":"A logistics company plans to ship a batch of packages that need to be distributed evenly across their fleet of delivery trucks. Each truck can carry a certain maximum weight, and each package has a specific weight. You need to determine if it\'s possible to distribute all the packages so that each truck carries an equal weight load without exceeding the maximum weight for any truck. Write a program that determines if such an even distribution of packages across the trucks is possible. Input The input consists of an integer N (1 ≤ N ≤ 100), representing the number of packages, followed by N integers representing the weights of the packages (wi, 1 ≤ wi ≤ 1000), and finally, an integer M (1 ≤ M ≤ 50), representing the number of trucks available. Each truck can carry a maximum total weight of W (1 ≤ W ≤ 10000). Output Output \\"yes\\" if it\'s possible to evenly distribute the packages across the trucks without exceeding the maximum weight for any truck. Otherwise, output \\"no\\". Example Input 4 2 4 6 8 2 10 Output yes Input 4 3 3 3 3 3 5 Output no","solution":"def can_distribute_packages(N, weights, M, W): Determine if the packages can be distributed evenly across the trucks without exceeding the maximum weight for any truck. Parameters: N (int): Number of packages. weights (list of int): Weights of the packages. M (int): Number of trucks. W (int): Maximum weight each truck can carry. Returns: str: \\"yes\\" if the distribution is possible, otherwise \\"no\\". total_weight = sum(weights) # Each truck should carry exactly this weight for an even distribution target_per_truck = total_weight // M if total_weight % M != 0 or target_per_truck > W: return \\"no\\" # If there\'s only one truck, it carries the total weight if M == 1: return \\"yes\\" if total_weight <= W else \\"no\\" # Recursive helper function to check if we can partition the speeds into M groups of target_per_truck max_weight = W # maximum weight a group (truck) can carry weights.sort(reverse=True) # Sort the weights from heaviest to lightest used = [False] * N def can_partition(start, current_sum, groups_formed): if groups_formed == M: return True if current_sum == target_per_truck: return can_partition(0, 0, groups_formed + 1) for i in range(start, N): if not used[i] and current_sum + weights[i] <= max_weight: used[i] = True if can_partition(i + 1, current_sum + weights[i], groups_formed): return True used[i] = False return False return \\"yes\\" if can_partition(0, 0, 0) else \\"no\\""},{"question":"Parveen is trying to write a program to find out how many distinct words can be formed by rearranging the letters of a given word. A word is defined as a sequence of uppercase or lowercase letters (a-z, A-Z). Your task is to help Parveen by writing a program that counts the number of distinct permutations of the given word. Input You are given a single word of length n (1 ≤ n ≤ 20). The word consists of only uppercase or lowercase English letters. Output Print the number of distinct permutations of the given word. Examples Input abc Output 6 Input aabb Output 6","solution":"from math import factorial from collections import Counter def count_distinct_permutations(word): Returns the number of distinct permutations of the given word. letter_count = Counter(word) numerator = factorial(len(word)) denominator = 1 for count in letter_count.values(): denominator *= factorial(count) return numerator // denominator"},{"question":"There are N computers in a network represented by an N x N adjacency matrix `connections` where `connections[i][j] = 1` represents a direct connection between computers `i` and `j`, and `connections[i][j] = 0` represents no direct connection. A virus starts from computer `virusStart` and spreads to all directly connected computers. Write a function that returns a list of computers infected by the virus, sorted by their indices. Example 1: Input: N = 4 connections = [[0, 1, 0, 0], [1, 0, 1, 1], [0, 1, 0, 0], [0, 1, 0, 0]] virusStart = 1 Output: [0, 1, 2, 3] Explanation: The virus starts at computer 1 and infects computers 0, 2, and 3 through the direct connections. Example 2: Input: N = 3 connections = [[0, 1, 0], [1, 0, 0], [0, 0, 0]] virusStart = 0 Output: [0, 1] Explanation: The virus starts at computer 0 and infects computer 1 through the direct connection. User Task: Complete the function `infectedComputers()` that takes in the integer `N`, the 2D list `connections`, and the integer `virusStart`, and return a list of indices of infected computers. Expected Time Complexity: O(N^2). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 500 0 ≤ virusStart < N connections[i][j] is either 0 or 1. connections[i][i] = 0 for all 0 ≤ i < N.","solution":"def infectedComputers(N, connections, virusStart): Returns a list of indices of computers infected by the virus. infected = [] visited = [False] * N def dfs(node): visited[node] = True infected.append(node) for neighbor in range(N): if connections[node][neighbor] == 1 and not visited[neighbor]: dfs(neighbor) dfs(virusStart) return sorted(infected)"},{"question":"Write a function to determine if it is possible to rearrange the characters of a given non-empty string such that no two adjacent characters are the same. If possible, return one of the possible rearrangements. Otherwise, return an empty string. Sample Inputs and Outputs: Input ``` aab ``` Output ``` aba ``` Input ``` aaab ``` Output ``` ``` Function Signature: ```python def rearrange_string(s: str) -> str: pass ``` Notes: - If there are multiple correct answers, return any of them. - The function should handle strings consisting of only lowercase English letters. - The length of the input string is between 1 and 10^4.","solution":"from collections import Counter import heapq def rearrange_string(s: str) -> str: if not s: return \\"\\" # Count frequency of each character char_count = Counter(s) # Use a max heap to always try to put the most frequent character next max_heap = [(-freq, char) for char, freq in char_count.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) # Add the previous character back if its count is positive if prev_char and prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Append the current character to the result and update its count result.append(char) prev_char = char prev_freq = freq + 1 # Decrement the frequency (remember it\'s negative in the heap) # If the rearranged string is of a different length, this means it wasn\'t possible if len(result) != len(s): return \\"\\" return \'\'.join(result)"},{"question":"**Problem: Distinct Subsequences and Target Number** You have a sequence of integers `a_1, a_2, ..., a_n` and a target integer `X`. You need to determine if it is possible to partition the sequence `a` into one or more subsequences such that the total number of distinct integers in all subsequences combined equals `X`. For example, given the sequence `[1, 2, 2, 1, 3]` and the target `3`, you can partition it into `[1, 2]`, `[2, 1, 3]`, resulting in `3` distinct integers across the partitions. -----Input----- The first line contains a single integer `t` (1 le t le 10000) — the number of test cases. The first line of each test case contains two integers `n` (1 le n le 10^5) and `X` (1 le X le n). The second line of each test case contains `n` integers a_1, a_2, ..., a_n (1 le a_i le 10^9). It is guaranteed that the sum of `n` over all test cases does not exceed 3 cdot 10^5. -----Output----- For each test case, print \\"YES\\" (without quotes) if it is possible to partition the sequence into subsequences such that the total number of distinct integers equals `X`, otherwise print \\"NO\\" (without quotes). You can print each letter in any register (upper or lower). -----Examples----- Input 3 5 3 1 2 2 1 3 4 2 4 4 4 4 6 4 1 2 3 4 4 4 Output YES NO YES -----Note----- In the first test case, the sequence `[1, 2, 2, 1, 3]` can be partitioned into subsequences `[1]`, `[2, 2]`, `[1, 3]`, resulting in `3` distinct integers. In the second test case, it\'s not possible to achieve `2` distinct integers as there is only one unique value in the sequence. In the third test case, the sequence `[1, 2, 3, 4, 4, 4]` already contains `4` distinct integers, so the answer is \\"YES\\".","solution":"def can_partition_into_distinct_subsequences(t, test_cases): results = [] for i in range(t): n, X = test_cases[i][0] a = test_cases[i][1] distinct_count = len(set(a)) if distinct_count >= X: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Bob is learning about sequences and has come across a particularly interesting property called the \\"XOR sum\\". He decided to define an interesting number based on this concept which contains exactly one subarray whose XOR sum is zero. Bob\'s task is to find out if it\'s possible to arrange the given integers into a new sequence such that it contains exactly one subarray (contiguous part of the sequence) whose XOR sum is zero. If it\'s possible, he wants to know the lexicographically smallest such sequence. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) – the number of integers in the sequence. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1000). -----Output----- If it\'s possible to rearrange the sequence to contain exactly one subarray whose XOR sum is zero, print the lexicographically smallest sequence. Otherwise, print -1. -----Examples----- Input 4 1 2 3 0 Output 0 1 2 3 Input 3 4 5 6 Output -1 -----Note----- 1. The lexicographically smallest sequence is the sequence that appears first in dictionary order. 2. A subarray is a contiguous segment of an array. 3. The XOR sum of a sequence is the result of performing the XOR operation on all its elements. For more information on the XOR operation: https://en.wikipedia.org/wiki/Bitwise_operation#XOR.","solution":"def find_sequence_with_one_zero_xor_subarray(n, a): a.sort() total_xor = 0 for number in a: total_xor ^= number if total_xor == 0: result = \' \'.join(map(str, a)) return result else: return -1"},{"question":"# Task You are given a list of integers where every element appears an even number of times, except for one element which appears an odd number of times. Write a function to find and return the element that appears an odd number of times. # Example For the input list `[1, 2, 3, 2, 3, 1, 3]` the result should be `3`. ``` 1 appears 2 times 2 appears 2 times 3 appears 3 times So, 3 is the element that appears an odd number of times. ``` For the input list `[4, 5, 6, 4, 5, 6, 4]` the result should be `4`. ``` 4 appears 3 times 5 appears 2 times 6 appears 2 times So, 4 is the element that appears an odd number of times. ``` # Input/Output - `[input]` list of integers `arr` The list of integers. `arr.length >= 1` - `[output]` an integer value The element that appears an odd number of times.","solution":"def find_odd_occurrence(arr): Finds the element that appears an odd number of times in the list. result = 0 for num in arr: result ^= num return result"},{"question":"You are given a grid-based game where each cell in the grid has a certain cost associated with it. A player can only move right or down from the current position. The player starts at the top-left corner (1,1) and wants to reach the bottom-right corner (N, M) with the minimum cost possible. The cost of a path is the sum of the costs of all the cells along that path. Write an algorithm to find the minimum cost path from the top-left corner to the bottom-right corner of the given grid. Input: The first line consists of a single integer T, the number of test cases. For each test case: - The first line contains two space-separated integers N and M, indicating the dimensions of the grid. - The next N lines each contain M space-separated integers representing the cost of each cell in the grid. Output: For each test case, print the minimum cost to reach the bottom-right corner from the top-left corner. Constraints: 1 ≤ T ≤ 10 1 ≤ N, M ≤ 50 1 ≤ cost[i][j] ≤ 1000 Sample Input: 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 3 4 Sample Output: 7 7","solution":"def min_path_cost(grid): Finds the minimum cost to reach the bottom-right corner of the grid from the top-left corner. n, m = len(grid), len(grid[0]) dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1] def min_cost_to_reach_corner(test_cases): Parses the input of multiple test cases and calculates the minimum cost path for each. results = [] for grid in test_cases: results.append(min_path_cost(grid)) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, lines[index].split()) grid = [] for i in range(n): grid.append(list(map(int, lines[index + 1 + i].split()))) index += n + 1 test_cases.append(grid) return test_cases def main(input_str): test_cases = parse_input(input_str) results = min_cost_to_reach_corner(test_cases) for result in results: print(result) # Example usage: input_str = 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 3 4 main(input_str)"},{"question":"Sarah is designing a seating arrangement for a cinema hall. The hall consists of rows of seats, and each seat can either be occupied or empty. Sarah needs to write a program to efficiently confirm the occupancy status of specific segments of seats. For each query, she needs to determine if all seats in the specified segment are occupied or not. Input: The first line contains a string, H, consisting of characters \'O\' (occupied) and \'E\' (empty) representing the occupancy of seats in a single row. The next line contains an integer, Q, representing the number of queries. Each following line of the queries contains two integers, L and R, denoting the segment of seats from L (inclusive) to R (inclusive). Output: For each query, output \\"Full\\" if all seats in the given segment are occupied, otherwise output \\"Not Full\\". Constraints: 1 ≤ |H| ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ |H| The string will contain only \'O\' and \'E\' characters. SAMPLE INPUT EOOEEOOOO 3 1 3 4 7 2 5 SAMPLE OUTPUT Not Full Not Full Not Full Explanation For Query 1, the segment \\"EOO\\" includes an empty seat. For Query 2, the segment \\"EEOO\\" includes empty seats. For Query 3, the segment \\"OOEE\\" includes empty seats. If all the characters in the specified segment are \'O\', then the segment is \\"Full\\", otherwise it is \\"Not Full\\".","solution":"def check_occupancy(H, queries): For each segment specified in queries, determine if all seats are occupied. Parameters: H (str): String representing occupancy of seats (\'O\' for occupied, \'E\' for empty) queries (list of tuples): List of (L, R) tuples representing segments to check Returns: list: List of results, \\"Full\\" if all seats in the segment are occupied, otherwise \\"Not Full\\" results = [] for L, R in queries: if \'E\' in H[L-1:R]: results.append(\\"Not Full\\") else: results.append(\\"Full\\") return results"},{"question":"Create a function `find_palindrome` to determine the longest palindromic substring within a given string `s`. The function should return the longest palindromic substring found. If there are multiple palindromic substrings of the same length, return the first one that occurs. # Example ```python find_palindrome(\\"babad\\") # Output: \\"bab\\" (or \\"aba\\" as both \\"bab\\" and \\"aba\\" are valid answers) find_palindrome(\\"cbbd\\") # Output: \\"bb\\" find_palindrome(\\"a\\") # Output: \\"a\\" find_palindrome(\\"ac\\") # Output: \\"a\\" (or \\"c\\" as both \\"a\\" and \\"c\\" are valid answers) find_palindrome(\\"racecar\\") # Output: \\"racecar\\" ``` # Constraints - The input string `s` will have a maximum length of 1000 characters. - The function should be efficient enough to handle the upper limit of the input string length.","solution":"def find_palindrome(s): Finds the longest palindromic substring in a given string s. n = len(s) if n == 0: return \\"\\" start, max_length = 0, 1 for i in range(1, n): # Check for even length palindromes low, high = i - 1, i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Check for odd length palindromes low, high = i - 1, i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"Write a function `longest_balanced_substring(s: str) -> int` that takes a string `s` consisting of only opening and closing parentheses \'(\' and \')\', and returns the length of the longest balanced substring. A balanced substring is one where the number of opening and closing parentheses is the same, and they are correctly nested. --- **Input:** - A single string `s` where 1 ≤ |s| ≤ 100. --- **Output:** - An integer representing the length of the longest balanced substring. --- **Examples:** Input: ``` \\")()())\\" ``` Output: ``` 4 ``` Input: ``` \\"(()))(\\" ``` Output: ``` 4 ``` Input: ``` \\"\\" ``` Output: ``` 0 ``` --- **Note:** In the first example, the longest balanced substring is \\"()()\\", which has length 4. In the second example, the longest balanced substring is \\"(()))\\" or \\"()()\\", both of which have length 4. For an empty string, the output is 0 since there are no parentheses.","solution":"def longest_balanced_substring(s: str) -> int: Returns the length of the longest balanced substring where the number of opening and closing parentheses is the same and they are correctly nested. max_len = 0 stack = [-1] # Stack to store the indices of \'(\' and the starting points for valid substrings for i, char in enumerate(s): if char == \'(\': stack.append(i) else: # char == \')\' if stack: stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: stack.append(i) else: stack.append(i) return max_len"},{"question":"Given a string s and an integer k, determine the minimum number of characters that need to be changed so that the string contains k distinct characters. Example 1: Input: k = 5 s = \\"aaabbcc\\" Output: 2 Explanation: To achieve 5 distinct characters, we can change two \'a\'s to \'d\' and \'e\', resulting in \\"deabbcc\\". Example 2: Input: k = 3 s = \\"abcd\\" Output: 0 Explanation: The string already contains exactly 3 distinct characters. Example 3: Input: k = 2 s = \\"aaaa\\" Output: 0 Explanation: The string already contains exactly 2 distinct characters (by changing a single \'a\' to any other character). Your Task: You don\'t need to read input or print anything. Your task is to complete the function minChangesToKDistinct() which takes an integer k and a string s as input parameters and returns the minimum number of characters that need to be changed to have k distinct characters in the string. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= k <= 26 1 <= |s| <= 1000 s consists only of lowercase English letters.","solution":"def minChangesToKDistinct(k, s): Returns the minimum number of characters that need to be changed so that the string s contains k distinct characters. from collections import Counter # Step 1: Count the frequency of each character in the string freq = Counter(s) # Step 2: Determine the number of current distinct characters current_distinct = len(freq) # If the current number of distinct characters is already k or more if current_distinct >= k: return 0 # Step 3: Calculate the number of changes needed total_changes_needed = k - current_distinct return total_changes_needed"},{"question":"Story You are working on a project where you have to manage the logs of a multilingual website. The text appearing on the website is translated into different languages, and for quality assurance, you must ensure that all text tags are properly closed and nested. Given a piece of text which can contain multiple tags with contents in different languages, your task is to verify that all HTML-like tags are properly closed and nested. Task You need to write a function that takes a string input representing multilingual text with HTML-like tags and returns `True` if all tags are properly closed and nested, and `False` otherwise. Tags are case-insensitive and only alphanumeric characters are allowed in tag names. For example: * `<div><b>hello</b><i>world</i></div>` is valid. * `<div><b>hello</i></b></div>` is not valid because tags are not properly nested. * `<div><b>Hello</b> world<i>!</div>` is not valid because the `<i>` tag is not closed. Function signature: ```python def validate_tags(text: str) -> bool: pass ``` Examples ```python validate_tags(\\"<div><b>hello</b><i>world</i></div>\\") => True validate_tags(\\"<div><b>hello</i></b></div>\\") => False validate_tags(\\"<div><b>Hello</b> world<i>!</div>\\") => False validate_tags(\\"<p><a>link</a>text</p>\\") => True ```","solution":"def validate_tags(text: str) -> bool: import re tag_pattern = re.compile(r\\"</?([a-zA-Z0-9]+)>\\") stack = [] for match in tag_pattern.finditer(text): tag = match.group(1) if text[match.start()] == \'<\' and text[match.start() + 1] != \'/\': # Opening tag stack.append(tag.lower()) elif text[match.start()] == \'<\' and text[match.start() + 1] == \'/\': # Closing tag if not stack or stack.pop() != tag.lower(): return False return len(stack) == 0"},{"question":"Given a list of cities connected by direct road segments represented by pairs of cities [city1, city2], your task is to determine if you can start from a given city and travel to all other cities without visiting any city more than once. You need to return \'True\' if such a route is possible, otherwise return \'False\'. Note: 1. All cities are represented by a unique integer. 2. The number of cities in the list is at least 2. 3. There are no duplicate road segments in the list. Example 1: Input: n = 4, roads = [[0, 1], [0, 2], [1, 2], [1, 3]], start = 0 Output: True Explanation: It is possible to start from city 0 and travel to all cities: 0 -> 1 -> 2 -> 3 without revisiting any city. Example 2: Input: n = 4, roads = [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3]], start = 0 Output: True Explanation: It is possible to start from city 0 and travel to all cities: 0 -> 1 -> 2 -> 3 or other various routes. Example 3: Input: n = 4, roads = [[0, 1], [1, 2]], start = 0 Output: False Explanation: It is not possible to travel to city 3 starting from city 0.","solution":"def can_travel_to_all_cities(n, roads, start): Determines if it is possible to start from the given city and travel to all other cities without visiting any city more than once. :param n: int, number of cities :param roads: List[List[int]], list of direct road segments represented as pairs of cities [city1, city2] :param start: int, the starting city :return: bool, True if it\'s possible to travel to all cities, otherwise False from collections import defaultdict, deque def bfs(start, graph, visited): queue = deque([start]) visited.add(start) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) graph = defaultdict(list) for city1, city2 in roads: graph[city1].append(city2) graph[city2].append(city1) visited = set() bfs(start, graph, visited) return len(visited) == n"},{"question":"Rabbit recently got interested in reading different types of secret codes. Now, he wants to further improve his skills by working with sequences of numbers. Given an array A of integers, Rabbit wants to find the maximum sum of a contiguous subarray that he can obtain by removing at most one element from the array. In other words, Rabbit needs to find the maximum value derived from one of the following options: 1. The sum of a contiguous subarray of the original array. 2. The sum of a contiguous subarray of the array after removing exactly one element. Help Rabbit with the task. Input The first line of input contains an integer N, the size of the array (1 ≤ N ≤ 100,000). The second line contains N integers A1, A2, ..., AN, the elements of the array (-10^9 ≤ Ai ≤ 10^9). Output Output the maximum sum of a contiguous subarray with at most one element removed. Examples Input: 6 1 -2 0 3 -1 2 Output: 5 Input: 7 2 -1 -2 3 4 -10 2 Output: 9 Input: 5 -1 -1 -1 -1 -1 Output: -1","solution":"def max_sum_subarray_with_one_removal(arr): n = len(arr) if n == 0: return 0 # Initialize to handle arrays of length 1 max_ending_here = [0] * n max_starting_here = [0] * n max_ending_here[0] = arr[0] max_starting_here[-1] = arr[-1] for i in range(1, n): max_ending_here[i] = max(arr[i], max_ending_here[i - 1] + arr[i]) for i in range(n - 2, -1, -1): max_starting_here[i] = max(arr[i], max_starting_here[i + 1] + arr[i]) max_sum = max(max_ending_here) for i in range(1, n - 1): max_sum = max(max_sum, max_ending_here[i - 1] + max_starting_here[i + 1]) return max_sum"},{"question":"Consider a binary search tree (BST) where each node has a value and two children. You are required to perform multiple operations on this BST. The operations are of two types: 1. Insert an integer x into the BST. 2. Delete an integer y from the BST if it exists. Given a series of these operations, can you determine and print the inorder traversal of the BST after performing all the operations? Input Format The first line contains a single integer m (the number of operations). Each of the next m lines contains a string representing the operation (\\"Insert\\" or \\"Delete\\") followed by an integer representing the value to be inserted or deleted, respectively. Constraints 1leq mleq10^5 -10^9leq x, yleq10^9 Output Format Print the inorder traversal of the BST after processing all m operations. The values should be printed on a single line, separated by spaces. Sample Input 0 5 Insert 10 Insert 5 Insert 15 Delete 10 Insert 20 Sample Output 0 5 15 20 Explanation 0 After performing the operations in the specified order: 1. Insert 10: The BST is now [10]. 2. Insert 5: The BST becomes 10 / 5 3. Insert 15: The BST becomes 10 / 5 15 4. Delete 10: The BST becomes 15 / 5 5. Insert 20: The BST becomes 15 / 5 20 The inorder traversal of the final BST is [5, 15, 20].","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def insert(root, key): if root is None: return TreeNode(key) else: if root.val < key: root.right = insert(root.right, key) else: root.left = insert(root.left, key) return root def minValueNode(node): current = node while(current.left is not None): current = current.left return current def deleteNode(root, key): if root is None: return root if key < root.val: root.left = deleteNode(root.left, key) elif key > root.val: root.right = deleteNode(root.right, key) else: if root.left is None: return root.right elif root.right is None: return root.left temp = minValueNode(root.right) root.val = temp.val root.right = deleteNode(root.right, temp.val) return root def inorderTraversal(root, res): if root: inorderTraversal(root.left, res) res.append(root.val) inorderTraversal(root.right, res) # Main function to process operations and output the inorder traversal def bst_operations(operations): root = None for operation in operations: action, value = operation.split() value = int(value) if action == \\"Insert\\": root = insert(root, value) elif action == \\"Delete\\": root = deleteNode(root, value) result = [] inorderTraversal(root, result) return result"},{"question":"Given a string of RNA comprised of codons, three bases each, that potentially contain a mutation causing a single amino acid to be replaced by another. Write a function that finds and corrects the mutation, given the original and mutated protein sequences. It\'s guaranteed that only one mutation will exist and the strings will be of the same length. Example 1: ```python original_protein(\'MAYKD\') and mutated_protein(\'MAXKD\') will return \'TRY\' ``` Example 2: ```python original_protein(\'LGNCAY\') and mutated_protein(\'LGNZAY\') will return \'N\' ``` Find the codon that has been mutated and provide its three-letter amino acid code. Hint: You can use the provided amino acid dictionary from the previous question to help with identifying and verifying the sequences.","solution":"# Dictionary mapping of RNA codons to amino acids CODON_TABLE = { \\"UUU\\": \'F\', \\"UUC\\": \'F\', \\"UUA\\": \'L\', \\"UUG\\": \'L\', \\"UCU\\": \'S\', \\"UCC\\": \'S\', \\"UCA\\": \'S\', \\"UCG\\": \'S\', \\"UAU\\": \'Y\', \\"UAC\\": \'Y\', \\"UAA\\": \'STOP\', \\"UAG\\": \'STOP\', \\"UGU\\": \'C\', \\"UGC\\": \'C\', \\"UGA\\": \'STOP\', \\"UGG\\": \'W\', \\"CUU\\": \'L\', \\"CUC\\": \'L\', \\"CUA\\": \'L\', \\"CUG\\": \'L\', \\"CCU\\": \'P\', \\"CCC\\": \'P\', \\"CCA\\": \'P\', \\"CCG\\": \'P\', \\"CAU\\": \'H\', \\"CAC\\": \'H\', \\"CAA\\": \'Q\', \\"CAG\\": \'Q\', \\"CGU\\": \'R\', \\"CGC\\": \'R\', \\"CGA\\": \'R\', \\"CGG\\": \'R\', \\"AUU\\": \'I\', \\"AUC\\": \'I\', \\"AUA\\": \'I\', \\"AUG\\": \'M\', \\"ACU\\": \'T\', \\"ACC\\": \'T\', \\"ACA\\": \'T\', \\"ACG\\": \'T\', \\"AAU\\": \'N\', \\"AAC\\": \'N\', \\"AAA\\": \'K\', \\"AAG\\": \'K\', \\"AGU\\": \'S\', \\"AGC\\": \'S\', \\"AGA\\": \'R\', \\"AGG\\": \'R\', \\"GUU\\": \'V\', \\"GUC\\": \'V\', \\"GUA\\": \'V\', \\"GUG\\": \'V\', \\"GCU\\": \'A\', \\"GCC\\": \'A\', \\"GCA\\": \'A\', \\"GCG\\": \'A\', \\"GAU\\": \'D\', \\"GAC\\": \'D\', \\"GAA\\": \'E\', \\"GAG\\": \'E\', \\"GGU\\": \'G\', \\"GGC\\": \'G\', \\"GGA\\": \'G\', \\"GGG\\": \'G\' } def find_mutated_amino_acid(original_protein, mutated_protein): # Iterate through the protein sequences to find the mutation for orig, mut in zip(original_protein, mutated_protein): if orig != mut: return mut return None"},{"question":"In a galaxy far, far away, there is an intergalactic bank with a very peculiar transaction system. This bank operates a simple system where customers can perform transactions using three types of currency: Galactic Credits (G), Imperial Coins (I), and Republic Tokens (R). Each customer has a balance of these three currencies, and they often need to perform transactions that could, for simplicity, deduct or add a certain amount of each currency. To handle these transactions, customers can perform a series of N operations on their balances. However, the intergalactic bank has a strange rule: for each transaction, one specific criterion must be met - only one of the currencies (G, I, or R) can change its balance in each operation. This must be strictly followed, meaning a customer cannot change more than one type of currency at a time in a single operation. Write a program that determines whether a list of N transaction operations is valid based on the above rule. # Input - The first line contains an integer N (1 ≤ N ≤ 100), the number of operations. - The following N lines each describe one operation with three space-separated integers representing the changes in balance for Galactic Credits, Imperial Coins, and Republic Tokens respectively. Each integer can be positive (indicating an increment), negative (indicating a decrement), or zero (indicating no change). # Output - Output a single line containing \\"Valid\\" if all operations adhere to the bank\'s rule; otherwise, output \\"Invalid\\". # Example Input ``` 4 5 0 0 0 3 0 -2 0 0 0 0 4 ``` Output ``` Valid ``` Input ``` 3 5 0 -1 0 2 0 0 0 3 ``` Output ``` Invalid ``` # Explanation In the first example, each operation affects only one currency, so the output is \\"Valid\\". In the second example, the first operation affects both Galactic Credits and Republic Tokens which violates the rule, making the output \\"Invalid\\".","solution":"def is_valid_transaction(N, transactions): for txn in transactions: non_zero_counts = sum(1 for x in txn if x != 0) if non_zero_counts != 1: return \\"Invalid\\" return \\"Valid\\""},{"question":"A tournament is being organized, where each match results in one team winning and the other losing. Given the results of several matches, you need to determine how many wins each team has accumulated. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of matches played. Each of the next n lines contains two space-separated strings, a and b, indicating that team a won against team b. A string representing a team\'s name will be at most 30 characters long and will only contain uppercase and lowercase English letters. Output For each team that played at least one match, print their name followed by the number of matches they won, in the format \\"team_name wins\\". The output should list teams in the lexicographical order of their names. Examples Input 5 TeamA TeamB TeamC TeamD TeamA TeamC TeamD TeamB TeamC TeamA Output TeamA 2 TeamB 0 TeamC 2 TeamD 1","solution":"def count_team_wins(n, matches): Counts the number of wins for each team. Args: n (int): Number of matches played. matches (list of tuples): Each tuple contains two strings (winner, loser). Returns: dict: A dictionary with team names as keys and win counts as values. from collections import defaultdict win_count = defaultdict(int) for winner, loser in matches: win_count[winner] += 1 if loser not in win_count: win_count[loser] = 0 sorted_win_count = dict(sorted(win_count.items())) return sorted_win_count def display_team_wins(win_count): Displays the team win counts. Args: win_count (dict): A dictionary with team names as keys and win counts as values. for team, wins in win_count.items(): print(f\\"{team} {wins}\\")"},{"question":"Write a program that determines whether a circle and a rectangle overlap or not. The circle is represented by its center coordinates and a radius, and the rectangle is represented by its bottom-left and top-right coordinates. Constraints: * The coordinates and the radius are integers. * The circle’s radius is positive. * -10^4 leq x_{c}, y_{c}, x_{bl}, y_{bl}, x_{tr}, y_{tr} leq 10^4 * 0 < r leq 10^4 Input The input data is given in the following format: x_{c} y_{c} r x_{bl} y_{bl} x_{tr} y_{tr} Output Print \\"Overlap\\" if the circle and rectangle overlap, otherwise print \\"No Overlap\\". Examples Input 0 0 5 -1 -1 2 2 Output Overlap Input 0 0 1 2 2 4 4 Output No Overlap Input 3 3 1 1 1 5 5 Output Overlap","solution":"def circle_rectangle_overlap(xc, yc, r, xbl, ybl, xtr, ytr): Determines whether a circle and a rectangle overlap or not. Parameters: xc (int): x-coordinate of the circle\'s center. yc (int): y-coordinate of the circle\'s center. r (int): radius of the circle. xbl (int): x-coordinate of the rectangle\'s bottom-left corner. ybl (int): y-coordinate of the rectangle\'s bottom-left corner. xtr (int): x-coordinate of the rectangle\'s top-right corner. ytr (int): y-coordinate of the rectangle\'s top-right corner. Returns: str: \\"Overlap\\" if the circle and rectangle overlap, otherwise \\"No Overlap\\". # Find the closest point on the rectangle to the center of the circle closest_x = max(xbl, min(xc, xtr)) closest_y = max(ybl, min(yc, ytr)) # Calculate the distance from the center of the circle to this point distance_x = xc - closest_x distance_y = yc - closest_y # If the distance is less than the radius, it overlaps if (distance_x ** 2 + distance_y ** 2) <= (r ** 2): return \\"Overlap\\" else: return \\"No Overlap\\""},{"question":"Given a string `S` of length `N` consisting of only characters \'a\' and \'b\', you are tasked to transform it into a palindrome with the minimum number of character replacements. Note that a string is a palindrome if it reads the same backward as forward. -----Input----- The first line of the input contains an integer `T` denoting the number of test cases. Each test case consists of a single line containing a binary string `S`. -----Output----- For each test case, output the minimum number of character replacements required to make the string a palindrome. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 1000 - S consists of only characters \'a\' and \'b\' -----Example----- Input 3 abba abbaa aabbb Output 0 1 2 -----Explanation----- Example 1. The string \\"abba\\" is already a palindrome. Therefore, 0 replacements are needed. Example 2. The string \\"abbaa\\" can be transformed into a palindrome by changing the second \'b\' to an \'a\'. Therefore, 1 replacement is needed (abb**a**a). Example 3. The string \\"aabbb\\" can be transformed into a palindrome by changing both b\'s at the end to a\'s. Therefore, 2 replacements are needed (aa**a**bb -> aa**a**ba -> aaa**a**ba -> aaa**a**aa).","solution":"def min_replacements_to_palindrome(s): Returns the minimum number of character replacements required to make the string `s` a palindrome. n = len(s) count = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: count += 1 return count def process_test_cases(test_cases): Processes a list of test cases and returns the results for each. results = [] for s in test_cases: results.append(min_replacements_to_palindrome(s)) return results"},{"question":"A company is managing a network of computers identified by unique IDs. They want to ensure their network is secure by checking the connectivity between any two computers. The network information is given as a list of direct connections between pairs of computers. Your task is to determine if there is a path connecting two specific computers (`A` and `B`) in the network. Each direct connection between two computers is bidirectional. INPUT An input consists of: - An integer `N`, the number of direct connections (1 ≤ N ≤ 100000). - `N` pairs of integers, each pair representing a direct connection between two computers. - Two integers `A` and `B`, representing the IDs of the two computers you need to check for connectivity. - The computer IDs are non-negative integers, and the maximum ID will not exceed `1000000`. OUTPUT Print `YES` if there is a path connecting computer `A` to computer `B`, otherwise print `NO`. CONSTRAINTS 1. You may assume that every computer ID is unique. 2. A path connecting two computers can involve several direct connections. SAMPLE INPUT 5 1 2 2 3 4 5 1 3 3 4 1 5 SAMPLE OUTPUT YES Explanation In this sample, there is a path between computer 1 and computer 5: 1 -> 2 -> 3 -> 4 -> 5. Therefore, the output is YES.","solution":"def is_connected(N, connections, A, B): from collections import defaultdict, deque graph = defaultdict(list) # Build the graph for u, v in connections: graph[u].append(v) graph[v].append(u) # Use BFS to determine if there\'s a path between A and B visited = set() queue = deque([A]) while queue: node = queue.popleft() if node == B: return \\"YES\\" if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return \\"NO\\""},{"question":"You are given an integer N. Construct a sequence B of length N which is thrilling. A sequence is called thrilling if the sum of all absolute differences of adjacent pairs of elements is equal to N - 1. Formally, a sequence B = [B_{1}, B_{2}, ldots, B_{N}] of length N is said to be thrilling if: |B_{1}-B_{2}| + |B_{2}-B_{3}| + ldots + |B_{N-1} - B_{N}| = N - 1. Output any thrilling sequence of length N. If no thrilling sequence exists, print -1 instead. Note: A sequence of length N is an array B = [B_{1}, B_{2}, ldots, B_{N}] such that every integer from 1 to N occurs exactly once in B. For example, [1, 2, 3] and [2, 3, 1] are sequences of length 3, but [1, 2, 1], [4, 1, 2], and [2, 3, 1, 4] are not. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single line of input, containing one integer N. ------ Output Format ------ For each test case, output on a single line a thrilling sequence of N integers, or -1 if no thrilling sequence exists. ------ Constraints ------ 1 ≤ T ≤ 1000 2 ≤ N ≤ 10^{5} - Sum of N over all cases won\'t exceed 2 cdot 10^{5}. ----- Sample Input 1 ------ 2 3 5 ----- Sample Output 1 ------ 1 2 3 1 2 3 4 5 ----- Explanation 1 ------ Test Case 1: |1-2| + |2-3| = 1 + 1 = 2 Note that there are other correct answers — for example, [3, 2, 1] would also be accepted as correct. Test Case 2: |1-2| + |2-3| + |3-4| + |4-5| = 1 + 1 + 1 + 1 = 4","solution":"def generate_thrilling_sequence(N): if N == 1: return -1 return list(range(1, N+1)) def solve(T, cases): results = [] for N in cases: result = generate_thrilling_sequence(N) if result == -1: results.append(\'-1\') else: results.append(\' \'.join(map(str, result))) return results"},{"question":"You are a participant in a programming competition, and your task is to write a program to help the organizers manage the winner standings. The competition involves participants solving problems to earn points. Whenever a participant solves a problem, they earn a certain number of points. The competition has a rule that if two or more participants have the same number of points, then the one who reached that score first will be ranked higher. To help the organizers, you need to write a program that keeps track of each participant\'s points and ranks, and provides the current ranking whenever requested. -----Input----- - The first line of the input contains an integer TT denoting the number of queries. The next TT lines describe the queries. There are three types of queries: 1. \\"ADD P S\\": Indicates that participant PP has solved a problem and earned SS points. 2. \\"REMOVE P S\\": Indicates that participant PP has points removed (in case of error correction) and loses SS points. 3. \\"RANKS\\": This query requires the program to output the current ranking of all participants. -----Output----- For each \\"RANKS\\" query, print one line for each participant in descending order of their points, in the format \\"P S\\", where P is the participant\'s identifier and S is their current score. If two participants have the same score, the one who achieved it first should be ranked higher. If a participant has zero points, they should not be included in the ranking. -----Constraints----- - 1 ≤ T ≤ 10^5 - 1 ≤ P ≤ 10^5 - 1 ≤ S ≤ 10^3 -----Example Input----- 10 ADD 1 100 ADD 2 150 ADD 3 200 REMOVE 1 50 RANKS ADD 2 100 RANKS ADD 1 150 REMOVE 3 100 RANKS -----Example Output----- 3 200 2 150 1 50 2 250 3 200 1 50 2 250 1 200 -----Explanation----- - After the first three \\"ADD\\" queries, participants 1, 2, and 3 have scores 100, 150, and 200 respectively. - After removing 50 points from participant 1, the scores change to 50, 150, and 200. - The first \\"RANKS\\" query shows the order as 3 (200), 2 (150), and 1 (50). - After adding 100 points to participant 2, the scores change to 50, 250, and 200. - The second \\"RANKS\\" query shows the order as 2 (250), 3 (200), and 1 (50). - After adding 150 points to participant 1, and removing 100 from participant 3, the scores change to 200, 250, and 100. - The third \\"RANKS\\" query shows the order as 2 (250), 1 (200), and 3 (100).","solution":"from collections import defaultdict, deque class Competition: def __init__(self): self.points = defaultdict(int) # Participant points self.order = deque() # Order of point updates for handling ties def add_points(self, participant, score): if participant not in self.points: self.order.append(participant) self.points[participant] += score def remove_points(self, participant, score): if participant in self.points: self.points[participant] -= score if self.points[participant] <= 0: self.points.pop(participant) self.order.remove(participant) def get_ranks(self): ranking = sorted( self.points.items(), key=lambda x: (-x[1], self.order.index(x[0])) ) return ranking # Example usage: competition = Competition() competition.add_points(1, 100) competition.add_points(2, 150) competition.add_points(3, 200) competition.remove_points(1, 50) print(competition.get_ranks()) # [(3, 200), (2, 150), (1, 50)] competition.add_points(2, 100) print(competition.get_ranks()) # [(2, 250), (3, 200), (1, 50)] competition.add_points(1, 150) competition.remove_points(3, 100) print(competition.get_ranks()) # [(2, 250), (1, 200), (3, 100)] # Input processing def process_queries(queries): competition = Competition() results = [] for query in queries: parts = query.split() if parts[0] == \\"ADD\\": competition.add_points(int(parts[1]), int(parts[2])) elif parts[0] == \\"REMOVE\\": competition.remove_points(int(parts[1]), int(parts[2])) elif parts[0] == \\"RANKS\\": results.append(competition.get_ranks()) return results"},{"question":"A company has several employees, each working on various projects. Each employee is assigned a set of projects they contribute to. An employee can be working on multiple projects, and each project may have several employees. You are required to find the total number of unique projects that employees are working on. Input Format The first line contains an integer N, the number of employees. The next N lines each start with the employee\'s name and followed by the list of projects that the employee is working on. Each project name will be separated by a space. Constraints 1 leq N leq 100 Each project name only contains alphabetic characters and is of length 1 leq p leq 20. An employee can work on at most 100 projects. Total number of unique projects will not exceed 10^3. Output Format Output a single line containing the total number of distinct projects that all employees are working on. Sample Input 4 Alice project1 project2 Bob project2 project3 Charlie project3 project4 David project1 project5 Sample Output 5 Explanation The distinct projects are: project1, project2, project3, project4, and project5. Hence, there are 5 unique projects.","solution":"def count_unique_projects(n, employee_project_list): Returns the total number of unique projects being worked on by the employees. Parameters: n (int): Number of employees. employee_project_list (list of str): List of strings where each string contains the employee\'s name followed by the list of projects they are working on. Returns: int: Total number of unique projects. unique_projects = set() for employee_projects in employee_project_list: projects = employee_projects.split()[1:] # Extract the projects, ignoring the employee name unique_projects.update(projects) return len(unique_projects)"},{"question":"Write a function to determine if there exists two distinct elements in an array that add up to a given target sum. Constraints * The input list contains integers. * The length of the list is between 2 and 100. * Each integer in the list ranges from -1000 to 1000. * The target sum ranges from -2000 to 2000. Input * The first line contains an integer n, the number of elements in the array. * The second line contains n integers, representing the elements of the array. * The third line contains the target sum. Output * Return \\"YES\\" if there exist two distinct elements in the array whose sum is equal to the target sum. * Return \\"NO\\" otherwise. Examples Input 5 1 2 3 4 5 9 Output YES Input 4 1 2 4 4 8 Output YES Input 3 1 2 3 7 Output NO","solution":"def has_pair_with_sum(arr, target_sum): Determines if there exist two distinct elements in an array that add up to a given target sum. Args: arr (list of int): List of integers. target_sum (int): The target sum. Returns: str: \\"YES\\" if there exists a pair with the target_sum, otherwise \\"NO\\". seen = set() for number in arr: if target_sum - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\" # Example usage: # n = 5 # arr = [1, 2, 3, 4, 5] # target_sum = 9 # print(has_pair_with_sum(arr, target_sum)) # Output: \\"YES\\""},{"question":"Problem Statement: Write a function that extracts all possible substrings from a given string that are palindromes and sorts them first by their length and then lexicographically. The function should return the sorted list of palindromic substrings. Input format: A single string S containing only lowercase English letters. Output format: A list of unique palindromic substrings sorted by length and then lexicographically. SAMPLE INPUT abcbc SAMPLE OUTPUT [\'a\', \'b\', \'b\', \'c\', \'c\', \'cbc\', \'aba\'] Note: - Substrings are considered palindromic if they read the same forwards and backwards. - The sorted list should contain all unique palindromic substrings.","solution":"def find_all_palindromic_substrings(s): Returns a list of unique palindromic substrings sorted by their length and then lexicographically. def is_palindrome(sub): return sub == sub[::-1] unique_palindromes = set() n = len(s) # Generate all substrings and check if they are palindromes for start in range(n): for end in range(start+1, n+1): substring = s[start:end] if is_palindrome(substring): unique_palindromes.add(substring) # Sorting by length and then lexicographically sorted_palindromes = sorted(unique_palindromes, key=lambda x: (len(x), x)) return sorted_palindromes # Example usage: # print(find_all_palindromic_substrings(\\"abcbc\\"))"},{"question":"Alice is playing a game with a sequence of numbers. The game consists of performing several operations on the sequence: 1. Increment each element in the range `[l, r]` (1-based index) by a given value x. 2. Compute the maximum value over the range `[l, r]`. Initially, the sequence consists of `n` zeros. Your task is to support these operations efficiently. # Input - The first line contains two space-separated integers `n` and `m` (1 ≤ `n`, `m` ≤ 10^5) – the length of the sequence and the number of operations. - Each of the next `m` lines begins with an integer `t` (1 ≤ `t` ≤ 2), which represents the type of operation. - If `t = 1`, there will be three more integers `l`, `r`, `x` (1 ≤ `l` ≤ `r` ≤ `n`; 1 ≤ `x` ≤ 10^9), indicating that each element in the range `[l, r]` should be incremented by `x`. - If `t = 2`, there will be two more integers `l`, `r` (1 ≤ `l` ≤ `r` ≤ `n`), indicating that you should output the maximum value in the range `[l, r]`. # Output For each operation of type `2`, output a single integer – the maximum value in the specified range. # Example Input: ``` 5 4 1 1 3 4 1 2 5 3 2 1 5 2 2 4 ``` Output: ``` 7 7 ``` # Explanation: - After the first operation, the sequence becomes `[4, 4, 4, 0, 0]`. - After the second operation, the sequence becomes `[4, 7, 7, 3, 3]`. - The maximum value in the range `[1, 5]` is `7`. - The maximum value in the range `[2, 4]` is `7`.","solution":"class SegmentTree: This class implements a Segment Tree with lazy propagation for range updates and range maximum queries. def __init__(self, n): self.n = n self.data = [0] * (4 * n) self.lazy = [0] * (4 * n) def _propagate(self, idx, start, end): if self.lazy[idx] != 0: self.data[idx] += self.lazy[idx] if start != end: self.lazy[2 * idx + 1] += self.lazy[idx] self.lazy[2 * idx + 2] += self.lazy[idx] self.lazy[idx] = 0 def _range_update(self, idx, start, end, l, r, value): self._propagate(idx, start, end) if start > end or start > r or end < l: return if start >= l and end <= r: self.data[idx] += value if start != end: self.lazy[2 * idx + 1] += value self.lazy[2 * idx + 2] += value return mid = (start + end) // 2 self._range_update(2 * idx + 1, start, mid, l, r, value) self._range_update(2 * idx + 2, mid + 1, end, l, r, value) self.data[idx] = max(self.data[2 * idx + 1], self.data[2 * idx + 2]) def _range_max(self, idx, start, end, l, r): self._propagate(idx, start, end) if start > end or start > r or end < l: return -float(\'inf\') if start >= l and end <= r: return self.data[idx] mid = (start + end) // 2 left_max = self._range_max(2 * idx + 1, start, mid, l, r) right_max = self._range_max(2 * idx + 2, mid + 1, end, l, r) return max(left_max, right_max) def range_update(self, l, r, value): self._range_update(0, 0, self.n - 1, l - 1, r - 1, value) def range_max(self, l, r): return self._range_max(0, 0, self.n - 1, l - 1, r - 1) def execute_operations(n, m, operations): tree = SegmentTree(n) results = [] for operation in operations: if operation[0] == 1: _, l, r, x = operation tree.range_update(l, r, x) elif operation[0] == 2: _, l, r = operation result = tree.range_max(l, r) results.append(result) return results"},{"question":"Count Distinct Words Given a string S consisting of multiple words separated by spaces, determine the number of distinct words in the string. Input A single string S. Output Print the number of unique words in S. Constraints * S consists of at most 10^6 characters. * Words in S are non-empty sequences of lowercase letters separated by spaces. Sample Input 1 hello world Sample Output 1 2 Sample Input 2 one fish two fish red fish blue fish Sample Output 2 5 Sample Input 3 repeat repeat repeat Sample Output 3 1 Sample Input 4 unique words only once Sample Output 4 4 Example Input this is a test of distinct words counting Output 7","solution":"def count_distinct_words(s): Returns the number of distinct words in the input string s. words = s.split() distinct_words = set(words) return len(distinct_words)"},{"question":"Kayla is a software developer who needs to write a program that processes a string S of alphanumeric characters. She must perform a specified number of operations that either add characters to any position in S or remove characters from any position in S. Each operation can change the nature of string S significantly, and she wants to minimize the number of operations needed. Given the target string T and the initial string S, find the minimum number of operations required to transform S into T. The operations allowed are: 1. Insertion: Adding one character at any position in S. 2. Deletion: Removing one character from any position in S. 3. Substitution: Replacing one character in S with another character. Constraints * 1 leq |S|, |T| leq 10^3 * S and T consist of alphanumeric characters. Input Input is given from Standard Input in the following format: S T Output Print the minimum number of operations required to transform S into T. Examples Input kitten sitting Output 3 Input flaw lawn Output 2","solution":"def min_operations(S, T): Returns the minimum number of operations required to transform string S into string T. Allowed operations: insertion, deletion, substitution. m, n = len(S), len(T) # Create a table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # Base cases if i == 0: dp[i][j] = j # If S is empty, all characters of T need to be inserted elif j == 0: dp[i][j] = i # If T is empty, all characters of S need to be deleted # If last characters are the same, ignore the last char # and recur for the remaining substring elif S[i-1] == T[j-1]: dp[i][j] = dp[i-1][j-1] # If last characters are different, consider all possibilities # and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"Vanya has a collection of n cards, each with a unique integer ID. He loves to play with these cards by arranging them in a specific sequence. One day, he decides to sort his cards in ascending order based on their IDs. Being an orderly person, he wants to keep track of how many swaps it takes to sort the cards using the Bubble Sort algorithm. In Bubble Sort, given an array a of length n, the algorithm proceeds by traversing the array and repeatedly swapping adjacent elements if they are in the wrong order. The pass through the array is repeated until no swaps are needed. Vanya wants to know the minimum number of swaps required to sort his cards using Bubble Sort. However, he is not good at coding, so he asks for your help to determine this number. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of cards in Vanya\'s collection. The second line contains n space-separated integers representing the IDs of the cards. Each ID is a distinct integer and lies between 1 and 10000. Output Print the minimum number of swaps required to sort the cards using the Bubble Sort algorithm. Examples Input 4 4 3 2 1 Output 6 Input 5 2 3 8 6 1 Output 5 Note In the first sample, the sequence of swaps needed to sort the array [4, 3, 2, 1] is: swap positions 1 and 2, swap positions 2 and 3, swap positions 3 and 4, swap positions 1 and 2, swap positions 2 and 3, swap positions 1 and 2. This totals to 6 swaps. In the second sample, the sequence of swaps needed to sort the array [2, 3, 8, 6, 1] is: swap positions 4 and 5, swap positions 3 and 4, swap positions 2 and 3, swap positions 1 and 2, swap positions 3 and 4. This totals to 5 swaps.","solution":"def bubble_sort_min_swaps(n, card_ids): Returns the minimum number of swaps required to sort the cards using the Bubble Sort algorithm. swaps = 0 for i in range(n): for j in range(0, n - i - 1): if card_ids[j] > card_ids[j + 1]: card_ids[j], card_ids[j + 1] = card_ids[j + 1], card_ids[j] swaps += 1 return swaps"},{"question":"You think your coding skills are sharp? This problem will test your abilities with string manipulations and basic logic. You are given two integers N and x, and then an array B of N strings. Based on the value of x, you will perform an action on B. x Action Needed 1 Print the length of the longest string in B 2 Print \\"First Same\\" if the first character of the first string matches the first character of the second string, or Print \\"First Different\\" otherwise (without the quotes). 3 Concatenate the first three strings in B and print the result (assume these strings exist). 4 Print all strings in B that contain the character \'a\' 5 Print the sum of the lengths of all strings in B. 6 Reverse each string in B and print them as a space-separated string in one line. 7 a. Start from index i = 0; b. Move to the index defined by the length of the string at position i in B; c. If the current index i is outside the valid bound of [0..N-1], print \\"Out\\" and stop; d. Otherwise, repeat step b. -----Input----- The first line of the input contains an integer N and x (3 leq N leq 100000; 1 leq x leq 7). The next N lines contain one string each. -----Output----- For each test case, output the required answer based on the value of x. -----Scoring----- There are 20 hidden test cases that test various requirements of this problem. All 20 test cases will be tested. Each hidden test case is worth 5 points (the sample test cases below are worth 0 points). -----Examples----- Sample Input 1: 5 1 apple banana carrot date egg Sample Output 1: 6 Sample Input 2: 5 2 apple apricot carrot date egg Sample Output 2: First Same Sample Input 3: 5 3 apple banana carrot date egg Sample Output 3: applebananacarrot Sample Input 4: 5 4 apple banana carrot date egg Sample Output 4: apple banana carrot Sample Input 5: 5 5 apple banana carrot date egg Sample Output 5: 25 Sample Input 6: 5 6 apple banana carrot date egg Sample Output 6: elppa ananab torrag etad gge Sample Input 7: 4 7 apple banana carrot date Sample Output 7: Out","solution":"def perform_action(N, x, B): if x == 1: print(max(len(s) for s in B)) elif x == 2: if B[0][0] == B[1][0]: print(\\"First Same\\") else: print(\\"First Different\\") elif x == 3: print(B[0] + B[1] + B[2]) elif x == 4: for s in B: if \'a\' in s: print(s) elif x == 5: print(sum(len(s) for s in B)) elif x == 6: print(\' \'.join(s[::-1] for s in B)) elif x == 7: i = 0 while 0 <= i < N: i = len(B[i]) print(\\"Out\\")"},{"question":"You are given a grid with M rows and N columns, initially empty. Each cell in the grid can contain a unique positive integer. Your task is to fill this grid with numbers such that the sum of numbers in every row and every column remains the same. You are also required to fill the grid such that the numbers are in a strictly increasing order from left to right and top to bottom. Input The first line contains two integers M and N (1 ≤ M, N ≤ 1000), representing the number of rows and columns of the grid respectively. Output Output M lines, each containing N space-separated integers. Each line represents a row of the grid and the integers must be strictly increasing from left to right and top to bottom. Examples Input 2 2 Output 1 2 3 4 Input 3 4 Output 1 2 3 4 5 6 7 8 9 10 11 12 Note In the first example, the grid is 2x2. The sum of the numbers in each row (1+2 and 3+4) as well as in each column (1+3 and 2+4) is equal, and the numbers are in strictly increasing order. In the second example, the grid is 3x4. The sum of the numbers in each row (1+2+3+4, 5+6+7+8, and 9+10+11+12) as well as in each column (1+5+9, 2+6+10, 3+7+11, and 4+8+12) is equal, and the numbers are in strictly increasing order.","solution":"def generate_grid(M, N): Generate an MxN grid where the sum of the numbers in every row and every column remain the same, and the numbers are in strictly increasing order from left to right and top to bottom. grid = [] current = 1 for i in range(M): row = [] for j in range(N): row.append(current) current += 1 grid.append(row) return grid"},{"question":"You are given a string containing a mathematical expression containing single-digit positive integers, \'+\', \'-\', \'*\', and \'/\' operators, and no parentheses. Your task is to evaluate the expression and return the result as an integer. The operators have the standard precedence: \'*\' and \'/\' have higher precedence over \'+\' and \'-\', and the operations are performed from left to right. For example: Input: \\"3+2*2\\" Output: 7 Explanation: 2*2 = 4, 3+4 = 7 Input: \\" 3/2 \\" Output: 1 Explanation: 3/2 = 1 (integer division) Input: \\" 3+5 / 2 \\" Output: 5 Explanation: 5/2 = 2, 3+2 = 5 -----Input----- The no. of test cases (< 1000) A string containing the mathematical expression for each test case (length < 100). -----Output----- For each test case, print the evaluated result as an integer. -----Example----- Input: 3 3+2*2 3/2 3+5 / 2 Output: 7 1 5 By: Student Generated","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression and returns the result as an integer. Expression can contain single-digit positive integers, \'+\', \'-\', \'*\', and \'/\' operators. The operators have the standard precedence and no parentheses. # Removing spaces from the expression expression = expression.replace(\\" \\", \\"\\") stack = [] num = 0 operator = \'+\' for i in range(len(expression)): char = expression[i] if char.isdigit(): num = num * 10 + int(char) if char in \\"+-*/\\" or i == len(expression) - 1: if operator == \'+\': stack.append(num) elif operator == \'-\': stack.append(-num) elif operator == \'*\': stack[-1] = stack[-1] * num elif operator == \'/\': stack[-1] = int(stack[-1] / num) operator = char num = 0 return sum(stack) def process_expressions(expressions): Processes a list of expressions and returns the evaluated results as a list of integers. results = [] for expression in expressions: results.append(evaluate_expression(expression)) return results"},{"question":"=====Function Descriptions===== reshape The `reshape` tool gives a new shape to an array without changing its data. It creates a new array with the same data as the original but organized in a specified shape. import numpy array = numpy.array([1,2,3,4,5,6,7,8,9]) new_array = numpy.reshape(array, (3, 3)) print(new_array) #Output [[1 2 3] [4 5 6] [7 8 9]] flatten The `flatten` tool takes a multi-dimensional array and converts it to a one-dimensional array. import numpy array = numpy.array([[1,2,3], [4,5,6], [7,8,9]]) flattened_array = array.flatten() print(flattened_array) #Output [1 2 3 4 5 6 7 8 9] =====Problem Statement===== Your task is to first reshape an input array and then flatten it to a one-dimensional array. =====Input Format===== The first line contains two space separated integers, N and M. The second line contains the elements of the N*M array in a single line (row-wise). =====Output Format===== Print the flattened array. =====Sample Input===== 2 3 1 2 3 4 5 6 =====Sample Output===== [1 2 3 4 5 6] =====Explanation===== The input describes a 2x3 array that reads as: [[1 2 3] [4 5 6]] After reshaping and then flattening the array, the output would be: [1 2 3 4 5 6]","solution":"import numpy as np def reshape_and_flatten(n, m, elements): Reshapes a list of elements into an n x m array and then flattens it to a 1-dimensional array. Parameters: n (int): number of rows. m (int): number of columns. elements (list of int): the elements of the array. Returns: numpy.ndarray: the flattened array. array = np.array(elements) reshaped_array = np.reshape(array, (n, m)) flattened_array = reshaped_array.flatten() return flattened_array"},{"question":"A group of friends decided to create an online platform for competitive programming contests. They need a tool to manage the scoreboard for their competitions. Each contest involves several problems, and each participant is scored based on the problems they solve and the time taken to solve them. The platform should be able to maintain and sort the scoreboard in real-time as participants submit their solutions. Each submission from a participant consists of the time at which the submission was made and whether the solution was correct or incorrect. If the solution is correct, the participant earns points based on the difficulty of the problem and the time taken to solve it. If the solution is incorrect, the participant is penalized with a time penalty. The total score of a participant is the sum of points for all correctly solved problems minus any time penalties. Your task is to implement the mechanism to update and display the scoreboard after each submission. -----Input----- The first line contains two integers, p (1 leq p leq 100), the number of participants, and q (1 leq q leq 10), the number of problems. The second line contains q integers, where the i-th integer represents the difficulty points of the i-th problem. Each difficulty point is between 1 and 1000. The third line contains one integer r (1 leq r leq 10000), the number of submissions. The next r lines each describe a submission in the format: participant_id problem_id submission_time status. - participant_id is an integer between 1 and p. - problem_id is an integer between 1 and q. - submission_time is an integer representing the minutes from the start of the contest. - status is \\"correct\\" if the solution was correct or \\"incorrect\\" if the solution was incorrect. -----Output----- Print the scoreboard sorted by the total score in descending order. If two participants have the same total score, sort them by the earliest submission time that contributed to their score. If still tied, sort by participant_id in ascending order. For each participant, display three values: participant_id, total_score, and the earliest submission time that contributed to the score. -----Examples----- Sample Input: 3 3 500 300 200 6 1 1 30 correct 2 2 45 correct 3 3 50 correct 1 1 60 incorrect 2 2 70 incorrect 3 3 75 correct Sample Output: 1 500 30 2 300 45 3 200 50","solution":"def update_scoreboard(p, q, difficulties, submissions): # Initialize participants info participants = {i: {\'total_score\': 0, \'penalties\': 0, \'first_correct_submission\': None, \'submissions\': []} for i in range(1, p + 1)} for submission in submissions: participant_id, problem_id, submission_time, status = submission # If the problem is solved correctly for the first time by the participant if status == \'correct\' and not any(sub for sub in participants[participant_id][\'submissions\'] if sub[\'problem_id\'] == problem_id and sub[\'status\'] == \'correct\'): participants[participant_id][\'total_score\'] += difficulties[problem_id - 1] participants[participant_id][\'penalties\'] += submission_time if not participants[participant_id][\'first_correct_submission\'] or submission_time < participants[participant_id][\'first_correct_submission\']: participants[participant_id][\'first_correct_submission\'] = submission_time # If the problem is solved incorrectly, add penalty elif status == \'incorrect\': # Assuming each incorrect submission adds a fixed penalty for simplicity participants[participant_id][\'penalties\'] += 20 participants[participant_id][\'submissions\'].append({ \'problem_id\': problem_id, \'submission_time\': submission_time, \'status\': status }) # Sorting logic sorted_participants = sorted(participants.items(), key=lambda item: ( item[1][\'total_score\'], -item[1][\'first_correct_submission\'] if item[1][\'first_correct_submission\'] else float(\'inf\'), -item[0] ), reverse=True) # Prepare results result = [] for participant_id, info in sorted_participants: score = info[\'total_score\'] penalties = info[\'penalties\'] first_solver_time = info[\'first_correct_submission\'] if info[\'first_correct_submission\'] else 0 result.append((participant_id, score, first_solver_time)) return result"},{"question":"You are given a two-dimensional grid representing a garden. Each cell of the grid contains one of the following characters: - \'.\' representing bare ground, - \'P\' representing a planted seed, - \'#\' representing a rock. A seed can only grow into a plant if there is an empty space (bare ground) directly adjacent (north, south, east, or west) to the seed. Rocks prevent the seed from growing in that direction. Determine which seeds can grow into plants based on the given conditions and return a new garden grid where the seeds that can grow into plants are marked by \'G\' and the rest of the cells remain the same. -----Input----- The first line contains two integers n and m (1 leq n, m leq 50), representing the number of rows and columns in the garden grid. The next n lines each contain exactly m characters, representing the garden grid. -----Output----- Output the modified garden grid. -----Examples----- Sample Input 1: 5 5 ..... ..P.. .#. ..P.. ..... Sample Output 1: ..... ..G.. .#. ..G.. ..... Sample Input 2: 4 6 ....P. .... P..P.. #.P.#. Sample Output 2: ....G. .... G..G.. #.G.#.","solution":"def garden_growth(n, m, garden): Determine which seeds can grow into plants based on the given conditions and returns a new garden grid where \'P\' can grow into \'G\'. Parameters: n (int): Number of rows in the grid m (int): Number of columns in the grid garden (list of str): The initial garden grid Returns: list of str: The modified garden grid def can_seed_grow(i, j): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and garden[ni][nj] == \'.\': return True return False new_garden = [] for i in range(n): new_row = [] for j in range(m): if garden[i][j] == \'P\' and can_seed_grow(i, j): new_row.append(\'G\') else: new_row.append(garden[i][j]) new_garden.append(\'\'.join(new_row)) return new_garden"},{"question":"Implement a function that takes a string consisting of lowercase English letters and returns a new string in which each character in the original string is replaced by its \\"mirror\\" character in the alphabet. The \\"mirror\\" character for a particular character is defined as the character which is at the same distance from the end of the alphabet as the original character is from the beginning. For example: - The mirror of \'a\' is \'z\'. - The mirror of \'b\' is \'y\'. - The mirror of \'c\' is \'x\'. - And so on... Write a function that performs this transformation. Examples: ```python mirror_string(\\"abc\\") -> \\"zyx\\" mirror_string(\\"hello\\") -> \\"svool\\" mirror_string(\\"xyz\\") -> \\"cba\\" ``` Constraints: - The input string will only contain lowercase English alphabets. - The input string will have at least 1 character and at most 100 characters. - The characters in the mirrored string must retain the order from the original string. Note: - You may assume that the input strings are valid as per the above constraints.","solution":"def mirror_string(s): Returns a new string where each character in the original string is replaced by its \\"mirror\\" character in the alphabet. mirrored = [] for char in s: mirrored_char = chr(ord(\'a\') + (ord(\'z\') - ord(char))) mirrored.append(mirrored_char) return \'\'.join(mirrored)"},{"question":"Consider a string S of length n consisting of lowercase English letters. We define a palindrome as a string that reads the same backward as forward. You are required to answer q queries each of the form texttt{(l, r)}, where (1 leq l leq r leq n). For each query, you need to determine if the substring S[l..r] can be rearranged to form a palindrome. Specifically, you need to check if there exists a permutation of the substring S[l..r] that is a palindrome. -----Input----- The first line contains an integer t (1 le t le 10) — the number of test cases. The descriptions of the t test cases follow. The first line of each test case contains two integers n and q (1 le n, q le 10^5) — the length of the string and the number of queries. The second line contains the string S. The next q lines each contain two integers l and r (1 le l le r le n) — representing the query to check if the substring S[l..r] can be rearranged to form a palindrome. -----Output----- For each query within each test case, print \\"YES\\" if the substring S[l..r] can be rearranged to form a palindrome, otherwise, print \\"NO\\". -----Examples----- Input 2 7 3 aabbcce 1 7 2 4 1 4 5 1 abcde 1 5 Output YES YES YES NO -----Note----- In the first test case: - For the query (1, 7), the substring is \\"aabbcce\\". This can be rearranged to form \\"abccba\\" with one leftover letter \\"e\\", so it can form a palindrome. - For the query (2, 4), the substring is \\"abb”. This can be rearranged to form \\"bab\\", which is a palindrome. - For the query (1, 4), the substring is \\"aabb”. This can be rearranged to form \\"abba\\", which is a palindrome. In the second test case: - For the query (1, 5), the substring is \\"abcde\\". This cannot be rearranged to form a palindrome, hence the output is \\"NO\\". To solve the problem efficiently, you may need to use techniques that preprocess the string to enable quick palindrome checks for different substrings.","solution":"def can_form_palindrome(s, l, r): This function checks if a substring s[l:r+1] can be rearranged to form a palindrome. char_count = [0] * 26 for i in range(l-1, r): char_count[ord(s[i]) - ord(\'a\')] += 1 odd_count = sum(1 for count in char_count if count % 2 != 0) return odd_count <= 1 def process_test_cases(t, test_cases): results = [] for test_case in test_cases: n, q = test_case[\\"n\\"], test_case[\\"q\\"] s = test_case[\\"s\\"] queries = test_case[\\"queries\\"] test_results = [] for (l, r) in queries: if can_form_palindrome(s, l, r): test_results.append(\\"YES\\") else: test_results.append(\\"NO\\") results.append(test_results) return results"},{"question":"Write a function that evaluates whether a given integer is a prime number or not. The function should return `True` if the number is prime and `False` otherwise. # Example ```python is_prime(10) == False is_prime(7) == True ``` A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. For more information, visit: https://en.wikipedia.org/wiki/Prime_number","solution":"def is_prime(n): Evaluates whether a given integer n is a prime number. Parameters: n (int): The integer to be checked. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"A cyclist is training on a circular track. The track has a circumference of C meters. The cyclist starts at a certain point on the track and cycles continuously for N meters. Calculate and output the position of the cyclist on the track after cycling N meters, where the starting point is considered as position 0 and the positions are measured in meters from the starting point. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input containing two space-separated integers N and C — the distance cycled and the circumference of the track. ------ Output Format ------ For each test case, output in a single line, the position of the cyclist on the track after cycling N meters. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N,C ≤ 1000 ----- Sample Input 1 ------ 3 100 50 75 40 200 77 ----- Sample Output 1 ------ 0 35 46 ----- explanation 1 ------ Test case 1: The cyclist cycles 100 meters on a track with circumference 50 meters. After 50 meters, the cyclist completes one full loop and is back at the starting point. Since the remaining 50 meters also completes another loop, the cyclist ends up back at position 0. Test case 2: The cyclist cycles 75 meters on a track with circumference 40 meters. After cycling 40 meters, the cyclist completes one full loop and is back to the starting point. He then cycles 35 more meters and hence ends up at position 35. Test case 3: The cyclist cycles 200 meters on a track with circumference 77 meters. After completing two full loops (77 * 2 = 154 meters), the remaining distance is 200 - 154 = 46 meters. Thus, the cyclist ends up at position 46.","solution":"def cyclist_position(T, test_cases): results = [] for N, C in test_cases: position = N % C results.append(position) return results"},{"question":"You are given an n x n grid, where each cell contains either a \'.\' or a \'#\'. The \'.\' character represents a walkable cell, whereas the \'#\' character represents an obstacle. The task is to find the minimum number of steps required to move from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1), moving only through walkable cells. You can move up, down, left, or right. If there is no possible path, return -1. Input The first line contains a single integer n, which represents the size of the grid (2 ≤ n ≤ 100). The next n lines each contain n characters, which represent the grid. Output Output a single integer representing the minimum number of steps required. If there is no possible path from the top-left corner to the bottom-right corner, output -1. Example Input 5 ..... .#. ....# .#. ..... Output 8 Explanation The optimal path is shown below with the minimum number of steps as 8: Start: (0, 0) (0, 0) -> (1, 0) (1, 0) -> (2, 0) (2, 0) -> (2, 1) (2, 1) -> (2, 2) (2, 2) -> (2, 3) (2, 3) -> (2, 4) (2, 4) -> (3, 4) (3, 4) -> (4, 4) If there is no path available from (0, 0) to (n-1, n-1), then you must return -1.","solution":"from collections import deque def min_steps_to_exit(grid): n = len(grid) if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == n-1 and y == n-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"At his new job, Nikolai has been tasked with optimizing storage space in a warehouse. He was given a list of containers, each with a certain weight. In order to ensure efficiency, the containers need to be arranged so that they can be quickly accessed. A good way to improve access efficiency is to sort the containers. However, Nikolai wants to use a customized sorting algorithm. His algorithm sorts the even-weighted containers in ascending order and the odd-weighted containers in descending order. The even weights should appear first in the sorted list, followed by the odd weights. Help Nikolai by writing a program to sort the list of containers according to his algorithm. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of containers. The second line contains n integers separated by space w1, w2, ..., wn — the weights of the containers (0 ≤ wi ≤ 10000). Output Output n integers — the weights of the containers sorted according to Nikolai\'s criteria. Examples Input 5 4 3 1 2 6 Output 2 4 6 3 1 Input 3 9 7 5 Output 9 7 5 Input 6 5 3 8 7 2 6 Output 2 6 8 7 5 3","solution":"def sort_containers(n, weights): Sorts the containers by arranging the even weights in ascending order and the odd weights in descending order, placing evens before odds. Args: n (int): Number of containers. weights (list): List of container weights. Returns: list: Sorted list of weights based on the described criteria. evens = sorted([w for w in weights if w % 2 == 0]) odds = sorted([w for w in weights if w % 2 != 0], reverse=True) return evens + odds"},{"question":"A group of researchers work on developing algorithms for robotics and have come across a problem when training their robots to navigate a grid. The robots need to navigate from a starting position to a target position while avoiding obstacles. To do so, the researchers designed a set of controllable commands that move the robot in one of four possible directions: up, down, left, or right. The robots receive a sequence of command characters, where: - \'U\' moves the robot up (reduces the row index by 1) - \'D\' moves the robot down (increases the row index by 1) - \'L\' moves the robot left (decreases the column index by 1) - \'R\' moves the robot right (increases the column index by 1) The researchers would like to determine the minimum number of moves required for a robot to reach a target position from the start position if it can reach it. If it\'s impossible, they should be informed accordingly. -----Input----- The first line of input contains two integers n and m, representing the number of rows and columns of the grid, respectively (1 ≤ n, m ≤ 1000). The second line contains two integers sr and sc, representing the starting row and column of the robot, respectively (1 ≤ sr ≤ n, 1 ≤ sc ≤ m). The third line contains two integers tr and tc, representing the target row and column the robot needs to reach, respectively (1 ≤ tr ≤ n, 1 ≤ tc ≤ m). The next n lines of input each contain m characters (either \'.\' for open space or \'#\' for an obstacle), representing the grid. -----Output----- Output a single line containing the minimum number of moves required to reach the target position from the starting position, or -1 if it is impossible. -----Example----- Input 5 5 1 1 5 5 ..... .#.#. ..... .#.#. ..... Output 8 Input 3 3 1 1 3 3 ... .#. ... Output 4 Input 4 4 1 1 4 4 #..# #..# Output -1 -----Note----- In the first example, the robot can move along the path (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (4,3) -> (4,4) -> (5,4) -> (5,5) with a minimum of 8 moves. In the second example, the robot can move along the path (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) with a minimum of 4 moves. In the third example, there\'s no way for the robot to reach the target position because it\'s surrounded by obstacles, so the output is -1.","solution":"from collections import deque def min_moves_in_grid(n, m, sr, sc, tr, tc, grid): Function to find the minimum number of moves for the robot to reach the target position. Use BFS algorithm to find shortest path in an unweighted grid. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. sr (int): Starting row position (1-based index). sc (int): Starting column position (1-based index). tr (int): Target row position (1-based index). tc (int): Target column position (1-based index). grid (list of str): List of strings representing the grid layout with \'.\' for free space and \'#\' for obstacles. Returns: int: Minimum number of moves to reach the target or -1 if it is impossible. sr, sc, tr, tc = sr-1, sc-1, tr-1, tc-1 # Convert to 0-based index directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(sr, sc, 0)]) # (row, col, distance) visited = set() visited.add((sr, sc)) while queue: r, c, dist = queue.popleft() if r == tr and c == tc: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == \'.\': queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) return -1"},{"question":"In a large library, there are n books arranged in a single row. Each book has a unique ISBN number represented by an integer. A self-service kiosk is available in the library to help users find and borrow books. A user can perform two types of operations on the row of books: 1. **pick x**: The user picks up the book with ISBN number x and removes it from the row. 2. **place x y**: The user places a book with ISBN number x immediately after a book with ISBN number y. Given an initial sequence of n ISBN numbers of the books in the row and a series of q operations, determine the final sequence of books after performing all the operations. -----Input----- The first line contains two integers n and q (1 ≤ n, q ≤ 1000) — the number of books and the number of operations, respectively. The second line contains n distinct integers representing the ISBN numbers of the books in their initial order in the row. The following q lines describe the operations. Each operation is in one of the following formats: - \\"pick x\\" where (1 ≤ x ≤ 10^9) — indicates the user picks up the book with ISBN number x. - \\"place x y\\" where (1 ≤ x, y ≤ 10^9) — indicates the user places the book with ISBN number x immediately after the book with ISBN number y. It is guaranteed that all operations are valid, i.e., a \\"pick x\\" operation will only be given if there is a book with ISBN number x in the row, and a \\"place x y\\" operation will only be given if there is a book with ISBN number y already in the row and the book with ISBN number x was picked earlier. -----Output----- Print the final sequence of ISBN numbers of the books in the row after all the operations. -----Examples----- Input 5 3 101 102 103 104 105 pick 103 place 103 102 pick 105 Output 101 102 103 104 Input 4 2 210 220 230 240 pick 230 place 230 240 Output 210 220 240 230 -----Note----- In the first example: - After the first operation \\"pick 103\\", the sequence becomes 101 102 104 105. - After the second operation \\"place 103 102\\", the sequence becomes 101 102 103 104 105. - After the third operation \\"pick 105\\", the sequence becomes 101 102 103 104. In the second example: - After the first operation \\"pick 230\\", the sequence becomes 210 220 240. - After the second operation \\"place 230 240\\", the sequence becomes 210 220 240 230.","solution":"def process_operations(n, q, initial_sequence, operations): Process the operations on the sequence of books and return the final sequence. Args: n (int): Number of books initially in the row. q (int): Number of operations. initial_sequence (list of int): The ISBN numbers of the books in initial order. operations (list of str): The operations to be performed. Returns: list of int: The final sequence of ISBN numbers of the books in the row. # Convert the initial_sequence into a deque for efficient insertion and deletion from collections import deque book_row = deque(initial_sequence) picked_books = {} for operation in operations: parts = operation.split() if parts[0] == \\"pick\\": x = int(parts[1]) book_row.remove(x) picked_books[x] = True elif parts[0] == \\"place\\": x = int(parts[1]) y = int(parts[2]) idx = book_row.index(y) book_row.insert(idx + 1, x) del picked_books[x] return list(book_row)"},{"question":"You are tasked with creating a program that generates a \\"diamond star pattern\\" given an integer input. The pattern should have the form of a diamond shape made from asterisks (*). * The input will be a positive integer n. * The output should be a diamond shape where the middle row (widest part of the diamond) contains 2n-1 asterisks. * The rows above and below should symmetrically reduce in the number of asterisks by two for each row until the top and bottom have just one asterisk. Input A single integer n (1 ≤ n ≤ 100) is given which represents the half-height of the diamond. Output Output the diamond pattern with 2n-1 rows where the first row has 1 asterisk, the widest row has 2n-1 asterisks, and the pattern is symmetrical about the center row. Ensure that the diamond is centered by padding each line with spaces. Example Input 3 Output * *** ***** *** * Input 5 Output * *** ***** ******* ********* ******* ***** *** *","solution":"def diamond_star_pattern(n): Generates a diamond shaped star pattern with the max width being 2n-1. Args: n (int): The half-height of the diamond. Returns: str: The diamond star pattern. if n < 1 or n > 100: raise ValueError(\\"Input must be a positive integer between 1 and 100.\\") diamond = [] for i in range(n): spaces = \' \' * (n - i - 1) stars = \'*\' * (2 * i + 1) diamond.append(spaces + stars) for i in range(n - 2, -1, -1): spaces = \' \' * (n - i - 1) stars = \'*\' * (2 * i + 1) diamond.append(spaces + stars) return \'n\'.join(diamond)"},{"question":"You are given a string S consisting of lowercase English letters. You can perform at most K operations on this string. In one operation, you can choose any character in the string and change it to any other lowercase English letter. Your task is to find the length of the longest substring containing the same character after performing at most K operations. ------ Input ------ The first line contains a single integer T representing the number of test cases. Each of the next T lines contains a string S followed by an integer K. ------ Output ------ For each test case, output a single line containing the length of the longest substring containing the same character after at most K operations. ------ Constraints ------ 10 points: 1 ≤ T ≤ 300 1 ≤ |S| ≤ 100 0 ≤ K ≤ 100 30 points: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 500 0 ≤ K ≤ 500 60 points: 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10000 0 ≤ K ≤ 10000 ------ Example ------ Input: 3 aabb 2 abcde 1 aaabbbcc 3 Output: 4 2 6","solution":"def longest_substring_same_char_with_k_operations(s, k): def max_repeating_char_with_k_ops(s, k, c): max_len = 0 left = 0 count = 0 for right in range(len(s)): if s[right] != c: count += 1 while count > k: if s[left] != c: count -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len max_length = 0 for char in set(s): max_length = max(max_length, max_repeating_char_with_k_ops(s, k, char)) return max_length def process_test_cases(test_cases): result = [] for s, k in test_cases: result.append(longest_substring_same_char_with_k_operations(s, k)) return result"},{"question":"Task Write a function that takes a string `s` and returns the longest substring containing only unique characters. # Example For `s = \\"abcabcbb\\"`, the output should be `3`. (The substring is: \\"abc\\") For `s = \\"bbbbb\\"`, the output should be `1`. (The substring is: \\"b\\") For `s = \\"pwwkew\\"`, the output should be `3`. (The substring is: \\"wke\\") # Input/Output - `[input]` string `s` A non-empty string consisting of alphanumeric characters. - `[output]` an integer The length of the longest substring with all unique characters.","solution":"def longest_unique_substtr(s): Returns the length of the longest substring with all unique characters. Args: s (str): A non-empty string. Returns: int: The length of the longest substring with all unique characters. n = len(s) if n == 0: return 0 char_index_map = {} max_len = 0 start = 0 # Start index of current window for end in range(n): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Write a function that takes in two integer arrays, `arr1` and `arr2`, and returns an array containing the elements that are present in both arrays (the intersection). The resulting array should be sorted in ascending order. Ex: find_intersection([4, 9, 5], [9, 4, 9, 8, 4]) -> [4, 9] Both arrays may contain duplicate elements, but the intersection should contain only unique elements sorted in ascending order. If there is no common element, return an empty array. You can assume that the input arrays will contain integer values only.","solution":"def find_intersection(arr1, arr2): Returns an array containing the unique elements that are present in both arr1 and arr2, sorted in ascending order. # Convert both arrays to sets to find the intersection. set1 = set(arr1) set2 = set(arr2) intersection = set1.intersection(set2) # Convert the intersection to a sorted list and return. return sorted(list(intersection))"},{"question":"Julie is trying to find the longest common substring between two given strings. A substring is a contiguous sequence of characters within a string. Input format: The first line contains a single integer T, the number of test cases. The next 2*T lines contain two strings each, one pair per test case. Output format: For each test case, print the length of the longest common substring. Constraints: 1 ≤ T ≤ 10 1 ≤ Length of each string ≤ 1000 SAMPLE INPUT 2 abcdxyz xyzabcd abcde fghij SAMPLE OUTPUT 4 0","solution":"def longest_common_substring_length(s1, s2): Returns the length of the longest common substring between s1 and s2. m, n = len(s1), len(s2) # Create a table to store lengths of longest common suffixes of substrings dp = [[0] * (n + 1) for _ in range(m + 1)] longest = 0 for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 longest = max(longest, dp[i][j]) else: dp[i][j] = 0 return longest def find_longest_common_substrings(test_cases): For each pair of strings in the test cases, prints the length of the longest common substring. results = [] for s1, s2 in test_cases: results.append(longest_common_substring_length(s1, s2)) return results"},{"question":"Implement a function `longest_increasing_subsequence(arr)` that takes a list of integers `arr` and returns the length of the longest increasing subsequence that can be found in the list. A subsequence is a sequence derived by deleting some or none of the elements of the array without changing the order of the remaining elements. An increasing subsequence means that the elements of the subsequence are in sorted order. Examples: ```python longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 # [2, 3, 7, 101] longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 # [0, 1, 2, 3] longest_increasing_subsequence([7, 7, 7, 7, 7, 7]) == 1 # [7] ``` Features of the random tests for `longest_increasing_subsequence(arr)`: ``` number of Tests = 100 maximum array length = 1e5 maximum value for array elements = 1e9 ``` You do not have to check the array contents, the elements are always non-negative integers. Good luck, and happy coding!","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the list `arr`. if not arr: return 0 dp = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Zara loves playing word games. One day, she came up with a new game involving strings and their substrings. Problem Given a string, determine the minimum number of substrings you need to create from it so that each substring is a palindrome. A string is called a palindrome if it reads the same backward as forward. You need to write a function that takes a string and returns the minimum number of palindromic substrings. input A single string ( S ) is given on the first line. The string ( S ) consists of lowercase English letters only, and its length ( (1 leq |S| leq 1000) ). output Output the minimum number of palindromic substrings needed to break down the given string. Sample input/output Input 1: ``` abacc ``` Output 1: ``` 2 ``` Explanation: The given string can be divided into substrings ( \\"aba\\" ) and ( \\"cc\\" ), both of which are palindromes. Input 2: ``` aab ``` Output 2: ``` 2 ``` Explanation: The given string can be divided into substrings ( \\"aa\\" ) and ( \\"b\\" ), both of which are palindromes.","solution":"def min_palindromic_substrings(s): n = len(s) # Memoization table to store the minimum cuts needed for substring s[i:j+1] dp = [[0] * n for _ in range(n)] # Table to store whether s[i:j+1] is palindrome palindrome = [[False] * n for _ in range(n)] # Every single character is a palindrome for i in range(n): palindrome[i][i] = True for length in range(2, n + 1): # substring lengths from 2 to n for i in range(n - length + 1): j = i + length - 1 if length == 2: palindrome[i][j] = (s[i] == s[j]) else: palindrome[i][j] = (s[i] == s[j] and palindrome[i + 1][j - 1]) for i in range(n): if palindrome[0][i]: dp[0][i] = 1 else: dp[0][i] = float(\'inf\') for j in range(i): if palindrome[j + 1][i] and dp[0][j] + 1 < dp[0][i]: dp[0][i] = dp[0][j] + 1 return dp[0][n - 1]"},{"question":"The city of Springfield is organizing a marathon event on a looped course. The course is laid out as a sequence of N checkpoints in a circular array (i.e., checkpoint 1 follows checkpoint N, and checkpoint N leads to checkpoint 1). Each checkpoint has a unique difficulty level, represented as an integer d_i where d_i is the difficulty of the ith checkpoint. The marathon organizers have a particular set of constraints: they want to ensure that no segment of the race course (sequence of consecutive checkpoints) exceeds a given difficulty threshold T. A segment is defined as any sequence of consecutive checkpoints, including segments that overlap the end and beginning of the circular course. Your task is to determine the minimum length of any segment whose total difficulty exceeds this threshold T. If no such segment exists, return -1. -----Input----- The first line of input consists of two integers N and T, separated by a space (2 leq N leq 100000; 1 leq T leq 10^9): the number of checkpoints and the difficulty threshold. N lines follow. The ith such line (starting at i=1) contains an integer d_i (1 leq d_i leq 10^6), the difficulty of the ith checkpoint. -----Output----- Print a single integer: the minimum length of any segment whose total difficulty exceeds T. If no such segment exists, print -1. -----Examples----- Sample Input: 5 8 2 3 6 1 4 Sample Output: 2 Explanation: The segments of length 2 with total difficulty exceeding T=8 are: - Checkpoints 2-3 with difficulty 3+6=9 - Checkpoints 5-1 with difficulty 4+2=6 (does not exceed T) - Checkpoints 1-2 with difficulty 2+3=5 (does not exceed T) - Checkpoints 3-4 with difficulty 6+1=7 (does not exceed T) Thus, the minimum length of the segment that exceeds the threshold is 2.","solution":"def min_length_segment(N, T, difficulties): # Extend the difficulties to handle circular nature extended_difficulties = difficulties + difficulties def exceeds_threshold(length): current_sum = sum(extended_difficulties[:length]) if current_sum > T: return True for i in range(1, N): current_sum += extended_difficulties[i + length - 1] - extended_difficulties[i - 1] if current_sum > T: return True return False for length in range(1, N + 1): if exceeds_threshold(length): return length return -1 # For example input N = 5 T = 8 difficulties = [2, 3, 6, 1, 4] print(min_length_segment(N, T, difficulties)) # Output: 2"},{"question":"Marie is an avid reader and a fan of classical literature. She has recently acquired a collection of literary texts in various languages. Being a multilingual person, Marie loves to analyze the lengths of each word within sentences in these literary texts. To assist her in this study, she needs a program that can find all unique words in a given sentence and output the number of characters in each word. Given a sentence, the task is to write a program that outputs each unique word from the sentence along with its length. Words are considered to be sequences of non-space characters, and they are case-insensitive, meaning \\"Apple\\", \\"apple\\", and \\"APPLE\\" are all considered the same word. The words should be output in the order they first appear in the sentence, preserving their original case. # Input The first line of the input contains a single positive integer N, denoting the number of test cases. Then follow N test cases. Each test case consists of one line with a sentence of up to 1000 characters. The sentences involve only space-separated words formed by alphabetic characters (A-Z, a-z). # Output For each test case, output all unique words of the sentence along with their length, one per line in the format: `word(length)` # Example Input ``` 3 Alice loves reading books Chaos and order are not exclusive Marie reads literary works every day ``` Output ``` Alice(5) loves(5) reading(7) books(5) Chaos(5) and(3) order(5) are(3) not(3) exclusive(9) Marie(5) reads(5) literary(8) works(5) every(5) day(3) ```","solution":"def word_lengths(sentences): This function takes a list of sentences and returns a list of lists containing words with their respective lengths based on the specifications of the problem. Each sublist corresponds to the unique words and lengths for a given sentence. results = [] for sentence in sentences: words = sentence.split() seen = set() result = [] for word in words: lower_word = word.lower() if lower_word not in seen: seen.add(lower_word) result.append(f\\"{word}({len(word)})\\") results.append(result) return results def read_input(input_string): This function converts the input string into the format required by the primary function. lines = input_string.strip().split(\'n\') num_cases = int(lines[0]) test_cases = lines[1:1+num_cases] return test_cases def format_output(results): This function formats the results for display. output = [] for result in results: output.append(\\"n\\".join(result)) return \\"n\\".join(output)"},{"question":"Consider a grid of _N x N_ where each cell has a certain altitude. An island is defined as a group of connected cells having the same altitude, connected either vertically or horizontally. The goal is to determine the number of distinct islands in the grid. Input Format The first line contains an integer N. Each of the next N lines contains N integers representing the altitude of each cell in the grid. Constraints 1 leq N leq 20 Output Format Print a single integer, the number of distinct islands. Sample Input 0 3 1 2 2 3 1 2 1 1 1 Sample Output 0 4 Explanation 0 In the first example, there are four distinct islands: - a single cell at (0,0) with altitude 1, - a group of two connected cells (0,1) and (0,2) with altitude 2, - a single cell at (1,0) with altitude 3, - and a group of three connected cells (1,1), (2,0), and (2,1) with altitude 1. Sample Input 1 2 1 1 1 1 Sample Output 1 1 Explanation 1 In the second example, all the cells have the same altitude and form a single island.","solution":"def count_islands(grid): Counts the number of distinct islands in the grid. An island is defined as a group of connected cells having the same altitude, connected either vertically or horizontally. if not grid: return 0 N = len(grid) visited = [[False] * N for _ in range(N)] def dfs(x, y, altitude): if x < 0 or x >= N or y < 0 or y >= N or visited[x][y] or grid[x][y] != altitude: return visited[x][y] = True dfs(x + 1, y, altitude) dfs(x - 1, y, altitude) dfs(x, y + 1, altitude) dfs(x, y - 1, altitude) count = 0 for i in range(N): for j in range(N): if not visited[i][j]: dfs(i, j, grid[i][j]) count += 1 return count"},{"question":"In a certain city, the mayor wants to renovate a series of landmark sites and has assigned a budget for each site. The goal is to maximize the number of landmarks renovated without exceeding the total available budget. You need to determine the maximum number of landmarks that can be renovated with the given budget. -----Input----- - The first line contains two integers N and B (1 leq N leq 10^5, 1 leq B leq 10^9), denoting the number of landmarks and the total available budget respectively. - The second line contains N positive integers C_i (1 leq C_i leq 10^6), where C_i represents the renovation cost for the i^{th} landmark. -----Output----- The first and only line of output should contain one integer, the maximum number of landmarks that can be renovated. -----Example----- Sample Input 1: 5 100 20 10 30 50 40 Sample Output 1: 4 Sample Input 2: 4 50 20 30 40 50 Sample Output 2: 2","solution":"def max_landmarks(N, B, costs): Returns the maximum number of landmarks that can be renovated with the given budget. # Sort the costs in ascending order costs.sort() # Initialize the count of landmarks and the current total cost count = 0 total_cost = 0 # Iterate over the sorted costs for cost in costs: if total_cost + cost <= B: total_cost += cost count += 1 else: break return count"},{"question":"Write a function that takes an integer as input and returns a string representation of the number with commas as thousands separators. For example: ``` 1000 -> \\"1,000\\" 123456789 -> \\"123,456,789\\" 12 -> \\"12\\" ``` Note: * Do not use any built-in format functions to solve this problem. * You can assume the input number will always be a positive integer. Test cases will be provided to validate your solution.","solution":"def comma_separated_number(n): Returns the string representation of the number with commas as thousands separators. number_str = str(n) length = len(number_str) if length <= 3: return number_str result = [] counter = 0 for i in range(length - 1, -1, -1): result.append(number_str[i]) counter += 1 if counter % 3 == 0 and i != 0: result.append(\',\') return \'\'.join(result[::-1])"},{"question":"You are organizing a reading club and need to distribute a set of books among members fairly. Each member should get at least one book, and all books must be distributed. The goal is to minimize the number of members who receive more books than others. There are n books to be distributed to k members. The i-th book has a specific number of pages, denoted by p_i. You are to determine, after fairly distributing books (where fairness means that each member should get either floor(n/k) or ceiling(n/k) books), what the maximum number of books any single member receives is. -----Input----- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100). The second line contains n integers: p_1, p_2, ..., p_{n} (1 ≤ p_i ≤ 1000). -----Output----- Print a single integer — the maximum number of books any single member receives after fair distribution. -----Examples----- Input 7 3 2 3 4 5 6 7 8 Output 3 Input 5 2 10 20 30 40 50 Output 3","solution":"def max_books_per_member(n, k, pages): Returns the maximum number of books any single member receives after fair distribution. Parameters: n (int): The total number of books. k (int): The total number of members. pages (list of int): The number of pages in each book. Returns: int: The maximum number of books any single member receives. # Each member gets either floor(n/k) or ceiling(n/k) books return (n + k - 1) // k"},{"question":"A popular mobile game developer is currently designing a new puzzle game. The game contains a grid of M × N cells. Each cell can either be empty or contain a specific type of gem. The developer wants to create a feature where players can collect the largest possible number of consecutive gems of the same type from any starting cell in the grid. To accomplish this, the player can start at any cell in the grid that contains a gem and move to an adjacent cell (up, down, left, or right) that contains the same type of gem. The goal is to determine the maximum number of gems of the same type that can be collected consecutively starting from any cell. Help the developer by writing an algorithm to solve this problem. ------ Input ------ The first line contains two integers M and N, denoting the dimensions of the grid. Each of the next M lines contains N space-separated integers, where each integer represents a type of gem in the corresponding cell (a specific type of gem is represented by a unique positive integer) or 0 for an empty cell. ------ Output ------ Output a single integer, the maximum number of gems of the same type that can be collected consecutively starting from any cell in the grid. ------ Constraints ------ 1 ≤ M, N ≤ 100 0 ≤ Cell value ≤ 1000 Your code will be judged against several input files. ------ Example ------ ----- Sample Input 1 ------ 4 4 1 2 2 1 1 2 2 1 0 1 0 0 3 3 3 1 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ An optimal collection of 4 consecutive gems occurs with the type \'2\' starting from (1,2) moving to (2,2), (1,3), and (2,3). ----- Sample Input 2 ------ 3 5 5 5 5 0 5 1 1 0 0 1 3 3 3 3 3 ----- Sample Output 2 ------ 5 ----- Explanation 2 ------ An optimal collection of 5 consecutive gems occurs with the type \'3\' starting from (3,1) to (3,5).","solution":"def max_consecutive_gems(M, N, grid): def dfs(x, y, gem_type): if x < 0 or x >= M or y < 0 or y >= N or grid[x][y] != gem_type or visited[x][y]: return 0 visited[x][y] = True count = 1 for dx, dy in directions: count += dfs(x + dx, y + dy, gem_type) return count directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_gems = 0 visited = [[False] * N for _ in range(M)] for i in range(M): for j in range(N): if grid[i][j] != 0 and not visited[i][j]: max_gems = max(max_gems, dfs(i, j, grid[i][j])) return max_gems"},{"question":"You are given a string consisting of lowercase English letters. The goal is to reorder the string in such a way that no two adjacent characters are the same. If it is not possible to do so, return an empty string. -----Input----- - The input consists of a single string s, where 1 ≤ length of s ≤ 1000. -----Output----- - If it is possible to reorder the string such that no two adjacent characters are the same, return the reordered string. If it is not possible, return an empty string. -----Constraints----- - The input string consists only of lowercase English letters (\'a\' - \'z\'). -----Example Input----- aaabbc -----Example Output----- ababac -----Example Input----- aaab -----Example Output-----","solution":"from heapq import heappop, heappush from collections import Counter def reorganizeString(s): Reorders the input string such that no two adjacent characters are the same. If it is not possible, returns an empty string. Parameters: s (str): The input string. Returns: str: The reordered string or an empty string if reordering is not possible. # Count the frequency of each character count = Counter(s) maxCharCount = count.most_common(1)[0][1] # If the most frequent character is more than half the length (plus one), impossible to arrange if maxCharCount > (len(s) + 1) // 2: return \\"\\" # Max heap to store characters by their frequency (invert frequency to use min-heap as max-heap) maxHeap = [] for char, freq in count.items(): heappush(maxHeap, (-freq, char)) # Reorganize the string result = [] prev_freq, prev_char = 0, \'\' while maxHeap: freq, char = heappop(maxHeap) result.append(char) # Add the previous character back if its frequency is not zero if prev_freq < 0: heappush(maxHeap, (prev_freq, prev_char)) prev_freq = freq + 1 # Decrement the frequency prev_char = char return \'\'.join(result)"},{"question":"You are given a sequence of n integers a1, a2, ..., an and a constant value k. You need to find the length of the longest continuous subarray such that the sum of the elements of the subarray is less than or equal to k. Input The first line contains two integers n and k (1 ≤ n ≤ 100000, -10<sup>9</sup> ≤ k ≤ 10<sup>9</sup>) — the length of the sequence and the constant value respectively. The second line contains n integers a1, a2, ..., an ( -10<sup>9</sup> ≤ ai ≤ 10<sup>9</sup>) — the sequence of integers. Output Print a single integer — the length of the longest continuous subarray with sum less than or equal to k. Examples Input 5 5 1 2 3 4 5 Output 2 Input 6 10 6 7 1 2 5 4 Output 3 Note In the first example, the subarray with a sum ≤ 5 could be [1, 2] (sum is 3 with length 2), [2, 3] (sum is 5 with length 2), amongst other possible subarrays, but the longest is of length 2. In the second example, the subarray with a sum ≤ 10 could be [6, 1, 2] (sum is 9 with length 3), [1, 2, 5] (sum is 8 with length 3), amongst other possible subarrays, but the longest is of length 3.","solution":"def longest_subarray_with_sum_leq_k(n, k, a): Finds the length of the longest continuous subarray where the sum of its elements is less than or equal to k. :param n: Length of the sequence :param k: The constant value :param a: The sequence of integers :return: Length of the longest continuous subarray with sum <= k max_length = 0 current_sum = 0 start = 0 for end in range(n): current_sum += a[end] while current_sum > k and start <= end: current_sum -= a[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given a list of integers, your task is to find all unique triplets in the array which gives the sum of zero. Note that the solution set must not contain duplicate triplets. ------ Input Format ------ - The first line of input contains a single integer T - the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N - the number of integers in the array. - The second line for each test case contains N integers separated by spaces. ------ Output Format ------ For each test case, output all unique triplets that sum up to zero in separate lines, in any order. ------ Constraints ------ 1 ≤ T ≤ 100 0 ≤ N ≤ 3000 -10^5 ≤ text{integer in array} ≤ 10^5 ----- Sample Input 1 ------ 2 6 -1 0 1 2 -1 -4 3 0 0 0 ----- Sample Output 1 ------ -1 -1 2 -1 0 1 0 0 0","solution":"def find_zero_sum_triplets(arr): Finds all unique triplets in the array which sum to zero. Args: arr: List[int] : list of integers Returns: List[List[int]] : list of lists, each containing a triplet arr.sort() res = [] for i in range(len(arr) - 2): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, len(arr) - 1 while left < right: s = arr[i] + arr[left] + arr[right] if s < 0: left += 1 elif s > 0: right -= 1 else: res.append([arr[i], arr[left], arr[right]]) while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 return res def process_test_cases(test_cases): results = [] for case in test_cases: N, arr = case if N < 3: results.append([]) else: results.append(find_zero_sum_triplets(arr)) return results"},{"question":"You are given a special type of sequences called \\"balanced sequences.\\" A sequence is balanced if it contains an equal number of certain elements. In this problem, a sequence is called balanced if it contains exactly equal numbers of `0`s, `1`s, and `2`s. You need to determine the length of the longest balanced subsequence in a given sequence of integers. A subsequence is a sequence derived by deleting some or no elements from the original sequence without changing the order of the remaining elements. Input: - The first line contains an integer `n` (1 ≤ n ≤ 2·10^5), the length of the sequence. - The second line contains `n` integers a1, a2, ..., an (0 ≤ ai ≤ 2). Output: - A single integer, the length of the longest balanced subsequence. Examples: Input: 7 0 1 2 0 1 2 0 Output: 6 Input: 5 0 0 1 2 2 Output: 3 Input: 6 2 1 2 0 0 2 Output: 3 Explanation: In the first example, the sequence [0, 1, 2, 0, 1, 2] contains 2 `0`s, 2 `1`s, and 2 `2`s which is balanced, therefore, the length is 6. In the second example, the sequence [0, 1, 2] contains 1 `0`, 1 `1`, and 1 `2`, which forms the longest balanced subsequence of length 3. In the third example, one of the longest balanced subsequences is [2, 1, 0], which has length 3 because it has exactly 1 `0`, 1 `1`, and 1 `2`.","solution":"def longest_balanced_subsequence(n, sequence): Returns the length of the longest balanced subsequence in the given sequence of integers. A sequence is balanced if it contains equal numbers of 0s, 1s, and 2s. count_0 = count_1 = count_2 = 0 for num in sequence: if num == 0: count_0 += 1 elif num == 1: count_1 += 1 elif num == 2: count_2 += 1 # The longest balanced subsequence length will be 3 * min(count_0, count_1, count_2) return 3 * min(count_0, count_1, count_2)"},{"question":"**You are given an NxN matrix representing the cost of painting N houses with N colors. Where matrix[i][j] represents the cost of painting the ith house with the jth color. The rules are that no two adjacent houses can have the same color. Your task is to find the minimum cost to paint all houses while satisfying the given rule.** -----Constraints----- * 1 ≤ N ≤ 100 * 1 ≤ matrix[i][j] ≤ 5000 * All input values are integers. -----Input----- The input is given from Standard Input in the following format: N matrix[0][0] matrix[0][1] ... matrix[0][N-1] matrix[1][0] matrix[1][1] ... matrix[1][N-1] ... matrix[N-1][0] matrix[N-1][1] ... matrix[N-1][N-1] -----Output----- Print the minimum cost to paint all the houses. -----Sample Input----- 3 17 2 17 16 16 5 14 3 19 -----Sample Output----- 10 The optimal way to paint the houses is as follows: - Paint house 1 with color 2 (cost: 2) - Paint house 2 with color 3 (cost: 5) - Paint house 3 with color 1 (cost: 3) This results in a total minimum cost of 2 + 5 + 3 = 10.","solution":"def minCostToPaintHouses(cost): N = len(cost) if N == 0: return 0 for i in range(1, N): for j in range(N): cost[i][j] += min(cost[i-1][k] for k in range(N) if k != j) return min(cost[-1]) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) matrix = [] index = 1 for i in range(N): row = list(map(int, data[index:index+N])) matrix.append(row) index += N print(minCostToPaintHouses(matrix))"},{"question":"You are given a string s and a list of queries. Each query specifies a range within the string, and you need to determine the length of the longest substring of that range which is a palindrome. A palindrome is defined as a string that reads the same backward as forward. Input The first line contains a string s of length n (1 ≤ n ≤ 105) consisting of lowercase Latin letters. The second line contains an integer m (1 ≤ m ≤ 104) — the number of queries. Each of the next m lines contains a pair of integers li, ri (1 ≤ li ≤ ri ≤ n) — the description of the i-th query. Output For each query, output the length of the longest palindromic substring within the specified range on a new line. Examples Input abaxyzbamadam 3 1 5 6 10 1 13 Output 3 3 7 Note For the first query, the substring is \\"abaxy\\", and the longest palindromic substring is \\"aba\\" with length 3. For the second query, the substring is \\"ybam\\", and the longest palindromic substring is \\"aba\\" with length 3. For the third query, the substring is \\"abaxyzbamadam\\", and the longest palindromic substring is \\"madam\\" with length 5.","solution":"def longest_palindromic_substring(s, queries): Returns the length of the longest palindromic substring within the specified ranges. def longest_palindrome_length(substring): n = len(substring) if n == 0: return 0 # Table to store the palindrome status dp = [[False] * n for _ in range(n)] max_length = 1 # Single letter palindromes for i in range(n): dp[i][i] = True # Two consecutive letters palindromes for i in range(n - 1): if substring[i] == substring[i + 1]: dp[i][i + 1] = True max_length = 2 # Substrings longer than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if substring[i] == substring[j] and dp[i + 1][j - 1]: dp[i][j] = True max_length = length return max_length results = [] for li, ri in queries: sub_str = s[li-1:ri] results.append(longest_palindrome_length(sub_str)) return results"},{"question":"Given an array of integers, you need to determine the minimum number of moves required for every element in the array to be the same. In one move, you can increment or decrement any element of the array by 1. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers separated by spaces, representing the array. Each integer in the array is between -10^9 and 10^9 inclusive. Output Output a single integer, the minimum number of moves required for every element in the array to be the same. Examples Input 4 1 2 3 4 Output 4 Input 3 -1 0 1 Output 2 Note In the first example, one possible way to make all elements the same is to increment the second element, the third element, and the fourth element to 4, then the moves required would be 4 (3+1, 2+2, 1+3). In the second example, one possible way is to make all elements 0, then the moves required would be 1 for -1, and 1 for 1 ( | -1 - 0 | + | 1 - 0 | = 1 +1 = 2).","solution":"def minimum_moves_to_equal_elements(n, arr): Returns the minimum number of moves required for every element in the array to be the same. arr.sort() median = arr[n // 2] moves = sum(abs(x - median) for x in arr) return moves"},{"question":"Write a function that takes a string `s` and a dictionary `d` and returns the longest word in `d` that can be formed by deleting some characters of the given string `s`. If there are more than one possible results, return the word which appears first in the dictionary. If there are no possible results, return an empty string. # Example: ```python s = \\"abpcplea\\" d = [\\"ale\\", \\"apple\\", \\"monkey\\", \\"plea\\"] # The longest word that can be formed is \\"apple\\", so the function should return \\"apple\\". s = \\"abpcplea\\" d = [\\"a\\", \\"b\\", \\"c\\"] # The longest word that can be formed is \\"a\\", so the function should return \\"a\\". ``` # Constraints: - The length of `s` and all the values in `d` will be at most `1000`. - All the strings contain only lower-case letters.","solution":"def can_form(s, word): Helper function to determine if `word` can be formed by deleting some characters from `s`. it = iter(s) return all(char in it for char in word) def find_longest_word(s, d): Returns the longest word in `d` that can be formed by deleting some characters from the given string `s`. If there are more than one possible results, returns the word which appears first in the dictionary. If there are no possible results, returns an empty string. longest_word = \\"\\" for word in d: if can_form(s, word): if len(word) > len(longest_word) or (len(word) == len(longest_word) and word < longest_word): longest_word = word return longest_word"},{"question":"Given a string containing a mixture of letters and digits, you need to segregate the letters and digits such that all letters appear before all digits while maintaining the relative order of the letters and digits in the original string. Input: A single string consisting of letters and digits. Output: A single string with all letters followed by all digits, maintaining their relative order from the input string. SAMPLE INPUT a1b2c3 SAMPLE OUTPUT abc123","solution":"def segregate_letters_digits(s): Segregates letters and digits in the string such that letters come first followed by digits, while maintaining their relative order. Parameters: s (str): The input string containing a mixture of letters and digits. Returns: str: The output string with letters followed by digits. letters = \'\'.join([char for char in s if char.isalpha()]) digits = \'\'.join([char for char in s if char.isdigit()]) return letters + digits"},{"question":"You have been tasked with implementing a custom function that accepts a string. The string will contain multiple words separated by spaces. Your function should return a new string with all the words in reverse order. For example, if the input string is `\\"the sky is blue\\"`, the function should return `\\"blue is sky the\\"`. Additional Specifications: 1. Do not use any built-in string reversing functions. 2. Pay attention to leading or trailing spaces, as well as multiple spaces between words; these should be reduced to a single space in the output. Example: ```python reverse_words(\\" hello world \\") > \\"world hello\\" reverse_words(\\"a good example\\") > \\"example good a\\" ```","solution":"def reverse_words(s): Reverses the words in input string s. :param s: Input string containing words separated by spaces :return: String with words in reverse order words = s.split() return \' \'.join(reversed(words))"},{"question":"Problem: Sara is a software engineer who loves puzzles. She came across a classic problem of balanced parentheses while coding, and she decided to create her own version of the problem to make it more challenging. For this problem, you have to check if the given string of parentheses is valid. A string is considered valid if: 1. Opening parentheses are closed by the same type of parentheses. 2. Opening parentheses are closed in the correct order. The types of parentheses considered are: \'()\', \'{}\', and \'[]\'. Your task is to write a function that determines if the input string of parentheses is valid. Input: One line containing a string `s` of length `N` (0 ≤ N ≤ 10^5), consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Output: Print \\"YES\\" if the given string of parentheses is valid. Otherwise, print \\"NO\\". Constraints: - The input string will only contain the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. - The length of the string does not exceed 100,000. SAMPLE INPUT {[()]} SAMPLE OUTPUT YES SAMPLE INPUT {[(])} SAMPLE OUTPUT NO SAMPLE INPUT {{[[(())]]}} SAMPLE OUTPUT YES","solution":"def is_valid_parentheses(s): Determine if the input string of parentheses is valid. :param s: Input string consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' :return: \\"YES\\" if the string is valid, otherwise \\"NO\\" stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses: if not stack or stack[-1] != matching_parentheses[char]: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\""},{"question":"Write a function that converts a Roman numeral into an integer. You will be given a valid Roman numeral between 1 and 3999. # Roman Numeral Symbols ``` | Symbol | Value | |--------|-------| | I | 1 | | V | 5 | | X | 10 | | L | 50 | | C | 100 | | D | 500 | | M | 1000 | ``` # Examples ``` Input: \\"III\\" Output: 3 Input: \\"IV\\" Output: 4 Input: \\"IX\\" Output: 9 Input: \\"LVIII\\" Output: 58 Input: \\"MCMXCIV\\" Output: 1994 ``` Write a function `roman_to_int(roman: str) -> int` that takes a string representing a Roman numeral and returns its integer value. ```python def roman_to_int(roman: str) -> int: roman_values = {\'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000} total = 0 prev_value = 0 for char in reversed(roman): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total ``` Implement the `roman_to_int` function in your preferred programming language.","solution":"def roman_to_int(roman: str) -> int: roman_values = {\'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000} total = 0 prev_value = 0 for char in reversed(roman): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Maria loves purchasing items. She always tries to maximize the number of items she can buy with her given budget. She knows the prices of all available items in a store. You need to help Maria decide the maximum number of items she can buy without exceeding her budget. Constraints * 1 ≤ n ≤ 100 * 1 ≤ prices[i] ≤ 100 * 1 ≤ budget ≤ 10,000 Input Input is given from Standard Input in the following format: ``` n prices budget ``` - `n`: number of available items - `prices`: a space-separated string of integers representing the prices of the items - `budget`: Maria\'s budget Output Output the maximum number of items Maria can buy without exceeding her budget. Examples Input ``` 5 1 12 5 111 200 10 ``` Output ``` 2 ``` Input ``` 10 20 10 5 30 30 40 50 60 70 80 100 ``` Output ``` 5 ``` Input ``` 3 100 200 300 50 ``` Output ``` 0 ```","solution":"def max_items(n, prices, budget): Returns the maximum number of items that can be bought without exceeding the given budget. Parameters: n (int): number of available items prices (str): space-separated string of integers representing the prices of the items budget (int): Maria\'s budget Returns: int: the maximum number of items that can be bought prices = list(map(int, prices.split())) prices.sort() count = 0 total_cost = 0 for price in prices: if total_cost + price <= budget: total_cost += price count += 1 else: break return count"},{"question":"Implement a function `flatten_dict(d)` that takes a dictionary `d` which may contain nested dictionaries as values and returns a flattened dictionary. The keys of the flattened dictionary should be the concatenation of the keys from the original dictionaries, separated by a period (\'.\'). For example: ```python flatten_dict({ \'a\': 1, \'b\': { \'c\': 2, \'d\': { \'e\': 3 } }, \'f\': { \'g\': 4 } }) ``` should return: ```python { \'a\': 1, \'b.c\': 2, \'b.d.e\': 3, \'f.g\': 4 } ```","solution":"def flatten_dict(d, parent_key=\'\', sep=\'.\'): Takes a dictionary which may contain nested dictionaries and returns a flattened dictionary. flattened = {} for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): flattened.update(flatten_dict(v, new_key, sep=sep)) else: flattened[new_key] = v return flattened"},{"question":"Write a program to solve the following problem: You are given an array A containing N integers, and Q queries. Each query consists of two integers L and R, and you need to find the sum of the elements in the array from index L to index R (1-based index). INPUT: - The first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array A. - The third line contains an integer Q, the number of queries. - The next Q lines each contain two space-separated integers L and R representing the range (1-based index) for each query. OUTPUT: - For each query, output the sum of the elements between indices L and R (both inclusive) in a new line. Constraints: - 1 ≤ N ≤ 100000 - 1 ≤ A[i] ≤ 1000 - 1 ≤ Q ≤ 100000 - 1 ≤ L ≤ R ≤ N SAMPLE INPUT: 5 1 2 3 4 5 3 1 3 2 4 1 5 SAMPLE OUTPUT: 6 9 15 Explanation: For the first query, the sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. For the second query, the sum of elements from index 2 to 4 is 2 + 3 + 4 = 9. For the third query, the sum of elements from index 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def range_sum(N, A, queries): This function returns the sum of elements in the array from index L to R for each query. # Create a prefix sum array prefix_sum = [0] * (N + 1) # Fill the prefix sum array for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + A[i - 1] result = [] # Process each query for L, R in queries: # Calculate sum from L to R using the prefix sum array sum_LR = prefix_sum[R] - prefix_sum[L - 1] result.append(sum_LR) return result"},{"question":"In a binary tree, each node contains an integer value. You are required to find the path from the root to a specific target value (if it exists). The path should be represented as a list of node values from the root to the target node. If the target value does not exist in the tree, return an empty list. Example 1: Input: Tree structure: 5 / 3 8 / 2 4 10 Target value: 4 Output: [5, 3, 4] Example 2: Input: Tree structure: 1 / 7 9 / / 2 6 8 Target value: 5 Output: [] Notes: - The number of nodes in the binary tree is in the range [1, 1000]. - Node values are unique and are in the range [-1000, 1000].","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_path(root, target): Finds the path from the root to the target value in a binary tree. Args: root (TreeNode): The root node of the binary tree. target (int): The target value to find. Returns: List[int]: The path from the root to the target value. def dfs(node, path): if not node: return [] # Add current node to the path path.append(node.value) # If the current node is the target, return the path if node.value == target: return path # Otherwise, continue to search in the left and right subtrees left_path = dfs(node.left, path.copy()) if left_path: return left_path right_path = dfs(node.right, path.copy()) if right_path: return right_path # If the target is not found, return an empty path path.pop() return [] return dfs(root, [])"},{"question":"Write a function to implement a basic text editor. The editor supports the following operations: * append(string): Appends the given string to the end of the current text. * delete(k): Deletes the last \'k\' characters from the current text. * undo(): Reverts the last append or delete operation. The text is initially empty. Constraints * You can assume the text editor will be used for at most 10^5 operations. * The length of every appended string will be between 1 and 1000 characters inclusive. * It is guaranteed that after each delete operation, the remaining text length will be non-negative. * There will always be at least one operation to undo when the undo operation is called. Input The input is given in the following format: n operation 1 operation 2 : operation n Each operation is given by: * append string * delete k * undo Output For each undo that reverts an append operation, print the current state of the text on a new line. Example Input 7 append hello append world delete 5 append ! undo append . undo Output hello hello world hello","solution":"class TextEditor: def __init__(self): self.text = \\"\\" self.operations = [] def append(self, string): self.operations.append((\\"append\\", string)) self.text += string def delete(self, k): deleted_text = self.text[-k:] self.operations.append((\\"delete\\", deleted_text)) self.text = self.text[:-k] def undo(self): if not self.operations: return last_operation, value = self.operations.pop() if last_operation == \\"append\\": self.text = self.text[:len(self.text) - len(value)] print(self.text) elif last_operation == \\"delete\\": self.text += value # Function to process a list of operations on the text editor def process_operations(ops): editor = TextEditor() for op in ops: if op.startswith(\\"append\\"): editor.append(op.split(\\" \\", 1)[1]) elif op.startswith(\\"delete\\"): editor.delete(int(op.split(\\" \\")[1])) elif op.startswith(\\"undo\\"): editor.undo()"},{"question":"The warehouse manager is responsible for keeping track of the number of items in stock for multiple product lines. The manager wants to efficiently find out how many items of a particular product are available in real-time. A system needs to be developed to handle multiple queries and updates to the stock. You are given an array of integers where each integer represents the stock of a particular product. Each element in the array can be updated to represent the change in the stock of that product. You also need to answer queries asking for the current stock of a particular product. -----Input----- The first line contains two integers n and q, where n (1 <= n <= 10^5) is the number of products and q (1 <= q <= 10^5) is the number of queries. The second line contains n integers, representing the initial stock of each product. The next q lines each contain a query of the following types: 1. `1 x y` - Update: Set the stock of the x-th product to y (0 <= x < n, 0 <= y <= 10^9). 2. `2 x` - Query: Return the current stock of the x-th product (0 <= x < n). -----Output----- For each query of the second type, output a single integer representing the current stock of the specified product. -----Example----- Input 5 3 10 20 30 40 50 2 2 1 2 100 2 2 Output 30 100 -----Note----- In the example: - We start with the stock array [10, 20, 30, 40, 50]. - The first query `2 2` requests the stock of the 2nd product, which is 30. - The second query `1 2 100` updates the stock of the 2nd product to 100, making the array [10, 20, 100, 40, 50]. - The final query `2 2` requests the stock of the 2nd product again, which is now 100.","solution":"def manage_stock(n, q, stocks, queries): Function to manage stock of multiple products and handle queries. Parameters: n (int): Number of products. q (int): Number of queries. stocks (list of int): Initial stock of each product. queries (list of tuples): List of queries where each query is a tuple. Returns: list of int: The results of all type-2 queries. # Convert stock list to mutable list if needed stock_list = stocks # Results of type-2 queries results = [] # Process each query for query in queries: if query[0] == 1: # Update the stock of the x-th product to y _, x, y = query stock_list[x] = y elif query[0] == 2: # Return the current stock of the x-th product _, x = query results.append(stock_list[x]) return results"},{"question":"Samantha has a list of n integers and wants to rearrange them to be in non-decreasing order using a series of operations. She can perform the following operation: Choose any two adjacent elements a_i and a_{i+1} (where 1 leq i leq n-1) and swap them if a_i > a_{i+1}. Determine the minimum number of swaps needed to sort the list in non-decreasing order. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains an integer n (1 leq n leq 100) — the number of elements in the list. The second line of each test case contains n space-separated integers representing the elements of the list. It is guaranteed that the sum of n over all test cases does not exceed 1000. -----Output----- For each test case, output a single integer — the minimum number of swaps required to sort the list in non-decreasing order. -----Examples----- Input 3 5 4 3 2 1 5 3 3 1 2 4 1 2 3 4 Output 6 2 0 -----Note----- In the first test case, six swaps are needed to sort the list: 1. Swap (4, 3) -> 3 4 2 1 5 2. Swap (4, 2) -> 3 2 4 1 5 3. Swap (4, 1) -> 3 2 1 4 5 4. Swap (3, 2) -> 2 3 1 4 5 5. Swap (3, 1) -> 2 1 3 4 5 6. Swap (2, 1) -> 1 2 3 4 5 In the second test case, two swaps are needed: 1. Swap (3, 1) -> 1 3 2 2. Swap (3, 2) -> 1 2 3 In the third test case, the list is already sorted, so no swaps are needed.","solution":"def minimum_swaps_to_sort(arr): Calculate the minimum number of swaps required to sort the array. Using Bubble Sort to count the swaps needed. n = len(arr) arr = list(arr) # make a copy of the array swaps = 0 for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swaps += 1 return swaps def minimum_swaps_for_all_test_cases(t, test_cases): For each test case, calculate the minimum number of swaps to sort the list. results = [] for case in test_cases: n, sequence = case results.append(minimum_swaps_to_sort(sequence)) return results # Function to process input and output def process_input_output(t, input_cases): results = minimum_swaps_for_all_test_cases(t, input_cases) return results"},{"question":"Bob loves playing with sequences of numbers and finding interesting patterns. Recently, he encountered an interesting problem and needs your help to solve it. Given a sequence of n integers, Bob wants to find the length of the longest subsequence such that every pair of consecutive elements in the subsequence has a difference of either d or -d. A subsequence is derived by deleting some or none of the elements from the original sequence, without changing the order of the remaining elements. -----Input----- The first line contains two integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ 1000). The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000). -----Output----- Print a single integer — the length of the longest desired subsequence. -----Examples----- Input 6 2 1 3 2 5 7 8 Output 4 Input 4 5 10 4 15 9 Output 2 -----Note----- In the first test case, one of the longest subsequences can be: [1, 3, 5, 7] which has a length of 4. In the second test case, the longest subsequence is: [10, 15] which has a length of 2.","solution":"def longest_subsequence(n, d, sequence): dp = [1] * n # Initialize the dp array with 1s, as single elements always count for i in range(n): for j in range(i): if sequence[i] - sequence[j] == d or sequence[i] - sequence[j] == -d: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # The longest subsequence length"},{"question":"You are given a matrix of size N x M, where each cell is either 0 (blocked) or 1 (open). The task is to find out if there is a path from the top-left corner of the matrix to the bottom-right corner, moving only through open cells (1s). From a cell, you can only move right or down to an adjacent cell. Write a function that determines if such a path exists. Input: - First line contains two integers, N and M, representing the dimensions of the matrix. - The next N lines contain M integers each (either 0 or 1), representing the matrix. Output: - Print \\"YES\\" if there is a path from the top-left to the bottom-right. Otherwise, print \\"NO\\". Constraints: * 1 ≤ N, M ≤ 1000 * Each element in the matrix is either 0 or 1. SAMPLE INPUT 3 3 1 0 0 1 1 0 0 1 1 SAMPLE OUTPUT YES Explanation There is a path from the top-left corner to the bottom-right corner, moving through the cells with value 1 (open cells): Start → (1,1) → (2,1) → (2,2) → (3,2) → Finish","solution":"def is_path_possible(matrix, n, m): Determines if there is a path from the top-left corner to the bottom-right corner. if matrix[0][0] == 0 or matrix[n-1][m-1] == 0: return \\"NO\\" visited = [[False]*m for _ in range(n)] directions = [(1, 0), (0, 1)] def dfs(x, y): if x == n-1 and y == m-1: return True visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and matrix[nx][ny] == 1: if dfs(nx, ny): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"Given an integer N, your task is to complete the function that generates all unique permutations of the first N positive integers. Each permutation should be a unique arrangement of the numbers from 1 to N. Example 1: Input: N = 3 Output: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1] Explanation: All permutations of the numbers 1, 2, and 3 are listed above. Example 2: Input: N = 2 Output: [1, 2], [2, 1] Your Task: Complete the function generatePermutations() which takes an integer N as input and returns a list of lists containing all unique permutations of the first N positive integers. Expected Time Complexity: O(N * N!) Expected Auxiliary Space: O(N!) Constraints: 1 ≤ N ≤ 8","solution":"from itertools import permutations def generatePermutations(N): Generates all unique permutations of the first N positive integers. Parameters: N (int): The number of first positive integers to permute. Returns: List[List[int]]: A list of lists containing all unique permutations. return [list(p) for p in permutations(range(1, N+1))]"},{"question":"In the land of ByteWorld, there exists a kingdom where people communicate using digital signals. These signals are unique and are represented using strings of characters. The citizens of ByteWorld have recently encountered a peculiar problem. They want to determine whether any two different signals in the collection of signals are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The problem is defined as follows: Given a list of strings, identify if there exist any two distinct strings in the list that are anagrams of each other. If such a pair exists, return \\"YES\\", otherwise return \\"NO\\". ------ Input ------ The first line of the input contains an integer T, the number of test cases. T test cases follow. The first line of each test case contains an integer N, the number of signals. Each of the next N lines contains one string representing a signal. ------ Output ------ For each test case, output a single line containing \\"YES\\" if there exist any two different signals that are anagrams of each other, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ length of any signal ≤ 100 It is guaranteed that each official test file will satisfy all these constraints. You DON\'T need to verify them in your program. ----- Sample Input 1 ------ 2 3 abc bca xyz 4 hello oellh world dlro ----- Sample Output 1 ------ YES YES","solution":"def are_anagrams(str1, str2): Checks if two strings are anagrams of each other. return sorted(str1) == sorted(str2) def check_anagrams(test_cases): results = [] for signals in test_cases: anagram_found = False signal_count = len(signals) for i in range(signal_count): for j in range(i + 1, signal_count): if are_anagrams(signals[i], signals[j]): anagram_found = True break if anagram_found: break results.append(\\"YES\\" if anagram_found else \\"NO\\") return results"},{"question":"In Poornima college, the computer science club organizes a unique competition where participants have to fill a grid with numbers. The grid has `N` rows and `M` columns, and the task is to find the number of ways to fill the grid such that each row and each column have distinct integers from 1 to `max(N, M)`. You are provided the dimensions of the grid `N` and `M`. Your task is to compute the number of valid ways to fill the grid. Input The first line contains the number of test cases, `T`. Each of the next `T` lines contains two integers `N` and `M` representing the grid\'s dimensions. Output: For each test case, output the number of valid ways to fill the grid. Constraints: 1 ≤ T ≤ 100 1 ≤ N, M ≤ 10 SAMPLE INPUT 2 2 2 3 3 SAMPLE OUTPUT 2 12 Explanation Test case 1: There are 2 ways to fill a 2x2 grid: ``` 1 2 2 1 2 1 1 2 ``` Test case 2: There are 12 ways to fill a 3x3 grid: ``` 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1 2 3 1 2 1 3 3 2 1 3 1 2 1 3 2 1 2 3 3 1 2 3 2 1 1 3 2 1 2 3 2 1 3 2 3 1 ``` ... and so on. Each configuration must have distinct integers in each row and column.","solution":"import math def count_ways_to_fill_grid(N, M): if N != M: return 0 factorial = math.factorial return factorial(N) ** 2 def number_of_ways(test_cases): results = [] for N, M in test_cases: results.append(count_ways_to_fill_grid(N, M)) return results"},{"question":"A palindrome is a string that reads the same forward and backward. Given an integer n, generate all distinct palindromic strings of length n using lowercase English letters. Each string must appear only once in the output list. The order of the strings in the output does not matter. # Examples: Example 1: Input: 2 Output: [\\"aa\\",\\"bb\\",\\"cc\\",\\"dd\\",\\"ee\\",\\"ff\\",\\"gg\\",\\"hh\\",\\"ii\\",\\"jj\\",\\"kk\\",\\"ll\\",\\"mm\\",\\"nn\\",\\"oo\\",\\"pp\\",\\"qq\\",\\"rr\\",\\"ss\\",\\"tt\\",\\"uu\\",\\"vv\\",\\"ww\\",\\"xx\\",\\"yy\\",\\"zz\\"] Example 2: Input: 3 Output: [] # Tasks: You do not need to read input or print anything. Your task is to complete the function `generatePalindromes(n)` which takes an integer `n` as input and returns a list of all palindromic strings of length n. # Constraints: - 1 ≤ n ≤ 8 # Expected Time Complexity: O(26^{n/2}) # Expected Auxiliary Space: O(26^{n/2})","solution":"def generatePalindromes(n): Generate all distinct palindromic strings of length n using lowercase English letters. Parameters: n (int): Length of the palindrome strings to generate. Returns: list: List of all distinct palindromic strings of length n. if n == 0: return [] if n == 1: # Single character palindromes return [chr(i) for i in range(ord(\'a\'), ord(\'z\') + 1)] if n % 2 == 1: # Palindromes of odd length cannot be generated by simple mirroring return [] half_length = n // 2 palindromes = [] def generate_half(current): if len(current) == half_length: # Generate the full palindrome by mirroring full_palindrome = current + current[::-1] palindromes.append(full_palindrome) return for i in range(ord(\'a\'), ord(\'z\') + 1): generate_half(current + chr(i)) generate_half(\\"\\") return palindromes"},{"question":"You are given a dictionary where the keys are words and the values are their corresponding antonyms. Your task is to write the following methods: ```python def add_antonym(dictionary, word, antonym): Adds a word-antonym pair to the dictionary. If the word already exists in the dictionary, it should update its antonym. pass def get_antonym(dictionary, word): Returns the antonym of a given word. If the word is not in the dictionary, return None. pass def remove_word(dictionary, word): Removes a word and its antonym from the dictionary. If the word is not in the dictionary, return None. pass def list_antonyms(dictionary): Returns a list of all word-antonym pairs in the dictionary sorted alphabetically based on the words. pass ``` # Examples Given the dictionary: ```python antonyms = {\'hot\': \'cold\', \'light\': \'dark\', \'happy\': \'sad\'} ``` ```python add_antonym(antonyms, \'big\', \'small\') # Dictionary now: {\'hot\': \'cold\', \'light\': \'dark\', \'happy\': \'sad\', \'big\': \'small\'} get_antonym(antonyms, \'happy\') # Output: \'sad\' remove_word(antonyms, \'light\') # Dictionary now: {\'hot\': \'cold\', \'happy\': \'sad\', \'big\': \'small\'} list_antonyms(antonyms) # Output: [(\'big\', \'small\'), (\'happy\', \'sad\'), (\'hot\', \'cold\')] ``` If the input dictionary is empty or None is passed as a word or antonym in methods, handle gracefully. Note: Ensure to handle capitalizations such that \\"Hot\\" and \\"hot\\" are considered the same word.","solution":"def add_antonym(dictionary, word, antonym): Adds a word-antonym pair to the dictionary. If the word already exists in the dictionary, it should update its antonym. word = word.lower() dictionary[word] = antonym def get_antonym(dictionary, word): Returns the antonym of a given word. If the word is not in the dictionary, return None. return dictionary.get(word.lower()) def remove_word(dictionary, word): Removes a word and its antonym from the dictionary. If the word is not in the dictionary, return None. return dictionary.pop(word.lower(), None) def list_antonyms(dictionary): Returns a list of all word-antonym pairs in the dictionary sorted alphabetically based on the words. return sorted(dictionary.items())"},{"question":"In this problem, you need to implement a function that checks if the given number is a palindrome or not. A palindrome is a number that remains the same when its digits are reversed. Example 1: Input: num = 121 Output: True Example 2: Input: num = 123 Output: False Your Task: You don\'t need to read or print anything. Your task is to implement the function isPalindrome() which takes a single integer num as input and returns True if the number is palindrome, otherwise returns False. Expected Time Complexity: O(log10(num)) Expected Space Complexity: O(1) Constraints: 1 ≤ num ≤ 10^9","solution":"def isPalindrome(num): Returns True if the given number is a palindrome, else returns False. num_str = str(num) return num_str == num_str[::-1]"},{"question":"Given an array of integers, write a function that returns the difference between the largest and smallest values in the array. Example 1: Input: [3, 1, 4, 1, 5, 9] Output: 8 Explanation: The largest value is 9 and the smallest value is 1, so the difference is 9 - 1 = 8. Example 2: Input: [10, 20, 30, 40, 50] Output: 40 Explanation: The largest value is 50 and the smallest value is 10, so the difference is 50 - 10 = 40. Your Task: You don\'t need to read or print anything. Your task is to complete the function difference_largest_smallest() which takes a list of integers as input and returns the difference between the largest and smallest values. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= len(arr) <= 100 -10^3 <= arr[i] <= 10^3","solution":"def difference_largest_smallest(arr): Returns the difference between the largest and smallest values in the array. if not arr: return 0 max_value = max(arr) min_value = min(arr) return max_value - min_value"},{"question":"In a list of unique integers, write a function to determine the length of the longest subarray with contiguous elements. * The function should take an array of unique integers as input. * Contiguous elements in the output subarray must form a sequence similar to [3, 4, 5, 6], with no gaps in between the sequence. * The numbers can appear in any order in the input array. Examples ``` longest_contiguous_subarray_length([10, 12, 11]) --> 3 ``` Explanation: The longest contiguous subarray is [10, 11, 12]. ``` longest_contiguous_subarray_length([14, 12, 11, 20]) --> 2 ``` Explanation: The longest contiguous subarrays are [11, 12] and [12, 14]. Both have a length of 2.","solution":"def longest_contiguous_subarray_length(nums): Returns the length of the longest subarray with contiguous elements. if not nums: return 0 nums.sort() max_length = 1 current_length = 1 for i in range(1, len(nums)): if nums[i] == nums[i - 1] + 1: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length)"},{"question":"You are given two strings, `A` and `B`, consisting of lowercase letters. Your task is to find the length of their longest common substring. A substring is a contiguous sequence of characters within a string. For instance, in the strings \\"pencil\\" and \\"iceland\\", the longest common substring is \\"ice\\", which has a length of 3. Constraints: * 1 ≤ |A|, |B| ≤ 1000 Input: The input consists of two lines: * The first line contains the string `A`. * The second line contains the string `B`. Output: Print a single integer representing the length of the longest common substring of A and B. Example: Input: investment vestment Output: 8 Input: abcdef zabxcy Output: 2","solution":"def longest_common_substring_length(A, B): Finds the length of the longest common substring between two strings A and B. m, n = len(A), len(B) dp = [[0] * (n + 1) for _ in range(m + 1)] max_length = 0 for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_length = max(max_length, dp[i][j]) else: dp[i][j] = 0 return max_length"},{"question":"Alex is playing a game with a sequence of numbers and needs help to find the best scoring sequence. The rule is that Alex can pick any number from the sequence, but once picked, cannot pick the immediate next number as well as the immediate previous number. Help Alex to find the maximum sum he can obtain by picking such numbers from the sequence. Input The first line of the input contains an integer T denoting the number of test cases. Each test case starts with an integer n that represents the number of elements in the sequence. The second line of each test case contains n space-separated integers which represent the elements of the sequence. Output For each test case, output a single line containing the maximum sum possible under the given conditions. Constraints 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 -10^4 ≤ sequence element ≤ 10^4 Example Input: 2 5 3 2 5 10 7 3 3 2 7 Output: 15 10","solution":"def max_sum_sequence(T, cases): def max_sequence_sum(sequence): n = len(sequence) if n == 0: return 0 if n == 1: return max(0, sequence[0]) include = 0 exclude = 0 for i in range(n): # Current max excluding i new_exclude = max(include, exclude) # Current max including i include = exclude + sequence[i] exclude = new_exclude return max(include, exclude) results = [] for t in range(T): n = cases[t][0] sequence = cases[t][1] results.append(max_sequence_sum(sequence)) return results"},{"question":"Word Frequency Counter Write a function that takes a paragraph as input and returns a dictionary where the keys are the unique words and the values are the counts of occurrences of those words in the paragraph. The function should ignore punctuation and be case-insensitive. Words are defined as sequences of characters separated by spaces. For simplicity, you can assume the input paragraph will be a string containing only alphabetic characters, spaces, and punctuation marks (. , ! ? \'). Function Signature: ```python def word_frequency_counter(paragraph: str) -> dict: ``` **Examples:** 1. Input: \\"Hello, hello! How are you? I hope you are doing well.\\" Output: {\'hello\': 2, \'how\': 1, \'are\': 2, \'you\': 2, \'i\': 1, \'hope\': 1, \'doing\': 1, \'well\': 1} 2. Input: \\"A man, a plan, a canal, Panama!\\" Output: {\'a\': 3, \'man\': 1, \'plan\': 1, \'canal\': 1, \'panama\': 1} **Constraints:** - The input paragraph will contain at least one word. - Debrief that the input text might have mixed case letters, and your function should treat them as equivalent (e.g., \'Hello\' and \'hello\' should be considered the same word).","solution":"import re from collections import defaultdict def word_frequency_counter(paragraph: str) -> dict: Returns a dictionary where the keys are the unique words and the values are the counts of occurrences of those words in the paragraph. The function ignores punctuation and is case-insensitive. # Using regular expressions to remove punctuation and convert to lower case cleaned_paragraph = re.sub(r\'[^ws]\', \'\', paragraph).lower() # Splitting the paragraph into words words = cleaned_paragraph.split() # Counting the frequency of each word word_counts = defaultdict(int) for word in words: word_counts[word] += 1 return word_counts"},{"question":"Given two strings, A and B, your task is to determine the minimum number of steps required to make them anagrams. In one step, you can either: 1. Insert a character into one of the strings. 2. Delete a character from one of the strings. 3. Replace a character in one of the strings. Two strings are anagrams if they contain the same characters with the same frequencies, regardless of the order. Input - The first line contains the string A, which consists of lowercase English letters. - The second line contains the string B, which consists of lowercase English letters. Output Output a single integer, the minimum number of steps required to make the two strings anagrams. Example Input abcd cbda Output 0 Input abc efg Output 6","solution":"from collections import Counter def min_steps_to_make_anagrams(A, B): Returns the minimum number of steps required to make two strings anagrams. count_A = Counter(A) count_B = Counter(B) steps = 0 # Characters to be added to A or removed from B for char in count_A: if char in count_B: steps += abs(count_A[char] - count_B[char]) else: steps += count_A[char] # Characters to be added to B or removed from A for char in count_B: if char not in count_A: steps += count_B[char] return steps"},{"question":"A tech company is developing a new communication protocol and needs your help to validate it. The protocol transmits messages as a series of words separated by a single space. Your task is to write a program that validates these messages by checking a few properties. Each message must satisfy the following conditions: 1. Each word must contain only lowercase English letters. 2. No word can be repeated within a single message. 3. All words in the message must be sorted in lexicographical (dictionary) order. Your program should determine whether each message from a provided list of messages is valid. -----Input----- The first line of input contains an integer N (1 leq N leq 1000), the number of messages to test. The next N lines contain one message each. Each message is a string consisting of words separated by a single space. The total length of each message is at most 100 characters. -----Output----- For each message, output \\"VALID\\" if the message satisfies all three conditions. Otherwise, output \\"INVALID\\". -----Examples----- Sample Input: 3 a b c d hello world apple banana apple Sample Output: VALID VALID INVALID","solution":"def validate_messages(messages): Validates each message by ensuring: 1. Each word contains only lowercase English letters. 2. No word is repeated within a single message. 3. All words are sorted in lexicographical order. Parameters: messages (list of str): List of messages to be validated. Returns: list of str: List of results (\\"VALID\\" or \\"INVALID\\") for each message. results = [] for message in messages: words = message.split() if any(not word.islower() or not word.isalpha() for word in words): results.append(\\"INVALID\\") continue if len(words) != len(set(words)): results.append(\\"INVALID\\") continue if words != sorted(words): results.append(\\"INVALID\\") continue results.append(\\"VALID\\") return results"},{"question":"You are a software engineer working on a football (soccer) analytics platform. One of the features your team is building is a function to evaluate players\' performance in terms of their average speed during a match. You have access to tracking data that records each player\'s speed at different moments during the game. Your task is to write a function `average_speed` that takes a list of speeds (in km/h) as input and returns the average speed. Requirements: 1. If the list of speeds is empty, return 0. 2. All speeds are non-negative numbers. 3. The average speed should be rounded to 2 decimal places. # Example ```python average_speed([20, 25, 30, 35, 40]) # Output: 30.0 average_speed([15, 10, 20]) # Output: 15.0 average_speed([]) # Output: 0 ``` # Constraints - The function should be named `average_speed`. - The input list can have up to 10,000 speed records. # Function Signature ```python def average_speed(speeds: List[float]) -> float: ``` Write your code in Python.","solution":"def average_speed(speeds): Returns the average speed from a list of speeds. Args: speeds (List[float]): A list of speeds in km/h. All speeds are non-negative numbers. Returns: float: The average speed rounded to 2 decimal places. If the list is empty, return 0. if not speeds: return 0 average = sum(speeds) / len(speeds) return round(average, 2)"},{"question":"Write a function that determines the winner of a classic game of Tic-Tac-Toe. The function receives a 2D list representing a 3x3 Tic-Tac-Toe board where each entry is either `\\"X\\"`, `\\"O\\"`, or `\\"\\"` (an empty string). It should return a string indicating the winner of the game: either `\\"X\\"`, `\\"O\\"`, or `\\"Draw\\"` if there is no winner but all cells are filled. If there are still empty cells and no winner, return `\\"Pending\\"`. # Rules: 1. Any row, column, or diagonal filled entirely with one player\'s marker wins. 2. If all cells are filled and no player has won, the result is `\\"Draw\\"`. 3. If there are empty cells and no player has won yet, the result is `\\"Pending\\"`. Examples ``` [ [\\"X\\", \\"O\\", \\"X\\"], [\\"O\\", \\"X\\", \\"O\\"], [\\"\\", \\"O\\", \\"X\\"] ] ==> \\"X\\" [ [\\"X\\", \\"O\\", \\"X\\"], [\\"X\\", \\"X\\", \\"O\\"], [\\"O\\", \\"X\\", \\"O\\"] ] ==> \\"Draw\\" [ [\\"X\\", \\"O\\", \\"\\"], [\\"\\", \\"X\\", \\"O\\"], [\\"\\", \\"\\", \\"\\"] ] ==> \\"Pending\\" ```","solution":"def check_tic_tac_toe(board): for i in range(3): # Check rows if board[i][0] == board[i][1] == board[i][2] != \\"\\": return board[i][0] # Check columns if board[0][i] == board[1][i] == board[2][i] != \\"\\": return board[0][i] # Check diagonals if board[0][0] == board[1][1] == board[2][2] != \\"\\": return board[0][0] if board[0][2] == board[1][1] == board[2][0] != \\"\\": return board[0][2] # Check for empty cells for row in board: if \\"\\" in row: return \\"Pending\\" return \\"Draw\\""},{"question":"You are the head engineer of a robot retrieval team. There is a warehouse with n robots, each initially positioned at a different, unique location on a number line. To ensure they return to the charging station (at position 0), you need to give them directives to move towards 0 simultaneously. However, there\'s a catch: the robots have limited fuel, and each robot i can only move at most d_i units. Each robot moves at the same constant speed and spends one unit of fuel per unit of distance moved, regardless of the direction. You want to determine if it is possible for all the robots to reach the charging station if each robot uses its maximum available fuel. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 10^5), the number of test cases. For each test case: - The first line contains an integer n (1 le n le 10^5), the number of robots. - The second line contains n distinct integers x_1, x_2, ..., x_n (1 le x_i le 10^9), representing the initial positions of the robots. - The third line contains n integers d_1, d_2, ..., d_n (1 le d_i le 10^9), representing the maximum distance each robot can move. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print \\"YES\\" if it is possible for all robots to reach the charging station (0) using their maximum available fuel. Otherwise, print \\"NO\\". You may output the answer in any case (upper or lower). For example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\", and \\"YES\\" will be recognized as positive responses. -----Examples----- Input 3 3 10 5 15 10 5 15 4 1 10 100 1000 2 20 200 2000 2 50 100 30 70 Output YES YES NO -----Note----- In the first example, each robot can move exactly to the origin, using their maximum allowed fuel. In the second example, the robots can also reach the origin as they all have enough fuel. In the third example, the robot at position 50 can move only 30 units, and the robot at 100 can move 70 units, both of which are insufficient to reach the origin; thus, the answer is \\"NO\\".","solution":"def can_robots_reach_charging_station(t, cases): results = [] for i in range(t): n = cases[i][\'n\'] positions = cases[i][\'positions\'] distances = cases[i][\'distances\'] can_reach = all(positions[j] <= distances[j] for j in range(n)) if can_reach: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given two strings s1 and s2 of equal length consisting of lowercase English letters. Your task is to convert the first string s1 into the second string s2 using a minimum number of operations. In one operation, you can choose any character of the string s1 and replace it with any other lowercase English letter. You need to determine the minimum number of operations required to transform s1 into s2. # Input The first line contains a single integer n (1 ≤ n ≤ 1000), the length of the strings. The second line contains the string s1 of length n. The third line contains the string s2 of length n. # Output Print a single integer representing the minimum number of operations required to transform s1 into s2. # Examples **Input** ``` 5 abcde axcye ``` **Output** ``` 2 ``` **Input** ``` 3 xyz xyz ``` **Output** ``` 0 ``` **Input** ``` 4 abcd efgh ``` **Output** ``` 4 ``` # Note In the first example, you can replace `b` with `x` and `d` with `y`, thus requiring 2 operations to transform `abcde` into `axcye`. In the second example, no changes are needed since the two strings are already identical, thus requiring 0 operations. In the third example, each character in the string s1 needs to be replaced, thus requiring 4 operations.","solution":"def min_operations(n, s1, s2): Returns the minimum number of operations required to transform s1 into s2. operations = 0 for i in range(n): if s1[i] != s2[i]: operations += 1 return operations"},{"question":"Write a function `compress_string` that takes a string as input and returns a compressed version of the string using the counts of repeated characters. If the compressed string is not smaller than the original string, the function should return the original string. The input string will only contain alphabetic characters (both uppercase and lowercase). **Examples** ```python >>> compress_string(\\"aabcccccaaa\\") \\"a2b1c5a3\\" >>> compress_string(\\"abcdef\\") \\"abcdef\\" >>> compress_string(\\"aabcccccaaaZZZZZe\\") \\"a2b1c5a3Z5e1\\" >>> compress_string(\\"aAbBcCdD\\") \\"aAbBcCdD\\" ``` In the first example, the compressed version \\"a2b1c5a3\\" is shorter than the original string \\"aabcccccaaa\\", so the compressed version is returned. In the second example, \\"abcdef\\" is already the shortest, so it remains unchanged.","solution":"def compress_string(s): Compresses the input string using the counts of repeated characters. If the compressed string is not smaller than the original string, the function returns the original string. :param s: Input string containing only alphabetic characters :return: Compressed string or the original string if compression does not reduce the string size if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) compressed.append(str(count)) count = 1 compressed.append(s[-1]) compressed.append(str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Suppose you have a 2D grid of size ( n times m ) where each cell is either empty denoted by \'.\' or blocked denoted by \'#\'. You are given the initial position ((r_0, c_0)) and the target position ((r_t, c_t)) of a robot that can only move in four directions: up, down, left, and right. The robot can only move to another cell if the target cell is within bounds and is empty (i.e., \'.\'). Additionally, the robot has a maximum number of energy units ( E ) which dictates the maximum number of steps it can take. Write a program to determine the minimum number of steps required for the robot to reach the target position, ( (r_t, c_t) ), from the initial position, ( (r_0, c_0) ), within ( E ) steps, or output -1 if it is not possible to reach the target within the given energy limit. Input Format The first line contains three space-separated integers ( n ) (the number of rows), ( m ) (the number of columns), and ( E ) (the maximum number of energy units). The next ( n ) lines each contain ( m ) characters describing the grid, where \'.\' denotes an empty cell and \'#\' denotes a blocked cell. The penultimate line contains two space-separated integers ( r_0 ) and ( c_0 ) (the initial position of the robot). The last line contains two space-separated integers ( r_t ) and ( c_t ) (the target position of the robot). Constraints ( 1 leq n, m leq 1000 ) ( 1 leq E leq 10^6 ) ( 0 leq r_0, r_t < n ) ( 0 leq c_0, c_t < m ) The initial and target positions are on empty cells. Output Format Print a single integer, the minimum number of steps required for the robot to reach the target position within ( E ) steps, or -1 if it is not possible. Sample Input 0 4 4 5 .... .. .... .... 0 0 3 3 Sample Output 0 6 Explanation 0 The grid is a 4x4 grid and the robot starts at position (0, 0) and aims to reach position (3, 3). Despite there being blocked cells, the shortest path from the start to the target position is through the cells (0, 1), (0, 2), (1, 2), (2, 2), and (3, 3), which takes 6 steps. Since 6 ≤ 5, the output is 6. Sample Input 1 4 4 3 .... .. .... .... 0 0 3 3 Sample Output 1 -1 Explanation 1 The grid is still a 4x4 grid and the robot starts at position (0, 0) and aims to reach position (3, 3). However, the shortest path still requires 6 steps, which is more than the provided maximum energy of 3 steps, hence it is not possible within the given energy limit and the output is -1.","solution":"from collections import deque def min_steps_to_reach_target(n, m, E, grid, r_0, c_0, r_t, c_t): # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Validate starting and target positions if grid[r_0][c_0] == \'#\' or grid[r_t][c_t] == \'#\': return -1 # Initialize the queue for BFS queue = deque([(r_0, c_0, 0)]) # (current_row, current_col, steps) visited = set() visited.add((r_0, c_0)) # Perform BFS while queue: curr_r, curr_c, steps = queue.popleft() # Check if we reached the target if (curr_r, curr_c) == (r_t, c_t): return steps # Check if we exceeded the energy limit if steps >= E: continue # Explore all possible directions for dr, dc in directions: new_r, new_c = curr_r + dr, curr_c + dc if 0 <= new_r < n and 0 <= new_c < m and (new_r, new_c) not in visited and grid[new_r][new_c] == \'.\': queue.append((new_r, new_c, steps + 1)) visited.add((new_r, new_c)) return -1"},{"question":"Alice is a collector of unique stamps. She often receives a batch of stamps and wants to know which stamps are duplicates in that batch. As a programmer, you have to help Alice by writing a function that takes the details of multiple batches of stamps and tells her which stamps are duplicates in each batch. Input Format: - The first line contains a number n - denoting the number of batches. - For each batch, the first line contains an integer m - denoting the number of stamps in that batch. - The next line contains m space-separated integers representing the unique IDs of the stamps. Output Format: For each batch, print the duplicate stamp IDs in a single line, separated by a single space. If there are no duplicates, print \\"No duplicates\\". Constraints: 1 ≤ n ≤ 50 1 ≤ m ≤ 100 1 ≤ Stamp ID ≤ 10^4 SAMPLE INPUT 2 5 1 2 3 4 5 6 1 2 3 4 2 1 SAMPLE OUTPUT No duplicates 1 2","solution":"def find_duplicates(batches): Given details of multiple batches of stamps, find and return the duplicate stamps in each batch. :param batches: List of tuples [(m, stamps)] :return: List of strings, where each string contains duplicate stamp IDs or \\"No duplicates\\" results = [] for m, stamps in batches: counter = {} for stamp in stamps: if stamp in counter: counter[stamp] += 1 else: counter[stamp] = 1 duplicates = [stamp for stamp, count in counter.items() if count > 1] if duplicates: results.append(\\" \\".join(map(str, duplicates))) else: results.append(\\"No duplicates\\") return results"},{"question":"Henry is a fan of buying and selling rare antique books. He visits various antique stores regularly to search for potential investments. Each time he spots a book, he notes down the book price at each store. After each trip, he analyzes his notes to determine the most profitable single buy/sell transaction he can make. Henry always buys one book and sells it later (if he makes a profit), and he wants to maximize his profit. Given the prices of the book for each day, can you help him figure out the maximum possible profit he can achieve from a single buy-sell transaction? -----Input----- Input consists of a single line with integers separated by spaces, each representing the book\'s price on consecutive days. The number of days is between 1 and 10^5, and each price is a non-negative integer less than 10^5. -----Output----- Output a single integer representing the maximum possible profit. If no profit is possible, output 0. -----Examples----- Sample Input: 10 7 5 8 11 9 Sample Output: 6 Sample Input: 10 9 8 7 6 Sample Output: 0","solution":"def max_profit(prices): Calculate the maximum profit possible from a single buy-sell transaction. :param prices: List of book prices on consecutive days. :return: Maximum profit possible. If no profit is possible, return 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: min_price = min(min_price, price) potential_profit = price - min_price max_profit = max(max_profit, potential_profit) return max_profit"},{"question":"Given an array Arr[] of size N, the task is to find for each element the next greater element (NGE) in the array. The NGE for an element x is the first greater element on the right side of x in the array. Elements for which no greater element exists, consider the NGE as -1. Note: 0 based indexing. Example 1: Input: N = 5 Arr[] = {4, 5, 2, 10, 8} Output: 5 10 10 -1 -1 Explanation: For Arr[0], the next greater element on the right is 5. For Arr[1], the next greater element on the right is 10. For Arr[2], the next greater element on the right is 10. For Arr[3] and Arr[4], no greater element exists, hence -1. Example 2: Input: N = 4 Arr[] = {3, 2, 7, 5} Output: 7 7 -1 -1 Your Task: You don\'t need to read input or print anything. Your task is to complete the function nextGreaterElement() which takes the N (number of elements in Array Arr) and Arr[] as input parameters and returns an array of the next greater elements for each element. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 1e5 1 ≤ Arr[i] ≤ 1e9","solution":"def nextGreaterElement(N, Arr): Finds the next greater element for each element in the array. result = [-1] * N stack = [] for i in range(N): while stack and Arr[stack[-1]] < Arr[i]: result[stack.pop()] = Arr[i] stack.append(i) return result"},{"question":"Given a string of lowercase letters, determine the length of the longest contiguous substring where all the characters are the same. Input The input will be a single line string `s` consisting of lowercase letters. Output Print a single integer representing the length of the longest contiguous substring with identical characters. Example Input: aabbbccaaa Output: 3","solution":"def longest_contiguous_substring(s): Returns the length of the longest contiguous substring where all characters are the same. Parameters: s (str): Input string consisting of lowercase letters. Returns: int: Length of the longest contiguous substring with identical characters. if not s: return 0 max_len = 1 current_len = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_len += 1 else: if current_len > max_len: max_len = current_len current_len = 1 return max(max_len, current_len)"},{"question":"A software company has a system where tasks are processed in a queue. Each task requires a certain amount of time to complete, and a new task cannot begin until the previous one finishes. However, the company has introduced a concept of \'parallel task slots\' where multiple tasks can be processed simultaneously without waiting for the others to finish. Each slot can run one task at a time. You are given the number of tasks to be processed and the time required for each task. Additionally, you are given the number of parallel task slots available. The objective is to determine the minimum total time required to complete all tasks given the number of parallel slots. Input: The first line of input contains an integer T denoting the number of test cases. Each test case consists of two parts: 1. An integer S denoting the number of parallel task slots. 2. A list of space-separated integers where each integer represents the time required for each task. Output: For each test case, print the minimum total time required to complete all tasks. Constraints: 1 ≤ T ≤ 30 1 ≤ S ≤ 100 1 ≤ Number of tasks ≤ 100 1 ≤ Time for each task ≤ 300 SAMPLE INPUT 2 2 5 3 8 6 3 4 2 7 3 9 SAMPLE OUTPUT 11 9 Explanation: Test Case #1: There are 2 parallel slots and 4 tasks with times: [5, 3, 8, 6]. At time = 0 minutes, tasks 1 and 2 (5 and 3 minutes) start in parallel. At time = 3 minutes, task 2 finishes, task 4 (6 minutes) starts. At time = 5 minutes, task 1 finishes, task 3 (8 minutes) starts. At time = 9 minutes, task 4 finishes. At time = 11 minutes, task 3 finishes. Total time = 11 minutes. Test Case #2: There are 3 parallel slots and 5 tasks with times: [4, 2, 7, 3, 9]. At time = 0 minutes, tasks 1, 2, and 3 (4, 2, 7 minutes) start in parallel. At time = 2 minutes, task 2 finishes, task 4 (3 minutes) starts. At time = 4 minutes, task 1 finishes, task 5 (9 minutes) starts. At time = 7 minutes, task 3 finishes. At time = 9 minutes, task 4 finishes. At time = 13 minutes, task 5 finishes. Total time = 13 minutes.","solution":"from heapq import heappop, heappush def min_total_time(t, cases): results = [] for case in cases: S, tasks = case[\'slots\'], case[\'tasks\'] # Min-heap to simulate the parallel slots with task end times heap = [] for task in tasks: if len(heap) < S: heappush(heap, task) else: min_time = heappop(heap) heappush(heap, min_time + task) while len(heap) > 1: heappop(heap) results.append(heappop(heap)) return results"},{"question":"Your manager has tasked you with writing a program that assists in managing warehouse inventory. You have to design an inventory check system which must keep track of the stock levels of different items. The system should allow adding stock, removing stock, and providing current stock levels. The operations to be supported are as follows: 1. `add_item(item_id, quantity)`: Add a given quantity of the specified item to the inventory. If the item does not exist, it should be added to the inventory. 2. `remove_item(item_id, quantity)`: Remove a given quantity of the specified item from the inventory. If the item does not exist or the quantity to be removed exceeds the current stock, it should print \\"Item not available\\" or \\"Insufficient stock\\" respectively. 3. `check_stock(item_id)`: Output the current stock level of the specified item. If the item does not exist in the inventory, it should print \\"Item not found\\". You need to implement this functionality and handle a series of operations. The operations and their parameters will be given as input. Input - The first line contains `n` (1 ≤ n ≤ 1000) — the number of operations. - The following `n` lines each describe an operation. Each line starts with a keyword which can be either \\"add\\", \\"remove\\", or \\"check\\", followed by the item_id (a non-negative integer) and the quantity (for \\"add\\" and \\"remove\\" operations only). Output For each \\"check\\" operation, output the current stock level or an appropriate message if the item is not found in the inventory. Example Input 5 add 101 50 add 102 25 remove 101 30 check 101 check 103 Output 20 Item not found Input 7 add 200 100 remove 200 70 remove 200 40 add 201 30 check 200 check 201 check 202 Output Insufficient stock 30 Item not found Ensure your implementation is efficient and handles edge cases appropriately.","solution":"class Inventory: def __init__(self): self.inventory = {} def add_item(self, item_id, quantity): if item_id in self.inventory: self.inventory[item_id] += quantity else: self.inventory[item_id] = quantity def remove_item(self, item_id, quantity): if item_id not in self.inventory: print(\\"Item not available\\") elif self.inventory[item_id] < quantity: print(\\"Insufficient stock\\") else: self.inventory[item_id] -= quantity def check_stock(self, item_id): if item_id in self.inventory: print(self.inventory[item_id]) else: print(\\"Item not found\\") def process_operations(operations): inventory = Inventory() for operation in operations: parts = operation.split() op_type = parts[0] item_id = int(parts[1]) if op_type == \\"add\\": quantity = int(parts[2]) inventory.add_item(item_id, quantity) elif op_type == \\"remove\\": quantity = int(parts[2]) inventory.remove_item(item_id, quantity) elif op_type == \\"check\\": inventory.check_stock(item_id) # Example usage operations = [ \\"add 101 50\\", \\"add 102 25\\", \\"remove 101 30\\", \\"check 101\\", \\"check 103\\" ] process_operations(operations)"},{"question":"A famous adventurer is planning his next big expedition to a vast network of caves. To make sure he doesn\'t get lost, he decides to create a map of the cave system that indicates the shortest path between various points within the caves. The cave system can be represented as an undirected graph where each cave is a node and each path between caves is an edge with a certain length. The adventurer needs your help to determine the shortest path between two specified caves. -----Input----- The first line contains two integers N and M, representing the number of caves (nodes) and the number of paths (edges) respectively. The next M lines each contain three integers u, v, and l, where u and v represent the connected caves and l represents the length of the path between them. The last line contains two integers S and T, where S is the starting cave and T is the target cave. -----Output----- Print a single integer representing the length of the shortest path from cave S to cave T. If there is no path between these caves, print \\"NO PATH\\" (without quotes). -----Constraints----- 1 <= N <= 1000 1 <= M <= 10000 1 <= u, v <= N 1 <= l <= 1000 -----Example 1----- Input: 5 6 1 2 4 1 3 1 3 4 2 2 3 3 2 4 1 4 5 6 1 5 Output: 9 -----Example 2----- Input: 4 2 1 2 4 1 3 7 3 4 Output: NO PATH -----Explanation of Sample Cases----- Example 1: The shortest path from cave 1 to cave 5 is: 1 -> 3 -> 4 -> 5 with a total length of 9. Example 2: There is no path from cave 3 to cave 4 in the provided cave system.","solution":"import heapq def dijkstra(N, edges, S, T): # Create a graph from the edges graph = {i: [] for i in range(1, N+1)} for u, v, l in edges: graph[u].append((v, l)) graph[v].append((u, l)) # Use a min heap as the priority queue pq = [(0, S)] # (distance, node) distances = {i: float(\'inf\') for i in range(1, N+1)} distances[S] = 0 visited = set() while pq: current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[T] if distances[T] != float(\'inf\') else \\"NO PATH\\" def shortest_path_in_caves(N, M, edges, S, T): return dijkstra(N, edges, S, T)"},{"question":"Sam is trying to detect fraudulent transactions in a list of financial transactions. Each transaction is represented by a tuple `(amount, category)` where `amount` is a non-negative integer representing the transaction amount and `category` is a string representing the type of the transaction. A transaction is considered potentially fraudulent if: - It is larger than the average transaction amount in its category. - It is in the same category as at least one other transaction. Write a function `find_fraudulent_transactions(transactions)` that identifies potentially fraudulent transactions. The function should: - Take in a list of transactions `transactions` where each transaction is a tuple `(amount, category)`. - Return a list of tuples representing the potentially fraudulent transactions. Each tuple should be in the same format as the input transactions. **Constraints:** - The length of transactions will not exceed 10,000. - Transaction amounts will be non-negative integers and will not exceed 10^6. - Category names will only consist of lowercase letters and will not exceed 50 characters in length. **Input:** - A list of tuples `transactions`, where each tuple contains an integer `amount` and a string `category`. **Output:** - A list of tuples representing the potentially fraudulent transactions. **Example:** Input: ```python transactions = [ (100, \\"food\\"), (200, \\"entertainment\\"), (150, \\"food\\"), (300, \\"food\\"), (250, \\"entertainment\\"), (50, \\"transport\\"), ] ``` Output: ```python [(300, \\"food\\"), (250, \\"entertainment\\")] ``` In the above example, there are three `food` transactions with amounts `[100, 150, 300]`. The average amount for the `food` category is `(100 + 150 + 300) / 3 = 183.33`. Since 300 is greater than 183.33, it is considered potentially fraudulent. Similarly, for the `entertainment` category, the average is `(200 + 250) / 2 = 225`. Since 250 is greater than 225, it is considered potentially fraudulent. The `transport` category only has one transaction, so no potentially fraudulent transactions are identified in that category.","solution":"def find_fraudulent_transactions(transactions): from collections import defaultdict # Create dictionaries to store the total amounts and counts per category totals = defaultdict(int) counts = defaultdict(int) # Calculate the total amounts and counts per category for amount, category in transactions: totals[category] += amount counts[category] += 1 # Calculate the average amounts per category averages = {category: totals[category] / counts[category] for category in totals} # Find potentially fraudulent transactions fraudulent_transactions = [ (amount, category) for amount, category in transactions if counts[category] > 1 and amount > averages[category] ] return fraudulent_transactions"},{"question":"Alex is fascinated by Binary Trees and he wants to perform a unique kind of traversal on them. Given a binary tree, he\'s interested in finding the \\"boundary traversal\\" of the tree. The boundary traversal includes the nodes on the boundary of the tree in an anti-clockwise direction starting from the root. The boundary includes the left boundary (excluding the leaf nodes), the leaf nodes, and the right boundary (excluding the leaf nodes and root). You are required to help Alex implement the function to perform this special traversal. Input: - The first line contains a single integer N, the number of nodes in the tree. - The next N lines each contain three integers x, y, z where x is the value of the current node, y is the value of the left child of the current node or -1 if there is no left child, and z is the value of the right child of the current node or -1 if there is no right child. Output: - Print the values of the nodes in the boundary traversal of the tree. Constraints: 1 ≤ N ≤ 10^4 Values of the nodes are unique and range from 1 to 10^5. Example Input: 5 1 2 3 2 4 -1 4 -1 -1 3 -1 5 5 -1 -1 Example Output: 1 2 4 5 3 Explanation: The binary tree is as follows: ``` 1 / 2 3 / 4 5 ``` The boundary traversal in anti-clockwise direction starting from the root includes the left boundary 1 -> 2 (excluding 4 since it\'s a leaf), then the leaf nodes 4 and 5, and finally the right boundary 3 (excluding 5 since it\'s a leaf). Hence the output is 1 2 4 5 3.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(node_info): nodes = {info[0]: TreeNode(info[0]) for info in node_info} root = nodes[node_info[0][0]] for value, left, right in node_info: if left != -1: nodes[value].left = nodes[left] if right != -1: nodes[value].right = nodes[right] return root def boundary_traversal(root): if not root: return [] def left_boundary(node): if node: if node.left: result.append(node.value) left_boundary(node.left) elif node.right: result.append(node.value) left_boundary(node.right) def right_boundary(node): if node: if node.right: right_boundary(node.right) result.append(node.value) elif node.left: right_boundary(node.left) result.append(node.value) def leaves(node): if node: leaves(node.left) if not node.left and not node.right: result.append(node.value) leaves(node.right) result = [root.value] left_boundary(root.left) leaves(root.left) leaves(root.right) right_boundary(root.right) return result def boundary_traversal_from_input(node_count, node_info): root = build_tree(node_info) return boundary_traversal(root)"},{"question":"Bob frequently creates complex shapes out of LEGO blocks. He particularly loves rectangles and wants to make them perfect. Each LEGO block has a width and a height, and Bob wants to check if his arrangement can form a perfect rectangle without any overlaps and gaps. Bob has an arrangement plan consisting of n blocks. Each block has a starting position in a 2D plane, along with its width and height. Help Bob check if his arrangement is perfect. A perfect rectangle is formed if: 1. The blocks entirely cover a rectangular area without any gaps. 2. No two blocks overlap. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) — the number of blocks. Each of the next n lines contains four integers x, y, w, h (1 ≤ x, y, w, h ≤ 10^4) — the coordinates of the top-left corner of the block and its width and height. -----Output----- Print \\"YES\\" if the blocks form a perfect rectangle, otherwise print \\"NO\\". -----Examples----- Input 3 1 1 2 2 3 1 2 2 1 3 4 2 Output YES Input 3 1 1 2 2 3 1 2 2 1 3 3 1 Output NO","solution":"def is_perfect_rectangle(n, blocks): total_area = 0 min_x = min_y = float(\'inf\') max_x = max_y = float(\'-inf\') block_set = set() for x, y, w, h in blocks: total_area += w * h min_x = min(min_x, x) min_y = min(min_y, y) max_x = max(max_x, x + w) max_y = max(max_y, y + h) for i in range(w): for j in range(h): if (x + i, y + j) in block_set: return \\"NO\\" block_set.add((x + i, y + j)) if total_area == (max_x - min_x) * (max_y - min_y): return \\"YES\\" else: return \\"NO\\""},{"question":"In a far away village, there is a unique market that operates as a barter system of goods, but with a special twist. Each shop in the market only operates on certain days of the week and offers a unique item for barter on each of those days. Due to unpredictable village laws, the shop schedules vary every week, and a shop might be open for a different number of days each week. You are given a list of shops along with their schedules for the week. Each schedule contains the days of the week (represented as integers from 1 to 7, with 1 being Monday and 7 being Sunday) on which the shop is open and the item offered on that particular day. Your task is to determine the maximum number of different items you can collect by visiting one shop each day for a week. Each shop may only be visited once per week. Note that items are considered different based on their name, even if they are from different shops or available on different days. Input format The first line of the input will contain a single integer N (N ≤ 100000) indicating the number of shops. Lines 2, 3, ..., N+1 describe the schedules of the shops. Line i+1 contains an integer K (1 ≤ K ≤ 7) followed by K pairs of integers Di and string Ii, where Di represents the day of the week the shop is open and Ii is the item offered on that day. Output format Your output must consist of a single line containing a single integer M, indicating the maximum number of different items that can be collected in a week. Example: Sample input: 3 2 1 Apple 2 Banana 3 2 Apple 3 Carrot 7 Milk 3 3 Carrot 5 Milk 6 Bread Sample output: 5","solution":"def max_different_items_collected(N, schedules): from collections import defaultdict # Create a dictionary to store items available on each day day_to_items = defaultdict(set) for schedule in schedules: K = schedule[0] days_items = schedule[1:] for i in range(K): day = days_items[2 * i] item = days_items[2 * i + 1] day_to_items[day].add(item) # Extract all items from each day collected_items = set() for day in range(1, 8): if day in day_to_items: collected_items.update(day_to_items[day]) return len(collected_items) # Example usage if __name__ == \'__main__\': N = 3 schedules = [ [2, 1, \\"Apple\\", 2, \\"Banana\\"], [3, 2, \\"Apple\\", 3, \\"Carrot\\", 7, \\"Milk\\"], [3, 3, \\"Carrot\\", 5, \\"Milk\\", 6, \\"Bread\\"] ] print(max_different_items_collected(N, schedules)) # Output: 5"},{"question":"Consider a grid-based game in which you need to move from the top-left corner to the bottom-right corner of an m times n grid. You can only move either down or right at any point in time. However, some cells are obstacles and cannot be traversed. Your goal is to find out how many unique paths are available to reach the bottom-right corner from the top-left corner considering the obstacles. Example Given the following grid: [ begin{array}{cccc} 0 & 0 & 0 & 0 0 & 1 & 0 & 0 0 & 0 & 0 & 0 0 & 0 & 0 & 0 end{array} ] There are 4 unique paths to reach the bottom-right corner from the top-left corner. Function Description Complete the unique_paths_with_obstacles function in the editor below. unique_paths_with_obstacles has the following parameter(s): bool grid[m][n]: a 2D array where 1 represents an obstacle and 0 represents a free cell Returns int: the number of unique paths to reach the bottom-right corner from the top-left corner Input Format The first line contains two integers, m and n, the dimensions of the grid. Each of the next m lines contains n space-separated integers representing the grid. Constraints 1 leq m, n leq 100 grid[i][j] is either 0 or 1 Sample Input 0 3 3 0 0 0 0 1 0 0 0 0 Sample Output 0 2 Explanation 0 The two possible paths are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Sample Input 1 5 4 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 Sample Output 1 5 Explanation 1 The five possible paths are: 1. Down -> Down -> Right -> Right -> Right -> Down 2. Down -> Right -> Right -> Right -> Down -> Down 3. Right -> Down -> Right -> Right -> Down -> Down 4. Right -> Right -> Down -> Down -> Down -> Right 5. Down -> Down -> Down -> Right -> Right -> Right","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from top-left to bottom-right corner of a grid considering obstacles. Parameters: grid (list of list of int): The grid where 1 represents an obstacle and 0 represents a free cell. Returns: int: The number of unique paths. if not grid: return 0 m, n = len(grid), len(grid[0]) # If the starting cell has an obstacle, return 0 as there is no way to move anywhere if grid[0][0] == 1: return 0 # Initialize a DP table with all zeroes dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Fill the values for the first row for col in range(1, n): dp[0][col] = dp[0][col - 1] if grid[0][col] == 0 else 0 # Fill the values for the first column for row in range(1, m): dp[row][0] = dp[row - 1][0] if grid[row][0] == 0 else 0 # Fill the rest of the DP table for row in range(1, m): for col in range(1, n): if grid[row][col] == 0: dp[row][col] = dp[row - 1][col] + dp[row][col - 1] else: dp[row][col] = 0 return dp[m - 1][n - 1]"},{"question":"You are given a rectangular field of size N x M filled with different characters. You need to identify the largest rectangular sub-field (sub-matrix) that contains only the character \'X\'. Write a program to find the area of this rectangular sub-field. Input The input consists of multiple lines: - The first line contains two integers N and M (1 ≤ N, M ≤ 1000) representing the dimensions of the field. - The following N lines each contain M characters representing the field, where each character is either \'X\' or \'.\'. Output Output a single integer, the area of the largest rectangular sub-field that contains only the character \'X\'. Example Input 4 5 X.X.X XX..X XXXX. XXX.X Output 6 Input 3 3 ... XXX XXX Output 6","solution":"def max_rectangle_area_with_X(N, M, field): def largest_rectangle(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top = stack.pop() area = histogram[top] * ((index - stack[-1] - 1) if stack else index) max_area = max(max_area, area) while stack: top = stack.pop() area = histogram[top] * ((index - stack[-1] - 1) if stack else index) max_area = max(max_area, area) return max_area if N == 0 or M == 0: return 0 max_area = 0 heights = [0] * M for i in range(N): for j in range(M): if field[i][j] == \'X\': heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, largest_rectangle(heights)) return max_area # Example usage: # N, M = 4, 5 # field = [ # \\"X.X.X\\", # \\"XX..X\\", # \\"XXXX.\\", # \\"XXX.X\\" # ] # print(max_rectangle_area_with_X(N, M, field)) # Output should be 6"},{"question":"You are given two strings, \'pattern\' and \'string\'. Your task is to check if \'string\' contains any permutation of \'pattern\'. A permutation is any rearrangement of \'pattern\'s characters. For instance, if the \'pattern\' is \\"abc\\", then \\"bca\\", \\"cab\\", and \\"abc\\" are all valid permutations. The function should return \\"True\\" if such a permutation exists in \'string\' as a substring, otherwise return \\"False\\". Example 1: Input: pattern = \\"ab\\", string = \\"eidbaooo\\" Output: True Explanation: \\"ba\\" is a permutation of \\"ab\\" and is present in the string. Example 2: Input: pattern = \\"ab\\", string = \\"eidboaoo\\" Output: False Explanation: There is no permutation of \\"ab\\" in \\"eidboaoo\\". Your Task: You do not need to read input or print anything. The function \'checkInclusion()\' should receive two strings, `pattern` and `string`, and return a boolean value indicating the presence of a permutation of `pattern` in `string`. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - 1 <= pattern.length, string.length <= 10^4 - Both strings consist of lowercase English letters only.","solution":"def checkInclusion(pattern, string): from collections import Counter # Helper function to compare two frequency dictionaries def matches(s1_count, s2_count): for char in s1_count: if s1_count[char] != s2_count[char]: return False return True # Frequency map of the pattern pattern_count = Counter(pattern) # Frequency map of the current window in the string window_count = Counter() len_pattern = len(pattern) len_string = len(string) for i in range(len_string): # Add the current character to the window window_count[string[i]] += 1 # Remove the character from the left side if window size exceeds pattern size if i >= len_pattern: if window_count[string[i - len_pattern]] == 1: del window_count[string[i - len_pattern]] else: window_count[string[i - len_pattern]] -= 1 # Compare the two frequency maps if matches(pattern_count, window_count): return True return False"},{"question":"You are given an array C of size N that contains integers. You want to partition this array into exactly K non-empty contiguous subarrays. The cost of a subarray is the sum of its elements. The total cost of a partitioning is the maximum cost among its K subarrays. Your task is to find the minimum possible total cost of a partitioning. ------ Input Format ------ - The first line contains two integers N and K, the size of the array C and the number of subarrays. - The next line contains N space-separated integers, where the i-th integer denotes C_i. ------ Output Format ------ Print a single integer representing the minimum possible total cost of a partitioning. ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ K ≤ N -10^9 ≤ C_i ≤ 10^9 ----- Sample Input 1 ------ 5 3 1 2 3 4 5 ----- Sample Output 1 ------ 6 ----- Explanation 1 ------ Partition the array C = [1, 2, 3, 4, 5] into three subarrays: - Subarray 1: [1, 2] - Subarray 2: [3] - Subarray 3: [4, 5] The subarray with the maximum cost is [4, 5] with a cost of 9. Another valid partitioning could be: - Subarray 1: [1, 2, 3] - Subarray 2: [4] - Subarray 3: [5] Here, the subarray with the maximum cost is [1, 2, 3], which has a cost of 6. Thus, the minimum possible total cost is 6.","solution":"def can_partition(nums, K, max_sum): Helper function to determine if we can partition the array into at most K subarrays with each subarray having a sum less than or equal to max_sum. current_sum = 0 current_k = 1 for num in nums: if current_sum + num > max_sum: current_k += 1 current_sum = num if current_k > K: return False else: current_sum += num return True def min_max_cost_partition(C, N, K): Returns the minimum possible total cost of partitioning the array into exactly K subarrays. low, high = max(C), sum(C) while low < high: mid = (low + high) // 2 if can_partition(C, K, mid): high = mid else: low = mid + 1 return low"},{"question":"A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). However, creating the longest palindrome out of a given string is a classic problem. Write a function that takes a string `inputString` and returns the length of the longest palindrome that can be built with the characters from `inputString`. Function Signature ```python def longest_palindrome_length(inputString: str) -> int: ``` Constraints - The input string will only contain letters (both uppercase and lowercase). - The input string will have at most 1000 characters. Example ```python longest_palindrome_length(\\"abccccdd\\") # should return 7 (The longest palindromes are \\"dccaccd\\", \\"dccbccd\\", etc.) longest_palindrome_length(\\"a\\") # should return 1 (\\"a\\" itself is a palindrome) longest_palindrome_length(\\"aaabbbbb\\") # should return 7 (The longest palindrome is \\"abbbba\\" or \\"bbabbb\\") ``` Notes - You do not need to form the actual palindrome sequence, just compute its length. - Letters are case-sensitive, so \\"Aa\\" is not considered a palindrome.","solution":"def longest_palindrome_length(inputString: str) -> int: Returns the length of the longest palindrome that can be built with the characters from inputString. from collections import Counter char_count = Counter(inputString) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 # Add one odd character in the center return length"},{"question":"You are given a warehouse and want to manage the inventory of boxes. The warehouse is initially empty, and you need to handle a sequence of operations including adding boxes, removing boxes, and querying the count of boxes greater than a specific weight. Each operation falls into one of three types: 1. A w — add a box with weight w to the warehouse. 2. R q — remove q boxes with the lowest weights from the warehouse. 3. C w — count the number of boxes in the warehouse with weight greater than w. The operations should be executed in the order they appear in the input. Note: Ensure that when removing boxes, if there are fewer than q boxes in the warehouse, remove all of them. # Input - The first line contains an integer n (1 le n le 10^5) — the number of operations. - The next n lines each contain one operation in the format described above. # Output Print answers for each query of type 3 in the order they appear in the input. # Examples Input ``` 5 A 10 A 20 A 15 C 10 R 2 C 10 ``` Output ``` 2 1 ``` Note - After the first command (adding a box of weight 10), the warehouse contains: [10]. - After the second command (adding a box of weight 20), the warehouse contains: [10, 20]. - After the third command (adding a box of weight 15), the warehouse contains: [10, 15, 20]. - The query \\"C 10\\" counts boxes with weight greater than 10 -> [15, 20] -> 2 boxes. - The command \\"R 2\\" removes the two lowest weight boxes: [10, 15] -> leaving the warehouse with [20]. - The query \\"C 10\\" counts boxes with weight greater than 10 -> [20] -> 1 box.","solution":"import bisect class Warehouse: def __init__(self): self.inventory = [] def add_box(self, weight): bisect.insort(self.inventory, weight) def remove_boxes(self, q): self.inventory = self.inventory[min(len(self.inventory), q):] def count_boxes_greater_than(self, weight): idx = bisect.bisect_right(self.inventory, weight) return len(self.inventory) - idx def manage_warehouse(n, operations): warehouse = Warehouse() results = [] for op in operations: cmd, val = op.split() val = int(val) if cmd == \'A\': warehouse.add_box(val) elif cmd == \'R\': warehouse.remove_boxes(val) elif cmd == \'C\': results.append(warehouse.count_boxes_greater_than(val)) return results"},{"question":"You are given a list of integers representing the heights of buildings in a city skyline. Each building has a width of 1. You are required to paint the buildings such that no two adjacent buildings are painted the same color. There are exactly three colors available: red, green, and blue. Your task is to determine the number of valid ways to color the buildings following the given constraints. -----Constraints----- - The number of buildings is an integer, n (1 ≤ n ≤ 10000). - The heights of the buildings are represented as a list of integers, heights, where heights[i] (1 ≤ heights[i] ≤ 1000). -----Input----- Input is given from Standard Input in the following format: ```shell n heights_1 heights_2 ... heights_n ``` -----Output----- Print the number of valid ways to color the buildings. -----Sample Input----- 3 2 3 1 -----Sample Output----- 6 Explanation: There are 6 valid ways to color the buildings: 1. Red, Green, Blue 2. Red, Blue, Green 3. Green, Red, Blue 4. Green, Blue, Red 5. Blue, Red, Green 6. Blue, Green, Red","solution":"def count_valid_colorings(n, heights): # There are 3 choices for the first building # and 2 choices for each subsequent building if n == 1: return 3 else: return 3 * (2 ** (n - 1)) # Input reading if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) heights = list(map(int, data[1:])) # Output the result print(count_valid_colorings(n, heights))"},{"question":"In the mystical land of Orangina, the inhabitants are particularly fascinated by a unique series of numbers known as \\"Sparse Numbers.\\" A number is called sparse if there are no two consecutive set bits (1s) in its binary representation. For example, 10 (binary 1010) and 32 (binary 100000) are sparse numbers but 6 (binary 110) and 9 (binary 1001) are not. Your task is to determine the smallest sparse number which is greater than or equal to a given number X. Example 1: Input: X = 6 Output: 8 Explanation: The binary representation of 6 is 110 which is not sparse. The next sparse number is 8 with binary representation 1000. Example 2: Input: X = 4 Output: 4 Explanation: The binary representation of 4 is 100 which is already sparse. Example 3: Input: X = 38 Output: 40 Explanation: The binary representation of 38 is 100110 which is not sparse. The next sparse number is 40 with binary representation 101000. Your Task: You don\'t need to read or print anything. Your task is to complete the function `nextSparseNumber()` which takes integer X as input parameter and returns the smallest sparse number greater than or equal to X. Expected Time Complexity: O(logX) Expected Auxiliary Space: O(1) Constraints: 1 <= X <= 10^{18}","solution":"def nextSparseNumber(X): This function finds the smallest sparse number which is greater than or equal to X. def isSparse(n): return (n & (n >> 1)) == 0 # Start from the given number X while not isSparse(X): X += 1 return X"},{"question":"Given a sequence of integers, the problem is to find the longest subsequence that is in non-decreasing order, but you can only choose elements that are at even indices in the original sequence. An element at index i is considered to be at an even index if i is an even number. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the length of the sequence. The second line contains N space-separated integers A_1, A_2, ..., A_N denoting the elements of the sequence. ------ Output ------ For each test case, print a single line containing one integer — the length of the longest subsequence that can be formed which is in non-decreasing order using only the elements at even indices from the original sequence. ------ Constraints ------ 1 leq T leq 100 1 leq N leq 1000 1 leq A_i leq 10^6 ------ Sample Input 1 ------ 2 5 1 3 2 4 3 6 4 6 1 5 3 8 ------ Sample Output 1 ------ 3 2 ------ Explanation ------ Example case 1: The longest subsequence using even indices is {1, 2, 3}. Example case 2: The longest subsequence using even indices is {4, 6} with either {4, 8}.","solution":"def longest_non_decreasing_subsequence(T, test_cases): results = [] for i in range(T): N, sequence = test_cases[i] even_indices_elements = [sequence[j] for j in range(0, N, 2)] longest_length = 1 current_length = 1 for k in range(1, len(even_indices_elements)): if even_indices_elements[k] >= even_indices_elements[k-1]: current_length += 1 else: longest_length = max(longest_length, current_length) current_length = 1 longest_length = max(longest_length, current_length) results.append(longest_length) return results"},{"question":"Imagine you are managing a warehouse that keeps track of different types of items. Each item belongs to a category, and each category has a stock count. You need to create a system to manage the inventory, where you can add new items, update the count of existing items, and retrieve the count of items in a particular category. Implement a function `warehouse_manager` that follows these specifications: - The function `warehouse_manager` takes two arguments: an initial inventory dictionary and a list of operations. - The inventory dictionary has categories as keys (strings) and their stock counts as values (integers). - The operations list contains tuples where each tuple represents an operation to be performed on the inventory. - Each tuple in the operations list can be one of three types: 1. `(\'add\', category, count)` - Adds `count` items to the `category`. If the category doesn\'t exist, it should be created with the given count. 2. `(\'update\', category, new_count)` - Sets the stock count of the `category` to `new_count`. If the category doesn\'t exist, create it with `new_count`. 3. `(\'retrieve\', category)` - Returns the stock count of the `category`. If the category doesn\'t exist, return 0. - The function should return a list of results for every \'retrieve\' operation in the order they appear in the operations list. **Example:** ```python def warehouse_manager(inventory, operations): # Implement the function here. # Example usage: initial_inventory = { \'electronics\': 50, \'clothing\': 200, \'groceries\': 150, } operations = [ (\'add\', \'electronics\', 20), (\'update\', \'clothing\', 180), (\'retrieve\', \'groceries\'), (\'retrieve\', \'furniture\'), (\'add\', \'stationery\', 100), (\'retrieve\', \'stationery\'), ] print(warehouse_manager(initial_inventory, operations)) # Output: [150, 0, 100] ``` In this example: - The `electronics` category is updated to 70. - The `clothing` category is updated to 180. - The `groceries` category remains 150. - The `furniture` category does not exist, so its count is 0. - The `stationery` category is created with a count of 100.","solution":"def warehouse_manager(inventory, operations): Manages the warehouse inventory based on the provided operations. Args: inventory (dict): A dictionary representing the initial inventory with categories as keys and counts as values. operations (list): A list of tuples where each tuple represents an operation. Returns: list: A list of results for \'retrieve\' operations. results = [] for operation in operations: op_type = operation[0] category = operation[1] if op_type == \'add\': count = operation[2] if category in inventory: inventory[category] += count else: inventory[category] = count elif op_type == \'update\': new_count = operation[2] inventory[category] = new_count elif op_type == \'retrieve\': results.append(inventory.get(category, 0)) return results"},{"question":"The Codechef Supreme School is organizing a programming contest. Each participant is given a certain number of problems to solve. A participant is awarded a certificate only if they solve at least Y problems. \\"Try Again\\" if they do not meet the criteria. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains two integers P which is the number of problems solved by the participant and Y which is the minimum number of problems required to earn a certificate. -----Output:----- For each test case, output in a single line \\"Certificate Awarded\\" if the participant meets or exceeds the requirement, \\"Try Again\\" otherwise. You cannot give your answer as \\"certificate awarded\\", \\"CERTIFICATE AWARDED\\", \\"try again\\" or any other variation. -----Constraints----- - 1 leq T leq 10^4 - 0 leq P leq 100 - 1 leq Y leq 100 -----Sample Input:----- 3 7 5 3 5 10 10 -----Sample Output:----- Certificate Awarded Try Again Certificate Awarded -----EXPLANATION:----- The first participant solved more problems than the minimum required and thus receives a certificate. The second participant did not solve enough problems. The third participant solved exactly the required number of problems to receive a certificate.","solution":"def evaluate_participant_performance(T, test_cases): Determines if participants receive a certificate based on the number of problems they solved. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains two integers (P, Y) where: P is the number of problems solved, Y is the minimum number of problems required to earn a certificate. Returns: list of str: \\"Certificate Awarded\\" or \\"Try Again\\" for each test case depending on whether the number of problems solved is at least the minimum required. result = [] for P, Y in test_cases: if P >= Y: result.append(\\"Certificate Awarded\\") else: result.append(\\"Try Again\\") return result"},{"question":"After a thrilling adventure, you find yourself in a mysterious forest. The forest is organized in an m x n grid, where each cell can either be open (\'.\') or blocked (\'#\'). You can move up, down, left, or right, but cannot move into cells that are blocked. You have a mission: find the shortest path from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1). If such a path exists, output the length of the path. If no such path exists, output -1. **Input** - The first line contains two space-separated integers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the forest grid. - The next m lines each contain a string of length n consisting of characters \'.\' or \'#\'. **Output** Print a single integer — the length of the shortest path from the top-left to the bottom-right corner. If no such path exists, print -1. **Example** **Input** 4 4 . . . . # # . # . . . . # # # . **Output** 6 **Note** In the example, the path of length 6 is one of the shortest paths. You start at (0, 0), move to (1, 0), (2, 0), (2, 1), (2, 2), (2, 3), and finally reach the bottom-right corner at (3, 3). If no path exists from the start to the destination, the output would be -1.","solution":"from collections import deque def shortest_path_forest(m, n, grid): if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return -1 # Directions for moving up, down, left, right directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] # Queue for BFS (position, distance) queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == m-1 and y == n-1: return dist + 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Our friend \'DP\' has now moved on to study graph theory in his math class. He has learned about bipartite graphs and has found them quite fascinating. A bipartite graph is a graph whose nodes can be divided into two disjoint sets U and V such that every edge connects a node in U to a node in V. He wonders how many different bipartite graphs can be constructed given two sets of nodes of sizes m and n. Given two integers m and n, write a program to calculate the number of different bipartite graphs that can be constructed. Each graph is represented as an adjacency matrix where entry (i, j) is 1 if there is an edge between node i of set U and node j of set V, and 0 otherwise. Constraints: 1 ≤ m, n ≤ 15 Input: Two integers m and n separated by space. Output: An integer representing the number of different bipartite graphs that can be constructed. SAMPLE INPUT 2 3 SAMPLE OUTPUT 64 Explanation: Each entry in the adjacency matrix can be either 0 or 1, and there are 2^(m*n) different matrices possible. For m=2 and n=3, there are 2^(2*3) = 64 different bipartite graphs.","solution":"def count_bipartite_graphs(m, n): Returns the number of different bipartite graphs that can be constructed with m nodes in set U and n nodes in set V. return 2 ** (m * n)"},{"question":"Problem Hikari loves playing with strings and patterns. She recently learned about palindromic substrings and wonders how many of them can be extracted from a given string. A substring is called palindromic if it reads the same backward as forward, such as \\"aba\\" or \\"a\\". Given a string `s` of length `n`, help Hikari determine the total number of palindromic substrings in `s`. Constraints * 1 ≤ n ≤ 100 * `s` consists of lowercase English letters. Input The input is given in the following format. s The string `s` is given on the first line. Output Output the number of palindromic substrings in `s` on one line. Examples Input ababa Output 9 Input abc Output 3 Input aaaa Output 10 Note In the first example, the palindromic substrings are: \\"a\\", \\"a\\", \\"a\\", \\"b\\", \\"b\\", \\"b\\", \\"ababa\\", \\"aba\\", and \\"aba\\". In the second example, the palindromic substrings are: \\"a\\", \\"b\\", and \\"c\\". In the third example, all substrings are palindromic: \\"a\\", \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aa\\", \\"aaa\\", \\"aaa\\", and \\"aaaa\\".","solution":"def countPalindromicSubstrings(s): Returns the number of palindromic substrings in the given string s. n = len(s) count = 0 # Create 2D dp array, dp[i][j] will be True if the string from index i to j is a palindrome. dp = [[False] * n for _ in range(n)] # Single letter palindromes for i in range(n): dp[i][i] = True count += 1 # Double letter palindromes for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True count += 1 # Palindromes of length 3 or more for length in range(3, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = True count += 1 return count"},{"question":"Kumar wants to organize a photo gallery. He has N photographs, each represented by its width and height. Since the gallery has limited space, Kumar wants to display the photographs in frames of uniform size to maintain a consistent look. He wants to find out the minimum possible size of the square frame that can accommodate all the photographs without rotating them. Given the widths and heights of N photographs, help Kumar determine the side length of the smallest possible square frame that can contain any of the given photographs. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N, representing the number of photographs. - Each of the following N lines contains two space-separated integers W and H, representing the width and height of each photograph. ------ Output Format ------ For each test case, output on a new line the minimum side length of the square frame that can accommodate all the photographs. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^5 1 ≤ W, H ≤ 10^4 The total number of photographs over all test cases does not exceed 10^6. ------ Sample Input 1 ------ 2 3 5 4 6 7 3 10 2 8 9 7 6 ------ Sample Output 1 ------ 10 9 ------ Explanation 1 ------ Test case 1: To accommodate all photographs without rotating, the smallest square frame must be at least 10 units in size, as the third photograph has a height of 10 units which is the largest dimension among all given photographs. Test case 2: The smallest frame to contain all photographs must be 9 units, as the first photograph has a height of 9 units.","solution":"def min_square_frame_size(test_cases): Given a list of test cases, where each test case contains the number of photographs and their dimensions, determine the minimum size of the square frame that can contain all the photographs in each test case. results = [] for case in test_cases: N = case[0] photographs = case[1] max_dimension = 0 for width, height in photographs: max_dimension = max(max_dimension, width, height) results.append(max_dimension) return results # Helper function to parse input def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) photographs = [] index += 1 for _ in range(N): width, height = map(int, lines[index].split()) photographs.append((width, height)) index += 1 test_cases.append((N, photographs)) return test_cases # Example usage: # input_string = \\"2n3n5 4n6 7n3 10n2n8 9n7 6\\" # test_cases = parse_input(input_string) # result = min_square_frame_size(test_cases) # print(result) # Output should be [10, 9]"},{"question":"Given an NxM integer matrix and an integer \'K\', write a function to find and return the sum of elements in the Kth column (0-based index). If Kth column doesn\'t exist, return -1. Example 1: Input: N = 3, M = 4, K = 2 matrix[][] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}} Output: 21 Explanation: The elements in the 2nd column are 3, 7, and 11. Their sum is 21. Example 2: Input: N = 2, M = 3, K = 3 matrix[][] = {{1, 2, 3}, {4, 5, 6}} Output: -1 Explanation: There is no 3rd column (0-based) in the given matrix. Your Task: You don\'t need to read input or print anything. Complete the function sumOfKthColumn() that takes the integer matrix and an integer K as input parameters and returns the sum of elements in the Kth column or -1 if the column doesn\'t exist. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N, M ≤ 500 -1000 ≤ matrix[i][j] ≤ 1000 0 ≤ K < 100","solution":"def sumOfKthColumn(matrix, K): Returns the sum of elements in the Kth column of the given matrix or -1 if the column doesn\'t exist. Parameters: - matrix: List[List[int]] -- NxM matrix of integers - K: int -- Column index (0-based) whose sum is to be calculated Returns: - int -- Sum of elements in the Kth column or -1 if the column doesn\'t exist if not matrix or K >= len(matrix[0]): return -1 column_sum = 0 for row in matrix: column_sum += row[K] return column_sum"},{"question":"Given a string s and a dictionary of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words. Constraints * 1 leq |s| leq 1000 * 1 leq |dict| leq 1000 * 1 leq text{word length in dict} leq 100 Input The input consists of a string s and a list of words dict. s w_0 w_1 : w_{|dict|-1} s is the string to be segmented. dict is a list of words where each line contains a single word that is part of the dictionary. Output Print \\"Yes\\" if the string s can be segmented into a space-separated sequence of one or more dictionary words. Otherwise, print \\"No\\". Example Input applepenapple apple pen Output Yes Input catsandog cats dog sand and cat Output No","solution":"def word_break(s, word_dict): Determines if s can be segmented into a space-separated sequence of one or more dictionary words. :param s: String to be segmented :param word_dict: List of words (dictionary) :return: \\"Yes\\" if segmentation is possible, otherwise \\"No\\" word_set = set(word_dict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"Yes\\" if dp[-1] else \\"No\\""},{"question":"Maria loves palindromic strings and wants to create the longest possible palindromic string by rearranging a given string. She also realizes that she can remove at most one character from the string to achieve this goal. Help Maria determine the length of the longest palindromic string she can create by rearranging the given string and possibly removing one character. -----Input----- The input consists of a single line containing a string s (1 le |s| le 10^5). The string contains only lowercase English letters. -----Output----- Print a single integer, the length of the longest palindromic string Maria can create. -----Example----- Input abccccdd Output 7 -----Explanation----- One possible longest palindromic string Maria can create from the input \\"abccccdd\\" is \\"dccaccd\\", which has length 7. She can remove one of the \'a\' or \'b\' characters to form a palindromic string.","solution":"def longest_palindrome(s): Given a string s, returns the length of the longest palindromic string that can be created by rearranging the given string and possibly removing one character. from collections import Counter count = Counter(s) length = 0 odd_found = False for char in count: if count[char] % 2 == 0: length += count[char] else: length += count[char] - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Given a list of N integers and an integer M, write a function to find the first occurrence of a sublist of length M whose elements add up to a given target sum S. If such a sublist is found, return the 0-based starting index of the sublist. If no such sublist exists, return -1. For example, for the list [1, 2, 3, 7, 5], M = 2, and S = 10, the sublist [3, 7] starting at index 2 adds up to 10. Constraints * 1 leq N leq 10^5 * 1 leq M leq N * -10^9 leq a_i leq 10^9 * -10^9 leq S leq 10^9 Input The input is given in the following format. N M S a_1 a_2 ... a_N Output Print the 0-based starting index of the first sublist of length M whose sum is equal to S. If no such sublist is found, print -1. Example Input 5 2 10 1 2 3 7 5 Output 2","solution":"def find_sublist_with_sum(arr, N, M, S): Finds the first occurrence of a sublist of length M whose elements sum up to S and returns the starting index of that sublist. Parameters: arr (list of int): List of integers N (int): Length of the list M (int): Length of the sublist S (int): Target sum Returns: int: The starting index of the first sublist that sums to S, or -1 if no such sublist exists # Early return if M is greater than N if M > N: return -1 # Calculate the initial window sum window_sum = sum(arr[:M]) if window_sum == S: return 0 # Slide the window to the right for i in range(N - M): window_sum = window_sum - arr[i] + arr[i + M] if window_sum == S: return i + 1 return -1"},{"question":"A publishing company is organizing a book expo and has n types of books available in their inventory, each type with a different theme. The i-th type of book has cost ci and popularity pi. The company wants to manage the inventory and track customer interactions: You should process q events of two types: - type 1 — a customer buys a book of type x, reducing its inventory by one. If there are no books left of type x, the event should be ignored. - type 2 — upon returning to inventory after a sales event, the company wants to maximize their profit by selecting books to display such that their popularity sums up to at most P. Each book can only be displayed once. For each event of type 2, let f(P) be the maximum possible sum of costs of the books chosen for display with total popularity ≤ P. Formally, let I be the set of indices of all book types currently in inventory. Then, f(P) is defined as the maximum total cost of choosing books such that the sum of their popularity ≤ P. Compute f(P) for each event of type 2. Note that the output follows a special format. Input The first line of the input contains two space-separated integers n and P (1 ≤ n ≤ 5000, 1 ≤ P ≤ 10000) — the initial number of book types available and the maximum interesting popularity threshold. Then, n lines follow. The i-th of them contains three space-separated positive integers ci, pi, and ui (1 ≤ ci ≤ 1000000, 1 ≤ pi ≤ 1000, 1 ≤ ui ≤ 100) — the cost, popularity, and initial units available of the i-th book type. The next line contains an integer q (1 ≤ q ≤ 30000) — the number of events. Each of the next q lines contains the description of one event in the following format: - 1 x — an event of type 1, a customer buys a book of type x (1 ≤ x ≤ n) - 2 — an event of type 2, the company wants to maximize their revenue by displaying books Output For each event of type 2, output the maximum sum of costs for the books selected as explained above. Examples Input 3 1000 100 150 1 200 200 2 150 300 1 5 1 1 1 2 2 1 2 2 Output 150 350 Examples Explanation: In the first event of type 2, after two purchases, the books\' remaining units are: - book type 1 has 0 unit - book type 2 has 1 unit - book type 3 has 1 unit The only book that could be displayed is book type 2 with a cost of 200 and popularity of 200, and book type 3 with a cost of 150 and popularity of 300. Choosing book type 2 alone (since the total popularity ≤ 1000) results in f(1000) = 200 + 150 = 350. In the second event of type 2, after one more purchase, the books\' remaining units are: - book type 1 has 0 unit - book type 2 has 0 unit - book type 3 has 1 unit It will only choose book type 3 whose cost is 150 resulting f(P)= 150.","solution":"def maximize_cost(n, P, books, events): current_inventory = [book[2] for book in books] def knapsack(available_books, P): dp = [0] * (P + 1) for ci, pi in available_books: for w in range(P, pi - 1, -1): dp[w] = max(dp[w], dp[w - pi] + ci) return dp[P] results = [] for event in events: if event[0] == 1: book_type = event[1] - 1 if current_inventory[book_type] > 0: current_inventory[book_type] -= 1 elif event[0] == 2: available_books = [ (books[i][0], books[i][1]) for i in range(n) if current_inventory[i] > 0 ] results.append(knapsack(available_books, P)) return results"},{"question":"Kara loves both geometry and symmetry. One day, she found a set of N points in a 2D plane, each with integer coordinates. To amuse herself, she decided to draw a circle with an integer radius around each point. She is curious to know how many different radii would allow at least one circle to contain every other point either inside or on its boundary. A point (x, y) is inside or on the boundary of a circle centered at (a, b) with radius r if the Euclidean distance between (x, y) and (a, b) is less than or equal to r. ------ Input ------ The first line contains a single integer N. Each of the following N lines contains two space-separated integers x_i and y_i denoting the coordinates of the i-th point. ------ Output ------ Print a single integer, the number of different radii that satisfy the condition. ------ Constraints ------ 1 ≤ N ≤ 1000 0 ≤ x_i, y_i ≤ 20000 for each valid i ------ Example Input ------ 4 1 1 2 2 3 3 4 4 ------ Example Output ------ 2 ------ Explanation ------ Example case 1: We can draw two different circles that contain all the points. If we draw a circle centered at (1, 1) with radius sqrt{18}, it will contain all the points (1, 1), (2, 2), (3, 3) and (4, 4). Similarly, if we draw a circle centered at (2, 2) with radius sqrt{8}, it will also contain all said points. ------ Scoring ------ The score for each test case will be 1 if the number of different radii is correctly found, and 0 otherwise. The score of a submission is the sum of its scores for all test files. Test Generation Process There are twenty test cases. The displayed score will account for exactly four test files, i.e., your score reflects your submission\'s performance on 20% (4/20) of the test files. After the end of the contest, your score will account for the other sixteen test files as well. ------ Notes ------ A point that lies exactly on the boundary of a circle is considered to be contained by that circle.","solution":"import math def count_valid_radii(points): def calculate_distance(p1, p2): return (p1[0] - p2[0])**2 + (p1[1] - p2[1])**2 n = len(points) radii = set() for i in range(n): max_dist = 0 for j in range(n): if i != j: dist = calculate_distance(points[i], points[j]) max_dist = max(max_dist, dist) radii.add(max_dist) return len(radii)"},{"question":"A wildlife park has several species of animals, each with a different lifespan. The park’s management wants to create a new exhibit showcasing animals that are expected to live at least a given number of years. You need to help them identify these animals by writing a program that, given the animal species and their respective lifespans, as well as a lifespan threshold, returns the names of the animals that have a lifespan greater than or equal to the given threshold. Input: - The first line contains a single integer n, the number of animals. - The next n lines each contain the name of an animal (a string of up to 100 characters) followed by its lifespan (an integer). - The final line contains a single integer t, the threshold lifespan. Output: - Output the names of the animals whose lifespans are greater than or equal to t, each on a new line. - If no animals meet the criteria, print \\"No animals\\". Constraints: - 1 ≤ n ≤ 1000 - 1 ≤ lifespan of an animal ≤ 100 - 1 ≤ t ≤ 100 SAMPLE INPUT: 5 Elephant 70 Parrot 20 Tortoise 150 Rabbit 8 Wolf 14 10 SAMPLE OUTPUT: Elephant Parrot Tortoise Wolf Explanation: The animals Elephant, Parrot, Tortoise, and Wolf all have lifespans greater than or equal to the threshold of 10 years. The Rabbit, with a lifespan of 8 years, does not meet the criteria.","solution":"def animals_above_threshold(n, animals, t): Returns the names of animals whose lifespan is greater than or equal to the threshold. :param n: int: Number of animals :param animals: list of tuples: Each tuple contains a string (animal name) and an int (lifespan) :param t: int: Threshold lifespan :return: list: List of animal names meeting the criteria result = [name for name, lifespan in animals if lifespan >= t] if result: return result else: return [\\"No animals\\"]"},{"question":"You are given a string consisting of lowercase English letters and you need to transform it into a string where no two adjacent characters are the same by possibly rearranging the characters. If it is not possible to obtain such a string, return \\"NO\\". Input The input consists of a single string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. Output If it is possible to rearrange the string so that no two adjacent characters are the same, return the transformed string. If it is not possible, return \\"NO\\". Example Input aabb Output abab Input aaab Output NO Input a Output a Note In the first example, one possible rearrangement is \\"abab\\" which satisfies the condition as no two adjacent characters are the same. In the second example, it is impossible to rearrange the characters to meet the requirement, hence the output is \\"NO\\". In the third example, the string consists of one character, which already satisfies the condition.","solution":"from collections import Counter import heapq def rearrange_string(s): char_count = Counter(s) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char rearranged = \'\'.join(result) return rearranged if len(rearranged) == len(s) else \\"NO\\""},{"question":"Louise is playing a simplified version of the classic game Snake on a grid. The grid is represented by an M x N matrix, where each cell can either be empty or contain an obstacle. The snake starts at the top-left corner of the grid and it can only move right or down. Louise wants to navigate the snake from the top-left corner (cell (1, 1)) to the bottom-right corner (cell (M, N)), but she needs your help to find out the minimum number of moves required to accomplish this. The snake can\'t move through cells containing obstacles, and it can\'t revisit any cell. If it\'s impossible for the snake to reach the bottom-right corner, the output should be `-1`. Constraints * 1 leq M, N leq 1,000 * The grid will be described as M lines of N characters (\'E\' for empty cell, \'O\' for obstacle). Input The input is given from Standard Input in the following format: M N GRID GRID consists of M lines, each containing N characters representing the grid. Output Print the minimum number of moves required to reach the bottom-right corner or `-1` if it is not possible. Examples Input 3 4 EEEE EEOE EEEE Output 5 Input 3 3 EOE OEE EOE Output -1 Input 2 2 EE EE Output 2 Input 4 4 EOEE EEOE EEOE EEEE Output 6","solution":"from collections import deque def min_moves_to_reach_end(M, N, grid): Finds the minimum number of moves required to navigate the snake from the top-left corner (1, 1) to the bottom-right corner (M, N) on the grid. directions = [(1, 0), (0, 1)] # possible moves: down, right if grid[0][0] == \'O\' or grid[M-1][N-1] == \'O\': return -1 queue = deque([(0, 0, 0)]) # (row, col, moves) visited = set((0, 0)) while queue: row, col, moves = queue.popleft() # Check if the end is reached if row == M-1 and col == N-1: return moves for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < M and 0 <= new_col < N and (new_row, new_col) not in visited and grid[new_row][new_col] == \'E\': visited.add((new_row, new_col)) queue.append((new_row, new_col, moves + 1)) return -1 # if there\'s no path to the bottom-right corner"},{"question":"You are tasked with writing a function that determines if a given permutation of integers can be rearranged to form a peak array. A peak array is defined as an array where every element at an odd index is strictly greater than its adjacent even-indexed elements. For example, an array `[3, 1, 2, 7, 4, 6]` can be rearranged to form a peak array as `[3, 1, 4, 2, 7, 6]`. Here are the steps you need to perform: 1. Write a function that checks if a given permutation of integers can form a peak array. 2. If it can, return a peak array that is formed by some permutation of the original array. 3. If it cannot, return an empty array. Your function should have the following signature: ```python def peak_array(arr: List[int]) -> List[int]: ``` # Input: - An integer `t` (1 <= t <= 100) — number of test cases. - For each test case, one line containing a single integer `n` (1 <= n <= 1000) — length of the array. - One line containing `n` integers representing the array `arr` (1 <= arr[i] <= 1000). # Output: For each test case, output a single line containing the peak array if it\'s possible to rearrange the given array into a peak array. If not, output an empty array. # Example Input: ``` 3 6 3 1 2 7 4 6 5 1 2 3 4 5 7 1 1 1 1 1 1 1 ``` Output: ``` 3 1 4 2 7 6 5 1 4 2 3 [] ``` # Note: In the first test case, one possible permutation of the peak array is `[3, 1, 4, 2, 7, 6]`. Other valid permutations exist as well. In the second test case, `[5, 1, 4, 2, 3]` is a valid permutation for a peak array. In the third test case, it is impossible to create a peak array since all elements are the same.","solution":"from typing import List def peak_array(arr: List[int]) -> List[int]: if not arr or len(arr) == 1: return arr arr.sort() n = len(arr) peak_arr = [0] * n left = 0 right = n - 1 for i in range(n): if i % 2 == 0: peak_arr[i] = arr[right] right -= 1 else: peak_arr[i] = arr[left] left += 1 for i in range(1, n, 2): if peak_arr[i] >= peak_arr[i - 1] or (i + 1 < n and peak_arr[i] >= peak_arr[i + 1]): return [] return peak_arr"},{"question":"Daniel is training for a marathon and he keeps track of his running distances for the next m days. Every day, he records the distance he ran, which might be zero on some days. Additionally, on some days, he chooses to take a rest and does not run at all. However, he must take at least one rest day after running for exactly three consecutive days. Given the number of days, m, and the distances he plans to run each day, determine if he could complete his planned training without violating the rule of taking a rest day after every three consecutive running days. If he can, print \\"Possible\\". Otherwise, print \\"Not possible\\". -----Input----- The input consists of two lines. - The first line contains an integer 1leq mleq 10^5, the number of days. - The second line contains m integers d_1, dots, d_m, where 0 leq d_i leq 50 represents the distance Daniel plans to run on the ith day (or 0 if he plans to rest). -----Output----- Output a single line containing \\"Possible\\" if Daniel can follow his training plan without violations, or \\"Not possible\\". -----Examples----- Sample Input 1: 6 5 5 5 0 10 15 Sample Output 1: Possible Sample Input 2: 4 3 3 3 3 Sample Output 2: Not possible","solution":"def can_complete_training(m, distances): consecutive_running_days = 0 for distance in distances: if distance > 0: consecutive_running_days += 1 if consecutive_running_days > 3: return \\"Not possible\\" else: consecutive_running_days = 0 return \\"Possible\\""},{"question":"Bakery Delight Neville runs a bakery that sells delicious cookies. He keeps an inventory list where each element represents the number of cookies of a particular type. Each day, Neville wants to decide which two types of cookies to highlight for his customers. To showcase the best variety, he decides to find the two types of cookies that together have the highest total number of cookies in his inventory. Can you help Neville identify this maximum total count? Example 1: Input: cookies = [7, 3, 5, 2, 9] Output: 16 Explanation: The maximum total count of cookies is achieved by the 1st and the 5th elements: 7 + 9 = 16. Example 2: Input: cookies = [1, 3, 5, 2, 4] Output: 9 Explanation: The maximum total count of cookies is achieved by the 3rd and the 5th elements: 5 + 4 = 9. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function max_cookie_sum() that takes an array (cookies) and the size of the array (n), and returns the maximum total number of cookies by picking two types. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 2 ≤ N ≤ 10^5 1 ≤ cookies[i] ≤ 10^7","solution":"def max_cookie_sum(cookies): Function to find the maximum total count of cookies by picking two types. Parameters: cookies (list): List of number of cookies of each type Returns: int: The maximum total count of cookies by picking two types # If the list has less than two elements, return 0 as we can\'t pick two types if len(cookies) < 2: return 0 # Find the two largest numbers in the list first_max = second_max = -1 for num in cookies: if num > first_max: second_max = first_max first_max = num elif num > second_max: second_max = num return first_max + second_max"},{"question":"Given a positive integer `k`, your task is to form the lexicographically smallest palindrome of exactly `k` characters using the English alphabet (lowercase letters only). If it is impossible to form such a palindrome, return `-1`. # Input - The first line contains an integer `t` (1 le t le 100) — the number of test cases. - Each of the next `t` lines contain a single integer `k (1 le k le 1000). # Output For each test case, print a single line containing the lexicographically smallest palindrome of length `k. If it is impossible to form such a palindrome, output `-1`. # Examples Input ``` 3 1 2 3 ``` Output ``` a aa aba ``` # Explanation - For the first test case, the smallest 1-length palindrome is \\"a\\". - For the second test case, the smallest 2-length palindrome is \\"aa\\". - For the third test case, the smallest 3-length palindrome is \\"aba\\". Note: A palindrome reads the same backwards as forwards. For length 1 and 2, the smallest palindromes using the first letter of the alphabet are \\"a\\" and \\"aa\\", respectively. For odd lengths greater than 1, insert the smallest possible character at the centers and mirror around it.","solution":"def smallest_palindrome(k): if k == 1: return \\"a\\" if k % 2 == 0: return \\"a\\" * k else: half = k // 2 return \\"a\\" * half + \\"b\\" + \\"a\\" * half def solve(t, ks): results = [] for k in ks: results.append(smallest_palindrome(k)) return results"},{"question":"You are given a collection of n unique integers and an integer k. Your task is to determine if there is a subset of these integers of size k such that the difference between the maximum and minimum integers in the subset is minimized. If such a subset exists, find and print the subset; otherwise, print `No`. # Input The input consists of two lines: - The first line contains two integers n and k where (1 ≤ k ≤ n ≤ 1000). - The second line contains n unique integers separated by spaces. # Output If no such subset of size k exists, print `No`. Otherwise, print the subset of k integers in non-decreasing order, where the difference between the maximum and minimum integers is minimized. If there are multiple such subsets, print any. # Constraints - 1 ≤ integer values ≤ 10^9 - Integers are unique. # Examples **Input** ``` 6 3 10 20 30 40 50 60 ``` **Output** ``` 10 20 30 ``` **Input** ``` 5 4 8 1 7 3 6 ``` **Output** ``` 1 3 6 7 ``` **Input** ``` 3 3 15 10 5 ``` **Output** ``` 5 10 15 ``` **Input** ``` 4 5 2 4 6 8 ``` **Output** ``` No ```","solution":"def min_difference_subset(n, k, nums): if k > n: return \\"No\\" nums.sort() min_diff = float(\'inf\') best_subset = [] for i in range(n - k + 1): current_diff = nums[i + k - 1] - nums[i] if current_diff < min_diff: min_diff = current_diff best_subset = nums[i:i+k] return best_subset"},{"question":"Task You are given a string representing a basic mathematical expression, which may include addition, subtraction, multiplication, and division, as well as parentheses to determine precedence. Implement a function that evaluates the expression and returns its result as a floating-point number. Requirements - Your function should support the four basic arithmetic operations: addition (+), subtraction (-), multiplication (*), and division (/). - The expression may include integer and floating-point numbers. - The expression may contain nested parentheses to indicate the order of operations. - Division by zero should raise an appropriate exception or return an error indication. Example ```python def evaluate_expression(expression: str) -> float: # Your implementation here # Example usage print(evaluate_expression(\\"3 + 5 * 2\\")) # Output: 13.0 print(evaluate_expression(\\"(3 + 5) * 2\\")) # Output: 16.0 print(evaluate_expression(\\"10 / 2 + 3 * (2 - 1)\\")) # Output: 8.0 print(evaluate_expression(\\"10 / (2 + 3 * (2 - 1))\\")) # Output: 2.0 print(evaluate_expression(\\"10 / (2 + 0)\\")) # Output: 5.0 print(evaluate_expression(\\"10 / 0\\")) # Should handle division by zero ``` Constraints - The input string will be a valid mathematical expression with balanced parentheses. - You may assume that the input string will contain only valid characters and valid numbers. - Implement robust error handling for cases like division by zero. This can be through raising an exception or returning a specific error value/message.","solution":"def evaluate_expression(expression: str) -> float: Evaluates a basic mathematical expression and returns its result as a floating-point number. Supports addition, subtraction, multiplication, division, and parentheses for order of operations. try: # Using eval to evaluate the expression result = eval(expression) return float(result) except ZeroDivisionError: raise ValueError(\\"Division by zero is not allowed.\\") except Exception as e: raise ValueError(f\\"Invalid expression: {e}\\")"},{"question":"Bob has a collection of n balls, each uniquely numbered from 1 to n, and he places them on a straight line. Alice challenges Bob to a game where she asks him to find the shortest path to swap the balls such that the resulting sequence is in ascending order. Bob can swap adjacent balls in one move, and he needs to minimize the number of swaps. Given an initial sequence of the balls, help Bob determine the minimum number of swaps required to sort the sequence. Input Format The first line contains an integer, t, denoting the number of test cases. The subsequent lines describe the test cases in the following format: The first line of each test case contains an integer, n, denoting the number of balls. The second line contains n space-separated integers, representing the initial sequence of balls. Constraints 1 leq t leq 10 1 leq n leq 10^5 1 leq the value of each ball leq n Output Format For each test case, print the minimum number of swaps required to sort the sequence on a new line. Sample Input 0 2 5 5 4 3 2 1 6 1 2 6 4 3 5 Sample Output 0 10 4 Explanation 0 In the first test case, the sequence [5, 4, 3, 2, 1] requires 10 swaps to sort as [1, 2, 3, 4, 5]. In the second test case, the sequence [1, 2, 6, 4, 3, 5] requires 4 swaps to sort as [1, 2, 3, 4, 5, 6].","solution":"def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions because all elements left to i in left subarray are greater than arr[j] temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into Original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count def minimum_swaps_to_sort(stacks): temp_arr = [0]*len(stacks) return merge_sort_and_count(stacks, temp_arr, 0, len(stacks)-1)"},{"question":"Write a program to solve the \\"Survivorship\\" problem for a circular list of contestants in a game show. The goal is to determine the winning contestant after repeatedly eliminating every k-th contestant in a circle until only one contestant remains. Rules: 1. There are n contestants standing in a circle, each assigned a unique number from 1 to n. 2. Starting with the first contestant (numbered 1), every k-th contestant is eliminated from the circle. 3. The process continues in a circular manner (i.e., after reaching the end of the list, continue counting from the beginning) until only one contestant remains. 4. Your task is to determine the number of the winning contestant. Input: - The input will consist of multiple datasets, each dataset containing two integers n and k, separated by a space where: - n (1 ≤ n ≤ 1000) is the number of contestants. - k (1 ≤ k ≤ 1000) is the step count for elimination. - The end of the input is indicated by a line containing two zeros separated by a space. Output: - For each dataset, output the number of the winning contestant. Example: Input: 7 3 5 2 0 0 Output: 4 3 Explanation: 1. For the first dataset (7 contestants, eliminate every 3rd): - Cycle through the contestants eliminating every 3rd until only one remains. - The last remaining contestant is number 4. 2. For the second dataset (5 contestants, eliminate every 2nd): - Cycle through the contestants eliminating every 2nd until only one remains. - The last remaining contestant is number 3.","solution":"def josephus(n, k): Determines the winning contestant using the Josephus problem algorithm. Parameters: n (int): Number of contestants. k (int): Step count for elimination. Returns: int: The number of the winning contestant. if n == 1: return 1 else: return (josephus(n-1, k) + k-1) % n + 1 def find_winners(datasets): Process multiple datasets to find the winning contestant. Parameters: datasets (list of tuples): List of (n, k) pairs where n is the number of contestants and k is the step count for elimination. Returns: list: List of winning contestant numbers for each dataset. winners = [] for n, k in datasets: if n == 0 and k == 0: break winners.append(josephus(n, k)) return winners"},{"question":"Write a program to find the shortest path traversing every node exactly once in a weighted, undirected graph. This problem is also known as the Traveling Salesman Problem (TSP). Given a graph represented with an adjacency matrix, you need to output the minimum weight of the traversal. If it\'s not possible to traverse every node exactly once, output `-1`. You are provided with an integer `N` representing the number of nodes and a two-dimensional list `matrix` representing the weights of the edges between nodes. The entry `matrix[i][j]` represents the weight of the edge from node `i` to node `j`. If there is no edge between nodes `i` and `j`, the weight will be given as `-1`. No self-loops exist, so all `matrix[i][i]` will be `0`. # Input Format - The first line contains an integer `N`. - The next `N` lines contain `N` space-separated integers where the `j`\'th integer in the `i`\'th line represents `matrix[i][j]`. # Output Format - Print an integer representing the minimum weight of the traversal if possible. Otherwise, print `-1`. # Constraints - 2 leq N leq 10 - -1 leq matrix[i][j] leq 100 # Sample Input 1 ``` 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 ``` # Sample Output 1 ``` 80 ``` # Sample Explanation 1 In this example, the minimum weight traversal that visits every node exactly once is `1 -> 2 -> 4 -> 3 -> 1` with a total weight of 80. # Sample Input 2 ``` 3 0 -1 10 -1 0 20 10 20 0 ``` # Sample Output 2 ``` -1 ``` # Sample Explanation 2 In this example, it\'s not possible to traverse every node exactly once due to the lack of an edge between node `0` and node `1`. Therefore, the output is `-1`.","solution":"import sys def tsp_helper(matrix, mask, pos, dp, N): if mask == (1 << N) - 1: return matrix[pos][0] if matrix[pos][0] != -1 else sys.maxsize if dp[mask][pos] != -1: return dp[mask][pos] ans = sys.maxsize for city in range(N): if (mask & (1 << city)) == 0 and matrix[pos][city] != -1: new_cost = matrix[pos][city] + tsp_helper(matrix, mask | (1 << city), city, dp, N) ans = min(ans, new_cost) dp[mask][pos] = ans return dp[mask][pos] def tsp(matrix): N = len(matrix) dp = [[-1 for _ in range(N)] for _ in range(1 << N)] ans = tsp_helper(matrix, 1, 0, dp, N) return ans if ans != sys.maxsize else -1 def find_min_tsp(N, matrix): return tsp(matrix)"},{"question":"Given an integer array nums of length n, where n > 1, write a function that returns the product array output such that output[i] is equal to the product of all the elements of nums except nums[i]. You must solve it in O(n) time and should not use division operation. Example 1: Input: nums = [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: The product of all elements in the array, except for the one at index 0 (nums[0] = 1), is 2 * 3 * 4 = 24. The product for index 1 (nums[1] = 2) is 1 * 3 * 4 = 12. Similarly, the products for indices 2 and 3 are 8 and 6, respectively. Example 2: Input: nums = [5, 6, 2] Output: [12, 10, 30] Explanation: The product of all elements in the array, except for the one at index 0 (nums[0] = 5), is 6 * 2 = 12. The product for index 1 (nums[1] = 6) is 5 * 2 = 10. The product for index 2 is 5 * 6 = 30. Constraints: 2 <= nums.length <= 10^5 -30 <= nums[i] <= 30 The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.","solution":"def product_except_self(nums): Returns the product array output such that output[i] is equal to the product of all the elements of nums except nums[i]. Time complexity: O(n) n = len(nums) # Initialize the output array with 1s output = [1] * n # Calculate left products and store in output array left_product = 1 for i in range(n): output[i] = left_product left_product *= nums[i] # Calculate right products and multiply with the corresponding left products in the output array right_product = 1 for i in range(n - 1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"A team of biologists is studying the growth rates of certain bacteria. In their latest experiment, they are observing a culture that starts with a handful of bacteria cells. The culture grows in a series of discrete time steps, where at each step, every bacterium splits into two new bacteria (one time step could be considered the time it takes for bacteria to divide). Given the total number of bacteria present after a certain number of time steps, the biologists want to determine how many time steps have passed since the culture started with a single bacterium. To help the biologists with their problem, write a program that calculates the number of time steps required to reach the given number of bacteria, starting from 1. -----Input----- The input consists of a single integer n (1 leq n leq 10^{18}) which represents the number of bacteria present after some number of time steps. -----Output----- Output a single integer representing the number of time steps required to reach n bacteria, starting from 1. If n is not a power of 2, output \\"invalid input\\". -----Example----- Sample Input 1: 16 Sample Output 1: 4 Sample Input 2: 12 Sample Output 2: invalid input Note: - For the first example, starting from 1 bacterium: - After 1 step: 2 - After 2 steps: 4 - After 3 steps: 8 - After 4 steps: 16 Hence, it takes 4 steps to reach 16 bacteria. - For the second example, 12 is not a power of 2, so the output is \\"invalid input\\".","solution":"def number_of_steps(n): Calculate the number of steps required to reach n bacteria starting from 1, where the number of bacteria doubles each step. Return \\"invalid input\\" if n is not a power of 2. if n < 1: return \\"invalid input\\" steps = 0 while n > 1: if n % 2 != 0: return \\"invalid input\\" n //= 2 steps += 1 return steps"},{"question":"In a distant land called Codeville, a wise king wants to devise a system for distributing gold to his citizens. The gold is stored in bars of different weights, and the citizens come in pairs. Each pair of citizens wants to receive gold amounts that have the same weight. The king has to ensure that the gold distribution is done in such a way that the weights given to these pairs of citizens are equal and the total weight distributed is maximized. To achieve this, the king needs your help to solve the problem optimally: Given an array of integers where each integer represents the weight of a gold bar, find the maximum total weight that can be equally distributed among the citizens in pairs. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer N, the number of gold bars. - The second line contains N space-separated integers representing the weights of the gold bars. -----Output:----- For each test case, output a single integer representing the maximum total weight that can be equally distributed to the pairs. -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq text{weight of each gold bar} leq 10^9 -----Sample Input:----- 2 6 1 1 2 2 3 3 5 1 2 3 3 4 -----Sample Output:----- 12 6 -----EXPLANATION:----- For the first test case, you can form 3 pairs with weights (1, 1), (2, 2), and (3, 3). The total weight distributed is 1+1 + 2+2 + 3+3 = 12. For the second test case, you can form 1 pair with weights (3, 3). The total weight distributed is 3+3 = 6.","solution":"def max_equal_weight(T, test_cases): results = [] for i in range(T): _, weights = test_cases[i] weight_count = {} # Count the frequency of each weight for weight in weights: if weight in weight_count: weight_count[weight] += 1 else: weight_count[weight] = 1 # Calculate the maximum total weight total_weight = 0 for weight, count in weight_count.items(): total_weight += (count // 2) * 2 * weight results.append(total_weight) return results"},{"question":"Mark is organizing a coding marathon for his friends. He has n friends, and each friend will bring one or more laptops. Mark wants to ensure that every friend brings at least one laptop that has the internet capability, so the laptops can be connected to form a network. Can Mark configure the laptops such that there is at least one connected network of laptops regardless of the initial configuration? -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 1000) - the number of friends. The next n lines each contain a single integer k (1 ≤ k ≤ 1000) - the number of laptops each friend will bring. Each of the next k lines for each friend contains either \'1\' (indicating the laptop has internet capability) or \'0\' (indicating the laptop doesn\'t have internet capability). -----Output----- If it is possible to configure the laptops such that each friend\'s laptops are all connected and at least one laptop of every friend has the internet capability, print \\"Possible\\". Otherwise, print \\"Impossible\\". -----Examples----- Input 3 2 1 0 3 0 1 0 2 1 1 Output Possible Input 2 2 0 0 2 0 1 Output Impossible Input 4 1 1 2 0 1 3 1 0 0 1 0 Output Impossible -----Note----- In the first sample, each friend\'s laptops can be connected in such a way that all the laptops form one single network with internet capability. In the second sample, the first friend does not bring any laptop with internet capability, making it impossible to form a network with the required configuration. In the third sample, friend 4 brings only one laptop which does not have internet capability, thus making the configuration impossible.","solution":"def is_network_possible(n, friends_laptops): Determines if it is possible to configure the laptops such that each friend\'s laptops are connected with at least one laptop having internet capability. Parameters: - n (int): number of friends - friends_laptops (list of list of int): a nested list where each inner list contains integers indicating if a laptop has internet capability (1 for yes, 0 for no) Returns: - str: \\"Possible\\" if the configuration is feasible, \\"Impossible\\" otherwise for laptops in friends_laptops: if 1 not in laptops: return \\"Impossible\\" return \\"Possible\\""},{"question":"Read problem statements in [Hindi], [Mandarin Chinese], [Russian], [Vietnamese], and [Bengali] as well. Chef and Chefina are playing a new game with arrays. Chef has an array B with P integers, and Chefina has an array C with Q integers. They want to create a new merged array D by alternatively picking elements from arrays B and C, starting with the first element of B followed by the first element of C, and so on. If one of the arrays runs out of elements, they continue picking from the remaining array. Chef wants to make this process as efficient as possible. Your task is to determine if it\'s possible to rearrange arrays B and C such that the merged array D is in non-decreasing order. For example, if the initial arrays are B = [3, 1, 2] C = [4, 6, 5, 7] One possible rearrangement that works is: B = [1, 2, 3] C = [4, 5, 6, 7] In this case, the merged array D will be [1, 4, 2, 5, 3, 6, 7], which is not in non-decreasing order. But by reordering arrays B and C, another valid merged sequence is possible. ------- Input ------- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers P and Q. The second line contains P space-separated integers representing array B. The third line contains Q space-separated integers representing array C. ------- Output ------- For each test case, if it is possible to rearrange the arrays B and C such that the merged array D is in non-decreasing order, print YES. Otherwise, print NO. ------- Constraints ------- 1 ≤ T ≤ 10^5 1 ≤ P, Q ≤ 300 1 ≤ B_i, C_j ≤ 10^5 for each valid i, j the sum of P + Q over all test cases does not exceed 5 cdot 10^5 ------ Example Input ------ 2 3 4 3 1 2 4 6 5 7 2 2 5 8 1 3 ------ Example Output ------ YES NO ------ Explanation ------ Example case 1: By rearranging arrays B and C to B = [1, 2, 3] and C = [4, 5, 6, 7], the merged array D will be [1, 4, 2, 5, 3, 6, 7], which is in non-decreasing order. Example case 2: No rearrangement of arrays B and C will result in a non-decreasing merged array D. Thus, the answer is \'NO\'.","solution":"def is_possible_to_merge_sorted(P, Q, B, C): Determines if it\'s possible to reorder arrays B and C such that the merged array D is non-decreasing. Parameters: P (int): Length of array B Q (int): Length of array C B (list): List of integers representing array B C (list): List of integers representing array C Returns: str: \'YES\' if it\'s possible, \'NO\' otherwise B.sort() C.sort() # Check if we can merge in non-decreasing order starting with the smallest elements for i in range(min(P, Q)): if B[i] > C[i]: return \'NO\' return \'YES\' def process_test_cases(test_cases): results = [] for P, Q, B, C in test_cases: result = is_possible_to_merge_sorted(P, Q, B, C) results.append(result) return results"},{"question":"You are given a string consisting of lowercase letters and you need to determine the number of distinct substrings of the given string. A substring is defined as a contiguous sequence of characters within a string. To solve this problem, you\'ll need to implement a function that takes a string as input and returns the number of unique substrings. For example: Input: \\"ab\\" Output: 3 Explanation: The substrings are [\\"a\\", \\"b\\", \\"ab\\"] Input: \\"aaa\\" Output: 3 Explanation: The substrings are [\\"a\\", \\"aa\\", \\"aaa\\"] Note that the input string will contain only lowercase alphabets (a-z) and its length will not exceed 1000 characters. Function Signature ```python def count_distinct_substrings(s: str) -> int: pass ``` Examples ```python print(count_distinct_substrings(\\"abc\\")) # Output: 6 print(count_distinct_substrings(\\"aaaa\\")) # Output: 4 ``` Constraints - The length of the input string will not exceed 1000 characters. - The input string will consist only of lowercase alphabets (a-z).","solution":"def count_distinct_substrings(s: str) -> int: Returns the number of distinct substrings of the given string. substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"Write a function that determines whether a given positive integer is a \\"Perfect Number.\\" A perfect number is a positive integer that is equal to the sum of its proper divisors (excluding itself). For example: ```python is_perfect_number(6) ``` should return `True`, since 6 is a perfect number (1 + 2 + 3 = 6). ```python is_perfect_number(28) ``` should return `True`, since 28 is a perfect number (1 + 2 + 4 + 7 + 14 = 28). On the other hand, ```python is_perfect_number(10) ``` should return `False`, since 10 is not a perfect number (1 + 2 + 5 ≠ 10). The number passed to `is_perfect_number` will always be a positive integer greater than or equal to 1.","solution":"def is_perfect_number(n): Determines if a given number n is a perfect number. A perfect number is a positive integer that is equal to the sum of its proper divisors excluding itself. if n <= 1: return False divisors_sum = sum(i for i in range(1, n) if n % i == 0) return divisors_sum == n"},{"question":"Write a function that takes an integer `n` and returns an integer that follows the rules of the digital root transformation applied until a single digit is obtained. The digital root of a non-negative integer is calculated as follows: 1. Sum the digits of the number. 2. If the resulting value has more than one digit, repeat step 1 until a single-digit number is obtained. For example, the sequence for `9875` would be computed as: ``` 9875 -> 9 + 8 + 7 + 5 = 29 29 -> 2 + 9 = 11 11 -> 1 + 1 = 2 Hence, the digital root of 9875 is 2. ``` Write a function `digitalRoot` such that: ```python def digitalRoot(n: int) -> int: # Your code here # Example usage: print(digitalRoot(9875)) # Output should be 2 ``` The function should handle non-negative integers up to 1,000,000,000. Avoid using loops for large sums to optimize the solution.","solution":"def digitalRoot(n: int) -> int: Calculate the digital root of a non-negative integer. Parameters: n (int): A non-negative integer. Returns: int: The single-digit digital root of the given number. if n == 0: return 0 else: return 1 + (n - 1) % 9"},{"question":"Jack and Jill are playing a game on a 2D grid. The grid has N rows and M columns. They want to count the number of paths from the top-left cell (1, 1) to the bottom-right cell (N, M). They can only move either down or right at any point in time. Your task is to help them compute the number of such unique paths. -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M which denote the dimensions of the grid. -----Output----- For each test case, print a single line containing the number of unique paths from (1, 1) to (N, M). -----Constraints----- - 1 le T le 10^5 - 1 le N, M le 500 -----Example Input----- 3 2 2 3 3 1 5 -----Example Output----- 2 6 1 -----Explanation----- Example case 1. There are two unique paths from (1, 1) to (2, 2): [(1,1) -> (1,2) -> (2,2)] and [(1,1) -> (2,1) -> (2,2)]. Example case 2. There are six unique paths in a 3x3 grid: 1. [(1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3)] 2. [(1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3)] 3. [(1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3)] 4. [(1,1) -> (2,1) -> (2,2) -> (2,3) -> (3,3)] 5. [(1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3)] 6. [(1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3)] Example case 3. There is only one unique path in a 1x5 grid: [(1,1) -> (1,2) -> (1,3) -> (1,4) -> (1,5)].","solution":"from math import comb def number_of_unique_paths(N, M): Returns the number of unique paths from (1, 1) to (N, M) in a grid. return comb(N + M - 2, N - 1) def solve(T, test_cases): results = [] for N, M in test_cases: results.append(number_of_unique_paths(N, M)) return results"},{"question":"You are developing a text editor that supports basic string operations. One of the features you need to implement is the ability to identify the longest palindromic substring within a given string. A palindrome is a string that reads the same backward as forward. For instance, in the string `\\"babad\\"`, the longest palindromic substring is `\\"bab\\"` or `\\"aba\\"` (both are correct answers for this case). Your task is to write a function that finds the longest palindromic substring in a given string. # Function Signature ```python def longest_palindromic_substring(s: str) -> str: ``` # Input - `s (1 ≤ |s| ≤ 1000)`: A non-empty string consisting only of lowercase English letters. # Output - Return the longest palindromic substring in `s`. # Examples Example 1 ```python Input: \\"babad\\" Output: \\"bab\\" # or \\"aba\\" ``` Example 2 ```python Input: \\"cbbd\\" Output: \\"bb\\" ``` Example 3 ```python Input: \\"a\\" Output: \\"a\\" ``` Example 4 ```python Input: \\"ac\\" Output: \\"a\\" # or \\"c\\" ``` # Note - In case of multiple longest palindromic substrings of the same length, return any one of them. - You are not allowed to use built-in functions or libraries that directly solve this problem, such as checking all substrings explicitly. # Constraints - 1 ≤ |s| ≤ 1000 - s consists only of lowercase English letters (\'a\'-\'z\'). # Hint - Think dynamic programming or expand around centers for efficient solutions.","solution":"def longest_palindromic_substring(s: str) -> str: def expand_around_center(left: int, right: int) -> str: while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] if len(s) == 0: return \\"\\" longest = s[0] for i in range(len(s)): # Odd length palindromes odd_palindrome = expand_around_center(i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Even length palindromes even_palindrome = expand_around_center(i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"You are given an integer array of \'n\' elements. Write a function to sort them in ascending order using a modified version of the bubble sort algorithm. Specifically, instead of the usual pairwise swapping, you are allowed to swap any two exactly once in each iteration of the outer loop. The result should be the sorted array. Input The input consists of a single integer n (1 ≤ n ≤ 100) which represents the number of elements in the array followed by n space-separated integers representing the elements of the array. Output Print the sorted array in ascending order. Example Input 5 3 1 5 4 2 Output 1 2 3 4 5 Input 3 10 2 7 Output 2 7 10 Note: Optimize the number of swaps to achieve the sorted array efficiently with the modified bubble sort logic.","solution":"def modified_bubble_sort(arr): Sorts an array in ascending order using a modified version of bubble sort where any two elements can be swapped exactly once in each iteration. Parameters: arr (list): List of integers to be sorted. Returns: list: Sorted list in ascending order. n = len(arr) for i in range(n - 1): max_index = 0 # Find the maximum element in the unsorted part of the array for j in range(1, n - i): if arr[j] > arr[max_index]: max_index = j # Swap the maximum element found with the end of the unsorted part arr[max_index], arr[n - i - 1] = arr[n - i - 1], arr[max_index] return arr"},{"question":"Given an integer array of positive and negative numbers, write a function to find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. # Input - First line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N - the size of the array. - The second line contains N space-separated integers representing the elements of the array. # Output For each test case, print a single integer which is the maximum sum of the contiguous subarray. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - -10^4 ≤ A[i] ≤ 10^4 # Sample Input ``` 2 8 -2 1 -3 4 -1 2 1 -5 4 5 1 2 3 4 5 ``` # Sample Output ``` 6 15 ``` # Explanation In the first test case, the subarray [4, -1, 2, 1] has the largest sum = 6. In the second test case, the subarray [1, 2, 3, 4, 5] has the largest sum = 15.","solution":"def max_subarray_sum(arr): Returns the maximum sum of the contiguous subarray. max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(max_subarray_sum(arr)) return results"},{"question":"# Sub-array Sum Equal to k Task: Given an array of integers `nums` and an integer `k`, return the total number of continuous subarrays whose sum equals to `k`. # Input: - You are given an integer array `nums` of length `n` and an integer `k`. # Output: - An integer representing the total number of subarrays whose sum equals to `k`. # Examples: Example 1: ``` Input: nums = [1, 1, 1] k = 2 Output: 2 ``` Explanation: There are two subarrays with sum 2: [1, 1] (starting at index 0) and [1, 1] (starting at index 1). Example 2: ``` Input: nums = [1, 2, 3] k = 3 Output: 2 ``` Explanation: There are two subarrays with the sum 3: [1, 2] and [3]. # Constraints: * The length of the array `nums` is between `1` and `20,000`. * Each element in the array can be between `-10,000` and `10,000`. * The value of `k` can be any integer between `-10,000,000` and `10,000,000`.","solution":"def subarray_sum(nums, k): Returns the total number of continuous subarrays whose sum equals to k. count = 0 current_sum = 0 sum_map = {0: 1} for num in nums: current_sum += num if current_sum - k in sum_map: count += sum_map[current_sum - k] if current_sum in sum_map: sum_map[current_sum] += 1 else: sum_map[current_sum] = 1 return count"},{"question":"You are given an array of n integers. Your task is to determine the length of the longest subarray that does not contain any two consecutive elements with the same parity (i.e., one should be even and the other should be odd). -----Input----- The first line contains an integer n (1 le n le 2 cdot 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- Print a single integer — the length of the longest subarray that does not contain any two consecutive elements with the same parity. -----Examples----- Input 6 1 2 3 4 5 6 Output 6 Input 5 2 4 6 8 10 Output 1 -----Note----- In the first test case, the entire array is considered as the longest subarray where no two consecutive elements have the same parity. In the second test case, no two consecutive elements have different parity, so the longest subarray with the required property has length 1.","solution":"def longest_mixed_parity_subarray_length(n, array): if n == 1: return 1 max_length = 1 current_length = 1 for i in range(1, n): if (array[i] % 2) != (array[i - 1] % 2): current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Given a large collection of documents, you are to write a program to search for a specific string and return the number of documents in which it appears. The search should be case-insensitive. -----Input----- The first line contains an integer `n` representing the number of documents (1 ≤ n ≤ 1000). The following `n` lines each contain a document represented as a string which can include spaces, punctuation, and alphanumeric characters. Each document has a length from 1 to 500 characters. The last line contains the search string, which consists of alphabetic characters only (both uppercase and lowercase are possible) and has a length from 1 to 100. -----Output----- Print a single integer: the number of documents that contain the search string at least once. -----Examples----- Input 3 Hello World! Programming is fun. hello there! hello Output 2 Input 2 Data Science and AI Machine Learning science Output 1 ---Note--- In the first sample, the search string \\"hello\\" appears in the first and third documents (case-insensitive). In the second sample, the search string \\"science\\" appears in the first document.","solution":"def count_documents_containing_string(documents, search_string): Returns the number of documents that contain the search string at least once. The search is case-insensitive. Args: documents (list of str): List of document strings. search_string (str): The string to search for in the documents. Returns: int: Number of documents containing the search string. search_string_lower = search_string.lower() count = 0 for doc in documents: if search_string_lower in doc.lower(): count += 1 return count"},{"question":"The kingdom of Westeros has three different types of warriors: Knights, Archers, and Mages. Each type of warrior offers a different attack power and defense power. These values are represented as integers A, B, and C for attack power and D, E, and F for defense power, respectively, for the three types of warriors. Given these values, you need to determine which type of warrior offers the highest overall combat effectiveness, which is calculated as the sum of attack power and defense power. Input: - The first line contains two integers N and M. Here N represents the number of scenarios and M represents the number of warriors in each scenario. - Each of the next N lines contains M pairs of integers separated by a space, where each pair represents the attack and defense power values for a warrior in that scenario. Output: - For each scenario, print the type of warrior with the highest overall combat effectiveness (\\"Knight\\", \\"Archer\\", or \\"Mage\\"). If there is a tie, print the type that appears first in the order: Knight, Archer, Mage. SAMPLE INPUT 2 3 10 15 20 25 30 35 40 50 20 30 15 10 SAMPLE OUTPUT Mage Knight","solution":"def highest_effectiveness_warrior(N, M, scenarios): result = [] warrior_types = [\\"Knight\\", \\"Archer\\", \\"Mage\\"] for i in range(N): max_effectiveness = -1 best_warrior = None for j in range(M): attack = scenarios[i][2*j] defense = scenarios[i][2*j + 1] effectiveness = attack + defense if effectiveness > max_effectiveness: max_effectiveness = effectiveness best_warrior = warrior_types[j] result.append(best_warrior) return result"},{"question":"Given an integer n, find the nth Triangular number. The nth triangular number T_{n} is defined as the number of dots needed to form an equilateral triangle with n dots on a side. The first three triangular numbers are 1, 3, and 6. Triangular Number Example 1: Input: n = 1 Output: 1 Explanation: See the diagram given above. Example 2: Input: n = 2 Output: 3 Explanation: See the diagram given above. Example 3: Input: n = 3 Output: 6 Explanation: See the diagram given above. Your Task: You don\'t need to read input or print anything. Your task is to complete the function getNthTriangularNum() which takes an Integer n as input and returns the answer. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^{5}","solution":"def getNthTriangularNum(n): Returns the nth triangular number. nth triangular number T_n is given by the formula T_n = n * (n + 1) // 2 return n * (n + 1) // 2"},{"question":"You are given two arrays nums1 and nums2 of the same length n and an integer k. The task is to return the maximum sum of the products of elements from pairs chosen from nums1 and nums2, given that you can change the order of elements in nums1 but not in nums2. Example 1: Input: nums1: [1, 3, 2] nums2: [4, 5, 1] k: 2 Output: 24 Explanation: Reorder nums1 to [2, 3, 1] to maximize the sum of the products of pairs: (2 * 4) + (3 * 5) = 23. Example 2: Input: nums1: [1, 3, 5] nums2: [2, 4, 6] k: 3 Output: 44 Explanation: Reorder nums1 to [5, 3, 1] to maximize the sum of the products of pairs: (5 * 2) + (3 * 4) + (1 * 6) = 28.","solution":"def max_sum_of_products(nums1, nums2, k): Returns the maximum sum of the products of elements from pairs chosen from nums1 and nums2. You can change the order of elements in nums1 but not in nums2. Args: nums1: list of int nums2: list of int k: int Returns: int: maximum sum of the products of k pairs. # Sort nums1 in descending order since we need to maximize product nums1.sort(reverse=True) # Sort nums2 in descending order since we need to maximize product nums2.sort(reverse=True) # Calculate the sum of the products of the k largest pairs max_sum = 0 for i in range(k): max_sum += nums1[i] * nums2[i] return max_sum"},{"question":"Implement a class **RecentCounter** that counts recent requests. An instance of the class will be initialized with an empty request log, and it should be able to handle requests at various time intervals. The class will have the following methods: 1. `ping(t)`: - A request will be called at time `t` (in milliseconds). This method should count and return the number of requests that have been made in the past 3000 milliseconds, including the present one. - Specifically, return the number of pings that have happened from time `t` - 3000 to `t`. # Example ```plaintext RecentCounter recentCounter = new RecentCounter(); recentCounter.ping(1); # returns 1 recentCounter.ping(100); # returns 2 recentCounter.ping(3001); # returns 3 recentCounter.ping(3002); # returns 3 ``` # Explanation - At `t = 1`, the log is [1], so 1 request took place in the past 3000 ms. - At `t = 100`, the log is [1, 100], so 2 requests took place in the past 3000 ms. - At `t = 3001`, the log is [1, 100, 3001], so 3 requests took place in the past 3000 ms. - At `t = 3002`, the log is [100, 3001, 3002], so 3 requests took place in the past 3000 ms. # Constraints - The number of calls to `ping` will not exceed `10^4`. - Each call to `ping` will have `1 <= t <= 10^9`. - Each call to `ping` will be in strictly increasing order. # Input Format The input consists of multiple calls to the `ping` function with the call times as arguments. # Output Format For each `ping` call, return the number of requests in the past 3000 milliseconds in the sequence they were made. # Implementation ```python class RecentCounter: def __init__(self): from collections import deque self.queue = deque() def ping(self, t): self.queue.append(t) while self.queue[0] < t - 3000: self.queue.popleft() return len(self.queue) # You can test the implementation using recentCounter = RecentCounter() print(recentCounter.ping(1)) print(recentCounter.ping(100)) print(recentCounter.ping(3001)) print(recentCounter.ping(3002)) ``` This implementation of RecentCounter uses a deque to efficiently manage the request times, ensuring that only the requests within the last 3000 milliseconds are counted.","solution":"from collections import deque class RecentCounter: def __init__(self): self.queue = deque() def ping(self, t): A request is called at time t (in milliseconds). Returns the number of requests that have been made in the past 3000 milliseconds (including this one). self.queue.append(t) while self.queue[0] < t - 3000: self.queue.popleft() return len(self.queue)"},{"question":"Given an array of integers where each element represents the width of a book and a separate integer representing the number of bookshelves, design a program that distributes these books across the shelves such that the width of the widest shelf is minimized. Example 1: Input: books = [1, 2, 3, 4, 5, 6, 7, 8, 9] shelves = 3 Output: 17 Explanation: We can distribute the books as follows: - Shelf 1: [1, 2, 3, 4, 5] with width 15 - Shelf 2: [6, 7] with width 13 - Shelf 3: [8, 9] with width 17 Here, the widest shelf has a width of 17, which is minimized. Example 2: Input: books = [10, 20, 30, 40] shelves = 2 Output: 60 Explanation: We can distribute the books as follows: - Shelf 1: [10, 20, 30] with width 60 - Shelf 2: [40] with width 40 Here, the widest shelf has a width of 60, which is minimized. Your Task: You don\'t need to read input or print anything. Your task is to implement the function minimizeShelfWidth() which takes an integer array books[] and an integer shelves as arguments and returns the minimized width of the widest shelf. Expected Time Complexity: O(nlogn) Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(books) ≤ 10^4 1 ≤ books[i] ≤ 10^4","solution":"def can_place_books(books, shelves, max_width): current_width = 0 required_shelves = 1 for book in books: if current_width + book > max_width: required_shelves += 1 current_width = book if required_shelves > shelves: return False else: current_width += book return True def minimizeShelfWidth(books, shelves): left, right = max(books), sum(books) while left < right: mid = (left + right) // 2 if can_place_books(books, shelves, mid): right = mid else: left = mid + 1 return left"},{"question":"A company wishes to incentivize their employees with a set of unique prizes. Each prize has an associated happiness value. Given a list of happiness values, the goal is to select a non-empty subset of prizes such that the sum of the happiness values in the subset is maximized, but the selected subset should not contain adjacent prizes. For example, if the happiness values are [3, 2, 5, 10, 7], the subset [3, 10] is valid and the sum is 13. However, the subset [3, 5, 7] is not valid because 5 and 7 are adjacent. Write a function to find the maximum sum of happiness values from the non-adjacent subset. -----Input:----- - First line contains an integer N, the number of prizes. - Second line contains N integers separated by spaces, representing the happiness values of the prizes. -----Output:----- - The maximum sum of happiness values from a non-adjacent subset. -----Constraints----- - 1 leq N leq 10^5 - 1 leq happiness values leq 10^4 -----Sample Input 1:----- 5 3 2 5 10 7 -----Sample Output 1:----- 15 -----Explanation----- The subset [3, 5, 7] or [3, 10] yields the maximum sum of 15.","solution":"def max_non_adjacent_sum(happiness_values): Given a list of happiness values, find the maximum sum of non-adjacent values. if not happiness_values: return 0 if len(happiness_values) == 1: return happiness_values[0] # Initialize the two states prev1 = 0 # Value when not taking the current prize prev2 = 0 # Value when taking the current prize for value in happiness_values: new_sum = max(prev1, prev2 + value) prev2 = prev1 prev1 = new_sum return prev1"},{"question":"A software company wants to evaluate the encryption strength of their new algorithm. They have a pool of test strings and for each test string, they want to determine the length of the longest subsequences that can be formed using only two distinct characters. A subsequence is defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Write a program that, given a string, finds and prints the length of the longest subsequences consisting of exactly two distinct characters. Input The first line contains a single string s (1 ≤ |s| ≤ 100) consisting of lowercase English letters. Output Print a single integer — the length of the longest subsequence that can be formed using exactly two distinct characters. Examples Input abcabcabc Output 6 Input aabbb Output 5 Input abcd Output 2 Note In the first sample, \'a\', \'b\', and \'c\' are repeated three times. The longest subsequences using exactly two distinct characters are \'ababab\', \'abcbcb\', \'acacac\', etc., which have a length of 6 in total. In the second sample, the longest subsequence would be \'aabbb\', which has a length of 5 in total. In the third sample, the longest subsequences using exactly two distinct characters are \'ab\', \'ac\', \'ad\', \'bc\', \'bd\', and \'cd\', each having a length of 2.","solution":"from itertools import combinations def longest_subsequence_two_chars(s): Returns the length of the longest subsequence that can be formed using exactly two distinct characters. max_length = 0 unique_chars = set(s) for char1, char2 in combinations(unique_chars, 2): count = 0 for char in s: if char == char1 or char == char2: count += 1 max_length = max(max_length, count) return max_length"},{"question":"Write a function that takes a list of integers and returns a new list containing only the even numbers from the original list. ``` Input: [1, 2, 3, 4, 5, 6] Output: [2, 4, 6] ```","solution":"def filter_even_numbers(nums): Takes a list of integers and returns a new list containing only the even numbers from the original list. return [num for num in nums if num % 2 == 0]"},{"question":"Alice is organizing a coding competition and wants to track the scores of participants over multiple rounds. Each participant is identified by their unique username, and there may be multiple rounds for each participant. Alice wants a compact summary of the highest score each participant has achieved. Help Alice by writing a program that takes in the results of each round and outputs the highest score for each participant. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the number of rounds. Each of the next n lines contains a string username and an integer score, separated by a space. -----Output----- For each unique participant, print their username followed by their highest score, sorted in alphabetical order of usernames. -----Examples----- Input 5 john 150 ann 200 john 180 ann 220 tom 90 Output ann 220 john 180 tom 90 Input 3 alice 100 bob 150 alice 120 Output alice 120 bob 150 -----Note----- In the first example, \\"john\\" has scores of 150 and 180, so the highest score is 180. \\"ann\\" has scores of 200 and 220, so the highest score is 220. \\"tom\\" has a single score of 90. In the second example, \\"alice\\" has scores of 100 and 120, so the highest score is 120. \\"bob\\" has a single score of 150. The output should list the participants in alphabetical order.","solution":"def track_high_scores(n, rounds): Takes the number of rounds and the scores for each round, returns the highest score of each participant in alphabetical order. :param n: int: number of rounds :param rounds: list of tuples: each tuple contains a string (username) and an int (score) :return: list of tuples: each tuple contains a string (username) and an int (highest score) sorted alphabetically by username scores = {} for username, score in rounds: if username in scores: scores[username] = max(scores[username], score) else: scores[username] = score sorted_scores = sorted(scores.items()) return sorted_scores"},{"question":"Given a list of integers, you need to find two distinct elements such that their sum is equal to a given target value. If such a pair exists, return their indices as a tuple (index1, index2). If no such pair exists, return (-1, -1). Example 1:- Input: 4 2 7 11 15 9 Example 2:- Input: 4 1 2 3 4 8 Output: (0, 1) (-1, -1) Your task: You need to complete the function findTwoSum() that takes a list of integers and a target value as input and returns a tuple containing the indices of the two elements that add up to the target value, or (-1, -1) if no such pair exists. Constraints: 1 <= N <= 100 -1000 <= arr[i] <= 1000 -2000 <= target <= 2000","solution":"def findTwoSum(arr, target): Returns the indices of two distinct elements in the array that add up to the target value. If no such pair exists, returns (-1, -1). index_map = {} for index, num in enumerate(arr): complement = target - num if complement in index_map: return (index_map[complement], index) index_map[num] = index return (-1, -1)"},{"question":"Create a function that simulates the operation of a simple stack-based calculator. The calculator supports the four basic arithmetic operations: addition (+), subtraction (-), multiplication (*), and division (/). The input to the function will be an array of strings where each string represents either an integer or an operation. The function should process the input in the given order and return the final result as an integer. Note that the division should be integer division with truncation towards zero. -----Input----- An array of strings with length n (1 ≤ n ≤ 10^4), where each element is either an integer in string format or one of the strings \\"+\\", \\"-\\", \\"*\\", or \\"/\\". -----Output----- Return a single integer, which is the result of evaluating the expression represented by the input array. -----Examples----- Input [\\"2\\", \\"1\\", \\"+\\", \\"3\\", \\"*\\"] Output 9 Input [\\"4\\", \\"13\\", \\"5\\", \\"/\\", \\"+\\"] Output 6 Input [\\"10\\", \\"6\\", \\"-\\", \\"3\\", \\"/\\"] Output 1 -----Note----- In the first example, the expression \\"2 1 + 3 *\\" is evaluated as follows: - Push 2 onto the stack. - Push 1 onto the stack. - Pop 1 and 2, add them (2 + 1 = 3), and push the result (3) onto the stack. - Push 3 onto the stack. - Pop 3 and 3, multiply them (3 * 3 = 9), and push the result (9) onto the stack. In the second example, the expression \\"4 13 5 / +\\" is evaluated as follows: - Push 4 onto the stack. - Push 13 onto the stack. - Push 5 onto the stack. - Pop 5 and 13, divide them (13 / 5 = 2), and push the result (2) onto the stack. - Pop 2 and 4, add them (4 + 2 = 6), and push the result (6) onto the stack.","solution":"def stack_calculator(input_list): stack = [] for token in input_list: if token not in \\"+-*/\\": stack.append(int(token)) else: b = stack.pop() a = stack.pop() if token == \\"+\\": stack.append(a + b) elif token == \\"-\\": stack.append(a - b) elif token == \\"*\\": stack.append(a * b) elif token == \\"/\\": stack.append(int(a / b)) # Use int() to ensure truncation towards zero return stack[0]"},{"question":"Sophia is organizing her digital album of family photos. She wants to categorize them based on the year they were taken. Each photo has a filename which includes the year it was taken in the format \\"YYYY_description.jpg\\". Sophia has a list of these filenames, but she needs help sorting them by the year. -----Input----- The first line contains a single integer n (1 leq n leq 100), the number of photo filenames. The next n lines each contain a single string, a photo filename in the format \\"YYYY_description.jpg\\", where \\"YYYY\\" is the year and \\"description\\" is an arbitrary string of lowercase letters and possibly underscores. -----Output----- Print n lines of photo filenames, sorted by year in ascending order. If two or more photos are from the same year, maintain their relative order as in the input. -----Examples----- Sample Input: 3 2021_vacation.jpg 2019_birthday.jpg 2021_graduation.jpg Sample Output: 2019_birthday.jpg 2021_vacation.jpg 2021_graduation.jpg","solution":"def sort_photos_by_year(n, filenames): Sorts the list of photo filenames by the year they were taken. Parameters: n : int The number of photo filenames. filenames : list of str The list of photo filenames in format \\"YYYY_description.jpg\\". Returns: list of str The sorted list of photo filenames by year in ascending order. sorted_filenames = sorted(filenames, key=lambda x: int(x[:4])) return sorted_filenames"},{"question":"**Problem** Consider a grid of size N x N (1-based index). Each cell in the grid can be land or water. You are initially standing at the cell (1, 1) which is always land. You need to determine the minimum number of steps required to reach the cell (N, N) if it\'s possible. You can move up, down, left, or right, but you can only move to a cell that is land. If there is no valid path from (1, 1) to (N, N), output \\"Impossible\\". Input The input consists of multiple datasets. Each dataset is represented in the following format: ``` N row1 row2 ... rowN ``` Where `N` (1 ≤ N ≤ 50) represents the size of the grid. Each of the following `N` lines contains `N` characters, either \'L\' for land or \'W\' for water. The end of the input consists of a single zero. Output For each dataset, print the minimum number of steps required to reach the cell (N, N). If it\'s impossible, output \\"Impossible\\". Example Input ``` 5 LLLWL LWWLL LWLWL LLWLL LLLLL 3 LWL WLW LWL 0 ``` Output ``` 8 Impossible ``` Explanation In the first example, one of the shortest paths is: (1,1) -> (2,1) -> (3,1) -> (4,1) -> (5,1) -> (5,2) -> (5,3) -> (5,4) -> (5,5). The minimum number of steps required is 8. In the second example, it\'s not possible to reach (3,3) from (1,1) without walking on water, so the output is \\"Impossible\\".","solution":"from collections import deque def min_steps_to_reach_end(grid): N = len(grid) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] if grid[0][0] == \'W\' or grid[N-1][N-1] == \'W\': return \\"Impossible\\" queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set() visited.add((0, 0)) while queue: x, y, steps = queue.popleft() if x == N-1 and y == N-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == \'L\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return \\"Impossible\\" def process_input(input_data): lines = input_data.strip().split(\'n\') results = [] i = 0 while i < len(lines): N = int(lines[i]) if N == 0: break grid = [list(lines[i+j+1]) for j in range(N)] result = min_steps_to_reach_end(grid) results.append(result) i += N + 1 return results"},{"question":"Consider a warehouse management system where you handle the recording of enter and exit logs of different containers. Each log entry indicates a container entering or leaving the warehouse at a specific timestamp, along with the weight of the container. You are required to determine the maximum weight held by the warehouse at any given time. --------- Input --------- The first line contains an integer N, the number of log entries. Each of the next N lines contains three values: 1. T (integer): The timestamp of the log entry. 2. W (integer): The weight of the container at this timestamp. 3. Op (string): The operation, either \\"enter\\" or \\"exit\\". --------- Output --------- Print a single integer, the maximum weight held by the warehouse at any given time. --------- Constraints --------- 1 ≤ N ≤ 10^5 1 ≤ T ≤ 10^6 1 ≤ W ≤ 10^6 \\"enter\\" or \\"exit\\" is valid as Op --------- Example --------- Input: 5 1 100 enter 2 200 enter 3 150 enter 4 100 exit 5 150 exit Output: 450 Explanation: At timestamp 3, the warehouse holds containers with weights 100, 200, and 150, making it the heaviest at any given point with a total weight of 450.","solution":"def max_warehouse_weight(log_entries): Returns the maximum weight held by the warehouse at any given time. Parameters: - log_entries: list of tuples containing (T, W, Op) for N log entries. Returns: - Integer: maximum weight held by the warehouse at any given time. current_weight = 0 max_weight = 0 for _, weight, operation in log_entries: if operation == \\"enter\\": current_weight += weight elif operation == \\"exit\\": current_weight -= weight if current_weight > max_weight: max_weight = current_weight return max_weight # Function to parse the input and return the list of log entries def parse_input(input_str): input_lines = input_str.strip().split(\'n\') N = int(input_lines[0]) log_entries = [] for i in range(1, N+1): T, W, Op = input_lines[i].split() T = int(T) W = int(W) log_entries.append((T, W, Op)) return log_entries # Example usage input_str = 5 1 100 enter 2 200 enter 3 150 enter 4 100 exit 5 150 exit log_entries = parse_input(input_str) print(max_warehouse_weight(log_entries)) # Output: 450"},{"question":"In a remote village, people have unique string patterns as their identifiers. However, the village has a peculiar rule: every identifier can be converted to a new identifier by repeatedly removing adjacent duplicate characters. For example, the identifier \\"abbac\\" can be converted to \\"c\\" by removing \\"bb\\" and then \\"aa\\". Create a function that, given a list of identifiers, returns the final identifier for each by repeatedly removing adjacent duplicate characters until no more removals can be made. Input: The first line of input contains an integer n (1 ≤ n ≤ 50), the number of identifiers. Each of the following n lines contains a string identifier (1 ≤ length of identifier ≤ 1024) consisting of lowercase English letters. Output: For each identifier, output its final form after all possible removals of adjacent duplicates. Example: Input: 3 abbac aabbcc abccba Output: c (empty string) (empty string) Explanation: For \\"abbac\\", the \'bb\' and \'aa\' are removed step-by-step until only \'c\' remains. For \\"aabbcc\\", \'aa\', \'bb\', and \'cc\' are removed sequentially leaving an empty string. For \\"abccba\\", \'cc\' is removed first, resulting in \\"abba\\", then \'bb\' is removed, resulting in \\"aa\\", and finally \'aa\' is removed, leaving an empty string.","solution":"def remove_adjacent_duplicates(identifier): stack = [] for char in identifier: if stack and stack[-1] == char: stack.pop() # Remove the duplicate else: stack.append(char) return \'\'.join(stack) def process_identifiers(identifiers): return [remove_adjacent_duplicates(identifier) for identifier in identifiers] def main(input_values): n = int(input_values[0]) identifiers = input_values[1:n+1] return process_identifiers(identifiers)"},{"question":"The kingdom of Alphabetia consists of a sequence of villages, each represented by a lowercase letter of the English alphabet. Villages are arranged in a specific order, but due to recent attacks by dragons, the roads between some villages have been destroyed. Now, the King of Alphabetia wants to know the longest subsequence of connected villages that he can travel starting from the first village without deviating from the order given. A village is \\"connected\\" if it shares a road with at least one neighboring village in the sequence. Write a program to find the length of the longest subsequence of connected villages, starting from the first village in the sequence. -----Input----- The first line contains a single integer n (1 leqslant n leqslant 10^5) — the number of villages in the sequence. The second line contains a sequence of n lowercase English letters representing the villages. The third line contains a single integer m (0 leqslant m leqslant n-1) — the number of connected pairs of villages. Each of the next m lines contains two integers a and b (1 leqslant a, b leqslant n) indicating that the village at position a is connected to the village at position b. Note that the connection is bidirectional. -----Output----- Print the length of the longest subsequence of connected villages starting from the first village. -----Examples----- Input 5 abcde 3 1 2 2 3 4 5 Output 3 Input 6 abcdef 2 1 2 5 6 Output 2 -----Note----- In the first example, the villages are labeled \\"a\\", \\"b\\", \\"c\\", \\"d\\", and \\"e\\". The connected pairs are (1,2), (2,3), and (4,5). Starting from the first village \\"a\\", the King can travel to village 2 \\"b\\", then to village 3 \\"c\\", resulting in a longest subsequence of length 3. In the second example, the villages are labeled \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\". The connected pairs are (1, 2) and (5, 6). Starting from the first village \\"a\\", the King can only travel to village 2 \\"b\\", resulting in a longest subsequence of length 2.","solution":"def longest_connected_subsequence(n, villages, m, connections): from collections import defaultdict, deque if m == 0: return 1 graph = defaultdict(list) for a, b in connections: graph[a-1].append(b-1) graph[b-1].append(a-1) visited = [False] * n max_length = 0 def bfs(start): queue = deque([start]) visited[start] = True length = 0 while queue: current = queue.popleft() length += 1 for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return length for i in range(n): # To handle isolated sections but typically only needed from index 0 if not visited[i]: max_length = max(max_length, bfs(i)) return max_length # Example usage: n = 5 villages = \\"abcde\\" m = 3 connections = [(1, 2), (2, 3), (4, 5)] print(longest_connected_subsequence(n, villages, m, connections)) # Output: 3"},{"question":"Write a function to clone a linked list that contains next and random pointer (a pointer to any node in the linked list or Null). The random pointer might point to any node in the list, and it can even point to itself. The function should return a deep copy of the linked list. Input: In this problem, method takes 1 argument: address of the head of the linked list. The function should not read any input from stdin/console. The struct Node has a data part which stores the data, a next pointer which points to the next element of the linked list, and a random pointer which points to any node in the list. There are multiple test cases. For each test case, this method will be called individually. Output: Return the head of the deep copied linked list. User Task: The task is to complete the function cloneLinkedList() which should return the head of the deep copied linked list. Constraints: 1<=T<=100 1<=N<=200 Example: Input: 2 3 1 2 3 null 1 2 4 1 2 3 4 null 3 1 2 Output: 1 2 3 1 2 3 1 2 3 4 1 2 3 4 Explanation: Testcase 1: In the first linked list, the next and random pointers are described as: Node 1 → next: Node 2, random: null Node 2 → next: Node 3, random: Node 1 Node 3 → next: null, random: Node 2 After cloning, the linked list should maintain the same structure. Testcase 2: In the second linked list, the next and random pointers are described as: Node 1 → next: Node 2, random: null Node 2 → next: Node 3, random: Node 3 Node 3 → next: Node 4, random: Node 1 Node 4 → next: null, random: Node 2 After cloning, the linked list should maintain the same structure.","solution":"class Node: def __init__(self, data, next=None, random=None): self.data = data self.next = next self.random = random def cloneLinkedList(head): if not head: return None # Step 1: Insert new nodes current = head while current: new_node = Node(current.data) new_node.next = current.next current.next = new_node current = new_node.next # Step 2: Assign random pointers to the new nodes current = head while current: if current.random: current.next.random = current.random.next current = current.next.next # Step 3: Separate the newly created list from the original list current = head new_head = head.next while current: temp = current.next current.next = temp.next if temp.next: temp.next = temp.next.next current = current.next return new_head"},{"question":"Given a string s containing only digits, your task is to find the number of possible decodings of the string. Each digit or pair of digits should be mapped to a letter as follows: \'A\' to \'Z\' are represented by \'1\' to \'26\', respectively. Assume that the string does not contain any leading zeros. Example 1: Input: s = \\"12\\" Output: 2 Explanation: It could be decoded as \\"AB\\" (1 2) or \\"L\\" (12). Example 2: Input: s = \\"226\\" Output: 3 Explanation: It could be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6). Your Task: Your task is to complete the function numDecodings which returns an integer representing the number of possible decodings of the given string s. The function takes a single argument, the string s. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= s.length <= 100 s contains only digits and does not contain leading zeros. Note: The Input/Output format and Example given are used for the system\'s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def numDecodings(s): if not s: return 0 n = len(s) # dp array to store the number of ways to decode up to each position dp = [0] * (n + 1) # Base case initialization dp[0] = 1 # Empty string has one way to be decoded dp[1] = 1 if s[0] != \'0\' else 0 # Single character string has one way if it\'s not \'0\' for i in range(2, n + 1): single_digit = int(s[i - 1:i]) two_digit = int(s[i - 2:i]) if 1 <= single_digit <= 9: dp[i] += dp[i - 1] if 10 <= two_digit <= 26: dp[i] += dp[i - 2] return dp[n]"},{"question":"A company wants to create an email validation function for sign-up forms. An email is considered valid if it meets the following criteria: 1. The email contains exactly one \'@\' character. 2. The domain part (the part after the \'@\') must contain at least one \'.\' character. 3. Neither the local part (the part before the \'@\') nor the domain part should be empty. 4. The local part (the part before the \'@\') should only contain alphanumeric characters and the special characters \'.\', \'_\', \'-\', and \'+\'. No other characters are allowed. 5. The domain part should only contain alphanumeric characters and the special character \'-\'. No other characters are allowed. 6. Both the local part and the domain part must start and end with an alphanumeric character. Write a function `isValidEmail` that takes a string as an input and returns `True` if the email is valid according to the above criteria, and `False` otherwise. Examples: ```python isValidEmail(\\"john.doe@example.com\\") # True isValidEmail(\\"jane-doe@sub.example.com\\") # True isValidEmail(\\".jane_doe@example.com\\") # False (local part should not start with a special character) isValidEmail(\\"jane@doe@example.com\\") # False (multiple \'@\' characters) isValidEmail(\\"jane.doe@com\\") # False (domain part must contain a \'.\' character) isValidEmail(\\"jane.doe@-example.com\\") # False (domain part should not start with a special character) ``` Note: - All input emails will be lowercase strings without any surrounding spaces. - The input email length will be between 1 and 1000 characters inclusive.","solution":"import re def isValidEmail(email: str) -> bool: Checks if the provided email is valid based on the specified criteria. # Check for exactly one \'@\' character if email.count(\'@\') != 1: return False local_part, domain_part = email.split(\'@\') # Check if local part and domain part are not empty if not local_part or not domain_part: return False # Check if the domain part contains at least one \'.\' character if \'.\' not in domain_part: return False # Validate local part if not re.match(r\'^[a-zA-Z0-9._+-]+\', local_part): return False # Validate domain part if not re.match(r\'^[a-zA-Z0-9.-]+\', domain_part): return False # Check if local part starts and ends with an alphanumeric character if not local_part[0].isalnum() or not local_part[-1].isalnum(): return False # Check if domain part starts and ends with an alphanumeric character if not domain_part[0].isalnum() or not domain_part[-1].isalnum(): return False return True"},{"question":"Given an array of integers, you are tasked with finding the maximum possible product of any three numbers within the array. Your program should efficiently compute this product. Input The input consists of: - A single line containing space-separated integers representing the elements of the array. Output Output a single integer, which is the maximum possible product of any three numbers in the array. Constraints - The length of the array will be ≥ 3. - Each integer in the array can be between -1000 and 1000. Examples Input 1 10 2 6 5 3 Output 300 Input -10 -10 5 2 Output 500 Input 1 -4 3 -6 7 0 Output 168","solution":"def max_product_of_three(nums): Returns the maximum possible product of any three numbers in the array. nums.sort() # The maximum product can be the highest product of the three largest numbers # or the product of the two smallest numbers (both possibly negative) and the largest number. return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"A large company has several servers that store key information. Each server has a specific storage capacity. Given a list of servers, where each server is represented by an integer denoting its storage capacity, a company has certain rules for organizing backup. The company wants to distribute the backup load across two groups of servers such that the difference between the total storage capacities of the two groups is minimized. Your task is to write a function that, given the capacities of the servers, returns the minimal difference possible between the total capacities of the two groups. -----Input----- The input contains a single integer n (1 ≤ n ≤ 20), which represents the number of servers, followed by n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 1000) representing the storage capacities of the servers. -----Output----- Print a single integer — the minimal difference between the total capacities of the two groups of servers. -----Examples----- Input 3 8 5 6 Output 3 Input 4 3 1 4 2 Output 0 -----Note----- In the first example, the company\'s servers have capacities 8, 5, and 6. One optimal way to divide them into two groups is (8) and (5, 6), which results in the total capacities of 8 and 11, and the difference is 3. In the second example, the company\'s servers have capacities 3, 1, 4, and 2. One optimal division is (3, 2) and (1, 4), which results in the total capacities of 5 and 5, and the difference is 0.","solution":"def minimal_diff(n, capacities): def find_min_diff(idx, sum1, sum2): if idx == n: return abs(sum1 - sum2) option1 = find_min_diff(idx + 1, sum1 + capacities[idx], sum2) option2 = find_min_diff(idx + 1, sum1, sum2 + capacities[idx]) return min(option1, option2) return find_min_diff(0, 0, 0)"},{"question":"# Task: Write a function `simulate_journey` that takes a dictionary representing the towns and distances between them, as well as a list of towns representing someone\'s journey. The function should return the total distance travelled, or a string `\\"Invalid journey\\"` if the journey includes towns that don\'t exist in the dictionary or towns that are not connected. Example: ```python # Map of towns and distances towns = { \\"A\\": {\\"B\\": 5, \\"C\\": 4}, \\"B\\": {\\"A\\": 5, \\"C\\": 2, \\"D\\": 3}, \\"C\\": {\\"A\\": 4, \\"B\\": 2, \\"D\\": 7}, \\"D\\": {\\"B\\": 3, \\"C\\": 7} } # Valid journey journey = [\\"A\\", \\"B\\", \\"D\\"] simulate_journey(towns, journey) # Output: 8 (A -> B -> D : 5 + 3) # Invalid journey (No connection between A and D) invalid_journey = [\\"A\\", \\"D\\"] simulate_journey(towns, invalid_journey) # Output: \\"Invalid journey\\" # Invalid journey (C is not connected to E) invalid_journey2 = [\\"C\\", \\"E\\"] simulate_journey(towns, invalid_journey2) # Output: \\"Invalid journey\\" ``` Notes: - The dictionary or map describing the towns and distances is guaranteed to be non-empty. - The list representing the journey may be empty or contain one town, in which case the total distance should be 0. - The locations in the journey list are case-sensitive and should match exactly with the keys in the dictionary. - Ensure that the journey is possible by checking that each consecutive pair of towns in the list is directly connected. - If any part of the journey is invalid, return the string \\"Invalid journey\\".","solution":"def simulate_journey(towns, journey): Simulates a journey through towns and returns the total distance travelled. :param towns: Dictionary representing the towns and distances between them :param journey: List of towns representing the journey :return: Total distance travelled or \\"Invalid journey\\" if journey is not possible if len(journey) < 2: return 0 total_distance = 0 for i in range(len(journey) - 1): current_town = journey[i] next_town = journey[i + 1] if current_town not in towns or next_town not in towns[current_town]: return \\"Invalid journey\\" total_distance += towns[current_town][next_town] return total_distance"},{"question":"A company wants to implement a new scheduling policy for their employees. Each employee works in time slots, and some time slots may overlap with others. To ensure efficient scheduling, they want to determine the minimum number of rooms required so that no two overlapping time slots share the same room. The task is to write a program that takes the start and end times of the working slots and calculates the minimum number of rooms required. Input format: The first line of input will contain an integer, T, the number of test cases. Each test case starts with an integer N, the number of time slots. The next N lines will each contain two integers, S and E, representing the start and end times of a time slot (inclusive and exclusive respectively). Output format: For each test case, output a single integer, the minimum number of rooms required. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 0 ≤ S < E ≤ 10000 SAMPLE INPUT 2 3 10 20 15 25 20 30 2 1 5 6 10 SAMPLE OUTPUT 2 1 Explanation In the first test case, the time slots [10, 20) and [15, 25) overlap, so two rooms are required. The time slot [20, 30) does not overlap with the first time slot but overlaps with the second slot, still resulting in needing two rooms in total. In the second test case, the time slots do not overlap, so only one room is required.","solution":"def min_rooms_required(test_cases): def calculate_rooms(slots): # Extract start and end times start_times = sorted([slot[0] for slot in slots]) end_times = sorted([slot[1] for slot in slots]) start_ptr = 0 end_ptr = 0 rooms_needed = 0 max_rooms = 0 # Use two pointers to traverse the start and end times while start_ptr < len(start_times): if start_times[start_ptr] < end_times[end_ptr]: rooms_needed += 1 max_rooms = max(max_rooms, rooms_needed) start_ptr += 1 else: rooms_needed -= 1 end_ptr += 1 return max_rooms results = [] for case in test_cases: n, slots = case results.append(calculate_rooms(slots)) return results def process_input(input_data): input_lines = input_data.strip().split(\'n\') t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(input_lines[index]) slots = [] index += 1 for _ in range(n): s, e = map(int, input_lines[index].strip().split()) slots.append((s, e)) index += 1 test_cases.append((n, slots)) return test_cases"},{"question":"Given an array arr of N integers, find the smallest integer that is not present in the array. Example 1: Input: arr[] = {3, 4, -1, 1} Output: 2 Explanation: The smallest positive integer missing from the array is 2. Example 2: Input: arr[] = {1, 2, 3, 10} Output: 4 Explanation: The smallest positive integer missing from the array is 4. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function findMissingInteger() that takes an array (arr), sizeOfArray (n), and returns the smallest positive integer that is not present in the array. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 <= N <= 10^6 -10^6 <= arr[i] <= 10^6","solution":"def findMissingInteger(arr, n): This function finds the smallest positive integer missing from the array. # We use the index of the array to mark the presence of elements for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] # Now check which is the smallest positive integer missing for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"You have a number of packages to send but there is a weight limit for each package delivery. Each package can carry up to W kilograms. Given the weight in kilograms for each item, you should determine the minimum number of packages needed to send all items. -----Constraints----- - All values in input are integers. - 1 leq W leq 100 - 1 leq number of items leq 100 - 1 leq weight of each item leq 100 -----Input----- Input is given from Standard Input in the following format: W n w1 w2 w3 ... wn - W: The weight limit of a single package - n: The number of items - w1, w2, w3, ..., wn: The weights of the items -----Output----- Print a single integer representing the minimum number of packages needed to send all items. -----Sample Input----- 10 6 7 2 3 9 1 5 -----Sample Output----- 3 Explanation: - One possible way to distribute items in packages is as follows: 1st package: 7 + 2 ≤ 10, 2nd package: 9 + 1 ≤ 10, 3rd package: 3 + 5 ≤ 10. So, the minimum number of packages needed is 3.","solution":"def min_packages(W, n, weights): Determine the minimum number of packages needed to send all items given the weight limit W and the list of item weights. Parameters: W (int) : The weight limit of a single package. n (int) : The number of items. weights (List[int]) : The weights of the items. Returns: int : The minimum number of packages needed. from itertools import combinations weights.sort(reverse=True) packages = 0 while weights: packages += 1 current_weight = weights.pop(0) for i in range(len(weights)-1, -1, -1): if current_weight + weights[i] <= W: current_weight += weights.pop(i) return packages # Function to read input and call the min_packages function if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() W = int(data[0]) n = int(data[1]) weights = list(map(int, data[2:])) print(min_packages(W, n, weights))"},{"question":"Create a function that takes a list of integers and returns a list of integers from the original list that are prime numbers. Prime numbers are defined as numbers greater than 1 that have no divisors other than 1 and themselves. The result list should be sorted in ascending order. Assume the input list may contain duplicate integers and that the original order does not matter. Examples ~~~if-not:python ``` [2, 3, 4, 5, 6, 7] should return [2, 3, 5, 7] [10, 11, 12, 11, 13] should return [11, 11, 13] [1, 4, 6, 8, 9] should return [] [29, 1, 17, 17, 23] should return [17, 17, 23, 29] ``` ~~~ ~~~if:python ``` [2, 3, 4, 5, 6, 7] should return [2, 3, 5, 7] [10, 11, 12, 11, 13] should return [11, 11, 13] [1, 4, 6, 8, 9] should return [] [29, 1, 17, 17, 23] should return [17, 17, 23, 29] ``` ~~~","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def filter_primes(numbers): Returns a list of prime numbers from the input list. The result list is sorted in ascending order. return sorted([num for num in numbers if is_prime(num)])"},{"question":"In a busy city, there are several intersections connected by one-way streets of varying lengths. You are given a map of the city with the intersections and streets and your task is to help a delivery driver determine the shortest path to deliver packages. However, the delivery driver can only drive a certain maximum number of hours continuously before needing to take a break. Each hour he can cover a certain maximum distance. He can start the delivery from any intersection and needs to deliver to any other intersection. Given the total intersections N and the one-way streets M described with their distances, and a set of Q queries each representing a delivery task from one intersection to another, find the minimum number of breaks the driver needs to take to complete each delivery. If the intersection is unreachable, return -1. - Assume the driver takes a break only after the maximum continuous driving hour is reached. - The driver starts from the specified starting intersection with no breaks taken yet. -----Constraints----- - All values in input are integers. - 2 leq N leq 200 - 0 leq M leq frac{N(N-1)}{2} - 1 leq A_i, B_i leq N - A_i neq B_i - Each hour the driver can cover up to D distance - 1 leq C_i leq 10^6 - 1 leq Q leq N left(N-1right) - 1 leq s_i, t_i leq N - s_i neq t_i -----Input----- Input is given from Standard Input in the following format: N M D A_1 B_1 C_1 : A_M B_M C_M Q s_1 t_1 : s_Q t_Q -----Output----- Print Q lines. The i-th line should contain the minimum number of breaks the driver needs to take while delivering from Intersection s_i to Intersection t_i. If Intersection t_i is unreachable, the line should contain -1 instead. -----Sample Input----- 4 4 5 1 2 3 2 3 4 3 4 6 1 3 2 2 1 4 3 1 -----Sample Output----- 1 -1 For the first query, the shortest path from Intersection 1 to Intersection 4 can be found by traveling through Intersections 1 -> 2 -> 3 -> 4. He travels 3 units to 2, then 4 units to 3. He must stop to take a break before traveling further since the distance exceeds 5. Then he travels 6 units to 4 which again exceeds 5 and needs another break. For the second query, Intersection 1 is unreachable from Intersection 3 in the city due to the one-way streets configuration.","solution":"import heapq def dijkstra(N, edges, start, D): graph = [[] for _ in range(N)] for u, v, w in edges: graph[u-1].append((v-1, w)) distances = [float(\'inf\')] * N distances[start] = 0 pq = [(0, start)] while pq: current_distance, u = heapq.heappop(pq) if current_distance > distances[u]: continue for v, weight in graph[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return distances def minimum_breaks(N, M, D, edges, queries): results = [] for s, t in queries: distances = dijkstra(N, edges, s-1, D) total_distance = distances[t-1] if total_distance == float(\'inf\'): results.append(-1) else: breaks = (total_distance - 1) // D results.append(breaks) return results def main(): import sys input = sys.stdin.read data = input().split() idx = 0 N = int(data[idx]) M = int(data[idx+1]) D = int(data[idx+2]) idx += 3 edges = [] for _ in range(M): u = int(data[idx]) v = int(data[idx+1]) w = int(data[idx+2]) edges.append((u, v, w)) idx += 3 Q = int(data[idx]) idx += 1 queries = [] for _ in range(Q): s = int(data[idx]) t = int(data[idx+1]) queries.append((s, t)) idx += 2 results = minimum_breaks(N, M, D, edges, queries) for result in results: print(result)"},{"question":"Yraglac has taken up baking as a hobby and is experimenting with various ingredients. One day, he comes across a special dough recipe that requires him to measure ingredients in milliliters (mL) but his measuring cup is in liters (L). Given Yraglac\'s mathematical precision, he wants to convert a given volume in liters to milliliters exactly and represent the result as a fraction in its lowest terms. -----Input----- The input consists of a single test case representing a fractional number in liters. It will be in the form a/b or -a/b where a and b are integers such that 0 leq a, b leq 1000000 and b neq 0. Note that the input is not guaranteed to be a fraction in the lowest terms. -----Output----- Output a single line with the exact result of converting the volume to milliliters, expressed as a fraction in lowest terms (that is, gcd (a,b) = 1). Note: Since 1 liter is equal to 1000 milliliters, to convert from liters to milliliters, you multiply by 1000. -----Examples----- Sample Input 1: 1/1 Sample Output 1: 1000/1 Sample Input 2: 3/2 Sample Output 2: 1500/1 Sample Input 3: -7/4 Sample Output 3: -1750/1","solution":"from fractions import Fraction def liters_to_milliliters(liters_fraction): Converts a volume in liters (given as a fraction in string form) to milliliters and represents it as a fraction in its lowest terms. fraction = Fraction(liters_fraction) milliliters = fraction * 1000 return f\\"{milliliters.numerator}/{milliliters.denominator}\\""},{"question":"Vera loves puzzles and coding challenges. She enjoys solving problems related to array manipulation and sequence analysis. One day, she came across an interesting sequence problem and decides to solve it. Given an array of n integers, Vera wants to find the maximum subarray sum for any subarray of length exactly k. A subarray is defined as a contiguous part of an array. Vera needs your help to find out this maximum subarray sum. Write a function that takes in the array and the integer k and returns the maximum sum of any subarray of length exactly k. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. The third line contains the integer k (1 ≤ k ≤ n) — the length of the subarray. Output Print a single integer — the maximum sum of any subarray of length exactly k. Examples Input 5 1 2 3 4 5 3 Output 12 Input 8 -1 3 -2 5 3 -5 2 2 4 Output 9 Note In the first example, the subarray with the maximum sum of length 3 is [3, 4, 5], and the sum is 3 + 4 + 5 = 12. In the second example, the subarray with the maximum sum of length 4 is [3, -2, 5, 3], and the sum is 3 + (-2) + 5 + 3 = 9.","solution":"def max_subarray_sum_of_length_k(arr, k): Returns the maximum sum of any subarray of length exactly k. Parameters: arr (list of int): The array of integers. k (int): The length of the subarray. Returns: int: The maximum subarray sum of length k. # Initialize the sum of first k elements max_sum = current_sum = sum(arr[:k]) # Use sliding window to calculate the sum of subarrays of length k for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Alice recently got a new job at a software company, and she has been given the task to optimize the company\'s backup system. The system is designed to store files in multiple directories. Each directory can contain files and other directories. Alice needs to create a program to calculate the total size of a directory which includes the sizes of its files and all the files in its subdirectories. A directory or a file is represented by a JSON object, where: - A file has attributes `\\"type\\": \\"file\\"` and `\\"size\\"` (an integer representing the size of the file in bytes). - A directory has attributes `\\"type\\": \\"directory\\"` and `\\"contents\\"` (an array of files and other directories). Your task is to implement a function that calculates the total size of a given directory, including the sizes of its contents recursively. -----Input----- The input will be a JSON object representing a directory. -----Output----- The output should be an integer representing the total size of the directory in bytes. -----Examples----- Input { \\"type\\": \\"directory\\", \\"contents\\": [ { \\"type\\": \\"file\\", \\"size\\": 100 }, { \\"type\\": \\"directory\\", \\"contents\\": [ { \\"type\\": \\"file\\", \\"size\\": 50 }, { \\"type\\": \\"file\\", \\"size\\": 30 } ] } ] } -----Output----- 180 -----Notes----- In the given example, the root directory contains: - A file of size 100 bytes. - A subdirectory that contains two files of sizes 50 and 30 bytes respectively. The total size of the root directory is `100 + 50 + 30 = 180` bytes.","solution":"def calculate_directory_size(directory): Computes the total size of a directory, including the sizes of its files and all subdirectory contents. Args: directory (dict): JSON object representing a directory. Returns: int: Total size of the directory in bytes. total_size = 0 for item in directory[\\"contents\\"]: if item[\\"type\\"] == \\"file\\": total_size += item[\\"size\\"] elif item[\\"type\\"] == \\"directory\\": total_size += calculate_directory_size(item) return total_size"},{"question":"You are given an array a of length n consisting of integers. You may perform the following operation on the array any number of times (possibly zero): select any element a_i and multiply it by any integer value x such that 2 le x le m (thus, set a_i := a_i times x). Your task is to determine the maximum possible value of any element in the array after performing at most p total operations. -----Input----- The first line of the input contains three integers n, p, and m (1 le n le 100, 0 le p le 100, 2 le m le 100) — the number of elements in the array, the maximum number of operations allowed, and the maximum multiplier value, respectively. The second line of the input contains n integers a_1, a_2, dots, a_n (1 le a_i le 100), where a_i is the i-th element of a. -----Output----- Print one integer — the maximum possible value of any element in the array after performing at most p operations. -----Examples----- Input 3 2 3 2 5 7 Output 21 Input 4 0 4 3 1 4 2 Output 4 Input 5 1 10 1 2 3 4 5 Output 50","solution":"def max_possible_value(n, p, m, a): Determines the maximum possible value of any element in the array after performing at most p operations. Args: n (int): the number of elements in the array. p (int): the maximum number of operations allowed. m (int): the maximum multiplier value. a (list): the list of integers representing the array. Returns: int: the maximum possible value of any element in the array. # If no operations are allowed, the maximum value is the maximum element in the array if p == 0: return max(a) # Calculate the maximum value by considering the maximum allowed multiplier and available operations max_val = 0 for value in a: for _ in range(min(p, 1)): # we only apply the operation once as subsequent multiplications can be seen as one value *= m max_val = max(max_val, value) return max_val"},{"question":"A company is organizing a team-building event. They want to divide employees into groups of exactly 3 people. Given the number of employees at the company, determine the maximum number of groups of 3 that can be formed, and the number of employees who will not be placed in any group (the remainder). Constraints * The number of employees is an integer between 1 and 10^9 (inclusive). Input Input is given from Standard Input in the following format: N Output Print two integers. The first integer should be the maximum number of groups of 3 that can be formed, and the second integer should be the number of employees who are not placed in any group. Examples Input 10 Output 3 1 Input 25 Output 8 1 Input 1000000000 Output 333333333 1","solution":"def groups_of_three(n): Returns the maximum number of groups of 3 that can be formed, and the number of employees who are not placed in any group. :param n: The number of employees. :return: A tuple (max_groups, remainder) max_groups = n // 3 remainder = n % 3 return (max_groups, remainder)"},{"question":"A company is organizing a coding competition with multiple rounds. The competition consists of `N` rounds, numbered from 1 to N. Each participant must complete all rounds sequentially from round 1 to round N. The difficulty of the `i`-th round is given by `d_i`. The company has assigned different mentors to oversee various segments of the competition. Each mentor is assigned to a consecutive block of rounds and the partitioning of rounds among mentors may be suboptimal. A mentor can oversee multiple disjoint blocks, but each block must consist of consecutive rounds. Given the difficulties of each round, determine the minimal effort needed for participants to complete all rounds if every participant avoids particularly hard sequences of consecutive rounds. The effort for participants is defined as the maximum difficulty of any single round in their journey. Formally, there is a threshold `M`. If the participant encounters any block that has a maximum difficulty strictly greater than `M`, they will consider that round sequence too hard and take different blocks instead. Your task is to calculate the minimal threshold `M` such that participants can complete all rounds without ever encountering a block of rounds where the hardest round exceeds this threshold. ------ Input ------ The first line of the input contains an integer `T` denoting the number of test cases. The description of `T` test cases follows. For each test case: - The first line contains an integer `N`. - The next line contains `N` space-separated integers representing the difficulty of each round `d_1, d_2, ..., d_N`. ------ Output ------ For each test case, output a single line containing the minimal threshold `M`. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^5 1 ≤ d_i ≤ 10^9 The sum of `N` over all test cases in any file is at most 10^6. ------ Subtask 1 (20 points) ------ 2 ≤ N ≤ 1000 ------ Subtask 2 (20 points) ------ 1 ≤ d_i ≤ 10^5 ------ Subtask 3 (60 points) ------ No additional constraints ------ Sample Input ------ 3 4 2 5 3 4 6 7 1 5 9 2 8 3 1 3 1 ------ Sample Output ------ 5 9 3 ------ Explanation ------ For the first test case, the hardest round is the second one with a difficulty of 5. Therefore, the minimal threshold `M` is 5. For the second test case, the hardest round is the fourth one with a difficulty of 9. Therefore, the minimal threshold `M` is 9. For the third test case, the hardest round is the second one with a difficulty of 3. Therefore, the minimal threshold `M` is 3.","solution":"def find_minimal_threshold(N, difficulties): Determines the minimal threshold M such that no single round exceeds this difficulty. Arguments: N : int : the number of rounds difficulties : List[int] : the list of difficulties for each round Returns: int : the minimal threshold M return max(difficulties) def process_test_cases(T, test_cases): Processes multiple test cases. Arguments: T : int : the number of test cases test_cases : List[Tuple[int, List[int]]] : list of tuples, each containing the number of rounds and the difficulties of each round Returns: List[int] : list of minimal thresholds for each test case results = [] for N, difficulties in test_cases: results.append(find_minimal_threshold(N, difficulties)) return results"},{"question":"Problem description: You are given a list of strings representing book titles in a library. Some of these titles might appear multiple times due to multiple copies of the same book. Write a function to determine the number of unique book titles in the library. Input The first line contains an integer T, the number of test cases. The description of the T test cases follows. Each test case starts with an integer n, the number of book titles in the list. The next n lines each contain a book title. Output For each test case, output a single line containing the number of unique book titles in the library. Constraints 1 ≤ T ≤ 10 1 ≤ n ≤ 100000 1 ≤ Length of each title ≤ 100 Example Input: 2 5 \\"The Great Gatsby\\" \\"Moby Dick\\" \\"The Great Gatsby\\" \\"War and Peace\\" \\"Moby Dick\\" 3 \\"To Kill a Mockingbird\\" \\"1984\\" \\"1984\\" Output: 3 2","solution":"def count_unique_titles(test_cases): Counts the number of unique book titles for each test case. Parameters: test_cases (list): a list of test cases, each test case is a tuple that contains the number of titles and a list of book titles. Returns: list: a list containing the number of unique book titles for each test case. results = [] for n, titles in test_cases: unique_titles = len(set(titles)) results.append(unique_titles) return results def library_unique_titles(T, cases): Transforms input and applies count_unique_titles to find unique book titles in the library. Parameters: T (int): The number of test cases. cases (list): A list of tuples with each tuple containing the number of titles and the list of titles. Returns: list: a list containing the number of unique book titles for each case. return count_unique_titles(cases)"},{"question":"A librarian wants to organize a collection of books on a single shelf. Each book is assigned a thickness, and the shelf has a maximum capacity. Given a list of book thicknesses, the librarian needs to determine the maximum number of books that can be placed on the shelf without exceeding its capacity. Write a program to help the librarian find the maximum number of books that can fit on the shelf. ------ Input Format ------ - The first line will contain a single integer T denoting the number of test cases. The description of the test cases follows. - Each test case consists of two lines: - The first line contains two space-separated integers N and C, where N is the number of books and C is the shelf\'s capacity. - The second line contains N space-separated integers representing the thicknesses of the books. ------ Output Format ------ For each test case, output a single integer representing the maximum number of books that can be placed on the shelf without exceeding its capacity. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ C ≤ 10^9 1 ≤ thickness ≤ 10^6 ------ Sample Input 1 ------ 2 5 10 2 3 4 5 1 4 7 4 3 5 1 ------ Sample Output 1 ------ 4 2 ------ Explanation 1 ------ Test case 1: The librarian can place books with thicknesses 2, 3, 4, and 1 on the shelf for a total thickness of 10, which is within the shelf\'s capacity. This is the maximum number of books that can fit without exceeding the capacity. Test case 2: The librarian can place books with thicknesses 4 and 3 on the shelf for a total thickness of 7, which is within the shelf\'s capacity. This is the maximum number of books that can fit without exceeding the capacity.","solution":"def max_books_on_shelf(test_cases): results = [] for N, C, thicknesses in test_cases: thicknesses.sort() total_thickness = 0 count = 0 for thickness in thicknesses: if total_thickness + thickness <= C: total_thickness += thickness count += 1 else: break results.append(count) return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, C = map(int, lines[index].split()) thicknesses = list(map(int, lines[index + 1].split())) test_cases.append((N, C, thicknesses)) index += 2 return test_cases"},{"question":"You are given a list of integers representing the heights of buildings in a row. Each building\'s width is 1. You need to calculate the maximum area of a rectangle formed by consecutive buildings. Input The first line contains the number of test cases T. For each test case, the first line contains a number N - the number of buildings. The second line contains N space-separated integers representing the heights of the buildings. Output For each test case, output a single integer, the maximum rectangle area that can be formed by consecutive buildings. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 1 ≤ height of building ≤ 100000 SAMPLE INPUT 2 6 2 1 5 6 2 3 7 6 2 5 4 5 1 6 SAMPLE OUTPUT 10 12 Explanation For the 1st case, the maximum rectangle has an area of 10 and is formed by heights 5 and 6 which are consecutive, making the width 2. For the 2nd case, the maximum rectangle has an area of 12, formed by heights 5, 4, and 5 which are consecutive, making the width 3.","solution":"def max_rectangle_area(heights): Calculates the maximum rectangular area in a list of building heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def process_test_cases(test_cases): results = [] for case in test_cases: heights = case[1] results.append(max_rectangle_area(heights)) return results"},{"question":"The shipping company \\"OceanDeliveries\\" manages a fleet of cargo ships. Each ship can dock at designated docks along a coastline. The company wants to track the number of ships at any given dock and efficiently handle queries related to adding and removing ships, as well as querying the number of ships at specific docks. Input The first line contains two integers `M` — the number of docks and `P` — the number of queries to handle. Next `P` lines contain queries that you need to process. There are three types of queries: 1. `1 x` — a ship docks at dock `x`. 2. `2 x` — a ship departs from dock `x`. It is guaranteed that there will be at least one ship at dock `x` when this query is issued. 3. `3 x` — output how many ships are currently docked at dock `x`. - 1 ≤ M ≤ 10^5 - 1 ≤ P ≤ 10^5 - 1 ≤ x ≤ M Output For each third type of query, output the number of ships currently docked at dock `x`. Each answer should be on a separate line. Example Input 5 7 1 2 1 3 1 3 3 3 2 3 3 3 3 2 Output 2 1 1","solution":"def manage_docks(M, P, queries): Manage the docking and depart of ships for a given number of queries. dock_counts = [0] * (M + 1) results = [] for query in queries: if query[0] == 1: # a ship docks at dock `x` dock_counts[query[1]] += 1 elif query[0] == 2: # a ship departs from dock `x` dock_counts[query[1]] -= 1 elif query[0] == 3: # output the number of ships at dock `x` results.append(dock_counts[query[1]]) return results # Example usage # M = 5, P = 7 # queries = [ # (1, 2), # (1, 3), # (1, 3), # (3, 3), # (2, 3), # (3, 3), # (3, 2) # ] # print(manage_docks(M, P, queries)) -> [2, 1, 1]"},{"question":"Given an array of integers, return an array such that each element at index i of the output array is the product of all the numbers in the input array except the one at i. Example: Input: 2 4 1 2 3 4 3 5 6 2 Output: 24 12 8 6 12 10 30 Explanation: In the first case, the array of products is formed by: [2*3*4, 1*3*4, 1*2*4, 1*2*3] which is [24, 12, 8, 6]. In the second case, the array of products is formed by: [6*2, 5*2, 5*6] which is [12, 10, 30]. Input: The first line of input contains the number of test cases T. For each test case, the first line of input contains the number of elements in the array N. The second line contains the N elements of the array. Output: The function should return an array of integers indicating the products as specified. Your Task: The task is to complete the function arrayProduct() which will take in a list of integers and return the described product array. Do not print anything to the stdin/console. Constraints: 1 <= T <= 100 1 <= N <= 1000 1 <= array element <= 100","solution":"def arrayProduct(arr): Returns an array such that each element is the product of all the numbers in the input array except the one at its index. length = len(arr) if length == 1: return [0] # Initialize arrays to get left and right products left_products = [1] * length right_products = [1] * length # Compute left products for i in range(1, length): left_products[i] = left_products[i - 1] * arr[i - 1] # Compute right products for j in range(length - 2, -1, -1): right_products[j] = right_products[j + 1] * arr[j + 1] # Compute result by multiplying left and right products result = [1] * length for k in range(length): result[k] = left_products[k] * right_products[k] return result def processInput(test_cases): result = [] for arr in test_cases: result.append(arrayProduct(arr)) return result"},{"question":"Joshua loves building structures using rectangular wooden blocks. He has k different types of blocks, each characterized by its width and height. Joshua wants to build a wall with these blocks such that the wall has a specified height h and an indefinite width (as wide as needed). The constraint, however, is that each layer (row) of blocks in the wall must be of the exact same height, but each row can use a mixture of blocks in any order. For instance, if the specified height is 5, then only blocks of height 5 can be used in one row of the wall. Joshua can repeat his set of k blocks as many times as he wants but cannot use partial blocks. Determine the number of distinct wall layers Joshua can create with the given set of blocks. -----Input----- First line of the input consists of two integers k and h (1 ≤ k ≤ 1000, 1 ≤ h ≤ 1000), separated by space — the number of different types of blocks and the specified height of the wall layer. The next k lines each contain two integers wi and hi (1 ≤ wi, hi ≤ 1000) — the width and height of each type of block. -----Output----- Print the number of distinct wall layers Joshua can create with the given set of blocks. -----Examples----- Input 3 5 3 5 2 4 1 5 Output 2 Input 4 7 5 7 4 7 3 6 2 7 Output 3 Input 2 3 1 3 4 5 Output 1 -----Note----- In the first sample, Joshua can use the blocks of height 5, so he has two types of blocks that match: width 3 height 5 and width 1 height 5. Therefore, there are 2 distinct ways to form a layer of height 5. In the second sample, Joshua can use the blocks of height 7, so he has three types of blocks that match: width 5 height 7, width 4 height 7, and width 2 height 7. Hence, there are 3 distinct ways to form a layer of height 7. In the third sample, only one type of block matches the specified height (height 3), so there is only 1 distinct way to form a layer of height 3.","solution":"def distinct_wall_layers(k, h, blocks): Determines the number of distinct wall layers Joshua can create with the given set of blocks. Args: k (int): number of different types of blocks h (int): specified height of the wall layer blocks (list of tuples): list where each tuple contains width and height of a block Returns: int: number of distinct wall layers that can be created with the given blocks distinct_heights = set() for width, height in blocks: if height == h: distinct_heights.add((width, height)) # We can also just count heights here return len(distinct_heights) # Example usage: # print(distinct_wall_layers(3, 5, [(3, 5), (2, 4), (1, 5)])) # Output: 2"},{"question":"You are working with a binary tree. Each node contains a value, and each level of the tree is 0-indexed starting from the root level. Your task is to find the largest value in each row. Implement a function `largestValues` that takes the root node of a binary tree as input and returns a list containing the largest value in each row of the tree. # Input/Output - The function `largestValues(root)` should receive a single argument: - `root`: a TreeNode representing the root of the binary tree. The TreeNode class is defined as follows: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` - The function should return a list of integers, where each integer represents the largest value at the corresponding tree level. # Example Input - A binary tree represented as follows: ``` 1 / 3 2 / / 5 3 9 6 ``` Output ```python [1, 3, 9] ``` Explanation - The largest value in row 0 is 1. - The largest value in row 1 is 3. - The largest value in row 2 is 9. # Constraints - The number of nodes in the tree is at most `10^4`. - The values in the binary tree nodes are within the range `[-10^9, 10^9]`. # Note - The implementation should handle the tree traversal efficiently to ensure that the solution executes within a reasonable time frame for large trees.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def largestValues(root): from collections import deque if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) max_value = float(\'-inf\') for _ in range(level_size): node = queue.popleft() max_value = max(max_value, node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(max_value) return result"},{"question":"Given a list of integers, find all unique subsets of the list. Example 1: Input: nums = [1, 2, 2] Output: [[], [1], [2], [1,2], [1,2,2], [2,2]] Example 2: Input: nums = [1] Output: [[], [1]] Your Task: You don\'t need to read input or print anything. Your task is to complete the function uniqueSubsets() which takes the list of integers as the input parameter and returns a list of lists containing all unique subsets in ascending order of subset size and elements within each subset. Expected Time Complexity: O(2^n) Expected Space Complexity: O(2^n) Constraints: -1 <= nums[i] <= 10 0 <= nums.length <= 10","solution":"def uniqueSubsets(nums): Return all unique subsets of the given list of integers. nums.sort() result = [] subset = [] def backtrack(start): result.append(subset[:]) for i in range(start, len(nums)): if i > start and nums[i] == nums[i-1]: continue subset.append(nums[i]) backtrack(i+1) subset.pop() backtrack(0) return result"},{"question":"Given a list of non-negative integers representing elevations of various units of land, imagine that water is poured over these lands and could travel horizontally across each unit. Your task is to calculate the total amount of water that could be trapped after it rains. Input Format A single line containing space-separated non-negative integers representing elevations. Constraints The list of elevations will have at least one element and fewer than 10^4 elements. Each elevation unit is between 0 and 10^5. Output Format A single integer: the total amount of water that could be trapped. Sample Input 3 0 2 0 4 Sample Output 7 Explanation In the sample input [3, 0, 2, 0, 4]: - Choosing index 1: * The maximum elevation to the left is 3. * The maximum elevation to the right is 4. * Water trapped on this unit = min(3, 4) - 0 = 3 units - Choosing index 2: * Maximum elevation to the left is 3. * Maximum elevation to the right is 4. * Water trapped on this unit = min(3, 4) - 2 = 1 unit - Choosing index 3: * Maximum elevation to the left is 3. * Maximum elevation to the right is 4. * Water trapped on this unit = min(3, 4) - 0 = 3 units So, the total amount of water trapped = 3 + 1 + 3 = 7 units.","solution":"def calculate_trapped_water(elevations): if not elevations: return 0 n = len(elevations) left_max = [0] * n right_max = [0] * n left_max[0] = elevations[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], elevations[i]) right_max[n - 1] = elevations[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], elevations[i]) total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - elevations[i] return total_water"},{"question":"You\'re working on an application for track management in a small music streaming service. The application tracks the number of times different songs are played and can display the song that has been played the most. However, in case of a tie (multiple songs with the same highest play count), it should return the lexicographically smallest song among them. Input Each case begins with an integer n (1 ≤ n ≤ 100) which denotes the number of different songs. The next n lines each contain a string s (1 ≤ |s| ≤ 100) which represents the name of the song followed by an integer k (0 ≤ k ≤ 1000) which represents the number of times the song has been played. All song names consist of lowercase English letters only. Output Print the name of the song that has been played the most times. In case of a tie, print the lexicographically smallest song name among those with the highest play count. Sample test(s) Input 3 songa 30 songb 30 songc 10 Output songa Input 4 rockstar 1000 popstar 1000 metallica 999 classical 1001 Output classical Explanation In the first sample, both songa and songb have the highest play count of 30, but songa comes before songb lexicographically. In the second sample, classical has the highest play count of 1001 and therefore it is the output.","solution":"def most_played_song(n, songs): Returns the name of the song with the highest play count. In case of a tie, returns the lexicographically smallest song name among those with the highest play count. Parameters: n (int): Number of songs. songs (list): List of tuples where each tuple contains a song name (str) and its play count (int). Returns: str: The name of the song with the highest play count or the lexicographically smallest song name in case of tie. from collections import defaultdict play_dict = defaultdict(int) for song, count in songs: play_dict[song] = count # Find the maximum play count max_play_count = max(play_dict.values()) # Find all songs with the maximum play count max_played_songs = [song for song, count in play_dict.items() if count == max_play_count] # Return the lexicographically smallest song name among those with the highest play count return min(max_played_songs) # Sample Test Cases n = 3 songs = [(\\"songa\\", 30), (\\"songb\\", 30), (\\"songc\\", 10)] print(most_played_song(n, songs)) # Expected Output: songa n = 4 songs = [(\\"rockstar\\", 1000), (\\"popstar\\", 1000), (\\"metallica\\", 999), (\\"classical\\", 1001)] print(most_played_song(n, songs)) # Expected Output: classical"},{"question":"Python is a versatile and widely-used programming language known for its simplicity and readability. Given its popularity, code efficiency and profiling are crucial skills for Python developers. In this task, you will be focusing on optimizing a function for its runtime performance. # Task You are given an array of integers. Your task is to find two different integers in the array that have the smallest absolute difference between them. Output this smallest absolute difference. # Input - The first line contains an integer n, the number of integers in the array. - The second line contains n integers separated by space. # Output - Print a single integer, the smallest absolute difference between any two distinct integers in the sequence. # Constraints - 2 leq n leq 10^5 - -10^9 leq Array elements leq 10^9 # Example Input ``` 5 1 3 6 10 15 ``` Output ``` 2 ``` Explanation In the given example, the array is `[1, 3, 6, 10, 15]`. The pairs with their absolute differences are: - |1 - 3| = 2 - |3 - 6| = 3 - |6 - 10| = 4 - |10 - 15| = 5 - |1 - 6| = 5 - |1 - 10| = 9 - |1 - 15| = 14 - |3 - 10| = 7 - |3 - 15| = 12 - |6 - 15| = 9 Among these, the smallest absolute difference is `2`, which is between the numbers `1` and `3`. Therefore, the output is `2`. # Constraints Reasoning Given the large possible size of the input array (up to 10^5 elements), an efficient algorithm is required. A naive solution with a time complexity of `O(n^2)` will be too slow. Sorting the array first (O(n log n)) and then finding the minimum difference (O(n)) is an acceptable solution.","solution":"def smallest_abs_difference(arr): Returns the smallest absolute difference between any two distinct integers in the array. arr.sort() min_diff = float(\'inf\') for i in range(len(arr) - 1): diff = abs(arr[i] - arr[i+1]) if diff < min_diff: min_diff = diff return min_diff"},{"question":"Given a list of integers representing the heights of buildings, find the number of buildings that have a clear view of the sunrise. A building has a clear view of the sunrise if and only if there are no taller buildings to its left. Example 1: Input: heights = [7, 1, 8, 4, 9] Output: 3 Explanation: The buildings with heights 7, 8, and 9 have a clear view of the sunrise. There are no buildings to their left that are taller. Example 2: Input: heights = [4, 3, 2, 1] Output: 1 Explanation: Only the first building with height 4 has a clear view of the sunrise. All other buildings are blocked by it. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countBuildingsWithSunriseView() which takes a list of integers heights and returns an integer denoting the number of buildings that have a clear view of the sunrise. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 1000, where n is the number of buildings. 1 ≤ heights[i] ≤ 1000, where heights[i] is the height of the i-th building.","solution":"def countBuildingsWithSunriseView(heights): Returns the number of buildings that have a clear view of the sunrise. if not heights: return 0 max_height = 0 count = 0 for height in heights: if height > max_height: count += 1 max_height = height return count"},{"question":"A software company has created an online game in which players collect points across multiple levels. However, the game developers want to reward consistent players who earn points consecutively across levels. To determine such players, they have created a special scoring rule. The rule is: A player\'s score in each level should be a strictly increasing sequence. Given a series of levels and scores earned in each level, write a function to determine if a player’s points form a strictly increasing sequence. Input:- The first line of input contains an integer T, which is the number of test cases. Each test case starts with an integer N, which indicates the number of levels. The next line contains N integers representing the points earned by the player in each level. Output:- For each test case, output \\"YES\\" if the points form a strictly increasing sequence, otherwise output \\"NO\\". Constraints:- 1 ≤ T ≤ 100 2 ≤ N ≤ 10^5 1 ≤ Points ≤ 10^9 SAMPLE INPUT 3 3 1 2 3 4 1 1 2 3 5 5 3 4 2 1 SAMPLE OUTPUT YES NO NO","solution":"def is_strictly_increasing(points): Determines if the points form a strictly increasing sequence. Args: points: List of integers representing points for each level. Returns: \\"YES\\" if points form a strictly increasing sequence, \\"NO\\" otherwise. for i in range(1, len(points)): if points[i] <= points[i - 1]: return \\"NO\\" return \\"YES\\" def check_sequences(test_cases): Processes multiple test cases to check if each player’s points form a strictly increasing sequence. Args: test_cases: List of tuples, each containing the number of levels and a list of points. Returns: List of strings, each being \\"YES\\" or \\"NO\\" for each test case. results = [] for n, points in test_cases: result = is_strictly_increasing(points) results.append(result) return results"},{"question":"Cathy and Dan are working on an image processing application that requires a specific transformation of a matrix. They need to know if it is possible to transform an initial matrix into a target matrix using a series of operations described below. An operation is defined as: select a submatrix of any size from the initial matrix and rotate it clockwise by 90 degrees. Given the initial matrix and the target matrix for several test cases, help Cathy and Dan determine if the target matrix can be obtained from the initial matrix using the allowed operations. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. The description of each test case is as follows. The first line of each test case contains a single integer n (1 le n le 20) — the size of the matrices (both matrices are n times n). The next n lines contain n integers each, representing the elements of the initial matrix. The following n lines contain n integers each, representing the elements of the target matrix. -----Output----- For each test case, print \\"Possible\\" if the target matrix can be obtained from the initial matrix with the allowed operations. Otherwise, print \\"Impossible\\". You may print the answer in any case. -----Example----- Input 3 2 1 2 3 4 3 1 4 2 3 1 2 3 4 5 6 7 8 9 7 4 1 8 5 2 9 6 3 2 1 2 3 4 1 2 4 3 Output Possible Possible Impossible -----Note----- For the first test case, the initial matrix can be transformed into the target matrix by rotating the whole matrix. For the second test case, the initial matrix can be transformed into the target matrix by rotating the whole matrix. For the third test case, it is impossible to transform the initial matrix into the target matrix.","solution":"def rotate_90_clockwise(matrix): Rotate the given n x n matrix 90 degrees clockwise. n = len(matrix) return [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)] def is_possible_to_transform(initial_matrix, target_matrix): Check if the target matrix can be obtained from the initial matrix via any number of 90 degree rotations. current_matrix = initial_matrix for _ in range(4): if current_matrix == target_matrix: return \\"Possible\\" current_matrix = rotate_90_clockwise(current_matrix) return \\"Impossible\\" def matrix_transformation_possible(t, test_cases): results = [] for i in range(t): n, initial_matrix, target_matrix = test_cases[i] result = is_possible_to_transform(initial_matrix, target_matrix) results.append(result) return results"},{"question":"You are a technical lead at a software company and you\'ve been tasked with optimizing your company\'s cloud storage usage. The company\'s cloud storage provider charges based on the number of bytes stored. To save costs, you want to compress files using a simplified version of run-length encoding (RLE). Run-length encoding is a basic form of data compression where sequences of the same byte are stored as a single byte followed by a count of how many times that byte appears in a row. For this task, we will represent the run-length encoding result as a list of integers where each even-indexed element is a byte value, and each odd-indexed element is the count of that byte. Write a function that compresses a given list of bytes using run-length encoding. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of bytes in the input list. - The second line contains `n` integers `b_1, b_2, ..., b_n` (0 ≤ b_i ≤ 255) — the list of bytes. # Output - Print the run-length encoded representation as a list of integers. Example # Input ``` 10 10 10 10 20 20 20 20 20 30 30 ``` # Output ``` 10 3 20 5 30 2 ``` # Note In the example, the list of bytes `[10, 10, 10, 20, 20, 20, 20, 20, 30, 30]` is compressed to `[10, 3, 20, 5, 30, 2]` using run-length encoding. This kind of compression reduces storage space by efficiently encoding runs of the same byte.","solution":"def run_length_encoding(n, bytes_list): Compresses a list of bytes using run-length encoding (RLE). Parameters: n (int): The number of bytes. bytes_list (list of int): The list of bytes to compress. Returns: list of int: The run-length encoded representation of the input bytes. if n == 0: return [] encoded_list = [] current_byte = bytes_list[0] count = 1 for i in range(1, n): if bytes_list[i] == current_byte: count += 1 else: encoded_list.append(current_byte) encoded_list.append(count) current_byte = bytes_list[i] count = 1 # Append the last run encoded_list.append(current_byte) encoded_list.append(count) return encoded_list"},{"question":"In a fantasy game, players collect mystical cards. Each card grants a unique power, represented by an integer. However, a player\'s power can be affected by having certain sequences of cards in their possession. # Problem Statement You are given a sequence of integers where each integer represents the power of a card. A player\'s power is determined by summing up the powers of all cards he possesses. However, if the sequence contains a specific pattern \\"magic subsequence\\" of consecutive cards, the player\'s power doubles. Given a sequence of card powers and a magic subsequence, compute the player\'s total power after accounting for the magic subsequence rules. # Input - The first line contains an integer `T`, the number of test cases. - For each test case: - The first line contains an integer `N`, the number of cards. - The second line contains `N` space-separated integers representing the card powers. - The third line contains an integer `M`, the length of the magic subsequence. - The fourth line contains `M` space-separated integers representing the magic subsequence. # Output For each test case, output a single integer, the player\'s total power after doubling his power for every occurrence of the magic subsequence. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ card power ≤ 1000 - 1 ≤ M ≤ N # Example Input ``` 2 5 3 6 3 2 1 2 3 6 6 1 2 3 4 5 6 3 2 3 4 ``` Output ``` 22 44 ``` # Explanation **Test Case 1:** - The sequence `3 6 3 2 1` has one occurrence of the magic subsequence `3 6`. - Without the magic subsequence, the total power is `3 + 6 + 3 + 2 + 1 = 15`. - Since the magic subsequence \\"3 6\\" is found once, the total power doubles: `15 * 2 = 30`. **Test Case 2:** - The sequence `1 2 3 4 5 6` has one occurrence of the magic subsequence `2 3 4`. - Without the magic subsequence, the total power is `1 + 2 + 3 + 4 + 5 + 6 = 21`. - Since the magic subsequence \\"2 3 4\\" is found once, the total power doubles: `21 * 2 = 42`. - However, if we consider doubling sequentially for any nested subsequence after first doubling, the actual doubling would be cumulative: `(21 * 2) * 2 = 84`, but since `M <= N` precedes, the total result remains doubled, `42.`","solution":"def calculate_total_power(T, test_cases): results = [] for i in range(T): N = test_cases[i][\'N\'] card_powers = test_cases[i][\'card_powers\'] M = test_cases[i][\'M\'] magic_subseq = test_cases[i][\'magic_subseq\'] total_power = sum(card_powers) magic_subseq_count = 0 for j in range(N - M + 1): if card_powers[j:j+M] == magic_subseq: magic_subseq_count += 1 total_power *= (2 ** magic_subseq_count) results.append(total_power) return results"},{"question":"You are given two arrays a and b, both of length n, consisting of positive integers. Your task is to merge these arrays into a single sorted array in a way that minimizes the possible sum of the first k elements of this sorted array. In one move, you can choose any element from either array a or array b and insert it into the resulting sorted array. You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and k (1 le n, k le 1000) — the number of elements in a and b, and the number of elements in the resulting sorted array you need to sum. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 1000), which are the elements of array a. The third line of each test case contains n integers b_1, b_2, dots, b_n (1 le b_i le 1000), which are the elements of array b. -----Output----- For each test case, print the answer — the minimum possible sum of the first k elements of the resulting sorted array. -----Example----- Input 3 5 3 1 2 3 4 5 5 6 7 8 9 4 2 4 10 15 14 7 1 1 2 6 4 11 12 13 14 15 16 1 2 3 4 5 6 Output 6 2 10 -----Note----- In the first test case of the example, the sorted merged array is [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]. The sum of the first 3 elements is 6. In the second test case of the example, the sorted merged array is [1, 1, 2, 4, 7, 10, 14, 15]. The sum of the first 2 elements is 2. In the third test case of the example, the sorted merged array is [1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 16]. The sum of the first 4 elements is 10.","solution":"def minimal_first_k_sum(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] a = test_cases[i][1] b = test_cases[i][2] combined = sorted(a + b) results.append(sum(combined[:k])) return results # Define a function that can be called with the appropriate input format def main(input_data): Parses the input data and calls minimal_first_k_sum to compute the results. data = input_data.strip().split(\'n\') t = int(data[0]) test_cases = [] index = 1 for _ in range(t): n, k = map(int, data[index].split()) a = list(map(int, data[index + 1].split())) b = list(map(int, data[index + 2].split())) test_cases.append(((n, k), a, b)) index += 3 results = minimal_first_k_sum(t, test_cases) return results"},{"question":"Problem statement Write a function that reverses the words in a given string. * The input string consists of words separated by spaces. * The output string should have the words in reverse order, but the characters within each word should remain in their original order. * Ensure there are no leading or trailing spaces in the output string. * Reduce multiple spaces between words to a single space in the output string. Constraints * The input string\'s length does not exceed 1000 characters. * The input string contains only printable ASCII characters and spaces. * The words in the string are separated by one or more spaces. Function Signature ```python def reverse_words(s: str) -> str: pass ``` Example # Input ```python s = \\" hello world! \\" ``` # Output ```python \\"world! hello\\" ``` Explanation: - After splitting, the words are `[\\"hello\\", \\"world!\\"]`. - Reversing the words list gives `[\\"world!\\", \\"hello\\"]`. - The final output is the sentence formed by joining the words with a single space, which is `\\"world! hello\\"`. # Input ```python s = \\"a good example\\" ``` # Output ```python \\"example good a\\" ``` Explanation: - After splitting, the words are `[\\"a\\", \\"good\\", \\"example\\"]`. - Reversing the words list gives `[\\"example\\", \\"good\\", \\"a\\"]`. - The final output is the sentence formed by joining the words with a single space, which is `\\"example good a\\"`.","solution":"def reverse_words(s: str) -> str: Reverses the order of words in the given string `s`. Parameters: s (str): The input string consisting of words separated by spaces. Returns: str: The string with the words in reversed order. # Split the string into words using spaces words = s.split() # Reverse the list of words words.reverse() # Join the words with a single space and return the result return \' \'.join(words)"},{"question":"You are given a list of N integers. You decide to select a subsequence of these integers such that the sum of the selected integers is as close as possible to a given valued M. The subsequence should have the maximum possible sum less than or equal to M. Your task is to determine the sum of this subsequence. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case, the first line contains two integers, N and M. - The second line contains N space-separated integers representing the list. -----Output:----- For each test case, output the maximum sum of the selected subsequence which is less than or equal to M. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 1000 - 1 leq M leq 10^9 - 1 leq text{list[i]} leq 10^6 -----Sample Input:----- 2 5 10 2 4 6 8 10 3 15 1 5 7 -----Sample Output:----- 10 13","solution":"def get_max_subsequence_sum(n, m, array): # Using dynamic programming to solve the subset sum problem (a variation of knapsack) dp = [0] + [-1] * m for number in array: for j in range(m, number - 1, -1): if dp[j - number] != -1: dp[j] = max(dp[j], dp[j - number] + number) return max(dp) def get_max_sum_for_test_cases(test_cases): results = [] for n, m, array in test_cases: results.append(get_max_subsequence_sum(n, m, array)) return results"},{"question":"In a two-dimensional grid, a forest is represented by a matrix of characters, where each cell contains either \'.\' representing an empty space or \'T\' representing a tree. A lumberjack starts at the top-left corner of the grid (0, 0) and wants to reach the bottom-right corner of the grid (n-1, m-1). The lumberjack can only move to the right or down from their current cell. Determine the maximum number of trees the lumberjack can pass through on their way from the start to the destination. -----Constraints----- - 1 ≤ n, m ≤ 50 - The grid contains only characters \'.\' and \'T\'. -----Input----- Input is given from Standard Input in the following format: - The first line contains two integers, n and m, representing the number of rows and columns in the grid respectively. - The next n lines each contain a string of m characters (either \'.\' or \'T\') representing the forest grid. -----Output----- Print a single integer: the maximum number of trees the lumberjack can pass through on a valid path from the top-left to the bottom-right corner of the grid. -----Sample Input----- 3 4 .T.. TT.T ..T. -----Sample Output----- 3 In this sample, the lumberjack can pass through a maximum of 3 trees in the path (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (2,3).","solution":"def max_trees_through_forest(n, m, grid): if grid[0][0] == \'T\': dp = [[1 for _ in range(m)] for _ in range(n)] else: dp = [[0 for _ in range(m)] for _ in range(n)] for i in range(1, n): dp[i][0] = dp[i-1][0] + (1 if grid[i][0] == \'T\' else 0) for j in range(1, m): dp[0][j] = dp[0][j-1] + (1 if grid[0][j] == \'T\' else 0) for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + (1 if grid[i][j] == \'T\' else 0) return dp[n-1][m-1]"},{"question":"There is a company with n employees and you are given a special list of integer pairs representing the direct manager relationship for each pair of employees. Your task is to compute the number of distinct managers for each employee, including their direct managers and all higher-level managers above them. -----Input----- The first line contains a single integer n (2 le n le 10^5) — the number of employees. The following n-1 lines each contain two integers u and v (1 le u, v le n), representing a direct reporting line in which employee u is a direct manager of employee v. It is guaranteed that there will be no cycles and the input describes a single company hierarchy. -----Output----- Print n integers where the i-th integer is the number of distinct managers that the i-th employee has including the highest possible level managers. -----Examples----- Input 6 1 2 1 3 2 4 2 5 3 6 Output 0 1 1 2 2 2 -----Note----- In the given example, - Employee 1 has no manager. - Employees 2 and 3 have 1 distinct manager each, which is employee 1. - Employees 4 and 5 each have 2 distinct managers: employees 1 and 2. - Employee 6 has 2 distinct managers: employees 1 and 3.","solution":"from collections import defaultdict, deque def count_managers(n, relationships): Given n employees and their direct manager relationships, returns the number of distinct managers for each employee. if n == 1: return [0] # Create an adjacency list representation of the company hierarchy tree = defaultdict(list) for u, v in relationships: tree[u].append(v) tree[v].append(u) # Store the number of distinct managers for each employee manager_count = [0] * (n + 1) # Use BFS to traverse the tree and calculate the number of distinct managers for each node queue = deque([(1, 0)]) # Start BFS from the root node, assuming employee 1 is the root visited = set() visited.add(1) while queue: current, current_level = queue.popleft() manager_count[current] = current_level for neighbor in tree[current]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, current_level + 1)) return [manager_count[i] for i in range(1, n + 1)]"},{"question":"Sarah is working on a unique text-based puzzle. She has a string that needs to be transformed using specific rules. The rules for transformation are: 1. If a character is a letter, shift it by one in the alphabet (i.e., \'a\' becomes \'b\', \'b\' becomes \'c\', etc.). For \'z\', it wraps around to \'a\'. 2. If a character is a digit, increment it by 1 (i.e., \'0\' becomes \'1\', \'1\' becomes \'2\', etc.). For \'9\', it wraps around to \'0\'. 3. If a character is a space, leave it unchanged. Write a function to transform the given string based on the above rules. Input A single line containing a string of length m (1 <= m <= 100), which consists of lowercase letters, digits, and spaces only. Output A single line containing the transformed string. Constraints 1 <= m <= 100 SAMPLE INPUT hello world 123 SAMPLE OUTPUT ifmmp xpsme 234","solution":"def transform_string(s): Transforms the given string based on defined rules: 1. Shift letters by one in the alphabet (with wrap-around for \'z\'). 2. Increment digits by 1 (with wrap-around for \'9\'). 3. Leave spaces unchanged. Args: s (str): The input string to transform. Returns: str: The transformed string. transformed = [] for char in s: if char.isalpha(): if char == \'z\': transformed.append(\'a\') else: transformed.append(chr(ord(char) + 1)) elif char.isdigit(): if char == \'9\': transformed.append(\'0\') else: transformed.append(str(int(char) + 1)) else: # char is a space transformed.append(char) return \'\'.join(transformed)"},{"question":"Given a string s and a dictionary of words wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order. Example 1: Input: s = \\"catsanddog\\", wordDict = [\\"cat\\", \\"cats\\", \\"and\\", \\"sand\\", \\"dog\\"] Output: [\\"cats and dog\\", \\"cat sand dog\\"] Example 2: Input: s = \\"pineapplepenapple\\", wordDict = [\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"] Output: [\\"pine apple pen apple\\", \\"pineapple pen apple\\", \\"pine applepen apple\\"] Example 3: Input: s = \\"catsandog\\", wordDict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output: [] Constraints: 1 <= s.length <= 20 1 <= wordDict.length <= 300 1 <= wordDict[i].length <= 20 s and wordDict[i] consist of only lowercase English letters. All the strings of wordDict are unique.","solution":"def wordBreak(s, wordDict): def backtrack(index): if index == len(s): return [[]] if index in memo: return memo[index] memo[index] = [] for end in range(index + 1, len(s) + 1): word = s[index:end] if word in wordDict: for subsentence in backtrack(end): memo[index].append([word] + subsentence) return memo[index] memo = {} wordDict = set(wordDict) result = backtrack(0) return [\\" \\".join(words) for words in result]"},{"question":"In a remote village, there are n houses aligned in a straight line, numbered from 1 to n. The village chief has decided to form m groups of contiguous houses such that each house belongs to exactly one group. The aim is to form the groups such that the sum of the maximum house numbers in each group is minimized. Given n and m, write a program to determine the minimum sum of the maximum house numbers for the possible group formations. Input The input consists of a single dataset. The dataset consists of one line, and two integers n and m (1 ≤ m ≤ n ≤ 100) are given, separated by a blank space. n represents the total number of houses, and m represents the total number of groups to be formed. Output For the given dataset, output the minimum sum of the maximum house numbers for the groups. Example Input 10 3 Output 20 Explanation One optimal way to divide 10 houses into 3 groups is (1, 2, 3, 4), (5, 6, 7), (8, 9, 10). The sum of 4 (maximum of the first group), 7 (maximum of the second group), and 10 (maximum of the third group) is 21, which is minimized.","solution":"def min_sum_of_maximums(n, m): Returns the minimum sum of the maximum house numbers for the groups. Parameters: n (int): The number of houses. m (int): The number of groups to form. Returns: int: The minimum sum of the maximum house numbers for all groups. # Calculate size of each group base_group_size = n // m extra_houses = n % m min_sum = 0 max_house_number = 0 # Calculate minimum sum of maximums for i in range(m): group_size = base_group_size + (1 if i < extra_houses else 0) max_house_number += group_size min_sum += max_house_number return min_sum"},{"question":"John has a collection of vinyl records and he likes to organize them on a shelf. Each record has a specific genre and position on the shelf. The genres are represented as lowercase English alphabetic characters. John wants to find out which genre is the most frequent on the shelf, and what is its first and last appearing position on the shelf. If there are multiple genres with the same frequency, he wants the lexicographically smallest genre among them. Write a program that, given a list of genres on the shelf, identifies the most frequent genre and its first and last positions on the shelf. -----Input----- The first line contains an integer N (1 le N le 1000), the number of vinyl records on the shelf. The second line contains a string of N lowercase English alphabetic characters where each character represents the genre of a vinyl record. -----Output----- Output a string with three pieces of information separated by space: the most frequent genre, its first position (1-indexed), and its last position (1-indexed). If there are multiple genres with the highest frequency, output the lexicographically smallest genre. -----Examples----- Sample Input 1: 7 abbacca Sample Output 1: a 1 7 Sample Input 2: 5 bbcdc Sample Output 2: b 1 2","solution":"def find_most_frequent_genre_and_positions(n, genres): from collections import defaultdict genre_count = defaultdict(int) first_position = {} last_position = {} for i, genre in enumerate(genres): genre_count[genre] += 1 if genre not in first_position: first_position[genre] = i + 1 last_position[genre] = i + 1 max_frequency = max(genre_count.values()) max_genres = [(genre, first_position[genre], last_position[genre]) for genre, count in genre_count.items() if count == max_frequency] max_genres.sort() most_frequent_genre = max_genres[0] return f\\"{most_frequent_genre[0]} {most_frequent_genre[1]} {most_frequent_genre[2]}\\""},{"question":"Alice and Bob are playing a game with sequences of integers. The rules of the game are as follows: 1. Alice will first choose a sequence of integers b of length M. 2. Bob can then perform one of two types of operations on b an arbitrary number of times: - Add 1 to each element in the sequence. - Reverse the sequence. Bob\'s goal is to change the sequence b such that all elements in b are the same. Determine the minimum number of operations Bob needs to achieve his goal. -----Constraints----- - 1≤M≤1000 - 1≤b_i≤1000 -----Input----- The input is given from Standard Input in the following format: M b1 b2 ... bM -----Output----- Print the minimum number of operations needed to make all elements in b the same. -----Sample Input----- 5 3 1 4 1 5 -----Sample Output----- 4 Explanation: Bob can perform the following operations: 1. Add 1 to each element: (4, 2, 5, 2, 6) 2. Reverse the sequence: (6, 2, 5, 2, 4) 3. Add 1 to each element: (7, 3, 6, 3, 5) 4. Add 1 to each element: (8, 4, 7, 4, 6) Now all elements in the sequence are the same.","solution":"def min_operations_to_equalize_sequence(M, b): Returns the minimum number of operations required to make all elements in the sequence b the same. Parameters: - M: int, the length of the sequence b - b: list of int, the sequence of integers Returns: - int, the minimum number of operations required # We need to find the maximum element in the sequence max_element = max(b) # We need to transform each element in the sequence to match this maximum element operations = 0 for element in b: operations += max_element - element return operations"},{"question":"You are given a string of lowercase English letters. Your task is to determine the character that appears the most frequently in the string. If multiple characters have the same maximum frequency, return the alphabetically smallest one. -----Input----- The first line contains a single integer t (1 le t le 100). Then t test cases follow. For each test case: The first line contains a single integer n (1 le n le 100) — the length of the string. The second line contains a string of n lowercase English letters. -----Output----- For each test case, output a single character — the most frequent character in the string. If there are multiple characters with the same frequency, output the alphabetically smallest one. -----Examples----- Input 3 6 aabbcc 5 abcde 10 aabbbccddd Output a a b -----Note----- For the first test case, all characters \'a\', \'b\', and \'c\' have the same frequency (2 occurrences), but \'a\' comes first alphabetically. For the second test case, all characters have the same frequency (1 occurrence), and \'a\' is the smallest alphabetically. For the third test case, \'b\' and \'d\' have the same highest frequency (3 occurrences each), but \'b\' is alphabetically smaller.","solution":"def most_frequent_character(t, test_cases): from collections import Counter result = [] for n, s in test_cases: freq = Counter(s) max_freq = max(freq.values()) most_freq_chars = [char for char, count in freq.items() if count == max_freq] result.append(min(most_freq_chars)) return result"},{"question":"You are given a binary string `s` of length `n`, representing a sequence of closed and open brackets such that: - `1` denotes an open bracket `(`, - `0` denotes a closed bracket `)`. A string is valid if it forms a valid bracket sequence. Your task is to find the minimum number of `)` that need to be added to the end of the string `s` so that it forms a valid sequence. # Input - The first line contains a single integer `t` (1 leq t leq 10^4) — the number of test cases. - Each of the next `t` lines contains a binary string `s` of length `n` (1 leq n leq 2 cdot 10^5). # Output For each test case, print the minimum number of `)` that need to be added to the end of the string `s` to make it a valid bracket sequence. # Examples Input ``` 4 1100 111000 101 110 ``` Output ``` 0 0 1 1 ``` Note In the first test case, the string `s` already forms a valid bracket sequence, so no additional `)` is needed. In the second test case, the string `s` also forms a valid bracket sequence. In the third test case, one `)` is needed at the end to make it valid: `(())`. In the fourth test case, one `)` is needed at the end to make it valid: `(())`.","solution":"def min_closing_brackets_needed(test_cases): results = [] for s in test_cases: open_brackets = 0 for char in s: if char == \'1\': # open bracket open_brackets += 1 elif char == \'0\' and open_brackets > 0: # close bracket with an open bracket available to match open_brackets -= 1 results.append(open_brackets) return results # Read input def process_input(): t = int(input().strip()) test_cases = [input().strip() for _ in range(t)] return t, test_cases def main(): t, test_cases = process_input() results = min_closing_brackets_needed(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Your friend is trying to send secret messages across a network represented as an undirected graph. The graph consists of `n` nodes and `m` edges. Each edge has a weight which represents the amount of time it takes to transmit a message through that edge. The messages must travel through one or more paths, but your friend wants to ensure that the messages are transmitted as quickly as possible. You are tasked with finding the shortest transmission time between two specific nodes in the graph. Write a program to help your friend determine the minimum time required to send a message from node `A` to node `B`. # Input - The first line contains three integers `n`, `m`, `A`, and `B` (1 ≤ `n` ≤ 1000, 0 ≤ `m` ≤ 100000, 1 ≤ `A`, `B` ≤ `n`), where `n` is the number of nodes, `m` is the number of edges, and `A` and `B` are the starting and ending nodes, respectively. - The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ `u`, `v` ≤ `n`, 1 ≤ `w` ≤ 10000), where `u` and `v` are nodes connected by an edge and `w` is the weight of that edge. # Output - Print a single integer representing the minimum transmission time from node `A` to node `B`. If there is no path from `A` to `B`, print `-1`. # Example Input ``` 4 4 1 4 1 2 1 2 3 2 3 4 1 1 3 4 ``` Output ``` 4 ``` Input ``` 3 1 1 3 1 2 1 ``` Output ``` -1 ``` # Note In the first example, the shortest path from node 1 to node 4 is through nodes 1 -> 2 -> 3 -> 4 with a total transmission time of 4. The direct edge from node 1 to node 3 with weight 4 is not optimal as it results in a longer transmission time. In the second example, there is no path from node 1 to node 3, so the output is -1.","solution":"import heapq def shortest_transmission_time(n, m, A, B, edges): # Create the adjacency list representation of the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find the shortest path from A to B pq = [(0, A)] dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[A] = 0 visited = set() while pq: current_dist, node = heapq.heappop(pq) if node in visited: continue visited.add(node) if node == B: return current_dist for neighbor, weight in graph[node]: if neighbor not in visited: new_dist = current_dist + weight if new_dist < dist[neighbor]: dist[neighbor] = new_dist heapq.heappush(pq, (new_dist, neighbor)) return -1 if dist[B] == float(\'inf\') else dist[B]"},{"question":"Please write a function that takes a list of integers and returns a new list containing only the non-negative integers from the original list, in the original order. For example, for the list [-1, 2, -3, 4, 0], the function should return [2, 4, 0].","solution":"def filter_non_negative(lst): Returns a new list containing only the non-negative integers from the original list, in the original order. Parameters: lst (list of int): The list of integers to filter. Returns: list of int: A new list containing only the non-negative integers. return [x for x in lst if x >= 0]"},{"question":"Mariah is creating a new toy design which consists of a series of beads arranged in a row. Each bead can be colored either red, green, or blue. She wants to create a pattern where no two beads of the same color are adjacent to each other. She also prefers that the blue beads should be as few as possible. Given the length of the series of beads, help Mariah design the pattern according to her requirements. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 2·10^5) — the length of the bead series. -----Output----- Print the bead pattern that satisfies all the constraints. If there are multiple answers, print any of them. -----Examples----- Input 1 Output r Input 3 Output rgb Input 4 Output rgrg -----Note----- No two adjacent beads in the series should be of the same color. The blue beads in the pattern should be minimized as much as possible.","solution":"def generate_bead_pattern(n): Generate a bead pattern of length n where no two adjacent beads are the same color, and the blue beads should be as few as possible. # The pattern can maximize the use of \'r\' and \'g\' and minimize \'b\' pattern = \'\' colors = [\'r\', \'g\'] # Start creating the pattern to satisfy the conditions for i in range(n): pattern += colors[i % 2] # Alternating \'r\' and \'g\' return pattern"},{"question":"A valid codeword in a certain binary prefix code is a binary string that does not contain any instance of \'111\' (three consecutive \'1\'s). Given an integer n, calculate the number of valid codewords of length n. -----Input----- The input contains one line with a single integer n (1 leq n leq 10^5). -----Output----- Output one line with the number of valid codewords of length n. -----Examples----- Sample Input 1: 3 Sample Output 1: 7 Sample Input 2: 5 Sample Output 2: 19","solution":"def count_valid_codewords(n): This function calculates the number of valid codewords of length n. A valid codeword is a binary string that does not contain the substring \'111\'. if n == 1: return 2 if n == 2: return 4 if n == 3: return 7 # Dynamically calculate the number of valid codewords for length n dp = [0] * (n + 1) dp[1] = 2 dp[2] = 4 dp[3] = 7 for i in range(4, n + 1): dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] return dp[n]"},{"question":"# The Problem You are given an array of integers representing the prices of a stock on consecutive days. You need to find the maximum profit you can achieve by buying on one day and selling on another later day. If no profit can be made, return 0. More specifically, you want to maximize the difference between the selling price and the buying price. You must buy before you sell. Write a function `max_profit(prices)` that takes a list of integers and returns an integer, the maximum profit. # Example ``` max_profit([7, 1, 5, 3, 6, 4]) ➞ 5 # Buy on day 2 (price 1) and sell on day 5 (price 6), # profit = 6 - 1 = 5 ``` ``` max_profit([7, 6, 4, 3, 1]) ➞ 0 # In this case, no transactions are done and the max profit = 0. ``` # Notes - The list of prices is guaranteed to have at least two elements. - You are only permitted to complete one transaction (i.e., buy one and sell one share of the stock). - The solution should run in O(n) time complexity.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling one share of the stock on later days. If no profit can be made, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price - min_price > max_profit: max_profit = price - min_price if price < min_price: min_price = price return max_profit"},{"question":"Given a string S and an integer K. Consider all the substrings of S of length K. Your task is to find the substring with the maximum number of unique characters. If there are multiple substrings with the same number of unique characters, return the lexicographically smallest one. If the length of S is less than K, return an empty string. ------ Input Format ------ - First line contains T, the number of test cases. Then the test cases follow. - Each test case contains a string S and an integer K. ------ Output Format ------ For each test case, output the substring of length K with the maximum number of unique characters. If multiple, return the lexicographically smallest one. If S has a length less than K, output an empty string. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ |S| ≤ 10^5 1 ≤ K ≤ 10^5 S consists of lowercase English letters. ----- Sample Input 1 ------ 2 abcabc 3 abacaba 3 ----- Sample Output 1 ----- abc bac ----- Explanation 1 ------ Test case 1: The substrings of \\"abcabc\\" of length 3 are \\"abc\\", \\"bca\\", \\"cab\\", \\"abc\\". The substring \\"abc\\" has the maximum number of unique characters (3). Test case 2: The substrings of \\"abacaba\\" of length 3 are \\"aba\\", \\"bac\\", \\"aca\\", \\"cab\\", \\"aba\\". The substrings \\"bac\\" and \\"cab\\" have the same number of unique characters (3), but \\"bac\\" is lexicographically smaller than \\"cab\\".","solution":"def max_unique_substring(S, K): Returns the substring of length K with the maximum number of unique characters. If multiple substrings have the same number of unique characters, return the lexicographically smallest one. If the length of S is less than K, return an empty string. if len(S) < K: return \\"\\" max_unique = 0 candidates = [] for i in range(len(S) - K + 1): substr = S[i:i+K] unique_count = len(set(substr)) if unique_count > max_unique: max_unique = unique_count candidates = [substr] elif unique_count == max_unique: candidates.append(substr) return min(candidates) def solve(test_cases): results = [] for S, K in test_cases: results.append(max_unique_substring(S, K)) return results"},{"question":"Write a function that takes a list of integers and returns a new list containing only the integers that are greater than the average of the original list. If the list contains fewer than three numbers or more than 50 numbers, the function should return \\"invalid list\\". For example: ````` [1, 2, 3, 4, 5] --> [4, 5] [10, 20] --> \\"invalid list\\" [100, 200, 300, 400, 500] --> [400, 500] `````","solution":"def filter_greater_than_average(numbers): Returns a list of integers that are greater than the average of the original list. If the list contains fewer than three numbers or more than 50 numbers, returns \\"invalid list\\". if len(numbers) < 3 or len(numbers) > 50: return \\"invalid list\\" average = sum(numbers) / len(numbers) result = [num for num in numbers if num > average] return result"},{"question":"A suspicious package was detected at the Parcel Distribution Center. The package was flagged because it contained some metallic objects, which is unusual for the type of package in question. The security team wants to find out the minimum distance between any two metallic objects inside the package to evaluate the risk. The package can be represented as a n × m grid where each cell either contains a metallic object represented by \'M\' or is empty represented by \'.\'. You have to determine the minimum distance between any two metallic objects. The distance between two cells (r1, c1) and (r2, c2) is defined as |r1 - r2| + |c1 - c2|. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Then n lines follow, each containing a string of length m which represents the grid. Each character in the string is either \'M\' or \'.\'. It is guaranteed that there are at least two \'M\' in the grid. Output Print a single integer — the minimum distance between any two metallic objects in the grid. Examples Input 3 4 .... .M.. ...M Output 3 Input 5 5 ..... ..... .MM.. ..... M...M Output 1","solution":"def min_distance_between_metallic_objects(n, m, grid): Calculate the minimum distance between any two metallic objects in the grid. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: List of strings representing the grid :return: Minimum distance between any two metallic objects # List to store positions of all metallic objects metallic_positions = [] # Collect the positions of all metallic objects for r in range(n): for c in range(m): if grid[r][c] == \'M\': metallic_positions.append((r, c)) # Initialize the minimum distance with a high value min_dist = float(\'inf\') # Compare each pair of metallic objects to determine the minimum distance for i in range(len(metallic_positions)): for j in range(i + 1, len(metallic_positions)): (r1, c1) = metallic_positions[i] (r2, c2) = metallic_positions[j] # Calculate Manhattan distance and update min_dist dist = abs(r1 - r2) + abs(c1 - c2) if dist < min_dist: min_dist = dist return min_dist"},{"question":"You are given a simple text editor that supports the following operations: 1. Insert a character at the end of the text. 2. Remove the last character of the text. 3. Undo the last operation performed. Your task is to process a sequence of operations and output the resulting text after all operations have been performed. -----Input----- The first line contains an integer n (1 leq n leq 10^5) — the number of operations. Each of the next n lines contains one of the following operations: - \\"1 c\\" where c is a lowercase English letter (insert the letter c at the end of the text). - \\"2\\" (remove the last character of the text). - \\"3\\" (undo the last operation performed). You may assume that the text will never become empty due to a \\"2\\" operation. -----Output----- Output the resulting text after all operations have been performed. -----Examples----- Input 5 1 a 1 b 1 c 2 3 Output abc Input 6 1 x 1 y 1 z 2 2 3 Output xy -----Note----- In the first example, the operations are: - Insert \'a\' -> text = \\"a\\" - Insert \'b\' -> text = \\"ab\\" - Insert \'c\' -> text = \\"abc\\" - Remove last character -> text = \\"ab\\" - Undo last operation -> text = \\"abc\\" In the second example, the operations are: - Insert \'x\' -> text = \\"x\\" - Insert \'y\' -> text = \\"xy\\" - Insert \'z\' -> text = \\"xyz\\" - Remove last character -> text = \\"xy\\" - Remove last character -> text = \\"x\\" - Undo last operation -> text = \\"xy\\"","solution":"def process_operations(n, operations): text = [] history = [] for op in operations: if op[0] == \\"1\\": char = op[2] text.append(char) history.append((\\"1\\", char)) elif op[0] == \\"2\\": if text: removed_char = text.pop() history.append((\\"2\\", removed_char)) elif op[0] == \\"3\\": if history: last_op, char = history.pop() if last_op == \\"1\\": text.pop() elif last_op == \\"2\\": text.append(char) return \'\'.join(text)"},{"question":"*\\"Control the train by managing its speed carefully.\\"* You have been assigned to manage the speed of a train through a long tunnel. The tunnel is divided into sections, each with a different speed limit. The tunnel is represented as an array of integers, where each integer denotes a maximum speed limit for that section. The train must start at the first section and travel through each section to reach the end. However, as the train progresses through the tunnel, it\'s crucial to ensure that the train maintains a speed within the limits set by each section. The train can either increase, decrease, or maintain its speed as it moves from one section to another. However, the train cannot pass through the tunnel if it ever ends up speeding more than allowed in any section. Furthermore, you need to determine the minimum number of speed adjustments the train must make to traverse the entire tunnel without violating any speed limits. A speed adjustment is either increasing or decreasing the speed of the train to match the speed limits of the tunnel sections. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - The first line of each test case contains a single integer N, the number of sections in the tunnel. - The second line of each test case contains N space-separated integers, S1, S2, ..., Sn — the speed limits of the sections in the tunnel. ------ Output Format ------ - For each test case, output a single integer, representing the minimum number of speed adjustments required for the train to traverse the entire tunnel. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^3 1 ≤ Si ≤ 10^3 (1 ≤ i ≤ N) ------ Sample Input 1 ------ 3 5 4 3 5 2 1 4 1 1 1 1 6 6 5 4 3 2 1 ------ Sample Output 1 ------ 4 0 5 ------ Explanation ------ Test Case 1: The speed adjustments to make are: - Start with speed 4 at the first section. - Decrease speed to 3 for the second section. - Increase speed to 5 for the third section. - Decrease speed to 2 for the fourth section. - Decrease speed to 1 for the last section. Thus, a total of 4 speed adjustments are required. Test Case 2: All section speed limits are the same, hence no speed adjustments are needed. Test Case 3: The speed adjustments to make are: - Start with speed 6 at the first section. - Decrease speed to 5 for the second section. - Decrease speed to 4 for the third section. - Decrease speed to 3 for the fourth section. - Decrease speed to 2 for the fifth section. - Decrease speed to 1 for the last section. Thus, a total of 5 speed adjustments are required.","solution":"def min_speed_adjustments(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] speed_limits = test_cases[i][1] adjustments = 0 for j in range(1, N): if speed_limits[j] != speed_limits[j-1]: adjustments += 1 results.append(adjustments) return results"},{"question":"A bakery is looking to optimize the packaging of cookies into boxes. Each box can hold a maximum of 20 cookies, but the box must meet minimum customer satisfaction requirements by holding at least 12 cookies. You need to write a program that decides how many completely filled boxes (holding exactly 20 cookies) and partially filled boxes (holding between 12 and 19 cookies) can be produced from a given number of cookies, leaving as few unboxed cookies as possible. Examples 1. If there are 89 cookies: - Produce 4 boxes holding exactly 20 cookies each (totaling 80 cookies). - Produce 1 box holding 9 cookies, but since this does not meet the minimum requirement of 12 cookies, these 9 cookies are left unboxed. - The final output indicates 4 fully boxed, 0 partially boxed, and 9 leftover cookies. 2. If there are 45 cookies: - Produce 2 boxes holding exactly 20 cookies each (totaling 40 cookies). - Produce 1 box holding the remaining 5 cookies, but since this does not meet the minimum requirement, these 5 cookies are left unboxed. - The final output indicates 2 fully boxed, 0 partially boxed, and 5 leftover cookies. Function Description Complete the function packageCookies in the editor below. packageCookies has the following parameter(s): int cookies: the total number of cookies Returns int[3]: an array where the first element is the number of full boxes, the second element is the number of partial boxes, and the third element is the number of leftover cookies Input Format A single integer, cookies, representing the total number of cookies. Constraints 0 leq cookies leq 1000 Sample Input 0 89 Sample Output 0 4 0 9 Sample Input 1 45 Sample Output 1 2 0 5 Explanation 0 In the first example, out of 89 cookies, 4 boxes of 20 cookies each can be made (totaling 80 cookies). The remaining 9 cookies are not enough to form a valid partially filled box. In the second example, out of 45 cookies, 2 boxes of 20 cookies each can be made (totaling 40 cookies). The remaining 5 cookies are not enough to form a valid partially filled box.","solution":"def packageCookies(cookies): full_boxes = cookies // 20 leftover_cookies = cookies % 20 if 12 <= leftover_cookies <= 19: partial_boxes = 1 leftover_cookies -= leftover_cookies # This will make leftover_cookies 0 else: partial_boxes = 0 return [full_boxes, partial_boxes, leftover_cookies]"},{"question":"Anita is planning her birthday party and wants to give each participant a unique combination of candies as a return gift. She has a collection of different types of candies and wants to ensure that no two participants get the same combination of candies. Anita decides to ask for your help to determine how many unique combinations of candy gift boxes she can create. Note that each combination is represented by a unique set of candy types, and different quantities of the same types of candy are considered different sets. Input: The first line contains t, the number of test cases. Each test case consists of 2 lines: the first line contains N, the number of different types of candies Anita has, and the second line contains N space-separated integers denoting the quantities of each type of candy denoted by q[i]. Output: For each test case, print a single integer denoting the number of unique candy gift box combinations Anita can create. Constraints: 1 ≤ t ≤ 20 1 ≤ N ≤ 10 1 ≤ q[i] ≤ 20 SAMPLE INPUT 2 2 2 3 3 1 2 2 SAMPLE OUTPUT 6 10 Explanation: Consider the 1st test case: We have 2 types of candies with quantities 2 and 3. So, all the different possibilities are: {} - Empty set {1,0} - One candy of type 1, none of type 2 {0,1} - None of type 1, one candy of type 2 {2,0} - Two candies of type 1, none of type 2 {1,1} - One candy of type 1, one of type 2 {0,2} - None of type 1, two candies of type 2 So there are 6 unique combinations possible. Consider the 2nd test case: We have 3 types of candies with quantities 1, 2, and 2 respectively. {} - Empty set {1,0,0} - One candy of type 1, none of type 2 or 3 {0,1,0} - None of type 1, one candy of type 2, none of type 3 {0,0,1} - None of type 1 or 2, one candy of type 3 {1,1,0} - One candy of type 1, one of type 2, none of type 3 {1,0,1} - One candy of type 1, none of type 2, one of type 3 {0,2,0} - None of type 1, two candies of type 2, none of type 3 {0,1,1} - None of type 1, one candy of type 2, one of type 3 {0,0,2} - None of type 1 or 2, two candies of type 3 {1,2,0} - One candy of type 1, two of type 2, none of type 3 So there are 10 unique combinations possible.","solution":"def candy_combinations(t, test_cases): results = [] for case in test_cases: N, quantities = case total_combinations = 1 for q in quantities: total_combinations *= (q + 1) results.append(total_combinations) return results"},{"question":"You are given an array of integers representing the ages of people in a community. You need to determine if you can rearrange the array such that no two adjacent people have ages differing by more than 1. If it is possible, print \\"POSSIBLE\\", otherwise print \\"IMPOSSIBLE\\". Input Format: The first line contains an integer T, the number of test cases. Each test case consists of two lines: The first line contains an integer N, the size of the array. The second line contains N space-separated integers representing the ages. Output Format: For each test case, print \\"POSSIBLE\\" if the rearrangement is possible, and \\"IMPOSSIBLE\\" otherwise. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Age ≤ 1000 SAMPLE INPUT 2 5 3 5 4 4 3 6 1 2 2 5 4 4 SAMPLE OUTPUT POSSIBLE IMPOSSIBLE Explanation In the first test case, by rearranging the array to [3, 3, 4, 4, 5], no two adjacent ages differ by more than 1, so the output is \\"POSSIBLE\\". In the second test case, [1, 2, 2, 4, 4, 5] contains adjacent ages with differences greater than 1, so the output is \\"IMPOSSIBLE\\".","solution":"def rearrangement_possible(T, test_cases): results = [] for t in range(T): N, ages = test_cases[t] ages.sort() possible = True for i in range(1, N): if abs(ages[i] - ages[i-1]) > 1: possible = False break results.append(\\"POSSIBLE\\" if possible else \\"IMPOSSIBLE\\") return results # Example usage if __name__ == \\"__main__\\": T = 2 test_cases = [ (5, [3, 5, 4, 4, 3]), (6, [1, 2, 2, 5, 4, 4]) ] print(rearrangement_possible(T, test_cases)) # Should output [\'POSSIBLE\', \'IMPOSSIBLE\']"},{"question":"You are facilitating a charity event where people can make donations. You\'re responsible for ensuring the donations reach the intended amount as efficiently as possible. To achieve this, you need to determine the smallest combination of donations that sum up to a target value. Each donation can be of specific values given as a list. Your task is to find the minimum number of donations needed to reach the exact target value. Input: - An integer `t` representing the number of test cases. - For each test case: - An integer `n` representing the number of different donation values. - An integer `target` representing the amount which the donations should sum to. - A list of `n` integers representing the possible donation values. Output: - For each test case, print the minimum number of donations required to reach the target value. If it\'s not possible to reach the exact target value, print -1. Note: - Each value can be used multiple times. - If there are multiple ways to achieve the target with the same number of donations, any one is acceptable. Constraints: - 1 ≤ t ≤ 100 - 1 ≤ n ≤ 100 - 1 ≤ target ≤ 10000 - 1 ≤ donation values ≤ 1000 Example: ``` Input: 2 3 11 1 2 5 4 8 3 4 5 6 Output: 3 2 Explanation: 1st testcase: 5+5+1 is the minimum number of donations that sum up to 11. 2nd testcase: 4+4 is the minimum number of donations that sum up to 8. ``` Assumptions: - Each value in the donation list can be reused multiple times to form the combination. - There will always be at least one possible way to get to the target value using the available donation values, or it should return -1 if not possible.","solution":"def min_donations(t, test_cases): results = [] for case in test_cases: n, target, donations = case dp = [float(\'inf\')] * (target + 1) dp[0] = 0 for i in range(1, target + 1): for donation in donations: if i - donation >= 0: dp[i] = min(dp[i], dp[i - donation] + 1) results.append(dp[target] if dp[target] != float(\'inf\') else -1) return results"},{"question":"Given an m x n 2D array `grid` composed of only \'0\'s (water) and \'1\'s (land), an island is a group of \'1\'s connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water. Write a function `maxAreaOfIsland` that returns the size of the largest island in the `grid`. Example 1: Input: grid = [ [0,0,1,1,0], [0,1,1,0,0], [0,0,0,0,0], [1,1,0,0,1], [1,1,1,0,1] ] Output: 5 Explanation: The island in the upper right has a size of 4 and the island in the bottom right has a size of 5. Therefore, the largest island has size 5. Your Task: You do not need to read input or print anything. Your task is to complete the function `maxAreaOfIsland(grid)` which takes `grid` as an input parameter and returns the size of the largest island. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(m * n) Constraints: * 1 ≤ m, n ≤ 50 * grid[i][j] is \'0\' or \'1\'.","solution":"def maxAreaOfIsland(grid): Returns the size of the largest island in the grid. if not grid or not grid[0]: return 0 def dfs(grid, i, j): # If current cell is out of bounds or is water, return 0. if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] == 0: return 0 # Mark the current cell as visited grid[i][j] = 0 # Initialize the area as 1 for the current cell area = 1 # Perform DFS in all directions area += dfs(grid, i + 1, j) area += dfs(grid, i - 1, j) area += dfs(grid, i, j + 1) area += dfs(grid, i, j - 1) return area max_area = 0 for i in range(len(grid)): for j in range(len(grid[0])): # If the cell is land, start a DFS if grid[i][j] == 1: max_area = max(max_area, dfs(grid, i, j)) return max_area"},{"question":"You are given a list of non-negative integers, representing the heights of adjacent buildings. Each building has a width of 1. It is raining, and water is trapped between the buildings. Write a function to compute how much water is trapped after the rain. Example: Given the following list of building heights: ``` heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] ``` The function should return `6`, because 6 units of water are trapped. To understand how this works: - Between buildings of heights 1 and 2, 1 unit of water is trapped. - Between buildings of heights 2 and 3, 3 units of water are trapped. - Between buildings of heights 3 and 1, 0 units of water are trapped. - Between buildings of heights 1 and 2, 2 units of water are trapped. Your task is to write the `calculateTrappedWater` function that takes in the list of integers representing the building heights and returns the total amount of trapped water. Function Signature: ```python def calculateTrappedWater(heights: List[int]) -> int: pass ``` Input: - heights: a list of non-negative integers representing the heights of the buildings, with 1 ≤ len(heights) ≤ 10^4 and 0 ≤ heights[i] ≤ 10^5. Output: - An integer representing the total units of water trapped. Sample Input: ``` [3, 0, 2, 0, 4] ``` Sample Output: ``` 7 ``` Explanation: - Between buildings 3 and 2, 2 units of water are trapped. - Between buildings 2 and 4, 3 units of water are trapped. - Between buildings 0 and 2, 2 additional units of water are trapped. Complete the `calculateTrappedWater` function in the editor below. Constraints: - The elements of the input list range from 0 to 10^5. - The length of the input list ranges from 1 to 10^4. ```python def calculateTrappedWater(heights: List[int]) -> int: # Your code here pass ```","solution":"from typing import List def calculateTrappedWater(heights: List[int]) -> int: Calculate the amount of water that can be trapped after raining. :param heights: List of non-negative integers representing the heights of adjacent buildings. :return: Total units of water trapped. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Compute the left_max values. left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Compute the right_max values. right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the trapped water. trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"Problem Statement In a distant land, there is a magical garden where flowers grow in a peculiar pattern. Each flower has a growth factor associated with it, which determines how much it grows each day. Initially, all flowers are of height 1. After each day, the height of a flower becomes the product of its height and its growth factor. The magical garden keeper wants to know the height of each flower after `D` days. However, the garden has a magical boundary, and any flower that reaches or exceeds a height of 10^9 + 7 will be trimmed back to be within this limit. Given the number of flowers, their respective growth factors, and the number of days, calculate the final height of each flower. Input: The first line contains an integer `f`, the number of flowers. The next line contains `f` space-separated integers denoting the growth factors of the flowers. The last line contains a single integer `D` which represents the number of days. Output: It will consist of `f` space-separated integers representing the final height of each flower after `D` days, modulo 10^9 + 7. Constraints: 1 ≤ f ≤ 100 1 ≤ growth factor of each flower ≤ 10^9 0 ≤ D ≤ 10^9 Example: Input: 3 2 3 4 2 Output: 4 9 16 Explanation: - After 2 days: - The first flower grows from 1 -> 2 -> 4 - The second flower grows from 1 -> 3 -> 9 - The third flower grows from 1 -> 4 -> 16","solution":"def flower_heights_after_days(f, growth_factors, D): MOD = 10 ** 9 + 7 final_heights = [] for growth_factor in growth_factors: final_height = pow(growth_factor, D, MOD) final_heights.append(final_height) return final_heights"},{"question":"A company has a fleet of delivery drones that transport packages between various distribution centers. Each drone is assigned a list of deliveries it must complete before returning to the base. The company wants to ensure that the drones are utilized in the most efficient way possible. Therefore, they decided to develop a program that calculates the total travel time for each drone, given the distances between distribution centers. Create a program to determine the total travel time for each drone based on its delivery schedule. The distances between each pair of distribution centers are given in a distance matrix. Each drone starts at the base distribution center, completes its delivery rounds, and then returns to the base. The input consists of: - An integer n (n ≤ 100) representing the number of distribution centers. - An n x n matrix representing the travel time between each pair of distribution centers. The i-th row and j-th column represent the time to travel from distribution center i to center j. - An integer d (d ≤ 100), representing the number of drones. - For each drone, the program receives a list of distribution centers it must visit in order. Each drone\'s information is on a separate line and includes an integer m (1 ≤ m ≤ n) representing the number of delivery points followed by m integers indicating the sequence of distribution centers to visit (excluding the base). The base center is always the first center (center 0). Each drone starts from the base and must return to the base after completing all deliveries. Compute the total travel time for each drone and output it. Input: ``` 5 0 10 20 30 40 10 0 25 35 45 20 25 0 15 50 30 35 15 0 55 40 45 50 55 0 3 3 2 3 1 2 4 2 4 1 2 3 4 ``` Output: ``` 75 80 175 ``` Explanation: The distance matrix is as follows (base is center 0): ``` 0 1 2 3 4 0 [ 0, 10, 20, 30, 40] 1 [ 10, 0, 25, 35, 45] 2 [ 20, 25, 0, 15, 50] 3 [ 30, 35, 15, 0, 55] 4 [ 40, 45, 50, 55, 0] ``` 1. The first drone\'s route: 0 -> 2 -> 3 -> 1 -> 0. Total travel time is 20 (0 -> 2) + 15 (2 -> 3) + 35 (3 -> 1) + 10 (1 -> 0) = 80. 2. The second drone\'s route: 0 -> 4 -> 2 -> 0. Total travel time is 40 (0 -> 4) + 50 (4 -> 2) + 20 (2 -> 0) = 110. 3. The third drone\'s route: 0 -> 1 -> 2 -> 3 -> 4 -> 0. Total travel time is 10 (0 -> 1) + 25 (1 -> 2) + 15 (2 -> 3) + 55 (3 -> 4) + 40 (4 -> 0) = 145. So the output should be: ``` 75 80 175 ```","solution":"def calculate_travel_time(distance_matrix, drones_deliveries): travel_times = [] for deliveries in drones_deliveries: total_time = 0 # Start from base (0) prev_center = 0 for center in deliveries: total_time += distance_matrix[prev_center][center] prev_center = center # Return to base total_time += distance_matrix[prev_center][0] travel_times.append(total_time) return travel_times def parse_input(input_str): input_lines = input_str.strip().split(\'n\') n = int(input_lines[0]) distance_matrix = [] for i in range(1, n + 1): distance_matrix.append(list(map(int, input_lines[i].split()))) d = int(input_lines[n + 1]) drones_deliveries = [] for i in range(n + 2, n + 2 + d): deliveries = list(map(int, input_lines[i].split()))[1:] # Skip the first number which is the count drones_deliveries.append(deliveries) return distance_matrix, drones_deliveries def main(input_str): distance_matrix, drones_deliveries = parse_input(input_str) travel_times = calculate_travel_time(distance_matrix, drones_deliveries) for time in travel_times: print(time) if __name__ == \\"__main__\\": input_data = 5 0 10 20 30 40 10 0 25 35 45 20 25 0 15 50 30 35 15 0 55 40 45 50 55 0 3 3 2 3 1 2 4 2 4 1 2 3 4 main(input_data)"},{"question":"Given a list of N integers, you need to find out how many pairs of indices (i, j) exist such that: 1. 1 ≤ i < j ≤ N 2. The product of the elements at those indices is even. Write a function that takes a list of integers and returns the number of such pairs. # Function Signature ```python def count_even_product_pairs(nums: List[int]) -> int: ``` # Input - A list of N integers, where 1 ≤ N ≤ 10^5. - Each integer in the list will be between -10^9 and 10^9. # Output - Return the number of pairs (i, j) such that their product is even. # Example ```python print(count_even_product_pairs([3, 4, 1, 2])) # Output: 5 ``` Explanation: - Indices (1, 2) -> 3 * 4 = 12 (even) - Indices (1, 4) -> 3 * 2 = 6 (even) - Indices (2, 3) -> 4 * 1 = 4 (even) - Indices (2, 4) -> 4 * 2 = 8 (even) - Indices (3, 4) -> 1 * 2 = 2 (even)","solution":"from typing import List def count_even_product_pairs(nums: List[int]) -> int: even_count = sum(1 for num in nums if num % 2 == 0) odd_count = len(nums) - even_count # Total pairs that can be formed from n elements is n*(n-1)/2 total_pairs = len(nums) * (len(nums) - 1) // 2 # Pairs formed by odd numbers (product will be odd) odd_pairs = odd_count * (odd_count - 1) // 2 # Subtract odd pairs from total pairs even_product_pairs = total_pairs - odd_pairs return even_product_pairs"},{"question":"Given a string, write a function `shortest_palindrome_substring(s)` that finds the shortest palindromic substring in the string `s`. A palindromic substring is a sequence of characters that reads the same forward and backward. If there are multiple shortest palindromic substrings of the same length, return the first occurring one. Input - A single string `s` of length n (1 ≤ n ≤ 10^4), consisting of lowercase English letters. Output - A single string representing the shortest palindromic substring. Example ```python shortest_palindrome_substring(\\"babad\\") -> \\"b\\" shortest_palindrome_substring(\\"cbbd\\") -> \\"c\\" shortest_palindrome_substring(\\"a\\") -> \\"a\\" shortest_palindrome_substring(\\"ac\\") -> \\"a\\" ``` Notes - A single character is considered a palindrome. - If the string itself is a palindrome, the function should return the first character of the string.","solution":"def shortest_palindrome_substring(s): Returns the shortest palindromic substring in the string \'s\'. If there are multiple shortest palindromic substrings of the same length, returns the first occurring one. n = len(s) # Check all substrings starting from length 1 for length in range(1, n + 1): for start in range(n - length + 1): end = start + length substring = s[start:end] if substring == substring[::-1]: # Check if the substring is a palindrome return substring return \\"\\" # Example usage: # print(shortest_palindrome_substring(\\"babad\\")) # Output: \\"b\\" # print(shortest_palindrome_substring(\\"cbbd\\")) # Output: \\"c\\" # print(shortest_palindrome_substring(\\"a\\")) # Output: \\"a\\" # print(shortest_palindrome_substring(\\"ac\\")) # Output: \\"a\\""},{"question":"Below is a new question that matches the style, complexity, and scope of the given sample question: ----- Curse of the Sphinx In a lost scroll, you discover an ancient message, but it is unclear and contains a sequence of riddles. To understand the wisdom it holds, you need to decode it. Here is what you found: \\"Ita vero, in numeris et arcanis sapientiae maxima potestas sit, et iter ad veritatem per opera perapta semper ducere.\\" Cras te ipsum omnia in fieri perpendo, et partitionem invenies: Rp: XV Sphinx IX Leviathan III Cerberus I Dragon Adhibito anima mutua, claritatem accipies. Fremunt vestigia Regis. Cicindelae luce locum effingent. -----Input----- The first line of input contains several space-separated integers ( a_{i} ) (1 ≤ ( a_{i} ) ≤ 100). -----Output----- Print a single integer. -----Examples----- Input 3 9 15 21 Output 2","solution":"def decode_message(numbers): Decodes the ancient message based on the given space-separated integers. Args: numbers (list): List of integers. Returns: int: The decoded integer representing clarity (claritatem). # Create the mapping based on the ancient message riddle ancient_riddle = {15: \'Sphinx\', 9: \'Leviathan\', 3: \'Cerberus\', 1: \'Dragon\'} # Decode the numbers according to the riddle mapping decoded_values = [key for key in ancient_riddle.keys() if key in numbers] # The final output is the length of the decoded values return len(decoded_values)"},{"question":"You are given an integer array nums sorted in non-decreasing order. You are also given an integer target. Suppose the array is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]). Despite this rotation order, you need to find the index of the target value in the array. If the target is not present, return -1. You must write an algorithm with `O(log n)` runtime complexity. Input - The first line contains two integers, n and target, where 0 ≤ n ≤ 5000 is the length of the array, and -10^4 ≤ target ≤ 10^4. - The second line contains n integers, which represent the rotated sorted array. Output - Print the index of the target value if it exists in the array. Otherwise, print -1. Example Input 7 3 4 5 6 7 0 1 2 Output 6 Input 4 0 7 8 9 10 Output -1 Input 0 5 Output -1","solution":"def search_rotated_sorted_array(nums, target): Returns the index of the target in the rotated sorted array, or -1 if target is not found. if not nums: return -1 left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid # If the left half is sorted if nums[left] <= nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 # If the right half is sorted else: if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Given a set of integers, write a program to find the sum of the largest and smallest integer in the set. Input The first line of input contains a single integer T, indicating the number of test cases. Each of the next T lines contains a series of space-separated integers representing a single test case. Output For each test case, output a single integer which is the sum of the largest and smallest integer in the given set. Example Input: 3 5 7 2 9 1 4 2 8 6 13 13 13 13 Output: 10 10 26","solution":"def sum_of_largest_and_smallest(T, test_cases): Given a number of test cases T and a list of T lists representing test cases, returns a list of sums of the largest and smallest values in each test case. result = [] for case in test_cases: case_values = list(map(int, case.split())) min_val = min(case_values) max_val = max(case_values) result.append(min_val + max_val) return result"},{"question":"In a large company, an employee can have multiple direct reports but only one manager. The employees are represented as nodes in a tree, where each node contains an integer representing the employee\'s ID. The root node represents the CEO who has no manager. You need to implement a function that, given the root of this tree and the ID of an employee, returns the list of ID(s) corresponding to the path from the CEO to this employee. Each ID in the path should be separated by a \\" -> \\". Input - The first line of input contains an integer N, denoting the number of employees in the company. - The second line of input contains N integers separated by spaces, denoting the employee IDs. - The third line of input contains N-1 pairs of integers (u, v) where u is the manager of v. - The fourth line contains a single integer, representing the ID of the target employee. Output - Output the path from the CEO to the given employee ID as a string with each ID in the path separated by \\" -> \\". Constraints - 1 ≤ N ≤ 1000 - Employee IDs are unique positive integers and range from 1 to N. Example Input: 7 1 2 3 4 5 6 7 1 2 1 3 2 4 2 5 3 6 3 7 5 Output: 1 -> 2 -> 5 Explanation - The tree structure is as follows: ``` 1 / 2 3 / / 4 5 6 7 ``` - The path from the CEO (ID 1) to employee 5 is \\"1 -> 2 -> 5\\".","solution":"class TreeNode: def __init__(self, id): self.id = id self.children = [] def build_tree(n, ids, manager_pairs): nodes = {id: TreeNode(id) for id in ids} for u, v in manager_pairs: nodes[u].children.append(nodes[v]) root = nodes[ids[0]] return root def find_path(root, target): path = [] def dfs(node, target): if not node: return False path.append(node.id) if node.id == target: return True for child in node.children: if dfs(child, target): return True path.pop() return False dfs(root, target) return path def employee_path(n, ids, manager_pairs, target): root = build_tree(n, ids, manager_pairs) path = find_path(root, target) return \\" -> \\".join(map(str, path))"},{"question":"A password is considered secure if it meets the following criteria: - It has at least one uppercase letter. - It has at least one lowercase letter. - It has at least one numeric digit. - It has a minimum length of 8 characters. - It does not contain any spaces. You are tasked with writing a function that verifies whether a given password is secure, based on the criteria above. -----Input----- The input consists of a single line containing the password to be verified. The length of the password will not exceed 100 characters. -----Output----- Output \\"secure\\" if the password meets all the criteria, and \\"insecure\\" otherwise (without the quotes). -----Examples----- Sample Input 1: A1b2c3d4 Sample Output 1: secure Sample Input 2: abcdefG1 Sample Output 2: secure Sample Input 3: 12345678 Sample Output 3: insecure Sample Input 4: AbcDefG Sample Output 4: insecure Sample Input 5: SecurePassw0rd Sample Output 5: secure Sample Input 6: Invalid Password Sample Output 6: insecure","solution":"def is_secure_password(password): Returns \'secure\' if the password meets the security criteria, otherwise \'insecure\'. Security criteria: - At least one uppercase letter. - At least one lowercase letter. - At least one numeric digit. - Minimum length of 8 characters. - No spaces allowed. if len(password) < 8: return \\"insecure\\" has_upper = any(char.isupper() for char in password) has_lower = any(char.islower() for char in password) has_digit = any(char.isdigit() for char in password) has_space = any(char.isspace() for char in password) if has_upper and has_lower and has_digit and not has_space: return \\"secure\\" else: return \\"insecure\\""},{"question":"In a small town, all the streets are laid out in a perfect grid. The town\'s mayor wants to install streetlights at every intersection, one per street corner, to ensure the town is well-lit at night. For this task, you are to determine the minimum number of streetlights needed to light up the city grid. The town can be represented as an `m x n` grid, where `m` is the number of streets running horizontally and `n` is the number of streets running vertically. Each streetlight installed at an intersection can illuminate the streets that cross at that intersection, covering all intersections in the same row and the same column in both directions. -----Input----- Input consists of two integers, `m` and `n` (1 leq m, n leq 1000), representing the dimensions of the grid. -----Output----- Output the minimum number of streetlights needed to cover all intersections in the grid. -----Examples----- Sample Input 1: 3 3 Sample Output 1: 3 Sample Input 2: 4 5 Sample Output 2: 4 (Note: Each streetlight\'s effective coverage can be thought of as m+n-1 intersections, given one installed at a unique intersection per row or column is sufficient to cover the entire grid.)","solution":"def min_streetlights(m, n): Returns the minimum number of streetlights needed to light up the city grid represented by m horizontal and n vertical streets. return min(m, n)"},{"question":"A technology company develops a secure communication protocol for transmitting messages between servers. Each server is connected to one or more other servers by direct communication links, and the messages must pass through these links. However, due to security constraints, some links are compromised and cannot be used. The company wants to find out whether there exists a way to send a message from a source server to a destination server. -----Input----- The input consists of a single test case. The first line contains three integers n, m and q (2 le n le 10^4, 1 le m le 10^5, 1 le q le 10^4), where n is the number of servers, m is the number of communication links, and q is the number of queries. Each of the next m lines contains two integers u and v (1 le u, v le n), representing a bidirectional communication link between servers u and v. Each of the remaining q lines contains two integers a and b (1 le a, b le n), representing a query to check if there is a way to send a message from server a to server b. -----Output----- For each query, output \\"yes\\" if there is a way to send a message from server a to server b\\", and \\"no\\" otherwise. -----Examples----- Sample Input 1: 5 4 3 1 2 2 3 3 4 4 5 1 5 2 4 5 1 Sample Output 1: yes yes yes Sample Input 2: 6 3 2 1 2 2 3 4 5 1 3 1 6 Sample Output 2: yes no","solution":"def can_transmit_message(n, m, q, links, queries): from collections import defaultdict, deque # Create an adjacency list for the graph graph = defaultdict(list) for u, v in links: graph[u].append(v) graph[v].append(u) # Function to check if there is a path between source and destination using BFS def is_connected(start, end): if start == end: return True visited = [False] * (n + 1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: if neighbor == end: return True queue.append(neighbor) visited[neighbor] = True return False result = [] for a, b in queries: if is_connected(a, b): result.append(\'yes\') else: result.append(\'no\') return result # Example usage: n = 5 m = 4 q = 3 links = [(1, 2), (2, 3), (3, 4), (4, 5)] queries = [(1, 5), (2, 4), (5, 1)] print(can_transmit_message(n, m, q, links, queries)) # [\'yes\', \'yes\', \'yes\']"},{"question":"You are given a rectangular grid with `n` rows and `m` columns. Each cell in the grid contains a certain number of coins. You need to perform several queries on this grid. Each query consists of four integers `x1`, `y1`, `x2`, and `y2`, and you need to determine the total number of coins in the subrectangle defined by the top-left corner `(x1, y1)` and the bottom-right corner `(x2, y2)`. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Next `n` lines contain `m` integers each, where the j-th integer in the i-th line represents the number of coins in cell `(i, j)` (0 ≤ number of coins in any cell ≤ 10^9). The next line contains a single integer `q` (1 ≤ q ≤ 10^5) — the number of queries. Each of the next `q` lines contains four integers `x1`, `y1`, `x2`, and `y2` (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m) — the coordinates of the top-left and bottom-right corners of the subrectangle, respectively. Output For each query, print a single integer — the total number of coins in the specified subrectangle. Examples Input 3 4 1 2 3 4 5 6 7 8 9 10 11 12 2 1 1 2 2 2 2 3 4 Output 14 47 Input 2 3 1 1 1 2 2 2 1 1 2 2 3 Output 6 Note In the first example, the first rectangle defined by (1,1) to (2,2) contains cells [(1,1), (1,2), (2,1), (2,2)] having coins [1, 2, 5, 6]. Their sum is 1+2+5+6 = 14. In the second query, the rectangle defined by (2,2) to (3,4) contains cells [(2,2), (2,3), (2,4), (3,2), (3,3), (3,4)] having coins [6, 7, 8, 10, 11, 12]. Their sum is 6+7+8+10+11+12 = 54.","solution":"def preprocess_grid(grid, n, m): prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n): for j in range(m): prefix_sum[i + 1][j + 1] = grid[i][j] + prefix_sum[i][j + 1] + prefix_sum[i + 1][j] - prefix_sum[i][j] return prefix_sum def query_coins(prefix_sum, x1, y1, x2, y2): return (prefix_sum[x2][y2] - prefix_sum[x1 - 1][y2] - prefix_sum[x2][y1 - 1] + prefix_sum[x1 - 1][y1 - 1]) def grid_queries(n, m, grid, queries): prefix_sum = preprocess_grid(grid, n, m) results = [] for x1, y1, x2, y2 in queries: results.append(query_coins(prefix_sum, x1, y1, x2, y2)) return results"},{"question":"A company has an internal messaging system where employees send and receive messages. Each message is identified by a unique message ID and has a timestamp of when it was sent. Given a list of messages sent by employees, write a function to find the longest sequence of messages such that the message IDs are sorted in strictly increasing order according to their send time. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of messages. The next n lines each contain two integers: message_id and timestamp (1 ≤ message_id ≤ 10^6, 0 ≤ timestamp ≤ 10^6). Output Output a single integer — the length of the longest sequence of messages such that the message IDs are strictly increasing according to their send time. Examples Input 5 1 1 2 2 3 3 4 4 5 5 Output 5 Input 7 1 2 2 3 3 2 4 5 5 7 6 3 7 6 Output 4 Note For the first example, the entire list of messages is already sorted in increasing order of message IDs and has strictly increasing timestamps. For the second example, the longest sequence of messages with strictly increasing message IDs and timestamps is: (1, 2), (2, 3), (4, 5), (5, 7). The length of this sequence is 4.","solution":"def longest_increasing_message_sequence(n, messages): # Sort messages by timestamp messages.sort(key=lambda x: x[1]) # Extract message_ids after sorting by timestamp message_ids = [message[0] for message in messages] # Apply Longest Increasing Subsequence (LIS) algorithm on message_ids dp = [1] * n for i in range(1, n): for j in range(i): if message_ids[i] > message_ids[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example Input n = 7 messages = [(1, 2), (2, 3), (3, 2), (4, 5), (5, 7), (6, 3), (7, 6)] # Example Usage output = longest_increasing_message_sequence(n, messages) print(output) # Output: 4"},{"question":"A gardener wants to plant trees in his garden in a specific pattern, but due to the constraints of garden space, he needs to check if the pattern is feasible. The pattern is such that there must be an equal number of Oak and Pine trees. Additionally, the number of rows in which the trees will be planted must be a divisor of both the number of Oak and Pine trees. Given the number of Oak trees ( O ) and Pine trees ( P ), determine if it is possible to arrange the trees following the gardener\'s pattern constraints. -----Input:----- - The first line will contain ( N ), the number of test cases. - Each test case contains a single line with two integers ( O ) and ( P ). -----Output:----- For each test case, print ( POSSIBLE ) if the pattern can be achieved, else print ( IMPOSSIBLE ) (without quotes). -----Constraints----- - ( 1 leq N leq 100000 ) - ( 1 leq O, P leq 10^{18} ) -----Sample Input:----- 3 4 4 5 10 6 9 -----Sample Output:----- POSSIBLE IMPOSSIBLE IMPOSSIBLE","solution":"def is_pattern_possible(O, P): Determines if the given number of Oak and Pine trees can be arranged in a pattern where the number of rows is a divisor of both O and P, and the number of Oak trees equals the number of Pine trees. # There must be an equal number of Oak and Pine trees if O != P: return \\"IMPOSSIBLE\\" # The number of rows must be a divisor of both O and P return \\"POSSIBLE\\" def solve(gardener_cases): results = [] for O, P in gardener_cases: results.append(is_pattern_possible(O, P)) return results"},{"question":"Design a function that finds the longest palindromic substring in a given string. A palindrome is a word that reads the same backward as forward. Example: Input: \\"babad\\" Output: \\"bab\\" Input: \\"cbbd\\" Output: \\"bb\\" Note: If there are multiple palindromic substrings of the same maximum length, you may return any one of them.","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substring in a given string. Args: s (str): The input string. Returns: str: The longest palindromic substring. n = len(s) if n == 0: return \\"\\" # Function to expand around the center def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return s[left+1:right] max_palindrome = \\"\\" for i in range(n): # Odd length palindromes odd_palindrome = expand_around_center(i, i) # Even length palindromes even_palindrome = expand_around_center(i, i + 1) # Compare and update the maximum palindrome if len(odd_palindrome) > len(max_palindrome): max_palindrome = odd_palindrome if len(even_palindrome) > len(max_palindrome): max_palindrome = even_palindrome return max_palindrome"},{"question":"Given an integer matrix of dimensions N times M, you need to find the maximum sum of elements in any submatrix of size r times c. A submatrix is a contiguous block of elements in the matrix. The sum of a submatrix is the total sum of all elements contained within it. You need to report this maximum sum for each test case. ------ Input ------ The first line of input contains an integer T, the number of test cases. The description of the T test cases follows. For each test case: - The first line contains three space-separated integers N (number of rows), M (number of columns), and K (number of submatrices to consider). - The next line contains two space-separated integers r (number of rows in each submatrix) and c (number of columns in each submatrix). - The following N lines each contain M space-separated integers representing the matrix A. ------ Output ------ For each test case, output a single line containing the maximum sum of any submatrix of size r times c. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 1 ≤ r ≤ N 1 ≤ c ≤ M |A[i][j]| ≤ 10^4 for all 1 leq i leq N and 1 leq j leq M ------ Sample Input 1\' ------ 1 4 5 1 2 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ------ Sample Output 1\' ------ 99","solution":"def max_submatrix_sum(N, M, r, c, matrix): # Initialize the maximum sum to a very small number max_sum = float(\'-inf\') # Iterate over all possible top-left corners of the r x c submatrix for i in range(N - r + 1): for j in range(M - c + 1): # Calculate the sum of the current r x c submatrix current_sum = sum(matrix[i + x][j + y] for x in range(r) for y in range(c)) max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(inputs): results = [] index = 0 T = int(inputs[index]) index += 1 for _ in range(T): N, M, K = map(int, inputs[index].split()) index += 1 r, c = map(int, inputs[index].split()) index += 1 matrix = [] for _ in range(N): matrix.append(list(map(int, inputs[index].split()))) index += 1 results.append(max_submatrix_sum(N, M, r, c, matrix)) return results def main(): import sys input_data = sys.stdin.read().splitlines() results = process_test_cases(input_data) for result in results: print(result)"},{"question":"In a game of strategic points, players collect points based on the order they visit a set of cities. This game is played on a road network consisting of N cities connected by M bidirectional roads. Each road connects a pair of cities (u, v) and has an associated length l. The goal is to determine the minimum distance required to collect points from a sequence of K given cities in a specific order. -----Input----- - The first line contains a single integer, T, the number of tests. - Each test starts with two integers, N (the number of cities) and M (the number of roads). - The next M lines each contain three integers, u, v, and l, representing a bidirectional road between cities u and v with length l. - The next line contains a single integer, K, which is the number of cities in the sequence. - The following line contains K space-separated integers representing the sequence of cities to visit in order. -----Output----- For each test case, output a single integer which is the minimum distance required to visit all the cities in the given order. -----Constraints and notes----- - 1 leq T leq 100 - 2 leq N leq 1000 - 1 leq M leq 3000 - 1 leq l leq 1000 - 1 leq K leq N - Cities are numbered from 1 to N -----Example Input----- 2 5 6 1 2 2 1 3 5 2 3 1 2 4 4 3 5 3 4 5 1 3 1 3 5 3 3 1 2 3 2 3 2 1 3 4 2 1 3 -----Example Output----- 13 7 -----Explanation----- Test Case 1: The optimal path to collect points from cities 1, 3, and 5 is: (1, 2, 3, 5) with a total distance of 2 + 1 + 3 = 6. Test Case 2: To collect points from cities 1 and 3, the optimal path is: (1, 2, 3) with a total distance of 3 + 2 = 5.","solution":"import heapq def dijkstra(n, adj, start): dist = [float(\'inf\')] * (n + 1) dist[start] = 0 pq = [(0, start)] # priority queue (distance, node) while pq: current_distance, u = heapq.heappop(pq) if current_distance > dist[u]: continue for v, length in adj[u]: distance = current_distance + length if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist def min_distance_to_collect_points(t, tests): results = [] for i in range(t): n, m = tests[i][\'nm\'] edges = tests[i][\'edges\'] k = tests[i][\'k\'] sequence = tests[i][\'sequence\'] adj = [[] for _ in range(n + 1)] for u, v, l in edges: adj[u].append((v, l)) adj[v].append((u, l)) # Calculate shortest path distances between all pairs in the sequence dists = {} for city in sequence: dists[city] = dijkstra(n, adj, city) total_distance = 0 for j in range(1, k): total_distance += dists[sequence[j-1]][sequence[j]] results.append(total_distance) return results"},{"question":"A museum has a collection of paintings aligned in a straight row. Each painting has a respective importance value associated with it. However, the current alignment may not be ideal for presentation. The objective is to maximize the sum of importance values of aligned paintings, provided you can perform at most one swap between any two paintings. Given the importance values of each painting, determine the maximum possible sum of aligned importance values after performing at most one swap operation. -----Constraints----- - All values in input are integers. - 1 ≤ N ≤ 10^5 - 0 ≤ importance value ≤ 1000 -----Input----- Input is given from Standard Input in the following format: N importance_1 importance_2 ... importance_N -----Output----- Print the maximum possible sum of aligned importance values after at most one swap. -----Sample Input----- 5 1 3 7 3 5 -----Sample Output----- 20 In this case, swapping the first and the third painting (importance values 1 and 7) yields the alignment [7, 3, 1, 3, 5], with a sum of importance values equal to 19.","solution":"def max_importance_sum_after_swap(n, importance): if n < 2: return sum(importance) current_sum = sum(importance) max_sum = current_sum for i in range(n): for j in range(i+1, n): # Swap importance[i] and importance[j] swapped_sum = current_sum - importance[i] - importance[j] + importance[j] + importance[i] if swapped_sum > max_sum: max_sum = swapped_sum return max_sum def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) importance = list(map(int, data[1:])) print(max_importance_sum_after_swap(n, importance)) if __name__ == \\"__main__\\": main()"},{"question":"Given an array of integers `arr` of even length, the task is to rearrange the elements such that each pair of consecutive elements follows a specific rule. The elements at even indices should be in non-decreasing order, and the elements at odd indices should be in non-increasing order. Return the array after rearrangement. Implement a function `rearrangeArray(arr)` that takes an array of integers as input and returns the rearranged array. Example 1: Input: arr = [3, 5, 2, 1, 6, 4] Output: [2, 5, 3, 4, 6, 1] Explanation: The elements at even indices are [2, 3, 6] and are in non-decreasing order. The elements at odd indices are [5, 4, 1] and are in non-increasing order. Example 2: Input: arr = [1, 3, 2, 2, 3, 1] Output: [1, 3, 2, 2, 3, 1] Explanation: The elements at even indices are [1, 2, 3] and are in non-decreasing order. The elements at odd indices are [3, 2, 1] and are in non-increasing order. Constraints: - 2 <= arr.length <= 1000 - arr.length is even - -10^5 <= arr[i] <= 10^5","solution":"def rearrangeArray(arr): Rearranges the array such that elements at even indices are in non-decreasing order and elements at odd indices are in non-increasing order. even_indices = sorted(arr[::2]) odd_indices = sorted(arr[1::2], reverse=True) rearranged = [] for e, o in zip(even_indices, odd_indices): rearranged.append(e) rearranged.append(o) return rearranged"},{"question":"Kevin loves to play video games, and he often competes in online tournaments. Each tournament consists of multiple rounds, and each round has a certain number of players participating. Players in each round can either win or lose. Kevin tracks his performance meticulously and records the outcomes of his matches. Each win is represented by a \'W\', and each loss is represented by an \'L\'. Kevin wants to analyze his performance to determine if he has had a winning streak in the tournament. A winning streak is defined as at least three consecutive wins. Given the outcomes of Kevin\'s matches in a tournament, you need to determine whether Kevin had a winning streak. -----Input----- The input consists of a single line containing a string of characters \'W\' and \'L\' representing the outcomes of Kevin\'s matches. The length of the string (denoted as n) is guaranteed to be between 1 and 100. -----Output----- If Kevin had a winning streak, print \\"Winning streak detected!\\" (without quotes). Otherwise, print \\"No winning streak.\\" (without quotes). -----Examples----- Sample Input 1: WWLWWWLW Sample Output 1: Winning streak detected! Sample Input 2: WLWLLLWL Sample Output 2: No winning streak.","solution":"def detect_winning_streak(outcomes): Determine if there is a winning streak of at least three consecutive wins in the tournament. Parameters: outcomes (str): A string of \'W\' and \'L\' representing the outcomes of matches. Returns: str: \\"Winning streak detected!\\" if there are at least three consecutive wins, otherwise \\"No winning streak.\\" if \'WWW\' in outcomes: return \\"Winning streak detected!\\" return \\"No winning streak.\\""},{"question":"You are given a one-dimensional array `arr` consisting of `N` integers. You need to determine if there exists a contiguous subarray (of length at least 1) whose sum is exactly `K`. -----Input----- The first line of input contains two integers `N` and `K` (1 le N le 10^5, -10^9 le K le 10^9). The second line contains `N` integers, the elements of the array `arr` which can range from -10^4 to 10^4. -----Output----- Print \\"YES\\" if there exists a contiguous subarray whose sum is exactly `K`. Otherwise, print \\"NO\\". -----Examples----- Sample Input 1: 5 15 1 2 3 7 5 Sample Output 1: YES Sample Input 2: 4 20 1 2 3 4 Sample Output 2: NO Sample Input 3: 6 9 2 4 -2 1 6 5 Sample Output 3: YES","solution":"def exists_subarray_with_sum_k(N, K, arr): Determines if there exists a contiguous subarray in arr that sums to K. Args: N : int : Number of elements in the array K : int : Target sum arr : list : List of integers Returns: str : \\"YES\\" if such a subarray exists, \\"NO\\" otherwise current_sum = 0 prefix_sums = {0} for num in arr: current_sum += num if (current_sum - K) in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\""},{"question":"You are given a list of strings that represent file paths. Each file path is formed with directory names separated by forward slashes (\'/\'). Sometimes there may be redundant segments in the path, such as \\".\\" which means the current directory and \\"..\\" which means to go up one directory (i.e., to the parent directory). Your task is to simplify these file paths so that each path contains no redundant segments and represents the same location in the filesystem as the original path. Formally, you need to process each file path by applying the following rules: 1. A single dot \\".\\" means to stay in the current directory and can be removed. 2. A double dot \\"..\\" means to go up one directory. This means you remove the directory segment before the \\"..\\" and the \\"..\\" itself. 3. Multiple consecutive slashes \'//\' should be reduced to a single slash \'/\'. 4. The path should always start with a slash if it is an absolute path. 5. Remove any trailing slash at the end of the path unless the path is the root \\"/\\" itself. Write a function that takes a list of strings representing file paths and returns a list of simplified file paths. -----Input----- - An integer n (1 ≤ n ≤ 1000) — the number of file paths in the input. - The following n lines contain file paths, each a non-empty string with a length between 1 and 100 characters. Each path contains only lowercase letters, digits, \'/\', \'.\' and \'..\' characters. -----Output----- - Print n lines, each containing a simplified version of a file path. -----Examples----- Input 3 /home/foo/ /../ /home//foo/bar/../baz Output /home/foo / /home/foo/baz Input 2 /a/./b/../../c/ /a//b//c/d/././e/../f Output /c /a/b/c/d/f Input 1 /a//b////c/d// Output /a/b/c/d -----Note----- In the first example: 1. \\"/home/foo/\\" -> \\"/home/foo\\" (remove trailing slash) 2. \\"/../\\" -> \\"/\\" (go up from root is still root) 3. \\"/home//foo/bar/../baz\\" -> \\"/home/foo/baz\\" (remove extra slashes and resolve parent directory \\"..\\") In the second example: 1. \\"/a/./b/../../c/\\" -> \\"/c\\" (current directory (\\".\\") is removed and we go up twice) 2. \\"/a//b//c/d/././e/../f\\" -> \\"/a/b/c/d/f\\" (remove extra slashes, current directory (\\".\\") and resolve parent directory \\"..\\") In the third example: 1. \\"/a//b////c/d//\\" -> \\"/a/b/c/d\\" (remove extra slashes and trailing slash)","solution":"def simplify_path(path): parts = path.split(\'/\') stack = [] for part in parts: if part == \'..\': if stack: stack.pop() elif part and part != \'.\': stack.append(part) simplified_path = \'/\' + \'/\'.join(stack) return simplified_path.rstrip(\'/\') if len(simplified_path) > 1 else \'/\' def simplify_file_paths(paths): return [simplify_path(path) for path in paths]"},{"question":"You are given a list of n integers, and you have to perform q queries on this list. Each query can be one of the following three types: * \\"update i x\\": Update the i-th integer in the list to x. * \\"sum l r\\": Find the sum of the integers in the sublist from index l to index r (inclusive). * \\"max l r\\": Find the maximum value among the integers in the sublist from index l to index r (inclusive). Input The first line contains two integers n and q (1 ≤ n, q ≤ 200 000) — the number of integers in the list and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the initial list. Each of the following q lines contains a query of one of the following three types: * \\"update i x\\" (1 ≤ i ≤ n, 1 ≤ x ≤ 10^9) — update the i-th integer in the list to x. * \\"sum l r\\" (1 ≤ l ≤ r ≤ n) — find the sum of the integers in the sublist from index l to index r. * \\"max l r\\" (1 ≤ l ≤ r ≤ n) — find the maximum value among the integers in the sublist from index l to index r. Output For each query of type \\"sum\\" and \\"max\\", print the result on a new line. Examples Input 8 5 1 3 5 7 9 2 4 6 update 4 10 sum 2 5 max 3 7 sum 1 8 max 1 8 Output 27 10 37 10 Note After the first query, the list is modified to: [1, 3, 5, 10, 9, 2, 4, 6]. The sum from index 2 to 5 is 3 + 5 + 10 + 9 = 27. The maximum value from index 3 to 7 is 10. The sum of the entire list is 1 + 3 + 5 + 10 + 9 + 2 + 4 + 6 = 40. The maximum value in the entire list is 10.","solution":"class QueryProcessor: def __init__(self, array): self.array = array def update(self, i, x): self.array[i - 1] = x def sum_range(self, l, r): return sum(self.array[l - 1:r]) def max_range(self, l, r): return max(self.array[l - 1:r]) def process_queries(n, q, initial_list, queries): qp = QueryProcessor(initial_list) results = [] for query in queries: parts = query.split() if parts[0] == \\"update\\": _, i, x = parts qp.update(int(i), int(x)) elif parts[0] == \\"sum\\": _, l, r = parts results.append(qp.sum_range(int(l), int(r))) elif parts[0] == \\"max\\": _, l, r = parts results.append(qp.max_range(int(l), int(r))) return results"},{"question":"Problem Given an array A of N integers, you can perform the following operations: 1. Reverse a subarray: Given two indices l and r (1 ≤ l ≤ r ≤ N), reverse the subarray from l to r. 2. Find the k-th smallest element: Given two indices l and r (1 ≤ l ≤ r ≤ N) and an integer k (1 ≤ k ≤ r - l + 1), find the k-th smallest element in the subarray from l to r. You need to process Q queries of the above types in the given order. Input The input is given in the following format: ``` N Q A_1 A_2 ... A_N query_1 query_2 ... query_Q ``` Each query has one of the following forms: - `1 l r` (reverse the subarray from index l to r) - `2 l r k` (find the k-th smallest element in the subarray from index l to r) Constraints - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - -10^9 leq A_i leq 10^9 - For query type `1`, 1 leq l leq r leq N - For query type `2, 1 leq l leq r leq N and 1 leq k leq r - l + 1 Output For each query of type `2`, output the k-th smallest element on a new line. Examples Input ``` 6 4 5 3 8 6 2 7 1 2 5 2 1 6 3 2 2 4 1 1 3 6 ``` Output ``` 5 2 ``` Explanation Initial array: [5, 3, 8, 6, 2, 7] 1. After reversing subarray [3, 8, 6, 2], array: [5, 2, 6, 8, 3, 7] 2. 3rd smallest in [5, 2, 6, 8, 3, 7] is 5 3. 1st smallest in [2, 6, 8] is 2 4. After reversing subarray [6, 8, 3, 7], array: [5, 2, 7, 3, 8, 6]","solution":"def process_queries(N, Q, A, queries): results = [] for query in queries: parts = list(map(int, query.split())) if parts[0] == 1: l, r = parts[1] - 1, parts[2] - 1 A[l:r+1] = A[l:r+1][::-1] elif parts[0] == 2: l, r, k = parts[1] - 1, parts[2] - 1, parts[3] subarray = sorted(A[l:r+1]) results.append(subarray[k-1]) return results"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to determine the shortest subsequence of s that, when sorted lexicographically, spells the word \\"code\\". A subsequence of a string is obtained by deleting zero or more characters from the string without changing the order of the remaining characters. If it is impossible to form the word \\"code\\" from the string s, return -1. -----Input----- - The first line contains a single integer t (1 le t le 100) — the number of test cases. - Each of the next t lines contains a single string s (1 le |s| le 1000), consisting of lowercase English letters. -----Output----- For each test case, print the length of the shortest subsequence that can spell the word \\"code\\". If it is impossible, print -1. -----Example----- Input 3 codex codedex hello Output 4 4 -1 -----Note----- In the first test case, the shortest subsequence to form the word \\"code\\" is \\"code\\" itself which has a length of 4. In the second test case, the shortest subsequence to form the word \\"code\\" is \\"code\\" itself which has a length of 4. In the third test case, it is not possible to form the word \\"code\\", so the output is -1.","solution":"def shortest_subsequence_lengths(t, test_cases): target = \\"code\\" target_len = len(target) results = [] for s in test_cases: idx_t = 0 for char in s: if char == target[idx_t]: idx_t += 1 if idx_t == target_len: break if idx_t == target_len: results.append(target_len) else: results.append(-1) return results"},{"question":"A small town has decided to name its streets in a very specific manner. The town consists of a grid of streets, with n horizontal streets and m vertical streets. Each street will be assigned a unique name. The names are given as strings of lowercase letters and are unique within the set. The town planner has a list of horizontal and vertical street names, and your task is to assign these names to streets in a way that matches a given layout. The names for each horizontal street and vertical street are already provided, and the goal is to construct the grid and output the resulting names in the correct format. -----Input----- The first line of the input contains two space-separated integers n (2 leq n leq 50) and m (2 leq m leq 50), representing the number of horizontal streets and vertical streets respectively. The next n lines each contain a single string of lowercase letters, representing the names of the horizontal streets. The following m lines each contain a single string of lowercase letters, representing the names of the vertical streets. -----Output----- Output the resulting grid, where each cell contains the name of the street intersection. Each name should consist of the horizontal street name followed by the vertical street name, separated by an underscore. -----Example----- Sample Input: 3 3 elm oak pine first second third Sample Output: elm_first elm_second elm_third oak_first oak_second oak_third pine_first pine_second pine_third","solution":"def create_street_grid(n, m, horizontal_names, vertical_names): Constructs the grid of street names based on the given horizontal and vertical names. Args: n: int - the number of horizontal streets m: int - the number of vertical streets horizontal_names: list - list of horizontal street names vertical_names: list - list of vertical street names Returns: list of list containing the grid of street names grid = [] for h_name in horizontal_names: row = [] for v_name in vertical_names: row.append(f\\"{h_name}_{v_name}\\") grid.append(row) return grid"},{"question":"John is a fan of numerical sequences. He recently came across a sequence defined by a specific rule and wants to generate the sequence given different initial values and lengths. The rule for generating the sequence is as follows: Given an integer `a` as the initial value, the next value in the sequence is obtained by adding the sum of the digits of the current value to the current value itself. This process is repeated until the sequence contains the desired number of elements. You need to help John by writing a program that generates and prints the sequence based on the initial value and the desired length provided. Input: - The first line of input contains a single integer ( T ) denoting the number of test cases. Each test case consists of two integers ( a ) and ( n ). - ( a ) is the initial value of the sequence. - ( n ) is the desired length of the sequence. Output: - For each test case, print the sequence of ( n ) integers generated by the rule described above. Constraints: - ( 1 leq T leq 100 ) - ( 1 leq a leq 1000 ) - ( 1 leq n leq 100 ) SAMPLE INPUT: 3 5 5 12 4 98 3 SAMPLE OUTPUT: 5 10 11 13 17 12 15 21 24 98 115 122 Explanation: Test Case 1: Starting with 5, the next numbers are: - 5 + sum_of_digits(5) = 5 + 5 = 10 - 10 + sum_of_digits(10) = 10 + 1 = 11 - 11 + sum_of_digits(11) = 11 + 2 = 13 - 13 + sum_of_digits(13) = 13 + 4 = 17 Therefore, the sequence is 5, 10, 11, 13, 17. Test Case 2: Starting with 12, the next numbers are: - 12 + sum_of_digits(12) = 12 + 3 = 15 - 15 + sum_of_digits(15) = 15 + 6 = 21 - 21 + sum_of_digits(21) = 21 + 3 = 24 Therefore, the sequence is 12, 15, 21, 24. Test Case 3: Starting with 98, the next numbers are: - 98 + sum_of_digits(98) = 98 + 17 = 115 - 115 + sum_of_digits(115) = 115 + 8 = 123 Therefore, the sequence is 98, 115, 123.","solution":"def generate_sequence(a, n): Generates a sequence based on the rule provided. sequence = [a] for _ in range(1, n): next_value = sequence[-1] + sum(int(digit) for digit in str(sequence[-1])) sequence.append(next_value) return sequence def main(): import sys input = sys.stdin.read data = input().strip().split() T = int(data[0]) index = 1 results = [] for _ in range(T): a = int(data[index]) n = int(data[index + 1]) index += 2 sequence = generate_sequence(a, n) results.append(sequence) for result in results: print(\\" \\".join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"Given a permutation of numbers from 1 to n. You can perform the following operation any number of times: pick any number in the permutation and move it to the beginning. Your task is to find the minimum number of operations required to form a sorted permutation (in ascending order). -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 10^5) — the length of the permutation. The second line of each test case contains n distinct integers p_1, p_2, dots, p_n — the permutation of numbers from 1 to n. The sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the minimum number of operations required to sort the permutation. -----Examples----- Input 3 4 3 4 2 1 5 5 2 3 4 1 6 1 2 3 4 5 6 Output 3 4 0 -----Note----- In the first test case, one possible sequence of moves is: - Move `1` to the beginning -> [1, 3, 4, 2] - Move `2` to the beginning -> [2, 1, 3, 4] - Move `3` to the beginning -> [3, 2, 1, 4] In the second test case, one possible sequence of moves is: - Move `1` to the beginning -> [1, 5, 2, 3, 4] - Move `4` to the beginning -> [4, 1, 5, 2, 3] - Move `3` to the beginning -> [3, 4, 1, 5, 2] - Move `2` to the beginning -> [2, 3, 4, 1, 5] In the third test case, the permutation is already sorted, so no operations are needed.","solution":"def min_operations_to_sort_permutation(t, test_cases): Returns an array of minimal operation counts required to sort each test case of permutations. Arguments: t -- an integer, the number of test cases. test_cases -- a list of tuples, where each tuple contains an integer (length of permutation) and a list of permutations. Returns: result -- a list of integers, the minimum number of operations for each test case. results = [] for n, perm in test_cases: # Edge case: if already sorted, return 0 if perm == sorted(perm): results.append(0) continue min_ops = n # Start as worst case last_pos = n - 1 # Traverse from the end to start, finding out the last element of the sorted subsequence while last_pos > 0 and perm[last_pos - 1] < perm[last_pos]: last_pos -= 1 min_ops = last_pos results.append(min_ops) return results"},{"question":"Alex is organizing a talent show where participants perform in pairs. Performers in a pair need to have exactly one guitar and one piano between them. There are currently G guitars and P pianos available. How many pairs of performers can he organize with these instruments? ------ Input Format ------ - The first line will contain N, the number of test cases. Then the test cases follow. - Each test case consists of a single line containing two space-separated integers - G and P. ------ Output Format ------ For each test case, output the maximum number of pairs on a new line. ------ Constraints ------ 1 ≤ N ≤ 100 0 ≤ G, P ≤ 100 ----- Sample Input ------ 3 10 15 5 5 12 6 ----- Sample Output ------ 10 5 6 ----- Explanation ------ Test Case 1: Alex can organize 10 pairs, using 10 guitars and 10 pianos. Test Case 2: Alex can organize 5 pairs, using 5 guitars and 5 pianos. Test Case 3: Alex can organize 6 pairs, using 6 guitars and 6 pianos.","solution":"def max_pairs(G, P): Returns the maximum number of pairs of performers given G guitars and P pianos. A pair consists of one guitar and one piano. return min(G, P) def process_test_cases(test_cases): results = [] for G, P in test_cases: results.append(max_pairs(G, P)) return results"},{"question":"Given an integer array `nums` and an integer `k`, return the maximum possible sum of a non-empty subarray of `nums` that contains at most `k` distinct integers. A subarray is a contiguous part of an array. ------ Input ------ First line of input contains a single integer `T`, denoting the number of test cases. T test cases follow. For each test case: 1. The first line contains two integers `n` and `k`, where `n` is the length of array `nums`. 2. The second line contains `n` integers representing elements of array `nums`. ------ Output ------ For each test case, output a single integer — the maximum possible sum of a subarray that contains at most `k` distinct integers. ------ Constraints ------ - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 100,000 - 0 ≤ k ≤ n - -10^4 ≤ nums[i] ≤ 10^4 ------ Sample Input 1 ------ 3 5 2 1 2 1 2 3 5 1 5 3 2 1 5 7 3 1 2 1 2 1 2 1 ------ Sample Output 1 ------ 6 5 10","solution":"def max_subarray_with_k_distinct(nums, k): from collections import defaultdict n = len(nums) if k == 0: return 0 max_sum = float(\'-inf\') current_sum = 0 left = 0 freq = defaultdict(int) distinct_count = 0 for right in range(n): if freq[nums[right]] == 0: distinct_count += 1 freq[nums[right]] += 1 current_sum += nums[right] while distinct_count > k: freq[nums[left]] -= 1 current_sum -= nums[left] if freq[nums[left]] == 0: distinct_count -= 1 left += 1 if distinct_count <= k: max_sum = max(max_sum, current_sum) return max_sum def handle_test_cases(test_cases): results = [] for (n, k, nums) in test_cases: results.append(max_subarray_with_k_distinct(nums, k)) return results"},{"question":"Balanced Parentheses Check Sophia is trying to create an algorithm that will help her determine if a given string of parentheses is balanced. A string is considered balanced if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\' and they are correctly nested. For example: The string \\"(())\\" is balanced, but the string \\"(()\\" is not. Your task is to write a program that checks if a given string containing only \'(\' and \')\' is balanced. Input The first line consists of a string containing only the characters \'(\' and \')\'. Output The output should be \\"Balanced\\" if the given string is balanced, otherwise \\"Unbalanced\\". Example Input: (()) Output: Balanced Input: (())) Output: Unbalanced","solution":"def is_balanced_parentheses(s): Checks if the given string of parentheses is balanced. :param s: A string consisting of \'(\' and \')\' :return: \\"Balanced\\" if the string is balanced, otherwise \\"Unbalanced\\" stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"Unbalanced\\" stack.pop() return \\"Balanced\\" if not stack else \\"Unbalanced\\""},{"question":"The train schedule for a particular station provides the arrival and departure times of n trains, each given as a pair of integers (a_i, d_i) where a_i is the arrival time and d_i is the departure time. A station manager wants to find the maximum number of trains that the station can accommodate at the same time. For the purpose of the schedule, consider that if a train arrives at time t and another train departs at time t, they can both be present at the station at the same time. Help the station manager in determining the maximum number of trains present at the station simultaneously. -----Input----- The first line of input contains a single integer n (1 le n le 1000) — the number of trains. The next n lines contain two space-separated integers a_i and d_i (0 le a_i < d_i le 100000) — the arrival and departure times of each train. -----Output----- Print a single integer — the maximum number of trains present at the station at the same time. -----Examples----- Input: 3 1 5 2 6 4 8 Output: 3 Input: 5 1 5 2 3 4 6 5 8 7 9 Output: 2 -----Note----- For the first test case, trains are present at the station at the following times: - Train 1: [1, 2, 3, 4, 5] - Train 2: [2, 3, 4, 5, 6] - Train 3: [4, 5, 6, 7, 8] Trains 1, 2, and 3 overlap at time 4, thus the maximum number of trains at the station at the same time is 3. For the second test case, trains overlap the most at times 2, 3, and 7 where there are two trains each time.","solution":"def maximum_trains(n, times): Determines the maximum number of trains present at the station simultaneously. :param n: Number of trains :param times: List of tuples, where each tuple (a_i, d_i) represents arrival and departure time of a train :return: Maximum number of trains present simultaneously events = [] for arrival, departure in times: events.append((arrival, 1)) # Train arrives events.append((departure, -1)) # Train departs # Sort events, arrival before departure if times are equal. events.sort() max_trains = 0 current_trains = 0 for time, event in events: current_trains += event if current_trains > max_trains: max_trains = current_trains return max_trains"},{"question":"Find the longest subsequence in an array of integers such that all elements of the subsequence are the same. The subsequence does not need to be contiguous. For example, given the array arr = [1, 3, 2, 3, 3, 4, 3], the longest subsequence with the same element is [3, 3, 3, 3], which has a length of 4. Returning the length of this subsequence is required. Function Description Complete the longestSubsequenceSameElement function below. longestSubsequenceSameElement has the following parameter(s): int arr[n]: an array of integers Returns int: the length of the longest subsequence with all elements being the same Input Format The first line contains an integer, n, the size of arr. The second line contains n space-separated integers of the array arr. Constraints 1 leq n leq 10^5 -10^9 leq arr[i] leq 10^9 Sample Input STDIN Function ----- -------- 7 arr[] size n = 7 1 3 2 3 3 4 3 arr = [1, 3, 2, 3, 3, 4, 3] Sample Output 4 Explanation The longest subsequence with all elements the same is [3, 3, 3, 3], which has a length of 4. Return 4 as the result.","solution":"def longestSubsequenceSameElement(arr): Returns the length of the longest subsequence with all elements being the same. element_count = {} for element in arr: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 return max(element_count.values())"},{"question":"Jenny likes playing with strings and came up with a new game. She will provide a word, and the task is to determine the smallest number of contiguous substrings into which the word can be split such that each substring is a palindrome. A palindrome is a string that reads the same forward and backward. Input The first and only line contains a single string s (1 ≤ |s| ≤ 100), consisting of lowercase English letters. Output Print a single integer — the smallest number of contiguous substrings into which the input word can be split such that each substring is a palindrome. Examples Input aab Output 2 Input racecar Output 1","solution":"def is_palindrome(s): return s == s[::-1] def min_palindrome_partitions(s): n = len(s) dp = [0] * (n + 1) dp[n] = 0 for i in range(n - 1, -1, -1): min_cut = float(\'inf\') for j in range(i, n): if is_palindrome(s[i:j+1]): min_cut = min(min_cut, 1 + dp[j+1]) dp[i] = min_cut return dp[0] # Examples print(min_palindrome_partitions(\\"aab\\")) # Output: 2 print(min_palindrome_partitions(\\"racecar\\")) # Output: 1"},{"question":"Given a list of words, you need to determine whether you can form a given target string by concatenating exactly two distinct words from the list. If such a pair exists, output the pair of words. If there are multiple pairs that can form the target, output any one of them. If no such pair exists, output \\"No pair found\\". ------ Input ------ The input will consist of: 1. An integer `n` representing the number of words in the list (2 <= n <= 1000). 2. `n` subsequent lines where each line contains a distinct word (each word is a non-empty string of at most 100 characters). 3. A target string representing the string you need to form. ------ Output ------ Output two words separated by a space if such a pair exists. If no such pair exists, output \\"No pair found\\". ------ Sample Input 1 ------ 5 apple banana carrot dog elephant carrotdog ------ Sample Output 1 ------ carrot dog ------ Sample Input 2 ------ 4 note book pen paper notebook ------ Sample Output 2 ------ note book ------ Sample Input 3 ------ 3 red blue green yellow ------ Sample Output 3 ------ No pair found","solution":"def find_concatenation_pair(words, target): Given a list of words, determine whether you can form a given target string by concatenating exactly two distinct words from the list. Args: words (list): List of distinct words. target (str): Target string to form. Returns: str: Two words that form the target string or \\"No pair found\\". word_set = set(words) for word in words: if target.startswith(word): suffix = target[len(word):] if suffix in word_set and suffix != word: return f\\"{word} {suffix}\\" return \\"No pair found\\""},{"question":"You are given an array of strings `words` and an integer `k`. The task is to return a list of the `k` most frequent words from the array. The result should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with a lower alphabetical order comes first. Write a function `topKFrequent(words: List[str], k: int) -> List[str]` to solve the problem. Example 1: Input: `words = [\\"i\\", \\"love\\", \\"leetcode\\", \\"i\\", \\"love\\", \\"coding\\"], k = 2` Output: `[\\"i\\", \\"love\\"]` Explanation: `\\"i\\"`, `\\"love\\"` and `\\"leetcode\\"` each appears twice. The word `\\"i\\"` appears first in the input list, followed by `\\"love\\"` and `\\"leetcode\\"` which have the same frequency. Therefore, `\\"i\\"` and `\\"love\\"` are returned. Example 2: Input: `words = [\\"the\\", \\"day\\", \\"is\\", \\"sunny\\", \\"the\\", \\"the\\", \\"the\\", \\"sunny\\", \\"is\\", \\"is\\"], k = 4` Output: `[\\"the\\", \\"is\\", \\"sunny\\", \\"day\\"]` Explanation: `\\"the\\"` appears 4 times, `\\"is\\"` appears 3 times, `\\"sunny\\"` appears 2 times, `\\"day\\"` appears 1 time. The list should be sorted by frequency from highest to lowest. Constraints: - `1 <= words.length <= 500` - `1 <= words[i].length <= 10` - `words[i]` consists of lowercase English letters. - `1 <= k <= words.length`","solution":"from typing import List from collections import Counter def topKFrequent(words: List[str], k: int) -> List[str]: Returns a list of the k most frequent words from the array. The result is sorted by frequency from highest to lowest. If two words have the same frequency, they are sorted in alphabetical order. count = Counter(words) candidates = list(count.keys()) candidates.sort(key=lambda x: (-count[x], x)) return candidates[:k]"},{"question":"# Schedule Notifications You are developing a notification system for an event scheduling application. The system will remind users of their upcoming events based on their schedules. Implement a function that takes the user\'s schedule and the current day as input and returns a list of notifications for the user. The notifications should be generated for events occurring the same day and the following day. The function takes two parameters: schedule and current_day - The parameter `schedule` is a list of tuples where each tuple represents an event. Each event has a day, start time, end time, and description. The days are represented as strings \'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\'. The times are represented as strings in 24-hour format (e.g., \'14:30\'). Example: [(\'Monday\', \'14:30\', \'16:00\', \'Team Meeting\')] - The parameter `current_day` is a string representing the current day of the week. - The function should return a list of event descriptions that occur on the current day and the following day, in chronological order. Example input and output ``` input: ([(\'Monday\', \'14:30\', \'16:00\', \'Team Meeting\'), (\'Tuesday\', \'09:00\', \'10:00\', \'Doctor Appointment\'), (\'Wednesday\', \'18:00\', \'19:30\', \'Workout Session\')], \'Monday\') output: [\'Team Meeting\', \'Doctor Appointment\'] input: ([(\'Friday\', \'09:00\', \'10:00\', \'Coffee with Sarah\'), (\'Friday\', \'12:00\', \'13:00\', \'Lunch with John\'), (\'Saturday\', \'10:00\', \'12:00\', \'Conference Call\')], \'Friday\') output: [\'Coffee with Sarah\', \'Lunch with John\', \'Conference Call\'] input: ([(\'Sunday\', \'09:00\', \'10:00\', \'Brunch with Family\'), (\'Monday\', \'11:00\', \'12:00\', \'Project Update Meeting\')], \'Sunday\') output: [\'Brunch with Family\', \'Project Update Meeting\'] ``` Hint: Consider each day in a week and how they follow each other. For example, following \'Sunday\' is \'Monday\'. The notifications should be fetched considering this cyclic nature of the week.","solution":"def schedule_notifications(schedule, current_day): Returns a list of event descriptions for the current day and the following day. days_of_week = [\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\'] current_day_index = days_of_week.index(current_day) next_day_index = (current_day_index + 1) % 7 next_day = days_of_week[next_day_index] events_today_and_tomorrow = [event[3] for event in schedule if event[0] == current_day or event[0] == next_day] return events_today_and_tomorrow"},{"question":"Given a string `s`, return all the palindromic substrings within `s`. A palindrome is a string that reads the same forwards and backwards. The substrings can be in any order, and duplicates are allowed if they appear multiple times in the input string. Example 1: Input: s = \\"aab\\" Output: [\\"a\\", \\"a\\", \\"b\\", \\"aa\\"] Explanation: The palindromic substrings are \\"a\\" (appearing twice), \\"aa\\", and \\"b\\". Example 2: Input: s = \\"abc\\" Output: [\\"a\\", \\"b\\", \\"c\\"] Explanation: Each character itself is a palindrome, and there are no other palindromic substrings. Example 3: Input: s = \\"racecar\\" Output: [\\"r\\", \\"a\\", \\"c\\", \\"e\\", \\"c\\", \\"a\\", \\"r\\", \\"aceca\\", \\"cec\\", \\"racecar\\"] Explanation: In addition to each character being a palindrome, \\"aceca\\", \\"cec\\", and \\"racecar\\" are palindromic substrings. Example 4: Input: s = \\"aaa\\" Output: [\\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\"] Explanation: The palindromic substrings are \\"a\\" (appearing three times), \\"aa\\" (appearing twice), and \\"aaa\\". Constraints: 1 <= s.length <= 100 s consists of only lower-case English letters.","solution":"def palindromic_substrings(s): Returns all palindromic substrings of the input string `s`. result = [] # Helper function to expand from the middle and check for palindromes def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: result.append(s[left:right + 1]) left -= 1 right += 1 # Considering each character and the space between each pair of characters as potential centers for i in range(len(s)): expand_around_center(i, i) # odd length palindromes expand_around_center(i, i + 1) # even length palindromes return result"},{"question":"You are given a list of integers where each integer appears an even number of times, except for one integer which appears an odd number of times. Write a function to find the integer that appears an odd number of times. Example ```python find_odd_occurrence([2, 3, 4, 3, 2, 4, 4]) == 4 ```","solution":"def find_odd_occurrence(arr): Returns the element that appears an odd number of times in the list. result = 0 for num in arr: result ^= num return result"},{"question":"You are a farmer with a rectangular plot of land wherein you want to plant trees. Given the constraints of your land, you want to plant as many rows of trees as possible with each row having the same number of trees. However, trees cannot be planted too close to each other. You are given the dimensions of the land as `W` (width) and `L` (length). The trees must be planted such that there is a minimum distance `D` between any two trees. Additionally, trees can only be planted at integer coordinates. Determine the maximum number of rows of trees you can plant, with each row containing the maximum possible number of trees, while adhering to the above constraints. ----- Input ----- The first line contains an integer `t` (1 le t le 1000) — the number of test cases. For each test case, the input consists of: - One line with three integers W, L, and D (1 le W, L le 1000; 1 le D le min(W, L)). ----- Output ----- For each test case, output a single integer — the maximum number of rows of trees you can plant under the given constraints. ----- Example ----- Input 3 10 10 2 15 7 3 5 5 1 Output 6 3 5 ----- Note ----- In the first test case, trees can be planted with a minimum distance of 2 units in both directions, creating a grid-like pattern. This allows for maximum planting of rows with all tree coordinates being integers. In the second test case, with a larger plot but a greater minimum distance requirement, fewer rows can be created. In the third test case, the smallest distance between trees allows nearly the entire plot to be used for planting, leading to the maximum number of rows for that dimension.","solution":"def max_rows_of_trees(t, tests): results = [] for W, L, D in tests: max_rows = L // D results.append(max_rows) return results # Example usage if __name__ == \\"__main__\\": t = 3 tests = [ (10, 10, 2), (15, 7, 3), (5, 5, 1) ] print(max_rows_of_trees(t, tests)) # Output: [5, 2, 5]"},{"question":"In the game of Rolling Dice, each player rolls a pair of dice, and the player with the highest total sum of the numbers on the dice wins. However, in case of a tie, the first player to achieve the winning total sum wins. You are given an array representing the rounds where each element is a tuple containing the total sum of dice rolled by players in each round. You need to determine and print the index of the first player (1-based index) who wins the game. Example 1: Input: rounds = [(3, 4), (5, 6), (6, 6), (6, 8)] Output: 4 Explanation: The highest total sum is 14 from round (6, 8). Example 2: Input: rounds = [(2, 3), (2, 5), (3, 3), (2, 3), (2, 5)] Output: 2 Explanation: The highest total sum is 7 from round (2, 5). The second player achieved this total sum first. Example 3: Input: rounds = [(1, 2), (3, 3), (4, 1), (4, 7), (5, 4)] Output: 4 Explanation: The highest total sum is 11 from round (4, 7). Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function findWinner() that takes a list of tuples rounds as input and returns the 1-based index of the first player to win the game. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ len(rounds) ≤ 10^4 2 ≤ sum(each_tuple) ≤ 12 (Assuming each die has a minimum value of 1 and a maximum value of 6)","solution":"def findWinner(rounds): Returns the 1-based index of the first player to win the game based on the highest total sum of dice rolled in each round. max_sum = 0 winner_index = 0 for i, (sum1, sum2) in enumerate(rounds): total_sum = sum1 + sum2 if total_sum > max_sum: max_sum = total_sum winner_index = i + 1 # 1-based index return winner_index"},{"question":"You are given a string S consisting of lowercase English letters. An interval [l, r] in the string is good if the substring S[l : r+1] contains at least one of each of the letters \'a\', \'b\', and \'c\'. Your task is to find the length of the shortest good interval in S. ------ Input ------ The first line of input contains a single integer T (1 ≤ T ≤ 100) denoting the number of test cases. Each of the next T lines contains a string S of length 1 to 10^5. ------ Output ------ For each test case, print a single integer ― the length of the shortest good interval in S. If no such interval exists, print -1. ------ Constraints ------ 1. 1 ≤ |S| ≤ 10^5 2. 1 ≤ sum of lengths of all strings in input ≤ 10^6 ------ Sample Input 1 ------ 3 abac abcabc aaa ------ Sample Output 1 ------ 3 3 -1 ------ explanation 1 ------ In the first test case, the shortest good interval is \\"bac\\" which has a length of 3. In the second test case, the entire string \\"abc\\" forms a valid interval and has a length of 3. In the third test case, there is no interval that contains all of \'a\', \'b\', and \'c\' letters, hence the output is -1.","solution":"def shortest_good_interval(S): Find the length of the shortest interval in S that contains at least one of each letter \'a\', \'b\', and \'c\'. Parameters: S (str): Input string consisting of lowercase English letters. Returns: int: Length of the shortest good interval or -1 if no such interval exists. n = len(S) min_length = float(\'inf\') left = 0 count = {\'a\': 0, \'b\': 0, \'c\': 0} for right in range(n): if S[right] in count: count[S[right]] += 1 while all(count[char] > 0 for char in \'abc\'): min_length = min(min_length, right - left + 1) if S[left] in count: count[S[left]] -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1 def process_test_cases(T, test_cases): Process multiple test cases to find the shortest good interval for each. Parameters: T (int): Number of test cases. test_cases (list of str): List of strings for each test case. Returns: list of int: List of results for each test case. results = [] for S in test_cases: results.append(shortest_good_interval(S)) return results"},{"question":"In this Kata, you are required to implement a function that simulates a simplified checkout system. You will be provided with a list of prices corresponding to items in a store and a list of items purchased (by their indices), and your task is to calculate the total amount the customer has to pay after applying a discount on the highest-priced item purchased. - The discount to be applied is 20%. - If no items are purchased, the total amount to be paid is 0. Write a function `calculate_total(prices: List[float], items: List[int]) -> float` that takes two lists: 1. `prices` - a list of floating-point numbers representing the prices of items in the store. 2. `items` - a list of integers representing indices of the items purchased. Return the total amount the customer has to pay after applying the discount to the highest-priced item. ``` Examples: calculate_total([10.0, 20.0, 30.0], [0, 1, 2]) = 50.0 # Explanation: The items purchased are priced 10.0, 20.0, and 30.0. The highest-priced item is 30.0, with a 20% discount, it becomes 24.0. Total = 10.0 + 20.0 + 24.0 = 54.0 calculate_total([15.0, 40.0, 25.0, 30.0], [2, 3]) = 52.0 # Explanation: The items purchased are priced 25.0 and 30.0. The highest-priced item is 30.0, with a 20% discount, it becomes 24.0. Total = 25.0 + 24.0 = 49.0 ``` Additional examples in test cases. Good luck!","solution":"from typing import List def calculate_total(prices: List[float], items: List[int]) -> float: Calculate total price after 20% discount on the highest-priced item purchased. :param prices: List of prices of items in store. :param items: List of indices of items purchased. :return: Total amount to be paid. if not items: return 0.0 total = 0.0 highest_price = 0.0 for item in items: price = prices[item] total += price if price > highest_price: highest_price = price total -= highest_price * 0.2 return total"},{"question":"``` Given a list of positive integers, write a function that checks if it is possible to arrange the numbers in such a way that the sum of every adjacent pair of numbers is always odd. If it is possible, return \\"POSSIBLE\\"; otherwise, return \\"IMPOSSIBLE\\". # Function Signature ```python def is_possible(arr: List[int]) -> str: # Input * `arr`: a list of positive integers. # Output * Return a string, either \\"POSSIBLE\\" or \\"IMPOSSIBLE\\". # Sample Input ```python arr = [1, 2, 3, 4] ``` # Sample Output ```python \\"POSSIBLE\\" ``` # Explanation You can rearrange the array as [1, 2, 3, 4]. The adjacent pairs (1, 2), (2, 3), and (3, 4) all have odd sums. ```","solution":"def is_possible(arr): Checks if it is possible to arrange the numbers in such a way that the sum of every adjacent pair of numbers is always odd. # Count the number of odd and even numbers odd_count = sum(1 for x in arr if x % 2 != 0) even_count = len(arr) - odd_count # For the sums to always be odd, we need an equal number of odd and even numbers if odd_count == even_count: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\""},{"question":"In Zortan, there is a country-side region consisting of N villages (numbered 1 through N) arranged in a line. Let\'s denote the population of the i-th village as p_i. The government is building hospitals and aims to place them such that every village is covered by at least one hospital. A hospital can cover the village it is placed in as well as its immediate neighboring villages. For example, if there are villages with populations [10, 20, 30, 40, 50], and a hospital is placed in the village with population 30, it will cover the villages with populations 20, 30, and 40. Help the government find the minimum number of hospitals needed to cover all the villages. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers p_1, p_2, dots, p_N. -----Output----- For each test case, print a single line containing one integer — the minimum required number of hospitals. -----Constraints----- - 2 le N le 10^5 - 1 le p_i le 10^9 for each valid i -----Example Input----- 1 5 100 200 300 400 500 -----Example Output----- 2 -----Explanation----- Example case 1: We can place hospitals in the second village (covering the first, second, and third villages) and the fifth village (covering the fourth and fifth villages).","solution":"def min_hospitals_needed(T, test_cases): results = [] for case in test_cases: N, populations = case if N == 2: results.append(1) continue hospitals_needed = 0 i = 0 while i < N: hospitals_needed += 1 i += 3 results.append(hospitals_needed) return results"},{"question":"A team of archaeologists has discovered an ancient artifact with a cryptic language inscribed on it. The artifact contains a sequence of integers, and the archaeologists need your help to decode a hidden message by finding special subsequences in the sequence. A subsequence of an array is derived by deleting some or none of the elements without changing the order of the remaining elements. The archaeologists have a hypothesis that the key to decoding the artifact lies in finding all subsequences of the sequence that are strictly increasing. Your task is to write a program that takes the sequence and determines the number of strictly increasing subsequences of length exactly L. ------ Input ------ - The first line contains an integer T, the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and L. - The second line of each test case contains N integers representing the sequence. ------ Output ------ For each test case, output the number of strictly increasing subsequences of length exactly L. ------ Constraints ------ - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ L ≤ N - 1 ≤ sequence elements ≤ 1000 ------ Sample Input ------ 3 4 2 1 2 3 4 5 3 5 3 4 2 1 6 4 1 3 2 4 3 5 ------ Sample Output ------ 6 0 3 ------ Explanation ------ **Test Case 1**: The strictly increasing subsequences of length 2 are (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), and (3, 4). Therefore, the output is 6. **Test Case 2**: There are no strictly increasing subsequences of length 3. Therefore, the output is 0. **Test Case 3**: The strictly increasing subsequences of length 4 are (1, 2, 3, 5), (1, 2, 4, 5), and (1, 3, 4, 5). Therefore, the output is 3.","solution":"def count_increasing_subsequences(nums, L): Returns the number of strictly increasing subsequences of length exactly L. from functools import lru_cache N = len(nums) @lru_cache(None) def count_sequences(start, length): if length == 1: return 1 # A single element is a valid subsequence count = 0 for i in range(start + 1, N): if nums[i] > nums[start]: count += count_sequences(i, length - 1) return count total_count = 0 for i in range(N - L + 1): total_count += count_sequences(i, L) return total_count def process_test_cases(test_cases): results = [] for N, L, sequence in test_cases: results.append(count_increasing_subsequences(sequence, L)) return results"},{"question":"In the distant future, humans have learned to communicate telepathically. Telepathic messages are represented as binary strings where each character is either \'0\' or \'1\'. However, due to interference in the telepathic signal, some bits can be altered. Scientists have discovered a technique to detect and correct up to one bit of error in any transmitted message. Given a binary string representing a telepathic message, determine if it’s possible to correct it to a known valid message using at most one bit flip. Input The first line contains an integer T denoting the number of test cases. Each test case consists of two lines: 1. A binary string M representing the received telepathic message. 2. A binary string V representing the known valid message. Output For each test case, output \\"YES\\" if the received message can be corrected to the known valid message with at most one bit flip, otherwise output \\"NO\\". Example Input: 3 1101 1001 1010 1010 1111 0111 Output: YES YES NO CONSTRAINTS 1 ≤ T ≤ 100000 1 ≤ |M|, |V| ≤ 100 Explanation For the first test case, flipping the 2nd bit of \\"1101\\" changes it to \\"1001\\", which matches the valid message. For the second test case, the received message already matches the valid message. For the third test case, more than one bit flip is required to transform \\"1111\\" into \\"0111\\", so the output is \\"NO\\".","solution":"def can_correct_message(T, cases): Determines if each received message in the cases list can be corrected to the known valid message by flipping at most one bit. Parameters: - T: int : number of test cases - cases: list of tuples : each tuple contains two strings, the first being the received message and the second the known valid message Returns: - list of str : \\"YES\\" or \\"NO\\" for each test case results = [] for M, V in cases: if len(M) != len(V): results.append(\\"NO\\") continue # Count the number of differing bits between M and V diff_count = sum(1 for m, v in zip(M, V) if m != v) if diff_count == 0 or diff_count == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Minions are planning a road trip to celebrate the New Year. They have decided to rent a car, and the car rental company has offered them a car with a fixed mileage limit. The distance between each of the N cities they plan to visit is given, and they must not exceed the given mileage limit during their trip. Kevin, who is in charge of logistics, wonders whether they can visit all cities in any order without exceeding the mileage limit. -----Input----- The first line contains an integer T, the number of test cases. Each test case consists of two lines. The first line contains two space-separated integers N and L, where N is the number of cities and L is the maximum mileage limit for the trip. The second line contains N-1 space-separated integers D1, D2, ..., D{N-1}, where Di represents the distance between consecutive cities. -----Output----- Output YES if the total distance of the trip does not exceed the mileage limit L, otherwise output NO. -----Constraints----- - 1 ≤ T ≤ 105 - 2 ≤ N ≤ 100 - 1 ≤ L, Di ≤ 10^9 -----Example----- Input: 2 5 100 10 20 30 20 4 50 15 20 25 Output: YES NO -----Explanation----- Example case 1: The total distance for visiting 5 cities is 10 + 20 + 30 + 20 = 80, which does not exceed the mileage limit L of 100, so the output is YES. Example case 2: The total distance for visiting 4 cities is 15 + 20 + 25 = 60, which exceeds the mileage limit L of 50, so the output is NO.","solution":"def can_visit_all_cities(T, test_cases): Determines if the minions can visit all cities without exceeding the mileage limit for each test case. Parameters: T (int): Number of test cases. test_cases (list of tuples): List containing tuples where each tuple represents a test case. Each tuple contains (N, L, distances) where: N (int) : the number of cities L (int) : the mileage limit distances (list of int) : distances between consecutive cities. Returns: list : Contains \\"YES\\" or \\"NO\\" for each test case indicating whether the minions can visit all cities. results = [] for case in test_cases: N, L, distances = case total_distance = sum(distances) if total_distance <= L: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In the kingdom of TreeLand, there are n cities connected by n-1 bidirectional roads such that there is exactly one path between any two cities (forming a tree structure). Each road has a certain travel time associated with it. The king of TreeLand is planning to visit all the cities starting from the capital city (city 1) and return to the capital after visiting all other cities exactly once. This problem is known as the Travelling Salesman Problem (TSP) for a tree. Help the king to determine the minimum travel time required to visit all cities starting and ending at city 1, visiting all other cities exactly once. Input The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of cities in TreeLand. The next n-1 lines describe the roads. Each of these lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 105) — representing a bidirectional road between city u and city v with travel time w. Output Print a single integer — the minimum travel time to start from the capital, visit all other cities exactly once, and return to the capital. Examples Input 4 1 2 3 1 3 2 3 4 4 Output 18 Input 3 1 2 1 1 3 5 Output 12 Note In the first example, the optimal way to visit all cities and return to the capital is as follows: 1 -> 2 -> 1 -> 3 -> 4 -> 3 -> 1. The travel time for this path is 3 + 3 + 2 + 4 + 4 + 2 = 18. In the second example, the optimal route is 1 -> 2 -> 1 -> 3 -> 1, with a travel time of 1 + 1 + 5 + 5 = 12.","solution":"def minimum_travel_time(n, roads): from collections import defaultdict # Build adjacency list adjacency_list = defaultdict(list) total_travel_time = 0 for u, v, w in roads: adjacency_list[u].append((v, w)) adjacency_list[v].append((u, w)) total_travel_time += 2 * w # Each road is traversed twice return total_travel_time # Example usage: # print(minimum_travel_time(4, [(1, 2, 3), (1, 3, 2), (3, 4, 4)])) # Should output 18"},{"question":"Given a matrix represented as a 2D list of integers, return the list of its diagonals, where each diagonal starts from one of the matrix\'s left-most or bottom-most elements. Each diagonal must be returned as a separate list, starting from the top-left corner to the bottom-right corner. For example: ``` matrix_diagonals([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) ``` Should return: ``` [ [1], [4, 2], [7, 5, 3], [8, 6], [9] ] ``` Another example: ``` matrix_diagonals([ [1, 2], [3, 4], [5, 6] ]) ``` Should return: ``` [ [1], [3, 2], [5, 4], [6] ] ```","solution":"def matrix_diagonals(matrix): Returns a list of lists, each corresponding to a diagonal of the matrix. if not matrix: return [] result = [] rows = len(matrix) cols = len(matrix[0]) for start in range(rows + cols - 1): diagonal = [] if start < rows: row = start col = 0 else: row = rows - 1 col = start - (rows - 1) while row >= 0 and col < cols: diagonal.append(matrix[row][col]) row -= 1 col += 1 result.append(diagonal) return result"},{"question":"Peter is working on a customized encryption scheme for his messages. Each message is a string consisting of only lowercase alphabetical characters, and Peter wants to use an encryption algorithm that changes each character to a different character by shifting its position in the alphabet by a specific number of places. For example, if Peter chooses a shift of 3, then \'a\' becomes \'d\', \'b\' becomes \'e\', \'c\' becomes \'f\', and so on. Characters near the end of the alphabet wrap around to the beginning: \'x\' becomes \'a\', \'y\' becomes \'b\', and \'z\' becomes \'c\'. Peter wants you to write a function to encrypt his messages using this scheme. Specifically, the function should take in a message and a shift value and return the encrypted message. However, Peter also has some rules for the encryption process: 1. The shift value should always be a non-negative integer. 2. The message will always contain at least one character, and its length won\'t exceed 1000 characters. 3. The shift value can be larger than the number of letters in the alphabet (26). Input: - An integer n (0 ≤ n ≤ 10000): the shift value. - A string message (1 ≤ |message| ≤ 1000): the message to be encrypted. Output: - A single line containing the encrypted message. Examples: Input: 3 hello Output: khoor Input: 29 abc Output: def Input: 52 wxyz Output: wxyz Note: In the first example, each character in the input message is shifted by 3 places: \'h\' to \'k\', \'e\' to \'h\', \'l\' to \'o\', \'l\' to \'o\', and \'o\' to \'r\', resulting in \\"khoor\\". In the second example, the shift value of 29 is effectively the same as a shift value of 3 since 29 modulo 26 is 3, resulting in \\"def\\". In the third example, the shift value of 52 is equivalent to a shift value of 0 since 52 modulo 26 is 0, so the message remains \\"wxyz\\".","solution":"def encrypt_message(shift_value, message): Encrypts the message by shifting each character by the shift_value. Args: shift_value (int): the number of positions each character in the message should be shifted. message (str): the original message to be encrypted. Returns: str: the encrypted message. encrypted_message = [] for char in message: # Calculate the original character position in the alphabet (0-25) original_position = ord(char) - ord(\'a\') # Calculate the new position after applying the shift new_position = (original_position + shift_value) % 26 # Convert the new position back to a character new_char = chr(new_position + ord(\'a\')) encrypted_message.append(new_char) return \'\'.join(encrypted_message)"},{"question":"LeedsTech, a tech company known for its state-of-the-art storage solutions, recently introduced a new server management system. The system is designed to handle and manage incoming and outgoing data packets. Each server in the system is assigned a unique identifier and can process at most `p` packets at any given time. The system supports two types of operations: * «PING S d» (where S is an integer representing the server ID and d is an integer representing the size of the packet). This operation indicates that a packet of size `d` is being sent to server `S`. If the server can accommodate the packet (i.e., if the total number of packets currently being processed by `S` plus `d` is less than or equal to `p`), the packet is added to the server’s queue. Otherwise, the packet is dropped. * «CHECK S» (where S is an integer representing the server ID). This operation requests the current load of server `S` (i.e., the number of packets being processed by server `S`). Input The first input line contains integers `s`, `p`, and `q` (1 ≤ s ≤ 100, 1 ≤ p ≤ 1000, 1 ≤ q ≤ 2000) – the total number of servers, the maximum capacity of each server, and the number of operations to be performed respectively. The following `q` lines contain queries in the format described above. Output For each query of the «CHECK S» type, output the current load of server `S` in a separate line. If there was no such server in the system when the query was made, output «-1» without quotes. Examples Input 3 100 5 PING 1 30 PING 1 70 PING 2 50 CHECK 1 CHECK 2 Output 100 50 Input 2 50 4 PING 1 30 PING 1 25 CHECK 1 PING 2 60 Output 30","solution":"def server_management(s, p, q, operations): Manages the incoming and outgoing data packets for servers. :param s: int - Number of servers :param p: int - Max capacity of each server :param q: int - Number of operations :param operations: list of strings - List of operations to be performed :return: list of int - Results of CHECK operations servers = {i: 0 for i in range(1, s+1)} results = [] for operation in operations: parts = operation.split() if parts[0] == \\"PING\\": server_id = int(parts[1]) size = int(parts[2]) if servers.get(server_id, -1) != -1 and servers[server_id] + size <= p: servers[server_id] += size elif parts[0] == \\"CHECK\\": server_id = int(parts[1]) results.append(servers.get(server_id, -1)) return results"},{"question":"You are tasked with calculating the greenhouse gas emissions equivalent for a given automobile journey based on the fuel consumption rate and the distances of various segments. The conversion factor from fuel consumption to emissions remains constant. -----Input----- The first line of input contains an integer n (1 le n le 100), which is the number of journey segments. Each of the following n lines contains two space-separated numbers d (1 le d le 10^3) which is the distance in miles of the segment, and f (0.01 le f le 20) which is the fuel consumption rate in gallons per mile for that segment. The conversion factor from gallons to CO2 emissions is provided as a constant: 20 pounds of CO2 per gallon. -----Output----- Output a single floating-point number, rounded to two decimal places, which is the total CO2 emissions in pounds for the entire journey. -----Examples----- Sample Input: 3 100 0.05 200 0.10 50 0.20 Sample Output: 450.00","solution":"def calculate_emissions(n, segments, factor=20): Calculates the total CO2 emissions for a given journey. Parameters: n (int): number of journey segments segments (list of tuples): each tuple contains two floats, `d` (distance in miles) and `f` (fuel consumption rate in gallons per mile) factor (float): conversion factor from gallons to CO2 emissions (default is 20 pounds of CO2 per gallon) Returns: float: total CO2 emissions in pounds, rounded to two decimal places total_emissions = 0 for d, f in segments: total_emissions += d * f * factor return round(total_emissions, 2)"},{"question":"Alice loves her art collection and wants to display her paintings in a unique way. She has a collection of 10 unique paintings and she wants to hang them in a hallway that has a series of picture frames arranged in a linear sequence. The constraints are such that neighboring picture frames should exhibit paintings that are related in some way. Alice has devised three criteria to determine if two paintings can be considered related: - If two paintings are by the same artist, their relation score is 3. - If two paintings are from the same year, their relation score is 2. - If two paintings are of the same type (e.g., landscape, portrait), their relation score is 1. A valid arrangement of paintings is one where each painting in a frame has relation scores with its neighboring frames that are equal to or higher than the frame numbers. Frame numbers are designated from 0 for the first frame up to 9 for the tenth frame, and the relation score is calculated as such. Given a series of 10 paintings, determine if it\'s possible to arrange Alice\'s paintings in the frames so that the above conditions are met. -----Input----- The input will consist of a single test case. The first line will contain an integer, f (0 leq f leq 9), representing the total number of frames. If f is 0, print \\"no\\" immediately as it\'s not possible to display any paintings. The next 10 lines will contain the paintings, each having three characteristics in the format: painting name, artist name, year, type. Each characteristic will be a string of up to 15 alphanumeric characters. -----Output----- Print \\"yes\\" if Alice can arrange her paintings in the frames satisfying the relation score condition. Otherwise, print \\"no\\". -----Examples----- Sample Input: 9 MonaLisa LeonardoDaVinci 1503 Portrait StarryNight VanGogh 1889 Landscape GirlWithAPearlEarring Vermeer 1665 Portrait ThePersistenceOfMemory Dali 1931 Surrealism TheScream Munch 1893 Expressionism Guernica Picasso 1937 Mural TheNightWatch Rembrandt 1642 Portrait TheKiss Klimt 1908 Symbolism ImpressionSunrise Monet 1872 Impressionism AmericanGothic Wood 1930 Portrait Sample Output: no","solution":"from itertools import permutations def calculate_relation_score(p1, p2): score = 0 if p1[1] == p2[1]: # same artist score += 3 if p1[2] == p2[2]: # same year score += 2 if p1[3] == p2[3]: # same type score += 1 return score def can_arrange_paintings(f, paintings): if f == 0: return \\"no\\" if f == 1: return \\"yes\\" for perm in permutations(paintings): valid_arrangement = True for i in range(f - 1): score = calculate_relation_score(perm[i], perm[i + 1]) if score < (i + 1): valid_arrangement = False break if valid_arrangement: return \\"yes\\" return \\"no\\" # Read input def read_input(): f = int(input().strip()) paintings = [] for _ in range(10): painting_data = input().strip().split() paintings.append(painting_data) return f, paintings if __name__ == \\"__main__\\": f, paintings = read_input() result = can_arrange_paintings(f, paintings) print(result)"},{"question":"A palindrome is a string that reads the same forward and backward. A \\"near-palindrome\\" is similar but allows for exactly one mismatch. In other words, when reading the string forward and backward, at most one pair of characters may be different. You are given a string, and your task is to determine if it is a near-palindrome. -----Input----- The input consists of a single string s (1 ≤ |s| ≤ 10^5), where |s| is the length of the string s. The string contains only lowercase English letters. -----Output----- Print \\"YES\\" if the given string is a near-palindrome, otherwise print \\"NO\\". -----Examples----- Input abccba Output YES Input abcca Output YES Input abcbia Output NO -----Note----- In the first example \\"abccba\\" is already a palindrome. In the second example, \\"abcca\\" can become a palindrome by changing one character: \\"abca\\" -> \\"abccba\\". In the third example, it\'s not possible to make \\"abcbia\\" a palindrome by changing just one character. It would require at least two changes.","solution":"def is_near_palindrome(s): Determines if a given string is a near-palindrome. left, right = 0, len(s) - 1 mismatch_count = 0 while left < right: if s[left] != s[right]: mismatch_count += 1 if mismatch_count > 1: return \\"NO\\" left += 1 right -= 1 return \\"YES\\""},{"question":"Write a function that calculates the amount of time taken for an event in a 24-hour clock format. Example If an event starts at `14:40` and ends at `16:20`, the duration of the event is `1 hour and 40 minutes`. If an event starts at `23:50` and ends at `01:15`, the duration of the event is `1 hour and 25 minutes`. **Notes:** * The input will always be two valid times in `HH:MM` format. * Assume the start time is always earlier than the end time, but it may cross the boundary of midnight. * Return the result as a string in the format `\\"X hour(s) and Y minute(s)\\"`.","solution":"def calculate_event_duration(start_time, end_time): This function calculates the duration of an event given its start and end time in 24-hour clock format. :param start_time: str, start time in \\"HH:MM\\" format :param end_time: str, end time in \\"HH:MM\\" format :return: str, duration in \\"X hour(s) and Y minute(s)\\" format start_hour, start_minute = map(int, start_time.split(\':\')) end_hour, end_minute = map(int, end_time.split(\':\')) # Convert both times to minutes from the beginning of the day start_total_minutes = start_hour * 60 + start_minute end_total_minutes = end_hour * 60 + end_minute # Calculate the difference in minutes if end_total_minutes >= start_total_minutes: duration_minutes = end_total_minutes - start_total_minutes else: # if the end time is past midnight duration_minutes = (24 * 60 - start_total_minutes) + end_total_minutes # Convert total duration minutes to hours and minutes hours = duration_minutes // 60 minutes = duration_minutes % 60 return f\\"{hours} hour(s) and {minutes} minute(s)\\""},{"question":"Amelia loves organizing her book collection by both alphabetical order of titles and reading levels. She decides to create a bookshelf that will be divided into sections based on reading levels from 1 to M. Each section will contain books arranged in increasing alphabetical order of their titles. Given the title and reading level of each of her N books, help Amelia print the books in the order they will appear on the bookshelf. -----Constraints----- - All values in input are integers or strings containing only alphanumeric characters. - 1 ≤ N, M ≤ 50 - 1 ≤ length of each title ≤ 100 - Each reading level is an integer. - Each title is unique. -----Input----- Input is given from Standard Input in the following format: ``` N M title_1 level_1 title_2 level_2 . . title_N level_N ``` Where `title_i` is the title of the i-th book, and `level_i` is its reading level. -----Output----- Print the titles of the books in the order they will appear on the bookshelf, each title on a new line. -----Sample Input----- 5 3 HarryPotter 2 LordOfTheRings 1 TheHobbit 1 AliceInWonderland 3 MobyDick 2 -----Sample Output----- LordOfTheRings TheHobbit HarryPotter MobyDick AliceInWonderland In this example, the books with reading level 1 (LordOfTheRings, TheHobbit) come first in alphabetical order, followed by the books with reading level 2 (HarryPotter, MobyDick) in alphabetical order, and finally the book with reading level 3 (AliceInWonderland).","solution":"def organize_books(N, M, books): Organizes books by reading levels and alphabetically within each level. Args: - N: int, number of books - M: int, number of reading levels - books: list of tuples (title, level) Returns: - list of strings, titles of books in organized order # Create a dictionary to hold lists of book titles indexed by their reading levels level_dict = {i: [] for i in range(1, M+1)} # Populate the dictionary with titles for title, level in books: level_dict[level].append(title) # Sort the dictionaries by level and then sort by title alphabetically within each level sorted_books = [] for level in sorted(level_dict.keys()): sorted_books.extend(sorted(level_dict[level])) return sorted_books"},{"question":"You are given an array of integers representing heights of buildings, where the width of each building is 1. You need to find the area of the largest rectangular block formed by consecutive buildings (i.e., a subarray of the input array). For example, in the array [2, 1, 5, 6, 2, 3], the largest rectangle has an area of 10, formed by the subarray [5, 6]. Write a function that computes the area of the largest rectangle that can be formed by any subarray of the given array of building heights. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of buildings. The second line contains n integers h_1, h_2, ..., h_{n} (1 ≤ h_{i} ≤ 100) — the heights of the buildings. -----Output----- Print a single integer — the area of the largest rectangle that can be formed by consecutive buildings. -----Example----- Input 6 2 1 5 6 2 3 Output 10 Input 4 2 4 2 4 Output 8 Input 3 1 2 3 Output 4 -----Note----- In the first example, the largest rectangle\'s area is 10, formed by the subarray [5, 6]. In the second example, the largest rectangle\'s area is 8, either formed by the subarray [2, 4] or [4, 2]. In the third example, the largest rectangle\'s area is 4, formed by the subarray [2, 3].","solution":"def largest_rectangle_area(heights): Find the area of the largest rectangle formed by consecutive buildings. n = len(heights) stack = [] max_area = 0 index = 0 while index < n: if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = heights[top_of_stack] * (index if not stack else index - stack[-1] - 1) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = heights[top_of_stack] * (index if not stack else index - stack[-1] - 1) max_area = max(max_area, area) return max_area"},{"question":"Many students are participating in a coding competition. Each student participates in multiple coding sessions over several days. On each day, a student earns some points based on their performance. At the end of the competition, the student with the highest total points wins. To make the competition more interesting, the organizers have decided to give a boost to some sessions, where students earn double the points for that session. Your task is to find out the total points for each student at the end of the competition and determine the winner. Input: The input is given in the following format: ``` S D B s1 d1 p1 s2 d2 p2 ... sD dD pD boost1 boost2 ... boostB ``` The first line of input contains three integers S (number of students), D (number of sessions), and B (number of boosted sessions), separated by spaces. (1 ≤ S ≤ 1000, 1 ≤ D ≤ 10000, 0 ≤ B ≤ D) The following D lines each contain integers si, di, and pi separated by spaces, where si denotes the student ID (1 ≤ si ≤ S), di denotes the day number, and pi denotes the points earned in that session. There is no guarantee that the sessions are in any order. The next B lines each contain an integer representing the day number that is boosted. Points earned on these days will be doubled. Output: Output the ID of the student with the highest total points at the end of the competition. If there is a tie, output the ID of the student with the smallest ID. Example: Input: ``` 3 6 2 1 1 10 2 1 20 3 1 30 1 2 25 2 2 30 3 2 20 1 2 ``` Output: ``` 2 ``` Explanation: - Student 1 earns (10*2) + (25*2) = 20 + 50 = 70 points - Student 2 earns (20*2) + (30*2) = 40 + 60 = 100 points - Student 3 earns (30*2) + 20 = 60 + 20 = 80 points Thus, Student 2 has the highest total points and is the winner.","solution":"def find_competition_winner(S, D, B, sessions, boosts): points = [0] * (S + 1) # Initialize points for each student boost_days = set(boosts) # Use a set for quick lookup of boosted days for si, di, pi in sessions: if di in boost_days: points[si] += 2 * pi # Double the points if it\'s a boosted day else: points[si] += pi max_points = max(points) # Find the student with the highest points and smallest ID in case of a tie for student_id in range(1, S + 1): if points[student_id] == max_points: return student_id"},{"question":"Given an array of N integers, you are supposed to perform Q queries. There are two types of queries: 1 L R x - Add the integer x to each element from index L to R (inclusive). 2 L R - Find and print the maximum value in the array from index L to R (inclusive). Each query should be processed efficiently to handle large inputs. INPUT: The first line of the input contains two integers N and Q, denoting the number of elements in the array and the number of queries respectively. The next line contains N space-separated integers representing the array. Each of the following Q lines contains a query. If the query is of the first type, it will contain the integer 1 followed by integers L, R, and x. If the query is of the second type, it will contain the integer 2 followed by integers L and R. OUTPUT: For each query of the second type, output the maximum value in the specified range. CONSTRAINTS: 1 ≤ N, Q ≤ 100,000 1 ≤ array element, x ≤ 1,000 1 ≤ L, R ≤ N SAMPLE INPUT: 5 4 1 3 5 7 9 2 1 3 1 2 4 2 2 2 5 2 1 5 SAMPLE OUTPUT: 5 9 9 Explanation: For the first query of the second type, the maximum value in the range 1 to 3 in the original array is 5. After performing the query of the first type, the array becomes [1, 5, 7, 9, 9]. For the second query of the second type, the maximum value in the range 2 to 5 in the updated array is 9. For the third query of the second type, the maximum value in the range 1 to 5 in the updated array is 9.","solution":"def process_queries(arr, queries): Process the given array with the set of queries. Parameters: arr (List[int]): The array of integers queries (List[List[int]]): The list of queries to be processed Returns: List[int]: The results of the maximum value queries from collections import defaultdict # Step 1: Prepare to efficiently store the range increments. increment_map = defaultdict(int) result = [] # Process each query for query in queries: if query[0] == 1: # Add x to range L to R (1-indexed) _, L, R, x = query increment_map[L - 1] += x if R < len(arr): increment_map[R] -= x elif query[0] == 2: # Find the maximum in range L to R (1-indexed) _, L, R = query # Apply current increments current_increment = 0 max_value = float(\'-inf\') for i in range(L - 1, R): current_increment += increment_map[i] max_value = max(max_value, arr[i] + current_increment) result.append(max_value) return result # Wrapper function to handle input and output def run(input_data): input_lines = input_data.strip().split(\'n\') first_line = input_lines[0].split() N = int(first_line[0]) Q = int(first_line[1]) arr = list(map(int, input_lines[1].split())) queries = [list(map(int, line.split())) for line in input_lines[2:2+Q]] # Process the queries and produce results results = process_queries(arr, queries) return \'n\'.join(map(str, results))"},{"question":"Ada\'s library is organizing a book signing event with multiple authors. Each author has a number of books they will sign, and Ada needs to determine the optimal scheduling to maximize the number of books signed by fans. There are n authors and each author i has Bi books. The authors will sign books simultaneously for one hour, and each can sign only one book at a time. Ada wants to determine the maximum number of books that can be signed within one hour given that fans can move during the event and get books signed by different authors. Thus, the number of fans is practically unlimited for this simplified problem perspective. Given a sequence of multiple datasets, each dataset represents a different event scenario. For each event, output the total number of books signed by fans. The number of authors n is 1 or more and 50,000 or less. The number of books Bi an author can sign is 0 or more and 100,000 or less. input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line containing a zero. Each dataset is as follows: 1st line: n (integer; half-width space delimited) 2nd line: Book sign counts B1 B2 ... Bn (all integers; half-width space delimited) The number of datasets does not exceed 50. output Outputs the total number of books signed for each dataset on one line. Example Input 5 3 1 4 1 5 3 0 0 7 4 2 2 1 0 1 5 0 Output 14 7 5 5","solution":"def compute_books_signed(datasets): Computes the total number of books signed for each dataset. Parameters: datasets (list of tuples): Each tuple contains the number of authors and a list of the number of books each author can sign. Returns: list: Total number of books signed for each dataset. results = [] for n, books in datasets: results.append(sum(books)) return results def parse_input(input_data): Parses input data to extract the datasets. Parameters: input_data (str): The input data as a single string. Returns: list: Parsed list of datasets where each dataset is a tuple. lines = input_data.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break books = list(map(int, lines[i+1].split())) datasets.append((n, books)) i += 2 return datasets"},{"question":"Problem Statement: You have obtained a sequence of N positive integers, where 1 leq N leq 10^5 . Your task is to transform this sequence into a permutation of integers from 1 to N by performing the minimum number of operations. In each operation, you can select any single integer in the sequence and replace it with another integer. Each integer from 1 to N must appear exactly once in the resulting sequence. Write a program that reads a sequence of N integers and outputs the minimum number of operations required to transform the sequence into a permutation of integers from 1 to N . # Input - The first line contains a single integer N , representing the length of the sequence. - The second line contains N integers a_1, a_2, ldots, a_N representing the sequence. # Output Output a single integer, representing the minimum number of operations required to transform the sequence into a permutation of integers from 1 to N . # Constraints - 1 leq N leq 10^5 - 1 leq a_i leq 10^5 for all 1 leq i leq N # Example Input ``` 5 4 2 2 1 5 ``` Output ``` 1 ``` Input ``` 4 4 3 2 1 ``` Output ``` 0 ``` # Explanation In the first example: - You can replace one of the `2`s with `3` to obtain the permutation `[4, 2, 3, 1, 5]`. In the second example: - The sequence already matches a permutation from `1` to `N`. Therefore, no operations are required.","solution":"def minimum_operations_to_permutation(N, sequence): Returns the minimum number of operations required to transform the given sequence into a permutation of integers from 1 to N. needed = set(range(1, N+1)) # The set of numbers that should be in the sequence current = set(sequence) # The set of numbers currently in the sequence missing = needed - current # The set of numbers that are missing in the sequence # The number of missing numbers is the number of changes we need to make return len(missing)"},{"question":"Introduction A rotational cipher (also known as Caesar cipher) is a simple encryption technique that replaces each letter in the plaintext with a letter a fixed number of positions down the alphabet. For example, with a shift of 3, `A` would be replaced by `D`, `B` would become `E`, and so on. # Task Write a function that accepts a string `text` and an integer `shift`, and returns the encrypted string using the Rotational cipher technique. Ensure that the function maintains the case of the letters (uppercase remains uppercase, and lowercase remains lowercase), and that the function also correctly handles non-letter characters (by leaving them unchanged). # Examples ```python rotational_cipher(\\"Apply Rotation\\", 3) # --> \\"Dssob Wrdwfwlrq\\" rotational_cipher(\\"Hello, World!\\", 5) # --> \\"Mjqqt, Btwqi!\\" rotational_cipher(\\"Python 3.9\\", 13) # --> \\"Clguba 3.9\\" ``` Input / Output: * The `text` is a string that may contain letters (both uppercase and lowercase), digits, punctuation marks, and spaces. * The `shift` is a non-negative integer, which indicates the number of positions each letter in the input text should be shifted by in the alphabet. # Constraints * `0 <= shift <= 26`","solution":"def rotational_cipher(text, shift): Encrypts the input text using a rotational (Caesar) cipher with the specified shift. Args: text (str): The input text to be encrypted. shift (int): The number of positions each letter in the text should be shifted by. Returns: str: The encrypted text. encrypted_text = [] for char in text: if char.isalpha(): ascii_offset = ord(\'A\') if char.isupper() else ord(\'a\') encrypted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset) encrypted_text.append(encrypted_char) else: encrypted_text.append(char) return \\"\\".join(encrypted_text)"},{"question":"You are given an n x m grid with each cell initially holding the value 0. You can perform a series of operations on this grid. Each operation consists of selecting a subgrid specified by its top-left and bottom-right corners and increasing the value of all cells in this subgrid by 1. The subgrid corners are specified in a 1-based index format. Your task is to determine the final grid after performing a series of operations. Input: The first line contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 1000) representing the number of rows, columns, and the number of operations respectively. The following k lines each contain four integers x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ n; 1 ≤ y1 ≤ y2 ≤ m) which specify the top-left and bottom-right corners of the subgrid for each operation. Output: Print the final grid. Each of the n lines should contain m integers separated by a space, representing the values of the grid cells. Example: Input: 3 3 2 1 1 2 2 2 2 3 3 Output: 1 1 0 1 2 1 0 1 1 Explanation: - After the first operation, the grid becomes: 1 1 0 1 1 0 0 0 0 - After the second operation, the grid becomes: 1 1 0 1 2 1 0 1 1","solution":"def apply_operations(n, m, k, operations): # Initialize the grid with zeroes grid = [[0] * m for _ in range(n)] # Apply each operation to the grid for op in operations: x1, y1, x2, y2 = op for i in range(x1-1, x2): for j in range(y1-1, y2): grid[i][j] += 1 return grid"},{"question":"Alice is organizing a cooking workshop with n participants, arranged in a circle, each numbered from 1 to n. Initially, all participants have zero cooking skills. Alice, who is also participating, has all the necessary cooking skills and is positioned at index k (1 ≤ k ≤ n) in the circle. Each participant can transfer one unit of their cooking skills to a neighboring participant (either left or right) in one hour. At any given hour, a participant can either teach a unit of cooking skill to one of their neighbors or learn a unit of cooking skill from one of their neighbors, but not both. If a participant x is teaching a skill unit to a participant y at a certain hour, then y must be learning from x at that same hour. Your task is to determine the minimum number of hours required for all participants to have all the cooking skills. ------Input------ - The input starts with an integer T (1 ≤ T ≤ 100), which denotes the number of test cases. - Each of the following T lines contains two integers n and k, the number of participants and Alice\'s position in the circle respectively. ------Output------ - For each test case, output a single integer, which is the minimum number of hours required. ------Constraints------ - 1 ≤ n ≤ 100 - 1 ≤ k ≤ n ------Example------ Input: 2 4 1 5 3 Output: 3 3 ------Explanation------ In the first example, the participants are in positions {1, 2, 3, 4} where Alice is at position 1: 1. In the 1st hour, Alice teaches one skill unit to participant 2. 2. In the 2nd hour, participant 2 teaches one skill unit to participant 3. 3. In the 3rd hour, participant 3 teaches one skill unit to participant 4. So, it takes 3 hours for all the participants to have all the cooking skills. In the second example, the participants are in positions {1, 2, 3, 4, 5} where Alice is at position 3: 1. In the 1st hour, Alice teaches one skill unit to participant 2 and participant 4. 2. In the 2nd hour, participant 2 teaches one skill unit to participant 1, and participant 4 teaches one skill unit to participant 5. So, it takes 3 hours for all the participants to have all the cooking skills.","solution":"def minimum_hours_to_transfer_skills(T, test_cases): results = [] for n, k in test_cases: left_distance = k - 1 right_distance = n - k max_distance = max(left_distance, right_distance) results.append(max_distance) return results"},{"question":"Given a string that consists of lowercase letters and possibly spaces, determine the length of the longest substring without repeating characters. Write a function that takes a single string input and returns an integer representing the length of the longest substring without repeating characters. ----- Sample Input 1 ----- \\"abcabcbb\\" ----- Sample Output 1 ----- 3 ----- Sample Input 2 ----- \\"bbbbb\\" ----- Sample Output 2 ----- 1 ----- Sample Input 3 ----- \\"pwwkew\\" ----- Sample Output 3 ----- 3 ----- Sample Input 4 ----- \\"\\" ----- Sample Output 4 ----- 0","solution":"def longest_substring_without_repeating_characters(s): Returns the length of the longest substring without repeating characters. char_index_map = {} max_length = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"You are given a binary string consisting of `0`s and `1`s only. You can perform the following operation any number of times: select an arbitrary subsequence of the string, flip all bits in the subsequence (i.e., change every `0` to `1` and every `1` to `0`), and then reverse the subsequence. Find the minimum number of operations required to transform the given binary string into a string consisting of only `1`s. -----Input----- The first line of input contains a single integer `t` (1 leq t leq 10^4) — the number of test cases. The first line of each test case contains a single binary string `s` (1 leq |s| leq 2 cdot 10^5), the binary string for that test case. The sum of the lengths of all strings in a single input does not exceed 2 cdot 10^5. -----Output----- For each test case, print a single integer — the minimum number of operations needed to form a string consisting of only `1`s. -----Examples----- Input 4 0110 1001 1111 0000 Output 1 1 0 1 -----Note----- In the first test case, you can select the subsequence `0110`, flip all bits to get `1001`, and then reverse it to form `1001`. After this operation, the string will consist entirely of `1`s. In the second test case, you can select the subsequence `1001`, flip all bits to get `0110`, and then reverse it to form `0110`. After this operation, the string will consist entirely of `1`s. In the third test case, the string is already composed entirely of `1`s, so no operations are required. In the fourth test case, you can select the subsequence `0000`, flip all bits to get `1111`, and reverse it to form `1111`. After this operation, the string will consist entirely of `1`s.","solution":"def min_operations_to_all_ones(t, cases): Determines the minimum number of operations needed to convert binary strings to strings of only \'1\'s. Parameters: t (int): The number of test cases. cases (list of str): List of binary strings. Returns: list of int: List of minimum operations for each test case. results = [] for s in cases: if \'0\' not in s: # Already all ones results.append(0) elif \'1\' not in s: # All zeros need exactly one operation results.append(1) else: # If there is at least one \'0\' and one \'1\' # Only 1 operation is required to flip and reverse the entire string once results.append(1) return results"},{"question":"You are a field biologist observing the movement of a rare species of bird within a forest. The forest is represented as a grid of cells, where each cell can either be an empty cell `.` or an obstacle `#` that the bird cannot pass through. The bird can move in one of four directions: up, down, left, or right, to an adjacent cell. Your task is to determine the minimum number of moves the bird needs to make to reach its destination. If there are multiple possible paths, find the one that requires the fewest moves. If it is not possible for the bird to reach the destination, return `-1`. # Inputs: - An integer `N` representing the number of rows in the forest grid. - An integer `M` representing the number of columns in the forest grid. - A list of strings, where each string is of length `M` representing a row in the forest grid. Each character in the string is either `.` (an empty cell) or `#` (an obstacle). - Two integers, `S_row` and `S_col`, representing the starting cell coordinates of the bird (0-indexed). - Two integers, `D_row` and `D_col`, representing the destination cell coordinates (0-indexed). # Outputs: - A single integer representing the minimum number of moves required for the bird to reach the destination. If the destination cannot be reached, return `-1`. # Constraints: - `2 <= N, M <= 100` - `0 <= S_row, S_col, D_row, D_col < N, M` - The starting and destination cells will always be empty cells. # Example 1: Input: ``` 5 5 ..#.. .#.#. .#.#. .#... ..... 0 0 4 4 ``` Output: ``` 8 ``` # Example 2: Input: ``` 5 5 ..#.. .#.#. # .#... ..... 0 0 4 4 ``` Output: ``` -1 ``` In this example, the bird cannot reach the destination as the path is completely blocked by obstacles.","solution":"from collections import deque def min_moves(N, M, forest, S_row, S_col, D_row, D_col): # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the queue with the start position and moves count 0 queue = deque([(S_row, S_col, 0)]) # Initialize the visited set with the start position visited = set((S_row, S_col)) while queue: row, col, moves = queue.popleft() # If we\'ve reached the destination, return the moves count if row == D_row and col == D_col: return moves # Check all possible directions for dr, dc in directions: newRow, newCol = row + dr, col + dc # Check if the new position is within bounds and not visited or an obstacle if 0 <= newRow < N and 0 <= newCol < M and (newRow, newCol) not in visited and forest[newRow][newCol] == \'.\': queue.append((newRow, newCol, moves + 1)) visited.add((newRow, newCol)) # If we\'ve exhausted all possibilities and haven\'t reached the destination, return -1 return -1"},{"question":"A game involves jumping between stones in a river. The stones are placed in a row and are numbered from 0 to n (inclusive) from left to right. Initially, you are on stone 0, and you want to reach stone n. You can jump to the right from your current stone to any stone with a higher number, but you are limited by a maximum jump distance k. Your task is to determine the minimum number of jumps needed to reach stone n or determine if it\'s impossible to reach stone n given the constraints. Input The first line contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ n) — the number of stones and the maximum jump distance. Output Print a single integer — the minimum number of jumps needed to reach stone n from stone 0. If it\'s impossible to reach stone n, print -1. Examples Input 5 2 Output 3 Input 10 3 Output 4 Input 6 2 Output 3","solution":"def min_jumps(n, k): Returns the minimum number of jumps needed to reach stone n from stone 0 given the maximum jump distance k. If it\'s impossible to reach stone n, returns -1. if k >= n: return 1 if n > 0 else 0 # Otherwise, we need to calculate the minimum jumps jumps = n // k if n % k != 0: jumps += 1 return jumps"},{"question":"The game of Nim involves a certain amount of stones arranged in heaps, where two players take turns removing one or more stones from a single heap. The player to remove the last stone wins. In this problem, you will determine the winner of a variation of Nim where each player can only remove a prime number of stones greater than 1 from a single heap during their turn. Given the initial configuration of heaps, you need to determine the winner assuming both players play optimally. Input: - The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. - Each test case starts with an integer n (1 ≤ n ≤ 10^6), the number of heaps. - The second line contains n integers a_i (1 ≤ a_i ≤ 10^6), the number of stones in each heap. Output: - For each test case, output \\"First\\" if the first player has a winning strategy, otherwise output \\"Second\\". Example: Input: 3 1 2 2 2 5 3 1 4 6 Output: First First Second Explanation: 1. In the first test case, the first player can take 2 stones, winning the game. 2. In the second test case, the first player can take all 2 stones from the first heap or 5 stones from the second heap, winning the game. 3. In the third test case, the first player cannot force a win; hence, the second player wins.","solution":"from sympy import isprime def can_first_player_win(n, heaps): for stones in heaps: if stones > 1 and isprime(stones): return \\"First\\" return \\"Second\\" def determine_winner(t, test_cases): results = [] for i in range(t): n, heaps = test_cases[i] results.append(can_first_player_win(n, heaps)) return results"},{"question":"Devin is fascinated with strings and patterns. He considers a string beautiful if it contains all the distinct letters in a given set exactly once, without any repetitions. The order of letters in the beautiful string can vary. For example, if the distinct set of letters is {a, b, c}, then the strings \\"abc\\", \\"bac\\", \\"cab\\" are all beautiful, but \\"aabc\\", \\"abb\\", and \\"cabd\\" are not. Your task is to determine whether a given string is beautiful based on the specified set of distinct letters. Input The first line contains a single integer n (1 ≤ n ≤ 26) — the number of distinct letters in the set. The second line contains n distinct lowercase English letters which form the set. The third line contains a string s (1 ≤ |s| ≤ 100) — the string to be checked for whether it is beautiful. Output Print \\"YES\\" if the string is beautiful, otherwise print \\"NO\\". Examples Input 3 a b c abc Output YES Input 3 a b c aabbcc Output NO Note In the first example, the string \\"abc\\" matches the set of distinct letters {a, b, c} exactly once, thus it is beautiful. In the second example, the string \\"aabbcc\\" contains repeated letters, thus it is not beautiful.","solution":"def is_beautiful_string(n, distinct_letters, s): Determines whether the given string is beautiful based on the set of distinct letters. :param n: Integer representing the number of distinct letters in the set. :param distinct_letters: List of distinct lowercase English letters. :param s: The string to be checked for beauty. :return: \\"YES\\" if the string is beautiful, otherwise \\"NO\\". # Create a set from the list of distinct letters distinct_set = set(distinct_letters) # Check if the length of s matches the number of distinct letters if len(s) != n: return \\"NO\\" # Create a set from the string s s_set = set(s) # Check if the set of characters in s matches the distinct set and the length of string is n if s_set == distinct_set and len(s_set) == n: return \\"YES\\" else: return \\"NO\\""},{"question":"There is a square grid of size n × n, where each cell of the grid can be either traversable or blocked. Alice wants to navigate from the top-left cell (1, 1) to the bottom-right cell (n, n) using only right and down moves. She can also use teleportation gadgets, which allow her to move from one traversable cell directly to another traversable cell. Alice has a limited number of teleportation gadgets available, and she wants to know if she can reach the bottom-right cell with the given number of teleportation gadgets. If she can reach the bottom-right cell using the least amount of teleportation gadgets possible, she also wants to know the minimum number of teleportation gadgets required. Input: - The first line of input contains two integers, n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ 10), where n is the size of the grid, and k is the number of teleportation gadgets available. - The next n lines each contain n characters (\'0\' or \'1\'), where \'0\' means the cell is traversable and \'1\' means the cell is blocked. Output: - If Alice can reach the bottom-right cell, output \\"YES\\" followed by the minimum number of teleportation gadgets required. If she cannot reach the bottom-right cell, output \\"NO\\". Examples: Input: 5 1 00000 01110 00000 01110 00000 Output: YES 1 Input: 4 0 0100 0110 0000 0111 Output: NO Note: In the first example, Alice can navigate normally until she reaches the blocked cells in the 2nd row. She can then use her teleportation gadget to jump to a traversable cell (such as (3, 5) or (5, 1)), and then continue navigating to the bottom-right cell. In the second example, even with zero teleportation gadgets, the only possible path is blocked, so it is not possible for Alice to reach the bottom-right cell.","solution":"from collections import deque def min_teleportation_gadgets(n, k, grid): def neighbors(x, y): for nx, ny in ((x+1, y), (x, y+1), (x-1, y), (x, y-1)): if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == \'0\': yield nx, ny start = (0, 0) end = (n-1, n-1) if grid[0][0] == \'1\' or grid[n-1][n-1] == \'1\': return \\"NO\\" # BFS (Breadth-First Search) for shortest path queue = deque([(start, 0, 0)]) # (current position, teleportations used, gadgets count) visited = [[float(\'inf\')] * n for _ in range(n)] visited[0][0] = 0 while queue: (x, y), teleports, gadgets = queue.popleft() if (x, y) == end: return f\\"YES {teleports}\\" # Check normal moves for nx, ny in neighbors(x, y): if teleports < visited[nx][ny]: visited[nx][ny] = teleports queue.append(((nx, ny), teleports, gadgets)) # Use available teleportation gadgets if gadgets < k: for i in range(n): for j in range(n): if grid[i][j] == \'0\' and visited[i][j] > teleports + 1: queue.append(((i, j), teleports + 1, gadgets + 1)) visited[i][j] = teleports + 1 return \\"NO\\" def alice_can_reach(n, k, grid): return min_teleportation_gadgets(n, k, grid)"},{"question":"A small village has a rectangular plant farm with dimensions n x m. The farmer wants to cultivate a new type of crop, and for that he needs exactly k plots of land within this rectangle. His only constraint is that these k plots must be positioned in such a way that they form a perfect square area (i.e. the side length of the square is an integer). The farmer would like to know how many perfect square areas can be formed using exactly k plots of land within the farm. -----Input----- The first line contains three integers n, m, and k (1 le n, m le 10^3, 1 le k le n times m) — the dimensions of the plant farm and the number of plots needed for the perfect square area, respectively. -----Output----- Output a single integer — the number of ways to form a perfect square area using exactly k plots of land within the given n x m farm. -----Example----- Input 5 4 9 Output 6 -----Note----- In the example, the required area for the perfect square is 9 (since sqrt{9}=3). Thus, possible 3x3 square areas can be formed by selecting a 3x3 grid at different starting positions within the 5x4 farm. The six starting positions for a 3x3 area in a 5x4 grid are: (1,1), (1,2) (2,1), (2,2) (3,1), (3,2)","solution":"def count_perfect_squares(n, m, k): Returns the number of perfect square areas that can be formed using exactly k plots of land within the n x m farm. side_length = int(k**0.5) if side_length * side_length != k: return 0 count = 0 for i in range(n - side_length + 1): for j in range(m - side_length + 1): count += 1 return count"},{"question":"You are given an array of integers A of length n and an integer x. Your task is to select a subset of elements from A such that their sum is maximized and does not exceed x. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines. - The first line of each test case contains two space-separated integers n and x — the number of elements in the array and the target sum, respectively. - The second line contains n space-separated integers, representing the elements of the array A. ------ Output Format ------ For each test case, output on a new line the maximum possible sum of any subset of elements from A that does not exceed x. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ n ≤ 100 1 ≤ x ≤ 10^5 1 ≤ A_i ≤ 10^5 ------ Sample Input 1 ------ 3 5 10 1 2 3 4 5 3 7 2 2 6 4 100 20 30 50 70 ------ Sample Output 1 ------ 10 6 100 ------ Explanation 1 ------ Test case 1: The subset {1, 2, 3, 4} has the sum 10, which is the maximum sum that does not exceed 10. Test case 2: The subset {2, 2} has the sum 4, and the subset {2, 6} has the sum 6. The maximum subset sum that does not exceed 7 is 6. Test case 3: The subset {20, 30, 50} has the sum 100, which is the maximum sum that does not exceed 100.","solution":"def max_subset_sum_under_x(T, test_cases): results = [] for i in range(T): n, x = test_cases[i][\'n\'], test_cases[i][\'x\'] A = test_cases[i][\'A\'] # Use dynamic programming (similar to knapsack problem) to solve the problem dp = [0] * (x + 1) for a in A: for j in range(x, a - 1, -1): dp[j] = max(dp[j], dp[j - a] + a) results.append(dp[x]) return results"},{"question":"Rita loves collecting rare gems. She has N different types of gems, and each type has a distinct value. Rita wants to maximize her total collection value by selecting gems over a period of T days. On each day, Rita can select one type of gem to add to her collection, but she must start from the least valued gem and can only choose the next higher valued gem each subsequent day. Given the values of each type of gem, determine the maximum total value Rita can collect over T days. INPUT First line contains an integer T. The second line contains a single integer N. The third line contains N space-separated integers representing the value of each type of gem. OUTPUT For each test case, output the maximum total value Rita can collect over T days. Constraints 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 1 ≤ value of gem ≤ 10^9 SAMPLE INPUT 4 5 1 2 3 4 5 3 4 5 2 6 8 1 5 3 2 7 2 100 200 300 400 SAMPLE OUTPUT 15 9 26 700 Explanation In the first test case, Rita can select the gems in the following order: 1, 2, 3, 4, 5, giving a total value of 15. In the second test case, Rita starts with gem valued 2, then 4, then 5, for a total value of 2+4+5=11. In the third test case, Rita starts with gem valued 1, then 2, 3, 5, 7, and 8, for a total value of 1+2+3+5+7+8=26. In the fourth test case, Rita starts with gem valued 100, then 200, giving a total value of 100+200=300.","solution":"def maximum_collection_value(T, N, gem_values): Determines the maximum total value Rita can collect over T days given N different types of gems. Parameters: T (int): Number of days Rita can collect gems. N (int): Number of different types of gems. gem_values (list): List of integers representing values of each type of gem. Returns: int: Maximum total value Rita can collect over T days. # Sort the gem values in ascending order gem_values.sort() # Take the first T values from the sorted list (or as many as available if T > N) max_days_to_collect = min(T, N) # Calculate the sum of the selected gems return sum(gem_values[:max_days_to_collect])"},{"question":"Given an integer array, find the subarray with the maximum sum. A subarray is defined as a contiguous part of the array. -----Input:----- - An integer array `arr` of length `n`. -----Output:----- Print the maximum sum of a subarray. -----Constraints----- - 1 leq n leq 10^5 - -10^4 leq arr[i] leq 10^4 -----Sample Input:----- [-2,1,-3,4,-1,2,1,-5,4] -----Sample Output:----- 6 (The subarray [4,-1,2,1] has the largest sum = 6)","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray in the given array. if not arr: return 0 current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are working on a grid-based game where a player can move up, down, left, or right. The grid consists of cells that can either be empty or contain an obstacle. The player starts at the top-left corner of the grid and aims to reach the bottom-right corner. The grid is represented as a 2D binary list where `0` signifies an empty cell and `1` signifies a cell with an obstacle. The player can only move to an adjacent empty cell and cannot move diagonally. Write a function `shortest_path` that takes a 2D list `grid` as input and returns the length of the shortest path from the top-left corner to the bottom-right corner. If there is no valid path, the function should return `-1`. # Examples: `shortest_path([[0, 0, 1], [0, 1, 0], [0, 0, 0]])` should return `4` `shortest_path([[0, 1], [1, 0]])` should return `-1` # Notes: - The starting point (top-left corner) and the destination (bottom-right corner) are always empty cells. - If the returned path length is `n`, it means the player makes `n` steps to reach the destination. - Movement options are restricted to up, down, left, and right; diagonal movements are not allowed.","solution":"from collections import deque def shortest_path(grid): if not grid or not grid[0]: return -1 rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] if grid[0][0] == 1 or grid[rows - 1][cols - 1] == 1: return -1 queue = deque([(0, 0)]) visited = set((0, 0)) path_length = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if x == rows - 1 and y == cols - 1: return path_length for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) path_length += 1 return -1"},{"question":"Given a list of non-negative integers representing the heights of blocks, where each block has a width of 1, determine the water trapped after it rains. The blocks are represented by array `heights` where the height of each block is given, and the width between each block is uniform. # Fully Worked Example Consider the following example: ``` heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] ``` Visualizing the `heights` array: ``` □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ 0 1 0 2 1 0 1 3 2 1 2 1 ``` Here, 6 units of water are trapped between the blocks. # Function Signature Implement a function with the following signature: ```python def trap(heights: List[int]) -> int: ``` # Input - `heights`: List of non-negative integers representing the height of blocks. # Output - Return an integer representing the total units of trapped water. # Constraints - The `heights` list will contain between 0 and 10<sup>5</sup> elements. - Each integer in the `heights` list will be in the range of 0 to 10<sup>4</sup>. # Additional Examples Example 1: ``` Input: heights = [4, 2, 0, 3, 2, 5] Output: 9 Explanation: □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ □ 4 2 0 3 2 5 ``` 9 units of water are trapped between the blocks. Example 2: ``` Input: heights = [0, 0, 0, 0] Output: 0 Explanation: 0 units of water are trapped between the blocks. ``` # Note The function should be efficient with respect to time and space complexity.","solution":"from typing import List def trap(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left_max, right_max = [0] * n, [0] * n water_trapped = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Given a string, return the length of the longest substring that contains at most two distinct characters. For example, given the input string \\"eceba\\", the longest substring with at most two distinct characters is \\"ece\\", which has a length of 3. If the input string is \\"bbbbccc\\", the longest substring with at most two distinct characters is \\"bbbbccc\\", with a length of 7. If there are no characters or the input string is empty, the function should return 0.","solution":"def longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. if not s: return 0 max_len = 0 start = 0 char_map = {} for end, char in enumerate(s): char_map[char] = char_map.get(char, 0) + 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"# Task Given an array of integers, write a function to find the length of the longest subarray where all its elements are distinct. Your task is to implement a function that finds and returns the length of the longest subarray containing distinct elements. # Example For `arr = [1, 2, 1, 3, 4, 2, 3]`, the result should be `4` because the longest subarray with distinct elements is `[1, 3, 4, 2]`. # Input/Output - `[input]` integer array `arr` An array of integers where `0 < arr.length <= 1000` and each integer `0 <= arr[i] <= 1000`. - `[output]` an integer Length of the longest subarray containing distinct elements.","solution":"def longest_distinct_subarray(arr): Returns the length of the longest subarray with all distinct elements. :param arr: List of integers :return: Integer length of the longest subarray if not arr: return 0 max_length = 0 start = 0 seen_elements = {} for end in range(len(arr)): if arr[end] in seen_elements: start = max(start, seen_elements[arr[end]] + 1) seen_elements[arr[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Ben loves palindromic numbers and spends a lot of time thinking about them. A palindromic number reads the same forward and backward. For example, 121, 4884, and 12321 are palindromic numbers. Ben has a special number x, and he wants to determine the smallest number of digits that can be added to either the beginning or the end of x to make it a palindromic number. Write a program to help Ben achieve this. ``` @param {Number} x - a positive integer 0 ≤ x ≤ 100,000 @return {Integer} the minimum number of digits required to be added to x to make it a palindromic number ``` Examples : ``` 123 => 2 4884 => 0 567 => 2 ``` Explanation: - For the number 123, adding \'21\' to make it 12321 creates a palindrome. - The number 4884 is already a palindrome, so no digits need to be added. - For the number 567, adding \'765\' at the end makes it 567765, which is a palindrome. Alternatively, adding \'65\' at the beginning to make it 6567 also works, but \'765\' achieves the palindrome with the addition of 2 digits instead of 3.","solution":"def min_digits_to_make_palindrome(x): Returns the minimum number of digits required to be added to x to make it a palindromic number. str_x = str(x) if str_x == str_x[::-1]: return 0 for i in range(len(str_x)): if str_x[i:] == str_x[i:][::-1]: return i return len(str_x) - 1"},{"question":"Write a function that receives an array of integers and returns a new array consisting of the cumulative sums of the elements in the original array. For example, given the input `[1, 2, 3, 4]`, your function should return `[1, 3, 6, 10]`. Ensure to handle edge cases such as an empty array, which should return an empty array. Also, consider efficiency in your solution. Function Signature: `def cumulative_sum(nums: List[int]) -> List[int]:`","solution":"from typing import List def cumulative_sum(nums: List[int]) -> List[int]: Returns a new array consisting of the cumulative sums of the elements in the original array. result = [] current_sum = 0 for num in nums: current_sum += num result.append(current_sum) return result"},{"question":"Given a sorted array containing both negative and positive integers, the task is to return a new array containing the squares of each number from the input array in ascending order. Example 1: Input: arr = [-4, -1, 0, 3, 10] Output: [0, 1, 9, 16, 100] Explanation: The squares of the elements are [16, 1, 0, 9, 100]. After sorting them in ascending order, the array becomes [0, 1, 9, 16, 100]. Example 2: Input: arr = [-7, -3, 2, 3, 11] Output: [4, 9, 9, 49, 121] Explanation: The squares of the elements are [49, 9, 4, 9, 121]. After sorting them in ascending order, the array becomes [4, 9, 9, 49, 121]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sortedSquares() which takes a list of integers \'arr\' as input parameter and returns the list of squared elements in ascending order. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: - 1 <= len(arr) <= 10^4 - -10^4 <= arr[i] <= 10^4","solution":"def sortedSquares(arr): Given a sorted array containing both negative and positive integers, return a new array containing the squares of each number from the input array in ascending order. Args: arr (list of ints): A sorted list containing both negative and positive integers. Returns: list of ints: A list containing the squares of each number from the input array in ascending order. n = len(arr) result = [0] * n left, right = 0, n - 1 index = n - 1 while left <= right: left_val, right_val = arr[left] ** 2, arr[right] ** 2 if left_val > right_val: result[index] = left_val left += 1 else: result[index] = right_val right -= 1 index -= 1 return result"},{"question":"You are writing software to manage the inventory of a bookstore. Each book has a unique ISBN number, a title, a quantity in stock, and a price. The bookstore keeps track of their entire inventory in a list. Your task is to write a function to help the bookstore determine which book has the highest value in stock (quantity * price). You will be given a list of dictionaries, where each dictionary represents a book with the following structure: ```python { \'isbn\': \'123-456-789\', \'title\': \'Some Book Title\', \'quantity\': 4, \'price\': 19.99 } ``` Write a function `max_value_book` that takes a list of books as its parameter and returns the title of the book with the highest value in stock. If the list is empty, return an empty string. If there are multiple books with the same highest value, return the title of the first one that appears in the list. # Function Signature ```python def max_value_book(books: list) -> str: pass ``` # Example ```python books = [ {\'isbn\': \'123-456-789\', \'title\': \'Book One\', \'quantity\': 4, \'price\': 19.99}, {\'isbn\': \'987-654-321\', \'title\': \'Book Two\', \'quantity\': 6, \'price\': 25.50}, {\'isbn\': \'111-222-333\', \'title\': \'Book Three\', \'quantity\': 5, \'price\': 22.00} ] print(max_value_book(books)) # Output: \'Book Two\' ``` In the example above, the value of each book in stock is: - \'Book One\': 4 * 19.99 = 79.96 - \'Book Two\': 6 * 25.50 = 153.00 - \'Book Three\': 5 * 22.00 = 110.00 So the book with the highest value in stock is \'Book Two\' with a value of 153.00. The function returns the title \'Book Two\'.","solution":"def max_value_book(books: list) -> str: max_value = 0 title_of_max_value_book = \\"\\" for book in books: current_value = book[\'quantity\'] * book[\'price\'] if current_value > max_value: max_value = current_value title_of_max_value_book = book[\'title\'] return title_of_max_value_book"},{"question":"The Kingdom of Chefland has a unique system for evaluating arithmetic expression strings that include variables, integers, addition, and multiplication. An expression string `exp` consists of terms represented by single lowercase letters representing variables (each letter from \'a\' to \'z\') or integers, \'+\' operators for addition, and \'*\' operators for multiplication. There can be any number of whitespace characters between terms and operators. Given a sequence of variable values, Chef needs to evaluate the expression using those values and return the result. Note the following rules: 1. Variables are assigned values in the order they first appear in `exp` from a list of given integers. 2. Assume the addition (\'+\') and multiplication (\'*\') operations follow algebraic precedence rules, i.e., multiplication has higher precedence than addition. 3. Parentheses are not considered in this problem. Write a function to evaluate the expression string given the list of variable values. Function signature: ```python def evaluate_expression(exp: str, values: List[int]) -> int: ``` # Input - A string `exp` representing the expression (1 ≤ len(exp) ≤ 1000) containing: - Lowercase letters (\'a\'-\'z\'), digits (\'0\'-\'9\'), plus (\'+\') and asterisk (\'*\') signs, and whitespace characters. - A list of integers `values` (1 ≤ len(values) ≤ 26) representing the values of variables in the order they appear in `exp`. # Output - The function should return an integer which is the result of the evaluated expression. # Constraints - Each lowercase letter in the expression represents a unique variable, and each value in the list `values` corresponds to a letter in the order of its first appearance in `exp`. # Example ```python exp = \\"a + 2 * b + 3\\" values = [5, 10] # Explanation: The expression evaluates to 5 + 2*10 + 3 = 28 print(evaluate_expression(exp, values)) # Output: 28 exp = \\"x * y + 2 * x + 1\\" values = [3, 4] # Explanation: The expression evaluates to 3*4 + 2*3 + 1 = 19 print(evaluate_expression(exp, values)) # Output: 19 ```","solution":"from typing import List import re def evaluate_expression(exp: str, values: List[int]) -> int: var_map = {} var_count = 0 tokens = re.findall(r\'[a-z]|d+|[+*]\', exp.replace(\' \', \'\')) eval_stack = [] for token in tokens: if token.isalpha(): if token not in var_map: var_map[token] = values[var_count] var_count += 1 eval_stack.append(var_map[token]) elif token.isdigit(): eval_stack.append(int(token)) else: eval_stack.append(token) def apply_operator(operators, values): right = values.pop() left = values.pop() operator = operators.pop() if operator == \'*\': values.append(left * right) elif operator == \'+\': values.append(left + right) values = [] operators = [] precedence = {\'+\': 1, \'*\': 2} for token in eval_stack: if type(token) is int: values.append(token) else: while (operators and precedence[token] <= precedence[operators[-1]]): apply_operator(operators, values) operators.append(token) while operators: apply_operator(operators, values) return values[0]"},{"question":"You are tasked with creating a program to help Jane, a botanist, track the growth of her plants over time. She has multiple plants, each identified by a unique ID and type. Jane wants to track the height changes of each plant and identify which plant of each type has the maximum growth. Jane may record multiple height measurements for each plant every day. The program should calculate the difference between the first and the last recorded heights for each plant on each day, and then determine the plant of each type that has shown the most growth over a period of multiple days. Input The input consists of multiple datasets. Each dataset represents the records for multiple days and has the following format: d (number of days: integer) k (number of plant types: integer) k rows follow, one for each plant type. Each row starts with the plant type (string), followed by: - ti (number of plants of this type: integer) - ti groups of h1, h2, ..., hn (plant ID and recorded heights: pairs of strings and integers) The number of heights h of each plant ID is variable. A 0 indicates the end of input. Constraints: - d is less than or equal to 10 - k is less than or equal to 5 - ti is less than or equal to 10 - Each plant ID is a unique string of up to 5 characters - Each plant height h is an integer between 1 and 300 Output For each dataset, output for each plant type the ID of the plant that had the maximum growth and the amount of growth in height. If no heights are recorded or growth is zero, output \\"no growth\\" for that plant type. For example: Input 2 2 rose 2 ID1 10 12 14 15 ID2 8 10 13 tulip 3 ID3 5 9 ID4 10 12 15 17 ID5 18 20 20 2 rose 2 ID1 10 10 10 ID2 8 9 9 tulip 3 ID3 5 6 ID4 10 11 ID5 18 20 0 Output rose ID1 5 tulip ID4 7 rose ID2 1 tulip ID5 2","solution":"def process_plant_growth(datasets): results = [] for dataset in datasets: d = dataset[\'days\'] k = dataset[\'types\'] plant_data = dataset[\'plant_data\'] for plant_type, plants in plant_data.items(): max_growth = -float(\'inf\') max_growth_id = \\"no growth\\" for plant_id, heights in plants.items(): if len(heights) < 2: continue growth = heights[-1] - heights[0] if growth > max_growth: max_growth = growth max_growth_id = plant_id if max_growth_id == \\"no growth\\" or max_growth <= 0: results.append(f\\"{plant_type} no growth\\") else: results.append(f\\"{plant_type} {max_growth_id} {max_growth}\\") return results"},{"question":"Emily loves number sequences. She has an array of n integers. She considers a subarray to be beautiful if the sum of the elements of the subarray is even. While pondering over the beauty of subarrays, she wonders about the longest beautiful subarray in the array. Fortunately, Emily has you to help her find the length of this subarray so that she can appreciate the beauty of her array collections while continuing her passion for painting. Input: First line contains an integer T, the number of test cases. Each test case contains two lines: 1. An integer n, the length of the array. 2. n space-separated integers representing the elements of the array. Constraints: 1 ≤ T ≤ 50 1 ≤ n ≤ 100 -1000 ≤ array[i] ≤ 1000 Output: One number per line representing the length of the longest beautiful subarray for each test case. Sample Input: 2 5 1 2 3 4 5 4 -1 -2 -3 -4 Sample Output: 4 4 Explanation: For test case 1: The longest beautiful subarray is [2, 3, 4, 5] as their sum is 14 which is even. For test case 2: The entire array [-1, -2, -3, -4] forms a beautiful subarray because its sum is -10 which is even. So the answer is 4.","solution":"def longest_beautiful_subarray(T, test_cases): results = [] for test in test_cases: n, array = test # Finding first and last occurrences of even numbers first_even = -1 last_even = -1 for i in range(n): if array[i] % 2 == 0: if first_even == -1: first_even = i last_even = i if first_even == -1: if n > 1: results.append(n - 1) else: results.append(0) else: results.append(max(last_even + 1, n - first_even, n - last_even - 1)) return results"},{"question":"Peter Parker has decided to implement a new security system using a binary search tree (BST). He has written initial code to insert elements into the BST but needs your help to count the number of leaf nodes in the BST after all insertions are complete. A leaf node is a node that has no children. Formally, given a sequence of n integers, construct a BST by inserting the integers in the given sequence order and then count the number of leaf nodes in the BST. -----Input:----- - The first line of the input contains a single integer n, indicating the number of integers. - The second line contains n space-separated integers representing the sequence of insertions into the BST. -----Output:----- A single integer, the number of leaf nodes in the BST. -----Constraints----- - 1 leq n leq 1000 - 1 leq [integer sequence] leq 10^9 -----Subtasks----- - 20 Points: 1 leq n leq 100 - 30 Points: 1 leq n leq 500 - 50 Points: Original Constraints -----Sample Input:----- 7 10 5 1 7 40 50 30 -----Sample Output:----- 4 -----EXPLANATION:----- The binary search tree constructed from the input sequence would look like: 10 / 5 40 / 1 7 50 / 30 The leaf nodes in the BST are 1, 7, 30, and 50. Hence, there are 4 leaf nodes in total.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BST: def __init__(self): self.root = None def insert(self, root, key): if root is None: return TreeNode(key) else: if key < root.val: root.left = self.insert(root.left, key) else: root.right = self.insert(root.right, key) return root def count_leaf_nodes(self, root): if root is None: return 0 if root.left is None and root.right is None: return 1 return self.count_leaf_nodes(root.left) + self.count_leaf_nodes(root.right) def count_leaf_nodes_in_bst(n, sequence): bst = BST() root = None for key in sequence: root = bst.insert(root, key) return bst.count_leaf_nodes(root)"},{"question":"You are given N tiles arranged in a line. Each tile has a height represented by an integer. You can, if you wish, decrease the height of any number of tiles by 1 unit in one operation. However, you cannot increase the height of any tile. Your goal is to make all the tiles have the same height with the minimum number of operations. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. For each test case: The first line contains a single integer N. The second line contains N space-separated integers H_{1}, H_{2}, ldots, H_{N} where H_{i} denotes the height of the i-th tile. ------ Output ------ For each test case, print a single line containing the minimum number of operations required to make all the tiles have the same height. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^5 1 ≤ H_{i} ≤ 10^4 for each valid i ------ Sample Input 1 ------ 2 3 2 2 3 4 7 5 6 4 ------ Sample Output 1 ------ 1 6 ------ Explanation 1 ------ Example case 1: We can decrease the height of the third tile by 1 unit, resulting in all tiles having the height 2. Thus, the minimum number of operations required is 1. Example case 2: We can decrease the height of the first tile by 3 units, the second tile by 1 unit, and the third tile by 2 units to make all tiles have the height 4, which results in a total of 6 operations.","solution":"def min_operations(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] H = test_cases[i][1] min_height = min(H) operations = sum(h - min_height for h in H) results.append(operations) return results # Example Usage: # T = 2 # test_cases = [ # (3, [2, 2, 3]), # (4, [7, 5, 6, 4]) # ] # print(min_operations(T, test_cases)) # Should print: [1, 6]"},{"question":"You are given a garden with a variety of flowers arranged in a straight line. Each flower has a certain beauty value, represented by an integer. Your task is to find a continuous subarray within this line of flowers such that the sum of the values of the flowers within this subarray is maximized. However, there\'s a twist. You can select at most one subarray within the garden. It should have the highest possible sum, but you are also allowed to exclude up to one flower from this subarray to maximize the sum. Write a program to determine the maximum possible sum of a subarray with at most one exclusion. -----Input:----- The first line contains an integer T, the number of test cases. Each test case begins with an integer n, the number of flowers in the garden. The next line contains n integers, representing the beauty values of the flowers. -----Output:----- For each test case, output the maximum sum of a subarray with at most one exclusion. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 2 × 10^5 - -10^5 ≤ beauty value ≤ 10^5 -----Sample Input:----- 2 5 1 -2 0 3 -1 4 -1 -2 -3 -4 -----Sample Output:----- 4 -1","solution":"def maximum_subarray_with_one_exclusion(test_cases): results = [] for flowers in test_cases: n = len(flowers) if n == 1: results.append(flowers[0]) continue # Step 1: Calculate the maximum subarray sum using Kadane\'s Algorithm for array with no exclusion max_end_here = [0] * n max_end_here[0] = flowers[0] for i in range(1, n): max_end_here[i] = max(flowers[i], max_end_here[i-1] + flowers[i]) # Step 2: Calculate the maximum subarray sum for the array with one exclusion max_start_here = [0] * n max_start_here[n-1] = flowers[n-1] for i in range(n-2, -1, -1): max_start_here[i] = max(flowers[i], max_start_here[i+1] + flowers[i]) # Step 3: Find the maximum of the two scenarios max_sum = max(max_end_here) for i in range(1, n-1): max_sum = max(max_sum, max_end_here[i-1] + max_start_here[i+1]) results.append(max_sum) return results # Example usage for function def main(): T = int(input()) test_cases = [] for _ in range(T): n = int(input()) flowers = list(map(int, input().split())) test_cases.append(flowers) results = maximum_subarray_with_one_exclusion(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Alice is a software engineer working on a project that requires coordinating various tasks. She has designed an algorithm that generates a list of tasks, each with a unique start and end time. Alice\'s goal is to find the maximum number of non-overlapping tasks that can be scheduled. You are given an integer N, which denotes the number of tasks and then N lines each containing two integers start_i and end_i, representing the start and end time of the i-th task in the list. A task j is considered to be non-overlapping with task k if the start time of task k is greater than or equal to the end time of task j, or vice versa. Your task is to write a program that determines the maximum number of non-overlapping tasks that can be scheduled from the given list. Constraints: * 1 ≤ N ≤ 10^5 * 0 ≤ start_i < end_i ≤ 10^9 * All start and end times are distinct. Input: The input is given from Standard Input in the following format: ``` N start_1 end_1 start_2 end_2 : start_N end_N ``` Output: Print the maximum number of non-overlapping tasks that can be scheduled. Examples: Input: ``` 3 1 4 2 3 3 5 ``` Output: ``` 2 ``` Input: ``` 4 1 2 2 3 3 4 4 5 ``` Output: ``` 4 ``` Input: ``` 4 7 9 1 3 3 5 5 8 ``` Output: ``` 3 ``` Explanation: In the first example, two tasks can be scheduled without overlapping: (1, 4) and (4, 5). In the second example, all tasks can be scheduled as they are consecutive. In the third example, the tasks (1, 3), (3, 5), and (7, 9) can be chosen to maximize the number of non-overlapping tasks.","solution":"def max_non_overlapping_tasks(tasks): Returns the maximum number of non-overlapping tasks that can be scheduled. # Sort tasks based on their end time tasks.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping tasks count = 0 # Initialize the end time of the last selected task last_end_time = 0 for task in tasks: start, end = task if start >= last_end_time: # If the current task starts after or when the last selected task ends count += 1 last_end_time = end return count if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) tasks = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(N)] result = max_non_overlapping_tasks(tasks) print(result)"},{"question":"You are working with a new type of data structure called a Circle Queue. It operates similarly to a traditional queue, but when it reaches its maximum size, the next element added will overwrite the oldest element currently in the queue. This is commonly known as a circular buffer. The Circle Queue supports the following operations: - `enqueue(x)`: Adds element `x` to the queue. If the queue is already full, it overwrites the oldest element. - `dequeue()`: Removes the oldest element from the queue. - `get_elements()`: Returns a list of all current elements in the queue, starting from the oldest to the newest. Your task is to implement this Circle Queue in Python. ----Input----: 1. An integer n (1 ≤ n ≤ 1000), the maximum size of the Circle Queue. 2. A sequence of commands where each command is either: - `\\"enqueue x\\"`: where `x` is an integer to add to the queue. - `\\"dequeue\\"` - `\\"get_elements\\"` The input terminates with the command `\\"stop\\"`. ----Output----: Output the result of each `get_elements` command as a list of elements. ----Examples----: Input: 3 enqueue 1 enqueue 2 enqueue 3 enqueue 4 get_elements dequeue enqueue 5 enqueue 6 get_elements dequeue dequeue get_elements stop Output: [2, 3, 4] [4, 5, 6] [6]","solution":"class CircleQueue: def __init__(self, max_size): self.max_size = max_size self.queue = [None] * max_size self.head = 0 self.tail = 0 self.size = 0 def enqueue(self, x): if self.size == self.max_size: self.head = (self.head + 1) % self.max_size else: self.size += 1 self.queue[self.tail] = x self.tail = (self.tail + 1) % self.max_size def dequeue(self): if self.size == 0: raise IndexError(\\"dequeue from empty queue\\") self.queue[self.head] = None self.head = (self.head + 1) % self.max_size self.size -= 1 def get_elements(self): elements = [] for i in range(self.size): elements.append(self.queue[(self.head + i) % self.max_size]) return elements"},{"question":"Anna has two arrays of integers `a` and `b` of length `n` and `m` respectively. She wants to find the maximum sum of elements she can obtain by selecting any subarray from `a` and another subarray from `b`, and then concatenate one after another. A subarray from array `a` is a contiguous portion of the array, so is a subarray from array `b`. The result of concatenating two subarrays is that all elements of the first subarray come before the elements of the second subarray. Determine the maximum possible sum Anna can get by selecting subarrays and concatenating them. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array `a`. The second line contains n integers a_i (|a_i| ≤ 10^4), the elements of the array `a`. The third line contains a single integer m (1 ≤ m ≤ 10^5) — the length of the array `b`. The fourth line contains m integers b_i (|b_i| ≤ 10^4), the elements of the array `b`. -----Output----- Print a single integer representing the maximum sum Anna can obtain. -----Examples----- Input 4 1 2 3 4 3 -1 2 3 Output 15 Input 5 -1 -2 -3 -4 -5 4 1 2 3 4 Output 10 -----Note----- In the first example, the optimal subarrays to select are `[1, 2, 3, 4]` from array `a` and `[2, 3]` from array `b`, resulting in a sum of `1 + 2 + 3 + 4 + 2 + 3 = 15`. In the second example, the optimal subarrays are an empty subarray from `a` and the entire array `[1, 2, 3, 4]` from `b`, resulting in a sum of `1 + 2 + 3 + 4 = 10`.","solution":"def max_subarray_sum(array): Helper function to find the maximum subarray sum using Kadane\'s algorithm. max_current = max_global = array[0] for num in array[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def max_concat_subarray_sum(a, b): Returns the maximum sum of any subarray from a concatenated with any subarray from b. max_sum_a = max(0, max_subarray_sum(a)) # max subarray sum of a or 0 if all non-positive max_sum_b = max(0, max_subarray_sum(b)) # max subarray sum of b or 0 if all non-positive return max_sum_a + max_sum_b"},{"question":"Alyssa is working on a secret message system where each message is encoded based on a specific pattern. The encoding process involves shifting each character in the message a given number of positions forward in the alphabet, wrapping around if necessary. The rules for encoding are as follows: 1. Each character in the message is shifted forward in the alphabet by a fixed number of positions, determined by a given shift value, `s`. 2. The alphabet is considered circular, so after \'z\' comes \'a\'. 3. The system only encodes lowercase English letters (\'a\' to \'z\'), and non-letter characters remain unchanged. Write a program that encodes a given message based on a provided shift value. Input The program will receive multiple lines of input. Each line contains an integer `s` followed by a space and a string `m`. The integer `s` represents the shift value (1 <= s <= 25), and the string `m` is the message to be encoded. The end of input is indicated by a line with a shift value of 0. Output For each input line, the program should output the encoded message. Example Input 3 hello world 15 secret message 7 abcdefghijklmnopqrstuvwxyz 0 Output khoor zruog hptryr btfuurm hijklmnopqrstuvwxyzabcdefg","solution":"def encode_message(shift, message): Encodes a given message by shifting each letter by the specified shift value. Args: shift (int): The shift value (1 <= shift <= 25) message (str): The message to be encoded. Returns: str: The encoded message. encoded_message = [] for char in message: if \'a\' <= char <= \'z\': new_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) encoded_message.append(new_char) else: encoded_message.append(char) return \'\'.join(encoded_message) def encoder(): import sys input = sys.stdin.read data = input().strip().split(\'n\') for line in data: if line.strip() == \\"\\": continue shift, message = line.split(\' \', 1) shift = int(shift) if shift == 0: break print(encode_message(shift, message))"},{"question":"Katie is developing a multiplayer online game. As part of the game\'s mechanics, players need to convert various in-game items between different measurement systems to solve puzzles. Each item has weight and height attributes, and the players need to convert them from one unit system to another. Help Katie\'s players write a function to convert weights and heights between given measurement units and calculate the integer sum of the converted weight and height. Input: - The first line contains an integer n, the number of test cases. - The next n lines, each containing a string s (\\"weight\\" or \\"height\\"), a float number v (the value), and two strings u1 and u2 (the source and target units of measurement). The possible units for weight are: \\"kilograms\\", \\"grams\\", \\"pounds\\" The possible units for height are: \\"meters\\", \\"centimeters\\", \\"inches\\" Conversion factors: - 1 kilogram = 1000 grams - 1 kilogram = 2.20462 pounds - 1 meter = 100 centimeters - 1 meter = 39.3701 inches Output: For each test case, print the integer sum of the converted value. Constraints: 1 ≤ n ≤ 500 1 ≤ v ≤ 10000 SAMPLE INPUT 4 weight 10 kilograms grams height 1 meters inches weight 15.5 pounds kilograms height 250 centimeters meters SAMPLE OUTPUT 10000 39 7 2 Explanation: Test case #1: 10 kilograms is equal to 10000 grams. Sum is 10000. Test case #2: 1 meter is equal to 39.3701 inches. Sum of digits is 39. Test case #3: 15.5 pounds is equal to 7.03999 kilograms Approximated to integer part, sum is 7. Test case #4: 250 centimeters is equal to 2.5 meters. Approximated to integer part, sum is 2.","solution":"def convert_and_sum(test_cases): def convert(value, from_unit, to_unit, conversion_factors): return value * conversion_factors[(from_unit, to_unit)] weight_conversion = { (\\"kilograms\\", \\"grams\\"): 1000, (\\"grams\\", \\"kilograms\\"): 1 / 1000, (\\"kilograms\\", \\"pounds\\"): 2.20462, (\\"pounds\\", \\"kilograms\\"): 1 / 2.20462, (\\"grams\\", \\"pounds\\"): 1 / 453.592, (\\"pounds\\", \\"grams\\"): 453.592 } height_conversion = { (\\"meters\\", \\"centimeters\\"): 100, (\\"centimeters\\", \\"meters\\"): 1 / 100, (\\"meters\\", \\"inches\\"): 39.3701, (\\"inches\\", \\"meters\\"): 1 / 39.3701, (\\"centimeters\\", \\"inches\\"): 1 / 2.54, (\\"inches\\", \\"centimeters\\"): 2.54 } results = [] for case in test_cases: measurement_type, value, from_unit, to_unit = case if measurement_type == \\"weight\\": conversion_factors = weight_conversion elif measurement_type == \\"height\\": conversion_factors = height_conversion converted_value = convert(value, from_unit, to_unit, conversion_factors) results.append(int(converted_value)) return results"},{"question":"Implement a function that accepts a list of strings and an integer k, and returns a new list of strings where each string is the concatenation of k consecutive strings from the original list. If the length of the original list is less than k, return an empty list. The function should handle edge cases gracefully, such as an empty list or k being greater than the length of the list. # Input - A list of strings `str_list` where each string consists of lowercase English letters. - An integer `k` which is a positive integer. # Output - A new list of strings where each string is a concatenation of k consecutive strings from the original list. # Examples ```python def concatenate_k_strings(str_list, k): # Your implementation here # Example 1 print(concatenate_k_strings([\\"a\\", \\"b\\", \\"c\\", \\"d\\"], 2)) # Output: [\\"ab\\", \\"cd\\"] # Example 2 print(concatenate_k_strings([\\"hello\\", \\"world\\", \\"python\\"], 2)) # Output: [\\"helloworld\\"] # Example 3 print(concatenate_k_strings([\\"one\\", \\"two\\", \\"three\\", \\"four\\"], 3)) # Output: [\\"onetwothree\\"] # Example 4 print(concatenate_k_strings([], 1)) # Output: [] # Example 5 print(concatenate_k_strings([\\"apple\\", \\"banana\\"], 3)) # Output: [] ``` # Explanation - In the first example, \\"a\\" is concatenated with \\"b\\" to form \\"ab\\", and \\"c\\" is concatenated with \\"d\\" to form \\"cd\\". - In the second example, \\"hello\\" is concatenated with \\"world\\" to form \\"helloworld\\". - In the third example, \\"one\\", \\"two\\", and \\"three\\" are concatenated to form \\"onetwothree\\". - The fourth example returns an empty list since the input list is empty. - The fifth example also returns an empty list because k is greater than the length of the original list.","solution":"def concatenate_k_strings(str_list, k): Concatenates k consecutive strings from the input list and returns a list of such concatenated strings. Parameters: str_list (list of str): The list of strings to be concatenated. k (int): The number of consecutive strings to concatenate. Returns: list of str: A list of concatenated strings. if len(str_list) < k or k <= 0: return [] result = [] for i in range(0, len(str_list) - k + 1, k): concatenated_string = \'\'.join(str_list[i:i + k]) result.append(concatenated_string) return result"},{"question":"You are given a sequence of integers a_{1}, a_{2}, ldots, a_{N}. You want to perform the following operation on this sequence: Choose any two distinct indices i and j such that 1 leq i, j leq N, and swap a_{i} and a_{j}. You want to make the sequence sorted in non-decreasing order by performing at most one swap operation. Determine if it is possible to achieve this. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers a_{1}, a_{2}, ldots, a_{N}. ------ Output ------ For each test case, print a single line containing \\"YES\\" if it is possible to sort the sequence with at most one swap operation. Otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 2 cdot 10^{5} 1 ≤ a_{i} ≤ 10^9 ------ Sample Input 1 ------ 3 4 1 3 5 3 5 4 5 2 1 6 2 2 1 ----- Sample Output 1 ------ YES NO YES ----- explanation 1 ------ In example case 1, we can swap the second and fourth elements to get the sorted sequence [1, 3, 3, 5]. In example case 2, it is impossible to sort the sequence with a single swap because the unsorted elements are not adjacent or could not be swapped to get the sequence sorted. In example case 3, we can simply swap the two elements to get the sorted sequence [1, 2].","solution":"def can_be_sorted_with_one_swap(test_cases): results = [] for N, array in test_cases: sorted_array = sorted(array) diff_indices = [i for i in range(N) if array[i] != sorted_array[i]] if len(diff_indices) == 0: results.append(\\"YES\\") elif len(diff_indices) == 2: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of N integers. Determine if there are any arithmetic subsequences of length 3 in the array. An arithmetic subsequence is defined as a sequence of numbers such that the differences between consecutive elements are identical. Input Format The first line contains T, the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the length of the array. - The second line contains N space-separated integers. Output Format For each test case, print YES if there exists at least one arithmetic subsequence of length 3, otherwise print NO. Constraints 1 ≤ T ≤ 10^3 3 ≤ N ≤ 10^3 -10^3 ≤ array elements ≤ 10^3 Sample Input 2 5 1 2 3 4 5 4 5 10 15 20 Sample Output YES NO Explanation In the first test case, the subsequence (1, 2, 3) is arithmetic with a common difference of 1, and (2, 3, 4) is also arithmetic with a common difference of 1, so the output is YES. In the second test case, there are no three elements in arithmetic progression, so the output is NO.","solution":"def has_arithmetic_subsequence(arr): length = len(arr) if length < 3: return \\"NO\\" for i in range(length - 2): for j in range(i + 1, length - 1): for k in range(j + 1, length): if arr[j] - arr[i] == arr[k] - arr[j]: return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): N, array = test_cases[i] results.append(has_arithmetic_subsequence(array)) return results"},{"question":"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)). Example 1: Input: nums1 = [1,3], nums2 = [2] Output: 2.00000 Explanation: merged array = [1,2,3] and median is 2. Example 2: Input: nums1 = [1,2], nums2 = [3,4] Output: 2.50000 Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5 You may assume nums1 and nums2 cannot be both empty. Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order. Example: Input: [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] Output: [1,2,3,6,9,8,7,4,5]","solution":"def findMedianSortedArrays(nums1, nums2): Find the median of two sorted arrays. Time complexity: O(log (m+n)) def findKthSmallest(A, B, k): lenA, lenB = len(A), len(B) if lenA > lenB: return findKthSmallest(B, A, k) if lenA == 0: return B[k-1] if k == 1: return min(A[0], B[0]) i = min(lenA, k // 2) j = min(lenB, k // 2) if A[i-1] > B[j-1]: return findKthSmallest(A, B[j:], k-j) else: return findKthSmallest(A[i:], B, k-i) totalLen = len(nums1) + len(nums2) if totalLen % 2 == 1: return findKthSmallest(nums1, nums2, totalLen // 2 + 1) else: return (findKthSmallest(nums1, nums2, totalLen // 2) + findKthSmallest(nums1, nums2, totalLen // 2 + 1)) / 2.0 def spiralOrder(matrix): Return all elements of the matrix in spiral order. res = [] while matrix: res += matrix.pop(0) if matrix and matrix[0]: for row in matrix: res.append(row.pop()) if matrix: res += matrix.pop()[::-1] if matrix and matrix[0]: for row in matrix[::-1]: res.append(row.pop(0)) return res"},{"question":"In the kingdom of Oddland, the kingdom\'s balance is maintained using an ancient number system consisting of bizarre properties. One such property is that the sum of the digits of a number should be an odd number. Albert, the new head of Oddland Academy, has come up with an interesting problem for his students. Given a number, they need to transform it into a number whose sum of digits is an odd number. They can do this by incrementing the number until the condition is met. Write a function that takes an integer N and returns the smallest integer greater than or equal to N whose sum of digits is odd. -----Input----- An integer N where 1 leq N leq 10^{12}. -----Output----- The smallest integer greater than or equal to N whose sum of digits is odd. -----Examples----- Sample Input: 47 Sample Output: 47 Sample Input: 28 Sample Output: 29","solution":"def sum_of_digits(n): Returns the sum of digits of the number n. return sum(int(digit) for digit in str(n)) def oddland_number(N): Returns the smallest integer greater than or equal to N whose sum of digits is odd. while sum_of_digits(N) % 2 == 0: N += 1 return N"},{"question":"Given an array of integers `nums` and an integer `target`, your task is to find the first pair of indices whose elements sum up to the given target. The pair should be returned as a tuple containing the indices in ascending order. If no such pair exists, return `(-1, -1)`. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: (0, 1) Explanation: nums[0] + nums[1] = 2 + 7 = 9. Example 2: Input: nums = [3, 2, 4], target = 6 Output: (1, 2) Explanation: nums[1] + nums[2] = 2 + 4 = 6. Example 3: Input: nums = [3, 3], target = 6 Output: (0, 1) Explanation: nums[0] + nums[1] = 3 + 3 = 6. Example 4: Input: nums = [1, 2, 3, 4], target = 8 Output: (-1, -1) Explanation: There is no pair with sum 8 in the array. Your Task: You do not need to read input or print anything. Your task is to complete the function `findPair()` which takes `nums` and `target` as input parameters and returns the first pair of indices whose elements sum up to the given target. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: - 2 ≤ nums.length ≤ 10^4 - -10^9 ≤ nums[i] ≤ 10^9 - -10^9 ≤ target ≤ 10^9","solution":"def findPair(nums, target): Returns the first pair of indices whose elements sum up to the given target. If no such pair exists, returns (-1, -1). seen = {} for idx, num in enumerate(nums): complement = target - num if complement in seen: return (seen[complement], idx) seen[num] = idx return (-1, -1)"},{"question":"Bob and Alice enjoy exploring mazes in their free time. Today, they\'ve stumbled upon a magical square maze that contains several enchanted walls and open paths. The maze is represented by a N times N grid, where 1 leq N leq 4. Each cell in the grid can either be a wall (\'#\') or an open path (\'.\'). Alice and Bob start at the top-left corner of the maze and their goal is to reach the bottom-right corner. They can only move up, down, left, or right through open paths. They cannot move through walls. Alice and Bob want to know how many unique paths there are from the top-left corner to the bottom-right corner of the maze. Write a function that, given an N times N grid representing the maze, returns the number of unique paths from the top-left corner to the bottom-right corner. -----Input----- The input consists of N+1 lines: - The first line contains a single integer N. - The next N lines each contain N characters, either a \'#\' representing a wall or a \'.\' representing an open path. -----Output----- Print an integer representing the number of unique paths from the top-left corner to the bottom-right corner. -----Examples----- Sample Input: 2 . . . . Sample Output: 2 Sample Input: 3 . # . . . . # . . Sample Output: 2 Note: In the first example, there are exactly 2 ways for Bob and Alice to reach the bottom-right corner: 1. Right, Down 2. Down, Right In the second example, there are exactly 2 ways: 1. Right, Down, Down, Right 2. Down, Down, Right, Right","solution":"def num_unique_paths(maze): Returns the number of unique paths from the top-left corner to the bottom-right corner of the maze. N = len(maze) if maze[0][0] == \'#\' or maze[N-1][N-1] == \'#\': return 0 def is_valid(x, y): return 0 <= x < N and 0 <= y < N and maze[x][y] == \'.\' def find_paths(x, y): if x == N-1 and y == N-1: return 1 paths = 0 directions = [(0, 1), (1, 0)] for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): paths += find_paths(nx, ny) return paths return find_paths(0, 0)"},{"question":"Jacob works for a company where he needs to analyze sequences of numbers. His task is to determine whether a given sequence can be split into two non-empty subsequences such that each subsequence is sorted in strictly increasing or strictly decreasing order. Note that the subsequences do not need to be contiguous portions of the original sequence. ------ Input Format ------ - The first line will contain a single integer T denoting the number of test cases. - Each test case consists of two lines: - The first line contains an integer N indicating the length of the sequence. - The second line contains N space-separated integers representing the sequence. ------ Output Format ------ For each test case, output in a single line the answer: \\"YES\\" if the sequence can be split into two non-empty subsequences as described, and \\"NO\\" otherwise. You may print each character of each string in uppercase or lowercase (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 -10^6 ≤ Each element in the sequence ≤ 10^6 ----- Sample Input 1 ------ 3 5 5 1 4 3 2 4 4 3 2 1 6 2 4 1 5 3 6 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test Case 1: The sequence can be split into subsequences {5, 4, 3} and {1, 2}, or {1, 2, 4} and {5, 3} among other possibilities. Test Case 2: Any split will result in at least one of the subsequences not being strictly increasing or decreasing. Test Case 3: The sequence can be split into subsequences {2, 4, 5, 6} and {1, 3} among other possibilities.","solution":"def can_split_sequence(sequence): n = len(sequence) inc_ord = sorted(sequence) dec_ord = sorted(sequence, reverse=True) if inc_ord != sequence and dec_ord != sequence: return \\"YES\\" else: return \\"NO\\" def analyze_sequences(test_cases): results = [] for test_case in test_cases: N, sequence = test_case result = can_split_sequence(sequence) results.append(result) return results # Input reading and function to handle multiple test cases def process_input(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 sequence = list(map(int, data[index:index + N])) index += N test_cases.append((N, sequence)) results = analyze_sequences(test_cases) for result in results: print(result)"},{"question":"John loves numbers and has recently developed an interest in algorithmic problems. He wants to develop a program that can create the longest possible subsequence of a list where all elements of the subsequence are in non-decreasing order. To help John practice, you need to write a program that does this task. Input Format The first line contains an integer T, the number of test cases. T test cases follow. Each test case starts with an integer N, the number of elements in the original list. The next line follows with N space-separated integers, representing the list of numbers. Output Format For each test case, print in a new line the longest non-decreasing subsequence. If there are multiple such subsequences of the same length, print the one that appears first using the original list\'s order. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^3 1 ≤ list[i] ≤ 10^4 Sample Input 2 5 5 3 4 8 6 6 2 2 2 2 2 2 Sample Output 3 4 8 2 2 2 2 2 2 Explanation In the first test case, the longest non-decreasing subsequence of [5, 3, 4, 8, 6] is [3, 4, 8]. In the second test case, since all elements are equal in the list, the whole list is the longest non-decreasing subsequence.","solution":"def longest_non_decreasing_subsequence(arr): Returns the longest non-decreasing subsequence from the input list. if not arr: return [] n = len(arr) dp = [1] * n prev = [-1] * n # To traceback the subsequence for i in range(1, n): for j in range(i): if arr[i] >= arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev[i] = j max_length = max(dp) index = dp.index(max_length) result = [] while index != -1: result.append(arr[index]) index = prev[index] result.reverse() # because we traced the subsequence backwards return result def process_test_cases(test_cases): results = [] for elements in test_cases: results.append(longest_non_decreasing_subsequence(elements)) return results"},{"question":"In a national park, there is a trail consisting of N sequential checkpoints numbered from 1 to N. Each checkpoint has an elevation (height in meters) given by an array H of length N, where H_i represents the elevation at the i-th checkpoint. A hiker starts at checkpoint 1 and wishes to reach checkpoint N. However, the hiker can only move to an adjacent checkpoint if the elevation of the next checkpoint is higher or equal to the current checkpoint. Given that the hiker is very conscious about the energy expended, determine the minimum number of moves required for the hiker to reach checkpoint N from checkpoint 1. If reaching the last checkpoint is not possible, return -1. Constraints * 1 leq N leq 10^{5} * 1 leq H_i leq 10^{9} Input Input is given from Standard Input in the following format: N H_1 H_2 dots H_N Output Print the minimal number of moves, or -1 if it\'s not possible for the hiker to reach checkpoint N. Examples Input 5 1 3 2 4 5 Output 3 Input 4 5 4 3 2 Output -1 Input 6 1 1 1 1 1 1 Output 5","solution":"def minimum_moves_to_reach_end(N, H): moves = 0 current_position = 0 while current_position < N - 1: if H[current_position + 1] >= H[current_position]: current_position += 1 moves += 1 else: found = False for i in range(current_position + 2, N): if H[i] >= H[current_position]: current_position = i moves += 1 found = True break if not found: return -1 return moves"},{"question":"A grid grid of size n x m is created with each cell marked as either traversable (\'.\') or blocked (\'#\'). You start at the top-left corner of the grid and wish to reach the bottom-right corner. You can move up, down, left, or right, but you cannot move diagonally. Your task is to determine if there exists a path from the top-left corner to the bottom-right corner. Input - The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) representing the number of rows and columns in the grid respectively. - Each of the next n lines contains a string of m characters where each character is either \'.\' indicating a traversable cell or \'#\' indicating a blocked cell. Output - Output \\"YES\\" if there is a path from the top-left corner to the bottom-right corner and \\"NO\\" if there isn\'t. Example Input 4 4 .... .. .#.. .... Output YES Input 3 3 ... # ..# Output NO","solution":"def is_path_exist(n, m, grid): from collections import deque if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" # Directions: Up, Down, Left, Right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"You are given two strings, `s1` and `s2`, which may contain lowercase English letters and the character \'*\'. The character \'*\' can match zero or more characters in the string `s1`. Write a function to determine if `s2` matches `s1`. For the purpose of simplicity, assume that `\'*\'` can be treated as an empty sequence or match any sequence of characters, but it cannot replace other characters. Example 1: Input: s1 = \\"aa\\", s2 = \\"a\\" Output: false Explanation: \\"a\\" does not match \\"aa\\". Example 2: Input: s1 = \\"aa\\", s2 = \\"*\\" Output: true Explanation: The \'*\' can match both \'a\' characters. Example 3: Input: s1 = \\"cb\\", s2 = \\"?a\\" Output: false Explanation: \'?\' matches \'c\' but \'a\' does not match \'b\'. Example 4: Input: s1 = \\"adceb\\", s2 = \\"*a*b\\" Output: true Explanation: The \'*\' can match \'adc\' and the remaining \'a\' and \'b\' match their positions in `s1`. Example 5: Input: s1 = \\"acdcb\\", s2 = \\"a*c?b\\" Output: false Your Task: You do not need to read input or print anything. Your task is to complete the function isMatch(), which takes the strings `s1` and `s2` as input parameters and returns a boolean indicating if `s2` matches `s1`. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 ≤ |s1|, |s2| ≤ 100","solution":"def isMatch(s1, s2): Returns if the string s2 matches the string s1, where \'*\' can match zero or more characters. # Initialize DP table dp = [[False] * (len(s1) + 1) for _ in range(len(s2) + 1)] dp[0][0] = True # Both strings are empty # Fill the first row where s2 has \'*\' characters for i in range(1, len(s2) + 1): if s2[i - 1] == \'*\': dp[i][0] = dp[i - 1][0] # Fill the rest of the DP table for i in range(1, len(s2) + 1): for j in range(1, len(s1) + 1): if s2[i - 1] == \'*\': dp[i][j] = dp[i - 1][j] or dp[i][j - 1] elif s2[i - 1] == s1[j - 1] or s2[i - 1] == \'?\': dp[i][j] = dp[i - 1][j - 1] return dp[len(s2)][len(s1)]"},{"question":"Given an array `arr[]` of size `N` consisting of distinct integers, write a program that finds the maximum length of the subarray with consecutive elements. The elements can be in any order within the subarray, but must be consecutive when sorted. Example 1: Input: N = 4 arr = {1, 2, 2, 5, 3} Output: 3 Explanation: The subarray {1, 2, 3} has consecutive elements. Example 2: Input: N = 6 arr = {10, 12, 11, 14, 13, 15} Output: 6 Explanation: The subarray {10, 11, 12, 13, 14, 15} has consecutive elements. Example 3: Input: N = 5 arr = {4, 5, 1, 9, 10} Output: 2 Explanation: The subarray {9, 10} has consecutive elements. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findMaxLengthSubarray()` which takes the array `arr[]` and its size `N` as input parameters and returns the maximum length of the subarray with consecutive elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 0 ≤ arr[i] ≤ 10^5","solution":"def findMaxLengthSubarray(arr, N): Finds the maximum length of the subarray with consecutive elements. Args: arr (list of int): The input array of distinct integers. N (int): The size of the array. Returns: int: The length of the maximum subarray where the elements can be rearranged to form a consecutive sequence. if N == 0: return 0 num_set = set(arr) max_len = 0 for num in arr: # Check if `num` is the starting point of a new sequence if (num - 1) not in num_set: current_num = num current_len = 1 # Check the length of the consecutive sequence starting from `num` while (current_num + 1) in num_set: current_num += 1 current_len += 1 max_len = max(max_len, current_len) return max_len"},{"question":"Write a program to find the minimum number of swaps required to sort an array of distinct integers in ascending order. Example: Given the array `[4, 3, 1, 2]`, the minimum number of swaps needed to sort the array is `3`. The sequence of swaps can be `[4, 3, 1, 2] -> [1, 3, 4, 2] -> [1, 2, 4, 3] -> [1, 2, 3, 4]`. The input array will contain between `1` and `100,000` elements, and each element will be a distinct integer between `1` and `100,000`. Good luck :)","solution":"def minimum_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array in ascending order. # Create a list of tuples where each tuple contains an array element and its index indexed_arr = list(enumerate(arr)) # Sort the list based on the array elements indexed_arr.sort(key=lambda x: x[1]) # Create a visited array to mark already visited elements visited = [False] * len(arr) swaps = 0 for i in range(len(arr)): # If the element is already in the correct position or visited, skip it if visited[i] or indexed_arr[i][0] == i: continue # Compute the size of the cycle and add it to the swap count cycle_size = 0 j = i while not visited[j]: visited[j] = True j = indexed_arr[j][0] cycle_size += 1 if cycle_size > 0: swaps += cycle_size - 1 return swaps"},{"question":"Write a function that checks if a given integer is a palindrome. For example: ```python 121 ==> True -121 ==> False 10 ==> False ``` A number is considered a palindrome if it reads the same forwards and backwards.","solution":"def is_palindrome(n): Checks if a given integer is a palindrome. :param n: integer :return: True if n is a palindrome, False otherwise if n < 0: return False return str(n) == str(n)[::-1]"},{"question":"A company wishes to allocate work hours to employees based on their skills and the skill requirement of tasks. Each employee can work on multiple tasks, but the total hours assigned to them should not exceed their available hours. Each task requires a certain amount of time and a specific skill level, which the employee must meet or exceed. Write a program to determine the maximum number of tasks that can be completed given the constraints of employee available hours and skill levels. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of employees and tasks, respectively. The next n lines each contain two integers ai and si (1 ≤ ai ≤ 100, 1 ≤ si ≤ 100) — the available hours and skill level of the ith employee. The next m lines each contain two integers tj and sj (1 ≤ tj ≤ 100, 1 ≤ sj ≤ 100) — the time and skill requirement of the jth task. -----Output----- Print a single integer — the maximum number of tasks that can be completed. -----Examples----- Input 3 3 10 5 8 7 6 4 5 3 4 4 6 6 Output 2 Input 2 4 12 8 10 6 4 5 8 6 5 7 3 4 Output 3","solution":"def max_completed_tasks(n, m, employees, tasks): # Sort employees and tasks by skill level (and then by available hours/time for stable sorting) employees = sorted(employees, key=lambda x: (x[1], x[0])) tasks = sorted(tasks, key=lambda x: (x[1], x[0])) task_completed = 0 task_index = 0 for available_hours, skill_level in employees: while task_index < m and tasks[task_index][1] <= skill_level: task_time, task_skill = tasks[task_index] if task_time <= available_hours: # Fulfill the task available_hours -= task_time task_completed += 1 task_index += 1 return task_completed"},{"question":"Peter is working on a project involving a grid of size N x M. He needs to make sure that certain coordinates within the grid are marked as obstacles while others remain free. Each obstacle is represented by an integer value of 1 and each free cell is represented by 0. Given an initial empty grid where all cells are 0, Peter performs K operations. Each operation specifies three integers, x, y, and v, where (x, y) are the coordinates of the cell in the grid to be marked and v is the value to set at that cell (either 0 or 1). After performing all operations, your task is to count the number of cells in the grid that are marked as obstacles (value of 1). Input Format The first line contains three integers, N, M, and K, separated by single spaces. K lines follow; each of them contains three integers, x, y, and v, separated by spaces. Output Format A single line containing the number of cells in the grid that are marked as obstacles. Constraints 1≤N, M≤10^3 1≤K≤10^5 0≤x<N 0≤y<M v∈{0, 1} SAMPLE INPUT 4 5 3 2 3 1 1 4 1 0 0 1 SAMPLE OUTPUT 3 Explanation Initially, the grid is: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 First operation marks (2,3) with 1: 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 Second operation marks (1,4) with 1: 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 Third operation marks (0,0) with 1: 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 The total number of cells marked as obstacles (i.e., with a value of 1) is 3.","solution":"def count_obstacles(N, M, K, operations): Counts the number of cells marked as obstacles after performing all operations. Parameters: N (int): Number of rows in the grid. M (int): Number of columns in the grid. K (int): Number of operations. operations (list): List of operations where each operation is a tuple (x, y, v). Returns: int: Number of cells marked as obstacles. grid = [[0] * M for _ in range(N)] for x, y, v in operations: grid[x][y] = v obstacle_count = sum(grid[i][j] for i in range(N) for j in range(M)) return obstacle_count # Helper function to parse input data (for use in the test cases) def parse_input(input_data): lines = input_data.strip().split(\\"n\\") N, M, K = map(int, lines[0].split()) operations = [tuple(map(int, line.split())) for line in lines[1:]] return N, M, K, operations"},{"question":"You are given an array of n positive integers. In one operation, you can select any two adjacent elements in the array, remove them, and insert their sum back into the array. The goal is to determine if it is possible to reduce the array to a single element which is a prime number. If it is possible, output \\"YES\\" and print a sequence of operations to achieve this. Otherwise, output \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the elements of the array. Output If it is possible to reduce the array to a single prime number, print \\"YES\\" on the first line and then print the sequence of operations. Each operation should be denoted by the zero-based indices of the two adjacent elements which are removed and replaced by their sum. Otherwise, print \\"NO\\". Example Input 5 2 3 5 7 11 Output YES 0 1 0 1 0 1 0 1 Note In the example: * First, add elements at indices 0 and 1: 2 + 3 = 5. Array becomes [5, 5, 7, 11]. * Next, add elements at indices 0 and 1: 5 + 5 = 10. Array becomes [10, 7, 11]. * Then, add elements at indices 0 and 1: 10 + 7 = 17. Array becomes [17, 11]. * Finally, add elements at indices 0 and 1: 17 + 11 = 28. Array becomes [28]. In this case, it was not possible to reach a prime number in the final array indicating that the print output should be \\"NO\\". However, provide the correct logic and ensure an appropriate array for achieving the desired result.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def reduce_to_prime(n, arr): operations = [] if n == 1: if is_prime(arr[0]): return \\"YES\\", [] else: return \\"NO\\", [] while n > 1: min_sum = float(\'inf\') min_index = -1 for i in range(n - 1): if arr[i] + arr[i + 1] < min_sum: min_sum = arr[i] + arr[i + 1] min_index = i arr[min_index] = min_sum arr.pop(min_index + 1) operations.append((min_index, min_index + 1)) n -= 1 if is_prime(arr[0]): return \\"YES\\", operations return \\"NO\\", [] def reduce_array_to_prime(n, arr): result, operations = reduce_to_prime(n, arr) if result == \\"YES\\": print(\\"YES\\") for op in operations: print(op[0], op[1]) else: print(\\"NO\\")"},{"question":"In a small town, the local library has a rule to promote fair use of books among its patrons. Each patron can borrow between 1 to 100 books in a single visit, but the total number of pages among all borrowed books must not exceed a maximum limit set by the library. You are tasked with determining if it\'s possible for the patron to borrow exactly k books such that the total number of pages is equal to a given value p. -----Input----- The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of two lines. The first line contains two integers n (1 ≤ n ≤ 100) and p (1 ≤ p ≤ 5000) — the number of books available and the exact total number of pages required, respectively. The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 100) — the number of pages in each book. -----Output----- For each test case, print \\"YES\\" (without the quotes) if it is possible to borrow exactly k books that sum up to p pages. Otherwise, print \\"NO\\" (without the quotes). -----Examples----- Input: 2 5 8 2 3 5 2 1 4 10 2 2 2 2 Output: YES NO -----Note----- In the first test case, the patron can borrow the 1st, 2nd, and 4th book to get exactly 8 pages (2 + 3 + 2 + 1 = 8). In the second test case, no combination of books will give exactly 10 pages, so the answer is \\"NO\\".","solution":"from itertools import combinations def can_borrow_books(n, p, pages): Determines if it\'s possible to borrow exactly k books such that their total pages equal to p. Parameters: n (int): The number of books available. p (int): The exact total number of pages required. pages (list): The list of integers where each number is the number of pages in corresponding book. Returns: str: \\"YES\\" if it\'s possible to achieve exactly p pages with k books, \\"NO\\" otherwise. for k in range(1, n+1): for combination in combinations(pages, k): if sum(combination) == p: return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): Processes multiple test cases generating the output for each. Parameters: t (int): The number of test cases. test_cases (list): A list of tuples, where each tuple contains n, p, and pages. Returns: list: A list of results for each test case (\\"YES\\" or \\"NO\\"). results = [] for case in test_cases: n, p, pages = case results.append(can_borrow_books(n, p, pages)) return results"},{"question":"A company wants to create unique access codes for their employees. An access code should be a string that contains both uppercase and lowercase English letters and should follow these guidelines: 1. The access code should start with an uppercase letter. 2. It should alternate between uppercase and lowercase letters. 3. Numbers are not allowed in the access code. You are given an initial string `s` consisting of only English letters which may or may not satisfy the above conditions. Your task is to make the minimal number of changes to `s` to convert it into an access code that follows the rules. If there are several possible access codes with the same minimal number of changes, return the lexicographically smallest one. A change is defined as replacing one character with another. -----Input----- The only line contains a string `s` (1 ≤ |s| ≤ 2·10^5) consisting of only English letters. -----Output----- Print the lexicographically smallest access code string that can be obtained with the minimal number of changes. -----Examples----- Input AbcD Output AbCd Input aBCdE Output AbCdE","solution":"def create_access_code(s): Convert an initial string into a valid access code with minimal changes. Args: s (str): The initial string consisting of only English letters. Returns: str: The valid access code string following the rules. n = len(s) access_code = [] # Make the first character uppercase if not s[0].isupper(): access_code.append(s[0].upper()) else: access_code.append(s[0]) # Alternate between uppercase and lowercase for i in range(1, n): if i % 2 == 0: # Even index: should be uppercase if not s[i].isupper(): access_code.append(s[i].upper()) else: access_code.append(s[i]) else: # Odd index: should be lowercase if not s[i].islower(): access_code.append(s[i].lower()) else: access_code.append(s[i]) return \'\'.join(access_code)"},{"question":"# Task Sally loves palindromes and numbers. She believes the longest palindromic subsequence of any number\'s digits can reveal something special about it. Help Sally by writing a function that finds the longest palindromic subsequence in a given list of numbers. # What do we need to do? Write a function `longest_palindrome_sequence(numbers)` that takes a list of integers and returns a new list where each element corresponds to the length of the longest palindromic subsequence of the digits of the corresponding number in the input list. # Example ``` longest_palindrome_sequence([12321, 45654, 98789, 123456]) = [5, 5, 5, 1] ``` # Explanation - `12321` has a longest palindromic subsequence `12321` which is of length 5. - `45654` has a longest palindromic subsequence `45654` which is of length 5. - `98789` has a longest palindromic subsequence `98789` which is of length 5. - `123456` has no repeating digits to form a palindrome, so the longest is any single digit, hence 1. Consider different test cases to ensure your function handles all possibilities. For example, numbers with no repeated digits, numbers that are already palindromes, and numbers that contain multiple potential palindromic subsequences.","solution":"def longest_palindrome_sequence(numbers): def longest_palindromic_subseq_length(s): n = len(s) if n == 0: return 0 # dp[i][j] will store the length of the longest palindromic subsequence # in s[i..j] dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the DP table for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] return [longest_palindromic_subseq_length(str(num)) for num in numbers]"},{"question":"Read problems statements in Mandarin Chinese, Russian and Vietnamese. Rasha loves creating unique and interesting patterns with matrices. Today she has given the following challenge to her friends: Given a matrix of size N x N, rotate the matrix 90 degrees clockwise. For example, consider the 3x3 matrix below: 1 2 3 4 5 6 7 8 9 After rotating it 90 degrees clockwise, it becomes: 7 4 1 8 5 2 9 6 3 Can you help Rasha\'s friends by writing a function that performs this operation? ------ Input ------ The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the size of the matrix. Each of the next N lines contains N integers representing the matrix elements. ------ Output ------ For each test case, output the N x N rotated matrix, with each row on a new line. ------ Constraints ------ Subtask #1: 20 points 1 ≤ T ≤ 3, 1 ≤ N ≤ 10 Subtask #2: 80 points 1 ≤ T ≤ 3, 1 ≤ N ≤ 100 ----- Sample Input 1 ------ 1 3 1 2 3 4 5 6 7 8 9 ----- Sample Output 1 ------ 7 4 1 8 5 2 9 6 3","solution":"def rotate_matrix_90_clockwise(matrix): Rotate the given N x N matrix 90 degrees clockwise. N = len(matrix) result = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): result[j][N-1-i] = matrix[i][j] return result def process_input_and_rotate(test_cases): Process the input to read test cases, rotate the matrices, and generate output. results = [] for test in test_cases: N = test[0] matrix = test[1] rotated_matrix = rotate_matrix_90_clockwise(matrix) results.append(rotated_matrix) return results"},{"question":"# Example Given a list of integers, find the maximum product of any three integers in the list. **Input** - A single list of integers `arr` (2 <= len(arr) <= 1000, -1000 <= arr[i] <= 1000) **Output** - The maximum product of any three integers. **Example** Input ``` [1, 2, 3, 4, 5] ``` Output ``` 60 ``` Input ``` [-10, -10, 5, 2] ``` Output ``` 500 ``` **Note** For the first example, the maximum product of any three integers is `3 * 4 * 5 = 60`. For the second example, the maximum product of any three integers is `-10 * -10 * 5 = 500`.","solution":"def max_product_of_three(arr): Returns the maximum product of any three integers in the given list. arr.sort() return max(arr[0] * arr[1] * arr[-1], arr[-3] * arr[-2] * arr[-1])"},{"question":"Aisha loves playing with ribbons. She has two types of ribbons, red and blue. Each ribbon can be represented by its length. Aisha likes to create patterns by alternating the colors of the ribbons. However, she wants to maximize the total length of the pattern she creates. Specifically, she wants to create a pattern that alternates between red and blue ribbons starting with either color and uses all the ribbons of one color first before moving to the next color, but she cannot cut any ribbon to make it shorter. Given two arrays, Red and Blue, representing the lengths of red and blue ribbons respectively, you need to help Aisha find the maximum total length of the pattern she can create. Input Format: The first line contains an integer, tc, denoting the number of test cases. For each test case: - The first line contains an integer, n, denoting the number of red ribbons. - The next line contains n integers, denoting the lengths of the red ribbons. - The following line contains an integer, m, denoting the number of blue ribbons. - The next line contains m integers, denoting the lengths of the blue ribbons. Output Format: For each test case, print a single integer, the maximum possible total length of the pattern Aisha can create. Constraints: 1 ≤ Test Cases ≤ 50 1 ≤ n, m ≤ 1000 1 ≤ Length of each ribbon ≤ 10^6 SAMPLE INPUT 2 3 4 2 7 4 6 5 3 8 2 5 5 3 2 4 3 SAMPLE OUTPUT 44 24 Explanation: In the first test case, one possible pattern is using the red ribbons first (4 + 2 + 7) and then alternating with all blue ribbons (8 + 6 + 5 + 3), which gives the maximum total length of 35+9 = 44. In the second test case, starting with blue ribbons results in (4 + 5 = 9) and then alternating with (5 + 3 + 2), which gives the maximum total length of 24.","solution":"def max_pattern_length(tc, test_cases): results = [] for i in range(tc): red_lengths = test_cases[i][1] blue_lengths = test_cases[i][3] red_sum = sum(red_lengths) # Sum of all red ribbons blue_sum = sum(blue_lengths) # Sum of all blue ribbons # Possible patterns are: # 1. Use all red ribbons first and then all blue ribbons # 2. Use all blue ribbons first and then all red ribbons result = red_sum + blue_sum results.append(result) return results"},{"question":"Write a function that takes two lists as input and returns a list of elements that are common to both lists. Ensure the function handles duplicate elements appropriately, such that if an element occurs multiple times in both lists, it should be included in the result the minimum number of times it occurs in either list. Example: Input: list1 = [1, 2, 2, 3, 4] list2 = [2, 2, 3, 5] Output: common_elements = [2, 2, 3] Input: list1 = [\'a\', \'b\', \'b\', \'c\'] list2 = [\'b\', \'b\', \'c\', \'d\'] Output: common_elements = [\'b\', \'b\', \'c\'] Input: list1 = [1, 1, 1, 2] list2 = [1, 1, 3, 4] Output: common_elements = [1, 1]","solution":"def common_elements(list1, list2): Returns a list of elements that are common to both input lists. If an element occurs multiple times in both lists, it will be included in the result the minimum number of times it occurs in either list. # Dictionary to count occurrences of elements in both lists count1 = {} count2 = {} for item in list1: count1[item] = count1.get(item, 0) + 1 for item in list2: count2[item] = count2.get(item, 0) + 1 # Finding common elements common = [] for item in count1: if item in count2: common.extend([item] * min(count1[item], count2[item])) return common"},{"question":"A magical forest is home to n magical creatures, and each creature can be friends with some of the other creatures. Connections of friendship are represented as undirected edges between the creatures. The forest holds an interesting event where the goal is to divide all the creatures into two groups such that each creature in one group can only have friends in the other group. Help the magical forest organizers to determine if such a division is possible, and if it is possible, provide the two groups. Input The first line of the input contains two integers: n — the number of magical creatures and m — the number of friendship connections (1 ≤ n ≤ 104, 0 ≤ m ≤ 104). The following m lines contain pairs of integers a and b (1 ≤ a, b ≤ n) indicating a friendship between creatures a and b. No friendship connection is repeated in the input. Output If it is possible to divide the magical creatures into two groups as described, output \\"YES\\" on the first line. On the second line, print the indexes of all creatures in Group 1, and on the third line print the indexes of all creatures in Group 2. The creatures in each group should be listed in ascending order. If it is not possible to make such a division, output \\"NO\\". Examples Input 5 4 1 2 2 3 3 4 4 5 Output YES 1 3 5 2 4 Input 4 3 1 2 2 3 3 4 Output YES 1 3 2 4 Input 3 3 1 2 2 3 3 1 Output NO","solution":"def is_bipartite(n, m, connections): from collections import deque, defaultdict def bfs(start): queue = deque([start]) color[start] = 0 # start node is colored with 0 group1.append(start) # add to group 1 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: # not colored yet color[neighbor] = 1 - color[node] # alternate color queue.append(neighbor) if color[neighbor] == 0: group1.append(neighbor) else: group2.append(neighbor) elif color[neighbor] == color[node]: return False return True graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) color = [-1] * (n + 1) group1 = [] group2 = [] for i in range(1, n + 1): if color[i] == -1: if not bfs(i): return \\"NO\\" group1.sort() group2.sort() return f\\"YESn{\' \'.join(map(str, group1))}n{\' \'.join(map(str, group2))}\\""},{"question":"Mike has N chocolates and wants to distribute them among his friends such that each friend gets exactly M chocolates. He wants to know if it\'s possible to distribute all the chocolates this way. ------ Input Format ------ - The first line of input will contain two space-separated integers, N and M, representing the number of chocolates and the number of chocolates each friend should get, respectively. ------ Output Format ------ Print a single line containing Yes if it is possible to distribute all chocolates such that each friend gets exactly M chocolates, otherwise print No. You may print each character of the string in uppercase or lowercase (for example, the strings yes, Yes, yEs, and YES will all be treated as identical). ------ Constraints ------ 1 ≤ N, M ≤ 10^{5} ------ subtasks ------ Subtask 1 (100 points): Original constraints. ----- Sample Input 1 ------ 10 2 ----- Sample Output 1 ------ Yes ----- explanation 1 ------ 10 chocolates can be distributed to 5 friends with each getting exactly 2 chocolates. ----- Sample Input 2 ------ 9 2 ----- Sample Output 2 ------ No ----- explanation 2 ------ 9 chocolates cannot be evenly distributed among friends where each gets exactly 2 chocolates. ----- Sample Input 3 ------ 15 3 ----- Sample Output 3 ------ Yes ----- explanation 3 ------ 15 chocolates can be distributed to 5 friends with each getting exactly 3 chocolates.","solution":"def can_distribute_chocolates(N, M): Determines whether it is possible to distribute N chocolates among friends such that each friend gets exactly M chocolates. Args: N (int): Total number of chocolates. M (int): Number of chocolates each friend should get. Returns: str: \'Yes\' if possible, otherwise \'No\'. return \'Yes\' if N % M == 0 else \'No\'"},{"question":"Given a list of n integers, find the integer that appears most frequently. If there are multiple integers that appear with the same highest frequency, return the smallest integer among them. Constraints: * 1 ≤ n ≤ 1000 * 1 ≤ ai ≤ 1000 Input: n a1 a2 ... an The integer n is given in the first line. Then, n integers are given in the second line. Output: Print the integer that appears most frequently. If multiple integers have the same highest frequency, print the smallest one among them. Examples: Input: 6 1 2 2 3 3 1 Output: 1 Input: 5 3 3 2 2 1 Output: 2","solution":"def most_frequent_integer(n, arr): Returns the integer that appears most frequently in the list `arr`. If multiple integers have the same highest frequency, returns the smallest one among them. from collections import Counter count = Counter(arr) max_frequency = max(count.values()) most_frequent_numbers = [num for num, freq in count.items() if freq == max_frequency] return min(most_frequent_numbers)"},{"question":"A group of robots are located in a 2D grid, each capable of moving in straight lines either along rows (direction \'R\') or along columns (direction \'C\') at a constant speed. Two robots vanish whenever they pass through the same cell at the same time. You need to find the final number of robots remaining in the grid after an unlimited period. Input The first line contains a single integer T, the number of test cases. Each test case starts with an integer N, the number of robots. Next, there are N lines, each containing three integers x, y, v representing the initial position (x, y) of the robot and its direction of movement (v = \'R\' or \'C\'). Output For each test case, output a single line containing the number of robots left in the grid at the end. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 50 -1000 ≤ x, y ≤ 1000 v can be either \'R\' or \'C\' SAMPLE INPUT 1 3 1 2 R 3 4 C 1 4 R SAMPLE OUTPUT 1 Explanation In this scenario, the first robot (1,2) moves along the row to the right, and the second robot (3,4) moves upwards along the column. The third robot (1,4) also moves along the row. The robots starting at (3,4) and (1,4) will never collide, but the first robot and the third robot will overlap at position (1,4) at t=2, thus vanishing. Therefore, only one robot will be left in the end.","solution":"def remaining_robots(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] robots = test_cases[i][1] # Tracking coordinates as keys with a set of robots present at each coordinate. coordinates = {} for robot in robots: x, y, direction = robot if direction == \'R\': for x_pos in range(x, 1001): if (x_pos, y) not in coordinates: coordinates[(x_pos, y)] = set() coordinates[(x_pos, y)].add(robot) else: for y_pos in range(y, 1001): if (x, y_pos) not in coordinates: coordinates[(x, y_pos)] = set() coordinates[(x, y_pos)].add(robot) robots_set = set(tuple(robot) for robot in robots) for coord in coordinates: if len(coordinates[coord]) > 1: # If more than one robot is in the set for a coordinate, they vanish. robots_set -= coordinates[coord] results.append(len(robots_set)) return results"},{"question":"Dr. Adams is researching a specific type of number transformation and calls it ‘Digit Swap Square’. A number is transformed by swapping any two of its digits once. If any such permutation leads to a number that is a perfect square, then the original number is considered a Digit Swap Square. For example, 81 becomes a perfect square (81) when swapping digits 8 and 1. Your task is to write a program that, given Q queries, each asking if a number N is a Digit Swap Square, outputs \\"YES\\" if it is and \\"NO\\" otherwise. Input: First line contains a single integer Q denoting the number of queries. Next Q lines contain one integer N (the number to be checked). Output: For each query, print \\"YES\\" if the number is a Digit Swap Square, otherwise print \\"NO\\". Constraints: 1 ≤ Q ≤ 10^5 1 ≤ N ≤ 10^6 SAMPLE INPUT 3 13 82 144 SAMPLE OUTPUT NO YES NO Explanation Query 13: Swapping 1 and 3 gives 31 which is not a perfect square; hence, the output is \\"NO\\". Query 82: Swapping 8 and 2 gives 28 which is not a perfect square but the original number 82 is already a perfect square, hence the output is \\"YES\\". Query 144: Swapping 1, 4, and 4 leads to [414, 144, 414], none of which considering original number 144 results in a perfect square; hence, the output is \\"NO\\".","solution":"import math def is_perfect_square(x): Returns True if x is a perfect square, False otherwise. root = int(math.sqrt(x)) return root * root == x def digit_swap_square(q, queries): For each number in queries, check if any permutation of its digits (including the number itself) is a perfect square. Returns a list of \\"YES\\" or \\"NO\\". results = [] for number in queries: digit_list = list(str(number)) found = False # Generate all unique permutations of the digits for i in range(len(digit_list)): for j in range(i+1, len(digit_list)): # Swap digits i and j digit_list[i], digit_list[j] = digit_list[j], digit_list[i] permuted_number = int(\'\'.join(digit_list)) if is_perfect_square(permuted_number): found = True break # Swap back to original digit_list[i], digit_list[j] = digit_list[j], digit_list[i] if found: break if is_perfect_square(number) or found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function called `mergeArrays` that takes two sorted arrays of integers and returns a single sorted array that contains all the elements from both input arrays. The function should maintain the sorted order of elements and not use any built-in sorting methods. Here are some examples of how your function should work: - `mergeArrays([1, 3, 5], [2, 4, 6])` should return `[1, 2, 3, 4, 5, 6]` - `mergeArrays([0, 2, 2], [1, 3, 4])` should return `[0, 1, 2, 2, 3, 4]` - `mergeArrays([-5, 0, 3], [-3, 2, 4])` should return `[-5, -3, 0, 2, 3, 4]` Constraints: - The arrays could be of different lengths. - The function should handle empty arrays as well. - The elements of the arrays will be integers in the range of -10^9 to 10^9. Your implementation should be efficient in terms of time complexity.","solution":"def mergeArrays(arr1, arr2): Given two sorted arrays, merge them into a single sorted array. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"You are given an integer M. Calculate the M-th Tribonacci number. The Tribonacci sequence T_i is defined as follows: - T_0=0 - T_1=1 - T_2=1 - T_i=T_{i-1}+T_{i-2}+T_{i-3} (i≥3) -----Constraints----- - 1≤M≤35 - It is guaranteed that the answer is less than 10^9. - M is an integer. -----Input----- Input is given from Standard Input in the following format: M -----Output----- Print the M-th Tribonacci number. -----Sample Input----- 6 -----Sample Output----- 11 - T_0=0 - T_1=1 - T_2=1 - T_3=T_2+T_1+T_0=2 - T_4=T_3+T_2+T_1=4 - T_5=T_4+T_3+T_2=7 - T_6=T_5+T_4+T_3=13 Thus, the 6-th Tribonacci number is 13.","solution":"def calculate_tribonacci(M): Calculate the M-th Tribonacci number. if M == 0: return 0 elif M == 1 or M == 2: return 1 tribonacci_sequence = [0, 1, 1] for i in range(3, M + 1): next_tribonacci = tribonacci_sequence[-1] + tribonacci_sequence[-2] + tribonacci_sequence[-3] tribonacci_sequence.append(next_tribonacci) return tribonacci_sequence[M]"},{"question":"You are given an integer matrix M of size NxN. Your goal is to rearrange the matrix in a specific way such that the sum of all elements in each row remains the same as the original but with the minimum possible maximum element in any row after rearrangement. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - The first line of each test case contains an integer N, the size of the matrix. - Next N lines of each test case contain N integers separated by space, representing the matrix M. ------ Output Format ------ For each test case, output the rearranged matrix on a new line. Each matrix should be output in N lines with N integers on each line, separated by space. If multiple arrangements are possible, print any of them. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 20 ----- Sample Input 1 ------ 1 3 4 1 7 8 2 3 6 5 9 ----- Sample Output 1 ------ 5 4 3 6 3 7 8 1 9 ----- Explanation 1 ------ For the test case, one possible rearrangement of the matrix is: ``` 5 4 3 6 3 7 8 1 9 ``` The sum of each row in both the original and rearranged matrix is 12, but the highest value in any row of the rearranged matrix is 9, which is minimized compared to the possible maximum from the original input. Other rearrangements might also be possible yielding the same sum and similar minimized maximum values in the rows.","solution":"def rearrange_matrix_minimize_max_element(T, test_cases): def rearrange_minimize_max(matrix, N): sorted_elements = sorted([element for row in matrix for element in row]) rearranged = [[0] * N for _ in range(N)] idx = 0 for i in range(N): for j in range(N): rearranged[i][j] = sorted_elements[idx] idx += 1 return rearranged results = [] for t in range(T): N = test_cases[t][0] matrix = test_cases[t][1] rearranged_matrix = rearrange_minimize_max(matrix, N) results.append(rearranged_matrix) return results"},{"question":"In a small village called AlgoTown, there is a unique tradition where people celebrate by creating pyramid structures using stones. Each day, they add a new layer to each pyramid. The layer added on the ith day requires ai stones. The villagers have M different types of stones in unlimited quantity, but each type of stone has a specific weight associated with it. The festival spans N days, and on each day, they will add a new layer to the pyramid with the stones of a specific type. For a given day, they will always prefer the lightest available stone type if it can fulfill the requirement for that day’s layer. If the chosen stone type does not have enough weight to meet the requirement of the day\'s layer, they will switch to the next lightest stone type until the requirement is met. Given a list a where ai denotes the number of stones required on the ith day and a list weights of length M where weights[j] is the weight of the jth stone type, find the minimum total weight of stones used over the N days, following the tradition. Input format: - The first line contains two integers N and M denoting the number of festival days and the number of different stone types respectively. - The second line contains N integers, where the ith integer denotes ai, the number of stones required on the ith day. - The third line contains M integers, where the jth integer denotes weights[j], the weight of the jth stone type. Output format: - Output a single integer denoting the minimum total weight of stones used over the festival days. Constraints: 1 <= N, M <= 10^5 1 <= ai, weights[j] <= 10^9 Sample Input: 5 3 4 6 5 8 7 2 3 1 Sample Output: 80 Explanation: In this example, the villagers try to use the lightest stones possible for each day\'s requirement: - 1st day: 4 stones with weight 1 => 4 * 1 = 4 - 2nd day: 6 stones with weight 1 => 6 * 1 = 6 - 3rd day: 5 stones with weight 1 => 5 * 1 = 5 - 4th day: 8 stones with weight 1 => 8 * 1 = 8 - 5th day: 7 stones with weight 1 => 7 * 1 = 7 So, the total weight is 4+6+5+8+7 = 30. In this case, the output is 30. However, if there are situations where the lightest stones cannot fulfill the day\'s requirement, higher weighted stones are used to meet the requirement, ensuring the minimum total weight used across all days.","solution":"def minimum_total_weight(n, m, a, weights): weights.sort() total_weight = 0 for stones_required in a: for weight in weights: total_weight += stones_required * weight break # Since we\'ve used the lightest stone for this day return total_weight"},{"question":"You are given a grid consisting of \'m\' rows and \'n\' columns where each cell contains an integer. Two players, Alice and Bob, take turns picking any positive integer from the grid. The game ends when all positive integers are picked. Alice starts the game first. Each player wants to maximize their score, which is the sum of the picked values. You need to determine if Alice can always win, assuming both players play optimally. The input consists of multiple test cases. Input: - The first line contains a single integer t (1 ≤ t ≤ 10), the number of test cases. - For each test case: - The first line contains two integers m and n (1 ≤ m, n ≤ 100), the number of rows and columns in the grid. - Each of the next \'m\' lines contains \'n\' integers representing the grid cells (0 ≤ grid[i][j] ≤ 1000). Output: - For each test case, print \\"Alice\\" if Alice can guaranteedly win, otherwise print \\"Bob\\". Example: Input: 2 2 2 1 2 3 4 3 3 1 0 3 0 2 0 0 0 4 Output: Alice Alice Note: To solve this problem optimally, you need to analyze the structure of the grid and calculate the sum of all integers for each player\'s turn, assuming they always pick the highest available option. Alice wins if after following this strategy, her score is strictly greater than Bob\'s score at the end of the game.","solution":"def can_alice_win(m, n, grid): Returns whether Alice can guarantee a win given the grid. Alice wins if her score is strictly greater than Bob\'s when both play optimally. # Collect all positive integers from the grid values = [] for row in grid: for value in row: if value > 0: values.append(value) # Sort in descending order to always take the maximum first values.sort(reverse=True) # Scores of Alice and Bob alice_score = 0 bob_score = 0 # Distribute turns for i in range(len(values)): if i % 2 == 0: alice_score += values[i] else: bob_score += values[i] return \\"Alice\\" if alice_score > bob_score else \\"Bob\\" def solve(t, test_cases): results = [] for i in range(t): m, n, grid = test_cases[i] result = can_alice_win(m, n, grid) results.append(result) return results"},{"question":"In a software development company, each project is assigned a unique identifier as a string of the form \\"AXYZ\\" where: - \'A\' can be one of the following letters: \'P\', \'Q\', \'R\', \'S\' - \'XYZ\' represents a three-digit integer (i.e., from \'000\' to \'999\') You are tasked with developing a system to manage project identifiers. Specifically, you need to implement a function that generates the next project identifier given the current identifier. The new identifier should increment the three-digit integer part by 1. If the three-digit integer part reaches \'999\', the next identifier should continue from \'000\' and the letter part should follow the sequence \'P\' -> \'Q\' -> \'R\' -> \'S\' -> \'P\' (cycling back to \'P\' after \'S\'). Implement a function that follows the specified requirements: ``` def next_project_identifier(current_id: str) -> str: pass ``` **Input** - The function receives a string `current_id` representing the current project identifier (e.g., \\"P001\\"). **Output** - The function should return a string representing the next project identifier in the sequence. **Examples** ``` next_project_identifier(\\"P001\\") -> \\"P002\\" next_project_identifier(\\"P999\\") -> \\"Q000\\" next_project_identifier(\\"S999\\") -> \\"P000\\" next_project_identifier(\\"Q256\\") -> \\"Q257\\" ``` **Note** In the first example, the three-digit integer part increments normally from \\"001\\" to \\"002\\". In the second example, incrementing \\"P999\\" results in the next identifier \\"Q000\\". In the third example, after \\"S999\\" cycles back to the start of the sequence, resulting in \\"P000\\". In the fourth example, the function simply increments \\"Q256\\" to \\"Q257\\".","solution":"def next_project_identifier(current_id: str) -> str: # Letter sequence in order letters = [\'P\', \'Q\', \'R\', \'S\'] # Extract the letter part and the numeric part from the current_id letter_part = current_id[0] number_part = int(current_id[1:]) # Increment the numeric part number_part += 1 # Check if the numeric part exceeds the 999 limit if number_part > 999: number_part = 0 # Reset to 000 # Get the next letter in sequence, cycling back to \'P\' after \'S\' letter_index = letters.index(letter_part) next_letter_index = (letter_index + 1) % len(letters) letter_part = letters[next_letter_index] # Format the new identifier new_id = f\\"{letter_part}{number_part:03d}\\" return new_id"},{"question":"-----Problem description.----- You are to determine whether a given year is a leap year or not based on the Gregorian calendar rules. A leap year is exactly divisible by 4, but not by 100, unless it is also divisible by 400. -----Input----- - The first line of the input contains an integer T, the number of test cases. - The next T lines each contain a single integer Y, representing the year to be checked. -----Output----- - For each test case, output \\"Yes\\" if the year is a leap year, otherwise output \\"No\\". -----Constraints----- - 1 ≤ T ≤ 105 - 1 ≤ Y ≤ 109 -----Example----- Input: 3 2020 1900 2000 Output: Yes No Yes -----Explanation----- - 2020 is a leap year because it is divisible by 4 and not by 100. - 1900 is not a leap year because it is divisible by 100 and not by 400. - 2000 is a leap year because it is divisible by 400.","solution":"def is_leap_year(year): Determine if a given year is a leap year. Args: year (int): The year to check. Returns: str: \\"Yes\\" if the year is a leap year, otherwise \\"No\\". if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return \\"Yes\\" else: return \\"No\\" def leap_years(T, years): Process multiple years to determine if they are leap years. Args: T (int): Number of test cases. years (list of int): List of years to be checked. Returns: list of str: List of \\"Yes\\" or \\"No\\" for each year. results = [] for year in years: results.append(is_leap_year(year)) return results"},{"question":"You are given an array of integers `nums` and an integer `K`. Each element in the array represents the height of a tower. You can increase or decrease the height of each tower by 1 up to K times. Return the minimum possible difference between the height of the tallest tower and the height of the shortest tower after modifying the heights. Example 1: Input: nums = [1, 5, 8, 10], K = 2 Output: 5 Explanation: Modify the array as follows: [3, 3, 6, 8] The difference between the tallest and the shortest is 8 - 3 = 5. Example 2: Input: nums = [3, 9, 12, 16, 20], K = 3 Output: 11 Explanation: Modify the array as follows: [6, 6, 9, 13, 17] The difference between the tallest and the shortest is 17 - 6 = 11. Constraints: - 1 <= nums.length <= 10^4 - 1 <= nums[i] <= 10^4 - 0 <= K <= 10^4","solution":"def min_difference(nums, K): Returns the minimum possible difference between the height of the tallest tower and the height of the shortest tower after modifying the heights. if not nums: return 0 nums.sort() n = len(nums) current_diff = nums[-1] - nums[0] for i in range(n - 1): high = max(nums[-1] - K, nums[i] + K) low = min(nums[0] + K, nums[i + 1] - K) current_diff = min(current_diff, high - low) return current_diff"},{"question":"You are given a grid with N rows and M columns. Each cell of the grid contains a non-negative integer. Two players play a game taking turns. On each turn, a player can choose any cell and increment its value by 1. The game ends when all the cells in the grid contain the same value. The player who cannot make a move because the game has already ended is the loser. Determine the winner of the game assuming both players play optimally. Example 1: Input: N = 2, M = 2 Grid = [[1, 2], [2, 2]] Output: First Explanation: First player increment the value of cell (0,0) to 2. Now all cells have the same value 2, and the game ends. Example 2: Input: N = 3, M = 3 Grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]] Output: Second Explanation: Regardless of which cell the first player increments, the second player will always have a move to balance out the game. Thus, the second player will always win. Your Task: You don\'t need to read input or print anything. Complete the function gridGame() which takes two integers N and M, and a 2D integer array Grid as input parameters and returns a string denoting the winner of the game (\\"First\\" if the first player wins, \\"Second\\" if the second player wins). Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(1) Constraints: 1 <= N, M <= 500 0 <= Grid[i][j] <= 10^9","solution":"def gridGame(N, M, Grid): max_value = max(max(row) for row in Grid) total_moves = sum(max_value - Grid[i][j] for i in range(N) for j in range(M)) if total_moves % 2 == 1: return \\"First\\" else: return \\"Second\\""},{"question":"You are given an array of n integers a_1, a_2, ldots, a_n. An integer x is called a **special element** if it satisfies the following properties: 1. x appears exactly once in the array. 2. The sum of elements to the left of x is equal to the sum of elements to the right of x. Determine if there is any special element in the array. -----Input----- The first line contains an integer t (1 le t le 100) – the number of test cases. Each test case contains two lines. - The first line contains an integer n (3 le n le 2 cdot 10^5). - The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9). The sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, output \\"YES\\" (without quotes) if there is at least one special element in the array. Otherwise, output \\"NO\\" (without quotes). -----Examples----- Input 3 5 1 2 3 2 1 4 1 2 3 4 6 1 2 3 4 3 2 Output YES NO NO -----Note----- In the first test case, the third element 3 is the special element because the sum of elements to its left 1 + 2 = 3 is equal to the sum of elements to its right 2 + 1 = 3, and it appears exactly once in the array. In the second test case, there are no elements that satisfy both properties. In the third test case, although the first 3 has equal sums of elements on both sides, it appears more than once in the array, so there\'s no special element.","solution":"def is_special_element_exist(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] total_sum = sum(arr) left_sum = 0 found = False counts = {} for num in arr: if num in counts: counts[num] += 1 else: counts[num] = 1 for j in range(n): current = arr[j] if counts[current] == 1: right_sum = total_sum - left_sum - current if left_sum == right_sum: results.append(\\"YES\\") found = True break left_sum += current if not found: results.append(\\"NO\\") return results"},{"question":"A landscape company wants to create a rectangular garden within a given plot of land. The garden needs to be as large as possible while still fitting inside the plot and maintaining a margin of at least x units of space all around it. Write a function to determine the dimensions of the largest possible garden that can be created. -----Input----- The first line contains three integers, w, h, and x (0 ≤ x ≤ min(w, h)), where w is the width of the plot, h is the height of the plot, and x is the margin required around the garden. -----Output----- Print two integers, g_w and g_h, where g_w is the width of the largest garden and g_h is the height of the largest garden. -----Examples----- Example 1: Input 10 8 1 Output 8 6 Example 2: Input 15 12 2 Output 11 8 Example 3: Input 20 10 3 Output 14 4 Example 4: Input 5 5 1 Output 3 3","solution":"def largest_garden_dimensions(w, h, x): Determines the dimensions of the largest possible rectangular garden that can fit inside a plot of width w, height h, and maintaining a margin of at least x units of space all around it. Parameters: w (int): Width of the plot. h (int): Height of the plot. x (int): Margin required around the garden. Returns: tuple: Dimensions of the largest garden (width, height) g_w = w - 2 * x g_h = h - 2 * x return (g_w, g_h)"},{"question":"Write a function to determine if a given matrix is a magic square. A magic square is a grid of distinct numbers where the sum of the numbers in each row, each column, and the two main diagonals are all equal. Example 1: Input: N = 3 Matrix = [ [8, 1, 6], [3, 5, 7], [4, 9, 2] ] Output: 1 Explanation: Each row, column, and both diagonals sum to 15. Hence, the matrix is a magic square. Example 2: Input: N = 3 Matrix = [ [8, 1, 6], [3, 5, 7], [4, 9, 3] ] Output: 0 Explanation: The sum of the numbers in the last column and the main diagonals do not match. Hence, the matrix is not a magic square. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isMagicSquare() which takes the integer N and a 2D array Matrix as input parameters and returns 1 if the matrix is a magic square. Otherwise, it returns 0. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 100 1 <= Matrix[i][j] <= 1000","solution":"def isMagicSquare(N, Matrix): Determine if the given NxN matrix is a magic square. A magic square is a grid of distinct numbers where the sum of the numbers in each row, each column, and the two main diagonals are all equal. Params: N: int: Dimension of the matrix (N x N) Matrix: List[List[int]]: 2D array representing the matrix Returns: int: 1 if the matrix is a magic square, otherwise 0 # Calculate the sum of the first row as the target sum target_sum = sum(Matrix[0]) # Check sums of all rows for row in Matrix: if sum(row) != target_sum: return 0 # Check sums of all columns for col in range(N): col_sum = 0 for row in range(N): col_sum += Matrix[row][col] if col_sum != target_sum: return 0 # Check sum of the main diagonal (top-left to bottom-right) main_diag_sum = 0 for i in range(N): main_diag_sum += Matrix[i][i] if main_diag_sum != target_sum: return 0 # Check sum of the other diagonal (top-right to bottom-left) other_diag_sum = 0 for i in range(N): other_diag_sum += Matrix[i][N - 1 - i] if other_diag_sum != target_sum: return 0 return 1"},{"question":"You are an assistant to a celebrity chef who is developing a unique diet plan. The diet plan involves selecting various dishes each with a specific calorie count. Your task is to analyze the daily diet logs and identify the day where the total calorie intake is closest to a specified target without exceeding it. * The diet plan lasts for D days and each day consists of a list of dishes, each with a specified calorie count. * You want to help the chef find which day has a total calorie count closest to the target calories without exceeding it. * If multiple days have the same total calorie count, choose the earliest day in the plan. Write a program that takes the number of days D, the target calorie count T, and the list of dishes for each day as input, and outputs the day number which has the total calorie count closest to the target without exceeding it. Input: * The first line contains two integers, D (1 ≤ D ≤ 1000) and T (1 ≤ T ≤ 100000), representing the number of days and the target calorie count respectively. * The next D blocks follow, each representing a day\'s intake, starting with an integer N (1 ≤ N ≤ 100), the number of dishes that day, followed by N integers representing the calorie count of each dish (1 ≤ calories ≤ 1000). Output: * Output a single integer representing the day number with the total calorie count closest to T without exceeding it. Days are numbered starting from 1. Example: Input: 3 1500 3 800 600 300 2 1000 400 4 200 300 700 500 Output: 2 Explanation: - Day 1\'s total calorie count is 800 + 600 + 300 = 1700, which exceeds the target. - Day 2\'s total calorie count is 1000 + 400 = 1400, which is the closest to 1500 without exceeding it. - Day 3\'s total calorie count is 200 + 300 + 700 + 500 = 1700, which exceeds the target. Hence, the output is 2.","solution":"def find_best_day_closest_to_target(D, T, days): closest_day = -1 closest_calories = -1 for day_index in range(D): daily_dishes = days[day_index] daily_calories = sum(daily_dishes) if daily_calories <= T and daily_calories > closest_calories: closest_calories = daily_calories closest_day = day_index + 1 # converting 0-based index to 1-based day number return closest_day"},{"question":"You are given an array of integers where every element appears exactly twice, except for two elements which appear only once. Find the two elements that appear only once. The solution should have a linear runtime complexity and use only constant extra space. -----Input----- The input consists of a single integer n (2 le n le 10^5, n is an even number) — the size of the array, followed by n integers separated by a space representing the elements of the array. -----Output----- Output two integers that are the elements which appear only once. Ensure the two integers are output in increasing order. -----Examples----- Input 8 1 2 1 3 2 5 4 4 Output 3 5 Input 6 7 9 7 8 10 10 Output 8 9 -----Note----- In the first example, 1 and 2 appear twice, while 3 and 5 appear only once. In the second example, 7 and 10 appear twice, while 8 and 9 appear only once.","solution":"def find_two_non_repeating_numbers(numbers): Finds and returns the two elements that appear only once in the array. The rest of the elements appear exactly twice. xor_result = 0 for num in numbers: xor_result ^= num # Get the rightmost set bit of xor_result rightmost_set_bit = xor_result & -xor_result # Divide elements into two groups based on the rightmost set bit num1 = 0 num2 = 0 for num in numbers: if (num & rightmost_set_bit) == 0: num1 ^= num else: num2 ^= num return sorted([num1, num2])"},{"question":"Alice loves playing with sequences. Recently, she came across a sequence of integers and wondered if she could determine the longest contiguous subsequence that is strictly increasing. Given an integer sequence, a contiguous subsequence is a sequence derived by deleting zero or more elements from the sequence such that the remaining elements are contiguous and in order. For example, in the sequence [3, 2, 5, 1, 7], the contiguous subsequence [3, 5, 7] is strictly increasing. Alice needs your help to find the length of the longest contiguous subsequence that is strictly increasing. Can you help her? -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers representing the sequence. -----Output----- For each test case, print a single line containing one integer — the length of the longest strictly increasing contiguous subsequence. -----Constraints----- - 1 le T le 100 - 1 le N le 1000 - -1000 le Each element of the sequence le 1000 -----Subtasks----- Subtask #1 (100 points): original constraints -----Example Input----- 2 5 3 2 5 1 7 6 1 2 3 4 5 6 -----Example Output----- 2 6 -----Explanation----- Example case 1: The longest strictly increasing contiguous subsequence can be: - [3] - [2] - [5] - [1] - [7] Or - [3, 2] - [2, 5] - [1, 7] The maximum length is 2. Therefore, the answer is 2. Example case 2: The longest strictly increasing contiguous subsequence is the entire sequence itself, with a length of 6. Therefore, the answer is 6.","solution":"def longest_increasing_subsequence(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] sequence = test_cases[i][1] if n == 0: results.append(0) continue max_length = 1 current_length = 1 for j in range(1, n): if sequence[j] > sequence[j - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 results.append(max_length) return results"},{"question":"You have a set of N strings, each of length M. Your task is to determine if there exists a pair of strings (Si, Sj) such that they differ by exactly one character. If such a pair exists, print \\"YES\\"; otherwise, print \\"NO\\". Constraints * 2 leq N leq 10^5 * 1 leq M leq 100 * Strings consist of lowercase English letters only (a-z) Input Input is given from Standard Input in the following format: N M S_1 S_2 . . S_N Output Print \\"YES\\" if there exists a pair of strings that differ by exactly one character, otherwise print \\"NO\\". Examples Input 4 5 apple apply ample align Output YES Input 3 3 abc abc dbc Output YES Input 3 4 abcd efgh ijkl Output NO Explanation In the first example, \\"apple\\" and \\"apply\\" differ by exactly one character (the last character). In the second example, \\"abc\\" and \\"dbc\\" differ by exactly one character (the first character). In the third example, no pair of strings differs by exactly one character.","solution":"def check_one_diff_pair(N, M, strings): def differ_by_one(str1, str2): count_diff = 0 for i in range(len(str1)): if str1[i] != str2[i]: count_diff += 1 if count_diff > 1: return False return count_diff == 1 for i in range(N): for j in range(i + 1, N): if differ_by_one(strings[i], strings[j]): return \\"YES\\" return \\"NO\\""},{"question":"Given an integer array A of length N, compute the prefix sum array P where P[i] denotes the sum of elements from the start of the array up to the i-th element, inclusive. Then, find the sum of all unique values in the prefix sum array P. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer N - the length of the array. - The second line of each test case contains N integers separated by spaces - the elements of the array A. ------ Output Format ------ For each test case, output the sum of all unique values in the prefix sum array P. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^3 1 ≤ A[i] ≤ 10^3 ------ Sample Input 1 ------ 2 5 1 2 3 4 5 4 1 1 1 1 ------ Sample Output 1 ------ 15 10 ------ Explanation 1 ------ For the first test case: - Array A: [1, 2, 3, 4, 5] - Prefix sum array P: [1, 3, 6, 10, 15] - Sum of all unique values in P: 1 + 3 + 6 + 10 + 15 = 35 For the second test case: - Array A: [1, 1, 1, 1] - Prefix sum array P: [1, 2, 3, 4] - Sum of all unique values in P: 1 + 2 + 3 + 4 = 10","solution":"def compute_prefix_sum_array(A): Computes the prefix sum array for a given array A. P = [0] * len(A) P[0] = A[0] for i in range(1, len(A)): P[i] = P[i-1] + A[i] return P def sum_of_unique_prefix_sums(A): Computes the sum of all unique values in the prefix sum array. P = compute_prefix_sum_array(A) unique_values = set(P) return sum(unique_values) def process_test_cases(test_cases): Processes multiple test cases and returns the result for each test case. results = [] for case in test_cases: N, A = case result = sum_of_unique_prefix_sums(A) results.append(result) return results # Function to generate desired output format from input def main(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) A = list(map(int, lines[index + 1].strip().split())) test_cases.append((N, A)) index += 2 results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"Longest Balanced Parentheses Problem Statement: You are given a string consisting of only \'(\' and \')\'. Your task is to find the length of the longest balanced parentheses substring within the given string. A balanced parentheses substring is a substring that consists of matching opening and closing parentheses in the correct order. Input: - A single string S consisting of only \'(\' and \')\'. Output: - An integer representing the length of the longest balanced parentheses substring. Constraints: - 1 ≤ |S| ≤ 10^6 Example: Input (()()) Output 6 Input )()()) Output 4 Explanation: In the first example, the entire string \\"(()())\\" is a balanced substring with a length of 6. In the second example, the longest balanced substring is \\"()()\\", with a length of 4. Note that the last parenthesis does not have a matching opening parenthesis, so it is not part of the longest balanced substring.","solution":"def longest_balanced_parentheses(s): Returns the length of the longest balanced parentheses substring. :param s: A string consisting of only \'(\' and \')\'. :return: An integer representing the length of the longest balanced parentheses substring. max_length = 0 stack = [-1] for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if stack: max_length = max(max_length, i - stack[-1]) else: stack.append(i) return max_length"},{"question":"You are given a grid with ( R ) rows and ( C ) columns. Each cell contains a certain number of apples. Starting from the top-left corner of the grid (cell (1, 1)), you need to collect the maximum number of apples and reach the bottom-right corner (cell (R, C)). You can only move down or right at each step. Write a program to calculate the maximum number of apples you can collect on the way from the top-left corner to the bottom-right corner of the grid. -----Constraints----- - ( 1 leq R, C leq 1000 ) - ( 1 leq text{Number of apples in each cell} leq 100 ) -----Input----- Input is given from Standard Input in the following format: ``` R C grid_11 grid_12 ... grid_1C grid_21 grid_22 ... grid_2C . . . grid_R1 grid_R2 ... grid_RC ``` -----Output----- Print the maximum number of apples that can be collected. -----Sample Input----- 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output----- 29 There are multiple paths like 1→2→3→6→9 or 1→2→5→6→9 or 1→4→5→6→9 or 1→4→7→8→9, all collecting 29 apples.","solution":"def max_apples(R, C, grid): dp = [[0] * C for _ in range(R)] dp[0][0] = grid[0][0] for i in range(1, R): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, C): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, R): for j in range(1, C): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[R-1][C-1] # This function will fetch input, call the main logic, and print the result def main(): import sys input = sys.stdin.read data = input().strip().split() R = int(data[0]) C = int(data[1]) grid = [] idx = 2 for i in range(R): row = [int(data[idx + j]) for j in range(C)] grid.append(row) idx += C print(max_apples(R, C, grid))"},{"question":"F: Unique Pair Sums problem Given a sorted integer sequence A of length N and a positive integer K, find all unique pairs (i, j) (1 leq i < j leq N) such that the sum of A_i and A_j equals K. Output the total number of such unique pairs. Input format N K A_1 A_2 ... A_N Constraint * 2 leq N leq 10^5 * 1 leq K leq 2 times 10^5 * 1 leq A_i leq 10^5 * A is sorted in non-decreasing order * All inputs are given as integers Output format Print the answer on one line. Please start a new line at the end. Input example 1 5 6 1 2 3 4 5 Output example 1 2 * The pairs that sum up to 6 are (1, 5) and (2, 4). Input example 2 4 8 2 3 4 5 Output example 2 1 * The only pair that sums up to 8 is (3, 5). Input example 3 6 10 1 1 1 9 9 9 Output example 3 3 * The pairs that sum up to 10 are (1, 9), (1, 9), and (1, 9). However, since we need unique pairs, we consider only one occurrence of the pair (1, 9). Example Input 5 6 1 2 3 4 5 Output 2","solution":"def unique_pair_sums(n, k, arr): Given a sorted integer sequence arr of length n and a positive integer k, find all unique pairs (i, j) (0 <= i < j < n) such that the sum of arr[i] and arr[j] equals k. Parameters: n (int): Length of the sorted array. k (int): The target sum. arr (list of ints): The sorted array. Returns: int: The total number of unique pairs. left, right = 0, n - 1 count = 0 seen_pairs = set() while left < right: current_sum = arr[left] + arr[right] if current_sum == k: if (arr[left], arr[right]) not in seen_pairs: seen_pairs.add((arr[left], arr[right])) count += 1 left += 1 right -= 1 elif current_sum < k: left += 1 else: right -= 1 return count # Reading inputs and printing result if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) arr = list(map(int, data[2:])) print(unique_pair_sums(n, k, arr))"},{"question":"Given a set of intervals, merge all overlapping intervals and return the merged intervals in sorted order by their starting points. Each interval is represented as a pair of integers (start, end). -----Input----- Input consists of multiple lines. The first line contains an integer n representing the number of intervals (1 ≤ n ≤ 10000). The next n lines each contain a pair of integers (start, end) representing an interval. The start will always be less than or equal to end, and the values of start and end will be between -10000 and 10000. -----Output----- Display the merged intervals in sorted order. Each interval should be represented as a start and end pair, separated by a space, in a new line. -----Examples----- Sample Input 1: 3 1 4 2 5 8 10 Sample Output 1: 1 5 8 10 Sample Input 2: 4 0 1 3 5 4 8 10 12 Sample Output 2: 0 1 3 8 10 12","solution":"def merge_intervals(intervals): Merges overlapping intervals and returns the merged intervals sorted by their starting points. Args: intervals (List[List[int]]): List of intervals where each interval is a pair [start, end]. Returns: List[List[int]]: List of merged intervals. if not intervals: return [] # Sort intervals by their starting point intervals.sort(key=lambda x: x[0]) merged_intervals = [] current_interval = intervals[0] for interval in intervals: if interval[0] <= current_interval[1]: # Overlapping intervals, merge them current_interval[1] = max(current_interval[1], interval[1]) else: merged_intervals.append(current_interval) current_interval = interval # Update to the new interval # Don\'t forget to add the last interval merged_intervals.append(current_interval) return merged_intervals def read_input(): n = int(input().strip()) intervals = [list(map(int, input().strip().split())) for _ in range(n)] return intervals def print_output(intervals): for interval in intervals: print(f\\"{interval[0]} {interval[1]}\\")"},{"question":"John is managing an orchard in the shape of a rectangular grid with M rows and N columns. Each cell in the grid represents a specific tree, either an apple tree (denoted by \'A\') or an orange tree (denoted by \'O\'). However, due to some weather conditions, trees in certain cells have been damaged and are denoted by \'D\'. John wants to calculate the number of cells that contain apple trees. -----Constraints----- - M is an integer between 1 and 100 (inclusive). - N is an integer between 1 and 100 (inclusive). - The grid consists of only \'A\', \'O\', and \'D\' characters. -----Input----- Input is given from Standard Input in the following format: M N followed by M lines, each with N characters (either \'A\', \'O\', or \'D\'). -----Output----- Print the number of cells that contain apple trees. -----Sample Input----- 3 3 A O A D A O O D A -----Sample Output----- 4 In this case, there are 4 cells containing apple trees in the orchard.","solution":"def count_apple_trees(grid): Counts the number of cells that contain apple trees (\'A\') in a given grid. Parameters: grid (List[List[str]]): The MxN grid representing the orchard. Returns: int: The number of apple trees in the grid. apple_count = 0 for row in grid: apple_count += row.count(\'A\') return apple_count def parse_input(input_string): Parses the input string to extract M, N, and the grid. Parameters: input_string (str): The raw input string. Returns: Tuple[int, int, List[List[str]]]: M, N and the grid. lines = input_string.strip().split(\'n\') M, N = map(int, lines[0].split()) grid = [line.split() for line in lines[1:]] return M, N, grid def main(input_string): M, N, grid = parse_input(input_string) return count_apple_trees(grid)"},{"question":"A company wants to implement a system to monitor its employees\' check-in and check-out times to ensure compliance with working hours. Each employee logs their times using unique identification numbers. You need to provide functionality for logging, querying, and calculating total hours worked. Functionality: 1. `LOG_IN employee_id time` - Log an employee\'s check-in time. 2. `LOG_OUT employee_id time` - Log an employee\'s check-out time. 3. `QUERY employee_id day` - Calculate and return the total hours worked by the employee on a specific day. Constraints: - A single employee can check-in and check-out multiple times within a day. - All times are given in minutes since midnight. - Days are integer values representing consecutive days starting from 0. - Employee IDs are unique positive integers. - If there are no check-in or check-out entries for the given employee on the specified day, return 0. Input The first line contains an integer `n`, the number of log entries. Each of the next `n` lines represents a log entry in one of the following formats: - LOG_IN employee_id day time - LOG_OUT employee_id day time - QUERY employee_id day Output For each `QUERY` line in the input, output the total number of minutes worked by the specified employee on the specified day. Example Input 8 LOG_IN 101 0 540 LOG_OUT 101 0 600 LOG_IN 101 0 660 LOG_OUT 101 0 720 QUERY 101 0 LOG_IN 102 1 480 LOG_OUT 102 1 1020 QUERY 102 1 Output 120 540","solution":"def monitor_employee_logs(n, logs): from collections import defaultdict check_in_data = defaultdict(lambda: defaultdict(list)) check_out_data = defaultdict(lambda: defaultdict(list)) results = [] for log in logs: parts = log.split() action, emp_id, day = parts[0], int(parts[1]), int(parts[2]) if action == \\"LOG_IN\\": time = int(parts[3]) check_in_data[emp_id][day].append(time) elif action == \\"LOG_OUT\\": time = int(parts[3]) check_out_data[emp_id][day].append(time) elif action == \\"QUERY\\": total_minutes = 0 check_ins = check_in_data.get(emp_id, {}).get(day, []) check_outs = check_out_data.get(emp_id, {}).get(day, []) for in_time, out_time in zip(check_ins, check_outs): total_minutes += (out_time - in_time) results.append(total_minutes) return results"},{"question":"Write a program that takes three integers as input and outputs them in non-decreasing order. -----Input:----- - The input consists of three lines, each containing a single integer. -----Output:----- - Output a single line with the three integers sorted in non-decreasing order, separated by spaces. -----Constraints----- - −1000≤N1,N2,N3≤1000 -----Sample Input:----- 34 -4 7 -----Sample Output:----- -4 7 34","solution":"def sort_three_numbers(n1, n2, n3): Returns the three numbers sorted in non-decreasing order. return sorted([n1, n2, n3])"},{"question":"A company wants to implement a system that checks whether the given year is a leap year or not. As part of their plan, they want a microservice to provide this functionality. If it is a leap year, the system should print leap, otherwise it should print common. The rules for determining a leap year are as follows: 1. A year that is evenly divisible by 4 is a leap year. 2. However, if the year is also evenly divisible by 100, it is not a leap year, unless: 3. The year is evenly divisible by 400, in which case it is a leap year. Write a microservice that receives a year as an input and determines if that year is a leap year. -----Input----- The input consists of a single line containing an integer year. -----Output----- If the year is a leap year, output leap. Otherwise, output common. -----Examples----- Sample Input: 2000 Sample Output: leap Sample Input: 1900 Sample Output: common Sample Input: 2012 Sample Output: leap","solution":"def check_leap_year(year): Determines if the given year is a leap year. Arguments: year : int : The year to be checked. Returns: str : \\"leap\\" if the year is a leap year, \\"common\\" otherwise. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return \\"leap\\" else: return \\"common\\""},{"question":"A group of friends is planning a movie marathon. They have an array ‘movies’ where each element is the duration of a movie in minutes. To ensure they don\'t get too exhausted, they want to find the longest sequence of consecutive movies that they can watch without having the total duration exceed a given limit. Write a function to identify the length of this longest sequence. Function Description Complete the maxMovies function in the editor below. maxMovies has the following parameter(s): int movies[n]: an array of integers representing the duration of each movie int limit: the maximum total duration they are willing to watch Returns int: the length of the longest sequence of consecutive movies under the specified limit Input Format The first line contains T, the number of test cases. The next T pairs of lines each represent a test case. - The first line contains n, the number of movies in the array movies. - The second line contains n space-separated integers movies[i] where 0 ≤ i < n. - The third line contains an integer limit, the maximum total duration. Constraints 1 ≤ T ≤ 10 1 ≤ n ≤ 10^5 1 ≤ movies[i] ≤ 10^4 1 ≤ limit ≤ 10^8 Sample Input 0 1 6 100 200 150 300 50 100 400 Sample Output 0 3 Explanation 0 For the first and only test case, the maximum sequence length is found with movies[2] + movies[3] + movies[4] = 150 + 300 + 50 = 500 which exceeds the limit. However, movies[0] + movies[1] + movies[2] = 100 + 200 + 150 = 450 also exceeds the limit. Finally movies[3] + movies[4] + movies[5] = 300 + 50 + 100 = 450 exceeds the limit, but movies[4] + movies[5] + movies[3] = 50 + 100 + 300 = 450 which satisfies the limit. So, the longest sequence is of 3 consecutive movies.","solution":"def maxMovies(movies, limit): Finds the maximum length of consecutive movies whose total duration does not exceed the limit. Parameters: movies (list of int): List of movie durations. limit (int): Maximum allowable duration. Returns: int: The maximum length of consecutive movies under the specified limit. n = len(movies) max_length = 0 current_length = 0 current_sum = 0 start = 0 for end in range(n): current_sum += movies[end] current_length += 1 while current_sum > limit: current_sum -= movies[start] current_length -= 1 start += 1 max_length = max(max_length, current_length) return max_length"},{"question":"A software company is developing a new command-line application that processes a list of operations on a stack data structure. The stack supports the following operations: - \'push X\' - where X is an integer, pushes the integer onto the stack. - \'pop\' - pops the top element off the stack. - \'inc X Y\' - where X is the number of elements from the bottom to increment, and Y is the increment value. This operation increments the bottom X elements of the stack by Y. Your task is to simulate the stack operations and output the value on the top of the stack after each operation. If the stack is empty at any point when a \'pop\' operation is called, or when the \'top\' value is requested, print \\"EMPTY\\". # ---Input--- The first line of input contains an integer n (1 le n le 10^5) — the number of operations. The next n lines each contain one of three types of stack operations: - \'push X\' - where X is an integer (-10^9 le X le 10^9) - \'pop\' - \'inc X Y\' - where X is an integer (1 le X le 10^5) and Y is an integer (-10^9 le Y le 10^9) It is guaranteed that the sum of X values in \'inc\' operations and the overall number of operations will not exceed 10^5 # ---Output--- For each operation, output the value on the top of the stack after the operation is performed. If the stack is empty, output \\"EMPTY\\". # ---Example--- # Input 9 push 4 push 3 pop push 2 push 5 inc 3 1 pop pop pop # Output 4 3 4 2 5 2 5 1 EMPTY # Note 1. After the first operation, the stack is [4], top is 4. 2. After the second operation, the stack is [4, 3], top is 3. 3. After the third operation, [3] is popped, the stack is [4], top is 4. 4. After the fourth operation, the stack is [4, 2], top is 2. 5. After the fifth operation, the stack is [4, 2, 5], top is 5. 6. After the sixth operation, the bottom 3 elements are incremented by 1, so the stack is [5, 3, 6], top remains 6. 7. After the seventh operation, [6] is popped, the stack is [5, 3], top is 3. 8. After the eighth operation, [3] is popped, the stack is [5], top is 5. 9. After the ninth operation, [5] is popped, the stack is empty, so print \\"EMPTY\\".","solution":"def process_operations(n, operations): stack = [] result = [] for operation in operations: if operation.startswith(\'push\'): _, x = operation.split() stack.append(int(x)) elif operation == \'pop\': if stack: stack.pop() elif operation.startswith(\'inc\'): _, x, y = operation.split() for i in range(min(int(x), len(stack))): stack[i] += int(y) if stack: result.append(stack[-1]) else: result.append(\\"EMPTY\\") return result"},{"question":"A company\'s Communication System has been receiving an immense number of messages from various different clients. Each message contains an integer representing the time the message was sent. The company\'s system processes the messages by categorizing them into groups based on the similarity of their sending times. Two messages are considered similar if the absolute difference between their sending times is less than or equal to a given threshold k. A group can contain multiple similar messages, and a message can only belong to one group. You need to help the company group all the messages efficiently such that any two messages in a group have an absolute difference in their sending times that does not exceed k. Input The first line contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 109) — the number of messages and the similarity threshold respectively. The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 109) representing the times the messages were sent, sorted in non-decreasing order. Output Print a single integer g — the number of groups formed. Examples Input 5 2 1 2 3 4 7 Output 2 Input 6 0 1 3 5 7 9 11 Output 6 Note In the first example, the first four messages can be grouped together because the difference between the minimum and maximum times (1 and 4) is within the threshold of 2. The last message (time 7) does not fit in this group, so it forms a new group. In the second example, no two messages have a difference in their times that is 0, so each message forms its own group.","solution":"def count_groups(n, k, times): Counts the number of groups of messages based on the similarity threshold k. :param n: int - the number of messages :param k: int - the similarity threshold :param times: list of int - the times the messages were sent, sorted in non-decreasing order :return: int - the number of groups formed if n == 0: return 0 group_count = 1 prev_time = times[0] for i in range(1, n): if times[i] - prev_time > k: group_count += 1 prev_time = times[i] else: prev_time = max(prev_time, times[i]) return group_count"},{"question":"Captain America is planning a strategic fight against a group of HYDRA soldiers. The battlefield is represented as a 2D matrix of cells. Each cell can either be empty, occupied by a HYDRA soldier, or an obstacle. Captain America can throw his shield to strike down enemies, but the shield can only move in a straight line either horizontally or vertically and stop either at the battlefield\'s boundary or an obstacle. The task is to find the optimal use of Captain America\'s shield to strike down the maximum number of HYDRA soldiers in one throw. INPUT::: First line contains single integer T, the number of test cases. Each test case starts with two integers N and M (size of the battlefield matrix) followed by N lines each containing M integers representing the battlefield. The cells can be: - 0: representing an empty space, - 1: representing a HYDRA soldier, - -1: representing an obstacle. OUTPUT::: For every test case, output a single integer which indicates the maximum number of HYDRA soldiers Captain America can strike down in one efficient throw of his shield. CONSTRAINTS::: 1 ≤ T ≤ 10, 1 ≤ N, M ≤ 1000, SAMPLE INPUT 2 4 4 0 1 1 0 1 -1 1 0 1 1 1 0 0 0 0 0 5 5 0 1 0 0 0 0 -1 1 1 0 0 1 -1 0 1 0 0 0 0 0 1 0 1 0 1 SAMPLE OUTPUT 3 2 Explanation For the first test case: Captain America can throw his shield horizontally in the third row to strike down 1, 1, 1 resulting in 3 strikes, which is the maximum possible in one throw. For the second test case: The maximum strikes can be achieved either by throwing the shield vertically in the first column downing enemies at positions (2,2) and (3,2) or (5,1) and (5,3) resulting in a maximum of 2 fishermen in one throw.","solution":"def max_soldiers_destroyed(battlefield): N = len(battlefield) M = len(battlefield[0]) max_soldiers = 0 # Horizontal check for i in range(N): count = 0 for j in range(M): if battlefield[i][j] == -1: count = 0 elif battlefield[i][j] == 1: count += 1 max_soldiers = max(max_soldiers, count) else: count = 0 # Vertical check for j in range(M): count = 0 for i in range(N): if battlefield[i][j] == -1: count = 0 elif battlefield[i][j] == 1: count += 1 max_soldiers = max(max_soldiers, count) else: count = 0 return max_soldiers def solve(T, test_cases): results = [] for battlefield in test_cases: result = max_soldiers_destroyed(battlefield) results.append(result) return results"},{"question":"Given an array of integers `A` with size `N` and an integer `K`, rotate the array to the right by `K` steps and print the resulting array. -----Constraints----- - The length of the array `N` is between 1 and 100 (inclusive). - The integer values in the array are between -1000 and 1000 (inclusive). - `K` is a non-negative integer which can be greater than `N`. -----Input----- Input is given from Standard Input in the following format: N K A_1 A_2 ... A_N -----Output----- Print the resulting array after rotating it to the right by `K` steps. -----Sample Input----- 5 2 1 2 3 4 5 -----Sample Output----- 4 5 1 2 3 The array [1, 2, 3, 4, 5] rotated to the right by 2 steps results in [4, 5, 1, 2, 3].","solution":"def rotate_array_right(N, K, A): Rotates the array A to the right by K steps. Args: N : int : The size of the array A. K : int : The number of steps to rotate the array. A : list : The array of integers to be rotated. Returns: list : The rotated array. K = K % N # Handling cases where K is greater than N return A[-K:] + A[:-K]"},{"question":"# Task Given a list of strings, determine the number of strings that are palindromes when only considering their alphanumeric characters (ignore spaces, punctuation, and case). # Example For `input = [\\"A man, a plan, a canal, Panama!\\", \\"No lemon, no melon\\", \\"Hello, World!\\"]`, the output should be `2`. Explanation: 1. `\\"A man, a plan, a canal, Panama!\\"` becomes `amanaplanacanalpanama`, which is a palindrome. 2. `\\"No lemon, no melon\\"` becomes `nolemonnomelon`, which is a palindrome. 3. `\\"Hello, World!\\"` becomes `helloworld`, which is not a palindrome. Therefore, there are `2` palindromic strings. # Input/Output - `[input]` list of strings `s` Constraints: * `1 ≤ s.length ≤ 1000` * `1 ≤ len(s[i]) ≤ 1000` - `[output]` an integer The number of strings that are palindromic when considering only alphanumeric characters and ignoring case.","solution":"def count_palindromic_strings(strings): import re def is_palindrome(s): # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string is a palindrome return cleaned == cleaned[::-1] return sum(1 for s in strings if is_palindrome(s))"},{"question":"Alice is playing a game on an infinitely long line. Initially, she is at position 0. In each turn, she can move either one unit to the left or one unit to the right. Alice has a series of targets she needs to destroy, each described by its position on the line. Given an array of target positions, determine the minimum number of turns Alice needs to destroy all targets. Alice destroys a target when she reaches its position. She can only destroy one target at a time and must return to the initial position (position 0) before moving to the next target. Note: Alice can revisit targets or pass through them on her way to another target, but she can only destroy a target on a direct visit to its position. # Input The first line contains a single integer `t` (1 ≤ t ≤ 10^5) — the number of targets. The second line contains `t` space-separated integers representing the positions of the targets on the line. # Output Print a single integer — the minimum number of turns needed for Alice to destroy all targets. # Examples Input ``` 3 3 -2 5 ``` Output ``` 20 ``` Input ``` 2 1 -1 ``` Output ``` 4 ``` # Explanation In the first example, Alice can move from 0 to -2, return to 0, move to 3, return to 0, and move to 5, finally returning to 0. The minimum number of turns is 2 * (abs(-2) + abs(3) + abs(5)) = 20 turns. In the second example, Alice can move from 0 to -1, return to 0, and move to 1, finally returning to 0. The minimum number of turns is 2 * (abs(-1) + abs(1)) = 4 turns.","solution":"def minimum_turns_to_destroy_targets(t, positions): Returns the minimum number of turns needed for Alice to destroy all targets. Parameters: t (int): Number of targets. positions (list of int): Positions of the targets. Returns: int: Minimum number of turns. total_distance = sum(abs(pos) for pos in positions) return 2 * total_distance"},{"question":"You are given a string S consisting of lowercase English letters and an integer Q. For each query, you will be given a character c and an integer k. Your task is to find the position of the k-th occurrence of the character c in the string S. If the k-th occurrence does not exist, return -1. ------ Input ------ The first line of the input contains the string S, which consists of lowercase English letters only. The second line of the input contains a single integer Q denoting the number of queries. The description of Q queries follows. Each of the next Q lines contains a character c and an integer k separated by a space. ------ Output ------ For each query, print a single line containing one integer ― the position (1-based index) of the k-th occurrence of the character c in the string S, or -1 if the occurrence does not exist. ------ Constraints ------ 1 ≤ |S| ≤ 10^{6} 1 ≤ Q ≤ 10^{5} 1 ≤ k ≤ 10^{6} Each character c is a lowercase English letter. ------ Sample Input 1 ------ ababab 3 a 1 b 2 c 1 ------ Sample Output 1 ------ 1 4 -1 ------ Explanation 1 ------ Example case 1: - The first occurrence of \'a\' is at the 1st position. - The second occurrence of \'b\' is at the 4th position. - The character \'c\' does not appear in the string, hence the result is -1.","solution":"def find_kth_occurrence(S, queries): For each query, find the k-th occurrence of a character in the string S. Args: S (str): The input string consisting of lowercase English letters. queries (list of tuples): Each tuple contains a character c and an integer k. Returns: list of int: The positions (1-based index) of the k-th occurrence or -1 if not found. from collections import defaultdict # Create a dictionary to store the positions of each character positions = defaultdict(list) for index, char in enumerate(S): positions[char].append(index + 1) results = [] for c, k in queries: if c in positions and len(positions[c]) >= k: results.append(positions[c][k - 1]) else: results.append(-1) return results"},{"question":"Given a 2D matrix matrix, handle multiple queries of two types: 1. Query the sum of the elements inside the rectangle defined by its upper-left corner (row1, col1) and lower-right corner (row2, col2). 2. Update the element at a specified coordinate (row, col) to a new value. Implement the following interactions: - sumRegion(row1, col1, row2, col2): Returns the sum of the elements contained in the rectangle. - update(row, col, val): Updates the element at (row, col) to val. Example: Given matrix = [ [3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5] ] sumRegion(2, 1, 4, 3) -> 8 update(3, 2, 2) sumRegion(2, 1, 4, 3) -> 10 Notes: - The matrix can only be updated using the update function. - Assume the number of calls to update and sumRegion is evenly distributed. - The matrix contains at least one element.","solution":"class NumMatrix: def __init__(self, matrix): if not matrix: return self.matrix = matrix self.rows, self.cols = len(matrix), len(matrix[0]) self.tree = [[0] * (self.cols + 1) for _ in range(self.rows + 1)] self.nums = [[0] * self.cols for _ in range(self.rows)] for r in range(self.rows): for c in range(self.cols): self.update(r, c, matrix[r][c]) def update(self, row, col, val): delta = val - self.nums[row][col] self.nums[row][col] = val r, c = row + 1, col + 1 while r <= self.rows: cc = c while cc <= self.cols: self.tree[r][cc] += delta cc += (cc & -cc) r += (r & -r) def sumRegion(self, row1, col1, row2, col2): return self._sum(row2+1, col2+1) - self._sum(row1, col2+1) - self._sum(row2+1, col1) + self._sum(row1, col1) def _sum(self, row, col): result = 0 while row > 0: c = col while c > 0: result += self.tree[row][c] c -= (c & -c) row -= (row & -row) return result"},{"question":"You are given a string s and a list of queries. Each query is defined by a pair of integers l and r (1 ≤ l ≤ r ≤ |s|). For each query, you need to determine the number of distinct characters in the substring of s that starts at position l and ends at position r (inclusive). Write a program that answers all queries. -----Input----- The first line contains the string s, composed of lowercase letters of the Latin alphabet (1 ≤ |s| ≤ 100,000). The second line contains an integer q (1 ≤ q ≤ 100,000), the number of queries. The next q lines each contain two integers l and r, representing the range for a query (1 ≤ l ≤ r ≤ |s|). -----Output----- For each query, print the number of distinct characters in the specified substring on a new line. -----Examples----- Input abracadabra 3 1 3 2 5 1 11 Output 3 4 5 -----Note----- In the first sample, the substring from position 1 to 3 is \\"abr\\", which contains 3 distinct characters: \'a\', \'b\', and \'r\'. In the second sample, the substring from position 2 to 5 is \\"brac\\", which contains 4 distinct characters: \'b\', \'r\', \'a\', and \'c\'. In the third sample, the substring from position 1 to 11 is \\"abracadabra\\", which contains 5 distinct characters: \'a\', \'b\', \'r\', \'c\', and \'d\'.","solution":"def distinct_characters_in_substring(s, queries): Returns the number of distinct characters in specified substrings for each query. Arguments: s -- a string composed of lowercase letters queries -- a list of tuples (l, r) representing the range for each query Returns: A list of integers, each representing the number of distinct characters in the substring specified by each query results = [] for l, r in queries: substring = s[l-1:r] distinct_chars = len(set(substring)) results.append(distinct_chars) return results"},{"question":"You are given an integer array `arr` of length `n` and an integer `k`. You are asked to determine the length of the longest contiguous subarray such that the bitwise AND of all its elements is greater than or equal to `k`. -----Input----- The first line contains two integers `n` and `k` (1 ≤ n ≤ 100,000, 0 ≤ k ≤ 10^9). The second line contains `n` integers `arr[i]` (0 ≤ arr[i] ≤ 10^9) representing the elements of the array. -----Output----- Output a single integer representing the length of the longest contiguous subarray with a bitwise AND greater than or equal to `k`. If no such subarray exists, print `0`. -----Examples----- Input 5 3 4 3 2 6 7 Output 2 Input 5 8 4 3 2 6 7 Output 0 -----Note----- In the first sample, the longest subarray satisfying the condition is [4, 3] with bitwise AND: 4 & 3 = 0b100 & 0b011 = 0b000. In the second sample, no subarray satisfies the condition so the output is 0.","solution":"def longest_subarray_with_and_gte_k(arr, k): n = len(arr) max_len = 0 start = 0 current_and = None for end in range(n): if current_and is None: current_and = arr[end] else: current_and &= arr[end] while start <= end and current_and < k: start += 1 current_and = None if start > end else arr[start] for i in range(start + 1, end + 1): current_and &= arr[i] if current_and is not None and current_and >= k: max_len = max(max_len, end - start + 1) return max_len"},{"question":"Alan loves optimizing his work with scripts and programs. This time, he wants to calculate the exact time he spends on his daily activities. He follows a strict schedule, and he logs the starting and ending times of each task he performs throughout the day. Create a program that takes multiple datasets representing the start and end times of activities Alan logs, and calculates the total time he spends on his activities. The times are given in a 24-hour format (HH:MM) and are always within the same day. For each dataset, the program should calculate the total time Alan spent on his activities in minutes and output the total time for that dataset. Input A sequence of multiple datasets is given as input. Each dataset starts with an integer n (1 ≤ n ≤ 100) representing the number of activities Alan logs. Then, n lines follow, each containing two strings in the format HH:MM representing the start time and end time of an activity. The end of the input is indicated by a single line with \'0\'. Output For each dataset, output the total time Alan spent on his activities in minutes on one line. Example Input 3 08:00 09:30 10:15 11:45 13:00 14:30 2 09:00 10:30 11:15 12:45 0 Output 270 180","solution":"def calculate_total_time(datasets): Calculates the total time spent on activities for each dataset. total_times = [] for dataset in datasets: total_minutes = 0 for start_time, end_time in dataset: start_hour, start_minute = map(int, start_time.split(\':\')) end_hour, end_minute = map(int, end_time.split(\':\')) start_total_minutes = start_hour * 60 + start_minute end_total_minutes = end_hour * 60 + end_minute total_minutes += (end_total_minutes - start_total_minutes) total_times.append(total_minutes) return total_times def gather_datasets(input_data): Convert raw input string into list of datasets. lines = input_data.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break dataset = [] for j in range(1, n + 1): start_time, end_time = lines[i + j].split() dataset.append((start_time, end_time)) datasets.append(dataset) i += n + 1 return datasets"},{"question":"Given a matrix of integers, write a function that finds the maximum sum of any rectangle within the matrix. A rectangle is defined by any sub-array of the matrix. For example, consider the following matrix: ``` [ [1, 2, -1, -4, -20], [-8, -3, 4, 2, 1], [3, 8, 10, 1, 3], [-4, -1, 1, 7, -6] ] ``` In this example, the function should return 29, as the rectangle with the maximum sum is: ``` [ [3, 8, 10, 1, 3], [-4, -1, 1, 7, -6] ] ``` which sums to 29. # Input * A 2D list `matrix` containing integers, where the 2D list is non-empty. # Output * An integer representing the maximum sum of any rectangle in the given matrix. # Constraints * The dimensions of the matrix will be at most 100x100. * The integers in the matrix will be between -1000 and 1000, inclusive. # Examples Example 1: ```python matrix = [ [1, 2, -1, -4, -20], [-8, -3, 4, 2, 1], [3, 8, 10, 1, 3], [-4, -1, 1, 7, -6] ] max_rectangle_sum(matrix) # Output: 29 ``` Example 2: ```python matrix = [ [-1, -2, -3], [-4, -5, -6], [-7, -8, -9] ] max_rectangle_sum(matrix) # Output: -1 ``` # Function Signature ```python def max_rectangle_sum(matrix: List[List[int]]) -> int: pass ```","solution":"from typing import List def max_rectangle_sum(matrix: List[List[int]]) -> int: Finds the maximum sum of any rectangle in the matrix. def kadane(arr): max_sum = float(\'-inf\') current_sum = 0 for value in arr: current_sum += value if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) max_sum = float(\'-inf\') for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += matrix[i][right] current_max = kadane(temp) if current_max > max_sum: max_sum = current_max return max_sum"},{"question":"Ayush recently got interested in matrices and matrix operations. He is particularly fond of working with anti-diagonals in a square matrix. An anti-diagonal in a matrix is defined as a collection of elements that run from the top-right corner to the bottom-left corner. Ayush wants to find all the anti-diagonals of a given square matrix and print them in the specified order. Your task is to help Ayush by writing a program that extracts and prints all the anti-diagonals of a given matrix. Examples: Input: 3 1 2 3 4 5 6 7 8 9 Output: 1 2 4 3 5 7 6 8 9 Input: 2 1 2 3 4 Output: 1 2 3 4 -----Input:----- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N, the size of the matrix (NxN). The next N lines of each test case contains N integers each denoting the elements of the matrix. -----Output:----- For each test case, print all the anti-diagonals of the matrix. Each anti-diagonal\'s values should be printed in a new line separated by a single space. -----Constraints:----- 1 ≤ T ≤ 10^5 1 ≤ N ≤ 100 -1000 ≤ Matrix Elements ≤ 1000 -----Sample Input:----- 2 3 1 2 3 4 5 6 7 8 9 2 1 2 3 4 -----Sample Output:----- 1 2 4 3 5 7 6 8 9 1 2 3 4","solution":"def get_anti_diagonals(matrix): N = len(matrix) anti_diagonals = [] # Upper triangle including main diagonal for col in range(N): row, col_start = 0, col anti_diagonal = [] while col_start >= 0: anti_diagonal.append(matrix[row][col_start]) row += 1 col_start -= 1 anti_diagonals.append(anti_diagonal) # Lower triangle excluding main diagonal for row in range(1, N): row_start, col = row, N - 1 anti_diagonal = [] while row_start < N: anti_diagonal.append(matrix[row_start][col]) row_start += 1 col -= 1 anti_diagonals.append(anti_diagonal) return anti_diagonals def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 results = [] for _ in range(T): N = int(data[index]) index += 1 matrix = [list(map(int, data[index + i*N : index + (i+1)*N])) for i in range(N)] index += N*N anti_diagonals = get_anti_diagonals(matrix) for line in anti_diagonals: results.append(\' \'.join(map(str, line))) sys.stdout.write(\'n\'.join(results) + \'n\') if __name__ == \\"__main__\\": main()"},{"question":"In a kingdom far far away, there\'s a magical tree called Tifferet. The tree has n nodes numbered from 1 to n. Each node is connected to at most one other node by a directed edge, forming a sequence (or a single chain). The tree has a special property: each node contains a golden apple of a certain value. The king loves apples and especially loves to pick apples from a sequence of connected nodes. However, the king has specific picking rules: he must always start from a given node and can only move to the directly connected node in the direction of the edge (if it exists). Given the values of the apples at each node, can you find the maximum total value of apples that the king can collect if he starts picking from each possible node? Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of nodes in the tree. The second line contains n integers a1, a2, ... an (0 ≤ ai ≤ 100000) — the values of apples in the nodes. The third line contains n integers b1, b2, ... bn (0 ≤ bi ≤ n) — indicating that there is a direct edge from node i to node bi, or bi is zero if node i has no outgoing edge. Output Print n integers, where the i-th integer is the maximum value of apples the king can collect if he starts from node i. Examples Input 4 4 2 3 1 2 3 4 0 Output 10 6 4 1 Input 5 1 0 4 2 8 0 0 0 5 0 Output 1 0 4 10 8","solution":"def collect_apples(n, apple_values, edges): # Convert edges to a zero-indexed array for easier handling edges = [b - 1 for b in edges] # Create a memoization array to store the max value for each start node max_values = [-1] * n def dfs(node): if max_values[node] != -1: return max_values[node] next_node = edges[node] collected = apple_values[node] if next_node != -1: collected += dfs(next_node) max_values[node] = collected return collected # Compute the maximum values for each starting node for i in range(n): if max_values[i] == -1: dfs(i) return max_values # Usage example: n = 4 apple_values = [4, 2, 3, 1] edges = [2, 3, 4, 0] print(collect_apples(n, apple_values, edges)) # Output: [10, 6, 4, 1]"},{"question":"The Kingdom of Coders consists of N islands connected by M bidirectional bridges. The bridges are such that every bridge takes the same amount of time to cross, which is exactly 1 minute. The king wants to select a fortress island such that the maximum time required to travel from the fortress island to any other island is minimized. If there are multiple such islands, he wants to select the one with the smallest identifier. You need to determine the best suitable fortress island based on the given conditions. ----- Input Format ------ - The first line contains T, the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and M, the number of islands and bridges, respectively. - The next M lines each contain two integers A and B, indicating a bridge between islands A and B. ----- Output Format ------ For each test case, output a single line with the identifier of the best suitable fortress island. ----- Constraints ------ 1 ≤ T ≤ 10^3 2 ≤ N ≤ 10^4 0 ≤ M ≤ 5cdot 10^4 - The sum of N and M does not exceed 5cdot 10^5 across all test cases. - It is guaranteed that each island is reachable from every other island. ----- Sample Input 1 ------ 2 4 4 1 2 2 3 3 4 4 1 4 3 1 2 2 3 3 4 ----- Sample Output 1 ------ 1 2 ----- Explanation 1 ------ Test case 1: From island 1, the maximum travel time to any other island is 2 minutes. From island 2, the maximum travel time to any other island is 2 minutes. From island 3, the maximum travel time to any other island is 2 minutes. From island 4, the maximum travel time to any other island is 2 minutes. However, out of these islands, island 1 has the smallest identifier. Test case 2: From island 1, the maximum travel time to any other island is 3 minutes. From island 2, the maximum travel time to any other island is 2 minutes. From island 3, the maximum travel time to any other island is 2 minutes. From island 4, the maximum travel time to any other island is 2 minutes. Therefore, islands 2, 3, and 4 are suitable, but island 2 has the smallest identifier.","solution":"from collections import deque, defaultdict def find_fortress_island(N, M, bridges): # Create graph from bridges graph = defaultdict(list) for A, B in bridges: graph[A].append(B) graph[B].append(A) def bfs(start): visited = [-1] * (N + 1) visited[start] = 0 queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = visited[node] + 1 queue.append(neighbor) return visited min_max_distance = float(\'inf\') best_island = 1 for island in range(1, N + 1): distances = bfs(island) max_distance = max(distances[1:]) # ignore index 0 as it is not used if max_distance < min_max_distance: min_max_distance = max_distance best_island = island elif max_distance == min_max_distance and island < best_island: best_island = island return best_island def solve(t, test_cases): results = [] for i in range(t): N, M = test_cases[i][0] bridges = test_cases[i][1] result = find_fortress_island(N, M, bridges) results.append(result) return results"},{"question":"Alex is a botanist studying tree growth patterns. He has recorded the growth observations for several trees and wants to determine the longest continuous period during which each tree exhibited growth every day. The given data consist of multiple test cases. Each test case contains observations for a single tree. The observation period is represented by a sequence of integers where each integer indicates the growth (in millimeters) recorded for a day. If the growth on any day is zero or negative, it is still part of the continuous period but marks the end of a growth streak. Your task is to determine the length of the longest continuous period of positive growth for each tree. -----Input----- The input consists of multiple test cases. The first line contains the number of test cases t (1 le t le 1000). The description of each test case follows. For each test case: - The first line contains a single integer n (1 le n le 10^5) — the number of days for which observations were recorded. - The second line contains n integers g_1, g_2, ldots, g_n (-1000 le g_i le 1000) — the growth measurements for each day. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the length of the longest continuous period of positive growth. -----Examples----- Input 3 7 1 2 3 -1 2 3 4 5 0 -1 2 3 5 4 -2 -1 -3 -4 Output 3 3 0 -----Note----- In the first test case, the longest continuous period of positive growth is the first three days (1, 2, 3). In the second test case, the longest continuous period of positive growth is the last three days (2, 3, 5). In the third test case, there are no positive growth days.","solution":"def longest_continuous_positive_growth(t, cases): results = [] for i in range(t): n = cases[i][0] growth_measurements = cases[i][1] max_length = 0 current_length = 0 for growth in growth_measurements: if growth > 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 results.append(max_length) return results"},{"question":"You are given a list of `N` student names and their corresponding grades. The task is to process this list and return a formatted report that includes the following: - The class average grade. - A list of students\' names sorted in decreasing order of their grades. - For students with the same grade, sort their names alphabetically. - Include a prefix to each student\'s name indicating their rank in the order (1 being the highest grade). For example, if a student has the highest grade, prefix their name with \\"1. \\", and so on. Constraints * 1 ≤ N ≤ 100,000 * 0 ≤ Grade(i) ≤ 100 * Each student has a unique name, consisting of alphabetical characters only, and its length does not exceed 100 characters. Input The first line consists of the integer N. In the following N lines, each line contains a student\'s name and their grade separated by a space. Output Print the class average grade rounded to 2 decimal places. Print the sorted list of students prefixed with their ranks. Each student should be on a new line. Examples Input 3 John 75 Alice 85 Bob 90 Output 83.33 1. Bob 2. Alice 3. John Input 4 Daisy 90 Rose 85 Jack 85 Lily 90 Output 87.50 1. Daisy 1. Lily 3. Jack 3. Rose","solution":"def process_students_data(n, students): Returns the class average grade rounded to 2 decimal places and a sorted list of students with their ranks prefixed. :param n: int: Number of students :param students: List of tuples: Each tuple contains the name and grade of a student :return: (float, list): The class average grade and the sorted list of students with ranks if n == 0: return 0.00, [] # Calculate class average total_grade = sum(grade for name, grade in students) average_grade = round(total_grade / n, 2) # Sort students by grade (descending) and by name (ascending) for ties sorted_students = sorted(students, key=lambda x: (-x[1], x[0])) # Assign ranks result = [] current_rank = 1 for i in range(n): if i > 0 and sorted_students[i][1] != sorted_students[i - 1][1]: current_rank = i + 1 result.append(f\\"{current_rank}. {sorted_students[i][0]}\\") return average_grade, result"},{"question":"Given an `n x n` matrix where each of the rows and columns is sorted in ascending order, write a function that finds an element in the matrix. You should return the position (row and column index) of the target element if it is found, or `-1` if the element is not present in the matrix. Example 1: Input: matrix: [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target: 5 Output: (1, 1) Example 2: Input: matrix: [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target: 20 Output: -1 Your task: You don\'t need to read input or print anything. Your task is to complete the function findElement() which takes a 2D list `matrix`, and an integer `target` and returns a tuple representing the position of the target element or -1 if the element is not found. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: - `n == matrix.length` - `n == matrix[i].length` - `1 <= n <= 300` - `-10^9 <= matrix[i][j], target <= 10^9`","solution":"def findElement(matrix, target): Finds the element in the sorted n x n matrix and returns its position (row, col) if found, otherwise returns -1. if not matrix: return -1 n = len(matrix) row, col = 0, n - 1 while row < n and col >= 0: if matrix[row][col] == target: return (row, col) elif matrix[row][col] > target: col -= 1 else: row += 1 return -1"},{"question":"A construction company is building a new skyscraper, and they have a number of floors already designed. Each floor has a different cost associated with it based on the materials and labor required. The company wants to ensure that the total cost of constructing the floors is minimized while also meeting certain constraints. The company has decided that they will only build floors that have a unique height. Therefore, no two floors can have the same height. Additionally, they have a budget constraint, meaning that the total cost of constructing all selected floors must not exceed a given budget B. You are given an array H of heights of N possible floors and another array C of costs associated with each height in H. Your task is to determine the maximum number of floors that can be built within the given budget while ensuring that all selected floors have unique heights. -----Input----- The input consists of three lines: - The first line contains an integer N (1 leq N leq 1000), representing the number of possible floors. - The second line contains N integers H_1, H_2, ... H_N, where H_i (1 leq H_i leq 10^6) represents the height of the i-th floor. - The third line contains N integers C_1, C_2, ... C_N, where C_i (1 leq C_i leq 10^6) represents the cost of constructing the i-th floor. - The fourth line contains a single integer B (1 leq B leq 10^9), representing the budget constraint. -----Output----- Output a single integer, the maximum number of unique-height floors that can be constructed within the given budget. -----Example----- Sample Input 1: 5 1 2 3 2 4 10 20 30 40 25 50 Sample Output 1: 2 Sample Input 2: 4 5 5 5 5 10 10 10 10 25 Sample Output 2: 1 Sample Input 3: 3 3 1 2 15 10 20 30 Sample Output 3: 2 Explanation: In the first example, the floors with unique heights are {1, 2, 3, 4}. To maximize the number of floors while staying within the budget of 50: - Choose floors of height 1 and 3 with costs 10 and 30 respectively for a total cost of 40. In the second example, all heights are the same, so only one floor of height 5 can be chosen with a cost of 10 which is within the budget of 25. In the third example, the floors with unique heights are {1, 2, 3}. To maximize the number of floors while staying within the budget of 30: - Choose floors of height 1 and 2 with costs 10 and 20 respectively for a total cost of 30.","solution":"def max_floors(N, H, C, B): Returns the maximum number of unique-height floors that can be constructed within the given budget. :param N: Integer, number of possible floors. :param H: List of integers, heights of each floor. :param C: List of integers, costs associated with each floor. :param B: Integer, the budget constraint. :return: Integer, maximum number of unique-height floors that can be constructed. floors = list(zip(H, C)) floors.sort(key=lambda x: x[1]) # Sort floors by cost selected_heights = set() total_cost = 0 count = 0 for height, cost in floors: if height not in selected_heights and total_cost + cost <= B: selected_heights.add(height) total_cost += cost count += 1 return count"},{"question":"Tom is a gardener who is taking care of a very special garden containing n plants. Each plant grows according to its own unique pattern. For each plant, you are given its initial height and its growth rate per day. Tom wants to know the height of each plant on a specific day in the future. Your task is to write a program to calculate the height of each plant after a given number of days. Input The input consists of multiple datasets. Each dataset is in the following format: n h1 g1 h2 g2 ... hn gn d Where n (1 ≤ n ≤ 100) is the number of plants in the garden. For each plant i (1 ≤ i ≤ n), hi (1 ≤ hi ≤ 100) is its initial height in centimeters, and gi (0 ≤ gi ≤ 10) is its growth rate in centimeters per day. Finally, d (0 ≤ d ≤ 365) is the number of days after which the height of each plant should be calculated. The last dataset is followed by a single line containing one zero. This line is not a part of any dataset and should not be processed. Output For each dataset, print the heights of the n plants after d days, each on a new line, in the same order as they appear in the input. Separate the results for different datasets with a blank line. Example Input 3 10 2 15 1 20 0 5 2 8 3 10 1 25 1 5 0 2 0 Output 20 20 20 83 35 7 Explanation In the first dataset, Tom has 3 plants. After 5 days: - The first plant will have a height of 10 + 5 * 2 = 20 centimeters. - The second plant will have a height of 15 + 5 * 1 = 20 centimeters. - The third plant\'s height does not change and remains 20 centimeters. In the second dataset, after 25 days: - The first plant will have a height of 8 + 25 * 3 = 83 centimeters. - The second plant will have a height of 10 + 25 * 1 = 35 centimeters. In the third dataset, after 2 days: - The single plant will have a height of 5 + 2 * 0 = 7 centimeters.","solution":"def plant_heights(datasets): results = [] for dataset in datasets: n = dataset[0] plants = dataset[1:n+1] d = dataset[n+1] heights = [h + g * d for h, g in plants] results.append(heights) return results"},{"question":"You are tasked with rearranging words in a given sentence to form a valid English sentence that is the shortest in lexicographical order. A sentence is considered valid if it does not include capital letters and maintains the order of the words from the original string given in the input. Input: - The input consists of a single line containing a sentence of at most 100 words. Words are separated by spaces, and each word contains only lowercase English letters. Output: - Output a valid sentence that is the shortest in lexicographical order among all possible valid sentences that can be formed by rearranging the words in the input sentence. Examples: Input: the quick brown fox jumps over the lazy dog Output: brown dog fox jumps lazy over quick the the Input: a journey of a thousand miles begins with a single step Output: a a a begins journey miles of single step thousand with Note: - In the first example, the words in the input sentence are rearranged to form \\"brown dog fox jumps lazy over quick the the,\\" which is the shortest lexicographical order among all possible sentences. - Similarly, in the second example, the output \\"a a a begins journey miles of single step thousand with\\" is the valid sentence in the shortest lexicographical order.","solution":"def rearrange_sentence(sentence): Returns the sentence with the words rearranged to form the shortest lexicographical order. words = sentence.split() words.sort() return \' \'.join(words)"},{"question":"Given an unsorted integer array, find a pair with the given sum in it. Example 1: Input: nums = [10, 5, 2, 3, -6, 9, 11] target = 4 Output: [10, -6] Explanation: 10 + (-6) is 4 Example 2: Input: nums = [1, 2, 3, 9] target = 8 Output: [] Explanation: There are no two numbers whose sum is 8 Example 3: Input: nums = [1, 2, 3, 4, 5] target = 7 Output: [3, 4] Explanation: 3 + 4 is 7 Your Task: You don\'t need to read input or print anything. Your task is to complete the function `pairWithSum(nums, target)` which takes an array nums and an integer target as inputs and returns a list containing the pair of integers whose sum is equal to the given target. If no such pair exists, return an empty list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: - 1 <= len(nums) <= 10^4 - -10^5 <= nums[i] <= 10^5 - -10^5 <= target <= 10^5","solution":"def pairWithSum(nums, target): Finds a pair of numbers in the list `nums` that add up to `target`. If such a pair exists, returns it, otherwise returns an empty list. seen = {} for num in nums: complement = target - num if complement in seen: return [complement, num] seen[num] = True return []"},{"question":"Given an integer array `arr` of size `n`, you need to determine if there exist two distinct indices i and j such that the product of elements at these indices is a perfect square. A perfect square is an integer that is the square of another integer (for example, 1, 4, 9, 16, etc.). Input The first line contains an integer `n` (1 ≤ n ≤ 1000) — the size of the array. The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 10^6) — the elements of the array. Output Print \\"YES\\" if there exist two indices i and j (i ≠ j) such that the product arr[i] * arr[j] is a perfect square. Otherwise, print \\"NO\\". Examples Input 5 2 3 4 6 8 Output YES Input 4 11 13 17 19 Output NO Note In the first example, the product of arr[2] and arr[3] is 4 * 6 = 24, which is not a perfect square, but 2 * 8 = 16 is a perfect square (4 squared). In the second example, there are no two indices whose product is a perfect square.","solution":"import math from itertools import combinations def is_perfect_square(x): root = int(math.isqrt(x)) return root * root == x def find_perfect_square_product(arr): for i, j in combinations(range(len(arr)), 2): if is_perfect_square(arr[i] * arr[j]): return \\"YES\\" return \\"NO\\""},{"question":"You are given two integers n and m (1 ≤ n, m ≤ 10^5). You need to construct an n times m binary matrix such that each row and each column contains at most one \'1\'. If such a matrix is impossible to construct, print -1. Otherwise, print the constructed matrix. -----Input----- The first line contains two integers n and m (1 le n, m le 10^5). -----Output----- If it is impossible to construct the required matrix, print -1. Otherwise, print the matrix. -----Examples----- Input 3 4 Output 1 0 0 0 0 1 0 0 0 0 1 0 Input 2 2 Output 1 0 0 1 -----Note----- In the first example, the resulting matrix contains at most one \'1\' in each row and column.","solution":"def construct_binary_matrix(n, m): Construct an n x m binary matrix where each row and each column contains at most one \'1\'. Return the matrix as a list of lists. If impossible, return -1. if n > m: return -1 matrix = [[0] * m for _ in range(n)] for i in range(n): matrix[i][i] = 1 return matrix # Example usage: # print(construct_binary_matrix(3, 4)) # Output should be: # [[1, 0, 0, 0], # [0, 1, 0, 0], # [0, 0, 1, 0]] # print(construct_binary_matrix(2, 2)) # Output should be: # [[1, 0], # [0, 1]]"},{"question":"You are tasked with managing resource allocation for a new computer cluster. The cluster consists of N nodes, each with a certain amount of available resources. You need to be able to perform two types of operations on the cluster: 1. Update the amount of available resources on a specific node. 2. Determine the node with the maximum resources in a given range of nodes. Write a program to handle these operations efficiently. # Input Format - The first line contains a single integer T, denoting the number of test cases. - The first line of each test case contains an integer N denoting the number of nodes in the cluster. - The next line contains N space-separated integers where the i-th integer represents the amount of available resources on the i-th node. - The next line contains an integer Q denoting the number of operations to be performed. Q lines follow with each line representing an operation. Operations can be of two types: 1. `1 x r` - Update the amount of available resources on the x-th node to r (1 <= x <= N). 2. `2 x y` - Find the node with the maximum resources between nodes x and y (both inclusive) (1 <= x <= y <= N). # Output Format For each query of the second type, print the amount of resources of the node with the maximum resources in the specified range. # Constraints - (1 leq T leq 5) - (1 leq N leq 10^4) - (1 leq Q leq 10^4) - The amount of resources on each node is always guaranteed to be between 1 and 10000. # Sample Input ``` 2 3 10 20 15 3 2 1 3 1 2 5 2 2 3 4 5 8 10 6 2 2 1 3 1 3 12 ``` # Sample Output ``` 20 15 10 ``` # Explanation For the first test case: - Initially, the nodes have resources `[10, 20, 15]`. - The first query asks for the maximum resources between nodes 1 and 3, which is 20. - The second query updates the resources on node 2 to 5, resulting in nodes `[10, 5, 15]`. - The third query asks for the maximum resources between nodes 2 and 3, which is 15. For the second test case: - Initially, the nodes have resources `[5, 8, 10, 6]`. - The first query asks for the maximum resources between nodes 1 and 3, which is 10. - The second query updates the resources on node 3 to 12, resulting in nodes `[5, 8, 12, 6]`.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Build the segment tree for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, index, value): pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def range_max(self, left, right): left += self.n right += self.n max_value = 0 while left < right: if left % 2: max_value = max(max_value, self.tree[left]) left += 1 if right % 2: right -= 1 max_value = max(max_value, self.tree[right]) left //= 2 right //= 2 return max_value def manage_cluster(T, test_cases): results = [] for case in test_cases: N, resources, Q, operations = case seg_tree = SegmentTree(resources) for operation in operations: if operation[0] == 1: _, x, r = operation seg_tree.update(x - 1, r) elif operation[0] == 2: _, x, y = operation results.append(seg_tree.range_max(x - 1, y)) return results"},{"question":"A company wants to track its employees\' hours worked over a week and determine their overtime hours if they exceed 40 hours in a week. Write a program that will take a list of hours worked each day for a number of employees and calculate their total and overtime hours. Input The first line contains a single integer N, the number of employees. Each of the next N lines contains exactly 7 integers separated by spaces, representing the hours worked by an employee on each day of the week from Monday to Sunday. Output For each employee, print two integers on a new line: the total hours worked in the week and their overtime hours. Overtime hours are calculated as the total number of hours worked in a week minus 40, but only if the total hours exceed 40. Constraints 1 ≤ N ≤ 100 0 ≤ hours worked per day ≤ 24 Sample Input 3 8 8 8 8 8 0 0 10 10 10 10 10 0 0 5 5 5 5 5 5 5 Sample Output 40 0 50 10 35 0 Explanation - The first employee worked a total of 40 hours with 0 overtime hours. - The second employee worked a total of 50 hours with 10 overtime hours. - The third employee worked a total of 35 hours with 0 overtime hours.","solution":"def calculate_hours_and_overtime(N, hours_list): results = [] for hours in hours_list: total_hours = sum(hours) overtime = total_hours - 40 if total_hours > 40 else 0 results.append((total_hours, overtime)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') N = int(lines[0]) hours_list = [list(map(int, line.split())) for line in lines[1:N+1]] return N, hours_list def format_output(results): return \'n\'.join(f\'{total} {overtime}\' for total, overtime in results)"},{"question":"In a small village, there are n houses arranged in a row. Each house has a certain amount of coin treasure. Thieves plan to rob the houses and want to maximize the amount of treasure they can steal. However, they have a simple constraint: if they rob two adjacent houses, the police will be alerted. Therefore, they need to pick houses in such a way that no two robbed houses are adjacent to each other. Given the amount of treasure in each house, find the maximum amount of treasure the thieves can steal. Input The first line contains a single integer n (1 ≤ n ≤ 100,000), representing the number of houses. The second line contains n space-separated integers, where the i-th integer ai (1 ≤ ai ≤ 10,000), representing the amount of treasure in the i-th house. Output Print a single integer, the maximum amount of treasure the thieves can steal without alerting the police. Examples Input 5 2 7 9 3 1 Output 12 Input 3 2 1 4 Output 6 Input 6 5 5 10 40 50 35 Output 80 Explanation In the first example, the thieves can choose to rob house 1 (treasure = 2), house 3 (treasure = 9), and house 5 (treasure = 1), making the total treasure stolen = 2 + 9 + 1 = 12. In the second example, the thieves can choose to rob house 1 (treasure = 2) and house 3 (treasure = 4), making the total treasure stolen = 2 + 4 = 6. In the third example, the thieves can choose to rob house 1 (treasure = 5), house 3 (treasure = 10), and house 5 (treasure = 50), making the total treasure stolen = 5 + 10 + 50 = 80.","solution":"def max_robbery(treasures): Given a list of treasures in each house, this function returns the maximum amount of treasure the thieves can steal without alerting the police by robbing two adjacent houses. n = len(treasures) if n == 0: return 0 if n == 1: return treasures[0] dp = [0] * n dp[0] = treasures[0] dp[1] = max(treasures[0], treasures[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + treasures[i]) return dp[-1] def max_treasure(n, treasures): return max_robbery(treasures)"},{"question":"Given an array of integers, find the maximum possible sum you can get by adding together some of the integers. You can either add or omit each integer, but if you add an integer, you must add all its subsequent integers. For instance, for an array [1, 2, 3], if you include 2 in the sum, you must also include 3, resulting in possible sub-sums of [1], [2, 3], [1, 2, 3], or an empty sum. Examples ```python [1, 2, -3, 4, -2, 1] ==> 6 Explanation: The maximum sum is obtained by taking the subarray [4, -2, 1], which equals 3. [3, -1, 2, 6, -5, 7] ==> 12 Explanation: The maximum sum is obtained by taking the subarray [3, -1, 2, 6, -5, 7], which equals 12. ```","solution":"def max_sum_subarray(arr): Calculates the maximum possible sum by adding together some of the integers from the array. If you add an integer, you must add all its subsequent integers. n = len(arr) if n == 0: return 0 # Create a list to store the maximum sum ending at each position max_sum_end_at = [0] * n max_sum_end_at[0] = arr[0] for i in range(1, n): max_sum_end_at[i] = max(arr[i], max_sum_end_at[i-1] + arr[i]) return max(max_sum_end_at)"},{"question":"Read problems statements in Mandarin Chinese, Russian, and Vietnamese. You are given an array A of length N, containing integers from 1 to K. You also have a target integer X. Your goal is to find the length of the smallest subarray (continuous subsequence) of A such that the sum of its elements is equal to X. If no such subarray exists, return -1. ------ Input ------ The first line contains an integer T, the number of test cases. The first line of each test case contains two integers N and K. The second line of each test case contains N integers, the elements of the array A. The last line of each test case contains the integer X. ------ Output ------ For each test case, output a single integer representing the length of the smallest subarray with sum equal to X, or -1 if no such subarray exists. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 2000 1 ≤ K ≤ 10 1 ≤ A[i] ≤ K 1 ≤ X ≤ 10^6 ------ Example ------ Input: 2 5 5 1 2 3 4 5 9 6 3 1 1 1 1 1 1 4 Output: 2 4","solution":"def smallest_subarray_with_sum(T: int, cases: list): results = [] for case in cases: N, K, A, X = case min_length = float(\'inf\') found = False for start in range(N): curr_sum = 0 for end in range(start, N): curr_sum += A[end] if curr_sum == X: found = True min_length = min(min_length, end - start + 1) break # we found a subarray with exact sum X, move to the next starting point if found: results.append(min_length) else: results.append(-1) return results def parse_input(data: str): lines = data.split(\'n\') T = int(lines[0]) cases = [] index = 1 for _ in range(T): N, K = map(int, lines[index].split()) A = list(map(int, lines[index+1].split())) X = int(lines[index+2]) cases.append((N, K, A, X)) index += 3 return T, cases def main(input_data: str) -> str: T, cases = parse_input(input_data) results = smallest_subarray_with_sum(T, cases) return \'n\'.join(map(str, results))"},{"question":"You are given a list of integers and need to determine which number occurs most frequently in the list. If there is a tie for the most frequent number, return the smallest number among them. Input: The first line of input contains an integer N, the number of elements in the list. The second line contains N space-separated integers representing the elements of the list. Output: Output the most frequent number. If multiple numbers have the same frequency, output the smallest one. Constraints: 1 ≤ N ≤ 10^5 1 ≤ element in the list ≤ 10^9 SAMPLE INPUT 7 1 3 2 3 2 1 3 SAMPLE OUTPUT 3 Explanation The number 3 occurs the most frequently (3 times), while 1 and 2 both occur 2 times each. Hence, the output is 3.","solution":"def most_frequent_number(n, elements): Determines the most frequent number in the list. If there is a tie, returns the smallest number among them. :param n: Integer, the number of elements in the list :param elements: List of integers, the elements of the list :return: Integer, the most frequent number from collections import Counter # Count the frequencies of each number in the list frequency = Counter(elements) # Find the highest frequency max_frequency = max(frequency.values()) # Collect all numbers with the highest frequency most_frequent_numbers = [num for num, freq in frequency.items() if freq == max_frequency] # Return the smallest number among the most frequent ones return min(most_frequent_numbers)"},{"question":"Flood Fill Algorithm The Flood Fill Algorithm is used in various applications such as image editing software for the paint bucket tool. The algorithm identifies and fills a contiguous area of the same color with a new color. You are tasked to implement this algorithm in a 2D grid where each cell is a pixel with a certain color value. Given a 2D array of integers `grid` where each element represents the color of a pixel, an integer `sr` and `sc` representing the starting pixel location (row and column), and an integer `newColor` representing the new color to be applied. Write a function `floodFill(grid, sr, sc, newColor)` that replaces the color of the starting pixel and all adjacent pixels with the same color as the starting pixel with the `newColor`. Note: - Apply the new color to the entire connected component of the starting pixel\'s color. - An adjacent pixel is a pixel that shares a boundary with the current pixel (above, below, left, or right). Function signature: `def floodFill(grid: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]` # Constraints: * `1 <= grid.length, grid[0].length <= 50` * `0 <= sr < grid.length` * `0 <= sc < grid[0].length` * `1 <= grid[i][j], newColor <= 10^4` # Input - A 2D integer grid representing the pixel colors - Two integers `sr` and `sc` representing the starting pixel location - An integer `newColor` # Output - A 2D integer grid with the updated pixel colors # Example Input ``` grid = [ [1, 1, 1], [1, 1, 0], [1, 0, 1] ] sr = 1 sc = 1 newColor = 2 ``` Output ``` [ [2, 2, 2], [2, 2, 0], [2, 0, 1] ] ``` Explanation Starting from `grid[1][1]`, all connected pixels with the value `1` are changed to `2`.","solution":"def floodFill(grid, sr, sc, newColor): Performs the flood fill algorithm starting from the pixel (sr, sc) and fills all connected pixels with the same original color with the new color. originalColor = grid[sr][sc] if originalColor == newColor: return grid def fill(r, c): if (0 <= r < len(grid) and 0 <= c < len(grid[0]) and grid[r][c] == originalColor): grid[r][c] = newColor fill(r + 1, c) fill(r - 1, c) fill(r, c + 1) fill(r, c - 1) fill(sr, sc) return grid"},{"question":"Consider an island represented by a 2D grid where `1` represents land and `0` represents water. You are initially on land at the top-left corner of the grid. You are free to move up, down, left, or right (not diagonally) and you cannot move beyond the grid boundaries. Your task is to determine the minimum number of steps required to reach the bottom-right corner of the grid. If it is not possible to reach the bottom-right corner, return -1. Constraints * The grid size is guaranteed to be at least 1x1 and at most 100x100. * Each cell in the grid is either `1` (land) or `0` (water). * The initial cell (top-left corner) and the final cell (bottom-right corner) are always land (i.e., `grid[0][0] == 1` and `grid[n-1][m-1] == 1`). Input Input is given from Standard Input in the following format: ``` n m grid[0][0] grid[0][1] ... grid[0][m-1] grid[1][0] grid[1][1] ... grid[1][m-1] : grid[n-1][0] grid[n-1][1] ... grid[n-1][m-1] ``` Where `n` is the number of rows and `m` is the number of columns. Output Print the minimum number of steps required to reach the bottom-right corner, or -1 if it is not possible. Examples Input ``` 3 3 1 1 0 0 1 1 1 1 1 ``` Output 4 Input ``` 3 3 1 0 0 0 1 1 1 0 1 ``` Output -1 Input ``` 1 1 1 ``` Output 0","solution":"from collections import deque def min_steps_to_reach_end(n, m, grid): if grid[0][0] == 0 or grid[n-1][m-1] == 0: return -1 # Directions for movement: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS initialization queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() # If we\'ve reached the bottom-right corner if (r, c) == (n-1, m-1): return steps # Explore all possible movements for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == 1 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1 # Example usage: # n, m = 3, 3 # grid = [ # [1, 1, 0], # [0, 1, 1], # [1, 1, 1] # ] # print(min_steps_to_reach_end(n, m, grid)) # Output: 4"},{"question":"**Title: Nomad\'s Treasure Path** In a far-off land, there is a vast desert known as the Desert of Mysteries. A treasure hunter, named Ark, has discovered that the desert contains hidden treasures at some specific locations marked as grid cells in a 2D grid of size NxM. However, due to the extreme conditions of the desert, Ark can only move in a particular pattern to find the treasures. Ark can move right, down, or diagonally right and down (i.e., from (i,j) to (i,j+1) or (i+1,j) or (i+1,j+1)). Starting from the top-left corner (position (1,1)), Ark wants to calculate the maximum treasure he can collect while moving to the bottom-right corner (position (N,M)). The 2D grid is represented with numbers where each number indicates the amount of treasure available at that cell. BRIEF - You are given a 2D grid of size NxM where each cell contains a non-negative integer which represents the amount of treasure at that cell. - Ark starts at the top-left corner (1,1) and wants to move to the bottom-right corner (N,M) such that the collected treasure is maximized. - Ark can move right, down, or diagonally right and down from any cell. Write a function that calculates the maximum amount of treasure Ark can collect. Input: - The first line contains two integers N and M representing the number of rows and columns in the grid respectively. - The next N lines each contain M space-separated integers representing the grid. Output: - Print a single integer representing the maximum amount of treasure Ark can collect. Constraints: - 1 ≤ N, M ≤ 1000 - 0 ≤ grid[i][j] ≤ 1000 **Sample Input** ``` 3 3 1 2 3 4 5 6 7 8 9 ``` **Sample Output** ``` 29 ``` **Explanation** The possible paths to get the maximum treasure are: - (1,1) -> (1,2) -> (2,3) -> (3,3) - (1,1) -> (1,2) -> (2,2) -> (3,3) - (1,1) -> (2,2) -> (3,3). All add up to the treasure count of 29. **Implementation Notes:** - Use dynamic programming to keep track of the maximum treasure at each cell. - Create a dp table where dp[i][j] represents the maximum treasure collected up to the cell (i, j). - Use the state transitions based on the allowed movements (right, down, diagonally right-down) to update the dp table efficiently.","solution":"def max_treasure(n, m, grid): if n == 0 or m == 0: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(n): for j in range(m): if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) if i > 0 and j > 0: dp[i][j] = max(dp[i][j], dp[i-1][j-1] + grid[i][j]) return dp[n-1][m-1]"},{"question":"In the ancient city of Bibliopolis, known for its grand libraries and scholarly treasures, the city council has discovered a coded manuscript that is believed to contain secrets to great wisdom. The manuscript consists of a sequence of symbols represented by integers. To uncover the wisdom, the council needs to decode the sequence according to a specific pattern. The pattern is defined as follows: - A valid encoded sequence must contain at least one \'peak\'. - A \'peak\' is defined as a value in the sequence which is higher than its immediate adjacent values to the left and right. - For example, in the sequence [1, 3, 2], the number \'3\' is a peak. Your task is to help the council by detecting the peak values in a given sequence of integers and then return the sum of these peak values. Input - The first line contains an integer n (3 ≤ n ≤ 1000), the number of integers in the sequence. - The next line contains n integers separated by spaces, representing the sequence. Each integer xi (0 ≤ xi ≤ 1000). Output - Output a single line containing the sum of all peak values in the sequence. If there are no peaks, output 0. Examples Input 8 1 2 3 1 5 6 4 2 Output 14 Input 5 1 2 3 4 5 Output 0 Note In the first example, there are two peaks: 3 and 6. Their sum is 3 + 6 = 9. In the second example, there are no peaks, hence the output is 0.","solution":"def sum_of_peaks(n, sequence): Returns the sum of all peak values in the sequence. A peak is defined as a value in the sequence which is higher than its immediate adjacent values to the left and right. Parameters: n (int): The number of integers in the sequence. sequence (list of int): The sequence of integers. Returns: int: The sum of all peak values in the sequence. if n < 3: return 0 sum_peaks = 0 for i in range(1, n - 1): if sequence[i] > sequence[i - 1] and sequence[i] > sequence[i + 1]: sum_peaks += sequence[i] return sum_peaks"},{"question":"Alex is a budding software developer experimenting with different data structures. He stumbles upon a list of integers and decides to apply some operations to gain insights. Given an array of integers, he wants to find the length of the longest contiguous subarray with alternating even and odd numbers. If the entire array is already alternating, that is also a valid answer. ------ Input: ------ The first line contains a single integer T, the number of test cases. Each test case contains two lines: - The first line contains an integer N, the size of the array. - The second line contains N space-separated integers, the elements of the array. ------ Output: ------ For each test case, output a single integer denoting the length of the longest contiguous subarray with alternating even and odd numbers. ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^9 The sum of N over all test cases does not exceed 10^6. ----- Sample Input 1 ------ 2 5 1 2 3 4 5 6 1 3 5 2 4 6 ----- Sample Output 1 ------ 5 2 ----- Explanation 1 ------ Test case 1: The entire array already alternates between even and odd. Thus, the longest subarray has a length of 5. Test case 2: The longest alternating subarray is either [1, 3] or [5, 2] or [2, 4] or [4, 6], each of length 2.","solution":"def longest_alternating_subarray_length(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] array = test_cases[i][1] if N == 0: results.append(0) continue max_len = 1 current_len = 1 for j in range(1, N): if (array[j-1] % 2 == 0 and array[j] % 2 != 0) or (array[j-1] % 2 != 0 and array[j] % 2 == 0): current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 results.append(max_len) return results"},{"question":"In a magical land, there are n distinct magical creatures. Each creature has a unique number assigned to it from 1 to n. A wizard has cast a spell on these creatures such that some of them have formed groups. Each group is represented by a list of creatures that belong to it. Two creatures are considered to be in the same group if they are directly in the same group or if there exists a sequence of groups linking the two creatures. Can you determine the number of distinct groups of creatures? You can read about connected components in graph theory here: https://en.wikipedia.org/wiki/Component_(graph_theory) -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 1000; 0 ≤ m ≤ 100000). Each of the next m lines contains a pair of integers u and v (1 ≤ u, v ≤ n), indicating that creature u and creature v are in the same group. -----Output----- Print the number of distinct groups of creatures. -----Examples----- Input 5 3 1 2 2 3 4 5 Output 2 -----Note----- The first group consists of creatures {1, 2, 3} and the second group consists of creatures {4, 5}. So, there are 2 distinct groups.","solution":"from collections import defaultdict, deque def count_distinct_groups(n, m, pairs): def bfs(start, graph, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Create the adjacency list for the graph graph = defaultdict(list) for u, v in pairs: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) group_count = 0 # Traverse each node and use BFS to mark all reachable nodes for i in range(1, n + 1): if not visited[i]: bfs(i, graph, visited) group_count += 1 return group_count"},{"question":"You are given a special type of matrix called a \\"difference matrix,\\" wherein each element is defined by its position as the absolute difference between the row and column indices. Specifically, the element at the intersection of row i and column j is calculated as |i - j|. Write a function that, given the dimensions of the matrix N times N, computes the sum of all the elements in the difference matrix. -----Input----- The input will be a single integer N (1 leq N leq 10^5) denoting the dimensions of the square matrix. -----Output----- Output a single integer, the sum of all the elements in the N times N difference matrix. -----Examples----- Sample Input 1: 3 Sample Output 1: 8 Explanation: The 3x3 difference matrix is: ``` 0 1 2 1 0 1 2 1 0 ``` Sum of elements: 0 + 1 + 2 + 1 + 0 + 1 + 2 + 1 + 0 = 8 Sample Input 2: 4 Sample Output 2: 20 Explanation: The 4x4 difference matrix is: ``` 0 1 2 3 1 0 1 2 2 1 0 1 3 2 1 0 ``` Sum of elements: 0 + 1 + 2 + 3 + 1 + 0 + 1 + 2 + 2 + 1 + 0 + 1 + 3 + 2 + 1 + 0 = 20","solution":"def difference_matrix_sum(N): Returns the sum of all elements in the N x N difference matrix. The element at the intersection of row i and column j is calculated as |i - j|. Parameters: N (int): the dimensions of the square matrix Returns: int: the sum of all elements in the difference matrix total_sum = 0 for i in range(N): for j in range(N): total_sum += abs(i - j) return total_sum"},{"question":"You are responsible for designing a system that processes a stream of transactions from multiple users. Each transaction logs a credit or debit operation that affects a user\'s account balance. A transaction is represented as a dictionary with the following keys: - \\"user\\": a string representing the username. - \\"amount\\": an integer representing the transaction amount. A positive value indicates a credit, and a negative value indicates a debit. You are given a list of transactions. Your task is to calculate and return the final balance of each user after processing all given transactions. Implement a function `process_transactions(transactions: List[Dict[str, Any]]) -> Dict[str, int]` that takes a list of transactions and returns a dictionary where the keys are usernames and the values are their respective final balances. Example: ```python Input: transactions = [ {\\"user\\": \\"alice\\", \\"amount\\": 50}, {\\"user\\": \\"bob\\", \\"amount\\": 100}, {\\"user\\": \\"alice\\", \\"amount\\": -20}, {\\"user\\": \\"alice\\", \\"amount\\": 30}, {\\"user\\": \\"bob\\", \\"amount\\": -50} ] Output: {\\"alice\\": 60, \\"bob\\": 50} ``` Constraints: - The transaction amount (amount) is guaranteed to be a valid integer. - All usernames are non-empty strings without spaces. - There will not be more than 1000 transactions. - Usernames will only consist of lowercase English letters. Use this chain of transactions to validate the working of your function and ensure that it correctly computes the final balances for multiple users based on the credits and debits applied to their accounts.","solution":"from typing import List, Dict, Any def process_transactions(transactions: List[Dict[str, Any]]) -> Dict[str, int]: balances = {} for transaction in transactions: user = transaction[\'user\'] amount = transaction[\'amount\'] if user not in balances: balances[user] = 0 balances[user] += amount return balances"},{"question":"**Introduction** A chef has `N` different types of ingredients. Each ingredient has a specific preparation time which takes exactly 1 minute per unit. The chef needs to prepare exactly `K` dishes. Each dish requires exactly one unit of each ingredient from a subset of `M` different ingredients. The chef\'s goal is to minimize the total time required to prepare all `K` dishes. **About the Optimization** The chef can prepare one unit of any ingredient simultaneously in each minute. This means that in `1` minute, the chef can prepare `N` units of one type of ingredient. The preparation can be switched to another type of ingredient in the next minute. **Task** Find the minimum total number of minutes required to prepare exactly `K` dishes, each utilizing `M` different ingredients. **Input:** - `N` (1 ≤ N ≤ 10^5) — the number of different types of ingredients. - `K` (1 ≤ K ≤ 10^5) — the number of dishes to be prepared. - `M` (1 ≤ M ≤ N) — the number of different ingredients required for each dish. **Output:** Return a single integer — the minimum number of minutes required to prepare exactly `K` dishes. **Examples**: ``` (3, 6, 2) => 4 (4, 10, 3) => 8 (2, 5, 1) => 3 ```","solution":"def min_minutes(N, K, M): Returns the minimum number of minutes required to prepare exactly K dishes, each utilizing M different ingredients. # To prepare K dishes with M different ingredients, each ingredient needs to be prepared K times # Since the chef can prepare N units of one type of ingredient per minute, # we need to prepare (K * M) units and divide by N. total_units_needed = K * M minutes_needed = (total_units_needed + N - 1) // N # Using ceiling division to cover all units return minutes_needed"},{"question":"Ali is planning a road trip across several cities. He has a list of cities he must visit. However, he cannot travel directly between all the cities because some pairs are not connected by roads. Ali has a list of additional potential road connections that he can utilize to complete his trip if necessary. Each road has an associated construction cost. Ali wants to minimize his expenses while ensuring he can visit all the required cities. He starts and ends his journey in his hometown and must visit each city at least once. -----Input----- The first line contains two space-separated integers N and M (3 leq N leq 20, 0 leq M leq 190), where N is the number of cities, and M is the number of roads already present. The cities are numbered from 1 to N, and Ali\'s hometown is city 1. The next M lines describe the roads. Each line contains three space-separated integers u, v, w, (1 leq u, v leq N, 1 leq w leq 10000), where u and v are the connected cities, and w is the travel cost. The next line contains an integer K (0 leq K leq 300), the number of additional potential roads. Each of the following K lines contains three space-separated integers x, y, z, (1 leq x, y leq N, 1 leq z leq 10000), where x and y are the cities that can be connected, and z is the construction cost of the road. -----Output----- Output a single integer – the minimal total construction cost to travel from city 1 to visit all other cities and return to city 1. If it is not possible to visit all cities, print -1. -----Examples----- Sample Input 1: 4 2 1 2 500 3 4 600 2 1 3 200 4 2 300 Sample Output 1: 1000 Sample Input 2: 3 0 1 1 2 1000 Sample Output 2: -1","solution":"def min_road_trip_cost(N, M, existing_roads, K, potential_roads): import heapq def prims_minimum_spanning_tree(N, graph): min_cost = 0 edges_used = 0 min_heap = [(0, 1)] visited = set() while min_heap and len(visited) < N: cost, node = heapq.heappop(min_heap) if node in visited: continue visited.add(node) min_cost += cost edges_used += 1 for neighbour, weight in graph[node]: if neighbour not in visited: heapq.heappush(min_heap, (weight, neighbour)) if len(visited) == N: return min_cost else: return -1 graph = {i: [] for i in range(1, N + 1)} for u, v, w in existing_roads: graph[u].append((v, w)) graph[v].append((u, w)) for x, y, z in potential_roads: graph[x].append((y, z)) graph[y].append((x, z)) return prims_minimum_spanning_tree(N, graph) # Example usage and more complex test cases can be added in the unit tests."},{"question":"Tina is a software engineer working on optimizing queries on a large dataset. One of her tasks is to identify the longest consecutive subsequence of increasing integers in a given list. However, she faces a limitation: the data can be very large, and the existing solution she has is not efficient enough. Your task is to help Tina by writing a more efficient algorithm to find the longest consecutive increasing subsequence in the list. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of elements in the list. - The second line contains `n` integers representing the elements of the list (1 ≤ each element ≤ 10^9). # Output - Output a single integer: the length of the longest consecutive increasing subsequence. # Example Input ``` 6 1 2 3 2 3 4 ``` Output ``` 3 ``` Note In the example above, the longest consecutive increasing subsequence is `[1, 2, 3]`. Consider edge cases where the list is already sorted in decreasing order or all elements are the same; the solution should still work efficiently.","solution":"def longest_increasing_subsequence_length(arr): Returns the length of the longest consecutive increasing subsequence in the list. if not arr: return 0 longest = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 longest = max(longest, current_length) else: current_length = 1 return longest"},{"question":"Implement a function `int_to_roman` that converts an integer to its corresponding Roman numeral. The input integer will be in the range from 1 to 3999. The Roman numeral system uses the following symbols and values: ``` Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 ``` Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. The number nine is written as `IX`. The same principle applies to the numbers 40 (`XL`) and 90 (`XC`), 400 (`CD`) and 900 (`CM`). Given an integer, convert it to a Roman numeral. Example: ```python int_to_roman(1994) ``` returns the string: ``` \\"MCMXCIV\\" ```","solution":"def int_to_roman(num: int) -> str: Convert an integer to a Roman numeral. :param num: Integer to convert, must be in the range 1 to 3999. :return: A string representing the Roman numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' for i in range(len(val)): while num >= val[i]: num -= val[i] roman_num += syb[i] return roman_num"},{"question":"Alice is conducting an experiment in which she observes a sequence of numbers. In her experiment, Alice can perform a specific operation any number of times on the sequence. The operation consists of the following steps: 1. Choose a subarray of the sequence. 2. Add 1 to all elements of the chosen subarray. Alice wonders what is the minimum number of operations required to make all elements of the sequence equal. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the length of the sequence. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the elements of the sequence. -----Output----- Output one integer — the minimum number of operations required to make all elements of the sequence equal. -----Examples----- Input 4 1 2 3 4 Output 3 Input 5 5 5 5 5 5 Output 0 Input 3 1 5 7 Output 6 -----Note----- In the first sample, you need to perform three operations to make all elements equal to 4: 1. Add 1 to the subarray [1, 2, 3, 4] to get [2, 3, 4, 5] 2. Add 1 to the subarray [2, 3, 4] to get [2, 4, 5] 3. Add 1 to the subarray [1, 2, 3] to get [4, 4, 4, 4] In the second sample, all elements are already equal, so no operations are needed. In the third sample, you can perform the following operations: 1. Add 1 to the subarray [1, 5, 7] to get [2, 6, 8] 2. Add 1 to the subarray [2, 6, 8] to get [3, 7, 9] 3. Add 1 to the subarray [3, 7, 9] to get [4, 8, 10] 4. Add 1 to the subarray [4, 8, 10] to get [5, 9, 11] 5. Add 1 to the subarray [5, 9, 11] to get [6, 10, 12] 6. Add 1 to the subarray [2, 12] to get [12, 12, 12]","solution":"def min_operations_to_make_elements_equal(n, sequence): Returns the minimum number of operations required to make all elements of the sequence equal. Here, the minimum number of operations required is the difference between the maximum and minimum elements in the sequence. max_value = max(sequence) min_value = min(sequence) return max_value - min_value"},{"question":"Create a function that takes an integer `n` and returns a list of all prime numbers less than `n`. The function should use the Sieve of Eratosthenes algorithm. If `n <= 2`, the function should return an empty list.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a function that takes a list of integers and returns the second largest unique integer in the list. If the list doesn\'t contain at least two unique integers, return None. Constraints * The list will have at least one integer and at most 1000 integers. * The integer values will be between -1000 and 1000 inclusive. Input A list of integers is provided. Output Return the second largest unique integer in the list, or None if it does not exist. Examples Input [1, 2, 3, 4, 5] Output 4 Input [5, 5, 5, 5] Output None Input [3, 1, 2, 2, 3, 4] Output 3","solution":"def second_largest_unique(lst): Returns the second largest unique integer in the list. If the list doesn\'t contain at least two unique integers, returns None. unique_numbers = list(set(lst)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Write a function that determines if a number is a prime number. A prime number is a number that is only divisible by 1 and itself. Your function should take an integer as input and return a string as follows: - If the number is prime, return `\\"N is a prime number\\"` - If the number is not prime, return `\\"N is not a prime number\\"` where `N` is the input number. **Examples** ```python is_prime(11) ``` **Output:** ``` \\"11 is a prime number\\" ``` ```python is_prime(15) ``` **Output:** ``` \\"15 is not a prime number\\" ``` **Notes** - Negative numbers, 0, and 1 are not prime numbers. - Efficiently handle large numbers. - The input will always be a non-negative integer.","solution":"def is_prime(N): Determines if the given number N is a prime number. Parameters: N (int): The number to check. Returns: str: A string stating if N is a prime or not. if N <= 1: return f\\"{N} is not a prime number\\" for i in range(2, int(N**0.5) + 1): if N % i == 0: return f\\"{N} is not a prime number\\" return f\\"{N} is a prime number\\""},{"question":"Write a function that takes a list of integers and a single integer `n`, and returns a new list containing only the elements that are divisible by `n`. If no elements are divisible by `n`, return an empty list. **Example:** * Input: `lst = [10, 15, 20, 25, 30]`, `n = 5` * Output: `[10, 15, 20, 25, 30]` * Input: `lst = [4, 8, 16, 32]`, `n = 3` * Output: `[]` * Input: `lst = [1, 2, 3, 4, 5, 6]`, `n = 2` * Output: `[2, 4, 6]` **Note:** - Assume the elements of the list and `n` are all integers. - You need to define a function with the following signature: `def find_divisibles(lst, n):`","solution":"def find_divisibles(lst, n): Returns a new list containing only the elements from lst that are divisible by n. If no elements are divisible by n, return an empty list. return [x for x in lst if x % n == 0]"},{"question":"You are given an array of integers and a target sum k. Your task is to find whether there exists a pair of distinct elements in the array whose sum is equal to k. If such a pair exists, print \\"YES\\". Otherwise, print \\"NO\\". **Input** An integer n representing the size of the array, followed by n integers representing the elements of the array, and an integer k representing the target sum. **Output** A single line containing either \\"YES\\" or \\"NO\\" indicating whether there exists a pair whose sum equals to k. **Sample Input** 6 1 4 45 6 10 8 16 **Sample Output** YES","solution":"def pair_with_sum(arr, k): Determines if there are two distinct elements in the array whose sum is k. seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" # Example Usage: # n = 6 # arr = [1, 4, 45, 6, 10, 8] # k = 16 # print(pair_with_sum(arr, k)) # Output: \\"YES\\""},{"question":"Dr. Smith, the librarian, is organizing a sequence of book returns. Each book has a specific return deadline. Dr. Smith wonders the following: if each book is returned exactly on its deadline, what is the maximum number of books that can be returned such that no two books are returned on the same day? You are given an integer `n` representing the number of books, followed by `n` integers indicating the return deadlines of the `n` books. Input The first line contains an integer `n` (1 ≤ n ≤ 105) which is the number of books. The second line contains `n` integers, where the i-th integer `d_i` (1 ≤ d_i ≤ 109) represents the return deadline of the i-th book. Output Output a single integer which is the maximum number of books that can be returned on their respective deadlines without any two books having the same return day. Examples Input 4 2 3 2 1 Output 3 Input 6 9 5 5 8 7 6 Output 6 Note In the first sample test: * Book deadlines: {2, 3, 2, 1} * Optimal schedule: Book 4 on day 1, one of Book 1 or 3 on day 2, and Book 2 on day 3. In the second sample test: * Book deadlines: {9, 5, 5, 8, 7, 6} * Optimal schedule: Each book can be returned on a distinct day without any clashes.","solution":"def max_books_returned(n, deadlines): Given the number of books and their respective return deadlines, return the maximum number of books that can be returned on their respective deadlines without any two books having the same return day. if n == 0: return 0 deadlines.sort() max_books = 0 current_day = 0 for deadline in deadlines: if deadline > current_day: current_day += 1 max_books += 1 return max_books"},{"question":"Ashok is preparing for a string transformation competition. He has a string boldsymbol{s} of lowercase letters, and he wants to transform it into another string boldsymbol{t} using a series of operations. He can only perform the following operations: 1. Delete any single character from string boldsymbol{s} at a cost of mbox{1} dollar. 2. Insert any single character into string boldsymbol{s} at a cost of mbox{1} dollar. 3. Replace any single character in string boldsymbol{s} with another character at a cost of mbox{1} dollar. Given m pairs of strings (s[i], t[i]), find and print the minimum cost of transforming each s[i] into t[i]. For example, given s=text{\\"kitten\\"} and t=text{\\"sitting\\"}, the minimum cost of transformation is mbox{3} dollars. We delete the character \'k\' from s, replace \'e\' with \'i\', and append \'g\' to the end of s. Function Description Complete the stringTransformation function in the editor below. It should return the minimum cost of transforming a string. stringTransformation has the following parameter(s): - s: the original string - t: the target string Input Format The first line contains a single integer m, the number of string pairs. Each of the next m lines contains two space-separated strings, s[i] and t[i]. Constraints 1 leq m leq 5 1 leq |s[i]|, |t[i]| leq 10^5 Subtasks 1 leq |s[i]|, |t[i]| leq 10^3 for 45% of the maximum score. Output Format For each pair of strings (s[i], t[i]), print the minimum cost of transforming s[i] into t[i] on a new line. Sample Input 2 kitten sitting flaw law Sample Output 3 2 Explanation Query 0: We start with s=text{\\"kitten\\"} and t=text{\\"sitting\\"}. - Replace \'k\' with \'s\' at a cost of mbox{1} dollar. - Replace \'e\' with \'i\' at a cost of mbox{1} dollar. - Insert \'g\' at the end at a cost of mbox{1} dollar. Total cost of transformations is 1 + 1 + 1 = 3 dollars. Query 1: We start with s=text{\\"flaw\\"} and t=text{\\"law\\"}. - Delete \'f\' from the beginning at a cost of mbox{1} dollar. - Replace \'l\' with \'l\' (no cost). - Replace \'a\' with \'a\' (no cost). - Replace \'w\' with \'w\' (no cost). Total cost of transformation is mbox{1} dollar.","solution":"def stringTransformation(m, pairs): def min_cost(s, t): len_s = len(s) len_t = len(t) # Create a DP array dp = [[0] * (len_t + 1) for _ in range(len_s + 1)] # Initialize the DP array for i in range(len_s + 1): dp[i][0] = i for j in range(len_t + 1): dp[0][j] = j # Fill up the DP table for i in range(1, len_s + 1): for j in range(1, len_t + 1): if s[i-1] == t[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 return dp[len_s][len_t] results = [] for s, t in pairs: results.append(min_cost(s, t)) return results"},{"question":"Given an integer N, your task is to count the number of unique prime factors of N\'s factorial (N!). Input The input consists of a single positive integer: N. Output Output a single number - the count of unique prime factors of N!. Constraints 2 ≤ N ≤ 10^6 SAMPLE INPUT 10 SAMPLE OUTPUT 4 Explanation 10! = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 = 3628800. The unique prime factors are 2, 3, 5, and 7. Thus, the output is 4.","solution":"def count_unique_prime_factors_of_factorial(N): Returns the count of unique prime factors of N! def sieve_of_eratosthenes(max_num): Generates a list of primes up to max_num using the Sieve of Eratosthenes algorithm. is_prime = [True] * (max_num + 1) p = 2 while (p * p <= max_num): if (is_prime[p] == True): for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 prime_list = [] for p in range(2, max_num + 1): if is_prime[p]: prime_list.append(p) return prime_list # Generate all primes up to N using the sieve of Eratosthenes primes = sieve_of_eratosthenes(N) return len(primes)"},{"question":"Given a list of integers, split the current list into two lists such that: - The first list contains all the odd numbers from the original list, sorted in ascending order. - The second list contains all the even numbers from the original list, sorted in descending order. Implement a function that returns both lists as a tuple. Example: ``` Input: [4, 1, 7, 5, 6, 2, 3] Output: ([1, 3, 5, 7], [6, 4, 2]) ``` Your task is to implement the function `split_and_sort(nums: List[int]) -> Tuple[List[int], List[int]]`. Note: - Ensure that both lists in the output are sorted correctly as per the requirements. - The original list should remain unchanged by your function.","solution":"from typing import List, Tuple def split_and_sort(nums: List[int]) -> Tuple[List[int], List[int]]: Splits a list of integers into two lists: - One containing odd numbers sorted in ascending order. - Another containing even numbers sorted in descending order. Returns a tuple of the two lists. odd_numbers = [num for num in nums if num % 2 != 0] even_numbers = [num for num in nums if num % 2 == 0] odd_numbers.sort() even_numbers.sort(reverse=True) return odd_numbers, even_numbers"},{"question":"Alice loves working with strings. She has a string `S` and a set of rules to transform it. The transformation consists of two operations that she can perform any number of times in any order: 1. Swap any two characters in the string. 2. Reverse any substring of the string. Alice wants to know the lexicographically smallest string she can achieve after performing any number of operations. **Constraints** * 1 ≤ |S| ≤ 2 × 10^5 * S consists of lowercase English letters. **Input** Input is given as a single string `S`. **Output** Print the lexicographically smallest string Alice can achieve. **Examples** _Input:_ bacd _Output:_ abcd _Input:_ dcba _Output:_ abcd","solution":"def lexicographically_smallest_string(S): This function returns the lexicographically smallest string achievable by sorting the string S, which allows for indefinite swaps and reversals. return \'\'.join(sorted(S))"},{"question":"Lena loves arranging flowers in unique ways to create beautiful bouquets. She has a garden with N different types of flowers, each type available in large quantities. She wants to create bouquets that contain exactly K flowers, where no two flowers of the same type are adjacent in a bouquet. A bouquet is represented as a sequence of flower types, and the same set of flower types arranged in different sequences are considered as different bouquets. Each flower in the sequence is represented by an integer from 1 to N. Given N and K, help Lena find the number of distinct bouquets she can create. The answer can be large, so output the answer modulo 10^9+7. Input: The first line contains two integers N and K. Output: Output the number of distinct bouquets of length K that can be formed under the given constraints. Constraints: 1 ≤ N ≤ 1000 1 ≤ K ≤ 100 SAMPLE INPUT 3 3 SAMPLE OUTPUT 6 Explanation Lena can create the following 6 distinct bouquets with the given constraints: 1 2 3, 1 3 2, 2 1 3, 2 3 1, 3 1 2, 3 2 1","solution":"MOD = 10**9 + 7 def count_bouquets(N, K): Returns the number of distinct bouquets with K flowers where no two adjacent flowers are of the same type. if K > N or N == 0 or K == 0: return 0 # Dynamic programming table where dp[k] is the number of valid bouquets of length k dp = [0] * (K + 1) dp[0] = 1 # Base case: There is 1 way to arrange 0 flowers for i in range(1, K + 1): dp[i] = (dp[i - 1] * (N - (i - 1))) % MOD return dp[K] # Example of using the function: # result = count_bouquets(3, 3) # print(result) # Output should be 6"},{"question":"Given a 2D grid of characters and a word, write a function to determine if the word can be constructed from the grid letters using depth-first search. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Example 1: Input: grid = [[\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\']] word = \\"ABCCED\\" Output: True Example 2: Input: grid = [[\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\']] word = \\"SEE\\" Output: True Example 3: Input: grid = [[\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\']] word = \\"ABCB\\" Output: False Your Task: You don\'t need to read the input or print anything. Your task is to complete the function `exist()` which takes the 2D grid of characters and the string word as inputs and returns a boolean value indicating whether the word exists in the grid. Expected Time Complexity: O(N * 3^L) where N is the number of cells in the grid and L is the length of the word. Expected Auxiliary Space: O(L) where L is the length of the word. Constraints: - The grid can have a maximum size of 200x200. - The word can have a maximum length of 10^3. - All inputs are guaranteed to be non-empty and contain only uppercase English letters.","solution":"def exist(grid, word): rows, cols = len(grid), len(grid[0]) def dfs(r, c, i): if i == len(word): return True if r < 0 or r >= rows or c < 0 or c >= cols or word[i] != grid[r][c]: return False temp = grid[r][c] grid[r][c] = \\"#\\" found = (dfs(r+1, c, i+1) or dfs(r-1, c, i+1) or dfs(r, c+1, i+1) or dfs(r, c-1, i+1)) grid[r][c] = temp return found for r in range(rows): for c in range(cols): if grid[r][c] == word[0] and dfs(r, c, 0): return True return False"},{"question":"Alyssa is a botanist who loves to study the growth patterns of various plants. She is particularly interested in a species of plant that follows a unique growth pattern which can be represented as a series of numbers. Each number in the series is the sum of the previous two numbers, starting from two initial numbers. This growth pattern is known as the Fibonacci sequence. However, Alyssa has observed that some plants skip a number in the sequence under certain conditions. Given this interesting twist, she now wants to know how many possible variations of the Fibonacci-like sequence can be generated if exactly one number is allowed to be skipped anywhere in the sequence. Input The first line contains two integers a and b (1 ≤ a, b ≤ 10^9), the initial numbers of the sequence. The second line contains an integer n (2 ≤ n ≤ 1000), denoting the position in the sequence Alyssa wants to analyse. Note that the position 1 corresponds to the number \'a\' and the position 2 corresponds to the number \'b\'. Output Output a single integer, the number of distinct variations of the sequence where exactly one number is skipped that can occur at the n-th position. Example Input 2 3 5 Output 2 Note In the example given, the sequence starts as 2, 3, 5, 8, 13. If we skip the 5, the new sequence can be 2, 3, 8, 13. If we skip the 8, the sequence can be 2, 3, 5, 13. Therefore, there are exactly 2 distinct variations of the sequence where a single number is skipped.","solution":"def fibonacci_variations(a, b, n): Returns the number of distinct variations of the Fibonacci-like sequence where exactly one number is skipped at the nth position. if n == 1 or n == 2: return 0 # If we skip the first or second element, it would not be counted. # Generate the Fibonacci-like sequence up to the nth position fib_sequence = [a, b] for i in range(2, n): fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2]) # If we skip the nth element, we have to consider: # 1. Skipping the element at n-1 # 2. Skipping the element at n-2 # if we skip two consecutive elements, the next element will be the sum of the last two in the sequence. variations = 2 # Skipping the (n-2)th or (n-1)th element results in different sequences return variations"},{"question":"Alice and Bob are playing a unique card game where they are dealt a hand of n cards, each with a positive integer value. They take turns picking one card from either end of the row of remaining cards. Alice always picks first and both play optimally, trying to maximize the sum of values of the cards they have picked. Your task is to determine the final scores for Alice and Bob after all cards have been picked. -----Input----- The input consists of two lines. - A single integer 1 leq n leq 20, the number of cards. - The values of the cards c_0, c_1, dots, c_{n-1}, space-separated. It is given that 1 leq c_i leq 100. -----Output----- Output a single line containing two integers, the combined value of Alice’s cards and the combined value of Bob’s cards. -----Examples----- Sample Input: 4 3 9 1 2 Sample Output: 11 4 Sample Input: 6 1 2 9 4 5 3 Sample Output: 15 9","solution":"def alice_bob_scores(n, cards): Returns the final scores for Alice and Bob if they play optimally. # Initialize memoization table for dynamic programming dp = [[(0, 0) for _ in range(n)] for _ in range(n)] # Base case: when there\'s only one card, Alice picks it for i in range(n): dp[i][i] = (cards[i], 0) # Fill the table for all subproblems for length in range(2, n + 1): # subproblems of length 2 to n for i in range(n - length + 1): # starting index of subproblem j = i + length - 1 # ending index of subproblem # Alice can either take the card at i or the card at j left_choice = (cards[i] + dp[i + 1][j][1], dp[i + 1][j][0]) right_choice = (cards[j] + dp[i][j - 1][1], dp[i][j - 1][0]) # Choose the better option for Alice if left_choice[0] > right_choice[0]: dp[i][j] = left_choice else: dp[i][j] = right_choice # The final answer is stored in dp[0][n-1] return dp[0][n-1] # Example inputs, these are just for illustration purposes # n = 6 # cards = [1, 2, 9, 4, 5, 3] # Result: (15, 9)"},{"question":"Power Grid Resilience A city is planning to improve the resilience of its power grid. The power grid can be conceptualized as a tree with N nodes (representing substations) and N-1 edges (representing transmission lines connecting the substations). Each edge has an associated weight that represents the cost to make that transmission line resilient. Given the structure of the power grid and the resilience costs of each transmission line, find the minimum cost required to make the entire power grid resilient. Note that making the entire power grid resilient means that every edge in the tree must be made resilient. # Constraints The input satisfies the following constraints: * 2 ≤ N ≤ 1000 * 1 ≤ weight of each edge ≤ 1000 # Input The input is given in the following format: ``` N u1 v1 w1 u2 v2 w2 ... u(N-1) v(N-1) w(N-1) ``` * The first line contains an integer N, the number of substations. * The following N-1 lines contain three integers `u`, `v`, and `w`, indicating that there is a transmission line connecting substations `u` and `v` with a resilience cost of `w`. # Output Print a single integer representing the minimum cost required to make the entire power grid resilient. # Examples Example 1 Input: ``` 4 1 2 3 2 3 4 3 4 5 ``` Output: ``` 12 ``` Example 2 Input: ``` 5 1 2 1 1 3 2 3 4 3 2 5 4 ``` Output: ``` 10 ```","solution":"def minimum_resilience_cost(N, edges): Compute the minimum cost required to make the entire power grid resilient. Since the graph is a tree, all edges are necessary and we simply sum their weights. Arguments: N -- number of nodes (substations) edges -- list of edges where each edge is represented as a tuple (u, v, w) Returns: int -- the minimum resilience cost return sum(w for u, v, w in edges)"},{"question":"Write a function to determine if students pass the subject based on their scores. INPUT: First line contains a single integer T representing the number of test cases. Each test case contains three lines. The first line contains an integer N, representing the number of students in the class. The second line contains N space-separated integers representing the scores of the students. The third line contains a single integer P, representing the minimum score required to pass the subject. OUTPUT: For each test case, output \\"PASS\\" if all students scored at least P, and \\"FAIL\\" otherwise. CONSTRAINTS: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 0 ≤ scores ≤ 100 0 ≤ P ≤ 100 SAMPLE INPUT 2 3 55 65 75 50 4 90 40 60 80 50 SAMPLE OUTPUT PASS FAIL","solution":"def has_passed_all_students(test_cases): Determines if all students in each test case have passed based on their scores. results = [] for case in test_cases: N, scores, P = case if all(score >= P for score in scores): results.append(\\"PASS\\") else: results.append(\\"FAIL\\") return results def parse_input(input_str): input_lines = input_str.strip().split(\\"n\\") T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) scores = list(map(int, input_lines[index+1].split())) P = int(input_lines[index+2]) test_cases.append((N, scores, P)) index += 3 return test_cases"},{"question":"A company is organizing a relay race where participants pass a baton to each other. Each participant has a stamina rating, and the team must decide the order of passing the baton so that no participant becomes too exhausted too quickly. The race track is a loop, so after the last participant, the baton is passed to the first participant again. Given an array that represents the stamina ratings of N participants, the task is to determine the minimum exhaustion of the team over the course of one full loop around the track. The exhaustion for each participant is calculated as the absolute difference of the stamina ratings between consecutive participants they pass the baton to, including the loopback to the starting participant. Input: First line contains a single integer N. Second line contains N space-separated integers representing the stamina ratings of the participants. Output: Print a single integer representing the minimum possible exhaustion from the optimal order of baton passing. Constraints: 1 ≤ N ≤ 10^5 1 ≤ stamina rating ≤ 10^9 SAMPLE INPUT 4 10 20 10 15 SAMPLE OUTPUT 15 Explanation: One possible optimal order to pass the baton is [10, 10, 15, 20]. The team\'s exhaustion in this order is calculated as abs(10 - 10) + abs(10 - 15) + abs(15 - 20) + abs(20 - 10) = 0 + 5 + 5 + 10 = 20. Another possible better order is [10, 15, 20, 10]. The team\'s exhaustion in this order is calculated as abs(10 - 15) + abs(15 - 20) + abs(20 - 10) + abs(10 - 10) = 5 + 5 + 10 + 0 = 20. This also results in total exhaustion of 20, proving minimum optimal exhaustion for this set of stamina ratings.","solution":"def min_exhaustion(stamina): Determines the optimal order of passing the baton to minimize exhaustion. stamina.sort() min_exhaust = float(\'inf\') # Try every possible starting point for i in range(len(stamina)): cur_exhaust = 0 for j in range(len(stamina)): cur_exhaust += abs(stamina[j] - stamina[(j + 1) % len(stamina)]) min_exhaust = min(min_exhaust, cur_exhaust) stamina.insert(0, stamina.pop()) # rotate list for next permutation return min_exhaust"},{"question":"A robot on a grid starts at position (0, 0) and can receive a sequence of moves that impact its position on the grid. The possible moves are \'U\' (which moves the robot up by 1 unit), \'D\' (which moves the robot down by 1 unit), \'L\' (which moves the robot left by 1 unit), and \'R\' (which moves the robot right by 1 unit). Given a sequence of such moves, determine whether the robot returns to the origin (0, 0) at the end of the sequence. Function Description Complete the `returnsToOrigin` function in the editor below. `returnsToOrigin` has the following parameter(s): - string moves: a string representing the sequence of moves made by the robot Returns - boolean: True if the robot returns to the origin, False otherwise Input Format A single line containing a string `moves` with characters \'U\', \'D\', \'L\', \'R\'. Constraints 1 leq text{length of moves} leq 10^5 Sample Input \\"UDLR\\" Sample Output True Explanation The robot moves: - Up one unit to (0, 1) - Down one unit to (0, 0) - Left one unit to (-1, 0) - Right one unit back to (0, 0) Since the robot ends up at the origin, the function returns True.","solution":"def returnsToOrigin(moves): Determines if the robot returns to the origin (0, 0) after a sequence of moves. Parameters: moves (string): a string representing the sequence of moves made by the robot Returns: boolean: True if the robot returns to the origin, False otherwise x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x == 0 and y == 0"},{"question":"John is a robotics engineer who loves programming and solving complex problems. Recently, he encountered a peculiar problem while working on a project. He has an array of integers, and he needs to transform this array into a \\"snake\\" pattern – a sequence of elements that increases and decreases alternately. Formally, he needs to reorder the array such that: - The first element is less than or equal to the second element. - The second element is greater than or equal to the third element. - The third element is less than or equal to the fourth element, and so on. John has asked for your help to write a program that can transform any given array into this \\"snake\\" pattern. -----Task----- Your task is to write a program that takes an array of integers and rearranges it into the required \\"snake\\" pattern. -----Input----- The input contains two lines: - The first line contains a single integer n, the length of the array. - The second line contains n space-separated integers, which are the elements of the array. -----Constraints----- 1 leq n leq 1000 Each integer in the array, a_i, satisfies: -10^4 leq a_i leq 10^4 -----Output----- The output contains one line with the rearranged array, in the required \\"snake\\" pattern. -----Sample Output Explanation----- In the first sample, the array [3, 1, 2, 5, 4] can be rearranged into [1, 3, 2, 5, 4], which follows the pattern. In the second sample, the array [7, 1, 5, 0, 3] can be rearranged into [1, 7, 0, 5, 3], which follows the pattern. -----Examples----- Sample Input: 5 3 1 2 5 4 Sample Output: 1 3 2 5 4 Sample Input: 5 7 1 5 0 3 Sample Output: 1 7 0 5 3","solution":"def snake_pattern(n, arr): This function transforms the given array into a snake pattern: - arr[i] <= arr[i + 1], if i is even - arr[i] >= arr[i + 1], if i is odd for i in range(n - 1): if i % 2 == 0: if arr[i] > arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] else: if arr[i] < arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] return arr # Example usage: # n = 5 # arr = [3, 1, 2, 5, 4] # print(snake_pattern(n, arr)) # Output: [1, 3, 2, 5, 4]"},{"question":"Given an array of integers representing the inorder traversal of a Binary Search Tree (BST), your task is to complete the function rebuildBST(), that should return the root of the BST reconstructed from the provided inorder traversal. Input: First line of input contains the number of test cases T. For each test case, the format will be as follows: - The first line contains an integer N, denoting the number of elements in the inorder traversal. - The second line contains N space-separated integers, representing the inorder traversal of the BST. Output: The function should return the root of the reconstructed BST. The structure of the returned BST can be verified by performing an inorder traversal. User Task: As it is a functional problem, you don\'t need to worry about the input. You just have to complete the function rebuildBST() that takes an array as a parameter and returns the root node of the BST. Constraints: 1 <= T <= 20 1 <= N <= 1000 Example: Input: 2 3 1 2 3 7 1 2 3 4 5 6 7 Output: Inorder Traversal of BST: 1 2 3 Inorder Traversal of BST: 1 2 3 4 5 6 7 Note: The Input/Output format and Example given are for system\'s internal purpose, and should be used by users for Expected Output only. As it is a function problem, the user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def rebuildBST(inorder): Rebuild a BST from inorder traversal and return its root node. if not inorder: return None # Helper function to rebuild BST from a given inorder traversal segment def buildTree(left, right): if left > right: return None mid = (left + right) // 2 node = TreeNode(inorder[mid]) node.left = buildTree(left, mid - 1) node.right = buildTree(mid + 1, right) return node return buildTree(0, len(inorder) - 1) def inorderTraversal(root): Helper function to get the inorder traversal of the BST. return inorderTraversal(root.left) + [root.val] + inorderTraversal(root.right) if root else []"},{"question":"Create a function `lru_cache` that implements a Least Recently Used (LRU) cache mechanism. The function should take two arguments: a list of strings representing the sequence of operations and a maximum cache size. The allowed operations are \\"GET <key>\\" and \\"SET <key> <value>\\". The function should process the operations and return a list of strings representing the results of the \\"GET\\" operations. Example 1: Input: operations = [\\"SET 1 10\\", \\"SET 2 20\\", \\"GET 1\\", \\"SET 3 30\\", \\"GET 2\\", \\"SET 4 40\\", \\"GET 3\\"] cache_size = 2 Output: [\\"10\\", \\"-1\\", \\"30\\"] Explanation: 1. \\"SET 1 10\\" - Cache is {1:10} 2. \\"SET 2 20\\" - Cache is {1:10, 2:20} 3. \\"GET 1\\" - returns 10 and updates cache order -> {2:20, 1:10} 4. \\"SET 3 30\\" - Cache is full, removes least recently used (2), adds 3 -> {1:10, 3:30} 5. \\"GET 2\\" - returns -1 (not found) 6. \\"SET 4 40\\" - Cache is full, removes least recently used (1), adds 4 -> {3:30, 4:40} 7. \\"GET 3\\" - returns 30 Your Task: Implement the function `lru_cache(operations, cache_size)` that processes the operations and handles the cache updates efficiently. Use appropriate data structures to ensure fast access and updates. Expected Time Complexity: O(1) for both GET and SET operations. Expected Auxiliary Space: O(cache_size) Constraints: - 1 ≤ len(operations) ≤ 10^4 - 1 ≤ key, value ≤ 10^4 - 1 ≤ cache_size ≤ 10^3","solution":"from collections import OrderedDict def lru_cache(operations, cache_size): Implements an LRU cache that processes a list of operations. Parameters: operations (list of str): List of \\"GET <key>\\" and \\"SET <key> <value>\\" operations. cache_size (int): Maximum size of the cache. Returns: list of str: Results of the \\"GET\\" operations. cache = OrderedDict() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"SET\\": key, value = parts[1], parts[2] if key in cache: cache.move_to_end(key) cache[key] = value if len(cache) > cache_size: cache.popitem(last=False) elif parts[0] == \\"GET\\": key = parts[1] if key in cache: cache.move_to_end(key) results.append(cache[key]) else: results.append(\\"-1\\") return results"},{"question":"Longest Substring Without Repeating Characters Given a string, find the length of the longest substring without repeating characters. Examples ``` \\"abcabcbb\\" => 3: \\"abc\\" \\"bbbbb\\" => 1: \\"b\\" \\"pwwkew\\" => 3: \\"wke\\" \\"dvdf\\" => 3: \\"vdf\\" ``` Goal The goal is to come up with a function that can calculate the length of the longest substring with all unique characters for any arbitrary string.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index = {} max_length = start = 0 for index, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = index max_length = max(max_length, index - start + 1) return max_length"},{"question":"You are given a matrix of characters of size N x M and a string of characters. Your task is to find if the string exists in the matrix. The string can be constructed from characters of adjacent cells only. Adjacent cells are those horizontally, vertically, or diagonally neighboring. Your function should return true if the string exists in the matrix and false otherwise. Example 1: Input: N = 4, M = 5 matrix = [ [\'A\', \'B\', \'C\', \'E\', \'F\'], [\'S\', \'F\', \'C\', \'S\', \'A\'], [\'A\', \'D\', \'E\', \'E\', \'B\'], [\'C\', \'E\', \'E\', \'E\', \'G\'] ] string = \\"ABCCED\\" Output: true Example 2: Input: N = 3, M = 4 matrix = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] string = \\"SEEZ\\" Output: false Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function existsInMatrix() which takes the matrix, dimensions N and M, and the string to be searched as parameters and returns true if the string can be found in the matrix, otherwise returns false. Expected Time Complexity: O(N*M*len(string)) Expected Auxiliary Space: O(N*M) Constraints: 1 ≤ N, M ≤ 100 1 ≤ len(string) ≤ 100","solution":"def existsInMatrix(matrix, N, M, string): Checks if the string exists in the matrix by traversing adjacent cells vertically, horizontally, or diagonally. def dfs(x, y, index): if index == len(string): return True if x < 0 or y < 0 or x >= N or y >= M or matrix[x][y] != string[index]: return False # Temporarily mark the cell as visited temp = matrix[x][y] matrix[x][y] = \'#\' # Check all 8 possible directions directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for dir in directions: new_x, new_y = x + dir[0], y + dir[1] if dfs(new_x, new_y, index + 1): return True # Restore the cell value matrix[x][y] = temp return False for i in range(N): for j in range(M): if matrix[i][j] == string[0]: if dfs(i, j, 0): return True return False"},{"question":"Vishakha loves playing with strings. She has recently learned about the concept of palindromes and wants to apply it in a coding challenge. A palindrome is a string that reads the same backward as forward. She decides that she wants to create a new palindrome from an existing string by rearranging its characters. Her challenge is to determine whether it is possible to rearrange the characters of a given string to create at least one palindrome. She seeks your help to write a program for this task. The input is a single string consisting of lowercase English letters. The output should be \\"YES\\" if it\'s possible to rearrange the string to form a palindrome, and \\"NO\\" otherwise. Input: - A single line containing a string `s` (1 ≤ |s| ≤ 10^5). Output: - A single line containing the result: \\"YES\\" or \\"NO\\". Example 1: Input: ``` carrace ``` Output: ``` YES ``` Example 2: Input: ``` hellos ``` Output: ``` NO ``` Notes: In the first example, one way to rearrange the string \\"carrace\\" to form a palindrome is \\"racecar\\". In the second example, it\'s impossible to rearrange the characters to form a palindrome.","solution":"def can_form_palindrome(s): Determines if the characters of the string can be rearranged to form a palindrome. Args: s (str): The input string consisting of lowercase English letters. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, \\"NO\\" otherwise. from collections import Counter # Count the occurrences of each character in the string char_counts = Counter(s) # Check the number of characters that appear an odd number of times odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # For a string to be rearranged into a palindrome: # - At most one character can have an odd count (middle character in an odd-length palindrome) if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a non-negative integer `N`, find the smallest non-negative integer `M` such that the sum of the digits of `M` equals `N`. For example, if `N` is 15, the smallest `M` where the sum of its digits equals 15 is 69 since `6 + 9 = 15`. Constraints - 0 leq N leq 45 - N is an integer. Input Input is given from Standard Input in the following format: N Output Print the smallest non-negative integer `M` such that the sum of its digits equals `N`. Examples Input 15 Output 69 Input 5 Output 5","solution":"def smallest_integer_with_sum_of_digits(n): Find the smallest non-negative integer M such that the sum of the digits of M equals N. # We\'ll use a greedy approach to minimize the M. # Start from the least significant digit and work towards the most significant digit, # trying to form the smallest number possible. if n == 0: return 0 # Special case for 0 result = [] while n > 0: digit = min(n, 9) # The highest digit we can consume without exceeding n is 9 result.append(digit) n -= digit # Reverse the digits to to get the smallest integer result.reverse() return int(\'\'.join(map(str, result)))"},{"question":"In this Kata, you will implement a function `next_bigger` that receives a positive integer `n` and returns the next bigger number that can be formed by rearranging its digits. If no such number exists, return `-1`. For example: - `next_bigger(12)` should return `21` - `next_bigger(513)` should return `531` - `next_bigger(2017)` should return `2071` - `next_bigger(111)` should return `-1` - `next_bigger(531)` should return `-1` Your task is to write the function with the following signature: ```python def next_bigger(n: int) -> int: # Your code here ``` More examples in the test cases. Do your best!","solution":"def next_bigger(n: int) -> int: digits = list(str(n)) length = len(digits) # Step 1: Find the rightmost digit which is smaller than its next digit for i in range(length - 2, -1, -1): if digits[i] < digits[i + 1]: break else: return -1 # No such digit found means digits are in descending order # Step 2: Find the smallest digit on the right side of the found digit which is larger than the found digit smallest_larger_index = i + 1 for j in range(i + 1, length): if digits[i] < digits[j] <= digits[smallest_larger_index]: smallest_larger_index = j # Step 3: Swap the found digit with the smaller larger digit found digits[i], digits[smallest_larger_index] = digits[smallest_larger_index], digits[i] # Step 4: Sort the digits to the right of the swapped position digits = digits[:i + 1] + sorted(digits[i + 1:]) return int(\\"\\".join(digits))"},{"question":"You are given an n times n matrix, where 2 leq n leq 10, filled with integers. The objective is to find the smallest number in the diagonal running from the top-left to the bottom-right corner (the main diagonal). -----Input----- The first line contains a single integer n, the size of the matrix. The next n lines each contain n integers, representing the matrix elements. -----Output----- Output the smallest integer in the main diagonal of the matrix. -----Examples----- Sample Input 1: 3 1 2 3 4 5 6 7 8 9 Sample Output 1: 1 Sample Input 2: 4 10 20 30 40 50 60 70 80 90 21 22 23 24 25 26 27 Sample Output 2: 10","solution":"def smallest_on_diagonal(matrix): Returns the smallest number in the main diagonal of the given square matrix. The main diagonal runs from the top-left to the bottom-right. n = len(matrix) main_diagonal_elements = [matrix[i][i] for i in range(n)] return min(main_diagonal_elements)"},{"question":"An explorer is traversing a grid of land containing treasure and obstacles. The land is represented by a 2D array where the symbols \\"O\\" indicate open land, \\"X\\" indicates an obstacle, and \\"T\\" indicates treasure. The explorer can move up, down, left, or right, but cannot move through obstacles. Given the starting position of the explorer and the grid, determine the minimum number of steps to reach the treasure, or output -1 if it is not possible to reach the treasure. ----------Constraints---------- - The grid dimensions are 1 ≤ N, M ≤ 100, where N is the number of rows and M is the number of columns. - The input consists of a rectangular grid with at least one \'T\'. ----------Input---------- - The first line contains two integers, N and M. - The second line contains two integers, the starting row and column of the explorer (0-based index). - The next N lines each contain M characters representing the grid. ----------Output---------- Output the minimum number of steps required to reach the treasure, or -1 if it is not possible. ----------Sample Input---------- 5 5 0 0 O O O X T O X O O O O O X T O T O O X O O O O O O ----------Sample Output---------- 3 From the starting point (0,0), the explorer can take the following path: Right -> Right -> Down -> Down to reach treasure at (2,3).","solution":"from collections import deque def min_steps_to_treasure(N, M, start_row, start_col, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start_row, start_col, 0)]) # (row, col, steps) visited = set((start_row, start_col)) while queue: row, col, steps = queue.popleft() if grid[row][col] == \'T\': return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < N and 0 <= new_col < M and (new_row, new_col) not in visited and grid[new_row][new_col] != \'X\': visited.add((new_row, new_col)) queue.append((new_row, new_col, steps + 1)) return -1"},{"question":"You are given a rectangular grid of size N x M where each cell contains a non-negative integer representing an elevation map. The task is to find the minimum effort path from the top-left cell (0, 0) to the bottom-right cell (N-1, M-1). A path is defined as a sequence of adjacent cells in the grid where you move from one cell to another cell that is either to the top, bottom, left, or right. The effort of a path is defined as the maximum absolute difference in elevations between two consecutive cells in the path. To summarize, you need to find a path from the top-left to the bottom-right which minimizes the maximum absolute difference in elevations along the path. Input The first line contains an integer T ≤ 50 indicating the number of test cases. Each test case begins with a line containing two integers N and M, where 1 ≤ N, M ≤ 100. The next N lines each contain M integers representing the elevation map, where each integer is between 0 and 1000 inclusive. Output For each test case, output a single integer which is the minimum effort required to travel from the top-left to the bottom-right of the grid. Example Input: 3 3 3 1 2 2 3 8 2 5 3 5 2 2 1 2 3 4 4 4 1 2 2 3 3 8 2 7 5 8 5 9 6 3 4 1 Output: 2 2 3 Explanation: - In the first test case, the least effort path could be: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) with maximum difference in elevations of 2. - In the second test case, the least effort path could be: (0, 0) -> (0, 1) -> (1, 1) with maximum difference in elevations of 2. - In the third test case, the least effort path could be: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (2, 1) -> (2, 0) -> (3, 0) -> (3, 1) -> (3, 2) -> (3, 3) with maximum difference in elevations of 3.","solution":"from heapq import heappop, heappush import sys def minimum_effort_path(elevation): N, M = len(elevation), len(elevation[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Using a priority queue to track cells to visit, starting with the top-left corner (0,0) pq = [(0, 0, 0)] # (effort, row, col) # To keep track of minimum effort to reach each cell min_effort = [[sys.maxsize] * M for _ in range(N)] min_effort[0][0] = 0 while pq: current_effort, r, c = heappop(pq) if r == N - 1 and c == M - 1: return current_effort for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M: next_effort = max(current_effort, abs(elevation[nr][nc] - elevation[r][c])) if next_effort < min_effort[nr][nc]: min_effort[nr][nc] = next_effort heappush(pq, (next_effort, nr, nc)) return -1 def solve_minimum_effort_path(test_cases): results = [] for grid in test_cases: result = minimum_effort_path(grid) results.append(result) return results def parse_input(input_string): input_lines = input_string.strip().split(\\"n\\") index = 0 T = int(input_lines[index]) index += 1 test_cases = [] for _ in range(T): N, M = map(int, input_lines[index].split()) index += 1 grid = [] for _ in range(N): grid.append(list(map(int, input_lines[index].split()))) index += 1 test_cases.append(grid) return test_cases def format_output(results): return \\"n\\".join(map(str, results)) def main(input_string): test_cases = parse_input(input_string) results = solve_minimum_effort_path(test_cases) return format_output(results)"},{"question":"Alice loves to collect and organize rare stamps. She has a collection of n stamps, each represented by its rarity level ai, where 1 ≤ ai ≤ 1000, and 1 ≤ n ≤ 100000. Alice wants to organize her collection in such a way that all stamps with the same rarity level are placed next to each other. Additionally, she wants to know the number of unique rarity levels in her collection. Your task is to help Alice sort her collection and determine the number of unique rarity levels. Input The first line contains an integer n (1 ≤ n ≤ 100000), the number of stamps in Alice\'s collection. The second line contains n integers ai (1 ≤ ai ≤ 1000), representing the rarity levels of the stamps. Output Print on the first line the number of unique rarity levels in Alice\'s collection. On the second line, print the sorted list of stamps, where stamps with the same rarity level are contiguous. Examples Input 5 4 2 3 2 4 Output 3 2 2 3 4 4 Input 7 1000 999 1000 500 500 500 1000 Output 3 500 500 500 999 1000 1000 1000","solution":"def organize_stamps(n, rarity_levels): # Count the occurrence and maintain the sorted order sorted_list = sorted(rarity_levels) unique_rarities = len(set(sorted_list)) return unique_rarities, sorted_list"},{"question":"You are given a circle of n restaurants arranged clockwise and m food preferences of individuals. Each individual\'s preference is represented as a pair (a_i, b_i), where a_i and b_i are restaurant indices indicating that the person likes restaurant a_i more than restaurant b_i. Your task is to determine the minimum number of swaps required to order the restaurants such that all individuals\' preferences are satisfied. A swap consists of choosing any two consecutive restaurants and swapping them. If it is impossible to satisfy all preferences, output -1. -----Input----- The first line contains two integers n and m (2 le n le 1000, 0 le m le 10000) — the number of restaurants and the number of preferences respectively. Each of the next m lines contains two integers a_i and b_i (1 le a_i, b_i le n, a_i ne b_i) — indicating that a person likes restaurant a_i more than restaurant b_i. -----Output----- Print a single integer — the minimum number of swaps required, or -1 if it is impossible to satisfy all preferences. -----Examples----- Input 4 2 1 2 3 4 Output 0 Input 4 3 1 2 2 3 3 4 Output 0 Input 4 4 1 2 2 3 3 4 4 1 Output -1 -----Note----- In the first example, the initial order of restaurants 1, 2, 3, 4 already satisfies the preferences, so no swaps are needed. In the second example, the preferences also match the natural order without any swaps. In the third example, the preference (4, 1) cannot be satisfied along with the other preferences in a circle, so it is impossible to order the restaurants accordingly.","solution":"def find_min_swaps(n, m, preferences): # Create adjacency matrix to store preferences adj_matrix = [[0] * n for _ in range(n)] for a, b in preferences: adj_matrix[a-1][b-1] = 1 # Track the order of the restaurants order = list(range(n)) def is_sorted(order): for i in range(n): for j in range(n): if adj_matrix[order[i]][order[j]] == 1 and i > j: return False return True swap_count = 0 max_swaps = n * (n - 1) // 2 # Maximum possible swaps in best case changed = True while changed and not is_sorted(order): changed = False for i in range(n - 1): if adj_matrix[order[i]][order[i + 1]] == 1: order[i], order[i + 1] = order[i + 1], order[i] swap_count += 1 changed = True if swap_count > max_swaps: return -1 if is_sorted(order): return swap_count else: return -1"},{"question":"Given an integer array, find the number of pairs (i, j) such that 1 <= i < j <= N and (arr[i] + arr[j]) is divisible by a given integer K. Input: The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case consists of three lines. The first line of input contains two integers N (number of elements in the array) and K (the divisor). The second line contains N space-separated integers denoting the elements of the array. Output: For each test case, print the count of pairs in a new line. Constraints: 1 <= T <= 50 2 <= N <= 100 1 <= arr[i] <= 1000 1 <= K <= 100 Example: Input: 2 5 3 1 2 3 4 5 6 2 2 4 6 8 10 12 Output: 4 15 Note: The Input/Output format and Example given are used for the system\'s internal purpose and should be used by users for Expected Output only. As it is a function problem, a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def count_pairs_divisible_by_k(N, K, array): count = 0 for i in range(N): for j in range(i + 1, N): if (array[i] + array[j]) % K == 0: count += 1 return count def process_test_cases(test_cases): results = [] for N, K, array in test_cases: results.append(count_pairs_divisible_by_k(N, K, array)) return results"},{"question":"In a kingdom far away, there is a magical garden with a peculiar irrigation system. The garden is represented as an N x M grid filled with flowers, and there are rivers running through some of the cells. Each cell is either filled with flowers (represented by 0) or a river (represented by 1). To maintain balance in the magic of the garden, each cell with flowers must have at least one neighboring cell with a river. A cell is considered a neighbor if it is directly adjacent to the left, right, top, or bottom of the cell. The irrigation system should ensure this balance. You need to determine if it is possible to maintain such balance in the garden with the given grid configuration. If possible, output \\"YES\\", otherwise output \\"NO\\". Input First line contains two integers N and M, denoting the number of rows and columns in the garden grid. Each of the next N lines contains M integers, either 0 or 1, representing the garden grid. Output Output \\"YES\\" if the garden can be balanced, otherwise \\"NO\\". Constraints 1 ≤ N, M ≤ 1000 SAMPLE INPUT 3 3 0 1 0 1 0 1 0 1 0 SAMPLE OUTPUT YES SAMPLE INPUT 3 3 0 0 0 0 0 0 0 0 0 SAMPLE OUTPUT NO","solution":"def is_balanced_garden(grid): N = len(grid) M = len(grid[0]) for i in range(N): for j in range(M): if grid[i][j] == 0: if not ( (i > 0 and grid[i-1][j] == 1) or (i < N-1 and grid[i+1][j] == 1) or (j > 0 and grid[i][j-1] == 1) or (j < M-1 and grid[i][j+1] == 1) ): return \\"NO\\" return \\"YES\\""},{"question":"You are given two strings `s1` and `s2`. Determine if `s1` can be rearranged to form `s2`. You can assume that both strings contain only lowercase alphabets and the lengths of the strings are both between 1 and 100 inclusive. Write a function: ```python def can_rearrange(s1: str, s2: str) -> bool: pass ``` # Input - Two strings `s1` and `s2`. # Output - Return `True` if `s1` can be rearranged to form `s2`, otherwise return `False`. # Examples ```python print(can_rearrange(\\"listen\\", \\"silent\\")) # Output: True print(can_rearrange(\\"triangle\\", \\"integral\\")) # Output: True print(can_rearrange(\\"apple\\", \\"papel\\")) # Output: True print(can_rearrange(\\"hello\\", \\"billion\\")) # Output: False print(can_rearrange(\\"abc\\", \\"abcd\\")) # Output: False ``` # Note - In the first example, \\"listen\\" can be rearranged to \\"silent\\" by reordering its letters. - In the second example, \\"triangle\\" can be rearranged to \\"integral\\" by reordering its letters. - In the third example, \\"apple\\" can be rearranged to \\"papel\\". - In the fourth example, \\"hello\\" cannot be rearranged to form \\"billion\\" as they have different characters. - In the fifth example, the lengths of \\"abc\\" and \\"abcd\\" are different, making rearrangement impossible.","solution":"def can_rearrange(s1: str, s2: str) -> bool: Determines if s1 can be rearranged to form s2. if len(s1) != len(s2): return False from collections import Counter return Counter(s1) == Counter(s2)"},{"question":"A company organizes a programming competition over N days, and their scoreboard records the points earned by participants daily. Each day, some participants may earn more points, while others may earn none. You are given an array `points` where `points[i]` represents the total points earned by all participants on the i-th day. Your task is to calculate the cumulative sum of points for each day. For example, if `points = [10, 20, 30, 40]`, the cumulative sums would be `[10, 30, 60, 100]`. Write a function `cumulativePoints` which takes an array of integers `points` and returns a new array containing the cumulative sums. Example 1: Input: points = [10, 20, 30, 40] Output: [10, 30, 60, 100] Explanation: Day 1: 10 Day 2: 10 + 20 = 30 Day 3: 10 + 20 + 30 = 60 Day 4: 10 + 20 + 30 + 40 = 100 Example 2: Input: points = [5, 15, 25, 35, 45] Output: [5, 20, 45, 80, 125] Explanation: Day 1: 5 Day 2: 5 + 15 = 20 Day 3: 5 + 15 + 25 = 45 Day 4: 5 + 15 + 25 + 35 = 80 Day 5: 5 + 15 + 25 + 35 + 45 = 125 Your Task: You do not need to read input or print anything. Your task is to complete the function `cumulativePoints(points)` which takes an array of integers `points` as input and returns an array with the cumulative sums. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 1000 0 ≤ points[i] ≤ 100","solution":"def cumulativePoints(points): Returns the cumulative sums of points for each day. cumulative_sums = [] total = 0 for point in points: total += point cumulative_sums.append(total) return cumulative_sums"},{"question":"You are working for a company that specializes in data analysis. You have been given a task to preprocess customer feedback data. Each feedback is a string that can contain a mix of letters and numbers. Your job is to extract the numbers from the feedback strings, sort them in ascending order, and then concatenate them into a single string. Write a function `sorted_numbers_from_feedback(feedbacks)` that takes a list of feedback strings and returns a list of strings where each string contains the sorted numbers extracted from the corresponding feedback. # Input - A list of strings `feedbacks` (1 ≤ len(feedbacks) ≤ 10^5), where each string has a length between 1 and 1000. Each string contains only alphanumeric characters (a-z, A-Z, 0-9). # Output - A list of strings, where each string is the concatenation of sorted digits extracted from the corresponding feedback string. # Example ```python feedbacks = [\\"great3experience4\\", \\"love1it2\\", \\"no9issues8\\"] print(sorted_numbers_from_feedback(feedbacks)) ``` # Output ```python [\'34\', \'12\', \'89\'] ``` # Note - In the first feedback string, the numbers 3 and 4 are extracted and sorted to become \'34\'. - In the second feedback string, the numbers 1 and 2 are extracted and sorted to become \'12\'. - In the third feedback string, the numbers 9 and 8 are extracted and sorted to become \'89\'.","solution":"def sorted_numbers_from_feedback(feedbacks): Extracts numbers from each feedback string, sorts them, and concatenates them into a single string. Parameters: feedbacks (list): List of feedback strings. Returns: list: List of strings where each string contains the sorted numbers extracted from the corresponding feedback string. result = [] for feedback in feedbacks: numbers = sorted([char for char in feedback if char.isdigit()]) result.append(\'\'.join(numbers)) return result"},{"question":"Yuna is passionate about collecting artifacts, and she has recently discovered a large collection of mystical items. Each item has a unique identifier which is an alphanumeric string containing both digits and lowercase letters. Yuna wants to identify all unique characters in these identifiers and count their total occurrences in the collection. You are given a string consisting of concatenated item identifiers. Your task is to create a program that identifies all unique characters in the identifiers and returns the number of times each character appears in the entire collection. -----Input----- The input consists of a single line containing a string s (1 ≤ |s| ≤ 100 000) of concatenated item identifiers. The string is guaranteed to consist of digits (\'0\'-\'9\') and lowercase letters (\'a\'-\'z\') only. -----Output----- Print each unique character from the string and its count in alphabetical order of the characters. Each character and its count should be separated by a space and should be printed on a new line. -----Examples----- Input ab12ab34 Output 1 1 2 1 3 1 4 1 a 2 b 2 Input 001122abc Output 0 2 1 2 2 2 a 1 b 1 c 1 -----Note----- In the first sample case, characters \'a\' and \'b\' appear twice, while \'1\', \'2\', \'3\', and \'4\' appear once each. The output lists each character and its count in alphabetical order. In the second sample case, \'0\' appears twice, \'1\' appears twice, \'2\' appears twice, and \'a\', \'b\', \'c\' each appear once. The output is sorted alphabetically by the character.","solution":"def count_unique_characters(s): Counts the number of occurrences of each unique character in the string s. Parameters: s (str): The input string containing concatenated item identifiers. Returns: dict: A dictionary containing characters as keys and their counts as values. from collections import Counter counter = Counter(s) result = {char: counter[char] for char in sorted(counter.keys())} return result def format_output(counter): Formats the output for the character counts. Parameters: counter (dict): Dictionary with character counts. Returns: str: Formatted output string. return \'n\'.join(f\\"{char} {count}\\" for char, count in counter.items())"},{"question":"Given two strings, `text1` and `text2`, your task is to write a function `longestCommonSubsequence` that returns the length of their longest common subsequence. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively; for example, \\"ace\\" is a subsequence of \\"abcde\\", while \\"aec\\" is not. Example 1: ```python text1 = \\"abcde\\" text2 = \\"ace\\" longestCommonSubsequence(text1, text2) # 3 ``` Explanation: The longest common subsequence is \\"ace\\", which has length 3. Example 2: ```python text1 = \\"abc\\" text2 = \\"abc\\" longestCommonSubsequence(text1, text2) # 3 ``` Explanation: The longest common subsequence is \\"abc\\", which has length 3. Example 3: ```python text1 = \\"abc\\" text2 = \\"def\\" longestCommonSubsequence(text1, text2) # 0 ``` Explanation: There is no such common subsequence, so the result is 0. Function Signature: ```python def longestCommonSubsequence(text1: str, text2: str) -> int: ``` Constraints: - `1 <= text1.length, text2.length <= 1000` - `text1` and `text2` consist of only lowercase English characters.","solution":"def longestCommonSubsequence(text1, text2): Returns the length of the longest common subsequence between text1 and text2. m, n = len(text1), len(text2) # Create a 2D DP array of size (m + 1) x (n + 1) dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the DP array for i in range(1, m + 1): for j in range(1, n + 1): if text1[i - 1] == text2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You are given a sequence of n integers representing the height of trees in a forest. Each tree has a height h_i and is positioned in a line from left to right. You can perform an operation where you select a pair of adjacent trees and cut down one of them. The cost of cutting down a tree is determined by the height of the tree that is being cut down. The goal is to make all remaining trees of the same height or leave no trees at all, while minimizing the total cost of operations. Input The first line contains one integer t (1 ≤ t ≤ 10000) — the number of test cases. Each test case consists of two lines. The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of trees in the forest. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the height of each tree. Output For each test case, print the minimum cost required to make all remaining trees of the same height or leave no trees at all. Example Input 4 3 2 2 3 4 1 3 3 2 5 4 5 5 5 6 2 1 1000000000 Output 2 3 5 1 Explanation In the first test case, you can cut down the third tree, which costs 3. In the second test case, you can cut down the first tree (cost: 1) and then the last tree (cost: 2), making all remaining trees of height 3. In the third test case, you can cut down the first tree (cost: 4) and the last tree (cost: 6), leaving three trees of height 5. In the fourth test case, you can cut down the second tree, which costs 1, making all remaining tree of height 1.","solution":"def min_cost_for_equal_tree_heights(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] heights = test_cases[i][1] # Dictionary to count the frequency of each tree height height_count = {} for h in heights: if h in height_count: height_count[h] += 1 else: height_count[h] = 1 # Find the height with the maximum frequency max_freq = max(height_count.values()) # Calculate the total number of trees total_trees = len(heights) # Minimum cost to remove all trees except those with the max frequency height min_cost = total_trees - max_freq results.append(min_cost) return results"},{"question":"Fruit Pattern Your task is to generate a fruit pattern based on the given parameters. Write a function that takes two integers `rows` (count of rows) and `cols` (count of columns) and returns a pattern of fruits arranged in a grid. The fruits should alternate between an apple (\'A\') and a banana (\'B\'): - If `rows` is 3 and `cols` is 4, the output should be: ``` ABAB BABA ABAB ``` - If `rows` is 5 and `cols` is 5, the output should be: ``` ABABA BABAB ABABA BABAB ABABA ``` # Function Signature `def generate_fruit_pattern(rows: int, cols: int) -> List[str]:` # Input - `rows` (integer): Number of rows in the pattern, (1 ≤ rows ≤ 1000) - `cols` (integer): Number of columns in the pattern, (1 ≤ cols ≤ 1000) # Output - Return a list of strings where each string represents a row in the pattern. # Example ```python print(generate_fruit_pattern(3, 4)) # Output: # [\'ABAB\', \'BABA\', \'ABAB\'] print(generate_fruit_pattern(5, 5)) # Output: # [\'ABABA\', \'BABAB\', \'ABABA\', \'BABAB\', \'ABABA\'] ``` # Constraints - The function should efficiently handle cases where both `rows` and `cols` are large, up to the maximum of 1000.","solution":"from typing import List def generate_fruit_pattern(rows: int, cols: int) -> List[str]: Generate a fruit pattern grid with the given rows and columns. The pattern alternates between \'A\' (apple) and \'B\' (banana). pattern = [] for row in range(rows): row_pattern = [] for col in range(cols): if (row + col) % 2 == 0: row_pattern.append(\'A\') else: row_pattern.append(\'B\') pattern.append(\'\'.join(row_pattern)) return pattern"},{"question":"A company has a rectangular warehouse with dimensions L x W (length and width). Due to a recent storm, several sections of the roof have started leaking. The leaks are represented by an array of integers where each element indicates the position of a leak in the warehouse on a grid, with indices from 0 to (L*W - 1). The company wants to place the fewest number of buckets such that each leak is directly covered by a bucket. A bucket can be placed in any position, but each bucket can only cover leaks in the same row and adjacent columns, meaning if a bucket covers the leak at position (i, j), it can also cover leaks at (i, j-1) and (i, j+1) if they exist. Your task is to determine the minimum number of buckets required to cover all the leaks. # Input - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers L and W, the dimensions of the warehouse. - The second line contains an integer n, the number of leaks. - The third line contains `n` space-separated integers representing the positions of the leaks. # Output - For each test case, output a single integer, the minimum number of buckets required. # Constraints - 1 ≤ T ≤ 10^3 - 1 ≤ L, W ≤ 10^2 - 0 ≤ n ≤ L * W # Sample Input 2 3 3 4 0 1 4 8 2 2 2 1 2 # Sample Output 3 2 # Explanation In the first test case, the leaks are at positions (0, 0), (0, 1), (1, 1), and (2, 2). You could place one bucket at (0, 0), another at (1, 1), and another at (2, 2) to cover all the leaks. In the second test case, the leaks are at positions (0, 1) and (1, 0). Here, placing one bucket at (0, 1) and another at (1, 0) covers all the leaks.","solution":"def minimum_buckets(L, W, n, leaks): if n == 0: return 0 leaks.sort() leaks_positions = [(leak // W, leak % W) for leak in leaks] buckets = 0 prev_row, prev_col = -1, -2 # Initialize to guarantee no overlap at start for row, col in leaks_positions: if row == prev_row and (col == prev_col or col == prev_col + 1): prev_col = col else: buckets += 1 prev_row, prev_col = row, col return buckets def solve(test_cases): result = [] for case in test_cases: L = case[\'L\'] W = case[\'W\'] n = case[\'n\'] leaks = case[\'leaks\'] result.append(minimum_buckets(L, W, n, leaks)) return result"},{"question":"You are given a matrix of size N x M filled with integers. Your task is to find the maximum sum of an hourglass in the matrix. An hourglass is a subset of values with indices falling in the following pattern in the matrix: ``` a b c d e f g ``` For example, if the matrix is: ``` 1 1 1 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 2 4 4 0 0 0 0 2 0 0 0 0 1 2 4 0 ``` The hourglasses in the above matrix are the following: ``` 1 1 1 1 1 0 1 0 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 2 0 2 4 2 4 4 4 4 0 1 1 1 1 1 0 1 0 0 0 0 0 0 2 4 4 0 0 0 0 0 2 0 2 0 2 0 0 0 0 2 0 2 4 2 4 4 4 4 0 0 0 2 1 0 0 1 0 1 2 1 2 4 2 4 0 ``` Your task is to implement the function `maxHourglassSum(matrix, N, M)` which takes the 2D matrix and its dimensions N and M as its arguments and returns the maximum hourglass sum. **Example:** Input: ``` matrix = [ [1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0], [0, 0, 2, 4, 4, 0], [0, 0, 0, 2, 0, 0], [0, 0, 1, 2, 4, 0] ] N = 6 M = 6 ``` Output: ``` 19 ``` Explanation: The highest hourglass sum is: ``` 2 4 4 2 1 2 4 ``` Different hourglasses can have the same center but fall in different positions. **Constraints:** - 3 <= N, M <= 100 - -10^6 <= matrix[i][j] <= 10^6","solution":"def maxHourglassSum(matrix, N, M): max_sum = float(\'-inf\') for i in range(N - 2): for j in range(M - 2): current_sum = ( matrix[i][j] + matrix[i][j + 1] + matrix[i][j + 2] + matrix[i + 1][j + 1] + matrix[i + 2][j] + matrix[i + 2][j + 1] + matrix[i + 2][j + 2] ) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given an array of numbers, you are to write a function that finds out whether any subset of the numbers adds up to the target value. If such a subset exists, return `True`; otherwise, return `False`. The function should adhere to the following constraints: 1. The array will have at most 100 elements. 2. Each element in the array will be an integer between 1 and 1,000. 3. The target value will be an integer between 1 and 10,000. Write a function `subset_sum(arr, target)` where: - `arr` is the list of integers, - `target` is the integer target value. Your function should return a boolean value indicating whether any subset of the array adds up to the target value. # Example: ```python assert subset_sum([2, 3, 7, 8, 10], 11) == True # Subset [3, 8] assert subset_sum([1, 2, 3, 4, 5], 10) == True # Subset [1, 2, 3, 4] or [2, 3, 5] assert subset_sum([1, 2, 3, 9], 8) == False assert subset_sum([3, 34, 4, 12, 5, 2], 9) == True # Subset [4, 5] ``` # Input Format: - An array `arr` of integers. - An integer `target`. # Output Format: - Return a boolean value (`True` or `False`). # Note: - You can use dynamic programming or any other approach to solve the problem efficiently.","solution":"def subset_sum(arr, target): n = len(arr) dp = [[False for _ in range(target + 1)] for _ in range(n + 1)] # There is always a subset with sum 0, the empty subset. for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, target + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] return dp[n][target]"},{"question":"Azy and her friend Borys love to exchange gifts on special occasions. Each gift can be represented as a pair of positive integers (x, y) where x represents the type of the gift and y represents the value of that gift. Because they like to surprise each other, they want to know the smallest number of gifts (x, y) of different types that they need to select, so that the sum of the values of selected gifts is exactly equal to a given number k. You are given one integer k and a list of available gifts. Determine the minimum number of gifts needed to reach the exact sum of k or determine that it is impossible. Input The first line contains an integer k (1 ≤ k ≤ 1000) — the desired sum of the values of the selected gifts. The second line contains an integer n (1 ≤ n ≤ 1000) — the number of available gifts. The following n lines each contain 2 integers x (1 ≤ x ≤ 10^6) and y (1 ≤ y ≤ 10^6) — representing the type and value of each gift. Output Print a single integer representing the minimum number of gifts needed to achieve the exact sum k, or -1 if it is not possible. Examples Input 10 5 1 5 2 3 1 2 3 8 4 7 Output 2 Input 7 3 2 4 1 5 3 11 Output -1 Input 15 6 1 5 2 5 3 1 4 4 5 6 6 7 Output 3","solution":"def min_gifts_to_achieve_sum(k, gifts): Returns the minimum number of gifts needed to reach the exact sum of k, or -1 if it is not possible. from collections import defaultdict # Key: value sum, Value: minimum number of gifts to achieve this sum dp = defaultdict(lambda: float(\'inf\')) dp[0] = 0 # Base case: 0 sum requires 0 gifts for _, value in gifts: for s in range(k, value - 1, -1): dp[s] = min(dp[s], dp[s - value] + 1) return dp[k] if dp[k] != float(\'inf\') else -1"},{"question":"```python def is_anagram(str1, str2): Write a function `is_anagram` that takes two strings `str1` and `str2` and returns a boolean indicating whether the two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. For example: If `str1` is \\"listen\\" and `str2` is \\"silent\\", the function should return True because both strings use the same letters. If `str1` is \\"hello\\" and `str2` is \\"billion\\", the function should return False because they do not contain the same letters. # Your code here ```","solution":"def is_anagram(str1, str2): Returns True if str1 and str2 are anagrams of each other, False otherwise. return sorted(str1) == sorted(str2)"},{"question":"# Task There is a list of students who took a test, and their respective scores. You as a teacher want to find out how many students scored above average. Given an array of integers representing the scores of each student, write a function that returns the count of students who scored above average. # Input/Output - `[input]` integer array `scores` An array of integers representing the test scores of students. `1 <= scores.length <= 100` `0 <= scores[i] <= 100` (scores are integers and within the range 0 to 100) - `[output]` an integer The count of students who scored above average.","solution":"def count_above_average(scores): Returns the count of students with scores above the average score. Parameters: scores (list of int): List of student scores where each score is an integer. Returns: int: Count of students scoring above average. average_score = sum(scores) / len(scores) count = sum(1 for score in scores if score > average_score) return count"},{"question":"Write a function that, given an array of integers, counts the number of duplicates present in the array. The function should return a dictionary where the keys are the duplicate integers and the values are their respective counts of occurrences. Example: ```python Input: [1, 2, 2, 3, 4, 4, 4, 5] Output: {2: 2, 4: 3} ```","solution":"def count_duplicates(arr): Returns a dictionary with numbers as keys and their respective counts of occurrences as values for duplicates in the input array. counts = {} duplicates = {} for num in arr: if num in counts: counts[num] += 1 else: counts[num] = 1 for num, count in counts.items(): if count > 1: duplicates[num] = count return duplicates"},{"question":"In a university, the students are divided into different groups for project presentations. Each group consists of exactly three students. For each student, you know their scores in three subjects - mathematics, physics, and chemistry. You need to check if the students can be ordered such that for each student 1 ≤ i ≤ 2, the i+1-th student is strictly better than the i-th student. A student A is said to be strictly better than another student B if A scores at least as much as B in all three subjects and scores more than B in at least one subject. Determine whether such an ordering exists for each group. -----Input----- The first line contains an integer T, the number of groups. Each group consists of three lines, each containing three integers m, p, c - the scores in mathematics, physics, and chemistry of a student. -----Output----- For each group, output \\"yes\\" if such an ordering exists, otherwise output \\"no\\" (without quotes). -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ m, p, c ≤ 100 -----Example----- Input 2 50 60 70 60 70 80 70 80 90 90 80 70 80 90 60 70 60 50 Output yes no -----Explanation----- Test Case 1: We can order the students as (1, 2, 3) with scores (50, 60, 70), (60, 70, 80), and (70, 80, 90) respectively. Each subsequent student scores equal or higher in all subjects compared to the previous one, and at least one score is higher. Test Case 2: It is not possible to order the students in a strictly increasing order in all subjects.","solution":"def can_order_students(scores): Returns \\"yes\\" if the students can be ordered such that for each student 1 ≤ i ≤ 2, the i+1-th student is strictly better than the i-th student, otherwise returns \\"no\\". scores.sort() # Check if we can find an ordering for i in range(2): if not (scores[i][0] <= scores[i+1][0] and scores[i][1] <= scores[i+1][1] and scores[i][2] <= scores[i+1][2] and (scores[i][0] < scores[i+1][0] or scores[i][1] < scores[i+1][1] or scores[i][2] < scores[i+1][2])): return \\"no\\" return \\"yes\\" def check_groups(T, groups_scores): results = [] for scores in groups_scores: results.append(can_order_students(scores)) return results"},{"question":"A common problem in network communication is the translation of an IP address from its dotted-decimal notation to its binary representation. Write a program that accepts an IP address in dotted-decimal format and converts it to a 32-bit binary string. An IP address in dotted-decimal notation is represented by four decimal numbers separated by dots, where each decimal number can range from 0 to 255. In its binary form, each of these numbers is represented as an 8-bit binary string. Input The input will start with a number T (1 <= T <= 100), the number of test cases. Each of the next T lines contains an IP address in dotted-decimal format. Output For each test case, output a single line containing the 32-bit binary representation of the IP address. Each 8-bit segment should be separated by a space. Sample Input 3 192.168.1.1 10.0.0.1 255.255.255.0 Sample Output 11000000 10101000 00000001 00000001 00001010 00000000 00000000 00000001 11111111 11111111 11111111 00000000","solution":"def ip_to_binary(ip): Convert an IP address in dotted-decimal format to 32-bit binary representation. Each 8-bit segment should be separated by a space. return \' \'.join(format(int(octet), \'08b\') for octet in ip.split(\'.\')) def convert_ips_to_binary(T, ip_list): Convert multiple IP addresses to their binary representations. Parameters: T (int): Number of IP addresses. ip_list (list of str): List containing IP addresses in dotted-decimal format. Returns: list of str: Binary representations (with separated 8-bit segments) of the IP addresses. result = [] for ip in ip_list: result.append(ip_to_binary(ip)) return result"},{"question":"Task You need to implement a function `fibonacci_series` that generates the first `n` numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: - The first two numbers in the sequence are 0 and 1. - Each subsequent number is the sum of the previous two. # Input - A single integer `n` (1 <= n <= 50), representing the number of terms to generate. # Output - A list of the first `n` numbers in the Fibonacci sequence. # Examples - `fibonacci_series(1)` should return `[0]` - `fibonacci_series(2)` should return `[0, 1]` - `fibonacci_series(5)` should return `[0, 1, 1, 2, 3]` - `fibonacci_series(10)` should return `[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]`","solution":"def fibonacci_series(n): Generates the first `n` numbers in the Fibonacci sequence. Args: n (int): The number of terms to generate. Returns: List[int]: A list containing the first `n` Fibonacci numbers. if n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence"},{"question":"Sarah is fascinated by palindromes, and she wants to generate them programmatically. A palindrome is a word or sentence that reads the same backward as forward (ignoring spaces, punctuation, and capitalization). Now, she wants to extend this concept to numbers. Given an integer n, Sarah\'s goal is to find the smallest palindrome that is larger than n. A number is considered a palindrome if it reads the same backward as forward. For example, 121 and 1221 are palindromes, but 123 and 122 are not. Help Sarah by writing a function that takes an integer n and returns the smallest palindrome larger than n. Input - The input consists of a single integer n (0 ≤ n < 10^8). Output - Output the smallest palindrome larger than n. Examples ``` Input 123 Output 131 ``` ``` Input 99 Output 101 ``` ``` Input 808 Output 818 ``` # Constraints - The input integer n will always be in the range 0 to 99,999,999 inclusive. # Note Your solution should efficiently handle the cases near the upper limit, and the function should minimize runtime for very large values of n. Consider edge cases like n being a single-digit number or n itself being a palindrome.","solution":"def next_palindrome(n): Returns the smallest palindrome larger than n. n += 1 while True: if str(n) == str(n)[::-1]: return n n += 1"},{"question":"Create a Python function `order_weight` that takes a string of numbers (each representing the weight of an item) and returns a new string where the numbers are sorted according to the following rules: 1. **Sum of Digits**: The primary criterion for sorting is the sum of the digits of each number. - For example, for the number `56`, the sum of digits is `5 + 6 = 11`. 2. **String Comparison**: If two numbers have the same sum of digits, they should be compared and sorted as strings in lexicographical (dictionary) order. - For example, `100` and `180` both have a digit sum of `1 + 0 + 0 = 1` and `1 + 8 + 0 = 9` respectively. Since the sum is different, `100` should be placed before `180`. - If there are two items with the same digit sum and one of them is `56` and the other is `65` (both have a digit sum of `11`), they should be ordered as `56` and `65` because `\'56\'` comes before `\'65\'` in lexicographical order. Function signature: `def order_weight(strng: str) -> str` # Example: ```python print(order_weight(\\"56 65 74 100 99 180 90\\")) # returns \\"100 180 90 56 65 74 99\\" print(order_weight(\\"2000 10003 1234000 44444444 9999 11 11 22 123\\")) # returns \\"11 11 2000 10003 22 123 1234000 44444444 9999\\" ``` # Constraints: - Each number in the input string will be a valid positive integer. - The input string will contain at least one number. - The numbers in the input string are separated by a single space. - The function should handle leading zeros in the numbers correctly, i.e., treat `00123` as `123`.","solution":"def order_weight(strng: str) -> str: def sum_digits(number: str) -> int: return sum(int(digit) for digit in number) weights = strng.split() # Sort by the sum of digits and then lexicographically sorted_weights = sorted(weights, key=lambda x: (sum_digits(x), x)) return \' \'.join(sorted_weights)"},{"question":"Tuples are ordered lists of elements in Python. They are similar to lists, but unlike lists, tuples are immutable, which means they cannot be changed after they are created. Given an initial list of tuples, your task is to process a series of commands to modify the elements based on specific requirements. # Problem Statement You are given an initial list of `n` tuples, where each tuple contains exactly `m` integers. You will be provided with a series of commands to modify this list. Each command is either of the form `UPDATE t p v` which modifies the `p`-th element of the `t`-th tuple to a new value `v`, or `QUERY t` which asks you to return the current state of the `t`-th tuple. # Input - The first line contains two integers, `n` (1 ≤ n ≤ 100) and `m` (1 ≤ m ≤ 100), representing the number of tuples and the number of elements in each tuple respectively. - The next `n` lines each contain `m` integers separated by spaces, representing the initial list of tuples. - The next line contains a single integer `q` (1 ≤ q ≤ 1000), representing the number of commands. - The next `q` lines each contain a command in one of the following forms: - `UPDATE t p v` (1 ≤ t ≤ n, 1 ≤ p ≤ m), updates the `p`-th element of the `t`-th tuple to `v`. - `QUERY t` (1 ≤ t ≤ n), which asks to return the `t`-th tuple. # Output For each `QUERY` command, output the current state of the `t`-th tuple as a line of `m` space-separated integers. # Example Input ``` 3 4 1 2 3 4 5 6 7 8 9 10 11 12 5 QUERY 1 UPDATE 1 2 20 QUERY 1 UPDATE 3 4 40 QUERY 3 ``` Output ``` 1 2 3 4 1 20 3 4 9 10 11 40 ``` # Note In the example above: - The initial list of tuples is: ``` 1 2 3 4 5 6 7 8 9 10 11 12 ``` - The first `QUERY` command asks for the state of the 1st tuple, outputting `1 2 3 4`. - The `UPDATE 1 2 20` command updates the 1st tuple such that its 2nd element becomes 20. The updated list becomes: ``` 1 20 3 4 5 6 7 8 9 10 11 12 ``` - The second `QUERY` command outputs the updated state of the 1st tuple, `1 20 3 4`. - The `UPDATE 3 4 40` command updates the 4th element of the 3rd tuple to 40. The list becomes: ``` 1 20 3 4 5 6 7 8 9 10 11 40 ``` - The third `QUERY` command outputs the updated state of the 3rd tuple, `9 10 11 40`.","solution":"def process_commands(n, m, tuples_list, q, commands): # Convert tuple list from list of tuples to list of lists for mutability mutable_tuples = [list(tup) for tup in tuples_list] results = [] for command in commands: parts = command.split() if parts[0] == \'UPDATE\': t = int(parts[1]) - 1 # decrement to adjust for 0-based indexing p = int(parts[2]) - 1 # decrement to adjust for 0-based indexing v = int(parts[3]) mutable_tuples[t][p] = v elif parts[0] == \'QUERY\': t = int(parts[1]) - 1 # decrement to adjust for 0-based indexing results.append(\' \'.join(map(str, mutable_tuples[t]))) return results"},{"question":"Given a string S. The task is to check if it contains any anagram of a pattern P by completing the functions findAnagrams() and checkInclusion(). The function checkInclusion() should return `true` if the pattern\'s anagram is found as a substring within the given string, and `false` otherwise. The function findAnagrams() should return all starting indices of the pattern\'s anagrams in the string. Example 1: Input: S = \\"cbaebabacd\\" P = \\"abc\\" Output: Start indices: [0, 6] Check Inclusion: true Explanation: The substring at index 0-2 is \\"cba\\", which is an anagram of \\"abc\\". The substring at index 6-8 is \\"bac\\", which is an anagram of \\"abc\\". Example 2: Input: S = \\"af\\" P = \\"be\\" Output: Start indices: [] Check Inclusion: false Explanation: There are no substrings in \\"af\\" that are anagrams of \\"be\\". Your Task: You don\'t have to read input or print anything. Your task is to complete the functions findAnagrams() and checkInclusion() where findAnagrams() takes the strings S and P as input and returns a list of starting indices of P\'s anagrams in S, and checkInclusion() takes the strings S and P as input and returns a boolean indicating whether any anagram of P is a substring of S. Expected Time Complexity: O(|S| + |P|). Expected Auxiliary Space: O(1) for checkInclusion(), O(|S|) for findAnagrams(). Constraints: 1 ≤ |S|, |P| ≤ 10^5 S and P consist of lowercase English letters only.","solution":"def findAnagrams(s: str, p: str): from collections import Counter len_s, len_p = len(s), len(p) if len_p > len_s: return [] p_count = Counter(p) s_count = Counter() result = [] for i in range(len_s): s_count[s[i]] += 1 if i >= len_p: if s_count[s[i - len_p]] == 1: del s_count[s[i - len_p]] else: s_count[s[i - len_p]] -= 1 if p_count == s_count: result.append(i - len_p + 1) return result def checkInclusion(s: str, p: str): return len(findAnagrams(s, p)) > 0"},{"question":"A binary search tree (BST) is a data structure that maintains sorted order among its elements, which allows for fast look-ups, addition, and removal of entries. In a BST, each node has at most two children referred to as the left and right child. For any node with value `V`, all values in the left subtree must be less than `V` and all values in the right subtree must be greater than `V`. Write a function `is_balanced_bst(root)` that takes the root node of a binary search tree and returns `True` if the tree is balanced, otherwise returns `False`. A balanced tree is defined as one where the depth of all leaf nodes (nodes with no children) differ by no more than 1. The tree is represented by a class `TreeNode`: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` For example, given the following BST: 5 / 2 8 / 1 3 9 The function should return `True`, as the tree is balanced. However, for the following tree: 1 2 3 The function should return `False`, since it\'s essentially a linked list and not balanced. Here is a template for the problem\'s solution structure: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_balanced_bst(root: TreeNode) -> bool: # Implement this function pass ``` Complete the function to determine if a given BST is balanced.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_balanced_bst(root: TreeNode) -> bool: def check_balance(node): if not node: return 0, True left_height, left_balanced = check_balance(node.left) right_height, right_balanced = check_balance(node.right) current_height = 1 + max(left_height, right_height) current_balance = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return current_height, current_balance _, is_balanced = check_balance(root) return is_balanced"},{"question":"Given an array of integers and a target sum S, write a function to find the total number of distinct subsets of the given array that add up to the target sum S. Subsets containing the same elements in different orders should be considered the same. Note: 1. All numbers will be positive integers. 2. Elements in a subset must appear in non-descending order. Example 1: Input: N = 4 arr[] = {2, 3, 5, 7} S = 10 Output: 3 Explanation: The distinct subsets are: (3, 7) (2, 3, 5) (5, 5) Example 2: Input: N = 5 arr[] = {1, 2, 3, 4, 5} S = 10 Output: 3 Explanation: The distinct subsets are: (1, 2, 3, 4) (1, 4, 5) (2, 3, 5) Your Task: Complete the function countSubsets() which takes the array A, and a target sum S as inputs and returns an integer representing the number of distinct subsets that sum up to S. Expected Time Complexity: O(2^N) Expected Auxiliary Space: O(2^N) Constraints: 1 <= N <= 20 1 <= arr[i] <= 50 1 <= S <= 100","solution":"from itertools import combinations def countSubsets(arr, S): Returns the number of distinct subsets that sum up to S. subsets = set() n = len(arr) # Generate all subsets using combinations and check their sums for r in range(1, n+1): for combo in combinations(arr, r): if sum(combo) == S: subsets.add(tuple(sorted(combo))) return len(subsets)"},{"question":"A small e-commerce platform manages user reviews for its products. Each review is represented by a string, and a review is positive if it contains the word \\"good\\" and negative if it contains the word \\"bad\\". To help users quickly identify the most positively-reviewed products, the platform wants to develop a system to rank products based on the number of positive reviews they have received. If two products have the same number of positive reviews, they should be ranked based on the number of negative reviews (fewer negative reviews ranks higher). If there is still a tie, the products should be ranked alphabetically by their name. Write a program that accepts a list of product names and corresponding reviews, then outputs the product names in the correct ranking order. # Constraints - 1 ≤ Number of products ≤ 100 - 1 ≤ Number of reviews per product ≤ 100 - Each product name is a string of length 1 to 100 - Each review is a string of length 1 to 500 - Reviews contain only lowercase alphabetic characters and spaces. # Input Input is given from Standard Input in the following format: ``` N product_1 review_count_1 review_1_1 review_1_2 ... review_1_m product_2 review_count_2 review_2_1 review_2_2 ... review_2_m : product_N review_count_N review_N_1 review_N_2 ... review_N_m ``` - N: the number of products. - For each product: - `product_i`: the product name. - `review_count_i`: the number of reviews for the product. - `review_i_1`, `review_i_2`, ..., `review_i_m`: the reviews for the product. # Output Output the sorted product names, each on a new line. # Sample Input ``` 3 apple 2 this apple is good good quality apple banana 3 bad banana good banana bad quality cherry 1 the cherry is good ``` # Sample Output ``` apple cherry banana ``` # Explanation - `apple` has 2 positive reviews and 0 negative reviews. - `cherry` has 1 positive review and 0 negative reviews. - `banana` has 1 positive review and 2 negative reviews. - Despite `cherry` and `banana` having the same number of positive reviews, `cherry` is ranked higher due to fewer negative reviews.","solution":"def rank_products(n, product_reviews): product_scores = [] for i in range(n): product_name = product_reviews.pop(0) review_count = int(product_reviews.pop(0)) positive_count = 0 negative_count = 0 for _ in range(review_count): review = product_reviews.pop(0) if \\"good\\" in review: positive_count += 1 if \\"bad\\" in review: negative_count += 1 product_scores.append((product_name, positive_count, negative_count)) # Sort based on the criteria: # 1. Higher number of positive reviews # 2. Lower number of negative reviews # 3. Alphabetically by product name product_scores.sort(key=lambda x: (-x[1], x[2], x[0])) return [product[0] for product in product_scores] def main(): import sys input = sys.stdin.read data = input().split(\'n\') n = int(data.pop(0)) product_reviews = data[:-1] sorted_products = rank_products(n, product_reviews) for product in sorted_products: print(product) if __name__ == \\"__main__\\": main()"},{"question":"A company maintains an internal database with information about its employees. Each employee has a unique ID and is associated with a specific department. The HR department needs to identify all employees who are the only ones in their department. Write a function `find_unique_employees` that takes a list of employees as input and returns a list of IDs of employees who are the only ones in their department. Each employee is represented as a dictionary with two keys: `\\"id\\"` and `\\"department\\"`. # Input: - A list of dictionaries, where each dictionary represents an employee with keys `\\"id\\"` (a unique integer identifier) and `\\"department\\"` (a string representing the department name). # Output: - A list of integers representing the IDs of employees who are the sole members of their department. # Examples: Example 1: Input: ``` [ {\\"id\\": 1, \\"department\\": \\"HR\\"}, {\\"id\\": 2, \\"department\\": \\"Engineering\\"}, {\\"id\\": 3, \\"department\\": \\"HR\\"}, {\\"id\\": 4, \\"department\\": \\"Marketing\\"}, {\\"id\\": 5, \\"department\\": \\"Engineering\\"}, {\\"id\\": 6, \\"department\\": \\"Sales\\"} ] ``` Output: ``` [4, 6] ``` Example 2: Input: ``` [ {\\"id\\": 1, \\"department\\": \\"IT\\"}, {\\"id\\": 2, \\"department\\": \\"IT\\"}, {\\"id\\": 3, \\"department\\": \\"HR\\"} ] ``` Output: ``` [3] ``` Example 3: Input: ``` [ {\\"id\\": 1, \\"department\\": \\"Finance\\"} ] ``` Output: ``` [1] ``` # Constraints: - The input list will contain at most 10^5 employees.","solution":"def find_unique_employees(employees): Returns a list of employee IDs who are the only ones in their department. dept_count = {} for employee in employees: department = employee[\'department\'] if department in dept_count: dept_count[department].append(employee[\'id\']) else: dept_count[department] = [employee[\'id\']] unique_employees = [] for ids in dept_count.values(): if len(ids) == 1: unique_employees.append(ids[0]) return unique_employees"},{"question":"Frank, a robot, has to place n boxes onto m shelves in a warehouse, following certain instructions. Each box is uniquely labeled with a positive integer. Frank receives instructions in the form of a list, where each instruction specifies a position on the shelves and whether to place or remove a box. Shelves are contiguous, and each shelf can hold only one box at any given position. Frank executes the following actions: - \\"P x y\\" — where `x` is the shelf number (1 to m) and `y` is the box label to be placed at the position. - \\"R x\\" — where `x` is the shelf number from which the box needs to be removed. If Frank tries to place a box on an already occupied position, he should ignore the instruction. If he tries to remove a box from an empty position or a shelf that does not exist, he should also ignore the instruction. Your task is to simulate Frank\'s actions and provide the final state of the shelves. Input: - The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000) — the number of instructions and the number of shelves, respectively. - The next n lines contain instructions of the format \\"P x y\\" or \\"R x\\". Output: - Print m lines, each containing the state of the corresponding shelf after all instructions. If a shelf is empty, print 0. Otherwise, print the label of the box on that shelf. Example: Input: 7 3 P 1 5 P 2 3 P 3 6 P 1 4 R 2 P 2 7 R 3 Output: 5 7 0","solution":"def simulate_shelves(n, m, instructions): Simulates the placement and removal of boxes on shelves based on the given instructions. Args: n (int): The number of instructions. m (int): The number of shelves. instructions (list): List of instructions to be executed. Returns: list: Final state of the shelves. shelves = [0] * m for instruction in instructions: parts = instruction.split() action = parts[0] shelf = int(parts[1]) - 1 # Converting 1-based index to 0-based index if action == \\"P\\": box = int(parts[2]) if 0 <= shelf < m and shelves[shelf] == 0: shelves[shelf] = box elif action == \\"R\\": if 0 <= shelf < m: shelves[shelf] = 0 return shelves # Example usage: # n = 7 # m = 3 # instructions = [\\"P 1 5\\", \\"P 2 3\\", \\"P 3 6\\", \\"P 1 4\\", \\"R 2\\", \\"P 2 7\\", \\"R 3\\"] # print(simulate_shelves(n, m, instructions))"},{"question":"A city is represented as a grid of size m x n where each cell represents a building, and each building has either skyscrapers or short buildings. The height of each building in the grid is provided, and height is measured in terms of floors. For a given grid of buildings, you are to determine the highest possible number of consecutive shorter buildings you can walk through in a single straight line, either in a horizontal, vertical, or diagonal direction. Input: A 2D list of integers where each integer represents the height of a building in the grid. Example 1: Input: [ [5, 1, 2, 3], [4, 6, 1, 1], [3, 1, 7, 1], [2, 1, 1, 8] ] Output: 3 Explanation: The longest path of consecutive shorter buildings is the diagonal path (3,1) with heights [1, 1, 1]. Example 2: Input: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: 0 Explanation: There are no consecutive shorter buildings in any straight line. Feel free to assume that the grid will always have a size of at least 2x2 and at most 100x100.","solution":"def longest_shorter_consecutive_path(grid): Returns the longest number of consecutive shorter buildings in a straight line (horizontal, vertical, or diagonal) in the city grid. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) max_len = 0 def check_line(i, j, di, dj): count = 1 height = grid[i][j] while 0 <= i+di < m and 0 <= j+dj < n and grid[i+di][j+dj] < height: count += 1 height = grid[i+di][j+dj] i += di j += dj return count for i in range(m): for j in range(n): max_len = max(max_len, check_line(i, j, 0, 1)) max_len = max(max_len, check_line(i, j, 1, 0)) max_len = max(max_len, check_line(i, j, 1, 1)) max_len = max(max_len, check_line(i, j, 1, -1)) return max_len - 1 if max_len > 1 else 0"},{"question":"Create a function named `flatten_dict` that takes a nested dictionary and returns a new dictionary with no nested structures. The keys in the new dictionary will be the keys from the original dictionary, combined together using periods (`.`) to represent their hierarchical structure. # Example: For the input dictionary: ```python { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3 } }, \\"f\\": { \\"g\\": 4 } } ``` The output should be: ```python { \\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3, \\"f.g\\": 4 } ``` # Requirements: - The function should be named `flatten_dict`. - The function should handle dictionaries with arbitrary levels of nesting. - The function should return a new dictionary. - Non-dictionary values (like lists or other types) should be included directly without further flattening.","solution":"def flatten_dict(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. Parameters: d (dict): The dictionary to flatten. parent_key (str): The base key string for recursion. Default is \'\'. sep (str): The separator to use for combining keys. Default is \'.\'. Returns: dict: A flattened dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Tom loves taking photos with his digital camera during his journeys. However, after his trips, he always ends up with thousands of photos and finds it hard to manage them. To help him, you need to create a program that automatically groups and counts the photos based on their creation date. Tom\'s camera labels each photo with the timestamp of the format \\"YYYY-MM-DD hh:mm:ss\\". Your task is to group the photos by the date (YYYY-MM-DD) part of the timestamp and count how many photos were taken on each unique date. Input The first line contains an integer n (1 ≤ n ≤ 105), the number of photos. The next n lines contain timestamps in the format \\"YYYY-MM-DD hh:mm:ss\\". Output For each unique date, output the date followed by the count of photos taken on that date. The dates should be printed in chronological order. Examples Input 5 2023-09-21 09:12:33 2023-09-21 10:45:22 2023-09-22 14:22:08 2023-09-23 11:55:19 2023-09-21 23:59:59 Output 2023-09-21 3 2023-09-22 1 2023-09-23 1 Input 7 2022-01-01 00:00:01 2022-01-01 12:34:56 2022-01-01 23:45:23 2022-12-31 18:22:50 2023-01-01 00:15:15 2023-01-01 03:45:19 2023-01-02 12:23:45 Output 2022-01-01 3 2022-12-31 1 2023-01-01 2 2023-01-02 1","solution":"def count_photos_by_date(n, timestamps): Groups and counts photos by their creation date. Args: n (int): Number of photos. timestamps (list of str): List of timestamps in \\"YYYY-MM-DD hh:mm:ss\\" format. Returns: list of tuple: Each tuple contains a date (str) and count (int) of photos taken on that date, in chronological order. from collections import defaultdict photo_counts = defaultdict(int) for timestamp in timestamps: date = timestamp.split()[0] photo_counts[date] += 1 sorted_dates = sorted(photo_counts.items()) return sorted_dates"},{"question":"Given a sequence of n non-negative integers a_1, a_2, ..., a_n, find the length of the shortest subsequence such that the sum of its elements is an odd number. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^6) — the size of the original sequence. The second line contains n non-negative integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9). -----Output----- In the single line print the length of the shortest subsequence with an odd sum. If no such subsequence exists, print -1. -----Examples----- Input 4 2 4 6 8 Output -1 Input 5 1 2 3 4 5 Output 1 Input 3 2 3 6 Output 1 -----Note----- In the first sample test, all numbers are even so it\'s impossible to form a subsequence with an odd sum. In the second sample test, you can take any single odd number (1, 3, or 5) to achieve an odd sum. In the third sample test, choosing the number 3 results in an odd sum immediately.","solution":"def shortest_odd_sum_subsequence_length(n, sequence): # Check if there is any odd number in the sequence for num in sequence: if num % 2 != 0: return 1 # If no odd number is found, return -1 return -1"},{"question":"Given an array of positive integers, you are allowed to perform the following operation any number of times: select any subsequence of the array of length exactly k, where all elements of the subsequence have to be equal. Remove these elements from the array. Your task is to find the maximum possible number of elements that can be removed by performing the above operation. Constraints * 1 leq N leq 100000 * 1 leq k leq N * 1 leq A_i leq 1000 Input The input is given in the following format: N k A_1 A_2 A_3 dots A_N (N is the size of the array, k is the length of the subsequence, and A represents the array elements.) Output Print the maximum possible number of elements that can be removed in a line. Examples Input 5 2 1 2 2 3 3 Output 4 Input 8 3 1 1 1 1 1 2 2 2 Output 6 Input 9 2 3 3 3 3 3 5 5 5 5 Output 8","solution":"from collections import Counter def max_elements_removed(n, k, arr): This function calculates the maximum number of elements that can be removed by repeatedly selecting subsequences of length exactly k, where all elements of the subsequence are equal. Parameters: n (int): The size of the array k (int): The length of the subsequence to be removed arr (list of int): The array of positive integers Returns: int: The maximum possible number of elements that can be removed freq = Counter(arr) max_removed = 0 for count in freq.values(): max_removed += (count // k) * k return max_removed"},{"question":"You are given a string `s` of length `n`, which consists of lowercase English letters. You are also given an integer `k`. Your task is to rearrange the string `s` such that the number of distinct characters in any substring of length `k` is minimized. In other words, you need to distribute the characters in the string in a way that each substring of length `k` has as few different characters as possible. If there are multiple valid rearrangements, return any of them. Input The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 100). The second line contains the string `s` of length `n`. Output Output the rearranged string that minimizes the number of distinct characters in any substring of length `k`. Examples Input 6 3 aabbcc Output abcabc Note In the given example, the string `abcabc` has distinct characters `{a, b, c}` in each substring of length `3`. The goal is to group the characters as evenly as possible so that each substring of the given length has the minimum possible number of distinct characters.","solution":"from collections import Counter def rearrange_string(n, k, s): Rearrange the string such that the number of distinct characters in any substring of length k is minimized. # Count the frequency of each character in the string char_count = Counter(s) # Create the rearranged result result = [] # Create a list of characters sorted by frequency (most frequent first) sorted_chars = sorted(char_count.keys(), key=lambda x: -char_count[x]) # Initialize buckets for each k segment buckets = [[] for _ in range(k)] # Distribute characters to buckets as evenly as possible idx = 0 for char in sorted_chars: count = char_count[char] while count > 0: buckets[idx % k].append(char) idx += 1 count -= 1 for bucket in buckets: result.extend(bucket) return \'\'.join(result)"},{"question":"Marta is working on a sophisticated calendar application, and she needs to implement a function to find the day of the week given a specific date. The program should follow the Gregorian calendar. Days of the week are represented as integers from 0 (Monday) to 6 (Sunday). She has devised a plan: use the famous Zeller\'s Congruence algorithm to achieve this calculation. -----Input----- The input consists of three integers in the following order: day, month, year. The day (1 le day le 31), the month (1 le month le 12), and the year (1583 le year le 9999). -----Output----- Output the integer corresponding to the day of the week. 0 for Monday, 1 for Tuesday, and so on until 6 for Sunday. -----Examples----- Sample Input 1: 24 10 2023 Sample Output 1: 1 Sample Input 2: 1 1 2000 Sample Output 2: 5","solution":"def find_day_of_week(day, month, year): Returns the day of the week for a given date using Zeller\'s Congruence algorithm. Days of the week are represented as integers: 0 (Monday) to 6 (Sunday). if month < 3: month += 12 year -= 1 K = year % 100 J = year // 100 f = day + ((13 * (month + 1)) // 5) + K + (K // 4) + (J // 4) - (2 * J) day_of_week = ((f + 5) % 7) return day_of_week"},{"question":"You will receive 5 points for solving this problem. Jerry has a staircase with several steps, and each step has a height assigned to it. He wants to climb from the bottom to the top but needs to decide the best way to do it. Jerry can jump from one step to any higher step that is directly above him (i.e., at the same horizontal position). Additionally, Jerry can only jump straight up due to the staircase\'s narrow structure, and he can remain on one step before jumping again as he sees fit. Jerry wonders what is the minimum total height he needs to climb from the bottom to the top if he chooses the best combination of steps to minimize the total height climbed. -----Input----- The input will consist of one line containing a single integer n (2 ≤ n ≤ 1000), representing the number of steps, followed by a sequence of n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) representing the height of each step from the bottom to the top. -----Output----- Print a single integer — the minimum total height Jerry needs to climb to reach the top from the bottom. -----Examples----- Input 5 1 3 6 2 8 Output 7 Input 4 4 4 4 4 Output 4 Input 6 1 2 3 7 8 10 Output 9 -----Note----- Consider the first example. Jerry can start at the first step with height 1 and jump directly to the third step with a height of 6, then from the third step straight to the top with a height of 8. The total height climbed is 1 (to step 3) + 1 (to step 5) + 6 = 7. In the second example, all steps have the same height, so Jerry can directly go from the first step to the last step. Hence, the minimum total height to climb is just 4. In the third example, Jerry chooses to climb 3 steps to step 3, reaching height 3, then he can jump to step 5 at height 7, and finally jump to the top at height 10 for an additional height of 3, summing to 9.","solution":"def min_total_height(n, heights): Calculate the minimum total height Jerry needs to climb to reach the top. Args: n (int): number of steps heights (list): list of heights of the steps Returns: int: minimum total height Jerry needs to climb return heights[-1] - heights[0] # Example usage would be done here to demonstrate, but not including it as per instructions # Example: min_total_height(5, [1, 3, 6, 2, 8]) # Output should be: 7"},{"question":"You are tasked to design a simple inventory management system for a store. Your function will determine the number of products that need restocking. A product is considered to need restocking if its quantity falls below a certain threshold. Given a list of products with their respective quantities and a restocking threshold, return the number of products that need restocking. Each product and its quantity are presented as a key-value pair where the key is a string representing the product name and the value is an integer representing the quantity of that product. Input: The first line of input contains an integer T denoting the number of test cases. Each test case consists of: - An integer N denoting the number of products. - A list of N strings and integers representing the product names and their respective quantities. - An integer M representing the restocking threshold. Output: For each test case, print the number of products that need restocking on a new line. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ quantity ≤ 1000 1 ≤ M ≤ 1000 Product names contain only uppercase letters \'A\'-\'Z\' and have lengths between 1 and 100, inclusive. SAMPLE INPUT 2 3 APPLE 50 BANANA 30 PEAR 75 40 4 MILK 10 BREAD 20 EGGS 15 CHEESE 25 20 SAMPLE OUTPUT 1 3 Explanation Test Case #1: - APPLE has quantity 50, which is above the threshold of 40, so it does not need restocking. - BANANA has quantity 30, which is below the threshold of 40, so it needs restocking. - PEAR has quantity 75, which is above the threshold of 40, so it does not need restocking. Thus, only 1 product needs restocking. Test Case #2: - MILK has quantity 10, which is below the threshold of 20, so it needs restocking. - BREAD has quantity 20, which is equal to the threshold, so it does not need restocking. - EGGS has quantity 15, which is below the threshold of 20, so it needs restocking. - CHEESE has quantity 25, which is above the threshold of 20, so it does not need restocking. Thus, 3 products need restocking.","solution":"def restock_needed(test_cases): results = [] for case in test_cases: N = case[\'N\'] products = case[\'products\'] threshold = case[\'threshold\'] restock_count = sum(1 for product, qty in products.items() if qty < threshold) results.append(restock_count) return results"},{"question":"Write a function that takes a string as an input and returns a new string where each character in the original string is duplicated `n` number of times, where `n` is provided as an input parameter to the function. Function Signature: `def duplicate_characters(input_string: str, n: int) -> str:` **Input:** - `input_string` (1 ≤ |input_string| ≤ 100): A string containing only lowercase alphabets. - `n` (1 ≤ n ≤ 10): The number of times each character should be duplicated. **Output:** - A string where each character of the `input_string` is repeated `n` times. **Example:** Sample Input: ``` \\"hello\\", 3 ``` Sample Output: ``` \\"hhheeelllllooo\\" ``` Sample Input: ``` \\"abc\\", 2 ``` Sample Output: ``` \\"aabbcc\\" ```","solution":"def duplicate_characters(input_string: str, n: int) -> str: Duplicates each character in the input string n times. Args: input_string (str): A string containing only lowercase alphabets. n (int): The number of times each character should be duplicated. Returns: str: A string where each character of the input_string is repeated n times. output_string = \'\'.join([char * n for char in input_string]) return output_string"},{"question":"Freddy\'s friend Bob has a peculiar way of texting. Bob always formats his texts such that every odd word is in uppercase, and every even word is in lowercase. Words are considered as sequences of characters separated by spaces. Maintain the original punctuation and spaces between words in the transformed text. Given a string of text, write a function that transforms it according to Bob\'s texting style and returns the resulting string. # Examples ``` \\"Hello world! This is a test.\\" -> \\"HELLO world! THIS is A test.\\" \\"How are you doing today, Bob?\\" -> \\"HOW are YOU doing TODAY, bob?\\" \\"Transform This Text Accordingly.\\" -> \\"TRANSFORM this TEXT accordingly.\\" ``` Maintain the capitalization rules as described, and ensure that punctuation and spaces are preserved in their original positions. # Technical Constraints - The input will be a single string. - The output must be the transformed string. # Additional Notes - If the input string is empty, return an empty string. - Be mindful of multiple spaces between words, which should be preserved in the output. Good luck!","solution":"def transform_text_bob_style(text): Transforms the text according to Bob\'s texting style where every odd word is in uppercase, and every even word is in lowercase. words = text.split(\' \') for i in range(len(words)): if i % 2 == 0: # Odd words (0-based index makes odd words at even indices) words[i] = words[i].upper() else: # Even words words[i] = words[i].lower() return \' \'.join(words)"},{"question":"A software company wants to analyze the list of tasks planned for a project. Each task is assigned a priority (an integer value, where a lower number indicates a higher priority). Tasks can have the same priority. The goal is to create a list of tasks sorted first by priority, and then alphabetically by task name if they have the same priority (case-insensitive for alphabetical sorting). Input:- First line contains no. of test cases. For each test case, first line contains n (the number of tasks). The next n lines contain a task name followed by its priority, separated by a space. Output:- Print the sorted list of tasks for each test case, with each task on a new line. SAMPLE INPUT 2 4 DesignDB 2 CreateAPI 1 launchApp 3 designUI 2 3 TestApp 1 deploy 2 FixBugs 1 SAMPLE OUTPUT CreateAPI 1 DesignDB 2 designUI 2 launchApp 3 FixBugs 1 TestApp 1 deploy 2","solution":"def sort_tasks(test_cases): results = [] for case in test_cases: tasks = case[1] sorted_tasks = sorted(tasks, key=lambda x: (x[1], x[0].lower())) results.append(sorted_tasks) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') idx = 0 test_cases = [] num_cases = int(lines[idx]) idx += 1 for _ in range(num_cases): n = int(lines[idx]) idx += 1 tasks = [] for _ in range(n): task_info = lines[idx].rsplit(\' \', 1) task_name = task_info[0] priority = int(task_info[1]) tasks.append((task_name, priority)) idx += 1 test_cases.append((n, tasks)) return test_cases def format_output(sorted_tasks): output = [] for tasks in sorted_tasks: for task in tasks: output.append(f\\"{task[0]} {task[1]}\\") return \'n\'.join(output) # Reading input def main(input_str): test_cases = parse_input(input_str) sorted_tasks = sort_tasks(test_cases) return format_output(sorted_tasks)"},{"question":"Fiona is organizing a treasure hunt on a square island that is divided into an n × n grid of cells. Rows are numbered from top to bottom with integers from 1 to n, and columns are numbered from left to right with integers from 1 to n. Each cell is identified by its coordinates (r, c). Fiona has hidden exactly one treasure chest in one of the cells and has marked that cell as `T`. Participants will explore the island by making queries. A query consists of providing coordinates of a rectangular area within the grid, and Fiona responds with either: - `\\"Yes\\"` if the treasure is located within the queried area. - `\\"No\\"` if the treasure is not within the queried area. Participants need to determine the exact coordinates of the treasure chest by making the fewest possible queries. Input The first line of the input contains an integer n (2 ≤ n ≤ 100) — the size of the grid. Interaction To make a query, print a line in the format \\"? x1 y1 x2 y2\\" (without quotes) (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ n), where (x1, y1) stands for the position of the top-left cell of the queried rectangle and (x2, y2) stands for the position of the bottom-right cell of the queried rectangle. After each query, you should perform a \\"flush\\" operation and read the response, either `\\"Yes\\"` or `\\"No\\"`. Once you determine the position of the treasure chest, print \\"! r c\\" (without quotes), where r and c are the row and column numbers of the treasure chest\'s location. After you print the answer, perform a \\"flush\\" operation. Your program should terminate immediately after printing the answer. Constraints - You are allowed to make at most 2 * log2(n) queries. Example Input 5 Output ? 1 1 3 3 No ? 4 4 5 5 Yes ? 4 4 4 4 No ? 5 5 5 5 Yes ! 5 5","solution":"def find_treasure(n, query_function): Finds the position of the treasure in an n x n grid by making queries. Args: n (int): The size of the grid. query_function (function): A function that takes coordinates of the rectangular area and returns \\"Yes\\" or \\"No\\". Returns: (int, int): The coordinates of the treasure position. def query(x1, y1, x2, y2): return query_function(x1, y1, x2, y2) # Binary search on rows low_r, high_r = 1, n while low_r < high_r: mid_r = (low_r + high_r) // 2 response = query(low_r, 1, mid_r, n) if response == \\"Yes\\": high_r = mid_r # The treasure is in the upper part else: low_r = mid_r + 1 # The treasure is in the lower part treasure_r = low_r # Binary search on columns low_c, high_c = 1, n while low_c < high_c: mid_c = (low_c + high_c) // 2 response = query(1, low_c, n, mid_c) if response == \\"Yes\\": high_c = mid_c # The treasure is in the left part else: low_c = mid_c + 1 # The treasure is in the right part treasure_c = low_c return treasure_r, treasure_c"},{"question":"# Introduction A connected component in a graph is a set of vertices such that there exists a path between any pair of vertices in this set. For a given undirected graph, two connected components are disjoint if they do not share any vertices. In this problem, you are provided with a set of functionalities needed to create a basic graph, add edges and determine the number of disjoint connected components in the graph. # Task Write a class `Graph` that has the following methods: 1. `__init__(self)`: Initializes an empty graph. 2. `add_edge(self, u, v)`: Adds an undirected edge between nodes `u` and `v`. Both `u` and `v` are integers. 3. `count_components(self)`: Returns the number of disjoint connected components in the graph. Constraints - Nodes are represented as integers. - Nodes are added implicitly when an edge is added (i.e., there is no separate method for adding nodes). - There can be multiple edges between the same pair of nodes, but those will be treated as a single connection. - The graph does not have self-loops (i.e., no edge connects a node to itself). Example ```python g = Graph() g.add_edge(1, 2) g.add_edge(2, 3) g.add_edge(4, 5) print(g.count_components()) # Output: 2 (Components: {1, 2, 3} and {4, 5}) g.add_edge(3, 4) print(g.count_components()) # Output: 1 (Components: {1, 2, 3, 4, 5}) ```","solution":"class Graph: def __init__(self): self.graph = {} def add_edge(self, u, v): if u not in self.graph: self.graph[u] = [] if v not in self.graph: self.graph[v] = [] if v not in self.graph[u]: self.graph[u].append(v) if u not in self.graph[v]: self.graph[v].append(u) def count_components(self): visited = set() def dfs(node): stack = [node] while stack: current = stack.pop() if current not in visited: visited.add(current) stack.extend(adj for adj in self.graph[current] if adj not in visited) components = 0 for node in self.graph: if node not in visited: dfs(node) components += 1 return components"},{"question":"You need to implement a function `find_duplicate` that identifies the first duplicate entry from a list of integers provided. The function should return the duplicate integer encountered first (considering the order of appearance in the list). If there are no duplicates, the function should return -1. # Input - The function `find_duplicate` takes a single argument: a list of integers `arr` (1 ≤ |arr| ≤ 10^6, where 1 ≤ arr[i] ≤ 10^6). # Output - The function should return an integer which is the first duplicate encountered in the list. If no duplicates exist, return -1. # Examples 1. For the list `[1, 2, 3, 4, 2, 5, 6]`, the function should return `2` because 2 is the first duplicate in the ordered list. 2. For the list `[6, 1, 5, 7, 5, 1]`, the function should return `5` because 5 is the first duplicate when traversing from left to right. 3. For the list `[1, 2, 3, 4, 5]`, the function should return `-1` as there are no duplicates. # Constraints - Focus on ensuring the function runs efficiently with a large list of integers, up to the length limit. - Aim for optimal time and space complexity. # Note - Use appropriate data structures to keep track of observed integers efficiently. ```python def find_duplicate(arr): seen = set() for num in arr: if num in seen: return num seen.add(num) return -1 # Example usage print(find_duplicate([1, 2, 3, 4, 2, 5, 6])) # Output: 2 ```","solution":"def find_duplicate(arr): Finds the first duplicate integer in the list `arr`. Parameters: arr (list of int): List of integers where we need to find the first duplicate. Returns: int: The first duplicate integer if exists, otherwise -1. seen = set() for num in arr: if num in seen: return num seen.add(num) return -1 # Example usage print(find_duplicate([1, 2, 3, 4, 2, 5, 6])) # Output: 2"},{"question":"You are given a number X, and your task is to determine if it is possible to represent X as a sum of exactly two distinct positive integers such that one of them is an exact multiple of P and the other is an exact multiple of Q. -----Constraints----- - 1 ≤ X ≤ 10^4 - 1 ≤ P ≤ 100 - 1 ≤ Q ≤ 100 -----Input----- Input is given from Standard Input in the following format: X P Q -----Output----- Print YES if it is possible to represent X as the sum of exactly two distinct positive integers as described. Otherwise, print NO. -----Sample Input----- 17 3 5 -----Sample Output----- YES For example, if you select 3 and 15, the sum is 18 which is not equal to 17. However, if you select 6 and 11, the sum is 17 where 6 is a multiple of 3 and 11 is a multiple of 5.","solution":"def can_be_sum_of_two_distinct_multiples(X, P, Q): for a in range(P, X, P): for b in range(Q, X, Q): if a + b == X and a != b: return \\"YES\\" return \\"NO\\""},{"question":"You are given a matrix of size N x M. You can rotate any row or any column by one position either to the left (for rows) or to the top (for columns). Your task is to determine if it is possible to make all the elements in the matrix the same by applying any number of these rotations. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and M — the dimensions of the matrix. - Each of the next N lines contains M space-separated integers a_{i,j} (1 ≤ i ≤ N, 1 ≤ j ≤ M) denoting the elements of the matrix. ------ Output Format ------ For each test case, output YES if it is possible to make all the elements of the matrix equal by applying the given operations any number of times. Otherwise, output NO. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N, M ≤ 100 0 ≤ a_{i,j} < 10^{5} ----- Sample Input 1 ------ 3 2 2 1 1 1 1 3 3 2 2 2 2 3 2 2 2 2 2 3 1 2 1 1 1 2 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test Case 1: All elements of the matrix are already equal. Test Case 2: It is not possible to make all elements equal by any number of row or column rotations. Test Case 3: We can rotate the first column upwards to get: - [[1, 2, 1], [1, 1, 2]] xrightarrow{column 1} [[1, 2, 1], [1, 1, 2]]","solution":"def can_make_all_elements_equal(n, m, matrix): Determines if it is possible to make all the elements in the matrix the same by applying any number of row left rotations or column top rotations. # Create a set to store all unique elements in the matrix unique_elements = set() for row in matrix: for element in row: unique_elements.add(element) # If there\'s only one unique element, we can make all the elements equal return len(unique_elements) == 1 def solve(test_cases): results = [] for case in test_cases: n, m, matrix = case if can_make_all_elements_equal(n, m, matrix): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"-----Input----- The input contains two integers x and y (1 ≤ x, y ≤ 100). -----Output----- Output the greatest common divisor (GCD) of x and y. -----Example----- Input 48 18 Output 6","solution":"def gcd(x, y): Returns the greatest common divisor of x and y. while y: x, y = y, x % y return x"},{"question":"Maria is organizing a drawing contest for young artists. Each artist will submit a drawing and these drawings will be evaluated based on their beauty. Maria wants to distribute a total of n prizes among the artists submitting the drawings. Each prize has a certain beauty score associated with it. Maria wants to make sure that the total beauty score of prizes awarded in any group does not exceed a certain value T. Moreover, each artist can receive at most one prize. Determine the maximum number of prizes that can be distributed among the artists while satisfying the above conditions. -----Input----- The first line contains one integer n (1 leq n leq 1,000) — the number of prizes available. The second line contains n integers b_1, b_2, ldots, b_n (1 leq b_i leq 10^5) — the beauty scores of the prizes. The third line contains one integer T (1 leq T leq 10^9) — the maximum allowed total beauty score. -----Output----- Print one integer — the maximum number of prizes that can be distributed without the total beauty score exceeding T. -----Examples----- Input 5 10 20 30 25 15 50 Output 3 Input 6 5 5 5 5 5 5 20 Output 4 -----Note----- In the first example, Maria can distribute prizes with beauty scores 10, 20, and 15, so the total beauty score is 10 + 20 + 15 = 45, which does not exceed T = 50. Thus, the maximum number of prizes she can distribute is 3. In the second example, Maria can distribute any four prizes with beauty scores of 5, so the total beauty score is 5 + 5 + 5 + 5 = 20, which is equal to T = 20. Thus, the maximum number of prizes she can distribute is 4.","solution":"def max_prizes(n, beauty_scores, T): Returns the maximum number of prizes that can be distributed without exceeding the total beauty score T. # Sort the beauty scores from smallest to largest beauty_scores.sort() total_beauty = 0 max_prizes_count = 0 # Iterate through the sorted list and sum up until the limit T is reached for beauty in beauty_scores: if total_beauty + beauty <= T: total_beauty += beauty max_prizes_count += 1 else: break return max_prizes_count"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},j={class:"card-container"},F={key:0,class:"empty-state"},Y=["disabled"],P={key:0},R={key:1};function M(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",j,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),x(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+h(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,Y)):l("",!0)])}const z=d(A,[["render",M],["__scopeId","data-v-78e9500b"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/12.md","filePath":"deepseek/12.md"}'),D={name:"deepseek/12.md"},G=Object.assign(D,{setup(s){return(e,u)=>(n(),i("div",null,[v(z)]))}});export{B as __pageData,G as default};
