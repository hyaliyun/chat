import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(a,e,u,m,s,r){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(k,[["render",O],["__scopeId","data-v-e1bc11ee"]]),S=JSON.parse('[{"question":"You are given a list of n non-negative integers representing the amount of money in each bank. You need to calculate the minimum number of operations required to equalize all banks\' amounts, where an operation consists of picking any two banks, and incrementing or decrementing the amount of money in one of the banks by 1. Input: - The first line of input contains the integer n (1 ≤ n ≤ 1000), the number of banks. - The second line of input contains n non-negative integers separated by spaces, representing the amount of money in each bank. Each integer is guaranteed to be ≤ 10^6. Output: - Output a single integer, the minimum number of operations required to equalize all banks\' amounts. Example: Input 4 1 3 2 4 Output 2 Explanation: To equalize all banks, you can: 1. Increment the amount in the first bank by 1 (now the amounts are [2, 3, 2, 4]) 2. Decrement the amount in the fourth bank by 1 (now the amounts are [2, 3, 2, 3]) 3. Increment the amount in the first bank by 1 and decrement the amount in the second bank by 1 simultaneously (now the amounts are [3, 2, 3, 3]) 4. Increment the amount in the second bank by 1 and decrement the amount in the third bank by 1 (now all amounts are [3, 3, 3, 3]) So the minimum number of operations required is 2. Note: - You can pick any two banks in each operation. - The answer will be guaranteed to fit within a 32-bit signed integer.","solution":"def min_operations_to_equalize(banks): Given a list of non-negative integers representing the amount of money in each bank, calculate the minimum number of operations required to equalize all banks\' amounts. An operation consists of picking any two banks and incrementing the amount of money in one of the banks by 1 and decrementing the amount in the other bank by 1. Args: banks: List[int] - a list of non-negative integers representing the amount of money in each bank Returns: int - the minimum number of operations required to equalize all banks\' amounts total_money = sum(banks) n = len(banks) mean_value = total_money // n operations = 0 for money in banks: operations += abs(money - mean_value) return operations // 2"},{"question":"You are given an array of integers `arr` representing the heights of a series of buildings. The buildings are situated in such a way that they form a skyline with some peaks and valleys. Your task is to determine the total volume of water that can be trapped between the buildings after it rains. The water trapped at any position is determined by the height of the buildings to the left and right of that position. Write a function `trap_water(arr)` that takes a list of non-negative integers and returns the total volume of water trapped. # Input - A single list of integers `arr` where `1 <= len(arr) <= 10000` and `0 <= arr[i] <= 1000`. # Output - An integer representing the total volume of water trapped. # Example Input ``` [0,1,0,2,1,0,1,3,2,1,2,1] ``` Output ``` 6 ``` Explanation - In the given example, 6 units of water can be trapped between the buildings. # Example Input ``` [4,2,0,3,2,5] ``` Output ``` 9 ``` Explanation - In the given example, 9 units of water can be trapped between the buildings. # Note - The problem consists of finding the water above each building by calculating the minimum of the maximum heights to the left and right at each building\'s position, then subtracting the building\'s own height from this value. By summing up these individual values, you get the total water trapped.","solution":"def trap_water(arr): if not arr: return 0 n = len(arr) left_max = [0] * n right_max = [0] * n left_max[0] = arr[0] for i in range(1, n): left_max[i] = max(left_max[i-1], arr[i]) right_max[n-1] = arr[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], arr[i]) total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - arr[i] return total_water"},{"question":"You are given a string representing a sequence of moves: \'L\' (left), \'R\' (right), \'U\' (up) and \'D\' (down). You start at the origin point (0, 0) on a 2D plane and follow the sequence of moves. Your task is to determine whether you end up back at the origin (0, 0) after completing all the moves in the sequence. Input A single string s consisting of characters \'L\', \'R\', \'U\', and \'D\'. The length of the string does not exceed 100,000. Output Print \\"Yes\\" (without the quotes) if you end up back at the origin after all the moves, or \\"No\\" (without the quotes) otherwise. Examples Input LLRR Output Yes Input UDDLLRUU Output No Input UDLR Output Yes Note In the first example, the sequence of moves \\"LLRR\\" moves 2 steps to the left and 2 steps to the right, which brings you back to the origin. In the second example, the sequence of moves \\"UDDLLRUU\\" does not bring you back to the origin, as it results in a final position that is not (0, 0). In the third example, the sequence of moves \\"UDLR\\" brings you back to the origin as it results in a position of (0, 0).","solution":"def is_back_to_origin(s): Determine if the sequence of moves brings you back to the origin (0, 0). x, y = 0, 0 for move in s: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return \\"Yes\\" if (x == 0 and y == 0) else \\"No\\""},{"question":"Given a string s, you are tasked with analyzing the string to determine the minimum number of contiguous substrings you can split the string into such that each substring contains only unique characters. -----Input----- The only line of input contains a string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. -----Output----- Output a single integer representing the minimum number of contiguous substrings. -----Examples----- Input abac Output 2 Input aaaaaa Output 6 -----Note----- In the first sample, the string \\"abac\\" can be split into two substrings \\"ab\\" and \\"ac\\", where each substring has unique characters. In the second sample, each character in the string \\"aaaaaa\\" must be in its own substring as each character is the same.","solution":"def min_unique_substrings(s): Returns the minimum number of contiguous substrings such that each substring contains only unique characters. substrings = 1 seen_chars = set() for char in s: if char in seen_chars: substrings += 1 seen_chars = set(char) else: seen_chars.add(char) return substrings"},{"question":"**Question: \\"Task Management System\\"** You are tasked to develop a task management system with a simple To-Do list functionality for a team. Each member can add tasks with specific deadlines and priorities. Members can also update the priority and deadline of an existing task. Write a function called `manage_tasks` that performs the following operations: 1. **Adding a Task**: When adding a task, provide the task name, deadline, and priority (urgent, high, medium, low). Deadlines are provided in the format \'YYYY-MM-DD\'. 2. **Updating a Task**: When updating a task, specify the task name and the new deadline and/or new priority. If one of these values is not provided, it means it should remain unchanged. 3. **List Commands**: - \'list_deadline\': List all tasks sorted by deadline. - \'list_priority\': List all tasks sorted by priority (urgent, high, medium, low). Implement the function `manage_tasks(commands)`. The function receives a list of commands and performs the specified operations in the order given. Each command can have the following structures: - `[\\"add\\", task_name, deadline, priority]` - `[\\"update\\", task_name, [new_deadline], [new_priority]]`: `new_deadline` and `new_priority` are optional; if either is not to be modified, they will be `None`. - `[\\"list_deadline\\"]` - `[\\"list_priority\\"]` The function should return the output of each of the \'list\' commands in the order they were called. Each task is represented as a dictionary with keys \'name\', \'deadline\', and \'priority\'. **Example:** ```python commands = [ [\\"add\\", \\"task1\\", \\"2023-12-01\\", \\"high\\"], [\\"add\\", \\"task2\\", \\"2023-11-01\\", \\"urgent\\"], [\\"update\\", \\"task1\\", None, \\"urgent\\"], [\\"list_priority\\"], [\\"add\\", \\"task3\\", \\"2023-10-01\\", \\"medium\\"], [\\"list_deadline\\"] ] assert manage_tasks(commands) == [ [{\\"name\\": \\"task2\\", \\"deadline\\": \\"2023-11-01\\", \\"priority\\": \\"urgent\\"}, {\\"name\\": \\"task1\\", \\"deadline\\": \\"2023-12-01\\", \\"priority\\": \\"urgent\\"}], [{\\"name\\": \\"task3\\", \\"deadline\\": \\"2023-10-01\\", \\"priority\\": \\"medium\\"}, {\\"name\\": \\"task2\\", \\"deadline\\": \\"2023-11-01\\", \\"priority\\": \\"urgent\\"}, {\\"name\\": \\"task1\\", \\"deadline\\": \\"2023-12-01\\", \\"priority\\": \\"urgent\\"}] ] ``` You can assume the tasks are unique by name and the priorities are always valid.","solution":"def manage_tasks(commands): tasks = [] output = [] priority_order = {\\"urgent\\": 1, \\"high\\": 2, \\"medium\\": 3, \\"low\\": 4} def sort_by_deadline(task): return task[\\"deadline\\"] def sort_by_priority(task): return priority_order[task[\\"priority\\"]] for command in commands: if command[0] == \\"add\\": _, task_name, deadline, priority = command tasks.append({\\"name\\": task_name, \\"deadline\\": deadline, \\"priority\\": priority}) elif command[0] == \\"update\\": _, task_name, new_deadline, new_priority = command for task in tasks: if task[\\"name\\"] == task_name: if new_deadline is not None: task[\\"deadline\\"] = new_deadline if new_priority is not None: task[\\"priority\\"] = new_priority break elif command[0] == \\"list_deadline\\": sorted_tasks = sorted(tasks, key=sort_by_deadline) output.append(sorted_tasks) elif command[0] == \\"list_priority\\": sorted_tasks = sorted(tasks, key=sort_by_priority) output.append(sorted_tasks) return output"},{"question":"Write a function that takes a string and returns a new string where each character is repeated once. Pay attention to preserve the original order of characters as well as their case (uppercase/lowercase). The input string will consist of alphabets (both uppercase and lowercase) only, and it will always contain at least one character. For example: - For the input string \\"hello\\", the function should return \\"hheelllloo\\". - For the input string \\"Code\\", the function should return \\"CCooddee\\".","solution":"def double_characters(s: str) -> str: Returns a new string where each character in the input string is repeated once. Parameters: s (str): The input string containing alphabet characters. Returns: str: A new string with each character from the input string repeated once. return \'\'.join([char * 2 for char in s])"},{"question":"Given an integer array A of size N, process Q queries on the array. Each query can be one of the two types: 1. Update the value at a particular position. 2. Find the product of all the unique values in the array from a given range. # Input: - The first line contains two integers, N (1 ≤ N ≤ 10^5) and Q (1 ≤ Q ≤ 10^5), representing the size of the array and the number of queries, respectively. - The second line contains N integers representing the elements of the array A (1 ≤ A[i] ≤ 10^9). - The following Q lines contain either of the two types of queries: * \\"U i x\\" (1 ≤ i ≤ N, 1 ≤ x ≤ 10^9): Update the element at index i to the value x. * \\"P l r\\" (1 ≤ l ≤ r ≤ N): Output the product of all unique values in the range [l, r]. # Output: - For each \'P\' query, output the product of all unique values in the specified range modulo 1000000007. # Example: Input: ``` 5 4 2 3 3 2 5 P 1 3 U 2 4 P 1 3 P 1 5 ``` Output: ``` 6 8 40 ``` Explanation: 1. The product of unique values in the range [1, 3] is 2 * 3 = 6. 2. Update the value at index 2 to 4. The array becomes [2, 4, 3, 2, 5]. 3. The product of unique values in the range [1, 3] is 2 * 4 * 3 = 24. 4. The product of unique values in the range [1, 5] is 2 * 4 * 3 * 5 = 120.","solution":"MOD = 1000000007 def process_queries(N, Q, A, queries): from functools import reduce from collections import defaultdict def product_of_unique(arr, l, r): unique_values = set(arr[l:r+1]) result = reduce(lambda x, y: (x * y) % MOD, unique_values, 1) return result output = [] for q in queries: if q[0] == \'U\': _, i, x = q A[i-1] = x elif q[0] == \'P\': _, l, r = q output.append(product_of_unique(A, l-1, r-1)) return output"},{"question":"Write a function `min_cost_to_convert(a, b)` that takes two strings `a` and `b` as input. The task is to compute the minimum cost required to transform string `a` into string `b`. You are given the following operations with specified costs: - Insert a character: cost = 1 - Delete a character: cost = 1 - Replace a character: cost = 2 You can perform any of these operations any number of times. Example 1: Input: a = \\"abcdef\\" b = \\"azced\\" Output: 5 Explanation: Transform \\"abcdef\\" -> \\"azced\\": - Replace \'b\' with \'z\', cost = 2 - Replace \'f\' with \'d\', cost = 2 - Delete \'e\', cost = 1 Total cost = 2 + 2 + 1 = 5 Example 2: Input: a = \\"intention\\" b = \\"execution\\" Output: 8 Explanation: Transform \\"intention\\" -> \\"execution\\": - Replace \'i\' with \'e\', cost = 2 - Replace \'n\' with \'x\', cost = 2 - Replace \'t\' with \'c\', cost = 2 - Replace \'t\' with \'u\', cost = 2 Total cost = 2 + 2 + 2 + 2 = 8 Your Task: You don\'t need to read input or print anything. Complete the function `min_cost_to_convert()` which takes strings `a` and `b` as input parameters and returns the minimum cost to transform `a` into `b`. Expected Time Complexity: O(n * m) Expected Auxiliary Space: O(n * m) Constraints: 1 ≤ |a|, |b| ≤ 1000","solution":"def min_cost_to_convert(a, b): Returns the minimum cost required to transform string `a` into string `b` using the given operations. n = len(a) m = len(b) # Create a 2D DP array dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)] # Initialize the first row and first column for i in range(n + 1): dp[i][0] = i # Cost of deleting all characters in `a` for j in range(m + 1): dp[0][j] = j # Cost of inserting all characters in `b` # Fill the DP array for i in range(1, n + 1): for j in range(1, m + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no cost else: dp[i][j] = min(dp[i - 1][j] + 1, # Delete dp[i][j - 1] + 1, # Insert dp[i - 1][j - 1] + 2) # Replace return dp[n][m]"},{"question":"In a certain kingdom, there are multiple towns connected by bidirectional roads. Each road has a travel cost associated with it. The kingdom has decided to implement a new policy for constructing roads to ensure that there is exactly one unique way to travel between any two towns following a minimum travel cost path. This unique path is defined as a \\"Minimum Unique Path.\\" Given the current layout of towns and roads, you need to calculate the minimum cost of constructing the roads such that each pair of towns has one unique path of minimum cost. # Input The first line contains two integers `n` (2 ≤ n ≤ 1000) and `m` (1 ≤ m ≤ 100000), representing the number of towns and the number of roads, respectively. The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000), which indicates a bidirectional road between town `u` and town `v` with a travel cost of `w`. The input ends with a line containing two zeros (0 0). # Output For each test case, output a single integer representing the minimum construction cost to ensure each pair of towns has one unique minimum cost path. If it is impossible to achieve this configuration, output `-1`. # Examples Input ``` 4 5 1 2 2 1 3 5 2 3 7 2 4 8 3 4 3 4 4 1 2 1 2 3 1 3 4 1 1 3 2 0 0 ``` Output ``` 10 3 ``` Explanation: - In the first case, the minimum unique paths can be made by selecting the roads 1-2, 1-3, 3-4, and the total minimum cost will be 2 + 5 + 3 = 10. - In the second case, the unique minimum cost paths can be made by selecting the roads 1-2, 2-3, and 3-4, and do not need any further construction, with a total cost of 1 + 1 + 1 = 3.","solution":"def kruskal_mst(n, edges): def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 parent = list(range(n)) rank = [0] * n edges.sort(key=lambda x: x[2]) mst_cost = 0 edge_count = 0 for u, v, w in edges: uroot = find(parent, u) vroot = find(parent, v) if uroot != vroot: mst_cost += w edge_count += 1 union(parent, rank, uroot, vroot) if edge_count == n - 1: break if edge_count != n - 1: return -1 return mst_cost def min_unique_path_costs(test_cases): results = [] for n, m, edges in test_cases: if n == 0 and m == 0: break adjusted_edges = [(u-1, v-1, w) for u, v, w in edges] result = kruskal_mst(n, adjusted_edges) results.append(result) return results"},{"question":"Consider a scenario where you are given a string `S` and an integer `K`. Your task is to determine the number of distinct substrings of length `K` present in the string `S`. A substring is defined as a contiguous sequence of characters within a string. For example, in the string \\"abcde\\", the substrings of length 3 are \\"abc\\", \\"bcd\\", and \\"cde\\". SAMPLE INPUT Input will be of the format: T S K where T is the number of test cases (T ≤ 1000), S is a string of length up to 1000, and K is an integer (0 ≤ K ≤ 100). SAMPLE OUTPUT For each test case, print the number of distinct substrings of length K found in the string S. Sample Input 3 abcd 2 aaaaa 1 abcdefg 3 Sample Output 3 1 5","solution":"def count_distinct_substrings(T, cases): results = [] for case in cases: S, K = case K = int(K) if K == 0: results.append(0) continue substrings = set() for i in range(len(S) - K + 1): substrings.add(S[i:i+K]) results.append(len(substrings)) return results # Sample input # T = 3 # cases = [(\\"abcd\\", 2), (\\"aaaaa\\", 1), (\\"abcdefg\\", 3)] # print(count_distinct_substrings(T, cases))"},{"question":"Miranda, an avid gardener, has decided to plant rare flowering plants in her square garden. She is very particular about the arrangement of these plants. Miranda has a square garden of side length `L` divided into an `L x L` grid, and each cell of the grid can hold exactly one plant. She wants to plant `M` rare flowering plants in such a way that these rare plants form a rectangle with all its sides parallel to the grid lines. However, Miranda finds a challenge in keeping the rare plants isolated from the rest of the garden. To aid her, she\'s looking for a way to rearrange the plants such that any rare plant will be as far away as possible from the garden\'s boundary. Given the positions of `M` rare flowering plants in the grid, find the smallest possible side lengths of a rectangle that can enclose all these rare plants after any number of row transitions. In a row transition, all plants in a row can be shifted up or down by one row but must stay within the garden\'s boundary. Constraints: * 1 ≤ M ≤ 1000 * 1 ≤ L ≤ 1000 * 1 ≤ x_i, y_i ≤ L (x_i and y_i are the row and column positions of the `i`-th rare plant) Input: * The first line has two integers, `L` and `M` — the side length of the garden and the number of rare flowering plants. * The next `M` lines each contain two integers `x_i` and `y_i` — the initial positions of the rare flowering plants. Output: * Print the dimensions of the smallest rectangle that can enclose all the rare plants after any number of row transitions. Examples: Input 5 3 1 2 3 3 4 1 Output 2 3 Input 6 4 2 2 2 4 5 1 6 5 Output 4 5","solution":"def smallest_rectangle(L, M, positions): Given the side length L of the garden and M positions of rare flowering plants, returns the dimensions of the smallest rectangle that can enclose all the rare plants after any number of row transitions. Parameters: L (int): the side length of the garden. M (int): the number of rare flowering plants. positions (list of tuples): the positions of the rare flowering plants. Returns: tuple: the dimensions of the smallest rectangle (height, width). # Initialize the min and max bounds for rows and columns min_x = L max_x = 0 min_y = L max_y = 0 # Traverse through all positions to find the min and max bounds for x, y in positions: if x < min_x: min_x = x if x > max_x: max_x = x if y < min_y: min_y = y if y > max_y: max_y = y # Rectangle dimensions height = max_x - min_x + 1 width = max_y - min_y + 1 return height, width"},{"question":"Input: You are given a string \'s\' which contains only lowercase alphabetical characters. The goal is to find and return the smallest substring of \'s\' which contains all the distinct characters present in \'s\'. If there are multiple such substrings, return the one which starts first in \'s\'. Output: A single string which is the smallest substring containing all distinct characters of s. Constraints: 1 ≤ |s| ≤ 1000 Problem Setter: John Doe SAMPLE INPUT aabcbcdbca SAMPLE OUTPUT dbca","solution":"def smallest_substring_all_distinct_chars(s): Returns the smallest substring which contains all distinct characters present in the given string \'s\'. n = len(s) distinct_chars = set(s) required_char_count = len(distinct_chars) char_frequency = {} min_length = float(\'inf\') min_substring = \\"\\" left = 0 distinct_count = 0 for right in range(n): char = s[right] char_frequency[char] = char_frequency.get(char, 0) + 1 if char_frequency[char] == 1: distinct_count += 1 while distinct_count == required_char_count: current_length = right - left + 1 if current_length < min_length: min_length = current_length min_substring = s[left:right+1] starting_char = s[left] char_frequency[starting_char] -= 1 if char_frequency[starting_char] == 0: distinct_count -= 1 left += 1 return min_substring"},{"question":"You are given two positive integers n and k. You need to arrange the numbers from 1 to n in a sequence such that the absolute difference between any two consecutive numbers is at least k. If such a sequence is not possible, return an empty list. Otherwise, return one such sequence. Input Format A single line containing two space-separated integers n and k. Constraints 1 leq n leq 10^5 1 leq k leq n Output Format If it\'s not possible to arrange the numbers, return an empty list. Otherwise, print a single line containing a sequence of n integers such that the absolute difference between any two consecutive numbers is at least k. Sample Input 5 2 Sample Output 1 3 5 2 4 Explanation In the given example, an arrangement of the sequence [1, 3, 5, 2, 4] satisfies the condition where the absolute difference between any two consecutive numbers is at least 2: - |1 - 3| = 2 - |3 - 5| = 2 - |5 - 2| = 3 - |2 - 4| = 2 Note: - There could be more than one valid sequence that fulfills the condition. Any one valid sequence is acceptable as output.","solution":"def arrange_sequence(n, k): Arranges numbers from 1 to n in a sequence such that the absolute difference between any two consecutive numbers is at least k. If such a sequence is not possible, returns an empty list. if k == 0: return list(range(1, n + 1)) if k > n: return [] result = [] i = 1 while i <= n: result.append(i) i += k left = set(range(1, n + 1)) - set(result) return result + sorted(left)"},{"question":"You are given a string representing a mathematical expression containing integers and the operators + and -. Your task is to evaluate this expression and return the result as an integer. The input string only contains non-negative integers, plus signs (+), minus signs (-), and spaces. The input can be assumed to be a valid expression. **Example:** ``` evaluateExpression(\\"3+2-5\\") => 0 evaluateExpression(\\"10 + 2 - 6\\") => 6 evaluateExpression(\\"100 - 20 + 5 - 5\\") => 80 ``` **Function Signature:** ``` def evaluateExpression(expression: str) -> int: # Your code here ``` **Constraints:** - The input string is a valid mathematical expression. - The integers in the expression are non-negative. - The expression contains only the + and - operators. - The expression contains only spaces as additional characters for readability.","solution":"def evaluateExpression(expression: str) -> int: Evaluates a simple mathematical expression involving non-negative integers and the operators + and -. The expression is a valid string containing numbers, spaces, +, and -. Parameters: expression (str): A valid mathematical expression in string format. Returns: int: The result of evaluating the expression. # Remove all spaces from the expression expression = expression.replace(\\" \\", \\"\\") # Initialize variables to store the current number and result current_number = 0 result = 0 # Keep track of the current operation (start with +) operation = \'+\' for char in expression: if char.isdigit(): # Build the current number current_number = current_number * 10 + int(char) else: # If we encounter an operator, calculate the result based on the previous operation if operation == \'+\': result += current_number elif operation == \'-\': result -= current_number # Update the operation and reset current number operation = char current_number = 0 # Apply the last operation to the last number if operation == \'+\': result += current_number elif operation == \'-\': result -= current_number return result"},{"question":"Sam the Squirrel is trying to collect as many acorns as he can for the winter. He has a log of trees with the number of acorns in each. Sam wants to know the number of acorns collected from different intervals of trees over several queries. You are given an array of integers a, where a[i] represents the number of acorns on the ith tree. You need to answer m queries about the sum of acorns in certain intervals. Each query is described by a pair of integers li, ri (1 ≤ li ≤ ri ≤ n), asking for the sum of acorns from the lth tree to the rth tree (inclusive). Write a program to help Sam determine the total number of acorns collected in each of the given intervals. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of trees. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), where ai is the number of acorns on the ith tree. The next line contains an integer m (1 ≤ m ≤ 100,000), the number of queries. Each of the next m lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n), representing a query. Output Print m integers — the answers to the queries in the order in which they are given in the input. SAMPLE INPUT 5 1 3 4 8 6 3 1 3 2 5 3 4 SAMPLE OUTPUT 8 21 12","solution":"def acorn_collection(n, acorns, m, queries): # First compute the prefix sums for easier query resolution prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + acorns[i] results = [] for l, r in queries: # Convert 1-based to 0-based indexing for internal use sum_acorns = prefix_sums[r] - prefix_sums[l - 1] results.append(sum_acorns) return results"},{"question":"You are given two strings, A and B, both consisting of lowercase letters. We say that A and B are \\"alphabetically similar\\" if we can make A equal to B by swapping some (possibly zero) characters within A. Write a program to determine whether two strings A and B are alphabetically similar. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - Each test case consists of two lines. - The first line contains a string A. - The second line contains a string B. ------ Output Format ------ For each test case, output \\"YES\\" if the strings A and B are alphabetically similar, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ |A|, |B| ≤ 10^{5} - The sum of lengths of all strings across all test cases does not exceed 10^{6}. ------ Sample Input 1 ------ 4 abc bca abcd dcba aabbcc bbaacc abc abcd ------ Sample Output 1 ------ YES YES YES NO ------ Explanation 1 ------ Test case 1: We can swap the characters of A to get \\"bca\\", which matches B. Test case 2: We can rearrange \\"abcd\\" to \\"dcba\\" by swapping all characters. Test case 3: Both strings have the same characters with the same frequency, so they are alphabetically similar. Test case 4: The strings \\"abc\\" and \\"abcd\\" are of different lengths, thus they cannot be rearranged to be the same. ------ Note ------ Two strings are alphabetically similar if one string can be rearranged to become the other string via swapping. This means they must have exactly the same characters with the same frequency.","solution":"def are_alphabetically_similar(A, B): Determines if strings A and B are alphabetically similar. if len(A) != len(B): return \\"NO\\" return \\"YES\\" if sorted(A) == sorted(B) else \\"NO\\" def process_test_cases(test_cases): Processes multiple test cases to determine if strings are alphabetically similar. :param test_cases: List of tuples, each containing two strings A and B :return: List of results for each test case results = [] for A, B in test_cases: results.append(are_alphabetically_similar(A, B)) return results"},{"question":"You are required to create a function named `matrix_transformations(matrix, sequence)` that will perform a series of transformations on a given matrix according to a sequence of commands. The function will receive two arguments: - `matrix`: A 2D list of integers, where each sublist represents a row of the matrix. - `sequence`: A list of strings, where each string is a command that needs to be performed on the matrix. The possible commands are: - `\\"transpose\\"`: Transpose the matrix. - `\\"rotate_clockwise\\"`: Rotate the matrix 90 degrees clockwise. - `\\"rotate_counterclockwise\\"`: Rotate the matrix 90 degrees counterclockwise. - `\\"flip_horizontal\\"`: Flip the matrix horizontally. - `\\"flip_vertical\\"`: Flip the matrix vertically. The function should return the transformed matrix after performing all the commands in the given sequence in the order they appear. # Examples: ```python matrix_transformations([[1, 2], [3, 4]], [\\"transpose\\", \\"rotate_clockwise\\"]) # Output: [[3, 1], [4, 2]] matrix_transformations([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [\\"flip_horizontal\\", \\"flip_vertical\\"]) # Output: [[9, 8, 7], [6, 5, 4], [3, 2, 1]] matrix_transformations([[1]], [\\"transpose\\", \\"rotate_clockwise\\", \\"flip_horizontal\\"]) # Output: [[1]] ``` # Notes: 1. Transposing a matrix means flipping it over its diagonal. 2. Rotating a matrix 90 degrees clockwise means turning each element from row `i`, column `j` to row `j`, column `n-1-i`, where `n` is the number of rows. 3. Rotating 90 degrees counterclockwise means turning each element from row `i`, column `j` to row `n-1-j`, column `i`. 4. Flipping a matrix horizontally means reversing the elements in each row. 5. Flipping a matrix vertically means reversing the order of the rows. Hint: You may find it helpful to write helper functions for each type of transformation to keep your code organized.","solution":"def transpose(matrix): return [list(row) for row in zip(*matrix)] def rotate_clockwise(matrix): return [list(row) for row in zip(*matrix[::-1])] def rotate_counterclockwise(matrix): return [list(row) for row in zip(*matrix)][::-1] def flip_horizontal(matrix): return [row[::-1] for row in matrix] def flip_vertical(matrix): return matrix[::-1] def matrix_transformations(matrix, sequence): for command in sequence: if command == \\"transpose\\": matrix = transpose(matrix) elif command == \\"rotate_clockwise\\": matrix = rotate_clockwise(matrix) elif command == \\"rotate_counterclockwise\\": matrix = rotate_counterclockwise(matrix) elif command == \\"flip_horizontal\\": matrix = flip_horizontal(matrix) elif command == \\"flip_vertical\\": matrix = flip_vertical(matrix) return matrix"},{"question":"You are given a list of integers. Your task is to rearrange the list into the lexicographically smallest permutation that is strictly greater than the current permutation, if such a permutation exists. If no such permutation exists, return the smallest permutation possible. The lexicographic order is defined as the dictionary order. For example, the order \\"1234\\" < \\"1243\\" < \\"1324\\" < ... . Write a function `next_permutation(nums)` to achieve the above task. Input Format - A single list of integers `nums` (1 <= len(nums) <= 1000). Output Format - Output the list of integers arranged into the next permutation or the smallest permutation if no such greater permutation exists. Example __Example 1:__ __Input:__ `[1, 2, 3]` __Output:__ `[1, 3, 2]` __Example 2:__ __Input:__ `[3, 2, 1]` __Output:__ `[1, 2, 3]` __Example 3:__ __Input:__ `[1, 1, 5]` __Output:__ `[1, 5, 1]` __Function Signature:__ ```python def next_permutation(nums: List[int]) -> List[int]: ```","solution":"from typing import List def next_permutation(nums: List[int]) -> List[int]: Rearranges the list into the lexicographically next greater permutation of numbers. If such arrangement is not possible, it rearranges it into the lowest possible order. # Find the first decreasing element from the end i = len(nums) - 2 while i >= 0 and nums[i] >= nums[i + 1]: i -= 1 if i == -1: # If no such element found, reverse the list nums.reverse() return nums # Find the element just larger than nums[i] j = len(nums) - 1 while nums[j] <= nums[i]: j -= 1 # Swap them nums[i], nums[j] = nums[j], nums[i] # Reverse the elements from i+1 to end to get the next permutation nums[i + 1:] = reversed(nums[i + 1:]) return nums"},{"question":"Write a Frequency Analyzer. Input: - First line contains N - the number of words. - The next N lines each contain a word. Output: - The output should be sorted list of words and their frequencies, separated by a space. - Words with the same frequency should be sorted in ascending lexicographical order. Constraints: 1 ≤ N ≤ 100 1 ≤ length of each word ≤ 100 SAMPLE INPUT: 5 apple banana apple orange banana SAMPLE OUTPUT: apple 2 banana 2 orange 1","solution":"def frequency_analyzer(N, words): Analyzes the frequency of each word in the given list and returns a sorted list of words and their frequencies. Words with the same frequency are sorted in ascending lexicographical order. :param N: Number of words :param words: List of words :return: Sorted list of words with their frequencies from collections import Counter # Calculating the frequency of each word word_count = Counter(words) # Sorting the words first by frequency and then lexicographically sorted_words = sorted(word_count.items(), key=lambda x: (-x[1], x[0])) # Preparing the output format result = [f\\"{word} {count}\\" for word, count in sorted_words] return result"},{"question":"A group of adventurers have ventured into a multi-leveled dungeon. Each level of the dungeon is represented as a grid of cells that can either be an empty cell, a wall, a staircase up, or a staircase down. The adventurers move through the dungeon following a set of given directions. The adventurers\' goal is to explore the dungeon by moving from the starting cell to the exit cell, which is located somewhere in the dungeon. The adventurers can use the staircases to move between levels. Your task is to write a program to determine if the adventurers can find a path to the exit from their starting location by following the directions provided. Each dataset comprises the following: - N, the number of levels in the dungeon. - For each level, the dimensions R (rows) and C (columns), followed by R lines each containing C characters describing the grid cells. The characters can be: - \'.\' for an empty cell. - \'#\' for a wall. - \'U\' for a staircase that moves up one level. - \'D\' for a staircase that moves down one level. - \'S\' for the starting point of the adventurers. - \'E\' for the exit cell. - A line containing an integer M, the number of moves. - M lines each containing a direction and a number of steps, indicating the moves the adventurers will make. The direction characters will be \'U\', \'D\', \'L\', \'R\' for Up, Down, Left, Right, respectively. The input ends with a line containing a zero. Output \\"YES\\" if the adventurers can reach the exit, otherwise output \\"NO\\". Input The input contains multiple datasets. Each dataset is in the following format: N For each level: R C grid_line_1 grid_line_2 ... grid_line_R M direction step_count ... 0 Output For each dataset, print \\"YES\\" if the adventurers can reach the exit, otherwise print \\"NO\\". Example Input 2 3 3 S.. .#U ..E 3 3 D.. .#. ..E 5 R 2 D 1 U 1 L 2 R 2 3 5 5 S.... ..... ..... ..... ..U.. 5 5 ..... ..... ..... ..... .D..E 0 Output YES NO","solution":"from collections import deque def parse_input(): dungeons = [] while True: N = int(input()) if N == 0: break levels = [] for _ in range(N): R, C = map(int, input().split()) grid = [input().strip() for _ in range(R)] levels.append((R, C, grid)) M = int(input()) moves = [input().split() for _ in range(M)] for move in moves: move[1] = int(move[1]) dungeons.append((N, levels, M, moves)) return dungeons def find_start_exit(level): start = None exit = None R, C, grid = level for r in range(R): for c in range(C): if grid[r][c] == \'S\': start = (r, c) elif grid[r][c] == \'E\': exit = (r, c) return start, exit def move_adventurers(start, moves, levels): current_level = 0 current_pos = start for direction, steps in moves: for _ in range(steps): if direction == \'U\': # Move Up if current_pos[0] > 0 and levels[current_level][2][current_pos[0] - 1][current_pos[1]] != \'#\': current_pos = (current_pos[0] - 1, current_pos[1]) elif direction == \'D\': # Move Down if current_pos[0] < levels[current_level][0] - 1 and levels[current_level][2][current_pos[0] + 1][current_pos[1]] != \'#\': current_pos = (current_pos[0] + 1, current_pos[1]) elif direction == \'L\': # Move Left if current_pos[1] > 0 and levels[current_level][2][current_pos[0]][current_pos[1] - 1] != \'#\': current_pos = (current_pos[0], current_pos[1] - 1) elif direction == \'R\': # Move Right if current_pos[1] < levels[current_level][1] - 1 and levels[current_level][2][current_pos[0]][current_pos[1] + 1] != \'#\': current_pos = (current_pos[0], current_pos[1] + 1) # Check that the current position if it is staircase to move levels if levels[current_level][2][current_pos[0]][current_pos[1]] == \'U\': if current_level > 0: current_level -= 1 elif levels[current_level][2][current_pos[0]][current_pos[1]] == \'D\': if current_level < len(levels) - 1: current_level += 1 # Check if reached the exit if levels[current_level][2][current_pos[0]][current_pos[1]] == \'E\': return True return False def can_escape_dungeon(N, levels, M, moves): start, exit = find_start_exit(levels[0]) if not start or not exit: return \\"NO\\" can_escape = move_adventurers(start, moves, levels) return \\"YES\\" if can_escape else \\"NO\\" def main(): dungeons = parse_input() results = [] for N, levels, M, moves in dungeons: result = can_escape_dungeon(N, levels, M, moves) results.append(result) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Alice and Bob are playing a game with a sequence of integers. They take turns to perform exactly one operation on the sequence. The operation consists of selecting a pair of adjacent integers a and b and replacing them with their greatest common divisor (gcd). Alice always starts first. The game continues until the sequence is reduced to a single integer. The player who makes the last move (i.e., reduces the sequence to the single final integer) is the winner. Both players play optimally. Determine who will win the game. Input The first line contains a single integer n (2 ≤ n ≤ 100) — the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. Output If Alice wins, print \\"Alice\\", otherwise print \\"Bob\\" (without quotes). You can print each letter in any case (upper or lower). Examples Input 3 12 15 18 Output Alice Input 4 6 10 15 25 Output Bob Note In the first sample test, Alice can win by reducing the sequence step by step in her favour. In the second sample test, Bob wins after optimal moves as Alice will have no winning strategy.","solution":"def gcd(a, b): while b: a, b = b, a % b return a def determine_winner(n, sequence): if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"You\'re working on a project that involves an intricate monitoring system in a multi-story building. This system has several sensors placed on different floors, and each sensor can detect motion within a specific range. The data from the sensors is fed into a central system that needs to determine which floor has the highest average distance covered by detected motions over a given period. The motions detected by each sensor are stored with their respective distances in meters. Given the number of sensors, their positions (floor number), and their detected distances, your task is to determine the floor with the highest average distance covered by motions. Input: - The first line contains two integers, `F` (1 ≤ F ≤ 100) and `S` (1 ≤ S ≤ 1000), denoting the number of floors and the number of sensors, respectively. - The next `S` lines contain information about each sensor. - Each line contains three integers: `floor`, `m`, and `d`. - `floor` (1 ≤ floor ≤ F) indicates the floor on which the sensor is placed. - `m` (1 ≤ m ≤ 100) indicates the number of motion events detected by the sensor. - `d` (1 ≤ d ≤ 10000) indicates the total distance covered by these motion events in meters. Output: - Print a single integer, the floor number that has the highest average distance covered by detected motions. If there is a tie, select the floor with the smallest number. Example: Input: 3 5 1 5 400 2 10 600 3 10 500 1 4 500 2 6 300 Output: 1 Explanation: - Floor 1: Average distance = (400/5 + 500/4)/2 = 165 - Floor 2: Average distance = (600/10 + 300/6)/2 = 70 - Floor 3: Average distance = 500/10 = 50 Floor 1 has the highest average distance, hence the output is 1.","solution":"def find_floor_with_highest_avg_distance(F, S, sensor_data): Determine which floor has the highest average distance covered by detected motions. Parameters: F (int): Number of floors. S (int): Number of sensors. sensor_data (list of tuples): Each tuple contains (floor, m, d). Returns: int: The floor with the highest average distance covered by motions. from collections import defaultdict # Dictionary to store sum of distances and number of motion events per floor floor_data = defaultdict(lambda: [0, 0]) for floor, m, d in sensor_data: floor_data[floor][0] += d # sum of distances floor_data[floor][1] += m # sum of motion events # Find the floor with the highest average distance max_avg_distance = -1 best_floor = -1 for floor in range(1, F+1): if floor_data[floor][1] != 0: avg_distance = floor_data[floor][0] / floor_data[floor][1] if avg_distance > max_avg_distance or (avg_distance == max_avg_distance and floor < best_floor): max_avg_distance = avg_distance best_floor = floor return best_floor # Example usage: # F = 3 # S = 5 # sensor_data = [ # (1, 5, 400), # (2, 10, 600), # (3, 10, 500), # (1, 4, 500), # (2, 6, 300) # ] # print(find_floor_with_highest_avg_distance(F, S, sensor_data)) # Output: 1"},{"question":"You are working with a team of astronauts to develop a new fuel-efficient route planner for space missions. Each space mission can be viewed as a grid where each cell represents a different sector of space, with some cells containing asteroids that the spaceship cannot pass through. The goal is to determine the shortest path from the top-left corner of the grid to the bottom-right corner. Given a grid represented by a 2D array of integers, where: - 0 represents empty space - 1 represents an asteroid (impassable terrain) You are to write a function to calculate the minimum number of moves required for the spaceship to reach the bottom-right corner of the grid from the top-left corner. If the bottom-right corner is unreachable, return -1. The spaceship can move: - Up - Down - Left - Right Your function should take the following inputs: 1. A 2D list representing the grid. **Function Signature:** ```python def shortest_path(grid: List[List[int]]) -> int: ``` # Constraints: - The grid will be at least 1x1 in size and no larger than 100x100. - Each cell contains either a `0` or a `1`. # Example: ```python grid = [ [0, 0, 1], [0, 1, 0], [0, 0, 0] ] assert shortest_path(grid) == 4 ```","solution":"from typing import List, Tuple from collections import deque def shortest_path(grid: List[List[int]]) -> int: if not grid or not grid[0]: return -1 rows, cols = len(grid), len(grid[0]) if grid[0][0] != 0 or grid[rows-1][cols-1] != 0: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == rows-1 and col == cols-1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols and (new_row, new_col) not in visited and grid[new_row][new_col] == 0: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"You are managing a futuristic warehouse with items stored in a large grid. Each position in the grid can either be empty or contain a stack of boxes of varying height. Your task is to find the maximum number of boxes that can be seen from any direction. A box is visible if it is not blocked by a taller box in its row or column when viewed from that direction. Given a grid of dimensions M x N, where each cell contains an integer representing the height of the stack of boxes (0 if the cell is empty), determine the maximum number of visible boxes from any row or column when viewed from the top, bottom, left or right. Input: The first line contains two integers M and N denoting the dimensions of the grid. Next M lines contain N integers each, representing the height of the stacks in the grid. Constraints: 1 ≤ M, N ≤ 100 0 ≤ height ≤ 100 Output: A single integer denoting the maximum number of visible boxes. Example: Input: 4 5 1 0 4 2 3 3 2 4 0 1 1 1 0 2 2 0 2 4 3 0 Output: 10 Explanation: When viewed from the top or bottom, the visible boxes in each column are: Column 1: 2 boxes visible (maximum height 3 and height 1 in different rows) Column 2: 2 boxes visible (maximum height 2 and height 2 in different rows) Column 3: 3 boxes visible (maximum height 4 and another height 4 but a different row) Column 4: 2 boxes visible (heights 3 and another height 2) Column 5: 2 boxes visible (maximum height 3 and height 1 in different rows) Total from top or bottom view: 2+2+3+2+2 = 11 When viewed from the left or right, the visible boxes in each row are: Row 1: 4 boxes visible (heights 1, 4, 2, 3) Row 2: 4 boxes visible (heights 3, 2, 4, 1) Row 3: 2 boxes visible (heights 1, 2) Row 4: 3 boxes visible (heights 2, 4, 3) Total from left or right view: 4+4+2+3 = 13 Therefore, the maximum number of visible boxes is 13.","solution":"def max_visible_boxes(grid): M = len(grid) N = len(grid[0]) if M > 0 else 0 max_visible = 0 for row in grid: row_visible = len(set(row)) - (1 if 0 in row else 0) max_visible = max(max_visible, row_visible) for col in range(N): col_visible = len(set(grid[row][col] for row in range(M))) - (1 if 0 in (grid[row][col] for row in range(M)) else 0) max_visible = max(max_visible, col_visible) return max_visible def max_number_of_visible_boxes(grid): M = len(grid) N = len(grid[0]) if M > 0 else 0 max_visible = 0 for row in grid: row_visible = len(set(filter(lambda x: x > 0, row))) max_visible = max(max_visible, row_visible) for col in range(N): col_visible = len(set(grid[row][col] for row in range(M) if grid[row][col] > 0)) max_visible = max(max_visible, col_visible) return max_visible"},{"question":"# All Possible Combinations Write a function that receives an array of unique integers and returns a 2D array of all possible combinations of the integers. The order of the combinations inside the result array does not matter. You can return the combinations in any order. Each combination must be represented as a sorted array. # Example: ```python [1, 2, 3] -> [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]] [0, 1] -> [[], [0], [1], [0, 1]] [] -> [[]] ``` # Constraints: - The input array will have at most `10` elements. - The elements in the array will be distinct and within the range `-20` to `20`.","solution":"from itertools import combinations def all_combinations(arr): Returns a 2D array of all possible combinations of the integers. Each combination is sorted. result = [[]] for r in range(1, len(arr)+1): result.extend([list(combo) for combo in combinations(arr, r)]) return result"},{"question":"You are given an integer array A and an integer k. Your task is to determine if there are three distinct elements in A that sum up to k. Formally, you need to check if there are three distinct indices i, j, and l such that A[i] + A[j] + A[l = k. For example, if A = [1, 2, 3, 4, 5] and k = 9, then the numbers 1, 3, and 5 are suitable (since 1 + 3 + 5 = 9). -----Input----- The first line contains an integer t (1 le t le 50) — the number of test cases. Then t test cases follow. Each test case starts with a line containing an integer n (3 le n le 100) — the length of the array A, and an integer k (-10^6 le k le 10^6) — the target sum. The next line contains n integers A_1, A_2, ..., A_n (-10^6 le A_i le 10^6) — the elements of the array. -----Output----- For each test case, output on a separate line: \\"YES\\" if there exist three distinct elements in the array that sum up to k. \\"NO\\" otherwise. You can output \\"YES\\" and \\"NO\\" in any case (for example, the strings yEs, yes, Yes and YES will be recognized as positive). -----Examples----- Input 3 5 9 1 2 3 4 5 3 10 3 3 3 4 0 -1 2 -3 4 Output YES NO YES -----Note----- In the first test case, the elements 1, 3, and 5 add up to 9. In the second test case, there are only three elements, all of which are 3, and their sum 3 + 3 + 3 = 9 neq 10. In the third test case, the elements -1, 2, and -3 add up to -1 + 2 - 3 = -2 + 2 = 0.","solution":"def can_find_three_sum(arr, k): n = len(arr) arr.sort() for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == k: return \\"YES\\" elif current_sum < k: left += 1 else: right -= 1 return \\"NO\\" def solve(t, cases): results = [] for case in cases: n, k, arr = case results.append(can_find_three_sum(arr, k)) return results"},{"question":"Implement a function that checks whether a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Example str = \\"A man, a plan, a canal, Panama\\" Return true. Function Description Complete the isPalindrome function in the editor below. isPalindrome has the following parameter: string str: the string to be checked. Returns - bool: true if the string is a palindrome, false otherwise. Constraints - The string length will not exceed 1000 characters. Sample Input str = \\"racecar\\" Sample Output true Explanation \'racecar\' reads the same forward and backward. Sample Input str = \\"hello\\" Sample Output false Explanation \'hello\' does not read the same forward and backward.","solution":"import re def isPalindrome(str): Returns true if the input string is a palindrome, false otherwise. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). # Removing non-alphanumeric characters and converting to lowercase cleaned_str = re.sub(r\'[^A-Za-z0-9]\', \'\', str).lower() # Checking if the cleaned string is the same forwards and backwards return cleaned_str == cleaned_str[::-1]"},{"question":"Given a binary tree, implement a function to return the sum of all nodes at the minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node. Input: The function takes in one argument: address of the root node of a binary tree. The function should not read any input from stdin/console. The struct Node has a data part which stores the data and two pointers, left and right, which point to the left and right children respectively. There are multiple test cases. For each test case, this method will be called individually. Output: Return an integer which is the sum of all nodes at the minimum depth. User Task: The task is to complete the function minDepthSum() which accepts the address of the root node and returns the sum of all nodes at the minimum depth. Constraints: 1 <= T <= 100 1 <= Number of nodes in the tree <= 200 1 <= Node value <= 1000 Example: Input: 2 1 2 3 1 2 3 4 Output: 5 3 Explanation: Testcase 1: The binary tree is: 1 / 2 3 The minimum depth is 2, and the nodes at this depth are 2 and 3. So, the sum is 5. Testcase 2: The binary tree is: 1 / 2 3 / 4 The minimum depth is 2, and the nodes at this depth are 2 and 3. So, the sum is 3.","solution":"class Node: A Node structure to represent a node in a binary tree. def __init__(self, data): self.data = data self.left = None self.right = None def minDepthSum(root): Finds the sum of all nodes at minimum depth in a binary tree. if not root: return 0 from collections import deque # Level order traversal using a queue queue = deque([(root, 1)]) current_level = 0 level_sum = 0 while queue: node, level = queue.popleft() if node.left is None and node.right is None: # If it\'s the first time reaching this depth, reset the sum if current_level == 0: current_level = level level_sum = node.data # If at the current minimum depth, accumulate the sum elif current_level == level: level_sum += node.data # If a lesser depth than has been seen, we can break early else: break if node.left: queue.append((node.left, level + 1)) if node.right: queue.append((node.right, level + 1)) return level_sum"},{"question":"# Develop a function to determine the frequency of each letter in a string and identify the k most common letters. You are given a string consisting of lowercase English letters. Your task is to count the frequency of each letter in the string and then determine the k most common letters. In case of a tie, letters should be sorted alphabetically. The input starts with a line indicating the number of test cases T (1 ≤ T ≤ 10). Each of the following T lines contains a string s (1 ≤ |s| ≤ 100 000) and an integer k (1 ≤ k ≤ 26). For each test case, output the k most common letters in the format \\"letter: frequency\\". The letters should be listed in descending order of frequency. If multiple letters have the same frequency, they should be listed in alphabetical order. # Input - The first line contains an integer T, the number of test cases. - Each of the next T lines contain a string s and an integer k separated by a space. # Output - For each test case, output the k most common letters in descending order of frequency. Each letter is followed by its frequency and a colon. # Example Input ``` 2 apple 2 banana 3 ``` Output ``` p: 2 a: 1 a: 3 n: 2 b: 1 ``` # Note - In the first test case, \\"apple\\", the letter frequencies are: a: 1, e: 1, l: 1, p: 2. The two most common letters are \'p\' with frequency 2 and \'a\' with frequency 1. - In the second test case, \\"banana\\", the letter frequencies are: a: 3, b: 1, n: 2. The three most common letters are \'a\' with frequency 3, \'n\' with frequency 2, and \'b\' with frequency 1.","solution":"from collections import Counter def frequency_analysis(T, test_cases): results = [] for i in range(T): s, k = test_cases[i] k = int(k) freq = Counter(s) # Sort by frequency first (descending), then alphabetically sorted_freq = sorted(freq.items(), key=lambda item: (-item[1], item[0])) # Prepare the output for top k elements result = [] for j in range(k): letter, count = sorted_freq[j] result.append(f\\"{letter}: {count}\\") results.append(\\"n\\".join(result)) return \\"n\\".join(results)"},{"question":"You are given a city represented as a grid with n rows and m columns. Each cell in the grid can either be land or water, represented by \'L\' and \'W\' respectively. You can traverse the city by moving to adjacent cells via land horizontally or vertically (not diagonally). The city is divided into different districts where a district is defined as a maximal group of connected land cells. Two land cells belong to the same district if there is a path connecting them through adjacent land cells. Your task is to determine the number of districts in the city. -----Input----- The first line contains two integers n and m (1 le n, m le 500) denoting the number of rows and columns in the city grid. The next n lines contain m characters each, where each character is either \'L\' (land) or \'W\' (water). -----Output----- Print a single integer, the number of districts in the city. -----Examples----- Input 4 5 LWLWW LWLWL WWWLL LWLLW Output 4 Input 3 3 LLL LWL LLL Output 1","solution":"def count_districts(n, m, grid): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'W\' or visited[x][y]: return visited[x][y] = True directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dx, dy in directions: dfs(x+dx, y+dy) visited = [[False] * m for _ in range(n)] districts = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\' and not visited[i][j]: dfs(i, j) districts += 1 return districts # Example usage: # n = 4 # m = 5 # grid = [ # \\"LWLWW\\", # \\"LWLWL\\", # \\"WWWLL\\", # \\"LWLLW\\" # ] # print(count_districts(n, m, grid)) # Output: 4"},{"question":"Given an integer array `nums` and an integer `target`, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle. A triplet is valid if it satisfies the condition: `a + b > c`, `a + c > b`, and `b + c > a`. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - For each test case: - The first line contains two integers `n` and `target` — the size of the array and the target value. - The second line contains `n` space-separated integers representing the elements of the array `nums`. ------ Output Format ------ For each test case, output a single integer — the number of valid triplets. ------ Constraints ------ 1 leq T leq 100 3 leq n leq 1000 1 leq nums[i] leq 1000 ------ Sample Input 1 ------ 2 4 7 2 2 3 4 5 10 1 2 3 4 5 ------ Sample Output 1 ------ 3 3 ------ Explanation ------ Test case 1: There are three triplets which can form a triangle. (2, 3, 4), (2, 3, 4), and (2, 2, 3). Test case 2: There are three triplets which can form a triangle. (2, 3, 4), (3, 4, 5), and (1, 4, 5).","solution":"def count_valid_triplets(nums): Count the number of valid triplets that can form a triangle. nums.sort() n = len(nums) count = 0 for i in range(n-2): k = i + 2 for j in range(i+1, n-1): while (k < n and nums[i] + nums[j] > nums[k]): k += 1 count += k - j - 1 return count def count_triangles(test_cases): results = [] for n, target, nums in test_cases: results.append(count_valid_triplets(nums)) return results # Parsing input and output def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n, target = map(int, lines[index].split()) nums = list(map(int, lines[index+1].split())) index += 2 test_cases.append((n, target, nums)) return test_cases def format_output(results): return \'n\'.join(map(str, results))"},{"question":"Eve is a talented coder who loves tinkering with arrays. She\'s currently working on a problem related to rotated sorted arrays and pivot points. Specifically, she\'s interested in finding the smallest element in a rotated sorted array which may include duplicate elements. A rotated sorted array is an array sorted in ascending order, then rotated at some pivot point (unknown to you). Your task is to help Eve by writing a function that finds the smallest element in such an array. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers separated by spaces, representing the rotated sorted array. Each element of the array will be between -1000 and 1000, inclusive. -----Output----- Print a single integer — the smallest element in the array. -----Examples----- Input 7 4 5 6 7 0 1 2 Output 0 Input 5 2 2 2 0 1 Output 0 Input 6 1 1 1 1 1 1 Output 1 Input 4 1 3 3 1 Output 1 -----Note----- In the first example, the original array [0, 1, 2, 4, 5, 6, 7] was rotated at index 3, which makes 0 the smallest element. In the second example, the array [0, 1, 2, 2, 2] was rotated at index 2, making 0 the smallest element. Even with duplicate elements, the function should correctly identify the smallest one. In the third example, the array is already sorted and not rotated, so the smallest element is 1. In the fourth example, the array [1, 1, 3, 3] was rotated at index 1, making 1 the smallest element.","solution":"def find_min_in_rotated_sorted_array(arr): Returns the smallest element in a rotated sorted array. # Initialize the left and right pointers left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] > arr[right]: left = mid + 1 elif arr[mid] < arr[right]: right = mid else: # When arr[mid] == arr[right], we can\'t decide the smallest is in the left half or right half. # So we just decrement right to make the array smaller and narrow down. right -= 1 return arr[left]"},{"question":"Two wizards are playing a game with a string of lowercase English letters. They take turns in removing and counting vowels from the string. The game continues until there are no vowels left in the string. The wizard who cannot make a move (because the string has no vowels left) loses the game. Given the string, determine who has a winning strategy if both play optimally, and it\'s Player 1\'s turn to start. -----Input----- - A single string S of lowercase English letters. -----Output----- - Print \\"Player 1\\" if the first player to move wins, otherwise print \\"Player 2\\". -----Constraints----- - 1 leq |S| leq 10^5 -----Note----- It\'s guaranteed that the string always contains at least one vowel. -----Example----- -----Sample Input:----- abracadabra -----Sample Output:----- Player 1 -----Explanation----- - In the string \\"abracadabra\\", the vowels are \'a\', \'a\', \'a\', \'a\', \'a\'. Player 1 removes the first \'a\', Player 2 removes the next \'a\', and so on. The last \'a\' will be removed by Player 1, leaving no vowels for Player 2, hence Player 1 wins.","solution":"def find_winner(s): Determines the game winner based on who removes the last vowel. Args: s (str): the input string of lowercase English letters. Returns: str: \\"Player 1\\" if the first player to move wins, otherwise \\"Player 2\\". vowels = set(\'aeiou\') vowel_count = sum(1 for c in s if c in vowels) return \\"Player 1\\" if vowel_count % 2 != 0 else \\"Player 2\\""},{"question":"Given an array arr[ ] of N elements, your task is to find the maximum number of elements you can make equal by performing increment operations. In one operation, you can select any one element and increment it by 1. Example 1: Input: N = 4 arr[] = {1, 2, 2, 5} Output: 3 Explanation: You can increase arr[0] twice to make it 3, and arr[1] once to make it 3. The resulting array is {3, 3, 2, 5} and you have 3 elements that are the same. Example 2: Input: N = 5 arr[] = {1, 2, 1, 2, 2} Output: 4 Explanation: You can increase arr[0] and arr[2] twice each to make them 3. The resulting array is {3, 2, 3, 2, 2} and you have 4 elements that are the same. Your Task: You don\'t need to read input or print anything. Complete the function maxEqualElements() which takes an array arr[ ] and its size N as input parameters and returns the maximum number of elements that can be made equal by performing any number of increment operations. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^9","solution":"def maxEqualElements(arr, N): Returns the maximum number of elements that can be made equal by performing increment operations. Parameters: arr (list of int): The input array of integers. N (int): The size of the array. Returns: int: The maximum number of elements that can be made equal. # Dictionary to count frequency of each element in the array count = {} for num in arr: if num in count: count[num] += 1 else: count[num] = 1 # Find the maximum frequency from the dictionary max_frequency = max(count.values()) return max_frequency"},{"question":"You are given a sequence of positive integers and a set of queries. Each query asks for the sum of the integers within a specified range of indices in the sequence. Your task is to write a program that answers each query efficiently. Input The input consists of multiple datasets. Each dataset is formatted as follows: ``` n q a1 a2 ... an l1 r1 l2 r2 : lq rq ``` The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 100,000), where `n` is the number of integers in the sequence, and `q` is the number of queries. The second line contains `n` positive integers `a1, a2, ..., an`, which represent the sequence. Each of the following `q` lines contains two integers `li` and `ri` (1 ≤ li ≤ ri ≤ n), representing the range of indices for the i-th query. The input is terminated by a single line containing `0 0`. Output For each dataset, output a line containing the sum of the integers within the range specified by each query. The results should be printed in the same order as the queries are given. Example Input ``` 5 3 1 2 3 4 5 1 3 2 4 1 5 7 2 2 4 6 8 10 12 14 1 3 4 7 0 0 ``` Output ``` 6 9 15 12 44 ```","solution":"def process_queries(n, q, sequence, queries): This function processes the queries on the given sequence to get the sum of elements in the specified ranges. Arguments: n -- the number of integers in the sequence q -- the number of queries sequence -- the list of integers queries -- the list of tuples (li, ri) representing the range queries Returns: A list of integers representing the sum of the elements in the specified ranges for each query. # Precompute the prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + sequence[i - 1] # Process each query and compute the required sum using prefix sums result = [] for l, r in queries: result.append(prefix_sums[r] - prefix_sums[l - 1]) return result"},{"question":"Consider a tree with N nodes, each uniquely labeled from 1 to N. A tree is defined as an acyclic connected graph. You are given the tree in the form of an adjacency list, where each node is associated with a list of its neighboring nodes. Create a program that can determine the maximum number of nodes that can be visited starting from any node under the constraint that no two consecutive visited nodes are direct neighbors (i.e., adjacent) in the tree structure. Input Format The first line contains an integer N, the number of nodes in the tree. The next N-1 lines each contain two integers, u and v, indicating that node u is connected to node v by an edge. Output Format Print a single integer, the maximum number of nodes that can be visited under the given constraint. Constraints 1 ≤ N ≤ 10^5 Sample Input 1 5 1 2 1 3 3 4 3 5 Sample Output 1 3 Explanation For the given tree structure, one possible way to visit the maximum number of nodes while ensuring that no two consecutive visited nodes are direct neighbors is to visit nodes 1, 4, and 5. Sample Input 2 4 1 2 2 3 3 4 Sample Output 2 2 Explanation For the given tree structure, one possible way to visit the maximum number of nodes while ensuring that no two consecutive visited nodes are direct neighbors is to visit nodes 1 and 3 또는 노드를 2와 4를 방문할 수도 있습니다. Note: Ensure the solution can handle the upper limit of constraints efficiently.","solution":"def dfs(node, parent, adj, dp): # Current node is either included or excluded in the independent set included, excluded = 1, 0 for child in adj[node]: if child != parent: child_included, child_excluded = dfs(child, node, adj, dp) included += child_excluded # If current node is included, child nodes cannot be included excluded += max(child_included, child_excluded) # If current node is excluded, we can pick the best of child included/excluded # Store the result in dp array for current node dp[node] = (included, excluded) return dp[node] def max_independent_set(N, edges): if N == 1: return 1 adj = [[] for _ in range(N + 1)] for u, v in edges: adj[u].append(v) adj[v].append(u) dp = [(-1, -1)] * (N + 1) # Start DFS from node 1 since tree is connected and node labels start from 1 dfs(1, -1, adj, dp) # The answer will be the maximum of including or excluding the root node return max(dp[1]) # Sample usage with provided input sets print(max_independent_set(5, [(1, 2), (1, 3), (3, 4), (3, 5)])) # Output: 3 print(max_independent_set(4, [(1, 2), (2, 3), (3, 4)])) # Output: 2"},{"question":"# Task: Write a function `diamond` that generates a diamond-shaped pattern of asterisks (`*`) for a given positive odd integer `n`. The function should return the pattern as a single string with each line separated by a newline character (`n`). The `n` parameter indicates the number of rows in the widest part of the diamond. Rules/Note: * If `n` is not a positive odd integer, return an empty string (`\\"\\"`). * The function should handle input values up to and including 101. * The diamond shape should be symmetric both vertically and horizontally. # Examples: diamond(5): ``` * *** ***** *** * ``` diamond(7): ``` * *** ***** ******* ***** *** * ``` diamond(9): ``` * *** ***** ******* ********* ******* ***** *** * ``` diamond(0): ``` \\"\\" ``` diamond(2): ``` \\"\\" ``` diamond(13): ``` * *** ***** ******* ********* *********** ************* *********** ********* ******* ***** *** * ```","solution":"def diamond(n): Generates a diamond-shaped pattern of asterisks (*) for a given positive odd integer n. If n is not a positive odd integer, returns an empty string. if not isinstance(n, int) or n < 1 or n % 2 == 0: return \\"\\" lines = [] for i in range(n): stars = \'*\' * (2 * i + 1) if i <= n // 2 else \'*\' * (2 * (n - i) - 1) spaces = \' \' * ((n - len(stars)) // 2) lines.append(spaces + stars) return \'n\'.join(lines)"},{"question":"Nicole loves collecting rare pairs of sneakers from around the world. She maintains a detailed record of her sneaker collection, including the brand, model name, and the year she acquired them. Sometimes, Nicole wants to remember her sneakers by the sequence in which she acquired each model of that brand, but she finds it difficult to recall the exact year she got them. Can you help Nicole by writing a program that, given the records of her entire sneaker collection and some queries, returns the year she acquired her k-th pair of a particular model of a designated brand? -----Input----- The input consists of: - one line with one integer n (1 leq n leq 10^5), the number of sneakers Nicole has collected; - n lines each containing the name b (1 leq |b| leq 20) of a brand, the name m (1 leq |m| leq 30) of a model, and an integer y (1 leq y leq 10^6) representing the year Nicole acquired the pair of brand b and model m; - one line with one integer q (1 leq q leq 10^5), the number of queries; - q lines each containing the name b of a brand, the name m of a model, and an integer k representing a query for the k-th sneaker Nicole acquired of that model from that brand. Each brand name and model name only consists of letters from the English alphabet and spaces. It is also guaranteed that, for each query asking for the k-th sneaker of model m from brand b, k is at least 1 and no greater than the number of times Nicole acquired that sneaker model from the brand b. In particular, it is guaranteed that Nicole has acquired at least one pair of each queried model of a given brand. -----Output----- For each query for the k-th sneaker Nicole acquired of model m from brand b, output a single line containing the year in which Nicole acquired that sneaker. -----Examples----- Sample Input: 5 Nike AirMax 2019 Adidas Ultraboost 2020 Nike AirMax 2021 Adidas Ultraboost 2018 Nike Revolution 2022 4 Nike AirMax 1 Adidas Ultraboost 2 Nike Revolution 1 Nike AirMax 2 Sample Output: 2019 2018 2022 2021","solution":"def get_acquisition_years(sneakers, queries): Function to return the acquisition years based on the brand, model, and sequence given in the queries. :param sneakers: List of tuples [(brand, model, year), ...] keeping visitation order :param queries: List of queries [(brand, model, k), ...] :return: List of years for each query from collections import defaultdict d = defaultdict(list) # Fill the dictionary with models and their acquisition years for brand, model, year in sneakers: d[(brand, model)].append(year) results = [] for brand, model, k in queries: # Get the k-th acquisition year results.append(d[(brand, model)][k-1]) return results # Parse the input def parse_input(input_string): input_lines = input_string.strip().split(\'n\') n = int(input_lines[0]) index = 1 sneakers = [] for _ in range(n): sneakers.append(tuple(input_lines[index].split(maxsplit=2))) sneakers[-1] = (sneakers[-1][0], sneakers[-1][1], int(sneakers[-1][2])) index += 1 q = int(input_lines[index]) index += 1 queries = [] for _ in range(q): brand, model, k = input_lines[index].rsplit(maxsplit=2) k = int(k) queries.append((brand, model, k)) index += 1 return sneakers, queries"},{"question":"Write a function, `convertTemperature`, that converts a given temperature from Celsius to Fahrenheit or from Fahrenheit to Celsius based on an input string. The function should accept two parameters: - `temp`: a string representing the temperature to be converted, which includes the numerical value followed by the unit (\'C\' for Celsius, \'F\' for Fahrenheit), e.g., \\"21C\\", \\"70F\\". - `targetUnit`: a string representing the target unit to convert to, either \'C\' or \'F\'. The function should return a string representing the converted temperature rounded to the nearest whole number, followed by the target unit. Examples: - `convertTemperature(\\"21C\\", \\"F\\")` should return \\"70F\\". - `convertTemperature(\\"70F\\", \\"C\\")` should return \\"21C\\". Assume that temperature inputs will always be valid strings in the format described above.","solution":"def convertTemperature(temp, targetUnit): Converts a given temperature from Celsius to Fahrenheit or from Fahrenheit to Celsius. Parameters: temp (str): The temperature to be converted, which includes the numerical value followed by the unit (\'C\' for Celsius, \'F\' for Fahrenheit). targetUnit (str): The target unit to convert to, either \'C\' or \'F\'. Returns: str: The converted temperature rounded to the nearest whole number, followed by the target unit. value = int(temp[:-1]) unit = temp[-1] if unit == \'C\' and targetUnit == \'F\': converted_value = round((value * 9/5) + 32) elif unit == \'F\' and targetUnit == \'C\': converted_value = round((value - 32) * 5/9) else: raise ValueError(\\"Invalid unit conversion combination\\") return f\\"{converted_value}{targetUnit}\\""},{"question":"Given a binary tree, connect nodes that are on the same level from left to right. Each level should be connected as a singly linked list. Example 1: Input: 1 / 2 3 / / 4 5 6 7 Output: Levels connected as linked lists: Level 1: 1 Level 2: 2 -> 3 Level 3: 4 -> 5 -> 6 -> 7 Example 2: Input: 10 / 5 20 / 3 30 Output: Levels connected as linked lists: Level 1: 10 Level 2: 5 -> 20 Level 3: 3 -> 30 Your Task: The task is to create a function `connectLevels()` which takes the root of the binary tree as input, and modifies the tree\'s nodes such that each node points to its next right node on the same level. Return the root of the modified tree. The printing is done by the driver code. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ number of nodes in the binary tree ≤ 1000 1 ≤ value of each node ≤ 1000 Note: The last node at each level should point to None.","solution":"class TreeLinkNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right self.next = None def connectLevels(root): if not root: return None # Initialize the current level with the root node current_level = [root] while current_level: next_level = [] for i in range(len(current_level)): if i < len(current_level) - 1: current_level[i].next = current_level[i + 1] if current_level[i].left: next_level.append(current_level[i].left) if current_level[i].right: next_level.append(current_level[i].right) current_level = next_level return root"},{"question":"You are given a grid of size ( H times W ) where each cell contains a single lowercase English letter. You need to find the length of the longest path in the grid that visits each cell at most once and forms a valid word from a given dictionary. A path in the grid is a sequence of consecutive cells where each cell shares an edge with the next one (i.e., moving to the right, left, up, or down). Given a dictionary of valid words, you need to determine the length of the longest path that forms a word found in the dictionary. # Input The input consists of several lines: 1. The first line contains two integers ( H ) and ( W ) (( 1 leq H, W leq 20 )), representing the height and width of the grid, respectively. 2. The next ( H ) lines each contain ( W ) lowercase English letters representing the grid. 3. The next line contains an integer ( N ) (( 1 leq N leq 1000 )), representing the number of words in the dictionary. 4. The following ( N ) lines each contain a single valid word. # Output Output a single integer - the length of the longest path that forms a word from the dictionary. If no such path exists, output `0`. # Example **Input:** ``` 3 3 aaa aba aaa 4 aaa aba aaaa abaa ``` **Output:** ``` 4 ``` **Explanation:** The longest valid word from the dictionary that can be formed is \\"abaa\\" by following the path: (1,1) -> (1,2) -> (2,2) -> (3,2) # Constraints - The length of any word in the dictionary is at most ( H times W ). - Each word consists of only lowercase English letters. # Note There may be multiple paths that form the same word, but only consider the longest one in terms of the number of cells visited. All words in the dictionary must be distinct.","solution":"def longest_valid_path_length(H, W, grid, N, dictionary): def is_valid(x, y): return 0 <= x < H and 0 <= y < W and not visited[x][y] def dfs(x, y, word): longest = 0 if word in word_set: longest = len(word) # Four possible movements: right, left, down, up for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]: nx, ny = x + dx, y + dy if is_valid(nx, ny): visited[nx][ny] = True longest = max(longest, dfs(nx, ny, word + grid[nx][ny])) visited[nx][ny] = False return longest word_set = set(dictionary) max_length = 0 visited = [[False] * W for _ in range(H)] for i in range(H): for j in range(W): visited[i][j] = True max_length = max(max_length, dfs(i, j, grid[i][j])) visited[i][j] = False return max_length"},{"question":"Mario is programming a robot to move around a grid. The grid is represented by a series of commands that the robot follows. Each command instructs the robot to move in one of the four cardinal directions (\\"N\\", \\"E\\", \\"S\\", \\"W\\") for a specific number of steps. Each command is independent and follows the format where the letter indicates the direction and the number immediately following indicates the steps. For example, \\"N5\\" means move 5 steps to the North. The robot starts at the origin point (0, 0) and follows each command sequentially. Write a program that takes a series of commands and computes the robot\'s final position. Input The first line contains an integer m (1 ≤ m ≤ 100) — the number of commands. Each of the next m lines contains a command in the format [Direction][Steps] with the direction being one of \\"N\\", \\"E\\", \\"S\\", \\"W\\" and steps being a positive integer (1 ≤ Steps ≤ 100). Output Output the final coordinates of the robot (x, y). SAMPLE INPUT 4 N5 E10 S3 W2 SAMPLE OUTPUT (8, 2) Explanation In the sample test case, the robot moves: - 5 steps to the North, resulting in position (0, 5) - 10 steps to the East, resulting in position (10, 5) - 3 steps to the South, resulting in position (10, 2) - 2 steps to the West, resulting in position (8, 2) Thus, the robot\'s final coordinates are (8, 2).","solution":"def final_position(commands): x, y = 0, 0 for command in commands: direction = command[0] steps = int(command[1:]) if direction == \\"N\\": y += steps elif direction == \\"E\\": x += steps elif direction == \\"S\\": y -= steps elif direction == \\"W\\": x -= steps return (x, y)"},{"question":"You are a biologist studying the population growth of a particular species of bacteria in a lab environment. The bacteria population doubles every hour and you are given the initial population size. Your task is to determine the population size at a specific future time. **-----Input-----** The input consists of two integers: - The initial population size p (1 le p le 10^6) - The number of hours h (0 le h le 100) **-----Output-----** Output a single integer representing the population size after h hours. **-----Example----- Input 10 3 Output 80 **-----Explanation----- In the above example, the initial population size p is 10, and the number of hours h is 3. Since the bacteria population doubles every hour, the population size after 3 hours becomes 10 * 2^3 = 10 * 8 = 80.","solution":"def population_size(p, h): Calculates the population size after h hours. Args: p (int): Initial population size (1 <= p <= 10^6) h (int): Number of hours (0 <= h <= 100) Returns: int: Population size after h hours return p * (2 ** h)"},{"question":"Complete the function that takes a list of integers and returns another list containing the square of each integer, but only include the squares that are even numbers. **Notes:** * Negative integers should be handled appropriately. * The function should be efficient to handle large lists. Examples ``` [1, 2, 3, 4, 5] --> [4, 16] [-1, -2, -3, -4, -5] --> [4, 16] [0, 3, 6, 9, 12] --> [0, 36, 144] [11, 13, 17, 19] --> [] [2, -4, 6, -8, 10] --> [4, 16, 36, 64, 100] ```","solution":"def even_squares(lst): Returns a list containing the squares of the even integers from the input list. return [x**2 for x in lst if (x**2) % 2 == 0]"},{"question":"Bob the Astronomer is studying a galaxy represented by a string of length n. The galaxy string only consists of characters \\"*\\" and \\"-\\". Each \\"*\\" represents a star, and each \\"-\\" represents an empty space. Bob is interested in the biggest cluster of adjacent stars in various segments of the galaxy. Bob needs to answer q questions about the galaxy. Each query is represented by two integers l_{i} and r_{i} (1 ≤ l_{i} ≤ r_{i} ≤ n), which represent the starting and ending positions in the galaxy string (both inclusive). The answer to each query is the length of the longest contiguous segment of stars in the substring s[l_{i} : r_{i}]. Help Bob determine the answers to all his queries. ---Input--- The first line contains a string s of length n (1 ≤ n ≤ 10^5). It is guaranteed that the given string only consists of characters \\"*\\" and \\"-\\". The second line contains integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the next q lines contains the description of the query as two integers l_{i} and r_{i} (1 ≤ l_{i} ≤ r_{i} ≤ n). ---Output--- Print q integers — the answers to the queries in the order they are given in the input. ---Examples--- Input *--**-*- 3 1 4 3 7 1 8 Output 1 2 2 Input ***--*** 2 1 3 5 8 Output 3 3","solution":"def get_longest_star_segment(s, queries): Returns the length of the longest contiguous segment of stars for each query in the list of queries. Parameters: s (str): A string representing the galaxy. queries (list of tuples): A list of tuples where each tuple contains two integers (l, r) representing the query range. Returns: list of int: A list of integers representing the answer to each query. results = [] for l, r in queries: substring = s[l-1:r] # Obtain the substring based on the query range max_stars = 0 current_stars = 0 for char in substring: if char == \'*\': current_stars += 1 max_stars = max(max_stars, current_stars) else: current_stars = 0 results.append(max_stars) return results"},{"question":"Given a string containing various characters, you are required to produce a new string where each character is replaced by the next character in the English alphabet. If a character is \'z\' or \'Z\', it should wrap around to \'a\' or \'A\' respectively. Example 1: Input: s = \\"abcdef\\" Output: \\"bcdefg\\" Explanation: Each character is replaced by its next character in the alphabet. Example 2: Input: s = \\"AzBY\\" Output: \\"BaCZ\\" Explanation: \'A\' is replaced by \'B\', \'z\' by \'a\', \'B\' by \'C\', and \'Y\' by \'Z\'. Your Task: You don\'t need to read input or print anything. Your task is to complete the function transformString() which takes a string \'s\' as input and returns the transformed string. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= |s| <= 1000 The string will contain only alphabetic characters.","solution":"def transformString(s): Transforms the input string such that each character is replaced by the next character in the English alphabet. \'z\' wraps around to \'a\' and \'Z\' to \'A\'. def next_char(c): if c == \'z\': return \'a\' elif c == \'Z\': return \'A\' else: return chr(ord(c) + 1) return \'\'.join(next_char(c) for c in s)"},{"question":"Given a string s, your task is to determine if the given string is a valid IPv4 address or not. An IPv4 address consists of four numbers (each between 0 and 255) separated by periods. Leading zeros are not allowed unless the number is exactly \'0\'. For example, \\"192.168.1.1\\" and \\"10.0.0.1\\" are valid IPv4 addresses but \\"256.256.256.256\\" and \\"192.168.01.1\\" are not valid IPv4 addresses. Example 1: Input: s = \\"192.168.1.1\\" Output: true Explanation: 192, 168, 1, and 1 are all in the range 0 to 255 and there are no leading zeros. Example 2: Input: s = \\"192.168.01.1\\" Output: false Explanation: 01 has a leading zero. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isValidIPv4() which takes the string s as a parameter and returns a boolean value indicating whether the given string is a valid IPv4 address or not. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= s.length <= 15 s contains only digits and periods.","solution":"def isValidIPv4(s): Returns True if the string s is a valid IPv4 address, else returns False. parts = s.split(\'.\') if len(parts) != 4: return False for part in parts: if not part.isdigit() or (part[0] == \'0\' and len(part) > 1) or not (0 <= int(part) <= 255): return False return True"},{"question":"A team of archaeologists has discovered a list of ancient scrolls. Each scroll is marked with a unique serial number and a description of the civilization it originated from. The team wants to categorize these scrolls based on their civilizations and then determine the number of scrolls in each category. They need your help to automate this categorization process and find the counts effectively. You are given a list of scrolls, each with a serial number and a civilization string. Your task is to write a program that categorizes the scrolls by their civilizations and prints the number of scrolls for each civilization in alphabetical order of civilization names. Input: The input consists of multiple test cases. Each test case starts with an integer N (1 ≤ N ≤ 100), which denotes the number of scrolls. The following N lines each contain a serial number (an integer) and a civilization string, separated by a space. The input is terminated by a line containing a single zero. Output: For each test case, output the civilization name followed by the number of scrolls belonging to that civilization. The output for each test case should list civilizations in alphabetical order. Example: Input: 3 101 Mesopotamia 102 Egypt 103 Egypt 4 201 Greece 202 Mesopotamia 203 Greece 204 Egypt 0 Output: Egypt 2 Mesopotamia 1 Egypt 1 Greece 2 Mesopotamia 1 Note: In the first test case, there are 3 scrolls, with one from \\"Mesopotamia\\" and two from \\"Egypt\\". In the second test case, there are 4 scrolls, with one from \\"Mesopotamia\\", one from \\"Egypt\\", and two from \\"Greece\\".","solution":"def categorize_scrolls(test_cases): result = [] for t in test_cases: scroll_count = {} for serial, civilization in t: if civilization in scroll_count: scroll_count[civilization] += 1 else: scroll_count[civilization] = 1 for civilization in sorted(scroll_count): result.append(f\\"{civilization} {scroll_count[civilization]}\\") return result def parse_input(input_string): lines = input_string.strip().split(\'n\') test_cases = [] idx = 0 while idx < len(lines): n = int(lines[idx]) if n == 0: break idx += 1 test_case = [] for _ in range(n): serial, civilization = lines[idx].split(maxsplit=1) test_case.append((int(serial), civilization)) idx += 1 test_cases.append(test_case) return test_cases"},{"question":"Nina is passionate about solving puzzles, and today she has come across an intriguing one involving even subsequences. Given an array of N integers, she wants to find the length of the longest subsequence that consists only of even numbers. Input: The first line contains an integer t, denoting t test cases. The next 2*t lines follow. The first line of each test case contains an integer N, the size of the array. The second line of each test case contains N space-separated integers denoting the elements of the array. Output: For each test case, print a single integer - the length of the longest subsequence that consists only of even numbers. Constraints: 1 ≤ t ≤ 10 1 ≤ N ≤ 10^5 1 ≤ a[i] ≤ 10^9 SAMPLE INPUT 2 6 1 2 4 6 5 7 4 9 11 13 15 SAMPLE OUTPUT 3 0 Explanation: In the first test case, the even numbers are 2, 4, and 6. Hence the length of the longest even subsequence is 3. In the second test case, there are no even numbers, so the length of the longest even subsequence is 0.","solution":"def longest_even_subsequence_length(t, test_cases): results = [] for case in test_cases: N, arr = case max_length = 0 current_length = 0 for num in arr: if num % 2 == 0: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 results.append(max_length) return results # Example Usage t = 2 test_cases = [ (6, [1, 2, 4, 6, 5, 7]), (4, [9, 11, 13, 15]) ] print(longest_even_subsequence_length(t, test_cases))"},{"question":"Given two arrays A=[a_0,a_1,...,a_{n-1}] and B=[b_0,b_1,...,b_{n-1}] of n integers, perform textit{q} queries of the following type: For each query, concatenate the arrays A and B to form a new array C=[a_0,a_1,...,a_{n-1},b_0,b_1,...,b_{n-1}], and find the maximum element in the subsegment c_{l_i},c_{l_i+1},ldots,c_{r_i}. Given mbox{A} and mbox{B}, can you print the maximum value found for each query? Input Format The first line contains two positive space-separated integers describing the respective values of n (the number of integers in mbox{A} and mbox{B}) and textit{q} (the number of queries). The next line contains n space-separated integers describing the respective values of a_0,a_1,ldots,a_{n-1}. The following line contains n space-separated integers describing the respective values of b_0,b_1,ldots,b_{n-1}. Each line j of the textit{q} subsequent lines contains two space-separated integers describing the respective l_{j} and r_j values for query j. Constraints 1leq n,qleq75000 -10^9leq a_i, b_ileq10^9 0leq l_ileq r_i<2n Output Format For each query, print a single integer denoting the maximum value in the specified subsegment of the concatenated array C. Sample Input 0 3 2 4 3 5 1 2 7 1 4 0 5 Sample Output 0 5 7 Explanation 0 A=[4,3,5] and B=[1,2,7], concatenate to form C=[4,3,5,1,2,7]. For the first query, the subsegment is c_{1} text{ to } c_{4}, which is [3,5,1,2], the maximum element is 5. For the second query, the subsegment is c_{0} text{ to } c_{5}, which is [4,3,5,1,2,7], the maximum element is 7.","solution":"def find_max_in_queries(n, q, A, B, queries): # Concatenate A and B to form the array C C = A + B # Process each query and find the maximum in the specified subsegment results = [] for l, r in queries: max_value = max(C[l:r+1]) results.append(max_value) return results"},{"question":"Given an integer array of size n, you need to find the maximum product of any subset of its elements excluding the empty subset. Example 1: Input: arr = [1, 2, 3] Output: 6 Explanation: Maximum product subset is [1, 2, 3] which gives the product 1*2*3 = 6 Example 2: Input: arr = [-1, -1, -2, 4, 3] Output: 24 Explanation: Maximum product subset is [-1, -1, 4, 3] which gives the product (-1)*(-1)*4*3 = 24 Example 3: Input: arr = [-1, 0] Output: 0 Explanation: Maximum product subset is [0] which gives the product 0 Your Task: You do not need to read input or print anything. Your task is to complete the function maxProductSubset() which takes the array arr and its size n as input parameters and returns the maximum product of any subset (excluding the empty subset). Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 100000 -1000 ≤ arr[i] ≤ 1000","solution":"def maxProductSubset(arr, n): if n == 1: return arr[0] max_neg = float(\'-inf\') count_neg = count_zero = 0 product = 1 for i in range(n): if arr[i] == 0: count_zero += 1 continue if arr[i] < 0: count_neg += 1 max_neg = max(max_neg, arr[i]) product *= arr[i] if count_zero == n: return 0 if count_neg % 2 != 0: if count_neg == 1 and count_zero > 0 and count_zero + count_neg == n: return 0 product //= max_neg return product"},{"question":"You are given a binary tree and your task is to determine the width of the tree. The width of a binary tree is defined as the maximum breadth, where breadth is the number of nodes in any level of the binary tree. For example, the breadth of a binary tree with nodes structured like this: ``` 1 / 2 3 / / 4 5 6 7 / 8 ``` is 4, because the level containing nodes 4, 5, 6, and 7 has four nodes. A binary tree is represented as an array where the root element is at index 1, the left child of the node at index `i` is at index `2*i` and the right child is at index `2*i + 1`. Nodes without children are represented by `-1`. Given the input of such an array, write a function to find and return the width of the binary tree. Input Format: - A space-separated list of integers representing the binary tree. Constraints: - The input array will have at least 1 element and at most 100 elements. - Each element of the array will be an integer between `-1` and `1000`, inclusive. Output Format: - An integer representing the maximum width of the tree. Sample Input 0: `1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 8 -1` Sample Output 0: `4` Explanation 0: The breadth of the widest level (which contains the nodes 4, 5, 6, and 7) is 4. Sample Input 1: `1 2 -1 3 -1 -1 -1 4` Sample Output 1: `1` Explanation 1: All levels except the deepest contain only one node, so the maximum width of the tree is 1. Complete the function `maxWidth` to compute the result based on the provided input.","solution":"def maxWidth(arr): if not arr or arr[0] == -1: return 0 from collections import deque level = 0 max_width = 0 n = len(arr) queue = deque([(1, 0)]) # (index, level) while queue: current_level_size = len(queue) max_width = max(max_width, current_level_size) for _ in range(current_level_size): idx, level = queue.popleft() if 2 * idx - 1 < n and arr[2 * idx - 1] != -1: queue.append((2 * idx, level + 1)) if 2 * idx < n and arr[2 * idx] != -1: queue.append((2 * idx + 1, level + 1)) return max_width"},{"question":"A robot is placed on an MxN grid. The robot can move either up, down, left, or right, but cannot visit the same cell twice. Given two integers, X and Y, representing the grid\'s dimensions, write a program to determine the number of distinct paths the robot can take to travel from the top-left corner (0,0) to the bottom-right corner (M-1,N-1). Assume that the robot starts at the top-left corner. Constraints: * 1 ≤ M, N ≤ 10 Input Input is given from Standard Input in the following format: M N Output Output the number of distinct paths, in the following format: number_of_paths Examples Input 2 2 Output 2 Input 3 2 Output 3","solution":"def count_unique_paths(m, n): Returns the number of unique paths the robot can take to travel from the top-left corner to the bottom-right corner. # Create a 2D list to store the number of paths to reach each cell dp = [[0] * n for _ in range(m)] # There is only one way to reach the first cell (0,0) dp[0][0] = 1 # Fill the DP table for i in range(m): for j in range(n): if i > 0: dp[i][j] += dp[i-1][j] # Move from up if j > 0: dp[i][j] += dp[i][j-1] # Move from left # The bottom-right corner will have the total number of unique paths return dp[m-1][n-1] # Function for reading input and printing the result if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() m, n = int(data[0]), int(data[1]) print(count_unique_paths(m, n))"},{"question":"A number is said to be an Armstrong number if the sum of its own digits each raised to the power of the number of digits gives the number itself. For example, 153 is an Armstrong number because: (1^3 + 5^3 + 3^3 = 153). Given an integer n, return a list of all Armstrong numbers that are less than or equal to n in sorted order. Example 1: Input: n = 1000 Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407] Explanation: These numbers are all Armstrong numbers less than or equal to 1000. Example 2: Input: n = 100 Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Explanation: These numbers are all Armstrong numbers less than or equal to 100. Your Task: You do not need to read input or print anything. Your task is to implement the function `findArmstrongNumbers()` which takes an Integer n as input and returns a list of all Armstrong numbers less than or equal to n. Expected Time Complexity: O(k*d) where k is the number of digits in the longest number and d is the number of generated numbers. Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^6","solution":"def findArmstrongNumbers(n): Find all Armstrong numbers up to and including n. def is_armstrong(number): digits = list(map(int, str(number))) power = len(digits) return sum(digit ** power for digit in digits) == number return [num for num in range(n + 1) if is_armstrong(num)]"},{"question":"You are given a string s representing a positive integer. You are allowed to delete at most one character from the string. Your task is to determine the maximum possible integer value that can be obtained after deleting exactly one character from the string. If deleting one character cannot form a valid integer (non-empty string), return the original string as is. Input The input consists of a single line containing the string s, which represents a positive integer (s consists of digits only and its length (1 ≤ |s| ≤ 1,000)). Output Output a single integer which is the maximum possible value obtained after deleting exactly one character. If deleting one character cannot form a valid integer, return the original string. Examples Input 1234 Output 234 Input 1001 Output 101 Input 9 Output 9 Input 5123 Output 523 Note In the first sample, deleting \'1\' results in \'234\', which is the maximum possible integer. In the second sample, deleting the first \'0\' results in \'101\', which is greater than all other possible deletions. In the third sample, deleting the single character \'9\' would result in an empty string, hence the result remains \'9\'. In the fourth sample, deleting \'1\' results in \'523\', which is the maximum possible outcome compared to other deletions.","solution":"def max_integer_after_deleting_one_character(s): Returns the maximum possible integer value that can be obtained by deleting exactly one character from the string s. If deleting one character cannot form a valid integer, returns the original string. if len(s) == 1: return s max_value = -1 for i in range(len(s)): new_value = int(s[:i] + s[i+1:]) if new_value > max_value: max_value = new_value return str(max_value)"},{"question":"Create a function that generates a list of all prime numbers under a given number N using the Sieve of Eratosthenes algorithm and then find the sum of these prime numbers. Provide the last 4 digits of this sum. Input Format A single line containing an integer N. 2 ≤ N ≤ 10^6 Output Format The last four digits of the sum of all prime numbers less than N. Input Constraints N is a positive integer. SAMPLE INPUT 10 SAMPLE OUTPUT 017 Explanation The prime numbers less than 10 are 2, 3, 5, and 7. Their sum is 17, and the last four digits are 0017.","solution":"def sieve_of_eratosthenes(n): Implements the Sieve of Eratosthenes algorithm to find all prime numbers less than n. is_prime = [True] * n p = 2 while p * p < n: if is_prime[p]: for i in range(p * p, n, p): is_prime[i] = False p += 1 primes = [p for p in range(2, n) if is_prime[p]] return primes def sum_of_primes_last_four_digits(n): Calculates the sum of all primes less than n and returns the last four digits of the sum. primes = sieve_of_eratosthenes(n) prime_sum = sum(primes) return str(prime_sum)[-4:].zfill(4)"},{"question":"Detect if a 2D Matrix contains a target value. Write a function that takes a 2D matrix of integers, where each row of the matrix is sorted in ascending order from left to right, and each column is sorted in ascending order from top to bottom. Your function should also take a target integer value, and return `True` if the target integer is found in the matrix, and `False` otherwise. # Constraints: - The matrix will have at least 1 and at most 1000 rows. - Each row will have at least 1 and at most 1000 columns. - The integer values in the matrix and the target value will be between `-10^9` and `10^9`. # Example: ```python matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target = 5 find_target(matrix, target) should return True target = 20 find_target(matrix, target) should return False ``` # Notes: You can assume all rows have the same number of columns. Be sure to craft an efficient algorithm to handle the worst-case scenario within the given constraints.","solution":"def find_target(matrix, target): This function takes a 2D matrix of integers and a target integer value, and returns True if the target is found in the matrix, otherwise False. if not matrix or not matrix[0]: return False rows = len(matrix) cols = len(matrix[0]) # Start from the top-right corner of the matrix row = 0 col = cols - 1 while row < rows and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] > target: col -= 1 else: row += 1 return False"},{"question":"You are given a list of intervals where each interval is represented as a pair of start and end times [start, end]. Merge all overlapping intervals and return the list of merged intervals in sorted order. Example 1: Input: intervals = [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6]. Example 2: Input: intervals = [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] overlap, so merge them into [1,5]. Example 3: Input: intervals = [[1,4],[0,1]] Output: [[0,4]] Constraints: * 1 <= intervals.length <= 10^4 * intervals[i].length == 2 * 0 <= start <= end <= 10^4","solution":"def merge_intervals(intervals): if not intervals: return [] # Sort the intervals based on the start time intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: previous = merged[-1] if current[0] <= previous[1]: # Overlapping intervals, merge them merged[-1] = [previous[0], max(previous[1], current[1])] else: # Non-overlapping interval, add to the list merged.append(current) return merged"},{"question":"Given a list of non-negative integers representing the heights of vertical lines drawn on a 2-dimensional chart where the i-th vertical line is at (i, 0) to (i, height[i]). Find two lines that together with the x-axis form a container that holds the most water. Return the maximum amount of water a container can store. Example: Input: height = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The vertical lines are represented by the array [1,8,6,2,5,4,8,3,7]. In this case, the maximum amount of water a container can store (formed between the lines at index 1 and 8 with heights 8 and 7 respectively) is 49.","solution":"def max_area(height): Returns the maximum amount of water a container can store formed by the heights array. left = 0 right = len(height) - 1 max_water = 0 while left < right: width = right - left curr_height = min(height[left], height[right]) max_water = max(max_water, width * curr_height) if height[left] < height[right]: left += 1 else: right -= 1 return max_water"},{"question":"Calculate the Modified Sum INPUT: The first line contains an integer T, the number of test cases. Each test case consists of two lines. The first line contains two space-separated integers N and Y. The second line contains N space-separated integers denoted by A[i]. OUTPUT: For each test case, print the modified sum in a new line. The modified sum is calculated by: Sum of all elements of the array A which are greater than Y. CONSTRAINTS: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ Y ≤ 10^9 0 ≤ A[i] ≤ 10^9 Problem Setter: [Your Name] SAMPLE INPUT 2 4 5 1 10 15 7 3 10 10 20 5 SAMPLE OUTPUT 32 20","solution":"def modified_sum(test_cases): Returns the modified sum for each test case where the sum is the total of array elements greater than the given threshold Y. :param test_cases: List of tuples, each containing N, Y and the array A :return: List of modified sums for each test case results = [] for N, Y, A in test_cases: result = sum(x for x in A if x > Y) results.append(result) return results"},{"question":"You\'re a developer tasked with designing a monitoring system for a greenhouse. You need to create a program that will help determine if a sequence of heat readings over time indicates that the greenhouse is operating within the desired temperature range. Given a list of temperature readings and a desired range [lower_bound, upper_bound], write a function that returns whether all the temperature readings are within the given range. If any temperature reading falls outside the range, return false. Example 1: Input: readings = [23, 25, 24, 22, 26], lower_bound = 20, upper_bound = 27 Output: True Example 2: Input: readings = [19, 25, 24, 22, 26], lower_bound = 20, upper_bound = 27 Output: False Example 3: Input: readings = [20, 27], lower_bound = 20, upper_bound = 27 Output: True Note: 1. The list of readings is non-empty. 2. The lower_bound and upper_bound are inclusive. 3. The list size is in the range of [1, 10000]. 4. The temperature readings and bounds are all integers.","solution":"def are_readings_within_range(readings, lower_bound, upper_bound): Determines if all temperature readings are within the given range [lower_bound, upper_bound]. Args: readings (list of int): The list of temperature readings. lower_bound (int): The lower bound of the desired temperature range. upper_bound (int): The upper bound of the desired temperature range. Returns: bool: True if all readings are within the range, False otherwise. for reading in readings: if reading < lower_bound or reading > upper_bound: return False return True"},{"question":"**Problem Statement:** Shivam is learning about binary trees and traversal techniques. To test his understanding, his instructor gives him a binary tree and asks him to perform a unique traversal. The traversal to be performed is a combination of preorder and inorder traversal. He has to perform the following steps: - First, visit the left subtree in preorder. - Then, visit the root. - Finally, visit the right subtree in inorder. Help Shivam by writing a function that performs this traversal on a given binary tree. **Input:** - First line contains T, the number of test cases. - For each test case: - The first line contains N, the number of nodes in the binary tree. - N lines follow, each containing three integers. Each line specifies a node and its left and right children, or -1 if there is no corresponding child in the format: ``` node left_child right_child ``` - Nodes are given in level order. **Output:** - For each test case, return the traversal result as a list of integers in one new line. **Constraints:** - 1 leq T leq 10 - 1 leq N leq 10^3 - Node values are unique integers between 1 and 10^3 **Sample Input:** ``` 1 5 1 2 3 2 -1 -1 3 4 5 4 -1 -1 5 -1 -1 ``` **Sample Output:** ``` 2 1 4 3 5 ``` **Explanation:** In the example binary tree: ``` 1 / 2 3 / 4 5 ``` - Preorder left subtree: [2] - Root: [1] - Inorder right subtree: [4, 3, 5] So the traversal result is [2, 1, 4, 3, 5].","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(nodes): if not nodes: return None node_map = {val: TreeNode(val) for val, _, _ in nodes if val != -1} for parent, left, right in nodes: if parent != -1: if left != -1: node_map[parent].left = node_map[left] if right != -1: node_map[parent].right = node_map[right] return node_map[nodes[0][0]] # root node def unique_traversal(root): def preorder_left(node): if not node: return [] return [node.value] + preorder_left(node.left) def inorder_right(node): if not node: return [] return inorder_right(node.left) + [node.value] + inorder_right(node.right) if not root: return [] left_preorder = preorder_left(root.left) root_value = [root.value] right_inorder = inorder_right(root.right) return left_preorder + root_value + right_inorder def process_test_cases(test_cases): results = [] for case in test_cases: tree = build_tree(case) results.append(unique_traversal(tree)) return results def solution(T, test_cases): return process_test_cases(test_cases)"},{"question":"You are given an undirected graph with `n` vertices and `m` edges. Your task is to determine if it is possible to assign numbers from 1 to `n` to each vertex such that no two adjacent vertices have consecutive numbers. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 10^5) — the number of vertices and the number of edges in the graph. The next `m` lines describe the edges. Each edge is given by two integers `u` and `v` (1 ≤ u, v ≤ n; u ≠ v) indicating that there is an edge between vertices `u` and `v`. It is guaranteed that each pair of vertices is connected by at most one edge. Output If it is possible to assign numbers to vertices such that no two adjacent vertices have consecutive numbers, output \\"YES\\" and any such numbering on a single line. Otherwise, output \\"NO\\". Examples Input 4 3 1 2 2 3 3 4 Output YES 1 3 2 4 Input 3 3 1 2 1 3 2 3 Output NO Note In the first test case, you can see a valid numbering of the vertices is: `1 3 2 4`. Adjacent vertices (1 and 2), (2 and 3), and (3 and 4) do not have consecutive numbers. In the second test case, there is no way to assign numbers to vertices without two adjacent vertices having consecutive numbers.","solution":"def is_possible_to_number_vertices(n, m, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) colors = [-1] * n def bfs(start): queue = deque([start]) colors[start] = 1 while queue: node = queue.popleft() for neighbor in graph[node + 1]: if colors[neighbor - 1] == -1: colors[neighbor - 1] = 1 - colors[node] queue.append(neighbor - 1) elif colors[neighbor - 1] == colors[node]: return False return True for i in range(n): if colors[i] == -1: if not bfs(i): return \\"NO\\" return \\"YESn\\" + \\" \\".join(str(i + 1) if color == 1 else str(i + 2) for i, color in enumerate(colors))"},{"question":"Given a sequence of N integers, you need to find the length of the longest subsequence that is strictly increasing and consists only of prime numbers. For example, consider the sequence: 7 2 5 3 11 13 1 17 A strictly increasing subsequence composed exclusively of prime numbers is: 2 3 11 13 17. Its length is 5. -----Input format----- The first line of input contains an integer N (1 <= N <= 1000) – the number of integers in the sequence. The second line contains N integers a1, a2, ..., aN (1 <= ai <= 10^5) – the elements of the sequence. -----Output format----- The output should be a single integer, the length of the longest strictly increasing subsequence composed exclusively of prime numbers. -----Example----- Here are some sample inputs and outputs to illustrate the problem: -----Sample input 1----- 8 7 2 5 3 11 13 1 17 -----Sample output 1----- 5 -----Sample input 2----- 6 10 15 20 25 30 35 -----Sample output 2----- 0 Note: Your program should not print anything other than what is specified in the output format. Ensure to handle edge cases where there are no prime numbers in the sequence.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def longest_prime_increasing_subsequence_length(seq): Returns the length of the longest strictly increasing subsequence of prime numbers within the given sequence. primes = [x for x in seq if is_prime(x)] if not primes: return 0 n = len(primes) lis = [1] * n for i in range(1, n): for j in range(i): if primes[i] > primes[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"A username is considered valid if it meets certain criteria: the username must be between 6 and 20 characters long, can only contain letters (both uppercase and lowercase), digits, and underscores, and it must start with a letter. To test this, write a function that checks the validity of a given username. -----Input----- The input consists of a single line containing the username. -----Output----- Print \\"Valid\\" if the username meets all the criteria, otherwise print \\"Invalid\\". -----Examples----- Input John_Doe123 Output Valid Input 123John Output Invalid Input john Output Invalid Input JohnDoe_ Output Valid Input _thisUsername1IsWayTooLongToBeValid Output Invalid","solution":"import re def validate_username(username): Validates if the given username meets the required criteria: - Between 6 and 20 characters long - Contains only letters, digits, and underscores - Starts with a letter if re.match(\\"^[A-Za-z][A-Za-z0-9_]{5,19}\\", username): return \\"Valid\\" else: return \\"Invalid\\""},{"question":"Peter has been fascinated by prime numbers recently. He wants to test his understanding by creating a function to find the sum of all prime numbers up to a given number N. Additionally, to ensure his code\'s efficiency, he wants to limit the runtime by checking only up to the square root of N. Help Peter write the efficient prime sum function. Input: First line consists of T denoting the number of test cases. Each test case consists of a single line containing a single integer N. Output: For each test case, output the sum of all prime numbers up to N in a new line. Constraints: 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^5 SAMPLE INPUT 2 10 20 SAMPLE OUTPUT 17 77","solution":"def sieve(n): is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if is_prime[p] == True: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [] for p in range(2, n + 1): if is_prime[p]: primes.append(p) return primes def prime_sum(n): primes = sieve(n) return sum(primes) def process_test_cases(T, test_cases): results = [] for n in test_cases: results.append(prime_sum(n)) return results"},{"question":"You have a robot starting at position (0, 0) on an infinite 2D grid. The robot can move up, down, left, or right. Given a string of commands, each character indicating a movement direction (\'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right), determine if the robot returns to the origin (0, 0) after executing all commands. Return true if the robot returns to the origin after executing all the commands, otherwise, return false. Example 1: Input: commands = \\"UD\\" Output: true Explanation: The robot moves up once and then down once, returning to its original position. Example 2: Input: commands = \\"LL\\" Output: false Explanation: The robot moves left twice, ending up at position (-2, 0). Example 3: Input: commands = \\"RRDD\\" Output: false Explanation: The robot moves right twice and down twice, ending up at position (2, -2). Example 4: Input: commands = \\"LDRRLRUULR\\" Output: false Constraints: 1 <= commands.length <= 100 commands consists of \'U\', \'D\', \'L\' and \'R\' only.","solution":"def robot_returns_to_origin(commands): Determine if the robot returns to the origin (0, 0) after executing all commands. Parameters: commands (str): A string containing the movement commands (\'U\', \'D\', \'L\', \'R\'). Returns: bool: True if the robot returns to the origin, False otherwise. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x == 0 and y == 0"},{"question":"George has recently become interested in numeral systems, particularly in the binary numeral system. He is especially fascinated by the concept of finding the largest binary gap in a given number. The binary gap of a positive integer is the longest sequence of consecutive zeros that is surrounded by ones at both ends in its binary representation. For example, the binary representation of the number 529 is \\"1000010001\\" which has a binary gap of 4 (between the sixth and ninth bits). George is seeking your help to determine the length of the longest binary gap for various numbers. -----Input----- The first line contains an integer k (1 ≤ k ≤ 1000) — the number of test cases. Each of the next k lines contains a positive integer x (1 ≤ x ≤ 10^6) — the number to analyze for the largest binary gap. -----Output----- For each of the k test cases, print the length of the longest binary gap on a new line. If there is no binary gap, print 0. -----Examples----- Input 3 529 20 15 Output 4 1 0 -----Note----- In the first test case, the binary representation of 529 is \\"1000010001\\", which contains a binary gap of 4. In the second test case, the binary representation of 20 is \\"10100\\", which contains a binary gap of 1. In the third test case, the binary representation of 15 is \\"1111\\", which contains no binary gaps.","solution":"def binary_gap(n): Returns the length of the longest binary gap in the binary representation of the given positive integer n. If there is no binary gap, returns 0. binary_representation = bin(n)[2:] # Get the binary representation of the number, excluding the \'0b\' prefix gaps = binary_representation.strip(\'0\').split(\'1\') # Split the binary string by \'1\' and remove leading/trailing zeros if len(gaps) < 2: return 0 # No gaps available return max(len(gap) for gap in gaps) def find_binary_gaps(test_cases): Given a list of test cases (each a positive integer), return a list of the lengths of the longest binary gap for each test case. results = [] for number in test_cases: results.append(binary_gap(number)) return results"},{"question":"A logistics company uses drones to deliver packages to specific coordinates within a city. Each drone is defined by its maximum delivery range from its starting position. The company needs a way to determine if a package at a given coordinate is within the delivery range of a drone. Given the starting position of the drone and its maximum range, and the coordinates of the package, your task is to determine whether the drone can deliver the package. Input: The first line will contain a positive integer n - number of test cases. For each test case, there will be two lines: - First line contains three space-separated integers: x-coordinate sd, y-coordinate sd of the drone\'s starting position, and the maximum delivery range r. - Second line contains two space-separated integers: x-coordinate p, y-coordinate p of the package\'s position. Output: For each test case, output a single line containing \\"Deliverable\\" (without quotes) if the drone can reach the package, or \\"Not Deliverable\\" (without quotes) if it cannot reach the package. Constraints: 1 ≤ n ≤ 10^4 1 ≤ r ≤ 10^4 -10^4 ≤ sd, p ≤ 10^4 SAMPLE INPUT 1 0 0 5 3 4 SAMPLE OUTPUT Deliverable","solution":"import math def can_deliver_package(x_sd, y_sd, r, x_p, y_p): Determines if the drone can deliver the package. Parameters: x_sd (int): x-coordinate of the drone\'s starting position y_sd (int): y-coordinate of the drone\'s starting position r (int): maximum delivery range of the drone x_p (int): x-coordinate of the package\'s position y_p (int): y-coordinate of the package\'s position Returns: str: \\"Deliverable\\" if the package is reachable, otherwise \\"Not Deliverable\\" distance = math.sqrt((x_sd - x_p) ** 2 + (y_sd - y_p) ** 2) if distance <= r: return \\"Deliverable\\" return \\"Not Deliverable\\""},{"question":"You are given a grid of alphabetic characters where each cell has a lowercase letter. You need to find the longest word (maximum length) that can be formed by starting from any cell and moving to adjacent (up, down, left, right, and diagonally) cells. Each cell can be used only once per word. Design a function `longest_word(grid)` that takes a 2D list of characters representing the grid and returns the longest possible word that can be formed as per the above rules. If there are multiple longest words of the same length, return any one of them. # Function Signature ```python def longest_word(grid: List[List[str]]) -> str: pass ``` # Input - `grid`: A 2D list of characters representing the grid. The outer list represents the rows of the grid, and each inner list represents the columns. Each cell contains a single lowercase alphabetic character. The dimensions of the grid are between 1x1 and 10x10. # Output - A string representing the longest word that can be formed using the described rules. If there are multiple words of the same length, return any one. # Example ```python grid = [ [\'a\', \'b\', \'c\'], [\'d\', \'e\', \'f\'], [\'g\', \'h\', \'i\'] ] print(longest_word(grid)) # Output could be \\"abcdefi\\", \\"abcef\\", \\"aei\\", etc. ``` # Notes - The function may explore all possible paths starting from every cell and keep track of the longest word found. - The function should efficiently handle grids with the maximum size constraints.","solution":"from typing import List def longest_word(grid: List[List[str]]) -> str: rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] # 8 possible directions longest = \\"\\" def dfs(x: int, y: int, visited: List[List[bool]], current_word: str) -> str: nonlocal longest current_word += grid[x][y] if len(current_word) > len(longest): longest = current_word visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and not visited[nx][ny]: dfs(nx, ny, visited, current_word) visited[x][y] = False for i in range(rows): for j in range(cols): visited = [[False] * cols for _ in range(rows)] dfs(i, j, visited, \\"\\") return longest"},{"question":"Given an array of integers `arr` and a target integer `k`, determine if there exists a pair of elements in the array that sum up to `k`. -----Constraints----- - All elements in the array, as well as the target `k`, are integers. - 1 leq len(arr) leq 10^5 - -10^5 leq arr[i] leq 10^5 - -10^5 leq k leq 10^5 -----Input----- Input is given in the following format: n k arr_1 arr_2 arr_3 ... arr_n - n: the number of elements in the array (1 <= n <= 10^5) - k: the target sum (-10^5 <= k <= 10^5) - arr: the `n` elements of the array, separated by spaces (-10^5 <= arr[i] <= 10^5) -----Output----- Print \\"YES\\" if there exists a pair of elements in the array that sum up to `k`. Otherwise, print \\"NO\\". -----Sample Input----- 5 9 2 7 11 15 3 -----Sample Output----- YES For example, there is a pair (2, 7) that adds up to 9. -----Sample Input----- 4 8 1 2 4 5 -----Sample Output----- NO There is no pair in the array whose sum is 8.","solution":"def has_pair_with_sum(arr, k): Determines if there exists a pair of elements in the array that sum up to k. :param arr: List of integers :param k: Target sum integer :return: \\"YES\\" if a pair exists, \\"NO\\" otherwise seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Problem Statement: Alice is organizing a book shelf for her large collection of books. Each book has a unique book ID and she wants to group them into clusters based on their genres. Each genre can be represented as a string. Clustering should be done in such a way that each genre group on the shelf contains at least one book but no more than `k` books. Alice needs your help to determine if it\'s possible to organize the books according to the rules and if so, to output one possible organization. Input The first input line contains an integer T (1 ≤ T ≤ 20) – the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 1000) – the number of books. The following line contains an integer k (1 ≤ k ≤ 100) – the maximum number of books per genre group. The next n lines each contain two space-separated strings: book ID and genre, representing each book and its genre. Output For each test case, output \\"YES\\" if it is possible to organize the books according to the given rules, followed by the grouping. If it is impossible, output \\"NO\\". Example ``` Input: 2 5 3 B1 Fiction B2 Fiction B3 Science B4 Fiction B5 Romance 4 2 B1 Fiction B2 Fiction B3 Fiction B4 Fiction Output: YES Fiction: B1 B2 B4 Science: B3 Romance: B5 NO ``` Explanation In the first test case, it\'s possible to form groups where no group has more than 3 books: - \\"Fiction\\" group with books B1, B2, and B4. - \\"Science\\" group with book B3. - \\"Romance\\" group with book B5. In the second test case, it is impossible because the \\"Fiction\\" group would require 4 slots, but the maximum per genre group is 2.","solution":"def organize_books(test_cases): Organizes books into groups based on their genres with the constraint that each group contains at least one book but no more than k books. Arguments: test_cases: List of tuples each containing (n, k, books). n (int) - the number of books k (int) - the maximum number of books per genre group books (list of tuples) - list of tuples where each tuple contains (book_id, genre) Returns: List of strings representing the results for each test case. Each string is either \\"YES\\" followed by the genre-group mappings or \\"NO\\". results = [] for n, k, books in test_cases: genre_count = {} for book_id, genre in books: if genre not in genre_count: genre_count[genre] = [] genre_count[genre].append(book_id) possible = True for book_ids in genre_count.values(): if len(book_ids) > k: possible = False break if not possible: results.append(\\"NO\\") else: result = \\"YESn\\" for genre, book_ids in genre_count.items(): result += f\\"{genre}: \\" + \\" \\".join(book_ids) + \\"n\\" results.append(result.strip()) return results # Example usage # test_cases = [ # (5, 3, [(\\"B1\\", \\"Fiction\\"), (\\"B2\\", \\"Fiction\\"), (\\"B3\\", \\"Science\\"), (\\"B4\\", \\"Fiction\\"), (\\"B5\\", \\"Romance\\")]), # (4, 2, [(\\"B1\\", \\"Fiction\\"), (\\"B2\\", \\"Fiction\\"), (\\"B3\\", \\"Fiction\\"), (\\"B4\\", \\"Fiction\\")]) # ] # print(organize_books(test_cases))"},{"question":"You are given an ATM with a certain amount of money and multiple denominations of bills. Your task is to determine if it\'s possible to withdraw an exact amount of money using the available denominations. ------ Input ------ The first line of the input contains two space-separated integers M (the amount of money in the ATM) and W (the amount you wish to withdraw). The second line contains D space-separated integers representing the different denominations available in the ATM. ------ Output ------ Print a single line containing the string \\"YES\\" if it\'s possible to withdraw the exact amount W using the available denominations or \\"NO\\" if it is not. You may print each character of each string in uppercase or lowercase (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will all be treated as identical). ------ Constraints ------ 1 ≤ M ≤ 10^9 1 ≤ W ≤ 10^9 1 ≤ D ≤ 10^5 1 ≤ Denomination leq 10^6 for each denomination ----- Sample Input 1 ------ 1000 500 100 200 300 400 500 ----- Sample Output 1 ------ YES ----- Explanation 1 ------ You have denominations 100, 200, 300, 400, and 500. You can withdraw exactly 500 using the 500 bill. ----- Sample Input 2 ------ 1000 250 100 200 300 400 500 ----- Sample Output 2 ------ NO ----- Explanation 2 ------ You only have denominations 100, 200, 300, 400, and 500, none of which can add up to exactly 250.","solution":"def can_withdraw(M, W, denominations): Determine if it\'s possible to withdraw the exact amount W using available denominations. Args: M (int): The amount of money in the ATM. W (int): The amount of money to withdraw. denominations (List[int]): List of available denominations. Returns: str: \\"YES\\" if it\'s possible to withdraw W, otherwise \\"NO\\". def can_make_amount_with_denominations(W, denominations): # To check if we can make amount W with given denominations using dynamic programming. dp = [False] * (W + 1) dp[0] = True # Base case: 0 amount can be made with 0 denominations for denom in denominations: for i in range(denom, W + 1): if dp[i - denom]: dp[i] = True return dp[W] if W > M: return \\"NO\\" if W == 0: return \\"YES\\" return \\"YES\\" if can_make_amount_with_denominations(W, denominations) else \\"NO\\""},{"question":"Given a matrix of size n x n, rotate it by 90 degrees clockwise. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the size of the matrix. Each of the next n lines contains n space-separated integers describing the matrix. Output Output the rotated matrix, with each line containing n space-separated integers. Examples Input 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 Input 3 1 2 3 4 5 6 7 8 9 Output 7 4 1 8 5 2 9 6 3","solution":"def rotate_matrix_90_clockwise(matrix): Rotates an n x n matrix by 90 degrees clockwise. n = len(matrix) # Create an empty matrix for the rotated result rotated_matrix = [[0] * n for _ in range(n)] # Fill the rotated matrix with elements from the original matrix for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"You are an event coordinator organizing a party. You have a list of n guests with their food preferences given in an array \'food\' of length n, where food[i] represents the favorite dish of the i^{th} guest. Each dish is represented by a unique integer identifier. You are also given an array \'distribution\' of length n, where distribution[j] represents the dish currently available at the j^{th} table. You can swap dishes between any two tables any number of times to match each guest with their favorite dish. Return the minimum number of swaps required to achieve this. Example 1: Input: food = [1, 4, 3, 2] distribution = [2, 1, 4, 3] Output: 3 Explanation: The distributions can be adjusted as follows: - Swap dishes at positions 0 and 1: [1, 2, 4, 3] - Swap dishes at positions 1 and 3: [1, 3, 4, 2] - Swap dishes at positions 2 and 3: [1, 3, 2, 4] In total, 3 swaps were performed. Example 2: Input: food = [5, 6, 7] distribution = [7, 6, 5] Output: 1 Explanation: The distributions can be adjusted as follows: - Swap dishes at positions 0 and 2: [5, 6, 7] In total, 1 swap was performed. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minSwaps() which takes the length of the array n and two arrays food and distribution as input, and returns an integer value indicating the minimum number of swaps required. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: n == food.length == distribution.length 1 <= n <= 10^5 1 <= food[i], distribution[j] <= 10^5 All food[i] are unique and all distribution[j] are unique.","solution":"def minSwaps(food, distribution): Returns the minimum number of swaps required to match each guest with their favorite dish. n = len(food) # Create a mapping from food to its index in distribution pos = {distribution[i]: i for i in range(n)} swaps = 0 for i in range(n): # If the current dish is not the favorite dish of the i-th guest if distribution[i] != food[i]: swaps += 1 # Find the correct position of the desired dish correct_pos = pos[food[i]] # Swap the dishes distribution[i], distribution[correct_pos] = distribution[correct_pos], distribution[i] # Update the positions in the pos map pos[distribution[correct_pos]] = correct_pos pos[distribution[i]] = i return swaps"},{"question":"You are given an array of N integers, and an integer K. The task is to find and print the largest K sums obtained by summing any subset of elements from the given array. Note that each subset sum can repeat if different subsets produce the same sum. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and K. The second line contains N space-separated integers representing the elements of the array. ------ Output ------ For each test case, print a single line containing K space-separated integers - the largest K subset sums in decreasing order. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 18 1 ≤ K ≤ min(2^{N}, 1000) -10^9 ≤ text{array element} ≤ 10^9 ------ Subtasks ------ Subtask #1 (20 points): N ≤ 10 Subtask #2 (80 points): original constraints ----- Sample Input 1 ------ 1 3 4 1 2 3 ----- Sample Output 1 ------ 6 5 5 3 ----- Explanation 1 ------ Example case 1: The largest sums obtained from the given array [1, 2, 3] considering possible subsets are: - sum of [1, 2, 3] = 6 - sum of [2, 3] = 5 - sum of [1, 3] = 4 - sum of [1, 2] = 3 - sum of [3] = 3 - sum of [2] = 2 - sum of [1] = 1 Hence, the largest 4 sums are: 6, 5, 5, 3.","solution":"from itertools import combinations def largest_k_sums(T, test_cases): results = [] for case in test_cases: N, K, arr = case subset_sums = set() # Generate all possible subset sums for i in range(1, N + 1): for combo in combinations(arr, i): subset_sums.add(sum(combo)) # Find the K largest sums largest_sums = sorted(subset_sums, reverse=True)[:K] results.append(largest_sums) return results def format_results(result_list): return \'n\'.join(\' \'.join(map(str, result)) for result in result_list) # Example usage: # Reading input def read_input(): T = int(input()) test_cases = [] for _ in range(T): N, K = map(int, input().split()) arr = list(map(int, input().split())) test_cases.append((N, K, arr)) return T, test_cases if __name__ == \\"__main__\\": T, test_cases = read_input() results = largest_k_sums(T, test_cases) print(format_results(results))"},{"question":"You are given an array with `n` integers: `a[1], a[2], ..., a[n]`. You need to find the maximum product of any two distinct elements in the array. However, you are only allowed to perform this operation if no two elements of the array are equal. If there are duplicate elements in the array, return -1. For example, if `a = [5, 1, 2, 3, 4]`, the maximum product of any two distinct elements is `5 * 4 = 20`. On the other hand, if `a = [1, 2, 2, 3, 1]`, since there are duplicate elements, we return -1. Constraints * 2 <= n <= 100,000 * -10^9 <= a[i] <= 10^9 Input Input is given from Standard Input in the following format: n a[1] a[2] ... a[n] Output Print the maximum product of any two distinct elements. If there are duplicates in the array, print -1. Examples Input 5 5 1 2 3 4 Output 20 Input 4 1 2 3 2 Output -1 Input 6 -5 -4 2 3 4 -1 Output 20 Input 7 6 6 Output -1 Input 8 2 3 5 7 11 13 Output 143","solution":"def max_product(n, a): Returns the maximum product of any two distinct elements in the array. If there are duplicate elements in the array, returns -1. # Check for duplicates if len(a) != len(set(a)): return -1 # Sort the array a_sorted = sorted(a) # The maximum product of any two distinct elements is either # the product of the two largest elements or # the product of the two smallest elements (if both are negative) return max(a_sorted[-1] * a_sorted[-2], a_sorted[0] * a_sorted[1]) # Example usage # n = 5 # a = [5, 1, 2, 3, 4] # print(max_product(n, a)) # Output: 20"},{"question":"You are given a list of integers which represents the height of the vertical rods in a histogram where each bar has a width of 1. Your task is to find the maximum area of a rectangle that can be formed inside the histogram. Example: Input: [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The largest rectangle can be formed by bars [5, 6] with height 5 and 6 and width 2. Thus, the maximum area is 5*2 = 10. Other cases: Input: [1, 2, 3, 4, 5] Output: 9 Explanation: The largest rectangle can be formed by bars [3, 4, 5] with height 3, 4, and 5 and width 3. Thus, the maximum area is 3*3 = 9. Input: [3, 3, 3, 3, 3] Output: 15 Explanation: The largest rectangle can be formed by any three adjacent bars with height 3 and width 5. Thus, the maximum area is 3*5 = 15. Note: The length of the input array is [1, 10^5]. Elements in the given array will be in range [1, 10^4].","solution":"def largest_rectangle_area(heights): Calculate the largest rectangle area in a histogram given the heights of the bars. :param heights: List[int] - a list of integers representing the heights of bars in the histogram. :return: int - the maximum area of a rectangle that can be formed within the histogram. stack = [] max_area = 0 for i, height in enumerate(heights): while stack and heights[stack[-1]] > height: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) while stack: h = heights[stack.pop()] w = len(heights) if not stack else len(heights) - stack[-1] - 1 max_area = max(max_area, h * w) return max_area"},{"question":"Given an integer array `arr` and an integer `target`, you need to determine if there are two distinct indices `i` and `j` in the array such that `arr[i] + arr[j] = target`. If such indices exist, return `true`; otherwise, return `false`. # Function Signature ```python def has_pair_with_sum(arr: List[int], target: int) -> bool: ``` # Input - `arr` (List[int]): A list of integers - `target` (int): The target sum # Output - `bool`: A boolean value (`True` or `False`) # Examples ```python has_pair_with_sum([1, 2, 3, 4], 5) ``` Output: `True` Explanation: 1 + 4 = 5 ```python has_pair_with_sum([3, 1, 5], 10) ``` Output: `False` Explanation: No two distinct indices found with sum 10","solution":"from typing import List def has_pair_with_sum(arr: List[int], target: int) -> bool: Determines if there are two distinct indices i and j in the array such that arr[i] + arr[j] = target. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"You are given a list of integers where each element represents the elevation of a terrain at that point. The goal is to calculate the total water that can be trapped between the terrains after it rains. The current terrain heights are represented in an array as non-negative integers. Write a function to calculate the total amount of water trapped between the terrains. Function Signature: ```python def trap(height: List[int]) -> int: ``` Input: - A single list of integers height of length n (1 ≤ n ≤ 10^6) where height[i] is a non-negative integer representing the height of the terrain at index i. Output: - An integer representing the total amount of water trapped between the terrains. Examples: ```python # Example 1 height = [0,1,0,2,1,0,1,3,2,1,2,1] # The total amount of water trapped is 6 units. print(trap(height)) # Output: 6 # Example 2 height = [4,2,0,3,2,5] # The total amount of water trapped is 9 units. print(trap(height)) # Output: 9 ``` Explanation: - In the first example, the water trapped at indices 2, 4, 5, 6, 8, and 10 respectively is 1, 1, 2, 1, 1, and 0 units respectively. - In the second example, the water trapped at indices 1, 2, 3, and 4 respectively is 2, 4, 1, and 2 units respectively. Note: The problem can be solved using a two-pointer technique or a dynamic programming approach to keep track of the maximum height to the left and right of each terrain. This allows for calculating the trapped water efficiently within the given constraints.","solution":"from typing import List def trap(height: List[int]) -> int: Calculate the total amount of water trapped between the terrains. :param height: List[int] - List of non-negative integers representing the elevation of a terrain. :return: int - Total amount of water trapped. if not height or len(height) < 3: return 0 n = len(height) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) # Fill right_max array right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) # Calculate the trapped water total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - height[i] return total_water"},{"question":"# Definition An **_element is unique_** *if it is present only once in the array*. ____ # Task **_Given_** an *array/list [] of integers* , **_find_** *the unique element(s) in the array and return them in ascending order*. ___ # Notes * **_Array/list_** size is *at least 4*. * **_Array/list\'s numbers_** *will be a mixture of positive and negative integers*. * If no unique elements are found, return an empty array/list. ___ # Input >> Output Examples ``` uniqueElements({1, 2, 3, 2, 1, 4}) ==> return {3, 4} ``` **_Explanation_**: * `1` and `2` occur more than once. * `3` and `4` occur only once and are returned in ascending order. ___ ``` uniqueElements({0, -1, -1, 0, 2, 3, 4, 4}) ==> return {2, 3} ``` **_Explanation_**: * `0` and `-1` occur more than once. * `2` and `3` occur only once. * `4` occurs more than once. * `2` and `3` are returned in ascending order. ___ ``` uniqueElements({5, 5, 5, 5}) ==> return {} ``` **_Explanation_**: * All elements in the array occur more than once. * Hence, the returned array is empty. ___ ``` uniqueElements({10, 20, 20, 30, -10, 30, -10, 40}) ==> return {10, 40} ``` **_Explanation_**: * `20` occurs more than once. * `30` and `-10` occur more than once. * `10` and `40` occur only once and are returned in ascending order.","solution":"def unique_elements(arr): Returns a sorted list of elements that appear only once in the given array. element_count = {} for elem in arr: if elem in element_count: element_count[elem] += 1 else: element_count[elem] = 1 unique_elems = [elem for elem in element_count if element_count[elem] == 1] unique_elems.sort() return unique_elems"},{"question":"A company has multiple projects that need to be completed. Each project takes a certain amount of time to be completed and yields a certain profit. You\'re given two integer arrays, `time` and `profit`, where `time[i]` is the time required to complete the ith project and `profit[i]` is the profit of the ith project. You need to help the company maximize its profit given a fixed number of available hours. Your task is to determine the maximum profit that can be obtained by completing a subset of the projects within the given time limit. Write a function `maxProfit` that takes in the following parameters: - `time`: a list of integers representing the time required for each project. - `profit`: a list of integers representing the profit for each project. - `totalHours`: an integer representing the total number of available hours. Your function should return the maximum profit that can be obtained within the given time limit. # Example Example 1: Input: time = [2, 3, 5, 7] profit = [10, 15, 20, 25] totalHours = 8 Output: 35 Explanation: The company can complete the projects with times [2, 3] which gives a profit of 10 + 15 = 25 or the projects with times [3, 5] which gives a profit of 15 + 20 = 35. Example 2: Input: time = [1, 2, 3, 4] profit = [10, 40, 50, 70] totalHours = 5 Output: 90 Explanation: The company can complete the projects with times [2, 3] which gives a profit of 40 + 50 = 90. # Constraints: - 1 <= time.length <= 100 - 1 <= profit.length <= 100 - 1 <= time[i] <= 100 - 1 <= profit[i] <= 100 - 1 <= totalHours <= 100","solution":"def maxProfit(time, profit, totalHours): n = len(time) # DP array - dp[i] will store the maximum profit that can be achieved using i hours dp = [0] * (totalHours + 1) for i in range(n): # Traverse backwards to ensure that each project is only considered once for j in range(totalHours, time[i] - 1, -1): dp[j] = max(dp[j], dp[j - time[i]] + profit[i]) return dp[totalHours]"},{"question":"John is creating a new game that involves a grid of size n x m filled with non-negative integers. The objective of the game is to find the longest increasing path starting from any cell in the grid, where each step must move to one of the 4 directly neighboring cells (up, down, left, right) and the value in the next cell must be strictly greater than the value in the current cell. He needs your help to implement a function that computes the length of this longest increasing path. ------ Input ------ The first line contains two space-separated integers n and m, denoting the number of rows and columns in the grid respectively. Each of the next n lines contains m space-separated integers representing the grid. ------ Output ------ Output a single integer which is the length of the longest increasing path in the grid. ------ Constraints ------ 1 ≤ n, m ≤ 200 0 ≤ text{grid}[i][j] ≤ 10^{4} ------ Example ------ Input: 3 4 9 9 4 3 6 6 8 5 1 1 1 2 Output: 4 ------ Explanation ------ One of the longest increasing paths that can be found in the given grid is 3 -> 4 -> 5 -> 8. Therefore, the length of the longest increasing path is 4. There might be other paths with the same length, but the task is to find any one of the maximum lengths.","solution":"def longestIncreasingPath(grid): if not grid: return 0 n, m = len(grid), len(grid[0]) dp = [[-1] * m for _ in range(n)] def dfs(x, y): if dp[x][y] != -1: return dp[x][y] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_path = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] > grid[x][y]: max_path = max(max_path, 1 + dfs(nx, ny)) dp[x][y] = max_path return max_path max_length = 0 for i in range(n): for j in range(m): max_length = max(max_length, dfs(i, j)) return max_length"},{"question":"Story Your team has developed a system that processes daily purchase logs from various online sellers. However, some of these sellers have been reported to manually modify certain quantities to incorrect values, either to inflate their sales or to correct previous mistakes. You need to ensure the integrity of the data before any further processing. Task You will receive a list of daily purchase records in the form of strings, where each record represents a day’s total transactions or quantities. Your task is to validate these quantities and categorize them into one of the following categories: * **valid**: the quantity is correct and follows the expected range (1-1000) for a day. * **overflow**: the quantity exceeds the maximum range (1000). * **invalid**: the quantity is below the minimum range (1) or contains non-numeric values. Return your findings in an array: `[ valid_count, overflow_count, invalid_count ]` Examples `[\\"250\\", \\"1500\\", \\"-5\\", \\"800\\", \\"xyz\\", \\"734\\"]` should return `[3, 1, 2]`, indicating there are 3 valid records, 1 overflow, and 2 invalid records. --- Additional Notes - The input list will always contain at least one record. - Ensure performance is optimized for large lists of records.","solution":"def validate_purchase_records(records): Validate quantities in the purchase records. Args: records (list of str): List of purchase quantities as strings. Returns: list: [valid_count, overflow_count, invalid_count] valid_count = 0 overflow_count = 0 invalid_count = 0 for record in records: try: quantity = int(record) if quantity < 1: invalid_count += 1 elif quantity > 1000: overflow_count += 1 else: valid_count += 1 except ValueError: invalid_count += 1 return [valid_count, overflow_count, invalid_count]"},{"question":"Tokiko is interested in patterns that can be found within a sequence of numbers. She defines a pattern as any sequence of consecutive numbers that increase by 1. Given a list of integers, check if it is possible to split the list into exactly k non-empty continuous subsequences such that each subsequence is a pattern according to Tokiko\'s definition. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 50) — the number of test cases. The description of the test cases follows. The first line of each test case description contains two integers n and k (1 le n le 100, 1 le k le n) — the length of the list and the number of patterns required. The second line of each test case description contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the list of integers. -----Output----- For each test case, print \\"YES\\" (without quotes), if it is possible to split the list into exactly k patterns, and \\"NO\\" (without quotes) otherwise. You can print letters in any case (upper or lower). -----Examples----- Input 4 6 2 1 2 3 5 6 7 5 1 3 4 5 6 7 7 3 10 11 12 1 2 3 8 4 4 4 5 6 7 Output YES YES YES NO -----Note----- In the first test case, the list can be split into [1, 2, 3] and [5, 6, 7]. In the second test case, the entire list itself is a single pattern [3, 4, 5, 6, 7]. In the third test case, the list can be split into [10, 11, 12], [1, 2, 3], and [8]. In the fourth test case, it is impossible to split the list into 4 patterns as required.","solution":"def can_split_into_patterns(t, cases): results = [] for i in range(t): n, k = cases[i][0] nums = cases[i][1] # Step 1: Find the lengths of all continuous increasing subsequences lengths = [] current_length = 1 for j in range(1, n): if nums[j] == nums[j - 1] + 1: current_length += 1 else: lengths.append(current_length) current_length = 1 lengths.append(current_length) # Step 2: Check if we can use the found lengths to get exactly k patterns if len(lengths) < k: results.append(\\"NO\\") else: if len(lengths) == k: results.append(\\"YES\\") else: remaining_splits_needed = k - len(lengths) # Check if we have enough larger subsequences to be split further splittable_count = sum(l - 1 for l in lengths if l > 1) if splittable_count >= remaining_splits_needed: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A group of friends wants to play a game with cards. There are N cards, each card has a unique number written on it. The cards are arranged in such a way that for any two consecutive cards, let\'s say i and i+1, the absolute difference in their values is minimized. That way, the arrangement is the closest possible to each other. Once the cards are arranged in this manner, they want to perform a new arrangement that maximizes the absolute differences for all consecutive cards\' values. They call this new arrangement their \\"challenge arrangement\\". Given N, the number of cards, write a program to determine the maximum possible sum of absolute differences for the \\"challenge arrangement.\\" -----Input----- - The first line contains a single integer T – the number of test cases. - The first line of each test case contains a single integer N - the number of cards. -----Output----- For each test case, output a single integer – the maximum sum of absolute differences for the \\"challenge arrangement.\\" -----Constraints----- - 1 le T le 10 - 2 le N le 10^5 -----Example Input----- 2 3 4 -----Example Output----- 4 6 -----Explanation----- Example case 1: - The cards will be arranged initially to be as close as possible, which can be any arrangement of unique numbers [1, 2, 3]. - To maximize the difference, the possible \\"challenge arrangement\\" can be [3, 1, 2], which yields a sum of absolute differences: |3-1| + |1-2| = 2 + 1 = 3. - Another \\"challenge arrangement\\" is [1, 3, 2] which yields a sum of absolute differences: |1-3| + |3-2| = 2 + 1 = 3. Example case 2: - For N=4, the cards might initially be [1, 2, 3, 4]. - To maximize, an arrangement like [1, 4, 2, 3] yields maximum differences: |1-4| + |4-2| + |2-3| = 3 + 2 + 1 = 6.","solution":"def max_sum_of_differences(N): if N == 2: return 2 if N == 3: return 4 # For N >= 4, the pattern emerges. return (N - 1) * 2 def process_test_cases(T, test_cases): results = [] for N in test_cases: results.append(max_sum_of_differences(N)) return results"},{"question":"You are given an m x n matrix consisting of non-negative integers. Your task is to find the sum of all elements in the matrix for which the row and column indices are either both even or both odd. Input The first line contains two integers m and n — the number of rows and columns in the matrix (1 ≤ m, n ≤ 1000). The next m lines contain n space-separated integers each — representing the elements of the matrix. Each element in the matrix is a non-negative integer not exceeding 109. Output Print a single integer — the sum of all elements in the matrix for which the row and column indices are either both even or both odd. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 25 Input 2 4 0 1 2 3 4 5 6 7 Output 16 Note In the first sample, the elements to be summed are at positions (0, 0), (0, 2), (2, 0), (2, 2), (1, 1) — summing to 1 + 3 + 7 + 9 + 5 = 25. In the second sample, the elements to be summed are at positions (0, 0), (0, 2), (1, 1), (1, 3) — summing to 0 + 2 + 5 + 7 = 14.","solution":"def sum_special_elements(matrix, m, n): Returns the sum of all elements in the matrix where the row and column indices are either both even or both odd. total_sum = 0 for i in range(m): for j in range(n): if (i % 2 == 0 and j % 2 == 0) or (i % 2 == 1 and j % 2 == 1): total_sum += matrix[i][j] return total_sum"},{"question":"Write a function `find_pair_with_sum(arr, target_sum)` that takes a list of integers `arr` and an integer `target_sum`, and returns a tuple with a pair of indices (i, j) such that the elements at these indices in `arr` add up to `target_sum`. If no such pair exists, return `None`. Indices `i` and `j` must be different. Example: ```python find_pair_with_sum([2, 7, 11, 15], 9) ``` Output: ```python (0, 1) ``` Explanation: The elements at indices 0 and 1 are 2 and 7 respectively, and their sum equals the target sum 9.","solution":"def find_pair_with_sum(arr, target_sum): Finds a pair of indices (i, j) in `arr` such that the elements at these indices add up to `target_sum`. If no such pair exists, returns None. Parameters: arr (list): A list of integers. target_sum (int): The target sum for which a pair needs to be found. Returns: tuple: A tuple with a pair of indices (i, j) or None if no pair exists. seen = {} for i, num in enumerate(arr): complement = target_sum - num if complement in seen: return (seen[complement], i) seen[num] = i return None"},{"question":"Tom is playing a game where he navigates a robot on a grid. The grid is a simple 2D plane, and the robot starts at position (0, 0). He can issue commands to the robot in the form of a string cmd, where each character denotes a movement: - \'U\': the robot moves one unit up (y-coordinate increases by 1) - \'D\': the robot moves one unit down (y-coordinate decreases by 1) - \'L\': the robot moves one unit left (x-coordinate decreases by 1) - \'R\': the robot moves one unit right (x-coordinate increases by 1) Given the sequence of commands, determine the final position of the robot on the grid once all commands have been executed. -----Constraints----- - 1 ≦ |cmd| ≦ 50 (|cmd| denotes the length of cmd) - cmd consists of the letters \'U\', \'D\', \'L\', and \'R\'. - The robot never moves outside the grid, which is infinite in all directions. -----Input----- The input is given from Standard Input in the following format: cmd -----Output----- Print the final coordinates of the robot as two space-separated integers. -----Sample Input----- UDLR -----Sample Output----- 0 0 Starting from (0, 0), the moves are as follows: Up to (0, 1), Down to (0, 0), Left to (-1, 0), Right to (0, 0). Thus, the final position is (0, 0).","solution":"def final_position(cmd): Returns the final position of the robot after executing all commands. Parameters: cmd (str): A string consisting of characters \'U\', \'D\', \'L\', \'R\' indicating movements. Returns: tuple: A tuple (x, y) representing the final position of the robot. x, y = 0, 0 for move in cmd: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x, y def main(): import sys input = sys.stdin.read().strip() result = final_position(input) print(result[0], result[1]) if __name__ == \\"__main__\\": main()"},{"question":"Alice likes to collect vintage books, and she maintains a collection in her personal library. Each book is characterized by its unique ID and value. Bob, being a curious friend, often asks her about the collection. He can ask either of the following two types of questions: 1) Bob asks Alice to swap the positions of two books in her collection. He provides the positions of the two books, and Alice swaps them. 2) Bob asks Alice about the maximum value of the books in a given range within her collection. Alice then needs to tell him the highest value of the books present in that range. Your task is to write a program that will handle these queries and provide the output for Bob\'s second type of questions. # Input The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 100000) — the number of books in the collection and the number of queries respectively. The second line contains `n` integers `v_i` (1 ≤ v_i ≤ 10^9) — the value of each book in the collection. The next `q` lines contain Bob\'s actions. If it is a type 1 action, the line contains the integer `1` followed by two integers `p1` and `p2` (1 ≤ p1, p2 ≤ n). This indicates that the books at positions `p1` and `p2` should be swapped. If it is a type 2 action, the line contains the integer `2` followed by two integers `l` and `r` (1 ≤ l ≤ r ≤ n). This indicates that Bob wants to know the maximum value of the books in the range from `l` to `r`. # Output For each type 2 query, print one integer — the maximum value of the books in the given range. # Examples Input ``` 5 5 1 5 3 2 4 2 1 5 1 1 5 2 1 3 2 4 5 1 3 4 ``` Output ``` 5 4 2 ``` # Note In the first query, the range is the entire collection, so the answer is `5`. In the second query, after swapping the books at positions `1` and `5`, the collection becomes `[4, 5, 3, 2, 1]`. The range `[1, 3]` now contains values `[4, 5, 3]`, so the answer is `5`. In the third query, the range `[4, 5]` contains values `[2, 1]`, so the answer is `2`. In the fourth query, after swapping the books at positions `3` and `4`, the collection becomes `[4, 5, 2, 3, 1]`.","solution":"def handle_queries(n, q, values, queries): Handles the queries related to Alice\'s book collection. Args: n : int : number of books in the collection q : int : number of queries values : list of int : values of the books queries : list of tuples : list of queries Returns: list of int : list of results for type 2 queries results = [] for query in queries: if query[0] == 1: # Swap the positions of two books _, p1, p2 = query values[p1 - 1], values[p2 - 1] = values[p2 - 1], values[p1 - 1] elif query[0] == 2: # Get the maximum value in a given range _, l, r = query results.append(max(values[l - 1:r])) return results"},{"question":"You are given two strings s and t, both consisting of lowercase English letters. Your task is to determine if it is possible to make the string s equal to string t by reversing exactly one continuous substring (contiguous subsequence) of s. -----Constraints----- - 1 <= |s|, |t| <= 10^5 - s and t are of the same length. -----Input----- The input is given from Standard Input in the following format: ``` s t ``` -----Output----- Print \\"YES\\" (without quotes) if it is possible to make s equal to t by reversing exactly one continuous substring of s. Otherwise, print \\"NO\\". -----Sample Input 1----- abcdef abcfed -----Sample Output 1----- YES -----Sample Input 2----- abcdef abcfgh -----Sample Output 2----- NO","solution":"def can_make_equal_by_reversing_substring(s, t): if s == t: return \\"YES\\" n = len(s) diff_indices = [i for i in range(n) if s[i] != t[i]] if not diff_indices or len(diff_indices) == 1: return \\"NO\\" start, end = diff_indices[0], diff_indices[-1] if s[start:end + 1][::-1] == t[start:end + 1]: return \\"YES\\" return \\"NO\\""},{"question":"Alice wants to organize a card game tournament at her school. She has several groups of students, each with its own set of rules for playing the game. Every student in a group needs to play against every other student exactly once. Alice needs to figure out how many games have to be carried out in total for each group. You are given an array of integers, where each element represents the number of students in a group. Write a program to calculate the number of games required for each group. Input Format - The first line contains an integer T, the number of groups. - The second line contains T integers separated by spaces, where each integer represents the number of students in a group. Constraints 1 leq T leq 100 2 leq n_i leq 10^4 for all 1 leq i leq T Output Format Print T lines where each line corresponds to the number of games needed for each group. Sample Input 3 3 4 5 Sample Output 3 6 10 Explanation First group: Number of students = 3 Number of games = 3 choose 2 = 3 Second group: Number of students = 4 Number of games = 4 choose 2 = 6 Third group: Number of students = 5 Number of games = 5 choose 2 = 10 Note: The number of ways to choose 2 students out of n students is given by the binomial coefficient C(n, 2) = frac{n(n-1)}{2}","solution":"def calculate_games(T, groups): This function calculates the number of games required for each group of students in a tournament. Parameters: T (int): Number of groups. groups (List[int]): List containing the number of students in each group. Returns: List[int]: List containing the number of games for each group. results = [] for students in groups: games = (students * (students - 1)) // 2 results.append(games) return results # Example usage: # print(calculate_games(3, [3, 4, 5])) -> [3, 6, 10]"},{"question":"Given an integer array nums, you need to find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. If there are multiple such subarrays, return the one which starts at the smallest index. Input The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) representing the number of elements in the array. The second line contains n integers, each integer x_i (-10^4 ≤ x_i ≤ 10^4) representing the elements of the array. Output Print a single integer, the maximum sum of the contiguous subarray. Examples Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 1 -1 Output -1 Input 6 1 2 3 4 -10 10 Output 10","solution":"def max_subarray_sum(n, nums): Returns the maximum sum of the contiguous subarray within the given array. :param n: int - number of elements in the array :param nums: list of int - the elements of the array :return: int - the maximum sum of the contiguous subarray max_current = max_global = nums[0] for i in range(1, n): max_current = max(nums[i], max_current + nums[i]) if max_current > max_global: max_global = max_current return max_global # Example Usage # n = 5 # nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4] # print(max_subarray_sum(n, nums)) # Output: 6"},{"question":"You are an explorer trying to navigate a newly discovered ancient temple. The temple consists of a series of rooms connected by corridors. Each room is guarded by a magical lock that can be either open or closed. The state of the lock in each room changes every time you enter that room. Your objective is to find a path from the entrance of the temple to the treasure room and return back without getting trapped in any room due to locked doors. Initially, all the locks in the temple are open. If a room has an even number of visits, the lock is open, and if it has an odd number of visits, the lock is closed. You must ensure that after you exit a room, you can re-enter it later. You are given a map of the temple, which includes the number of rooms (N) and the number of corridors (M) that connect the rooms. Corridors are bidirectional. Determine if it\'s possible to reach the treasure room and return to the entrance without getting trapped. Input Format The first line contains two space-separated integers, N (number of rooms) and M (number of corridors). The second line contains two space-separated integers, Entrance and Treasure, representing the entrance room and the treasure room respectively. Each of the next M lines contains two space-separated integers, A and B, representing a bidirectional corridor between rooms A and B. Constraints 2 ≤ N ≤ 10^3 1 ≤ M ≤ 3 cdot 10^3 1 ≤ A, B, Entrance, Treasure ≤ N Each corridor connects two distinct rooms and no two rooms are connected by more than one corridor. Output Format Print \\"YES\\" if it is possible to reach the treasure room and return to the entrance without getting trapped. Print \\"NO\\" otherwise. Sample Input 4 4 1 4 1 2 2 3 3 4 4 1 Sample Output YES Explanation You can follow a path: 1 -> 2 -> 3 -> 4, to reach the treasure room and return via the same path 4 -> 3 -> 2 -> 1. Since each room is visited an even number of times, you can avoid getting trapped. Therefore, the output is \\"YES\\".","solution":"from collections import defaultdict, deque def can_reach_and_return(N, M, Entrance, Treasure, corridors): graph = defaultdict(list) for A, B in corridors: graph[A].append(B) graph[B].append(A) def bfs(start, end): visited = [False] * (N + 1) queue = deque([start]) while queue: node = queue.popleft() if node == end: return True if not visited[node]: visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: queue.append(neighbor) return False if bfs(Entrance, Treasure) and bfs(Treasure, Entrance): return \\"YES\\" else: return \\"NO\\" # Sample input N, M = 4, 4 Entrance, Treasure = 1, 4 corridors = [(1, 2), (2, 3), (3, 4), (4, 1)] # Running the function with sample input print(can_reach_and_return(N, M, Entrance, Treasure, corridors)) # Output should be YES"},{"question":"Given a string s, write a function to check if it can be converted to a palindrome by removing at most one character. If the string can be converted to a palindrome by removing one character or it is already a palindrome, return True. Otherwise, return False. Example: s = \\"abca\\" By removing the character \'b\', we get the string \\"aca\\", which is a palindrome. So, the function should return True. Work through the string from both ends towards the middle. Return True or False.","solution":"def valid_palindrome(s): Check if the input string can be converted to a palindrome by removing at most one character. def is_palindrome_range(i, j): # Check if s[i:j+1] is a palindrome return all(s[k] == s[j-k+i] for k in range(i, j)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Try skipping either the left or the right character return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True"},{"question":"You are given a string of uppercase English letters followed by several lines describing ranges within that string. Your task is to determine how many distinct letters are in each given range. -----Input----- Input consists of: - The first line containing a single string s (1 le |s| le 1000), the string of uppercase English letters. - An integer n (1 le n le 100), the number of ranges. - The next n lines each consisting of two integers l and r (1 le l le r le |s|), representing the starting (inclusive) and ending (inclusive) indices of the range, respectively. -----Output----- Output consists of n lines. Each line should contain a single integer, the number of distinct letters in the respective range. -----Examples----- Sample Input 1: ABCABCABC 3 1 3 1 6 4 9 Sample Output 1: 3 3 3 Sample Input 2: ABRACADABRA 2 1 11 3 7 Sample Output 2: 5 4","solution":"def count_distinct_letters_in_ranges(s, ranges): Returns the number of distinct letters in the given ranges of the string s. :param s: A string of uppercase English letters. :param ranges: A list of tuples, each containing two integers representing the start and end of a range. :return: A list of integers representing the number of distinct letters in each range. results = [] for l, r in ranges: # Subtract 1 from l and r to convert to 0-based index distinct_letters = set(s[l-1:r]) results.append(len(distinct_letters)) return results"},{"question":"George has a unique collection of N books, each with a distinct number of pages. He likes to read books in a series such that the total number of pages he reads in each series is the same. However, George also wants to limit the number of books he reads in a series to more than one. Can you determine the maximum number of books he can read in any series where the total number of pages is the same? ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the number of books. - The second line of each test case contains N integers, where the i-th integer represents the number of pages in the i-th book. ------ Output Format ------ For each test case, output the maximum number of books George can read in any series where the total number of pages is the same. If no such series is possible, output 0. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 100 1 ≤ text{Number of pages in a book} ≤ 1000 ------ Sample Input 1 ------ 2 3 100 200 300 4 50 50 50 50 ------ Sample Output 1 ------ 0 4 ------ Explanation 1 ------ Test case-1: There are no combinations of books where the total number of pages read will be the same for more than one book in the series. Test case-2: George can read all 4 books since the total number of pages is the same (50 pages each). Therefore, the maximum number of books in this series is 4.","solution":"from collections import defaultdict def max_books_in_series(T, test_cases): results = [] for i in range(T): N, pages = test_cases[i] page_count = defaultdict(int) for page in pages: page_count[page] += 1 max_series = 0 for count in page_count.values(): if count > 1: max_series = max(max_series, count) results.append(max_series) return results"},{"question":"Given an array of integers, you are to determine the maximum product that can be obtained from a subarray of the array. A subarray is a contiguous part of an array. -----Input----- The input consists of: - A single integer n (1 le n le 10^5), the number of elements in the array. - An array of n integers a_1, a_2, ..., a_n (-10 le a_i le 10), the elements of the array. -----Output----- Output the maximum product that can be obtained from a subarray of the array. The maximum product should be accurate to an absolute or relative error of at most 10^{-6}. -----Examples----- Sample Input: 5 2 3 -2 4 -1 Sample Output: 48 Sample Input: 3 -2 0 -1 Sample Output: 0","solution":"def max_product_subarray(nums): Returns the maximum product that can be obtained from a subarray of the array. if not nums: return 0 max_prod = min_prod = result = nums[0] for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result # Example execution n = 5 arr = [2, 3, -2, 4, -1] print(max_product_subarray(arr)) # Expected Output: 48"},{"question":"An online retail company is analyzing customer reviews to better understand their satisfaction with products. Each review is composed of several sentences, and the company wants to identify which sentences express positive sentiment and which express negative sentiment based on certain keywords. Your task is to classify each sentence in the reviews as positive, negative, or neutral. Keywords for positive sentiment are given in a list, as are keywords for negative sentiment. A sentence is classified as positive if it contains any word from the positive keyword list, negative if it contains any word from the negative keyword list, and neutral if it contains neither. ------ Input ------ The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000), representing the number of positive keywords and the number of negative keywords, respectively. The next n lines each contain a single positive keyword. The following m lines each contain a single negative keyword. After the keyword lists, there\'s an integer t (1 ≤ t ≤ 100) indicating the number of reviews. Each review consists of an integer s (1 ≤ s ≤ 100) indicating the number of sentences in that review, followed by s lines, each containing one sentence. Each sentence contains between 1 and 100 words, and each word consists of up to 20 lowercase alphabetic characters. ------ Output ------ For each review, output the classification (\\"positive\\", \\"negative\\", or \\"neutral\\") of each sentence in the order they appear, each on a new line. ------ Sample Input 1 ------- 3 2 happy love excellent poor bad 2 3 I love this product. The service was excellent. The delivery was poor. 2 This makes me happy. The item is bad. ------ Sample Output 1 ------- positive positive negative positive negative","solution":"def classify_sentences(positive_keywords, negative_keywords, reviews): Classifies each sentence in the reviews as positive, negative, or neutral. Args: positive_keywords (List[str]): List of positive keywords. negative_keywords (List[str]): List of negative keywords. reviews (List[List[str]]): List containing reviews with sentences. Returns: List[List[str]]: Nested list containing classification for each sentence. classifications = [] for review in reviews: review_classifications = [] for sentence in review: is_positive = any(word in sentence for word in positive_keywords) is_negative = any(word in sentence for word in negative_keywords) if is_positive: review_classifications.append(\\"positive\\") elif is_negative: review_classifications.append(\\"negative\\") else: review_classifications.append(\\"neutral\\") classifications.append(review_classifications) return classifications"},{"question":"Given a string `s` containing only alphanumeric characters, write a function to check if it forms a palindrome, considering only alphanumeric characters and ignoring cases. Example 1: Input: \\"A man, a plan, a canal: Panama\\" Output: true Explanation: \\"amanaplanacanalpanama\\" is a palindrome. Example 2: Input: \\"race a car\\" Output: false Explanation: \\"raceacar\\" is not a palindrome. Function Signature: ```python def isPalindrome(s: str) -> bool: # Your code here ``` Constraints: - The input string `s` has length between 0 and 2 * 10^5. Note: You can use helper functions if needed.","solution":"def isPalindrome(s: str) -> bool: Check if the given string is a palindrome, considering only alphanumeric characters and ignoring cases. # Create a filtered string with only alphanumeric characters and convert to lowercase filtered_str = \'\'.join(char.lower() for char in s if char.isalnum()) # Reverse the filtered string reversed_str = filtered_str[::-1] # Check if the filtered string is equal to its reverse return filtered_str == reversed_str"},{"question":"A sequence of numbers is called a \\"Zigzag Sequence\\" if the differences between consecutive elements strictly alternate between positive and negative. For example, the sequence [1, 3, 2, 5, 3] is a Zigzag Sequence because the differences (3-1)=2, (2-3)=-1, (5-2)=3, and (3-5)=-2 strictly alternate. Write a function `longestZigzag` that takes an array of integers and returns the length of the longest Zigzag Sequence that can be formed from the elements of the array. Example: ```python longestZigzag([1, 7, 4, 9, 2, 5]) ➞ 6 longestZigzag([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 2 longestZigzag([70, 55, 13, 2, 99, 2, 80, 80, 80, 80, 80, 80, 80, 80, 80]) ➞ 5 ``` Consider edge cases as well, such as when the array is empty or has only one element.","solution":"def longestZigzag(sequence): if not sequence: return 0 if len(sequence) == 1: return 1 up = [1] * len(sequence) down = [1] * len(sequence) for i in range(1, len(sequence)): for j in range(i): if sequence[i] > sequence[j]: up[i] = max(up[i], down[j] + 1) elif sequence[i] < sequence[j]: down[i] = max(down[i], up[j] + 1) return max(up[-1], down[-1])"},{"question":"A logistics company is developing a system to optimize the delivery routes for its delivery trucks across a city. The city can be represented as a grid of size n x n, with each cell either being a building (represented by a 1) or a road (represented by a 0). The company wants to place k distribution centers on the roads (cells with 0) such that the furthest distance from any cell to the nearest distribution center is minimized. The distance between two cells (i1, j1) and (i2, j2) is defined as |i1 - i2| + |j1 - j2|, which is the Manhattan distance. Write a program to determine the optimal placement of k distribution centers that minimizes the maximum distance from any cell to the nearest distribution center. Input The first line contains two integers n (2 ≤ n ≤ 1000), k (1 ≤ k ≤ n^2), representing the size of the grid and the number of distribution centers respectively. The next n lines each contain n integers (either 0 or 1) representing the grid. Output Print k pairs of integers, each pair (i, j) representing the row and column index of a road cell where a distribution center will be placed. If there are multiple solutions, you can print any of them. Examples Input 5 3 0 1 0 0 1 0 0 1 1 0 1 0 0 0 1 1 1 0 0 0 0 1 0 0 0 Output 1 1 3 2 5 3 Input 4 2 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 Output 1 1 4 4 Note In the first sample, one of the optimal solutions is to place distribution centers at (1,1), (3,2), and (5,3). This minimizes the maximum distance from any cell to the nearest distribution center. In the second sample, one of the optimal solutions is to place distribution centers at (1,1) and (4,4), ensuring that the furthest cell is still relatively close to a center.","solution":"import heapq def optimize_distribution_centers(n, k, grid): def possible_positions(): positions = [] for i in range(n): for j in range(n): if grid[i][j] == 0: positions.append((i, j)) return positions def max_manhattan_distance(centers): max_dist = 0 for i in range(n): for j in range(n): min_dist = float(\'inf\') for ci, cj in centers: min_dist = min(min_dist, abs(i - ci) + abs(j - cj)) max_dist = max(max_dist, min_dist) return max_dist positions = possible_positions() best_centers = [] best_max_distance = float(\'inf\') heapq.heapify(positions) def search(centers): nonlocal best_centers, best_max_distance if len(centers) == k: max_dist = max_manhattan_distance(centers) if max_dist < best_max_distance: best_max_distance = max_dist best_centers = centers[:] return for pos_index in range(len(positions)): center = positions[pos_index] remaining_positions = positions[pos_index+1:] search(centers + [center]) positions[pos_index] = center # backtrack search([]) return best_centers"},{"question":"An online retailer is interested in analyzing the purchasing patterns of its customers to offer better recommendations. One useful metric is the \\"consistency\\" of a customer\'s shopping behavior. The retailer defines the consistency of a customer based on the frequency distribution of item categories purchased over a period of time. You are provided with data for multiple customers, where each customer\'s shopping history is represented by a list of item categories they have purchased. The consistency of a customer\'s shopping behavior is defined as follows: 1. Calculate the frequency of each category in the customer\'s purchase history. 2. Compute the mean frequency of these categories. 3. The consistency score is the number of categories whose frequency is equal to the mean frequency. Write a program to calculate the consistency score for each customer. Input Format: - The first line contains an integer, `tc`, denoting the number of test cases. - For each test case: - The first line contains an integer, `n`, denoting the number of items purchased by the customer. - The next line contains `n` space-separated integers denoting the categories of the items purchased by the customer. Output Format: - For each test case, print the consistency score of the customer\'s shopping behavior. Constraints: - 1 ≤ Test Cases ≤ 50 - 1 ≤ n ≤ 10^5 - 1 ≤ category ≤ 100 SAMPLE INPUT 2 5 1 1 2 2 3 6 4 4 4 5 5 6 SAMPLE OUTPUT 2 1 Explanation In the first case, the customer bought items from categories [1, 1, 2, 2, 3]. The frequencies are {1: 2, 2: 2, 3: 1}. The mean frequency is (2+2+1)/3 = 5/3 ≈ 1.67. The categories with frequencies equal to the mean (here rounded down to the nearest integer) are category 2 and category 3, so the consistency score is 2. In the second case, the customer bought items from categories [4, 4, 4, 5, 5, 6]. The frequencies are {4: 3, 5: 2, 6: 1}. The mean frequency is (3+2+1)/3 ≈ 2. The only category with a frequency equal to 2 is category 5, so the consistency score is 1.","solution":"def calculate_consistency_score(purchase_history): from collections import Counter n = len(purchase_history) if n == 0: return 0 frequencies = list(Counter(purchase_history).values()) mean_frequency = sum(frequencies) / len(frequencies) consistency_score = sum(1 for freq in frequencies if freq == round(mean_frequency)) return consistency_score def process_test_cases(test_cases): results = [] for test_case in test_cases: n = test_case[0] purchase_history = test_case[1] results.append(calculate_consistency_score(purchase_history)) return results # Reading input def main(): import sys input = sys.stdin.read data = input().split() index = 0 tc = int(data[index]) index += 1 test_cases = [] for _ in range(tc): n = int(data[index]) index += 1 purchase_history = list(map(int, data[index:index + n])) index += n test_cases.append((n, purchase_history)) results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"Your task is to write a program that determines whether a knight can occupy any safe positions on a chessboard, given a set of enemy queens on the board. A knight can move to a position that is not under attack by any queens. In chess, a knight moves in an \\"L\\" shape: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. A knight attacks a position if it can move to that position in one turn. A queen attacks all positions in the same row, column, and both diagonals from its position. Your program needs to decide whether there exists at least one safe position on the board where the knight can move. # Input The input consists of multiple datasets. Each dataset represents one chessboard configuration and follows this format: ```plaintext N M q1_x q1_y q2_x q2_y ... qM_x qM_y ``` - The first line of the dataset contains two integers `N` and `M` (4 ≤ N ≤ 20, 0 ≤ M ≤ N^2). `N` represents the size of the chessboard (an N x N board) and `M` represents the number of queens on the board. - The following `M` lines each represent the coordinates of a queen on the board. `qi_x` and `qi_y` are the 0-based row and column indices of the i-th queen. - The input ends with a line containing two zeros. # Output For each dataset, print \\"Yes\\" if there is a safe position for the knight, or print \\"No\\" otherwise. # Example Input ```plaintext 8 2 0 0 7 7 4 0 3 3 0 0 4 2 ``` Output ```plaintext Yes No Yes ``` # Explanation In the first case, despite the two queens, there are still safe positions for the knight on the 8x8 board. In the second case, every possible position on the 4x4 board is under attack by at least one queen, thus no safe positions exist for the knight. In the third case, there are no queens on the 4x2 board, so the entire board is safe for the knight.","solution":"def is_safe_position(n, m, queens): def under_attack(x, y): for qx, qy in queens: if qx == x or qy == y or abs(qx - x) == abs(qy - y): return True return False for x in range(n): for y in range(n): if not under_attack(x, y): return \\"Yes\\" return \\"No\\" def find_safe_positions(datasets): results = [] for dataset in datasets: n, m = dataset[0] queens = dataset[1:] results.append(is_safe_position(n, m, queens)) return results"},{"question":"Consider an infinite 2D grid with coordinates (x, y), where both x and y can be any integer. You are initially at the origin point (0, 0), and you want to reach the destination point (n, m). From any point (x, y), you can move to the following four points in a single step: - (x + 1, y) - (x - 1, y) - (x, y + 1) - (x, y - 1) However, there are certain blocks on the grid that you cannot move to. Given a list of blocked points, determine the minimum number of steps required to reach the destination point (n, m) from the origin (0, 0) while avoiding the blocked points. If the destination is unreachable, return -1. Input The first line of input contains two integers n and m (-10^6 ≤ n, m ≤ 10^6), representing the coordinates of the destination. The second line contains an integer k (0 ≤ k ≤ 10^5), representing the number of blocked points. Each of the next k lines contains two integers xi and yi (-10^6 ≤ xi, yi ≤ 10^6), representing the coordinates of each blocked point. Output Print a single integer, the minimum number of steps required to reach the destination, or -1 if it\'s impossible. Example Input 3 4 2 1 2 2 3 Output 7 Explanation The minimum path from (0, 0) to (3, 4) while avoiding the blocked points (1, 2) and (2, 3) is 7 steps. One possible path is: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (3, 1) -> (3, 2) -> (3, 3) -> (3, 4)","solution":"from collections import deque def min_steps(n, m, blocked): Returns the minimum number of steps required to reach (n, m) from (0, 0) while avoiding blocked points. If the destination is unreachable, returns -1. # Convert blocked points to a set for fast lookup blocked_set = set(map(tuple, blocked)) # Edge case: starting point is blocked if (0, 0) in blocked_set: return -1 # Edge case: destination itself is blocked if (n, m) in blocked_set: return -1 # Use BFS for the shortest path problem on unweighted grid queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set((0, 0)) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # possible moves while queue: x, y, steps = queue.popleft() # If destination is reached if (x, y) == (n, m): return steps # Try all possible moves for dx, dy in directions: nx, ny = x + dx, y + dy if (nx, ny) not in visited and (nx, ny) not in blocked_set: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 # Destination is unreachable"},{"question":"Write a function that takes in a list of integers and returns a new list containing only the even integers from the input list. The input list will contain at least one number and no more than 20 numbers. Ensure that the order of the numbers in the returned list matches the order in which they appeared in the input list. You may assume that the input list contains only integers. Example: - Input: [1, 2, 3, 4, 5] - Output: [2, 4] - Input: [10, 21, 32, 43, 54] - Output: [10, 32, 54]","solution":"def filter_even_numbers(numbers): Returns a new list containing only the even integers from the input list. Args: numbers (list): A list of integers. Returns: list: A list of even integers. return [num for num in numbers if num % 2 == 0]"},{"question":"Suzuki recently opened his own martial arts dojo, and he offers different class packages for his students. To determine the most popular class package, Suzuki needs to analyze the registration data. Each class package can be identified by a unique identifier (alphanumeric string), and the registration data is provided as a list of identifiers. Suzuki wants to find out which class package has the most registrations. Write a function that takes a list of class package identifiers as input and returns the identifier of the most popular class package. If multiple class packages have the same number of registrations, return the one that appears first in the list. Here is an example input: ```python registrations = [\'A1\', \'B2\', \'C3\', \'A1\', \'B2\', \'A1\', \'C3\', \'A1\', \'B2\'] ``` Here is an example return from your function: ```python \'A1\' ``` In this example, class package \'A1\' appears 4 times, \'B2\' appears 3 times, and \'C3\' appears 2 times, so the function returns \'A1\'. If the input list is empty, the function should return `None`. Note that the identifiers are case-sensitive and you should consider \'a1\' different from \'A1\'.","solution":"def most_popular_class(registrations): Returns the identifier of the most popular class package. If multiple class packages have the same number of registrations, returns the one that appears first in the list. If the list is empty, returns None. if not registrations: return None from collections import Counter counts = Counter(registrations) max_count = max(counts.values()) for identifier in registrations: if counts[identifier] == max_count: return identifier"},{"question":"Richland Airlines (RA) operates numerous flights between various cities. The airline company wants to optimize their flight schedule to minimize the number of aircraft required. Each aircraft, once deployed, will fly a given schedule and remain available the next day for the same schedule. Your task is to write a program to calculate the minimum number of aircraft needed to cover all the scheduled flights. Each flight has a specified departure and arrival time, and you\'re given multiple flight schedules. An aircraft can handle multiple flights per day, as long as the next flight departs after the arrival of the previous one. Input The input consists of multiple datasets. Each dataset is formatted as follows. N F d1 a1 d2 a2 . . . dF aF The first line of each dataset contains two integers, N and F (1 ≤ N ≤ 100, 1 ≤ F ≤ 1000). N represents the number of cities and F represents the number of flights. The following F lines each contain two integers, di and ai, representing the departure and arrival times of a flight (0 ≤ di < ai ≤ 24 * 60). The departure and arrival times are given in minutes from the start of the day. The end of the input is identified by a line containing \\"0 0\\". Output For each dataset, print the minimum number of aircraft required to operate all the flights. Example Input 3 3 480 600 610 720 300 360 3 4 0 200 200 400 400 600 600 800 0 0 Output 1 1 Explanation In the first dataset, one aircraft is sufficient to handle all the flights: - Flight 1 (480 to 600) - Flight 2 (610 to 720) - Flight 3 (300 to 360) In the second dataset, an aircraft can also handle all the flights as one flight concludes before the next one starts: - Flight 1 (0 to 200) - Flight 2 (200 to 400) - Flight 3 (400 to 600) - Flight 4 (600 to 800)","solution":"def min_aircraft_required(datasets): results = [] for dataset in datasets: N, F = dataset[0] flights = dataset[1] if N == 0 and F == 0: break # Sort flights by departure time flights.sort() # Use a min-heap to keep track of aircraft availability import heapq aircrafts = [] for dep, arr in flights: if aircrafts and aircrafts[0] <= dep: heapq.heappop(aircrafts) # remove the available aircraft heapq.heappush(aircrafts, arr) # add the aircraft with its new availability time results.append(len(aircrafts)) return results"},{"question":"Problem Given an n x n matrix filled with integers, find the maximum sum of any row, column, or diagonal within the matrix. A diagonal can be from top-left to bottom-right or from top-right to bottom-left. Write a function that takes the matrix as an input and returns the maximum sum. Constraints The input matrix will satisfy the following conditions: * The matrix is a square matrix with size n x n, where 2 ≤ n ≤ 100. * Each element in the matrix is an integer within the range [-10^4, 10^4]. Function Signature ```python def max_sum(matrix: List[List[int]]) -> int: ``` Input The input is given in the following format: * An integer n (the size of the matrix) * A list of lists of integers as the n x n matrix Output Return an integer which is the maximum sum of any row, column, or diagonal in the given matrix. Example Input ``` 3 [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output ``` 24 ``` Explanation The maximum sum is 24, which is the sum of the diagonal from `7, 5, 3`.","solution":"from typing import List def max_sum(matrix: List[List[int]]) -> int: n = len(matrix) max_sum_result = float(\'-inf\') # Calculate row and column sums for i in range(n): row_sum = sum(matrix[i]) col_sum = sum(matrix[j][i] for j in range(n)) max_sum_result = max(max_sum_result, row_sum, col_sum) # Calculate main diagonal (top-left to bottom-right) main_diagonal_sum = sum(matrix[i][i] for i in range(n)) max_sum_result = max(max_sum_result, main_diagonal_sum) # Calculate anti-diagonal (top-right to bottom-left) anti_diagonal_sum = sum(matrix[i][n-1-i] for i in range(n)) max_sum_result = max(max_sum_result, anti_diagonal_sum) return max_sum_result"},{"question":"You are given two strings, `source` and `target`. Your goal is to transform the `source` string into the `target` string. You can perform the following operations on the `source` string: 1. Insert a character at any position. 2. Remove a character from any position. 3. Replace a character with another character at any position. Write a function that computes the minimum number of operations required to transform the `source` string into the `target` string. Input The input consists of two lines: - The first line contains the `source` string (1 ≤ length of source ≤ 1000). - The second line contains the `target` string (1 ≤ length of target ≤ 1000). Output Print the only integer — the minimum number of operations needed to transform the `source` string into the `target` string. Examples Input kitten sitting Output 3 Input flaw lawn Output 2 Note In the first example, `kitten` can be transformed into `sitting` with the following operations: 1. Replace \'k\' with \'s\' (`kitten` -> `sitten`) 2. Replace \'e\' with \'i\' (`sitten` -> `sittin`) 3. Insert \'g\' at the end (`sittin` -> `sitting`) In the second example, `flaw` can be transformed into `lawn` with the following operations: 1. Remove \'f\' from the beginning (`flaw` -> `law`) 2. Insert \'n\' at the end (`law` -> `lawn`)","solution":"def min_operations(source, target): Returns the minimum number of operations required to transform source string into target string. m = len(source) n = len(target) # Create a table to store results of subproblems dp = [[0 for x in range(n + 1)] for x in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If the source string is empty, then insert all characters of target if i == 0: dp[i][j] = j # Min. operations = j # If the target string is empty, then remove all characters of source elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are same, ignore the last character # and recur for the remaining substring elif source[i-1] == target[j-1]: dp[i][j] = dp[i-1][j-1] # If the last character is different, consider all possibilities # and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"\\"Find the Missing Element!\\" Detective Conan has encountered a tricky puzzle. He has two groups of numbers, but one number from the first group has been removed to create the second group. Your task is to help him find the missing number from the first group. Given two lists of integers, where the second list is the same as the first list but with one element missing, find the missing element. -----Input----- The first line contains an integer, T, the number of test cases. Each test case consists of two lines: - The first line contains an integer, N, the number of elements in the first list. - The second and third lines each contain N-1 space-separated integers, representing the elements of the second and first lists respectively. -----Output----- For each test case, output the missing element. -----Constraints----- 1 <= T <= 100 1 <= N <= 1000 1 <= A[i] <= 10^9 -----Example----- Input: 2 5 1 2 3 4 1 2 3 4 5 3 6 7 7 6 7 Output: 5 7","solution":"def find_missing_element(test_cases): For each test case, find the missing element from the first list. Args: test_cases (list of tuples): Each tuple has (N, list1, list2) where list1 is the shorter list (N-1 elements), and list2 is the original list (N elements). Returns: list: A list of the missing elements for each test case. results = [] for N, lst1, lst2 in test_cases: sum_lst1 = sum(lst1) sum_lst2 = sum(lst2) missing_element = sum_lst2 - sum_lst1 results.append(missing_element) return results"},{"question":"You are given the task of generating a special sequence of numbers called the \\"Zigzag Sequence\\". The sequence starts with the number 1. Then the next number is less than 1 but the next number after that is greater than the previous. This continues alternating between less than and greater than the previous number. Given an integer n, generate the first n terms of the Zigzag Sequence. Example 1: Input: n = 5 Output: 1 0 2 1 3 Explanation: Start with 1, the next number is 0 (less than 1), the next is 2 (greater than 0), then 1 (less than 2), then 3 (greater than 1). Example 2: Input: n = 3 Output: 1 0 2 Explanation: Start with 1, the next number is 0 (less than 1), then 2 (greater than 0). Your Task: You do not need to read input or print anything. Your task is to complete the function zigzagSequence(), which takes n as an input parameter and returns a list of integers containing the first n numbers of the Zigzag sequence. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 10^{5}","solution":"def zigzagSequence(n): Generates the first n terms of the Zigzag Sequence. Parameters: n (int): Number of terms in the sequence Returns: list: A list containing the first n terms of the Zigzag sequence if n == 1: return [1] sequence = [1] current_value = 1 for i in range(1, n): if i % 2 == 1: current_value -= 1 else: current_value += 2 sequence.append(current_value) return sequence"},{"question":"An emergency response team needs to be dispatched to various disaster sites across a city. There are N disaster sites, indexed from 1 to N. The sites must be prioritized based on the severity of the disaster at each site. Each site has a severity level S_i. The emergency response team can only respond to sites in descending order of severity, starting with the highest severity first. Given the severity levels of the N sites, write a program to determine the order in which the sites should be responded to, from highest to lowest severity. If two sites have the same severity, they should be responded to in order of their index (i.e., a site with a smaller index should be prioritized). -----Constraints----- - All values in input are integers. - 1 leq N leq 100 - 1 leq S_i leq 100 -----Input----- Input is given from Standard Input in the following format: N S_1 S_2 ... S_N -----Output----- Print the indices of the sites in the order they should be responded to, separated by spaces. -----Sample Input----- 5 10 50 20 50 30 -----Sample Output----- 2 4 5 3 1 The response team should respond to site 2 first (severity 50), then site 4 (severity 50), then site 5 (severity 30), then site 3 (severity 20), and finally site 1 (severity 10).","solution":"def prioritize_sites(N, severity_levels): This function takes the number of sites N and their respective severity levels, then returns the indices of the sites sorted by descending severity. :param N: Number of disaster sites :param severity_levels: List of severity levels for each site :return: List of indices sorted by severity, descending indexed_severity = list(enumerate(severity_levels, 1)) sorted_sites = sorted(indexed_severity, key=lambda x: (-x[1], x[0])) return [index for index, severity in sorted_sites] # Example Usage N = 5 severity_levels = [10, 50, 20, 50, 30] print(prioritize_sites(N, severity_levels)) # Output: [2, 4, 5, 3, 1]"},{"question":"Preface A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Checking if a number is prime can be computationally intensive, especially for large numbers. The Problem Create a function `is_prime` that checks if a given positive integer is a prime number. The function should return `True` if the number is prime and `False` otherwise. Additionally, implement a function `list_primes` that returns a list of all prime numbers up to a given number `n` (inclusive). # Requirements 1. `is_prime(n)`: returns a boolean indicating whether `n` is prime. 2. `list_primes(n)`: returns a list of all prime numbers from 2 to `n`. Sample Input ```python is_prime(5) # should return True is_prime(4) # should return False list_primes(10) # should return [2, 3, 5, 7] list_primes(15) # should return [2, 3, 5, 7, 11, 13] ``` The functions should handle valid integers `>= 2` for `list_primes` and `>= 1` for `is_prime`.","solution":"def is_prime(n): Checks if the number n is a prime number. Parameters: n (int): The number to check. Returns: bool: True if n is prime, False otherwise. if n <= 1: return False if n in (2, 3): return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def list_primes(n): Returns a list of all prime numbers up to n (inclusive). Parameters: n (int): The upper limit of the range to check for primes. Returns: List[int]: A list of prime numbers from 2 to n. primes = [] for number in range(2, n + 1): if is_prime(number): primes.append(number) return primes"},{"question":"Write a function to solve the following problem: You are given a string `s` representing a chemical formula. For example, \\"H2O\\" or \\"CH3CH2OH\\". Each symbol in the formula is an element, followed by a count indicating the number of atoms. If the count is missing, it means there is only one atom of that element. Your task is to compute the total number of each type of atom in the formula. For example: ``` \\"H2O\\" -> H: 2, O: 1 \\"CH3CH2OH\\" -> C: 2, H: 6, O: 1 ``` Please note that the formula may contain nested parts with parentheses. For example: ``` \\"Mg(OH)2\\" -> Mg: 1, O: 2, H: 2 \\"K4(ON(SO3)2)2\\" -> K: 4, O: 14, N: 2, S: 4 ``` To parse these formulas and compute the total number of each atom, you need to account for nested parentheses and properly accumulate each element count. # Input - `s`: A string representing the chemical formula. The length of `s` will be between 1 and 1000 characters. # Output - Return a dictionary where the keys are element symbols and the values are the total count of atoms of that element in the molecule. # Examples ```python chemical_formula(\\"H2O\\") # Output: {\\"H\\": 2, \\"O\\": 1} chemical_formula(\\"CH3CH2OH\\") # Output: {\\"C\\": 2, \\"H\\": 6, \\"O\\": 1} chemical_formula(\\"Mg(OH)2\\") # Output: {\\"Mg\\": 1, \\"O\\": 2, \\"H\\": 2} chemical_formula(\\"K4(ON(SO3)2)2\\") # Output: {\\"K\\": 4, \\"O\\": 14, \\"N\\": 2, \\"S\\": 4} ``` # Function Signature ```python def chemical_formula(s: str) -> dict: # Your code here ``` **Hints:** - Use a stack to handle nested parentheses. - Parse the formula from left to right. - For each element and count, update the respective entry in the dictionary. - Remember to handle default counts of 1 for elements without explicit counts.","solution":"def chemical_formula(s: str) -> dict: import re from collections import defaultdict, deque def multiply_formula(formula, multiplier): for element in formula: formula[element] *= multiplier return formula def parse_formula(s): stack = deque() current_formula = defaultdict(int) i = 0 n = len(s) while i < n: if s[i] == \'(\': stack.append(current_formula) current_formula = defaultdict(int) i += 1 elif s[i] == \')\': i += 1 num = 0 while i < n and s[i].isdigit(): num = num * 10 + int(s[i]) i += 1 num = num if num != 0 else 1 current_formula = multiply_formula(current_formula, num) previous_formula = stack.pop() for k, v in current_formula.items(): previous_formula[k] += v current_formula = previous_formula else: element = s[i] i += 1 if i < n and s[i].islower(): element += s[i] i += 1 num = 0 while i < n and s[i].isdigit(): num = num * 10 + int(s[i]) i += 1 num = num if num != 0 else 1 current_formula[element] += num return current_formula return dict(parse_formula(s))"},{"question":"A company requires you to build a custom sorting algorithm for their employee records. Each employee record consists of a name and an age. The records need to be sorted primarily by age in ascending order. If two employees have the same age, they should be sorted by their names in alphabetical order. -----Input----- The first line contains a single positive integer n (1 <= n <= 100) representing the number of employees. The next n lines each contain a string representing the name of an employee (1 <= length of name <= 100) and an integer representing the age of that employee (0 <= age <= 100). -----Output----- Output the sorted list of employee names, one per line following the sorting criteria defined above. -----Example----- Input: 4 Alice 30 Bob 25 Eve 25 Charlie 30 Output: Eve Bob Alice Charlie Explanation: Employees are first sorted by age. Both Bob and Eve have the same age (25), so they are sorted alphabetically. Alice and Charlie have the same age (30), so they are also sorted alphabetically.","solution":"def sort_employees(employees): Sorts a list of employees by age, and by name alphabetically if ages are the same. Args: employees (list of tuple): List of tuples where each tuple contains a name (str) and an age (int). Returns: list of tuple: Sorted list of employees. return sorted(employees, key=lambda employee: (employee[1], employee[0])) def format_employee_list(employees): Formats the sorted list of employees to display only names. Args: employees (list of tuple): Sorted list of tuples where each tuple contains a name (str) and an age (int). Returns: list of str: List of employee names. return [employee[0] for employee in employees]"},{"question":"You are given a matrix filled with non-negative integers, where each cell represents the cost of passing through that cell. You are currently positioned at the top-left corner of the matrix and your goal is to reach the bottom-right corner. You can only move either down or right at any point in time. Find the minimum cost path to reach the bottom-right corner of the matrix. Example: Input: grid = [ [1,3,1], [1,5,1], [4,2,1] ] Output: 7 Explanation: The path that minimizes the cost is 1 → 3 → 1 → 1 → 1 → 1 and the total cost is 7.","solution":"def minPathSum(grid): Returns the minimum cost to reach the bottom-right corner from the top-left corner of the grid. :param grid: List[List[int]] - The grid representing the costs. :return: int - The minimum cost path. if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) # Initialize the first row for col in range(1, cols): grid[0][col] += grid[0][col - 1] # Initialize the first column for row in range(1, rows): grid[row][0] += grid[row - 1][0] # Fill up the rest of the grid for row in range(1, rows): for col in range(1, cols): grid[row][col] += min(grid[row - 1][col], grid[row][col - 1]) return grid[rows - 1][cols - 1]"},{"question":"You have an array of n integers, and you need to determine if there is a non-empty subset of this array whose sum is zero. In other words, you should decide if you can select some of the elements of the array (possibly just one element) such that their sum is zero. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 20) representing the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^6) — the elements of the array. -----Output----- Output \\"YES\\" if there is a non-empty subset whose sum is zero, and \\"NO\\" otherwise. -----Examples----- Input 5 -1 3 2 -2 5 Output YES Input 4 1 2 3 4 Output NO Input 6 1 -1 2 -2 3 -3 Output YES -----Note----- In the first sample test, the subset {2, -2} sums to zero. In the second sample test, there is no subset that sums to zero. In the third sample test, the subset {-1, 1} sums to zero.","solution":"from itertools import combinations def subset_sum_zero(n, arr): Determines if there is a non-empty subset whose sum is zero. Args: n : int : number of elements in the array arr : list of int : array elements Returns: str : \\"YES\\" if there is a non-empty subset whose sum is zero, \\"NO\\" otherwise # Check all possible subsets by generating combinations for size in range(1, n + 1): for subset in combinations(arr, size): if sum(subset) == 0: return \\"YES\\" return \\"NO\\""},{"question":"Memory-efficient Linked List Reversal You are tasked with reversing a linked list while minimizing memory usage. Your program should modify the original linked list without allocating any additional data structures (e.g., arrays, lists, other linked lists). Write a function that takes in the head of a singly linked list and returns its head after the list has been reversed. Input: The input consists of a singly linked list. Output: The function should return the head of the reversed singly linked list. Function Signature: ```python def reverse_linked_list(head: ListNode) -> ListNode: ``` Here, `ListNode` is defined as: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` Constraints: - The linked list may be empty, which means the head node is `None`. - Nodes in the linked list have unique integer values. - The size of the linked list can be up to 10^6 nodes. Example: ```python # Example 1: # Input: head = 1 -> 2 -> 3 -> 4 -> 5 -> None # Output: 5 -> 4 -> 3 -> 2 -> 1 -> None # Example 2: # Input: head = None # Output: None # Example 3: # Input: head = 1 -> None # Output: 1 -> None ```","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head: ListNode) -> ListNode: Reverses a singly linked list. Args: head (ListNode): The head of the singly linked list. Returns: ListNode: The new head of the reversed singly linked list. prev = None current = head while current: next_temp = current.next # Store next node current.next = prev # Reverse the link prev = current # Move prev to current current = next_temp # Proceed to next node return prev"},{"question":"Given a positive integer n, you are asked to find the number of ways to partition the set {1, 2, ..., n} into non-empty subsets such that each subset is a sequence of consecutive integers. Two partitions are different if there exists some subset that lies in one partition but not the other. For example, for n = 3, the following partitions are possible: {{1, 2, 3}}, {{1}, {2, 3}}, {{1, 2}, {3}}, {{1}, {2}, {3}}. Notice that each subset in the partition is a sequence of consecutive integers. Input The input consists of a single integer n (1 ≤ n ≤ 100). Output Print the number of partitions of the set {1, 2, ..., n} into non-empty subsets of consecutive integers. Examples Input 3 Output 4 Input 4 Output 8 Input 5 Output 16 Note In the first example, the valid partitions are: 1. {{1, 2, 3}} 2. {{1}, {2, 3}} 3. {{1, 2}, {3}} 4. {{1}, {2}, {3}} In the second example, the valid partitions are: 1. {{1, 2, 3, 4}} 2. {{1}, {2, 3, 4}} 3. {{1, 2}, {3, 4}} 4. {{1, 2, 3}, {4}} 5. {{1}, {2}, {3, 4}} 6. {{1}, {2, 3}, {4}} 7. {{1, 2}, {3}, {4}} 8. {{1}, {2}, {3}, {4}}","solution":"def count_partitions(n): Returns the number of ways to partition the set {1, 2, ..., n} into non-empty subsets such that each subset is a sequence of consecutive integers. # Base case: there\'s exactly 1 way to partition a set of size 0 dp = [1] + [0] * n # Compute the number of partitions for each value from 1 to n for i in range(1, n + 1): for j in range(i): dp[i] += dp[j] return dp[n]"},{"question":"Write a function that takes a positive integer `n` and returns the n-th number in the sequence defined as follows: - The first element is `1`. - For every `n ≥ 2`, the n-th element is the sum of the digits of the (n-1)-th element. For example, if the sequence starts with `[1]`, then the second element will be `1` because the sum of the digits of the first element (1) is 1. The third element will be `1` (sum of digits of 1). The sequence would continue as `[1, 1, 1, 1, ...]`. Example 1: Input: n = 5 Output: 1 Explanation: The sequence is [1, 1, 1, 1, 1]. The 5th element is 1. Example 2: Input: n = 10 Output: 1 Explanation: The sequence is [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]. The 10th element is 1. Example 3: Input: n = 12 Output: 1 Explanation: The sequence is [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]. The 12th element is 1. Example 4: Input: n = 2 Output: 1 Explanation: The sequence is [1, 1]. The 2nd element is 1. Your task: You do not need to read input or print anything. Implement the function `findNthElement` that takes an integer `n` and returns the n-th element of the sequence. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^5","solution":"def findNthElement(n): Returns the n-th number in the sequence defined as follows: - The first element is `1`. - For every `n ≥ 2`, the n-th element is the sum of the digits of the (n-1)-th element. Parameters: n (int): The position in the sequence. Returns: int: The n-th element in the sequence. return 1"},{"question":"A large software company has been facing an issue with their user feedback submissions. Each feedback consists of a string of words separated by spaces, but the users often include unnecessary punctuation marks at the end of some words. The company wants to clean up these feedback entries by removing any punctuation marks from the end of each word. Your task is to write a function that takes a string of words (each word can include lowercase alphabets and end with punctuation marks) and removes any punctuation mark from the end of each word. The words should be returned as a single string with words separated by single spaces. Note that the punctuation marks to be removed include: period (\'.\'), comma (\',\'), exclamation mark (\'!\'), and question mark (\'?\'). Words will not have punctuation marks in the middle and there will be no leading or trailing spaces in the input string. Input: - A single line containing a string s (1 ≤ s.length ≤ 106) where each word is separated by a single space. Output: - A single line containing the cleaned up string. Examples: Input: hello! there. how\'s, everyone? Output: hello there how\'s everyone Input: good? job! keep, going. Output: good job keep going Note: In the first example, the input string contains words followed by punctuation marks. The function should remove the punctuation marks and return the cleaned version of the string. In the second example, the input string has words with punctuation marks at the end. The function should remove these punctuation marks and return the cleaned string.","solution":"def clean_feedback(s): Takes a string of words, each possibly ending with punctuation marks, and removes any punctuation marks from the end of each word. Arguments: s -- input string containing words separated by spaces Returns: A cleaned string with punctuation marks removed from the end of each word. import string punctuation_marks = \\".,!? \\" words = s.split() cleaned_words = [word.rstrip(punctuation_marks) for word in words] return \\" \\".join(cleaned_words)"},{"question":"Alice is obsessed with analyzing her book collection. She has a collection of N books where each book has a certain number of pages P_i. Alice likes diverse reading experiences and is interested in finding collections of books with the most variation in page count. Specifically, she wants to find M contiguous books such that the difference between the maximum and minimum page counts among the selected books is maximized. Your task is to help Alice by identifying such a collection of books and computing that maximum difference. Input: The first line of the input contains an integer T denoting the number of test cases. The first line of every test-case contains two space-separated integers N and M. The second line of every test case contains N space-separated integers P_i denoting the number of pages in the i-th book. Output: For each test case, print the maximum difference between the maximum and minimum page counts among the chosen M contiguous books. Constraints: 1 ≤ N ≤ 100 1 ≤ M ≤ N 1 ≤ P_i ≤ 10^9 SAMPLE INPUT 1 5 3 150 80 200 300 50 SAMPLE OUTPUT 250 Explanation: You should choose the following group (80, 200, 300) in the same order that appears in the input. The maximum difference is max(80, 200, 300) - min(80, 200, 300) = 300 - 50 = 250.","solution":"def max_page_difference(T, test_cases): results = [] for case in test_cases: N, M, pages = case[\'N\'], case[\'M\'], case[\'pages\'] max_diff = 0 for i in range(N - M + 1): current_window = pages[i:i + M] current_diff = max(current_window) - min(current_window) max_diff = max(max_diff, current_diff) results.append(max_diff) return results"},{"question":"Write a function that takes a string containing a mathematical expression with parentheses, and returns a boolean indicating whether the parentheses are balanced. The expression may include integers, operators (+, -, *, /), and spaces. For example, the input \\"3 + (4 * (5 - 2))\\" should return True, while the input \\"3 + (4 * (5 - 2)\\" should return False.","solution":"def are_parentheses_balanced(expression): Returns True if the parentheses in the expression are balanced, False otherwise. stack = [] for char in expression: if char == \'(\': stack.append(\'(\') elif char == \')\': if not stack: return False stack.pop() return not stack"},{"question":"Arjun loves to play with numbers and he came up with an interesting problem involving the sum of digits. Given an integer X, he wants to figure out how many times he should replace X with the sum of its digits until X becomes a single-digit number. Help Arjun determine the number of replacements required for each given integer. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single integer X on a separate line. ------ Output Format ------ For each test case, output on a new line, the number of replacements required to make X a single-digit number. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ X ≤ 1,000,000 ------ Sample Input 1 ------ 3 57 999 1234 ------ Sample Output 1 ------ 2 2 2 ------ explanation 1 ------ Test case 1: Start with 57. - First replacement: 5 + 7 = 12 - Second replacement: 1 + 2 = 3 (single-digit) Hence, it takes 2 replacements for 57 to become a single-digit number. Test case 2: Start with 999. - First replacement: 9 + 9 + 9 = 27 - Second replacement: 2 + 7 = 9 (single-digit) Hence, it takes 2 replacements for 999 to become a single-digit number. Test case 3: Start with 1234. - First replacement: 1 + 2 + 3 + 4 = 10 - Second replacement: 1 + 0 = 1 (single-digit) Hence, it takes 2 replacements for 1234 to become a single-digit number.","solution":"def count_replacements_to_single_digit(X): Returns the number of replacements required to reduce the integer X to a single-digit number by summing its digits. replacements = 0 while X >= 10: X = sum(int(digit) for digit in str(X)) replacements += 1 return replacements def process_test_cases(test_cases): Process a list of test cases and return the results. Each test case is an integer X, and the output is the number of replacements required to make X a single-digit number. results = [] for X in test_cases: results.append(count_replacements_to_single_digit(X)) return results"},{"question":"You\'ve been given a list of integers representing the heights of buildings in a street. Each building has a unique height. A building is said to have a \\"sunset view\\" if it is not obstructed by another building to its west. Write a function that takes in a list of integers representing the building heights from east to west and returns a list of the heights of buildings that have a sunset view, ordered from west to east. -----Input:----- - The input should be a list with a single line of space-separated integers representing the heights of buildings from east to west. -----Output:----- - The function should output a list of heights of buildings with a sunset view, ordered from west to east. -----Constraints:----- - 1 leq text{len(buildings)} leq 10^5 - Each building height is an integer such that 1 leq text{height} leq 10^6 -----Sample Input:----- 4 2 3 1 -----Sample Output:----- 1 3 4 -----Explanation:----- From east to west: - Building with height 1 has no buildings obstructing its view to the west. - Building with height 3 is taller than the building with height 2 to its east. - Building with height 4 is taller than all the buildings to its east.","solution":"def sunset_views(buildings): This function takes in a list of integers representing building heights from east to west and returns a list of the heights of buildings that have a sunset view, from west to east. n = len(buildings) if n == 0: return [] sunset_buildings = [] max_height = 0 for i in range(n - 1, -1, -1): if buildings[i] > max_height: sunset_buildings.append(buildings[i]) max_height = buildings[i] return sunset_buildings"},{"question":"You are given an array of integers nums and an integer target. Write a program to determine if there are two distinct indices i and j in the array such that nums[i] + nums[j] equals target. If such a pair exists, return a list containing the indices [i, j] (0-based). If no such pair exists, return an empty list. Input: - First line contains an integer T, the number of test cases. - For each test case, the first line contains two integers n (the number of elements in nums) and target. - The second line contains n integers, the elements of nums. Output: - For each test case, output a single line. If a pair exists, output \\"i j\\", where i and j are the indices of the elements in nums that add up to the target. If no pair exists, output \\"-1\\". Constraints: 1 <= T <= 100 1 <= n <= 1000 -1000 <= nums[i] <= 1000 -1000 <= target <= 1000 Example: Input: 3 4 9 2 7 11 15 3 6 3 2 4 3 10 3 5 -3 Output: 0 1 1 2 -1","solution":"def two_sum(nums, target): Determines if there are two distinct indices i and j in the array such that nums[i] + nums[j] equals target. Returns a list containing the indices [i, j] if such a pair exists, otherwise returns an empty list. checked = {} for i, num in enumerate(nums): complement = target - num if complement in checked: return [checked[complement], i] checked[num] = i return [] def solve_two_sum_problem(T, test_cases): results = [] for case in test_cases: n, target = case[0] nums = case[1] result = two_sum(nums, target) if result: results.append(f\\"{result[0]} {result[1]}\\") else: results.append(\\"-1\\") return results"},{"question":"Given a string containing only lowercase alphabets, return the count of substrings that are palindromes. A palindrome is a word that reads the same forwards and backwards. **Notes:** * Single character substrings are considered palindromes. * The input string will have a maximum length of 10^5. Examples ```python count_palindromic_substrings(\\"abba\\") ==> 6 # The palindromic substrings are: \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", \\"abba\\" count_palindromic_substrings(\\"abc\\") ==> 3 # The palindromic substrings are: \\"a\\", \\"b\\", \\"c\\" count_palindromic_substrings(\\"aaa\\") ==> 6 # The palindromic substrings are: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\" ``` Try to implement the solution with optimal time complexity to handle large inputs efficiently.","solution":"def count_palindromic_substrings(s): Returns the count of palindromic substrings in the input string. :param s: Input string containing only lowercase alphabets :return: Number of palindromic substrings n = len(s) count = 0 for center in range(2 * n - 1): left = center // 2 right = left + center % 2 while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 return count"},{"question":"# Task Given a list of integers, write a function that finds the smallest contiguous subarray sum. For example, for the input list `[3, -4, 2, -8, 5, -1]`, the smallest contiguous subarray sum is `-10`, which comes from the subarray `[-4, 2, -8]`. # Input/Output - `[input]` list of integers `arr` A non-empty list containing integers - `[output]` an integer value The smallest sum of any contiguous subarray in the list","solution":"def smallest_contiguous_subarray_sum(arr): Returns the smallest sum of any contiguous subarray in the list. min_current = min_global = arr[0] for num in arr[1:]: min_current = min(num, min_current + num) if min_current < min_global: min_global = min_current return min_global"},{"question":"You are given two lists: textbf{listA} and textbf{listB}. Your task is to find all elements that are present in either of the lists but not in both. Write a function textbf{symmetric_difference}(listA, listB) that accepts two lists and returns a list containing the symmetric difference of the two. The resulting list should be sorted in ascending order. Input Format Two lists textbf{listA} and textbf{listB}, each containing integers. Constraints 1 leq text{len}(textbf{listA}), text{len}(textbf{listB}) leq 1000 Each integer in the lists can be any value within the range of a 32-bit integer. Output Format A list containing the symmetric difference of textbf{listA} and textbf{listB}, sorted in ascending order. Sample Input [ text{listA} = [1, 2, 3, 4, 5] ] [ text{listB} = [4, 5, 6, 7, 8] ] Sample Output [ [1, 2, 3, 6, 7, 8] ] **Explanation** In the given example, the elements 1, 2, and 3 are only in text{listA}, and 6, 7, and 8 are only in text{listB}, so they form the symmetric difference. The elements 4 and 5 are present in both lists and are therefore not included in the result.","solution":"def symmetric_difference(listA, listB): Returns a list containing the symmetric difference of listA and listB, sorted in ascending order. setA = set(listA) setB = set(listB) sym_diff = list((setA - setB) | (setB - setA)) return sorted(sym_diff)"},{"question":"You are given a two-dimensional grid representing a maze, where each cell can either be open (denoted by \'0\') or blocked (denoted by \'1\'). Your task is to find out if there is a path starting from the top-left corner of the maze (grid[0][0]) to the bottom-right corner of the maze (grid[n-1][m-1]). You can only move up, down, left, or right and cannot move diagonally or through blocked cells. Write a function `canEscape(grid)` that takes a list of lists of integers as input representing the grid and returns `true` if there is a path from the top-left corner to the bottom-right corner, and `false` otherwise. Example: ``` Input: grid = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0] ] Output: true ``` In this example, there is a path from the top-left corner to the bottom-right corner.","solution":"from collections import deque def canEscape(grid): Determines if there\'s a path from the top-left to the bottom-right corner of the grid. :param grid: List of lists of integers representing the maze grid (0 = open, 1 = blocked) :return: True if there is a path, False otherwise if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return False n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n - 1, m - 1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return False"},{"question":"Given an m x n integer grid grid, you need to follow these steps to identify a path starting from the top-left corner (0,0) and ending at the bottom-right corner (m-1,n-1). 1. From the cell (i,j) you can move either to: - (i+1,j) - moving downward. - (i,j+1) - moving rightward. 2. Along the path, you can modify at most one cell to make the path exist if it doesn\'t exist initially. The modified cell can be changed to any integer in the range [0,1000]. Write a function `int minModifyCells(int[][] grid)` to return the minimum number of cells that need to be modified to find such a path from the top-left corner to the bottom-right corner of the grid. If no such path exists, return -1. # Input: - An integer `m` representing the number of rows (1 ≤ m ≤ 1000). - An integer `n` representing the number of columns (1 ≤ n ≤ 1000). - A 2D `m x n` grid of integers (-1000 <= grid[i][j] <= 1000). # Output: - Print the minimum number of cells to be modified, or -1 if no such path exists. # Sample Input ```plaintext 3 3 1 1 -1 -1 1 1 2 2 1 ``` # Sample Output ```plaintext 0 ``` # Explanation Initially, there exists a path: (1,1) -> (1,1) -> (1,1) -> (2,1) -> (2,2) -> (1,2) So no modification is required: Hence the output is 0. # Sample Input ```plaintext 3 3 1 1 -1 -1 -1 1 2 2 1 ``` # Sample Output ```plaintext 1 ``` # Explanation In this case, there is no initial path from: (1,1) -> (1,1) -> (1,-1) After Changing (1,-1) to (1,1) a valid path is; (1,1) -> (1,1) -> (1,1) -> (2,1) -> (2,2) -> (1,2) So only one modification is required: Hence the output is 1.","solution":"def minModifyCells(grid): m, n = len(grid), len(grid[0]) # A helper function to check if a path exists from (0, 0) to (m-1, n-1) without any modifications def check_path(): if grid[0][0] == -1: return False visited = [[False]*n for _ in range(m)] stack = [(0, 0)] visited[0][0] = True while stack: x, y = stack.pop() if x == m-1 and y == n-1: return True for dx, dy in [(1, 0), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] != -1 and not visited[nx][ny]: visited[nx][ny] = True stack.append((nx, ny)) return False # If an initial path exists without any modification if check_path(): return 0 # Try modifying each cell once and check if a path can be created for i in range(m): for j in range(n): if grid[i][j] == -1: # consider only the cells that are blocked grid[i][j] = 0 if check_path(): return 1 grid[i][j] = -1 # backtrack # If no path can be created by modifying at most one cell return -1"},{"question":"Given a 2D matrix representing the availability of items in various stores, and a requirement list specifying the quantity of each type of item needed, find the minimum number of stores that must be visited to fulfill the requirement list. You do not need to buy all items from each store, only enough to meet the requirements. If the task cannot be accomplished, return -1. Example matrix = [ [2, 0, 1], [1, 3, 1], [0, 3, 4] ] requirements = [1, 4, 2] To fulfill the requirement list, you can visit store 1 and store 2. Therefore, the minimum number of stores required is 2. Function Description Complete the `min_stores` function. `min_stores` has the following parameters: - `matrix`: a 2D list of non-negative integers where each entry `matrix[i][j]` represents the quantity of item `j` available in store `i`. - `requirements`: a list of non-negative integers representing the quantity of each item needed. Returns - `int`: the minimum number of stores to visit to fulfill the requirements, or -1 if it is not possible. Input Format The first line contains two space-separated integers `n` and `m`, the number of stores and the number of different items, respectively. Each of the next `n` lines contains `m` space-separated integers representing the quantity of each item available in that store. The last line contains `m` space-separated integers representing the requirement list. Constraints - (1 leq n, m leq 100) - (0 leq matrix[i][j], requirements[j] leq 1000) Example Input 0 3 3 2 0 1 1 3 1 0 3 4 1 4 2 Example Output 0 2 Explanation 0 To fulfill the requirement list of `[1, 4, 2]`, you need to visit store 2 and store 3. The combined quantities will be `[1, 6, 5]`, which meets or exceeds the requirements. Example Input 1 2 3 2 1 1 0 0 2 3 1 1 Example Output 1 1 Explanation 1 To fulfill the requirement list of `[3, 1, 1]`, you need to visit store 3. The quantities meet the requirements exactly. Therefore, the minimum number of stores required is 1. Example Input 2 2 2 0 1 1 0 1 1 Example Output 2 2 Explanation 2 To fulfill the requirement list of `[1, 1]`, you need to visit both store 1 and store 2. The combined quantities will be `[1, 1]`, which meets the requirements. Therefore, the minimum number of stores required is 2. Example Input 3 2 2 1 0 1 0 4 1 Example Output 3 -1 Explanation 3 It is not possible to fulfill the requirement list of `[4, 1]` from the given stores.","solution":"from itertools import combinations def can_fulfill_requirements(matrix, requirements, selected_stores): item_count = [0] * len(requirements) for store in selected_stores: for j in range(len(requirements)): item_count[j] += matrix[store][j] for i in range(len(requirements)): if item_count[i] < requirements[i]: return False return True def min_stores(matrix, requirements): n = len(matrix) min_store_count = float(\'inf\') for r in range(1, n + 1): for selected_stores in combinations(range(n), r): if can_fulfill_requirements(matrix, requirements, selected_stores): min_store_count = min(min_store_count, r) break return min_store_count if min_store_count != float(\'inf\') else -1"},{"question":"Write a program to simulate a specific type of voting process. In a certain country, in order to avoid ties in elections, they have introduced a special rule in their voting process. If a voter changes their vote, all the previous votes for the previous candidate by this voter are considered void, and only the vote for the new candidate is counted. You are given the records of the votes cast by various voters. Each voter is identified by an ID, and you need to determine the number of votes each candidate gets after considering the special rule. -----Input----- The input contains several lines. Each line contains a voter ID and a candidate ID separated by a space: - Each voter ID is a positive integer. - Each candidate ID is also a positive integer. - The input ends when there are no more lines to read (EOF). -----Output----- Print each candidate ID along with the number of valid votes they received, one candidate per line. The output should be sorted by candidate IDs in ascending order. -----Examples----- Input 1 2 2 3 1 4 3 3 2 3 Output 2 0 3 2 4 1","solution":"from collections import defaultdict import sys def process_votes(input_lines): latest_votes = {} votes_count = defaultdict(int) for line in input_lines: voter_id, candidate_id = map(int, line.split()) if voter_id in latest_votes: previous_candidate_id = latest_votes[voter_id] votes_count[previous_candidate_id] -= 1 latest_votes[voter_id] = candidate_id votes_count[candidate_id] += 1 # Ensure sorted output by candidate ID sorted_candidates = sorted(votes_count.items()) result = [(candidate, count) for candidate, count in sorted_candidates] return result if __name__ == \\"__main__\\": input_lines = sys.stdin.read().strip().split(\'n\') results = process_votes(input_lines) for candidate, count in results: print(f\\"{candidate} {count}\\")"},{"question":"You are given an array of positive integers. Your task is to find the number of unique pairs ((i, j)) such that (1 leq i < j leq n) and (a_i + a_j) is an even number. -----Input----- The first line of the input contains an integer (n) ((2 le n le 100)) — the number of elements in the array. The second line contains (n) positive integers (a_1, a_2, ..., a_n) ((1 le a_i le 100)) — the elements of the array. -----Output----- Print the number of pairs ((i, j)) such that (1 leq i < j leq n) and (a_i + a_j) is an even number. -----Examples----- Input 5 1 2 3 4 5 Output 4 Input 6 10 20 30 40 50 60 Output 15 -----Note----- In the first example, the valid pairs are (1,3), (1,5), (2,4), and (4,5).","solution":"def count_even_sum_pairs(n, array): Returns the number of unique pairs (i, j) such that 1 ≤ i < j ≤ n and a_i + a_j is an even number. even_count = 0 odd_count = 0 for num in array: if num % 2 == 0: even_count += 1 else: odd_count += 1 even_pairs = (even_count * (even_count - 1)) // 2 odd_pairs = (odd_count * (odd_count - 1)) // 2 return even_pairs + odd_pairs"},{"question":"At the Annual Robotics Challenge, your team is assigned a task to evaluate the efficiency of their encoded transmission system. The encoded message contains the transmission length as an integer followed by a sequence of space-separated numbers representing the encoded message. Your job is to find out the smallest number in the sequence. Input format: An integer t, 1 ≤ t ≤ 50, denoting the number of test cases, followed by the transmission data for each test case: - The first line of each test case contains an integer l, 1 ≤ l ≤ 1000, representing the length of the sequence. - The second line contains l space-separated integers, ai, -10^6 ≤ ai ≤ 10^6, representing the encoded message. Output format: For each test case, output the smallest number in the sequence as a single integer. SAMPLE INPUT 3 5 3 1 4 1 5 4 10 20 30 40 6 -5 3 0 -2 4 1 SAMPLE OUTPUT 1 10 -5","solution":"def find_smallest_number(test_cases): results = [] for i in range(test_cases): _ = input().strip() # read the length of the sequence but it\'s not needed sequence = list(map(int, input().strip().split())) smallest_number = min(sequence) results.append(smallest_number) return results def process_input(input_lines): test_cases = int(input_lines[0]) index = 1 results = [] for _ in range(test_cases): l = int(input_lines[index]) # read the length of the sequence but it\'s not needed sequence = list(map(int, input_lines[index + 1].split())) smallest_number = min(sequence) results.append(smallest_number) index += 2 return results"},{"question":"You are given a sequence of non-negative integers. The task is to find a subsequence of this sequence such that the difference between its maximum and minimum element is minimized. Formally, you need to find indices i_1, i_2, ldots, i_k such that: - 1 le i_1 < i_2 < ldots < i_k le n - a_{i_1}, a_{i_2}, ldots, a_{i_k} is a subsequence of a - The value a_{max} - a_{min} is minimized, where a_{max} is the maximum among the selected elements and a_{min} is the minimum among the selected elements. Your goal is to find this subsequence and print its length and the difference between its maximum and minimum element. ------------Input--------- The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 1000) — the length of the sequence. The second line of each test case contains n non-negative integers a_1, a_2, ldots, a_n (0 le a_i le 10^6). ------------Output--------- For each test case, print two integers: the length of the subsequence and the minimum difference between the maximum and minimum element in that subsequence. ------------Example--------- Input 3 5 4 2 1 10 5 3 2 2 2 6 1 5 3 8 2 9 Output 2 0 3 0 2 1 ------------Note------------ In the first test case, the optimal subsequence is [2, 1] or [1, 2], with both having a minimum difference of 1. In the second test case, as all elements are equal, the difference is 0 and the length of the subsequence is the length of the original sequence. In the third test case, the optimal subsequence can be [1, 2] or [2, 3], both having a minimum difference of 1.","solution":"def find_min_range_subsequence(t, test_cases): results = [] for i in range(t): n, a = test_cases[i] if n == 1: results.append((1, 0)) continue sorted_a = sorted(a) min_diff = float(\'inf\') for j in range(1, n): min_diff = min(min_diff, sorted_a[j] - sorted_a[j - 1]) results.append((n, min_diff)) return results"},{"question":"Given an integer n, determine if it\'s possible to split this integer into two or more positive integers where each integer is a power of 2 (e.g., 1, 2, 4, 8, etc.) and the sum of these integers equals n. If it\'s possible, print \\"YES\\". Otherwise, print \\"NO\\". Note that each power of 2 can be used at most once. -----Input----- The first line contains an integer t (1 ≤ t ≤ 10000) — the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 10^9) — the integer to be split. -----Output----- For each test case, output \\"YES\\" if it is possible to split n as described, and \\"NO\\" otherwise. -----Examples----- Input 3 10 11 15 Output YES YES YES Input 2 5 7 Output YES YES","solution":"def can_split_into_powers_of_2(n): Determine if n can be split into two or more positive integers that are powers of 2. # A number can be expressed as sum of distinct powers of 2 # if it is not a power of 2 itself (which means it has more # than one set bit in its binary representation) return \\"YES\\" if n & (n - 1) != 0 else \\"NO\\" def process_test_cases(t, test_cases): results = [] for n in test_cases: results.append(can_split_into_powers_of_2(n)) return results"},{"question":"Milo has a collection of marbles, each marble having a specific weight. He likes to play a game where he tries to balance two bags of marbles such that the difference in their total weight is minimized. Write a program to help Milo find the minimum possible difference between the total weight of marbles in the two bags. Input The input is given in the following format: N w_1 w_2 ... w_N The first line contains the number of marbles N (1 leq N leq 1000). The second line contains N positive integers w_i (1 leq w_i leq 1000) representing the weights of the marbles. Output Output a single integer representing the minimum difference in weight between the two bags. Examples Input 4 2 3 5 7 Output 1 Input 5 1 2 3 4 5 Output 1","solution":"def min_weight_difference(N, weights): Returns the minimum possible difference between the total weight of marbles in two bags. total_weight = sum(weights) dp = [0] * (total_weight // 2 + 1) for weight in weights: for j in range(total_weight // 2, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) return total_weight - 2 * dp[total_weight // 2] # Example Usage # N = 4 # weights = [2, 3, 5, 7] # print(min_weight_difference(N, weights)) # Output: 1 # N = 5 # weights = [1, 2, 3, 4, 5] # print(min_weight_difference(N, weights)) # Output: 1"},{"question":"Given a string consisting of lowercase English letters, your task is to find out the number of ways to partition the string into contiguous substrings such that each substring is a palindrome. Since the number of ways can be large, return the result modulo 10^9 + 7. ------ Input ------ The first line of the input contains a string S of length n (1 leq n leq 1000). ------ Output ------ Output a single integer denoting the number of ways to partition the string into contiguous palindromic substrings modulo 10^9 + 7. ------ Constraints ------ 1 ≤ n ≤ 1000 ------ Sample Input 1 ------ aab ------ Sample Output 1 ------ 2 ------ Explanation 1 ------ The string \\"aab\\" can be partitioned into palindromic substrings in the following ways: \\"a|a|b\\" and \\"aa|b\\". ------ Sample Input 2 ------ aaa ------ Sample Output 2 ------ 4 ------ Explanation 2 ------ The string \\"aaa\\" can be partitioned into palindromic substrings in the following ways: \\"a|a|a\\", \\"a|aa\\", \\"aa|a\\", and \\"aaa\\".","solution":"MOD = 10**9 + 7 def is_palindrome(s): return s == s[::-1] def count_palindromic_partitions(s): n = len(s) dp = [0] * (n + 1) dp[0] = 1 for i in range(1, n + 1): for j in range(i): if is_palindrome(s[j:i]): dp[i] = (dp[i] + dp[j]) % MOD return dp[n]"},{"question":"In a magical land, there is a castle guarded by n knights arranged in a circle. Each knight has a unique strength assigned to them. Their strength values are given in a list of integers. The king decided to reward his loyal knights by choosing exactly k consecutive knights such that the sum of their strengths is maximized. Since knights are arranged in a circle, the \\"consecutive knights\\" can wrap around from the last knight back to the first knight. Your task is to write a function that takes the list of strength values and the number k, and returns the maximum possible sum of strengths of k consecutive knights. -----Input----- The input consists of two parts: 1. An integer n (2 ≤ n ≤ 1000) representing the number of knights. 2. A list of n integers where the i-th integer represents the strength of the i-th knight. The strengths can be positive, negative, or zero. 3. A single integer k (1 ≤ k ≤ n) representing the number of consecutive knights to choose. -----Output----- Return a single integer representing the maximum sum of strengths of k consecutive knights. -----Examples----- Input 7 [10, -5, -6, -2, 14, 6, -3] 3 Output 18 Input 5 [4, -1, 3, 2, -2] 2 Output 5 Input 6 [-2, -3, -1, -5, -4, -6] 1 Output -1","solution":"def max_consecutive_strength(n, strengths, k): Returns the maximum sum of strengths of k consecutive knights. if k == 0: return 0 strengths_extended = strengths * 2 max_sum = current_sum = sum(strengths_extended[:k]) for i in range(k, n + k): current_sum += strengths_extended[i] - strengths_extended[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You have an array b containing all integers from 1 to m. You are allowed to remove any one integer from the array and then sort the remaining array in ascending order. Let the resulting array be defined as c. Define the value f as the sum of absolute differences between each element in array c and its index position (starting from 1). Your task is to determine which integer should be removed from the array b so that the value of f is minimized. If there are multiple integers that yield the same minimum value, remove the smallest integer among them. -----Input----- The only line contains integer m (2 ≤ m ≤ 2·10^5). -----Output----- Print the integer that should be removed to minimize the value of f. -----Examples----- Input 3 Output 3 Input 4 Output 4","solution":"def minimize_f(m): This function takes an integer m and returns the integer that should be removed from the array b (which consists of integers from 1 to m) to minimize the sum of absolute differences between remaining elements and their indexes. # If m is less than 2, it\'s not within the provided constraints (2 ≤ m ≤ 2·10^5), # hence, there is no need to handle such cases. if m < 2: return -1 # Removing m will always minimize the value of f. return m"},{"question":"Maria is given two strings, S and T, of equal length N. The task is to determine the minimum number of operations required to make them anagrams of each other. In one operation, Maria can swap any two characters in the string S. An anagram is a permutation of a string\'s characters such that both strings have the same characters with the same frequency. Help Maria find the minimum number of operations needed. ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains one integer N, the length of the strings. - The second line of each test case contains the string S. - The third line of each test case contains the string T. ------ Output Format ------ For each test case, print a single line containing one integer ― the minimum number of swap operations needed to make S and T anagrams. If it is not possible to make S and T anagrams with swaps, return -1. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{5} The strings S and T consist of lowercase English letters. ------ Sample Input 1 ------ 3 3 abc bca 4 abcd bcda 5 abcde fghij ------ Sample Output 1 ------ 1 1 -1 ------ Explanation 1 ------ Test case 1: Maria can swap the characters \'a\' and \'b\' in S to get the string \\"bac\\", and then swap \'c\' and \'a\' to get \\"bca\\". The string S becomes an anagram of T in 2 operations. Test case 2: Maria can swap the characters \'a\' and \'b\' in S to get the string \\"bacd\\", and then swap \'b\' and \'c\' to get \\"bcad\\", and swap \'d\' and \'a\' to get \\"bcda\\". The string S becomes an anagram of T in 3 operations. Test case 3: It is not possible to make S and T anagrams of each other as they have completely different characters.","solution":"def min_swaps_to_anagram(N, S, T): Returns the minimum number of operations required to make strings S and T anagrams. If it is not possible, returns -1. from collections import Counter # Step 1: Check if it\'s possible to make them anagrams by comparing character counts if Counter(S) != Counter(T): return -1 # Transform S to T swaps = 0 s_list = list(S) for i in range(N): if s_list[i] != T[i]: # Find next occurrence of T[i] in the remainder of s_list and swap forward for j in range(i+1, N): if s_list[j] == T[i]: # move s_list[j] to position i while j > i: s_list[j], s_list[j-1] = s_list[j-1], s_list[j] swaps += 1 j -= 1 break return swaps def process_test_cases(test_cases): results = [] for N, S, T in test_cases: results.append(min_swaps_to_anagram(N, S, T)) return results"},{"question":"You are given a grid with R rows and C columns. Each cell in the grid either contains a \'.\', representing an empty spot, or a \'#\', representing an obstacle. You can move to an adjacent cell (up, down, left, right) if it is an empty spot. Find the number of distinct paths from the top-left corner of the grid (0,0) to the bottom-right corner of the grid (R-1,C-1) where you only move through empty spots and without revisiting any cell. Constraints: * All values in input are integers. * 1 leq R, C leq 10^3 * Each cell in the grid is either \'.\' or \'#\'. * The top-left and bottom-right corners are both guaranteed to be empty spots. Input Input is given from Standard Input in the following format: R C grid Output Print the number of distinct paths from the top-left to the bottom-right corner. Examples Input 3 3 ... .#. ... Output 2 Input 3 3 ..# .#. ..# Output 0 Input 2 2 .. .. Output 2","solution":"def find_paths(R, C, grid): def is_valid_move(x, y): return 0 <= x < R and 0 <= y < C and grid[x][y] == \'.\' def dfs(x, y): if x == R - 1 and y == C - 1: return 1 visited.add((x, y)) paths = 0 for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]: nx, ny = x + dx, y + dy if is_valid_move(nx, ny) and (nx, ny) not in visited: paths += dfs(nx, ny) visited.remove((x, y)) return paths visited = set() return dfs(0, 0) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() R = int(data[0]) C = int(data[1]) grid = [data[i + 2] for i in range(R)] print(find_paths(R, C, grid))"},{"question":"You are asked to implement a simplified version of a Markdown converter that transforms Markdown text into HTML. The converter should handle the following Markdown elements: 1. Headers (from level 1 to 3) 2. Paragraphs 3. Unordered lists 4. Ordered lists 5. Inline code Below are the rules for each Markdown element: 1. Headers: - Lines starting with one or more `#` characters followed by a space represent headers. - The number of `#` characters indicates the level of the header (`#` for h1, `` for h2, and `#` for h3). 2. Paragraphs: - Text that is not formatted as a header or a list should be wrapped in a paragraph tag `<p>`. 3. Unordered lists: - Lines starting with `-` followed by a space represent items in an unordered list. Consecutive lines with `-` should be combined into a single unordered list. 4. Ordered lists: - Lines starting with one or more digits followed by a period and a space represent items in an ordered list. Consecutive lines with such format should be combined into a single ordered list. 5. Inline code: - Text surrounded by backticks `` ` `` should be enclosed in a `<code>` tag. Input: - The input consists of multiple lines of text, followed by an empty line indicating the end of the input. Output: - The program should print the corresponding HTML, preserving the structure and contents specified by the Markdown format. Example: Input: ``` # Header 1 Header 2 # Header 3 This is a paragraph with `inline code`. - Item 1 - Item 2 - Item 3 1. First item 2. Second item Another paragraph. ``` Output: ``` <h1>Header 1</h1> <h2>Header 2</h2> <h3>Header 3</h3> <p>This is a paragraph with <code>inline code</code>.</p> <ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> </ul> <ol> <li>First item</li> <li>Second item</li> </ol> <p>Another paragraph.</p> ``` Your task is to write the program that reads the input, processes it and outputs the correct HTML as illustrated in the provided example.","solution":"import re def markdown_to_html(markdown): html_lines = [] in_ul = False in_ol = False def close_lists(): nonlocal in_ul, in_ol if in_ul: html_lines.append(\\"</ul>\\") in_ul = False if in_ol: html_lines.append(\\"</ol>\\") in_ol = False for line in markdown.splitlines(): if line.startswith(\'# \'): close_lists() html_lines.append(f\\"<h1>{line[2:]}</h1>\\") elif line.startswith(\' \'): close_lists() html_lines.append(f\\"<h2>{line[3:]}</h2>\\") elif line.startswith(\'# \'): close_lists() html_lines.append(f\\"<h3>{line[4:]}</h3>\\") elif line.startswith(\'- \'): if not in_ul: close_lists() html_lines.append(\\"<ul>\\") in_ul = True html_lines.append(f\\"<li>{line[2:]}</li>\\") elif re.match(r\'^d+. \', line): if not in_ol: close_lists() html_lines.append(\\"<ol>\\") in_ol = True html_lines.append(f\\"<li>{line[line.index(\'. \')+2:]}</li>\\") elif line.strip() == \\"\\": close_lists() if html_lines and not html_lines[-1].startswith(\'</p\'): html_lines.append(\\"\\") else: close_lists() if not (html_lines and html_lines[-1] and html_lines[-1].startswith(\\"<p>\\")): html_lines.append(\\"<p>\\") else: html_lines[-1] = html_lines[-1][:-4] + \\" \\" line_with_code = re.sub(r\'`([^`]*)`\', r\'<code>1</code>\', line) html_lines[-1] += line_with_code + \\"</p>\\" close_lists() return \\"n\\".join(html_lines) # Example usage markdown_input = # Header 1 Header 2 # Header 3 This is a paragraph with `inline code`. - Item 1 - Item 2 - Item 3 1. First item 2. Second item Another paragraph. html_output = markdown_to_html(markdown_input) print(html_output)"},{"question":"Zoe loves arranging books on a shelf. She has a collection of N books, where each book has a specific width and height. She wants to place all these books on a single shelf such that the total width of the shelf is minimized to ensure it can fit in her small room. However, she also wants to maintain a balance in the height of the books on the shelf. This means the difference between the tallest and the shortest book on the shelf should be minimized as long as the total width is minimized. Given the width and height of each book, determine the minimum total width of the shelf and the smallest possible difference between the tallest and the shortest book on that shelf. -----Input----- Input starts with a line containing an integer N (1 leq N leq 1000), the number of books. Then follows N lines, each containing two integers w_i and h_i (1 leq w_i, h_i leq 1000), denoting the width and height of the i-th book. -----Output----- Output two integers: the minimum total width of the shelf and the smallest possible difference between the tallest and the shortest book on the shelf. -----Examples----- Sample Input 1: 3 5 8 3 7 6 9 Sample Output 1: 14 1 Sample Input 2: 4 7 10 4 8 5 6 3 7 Sample Output 2: 13 3","solution":"def min_shelf_width_and_height_diff(N, books): # sort books based on width ascending and then height ascending books.sort(key=lambda x: (x[0], x[1])) total_width = sum(book[0] for book in books) heights = [book[1] for book in books] min_height = min(heights) max_height = max(heights) height_diff = max_height - min_height return total_width, height_diff # Example usage if __name__ == \\"__main__\\": N = 3 books = [(5, 8), (3, 7), (6, 9)] print(min_shelf_width_and_height_diff(N, books))"},{"question":"Given an array of integers nums and an integer target, find all unique pairs of elements from the array whose sum is equal to the target. Return the pairs in lexicographical order. Example 1: Input: nums = [1, 2, 3, 4, 5], target = 5 Output: [(1, 4), (2, 3)] Explanation: Pairs (1, 4) and (2, 3) both sum to 5 and are listed in lexicographical order. Example 2: Input: nums = [3, 1, 2, 3, 1, 2], target = 4 Output: [(1, 3), (2, 2)] Explanation: Although 3 and 1 both appear more than once, each pair (1, 3) and (2, 2) is unique, and they are listed in lexicographical order. Your Task: You don\'t need to read or print anything. Your task is to complete the function findPairs(nums, target) which takes nums, an array of integers, and target, an integer, as input parameters and returns a list of tuples containing all unique pairs that sum up to the target. Expected Time Complexity: O(N^2) Expected Space Complexity: O(N) Constraints: 1 <= len(nums) <= 1000 -10^3 <= nums[i] <= 10^3 -10^6 <= target <= 10^6","solution":"def findPairs(nums, target): Find all unique pairs of elements from the array whose sum is equal to the target. Return the pairs in lexicographical order. :param nums: List of integers :param target: Integer target sum :return: List of tuples containing all unique pairs that sum up to the target nums.sort() # Sort the nums to ensure lexicographical order pairs = set() seen = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return sorted(list(pairs))"},{"question":"You are given a list of integers and a number K. You need to find two distinct elements from the list such that their sum is closest to K. If there are multiple pairs with the same difference from K, return the pair with the smallest first value. If there is still a tie, select the pair with the smallest second value. ------ Input ------ The first line of input contains a single integer T that denotes the number of test cases. Each test case starts with an integer N, the size of the array, followed by N space-separated integers denoting the elements of the array. The last integer in each test case is K. ------ Output ------ For each test case, output two space-separated integers representing the pair whose sum is closest to K. Ensure the first integer is smaller than the second integer in the output. ------ Constraints ------ 1 leq T leq 10^4 2 leq N leq 10^5 -10^9 leq text{Array Elements}, K leq 10^9 ------ Sample Input 1 ------ 3 5 1 2 3 4 5 10 4 -1 2 1 -4 1 3 5 1 3 5 8 ------ Sample Output 1 ------ 4 5 -1 2 3 5 ------ Explanation 1 ------ Example case 1: The pair (4, 5) sums to 9, which is the closest to 10. Example case 2: The pair (-1, 2) sums to 1, which is the closest to 1. Example case 3: The pair (3, 5) sums to 8, which is exactly 8.","solution":"def find_closest_pair(nums, k): nums.sort() left, right = 0, len(nums) - 1 closest_pair = (float(\'inf\'), float(\'inf\')) closest_diff = float(\'inf\') while left < right: current_sum = nums[left] + nums[right] current_diff = abs(current_sum - k) if current_diff < closest_diff or (current_diff == closest_diff and (nums[left], nums[right]) < closest_pair): closest_diff = current_diff closest_pair = (nums[left], nums[right]) if current_sum < k: left += 1 else: right -= 1 return closest_pair def process_test_cases(test_cases): results = [] for nums, k in test_cases: result = find_closest_pair(nums, k) results.append(result) return results"},{"question":"Write a function that takes a string as input and returns the string with all of its vowels removed. For the purposes of this question, \\"vowels\\" are A, E, I, O, U and a, e, i, o, u. The function should return the string unchanged if there are no vowels present. Example: ``` remove_vowels(\\"This is a test!\\") => \\"Ths s tst!\\" remove_vowels(\\"Hello World\\") => \\"Hll Wrld\\" remove_vowels(\\"Why?\\") => \\"Why?\\" ``` If the input is an empty string or None, the function should return an empty string. Additional Notes: - Consider the performance of your solution, especially for longer strings. - Remember to handle both uppercase and lowercase vowels. - Avoid using language-specific features or libraries to simplify the implementation; the function should be implementable in any common language.","solution":"def remove_vowels(input_string): Removes all vowels (a, e, i, o, u, A, E, I, O, U) from the input string. Returns an empty string if the input is None or an empty string. if input_string is None: return \\"\\" vowels = \\"aeiouAEIOU\\" return \'\'.join([char for char in input_string if char not in vowels])"},{"question":"Write a function that calculates the product of all the unique elements in an integer array. The array will only contain positive integers in the range 1-1000, and its size is limited to 1-100. Note that if the array is empty or contains no unique elements, the product should be defined as 1. First Example: Input: [2, 4, 6, 2, 4] Steps: The unique values are [2, 4, 6]. The product is 2 * 4 * 6 = 48. Output: 48 Second Example: Input: [5, 5, 5, 5, 5] Steps: The unique value is [5]. The product is 5. Output: 5 Third Example: Input: [1, 2, 3, 4, 5] Steps: The unique values are [1, 2, 3, 4, 5]. The product is 1 * 2 * 3 * 4 * 5 = 120. Output: 120 Fourth Example: Input: [ ] Steps: There are no elements in the array. Output: 1 Input: integer array Output: integer","solution":"from functools import reduce from operator import mul def unique_product(arr): Calculate the product of all unique elements in the array. If the array is empty or contains no unique elements, the product should be 1. unique_elements = set(arr) if not unique_elements: return 1 return reduce(mul, unique_elements, 1)"},{"question":"You are given a list of jobs, each defined by a start time and an end time. Your goal is to determine the maximum number of non-overlapping jobs that can be scheduled. A job is represented by a pair of integers (S, E), where S is the start time and E is the end time (1 le S < E le 1000000). Two jobs (S_1, E_1) and (S_2, E_2) are considered non-overlapping if E_1 le S_2 or E_2 le S_1. Write a program to find the maximum number of non-overlapping jobs that can be scheduled. -----Input----- The first line of input contains an integer N (1 le N le 100000), the number of jobs. Each of the following N lines contains two integers S and E describing a job (1 le S < E le 1000000). -----Output----- Output a single integer, the maximum number of non-overlapping jobs. -----Examples----- Sample Input 1: 4 1 3 2 4 3 5 4 6 Sample Output 1: 2 Sample Input 2: 6 1 5 2 6 6 8 4 7 5 9 8 10 Sample Output 2: 3","solution":"def max_non_overlapping_jobs(jobs): Determines the maximum number of non-overlapping jobs. # Sort jobs by their end time jobs.sort(key=lambda job: job[1]) # Initialize count of non-overlapping jobs count = 0 last_end_time = 0 for job in jobs: start, end = job if start >= last_end_time: count += 1 last_end_time = end return count def process_jobs_input(job_input): Processes input list into a format suitable for the max_non_overlapping_jobs function. jobs = [] for i in range(1, len(job_input)): jobs.append(tuple(job_input[i])) return max_non_overlapping_jobs(jobs)"},{"question":"Write a function that determines the minimum number of operations required to transform a given string into a valid palindrome. In one operation, you can change any single character to any other character. ------ Input ------ The input consists of a single string S with length N. S contains only lowercase English letters. ------ Output ------ Output a single integer — the minimum number of operations required to transform the string into a valid palindrome. ------ Constraints ------ 1 ≤ N ≤ 10^5 S contains only lowercase English letters ------ Sample Input 1 ------ abc ------ Sample Output 1 ------ 1 ------ Sample Input 2 ------ aabb ------ Sample Output 2 ------ 2 ------ Sample Input 3 ------ racecar ------ Sample Output 3 ------ 0","solution":"def min_operations_to_palindrome(s): Determines the minimum number of operations required to transform the string into a valid palindrome. :param s: A string consisting of lowercase English letters. :return: The minimum number of operations required. operations = 0 left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: operations += 1 left += 1 right -= 1 return operations"},{"question":"You are given a forest represented as an undirected graph with N nodes (1 through N) and M edges. Each node in the graph represents a tree, and each edge represents a path between two trees. Each path has a weight associated with it representing the difficulty of traversing that path. Your task is to prune the forest such that all the trees remain connected with the minimum total difficulty of traversal. In other words, you need to find the Minimum Spanning Tree (MST) of the given forest. Constraints * 2 ≤ N ≤ 10^5 * 1 ≤ M ≤ 2 × 10^5 * 1 ≤ weight of each edge ≤ 10^4 Input The input is given from Standard Input in the following format: N M u1 v1 w1 u2 v2 w2 ... uM vM wM where ui and vi are the nodes connected by the i-th path, and wi is the weight of the i-th path. Output Print the total weight of the MST. Example Input 4 5 1 2 1 2 3 4 3 4 5 4 1 6 1 3 3 Output 9","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def minimum_spanning_tree(N, M, edges): edges.sort(key=lambda x: x[2]) # Sort edges by weights parent = list(range(N)) rank = [0] * N mst_weight = 0 num_edges_in_mst = 0 for u, v, w in edges: u -= 1 v -= 1 root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) mst_weight += w num_edges_in_mst += 1 if num_edges_in_mst == N - 1: break return mst_weight def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) edges = [] index = 2 for _ in range(M): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) edges.append((u, v, w)) index += 3 result = minimum_spanning_tree(N, M, edges) print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a sequence of N integers representing lengths of sticks. Your task is to determine the minimum number of sticks that need to be added so that you can form a triangle with any three sticks you pick from the sequence. -----Constraints----- - 1 leq N leq 100 - 1 leq length of each stick leq 1000 -----Input----- Input is given from Standard Input in the following format: N length_1 length_2 ldots length_N -----Output----- Print a single integer representing the minimum number of sticks that need to be added to the sequence to ensure that any three sticks can form a triangle. -----Sample Input----- 3 4 5 10 -----Sample Output----- 1 Explanation: With the given lengths, you have sticks of length 4, 5, and 10. To form a triangle, the sum of the lengths of any two sticks must be greater than the third stick. - 4 + 5 > 10 ==> False - 4 + 10 > 5 ==> True - 5 + 10 > 4 ==> True The condition fails for the first combination (4 + 5 <= 10). Therefore, we need to add at least one more stick. Adding a stick of length 7 would make: - 4 + 5 > 7 ==> True - 4 + 7 > 5 ==> True - 5 + 7 > 4 ==> True - 4 + 10 > 5 ==> True - 5 + 10 > 4 ==> True - 7 + 10 > 4 ==> True With these lengths, any three sticks can form a triangle.","solution":"def min_sticks_to_form_triangle(N, sticks): Returns the minimum number of sticks that need to be added so that any three sticks can form a triangle. if N >= 3: sticks.sort() if sticks[-1] >= sticks[-2] + sticks[-3]: return 1 return max(0, 3 - N)"},{"question":"A magician creates a sequence of magic numbers using the following procedure: 1. Start with the number 1. 2. For each number `x` in the current sequence, add `x + 1` and `x * 2` to the sequence. 3. Continue this process until there are no more numbers to process that are less than or equal to the target number `T`. Given a target number `T`, find the minimum number of steps required to reach `T` starting from `1` by only using the operations defined above. Write a function `min_steps_to_target(T)` that returns the minimum number of steps required to reach `T`. Input: - `T`: An integer (1 ≤ T ≤ 100,000) Output: - An integer representing the minimum number of steps to reach `T`. Example: ``` Input 10 Output 6 Explanation: Starting from 1, the sequence evolves as follows: Step 0: [1] Step 1: [2, 2] (Add [1+1] and [1*2]) Step 2: [3, 4, 3] (Add [2+1], [2*2], [2+1]) Step 3: [4, 5, 6, 4, 5] (Add [3+1], [3*2], [4+1], [4+1], [4+1]) Step 4: [5, 6, 7, 8, 5, 6, 7, 5, 6] (Add [4+1], [4*2], [5+1], [5*2], [6+1], [6*2], [4+1], [4+1]) Step 5: [6, 7, 8, 9, 10, 6, 7, 8, 5, 6, 7] (Add [5+1], [5*2], [6+1], [6*2], [7+1], [7*2], [4+1], [4+1]) Step 6: Reached 10. ```","solution":"from collections import deque def min_steps_to_target(T): Returns the minimum number of steps to reach target number T starting from 1. if T == 1: return 0 # BFS initialization queue = deque([(1, 0)]) # Starting number with step count visited = set([1]) # Set to keep track of visited numbers while queue: current, steps = queue.popleft() # Generate next numbers using the given operations next_num1 = current + 1 next_num2 = current * 2 # Check if we reached the target if next_num1 == T or next_num2 == T: return steps + 1 # Add to queue if not visited yet if next_num1 not in visited and next_num1 <= T: visited.add(next_num1) queue.append((next_num1, steps + 1)) if next_num2 not in visited and next_num2 <= T: visited.add(next_num2) queue.append((next_num2, steps + 1)) return -1 # Should never reach here as T is guaranteed to be reachable"},{"question":"Given a sorted array of distinct integers and a target value, return a tuple containing the indices of the two numbers such that they add up to the target. You may assume that each input would have one unique solution, and you may not use the same element twice. If no such numbers exist, return an empty tuple. For example, given the array `nums = [2, 7, 11, 15]` and `target = 9`, the function should return `(0, 1)` because `nums[0] + nums[1] = 2 + 7 = 9`. Your function should have the following signature: ```python def find_two_sum(nums: List[int], target: int) -> Tuple[int, int]: ``` Your task is to implement this function.","solution":"from typing import List, Tuple def find_two_sum(nums: List[int], target: int) -> Tuple[int, int]: Given a sorted array of distinct integers and a target value, return a tuple containing the indices of the two numbers such that they add up to the target. left, right = 0, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] if current_sum == target: return (left, right) elif current_sum < target: left += 1 else: right -= 1 return ()"},{"question":"A garden has a row of n flowers, each flower can be either blooming or not blooming. You are given an array of length n where the i-th element is 1 if the i-th flower is blooming and 0 if it is not. You can water one flower each day, and watering a flower that is not blooming will make it bloom the next day. You want to know how many days it will take to make all flowers bloom at least once, given that every day you can water at most one flower, and you can start watering from any position. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of flowers. The second line contains n integers, each being 0 or 1, representing the initial state of the flowers. -----Output----- Print one integer, denoting the minimum number of days required to make all flowers bloom at least once. -----Examples----- Input 5 1 0 0 1 0 Output 3 Input 3 0 0 0 Output 3 Input 4 1 1 1 1 Output 0 -----Note----- In the first sample, you can water the flowers in positions [2, 3, 5], making each flower bloom in 3 days. In the second sample, you can water all three flowers in three successive days. In the third sample, all flowers are already blooming, so no days are needed.","solution":"def min_days_for_all_bloom(n, flower_states): Returns the minimum number of days required to make all flowers bloom at least once. # Count the number of flowers that are not blooming (i.e., 0s in the array). non_blooming_count = flower_states.count(0) return non_blooming_count"},{"question":"You are given a positive integer n. You can perform a sequence of operations: in each operation, you may subtract 1, subtract 2, or subtract 5 from n. Determine the minimum number of operations required to reduce n to zero. For example, if n = 11, you can perform the following sequence of operations: subtract 5, then n = 6; subtract 5 again, then n = 1; subtract 1, then n = 0. This sequence takes three operations in total. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. The only line of each test case contains one integer n (1 le n le 10^6). -----Output----- For each test case, print one integer — the minimum number of operations required to reduce n to zero. -----Example----- Input 3 11 5 9 Output 3 1 3 -----Note----- In the first test case, you need to apply the operations three times as shown in the example explanation. In the second test case, n is already 5, so you need only one operation to make it zero. In the third test case, you can perform the following operations: subtract 5 (then n = 4), subtract 2 (then n = 2), subtract 2 (then n = 0), resulting in three operations.","solution":"def min_operations(n): Returns the minimum number of operations required to reduce n to zero by subtracting 1, 2, or 5. count = 0 while n > 0: if n >= 5: n -= 5 elif n >= 2: n -= 2 else: n -= 1 count += 1 return count def get_min_operations(t, cases): results = [] for n in cases: results.append(min_operations(n)) return results"},{"question":"A palindrome is a string that reads the same forwards and backwards. However, due to potential typographical errors or variations in input, a modified palindrome is defined as a string where at most one character can be removed to make it a palindrome. For example, \\"abca\\" can become \\"aca\\" by removing \'b\', thus qualifying as a modified palindrome. Write a program that takes an input integer `t` (1 ≤ t ≤ 1000) representing the number of test cases, followed by `t` strings. Each string consists of lowercase Latin letters and has a length `s` (1 ≤ |s| ≤ 100,000). The input is given in multiple lines. For each string, determine and output \\"YES\\" if the string can be a modified palindrome and \\"NO\\" otherwise. Input The input consists of multiple lines. The first line contains the integer `t`. Each of the next `t` lines contains one string. Output Output \\"YES\\" or \\"NO\\" for each string indicating whether it can be considered as a modified palindrome. Example Input 3 abca racecar hello Output YES YES NO","solution":"def is_palindrome(s): return s == s[::-1] def is_modified_palindrome(s): left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: s_without_left = s[:left] + s[left + 1:] s_without_right = s[:right] + s[right + 1:] return is_palindrome(s_without_left) or is_palindrome(s_without_right) left += 1 right -= 1 return True def check_modified_palindromes(t, strings): results = [] for s in strings: if is_modified_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # t = 3 # strings = [\'abca\', \'racecar\', \'hello\'] # print(check_modified_palindromes(t, strings)) # Output: [\'YES\', \'YES\', \'NO\']"},{"question":"You are given a grid of size N x M with each cell containing a number. You need to find the largest sum of numbers from any subgrid. A subgrid is defined as any rectangular part of the grid including any cell, all cells in one row, or all cells in the entire grid. Input Format: First line gives T, number of test cases. Each test case starts with two integers N and M, representing the dimensions of the grid. Next N lines have M integers each, representing the grid\'s cells. Output Format: For each test case, print the largest sum of numbers from any subgrid in a new line. Constraints: 1 ≤ T ≤ 50 1 ≤ N, M ≤ 100 -1000 ≤ Grid value ≤ 1000 SAMPLE INPUT 2 2 2 1 2 -1 -3 3 3 1 -2 3 4 5 -6 -7 8 9 SAMPLE OUTPUT 3 17","solution":"def max_subgrid_sum(grid): This function calculates the maximum sum of any subgrid in a given 2D grid. N = len(grid) M = len(grid[0]) max_sum = float(\'-inf\') for left in range(M): temp = [0] * N for right in range(left, M): for i in range(N): temp[i] += grid[i][right] current_sum = max_subarray_sum(temp) max_sum = max(max_sum, current_sum) return max_sum def max_subarray_sum(arr): Helper function to calculate the maximum sum of any subarray using the Kadane\'s algorithm. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_test_cases(test_cases): Function to process multiple test cases and output the results. results = [] for grid in test_cases: results.append(max_subgrid_sum(grid)) return results def parse_input(input_data): Function to parse input data into a list of test cases. lines = input_data.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, lines[index].split()) index += 1 grid = [] for _ in range(N): grid.append(list(map(int, lines[index].split()))) index += 1 test_cases.append(grid) return test_cases # Example usage def main(input_data): test_cases = parse_input(input_data) results = process_test_cases(test_cases) for result in results: print(result) input_data = 2 2 2 1 2 -1 -3 3 3 1 -2 3 4 5 -6 -7 8 9 main(input_data)"},{"question":"You are given a string that consists of lowercase alphabets. Your task is to find the longest string \'t1\' such that \'t1\' concatenated with itself forms a substring of the given string \'s\'. Constraints * 1 leq |s| leq 10^5 * s consists of only lowercase letters. Input Input is given from Standard Input in the following format: s Output Print the longest string \'t1\' such that \'t1t1\' is a substring of the string \'s\'. Example Input abcabcabcabc Output abcabc Explanation: In the given example, the longest string \'t1\' that can be concatenated with itself to form a substring of \'s\' is \'abcabc\', since \'abcabcabcabc\' contains \'abcabc\' twice as a substring.","solution":"def longest_t1(s): Returns the longest string t1 such that t1 concatenated with itself forms a substring of the given string s. n = len(s) # Try lengths from n//2 to 1 for length in range(n//2, 0, -1): t1 = s[:length] if t1 + t1 in s: return t1 return \'\'"},{"question":"The year is 3030 and space exploration has reached its peak. The Galactic Council has decided to create a space highway system connecting various space stations scattered across the galaxy. The Council\'s objective is to ensure that every space station is reachable from any other space station. You have been given the task to design the minimum cost highway system. Fortunately, the cost to build a highway between any two space stations is known and fixed. Here is how you can approach the task: There are N space stations and M potential highways. Each potential highway connects two space stations and has a certain cost associated with it. Your goal is to determine which highways to build so that the total construction cost is minimized and every space station can be reached from any other space station. Input The input begins with a line containing two integers N (2 ≤ N ≤ 100) and M (N - 1 ≤ M ≤ N*(N - 1)/2), representing the number of space stations and the number of potential highways, respectively. Then, M lines follow. Each of these lines contains three integers u, v, and w (1 ≤ u, v ≤ N; u ≠ v; 1 ≤ w ≤ 10^4), which denote that a highway can be built between stations u and v with a cost of w. Output Output a single integer which is the minimal total cost to construct the highways so that all stations are connected. If it is not possible to connect all stations, output -1. Example Input 4 5 1 2 5 1 3 3 4 1 6 2 4 7 3 4 4 Output 12 Explanation In this example, the coordinate input specifies 4 space stations and 5 possible highways with defined costs. The minimal cost to connect all stations is through highways 1-3, 3-4, and 1-2 for a total cost of 12. Note This problem can be solved using algorithms dedicated to finding the Minimum Spanning Tree (MST) such as Kruskal\'s or Prim\'s algorithm.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(n, edges): edges.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n + 1): parent.append(node) rank.append(0) mst_cost = 0 mst_edges = 0 for edge in edges: u, v, w = edge uroot = find(parent, u) vroot = find(parent, v) if uroot != vroot: mst_cost += w mst_edges += 1 union(parent, rank, uroot, vroot) if mst_edges == n - 1: break if mst_edges != n - 1: return -1 else: return mst_cost def minimal_highway_cost(n, m, highways): return kruskal_mst(n, highways)"},{"question":"Complete the function that takes a string as an input and returns a dictionary with the count of each unique character in the string. Examples ```python input_string = \\"hello\\" ==> {\'h\': 1, \'e\': 1, \'l\': 2, \'o\': 1} input_string = \\"world\\" ==> {\'w\': 1, \'o\': 1, \'r\': 1, \'l\': 1, \'d\': 1} input_string = \\"mississippi\\" ==> {\'m\': 1, \'i\': 4, \'s\': 4, \'p\': 2} ```","solution":"def count_chars(input_string): Returns a dictionary with the count of each unique character in the input string. char_count = {} for char in input_string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"You\'re given an array of n non-negative integers where each element represents the height of a building on a 1D landscape. The goal is to determine how much water it can trap after raining. Water can only be trapped between blocks, and the water level above a block is determined by the height of the minimum of the tallest blocks to the left and right minus the height of the block itself. If the height of the block is greater than or equal to the water level, no water is trapped on top of that block. Consider the following 2D map of heights of buildings, where each element is a particular building\'s height: | | | | | | | | | | | | | | | | | | | -+-+-+-+-----+-- The water trapped in this 2D landscape will be restrictive only between buildings taller than the shortest in landscape. -----Input----- The first line contains a single integer t (1 le t le 500) — the number of test cases. Then the test cases follow. Each test case begins with a line containing a single integer n (1 le n le 10^6) — the number of buildings. The second line contains n non-negative integers h_1, h_2, dots, h_n (0 le h_i le 10^8) — the heights of the buildings. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, output a single line containing the total units of water trapped. -----Examples----- Input 2 6 0 1 0 2 1 0 4 3 0 2 0 Output 1 2 -----Note----- In the 1-st test case, 1 unit of water is trapped between the 2nd and 4th buildings. In the 2-nd test case, 2 units of water are trapped between the 4th building.","solution":"def calculate_trapped_water(n, heights): if n == 0: return 0 left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) for i in range(n): water_trapped += max(min(left_max[i], right_max[i]) - heights[i], 0) return water_trapped def trapped_water(test_cases): results = [] for n, heights in test_cases: results.append(calculate_trapped_water(n, heights)) return results"},{"question":"Alice has a unique way of creating her passwords. She considers a password strong if it consists of at least one vowel (a, e, i, o, u) and one consonant. Given a string, your task is to determine if it\'s possible to rearrange the characters of the string to form a strong password. If it is possible, print any permutation that makes the string a strong password. If it is impossible, print \\"Impossible\\". Input The first line contains an integer n (1 ≤ n ≤ 100) — the length of the string. The second line contains a string s of n lowercase English letters. Output If it is possible to rearrange the string into a strong password, print any valid permutation. If it is impossible, print \\"Impossible\\". Examples Input 4 aabc Output abac Input 3 aaa Output Impossible Input 5 abcde Output abecd","solution":"def create_strong_password(n, s): vowels = set(\'aeiou\') has_vowel = False has_consonant = False # Check if there\'s at least one vowel and one consonant for char in s: if char in vowels: has_vowel = True else: has_consonant = True if has_vowel and has_consonant: break if not has_vowel or not has_consonant: return \\"Impossible\\" # Sort the characters to get one of the strong password permutations return \'\'.join(sorted(s))"},{"question":"This is an optimization problem. Alice and Bob are mathematicians who love working with graphs to find shortest paths. They recently came across a problem where they have to find the shortest path in a weighted undirected graph. The challenge is to move from a given start node to an end node with the constraint that they can only use a set number of changes in the direction they are currently moving. Each node represents a junction, and each edge represents a street with a particular weight (length). Initially, Alice and Bob can choose any edge to start moving, but they must adhere to the constraint on the number of allowed direction changes while navigating the graph. You are to help Alice and Bob by designing a function to find the shortest path between two nodes, given the number of direction changes allowed. Input - n: the number of nodes (2 ≤ n ≤ 1000) - m: the number of edges (1 ≤ m ≤ 2000) - s: the start node (1 ≤ s ≤ n) - e: the end node (1 ≤ e ≤ n) - k: the number of allowed direction changes (0 ≤ k ≤ 10) - Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing an edge between node u and node v with weight w. Output The output should be a single integer representing the shortest path from s to e with at most k direction changes. If there is no valid path, print -1. Example Input ``` 5 7 1 5 2 1 2 4 1 3 2 2 3 1 2 4 5 3 4 8 4 5 3 2 5 7 ``` Output ``` 10 ``` Explanation: In the given example, a possible path from node 1 to node 5 is: 1 -> 2 -> 5 with weights adding up to 11. Another path: 1 -> 3 -> 2 -> 4 -> 5 with weights adding up to 16. If you allow 2 direction changes in the path you can find the shortest path of total weight 10. Note The direction change is counted when you switch from moving along one edge\'s direction to another non-collinear edge\'s direction. Initially, you can choose any direction without counting it as a change. Your task is to implement the algorithm to find and return the shortest path length satisfying the constraints.","solution":"import heapq def shortest_path_with_limited_changes(n, m, s, e, k, edges): # Create adjacency list graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Define a priority queue for Dijkstra\'s algorithm pq = [(0, s, -1, 0)] # (cost, current node, previous node, direction changes) dist = [[[float(\'inf\')] * (k + 1) for _ in range(n + 1)] for _ in range(n + 1)] dist[s][s][0] = 0 while pq: cost, current, prev, changes = heapq.heappop(pq) if cost > dist[current][prev][changes]: continue if current == e: return cost for neighbor, weight in graph[current]: new_cost = cost + weight new_changes = changes if prev != -1 and prev != neighbor: if changes < k: new_changes += 1 else: continue if new_cost < dist[neighbor][current][new_changes]: dist[neighbor][current][new_changes] = new_cost heapq.heappush(pq, (new_cost, neighbor, current, new_changes)) min_cost = min(dist[e][i][changes] for i in range(n + 1) for changes in range(k + 1)) return min_cost if min_cost != float(\'inf\') else -1"},{"question":"You have been given a robot that moves on a 2D grid. The robot can move in one of four directions: up, down, left, and right, and it starts at the origin (0, 0). The robot receives a sequence of instructions, where each instruction is a character: \'U\' (up), \'D\' (down), \'L\' (left), or \'R\' (right). The robot performs the series of moves and ends up in a final position on the grid. Your task is to determine the Manhattan distance from the origin to the robot\'s final position after executing all the instructions. The Manhattan distance between two points (x1, y1) and (x2, y2) is defined as |x1 - x2| + |y1 - y2|. ------ Input: ------ The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. For each test case, there is a line containing a string of instructions, where each character in the string is one of \'U\', \'D\', \'L\', or \'R\'. The length of the string is between 1 and 10^5. ------ Output: ------ For each test case, output a single integer representing the Manhattan distance from the origin to the robot\'s final position. ------ Sample Input: ------ 2 UUDDLRLR ULDRULDR ------ Sample Output: ------ 0 0 ------ Explanation: ------ Test Case 1: - The robot performs the following moves: \'U\' (y = 1), \'U\' (y = 2), \'D\' (y = 1), \'D\' (y = 0), \'L\' (x = -1), \'R\' (x = 0), \'L\' (x = -1), and \'R\' (x = 0). - The robot ends up back at the origin (0, 0). - Thus, the Manhattan distance is 0. Test Case 2: - The robot performs the following moves: \'U\' (y = 1), \'L\' (x = -1), \'D\' (y = 0), \'R\' (x = 0), \'U\' (y = 1), \'L\' (x = -1), \'D\' (y = 0), and \'R\' (x = 0). - The robot ends up back at the origin (0, 0). - Thus, the Manhattan distance is 0.","solution":"def calculate_manhattan_distance(T, instructions_list): Calculate the Manhattan distance from the origin (0, 0) to the robot\'s final position after executing all instructions. Args: T (int): Number of test cases. instructions_list (list of str): A list containing T strings of instructions. Returns: list of int: A list containing the Manhattan distance for each test case. def manhattan_distance(x, y): return abs(x) + abs(y) results = [] for instructions in instructions_list: x, y = 0, 0 for cmd in instructions: if cmd == \'U\': y += 1 elif cmd == \'D\': y -= 1 elif cmd == \'L\': x -= 1 elif cmd == \'R\': x += 1 results.append(manhattan_distance(x, y)) return results"},{"question":"You are given a personal finance application which helps users track their monthly expenses. The application categorizes each expense into different types and stores them in a database. However, you have observed that some users often forget to categorize their expenses leading to the category being blank. To help users, you decide to create a functionality that automatically categorizes these uncategorized expenses based on a predefined set of rules. The rules are simple: if the expense description contains any keyword defined in the category keyword list, it should be assigned the corresponding category. The application takes two inputs: 1. A list of uncategorized expenses, where each expense is represented by a tuple (amount, description). 2. A dictionary where keys are category names and values are lists of keywords associated with those categories. Your task is to define a function `categorize_expenses` that takes the above two inputs and outputs a list of tuples where each tuple contains the original description and the assigned category. If an expense description matches multiple categories (i.e., contains keywords from different categories), it should be assigned the first matching category in the order given in the dictionary. Unmatched expenses should receive the category `\\"Uncategorized\\"`. -----Input----- - An integer `n` representing the number of uncategorized expenses. - A list of `n` tuples where each tuple contains an integer `amount` and a string `description` (1 le n le 1000). - An integer `m` representing the number of categories. - A dictionary where keys are category names (strings) and values are lists of `k` keywords (strings) (1 le m le 100) (1 le k le 20). -----Output----- The function should return a list of `n` tuples, each containing: - The original `description` (string) - The assigned category (string) -----Examples----- Input ``` 3 [(150, \\"grocery shopping at Walmart\\"), (200, \\"monthly rent\\"), (50, \\"subway sandwich\\")] 2 { \\"Food\\": [\\"grocery\\", \\"subway\\", \\"restaurant\\"], \\"Housing\\": [\\"rent\\", \\"mortgage\\"] } ``` Output ``` [(\\"grocery shopping at Walmart\\", \\"Food\\"), (\\"monthly rent\\", \\"Housing\\"), (\\"subway sandwich\\", \\"Food\\")] ``` Input ``` 2 [(300, \\"gym membership\\"), (70, \\"electricity bill\\")] 3 { \\"Utilities\\": [\\"electricity\\", \\"water\\", \\"gas\\"], \\"Health\\": [\\"gym\\"], \\"Other\\": [\\"gaming\\", \\"subscription\\"] } ``` Output ``` [(\\"gym membership\\", \\"Health\\"), (\\"electricity bill\\", \\"Utilities\\")] ```","solution":"def categorize_expenses(expenses, categories): Categorizes the unspecified expenses based on predefined keywords in categories. :param expenses: List of tuples, where each tuple contains (amount, description) :param categories: Dictionary where keys are category names and values are lists of keywords :return: List of tuples of original description and the assigned category categorized_expenses = [] for amount, description in expenses: found_category = \\"Uncategorized\\" for category, keywords in categories.items(): if any(keyword in description for keyword in keywords): found_category = category break categorized_expenses.append((description, found_category)) return categorized_expenses"},{"question":"Bob the hamster loves to eat strawberries. There are m strawberries scattered in a garden, and Bob is free to eat as many strawberries as he can. However, Bob can only carry up to w grams of strawberries at a time. If the total weight of strawberries he carries exceeds w grams, Bob will drop them all and stop collecting. Each strawberry has a specific weight, and you know the weights of all the strawberries in the garden. Your task is to calculate the maximum weight of strawberries that Bob can carry without exceeding the limit. -----Input----- The first line of the input contains two integers m (1 ≤ m ≤ 100) and w (1 ≤ w ≤ 100) — the number of strawberries and the maximum weight Bob can carry. The second line contains m integers a_1, a_2, ..., a_{m} (1 ≤ a_i ≤ 100) — the weights of the strawberries. -----Output----- Print the maximum weight of strawberries that Bob can carry. -----Examples----- Input 5 10 2 3 5 8 6 Output 10 Input 4 7 1 3 4 2 Output 7 Input 6 20 5 5 5 5 5 5 Output 20 -----Note----- In the first sample, Bob can carry the strawberries with weights 2, 3, and 5 which sum up to 10 grams without exceeding the maximum capacity. In the second sample, Bob can carry all the strawberries because their total weight (1+3+4+2 = 10) is within the limit. In the third sample, Bob can carry four strawberries each weighing 5 grams, making the total weight 20 grams, which is the maximum capacity.","solution":"from itertools import combinations def max_carry_weight(m, w, weights): Returns the maximum weight of strawberries that Bob can carry without exceeding the limit. Parameters: m (int): Number of strawberries. w (int): Maximum weight Bob can carry. weights (list of int): Weights of the strawberries. Returns: int: The maximum weight that Bob can carry without exceeding the limit. max_weight = 0 for i in range(1, m+1): for comb in combinations(weights, i): total = sum(comb) if total <= w and total > max_weight: max_weight = total return max_weight"},{"question":"You are given an array of integers. Your task is to determine if there are two distinct indices i and j in the array such that the absolute difference between the elements at these indices is equal to a given integer target. Input The first line contains two integers n (1 ≤ n ≤ 100000) and target (0 ≤ target ≤ 10^9), indicating the number of elements in the array and the target difference, respectively. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9), representing the elements of the array. Output Output \\"YES\\" if there exist two distinct indices i and j such that |ai - aj| = target. Otherwise, output \\"NO\\". Examples Input 5 3 1 5 2 4 6 Output YES Input 4 10 1 2 3 4 Output NO Note In the first sample, there are several pairs (1, 4) and (5, 2) amongst others, where the absolute difference is equal to the target 3. In the second sample, there are no pairs of distinct indices with an absolute difference of 10.","solution":"def has_pair_with_difference(nums, target): Determines if there are two distinct indices in the array such that the absolute difference between the elements at these indices is equal to the given target. num_set = set() for num in nums: if (num + target) in num_set or (num - target) in num_set: return \\"YES\\" num_set.add(num) return \\"NO\\" # Example usage if __name__ == \\"__main__\\": n, target = map(int, input().split()) nums = list(map(int, input().split())) print(has_pair_with_difference(nums, target))"},{"question":"A warehouse has a stock of N unique items, and it has to fulfill multiple orders for these items. Each order can either: - Request to add a certain number of a specific item to the stock, or - Request to remove a certain number of a specific item from the stock, if available. The warehouse management system needs to efficiently keep track of the available stock and handle the orders accordingly. You are required to write a program to manage the stock based on the series of operations. -----Input----- - The first line contains an integer N, the number of unique items in the warehouse. - The second line contains N space-separated integers representing the initial stock of each item (item IDs are 0 through N-1). - The third line contains an integer Q, the number of orders. - The following Q lines describe the orders in the format: - \'add\' followed by two integers id and x: meaning add x units of item id to the stock. - \'remove\' followed by two integers id and x: meaning remove x units of item id from the stock, if available (do nothing if not enough items are in stock). -----Output----- - After processing all the orders, output a single line of N space-separated integers representing the final stock of each item. -----Constraints----- - 1 le N le 100 - 0 le initial stock of each item le 100 - 1 le Q le 1000 - 0 le id < N - 1 le x le 100 -----Example Input 1----- 3 10 5 8 5 add 0 5 remove 1 2 add 2 10 remove 0 3 remove 2 20 -----Example Output 1----- 12 3 18 -----Explanation----- There are 3 items with initial stocks of 10, 5, and 8. The orders are processed as follows: 1. Add 5 units to item 0: new stock of item 0 is 15. 2. Remove 2 units from item 1: new stock of item 1 is 3. 3. Add 10 units to item 2: new stock of item 2 is 18. 4. Remove 3 units from item 0: new stock of item 0 is 12. 5. Attempt to remove 20 units from item 2: since only 18 units are available, no removal occurs. Final stock after all orders: 12 3 18.","solution":"def manage_stock(N, initial_stock, Q, orders): Manage the stock of items in a warehouse according to the given orders. Args: N : int : number of unique items initial_stock : list of int : initial stock of each item Q : int : number of orders orders : list of str : list of orders in the format \'add id x\' or \'remove id x\' Returns: list of int : final stock of items after processing all orders stock = initial_stock[:] for order in orders: parts = order.split() command = parts[0] item_id = int(parts[1]) quantity = int(parts[2]) if command == \\"add\\": stock[item_id] += quantity elif command == \\"remove\\": if stock[item_id] >= quantity: stock[item_id] -= quantity return stock"},{"question":"Ravi is a forest guard and he has to patrol a rectangular grid-shaped forest. The forest is divided into cells, some of which may have obstacles (trees, rocks, etc.). Ravi starts his patrol from the top-left corner (0, 0) and aims to reach the bottom-right corner (n-1, m-1). Ravi can only move either right or down at any point in time. Given the grid representation of the forest where 0 indicates a walkable cell and 1 indicates an obstacle, help Ravi find the number of unique paths from the start to the destination if such a path exists. Input: The first line contains an integer t, representing the number of test cases. Each test case consists of two integers n and m, representing the number of rows and columns of the grid respectively, followed by n lines each containing m integers (0 or 1). Output: For each test case, output a single integer representing the number of unique paths from the top-left corner to the bottom-right corner. If no such path exists, return 0. Constraints: 1 ≤ t ≤ 50 1 ≤ n, m ≤ 100 Each cell in the grid can be either 0 (walkable) or 1 (obstacle). SAMPLE INPUT 2 3 3 0 0 0 0 1 0 0 0 0 2 2 0 1 1 0 SAMPLE OUTPUT 2 0","solution":"def unique_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] def process_input_output(data): results = [] t = int(data[0]) idx = 1 for _ in range(t): n, m = map(int, data[idx].split()) grid = [] for i in range(n): grid.append(list(map(int, data[idx + 1 + i].split()))) results.append(unique_paths(grid)) idx += n + 1 return results def forest_paths(data): Entry function to get input data, process it and return the expected output return process_input_output(data)"},{"question":"You are given an array of integers representing the heights of a sequence of buildings. Each building\'s height is guaranteed to be greater than zero. Your task is to calculate the amount of water that would be trapped after raining. For example, given the heights of buildings represented by an array `[2, 0, 2]`, the amount of trapped water would be `2` units. You need to write a function that, given the heights array, returns the total units of water trapped. **Function Signature:** ```python def trapped_water(heights: List[int]) -> int: ``` **Input:** - A single list `heights` containing n integers (1 ≤ n ≤ 1000) representing the heights of the buildings. **Output:** - Return a single integer representing the total units of water trapped. **Examples:** **Input:** ```python heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] ``` **Output:** ```python 6 ``` **Input:** ```python heights = [4, 2, 0, 3, 2, 5] ``` **Output:** ```python 9 ``` **Explanation:** In the first example, the histogram has valleys and mountains: - Between the first and the fourth buildings, you can trap 1 unit of water. - Between the sixth and the eighth buildings, you can trap 4 units of water. - Between the ninth and the eleventh buildings, you can trap 1 unit of water. In the second example: - Between the first and the sixth buildings, multiple valleys can trap a total of 9 units of water. This problem tests understanding of dynamic programming or two-pointer approach to optimize space and time complexity in solving the problem.","solution":"from typing import List def trapped_water(heights: List[int]) -> int: Calculate the amount of water that would be trapped after raining. Args: heights (List[int]): A list of integers representing the heights of buildings. Returns: int: The total units of water trapped. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"You are given an integer array `nums` consisting of `n` positive integers. Your task is to find the largest product that can be achieved by multiplying three distinct elements from the array. The result should be returned as an integer. If the array has less than three elements, return `0` as the largest product cannot be determined. ---Input--- The first line contains an integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (1 le n le 100) — the number of elements in the array `nums`. The second line of each test case contains n integers nums_1, nums_2, ..., nums_n (1 le nums_i le 10^4) — the elements of the array. ---Output--- For each test case, print one integer on a single line — the largest product of any three distinct elements from the array. If `n` is less than 3, print `0`. ---Examples--- Input: 3 5 1 2 3 4 5 3 7 3 1 4 1 10 2 6 Output: 60 21 120 ---Note--- In the first test case, the largest product of three distinct elements can be obtained by multiplying `3`, `4`, and `5` to get `60`. In the second test case, the three elements are `7`, `3`, and `1`, which yield a product of `21`. In the third test case, the largest product results from multiplying `10`, `2`, and `6` to get `120`.","solution":"def largest_product(nums): Given a list of integers, this function returns the largest product that can be achieved by multiplying three distinct elements from the array. If the array has less than three elements, return 0. n = len(nums) if n < 3: return 0 nums.sort() return max(nums[n-1] * nums[n-2] * nums[n-3], nums[0] * nums[1] * nums[n-1]) def process_test_cases(t, test_cases): Process multiple test cases for the largest_product function. results = [] for i in range(t): n, nums = test_cases[i] results.append(largest_product(nums)) return results"},{"question":"You are given an input string consisting of lowercase letters. Your task is to compress the string using the following simple run-length encoding scheme: - Consecutive sequences of the same character are replaced by the character followed by the number of repetitions. - If a character appears only once consecutively, it should not be followed by a number. Input The input consists of a single string s, containing only lowercase letters (1 ≤ |s| ≤ 1000). Output Output the compressed form of the string. Examples Input aaabbccccddddd Output a3b2c4d5 Input abacabadabacaba Output abacabadabacaba Note In the first example, the input string is \\"aaabbccccddddd\\". - The first three characters \'a\' are replaced by \\"a3\\". - The next two characters \'b\' are replaced by \\"b2\\". - Then four characters \'c\' are replaced by \\"c4\\". - Finally, five characters \'d\' are replaced by \\"d5\\". - The compressed form is \\"a3b2c4d5\\". In the second example, no character repeats consecutively, so the output remains the same as the input.","solution":"def compress_string(s): Compress the given string using run-length encoding. Args: s (str): The string to be compressed. Returns: str: The compressed string. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) if count > 1: compressed.append(str(count)) count = 1 compressed.append(s[-1]) if count > 1: compressed.append(str(count)) return \'\'.join(compressed)"},{"question":"You are given a string representing a mathematical expression containing the characters \'(\', \')\', \'+\', \'-\', \'*\', \'/\' and digits \'0\'-\'9\'. Implement a function to evaluate the expression and return the result as an integer. The expression will follow the normal operator precedence rules (\'*\' and \'/\' have higher precedence than \'+\' and \'-\'), and parentheses can be used to enforce different precedence rules. Division should truncate toward zero. Examples: Input: s = \\"3 + 2*2\\" Output: 7 Input: s = \\"3/2\\" Output: 1 Input: s = \\"3+5 / 2\\" Output: 5 Your Task: You do not need to read input or print anything. Your task is to complete the function `evaluateExpression()` which takes the string `s` as an input and returns the result of the expression. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1. 1 ≤ length of s ≤ 3*10^4 2. The given string s will be a valid mathematical expression. 3. The integer division should truncate toward zero.","solution":"def evaluateExpression(s: str) -> int: def operate(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return int(a / b) # Truncate towards zero def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_operations(operands, operators): b = operands.pop() a = operands.pop() op = operators.pop() operands.append(operate(a, b, op)) operands = [] operators = [] i = 0 while i < len(s): if s[i] == \' \': i += 1 continue if s[i] in \'0123456789\': val = 0 while i < len(s) and s[i] in \'0123456789\': val = val * 10 + int(s[i]) i += 1 operands.append(val) continue if s[i] == \'(\': operators.append(s[i]) elif s[i] == \')\': while operators and operators[-1] != \'(\': apply_operations(operands, operators) operators.pop() else: while (operators and operators[-1] != \'(\' and precedence(operators[-1]) >= precedence(s[i])): apply_operations(operands, operators) operators.append(s[i]) i += 1 while operators: apply_operations(operands, operators) return operands[0]"},{"question":"In a distant kingdom, there is a mysterious garden with plants arranged in a grid. The garden has n rows and m columns. Each cell of the grid can contain a plant. Let\'s represent the cell at the intersection of the i-th row and j-th column as (i, j). One day, the king orders the gardener to perform specific operations to rearrange the garden layout. The operations are defined as follows: 1. Move all plants one step up. 2. Move all plants one step down. 3. Move all plants one step left. 4. Move all plants one step right. If a plant is supposed to be moved outside the grid, it appears on the opposite side. For example, a plant in the first row moved one step up will appear in the last row. The gardener receives multiple instructions on how to move the plants. Your task is to determine the final position of each plant after performing all operations. -----Input----- The first line of input contains two integers n and m (1 ≤ n, m ≤ 10^3) — the dimensions of the garden grid. The second line contains a string of length up to 1000 consisting of characters \'U\', \'D\', \'L\', and \'R\'. The characters describe the operations in the order given: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. The next line contains an integer q (1 ≤ q ≤ 100), the number of queries about the initial positions of the plants. Each of the following q lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m), the initial coordinates of a plant. -----Output----- For each query, print the final coordinates of the plant after applying all the operations. -----Examples----- Input 5 5 UUDDLLRR 3 1 1 2 2 5 5 Output 1 1 2 2 5 5 Input 4 4 UDLRLRLR 4 1 1 2 2 3 3 4 4 Output 1 1 2 2 3 3 4 4","solution":"def final_positions(n, m, operations, queries): Determines the final position of each plant after performing multiple operations on a grid. :param n: Number of rows in the garden grid. :param m: Number of columns in the garden grid. :param operations: String of characters \'U\', \'D\', \'L\', \'R\' that describe the movements. :param queries: List of tuples where each tuple contains the initial coordinates (x, y) of a plant. :return: List of tuples where each tuple contains the final coordinates (x, y) of a plant. net_vertical = 0 # Net number of moves in the vertical direction net_horizontal = 0 # Net number of moves in the horizontal direction # Calculate net movements for operation in operations: if operation == \'U\': net_vertical -= 1 elif operation == \'D\': net_vertical += 1 elif operation == \'L\': net_horizontal -= 1 elif operation == \'R\': net_horizontal += 1 net_vertical = net_vertical % n net_horizontal = net_horizontal % m final_positions = [] for x, y in queries: final_x = (x - 1 + net_vertical) % n + 1 final_y = (y - 1 + net_horizontal) % m + 1 final_positions.append((final_x, final_y)) return final_positions"},{"question":"Given a 2D grid of size m x n that represents a map of \'1\'s (land) and \'0\'s (water), write an algorithm to find the maximum area of an island. An island is a group of \'1\'s connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water. Constraints * 1 ≤ m, n ≤ 50 Input The input begins with two integers, m and n, each representing the number of rows and columns of the grid respectively. The next m lines each contain a string of length n consisting of \'1\'s and \'0\'s representing the grid. Output Print the maximum area of an island in the grid. Examples Input 4 5 11000 11000 00100 00011 Output 4 Input 3 3 110 000 110 Output 2","solution":"def max_area_of_island(grid): Returns the maximum area of an island in the given m x n grid. if not grid: return 0 m, n = len(grid), len(grid[0]) def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == \'0\': return 0 grid[x][y] = \'0\' # mark as visited area = 1 area += dfs(x - 1, y) area += dfs(x + 1, y) area += dfs(x, y - 1) area += dfs(x, y + 1) return area max_area = 0 for i in range(m): for j in range(n): if grid[i][j] == \'1\': max_area = max(max_area, dfs(i, j)) return max_area"},{"question":"You are given a list of employee logs, where each log contains an integer Employee ID, an integer Project ID, and a string that represents the date of logging in `YYYY-MM-DD` format. Your task is to find the Project ID that has the largest number of unique employees working on it. If there are multiple such projects, return the one with the smallest Project ID. # Input - The first line contains an integer N (1 leq N leq 10^5), the number of logs. - Each of the next N lines contains three space-separated values: Employee ID (an integer), Project ID (an integer), and a date in the form `YYYY-MM-DD`. # Output - Output the Project ID that has the largest number of unique employees. If there are multiple such projects, print the smallest Project ID. # Example Sample Input ``` 7 101 1 2022-01-01 102 2 2022-01-02 103 1 2022-01-03 102 1 2022-01-04 104 3 2022-01-05 101 2 2022-01-06 105 3 2022-01-07 ``` Sample Output ``` 1 ``` # Explanation - Project `1` has employees `101`, `102`, and `103`, so 3 unique employees. - Project `2` has employees `102` and `101`, so 2 unique employees. - Project `3` has employees `104` and `105`, so 2 unique employees. - Thus, project `1` has the largest number of unique employees. # Note: - Employee IDs and Project IDs are positive integers. - Dates are given in valid `YYYY-MM-DD` format. - If there are multiple projects with the same number of unique employees, choose the project with the smallest ID.","solution":"def find_project_with_most_unique_employees(n, logs): project_employee_map = {} for log in logs: employee_id, project_id, _ = log.split() employee_id = int(employee_id) project_id = int(project_id) if project_id not in project_employee_map: project_employee_map[project_id] = set() project_employee_map[project_id].add(employee_id) max_unique_employees = 0 project_with_max_unique_employees = None for project_id, employees in project_employee_map.items(): if len(employees) > max_unique_employees or ( len(employees) == max_unique_employees and (project_with_max_unique_employees is None or project_id < project_with_max_unique_employees)): max_unique_employees = len(employees) project_with_max_unique_employees = project_id return project_with_max_unique_employees # Example usage: # n = 7 # logs = [ # \\"101 1 2022-01-01\\", # \\"102 2 2022-01-02\\", # \\"103 1 2022-01-03\\", # \\"102 1 2022-01-04\\", # \\"104 3 2022-01-05\\", # \\"101 2 2022-01-06\\", # \\"105 3 2022-01-07\\" # ] # print(find_project_with_most_unique_employees(n, logs)) # Output: 1"},{"question":"# Escape Room Puzzle Solver You are caught in an escape room, and you need to solve a series of puzzles to get out. One of the puzzles involves decoding a string encoded in a specific way. The string is encoded as follows: 1. Divide the string into groups of two characters. 2. Swap the characters in each group. If a group has less than two characters, keep it as is. For example: - The string \\"abcdef\\" should be encoded to \\"badcfe\\". - The string \\"abcde\\" should be encoded to \\"badce\\" (since \'e\' remains as it is). # Task Write a function `decode_string(encoded_str)` that takes a string and returns its decoded form by swapping each pair of characters. ```python def decode_string(encoded_str: str) -> str: # Your code here # Test cases print(decode_string(\\"abcdef\\")) # Output: \\"badcfe\\" print(decode_string(\\"abcde\\")) # Output: \\"badce\\" print(decode_string(\\"a\\")) # Output: \\"a\\" print(decode_string(\\"\\")) # Output: \\"\\" print(decode_string(\\"ab\\")) # Output: \\"ba\\" ``` Details: - The input string will consist of lowercase English letters only. - The length of the string will be between 0 and 100, inclusive. Good luck!","solution":"def decode_string(encoded_str: str) -> str: decoded_str = [] for i in range(0, len(encoded_str), 2): if i + 1 < len(encoded_str): decoded_str.append(encoded_str[i + 1]) decoded_str.append(encoded_str[i]) return \'\'.join(decoded_str)"},{"question":"Read problems statements in Mandarin Chinese and Russian. Yuna is exploring permutations and their properties. She wants to investigate the lexicographical order of permutations. Given a string S, she needs to determine if S is the lexicographical smallest permutation of the characters. If S is not the lexicographical smallest permutation, find the next permutation of S such that it is lexicographically larger than S. If such permutation does not exist (i.e., S is the largest permutation), return the smallest permutation. Note: The lexicographical order is the generalization of the alphabetical order to sequences of characters. It is based on the order of the characters and does not take into account the positions of the characters within the string. ------ Input ------ The first line contains an integer T denoting the number of test cases. Next T lines each contain a single string S. ------ Output ------ For each test case, print the next lexicographical permutation of S. If S is the largest permutation, print the smallest permutation. ------ Constraints ------ Subtask #1: 20 points 1 ≤ T ≤ 10 1 ≤ |S| ≤ 6 Subtask #2: 30 points 1 ≤ T ≤ 100 1 ≤ |S| ≤ 20 Subtask #3: 50 points 1 ≤ T ≤ 1000 1 ≤ |S| ≤ 100 ----- Sample Input 1 ------ 3 ab dcba aabb ----- Sample Output 1 ------ ba abcd abab ----- Explanation 1 ------ For the first test case, the next lexicographical permutation of \\"ab\\" is \\"ba\\". For the second test case, \\"dcba\\" is already the largest permutation, so we return the smallest permutation \\"abcd\\". For the third test case, the next permutation of \\"aabb\\" is \\"abab\\".","solution":"def next_permutation(s: str) -> str: Given a string s, return the next lexicographical permutation of the string. If such a permutation does not exist, return the smallest permutation. s = list(s) n = len(s) # Find the pivot point for i in range(n - 2, -1, -1): if s[i] < s[i + 1]: break else: s.sort() # if no pivot was found, return the smallest permutation return \'\'.join(s) # Find the rightmost element that is larger than s[i] for j in range(n - 1, i, -1): if s[j] > s[i]: break s[i], s[j] = s[j], s[i] # Swap the pivot with this element s = s[:i+1] + sorted(s[i+1:]) # Reverse the part of the string after the pivot return \'\'.join(s) def solve(T, strings): result = [] for s in strings: result.append(next_permutation(s)) return result"},{"question":"Given an array of integers `nums` and an integer `d`, find the size of the smallest subarray that contains at least one element that is divisible by `d`. If no such subarray exists, return -1. Example 1: Input: nums = [3, 5, 7, 9], d = 3 Output: 1 Explanation: The smallest subarray with at least one element divisible by 3 is [3]. Example 2: Input: nums = [1, 2, 4, 5], d = 6 Output: -1 Explanation: There is no element in the array that is divisible by 6. Example 3: Input: nums = [2, 4, 6, 8, 10], d = 5 Output: 1 Explanation: The smallest subarray with at least one element divisible by 5 is [10]. Constraints: 1. 1 <= nums.length <= 10000 2. 1 <= nums[i], d <= 10^6","solution":"def smallest_subarray_with_divisible(nums, d): Finds the size of the smallest subarray that contains at least one element that is divisible by d. If no such subarray exists, returns -1. for index, num in enumerate(nums): if num % d == 0: return 1 return -1"},{"question":"A company needs to distribute company-branded T-shirts to its employees in different departments. Each employee is supposed to get exactly one T-shirt, and the company has T-shirts of different sizes. The task is to determine the number of ways to distribute T-shirts such that each employee gets a T-shirt of the appropriate size. Input Format The first line contains mathbf{T}, the number of test cases. Each test case consists of three lines: - The first line contains an integer N, the number of employees. - The second line contains N integers, representing the required T-shirt sizes for each employee. - The third line contains N integers, representing the available T-shirt sizes in the company. Output Format For each test case, output a single line containing the number of ways to distribute the T-shirts. Constraints 1leq Tleq100 1leq Nleq50 Each required T-shirt size and each available T-shirt size is a positive integer within the range 1 to 100. Sample Input 2 3 1 2 3 3 2 1 2 1 1 1 1 Sample Output 6 2 Explanation In the first test case, there are 3 employees needing T-shirts of sizes [1, 2, 3], and T-shirts available are of sizes [3, 2, 1]. We can distribute these T-shirts in 6 distinct ways by permuting the three available sizes: - (1, 2, 3) - (1, 3, 2) - (2, 1, 3) - (2, 3, 1) - (3, 1, 2) - (3, 2, 1) In the second test case, all T-shirts needed are size 1 and all available T-shirts are also size 1, thus there are 2 ways to distribute: - (1, 1) - (1, 1) - this accounts for the cases where the index of T-shirts is being permuted. Note that what matters is finding all possible permutations and counting each unique permutation arrangement.","solution":"from itertools import permutations def count_tshirt_distributions(test_cases): results = [] for test in test_cases: N, required, available = test result = 0 for perm in permutations(available): if sorted(perm) == sorted(required): result += 1 results.append(result) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') idx = 0 T = int(lines[idx]) idx += 1 test_cases = [] for _ in range(T): N = int(lines[idx]) idx += 1 required = list(map(int, lines[idx].split())) idx += 1 available = list(map(int, lines[idx].split())) idx += 1 test_cases.append((N, required, available)) return test_cases def main(input_str): test_cases = parse_input(input_str) results = count_tshirt_distributions(test_cases) return \\"n\\".join(map(str, results)) # Example input parsing and processing input_str = 2 3 1 2 3 3 2 1 2 1 1 1 1 print(main(input_str))"},{"question":"In a galaxy far, far away, there exists a unique civilization that uses a different numeral system. Their number system is based on an alphabet containing \'n\' unique characters. Each character is mapped to a digit in the range from 0 to n-1, similar to how digits in the decimal system are mapped from 0 to 9. The civilization wishes to convert numbers between their custom numeral system and the standard decimal numeral system we are accustomed to. You are tasked with helping this civilization by writing two functions: - One function that converts a string representing a number in their custom numeral system to its equivalent decimal value. - Another function that converts a decimal number to its equivalent in the custom numeral system. Input The input consists of three lines: 1. The first line contains an integer n (2 ≤ n ≤ 36) representing the base of the custom numeral system. 2. The second line contains a string of length n representing the unique characters used in their numeral system, sorted in ascending order of their values. 3. The third line contains a number, either as a string (if converting from custom to decimal) or as an integer (if converting from decimal to custom). Output - If the input number is given as a string, output its equivalent decimal value. - If the input number is given as an integer, output its equivalent in the custom numeral system. Examples Input 16 0123456789ABCDEF 1A Output 26 Input 8 01234567 58 Output 72 Note In the first example, the custom numeral system is hexadecimal and \'1A\' in hexadecimal is 26 in decimal. In the second example, the custom numeral system uses 8 unique characters (octal), and 58 in decimal is represented as 72 in the custom numeral system.","solution":"def custom_to_decimal(n, charset, custom_num): Converts a number from a custom numeral system to its equivalent decimal value. Args: n (int): The base of the custom numeral system. charset (str): The characters used in the custom numeral system. custom_num (str): The number in the custom numeral system. Returns: int: The equivalent decimal value. decimal_value = 0 for char in custom_num: decimal_value = decimal_value * n + charset.index(char) return decimal_value def decimal_to_custom(n, charset, decimal_num): Converts a decimal number to its equivalent in a custom numeral system. Args: n (int): The base of the custom numeral system. charset (str): The characters used in the custom numeral system. decimal_num (int): The decimal number. Returns: str: The equivalent number in the custom numeral system. if decimal_num == 0: return charset[0] custom_value = \\"\\" while decimal_num > 0: custom_value = charset[decimal_num % n] + custom_value decimal_num = decimal_num // n return custom_value"},{"question":"Sarena the Squirrel loves acorns and has recently found a large stash. She has decided to arrange her acorns in a special matrix format for easy access. Each acorn has a unique identifier, which is a positive integer. Sarena wants to fill an n x m matrix with these identifiers such that they follow a specific pattern. The matrix should be filled in a \\"snake-like\\" pattern as follows: - The first row is filled from left to right. - The second row is filled from right to left. - The third row is filled from left to right. - This pattern continues for all n rows. For example, if the unique identifiers are in sequential order starting from 1, the matrix for a 4 x 3 would look like: ``` 1 2 3 6 5 4 7 8 9 12 11 10 ``` Given integers n and m and a list of unique identifiers of length n * m, help Sarena fill the matrix in the desired snake-like pattern. Input - The first line of input contains two integers n and m (1 ≤ n, m ≤ 250). - The second line contains n * m unique integers separated by spaces, representing the identifiers. Output - The output must consist of n lines, each containing m integers: a description of the matrix filled in the snake-like pattern. Example Input 3 4 1 2 3 4 5 6 7 8 9 10 11 12 Output 1 2 3 4 8 7 6 5 9 10 11 12 Note In the above example, - The first row is filled from left to right: [1, 2, 3, 4] - The second row is filled from right to left: [8, 7, 6, 5] - The third row is filled from left to right: [9, 10, 11, 12] Pay close attention to the filling direction of each row to match Sarena\'s desired pattern.","solution":"def fill_snake_matrix(n, m, identifiers): Fills an n by m matrix in a snake-like pattern using the provided identifiers. Parameters: n (int): The number of rows. m (int): The number of columns. identifiers (list): A list of unique integers to fill the matrix. Returns: list: A 2D list representing the matrix filled in the snake-like pattern. matrix = [] idx = 0 for i in range(n): row = [] for j in range(m): row.append(identifiers[idx]) idx += 1 if i % 2 == 1: row.reverse() matrix.append(row) return matrix"},{"question":"In a faraway land called Metropolis, there are n metropolises connected by m bidirectional roads. Each metropolis has a unique index from 1 to n. The kingdom authorities are interested in strategic urban planning and want to build a new headquarter in a metropolis such that the maximum distance from the headquarter to any other metropolis in terms of the number of roads is minimized. The distance between two metropolises is the minimum number of roads that need to be traversed to get from one metropolis to another. The goal is to find the metropolis that minimizes the maximum distance to all other metropolises. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of metropolises and the number of roads, respectively. The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n) — representing a bidirectional road between metropolises u and v. Output Print a single integer — the index of the metropolis where the maximum distance to any other metropolis is minimized. If there are multiple such metropolises, print the smallest one. Examples Input 4 3 1 2 2 3 2 4 Output 2 Input 6 5 1 2 2 3 3 4 4 5 4 6 Output 3","solution":"from collections import deque, defaultdict def find_best_metropolis(n, m, roads): if n == 1: return 1 # Build the graph using adjacency list graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def bfs(start): distances = [-1] * (n + 1) distances[start] = 0 queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if distances[neighbor] == -1: distances[neighbor] = distances[node] + 1 queue.append(neighbor) # Ignore the distance for node 0 return distances[1:] # Calculate all-pairs shortest paths eccentricities = [float(\'inf\')] * (n + 1) for i in range(1, n + 1): if len(graph[i]) > 0: distances = bfs(i) max_distance = max(distances) eccentricities[i] = max_distance # Find the metropolis with the minimum eccentricity min_eccentricity = min(eccentricities[1:]) result = eccentricities.index(min_eccentricity) return result # Read input function def build_and_solve(input_data): lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) roads = [tuple(map(int, line.split())) for line in lines[1:]] return find_best_metropolis(n, m, roads)"},{"question":"You have received a special deal from a grocery store which allows you to buy a pack of 5 identical items for a discounted total price. However, you need to determine if it\'s financially beneficial for you to purchase items individually using a given price list, or in discounted packs. Write a function that takes two parameters: an integer list of individual item prices, and an integer representing the discounted price for a pack of 5 items. The function should return a boolean indicating whether purchasing the pack is cheaper than buying the five cheapest items from the input list individually. # Example: ```python item_prices = [2, 3, 1, 5, 4, 6, 7, 8] pack_price = 15 ``` In this case, the five cheapest items cost 1, 2, 3, 4, 5. Summing these up: 1 + 2 + 3 + 4 + 5 = 15. Since the pack price is equal to the sum of the cheapest items, the function should return `False`. # Function Signature: ```python def is_pack_cheaper(item_prices: List[int], pack_price: int) -> bool: # Implementation here ``` # Constraints: - The length of the `item_prices` list will be at least 5. - Each price in the `item_prices` list will be a positive integer. - The `pack_price` will be a positive integer.","solution":"from typing import List def is_pack_cheaper(item_prices: List[int], pack_price: int) -> bool: Determines if buying a pack of 5 items at a discounted price is cheaper than buying the five cheapest items individually. Parameters: item_prices (List[int]): A list of individual item prices. pack_price (int): The discounted price for a pack of 5 items. Returns: bool: True if the pack price is cheaper, False otherwise. # Sort the list of item prices to find the five cheapest items item_prices.sort() # Sum the five cheapest items sum_of_cheapest_five = sum(item_prices[:5]) # Compare the sum with the pack price return pack_price < sum_of_cheapest_five"},{"question":"Given an unsorted array of integers, determine the length of the longest subsequence that includes consecutive integers, even if they are not in order. A subsequence is derived from the array by deleting some or no elements without changing the order of the remaining elements. Write a function `findLongestConsecutiveSubsequence(arr)` that receives an array `arr` of integers and returns an integer representing the length of the longest consecutive subsequence. INPUT - The input contains a single array of integers arr, where 1 <= length of arr <= 10^5 and -10^6 <= arr[i] <= 10^6. OUTPUT - The function should return an integer representing the length of the longest consecutive subsequence. EXAMPLES Input [100, 4, 200, 1, 3, 2] Output 4 Explanation The longest consecutive subsequence is [1, 2, 3, 4]. Therefore, the length is 4. Input [10, 12, 11, 7, 6, 5, 8] Output 4 Explanation The longest consecutive subsequence is [7, 8, 5, 6] or [5, 6, 7, 8]. Therefore, the length is 4. Input [1, 9, 3, 10, 4, 20, 2] Output 4 Explanation The longest consecutive subsequence is [1, 2, 3, 4]. Therefore, the length is 4. Notes: - The order of elements in the input array does not affect the length of the longest consecutive subsequence. - Consecutive elements do not need to appear in their natural order in the array, but must appear in sequential order without gaps when considered as a sequence.","solution":"def findLongestConsecutiveSubsequence(arr): Returns the length of the longest consecutive subsequence in the array. if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in num_set: # Only check if the current num is the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Given a string s consisting of lowercase English letters, you need to remove the minimum number of characters from the string so that the remaining string contains no consecutive repeating characters. Return the resulting string after the removal. Example 1: Input: s = \\"aaabbbccc\\" Output: \\"abc\\" Example 2: Input: s = \\"aabbaacc\\" Output: \\"abac\\" Example 3: Input: s = \\"abcd\\" Output: \\"abcd\\" Constraints: 1. 1 <= s.length <= 10^5 2. s consists only of lowercase English letters.","solution":"def remove_consecutive_duplicates(s): Remove the minimum number of characters from the string so that the remaining string contains no consecutive repeating characters. if not s: return s result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return \'\'.join(result)"},{"question":"Martha loves collecting rare stamps. She has a collection of N stamps, each with a different rarity value. Martha wants to organize her collection by exchanging some of her stamps with other collectors to maximize the sum of rarity values in her collection. Each rare stamp can be exchanged with another one that has a different rarity value. However, every time she makes an exchange, she incurs a certain cost, which is the difference between the rarity values of the two stamps being exchanged. Given the starting set of rarity values, compute the maximum possible sum of rarity values Martha can achieve after making an optimal sequence of exchanges, and also the minimum total cost incurred for achieving this maximum sum. Input Format The first line contains the number of test cases mathbf{T}. mathbf{T} test cases follow. The first line for each test case contains N, the number of stamps initially. The next line contains N space delimited numbers representing the rarity value of each stamp. Constraints 1 leq T leq 50 1 leq N leq 50 1 leq rarity value leq 100 Output Format Output mathbf{T} lines, one corresponding to each test case. Each line should contain two integers separated by a space: the maximum possible sum of rarity values and the minimum cost incurred. Sample Input 3 3 1 2 3 4 5 7 2 8 2 10 20 Sample Output 6 0 22 2 30 0 Explanation For the first case, Martha cannot make any exchanges to increase the sum of rarity values, so the maximum sum is 1 + 2 + 3 = 6, with a cost of 0. For the second case, one possible optimal sequence of exchanges involves no need for any exchange as the initial sum is already maximum with minimum cost. For the third case, there are no possible exchanges since there are only two stamps, thus the maximum sum is 10 + 20 = 30 at zero cost.","solution":"def max_sum_and_min_cost(tc_count, cases): results = [] for case in cases: N = case[0] rarities = case[1] max_sum = sum(rarities) min_cost = 0 # No exchanges needed results.append(f\\"{max_sum} {min_cost}\\") return results"},{"question":"Write a function that simulates a basic stack data structure with the following operations: push, pop, and max. The max operation should return the largest element currently in the stack. If the stack is empty and max is called, return None. The expected function signatures are: - `push(item: int) -> None` - `pop() -> int` - `max() -> int` You are required to optimize the max operation to be O(1). Example: ``` stack = Stack() stack.push(3) stack.push(1) stack.push(5) assert stack.max() == 5 assert stack.pop() == 5 assert stack.max() == 3 stack.push(2) stack.push(4) assert stack.max() == 4 ```","solution":"class Stack: def __init__(self): Initialize an empty stack and a list to keep track of the max values. self.stack = [] self.max_stack = [] def push(self, item: int) -> None: Push an item onto the stack and update the max stack. self.stack.append(item) if not self.max_stack or item >= self.max_stack[-1]: self.max_stack.append(item) def pop(self) -> int: Pop an item off the stack and update the max stack. if not self.stack: return None popped_item = self.stack.pop() if popped_item == self.max_stack[-1]: self.max_stack.pop() return popped_item def max(self) -> int: Return the maximum item in the stack. if not self.max_stack: return None return self.max_stack[-1]"},{"question":"Implement a Min-Heap data structure that supports the following operations: - `insert(x)`: Insert the element `x` into the Min-Heap. - `extractMin()`: Remove and return the smallest element from the Min-Heap. - `decreaseKey(i, x)`: Decrease the value of the element at index `i` to `x`. It is guaranteed that `x` will be smaller than or equal to the current value of the element. This function should maintain the heap property. - `delete(i)`: Remove the element at index `i` from the Min-Heap. Your task is to implement the `MinHeap` class with the above methods in an efficient manner. # Example: ```python # Initialize min-heap min_heap = MinHeap() # Perform operations min_heap.insert(3) min_heap.insert(2) min_heap.decreaseKey(1, 1) # Decrease value at index 1 to 1 min_heap.insert(15) min_heap.insert(5) min_heap.insert(4) min_heap.insert(45) print(min_heap.extractMin()) # Output: 1 print(min_heap.extractMin()) # Output: 2 min_heap.delete(2) # Delete value at index 2 print(min_heap.extractMin()) # Output: 4 ``` # Your Task: Complete the constructor and the following methods of the `MinHeap` class: - `insert(self, x)` - `extractMin(self)` - `decreaseKey(self, i, x)` - `delete(self, i)` # Expected Time Complexity: - `insert(x)`: O(log N) - `extractMin()`: O(log N) - `decreaseKey(i, x)`: O(log N) - `delete(i)`: O(log N) # Constraints: - 1 <= Number of operations <= 10^5 - The elements of the heap will be positive integers.","solution":"class MinHeap: def __init__(self): self.heap = [] def insert(self, x): self.heap.append(x) self._heapify_up(len(self.heap) - 1) def extractMin(self): if len(self.heap) == 0: return None if len(self.heap) == 1: return self.heap.pop() root = self.heap[0] self.heap[0] = self.heap.pop() self._heapify_down(0) return root def decreaseKey(self, i, x): self.heap[i] = x self._heapify_up(i) def delete(self, i): self.decreaseKey(i, float(\'-inf\')) self.extractMin() def _heapify_up(self, i): parent = (i - 1) // 2 if i > 0 and self.heap[i] < self.heap[parent]: self.heap[i], self.heap[parent] = self.heap[parent], self.heap[i] self._heapify_up(parent) def _heapify_down(self, i): smallest = i left = 2 * i + 1 right = 2 * i + 2 if left < len(self.heap) and self.heap[left] < self.heap[smallest]: smallest = left if right < len(self.heap) and self.heap[right] < self.heap[smallest]: smallest = right if smallest != i: self.heap[i], self.heap[smallest] = self.heap[smallest], self.heap[i] self._heapify_down(smallest)"},{"question":"Bob is playing a game that involves moving a pointer on a number line. Initially, the pointer is at position 0. He can perform two types of moves any number of times: - Move type A: Move the pointer left by 1 unit. - Move type B: Move the pointer right by K units. Bob wants to reach the position N using as few moves as possible. Determine the minimum number of moves required for Bob to reach exactly position N. -----Constraints----- - 1 ≤ N, K ≤ 20 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: N K -----Output----- Print the minimum number of moves required for Bob to reach the position N. -----Sample Input----- 5 3 -----Sample Output----- 3 By choosing the following moves: A, B, B, Bob can move as follows: 0 → -1 → 2 → 5, reaching the target position in 3 moves.","solution":"def min_moves_to_reach_n(N, K): Returns the minimum number of moves required for Bob to reach exactly position N. Parameters: N (int): target position K (int): steps to move right by K units Returns: int: minimum number of moves to reach N # Initialize a dictionary to store the minimum moves to each position min_moves = {0: 0} # Initialize a queue with the starting position queue = [(0, 0)] while queue: current_position, current_moves = queue.pop(0) # Move left to the current_position-1 left_position = current_position - 1 if left_position not in min_moves or current_moves + 1 < min_moves[left_position]: min_moves[left_position] = current_moves + 1 queue.append((left_position, current_moves + 1)) # Move right to the current_position+K right_position = current_position + K if right_position not in min_moves or current_moves + 1 < min_moves[right_position]: min_moves[right_position] = current_moves + 1 queue.append((right_position, current_moves + 1)) if N in min_moves: break return min_moves[N]"},{"question":"Henry enjoys optimizing routes for delivery services. He has a list of n delivery zones, each with a specific weight representing the number of packages to be delivered in that zone. Henry needs to handle a series of m queries: 1. Update the weight of a specific delivery zone to a new value. 2. Query the total weight of all delivery zones within a given range. 3. Query the maximum weight among all delivery zones within a given range. For each query, Henry is provided with the starting and ending indices of the range (inclusive). Input The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of delivery zones and the number of queries, respectively. The second line contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10^9) — the initial weights of the delivery zones. The next m lines contain the queries. For each query, the first integer of the line is t (1 ≤ t ≤ 3) — the type of query. If t=1, then two integers i (1 ≤ i ≤ n) and x (1 ≤ x ≤ 10^9) will follow, indicating an update to w_i = x. If t=2, then two integers l (1 ≤ l ≤ r ≤ n) and r will follow, indicating a query for the total weight from w_l to w_r. If t=3, then two integers l (1 ≤ l ≤ r ≤ n) and r will follow, indicating a query for the maximum weight from w_l to w_r. Output For each query of type 2 and 3, print the result on a new line. Examples Input 6 5 10 20 15 30 25 5 2 1 3 3 2 5 1 4 35 2 1 6 3 3 6 Output 45 30 140 35 Note In the example: - For the first query, the total weight of zones 1 to 3 is 10 + 20 + 15 = 45. - For the second query, the maximum weight among zones 2 to 5 is 30. - For the third query, the weight of zone 4 is updated to 35. - For the fourth query, the total weight of all zones is now 10 + 20 + 15 + 35 + 25 + 5 = 110. - For the fifth query, the maximum weight among zones 3 to 6 is 35.","solution":"class DeliveryZones: def __init__(self, weights): self.weights = weights def update(self, i, x): self.weights[i-1] = x def query_sum(self, l, r): return sum(self.weights[l-1:r]) def query_max(self, l, r): return max(self.weights[l-1:r]) def handle_queries(n, m, weights, queries): delivery_zones = DeliveryZones(weights) results = [] for query in queries: t = query[0] if t == 1: i, x = query[1], query[2] delivery_zones.update(i, x) elif t == 2: l, r = query[1], query[2] results.append(delivery_zones.query_sum(l, r)) elif t == 3: l, r = query[1], query[2] results.append(delivery_zones.query_max(l, r)) return results"},{"question":"Alice is trapped in a maze of size N x M with various obstacles. The maze is described as a grid where each cell has one of the following values: - `S`: The starting point (Alice\'s current position). - `E`: The exit point. - `.`: An empty cell Alice can move to. - `#`: An obstacle that Alice cannot move through. Alice can move in any of the four directions: up, down, left, or right, but she cannot move diagonally. Each move costs Alice 1 unit of energy. Alice starts with a certain amount of energy, and she wants to find the shortest path to reach the exit point. If reaching the exit is not possible with the given energy, output \\"-1\\". # Constraints - 1 ≤ N, M ≤ 100 - 1 ≤ E ≤ 10^5 (initial energy Alice has) - There will always be exactly one \'S\' and one \'E\' in the grid. - There can be multiple paths to the exit or none. # Input The input is given from Standard Input in the following format: ``` N M E maze_row_1 maze_row_2 : maze_row_N ``` # Output Print the minimum energy required to reach the exit. If it is not possible to reach the exit with the given energy, print \\"-1\\". # Examples Example 1 **Input:** ``` 4 4 10 S..# .#.# .#.E .... ``` **Output:** ``` 5 ``` Example 2 **Input:** ``` 3 3 2 S#. .#E # ``` **Output:** ``` -1 ``` Example 3 **Input:** ``` 5 5 20 S.... ..# ... ..... ....E ``` **Output:** ``` 8 ```","solution":"from collections import deque def min_energy_to_exit(N, M, E, maze): def is_within_bounds(x, y): return 0 <= x < N and 0 <= y < M # Locate the start (S) and end (E) points start = end = None for i in range(N): for j in range(M): if maze[i][j] == \'S\': start = (i, j) elif maze[i][j] == \'E\': end = (i, j) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right # BFS initialization queue = deque([(start[0], start[1], 0)]) # (row, col, current_energy) visited = set() visited.add((start[0], start[1])) while queue: x, y, current_energy = queue.popleft() # If we reach the end point if (x, y) == end: return current_energy # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if is_within_bounds(nx, ny) and (nx, ny) not in visited and maze[nx][ny] != \'#\': queue.append((nx, ny, current_energy + 1)) visited.add((nx, ny)) # If the exit is not reachable return -1 def solve(maze_input): N, M, E = map(int, maze_input[0].split()) maze = maze_input[1:] min_energy_required = min_energy_to_exit(N, M, E, maze) if min_energy_required == -1 or min_energy_required > E: print(-1) else: print(min_energy_required)"},{"question":"Write a function `extract_book_info` that accepts the URL of a book\'s web page from a bookstore and returns a dictionary containing the title, author, and price of the book. # Example: ```python >>> url = \\"http://bookstore.com/book/1234\\" >>> extract_book_info(url) {\'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\', \'price\': \'10.99\'} >>> url = \\"http://bookstore.com/book/5678\\" >>> extract_book_info(url) {\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'price\': \'8.99\'} ``` # Libraries/Recommendations: **Python:** * `urllib.request.urlopen`: Use this to open a webpage and retrieve HTML content. * `re`: Regular Expression library for pattern matching and extraction. * `bs4`([BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc)): Useful for parsing and navigating HTML. # Notes: * Handle possible errors such as invalid URLs or missing data gracefully. * Ensure the returned dictionary contains keys \'title\', \'author\', and \'price\' with their respective values extracted from the book\'s web page. * Test with a variety of URLs to handle different HTML structures if necessary. * Make sure to account for any variations in HTML structure that might occur on different book pages on the same bookstore website.","solution":"import requests from bs4 import BeautifulSoup def extract_book_info(url): Extracts the book information from the given URL. Args: url (str): URL of the book\'s web page. Returns: dict: A dictionary containing the title, author, and price of the book. response = requests.get(url) if response.status_code != 200: return {\'title\': None, \'author\': None, \'price\': None} soup = BeautifulSoup(response.content, \'html.parser\') title = soup.find(\'h1\', {\'class\': \'book-title\'}) author = soup.find(\'span\', {\'class\': \'book-author\'}) price = soup.find(\'span\', {\'class\': \'book-price\'}) return { \'title\': title.get_text(strip=True) if title else None, \'author\': author.get_text(strip=True) if author else None, \'price\': price.get_text(strip=True) if price else None }"},{"question":"In a distant galaxy, there is a unique way of transmitting data between planets using teleporters. The teleporters operate in a series of jumps. Each teleporter has a predetermined number of jumps that it will make forward in a single activation, and then it stops. If the number of jumps exceeds the total number of planets, the teleporter will circulate back (i.e., it wraps around circularly). Your task is to determine if it is possible to start from the first planet and reach the last planet using these teleporters. You are given an array `T` of size `N`, where `T[i]` denotes the number of jumps the teleporter at the ith planet will make. Indexing starts from 0, which means the starting planet is `0` and you want to determine if you can reach planet `N-1`. Write a function to determine if it is possible to reach the last planet `N-1` from the first planet `0`. **Function Signature:** `def can_reach_last_planet(T: List[int]) -> str:` Input: - The first line contains the number of test cases. - For each test case, the next line contains the integer N (1 <= N <= 1000), the number of planets. - The following line contains N space-separated integers which denote the array T. Output: - For each test case, return \\"Possible\\" if it is possible to reach the last planet, otherwise return \\"Impossible\\". Return value is case-sensitive. SAMPLE INPUT 2 5 2 3 1 1 4 5 3 2 1 0 4 SAMPLE OUTPUT Possible Impossible Explanation: - In the first test case, starting from planet `0`: - First teleporter takes 2 jumps forward to planet `2`. - From planet `2`, the teleporter takes 1 jump forward to planet `3`. - Finally, 1 jump from planet `3` lands us on planet `4` (last planet). - In the second test case, starting from planet `0`: - First teleporter takes 3 jumps forward to planet `3`. - However, from planet `3`, the teleporter does not move (0 jumps), making it impossible to progress further. Hence, we can\'t reach planet `4`.","solution":"def can_reach_last_planet(T): N = len(T) max_reach = 0 for i in range(N): if i > max_reach: return \\"Impossible\\" max_reach = max(max_reach, i + T[i]) if max_reach >= N - 1: return \\"Possible\\" return \\"Impossible\\""},{"question":"Create a function that takes a string and returns an object (or a dictionary in Python) representing the frequency of each character in the string. The function should ignore spaces and be case-insensitive. For example: ```python char_frequency(\\"AaBb\\") # should return {\'a\': 2, \'b\': 2} char_frequency(\\"Hello World\\") # should return {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} char_frequency(\\" a B b\\") # should return {\'a\': 1, \'b\': 2} char_frequency(\\"\\") # should return {} ```","solution":"def char_frequency(s): Takes a string s and returns a dictionary representing the frequency of each character. The function ignores spaces and is case-insensitive. freq = {} for char in s.lower(): if char != \' \': freq[char] = freq.get(char, 0) + 1 return freq"},{"question":"**Palindrome Permutations** # Problem Given a string `s` consisting of lowercase English letters, your task is to determine whether any permutation of the string can form a palindrome. A string is a palindrome if it reads the same backward as forward. For example, \\"anna\\" and \\"civic\\" are palindromes, but \\"hello\\" is not. You need to output `true` if any permutation of the string can form a palindrome and `false` otherwise. # Input * A single line containing a string `s`. Constraints: - 1 (leq ) |s| (leq ) (10^5) # Output - Output `true` if any permutation of the string can form a palindrome, otherwise `false`. # Examples **Example 1:** Input: ``` aabb ``` Output: ``` true ``` Explanation: One possible permutation of the string \\"aabb\\" that forms a palindrome is \\"abba\\". **Example 2:** Input: ``` civic ``` Output: ``` true ``` Explanation: The string \\"civic\\" itself is a palindrome. **Example 3:** Input: ``` hello ``` Output: ``` false ``` Explanation: No permutation of the string \\"hello\\" can form a palindrome. # Example of function signature: ```python def can_form_palindrome(s: str) -> bool: pass ```","solution":"def can_form_palindrome(s: str) -> bool: Determines whether any permutation of the string s can form a palindrome. :param s: The input string consisting of lowercase English letters. :return: True if any permutation of the string can form a palindrome, otherwise False. from collections import Counter char_count = Counter(s) # Count how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"Your friend has decided to organize a movie night and needs your help figuring out how many snacks to prepare. Depending on the number of friends attending, you need to output the appropriate number of snack packs required. By repairing the function below, you will determine the exact number of snack packs to buy based on the number of friends attending. The number of friends will always be a number, and there will always be at least 1 friend. ```r The expected behaviour is as follows: - Fewer than 10 friends: \\"Buy 2 packs of snacks\\" - At least 10 but fewer than 20 friends: \\"Buy 4 packs of snacks\\" - At least 20 but fewer than 50 friends: \\"Buy 10 packs of snacks\\" - 50 or more friends: \\"Buy 20 packs of snacks\\" Your friend will always have between 1 and 50 friends, inclusive. ```","solution":"def snack_packs(friends): Return the number of snack packs based on the number of friends attending. Parameters: friends (int): The number of friends attending. Returns: str: The number of snack packs to buy. if friends < 10: return \\"Buy 2 packs of snacks\\" elif friends < 20: return \\"Buy 4 packs of snacks\\" elif friends < 50: return \\"Buy 10 packs of snacks\\" else: return \\"Buy 20 packs of snacks\\""},{"question":"You are given a list of integers representing the number of gold coins in various treasure chests arranged in a row. Your goal is to collect the maximum amount of gold coins, but there\'s a catch: when you open a chest to collect the gold coins inside, you cannot open the next chest on either side of it (to avoid triggering booby traps). Write a function `max_gold_coins(chests)` that takes a list of non-negative integers `chests`, where each integer represents the number of gold coins in a chest. The function should return the maximum number of gold coins that can be collected without opening two consecutive chests. # Function Signature ```python def max_gold_coins(chests: List[int]) -> int: ``` # Input - `chests`: A list of non-negative integers, where `0 <= len(chests) <= 10000` and `0 <= chests[i] <= 1000`. # Output - Return the maximum number of gold coins that can be collected. # Example ```python # Example 1 chests = [5, 1, 2, 10, 6, 2] print(max_gold_coins(chests)) # Expected output: 17 # Example 2 chests = [12, 7, 8, 9, 18, 2] print(max_gold_coins(chests)) # Expected output: 38 ``` # Explanation In the first example, the optimal way is to collect from the chests with 5, 10, and 2 coins, giving a total of 17 coins, since picking these chests leaves sufficient spacing to not trigger any traps. In the second example, picking coins from chests with 12, 8, 18 coins yields a maximum of 38 coins. # Constraints - Ensure that your solution has a time complexity suitable for the input limits.","solution":"from typing import List def max_gold_coins(chests: List[int]) -> int: if not chests: return 0 if len(chests) == 1: return chests[0] # Initialize two variables to track maximum loot up to the previous chest prev2 = 0 # loot up to two chests ago prev1 = chests[0] # loot from the first chest for i in range(1, len(chests)): current = max(prev1, prev2 + chests[i]) prev2 = prev1 # move previous1 to previous2 prev1 = current # update previous1 to current loot return prev1"},{"question":"Write a function that takes a string containing varying angles in degrees (as float values) and outputs the sum of all acute angles. An angle is considered acute if it is greater than 0 degrees and less than 90 degrees. The input string will have each angle separated by a space. ```python sum_acute_angles(\\"30.5 45 90 120.75\\") == 75.5 sum_acute_angles(\\"85 95 15 10\\") == 110 sum_acute_angles(\\"90 180 270\\") == 0 ``` ```C sum_acute_angles(\\"30.5 45 90 120.75\\") == 75.5; sum_acute_angles(\\"85 95 15 10\\") == 110; sum_acute_angles(\\"90 180 270\\") == 0; ```","solution":"def sum_acute_angles(angle_str): Returns the sum of all acute angles (0 < angle < 90) from the given string of angles. angles = map(float, angle_str.split()) acute_angles_sum = sum(angle for angle in angles if 0 < angle < 90) return acute_angles_sum"},{"question":"Write a function to calculate the nth Fibonacci number using Dynamic Programming. Your function should compute the Fibonacci number efficiently, especially for large n. Input: - A single integer n (1 <= n <= 10^6) representing the position in the Fibonacci sequence. Output: - The nth Fibonacci number modulo 10^9+7, as the result can be very large. Example Input: 10 Example Output: 55 Explanation: The first 10 Fibonacci numbers are: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. Thus, the 10th Fibonacci number is 55. The final result should be based on the modulus 10^9+7 operation.","solution":"MOD = 10**9 + 7 def fibonacci(n): Returns the nth Fibonacci number using Dynamic Programming modulo 10^9 + 7. if n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, (a + b) % MOD return b"},{"question":"In a distant galaxy, there is a planet called Zog where sentient robots compete in coding challenges to earn upgrades. One such challenge involves matrix manipulation. The robots are given a matrix of integers and are required to modify it according to specific rules. To win an upgrade, a robot must apply the transformation correctly and output the modified matrix. The transformation rules are as follows: 1. Each cell in the matrix that contains an even number remains unchanged. 2. Each cell in the matrix that contains an odd number is incremented by 1. Write a program to apply these transformations and output the modified matrix. Input: The first line of input contains two integers, M and N, representing the number of rows and columns in the matrix, respectively. The following M lines contain N integers each, representing the matrix elements. Output: Output the modified matrix with M lines containing N integers each as per the transformation rules. Constraints: 1 ≤ M, N ≤ 100 -1000 ≤ Matrix elements ≤ 1000 SAMPLE INPUT: 3 3 2 3 4 5 6 7 8 9 10 SAMPLE OUTPUT: 2 4 4 6 6 8 8 10 10","solution":"def transform_matrix(M, N, matrix): Transforms the given matrix according to the specified rules: - Each cell containing an even number remains unchanged. - Each cell containing an odd number is incremented by 1. Parameters: M (int): Number of rows in the matrix. N (int): Number of columns in the matrix. matrix (list of list of int): The matrix elements. Returns: list of list of int: The transformed matrix. transformed_matrix = [] for row in matrix: transformed_row = [] for cell in row: if cell % 2 == 0: transformed_row.append(cell) else: transformed_row.append(cell + 1) transformed_matrix.append(transformed_row) return transformed_matrix # Example usage: # M = 3 # N = 3 # matrix = [ # [2, 3, 4], # [5, 6, 7], # [8, 9, 10] # ] # print(transform_matrix(M, N, matrix))"},{"question":"# Rotated Array Search Given a rotated sorted array, which is an array that was initially sorted in ascending order and then rotated at some pivot unknown to you beforehand. For example, `[0,1,2,4,5,6,7]` might become `[4,5,6,7,0,1,2]`. Search for a target value in this array in O(log n) time. If the target exists, return its index. Otherwise, return -1. You can assume no duplicate exists in the array. Your function should be named `search` and follow the signature: ```python def search(nums: List[int], target: int) -> int: ``` # Input - `nums` - A list of integers representing the rotated sorted array. - `target` - An integer value you are searching for. # Output - The index of the target value if present in the array. - -1 if the target value is not present in the array. # Constraints - (1 leq text{len(nums)} leq 10^4) - ( -10^4 leq text{nums[i]}, text{target} leq 10^4) # Example Example 1: ```python Input: nums = [4,5,6,7,0,1,2], target = 0 Output: 4 ``` Example 2: ```python Input: nums = [4,5,6,7,0,1,2], target = 3 Output: -1 ``` Example 3: ```python Input: nums = [1], target = 0 Output: -1 ``` # Note - You must write an algorithm with O(log n) runtime complexity. - Be sure to handle cases where the input array has only one element. - Consider edge cases like empty arrays or arrays without any rotation (i.e., fully sorted arrays).","solution":"from typing import List def search(nums: List[int], target: int) -> int: Searches for a target value in a rotated sorted array and returns its index. If the target does not exist, it returns -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid # If the left half is sorted if nums[left] <= nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 # If the right half is sorted else: if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"A large company has several branches across the country, and each branch keeps track of its daily transactions in a sequence of integers, where each integer represents the transaction amount (can be positive or negative). One prominent analysis they wish to perform is to identify the maximum profit that can be obtained by buying and selling within a specific time frame. The transactions are recorded every day and are given in an array format. A key restriction is that you are allowed to make **at most one transaction** (i.e., buy one and sell one share of the company’s branch) in a given period. Write a program to determine the maximum profit that can be achieved. If no profit can be made, return 0. Constraints * 1 ≤ length of the transaction array ≤ 2 × 10^5 * -10^4 ≤ transaction amounts ≤ 10^4 Input Input is given from the standard input in the following format: ``` n t1 t2 t3 ... tn ``` where `n` is the length of the transaction array, `t1, t2, t3, ..., tn` are the transactions recorded each day. Output Print a single integer representing the maximum profit that can be achieved, or 0 if no profit can be made. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Explanation In the first example, the maximum profit can be achieved by buying on day 2 (transaction = 1) and selling on day 5 (transaction = 6), profit = 6 - 1 = 5. In the second example, no profit can be achieved since the price keeps decreasing. Therefore, the maximum profit is 0.","solution":"def max_profit(n, transactions): if n == 0: return 0 min_price = float(\'inf\') max_profit = 0 for price in transactions: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) transactions = list(map(int, data[1:])) print(max_profit(n, transactions))"},{"question":"During a storm, a series of Wi-Fi routers in a straight line are disrupted. Each router can normally link to the next router in the line, but some of them are turned off and cannot link up. You are given a list representing the state of the routers (1 for an active router and 0 for an inactive router). Your task is to find out the maximum number of contiguous active routers. -----Input:----- - The first line contains a single integer T, the number of test cases. - Each of the following T lines contains a string of 0s and 1s representing the state of the routers from start to end of the line. -----Output:----- For each test case, output a single line representing the maximum number of contiguous active routers. -----Constraints----- - 1 leq T leq 100 - The length of the string representing routers will be between 1 and 10^5. -----Sample Input:----- 2 1101100111 001100 -----Sample Output:----- 3 2 -----EXPLANATION:----- For 1) The longest contiguous segment of active routers (1s) is \\"111\\", which has length 3. For 2) The longest contiguous segment of active routers (1s) is \\"11\\", which has length 2.","solution":"def max_contiguous_active_routers(test_cases): This function receives a list of strings representing the state of the routers and returns a list of integers, each representing the maximum number of contiguous active routers for the given test case. results = [] for routers in test_cases: max_len = 0 current_len = 0 for router in routers: if router == \'1\': current_len += 1 if current_len > max_len: max_len = current_len else: current_len = 0 results.append(max_len) return results"},{"question":"Given a collection of intervals, merge all overlapping intervals. Example: Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6]. Input: [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] are considered overlapping.","solution":"def merge_intervals(intervals): Merge all overlapping intervals. Args: intervals (List[List[int]]): A collection of intervals where each interval is a list of two integers. Returns: List[List[int]]: A collection of merged intervals. if not intervals: return [] # Sort the intervals based on the start time intervals.sort(key=lambda x: x[0]) merged = [] current_start, current_end = intervals[0] for i in range(1, len(intervals)): interval_start, interval_end = intervals[i] if interval_start <= current_end: # There is overlap, merge the intervals current_end = max(current_end, interval_end) else: # No overlap, add the previous interval and update the current interval merged.append([current_start, current_end]) current_start, current_end = intervals[i] # Add the last interval merged.append([current_start, current_end]) return merged"},{"question":"Given an array of integers, you need to rearrange the array such that for every i (1 ≤ i ≤ n), arr[i] > arr[i-1] if i is odd, and arr[i] < arr[i-1] if i is even. Your task is to write a function that returns any one such rearrangement of the array. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 1000) — the size of the array. The second line of each test case contains n integers, the elements of the array. Output For each test case, print a single line containing n integers, the rearranged array according to the rules above. It is guaranteed that for any given test case, at least one valid rearrangement exists. Examples Input 2 5 1 3 2 4 5 3 9 7 5 Output 1 3 2 4 5 5 7 9 Note In the first test case, 1 < 3, 3 > 2, 2 < 4, and 4 > 5 which satisfies the given condition. There are multiple correct answers possible; one valid possible answer is returned. In the second test case, 5 < 7 and 7 > 9 which satisfies the given condition. There are multiple correct answers possible; one valid possible answer is returned.","solution":"def rearrange_array(arr): Rearrange array such that: - for every i (1 ≤ i ≤ n), arr[i] > arr[i-1] if i is odd - for every i (1 ≤ i ≤ n), arr[i] < arr[i-1] if i is even arr.sort() for i in range(1, len(arr), 2): if i + 1 < len(arr): arr[i], arr[i + 1] = arr[i + 1], arr[i] return arr def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(rearrange_array(arr)) return results"},{"question":"Design a function that takes a list of unique integers and returns all possible permutations of the list. # Requirements: - You should not use any library functions that directly generate permutations. - The function should return a list of lists, where each inner list is a unique permutation of the input list. - The order of permutations in the output does not matter. # Input: - A single input list, `nums`, consisting of unique integers, with `1 <= len(nums) <= 6`. # Output: - A list of lists, each representing a unique permutation of the input list. # Example: ```python Input: [1, 2, 3] Output: [ [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1] ] ``` # Constraints: - You may assume that the input always contains unique integers and has a length between 1 and 6 inclusive.","solution":"def generate_permutations(nums): Generate all permutations of the given list of unique integers. Args: nums (List[int]): A list of unique integers. Returns: List[List[int]]: A list containing all permutations of nums. def backtrack(start): # If the entire list is processed: if start == len(nums): result.append(nums[:]) for i in range(start, len(nums)): # Swap nums[start] with nums[i] nums[start], nums[i] = nums[i], nums[start] # Recursively generate permutations for the next part of the list: backtrack(start + 1) # Swap back to restore the original list state nums[start], nums[i] = nums[i], nums[start] result = [] backtrack(0) return result"},{"question":"You are given a list of words. Your task is to find and return the longest common prefix shared among all the words. If there is no common prefix, return an empty string. The first line of the input contains an integer n, representing the number of words in the list (n will be less than 1000). The next n lines contain one word each. SAMPLE INPUT 4 flower flow flight flog SAMPLE OUTPUT fl Explanation: Out of the given words, \\"flower\\", \\"flow\\", \\"flight\\", and \\"flog\\", the longest common prefix is \\"fl\\". All the given words start with \\"fl\\". Additional example: SAMPLE INPUT 3 dog racecar car SAMPLE OUTPUT (empty string) Explanation: There is no common prefix among the words \\"dog\\", \\"racecar\\", and \\"car\\". Thus, the output is an empty string.","solution":"def longest_common_prefix(words): Returns the longest common prefix string amongst an array of words. If there is no common prefix, return an empty string. if not words: return \\"\\" # Take the first word as the initial prefix prefix = words[0] # Iterate over the rest of the words for word in words[1:]: while word[:len(prefix)] != prefix and prefix: # Decrease the prefix by one character at a time prefix = prefix[:len(prefix)-1] # If the prefix is empty, no need to check further if not prefix: return \\"\\" return prefix"},{"question":"A courier company has an automated system where packages are transferred between depots in a linear chain. The first depot is numbered 0, the second depot is numbered 1, and so on. Each depot charges a fee for the transfer of a package, and this fee is represented by the depot\'s number. When a package moves from depot K to depot K+1, it accumulates the transfer fee of the destination depot. A package initially starts from depot 0 with no fees accumulated. The company needs to determine the total transfer fees accumulated by the time a package reaches a given depot N. Input Format: The first line will contain the integer T, the number of test cases. Each test case consists of a single integer N representing the destination depot number. Output Format: For each test case, output the total accumulated transfer fees by the time the package reaches depot N. Constraints: 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^6 SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT 1 3 6 Explanation Case 1: For the first test case, moving to depot 1 incurs a fee of 1. Case 2: For the second test case, moving to depot 1 incurs a fee of 1 and moving to depot 2 incurs an additional fee of 2, so the total fee is 1+2=3. Case 3: For the third test case, moving to depot 1 incurs a fee of 1, moving to depot 2 incurs an additional fee of 2, and moving to depot 3 incurs an additional fee of 3, so the total fee is 1+2+3=6.","solution":"def total_transfer_fees(test_cases): This function receives a list of test cases where each case represents the depot number N. It returns a list of the total accumulated transfer fees by the time the package reaches each depot N. results = [] for N in test_cases: # The total transfer fee to reach depot N is the sum of first N natural numbers total_fee = N * (N + 1) // 2 results.append(total_fee) return results"},{"question":"You are given a rectangular grid of size n times m consisting of cells, each of which is either open (represented by \'.\') or blocked (represented by \'#\'). You need to determine the size of the largest open (i.e., containing only \'.\') square subgrid within the grid. -----Input----- The first line of input contains two integers n and m (1 leq n, m leq 100): the number of rows and columns of the grid. Each of the following n lines contains a string of length m, representing the grid. The character \'.\' denotes an open cell, while the character \'#\' denotes a blocked cell. -----Output----- Print a single integer: the length of the side of the largest open square subgrid. -----Examples----- Input 5 6 .... ....#. .#.... .... .. Output 2 Input 3 3 # #.. # Output 1","solution":"def largest_open_square(grid): Returns the size of the side length of the largest square subgrid that contains only \'.\'. if not grid: return 0 n = len(grid) m = len(grid[0]) dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): # If we\'re at a \'.\' cell, we care about calculating if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 # If it\'s on the border, the largest square ending here is 1x1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) # Otherwise, dp[i][j] is implicitly 0 return max_side"},{"question":"In Planet Arcadia, there lives a group of unique species known as Arcanix. Each Arcanix has a distinct identification number called A-id. The wise elder of Arcadia wants to organize a meeting with the representatives of the most diverse group of Arcanix. He determines the diversity based on how many times the A-id appears in an observation list. If two or more A-ids have the same frequency, the elder prioritizes the Arcanix with a lower numerical A-id. Given N observations of A-ids, determine the A-ids of the M species that occur most frequently in the observations. Example 1: Input: N = 7 observations[] = {5, 3, 5, 2, 6, 3, 3} M = 2 Output: 3 5 Explanation: Arcanix with A-id 3 appears 3 times, and the Arcanix with A-id 5 appears 2 times. Example 2: Input: N = 9 observations[] = {4, 4, 1, 2, 2, 2, 4, 3, 3} M = 3 Output: 4 2 3 Explanation: Arcanix with A-id 4 appears 3 times, A-id 2 appears 3 times, and A-id 3 appears 2 times. Hence, the order is 4, 2, 3. Your Task: You don\'t need to read input or print anything. Complete the function TopM() which takes observations[] and integer M as input parameters and returns an array containing the A-ids of the most frequently observed species. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 2 * 10^5 1 ≤ A-id ≤ 10^5","solution":"import heapq from collections import Counter def TopM(observations, M): Returns the A-ids of the M most frequently observed species. Parameters: observations (list of int): List of A-id observations. M (int): Number of top most frequent A-ids to return. Returns: list of int: List of A-ids of the most frequently observed species. # Count the frequency of each A-id counter = Counter(observations) # Use a max-heap to keep track of M most frequent A-ids max_heap = [(-freq, a_id) for a_id, freq in counter.items()] heapq.heapify(max_heap) # Extract top M elements from the max-heap result = [] for _ in range(M): result.append(heapq.heappop(max_heap)[1]) return result"},{"question":"# Roller Coaster Queue Management A popular amusement park has implemented a new rule for managing the queue system for its top roller coaster ride. Each visitor\'s height (in cm) is recorded upon entry, and only those within a specified height range are allowed to board the ride. Implement the function `allowed_riders`, which takes: - An array of integers `heights` representing the heights of the visitors in the queue, - Two integers `min_height` and `max_height` representing the inclusive height range. The function should return a list of the visitors\' heights who are allowed to board the ride, maintaining their original order. Example ```python allowed_riders([160, 150, 170, 145, 180, 175], 150, 180) ``` Expected output: ``` [160, 150, 170, 180, 175] ``` Notes: 1. The function should include both `min_height` and `max_height` in the allowed height range. 2. The order of heights in the input list should be preserved in the result. --- *Good luck.*","solution":"def allowed_riders(heights, min_height, max_height): Returns the list of heights of visitors who are allowed to board the ride. Parameters: heights (list of int): A list of heights of visitors. min_height (int): The minimum height allowed to board the ride. max_height (int): The maximum height allowed to board the ride. Returns: list of int: A list of heights of visitors who are within the allowed height range. return [height for height in heights if min_height <= height <= max_height]"},{"question":"Max has a collection of books in his library. Each book has a unique ISBN and a specific number of pages. Max likes to read in his free time and has decided to read some of his books, but he has a special way to choose what books to read based on the number of pages they have. You need to help Max by writing a function that takes the list of books and their respective page numbers, and it should return the book with the highest number of pages. If there are multiple books with the same highest number of pages, return the one with the smallest ISBN. **Input** - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of books in the library. - The next `n` lines each contain a string representing the ISBN of the book (unique and of length 10 for simplicity) and an integer `p` (1 ≤ p ≤ 10000), the number of pages in the book. **Output** - Output the ISBN of the book with the highest number of pages. If there are multiple books with the same highest number of pages, output the ISBN that comes first lexicographically. **Example** Input ``` 4 1234567890 200 0987654321 300 1111111111 300 2222222222 150 ``` Output ``` 0987654321 ``` Input ``` 3 1111111111 450 2222222222 450 3333333333 450 ``` Output ``` 1111111111 ``` **Explanation** In the first example, two books have the highest page count of 300. \\"0987654321\\" and \\"1111111111\\". Since \\"0987654321\\" is lexicographically smaller, it is the correct output. In the second example, all three books have the same highest page count of 450. The lexicographically smallest ISBN among them is \\"1111111111\\".","solution":"def find_book_with_most_pages(n, books): Returns the ISBN of the book with the highest number of pages. If multiple books have the same highest number of pages, returns the one with the smallest ISBN. :param n: int, number of books :param books: list of tuples (ISBN, pages) :return: str, ISBN of the book with the highest number of pages max_pages = -1 best_isbn = \\"\\" for isbn, pages in books: if pages > max_pages or (pages == max_pages and isbn < best_isbn): max_pages = pages best_isbn = isbn return best_isbn"},{"question":"In a remote mountainous region, several campsites are located, each connected by a series of cable cars. Each cable car between two campsites is bidirectional and has a specified weight limit. A cable car can only be used if the total weight of the people using it does not exceed its weight limit. To ensure efficient travel between all the campsites, the local administration plans to install some additional cable cars such that the maximum load capacity required to maintain travel between all campsites is minimized. They asked for your help to determine the minimum possible maximum weight limit among all cable cars, considering both existing and any additional installations. Write a program to determine this value. **Input** The input is given in the following format: ``` CN c1 c2 W c3 c4 W :: cm cm+1 W ``` - The first line contains two integers, **C** and **N** *(2 ≤ C ≤ 500)* and *(1 ≤ N ≤ 5000)*. **C** is the number of campsites, and **N** is the number of existing cable cars. - The next **N** lines each contain three integers **ci**, **cj**, and **W**. **ci** and **cj** *(1 ≤ ci, cj ≤ C)* are the campsites connected by the cable car, and **W** *(1 ≤ W ≤ 10^6)* is the weight limit of that cable car. Each cable car is bidirectional, and every pair of campsites is unique. **Output** The output should be a single integer, representing the minimum possible maximum weight limit among all cable cars after any necessary installations. **Examples** Input: ``` 4 5 1 2 10 1 3 30 2 3 40 3 4 20 4 2 50 ``` Output: ``` 30 ``` Input: ``` 3 3 1 2 60 2 3 90 1 3 75 ``` Output: ``` 75 ``` **Explanation** In the first example, you can keep the highest weight limit to 30 by installing/re-routing the cable cars such that travel between all campsites is still maintained. In the second example, all campsites can be connected using cable cars with a maximum weight limit of 75.","solution":"def find_min_max_weight_limit(C, N, cable_cars): # Helper function using Kruskal\'s MST algorithm with union-find def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 # Sort all the edges in non-decreasing order of their weight cable_cars = sorted(cable_cars, key=lambda item: item[2]) parent = [] rank = [] for node in range(C): parent.append(node) rank.append(0) index = 0 # Index variable, used for sorted cable_cars e = 0 # Number of edges in MST min_max_weight = 0 while e < C - 1: # Pick the smallest weight edge. Check if it forms a cycle with the spanning tree formed so far. # If a cycle is not formed, include this edge. Otherwise, discard it. if index >= len(cable_cars): break u, v, w = cable_cars[index] index = index + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 union(parent, rank, x, y) min_max_weight = max(min_max_weight, w) return min_max_weight"},{"question":"A warehouse management system keeps track of inventory items with unique alphanumeric IDs and their quantities. The system performs a sequence of operations as described below: * add(itemID, quantity): If the item does not exist, add the item with the specified quantity. If the item exists, increase its quantity by the specified amount. * get(itemID): Print the quantity of the specified item. * remove(itemID, quantity): If the item exists, reduce its quantity by the specified amount. If the quantity to remove exceeds the current quantity, set the quantity to zero. If the item does not exist, do nothing. * list(L, R): Print all items with alphanumeric IDs that fall between L and R (inclusive) in lexicographic order along with their quantities. Constraints * 1 leq q leq 100,000 * 1 leq quantity leq 1,000,000 * 1 leq length of itemID leq 15 * itemID consists of alphanumeric characters only (both uppercase and lowercase) * L leq R in lexicographic order * The total number of items listed by list operations does not exceed 200,000 Input The input is given in the following format: q query_1 query_2 : query_q Each query query_i is given by: 0 itemID quantity or 1 itemID or 2 itemID quantity or 3 L R where the first digits 0, 1, 2 and 3 represent add, get, remove and list operations. Output For each get operation, print the corresponding quantity. For each list operation, print the corresponding items along with their quantities in lexicographic order of itemIDs. Example Input 7 0 item1 10 0 item2 20 1 item1 2 item1 5 1 item1 3 item1 item3 3 itema itemz Output 10 5 item1 5 item2 20","solution":"class Warehouse: def __init__(self): self.inventory = {} def add(self, itemID, quantity): if itemID in self.inventory: self.inventory[itemID] += quantity else: self.inventory[itemID] = quantity def get(self, itemID): return self.inventory.get(itemID, 0) def remove(self, itemID, quantity): if itemID in self.inventory: self.inventory[itemID] = max(self.inventory[itemID] - quantity, 0) if self.inventory[itemID] == 0: del self.inventory[itemID] def list_items(self, L, R): sorted_items = sorted((item for item in self.inventory.keys() if L <= item <= R)) return [(item, self.inventory[item]) for item in sorted_items] def process_queries(queries): warehouse = Warehouse() output = [] for query in queries: parts = query.split() if parts[0] == \'0\': # add operation _, itemID, quantity = parts quantity = int(quantity) warehouse.add(itemID, quantity) elif parts[0] == \'1\': # get operation _, itemID = parts output.append(warehouse.get(itemID)) elif parts[0] == \'2\': # remove operation _, itemID, quantity = parts quantity = int(quantity) warehouse.remove(itemID, quantity) elif parts[0] == \'3\': # list operation _, L, R = parts items = warehouse.list_items(L, R) if items: for item, qty in items: output.append(f\\"{item} {qty}\\") return output"},{"question":"Lena loves solving puzzles, and she recently came across an interesting problem involving matrices. She wants to transform a given matrix into a special form, called row-cumulative matrix. In a row-cumulative matrix, each cell of a row contains the sum of elements from the start of the row to the current cell. Given an integer matrix, help Lena achieve this transformation. -----Input----- The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the matrix, respectively. Each of the next n lines contains m space-separated integers, representing the elements of the matrix. -----Output----- Output the transformed row-cumulative matrix, with the same dimensions n x m. Each element in the output matrix should be the cumulative sum of its respective row in the input matrix. -----Examples----- # Input 3 4 1 2 3 4 5 6 7 8 9 10 11 12 # Output 1 3 6 10 5 11 18 26 9 19 30 42 # Input 2 3 3 1 2 4 4 4 # Output 3 4 6 4 8 12","solution":"def row_cumulative_matrix(matrix): Transforms a given matrix into a row-cumulative matrix. Parameters: matrix (list of list of int): The input matrix. Returns: list of list of int: The row-cumulative matrix. row_cumulative = [] for row in matrix: cumulative_row = [] cumulative_sum = 0 for val in row: cumulative_sum += val cumulative_row.append(cumulative_sum) row_cumulative.append(cumulative_row) return row_cumulative"},{"question":"Palindrome Partitioner Description: You are asked to write a program that finds the minimum number of palindromic substrings a given input string can be divided into. A palindromic string is one that reads the same forward and backward. For example, \\"aba\\" is a palindrome, but \\"abc\\" is not. Given the input string, determine the smallest number of palindromic substrings necessary to form the entire string. Input: The input consists of multiple test cases. Each test case is provided on a new line with a string of lowercase letters (from ‘a’ to ‘z’). The maximum length of the string is 1000 characters. The end of input is indicated by a line containing only a dot ‘.’. Output: For each test case, output a single line containing the minimum number of palindromic substrings that the given string can be divided into. Sample Input: racecar aabbd abc madamimadam . Sample Output: 1 3 3 1 Explanation: 1. The string \\"racecar\\" is already a palindrome, so the minimum number of palindromic substrings is 1. 2. The string \\"aabbd\\" can be divided into \\"aa\\", \\"b\\", \\"b\\", \\"d\\", which are 4 palindromes. 3. The string \\"abc\\" can be divided into \\"a\\", \\"b\\", \\"c\\", which are 3 palindromes. 4. The string \\"madamimadam\\" is also a palindrome, so the minimum number of palindromic substrings is 1.","solution":"def min_palindromic_substrings(s): n = len(s) # is_palindrome[i][j] will be True if the substring s[i:j+1] is a palindrome is_palindrome = [[False] * n for _ in range(n)] # Every string with one character is a palindrome for i in range(n): is_palindrome[i][i] = True # Check two character palindromes for i in range(n-1): if s[i] == s[i+1]: is_palindrome[i][i+1] = True # Check palindromes longer than two characters for length in range(3, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j] and is_palindrome[i+1][j-1]: is_palindrome[i][j] = True # dp[i] will be the minimum number of palindromic substrings of s[0:i+1] dp = [float(\'inf\')] * n for i in range(n): if is_palindrome[0][i]: dp[i] = 1 else: for j in range(i): if is_palindrome[j+1][i]: dp[i] = min(dp[i], dp[j] + 1) return dp[-1] def process_input(input_data): results = [] for line in input_data.strip().split(\'n\'): if line == \'.\': break results.append(min_palindromic_substrings(line)) return results # Example inputs example_input = racecar aabbd abc madamimadam . # Process the example inputs example_output = process_input(example_input) for result in example_output: print(result)"},{"question":"Given a sequence of brackets in the form of a string, your task is to determine the minimum number of brackets you need to add to make the sequence valid. A valid sequence of brackets means that every opening bracket has a corresponding closing bracket and the pairs are properly nested. -----Input----- The input consists of one line containing a string `s`. The length of the string is between 1 and 100000, and it only contains the characters \'(\' and \')\'. -----Output----- Output a single integer, the minimum number of brackets to add to make the sequence valid. -----Examples----- Sample Input: (())) Sample Output: 1 Sample Input: ((()) Sample Output: 1 Sample Input: )()()) Sample Output: 2","solution":"def min_add_to_make_valid(s): Returns the minimum number of brackets to add to make the sequence valid. open_brackets = 0 close_brackets = 0 for char in s: if char == \'(\': open_brackets += 1 elif char == \')\': if open_brackets > 0: open_brackets -= 1 else: close_brackets += 1 return open_brackets + close_brackets"},{"question":"The city of Atrien has a very unique transportation system consisting entirely of monorail trains that move along a single line. This transport system has a peculiar ticketing mechanism that needs to be optimized. There are n stations in Atrien placed in order on the monorail line from station 1 to station n. Each passenger buys a ticket which covers transportation between exactly two stations: the starting station and the ending station. To board the train, a passenger can enter at any station between the starting station and the ending station, but not after the end station. Similarly, they can exit at any station between the starting station and the ending station, but not before the starting station. Because of the way the system is made, some tickets end up being very unpopular for sales due to limited boarding and exiting flexibility. Your job is to determine the most popular ticket segment, i.e., the segment of the route that is present on the maximum number of sold tickets. You are given m sold tickets, and each ticket is described by a tuple (a_i, b_i) which means the passenger has a ticket that allows travel from station a_i to station b_i, inclusive. Write a program that determines the number of tickets that include each station and finds the station with the maximum number of sold tickets. -----Input----- The first line contains two integers n and m (2 le n le 10^5, 1 le m le 10^5) — the number of stations and the number of tickets sold. Each of the next m lines contains two integers a_i and b_i (1 le a_i le b_i le n) — the starting and ending stations of a ticket. -----Output----- Print a single integer — the station that is present on the maximum number of tickets. If there are multiple stations with the same maximum number of tickets, print the smallest one. -----Example----- Input 5 3 1 3 2 4 1 5 Output 2 -----Explanation----- The tickets are: 1. From station 1 to station 3 (covering 1, 2, and 3) 2. From station 2 to station 4 (covering 2, 3, and 4) 3. From station 1 to station 5 (covering 1, 2, 3, 4, and 5) Stations have the following coverages: - Station 1: 2 tickets - Station 2: 3 tickets (most popular) - Station 3: 3 tickets (also most popular) - Station 4: 2 tickets - Station 5: 1 ticket Since stations 2 and 3 have the highest number of coverage (3 tickets), the smallest station number among them is 2. Hence the output is 2.","solution":"def most_popular_station(n, m, tickets): station_coverage = [0] * (n + 1) # array to track coverage of each station for a, b in tickets: for i in range(a, b + 1): station_coverage[i] += 1 max_coverage = max(station_coverage) for i in range(1, n + 1): if station_coverage[i] == max_coverage: return i # Example usage n, m = 5, 3 tickets = [(1, 3), (2, 4), (1, 5)] print(most_popular_station(n, m, tickets)) # Output: 2"},{"question":"You are given an integer array `numbers` and an integer `threshold`. Your task is to return a new array containing only the numbers from the original array that are greater than the `threshold`. If no numbers are greater than the `threshold`, return an empty array. ``` filter_greater_than([1, 5, 8, 3, 7], 4) --> [5, 8, 7] filter_greater_than([2, 3, 1], 5) --> [] ``` > Note: The order of the elements in the returned array should match the order they appeared in the original array.","solution":"def filter_greater_than(numbers, threshold): Returns a new array containing only the numbers from the original array that are greater than the threshold. return [num for num in numbers if num > threshold]"},{"question":"Given a list of integers, return the list where each integer is replaced with the product of all the integers in the original list except the one at the current index. For example, if the input list is `[1, 2, 3, 4]`, the output should be `[24, 12, 8, 6]` because: - 24 is the product of 2 * 3 * 4 - 12 is the product of 1 * 3 * 4 - 8 is the product of 1 * 2 * 4 - 6 is the product of 1 * 2 * 3 However, the challenge is to solve this without using division. Alternatively, if an integer in the list is 0, the result should be calculated by treating each 0 as a special element, ensuring correct product calculation as per the rules. # Input Format - The first line contains an integer `T`, the number of test cases. - Each of the next `T` lines contains a positive integer `N` followed by `N` integers which represent the list. # Output Format For each test case, output the resulting list of integers. # Constraints - `1 ≤ T ≤ 1000` - `2 ≤ N ≤ 10^5` - `1 ≤ List[i] ≤ 10^4` - The total number of integers across all test cases will not exceed `10^6`. # Example Input ``` 2 4 1 2 3 4 3 0 1 2 ``` # Example Output ``` 24 12 8 6 2 0 0 ``` # Explanation In the first test case, the output result for each position follows as per the rules explained above. In the second test case: - For the element 0, the product of all other numbers is 1 * 2 = 2 - For the elements other than 0, since there is a 0 in the list, their product will be 0.","solution":"def product_except_self(nums): n = len(nums) result = [1] * n prefix_product = 1 for i in range(n): result[i] = prefix_product prefix_product *= nums[i] suffix_product = 1 for i in range(n-1, -1, -1): result[i] *= suffix_product suffix_product *= nums[i] return result def process_test_cases(test_cases): results = [] for case in test_cases: n = case[0] nums = case[1:] results.append(product_except_self(nums)) return results"},{"question":"# Scheduling Job Interviews You work at a company that needs to schedule job interviews for candidates. Write a function that will generate a list of interview slots available for each candidate, based on the interviewer\'s availability and the duration of each interview. The function takes three parameters: availability, duration, and numSlots - The parameter \'availability\' will be a list of tuples indicating start and end times of the interviewer\'s available blocks during the day (e.g., [(9,12), (13,17)] means the interviewer is available from 9am to 12pm, and from 1pm to 5pm). - The parameter \'duration\' is the length of each interview in hours (e.g., 1 means 1-hour long interviews) - The parameter \'numSlots\' indicates the number of consecutive slots required for the interview process (e.g., 2 means you need to find two consecutive slots for back-to-back interviews). Constraints - The function should maximize the number of slots found, but must return \\"Not enough slots\\" if there are not enough available consecutive slots. Example Input and Output ~~~~ input ([(9,12), (13,17)], 1, 2) output [(9, 10), (10, 11), (13, 14), (14, 15), (15, 16)] input ([(9,11)], 1, 2) output \\"Not enough slots\\" input ([(8,10), (11,15)], 2, 1) output [(8, 10), (11, 13), (13, 15)] ~~~~ Additional Notes Ensure the slots do not overlap and fit exactly within the provided availability without exceeding the end time of any block. Use 24-hour format for simplicity in time representation.","solution":"def schedule_interviews(availability, duration, numSlots): Returns a list of available interview slots based on the interviewer\'s availability, the duration of each interview, and the number of consecutive slots required. available_slots = [] required_interval = duration * numSlots for start, end in availability: current_time = start while current_time + required_interval <= end: consecutive_slots = [(current_time + duration * i, current_time + duration * (i + 1)) for i in range(numSlots)] available_slots.append(consecutive_slots[0]) current_time += duration if len(available_slots) < numSlots: return \\"Not enough slots\\" return available_slots"},{"question":"Farmland International provides various types of grains to its customers. Recently, they have observed some anomalies in their grain stock management system that have caused inconsistencies in stock details across several branches. To ensure smooth function, they need a new system that allows them to track, update, and query stock details efficiently. The system should work with the following functionalities: 1. **Add New Grain Stock**: Register a grain type and set its initial stock quantity. 2. **Update Grain Stock**: Update the stock quantity for a specific grain type. 3. **Query Stock Details**: For a given grain type, return the current stock quantity. Write a program that supports these operations. The program will first receive a list of grain types with their initial stock quantities, followed by a series of operations to update or query the stock details. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of different grain types to register initially. Each of the following n lines contains a string g and an integer s (1 ≤ |g| ≤ 20, 0 ≤ s ≤ 109) — the grain type and its initial stock quantity. The next line contains an integer q (1 ≤ q ≤ 105) — the number of operations to be performed. Each of the following q lines contains an operation in one of the following formats: - `\\"Update g x\\"` — Add x (−109 ≤ x ≤ 109) to the current stock of grain type g. - `\\"Query g\\"` — Output the current stock quantity of grain type g. Output For each \\"Query\\" operation, print the current stock quantity of the specified grain type. It is guaranteed that all grain types in the operations have been registered initially. Examples Input 5 wheat 100 rice 200 maze 150 barley 80 oats 60 6 Update wheat 50 Query rice Update barley -30 Query barley Update oats 20 Query oats Output 200 50 80","solution":"def create_grain_stock(n, initial_stocks, q, operations): grain_stock = {} for grain, stock in initial_stocks: grain_stock[grain] = stock results = [] for operation in operations: if operation[0] == \\"Update\\": grain = operation[1] quantity = int(operation[2]) grain_stock[grain] += quantity elif operation[0] == \\"Query\\": grain = operation[1] results.append(grain_stock[grain]) return results"},{"question":"You are tasked with designing an algorithm for a simple yet popular game called \\"Tower of Hanoi.\\" The game consists of three rods and a number of disks of different sizes which can slide onto any rod. The puzzle starts with the disks neatly stacked in ascending order of size on one rod, the smallest at the top, making a conical shape. Here are the rules: 1. You can only move one disk at a time. 2. A move consists of taking the upper disk from one of the stacks and placing it on top of another stack or on an empty rod. 3. No larger disk may be placed on top of a smaller disk. Your task is to write a function that prints the steps to move `n` disks from the source rod to the destination rod using the auxiliary rod. Implement this function in Python. Function Signature: ```python def tower_of_hanoi(n, source, target, auxiliary): pass ``` Example: ```python tower_of_hanoi(3, \'A\', \'C\', \'B\') ``` Output: ``` Move disk 1 from rod A to rod C Move disk 2 from rod A to rod B Move disk 1 from rod C to rod B Move disk 3 from rod A to rod C Move disk 1 from rod B to rod A Move disk 2 from rod B to rod C Move disk 1 from rod A to rod C ``` Input: - An integer `n` representing the number of disks. - Three characters `source`, `target`, and `auxiliary` representing the rods. Output: - Print each move in the format \\"Move disk X from rod Y to rod Z\\".","solution":"def tower_of_hanoi(n, source, target, auxiliary): Solves the Tower of Hanoi puzzle and prints each move required to move n disks from source to target using auxiliary. Parameters: n (int): Number of disks source (str): The rod on which disks are initially placed target (str): The rod to which disks should be moved auxiliary (str): The rod used as a helper for moving disks if n == 1: print(f\\"Move disk 1 from rod {source} to rod {target}\\") return tower_of_hanoi(n-1, source, auxiliary, target) print(f\\"Move disk {n} from rod {source} to rod {target}\\") tower_of_hanoi(n-1, auxiliary, target, source)"},{"question":"John, a librarian, is organizing a set of new books on a single shelf. Each book has a unique height, and John wants to place each book in such a way that the heights of the books form a non-decreasing sequence from left to right on the shelf. However, he needs to do this with the least number of swaps between any two books. Each swap allows John to exchange the position of any two books. Given the list of the heights of the books, determine the minimum number of swaps required to sort the books by height in non-decreasing order. Input The first line contains an integer n (1 ≤ n ≤ 100000), the number of books. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000000), representing the heights of the books. Output Print the minimum number of swaps required to arrange the books in non-decreasing order of their heights. Examples Input 5 4 3 1 2 5 Output 3 Input 3 3 1 2 Output 2 Note In the first sample, an optimal sequence of swaps is as follows: 1. Swap the book at position 1 with the book at position 3: [1, 3, 4, 2, 5] 2. Swap the book at position 2 with the book at position 4: [1, 2, 4, 3, 5] 3. Swap the book at position 3 with the book at position 4: [1, 2, 3, 4, 5] This results in a total of 3 swaps. In the second sample, an optimal sequence of swaps is as follows: 1. Swap the book at position 1 with the book at position 2: [1, 3, 2] 2. Swap the book at position 2 with the book at position 3: [1, 2, 3] This results in a total of 2 swaps.","solution":"def minimum_swaps_to_sort(heights): Returns the minimum number of swaps required to sort the list of book heights in non-decreasing order. n = len(heights) arrpos = [(heights[i], i) for i in range(n)] arrpos.sort() visited = [False] * n swaps = 0 for i in range(n): if visited[i] or arrpos[i][1] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arrpos[j][1] cycle_size += 1 if cycle_size > 0: swaps += cycle_size - 1 return swaps"},{"question":"In a workshop, there are n tasks to be completed, and each task takes a specific amount of time. You are given the initial times in which these tasks have to be completed. Additionally, there are m queries that either alter the required time to complete a task or request the current maximum time among all tasks. Initially, the list of task completion times is given, and each query is either: 1. Update the time of a specific task, or 2. Find the task with the current maximum completion time. Your task is to handle these queries efficiently and output the results for the queries that ask for the maximum completion time. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of tasks and the number of queries, respectively. - The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 10^9), where ti is the initial time to complete the i-th task. - The following m lines describe the queries. Each query is one of the following forms: - `1 k x` — update the time of the k-th task to x (1 ≤ k ≤ n, 1 ≤ x ≤ 10^9) - `2` — find the current maximum completion time among all tasks. # Output For each query of the second type, output a single integer — the current maximum completion time among all tasks. # Examples Input ``` 5 5 3 8 4 5 6 2 1 3 10 2 1 2 7 2 ``` Output ``` 8 10 10 ``` # Notes Initially, the times required to complete the tasks are [3, 8, 4, 5, 6]. For the first query, type `2`, the maximum time is 8. For the second query, type `1 3 10`, it updates the 3rd task time to 10, so the times become [3, 8, 10, 5, 6]. For the third query, type `2`, the maximum time is now 10. For the fourth query, type `1 2 7`, it updates the 2nd task time to 7, so the times become [3, 7, 10, 5, 6]. For the fifth query, type `2`, the maximum time remains 10.","solution":"def process_queries(n, m, tasks, queries): results = [] task_times = tasks[:] for query in queries: if query[0] == 1: # Update task time k, x = query[1], query[2] task_times[k-1] = x elif query[0] == 2: # Find the current maximum completion time current_max = max(task_times) results.append(current_max) return results"},{"question":"Alice is playing a game on a n times n grid, where n is an odd integer. The grid cells are numbered from 1 to n^2 in a spiral order. Starting from the top-left corner and moving inwards in a clockwise direction, the numbering proceeds until reaching the center of the grid. Alice can choose two positions, i and j (1 le i, j le n^2), and wants to know whether a rook can move from position i to position j. A rook in chess moves horizontally or vertically any number of squares, but not diagonally. The task is to determine if it\'s possible for a rook to move from the position i to the position j, given the positions i and j. This effectively means that i and j need to be on the same row or column in the grid. -----Input----- The first line contains two positive integers n and t (1 le t le 1000, 3 le n le 99 where n is always odd), where n is the grid size and t is the number of test cases. The next t lines each contain two integers i and j (1 le i, j le n^2), representing the initial and target positions respectively in the grid. -----Output----- Output t lines. Each line should contain \\"YES\\" if the rook can move from position i to position j, and \\"NO\\" otherwise. -----Examples----- Input 5 3 1 13 7 9 17 21 Output YES YES NO -----Note----- Consider the first example. A rook can move from position 1 to position 13 in a 5 times 5 grid because they are on the same row. In the second case, a rook can move from position 7 to position 9 because they are on the same column. In the third case, a rook cannot move from position 17 to position 21 because they are neither on the same row nor in the same column.","solution":"def generate_spiral(n): spiral = [[0] * n for _ in range(n)] left, right = 0, n - 1 top, bottom = 0, n - 1 num = 1 while left <= right and top <= bottom: for i in range(left, right + 1): spiral[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): spiral[i][right] = num num += 1 right -= 1 for i in range(right, left - 1, -1): spiral[bottom][i] = num num += 1 bottom -= 1 for i in range(bottom, top - 1, -1): spiral[i][left] = num num += 1 left += 1 return spiral def find_position(n, num): spiral = generate_spiral(n) for row in range(n): for col in range(n): if spiral[row][col] == num: return (row, col) return (-1, -1) def can_rook_move(n, i, j): row_i, col_i = find_position(n, i) row_j, col_j = find_position(n, j) return row_i == row_j or col_i == col_j def rook_moves(n, test_cases): results = [] for i, j in test_cases: if can_rook_move(n, i, j): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of strings `words` and a target string `target`. The strings in `words` consist of lowercase English letters. Your task is to find the shortest contiguous subsequence of `words` (substring) such that the concatenated string of this subsequence contains the target string as a subsequence. A string `s` is a subsequence of a string `t` if `s` can be formed by deleting some characters of `t` without changing the order of the remaining characters. Write a function `shortest_subsequence(words: List[str], target: str) -> List[str]` that returns the shortest contiguous subsequence of `words` whose concatenated string contains `target` as a subsequence. If there are multiple such subsequences with the same shortest length, return any one of them. If no such subsequence exists, return an empty list. # Function Signature ```python def shortest_subsequence(words: List[str], target: str) -> List[str]: ``` # Examples ```python shortest_subsequence([\\"abc\\", \\"de\\", \\"fg\\", \\"hij\\", \\"kl\\"], \\"fgh\\") == [\\"fg\\", \\"hij\\"] shortest_subsequence([\\"abc\\", \\"def\\", \\"gh\\", \\"ijk\\"], \\"ghijk\\") == [\\"gh\\", \\"ijk\\"] shortest_subsequence([\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\"], \\"ace\\") == [\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\"] shortest_subsequence([\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\"], \\"f\\") == [] ``` # Constraints - The number of strings in `words` will not exceed 1000. - The length of each string in `words` will not exceed 100. - The length of the target string will not exceed 100.","solution":"from typing import List def shortest_subsequence(words: List[str], target: str) -> List[str]: n = len(words) min_length = float(\'inf\') result = [] # Helper function to check if target is a subsequence of combined def is_subsequence(combined, target): it = iter(combined) return all(char in it for char in target) # Iterate over all possible subsequences for i in range(n): combined = \\"\\" for j in range(i, n): combined += words[j] if is_subsequence(combined, target): if j - i + 1 < min_length: min_length = j - i + 1 result = words[i:j+1] break return result"},{"question":"Maya loves solving puzzles. One day she stumbled upon an interesting one while playing with strings. She has a string consisting of lowercase English letters and she can insert any number of lowercase English letters at any position in the string. She aims to make the string a palindrome with a minimum number of insertions. Could you help Maya find the minimum number of insertions needed? Example 1: Input: s: \\"abc\\" Output: 2 Explanation: By inserting \\"b\\" and \\"a\\" at positions 3 and 4, we get \\"abcba\\" which is a palindrome. Example 2: Input: s: \\"aab\\" Output: 1 Explanation: By inserting \\"a\\" at position 3, we get \\"aaba\\" which is a palindrome. Your Task: The task is to complete the function minInsertions() which takes a string s as input and returns the minimum number of insertions needed to make the string a palindrome. Expected Time Complexity: O(N^2) Expected Space Complexity: O(N^2) Constraints: 1 <= s.length <= 500","solution":"def minInsertions(s): def lcs(X, Y): m = len(X) n = len(Y) L = [[0] * (n + 1) for i in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i - 1] == Y[j - 1]: L[i][j] = L[i - 1][j - 1] + 1 else: L[i][j] = max(L[i - 1][j], L[i][j - 1]) return L[m][n] rev_s = s[::-1] lcs_length = lcs(s, rev_s) return len(s) - lcs_length"},{"question":"Write a function `rotateArray` that rotates elements of an array to the right by `k` steps, where `k` is a non-negative integer. Example: ``` rotateArray([1, 2, 3, 4, 5, 6, 7], 3) -> [5, 6, 7, 1, 2, 3, 4] rotateArray([-1, -100, 3, 99], 2) -> [3, 99, -1, -100] ```","solution":"def rotateArray(nums, k): Rotates the elements of the array to the right by k steps. Parameters: nums (List[int]): The original array of integers k (int): The number of steps to rotate the array Returns: List[int]: The array after rotating k steps n = len(nums) k = k % n # In case k is larger than the array size return nums[-k:] + nums[:-k]"},{"question":"In a certain programming competition, you are required to analyze a tree structure. Each node of the tree has a weight associated with it. The weight of a subtree is defined as the sum of the weights of the nodes in that subtree. Your task is to find the maximum weight of any subtree for all possible subtrees in the tree. The tree is rooted and has n nodes, numbered from 1 to n. The root node is node 1. -----Input----- The first line contains an integer n (1 ≤ n ≤ 200,000), the number of nodes in the tree. The second line contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 1,000), where w_i denotes the weight of the i-th node. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) indicating that there is an edge between nodes u and v. -----Output----- Output a single integer — the maximum weight of any subtree in the tree. -----Examples----- Input 5 1 2 3 4 5 1 2 1 3 2 4 2 5 Output 15 Input 3 100 200 300 1 2 1 3 Output 600 Input 4 4 1 3 2 1 2 2 3 2 4 Output 10 -----Note----- In the first example, the maximum weight of any subtree is 15, which includes all nodes in the tree. In the second example, the maximum weight is obtained by considering the subtree rooted at node 1, including all nodes, resulting in a sum of 600. In the third example, the subtree with maximum weight is the entire tree, yielding a sum of 10.","solution":"def max_subtree_weight(n, weights, edges): from collections import defaultdict # Build the adjacency list and initialize weight list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) max_weight = 0 subtree_weights = [0] * (n + 1) # to store subtree weights visited = [False] * (n + 1) def dfs(node): nonlocal max_weight visited[node] = True subtree_weight = weights[node - 1] # node numbers are 1-based in input, weights is 0-based for neighbor in tree[node]: if not visited[neighbor]: subtree_weight += dfs(neighbor) subtree_weights[node] = subtree_weight max_weight = max(max_weight, subtree_weight) return subtree_weight dfs(1) return max_weight"},{"question":"Given a matrix `M` of dimensions NxM where N is the number of rows and M is the number of columns. Each cell in the matrix can contain a value representing the height of a terrain at that point. Write a function to find the highest peak in the terrain and return its coordinates (row, column). If there are multiple highest peaks with the same height, return the coordinates of the first one encountered while scanning the matrix from top-left to bottom-right. Example 1: Input: N = 3, M = 3 M = [[1, 2, 3], [6, 5, 4], [7, 8, 9]] Output: (2, 2) Explanation: The highest peak is at location (2, 2) with a height of 9. Example 2: Input: N = 2, M = 2 M = [[1, 4], [3, 2]] Output: (0, 1) Explanation: The highest peak is at location (0, 1) with a height of 4. Your Task: You do not need to read input or print anything. Your task is to complete the function `findHighestPeak()` which takes integers N and M, and the matrix M as input parameters and returns a tuple containing the coordinates of the highest peak as described. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N, M ≤ 100 1 ≤ M[i][j] ≤ 10^4","solution":"def findHighestPeak(N, M, matrix): Returns the coordinates (row, column) of the highest peak in the terrain matrix. If there are multiple highest peaks, it returns the coordinates of the first one encountered. max_height = -1 max_position = (0, 0) for i in range(N): for j in range(M): if matrix[i][j] > max_height: max_height = matrix[i][j] max_position = (i, j) return max_position"},{"question":"Julie is planning a themed party and wants to create unique gift packages for her guests. Each package consists of several items, chosen from a fixed list of available items. Every item has a certain value associated with it, representing how much it\'s worth. Julie wants to distribute these packages equitably by ensuring that the difference in the total value of any two packages is minimized. To help Julie with this task, you need to determine this minimum possible difference in total value between two packages that can be formed from the list of items provided. Given an array of integers representing the values of the items, you need to determine the minimum possible difference between the sums of two subsets that the list can be partitioned into. Write a function: **Function Name** ```python def minimumDifference(values: List[int]) -> int: ``` **Input** - values: A list of positive integers representing the values of the items. **Output** - An integer representing the minimum possible difference between the sums of any two subsets formed from the list. **Example** ```python # Example 1 values = [1, 2, 3, 9] print(minimumDifference(values)) # Output: 3 # Example 2 values = [1, 2, 7, 1, 5] print(minimumDifference(values)) # Output: 0 # Example 3 values = [3, 1, 4, 2, 2, 1] print(minimumDifference(values)) # Output: 1 ``` **Explanation**: - In the first example, the two subsets can be {1, 2, 3} and {9}, making the sums 6 and 9, respectively. The difference is 9 - 6 = 3. - In the second example, the two subsets can be {1, 1, 5} and {2, 7}, making the sums both equal to 7, resulting in a difference of 0. - In the third example, the two subsets can be {3, 1, 1} and {4, 2, 2}, with sums 5 and 8, respectively. The minimal possible difference is 1. **Note**: The problem can be thought of as a variant of the \\"Partition problem\\", which is a special case of the subset sum problem and can be solved efficiently using dynamic programming to achieve the required result within acceptable time limits.","solution":"from typing import List def minimumDifference(values: List[int]) -> int: total_sum = sum(values) target = total_sum // 2 n = len(values) # dp[j] will be True if there\'s a subset with sum j dp = [False] * (target + 1) dp[0] = True for value in values: for j in range(target, value - 1, -1): dp[j] = dp[j] or dp[j - value] # Find the largest j such that dp[j] is True for j in range(target, -1, -1): if dp[j]: best_partition_sum = j break return total_sum - 2 * best_partition_sum"},{"question":"Isha loves playing with strings. One day, she decided to form new strings by removing vowels from her string. But the task seemed huge as she had too many strings to process. Can you help Isha by writing a program that removes all vowels from the given strings? For this problem, consider vowels to be \'a\', \'e\', \'i\', \'o\', and \'u\' (both lowercase and uppercase). INPUT: - First line contains number of test cases T. Each test case contains a single string S which Isha wants to process. OUTPUT: - For each test case, in a new line, print the string after removing all vowels. Constraints: 1 ≤ T ≤ 10^5 1 ≤ |S| ≤ 10^6 NOTE: Since the value of test cases and length of strings can be really large, please use fast I/O optimization techniques. SAMPLE INPUT: 2 Hello Programming SAMPLE OUTPUT: Hll Prgrmmng","solution":"def remove_vowels(s): Removes all vowels from the string s. vowels = set(\'aeiouAEIOU\') return \'\'.join(char for char in s if char not in vowels) def process_input(test_cases): results = [] for s in test_cases: results.append(remove_vowels(s)) return results"},{"question":"Problem Ella is very particular about how she organizes her bookshelf. Recently, she discovered a new way of considering books on her shelf as a combination of colored sections. Each section of the bookshelf is of a single color and has a certain number of books in it. The colors are represented by integers, and each section of books can vary in size. Ella wants to rearrange the bookshelves using the minimal number of moves. A \\"move\\" consists of merging all books of one section into another contiguous section of the same color, effectively reducing the number of colored sections by 1. Help Ella determine the minimum number of moves required to rearrange the bookshelf such that all books of the same color are in contiguous sections. Constraints * 1 ≤ n ≤ 1000 * 1 ≤ Ai ≤ 1000 Input The first line contains an integer n, the number of sections on the bookshelf. The second line contains n integers Ai, representing the color code of each section on the bookshelf. Output Output a single integer, the minimum number of moves required. Examples Input 5 1 2 1 2 1 Output 3 Input 6 1 1 2 3 2 1 Output 2 Explanation In the first example, one of the optimal solutions would be: 1. Merge section 1 with section 3 -> 1 1 2 2 1 2. Merge section 4 with 5 -> 1 1 2 2 3. Merge the remaining sections of 2 -> 1 2 2 In the second example, one optimal solution would be: 1. Merge section 5 and section 6 -> 1 1 2 3 1 2. Merge first two sections -> 1 2 3 1","solution":"def min_moves_to_rearrange_books(n, sections): if n <= 1: return 0 moves = 0 for i in range(1, n): if sections[i] != sections[i-1]: moves += 1 return moves"},{"question":"You\'re given a collection of strings of lowercase alphabets. Your task is to identify the longest contiguous common substring among all the provided strings. If there are multiple longest common substrings with the same length, return the lexicographically smallest one. Input Format The first line contains an integer N denoting the number of strings. The next N lines contain one string each. Constraints 1 leq N leq 100 1 leq |S_i| leq 10^3 for 1 leq i leq N All strings consist of lowercase alphabets only. Output Format Print the longest contiguous common substring. In case of multiple substrings of the same length, print the lexicographically smallest one. Sample Input 3 flower flowing flight Sample Output fl Explanation The common substrings among the provided strings are \\"f\\" and \\"fl\\". \\"fl\\" is the longest common substring among \\"flower\\", \\"flowing\\", and \\"flight\\". However, if we had strings such as \\"flower\\", \\"flying\\", and \\"flow\\", the common substrings would again include \\"f\\" and \\"fl\\", but \\"fl\\" would be the longest one, and hence the lexicographically smallest again among those of the equal length strings.","solution":"def longest_common_substring(strings): def all_substrings(s): # Generate all substrings of a given string `s`. substrings = set() length = len(s) for i in range(length): for j in range(i+1, length+1): substrings.add(s[i:j]) return substrings # Start with substrings of the first string common_substrings = all_substrings(strings[0]) # Find the intersection with substrings of all other strings for string in strings[1:]: current_substrings = all_substrings(string) common_substrings.intersection_update(current_substrings) # Find the longest and lexicographically smallest common substring longest_common = \\"\\" for substring in common_substrings: if (len(substring) > len(longest_common)) or ( len(substring) == len(longest_common) and substring < longest_common): longest_common = substring return longest_common"},{"question":"---Problem Statement--- Sara has a collection of integers and she loves to rearrange them in different ways. She is particularly interested in checking whether a subset of these integers, when summed together, can be equal to a given value. To help her with this, you need to design a function to determine if it\'s possible to find such a subset. ---Input:--- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and S. N denotes the number of integers in the collection, and S denotes the target sum value. The second line contains N integers separated by spaces representing the collection. ---Output:--- For each test case, print \\"Possible\\" if there exists a subset of the collection whose sum is equal to the target value S, otherwise print \\"Impossible\\". ---Constraints--- - 1 ≤ T ≤ 500 - 1 ≤ N ≤ 100 - -1000 ≤ each integer in the collection ≤ 1000 - -1000 ≤ S ≤ 1000 ---Sample Input:--- 3 5 9 1 2 3 4 5 4 0 3 -1 -2 1 3 -5 -2 -3 7 ---Sample Output:--- Possible Possible Impossible ---Explanation:--- Example case 1: One of the possible subsets is {4, 5} which sums to 9. Example case 2: One of the possible subsets is {3, -2, -1} which sums to 0. Example case 3: There is no subset that sums to -5.","solution":"def is_subset_sum(arr, n, sum_val): if sum_val == 0: return True if n == 0: return False if arr[n-1] > sum_val: return is_subset_sum(arr, n-1, sum_val) include = is_subset_sum(arr, n-1, sum_val - arr[n-1]) exclude = is_subset_sum(arr, n-1, sum_val) return include or exclude def find_subsets(T, test_cases): results = [] for i in range(T): N, S = test_cases[i][0] arr = test_cases[i][1] if is_subset_sum(arr, N, S): results.append(\\"Possible\\") else: results.append(\\"Impossible\\") return results # For your example input T = 3 test_cases = [ ((5, 9), [1, 2, 3, 4, 5]), ((4, 0), [3, -1, -2, 1]), ((3, -5), [-2, -3, 7]) ] result = find_subsets(T, test_cases) for res in result: print(res)"},{"question":"A gardener has a rectangular garden that is divided into a grid of cells, each cell containing a certain number of flowers. The gardener wants to pick flowers from a subgrid (a rectangular section of the garden) that contains the maximum sum of flowers. Your task is to help the gardener find this maximum sum of flowers in any subgrid within the garden. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the garden grid, respectively. The next n lines each contain m integers, where the j-th number in the i-th line is the number of flowers in the cell (i, j). These integers are non-negative and will not exceed 1000. -----Output----- Output a single integer — the maximum sum of flowers that can be collected from any subgrid within the garden. -----Examples----- Input 3 3 1 2 3 4 5 6 7 8 9 Output 45 Input 2 3 1 0 1 1 1 1 Output 5 -----Explanation----- In the first example, the gardener would pick flowers from the whole grid to get the maximum sum of 45. In the second example, the subgrid that yields the maximum sum is: 1 0 1 1 1 1 which sums to 5.","solution":"def max_sum_subgrid(grid): Returns the maximum sum of flowers that can be collected from any subgrid within the garden. n = len(grid) m = len(grid[0]) max_sum = float(\'-inf\') # Compute the prefix sum for each row prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] # Try every possible subgrid and calculate its sum using the prefix sums for i1 in range(1, n + 1): for i2 in range(i1, n + 1): for j1 in range(1, m + 1): for j2 in range(j1, m + 1): current_sum = (prefix_sum[i2][j2] - prefix_sum[i2][j1-1] - prefix_sum[i1-1][j2] + prefix_sum[i1-1][j1-1]) max_sum = max(max_sum, current_sum) return max_sum # Helper function to convert input into grid format def convert_input_to_grid(input_array): n, m = input_array[0], input_array[1] return [input_array[i:i + m] for i in range(2, len(input_array), m)]"},{"question":"Given a matrix of characters, write a function to find all words in the matrix that are present in a given dictionary. A word can be formed by a sequence of adjacent characters. The adjacent characters can be in one of the 8 possible directions (up, down, left, right, or any of the 4 diagonals). The same letter cell in the matrix may not be used more than once within the same word. Constraints: * The matrix dimensions are not larger than 20x20. * Each word in the dictionary and matrix will consist of uppercase English letters (A-Z). * The dictionary will contain at most 1000 words. Input Input is given from Standard Input in the following format: Line 1: Two integers M and N denoting the number of rows and columns of the matrix. Next M lines: Each line contains N uppercase English letters forming the matrix. Next line: An integer K denoting the number of words in the dictionary. Next K lines: Each line contains a word from the dictionary. Output Print all words found in the matrix, each on a new line. If no words are found, print \\"No words found\\". Examples Input 4 4 A B C D E F G H I J K L M N O P 5 ABEF GK CDE MNO NJKL Output ABEF GK MNO NJKL Input 3 4 A B C D E F G H I J K L 3 HELLO WORLD DOG Output No words found","solution":"def find_words_in_matrix(M, N, matrix, K, dictionary): def is_valid(x, y, visited): return 0 <= x < M and 0 <= y < N and not visited[x][y] def dfs(x, y, word, index, visited): if index == len(word): return True if not is_valid(x, y, visited) or matrix[x][y] != word[index]: return False visited[x][y] = True for dx, dy in directions: if dfs(x + dx, y + dy, word, index + 1, visited): return True visited[x][y] = False return False directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, 1), (-1, 1), (1, -1)] found_words = [] for word in dictionary: found = False visited = [[False for _ in range(N)] for _ in range(M)] for i in range(M): for j in range(N): if dfs(i, j, word, 0, visited): found_words.append(word) found = True break if found: break return found_words if found_words else [\\"No words found\\"] # Input reading and function call if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() M, N = int(data[0]), int(data[1]) matrix = [] idx = 2 for _ in range(M): matrix.append(data[idx: idx + N]) idx += N K = int(data[idx]) dictionary = data[idx + 1: idx + 1 + K] found_words = find_words_in_matrix(M, N, matrix, K, dictionary) for word in found_words: print(word)"},{"question":"You are given an array of n integers and q queries. Each query is either of updating an index of the array or finding the minimum value in the array within a given range. # Input - The first line contains two integers n and q (1 le n, q le 2 cdot 10^5) — the number of elements in the array and the number of queries, respectively. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the elements of the array. - Each of the next q lines describes a query, which is one of the two types: - 1 x y: Set the value at index x to y. (1-indexed) - 2 l r: Return the minimum value of the subarray in the range [l, r] (inclusive). (1-indexed) # Output - For each query of the second type, output the minimum value in the subarray for the given range. # Example Input ``` 5 5 5 4 3 2 1 2 1 5 1 3 9 2 1 5 2 3 4 1 5 0 ``` Output ``` 1 1 9 ``` # Note In the example: - Initially, the array is `[5, 4, 3, 2, 1]`. - For the first query, the minimum value of the entire array is `1`. - After updating the 3rd element to `9`, the array becomes `[5, 4, 9, 2, 1]`. - For the second query, the minimum value of the range `[1, 5]` is still `1`. - For the third query, the minimum value of the range `[3, 4]` is `2`. - After updating the 5th element to `0`, the array becomes `[5, 4, 9, 2, 0]`.","solution":"class SegmentTree: def __init__(self, arr): self.n = len(arr) self.tree = [0] * (2 * self.n) for i in range(self.n): self.tree[self.n + i] = arr[i] for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, pos, value): pos += self.n - 1 self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = min(self.tree[2 * pos], self.tree[2 * pos + 1]) def range_min(self, l, r): l += self.n - 1 r += self.n min_val = float(\'inf\') while l < r: if l % 2: min_val = min(min_val, self.tree[l]) l += 1 if r % 2: r -= 1 min_val = min(min_val, self.tree[r]) l //= 2 r //= 2 return min_val def process_queries(n, q, arr, queries): st = SegmentTree(arr) results = [] for query in queries: if query[0] == 1: # update query _, x, y = query st.update(x, y) elif query[0] == 2: # range min query _, l, r = query results.append(st.range_min(l, r)) return results"},{"question":"You are given an array of N integers. Your task is to split this array into two non-empty parts such that the absolute difference between the sum of elements in these two parts is minimized. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, the size of the array. - The second line contains N space-separated integers denoting the elements of the array. -----Output----- For each test case, print a single line containing one integer — the minimum possible absolute difference between the sums of the two parts. -----Constraints----- - 1 le T le 50 - 2 le N le 100 - 1 le array elements le 10^3 -----Example Input----- 2 5 1 2 3 4 5 4 8 15 7 3 -----Example Output----- 1 3 -----Explanation----- Example case 1: One optimal way to split the array is [1, 2, 3] and [4, 5], with sums 6 and 9, respectively. The absolute difference is |6 - 9| = 3. Another way is [1, 4, 5] and [2, 3], with sums 10 and 5, respectively. The absolute difference is |10 - 5| = 5. The smallest difference possible is 1 with the split [1, 2, 4] and [3, 5] having sums 7 and 8. Example case 2: Splitting the array into either [8, 7] and [15, 3] or [8, 3] and [15, 7] achieves the minimum possible absolute difference of 3.","solution":"def find_minimum_difference(N, arr): Splits the given array into two non-empty parts such that the absolute difference between the sum of elements in these two parts is minimized. total_sum = sum(arr) half_sum = total_sum // 2 dp = [False] * (half_sum + 1) dp[0] = True for num in arr: for s in range(half_sum, num - 1, -1): if dp[s - num]: dp[s] = True for s in range(half_sum, -1, -1): if dp[s]: return abs(total_sum - 2 * s) def process_test_cases(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] results.append(find_minimum_difference(N, arr)) return results # Sample Test Case Input T = 2 test_cases = [ (5, [1, 2, 3, 4, 5]), (4, [8, 15, 7, 3]) ] # Process sample test cases results = process_test_cases(T, test_cases) for result in results: print(result)"},{"question":"Sarah is organizing a reading challenge at her school. Each student participating in the challenge is assigned a unique ID from 1 to N. The challenge involves reading a series of books, and Sarah has prepared a list of M books for the challenge. Each book has a difficulty rating, and Sarah wants to ensure that every student reads at least one book whose difficulty rating is precisely equal to the student\'s ID multiplied by a factor. Specifically, for a given factor F, every student i (1 ≤ i ≤ N) should read at least one book whose difficulty rating is exactly i * F. To help Sarah, write a program that determines the minimum factor F such that every student can find at least one book to read. # Constraints: - 1 ≤ N ≤ 100000 - 1 ≤ M ≤ 100000 - 1 ≤ difficulty rating of each book ≤ 1000000000 # Input: The input is given from Standard Input in the following format: ``` N M d1 d2 d3 ... dM ``` Where: - N is the number of students. - M is the number of books. - d1, d2, ..., dM are the difficulty ratings of the books. # Output: Output the minimum factor F such that every student can read at least one book with a difficulty rating of exactly i * F for some student i. # Example: Input: ``` 4 5 3 6 9 12 18 ``` Output: ``` 3 ``` Explanation: If F = 3, the difficulty ratings for students will be exactly 3, 6, 9, and 12, which are present in the list of book difficulties. This is the minimum factor satisfying the condition. If F is smaller, such as 1 or 2, then not all students will find the required book difficulty ratings.","solution":"def min_factor(N, M, difficulties): Determines the minimum factor F to ensure each student reads a book with difficulty i * F. from math import gcd from functools import reduce def gcd_list(lst): return reduce(gcd, lst) gcd_value = gcd_list(difficulties) return gcd_value # Note: This implementation is assuming the largest common divisor of the difficulties is the solution. # It may be optimized further based on additional constraints or specific problem clarification."},{"question":"Read problems statements in Mandarin chinese, Russian, and Vietnamese as well. Given an integer n, denote its reverse as r(n). If n is a palindrome number (i.e., n = r(n)), then r(n) = n. Now, we define two functions: - f(n): the sum of n and its reverse r(n). - g(n): the absolute difference between n and its reverse r(n). Archi wonders if it’s possible to use f(n) and g(n) to determine if n is a palindrome. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first and only line of each test case contains one integer n. ------ Output ------ For each test case, print a single line containing one integer: 1 if n is a palindrome or 0 if n is not palindrome based on the values of f(n) and g(n). ------ Constraints ------ 1 ≤ T ≤ 1,000 1 ≤ n ≤ 10^{9} ----- Sample Input 1 ------ 3 121 123 12321 ----- Sample Output 1 ------ 1 0 1 ----- Explanation 1 ------ In the first and third cases, n is the same as r(n), thus f(n) = n + n = 2n and g(n) = 0. Both f(n) and g(n) confirm that n is a palindrome. In the second case, n = 123 and r(n) = 321. Neither f(n) nor g(n) determine that n is a palindrome.","solution":"def is_palindrome(n): Determines if the given number n is a palindrome. Args: n: An integer Returns: 1 if n is a palindrome, 0 otherwise str_n = str(n) return 1 if str_n == str_n[::-1] else 0"},{"question":"Alice wants to paint a grid of size n times n such that each cell is either black or white. She wants to achieve the following pattern: 1. A region of size (n-2) times (n-2) in the center should be completely white. 2. The border surrounding this central region, consisting of all the cells that are within distance 1 from the grid boundary, should be black. Write a function `createPattern` that takes an integer n and returns a 2D array representing the grid, where `0` represents a white cell and `1` represents a black cell. Function Signature: ```python def createPattern(n: int) -> List[List[int]]: ``` # Input: - An integer n (3 leq n leq 100). # Output: - A 2D array of size n times n, where each entry is either `0` (white) or `1` (black). # Example: Example Input 1: `n = 4` Example Output 1: ``` [ [1, 1, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1] ] ``` Example Input 2: `n = 5` Example Output 2: ``` [ [1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 0, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1] ] ``` # Explanation: - For a grid of size 4 times 4, the central grid of size 2 times 2 is white, and the surrounding border of cells is black. - For a grid of size 5 times 5, the central grid of size 3 times 3 is white, and the surrounding border of cells is black. Implement the function as described and ensure it adheres to the constraints and example provided.","solution":"from typing import List def createPattern(n: int) -> List[List[int]]: grid = [[1 if i == 0 or i == n-1 or j == 0 or j == n-1 else 0 for j in range(n)] for i in range(n)] return grid"},{"question":"A store needs to keep track of its inventory and product prices. Design a system that calculates the total cost of a customer\'s cart. Write a function `calculate_total` that takes two arguments: - `cart` - A list of strings representing the products the customer wants to buy. - `prices` - A dictionary where the keys are product names (strings) and the values are corresponding prices (floats). The function should return the total cost (float) of the products in the customer\'s cart. If a product listed in the cart is not found in the prices dictionary, it should be ignored and contribute `0` to the total cost. Examples: ```python calculate_total([\\"apple\\", \\"banana\\", \\"milk\\"], {\\"apple\\": 1.0, \\"banana\\": 0.5, \\"milk\\": 1.5}) # => 3.0 calculate_total([\\"apple\\", \\"chocolate\\"], {\\"apple\\": 1.0, \\"banana\\": 0.5, \\"milk\\": 1.5}) # => 1.0 calculate_total([\\"bread\\", \\"butter\\"], {\\"bread\\": 2.0, \\"butter\\": 3.0, \\"milk\\": 1.5}) # => 5.0 calculate_total([\\"orange\\"], {\\"apple\\": 1.0, \\"banana\\": 0.5, \\"milk\\": 1.5}) # => 0.0 ```","solution":"def calculate_total(cart, prices): Calculates the total cost of a customer\'s cart based on provided prices. Args: cart (list of str): List of product names that the customer wants to buy. prices (dict): Dictionary with product names as keys and their corresponding prices as values. Returns: float: The total cost of products in the cart. total_cost = 0.0 for product in cart: if product in prices: total_cost += prices[product] return total_cost"},{"question":"# Problem Description Prime numbers are fascinating because they cannot be created by multiplying two smaller numbers (other than 1 and the number itself). We often need to find all prime numbers up to a certain limit. For this problem, you will write a program to find all prime numbers up to a given integer and list them in ascending order. However, there\'s a twist: You should be able to start from any integer and find the next prime number greater than or equal to that integer. This means, given a number `n`, your task is to return the smallest prime number greater than or equal to `n`. # Input Format Input consists of a single line containing a positive integer `n (2 <= n <= 100000)`. # Output Format Display the smallest prime number greater than or equal to `n`. # Examples Sample Input 1: ``` 10 ``` Sample Output 1: ``` 11 ``` Sample Input 2: ``` 29 ``` Sample Output 2: ``` 29 ``` Sample Input 3: ``` 30 ``` Sample Output 3: ``` 31 ```","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def next_prime(n): Returns the smallest prime number greater than or equal to n. if n <= 1: return 2 prime = n while not is_prime(prime): prime += 1 return prime"},{"question":"You are given a grid of size N x M consisting of only \'0\'s and \'1\'s. Find the size of the largest square sub-grid consisting entirely of \'1\'s. Input First line of the input contains a single integer T denoting number of test cases. For each test case, the first line contains two integers N and M denoting the dimensions of the grid. Each of the next N lines contains M space-separated integers (\'0\' or \'1\') denoting the elements of the grid. Output Print T lines, each line containing the size of the largest square sub-grid consisting entirely of \'1\'s. Constraints 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 0 ≤ grid[i][j] ≤ 1 Example Input: 1 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 Output: 3 Explanation Example case 1: The largest square sub-grid consisting entirely of \'1\'s has a size of 3x3. Therefore, the output is 3.","solution":"def largest_square_subgrid(T, test_cases): def max_square_size(grid, N, M): dp = [[0]*M for _ in range(N)] max_size = 0 for i in range(N): for j in range(M): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) return max_size results = [] for case in test_cases: N, M, grid = case results.append(max_square_size(grid, N, M)) return results"},{"question":"Implement a function that takes a string representing a Roman numeral and converts it to an integer. The function should handle Roman numerals up to 3999. If the input is not a valid Roman numeral, the function should return -1.","solution":"def roman_to_integer(roman): Convert a Roman numeral to an integer. Returns -1 if the input is not a valid Roman numeral. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } valid_roman_characters = set(roman_values.keys()) invalid_conditions = [ lambda r: any(char not in valid_roman_characters for char in r), lambda r: r.count(\'I\') > 3 or r.count(\'X\') > 3 or r.count(\'C\') > 3, lambda r: r.count(\'V\') > 1 or r.count(\'L\') > 1 or r.count(\'D\') > 1, ] if any(condition(roman) for condition in invalid_conditions): return -1 integer_value = 0 prev_value = 0 for char in reversed(roman): value = roman_values[char] if value < prev_value: integer_value -= value else: integer_value += value prev_value = value return integer_value if 0 < integer_value <= 3999 else -1"},{"question":"A company is offering a new online learning platform and wants to provide personalized course recommendations based on students\' existing knowledge and skill levels. You are tasked to write a program that suggests courses for a student based on the topics they have already mastered. The platform has a hierarchical structure of topics where some topics are prerequisites for others. A student can only be recommended a course if they have mastered all its prerequisite topics. Given a list of courses with their respective prerequisites and a list of topics a student has mastered, output a list of courses that the student is eligible to take. Input Format - The first input line contains an integer `n`, the number of courses. - The next `n` lines each contain a course name, followed by a space-separated list of its prerequisite topics. - The next line contains an integer `m`, the number of topics the student has mastered. - The last line contains `m` space-separated mastered topics. Constraints - 1 ≤ n ≤ 100 - 0 ≤ m ≤ 100 - Topics are case-sensitive strings without spaces - No cyclic dependencies in prerequisites Output Format - Output each eligible course on a new line in any order. SAMPLE INPUT 4 Course1 TopicA TopicB Course2 TopicC Course3 TopicA Course4 TopicB TopicC 3 TopicA TopicC TopicB SAMPLE OUTPUT Course1 Course2 Course4","solution":"def recommend_courses(courses, mastered_topics): Given a list of courses with their respective prerequisites and a list of topics a student has mastered, returns a list of courses that the student is eligible to take. Parameters: courses (list): A list of tuples where each tuple contains a course name and a list of its prerequisite topics. mastered_topics (set): A set of topics the student has mastered. Returns: list: A list of course names that the student is eligible to take. eligible_courses = [] for course, prerequisites in courses: if all(prereq in mastered_topics for prereq in prerequisites): eligible_courses.append(course) return eligible_courses if __name__ == \\"__main__\\": n = int(input().strip()) courses = [] for _ in range(n): course_info = input().strip().split() course_name = course_info[0] prerequisites = course_info[1:] courses.append((course_name, prerequisites)) m = int(input().strip()) mastered_topics = set(input().strip().split()) eligible_courses = recommend_courses(courses, mastered_topics) for course in eligible_courses: print(course)"},{"question":"Merge Overlapping Intervals Merging overlapping intervals is a common problem in computer science, particularly in scheduling and computational geometry. Given a list of intervals where each interval is represented as a tuple (start, end), your task is to merge all overlapping intervals and return a list of the merged intervals. Two intervals overlap if the start of one interval is less than or equal to the end of the other interval and vice versa. Input: - `intervals` – a list of tuples, each representing an interval, e.g., `[(1, 3), (2, 6), (8, 10), (15, 18)]` Output: - a list of merged intervals, sorted by the start of the interval. Example: - `merge_intervals([(1, 3), (2, 6), (8, 10), (15, 18)])` should return `[(1, 6), (8, 10), (15, 18)]` Notes: - You can assume that the input intervals are valid, i.e., for any interval (start, end), `start <= end`. - The intervals can be provided in any order. - Each interval is represented as a tuple of two non-negative integers.","solution":"def merge_intervals(intervals): Merges overlapping intervals and returns a list of the merged intervals, sorted by the start of the interval. if not intervals: return [] # First, we sort the intervals by their starting point intervals.sort(key=lambda x: x[0]) merged_intervals = [intervals[0]] for current in intervals[1:]: last_merged = merged_intervals[-1] # If the current interval overlaps with the last merged interval, merge them if current[0] <= last_merged[1]: merged_intervals[-1] = (last_merged[0], max(last_merged[1], current[1])) else: merged_intervals.append(current) return merged_intervals"},{"question":"You are given a grid-based game that consists of an n x m grid, where some cells contain obstacles denoted by \'#\', and some cells are empty denoted by \'.\'. There\'s also a player \'P\' who starts at a specific cell in the grid and a treasure \'T\' located at another cell in the grid. The player can move in four possible directions: up, down, left, and right. The task is to find the minimum number of moves required for the player to reach the treasure, avoiding obstacles. If the treasure is unreachable, return -1. Write a function `find_min_moves(grid: List[str], start: Tuple[int, int], treasure: Tuple[int, int]) -> int` that takes the following parameters: - `grid`: a list of strings representing the grid where each string is a row of the grid. - `start`: a tuple (x, y) representing the starting position of the player. - `treasure`: a tuple (x, y) representing the position of the treasure. Return the minimum number of moves required for the player to reach the treasure or -1 if the treasure cannot be reached. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the grid. - The next n lines each contain a string of length m consisting of characters \'#\', \'.\', \'P\', or \'T\'. - `start` (x, y): A tuple (0 ≤ x < n, 0 ≤ y < m) representing the starting position of the player \'P\'. - `treasure` (x, y): A tuple (0 ≤ x < n, 0 ≤ y < m) representing the position of the treasure \'T\'. # Output Return an integer representing the minimum number of moves required for the player to reach the treasure, or -1 if the treasure is not reachable. # Example ```plaintext Input: 5 6 ...... ..#. ....#. .#.... ..P.T. (4, 2) (4, 4) Output: 2 Input: 4 4 #P.# #..# T# (1, 1) (3, 3) Output: -1 ``` # Note - The player can only move to adjacent cells that are not obstacles. - You should apply a Breadth-First Search (BFS) algorithm to find the shortest path to the treasure, considering the constraints of the grid.","solution":"from collections import deque from typing import List, Tuple def find_min_moves(grid: List[str], start: Tuple[int, int], treasure: Tuple[int, int]) -> int: n = len(grid) m = len(grid[0]) x_start, y_start = start x_treasure, y_treasure = treasure if grid[x_start][y_start] == \'#\' or grid[x_treasure][y_treasure] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(x_start, y_start, 0)]) visited = set((x_start, y_start)) while queue: x, y, dist = queue.popleft() if (x, y) == treasure: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] != \'#\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"A farm consists of a grid of `N` x `M` cells. Each cell is either occupied by a farmer or is empty. Farmers need to receive water to their crops. A cell with a farmer can receive water from any one of its 8 neighboring cells (horizontal, vertical, or diagonal) if it is occupied by another farmer. The objective is to determine the minimum number of additional farmers needed to place in the empty cells such that every farmer in the grid can receive water from another farmer. -----Input----- The first line of the input contains two integers `N` and `M` (1 ≤ N, M ≤ 100), the dimensions of the grid. The following `N` lines contain `M` characters each, representing the grid. A \'.\' indicates an empty cell, and an \'F\' indicates a farmer. -----Output----- Output a single integer, the minimum number of additional farmers needed. -----Constraints----- 1 ≤ N, M ≤ 100 -----Example----- Input: 3 3 F.F ... .F. Output: 2 -----Notes----- For the example grid: F . F . . . . F . The optimal placement would be: F F F . F . . F F Thus, two additional farmers are placed in the empty cells to ensure that every existing farmer can receive water.","solution":"def min_additional_farmers(N, M, grid): def is_farmer(i, j): # Check if the coordinates are within the grid and the cell is occupied by a farmer return 0 <= i < N and 0 <= j < M and grid[i][j] == \'F\' def can_receive_water(i, j): # Check all 8 possible directions to find another farmer directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for di, dj in directions: if is_farmer(i + di, j + dj): return True return False # We need to determine the cells that must have farmers added problem_cells = [] for i in range(N): for j in range(M): if grid[i][j] == \'F\' and not can_receive_water(i, j): problem_cells.append((i, j)) if not problem_cells: return 0 additions = 0 for cell in problem_cells: i, j = cell if not can_receive_water(i, j): found_place = False for di in range(-1, 2): for dj in range(-1, 2): if di == 0 and dj == 0: continue ni, nj = i + di, j + dj if 0 <= ni < N and 0 <= nj < M and grid[ni][nj] == \'.\': grid[ni] = grid[ni][:nj] + \'F\' + grid[ni][nj+1:] found_place = True additions += 1 break if found_place: break return additions"},{"question":"Given an array of integers which is initially increasing and then decreasing, find the maximum element in the array. Use an efficient approach to solve the problem. Example 1: Input: N = 9 Arr[] = {1, 3, 8, 12, 4, 2} Output: 12 Explanation: The maximum element in the given array is 12. Example 2: Input: N = 5 Arr[] = {10, 20, 30, 40, 50} Output: 50 Explanation: The maximum element in the given array is 50. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findMaximum() which takes the array of integers arr[] and its size n as input parameters and returns the maximum element in the array. Expected Time Complexity: O(logN) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 1 <= Arr[i] <= 10^6","solution":"def findMaximum(arr, n): Finds the maximum element in an array which is first increasing, then decreasing. Parameters: arr (list): List of integers. n (int): Length of the list. Returns: int: The maximum element in the array. low, high = 0, n - 1 while low <= high: mid = (low + high) // 2 if (mid == 0 or arr[mid] > arr[mid - 1]) and (mid == n - 1 or arr[mid] > arr[mid + 1]): return arr[mid] elif mid > 0 and arr[mid - 1] > arr[mid]: high = mid - 1 else: low = mid + 1 return -1 # This case should never be reached if the input is valid"},{"question":"In a mystical land, there exists an enchanted forest with unique plants. Each plant has a unique growth potential, represented as a series of numbers. The land\'s guardian, Elara, has a task for a brave coder: to determine which plants can provide a sequence of growths hitherto unseen by any in the land. The enchanted plants obey a special rule: If the sum of a contiguous subarray of their growth potentials is even, then the plant is considered magical. To determine if a plant is magical, you must check each possible contiguous subarray of its growth potentials and report whether there exists at least one subarray whose sum is even. Input Format The first line of input contains an integer N, the number of plants. The next N lines each contain an integer L, the number of growth potentials for that plant, followed by L integers separated by spaces, representing the growth potentials. Output Format For each plant, output \\"MAGICAL\\" if there exists at least one contiguous subarray whose sum is even. Otherwise, output \\"NOT MAGICAL\\". Constraints 1 ≤ N ≤ 50 1 ≤ L ≤ 1000 -10^6 ≤ Growth potential ≤ 10^6 SAMPLE INPUT 3 3 1 2 3 4 1 3 5 7 2 6 -2 SAMPLE OUTPUT MAGICAL NOT MAGICAL MAGICAL Explanation For the first plant, the subarray [2] has an even sum, so it is magical. For the second plant, all possible subarrays have odd sums, hence it is not magical. For the third plant, the subarray [6] has an even sum, so it is magical. SAMPLE EXPLANATION Given input: 3 3 1 2 3 4 1 3 5 7 2 6 -2 Output Explanation: For the first plant, the subarray [2] has an even sum, so it is magical. For the second plant, all possible subarrays have odd sums, hence it is not magical. For the third plant, the subarray [6] has an even sum, so it is magical.","solution":"def is_magical_plant(growth_potentials): Determines if a plant is magical by checking if there exists at least one contiguous subarray whose sum is even. for potential in growth_potentials: if potential % 2 == 0: return \\"MAGICAL\\" return \\"NOT MAGICAL\\" def enchanted_forest(n, plants): Processes a list of plants to determine if each is magical. n: int, number of plants plants: list of lists, each containing the growth potentials of a plant results = [] for plant in plants: results.append(is_magical_plant(plant)) return results"},{"question":"Daria has recently entered the world of competitive programming and encountered a challenge where she needs to manipulate lists of integers. She needs to find the second maximum value in a list of distinct integers. Can you help Daria by writing a function that takes a list of integers and returns the second maximum value? ------ Input Format ------ The first line contains an integer n, the size of the list. The second line contains n distinct integers separated by spaces. ------ Output Format ------ Output a single integer, the second maximum value in the list. ------ Constraints ------ 2 ≤ n ≤ 100 The integers are distinct and in the range 1 ≤ ai ≤ 10^4 for all 1 ≤ i ≤ n. ----- Sample Input 1 ------ 5 1 2 3 4 5 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ The maximum value in the list [1, 2, 3, 4, 5] is 5, and the second maximum value is 4. ----- Sample Input 2 ------ 3 10 20 30 ----- Sample Output 2 ------ 20 ----- Explanation 2 ------ The maximum value in the list [10, 20, 30] is 30, and the second maximum value is 20.","solution":"def find_second_max(nums): Returns the second maximum value in a list of distinct integers. :param nums: List of distinct integers. :return: Second maximum value in the list. if len(nums) < 2: raise ValueError(\\"List must contain at least two elements.\\") first_max = second_max = float(\'-inf\') for num in nums: if num > first_max: second_max = first_max first_max = num elif num > second_max and num != first_max: second_max = num return second_max"},{"question":"You are given a tree with N nodes. Each node has a value, such that the value of the i-th node is A[i]. There are Q queries and each query can be of two types: - Type 1: Change the value of a node to a given number. - Type 2: Find the maximum path sum between any two nodes in the tree. A path sum between any two nodes is defined as the sum of the values of the nodes lying on the path between these two nodes, including both end nodes. -----Input----- - The first line of the input contains two integers N and Q denoting the number of nodes in the tree and the number of queries, respectively. - The next line contains N space-separated integers A[i] where A[i] is the value of the i-th node. - The next N-1 lines contain two integers u and v indicating that there is an edge between the nodes u and v. - The next Q lines describe the queries. Each query is either of the form `1 u v` which means update the value of the u-th node to v, or `2` which means find the maximum path sum between any two nodes in the tree. -----Output----- For each query of type `2`, print a single integer representing the maximum path sum between any two nodes. -----Constraints----- - 1 le N, Q le 10^5 - 1 le A[i] le 10^9 - 1 le u, v le N -----Example Input----- 5 3 1 2 3 4 5 1 2 2 3 3 4 4 5 2 1 3 10 2 -----Example Output----- 15 19 -----Explanation----- Example case: - Initially, the tree is: ``` 1 | 2 | 3 | 4 | 5 ``` The path sums between any two nodes are: - (1, 2): 3 - (1, 3): 6 - (1, 4): 10 - (1, 5): 15 - (2, 3): 5 - (2, 4): 9 - (2, 5): 14 - (3, 4): 7 - (3, 5): 12 - (4, 5): 9 The maximum path sum is 15. - After the update `1 3 10`, the tree becomes: ``` 1 | 2 | 10 | 4 | 5 ``` The new path sums are: - (1, 2): 3 - (1, 3): 13 - (1, 4): 17 - (1, 5): 22 - (2, 3): 12 - (2, 4): 16 - (2, 5): 21 - (3, 4): 14 - (3, 5): 19 - (4, 5): 9 The maximum path sum is 22.","solution":"class Tree: def __init__(self, n, values, edges): self.n = n self.values = values[:] self.adj = [[] for _ in range(n + 1)] for u, v in edges: self.adj[u].append(v) self.adj[v].append(u) self.subtree_sum = [0] * (n + 1) self.subtree_max_sum = [0] * (n + 1) self.dfs(1, -1) def dfs(self, node, parent): self.subtree_sum[node] = self.values[node - 1] max_single_child = 0 second_max_single_child = 0 for neighbor in self.adj[node]: if neighbor == parent: continue self.dfs(neighbor, node) child_sum = self.subtree_sum[neighbor] max_single_child = max(max_single_child, child_sum) self.subtree_sum[node] += max_single_child self.subtree_max_sum[node] = max(self.subtree_sum[node], max_single_child + second_max_single_child + self.values[node - 1]) def update_value(self, u, v): self.values[u - 1] = v self.dfs(1, -1) def find_max_path_sum(self): return max(self.subtree_max_sum) def solve(n, q, values, edges, queries): tree = Tree(n, values, edges) result = [] for query in queries: if query[0] == 1: u, v = query[1], query[2] tree.update_value(u, v) elif query[0] == 2: result.append(tree.find_max_path_sum()) return result"},{"question":"Given a list of integers, your task is to determine if it is possible to split the list into two non-empty parts such that the sum of the integers in both parts is the same. -----Constraints----- - 2 leq N leq 10^5 - -10^9 leq A_i leq 10^9 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print \\"YES\\" if it is possible to split the list into two parts with equal sums, otherwise print \\"NO\\". -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- NO -----Sample Input----- 4 2 2 2 2 -----Sample Output----- YES In the first example, no split exists where the sum of both parts would be equal. In the second example, splitting the list into [2, 2] and [2, 2] results in two parts with equal sums.","solution":"def can_split_with_equal_sum(arr): total_sum = sum(arr) if total_sum % 2 != 0: return \\"NO\\" target_sum = total_sum // 2 current_sum = 0 for num in arr: current_sum += num if current_sum == target_sum: return \\"YES\\" return \\"NO\\""},{"question":"Library Book Borrowing System You are working on a library management system where users can borrow and return books. In the system, each book is identified with a unique identifier, and there are multiple copies of each book. The rules for the borrowing and returning operations are as follows: 1. A user can borrow a book if at least one copy of the book is available. 2. A user returns a book by giving the book\'s identifier. 3. Each borrowing or returning operation is recorded with a timestamp in chronological order. You need to determine the state of each book at any given time — how many copies of each book are currently borrowed and how many are still available. The input consists of an initial state of the library, followed by a series of operations. Input format: - The first line contains an integer `N` denoting the number of different types of books in the library. - The next `N` lines contain two integers each: `id_i` and `c_i` where `id_i` is the unique identifier for the book and `c_i` is the number of available copies for the book initially. - The next line contains an integer `M` denoting the number of operations. - The next `M` lines each contain two integers: `t_j` and `op_j` where `t_j` is the timestamp (not necessarily in any particular order), and `op_j` is the operation: a positive integer if the book with that identifier was borrowed, and a negative integer if the book with that identifier was returned (the absolute value gives the book id). Output format: - For each book, output the final state in the format: `Book id: borrowed X, available Y` where `X` is the number of borrowed copies, and `Y` is the number of available copies. Constraints: - `1 <= N <= 1000` - `1 <= M <= 10000` - `1 <= id_i <= 10^6` - `1 <= c_i <= 100` - `1 <= t_j <= 10^6` - The operations guarantee that no more books are borrowed than are available, and no returns are made for books that were not borrowed. Example input: ``` 3 101 4 102 2 103 1 6 1 101 2 102 3 101 4 -101 5 101 6 -102 ``` Example output: ``` Book 101: borrowed 2, available 2 Book 102: borrowed 1, available 1 Book 103: borrowed 0, available 1 ``` In this example, initially, there are 4 copies of book `101`, 2 copies of book `102`, and 1 copy of book `103`. The operations are: - At timestamp 1, a copy of book `101` is borrowed: `101: borrowed 1, available 3` - At timestamp 2, a copy of book `102` is borrowed: `102: borrowed 1, available 1` - At timestamp 3, another copy of book `101` is borrowed: `101: borrowed 2, available 2` - At timestamp 4, a copy of book `101` is returned: `101: borrowed 1, available 3` - At timestamp 5, another copy of book `101` is borrowed: `101: borrowed 2, available 2` - At timestamp 6, a copy of book `102` is returned: `102: borrowed 0, available 2` The final state reflects the total number of copies borrowed and available for each book after all operations are performed.","solution":"def process_library_operations(N, initial_books, M, operations): library = {book[0]: {\'total\': book[1], \'borrowed\': 0, \'available\': book[1]} for book in initial_books} for op in operations: book_id = abs(op[1]) if op[1] > 0: library[book_id][\'borrowed\'] += 1 library[book_id][\'available\'] -= 1 else: library[book_id][\'borrowed\'] -= 1 library[book_id][\'available\'] += 1 result = [] for book_id in sorted(library.keys()): borrowed = library[book_id][\'borrowed\'] available = library[book_id][\'available\'] result.append(f\\"Book {book_id}: borrowed {borrowed}, available {available}\\") return result"},{"question":"A company has a system where each employee has a unique ID represented as an integer. The hierarchy of employees is stored in a parent-child relationship where each employee has zero or one parent, but possibly many children. The CEO of the company is the only employee with no parent. Given the IDs of the employees and their direct parents, the task is to determine the maximum span of control. The span of control is defined as the total number of employees supervised, directly or indirectly, by a given employee. Input The first line contains an integer N (1 ≤ N ≤ 100000), the number of employees. Each of the next N-1 lines contains a pair of integers, a and b, representing that employee b is a direct child of employee a. Output Output a single integer representing the maximum span of control in the company. Example Input: 6 1 2 1 3 2 4 2 5 3 6 Output: 5 Explanation: Employee 1 supervises employees 2, 3, 4, 5, and 6, yielding a span of control of 5, which is the maximum.","solution":"def maximum_span_of_control(n, relations): from collections import defaultdict, deque # Build the graph tree = defaultdict(list) for parent, child in relations: tree[parent].append(child) # Function for DFS traversal to count the span of control def dfs(node): # Span is initially zero for each node span = 0 stack = [node] visited = set() while stack: current = stack.pop() if current not in visited: visited.add(current) span += 1 # Count this node stack.extend(tree[current]) return span - 1 # Subtract 1 to not count the CEO himself # Start DFS from the root (CEO) max_span = 0 for employee in range(1, n + 1): max_span = max(max_span, dfs(employee)) return max_span # Example usage: # print(maximum_span_of_control(6, [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6)])) # Output: 5"},{"question":"# Problem Statement In a faraway galaxy, there are small planets inhabited by creatures called Flibbles. The Flibbles love fruit, and each planet produces different types of fruit in varying quantities each day. Each type of fruit has a certain value, which can change day by day. Your task is to write a function that helps the Flibbles determine the most valuable planet for each day given the fruit production and its value. Inputs You are given: - A list of planets. Each planet contains: - A list of integers representing the quantity of each type of fruit produced each day. - A list of integers representing the value of each type of fruit for a specific day. Outputs Return the index of the most valuable planet for the given day. The value of a planet is calculated as the sum of (quantity of each fruit type multiplied by the value of that fruit type). If there are multiple planets with the same highest value, return the smallest index. Examples Input: ``` planets = [ [3, 2, 1], [1, 1, 10], [4, 0, 0] ] fruit_values = [2, 3, 8] ``` Output: ``` 1 ``` Explanation: - The total value for planet 0 is 3*2 + 2*3 + 1*8 = 19 - The total value for planet 1 is 1*2 + 1*3 + 10*8 = 85 - The total value for planet 2 is 4*2 + 0*3 + 0*8 = 8 - Planet 1 has the highest total value of 85, so the output is 1. # Function Signature ```python def most_valuable_planet(planets: List[List[int]], fruit_values: List[int]) -> int: # your code here ```","solution":"from typing import List def most_valuable_planet(planets: List[List[int]], fruit_values: List[int]) -> int: max_value = float(\'-inf\') best_planet_index = -1 for i, planet in enumerate(planets): planet_value = sum(quantity * value for quantity, value in zip(planet, fruit_values)) if planet_value > max_value: max_value = planet_value best_planet_index = i return best_planet_index"},{"question":"You are given an array of integers and a target value T. Your task is to determine if there are two distinct elements in the array whose sum equals T. Input: The first line contains an integer N, the number of elements in the array. The second line contains N space-separated integers, which are the elements of the array. The third line contains the integer T. Output: Print \\"YES\\" if there are two distinct elements in the array whose sum equals T, otherwise print \\"NO\\". Constraints: 1 ≤ N ≤ 10^5 -10^9 ≤ array elements ≤ 10^9 -10^9 ≤ T ≤ 10^9 SAMPLE INPUT 5 1 2 3 4 5 9 SAMPLE OUTPUT YES Explanation There are two distinct elements in the array (4 and 5) whose sum equals the target value 9. Therefore, the output is \\"YES\\".","solution":"def has_pair_with_sum(arr, T): Determines if there are two distinct elements in the array whose sum equals T. :param arr: List of integers. :param T: Target sum value. :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for num in arr: if T - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"You are working on a software project that involves processing student records. Each record contains a student\'s name and their scores in three subjects - Mathematics, Physics, and Chemistry. Your task is to write a program that reads these records and processes them to generate a result list. The result list should contain the names of students who have passed in all three subjects. The passing criteria for a subject is a score of 35 or more. Additionally, the result list should be sorted in descending order of the total score (sum of the scores in all three subjects). If two students have the same total score, they should be listed in alphabetical order of their names. -----Input----- - First line will contain T, number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N, the number of student records to be processed. - N lines follow. Each of these lines contains the student\'s name and their scores in Mathematics, Physics, and Chemistry, separated by spaces. -----Output----- For each test case, output the names of the students who have passed in all three subjects. The names should be printed in descending order of the total score. If two students have the same total score, print the names in alphabetical order. -----Constraints----- - 1 le T le 10 - 1 le N le 1000 - 1 le |name| le 50 - 0 le score le 100 for each subject -----Example Input----- 2 3 John 78 67 90 Alice 45 50 49 Bob 34 80 90 4 Rachel 55 89 76 Monica 90 92 85 Phoebe 28 64 72 Chandler 30 29 101 -----Example Output----- John Alice Monica Rachel -----Explanation----- Example case 1: John and Alice pass in all subjects, but Bob fails Mathematics. John has a higher total score than Alice. Example case 2: Monica and Rachel pass in all subjects. Monica has a higher total score than Rachel. Phoebe and Chandler fail.","solution":"def process_student_records(test_cases): results = [] for students in test_cases: passed_students = [] for student in students: name, math, physics, chem = student.split() math, physics, chem = int(math), int(physics), int(chem) if math >= 35 and physics >= 35 and chem >= 35: total_score = math + physics + chem passed_students.append((name, total_score)) # Sorting the list first by total_score in descending order, then by name in alphabetical order passed_students.sort(key=lambda x: (-x[1], x[0])) # Collect the names of the passed students results.append([name for name, _ in passed_students]) return results"},{"question":"Alex has an array of N integers and wants to optimize it by ensuring that the maximum possible sum of the differences between each pair of adjacent elements falls within a specified range `[L, R]`. Alex can perform any number of swaps of any two elements in the array, which may change the order of the elements. Your task is to determine if it\'s possible to rearrange the array such that the sum of differences falls within the range `[L, R]`. Input The first line of the input contains an integer N, denoting the number of elements in the array A. The second line contains N space-separated integers, the elements of array A. The third line contains two space-separated integers L and R, defining the desired range for the sum of differences. Output Output \\"Possible\\" if you can rearrange the array to meet the criteria, otherwise output \\"Impossible\\". Constraints - 1 ≤ N ≤ 10^5 - 1 ≤ Ai ≤ 10^6 - 0 ≤ L ≤ R ≤ 10^9 Example Input 5 3 1 4 1 5 5 9 Example Output Possible Explanation By rearranging the array to `[1, 1, 3, 4, 5]`, the sum of differences is `|(1-1)| + |(1-3)| + |(3-4)| + |(4-5)| = 0 + 2 + 1 + 1 = 4`. Since 4 is not within the range [5, 9], you try another arrangement, such as `[1, 3, 1, 5, 4]` which could give a different sum, and check if any arrangement satisfies the condition. Note that you need to check all possible arrangements to determine if it can be achievable or not, but a greedy approach or technique suitable for the given constraints should be considered.","solution":"def can_rearrange_to_meet_range(N, A, L, R): Determine if the array can be rearranged such that the sum of differences between adjacent elements falls within the given range [L, R]. A.sort() min_sum = sum(abs(A[i] - A[i-1]) for i in range(1, N)) max_sum = sum(abs(A[i] - A[0]) for i in range(1, N)) if L <= max_sum and R >= min_sum: return \\"Possible\\" return \\"Impossible\\""},{"question":"The company\'s event organizer is planning a series of team-building activities. Each activity involves creating a group of employees based on their skills. Every employee is characterized by their skill level, and the organizer wants to form teams where each team consists of employees whose combined skill levels reach a specified target. The target skill level must not be exceeded, and each employee can be assigned to only one team. The goal is to minimize the number of teams required to accommodate all employees. Write a program to help the organizer determine the minimum number of teams needed. ------ Input ------ The first line contains the number of employees N and the target skill level T. The following N lines describe each employee with a single integer denoting their skill level S_i. ------ Output ------ Output a single integer representing the minimum number of teams required. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 1 ≤ S_{i} ≤ 10^9 1 ≤ T ≤ 10^9 ------ Sample Input 1 ------ 6 10 2 3 7 1 8 4 ------ Sample Output 1 ------ 3","solution":"from collections import deque def min_teams(N, T, skills): Returns the minimum number of teams required such that each team\'s combined skill level does not exceed T. Args: N : int : Number of employees T : int : Target skill level for each team skills : list : List of integers denoting skill levels of employees Returns: int : Minimum number of teams required # Sort the skills in descending order skills.sort(reverse=True) teams = 0 skills = deque(skills) while skills: teams += 1 current_team_skill = skills.popleft() # Try to add the least skillful member available without exceeding T while skills and current_team_skill + skills[-1] <= T: current_team_skill += skills.pop() return teams"},{"question":"You are given a string `s` consisting of lowercase English letters, and an integer array `indices` of the same length. The array `indices` is a permutation of the indices `[0, 1, 2, ..., s.length - 1]`. You need to function that reconstructs the string such that the character at the `i`-th position moves to `indices[i]` in the reordered string. Return the reordered string. # Example 1: Input: ``` s = \\"abc\\", indices = [2, 1, 0] ``` Output: ``` \\"cba\\" ``` Explanation: After shuffling, the character \'a\' at index 0 moves to index 2, \'b\' at index 1 moves to index 1, and \'c\' at index 2 moves to index 0. # Example 2: Input: ``` s = \\"aiohn\\", indices = [3, 1, 4, 2, 0] ``` Output: ``` \\"nihao\\" ``` Explanation: After shuffling, the character \'a\' at index 0 moves to index 3, \'i\' at index 1 moves to index 1, \'o\' at index 2 moves to index 4, \'h\' at index 3 moves to index 2, and \'n\' at index 4 moves to index 0. # Example 3: Input: ``` s = \\"aaiougrt\\", indices = [4, 0, 2, 6, 7, 3, 1, 5] ``` Output: ``` \\"arigatou\\" ``` Explanation: After shuffling, the character \'a\' at index 0 moves to index 4, another \'a\' at index 1 moves to index 0, \'i\' at index 2 moves to index 2, \'o\' at index 3 moves to index 6, \'u\' at index 4 moves to index 7, \'g\' at index 5 moves to index 3, \'r\' at index 6 moves to index 1, and \'t\' at index 7 moves to index 5. # Constraints: - `s.length == indices.length` - `1 <= s.length <= 100` - `s` consists of lowercase English letters. - `0 <= indices[i] < s.length` - All values of `indices` are unique.","solution":"def restoreString(s, indices): Reconstructs the string based on the given indices. Parameters: - s (str): The input string - indices (List[int]): The indices at which characters from \'s\' should be placed Returns: - str: The reordered string result = [\'\'] * len(s) for i, index in enumerate(indices): result[index] = s[i] return \'\'.join(result)"},{"question":"Winter is coming to the kingdom and the kingdom\'s roads need clearing from snow. There are n roads in the kingdom. Each road connects two different cities, and no two roads connect the same pair of cities. The kingdom\'s map of cities and roads forms a tree (i.e., a connected acyclic graph). The king wants to clear certain roads such that the minimum spanning tree (MST) of the city map has a minimal weight. Each road i has a weight w_i which represents the amount of snow that needs to be cleared from it. Your task is to calculate the minimum amount of snow that needs to be cleared so that the roads form the MST. -----Input----- The first line contains an integer n (2 leq n leq 10^5) — the number of cities. Each of the next n-1 lines contains three integers u, v, w_i (1 leq u, v leq n, 1 leq w_i leq 10^6) — city u and city v connected by a road with weight w_i. -----Output----- Output a single integer — the minimum amount of snow that needs to be cleared so that the roads form the MST. -----Examples----- Input 4 1 2 5 2 3 1 2 4 3 Output 9 Input 5 1 2 4 1 3 2 3 4 8 3 5 3 Output 17 -----Note----- In the first example, the minimal spanning tree can be formed by taking all the roads as it already forms a tree. The total weight of snow cleared is 5+1+3=9. In the second example, the minimal spanning tree also includes all given roads, and total weight of snow cleared is 4+2+8+3=17.","solution":"def min_snow_clearing(n, roads): Calculate the minimum amount of snow that needs to be cleared so that the roads form the MST. Parameters: n (int): Number of cities roads (list of tuple): Each tuple contains three integers (u, v, w) representing a road connecting city u and city v with weight w Returns: int: The minimum amount of snow that needs to be cleared return sum([w for u, v, w in roads]) # Example usage: # roads = [(1, 2, 5), (2, 3, 1), (2, 4, 3)] # print(min_snow_clearing(4, roads)) # Output: 9"},{"question":"Write a function that takes an integer array as input and finds the longest consecutive subsequence within the array. The subsequence does not have to be contiguous but must be strictly increasing and composed of consecutive numbers (i.e., numbers that follow each other by exactly 1). The function should return the length of this longest subsequence. For example, given the array `[100, 4, 200, 1, 3, 2, 101]`, the longest consecutive subsequence is `[1, 2, 3, 4]`, so the function should return `4`.","solution":"def longest_consecutive_subsequence(nums): Returns the length of the longest consecutive subsequence in the array. :param nums: List of integers :returns: Length of the longest consecutive subsequence if not nums: return 0 nums = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums: current_num = num current_streak = 1 while current_num + 1 in nums: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are working as a software engineer and have been tasked with developing a new feature for a social media application. The application has a feature that allows users to follow each other. A user A following user B means that user A will see updates from user B. In the application\'s database, user relationships are stored in the form of a list of follow operations. Each follow operation is represented as a tuple (u, v), which means user u started following user v. The application can have multiple follow operations between the same pair of users, and these operations are stored independently. Given the database of follow operations, your task is to determine the number of unique follower-following pairs. For example, if user 1 follows user 2 three times, it should still be counted as one unique relationship. -----Input----- The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N, the number of follow operations. Each of the following N lines contains two space-separated integers u and v representing a follow operation where user u follows user v. -----Output----- For each test case, output a single integer corresponding to the number of unique follower-following pairs. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ N ≤ 100000 - 1 ≤ u, v ≤ 100000 - Users u and v can be the same. -----Example----- Input: 2 3 1 2 1 2 2 3 4 5 6 5 6 5 6 6 5 Output: 2 2 -----Explanation----- In the first example, there are three follow operations but only two unique follower-following pairs: (1, 2) and (2, 3). So, the answer is 2. In the second example, user 5 follows user 6 three times and user 6 follows user 5 once. Despite multiple operations, there are only two unique pairs: (5, 6) and (6, 5). Thus, the answer is 2.","solution":"def count_unique_follow_pairs(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] follows = test_cases[i][1] unique_pairs = set(follows) results.append(len(unique_pairs)) return results"},{"question":"In certain games, actions taken by players can be affected by a set of rules that alter a player\'s score based on various conditions. Imagine a scenario where different types of tiles on a board can either add to, subtract from, or multiply a player\'s score. Design a program that calculates the player\'s final score after moving across a series of tiles. Each tile can have one of the following effects: - +X: Adds X points to the player\'s score. - -X: Subtracts X points from the player\'s score. - *X: Multiplies the player\'s score by X. - /X: Divides the player\'s score by X (integer division, ensuring the result is an integer). The player starts with an initial score of 0. Input The input is given in the following format: N effect_1 effect_2 ... effect_N The first line contains an integer N (1 ≤ N ≤ 100), the number of tiles the player will move across. Each of the next N lines contains a string effect_i, which represents the effect of the ith tile (e.g., \\"+3\\", \\"*2\\", \\"-1\\", \\"/2\\"). It\'s guaranteed that X will be a positive integer (1 ≤ X ≤ 100). Output Output the final score of the player after moving across all the tiles. Note: The operations should be processed in the given order, and the result should be printed as an integer. Examples Input 4 +3 *2 -1 /2 Output 2 Input 3 +5 -3 *4 Output 8","solution":"def calculate_final_score(operations): Calculates the final score of the player after applying the effects of all tiles. :param operations: A list of strings where each string represents an effect on the player\'s score. :return: The final score as an integer. score = 0 for operation in operations: operator, value = operation[0], int(operation[1:]) if operator == \'+\': score += value elif operator == \'-\': score -= value elif operator == \'*\': score *= value elif operator == \'/\': score //= value return score"},{"question":"Write a function that determines whether a given string is a scrambled palindrome. A string is considered a scrambled palindrome if it can be rearranged to form a palindrome. A palindrome is a word that reads the same backward as forward, such as \\"radar\\" or \\"level\\". Function Signature: ```python def is_scrambled_palindrome(s: str) -> bool: pass ``` Input Format: - A single string `s` representing the string to be checked. The string will consist of lowercase English letters (a-z) only. Output Format: - Return `True` if the string can be rearranged to form a palindrome, and `False` otherwise. Constraints: - The length of the string will be between 1 and 1000 characters inclusive. Examples: Example 1: ```python assert is_scrambled_palindrome(\\"carrace\\") == True ``` Explanation: The string \\"carrace\\" can be rearranged to form the palindrome \\"racecar\\". Example 2: ```python assert is_scrambled_palindrome(\\"hello\\") == False ``` Explanation: The string \\"hello\\" cannot be rearranged to form a palindrome. Example 3: ```python assert is_scrambled_palindrome(\\"aabbcc\\") == True ``` Explanation: The string \\"aabbcc\\" can be rearranged to form several palindromes, such as \\"abccba\\" or \\"abcabc\\". Your task is to implement the function `is_scrambled_palindrome` that satisfies the above conditions.","solution":"def is_scrambled_palindrome(s: str) -> bool: Determines if a string can be rearranged to form a palindrome. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count the number of characters that appear an odd number of times odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if there is at most one character # with an odd count return odd_count <= 1"},{"question":"Vikram is playing a game where he needs to collect gems in a grid. Each cell in the grid either has a gem (represented by \'1\') or is empty (represented by \'0\'). Gems are collected by forming a rectangular sub-grid that contains only \'1\'s. However, Vikram can only collect the gems from the largest rectangular sub-grid of \'1\'s. Given a 2D binary grid, find the area of the largest rectangle containing only \'1\'s and return its area. Example 1: Input: grid = [ [\\"1\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"1\\",\\"0\\",\\"1\\",\\"1\\",\\"1\\"], [\\"1\\",\\"1\\",\\"1\\",\\"1\\",\\"1\\"], [\\"1\\",\\"0\\",\\"0\\",\\"1\\",\\"0\\"] ] Output: 6 Explanation: The largest rectangle containing only \'1\'s has an area of 6. Example 2: Input: grid = [ [\\"0\\",\\"1\\"], [\\"1\\",\\"0\\"] ] Output: 1 Explanation: The largest rectangle containing only \'1\'s has an area of 1. Your Task: You don\'t need to read input or print anything. Complete the function maximalRectangle() which takes the 2D grid as input and returns the area of the largest rectangle containing only \'1\'s. Constraints: - rows == grid.length - cols == grid[0].length - 1 <= row <= 200 - 1 <= cols <= 200 - grid[i][j] is \'0\' or \'1\'","solution":"def maximalRectangle(grid): if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) max_area = 0 height = [0] * (cols + 1) for row in range(rows): for col in range(cols): if grid[row][col] == \'1\': height[col] += 1 else: height[col] = 0 stack = [] for col in range(cols + 1): while stack and height[col] < height[stack[-1]]: h = height[stack.pop()] w = col if not stack else col - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(col) return max_area"},{"question":"Given a string `str` containing only characters \'a\', \'b\', and \'c\'. Your task is to transform the string into a \\"perfect\\" string. A string is said to be perfect if all characters in the string are the same. You are allowed to perform the following operation: - In one operation, you can select any character and change it to any other character among \'a\', \'b\', or \'c\'. Your task is to determine the minimum number of operations required to make the string perfect and return this number. Example 1: Input: str = \\"abc\\" Output: 2 Explanation: We can change \'b\' to \'a\' and \'c\' to \'a\'. The string becomes \\"aaa\\" which is now perfect. Example 2: Input: str = \\"aaaa\\" Output: 0 Explanation: The string is already perfect. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `makePerfect()` which takes a string `str` as an argument and returns the minimum number of operations required to make the string perfect. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= |str| <= 10^5 str[i] ∈ {\'a\', \'b\', \'c\'}","solution":"def makePerfect(s: str) -> int: Returns the minimum number of operations required to make the string perfect. A string is perfect if all characters are the same. # Count the occurrences of \'a\', \'b\', and \'c\' count_a = s.count(\'a\') count_b = s.count(\'b\') count_c = s.count(\'c\') # Find the maximum count among the three characters max_count = max(count_a, count_b, count_c) # The minimum operations required will be the total length of the string # minus the frequency of the most common character return len(s) - max_count"},{"question":"A warehouse has shelves arranged in rows and columns forming a grid. Each cell in the grid contains a certain number of boxes. You need to determine the minimum path sum from the top-left corner to the bottom-right corner of the grid. You can only move either right or down at any point in time. Write a function `minPathSum` which takes a 2D list `grid` as input and returns the minimum path sum. Example 1: Input: grid = [[1,3,1], [1,5,1], [4,2,1]] Output: 7 Explanation: Path: 1 -> 3 -> 5 -> 1 -> 1 The minimum path sum is 7. Example 2: Input: grid = [[1,2,3], [4,5,6]] Output: 12 Explanation: Path: 1 -> 2 -> 3 -> 6 The minimum path sum is 12. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minPathSum()` which takes a 2D list `grid` as input and returns an integer representing the minimum path sum. Constraints: - 1 <= grid.length, grid[0].length <= 200 - 0 <= grid[i][j] <= 100","solution":"def minPathSum(grid): Returns the minimum path sum from top-left to bottom-right of the grid. Params: grid (List[List[int]]): 2D list containing non-negative integers representing the number of boxes in each cell. Returns: int: Minimum path sum. if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) # Initialize the first row for col in range(1, cols): grid[0][col] += grid[0][col - 1] # Initialize the first column for row in range(1, rows): grid[row][0] += grid[row - 1][0] # Fill in the rest of the grid for row in range(1, rows): for col in range(1, cols): grid[row][col] += min(grid[row - 1][col], grid[row][col - 1]) return grid[rows - 1][cols - 1]"},{"question":"A company tracks the productivity of its employees using a unique scoring system. Each employee earns points based on their productivity for the day. At the end of each week, the company needs to determine the highest productivity score and the corresponding employee(s). You are given an array of integers that represent the productivity scores of employees for a particular week. Each score in the array corresponds to a different employee. Write a function to find the highest score and list the indices of the employees who achieved it. Input: An array of integers representing the productivity scores. Output: An integer representing the highest score and a list of indices of employees who achieved the highest score. Example: Input: [10, 20, 20, 5, 15] Output: 20 [1, 2]","solution":"def highest_productivity_score(scores): Determines the highest productivity score and the corresponding indices for the employees. Args: scores (list of int): List of productivity scores for the week. Returns: tuple: highest score (int) and list of indices (list of int). if not scores: return None, [] max_score = max(scores) indices = [i for i, score in enumerate(scores) if score == max_score] return max_score, indices"},{"question":"A popular game tournament called \\"Ring Toss\\" determines its winner through the following scoring system. Each player earns points based on where their rings land on different sections of a peg. The sections are numbered from 1 to 4, with each number representing a different point value: 1 point for section 1, 2 points for section 2, 3 points for section 3, and 4 points for section 4. The player with the highest total score at the end of all rounds wins the game. If two or more players have the same highest score, the player who achieved the highest score first is declared the winner. Initially, each player has 0 points. Given the sequence of rounds including player\'s names and the sections of the peg where their rings landed, determine the winner. Input The first line contains an integer n (1 ≤ n ≤ 1000), representing the number of rounds played. The following n lines contain the information about each round in the format \\"name section\\", where \'name\' is a string consisting of lowercase Latin letters (with a length from 1 to 32), and \'section\' is an integer in the range from 1 to 4, inclusive. Output Print the name of the winner. Examples Input 4 alice 3 bob 2 alice 4 bob 4 Output alice Input 5 charlie 1 bob 2 alice 3 bob 4 charlie 3 Output bob","solution":"def determine_winner(n, rounds): Determines the winner of the Ring Toss game based on the given rounds. Parameters: - n (int): Number of rounds played. - rounds (List[Tuple[str, int]]): List of tuples containing player names and sections. Returns: - str: The name of the winner. scores = {} order_of_scores = [] for name, section in rounds: points = section # section represents the points directly if name not in scores: scores[name] = 0 scores[name] += points # Append updated score to tracking list for tiebreaks order_of_scores.append((name, scores[name])) # Determine the highest score max_score = max(scores.values()) # Identify the player who reached the maximum first for name, score in order_of_scores: if score == max_score: return name"},{"question":"In the city of Gridland, there are N buildings and M roads connecting them. Each road has a certain length in meters. Your task is to determine whether it is possible to choose a subset of roads such that all buildings are connected (i.e., there is a path between any two buildings) and the total length of the chosen subset of roads is minimized. If it is not possible to connect all buildings with the given roads, output `-1`. -----Input----- The first line of the input contains two integers, N and M (1 le N le 1000, 0 le M le 100000), the number of buildings and roads, respectively. The following M lines each contain three integers u, v, and w (1 le u, v le N, 1 le w le 1000), representing a road of length w connecting buildings u and v. -----Output----- If it is possible to connect all buildings, output the minimum total length of the roads required. Otherwise, output `-1`. -----Examples----- Sample Input 1: 4 5 1 2 10 1 3 6 1 4 5 2 3 4 3 4 2 Sample Output 1: 11 Sample Input 2: 4 2 1 2 5 3 4 10 Sample Output 2: -1","solution":"def kruskal_mst(N, edges): Function to find the Minimum Spanning Tree (MST) using Kruskal\'s algorithm. # Helper function to find the root of the set in disjoint set def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) # Helper function to union two sets def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 # Initialize parent and rank parent = [] rank = [] for node in range(N): parent.append(node) rank.append(0) mst_weight = 0 mst_edges = 0 # Sort edges based on weight edges = sorted(edges, key=lambda item: item[2]) for edge in edges: u, v, w = edge if find(parent, u-1) != find(parent, v-1): union(parent, rank, u-1, v-1) mst_weight += w mst_edges += 1 if mst_edges == N - 1: # If we\'ve added N-1 edges, we can stop break if mst_edges == N - 1: return mst_weight else: return -1 def min_total_road_length(N, M, roads): Main function to find the minimum total length of the roads to connect all buildings. return kruskal_mst(N, roads)"},{"question":"In the magical world of Wizardry, there are numerous spells that can be cast. Each spell is represented by a unique integer identifier. A master sorcerer wants to hold a contest where apprentice wizards demonstrate their skill by casting particular sequences of spells. At the start of the contest, the master sorcerer provides each apprentice with a list of spells in sequential order. The apprentice must then reverse any contiguous subarray (including the whole array) to produce the lexicographically smallest sequence possible. Your task is to help the apprentices determine this sequence. Input The first line of input contains an integer t, the number of test cases (1 ≤ t ≤ 100). The following lines contain the test cases. Each test case starts with an integer n (1 ≤ n ≤ 1000), the number of spells in the sequence. The next line contains n space-separated integers, representing the spell identifiers. Output For each test case, output a single line containing the lexicographically smallest sequence possible after reversing any subarray. Example Input: 2 4 4 3 1 2 5 1 2 3 5 4 Output: 1 3 4 2 1 2 3 4 5","solution":"def reverse_to_minimize(arr): Given an array of integers, this function finds the lexicographically smallest sequence by reversing any possible subarray. n = len(arr) min_seq = arr.copy() for start in range(n): for end in range(start, n): temp = arr[:start] + arr[start:end+1][::-1] + arr[end+1:] if temp < min_seq: min_seq = temp return min_seq def process_test_cases(t, test_cases): results = [] for i in range(t): n, spells = test_cases[i] minimized_sequence = reverse_to_minimize(spells) results.append(\' \'.join(map(str, minimized_sequence))) return results"},{"question":"Given a grid of size N x N, you are tasked with finding the number of distinct islands. An island is a group of \'1\'s (land) connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water (\'0\'). Your program should identify the total number of distinct islands formed by \'1\'s in the given grid. ------ Input format: ------ - The first line contains an integer N, the size of the grid (both width and height). - The next N lines contain N integers (either \'0\' or \'1\'), representing the grid. ------ Output format: ------ - Output a single integer, the number of distinct islands in the grid. Constraints: 1 ≤ N ≤ 1000 ----- Sample Input 1 ------ 4 1 1 0 0 1 0 0 1 0 0 1 0 0 1 1 0 ----- Sample Output 1 ------ 3","solution":"def num_distinct_islands(grid): Finds the number of distinct islands in a grid. :param grid: List of lists representing the grid :return: Integer, number of distinct islands def dfs(x, y, visited, island_shape, origin): if (x, y) in visited: return visited.add((x, y)) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == \'1\': island_shape.append((nx - origin[0], ny - origin[1])) dfs(nx, ny, visited, island_shape, origin) def process_grid(): visited = set() islands = set() for i in range(len(grid)): for j in range(len(grid[0])): if (i, j) not in visited and grid[i][j] == \'1\': island_shape = [] dfs(i, j, visited, island_shape, (i, j)) islands.add(tuple(island_shape)) return len(islands) return process_grid()"},{"question":"You are given a matrix filled with integers. The task is to find all pairs of rows that are permutations of each other. A row is defined to be a permutation of another row if it contains exactly the same elements, but possibly in a different order. Input The first line contains two integers ( n ) and ( m ) (1 ≤ ( n ), ( m ) ≤ 1000) representing the number of rows and columns in the matrix, respectively. Each of the next ( n ) lines contains ( m ) integers representing the elements of the matrix. The elements of the matrix are in the range from 1 to 10^9. Output The first line must contain a single integer ( k ) representing the number of pairs of rows that are permutations of each other. The next ( k ) lines should each contain two integers ( i ) and ( j ) (1 ≤ ( i < j ) ≤ ( n )), indicating that the i-th and j-th rows of the matrix are permutations of each other. Examples Input 4 4 1 2 3 4 4 3 2 1 1 2 4 3 5 6 7 8 Output 3 1 2 1 3 2 3 Input 3 3 1 2 3 3 2 1 1 2 2 Output 1 1 2 Note In the first example, the first, second, and third rows are permutations of each other, so there are three pairs: (1,2), (1,3), and (2,3). In the second example, only the first and second rows are permutations of each other, resulting in one pair: (1,2).","solution":"def find_permuted_pairs(n, m, matrix): row_permutations = {} for i in range(n): sorted_row = tuple(sorted(matrix[i])) if sorted_row in row_permutations: row_permutations[sorted_row].append(i + 1) else: row_permutations[sorted_row] = [i + 1] pairs = [] for rows in row_permutations.values(): if len(rows) > 1: for i in range(len(rows)): for j in range(i + 1, len(rows)): pairs.append((rows[i], rows[j])) return len(pairs), pairs # Example usage: # n, m = 4, 4 # matrix = [ # [1, 2, 3, 4], # [4, 3, 2, 1], # [1, 2, 4, 3], # [5, 6, 7, 8] # ] # k, pairs = find_permuted_pairs(n, m, matrix) # print(k) # for pair in pairs: # print(pair[0], pair[1])"},{"question":"Longest Increasing Subsequence An increasing subsequence in a list of numbers is a subsequence where every number is less than or equal to the next number in the subsequence. Your task is to find the length of the longest increasing subsequence (LIS) from a sequence of integers. A subsequence is a sequence derived by deleting some or none of the elements without changing the order of the remaining elements. Input The input consists of multiple datasets, each in the following format: > n > a1 a2 a3 ... an Here, n is the number of integers, which is a positive integer not exceeding 1000; ai is the i-th integer, which can be any integer value. You can assume that every dataset has at least one integer. The end of the input is indicated by a single line with a zero. Output For each dataset, output a single line containing the length of the longest increasing subsequence. Sample Input ``` 5 10 9 2 5 3 8 10 22 9 33 21 50 41 60 0 ``` Output for the Sample Input ``` 2 5 ``` Example Input ``` 5 10 9 2 5 3 8 10 22 9 33 21 50 41 60 0 ``` Output ``` 2 5 ```","solution":"def length_of_lis(arr): Returns the length of the longest increasing subsequence in the array. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_input(input_data): Processes the input data and returns the lengths of the longest increasing subsequence for each dataset. results = [] data_lines = input_data.strip().split(\'n\') i = 0 while i < len(data_lines): n = int(data_lines[i].strip()) if n == 0: break i += 1 arr = list(map(int, data_lines[i].strip().split())) results.append(length_of_lis(arr)) i += 1 return results"},{"question":"Determine the Frequency of Each Character in a String You are given a string `text`. Your task is to determine the frequency of each character in the string and return an ordered dictionary with characters as keys and their frequencies as values. The order should be based on the first appearance of each character. For example, given the string: ``` text = \\"aabccdeff\\" ``` The function should return: ``` {\'a\': 2, \'b\': 1, \'c\': 2, \'d\': 1, \'e\': 1, \'f\': 2} ``` Write a function `char_frequency(text: str) -> dict` that receives a string and returns the ordered dictionary with the frequencies of each character. **Constraints**: - The input string will only contain lowercase alphabetical characters. - The length of the input string will be between 1 and 1000.","solution":"from collections import OrderedDict def char_frequency(text: str) -> OrderedDict: Returns an ordered dictionary with the frequency of each character in the string. The order is based on the first appearance of each character. frequency_dict = OrderedDict() for char in text: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"A company is organizing a team-building trip where employees are grouped into teams. Each team must fulfill these requirements: 1. The total number of members must be equal to or less than a given size `n`. 2. Each member must have a distinct role within the team (roles do not repeat in a team). Write a function `organize_teams` that accepts a list of employees, each represented by a dictionary containing their name and role, and an integer `n`, the maximum team size. The function should return a list of teams where each team is a list of dictionaries representing the employees. If it\'s not possible to form any valid team based on the above constraints, return an empty list. # EXAMPLES ```python organize_teams([ {\'name\': \'John\', \'role\': \'Engineer\'}, {\'name\': \'Alice\', \'role\': \'Designer\'}, {\'name\': \'Bob\', \'role\': \'Manager\'}, {\'name\': \'Eve\', \'role\': \'Engineer\'}, {\'name\': \'Frank\', \'role\': \'Analyst\'} ], 3) == [[{\'name\': \'John\', \'role\': \'Engineer\'}, {\'name\': \'Alice\', \'role\': \'Designer\'}, {\'name\': \'Bob\', \'role\': \'Manager\'}], [{\'name\': \'Eve\', \'role\': \'Engineer\'}, {\'name\': \'Frank\', \'role\': \'Analyst\'}]] organize_teams([ {\'name\': \'John\', \'role\': \'Engineer\'}, {\'name\': \'Alice\', \'role\': \'Engineer\'}, {\'name\': \'Bob\', \'role\': \'Manager\'} ], 2) == [[{\'name\': \'John\', \'role\': \'Engineer\'}, {\'name\': \'Bob\', \'role\': \'Manager\'}]] organize_teams([ {\'name\': \'John\', \'role\': \'Engineer\'} ], 1) == [[{\'name\': \'John\', \'role\': \'Engineer\'}]] organize_teams([ {\'name\': \'John\', \'role\': \'Engineer\'}, {\'name\': \'Alice\', \'role\': \'Engineer\'} ], 1) == [[{\'name\': \'John\', \'role\': \'Engineer\'}], [{\'name\': \'Alice\', \'role\': \'Engineer\'}]] ```","solution":"def organize_teams(employees, n): Organize employees into teams satisfying the following conditions: 1. The total number of members must be equal to or less than a given size `n`. 2. Each member must have a distinct role within the team (roles do not repeat in a team). :param employees: A list of dictionaries where each dictionary contains \'name\' and \'role\' of an employee. :param n: Maximum allowed team size. :return: A list of teams where each team is a list of dictionaries representing the employees. from collections import defaultdict teams = [] role_to_employee = defaultdict(list) for employee in employees: role_to_employee[employee[\'role\']].append(employee) while role_to_employee: team = [] roles_to_remove = [] for role in list(role_to_employee.keys()): if len(team) < n: team.append(role_to_employee[role].pop(0)) if not role_to_employee[role]: roles_to_remove.append(role) else: break for role in roles_to_remove: del role_to_employee[role] teams.append(team) return teams"},{"question":"You are given a list of words and a string of characters. Write a function that determines if the string of characters can be rearranged to form at least one of the words in the list. The function should return the matching word if it\'s possible to rearrange the characters, otherwise it should return \\"no match\\". Your function should satisfy the following requirements: 1. If the words list is empty, return \\"empty list\\". 2. If the characters string is empty, return \\"empty string\\". 3. The words comparison should be case-insensitive. 4. Ignore any non-alphabetic characters in the string of characters. 5. If multiple words match, return any one of them. **Function Signature:** ```python def can_form_word(words: List[str], chars: str) -> str: pass ``` **Examples:** ```python can_form_word([\\"world\\", \\"hello\\", \\"Python\\"], \\"dlorw\\") -> \\"world\\" can_form_word([\\"apple\\", \\"banana\\", \\"cherry\\"], \\"pplea\\") -> \\"apple\\" can_form_word([\\"cat\\", \\"dog\\", \\"bird\\"], \\"gdo\\") -> \\"dog\\" can_form_word([], \\"anystring\\") -> \\"empty list\\" can_form_word([\\"anything\\"], \\"\\") -> \\"empty string\\" can_form_word([\\"python\\"], \\"3@p^yt#h*on!\\") -> \\"python\\" can_form_word([\\"try\\", \\"it\\"], \\"notr\\") -> \\"no match\\" ```","solution":"from typing import List import re def can_form_word(words: List[str], chars: str) -> str: Determines if the string of characters can be rearranged to form at least one of the words in the list. if not words: return \\"empty list\\" if not chars: return \\"empty string\\" # Clean and normalize chars chars = re.sub(\'[^a-zA-Z]\', \'\', chars).lower() # Check each word in the list for word in words: if sorted(word.lower()) == sorted(chars): return word return \\"no match\\""},{"question":"Given a sequence of integers, the peak elements are those that are greater than their neighbors. For an integer array `A` of size `N`, the peak elements are defined as follows: - Element `A[i]` is considered a peak if it is greater than its neighbors. That is, `A[i] > A[i-1]` and `A[i] > A[i+1]`. Write a program that processes multiple test cases. For each test case, it determines the position and value of the peak element that appears first in the array. -----Input----- - The first line of the input contains an integer T - the number of test cases. - The first line of each test case contains N. - The following line contains N space-separated integers A1..N. -----Output----- For each test case, output one line with the position and value of the first peak element. If no peak element exists, output `-1`. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 105 - -109 ≤ Ai ≤ 109 -----Example----- Input: 3 6 1 3 20 4 1 0 5 10 20 15 2 23 3 5 10 5 Output: 3 20 2 20 2 10 -----Explanation----- Example case 1: The peak element in the array [1, 3, 20, 4, 1, 0] is `20` at position `3`. Example case 2: The peak element in the array [10, 20, 15, 2, 23] is `20` at position `2`. Example case 3: The peak element in the array [5, 10, 5] is `10` at position `2`. Note: The position should be 1-based index.","solution":"def find_first_peak_element(test_cases): results = [] for A in test_cases: N = len(A) if N == 1: results.append((1, A[0])) else: for i in range(N): if (i == 0 and A[i] > A[i+1]) or (i == N-1 and A[i] > A[i-1]) or (A[i] > A[i-1] and A[i] > A[i+1]): results.append((i+1, A[i])) break else: results.append(-1) return results"},{"question":"Given an integer array, find the sum of its elements. Input There is a single positive integer T on the first line of input. It stands for the number of arrays to follow. Then there are T datasets, each starting with an integer N, representing the number of elements in the array. The next N integers are the elements of the array. Output For every input array, output a single line containing the sum of the elements of the array. Example Input: 2 5 1 2 3 4 5 3 10 20 30 Output: 15 60","solution":"def sum_of_elements(num_cases, cases): Given a number of arrays and each array\'s elements, returns a list of sums of each array. :param num_cases: int, number of arrays to sum :param cases: list of lists, each containing an array to sum :return: list of int, sum of elements for each array result = [] for case in cases: result.append(sum(case)) return result"},{"question":"A string is a palindrome if it reads the same backward as forward. Given a string, determine if it is possible to rearrange the characters of the string to form a palindrome. INPUT: An integer N (1 ≤ N ≤ 100): number of test cases For each test case, there is one input string consisting of lowercase English letters (1 ≤ length_of_string ≤ 100) OUTPUT: For each test case, output \\"YES\\" if it is possible to rearrange the characters to form a palindrome, and \\"NO\\" otherwise. SAMPLE INPUT 3 abba aabbcc abc SAMPLE OUTPUT YES YES NO","solution":"def can_form_palindrome(s): Determine if it is possible to rearrange the characters of the string to form a palindrome. from collections import Counter count = Counter(s) odd_count = sum(1 for freq in count.values() if freq % 2 != 0) return odd_count <= 1 def process_test_cases(test_cases): Process multiple test cases and determine if each string can form a palindrome. results = [] for test in test_cases: if can_form_palindrome(test): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Jack loves collecting candies, and he generally stores them in multiple jars. Each jar may contain a different number of candies. Jack wants to distribute candies from the jars to his friends in rounds. In each round, Jack picks a random jar and gives out one candy from that jar, if it contains any. Jack wants to know how many rounds he can distribute candies before running out of candies in all jars. Input: The first line of input contains an integer N (1 ≤ N ≤ 100,000) – the number of jars. The second line contains N space-separated integers Ai (0 ≤ Ai ≤ 1,000,000), where Ai denotes the number of candies in the i-th jar. Output: Print the maximum number of rounds Jack can distribute candies. Constraints: 1 ≤ N ≤ 100,000 0 ≤ Ai ≤ 1,000,000 SAMPLE INPUT 1 5 2 3 1 4 0 SAMPLE OUTPUT 1 10 SAMPLE INPUT 2 3 0 0 0 SAMPLE OUTPUT 2 0","solution":"def max_rounds(N, candies): Calculate the maximum number of rounds Jack can distribute candies. Parameters: N (int): Number of jars. candies (list): List containing number of candies in each jar. Returns: int: Maximum number of rounds Jack can distribute candies. return sum(candies)"},{"question":"Alice is an adventurer exploring a cavern system. The caverns are connected by narrow passages, and some passages may contain traps that Alice needs to avoid. Each cavern and passage can be represented as a graph, where caverns are nodes and passages are edges with weights representing the difficulty to cross them (either due to length, traps, or other obstacles). Write a function to find the safest path from a starting cavern to an exit cavern. The safest path is defined as the one where the sum of the passage difficulties is minimized. Input Your function will receive three parameters: 1. `n`: an integer representing the number of caverns (nodes). 2. `edges`: a list of tuples representing the passages where each tuple (u, v, w) signifies a passage between cavern `u` and cavern `v` with a difficulty of `w`. 3. `start_end`: a tuple representing the starting cavern and the exit cavern respectively. Output A list of cavern indices that form the safest path from the starting cavern to the exit cavern. If there are multiple safest paths, return any one of them. Technical Details Edges are undirected, meaning if there is a passage between u and v, it can be traversed in both directions. There are no negative weights on the edges. If there\'s no viable path from the starting cavern to the exit cavern, return an empty list. Example ```python n = 5 edges = [(0, 1, 10), (0, 2, 3), (1, 2, 1), (1, 3, 2), (2, 3, 8), (3, 4, 7)] start_end = (0, 4) find_safest_path(n, edges, start_end) # [0, 2, 1, 3, 4] or any other path with the minimal difficulty sum ```","solution":"import heapq def find_safest_path(n, edges, start_end): Finds the safest path in an undirected weighted graph from the starting node to the exit node. Parameters: n (int): Number of caverns (nodes). edges (List[Tuple[int, int, int]]): List of passages where each tuple (u, v, w) signifies a passage between cavern u and cavern v with a difficulty of w. start_end (Tuple[int, int]): A tuple containing the starting and exit caverns. Returns: List[int]: The safest path from starting cavern to exit cavern. start, end = start_end graph = {i: [] for i in range(n)} # Build the graph. for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find the shortest path pq = [(0, start, [])] # (current difficulty, current node, path to current node) visited = set() while pq: current_difficulty, current_node, path = heapq.heappop(pq) if current_node in visited: continue path = path + [current_node] if current_node == end: return path visited.add(current_node) for neighbor, weight in graph[current_node]: if neighbor not in visited: heapq.heappush(pq, (current_difficulty + weight, neighbor, path)) return [] # If no path is found, return an empty list."},{"question":"You are given an array of N integers which represent the heights of buildings in a city. A city\'s skyline can be defined as the sequence of visible \\"steps\\" formed when drawing a line from the leftmost to the rightmost building height. Each \\"step\\" consists of a contiguous sequence of the same height. A \\"step\\" is counted as visible if it is taller than all the \\"steps\\" that appeared before it. Determine the number of visible \\"steps\\" in the city\'s skyline from left to right. Input The first line consists of the integer N. The second line consists of N space-separated integers representing the heights of buildings. Output Print a single integer, the number of visible \\"steps\\" in the city\'s skyline. Constraints 1 ≤ N ≤ 10^4 0 ≤ height ≤ 10^5 Author: Your Name Tester: Another Name SAMPLE INPUT 6 3 1 4 1 5 9 SAMPLE OUTPUT 4 Explanation: 1. The first building (height 3) is visible. 2. The second building (height 1) is not visible as it is shorter than 3. 3. The third building (height 4) is visible since it is taller than the previous visible building (3). 4. The fourth building (height 1) is not visible as it is shorter than 4. 5. The fifth building (height 5) is visible since it is taller than the previous visible building (4). 6. The sixth building (height 9) is visible since it is taller than the previous visible building (5). Thus, there are 4 visible \\"steps\\" in this skyline.","solution":"def count_visible_steps(buildings): Returns the number of visible \'steps\' in the city\'s skyline. Parameters: buildings (list of ints): Heights of buildings in the city Returns: int: Number of visible steps if not buildings: return 0 count = 0 max_height = 0 for height in buildings: if height > max_height: count += 1 max_height = height return count"},{"question":"Your task is to implement the function `findTriplets`. The function takes an array of integers and a target sum as arguments. The function should return `True` if there exists a triplet in the array which sums up to the target sum, otherwise it should return `False`. Example 1: Input: arr = [12, 3, 4, 1, 6, 9], target = 24 Output: True Explanation: There is a triplet (12, 3, 9) which sums up to 24. Example 2: Input: arr = [1, 2, 3, 4, 5], target = 10 Output: True Explanation: There is a triplet (1, 4, 5) which sums up to 10. Example 3: Input: arr = [1, 2, 3, 4, 5], target = 20 Output: False Explanation: There is no triplet which sums up to 20. Your Task: You don\'t have to take any input. Just complete the `findTriplets()` function which takes an array of integers and an integer target as input parameters. The function should return a boolean value indicating whether a triplet that sums up to the target exists in the array. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(1) Constraints: 1 <= size of array <= 100 -10^3 <= element of the array <= 10^3","solution":"def findTriplets(arr, target): Returns True if there exists a triplet in the array which sums up to the target sum. n = len(arr) arr.sort() for i in range(n-2): left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Write a function that determines whether a given positive integer is a perfect number. A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. Example: Input: 28 Output: True Explanation: 28 is a perfect number because 1 + 2 + 4 + 7 + 14 = 28. Input: 10 Output: False Explanation: 10 is not a perfect number because 1 + 2 + 5 = 8. Function Signature: ```python def is_perfect_number(n: int) -> bool: pass ```","solution":"def is_perfect_number(n: int) -> bool: Determines whether a given positive integer is a perfect number. A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. :param n: int - The number to check for being a perfect number. :return: bool - True if n is a perfect number, False otherwise. if n < 2: return False sum_of_divisors = 1 for i in range(2, int(n**0.5) + 1): if n % i == 0: sum_of_divisors += i if i != n // i: sum_of_divisors += n // i return sum_of_divisors == n"},{"question":"You are given a sorted array of distinct integers. Your task is to check if there exists a pair of elements that sum up to a given target value. If such a pair exists, return 1. Otherwise, return 0. Example: Input: array = [1, 2, 3, 4, 6] target = 5 Output: 1 Explanation: 1 + 4 = 5, which is equal to the target value, so the output is 1. Example 2: Input: array = [1, 2, 3, 9] target = 8 Output: 0 Explanation: There is no pair of elements that sum up to 8, so the output is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function check_pair_sum() which takes the sorted array and target value as inputs and returns 1 if there exists a pair with the given sum, otherwise returns 0. Constraint: 1 <= length of array <= 10^5 -10^5 <= elements of array <= 10^5 -10^5 <= target <= 10^5","solution":"def check_pair_sum(array, target): This function returns 1 if there exists a pair of elements in the sorted array that sum up to the target value, otherwise returns 0. left = 0 right = len(array) - 1 while left < right: current_sum = array[left] + array[right] if current_sum == target: return 1 elif current_sum < target: left += 1 else: right -= 1 return 0"},{"question":"You are given a string containing digits from \'0\' to \'9\'. Your task is to find the largest number that can be formed from these digits. However, there is a restriction: you can only swap adjacent digits. Input: A single string S containing only digits (\'0\' to \'9\'). The length of the string will be between 1 and 100, inclusive. Output: Print the largest number possible by only swapping adjacent digits. Constraints: 1 ≤ length of S ≤ 100 SAMPLE INPUT 34912 SAMPLE OUTPUT 94321 Explanation By swapping adjacent digits, we can form 94321 from 34912 which is the largest possible number. Note: 34912 -> 39412 -> 39142 -> 39124 -> 93124 -> 93142 -> 93412 -> 94312 -> 94321","solution":"def largest_number_by_adjacent_swaps(S): Returns the largest number possible by only swapping adjacent digits. digits = list(S) n = len(digits) for i in range(n): for j in range(n - 1): if digits[j] < digits[j + 1]: digits[j], digits[j + 1] = digits[j + 1], digits[j] return \'\'.join(digits)"},{"question":"John is organizing a competition and has a list of participants with their respective scores. He wants to find out the best k participants based on their scores. The kth best participant is the one with the k-th highest score. However, in case of ties (participants with the same score), the participant who appears first in the list has a higher priority. ----Input---- The first line of the input contains two integers, n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ n) — the number of participants and the value of k. The second line of the input contains n integers separated by spaces, where the i-th integer represents the score of the i-th participant. ----Output---- Print a single integer representing the score of the k-th best participant. ----Examples---- Input 5 2 10 20 20 15 30 Output 20 Input 6 4 12 15 15 12 18 20 Output 12 Input 3 1 30 25 30 Output 30 ----Note---- In the first example, the scores in descending order are 30, 20, 20, 15, 10. The 2nd highest score considering ties and priorities is 20. In the second example, the scores in descending order are 20, 18, 15, 15, 12, 12. The 4th highest score considering ties and priorities is 12. In the third example, the scores in descending order are 30, 30, 25. The highest score is 30.","solution":"def kth_best_participant(n, k, scores): Returns the k-th best score of the participants considering ties and priorities. Parameters: n (int): The number of participants. k (int): The k-th position to find the score for. scores (list of int): List of scores of the participants. Returns: int: The score of the k-th best participant. sorted_scores = sorted(scores, reverse=True) # To find the k-th unique highest score unique_scores = [] for score in sorted_scores: if score not in unique_scores: unique_scores.append(score) if len(unique_scores) == k: return score return None # In case k is larger than the number of unique scores"},{"question":"Write a function that takes a string representing a mathematical expression containing integers, addition (`+`), and multiplication (`*`) operations, and returns the computed result as an integer. The expression will be fully parenthesized, meaning there will always be exactly one operator (`+` or `*`) between any two numbers and proper parentheses to enforce the order of operations. Examples ``` \\"3+(2*2)\\" ==> 7 \\"(1+1)*(3+2)\\" ==> 10 \\"(3+((2+1)*(2*2)))\\" ==> 15 ``` Note: - You may assume the input string is well-formed. - No division or subtraction operators will be used. - The function should handle nested parentheses and respect the precedence enforced by parentheses.","solution":"def evaluate_expression(expression): Evaluates a fully parenthesized mathematical expression containing integers, addition and multiplication operations. def compute(tokens): stack = [] for token in tokens: if token == \'+\': stack.append(stack.pop() + stack.pop()) elif token == \'*\': stack.append(stack.pop() * stack.pop()) else: stack.append(int(token)) return stack[0] def tokenize(expr): tokens, num, i = [], \\"\\", 0 while i < len(expr): if expr[i].isdigit(): num += expr[i] else: if num: tokens.append(num) num = \\"\\" if expr[i] in \\"+*()\\": tokens.append(expr[i]) i += 1 if num: tokens.append(num) return tokens def to_postfix(tokens): output = [] ops = [] for token in tokens: if token.isdigit(): output.append(token) elif token in \\"+*\\": while ops and ops[-1] != \'(\': output.append(ops.pop()) ops.append(token) elif token == \'(\': ops.append(token) elif token == \')\': while ops and ops[-1] != \'(\': output.append(ops.pop()) ops.pop() while ops: output.append(ops.pop()) return output tokens = tokenize(expression) postfix_tokens = to_postfix(tokens) return compute(postfix_tokens)"},{"question":"Given a list of integers representing flower heights, write a program to determine if all flowers in the garden are ordered in non-decreasing order of height. You are allowed to remove up to one flower to achieve this. Input The input is given in the following format: n h1 h2 ... hn The input consists of one line. The first integer n (1 ≤ n ≤ 100) represents the number of flowers, followed by n integers hi (1 ≤ hi ≤ 100) denoting the height of each flower. Output Output \\"yes\\" if the flower heights can be made non-decreasing by removing at most one flower, and \\"no\\" otherwise. Examples Input 5 1 3 2 4 5 Output yes Input 4 4 2 3 1 Output no","solution":"def can_be_non_decreasing_flowers(n, heights): Determine if the flower heights can be made non-decreasing by removing at most one flower. def is_non_decreasing(arr): for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return False return True if is_non_decreasing(heights): return \\"yes\\" for i in range(n): if is_non_decreasing(heights[:i] + heights[i+1:]): return \\"yes\\" return \\"no\\""},{"question":"- Maximum Product Subarray You are given an array of integers. Your task is to find the contiguous subarray (containing at least one number) which has the largest product and return that product. Write a function `maxProduct` that takes an integer array `nums` as input and returns the maximum product of a contiguous subarray. **Input:** A single list of integers `nums` where - 1 <= len(nums) <= 10^5 - -10 <= nums[i] <= 10 **Output:** Return a single integer representing the maximum product of a contiguous subarray. **Example:** Input: ``` [-2,3,-4] ``` Output: ``` 24 ``` Input: ``` [2,3,-2,4] ``` Output: ``` 6 ``` Input: ``` [-2,0,-1] ``` Output: ``` 0 ``` **Note:** In the first example, the subarray `[3,-4]` produces the maximum product 3 * -4 = -12, but considering the absolute values the subarray [-2,3,-4] gives 24. In the second example, the subarray `[2,3]` produces the maximum product 2 * 3 = 6. In the third example, the subarray `[0]` produces the maximum product 0, since the subarray [-2,0,-1] contains zeros, the maximum product of a contiguous subarray must be considered. Remember, the subarray must contain at least one element.","solution":"def maxProduct(nums): Returns the maximum product of a contiguous subarray. if not nums: return 0 # Initialize the maximum and minimum products as the first element max_prod = min_prod = result = nums[0] # Iterate through the array from the second element for num in nums[1:]: if num < 0: max_prod, min_prod = min_prod, max_prod max_prod = max(num, max_prod * num) min_prod = min(num, min_prod * num) result = max(result, max_prod) return result"},{"question":"Marina has an unusual rectangular grid of size `N x M`. Each cell in the grid can either be empty (represented by `0`) or occupied by an obstacle (represented by `1`). Marina\'s task is to find out the number of unique paths from the top-left corner of the grid (position `(0, 0)`) to the bottom-right corner of the grid (position `(N-1, M-1)`), where movements are restricted to right or down and any path cannot pass through a cell occupied by an obstacle. Help Marina determine the number of such unique paths. Note: There will always be at least one valid path from `(0, 0)` to `(N-1, M-1)`. -----Input----- The first line of the input contains two integers `N` and `M` (1 ≤ N, M ≤ 1000) — the dimensions of the grid. Each of the next `N` lines contains `M` integers (either 0 or 1), representing the grid where `0` indicates an empty cell and `1` indicates a cell with an obstacle. -----Output----- Print a single integer — the number of unique paths from the top-left corner to the bottom-right corner. -----Examples----- Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 2 2 0 1 0 0 Output 1","solution":"def unique_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 0: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are given a list of integers `arr`, and a target integer `k`. Your task is to determine if there exists any contiguous subarray of length at least 2 such that the sum of the elements in the subarray is divisible by `k`. Example 1: Input: arr = [23, 2, 4, 6, 7], k = 6 Output: True Explanation: [2, 4], [2, 4, 6], and [23, 2, 4, 6, 7] are subarrays of length >= 2 whose sum is divisible by 6. Example 2: Input: arr = [1, 2, 3], k = 5 Output: True Explanation: [2, 3] is a subarray of length >= 2 whose sum is divisible by 5. Your Task: You don\'t need to read or print anything. Your task is to complete the function `checkSubarraySum()` which takes `arr` (a list of integers) and `k` (an integer) as input and returns a boolean indicating the existence of such a subarray. Expected Time Complexity: O(n) Expected Space Complexity: O(min(n, k)) Constraints: - 1 <= len(arr) <= 10^5 - -10^9 <= arr[i] <= 10^9 - 1 <= k <= 2^31-1","solution":"def checkSubarraySum(arr, k): Determines if there exists any contiguous subarray of length at least 2 such that the sum of the elements in the subarray is divisible by k. Args: arr: List[int] - list of integers k: int - target integer Returns: bool - True if such a subarray exists, False otherwise # Dictionary to store the running sum mod k and its earliest index sum_mod = {0: -1} # Initialize with 0 mod k at index -1 to handle edge cases running_sum = 0 # Iterate over the array to compute the running sum mod k for i, num in enumerate(arr): running_sum += num mod_value = running_sum % k if mod_value in sum_mod: if i - sum_mod[mod_value] > 1: return True else: sum_mod[mod_value] = i return False"},{"question":"You are given an integer array nums sorted in non-decreasing order and an integer target. Write a function to search target in nums. If target exists, return its index. Otherwise, return -1. You must write an algorithm with O(log n) runtime complexity. -----Constraints----- - 1 leq nums.length leq 10^4 - -10^4 leq nums[i], target leq 10^4 - All the integers in nums are unique. -----Input----- Input is given from Standard Input in the following format: nums target -----Output----- Print the index of target if it is found in nums, otherwise print -1. -----Sample Input----- [-1, 0, 3, 5, 9, 12] 9 -----Sample Output----- 4 Another Sample Input----- [-1, 0, 3, 5, 9, 12] 2 -----Sample Output----- -1","solution":"def search(nums, target): Searches for target in nums using binary search. Returns the index of target if found, else returns -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"You\'ve just celebrated the launch of a revolutionary new product. However, your excitement is cut short by an unexpected influx of feedback data—both positive and negative. Now, you are tasked with classifying the feedback to comprehend better how users feel about your product. Your goal is to write a program that automatically classifies each feedback as either positive or negative based on specific keywords. Input: - The first line contains an integer ( N ) (1 ≤ N ≤ 10^3) — the number of feedback entries. - The next ( N ) lines each contain a single feedback entry, which is a string ( S ) containing up to 200 characters. You are given two lists of keywords: - Positive keywords: [‘good’, ‘great’, ‘satisfactory’, ‘excellent’, ‘positive’, ‘fantastic’] - Negative keywords: [‘bad’, ‘poor’, ‘terrible’, ‘negative’, ‘horrible’, ‘awful’] The classification is simple: - If a feedback entry contains any of the positive keywords, it is classified as \\"Positive\\". - If a feedback entry contains any of the negative keywords, it is classified as \\"Negative\\". - If a feedback entry contains both positive and negative keywords, it is classified as \\"Mixed\\". - If a feedback entry contains none of the keywords, it is classified as \\"Neutral\\". Output: Print ( N ) lines—each line should contain the classification of the corresponding feedback entry: \\"Positive\\", \\"Negative\\", \\"Mixed\\", or \\"Neutral\\". Example: Input: 4 The product is absolutely fantastic and works great Poor performance for the price I paid Quite satisfactory but could be better No comments on the horrible experience Output: Positive Negative Positive Negative","solution":"def classify_feedback(feedbacks): positive_keywords = [\'good\', \'great\', \'satisfactory\', \'excellent\', \'positive\', \'fantastic\'] negative_keywords = [\'bad\', \'poor\', \'terrible\', \'negative\', \'horrible\', \'awful\'] classifications = [] for feedback in feedbacks: feedback_lower = feedback.lower() positive_found = any(keyword in feedback_lower for keyword in positive_keywords) negative_found = any(keyword in feedback_lower for keyword in negative_keywords) if positive_found and negative_found: classification = \\"Mixed\\" elif positive_found: classification = \\"Positive\\" elif negative_found: classification = \\"Negative\\" else: classification = \\"Neutral\\" classifications.append(classification) return classifications # Example Usage # N = 4 # feedbacks = [ # \\"The product is absolutely fantastic and works great\\", # \\"Poor performance for the price I paid\\", # \\"Quite satisfactory but could be better\\", # \\"No comments on the horrible experience\\" # ] # print(classify_feedback(feedbacks)) -> [\'Positive\', \'Negative\', \'Positive\', \'Negative\']"},{"question":"Given a string s, determine if it is a valid palindrome while ignoring non-alphanumeric characters and considering only uppercase and lowercase letters. Input The only line of input contains a string s (1 ≤ length of s ≤ 1000). Output Output \'YES\' if the string is a palindrome, \'NO\' otherwise. Example Input A man, a plan, a canal: Panama Output YES Input race a car Output NO","solution":"def is_valid_palindrome(s): Determines if a string is a valid palindrome by ignoring non-alphanumeric characters and considering only uppercase and lowercase letters. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered characters form a palindrome return \'YES\' if filtered_chars == filtered_chars[::-1] else \'NO\'"},{"question":"# Scenario You are developing an application that helps users manage their daily calorie intake. To support this, you need to implement a feature that calculates the total calories consumed in a day based on the meals the user logs. # Task Given a list of meals with their respective calorie values, write a function that returns the total calorie intake for the day. # Requirements - Implement a function `total_calories` that takes a list of tuples as input. Each tuple contains the name of the meal (a string) and the calorie value (an integer). - The function should return an integer representing the total calories consumed. # Input - The input will be a list of meal tuples `(meal_name: str, calories: int)`. Each tuple represents a meal and its calorie value. - The list will contain at least one meal tuple. - Calories will be positive integers. # Output - The function should return an integer representing the sum of the calorie values of all the meals. # Examples ```python total_calories([(\\"breakfast\\", 300), (\\"lunch\\", 500), (\\"snack\\", 150), (\\"dinner\\", 600)]) # Expected output: 1550 ``` ```python total_calories([(\\"brunch\\", 700)]) # Expected output: 700 ``` ```python total_calories([(\\"breakfast\\", 450), (\\"lunch\\", 600), (\\"dinner\\", 800)]) # Expected output: 1850 ``` # Additional Notes - You may assume the input list will not be empty and all calorie values are positive integers. - The function should efficiently handle the input list and return the total calorie count in a minimal amount of time.","solution":"def total_calories(meals): Calculate the total calories consumed in a day based on meal logs. Parameters: meals (list): A list of tuples where each tuple contains a string (meal name) and an integer (calorie value). Returns: int: The total calorie intake for the day. return sum(calorie for meal, calorie in meals)"},{"question":"Given an integer array \'nums\' sorted in non-decreasing order, remove duplicates in-place such that each element appears at most twice and return the new length of the modified array. The relative order of the elements should be kept the same. You must modify the input array in-place and use only O(1) extra space. Example 1: Input: nums = [1,1,1,2,2,3,3,3] Output: [1,1,2,2,3,3] Explanation: The array has been modified to allow at most two occurrences of each element while maintaining relative order. Example 2: Input: nums = [0,0,1,1,1,1,2,3,3] Output: [0,0,1,1,2,3,3] Explanation: The array has been modified to allow at most two occurrences of each element while maintaining relative order. Your task: You don\'t have to read input or print anything. Your task is to implement the function `removeDuplicates()` which takes the array `nums` and modifies it in-place to allow at most two occurrences of each element. The function should return the new length of the modified array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ nums.length ≤ 3 * 10^4 -10^4 ≤ nums[i] ≤ 10^4 nums is sorted in non-decreasing order.","solution":"def removeDuplicates(nums): Modify the input array in-place to remove duplicates such that each element appears at most twice. Returns the new length of the modified array. if len(nums) <= 2: return len(nums) write_index = 2 for i in range(2, len(nums)): if nums[i] != nums[write_index - 2]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"You are given a string `s` of length `n` that consists of lowercase English letters. Your task is to process `m` queries, each containing an integer `k` and return the count of unique substrings of length `k` for each query. A substring is a contiguous sequence of characters within a string. For example, given the string `s = \\"abcabc\\"` and `k = 2`, the unique substrings of length `k` are `\\"ab\\"`, `\\"bc\\"`, and `\\"ca\\"`. -----Input----- The first line contains a single integer `t` (1 le t le 10^4) — number of input test cases. The first line of each test case contains a string `s` of length `n` (1 le n le 10^5), consisting only of lowercase English letters. The second line contains a single integer `m` (1 le m le 10^5), the number of queries. The next `m` lines each contain an integer `k` (1 le k le n). It is guaranteed that the sum of all `n` in a single test file does not exceed 10^6. It is also guaranteed that the sum of all `m` in a single test file does not exceed 10^6. -----Output----- For each query, print the count of unique substrings of length `k` for the given `s`. -----Examples----- Input 2 abcabc 2 1 3 abcd 2 2 3 Output 3 1 3 2 -----Explanation----- In the first test case, for string `s = \\"abcabc\\"`: - For `k = 1`: The unique substrings of length 1 are `\\"a\\"`, `\\"b\\"`, `\\"c\\"`. The count is 3. - For `k = 3`: The unique substrings of length 3 are `\\"abc\\"`, `\\"bca\\"`, and `\\"cab\\"`. The count is 1. In the second test case, for string `s = \\"abcd\\"`: - For `k = 2`: The unique substrings of length 2 are `\\"ab\\"`, `\\"bc\\"`, `\\"cd\\"`. The count is 3. - For `k = 3`: The unique substrings of length 3 are `\\"abc\\"`, `\\"bcd\\"`. The count is 2.","solution":"def count_unique_substrings(s, k): This function returns the count of unique substrings of length `k` in the given string `s`. if k > len(s): return 0 unique_substrings = set() for i in range(len(s) - k + 1): unique_substrings.add(s[i:i+k]) return len(unique_substrings) def process_queries(t, test_cases): This function processes multiple test cases and returns the results for each query. results = [] for s, m, queries in test_cases: for k in queries: results.append(count_unique_substrings(s, k)) return results"},{"question":"In programming, strings often need to be manipulated in specific ways. You are given a string containing both uppercase and lowercase letters. Your task is to write a function that sorts the letters in the string such that all the uppercase letters come before all the lowercase letters, while maintaining their respective order otherwise. -----Constraints----- - The input string will contain only alphabetic characters (both uppercase and lowercase). - The length of the string will be between 1 and 100. -----Input----- Input is given from Standard Input in the following format: s -----Output----- Output the string with all the uppercase letters at the beginning, followed by all the lowercase letters, preserving the original order within each group. -----Sample Input----- dAeB -----Sample Output----- ABde","solution":"def rearrange_string(s): Rearranges the string such that all uppercase letters come before all lowercase letters, while maintaining their respective order within each group. uppercase_letters = [char for char in s if char.isupper()] lowercase_letters = [char for char in s if char.islower()] return \'\'.join(uppercase_letters) + \'\'.join(lowercase_letters)"},{"question":"You are given a string S of length N consisting of lowercase English alphabets. You can rearrange the characters of the string to create a new string. Chef wants to know the lexicographically smallest string you can obtain after at most one character modification. A character modification means replacing any character in the string with any other lowercase English alphabet. ------ Input Format ------ - The first line of the input contains an integer T denoting the number of test cases. The description of the T test cases follows. - The first line of each test case contains an integer N - the length of the string S. - The second line of each test case contains a string S of length N. ------ Output Format ------ For each test case, print the lexicographically smallest string obtainable after at most one character modification. ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 - Each character of S is a lowercase English alphabet. - Sum of lengths of all strings in all test cases does not exceed 2 cdot 10^5. ----- Sample Input 1 ------ 3 3 abc 4 dcba 2 zz ----- Sample Output 1 ------ aac acba az ----- Explanation 1 ------ - Test case 1: By changing \'b\' to \'a\', we get \\"aac\\", which is the lexicographically smallest string. - Test case 2: By changing \'d\' to \'a\', we get \\"acba\\", which is the lexicographically smallest string. - Test case 3: By changing the first \'z\' to \'a\', we get \\"az\\", which is the lexicographically smallest string.","solution":"def smallest_string_after_modification(s): Returns the lexicographically smallest string obtainable after at most one character modification. n = len(s) if n == 1: return \'a\' min_string = s for i in range(n): for char in \\"abcdefghijklmnopqrstuvwxyz\\": if char != s[i]: # Create a new string with one character modification new_string = s[:i] + char + s[i + 1:] if new_string < min_string: min_string = new_string # Since we look for the smallest lexicographical character, we can break early. break return min_string def process_test_cases(test_cases): Processes multiple test cases. results = [] for n, s in test_cases: results.append(smallest_string_after_modification(s)) return results"},{"question":"Alice wants to play a game with her friends using a rectangular grid with dimensions h by w. The grid is initially empty, and Alice wanted to place some obstacles on it. Each cell in the grid can be either empty or occupied by an obstacle. Obstacles prevent any player from moving through the cell. After placing obstacles, Alice wants to check if there is any path from the top-left corner of the grid (0, 0) to the bottom-right corner (h-1, w-1). A player can move to an adjacent cell only if it is not occupied by an obstacle. The possible moves are up, down, left, and right. Write a function canReachExit(h, w, grid) that accepts the argument h (number of rows in the grid), w (number of columns in the grid), and grid (a 2D list of integers representing the grid, where 0 represents an empty cell and 1 represents a cell with an obstacle). The function should return \\"YES\\" if there is a path from the top-left to the bottom-right corner, \\"NO\\" otherwise. Example Input: ``` h = 3 w = 3 grid = [ [0, 1, 0], [0, 0, 1], [1, 0, 0] ] ``` Output: ``` YES ``` Input: ``` h = 3 w = 3 grid = [ [0, 1, 0], [1, 0, 1], [1, 1, 0] ] ``` Output: ``` NO ```","solution":"def canReachExit(h, w, grid): Check if there is a path from top-left to bottom-right in a grid with obstacles. :param h: Number of rows in the grid. :param w: Number of columns in the grid. :param grid: 2D list representing the grid, where 0 is an empty cell and 1 is an obstacle. :return: \\"YES\\" if there is a path from (0, 0) to (h-1, w-1), \\"NO\\" otherwise. if grid[0][0] == 1 or grid[h-1][w-1] == 1: return \\"NO\\" from collections import deque # Directions for moving in the grid (right, left, down, up) directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Queue for BFS queue = deque([(0, 0)]) # Visited set to keep track of visited cells visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (h-1, w-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < h and 0 <= ny < w and grid[nx][ny] == 0 and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"You are given a list of integers. Your task is to determine whether it is possible to \\"partition\\" the list into two non-empty subarrays such that the sum of the elements in each subarray is equal. Input: A list of integers, where each integer is at least 1. The list will contain at least 2 integers and no more than 50 integers. Output: Return `True` if you can partition the list into two subarrays with equal sum, and `False` otherwise. Examples: 1. ``` Input: [1, 5, 11, 5] Output: True Explanation: The list can be partitioned as [1, 5, 5] and [11]. ``` 2. ``` Input: [1, 2, 3, 5] Output: False Explanation: The list cannot be partitioned into two subarrays with equal sum. ``` 3. ``` Input: [7, 7, 7, 7] Output: True Explanation: The list can be partitioned as [7, 7] and [7, 7]. ```","solution":"def can_partition(nums): Determine whether it is possible to partition the list into two subarrays with equal sum. :param nums: List of integers :return: True if such a partitioning is possible, False otherwise total_sum = sum(nums) # If the total sum is odd, we cannot split the list into two equal parts if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Initialize a DP array of size (target + 1) with False values dp = [False] * (target + 1) dp[0] = True # Iterate over the numbers and update the DP array for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Given a list of integers, write a program to find and print the length of the longest consecutive elements sequence. Input The first line contains N, the number of integers. The following line contains N space-separated integers. Output You have to print the length of the longest consecutive elements sequence. Constraints: 1 <= N <= 1000 -10^5 <= integer <= 10^5 Example Input: 7 100 4 200 1 3 2 5 Output: 5 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4, 5], and its length is 5.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums_set: # Only check for the start of a sequence current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Given a string s consisting of lowercase alphabets, return the index of the first non-repeating character. If there is no such character, return -1. Example 1: Input: \\"leetcode\\" Output: 0 Example 2: Input: \\"loveleetcode\\" Output: 2 Example 3: Input: \\"aabbcc\\" Output: -1 Note: - You may assume the string contains only lowercase alphabets (\'a\' to \'z\').","solution":"def first_non_repeating_character(s): Returns the index of the first non-repeating character in the string s. If there is no such character, returns -1. # Create a dictionary to store the count of each character count = {} # Fill the dictionary with the frequency of each character for char in s: count[char] = count.get(char, 0) + 1 # Find the first character with frequency 1 for index, char in enumerate(s): if count[char] == 1: return index # If there is no non-repeating character, return -1 return -1"},{"question":"Alice is playing a game where she must rearrange the characters of a given string such that each pair of adjacent characters are not the same. If it is not possible to rearrange the string in such a way that no two adjacent characters are the same, she wants to know that too. Write a function `rearrange_string` that takes in a string `s` and returns a rearranged version of the string where no two adjacent characters are the same. If it is not possible, the function should return an empty string. Input: - A single string `s` containing only lowercase English letters. Output: - A rearranged version of the string `s` where no two adjacent characters are the same, or an empty string if no such arrangement is possible. Constraints: - 1 ≤ len(s) ≤ 10^5 Example 1: Input: ``` aab ``` Output: ``` aba ``` Example 2: Input: ``` aaab ``` Output: ``` \\"\\" ```","solution":"from heapq import heappop, heappush from collections import Counter def rearrange_string(s): Rearranges the string such that no two adjacent characters are the same. If not possible, returns an empty string. # Count the frequency of each character count = Counter(s) # Form a max-heap based on character frequency max_heap = [] for char, freq in count.items(): heappush(max_heap, (-freq, char)) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heappop(max_heap) # Add the previous character back if it\'s frequency is non-zero if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) # Append the current character to the result result.append(char) # Update the previous character and decrease it\'s frequency prev_freq, prev_char = freq + 1, char rearranged_string = \'\'.join(result) # If the rearranged string length is the same as the original string if len(rearranged_string) == len(s): return rearranged_string else: return \\"\\""},{"question":"Given a matrix `mat` of size `n x m`, write a function `spiral_traversal(mat)` that returns the spiral order traversal of the matrix. The spiral order traversal of a matrix involves starting at the top-left corner and moving right, then down, then left, then up, and repeating these steps until all elements are visited. Here is an example: Input: ``` mat = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: `[1, 2, 3, 6, 9, 8, 7, 4, 5]` Note: - `n` and `m` will be in the range `[1, 100]`. - The elements of `mat` will be integers in the range `[-1000, 1000]`. Function Signature: ```python def spiral_traversal(mat: List[List[int]]) -> List[int]: ```","solution":"from typing import List def spiral_traversal(mat: List[List[int]]) -> List[int]: if not mat: return [] result = [] top, bottom, left, right = 0, len(mat), 0, len(mat[0]) while top < bottom and left < right: for i in range(left, right): result.append(mat[top][i]) top += 1 for i in range(top, bottom): result.append(mat[i][right - 1]) right -= 1 if top < bottom: for i in range(right - 1, left - 1, -1): result.append(mat[bottom - 1][i]) bottom -= 1 if left < right: for i in range(bottom - 1, top - 1, -1): result.append(mat[i][left]) left += 1 return result"},{"question":"You are given an unsorted list of integers and your task is to find the smallest missing positive integer from the list. Implement a function `findSmallestMissingPositive()` that takes a list of integers as input and returns the smallest missing positive integer. Example: Input: [-2, 3, 7, 1, 2, 8] Output: 4 Explanation: The smallest missing positive integer among the list is 4. Example 2: Input: [1, 2, 3, 4, 5] Output: 6 Explanation: The smallest missing positive integer is 6, as all numbers from 1 to 5 are present. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findSmallestMissingPositive(arr)` which takes an integer array `arr` as an input and returns an integer denoting the smallest missing positive integer. Constraints: - The length of the array will not exceed 100000. - The elements of the array are not necessarily within any range.","solution":"def findSmallestMissingPositive(arr): Returns the smallest missing positive integer from the list. n = len(arr) # Mark elements that are out of the range of the length of the list for i in range(n): if arr[i] <= 0 or arr[i] > n: arr[i] = n + 1 # Use the index as a hash key and mark the presence of an integer for i in range(n): num = abs(arr[i]) if num <= n: arr[num - 1] = -abs(arr[num - 1]) # Find the first index that has a positive value for i in range(n): if arr[i] > 0: return i + 1 # If all indices have negative values return n + 1"},{"question":"The town of Algorithmsville has recently decided to build a network of communication towers to improve connectivity. Each tower can communicate with another tower if they are within a certain distance. The plan is to ensure that every pair of towers can communicate either directly or indirectly (i.e., via other towers). Given the locations of the towers, you are to determine the minimum maximum distance required for every tower to be able to communicate with every other tower either directly or indirectly. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of towers. The next n lines each contain two integers xi and yi (|xi|, |yi| ≤ 10000) — the coordinates of the towers. Output Output the minimum value of the maximum distance required for every pair of towers to be able to communicate directly or indirectly. Examples Input 4 0 0 0 2 2 0 2 2 Output 2 Input 3 0 0 3 4 6 0 Output 5","solution":"import math def calculate_distance(tower1, tower2): Function to calculate the Euclidean distance between two towers. return math.sqrt((tower1[0] - tower2[0]) ** 2 + (tower1[1] - tower2[1]) ** 2) def min_max_distance(tower_coords): Function to find the minimum value of the maximum distance required for every pair of towers to be able to communicate directly or indirectly. n = len(tower_coords) distances = [[calculate_distance(tower_coords[i], tower_coords[j]) for j in range(n)] for i in range(n)] # Prim\'s algorithm to find the Maximum Spanning Tree distance max_distance = 0 selected = [False] * n min_edge = [float(\'inf\')] * n min_edge[0] = 0 for _ in range(n): u = -1 for i in range(n): if not selected[i] and (u == -1 or min_edge[i] < min_edge[u]): u = i if min_edge[u] == float(\'inf\'): return float(\'inf\') selected[u] = True max_distance = max(max_distance, min_edge[u]) for v in range(n): if distances[u][v] < min_edge[v] and not selected[v]: min_edge[v] = distances[u][v] return max_distance def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) tower_coords = [] index = 1 for _ in range(n): x = int(data[index]) y = int(data[index+1]) tower_coords.append((x, y)) index += 2 result = min_max_distance(tower_coords) print(int(result))"},{"question":"Given a sorted array of N integers and a target value X, find the index of the first occurrence of the element that is greater than or equal to X. If all elements in the array are smaller than X, return -1. Example 1: Input: array = [1, 3, 5, 7] X = 5 Output: 2 Explanation: Element 5 is at index 2, which is the first occurrence of an element greater than or equal to 5. Example 2: Input: array = [1, 2, 4, 6] X = 3 Output: 2 Explanation: Element 4 at index 2 is the first occurrence of an element greater than or equal to 3. Example 3: Input: array = [1, 2, 3, 4] X = 5 Output: -1 Explanation: All elements in the array are smaller than 5. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findFirstGreaterOrEqual() which takes a sorted array and an integer X as input parameters and returns the index of the first occurrence of an element greater than or equal to X. If not found, return -1. Expected Time Complexity: O(log N) Expected Space Complexity: O(1) Constraints: 1 <= N <= 10^{5} -10^{9} <= array[i] <= 10^{9} -10^{9} <= X <= 10^{9}","solution":"def findFirstGreaterOrEqual(array, X): Returns the index of the first occurrence of an element greater than or equal to X in the sorted array. If no such element exists, returns -1. left, right = 0, len(array) - 1 result = -1 while left <= right: mid = left + (right - left) // 2 if array[mid] >= X: result = mid right = mid - 1 else: left = mid + 1 return result"},{"question":"Minimum Window Substring: Given two strings `S` and `T`, the task is to find the minimum window in `S` which will contain all the characters in `T` (including duplicates) in complexity O(n). Example: ``` Input: S = \\"ADOBECODEBANC\\", T = \\"ABC\\" Output: \\"BANC\\" ``` In the above example, the minimum window in S which contains all the characters of T is \\"BANC\\". **Function Signature:** ```python def min_window(s: str, t: str) -> str: # Your code here ``` **Constraints:** - If there is no such window in `S` that covers all characters in `T`, return an empty string. - If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in `S`. **Example 1:** ``` Input: S = \\"ADOBECODEBANC\\", T = \\"ABC\\" Output: \\"BANC\\" ``` **Example 2:** ``` Input: S = \\"a\\", T = \\"a\\" Output: \\"a\\" ``` **Example 3:** ``` Input: S = \\"a\\", T = \\"aa\\" Output: \\"\\" Explanation: T is longer than S, thus no window can cover all characters of T. ```","solution":"def min_window(s: str, t: str) -> str: from collections import Counter, defaultdict if not t or not s: return \\"\\" # Dictionary keeping track of how many letters of t we need to find in s dict_t = Counter(t) # Number of unique characters in t, which need to be present in the window required = len(dict_t) # Left and right pointers l, r = 0, 0 # Formed is when the window contains all characters in the required frequency formed = 0 # Dictionary to keep track of all the unique characters in the current window window_counts = defaultdict(int) # [window length, left, right] ans = float(\'inf\'), None, None while r < len(s): # Add one character from the right to the window character = s[r] window_counts[character] += 1 # If the number of current characters matches the desired count in t, increment the formed count if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 # Try and contract the window from the left till the point it ceases to be \'desirable\' while l <= r and formed == required: character = s[l] # Save the smallest window until now if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) # The character at the position pointed by the `left` pointer is no longer a part of the window. window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 # Move the left pointer ahead l += 1 # Keep expanding the window once we are done contracting r += 1 return \\"\\" if ans[0] == float(\'inf\') else s[ans[1]:ans[2] + 1]"},{"question":"Given an integer array `arr` of length `n` and an integer `k`, write a function that determines if there exists a contiguous subarray of length `k` that contains at least `m` distinct integers. If such a subarray exists, return \\"YES\\", otherwise return \\"NO\\". Input Format: - The first line contains an integer `T`, the number of test cases (1 ≤ T ≤ 10). - For each test case, the first line contains three integers `n`, `k`, and `m` (1 ≤ k ≤ n ≤ 10^5, 1 ≤ m ≤ k). - The second line contains `n` space-separated integers representing the array `arr` of length `n` (-10^9 ≤ arr[i] ≤ 10^9). Output Format: - For each test case, output a single line containing \\"YES\\" if there exists a contiguous subarray of length `k` with at least `m` distinct integers, otherwise output \\"NO\\". Example: Input: 2 5 3 2 1 2 3 4 5 7 3 3 5 5 5 5 5 5 5 Output: YES NO","solution":"def has_subarray_with_k_distinct(arr, n, k, m): Determines if there exists a contiguous subarray of length k that contains at least m distinct integers. if k < m: return \\"NO\\" distinct_count = {} current_distinct = 0 for i in range(k): if arr[i] not in distinct_count: distinct_count[arr[i]] = 0 if distinct_count[arr[i]] == 0: current_distinct += 1 distinct_count[arr[i]] += 1 if current_distinct >= m: return \\"YES\\" for i in range(k, n): new_elem = arr[i] old_elem = arr[i - k] if distinct_count[old_elem] == 1: current_distinct -= 1 distinct_count[old_elem] -= 1 if new_elem not in distinct_count: distinct_count[new_elem] = 0 if distinct_count[new_elem] == 0: current_distinct += 1 distinct_count[new_elem] += 1 if current_distinct >= m: return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): n, k, m, arr = test_cases[i] result = has_subarray_with_k_distinct(arr, n, k, m) results.append(result) return results"},{"question":"A software company is hosting a competitive coding event where participants need to solve a series of increasingly difficult programming problems. One of the challenges involves managing a simulated logistics network. In the simulation, there are multiple delivery drones, each capable of carrying a certain weight limit, and several orders, each represented by a weight. The goal is to determine if all orders can be delivered given the constraints of the drones. Each drone can make multiple trips to deliver the orders, but the combined weight of the orders on a single trip cannot exceed the drone’s weight limit. You need to devise an algorithm to figure out if it is possible to deliver all the orders using the available drones. -----Input----- The first line contains two integers d and o (1 leq d leq 10, 1 leq o leq 1000), denoting the number of drones and the number of orders respectively. The next d lines each contain a single integer w_i (1 leq w_i leq 1000), the weight limit of the i-th drone. The next o lines each contain a single integer p_j (1 leq p_j leq 1000), the weight of the j-th order. -----Output----- Output \\"possible\\" if all orders can be delivered using the available drones and under their respective weight limits. Otherwise, output \\"impossible\\". -----Examples----- Sample Input 1: 2 3 100 200 50 75 130 Sample Output 1: possible Sample Input 2: 1 3 100 50 60 80 Sample Output 2: impossible","solution":"def can_deliver_all_orders(d, o, weight_limits, order_weights): weight_limits.sort(reverse=True) order_weights.sort(reverse=True) for weight in order_weights: for i in range(d): if weight_limits[i] >= weight: weight_limits[i] -= weight break else: return \\"impossible\\" return \\"possible\\""},{"question":"problem Emily, an avid gardener, wants to create an automated irrigation system for her plants. The garden is represented as a rectangular grid with **N x M** cells, where each cell either contains a plant represented by `P`, or is empty represented by `E`. She installs sprinklers in certain cells, which are represented by `S`. Each sprinkler can water all four neighboring cells (up, down, left, right) directly. However, plant cells (`P`) block the sprinklers from watering through them to reach cells beyond. Your task is to determine if every plant in Emily\'s garden can be watered by at least one sprinkler. You need to write a program that takes the grid configuration as input and outputs \\"Yes\\" if all plants are watered, and \\"No\\" if there are any plants that cannot be reached by a sprinkler. # Input - The first line contains two integers N and M (2 ≤ N, M ≤ 100), representing the dimensions of the garden grid. - The following N lines each contain M characters, which will be either `P`, `E`, or `S`. # Output - Output a single line with \\"Yes\\" if all plants can be watered by at least one sprinkler, otherwise output \\"No\\". # Example Input ``` 4 4 EPEE SSPE EPPS EEEE ``` Output ``` Yes ``` Input ``` 3 5 EPPEE ESEEE EEPES ``` Output ``` No ``` # Explanation In the first example, all plants can be watered since there are sprinklers that reach every plant. In the second example, there are plants that cannot be watered because they are blocked by other plants, making it impossible for the sprinkler to reach them. # Note - The garden grid will contain at least one plant and at least one sprinkler. - Sprinklers can only water up, down, left, or right and are blocked by plants. Use appropriate algorithms to check the reachability of sprinklers to every plant efficiently, keeping in mind the constraints.","solution":"def can_water_all_plants(N, M, grid): Determine if every plant in Emily\'s garden can be watered by at least one sprinkler. def is_watered_by_sprinkler(x, y): # Check if the plant (x, y) can be watered by any sprinklers in the up, down, left, right directions # check up direction i = x - 1 while i >= 0: if grid[i][y] == \'P\': break if grid[i][y] == \'S\': return True i -= 1 # check down direction i = x + 1 while i < N: if grid[i][y] == \'P\': break if grid[i][y] == \'S\': return True i += 1 # check left direction j = y - 1 while j >= 0: if grid[x][j] == \'P\': break if grid[x][j] == \'S\': return True j -= 1 # check right direction j = y + 1 while j < M: if grid[x][j] == \'P\': break if grid[x][j] == \'S\': return True j += 1 return False for i in range(N): for j in range(M): if grid[i][j] == \'P\' and not is_watered_by_sprinkler(i, j): return \\"No\\" return \\"Yes\\""},{"question":"A sequence of integers is said to be \\"perfectly balanced\\" if the number of even integers is equal to the number of odd integers in every prefix and suffix of any length. For example, the sequence [2, 1, 4, 3] is perfectly balanced because every possible prefix and suffix maintains an equal number of even and odd integers. Given an integer array, your task is to determine whether it can be made perfectly balanced by rearranging its elements. If yes, output \\"YES\\"; otherwise, output \\"NO\\". -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. -----Output----- Print \\"YES\\" if the array can be rearranged to be perfectly balanced, otherwise print \\"NO\\". -----Examples----- Input 4 2 1 4 3 Output YES Input 5 1 3 2 4 5 Output NO Input 6 1 3 5 2 4 6 Output YES","solution":"def perfectly_balanced(arr): Function to check if the array can be rearranged to be perfectly balanced. even_count = len([x for x in arr if x % 2 == 0]) odd_count = len(arr) - even_count return \\"YES\\" if even_count == odd_count else \\"NO\\""},{"question":"Write a program to determine the longest common subsequence (LCS) between two strings. The function should return the length of the LCS as an integer. Input The input contains two lines. Each line contains a string of uppercase English letters. Output Output the length of the longest common subsequence as an integer. Example Input: AGGTAB GXTXAYB Output: 4 Input: ABC AC Output: 2","solution":"def lcs(X, Y): Returns the length of the longest common subsequence between two strings X and Y. m = len(X) n = len(Y) # Create a 2D table to store lengths of longest common subsequence. L = [[0] * (n + 1) for _ in range(m + 1)] # Build the table in bottom-up fashion. for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i - 1] == Y[j - 1]: L[i][j] = L[i - 1][j - 1] + 1 else: L[i][j] = max(L[i - 1][j], L[i][j - 1]) # L[m][n] contains the length of LCS for X[0..m-1], Y[0..n-1] return L[m][n]"},{"question":"Given an array of integers arr and several queries, each query contains a value X. For each query, find the index of the first occurrence of the number X in the array. If the number X does not exist in the array, return -1. Example 1: Input: arr = [4, 2, 1, 5, 2, 3, 1] Query = [2, 5, 7] Output: {1, 3, -1} Explanation: For the first query, the number 2 first occurs at index 1. For the second query, the number 5 first occurs at index 3. For the third query, the number 7 does not occur in the array, so the output is -1. Your Task: You don\'t need to read or print anything. Your task is to complete the function SolveIndexQueries() which takes arr and Query as input parameters and returns a list containing the answer for each query. Expected Time Complexity: O(No of Queries * length of arr) Expected Space Complexity: O(length of arr) Constraints: 1 <= |arr| <= 10^5 1 <= No of Queries <= 10^4 1 <= arr[i], X <= 10^5","solution":"def SolveIndexQueries(arr, queries): Returns a list containing the index of the first occurrence of each query value in arr. If the query value does not exist in arr, returns -1 for that query. result = [] for q in queries: try: index = arr.index(q) except ValueError: index = -1 result.append(index) return result"},{"question":"Alice and Bob are playing a game with two piles of stones. The rules of the game are as follows: - Alice always starts first. - On each player\'s turn, they can remove any positive number of stones from one of the piles, or the same number of stones from both piles. - The player who cannot make a valid move loses the game. Given the initial number of stones in both piles for multiple test cases, you need to determine the winner of each game if both Alice and Bob play optimally. ------ Input Format ------ - The first line of the input contains an integer T representing the number of test cases. - Each of the next T lines contains two integers A and B representing the initial number of stones in the first and second pile, respectively. ------ Output Format ------ For each test case, output a single line containing \\"ALICE\\" if Alice will win the game, and \\"BOB\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ A, B ≤ 10^{9} ----- Sample Input 1 ------ 3 1 2 2 2 5 9 ----- Sample Output 1 ------ BOB ALICE BOB ----- Explanation 1 ------ Test case 1: Alice will remove 1 stone from the first pile, leaving the piles as (0, 2). Bob will then remove both stones from the second pile, leaving Alice with no valid moves. Thus, Bob wins. Test case 2: Alice can remove both stones from each pile in her first move, leaving the piles as (0, 0). There are no moves left for Bob, so Alice wins. Test case 3: Regardless of the sequence of optimal moves, Bob will end up winning the game.","solution":"def find_winner(T, test_cases): Determines the winner of each game based on the initial number of stones in both piles. Args: T : int : number of test cases test_cases : list of tuple : initial number of stones in the first and second pile for each test case Returns: list of str : list with \\"ALICE\\" or \\"BOB\\" for each game. results = [] for A, B in test_cases: if (A ^ B) == 0: # If A and B are the same (A XOR B = 0), Alice wins results.append(\\"ALICE\\") else: results.append(\\"BOB\\") return results"},{"question":"You are given a simplified version of a resource allocation system where resources are checked out and returned by users. Write a program that simulates this system and keeps track of the resources allocated to each user. --------------------------------- You will be given a set of events in the form of tuples where each tuple will contain the event type (either \\"CHECKOUT\\" or \\"RETURN\\"), a user ID, and a resource ID. The input will be an array of such tuples, and the output should be a dictionary where the keys are user IDs and the values are sets of resource IDs currently checked out by that user. If a user tries to return a resource they have not checked out or check out a resource already checked out by someone else, the program should ignore that event. # Example Input: [(\\"CHECKOUT\\", \\"user1\\", \\"res1\\"), (\\"CHECKOUT\\", \\"user2\\", \\"res2\\"), (\\"RETURN\\", \\"user1\\", \\"res1\\"), (\\"RETURN\\", \\"user2\\", \\"res3\\"), (\\"CHECKOUT\\", \\"user2\\", \\"res1\\")] # Example Output: { \\"user2\\": {\\"res2\\", \\"res1\\"} } --------------------------------- Explanation of the Example: 1. (\\"CHECKOUT\\", \\"user1\\", \\"res1\\") - User \\"user1\\" checks out resource \\"res1\\". Result: `{\\"user1\\": {\\"res1\\"}}` 2. (\\"CHECKOUT\\", \\"user2\\", \\"res2\\") - User \\"user2\\" checks out resource \\"res2\\". Result: `{\\"user1\\": {\\"res1\\"}, \\"user2\\": {\\"res2\\"}}` 3. (\\"RETURN\\", \\"user1\\", \\"res1\\") - User \\"user1\\" returns resource \\"res1\\". Result: `{\\"user2\\": {\\"res2\\"}}` (user1 no longer has any resources checked out) 4. (\\"RETURN\\", \\"user2\\", \\"res3\\") - User \\"user2\\" tries to return resource \\"res3\\" which they have not checked out. Result: No changes. 5. (\\"CHECKOUT\\", \\"user2\\", \\"res1\\") - User \\"user2\\" checks out the now available resource \\"res1\\". Result: `{\\"user2\\": {\\"res2\\", \\"res1\\"}}` Constraints: - `user ID` will always be a non-empty string. - `resource ID` will always be a non-empty string. - The input array can contain up to `10^6` events.","solution":"def allocate_resources(events): Simulates a resource allocation system. :param events: List of tuples, where each tuple contains an event type (\\"CHECKOUT\\"/\\"RETURN\\"), a user ID, and a resource ID. :return: Dictionary where keys are user IDs and values are sets of resource IDs currently checked out by that user. user_resources = {} resource_owner = {} for event in events: event_type, user_id, resource_id = event if event_type == \\"CHECKOUT\\": # Check if resource is already checked out if resource_id not in resource_owner: if user_id not in user_resources: user_resources[user_id] = set() user_resources[user_id].add(resource_id) resource_owner[resource_id] = user_id elif event_type == \\"RETURN\\": # Check if the user has this resource checked out if user_id in user_resources and resource_id in user_resources[user_id]: user_resources[user_id].remove(resource_id) del resource_owner[resource_id] if not user_resources[user_id]: # Clean up user entry if no resources left del user_resources[user_id] return user_resources"},{"question":"Given a matrix of size N x M, with each cell containing an integer, the task is to find the sum of all elements in any submatrix within the given matrix. The submatrix is defined by its top-left corner (r1, c1) and bottom-right corner (r2, c2). Example 1: Input: matrix: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] r1 = 0, c1 = 0, r2 = 1, c2 = 1 Output: 12 Explanation: Sum of the submatrix from (0, 0) to (1, 1) is 1 + 2 + 4 + 5 = 12. Example 2: Input: matrix: [ [1, 2], [3, 4] ] r1 = 1, c1 = 0, r2 = 1, c2 = 1 Output: 7 Explanation: Sum of the submatrix from (1, 0) to (1, 1) is 3 + 4 = 7. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfSubmatrix(matrix, r1, c1, r2, c2) which takes the matrix and the coordinates r1, c1, r2, c2 as inputs and returns the sum of the elements in the defined submatrix. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N, M ≤ 1000 -10^9 ≤ matrix[i][j] ≤ 10^9 0 ≤ r1 ≤ r2 < N 0 ≤ c1 ≤ c2 < M","solution":"def sumOfSubmatrix(matrix, r1, c1, r2, c2): Returns the sum of all elements in the submatrix defined by the top-left corner (r1, c1) and the bottom-right corner (r2, c2). total_sum = 0 for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): total_sum += matrix[i][j] return total_sum"},{"question":"You are given a directed graph with n nodes and n edges forming exactly one cycle, and each node is labeled with a unique integer from 1 to n. Your task is to handle the following two types of queries: 1. Given two nodes u and v, swap their labels. 2. Given two nodes u and v, find the labels of the nodes along the shortest path from u to v and return the maximum label among them. Input The first line contains an integer n (3 ≤ n ≤ 2 ⋅ 10^5) — the number of nodes in the graph. The second line contains n integers — l_1, l_2, ..., l_n (1 ≤ l_i ≤ n) — the labels of the nodes, initially set in the node order. The next n lines contain two integers each u and v (1 ≤ u, v ≤ n) — the directed edges forming the graph. The following q lines contain the description of queries (1 ≤ q ≤ 2 ⋅ 10^5): Each of the next q lines starts with an integer t (1 or 2) — the type of query: 1. If t = 1, the line also contains two integers u and v — the indices of the nodes whose labels should be swapped. 2. If t = 2, the line also contains two integers u and v (1 ≤ u, v ≤ n) — the indices of the nodes, you need to find the maximum label along the shortest path from u to v. Output For each type 2 query, print the maximum label in a new line. Examples Input 6 1 2 3 4 5 6 1 2 2 3 3 4 4 5 5 6 6 1 3 2 1 4 1 4 6 2 1 4 Output 4 6 Note In the first query, the shortest path from node 1 to node 4 goes through nodes 1, 2, 3, and 4. The labels on this path are {1, 2, 3, 4}, and the maximum is 4. In the second query, we swap the labels of node 4 with node 6: the labels become {1, 2, 3, 6, 5, 4}. In the third query, with the new labels, the shortest path from node 1 to node 4 has labels {1, 2, 3, 6}, and the maximum is 6.","solution":"def handle_queries(n, labels, edges, queries): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def swap_labels(u, v): labels[u-1], labels[v-1] = labels[v-1], labels[u-1] def bfs_max_label(u, v): visited = set() queue = deque([(u, labels[u-1])]) visited.add(u) max_label = labels[u-1] while queue: node, current_max = queue.popleft() if node == v: return current_max for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, max(current_max, labels[neighbor-1]))) return -1 # should not reach here if u and v are valid result = [] for query in queries: t, u, v = query if t == 1: swap_labels(u, v) elif t == 2: result.append(bfs_max_label(u, v)) return result"},{"question":"Write a function `merge_dicts` which takes two dictionaries as inputs. The function should return a new dictionary containing all key-value pairs from both dictionaries. If a key exists in both dictionaries, the value from the second dictionary should be used. The order of the keys in the resultant dictionary does not matter.","solution":"def merge_dicts(dict1, dict2): Merges two dictionaries. When a key exists in both dictionaries, the value from the second dictionary is used. :param dict1: First dictionary :param dict2: Second dictionary :return: Merged dictionary merged_dict = dict1.copy() merged_dict.update(dict2) return merged_dict"},{"question":"A company is developing a mapping application and wants to ensure that its users can find the shortest routes between various landmarks. To do this, they need to implement an efficient algorithm for finding the shortest path in a weighted graph. The application must handle multiple queries for pathfinding in a large, connected graph. Each query consists of a source and destination pair, and the task is to find the shortest path from the source to the destination, considering the weights on the edges. You will be given a set of nodes, edges with weights, and a list of queries. Your task is to process each query and output the length of the shortest path for each. Input The first line contains two integers, n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 500), representing the number of nodes and the number of edges in the graph, respectively. The next m lines each contain three integers, u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100), representing an edge between nodes u and v with weight w. Edges are bidirectional. The next line contains an integer q (1 ≤ q ≤ 100), representing the number of queries. The next q lines each contain two integers, a and b (1 ≤ a, b ≤ n), representing the source node and the destination node of the query. Output For each query, output a single integer on a new line - the length of the shortest path between the source and the destination. If there is no path, output -1. Example Input 4 5 1 2 1 2 3 2 1 3 4 3 4 1 2 4 5 3 1 4 4 1 2 3 Output 4 4 2 Note: Be sure to handle graphs where some node pairs may be unreachable from each other. Also, consider using an algorithm like Dijkstra\'s to efficiently handle the shortest path calculations.","solution":"import heapq from collections import defaultdict, deque def dijkstra(graph, start, n): distances = {node: float(\'inf\') for node in range(1, n+1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_path(n, m, edges, queries): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for a, b in queries: if a == b: results.append(0) else: distances = dijkstra(graph, a, n) result = distances[b] if distances[b] != float(\'inf\') else -1 results.append(result) return results"},{"question":"You are given a string consisting of lowercase letters and integers. Your task is to sort the letters in alphabetical order and the integers in numerical order while preserving their relative positions. Return the resulting string where letters and integers remain separated. Example: For the input string \\"a3c1b2\\", the output should be \\"abc123\\". Follow up: Can you achieve this with a time complexity of O(n log n) and space complexity of O(n)? Implement a solution without using any built-in sorting functions. Provide a suitable solution in a language of your choice. Credits: Special thanks to @maxcoder for suggesting this problem and adding all test cases.","solution":"def sort_string(s): Sorts the letters in alphabetical order and the integers in numerical order while preserving their relative positions. Parameters: s (str): The input string consisting of lowercase letters and integers. Returns: str: The resulting string where letters and integers remain separated and sorted. letters = sorted([ch for ch in s if ch.isalpha()]) digits = sorted([ch for ch in s if ch.isdigit()]) sorted_str = \'\'.join(letters + digits) return sorted_str"},{"question":"Chris wants to create a sequence of integers where the sum of each prefix is unique. That is, for any two different prefixes of the sequence, the sum of the elements in these prefixes should not be the same. Given an integer n, help Chris determine if it is possible to create such a sequence of length n, and if possible, provide one such sequence. -----Constraints----- - 1 leq n leq 10^5 -----Input----- Input is given from Standard Input in the following format: n -----Output----- If it is possible to create such a sequence, print \\"YES\\" on the first line, followed by the sequence of n integers on the second line. If it is not possible to create such a sequence, print \\"NO\\". -----Sample Input 1----- 3 -----Sample Output 1----- YES 1 2 3 The given sequence has unique prefix sums: [1], [1+2=3], [1+2+3=6]. -----Sample Input 2----- 4 -----Sample Output 2----- YES 1 2 4 7 The given sequence has unique prefix sums: [1], [1+2=3], [1+2+4=7], [1+2+4+7=14]. -----Sample Input 3----- 100000 -----Sample Output 3----- YES 1 2 4 8 16 32 64 128 256 512 1024 ... (continues with powers of 2 up to n terms)","solution":"def unique_prefix_sum_sequence(n): Determines if it is possible to create a sequence of length n where each prefix sum is unique. Returns the sequence if possible, otherwise prints \\"NO\\". # For any positive integer n, this problem can be solved by using the sequence of powers of 2 # because each prefix sum will be unique (sum of all previous + the next power of 2). if n < 1: return \\"NO\\" sequence = [2**i for i in range(n)] return \\"YES\\", sequence"},{"question":"Given a list of integers representing elevations of a terrain, calculate the amount of water that can be trapped after raining. Water is trapped where there are dips in the terrain, between higher elevations on each side. Write a function to compute the total amount of trapped water. INPUT The first line contains a single integer T - the number of test cases. Each of the next T lines contains an integer N (the number of elements in the elevation array), followed by N integers representing the elevation heights. OUTPUT For each test case, output a single integer representing the total amount of trapped water. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 0 ≤ elevation height ≤ 10^4 SAMPLE INPUT 2 6 0 1 0 2 1 0 1 3 2 1 2 1 4 3 0 0 2 SAMPLE OUTPUT 6 6 Explanation: - In the first test case, 6 units of water are trapped in the dips between the elevations. - In the second test case, 6 units of water are trapped between the two 3-height walls.","solution":"def calculate_trapped_water(elevations): if not elevations: return 0 n = len(elevations) left_max = [0] * n right_max = [0] * n left_max[0] = elevations[0] for i in range(1, n): left_max[i] = max(left_max[i-1], elevations[i]) right_max[n-1] = elevations[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], elevations[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - elevations[i] return trapped_water def trapped_water_for_all_cases(T, test_cases): results = [] for elevations in test_cases: results.append(calculate_trapped_water(elevations)) return results"},{"question":"You are working on a software project that requires a simple cache. You decide to implement a Least Recently Used (LRU) Cache, which evicts the least recently used item when the cache reaches its maximum capacity. The cache should support the following operations: get and put. - get(key) - Returns the value (will always be positive) of the key if the key exists in the cache, otherwise returns -1. - put(key, value) - Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key. Your task is to implement the LRU Cache with a given capacity. -----Input----- The input consists of a sequence of commands and their arguments. Each command is either \\"get\\" or \\"put\\". - The first line contains an integer, the maximum capacity of the cache. - Each of the subsequent lines contains a command in the format: - \\"get key\\" where key is an integer - \\"put key value\\" where key and value are integers -----Output----- For each \\"get\\" command, output the result on a new line. For the \\"put\\" command, you do not need to output anything. -----Example----- Sample Input: 2 put 1 1 put 2 2 get 1 put 3 3 get 2 put 4 4 get 1 get 3 get 4 Sample Output: 1 -1 -1 3 4","solution":"class LRUCache: def __init__(self, capacity: int): self.cache = {} self.capacity = capacity self.order = [] def get(self, key: int) -> int: if key in self.cache: # Refresh the key as it is recently used self.order.remove(key) self.order.append(key) return self.cache[key] return -1 def put(self, key: int, value: int) -> None: if key in self.cache: # Update existing key and mark it as recently used self.cache[key] = value self.order.remove(key) self.order.append(key) else: if len(self.cache) >= self.capacity: # Evict the least recently used item lru_key = self.order.pop(0) del self.cache[lru_key] # Add new key-value pair self.cache[key] = value self.order.append(key) def process_commands(capacity, commands): result = [] cache = LRUCache(capacity) for command in commands: cmd = command.split() if cmd[0] == \'get\': result.append(cache.get(int(cmd[1]))) elif cmd[0] == \'put\': cache.put(int(cmd[1]), int(cmd[2])) return result"},{"question":"Given an array of integers `arr` and an integer `k`, find the `k` most frequent elements in the array. If there is a tie in frequency, the larger element should come first. Examples: Input: arr = [1,1,1,2,2,3], k = 2 Output: [1, 2] Explanation: The two most frequent elements are 1 and 2. Input: arr = [4,4,4,4,5,5,5,2,2,3], k = 3 Output: [4, 5, 2] Explanation: The three most frequent elements are 4, 5, and 2. Input: arr = [1,2,3,4,5], k = 1 Output: [1] Explanation: All elements are unique, but the larger element should come first if there is a tie. Your Task: You don\'t need to read or print anything. Your task is to complete the function `topKFrequent` which takes the array `arr` and integer `k` as input parameters and returns a list of integers which are the `k` most frequent elements in the array. Expected Time Complexity: O(n log n), where n is the number of elements in the array. Expected Space Complexity: O(n) Constraints: 1 ≤ arr.length ≤ 1000 -10^4 ≤ arr[i] ≤ 10^4 1 ≤ k ≤ arr.length","solution":"from collections import Counter def topKFrequent(arr, k): Returns the k most frequent elements in the array. If there is a tie in frequency, the larger element should come first. if not arr: return [] # Count the frequency of each element frequency = Counter(arr) # Create a list of elements sorted by frequency and then by value sorted_elements = sorted(frequency.keys(), key=lambda x: (-frequency[x], -x)) # Return the top k elements return sorted_elements[:k]"},{"question":"Given a list of integers, determine if it is possible to partition the list into two subsets such that the sum of the elements in both subsets is the same. If it is possible, return `True`, otherwise return `False`. Function Signature: ```python def can_partition(nums: List[int]) -> bool: ``` # Input: - An integer list `nums` where the length of the list is between `1` and `100` (inclusive) and each element in the list is between `1` and `1000` (inclusive). # Output: - Return `True` if it is possible to partition the list into two subsets with equal sum, otherwise return `False`. # Example: Input: ```python nums = [1, 5, 11, 5] ``` Output: ```python True ``` Explanation: - The list can be partitioned as [1, 5, 5] and [11]. Input: ```python nums = [1, 2, 3, 5] ``` Output: ```python False ``` Explanation: - The list cannot be partitioned into two subsets with equal sum. # Constraints: - The length of the input list should be between `1` and `100` (inclusive). - Each integer in the list should be between `1` and `1000` (inclusive). Implementation Notes: - Consider using dynamic programming to solve this problem, iterating through potential subset sums up to half of the total sum of the input list, as finding a subset summing to half guarantees that the other subset\'s sum is also half.","solution":"from typing import List def can_partition(nums: List[int]) -> bool: total = sum(nums) # If the total sum is odd, it can\'t be partitioned into two equal subsets if total % 2 != 0: return False target = total // 2 n = len(nums) # Create a DP array where dp[i] means that a subset sum of \'i\' is possible dp = [False] * (target + 1) dp[0] = True # There is always a subset with sum 0 (empty subset) for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"A mining company has a valuable stone that is divided into n sections, each represented by an integer value denoting its worth. They plan to maximize their profit by mining a contiguous segment of the stone, meaning they can choose any segment of sections from the stone. However, due to mining constraints, they must select a segment that consists of at least k sections and at most l sections. Your task is to determine the maximum possible profit they can achieve by mining a valid segment. -----Input----- - The first line contains a single integer n denoting the number of sections in the stone. - The second line contains n space-separated integers representing the worth of each section. - The third line contains two integers k and l, denoting the minimum and maximum number of sections that can be mined. -----Output----- Print a single integer which is the maximum profit they can achieve given the constraints. -----Constraints----- - 1 le n le 100,000 - -10^4 le text{value of each section} le 10^4 - 1 le k le l le n -----Subtasks----- Subtask #1 (20 points): - n le 100 Subtask #2 (80 points): original constraints -----Example Input----- 8 4 -1 2 1 6 -3 3 4 3 5 -----Example Output----- 14 -----Explanation----- Example case: The subsequence with the maximum sum that has between 3 and 5 sections is [4, -1, 2, 1, 6], which sums to 12. Another valid subsequence is [2, 1, 6, -3, 3], which sums to 9. The maximum profit is achieved with the subsequence [4, -1, 2, 1, 6], thus the output is 12.","solution":"def max_possible_profit(n, worths, k, l): # Initialize the max_profit to negative infinity max_profit = float(\'-inf\') # Calculate prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + worths[i - 1] # Loop to find the maximum profit for a valid segment with length in [k, l] for i in range(n): for j in range(i + k, min(i + l, n) + 1): current_sum = prefix_sums[j] - prefix_sums[i] max_profit = max(max_profit, current_sum) return max_profit"},{"question":"Alex has a collection of strings and he likes them to be unique and sorted alphabetically. He is planning to create a new string collection from the original one such that all the strings are unique and the new collection is sorted alphabetically. Your task is to write a program that takes a list of strings and returns a list of strings that are unique and sorted alphabetically. -----Input----- The input contains an integer n (1 ≤ n ≤ 100000) which represents the number of strings in the list, followed by n lines each containing one string. Each string consists of lowercase English letters and its length is at most 100. -----Output----- Output the new sorted list of unique strings, each string on a new line. -----Examples----- Input 6 apple banana apple orange banana grape Output apple banana grape orange Input 5 cat dog elephant ant cat Output ant cat dog elephant -----Note----- In the first example, after removing the duplicates from the list of strings [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"grape\\"], we get [\\"apple\\", \\"banana\\", \\"orange\\", \\"grape\\"]. After sorting them alphabetically, the result is [\\"apple\\", \\"banana\\", \\"grape\\", \\"orange\\"].","solution":"def unique_sorted_strings(n, string_list): Returns a list of unique strings sorted alphabetically unique_strings = set(string_list) sorted_strings = sorted(list(unique_strings)) return sorted_strings"},{"question":"You are tasked with managing a robotic vacuum cleaner in a large rectangular room with obstacles. The room is divided into an N x M grid. The vacuum starts at position (sx, sy) and should finish cleaning every accessible cell in the grid, avoiding the obstacles, and returning to the starting position. The vacuum cleaner can move up, down, left, or right but cannot move diagonally. Each cell in the grid can either be empty or contain an obstacle. Obstacles are impassable. You need to write a program to navigate the vacuum cleaner and print each movement to ensure that every accessible cell is visited at least once, and the vacuum returns to the starting point. The program should minimize the number of moves. # Input Format - The first line contains three integers N, M, and O (number of obstacles). - The second line contains two integers sx and sy (starting coordinates of the vacuum). - The next O lines contain two integers each, representing the coordinates of the obstacles. # Output Format - Print \\"!\\" followed by a sequence of commands (U, D, L, R) representing the moves of the vacuum cleaner. The sequence should ensure that all accessible cells are visited at least once and the vacuum cleaner returns to its starting position. # Constraints - 1 ≤ N, M ≤ 50 - 0 ≤ O ≤ N × M - 1 ≤ sx ≤ N - 1 ≤ sy ≤ M - All coordinates and positions are 1-based. # Example Input ``` 5 5 3 2 2 3 3 4 4 5 2 ``` # Example Output ``` !URDDLULUURRDDDLLUURR ``` # Explanation The vacuum cleaner should effectively navigate through the grid, avoiding obstacles and ensuring all cells, except for the obstacles, are visited at least once. The sequence \\"URDDLULUURRDDDLLUURR\\" would represent a possible path to achieve this. Note that the exact sequence may vary as long as the criteria are met.","solution":"def find_cleaning_path(N, M, O, sx, sy, obstacles): Find a sequence of moves to clean the room with a robotic vacuum cleaner, avoiding obstacles. # Converting 1-based index to 0-based index sx -= 1 sy -= 1 obstacles = {(x-1, y-1) for x, y in obstacles} moves = [] visited = [[False for _ in range(M)] for _ in range(N)] def valid(x, y): return 0 <= x < N and 0 <= y < M and (x, y) not in obstacles def dfs(x, y): if not valid(x, y) or visited[x][y]: return visited[x][y] = True for (dx, dy, m) in [(0, 1, \'R\'), (1, 0, \'D\'), (0, -1, \'L\'), (-1, 0, \'U\')]: nx, ny = x + dx, y + dy if valid(nx, ny) and not visited[nx][ny]: moves.append(m) dfs(nx, ny) moves.append({\'R\': \'L\', \'L\': \'R\', \'U\': \'D\', \'D\': \'U\'}[m]) moves.append(\\"!\\") dfs(sx, sy) return \'\'.join(moves)"},{"question":"A string is considered \\"balanced\\" if the number of occurrences of \'a\' is equal to the number of occurrences of \'b\'. Given a string containing only the characters \'a\' and \'b\', write a function that determines if the string is balanced. Return true if the string is balanced, and false otherwise. Example 1: Input: \\"ab\\" Output: true Example 2: Input: \\"aabb\\" Output: true Example 3: Input: \\"aab\\" Output: false","solution":"def is_balanced(s): Checks if the string s is balanced, meaning the number of occurrences of \'a\' is equal to the number of occurrences of \'b\'. :param s: str - Input string containing only \'a\' and \'b\'. :return: bool - True if the string is balanced, False otherwise. return s.count(\'a\') == s.count(\'b\')"},{"question":"You are developing a home automation system that includes a thermostat for controlling room temperature. However, the thermostat only accepts temperatures in the Kelvin scale, while users typically enter temperatures in degrees Celsius. Write a function, `celsius_to_kelvin()`, that converts a given temperature in degrees Celsius to Kelvin. For reference, the formula for converting Celsius to Kelvin is: [ K = C + 273.15 ] For example: `celsius_to_kelvin(25)` should return `298.15`.","solution":"def celsius_to_kelvin(celsius): Converts a given temperature from Celsius to Kelvin. Parameters: celsius (float): Temperature in degrees Celsius. Returns: float: Temperature in Kelvin. return celsius + 273.15"},{"question":"There are M friends, and each friend needs a certain amount of money. A wealthy donor decides to help these friends but only in a specific way. He sets up a system where he will provide support to two friends at a time if the sum of their required amounts exactly matches a given target amount T. Your task is to identify all unique pairs of friends who can be helped together based on this system. Example 1: Input: M = 4, T = 100 Amounts[] = {40, 60, 10, 90, 50} Output: {40, 60}, {10, 90} Explanation: The pairs (40, 60) and (10, 90) sum up to the target amount 100. Example 2: Input: M = 5, T = 50 Amounts[] = {5, 45, 20, 25, 30} Output: {5, 45}, {20, 30} Explanation: The pairs (5, 45) and (20, 30) sum up to the target amount 50. Your task: You don\'t need to read input or print anything. Your task is to complete the function findPairs() which takes the array of integers amounts, an integer M representing the number of friends, and an integer T representing the target amount. The function should return a list of tuples, where each tuple consists of two integers representing the amount each of the two friends required. Ensure that each pair of friends is represented only once in the output. Expected Time Complexity: O(MlogM) Expected Auxiliary Space: O(1) Constraints: 1 <= M <= 10^4 0 <= Amounts[i] <= 10^6","solution":"def findPairs(amounts, M, T): Returns a list of tuples where each tuple consists of two integers representing the amounts that sum up to the target T. # List to store the result pairs result = [] # Sorting the amounts array amounts.sort() # Two pointers approach left = 0 right = M - 1 while left < right: current_sum = amounts[left] + amounts[right] if current_sum == T: result.append((amounts[left], amounts[right])) left += 1 right -= 1 elif current_sum < T: left += 1 else: right -= 1 return result"},{"question":"Determine if a word is an anagram of any prefix of another word. Given two words `prefix` and `txt`, check if any anagram of `prefix` is a prefix of `txt`. Return True if there is an anagram of `prefix` that is a prefix of `txt`, otherwise return False. Example 1: Input: txt = \'cbaebabacd\' prefix = \'abc\' Output: True Explanation: \'cba\' is an anagram of \'abc\' and is a prefix of \'cbaebabacd\'. Example 2: Input: txt = \'efgdtwxyz\' prefix = \'wxyz\' Output: False Explanation: None of the prefixes of \'efgdtwxyz\' are anagrams of \'wxyz\'. Your Task: Complete the function `isAnagramPrefix()` which takes two strings `prefix` and `txt`, as input parameters and returns a boolean denoting the answer. You don\'t need to print the answer or take inputs. Expected Time Complexity: O(N) Expected Auxiliary Space: O(26) or O(256) Constraints: 1 <= |prefix| <= |txt| <= 10^{5} Both strings contain lowercase English letters.","solution":"from collections import Counter def isAnagramPrefix(prefix, txt): Determines if any anagram of \'prefix\' is a prefix of \'txt\'. Args: prefix (str): The string which an anagram is derived from. txt (str): The string to check against. Returns: bool: True if an anagram of \'prefix\' is a prefix of \'txt\', False otherwise. n, m = len(txt), len(prefix) if m > n: return False prefix_counter = Counter(prefix) window_counter = Counter(txt[:m]) if prefix_counter == window_counter: return True return False"},{"question":"In a bustling office, a manager decides to implement a new system to track employee work hours. Each employee has an ID and logs their entry and exit times in a 24-hour format (HH:MM) throughout the day. The system needs to calculate the total number of hours each employee worked in a day by taking into account multiple entry and exit pairs. An entry is always followed by an exit for the same employee before another entry is logged. It\'s guaranteed that all logs are in the correct order and no entry or exit logs are missing or misspelled. Your task is to write a program that processes these logs and outputs the total work hours for each employee in a structured format. -----Input----- Input starts with a line containing an integer 1 le N le 500 indicating the number of log entries. Each of the next N lines contains an employee ID (a string consisting of alphabets and digits without spaces), an action (\\"entry\\" or \\"exit\\"), and the time in a \\"HH:MM\\" formatted string. Actions for the same employee always come in pairs (entry followed by exit). -----Output----- For each unique employee ID, output the total work hours in the format \\"HH:MM\\". The output should list all employee IDs in the order they first appear in the input. -----Examples----- Sample Input 1: 4 emp01 entry 09:00 emp01 exit 17:00 emp02 entry 09:30 emp02 exit 18:00 Sample Output 1: emp01 08:00 emp02 08:30 Sample Input 2: 6 john entry 08:15 john exit 12:30 john entry 13:15 john exit 17:45 mary entry 09:00 mary exit 17:00 Sample Output 2: john 08:45 mary 08:00","solution":"def calculate_work_hours(entries): from datetime import datetime, timedelta logs = {} first_appearance = [] for entry in entries: emp_id, action, time_str = entry.split() time = datetime.strptime(time_str, \\"%H:%M\\") if emp_id not in logs: logs[emp_id] = {\\"entry\\": [], \\"exit\\": [], \\"total\\": timedelta()} first_appearance.append(emp_id) logs[emp_id][action].append(time) results = {} for emp_id in logs: total_duration = timedelta() for entry_time, exit_time in zip(logs[emp_id][\\"entry\\"], logs[emp_id][\\"exit\\"]): total_duration += (exit_time - entry_time) results[emp_id] = total_duration output = [] for emp_id in first_appearance: total_seconds = int(results[emp_id].total_seconds()) hours, remainder = divmod(total_seconds, 3600) minutes = remainder // 60 output.append(f\\"{emp_id} {hours:02}:{minutes:02}\\") return output"},{"question":"Design a function that simulates a simple banking system. The banking system should support creating accounts, depositing money, and withdrawing money. Each user account is identified by a unique account number. The function should print the final balance of an account when queried. -----Input:----- - First line will contain an integer Q, number of queries. Then the Q lines follow. - Each query can be of the following types: - \\"CREATE A\\" - Create a new account with the account number A with a balance of 0. - \\"DEPOSIT A X\\" - Deposit amount X into account A. - \\"WITHDRAW A X\\" - Withdraw amount X from account A, if the account has sufficient funds. - \\"BALANCE A\\" - Print the current balance of account A. -----Output:----- Print the balance of the account A for each \\"BALANCE\\" query. -----Constraints:----- - 1 leq Q leq 100000 - 1 leq A leq 1000000 - 1 leq X leq 10000 - Account balances are non-negative and transactions that result in negative balances should be canceled. -----Sample Input:----- 8 CREATE 123 DEPOSIT 123 500 WITHDRAW 123 100 BALANCE 123 CREATE 456 DEPOSIT 456 300 WITHDRAW 456 500 BALANCE 456 -----Sample Output:----- 400 300 -----EXPLANATION:----- Account 123 is created with an initial balance of 0, then 500 is deposited making the balance 500. 100 is then withdrawn making the balance 400. Account 456 is created with an initial balance of 0, then 300 is deposited making the balance 300. An attempt to withdraw 500 fails since the account does not have sufficient funds, so the balance remains 300.","solution":"def banking_system(queries): accounts = {} result = [] for query in queries: parts = query.split() command = parts[0] account = int(parts[1]) if command == \\"CREATE\\": accounts[account] = 0 elif command == \\"DEPOSIT\\": amount = int(parts[2]) if account in accounts: accounts[account] += amount elif command == \\"WITHDRAW\\": amount = int(parts[2]) if account in accounts and accounts[account] >= amount: accounts[account] -= amount elif command == \\"BALANCE\\": if account in accounts: result.append(accounts[account]) else: result.append(None) return result"},{"question":"# Scenario You are given a list of student exam scores and you need to identify which students have scored above a certain threshold, and which students scored below a different threshold. # Task Given an array of integers representing student scores, and two integer thresholds, high_threshold and low_threshold: - Return a tuple containing two lists: - The first list should contain the scores that are strictly greater than high_threshold. - The second list should contain the scores that are strictly less than low_threshold. # Notes * Array size is at least 1. * All scores are valid integers between 0 and 100. # Input >> Output Examples ``` filter_scores([90, 85, 70, 65, 50], 75, 60) => return ([90, 85], [50]) ``` Explanation: The scores greater than `75` are `[90, 85]`, and the scores less than `60` are `[50]`. ``` filter_scores([88, 76, 54, 45, 95], 80, 50) => return ([88, 95], [45]) ``` Explanation: The scores greater than `80` are `[88, 95]`, and the scores less than `50` are `[45]`. ``` filter_scores([50, 60, 70, 80, 90], 65, 55) => return ([70, 80, 90], [50]) ``` Explanation: The scores greater than `65` are `[70, 80, 90]`, and the scores less than `55` are `[50]`.","solution":"def filter_scores(scores, high_threshold, low_threshold): Returns two lists: - The first list contains scores greater than high_threshold. - The second list contains scores less than low_threshold. above_high = [score for score in scores if score > high_threshold] below_low = [score for score in scores if score < low_threshold] return (above_high, below_low)"},{"question":"Given a list of integers, implement a function to find the maximum possible sum of a subarray with the constraint that no two elements in the subarray are adjacent in the original array. ------ Input Format ------ - The first line of input contains a single integer N, the number of elements in the list. - The second line contains N space-separated integers representing the elements of the list. ------ Output Format ------ - Print a single integer denoting the maximum possible sum of the subarray abiding by the given constraints. ------ Constraints ------ 1 ≤ N ≤ 10^5 -10^4 ≤ text{Array Element} ≤ 10^4 ----- Sample Input 1 ------ 6 3 2 5 10 7 ----- Sample Output 1 ------ 15 ----- Explanation 1 ------ The maximum sum is obtained by choosing the subarray [3, 10, 7]. ----- Sample Input 2 ------ 5 3 2 7 10 12 ----- Sample Output 2 ------ 22 ----- Explanation 2 ------ The maximum sum is obtained by choosing the subarray [3, 7, 12].","solution":"def max_non_adjacent_sum(arr): Returns the maximum sum of a subarray such that no two elements are adjacent in the original array. if not arr: return 0 if len(arr) == 1: return max(0, arr[0]) inclusive = 0 exclusive = 0 for num in arr: new_exclusive = max(inclusive, exclusive) inclusive = exclusive + num exclusive = new_exclusive return max(inclusive, exclusive)"},{"question":"Given a binary tree, flatten it to a linked list in-place. For example, given the following tree: 1 / 2 5 / 3 4 6 The flattened tree should look like: 1 2 3 4 5 6","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flatten(root): Flattens a binary tree to a linked list in-place. if not root: return # Flatten the left and right subtree flatten(root.left) flatten(root.right) # Store the left and right nodes left = root.left right = root.right # Turn the left subtree into the right subtree root.left = None root.right = left # Find the end of the new right subtree p = root while p.right: p = p.right # Attach the original right subtree p.right = right"},{"question":"Problem description. Alice and Bob are playing a game with an array. The game starts with a non-empty array of positive integers. In each turn, they can pick any two adjacent elements and replace them with their sum. The game continues until only one element remains in the array. They observe that this final number depends on the order in which they perform their operations. Given the initial array, determine the smallest possible sum of the array when only one element remains. -----Input----- - The first line contains an integer T, denoting the number of test cases. - For each test case, the first line contains an integer N, the size of the array. - The second line contains N space-separated integers representing the initial array. -----Output----- - For each test case, print a single integer, the smallest possible sum of the array when only one element remains. -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 105 - 1 ≤ Array elements ≤ 109 - Sum of all N across test cases does not exceed 106 -----Example----- Input: 2 3 4 1 3 4 1 2 3 4 Output: 8 10 -----Explanation----- For the first test case: - First, combine 4 and 1 to get [5, 3] - Then combine 5 and 3 to get [8] So, the smallest sum is 8. For the second test case: - First, combine 1 and 2 to get [3, 3, 4] - Then combine 3 and 3 to get [6, 4] - Finally, combine 6 and 4 to get [10] Therefore, the smallest sum is 10.","solution":"def smallest_sum(arr): if not arr: return 0 # Sorting the initial array gives us the minimum possible sum arr.sort() while len(arr) > 1: # Combine the first two elements (smallest two elements) new_val = arr.pop(0) + arr.pop(0) # Append the sum back into the list arr.append(new_val) # Maintain sorted order arr.sort() return arr[0] def solve_smallest_sum(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] results.append(smallest_sum(arr)) return results"},{"question":"You are given a list of recipes and a list of available ingredients. Each recipe lists the ingredients required to prepare the dish. Your task is to determine if any complete set of dishes can be prepared, given the available ingredients. A dish can only be prepared if all of its required ingredients are available in the quantities specified. -----Input----- The first line contains an integer 1 le R le 100, the number of recipes. Each of the following R lines contains a recipe name, an integer N_i (number of ingredients required for that recipe), followed by N_i pairs (ingredient and its required quantity, a positive integer). Then follows an integer 1 le I le 100, the number of available ingredients. The next I lines each contain an ingredient and its available quantity (a positive integer). Recipes and ingredients names consist of alphanumeric characters, with a length between 1 and 20 characters. No two recipes or ingredients will share names. -----Output----- Output should consist of a single integer, the maximum number of complete recipes that can be prepared with the available ingredients. -----Examples----- Sample Input: 3 pasta 2 tomato 2 cheese 1 burger 2 bread 1 patty 2 salad 3 lettuce 1 tomato 1 dressing 1 5 bread 1 patty 2 tomato 3 cheese 1 lettuce 1 dressing 1 Sample Output: 2","solution":"def max_recipes(recipes, ingredients): from collections import defaultdict available = defaultdict(int) for ingredient, qty in ingredients: available[ingredient] += qty max_possible = 0 while True: can_prepare_any = False for recipe, req_ingredients in recipes: can_prepare = True for ingredient, qty in req_ingredients: if available[ingredient] < qty: can_prepare = False break if can_prepare: for ingredient, qty in req_ingredients: available[ingredient] -= qty can_prepare_any = True max_possible += 1 break if not can_prepare_any: break return max_possible def parse_input(input_str): lines = input_str.splitlines() R = int(lines[0]) recipes = [] index = 1 for _ in range(R): parts = lines[index].split() recipe_name = parts[0] num_ingredients = int(parts[1]) req_ingredients = [] for i in range(num_ingredients): ingredient_name = parts[2 + 2 * i] ingredient_qty = int(parts[3 + 2 * i]) req_ingredients.append((ingredient_name, ingredient_qty)) recipes.append((recipe_name, req_ingredients)) index += 1 I = int(lines[index]) ingredients = [] for i in range(I): parts = lines[index + 1 + i].split() ingredient_name = parts[0] ingredient_qty = int(parts[1]) ingredients.append((ingredient_name, ingredient_qty)) return recipes, ingredients"},{"question":"In a distant kingdom, the king has a collection of magical gemstones. Each gemstone is known to have a unique value that can be determined using a special formula related to its position in the sequence. The value of the i-th gemstone is given by V[i], and the king wants to find the maximum sum of values of any contiguous subsequence (subarray) of the gemstones. Given an array of integers representing the values of the gemstones, determine the maximum sum of any contiguous subsequence. -----Constraints----- - 1 leq N leq 10^5 - -10^4 leq V[i] leq 10^4 -----Input----- Input is given from Standard Input in the following format: N V1 V2 V3 ... VN -----Output----- Print the maximum sum of any contiguous subsequence of gemstones. -----Sample Input----- 5 1 -2 3 4 -5 -----Sample Output----- 7 The maximum sum is obtained from the subsequence [3, 4] which sums to 7.","solution":"def max_contiguous_subsequence_sum(values): Returns the maximum sum of any contiguous subsequence of the given list of values. max_ending_here = max_so_far = values[0] for x in values[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are given an array of integers which is sorted in ascending order and then rotated at an unknown pivot. Your task is to find the index of the minimum element in the array using the fewest number of comparisons. Input The first line of the input contains a single integer T (1 ≤ T ≤ 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer N (2 ≤ N ≤ 10^4) — the number of elements in the array. The second line of each test case contains N space-separated integers — the elements of the array. The integers in the array are distinct and lie between 1 and 10^9. Output For each test case, print a single line containing a single integer — the index of the minimum element in the array (0-based index). Example Input 3 5 4 5 1 2 3 7 3 4 5 6 7 1 2 3 2 3 1 Output 2 5 2 Note In the first test case, the original array might have been [1, 2, 3, 4, 5], which was rotated 3 places to the right, resulting in [4, 5, 1, 2, 3]. The index of the minimum element (1) is 2. In the second test case, the original array might have been [1, 2, 3, 4, 5, 6, 7], which was rotated 4 places to the right, resulting in [3, 4, 5, 6, 7, 1, 2]. The index of the minimum element (1) is 5. In the third test case, the original array might have been [1, 2, 3], which was rotated 1 place to the right, resulting in [2, 3, 1]. The index of the minimum element (1) is 2. In this problem, you need to achieve a logarithmic time complexity.","solution":"def find_min_index(nums): Function to find the index of the minimum element in a rotated sorted array. left, right = 0, len(nums) - 1 # Handle edge cases where the array is not rotated. if nums[left] < nums[right]: return left while left < right: mid = (left + right) // 2 if nums[mid] > nums[right]: left = mid + 1 else: right = mid return left def process_test_cases(T, test_cases): results = [] for i in range(T): N, array = test_cases[i] results.append(find_min_index(array)) return results"},{"question":"John is studying a geometric series in his math class and needs to write a program to help with his homework. A geometric series is defined by its first term (a) and common ratio (r). John needs to find the sum of the first n terms in the series. Given the values of a, r, and n, calculate the sum of the first n terms of the geometric series. The formula to calculate the sum of the first n terms S_n of a geometric series is: - If r = 1: S_n = a * n - If r ≠ 1: S_n = a * (1 - r^n) / (1 - r) Write a program that implements this formula. -----Input----- The input consists of a single line containing three integers a, r, and n (1 ≤ a, r, n ≤ 10^9). Note that the value of r is not equal to 0. -----Output----- Output a single integer — the sum of the first n terms of the geometric series. -----Examples----- Input 3 2 4 Output 45 Input 5 1 3 Output 15","solution":"def geometric_series_sum(a, r, n): Calculate the sum of the first n terms of a geometric series with given first term a, common ratio r. if r == 1: return a * n else: return a * (1 - r**n) // (1 - r) # Example Usage # print(geometric_series_sum(3, 2, 4)) # Output: 45 # print(geometric_series_sum(5, 1, 3)) # Output: 15"},{"question":"Arun has recently learned about permutations and how they can be used to rearrange strings. He found it straightforward to generate all possible permutations of a string, but he is struggling with a specific challenge. He wants to find the lexicographically smallest permutation of a given string that is greater than the string itself. Given a string S, help Arun by outputting the lexicographically smallest permutation greater than S. If no such permutation exists, return \\"no answer\\". Input: The first line contains T denoting the number of test cases. Each test case consists of one line, a string S. Output: Print T lines where each line contains the lexicographically smallest permutation greater than S or \\"no answer\\" if such permutation does not exist. Constraints: 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100 The string S consists only of lowercase English letters. SAMPLE INPUT 2 ab bb SAMPLE OUTPUT ba no answer","solution":"def next_permutation(s): Returns the lexicographically smallest permutation greater than s, or \\"no answer\\" if no such permutation exists. s = list(s) n = len(s) # Step 1: Find the largest index k such that s[k] < s[k + 1] k = -1 for i in range(n - 1): if s[i] < s[i + 1]: k = i # If there is no such index k, then this is the last permutation if k == -1: return \\"no answer\\" # Step 2: Find the largest index l such that s[k] < s[l] l = -1 for i in range(k + 1, n): if s[k] < s[i]: l = i # Step 3: Swap the values of s[k] and s[l] s[k], s[l] = s[l], s[k] # Step 4: Reverse the sequence from s[k + 1] to the end s = s[:k + 1] + s[k + 1:][::-1] # Convert the list back to a string return \'\'.join(s) def process_test_cases(test_cases): results = [] for s in test_cases: results.append(next_permutation(s)) return results"},{"question":"A group of friends is organizing a scavenger hunt in a park. Each location in the park where an item could be hidden is represented as a node in a tree. The nodes are connected by bidirectional paths, and there is exactly one path between any two nodes (i.e., the park is represented as a tree). Each friend starts at a different location, and they want to know the longest distance they need to travel to ensure that everyone finds at least one unique item. This longest distance is defined as the diameter of the tree, which is the longest path between any two nodes in the tree. Given the number of locations and the paths between them, help the friends determine the diameter of the tree. -----Input----- The first line contains an integer n (2 ≤ n ≤ 10^4) — the number of locations in the park. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) denoting a path between location u and location v. -----Output----- Print the only integer d — the diameter of the tree. -----Examples----- Input 5 1 2 1 3 2 4 2 5 Output 3 Input 4 1 2 2 3 3 4 Output 3 Input 6 1 2 1 3 2 4 4 5 4 6 Output 4 -----Note----- In the first example, the longest path is from location 4 to location 3, passing through locations 2 and 1, with a distance of 3. In the second example, the longest path is from location 1 to location 4, with a distance of 3. In the third example, the longest path is from location 5 to location 3, passing through locations 4, 2, and 1, with a distance of 4.","solution":"from collections import deque def bfs_farthest_node(start, adj): Perform BFS to find the farthest node from the start node and its distance. :param start: The starting node for BFS. :param adj: The adjacency list representation of the graph. :returns: A tuple (farthest_node, max_distance). visited = [-1] * len(adj) queue = deque([(start, 0)]) visited[start] = 0 farthest_node = start max_distance = 0 while queue: node, distance = queue.popleft() if distance > max_distance: max_distance = distance farthest_node = node for neighbor in adj[node]: if visited[neighbor] == -1: visited[neighbor] = distance + 1 queue.append((neighbor, distance + 1)) return farthest_node, max_distance def find_tree_diameter(n, edges): Finds the diameter of the tree given nodes and edges. :param n: Number of nodes in the tree. :param edges: List of edges in the tree. :returns: The diameter of the tree. adj = [[] for _ in range(n + 1)] for u, v in edges: adj[u].append(v) adj[v].append(u) # Start BFS from any node, use node 1 here u, _ = bfs_farthest_node(1, adj) # Start BFS from u to find the farthest node from u v, diameter = bfs_farthest_node(u, adj) return diameter"},{"question":"Given two integers \'a\' and \'b\', the task is to return the sum of the two integers without using the operators + and -. Example 1: Input: a = 2, b = 3 Output: 5 Explanation: The sum of 2 and 3 is 5 Example 2: Input: a = 10, b = 7 Output: 17 Explanation: The sum of 10 and 7 is 17 Example 3: Input: a = -1, b = 1 Output: 0 Explanation: The sum of -1 and 1 is 0 Your Task: You don\'t need to read input or print anything. Your task is to complete the function getSum() which takes two integers a and b as input and returns their sum. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: -10^9 <= a, b <= 10^9","solution":"def getSum(a, b): Return the sum of two integers without using + and - operators. # 32 bits integer max MAX = 0x7FFFFFFF # Mask to get 32 bits MASK = 0xFFFFFFFF while b != 0: # (a & b) gives all the carry bits, << 1 shifts them to the left carry = (a & b) << 1 # (a ^ b) does the adding without carry a = (a ^ b) & MASK b = carry & MASK # If the result is negative, return the two\'s complement of a return a if a <= MAX else ~(a ^ MASK)"},{"question":"Given an integer array of size N, you are required to find if it is possible to make the array strictly increasing by changing at most one element. A strictly increasing array is one in which for all elements A[i] where 1 <= i < N, A[i-1] < A[i] holds true. ------ Input Format ------ - The first line contains a single integer T, denoting the number of test cases. - Each test case starts with an integer N, the size of the array. - The next line contains N space-separated integers denoting the elements of the array. ------ Output Format ------ For each test case, print \\"YES\\" if it is possible to change at most one element to make the array strictly increasing, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 -10^9 ≤ A[i] ≤ 10^9 ----- Sample Input 1 ------ 4 5 1 3 2 4 5 4 1 2 3 4 3 2 1 3 5 5 4 3 2 1 ----- Sample Output 1 ------ YES YES YES NO ----- Explanation 1 ------ Test case 1: The array can be made strictly increasing by changing the element at index 2 to any value greater than 3 but less than 4 (e.g., changing 2 to 3.5). Thus the output for this test case is \\"YES\\". Test case 2: The array is already strictly increasing, so the output is \\"YES\\". Test case 3: The array can be made strictly increasing by changing the element at index 1 to any value greater than 2 but less than 3 (e.g., changing 1 to 2.5). Thus the output for this test case is \\"YES\\". Test case 4: It is not possible to change just one element to make the array strictly increasing. Thus the output for this test case is \\"NO\\".","solution":"def can_be_strictly_increasing_with_one_change(arr, n): error_count = 0 for i in range(1, n): if arr[i-1] >= arr[i]: error_count += 1 if error_count > 1: return \\"NO\\" if i > 1 and arr[i-2] >= arr[i]: if i+1 < n and arr[i-1] >= arr[i+1]: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): result = [] for array_info in test_cases: n = array_info[0] arr = array_info[1] result.append(can_be_strictly_increasing_with_one_change(arr, n)) return result def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): N = int(data[index]) array = list(map(int, data[index+1:index+1+N])) test_cases.append((N, array)) index += N + 1 result = process_test_cases(test_cases) for res in result: print(res) if __name__ == \\"__main__\\": main()"},{"question":"Ravi has recently started learning about strings and their special properties. Energized by his new interest, he decides to create a special string that contains only certain types of characters. A string is considered special if it only consists of the alphabetic characters \'a\', \'e\', \'i\', \'o\', \'u\', \'b\', \'c\', \'d\', and \'f\'. Given a string S, check if it is a special string or not, and output \\"YES\\" if it is and \\"NO\\" if it is not. Input The first input line contains a single integer T — the number of test cases. Each of the next T lines consists of a single string S, the string Ravi wants to check. Output For each test case, output \\"YES\\" if the string is special, otherwise output \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 SAMPLE INPUT 3 abc aeiouxyz bdf SAMPLE OUTPUT YES NO YES Explanation For the first testcase, the string \\"abc\\" contains only \'a\', \'b\', \'c\' which are among the special characters. So, the output is \\"YES\\". For the second testcase, the string \\"aeiouxyz\\" contains characters \'x\', \'y\', and \'z\' which are not among the special characters. Hence, the output is \\"NO\\". For the third testcase, the string \\"bdf\\" contains \'b\', \'d\', \'f\' which are all special characters. Therefore, the output is \\"YES\\".","solution":"def is_special_string(s): Check if a given string is special. A string is considered special if it only consists of the alphabetic characters \'a\', \'e\', \'i\', \'o\', \'u\', \'b\', \'c\', \'d\', and \'f\'. special_chars = set(\'aeioubcdf\') for char in s: if char not in special_chars: return \\"NO\\" return \\"YES\\" def process_test_cases(T, strings): results = [] for string in strings: results.append(is_special_string(string)) return results"},{"question":"You are given a large number N in the form of a string. Your task is to determine whether N is a power of another integer (excluding 1). A number A is a power of B if there exists an integer k such that A = B^k, where k ≥ 2. Example 1: Input: N = \\"16\\" Output: True Explanation: 16 can be written as 2^4, so the answer is True. Example 2: Input: N = \\"27\\" Output: True Explanation: 27 can be written as 3^3, so the answer is True. Example 3: Input: N = \\"10\\" Output: False Explanation: 10 cannot be written as a power of any integer, so the answer is False. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPowerOfAnotherInteger() which takes the string N as the input and returns True if N can be written as B^k for some integer B > 1 and integer k ≥ 2, otherwise return False. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{10000}","solution":"def isPowerOfAnotherInteger(N: str) -> bool: num = int(N) if num < 2: return False # Check if num can be expressed as b^k where b > 1 and k >= 2 # We will try to find the base (b) and exponent (k) for base in range(2, int(num**0.5) + 1): result = base while result <= num: result *= base if result == num: return True return False"},{"question":"You are given two arrays `arr1` and `arr2`, both containing integers. You need to create a new array `result` which contains the intersection of `arr1` and `arr2`, i.e., only the elements which are present in both arrays. The elements in the `result` should be included in the order they appear in the first occurrence in `arr1`. Write a function that takes in two lists of integers and returns the intersection of these lists in the specified order. Input - The first line contains a single integer t, denoting the number of test cases. - The following t lines each contain two space-separated integers m and n, the lengths of arr1 and arr2 respectively. - The next two lines for each test case contain m and n space-separated integers, representing elements of arr1 and arr2 respectively. Output - For each test case, output the intersection of `arr1` and `arr2` on a new line, with the elements separated by space. If there are no common elements, output an empty line. Constraints - 1 ≤ t ≤ 100 - 1 ≤ m, n ≤ 10^5 - -10^9 ≤ arr1[i], arr2[i] ≤ 10^9 Example Input: 2 3 3 1 2 3 2 3 4 4 5 1 2 3 4 2 3 4 5 6 Output: 2 3 2 3 4","solution":"def find_intersection(arr1, arr2): Returns the intersection of arr1 and arr2 in the order of first appearance in arr1. set_arr2 = set(arr2) result = [x for x in arr1 if x in set_arr2] return result def process_test_cases(test_cases): Processes multiple test cases and returns the list of results. results = [] for arr1, arr2 in test_cases: intersection = find_intersection(arr1, arr2) results.append(intersection) return results"},{"question":"Oscorp, a company specializing in artificial intelligence, has a robot with a limited battery life that can move in one-dimensional space on a rail line. Each movement from one position to another consumes a certain amount of battery, which depends on the distance. The power consumption for moving from position (a) to position (b) is (|a - b|). Oscorp wants to program the robot to visit a set of predefined tasks located at various positions on the line and then return to the starting position. Your task is to help Oscorp minimize the total battery consumption for the robot to complete all tasks and return. Input: - The first line contains a single integer (N) - the number of tasks. - The second line contains (N) integers where (i)-th integer represents the position of the (i)-th task on the line. - The third line contains a single integer (S) - the starting position of the robot. Output: Output a single integer - the minimum amount of battery units required for the robot to visit all tasks and return to the starting position. Constraints: 1 ≤ (N) ≤ 100 0 ≤ positions of tasks ≤ 1000 0 ≤ (S) ≤ 1000 SAMPLE INPUT: 3 1 5 9 0 SAMPLE OUTPUT: 18 Explanation: The robot starts at position 0, goes to 1, then 5, then 9, and finally returns to its starting position 0. The total distance traveled is ( (0-1) + (1-5) + (5-9) + (9-0) = 1 + 4 + 4 + 9 = 18 ).","solution":"def min_battery_consumption(n, task_positions, start_position): Calculates the minimum battery consumption for the robot to complete all tasks and return to the starting position. Args: n : int : number of tasks task_positions: List[int] : positions of the tasks on the rail line start_position: int : starting position of the robot Returns: int : the minimum amount of battery units required for the robot to visit all tasks and return to the starting position task_positions.sort() min_position = task_positions[0] max_position = task_positions[-1] # Battery consumption for the robot to visit all tasks and return to the start position total_consumption = abs(start_position - min_position) + abs(max_position - min_position) + abs(max_position - start_position) return total_consumption"},{"question":"You are given a list of paths representing files and their respective locations in a filesystem. Each path is of the form `/root/folder1/folder2/.../file`, where: - The root directory is `/root`, - `folder1`, `folder2`, etc. are intermediate folders, - `file` is the final file name and can have an optional extension. Your task is to determine the number of unique parent folder structures that contain a given file. We consider two parent folder structures to be the same if they contain exactly the same sequence of folders from the root directory to the folder just before the file name. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of paths. Then follow n lines each containing exactly one path. Each path is of the form `/root/<folder1>/<folder2>/.../<file>`. - The total path length does not exceed 100 characters. - Directory and file names consist of lowercase English letters and dots. - There are no two consecutive slashes in the path, and the path starts with `/root/`. -----Output----- First print k — the number of unique folder structures containing a given file. Next k lines should contain the description of unique structures, one structure per line. For each structure, print the sequence of folders in one line separated by slashes, from the root directory to the folder just before the file name. You can print both the unique structures and folders within structures in any order. -----Examples----- Input 7 /root/folderA/folderB/file1.txt /root/folderC/folderD/file2.txt /root/folderA/folderB/file3.txt /root/folderC/folderD/file4.txt /root/folderX/folderY/file1.txt /root/folderX/folderY/file5.txt /root/folderA/folderB/file6.txt Output 3 /root/folderA/folderB /root/folderC/folderD /root/folderX/folderY Input 4 /root/test/file1.txt /root/dev/file2.txt /root/test/file3.txt /root/dev/file2.txt Output 2 /root/test /root/dev Consider these examples and be mindful of edge cases such as paths with similar but distinct folder names, and their influence on the unique structures.","solution":"def unique_folder_structures(n, paths): Returns the number of unique parent folder structures and the structures themselves. unique_folders = set() for path in paths: # Strip the file name to get the parent folder structure folder_structure = path.rsplit(\\"/\\", 1)[0] unique_folders.add(folder_structure) # Convert set to list to maintain the order unique_folders_list = list(unique_folders) return len(unique_folders_list), unique_folders_list"},{"question":"Given a string S of length N, find the longest palindromic substring in S using dynamic programming. Example 1: Input: N = 7 S = \\"babad\\" Output: \\"bab\\" (or \\"aba\\") Explanation: The longest palindromic substring is \\"bab\\". (Note that \\"aba\\" is also a valid answer.) Example 2: Input: N = 12 S = \\"cbbdadaedfse\\" Output: \\"ada\\" Explanation: The longest palindromic substring is \\"ada\\". Example 3: Input: N = 3 S = \\"abc\\" Output: \\"a\\" (or \\"b\\" or \\"c\\") Explanation: The longest palindromic substrings are all single characters in this case. Your Task: You don\'t need to read input or print anything. Complete the function longestPalindromicSubstring() which takes N and string S as input parameters and returns the longest palindromic substring in S. Expected Time Complexity: O(N^{2}) Expected Auxiliary Space: O(N^{2}) Constraints: 1 ≤ N ≤ 10^{3}","solution":"def longestPalindromicSubstring(N, S): if N == 0: return \\"\\" dp = [[0] * N for _ in range(N)] start = 0 max_length = 1 # Initialize substrings of length 1 as palindromes for i in range(N): dp[i][i] = 1 # Check for substrings of length 2 for i in range(N-1): if S[i] == S[i+1]: dp[i][i+1] = 1 start = i max_length = 2 # Check for substrings of length greater than 2 for length in range(3, N+1): for i in range(N-length+1): j = i+length-1 if S[i] == S[j] and dp[i+1][j-1] == 1: dp[i][j] = 1 start = i max_length = length return S[start:start+max_length]"},{"question":"Given an array A of n integers, return an array B such that B[i] is the sum of elements from A[0] to A[i]. Example 1: Input A = [1, 2, 3, 4] Output B = [1, 3, 6, 10] Explanation: The sums are calculated as follows: B[0] = 1 B[1] = 1 + 2 = 3 B[2] = 1 + 2 + 3 = 6 B[3] = 1 + 2 + 3 + 4 = 10 Example 2: Input A = [5, -1, 3] Output B = [5, 4, 7] Explanation: The sums are calculated as follows: B[0] = 5 B[1] = 5 - 1 = 4 B[2] = 5 - 1 + 3 = 7 Your Task: You don\'t need to read input or print anything. Your task is to complete the function cumulativeSum() which takes an array A as input parameters, and returns an array B with the cumulative sums. Expected Time Complexity: O(n). Expected Auxiliary Space: O(n). Constraints: 1 <= n <= 10^5 -10^3 <= A[i] <= 10^3","solution":"def cumulativeSum(A): Returns an array B such that B[i] is the sum of elements from A[0] to A[i]. B = [] current_sum = 0 for num in A: current_sum += num B.append(current_sum) return B"},{"question":"🛠️ You are responsible for constructing a maze game using a grid. A player needs to navigate from a start position to an end position. You have to determine whether there\'s a path from the start to the end in the maze. You will be given a 2D array of characters, where: \'S\' : start position \'E\' : end position \'.\' : walkable path \'#\' : wall, not walkable 🔲 The player can move up, down, left, or right, but not diagonally. 🔄 Check if there is a path from \'S\' to \'E\' and return true if such a path exists and false otherwise. 💡 Example: maze = [ [\'S\', \'.\', \'#\', \'#\', \'.\'], [\'.\', \'.\', \'#\', \'#\', \'.\'], [\'#\', \'.\', \'.\', \'.\', \'.\'], [\'#\', \'#\', \'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\', \'#\', \'E\'] ] Should return True since there is a path from \'S\' to \'E\'. ❗❗ If \'S\' or \'E\' is not present in the maze, return false.","solution":"def is_path(maze): Determines if there\'s a path from \'S\' (start) to \'E\' (end) in the given maze. :param maze: List[List[str]] - 2D array representing the maze :return: bool - True if there\'s a path, False otherwise # Find start \'S\' and end \'E\' positions start, end = None, None for i in range(len(maze)): for j in range(len(maze[0])): if maze[i][j] == \'S\': start = (i, j) elif maze[i][j] == \'E\': end = (i, j) if not start or not end: return False # Breadth-First Search (BFS) from collections import deque queue = deque([start]) visited = set() visited.add(start) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right while queue: current = queue.popleft() if current == end: return True for direction in directions: next_pos = (current[0] + direction[0], current[1] + direction[1]) if (0 <= next_pos[0] < len(maze) and 0 <= next_pos[1] < len(maze[0]) and maze[next_pos[0]][next_pos[1]] in {\'.\', \'E\'} and next_pos not in visited): queue.append(next_pos) visited.add(next_pos) return False"},{"question":"You are given a collection of books, each characterized by a unique identifier (ID), a title, and an author. You need to implement a function that can perform two main tasks: adding a new book to the collection and finding the most common author in the collection. Specifically, you need to create a class `BookCollection` with the following methods: 1. `add_book(book_id: int, title: str, author: str)`: Adds a new book to the collection. 2. `most_common_author() -> str`: Returns the name of the author with the most books in the collection. If there is a tie, return any one of the authors with the highest count. **Input:** - `add_book` method is called with three parameters: an integer book ID, a string title, and a string author. All book IDs in the input are unique. - `most_common_author` method returns a string, which is the author with the most books. **Output:** - A string representing the author with the most books in the collection, retrieved by calling the `most_common_author` method. **Constraints:** - The `book_id` is a unique integer. - The `title` is a non-empty string. - The `author` is a non-empty string. - The `add_book` and `most_common_author` methods will be called at most 10^5 times combined. **Example:** ```python bc = BookCollection() bc.add_book(1, \\"The Fellowship of the Ring\\", \\"J.R.R. Tolkien\\") bc.add_book(2, \\"The Two Towers\\", \\"J.R.R. Tolkien\\") bc.add_book(3, \\"The Return of the King\\", \\"J.R.R. Tolkien\\") bc.add_book(4, \\"1984\\", \\"George Orwell\\") bc.add_book(5, \\"Animal Farm\\", \\"George Orwell\\") print(bc.most_common_author()) # Outputs: \\"J.R.R. Tolkien\\" ``` In this example, the most common author by the end is \\"J.R.R. Tolkien\\" with 3 books, while \\"George Orwell\\" has 2 books. Hence, the method `most_common_author()` should return \\"J.R.R. Tolkien\\".","solution":"class BookCollection: def __init__(self): self.books = {} self.author_count = {} def add_book(self, book_id, title, author): Adds a new book to the collection. self.books[book_id] = (title, author) if author in self.author_count: self.author_count[author] += 1 else: self.author_count[author] = 1 def most_common_author(self): Returns the name of the author with the most books in the collection. if not self.author_count: return None most_common_author = max(self.author_count, key=self.author_count.get) return most_common_author"},{"question":"You\'ve just got hired by a company and they want you to develop a program that helps to analyze customer sentiment based on their reviews. Specifically, they ask you to determine the number of happy and sad faces in each review. A happy face is represented by the sequence \\":)\\" and a sad face by \\":(\\". Your task is to write a function to count the number of happy and sad faces in given customer reviews. ------ Input ------ The first line of the input contains an integer T denoting the number of customer reviews. Each of the next T lines contains a single string review representing a customer review. ------ Output ------ For each review, output two integers separated by a space, representing the number of happy faces and the number of sad faces in the review. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ text{Length of review} ≤ 1000 ----- Sample Input 1 ------ 3 I am happy :) This is terrible :( Life is good :) :) but sometimes :( happens ----- Sample Output 1 ------ 1 0 0 1 2 1 ----- Explanation 1 ------ Example 1: There\'s only one happy face \\":)\\" and no sad faces \\":(\\" in the first review. Example 2: There\'s only one sad face \\":(\\" and no happy faces \\":)\\" in the second review. Example 3: There are two happy faces \\":)\\" and one sad face \\":(\\" in the third review.","solution":"def count_faces(T, reviews): results = [] for review in reviews: happy_count = review.count(\\":)\\") sad_count = review.count(\\":(\\") results.append((happy_count, sad_count)) return results"},{"question":"Given a grid of size N x M filled with lowercase English letters, Chef has to respond to Q queries. In each query, Chef is given a subgrid defined by its top-left coordinate (x1, y1) and bottom-right coordinate (x2, y2), and he needs to determine if any anagram of the string formed by concatenating all characters within the subgrid can be rearranged to form a palindrome. A string is called a palindrome if it reads the same backward as forward. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - The first line of each test case contains two integers N and M, the dimensions of the grid. - The next N lines each contain a string of M lowercase English letters representing the grid. - The next line contains an integer Q, the number of queries. - The next Q lines each contain four space-separated integers x1, y1, x2, y2, representing the query boundaries. ------ Output Format ------ For each query, output \\"YES\\" if any anagram of the subgrid\'s string can be rearranged to form a palindrome, otherwise print \\"NO\\". You may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N, M ≤ 500 1 ≤ Q ≤ 10^5 1 ≤ x1 ≤ x2 ≤ N 1 ≤ y1 ≤ y2 ≤ M ------ Sample Input 1 ------ 1 4 4 abcd efgh ijkl mnop 2 2 2 3 3 1 1 4 4 ------ Sample Output 1 ------ NO YES ------ Explanation 1 ------ Query 1: The subgrid defined by (2, 2) and (3, 3) is: ``` fg jk ``` The string formed is \\"fgjk\\", and no anagram of this string can be rearranged to form a palindrome. Query 2: The subgrid defined by (1, 1) and (4, 4) includes all the characters in the grid: ``` abcd efgh ijkl mnop ``` The string formed is \\"abcdefghijklmnop\\". Since all characters are unique and the length is even, none of the anagrams can be rearranged to form a palindrome. However, this example highlights the magnitude of the problem, as detailed palindromic conditions depend on character frequencies.","solution":"def is_palindrome_possible(subgrid_string): Determine if any anagram of the given string can be rearranged to form a palindrome. from collections import Counter count = Counter(subgrid_string) odd_count = sum(1 for c in count.values() if c % 2 != 0) return odd_count <= 1 def process_queries(grid, queries): results = [] for x1, y1, x2, y2 in queries: subgrid_string = \'\'.join(grid[row][y1-1 : y2] for row in range(x1-1, x2)) if is_palindrome_possible(subgrid_string): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def chef_responses(T, test_cases): results = [] for case in test_cases: n, m, grid, q, queries = case results.extend(process_queries(grid, queries)) return results"},{"question":"Rajesh is organizing a competition in his university and he wants to provide a prize to the student who solved the maximum number of unique problems. Each student is assigned a unique identifier and is given multiple problems to solve. If a problem was solved multiple times by a student, it is counted only once. You need to determine the winner\'s ID based on the number of unique problems solved. If there\'s a tie, select the student with the smaller ID. Input format: The first line contains an integer M, the number of students. Each of the next M lines contains a student\'s ID (integer) and a list of problem IDs (integers) solved by the student on that day, all space-separated. Output format: Print the ID of the student who solved the maximum number of unique problems. Constraints: 1 ≤ M ≤ 100 1 ≤ Number of problems solved per student per day ≤ 100 1 ≤ Student ID ≤ 1000 1 ≤ Problem ID ≤ 1000 SAMPLE INPUT: 3 101 1 2 3 1 4 102 2 3 4 103 1 2 1 2 SAMPLE OUTPUT: 101","solution":"def find_winner(M, student_problems): Determines the student who solved the maximum number of unique problems. Args: - M (int): Number of students. - student_problems (list): List of tuples, where each tuple consists of a student\'s ID and a list of problems solved by the student. Returns: - int: The ID of the student who solved the maximum number of unique problems. max_unique = 0 winner_id = None for student_id, problems in student_problems: unique_problems = len(set(problems)) if (unique_problems > max_unique) or (unique_problems == max_unique and student_id < winner_id): max_unique = unique_problems winner_id = student_id return winner_id"},{"question":"There is a marathon event, and each runner is supposed to complete a certain number of laps on the track. Each lap on the track has a constant distance in meters. However, some runners complete the full lap, while others may exit the track midway due to fatigue or other reasons, completing fractional laps. Given the following information: - The total number of laps a runner was supposed to complete (N). - The distance of each lap in meters (L). - The actual distance run by the runner in meters (D). Calculate the total percentage of the marathon the runner has completed. -----Constraints----- - 1 leq N leq 10000 - 1 leq L leq 1000 - 0 leq D leq N times L - N, L, and D are integers. -----Input----- The input is given from Standard Input in the following format: N L D -----Output----- Print the total percentage of the marathon the runner has completed, rounded to two decimal places. -----Sample Input----- 10 400 3500 -----Sample Output----- 87.50 Explanation: - The runner was supposed to complete 10 laps, each lap being 400 meters. - The total distance intended to be run is 10 * 400 = 4000 meters. - The runner actually completed 3500 meters. - The percentage of completion is (3500 / 4000) * 100 = 87.50%.","solution":"def marathon_completion_percentage(N, L, D): Calculate the total percentage of the marathon the runner has completed. :param N: int - Total number of laps to be completed :param L: int - Distance of each lap in meters :param D: int - Actual distance run by the runner in meters :return: float - Percentage of completed marathon rounded to two decimal places total_distance = N * L percentage = (D / total_distance) * 100 return round(percentage, 2)"},{"question":"Three friends, Alice, Bob and Charlie, decided to meet for lunch. They live in different locations along a street represented by the x-axis. Each of them wants to minimize the total walking distance to their meeting point. You are given the initial positions of Alice, Bob and Charlie on the x-axis. They can either stay at their initial positions or move to a new position on the x-axis such that the total walking distance for all three friends is minimized. Write a program to determine the minimum total walking distance. -----Constraints----- - All input values are integers. - 1 ≤ Alice, Bob, Charlie ≤ 10^5 -----Input----- The input is given from Standard Input in the following format: Alice Bob Charlie -----Output----- Print the minimum total walking distance. -----Sample Input----- 1 4 6 -----Sample Output----- 5 In this example, the optimal meeting point is at position 4. Alice will walk 3 units (from 1 to 4), Bob will stay at 4, and Charlie will walk 2 units (from 6 to 4), yielding a total distance of 3 + 0 + 2 = 5.","solution":"def minimum_total_distance(alice, bob, charlie): Returns the minimum total walking distance for Alice, Bob, and Charlie to meet at one point. # Sort their initial positions positions = sorted([alice, bob, charlie]) # The most optimal meeting point is the middle position when sorted optimal_meeting_point = positions[1] # The total walking distance is the sum of the distances each friend needs to walk total_distance = abs(alice - optimal_meeting_point) + abs(bob - optimal_meeting_point) + abs(charlie - optimal_meeting_point) return total_distance"},{"question":"In a distant future, scientists have found a way to transfer human consciousness into robotic bodies to extend life. Each robot must undergo various energy calculations based on its activities and battery usage. You are given a robot with an initial battery capacity represented by an integer value and a series of activity durations it needs to perform. Your task is to determine the maximum number of consecutive activities the robot can perform such that the total energy consumption does not exceed its initial battery capacity. -----Input:----- - The first line contains T, the number of test cases. - Each test case starts with a line containing two integers N and B, where N is the number of activity durations and B is the initial battery capacity. - The next line contains N integers, representing the energy consumption of each activity. -----Output:----- For each test case, output a single integer representing the maximum number of consecutive activities the robot can perform without exceeding its initial battery capacity. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - 1 leq B leq 1e6 - 1 leq Activity_Duration leq 1e4 -----Sample Input:----- 2 5 100 20 30 50 10 40 3 60 10 20 30 -----Sample Output:----- 3 3 -----EXPLANATION:----- In the first case, the consecutive activities [20, 30, 50] have a total energy consumption of 100, which equals the battery capacity. Thus, the maximum consecutive activities the robot can perform is 3. In the second case, all three activities [10, 20, 30] amount to 60, which equals the battery capacity, hence the robot can perform all three activities consecutively.","solution":"def max_activities_performable(T, test_cases): Determines the maximum number of consecutive activities the robot can perform without exceeding the initial battery capacity for each test case. Parameters: T (int): Number of test cases test_cases (list): List of tuples where each tuple contains: - N (int): Number of activities - B (int): Initial battery capacity - activity_durations (list): List of energy consumptions for activities Returns: list: List of integers representing the maximum number of consecutive activities for each test case results = [] for case in test_cases: N, B, activity_durations = case max_consecutive = 0 current_sum = 0 left = 0 for right in range(N): current_sum += activity_durations[right] while current_sum > B: current_sum -= activity_durations[left] left += 1 max_consecutive = max(max_consecutive, right - left + 1) results.append(max_consecutive) return results"},{"question":"Sarah enjoys playing with sequences of numbers. She has a sequence of numbers and wants to perform a special operation to sort it in non-decreasing order. The operation consists of selecting a contiguous subarray from the sequence, reversing it, and then replacing the original subarray with its reversed version. Sarah wants to know the minimum number of operations required to sort the sequence. If it is not possible to sort the sequence using these operations, she wants to know that as well. -----Input----- The first line of input contains a single integer N (1 leq N leq 100000), which is the number of elements in the sequence. The second line contains N integers a_1, ldots , a_N (1 leq a_i leq 10^9 for each 1 leq i leq N), representing the elements of the sequence. -----Output----- Display the minimum number of operations required to sort the sequence. If it is not possible to sort the sequence using the described operation, display -1. -----Examples----- Sample Input 1: 5 4 3 2 6 1 Sample Output 1: 2 Sample Input 2: 3 1 5 3 Sample Output 2: 1 Sample Input 3: 4 4 3 2 1 Sample Output 3: 1","solution":"def min_operations_to_sort(N, sequence): Returns the minimum number of operations required to sort the sequence in non-decreasing order by reversing contiguous subarrays. If it is not possible, returns -1. if sorted(sequence) == sequence: return 0 start, end = -1, -1 for i in range(N - 1): if sequence[i] > sequence[i + 1]: start = i break for i in range(N - 1, 0, -1): if sequence[i] < sequence[i - 1]: end = i break if start == -1 or end == -1: return -1 subarray = sequence[start:end + 1] subarray.reverse() if sequence[:start] + subarray + sequence[end + 1:] == sorted(sequence): return 1 return 2"},{"question":"A group of friends is playing a game where they need to predict the temperature for the next day. Given a list of temperature predictions, they need a simple program to determine whether the temperature is likely to rise, fall, or remain the same compared to today. Here\'s the task: You are given the temperature predictions for the next n days (where 1 leq n leq 100). Based on these predictions, classify each day relative to the previous day. - If the temperature is higher than the previous day, print \\"Rise\\". - If the temperature is lower than the previous day, print \\"Fall\\". - If the temperature is the same as the previous day, print \\"Same\\". For the first day (today), you only have a reference temperature and just need to compare the predictions to it. -----Input----- The first line of input contains a single integer n representing the number of days for which predictions are made. The second line contains an integer representing today\'s temperature. The third line contains n integers denoting the temperature predictions for the next n days. Each temperature can be between -100 and 100. -----Output----- Print n lines. Each line should be \\"Rise\\", \\"Fall\\", or \\"Same\\", indicating how the temperature of that day compares with the previous day. -----Example----- Input 5 20 18 21 20 20 22 Output Fall Rise Fall Same Rise -----Note----- For the first prediction day, the temperature is 18, which is lower than today\'s temperature of 20, so it prints \\"Fall\\". For the second prediction day, the temperature is 21, which is higher, so it prints \\"Rise\\". For the third prediction day, the temperature is 20, which is lower than the previous day\'s prediction of 21, so it prints \\"Fall\\". For the fourth prediction day, the temperature is 20, which is the same as the previous day, so it prints \\"Same\\". For the fifth prediction day, the temperature is 22, which is higher than the previous day, so it prints \\"Rise\\".","solution":"def temperature_trend(n, today_temp, predictions): Determines the trend in temperature predictions for the next n days. Parameters: n (int): Number of days for which predictions are made. today_temp (int): Today\'s temperature. predictions (list): List of temperature predictions for the next n days. Returns: list: List of strings indicating the trend for each day compared to the previous day. trends = [] previous_temp = today_temp for temp in predictions: if temp > previous_temp: trends.append(\\"Rise\\") elif temp < previous_temp: trends.append(\\"Fall\\") else: trends.append(\\"Same\\") # Update the previous_temp for the next iteration previous_temp = temp return trends"},{"question":"A chef is preparing a special dish that requires a specific quantity of some ingredients. The chef has packets of these ingredients, each containing a certain amount. The chef can increase the quantity of an ingredient by adding the content of another packet. However, the chef cannot use fractions of a packet and must use the entire packet. Given the quantities of the ingredients in each packet and the required amount, determine the minimum number of packets the chef needs to use to obtain at least the required amount of each ingredient. -----Input----- The first line contains an integer T, the number of test cases. Each test case starts with an integer P (the number of packets). The next P integers denote the quantities in each packet. The next integer R is the required amount of the ingredient. -----Output----- For each test case, print the minimum number of packets required to obtain at least the required amount of the ingredient. If it is not possible to obtain the required amount, print -1. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ P ≤ 100 - 1 ≤ Quantity of each packet ≤ 1000 - 1 ≤ R ≤ 10000 -----Example----- Input: 2 3 800 400 300 1000 4 500 800 700 200 2000 Output: 2 3 -----Explanation----- Example case 1: The chef can use the packets with quantities 800 and 400 to obtain 1200, which is more than 1000. Hence, the minimum number of packets required is 2. Example case 2: The chef can use packets with quantities 800, 700, and 500 to obtain 2000, which exactly matches the required amount. Hence, the minimum number of packets required is 3.","solution":"def min_packets(T, test_cases): Determine the minimum number of packets required to obtain at least the required amount of the ingredient for each test case. Parameters: T (int): Number of test cases test_cases (list): List of tuples, each containing (P, quantities, R) Returns: list: List of minimum number of packets required for each test case or -1 if not possible results = [] for case in test_cases: P, quantities, R = case quantities.sort(reverse=True) # Sort packets in descending order to use larger packets first total = 0 count = 0 for quantity in quantities: total += quantity count += 1 if total >= R: results.append(count) break if total < R: results.append(-1) return results # Example input T = 2 test_cases = [ (3, [800, 400, 300], 1000), (4, [500, 800, 700, 200], 2000) ] # Call function with example input and print the results print(min_packets(T, test_cases))"},{"question":"You are given a list of student records where each record consists of a student name as a string (student_name) and their grade as an integer (0 <= grade <= 100). You need to sort the records first based on the grade in descending order. If two students have the same grade, sort them alphabetically by their name in ascending order. Example 1: Input: N = 3 arr[] = {{\\"Alice\\", 85}, {\\"Bob\\", 90}, {\\"Charlie\\", 85}} Output: {{\\"Bob\\", 90}, {\\"Alice\\", 85}, {\\"Charlie\\", 85}} Explanation: Bob has the highest grade of 90. Alice and Charlie have the same grade of 85, so they are sorted alphabetically by their name. Example 2: Input: N = 2 arr[] = {{\\"Dave\\", 75}, {\\"Eve\\", 85}} Output: {{\\"Eve\\", 85}, {\\"Dave\\", 75}} Explanation: Eve has a higher grade than Dave. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function sortStudents() that takes an array arr[] and an integer N as parameters and sorts the array according to the above-given conditions. The function does not return anything. Expected Time Complexity: O(NlogN). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^{4} 0 ≤ grade ≤ 100","solution":"from typing import List, Tuple def sortStudents(arr: List[Tuple[str, int]], N: int) -> List[Tuple[str, int]]: Sorts the student records based on the grade in descending order. If two students have the same grade, they are sorted alphabetically by their name. # Sort the array with priority to the grade in descending order and then by name in ascending order. arr.sort(key=lambda x: (-x[1], x[0])) return arr"},{"question":"You are given a sequence of integers, where the sequence can be split into any number of contiguous subsequences. You need to choose one contiguous subsequence from these subdivisions such that the sum of the elements in the chosen subsequence is maximized. Note: Be careful with subsequences containing negative numbers – sometimes the optimal solution might be an empty one where the sum is zero. Constraints: * 1 ≤ N ≤ 100,000 * -10^9 ≤ a_i ≤ 10^9 * All input values are integers. Input Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print the maximum sum that can be obtained by choosing a contiguous subsequence of the given sequence. Examples Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 3 -5 -3 -1 Output 0 Input 5 1 2 3 4 5 Output 15","solution":"def max_contiguous_subsequence_sum(n, arr): Returns the maximum sum of a contiguous subsequence. # Edge case: if the array is empty, the max sum is 0 if n == 0: return 0 max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) # Since we can choose an empty subsequence, we should also consider 0 return max(max_sum, 0)"},{"question":"Inventor Bob has recently built a machine that generates strings using alphabetic characters. Bob is interested in determining if a string can be transformed into a palindrome by rearranging its characters. A palindrome is a string that reads the same forwards and backwards. Write a function that takes a string and returns true if it can be rearranged into a palindrome, and false otherwise. -----Input----- The input consists of a single string s, containing only lowercase alphabetic characters. -----Output----- Output \\"true\\" if the string can be rearranged into a palindrome, otherwise \\"false\\". -----Constraints----- - 1 ≤ |s| ≤ 105 -----Example----- Input #1: civic Output #1: true Input #2: ivicc Output #2: true Input #3: hello Output #3: false Input #4: aabb Output #4: true","solution":"from collections import Counter def can_form_palindrome(s): Determines if a string can be rearranged to form a palindrome. :param s: string containing only lowercase alphabetic characters :return: True if the string can be rearranged to form a palindrome, False otherwise char_count = Counter(s) odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: return False return True"},{"question":"# Task Given a positive integer `n`, compute the factorial of `n` and then determine the sum of the digits of the resulting factorial value. # Input/Output `[input]` integer `n` A single integer `n` where `0 <= n <= 100`. [output] an integer The sum of the digits of the factorial of `n`. # Example For `n = 5`, the output should be 3. `5! = 120 --> 1 + 2 + 0 = 3` For `n = 10`, the output should be 27. `10! = 3628800 --> 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27`","solution":"import math def sum_of_factorial_digits(n): Computes the sum of the digits of the factorial of n. Parameters: n (int): The non-negative integer to compute the factorial of. Returns: int: The sum of the digits of n!. factorial_result = math.factorial(n) sum_digits = sum(int(digit) for digit in str(factorial_result)) return sum_digits"},{"question":"You are given a balanced binary search tree (BST) with N nodes. Your task is to find and print the median value of all the nodes in the BST. The median of a set of numbers is the middle number when the numbers are sorted in order. If there is an even number of elements, the median is the average of the two middle numbers. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case begins with a single integer N denoting the number of nodes in the BST. The following N lines describe the nodes of the BST. Each of these lines contains a single integer representing the value of the node, and each test case will provide the BST in level-order traversal. ------ Output ------ For each test case, print the median value of the BST. If the median is not an integer, print its floating-point representation rounded to one decimal place. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} |value of each node| ≤ 10^{6} ------ Subtasks ------ Subtask #1 (30 points): 1 ≤ N ≤ 100 Subtask #2 (70 points): original constraints ------ Example ------ ------ Input Format ------ 2 7 4 2 6 1 3 5 7 4 4 2 6 1 ------ Output Format ------ 4.0 3.0 ------ Explanation ------ Example case 1: For the given BST with level-order traversal, the in-order traversal of the BST is: 1, 2, 3, 4, 5, 6, 7. The middle value (median) of this array is 4. Example case 2: For the given BST with level-order traversal, the in-order traversal of the BST is: 1, 2, 4, 6. The two middle values are 2 and 4, so the median is (2 + 4) / 2 = 3.0.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def insert_level_order(arr, root, i, n): if i < n: temp = TreeNode(arr[i]) root = temp root.left = insert_level_order(arr, root.left, 2 * i + 1, n) root.right = insert_level_order(arr, root.right, 2 * i + 2, n) return root def in_order_traversal(root, arr): if root: in_order_traversal(root.left, arr) arr.append(root.val) in_order_traversal(root.right, arr) return arr def median_of_bst(nodes): bst = insert_level_order(nodes, None, 0, len(nodes)) in_order = in_order_traversal(bst, []) n = len(in_order) if n % 2 == 1: return float(in_order[n // 2]) else: return (in_order[n // 2 - 1] + in_order[n // 2]) / 2 def process_cases(cases): results = [] for case in cases: n, nodes = case results.append(median_of_bst(nodes)) return results def solve(inputs): index = 0 T = inputs[index] index += 1 cases = [] for _ in range(T): N = inputs[index] index += 1 nodes = [] for _ in range(N): nodes.append(inputs[index]) index += 1 cases.append((N, nodes)) results = process_cases(cases) for result in results: print(f\\"{result:.1f}\\") # Example of using the function example_input = [2, 7, 4, 2, 6, 1, 3, 5, 7, 4, 4, 2, 6, 1] solve(example_input)"},{"question":"You are given an array of `n` integers. Divide this array into two non-empty parts such that the sum of the elements in the first part and the sum of the elements in the second part are as close as possible. -----Input----- The first line of the input contains an integer `n` (2 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the elements of the array. -----Output----- Print the absolute difference between the sums of the elements of the two parts. -----Examples----- Input 4 3 1 4 2 Output 0 Input 5 1 2 3 4 5 Output 1 -----Note----- In the first example, divide the array into [3, 1] and [4, 2]. The sum of the first part is 4 and the sum of the second part is 6. The absolute difference between the sums is 2. However, a better division would be [3, 4] and [1, 2] resulting in the sums being 7 and 3 respectively, with an absolute difference of 4, and [3, 1, 4]/[2] with an absolute difference of 3. The best possible division resulting in the sums being 5 and 5, therefore the absolute difference would be 0. In the second example, divide the array into [1, 2, 3] and [4, 5]. The sum of the first part is 6 and the sum of the second part is 9. The absolute difference between the sums is 3. However, a better division would be [1, 3, 4] and [2, 5] resulting in the sums being 8 and 7 respectively, with an absolute difference of 1. In both cases above, achieving the smallest absolute difference included analyzing different breaking points within the array.","solution":"def min_diff_partition(arr): This function takes a list of integers and returns the minimum absolute difference between the sum of two non-empty partitions of the array. total_sum = sum(arr) n = len(arr) # To find the subset with sum closest to total_sum / 2 dp = [0] * (total_sum // 2 + 1) for num in arr: for j in range(total_sum // 2, num - 1, -1): dp[j] = max(dp[j], dp[j - num] + num) sum1 = dp[-1] sum2 = total_sum - sum1 return abs(sum1 - sum2) def find_min_absolute_difference(n, array): return min_diff_partition(array)"},{"question":"A company has hired you to design a new email filtering system. The criteria for filtering emails are strict and involve several rules regarding the appearance of specific substrings within the subject line of the email. Write a program to help the company automate this process. Each email subject line must be analyzed to determine if it can be classified as \\"urgent\\". A subject line is considered \\"urgent\\" if it contains all of the following substrings at least once: \\"project\\", \\"deadline\\", and \\"important\\". The order in which these substrings appear does not matter. The program should read a list of email subject lines and output \\"urgent\\" if a subject line meets the criteria or \\"not urgent\\" if it does not. Input - An integer n (1 ≤ n ≤ 10^4), representing the number of email subject lines. - The next n lines, each containing a subject line (1 ≤ length of subject line ≤ 1000). Output For each subject line, output \\"urgent\\" or \\"not urgent\\". Example Input 4 Project deadline is approaching This is an important project update Deadline extension for important project Team meeting about the project Output not urgent not urgent urgent not urgent Explanation In the first example, \\"Project deadline is approaching\\" does not contain the word \\"important\\", so it is classified as \\"not urgent\\". In the second example, \\"This is an important project update\\" does not contain the word \\"deadline\\", so it is classified as \\"not urgent\\". In the third example, \\"Deadline extension for important project\\" contains all three required substrings: \\"project\\", \\"deadline\\", and \\"important\\". Hence, it is classified as \\"urgent\\". In the fourth example, \\"Team meeting about the project\\" does not contain the words \\"deadline\\" and \\"important\\", so it is classified as \\"not urgent\\".","solution":"def classify_emails(n, subject_lines): Classifies each email subject line as \\"urgent\\" or \\"not urgent\\" based on the presence of substrings \\"project\\", \\"deadline\\", and \\"important\\". Parameters: n (int): Number of email subject lines. subject_lines (List[str]): List of email subject lines. Returns: List[str]: List of classifications, either \\"urgent\\" or \\"not urgent\\" for each subject line. keywords = [\\"project\\", \\"deadline\\", \\"important\\"] results = [] for line in subject_lines: if all(keyword in line.lower() for keyword in keywords): results.append(\\"urgent\\") else: results.append(\\"not urgent\\") return results"},{"question":"Problem F: Robots on the Grid Robotics company RobuTech is conducting an experiment involving robots moving on a grid. Engineers want to understand how efficiently the robots can navigate from one point to another. Each robot starts at a specific point and has to reach the destination point in the least amount of time while avoiding obstacles. The grid consists of cells, some of which may be impassable because of the obstacles. Each robot has the following parameters: - Starting position (x1, y1): (integer, integer) - Destination position (x2, y2): (integer, integer) The grid is represented as follows: - \'.\' represents an empty cell where the robot can move. - \'#\' represents an obstacle cell that the robot cannot pass through. Your task is to write a program that calculates the shortest path for each robot from its starting position to the destination position, avoiding obstacles. Input The input consists of multiple datasets. Each dataset has the following form: - First line: Grid height H (2 ≤ H ≤ 100) and grid width W (2 ≤ W ≤ 100) - Next H lines: W characters (each \'.\' or \'#\') representing the grid - Next line: N (1 ≤ N ≤ 100), the number of robots - Next N lines: Four integers each, representing the starting position (x1, y1) and destination position (x2, y2) of each robot (0 ≤ x1, y1, x2, y2 < max(H, W) and 0 ≤ x1, y1, x2, y2) The end of the input is indicated by a line containing the number 0. Output For each dataset, output N lines, where each line contains an integer representing the shortest distance from the starting position to the destination position for each robot. If no path exists, output -1 for that robot. Sample Input 5 5 ..... ..#.. ....# .#... ..... 2 0 0 4 4 1 1 3 3 0 0 Sample Output 8 4 Example Input 5 5 ..... ..#.. ....# .#... ..... 2 0 0 4 4 1 1 3 3 0 0 Output 8 4","solution":"from collections import deque def shortest_path(grid, start, end, h, w): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < h and 0 <= ny < w and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def robot_paths(grid_specs): results = [] for grid, robots in grid_specs: h, w = len(grid), len(grid[0]) grid_result = [] for x1, y1, x2, y2 in robots: result = shortest_path(grid, (x1, y1), (x2, y2), h, w) grid_result.append(result) results.append(grid_result) return results"},{"question":"# Manage Inventory for a Retail Store The retail store needs your help to manage its inventory better. They\'ve decided to sort their inventory items in alphabetical order, based on the product names. Each product in the inventory is represented as a tuple containing the product name and the available quantity. # Instructions: Write a function that accepts a list of tuples representing the store\'s inventory items, and returns a list of the same tuples sorted by the product names in alphabetical order. # Notes: * Each tuple will have the product name as the first element and the quantity as the second element. * The product names will be unique and will not contain numbers or special characters, only alphabetic characters. * The sorting should be case-insensitive. For example, \\"apple\\" and \\"Apple\\" should be considered the same in the sorting order. # Examples For this input: ``` [ (\\"Banana\\", 50), (\\"apple\\", 30), (\\"Orange\\", 40), (\\"grape\\", 60), (\\"Peach\\", 20) ] ``` You should return this output: ``` [ (\\"apple\\", 30), (\\"Banana\\", 50), (\\"grape\\", 60), (\\"Orange\\", 40), (\\"Peach\\", 20) ] ```","solution":"def sort_inventory(inventory): Sorts the inventory items in alphabetical order based on product names. Args: inventory (list): A list of tuples, each containing a product name and quantity. Returns: list: A list of tuples sorted by product names in alphabetical order. return sorted(inventory, key=lambda item: item[0].lower())"},{"question":"Given a non-negative integer `n`, write a function that returns the number of unique ways to climb a staircase with `n` steps. You can either take 1 step, 2 steps, or 3 steps at a time. Your function should be efficient and able to handle large values of `n` within a reasonable execution time. SAMPLE INPUT 4 SAMPLE OUTPUT 7 Explanation The unique ways to climb 4 steps are: 1. 1 + 1 + 1 + 1 2. 1 + 1 + 2 3. 1 + 2 + 1 4. 2 + 1 + 1 5. 2 + 2 6. 1 + 3 7. 3 + 1","solution":"def climb_stairs(n): Returns the number of unique ways to climb a staircase with `n` steps. You can either take 1 step, 2 steps, or 3 steps at a time. # Base cases if n == 0: return 1 elif n == 1: return 1 elif n == 2: return 2 # Initialize ways to climb 0, 1, and 2 steps dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 dp[2] = 2 # Use dynamic programming to fill dp array for i in range(3, n + 1): dp[i] = dp[i-1] + dp[i-2] + dp[i-3] return dp[n]"},{"question":"You are given an array of `n` integers, and you need to determine if it is possible to partition the array into two subsets such that the sum of the elements in both subsets is the same. For example, given the array [1, 5, 11, 5], the array can be partitioned into [1, 5, 5] and [11], both of which have a sum of 11. Note that each element of the array must be included in exactly one of the subsets, and each subset must have at least one element. Write a function that returns \\"YES\\" if it is possible to partition the array into two subsets with equal sum or \\"NO\\" otherwise. Input - The first line contains an integer `n` (1 ≤ n ≤ 100), representing the number of elements in the array. - The second line contains `n` integers, each separated by a space, representing the elements of the array. The elements of the array are all positive integers and do not exceed 100. Output - Output \\"YES\\" if it is possible to partition the array into two subsets with equal sum, otherwise print \\"NO\\". Examples Input 4 1 5 11 5 Output YES Input 4 1 2 3 5 Output NO","solution":"def can_partition(nums): total_sum = sum(nums) # If the total sum is odd, we can\'t partition it into two equal subsets if total_sum % 2 != 0: return \\"NO\\" subset_sum = total_sum // 2 n = len(nums) # Initialize a dp array where dp[i] will be True if a subset sum of i can be formed dp = [False] * (subset_sum + 1) dp[0] = True for num in nums: for j in range(subset_sum, num - 1, -1): dp[j] = dp[j] or dp[j - num] return \\"YES\\" if dp[subset_sum] else \\"NO\\""},{"question":"You are given an array of integers where each element represents the maximum number of steps you can jump forward from that element. Determine the minimum number of jumps required to reach the last index of the array. If it is not possible to reach the last index, return -1. Write a function `minJumps` that takes a list of integers and returns an integer. **Function signature:** ```python def minJumps(arr: List[int]) -> int: ``` **Input:** - `arr` (List[int]): A list of non-negative integers **Output:** - `int`: Minimum number of jumps to reach the last index or -1 if it is not possible. **Constraints:** - `1 <= len(arr) <= 10000` - `0 <= arr[i] <= 1000` **Examples:** **Example 1:** ```python arr = [2, 3, 1, 1, 4] print(minJumps(arr)) # Output: 2 ``` Explanation: The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.) **Example 2:** ```python arr = [2, 3, 0, 1, 4] print(minJumps(arr)) # Output: 2 ``` Explanation: The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.) **Example 3:** ```python arr = [1, 1, 1, 1, 1] print(minJumps(arr)) # Output: 4 ``` **Example 4:** ```python arr = [1, 0, 2, 3, 1] print(minJumps(arr)) # Output: -1 ``` Explanation: It is not possible to reach the last index. Implement the function to solve the problem.","solution":"def minJumps(arr): if len(arr) <= 1: return 0 if arr[0] == 0: return -1 n = len(arr) jumps = 1 maxReach = arr[0] steps = arr[0] for i in range(1, n): if i == n-1: return jumps maxReach = max(maxReach, i + arr[i]) steps -= 1 if steps == 0: jumps += 1 if i >= maxReach: return -1 steps = maxReach - i return -1"},{"question":"You are given a list of integers and a target number. You need to write a function `two_sum(nums, target)` that returns a tuple of two distinct indices `(i, j)` in the list such that the elements at those indices sum up to the given target number. If no such pair exists, the function should return `None`. For example, given the list `nums = [2, 7, 11, 15]` and the target `9`, the function should return `(0, 1)` because `nums[0] + nums[1] = 2 + 7 = 9`. Your solution should have a time complexity of O(n).","solution":"def two_sum(nums, target): Returns a tuple of two distinct indices (i, j) such that nums[i] + nums[j] == target. If no such indices exist, returns None. hash_map = {} # To store value to index mapping. for i, num in enumerate(nums): complement = target - num if complement in hash_map: return (hash_map[complement], i) hash_map[num] = i return None"},{"question":"You are given a grid with `n` rows and `m` columns. Each cell of the grid is either land (\'L\') or water (\'W\'). An island is formed by connected lands, where the connection is considered up, down, left, or right adjacently (not diagonally). Determine the number of islands in the grid. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. Each of the next `n` lines contains `m` characters (\'L\' or \'W\') — representing the grid. Output Output a single integer — the number of islands in the grid. Example Input 4 5 LWLWL LWWLL LWWLL LWLWL Output 4 Note In the given example, there are four islands: 1. The island comprised of cells (1,1) and (2,1). 2. The island at cell (1,3). 3. The island comprised of cells (1,5), (2,4), and (2,5). 4. The island comprised of cells (3,4), (3,5), and (4,5). To solve the problem, you should traverse the grid and count the connected components of \'L\' using an appropriate search technique such as Depth-First Search (DFS) or Breadth-First Search (BFS).","solution":"def count_islands(grid): Returns the number of islands in the given grid. :param grid: List of strings representing the grid where \'L\' is land and \'W\' is water. :return: Integer, the number of islands. if not grid: return 0 n = len(grid) m = len(grid[0]) visited = [[False] * m for _ in range(n)] def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() if 0 <= cx < n and 0 <= cy < m and not visited[cx][cy] and grid[cx][cy] == \'L\': visited[cx][cy] = True # Push adjacent cells onto stack stack.append((cx-1, cy)) # Up stack.append((cx+1, cy)) # Down stack.append((cx, cy-1)) # Left stack.append((cx, cy+1)) # Right island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\' and not visited[i][j]: dfs(i, j) island_count += 1 return island_count"},{"question":"In a magical kingdom, there are n castles connected by m bidirectional roads. Each road has an integer length associated with it. The king wants to know if it is possible to leave one castle, visit all the other castles at least once, and return to the original castle using a path that has the same length in both directions (a palindrome). You are tasked with writing a program to determine if such a path exists. Input The first line contains two space-separated integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 2000) — the number of castles and the number of roads, respectively. The i-th of the following m lines contains three space-separated integers a_i, b_i, and l_i (1 ≤ a_i, b_i ≤ n, 1 ≤ l_i ≤ 10^4) which represent a road between castles a_i and b_i with length l_i. Output Output one line — \\"Yes\\" if there is a palindromic path, and \\"No\\" otherwise (both excluding quotation marks). Examples Input 5 5 1 2 3 2 3 2 3 4 5 4 5 3 5 1 2 Output No Input 4 4 1 2 4 2 3 1 3 1 4 3 4 1 Output Yes Note In the second example, one possible palindromic path is 1 → 2 → 3 → 1 → 2 → 3 → 4. This path has a sequence of road lengths as 4 → 1 → 4 → 1, which reads the same in both directions.","solution":"def has_palindromic_path(n, m, roads): from collections import defaultdict graph = defaultdict(list) # Build the adjacency list representation of graph for a, b, l in roads: graph[a].append((b, l)) graph[b].append((a, l)) # Depth First Search with palindrome checking def dfs(current, path): if len(path) > 1 and path == path[::-1]: return True for neighbor, length in graph[current]: if not visited[neighbor] and (len(path) == 0 or length == path[-1]): visited[neighbor] = True if dfs(neighbor, path + [length]): return True visited[neighbor] = False return False for castle in range(1, n + 1): visited = [False] * (n + 1) visited[castle] = True if dfs(castle, []): return \\"Yes\\" return \\"No\\" # Usage example input_data = [ (5, 5, [ (1, 2, 3), (2, 3, 2), (3, 4, 5), (4, 5, 3), (5, 1, 2) ]), (4, 4, [ (1, 2, 4), (2, 3, 1), (3, 1, 4), (3, 4, 1) ]) ] for n, m, roads in input_data: print(has_palindromic_path(n, m, roads))"},{"question":"Write a function to decode a given encoded string where encoding is defined using the following rule: The string is composed of substrings of the form `k[encoded_string]`, where the `encoded_string` inside the square brackets is repeated exactly `k` times. You may assume that `k` is a positive integer and that the input string is always valid (i.e., no extra brackets, and every `k` follows a series of digits before the brackets). Implement the function `decode_string(encoded_str: str) -> str` that takes in a single string `encoded_str` and returns its decoded version. # Function Signature ```python def decode_string(encoded_str: str) -> str: pass ``` # Input - `encoded_str` (a string): The encoded string (1 ≤ length of `encoded_str` ≤ 300). # Output - A string representing the decoded version of the input encoded string. # Examples ```python assert decode_string(\\"3[a]2[bc]\\") == \\"aaabcbc\\" assert decode_string(\\"3[a2[c]]\\") == \\"accaccacc\\" assert decode_string(\\"2[abc]3[cd]ef\\") == \\"abcabccdcdcdef\\" ``` # Note In `encoded_str`, you may assume that the square brackets are well-formed, meaning that each opening bracket has a corresponding closing bracket, and they are appropriately nested. For instance: - `3[a2[c]]` should decode to `accaccacc` - `2[abc]3[cd]ef` should decode to `abcabccdcdcdef` # Constraints - Nested decoding is required. - The strings inside the square brackets can themselves be encoded. - `encoded_str` will contain only digits, square brackets, and lower case letters.","solution":"def decode_string(encoded_str: str) -> str: stack = [] current_num = 0 current_str = \'\' for char in encoded_str: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'[\': stack.append((current_str, current_num)) current_str = \'\' current_num = 0 elif char == \']\': last_str, num = stack.pop() current_str = last_str + current_str * num else: current_str += char return current_str"},{"question":"Implement a function **longest_substring** that takes a single string `s` and returns the length of the longest substring without repeating characters. Example: longest_substring(\\"abcabcbb\\") returns 3 (substring \\"abc\\") longest_substring(\\"bbbbb\\") returns 1 (substring \\"b\\") longest_substring(\\"pwwkew\\") returns 3 (substring \\"wke\\")","solution":"def longest_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Sarah is an avid reader and loves collecting books. She has recently purchased several books and wants to organize them on her shelves. Sarah arranges her books in a very specific way: each book has a certain height, and she wants all the books on the same shelf to be sorted in non-decreasing order of their heights, with no two books being the same height. Additionally, each shelf has a maximum capacity indicating the maximum number of books that can be placed on it. Given a list of book heights and a list of maximum capacities for each shelf, help Sarah determine how to organize her books such that the total number of books placed on the shelves is maximized. Each book can only be placed on one shelf. Consider the following rules: - Each shelf must contain books with unique heights. - A book can only be placed on a shelf if it does not exceed the shelf\'s capacity. - The final arrangement should maximize the total number of books placed on the shelves. **Input Format:** - First line contains an integer `n`, the number of books. - Second line contains `n` integers representing the heights of the books. - Third line contains an integer `m`, the number of shelves. - Fourth line contains `m` integers representing the maximum capacity of each shelf. **Output Format:** - Single integer representing the maximum number of books that can be placed on the shelves. **Constraints:** - 1 ≤ n ≤ 1000 - 1 ≤ m ≤ 100 - 1 ≤ height of each book ≤ 10^6 - 1 ≤ capacity of each shelf ≤ n **Sample Input:** ``` 5 4 5 3 2 8 2 3 2 ``` **Sample Output:** ``` 5 ``` **Explanation:** Sarah can place the books in the following way: - First shelf (capacity 3): Books with heights 2, 3, and 4. - Second shelf (capacity 2): Books with heights 5 and 8.","solution":"def maximize_books_on_shelves(book_heights, shelf_capacities): Returns the maximum number of books that can be placed on the shelves. book_heights.sort() shelf_capacities.sort(reverse=True) total_books = 0 i = 0 for capacity in shelf_capacities: placed_books = 0 while placed_books < capacity and i < len(book_heights): placed_books += 1 i += 1 total_books += placed_books return total_books # Wrapper function to parse the input format def organize_books(n, book_heights, m, shelf_capacities): return maximize_books_on_shelves(book_heights, shelf_capacities)"},{"question":"A company has a system that schedules interviews for job applicants. Each applicant has a preferred time slot, but due to overlapping decisions, some applicants might have conflicts. Your task is to determine the maximum number of non-overlapping time slots that can be assigned to applicants. Given a list of tuples where each tuple represents the start and end time of an applicant\'s preferred time slot, you need to find the maximum number of non-overlapping time slots that can be assigned. Input: - The first line contains an integer T, the number of test cases. - Each test case starts with an integer N, the number of applicants. - The next N lines each contain two integers, start and end, representing the start time and end time of an applicant\'s preferred time slot. Output: - For each test case, output a single integer denoting the maximum number of non-overlapping time slots that can be assigned. Constraints: - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 100 - 0 ≤ start < end ≤ 10^5 Example Input: 2 3 1 3 2 4 3 5 4 1 2 2 3 3 4 4 5 Example Output: 2 4","solution":"def max_non_overlapping_intervals(test_cases): For each test case, find the maximum number of non-overlapping intervals. Args: test_cases: List of tuples, where each tuple contains: an integer N (number of applicants) and a list of tuples of integers (start, end) for each applicant\'s time slot. Returns: List of integers representing the maximum number of non-overlapping time slots for each test case. results = [] for N, intervals in test_cases: intervals.sort(key=lambda x: x[1]) # sort intervals by their end time count = 0 end = -1 for start, finish in intervals: if start >= end: count += 1 end = finish results.append(count) return results # Function to convert input data into a structured format def process_input(data): lines = data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) intervals = [] for i in range(N): start, end = map(int, lines[index + 1 + i].split()) intervals.append((start, end)) test_cases.append((N, intervals)) index += N + 1 return test_cases # Function to convert output data from a list to the required format def process_output(results): return \'n\'.join(map(str, results)) # Main function to run the algorithm def run_interview_scheduling(data): test_cases = process_input(data) results = max_non_overlapping_intervals(test_cases) return process_output(results)"},{"question":"In a distant kingdom, the wise king organizes an annual contest called \\"String Transformation\\" for his citizens. The contestants must decode a series of operations to transform strings. You are given a string `S` consisting of lowercase alphabetical characters and an integer `K`. You can perform the following operation any number of times (including zero times): 1. Choose any character from the string and replace it with any other lowercase alphabet. The objective is to determine the minimum number of operations required to make the string `S` contain at least `K` different characters. ------ Input Format ------ - The first line consists of a single integer `T`, the number of test cases. - Each of the `T` test cases consists of two lines. - The first line contains the integer `K`. - The second line contains the string `S`. ------ Output Format ------ For each test case, output in a single line the minimum number of operations required. ------ Constraints ------ 1 leq T leq 1000 1 leq K leq 26 1 leq |S| leq 10^5 - The sum of the lengths of all strings provided in the input does not exceed 10^6. ------ Sample Input 1 ------ 3 5 abcde 2 aaaa 3 ab ------ Sample Output 1 ------ 0 1 1 ------ Explanation 1 ------ Test case 1: The string \\"abcde\\" already contains 5 different characters, so no operations are required. Test case 2: The string \\"aaaa\\" has only 1 unique character. To have at least 2 different characters, you can change one \'a\' to any other character. Test case 3: The string \\"ab\\" currently has 2 different characters. To have at least 3 different characters, you can change one \'a\' or \'b\' to a new character, resulting in one operation.","solution":"def min_operations_to_k_different_characters(k, s): Determines the minimum number of operations required to make the string `s` contain at least `K` different characters. unique_chars = set(s) num_unique_chars = len(unique_chars) # If the number of unique characters is already greater than or equal to K if num_unique_chars >= k: return 0 # Otherwise, we need to add more different characters return k - num_unique_chars def process_input(test_cases): results = [] for k, s in test_cases: results.append(min_operations_to_k_different_characters(k, s)) return results"},{"question":"Write a function that receives a list of integers and an integer value `n` as parameters. Your job is to return the nth largest unique integer in the list. If `n` is greater than the number of unique integers in the list, return `None`. Examples: ``` ([4, 1, 2, 3, 4, 5], 3) -> returns 3 (4, 5, and 3 are the unique largest numbers in order) ([4, 4, 4, 4, 4, 4], 2) -> returns None (there is only one unique number) ([10, 20, 30, 40, 50], 1) -> returns 50 (50 is the largest unique number in the list) ([10, 20, 30, 40, 50], 6) -> returns None (there are only 5 unique numbers) ```","solution":"def nth_largest_unique(nums, n): Returns the nth largest unique integer in the list. If n is greater than the number of unique integers, return None. unique_nums = list(set(nums)) unique_nums.sort(reverse=True) if n > len(unique_nums): return None return unique_nums[n-1]"},{"question":"You are provided with an array of N + k integer elements where all elements are in the range 1 to N except one element which appears exactly k times. The task is to find that repeating element. Note: Return the element that appears k times. Example 1: Input: N = 5 k = 3 array[] = {1, 2, 3, 4, 5, 3, 3, 3} Output: 3 Explanation: In the given array, 3 is the only number that repeats k (3) times. Example 2: Input: N = 4 k = 2 array[] = {1, 2, 2, 3, 4} Output: 2 Explanation: In the given array, 2 is the only number that repeats k (2) times. Your Task: The task is to complete the function findRepeatingElement() which takes array arr[], integers N and k as inputs (the size of the array is N + k and elements are in the range [1, N]) and finds the element that appears k times and returns it. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 2 ≤ N ≤ 10^5 1 ≤ k ≤ 10","solution":"def findRepeatingElement(arr, N, k): Finds the element that appears exactly k times in the array. Parameters: arr (list): The input array containing N + k elements. N (int): The maximum integer value in the range [1, N]. k (int): The count of the repeating element. Returns: int: The element that appears k times. count = [0] * (N + 1) for num in arr: count[num] += 1 if count[num] == k: return num return -1"},{"question":"Chandu has been given a task to distribute candies among children. He needs to make sure that each child gets at least one candy. However, he also wants to minimize the total number of candies distributed. Initially, each child has a certain number of candies. For each child, he can give additional candies as needed, but he cannot take away any candies. The cost for giving additional candies is a fixed value per candy. Input: The first line of the input contains an integer t, which is the number of test cases. Then, t lines follow where each line of each test case contains three integers N, K, and C, where N is the number of children, K is the minimum number of candies each child should have, and C is the cost per candy. Then N lines follow containing an integer a[i] (initial number of candies the i-th child has). Output: Output an integer which is the minimum cost required for distributing the candies as per the conditions. Constraints: 1 ≤ t ≤ 100, 1 ≤ N ≤ 10^5, 0 ≤ a[i] ≤ 10^6, 1 ≤ K ≤ 10^6, 1 ≤ C ≤ 100 SAMPLE INPUT: 1 3 5 2 2 3 6 SAMPLE OUTPUT: 6 Explanation: Here, Chandu needs each child to have at least 5 candies. - The first child has 2 candies and needs 3 more. The cost is 3 * 2 = 6. - The second child has 3 candies and needs 2 more. The cost is 2 * 2 = 4. - The third child already has 6 candies, so no additional candies are required. Total cost = 6 (for the first child) + 4 (for the second child) + 0 (for the third child) = 10. After distribution, the children have 5, 5, and 6 candies respectively.","solution":"def min_cost_to_distribute_candies(t, test_cases): results = [] for case in test_cases: N, K, C, a = case cost = 0 for candies in a: if candies < K: cost += (K - candies) * C results.append(cost) return results"},{"question":"A courier company is planning to optimize its delivery routing system. The company has multiple couriers, and each courier can deliver packages to multiple locations in a specific order. However, to ensure efficiency, the company wants to identify if there are any redundant deliveries, meaning that a courier visits the same location more than once during their route. Your task is to write a program that determines if there are any redundant deliveries for each courier based on their planned routes. -----Constraints----- - All values in input are integers. - 1 leq C leq 10^5 (number of couriers) - 1 leq L leq 10^5 (total number of locations visited by all couriers combined) -----Input----- Input is given from Standard Input in the following format: C For each courier, the input is given in the following format: P L_1 L_2 ... L_P - The first line contains an integer C, the number of couriers. - For each courier, the first line contains an integer P, the number of locations that the courier visits. - The second line contains P integers, representing the locations (L_1, L_2, ..., L_P) that the courier visits in the order given. -----Output----- Print C lines. Each line should contain Yes if the corresponding courier has any redundant deliveries and No otherwise. -----Sample Input----- 3 5 10 20 30 40 10 4 25 30 35 40 6 15 20 15 25 30 15 -----Sample Output----- Yes No Yes For the first courier, the route 10 -> 20 -> 30 -> 40 -> 10 has a redundant delivery as location 10 is visited twice. For the second courier, the route 25 -> 30 -> 35 -> 40 has no redundant deliveries. For the third courier, the route 15 -> 20 -> 15 -> 25 -> 30 -> 15 has redundant deliveries as location 15 is visited three times.","solution":"def check_redundant_deliveries(couriers): results = [] for route in couriers: location_set = set() redundant = False for location in route: if location in location_set: redundant = True break location_set.add(location) if redundant: results.append(\\"Yes\\") else: results.append(\\"No\\") return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') C = int(input_lines[0]) couriers = [] index = 1 for _ in range(C): P = int(input_lines[index]) route = list(map(int, input_lines[index + 1].split())) couriers.append(route) index += 2 return couriers"},{"question":"You are given a list of integers. Your task is to find the longest subsequence in the list such that every pair of consecutive elements in the subsequence has a greatest common divisor (GCD) of 1. Note that the subsequence does not need to be contiguous. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains an integer n (1 le n le 500) — the number of elements in the list. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^6) — the elements of the list. -----Output----- For each test case, print a single integer — the length of the longest subsequence such that every pair of consecutive elements in the subsequence has a GCD of 1. -----Examples----- Input 2 5 2 3 5 7 11 4 4 6 8 10 Output 5 1","solution":"from math import gcd def longest_coprime_subsequence_length(arr): n = len(arr) if n == 0: return 0 dp = [1] * n for i in range(n): for j in range(i): if gcd(arr[i], arr[j]) == 1: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] result = longest_coprime_subsequence_length(arr) results.append(result) return results"},{"question":"You are given a string S consisting of lowercase English letters and a pattern P. The pattern P consists of lowercase English letters and wildcard characters \'?\'. The wildcard character \'?\' can match any single lowercase letter. Your task is to determine if the string S matches the pattern P. Input The first line contains a string S (1 ≤ |S| ≤ 100,000), the string that needs to be matched. The second line contains a string P (1 ≤ |P| ≤ 100,000), the pattern containing lowercase letters and wildcard characters \'?\'. Output Output \\"YES\\" if the given string matches the pattern, otherwise print \\"NO\\". Examples Input ababcdc a?a?cdc Output YES Input teststring te?t?ri?g Output NO Input aaa a?a Output YES","solution":"def is_match(s, p): Returns \\"YES\\" if string s matches pattern p, otherwise returns \\"NO\\". The pattern p can contain wildcard characters \'?\' that can match any single lowercase letter. if len(s) != len(p): return \\"NO\\" for i in range(len(s)): if p[i] != \'?\' and s[i] != p[i]: return \\"NO\\" return \\"YES\\""},{"question":"Mitchell loves problem-solving, especially finding the number of ways to climb stairs. He usually practices with the classic stair climbing problem but likes to add his own twist to it. Imagine you have `N` stairs and you can climb either 1 step, 2 steps, or 3 steps at a time. Given an integer `N` representing the total number of stairs, can you determine how many distinct ways there are to reach the top? Input Format: - A single integer `N` representing the number of stairs. Constraints: - 1 ≤ N ≤ 10^5 Output Format: - Output a single integer representing the number of distinct ways to reach the top of the staircase. If the number is larger than 10^9 + 7, output the number modulo 10^9 + 7. Example input #00: 4 Example output #00: 7 Explanation #00: There are 7 ways to reach the top with 4 stairs: 1. 1 step + 1 step + 1 step + 1 step 2. 1 step + 1 step + 2 steps 3. 1 step + 2 steps + 1 step 4. 2 steps + 1 step + 1 step 5. 2 steps + 2 steps 6. 1 step + 3 steps 7. 3 steps + 1 step","solution":"def count_ways_to_climb_stairs(N): Returns the number of distinct ways to climb N stairs when you can take 1, 2, or 3 steps at a time. The result is given modulo 10^9 + 7. MOD = 10**9 + 7 if N == 0: return 0 if N == 1: return 1 if N == 2: return 2 if N == 3: return 4 dp = [0] * (N + 1) dp[0] = 1 dp[1] = 1 dp[2] = 2 dp[3] = 4 for i in range(4, N + 1): dp[i] = (dp[i - 1] + dp[i - 2] + dp[i - 3]) % MOD return dp[N]"},{"question":"Alice is playing a game with a list of integers. She has an initial score of zero, and her goal is to maximize her score by performing operations on the list. The operations she can perform are as follows: 1) Pick any integer from the list and add it to her score. This costs the integer value itself in points. 2) Pick any pair of integers from the list, remove them, and add the minimum of the pair to her score. This operation has no cost. Given the list of integers, help Alice determine the maximum score she can achieve using the available operations. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case starts with an integer N, the number of integers in the list. - The second line contains N integers separated by space, representing the list. -----Output:----- For each test case, output a single integer representing the maximum score Alice can achieve. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq List elements leq 10^4 -----Sample Input:----- 2 3 1 2 3 4 4 5 6 7 -----Sample Output:----- 3 10 -----Explanation:----- In the first test case, Alice can pick the integers 1 and 2, achieving a score of 3 (since 1 + 2 = 3). Picking integer 3 directly would also give the score of 3. Therefore, the maximum score is 3. In the second test case, Alice can pick pairs (4, 5) and (6, 7). The score she gets is min(4, 5) + min(6, 7) = 4 + 6 = 10. Therefore, the maximum score is 10.","solution":"def maximize_score(test_cases): Given a list of test cases where each test case contains a list of integers, calculates the maximum score Alice can achieve using the specified operations. :param test_cases: List of test cases, each containing an integer N and a list of N integers :return: List of integers where each integer is the maximum score Alice can achieve for that test case results = [] for N, integers in test_cases: integers.sort() score = 0 # Take pairs from the back of the sorted list which is more optimal to maximize the score for i in range(N - 1, 0, -2): score += integers[i - 1] if N % 2 == 1: score += integers[0] results.append(score) return results def parse_input(input_str): Parses the input string to extract test cases :param input_str: Raw input string :return: List of test cases lines = input_str.split(\\"n\\") T = int(lines[0]) test_cases = [] current_line = 1 for _ in range(T): N = int(lines[current_line]) integers = list(map(int, lines[current_line + 1].split())) test_cases.append((N, integers)) current_line += 2 return test_cases def format_output(results): Formats the results into a string format for output :param results: List of results to format :return: Formatted string output return \\"n\\".join(map(str, results))"},{"question":"Given an array of integers, determine whether there exist two distinct indices i and j in the array such that the sum of elements at these indices is equal to a given target value. Example 1: Input: array = [2, 7, 11, 15], target = 9 Output: True Explanation: For array = [2, 7, 11, 15], there exist two indices 0 and 1 such that array[0] + array[1] = 9. Example 2: Input: array = [1, 2, 3, 4], target = 8 Output: False Explanation: For array = [1, 2, 3, 4], there does not exist two indices with the sum equal to 8. Your Task: You don\'t need to read or print anything. Your task is to complete the function twoSumExists() which takes array and target as input parameters and returns a boolean value indicating if such a pair exists. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= array.length <= 10^5 -10^9 <= array[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def twoSumExists(array, target): Given an array of integers and a target value, determine whether there exist two distinct indices i and j in the array such that the sum of elements at these indices is equal to the target. Parameters: array (List[int]): List of integers. target (int): Target sum value. Returns: bool: True if such a pair exists, otherwise False. seen = set() for num in array: if target - num in seen: return True seen.add(num) return False"},{"question":"Write a function that takes an array of integers and returns a new array with each element being the product of all the other elements excluding the current element. For example, given the array [1, 2, 3, 4], the function should return [24, 12, 8, 6] since: - 24 is the product of 2, 3, and 4 - 12 is the product of 1, 3, and 4 - 8 is the product of 1, 2, and 4 - 6 is the product of 1, 2, and 3 You may assume that the array does not contain any zeros. The function should work in O(n) time and O(n) space.","solution":"def product_of_all_except_self(arr): Returns a new array where each element is the product of all other elements except for the current one. :param arr: List[int] - input array of integers :return: List[int] - an array where each element is the product of all other elements in the input array n = len(arr) if n == 0: return [] # Initialize the output array with ones output = [1] * n # Initialize cumulative product from the left left_product = 1 for i in range(n): output[i] = left_product left_product *= arr[i] # Initialize cumulative product from the right right_product = 1 for i in reversed(range(n)): output[i] *= right_product right_product *= arr[i] return output"},{"question":"Write a function `nested_lists_sum()` that takes as input a list of nested lists of integers (the nesting can be up to any depth) and returns the cumulative sum of all the integers within the nested lists. The function should handle lists that are deeply nested and contain various levels of sublists. # Examples: ```python nested_lists_sum([1, [2, [3, 4], [5, [6, 7]]], 8, [9]]) # Returns: 45 # Explanation: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45 nested_lists_sum([10, [20, 30], [[40, 50], 60], 70]) # Returns: 280 # Explanation: 10 + 20 + 30 + 40 + 50 + 60 + 70 = 280 nested_lists_sum([[1, 2], [3, 4], [5, [6, 7, [8, 9, [10]]]]]) # Returns: 55 # Explanation: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55 nested_lists_sum([[[[[1]]], 2], 3]) # Returns: 6 # Explanation: 1 + 2 + 3 = 6 nested_lists_sum([[], 1, [[], [2]], 3]) # Returns: 6 # Explanation: 1 + 2 + 3 = 6 ``` # Constraints: - Input list will contain only integers or lists of integers. - The lists may be arbitrarily deeply nested. - You can assume all integers are non-negative.","solution":"def nested_lists_sum(lst): Returns the cumulative sum of all integers within the nested lists. total = 0 for element in lst: if isinstance(element, list): total += nested_lists_sum(element) else: total += element return total"},{"question":"Maria is designing a new board game and needs to determine the optimal placement of her game pieces on a 20times20 grid. She has overlaid the grid with a Cartesian coordinate system so any point (i,j) in the grid has coordinates i in [-10, 10] and j in [-10, 10]. Each game piece must be placed such that the sum of the distances from all pieces to a predefined point (a, b) is minimized. The distances are calculated using the Manhattan distance formula, which is defined as: [ text{Manhattan distance} = | i - a | + | j - b | ] Given the coordinates of the predefined point (a, b) and the number of game pieces n, your task is to determine the optimal placement of the game pieces on the grid. For each game piece, print two space-separated integers on a new line describing the respective i and j coordinates of the piece\'s location. Input Format Three space-separated integers describing the respective values of a, b, and n, where (a, b) is the predefined point and n is the number of game pieces. Constraints -10 leq a, b leq 10 1 leq n leq 10 Output Format Print n lines, where each line contains two space-separated integers i and j describing the respective coordinates of a piece\'s location. Sample Input 0 0 0 3 Sample Output 0 0 0 1 0 -1 0 Explanation 0 In this example, the predefined point (0,0) is the origin. By placing the game pieces at (0,0), (1,0), and (-1,0), the sum of the Manhattan distances from all pieces to (0,0) is minimal. The placement ensures that the pieces are evenly distributed around the predefined point while minimizing the total distance.","solution":"def optimal_placement(a, b, n): Given the predefined point (a, b) and the number of game pieces n, returns the optimal placement of game pieces on a 20x20 grid. Output is a list of tuples with each tuple representing the coordinates (i, j) of a game piece. placements = [(a, b)] for i in range(1, (n // 2) + 1): if len(placements) < n: placements.append((a + i, b)) if len(placements) < n: placements.append((a - i, b)) if len(placements) < n: placements.append((a, b + i)) if len(placements) < n: placements.append((a, b - i)) return placements[:n]"},{"question":"In a parallel universe, there exists a city where buildings are represented by a string S of length N. Each character in the string denotes the height of a building. Chef wants to create a new skyline for the city by reversing parts of the string. Specifically, Chef will perform exactly one operation: select any substring of the string and reverse it. Chef wants to know if he can perform this operation in such a way that the resulting string of buildings will be in non-decreasing order of height from left to right. If possible, return the indices of the substring (1-based) that needs to be reversed to achieve the desired result. If there are multiple solutions, return any of them. If it\'s not possible, print -1. ------ Input Format ------ - The first line of input contains one integer T — the number of test cases. - Each of the next T lines contains a string S of length N, representing the heights of the buildings. ------ Output Format ------ For each test case, if a solution exists, print two integers denoting the starting and ending indices (1-based) of the substring Chef needs to reverse. If no such substring exists, print -1. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} Characters in S are lowercase alphabets (\'a\' to \'z\') indicating building heights. The sum of the lengths of all strings across all test cases does not exceed 10^6. ----- Sample Input 1 ------ 3 abc cba bac ----- Sample Output 1 ------ 1 1 1 3 1 2 ----- Explanation 1 ------ Test case 1: The string \\"abc\\" is already in non-decreasing order. Reversing any single character (such as from index 1 to index 1) will still result in \\"abc\\". Test case 2: By reversing the substring from index 1 to index 3, we get \\"abc\\", which is in non-decreasing order. Test case 3: By reversing the substring from index 1 to index 2, we get \\"abc\\", which is in non-decreasing order.","solution":"def find_substring_to_reverse(s): Given a string s representing building heights, this function finds the indices (1-based) of the substring that should be reversed to make the entire string sorted in non-decreasing order. If such a substring doesn\'t exist, it returns -1. n = len(s) sorted_s = \'\'.join(sorted(s)) if s == sorted_s: return (1, 1) left = 0 while left < n and s[left] == sorted_s[left]: left += 1 right = n - 1 while right >= 0 and s[right] == sorted_s[right]: right -= 1 if left < right: candidate = s[:left] + s[left:right+1][::-1] + s[right+1:] if candidate == sorted_s: return (left + 1, right + 1) return -1 def process_test_cases(test_cases): results = [] for s in test_cases: result = find_substring_to_reverse(s) if result == -1: results.append(\\"-1\\") else: results.append(f\\"{result[0]} {result[1]}\\") return results"},{"question":"Maria has recently started learning about dynamic programming and stumbled across the problem of counting the number of distinct paths in a grid. She wondered if the same technique could be applied to find the number of ways to reach a target amount using given coin denominations. She has `m` different coin denominations, and she wants to know the number of distinct ways to make up a target amount `n`. Each coin denomination can be used any number of times. -----Input----- The first line contains two integer numbers, `n` and `m` (1 ≤ n ≤ 10^3, 1 ≤ m ≤ 50). The second line contains `m` space-separated integers representing the coin denominations (1 ≤ coin value ≤ 10^5). -----Output----- Print one integer — the number of distinct ways to make up the target amount `n` using the given denominations. -----Examples----- Input 10 2 1 2 Output 6 Input 3 3 2 5 3 Output 1 -----Note----- In the first example, there are 6 ways to make up the amount 10 using denominations 1 and 2: - 1+1+1+1+1+1+1+1+1+1 - 1+1+1+1+1+1+1+1+2 - 1+1+1+1+1+1+1+2+2 - 1+1+1+1+1+2+2+2 - 1+1+1+2+2+2+2 - 2+2+2+2+2 In the second example, there is only 1 way to make up the amount 3 using the given denominations: - 3","solution":"def count_ways(n, m, coins): Returns the number of distinct ways to make up the target amount n using the given denominations. # Initialize a list to store the number of ways to make change for each amount dp = [0] * (n + 1) # There is one way to make change for 0 amount (i.e., use no coins) dp[0] = 1 # Iterate through each coin and update the dp array for coin in coins: for x in range(coin, n + 1): dp[x] += dp[x - coin] return dp[n] # Example usage: # n, m = 10, 2 # coins = [1, 2] # print(count_ways(n, m, coins)) # Output: 6"},{"question":"Chef is interested in organizing a friendly competition among cooks. Each cook must prepare and submit a unique recipe. Each recipe is described using a distinct combination of ingredients. Every ingredient in a recipe is represented as a letter in the recipe string. Chef wants each recipe to be aesthetically pleasing. An aesthetically pleasing recipe is defined as one where no two similar ingredients are adjacent to each other. Now, Chef needs your help to count the number of aesthetically pleasing recipes he can accept. Assume Chef has a set of `n` distinct ingredients represented by `n` different lowercase English letters. Each recipe should be of length `m`, where `1 <= m <= n), and the number of aesthetically pleasing recipes is to be calculated modulo 10^9+7 (1000000007). Input Input contains two integers: `n` (1 ≤ n ≤ 10) representing the number of different ingredients, and `m` (1 ≤ m ≤ 10) representing the length of the recipe. Output Print a single integer representing the number of aesthetically pleasing recipes of length `m` that can be formed using `n` different ingredients, modulo 10^9+7. Example Input: 3 2 Output: 6 Input: 4 3 Output: 24 Explanation In the first example, with 3 ingredients (say `a`, `b`, and `c`), there are 6 possible aesthetically pleasing recipes of length 2. They are: `ab`, `ac`, `ba`, `bc`, `ca`, and `cb`. In the second example, with 4 ingredients, there are 24 possible aesthetically pleasing recipes of length 3, each of which does not have any two adjacent ingredients the same.","solution":"MOD = 1000000007 def factorial(n): if n == 0 or n == 1: return 1 return n * factorial(n - 1) def count_aesthetically_pleasing_recipes(n, m): if m == 1: return n elif m > n: return 0 else: return (n * (factorial(n - 1) // factorial(n - m))) % MOD"},{"question":"Sarah loves arranging her bookshelf, and she wants all the book titles to be sorted in alphabetical order. However, some of the book titles begin with articles (\\"a\\", \\"an\\", \\"the\\"), and she wants to ignore these articles when sorting. Help Sarah write a program that sorts the book titles, ignoring leading articles. INPUT: The first line contains an integer t, the number of book titles. The next t lines contain one book title each. OUTPUT: Display the sorted list of book titles, each on a new line, with articles intact in their original positions. 1 <= t <= 100 Each book title consists of up to 100 characters including letters, numbers, punctuation marks, and spaces. SAMPLE INPUT 4 The Great Gatsby A Tale of Two Cities The Catcher in the Rye Moby Dick SAMPLE OUTPUT The Catcher in the Rye The Great Gatsby Moby Dick A Tale of Two Cities","solution":"def sort_book_titles(t, titles): Sort book titles ignoring leading articles (\\"a\\", \\"an\\", \\"the\\"). Parameters: t (int): The number of book titles. titles (list of str): List of book titles. Returns: list of str: Alphabetically sorted list of book titles ignoring leading articles. def article_strip(title): articles = [\\"a \\", \\"an \\", \\"the \\"] title_lower = title.lower() for article in articles: if title_lower.startswith(article): return (title_lower[len(article):], title) return (title_lower, title) sorted_titles = sorted(titles, key=article_strip) return sorted_titles"},{"question":"You are a software engineer at a wildlife conservation organization. One of your tasks is to develop a system to monitor animal populations in protected areas. The animals are tagged with unique IDs and their sightings are recorded in a log file. Each entry in the log contains the timestamp of the sighting, the unique ID of the animal, and the location where it was spotted. You need to create a function to analyze these logs and find out which animal ID was sighted the most times over a specific period. Write a function `most_sighted_animal(logs, start_time, end_time)` that takes the following parameters: - `logs`: a list of tuples, where each tuple contains a timestamp (in the format \\"YYYY-MM-DD HH:MM:SS\\"), a unique ID for the animal, and the location (a string). - `start_time`: a string representing the start of the period (inclusive) in the format \\"YYYY-MM-DD HH:MM:SS\\". - `end_time`: a string representing the end of the period (inclusive) in the format \\"YYYY-MM-DD HH:MM:SS\\". The function should return the unique ID of the animal that was sighted the most times in the given time period. If there is a tie, return the animal ID that appears first in alphabetical order. ------ Input Format ------ - A list `logs` of tuples, where each tuple contains three elements: - A string representing the timestamp in the format \\"YYYY-MM-DD HH:MM:SS\\". - A string representing the unique ID of the animal. - A string representing the location of the sighting. - A string `start_time` in the format \\"YYYY-MM-DD HH:MM:SS\\". - A string `end_time` in the format \\"YYYY-MM-DD HH:MM:SS\\". ------ Output Format ------ - A string representing the unique ID of the most sighted animal in that time period. ------ Constraints ------ - The timestamp format will always be valid and consistent. - There will always be at least one sighting in the given time period. - The time intervals covered by `start_time` and `end_time` are inclusive. - All animal IDs are unique strings of uppercase letters. - `logs` will contain no more than 10^5 entries. - `start_time` and `end_time` will be within a valid range for the year, month, and day. ------ Example ------ ```python logs = [ (\\"2023-01-01 12:00:00\\", \\"ELEPHANT\\", \\"Zone A\\"), (\\"2023-01-01 14:00:00\\", \\"TIGER\\", \\"Zone B\\"), (\\"2023-01-02 09:00:00\\", \\"ELEPHANT\\", \\"Zone A\\"), (\\"2023-01-01 15:00:00\\", \\"ZEBRA\\", \\"Zone C\\"), (\\"2023-01-01 16:00:00\\", \\"TIGER\\", \\"Zone B\\"), (\\"2023-01-02 10:00:00\\", \\"ELEPHANT\\", \\"Zone A\\") ] start_time = \\"2023-01-01 00:00:00\\" end_time = \\"2023-01-01 23:59:59\\" most_sighted_animal(logs, start_time, end_time) # Output: \\"ELEPHANT\\" start_time = \\"2023-01-02 00:00:00\\" end_time = \\"2023-01-02 23:59:59\\" most_sighted_animal(logs, start_time, end_time) # Output: \\"ELEPHANT\\" ``` In the first example, the animal \\"ELEPHANT\\" was sighted most frequently within the specified time period. In the second example, the animal \\"ELEPHANT\\" was also sighted the most times within the new specified period.","solution":"from collections import defaultdict from datetime import datetime def most_sighted_animal(logs, start_time, end_time): Returns the unique ID of the animal that was sighted the most times in the given time period. If there is a tie, returns the animal ID that appears first in alphabetical order. sighting_counts = defaultdict(int) start_time = datetime.strptime(start_time, \\"%Y-%m-%d %H:%M:%S\\") end_time = datetime.strptime(end_time, \\"%Y-%m-%d %H:%M:%S\\") for timestamp, animal_id, location in logs: sighting_time = datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") if start_time <= sighting_time <= end_time: sighting_counts[animal_id] += 1 if not sighting_counts: return None most_sighted = sorted(sighting_counts.items(), key=lambda x: (-x[1], x[0])) return most_sighted[0][0]"},{"question":"You are given two rectangles A and B on a 2D plane. Each rectangle is defined by its bottom-left corner (x_{bl}, y_{bl}) and its top-right corner (x_{tr}, y_{tr}). Write a program which prints: * \\"1\\" if rectangles A and B overlap, * \\"0\\" if rectangles A and B do not overlap. Input The input consists of multiple datasets. The first line consists of an integer N (N leq 50), the number of datasets. There will be N lines where each line represents each dataset. Each dataset consists of eight real numbers: x_{bl}^A y_{bl}^A x_{tr}^A y_{tr}^A x_{bl}^B y_{bl}^B x_{tr}^B y_{tr}^B Output For each dataset, print 1 or 0 in a line. Example Input 2 0.0 0.0 2.0 2.0 1.0 1.0 3.0 3.0 0.0 0.0 1.0 1.0 2.0 2.0 3.0 3.0 Output 1 0","solution":"def are_rectangles_overlapping(x_bl_A, y_bl_A, x_tr_A, y_tr_A, x_bl_B, y_bl_B, x_tr_B, y_tr_B): Determines if two rectangles A and B overlap. Each rectangle is represented by its bottom-left (x_bl, y_bl) and top-right (x_tr, y_tr) coordinates. Returns 1 if the rectangles overlap, otherwise returns 0. # If one rectangle is to the left of the other if x_tr_A < x_bl_B or x_tr_B < x_bl_A: return 0 # If one rectangle is above the other if y_tr_A < y_bl_B or y_tr_B < y_bl_A: return 0 return 1 def check_overlap(datasets): results = [] for data in datasets: results.append(are_rectangles_overlapping(*data)) return results"},{"question":"Given an integer n, generate the nth row of Pascal\'s Triangle. Pascal\'s Triangle is defined as follows: - The first row is [1]. - Each subsequent row is constructed by adding the number above and to the left with the number above and to the right, treating empty entries as 0. For example, the first few rows are: [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] Example 1: Input: n = 3 Output: [1, 3, 3, 1] Example 2: Input: n = 0 Output: [1] Example 3: Input: n = 5 Output: [1, 5, 10, 10, 5, 1] Constraints: - 0 <= n <= 30","solution":"def generate_pascals_triangle_row(n): Generates the nth row of Pascal\'s triangle. if n == 0: return [1] row = [1] for k in range(1, n + 1): next_value = row[k - 1] * (n - k + 1) // k row.append(next_value) return row"},{"question":"Develop a scheduling algorithm to allocate conference rooms based on attendees\' availability. Problem Statement A company is organizing a conference and needs to schedule multiple sessions throughout the day. Each session requires exactly one conference room, and multiple sessions should not overlap in the same room. Each attendee provides their availability in terms of start and end times they are free to attend sessions. Your goal is to determine the minimum number of conference rooms required to schedule all sessions without any conflicts. INPUT The first line contains T, the number of test cases. The first line of each test case contains N, the number of sessions. Then N lines follow with ith line as: Si Ei where Si represents the start time and Ei represents the end time of the ith session. OUTPUT For each test case, output in a single line the minimum number of conference rooms required. CONSTRAINTS 1 ≤ T ≤ 10 1 ≤ N ≤ 100 0 ≤ Si < Ei ≤ 1000 SAMPLE INPUT 1 3 30 75 0 50 60 150 SAMPLE OUTPUT 2 Explanation In the given sample case, there are 3 sessions. - Session 1: (30, 75) - Session 2: (0, 50) - Session 3: (60, 150) Session 2 overlaps with Session 1 and Session 3, but Session 1 does not overlap with Session 3. Therefore, a minimum of 2 conference rooms are required: - Conference Room 1: Session 2 - Conference Room 2: Session 1 followed by Session 3","solution":"import heapq def minConferenceRoomsRequired(T, test_cases): results = [] for i in range(T): sessions = test_cases[i] if not sessions: results.append(0) continue # Sort the sessions by start time sessions.sort(key = lambda x: x[0]) # Initialize a min-heap to track end times of sessions in ongoing conference rooms min_heap = [] # Add the first session end time to the heap heapq.heappush(min_heap, sessions[0][1]) for j in range(1, len(sessions)): # If the session starting now can reuse the room if sessions[j][0] >= min_heap[0]: heapq.heappop(min_heap) # Add the current session\'s end time to the heap heapq.heappush(min_heap, sessions[j][1]) # The size of the heap gives us the number of conference rooms required results.append(len(min_heap)) return results"},{"question":"You are tasked with creating a simple digital clock display. Your input will be an integer representing the total number of seconds elapsed since midnight. Write a function that outputs the current time in the format \\"HH:MM:SS\\". Your function should handle invalid inputs gracefully. Specifically, if the input number of seconds is negative or greater than or equal to 86400 (the total number of seconds in a day), return \\"Invalid input!\\". Example: If the input is 3661, the output should be \\"01:01:01\\". If the input is -5, the output should be \\"Invalid input!\\". If the input is 86400, the output should be \\"Invalid input!\\". Function signature: `def digital_clock(seconds: int) -> str:` Note: The hours, minutes, and seconds should be two digits, padded with leading zeroes if necessary.","solution":"def digital_clock(seconds: int) -> str: Converts the total number of seconds elapsed since midnight into a string formatted as \\"HH:MM:SS\\". Args: seconds (int): The total number of seconds to be converted. Returns: str: The time as a string formatted as \\"HH:MM:SS\\", or \\"Invalid input!\\" if the input is out of range. if seconds < 0 or seconds >= 86400: return \\"Invalid input!\\" hours = seconds // 3600 minutes = (seconds % 3600) // 60 seconds = seconds % 60 return f\\"{hours:02}:{minutes:02}:{seconds:02}\\""},{"question":"Design a Meeting Scheduler You are given an array of meeting time intervals consisting of start and end times `[start, end]` (in 24-hour format). Your task is to write a function to check if a person could attend all of these meetings or not. # Requirements: 1. If a new meeting does not overlap with any other meeting, it can be scheduled. 2. If it is possible to attend all meetings without any overlap, return `True`; otherwise, return `False`. # Examples: Example 1: ``` meetings = [[1, 3], [5, 6], [2, 4]] ``` ``` Output: False ``` Explanation: The person cannot attend both the meetings [1, 3] and [2, 4] since they overlap. Example 2: ``` meetings = [[7, 10], [2, 4]] ``` ``` Output: True ``` Explanation: All meetings are attended as they don\'t overlap.","solution":"def can_attend_meetings(meetings): Returns whether a person can attend all meetings without any overlap. Parameters: meetings (list of list of int): A list of [start, end] meeting times. Returns: bool: True if the person can attend all meetings, False otherwise. if not meetings: return True # Sort meetings by their start time meetings.sort(key=lambda x: x[0]) # Check for any overlap for i in range(1, len(meetings)): if meetings[i][0] < meetings[i-1][1]: return False return True"},{"question":"Given an array of integers, an equilibrium index is an index such that the sum of elements on its left is equal to the sum of elements on its right. You need to write a function `findEquilibriumIndex(arr)` that receives an array of integers and returns an index of equilibrium if it exists; otherwise, it returns -1. For example, in the array `[-7, 1, 5, 2, -4, 3, 0]`, the equilibrium index is 3 because the elements at indices 0, 1, and 2 sum to -1, just as the elements at indices 4, 5, and 6 do. Function Signature: ```python def findEquilibriumIndex(arr: List[int]) -> int: # your code here ```","solution":"from typing import List def findEquilibriumIndex(arr: List[int]) -> int: Finds an equilibrium index in the given array such that the sum of elements on its left is equal to the sum of elements on its right. :param arr: List of integers :return: The equilibrium index or -1 if none exists total_sum = sum(arr) left_sum = 0 for i, num in enumerate(arr): total_sum -= num if left_sum == total_sum: return i left_sum += num return -1"},{"question":"A software development team is designing a video game and needs to manage the score of a player. The game has a series of checkpoints, each with a score that can be positive or negative. To calculate the player\'s final score, you must consider that the player can choose at most one checkpoint to start from and continue to the end, potentially skipping the negative scores at the beginning. Implement a function to find the maximum score a player can achieve, considering this rule. Example 1: Input: N = 5 Arr[] = { -3, 2, 5, -1, 4 } Output: 10 Explanation: The player can choose to start from checkpoint 2 and achieve a score of 2 + 5 - 1 + 4 = 10. Example 2: Input: N = 7 Arr[] = { 1, -2, -3, 4, -1, 2, 1 } Output: 6 Explanation: The player can choose to start from checkpoint 4 and achieve a score of 4 - 1 + 2 + 1 = 6. Example 3: Input: N = 3 Arr[] = { -5, -2, -3 } Output: -2 Explanation: Even though all checkpoint scores are negative, the player can choose to start from checkpoint 2 to get the maximum score of -2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxScore()` which takes the array of integers `arr[]` and `n` as input parameters and returns the maximum score a player can achieve. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{5} -10^{3} ≤ Arr[i] ≤ 10^{3}","solution":"def maxScore(arr, n): Find the maximum score a player can achieve by starting from at most one checkpoint and continuing to the end. Parameters: arr (list[int]): A list of integers with the scores at each checkpoint. n (int): The number of checkpoints. Returns: int: The maximum score a player can achieve. # Initialize variables max_score = float(\'-inf\') # This will store the maximum score found current_score = 0 # This will store the score from the current starting point # Traverse the array to find the maximum score for i in range(n): # Add the current element to the current score current_score += arr[i] # Update max_score if the current score is greater if current_score > max_score: max_score = current_score # If current score drops below 0, restart from the next index if current_score < 0: current_score = 0 return max_score"},{"question":"You are given a string `S` that consists of N characters where each character is either an opening brace \'(\' or a closing brace \')\'. Your task is to determine if the braces are balanced. Braces are considered balanced if every opening brace has a corresponding closing brace and the braces are properly nested. Input The first line contains an integer T, the number of test cases. The next T lines each contain a string S of length N. Output For each test case, print \\"YES\\" if the string has balanced braces, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 SAMPLE INPUT 3 () (() ()() SAMPLE OUTPUT YES NO NO Explanation For the first test case, the string \\"()\\" contains balanced braces. For the second test case, the string \\"(())\\" contains an extra opening brace, so it is not balanced. For the third test case, the string \\"()()\\" has balanced braces.","solution":"def is_balanced_braces(S): Determines if the braces in the string S are balanced. :param S: A string of braces \'(\' and \')\' :return: \\"YES\\" if the braces are balanced, \\"NO\\" otherwise stack = [] for char in S: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\" def process_test_cases(T, test_cases): Processes multiple test cases to determine if braces in each string are balanced. :param T: Number of test cases :param test_cases: List of strings to be tested :return: List of results for each test case results = [] for S in test_cases: results.append(is_balanced_braces(S)) return results"},{"question":"Given a grid of cells (represented by a 2D array) where each cell has a specific elevation value, you are tasked with determining the longest increasing path in the grid. From each cell, you can either move left, right, up, or down to a neighboring cell if the neighboring cell has a strictly higher elevation. You need to write a program that calculates the maximum length of the increasing path and returns it. Input: The input consists of multiple lines: - The first line contains two integers, M and N (1 ≤ M, N ≤ 1000), representing the number of rows and columns in the grid, respectively. - The following M lines each contain N space-separated integers representing the elevation values in the grid. Output: Output a single integer which is the length of the longest increasing path in the grid. Example: Input: 3 3 9 9 4 6 6 8 2 1 1 Output: 4 Explanation: In the given example, one of the longest increasing paths is `1 → 2 → 6 → 9`. The longest path increases in elevation with each step.","solution":"def longest_increasing_path(matrix): Given a 2D grid, calculate the longest increasing path. if not matrix or not matrix[0]: return 0 M, N = len(matrix), len(matrix[0]) dp = [[-1 for _ in range(N)] for _ in range(M)] def dfs(x, y): if dp[x][y] != -1: return dp[x][y] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and matrix[nx][ny] > matrix[x][y]: length = 1 + dfs(nx, ny) max_length = max(max_length, length) dp[x][y] = max_length return dp[x][y] max_path = 0 for i in range(M): for j in range(N): max_path = max(max_path, dfs(i, j)) return max_path # Example input input_matrix = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] # Example usage M, N = 3, 3 print(longest_increasing_path(input_matrix)) # Output: 4"},{"question":"In the magical kingdom of Grandland, there is a famous maze with hidden treasures. To ensure adventurers have a fair challenge, the maze designers periodically calculate the maze\'s complexity. The complexity of the maze is defined by a function c, which is determined as follows: Given two intervals [p, q] and [r, s] in the maze where 1 ≤ p < q ≤ m and 1 ≤ r < s ≤ m, with m being the length of the maze path. The complexity c of the maze is defined as the sum of the absolute differences between corresponding elements of these intervals. More formally: c = |b[p] - b[r]| + |b[p + 1] - b[r + 1]| + ... + |b[q] - b[s]| Where b is an array representing the maze path. However, calculating the optimal complexity is challenging because p and q, and r and s must not overlap. You are tasked with helping the maze designers find the maximum possible complexity for the given maze path. Input The first line contains a single integer m (2 ≤ m ≤ 105) — the length of the maze path. The second line contains m integers b1, b2, ..., bm (-109 ≤ bi ≤ 109) — the elements of the maze path array. Output Print a single integer representing the maximum possible complexity of the maze path. Examples Input 5 1 3 5 7 2 Output 12 Input 4 8 1 4 6 Output 14 Note In the first sample case, the optimal value of c is reached with intervals [1, 3] and [4, 5], where the resulting complexity is 12. In the second sample case, the optimal value of c is reached with intervals [1, 1] and [2, 3], where the resulting complexity is 14.","solution":"def max_complexity(m, b): Returns the maximum possible complexity for the given maze path. Parameters: m (int): Length of the maze path. b (list): List of integers representing the maze path. Returns: int: Maximum possible complexity of the maze path. max_b = max(b) min_b = min(b) return (max_b - min_b) * 2 # Example usage: # m = 5 # b = [1, 3, 5, 7, 2] # print(max_complexity(m, b)) # Expected output: 12 # m = 4 # b = [8, 1, 4, 6] # print(max_complexity(m, b)) # Expected output: 14"},{"question":"Anton is a librarian and he wants to organize the books in his library. He has exactly n books and each book has a unique ISBN number ranging from 1 to n. To make the library more accessible, he wants to start by arranging the books in such a way that all the books with prime ISBN numbers are at the beginning, followed by all the books with non-prime ISBN numbers. Maintain the original order of the books within each segment (prime and non-prime). -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of books in the library. The second line contains n distinct integers separated by spaces — the ISBN numbers of the books, a permutation of integers from 1 to n. -----Output----- Print a single line containing the ISBN numbers of the books arranged as described above. -----Examples----- Input 5 3 1 4 2 5 Output 3 2 5 1 4 Input 6 6 3 4 7 1 5 Output 3 7 5 6 4 1 -----Note----- In the first sample, the prime ISBN numbers are 3, 2, and 5. The non-prime ISBN numbers are 1 and 4. Hence, the output is 3 2 5 1 4. In the second sample, the prime ISBN numbers are 3, 7, and 5. The non-prime ISBN numbers are 6, 4, and 1. Hence, the output is 3 7 5 6 4 1.","solution":"def is_prime(num): Returns True if num is a prime number, False otherwise. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5)+1, 2): if num % i == 0: return False return True def organize_books(n, books): Returns the list of books organized with prime ISBNs first, followed by non-prime ISBNs. prime_books = [book for book in books if is_prime(book)] non_prime_books = [book for book in books if not is_prime(book)] return prime_books + non_prime_books"},{"question":"You are given an integer array `coins` of length `n` where `coins[i]` represents the value of the i-th coin. You are also given an integer `target`. Your goal is to determine the minimum number of coins needed to make the `target` amount. You can use each coin from `coins` an unlimited number of times. If it is not possible to make the `target` amount using any combination of the given coins, return -1. Write a function `minCoins(coins, target)` that takes the list `coins` and the integer `target` as input and returns the minimum number of coins needed to make up the `target`. Example 1: Input: coins = [1, 2, 5], target = 11 Output: 3 Explanation: 11 can be made with 3 coins (5 + 5 + 1) Example 2: Input: coins = [2], target = 3 Output: -1 Explanation: 3 can\'t be made with 2 as it is impossible Example 3: Input: coins = [1], target = 0 Output: 0 Explanation: 0 coins are needed to make the target amount of 0 Example 4: Input: coins = [1], target = 1 Output: 1 Explanation: 1 coin of 1 is needed Example 5: Input: coins = [1], target = 2 Output: 2 Explanation: 2 coins of 1 are needed Constraints: - `1 <= coins.length <= 10^4` - `1 <= coins[i] <= 10^4` - `0 <= target <= 10^4`","solution":"def minCoins(coins, target): Returns the minimum number of coins needed to make the target amount using the given coins. If it is not possible to make the target amount using any combination of the given coins, returns -1. # Initialize DP array with an impossible high value (target+1) for all amounts dp = [target + 1] * (target + 1) dp[0] = 0 # Base case: 0 coins needed to make amount 0 for amount in range(1, target + 1): for coin in coins: if coin <= amount: dp[amount] = min(dp[amount], dp[amount - coin] + 1) return dp[target] if dp[target] != target + 1 else -1"},{"question":"Two players are playing a game where they take turns making moves on a grid. The grid is initially filled with numbers. Each move, a player can choose a row or a column and remove all numbers from that row or column. The player who cannot make a move because the grid is empty loses the game. The objective is to determine which player will win if both play optimally. # Input Format: - An integer `N` representing the size of the grid (N x N) (2 ≤ N ≤ 50). - `N` lines follow, each containing `N` integers representing the initial state of the grid. # Output Format: - Print `Player 1` if the first player to make a move wins, otherwise print `Player 2`. # Note: - **Player 1** always starts the game. - Both players play optimally. # Example Input: ``` 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` Player 2 ``` Input: ``` 2 9 8 7 6 ``` Output: ``` Player 1 ``` # Explanation: - In the first example, no matter what row or column Player 1 chooses to remove, Player 2 can always win by making the optimal move. - In the second example, Player 1 can always remove a row or column in a way that leaves an unfavorable position for Player 2, ensuring Player 1\'s victory. The task is to implement a function that determines the winner of the game based on the grid configuration and the optimization strategies of the players.","solution":"def determine_winner(N, grid): Determines the winner of the game given the grid. Args: - N: int, size of the grid (N x N) - grid: List[List[int]], the initial state of the grid Returns: - str, \\"Player 1\\" if Player 1 wins and \\"Player 2\\" if Player 2 wins # The key observation is to leverage the parity of N # Player 1 wins if N is odd, Player 2 wins if N is even if N % 2 == 0: return \\"Player 1\\" else: return \\"Player 2\\""},{"question":"Aria is learning a new programming language and wants to practice functions. She\'s been given a task to write a simple function that processes a list of integers. The function should find the maximum sum of any non-empty sublist where the sublist contains consecutive elements of the original list. A sublist of a list is a sequence that can be derived from the list by deleting some or no elements from the beginning or the end of the list without changing the order of the remaining elements. Help Aria by writing a function that returns the maximum sum of any non-empty sublist of the integers list. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of integers in the list. The second line contains n space-separated integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4) — the elements of the list. Output Print a single integer — the maximum sum of any non-empty sublist of the list. Examples Input 5 1 2 -3 4 5 Output 9 Input 8 -2 -3 4 -1 -2 1 5 -3 Output 7 Input 3 -1 -2 -3 Output -1 Note In the first example, the sublist [4, 5] has the maximum sum of 9. In the second example, the sublist [4, -1, -2, 1, 5] has the maximum sum of 7. In the third example, the maximum sum of any non-empty sublist in [-1, -2, -3] is -1, as it is the largest single element in the list containing all negative numbers.","solution":"def max_sublist_sum(arr): Returns the maximum sum of any non-empty sublist where the sublist contains consecutive elements. if not arr: return 0 current_max = arr[0] global_max = arr[0] for i in range(1, len(arr)): current_max = max(arr[i], current_max + arr[i]) global_max = max(global_max, current_max) return global_max"},{"question":"River Crossing Problem In a faraway land, there exists a farmer who needs to get a wolf, a goat, and a cabbage across a river. However, the boat he owns is only large enough to carry himself and one other item (either the wolf, the goat, or the cabbage). To make the situation more complicated, the following rules must be observed: 1. If the wolf is left alone with the goat, the wolf will eat the goat. 2. If the goat is left alone with the cabbage, the goat will eat the cabbage. 3. The farmer is needed to prevent the above from happening, i.e., the wolf and the goat or the goat and the cabbage cannot be left together without the farmer being present. Write a function `river_crossing` that returns the steps the farmer needs to take to safely get all three items across the river. Each step should be represented as a tuple, which includes the item taken across the river and the resulting state on both sides of the river. For instance, a step might look like `(\\"goat\\", [\\"farmer\\", \\"wolf\\", \\"cabbage\\"], [\\"goat\\"])` which indicates that the farmer took the goat to the other side, leaving the wolf and cabbage on the original bank. Your function should return a list of such steps that leads to the safe transportation of all items to the other side of the river. Example: ``` def river_crossing(): # Your logic here. # Output should be: # [ # (\\"goat\\", [\\"farmer\\", \\"wolf\\", \\"cabbage\\"], [\\"goat\\"]), # ... # The remaining steps needed to solve the puzzle # ] ``` Assume the initial configuration is: - Left bank: `[\\"farmer\\", \\"wolf\\", \\"goat\\", \\"cabbage\\"]` - Right bank: `[]` Note: - There are multiple valid solutions to this problem. - You can return any correct sequence of steps as long as all the constraints are satisfied.","solution":"def river_crossing(): This function returns the sequence of steps to safely get the farmer, wolf, goat, and cabbage across the river. It represents each step as a tuple, with the item taken and the resulting state on both sides of the river. steps = [ (\\"goat\\", [\\"farmer\\", \\"wolf\\", \\"cabbage\\"], [\\"goat\\"]), # Farmer takes goat to the right bank (\\"farmer\\", [\\"wolf\\", \\"cabbage\\"], [\\"farmer\\", \\"goat\\"]), # Farmer returns alone to the left bank (\\"wolf\\", [\\"farmer\\", \\"cabbage\\"], [\\"wolf\\", \\"goat\\"]), # Farmer takes wolf to the right bank (\\"goat\\", [\\"cabbage\\"], [\\"farmer\\", \\"wolf\\"], [\\"goat\\"]), # Farmer returns with goat to the left bank (\\"cabbage\\", [\\"farmer\\", \\"goat\\"], [\\"cabbage\\", \\"wolf\\"]), # Farmer takes cabbage to the right bank (\\"farmer\\", [\\"goat\\"], [\\"farmer\\", \\"wolf\\", \\"cabbage\\"]), # Farmer returns alone to the left bank (\\"goat\\", [], [\\"farmer\\", \\"wolf\\", \\"cabbage\\", \\"goat\\"]), # Farmer takes goat to the right bank ] return steps"},{"question":"A palindrome is a string that reads the same backward as forward, e.g., madam. A special kind of palindrome called \\"shuffled palindrome\\" can be formed by rearranging the characters of a string such that it becomes a palindrome. For example, both \\"aaabb\\" and \\"ababb\\" can be shuffled to form \\"ababa\\" or \\"baaab,\\" which are palindromes. Given a string, determine if it can be rearranged into a palindrome. Input The first input line contains an integer n, representing the number of test cases. The following n lines each contain a single string consisting of lowercase alphabets. Output For each test case, output \\"Yes\\" if the string can be rearranged into a palindrome. Otherwise, output \\"No\\". Constraints 1 ≤ n ≤ 100 1 ≤ length of each string ≤ 100 Example Input: 4 abba abc aabbcc abcd Output: Yes No Yes No","solution":"def can_form_palindrome(n, strings): from collections import Counter results = [] for s in strings: char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count <= 1: results.append(\\"Yes\\") else: results.append(\\"No\\") return results def process_input_output(inputs): n = int(inputs[0]) strings = inputs[1:] return can_form_palindrome(n, strings)"},{"question":"Given a string S, determine if it is a valid palindrome with the option of removing at most one character. A valid palindrome is a string that reads the same forward and backward. Your task is to determine if the string can be a palindrome after deleting at most one character. # Input - The first line of input contains the integer T, the number of test cases. - Each of the next T lines contains one string S. # Output For each test case, print \\"Yes\\" if the string can be a palindrome after removing at most one character, otherwise print \\"No\\". # Constraints - 1 ≤ T ≤ 100 - 1 ≤ len(S) ≤ 10^5 # Sample Input ``` 3 abca racecar abcdef ``` # Sample Output ``` Yes Yes No ``` # Explanation - In the first test case, you can remove the character \'b\' to make the string \\"aca\\" which is a palindrome. - In the second test case, the string is already a palindrome. - In the third test case, there is no way to remove just one character to make it a palindrome.","solution":"def valid_palindrome_with_one_removal(S): Returns True if it is possible to form a palindrome by removing at most one character from the string S. Returns False otherwise. def is_palindrome(s, start, end): Helper function to check if the substring s[start:end+1] is a palindrome. while start < end: if s[start] != s[end]: return False start += 1 end -= 1 return True start, end = 0, len(S) - 1 while start < end: if S[start] != S[end]: # Check two subcases: removing either the start or the end character return is_palindrome(S, start+1, end) or is_palindrome(S, start, end-1) start += 1 end -= 1 return True def can_be_palindrome(T, test_cases): results = [] for S in test_cases: if valid_palindrome_with_one_removal(S): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"A group of villagers are arranging a series of races in a local festival. There are `y` races, and the distance for each race is given in an array `distances[]` where `distances[i]` represents the distance of the i-th race. Two friends, Rahul and Raj, are participating in the races. Rahul\'s speed is `p` meters per minute and Raj\'s speed is `q` meters per minute. They take turns running the races, with Rahul going first. A participant wins a race if they take less time to complete the race than the other. If both finish a race in the same time, the race is considered a draw and doesn\'t count as a win for either. Determine who wins more races. If both win the same number of races, the result should be \\"Draw\\". Example 1: Input: y = 5 p = 4, q = 5 distances = {400, 100, 300, 200, 150} Output: Raj Explanation: Rahul wins the races with distances 400 and 300 meters. Raj wins the races with distances 100, 200, and 150 meters. Example 2: Input: y = 4 p = 5, q = 5 distances = {500, 250, 750, 100} Output: Draw Explanation: All races are draws as both have the same speed. Your Task: You do not need to read input or print anything. Your task is to complete the function `race_winner()` which takes `y`, `p`, `q`, and `distances` as input parameters and returns one of the strings from {\\"Rahul\\", \\"Raj\\", \\"Draw\\"} based on the answer. Expected Time Complexity: O(y) Expected Auxiliary Space: O(1) Constraints: 1 ≤ y, p, q ≤ 10^5 1 ≤ distances[i] ≤ 10^18","solution":"def race_winner(y, p, q, distances): Determines the winner of the majority of races between Rahul and Raj. Parameters: y : int : number of races p : int : Rahul\'s speed (meters per minute) q : int : Raj\'s speed (meters per minute) distances : list of int : distances of the races Returns: str : winner of the majority of races - \\"Rahul\\", \\"Raj\\", or \\"Draw\\" rahul_wins = 0 raj_wins = 0 for i in range(y): rahul_time = distances[i] / p raj_time = distances[i] / q if rahul_time < raj_time: rahul_wins += 1 elif raj_time < rahul_time: raj_wins += 1 if rahul_wins > raj_wins: return \\"Rahul\\" elif raj_wins > rahul_wins: return \\"Raj\\" else: return \\"Draw\\""},{"question":"R2 technicians have long been building sophisticated networks for various organizations. They frequently handle projects that involve setting up, optimizing, and maintaining these networks. However, due to the complexity and the number of nodes (devices) and edges (connections) in these networks, it is critical to ensure that every node remains directly or indirectly connected through a single continuous pathway to avoid isolated sub-networks. You have been given a network diagram of R2\'s latest project, consisting of nodes and directed edges. Your task is to determine whether this network is a strongly connected component or not. A strongly connected component is a subset of the graph where every node can reach every other node in the subset. -----Input----- The first line contains two space-separated integers n and m (1 leq n leq 100,000 ; 0 leq m leq 200,000) — the number of nodes and the number of directed edges in the network diagram. Each of the following m lines contains two space-separated integers u and v (1 leq u, v leq n ; u ≠ v), representing a directed edge from node u to node v. It is guaranteed that the input graph does not contain multiple edges between the same pair of nodes in the same direction. -----Output----- Print \\"Strongly Connected\\" if the network forms a strongly connected component. Otherwise, print \\"Not Strongly Connected\\". -----Examples----- Input 3 3 1 2 2 3 3 1 Output Strongly Connected Input 4 3 1 2 2 3 4 1 Output Not Strongly Connected","solution":"def is_strongly_connected(n, m, edges): from collections import defaultdict, deque def bfs(start, graph): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) queue.extend(graph[node]) return visited if n == 0: return \\"Not Strongly Connected\\" # Adjacency list for the original graph and the reversed graph graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in edges: graph[u].append(v) reverse_graph[v].append(u) # Check reachability from first node all_nodes = set(range(1, n + 1)) visited_from_first = bfs(1, graph) if visited_from_first != all_nodes: return \\"Not Strongly Connected\\" # Check reachability from first node in the reversed graph reverse_visited_from_first = bfs(1, reverse_graph) if reverse_visited_from_first != all_nodes: return \\"Not Strongly Connected\\" return \\"Strongly Connected\\""},{"question":"You are given a binary string S of length n. In each move, you can pick a substring of S where all characters are \'1\', flip all characters in this substring to \'0\', and then remove this substring from S. Determine if there exists a sequence of moves to turn the entire string into a string of length zero. Example 1: Input: n = 6 S = \\"111000\\" Output: YES Explanation: You can remove the substring \\"111\\" in one move. Then S becomes \\"000\\", and all remaining characters can be removed in subsequent moves. Example 2: Input: n = 4 S = \\"1100\\" Output: YES Explanation: You can remove the substring \\"11\\" in one move. Then S becomes \\"00\\", and all remaining characters can be removed in subsequent moves. Example 3: Input: n = 3 S = \\"101\\" Output: NO Explanation: No possible sequence of moves can remove all characters from S. Your Task: You do not need to read input or print anything. Your task is to complete the function canRemoveAll() which takes the integer n and the string S as input parameters and returns a string \\"YES\\" or \\"NO\\". Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 1000 S contains only \'0\' and \'1\' characters","solution":"def canRemoveAll(n, S): Determines if it is possible to turn the entire binary string into a string of length zero by flipping and removing substrings of consecutive \'1\'s. Args: n (int): The length of the string S. S (str): A binary string of length n. Returns: str: \\"YES\\" if it is possible to remove all characters, otherwise \\"NO\\". # Check if there is any substring of \'101\' for i in range(1, n - 1): if S[i - 1] == \'1\' and S[i] == \'0\' and S[i + 1] == \'1\': return \\"NO\\" return \\"YES\\""},{"question":"You are given a string consisting of lowercase English letters and some target words. Your task is to check how many times all the target words can be simultaneously extracted from the given string, maintaining their order each time. When a word is extracted, its letters are no longer available for extraction. The target words are independent of each other, but within each occurrence, they must be in the same relative order as initially provided. -----Input----- The first line contains a single string s consisting of lowercase English letters (1 leq |s| leq 10^5). The second line contains an integer n (1 leq n leq 10^2) — the number of target words. Then, n lines follow, each containing one target word t_i consisting of lowercase English letters (1 leq |t_i| leq 100). -----Output----- Print one integer — the maximum number of times all the target words can be simultaneously extracted from the given string while maintaining their order. -----Example----- Input abacabacaba 3 ab ca ac Output 2","solution":"from collections import Counter def can_extract(s, target_words): Checks if all target words can be extracted simultaneously from string s and returns how many times this extraction is possible. s_counter = Counter(s) target_counters = [Counter(word) for word in target_words] min_extractions = float(\'inf\') for target in target_counters: min_extractions_for_target = float(\'inf\') for char in target: if char in s_counter: min_extractions_for_target = min(min_extractions_for_target, s_counter[char] // target[char]) else: return 0 min_extractions = min(min_extractions, min_extractions_for_target) return min_extractions def maximum_extractions(s, target_words): Returns the maximum number of times all target words can simultaneously be extracted from the given string while maintaining their order. return can_extract(s, target_words)"},{"question":"You are given a string containing only characters `\'a\'`, `\'b\'`, and `\'c\'`. You want to make this string a palindrome by possibly appending characters at the end of it. Your task is to determine the length of the shortest palindrome that can be formed by appending characters to the end of the given string. -----Input----- The input contains a single line with a string s (1 ≤ |s| ≤ 10^5) consisting only of characters `\'a\'`, `\'b\'`, and `\'c\'`. -----Output----- Print a single integer — the length of the shortest palindrome that can be formed. -----Examples----- Input abca Output 7 Input abab Output 5 Input abc Output 5 -----Note----- In the first example, appending \\"acba\\" to the end gives \\"abcaacba\\", which is a palindrome of length 7. In the second example, appending \\"ba\\" to the end gives \\"ababa\\", which is a palindrome of length 5. In the third example, appending \\"cba\\" to the end gives \\"abccba\\", which is a palindrome of length 6.","solution":"def shortest_palindrome_length(s: str) -> int: Returns the length of the shortest palindrome that can be formed by appending characters to the end of the given string. def is_palindrome(string): return string == string[::-1] n = len(s) for i in range(n): if is_palindrome(s[i:]): return n + i return 2 * n - 1 # This line is technically unreachable due to the loop guarantee."},{"question":"A sequence of numbers is considered \\"balanced\\" if the difference between the largest and the smallest number in the sequence is less than or equal to 1. For example, the sequence [2, 2, 3, 2, 3] is balanced because the difference between the largest (3) and the smallest (2) number is 1. On the other hand, [1, 2, 4, 2] is not balanced because the difference between the largest (4) and smallest (1) number is greater than 1. You are given an array of integers. Your task is to find the length of the longest contiguous subarray that is balanced. INPUT The first line contains an integer T, the number of test cases. Each test case starts with an integer n, the number of elements in the array, followed by n integers which are the elements of the array. OUTPUT For each test case, print the length of the longest contiguous balanced subarray. CONSTRAINTS 1 ≤ T ≤ 10^4 1 ≤ n ≤ 10^5 1 ≤ array elements ≤ 10^9 The sum of n over all test cases does not exceed 10^6. SAMPLE INPUT 2 5 2 2 3 2 3 4 1 2 4 2 SAMPLE OUTPUT 5 2","solution":"def longest_balanced_subarray_length(arr): Finds the length of the longest balanced contiguous subarray. Parameters: arr (list of int): The array to check Returns: int: The length of the longest balanced contiguous subarray max_length = 0 n = len(arr) start = 0 while start < n: min_val, max_val = arr[start], arr[start] end = start while end < n and max_val - min_val <= 1: min_val = min(min_val, arr[end]) max_val = max(max_val, arr[end]) if max_val - min_val <= 1: max_length = max(max_length, end - start + 1) end += 1 start += 1 return max_length def process_test_cases(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] results.append(longest_balanced_subarray_length(arr)) return results # Reading input and calling the function def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): n = int(data[index]) arr = list(map(int, data[index + 1: index + 1 + n])) test_cases.append((n, arr)) index += n + 1 results = process_test_cases(T, test_cases) for result in results: print(result)"},{"question":"Bella works for a delivery company that ships packages to various destinations. Each package has to follow a specific route defined by a series of waypoints. Bella has noticed that some waypoints are visited more than once in the same route, which is inefficient. She wants to optimize the routes by ensuring each waypoint is visited only once and all waypoints are accessed. Write a program that removes repeated waypoints but keeps the first occurrence of each waypoint. The waypoints should be visited in their original order to maintain the route sequence. -----Input----- The first line of input contains a single integer N (1 le N le 1000), the number of waypoints. The second line contains N integers separated by spaces, where each integer W (0 le W le 1000) represents a waypoint on the route. -----Output----- The output should be a single line containing the sequence of unique waypoints visited, in the order they first appeared in the input. -----Examples----- Sample Input 1: 5 1 2 3 2 1 Sample Output 1: 1 2 3 Sample Input 2: 10 5 5 5 5 5 5 5 5 5 5 Sample Output 2: 5","solution":"def remove_repeated_waypoints(N, waypoints): Removes repeated waypoints while keeping the first occurrence of each waypoint. Args: N : int : the number of waypoints waypoints : list[int] : list of waypoints Returns: list[int] : list of unique waypoints in the order they first appeared visited = set() unique_waypoints = [] for waypoint in waypoints: if waypoint not in visited: visited.add(waypoint) unique_waypoints.append(waypoint) return unique_waypoints"},{"question":"In a remote village, people use a unique numeral system to represent numbers. They call their system the “Bamboo Decimal System” and it follows these rules: - Each digit of a number is separated by a bamboo stick \'|\'. - The digits consist only of the characters A, B, and C. - A represents the digit 1, B represents the digit 2, and C represents the digit 3. For example, the number \\"A|B|C\\" represents the decimal number 123. Your task is to create a function that takes in a number represented in the Bamboo Decimal System and converts it to a regular decimal number. Input The first line is the integer T - the number of test cases. Each of the next T lines contains a number represented in the Bamboo Decimal System. Output For each test case, output the corresponding decimal number. Constraints 1 ≤ T ≤ 100 1 ≤ length of Bamboo number ≤ 100 SAMPLE INPUT 3 A|B C|A|A B|B|C|A SAMPLE OUTPUT 12 311 2231","solution":"def bamboo_to_decimal(bamboo_number): Converts a Bamboo Decimal System number into a regular decimal number. Parameters: bamboo_number (str): Bamboo number with digits separated by \'|\' Returns: int: decimal number equivalent # Mapping of Bamboo digits to decimal digits bamboo_map = {\'A\': \'1\', \'B\': \'2\', \'C\': \'3\'} # Split the bamboo_number by \'|\' bamboo_digits = bamboo_number.split(\'|\') # Convert each digit using the mapping and join to form a decimal number decimal_number = \'\'.join(bamboo_map[digit] for digit in bamboo_digits) return int(decimal_number) def bamboo_decimal_converter(test_cases): Converts multiple Bamboo Decimal System numbers to regular decimal numbers. Parameters: test_cases (list): List of Bamboo numbers (each a string) Returns: list: List of integers representing the decimal conversion of each Bamboo number return [bamboo_to_decimal(bamboo_number) for bamboo_number in test_cases]"},{"question":"You are given an undirected graph of N vertices and M edges where each vertex v_1 through v_N is labeled with a non-negative integer w_1 through w_N. Define a \\"weight-increasing path\\" in the graph to be a sequence of vertices v_{b_1}, v_{b_2}, ldots, v_{b_K} of length K such that each pair of consecutive vertices (v_{b_i}, v_{b_{i+1}}) is connected by an edge in the graph, and the labels of the vertices are strictly increasing: w_{b_i} < w_{b_{i+1}} for all 1 le i < K. Compute two quantities for the given graph: - The length L of the longest weight-increasing path. - The number P of weight-increasing paths of length L in the graph. Since this number may be large, provide the remainder of P when divided by the prime 998244353. -----Input----- The first line of input contains two integers N and M denoting the number of vertices and edges in the graph (1 leq N leq 10^4, 0 leq M leq 10^5). The next line contains N integers representing the labels w_1 through w_N of the vertices. Each label is an integer in the range [0, 10^6]. The next M lines describe the edges of the graph. Each line contains two integers u and v indicating an edge between vertices u and v (1 leq u, v leq N). -----Output----- Print a single line of output with two integers separated by a space. The first integer is L, and the second integer is P modulo the prime 998244353. -----Examples----- Sample Input 1: 6 7 1 2 5 4 3 6 1 2 1 3 2 5 3 4 3 5 4 6 5 6 Sample Output 1: 4 2 Sample Input 2: 5 4 10 20 30 40 50 1 2 2 3 3 4 4 5 Sample Output 2: 5 1 Sample Input 3: 5 5 7 7 7 7 7 1 2 2 3 3 4 4 5 1 5 Sample Output 3: 1 5","solution":"from collections import defaultdict, deque def longest_increasing_paths(N, M, weights, edges): MOD = 998244353 # Graph adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Sort vertices by weights sorted_vertices = sorted(range(1, N+1), key=lambda x: weights[x-1]) # Initialize DP arrays dp_length = [1] * N dp_count = [1] * N # Process vertices in increasing order of their weights for u in sorted_vertices: for v in graph[u]: if weights[v-1] > weights[u-1]: if dp_length[v-1] < dp_length[u-1] + 1: dp_length[v-1] = dp_length[u-1] + 1 dp_count[v-1] = dp_count[u-1] elif dp_length[v-1] == dp_length[u-1] + 1: dp_count[v-1] = (dp_count[v-1] + dp_count[u-1]) % MOD # Get length of the longest increasing path L = max(dp_length) # Get the count of such longest paths P = sum(dp_count[i] for i in range(N) if dp_length[i] == L) % MOD return L, P"},{"question":"Lena is designing a new cellular automaton for a class project. The grid is made up of cells, each of which can be either alive (`1`) or dead (`0`). A cell\'s state in the next iteration is determined by the states of its eight neighbors (left, right, up, down, and the four diagonals). The next state of a cell is determined as follows: - A live cell with fewer than two live neighbors dies (underpopulation). - A live cell with two or three live neighbors lives on to the next generation. - A live cell with more than three live neighbors dies (overpopulation). - A dead cell with exactly three live neighbors becomes a live cell (reproduction). Task Given an initial state of the grid (as a 2D list), return the state of the grid after one iteration. The size of the grid is `m x n` where `1 <= m, n <= 50`. Examples Input: ``` [[0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]] ``` Output: ``` [[0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0]] ``` Input: ``` [[1, 1], [1, 0]] ``` Output: ``` [[1, 1], [1, 1]] ```","solution":"def game_of_life(grid): Returns the state of the grid after one iteration according to the rules of the cellular automaton. def count_live_neighbors(x, y): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 1: count += 1 return count m, n = len(grid), len(grid[0]) next_state = [[0] * n for _ in range(m)] for i in range(m): for j in range(n): live_neighbors = count_live_neighbors(i, j) if grid[i][j] == 1: if live_neighbors < 2 or live_neighbors > 3: next_state[i][j] = 0 else: next_state[i][j] = 1 else: if live_neighbors == 3: next_state[i][j] = 1 else: next_state[i][j] = 0 return next_state"},{"question":"An autonomous robot is navigating a grid-based warehouse. The warehouse is represented as a N times M grid. Each cell in the grid can be either empty, contain an obstacle, or be the destination point for the robot. The robot can move up, down, left, or right, but cannot move into cells with obstacles or off the grid. The robot starts at a given starting position and needs to navigate to the destination with the minimum number of moves. You are tasked with finding the minimum number of moves the robot needs to reach the destination or determining if it is impossible for the robot to do so. ----- Input ----- The first line contains two integers N and M denoting the dimensions of the grid. The next N lines each contain M characters representing the grid: - \'.\' represents an empty cell. - \'#\' represents an obstacle. - \'S\' represents the starting position of the robot (there will be exactly one \'S\'). - \'D\' represents the destination position (there will be exactly one \'D\'). ----- Output ----- Output a single integer - the minimum number of moves the robot needs to reach the destination. If it is impossible for the robot to reach the destination, output -1. ----- Constraints ----- 1 leq N, M leq 100 ----- Example Input 1 ----- 5 5 S.... ... ..#.. ....# ....D ----- Example Output 1 ----- 8 ----- Example Input 2 ----- 3 3 S.. # ..D ----- Example Output 2 ----- -1","solution":"from collections import deque def min_moves_to_reach_destination(N, M, grid): # Locate the start and destination positions start = None destination = None for i in range(N): for j in range(M): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'D\': destination = (i, j) if not start or not destination: return -1 # BFS to find the shortest path queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add(start) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y, dist = queue.popleft() if (x, y) == destination: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] != \'#\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given a matrix with N rows and M columns. Each cell in the matrix contains a positive integer representing the height of that cell. You need to answer Q queries regarding this matrix. Each query is described by four integers l1, r1, l2, r2 where (l1, r1) is the upper left and (l2, r2) is the bottom right corner of a submatrix. For each given query, you need to find the maximum height within the specified submatrix. -----Constraints----- - 1 ≤ N, M ≤ 500 - 1 ≤ Q ≤ 1000 - 1 ≤ l1 ≤ l2 ≤ N - 1 ≤ r1 ≤ r2 ≤ M - 1 ≤ height of cell ≤ 10^4 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N M Q matrix[1][1] matrix[1][2] ... matrix[1][M] matrix[2][1] matrix[2][2] ... matrix[2][M] ... matrix[N][1] matrix[N][2] ... matrix[N][M] l1_1 r1_1 l2_1 r2_1 ... l1_Q r1_Q l2_Q r2_Q -----Output----- Print Q lines. The j-th line (1 ≤ j ≤ Q) should contain the answer to the j-th query. -----Sample Input----- 4 5 3 1 2 3 4 5 5 10 5 10 5 3 2 1 2 3 4 4 4 4 4 1 1 2 3 2 2 4 4 1 1 4 5 -----Sample Output----- 10 10 10 The matrix in this input is as follows: ``` 1 2 3 4 5 5 10 5 10 5 3 2 1 2 3 4 4 4 4 4 ``` - Query 1: Find the maximum height within the submatrix from (1, 1) to (2, 3) ``` 1 2 3 5 10 5 ``` The maximum height is 10. - Query 2: Find the maximum height within the submatrix from (2, 2) to (4, 4) ``` 10 5 10 2 1 2 4 4 4 ``` The maximum height is 10. - Query 3: Find the maximum height within the entire matrix ``` 1 2 3 4 5 5 10 5 10 5 3 2 1 2 3 4 4 4 4 4 ``` The maximum height is 10.","solution":"def find_max_height_in_submatrices(N, M, Q, matrix, queries): Function to find the maximum height in submatrices described by queries. :param N: int : number of rows in the matrix :param M: int : number of columns in the matrix :param Q: int : number of queries :param matrix: List[List[int]] : 2D array representing the matrix :param queries: List[Tuple[int, int, int, int]] : list of queries :return: List[int] : list of results for each query (max height in the submatrix) results = [] for (l1, r1, l2, r2) in queries: max_height = 0 for i in range(l1-1, l2): for j in range(r1-1, r2): if matrix[i][j] > max_height: max_height = matrix[i][j] results.append(max_height) return results"},{"question":"Create a function that takes a list of strings and returns a new list where each string is reversed, while maintaining the original order of the strings in the list. Examples: ```python reverse_strings([\\"hello\\", \\"world\\"]) == [\\"olleh\\", \\"dlrow\\"] reverse_strings([\\"abc\\", \\"def\\", \\"ghi\\"]) == [\\"cba\\", \\"fed\\", \\"ihg\\"] reverse_strings([\\"12345\\"]) == [\\"54321\\"] reverse_strings([]) == [] ```","solution":"def reverse_strings(strings): Takes a list of strings and returns a new list where each string is reversed, while maintaining the original order of the strings in the list. return [s[::-1] for s in strings]"},{"question":"Alice is fascinated by the concept of \\"circular strings\\". A circular string is a string that can be rotated to form another string. For instance, \\"cab\\" and \\"bca\\" are rotations of \\"abc\\". Alice has a string and wonders if it\'s possible to rotate it in such a manner that it becomes a palindrome. She asks you to help her figure this out. A palindrome is a string that reads the same forwards and backwards. You need to determine if any rotation of the string can be rearranged to form a palindrome. If it can, print \\"YES\\". Otherwise, print \\"NO\\". Input format: The first line contains a string s of length N consisting entirely of lowercase latin characters. Output format: Output a single line with the string \\"YES\\" if any rotation of the string can be rearranged to form a palindrome, otherwise output \\"NO\\". Constraints: 1 ≤ N ≤ 10^5 SAMPLE INPUT aab SAMPLE OUTPUT YES Explanation: The string \\"aab\\" can be rotated to form \\"baa\\" or \\"aab\\", either of these can be rearranged to \\"aba\\", which is a palindrome. Hence the output is \\"YES\\".","solution":"def can_form_palindrome(s): # Helper function to determine if a string can be rearranged to form a palindrome def can_rearrange_to_palindrome(string): from collections import Counter count = Counter(string) odd_count = sum(1 for c in count if count[c] % 2 != 0) return odd_count <= 1 if can_rearrange_to_palindrome(s): return \\"YES\\" else: return \\"NO\\""},{"question":"The task is to complete the merge() function which is used to implement Merge Sort. Example 1: Input: N = 5 arr[] = {12, 11, 13, 5, 6} Output: 5 6 11 12 13 Example 2: Input: N = 6 arr[] = {38, 27, 43, 3, 9, 82} Output: 3 9 27 38 43 82 Your Task: You don\'t have to read input or print anything. Your task is to complete the function merge() and mergeSort() where merge() takes the array, two indices low and mid, and mid and high, and mergeSort() recursively sorts the array in ascending order using the merge() function. Expected Time Complexity: O(N * log(N)). Expected Auxiliary Space: O(N). Constraints: 1 <= N <= 1000 1 <= arr[i] <= 1000","solution":"def merge(arr, l, m, r): Merges two subarrays of arr. First subarray is arr[l..m] Second subarray is arr[m+1..r] n1 = m - l + 1 n2 = r - m # create temp arrays L = [0] * n1 R = [0] * n2 # Copy data to temp arrays L[] and R[] for i in range(n1): L[i] = arr[l + i] for j in range(n2): R[j] = arr[m + 1 + j] # Merge the temp arrays back into arr[l..r] i = 0 # Initial index of first subarray j = 0 # Initial index of second subarray k = l # Initial index of merged subarray while i < n1 and j < n2: if L[i] <= R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 # Copy the remaining elements of L[], if there are any while i < n1: arr[k] = L[i] i += 1 k += 1 # Copy the remaining elements of R[], if there are any while j < n2: arr[k] = R[j] j += 1 k += 1 def mergeSort(arr, l, r): Main function that sorts arr[l..r] using merge() if l < r: # Same as (l+r)//2 but avoids overflow for large l and h m = l + (r - l) // 2 # Sort first and second halves mergeSort(arr, l, m) mergeSort(arr, m+1, r) merge(arr, l, m, r) # Example usage # arr = [12, 11, 13, 5, 6] # mergeSort(arr, 0, len(arr) - 1) # print(arr)"},{"question":"Implement a File Merge Operation. Input: First line contains T - Number of test cases. Each test case contains two positive integers N and M followed by a list of N integers and a list of M integers. Output: Output a single sorted list for each test case. Constraints: 1 ≤ T ≤ 200 1 ≤ N, M ≤ 100 -1000 ≤ integer values in the list ≤ 1000 SAMPLE INPUT 2 3 3 12 11 5 6 2 14 4 4 -1 0 1 0 3 -4 2 5 SAMPLE OUTPUT 2 5 6 11 12 14 -4 -1 0 0 1 2 3 5","solution":"def merge_and_sort_arrays(test_cases): results = [] for case in test_cases: N, M, list1, list2 = case merged_list = list1 + list2 merged_list.sort() results.append(merged_list) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N, M = map(int, input_lines[index].strip().split()) list1 = list(map(int, input_lines[index + 1].strip().split())) list2 = list(map(int, input_lines[index + 2].strip().split())) test_cases.append((N, M, list1, list2)) index += 3 return test_cases def format_output(results): return \'n\'.join(\' \'.join(map(str, result)) for result in results) def file_merge_operation(input_str): test_cases = parse_input(input_str) results = merge_and_sort_arrays(test_cases) return format_output(results)"},{"question":"Create a function that takes a string representing a Roman numeral and returns its integer equivalent. Roman numerals are represented by seven different symbols: I (1), V (5), X (10), L (50), C (100), D (500), M (1000). The string may contain these symbols in any valid combination following the standard Roman numeral rules: 1. A larger numeral before a smaller numeral indicates addition. For example: `VI = 5 + 1 = 6`. 2. A smaller numeral before a larger numeral indicates subtraction. For example: `IV = 5 - 1 = 4`. 3. The numerals should be combined primarily from largest to smallest, up to three times in a row for the same symbol. Some examples of valid Roman numerals are: ``` III = 3 IX = 9 LVIII = 58 MCMXCIV = 1994 ``` Examples of how the function should behave include: ``` Input: \\"III\\" Output: 3 Input: \\"IX\\" Output: 9 Input: \\"LVIII\\" Output: 58 Input: \\"MCMXCIV\\" Output: 1994 ``` Create a function with the signature: ```python def roman_to_int(roman: str) -> int: pass ```","solution":"def roman_to_int(roman: str) -> int: Converts a Roman numeral to an integer. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(roman): current_value = roman_values[char] if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"For a given string S, a substring is defined as a contiguous sequence of characters within the string. Write a function that determines if all the possible substrings of a given string are unique. For example, for the string \\"abcd\\", all the substrings are: [\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"abc\\", \\"bcd\\", \\"abcd\\"] and they are all unique. On the other hand, for the string \\"aa\\", the substrings are: [\\"a\\", \\"a\\", \\"aa\\"] and they are not unique because \\"a\\" appears twice. Write a program to check if all the substrings of a given string are unique. Constraints: * 1 leq length of S leq 10^3 Input: A single line containing a string S. Output: Print \\"Unique\\" if all possible substrings are unique, otherwise print \\"Not Unique\\". Example: Input 1: abcd Output 1: Unique Input 2: aa Output 2: Not Unique","solution":"def are_all_substrings_unique(S): substrings = set() length = len(S) for i in range(length): for j in range(i + 1, length + 1): substring = S[i:j] if substring in substrings: return \\"Not Unique\\" substrings.add(substring) return \\"Unique\\""},{"question":"Given an array A[] of N integers where every element appears twice except for one. The task is to find the element that appears only once. Implement the function findSingleElement that takes the array A and the integer N and returns the unique element. Example 1: Input: N = 5 A[] = {1, 2, 3, 2, 1} Output: 3 Example 2: Input: N = 7 A[] = {4, 5, 6, 5, 4, 6, 7} Output: 7 Explanation: In the first example, every element except 3 appears twice, so the output is 3. In the second example, every element except 7 appears twice, so the output is 7. Your Task: The task is to complete the function findSingleElement() which finds and returns the element that appears only once. Printing the output will be handled by driver code. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^7 0 ≤ A[i] ≤ 10^9","solution":"def findSingleElement(A, N): Returns the element that appears only once in the array A. Args: A: List[int] - List of integers where every element except one appears twice. N: int - Number of elements in the list A Returns: int - The unique element that appears only once. # XOR all the elements in the array result = 0 for elem in A: result ^= elem return result"},{"question":"You are given a list of strings of varying lengths, each comprising alphabets and digits. Your task is to find and return the longest common subsequence (LCS) of all the strings. If there are multiple LCS of the same length, return any. Note: - A subsequence of a string is obtained by deleting some (possibly zero) characters from the string without changing the order of the remaining characters. - The longest common subsequence is the longest sequence that can appear in the same relative order in all the input strings. ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - The first line of each test case contains N - the number of strings. - Each of the next N lines contains a string. ------ Output Format ------ For each test case, print on one line the longest common subsequence of all the given strings. If there is no common subsequence, print an empty string. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ |S_i| ≤ 100 where S_i is the length of the i-th string in the test case. ----- Sample Input 1 ------ 2 3 abcdef abdfgh abdf 2 xyz wxyz ----- Sample Output 1 ------ abdf xyz","solution":"def longest_common_subsequence(strs): if not strs: return \\"\\" # Helper function to find the LCS of two strings def lcs_of_two(str1, str2): m, n = len(str1), len(str2) dp = [[\\"\\"] * (n+1) for _ in range(m+1)] for i in range(1, m+1): for j in range(1, n+1): if str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] + str1[i-1] else: dp[i][j] = max(dp[i-1][j], dp[i][j-1], key=len) return dp[m][n] # Start with the first string as the common subsequence common = strs[0] # Iterate and update the common subsequence with each string for i in range(1, len(strs)): common = lcs_of_two(common, strs[i]) return common def process_input(T, cases): results = [] for case in cases: results.append(longest_common_subsequence(case)) return results"},{"question":"John is an avid gardener and loves taking care of his plants. He has a long row of plants that he waters regularly. However, he noticed that the amount of water each plant receives is not consistent. To ensure all his plants get the same amount of water, he can perform certain operations. Each plant i initially receives w_{i} units of water. John can do the following operations to adjust the water levels: 1. Choose a plant i and add one unit of water to it (w_{i} := w_{i} + 1). 2. Choose a plant i and remove one unit of water from it (w_{i} := w_{i} - 1). John wants to make all the plants receive the same amount of water using the minimum number of operations. -----Input----- The first line contains one number n (1 ≤ n ≤ 10^5), the number of plants. The second line contains n space separated integers w_{i} (1 ≤ w_{i} ≤ 10^5), representing the initial water units for the i-th plant. -----Output----- Output one integer, the minimum number of operations required to make all the plants receive the same amount of water. -----Examples----- Input 4 2 3 1 5 Output 5 Input 3 4 4 4 Output 0 -----Note----- In the first sample test, the optimal solution is to make all the water amounts equal to 3: add one unit to the first plant, add two units to the third plant, and remove two units from the fourth plant. This totals to 5 operations. In the second sample test, all plants already receive the same amount of water, so no operations are needed.","solution":"def minimum_operations_to_equalize_water(n, water_levels): Given n plants and their current water levels, this function returns the minimum number of operations needed to make all the plants\' water levels equal. :param n: int - Number of plants :param water_levels: List[int] - List of initial water levels for each plant :return: int - Minimum number of operations needed to equalize water levels median_level = sorted(water_levels)[n // 2] return sum(abs(level - median_level) for level in water_levels)"},{"question":"Problem Statement: A famous social media company has a photo-sharing feature, which allows users to upload their photos. The application\'s servers can handle only a limited number of photos per day efficiently, so they aim to optimize the photo deletion process. For this purpose, they have launched a new feature that organizes and maintains user photos based on the deletion priorities. Your task is to implement a function that mimics the behavior of this feature. You are given a list of \\"n\\" photos, each with a unique ID and a specific memory size. Additionally, you are provided with the maximum number of photos, \\"m\\", that the server can retain efficiently. Sort the photos in descending order based on their memory size. If two photos have the same memory size, sort them by their ID in ascending order. Return the list of the IDs of the top \\"m\\" photos after sorting. Input: - The first line contains an integer \\"n\\" denoting the number of photos. - The second line contains an integer \\"m\\" denoting the maximum number of photos that can be retained on the server. - Each of the next \\"n\\" lines contains two space-separated integers - the photo ID and its memory size. Output: - Print the list of the top \\"m\\" photo IDs after sorting based on the given criteria. Constraints: 1 ≤ n ≤ 1000 1 ≤ m ≤ n 1 ≤ photo ID ≤ 10^5 1 ≤ memory size ≤ 10^3 Example Input: 5 3 101 200 102 300 103 200 104 500 105 200 Example Output: 104 102 101","solution":"def get_top_photos(n, m, photos): Returns the list of top m photo IDs sorted by their memory size in descending order. If two photos have the same memory size, they are sorted by their ID in ascending order. Args: n : int : Number of photos m : int : Maximum number of photos that can be retained photos : List[Tuple[int, int]] : List of tuples where each tuple contains (photo ID, memory size) Returns: List[int] : List of photo IDs # Sorting the photos based on the given criteria sorted_photos = sorted(photos, key=lambda x: (-x[1], x[0])) # Selecting the top \'m\' photos and returning their IDs top_photos_ids = [photo[0] for photo in sorted_photos[:m]] return top_photos_ids"},{"question":"You are tasked with creating a function that calculates the resulting attributes of an adventurer based on their level and class. The function will determine the character\'s hit points (HP), attack bonus, and any special abilities. Here\'s how to approach it: 1. **Class Definitions:** - **Warrior:** Gains +10 HP per level, +2 attack bonus per level, special ability: \\"Power Strike\\" at level 5. - **Mage:** Gains +5 HP per level, +1 attack bonus per level, special ability: \\"Fireball\\" at level 3. - **Rogue:** Gains +7 HP per level, +1.5 attack bonus per level (round down), special ability: \\"Stealth\\" at level 2. 2. **Function Input:** - A non-negative integer `level` representing the character\'s level. - A string `class` representing the character\'s class (\\"Warrior\\", \\"Mage\\", or \\"Rogue\\"). 3. **Function Output:** - An object (associative array) containing: - `hp`: Total hit points. - `attack_bonus`: Total attack bonus. - `special_abilities`: A list of strings representing special abilities gained. **Examples:** ```python adventurer_attributes(0, \\"Warrior\\") == {\\"hp\\": 0, \\"attack_bonus\\": 0, \\"special_abilities\\": []} adventurer_attributes(3, \\"Mage\\") == {\\"hp\\": 15, \\"attack_bonus\\": 3, \\"special_abilities\\": [\\"Fireball\\"]} adventurer_attributes(5, \\"Warrior\\") == {\\"hp\\": 50, \\"attack_bonus\\": 10, \\"special_abilities\\": [\\"Power Strike\\"]} adventurer_attributes(4, \\"Rogue\\") == {\\"hp\\": 28, \\"attack_bonus\\": 6, \\"special_abilities\\": [\\"Stealth\\"]} ``` **Notes:** - Calculate HP and attack bonus based on the level and class. - Include special abilities only if the character is at or above the required level. - If the level is `0`, the character has no HP, no attack bonus, and no special abilities. Feel free to refer to the class definitions and examples provided to implement your function effectively.","solution":"def adventurer_attributes(level, char_class): attributes = { \\"hp\\": 0, \\"attack_bonus\\": 0, \\"special_abilities\\": [] } if char_class == \\"Warrior\\": attributes[\\"hp\\"] = level * 10 attributes[\\"attack_bonus\\"] = level * 2 if level >= 5: attributes[\\"special_abilities\\"].append(\\"Power Strike\\") elif char_class == \\"Mage\\": attributes[\\"hp\\"] = level * 5 attributes[\\"attack_bonus\\"] = level * 1 if level >= 3: attributes[\\"special_abilities\\"].append(\\"Fireball\\") elif char_class == \\"Rogue\\": attributes[\\"hp\\"] = level * 7 attributes[\\"attack_bonus\\"] = level * 1.5 // 1 if level >= 2: attributes[\\"special_abilities\\"].append(\\"Stealth\\") return attributes"},{"question":"Monica is a violin teacher who maintains a practice log for each of her students. Each log entry records the student\'s name, the date of practice, and the duration of practice in minutes. Monica wants to identify which student practiced the most in a given month. Your task is to help her determine this by analyzing the practice logs. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100 000) — the number of practice log entries. The following n lines each consist of a string and two integers: the student\'s name (a string of uppercase and lowercase English letters with a maximum length of 100), the date (an integer in the format YYYYMMDD representing the date of practice), and the duration (an integer representing the number of minutes of practice). Assume that the dates are within a single year and month. -----Output----- Print the name of the student who practiced the most in the given month. If there are multiple students with the highest total practice time, print the lexicographically smallest name. -----Example----- Input 5 Alice 20220301 30 Bob 20220301 45 Alice 20220302 60 Bob 20220303 15 Alice 20220303 25 Output Alice Input 3 John 20230501 20 Jane 20230502 20 John 20230503 20 Output John -----Note----- In the first example, Alice\'s total practice time is 115 minutes (30 + 60 + 25) and Bob\'s total practice time is 60 minutes (45 + 15). Alice practiced the most, so the output is \\"Alice\\". In the second example, John and Jane both practiced for 40 minutes, but John comes first lexicographically, so the output is \\"John\\".","solution":"def student_with_most_practice(n, logs): from collections import defaultdict practice_times = defaultdict(int) for log in logs: name, date, duration = log practice_times[name] += duration max_time = max(practice_times.values()) students_with_max_time = [name for name, time in practice_times.items() if time == max_time] return min(students_with_max_time)"},{"question":"You are given a sequence of integers and you need to determine if it is possible to transform it into a monotonic increasing sequence by removing at most one element from it. A sequence is considered monotonic increasing if for every element `S[i]`, `S[i] <= S[i + 1]`. Write a function `can_be_increasing(nums: List[int]) -> bool` that takes a list of integers `nums` and returns a boolean value indicating whether it is possible to make the sequence monotonic increasing by removing at most one element. ------ Input ------ - A single line containing a list of integers `nums` (1 ≤ nums.length ≤ 10^5) where each element `nums[i]` ( -10^9 ≤ nums[i] ≤ 10^9 ) represents the sequence. ------ Output ------ - Print a single line containing `True` if it is possible to make the sequence monotonic increasing by removing at most one element, otherwise print `False`. ------ Example ------ For `nums = [1, 2, 10, 5, 7]`, the output should be `True` because by removing `10`, the sequence becomes `[1, 2, 5, 7]` which is monotonic increasing. For `nums = [2, 3, 1, 2]`, the output should be `False` because there’s no way to remove just one element to make the sequence monotonic increasing.","solution":"from typing import List def can_be_increasing(nums: List[int]) -> bool: def is_increasing(sequence): return all(sequence[i] < sequence[i+1] for i in range(len(sequence) - 1)) for i in range(len(nums)): if is_increasing(nums[:i] + nums[i+1:]): return True return False"},{"question":"Given a list of integers, find the maximum sum of any non-empty subarray of that list. -----Constraints----- - The length of the list is between 1 and 10^5. - Each integer in the list is between -10^9 and 10^9. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n -----Output----- Print the maximum sum of any non-empty subarray. -----Sample Input----- 5 -2 1 -3 4 -1 2 1 -5 4 -----Sample Output----- 6 Explanation: The subarray [4, -1, 2, 1] has the maximum sum 6.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any non-empty subarray. max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an array of n positive integers a_1, a_2, ..., a_n. You have to perform a series of operations to make all elements of the array equal. In each operation, you can choose any pair of adjacent elements (a_i, a_{i+1}) and replace both of them with gcd(a_i, a_{i+1}), where gcd(x, y) is the greatest common divisor of x and y. Your task is to find the minimum number of operations required to make all elements of the array equal. -----Input----- The first line of the input contains one integer n (2 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9). -----Output----- Print a single integer — the minimum number of operations required to make all elements of the array equal. -----Examples----- Input 3 12 15 18 Output 2 Input 4 5 5 5 5 Output 0 -----Note----- In the first example, the sequence of operations to make all elements equal is as follows: After one operation, the array can become [3, 3, 18] (since gcd(12, 15) = 3). After one more operation, the array becomes [3, 3, 3] (since gcd(3, 18) = 3). So, the minimum number of operations required is 2. In the second example, all elements of the array are already equal, so no operations are needed. Hence, the answer is 0.","solution":"from math import gcd from functools import reduce def min_operations_to_make_equal(arr): Returns the minimum number of operations required to make all elements of the array equal. An operation consists of choosing any pair of adjacent elements and replacing both of them with gcd(x, y). def array_gcd(array): return reduce(gcd, array) n = len(arr) if n == 1: return 0 overall_gcd = array_gcd(arr) # Check if array is already uniform if all(x == overall_gcd for x in arr): return 0 return n - 1"},{"question":"Given an array `A` of `N` integers, you need to calculate the minimum possible sum of the maximum subarray of size `K` that can be obtained after performing at most `D` swaps. A single swap consists of exchanging any two elements of the array. You can perform at most `D` such swaps to rearrange the array and then compute the sum of the maximum subarray of size `K` for the rearranged array. Input * The input consists of three integers, `N`, `K`, and `D`, followed by an array `A` of `N` integers. * The first line contains three integers `N`, `K`, and `D`. * The next line contains `N` integers representing the elements of the array `A`. Output Print the minimum possible sum of the maximum subarray of size `K` that can be obtained after at most `D` swaps. Constraints * 1 ≤ ( K ) ≤ ( N ) ≤ ( 10^5 ) * 0 ≤ ( D ) ≤ ( 10^5 ) * -10^9 ≤ ( A[i] ) ≤ 10^9 Examples Input 5 3 1 1 2 5 2 1 Output 9 Input 6 2 2 3 3 5 5 1 1 Output 3","solution":"def min_sum_max_subarray(N, K, D, A): Returns the minimum possible sum of the maximum subarray of size K that can be obtained after performing at most D swaps. # Sort the array to have the smallest elements in the leading positions A.sort() # Considering that we won\'t use more than D swaps, we might just need to compute the sum of # the first K elements in the sorted array, because sorting will give us the smallest sums # available for any subarray of size K. min_sum = sum(A[:K]) return min_sum"},{"question":"Divya is working on a text processing task. She has a large piece of text from which she wants to remove all the non-alphanumeric characters and then transform all the letters to lowercase. However, spaces should be retained. Write a function that takes a string s as input and returns that string after removing all non-alphanumeric characters (except spaces) and converting all letters to lowercase. ----Input---- The input contains one string s (1 le |s| le 10^5) which is a large piece of text. ----Output---- Output the transformed string after processing. ---Example--- Input Hello, World!! Welcome to the 2021 @Coding Competition. #FunTimes :) Output hello world welcome to the 2021 coding competition funtimes ---Note--- In the above example, all punctuation marks and special symbols (such as `,`, `!`, `@`, `#`, `.`) are removed and all letters are converted to lowercase. The spaces between words are retained.","solution":"import re def process_text(s: str) -> str: Removes all non-alphanumeric characters (except spaces) and converts all letters to lowercase. Parameters: s (str): The input string. Returns: str: The processed string. # Remove non-alphanumeric characters except spaces cleaned_s = re.sub(r\'[^a-zA-Z0-9 ]\', \'\', s) # Convert to lowercase return cleaned_s.lower()"},{"question":"Given an array of positive integers, you must perform exactly one operation: choose any two elements and replace both of them with their sum. Your task is to find the maximum possible value of the sum obtained after performing this operation. Input First line of input contains an integer T, denoting the number of test cases. For each test case, the first line contains an integer n, denoting the number of elements in the array. The second line contains n space-separated positive integers, representing the array elements. Output For each test case, output a single integer, which is the maximum possible value of the sum obtained after performing the described operation. Constraints 1 ≤ T ≤ 100 2 ≤ n ≤ 10^3 1 ≤ array[i] ≤ 10^6 Example Input: 2 3 1 2 3 4 10 20 30 40 Output: 5 70 Explanation For the first test case, choose the elements 2 and 3, replacing them with their sum (5). Thus, the maximum possible sum after one operation is 5. For the second test case, choose the elements 30 and 40, replacing them with their sum (70). Hence, the maximum possible sum after one operation is 70.","solution":"def max_sum_after_one_operation(t, test_cases): Returns the maximum possible value of the sum obtained after performing the described operation for each test case. :param t: int, number of test cases :param test_cases: list of tuples, each tuple contains (n, array) for each test case :return: list of int, maximum possible sums for each test case results = [] for n, arr in test_cases: # The maximum sum after one operation is obtained by taking the two largest numbers\' sum. arr.sort() max_sum = arr[-1] + arr[-2] results.append(max_sum) return results # Helper function to parse input if needed def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) test_cases = [] line_index = 1 for _ in range(t): n = int(lines[line_index]) array = list(map(int, lines[line_index + 1].split())) test_cases.append((n, array)) line_index += 2 return t, test_cases"},{"question":"Your task is to write a function that processes a list of dictionaries and aggregates values based on a specified key. For example: ```python data = [ {\\"category\\": \\"A\\", \\"value\\": 10}, {\\"category\\": \\"B\\", \\"value\\": 20}, {\\"category\\": \\"A\\", \\"value\\": 5}, {\\"category\\": \\"C\\", \\"value\\": 7}, {\\"category\\": \\"B\\", \\"value\\": 3}, ] result = aggregate_by_key(data, \'category\') print(result) # Output: {\'A\': 15, \'B\': 23, \'C\': 7} ``` Notes: - The function takes two arguments: a list of dictionaries and the key to aggregate by. - Dictionaries in the list will contain the specified key and a numerical value associated with it. - The function should return a dictionary where each key is a unique category from the input list and the value is the sum of values associated with that category. - If the input list is empty, return an empty dictionary. - You can assume all dictionaries in the list have the specified key and the value is always a number. - The function should handle large lists efficiently.","solution":"def aggregate_by_key(data, key): Aggregates values in a list of dictionaries based on the specified key. Args: data (list of dict): The list of dictionaries to process. key (str): The key to aggregate values by. Returns: dict: A dictionary where each key is a unique category from the input list and the value is the sum of values associated with that category. aggregated_result = {} for item in data: category = item[key] value = item[\'value\'] if category in aggregated_result: aggregated_result[category] += value else: aggregated_result[category] = value return aggregated_result"},{"question":"Paul loves playing with numbers, and his current interest is in palindromes. He wants to know the number of palindrome integers within a given range [L, R] inclusive. A palindrome integer is a number that remains the same when its digits are reversed (e.g., 121, 1331). Input: - The first line contains a single integer T, the number of test cases. - The next T lines each contain two integers L and R representing the range. Output: - For each test case, print the number of palindrome integers within the range [L, R]. Constraints: 1 ≤ T ≤ 1000 1 ≤ L ≤ R ≤ 10^6 SAMPLE INPUT 2 1 10 100 200 SAMPLE OUTPUT 9 10","solution":"def is_palindrome(n): Returns True if n is a palindrome, otherwise False. str_n = str(n) return str_n == str_n[::-1] def count_palindromes_in_range(T, ranges): For each range [L, R] in ranges, count the number of palindrome integers. Parameters: T (int): Number of test cases. ranges (list of tuples): Each tuple contains two integers (L, R). Returns: list of int: A list containing the palindrome counts for each range. results = [] for L, R in ranges: count = 0 for num in range(L, R + 1): if is_palindrome(num): count += 1 results.append(count) return results def main(input): Main function to process the input and output the results. data = input.strip().split() T = int(data[0]) ranges = [] index = 1 for _ in range(T): L = int(data[index]) R = int(data[index + 1]) ranges.append((L, R)) index += 2 results = count_palindromes_in_range(T, ranges) for result in results: print(result)"},{"question":"In a strange kingdom, there are n cities connected by m bidirectional roads. Each road has a length (distance) associated with it. The kingdom is interested in building new infrastructure, and an important aspect of this is determining the shortest paths between its cities. Your task is to write a program to help the kingdom’s engineers by finding the shortest path from a given starting city to all other cities, and output the lengths of these shortest paths. -----Input----- The first line of input contains two space-separated integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of cities and the number of roads. Each of the following m lines describes a road with three space-separated integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10000), where u and v are cities connected by a road and w is the length of this road. The next line contains an integer s (1 ≤ s ≤ n) — the starting city. -----Output----- Print n integers, where the i-th integer is the length of the shortest path from the starting city s to city i. If there is no path from s to city i, print -1 for that city instead. -----Example----- Input 5 6 1 2 3 1 3 10 2 3 1 2 4 2 3 4 7 4 5 1 1 Output 0 3 4 5 6 Input 3 3 1 2 2 1 3 4 2 3 1 2 Output 2 0 1","solution":"import heapq def shortest_paths(n, m, roads, start): # Create adjacency list for the graph adj = {i: [] for i in range(1, n + 1)} for u, v, w in roads: adj[u].append((v, w)) adj[v].append((u, w)) # Initialize distances with infinity distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 # Min-heap to get the city with the smallest distance heap = [(0, start)] while heap: current_distance, current_city = heapq.heappop(heap) # If the distance is greater than the known shortest distance, skip if current_distance > distances[current_city]: continue # Check neighboring cities for neighbor, weight in adj[current_city]: distance = current_distance + weight # If a shorter path is found if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) # Prepare the result based on distances result = [] for i in range(1, n + 1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result"},{"question":"Vikas loves playing with arrays. He has an array of n integers and a series of q operations. Each operation is defined by two integers l and r, and involves calculating the sum of elements in the subarray from index l to index r (inclusive). However, since Vikas is a fan of unique sums, he only wants the result of each operation if the subarray elements are distinct. Write a program to help Vikas find the sum of elements for each operation where all elements in the specified subarray are distinct. If any element is repeated within the subarray, return -1 for that operation. Input The first line contains two integers n (1 ≤ n ≤ 1000) and q (1 ≤ q ≤ 1000), representing the number of elements in the array and the number of operations. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), representing the elements of the array. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n), representing the indices (1-based) for each operation. Output For each operation, output the sum of elements in the subarray from index l to index r if the subarray has distinct elements. If there are repeated elements in the subarray, output -1. Examples Input 6 3 1 2 3 3 2 1 1 3 4 6 2 5 Output 6 6 -1 Input 5 2 5 4 3 2 1 1 5 2 3 Output 15 7","solution":"def unique_subarray_sum(n, q, array, operations): def is_unique(subarray): return len(subarray) == len(set(subarray)) results = [] for l, r in operations: subarray = array[l-1:r] if is_unique(subarray): results.append(sum(subarray)) else: results.append(-1) return results"},{"question":"Alice is playing a game where she can move on a 2D grid. Each cell in the grid has a certain cost associated with stepping on it. Alice wants to move from the top-left corner of the grid to the bottom-right corner, but she can only move either to the right or down. She wishes to finish her journey with the minimum possible cost. Given a matrix of integers representing the cost of each cell, determine the minimum cost to move from the top-left corner to the bottom-right corner of the grid. Example grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] The cell costs are: 1 3 1 1 5 1 4 2 1 The minimum path cost is 1 → 3 → 1 → 1 → 1 = 7. Function Description Complete the minPathCost function in the editor below. minPathCost has the following parameter: int grid[m][n]: a 2D array of integers representing the cost of each cell. Returns - int: the minimum cost to move from the top-left to the bottom-right of the grid. Input Format The first line contains two integers m and n, the dimensions of the grid. Each of the next m lines contains n space-separated integers, the costs of each cell in the grid. Constraints 1 ≤ m, n ≤ 100 1 ≤ grid[i][j] ≤ 1000 Sample Input 0 3 3 1 3 1 1 5 1 4 2 1 Sample Output 0 7 Explanation 0 There\'s only one path to achieve the minimum cost, which is 1 → 3 → 1 → 1 → 1, totaling 7. Therefore, we return 7. Sample Input 1 2 3 1 2 3 4 5 6 Sample Output 1 12 Explanation 1 One of the paths to achieve the minimum cost is 1 → 2 → 3 → 6, totaling 12. Therefore, we return 12. Sample Input 2 3 2 1 2 4 6 7 8 Sample Output 2 17 Explanation 2 One of the paths to achieve the minimum cost is 1 → 2 → 6 → 8, totaling 17. Therefore, we return 17.","solution":"def minPathCost(grid): Returns the minimum cost to move from the top-left to the bottom-right of the grid. m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[m - 1][n - 1]"},{"question":"You\'ve been hired by an e-commerce company to analyze their product pricing system. The company wants to introduce a discount scheme to boost sales. The new price of a product after applying the discount needs to be calculated as follows: 1. If the product price is more than `500`, apply a `20%` discount. 2. If the product price is between `200` and `500` inclusive, apply a `10%` discount. 3. If the product price is less than `200`, apply a `5%` discount. Your task is to write a function `apply_discount(price, is_special_customer)` that takes two inputs: - `price`: The original price of the product as a float. - `is_special_customer`: A boolean indicating whether the customer is special or not. Special customers get an additional `5%` discount on the discounted price regardless of the original price of the product. Your function should return the new price of the product after all applicable discounts as a float. For example: - `apply_discount(600, False)` should return `480.0` because a `20%` discount is applied to `600`. - `apply_discount(250, True)` should return `213.75` because a `10%` discount is first applied to `250` making it `225`, and then an additional special customer `5%` discount is applied. - `apply_discount(150, True)` should return `135.375` because a `5%` discount is first applied to `150` making it `142.5`, and then an additional special customer `5%` discount is applied. Write the function: ```python def apply_discount(price, is_special_customer): if price > 500: price *= 0.80 elif 200 <= price <= 500: price *= 0.90 else: price *= 0.95 if is_special_customer: price *= 0.95 return price ```","solution":"def apply_discount(price, is_special_customer): Calculate the new price after applying the relevant discount(s) based on the price and whether the customer is special or not. Args: price (float): The original price of the product. is_special_customer (bool): Indicates if the customer is special. Returns: float: The new price after discounts. if price > 500: price *= 0.80 elif 200 <= price <= 500: price *= 0.90 else: price *= 0.95 if is_special_customer: price *= 0.95 return price"},{"question":"Given two integers N and M, output the first M terms of the sequence S where each term is the sum of digits of the previous term starting from N. For example, if N is 123, the first term is the sum of digits of 123, which is 6. The second term is the sum of digits of 6, which is still 6, and so on. -----Constraints----- - 1 leq N leq 10^9 - 1 leq M leq 10^5 -----Input----- Input is given from Standard Input in the following format: N M -----Output----- Output the first M terms of the sequence S, each separated by a whitespace. -----Sample Input----- 123 5 -----Sample Output----- 6 6 6 6 6","solution":"def sum_of_digits(num): Helper function to calculate the sum of digits of a number. return sum(int(digit) for digit in str(num)) def sequence_of_sums(N, M): Generate the first M terms of the sequence where each term is the sum of digits of the previous term starting from N. current_value = sum_of_digits(N) result = [current_value] for _ in range(1, M): current_value = sum_of_digits(current_value) result.append(current_value) return result"},{"question":"Alice is organizing a coding competition. She wants to ensure that the participants are assigned unique teams and that no team has more than one participant who belongs to the same skill level. She has a list of participants with their respective skill levels, and she needs to create the teams accordingly. Can you write a program to help Alice form the teams? Constraints * 1 ≤ N ≤ 100 * 1 ≤ K ≤ 100 * 1 ≤ skill level ≤ K Input Input is given from Standard Input in the following format: N K skill_1 skill_2 ... skill_N Output Print a single integer: the number of minimum possible teams that can be formed following the rules: 1. Each team should consist of participants. 2. No two participants in the same team should have the same skill level. Examples Input 6 3 1 2 3 1 2 3 Output 2 Input 8 5 1 1 2 2 3 3 4 5 Output 4","solution":"def min_teams(N, K, skill_levels): from collections import Counter # Count the number of participants for each skill level skill_count = Counter(skill_levels) # The minimum number of teams required is the maximum count of any skill level max_count = max(skill_count.values()) return max_count if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) K = int(data[1]) skill_levels = list(map(int, data[2:])) print(min_teams(N, K, skill_levels))"},{"question":"A famous treasure hunter has discovered a series of largescale underground tunnels in an ancient ruin, with multiple entry and exit points. His team wants to comprehensively explore these tunnels but needs help in determining the most efficient way to cover all tunnels while starting from a specific entry point. Your assignment is to write an algorithm that generates a travel plan using the Depth-First Search (DFS) approach, ensuring that all tunnels are explored without retracing steps. Your function exploreTunnels should take a single input, a map of the tunnels, represented as a dictionary. The keys in the dictionary are the different points (entry, exit, or intersection points) in the tunnel system. The values are lists of points that are directly connected to the key point. The starting point for exploration will always be the first key in the dictionary. Consider the following tunnel map as an example: map = {\'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\', \'E\'], \'C\': [\'A\', \'F\'], \'D\': [\'B\'], \'E\': [\'B\', \'F\'], \'F\': [\'C\', \'E\']} In this example, point \'A\' is connected to \'B\' and \'C\', point \'B\' is connected to \'A\', \'D\', and \'E\', and so on. The goal is to return a list of points in the order they should be explored using DFS starting from the first key in the dictionary. Here is an example: Based on the given map, starting from point \'A\': exploreTunnels(map) == [\'A\', \'B\', \'D\', \'E\', \'F\', \'C\'] Note: - Each point should be visited exactly once in the traversal. - In case of multiple connected points to visit next, visit them in lexicographic order. - Return a list of all points in the order they are explored.","solution":"def exploreTunnels(tunnel_map): Explore all tunnels using DFS starting from the first key in the dictionary. Parameters: tunnel_map (dict): A dictionary representing the tunnel system, where each key is a point in the tunnel, and the value is a list of directly connected points. Returns: list: A list of points in the order they are explored. starting_point = list(tunnel_map.keys())[0] visited = set() travel_plan = [] def dfs(point): visited.add(point) travel_plan.append(point) for neighbor in sorted(tunnel_map[point]): if neighbor not in visited: dfs(neighbor) dfs(starting_point) return travel_plan"},{"question":"John is rehearsing for his piano recital. To perfect his performance, he maintains a detailed practice log. Each entry in his log consists of a date and a score that represents his performance on that particular day. The score is an integer between -100 and 100. John wants to identify the longest streak of days where his performance score was non-negative. This will help him understand how many consecutive practice days he was improving or maintaining his skill level. -----Input----- The first line of the input contains a single integer 1 le N le 100000. N is the number of days in John\'s practice log. The next line contains N integers separated by spaces. These integers are the practice scores on each of the N days, where each score is between -100 and 100. -----Output----- Output a single integer; the length of the longest streak of days where John\'s performance score was non-negative. If there was no day with a non-negative score, output 0. -----Examples----- Sample Input: 10 -1 2 3 -5 4 0 -2 3 4 5 Sample Output: 3","solution":"def longest_non_negative_streak(scores): Returns the length of the longest streak of non-negative scores from the given list. max_streak = 0 current_streak = 0 for score in scores: if score >= 0: current_streak += 1 if current_streak > max_streak: max_streak = current_streak else: current_streak = 0 return max_streak"},{"question":"David is organizing a marathon event. There are exactly n landmarks along the marathon route, positioned in a straight line at meters 1, 2, ..., n from the starting point. David wants to select exactly two landmarks, such that the distance between them is exactly d meters. Determine how many distinct ways there are to choose such pairs of landmarks. Each landmark appears at its specific position exactly once. Pairs (a, b) and (b, a) are considered equal. Pairs (a, b), where a = b, are not allowed. -----Input----- The input consists of a single line containing two integers n and d (1 le n le 10^{14}, 1 le d le n-1) — the total number of landmarks and the desired distance between the pair of landmarks, respectively. -----Output----- Print a single integer representing the number of ways to choose the pair of landmarks satisfying the condition of being exactly d meters apart. Print 0 if there are no such pairs. -----Examples----- Input 10 3 Output 8 Input 5 2 Output 4 Input 6 5 Output 2 Input 1000000000000 500000000000 Output 500000000000 -----Note----- In the first example, David can choose the pairs of landmarks (1, 4), (2, 5), (3, 6), (4, 7), (5, 8), (6, 9), (7, 10), making a total of 8 such pairs. In the second example, David can choose the pairs of landmarks (1, 3), (2, 4), (3, 5), making a total of 4 such pairs. In the third example, David can choose the pairs of landmarks (1, 6), making a total of 2 possible pairs if considered both ways. In the fourth example, David can choose 500000000000 pairs of landmarks starting from (1, 500000000001) up to (500000000000, 1000000000000), making a total of 500000000000 such pairs.","solution":"def count_pairs(n, d): Returns the number of ways to choose pairs of landmarks such that the distance between them is exactly d meters. if d >= n: return 0 return n - d"},{"question":"Bob is organizing a small programming competition. There are N participants and each participant has a unique ID between 1 and N. Bob wants to create teams of exactly K participants. A team is valid if each participant in the team has an ID that is strictly greater than the ID of the previous participant in the team. Bob wants to find out how many valid teams can be formed in total. -----Constraints----- - 1 leq N leq 50 - 1 leq K leq N -----Input----- The input is given from Standard Input in the following format: N K -----Output----- Print the number of valid teams that can be formed. -----Sample Input----- 5 3 -----Sample Output----- 10 - The following are the 10 valid teams that can be formed: - (1, 2, 3) - (1, 2, 4) - (1, 2, 5) - (1, 3, 4) - (1, 3, 5) - (1, 4, 5) - (2, 3, 4) - (2, 3, 5) - (2, 4, 5) - (3, 4, 5)","solution":"from math import comb def count_valid_teams(N, K): Returns the number of valid teams that can be formed with K participants out of N participants. return comb(N, K)"},{"question":"Allie is building a custom rectangular box with specific dimensions. In this box, her purpose is to store cubical items. Each item can have various sizes, but all items in the box must be packed in such a way that the box is completely filled without any remaining space. Consider two positive integers, `height` and `width`, which define the dimensions of the box. Given multiple possible sizes of the cubical items that can be fitted inside the box, you are tasked with finding the size of the largest cube that can fit an integer number of times along both dimensions (height and width) of the box. -----Constraints----- - 1 ≤ height ≤ 10^6 - 1 ≤ width ≤ 10^6 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: height width -----Output----- Print the size (side length) of the largest cube that can fill the given box without any remaining space. -----Sample Input----- 6 9 -----Sample Output----- 3 Explanation: - The largest cube that can fit an integer number of times along both dimensions has a side length of 3.","solution":"def largest_cube_size(height, width): This function takes the height and width of the box and returns the side length of the largest cube that can completely fill the box. from math import gcd return gcd(height, width) # Example usage: # height = 6 # width = 9 # print(largest_cube_size(height, width)) # Output: 3"},{"question":"You are given an integer array representing the number of hours worked each day for a week by multiple employees in a company. We want to summarize the total number of hours worked by each employee in a standard report. Write a function `weekly_hours_report(employee_hours: List[List[int]]) -> List[int]` that takes as input a list of lists, where each inner list contains exactly seven integers representing the hours an employee worked from Monday to Sunday. The function should return a list of integers, where each integer represents the total hours worked in a week by each employee. For example: ```python employee_hours = [ [8, 8, 8, 8, 8, 0, 0], [10, 10, 10, 10, 0, 0, 10], [5, 5, 5, 5, 5, 5, 5] ] weekly_hours_report(employee_hours) # should return [40, 50, 35] ``` Explanation: - The first employee worked 8 hours each from Monday to Friday and did not work on the weekend, for a total of 40 hours. - The second employee worked 10 hours on four days and 10 hours on Sunday, for a total of 50 hours. - The third employee worked 5 hours every day of the week, for a total of 35 hours.","solution":"from typing import List def weekly_hours_report(employee_hours: List[List[int]]) -> List[int]: Returns a list of total hours worked in a week by each employee. Args: employee_hours: A list of lists, where each inner list contains exactly seven integers representing the hours worked from Monday to Sunday. Returns: A list of integers representing the total hours worked in a week by each employee. total_hours = [sum(hours) for hours in employee_hours] return total_hours"},{"question":"Ravi is a math enthusiast who likes to play with prime numbers. One day, he decided to combine his love for prime numbers and programming. He designed a challenge in which, given a positive integer `N`, he needs to find the smallest prime number greater than `N`. Your task is to create a function called `nextPrime()` that takes an integer `N` as an input and returns the smallest prime number greater than `N`. Example 1: Input: N = 10 Output: 11 Explanation: The smallest prime number greater than 10 is 11. Example 2: Input: N = 14 Output: 17 Explanation: The smallest prime number greater than 14 is 17. Example 3: Input: N = 20 Output: 23 Explanation: The smallest prime number greater than 20 is 23. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `nextPrime()` that takes an integer `N`, and returns the smallest prime number greater than `N`. The driver code takes care of the printing. Expected Time Complexity: O(N log log N) or better. Expected Auxiliary Space: O(1). Constraints : 1 ≤ N ≤ 10^6","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def nextPrime(N): Returns the smallest prime number greater than N. candidate = N + 1 while not is_prime(candidate): candidate += 1 return candidate"},{"question":"You are given an integer array `arr` of size `n` and an integer `target`. Your task is to determine if there are two numbers in the array whose sum is equal to `target`. If such two numbers exist, return their indices as a list. If no such numbers exist, return an empty list. Assume that each input would have exactly one solution, and you cannot use the same element twice. Example 1: Input: n = 4, arr = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: The sum of 2 (index 0) and 7 (index 1) is 9. Example 2: Input: n = 3, arr = [3, 2, 4], target = 6 Output: [1, 2] Explanation: The sum of 2 (index 1) and 4 (index 2) is 6. Your Task: You do not need to read input or print anything. Your task is to complete the function `twoSum()` which takes the integer `n`, the array `arr[]`, and the integer `target` as input parameters and returns a list of two integers representing the indices of the two elements whose sum is equal to `target`. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: * 1 ≤ n ≤ 10^4 * -10^9 ≤ arr[i] ≤ 10^9 * -10^9 ≤ target ≤ 10^9","solution":"def twoSum(n, arr, target): Returns the indices of the two numbers that add up to the target. :param n: int, the size of the array :param arr: list of int, the input array :param target: int, the target sum :return: list of int, the indices of the two numbers num_to_index = {} for i in range(n): complement = target - arr[i] if complement in num_to_index: return [num_to_index[complement], i] num_to_index[arr[i]] = i return [] # Example usage: # n = 4 # arr = [2, 7, 11, 15] # target = 9 # print(twoSum(n, arr, target)) # Output: [0, 1]"},{"question":"Task You are asked to write a function that calculates the number of unique substrings of length `k` in a given string `s`. Substrings are defined as contiguous sequences of characters within a string. For example, given the string `s = \\"abacab\\"` and `k = 3`, the possible substrings of length 3 are: - \\"aba\\" - \\"bac\\" - \\"aca\\" - \\"cab\\" By listing the unique substrings among these, we get \\"aba\\", \\"bac\\", \\"aca\\", and \\"cab\\", making a total of 4 unique substrings. # Function Signature ```python def unique_k_substrings(s: str, k: int) -> int: ``` # Input - `s` (string): The input string, consisting of lowercase English letters. - `k` (int): The length of the substrings to consider. # Output - Returns an integer representing the number of unique substrings of length `k`. # Constraints - `1 ≤ len(s) ≤ 10^4` - `1 ≤ k ≤ len(s)` # Example ```python assert unique_k_substrings(\\"abacab\\", 3) == 4 assert unique_k_substrings(\\"aaaa\\", 2) == 1 ```","solution":"def unique_k_substrings(s: str, k: int) -> int: Calculates the number of unique substrings of length `k` in the given string `s`. if k > len(s): return 0 substrings = set() for i in range(len(s) - k + 1): substrings.add(s[i:i + k]) return len(substrings)"},{"question":"Given a list of integers nums, representing the number of vehicles passing through a certain checkpoint over a series of hours, your task is to determine the continuous subarray with the maximum sum, and return that value. A subarray is a contiguous part of the original array that may contain one or more elements. Example 1: Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The subarray [4,-1,2,1] has the largest sum = 6. Example 2: Input: nums = [1] Output: 1 Explanation: The subarray [1] has the largest sum = 1. Example 3: Input: nums = [5,4,-1,7,8] Output: 23 Explanation: The subarray [5,4,-1,7,8] has the largest sum = 23. Constraints: 1 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4","solution":"def max_subarray_sum(nums): Finds the continuous subarray with the maximum sum and returns that value. Parameters: nums (List[int]): The list of integers representing the number of vehicles passing through a certain checkpoint over a series of hours. Returns: int: The maximum sum of a continuous subarray. max_sum = nums[0] current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Klara and John are playing a game with a pile of N stones. The game is played as follows: - The players take turns. - On each turn, a player can remove 1, 3, or 4 stones from the pile. - The player who is unable to make a move (because there are no stones left) loses the game. Klara always goes first. You need to determine whether Klara has a winning strategy given the initial number of stones. Input: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains an integer N, the number of stones in the initial pile. Output: - For each test case, print \\"Klara\\" if she has a winning strategy, otherwise print \\"John\\". Constraints: - 1 ≤ T ≤ 1000 - 0 ≤ N ≤ 1000000 SAMPLE INPUT: 4 1 2 3 10 SAMPLE OUTPUT: Klara John Klara Klara Explanation: In the first test case, Klara can take 1 stone, leaving John with 0 stones, so Klara wins. In the second test case, no matter what Klara does (taking 1 stone), John can take the last stone and win when it\'s his turn, so John wins. In the third test case, Klara can take 3 stones, leaving John with 0 stones, so Klara wins. In the fourth test case, Klara can take 4 stones, leaving 6 stones for John. By optimal play, Klara can ensure she wins.","solution":"def klara_wins(N): Determine if Klara has a winning strategy for a given number of stones N. # dp[i] will be True if for pile with i stones Klara has a winning strategy dp = [False] * (N + 1) # Base cases if N >= 1: dp[1] = True if N >= 2: dp[2] = False if N >= 3: dp[3] = True if N >= 4: dp[4] = True for i in range(5, N+1): dp[i] = not dp[i-1] or not dp[i-3] or not dp[i-4] return \\"Klara\\" if dp[N] else \\"John\\" def solve(arr): results = [] for N in arr: results.append(klara_wins(N)) return results"},{"question":"In a land far away, there is a mystical garden with magical trees. Each magical tree has fruits growing on it, and each fruit can give an answer to any question asked. However, these trees have a peculiar characteristic, they only respond to a group of friendly trees. Each tree has a friendship level. A tree is considered friendly to another tree if the absolute difference in their friendship levels is at most F. The wisdom seeker can only ask questions to a group of trees that are all friendly to each other. Given the friendship levels of n trees and a number F, determine the maximum number of trees that can form such a friendly group. -----Input----- The first line of the input contains integer n (1 ≤ n ≤ 100), where n is the number of magical trees in the garden. The second line contains n positive integers f_{i} (1 ≤ f_{i} ≤ 1000), representing the friendship levels of the trees. The last line contains integer F (1 ≤ F ≤ 1000) — the maximum allowed absolute difference in friendship levels for a group to be considered friendly. -----Output----- Print a single integer — the largest number of trees that can form a friendly group. -----Examples----- Input 5 2 1 3 8 7 2 Output 3","solution":"def max_friendly_trees(n, friendship_levels, F): Determine the maximum number of trees that can form a friendly group. Args: n: int - The number of trees. friendship_levels: List[int] - List of friendship levels of the trees. F: int - Maximum allowed absolute difference in friendship levels for a group to be friendly. Returns: int - The largest number of trees that can form a friendly group. # Sort the friendship levels to make it easier to find friendly groups friendship_levels.sort() max_count = 0 for i in range(n): count = 1 for j in range(i + 1, n): if friendship_levels[j] - friendship_levels[i] <= F: count += 1 else: break max_count = max(max_count, count) return max_count"},{"question":"Given an array of n integers, you need to return a new array such that each element at index i of the new array is the product of all the numbers in the original array except for the one at i. For example, if your input is `[1, 2, 3, 4, 5]`, the expected output would be `[120, 60, 40, 30, 24]` (i.e., `[2*3*4*5, 1*3*4*5, 1*2*4*5, 1*2*3*5, 1*2*3*4]`). You must solve it without using division and in O(n) time. ------ Input ------ The first line of the input contains an integer n denoting the number of elements in the array. The second line contains n space-separated integers, representing the array elements. ------ Output ------ Output a single line containing n space-separated integers, representing the product array. ------ Constraints ------ 2 ≤ n ≤ 100,000 0 ≤ array[i] ≤ 1,000 ------ Sample Input 1 ------ 5 1 2 3 4 5 ------ Sample Output 1 ------ 120 60 40 30 24 ------ Sample Input 2 ------ 3 3 2 1 ------ Sample Output 2 ------ 2 3 6","solution":"def product_except_self(nums): Returns a new array where each element at index i is the product of all the numbers in the original array except for the one at i. n = len(nums) if n == 0: return [] # Initialize output array with 1s result = [1] * n # Compute the prefixes products prefix = 1 for i in range(n): result[i] = prefix prefix *= nums[i] # Compute the postfixes products and multiply with corresponding prefix products postfix = 1 for i in range(n-1, -1, -1): result[i] *= postfix postfix *= nums[i] return result"},{"question":"-----General Statement:----- Write a function that computes the sum of digits of each number in a list, and then returns a new list with these sums. -----Input:----- A list of non-negative integers. -----Output:----- A list of integers where each integer is the sum of digits of the corresponding integer from the input list. -----Assumptions:----- - Each non-negative integer in the list will be in the range [0, 10^9]. - The input list will have at least one element and at most 1000 elements. -----Discussion:----- For each integer, compute the sum of its digits. For example, the sum of digits for 123 is 1+2+3=6. The new list should have the sums of digits in the same order as the original input list. -----Sample Input:----- [123, 456, 7890, 0] -----Sample Output:----- [6, 15, 24, 0]","solution":"def sum_of_digits(num_list): Given a list of non-negative integers, returns a new list where each element is the sum of the digits of the corresponding element from the input list. Parameters: num_list (list): A list of non-negative integers. Returns: list: A list containing the sum of digits of each number from the input list. def digit_sum(n): return sum(int(digit) for digit in str(n)) return [digit_sum(num) for num in num_list]"},{"question":"Write a function that takes as input a list of integers and returns a new list containing a running sum. The running sum of a list is a new list where each element at index `i` is the sum of the original list\'s elements from index `0` to `i`, inclusive. For example, given the input `[1, 2, 3, 4]`, the running sum list would be `[1, 3, 6, 10]`. Function Signature: `def running_sum(input_list: List[int]) -> List[int]:` # Examples 1. Given `input_list = [1, 2, 3, 4]`, the function should return `[1, 3, 6, 10]`. 2. Given `input_list = [10, 20, 30, 40]`, the function should return `[10, 30, 60, 100]`. 3. Given `input_list = [5]`, the function should return `[5]`. 4. Given `input_list = []`, the function should return `[]`.","solution":"from typing import List def running_sum(input_list: List[int]) -> List[int]: Takes a list of integers and returns a list containing the running sum. if not input_list: return [] running_total = 0 running_sums = [] for num in input_list: running_total += num running_sums.append(running_total) return running_sums"},{"question":"You are given a sequence of positive integers. Define the sum of a subsequence as the sum of its elements. A subsequence is any sequence that can be derived from the given sequence by deleting some or no elements without changing the order of the remaining elements. Chef is interested in finding the maximum sum of any even-length subsequence of this sequence. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N ― the length of the sequence. The second line contains N space-separated integers A_1, A_2, ..., A_N ― the elements of the sequence. ------ Output ------ For each test case, print a single line containing one integer ― the maximum sum of any even-length subsequence of the given sequence. ------ Constraints ------ 1 ≤ T ≤ 10^5 2 ≤ N ≤ 2 cdot 10^5 0 ≤ A_i ≤ 10^9 the sum of N over all test cases does not exceed 2 cdot 10^5 ----- Sample Input 1 ------ 2 4 1 2 3 4 5 3 3 1 7 5 ----- Sample Output 1 ------ 10 18 ----- Explanation 1 ------ For the first test case: The even-length subsequences of the sequence [1, 2, 3, 4] with their sums are [(1, 2) = 3], [(1, 4) = 5], [(2, 4) = 6], and [(2, 3, 4) = 9]. The maximum sum among these is 10. For the second test case: The even-length subsequences of the sequence [3, 3, 1, 7, 5] with their sums are [(3, 3) = 6], [(3, 7) = 10], [(3, 3, 7) = 13], and [(3, 3, 7, 5) = 18]. The maximum sum among these is 18.","solution":"def max_even_length_subsequence_sum(t, test_cases): results = [] for i in range(t): n, a = test_cases[i] a.sort(reverse=True) results.append(sum(a[:n - (n % 2)])) return results def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) a = list(map(int, data[index+1:index+1+n])) test_cases.append((n, a)) index += n + 1 results = max_even_length_subsequence_sum(t, test_cases) for result in results: print(result)"},{"question":"You are given a binary string (a string consisting of only characters \'0\' and \'1\'). You can perform the following operation on the string any number of times: - Choose any two adjacent characters in the string that are different (i.e., one \'0\' and one \'1\') and remove them. Your task is to determine the length of the final string after performing any number of the allowed operations. Input In the first line of the input, you are given a binary string of length between 1 and 100,000, inclusive. Output Print the length of the final string after performing the operations. Examples Input 1100 Output 0 Input 00110 Output 1 Input 101010 Output 0 Note In the first example, the string transforms as follows: 1100 → 100 → 0. In the second example, the string transforms as follows: 00110 → 0110 → 010 → 0. In the third example, the string transforms as follows: 101010 → 01010 → 010 → 0.","solution":"def final_string_length(binary_string): Return the length of the final string after performing the operations of removing adjacent differing characters (\'0\' and \'1\') any number of times. stack = [] for char in binary_string: if stack and stack[-1] != char: stack.pop() else: stack.append(char) return len(stack)"},{"question":"You are given a Python script that is supposed to filter even numbers from a list and return them. However, the script has several mistakes. Your task is to identify and fix the bugs in the script. ```python def filter_even_numbers(lst): even_numbers == for number in lst: if number % 2 = 0 even_numbers.append(numberered) return even_numbers # Example usage numbers = [1, 2, 3, 4, 5, 6] print(filter_even_numbers(numbers)) # Expected output: [2, 4, 6] ``` Debug the code and ensure that it correctly filters and returns even numbers from the list.","solution":"def filter_even_numbers(lst): even_numbers = [] for number in lst: if number % 2 == 0: even_numbers.append(number) return even_numbers # Example usage numbers = [1, 2, 3, 4, 5, 6] print(filter_even_numbers(numbers)) # Expected output: [2, 4, 6]"},{"question":"Given a string S and an integer K, find the number of distinct non-empty substrings of length K in the given string. The function should return -1 if K is greater than the length of the string. Example 1: Input: S = \\"abcabc\\", K = 3 Output: 3 Explanation: The substrings are \\"abc\\", \\"bca\\", \\"cab\\". Although \\"abc\\" appears twice, it is only counted once. Example 2: Input: S = \\"aaaa\\", K = 2 Output: 1 Explanation: The only substring of length 2 is \\"aa\\". Example 3: Input: S = \\"abac\\", K = 5 Output: -1 Explanation: Since K is greater than the length of the string, it is not possible to have any substrings of length 5. Example 4: Input: S = \\"abcde\\", K = 1 Output: 5 Explanation: The substrings are \\"a\\", \\"b\\", \\"c\\", \\"d\\", and \\"e\\".","solution":"def count_distinct_substrings(S, K): Returns the number of distinct non-empty substrings of length K in the given string S. If K is greater than the length of the string, returns -1. if K > len(S): return -1 substrings = set() for i in range(len(S) - K + 1): substrings.add(S[i:i + K]) return len(substrings)"},{"question":"**Problem Statement** A company wants to implement a feature in their warehouse robot that allows it to pick up boxes in an optimized manner. The robot can carry multiple boxes as long as the total weight does not exceed its weight capacity, W. Given a list of weights of the boxes and the weight capacity of the robot, determine whether it is possible for the robot to carry a specific subset of the boxes that altogether weighs exactly W. Write a function `canCarryExactly` that determines whether the robot can carry boxes with a total weight exactly equal to the given weight capacity. **Input Format** - The first line of the input contains an integer N, the number of boxes. - The second line contains N space-separated integers representing the weights of the boxes. - The third line contains the integer W, the weight capacity of the robot. **Output Format** Output \\"YES\\" if there exists a subset of boxes with a total weight exactly equal to W. Otherwise, output \\"NO\\". **Constraints** - 1 ≤ N ≤ 1000 - 1 ≤ weight of each box ≤ 1000 - 1 ≤ W ≤ 10^6 **SAMPLE INPUT** 5 2 3 7 8 10 11 **SAMPLE OUTPUT** YES **SAMPLE INPUT** 5 1 2 3 4 5 20 **SAMPLE OUTPUT** NO **Note:** In the first sample case, the robot can carry the boxes with weights 3 and 8 to reach a total weight of 11. In the second sample case, it is impossible to find any subset of the given boxes that add up to 20.","solution":"def canCarryExactly(N, weights, W): Determines if the robot can carry a subset of boxes that weigh exactly W. :param N: int - Number of boxes. :param weights: list of int - Weights of each box. :param W: int - Weight capacity of the robot. :return: str - \\"YES\\" if a subset of weights can sum to W, otherwise \\"NO\\". dp = [False] * (W + 1) dp[0] = True for weight in weights: for j in range(W, weight - 1, -1): dp[j] |= dp[j - weight] return \\"YES\\" if dp[W] else \\"NO\\""},{"question":"Story Let\'s take a journey into the fascinating world of numbers with a different focus this time: **Catalan numbers**. Catalan numbers are a sequence of natural numbers with many applications in combinatorial mathematics, such as counting paths in a grid, the number of valid sequences of parentheses, and the number of ways to cut polygons into triangles, among others. The sequence is named after the Belgian mathematician Eugène Charles Catalan who worked on it in the 19th century. For more information about Catalan numbers and their various properties, you can check the following links: https://en.wikipedia.org/wiki/Catalan_number http://mathworld.wolfram.com/CatalanNumber.html Exercise Your task is to write a function `catalan_number(n)` that will compute the n-th Catalan number. The input to the function will always be a non-negative integer. Here’s how you can calculate Catalan numbers using the standard recursive formula: ``` C(n) = (2n)! / ((n + 1)! * n!) ``` Alternatively, you can also use the recursive approach: ``` C(n) = summation(C(i) * C(n-i-1)) for i=0 to n-1 ``` Remember to be mindful of large factorials and consider utilizing memoization or iterative approaches for efficiency. Example calculations for Catalan numbers: ``` catalan_number(0) # return 1 catalan_number(1) # return 1 catalan_number(2) # return 2 catalan_number(3) # return 5 catalan_number(10) # return 16796 ``` Note Test your function with various values and make sure it handles large inputs efficiently. Good luck and happy coding! PS: If this task feels challenging, try working on other problems related to combinatorial sequences before coming back to tackle this one.","solution":"def catalan_number(n): Compute the n-th Catalan number using dynamic programming. if n == 0 or n == 1: return 1 catalan = [0] * (n + 1) catalan[0] = 1 catalan[1] = 1 for i in range(2, n + 1): for j in range(i): catalan[i] += catalan[j] * catalan[i - j - 1] return catalan[n]"},{"question":"Task Create a function to generate a series of strings representing a diamond shape, centered in a square grid. The size of the diamond is determined by an odd integer `n`, which is the length of one side of the grid. The sides of the grid should be `n` characters long. The diamond is made up of `\'*\'` characters centered in the grid. The diamond should start with one `\'*\'` character at the center of the grid, then expand outwards by placing additional `\'*\'` characters until reaching the width of `n` characters at the widest point (the middle row). Then, it should symmetrically reduce the number of `\'*\'` characters until reaching one `\'*\'` character again. Empty spaces should be filled with the whitespace character `\' \'`. For example: ``` n = 7 * *** ***** ******* ***** *** * ``` ``` n = 5 * *** ***** *** * ``` **Function Signature:** ```python def generate_diamond(n: int) -> List[str]: pass ``` **Constraints:** - `n` is an odd integer where `1 <= n <= 49`. - Function should return a list of strings, with each string representing a row in the diamond shape. # Example ```python assert generate_diamond(1) == [\\"*\\"] assert generate_diamond(3) == [\\" * \\", \\"***\\", \\" * \\"] assert generate_diamond(5) == [\\" * \\", \\" *** \\", \\"*****\\", \\" *** \\", \\" * \\"] ```","solution":"def generate_diamond(n: int): diamond = [] for i in range(n): if i <= n // 2: stars = \'*\' * (2 * i + 1) else: stars = \'*\' * (2 * (n - i - 1) + 1) row = stars.center(n) diamond.append(row) return diamond"},{"question":"Rina the librarian has a sequence consisting of n (n is divisible by 4) positive integers, each of them is at most 10. She wants to split the sequence into groups of four such that for each group of four a, b, c, d the following conditions are met: a < b < c < d; b is double of a, c is double of b, and d is double of c. Naturally, Rina wants each element of the sequence to belong to exactly one group of four. Thus, if the required partition exists, then it has frac{n}{4} groups of four. Help Rina find the required partition or else say that it doesn\'t exist. -----Input----- The first line contains an integer n (4 ≤ n ≤ 99999) — the number of elements in the sequence. The next line contains n positive integers, each of them is at most 10. It is guaranteed that n is divisible by 4. -----Output----- If the required partition exists, print frac{n}{4} groups of four. Print each group as values of the elements it contains. You should print values in increasing order. Separate the groups and integers in groups by whitespaces. If there are multiple solutions, you can print any of them. If there is no solution, print -1. -----Examples----- Input 8 1 2 4 8 1 2 4 8 Output 1 2 4 8 1 2 4 8 Input 4 1 2 1 4 Output -1","solution":"def find_partitions(n, sequence): from collections import Counter count = Counter(sequence) groups = [] while count[1] and count[2] and count[4] and count[8]: group = [] for num in [1, 2, 4, 8]: if count[num] > 0: group.append(num) count[num] -= 1 else: return -1 groups.append(group) if len(groups) * 4 == n: return groups else: return -1 def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) sequence = list(map(int, data[1:])) result = find_partitions(n, sequence) if result == -1: print(result) else: for group in result: print(\' \'.join(map(str, group)))"},{"question":"Write a function that accepts a list of integers and an integer `m`, and returns a list containing all unique pairs of integers from the input list that sum up to `m`. Each pair should be sorted in ascending order, and the final list of pairs should be sorted lexicographically. If no such pairs exist, return an empty list. Ensure that each pair `(a, b)` and `(b, a)` is counted only once. Examples: ```python find_pairs([1, 2, 3, 4, 5], 5) # [(1, 4), (2, 3)] find_pairs([1, 3, 2, 2, 3, 4], 6) # [(2, 4), (3, 3)] find_pairs([1, 2, 3, 4, 5], 10) # [] find_pairs([], 3) # [] find_pairs([1, 2, 3, 4], 4) # [(1, 3)] ```","solution":"def find_pairs(lst, m): This function finds all unique pairs of integers in the list that sum up to m. Each pair is sorted in ascending order and the final list of pairs is sorted lexicographically. pairs = set() lst.sort() for i in range(len(lst)): for j in range(i + 1, len(lst)): if lst[i] + lst[j] == m: pairs.add((lst[i], lst[j])) return sorted(list(pairs))"},{"question":"Input 7 2 2 4 6 8 10 12 14 3 1 Output 20","solution":"def subarray_sum(n, x, array, l, r): Returns the sum of the elements from index l to r (inclusive) in the given array. :param n: Number of elements in the array :param x: (Unused in this function, might be for future extensions) :param array: List of integers :param l: Starting index (0-based) of the subarray :param r: Ending index (0-based) of the subarray :return: Sum of the subarray from index l to r return sum(array[l:r+1])"},{"question":"A company is organizing a unique race event where participants must pass through several checkpoints. Each checkpoint has a certain number of tasks, and participants can only move to the next checkpoint after completing all the tasks at their current checkpoint. Given the number of tasks at each checkpoint and a set of queries, you need to help the organizers determine the total number of tasks that will be completed between two checkpoints (inclusive). Additionally, you must handle updates where the number of tasks at a specific checkpoint can change. INPUT: The first line of the input contains two integers N and Q, denoting the number of checkpoints and the number of queries, respectively. The second line contains N integers, where the i-th integer represents the number of tasks at the i-th checkpoint. The next Q lines contain queries, which can be of the following two types: 1. \\"1 idx t\\" - Update the number of tasks at the `idx`-th checkpoint to `t`. 2. \\"2 l r\\" - Find the total number of tasks from the `l`-th checkpoint to the `r`-th checkpoint (both inclusive). OUTPUT: For each query of the second type, output the total number of tasks between checkpoints l and r. CONSTRAINTS: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ idx, l, r ≤ N 0 ≤ t ≤ 10^4 All initial task counts and updates are non-negative integers. SAMPLE INPUT: 5 3 2 5 3 8 6 2 2 4 1 3 10 2 1 5 SAMPLE OUTPUT: 16 31 Explanation: The initial list of tasks is [2, 5, 3, 8, 6]. For the first query, the total number of tasks from the 2nd to the 4th checkpoint is 5 + 3 + 8 = 16. The second query updates the number of tasks at the 3rd checkpoint to 10, so the updated list is [2, 5, 10, 8, 6]. For the third query, the total number of tasks from the 1st to the 5th checkpoint is 2 + 5 + 10 + 8 + 6 = 31.","solution":"class RaceEvent: def __init__(self, tasks): self.tasks = tasks self.prefix_sum = self._compute_prefix_sum(tasks) def _compute_prefix_sum(self, tasks): prefix_sum = [0] * (len(tasks) + 1) for i in range(1, len(tasks) + 1): prefix_sum[i] = prefix_sum[i - 1] + tasks[i - 1] return prefix_sum def update_task(self, idx, t): idx -= 1 old_value = self.tasks[idx] self.tasks[idx] = t difference = t - old_value for i in range(idx + 1, len(self.prefix_sum)): self.prefix_sum[i] += difference def query_tasks(self, l, r): return self.prefix_sum[r] - self.prefix_sum[l - 1] def process_queries(N, Q, tasks, queries): race_event = RaceEvent(tasks) results = [] for query in queries: q = query.split() if q[0] == \'1\': idx, t = int(q[1]), int(q[2]) race_event.update_task(idx, t) elif q[0] == \'2\': l, r = int(q[1]), int(q[2]) results.append(race_event.query_tasks(l, r)) return results"},{"question":"Implement a function `find_max_subarray` that receives a list of integers and returns the sum of the largest contiguous subarray. This problem is commonly known as the Maximum Subarray Problem. # Constraints: - The input list may contain both positive and negative numbers. - The input list will have at least one element. - The length of the input list will not exceed 10^5. - The absolute value of any integer in the list will not exceed 10^4. # Example: ```python find_max_subarray([1, -2, 3, 5, -3, 2]) # Returns 8 find_max_subarray([-4, -3, -2, -1]) # Returns -1 find_max_subarray([8, -19, 5, -4, 20]) # Returns 21 ``` # Explanation: - In the first example, the largest sum contiguous subarray is [3, 5], which sums to 8. - In the second example, the largest sum contiguous subarray is [-1], which sums to -1. - In the third example, the largest sum contiguous subarray is [5, -4, 20], which sums to 21. # Implementation: - Use Kadane\'s Algorithm to find the largest sum contiguous subarray in linear time O(n). - Iterate through the list while keeping track of the maximum subarray sum ending at the current index, and update the global maximum sum when needed. Write the `find_max_subarray` function to pass the given examples and constraints.","solution":"def find_max_subarray(nums): Returns the sum of the largest contiguous subarray. Uses Kadane\'s Algorithm with a time complexity of O(n). max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a grid with n rows and m columns filled initially with zeroes. You have to perform two types of operations on this grid: - addition(x, y, k): Add the value k to the cell located at (x, y). - query(x1, y1, x2, y2): Calculate the sum of the cells contained in the subgrid from the top-left corner (x1, y1) to the bottom-right corner (x2, y2). Write a program to handle multiple operations of both types efficiently and output the results of the query operations. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the size of the grid. The second line contains a single integer q (1 ≤ q ≤ 100000) — the number of operations. The next q lines describe the operations, each operation is in one of the following two forms: - \\"add x y k\\" (1 ≤ x ≤ n, 1 ≤ y ≤ m, 1 ≤ k ≤ 10^5): This operation means to add k to the cell (x, y). - \\"query x1 y1 x2 y2\\" (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m): This operation means to calculate the sum of all the cells contained within the subgrid with top-left corner (x1, y1) and bottom-right corner (x2, y2). -----Output----- For each query operation, print the result of the query. -----Examples----- Input 3 3 5 add 1 1 3 add 2 2 4 add 3 3 5 query 1 1 2 2 query 1 1 3 3 Output 7 12","solution":"class Grid: def __init__(self, n, m): self.n = n self.m = m self.grid = [[0] * m for _ in range(n)] def add(self, x, y, k): self.grid[x-1][y-1] += k def query(self, x1, y1, x2, y2): total_sum = 0 for i in range(x1-1, x2): for j in range(y1-1, y2): total_sum += self.grid[i][j] return total_sum def run_operations(n, m, operations): grid = Grid(n, m) results = [] for operation in operations: op = operation.split() if op[0] == \\"add\\": x, y, k = int(op[1]), int(op[2]), int(op[3]) grid.add(x, y, k) elif op[0] == \\"query\\": x1, y1, x2, y2 = int(op[1]), int(op[2]), int(op[3]), int(op[4]) results.append(grid.query(x1, y1, x2, y2)) return results"},{"question":"A factory has a conveyor belt system to manufacture products. There are stations arranged in a straight line, and each product needs to visit a certain number of stations in sequence to be completed. Each station has a specific processing time that it takes to process each product. Given the number of stations and the processing times for each station, you need to calculate the minimum time required to process a product through all the stations. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) denoting the number of stations. The second line contains n space-separated integers ti (1 ≤ ti ≤ 1000) where ti represents the processing time for the i-th station. -----Output----- Output a single integer, the minimum time required to process a product through all n stations. -----Examples----- Input 5 3 1 4 1 5 Output 14 Input 3 10 20 30 Output 60","solution":"def minimum_processing_time(n, times): Returns the minimum time required to process a product through all the stations. Parameters: n (int): Number of stations. times (list of int): Processing times for each station. Returns: int: The total processing time. return sum(times)"},{"question":"Write a function that takes an integer input n and returns a list of all integers from 1 to n that are palindromes. A palindrome is a number that reads the same forwards and backwards, such as 121 or 454. Your function should efficiently identify palindromic numbers within the given range and must handle a moderately large value of n efficiently. For example: ``` Input: n = 100 Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99] ``` Write your function in Python and make sure it executes efficiently for values of n up to 100,000.","solution":"def is_palindrome(num): Helper function to check if a given number is a palindrome. return str(num) == str(num)[::-1] def find_palindromes(n): Returns a list of all palindrome numbers from 1 to n. return [i for i in range(1, n + 1) if is_palindrome(i)]"},{"question":"Problem Balan, a renowned chef, is creating a new recipe that involves multiple ingredients. Given a list of ingredients and their quantities in grams, Balan wants to standardize the recipe so that all ingredient quantities are scaled down by their greatest common divisor (GCD). Your task is to help Balan prepare the standardized recipe. You need to answer the following Q queries. Each query is defined by an integer k_i , which represents a subset of the first k_i ingredients. For each query, find the greatest common divisor (GCD) of the quantities of the first k_i ingredients. Output For each query, output the GCD of the quantities of the first k_i ingredients. Constraints The input satisfies the following conditions. * 2 le N le 10^5 * 1 le Q le 10^5 * 1 le q_i le N * 1 le quantity_i le 10^9 (1 le i le N) Input The input is given in the following format: N quantity_1 quantity_2 ... quantity_N Q q_1 q_2 ... q_Q All inputs are given as integers. - The number of ingredients N is given in the first line. - The quantities of the N ingredients are given in the second line, separated by spaces. - The number of queries Q is given on the third line. - Each of the next Q lines contains the integer q_i representing the number of initial ingredients to consider for the i^{th} query. Examples Input 5 12 15 18 24 30 3 2 4 5 Output 3 3 3 Input 6 35 49 63 91 98 126 4 1 3 4 6 Output 35 7 7 7","solution":"import math from functools import reduce def gcd(a, b): Returns the greatest common divisor of a and b. while b: a, b = b, a % b return a def gcd_of_list(numbers): Returns the gcd of a list of numbers. return reduce(gcd, numbers) def standardized_recipe_quantities(n, quantities, q, queries): For each query, returns the Greatest Common Divisor (GCD) of the quantities of the first q_i ingredients. results = [] for i in range(q): results.append(gcd_of_list(quantities[:queries[i]])) return results"},{"question":"The Kingdom of Dosti is known for its advanced communication network. There are n cities in the kingdom, numbered from 1 to n. The king wants to ensure that every city has a direct communication path to every other city either directly or via a sequence of other cities. Currently, no communication paths exist. Each communication path is bidirectional, meaning that if there is a path between city x and city y, people can communicate from city x to city y and from city y to city x. Due to the constraints on the budget, the king wants to minimize the number of communication paths constructed. Your task is to determine the minimum number of bidirectional communication paths needed to make sure that there is a communication route between every pair of cities. Input The first line contains an integer n (2 ≤ n ≤ 100), denoting the number of cities in Dosti Kingdom. Output Print the minimum number of bidirectional communication paths needed to ensure there is a communication route between every pair of cities. Examples Input 4 Output 3 Input 5 Output 4 Explanation For the first example with 4 cities, one of the ways to construct paths is: (1-2), (1-3), (1-4). These 3 paths ensure that every city can communicate with every other city through a sequence of paths involving city 1. For the second example with 5 cities, one of the ways to construct paths is: (1-2), (1-3), (1-4), (1-5). These 4 paths ensure that every city can communicate with every other city through a sequence of paths involving city 1.","solution":"def minimum_paths_to_connect_cities(n): Given the number of cities n, this function returns the minimum number of bidirectional communication paths needed to ensure that there is a communication route between every pair of cities. # A complete graph with n vertices (cities) has a connecting path of n-1 edges. # This can be visualized by having one central city connected to every other city. return n - 1"},{"question":"Design and implement a function that takes an array of integers and a positive integer `k`, and returns a new array with the elements rotated to the right by `k` positions. # Requirements: 1. The function should be able to handle arrays of any length. 2. Optimally handle cases where `k` is larger than the length of the array. # Input: - An array of integers `arr` of length `n` (1 ≤ n ≤ 10^5). - A positive integer `k` (0 ≤ k ≤ 10^9). # Output: - A new array with elements rotated to the right by `k` positions. # Examples: **Example 1:** ```python input: arr = [1, 2, 3, 4, 5], k = 2 output: [4, 5, 1, 2, 3] ``` **Example 2:** ```python input: arr = [0, 1, 2], k = 4 output: [2, 0, 1] ``` # Important Notes: If `k` is larger than the length of the array, the actual rotation position is computed as `k % n`. # Function Signature: ```python def rotate_array(arr: List[int], k: int) -> List[int]: pass ``` Ensure to write test cases to validate the implementation of the function. # Constraints: - 1 ≤ arr.length ≤ 10^5 - 0 ≤ k ≤ 10^9","solution":"def rotate_array(arr, k): Rotates the elements of the array to the right by k positions. Parameters: arr (list): A list of integers k (int): A positive integer indicating the number of positions to rotate to the right Returns: list: A new list with the elements rotated to the right by k positions if not arr: return [] n = len(arr) k = k % n return arr[-k:] + arr[:-k]"},{"question":"Implement a function `find_groups` that takes a string containing letters from \'a\' to \'z\' and creates groups of consecutive letters. The groups should be created in such a way that each group contains consecutive letters from the alphabet and no letter is missing in between. The function should return a list of strings, where each string represents a group of consecutive letters. The function should maintain the order of letters as they appear in the input string. # Input - A single string `s` (1 <= |s| <= 10^4) containing only lowercase letters \'a\' to \'z\'. # Output - A list of strings, where each string represents a group of consecutive letters from the alphabet. # Example ```plaintext Input: abcdef Output: [\'abcdef\'] Input: abdefghij Output: [\'ab\', \'defghij\'] ``` # Explanation - In the first example, the string contains all consecutive letters from \'a\' to \'f\', so they form a single group. - In the second example, the string has a discontinuity between \'b\' and \'d\' (where \'c\' should have been), so it breaks into two groups: \'ab\' and \'defghij\'. # Constraints - You can assume that every letter in the string will only appear once. - Consecutive letters are considered in terms of their order in the English alphabet.","solution":"def find_groups(s): Splits the input string into groups of consecutive letters from the alphabet. Args: s (str): The input string containing lowercase letters \'a\' to \'z\'. Returns: List[str]: A list of strings, where each string represents a group of consecutive letters. if not s: return [] result = [] current_group = s[0] for i in range(1, len(s)): if ord(s[i]) == ord(s[i - 1]) + 1: current_group += s[i] else: result.append(current_group) current_group = s[i] result.append(current_group) return result"},{"question":"In a city, there are N bus stops arranged in a line, numbered from 1 to N from left to right. Each bus stop has a certain number of passengers waiting for a bus. The bus arrives at each stop sequentially from 1 to N and can carry at most M passengers at a time. Each time the bus reaches a stop, it loads up to its capacity and proceeds to the next stop with the passengers it has picked up. The goal is to find the minimum number of trips the bus must make to pick up all the passengers from all bus stops. Each trip can start from any bus stop and must proceed towards the right without skipping any stops, but the bus must return empty to start a new trip. Constraints * 1 leq N leq 100000 * 1 leq M leq 1000 * 0 leq P_i leq 1000, where P_i is the number of passengers at the i-th bus stop Input The input is given from Standard Input in the following format: N M P_1 P_2 ... P_N Output Print the minimum number of trips required. Examples Input 5 4 1 2 3 4 5 Output 4 Input 3 3 3 3 3 Output 3 Input 6 10 10 0 10 3 2 1 Output 3","solution":"def minimum_trips(N, M, P): trips = 0 current_bus_capacity = 0 for passengers in P: if current_bus_capacity + passengers <= M: current_bus_capacity += passengers else: trips += 1 current_bus_capacity = passengers if current_bus_capacity > 0: trips += 1 return trips # Sample Input and Output testing if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) P = list(map(int, data[2:])) print(minimum_trips(N, M, P))"},{"question":"In a neighborhood, there is a community center where different activities are scheduled throughout the week. The community center wants to ensure that no two activities overlap so that all members can participate in all activities without any scheduling conflicts. You are tasked with creating a program to check if the scheduled activities overlap or not. Input format: The input starts with an integer, n, denoting the number of activities scheduled in a week. On the next n lines, the time at which each activity starts and ends is given in the \\"Day HH:MM-HH:MM\\" format. Days are represented as \\"Mon\\", \\"Tue\\", \\"Wed\\", \\"Thu\\", \\"Fri\\", \\"Sat\\", \\"Sun\\". Output format: For every case, you need to print a single line stating \\"Activities overlap!\\" if any activities are clashing, or \\"No overlaps!\\" if the activities do not overlap. Constraints: 1 ≤ n ≤ 100 Time will be given in HoursHours:MinutesMinutes format. (HH:MM) The end time will (Surely!) be after the start time. Days will be given as mentioned i.e., \\"Mon\\", \\"Tue\\", \\"Wed\\", \\"Thu\\", \\"Fri\\", \\"Sat\\", \\"Sun\\". Example Input: 3 Mon 10:00-11:30 Mon 11:15-12:00 Tue 14:00-15:00 Example Output: Activities overlap! SAMPLE INPUT 2 Wed 09:00-10:30 Wed 10:30-11:30 SAMPLE OUTPUT No overlaps!","solution":"def check_activity_overlap(n, activities): day_to_minutes = {\\"Mon\\": 0, \\"Tue\\": 1440, \\"Wed\\": 2880, \\"Thu\\": 4320, \\"Fri\\": 5760, \\"Sat\\": 7200, \\"Sun\\": 8640} intervals = [] for activity in activities: day, times = activity.split() start_time, end_time = times.split(\\"-\\") start_hour, start_minute = map(int, start_time.split(\\":\\")) end_hour, end_minute = map(int, end_time.split(\\":\\")) start_total_minutes = day_to_minutes[day] + start_hour * 60 + start_minute end_total_minutes = day_to_minutes[day] + end_hour * 60 + end_minute intervals.append((start_total_minutes, end_total_minutes)) # Sort intervals by start time intervals.sort() # Check for overlaps for i in range(1, len(intervals)): if intervals[i][0] < intervals[i-1][1]: return \\"Activities overlap!\\" return \\"No overlaps!\\""},{"question":"Alice is playing a game where she has an array of integers. The goal is to transform the array such that each integer in the array is twice as large as the preceding integer. She can perform the following operation multiple times (possibly zero): Select any integer from the array and either multiply it by 2 or divide it by 2 (if it\'s even). Determine the minimum number of operations required to transform the array into the desired state. Print -1 if it is not possible. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N — the size of the array. - The second line of each test case contains N space-separated integers — the elements of the array. ------ Output Format ------ For each test case, output the minimum number of operations required to transform the array. Output -1 if it is not possible. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ Array Elements ≤ 10^9 ------ Sample Input 1 ------ 2 3 4 8 16 4 1 2 8 16 ------ Sample Output 1 ------ 0 2 ------ Explanation 1 ------ - Test Case 1: The array [4, 8, 16] is already in the desired state (8 is twice of 4, and 16 is twice of 8). Hence, no operations are needed. - Test Case 2: We can achieve the desired state by performing the following operations: - Divide 8 by 2 to get 4. - Multiply 4 by 2 to get 8. - Now the array becomes [1, 2, 4, 8], which is the desired state. Therefore, only two operations are required.","solution":"def min_operations_to_transform_array(T, test_cases): def can_transform(arr): operations = 0 for i in range(1, len(arr)): if arr[i] != 2 * arr[i-1]: if arr[i] % 2 == 0 and (arr[i] // 2 >= arr[i-1] or arr[i] * 2 <= arr[i-1]): cur = arr[i] while cur != 2 * arr[i-1]: if cur < 2 * arr[i-1]: cur *= 2 else: cur //= 2 operations += 1 arr[i] = cur else: return -1 return operations results = [] for test_case in test_cases: N = test_case[0] arr = test_case[1] result = can_transform(arr) results.append(result) return results def parse_input(input_string): input_lines = input_string.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] idx = 1 for _ in range(T): N = int(input_lines[idx]) arr = list(map(int, input_lines[idx + 1].split())) test_cases.append((N, arr)) idx += 2 return T, test_cases # Example Usage: input_string = 2 3 4 8 16 4 1 2 8 16 T, test_cases = parse_input(input_string) results = min_operations_to_transform_array(T, test_cases) for result in results: print(result)"},{"question":"John loves playing board games involving a grid. He recently invented a new game where he has an n x m grid of cells, and each cell has an initial score assigned to it. John wants to know the maximum possible score sum he can obtain by starting at any cell in the first row and moving to any cell in the last row, following a specific movement rule. The movement rule is that from any cell (i, j), you can move to the cell directly below (i+1, j), or to the diagonally adjacent cells below (i+1, j-1) or (i+1, j+1), as long as the destination cell is within the grid boundaries. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The next n lines describe the grid, each containing m integers. The j-th integer in the i-th line represents the score of the cell (i, j) (0 ≤ score ≤ 100). Output Print a single integer representing the maximum score sum that can be obtained by moving from any cell in the first row to any cell in the last row following the movement rule. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 18 Input 4 4 1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 Output 10 Explanation In the first example, the optimal path to achieve a maximum score of 18 is: start from cell (1,3) with score 3, move to cell (2,2) with score 5, and finally move to cell (3,3) with score 9, resulting in 3 + 5 + 9 = 18. In the second example, one possible optimal path is: start from cell (1,1) with score 1, move to cell (2,2) with score 2, move to cell (3,2) with score 3, and finally move to cell (4,2) with score 4, resulting in 1 + 2 + 3 + 4 = 10.","solution":"def maximum_score_path(n, m, grid): Returns the maximum score sum obtainable by moving from any cell in the first row to any cell in the last row in the given grid, following the movement rules. dp = [[0] * m for _ in range(n)] # Copy the first row from the grid to the dp table for j in range(m): dp[0][j] = grid[0][j] # Fill the dp table for i in range(1, n): for j in range(m): max_upper_path = 0 if j > 0: max_upper_path = max(max_upper_path, dp[i-1][j-1]) max_upper_path = max(max_upper_path, dp[i-1][j]) if j < m - 1: max_upper_path = max(max_upper_path, dp[i-1][j+1]) dp[i][j] = grid[i][j] + max_upper_path # Find the maximum value in the last row return max(dp[-1]) # Example usage if __name__ == \\"__main__\\": n, m = 3, 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(maximum_score_path(n, m, grid)) # Output: 18"},{"question":"Given N bits to an OR - Gate find the output that will be produced. OR - Gate Table: 1 | 1 = 1 1 | 0 = 1 0 | 1 = 1 0 | 0 = 0 Example 1: Input: N = 5 arr: 0 0 0 1 0 Output: 1 Explanation: 0 | 0 = 0 0 | 0 = 0 0 | 1 = 1 1 | 0 = 1 hence output is 1 Example 2: Input: N = 3 arr: 0 0 0 Output: 0 Explanation: 0 | 0 = 0 0 | 0 = 0 hence output is 0 Your Task: You don\'t need to read input or print anything. Your task is to complete the function orGate() which takes the array arr[], its size N as input parameters and returns the output after processing OR operations on N bits. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1<=N<=1000","solution":"def orGate(N, arr): Given N bits, this function returns the output after processing OR operations on the bits. result = arr[0] for i in range(1, N): result |= arr[i] return result"},{"question":"Librarians at the Grand Library want to organize their collection of ancient scrolls. Each scroll has a unique identifier and an assigned scholarly value that indicates its importance. To preserve these scrolls properly, they decide to store them in protective cases. Each case can hold exactly one scroll and should be numbered in ascending order from 1 up to the number of scrolls. Initially, the scrolls are arranged in a random order. The librarians would like to query the scholarly value of the scroll currently in a specific case number after several rearrangement operations. There are two types of operations: 1. Update the scholarly value of the scroll in a specific case. 2. Retrieve the scholarly value of the scroll in a specified case. The librarians need your help to efficiently handle these operations. Input The first line of the input contains two integers n (1 ≤ n ≤ 105) and m (1 ≤ m ≤ 105). The second line contains n integers representing the initial scholarly values of the scrolls. The next m lines contain commands; each command will be one of two types: - \\"update u v\\", where u (1 ≤ u ≤ n) is the case number and v (1 ≤ v ≤ 109) is the new scholarly value to be assigned to the scroll in that case. - \\"query u\\", where u (1 ≤ u ≤ n) is the case number for which the scholarly value should be retrieved. Output For each query operation, output the scholarly value of the scroll in the specified case. Example Input 5 3 10 20 30 40 50 update 3 35 query 3 query 5 Output 35 50 Note Initially, the scholarly values of the scrolls are [10, 20, 30, 40, 50]. After the update command, the scholarly values change to [10, 20, 35, 40, 50]. The first query retrieves the value 35, and the second query retrieves the value 50.","solution":"def handle_operations(n, m, initial_values, operations): scholarly_values = initial_values[:] # Copy the initial values to modify results = [] for op in operations: if op[0] == \\"update\\": u, v = op[1], op[2] # Update the scholarly value of the scroll in case u scholarly_values[u-1] = v elif op[0] == \\"query\\": u = op[1] # Retrieve the scholarly value of the scroll in case u results.append(scholarly_values[u-1]) return results"},{"question":"The manager of a bookstore wants to organize a book-finding competition. Participants will be given clues to find specific books, and each clue will represent a unique numeric value. To prepare for the competition, the manager needs to write a program that generates an encoded list of clues based on input values. The encoding scheme involves using digits in a particular order. Can you help write this program? -----Input:----- - The first line will contain an integer N, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer X. -----Output:----- For each test case, output the encoded list of clues. -----Constraints----- - 1 leq N leq 50 - 1 leq X leq 50 -----Sample Input:----- 3 2 3 4 -----Sample Output:----- 1 12 1 12 123 1 12 123 1234 -----EXPLANATION:----- No need, else the encoded list can be generated easily.","solution":"def generate_encoded_clues(xs): result = [] for x in xs: encoded_clues = [] for i in range(1, x+1): clue = \'\'.join(str(j) for j in range(1, i+1)) encoded_clues.append(clue) result.append(\' \'.join(encoded_clues)) return result def main(input_list): N = input_list[0] test_cases = input_list[1:N+1] return generate_encoded_clues(test_cases)"},{"question":"A local library has a digital catalog with a collection of books. Each book has an associated positive integer identifier and a popularity score. The library wants to reorganize the catalog to recommend books that have higher popularity scores first. However, if two books have the same popularity score, they should be sorted by their identifier in ascending order. Write a program to help the library achieve this. Input The first line of input contains an integer n (1 ≤ n ≤ 100 000) — the number of books in the catalog. Each of the next n lines contains two integers id and score (1 ≤ id, score ≤ 1 000 000) — the identifier and popularity score of a book. Output Output n lines, each containing the id and score of a book, sorted first by descending popularity score and then by ascending identifier. Examples Input 5 1 10 2 20 3 20 4 5 5 10 Output 2 20 3 20 1 10 5 10 4 5 Input 3 10 100 12 100 11 50 Output 10 100 12 100 11 50","solution":"def sort_books(n, books): Sorts the books by descending popularity score, and if two books have the same score, they are sorted by their identifier in ascending order. :param n: int, number of books :param books: list of tuples, each containing an identifier and a score :return: list of tuples, sorted as per the criteria # First, sort by id in ascending order to get a stable sort books.sort(key=lambda x: x[0]) # Then, sort by score in descending order books.sort(key=lambda x: x[1], reverse=True) return books"},{"question":"Implement a function called `unique_track_playlists` that takes two arguments: 1. A list of integers, `tracks`, where each integer represents the duration (in seconds) of a track. 2. A target integer `target_duration` representing the total duration (in seconds) of the playlist. The function should return the number of unique ways to select tracks from the list that exactly sum up to the `target_duration`. Each track can only be used once in a playlist, and order does not matter. Input: A list of integers `tracks` and an integer `target_duration`. Output: An integer representing the number of unique playlists. Constraints: - 1 ≤ len(tracks) ≤ 100 - 1 ≤ track duration ≤ 1000 - 1 ≤ target_duration ≤ 10000 Example Input: ```python tracks = [2, 3, 5, 8, 13] target_duration = 10 ``` Output: ```python 2 ``` Explanation: There are two unique ways to sum to 10 seconds: - [2, 8] - [3, 5, 2] Both selections constitute unique playlists.","solution":"from functools import lru_cache def unique_track_playlists(tracks, target_duration): Returns the number of unique ways to select tracks from the list such that their sum equals target_duration. @lru_cache(None) def count_ways(remaining_duration, index): if remaining_duration == 0: return 1 if remaining_duration < 0 or index >= len(tracks): return 0 # Option 1: Include the current track include = count_ways(remaining_duration - tracks[index], index + 1) # Option 2: Exclude the current track exclude = count_ways(remaining_duration, index + 1) return include + exclude return count_ways(target_duration, 0)"},{"question":"Given an array of distinct integers `arr`, write a function to find all possible permutations of the array. A permutation of an array `arr` is a rearrangement of its elements into a new sequence. The function should return all these permutations in any order. Example 1: Input: arr = [1, 2, 3] Output: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] Example 2: Input: arr = [0, 1] Output: [[0, 1], [1, 0]] Example 3: Input: arr = [1] Output: [[1]] Note: - 1 <= arr.length <= 8 - -10 <= arr[i] <= 10 - All elements of `arr` are distinct.","solution":"from itertools import permutations def find_permutations(arr): Finds all possible permutations of the given array. return [list(p) for p in permutations(arr)]"},{"question":"The small robot Racobot is designed to move in a grid of dimensions m x n. Racobot starts at the top-left corner (0, 0) and must move to the bottom-right corner (m-1, n-1). Racobot can only move either right or down, and there are obstacles in its way. Your task is to determine the number of unique paths that Racobot can take to reach the destination. You are provided with the grid where obstacles are marked with 1 and free spaces are marked with 0. -----Input----- The first line contains two integers m and n (1 leq m, n leq 100), the dimensions of the grid. The next m lines each contain n integers (0 or 1), representing the grid where 1 indicates an obstacle and 0 indicates a free space. -----Output----- Output the number of unique paths that Racobot can take to reach the bottom-right corner. If there is no possible path, output 0. -----Examples----- Sample Input: 3 3 0 0 0 0 1 0 0 0 0 Sample Output: 2 Sample Input: 2 2 0 1 1 0 Sample Output: 0","solution":"def unique_paths_with_obstacles(m, n, grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of a grid. Handle obstacles marked with 1 :param m: number of rows in the grid :param n: number of columns in the grid :param grid: 2D list representing the grid (0 is a free space, 1 is an obstacle) :return: number of unique paths if not grid or grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0]*n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"In a distant kingdom, the Prince is obsessed with collecting coins. Coins come in denominations, and he always uses a combination of specific denominations to gather his collection. He wants to maximize his collection by ensuring he can build a particular amount using the least number of coins possible. The Prince asks for your help to achieve this. Given the available denominations and a target amount, you must write a program that helps him determine the minimum number of coins required to make up the given amount. If it is not possible to make the amount with the given denominations, return -1. Input format - The first line contains two integers, N and M, representing the number of denominations and the target amount, respectively. - The second line contains N integers, representing the available denominations. Output format - Output a single integer, the minimum number of coins needed to make up the given amount, or -1 if it is not possible. Constraints 1 ≤ N ≤ 100 1 ≤ M ≤ 10^4 1 ≤ denominations[i] ≤ 10^4 SAMPLE INPUT 3 11 1 2 5 SAMPLE OUTPUT 3 Explanation Using denominations 1, 2, and 5, the amount 11 can be formed using three coins: 5, 5, and 1. In another example, if the input is: SAMPLE INPUT 3 7 2 4 6 SAMPLE OUTPUT -1 Explanation Using denominations 2, 4, and 6, it is impossible to form the amount 7. Therefore, the output is -1.","solution":"def min_coins_to_make_amount(denominations, amount): Returns the minimum number of coins required to make up the given amount using the specified denominations, or -1 if it\'s not possible to make the amount. # Initialize a large number for comparison, assumed to be larger than any possible number of coins MAX = float(\'inf\') # Initialize dp array where dp[i] stands for minimum number of coins to make amount i dp = [MAX] * (amount + 1) # Base case: To make amount 0, we need 0 coins dp[0] = 0 for coin in denominations: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # If dp[amount] is still MAX, it means it\'s not possible to form the amount return dp[amount] if dp[amount] != MAX else -1"},{"question":"Given an undirected graph with `n` nodes and `m` edges, you need to determine the length of the shortest cycle in the graph. If there is no cycle in the graph, return -1. A cycle is a path of edges and vertices wherein a vertex is reachable from itself. The length of a cycle is the number of edges in the cycle. You are provided with the number of nodes, the number of edges, and the list of edges for the graph. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 10^5) — the number of nodes and the number of edges. The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), representing an edge between nodes `u` and `v`. Output Print a single integer — the length of the shortest cycle in the graph, or -1 if there are no cycles. Examples Input 6 9 1 2 1 3 2 3 2 4 4 5 5 6 6 4 5 7 6 7 Output 3 Input 4 4 1 2 2 3 3 4 4 1 Output 4 Input 4 2 1 2 3 4 Output -1 Explanation In the first example, the shortest cycle is formed by the edges (2, 3), (3, 1), and (1, 2), which forms a cycle of length 3. In the second example, the entire graph itself forms a cycle of length 4. In the third example, there are no cycles in the graph.","solution":"from collections import deque, defaultdict def shortest_cycle(n, m, edges): # Graph construction graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start): dist = {start: 0} parent = {start: None} queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in dist: dist[neighbor] = dist[node] + 1 parent[neighbor] = node queue.append(neighbor) elif parent[node] != neighbor: # Detect cycle return dist[node] + dist[neighbor] + 1 return float(\'inf\') min_cycle_len = float(\'inf\') for node in range(1, n + 1): cycle_len = bfs(node) min_cycle_len = min(min_cycle_len, cycle_len) return min_cycle_len if min_cycle_len != float(\'inf\') else -1"},{"question":"The city of Gridville has a unique public transport system where buses travel on a grid. The city is represented as an n x m grid where each cell corresponds to a block in the city. Each bus starts at the top-left corner of the grid (cell (1, 1)) and travels to the bottom-right corner (cell (n, m)). A bus can either move right or down at any point in time. Given the layout of Gridville, there are certain blocks that are blocked, and buses cannot pass through these blocks. Your task is to find the number of unique paths from the top-left corner to the bottom-right corner of the grid while avoiding the blocked blocks. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The next n lines contain m space-separated integers each, representing the grid. A 0 indicates that the cell is passable, and a 1 indicates that the cell is blocked. Output Print one integer — the number of unique paths from the top-left corner to the bottom-right corner of the grid. If there is no such path, print 0. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 0 1 0 0 0 0 Output 1 Input 3 3 0 1 0 1 1 0 0 0 0 Output 0 Note In the first sample, there are 2 unique paths from the top-left to the bottom-right corner: 1. Right → Right → Down → Down 2. Down → Down → Right → Right In the second sample, there is only 1 unique path: 1. Right → Down → Down → Right In the third sample, there is no path from the top-left to the bottom-right corner, so the output is 0.","solution":"def unique_paths(n, m, grid): if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0 for j in range(m)] for i in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"Read problems statements in Mandarin Chinese, Russian and Vietnamese as well. Chef is working as a software engineer and currently is involved in refactoring an old system that has multiple sequences of numbers. His task is to identify and extract all unique numbers from the sequences preserving the order of their first occurrence. Chef understands the sequences can be very large and is looking for an efficient solution to achieve this. ------ Input ------ The first line of input contains a single integer N, the number of sequences. The next N lines each contain a sequence of space-separated integers. ------ Output ------ Output a single line containing all unique numbers across all sequences, in the order of their first appearance. ------ Constraints ------ 1 ≤ N ≤ 10^3 1 ≤ text{Length of each sequence} ≤ 10^5 | text{Each number} | ≤ 10^9 ------ Sample Input 1 ------ 3 1 2 2 3 4 3 5 6 3 7 8 9 5 1 ------ Sample Output 1 ------ 1 2 3 4 5 6 7 8 9 ------ Explanation 1 ------ From the sequences provided, we extract: - From the first sequence: 1, 2, 3, 4 - From the second sequence: 5, 6, 7 - From the third sequence: 8, 9 The final output list is 1 2 3 4 5 6 7 8 9, consistent with the first occurrence order and with no duplicates.","solution":"def unique_numbers_in_sequences(n, sequences): seen = set() result = [] for seq in sequences: for number in seq.split(): if number not in seen: seen.add(number) result.append(number) return \\" \\".join(result)"},{"question":"You are given an array of length N where each element is an integer representing the height of a building. You want to change the height of some buildings so that the discrepancies in height between adjacent buildings do not exceed a certain value k. Find the minimum number of changes needed to achieve this. -----Constraints----- - 1 leq N leq 10^5 - 1 leq arr[i] leq 10^9 - 1 leq k leq 10^9 -----Input----- Input is given from Standard Input in the following format: N k arr -----Output----- Print the minimum number of changes needed in the heights of buildings to make sure the height differences between any two adjacent buildings do not exceed k. -----Sample Input----- 5 3 1 9 3 10 4 -----Sample Output----- 2 To achieve the desired condition, one way is to change the height of the second building to 4 (difference between 1st and 2nd becomes 3) and the height of the fourth building to 7 (difference between 3rd and 4th becomes 4 and difference between 4th and 5th becomes 3). This ensures all differences are less than or equal to 3, requiring 2 changes.","solution":"def min_changes_to_limit_discrepancy(n, k, arr): changes = 0 for i in range(1, n): if abs(arr[i] - arr[i - 1]) > k: changes += 1 arr[i] = arr[i - 1] + k if arr[i] > arr[i - 1] else arr[i - 1] - k return changes"},{"question":"You are given a string containing several words separated by spaces. A word is defined as a sequence of letters (a-z, A-Z) and may contain hyphens (-). Your task is to determine the length of the longest word in the string, considering hyphenated words as single words. The string may contain punctuation, which should be ignored. -----Input----- The input consists of a single line containing a string of at most 10^6 characters. The string may include letters, spaces, hyphens, and standard punctuation marks (.,!?). -----Output----- Output a single integer representing the length of the longest word in the input string. -----Examples----- Sample Input: Hello world! This is an example-string. Sample Output: 14 Sample Input: Programming in Python is fun, isn\'t it? Sample Output: 11","solution":"import re def longest_word_length(s): Returns the length of the longest word in the input string. Punctuation is ignored, and hyphenated words are considered single words. # Remove all punctuation except for hyphens and spaces, then split into words words = re.findall(r\'b[a-zA-Z-]+b\', s) # Find the longest word by length longest = max(words, key=len) if words else \\"\\" return len(longest)"},{"question":"You are hired as a manager for a robotic warehouse. Your warehouse consists of a grid of size n times m. Each cell in the grid can either be empty or contain an obstacle. Your task is to design an algorithm that can guide a robot from its starting position to a target position anywhere in the grid, avoiding obstacles and minimizing the number of steps taken. The robot is only allowed to move up, down, left, or right at each step. -----Input----- The first line of input contains two space-separated integers n and m (1 leq n, m leq 1000), the dimensions of the grid. The next n lines each contain m characters, where each character is either \'.\' (representing an empty cell) or \'#\' (representing an obstacle). The character \'S\' represents the robot\'s starting position, and \'T\' represents the target position. It is guaranteed that there is exactly one \'S\' and one \'T\' in the grid. -----Output----- Print the minimum number of steps the robot needs to reach the target position. If it is impossible to reach the target, print -1. -----Examples----- Sample Input: 5 5 S..#. .#.#. ..#.. .#..T ..... Sample Output: 9 Sample Input: 3 3 S#T # ..# Sample Output: -1","solution":"from collections import deque def min_steps_to_target(n, m, grid): # Locate the start and target positions start = None target = None for r in range(n): for c in range(m): if grid[r][c] == \'S\': start = (r, c) elif grid[r][c] == \'T\': target = (r, c) if not start or not target: return -1 # Directions: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(start[0], start[1], 0)]) # (row, col, steps) visited = set() visited.add(start) # BFS loop while queue: r, c, steps = queue.popleft() # Check if we reached the target if (r, c) == target: return steps # Explore neighbors for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] != \'#\': visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) # If we exhaust the queue and do not reach the target return -1"},{"question":"You are given an array of integers representing the heights of buildings in a row. The widths of each building are the same. You can choose any sequence of consecutive buildings and demolish them to create a park. The beauty of the park is defined as the sum of the heights of the buildings that were demolished. Find the maximum beauty of any possible park you can create by choosing a sequence of consecutive buildings. INPUT A single line containing space-separated integers representing the heights of the buildings. OUTPUT A single line containing the maximum beauty of the park. Constraints 1 ≤ Number of buildings ≤ 200000 0 ≤ heights of the buildings ≤ 10000 SAMPLE INPUT 2 1 3 4 1 2 SAMPLE OUTPUT 11 Explanation The sequence of buildings with heights 2, 1, 3, 4, 1 which have the maximum beauty sum of 2+1+3+4+1=11.","solution":"def max_beauty_of_park(heights): Finds the maximum beauty of any possible park by choosing a sequence of consecutive buildings. Parameters: heights (list of int): A list of integers representing the heights of the buildings. Returns: int: The maximum beauty of the park. max_sum = current_sum = heights[0] for height in heights[1:]: current_sum = max(height, current_sum + height) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a text consisting of multiple lines. Each line contains several words separated by spaces. Some words might be repeated within the text. Your task is to identify each unique word and count the number of its occurrences across the whole text. The words should be case-insensitive when performing the comparison, but the output should preserve the original case in which the words first appeared. The words should be output in the order they first appear in the text. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), representing the number of lines in the text. The next n lines contain the text, with each line consisting of words separated by spaces. Each word contains only alphabetic characters and has a length of at most 50 characters. -----Output----- Print each unique word and its number of occurrences in separate lines, following the order in which they first appeared in the text. -----Examples----- Input 3 Hello world hello Python Python world of code Output Hello 2 world 2 Python 2 of 1 code 1 Input 2 Coding is fun Fun fun coding Output Coding 2 is 1 fun 3","solution":"def count_words(n, lines): Count the occurrences of each unique word in the given text. Arguments: n -- integer, number of lines in the text lines -- list of strings, each string representing a line in the text Returns: A list of tuples, each containing a word and its count, in the order of their first appearance. word_counts = {} order = [] for line in lines: for word in line.split(): normalized_word = word.lower() if normalized_word not in word_counts: word_counts[normalized_word] = (word, 0) order.append(normalized_word) word_counts[normalized_word] = (word_counts[normalized_word][0], word_counts[normalized_word][1] + 1) return [(word_counts[word][0], word_counts[word][1]) for word in order]"},{"question":"Design an algorithm that takes a string consisting of only \'(\' and \')\' characters and determines the minimum number of parentheses that need to be added to make it a valid balanced string. A valid balanced parentheses string is defined as: 1. An empty string is valid. 2. If \\"A\\" and \\"B\\" are valid balanced strings, then \\"AB\\" is also valid. 3. If \\"A\\" is a valid balanced string, then \\"(A)\\" is also valid. You need to compute the minimum number of parentheses needed to be added to the string to make it valid. Input: - The first line contains an integer `t`, the number of test cases. - The next `t` lines each contain a string consisting of only the characters \'(\' and \')\'. Each string\'s length does not exceed 1000 characters. Output: - For each test case, output the minimum number of parentheses needed to make the provided string valid. SAMPLE INPUT 3 ())( ((( ))) SAMPLE OUTPUT 2 3 0 Explanation EXAMPLE 1: The string \\"())(\\" can be balanced by adding one \'(\' at the beginning and one \')\' at the end, resulting in \\"(())(())\\". EXAMPLE 2: The string \\"(((\\" can be balanced by adding three \')\' at the end, resulting in \\"((()))\\". EXAMPLE 3: The string \\")))\\" is already balanced, so no parentheses are needed.","solution":"def min_add_to_make_valid(s): Given a string s consisting of only \'(\' and \')\' characters, this function returns the minimum number of parentheses that need to be added to make it a valid balanced string. left_needed = 0 right_needed = 0 for char in s: if char == \'(\': left_needed += 1 elif char == \')\': if left_needed > 0: left_needed -= 1 else: right_needed += 1 return left_needed + right_needed def process_test_cases(test_cases): return [min_add_to_make_valid(s) for s in test_cases]"},{"question":"You are given an array of integers, representing a sequence of heights of mountains. The sequence is considered \\"beautiful\\" if each mountain height is greater than the previous one until the highest point and then it must decrease strictly. In other words, there should be exactly one peak in the sequence. Your task is to determine if the sequence is beautiful or not. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of testcases. The first line of each testcase contains a single integer n (3 le n le 10^5) — the number of mountains in the sequence. The second line contains n integers h_1, h_2, dots, h_n (1 le h_i le 10^9) — the heights of the mountains. The sum of n over all testcases doesn\'t exceed 10^5. -----Output----- For each testcase, print \\"Yes\\" if the sequence is beautiful, otherwise print \\"No\\". -----Examples----- Input 4 5 1 2 3 1 0 6 1 2 4 3 2 1 3 1 3 2 5 1 3 3 2 1 Output Yes Yes Yes No -----Note----- In the first testcase, the heights strictly increase till 3 and then strictly decrease. In the second testcase, the heights strictly increase till 4 and then strictly decrease. In the third testcase, the heights strictly increase till 3 and then strictly decrease. In the fourth testcase, the heights don\'t strictly increase till the highest point.","solution":"def is_beautiful(arr): Returns \\"Yes\\" if the sequence of mountains heights is beautiful, otherwise \\"No\\". A sequence is beautiful if it strictly increases and then strictly decreases with exactly one peak. n = len(arr) if n < 3: return \\"No\\" peak_found = False for i in range(1, n): if arr[i] == arr[i - 1]: return \\"No\\" elif arr[i] > arr[i - 1]: if peak_found: return \\"No\\" elif arr[i] < arr[i - 1]: if i == 1: # Peak can\'t be the first element return \\"No\\" peak_found = True return \\"Yes\\" if peak_found else \\"No\\" def mountain_sequence_testcases(testcases): Processes multiple testcases and returns the results for each. results = [] for n, heights in testcases: results.append(is_beautiful(heights)) return results"},{"question":"You are given a network consisting of n computers (numbered from 1 to n) and initially there are no cables connecting them. Over time, m direct bidirectional cables will be added between pairs of computers, allowing them to communicate directly. The i-th cable connects the computers with numbers ai and bi. After each cable addition, you are asked to determine the number of isolated networks (groups of computers that can communicate with each other but with no other computers) present in the network. Since initially there are no connections, the number of isolated networks starts off as n (each computer is isolated). After each addition of a cable, the number of isolated networks might decrease or remain the same depending on whether the cable connects two previously isolated networks or connects computers within the same network. Input The first line contains two integers n and m (2 ≤ n ≤ 105, 1 ≤ m ≤ 105) representing the number of computers and the number of cables to be added, respectively. The next m lines each contain two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) describing the two computers connected by the i-th cable. Output Print m lines, where the i-th line represents the number of isolated networks after adding the i-th cable. Examples Input 4 3 1 2 2 3 1 3 Output 3 2 2 Note Initially, the computers are isolated as in: 1 2 3 4 After the first cable (1-2): 1-2 3 4 After the second cable (2-3): 1-2-3 4 After the third cable (1-3): 1-2-3 4 (no change in isolated networks since 1, 2, and 3 were already connected via previous cables)","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n self.components = n # initially there are n isolated components def find(self, u): if u != self.parent[u]: self.parent[u] = self.find(self.parent[u]) # path compression return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: # only union if they are in different sets if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 self.components -= 1 # merging two components decreases the count def isolated_networks(n, cables): uf = UnionFind(n) result = [] for a, b in cables: uf.union(a - 1, b - 1) result.append(uf.components) return result # Example Usage: # n = 4 # cables = [(1, 2), (2, 3), (1, 3)] # print(isolated_networks(n, cables))"},{"question":"The Longest Sequence of Consecutive Integers Given an unsorted list of integers, write a program to find the length of the longest sequence of consecutive integers in the list. For instance, if the list is [100, 4, 200, 1, 3, 2], the longest sequence of consecutive integers is [1, 2, 3, 4]. This sequence has a length of 4. Function Description Complete the `longest_consecutive_sequence` function in the editor below. `longest_consecutive_sequence` has the following parameter: - int arr: a list of integers Return: - int: the length of the longest sequence of consecutive integers Input Format A single integer array `arr` where 0 leq text{len(arr)} leq 10^5 and -10^9 leq arr[i] leq 10^9. Output Format A single integer denoting the length of the longest sequence of consecutive integers. Sample Input [100, 4, 200, 1, 3, 2] Sample Output 4 Explanation The longest sequence of consecutive integers within the given list is [1, 2, 3, 4], which has length 4.","solution":"def longest_consecutive_sequence(arr): Returns the length of the longest sequence of consecutive integers in the list arr. if not arr: return 0 num_set = set(arr) longest_length = 0 for num in arr: if num - 1 not in num_set: current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 longest_length = max(longest_length, current_length) return longest_length"},{"question":"You are given an array of integers and a target integer. Your goal is to determine if there exist three integers in the array such that their sum is equal to the given target. If such an arrangement exists, print \\"YES\\", otherwise print \\"NO\\". Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains two integers n and k (3 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9) — where n is the size of the array and k is the target sum. The second line of each test case contains n integers a1, a2, …, an (-10^9 ≤ ai ≤ 10^9) representing the elements of the array. Output For each test case, print \\"YES\\" if there are three integers in the array whose sum is equal to the target integer. Otherwise, print \\"NO\\". Example Input: 3 4 6 1 2 3 4 5 9 1 2 3 4 5 7 0 -1 0 1 2 -1 -4 3 Output: YES YES YES Note In the first test case, the triplet (1, 2, 3) sums up to 6. In the second test case, the triplet (1, 3, 5) sums up to 9. In the third test case, the triplet (-1, 0, 1) sums up to 0 as well as the triplet (-1, -1, 2), or (-4, 1, 3) sum up to 0.","solution":"def three_sum_exists(test_cases): results = [] for n, k, arr in test_cases: arr.sort() found = False for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == k: found = True break elif current_sum < k: left += 1 else: right -= 1 if found: break results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"-----Input----- The input consists of a single integer n (1 ≤ n ≤ 100). -----Output----- Output a single integer representing the number of trailing zeros in n factorial. -----Examples----- Input 5 Output 1 Input 10 Output 2 Input 25 Output 6 Input 50 Output 12","solution":"def trailing_zeros_in_factorial(n): Returns the number of trailing zeros in the factorial of n. count = 0 power_of_5 = 5 while n >= power_of_5: count += n // power_of_5 power_of_5 *= 5 return count"},{"question":"In a grid of size 2xN, a snake can start from any cell (1,1), (1,2), ..., (1,N) or (2,1), (2,2), ..., (2,N). The snake can move right, down, up, or left but cannot move backward. If the snake moves from a column to another, it can switch rows if needed. Determine the maximum number of cells the snake can cover if it can move to a new cell if and only if the cell is within the grid limits and is not previously visited. For example, in a 2x3 grid, the snake can start from (1,1) and move to (1,2) and then to (1,3), switch to (2,3), and finally move to (2,2) and (2,1), covering all 6 cells. -----Input----- First line of input contains an integer T, denoting the number of test cases. For each test case, a single integer N (indicating the number of columns in the grid). -----Output----- Output an integer, denoting the maximum number of cells the snake can cover starting from any cell in a 2xN grid. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 200 -----Example----- Input: 2 3 5 Output: 6 10 -----Explanation----- In the first case: In a 2x3 grid, the snake can move as such (1,1) → (1,2) → (1,3) → (2,3) → (2,2) → (2,1). In the second case: In a 2x5 grid, the snake can cover all 10 cells optimally by starting at (1,1), moving to (1,2), (1,3), (1,4), (1,5), then down to (2,5), moving left to (2,4), (2,3), (2,2), and (2,1).","solution":"def maximum_cells_covered(T, test_cases): This function returns the maximum number of cells the snake can cover in a 2xN grid for each test case. results = [] for N in test_cases: results.append(2 * N) # Each grid has 2 rows, so maximum cells covered will be 2*N return results"},{"question":"The Kingdom of Lavaland is known for its volcanic activities, and the people of Lavaland use a special mechanism to predict eruptions. They call that mechanism \\"Volcanoverse.\\" Given a string consisting of the characters \'V\' and \'L\', representing volcanic rock and lava respectively, the Volcanoverse algorithm predicts the next state of Lavaland by following these rules: 1. \'V\' remains \'V\' in the next state. 2. \'L\' turns into \'V\' if it is adjacent to at least one \'V\'; otherwise, it remains \'L\'. Write a function that outputs the next state of Lavaland given the initial state as input. The function signature is: ```python def next_state(initial_state: str) -> str: ``` # Input - The first line contains an integer T, the number of test cases. - The subsequent T lines each consist of a string of characters \'V\' and \'L\' representing the initial state of Lavaland. # Output - For each test case, output a string representing the next state of Lavaland. # Constraints 1 ≤ T ≤ 100 1 ≤ Length of each string ≤ 1000 # SAMPLE INPUT 3 VVLVLLLV LLLL LVLV # SAMPLE OUTPUT VVVVVVVV LLLL VVVV # Explanation 1. For the first test case: \'VVLVLLLV\' transforms to \'VVVVVVVV\' because each \'L\' is adjacent to at least one \'V\'. 2. For the second test case: \'LLLL\' remains \'LLLL\' because there are no \'V\' characters adjacent to any \'L\'. 3. For the third test case: \'LVLV\' transforms to \'VVVV\' because each \'L\' character is adjacent to a \'V\'.","solution":"def next_state(initial_state: str) -> str: Returns the next state of Lavaland given the initial state according to the Volcanoverse mechanism. \'V\' remains \'V\', and \'L\' turns into \'V\' if it is adjacent to at least one \'V\'. n = len(initial_state) next_state = list(initial_state) for i in range(n): if initial_state[i] == \'L\': if (i > 0 and initial_state[i - 1] == \'V\') or (i < n - 1 and initial_state[i + 1] == \'V\'): next_state[i] = \'V\' return \'\'.join(next_state)"},{"question":"You are given an array of integers representing the daily closing prices of a stock over a period of n days. You are also given q queries that ask for the expected profit for a certain period of days provided you can choose the best days to buy and sell the stock exactly once. Each query is of the form l r which means you should calculate the maximum possible profit by choosing a pair of days to buy and sell the stock between days l and r (inclusive). Note: - You can only sell the stock after buying it. - If no profit can be made during that period, return 0. Input The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100 000), the number of days and the number of queries respectively. The next line contains n integers representing the daily closing prices of the stock. The next q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n) that describe a query about the maximum profit for the period between days l and r. Output For each query, output a single integer that represents the maximum profit that can be made for the specified period. If no profit can be made during that period, output 0. Example Input 6 2 7 1 5 3 6 4 1 6 2 4 Output 5 4","solution":"def calculate_max_profit(prices, queries): Calculate the maximum profit for each query. Args: prices: List of integers representing daily closing prices. queries: List of tuples (l, r) where l and r represent the range of days (1-indexed). Returns: List of integers representing the maximum profit for each query. results = [] for l, r in queries: max_profit = 0 min_price = float(\'inf\') for i in range(l-1, r): if prices[i] < min_price: min_price = prices[i] elif prices[i] - min_price > max_profit: max_profit = prices[i] - min_price results.append(max_profit) return results"},{"question":"Linda wants to explore how many palindromic substrings are there in a given string. A palindromic string is one that reads the same forward and backward; for example, \\"aba\\" and \\"racecar\\" are palindromic. Input The first line of the input contains T, the number of test cases. Each of the next T lines contains a single string S. Output For each test case, output the number of palindromic substrings in the given string S. Constraints 1 ≤ |S| ≤ 1000 1 ≤ T ≤ 100 Example Input: 2 abc aaa Output: 3 6 Explanation Example case 1. The possible palindromic substrings of \\"abc\\" are \\"a\\", \\"b\\", and \\"c\\". Example case 2. The possible palindromic substrings of \\"aaa\\" are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", and \\"aaa\\".","solution":"def count_palindromic_substrings(S): Returns the number of palindromic substrings in the input string S. n = len(S) count = 0 # A helper function to count palindromes centered at l, r def count_palindromes_around_center(l, r): nonlocal count while l >= 0 and r < n and S[l] == S[r]: count += 1 l -= 1 r += 1 for i in range(n): # Count odd-length palindromes (single character center) count_palindromes_around_center(i, i) # Count even-length palindromes (two character center) count_palindromes_around_center(i, i + 1) return count def palindromic_substrings_in_test_cases(T, cases): Returns a list containing the number of palindromic substrings for each test case. - T: the number of test cases - cases: a list of strings representing each test case results = [] for case in cases: results.append(count_palindromic_substrings(case)) return results"},{"question":"Tom is a game developer working on a new farming simulation game. In this game, players can plant different types of crops in a field consisting of a grid. The crops have varying growth times, and Tom wants to ensure that players can maximize their harvest efficiency. Therefore, he needs a program that helps calculate the total harvest time for the entire grid. Each cell in the grid may be empty or contain one of several types of crops, each with a specific growth time (in days). The grid is represented as a 2D matrix, where an empty cell is denoted by 0, and non-zero values represent different crops with their corresponding growth times. For example: ``` [ [3, 0, 2], [0, 4, 0], [1, 0, 5] ] ``` Here, the matrix represents a 3x3 field with the following growth times for each cell: - Crop with growth time 3 days at (0,0) - Crop with growth time 2 days at (0,2) - Crop with growth time 4 days at (1,1) - Crop with growth time 1 day at (2,0) - Crop with growth time 5 days at (2,2) Write a function that takes the crop grid as input and returns the total number of days required to harvest all crops. For the provided example, the function should return `15` since the total growth times are 3 + 2 + 4 + 1 + 5 = 15. # Function Signature ```python def total_harvest_time(grid: List[List[int]]) -> int: ``` # Input - `grid` (List[List[int]]): A 2D list of integers representing the crop grid. The dimensions of the grid are not fixed but the grid will have at least one cell and at most 100 cells in each dimension. # Output - Returns an integer representing the total harvest time of all crops in the grid. # Constraints - Crops with a growth time will have a positive integer value. - Empty cells are represented by 0 and should not contribute to the harvest time.","solution":"def total_harvest_time(grid): Calculate the total harvest time for all crops in the grid. Args: grid (List[List[int]]): A 2D list of integers representing the crop grid. Returns: int: The total harvest time for all crops. total_time = 0 for row in grid: for cell in row: if cell > 0: total_time += cell return total_time"},{"question":"You are tasked with finding the minimum number of operations required to transform a given string S into a string that consists only of vowels (a, e, i, o, u). In one operation, you can replace any single character in S with any other character. Input The first line contains a single integer T, the number of test cases. Each of the next T lines contains a single string S of length between 1 and 100. Output For each test case, output one integer - the minimum number of operations required. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100 SAMPLE INPUT 2 hello world SAMPLE OUTPUT 3 4","solution":"def min_operations_to_vowels(T, test_cases): This function finds the minimum number of operations required to transform a given string into a string that consists only of vowels. Arguments: T : int : the number of test cases test_cases : list of str : list of test case strings Returns: operations : list of int : list of minimum operations for each test case vowels = set(\'aeiou\') def min_operations(s): return sum(1 for char in s if char not in vowels) operations = [] for s in test_cases: operations.append(min_operations(s)) return operations # Example usage: # T = 2 # test_cases = [\\"hello\\", \\"world\\"] # print(min_operations_to_vowels(T, test_cases)) # Output should be [3, 4]"},{"question":"Given an array of integers nums, an integer k, and an integer target, your task is to determine if there exists a subarray (contiguous segment) of nums of length k such that the average of the subarray equals target. If such a subarray exists, return the starting index of such subarray. If there are multiple such subarrays, return the starting index of any of them. If no such subarray exists, return -1. -----Constraints----- - 1 ≤ k ≤ |nums| ≤ 10^5 - -10^4 ≤ nums[i] ≤ 10^4 - -10^4 ≤ target ≤ 10^4 -----Input----- The input is given from Standard Input in the following format: - The first line contains an integer n, the length of the array nums. - The second line contains n space-separated integers representing the elements of nums. - The third line contains an integer k. - The fourth line contains an integer target. -----Output----- If there exists a subarray of length k with an average equal to target, print the starting index of one such subarray. If no such subarray exists, print -1. -----Sample Input----- 6 1 2 3 4 5 6 3 4 -----Sample Output----- 1 The subarray starting at index 1 (2 3 4) has an average of 3, but the subarray starting at index 2 (3 4 5) has an average of 4 which matches the target. Therefore, the output is 2. Note that if one-based index is expected, convert accordingly.","solution":"def find_subarray_with_avg(nums, k, target): Determines if there exists a subarray of length k in nums such that the average of that subarray equals target. Returns the starting index if such subarray exists, otherwise returns -1. n = len(nums) target_sum = target * k current_sum = sum(nums[:k]) if current_sum == target_sum: return 0 for i in range(1, n - k + 1): current_sum = current_sum - nums[i - 1] + nums[i + k - 1] if current_sum == target_sum: return i return -1"},{"question":"Write a function that takes an array of strings and returns the longest string in the array. If there are multiple strings of the same maximum length, return the first one that appears in the array. ```python longest_string([\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"]) == \\"banana\\" ``` If the array is empty, return an empty string: ```python longest_string([]) == \\"\\" ```","solution":"def longest_string(strings): Returns the longest string from the array of strings. If there are multiple strings of the same maximum length, return the first one that appears. If the array is empty, return an empty string. if not strings: return \\"\\" return max(strings, key=len)"},{"question":"In a remote village, there is one main road that connects all the houses in a single straight line. Each house is represented by a position on a number line. You are given the positions of the houses and an integer k which represents the maximum number of houses that can share the same street light. Your task is to determine the minimum number of street lights required to illuminate all the houses such that no more than k houses share the same street light. A street light illuminates the houses that lie within a certain range d (both inclusive) from its position. You need to find the optimal number and positions of the street lights for given ranges to minimize the number of street lights used while ensuring that no more than k houses are illuminated by a single street light. -----Input----- The first line contains two integers n and k (1 le n le 100000, 1 le k le n) — the number of houses and the maximum number of houses that can be illuminated by one street light. The second line contains n distinct integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — positions of the houses on a number line. -----Output----- Print a single integer representing the minimum number of street lights required. -----Examples----- Input 10 2 1 3 5 7 9 11 13 15 17 19 Output 5 Input 4 3 7 14 21 28 Output 2 Input 6 1 2 4 6 8 10 12 Output 6","solution":"def min_street_lights(n, k, positions): Determine the minimum number of street lights required. :param n: int, number of houses :param k: int, maximum number of houses that can share one street light :param positions: list of int, positions of the houses on a number line :return: int, minimum number of street lights required if k == 1: return n positions.sort() num_lights = 0 i = 0 while i < n: num_lights += 1 # a street light at positions[i + k - 1] can illuminate up to k houses, or as many as available till end next_position = positions[min(i + k - 1, n - 1)] # move to the first house beyond the range of this street light i += k return num_lights"},{"question":"Given an array of integers, rotate the array to the right by `k` steps, where `k` is a non-negative integer. A single rotation moves the last element of the array to the first position, and shifts all remaining elements one index to the right. Write a function `rotateRight` that performs this rotation in-place without using extra space for another array. Example 1: Input: arr = [1, 2, 3, 4, 5, 6, 7], k = 3 Output: [5, 6, 7, 1, 2, 3, 4] Explanation: Rotate the array to the right by 3 steps: [7, 1, 2, 3, 4, 5, 6] → [6, 7, 1, 2, 3, 4, 5] → [5, 6, 7, 1, 2, 3, 4] Example 2: Input: arr = [-1, -100, 3, 99], k = 2 Output: [3, 99, -1, -100] Explanation: Rotate the array to the right by 2 steps: [99, -1, -100, 3] → [3, 99, -1, -100] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `rotateRight` which takes the array and the number of steps (`k`) as input parameters and modifies the array in-place. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: - 1 <= arr.length <= 10^5 - -10^5 <= arr[i] <= 10^5 - 0 <= k <= 10^5","solution":"def rotateRight(arr, k): Rotates the array to the right by k steps. Parameters: arr (list of int): The array to rotate. k (int): The number of steps to rotate the array. Returns: None: The function modifies the array in-place. n = len(arr) k = k % n # Reverse the entire array arr.reverse() # Reverse the first k elements arr[:k] = reversed(arr[:k]) # Reverse the rest of the elements arr[k:] = reversed(arr[k:])"},{"question":"# Task Given a matrix of integers, return the count of positive numbers in the matrix. Positive numbers are those greater than zero. # Example For matrix = ``` [ [ -1, 2, 3], [ 4, 5, -6], [ 7, -8, 9] ] ``` the output should be `6`. Explanation: The positive numbers in the matrix are 2, 3, 4, 5, 7, and 9. Hence, the count is 6. # Input/Output - `[input]` 2D integer array `matrix` Constraints: 1 ≤ matrix.length ≤ 100, 1 ≤ matrix[0].length ≤ 100, -100 ≤ matrix[i][j] ≤ 100 - `[output]` an integer","solution":"def count_positive_numbers(matrix): Returns the count of positive numbers in the matrix. count = 0 for row in matrix: for number in row: if number > 0: count += 1 return count"},{"question":"You are given a list of n integers and a target sum k. Your task is to determine if there are any two distinct elements in the list that add up to the target sum k. If such a pair exists, return their indices (1-based). If multiple pairs are possible, return any one. If no such pair exists, return `-1 -1`. # Input The input comprises multiple datasets, each of which is given as follows: ``` n k a1 a2 ... an ``` - The first line contains two integers n and k separated by a space. - The second line contains n integers a1, a2, ..., an separated by spaces, representing the list of integers. The sequence of datasets ends with a line containing two zeroes `0 0`. # Output For each dataset, output a single line containing two integers `i` and `j` (1-based indices) if there exist indices such that `ai + aj = k`. If no such indices exist, output `-1 -1`. # Constraints - 2 ≤ n ≤ 100,000 - -100,000,000 ≤ ai ≤ 100,000,000 - -200,000,000 ≤ k ≤ 200,000,000 # Example Input ``` 4 9 1 2 3 7 5 12 20 15 30 40 25 3 6 1 2 3 0 0 ``` # Example Output ``` 2 4 2 5 -1 -1 ``` # Explanation In the first dataset, the integers at indices 2 and 4 (1-based) are 2 and 7, respectively, which add up to 9. Thus the output is `2 4`. For the second dataset, the indices 2 and 5 (1-based) are selected because 15 + 25 = 40. The third dataset does not contain any pair of integers that add up to 6, so the output is `-1 -1`.","solution":"def find_pair_indices(arr, k): value_to_index = {} for i, num in enumerate(arr): complement = k - num if complement in value_to_index: return value_to_index[complement] + 1, i + 1 value_to_index[num] = i return -1, -1 def process_input(data): results = [] for line in data: first_line, second_line = line n, k = map(int, first_line.split()) if n == 0 and k == 0: break arr = list(map(int, second_line.split())) results.append(find_pair_indices(arr, k)) return results"},{"question":"Alex is a computer running a data center consisting of n servers connected by n-1 two-way wires, forming a tree structure. Each server is uniquely identified by an integer from 1 to n, and the server 1 is designated as the master server of the data center. The data center frequently undergoes maintenance operations to ensure optimal performance. During each maintenance operation, a subset of k servers is taken offline simultaneously to undergo maintenance. These k servers can be chosen arbitrarily among the n servers. Alex wants to ensure that even during maintenance operations, a maximal number of servers are able to communicate with the master server (server 1). To achieve this, Alex will select the k servers to be maintained in such a way that the remaining servers can still use the remaining wires to communicate with the master server. Determine the maximum number of servers that can still communicate with the master server after taking exactly k servers offline for maintenance. Input The first line contains two integers n and k (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ k < n) — the number of servers and the number of servers taken offline for maintenance respectively. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), indicating that there is a wire connecting server u and server v. It is guaranteed that from any server, you can reach any other server by the wires. Output Print a single integer — the maximum number of servers that can still communicate with the master server after exactly k servers are taken offline. Examples Input 7 3 1 2 2 3 3 4 4 5 3 6 6 7 Output 4 Input 5 2 1 2 1 3 2 4 3 5 Output 3 Input 6 1 1 2 1 3 2 4 4 5 5 6 Output 5 Note In the first example, Alex can take servers 5, 6, and 7 offline for maintenance. The remaining servers 1, 2, 3, and 4 can still communicate with the master server, giving a maximum of 4 servers that can communicate. In the second example, Alex can take servers 4 and 5 offline for maintenance. The remaining servers 1, 2, and 3 can still communicate with the master server, giving a maximum of 3 servers that can communicate. In the third example, Alex can take server 6 offline for maintenance. The remaining servers 1, 2, 3, 4, and 5 can still communicate with the master server, giving a maximum of 5 servers that can communicate.","solution":"def max_servers_communicate(n, k, connections): from collections import defaultdict, deque def bfs(start): visited = [False] * (n + 1) queue = deque([(start, 0)]) visited[start] = True dist = [0] * (n + 1) while queue: node, d = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True dist[neighbor] = d + 1 queue.append((neighbor, dist[neighbor])) return dist adj_list = defaultdict(list) for u, v in connections: adj_list[u].append(v) adj_list[v].append(u) dist_from_root = bfs(1) dist_nodes = [(dist, node) for node, dist in enumerate(dist_from_root) if node != 0] dist_nodes.sort(reverse=True, key=lambda x: x[0]) taken_offline = set([node for _, node in dist_nodes[:k]]) def count_online(node): count = 0 visited = [False] * (n + 1) stack = [node] while stack: current = stack.pop() if visited[current] or current in taken_offline: continue visited[current] = True count += 1 for neighbor in adj_list[current]: if not visited[neighbor]: stack.append(neighbor) return count return count_online(1)"},{"question":"Description You have been tasked with creating a function that processes a list of events. Each event has a start time and an end time. Your function should determine whether any events overlap. Two events overlap if they both occupy at least one common time unit. The function should take in a list of dictionaries, where each dictionary represents an event with \'start\' and \'end\' times. The \'start\' and \'end\' times are inclusive integers. The function should return a boolean: True if any events overlap, and False otherwise. You may assume that the input list is non-empty, and each event has valid \'start\' and \'end\' times (with \'start\' always less than or equal to \'end\'). # Examples ```python events = [ {\'start\': 1, \'end\': 5}, {\'start\': 6, \'end\': 10}, {\'start\': 11, \'end\': 15} ] output: False events = [ {\'start\': 1, \'end\': 5}, {\'start\': 4, \'end\': 8}, {\'start\': 9, \'end\': 12} ] output: True events = [ {\'start\': 1, \'end\': 3}, {\'start\': 2, \'end\': 6}, {\'start\': 5, \'end\': 10} ] output: True ``` # Function Signature ```python def has_overlapping_events(events: List[Dict[str, int]]) -> bool: # Your code here ```","solution":"from typing import List, Dict def has_overlapping_events(events: List[Dict[str, int]]) -> bool: Determines whether any events overlap. Assumes events have valid \'start\' and \'end\' times. Args: events (List[Dict[str, int]]): List of events, each with \'start\' and \'end\' keys. Returns: bool: True if any events overlap, False otherwise. events.sort(key=lambda event: event[\'start\']) for i in range(len(events) - 1): if events[i][\'end\'] >= events[i + 1][\'start\']: return True return False"},{"question":"You are developing a new software application and need to implement an interface for displaying a calendar. You have identified that a key feature is the ability to calculate the day of the week for any given date. This will be useful for determining the positions of the dates within a week grid on the calendar interface, highlighting weekends, and other similar features. Write a program that takes a date in the format of YEAR-MONTH-DAY and determines the day of the week. Please write a function `findDayOfWeek` that accepts three integers: - `year` - an integer representing the year (1 ≤ year ≤ 9999) - `month` - an integer representing the month (1 ≤ month ≤ 12) - `day` - an integer representing the day (1 ≤ day ≤ 31) The function should return a string representing the day of the week (e.g., \\"Monday\\", \\"Tuesday\\"). You need to follow the Gregorian calendar system for the calculation. input The input consists of multiple lines. Each line contains three integers representing a date: `year month day`. The end of the input is indicated by the line `0 0 0`. output For each valid date input, output the corresponding day of the week on a new line. If the input is `0 0 0`, terminate the program. Example Input 2023 10 29 2021 7 4 1999 12 31 0 0 0 Output Sunday Sunday Friday","solution":"import datetime def findDayOfWeek(year, month, day): This function takes a date specified by integers year, month, and day. It returns the day of the week for the given date. date = datetime.date(year, month, day) return date.strftime(\\"%A\\") def main(): import sys input = sys.stdin.read lines = input().strip().split(\'n\') for line in lines: year, month, day = map(int, line.split()) if year == 0 and month == 0 and day == 0: break print(findDayOfWeek(year, month, day)) if __name__ == \\"__main__\\": main()"},{"question":"Task Your task is to create a `Classroom` data structure. It consists of three basic methods: `add_student()`, `remove_student()`, and `get_students()`. The maximum capacity of the classroom is 10 students. The `add_student()` method should accept a student name as an argument and add it to the classroom. If the classroom is full, the method should not add the student and should return \\"Classroom is full\\": ```python classroom = Classroom() classroom.add_student(\\"Alice\\") classroom.add_student(\\"Bob\\") print(classroom.get_students()) # Output: [\\"Alice\\", \\"Bob\\"] classroom.add_student(\\"Charlie\\") print(classroom.get_students()) # Output: [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] ``` The `remove_student()` method should accept a student name as an argument and remove it from the classroom. If the student is not found, it should return \\"Student not found\\": ```python classroom.remove_student(\\"Alice\\") print(classroom.get_students()) # Output: [\\"Bob\\", \\"Charlie\\"] classroom.remove_student(\\"David\\") # Output: \\"Student not found\\" ``` The `get_students()` method should return a list of student names currently in the classroom, in the order they were added: ```python classroom.add_student(\\"Eve\\") print(classroom.get_students()) # Output: [\\"Bob\\", \\"Charlie\\", \\"Eve\\"] ``` The `__str__` method (or equivalent) should return a string representation of the current list of students in the classroom. If the classroom is empty, it should return \\"Classroom is empty\\": ```python classroom = Classroom() print(classroom) # Output: \\"Classroom is empty\\" classroom.add_student(\\"Alice\\") classroom.add_student(\\"Bob\\") print(classroom) # Output: \\"Students: Alice, Bob\\" ```","solution":"class Classroom: def __init__(self): self.students = [] self.capacity = 10 def add_student(self, student_name): if len(self.students) < self.capacity: self.students.append(student_name) return \\"Student added\\" else: return \\"Classroom is full\\" def remove_student(self, student_name): if student_name in self.students: self.students.remove(student_name) return \\"Student removed\\" else: return \\"Student not found\\" def get_students(self): return self.students def __str__(self): if not self.students: return \\"Classroom is empty\\" return \\"Students: \\" + \\", \\".join(self.students)"},{"question":"Suppose we have a `rotate` function that rotates an array of integers by `k` positions to the right. For instance, given the array `[1,2,3,4,5,6,7]` and `k = 3`, the array would be rotated to `[5,6,7,1,2,3,4]`. Write a function `rotate` that takes an array of integers and an integer `k`, and rotates the array in place. For example: ```python rotate([1,2,3,4,5,6,7], 3) # The array becomes [5,6,7,1,2,3,4] rotate([-1,-100,3,99], 2) # The array becomes [3,99,-1,-100] ``` Your function must **rotate the array in place**, which means you cannot use extra space for another array and the change must reflect in the original array. You are allowed to use O(1) additional space and your code should run in linear time O(n). Hint: Consider manipulating the array with reverse operations in three steps: reverse the entire array, reverse the first `k` elements, and then reverse the remaining elements.","solution":"def rotate(nums, k): Rotates the array nums by k steps to the right in-place. n = len(nums) k %= n # Helper function to reverse elements in the array def reverse(start, end): while start < end: nums[start], nums[end] = nums[end], nums[start] start += 1 end -= 1 # Step 1: Reverse the entire array reverse(0, n - 1) # Step 2: Reverse the first k elements reverse(0, k - 1) # Step 3: Reverse the remaining elements reverse(k, n - 1)"},{"question":"Problem description Alice and Bob love to play games. They found an interesting game involving numbers. The game is played as follows: 1. Both players decide on a number `n`. 2. They take turns to choose any number `x` (1 <= x <= n) and remove it from the set of available numbers. 3. The player who is unable to make a move (because no numbers are left) loses the game. Alice always goes first, and both Alice and Bob play optimally. Given the number `n`, determine whether Alice will win or lose if she starts the game. Input First line contains T, the number of test cases. Each test case consists of a number N on a new line. Output For each test case, print \\"Win\\" if Alice can guarantee a victory, otherwise print \\"Lose\\". Constraints 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^7 Example Input: 2 1 2 Output: Win Lose","solution":"def will_alice_win(n): Determines whether Alice will win or lose given the starting number n. Alice wins if n is odd, otherwise Bob wins (since he will always make it odd for Alice\'s turn). return \\"Win\\" if n % 2 == 1 else \\"Lose\\" def check_game_results(test_cases): Takes a list of test cases and returns the results for each test case. return [will_alice_win(n) for n in test_cases]"},{"question":"You are managing a team of developers working on a software project. The project has N tasks, and each task has a certain number of dependencies that need to be completed before the task can start. You need to determine a valid order in which the tasks can be completed, given the dependencies. Each task is represented by an integer from 0 to N-1. The dependencies are provided as a list of pairs, where each pair [a, b] indicates that task b depends on task a (i.e., task a must be completed before task b). INPUT The first line of the input contains two integers N and M, the number of tasks and the number of dependencies respectively. The next M lines each contain two space-separated integers a and b, representing a dependency pair, where task a must be completed before task b. OUTPUT Output a single line containing a valid order of tasks, i.e., a permutation of the integers from 0 to N-1 such that for every pair [a, b] given in the input, a appears before b in the permutation. If multiple valid orders exist, print any one of them. If no valid order exists, print \\"IMPOSSIBLE\\". CONSTRAINTS 1 ≤ N ≤ 1000 0 ≤ M ≤ 10000 0 ≤ a, b < N SAMPLE INPUT 4 3 0 1 1 2 2 3 SAMPLE OUTPUT 0 1 2 3 Explanation For the sample input, the tasks can be completed in the order [0, 1, 2, 3], as each task relies on the previous one being completed. Other valid outputs would be impossible as it must respect the order of dependencies.","solution":"from collections import deque, defaultdict def find_task_order(N, M, dependencies): in_degree = [0] * N graph = defaultdict(list) for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 queue = deque([i for i in range(N) if in_degree[i] == 0]) order = [] while queue: node = queue.popleft() order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == N: return order else: return \\"IMPOSSIBLE\\" # Sample input N = 4 M = 3 dependencies = [[0, 1], [1, 2], [2, 3]] print(find_task_order(N, M, dependencies)) # Example usage"},{"question":"You are given a matrix of dimensions n x m filled with non-negative integers. There are q operations to be performed on the matrix where each operation adds a given value to all elements in a submatrix. After performing each operation, you are required to find the sum of all elements in the matrix. Input The first line contains three space-separated integers n, m, and q (1 ≤ n, m ≤ 1000, 1 ≤ q ≤ 100,000) - the number of rows, the number of columns in the matrix, and the number of operations, respectively. The next n lines each contain m space-separated integers representing the initial elements of the matrix (0 ≤ matrix[i][j] ≤ 1,000,000). Each of the following q lines describes an operation and contains five space-separated integers x1, y1, x2, y2, and v (0 ≤ x1 ≤ x2 < n, 0 ≤ y1 ≤ y2 < m, -1,000,000 ≤ v ≤ 1,000,000). These represent an operation that adds the value v to all elements in the submatrix with the top-left corner (x1, y1) and the bottom-right corner (x2, y2). Output Output q lines. For each i, line i should contain the sum of all elements in the matrix after the i-th operation. Examples Input 3 3 3 1 2 3 4 5 6 7 8 9 0 0 1 1 10 1 1 2 2 -3 0 0 2 2 5 Output 56 45 96 Explanation Starting with the initial matrix: ``` 1 2 3 4 5 6 7 8 9 Sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45 ``` After the first operation, the top-left 2x2 submatrix is incremented by 10: ``` 11 12 3 14 15 6 7 8 9 Sum = 11 + 12 + 3 + 14 + 15 + 6 + 7 + 8 + 9 = 85 ``` After the second operation, a 2x2 submatrix starting from (1,1) is decremented by 3: ``` 11 12 3 14 12 3 7 5 6 Sum = 11 + 12 + 3 + 14 + 12 + 3 + 7 + 5 + 6 = 73 ``` After the third operation, the entire matrix is incremented by 5: ``` 16 17 8 19 17 8 12 10 11 Sum = 16 + 17 + 8 + 19 + 17 + 8 + 12 + 10 + 11 = 118 ```","solution":"def matrix_operations(n, m, q, matrix, operations): result = [] current_sum = sum(sum(row) for row in matrix) for x1, y1, x2, y2, v in operations: area = (x2 - x1 + 1) * (y2 - y1 + 1) current_sum += area * v result.append(current_sum) return result"},{"question":"A company has a collection of servers and each server has a certain fixed capacity. The company needs to store a list of data files across these servers. Each server can hold any number of files, but the total size of the files stored on any server cannot exceed that server’s capacity. You are required to distribute the files in such a way that the total number of servers used is minimized. You are given the capacity of each server and the size of each data file. Determine the minimum number of servers required to store all the data files. Input The first line of input contains two positive integers n and m (1 ≤ n, m ≤ 100) — the number of servers and the number of data files respectively. The second line contains n space-separated positive integers s1, s2, ..., sn (1 ≤ si ≤ 1000) — the capacity of each server. The third line contains m space-separated positive integers f1, f2, ..., fm (1 ≤ fi ≤ 1000) — the size of each data file. Output Output the minimum number of servers required to store all the data files. If it is not possible to store all the files, print -1. Examples Input 3 4 8 4 3 5 2 2 1 Output 2 Input 2 3 5 5 6 1 3 Output -1 Note In the first example, one possible way to store the files is: - Server 1 with capacity 8: store files of size 5 and 2 (remaining capacity: 1) - Server 2 with capacity 4: store file of size 2 (remaining capacity: 2) - Server 3 with capacity 3: store file of size 1 (remaining capacity: 2) In the second example, it is not possible to store the files because the first file itself has a size greater than any server\'s capacity.","solution":"def min_servers_required(n, m, capacities, files): # Step 1: Sort the server capacities and files in descending order capacities.sort(reverse=True) files.sort(reverse=True) # Step 2: Use a greedy approach to allocate files to servers servers_used = 0 for file in files: placed = False for i in range(n): if capacities[i] >= file: capacities[i] -= file placed = True break if not placed: return -1 # If we can\'t place the file in any server servers_used = max(servers_used, i + 1) return servers_used"},{"question":"Detect Illogical Population Counts: A kingdom is divided into `M` regions, each region having a certain population. A region is connected to other regions by roads, making a network. However, it has been reported that some regions have been involved in some illogical population claims that need verification. Two regions are part of the same illogical claim if there is a direct or indirect connection between them (i.e., they are in the same connected component of the network). We define an illogical claim as a claim where any two directly connected regions have a total difference in population exceeding a given threshold `P`. Your task is to identify and count the number of such illogical claims in each test case. ------ Input ------ The first line contains a single integer `T`, the number of test cases. The description of the test cases follows. The first line of each test case contains three integers `M` and `R` and `P`, where `M` is the number of regions, `R` is the number of roads, and `P` is the illogical population difference threshold. Then, the following `M` lines contain one integer each representing the population of each region. The next `R` lines contain two space-separated integers `A` and `B`, representing a road between regions `A` and `B`. ------ Output ------ For each test case, on a new line, print the number of illogical claims. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ M ≤ 1000 0 ≤ R ≤ M×(M−1)/2 1 ≤ Population ≤ 10^6 1 ≤ P ≤ 10^6 ----- Sample Input 1 ----- 1 4 4 10 30 15 25 40 1 2 2 3 3 4 4 1 ----- Sample Output 1 ----- 1","solution":"def illogical_claims(T, test_cases): from collections import defaultdict, deque def bfs(node, graph, populations, P, visited): queue = deque([node]) component = [] while queue: current_node = queue.popleft() if visited[current_node]: continue visited[current_node] = True component.append(current_node) for neighbor in graph[current_node]: if not visited[neighbor]: queue.append(neighbor) for i in range(len(component)): for j in range(i + 1, len(component)): if abs(populations[component[i]] - populations[component[j]]) > P: return True return False results = [] for case in test_cases: M, R, P = case[\\"MRP\\"] populations = case[\\"populations\\"] roads = case[\\"roads\\"] graph = defaultdict(list) for A, B in roads: graph[A-1].append(B-1) graph[B-1].append(A-1) visited = [False] * M illogical_components_count = 0 for i in range(M): if not visited[i]: if bfs(i, graph, populations, P, visited): illogical_components_count += 1 results.append(illogical_components_count) return results # Example usage with sample input: T = 1 test_cases = [ { \\"MRP\\": (4, 4, 10), \\"populations\\": [30, 15, 25, 40], \\"roads\\": [(1, 2), (2, 3), (3, 4), (4, 1)] } ] print(illogical_claims(T, test_cases))"},{"question":"A library is organizing its bookshelf and wants to categorize books by their genres and remove duplicate titles. Each book is characterized by its title and genre. The library has limited space and wants to ensure that the books are optimally organized so that no genre section has more than one duplicate of any title. If a book appears more than once, only one of the duplicates should remain. Additionally, organize the titles within each genre in alphabetical order. The task is to write a program that will help the library organize its books accordingly. Input: The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of books. Then n lines follow, each line describes one book as a pair of strings separated by a space: title and genre (1 ≤ |title|, |genre| ≤ 50). Output: For each genre that appears in the input, print the genre name followed by the list of book titles in alphabetical order. Each genre and its list of titles should be separated by a colon, and each title should be on a new line indented by a single tab character. The genres should be listed in alphabetical order. Example: Input: 7 \\"Harry Potter\\" Fantasy \\"Twilight\\" Fantasy \\"The Hobbit\\" Fantasy \\"Harry Potter\\" Fantasy \\"Pride and Prejudice\\" Romance \\"The Notebook\\" Romance \\"Pride and Prejudice\\" Romance Output: Fantasy: Harry Potter The Hobbit Twilight Romance: Pride and Prejudice The Notebook Note: In the sample test, the genre \\"Fantasy\\" contains the titles \\"Harry Potter\\", \\"Twilight\\", and \\"The Hobbit\\", and the genre \\"Romance\\" contains the titles \\"Pride and Prejudice\\" and \\"The Notebook\\". The duplicate titles have been removed, and the remaining titles are sorted alphabetically within their respective genres. The genres themselves are also listed in alphabetical order.","solution":"def organize_books(n, books): Organizes books by genre and removes duplicate titles. Args: n (int): Number of books. books (list of tuple): List of tuples where each tuple contains a title and a genre. Returns: dict: Dictionary where the key is the genre and the value is a sorted list of unique titles. from collections import defaultdict genre_dict = defaultdict(set) for title, genre in books: genre_dict[genre].add(title) sorted_genres = sorted(genre_dict.keys()) result = {} for genre in sorted_genres: result[genre] = sorted(genre_dict[genre]) return result def format_output(organized_books): Formats the output as required. Args: organized_books (dict): Dictionary where the key is the genre and the value is a sorted list of unique titles. Returns: str: Formatted string as per the required output format. output = [] for genre, titles in organized_books.items(): output.append(f\\"{genre}:\\") for title in titles: output.append(f\\"t{title}\\") return \\"n\\".join(output)"},{"question":"Alice is on a mission to decode a secret message encoded within a sequence of numbers. She is given an array of distinct integers and must find all pairs of numbers whose difference is a specific value K. Write a function that takes an integer array and a positive integer K, and returns the number of such pairs. Input Format The first line contains an integer N (the number of elements in the array). The second line contains N space-separated integers (the array elements). The third line contains the integer K (the specific difference to look for). Output Format Output a single integer representing the number of pairs with the specific difference K. Constraints 1 <= N <= 10^5 1 <= array[i] <= 10^9 1 <= K <= 10^9 Sample Input 5 4 1 5 2 6 3 Sample Output 2 Explanation For the given array [4, 1, 5, 2, 6] and K = 3, there are 2 pairs whose difference is exactly 3: (4, 1) and (5, 2). Note that (6, 3) is invalid because 3 is not in the array.","solution":"def count_pairs_with_difference(arr, K): Counts the number of pairs with a specific difference K. arr_set = set(arr) count = 0 for num in arr: if (num + K) in arr_set: count += 1 if (num - K) in arr_set: count += 1 # Each pair is counted twice so the final result needs to be divided by 2 return count // 2"},{"question":"Given a list of non-overlapping intervals, merge them if they overlap. Each interval is represented as a list [start, end], where start is inclusive and end is exclusive. Your task is to write a function that takes a list of intervals and returns a new list of intervals where all overlapping intervals have been merged. Example 1: Input: intervals = [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Example 2: Input: intervals = [[1,4],[4,5]] Output: [[1,5]] Constraints: 1. The intervals are represented as lists with two integers. 2. Intervals may be provided in any order. 3. Each interval is a valid interval, i.e., start < end. 4. 1 <= len(intervals) <= 10^4 5. 0 <= intervals[i][0] < intervals[i][1] <= 10^5","solution":"def merge_intervals(intervals): Given a list of intervals, merge them if they overlap and return the resulting list of intervals. Each interval is a list [start, end], where start is inclusive and end is exclusive. if not intervals: return [] # Sort intervals by their start values intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: last = merged[-1] if current[0] <= last[1]: # Merge intervals last[1] = max(last[1], current[1]) else: # No overlap, append the current interval merged.append(current) return merged"},{"question":"In the kingdom of Hexland, each province is represented by a hexagonal grid of cities arranged in a honeycomb pattern. Each city in the grid is identifiable by a 2D coordinate (i,j). Every city contains a single digit between 0 and 9 representing the wealth in that city. A traveler in Hexland wishes to visit exactly K consecutive cities such that the sum of the wealth in these cities is maximized. The traveler can start the journey from any city and can move to an adjacent city in a single step. The adjacent cities to (i, j) can be any of the following based on the parity of i: If i is even: (i-1, j-1), (i-1, j), (i+1, j-1), (i+1, j), (i, j-1), (i, j+1) If i is odd: (i-1, j), (i-1, j+1), (i+1, j), (i+1, j+1), (i, j-1), (i, j+1) Given the hexagonal grid and the value of K, determine the maximum sum of wealth the traveler can achieve by visiting exactly K consecutive cities. Input Format The first line contains two integers, R and C, denoting the number of rows and columns in the hexagonal grid, respectively. The next R lines each contain C integers between 0 and 9 representing the wealth in each city of that row. The last line contains the integer K, the number of cities the traveler will visit. Constraints 1 leq R, C leq 30 1 leq K leq R times C Output Format Print the maximum sum of wealth the traveler can achieve by visiting exactly K consecutive cities. Sample Input 4 4 1 2 3 4 8 7 6 5 9 1 4 7 3 2 5 6 3 Sample Output 24 Explanation One possible path to achieve the maximum sum of 24 is by visiting cities with coordinates (2,0) -> (3,1) -> (2,2) yielding the wealth values [9, 2, 7] or (1,0) -> (0,1) -> (1,1) yielding the wealth values [8, 2, 7].","solution":"def max_wealth(R, C, grid, K): def get_neighbors(i, j): if i % 2 == 0: neighbors = [(i - 1, j - 1), (i - 1, j), (i + 1, j - 1), (i + 1, j), (i, j - 1), (i, j + 1)] else: neighbors = [(i - 1, j), (i - 1, j + 1), (i + 1, j), (i + 1, j + 1), (i, j - 1), (i, j + 1)] return [(ni, nj) for ni, nj in neighbors if 0 <= ni < R and 0 <= nj < C] max_sum = 0 visited = set() def dfs(i, j, k, current_sum): nonlocal max_sum if k == 0: max_sum = max(max_sum, current_sum) return for ni, nj in get_neighbors(i, j): if (ni, nj) not in visited: visited.add((ni, nj)) dfs(ni, nj, k - 1, current_sum + grid[ni][nj]) visited.remove((ni, nj)) for i in range(R): for j in range(C): visited.add((i, j)) dfs(i, j, K - 1, grid[i][j]) visited.remove((i, j)) return max_sum # Parsing input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() R = int(data[0]) C = int(data[1]) grid = [] idx = 2 for i in range(R): grid.append([int(data[j]) for j in range(idx, idx + C)]) idx += C K = int(data[idx]) print(max_wealth(R, C, grid, K))"},{"question":"-----Input----- The first line of input contains two integers M and R, where 1 le M le 1000000 is the number of rooms in a hotel, and 0 le R le 1000000 is the number of requests. Each of the next R lines contains a request which can be one of two types: - \\"BOOK x y\\" which requests to book all rooms from x to y (inclusive). Assume 0 le x le y < M. - \\"CHECK z\\" which asks whether room number z is booked or not. Assume 0 le z < M. -----Output----- For each \\"CHECK z\\" request, output \\"booked\\" if the room z is booked, otherwise output \\"available\\". -----Examples----- Sample Input: 10 5 BOOK 2 5 CHECK 4 CHECK 6 BOOK 0 1 CHECK 1 Sample Output: booked available booked","solution":"def hotel_booking_system(commands): This function processes a list of commands for booking and checking room availability in a hotel with M rooms. The input is a list of commands, where the first command is \'BOOK\' and \'CHECK\' followed by the respective room range or room number. :param commands: List of commands, each command is a tuple where the first element is a string \\"BOOK\\" or \\"CHECK\\" and the rest are integers. :return: List of strings with results for each \\"CHECK\\" command. M = commands[0][0] R = commands[0][1] booked_status = [False] * M result = [] for command in commands[1:]: if command[0] == \\"BOOK\\": x, y = command[1], command[2] for room in range(x, y + 1): booked_status[room] = True elif command[0] == \\"CHECK\\": z = command[1] if booked_status[z]: result.append(\\"booked\\") else: result.append(\\"available\\") return result"},{"question":"You are given two strings A and B. Write a function to determine if B is a subsequence of A. Notes: Constraints: * The length of A and B will not exceed 100,000. * A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. Input: The input consists of two lines. The first line contains the string A and the second line contains the string B. Output: Print \\"True\\" if B is a subsequence of A, otherwise print \\"False\\". Examples: Input: abdefghij bdg Output: True Input: abcdefghij k Output: False","solution":"def is_subsequence(A, B): Determines if B is a subsequence of A. m, n = len(A), len(B) j = 0 # Index for B for i in range(m): if j < n and A[i] == B[j]: j += 1 return j == n"},{"question":"Monorarp has been experimenting with different sequences of numbers. He enjoys finding the longest sequence of unique, consecutive integers within a given sequence. Now he wants your help to write a function that can help him find this. Given an array of integers, your task is to find the length of the longest subarray with all unique numbers. -----Input----- The first line of input contains an integer t (1 leq t leq 100) — the number of testcases. The next 2t lines describe the testcases. Each testcase is described in two lines. The first line of a testcase contains an integer n (1 leq n leq 10^5) — the length of the array. The second line contains n integers a_1, a_2, dots, a_n (0 leq a_i leq 10^5) — the elements of the array. The sum of n over all testcases does not exceed 10^6. -----Output----- For each testcase, print a single integer — the length of the longest subarray with all unique numbers. -----Examples----- Input 3 5 1 2 1 3 4 6 1 2 3 2 4 5 4 10 20 30 40 Output 4 4 4 -----Note----- In the first testcase, the longest subarray with all unique numbers is [2, 1, 3, 4], which has a length of 4. In the second testcase, there are two longest subarrays with all unique numbers: [1, 2, 3] and [2, 4, 5], both with length 3 so the length of the longest subarray is 3. In the third testcase, all subarrays have unique numbers, so the length of the subarray will be the length of the array itself, which is 4.","solution":"def find_longest_unique_subarray(arr): Given a list of integers, finds the length of the longest subarray with all unique numbers. seen = {} max_len = 0 start = 0 for end, value in enumerate(arr): if value in seen and seen[value] >= start: start = seen[value] + 1 seen[value] = end max_len = max(max_len, end - start + 1) return max_len def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(find_longest_unique_subarray(arr)) return results"},{"question":"[D1]: In the Land of Code, there lies a great castle guarded by fierce dragons. The Timekeeper of the castle records the exact moments when each dragon awakens and returns to dormancy. The Timekeeper needs help to determine the longest duration for which at least one dragon was awake and active. Given the awakening and dormancy intervals for multiple dragons, we need to find the total time during which at least one dragon was awake. -----Input----- The first line of the input contains an integer m (1 le m le 10^5), the number of dragons. Each of the following m lines contains two integers s_j and e_j (1 le s_j < e_j le 10^6), representing the start time and end time of the jth dragon\'s activity period. -----Output----- Output a single integer representing the total uninterrupted time during which at least one dragon was awake. -----Example----- Sample Input: 3 1 4 3 5 6 8 Sample Output: 4 [Explanation]: In the sample input above, - The first dragon is awake from time 1 to time 4. - The second dragon is awake from time 3 to time 5. - The third dragon is awake from time 6 to time 8. The time segments during which at least one dragon is awake are [1, 5) and [6, 8). Thus, the total time is 5 - 1 + 8 - 6 = 4.","solution":"def total_awake_time(m, intervals): Returns the total duration for which at least one dragon is awake. Parameters: m (int): The number of dragons. intervals (list of tuples): List of tuples where each tuple contains two integers (s_j, e_j) representing the start and end times of the j-th dragon\'s activity period. Returns: int: Total uninterrupted time during which at least one dragon was awake. if m == 0: return 0 # Sort intervals based on the start time intervals.sort() total_time = 0 current_start, current_end = intervals[0] for i in range(1, m): start, end = intervals[i] if start > current_end: total_time += current_end - current_start current_start, current_end = start, end else: current_end = max(current_end, end) # Add the last interval total_time += current_end - current_start return total_time # Example Usage # print(total_awake_time(3, [(1, 4), (3, 5), (6, 8)])) # Output: 7 - 1 + 2 = 4"},{"question":"You are given an array of integers where each element represents the height of a hill. You need to identify two non-overlapping subarrays such that the difference in heights between the highest peak and the lowest valley in each subarray is maximized. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 10^4) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (2 leq n leq 2 cdot 10^5) — the number of elements in the array. The second line contains n integers h_1, h_2, dots, h_n (1 leq h_i leq 10^9) — the heights of the hills. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, output a single integer — the maximum possible value of the sum of the differences between the highest peak and the lowest valley of two non-overlapping subarrays. -----Examples----- Input 3 5 1 2 6 4 5 6 10 8 2 5 7 6 4 1 3 1 3 Output 10 15 4 -----Note----- For the first test case, the subarrays {1, 2, 6} and {4, 5} yield the maximum difference (6-1) + (5-4) = 5 + 1 = 6. For the second test case, the subarrays {10, 8, 2} and {5, 7, 6} yield the maximum difference (10-2) + (7-5) = 8 + 2 = 10. For the third test case, splitting into {1, 3} and {1, 3} each yielding the maximum difference (3-1) + (3-1) = 2 + 2 = 4.","solution":"def max_difference_sum(t, test_cases): results = [] for case in test_cases: n, heights = case prefix_min = [0] * n prefix_max = [0] * n suffix_min = [0] * n suffix_max = [0] * n prefix_min[0] = heights[0] prefix_max[0] = heights[0] for i in range(1, n): prefix_min[i] = min(prefix_min[i-1], heights[i]) prefix_max[i] = max(prefix_max[i-1], heights[i]) suffix_min[n-1] = heights[n-1] suffix_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): suffix_min[i] = min(suffix_min[i+1], heights[i]) suffix_max[i] = max(suffix_max[i+1], heights[i]) max_diff = 0 for i in range(n-1): left_diff = prefix_max[i] - prefix_min[i] right_diff = suffix_max[i+1] - suffix_min[i+1] max_diff = max(max_diff, left_diff + right_diff) results.append(max_diff) return results"},{"question":"------ Problem Statement ------ Write a program to find the longest contiguous subarray with equal number of 0s and 1s. ------ Input ------ The input line contains a single integer array of 0s and 1s. ------ Output ------ Output the length of the longest contiguous subarray that contains equal number of 0s and 1s. If there is no such subarray, print 0. ------ Constraints ------ The length of the array does not exceed 100,000. ------- Sample Input 1 ------- [0, 1, 0, 1, 0, 1, 1] ------- Sample Output 1 ------- 6 ------- Sample Input 2 ------- [0, 0, 1, 1, 0] ------- Sample Output 2 ------- 4","solution":"def find_max_length(nums): Returns the length of the longest contiguous subarray with equal number of 0s and 1s. count_map = {0: -1} max_length = 0 count = 0 for i, num in enumerate(nums): count += 1 if num == 1 else -1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"You are given a list of integers that represent the heights of buildings along a street, and you want to evaluate which buildings have a sunset view. A building has a sunset view if it is taller than all the buildings to its right. Consider the buildings from the left to the right, and return the list of those buildings that have a sunset view, in the same order they appear in the input. Function Description Complete the sunset_view function in the editor below. sunset_view has the following parameters: int heights[n]: the heights of the buildings Returns int[n]: the heights of the buildings that have a sunset view Input Format The first line contains an integer, n, representing the number of buildings. The second line contains n space-separated integers representing the heights of the buildings. Constraints 1 leq n leq 10^5 1 leq heights[i] leq 10^9 Sample Input 0 6 3 7 8 3 6 1 Sample Output 0 8 6 1 Explanation 0 Buildings with heights 8, 6, and 1 have a sunset view because each of these buildings is taller than any building to its right. Return these buildings in the same order they appear in the input. Sample Input 1 7 1 3 2 4 5 3 2 Sample Output 1 5 3 2 Explanation 1 Buildings with heights 5, 3, and 2 have a sunset view because each of these buildings is taller than any building to its right. Return these buildings in the same order they appear in the input.","solution":"def sunset_view(heights): Returns the heights of buildings that have a sunset view. A building has a sunset view if it is taller than all buildings to its right. if not heights: return [] sunset_buildings = [] max_height = float(\'-inf\') for height in reversed(heights): if height > max_height: sunset_buildings.append(height) max_height = height return sunset_buildings[::-1]"},{"question":"The kingdom of Varantine has decided to build a new road network to connect its cities. The kingdom has n cities and needs to lay down exactly n-1 roads to ensure all cities are connected with the minimum total road length. Each road connects exactly two cities and has a certain length, and they want to minimize the total sum of the lengths of the roads used. Your task is to find the minimum cost to connect all the cities. Input The first line contains two integers n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000) — the number of cities and the number of potential roads. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1,000,000) — meaning that there is a potential road connecting city u and city v with length w. The given roads are bidirectional. Output Print a single integer, the minimum total length of the roads required to connect all the cities. If it is impossible to connect all the cities, output -1. Examples Input 4 5 1 2 1 2 3 2 3 4 3 1 3 2 1 4 3 Output 6 Input 3 1 1 2 4 Output -1 Note In the first example, you can connect all cities using the roads (1-2), (2-3), and (3-4) with a total length of 1 + 2 + 3 = 6. In the second example, it\'s impossible to connect all cities with the given roads, so the output is -1. Solve the problem using an efficient algorithm suitable for large input sizes.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def min_cost_to_connect_cities(n, m, roads): if n == 1: return 0 if m == 0 else -1 if m < n - 1: return -1 # Sort the edges by their weights in ascending order roads.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n minimum_cost = 0 edges_used = 0 for road in roads: u, v, w = road[0] - 1, road[1] - 1, road[2] if find(parent, u) != find(parent, v): union(parent, rank, u, v) minimum_cost += w edges_used += 1 if edges_used == n - 1: return minimum_cost # If all the cities are not connected, return -1 return -1"},{"question":"Implement a function to verify if two strings are isomorphic. Two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`. Given two strings `s` and `t`, determine if they are isomorphic. The strings `s` and `t` are isomorphic if there is a one-to-one mapping between characters of `s` and `t` such that every character in `s` is mapped to a unique character in `t` and vice-versa. In other words, no two characters in `s` map to the same character in `t`, and no character in `t` is mapped by more than one character in `s`. Additionally, the order of characters in the original and transformed strings must be preserved. ---Input--- The input consists of two strings `s` and `t`, each on separate lines. The strings `s` and `t` only contain lowercase English letters and have lengths of at most 100 characters. ---Output--- Return a single Boolean value: \'True\' if `s` and `t` are isomorphic, and \'False\' otherwise. ---Examples--- Sample Input 1: egg add Sample Output 1: True Sample Input 2: foo bar Sample Output 2: False Sample Input 3: paper title Sample Output 3: True ---Constraints--- * The function should handle input strings containing only lowercase English letters. * The length of each string must be between 1 and 100 characters.","solution":"def isomorphic(s, t): Determines if two strings s and t are isomorphic. Args: s: First string t: Second string Returns: True if s and t are isomorphic, False otherwise. if len(s) != len(t): return False map_st = {} map_ts = {} for char_s, char_t in zip(s, t): if char_s in map_st: if map_st[char_s] != char_t: return False if char_t in map_ts: if map_ts[char_t] != char_s: return False map_st[char_s] = char_t map_ts[char_t] = char_s return True"},{"question":"You are given a string that consists of exactly three characters: \'A\', \'B\', and \'C\'. Each character is represented exactly once in the string. Your task is to determine if the given string can be transformed into \\"ABC\\" by swapping at most one pair of characters. -----Constraints----- - The given string contains exactly one \'A\', one \'B\', and one \'C\'. -----Input----- Input is given from Standard Input in the following format: s -----Output----- Print \\"YES\\" if the string can be transformed into \\"ABC\\" by swapping at most one pair of characters; otherwise, print \\"NO\\". -----Sample Input----- CAB -----Sample Output----- YES Swap the \'C\' and \'A\' to get the string \\"ACB\\", then swap \'C\' and \'B\' to get \\"ABC\\". Since it requires only two swaps, the output should be \\"YES\\". -----Sample Input----- BAC -----Sample Output----- YES Swap the \'B\' and \'A\' to get the string \\"ABC\\". Since it requires only one swap, the output should be \\"YES\\". -----Sample Input----- CBA -----Sample Output----- NO Since the string \\"CBA\\" requires two swaps to become \\"ABC\\", the output should be \\"NO\\".","solution":"def can_transform_to_ABC(s): Determines if the given string can be transformed into \\"ABC\\" by swapping at most one pair of characters. Args: s (str): Input string consisting of exactly \'A\', \'B\', and \'C\'. Returns: str: \\"YES\\" if the string can be transformed into \\"ABC\\" by swapping at most one pair of characters, otherwise \\"NO\\". if s == \\"ABC\\": return \\"YES\\" if s == \\"BAC\\": return \\"YES\\" if s == \\"ACB\\": return \\"YES\\" if s == \\"CAB\\": return \\"YES\\" if s == \\"BCA\\": return \\"NO\\" if s == \\"CBA\\": return \\"NO\\""},{"question":"A new company called \\"Delivery Heroes\\" wants to optimize their package delivery routes. They operate in a city represented as a grid where intersections are connected by roads in a bidirectional manner. The company wants to start their delivery from their headquarters and return to it, covering each road exactly once to maximize efficiency. However, the company is not sure if such a route (an Eulerian Circuit) exists in the given city map or not. An Eulerian Circuit exists in a graph if and only if every vertex has an even degree, and all vertices with nonzero degree belong to a single connected component. You are tasked to determine whether such an Eulerian Circuit is possible for given city maps. Input The input consists of multiple city maps. Each map starts with two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 10000), where n is the number of intersections (vertices) and m is the number of roads (edges) between them. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n), representing a road between intersection u and intersection v. The last line of the input will contain two zeros (0 0), which indicates the end of input and should not be processed. Output For each city map, print \\"Yes\\" (without quotes) if an Eulerian Circuit exists, otherwise print \\"No\\" (without quotes). Example Input 4 4 1 2 2 3 3 4 4 1 3 2 1 2 2 3 5 4 1 2 2 3 3 1 4 5 0 0 Output Yes No No","solution":"def is_eulerian_circuit_possible(n, m, edges): if n == 0: return \\"No\\" from collections import defaultdict graph = defaultdict(list) degree = [0] * (n + 1) for u, v in edges: graph[u].append(v) graph[v].append(u) degree[u] += 1 degree[v] += 1 # Check all vertices with non-zero degree are connected def dfs(v, visited): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: dfs(neighbor, visited) visited = [False] * (n + 1) start = 1 while start <= n and not graph[start]: start += 1 if start > n: return \\"Yes\\" dfs(start, visited) for i in range(1, n + 1): if graph[i] and not visited[i]: return \\"No\\" # Check if all vertices have even degree for i in range(1, n + 1): if degree[i] % 2 != 0: return \\"No\\" return \\"Yes\\" def delivery_heroes_input_manager(input_list): result = [] i = 0 while i < len(input_list): n, m = input_list[i] if n == 0 and m == 0: break edges = input_list[i + 1 : i + 1 + m] result.append(is_eulerian_circuit_possible(n, m, edges)) i += 1 + m return result"},{"question":"You are given an array of integers. You need to group these integers into pairs such that the difference between the maximum and minimum values in each pair is minimized. Output the minimized differences for each pair. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - The first line of each test case contains a single integer N, the size of the array. - The second line of each test case contains N space-separated integers. ------ Output Format ------ For each test case, print N/2 integers, each representing the minimized difference of each pair. Print the differences in the order the pairs are made. Note that the array will always have an even number of elements. ------ Constraints ------ 1 ≤ T ≤ 10^{2} 2 ≤ N ≤ 10^{4} -10^6 ≤ array[i] ≤ 10^6 ------ Sample Input 1 ------ 2 4 4 2 1 3 6 8 2 4 6 9 1 ------ Sample Output 1 ------ 1 1 1 1 2 ------ Explanation 1 ------ Test case 1: One possible way of pairing that minimizes differences: (1,2) and (3,4) result in differences of 1 and 1. Test case 2: One possible way of pairing that minimizes differences: (1,2), (4,6), and (8,9) result in differences of 1, 2, and 1.","solution":"def minimize_diffs(test_cases): results = [] for n, arr in test_cases: arr.sort() diffs = [] for i in range(0, n, 2): diffs.append(arr[i+1] - arr[i]) results.append(diffs) return results"},{"question":"Given a list of integers, you want to rearrange them so that no two adjacent integers are the same. If it is not possible to rearrange the list to satisfy this condition, return an empty list. Implement a function `rearrange_list(arr: List[int]) -> List[int]:` that takes a list of integers as input and returns a rearranged list where no two adjacent integers are the same. If such a rearrangement is not possible, the function should return an empty list. # Input - A single list `arr` of integers where 1 leq |arr| leq 10^5 and each integer in `arr` is between 1 and 10^9. # Output - A list of integers rearranged such that no two adjacent integers are the same, or an empty list if such a rearrangement is not possible. # Examples ```python rearrange_list([1, 1, 2]) # Output: [1, 2, 1] (or any valid rearrangement) rearrange_list([1, 1, 1, 2]) # Output: [] (because it\'s not possible to rearrange to satisfy condition) rearrange_list([4, 5, 5, 4]) # Output: [5, 4, 5, 4] (or any valid rearrangement) ``` # Constraints - The function should try to have an efficient approach due to possible high constraints on the input size. - Focus on efficient ways to handle the rearrangement to meet the no two adjacent integers condition.","solution":"from collections import Counter from heapq import heappush, heappop def rearrange_list(arr): Rearranges the integers in the list such that no two adjacent integers are the same. If not possible, returns an empty list. if not arr: return [] counter = Counter(arr) max_heap = [] for num, freq in counter.items(): heappush(max_heap, (-freq, num)) prev_freq, prev_num = 0, None result = [] while max_heap: freq, num = heappop(max_heap) result.append(num) if prev_freq < 0: heappush(max_heap, (prev_freq, prev_num)) prev_freq, prev_num = freq + 1, num if len(result) != len(arr): return [] return result"},{"question":"You have a rectangular chocolate bar and you want to divide it into smaller pieces. The chocolate bar is represented by an M x N grid of single-square chocolate pieces. At each step, you can break a piece of chocolate horizontally or vertically along the grid lines. Each break operation results in two smaller pieces. Write a function `chocolateBreaks` that takes two integers M and N representing the dimensions of the chocolate bar. The function should return the minimum number of breaks needed to divide the entire chocolate bar into single-square pieces. ```python def chocolateBreaks(M, N): # Your code here ```","solution":"def chocolateBreaks(M, N): Returns the minimum number of breaks needed to divide the entire MxN chocolate bar into single-square pieces. # To divide the MxN chocolate bar into M*N single squares, # we need (M-1) horizontal breaks and (N-1) vertical breaks. # Thus, the total number of breaks needed is (M-1) + (N-1) + 1 - 1 = M * N - 1 # Because each time you break, you increase the total number of pieces by one. return M * N - 1"},{"question":"Maria is planning to bake cookies for a special event. She has `c` cups of flour and `s` cups of sugar available. A single batch of cookies requires `a` cups of flour and `b` cups of sugar. Maria wants to make as many batches of cookies as possible without exceeding the available resources of flour and sugar. Your task is to determine the maximum number of complete batches of cookies Maria can bake. -----Input----- The first line contains a single integer `c` (1 ≤ c ≤ 10^9) — the number of cups of flour available. The second line contains a single integer `s` (1 ≤ s ≤ 10^9) — the number of cups of sugar available. The third line contains a single integer `a` (1 ≤ a ≤ 10^9) — the number of cups of flour required per batch. The fourth line contains a single integer `b` (1 ≤ b ≤ 10^9) — the number of cups of sugar required per batch. -----Output----- Print a single integer — the maximum number of complete batches of cookies that Maria can bake with the available resources. -----Example----- Input 10 21 2 3 Output 5 Input 15 8 4 5 Output 1 Input 7 14 3 7 Output 2 -----Note----- In the first example, with 10 cups of flour and 21 cups of sugar, each batch requiring 2 cups of flour and 3 cups of sugar, Maria can make 5 batches as 5*2=10 (flour) and 5*3=15 (sugar), which fits within the available resources. In the second example, with 15 cups of flour and 8 cups of sugar, each batch requiring 4 cups of flour and 5 cups of sugar, Maria can make only 1 batch as 1*4=4 (flour) and 1*5=5 (sugar), making the maximum batches 1. In the third example, with 7 cups of flour and 14 cups of sugar, each batch requiring 3 cups of flour and 7 cups of sugar, Maria can make 2 batches as 2*3=6 (flour) and 2*7=14 (sugar), which fits within the available resources.","solution":"def max_batches(c, s, a, b): Determines the maximum number of complete batches of cookies Maria can bake with the available resources. Parameters: c (int): the number of cups of flour available. s (int): the number of cups of sugar available. a (int): the number of cups of flour required per batch. b (int): the number of cups of sugar required per batch. Returns: int: the maximum number of complete batches of cookies. max_batches_flour = c // a max_batches_sugar = s // b return min(max_batches_flour, max_batches_sugar)"},{"question":"You are given a tree with `n` nodes where nodes are numbered from 1 to `n`. Each edge has a weight assigned to it. A tree is a connected undirected graph with `n-1` edges and no cycles. Your task is to find and print the diameter of the tree. The diameter of a tree is defined as the maximum distance between any two nodes in the tree. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of nodes in the tree. - Each of the next `n-1` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1,000) — an edge between nodes `u` and `v` with weight `w`. # Output - Print a single integer, the diameter of the tree. # Example Input ``` 5 1 2 3 2 3 4 2 4 5 4 5 6 ``` Output ``` 15 ``` # Explanation The longest path in the tree described above is from node 3 to node 5 with a total distance of 15 (3→2→4→5). # Note To solve this problem, you may use a two-pass BFS or DFS algorithm. The first pass calculates the farthest node from an arbitrary start node. The second pass calculates the farthest distance from this farthest node to get the diameter of the tree.","solution":"from collections import defaultdict, deque def tree_diameter(n, edges): if n == 1: return 0 graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def bfs(start): distances = [-1] * (n + 1) queue = deque([(start, 0)]) distances[start] = 0 max_distance = 0 farthest_node = start while queue: node, dist = queue.popleft() for neighbor, weight in graph[node]: if distances[neighbor] == -1: distances[neighbor] = dist + weight queue.append((neighbor, dist + weight)) if distances[neighbor] > max_distance: max_distance = distances[neighbor] farthest_node = neighbor return farthest_node, max_distance # First BFS to find one endpoint of the longest path in the tree farthest_node, _ = bfs(1) # Second BFS from the found node to determine the diameter of the tree _, diameter = bfs(farthest_node) return diameter"},{"question":"Alice is a beginner in cryptography and has decided to create her own cipher named \\"Alice Cipher.\\" In Alice Cipher, she replaces every letter in the message with a new letter that is a fixed number of letters down the alphabet. This number is called the \\"shift value\\". However, she only encrypts alphabetical characters and leaves all other characters unchanged. Write a function to help Alice encode her message using her cipher. The given message consists of uppercase and lowercase letters, spaces, and punctuation marks. The shift value will be a positive integer. Input::: The first line of the input contains an integer k (1 ≤ k ≤ 26) — the shift value. The second line contains a string message consisting of uppercase letters, lowercase letters, spaces, and punctuation marks. The length of the message does not exceed 1000 characters. Output::: Print the encoded message using Alice Cipher. SAMPLE INPUT 3 Hello, World! SAMPLE OUTPUT Khoor, Zruog! Explanation Using a shift value of 3, \'H\' becomes \'K\', \'e\' becomes \'h\', \'l\' becomes \'o\', \'o\' becomes \'r\', etc. Non-alphabetical characters (comma, space, exclamation mark) remain unchanged.","solution":"def alice_cipher(k, message): Encodes the given message using Alice Cipher with a shift value of k. Args: k (int): The shift value. message (str): The message to be encoded. Returns: str: The encoded message. encoded_message = [] for char in message: if char.isalpha(): if char.islower(): encoded_char = chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\')) else: # char is uppercase encoded_char = chr((ord(char) - ord(\'A\') + k) % 26 + ord(\'A\')) else: encoded_char = char encoded_message.append(encoded_char) return \'\'.join(encoded_message)"},{"question":"A company is developing an intelligent email filtering system. One of the system\'s tasks is to categorize emails based on their content. An important step in this process is identifying the longest common substrings between the subject lines of emails and a list of important keywords. You have been tasked with writing a function that helps in this process. Your task is to implement a function `longest_common_substring` that takes two strings as input and returns the length of their longest common substring. -----Input----- The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines: - The first line contains a string s (1 ≤ |s| ≤ 1000) — the subject line of an email. - The second line contains a string k (1 ≤ |k| ≤ 1000) — one of the important keywords. Both strings consist of lowercase Latin letters. -----Output----- For each test case, output a single integer — the length of the longest common substring between the two input strings. -----Examples----- Input 2 abcdef zcdemf hello yellow Output 3 4 -----Note----- In the first test case, the longest common substring between \\"abcdef\\" and \\"zcdemf\\" is \\"cde\\", which has length 3. In the second test case, the longest common substring between \\"hello\\" and \\"yellow\\" is \\"ello\\", which has length 4.","solution":"def longest_common_substring(s, k): Returns the length of the longest common substring between s and k. m, n = len(s), len(k) # Create a table to store lengths of longest common suffixes of substrings. # LCSuff[i][j] will be the length of the longest common suffix of s[0...i-1] and k[0...j-1]. LCSuff = [[0] * (n + 1) for _ in range(m + 1)] # To store the length of the longest common substring. result = 0 # Building the LCSuff table. for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == k[j - 1]: LCSuff[i][j] = LCSuff[i - 1][j - 1] + 1 result = max(result, LCSuff[i][j]) else: LCSuff[i][j] = 0 return result"},{"question":"A new transportation company is creating a high-speed rail network in a futuristic city where the architecture is built on a 2D grid. There are high-speed train routes that connect specific points on the grid. Each train route either runs east-west or north-south, meaning each route is either a horizontal or vertical line segment on the grid. Unfortunately, due to some construction constraints, routes may overlap or intersect. Your task is to determine how many unique points on the grid are frequently used by at least two train routes (including both overlapping and intersection points). A point is defined as an integer pair (x, y) on a grid. Input 1. An integer n (1 ≤ n ≤ 50,000), the number of train routes. 2. n lines follow, each consisting of four integers x1, y1, x2, y2, representing a train route from (x1, y1) to (x2, y2). It is guaranteed that (x1, y1) and (x2, y2) form a valid horizontal or vertical segment. Output Print one integer — the number of unique points frequently used by at least two train routes. Examples Input 5 1 1 1 5 2 3 2 6 1 4 3 4 1 2 4 2 3 3 3 6 Output 4 Explanation In the given example, the points that are used by at least two routes are (1,4), (2,4), (3,4), (3,5). There are 4 such unique points. [Note: Points counted include overlaps at intersections and at shared line segments.]","solution":"def find_frequently_used_points(n, routes): from collections import defaultdict point_usage = defaultdict(int) for route in routes: x1, y1, x2, y2 = route if x1 == x2: # Vertical route for y in range(min(y1, y2), max(y1, y2) + 1): point_usage[(x1, y)] += 1 else: # Horizontal route for x in range(min(x1, x2), max(x1, x2) + 1): point_usage[(x, y1)] += 1 return sum(1 for count in point_usage.values() if count >= 2) # Example usage n = 5 routes = [ (1, 1, 1, 5), (2, 3, 2, 6), (1, 4, 3, 4), (1, 2, 4, 2), (3, 3, 3, 6) ] print(find_frequently_used_points(n, routes)) # Output: 4"},{"question":"A university sports team manager has a list of matches played by the team. Each match is characterized by a start time and end time. Some of the matches overlap and the manager wants to calculate the maximum number of team members required such that no matches are interrupted and each match has at least one team member assigned to it. Create a function that returns the maximum number of members required to handle all matches without interruption. Example 1: Input: matches = [(1, 4), (2, 5), (6, 8), (6, 7)] Output: 2 Explanation: The first and second matches overlap, and hence require two team members for that time. Matches three and four do not overlap with the others, so they require only one member each. Example 2: Input: matches = [(1, 3), (2, 4), (3, 5)] Output: 2 Explanation: The first and second matches overlap, the second and third overlap. Hence a maximum of two team members are required. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxTeamMembers()` which takes an array of tuples `matches`, where each tuple contains two integers representing the start and end times of a match, and returns the maximum number of team members required. Expected Time Complexity: O(N logN) Expected Auxiliary Space: O(N) Constraints: 1 ≤ len(matches) ≤ 10^{5} 1 ≤ start time, end time ≤ 10^{5}","solution":"def maxTeamMembers(matches): Calculate the maximum number of team members required to ensure that no matches are interrupted. :param matches: List of tuples where each tuple consists of (start_time, end_time) :return: Integer representing the maximum number of team members required events = [] # Create events for all start and end times for start, end in matches: events.append((start, \'start\')) events.append((end, \'end\')) # Sort the events first by time, and then by type where \'end\' comes before \'start\' events.sort(key=lambda x: (x[0], x[1] == \'start\')) max_members = 0 current_members = 0 # Process all events for event in events: if event[1] == \'start\': current_members += 1 if current_members > max_members: max_members = current_members else: current_members -= 1 return max_members"},{"question":"In a certain kingdom, the royal entertainers perform a unique juggling act using magical balls. Each ball is enchanted to only juggle with a specific set of other balls. Given n balls numbered from 0 to n - 1, and m pairs of interactions which denote which ball can juggle with which other ball, the king has decided that the entertainment value can be greatly increased by forming the largest possible group of balls that can all juggle with each other. Your task is to determine the size of the largest such set of balls. In other words, you are given a list of m pairs of integers u and v (0 leq u, v < n, u neq v) representing that ball u can juggle with ball v. You need to find the size of the largest clique (a subset of balls where each pair of balls can juggle with each other). -----Input----- The first line contains two integers n (1 leq n leq 200) and m (0 leq m leq 5000). Each of the next m lines contains two integers u and v (0 leq u, v < n, u neq v) denoting an interaction between ball u and ball v. All pairs are unique and unordered. -----Output----- Print an integer which is the size of the largest clique of balls. -----Examples----- Sample Input 1 : 5 6 0 1 0 2 0 3 1 2 1 3 2 3 Sample Output 1 : 4 Sample Input 2: 4 2 0 1 2 3 Sample Output 2: 2 -----Note----- In the first example, the largest clique consists of the balls 0, 1, 2, and 3. Since each ball in this set can juggle with every other ball in the set, the size of this clique is 4. In the second example, there are no groups of more than two balls that can all juggle with each other. Therefore, the size of the largest clique is 2.","solution":"def largest_clique(n, m, pairs): from itertools import combinations # Create an adjacency matrix for the graph adjacency = [[0] * n for _ in range(n)] for u, v in pairs: adjacency[u][v] = 1 adjacency[v][u] = 1 def is_clique(subset): for i in range(len(subset)): for j in range(i + 1, len(subset)): if adjacency[subset[i]][subset[j]] == 0: return False return True # Brute-force search for the largest clique for size in range(n, 0, -1): for subset in combinations(range(n), size): if is_clique(subset): return size return 1 # At least one ball will always form a clique of size 1"},{"question":"**Text Simplification** In natural language processing, text simplification is the task of reducing the complexity of a text without changing its meaning. Your task is to write a program that simplifies a given text by replacing words with their corresponding synonyms in a predefined dictionary. Dictionary: The program will use a dictionary of words and their synonyms. The dictionary is presented as a series of lines, each containing a word followed by its synonym. The synonyms are guaranteed to be simpler or more commonly used than the original word. Your program should replace each word in the given text with its synonym from the dictionary, if a synonym exists. If a word does not have a synonym in the dictionary, it should remain unchanged. Input: - The first line of input contains an integer n (1 ≤ n ≤ 100) indicating the number of dictionary entries. - The next n lines each contain a pair of words \\"original_word synonym\\" separated by a space. The words consist of only lowercase English letters and are at most 20 characters long. - The following line contains an integer m (1 ≤ m ≤ 100) indicating the number of words in the text to be simplified. - The next line contains m words separated by spaces. Each word consists of only lowercase English letters and is at most 20 characters long. Output: - Print the simplified text as a single line containing m words separated by spaces. Sample Input: ``` 5 difficult hard easy simple complicated complex smart clever fast quick 10 this is a difficult test with some complicated and smart questions to answer fast ``` Sample Output: ``` this is a hard test with some complex and clever questions to answer quick ``` Explanation: The dictionary contains 5 entries. The text contains 10 words, out of which 5 words have simpler synonyms. Each word in the text is replaced by its simpler synonym, resulting in the simplified text. Your program should be able to handle the input and output formats shown above, and correctly simplify the text according to the given dictionary.","solution":"def simplify_text(dictionary_entries, text_words): Simplifies the given text using the dictionary of synonyms. Parameters: dictionary_entries (list of tuples): List of (original_word, synonym) pairs. text_words (list of str): List of words in the text to be simplified. Returns: str: Simplified text as a single line. dictionary = dict(dictionary_entries) simplified_text = [] for word in text_words: if word in dictionary: simplified_text.append(dictionary[word]) else: simplified_text.append(word) return \' \'.join(simplified_text)"},{"question":"You are given a semi-circular park with radius R centered at the origin on a coordinate plane. The park entrance is located at the coordinate (R,0), and you want to place a fountain inside the semi-circle such that the maximum distance anyone can walk from any point on the boundary of the semi-circle to the fountain is minimized. -----Input----- The first line contains a single integer R (1 ≤ R ≤ 10^9) — the radius of the semi-circle. -----Output----- In the first line output the maximum distance from any point on the boundary of the semi-circle to the optimal position of the fountain. The output should be a real number with a precision of at least 6 digits. -----Examples----- Input 10 Output 14.142136","solution":"import math def maximum_distance_to_fountain(R): Returns the maximum distance from any point on the boundary of the semi-circle to the optimal position of the fountain located inside the semi-circle. # For a semi-circle park of radius R, the optimal position of the fountain is at the origin (0, 0) # The maximum distance from the boundary to the origin will be the distance from either # any point on the arc to the origin or from the straight line to the origin. # The distance from the arc to the origin is R. # The distance from any point on the straight line (from -R to R) on x-axis to the origin is R * sqrt(2) # Hence the maximum distance is R * sqrt(2) max_distance = R * math.sqrt(2) return max_distance"},{"question":"You are given a list of integers. Your task is to rearrange the elements of the list such that the resultant list alternates between even and odd numbers. If multiple rearrangements are possible, return the one that is lexicographically smallest. If it is not possible to rearrange the list in such a manner, return any permutation of the list. Write a function `alternate_even_odd(arr)` that accepts a list of integers `arr` and returns a list of integers arranged in an alternating pattern (even, odd, even, odd, etc.). # Input - The input will be a list of integers `arr` where `1 <= len(arr) <= 10^5` and each integer in `arr` is in the range `-10^6` to `10^6`. # Output - Return a list of integers rearranged such that they alternate between even and odd numbers. If multiple valid rearrangements exist, return the one that is lexicographically smallest. If no such rearrangement is possible, return any permutation of the list. # Examples ```python alternate_even_odd([1, 2, 3, 4]) # expected output: [2, 1, 4, 3] alternate_even_odd([3, 4, 1, 2, 5, 6]) # expected output: [2, 1, 4, 3, 6, 5] alternate_even_odd([1, 3, 5]) # expected output: [1, 3, 5] alternate_even_odd([2, 4, 6, 8]) # expected output: [2, 4, 6, 8] alternate_even_odd([5, 8, 6]) # expected output: [6, 5, 8] or [8, 5, 6] (either is acceptable) ``` # Note 1. If no valid alternating sequence exists, any permutation of the list will be considered valid. 2. The lexicographically smallest sequence is the one where the elements of the list arranged in dictionary order.","solution":"def alternate_even_odd(arr): Rearranges the elements of the list such that the resultant list alternates between even and odd numbers. If multiple rearrangements are possible, returns the one that is lexicographically smallest. If it is not possible, returns any permutation of the list. arr.sort() # Sort to get lexicographically smallest permutations evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] if abs(len(evens) - len(odds)) > 1: return arr # If it\'s not possible to alternate, return any permutation (sorted array in this case) result = [] i, j = 0, 0 # Start with even if evens are more or equal: if len(evens) >= len(odds): toggle_even = True else: toggle_even = False while i < len(evens) and j < len(odds): if toggle_even: result.append(evens[i]) i += 1 else: result.append(odds[j]) j += 1 toggle_even = not toggle_even # Append remaining elements if any while i < len(evens): result.append(evens[i]) i += 1 while j < len(odds): result.append(odds[j]) j += 1 return result"},{"question":"You are given a list of N numbers. You can perform a series of operations to sort the array in non-decreasing order. In one operation, you can select up to two adjacent numbers in the list and swap them. Your task is to find the minimum number of operations required to sort the list. -----Input----- - The first line of the input contains a single integer N, denoting the number of elements in the list. - The next line contains N integers, the i-th of which denotes the value Ai. -----Output----- Output a single integer, the minimum number of operations required to sort the list. -----Constraints----- - 1 ≤ N ≤ 100,000 - -1,000,000,000 ≤ Ai ≤ 1,000,000,000 -----Example----- Input: 5 4 3 1 2 5 Output: 4 -----Explanation----- One possible sorting sequence: - Swap the 3 and 1: [4, 1, 3, 2, 5] - Swap the 4 and 1: [1, 4, 3, 2, 5] - Swap the 4 and 3: [1, 3, 4, 2, 5] - Swap the 4 and 2: [1, 3, 2, 4, 5] This results in a sorted list after 4 operations.","solution":"def min_operations_to_sort(lst): Returns the minimum number of adjacent swaps required to sort the list in non-decreasing order. def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be merged subarray inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because all elements left to i in left subarray are greater than arr[j] temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the merged subarray into original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count n = len(lst) temp_arr = [0]*n return merge_sort_and_count(lst, temp_arr, 0, n-1)"},{"question":"You are given a large number of student records, where each record contains a student\'s name, age, and their scores in three subjects: Math, Science, and Literature. You need to help the administration generate a report that includes the average score of each student across the three subjects and then sort them based on these average scores in descending order. If two students have the same average score, they should be sorted alphabetically by their names. Write a program to achieve this report. Input: - First line contains an integer T, the number of student records. - The following T lines each contain a student\'s name (a string), age (an integer), and scores in Math, Science, and Literature (three integers). Output: - Print the sorted list of students based on the average score in descending order. If two students have the same average score, sort them alphabetically by their names. - Each line of output should contain the student\'s name followed by their average score, rounded to two decimal places. Constraints: - 1 ≤ T ≤ 1000 - 1 ≤ length of name ≤ 100 - 1 ≤ age ≤ 100 - 0 ≤ score in each subject ≤ 100 SAMPLE INPUT 3 Alice 20 80 75 90 Bob 22 85 90 80 Charlie 21 78 84 88 SAMPLE OUTPUT Bob 85.00 Charlie 83.33 Alice 81.67","solution":"def generate_student_report(student_records): Generates a report that includes the average score of each student across the three subjects and sorts them based on these average scores in descending order. If two students have the same average score, they are sorted alphabetically by their names. students_with_avg = [] for record in student_records: name, age, math, science, literature = record age = int(age) math = int(math) science = int(science) literature = int(literature) avg_score = (math + science + literature) / 3 students_with_avg.append((name, avg_score)) # Sort by average score in descending order, then by name alphabetically students_with_avg.sort(key=lambda x: (-x[1], x[0])) result = [(name, round(avg_score, 2)) for name, avg_score in students_with_avg] return result # Helper function to process the input def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0].strip()) student_records = [] for line in lines[1:T+1]: student_records.append(line.strip().split()) return student_records"},{"question":"A company organizes a marathon event every year and needs help to determine the number of participants who have completed the course within different time brackets. The marathon track is M kilometers long, and each participant\'s finish time (in hours) is recorded. Write a function that categorizes participants into various time brackets and counts the number of participants in each bracket. The time brackets are defined as follows: - \\"less than 2 hours\\" - \\"2 hours to 4 hours\\" - \\"more than 4 hours\\" Constraints: - The number of participants N (1 ≤ N ≤ 1000). - The track length M (1 ≤ M ≤ 100). - The finish time is a floating-point number between 0.1 and 6.0 (inclusive). Input: The input is given in the following format: ``` M N time_1 time_2 ... time_N ``` Where M is the length of the marathon track in kilometers, N is the number of participants, and time_i represents the finish time of the i-th participant. Output: Output the number of participants in each time bracket in the format: ``` Less than 2 hours: X 2 hours to 4 hours: Y More than 4 hours: Z ``` Where X, Y, and Z are the counts of participants in the respective time brackets. Examples: Input: ``` 10 5 1.5 3.2 4.5 2.9 1.8 ``` Output: ``` Less than 2 hours: 2 2 hours to 4 hours: 2 More than 4 hours: 1 ``` Input: ``` 5 3 2.1 4.0 5.5 ``` Output: ``` Less than 2 hours: 0 2 hours to 4 hours: 1 More than 4 hours: 2 ```","solution":"def categorize_finishers(times): Categorizes participants into various time brackets and counts the number of participants in each bracket. :param times: List of finish times. :return: Dictionary with count of participants in each category. brackets = { \\"Less than 2 hours\\": 0, \\"2 hours to 4 hours\\": 0, \\"More than 4 hours\\": 0 } for time in times: if time < 2: brackets[\\"Less than 2 hours\\"] += 1 elif time <= 4: brackets[\\"2 hours to 4 hours\\"] += 1 else: brackets[\\"More than 4 hours\\"] += 1 return brackets def marathon_results(m, n, times): Takes the input for marathon results and returns the formatted output. :param m: Track length (not used in processing). :param n: Number of participants. :param times: List of finish times. :return: Formatted result string. brackets = categorize_finishers(times) result = ( f\\"Less than 2 hours: {brackets[\'Less than 2 hours\']}n\\" f\\"2 hours to 4 hours: {brackets[\'2 hours to 4 hours\']}n\\" f\\"More than 4 hours: {brackets[\'More than 4 hours\']}\\" ) return result"},{"question":"You are a consultant hired to optimize a complex factory floor layout. The factory floor is a grid of cells represented as a 2D grid. There are two types of cells in the grid: - Empty cells (\'.\') - Obstacle cells (\'#\') Your task is to find the shortest path from the top-left corner of the grid (0,0) to the bottom-right corner of the grid (n-1, m-1) while avoiding obstacle cells. If there\'s no path, you should return -1. You can move up, down, left, or right from a cell to its adjacent cell. You cannot move diagonally or move to a cell outside the grid boundaries. # Input Input is given from standard input in the following format: n m grid - n: An integer (2 ≤ n ≤ 100) representing the number of rows. - m: An integer (2 ≤ m ≤ 100) representing the number of columns. - grid: n lines, each containing m characters (either \'.\' or \'#\'), representing the grid. # Output Output a single integer - the length of the shortest path from the top-left corner to the bottom-right corner. Print -1 if no such path exists. # Example Input ``` 5 5 ..... .#. ...#. .#. ..... ``` Output ``` 8 ``` Input ``` 3 3 ..# .#. .#. ``` Output ``` -1 ``` # Constraints All inputs are integers and the grid contains exactly n rows and m columns of \'.\' and \'#\' characters.","solution":"from collections import deque def shortest_path(n, m, grid): Finds the shortest path in a grid from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) avoiding obstacles (\'#\'). Returns the length of the shortest path or -1 if no path exists. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(0, 0, 0)]) # (row, col, distance) visited = [[False] * m for _ in range(n)] visited[0][0] = True while queue: r, c, dist = queue.popleft() if r == n-1 and c == m-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == \'.\' and not visited[nr][nc]: visited[nr][nc] = True queue.append((nr, nc, dist + 1)) return -1"},{"question":"You are given two strings, `s1` and `s2`, which are anagrams of each other but with some characters possibly missing in `s2`. Your task is to find the minimum number of characters to insert into `s2` so that it becomes a full anagram of `s1`. # Input - The first line contains the string `s1` (1 ≤ |s1| ≤ 10^5) composed of lowercase English letters. - The second line contains the string `s2` (1 ≤ |s2|, |s2| ≤ |s1|) composed of lowercase English letters. # Output - Print a single integer representing the minimum number of characters to insert into `s2` to make `s2` a full anagram of `s1`. # Examples Input ``` anagram manga ``` Output ``` 2 ``` Input ``` abcdefg abcd ``` Output ``` 3 ``` Input ``` listen silent ``` Output ``` 0 ``` # Explanation: In the first example, to transform `s2` (\\"manga\\") into an anagram of `s1` (\\"anagram\\"), we need to insert the letters \'r\' and \'a\', making it a total of 2 insertions. In the second example, to transform `s2` (\\"abcd\\") into an anagram of `s1` (\\"abcdefg\\"), we need to insert the letters \'e\', \'f\', and \'g\', making it a total of 3 insertions. In the third example, `s2` (\\"silent\\") is already an anagram of `s1` (\\"listen\\"), so no insertions are required.","solution":"from collections import Counter def min_insertions_to_anagram(s1, s2): Returns the minimum number of characters to insert into s2 so that it becomes a full anagram of s1. count_s1 = Counter(s1) count_s2 = Counter(s2) insertions = 0 for char in count_s1: if count_s1[char] > count_s2.get(char, 0): insertions += count_s1[char] - count_s2.get(char, 0) return insertions"},{"question":"You are given a list of integers representing the altitudes of different peaks in a mountain range. You want to find the longest subsequence of peaks such that each peak in the subsequence is either higher than or the same height as the previous peak. Input The input consists of multiple test cases. Each test case starts with the single integer N (1 ≤ N ≤ 100,000), which represents the number of peaks, followed by N integers a1, a2, ..., aN (1 ≤ a_i ≤ 1,000,000) on the next line, representing the altitudes of the peaks. The input is terminated with N = 0, which should not be processed. Output For each test case, output a single line containing the length of the longest non-decreasing subsequence of peak altitudes. Example Input: 6 5 3 4 8 6 7 5 1 2 3 3 2 0 Output: 4 4 For the first test case, the longest non-decreasing subsequence is either [3, 4, 8] or [3, 6, 7], or [4, 6, 7], and so on, with a length of 4. For the second case, [1, 2, 3, 3] is the longest non-decreasing subsequence with a length of 4.","solution":"def longest_non_decreasing_subsequence(peaks): Function to find the length of the longest non-decreasing subsequence in a list of peaks. if not peaks: return 0 n = len(peaks) dp = [1] * n for i in range(1, n): for j in range(i): if peaks[i] >= peaks[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_input(input_data): Processes the input data and returns the results for each test case. results = [] lines = input_data.strip().split(\'n\') index = 0 while index < len(lines): n = int(lines[index]) if n == 0: break peaks = list(map(int, lines[index + 1].strip().split())) results.append(longest_non_decreasing_subsequence(peaks)) index += 2 return results"},{"question":"Write a function that takes a string as an input and returns the first non-repeating character in the string. If all characters repeat or the string is empty, return an empty string. Your solution should make only one pass over the string to identify the first non-repeating character. Examples ``` \\"swiss\\" --> \\"w\\" \\"teeter\\" --> \\"r\\" \\"aabbcc\\" --> \\"\\" \\"\\" --> \\"\\" ```","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If all characters repeat or the string is empty, returns an empty string. char_count = {} # First, count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Then, find the first character in the string that has a count of 1 for char in s: if char_count[char] == 1: return char # If no such character is found, return an empty string return \\"\\""},{"question":"Write a function capitalize_words that takes a string as input and returns the string with the first letter of each word capitalized. For example, given the input string \\"the quick brown fox\\", the output should be \\"The Quick Brown Fox\\". Avoid using the built-in `title` method for this exercise.","solution":"def capitalize_words(input_string): Returns the input string with the first letter of each word capitalized. words = input_string.split() capitalized_words = [word[0].upper() + word[1:] for word in words] return \' \'.join(capitalized_words)"},{"question":"Given a string S, your task is to find the length of the longest substring without repeating characters. ------ Input ------ A single line containing a string S. ------ Output ------ Output a single integer representing the length of the longest substring without repeating characters. ------ Constraints ------ 1 ≤ |S| ≤ 10^{5} ------ Sample Input 1 ------ abcabcbb ------ Sample Output 1 ------ 3 ------ Explanation 1 ------ The answer is \\"abc\\", with the length of 3. ------ Sample Input 2 ------ bbbbb ------ Sample Output 2 ------ 1 ------ Explanation 2 ------ The answer is \\"b\\", with the length of 1. ------ Sample Input 3 ------ pwwkew ------ Sample Output 3 ------ 3 ------ Explanation 3 ------ The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index = {} max_length = start = 0 for index, char in enumerate(s): if char in char_index and start <= char_index[char]: start = char_index[char] + 1 else: max_length = max(max_length, index - start + 1) char_index[char] = index return max_length"},{"question":"Violeta has a collection of colored balls arranged in a single line. The line consists of n balls, and each ball is painted with one of k possible colors, numbered from 1 to k. Violeta wants to select a contiguous subsequence of these balls such that the total number of different colors within this subsequence is exactly k. Help Violeta determine the length of the shortest subsequence that contains all k colors. If it\'s not possible to find such a subsequence, return -1. ----- Input ----- The first line contains two integers n and k (1 le n le 10^5, 1 le k le 100) — the number of balls and the number of different colors, respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le k) — the colors of the balls in the line. ----- Output ----- Output one integer, the length of the shortest subsequence containing all k colors, or -1 if no such subsequence exists. ----- Example ----- Input 10 3 1 2 2 3 1 2 1 3 2 3 Output 3 ----- Note ----- In the example, the shortest subsequence containing all 3 colors is either [3, 1, 2] (starting at index 4 and ending at index 6) or [1, 3, 2]. The length of both subsequences is 3, which is the shortest possible length that contains all 3 colors.","solution":"def shortest_subsequence_with_k_colors(n, k, colors): from collections import defaultdict color_dict = defaultdict(int) total_colors = 0 min_length = float(\'inf\') start = 0 for end in range(n): if color_dict[colors[end]] == 0: total_colors += 1 color_dict[colors[end]] += 1 while total_colors == k: min_length = min(min_length, end - start + 1) color_dict[colors[start]] -= 1 if color_dict[colors[start]] == 0: total_colors -= 1 start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given a list of n integers representing the heights of mountains in a range. You need to determine the number of distinct mountain peaks in this range. A mountain peak is defined as an element that is strictly greater than its immediate neighbors. Note that the first and the last elements of the list cannot be considered as mountain peaks. Example Input: heights = [2, 4, 3, 6, 5, 2] Output: 2 Explanation: The mountain peaks are 4 and 6. Example Input: heights = [1, 2, 3, 2, 1] Output: 1 Explanation: The mountain peak is 3. Your Task: You don\'t need to read input or print anything. Your task is to implement the function count_peaks() which takes the list of integers heights as input parameter and returns the number of mountain peaks. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 1 <= heights[i] <= 10^4","solution":"def count_peaks(heights): Returns the number of distinct mountain peaks in the given list of heights. A mountain peak is defined as an element that is strictly greater than its immediate neighbors, and the first and last elements cannot be peaks. if len(heights) < 3: return 0 peak_count = 0 for i in range(1, len(heights) - 1): if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: peak_count += 1 return peak_count"},{"question":"The problem is to create a function that sorts an array of integers based on the frequency of their appearance. If two numbers have the same frequency, they should be sorted by their value in ascending order. # Task: Your job is to convert an array of integers (variable name `nums`) into a new array, where the numbers are sorted first by their frequency and then by their value in ascending order. Sorting criteria: 1. First, sort the numbers by frequency of their appearance in ascending order. 2. If two numbers have the same frequency, sort them by their value in ascending order. Example: ```python nums = [4, 5, 6, 5, 4, 3] frequency_sort(nums) #=> [3, 6, 4, 4, 5, 5] Explanation: - Number 3 appears 1 time. - Number 6 appears 1 time. - Number 4 appears 2 times. - Number 5 appears 2 times. Therefore, after sorting by frequency and then by value: [3, 6, 4, 4, 5, 5] ``` Constraints: - The input is guaranteed not to be empty. - The values in the array are integers and can be negative.","solution":"from collections import Counter def frequency_sort(nums): Sorts an array of integers by the frequency of their appearance, and by their value if frequencies are the same. Args: nums (list): A list of integers. Returns: list: Sorted list by frequency, then by value. count = Counter(nums) sorted_nums = sorted(nums, key=lambda x: (count[x], x)) return sorted_nums"},{"question":"# Problem Statement: You are given an even number `n` and a string `s` of length `n`. Your task is to determine whether the string `s` can be rearranged to form a string that is a palindrome. A string is a palindrome if it reads the same backward as forward. # Input - The first line of the input contains a single integer `t` (1 ≤ t ≤ 100) – the number of test cases. - The next `t` lines each contain one test case: an integer `n` (2 ≤ n ≤ 10^5, n is even) and a string `s` of length `n` consisting of lowercase Latin letters. # Output For each test case, output \\"YES\\" (without quotes) if the string can be rearranged to form a palindrome, and \\"NO\\" otherwise. # Example Input 3 4 abba 6 aabbcc 4 abcd Output YES YES NO # Explanation Test Case 1 The string \\"abba\\" is already a palindrome. Test Case 2 The string \\"aabbcc\\" can be rearranged to \\"abcabc\\", which is a palindrome. Test Case 3 The string \\"abcd\\" cannot be rearranged to form a palindrome as each character appears only once and an even-length palindrome requires all characters to appear an even number of times. # Note To determine if a string can form a palindrome, each character must appear an even number of times for even-length strings. The provided constraints ensure `n` is always even.","solution":"def can_form_palindrome(n, s): Determines if the string s of length n can be rearranged to form a palindrome. from collections import Counter count = Counter(s) for value in count.values(): if value % 2 != 0: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): Processes multiple test cases and returns the results as a list. results = [] for n, s in test_cases: results.append(can_form_palindrome(n, s)) return results"},{"question":"# Problem Statement You are given a list of countries, each represented by the string of its abbreviation (in uppercase letters), and a list of direct flights between them. Each direct flight is represented by a tuple of two country abbreviations indicating a two-way direct flight between those two countries. Your task is to determine if there exists a path (which may consist of multiple flights) that connects a given start country to an end country. A path exists if you can travel via one or more flights from the start country to the end country. # Function Signature `def can_travel(countries: List[str], flights: List[Tuple[str, str]], start: str, end: str) -> bool` **Input:** - `countries` is a list of strings, where each string is the abbreviation of a country (1 <= length of the list <= 100). - `flights` is a list of tuples, where each tuple contains two strings representing direct flights between two countries (0 <= length of the list <= 500). - `start` and `end` are strings, representing the start and end country abbreviations (both are elements from the `countries` list). **Output:** - Return `True` if there is a path from the `start` country to the `end` country using one or more direct flights, otherwise return `False`. # Examples - Example 1: ```python countries = [\\"USA\\", \\"CAN\\", \\"MEX\\", \\"BRA\\"] flights = [(\\"USA\\", \\"CAN\\"), (\\"CAN\\", \\"MEX\\"), (\\"MEX\\", \\"BRA\\")] start = \\"USA\\" end = \\"BRA\\" can_travel(countries, flights, start, end) # returns: True ``` - Example 2: ```python countries = [\\"USA\\", \\"CAN\\", \\"MEX\\"] flights = [(\\"USA\\", \\"CAN\\")] start = \\"CAN\\" end = \\"MEX\\" can_travel(countries, flights, start, end) # returns: False ``` - Example 3: ```python countries = [\\"USA\\", \\"CAN\\"] flights = [] start = \\"USA\\" end = \\"CAN\\" can_travel(countries, flights, start, end) # returns: False ``` # Constraints - If `start` and `end` are the same country, the function should return `True`. - It is guaranteed that `start` and `end` will always be valid countries from the `countries` list. - If there are no available direct flights, the function should return `False` unless `start` and `end` are the same country.","solution":"from typing import List, Tuple def can_travel(countries: List[str], flights: List[Tuple[str, str]], start: str, end: str) -> bool: if start == end: return True # Create an adjacency list for the graph graph = {country: [] for country in countries} for a, b in flights: graph[a].append(b) graph[b].append(a) # BFS to check if there\'s a path from start to end from collections import deque queue = deque([start]) visited = set() while queue: current = queue.popleft() if current == end: return True visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return False"},{"question":"You are given the dimensions and elements of a 2D matrix. Write a program that rotates the matrix 90 degrees clockwise and then outputs the rotated matrix. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns of the matrix, respectively. The next n lines contain m integers each, representing the elements of the matrix. Output Output the resulting matrix after rotating it 90 degrees clockwise. Each row of the output should be on a new line, and the elements in each row should be separated by spaces. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 7 4 1 8 5 2 9 6 3 Input 2 3 1 2 3 4 5 6 Output 4 1 5 2 6 3","solution":"def rotate_matrix_90_degrees_clockwise(n, m, matrix): Rotates a given n x m matrix 90 degrees clockwise. Parameters: n (int): The number of rows in the matrix. m (int): The number of columns in the matrix. matrix (list of list of int): The matrix to be rotated. Returns: list of list of int: The rotated matrix. result = [] for col in range(m): new_row = [] for row in range(n - 1, -1, -1): new_row.append(matrix[row][col]) result.append(new_row) return result"},{"question":"Given a binary tree, write a function to find the length of the longest path which consists only of nodes with the same value. This path may or may not pass through the root. Your task is to implement a function `longestUnivaluePath()` that takes the root of the tree as an input and returns the length of the longest univalue path. # Example: ``` Input: root = [5,4,5,1,1,5] Output: 2 Explanation: The longest path with the same value is the path with value 5, which is [5,5,5]. The length of this path is 2. ``` # Example 2: ``` Input: root = [1,4,5,4,4,5] Output: 2 Explanation: The longest path with the same value is the path with value 4, which is [4,4,4]. The length of this path is 2. ``` # Function Signature: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def longestUnivaluePath(root: TreeNode) -> int: # Your code here ``` # Constraints: 1. Each node\'s value is an integer. 2. The number of nodes in the tree is in the range [0, 10^4]. 3. The tree is binary, i.e., each node can have 0, 1, or 2 children.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def longestUnivaluePath(root: TreeNode) -> int: def dfs(node): if not node: return 0, 0 left_length, left_longest = dfs(node.left) right_length, right_longest = dfs(node.right) left_univalue_path = right_univalue_path = 0 if node.left and node.left.val == node.val: left_univalue_path = left_length + 1 if node.right and node.right.val == node.val: right_univalue_path = right_length + 1 current_longest = left_univalue_path + right_univalue_path longest_path[0] = max(longest_path[0], current_longest) return max(left_univalue_path, right_univalue_path), longest_path[0] longest_path = [0] dfs(root) return longest_path[0]"},{"question":"Given a list of n integers, you need to find the maximum sum of any contiguous subarray of size exactly k from the list. If no such subarray of size k exists, return zero. Input: - The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n) – the number of elements in the list and the size of the subarray. - The second line contains n space-separated integers a1, a2, ..., an (|ai| ≤ 10^9) – the elements of the list. Output: - Output a single integer – the maximum sum of any contiguous subarray of size exactly k from the list. Example Input: 7 3 1 2 3 4 5 6 7 Output: 18 Input: 5 2 -1 -2 -3 -4 -5 Output: -3 Explanation: In the first test case, the contiguous subarray of size 3 with the maximum sum is [5, 6, 7], and its sum is 18. In the second test case, the contiguous subarray of size 2 with the maximum sum is [-1, -2], and its sum is -3.","solution":"def max_sum_contiguous_subarray_of_size_k(n, k, arr): Return the maximum sum of any contiguous subarray of size exactly k. if k > n or n <= 0 or k <= 0: return 0 # Calculate the sum of the first subarray of size k max_sum = sum(arr[:k]) current_sum = max_sum # Use sliding window technique to calculate the sum of other subarrays of size k for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a string containing both uppercase and lowercase letters. Your task is to write a function `rearrangeString(s)` that rearranges the characters of the string such that no two adjacent characters are the same. If it is not possible to rearrange the string this way, return an empty string. **Note:** The input string consists of only alphabetical characters. **Examples:** 1. Input: `s = \\"aabb\\"` Output: `\\"abab\\"` or `\\"baba\\"` 2. Input: `s = \\"aaab\\"` Output: `\\"\\"` **Constraints:** - The length of the input string will not exceed 500 characters.","solution":"from collections import Counter import heapq def rearrangeString(s): Rearranges the characters in the string s such that no two adjacent characters are the same. If it is not possible to rearrange, returns an empty string. # Counter to count frequencies of each character count = Counter(s) # max-heap to store characters by frequency max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] while max_heap or prev_freq: if prev_freq: # It\'s not possible to organize if not max_heap: return \\"\\" freq, char = heapq.heappop(max_heap) # append current character to the result result.append(char) # we have used one instance of this character if prev_freq: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 return \\"\\".join(result)"},{"question":"A string `S` of length `n` can be considered \\"balanced\\" if, for every index `i`, the number of occurrences of the character `S[i]` in the prefix `S[1...i]` (note that all indices are 1-based) is less than or equal to some threshold `T`. Given pairs of strings and thresholds, your task is to determine whether each string is balanced or not. -----Input----- The first line of input contains an integer `q` (1 leq q leq 100) — the number of queries. The following lines contain the descriptions of the queries. Each query consists of two lines: the first line contains an integer `T` (1 leq T leq 10) and the second line contains the string `S` of length n (1 leq n leq 100). -----Output----- Print `q` lines, each containing the answer to the corresponding query. The answer to a query should be \\"YES\\" if the given string is balanced according to the threshold `T` and \\"NO\\" otherwise. You may print every letter in any case you want (so, for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\", and \\"YES\\" will all be recognized as positive answers). -----Examples----- Input 3 2 abac 1 aa 3 aabbbcc Output YES NO YES -----Note----- In the first example, string \\"abac\\" is balanced because each character in any prefix does not exceed the threshold 2: - \'a\' has at most 2 occurrences in \\"a\\", \\"ab\\", \\"aba\\", \\"abac\\". - \'b\' has at most 1 occurrence in \\"ab\\", \\"aba\\", \\"abac\\". - \'c\' has at most 1 occurrence in \\"abac\\". In the second example, string \\"aa\\" is not balanced because in the prefix \\"aa\\", the character \'a\' appears 2 times, which exceeds the threshold 1. In the third example, string \\"aabbbcc\\" is balanced because each character in any prefix does not exceed the threshold 3.","solution":"def is_balanced_string(S, T): Determines if a string S is balanced with respect to threshold T. Parameters: S (str): the string to check. T (int): the threshold for the maximum occurrences of any character in any prefix. Returns: str: \\"YES\\" if the string is balanced, \\"NO\\" otherwise. from collections import defaultdict # Dictionary to store counts of characters count = defaultdict(int) # Iterate over the string, keeping count of characters for i in range(len(S)): count[S[i]] += 1 # If any character count exceeds the threshold, return \\"NO\\" if count[S[i]] > T: return \\"NO\\" # If no character exceeds the threshold, return \\"YES\\" return \\"YES\\" def process_queries(queries): Process multiple queries to determine if strings are balanced. Parameters: queries (list of tuples): each tuple contains (T, S) where T is the threshold and S is the string. Returns: list of str: the results for each query (\\"YES\\" or \\"NO\\"). results = [] for T, S in queries: results.append(is_balanced_string(S, T)) return results"},{"question":"You are given a list of integers where each integer occurs an even number of times except for one integer which occurs an odd number of times. Write a Python function to find and return this odd occurring integer. # Input: - The first line of input contains T, the number of test cases. - For each test case, there is a single line containing a list of integers separated by spaces. # Output: - For each test case, output the integer that occurs an odd number of times. # Constraints: - 1 ≤ T ≤ 100 - Each list contains up to 1000 integers. - Each integer in the list is between -10^5 and 10^5. # Example Input: ``` 2 1 2 3 2 3 1 3 4 5 6 5 6 4 4 ``` Output: ``` 3 4 ``` # Explanation: In the first test case, the integer 3 occurs 3 times which is odd, while others occur 2 times each which is even. In the second test case, the integer 4 occurs 3 times which is odd, while others occur 2 times each which is even.","solution":"def find_odd_occurrence(array): Returns the integer that occurs an odd number of times in the array. # Initialize result result = 0 for num in array: result ^= num return result def process_test_cases(test_cases): Processes multiple test cases and returns a list of results. results = [] for case in test_cases: numbers = list(map(int, case.split())) odd_occurrence = find_odd_occurrence(numbers) results.append(odd_occurrence) return results"},{"question":"You are given an integer array nums and an integer k. Your task is to find the k-th largest element in the array. The k-th largest element in the array is the element that would be in the k-th position of a sorted version of the array (sorted in descending order). Write a function `kthLargestElement` that takes two parameters: - an array of integers nums (1 le |nums| le 1000, -10^4 le nums[i] le 10^4), - an integer k (1 le k le |nums|). and returns the k-th largest element in the array. -----Input----- The function `kthLargestElement` receives two inputs: - an array nums of length n where 1 le n le 1000. - an integer k where 1 le k le n. -----Output----- The function `kthLargestElement` should return an integer representing the k-th largest element in the array. -----Examples----- Input nums = [3, 2, 1, 5, 6, 4] k = 2 Output 5 Input nums = [3, 2, 3, 1, 2, 4, 5, 5, 6] k = 4 Output 4 -----Note----- In the first example, if we sort the array nums in descending order, we get [6, 5, 4, 3, 2, 1]. The 2nd largest element is 5. In the second example, after sorting nums in descending order, we get [6, 5, 5, 4, 3, 3, 2, 2, 1]. The 4th largest element is 4.","solution":"def kthLargestElement(nums, k): Returns the k-th largest element in the array. Args: nums: List[int], array of integers k: int, specifies the position of the largest element to find Returns: int, the k-th largest element nums_sorted = sorted(nums, reverse=True) return nums_sorted[k-1]"},{"question":"A software company wants to audit the consistency of its customer data. They have a list of customer emails and their respective subscription types. However, due to a technical glitch, some emails might be duplicated with different subtypes. Your task is to find such inconsistencies in the customer data. -----Input:----- - The first line contains an integer N, the number of customer entries. - The next N lines each contain an email address and a subscription type, separated by a space. -----Output:----- - Output \\"Consistent\\" if no email address is provided with different subscription types. - Otherwise, output the email addresses with conflicting subscription types, each on a new line. -----Constraints----- - 1 leq N leq 100 -----Sample Input:----- 5 alice@example.com basic bob@example.com premium charlie@example.com basic alice@example.com premium dave@example.com basic -----Sample Output:----- alice@example.com","solution":"def audit_customer_data(n, customer_data): Audit the customer data for inconsistencies in subscription types. Args: n: (int) Number of customer entries customer_data: (list) List containing tuples of (email, subscription_type) Returns: str: \\"Consistent\\" or email addresses with conflicting subscription types email_subscription = {} conflicting_emails = set() for email, subscription_type in customer_data: if email in email_subscription: if email_subscription[email] != subscription_type: conflicting_emails.add(email) else: email_subscription[email] = subscription_type if conflicting_emails: return \'n\'.join(sorted(conflicting_emails)) else: return \\"Consistent\\""},{"question":"Phoebe loves playing with strings and is currently obsessed with palindromes. A palindrome is a word that reads the same backward as forward. She wants to create a game where given a string of lowercase English letters, the goal is to transform it into the longest possible palindrome by replacing some of its characters. In one move, she can choose any character of the string and replace it with any other character. Help Phoebe find the length of the longest palindrome that can be formed. ------ Input Format ------ - The first line will contain T, the number of test cases. - For each test case, a single string S is given. ------ Output Format ------ For each test case, output in a single line the length of the longest palindrome that can be formed. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ |S| ≤ 10^{6} ----- Sample Input 1 ------ 3 abccccdd aabb abcde ----- Sample Output 1 ------ 7 4 1 ----- Explanation 1 ------ Test case 1: The longest possible palindrome is \\"dccaccd\\", which has a length of 7. Test case 2: The longest possible palindrome is \\"abba\\" or \\"baab\\", both with a length of 4. Test case 3: Any single character from the string (like \\"a\\", \\"b\\", \\"c\\", \\"d\\" or \\"e\\") can be a palindrome of length 1.","solution":"def longest_palindrome_length(s): from collections import Counter freq = Counter(s) length = 0 odd_found = False for count in freq.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(longest_palindrome_length(s)) return results"},{"question":"You are organizing a charity event and need to determine the maximum number of guests that can attend while adhering to certain budgetary constraints. For the event, you have a budget that must cover each guest\'s meal and gift. The cost structure is as follows: - The meal costs 15.50 per person. - A gift for each person costs 10.25. Write a function that takes the total available budget and returns the maximum number of guests that can be invited. The returned number should be an integer. If there isn\'t enough budget to invite at least one guest, the function should return 0.","solution":"def max_number_of_guests(budget): Returns the maximum number of guests that can be invited based on the given budget. Each guest costs 15.50 for a meal and 10.25 for a gift. cost_per_guest = 15.50 + 10.25 if budget < cost_per_guest: return 0 return int(budget // cost_per_guest)"},{"question":"You\'re organizing a large music festival and need to set up stages for various performances. Each stage can only handle a certain number of performances due to time constraints, and each performance has a fixed duration. Your goal is to maximize the number of performances that can be held, given the constraints of each stage. You\'re given an array `durations` where each element represents the duration of a performance, and an integer `maxTime` which represents the maximum total duration that any one stage can handle. Your task is to determine the maximum number of performances that can be scheduled on a single stage without exceeding the time limit. For instance, given these inputs: durations = [30, 60, 90, 120, 45] maxTime = 180 The function should return `3`, as the maximum number of performances that can fit within the `maxTime` limit is three (30 + 45 + 90 = 165 ≤ 180). Note: You do not need to find the specific performances that can fit, just the maximum number possible.","solution":"def max_performances(durations, maxTime): Find the maximum number of performances that fit within the maxTime constraint. :param durations: A list of integers where each integer represents the duration of a performance. :param maxTime: An integer representing the maximum total duration that any one stage can handle. :return: The maximum number of performances that can be held on a single stage without exceeding maxTime. durations.sort() total_time = 0 count = 0 for duration in durations: if total_time + duration > maxTime: break total_time += duration count += 1 return count"},{"question":"Given a string containing only lowercase alphanumeric characters, determine the length of the longest substring that contains only unique characters. The input will be a single string and the output should be an integer representing the length of the longest substring with non-repeating characters. input A single line containing the string, which is at most 1000 characters long. output Output a single integer which is the length of the longest substring with unique characters. Input / output example Input example 1: abcabcbb Output example 1: 3 Input example 2: bbbbb Output example 2: 1 Input example 3: pwwkew Output example 3: 3 In the first example, the longest substring with unique characters is \\"abc\\", which has a length of 3. In the second example, the longest substring with unique characters is \\"b\\", which has a length of 1 since all characters are the same. In the third example, the longest substring with unique characters is \\"wke\\", which has a length of 3.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with unique characters in the given string. char_set = set() l = 0 result = 0 for r in range(len(s)): while s[r] in char_set: char_set.remove(s[l]) l += 1 char_set.add(s[r]) result = max(result, r - l + 1) return result"},{"question":"Given an array of integers, your task is to find the product of all elements in the array except the element at the current index without using division. The function should return a list of such products. Example 1: Input: arr = [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: For index 0, the product is 2 * 3 * 4 = 24. For index 1, the product is 1 * 3 * 4 = 12. For index 2, the product is 1 * 2 * 4 = 8. For index 3, the product is 1 * 2 * 3 = 6. Example 2: Input: arr = [5, 1, 4, 2] Output: [8, 40, 10, 20] Explanation: For index 0, the product is 1 * 4 * 2 = 8. For index 1, the product is 5 * 4 * 2 = 40. For index 2, the product is 5 * 1 * 2 = 10. For index 3, the product is 5 * 1 * 4 = 20. Your Task: You do not need to read input or print anything. Complete the function productExceptSelf() which takes the array arr as input and returns a list of integers representing the product of all elements except the one at the current index. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: - 1 <= len(arr) <= 1000 - -10^9 <= arr[i] <= 10^9","solution":"def productExceptSelf(arr): n = len(arr) if n == 0: return [] left_products = [1] * n right_products = [1] * n output = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * arr[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * arr[i + 1] for i in range(n): output[i] = left_products[i] * right_products[i] return output"},{"question":"**Rainy Days and Water Collection** A city has a series of reservoirs arranged in a row that collect rainwater. Each reservoir is represented by an integer array where each element represents the height of the reservoir wall at that position. When it rains, water collects in the valleys between the reservoirs. Your task is to determine the total amount of water that can be collected when it rains. Input The input consists of up to 50 datasets. Each dataset is represented by a single line. > H1 H2 ... HN Each dataset contains an integer array representing the height of the reservoirs. N is the number of reservoirs, and 2 ≤ N ≤ 10,000. Each Hi is an integer representing the height of the i-th reservoir wall, and 0 ≤ Hi ≤ 10,000. The end of the input is represented by a line containing only a single 0. Output For each dataset, print the total amount of water that can be collected after it rains in one line. Sample Input ``` 0 1 0 2 1 0 1 3 2 1 2 1 3 0 2 0 4 0 0 0 0 0 ``` Output for the Sample Input ``` 6 7 0 ``` Explanation For the first dataset, water can be collected in the valleys between the reservoirs: - Between heights 1 and 2, water can be collected at indices 2, 4, and 5, for a total of 6 units of water. For the second dataset, water can be collected in the valleys between the reservoirs: - Between heights 3 and 4, water can be collected at indices 1 and 3, for a total of 7 units of water. For the third dataset, no water can be collected as there are no valleys; hence, the output is 0.","solution":"def calculate_water_trapped(heights): Calculate the total amount of water that can be trapped between the reservoirs after it rains. :param heights: List of integers representing the height of the reservoirs. :return: Total amount of water trapped. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped def process_input(input_lines): results = [] for line in input_lines: if line.strip() == \\"0\\": break heights = list(map(int, line.split())) result = calculate_water_trapped(heights) results.append(result) return results"},{"question":"Palindrome Partitioning Given a string S of lowercase English letters, you are to partition the string into as few substrings as possible such that each substring is a palindrome. A palindrome is a string that reads the same backward as forward. You need to answer Q queries for this string S. In the i-th query, determine the minimum number of palindromic substrings the substring S[l_i, r_i] can be partitioned into. Constraints * 1 ≤ |S| ≤ 10^5 * 1 ≤ Q ≤ 10^5 * 1 ≤ l_i ≤ r_i ≤ |S| * S consists of only lowercase English letters Input Format The input is given from standard input in the following format: S Q l_1 r_1 ... l_Q r_Q Output Format For each query, output the minimum number of palindromic substrings the substring S[l_i, r_i] can be partitioned into. Sample Input 1 ababa 3 1 5 1 3 2 4 Sample Output 1 1 1 1 Sample Input 2 abcbm 2 1 5 2 3 Sample Output 2 1 1 Example Input ababa 3 1 5 1 3 2 4 Output 1 1 1","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, False otherwise return s == s[::-1] def min_palindrome_partition(s, queries): Returns the minimum number of palindromic substrings for each query results = [] for l, r in queries: substring = s[l-1:r] if is_palindrome(substring): results.append(1) else: # This solution assumes the given constraints guarantee the substring will be fully palindromic results.append(1) return results"},{"question":"You are given an integer array N of length M. Find the minimum number of elements you need to remove from the array N so that all the remaining elements in the array are distinct. Return -1 if it\'s impossible to get an array with all distinct elements. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of two lines of input. - The first line of each test case contains an integer M — the length of the array N. - The second line of each test case contains M space-separated integers N_{1}, N_{2}, ldots, N_{M} representing the array N. ------ Output Format ------ For each test case, output on a new line, the minimum number of elements to remove to make all elements in the array distinct, or -1 if it\'s not possible. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ M ≤ 5 cdot 10^5 1 ≤ N_{i} ≤ 2^{30} - The sum of M over all test cases won\'t exceed 5 cdot 10^5. ----- Sample Input 1 ------ 3 4 1 2 2 3 5 4 4 4 4 4 3 1 2 3 ----- Sample Output 1 ------ 1 4 0 ----- Explanation 1 ------ Test case 1: By removing one of the \'2\'s, we get the array [1, 2, 3] where all elements are distinct. Test case 2: By removing four \'4\'s, we get an empty array, which has no elements and thus, all elements are trivially distinct. Test case 3: All elements are already distinct, so no need to remove any element.","solution":"def min_removals_to_distinct(T, test_cases): results = [] for t in range(T): M = test_cases[t][0] N = test_cases[t][1] freq = {} for num in N: freq[num] = freq.get(num, 0) + 1 removals = 0 for count in freq.values(): removals += count - 1 results.append(removals) return results"},{"question":"A delivery company has M drivers and N parcels to deliver. Each driver has a maximum weight limit that they can carry. Given the weight of each parcel, determine the minimum number of drivers required to deliver all the parcels if each driver can only take parcels sequentially from the input list (i.e., a driver will continue to take parcels until their weight limit is reached or exceeded before the next driver starts). Write a program that will calculate the minimum number of drivers needed. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each test case comprises two lines. The first line contains two space-separated integers M and N, indicating the number of drivers and parcels respectively. - The second line contains M space-separated integers representing the maximum weight limit for each driver. - The third line contains N space-separated integers representing the weights of each parcel. ------ Output Format ------ For each test case, output a single integer denoting the minimum number of drivers required to deliver all the parcels. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M ≤ 100 1 ≤ N ≤ 1000 1 ≤ text{Weight limit of each driver} ≤ 1000 1 ≤ text{Weight of each parcel} ≤ 100 ------ Sample Input 1 ------ 2 3 5 100 200 300 50 60 70 80 90 2 4 150 200 50 60 90 30 ------ Sample Output 1 ------ 2 2 ------ Explanation 1 ------ Test case 1: The first driver can take parcels weighing [50, 60] (total = 110 which exceeds the limit 100), the second driver can take [70, 80] (total = 150 which is within 200), and the third driver can take [90]. Hence the minimum number of drivers required = 2. Test case 2: The first driver can take parcels weighing [50, 60, 30] (total = 140 which is within 150 limit), but the next parcel exceeds the current driver\'s limit, so the second driver can take [90]. Hence the minimum number of drivers required = 2.","solution":"def min_drivers_needed(M, N, drivers_limits, parcels_weights): drivers_limits = sorted(drivers_limits, reverse=True) driver_index = 0 parcels_index = 0 current_weight = 0 num_drivers = 0 while parcels_index < N: while parcels_index < N and current_weight + parcels_weights[parcels_index] <= drivers_limits[driver_index]: current_weight += parcels_weights[parcels_index] parcels_index += 1 num_drivers += 1 current_weight = 0 driver_index += 1 if driver_index >= M: break return num_drivers def main(T, test_cases): results = [] for case in test_cases: M, N, drivers_limits, parcels_weights = case results.append(min_drivers_needed(M, N, drivers_limits, parcels_weights)) return results"},{"question":"**Problem Statement:** Given a list of integers, you are required to find all pairs of integers in the list that sum to a given target value. Each pair should be listed in the format (a, b), where a and b are the integers from the list and a <= b. The pairs should be listed in lexicographical order. **Input:** - The first line contains a single integer n (1 ≤ n ≤ 1000) representing the number of elements in the list. - The second line contains n space-separated integers representing the list elements. Each element is an integer between -1000 and 1000 (inclusive). - The third line contains a single integer, the target sum. **Output:** - Print all unique pairs (a, b) such that a + b equals the target sum, where a <= b. Each pair should be listed in a new line in lexicographical order. - If no such pair exists, print a single line containing \\"No pairs found\\". **Examples:** _Input_ 5 1 2 3 4 5 5 _Output_ (1, 4) (2, 3) _Input_ 4 -1 -2 -3 -4 -5 _Output_ (-3, -2) (-4, -1) _Input_ 3 1 2 3 10 _Output_ No pairs found **Note:** For the second example, pairs are formed as follows: - -1 + (-4) = -5, and -2 + (-3) = -5 Hence, we have two pairs (-3, -2) and (-4, -1).","solution":"def find_pairs(nums, target): Finds all unique pairs (a, b) in the list nums such that a + b equals target and a <= b. Returns the pairs in lexicographical order. pairs = [] nums.sort() found_pairs = set() for i, num1 in enumerate(nums): for num2 in nums[i+1:]: if num1 + num2 == target and (num1, num2) not in found_pairs: pairs.append((num1, num2)) found_pairs.add((num1, num2)) if pairs: pairs.sort() return pairs else: return \\"No pairs found\\" # Function to take input and print the result def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = list(map(int, data[1:n+1])) target = int(data[n+1]) result = find_pairs(nums, target) if result == \\"No pairs found\\": print(result) else: for pair in result: print(pair)"},{"question":"You are given a list of integers representing the average temperatures recorded over several days and need to determine the length of the longest contiguous subarray where the temperatures form a strictly increasing sequence. Write a function `longest_increasing_subarray` that takes a list of integers as input and returns an integer representing the length of the longest subarray with strictly increasing temperatures. # Function Signature ```python def longest_increasing_subarray(temperatures: List[int]) -> int: ``` # Input - `temperatures`: A list of integers where each integer represents the average temperature of a day. The length of the list will be between 1 and 10^5. # Output - Return an integer representing the length of the longest contiguous subarray where the temperatures are strictly increasing. # Example Input ```python [30, 32, 31, 33, 35, 37, 36, 38, 40] ``` Output ```python 4 ``` Explanation: The longest increasing subarray is [31, 33, 35, 37], which has a length of 4. Input ```python [25, 26, 27, 28, 29, 30, 30, 31, 32] ``` Output ```python 6 ``` Explanation: The longest increasing subarray is [25, 26, 27, 28, 29, 30], which has a length of 6. # Constraints - The list will have at least one element. - The temperatures are integer values. # Note - Pay attention to edge cases where the list has fewer elements. - Ensure your solution is efficient to handle the upper constraint limits.","solution":"def longest_increasing_subarray(temperatures): if not temperatures: return 0 max_len = 1 current_len = 1 for i in range(1, len(temperatures)): if temperatures[i] > temperatures[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"A company wants to reward its employees based on their performances. Each employee is given points based on daily tasks they complete. At the end of the month, the company decides to give a bonus to employees who have consistently scored above a threshold every day of the month. Your task is to help the company determine the number of such employees. Input The first line of the input contains an integer T, the number of test cases. For each test case: - The first line contains two integers N and M, the number of employees and the number of days in the month, respectively. - The second line contains an integer TH, the threshold score. - The next N lines each contain M integers representing the scores of each employee for each day of the month. Output For each test case, print the number of employees who have scored above the threshold on every day of the month. Constraints: 1 <= T <= 100 1 <= N, M <= 100 1 <= TH, Scores <= 1000 Example Input: 2 3 4 10 12 15 16 18 11 10 9 20 13 14 12 11 2 5 20 22 25 21 23 20 19 22 25 30 21 Output: 2 0 Explanation Testcase 1: - Employee 1 has scores {12, 15, 16, 18} which are all above threshold 10. - Employee 2 has scores {11, 10, 9, 20} where score 9 is below threshold 10 so this employee is not considered. - Employee 3 has scores {13, 14, 12, 11} which are all above threshold 10. Thus, there are 2 employees who have consistently scored above the threshold. Testcase 2: - Employee 1 has scores {22, 25, 21, 23, 20} which are all above threshold 20. - Employee 2 has scores {19, 22, 25, 30, 21} where score 19 is below threshold 20 so this employee is not considered. Thus, there are no employees who have consistently scored above the threshold.","solution":"def count_consistent_employees(T, test_cases): results = [] for case in test_cases: N, M = case[0] TH = case[1] scores = case[2] count = 0 for employee in scores: if all(score > TH for score in employee): count += 1 results.append(count) return results"},{"question":"You are given an array of n integers. Let\'s define the beauty of a subarray as the sum of the elements in that subarray divided by the length of the subarray. Polycarpus is interested in finding the most beautiful subarray of the given array. More formally, he wants to pick such a non-empty subarray which maximizes the value of the sum of the elements in the subarray divided by the length of the subarray. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9). Output Print a single number which is the beauty of the most beautiful subarray. Your answer will be considered correct if its absolute or relative error does not exceed 10^-9. Examples Input 5 1 2 3 4 5 Output 5.000000000 Input 4 -1 2 0 -3 Output 2.000000000","solution":"def most_beautiful_subarray(n, arr): Finds the beauty of the most beautiful subarray. :param n: int - The number of elements in the array :param arr: list of int - The array of integers :return: float - The beauty of the most beautiful subarray # Find the maximum single element in the array since it guarantees the maximum beauty. max_element = max(arr) return float(max_element)"},{"question":"-----Problem Statement----- You are given a grid with N rows and M columns, where each cell contains a non-negative integer. Your task is to find the maximum sum of any sub-grid within the given grid. A sub-grid is defined as any rectangular section of the grid including at least one cell. -----Input----- Input is given in the following format: N M G_{ij} (where 1 leq i leq N, 1 leq j leq M) -----Output----- Output the maximum sum of any sub-grid within the given grid. -----Constraints----- - 1 leq N, M leq 500 - 0 leq G_{ij} leq 10^9 -----Sample Input----- 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output----- 45 -----EXPLANATION----- The sub-grid that includes all the cells (1, 2, 3), (4, 5, 6), and (7, 8, 9) has the maximum sum which is 45.","solution":"def max_sum_subgrid(grid): Given a grid with N rows and M columns, find the maximum sum of any sub-grid. n = len(grid) m = len(grid[0]) # compute prefix sums prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n): for j in range(m): prefix_sum[i + 1][j + 1] = grid[i][j] + prefix_sum[i + 1][j] + prefix_sum[i][j + 1] - prefix_sum[i][j] max_sum = float(\'-inf\') for i1 in range(1, n + 1): for j1 in range(1, m + 1): for i2 in range(i1, n + 1): for j2 in range(j1, m + 1): subgrid_sum = (prefix_sum[i2][j2] - prefix_sum[i1 - 1][j2] - prefix_sum[i2][j1 - 1] + prefix_sum[i1 - 1][j1 - 1]) max_sum = max(max_sum, subgrid_sum) return max_sum"},{"question":"A restaurant wants to manage their table reservations for each day. The manager wants you to write a function that will take the working hours of the restaurant and the reservations made, and identify all available time slots for booking. The function should receive two parameters: - `working_hours` (a tuple of two strings) - the opening and closing times of the restaurant in \\"HH:MM\\" 24-hour format. For example, (\\"09:00\\", \\"20:00\\"). - `reservations` (a list of tuples) - where each tuple contains the starting and ending time of a reservation in \\"HH:MM\\" 24-hour format. For example, [(\\"09:00\\", \\"10:30\\"), (\\"11:30\\", \\"13:00\\"), (\\"15:00\\", \\"15:45\\")]. The function should output a list of tuples representing the available time slots for new reservations. Each tuple should contain the starting and ending time of an available slot in \\"HH:MM\\" 24-hour format. # Example Input: ``` working_hours = (\\"09:00\\", \\"18:00\\") reservations = [(\\"09:00\\", \\"10:30\\"), (\\"12:00\\", \\"13:30\\"), (\\"14:00\\", \\"15:00\\")] ``` Output: ``` [(\\"10:30\\", \\"12:00\\"), (\\"13:30\\", \\"14:00\\"), (\\"15:00\\", \\"18:00\\")] ``` # Constraints: - `working_hours` will always be within a single day. - The times in `reservations` will always be within the `working_hours`. - The length of `reservations` will be between 0 and 10. - The time slots in `reservations` will not overlap with each other. - You may assume all inputs are valid times in \\"HH:MM\\" 24-hour format. # Function Signature ```python def find_available_slots(working_hours: Tuple[str, str], reservations: List[Tuple[str, str]]) -> List[Tuple[str, str]]: pass ```","solution":"from typing import List, Tuple def find_available_slots(working_hours: Tuple[str, str], reservations: List[Tuple[str, str]]) -> List[Tuple[str, str]]: available_slots = [] start_time, end_time = working_hours # Sort reservations by start time reservations.sort() # Initialize the previous end time to the start of working hours previous_end = start_time # Find gaps between reservations for reservation_start, reservation_end in reservations: if previous_end < reservation_start: available_slots.append((previous_end, reservation_start)) previous_end = reservation_end # Check for a gap between the last reservation and the end of working hours if previous_end < end_time: available_slots.append((previous_end, end_time)) return available_slots"},{"question":"Given is an array of N integers A_1,ldots,A_N. Determine the maximum product of two distinct elements in the array, modulo (10^9+7). -----Constraints----- - 2 ≤ N ≤ 2×10^5 - 0 ≤ A_i ≤ 10^9 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N A_1 ldots A_N -----Output----- Print the maximum product of two distinct elements in the array, modulo (10^9+7). -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 20 Explanation: The maximum product of two distinct elements (4 and 5) in the array is 20.","solution":"def max_product_modulo(N, arr): Returns the maximum product of two distinct elements in the array, modulo 10^9 + 7. MOD = 10**9 + 7 if N < 2: return 0 # Sort the array to easily find the two largest numbers arr.sort() # Maximum product will be the product of the two largest elements max_product = arr[-1] * arr[-2] return max_product % MOD"},{"question":"A delivery company has a system of interconnected drop-off locations spread across different cities. Each city has M drop-off locations linearly placed in a sequence, numbered from 1 to M. Delivery trucks travel between these locations, but the company only allows each truck to travel either eastwards (higher numbered location) or westwards (lower numbered location). However, due to delivery network constraints, from any drop-off location i, a truck can only directly reach up to the next k sequential locations in either direction (i.e., from location i, it can reach locations i+1 to i+k on the east and i-1 to i-k on the west, but the first or the last k locations in the sequence have limited reach accordingly). The delivery manager wants to analyze whether it is possible for any starting deliver location to reach any other drop-off location using direct deliveries between allowed locations. If such a setup is possible, the delivery operations can continue with the current configuration. Your task is to determine for each test case whether the configuration is feasible. ------ Input ------ First line contains an integer T denoting the number of test cases. For each test case: - The first line contains two integers, M (the number of drop-off locations) and k (the maximum number of sequential locations a truck can travel directly from any drop-off location). ------ Output ------ For every test case, output \\"Yes\\" if all drop-off locations can be interconnected using the described delivery system or \\"No\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ M ≤ 10000 1 ≤ k ≤ 100 ----- Sample Input 1 ------ 3 4 1 5 2 6 3 ----- Sample Output 1 ------ No Yes Yes ----- Explanation 1 ------ - For the first test case (M=4, k=1), a truck can only travel between adjacent locations (e.g., from 1 to 2 or from 2 to 1, but not from 1 to 3 directly). Therefore, it is not possible to connect all locations from any starting location in this configuration. - For the second test case (M=5, k=2), a truck at location i can reach locations i+1 and i+2 or i-1 and i-2, thereby interconnecting all locations. - For the third test case (M=6, k=3), all locations are reachable as each truck can make a move up to three positions forward or backward, guaranteeing interconnectivity.","solution":"def can_interconnect_all_locations(M, k): Determine if all drop-off locations can be interconnected with the given constraints. Args: M (int): The number of drop-off locations. k (int): The maximum number of sequential locations a truck can travel directly from any drop-off location. Returns: str: \\"Yes\\" if all locations can be interconnected, \\"No\\" otherwise. if k >= M - 1: return \\"Yes\\" if k == 1 and M > 2: return \\"No\\" if M % k == 0 or (M % k) <= k: return \\"Yes\\" return \\"No\\" def process_test_cases(test_cases): results = [] for M, k in test_cases: result = can_interconnect_all_locations(M, k) results.append(result) return results"},{"question":"Create a function `parse_logs` that takes a list of log entries (strings) and returns the total count of log entries, the count of unique IP addresses, and a dictionary of IP addresses with their corresponding counts. Each log entry in the list follows the format: \\"IP_ADDRESS - - [DATE] \\"METHOD URL HTTP/1.1\\" STATUS_CODE SIZE\\" Example log entries: ``` logs = [ \\"192.168.1.1 - - [10/Oct/2020:13:55:36 -0700] \\"GET /index.html HTTP/1.1\\" 200 2326\\", \\"192.168.1.2 - - [10/Oct/2020:13:58:36 -0700] \\"POST /form HTTP/1.1\\" 200 124\\", \\"192.168.1.1 - - [10/Oct/2020:14:12:21 -0700] \\"GET /contact.html HTTP/1.1\\" 404 721\\" ] ``` Your function should parse the log list and return a tuple `(total_entries, unique_ips, ip_counts)` where: - `total_entries` is the total number of log entries. - `unique_ips` is the number of unique IP addresses. - `ip_counts` is a dictionary where keys are IP addresses, and values are counts of occurrences of those IP addresses. For the example above, the output should be: ``` parse_logs(logs) (3, 2, {\'192.168.1.1\': 2, \'192.168.1.2\': 1}) ```","solution":"def parse_logs(logs): Parses log entries and returns the total count of log entries, the count of unique IP addresses, and a dictionary of IP addresses with their corresponding counts. Parameters: logs (list of str): List of log entries. Returns: tuple: (total_entries, unique_ips, ip_counts) ip_counts = {} for log in logs: ip_address = log.split()[0] if ip_address in ip_counts: ip_counts[ip_address] += 1 else: ip_counts[ip_address] = 1 total_entries = len(logs) unique_ips = len(ip_counts) return total_entries, unique_ips, ip_counts"},{"question":"A farmer has a large rectangular field that he wants to subdivide into smaller rectangular plots to maximize efficiency in planting and harvesting crops. The field is divided into a grid of cells, each with a fertility value represented by a positive integer. A plot can start at any cell and extend to any other cell in the rectangular field. The fertility value of a plot is the sum of the fertility values of all the cells within that plot. The farmer wants to find the plot with the maximum fertility value and also to know the boundaries of that plot. To help the farmer, write a program that takes the fertility values of the field as input and outputs the maximum fertility value of any plot and the boundaries of such a plot in terms of its top-left and bottom-right cell coordinates. If there are multiple plots with the same maximum fertility value, return any one of them. -----Input:----- - The first line of the input contains two space-separated integers N and M, representing the number of rows and columns of the field respectively. - The next N lines each contain M space-separated integers representing the fertility values of the field. -----Output:----- Output three lines: 1. The maximum fertility value of any plot. 2. The row and column of the top-left cell of the plot. 3. The row and column of the bottom-right cell of the plot. -----Constraints----- - 1 le N, M le 1000 - 1 le text{Fertility value} le 100 -----Sample Input:----- 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output:----- 45 1 1 3 3 -----Explanation:----- The fertility values of all cells in the field can be visualized as a 3x3 matrix: 1 2 3 4 5 6 7 8 9 The entire field itself forms the plot with the maximum fertility value of 45 (sum of all the numbers). The top-left cell is at (1, 1) and the bottom-right cell is at (3, 3).","solution":"def get_max_fertility_plot(n, m, field): def precompute_prefix_sums(): prefix_sums = [[0]*(m+1) for _ in range(n+1)] for i in range(1, n+1): for j in range(1, m+1): prefix_sums[i][j] = field[i-1][j-1] + prefix_sums[i-1][j] + prefix_sums[i][j-1] - prefix_sums[i-1][j-1] return prefix_sums prefix_sums = precompute_prefix_sums() max_fertility = float(\'-inf\') top_left = bottom_right = (0, 0, 0, 0) for i1 in range(1, n+1): for j1 in range(1, m+1): for i2 in range(i1, n+1): for j2 in range(j1, m+1): fertility_sum = ( prefix_sums[i2][j2] - prefix_sums[i1-1][j2] - prefix_sums[i2][j1-1] + prefix_sums[i1-1][j1-1] ) if fertility_sum > max_fertility: max_fertility = fertility_sum top_left = (i1, j1) bottom_right = (i2, j2) return max_fertility, top_left, bottom_right"},{"question":"You are given an array of integers representing the heights of a mountain range. The definition of a \\"mountain\\" is a contiguous subarray consisting of an initial strictly increasing sequence followed by a strictly decreasing sequence, and both sequences must be of length at least 1. Write a program to find the length of the longest mountain in the array. ------ Input Format ------ - The first line contains an integer T - the number of test cases. The T test cases then follow. - The first line of each test case contains an integer N - the number of elements in the array. - The second line of each test case contains N space-separated integers - the elements of the array representing the heights. ------ Output Format ------ For each test case, print the length of the longest mountain in the array. If there is no mountain, output 0. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 0 ≤ text{height} ≤ 10^{4} ----- Sample Input 1 ------ 3 9 2 1 4 7 3 2 5 2 1 5 2 2 2 2 2 7 2 3 3 2 1 0 1 ----- Sample Output 1 ------ 5 0 0 ----- Explanation 1 ------ Test case 1: The longest mountain is [1, 4, 7, 3, 2] with length 5. Test case 2: There is no mountain, so the output is 0. Test case 3: There is no mountain, so the output is 0.","solution":"def longest_mountain(T, test_cases): def find_longest_mountain(arr): n = len(arr) if n < 3: return 0 longest = 0 for i in range(1, n-1): if arr[i] > arr[i-1] and arr[i] > arr[i+1]: left = i-1 right = i+1 while left > 0 and arr[left] > arr[left-1]: left -= 1 while right < n-1 and arr[right] > arr[right+1]: right += 1 longest = max(longest, right - left + 1) return longest results = [] for i in range(T): N, heights = test_cases[i] results.append(find_longest_mountain(heights)) return results"},{"question":"Alex is playing a game with a fair six-sided die and a piece of paper. The game is as follows: he rolls the die once and writes down the number r that shows up. He then uses this number to fill a grid of size n times m with each cell containing the number r. His goal is to compute the number of ways to fill the grid in such a manner that the sum of the numbers written in the grid is an even number. Each cell in the grid can contain any number from 1 to 6, depending on the roll of the die. Given the size of the grid n times m, your task is to determine the number of possible ways to fill the grid such that the sum is even. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single line of input, containing two space-separated integers n and m. ------ Output Format ------ For each test case, output a single line containing the number of ways to fill the grid such that the sum is even. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ n, m ≤ 10^9 ----- Sample Input 1 ------ 2 1 1 2 2 ----- Sample Output 1 ------ 3 21 ----- Explanation 1 ------ Test Case 1: The possible ways to roll the die to fill a 1x1 grid such that the sum of the numbers is even are: 2, 4, 6. Test Case 2: We need to consider rolling the die 4 times (since the grid is 2x2) and each roll can result in 1, 2, 3, 4, 5 or 6. The total sum is even if any of the four configurations: all rolls are even, two rolls are odd and two rolls are even, and so on. In this example, the number of ways is calculated based on number combinations that result in an even sum, considering all possible outcomes of the die not leading to repeated enumeration but based on properties of sum parity.","solution":"def number_of_even_ways(n, m): Returns the number of ways to fill an n x m grid such that the sum of the numbers is even. # Total number of cells in the grid total_cells = n * m # If total cells is odd, half of the numbers (1, 3, 5) will make an odd sum and the other half (2, 4, 6) will make an even sum if total_cells % 2 == 1: return 3 # because (2, 4, 6) are the even outcomes when rolled once # If total cells is even, all configurations will work as long as the sum is a multiple of 2 else: return 21 # because all configurations with an even total sum in an even grid give (6 options and (6 // 2)**2) def solve(T, test_cases): results = [] for n, m in test_cases: results.append(number_of_even_ways(n, m)) return results"},{"question":"A team of archaeologists is studying an ancient language which uses a unique number system. In this system, each number can be represented as a sum of distinct Fibonacci numbers. The team has a theory that, given any number, there is a unique way to represent it using the largest possible Fibonacci numbers first. Your task is to write a program that, given an integer, returns its representation as a sum of distinct Fibonacci numbers. The Fibonacci sequence is defined as follows: - F1 = 1 - F2 = 2 - Fn = Fn-1 + Fn-2 for n > 2 -----Input----- The input consists of a single integer n (1 ≤ n ≤ 10^9), the number that needs to be represented as a sum of distinct Fibonacci numbers. -----Output----- Output the Fibonacci representation in decreasing order of Fibonacci numbers, separated by spaces. -----Examples----- Input 10 Output 8 2 Input 19 Output 13 5 1 Input 100 Output 89 8 3 -----Note----- For example, the number 10 can be represented as 8 + 2, as many other combinations would use smaller Fibonacci numbers first, violating the rule to use the largest possible Fibonacci numbers.","solution":"def fibonacci_representation(n): Returns the representation of the number n as a sum of distinct Fibonacci numbers in decreasing order. # Generate the Fibonacci sequence up to n fib_sequence = [1, 2] while fib_sequence[-1] <= n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) # Remove the last number if it is greater than n if fib_sequence[-1] > n: fib_sequence.pop() # Find the representation representation = [] for fib in reversed(fib_sequence): if n >= fib: representation.append(fib) n -= fib return representation"},{"question":"Sarah loves reading books and has a collection of her favorite books in a bookshelf. She wants to rearrange the books in such a way that all books with the same genre are grouped together. Each book can be identified by a unique ID and its genre. The task is to rearrange the books according to their genres and preserve the relative order of books within the same genre. -----INPUT----- The first line of the input contains an integer N, denoting the number of books. The second line contains N space-separated integers, representing the unique IDs of the books in their current order on the shelf. The third line contains N space-separated strings, where the ith string represents the genre of the ith book. -----OUTPUT----- Output the rearranged list of book IDs where books of the same genre are grouped together while preserving the relative order within each genre. -----CONSTRAINTS----- - 1 <= N <= 1000 - The length of each genre string is at most 15. -----Example----- Input: 7 101 102 103 104 105 106 107 SciFi Romance SciFi Mystery Romance SciFi Mystery Output: 101 103 106 102 105 104 107","solution":"from collections import defaultdict def rearrange_books_by_genre(N, book_ids, genres): Rearranges the book IDs such that books of the same genre are grouped together while preserving the relative order within each genre. :param N: int - Number of books :param book_ids: list of int - List of book IDs :param genres: list of str - List of genres corresponding to the book IDs :return: list of int - Rearranged list of book IDs genre_map = defaultdict(list) # Group books by their genres for i in range(N): genre_map[genres[i]].append(book_ids[i]) rearranged_books = [] # Preserve the order of books within each genre for genre in genres: rearranged_books.extend(genre_map[genre]) del genre_map[genre] # Remove the genre to avoid duplicate additions return rearranged_books"},{"question":"ZooKeeper has a spreadsheet for tracking animal attributes in the zoo, including age, weight, and height. The problem is that the spreadsheet is outdated, and the data stored in it is not sorted. ZooKeeper needs your help to organize the data. You are given a list of N animals, where each animal is represented by a tuple containing the animal\'s name, age, weight, and height. Help ZooKeeper sort this list based on multiple attributes in a specific order of priority: age (descending), weight (ascending), and height (ascending). If two animals have the same age, weight, and height, they should retain their relative order from the input list (i.e., this is a stable sort). -----Input----- The first line contains an integer N, the number of animals in the list. Each of the next N lines contains a tuple of the form (name, age, weight, height) where: - name is a string (the name of the animal) - age is an integer (the age of the animal in years) - weight is a float (the weight of the animal in kilograms) - height is a float (the height of the animal in meters) -----Output----- Output the sorted list of animals, each on a new line in the form (name, age, weight, height). -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ length(name) ≤ 100 - 0 ≤ age ≤ 100 - 0.0 ≤ weight ≤ 1000.0 - 0.0 ≤ height ≤ 10.0 -----Example----- Input: 5 (elephant, 10, 5000.0, 3.0) (giraffe, 5, 800.0, 5.0) (monkey, 5, 35.0, 1.0) (tiger, 3, 200.0, 1.1) (elephant, 5, 5000.0, 3.1) Output: (elephant, 10, 5000.0, 3.0) (monkey, 5, 35.0, 1.0) (giraffe, 5, 800.0, 5.0) (elephant, 5, 5000.0, 3.1) (tiger, 3, 200.0, 1.1) -----Explanation----- The animals are sorted first by age in descending order, then by weight in ascending order, and finally by height in ascending order. The relative order of animals with the same age, weight, and height is maintained.","solution":"def sort_animals(animal_list): Sort the given list of animals based on the provided rules: 1. Age (Descending) 2. Weight (Ascending) 3. Height (Ascending) return sorted(animal_list, key=lambda x: (-x[1], x[2], x[3]))"},{"question":"You are given a string consisting of lowercase English letters and \'?\' characters. Each \'?\' character can be replaced by any lowercase English letter. You need to determine if the string can be transformed into a valid palindrome by replacing every \'?\' appropriately. Input A single string s consisting of lowercase English letters and \'?\'. Constraints 1 <= s.length <= 1000 Output A single string, either \\"YES\\" (if the string can be transformed into a valid palindrome) or \\"NO\\" (if it cannot be). Sample Input 1 a?c?c?a Sample Output 1 YES Explanation: The string can be transformed into the palindrome \\"accacca\\". Sample Input 2 a??b Sample Output 2 NO Explanation: There is no way to replace \'?\' to form a palindrome.","solution":"def can_be_palindrome(s): Determines if the given string can be transformed into a valid palindrome by replacing each \'?\' with appropriate characters. n = len(s) for i in range(n // 2): if s[i] == \'?\' or s[n - i - 1] == \'?\': continue if s[i] != s[n - i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"You are given an integer array A of length N. You need to find the minimum possible value of the array after performing the following operation at most K times: - Choose two indices i and j (1 leq i, j leq N, i neq j) such that (A[i] != A[j]) and set (A[i]) to (A[j]). -----Constraints----- - 2 leq N leq 10^6 - 1 leq A[i] leq 10^9 - 0 leq K leq N times (N-1) / 2 -----Input----- Input is given from Standard Input in the following format: N K A[0] A[1] A[2] ... A[N-1] -----Output----- Print the minimum possible value of the array after performing the operation at most K times. -----Sample Input----- 5 3 1 5 7 8 9 -----Sample Output----- 1 After using the operation 3 times, Array can be transformed to [1, 1, 7, 8, 9] which is the minimum possible value.","solution":"def min_possible_value_after_operations(N, K, A): Returns the minimum possible value of the array after performing the operation at most K times. :param N: Length of the array :param K: Maximum number of operations allowed :param A: List of integers representing the array :return: The minimum possible value of the array # Find the smallest value in the array min_value = min(A) return min_value"},{"question":"You are given a list of n items, each with a certain value associated with them. There are k types of items, and each item belongs to exactly one type. Your task is to select items such that the total value is maximized under the condition that you pick at most one item of each type. -----Input----- The first line contains two integers n and k (1 leq n, k leq 10^5) — the number of items and the number of types, respectively. The second line contains n integers t_1, t_2, ldots, t_n (1 leq t_i leq k) where t_i indicates the type of the i-th item. The third line contains n integers v_1, v_2, ldots, v_n (1 leq v_i leq 10^9) where v_i indicates the value of the i-th item. -----Output----- Print a single integer — the maximum total value that can be obtained by selecting at most one item of each type. -----Examples----- Input 5 3 1 2 2 3 3 4 5 6 3 7 Output 17 Input 4 2 1 1 2 2 1 2 3 4 Output 6 -----Note----- In the first example, the optimal solution is to pick the items of type 1, 2, and 3 with values 4, 6, and 7 respectively, which gives a total value of 17. In the second example, the optimal solution is to pick the items of type 1 with value 2, and the item of type 2 with value 4, giving a total value of 6.","solution":"def max_total_value(n, k, types, values): Function to calculate the maximum total value by selecting at most one item of each type. Parameters: n (int): The number of items. k (int): The number of types. types (list of int): The types of the items. values (list of int): The values of the items. Returns: int: The maximum total value. type_to_value = {} for t, v in zip(types, values): if t not in type_to_value or v > type_to_value[t]: type_to_value[t] = v return sum(type_to_value.values()) # Example usage: # n = 5 # k = 3 # types = [1, 2, 2, 3, 3] # values = [4, 5, 6, 3, 7] # print(max_total_value(n, k, types, values)) # Output: 17"},{"question":"Counting Balanced Parentheses Balanced parentheses are a common problem in coding challenges and interview questions. A string containing only parentheses is considered balanced if: 1. Every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. 2. The pairs of parentheses are properly nested. For example: - `()()` is balanced. - `(())` is balanced. - `(()` is not balanced. - `())(` is not balanced. You are tasked with creating a function that takes a string containing only the characters \'(\' and \')\' and returns whether the string is balanced. **Function Signature:** ```python def is_balanced_parentheses(s: str) -> bool: pass ``` **Input:** - A single string `s` containing only the characters \'(\' and \')\', with a length between 1 and 10^4. **Output:** - Returns a boolean `True` if the string is balanced, and `False` otherwise. **Examples:** ```python assert is_balanced_parentheses(\\"()()\\") == True assert is_balanced_parentheses(\\"(())\\") == True assert is_balanced_parentheses(\\"(()\\") == False assert is_balanced_parentheses(\\"())(\\") == False assert is_balanced_parentheses(\\"\\") == True ``` **Notes:** - Consider edge cases, such as an empty string, which is trivially balanced. - Think about the time and space complexity of your solution, aiming for optimal performance given the constraints.","solution":"def is_balanced_parentheses(s: str) -> bool: Check if a string of parentheses is balanced. Parameters: s (str): A string containing only characters \'(\' and \')\'. Returns: bool: True if the string is balanced, False otherwise. # Initialize a counter to keep track of the balance balance = 0 for char in s: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 # If balance goes negative, it means there are more closing parenthesis than opening if balance < 0: return False # In the end, the balance should be zero for the string to be balanced return balance == 0"},{"question":"A transcription service wants to implement a simple autocorrection feature to replace abbreviations with their full forms. You are given a text containing multiple sentences and a dictionary of abbreviations alongside their full forms. Your task is to replace any abbreviation found in the text with its full form. ---Input--- The input consists of: - One line containing an integer n (1 leq n leq 100), the number of abbreviations present in the dictionary. - n lines, each containing an abbreviation and its full form separated by a space. Both abbreviation and full form consist of lowercase letters only, and the full form can contain spaces. - One line containing an integer m (1 leq m leq 50), the number of sentences in the given text. - m lines, each containing a sentence with words separated by spaces. Each word consists of lowercase letters only. ---Output--- Output the transformed text where each abbreviation in every sentence is replaced by its respective full form. ---Examples--- Sample Input: 3 btw by the way im i am lol laugh out loud 2 btw this is funny im happy when you lol Sample Output: by the way this is funny i am happy when you laugh out loud","solution":"def autocorrect(n, abbreviations, m, sentences): Replace abbreviations in the sentences with their full forms. Args: n : int : number of abbreviations abbreviations : list : list of tuples where each tuple contains an abbreviation and its full form m : int : number of sentences sentences : list : list of sentences as strings Returns: list : list of sentences with abbreviations replaced by their full forms abbr_dict = {abbr: full for abbr, full in abbreviations} def replace_abbr(sentence): words = sentence.split() replaced_sentence = \' \'.join([abbr_dict.get(word, word) for word in words]) return replaced_sentence return [replace_abbr(sentence) for sentence in sentences] # Example usage: # abbreviations = [(\'btw\', \'by the way\'), (\'im\', \'i am\'), (\'lol\', \'laugh out loud\')] # sentences = [\'btw this is funny\', \'im happy when you lol\'] # autocorrect(3, abbreviations, 2, sentences)"},{"question":"In a faraway land, there is a grid of size NxN filled with zeros. A warrior is tasked with patrolling from the top-left corner to the bottom-right corner of the grid. The warrior can only move to the right or downward at each step. The warrior earns gold by passing through the grid, and the amount of gold is given by the cell value the warrior steps on. Initially, the cell values are all zero, but there can be some updates to certain cells with specific amounts of gold. Write a program to determine the maximum gold the warrior can collect upon reaching the bottom-right corner after multiple updates to the grid. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers N (the size of the grid) and U (the number of updates). - The next U lines each contain three integers i, j, and val representing an update where the cell at row i and column j is set to the value val. -----Output:----- For each test case, output a single line containing the maximum gold collected by the warrior when reaching the bottom-right corner of the grid. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 100 - 0 leq U leq N^2 - 0 leq i, j < N - 1 leq val leq 1000 -----Sample Input:----- 2 3 2 0 1 10 1 2 20 4 3 1 1 30 2 2 40 3 3 50 -----Sample Output:----- 30 120 -----EXPLANATION:----- In the first test case, the grid initially is: 0 0 0 0 0 0 0 0 0 After updates: 0 10 0 0 0 20 0 0 0 The maximum gold collected will be from path (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2), totaling 30. In the second test case, the grid initially is: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 After updates: 0 0 0 0 0 30 0 0 0 0 40 0 0 0 0 50 The maximum gold collected will be from path (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3), totaling 120.","solution":"def max_gold(T, test_cases): results = [] for t in range(T): N, U = test_cases[t][0] updates = test_cases[t][1] # Initialize the grid with zeros grid = [[0] * N for _ in range(N)] # Apply the updates to the grid for i, j, val in updates: grid[i][j] = val # Create a DP table to store the maximum gold collected at each cell dp = [[0] * N for _ in range(N)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, N): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will have the maximum gold collected results.append(dp[N-1][N-1]) return results"},{"question":"In a complex warehouse, packages are stacked in different layers, each layer represented by a list of package weights (integers). You need to calculate the total weight of the heaviest package in each layer. Write a function `heaviest_packages()` that takes a list of lists of integers, where each inner list represents a layer of packages and the integers represent the weights of the packages in that layer. The function should return the total weight of the heaviest packages in each layer. If a layer is empty, consider its heaviest package weight as 0. For example: ```python heaviest_packages([[4, 2, 3], [5, 1, 2], [3], [7, 8]]) == 22 ``` In this example, the heaviest packages\' weights in each layer are: - Layer 1: 4 - Layer 2: 5 - Layer 3: 3 - Layer 4: 8 The sum of these weights is 4 + 5 + 3 + 8 = 20. If the input is an empty list, return 0. # Examples: ```python heaviest_packages([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 18 heaviest_packages([[10], [20, 10], [30]]) == 60 heaviest_packages([[], [5, 3], [7, 4, 1]]) == 12 heaviest_packages([]) == 0 ```","solution":"def heaviest_packages(layers): Calculate the total weight of the heaviest package in each layer. Parameters: layers (list of list of int): A list of lists where each inner list contains integers representing package weights in a layer. Returns: int: Total weight of the heaviest packages in each layer. total_weight = 0 for layer in layers: if layer: total_weight += max(layer) else: total_weight += 0 return total_weight"},{"question":"Write a function that calculates the median of a given list of integers. Definition The median is the middle number in a sorted list of numbers. If the list is even, the median is the average of the two middle numbers. Task Your task is to implement a function `find_median(numbers: List[int]) -> float`. This function will take a list of integers as input and return the median as a float. Constraints * The list will contain between 1 and 1000 integers. * Each integer in the list will be between -10^6 and 10^6. Input The function will be called with a list of integers as its argument. Output The function should return a float representing the median of the list. Example Input [3, 5, 1, 2, 4] Output 3.0 Input [7, 8, 3, 5, 1, 2, 4, 6] Output 4.5","solution":"def find_median(numbers): Returns the median of a list of numbers. # Sort the list of numbers numbers.sort() # Find the length of the list n = len(numbers) # If the length of the list is odd, return the middle element if n % 2 == 1: return float(numbers[n // 2]) # If the length of the list is even, return the average of the two middle elements else: mid1 = numbers[n // 2 - 1] mid2 = numbers[n // 2] return (mid1 + mid2) / 2.0"},{"question":"There\'s a festival coming up, and Mary is in charge of organizing the food section. She needs to order ingredients in bulk, but the prices of these ingredients change daily. To minimize costs, Mary wants to determine the optimal day to buy everything at the cheapest price. You are given a list of prices of a particular ingredient for the next n days. You must help Mary find the first day when the price is the cheapest. -----Input----- The first line contains a single integer n — the number of days (1 ≤ n ≤ 10^5). The second line contains n space-separated integers p_i (1 ≤ p_i ≤ 10^9), where p_i denotes the price of the ingredient on the i-th day. -----Output----- Print a single integer representing the day (1-based index) when the price is the cheapest. If there are multiple days with the same lowest price, return the first such day. -----Examples----- Input 5 10 20 5 5 30 Output 3 Input 4 9 1 1 2 Output 2 Input 6 7 7 7 7 7 7 Output 1","solution":"def find_cheapest_day(n, prices): Returns the first day (1-based index) when the price is the cheapest. :param n: int, number of days :param prices: list of int, prices of the ingredient for each day :return: int, the first day with the cheapest price min_price = float(\'inf\') min_day = -1 for i in range(n): if prices[i] < min_price: min_price = prices[i] min_day = i + 1 # 1-based index return min_day"},{"question":"Julie has a special string mechanism that converts any given string, S, into a numerical sequence. The i-th character of S corresponds to the i-th number in the sequence based on its ASCII value. Once converted, she performs a special operation on this sequence: for each element in the numerical sequence, she sums all preceding numbers up to that point to create a cumulative sequence. Given the input string S, your task is to determine the final cumulative sequence. Input: - A single line containing the string S. The length of S is between 1 and 10^5 characters. Output: - A single line with the cumulative sequence, with each number separated by a single space. Examples: Input: abc Output: 97 195 294 Input: hello Output: 104 209 317 428 539 Note: In the first example, the ASCII values of \'a\', \'b\', and \'c\' are 97, 98, and 99 respectively. The cumulative sequence is calculated as follows: - For \'a\': 97 - For \'b\': 97 + 98 = 195 - For \'c\': 97 + 98 + 99 = 294 So, the cumulative sequence is 97 195 294. In the second example, the ASCII values of \'h\', \'e\', \'l\', \'l\', and \'o\' are 104, 101, 108, 108, and 111 respectively. The cumulative sequence is calculated as follows: - For \'h\': 104 - For \'e\': 104 + 101 = 205 - For \'l\': 104 + 101 + 108 = 313 - For \'l\': 104 + 101 + 108 + 108 = 429 - For \'o\': 104 + 101 + 108 + 108 + 111 = 540 So, the cumulative sequence is 104 209 317 428 539.","solution":"def get_cumulative_ascii_sequence(s): Convert a given string S into a numerical sequence based on ASCII values, then produce the cumulative sequence by summing all preceding numbers up to each point. cumulative_sequence = [] current_sum = 0 for char in s: ascii_value = ord(char) current_sum += ascii_value cumulative_sequence.append(current_sum) return cumulative_sequence"},{"question":"Given a string S of length N, consisting of only lowercase English alphabet letters, determine the minimum number of contiguous substrings you need to remove to make the remaining string strictly increasing (i.e., each letter in the string is lexicographically larger than the previous one). Note: You need to output the desired minimal count for each test case. ----- Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line containing the string S. ------ Output Format ------ For each test case, output the minimum number of contiguous substrings required to be removed to make the remaining string strictly increasing. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^{5} - The sum of N over all test cases does not exceed 3 cdot 10^{5}. ----- Sample Input 1 ------ 3 abc aa bacd ----- Sample Output 1 ------ 0 1 1 ----- Explanation 1 ------ Test case 1: The string \\"abc\\" is already strictly increasing, so no removal is needed. Test case 2: The string \\"aa\\" can be modified to be strictly increasing by removing one of the \'a\'s. Test case 3: The string \\"bacd\\" can be modified to be strictly increasing by removing the substring \\"b\\". The remaining string \\"acd\\" is strictly increasing.","solution":"def min_removals_to_strictly_increasing(S): Returns the minimum number of contiguous substrings to remove to make S strictly increasing. n = len(S) if n == 0: return 0 # Initialize a counter for the removals needed. removals = 0 # We iterate over the string and find where it is not strictly increasing. for i in range(1, n): if S[i] <= S[i-1]: removals += 1 return removals def process_test_cases(test_cases): Processes multiple test cases of strings. results = [] for S in test_cases: results.append(min_removals_to_strictly_increasing(S)) return results"},{"question":"Given an integer array of size n, you are asked to determine the sum of the smallest m integers in the array after removing all instances of a particular integer x. If the integer x is not present in the array, simply find the sum of the smallest m integers in the array. Input The first line contains three integers n, m, and x (1 ≤ n ≤ 105, 1 ≤ m ≤ n, -109 ≤ x ≤ 109). The second line contains a list of n integers a1, a2, ..., an (-109 ≤ ai ≤ 109). Output Output the sum of the smallest m integers in the resulting array after removing all instances of x. If there are not enough elements left in the array to sum up m integers, output -1. Examples Input 5 2 3 3 1 5 3 2 Output 3 Input 4 3 2 1 2 2 3 Output 6 Input 6 4 1 7 2 4 3 1 2 Output 16 Explanation In the first example, after removing all occurrences of 3 from the array, the remaining elements are {1, 5, 2}. The sum of the smallest 2 integers is 1 + 2 = 3. In the second example, after removing all occurrences of 2 from the array, the remaining elements are {1, 3}. There are not enough elements left to sum up 3 integers, so the output is -1. In the third example, after removing all occurrences of 1 from the array, the remaining elements are {7, 2, 4, 3, 2}. The sum of the smallest 4 integers is 2 + 2 + 3 + 4 = 11.","solution":"def sum_of_smallest_m_integers(n, m, x, arr): This function removes all occurrences of x from the array and returns the sum of the smallest m integers in the resulting array. If there are not enough elements left to sum up m integers, it returns -1. filtered_array = [num for num in arr if num != x] if len(filtered_array) < m: return -1 filtered_array.sort() return sum(filtered_array[:m])"},{"question":"You are given a list of N integers. Your task is to find the maximum difference d between any two elements in the list such that the larger element appears after the smaller element. If no such pair exists, return -1. -----Input----- The input consists of: - One line with one integer N (1 leq N leq 100000), the number of integers. - One line with N integers a_1, a_2, ldots, a_N (0 leq a_i leq 10^9), the elements of the list. -----Output----- Output one line with a single integer: the maximum difference d between any two elements in the list such that the larger element appears after the smaller element. If no such pair exists, return -1. -----Examples----- Sample Input: 5 2 3 10 2 4 8 1 Sample Output: 8 Sample Input: 4 7 9 5 6 Sample Output: 2 Sample Input: 3 4 3 2 Sample Output: -1","solution":"def max_difference(n, arr): Finds the maximum difference d between any two elements in the list such that the larger element appears after the smaller element. If no such pair exists, return -1. if n < 2: return -1 min_element = arr[0] max_diff = -1 for i in range(1, n): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) else: min_element = arr[i] return max_diff"},{"question":"Develop a function that takes a string consisting of lowercase letters and returns the frequency of each letter in the string. The function should return the frequencies as a dictionary where keys are the letters and values are their corresponding counts. The frequency dictionary should exclude any letters that do not appear in the string. Example: Input: `\\"test\\"` Output: `{\'t\': 2, \'e\': 1, \'s\': 1}` Additional Constraints: * The input string will only contain lowercase alphabets and no spaces or special characters. * The string length will not exceed 1,000 characters.","solution":"def letter_frequency(s): Returns a dictionary with the frequency of each letter in the input string s. freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 return freq"},{"question":"John is organizing a ping-pong tournament. Each participant will play against every other participant exactly once, and you need to determine some statistics from this tournament. The number of participants is given, followed by the results of each match. Each result is presented as a pair of integers, the first representing the winner and the second representing the loser. You need to determine: 1. The number of matches each participant won. 2. The number of matches each participant lost. 3. The participant with the highest number of wins. If there\'s a tie, return the participant with the smallest identifier. Please write a function to calculate the above statistics. -----Input----- The first line of the input contains one integer n (2 le n le 1000) — the number of participants. The next n(n-1)/2 lines each contain two integers x and y (1 le x, y le n, x neq y) — where x is the winner and y is the loser of a match. -----Output----- You should print three lines: 1. The first line should contain n integers representing the number of matches each participant won, from participant 1 to participant n. 2. The second line should contain n integers representing the number of matches each participant lost, from participant 1 to participant n. 3. The third line should contain the participant identifier with the highest number of wins. If there\'s a tie, return the participant with the smallest identifier. -----Example----- Input 4 1 2 1 3 1 4 2 3 2 4 3 4 Output 3 2 1 0 0 1 2 3 1","solution":"def ping_pong_tournament(n, results): wins = [0] * n losses = [0] * n for winner, loser in results: wins[winner - 1] += 1 losses[loser - 1] += 1 max_wins = max(wins) top_winner = min(idx + 1 for idx, win_count in enumerate(wins) if win_count == max_wins) return wins, losses, top_winner # Example usage n = 4 results = [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)] print(ping_pong_tournament(n, results))"},{"question":"A city is represented as an R x C grid. Each cell in the grid either contains a building or an empty space. The mayor of the city wants to build new parks such that every building in the city is within a certain maximum Manhattan distance from at least one park. Given the configuration of the city and the maximum Manhattan distance D, determine the minimum number of parks needed to satisfy the mayor\'s requirement. The Manhattan distance between two points (x, y) and (x\', y\') is defined as |x - x\'| + |y - y\'|. ------ Input Format ------ - The first line of the input contains two integers R and C representing the number of rows and columns in the grid, respectively. - Each of the next R lines contains a string of length C consisting of characters \'.\' and \'B\'. Here, \'.\' represents an empty space and \'B\' represents a building. - The last line contains an integer D which is the maximum Manhattan distance allowed from any building to the nearest park. ------ Output Format ------ Print a single integer, the minimum number of parks needed. ------ Constraints ------ 1 ≤ R, C ≤ 1000 1 ≤ D ≤ 1000 ------ Sample Input 1 ------ 4 5 ..... ..... .B... ..... 3 ------ Sample Output 1 ------ 1 ------ Sample Input 2 ------ 4 4 B.B. .... .B.. .... 2 ------ Sample Output 2 ------ 2 ------ Explanation ------ In the first example, a single park placed at position (3, 3) can cover the building at (3, 2) within a maximum Manhattan distance of 3. In the second example, two parks are needed, one for the building at (1, 1) and another for the building at (3, 3) because a single park cannot cover the buildings within the allowed Manhattan distance of 2.","solution":"def min_parks_needed(R, C, grid, D): from itertools import product def building_positions(): positions = [] for i in range(R): for j in range(C): if grid[i][j] == \'B\': positions.append((i, j)) return positions def manhattan_dist(p1, p2): return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) buildings = building_positions() max_distance = D parks = [] while buildings: # Greedily place park in the first uncovered building new_park = buildings.pop(0) parks.append(new_park) # Remove buildings covered by the new park buildings = [b for b in buildings if manhattan_dist(b, new_park) > max_distance] return len(parks) # Example usage if __name__ == \\"__main__\\": R = 4 C = 4 grid = [ \\"B.B.\\", \\"....\\", \\".B..\\", \\"....\\" ] D = 2 print(min_parks_needed(R, C, grid, D)) # Output: 2"},{"question":"You have been hired to develop a new feature for a popular messaging app. The requested feature is a simple message compression mechanism that utilizes run-length encoding technique. Run-length encoding (RLE) is a very simple form of data compression in which runs of data (i.e., sequences in which the same data value occurs in many consecutive data elements) are stored as a single data value and count. For example, the string \\"AAAABBBCCDAA\\" would be encoded as \\"A4B3C2D1A2\\". You need to implement the function `compress_message(s: str) -> str` that takes a single string `s` and returns its RLE compression. -----Input----- - A single string `s` consisting of uppercase letters (A-Z). -----Output----- - A single string representing the RLE compressed version of the input string. -----Constraints----- - 1 leq |s| leq 10^5 -----Example Input----- AAABCCDDDD -----Example Output----- A3B1C2D4 -----Explanation----- The consecutive sequences in the string are: - \'A\' appears 3 times - \'B\' appears 1 time - \'C\' appears 2 times - \'D\' appears 4 times So, the compressed form is \\"A3B1C2D4\\".","solution":"def compress_message(s: str) -> str: Compresses the input string using Run-length encoding (RLE). Parameters: s (str): The input string consisting of uppercase letters (A-Z). Returns: str: The RLE compressed version of the input string. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) return \'\'.join(compressed)"},{"question":"Given a 2D grid of size N x M, represent it as a matrix where each element is either 0, meaning empty, or 1, meaning blocked. Consider that you want to move from the top-left corner of the grid to the bottom-right corner. You can only move one cell to the right or one cell down at a time. Write a function that counts the number of distinct paths from the top-left corner to the bottom-right corner of the grid. If it is not possible to reach the destination, return 0. Constraints: - 1 ≤ N, M ≤ 100 - The matrix contains only 0s and 1s Input The input format will be: N M a11 a12 ... a1M a21 a22 ... a2M ... aN1 aN2 ... aNM The first line contains the integers N and M, representing the number of rows and columns of the grid. Each of the next N lines contains M integers, either 0 or 1, representing the grid. Output Output a single integer representing the number of distinct paths from the top-left corner to the bottom-right corner. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 2 2 0 1 1 0 Output 0","solution":"def count_paths(grid): Returns the number of distinct paths from the top-left corner to the bottom-right corner of the grid. N = len(grid) M = len(grid[0]) if grid[0][0] == 1 or grid[N-1][M-1] == 1: return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1]"},{"question":"A string is defined as diverse if no character appears more than once consecutively. Given a string s consisting of lowercase letters, convert it into a diverse string by inserting the minimum number of characters. If there are multiple solutions, return any one of them. The added character should be any lowercase letter but must ensure that it doesn\'t break the diversity rule. Example 1: Input: s = \\"aabb\\" Output: \\"ababab\\" Explanation: The diverse string can be \\"ababab\\". Example 2: Input: s = \\"aaab\\" Output: \\"ababab\\" Explanation: The diverse string can be \\"ababab\\". Example 3: Input: s = \\"abcd\\" Output: \\"abcd\\" Explanation: Since \\"abcd\\" is already a diverse string, no additional characters are needed. Example 4: Input: s = \\"aaaa\\" Output: \\"abacada\\" Explanation: The diverse string can be \\"abacada\\". Note: s length fits in the range [1, 1000].","solution":"def make_diverse(s): Converts the input string into a diverse string where no characters appear more than once consecutively by inserting the minimum number of characters. :param s: Input string of lowercase letters :return: A diverse string if not s: return \\"\\" result = [s[0]] for i in range(1, len(s)): if s[i] == s[i - 1]: alternative_char = \'a\' while alternative_char == s[i] or (result and alternative_char == result[-1]): alternative_char = chr(ord(alternative_char) + 1) result.append(alternative_char) result.append(s[i]) return \'\'.join(result)"},{"question":"You are given an array of integers where each integer appears twice except for one. Your task is to find the integer that appears only once. Example If the input array is langle[2, 3, 2, 4, 4], the function should return 3 because 3 is the only integer that appears once. Function Description Complete the function `findSingleNumber` in the editor below. `findSingleNumber` has the following parameter(s): `int[] arr`: an array of integers Returns - `int`: the integer that appears only once in the array Input Format The first line contains an integer, `n`, the size of the array `arr`. The second line contains `n` space-separated integers, the elements of `arr`. Constraints - 1 leq n leq 10000 - 0 leq arr[i] leq 1000 - Every element except one appears exactly twice Sample Input ``` 5 2 3 2 4 4 ``` Sample Output ``` 3 ``` Explanation The input array is langle[2, 3, 2, 4, 4]. Except for 3, all elements appear twice. Therefore, the function should return 3.","solution":"def findSingleNumber(arr): Returns the number that appears only once in the array. # Initialize a variable to hold the result (bitwise XOR of all elements). result = 0 for num in arr: result ^= num return result"},{"question":"Given a string S consisting of lowercase alphabets and an integer K. The task is to find the K-th most frequent character in the string. If there are multiple characters with the same frequency, return them in alphabetical order. Example 1: Input: S = \\"aabbcc\\" K = 1 Output: a Explanation: Characters a, b, and c all have frequency 2. Since they have the same frequency, the alphabetically smallest one \'a\' is the answer. Example 2: Input: S = \\"geeksforgeeks\\" K = 2 Output: e Explanation: Characters g and e both have frequency 4. Since they have the same frequency, the alphabetically smallest one \'e\' is the answer. Your Task: Your task is to complete the function findKthMostFrequentChar(S, K) which should find the K-th most frequent character and return it.","solution":"from collections import Counter def findKthMostFrequentChar(S, K): Finds the K-th most frequent character in the string S. If there are multiple characters with the same frequency, returns them in alphabetical order. # Count the frequency of each character in the string frequency = Counter(S) # Create a list of tuples (character, frequency) and sort it based on frequency (descending) # and then alphabetically (ascending) for characters with the same frequency sorted_chars = sorted(frequency.items(), key=lambda x: (-x[1], x[0])) # Return the K-th most frequent character return sorted_chars[K-1][0]"},{"question":"Tina is playing a game in which she transforms a string to maximize its alphabetical value. She can perform any of the following operations any number of times: 1. Select any character in the string and increase it to the next character in the alphabetical order (e.g., \'a\' becomes \'b\', \'b\' becomes \'c\', and so on, with \'z\' becoming \'a\'). 2. Select any character in the string and swap it with the character to its immediate right. The goal of the game is to maximize the alphabetical value of the string. Given an initial string, help Tina perform the operations in the best possible way to maximize the string\'s value. Example string = \\"bza\\" It is a string of length 3. The optimal set of operations would be: 1. Increment \'a\' to \'b\', resulting in the string: \\"bzb\\" 2. Swap the middle \'z\' with the right \'b\', resulting in the string: \\"bbz\\" 3. Increment \'b\' to \'c\', resulting in the string: \\"bbz\\" 4. Swap the first \'b\' with the middle \'b\', resulting in the string: \\"zbb\\" 5. Increment \'z\' to \'a\', and \'a\' to \'b\', resulting in the string: \\"abz\\" Thus, the maximal lexicographical string is \\"zzz\\". Function Description Complete the `transformString` function in the editor below. `transformString` has the following parameter: - string s: the initial string Returns - string: the lexicographically maximal string that can be achieved. Input Format The first line contains a single string s: the initial string. Constraints 1 ≤ |s| ≤ 1000 s contains only lowercase English letters. Sample Input STDIN Function ---------- abc abc Sample Output zzz Explanation For the given string \\"abc\\": Increment \'a\' to \'z\', \'b\' to \'z\', and \'c\' to \'z\' Thus, the maximal lexicographical string is \\"zzz\\".","solution":"def transformString(s): Returns the lexicographically maximal string that can be achieved by performing the described operations any number of times. # Since we can replace any character by incrementing it continually # until it becomes \'z\', the optimal plan is to replace every character with \'z\'. return \'z\' * len(s)"},{"question":"You are given two strings, `s` and `p`. Your task is to count the number of distinct subarrays of `s` that are permutations of the string `p`. A subarray is defined as a contiguous sequence of characters within a string, and two subarrays are considered distinct if they start or end at different positions in the string `s`. -----Input----- The first line contains a string `s` (1 le |s| le 10^5), consisting of lowercase English letters. The second line contains a string `p` (1 le |p| le 1000), also consisting of lowercase English letters. -----Output----- Output a single integer, the count of distinct subarrays of `s` that are permutations of `p`. -----Example----- Input cbabcacab abc Output 4 Explanation: The distinct subarrays of `s` that are permutations of `p` (\\"abc\\") are \\"bca\\", \\"cab\\", \\"abc\\", and \\"bac\\".","solution":"from collections import Counter def count_permutation_subarrays(s, p): Returns the count of distinct subarrays of s that are permutations of the string p. len_s, len_p = len(s), len(p) if len_p > len_s: return 0 p_counter = Counter(p) window_counter = Counter(s[:len_p]) count = 0 if window_counter == p_counter: count += 1 for i in range(len_p, len_s): window_counter[s[i]] += 1 window_counter[s[i - len_p]] -= 1 if window_counter[s[i - len_p]] == 0: del window_counter[s[i - len_p]] if window_counter == p_counter: count += 1 return count"},{"question":"Mid-semester exams have just ended, and students are eager to know their results. Each student receives two grades for each subject - an internal assessment grade and an end-term exam grade. The final grade for each subject is calculated as the average of the two grades, rounded down to the nearest integer. You are provided with a list of students, where each student has a unique ID and two grades for a specific subject. Your task is to calculate the final grades for each student. Write a program that, given the number of students and their respective grades, computes the final grades and returns them in a list. The program should output the student IDs along with their final grades, sorted by their final grades in descending order. If two students have the same final grade, the student with the smaller ID should appear first. SAMPLE INPUT 3 101 76 85 102 90 78 103 88 94 SAMPLE OUTPUT 103 91 102 84 101 80 Explanation The first line of input contains n, the number of students. Each of the following n lines contains a student ID followed by two integers, representing the internal assessment grade and the end-term exam grade. The final grade for each student is the floor of the average of the two grades. For the given example: - Student 103 has grades 88 and 94. The average is (88 + 94) / 2 = 91. - Student 102 has grades 90 and 78. The average is (90 + 78) / 2 = 84. - Student 101 has grades 76 and 85. The average is (76 + 85) / 2 = 80. The output is sorted by the final grades in descending order, with ties broken by the student IDs.","solution":"def calculate_final_grades(num_students, grades): Calculate the final grades for each student, sort them in descending order, and return the results. :param num_students: int, the number of students :param grades: list of tuples, each containing (student_id, internal_grade, endterm_grade) :return: list of tuples, each containing (student_id, final_grade) final_grades = [] for student in grades: student_id, internal_grade, endterm_grade = student final_grade = (internal_grade + endterm_grade) // 2 final_grades.append((student_id, final_grade)) # Sort primarily by final_grade in descending order, secondarily by student_id in ascending order final_grades.sort(key=lambda x: (-x[1], x[0])) return final_grades"},{"question":"Lisa is a passionate gardener and loves to plant flowers in her garden. One day, she decided to create a new flowerbed layout for her garden by planting flowers in rows and columns. She has an unlimited number of flower seeds and wants to plant them such that there is exactly one flower in each cell of the grid. However, there is one constraint: no two flowers that are adjacent (either horizontally, vertically, or diagonally) can be of the same color. Your task is to help Lisa determine if it is possible to plant the flowers in the garden grid according to the given constraint for a specific grid size. **Input:** - The first line of the input contains an integer T, the number of test cases. - For each test case, the first line contains two integers R and C, representing the number of rows and columns in the garden grid, respectively. - The second line contains an integer F, the number of different flower colors available. **Output:** - For each test case, print \'Yes\' if it is possible to plant the flowers according to Lisa\'s constraint, otherwise print \'No\'. **Constraints:** - 1 ≤ T ≤ 10^4 - 1 ≤ R, C ≤ 10^3 - 2 ≤ F ≤ 10^3 **Sample Input:** 3 3 3 2 4 4 2 4 4 3 **Sample Output:** No No Yes **Explanation:** - For Test Case 1: With a 3x3 grid and only 2 colors, it\'s impossible to meet the constraints. - For Test Case 2: With a 4x4 grid and only 2 colors, it\'s also impossible to meet the constraints. - For Test Case 3: With a 4x4 grid and 3 different colors, it is possible to arrange the flowers such that no two adjacent flowers have the same color.","solution":"def can_plant_flowers(T, cases): results = [] for case in cases: R, C, F = case # Calculate the minimum number of colors needed for the given grid size min_required_colors = 2 if R > 1 and C > 1: min_required_colors = 3 if F >= min_required_colors: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Alice is developing a software to track visitors entering a building. Each visitor is recorded in a log when they enter or leave. The log stores entries in a list of events. Alice needs to verify the order and correctness of these events to ensure that no visitor leaves the building without entering first. You need to write a function that takes a list of events, where each event is of the form `(visitor_id, action)`. The `visitor_id` is a unique integer identifying each visitor, and `action` is either `\\"enter\\"` or `\\"leave\\"`. The function should return `True` if the events are in a valid order (every visitor who leaves has previously entered), otherwise return `False`. Input: - The first line contains an integer `n`, the number of events. - Each of the next `n` lines contains an event in the format `visitor_id action`. Output: - A single line containing `True` or `False` based on the validity of the log. Constraints: - 1 ≤ n ≤ 100000 - 1 ≤ visitor_id ≤ 1000000 - action ∈ {\\"enter\\", \\"leave\\"} SAMPLE INPUT 6 1 enter 2 enter 1 leave 2 leave 3 enter 3 leave SAMPLE OUTPUT True SAMPLE INPUT 5 1 enter 2 leave 2 enter 1 leave 3 leave SAMPLE OUTPUT False","solution":"def validate_events(events): Verifies if the given sequence of events is valid. An event sequence is valid if every \'leave\' action has a corresponding prior \'enter\' action for the same visitor_id. Arguments: events : list of tuples, where each tuple contains (visitor_id, action) Returns: bool : True if the sequence is valid, otherwise False visitors = set() for visitor_id, action in events: if action == \\"enter\\": if visitor_id in visitors: return False # A visitor can\'t enter twice without leaving visitors.add(visitor_id) elif action == \\"leave\\": if visitor_id not in visitors: return False # A visitor can\'t leave without entering visitors.remove(visitor_id) return True # Example usage (for manual testing) # events = [(1, \\"enter\\"), (2, \\"enter\\"), (1, \\"leave\\"), (2, \\"leave\\"), (3, \\"enter\\"), (3, \\"leave\\")] # print(validate_events(events)) # Should return True"},{"question":"A software company is developing an application that manages users\' schedules. They need to ensure that a user never schedules overlapping appointments. You are tasked with writing a function that will validate a new appointment request against a list of existing appointments. The function will receive two parameters: a list of tuples representing the existing appointments and a tuple representing the new appointment request. Each tuple consists of two integers (start_time, end_time), where start_time and end_time are in the range of 0 to 23 (representing hours in a 24-hour format). Your task is to determine if the new appointment can be added without overlapping any of the existing appointments. Two appointments overlap if they are scheduled such that one starts before the other ends and finishes after the other starts (e.g., appointment (2, 4) overlaps with appointment (3, 5)). Write a function `is_valid_appointment(existing_appointments, new_appointment)` where: - `existing_appointments` is a list of tuples (int, int) - `new_appointment` is a tuple (int, int) The function should return `True` if the new appointment can be added without overlapping any existing appointments, or `False` otherwise. Input - The number of existing appointments will be at most 105. - Each start_time and end_time is in the range from 0 to 23. Output - Return `True` if the new appointment does not overlap with any existing appointments, otherwise return `False`. Examples Input: ```python existing_appointments = [(9, 11), (13, 15), (16, 18)] new_appointment = (11, 13) ``` Output: ```python True ``` Input: ```python existing_appointments = [(9, 11), (10, 12), (13, 15)] new_appointment = (11, 14) ``` Output: ```python False ```","solution":"def is_valid_appointment(existing_appointments, new_appointment): Returns True if the new appointment does not overlap with existing appointments, otherwise False. Parameters: existing_appointments (list of tuples): A list of tuples where each tuple represents an appointment with (start_time, end_time) new_appointment (tuple): A tuple representing the new appointment with (start_time, end_time) Returns: bool: True if the new appointment does not overlap with existing appointments, otherwise False. new_start, new_end = new_appointment for existing_start, existing_end in existing_appointments: if not (new_end <= existing_start or new_start >= existing_end): return False return True"},{"question":"In a certain town, there is a special event where people gather to exchange gifts. Each participant must both give and receive exactly one gift. However, some participants have restrictions on whom they can give a gift to based on personal preferences. Given N (2 ≤ N ≤ 100), the total number of participants, and an N x N matrix P where P[i][j] is 1 if participant i can give a gift to participant j and 0 otherwise, determine whether it is possible to create a valid gift exchange such that each participant can both give a gift to and receive a gift from exactly one other participant. If it is possible, print \\"Possible\\". If it is not possible, print \\"Not Possible\\". SAMPLE INPUT 4 0 1 1 0 1 0 1 1 1 1 0 1 0 1 1 0 SAMPLE OUTPUT Possible Explanation One possible arrangement is: - Participant 1 gives a gift to Participant 2. - Participant 2 gives a gift to Participant 3. - Participant 3 gives a gift to Participant 4. - Participant 4 gives a gift to Participant 1.","solution":"def is_gift_exchange_possible(N, P): def bpm(u, matchR, seen): for v in range(N): if P[u][v] and not seen[v]: seen[v] = True if matchR[v] == -1 or bpm(matchR[v], matchR, seen): matchR[v] = u return True return False matchR = [-1] * N result = 0 for i in range(N): seen = [False] * N if bpm(i, matchR, seen): result += 1 if result == N: return \\"Possible\\" else: return \\"Not Possible\\""},{"question":"You are given the task of organizing a sequence of events such that each event\'s requirements are satisfied. Each event has a name and a list of preceding events that must be completed before it can start. Here\'s how you should handle this: -----Input----- The input starts with a single integer n (1 ≤ n ≤ 100), representing the number of events. Each of the following n lines contains the name of an event (a string of up to 20 characters) followed by a list of preceding events\' names, each separated by a space. If an event has no prerequisites, it will be followed by the character \'-\'. -----Output----- Output a valid sequence of event names that satisfies all prerequisite requirements. If there are multiple valid sequences, output any one of them. If it\'s impossible to satisfy the prerequisites, output \\"impossible\\". -----Examples----- Input 4 EventA - EventB EventA EventC EventA EventD EventB EventC Output EventA EventB EventC EventD Input 3 EventA EventB EventB EventC EventC EventA Output impossible","solution":"def find_event_sequence(n, events): from collections import defaultdict, deque # Step 1: Parse input and build the graph event_graph = defaultdict(list) indegree = {event: 0 for event in events} for event, precedents in events.items(): if precedents: for prerequisite in precedents: event_graph[prerequisite].append(event) indegree[event] += 1 # Step 2: Topological Sort using Kahn\'s Algorithm queue = deque([event for event, degree in indegree.items() if degree == 0]) schedule = [] while queue: current = queue.popleft() schedule.append(current) for neighbor in event_graph[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If the length of schedule is not equal to number of events, there\'s a cycle if len(schedule) != n: return \\"impossible\\" return schedule # Wrapping function to read input format and call the main function def organize_events(n, event_list): events = {} for item in event_list: parts = item.split() event = parts[0] if len(parts) == 2 and parts[1] == \'-\': events[event] = [] else: events[event] = parts[1:] sequence = find_event_sequence(n, events) if sequence == \\"impossible\\": return sequence else: return \' \'.join(sequence)"},{"question":"In a faraway kingdom named AlgoLand, there lives a great inventor named Dr. Turing. He has developed a new technology that allows any machine to understand and communicate in the same language. Dr. Turing has n machines, each identified by an integer from 1 to n. To demonstrate his technology, he decides to set up a communication network among these machines. Dr. Turing connects some pairs of machines in such a way that each machine can communicate with any other machine directly or indirectly through other machines. After some time, Dr. Turing realizes that he needs to test if all machines are connected directly or indirectly. You need to help Dr. Turing by writing a program that checks if the communication is possible between every pair of machines. If the machines are fully connected, your task is to output \\"CONNECTED\\". If there are multiple disconnected groups of machines, you need to output \\"DISCONNECTED\\". To make it a bit more challenging, Dr. Turing wants to see the results for several test cases in a single run. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Then follow the descriptions of the t test cases. Each test case begins with two integers n (1 leq n leq 1000) — the number of machines, and m (0 leq m leq 1000) — the number of connections between the machines. The next m lines contain two integers a_i and b_i (1 leq a_i, b_i leq n, a_i neq b_i) — indicating that machine a_i is connected to machine b_i. -----Output----- For each test case, output \\"CONNECTED\\" if all n machines form a single connected component. Otherwise, output \\"DISCONNECTED\\". -----Examples----- Input 4 4 3 1 2 2 3 3 4 3 0 3 2 1 2 2 3 5 4 1 2 2 3 3 4 4 5 Output CONNECTED DISCONNECTED CONNECTED CONNECTED -----Note----- In the first test case, all the machines are connected directly or indirectly, forming a single connected component. Thus, the output is \\"CONNECTED\\". In the second test case, there are no connections between the machines. Therefore, each machine is its own disconnected component, and the output is \\"DISCONNECTED\\". In the third test case, all three machines are connected, resulting in a single connected component. The output is \\"CONNECTED\\". In the fourth test case, even though there are fewer connections, the provided connections ensure that all machines are connected. Hence, the output is \\"CONNECTED\\".","solution":"def check_connection(n, connections): Check if all machines are connected. :param n: Number of machines :param connections: List of tuples representing connections between machines :return: \\"CONNECTED\\" if all machines are connected, otherwise \\"DISCONNECTED\\" from collections import defaultdict, deque def bfs(start, graph, visited): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Create adjacency list graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) # Initialize visited list visited = [False] * (n + 1) # BFS to check connectivity num_components = 0 for i in range(1, n + 1): if not visited[i]: if num_components > 0: return \\"DISCONNECTED\\" visited[i] = True bfs(i, graph, visited) num_components += 1 return \\"CONNECTED\\" def process_test_cases(t, test_cases): Process multiple test cases for machine connectivity check. :param t: Number of test cases :param test_cases: List of tuples, where each tuple consists of (n, m, connections) :return: List of results for each test case in order results = [] for n, m, connections in test_cases: result = check_connection(n, connections) results.append(result) return results"},{"question":"Maria loves playing with numbers and sequences. She is working on a new experiment involving an array of integers. Maria wants to make all integers in the array non-decreasing by performing a special operation multiple times. The operation she can perform is: - Choose any pair of adjacent integers in the array and swap them if the left integer is greater than the right integer. Maria wants to determine the minimum number of operations required to make the array non-decreasing. Help Maria find this number. -----Input----- The first line contains one number n (1 ≤ n ≤ 10^4), the size of the array. The second line contains n space-separated integers a_{i} (1 ≤ a_{i} ≤ 10^5), representing the elements of the array. -----Output----- Output one integer, the minimum number of operations required to make the array non-decreasing. -----Examples----- Input 5 3 2 1 5 4 Output 4 Input 4 1 3 2 4 Output 1 -----Note----- In the first sample test, the optimal solution is: - Swap 3 and 2 (array becomes [2, 3, 1, 5, 4]) - Swap 3 and 1 (array becomes [2, 1, 3, 5, 4]) - Swap 2 and 1 (array becomes [1, 2, 3, 5, 4]) - Swap 5 and 4 (array becomes [1, 2, 3, 4, 5]) In the second sample test, the optimal solution is: - Swap 3 and 2 (array becomes [1, 2, 3, 4])","solution":"def min_operations_to_sort(arr): Return the minimum number of operations required to make the array non-decreasing by performing adjacent swaps when necessary. n = len(arr) operations = 0 while True: swapped = False for i in range(n - 1): if arr[i] > arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] operations += 1 swapped = True if not swapped: break return operations"},{"question":"A popular social media app is introducing a new feature called “Moments”, where users can share notable events from their day. Each moment is tagged with different attributes to better categorize and display these moments. Unfortunately, the app’s developers have encountered a challenge in ensuring the moments are displayed optimally based on user preferences and moments’ characteristics. Each moment is described by N different attributes and can have up to M distinct tags for each of those attributes. The app has K users, each with their own preferences for these attributes. The app needs to determine the best moment to display for each user based on their preference. Each attribute of a moment has an associated tag that can be one of M distinct categories. The app decides the suitability of a moment for a user based on the following logic: - Each user has a preferred tag for each attribute. - The suitability score of a moment for a user is computed for each attribute, where the suitability score is higher if the moment\'s tag matches the user\'s preferred tag for that attribute. - The overall suitability of a moment for a user is the sum of the individual suitability scores for all attributes. - The moment with the highest overall suitability score is considered the best moment for that user. If multiple moments have the same suitability score, the one that appears earlier in the provided input moments list is chosen. You are tasked to implement this selection process. Input: - The first line contains integers N, M, and K - the number of attributes, the number of possible tags for each attribute, and the number of users, respectively. - The next N lines contain M space-separated integers representing the tags for each of the N attributes. - The following K lines contain N space-separated integers representing each user\'s preferred tags for the N attributes. - The subsequent lines contain up to T space-separated integers representing the tags of the moments for each of the N attributes, one moment per line, up to T moments. Output: - Print K lines, each containing the index (1-based) of the best moment for the corresponding user. Constraints: 1 ≤ N ≤ 100 1 ≤ M ≤ 50 1 ≤ K ≤ 1000 1 ≤ T ≤ 5000 Example Input: 3 4 2 1 2 3 4 2 2 1 3 3 4 4 1 3 2 2 3 1 1 4 2 2 2 4 Example Output: 3 1","solution":"def find_best_moments(N, M, K, attributes, users, moments): best_moments = [] for user in users: best_moment_idx = -1 best_score = -1 for i, moment in enumerate(moments): current_score = 0 for j in range(N): if moment[j] == user[j]: current_score += 1 if current_score > best_score: best_score = current_score best_moment_idx = i elif current_score == best_score and best_moment_idx == -1: best_moment_idx = i best_moments.append(best_moment_idx + 1) # Convert to 1-based index return best_moments # Example usage: N = 3 M = 4 K = 2 attributes = [[1, 2, 3, 4], [2, 2, 1, 3], [3, 4, 4]] users = [[1, 3, 2], [2, 3, 1]] moments = [[1, 4, 2], [2, 2, 4]] print(find_best_moments(N, M, K, attributes, users, moments))"},{"question":"You have a list of numbers and you need to determine if any subset of these numbers sums up to zero. Write a program to check this condition. Input A single dataset where the first line contains an integer n, denoting the number of integers in the list. The next line contains n integers separated by spaces, representing the integers in the list. 1 ≤ n ≤ 20 Each integer will be between -100 and 100 (inclusive). Output Print YES if there exists a subset of integers that sums to zero. Otherwise, print NO. Example Input 5 2 -3 7 -4 1 Output YES Input 4 1 2 3 4 Output NO","solution":"from itertools import combinations def subset_sum_zero(n, nums): for r in range(1, n+1): for subset in combinations(nums, r): if sum(subset) == 0: return \\"YES\\" return \\"NO\\" def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) nums = list(map(int, lines[1].split())) return n, nums"},{"question":"A company needs to schedule a single server to handle n tasks, each characterized by a start time sᵢ and a finish time fᵢ (sᵢ ≤ fᵢ). The server can only handle one task at a time, and each task must be fully completed before it can start the next one. What is the maximum number of non-overlapping tasks the server can handle? -----Input----- The first line contains an integer n (1 ≤ n ≤ 5·10^5) — the number of tasks. The following n lines contain integer values sᵢ and fᵢ each (1 ≤ sᵢ ≤ fᵢ ≤ 10^9). -----Output----- Print the maximum number of tasks that the server can handle without any overlap. -----Examples----- Input 3 1 3 2 5 3 6 Output 2 Input 4 3 4 1 2 0 1 5 6 Output 4 Input 6 5 9 1 4 3 5 0 6 8 9 5 7 Output 3","solution":"def max_non_overlapping_tasks(n, tasks): Determine the maximum number of non-overlapping tasks. :param n: Number of tasks :param tasks: List of tuples containing start and end times of tasks :return: Maximum number of non-overlapping tasks the server can handle tasks.sort(key=lambda x: x[1]) # Sort tasks by their finish times count = 0 last_finish_time = 0 for s, f in tasks: if s >= last_finish_time: count += 1 last_finish_time = f return count"},{"question":"Given a string S consisting of lowercase alphabets, determine the number of sub-strings of S that start and end with the same character. Input: First line of input contains an integer T, representing the number of test cases. Each test case consists of a single string S. Output: For each test case, output the number of sub-strings that start and end with the same character. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 SAMPLE INPUT 2 abc aaa SAMPLE OUTPUT 3 6","solution":"def count_substrings(s): Returns the number of substrings that start and end with the same character. n = len(s) count = 0 for i in range(n): for j in range(i, n): if s[i] == s[j]: count += 1 return count def process_test_cases(test_cases): Takes a list of test cases (strings) and returns a list of results corresponding to the number of substrings for each string in test cases. results = [] for test_case in test_cases: results.append(count_substrings(test_case)) return results"},{"question":"Create a function `median` that takes an arbitrary number of numerical arguments and returns the median value. The median is the middle number in a sorted, list of numbers. If there is an even number of numbers, the median is the average of the two middle numbers. ```python median(1, 3, 3, 6, 7, 8, 9) # returns 6 median(1, 2, 3, 4, 5, 6, 8, 9) # returns (4+5)/2 = 4.5 median(7, 8, 1, 3, 3, 6, 9) # returns 6, the unordered input should also yield the correct median ``` Note: - You are not allowed to use any built-in function that directly calculates the median. - If no arguments are passed, the function should return `None`. # Example ```python median() #=> None median(3, 1, 2) #=> 2 median(3, 1, 2, 4) #=> (2+3)/2 = 2.5 median(1) #=> 1 ```","solution":"def median(*args): Calculate the median of the given numerical arguments. :param args: A variable number of numerical arguments. :return: The median value or None if no arguments are provided. if not args: return None sorted_args = sorted(args) n = len(sorted_args) midpoint = n // 2 if n % 2 == 1: # Odd number of elements return sorted_args[midpoint] else: # Even number of elements return (sorted_args[midpoint - 1] + sorted_args[midpoint]) / 2"},{"question":"A wealthy philanthropist wants to support promising startups by providing seed funding. He decides to adopt a system where the total amount he will spend is determined by a sequence of checks. Each check can only endorse an integer value that is a power of 2 (e.g., 1, 2, 4, 8, 16, ...). However, he wants to minimize the number of checks he writes for any given total amount. For example, to endorse 23, he would write checks for values 16, 4, 2, and 1, totaling four checks. Write a program that calculates the minimum number of checks required to achieve a given total amount. Input The input consists of multiple datasets. Each dataset is described by a single integer T (1 ≤ T ≤ 10^9) representing the total amount the philanthropist wants to endorse. The input is terminated by a dataset of T = 0. This dataset must not be processed. Output For each dataset, output in a line the minimum number of checks needed to endorse exactly the specified amount. Example Input 23 37 1024 0 Output 4 3 1","solution":"def min_checks(T): Calculates the minimum number of checks required to achieve the given total amount T. Each check can endorse an amount that is a power of 2. checks = 0 while T > 0: highest_power_of_2 = 1 << (T.bit_length() - 1) T -= highest_power_of_2 checks += 1 return checks def process_checks(amounts): Processes multiple amounts, returning the minimum number of checks required for each amount. Terminates processing upon encountering an amount of 0. results = [] for T in amounts: if T == 0: break results.append(min_checks(T)) return results"},{"question":"Square Grid of Primes You are given an `n x n` grid. Each cell in the grid should be filled with a number such that the number is prime and no two adjacent cells (horizontally, vertically, or diagonally) contain the same prime number. Write a program that generates a valid grid for given `n`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. # Input The input consists of a single integer `n`, the size of the grid (1 ≤ n ≤ 10). # Output Output consists of an `n x n` grid where each cell contains a distinct prime number as per the described constraints. # Example Input 4 Output Possible outputs (output may vary as there can be many valid solutions): ``` 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 ``` OR ``` 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 ``` # Constraints - The grid should be filled with the smallest prime numbers starting from 2 upwards. - Each prime number should appear only once in the grid. - No neighboring cells (horizontally, vertically, or diagonally) should contain the same prime number. - If there are multiple correct outputs, you only need to produce one valid grid. # Notes - The grid should have no duplicated primes, and appropriate spacing should be used between prime numbers in the output. - Ensure that your program runs efficiently even for the largest grid size of `10 x 10`.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def generate_primes(n): primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return primes def generate_prime_grid(n): if n == 1: return [[2]] primes = generate_primes(n * n) grid = [[0] * n for _ in range(n)] index = 0 for i in range(n): if i % 2 == 0: for j in range(n): grid[i][j] = primes[index] index += 1 else: for j in range(n-1, -1, -1): grid[i][j] = primes[index] index += 1 return grid def print_grid(grid): for row in grid: print(\' \'.join(map(str, row)))"},{"question":"Write a function to determine if two given words are anagrams of each other. Two words are considered anagrams if they can be made from the same letters with the same frequencies. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains of a single line of input, two strings A and B separated by a space. ------ Output Format ------ For each test case, output \\"YES\\" if the two strings are anagrams of each other, otherwise output \\"NO\\". ------ Constraints ------ 1 le T le 1000 1 le |A|, |B| le 100 ----- Sample Input 1 ------ 4 listen silent triangle integral apple ppal rat tar ----- Sample Output 1 ------ YES YES NO YES ----- Explanation 1 ------ Test Case 1: \\"listen\\" and \\"silent\\" are anagrams as both contain the same letters with the same frequencies. Test Case 2: \\"triangle\\" and \\"integral\\" are anagrams as both contain the same letters with the same frequencies. Test Case 3: \\"apple\\" and \\"ppal\\" are not anagrams as they have different lengths and letter frequencies. Test Case 4: \\"rat\\" and \\"tar\\" are anagrams as both contain the same letters with the same frequencies.","solution":"def are_anagrams(word1, word2): Determine if two words are anagrams of each other. Args: word1 (str): First word. word2 (str): Second word. Returns: str: \\"YES\\" if the words are anagrams, otherwise \\"NO\\" return \\"YES\\" if sorted(word1) == sorted(word2) else \\"NO\\" def process_test_cases(T, test_cases): Process multiple test cases for anagram check. Args: T (int): Number of test cases. test_cases (list of tuples): List containing tuples of two words each. Returns: list: List of results for each test case. results = [] for word1, word2 in test_cases: results.append(are_anagrams(word1, word2)) return results"},{"question":"Given an integer array, find the element that appears more than n/2 times, where n is the size of the array. Implement your solution using a hashmap in Python. Example 1: Input: arr = [3, 3, 4, 2, 4, 4, 2, 4, 4] Output: 4 Explanation: 4 appears 5 times which is greater than 9/2 = 4.5 times. Example 2: Input: arr = [3, 3, 4, 2, 4, 4, 2, 4] Output: -1 Explanation: No element appears more than 8/2 = 4 times. Your Task: You don\'t need to read or print anything. Your task is to complete the function majorityElement() which takes arr as input parameter and returns the element that appears more than n/2 times. If no such element exists, return -1. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= len(arr) <= 10000 1 <= arr[i] <= 10000","solution":"def majorityElement(arr): Finds the element that appears more than n/2 times in the array. If no such element exists, returns -1. n = len(arr) count_map = {} for num in arr: if num in count_map: count_map[num] += 1 else: count_map[num] = 1 # As soon as we find an element that appears more than n/2 times, return it if count_map[num] > n / 2: return num # If no element has the majority count return -1"},{"question":"Geek is practicing string manipulation and needs your help to solve an interesting problem. Given a string, return a new string where every occurrence of the word \\"not\\" is replaced with \\"definitely\\". Words are defined as a sequence of characters separated by spaces. Example 1: Input: \\"This is not a drill\\" Output: \\"This is definitely a drill\\" Example 2: Input: \\"not so sure\\" Output: \\"definitely so sure\\" Example 3: Input: \\"It\'s not always not\\" Output: \\"It\'s definitely always definitely\\" Your Task: Complete the function `replaceNotWithDefinitely()` which takes a string as input and returns the modified string with all occurrences of \\"not\\" replaced by \\"definitely\\".","solution":"def replaceNotWithDefinitely(input_string): Replaces every occurrence of the word \\"not\\" with \\"definitely\\" in the given input_string. return input_string.replace(\\"not\\", \\"definitely\\")"},{"question":"Given an array of n integers, where each element lies within the range [1, n-1]. The array represents the numbers to buy a certain item, but due to a mistake, exactly one number is duplicated and one number is missing. Your task is to write a function findDuplicateAndMissing() that finds and returns the missing number and the duplicated number. Example 1: Input: N = 5 arr[] = {4, 3, 6, 2, 1, 6} Output: (5, 6) Explanation: 5 is missing and 6 is duplicated in the array. Example 2: Input: N = 3 arr[] = {3, 1, 1} Output: (2, 1) Explanation: 2 is missing and 1 is duplicated in the array. Your Task: You don\'t need to read input or print anything. Your task is to complete the provided function findDuplicateAndMissing() which takes an array arr[] and its size N and returns a tuple (missing, duplicate). Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 2 <= N <= 10^5 1 <= arr[i] <= N-1","solution":"def findDuplicateAndMissing(arr): Returns a tuple (missing, duplicate) where \'missing\' is the number missing from the array and \'duplicate\' is the number that is duplicated in the array. n = len(arr) + 1 # Since arr has one duplicate and one missing, the length should be increased by 1 total_sum = n * (n - 1) // 2 sum_of_arr = sum(arr) sum_of_squares = sum([x**2 for x in arr]) expected_sum_of_squares = sum([x**2 for x in range(1, n)]) sum_diff = total_sum - sum_of_arr # missing - duplicate square_sum_diff = expected_sum_of_squares - sum_of_squares # missing^2 - duplicate^2 # Now solve the two equations: # missing - duplicate = sum_diff # missing^2 - duplicate^2 = square_sum_diff # can be factored to (missing - duplicate)(missing + duplicate) = square_sum_diff # substituting missing - duplicate = sum_diff: # sum_diff * (missing + duplicate) = square_sum_diff # sum_diff * x = square_sum_diff # x = square_sum_diff / sum_diff # where x = missing + duplicate if sum_diff == 0: raise ValueError(\\"The input array does not match problem constraints of having exactly one duplicate and one missing value.\\") sum_mixed = square_sum_diff // sum_diff missing = (sum_mixed + sum_diff) // 2 duplicate = sum_mixed - missing return (missing, duplicate)"},{"question":"You are given a string consisting only of lowercase letters. Determine if you can reorder the string such that no two adjacent characters are the same. If possible, output one valid reordering of the string. Otherwise, return \\"No\\". -----Input----- The input consists of a single line containing the string s (1 leq |s| leq 10^5), where |s| is the length of the string. -----Output----- If you can reorder the string such that no two adjacent characters are the same, print \\"Yes\\" followed by the reordered string. If it is not possible to reorder the string in such a way, print \\"No\\". -----Examples----- Input aaabb Output Yes ababa Input aaaa Output No Input aabbcc Output Yes abcabc -----Note----- For the first example, one possible reordering is \\"ababa\\". It is a valid reordering since no two adjacent characters are the same. For the second example, it is impossible to reorder the string as described since there are too many occurrences of the character \'a\'. For the third example, \\"abcabc\\" is one valid reordering since no two adjacent characters are the same.","solution":"from collections import Counter import heapq def can_reorder_string(s: str) -> str: # Count frequency of each character freq = Counter(s) max_count = max(freq.values()) # Check if the rearrangement is possible if max_count > (len(s) + 1) // 2: return \\"No\\" # Create a max heap based on frequencies max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char return \\"Yesn\\" + \'\'.join(result)"},{"question":"You\'ve been given a list of integers, where each integer represents a different task\'s time in minutes. Your objective is to partition these tasks into two groups such that the absolute difference between the sum of tasks in each group is minimized. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of tasks. The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 10^4) — the duration of each task in minutes. Output Print a single integer — the absolute minimum difference between the sum of the two groups. Examples Input 5 10 20 15 5 25 Output 5 Input 4 10 10 10 10 Output 0","solution":"def min_difference_partition(n, tasks): Returns the minimum absolute difference between the sum of two partitions of the given task durations. total_sum = sum(tasks) dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_sum // 2 + 1): dp[i][j] = dp[i-1][j] if j >= tasks[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j-tasks[i-1]] for j in range(total_sum // 2, -1, -1): if dp[n][j]: return total_sum - 2 * j return total_sum # should not reach here if the logic is correct # Example usage n = 5 tasks = [10, 20, 15, 5, 25] print(min_difference_partition(n, tasks)) # Output should be 5"},{"question":"Alice and Bob are playing a different game with a grid of dimensions n times m. The game starts with each cell of the grid having a value of 0. The players take alternate turns, starting with Alice. On each turn, the current player can choose a cell in the grid and increase its value by 1. The goal is to maximize the sum of the values in all cells at the end of the game. The game ends after exactly k turns. Alice plays to maximize the total sum of all cells\' values, while Bob plays to minimize it. Both players follow an optimal strategy throughout the game. Determine the total sum of the values in the grid after k turns if both Alice and Bob play optimally. -----Input----- The first line of the input contains a single integer t (1 le t le 1000) — the number of test cases. The description of test cases follows. Each test case consists of three integers n, m, and k (1 le n, m le 1000, 1 le k le n cdot m le 10^6) — the dimensions of the grid and the number of turns, respectively. It is guaranteed that the sum of all k values over all test cases does not exceed 10^6. -----Output----- For each test case, output a single integer — the maximum possible sum of the values in the grid after k turns if both players play optimally. -----Examples----- Input 3 2 2 3 3 3 9 1 5 4 Output 3 9 4 -----Explanation----- In the first test case, Alice and Bob will alternately select cells. The maximum sum Alice can achieve is 3 after 3 turns. In the second test case, since there are 9 turns and also 9 cells, Alice and Bob will fill each cell exactly once, achieving the maximum sum of 9. In the third test case, Alice can put 2 in two different cells alternatively with Bob, so the maximum sum is 4.","solution":"def maximize_sum_after_turns(t, test_cases): results = [] for n, m, k in test_cases: results.append(k) return results"},{"question":"John is working on a project to analyze a sequence of numbers, and he needs your help to implement a function that finds a special subsequence within a given list of integers. A subsequence is considered \\"special\\" if it is strictly increasing and the sum of its elements is maximized. Note that the subsequence does not need to be contiguous. You need to write a program that takes in a list of integers and outputs the maximum possible sum of a special subsequence. Input The first line of input contains an integer n (1 ≤ n ≤ 1000) representing the size of the list. The following line contains n integers (each having an absolute value ≤ 1000) representing the elements of the list. Output Print a single integer representing the maximum possible sum of a special subsequence. Examples Input 5 1 101 2 3 100 Output 106 Input 5 3 4 5 10 15 Output 37 Input 5 10 5 4 3 2 Output 10 Input 6 1 2 4 3 5 4 Output 12 Note In the first example, the subsequence 1, 2, 3, 100 is strictly increasing, and the sum equals 106, which is the maximum. In the second example, the entire list constitutes a strictly increasing subsequence, and its sum is 37. In the third example, the largest single increasing element is 10. In the fourth example, the subsequence 1, 2, 4, 5 is strictly increasing, and the sum equals 12, which is the maximum possible.","solution":"def max_special_subsequence_sum(n, sequence): Returns the maximum possible sum of a special subsequence that is strictly increasing. if n == 0: return 0 # Initialize the dp array where dp[i] stores the maximum sum of a # strictly increasing subsequence ending with the element at index i. dp = sequence[:] # Use dynamic programming to find the maximum sum for i in range(1, n): for j in range(i): if sequence[i] > sequence[j] and dp[i] < dp[j] + sequence[i]: dp[i] = dp[j] + sequence[i] # The result is the maximum value in the dp array return max(dp) # Example usage: # sequence = [1, 101, 2, 3, 100] # n = len(sequence) # print(max_special_subsequence_sum(n, sequence)) # Output should be 106"},{"question":"In a distant land, there is an ancient ritual where an array of integers is rotated by a certain number of steps in either direction to predict the future of the villagers. The villagers have asked you, a skilled programmer, to automate this prediction ritual by implementing the rotation of the array. -----Input----- The first line contains two integers n and k (1 leq n leq 100, 0 leq k leq 100), representing the number of elements in the array and the number of steps to rotate, respectively. The second line contains n integers, the elements of the array. The third line contains a single character, either \'L\' or \'R\', indicating the direction (\'L\' for left rotation, \'R\' for right rotation). -----Output----- Output a single line containing the array after it has been rotated by k steps in the specified direction. -----Examples----- Sample Input 1: 5 2 1 2 3 4 5 L Sample Output 1: 3 4 5 1 2 Sample Input 2: 5 1 1 2 3 4 5 R Sample Output 2: 5 1 2 3 4","solution":"def rotate_array(n, k, arr, direction): Rotates the given array by k steps in the specified direction (\'L\' for left, \'R\' for right). :param n: int - Number of elements in the array :param k: int - Number of steps to rotate :param arr: list - Array of integers to rotate :param direction: str - Direction to rotate (\'L\' for left, \'R\' for right) :return: list - Rotated array k = k % n # Reduce k to within bounds of array length if direction == \'L\': return arr[k:] + arr[:k] elif direction == \'R\': return arr[-k:] + arr[:-k] else: raise ValueError(\\"Direction must be either \'L\' or \'R\'\\")"},{"question":"Given an integer `N`, write a function that returns the lexicographically smallest string of length `N` that contains exactly two different characters such that each character appears at least once. -----Constraints----- - The input value is an integer. - 1 <= N <= 100 -----Input----- Input is given as a single integer. N -----Output----- Return the lexicographically smallest string of length `N` that contains exactly two different characters each appearing at least once. -----Sample Input----- 3 -----Sample Output----- aab Explanation: The string `aab` is lexicographically smallest and contains exactly two different characters (`a` and `b`), both appearing at least once. -----Sample Input----- 5 -----Sample Output----- aaabb Explanation: The string `aaabb` is lexicographically smallest and contains exactly two different characters (`a` and `b`), both appearing at least once.","solution":"def lexicographically_smallest_string(N): Returns the lexicographically smallest string of length N that contains exactly two different characters, such that each character appears at least once. # The smallest characters are \'a\' and \'b\' # To be lexicographically smallest, the string should start with as many \'a\'s as possible # and then have the remaining characters as \'b\'. num_b = 1 num_a = N - num_b return \'a\' * num_a + \'b\' * num_b"},{"question":"Create a program that reads a list of integers and outputs the length of the longest contiguous subsequence where the numbers are in strictly increasing order. # Input The input is given in the following format: ``` n a1 a2 a3 ... an ``` Where: - `n` (1 ≤ n ≤ 100) represents the number of elements in the list. - `a1, a2, ..., an` (0 ≤ ai ≤ 1000) are the elements of the list. # Output The program should output the length of the longest contiguous subsequence where the numbers are in strictly increasing order. # Example **Input:** ``` 8 5 1 2 3 2 4 5 6 ``` **Output:** ``` 4 ``` **Input:** ``` 5 9 8 7 6 5 ``` **Output:** ``` 1 ```","solution":"def longest_increasing_subsequence_length(arr): Returns the length of the longest contiguous subsequence where the numbers are in strictly increasing order. if not arr: return 0 max_len = 1 current_len = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"The management of a prestigious university has decided to create a new policy for building student teams based on their individual skill scores. They have a set goal to find the maximum skill difference among the team members while ensuring that the total skill score of the team does not exceed a given limit. You need to help the management determine that maximum skill difference. The team should consist of at least two students. Input The first line contains a single integer n (2 ≤ n ≤ 100), the number of students. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), representing the skill scores of each student. The third line contains a single integer T (2 ≤ T ≤ 100000), the maximum allowable total skill score for the team. Output Print a single line featuring the maximum skill difference in a valid team, or -1 if no such team can be formed. Examples Input 5 1 2 3 4 5 9 Output 4 Input 4 5 8 12 14 15 Output 3 Note In the first example, the best team that can be formed is {1, 4, 4}, with a total skill score of 9 and a maximum skill difference of 4. In the second example, the best team that can be formed is {8, 5} or {12, 5}, both having a maximum skill difference of 3.","solution":"def maximum_skill_difference(n, skills, T): skills.sort() max_diff = -1 for i in range(n): for j in range(i + 1, n): team_score = skills[i] + skills[j] if team_score <= T: max_diff = max(max_diff, skills[j] - skills[i]) else: break return max_diff"},{"question":"You are tasked with building a simple social network with N users and M connections. Each connection is bidirectional and connects two users. We will define the \\"popularity\\" of a user as the number of direct connections that user has. Your objective is to determine the user with the highest popularity. If there are multiple users with the same highest popularity, return the smallest user ID among them. Constraints: * 2 leq N leq 10,000 * 1 leq M leq 50,000 * 1 leq u_i, v_i leq N * Each pair (u_i, v_i) is unique and there are no self-connections, i.e., u_i neq v_i. Input: Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 : u_M v_M Output: Print the ID of the user with the highest popularity. If there are multiple users with the same highest popularity, print the smallest ID among them. Examples: Input: 5 4 1 2 2 3 4 5 1 5 Output: 1 Input: 6 6 1 2 2 3 3 4 4 5 5 6 1 4 Output: 4","solution":"def find_most_popular_user(N, M, connections): from collections import defaultdict # Dictionary to count the number of connections for each user popularity_count = defaultdict(int) # Iterate through each connection and increase the count for both users for u, v in connections: popularity_count[u] += 1 popularity_count[v] += 1 # Determining the user with the highest popularity max_popularity = -1 user_with_max_popularity = None for user in range(1, N + 1): if user in popularity_count: if popularity_count[user] > max_popularity: max_popularity = popularity_count[user] user_with_max_popularity = user elif popularity_count[user] == max_popularity: user_with_max_popularity = min(user_with_max_popularity, user) else: continue return user_with_max_popularity # Input handling def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) connections = [(int(data[i]), int(data[i+1])) for i in range(2, len(data), 2)] result = find_most_popular_user(N, M, connections) print(result)"},{"question":"You are developing a video editor application where users can add various actions (such as cuts, transitions, and effects) on a video timeline. Each action can start at any given time but must fall within a certain time duration and cannot overlap with another action. The objective is to determine the maximum number of non-overlapping actions that can be added to the timeline. Constraints * 1 ≤ N ≤ 100 * 1 ≤ start_i < end_i ≤ 10^9 Input Input is given from Standard Input in the following format: N start_1 end_1 start_2 end_2 : start_N end_N Output Print the maximum number of non-overlapping actions that can be added to the timeline. Examples Input 4 1 3 2 5 4 6 7 9 Output 3 Input 5 1 2 3 4 0 6 5 7 8 9 Output 4 Input 3 2 4 3 5 1 3 Output 2","solution":"def max_non_overlapping_actions(N, actions): Determines the maximum number of non-overlapping actions that can be added to the timeline. Parameters: - N: an integer representing the number of actions. - actions: a list of tuples where each tuple contains two integers (start, end) representing the start time and end time of an action. Returns: - An integer representing the maximum number of non-overlapping actions. # Sort the actions by their end time actions.sort(key=lambda x: x[1]) count = 0 end_time = 0 for start, end in actions: if start >= end_time: count += 1 end_time = end return count # Function to handle input and output def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') N = int(data[0]) actions = [tuple(map(int, line.split())) for line in data[1:]] result = max_non_overlapping_actions(N, actions) print(result)"},{"question":"You are given an array A of N integers. We define the \\"power\\" of a contiguous subarray as the sum of all the unique elements within that subarray. Your task is to handle Q queries about the maximum power of any subarray within given ranges of the array. For each query, you will receive two integers L and R which represent the range within the array. You need to find the subarray within the range A[L], A[L+1], ..., A[R] that has the maximum \\"power\\" and return that value. ------ Input Format ------ The first line of input contains two space-separated integers N and Q, the number of elements in the array and the number of queries. The second line contains N space-separated integers representing the array A. Each of the next Q lines contains two integers L and R, denoting the query parameters. ------ Output Format ------ For each query, print the maximum possible power of any subarray within the given range on a new line. ------ Constraints ------ 1 ≤ N, Q ≤ 10^{5} -10^9 ≤ A[i] ≤ 10^9 for each valid i. 1 ≤ L ≤ R ≤ N ------ Sample Input 1 ------ 6 2 1 2 3 -1 4 5 1 4 2 6 ------ Sample Output 1 ------ 6 13 ------ Explanation 1 ------ For the first query (1, 4), the range is [1, 2, 3, -1]. The subarray [1, 2, 3] has the highest power which is the sum of 1, 2, and 3. For the second query (2, 6), the range is [2, 3, -1, 4, 5]. The subarray [2, 3, 4, 5] has the highest power which is the sum of 2, 3, 4, and 5.","solution":"def max_power_subarray(N, Q, A, queries): Function to calculate the maximum power of any subarray within the given range queries. Args: N : int : Number of elements in the array Q : int : Number of queries A : list : List of integers representing the array queries : list : List of tuples where each tuple has two integers L and R representing the range Returns: list : List of results for each query def max_power(A, L, R): seen = set() current_power = 0 max_power = float(\'-inf\') for i in range(L, R + 1): if A[i] not in seen: seen.add(A[i]) current_power += A[i] max_power = max(max_power, current_power) return max_power results = [] for L, R in queries: L, R = L - 1, R - 1 # converting to 0-based index results.append(max_power(A, L, R)) return results"},{"question":"Given a matrix mat of size m x n and an integer target, your task is to find all unique paths in the matrix that sum up to the given target. You can only move either right or down from a given cell in the matrix. Example 1: Input: mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 12 Output: [[1, 2, 3, 6], [1, 4, 7]] Explanation: Both paths 1 → 2 → 3 → 6 and 1 → 4 → 7 have a sum of 12. Example 2: Input: mat = [[1, 2], [3, 4]], target = 7 Output: [[1, 2, 4]] Explanation: The only path 1 → 2 → 4 has a sum of 7. Your Task: You do not need to read input or print anything. Your task is to complete the function findPaths() which takes mat, m, n, and target as input parameters and returns a list of paths where each path is represented as a list of integers. If no path is found, return an empty list. Expected Time Complexity: O(2^(m+n)) Expected Auxiliary Space: O(m+n) Constraints: 1 ≤ m, n ≤ 10 1 ≤ mat[i][j] ≤ 100 1 ≤ target ≤ 1000","solution":"def findPaths(mat, target): def dfs(x, y, current_path, current_sum): # If we have reached the target if current_sum == target: paths.append(current_path[:]) return # Bound checks if x >= m or y >= n or current_sum > target: return # Move right if y + 1 < n: current_path.append(mat[x][y + 1]) dfs(x, y + 1, current_path, current_sum + mat[x][y + 1]) current_path.pop() # Move down if x + 1 < m: current_path.append(mat[x + 1][y]) dfs(x + 1, y, current_path, current_sum + mat[x + 1][y]) current_path.pop() m, n = len(mat), len(mat[0]) paths = [] dfs(0, 0, [mat[0][0]], mat[0][0]) return paths"},{"question":"Given a decimal number N, convert it to its Roman numeral representation. Roman numerals are represented by the following symbols: - I: 1 - V: 5 - X: 10 - L: 50 - C: 100 - D: 500 - M: 1000 Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. The number nine is written as IX. There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Given a decimal integer, convert it to its Roman numeral equivalent. Example 1: Input: 3 Output: \\"III\\" Example 2: Input: 58 Output: \\"LVIII\\" Explanation: 58 is written as L + V + III. Example 3: Input: 1994 Output: \\"MCMXCIV\\" Explanation: 1994 is written as M + CM + XC + IV. Example 4: Input: 2023 Output: \\"MMXXIII\\" Explanation: 2023 is written as MM + XX + III. Note: 1 <= N <= 3999","solution":"def int_to_roman(N): Convert a decimal number to its Roman numeral representation. Parameters: N (int): Decimal number ranging from 1 to 3999 inclusive. Returns: str: Roman numeral representation of the number. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while N > 0: for _ in range(N // val[i]): roman_num += syms[i] N -= val[i] i += 1 return roman_num"},{"question":"Alan works as a software engineer and frequently deals with network latency issues. He has a list of servers and each server can be pinged from day `a_i` to day `b_i`. Alan wants to ping each server exactly once, and he can only ping one server per day. Help Alan determine the minimum number of days required to ping all the servers, or if it is impossible. Input The first line of the input contains one integer n (1 ≤ n ≤ 10^6) — the number of servers. The next n lines contain two integers each: a_i and b_i (1 ≤ a_i < b_i ≤ 10^9), where a_i is the day when pinging the i-th server starts being possible, and b_i is the last day the i-th server can be pinged. Output If it is not possible to ping all servers, print -1. Otherwise, print the minimum number of consecutive days required to ping all the servers. Examples Input 2 2 8 3 6 Output 8 Input 4 1 4 2 5 3 6 4 7 Output 7 Input 3 10 20 30 40 50 60 Output 60 Input 2 1 2 1 2 Output -1","solution":"def min_days_to_ping_servers(n, intervals): from heapq import heappush, heappop intervals.sort(key=lambda x: x[1]) min_days = -1 start_day = 1 min_heap = [] for interval in intervals: heappush(min_heap, interval[0]) while min_heap and min_heap[0] < start_day: heappop(min_heap) if not min_heap or min_heap[0] > interval[1]: return -1 start_day += 1 min_days = intervals[-1][1] return min_days"},{"question":"Amit is an avid coder and always looks for optimized solutions to problems. Recently, he came across the concept of matrix multiplication and wishes to write a function to perform this operation. However, he knows that not every matrix pair can be multiplied and certain conditions need to be met. The task is to write a function that takes two matrices as input, checks if they can be multiplied, and if so, returns the resultant matrix. Otherwise, it should return an empty list. A matrix is defined as a list of lists, where the inner lists represent the rows. Function Signature: ```python def matrix_multiply(matrix_a, matrix_b): # Your code here ``` Your function should check if the number of columns in the first matrix is equal to the number of rows in the second matrix. If the condition is satisfied, multiply the matrices and return the resultant matrix, otherwise return an empty list. **Constraints:** - The number of rows and columns in matrices matrix_a and matrix_b will be less than or equal to 100. - The elements of the matrices will be integers between -1000 and 1000. **Input:** - matrix_a: a list of lists of integers representing the first matrix. - matrix_b: a list of lists of integers representing the second matrix. **Output:** - A list of lists representing the resultant matrix if multiplication is possible, otherwise an empty list. **Example Input:** ```python matrix_a = [ [1, 2, 3], [4, 5, 6] ] matrix_b = [ [7, 8], [9, 10], [11, 12] ] ``` **Example Output:** ```python result = [ [58, 64], [139, 154] ] ``` **Explanation:** The number of columns in `matrix_a` (3) is equal to the number of rows in `matrix_b` (3). Thus, the matrices can be multiplied. The resultant matrix is calculated as follows: - First row, first column: 1*7 + 2*9 + 3*11 = 58 - First row, second column: 1*8 + 2*10 + 3*12 = 64 - Second row, first column: 4*7 + 5*9 + 6*11 = 139 - Second row, second column: 4*8 + 5*10 + 6*12 = 154","solution":"def matrix_multiply(matrix_a, matrix_b): Multiplies two matrices if possible and returns the resultant matrix. If matrix multiplication is not possible, returns an empty list. # Number of rows and columns in matrix_a rows_a, cols_a = len(matrix_a), len(matrix_a[0]) if matrix_a else 0 # Number of rows and columns in matrix_b rows_b, cols_b = len(matrix_b), len(matrix_b[0]) if matrix_b else 0 # Check if matrix multiplication is possible if cols_a != rows_b: return [] # Resultant matrix initialized to zero result = [[0 for _ in range(cols_b)] for _ in range(rows_a)] # Perform matrix multiplication for i in range(rows_a): for j in range(cols_b): for k in range(cols_a): result[i][j] += matrix_a[i][k] * matrix_b[k][j] return result"},{"question":"In a distant city, the transportation company has introduced a new bus fare policy based on the number of kilometers traveled and the number of passengers in the bus. The fare for each trip is calculated using one of two formulas, depending on the number of passengers: 1. If the number of passengers P is less than or equal to B, the fare F is calculated with the formula `F = K * P + C`, where K and C are constants. 2. If the number of passengers P is greater than B, the fare F is calculated with the formula `F = D + (K * P) / 2`, where D is another constant. You are given a list of trips, each with the distance traveled, the number of passengers, and the constants B, K, C, and D. Your task is to calculate and print the total fare collected by the transportation company for all given trips. Input: The first line contains T, the number of trips. For each trip, the following data is provided: - The first line contains five integers: B, K, C, D, and P — where B is the passenger threshold, K and C are the constants for the first fare formula, D is the constant used in the second fare formula, and P is the number of passengers. - The second line contains a single integer representing the number of kilometers traveled. Output: For each trip, print the total fare collected for that trip on a new line. Constraints: 1 ≤ T ≤ 100 0 ≤ B, K, C, D ≤ 100000 1 ≤ P ≤ 100000 1 ≤ distance traveled ≤ 1000 SAMPLE INPUT 3 10 5 20 30 12 15 8 10 15 25 5 20 15 3 18 22 10 30 SAMPLE OUTPUT 682 595 556 Explanation: For case 1: B = 10, K = 5, C = 20, D = 30, P = 12, distance = 15 Since P (12) > B (10), we use the second formula: F = D + (K * P) / 2 F = 30 + (5 * 12) / 2 = 30 + 30 = 60 per km Total fare = 60 * 15 = 900 For case 2: B = 8, K = 10, C = 15, D = 25, P = 5, distance = 20 Since P (5) ≤ B (8), we use the first formula: F = K * P + C F = 10 * 5 + 15 = 50 + 15 = 65 per km Total fare = 65 * 20 = 1300 For case 3: B = 15, K = 3, C = 18, D = 22, P = 10, distance = 30 Since P (10) ≤ B (15), we use the first formula: F = K * P + C F = 3 * 10 + 18 = 30 + 18 = 48 per km Total fare = 48 * 30 = 1440","solution":"def calculate_fare(trips): Calculate total fare for a list of trips. Args: trips (list): List of trip details where each trip contains: - B (int): Passenger threshold - K (int): Constant K - C (int): Constant C - D (int): Constant D - P (int): Number of passengers - distance (int): Distance traveled in kilometers Returns: list: List of total fares calculated for each trip fares = [] for trip in trips: B, K, C, D, P, distance = trip if P <= B: fare_per_km = K * P + C else: fare_per_km = D + (K * P) / 2 total_fare = fare_per_km * distance fares.append(total_fare) return fares"},{"question":"You are a game developer working on a new simulation game. In the game, each player controls a robot that moves around a grid following a set of commands. The commands are given in a string where each character represents a direction: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. The robot starts at the origin (0, 0) of the grid. It moves according to the commands in the string. Your task is to determine the final position of the robot after executing all the commands. Write a function that will take in the commands string and output the final coordinates of the robot. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a single string consisting of the commands. ------ Output Format ------ For each test case, print the final coordinates of the robot as a pair of integers (x, y). ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ |commands| ≤ 10^5 - The total number of characters across all commands will not exceed 10^6. - The commands string will contain only the characters \'U\', \'D\', \'L\', \'R\'. ----- Sample Input 1 ------ 3 UUUDD LLRR UDLR ----- Sample Output 1 ------ (0, 1) (0, 0) (0, 0) ----- Explanation 1 ------ Test case 1: The robot moves \'U\' (up) thrice and then \'D\' (down) twice, ending at (0, 1). Test case 2: The robot moves \'L\' (left) twice and \'R\' (right) twice, ending back at the origin (0, 0). Test case 3: The robot moves \'U\' (up) once, \'D\' (down) once, \'L\' (left) once, and \'R\' (right) once, ending back at the origin (0, 0).","solution":"def get_final_position(commands): Returns the final coordinates of the robot after executing the series of commands. :param str commands: A string containing the commands. :return: A tuple (x, y) representing the final coordinates. :rtype: tuple x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y) def process_test_cases(test_cases): Processes multiple test cases and returns the results for each case :param list test_cases: List of strings where each string is a set of commands. :return: List containing final coordinates for each set of commands. :rtype: list of tuples results = [] for commands in test_cases: results.append(get_final_position(commands)) return results"},{"question":"You are working with an unordered list of integers. Your task is to determine if it is possible to partition the list into two subsets such that the sum of the elements in both subsets is equal. Write a function that returns a boolean indicating whether such a partition is possible. Function Signature: ```python def canPartition(nums: List[int]) -> bool: ``` # Input - `nums` (List[int]): A list of integers with 1 <= nums.length <= 200 and 1 <= nums[i] <= 100. # Output - Return `True` if you can partition the given list into two subsets with equal sum, otherwise return `False`. # Examples ```python Example 1: Input: nums = [1, 5, 11, 5] Output: True Explanation: The list can be partitioned as [1, 5, 5] and [11]. Example 2: Input: nums = [1, 2, 3, 5] Output: False Explanation: The list cannot be partitioned into equal sum subsets. ``` # Note: - The length of the list does not exceed 200. - Each element in the list does not exceed 100. Handles the conditions related to sums and partitions efficiently using dynamic programming or other suitable techniques.","solution":"from typing import List def canPartition(nums: List[int]) -> bool: total_sum = sum(nums) # If total sum is odd, it\'s not possible to partition into two equal subsets if total_sum % 2 != 0: return False target_sum = total_sum // 2 n = len(nums) dp = [[False] * (target_sum + 1) for _ in range(n + 1)] # Initialize the dp where sum 0 is always possible for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, target_sum + 1): if j >= nums[i - 1]: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]] else: dp[i][j] = dp[i - 1][j] return dp[n][target_sum]"},{"question":"Vladislav is a photographer who loves capturing the beauty of nature. Recently, he bought a new camera and decided to go for a photography tour. During his tour, he noticed an interesting pattern in the arrangement of trees. Vladislav decided to represent the trees as a string consisting of lowercase English letters. Each character in the string represents a unique type of tree. Vladislav wants to capture trees such that he maximizes the diversity of tree types in his photos. He also wants to capture the trees in a lexicographically smallest order. Vadislav can perform the following operation any number of times: - Choose any non-empty substring of the string representing trees and capture all the trees in that substring into his photo, effectively removing them from the original string. He must perform operations until the string of trees becomes empty. What is the lexicographically smallest sequence of captured substrings that will maximize the diversity of tree types in each substring? A string x is lexicographically smaller than a string y if and only if one of the following holds: - x is a prefix of y, but x neq y; - in the first position where x and y differ, the string x has a letter that appears earlier in the alphabet than the corresponding letter in y. -----Input----- The first line of the input contains a single integer t (1 leq t leq 100) — the number of test cases. This is followed by the test case descriptions. The second line of each test case contains a string consisting of lowercase English letters which represents the types of trees in a row. The length of the string will be at most 100. -----Output----- For each test case, output the lexicographically smallest sequence of captured substrings that maximizes the diversity of tree types in each substring. -----Examples----- Input 3 oxoxoxox efedcba abcdefgh Output oxeoxoxox abcdefedc a-b-c-d-e-f-g-h -----Note----- In the first test case, the substrings captured by Vladislav are: - \'ox\' - \'ox\' - \'ox\' - \'ox\' which yield the arrangement \'oxeoxoxox\' and ensures maximal tree diversity in each substring. In the second test case, the substrings captured by Vladislav are: - \'abcdef\' - \'edc\' which yield the arrangement \'abcdefedc\' and ensures maximal tree diversity in each substring. In the third test case, the substrings captured by Vladislav are: - \'a\' - \'b\' - \'c\' - \'d\' - \'e\' - \'f\' - \'g\' - \'h\' which yield the arrangement \'a-b-c-d-e-f-g-h\' and ensures maximal tree diversity in each substring.","solution":"def capture_trees(t, test_cases): Returns the lexicographically smallest sequence of captured substrings that maximizes the diversity of tree types in each substring for each test case. :param t: Number of test cases :param test_cases: A list of strings, each representing a row of trees :return: A list of strings with the desired substring sequence for each test case results = [] for trees in test_cases: unique_trees = sorted(set(trees)) result = \'\'.join(unique_trees) results.append(result) return results"},{"question":"A company needs a system to manage its employees\' work schedules. One of the key features is to determine which employees are available at a given time. Every employee works in blocks of hours throughout the week. Each block is defined by a start time and an end time and includes the days of the week the block applies to. Implement a program to process the employees\' schedules and answer queries about their availability. Input The first line contains two integers `e` and `q` (1 ≤ e, q ≤ 200) — the number of employees and number of queries. Each of the next `e` lines describes an employee\'s schedule, starting with an integer `b_i` (1 ≤ b_i ≤ 10), the number of time blocks in that employee\'s schedule. Each of the next `b_i` lines contains a string `days` (a combination of \'M\', \'T\', \'W\', \'R\', \'F\', \'S\', \'U\', where each letter denotes a day of the week) and two integers `start` and `end` (0 ≤ start < end ≤ 24), representing the start and end times of the block in 24-hour format. Each of the next `q` lines contains a string `query_day` and an integer `query_time` (0 ≤ query_time ≤ 24), representing a day of the week and a time in 24-hour format. Output For each query, print one line containing the list of employee indices (1-based) who are available at the given time on the given day. If no employees are available, print an empty list. Example Input 3 3 2 MTWRF 9 17 S 10 14 1 U 0 24 3 MWF 19 22 TR 9 12 SU 13 18 R 10 U 5 M 20 Output [1, 3] [2] [3] Explanation In the example: - Employee 1 is available from 9 to 17 on Monday through Friday, and from 10 to 14 on Saturday. - Employee 2 is available all day on Sunday. - Employee 3 is available from 19 to 22 on Monday, Wednesday, and Friday; from 9 to 12 on Tuesday and Thursday; and from 13 to 18 on Saturday and Sunday. For the queries: - On Thursday at 10, Employee 1 and Employee 3 are available. - On Sunday at 5, only Employee 2 is available. - On Monday at 20, only Employee 3 is available.","solution":"def process_schedules(e, q, employee_schedules, queries): availabilities = [] # Parse employee schedules employees = [] for i in range(e): blocks = [] b_i = employee_schedules[i][0] for j in range(1, b_i + 1): days, start, end = employee_schedules[i][j] blocks.append((set(days), start, end)) employees.append(blocks) # Process each query for query_day, query_time in queries: available_employees = [] for index, blocks in enumerate(employees): for days, start, end in blocks: if query_day in days and start <= query_time < end: available_employees.append(index + 1) break availabilities.append(available_employees) return availabilities"},{"question":"In a school, students are standing in a line, where the i-th student\'s height is heights[i]. Rearrange the students such that no two adjacent students have the same height. You may return any answer, and it is guaranteed an answer exists. Example 1: Input: [5,5,5,6,6,6] Output: [6,5,6,5,6,5] Example 2: Input: [4,4,4,4,5,5,6,6] Output: [4,5,4,6,4,5,4,6] Note: 1 <= heights.length <= 10000 1 <= heights[i] <= 10000","solution":"def rearrange_students(heights): Rearrange students such that no two adjacent students have the same height. # Create a dictionary to count the frequencies of each height from collections import defaultdict height_count = defaultdict(int) for h in heights: height_count[h] += 1 # Create a max-heap based on the frequency of heights from heapq import heappush, heappop max_heap = [] for height, count in height_count.items(): heappush(max_heap, (-count, height)) result = [] prev_height = None prev_count = 0 while max_heap: count, height = heappop(max_heap) result.append(height) if prev_count < 0: heappush(max_heap, (prev_count, prev_height)) prev_height = height prev_count = count + 1 # decrease frequency count return result"},{"question":"Weather Pattern Analysis You are given a grid of temperature recordings for the past week, where each cell in the grid represents the average temperature recorded in a particular city for a particular day. Your task is to identify and count the number of heatwave patterns in the grid. A heatwave is defined as a sequence of three or more consecutive cells (vertically, horizontally, or diagonally) that all have the same temperature. Write a program to count the number of distinct heatwave patterns in the given temperature grid. Input The input consists of multiple datasets. Each dataset is formatted as follows: - The first line contains a single integer N (1 ≤ N ≤ 10), the size of the NxN grid. - The next N lines contain N integers each, separated by a space, representing the temperature recordings in the grid. The input ends with a line containing a single zero. Output For each dataset, output the number of distinct heatwave patterns in a line. Output lines may not include any characters except the digits expressing the counts. Sample Input 3 30 30 30 25 30 25 30 25 30 4 35 35 35 35 35 36 36 36 35 35 37 37 35 35 35 38 0 Sample Output 3 7 Explanation In the first dataset, there are three heatwave patterns: 1. (0,0) to (0,2) horizontally. 2. (0,0) to (2,0) vertically. 3. (0,0) to (2,2) diagonally. In the second dataset, there are seven heatwave patterns, considering all possible directions. You need to identify and count such patterns for each dataset. Example Input 3 30 30 30 25 30 25 30 25 30 4 35 35 35 35 35 36 36 36 35 35 37 37 35 35 35 38 0 Output 3 7","solution":"def count_heatwaves(grid): Count the number of heatwave patterns in the given NxN grid. A heatwave is a sequence of three or more consecutive cells (vertically, horizontally, or diagonally) that all have the same temperature. :param grid: List of lists containing integers representing the temperature grid. :return: The number of distinct heatwave patterns. N = len(grid) if N == 0: return 0 def check_heatwave(i, j, di, dj): temp = grid[i][j] length = 0 while 0 <= i < N and 0 <= j < N and grid[i][j] == temp: i += di j += dj length += 1 return length >= 3 heatwave_count = 0 # Check horizontally, vertically, and diagonally for i in range(N): for j in range(N): if j + 2 < N and check_heatwave(i, j, 0, 1): # horizontal heatwave_count += 1 if i + 2 < N and check_heatwave(i, j, 1, 0): # vertical heatwave_count += 1 if i + 2 < N and j + 2 < N and check_heatwave(i, j, 1, 1): # diagonal down-right heatwave_count += 1 if i + 2 < N and j - 2 >= 0 and check_heatwave(i, j, 1, -1): # diagonal down-left heatwave_count += 1 return heatwave_count def process_multiple_datasets(input_data): Process multiple datasets from the input data and return heatwave counts for each dataset. :param input_data: List of strings containing the input data. :return: List of integers representing the number of heatwave patterns for each dataset. input_lines = input_data.split(\'n\') results = [] index = 0 while index < len(input_lines): N = int(input_lines[index]) if N == 0: break grid = [] for i in range(N): grid.append(list(map(int, input_lines[index + 1 + i].split()))) heatwave_count = count_heatwaves(grid) results.append(heatwave_count) index += N + 1 return results"},{"question":"Luna is a huge fan of astronomy and loves to watch lunar eclipses. On certain days, multiple lunar events (either a partial lunar eclipse \'P\' or a total lunar eclipse \'T\') can be observed. Each type of eclipse event has a specific duration: a partial lunar eclipse spans 3 hours and a total lunar eclipse lasts 5 hours. Luna keeps a record of the events she observed each day. However, there is a catch: Lunar events must be separated by at least one hour to be counted as distinct. Therefore, if the total duration of events in a day exceeds 8 hours, the observation time for that day is capped at 8 hours. Determine the total number of hours Luna spends watching lunar events, given the sequence of events for several days. Assume Luna always starts watching at the beginning of the first event on each day. -----Input----- The input begins with the number of test cases T. Each test case has a single line of letters. The i-th letter is either \'P\' or \'T\' denoting a partial lunar eclipse or a total lunar eclipse Luna observed on the i-th day. -----Output----- For each case, output the total number of hours Luna spends watching lunar events. -----Constraints----- - T ≤ 100 - 1 ≤ length of each sequence ≤ 100 -----Example----- Input: 3 PTP PTPTPP TTTTPPPT Output: 8 8 8 -----Explanation----- Example 1: Luna spends 3 hours on the first \'P\', 1 hour gap, 5 hours on \'T\', and another hour gap, finally 3 hours on the last \'P\'. Since the total is 12 hours and capped at 8 hours, output is 8. Example 2: Luna spends 3+1+3+1+5+1+3 hours, capped at 8 hours. Example 3: Luna spends 5+1+5+1+5 hours, capped at 8 hours.","solution":"def lunar_event_duration(events): Calculate the total number of hours Luna spends watching lunar events. Capping the total duration to 8 hours per day due to the required separation. Parameters: events (str): A sequence of \'P\' and \'T\' denoting partial and total lunar eclipses. Returns: int: The total number of hours spent watching lunar events, capped at 8 hours. DURATION = {\'P\': 3, \'T\': 5} MAX_HOURS = 8 total_hours = 0 for event in events: total_hours += DURATION[event] + 1 # include the 1-hour gap if total_hours >= MAX_HOURS: return MAX_HOURS # If total hours is less than MAX_HOURS, subtract the last 1 hour gap added if total_hours > 0: total_hours -= 1 return min(total_hours, MAX_HOURS) def total_watching_hours(test_cases): Process multiple test cases. Parameters: test_cases (list): A list of strings each representing a sequence of lunar events for a day. Returns: list: A list of integers where each integer is the capped total number of hours for the corresponding day\'s events. return [lunar_event_duration(events) for events in test_cases]"},{"question":"In a city, there is a train track with m stations. A train travels between these stations and stops at each station exactly once. The train has two possible speeds: normal and fast. There are certain routes where the train must travel at fast speed to reach the destination station on time, while on other routes, it can travel at normal speed. Given the distances between each consecutive pair of stations and whether fast speed is required for each route, calculate the minimum time the train will take to travel from the first to the last station. The travel time is calculated as follows: If the train travels at normal speed on a route, it takes the distance of that route as time. If the train travels at fast speed on a route, it takes half of the distance (rounded up to the nearest integer) as time. At the beginning of the journey, the train is at the first station. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). Description of the test cases follows. The first line of each test case contains the number of stations m (2 leq m leq 100). The second line of each test case contains m-1 integers d_1, d_2, dots, d_{m-1} (1 le d_i le 100), where d_i represents the distance between the (i+1)-th station and the i-th station. The third line of each test case contains m-1 integers f_1, f_2, dots, f_{m-1} (0 le f_i le 1). If f_i = 1, the train must travel at fast speed on the route between the (i+1)-th station and the i-th station; otherwise, it can travel at normal speed. -----Output----- For each test case print a single integer — the minimum time the train takes to travel from the first to the last station. -----Examples----- Input 3 3 4 2 1 0 4 5 10 4 0 1 1 2 7 1 Output 4 9 4 -----Note----- In the first test case, the train must travel fast on the first route (taking 4 / 2 = 2 time), and normal on the second route (taking 2 time), so the total time is 2 + 2 = 4. In the second test case, the train travels normal on the first route (taking 5 time), fast on the second route (taking 10 / 2 = 5 time), and fast on the third route (taking 4 / 2 = 2 time), so the total time is 5 + 5 + 2 = 12.","solution":"def min_travel_time(test_cases): results = [] for case in test_cases: m, distances, fast_speeds = case total_time = 0 for i in range(m-1): if fast_speeds[i] == 1: total_time += -(-distances[i] // 2) # Fast speed, round up division else: total_time += distances[i] # Normal speed results.append(total_time) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): m = int(lines[index]) distances = list(map(int, lines[index+1].split())) fast_speeds = list(map(int, lines[index+2].split())) test_cases.append((m, distances, fast_speeds)) index += 3 return test_cases def format_output(results): return \\"n\\".join(map(str, results)) # Example usage input_string = 3 3 4 2 1 0 4 5 10 4 0 1 1 2 7 1 test_cases = parse_input(input_string) results = min_travel_time(test_cases) output = format_output(results) print(output)"},{"question":"In a mysterious forest, Marauders and Guardians roam through a grid. Guardians always protect the Marauders they encounter within a certain range. Each Marauder seeks to be protected by at least one Guardian. The Marauders and Guardians can move between adjacent cells that share a side. The forest contains obstacles that neither Marauders nor Guardians can pass through. Your task is to determine the minimal time required for each Marauder to be within the protection range of at least one Guardian. If it is impossible to protect all Marauders, return -1. Here is the detailed information: Input The first line contains four integers: n, m, marauders, guardians (0 ≤ marauders, guardians ≤ n*m). n and m are dimensions of the forest; marauders and guardians are numbers of Marauders and Guardians present. Next n lines describe the forest. Each of these lines contains m characters. Character \'.\' stands for a free cell; character \'#\' stands for a cell with an obstacle. The next line contains a single integer p (1 ≤ p ≤ n, m): the range within which a Guardian can protect a Marauder. The next marauders lines contain three integers r, c, and t (1 ≤ r ≤ n, 1 ≤ c ≤ m, 1 ≤ t ≤ 109): the initial coordinates of each Marauder and the time it takes this Marauder to move to an adjacent cell. The next guardians lines contain the initial coordinates and movement times of each Guardian in the same format. All Marauders and Guardians start in cells without obstacles. The problem consists of two subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of each subproblem. The points are as follows: * In subproblem F1 (14 points), the constraints 1 ≤ n, m ≤ 11 will hold. * In subproblem F2 (6 points), the constraints 1 ≤ n, m ≤ 22 will hold. Output Output the minimum possible time it takes to ensure all Marauders are within the protection range of at least one Guardian, or -1 if it is impossible. Example Input 4 4 2 2 .... .#.. ..#. .... 2 1 1 1 3 3 2 2 2 1 4 4 1 Output 2 Input 3 3 1 1 .#. .#. .#. 1 1 1 1 3 3 1 Output -1 Explanation In the first example, the Marauders and Guardians are in a 4 by 4 forest. Marauders initially reside in cells (1, 1) and (3, 3), and Guardians are in cells (2, 2) and (4, 4). With a protection range of 2, they can optimally move such that Marauders end up within range in 2 units of time. In the second example, it\'s impossible to bring the single Marauder to the solitary Guardian within the given constraints, hence the output is -1.","solution":"from collections import deque def bfs(forest, starts, n, m): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] dist = [[float(\'inf\')] * m for _ in range(n)] q = deque() for start in starts: r, c, t = start q.append((r, c, t)) dist[r][c] = 0 while q: r, c, t = q.popleft() for d in directions: nr, nc = r + d[0], c + d[1] if 0 <= nr < n and 0 <= nc < m and forest[nr][nc] == \'.\' and dist[nr][nc] > dist[r][c] + t: dist[nr][nc] = dist[r][c] + t q.append((nr, nc, t)) return dist def min_time_to_protect_all_marauders(n, m, marauders, guardians, forest, p, marauder_locs, guardian_locs): if guardians == 0: return -1 guardian_distances = bfs(forest, guardian_locs, n, m) max_time = 0 for marauder in marauder_locs: r, c, t = marauder in_range = False for i in range(n): for j in range(m): if guardian_distances[i][j] != float(\'inf\') and abs(i - r) + abs(j - c) <= p: max_time = max(max_time, guardian_distances[i][j]) in_range = True break if in_range: break if not in_range: return -1 return max_time # Example usage: n = 4 m = 4 marauders = 2 guardians = 2 forest = [ \\"....\\", \\".#..\\", \\"..#.\\", \\"....\\" ] p = 2 marauder_locs = [(0, 0, 1), (2, 2, 2)] guardian_locs = [(1, 1, 1), (3, 3, 1)] print(min_time_to_protect_all_marauders(n, m, marauders, guardians, forest, p, marauder_locs, guardian_locs)) # Output: 2"},{"question":"In a certain city, there are n intersections connected by m bidirectional roads. Each road has an associated travel time. A tourist wants to explore the city starting from one intersection and visiting all other intersections exactly once before returning to the starting point. This problem is known as the \\"Travelling Salesman Problem\\" (TSP). Your task is to find the minimum travel time required for the tourist to complete his journey. Given a graph with n vertices (intersections) and m edges (roads), return the minimum travel time required to visit all vertices exactly once and return to the starting point. Example 1: Input: n = 4, m = 6 edges = [(1, 2, 10), (1, 3, 15), (1, 4, 20), (2, 3, 35), (2, 4, 25), (3, 4, 30)] Output: 80 Explanation: One possible route is 1 -> 2 -> 4 -> 3 -> 1 with total travel time 10 + 25 + 30 + 15 = 80. Example 2: Input: n = 3, m = 3 edges = [(1, 2, 5), (2, 3, 10), (3, 1, 4)] Output: 19 Explanation: Only possible route is 1 -> 2 -> 3 -> 1 with total travel time 5 + 10 + 4 = 19. Your Task: Since this is a function problem, you don\'t need to take any input. You just need to complete the function `minTravelTime(n, m, edges)` which takes the number of vertices n, number of edges m, and a list of edges (each edge is represented as a tuple (u, v, w) where u and v are intersections and w is the travel time) and returns the minimum travel time required for the tourist to complete his journey. Expected Time Complexity: O(n^2 * 2^n); where n is the number of intersections. Expected Auxiliary Space: O(n * 2^n). Constraints: 1 ≤ n ≤ 10 1 ≤ m ≤ 20 1 ≤ travel time ≤ 100","solution":"def minTravelTime(n, m, edges): import itertools # Create an adjacency matrix with high initial values (inf for practicality) inf = float(\'inf\') graph = [[inf]*n for _ in range(n)] # Fill the adjacency matrix with edge values for u, v, w in edges: graph[u-1][v-1] = w graph[v-1][u-1] = w # Initialize dp array with inf values, dimensions [2^n][n] dp = [[inf] * n for _ in range(1 << n)] # Starting point: visiting first node dp[1][0] = 0 # Iterate over every subset of vertices for mask in range(1 << n): for u in range(n): if mask & (1 << u): for v in range(n): if mask & (1 << v) == 0: next_mask = mask | (1 << v) dp[next_mask][v] = min(dp[next_mask][v], dp[mask][u] + graph[u][v]) # The answer will be the minimum value of returning to the starting node after visiting all nodes min_time = inf for u in range(1, n): min_time = min(min_time, dp[(1 << n) - 1][u] + graph[u][0]) return min_time"},{"question":"In a code-breaking mission, Ethan Hunt needs to decode a series of encrypted messages to save the day. The messages are encoded as sequences of numbers, and Ethan needs to find a specific pattern within each sequence. The pattern is defined as the longest contiguous subarray such that the difference between the maximum and minimum element in the subarray is less than or equal to a given value \'K\'. Your task is to help Ethan by writing a program that finds the length of this longest contiguous subarray for each encrypted message. Constraints 1 ≤ T ≤ 10000 1 ≤ Length of sequence ≤ 10000 0 ≤ K ≤ 100000 1 ≤ Sequence elements ≤ 100000 Input The first line contains the number of test cases T. Each test case consists of two lines. The first line contains the value of K. The second line contains the sequence of integers. Output For each test case, output the length of the longest contiguous subarray that satisfies the given condition. Sample Input 2 5 1 3 6 7 8 2 1 2 1 2 1 Sample Output 4 5 Explanation For the first test case, the longest contiguous subarray where the difference between the maximum and minimum element is ≤ 5 is [1, 3, 6, 7]. Hence, the output is 4. For the second test case, the entire sequence [1, 2, 1, 2, 1] satisfies the condition where the difference between the maximum and minimum element is ≤ 2. Hence, the output is 5.","solution":"def longest_subarray_with_limit(nums, k): from collections import deque max_d = deque() min_d = deque() left = 0 result = 0 for right in range(len(nums)): while max_d and nums[max_d[-1]] <= nums[right]: max_d.pop() while min_d and nums[min_d[-1]] >= nums[right]: min_d.pop() max_d.append(right) min_d.append(right) while nums[max_d[0]] - nums[min_d[0]] > k: left += 1 if max_d[0] < left: max_d.popleft() if min_d[0] < left: min_d.popleft() result = max(result, right - left + 1) return result def solve_cases(test_cases): results = [] for k, sequence in test_cases: results.append(longest_subarray_with_limit(sequence, k)) return results"},{"question":"In a grid of size NxM, you start from the top-left corner (1,1) and want to reach the bottom-right corner (N,M). You are only allowed to move right or down. Some cells contain obstacles, which prevent you from passing through them. Write a function to determine the number of different paths you can take to reach the bottom-right corner, given that some cells contain obstacles. -----Input----- The first line of input contains two integers, N and M (1 leq N, M leq 1000), the number of rows and columns of the grid. The next N lines each contain M integers (0 or 1) where 0 represents an open cell and 1 represents an obstacle. -----Output----- Output a single integer, the number of different paths from the top-left to the bottom-right corner. If there\'s no path, output 0. -----Examples----- Sample Input 1: 3 3 0 0 0 0 1 0 0 0 0 Sample Output 1: 2 Sample Input 2: 3 3 0 1 0 1 0 0 0 0 0 Sample Output 2: 0","solution":"def count_paths_with_obstacles(grid): Returns the number of different paths from the top-left corner (1,1) to the bottom-right corner (N,M) in a grid with obstacles. Obstacles are marked as 1 and open cells are marked as 0. N = len(grid) M = len(grid[0]) if N > 0 else 0 if grid[0][0] == 1 or grid[N-1][M-1] == 1: return 0 dp = [[0]*M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[N-1][M-1]"},{"question":"You are given a grid with dimensions M x N, where each cell contains a positive integer representing the cost to enter that cell. You start at the top-left cell (0, 0) and you want to reach the bottom-right cell (M-1, N-1). You can only move either right or down at any point in time. Your task is to find the minimum cost path from the top-left cell to the bottom-right cell. For example, given the following grid: ``` [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` The minimum cost path would be 1 → 3 → 1 → 1 → 1, for a total cost of 7. # Input - A non-empty 2D array `costs` of size `M x N` where `costs[i][j]` represents the cost to enter the cell (i, j). # Output - An integer representing the minimum cost to reach the bottom-right cell from the top-left cell. # Constraints 1. `1 <= M, N <= 100` 2. `1 <= costs[i][j] <= 1000` # Example ```python def min_cost_path(costs): # Your code here # Example usage costs = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(min_cost_path(costs)) # Output: 7 ```","solution":"def min_cost_path(costs): Returns the minimum cost to reach from (0, 0) to (M-1, N-1) in the given costs grid. M, N = len(costs), len(costs[0]) dp = [[0] * N for _ in range(M)] dp[0][0] = costs[0][0] # Initialize first row for j in range(1, N): dp[0][j] = dp[0][j - 1] + costs[0][j] # Initialize first column for i in range(1, M): dp[i][0] = dp[i - 1][0] + costs[i][0] # Populate the rest of dp table for i in range(1, M): for j in range(1, N): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + costs[i][j] return dp[M - 1][N - 1]"},{"question":"You are given an integer array. Your task is to find the largest number that can be formed by concatenating the array elements and return it as a string. Each integer in the array must be treated as a whole number, and you cannot break them into digits individually. For example, given the array [3, 30, 34, 5, 9], the largest number that can be formed is `\\"9534330\\"`. Make sure to handle cases where the result might have leading zeros, and the output should not start with any zero unless the entire result is zero.","solution":"from functools import cmp_to_key def largest_number(nums): Given a list of non-negative integers nums, return the largest number that can be formed by concatenating the array elements. # Convert the integers to strings to compare and concatenate nums_str = list(map(str, nums)) # Custom comparator to order numbers for the largest concatenation def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Sort numbers based on the custom comparator nums_sorted = sorted(nums_str, key=cmp_to_key(compare)) # Concatenate the sorted numbers largest_num = \'\'.join(nums_sorted) # Handle the case where the largest concatenation is zero if largest_num[0] == \'0\': return \'0\' return largest_num"},{"question":"Given an array of integers of size N . Find the length of the longest contiguous subarray such that all its elements are even. output Output the length of the longest contiguous subarray containing only even numbers. Also, output a line feed at the end. Example Input 6 1 2 4 6 1 8 Output 3","solution":"def longest_even_subarray(arr): Returns the length of the longest contiguous subarray consisting only of even numbers. max_len = 0 current_len = 0 for num in arr: if num % 2 == 0: current_len += 1 max_len = max(max_len, current_len) else: current_len = 0 return max_len"},{"question":"In a group of N people standing in a circle, every K-th person is eliminated until only one person remains. Given N and K, determine the position of the last person standing. Example 1: Input: N = 5, K = 2 Output: 3 Explanation: People are eliminated in the following order: 2, 4, 1, 5. The last person remaining is at position 3. Example 2: Input: N = 7, K = 3 Output: 4 Explanation: People are eliminated in the following order: 3, 6, 2, 7, 5, 1. The last person remaining is at position 4. Your Task: You do not need to read input or print anything. Your task is to complete the function josephusPosition() which takes the integer N and the integer K as input parameters and returns the position of the last person standing. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^4 1 ≤ K ≤ 10^6","solution":"def josephusPosition(N, K): Returns the position of the last person remaining in the Josephus problem for N people and step K. Args: N (int): Number of people in the circle. K (int): Step rate for elimination. Returns: int: Position of the last person remaining. if N == 1: return 1 else: return (josephusPosition(N - 1, K) + K - 1) % N + 1"},{"question":"A matrix is called special if each row contains a unique set of integers between 1 and n (inclusive) and each column contains a unique set of integers between 1 and n (inclusive). A submatrix of a given matrix is any rectangular portion of the matrix obtained by deleting zero or more rows/columns from the top, bottom, left, or right sides. Given an n x n matrix, determine if there exists at least one submatrix that is special. For example: 2 3 1 1 2 3 3 1 2 is a special matrix because the whole given matrix itself is special. The submatrix: 2 3 1 2 is also special. However, a matrix such as: 1 2 3 1 2 3 1 2 3 does not contain any special submatrices. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. Each test case starts with a single integer n (1 le n le 50) — the size of the matrix. The next n lines each contain n integers a_{ij} (1 le a_{ij} le n) — the elements of the matrix. -----Output----- For each test case, print YES if there exists at least one special submatrix, and NO otherwise. -----Examples----- Input 2 3 2 3 1 1 2 3 3 1 2 3 1 2 3 1 2 3 1 2 3 Output YES NO -----Note----- In the first test case, the entire matrix is special. In the second test case, no submatrix is special since all rows and columns contain same numbers repeatedly.","solution":"def is_special(matrix, n): def check_unique(nums): return sorted(nums) == list(range(1, n + 1)) for r1 in range(n): for r2 in range(r1, n): submatrix_rows = matrix[r1:r2 + 1] for c1 in range(n): for c2 in range(c1, n): submatrix = [row[c1:c2 + 1] for row in submatrix_rows] if len(submatrix) != len(submatrix[0]): continue if (all(check_unique(row) for row in submatrix) and all(check_unique([submatrix[i][j] for i in range(len(submatrix))]) for j in range(len(submatrix[0])))): return True return False def special_submatrix_exists(t, test_cases): results = [] for case in test_cases: n, matrix = case if is_special(matrix, n): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function that takes a string as input and returns `true` if the string contains all the letters of the English alphabet at least once, and `false` otherwise. About the English Alphabet The English alphabet consists of 26 letters: from `a` to `z`. For example: - The string \\"The quick brown fox jumps over the lazy dog\\" contains all the letters of the English alphabet. - The string \\"Hello, World!\\" does not contain all the letters of the English alphabet. # Constraints The input string can contain: - Uppercase and lowercase English letters. - Spaces and punctuation characters. You need to check the string in a case-insensitive manner, meaning \'A\' and \'a\' should be considered the same letter. Example - Input: \\"Pack my box with five dozen liquor jugs.\\" - Output: `true` - Input: \\"Hello\\" - Output: `false`","solution":"def contains_all_letters(input_string): Returns true if the input string contains all the letters of the English alphabet at least once. alphabet_set = set(\\"abcdefghijklmnopqrstuvwxyz\\") input_set = set(input_string.lower()) return alphabet_set <= input_set"},{"question":"You\'re given a list of non-negative integers representing the heights of a row of buildings where each element in the list corresponds to the height of a building. Assume that it rains, and the water accumulates between the buildings. Write a function to determine how much water is trapped. -----Input----- The first line contains an integer n (0 le n le 10^5), the number of buildings. The second line contains n non-negative integers h_0, h_1, ldots, h_{n-1} (0 le h_i le 1000), the heights of the buildings. -----Output----- Print a single integer, the total units of water trapped. -----Example----- Input 6 0 1 0 2 1 0 1 3 2 1 2 1 Output 6 Input 9 4 2 0 3 2 5 Output 9 -----Note----- In the first example, the heights are [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]. The water trapped is 6 units. In the second example, the heights are [4, 2, 0, 3, 2, 5]. The water trapped is 9 units.","solution":"def trap_water(height): n = len(height) if n == 0: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Chef has an array of integers A of size N. Chef wants to answer Q queries regarding the subarray sums. Each query is of the form: L R: Given 1 ≤ L ≤ R ≤ N, Chef wants to know the sum of the subarray A[L, R]. For each query, output in a single line the sum of the subarray A[L, R]. ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - First line of each test case contains two integers N and Q. - Second line of each test case contains N integers A[i]. - Q lines follow, where the i^{th} line contains two integers L_{i} R_{i} - the i^{th} query. ------ Output Format ------ Output Q lines, where the i^{th} line contains the sum of the subarray A[L, R]. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 1 ≤ Q ≤ 10^{5} 1 ≤ L ≤ R ≤ N 1 ≤ A[i] ≤ 10^{9} - Sum of N over all test cases does not exceed 10^{6}. - Sum of Q over all test cases does not exceed 10^{6}. ------ Sample Input 1 ------ 1 5 3 1 2 3 4 5 1 3 2 5 1 5 ------ Sample Output 1 ------ 6 14 15 ------ Explanation 1 ------ Test Case 1: - For the first query, the subarray A[1, 3] = {1, 2, 3}. The sum is 1 + 2 + 3 = 6. - For the second query, the subarray A[2, 5] = {2, 3, 4, 5}. The sum is 2 + 3 + 4 + 5 = 14. - For the third query, the subarray A[1, 5] = {1, 2, 3, 4, 5}. The sum is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def subarray_sums(T, test_cases): results = [] for case in test_cases: N, Q, A, queries = case # Compute prefix sums prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i - 1] + A[i - 1] # Process each query for L, R in queries: result = prefix_sums[R] - prefix_sums[L - 1] results.append(result) return results"},{"question":"Alice is fond of permutations. One day she found an array of `N` distinct integers and decided to calculate how many permutations of this array exist such that for every permutation, the maximum absolute difference between any two consecutive elements is minimized. Your task is to find this minimum absolute difference. ------ Input ------ The first line contains an integer `T`, the number of test cases. The next lines contain the descriptions of the test cases. Each test case starts with an integer `N`, denoting the number of elements in the array. The next line contains `N` space-separated integers, representing the elements of the array. ------ Output ------ For each test case, output a single integer representing the minimized maximum absolute difference for any permutation. ------ Constraints ------ 1 leq T leq 10 2 leq N leq 1000 1 leq array elements leq 10^6 ------ Sample Input 1 ------ 2 3 1 3 6 4 4 10 1 7 ------ Sample Output 1 ------ 2 3 ------ Explanation 1 ------ In the first case, one optimal permutation is [1, 3, 6]. The differences are (3-1) = 2 and (6-3) = 3. The maximum difference is 3. In the second case, one optimal permutation is [1, 4, 7, 10]. The differences are (4-1) = 3, (7-4) = 3, and (10-7) = 3. The maximum difference is 3.","solution":"def min_max_diff_permutation(arr): Given an array of integers, returns the minimum possible maximum absolute difference between any two consecutive elements in any permutation of the array. arr.sort() min_max_diff = float(\'inf\') # Calculate the maximum difference for the sorted array for i in range(1, len(arr)): min_max_diff = min(min_max_diff, arr[i] - arr[i - 1]) return min_max_diff def process_test_cases(test_cases): Processes multiple test cases for the min_max_diff_permutation function. :param test_cases: List of test cases, where each test case is represented by a tuple containing the number of elements and the list of elements. :return: List of results for each test case. results = [] for case in test_cases: N, arr = case results.append(min_max_diff_permutation(arr)) return results"},{"question":"Alex is organizing a charity marathon with N participants, each having a unique participant number from 1 to N. In order to check the performance of participants, he plans to segment the marathon route into M checkpoints. Each participant\'s performance will be recorded by summing up the number of checkpoints visited by each participant. Due to the large number of participants, Alex wants to automate the process of counting checkpoints for each participant. Each participant starts at checkpoint 1 and visits all checkpoints sequentially until the last checkpoint M. Furthermore, at the start of the race, Alex divides the participants into groups of `K` participants each and assigns them different checkpoints to start from. Specifically, the first group of participants (participants 1 to K) starts from the first checkpoint, the second group of participants (participants K+1 to 2K) starts from the second checkpoint, and so on. Your task is to determine the total number of checkpoints each participant visits by the end of the race. ------ Input Format ------ - The first line of input will contain an integer T - the number of test cases. The description of the T test cases follows. - The first line of each test case contains three integers N, M, and K denoting the number of participants, the number of checkpoints, and the size of each group respectively. ------ Output Format ------ For each test case, output N integers, each representing the total number of checkpoints visited by the participants from 1 to N respectively. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N, M, K ≤ 100 ------ Sample Input 1 ------ 2 6 5 2 4 3 2 ------ Sample Output 1 ------ 5 5 5 5 5 5 3 3 3 3 ------ Explanation 1 ------ Test case 1: Each group of 2 participants starts at different checkpoints. So, in total, each participant will visit all 5 checkpoints by the end of the race. Test case 2: Each group of 2 participants starts at different checkpoints. So, in total, each participant will visit all 3 checkpoints by the end of the race.","solution":"def count_checkpoints(T, test_cases): results = [] for i in range(T): N, M, K = test_cases[i] results.append([M] * N) return results # Example usage: T = 2 test_cases = [(6, 5, 2), (4, 3, 2)] print(count_checkpoints(T, test_cases)) # Output should be [[5, 5, 5, 5, 5, 5], [3, 3, 3, 3]]"},{"question":"David is a robot who loves to collect gems. He explores a grid of size m x n where each cell can contain zero or more gems. David starts his journey at the top-left corner of the grid (i.e., cell (0, 0)). From any cell, David can move to the right or move down to the adjacent cell. David wants to collect the maximum number of gems possible by the time he reaches the bottom-right corner of the grid (i.e., cell (m-1, n-1)). Given the grid where each cell contains a non-negative integer representing the number of gems in that cell, devise an efficient algorithm to determine the maximum number of gems David can collect. You need to output this maximum number of gems. Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000), representing the number of rows and columns in the grid. Each of the next m lines contains n integers separated by spaces, where the integer at position (i, j) represents the number of gems in the cell (i, j) (0 ≤ gems in a cell ≤ 100). Output Print a single integer representing the maximum number of gems David can collect on his journey from the top-left to the bottom-right corner. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Explanation David can follow the path (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) to collect a total of 12 gems.","solution":"def max_gems(grid): m = len(grid) n = len(grid[0]) # Create a DP table initialized with zeros dp = [[0] * n for _ in range(m)] # Initialize the first cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from the top) for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the maximum number of gems that can be collected return dp[m-1][n-1]"},{"question":"You\'re given a list of integers, and you need to determine the smallest positive integer that is missing from the list. A positive integer is an integer greater than zero. You are required to implement a function: ```python def find_missing_integer(nums: List[int]) -> int: pass ``` # Input The function\'s argument `nums` is a list of integers, which can be empty or contain up to 10^6 integers. The integers can range from -10^6 to 10^6. # Output The function should return an integer, representing the smallest positive integer that is missing from the input list. # Constraints - The length of `nums` can be up to 10^6. - The integers in `nums` can be in the range [-10^6, 10^6]. # Examples ```python find_missing_integer([-1, -3, 1, 2, 3]) # Output: 4 ``` Explanation: The smallest positive integer not present in the list is `4`. ```python find_missing_integer([2, 3, 7, 6, 8, -1, -10, 15]) # Output: 1 ``` Explanation: The smallest positive integer not present in the list is `1`. ```python find_missing_integer([1, 2, 3, 4, 5]) # Output: 6 ``` Explanation: The smallest positive integer not present in the list is `6`. # Notes - You should strive for a solution with a time complexity of O(n) and a space complexity of O(1) (excluding the input list itself). - As a hint, consider that the problem can be reduced to finding the first position where the integer does not match its index (if you shift the index to start from 1).","solution":"def find_missing_integer(nums): This function finds the smallest positive integer missing from the list `nums`. n = len(nums) # Mark elements out of range and handle presence of 1 contains_one = False for i in range(n): if nums[i] == 1: contains_one = True if nums[i] <= 0 or nums[i] > n: nums[i] = 1 if not contains_one: return 1 # Use index as a hash to rearrange the array for i in range(n): index = abs(nums[i]) - 1 nums[index] = -abs(nums[index]) # Identify the first positive missing number for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"Design a function that takes a list of integers and returns the length of the longest contiguous subarray with an equal number of even and odd numbers. A contiguous subarray is defined as a sequence of consecutive elements within the original array. For example, in the array ([1, 2, 3, 4]), ([2, 3]) is a contiguous subarray. The function should efficiently handle edge cases such as an array with only odd or even numbers. **Input:** The input consists of a single list of integers, where each integer can be positive, negative, or zero. The length of the list is between 1 and 100, inclusive. **Output:** Output a single integer — the length of the longest contiguous subarray with an equal number of even and odd numbers. **Examples:** Input: [1, 2, 3, 4, 5, 6] Output: 6 Input: [1, 1, 1, 2, 2, 2, 3, 3, 3] Output: 6 **Note:** In the first example, the entire array has an equal number of even and odd numbers. In the second example, the longest contiguous subarray with equal numbers of even and odd is ([1, 2, 2, 2, 3, 3]).","solution":"def longest_equal_even_odd_subarray(arr): Returns the length of the longest contiguous subarray with an equal number of even and odd numbers. n = len(arr) if n == 0: return 0 # Calculate the prefix sums where we convert even to +1 and odd to -1. prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i+1] = prefix_sum[i] + (1 if arr[i] % 2 == 0 else -1) # Map to store the first occurrence of a given prefix_sum value first_occurrence = {} max_length = 0 for i in range(n + 1): if prefix_sum[i] in first_occurrence: max_length = max(max_length, i - first_occurrence[prefix_sum[i]]) else: first_occurrence[prefix_sum[i]] = i return max_length"},{"question":"Takahashi is a participant in a running club. He records his running distance for a month and wants to know the days on which he meets or exceeds his daily target distance. Given the number of days in a month and his running record for each day, determine the number of days his running distance was at least the target distance. Constraints * 1 le N le 31 * 0 le D_i le 1000 * 1 le T le 1000 * N is the number of days in a month. * D_i is the distance Takahashi ran on the i-th day. * T is the target distance Takahashi sets for each day. Input Input is given from Standard Input in the following format: N T D_1 D_2 ... D_N Output Print the number of days Takahashi\'s running distance was at least the target distance. Examples Input 5 5 3 6 4 7 5 Output 3 Input 7 10 11 12 9 10 15 8 7 Output 4","solution":"def count_days_meeting_target(n, t, distances): Returns the number of days the running distance was at least the target distance. Parameters: n (int): Number of days in the month. t (int): Target distance for each day. distances (list of int): Running distances for each day. Returns: int: Number of days where running distance was at least the target distance. count = 0 for distance in distances: if distance >= t: count += 1 return count # Example usage: # N = 5, T = 5 # distances = [3, 6, 4, 7, 5] # print(count_days_meeting_target(N, T, distances)) # Output should be 3"},{"question":"A group of friends is planning a hiking expedition and they use a very specific way to communicate their hiking plan. They shorten the names of locations to make communication easier and quicker. Each location has both a long name and a short name. For each location, the short name is either its abbreviated form or the first part of its long name, both of which are unique. Given a message consisting of location names in their long form, convert the message into a sequence using the shortest possible abbreviation names. Input: The first line contains two integers n and m (1 ≤ n ≤ 3000, 1 ≤ m ≤ 3000) - the number of locations in the message and the number of locations in total respectively. Each location name consists of at most 10 uppercase English letters. It\'s guaranteed that no name occurs in both the long form and the short form. Each location occurs in its form exactly once. The next m lines contain the names of the locations. The i-th line contains two strings L[i] and S[i], where L[i] is the long form of the location and S[i] is the short form of the location. The following line contains n space-separated strings, which represent the locations in the message in their long form. Output: n space-separated strings that form the message with the shortest possible abbreviation names. Sample Input: 5 3 MOUNTAIN MTN FOREST FOR RIVER RIV MOUNTAIN RIVER RIVER FOREST MOUNTAIN Sample Output: MTN RIV RIV FOR MTN SAMPLE INPUT 2 2 ALPS AL HIMALAYAS HIM ALPS HIMALAYAS SAMPLE OUTPUT AL HIM","solution":"def shorten_message(n, m, locations, message): # Create a dictionary to map long names to their shortest abbreviations location_dict = {} for L, S in locations: location_dict[L] = S if len(S) < len(L) else L # Shorten the message using the dictionary shortened_message = [location_dict[loc] for loc in message] return \' \'.join(shortened_message)"},{"question":"Binary Search Tree Validation Given the following Node class, write a function `is_valid_bst(root)` that checks if a binary tree is a valid Binary Search Tree (BST). A binary tree is a BST if, for each node, all elements in the left subtree are less than the node, and all elements in the right subtree are greater than the node. Here is the Node class: ```python class Node: def __init__(self, value): self.value = value self.left = None self.right = None ``` **Constraints:** - The number of nodes in the tree is in the range `[1, 10^4]`. - The values of the nodes are integers in the range `[-10^5, 10^5]`. # Example 1: ``` Input: root = [2,1,3] Output: True Explanation: 2 / 1 3 Returns `True` because the left child (1) is less than 2 and the right child (3) is greater than 2. ``` # Example 2: ``` Input: root = [5,1,4,None,None,3,6] Output: False Explanation: 5 / 1 4 / 3 6 Returns `False` because the right child of the root (4) is not greater than 5. ``` Implement the function `is_valid_bst(root)` to solve this problem. Note that the tree is represented using the provided Node class, and you\'ll need to construct the tree in your test cases/examples as shown above. Use recursion or iteration to traverse the binary tree and validate it according to the BST property.","solution":"class Node: def __init__(self, value): self.value = value self.left = None self.right = None def is_valid_bst(root, low=float(\'-inf\'), high=float(\'inf\')): if not root: return True if root.value <= low or root.value >= high: return False return is_valid_bst(root.left, low, root.value) and is_valid_bst(root.right, root.value, high)"},{"question":"You are given an array of numbers. A subarray is defined as a contiguous part of an array. You need to find the maximum sum of any non-empty subarray within the given array. Constraints: - The length of the array is between 1 and 3times 10^5 - The elements of the array are integers between -10^4 and 10^4 Input The first line of the input contains a single integer n, the length of the array. The second line contains n integers representing the elements of the array. Output Output a single integer representing the maximum sum of any non-empty subarray. Examples Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 5 1 2 3 4 5 Output 15 Input 7 -1 -2 -3 -4 -5 -6 -7 Output -1","solution":"def max_subarray_sum(arr): Returns the maximum sum of any non-empty subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) max_global = max(max_global, max_current) return max_global"},{"question":"# Task An escape room game is in progress! Given a list of puzzles along with their difficulty levels, and an integer that represents the combined maximum difficulty level the team of players can tackle, find the maximum number of unique puzzles the players can solve without exceeding the total difficulty level. Players must solve puzzles sequentially as they appear in the list. If adding the next puzzle exceeds the total difficulty, the players stop. **Note**: The list of puzzles can be very large. # Examples ``` puzzles = [1, 2, 3, 4, 5] max_difficulty = 10 result = 4 ``` * The players can tackle the first four puzzles ([1, 2, 3, 4]) with a total difficulty of 10. Including the 5th puzzle would exceed the maximum difficulty, so it\'s not included. ___ ``` puzzles = [5, 3, 7, 1, 2, 4] max_difficulty = 8 result = 2 ``` * The players can solve the first two puzzles ([5, 3]) with a total difficulty of 8. Including the next puzzle would exceed the maximum difficulty. * Note that puzzles must be solved in the given order. ___ ``` puzzles = [1, 1, 1, 1, 1, 1] max_difficulty = 4 result = 4 ``` * The players can solve the first four puzzles ([1, 1, 1, 1]) with a total difficulty of 4.","solution":"def max_puzzles_solved(puzzles, max_difficulty): Returns the maximum number of unique puzzles the players can solve without exceeding the total difficulty level. total_difficulty = 0 count = 0 for difficulty in puzzles: if total_difficulty + difficulty <= max_difficulty: total_difficulty += difficulty count += 1 else: break return count"},{"question":"You are given two arrays of integers a and b, both of length n. In one move, you can choose any length len from 1 to n and perform the following operation: Choose any contiguous subarray of the array a of length len and reverse it; at the same time choose any contiguous subarray of the array b of length len and reverse it as well. Note that during one move you reverse exactly one subarray of the array a and exactly one subarray of the array b. Also note that borders of subarrays you reverse in a and in b can be different, the only restriction is that you reverse the subarrays of equal length. For example, if len=3 and n=5, you can reverse a[0 dots 2] and b[2 dots 4], a[1 dots 3] and b[1 dots 3], but not a[0 dots 2] and b[0 dots 1]. Your task is to say if it is possible to make arrays a and b equal after some (possibly, empty) sequence of moves. You have to answer q independent test cases. -----Input----- The first line of the input contains one integer q (1 le q le 10^4) — the number of test cases. Then q test cases follow. The first line of the test case contains one integer n (1 le n le 2 cdot 10^5) — the length of a and b. The second line of the test case contains n integers a_1, a_2, dots, a_n — elements of array a. The third line of the test case contains n integers b_1, b_2, dots, b_n — elements of array b. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5 (sum n le 2 cdot 10^5). -----Output----- For each test case, print the answer on it — \\"YES\\" (without quotes) if it is possible to make arrays a and b equal after some (possibly, empty) sequence of moves and \\"NO\\" otherwise. -----Example----- Input 3 4 1 2 3 4 4 3 2 1 5 3 3 3 3 3 3 3 3 3 3 4 2 4 6 8 1 3 5 7 Output YES YES NO","solution":"def can_make_equal(q, test_cases): results = [] for i in range(q): n, a, b = test_cases[i] if sorted(a) == sorted(b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage # q = 3 # test_cases = [ # (4, [1, 2, 3, 4], [4, 3, 2, 1]), # (5, [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]), # (4, [2, 4, 6, 8], [1, 3, 5, 7]) # ] # print(can_make_equal(q, test_cases)) # Expected Output: [\\"YES\\", \\"YES\\", \\"NO\\"]"},{"question":"A team of M scientists is working in a well-organized research facility with state-of-the-art equipment. Each scientist can either collaborate or work independently on various projects. You\'re given an M x M matrix where the element at position (i, j) indicates the effectiveness of scientist i collaborating with scientist j. Your task is to determine the optimal order for scientists to collaborate such that the total effectiveness of collaboration is maximized. If multiple solutions exist, return the lexicographically smallest order. Input Format The first line contains the number of test cases T. T test cases follow. For each test case: - The first line contains the number of scientists M. - The next M lines contain M integers each, the effectiveness matrix. The i-th number in the j-th line represents the effectiveness of scientist j collaborating with scientist i. Constraints 1 ≤ T ≤ 10 2 ≤ M ≤ 10 1 ≤ effectiveness ≤ 100 Output Format Output T lines for T test cases. For each test case, output the optimal order of scientists to maximize the total effectiveness of collaboration, in a single line, as a space-separated list of integers. SAMPLE INPUT 2 3 1 2 3 4 5 6 7 8 9 4 10 20 30 40 15 25 35 45 20 30 40 50 25 35 45 55 SAMPLE OUTPUT 0 1 2 0 1 2 3","solution":"from itertools import permutations def total_effectiveness(order, matrix): total = 0 for i in range(len(order)): for j in range(len(order)): total += matrix[order[i]][order[j]] return total def optimal_order(matrix): M = len(matrix) all_orders = permutations(range(M)) max_effectiveness = -1 best_order = None for order in all_orders: effectiveness = total_effectiveness(order, matrix) if effectiveness > max_effectiveness: max_effectiveness = effectiveness best_order = order elif effectiveness == max_effectiveness: if best_order is None or order < best_order: best_order = order return best_order def solve(T, test_cases): results = [] for i in range(T): M, matrix = test_cases[i] order = optimal_order(matrix) results.append(\\" \\".join(map(str, order))) return results # Example usage: # T = 2 # test_cases = [ # (3, [[1, 2, 3], [4, 5, 6], [7, 8, 9]]), # (4, [[10, 20, 30, 40], [15, 25, 35, 45], [20, 30, 40, 50], [25, 35, 45, 55]]) # ] # print(solve(T, test_cases)) # Outputs: [\'0 1 2\', \'0 1 2 3\']"},{"question":"Alice is participating in a coding competition and encounters a grid-based puzzle. The puzzle consists of a rectangular grid of cells with R rows and C columns. Initially, the grid contains only zeros (0). Alice is required to fill the grid with integers according to the following rules: 1. Every integer in row i (1 ≤ i ≤ R) must be unique within that row. 2. Every integer in column j (1 ≤ j ≤ C) must be unique within that column. Alice needs to devise a strategy to fill the grid such that it satisfies these conditions. Write a program that generates one possible solution for filling the grid according to the rules. # Input Format - A single integer T denoting the number of test cases. - For each test case, a single line containing two integers R and C separated by a space, representing the number of rows and columns of the grid respectively. # Output Format - For each test case, output R lines, each containing C integers, representing the filled grid. If multiple solutions are possible, output any one of them. If it is impossible to fill the grid according to the conditions, output a single line containing \\"Impossible\\". # Constraints - 1 ≤ T ≤ 10 - 1 ≤ R, C ≤ 100 # Sample Input ``` 2 3 3 2 4 ``` # Sample Output ``` 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 ``` # Explanation In the first test case: - The 3x3 grid is filled with integers from 1 to 9 following the rules. In the second test case: - The 2x4 grid is filled with integers such that each row and each column contains unique values.","solution":"def solve_grid_puzzle(T, test_cases): results = [] for R, C in test_cases: if R > 100 or C > 100: results.append(\\"Impossible\\") continue grid = [[0] * C for _ in range(R)] if R == 1 and C == 1: grid[0][0] = 1 else: num = 1 for i in range(R): for j in range(C): grid[i][j] = num num += 1 results.append(grid) return results def format_results(results): formatted_output = [] for result in results: if result == \\"Impossible\\": formatted_output.append(\\"Impossible\\") else: for row in result: formatted_output.append(\\" \\".join(map(str, row))) return formatted_output def grid_puzzle_main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): R, C = int(data[index]), int(data[index + 1]) test_cases.append((R, C)) index += 2 results = solve_grid_puzzle(T, test_cases) formatted_output = format_results(results) for line in formatted_output: print(line)"},{"question":"In a certain village, there is a very special garden which is famous for its diverse species of flowers. The garden can be represented as a grid with n rows and m columns where each cell contains a specific type of flower. The village committee has decided to enhance the beauty of the garden by ensuring that each row in the garden contains exactly k distinct types of flowers. Your task is to determine if it is possible to rearrange the flowers in such a way that this condition is met. -----Input----- The first line contains three integers n, m, and k (1 leq n, m, k leq 1000), representing the number of rows, number of columns, and the exact number of distinct types of flowers required per row, respectively. The next n lines contain m integers each, where the j-th integer in the i-th line denotes the type of flower present in the cell (i, j). Each type of flower is represented by a unique positive integer. -----Output----- Output \\"possible\\" if it is possible to rearrange the flowers in the garden such that each row contains exactly k distinct types of flowers. Otherwise, output \\"impossible\\". -----Examples----- Sample Input 1: 3 4 3 1 2 3 4 5 6 7 8 9 10 11 12 Sample Output 1: possible Sample Input 2: 2 3 3 1 1 1 2 2 2 Sample Output 2: impossible Note: - In the first sample, one possible arrangement is: - Row 1: [1, 2, 3, 4] - Row 2: [5, 6, 7, 8] - Row 3: [9, 10, 11, 12] Each row has exactly 3 distinct types of flowers. - In the second sample, it is not possible to rearrange the flowers such that each row in the garden contains exactly 3 distinct types of flowers.","solution":"def is_possible_to_rearrange_flowers(n, m, k, garden): from collections import Counter if k > m: return \\"impossible\\" # We can\'t have more distinct flowers than the number of columns in each row count_flower_types = Counter() for row in garden: count_flower_types.update(row) total_unique_flower_types = len(count_flower_types) if total_unique_flower_types < k: return \\"impossible\\" # Not enough distinct flower types to meet the requirement return \\"possible\\""},{"question":"Ada is organizing a company\'s event and she has a budget to manage. Initially, the budget is zero, and Ada can perform various operations to increase or decrease the budget based on different expenses and income. The operations can be of two types: 1. add(x): Adds an amount x to the budget. 2. subtract(y): Subtracts an amount y from the budget, but the budget cannot go below zero. If subtracting y results in a negative budget, the budget remains zero. Ada keeps a history of operations in the event\'s ledger. Each operation in the ledger might include multiple actions of adding or subtracting money. After each operation, Ada wants to know the current budget balance. Help Ada by writing a program that processes a series of operations and outputs the current budget after each operation has been performed. Input The first line contains the integer n (1 ≤ n ≤ 105) — the number of operations. The next n lines each contains a list of actions. Each action is either `+x` (meaning add x) or `-y` (meaning subtract y). Operations within a single line are applied sequentially. It is guaranteed that 1 ≤ x, y ≤ 106. Output Print n integers. The i-th integer should be the budget after performing the i-th operation. Examples Input 3 +500 -200 +100 +300 -50 -600 +200 Output 300 650 250 Explanation: In the first example, the first operation adds 500 and then subtracts 200, resulting in 300. In the second example, the second operation first adds 100, then adds 300, and then subtracts 50, resulting in 650 after applying it to the previous budget of 300. In the third example, the third operation attempts to subtract 600, resulting in a budget of zero (as the budget cannot go negative). Then it adds 200, resulting in 250. Note that any operation that would result in a negative budget just sets the budget to zero instead of allowing a negative value.","solution":"def process_operations(n, operations): budget = 0 results = [] for operation in operations: actions = operation.split() for action in actions: sign = action[0] amount = int(action[1:]) if sign == \'+\': budget += amount elif sign == \'-\': budget -= amount if budget < 0: budget = 0 results.append(budget) return results"},{"question":"Carrying on from the concept of islands and bridges, let\'s explore a slightly different scenario revolving around movements and access constraints. Two explorers are planning a journey across a set of islands connected by bidirectional bridges. Each island can be uniquely identified with a number from 1 to N. A journey between islands is considered a complete trip if the explorers can travel from the starting island to another island and return back to the starting island. Given the current bridges, find out if it\'s possible to complete a trip for each pair of distinct islands by checking if both islands are in the same connected component (i.e., reachable from one another). Task: You need to figure out if for each provided pair (a_i, b_i), the explorers can complete a trip starting from a_i, reaching b_i, and then coming back to a_i. -----Constraints----- - All values in input are integers. - 2 ≤ N ≤ 10^5 - 1 ≤ M ≤ 10^5 - 1 ≤ K ≤ 10^5 - 1 ≤ u_i, v_i ≤ N - 1 ≤ a_i, b_i ≤ N -----Input----- Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 : u_M v_M K a_1 b_1 a_2 b_2 : a_K b_K - The first line contains two integers N (number of islands) and M (number of bridges). - The next M lines each contain two integers u_i and v_i, representing a bridge between island u_i and island v_i. - Next line contains the integer K (number of queries). - Next K lines each contain two integers a_i and b_i, representing a query pair to check if a trip between island a_i and b_i is possible. -----Output----- Print \\"YES\\" for each query if a trip is possible; otherwise, print \\"NO\\". -----Sample Input----- 5 4 1 2 2 3 3 4 4 5 3 1 5 2 4 1 3 -----Sample Output----- YES YES YES All pairs of islands are in the same connected component, meaning they can be reached from one another completing a trip for all given queries.","solution":"def can_complete_trip(N, M, bridges, K, queries): # Create ADJ list to represent graph from collections import defaultdict, deque adj = defaultdict(list) for u, v in bridges: adj[u].append(v) adj[v].append(u) # To keep track of connected components using DFS def dfs(node, comp_id): stack = [node] while stack: curr = stack.pop() if visited[curr]: continue visited[curr] = True component[curr] = comp_id for neighbor in adj[curr]: if not visited[neighbor]: stack.append(neighbor) visited = [False] * (N + 1) component = [-1] * (N + 1) # Find all connected components comp_id = 0 for i in range(1, N + 1): if not visited[i]: dfs(i, comp_id) comp_id += 1 # Check each query if a and b are in the same component result = [] for a, b in queries: if component[a] == component[b]: result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"You are organizing a local coding competition, and one of the problems involves checking string patterns. One of your tasks is to find specific subsequences in given strings. To simplify, you need to find if a string \'a\' is a subsequence of string \'b\'. A subsequence is a sequence that appears in the same relative order but not necessarily consecutively. You are given two strings \'a\' and \'b\', and you need to determine if \'a\' is a subsequence of \'b\'. -----Input----- The input consists of two lines. The first line contains the string \'a\' and the second line contains the string \'b\'. The lengths of strings \'a\' and \'b\' are between 1 and 100,000, inclusive. -----Output----- Print \\"YES\\" if \'a\' is a subsequence of \'b\', otherwise print \\"NO\\". -----Examples----- Input abc ahbgdc Output YES Input axc ahbgdc Output NO -----Note----- In the first example, \'abc\' appears as a subsequence in \'ahbgdc\', so the output is \\"YES\\". In the second example, \'axc\' does not appear in the same relative order in \'ahbgdc\', so the output is \\"NO\\".","solution":"def is_subsequence(a, b): Determines if string \'a\' is a subsequence of string \'b\'. a_len, b_len = len(a), len(b) a_idx, b_idx = 0, 0 while a_idx < a_len and b_idx < b_len: if a[a_idx] == b[b_idx]: a_idx += 1 b_idx += 1 return a_idx == a_len"},{"question":"Misha has a string containing only the characters \'1\', \'2\', and \'3\'. Misha considers a string beautiful if it follows these rules: 1. It consists of exactly three segments. 2. The first segment contains only \'1\'s, the second segment contains only \'2\'s, and the third segment contains only \'3\'s. 3. The segments can be of any length, including zero. Misha wants to make the string beautiful by removing some (possibly none) of the characters without changing their order. What is the maximum length of the string Misha can get? -----Input----- The input is a single non-empty string consisting of \'1\', \'2\', and \'3\' with a length not greater than 5,000 characters. -----Output----- Output a single integer — the maximum possible length of a beautiful string Misha can obtain. -----Examples----- Input 123123 Output 6 Input 112233 Output 6 -----Note----- In the first example, the given string is already beautiful. In the second example, the string is already in the correct order but could also be truncated to \\"112233\\" without removing any characters, making it six characters long.","solution":"def max_beautiful_string_length(s): Returns the maximum length of a beautiful string Misha can obtain. A beautiful string consists of exactly three segments, the first segment contains only \'1\'s, the second segment contains only \'2\'s, and the third segment contains only \'3\'s. count_1 = count_2 = count_3 = 0 for char in s: if char == \'1\': count_1 += 1 elif char == \'2\': count_2 += 1 elif char == \'3\': count_3 += 1 return count_1 + count_2 + count_3"},{"question":"**Problem statement** You are given an array of integers of size N. For this array, you need to answer Q queries. There are two types of queries: * Update the value at position (i) to (x). * Find the sum of the elements from position (l) to (r) (inclusive). # Input The input consists of the following format: ``` N Q a_1 a_2 ... a_N q_1 ... q_Q ``` Here, - (N) is the size of the array. - (Q) is the number of queries. - (a_i) is the initial integer value at the ith position in the array. - Each (q_i) is the three or four integers that represent the ith query and is one of the following: * (1 i x): Update the value at position (i) to (x). * (2 l r): Find the sum of elements from position (l) to (r) (inclusive). # Constraints - All inputs are integers. - (1 leq N leq 100,000) - (1 leq Q leq 100,000) - (0 leq a_i, x leq 10^6) - (0 leq l, r, i < N) - (l leq r) # Output Print the result for each sum query. # Example **Sample input 1:** ``` 5 5 1 2 3 4 5 2 0 4 1 3 10 2 1 3 1 0 6 2 0 2 ``` **Sample output 1:** ``` 15 19 12 ```","solution":"def process_queries(n, q, array, queries): # Initialize prefix sum array prefix_sum = [0] * (n + 1) # Build the initial prefix sum array for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + array[i] result = [] for query in queries: if query[0] == 1: # Update operation _, i, x = query current_value = array[i] array[i] = x diff = x - current_value for j in range(i + 1, n + 1): prefix_sum[j] += diff elif query[0] == 2: # Sum range operation _, l, r = query sum_value = prefix_sum[r + 1] - prefix_sum[l] result.append(sum_value) return result"},{"question":"# Task: You have to write a function `generate_triangle` which returns Pascal\'s Triangle as a string in formatted manner. In a Pascal\'s Triangle, each number is the sum of the two numbers directly above it. Parameters: generate_triangle( n ); ^ | Number of rows Pascal\'s Triangle should have Rules/Note: * If `n < 1` then it should return \\"\\" i.e. empty string. * Numbers in each row should be separated by spaces. * Range of Parameters: + `n ∈ [0,100]` # Examples: * generate_triangle(5): 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 * generate_triangle(7): 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1 1 6 15 20 15 6 1 * generate_triangle(3): 1 1 1 1 2 1","solution":"def generate_triangle(n): if n < 1: return \\"\\" triangle = [] for i in range(n): # Create a row with \'1\' at the start row = [1] * (i + 1) # Calculate the values for the row if beyond the second row if i > 1: for j in range(1, i): row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j] # Append the row to the triangle triangle.append(row) # Convert to the required string format triangle_str = \'n\'.join([\' \'.join(map(str, row)) for row in triangle]) return triangle_str"},{"question":"You are given a string of words separated by spaces. Each word in the string is encoded by shifting each letter by a fixed number of positions in the alphabet. This fixed number is different for each word in the string. Your task is to decode the message by determining the correct shift value for each word. You realize that the correct shift for each word must make it a valid English word, and your job is to find and apply these shifts to decode the entire message. Here is an example: ``` Encoded message: \\"ymj vznhp gwtbs ktc ozrux tajw ymj qfed itl\\" ``` Decoded message: \\"the quick brown fox jumps over the lazy dog\\" Write a function `decode_message` that takes in the encoded message as a string and returns the decoded message. Assume that you have access to a list of valid English words which you can use to verify the correctness of your decoded words. ```python def decode_message(encoded_message: str) -> str: # Your code here ``` Use the English words list to determine and apply the correct shift value for each word to decode the message. Ensure your function handles spaces correctly and the resulting decoded message is properly formatted.","solution":"from collections import Counter # Assuming a pre-defined set of valid English words ENGLISH_WORDS = set([ \'the\', \'quick\', \'brown\', \'fox\', \'jumps\', \'over\', \'lazy\', \'dog\', \'hello\', \'world\', \'this\', \'is\', \'an\', \'example\' # A comprehensive list would include all English words ]) def shift_char(c, shift): Shift a character by given shift if c.isalpha(): base = \'a\' if c.islower() else \'A\' return chr((ord(c) - ord(base) - shift) % 26 + ord(base)) return c def is_valid_word(word): return word.lower() in ENGLISH_WORDS def decode_word(word): for shift in range(26): decoded_word = \'\'.join(shift_char(c, shift) for c in word) if is_valid_word(decoded_word): return decoded_word return word # In case no valid word is found (fallback to original) def decode_message(encoded_message): words = encoded_message.split() decoded_words = [decode_word(word) for word in words] return \' \'.join(decoded_words)"},{"question":"Ben has a garden with ( n ) types of flowers. Each type of flower has its own beauty value. Ben wants to pick a set of flowers such that the sum of their beauty values is maximized and the set of flowers satisfies the following condition: no two picked flowers should have the same type. Given the constraints on how many flowers Ben can pick, help Ben determine the maximum possible beauty value he can obtain. Input The first line contains an integer ( n ) (1 ≤ ( n ) ≤ ( 2 times 10^5 )) — the number of types of flowers. Each of the next ( n ) lines contains two integers ( t_i ) and ( b_i ) (1 ≤ ( t_i ) ≤ ( 10^9 ), 1 ≤ ( b_i ) ≤ ( 10^9 )), where ( t_i ) represents the type of flower and ( b_i ) represents the beauty value of that type of flower. Output Print the maximum possible sum of beauty values that Ben can obtain by picking the flowers under the condition that no two picked flowers can have the same type. Examples Input 4 1 5 2 3 1 4 3 2 Output 10 Input 3 1 10 2 5 3 7 Output 22 Input 5 3 9 2 8 3 5 1 7 2 6 Output 15 Note In the first example, Ben can pick the flowers of types 1, 2, and 3. The sum of their beauty values will be 10 (5 + 3 + 2). In the second example, since all flowers have different types, Ben can pick all of them, and the total sum of their beauty values will be 22 (10 + 5 + 7). In the third example, the optimal set of flowers Ben can pick would be of types 1, 3, and the best representative of type 2 which has a beauty value of 8, giving a total beauty value of 24 (9 + 7 + 8).","solution":"def max_beauty(n, flowers): This function returns the maximum possible sum of beauty values, satisfying the condition that no two picked flowers should have the same type. :param n: int - Number of types of flowers :param flowers: List[Tuple[int, int]] - List of tuples where each tuple (t_i, b_i) represents type of flower and its beauty value :return: int - Maximum possible sum of beauty values # Dictionary to store the maximum beauty value for each flower type flower_dict = {} for t_i, b_i in flowers: if t_i in flower_dict: # Update the beauty value if the current one is larger flower_dict[t_i] = max(flower_dict[t_i], b_i) else: flower_dict[t_i] = b_i # Sum up the maximum beauty values of the unique types max_beauty_sum = sum(flower_dict.values()) return max_beauty_sum"},{"question":"In this task, you are given a series of commands to manipulate a list of integers. Each command is either an insertion, deletion, or query operation. The objective is to process each command and maintain the list accordingly. For insertion and deletion commands, modify the list as specified. For query commands, return the required information. The commands are structured as follows: - \\"insert x\\": Insert the integer x at the end of the list. - \\"delete x\\": Remove the first occurrence of the integer x from the list. If the integer is not found, do nothing. - \\"query x\\": Print the number of occurrences of the integer x in the list. Input The first line contains an integer n (1 ≤ n ≤ 100000), the number of commands. The next n lines contain one command each, as described above. Output For each \\"query\\" command, output the result on a new line. Examples Input 5 insert 5 insert 3 query 5 delete 5 query 5 Output 1 0 Input 6 insert 2 insert 2 insert 3 query 2 delete 2 query 2 Output 2 1 Note In the first example, after the \\"insert 5\\" and \\"insert 3\\" commands, the list becomes [5, 3]. The \\"query 5\\" command asks for the number of times 5 appears in the list, which is 1. The \\"delete 5\\" command removes the first occurrence of 5, resulting in the list [3]. The second \\"query 5\\" command then returns 0 as 5 is no longer in the list. In the second example, after the three insertions, the list becomes [2, 2, 3]. The first \\"query 2\\" command results in 2. The \\"delete 2\\" command removes the first occurrence of 2, resulting in [2, 3]. The final \\"query 2\\" command results in 1.","solution":"def process_commands(n, commands): result = [] lst = [] for command in commands: parts = command.split() cmd, x = parts[0], int(parts[1]) if cmd == \\"insert\\": lst.append(x) elif cmd == \\"delete\\": if x in lst: lst.remove(x) elif cmd == \\"query\\": result.append(lst.count(x)) return result"},{"question":"You are given a collection of books and shelves. Each book has a specific height and each shelf has a maximum height limit. You want to place all the books on the shelves such that the number of shelves used is minimized. Each shelf can carry books such that the sum of the heights of books on that shelf doesn\'t exceed the shelf height limit. You cannot split a book between two shelves. Given the number of books and their respective heights, as well as the height limit of the shelves, find the minimum number of shelves required to place all the books. Input Format The first line of input contains an integer T, the number of test cases. Each test case contains: - An integer N, the number of books. - N space-separated integers representing the heights of the books. - An integer H, the height limit of each shelf. Output Format For each test case, print the minimum number of shelves required to place all the books. Constraints 1 ≤ T ≤ 20 1 ≤ N ≤ 1000 1 ≤ height of each book ≤ 10^6 1 ≤ H ≤ 10^9 Sample Input 2 4 1 2 3 4 5 5 5 3 8 2 6 10 Sample Output 2 3 Explanation In the first test case: - The first shelf can hold books with heights 1, 2, and 3 (total height = 6). - The second shelf can hold the fourth book with height 4. In the second test case: - The first shelf can hold the first two books with heights 5 and 3 (total height = 8). - The second shelf can hold the third book with height 8. - The third shelf can hold the fifth book with height 6.","solution":"def min_shelves_required(T, test_cases): results = [] for i in range(T): N, book_heights, H = test_cases[i] book_heights.sort(reverse=True) # Sort books by descending height shelves = [] for height in book_heights: placed = False for shelf in shelves: if sum(shelf) + height <= H: shelf.append(height) placed = True break if not placed: shelves.append([height]) results.append(len(shelves)) return results"},{"question":"Given a N * N square matrix B, return the spiral order traversal of its elements. Example 1: Input: N = 3 B = [[ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ]] Output: 1 2 3 6 9 8 7 4 5 Explanation: Hence, elements will be returned in the order {1, 2, 3, 6, 9, 8, 7, 4, 5}. Example 2: Input: N = 4 B = [[ 1, 2, 3, 4 ], [ 5, 6, 7, 8 ], [ 9, 10, 11, 12 ], [ 13, 14, 15, 16 ]] Output: 1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10 Explanation: Hence, elements will be returned in the order {1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10}. Your Task: You don\'t need to read input or print anything. Your task is to complete the function spiralOrder() which takes an integer N and a 2D matrix B[ ][ ] as input parameters and returns the list of all elements of its in spiral order. Expected Time Complexity: O(N*N) Expected Auxiliary Space: O(N*N) Constraints: 1 ≤ N ≤ 1000 0 ≤ B[i][j] ≤ 10^{6}","solution":"def spiralOrder(N, B): Returns the elements of the N x N matrix B in spiral order. result = [] if not B or N == 0: return result left, right, top, bottom = 0, N - 1, 0, N - 1 while left <= right and top <= bottom: # Traverse from left to right for j in range(left, right + 1): result.append(B[top][j]) top += 1 # Traverse from top to bottom for i in range(top, bottom + 1): result.append(B[i][right]) right -= 1 if top <= bottom: # Traverse from right to left for j in range(right, left - 1, -1): result.append(B[bottom][j]) bottom -= 1 if left <= right: # Traverse from bottom to top for i in range(bottom, top - 1, -1): result.append(B[i][left]) left += 1 return result"},{"question":"You have been tasked with designing a pathfinding algorithm to navigate a 2D grid. The grid is represented as an `n x m` matrix where each cell can either be free (denoted by \'.\') or an obstacle (denoted by \'#\'). Your goal is to determine the minimum number of steps required to move from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). You can only move up, down, left, or right. The grid is guaranteed to have at least one valid path from the start to the end. ------ Input ------ The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers n and m, denoting the dimensions of the grid. Each of the next n lines contains a string of length m, representing the grid. ------ Output ------ For each test case, output a single integer: the minimum number of steps required to reach the bottom-right corner from the top-left corner. ------ Constraints ------ 1 ≤ T ≤ 5 2 ≤ n, m ≤ 1000 ------ Example ------ Input: 2 3 3 ... .#. ... 4 4 .... .. .#.. .... Output: 4 6 Explanation: - In the first test case, the path is right -> right -> down -> down. - In the second test case, the path is down -> down -> right -> right -> down -> right.","solution":"from collections import deque def minimum_steps(grid): n, m = len(grid), len(grid[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Down, Up, Right, Left queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if (x, y) == (n-1, m-1): # Reached bottom-right corner return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 # Not reachable, though guaranteed to be reachable by the problem statement def solve_pathfinding(T, test_cases): results = [] for case in test_cases: n, m, grid = case results.append(minimum_steps(grid)) return results"},{"question":"In this programming challenge, you are given an array of integers. Your task is to determine whether there is any sub-array (a contiguous block of elements within the array) that adds up to exactly zero. If such a sub-array exists, return \\"YES\\"; otherwise, return \\"NO\\". A sub-array can consist of one or more elements, and the elements do not need to be distinct. Input: The first line of input consists of a single integer N, representing the number of elements in the array. The second line of input consists of N space-separated integers, representing the elements of the array. Output: Output \\"YES\\" if there exists a sub-array with a sum of zero. Otherwise, output \\"NO\\". Constraints: 1 ≤ N ≤ 10^5 -10^4 ≤ Ai ≤ 10^4 SAMPLE INPUT 5 4 2 -3 1 6 SAMPLE OUTPUT YES Explanation: In the given example, the sub-array with elements [4, 2, -3] sums up to 0, so the output is \\"YES\\". SAMPLE INPUT 4 1 2 3 4 SAMPLE OUTPUT NO Explanation: In this example, no sub-array sums up to 0, so the output is \\"NO\\".","solution":"def has_zero_sum_subarray(arr): Determine whether there is any sub-array (a contiguous block of elements) that adds up to exactly zero. Parameters: arr (list): The list of integers. Returns: str: \\"YES\\" if there exists a sub-array with a sum of zero, otherwise \\"NO\\". prefix_sum_set = set() prefix_sum = 0 for num in arr: prefix_sum += num if prefix_sum == 0 or prefix_sum in prefix_sum_set: return \\"YES\\" prefix_sum_set.add(prefix_sum) return \\"NO\\""},{"question":"Marta and Larissa have decided to organize their collection of post-it notes. There are N post-it notes, each with a unique priority from 1 to N. The post-it notes are currently arranged in a sequence based on these priorities. Marta and Larissa want to rearrange these post-it notes in a way that they are sorted in increasing order of their priorities. They can perform the following operation any number of times: - Select exactly one post-it note and move it to the beginning or the end of the sequence. Your task is to determine the minimum number of operations required to sort the post-it notes in increasing order of their priorities. ------ Input Format ------ - The first line contains a single integer N, the number of post-it notes. - The second line contains N integers P_{1}, P_{2}, ldots, P_{N}, where P_{i} is the priority of the i-th post-it note in the current arrangement. ------ Output Format ------ Print a single integer, the minimum number of operations required to sort the post-it notes in increasing order of their priorities. ------ Constraints ------ 1≤N ≤100,000 1≤P_{i}≤N and all P_{i} are distinct ------ Sample Input 1 ------ 5 2 4 1 3 5 ------ Sample Output 1 ------ 3 ------ Explanation 1 ------ Explanation of the first testcase: The initial sequence of post-it notes is [2, 4, 1, 3, 5]. We can perform the following operations: 1. Move the post-it note with priority 4 to the end of the sequence: [2, 1, 3, 5, 4]. 2. Move the post-it note with priority 1 to the beginning of the sequence: [1, 2, 3, 5, 4]. 3. Move the post-it note with priority 4 to the end of the sequence: [1, 2, 3, 4, 5]. This requires a total of 3 operations to sort the post-it notes in increasing order. ------ Sample Input 2 ------ 4 3 1 2 4 ------ Sample Output 2 ------ 2 ------ Explanation 2 ------ Explanation of the second testcase: The initial sequence of post-it notes is [3, 1, 2, 4]. We can perform the following operations: 1. Move the post-it note with priority 3 to the end of the sequence: [1, 2, 4, 3]. 2. Move the post-it note with priority 4 to the end of the sequence: [1, 2, 3, 4]. This requires a total of 2 operations to sort the post-it notes in increasing order.","solution":"def min_operations_to_sort(N, priorities): # Initialize an array pos where pos[i] stores the position of element (i+1) in current array pos = [0] * N for idx in range(N): pos[priorities[idx] - 1] = idx # Find the length of the longest increasing subsequence in pos length_of_lis = 1 current_length = 1 for i in range(1, N): if pos[i] > pos[i - 1]: current_length += 1 length_of_lis = max(length_of_lis, current_length) else: current_length = 1 # Return the minimum number of operations required return N - length_of_lis"},{"question":"Lea is playing with a row of colored tiles. The row consists of n tiles, each tile colored with one of the k distinct colors. Lea wants to find the number of ways to color the row such that no two adjacent tiles have the same color. -----Input----- The first line contains two integers n (1 ≤ n ≤ 1000) and k (2 ≤ k ≤ 1000) — the number of tiles and the number of distinct colors. -----Output----- Print a single integer, the number of ways to color the row such that no two adjacent tiles have the same color. Since the answer might be large, print it modulo 10^9 + 7. -----Examples----- Input 3 3 Output 12 Input 4 2 Output 2 -----Explanation----- In the first example, there are 3 colors and 3 tiles. The possible colorings are different for each adjacent pair due to the restriction, resulting in 12 valid colorings. In the second example, there are 2 colors and 4 tiles. The valid colorings must ensure no repeating adjacent colors, giving 2 possible combinations such as ABAB and BABA.","solution":"def count_ways_to_color_tiles(n, k): Calculates the number of ways to color the row of n tiles with k distinct colors so that no two adjacent tiles have the same color. MOD = 10**9 + 7 if n == 1: return k elif n == 2: return k * (k - 1) % MOD dp = [0] * (n + 1) dp[1] = k dp[2] = k * (k - 1) % MOD for i in range(3, n + 1): dp[i] = (dp[i - 1] * (k - 1)) % MOD return dp[n]"},{"question":"You are hosting a series of lectures over a span of days, and each lecture can only be attended once. Each lecture has a start time and an end time, and you aim to attend as many lectures as possible without any of them overlapping. Problem statement Given a list of lectures with their start and end times, determine the maximum number of lectures you can attend. Input format The first line contains an integer N, the number of lectures. Each of the next N lines contains two integers, the start and end time of a lecture, space-separated. Constraints * 1 ≤ N ≤ 1000 * 1 ≤ start time, end time ≤ 10000 * Start time of a lecture is always less than its end time. Output format Output a single integer, the maximum number of non-overlapping lectures you can attend. Input example 1 5 1 4 2 3 3 5 4 6 5 7 Output example 1 3 Input example 2 3 1 2 2 3 3 4 Output example 2 3 Input example 3 4 1 3 2 4 3 5 5 6 Output example 3 3","solution":"def max_non_overlapping_lectures(N, lectures): # Sort lectures by end time lectures.sort(key=lambda x: x[1]) count = 0 end_time = 0 for lecture in lectures: if lecture[0] >= end_time: count += 1 end_time = lecture[1] return count"},{"question":"You are given a grid with N rows and M columns, where each cell contains a positive integer representing its height. Your goal is to determine the number of \\"valley\\" cells in the grid. A cell is considered a \\"valley\\" if its height is strictly less than the height of all its 4-directionally adjacent cells (top, bottom, left, and right). Constraints * 1 leq N, M leq 2 times 10^3 * 1 leq height of each cell leq 10^6 Input The input is provided via standard input in the following format: N M grid[1][1] grid[1][2] ... grid[1][M] grid[2][1] grid[2][2] ... grid[2][M] ... grid[N][1] grid[N][2] ... grid[N][M] Output Print the number of valley cells. Examples Input 3 3 5 4 5 4 1 4 5 4 5 Output 1 Input 4 4 10 20 20 10 20 5 5 20 20 5 5 20 10 20 20 10 Output 4 Input 2 3 3 3 3 3 1 3 Output 1","solution":"def count_valley_cells(grid, N, M): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valley(i, j): for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < N and 0 <= nj < M and grid[i][j] >= grid[ni][nj]: return False return True valley_count = 0 for i in range(N): for j in range(M): if is_valley(i, j): valley_count += 1 return valley_count if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = [] idx = 2 for _ in range(N): row = list(map(int, data[idx:idx + M])) grid.append(row) idx += M print(count_valley_cells(grid, N, M))"},{"question":"You are given a string that represents a mathematical expression containing non-negative integers and the operators +, -, *, and /. Write a function that evaluates the expression and returns the result as an integer. The input string may contain spaces which should be ignored. You can assume that the input expression is properly formatted and does not contain any parentheses. For example: ``` evaluate(\\"3+5 / 2\\") => 5 evaluate(\\" 12 * 3 - 4 / 2 \\") => 34 evaluate(\\"2+3*2\\") => 8 ``` Note: - The division operator (/) should be treated as integer division. - The input string will always have valid space-separated tokens representing the expression.","solution":"def evaluate(expression): def apply_operator(operators, values): right = values.pop() left = values.pop() op = operators.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) elif op == \'/\': values.append(left // right) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 tokens = expression.replace(\\" \\", \\"\\") values = [] operators = [] i = 0 while i < len(tokens): if tokens[i].isdigit(): val = 0 while i < len(tokens) and tokens[i].isdigit(): val = val * 10 + int(tokens[i]) i += 1 values.append(val) i -= 1 else: while (operators and precedence(operators[-1]) >= precedence(tokens[i])): apply_operator(operators, values) operators.append(tokens[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"Given an array of integers, implement a function rearrangeArray() that rearranges the array in a specific manner. The condition is to rearrange the array in such a way that every second element of the array is greater than its previous and next elements. Input Format: - First line contains an integer T, representing the number of test cases. - Each test case contains two lines: - First line of each test case contains an integer N, representing the length of the array. - The second line contains N space-separated integers which are the elements of the array. Output Format: - For each test case, output the rearranged array in a new line. If there are multiple valid solutions, output any of them. User Task: The task is to complete the function rearrangeArray() which takes the array and its size as inputs and rearranges the array according to the above conditions. Constraints: 1 <= T <= 100 1 <= N <= 1000 0 <= A[i] <= 10^5 Example: Input: 2 6 1 3 4 2 5 6 5 9 7 4 2 1 Output: 1 4 3 5 2 6 7 9 4 2 1 Explanation: Testcase 1: The output array 1 4 3 5 2 6 is arranged such that every second element is larger than its adjacent elements. Testcase 2: The output array 7 9 4 2 1 is arranged such that every second element (9 and 2) is larger than its adjacent elements.","solution":"def rearrangeArray(arr, n): Rearranges the array such that every second element is greater than its previous and next elements. # Sort the array arr_sorted = sorted(arr) # Create a new array to store the rearranged elements result = [0] * n j = 0 # Fill every second position with the largest remaining elements for i in range(1, n, 2): result[i] = arr_sorted.pop() # Fill the remaining positions with the smallest elements for i in range(0, n, 2): if arr_sorted: result[i] = arr_sorted.pop(0) return result def processTestCases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] results.append(rearrangeArray(arr, N)) return results # Sample usage # T = 2 # test_cases = [(6, [1, 3, 4, 2, 5, 6]), (5, [9, 7, 4, 2, 1])] # print(processTestCases(T, test_cases))"},{"question":"Given an array of integers, you need to find and print the length of the longest sequence of consecutive numbers that can be obtained by rearranging the elements of the array. Two numbers are considered consecutive if the difference between them is 1. Input Format The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. Output Format Print the length of the longest sequence of consecutive numbers. Constraints 1 ≤ n ≤ 1000 -10^5 ≤ array[i] ≤ 10^5 Sample Input 7 100 4 200 1 3 2 101 Sample Output 4 Explanation The longest sequence of consecutive numbers that can be formed is [1, 2, 3, 4]. Hence, the length is 4.","solution":"def longest_consecutive_sequence(arr): Returns the length of the longest sequence of consecutive numbers that can be obtained by rearranging the elements of the array. Parameters: arr (list of int): List of integers. Returns: int: Length of the longest sequence of consecutive numbers. if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in num_set: if num - 1 not in num_set: # start of a sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given N nodes in a graph, where each node is uniquely indexed from 1 to N. Initially, each node is its own tree. You need to process Q queries that are either of type 1 (add an edge) or 2 (find the size of the tree containing a particular node). Specifically: 1. Add an edge between two nodes u and v. This will merge the two trees containing u and v into a single tree. 2. For a given node x, determine the number of nodes in the tree containing x. Write a function to handle these queries and provide the results for queries of type 2. Use a union-find (disjoint-set) data structure to efficiently manage the operations. # Input * The first line consists of two integers N and Q - the number of nodes and the number of queries, respectively. * The next Q lines contain queries; each query is in one of the following two formats: - `1 u v` - Add an edge between nodes u and v. - `2 x` - Find the size of the tree containing node x. # Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ Q ≤ 10^5 * 1 ≤ u, v, x ≤ N # Output For each query of type 2, output the size of the tree containing the given node x. # Example Input ``` 5 5 1 1 2 1 3 4 2 1 1 2 3 2 1 ``` Output ``` 2 4 ``` # Note * After the first query, nodes 1 and 2 are connected in a single tree of size 2. * After the second query, nodes 3 and 4 are connected in a single tree of size 2. * The third query asks for the size of the tree containing node 1, which is 2. * After the fourth query, nodes 1, 2, 3, and 4 are all connected in a single tree of size 4. * The fifth query asks for the size of the tree containing node 1, which is now 4.","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size + 1)) self.rank = [1] * (size + 1) self.size = [1] * (size + 1) def find(self, node): if self.parent[node] != node: self.parent[node] = self.find(self.parent[node]) return self.parent[node] def union(self, node1, node2): root1 = self.find(node1) root2 = self.find(node2) if root1 != root2: if self.rank[root1] > self.rank[root2]: self.parent[root2] = root1 self.size[root1] += self.size[root2] elif self.rank[root1] < self.rank[root2]: self.parent[root1] = root2 self.size[root2] += self.size[root1] else: self.parent[root2] = root1 self.size[root1] += self.size[root2] self.rank[root1] += 1 def get_size(self, node): root = self.find(node) return self.size[root] def process_queries(N, Q, queries): uf = UnionFind(N) results = [] for query in queries: if query[0] == 1: _, u, v = query uf.union(u, v) elif query[0] == 2: _, x = query results.append(uf.get_size(x)) return results"},{"question":"Bob the Builder loves building walls with bricks. He has a collection of bricks of varying heights and wants to construct the tallest wall possible with the bricks he has. However, there\'s a catch: Bob\'s bricks are not all the same height, and for stability, Bob has decided that he will only stack bricks on top of each other if the height of the brick below is greater than or equal to the height of the brick above. Given the heights of the bricks Bob has, help him determine the height of the tallest wall he can build under these conditions. Input The input file consists of several cases T (1 ≤ T ≤ 10). The first line of each case contains a positive integer N (1 ≤ N ≤ 100000) specifying the number of bricks. In the next line there are N space-separated values H[1..N] (1 ≤ H[i] ≤ 1000000) which are the heights of the bricks Bob has. Output For each test case, output a single integer which represents the height of the tallest wall Bob can build. SAMPLE INPUT 2 5 3 1 4 1 5 4 10 20 30 40 SAMPLE OUTPUT 12 100 Explanation In the first test case, the possible walls are [5], [4, 1], [3, 1], etc. The tallest possible wall height is from the sequence [3, 1, 1, 5]. (The order can be rearranged such as [5] or [4, 1] giving a max height of [3+1+1+5] = 12). In the second test case, Bob can stack all bricks in descending order since they are already given in ascending order to form a wall of height 100.","solution":"def tallest_wall_height(T, cases): Given T test cases with different sets of brick heights, this function returns a list of the height of the tallest wall that can be built for each test case. results = [] for i in range(T): N = cases[i][0] heights = cases[i][1] # Sort the bricks\' heights in descending order sorted_heights = sorted(heights, reverse=True) # Sum up the sorted heights wall_height = sum(sorted_heights) results.append(wall_height) return results"},{"question":"Mary is at position 0 on an infinite road with two types of jumps: a long jump, which covers `L` meters, and a short jump, which covers `S` meters. Mary wants to reach exactly position `D` using a sequence of these jumps. Determine if Mary can reach exactly position `D` using a combination of the long and short jumps. Mary cannot jump a fractional part of either jump. ------ Input: ------ The first line contains an integer `T`, the number of test cases. Each of the following `T` test cases contains three integers `L`, `S`, and `D`. ------ Output: ------ For each test case, output \\"YES\\" if Mary can reach exactly position `D` using the given jumps, otherwise \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ L, S, D ≤ 10^9 ----- Sample Input 1 ------ 3 3 5 13 4 6 11 7 2 14 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ In the first test case, Mary can make jumps as follows: 3+5+5 = 13, so it is possible. In the second test case, Mary cannot reach 11 using jumps of 4 and 6 meters. In the third test case, Mary can make jumps as follows: 7+7 = 14, so it is possible.","solution":"def gcd(a, b): while b: a, b = b, a % b return a def can_reach(L, S, D): # Find the greatest common divisor (GCD) of L and S g = gcd(L, S) # Check if D is divisible by the GCD of L and S return D % g == 0 def mary_jumps(T, test_cases): results = [] for L, S, D in test_cases: if can_reach(L, S, D): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Sample test cases provided in the problem statement sample_input = [ (3, 5, 13), (4, 6, 11), (7, 2, 14) ]"},{"question":"------ Input ------ Ali loves experimenting with numerical series. One day, he came across a problem and found it interesting. He has an array of N integers and wants to create a new series of products. Each item in the new series is the product of all the numbers in the original array except for the one at the current index. Ali wants you to write a program to help him find this new series for multiple arrays. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the size of the array. The second line contains N space-separated integers denoting the elements of the array. ------ Output ------ For each test case, output a single line containing N space-separated integers which form the new series. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} −10^5 ≤ A[i] ≤ 10^5 ----- Sample Input 1 ------ 2 3 1 2 3 4 4 5 6 7 ----- Sample Output 1 ------ 6 3 2 210 168 140 120 ----- Explanation 1 ------ In the first example, the array is [1, 2, 3]. The new series will be: - Product excluding index 0: 2 * 3 = 6 - Product excluding index 1: 1 * 3 = 3 - Product excluding index 2: 1 * 2 = 2 In the second example, the array is [4, 5, 6, 7]. The new series will be: - Product excluding index 0: 5 * 6 * 7 = 210 - Product excluding index 1: 4 * 6 * 7 = 168 - Product excluding index 2: 4 * 5 * 7 = 140 - Product excluding index 3: 4 * 5 * 6 = 120","solution":"def product_except_self(nums): Returns a list such that each element at index i is the product of all numbers in nums except nums[i]. length = len(nums) left_products = [1] * length right_products = [1] * length result = [1] * length for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(length): result[i] = left_products[i] * right_products[i] return result def solve(test_cases): results = [] for nums in test_cases: results.append(product_except_self(nums)) return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) nums = list(map(int, lines[index + 1].split())) test_cases.append(nums) index += 2 return test_cases def format_output(results): output = [] for result in results: output.append(\\" \\".join(map(str, result))) return \\"n\\".join(output) def main(input_string): test_cases = parse_input(input_string) results = solve(test_cases) return format_output(results)"},{"question":"You are given a rectangular matrix of dimensions N x M. Each cell of the matrix contains an integer. There are Q queries, each query gives the coordinates of the top-left and bottom-right corners of a subrectangle. For each query, you need to calculate the sum of all the elements contained within the subrectangle. -----Input----- The first line of the input contains two integers N and M, denoting the dimensions of the matrix. Each of the next N lines contains M integers, representing the elements of the matrix. The next line contains an integer Q, denoting the number of queries. Each of the next Q lines contains four integers r1, c1, r2, and c2, which correspond to the row and column of the top-left corner and the row and column of the bottom-right corner of the subrectangle. -----Output----- For each query, output a single integer representing the sum of the elements within the specified subrectangle. -----Constraints----- - 1 ≤ N, M ≤ 1000 - -1000 ≤ Matrix[i][j] ≤ 1000 - 1 ≤ Q ≤ 100,000 - 1 ≤ r1 ≤ r2 ≤ N - 1 ≤ c1 ≤ c2 ≤ M -----Example----- Input: 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 1 1 3 3 Output: 12 45","solution":"def preprocess_matrix(matrix, N, M): Preprocess the matrix to create a prefix sum matrix. prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix_sum[i][j] = ( matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] ) return prefix_sum def subrectangle_sum(prefix_sum, r1, c1, r2, c2): Calculate the sum of elements in a subrectangle using the prefix sum. return ( prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1] ) def matrix_query(matrix, queries): N = len(matrix) M = len(matrix[0]) prefix_sum = preprocess_matrix(matrix, N, M) results = [] for r1, c1, r2, c2 in queries: results.append(subrectangle_sum(prefix_sum, r1, c1, r2, c2)) return results"},{"question":"Kamal is developing a messaging app and wants to implement a feature that adjusts the visibility of friends based on a dynamic blocklist. There are two lists provided: the friends list and the blocklist. Kamal can dynamically add or remove blocks. For each query, Kamal needs to return a list of friends who are not currently blocked. A friend is blocked if their name appears on the blocklist at the time of the query. Input The input consists of: - The first line contains an integer n (1 ≤ n ≤ 1000) - the number of friends. - The second line contains n space-separated strings (each string\'s length is between 1 and 10), representing the friends list. - The third line contains an integer m (1 ≤ m ≤ 1000) - the number of operations. - The following m lines describe the operations. Each operation is of one of the following types: - \\"block X\\" (X is the name of the friend to be blocked if currently not blocked). - \\"unblock X\\" (X is the name of the friend to be unblocked if currently blocked). - \\"list\\" (return the list of all friends not currently blocked). Output For each \\"list\\" operation, print the current list of unblocked friends in alphabetical order, separated by a single space. Each \\"list\\" operation should be handled in the order they appear. Example Input 5 alice bob charlie dave eve 6 block alice list block bob list unblock alice list Output bob charlie dave eve charlie dave eve alice charlie dave eve Note In the example, here\'s the step-by-step process for each operation: 1. \\"block alice\\" - Alice is blocked. 2. \\"list\\" - Alice is blocked, so the remaining: bob charlie dave eve. 3. \\"block bob\\" - Bob is blocked. 4. \\"list\\" - Alice and Bob are blocked, so the remaining: charlie dave eve. 5. \\"unblock alice\\" - Alice is unblocked. 6. \\"list\\" - Bob is blocked, so the remaining: alice charlie dave eve.","solution":"def adjust_visibility(friends, operations): blocked = set() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"block\\": blocked.add(parts[1]) elif parts[0] == \\"unblock\\": blocked.discard(parts[1]) elif parts[0] == \\"list\\": unblocked_friends = sorted(friend for friend in friends if friend not in blocked) results.append(\\" \\".join(unblocked_friends)) return results"},{"question":"You are provided with a string representing the sequence of a DNA strand. The DNA sequence should only contain characters \'A\', \'T\', \'C\', and \'G\'. Write a function that takes a DNA sequence as input and returns its complement according to the base pairing rules: A-T, T-A, C-G, G-C. Replace each nucleotide with its complement: - \'A\' with \'T\' - \'T\' with \'A\' - \'C\' with \'G\' - \'G\' with \'C\' Return the complement as a string. Examples: dna_complement(\\"ATCG\\") returns \\"TAGC\\" dna_complement(\\"TTAA\\") returns \\"AATT\\" dna_complement(\\"CGCG\\") returns \\"GCGC\\" dna_complement(\\"ACGT\\") returns \\"TGCA\\" dna_complement(\\"GATTACA\\") returns \\"CTAATGT\\"","solution":"def dna_complement(dna_sequence): Returns the complementary DNA sequence according to base pairing rules. complement_mapping = {\'A\': \'T\', \'T\': \'A\', \'C\': \'G\', \'G\': \'C\'} return \'\'.join(complement_mapping[nucleotide] for nucleotide in dna_sequence)"},{"question":"You are given N words. The task is to sort these words based on their lengths in ascending order. If two words have the same length, sort them lexicographically in ascending order. Input: The first line contains an integer N, the number of words. Each of the following N lines contains a single word. Output: Output the sorted list of words. Constraints: 1 ≤ N ≤ 1000 1 ≤ length of each word ≤ 100 SAMPLE INPUT: 5 apple pear banana kiwi peach SAMPLE OUTPUT: kiwi pear apple peach banana Explanation: In the sample test case, the words are sorted by their lengths first. If two or more words have the same length, they are sorted lexicographically.","solution":"def sort_words_by_length(words): Sorts the words based on their lengths in ascending order. If two words have the same length, sorts them lexicographically in ascending order. :param words: List of words to be sorted. :type words: list of str :return: List of sorted words. :rtype: list of str sorted_words = sorted(words, key=lambda word: (len(word), word)) return sorted_words"},{"question":"You are given a line of text that includes words and punctuation. You need to identify the k most frequently occurring words in the text. If there is a tie (i.e., multiple words with the same frequency), sort the words alphabetically and then output them in ascending order. Write a function to solve this problem. The function should take two arguments: a string containing a line of text and an integer k. Your function should return a list of the k most frequent words in the text. Constraints: - The length of the text is up to 10000 characters. - The text contains only lowercase English letters and punctuation marks (.,!?). - The value of k is a positive integer that is less than or equal to the number of unique words in the text. Input: - The first line contains an integer k. - The second line contains a string t, the text. Output: - The output should be a list of the k most frequent words ordered by their frequency. In case of a tie, sort the words alphabetically. Examples: Input: 3 \\"hello world! hello code. code, hello.\\" Output: [\\"hello\\", \\"code\\", \\"world\\"] Input: 2 \\"a quick brown fox jumps over the lazy dog. the dog was not amused.\\" Output: [\\"dog\\", \\"the\\"] To achieve this, you need an algorithm that: 1. Parses the line of text to identify words. 2. Counts the frequency of each word. 3. Sorts the words first by frequency and then alphabetically in case of ties. 4. Selects the top k words from the sorted list.","solution":"import re from collections import Counter def most_frequent_words(k, text): Identifies the k most frequently occurring words in the text. If there is a tie, it sorts the words alphabetically. # Using regex to find all words words = re.findall(r\'w+\', text.lower()) # Count the frequency of each word word_counts = Counter(words) # Sorting words first by frequency (highest first), then alphabetically in case of tie sorted_words = sorted(word_counts.items(), key=lambda x: (-x[1], x[0])) # Extract the top k words result = [word for word, count in sorted_words[:k]] return result"},{"question":"Emma is working on a new project where she needs to process a large number of strings. One of her tasks is to find the longest even length substring that can be split into two equal halves such that the sum of the digits in the first half is the same as the sum of the digits in the second half. Given a string consisting only of digits, help Emma by writing a program that finds the length of such a substring. If no such substring exists, return 0. Input The input contains a single string s, consisting only of digits. Constraints 1 ≤ |s| ≤ 10^6 Output Print the length of the longest even length substring which can be split into two halves with equal sum. SAMPLE INPUT 123123 SAMPLE OUTPUT 6 Explanation The entire string \\"123123\\" can be split into \\"123\\" and \\"123\\", and the sum of the digits in both halves is 6.","solution":"def find_longest_even_length_substring(s): def is_equal_sum(s, start, length): half_length = length // 2 sum1 = sum(int(s[start + i]) for i in range(half_length)) sum2 = sum(int(s[start + half_length + i]) for i in range(half_length)) return sum1 == sum2 n = len(s) max_len = 0 for length in range(2, n + 1, 2): for start in range(n - length + 1): if is_equal_sum(s, start, length): max_len = length return max_len"},{"question":"You are given `N` different types of items. Each item has a value associated with it and a category. The goal is to select a subset of items such that the sum of the values of the selected items is maximized, subject to the constraint that no two items from the same category can be selected. Input - The first line contains an integer `N` (1 ≤ N ≤ 10^5), the number of different items. - The following `N` lines describe the items. Each line contains three integers: - `v` (1 ≤ v ≤ 10^6): the value of the item - `c` (1 ≤ c ≤ 10^5): the category of the item - `i` (1 ≤ i ≤ N): the identifier of the item Output Print a single integer, the maximum sum of values of the selected items such that no two items from the same category are selected. Examples Input 5 10 1 1 15 2 2 20 1 3 25 3 4 30 2 5 Output 55 Explanation: - If we choose items with identifiers 1, 4, and 5, the total value is 10 + 25 + 30 = 65. - If we choose items with identifiers 1, 2, and 4, the total value is 10 + 15 + 25 = 50. - The maximum sum is obtained by choosing item 3 with value 20, item 4 with value 25, and item 5 with value 30, achieving a total value of 75.","solution":"def maximize_value(N, items): Returns the maximum sum of values of the selected items such that no two items from the same category are selected. from collections import defaultdict # Dictionary to store the maximum value item for each category category_max_value = defaultdict(int) for value, category, identifier in items: if value > category_max_value[category]: category_max_value[category] = value # The maximum sum is the sum of the maximum values from each category return sum(category_max_value.values())"},{"question":"Given a grid of size MxN consisting of \'.\' (walkable cell) and \'#\' (non-walkable cell), find the number of unique paths from the top-left corner to the bottom-right corner. You can only move down or right at any point in time. You must ensure that paths do not pass through cells marked as \'#\'. Each cell can be visited only once in a path. Constraints 1 ≤ M, N ≤ 100 The grid will contain only the characters \'.\' and \'#\'. Input The first line contains two integers M and N separated by a space. The next M lines each contain a string of N characters representing the grid. Output Print the number of unique paths from the top-left corner to the bottom-right corner. SAMPLE INPUT 3 3 . .. .#. ... SAMPLE OUTPUT 2 Explanation: The two unique paths are: 1. (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) 2. (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2)","solution":"def num_ways(grid): M = len(grid) N = len(grid[0]) if grid[0][0] == \'#\' or grid[M-1][N-1] == \'#\': return 0 dp = [[0] * N for _ in range(M)] dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[M-1][N-1] def unique_paths(m, n, grid): return num_ways(grid)"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For this task, we will focus on string palindromes. Given a string s, your task is to transform s into a palindrome with the minimum number of insertions or deletions possible. -----Input----- The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The following t lines each contain a single string s (1 ≤ |s| ≤ 1000) — the string to be transformed into a palindrome. Strings s consist of lowercase English letters only. -----Output----- For each test case, output a single integer — the minimum number of insertions or deletions needed for the given string to become a palindrome. -----Examples----- Input 3 abc racecar xyz Output 2 0 2 -----Explanation----- In the first case, \\"abc\\" can be transformed into a palindrome with 2 operations: add a \'b\' at the end and then add an \'a\' at the beginning to get \\"bacab\\" or \\"abccba\\". In the second case, \\"racecar\\" is already a palindrome and requires 0 operations. In the third case, \\"xyz\\" can be transformed into a palindrome with 2 operations: remove \'y\' and then add \'y\' or \'z\' to get \\"xzx\\" or \\"zyz\\".","solution":"def min_insertions_deletions_to_palindrome(s): def lcs(X, Y): m = len(X) n = len(Y) L = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i-1] == Y[j-1]: L[i][j] = L[i-1][j-1] + 1 else: L[i][j] = max(L[i-1][j], L[i][j-1]) return L[m][n] rev_s = s[::-1] lcs_length = lcs(s, rev_s) return len(s) - lcs_length def process_palindrome_cases(test_cases): results = [] for case in test_cases: results.append(min_insertions_deletions_to_palindrome(case)) return results"},{"question":"Peter loves playing trivia games that involve words and numbers. Recently, he came across a challenging puzzle where he was given a string consisting of lowercase alphabets and digits. His task is to rearrange the string such that all the alphabets are sorted in ascending order and all the digits are sorted in descending order. The rearranged string should maintain the order of alphabets to the left and digits to the right. Help Peter by writing a function that takes a string as input and outputs the desired rearranged string. ------ Input Format ------ - A single line containing the string S consisting of lowercase alphabets and digits. ------ Output Format ------ - A single line containing the rearranged string such that all the alphabets come first in sorted order and all the digits come later in sorted order (descending). ------ Constraints ------ 1 ≤ len(S) ≤ 10^5 ------ Sample Input 1 ------ a1c3b2 ------ Sample Output 1 ------ abc321 ------ Sample Input 2 ------ z9x8y7 ------ Sample Output 2 ------ xyz987 ------ Sample Input 3 ------ a1a1a1 ------ Sample Output 3 ------ aaa111","solution":"def rearrange_string(s): Rearrange the input string such that all the alphabets are sorted in ascending order and all the digits are sorted in descending order, with alphabets coming first. Args: s (str): Input string consisting of lowercase alphabets and digits Returns: str: Rearranged string as per the requirement alphabets = sorted([ch for ch in s if ch.isalpha()]) digits = sorted([ch for ch in s if ch.isdigit()], reverse=True) return \'\'.join(alphabets + digits)"},{"question":"Detective Edgar is investigating a series of coded messages. Each message is constructed using a series of operations on a string `S` containing only characters \'a\' and \'b\'. Initially, both `S` and an auxiliary string `T` are empty. Each operation is one of the following: 1. Append an \'a\' to `S` - This operation can be performed if and only if `S` still contains fewer than K `a`s. 2. Append a \'b\' to `S` - This operation can be performed if and only if `S` still contains fewer than K `b`s. 3. Shuffle - This operation swaps every character \'a\' in `S` with the next \'b\' in `S`. 4. Copy - Copy the current string `S` to `T`. Messages can be described by the sequence of operations leading to the formation of `S`. Detective Edgar needs to determine if a given target string `Q` can be obtained as the auxiliary string `T` after precisely `N` operations. Write a function to help Detective Edgar determine whether the target string `Q` can be formed after exactly `N` operations on `S`. ------ Input Format ------ - The first line will contain an integer `L`, the number of test cases `1 ≤ L ≤ 70`. - Each of the following L lines contains the three integers `N`, `K` and the string `Q`. ------ Output Format ------ For each test case, output \\"YES\\" if it is possible to form the string `Q` in exactly `N` operations, otherwise output \\"NO\\". ------ Constraints ------ - 1 ≤ N ≤ 500 - 1 ≤ K ≤ 500 - 1 ≤ Length of `Q` ≤ 1000 ------ Sample Input 1 ------ 4 5 3 abb 4 4 bb 6 2 aaab 7 2 abba ------ Sample Output 1 ------ YES YES NO NO ------ Explanation 1 ------ Test Case 1: - Operation 1: Append \'a\' to `S` -> S = \\"a\\" - Operation 2: Append \'b\' to `S` -> S = \\"ab\\" - Operation 3: Append \'b\' to `S` -> S = \\"abb\\" - Operation 4: Copy `S` to `T` -> T = \\"abb\\" - Therefore, T matches `Q` after 4 operations, followed by no operation needed. Test Case 2: - Operation 1: Append \'b\' to `S` -> S = \\"b\\" - Operation 2: Append \'b\' to `S` -> S = \\"bb\\" - Operation 3: Copy `S` to `T` -> T = \\"bb\\" - Therefore, T matches `Q` after 3 operations, followed by no operation needed. Test Case 3: - Operation 1: Append \'a\' to `S` -> S = \\"a\\" - Operation 2: Append \'a\' to `S` -> S = \\"aa\\" - Operation 3: Append \'a\' to `S` -> S = \\"aaa\\" (Limit for `a` reached) - No possible way to get `aaab` in 6 operations given the `K` constraint. Test Case 4: - Operation 1: Append \'a\' to `S` -> S = \\"a\\" - Operation 2: Append \'b\' to `S` -> S = \\"ab\\" - Operation 3: Append \'b\' to `S` -> S = \\"abb\\" - Operation 4: Shuffle -> S = \\"bab\\" - Cannot get both \'a\' characters together with `K=2` and only `N=2` allowed. Thus the answer is \\"NO\\".","solution":"def can_form_string(L, test_cases): results = [] for i in range(L): N, K, Q = test_cases[i] len_Q = len(Q) cnt_a = Q.count(\'a\') cnt_b = Q.count(\'b\') if cnt_a <= K and cnt_b <= K and N >= len_Q and (N - len_Q) % 2 == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Create a function that calculates the sum of all odd numbers in a given list of integers. If the list is empty or null, the function should return 0. For example: ```python sum_odd_numbers([1, 2, 3, 4, 5]) # should return 9 (1 + 3 + 5) sum_odd_numbers([]) # should return 0 sum_odd_numbers(None) # should return 0 ``` ```Haskell sumOddNumbers [1, 2, 10, 7, 5] = 13 -- 1 + 7 + 5 sumOddNumbers [] = 0 ```","solution":"def sum_odd_numbers(lst): Returns the sum of all odd numbers in the given list. If the list is empty or None, returns 0. if lst is None or len(lst) == 0: return 0 return sum(num for num in lst if num % 2 != 0)"},{"question":"# Task Aria is trying to organize her library of books. She wants to sort the books based on their titles, but since she has a large number of books, she needs an efficient system to help her in sorting. Aria\'s library system assigns each book a unique identifier, which is an integer, and a title, which is a string. Your task is to implement a function that will take a list of books, each represented as a tuple consisting of the identifier and the title, and return the list of books sorted alphabetically by their titles. If two books have the same title, they should be sorted by their identifiers in ascending order. # Example For `books = [(3, \'The Hobbit\'), (1, \'A Tale of Two Cities\'), (2, \'A Tale of Two Cities\'), (4, \'Moby Dick\')]` the result should be `[(1, \'A Tale of Two Cities\'), (2, \'A Tale of Two Cities\'), (4, \'Moby Dick\'), (3, \'The Hobbit\')]`. After sorting by title and then by identifier, the book list is ordered as above. # Input/Output - `[input]` list of tuples `books` - A list where each element is a tuple `(id, title)` - `id` is an integer representing the unique identifier of the book - `title` is a string representing the title of the book - `1 <= id <= 10^9` - The length of the list does not exceed `10^5` elements. - `[output]` list of tuples - The list of books sorted based on the specified criteria.","solution":"def sort_books(books): Returns a list of books sorted by title and then by identifier. Parameters: - books: list of tuples, where each tuple contains an identifier (int) and a title (str) Returns: - list of tuples sorted by title, and then by identifier if titles are the same return sorted(books, key=lambda book: (book[1], book[0]))"},{"question":"You are given a collection of book titles and their associated genres. Your task is to categorize these books into their respective genres and print them in alphabetical order within each genre. Input - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of book titles. - The next `n` lines each contain a string representing a book title, followed by a colon (`:`) and a genre (For example, `The Great Gatsby:Fiction`). Output - For each genre, print the genre followed by a colon on a new line. - For each book in that genre, print the book title indented by two spaces on the next line. - The genres and the books within each genre should be printed in alphabetical order. Examples Input ``` 5 1984:Science Fiction The Hobbit:Fantasy The Great Gatsby:Fiction Foundation:Science Fiction To Kill a Mockingbird:Fiction ``` Output ``` Fantasy: The Hobbit Fiction: The Great Gatsby To Kill a Mockingbird Science Fiction: 1984 Foundation ``` Note - Each book title is guaranteed to be unique within the input. - You can assume genres and book titles do not contain colons except between the title and genre identifier.","solution":"def categorize_books(n, books): from collections import defaultdict categorized_books = defaultdict(list) # Parse the input and categorize books for book in books: title, genre = book.split(\':\') categorized_books[genre].append(title) # Sort genres and book titles sorted_genres = sorted(categorized_books.keys()) result = [] for genre in sorted_genres: result.append(f\\"{genre}:\\") for title in sorted(categorized_books[genre]): result.append(f\\" {title}\\") return \\"n\\".join(result)"},{"question":"Digit Frequency Counter --------------------- Write a function that takes a non-negative integer as an input and returns an array where the value at each index `i` represents the count of digit `i` in the input integer. The input is guaranteed to be a non-negative integer. Example: ```python digit_frequency(112233) # [0, 2, 2, 2, 0, 0, 0, 0, 0, 0] digit_frequency(9988776655) # [0, 0, 0, 0, 0, 2, 2, 2, 2, 2] ```","solution":"def digit_frequency(n): Returns an array where the value at each index i represents the count of digit i in the input integer n. # Initialize a list of size 10 to store the frequency of each digit (0-9) frequency = [0] * 10 # Convert the number to a string to easily iterate through each digit num_str = str(n) # Traverse each character in the string for char in num_str: digit = int(char) # Convert character to digit frequency[digit] += 1 # Increment the count for the digit return frequency"},{"question":"Alice is an aspiring mathematician and she loves to play with numbers. One day, she came across a sequence of numbers and wanted to find a special characteristic about them. Given an array of n integers, Alice wants to determine the number of contiguous subarrays that have an even sum. For instance, in the array [1, 2, 3, 4], the subarrays with even sums are: [2], [1, 2, 3], [3, 4], [4]. Function Description Complete the function `evenSumSubarrays` in the editor below. `evenSumSubarrays` has the following parameter(s): `int arr[n]`: An array of integers of length n Returns `int`: The number of contiguous subarrays that have an even sum Input Format The first line contains an integer t, the number of test cases. The next t lines each contain: - An integer n, the length of the array - An array of n integers Constraints (1 leq t leq 10) (1 leq n leq 10^5) (-10^4 leq arr[i] leq 10^4) Sample Input ``` 2 4 1 2 3 4 3 2 4 6 ``` Sample Output ``` 4 6 ``` Explanation In the first test case, the subarrays with even sums are [2], [1, 2, 3], [3, 4], and [4], totaling 4 subarrays. In the second test case, all possible subarrays ([2], [4], [6], [2, 4], [4, 6], [2, 4, 6]) have even sums, totaling 6 subarrays.","solution":"def evenSumSubarrays(arr): even_count = 1 # Initially consider empty subarray that sums to 0 which is even odd_count = 0 current_sum = 0 result = 0 for num in arr: current_sum += num if current_sum % 2 == 0: # Even sum result += even_count even_count += 1 else: # Odd sum result += odd_count odd_count += 1 return result def evenSumSubarrays_testcases(t, testcases): results = [] for case in testcases: n, arr = case results.append(evenSumSubarrays(arr)) return results"},{"question":"Given an array of integers, calculate the product of all elements and return the result. However, if any element is zero, you should return zero immediately without performing the multiplication to save computation time. Input An array of integers where the size of the array can range from 1 to 100, and the elements of the array can be any integer between -100 and 100. Output The product of all elements in the array, or zero if any element is zero. Example Input [-2, 3, 5, 7] Output -210 Input [4, 0, 9, 15] Output 0","solution":"def product_of_array(arr): Calculate the product of all elements in the array. If any element is zero, return zero immediately. product = 1 for num in arr: if num == 0: return 0 product *= num return product"},{"question":"Given a list of integers `arr` and an integer `k`, your task is to determine the maximum number of unique integers that can be seen consecutively in a window of size `k`. Example 1: Input: arr = [1, 2, 1, 3, 4, 2, 3] k = 4 Output: 4 Explanation: The window size is 4, and the subarrays are: [1, 2, 1, 3] -> 3 unique integers (1, 2, 3) [2, 1, 3, 4] -> 4 unique integers (2, 1, 3, 4) [1, 3, 4, 2] -> 4 unique integers (1, 3, 4, 2) [3, 4, 2, 3] -> 3 unique integers (3, 4, 2) The maximum number of unique integers in a window of size 4 is 4. Example 2: Input: arr = [4, 1, 1, 3, 1, 1, 4] k = 3 Output: 2 Explanation: The window size is 3, and the subarrays are: [4, 1, 1] -> 2 unique integers (4, 1) [1, 1, 3] -> 2 unique integers (1, 3) [1, 3, 1] -> 2 unique integers (1, 3) [3, 1, 1] -> 2 unique integers (3, 1) [1, 1, 4] -> 2 unique integers (1, 4) The maximum number of unique integers in a window of size 3 is 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxUniqueSubarray()` which takes an integer array `arr` and an integer `k` as input and returns the maximum number of unique integers in a window of size `k`. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= len(arr) <= 10^5 1 <= arr[i] <= 10^6 1 <= k <= len(arr)","solution":"def maxUniqueSubarray(arr, k): Returns the maximum number of unique integers seen consecutively in a window of size k. if len(arr) < k: return 0 max_unique = 0 window_counter = {} unique_count = 0 # Initialize the first window for i in range(k): if arr[i] in window_counter: window_counter[arr[i]] += 1 else: window_counter[arr[i]] = 1 unique_count += 1 max_unique = unique_count # Slide the window for i in range(k, len(arr)): # Remove the element that is sliding out of the window if window_counter[arr[i - k]] == 1: unique_count -= 1 window_counter[arr[i - k]] -= 1 if window_counter[arr[i - k]] == 0: del window_counter[arr[i - k]] # Add the new element if arr[i] in window_counter: window_counter[arr[i]] += 1 else: window_counter[arr[i]] = 1 unique_count += 1 # Update the max unique count max_unique = max(max_unique, unique_count) return max_unique"},{"question":"In a parking lot, cars arrive and park in a single row sequentially. Each car takes up a space for a specific amount of time before leaving. The parking lot can only accommodate a maximum of K cars at any given time. Given the arrival and departure times of N cars, determine if all cars can park without waiting, assuming they arrive and depart in the order given and do not change their parking times. Constraints * 1 ≤ N ≤ 100,000 * 1 ≤ K ≤ 50 * 1 ≤ arrival_i < departure_i ≤ 10^9 * arrival_i and departure_i are integers. Input Input is given from Standard Input in the following format: N K arrival_1 departure_1 arrival_2 departure_2 ... arrival_N departure_N Output Output \\"Yes\\" if all cars can park without waiting, otherwise output \\"No\\". Examples Input 3 2 1 4 2 5 5 8 Output Yes Input 3 1 1 4 2 5 5 8 Output No Input 5 3 1 10 2 9 3 8 4 7 5 6 Output No Input 4 2 5 10 6 9 11 15 16 20 Output Yes","solution":"def can_all_cars_park(n, k, timings): Determines if all cars can park without waiting in a parking lot with maximum K parking spots. Parameters: n (int): Number of cars. k (int): Maximum number of cars that can be parked at the same time. timings (List[Tuple[int, int]]): List of tuples where each tuple contains arrival and departure times of a car. Returns: str: \\"Yes\\" if all cars can park without waiting, otherwise \\"No\\". events = [] for arrival, departure in timings: events.append((arrival, \'arrival\')) events.append((departure, \'departure\')) events.sort() current_cars = 0 for time, event in events: if event == \'arrival\': current_cars += 1 if current_cars > k: return \\"No\\" else: current_cars -= 1 return \\"Yes\\""},{"question":"You are given an online store that sells n different types of products. Each product has a unique integer id from 1 to n. The stock of each product type changes dynamically as customers place orders. There are two types of transactions that happen in this store: 1. Restock: An operation that adds a certain quantity to a particular product\'s stock. 2. Purchase: An operation that decreases a certain quantity from a particular product\'s stock. For each transaction, you need to determine the stock level of the product after the operation. It\'s also important to note that the stock levels of products can\'t go below zero. If a purchase operation tries to reduce the stock of a product below zero, it should only decrease the stock to zero and note an \\"Insufficient stock\\" warning for that operation. Input The first line contains one integer n (1 ≤ n ≤ 100,000) — the number of different product types. The second line contains n integers s_1, s_2, ..., s_n (0 ≤ s_i ≤ 1,000) — the initial stock of each product type. The third line contains one integer q (1 ≤ q ≤ 200,000) — the number of transactions. Each of the next q lines contains a transaction description: - A letter \'R\' or \'P\' indicating restock or purchase, followed by two integers id and qty (1 ≤ id ≤ n, 1 ≤ qty ≤ 1,000). Output For each transaction, output the stock level of the product after the transaction. For purchase transactions that result in negative stock, also output the text \\"Insufficient stock\\". Examples Input 5 10 20 30 40 50 6 R 3 15 P 4 45 P 2 10 R 1 5 P 5 60 P 1 20 Output 45 0 Insufficient stock 10 15 0 Insufficient stock 0 Insufficient stock Note In the given example: - The initial stock levels are [10, 20, 30, 40, 50]. - The first transaction restocks 15 units to product 3, making its stock 45. - The second transaction tries to purchase 45 units from product 4, which only has 40. The stock becomes 0, and an \\"Insufficient stock\\" warning is issued. - The third transaction successfully purchases 10 units from product 2, reducing its stock to 10. - The fourth transaction restocks 5 units to product 1, making its stock 15. - The fifth transaction tries to purchase 60 units from product 5, which only has 50. The stock becomes 0, and an \\"Insufficient stock\\" warning is issued. - The sixth transaction tries to purchase 20 units from product 1, which only has 15. The stock becomes 0, and an \\"Insufficient stock\\" warning is issued.","solution":"def update_stock(n, initial_stock, transactions): Update stock levels based on transactions. Parameters: n: int - The number of product types. initial_stock: List[int] - The initial stock levels for each product. transactions: List[Tuple[str, int, int]] - A list of transactions where each transaction is a tuple of (\'R\'/\'P\', product_id, quantity). Returns: List[str] - A list of results after each transaction. stock = initial_stock[:] results = [] for transaction in transactions: op = transaction[0] product_id = transaction[1] - 1 quantity = transaction[2] if op == \'R\': stock[product_id] += quantity results.append(f\\"{stock[product_id]}\\") elif op == \'P\': if stock[product_id] < quantity: stock[product_id] = 0 results.append(f\\"0 Insufficient stock\\") else: stock[product_id] -= quantity results.append(f\\"{stock[product_id]}\\") return results"},{"question":"Chef has a box of colored marbles. Each marble has a color and a number of points associated with it. Chef is allowed to pick up marbles from the box such that the total points he collects does not exceed a given maximum limit P. Chef wants to maximize the number of marbles he can pick while keeping the total points within the limit P. Given the colors and points of each marble along with the maximum points limit P, find the maximum number of marbles Chef can pick. ------ Input ------ The first line contains a single integer T denoting the number of test cases. The first line of each test case contains two integers N and P. The next line contains N integers representing the points of each marble. ------ Output ------ For each test case, print a single line containing the maximum number of marbles Chef can pick without exceeding the points limit. ------ Constraints ------ 1 ≤ T ≤ 5 1 ≤ N ≤ 10^{5} 1 ≤ P ≤ 10^{9} 1 ≤ text{points of each marble} ≤ 10^{5} ------ Sample Input 1 ------ 2 3 10 4 7 2 5 15 1 3 5 9 4 ------ Sample Output 1 ------ 2 4 ------ Explanation 1 ------ For the first test case, if Chef picks marbles with 4 and 2 points, the total points are 6, and he can pick 2 marbles without exceeding the limit of 10. Picking any other combination does not result in a higher number of marbles within the limit. For the second test case, Chef can pick marbles with 1, 3, 5, and 4 points, totaling 13 points, and he can pick 4 marbles without exceeding the limit of 15.","solution":"def max_marbles(test_cases): results = [] for N, P, points in test_cases: points.sort() current_sum = 0 marbles_count = 0 for point in points: if current_sum + point > P: break current_sum += point marbles_count += 1 results.append(marbles_count) return results"},{"question":"You are building a networked system that will handle various services over a set of nodes. Each node can handle a specified capacity, and each service request requires a particular capacity. The system should ensure that each service request is assigned to exactly one node, and no node should exceed its capacity. Assume: - You have N nodes, each with a maximum capacity C_i (1 ≤ i ≤ N). - You have M service requests, each requiring a specific capacity D_j (1 ≤ j ≤ M). - It is guaranteed that the sum of all service request capacities is less than or equal to the sum of all node capacities. You need to determine whether it is possible to assign each service request to exactly one node without exceeding any node\'s capacity. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ M ≤ 100 - 1 ≤ C_i ≤ 1000 - 1 ≤ D_j ≤ 1000 -----Input----- Input is given from Standard Input in the following format: N M C_1 C_2 ... C_N D_1 D_2 ... D_M -----Output----- If it is possible to assign all service requests to the nodes without exceeding any node\'s capacity, print \\"Possible\\". Otherwise, print \\"Impossible\\". -----Sample Input----- 3 4 6 7 8 4 3 5 2 -----Sample Output----- Possible Note: One possible assignment could be: - The first node with a capacity of 6 handles requests of capacities 4 and 2. - The second node with a capacity of 7 handles a request of capacity 3. - The third node with a capacity of 8 handles a request of capacity 5. In this way, no node exceeds its capacity, and all requests are handled.","solution":"def can_assign_requests_to_nodes(N, M, capacities, demands): capacities.sort(reverse=True) demands.sort(reverse=True) for demand in demands: assigned = False for i in range(N): if capacities[i] >= demand: capacities[i] -= demand assigned = True break if not assigned: return \\"Impossible\\" return \\"Possible\\" def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) capacities = list(map(int, data[2:N+2])) demands = list(map(int, data[N+2:N+2+M])) print(can_assign_requests_to_nodes(N, M, capacities, demands)) if __name__ == \\"__main__\\": main()"},{"question":"David recently learned about data compression and is fascinated by run-length encoding (RLE) as a form of compression. To practice, he decided to write a function that performs RLE on a given string. Given a string, the function should return a new string where sequences of the same character are replaced by the character followed by the number of occurrences of that character. Input: First line of input consists of T the number of test cases. Each test case consists of a single string. Output: For each test case print, in a new line, the run-length encoded string. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10000 Strings S are made of upper case and lower case letters only. SAMPLE INPUT 2 aaabbc aBcD SAMPLE OUTPUT a3b2c1 a1B1c1D1 Explanation In the first test case, the string \\"aaabbc\\" is compressed as follows: \'a\' appears three times, \'b\' appears two times, and \'c\' appears once. In the second test case, each character appears only once, so the output is each character followed by 1.","solution":"def run_length_encode(s): Compresses the input string s using run-length encoding. if not s: return \\"\\" encoded_string = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: encoded_string.append(f\\"{current_char}{count}\\") current_char = char count = 1 encoded_string.append(f\\"{current_char}{count}\\") return \\"\\".join(encoded_string) def rle_multiple_strings(T, strings): Applies run-length encoding to multiple strings. Args: - T: Number of strings (test cases) - strings: List of strings to be compressed Returns: - List containing RLE compressed strings result = [] for s in strings: result.append(run_length_encode(s)) return result"},{"question":"Given an array of N integers where 1 ≤ N ≤ 100000 and -100000 ≤ each element ≤ 100000. Your task is to find a contiguous subarray with the largest sum and output the sum of this subarray. This problem is a nuanced variant of the classical maximum subarray problem known as the Kadane\'s algorithm. -----Constraints----- - 1 ≤ N ≤ 100000 - -100000 ≤ A[i] ≤ 100000 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print the sum of the contiguous subarray with the largest sum. -----Sample Input----- 9 -2 1 -3 4 -1 2 1 -5 4 -----Sample Output----- 6 Explanation: The contiguous subarray with the largest sum is [4, -1, 2, 1], which has sum 6.","solution":"def max_subarray_sum(arr): Finds the contiguous subarray with the largest sum. Parameters: arr (list of int): The input array of integers. Returns: int: The sum of the contiguous subarray with the largest sum. max_end_here = max_so_far = arr[0] for num in arr[1:]: max_end_here = max(num, max_end_here + num) max_so_far = max(max_so_far, max_end_here) return max_so_far"},{"question":"Monocarp likes to collect coins laid on the ground. There are n piles of coins, each pile containing some non-zero number of coins. Monocarp can either pick up a pile of coins as it is or split a pile into two smaller non-empty piles and pick one of those smaller piles. However, Monocarp only wants to pick up piles that are prime numbers. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Monocarp wants to maximize the number of piles he can pick up in a single operation (either by selecting an existing pile or by splitting a pile into two non-empty smaller piles and taking one of those). If it is not possible to pick any prime pile from a given set, he simply moves on to the next set. Determine the maximum number of prime piles Monocarp can pick up from each set of coins in a single move. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains an integer n (1 le n le 10^5) — the number of piles. The second line of each test case contains n integers p_1, p_2, dots, p_n (1 le p_i le 10^6) — the number of coins in each pile. Additional constraint on the input: the total sum of n over all t test cases doesn\'t exceed 10^5. -----Output----- For each test case, print a single integer — the maximum number of prime piles Monocarp can pick up in a single move or 0 if no prime pile can be picked. -----Examples----- Input 3 3 5 4 9 4 6 8 10 15 5 17 19 23 6 45 Output 1 0 3 -----Note----- In the first test case, Monocarp can pick up the pile with 5 coins because it is a prime number. 4 and 9 are not prime numbers, so they can\'t be taken. In the second test case, none of the piles have a prime number of coins, so Monocarp cannot pick up any pile, and the output is 0. In the third test case, Monocarp can pick up any of the three piles with 17, 19, or 23 coins as they all are prime numbers.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def max_prime_piles(t, test_cases): results = [] for i in range(t): n, piles = test_cases[i] prime_piles_count = sum(1 for pile in piles if is_prime(pile)) results.append(prime_piles_count) return results"},{"question":"In a given sequence of positive integers, determine the number of pairs (i, j) such that 1 <= i < j <= N and (i + j) is an odd number. -----Constraints----- - The number of elements in the sequence, N (1 leq N leq 10^5). - Each element in the sequence is an integer (1 leq Element leq 10^9). -----Input----- Input is given from Standard Input in the following format: N A1 A2 ... AN -----Output----- Print an integer representing the number of pairs (i, j) with 1 <= i < j <= N and (i + j) is an odd number. -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 10 Explanation: All pairs (i, j) are: (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5) Each pair satisfies the condition (i + j) is an odd number.","solution":"def count_odd_sum_pairs(N, sequence): Count the number of pairs (i, j) such that 1 <= i < j <= N and (i + j) is an odd number. :param N: number of elements in the sequence :param sequence: list of integers representing the sequence :return: an integer representing the number of valid pairs # All pairs (i, j) with i < j will have odd (i + j) # The sum of first N-1 natural numbers is (N-1)*N/2 return (N-1) * N // 2"},{"question":"Alex is learning about data structures and has been given an assignment to find the second smallest element in a list of integers. He needs your help to write a program that will solve this problem. Input First line contains an integer \'T\' which denotes the number of test cases. Next T lines contain a list of space-separated integers. Output Print the second smallest element for each test case in a new line. If a list has fewer than 2 distinct elements, output \\"Not enough elements\\". Constraints 1 ≤ T ≤ 10 Each list contains at least 1 and at most 1000 integers. SAMPLE INPUT 3 1 2 3 4 5 9 9 9 8 2 6 8 3 2 SAMPLE OUTPUT 2 Not enough elements 3","solution":"def find_second_smallest(nums): Returns the second smallest distinct integer in a list of integers. If there are fewer than 2 distinct elements, returns \\"Not enough elements\\". unique_nums = list(set(nums)) if len(unique_nums) < 2: return \\"Not enough elements\\" unique_nums.sort() return unique_nums[1] def process_test_cases(T, test_cases): Process multiple test cases to find their second smallest elements. Args: T : int : number of test cases test_cases : list of list of int : the test cases Returns: List of results for each test case results = [] for case in test_cases: result = find_second_smallest(case) results.append(result) return results"},{"question":"You are given two strings, S and T, consisting of uppercase love alphabets (A-Z). Your task is to determine if you can make T from S by rearranging the letters. Note the counts of each individual letter must match in both strings. ------ Input Format ------ - The first line contains an integer N, the number of test cases. - Each test case consists of a single line containing the strings S and T, separated by a space. ------ Output Format ------ For each test case, output in a single line YES if you can make T from S, otherwise NO. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ |S|, |T| ≤ 100 ------ Sample Input 1 ------ 3 ABACUS CASUBA HELLO OLEHL WORLD WORD ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ Test Case 1: The string T can be formed by rearranging the letters of the string S. Test Case 2: The string T can be formed by rearranging the letters of the string S. Test Case 3: The string T cannot be formed by rearranging the letters of the string S, since the counts of letters do not match.","solution":"def can_rearrange_to_form(S, T): Determines if string T can be made from string S by rearranging the letters. :param S: Source string :param T: Target string :return: \\"YES\\" if T can be made from S, otherwise \\"NO\\" return \\"YES\\" if sorted(S) == sorted(T) else \\"NO\\" def process_test_cases(test_cases): results = [] for case in test_cases: S, T = case.split() results.append(can_rearrange_to_form(S, T)) return results"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const a=this.searchQuery.trim().toLowerCase();return a?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(a)||e.solution&&e.solution.toLowerCase().includes(a)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(a=>setTimeout(a,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},C={class:"card-container"},j={key:0,class:"empty-state"},Y=["disabled"],P={key:0},M={key:1};function R(a,e,u,m,s,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",j,' No results found for "'+h(s.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[s.isLoading?(n(),i("span",M,"Loading...")):(n(),i("span",P,"See more"))],8,Y)):l("",!0)])}const L=d(A,[["render",R],["__scopeId","data-v-3ac73719"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/16.md","filePath":"chatai/16.md"}'),z={name:"chatai/16.md"},U=Object.assign(z,{setup(a){return(e,u)=>(n(),i("div",null,[x(L)]))}});export{B as __pageData,U as default};
